{
  "info": {
    "author": "Clark DuVall, Sergen Pek≈üen",
    "author_email": "clark.duvall@gmail.com, peksensergen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "## drf-serpy: ridiculously fast object serialization\r\r\n\r\r\n[![Travis-CI](https://travis-ci.org/clarkduvall/serpy.svg?branch=master)](https://travis-ci.org/clarkduvall/serpy?branch=master)\r\r\n\r\r\n[![Coveralls](https://coveralls.io/repos/clarkduvall/serpy/badge.svg?branch=master)](https://coveralls.io/r/clarkduvall/serpy?branch=master)\r\r\n\r\r\n[![Documentation Status](https://readthedocs.org/projects/drf-serpy/badge/?version=latest)](https://readthedocs.org/projects/drf-serpy/?badge=latest)\r\r\n\r\r\n[![PyPI version](https://badge.fury.io/py/drf-serpy.svg)](https://badge.fury.io/py/drf-serpy)\r\r\n\r\r\n**drf-serpy** is a super simple object serialization framework built for speed. **drf-serpy** serializes complex datatypes (Django Models, custom classes, ...) to simple native types (dicts, lists, strings, ...). The native types can easily be converted to JSON or any other format needed.\r\r\n\r\r\nThe goal of **drf-serpy** is to be able to do this *simply*, *reliably*, and *quickly*. Since serializers are class based, they can be combined, extended and customized with very little code duplication. This project aims to replace the DRF serializer in terms of *deserialization*.\r\r\n\r\r\n Compared to other popular Python serialization frameworks like [Django Rest Framework Serializers](http://www.django-rest-framework.org/api-guide/serializers/)\r\r\n**drf-serpy** is at least an [order of magnitude](http://serpy.readthedocs.org/en/latest/performance.html)\r\r\nfaster.\r\r\n\r\r\nSource\r\r\n------\r\r\n\r\r\nSource at: <https://github.com/sergenp/drf-serpy>\r\r\n\r\r\nIf you want a feature, send a pull request!\r\r\n\r\r\nDocumentation\r\r\n-------------\r\r\n\r\r\nFull documentation at: <https://drf-serpy.readthedocs.io/en/latest/>\r\r\n\r\r\nInstallation\r\r\n------------\r\r\n\r\r\nNote that this project is aimed for **Django Rest Framework** and does not intend to provide deserialization to other frameworks. Original [serpy](https://github.com/clarkduvall/serpy) repository can be used for such cases. This is mainly because of the added *drf-yasg* for swagger generation for the *drf-serpy serializers*.\r\r\n\r\r\n```bash\r\r\n$ pip install drf-serpy\r\r\n```\r\r\n\r\r\nExamples\r\r\n--------\r\r\n\r\r\n### Simple Example\r\r\n\r\r\n```python\r\r\nimport drf_serpy as serpy\r\r\n\r\r\nclass Foo(object):\r\r\n    \"\"\"The object to be serialized.\"\"\"\r\r\n    y = 'hello'\r\r\n    z = 9.5\r\r\n\r\r\n    def __init__(self, x):\r\r\n        self.x = x\r\r\n\r\r\n\r\r\nclass FooSerializer(serpy.Serializer):\r\r\n    \"\"\"The serializer schema definition.\"\"\"\r\r\n    # Use a Field subclass like IntField if you need more validation.\r\r\n    x = serpy.IntField()\r\r\n    y = serpy.Field()\r\r\n    z = serpy.Field()\r\r\n\r\r\nf = Foo(1)\r\r\nFooSerializer(f).data\r\r\n# {'x': 1, 'y': 'hello', 'z': 9.5}\r\r\n\r\r\nfs = [Foo(i) for i in range(100)]\r\r\nFooSerializer(fs, many=True).data\r\r\n# [{'x': 0, 'y': 'hello', 'z': 9.5}, {'x': 1, 'y': 'hello', 'z': 9.5}, ...]\r\r\n```\r\r\n\r\r\n### Nested Example\r\r\n\r\r\n```python\r\r\nimport drf_serpy as serpy\r\r\n\r\r\nclass Nestee(object):\r\r\n    \"\"\"An object nested inside another object.\"\"\"\r\r\n    n = 'hi'\r\r\n\r\r\n\r\r\nclass Foo(object):\r\r\n    x = 1\r\r\n    nested = Nestee()\r\r\n\r\r\n\r\r\nclass NesteeSerializer(serpy.Serializer):\r\r\n    n = serpy.Field()\r\r\n\r\r\n\r\r\nclass FooSerializer(serpy.Serializer):\r\r\n    x = serpy.Field()\r\r\n    # Use another serializer as a field.\r\r\n    nested = NesteeSerializer()\r\r\n\r\r\nf = Foo()\r\r\nFooSerializer(f).data\r\r\n# {'x': 1, 'nested': {'n': 'hi'}}\r\r\n```\r\r\n\r\r\n### Complex Example\r\r\n\r\r\n```python\r\r\nimport drf_serpy as serpy\r\r\n\r\r\nclass Foo(object):\r\r\n    y = 1\r\r\n    z = 2\r\r\n    super_long_thing = 10\r\r\n\r\r\n    def x(self):\r\r\n        return 5\r\r\n\r\r\n\r\r\nclass FooSerializer(serpy.Serializer):\r\r\n    w = serpy.Field(attr='super_long_thing')\r\r\n    x = serpy.Field(call=True)\r\r\n    plus = serpy.MethodField()\r\r\n\r\r\n    def get_plus(self, obj):\r\r\n        return obj.y + obj.z\r\r\n\r\r\nf = Foo()\r\r\nFooSerializer(f).data\r\r\n# {'w': 10, 'x': 5, 'plus': 3}\r\r\n```\r\r\n\r\r\n### Inheritance Example\r\r\n\r\r\n```python\r\r\nimport drf_serpy as serpy\r\r\n\r\r\nclass Foo(object):\r\r\n    a = 1\r\r\n    b = 2\r\r\n\r\r\n\r\r\nclass ASerializer(serpy.Serializer):\r\r\n    a = serpy.Field()\r\r\n\r\r\n\r\r\nclass ABSerializer(ASerializer):\r\r\n    \"\"\"ABSerializer inherits the 'a' field from ASerializer.\r\r\n\r\r\n    This also works with multiple inheritance and mixins.\r\r\n    \"\"\"\r\r\n    b = serpy.Field()\r\r\n\r\r\nf = Foo()\r\r\nASerializer(f).data\r\r\n# {'a': 1}\r\r\nABSerializer(f).data\r\r\n# {'a': 1, 'b': 2}\r\r\n```\r\r\n\r\r\n### Swagger Generation Example \r\r\n\r\r\nExample is available in test_django_app, you can run the app after\r\r\ncloning the project.\r\r\n\r\r\n```python\r\r\npython test_django_app/manage.py runserver\r\r\n```\r\r\n\r\r\nNote that the swagger generation is for `drf_serpy.Serializer` and doesn't care about the inputted model.\r\r\ni.e. the `openapi.Schema` will be generated based on the serializer attributes.\r\r\n\r\r\n```python\r\r\nimport drf_serpy as serpy\r\r\nfrom drf_yasg.utils import swagger_auto_schema\r\r\nfrom rest_framework import status\r\r\nfrom rest_framework.response import Response\r\r\nfrom rest_framework.viewsets import ModelViewSet\r\r\n\r\r\nfrom .models import Post \r\r\nfrom .serializers import drf, serps\r\r\n\r\r\n# serps.ReadOnlyPostSerializer is this:\r\r\n# class ReadOnlyPostSerializer(serpy.Serializer):\r\r\n#     \"\"\"\r\r\n#     Sample description to be used in schema\r\r\n#     \"\"\"\r\r\n#     id = serpy.IntField()\r\r\n#     author = UserSerializer()\r\r\n#     title = serpy.StrField()\r\r\n#     content = serpy.StrField()\r\r\n#     image = serpy.ImageField()\r\r\n#     tags = TagSerializer(many=True)\r\r\n#     created = serpy.DateTimeField()\r\r\n#     updated = serpy.DateTimeField()\r\r\n#     dummy = serpy.MethodField()\r\r\n#     is_completed = serpy.MethodField()\r\r\n\r\r\n#     def get_dummy(self, value) -> List[int]:\r\r\n#         return list(range(1, 10))\r\r\n\r\r\n#     # typing is necessary to create schema, otherwise this will throw an assertion error\r\r\n#     def get_is_completed(self, value) -> bool:\r\r\n#         return True\r\r\n\r\r\nclass PostViewSet(ModelViewSet):\r\r\n    queryset = Post.objects.all()\r\r\n    serializer_class = drf.PostSerializer\r\r\n\r\r\n    @swagger_auto_schema(\r\r\n        responses={\r\r\n            200: ReadOnlyPostSerializer.to_schema(many=True),\r\r\n        },\r\r\n    )\r\r\n    def list(self, request, *args, **kwargs):\r\r\n        # get your objects\r\r\n        serializer = serps.ReadOnlyPostSerializer(instance=self.queryset.all(), many=True)\r\r\n        return Response(data=serializer.data, status=status.HTTP_200_OK)\r\r\n```\r\r\n\r\r\nGenerated Swagger:\r\r\n![Swagger Gen](https://drf-serpy.readthedocs.io/en/latest/imgs/swagger_gen.png)\r\r\n\r\r\n#### Generic serializer swagger generation example:\r\r\n\r\r\n```python\r\r\n\r\r\n# class CommentSerializer(drf_serpy.Serializer):\r\r\n#     id = drf_serpy.IntField()\r\r\n#     user = UserSerializer()\r\r\n#     post = ReadOnlyPostSerializer()\r\r\n#     comment = drf_serpy.StrField()\r\r\n#     created = drf_serpy.DateTimeField()\r\r\n#     updated = drf_serpy.DateTimeField()\r\r\n\r\r\n\r\r\n# class LinkSerializer(drf_serpy.Serializer):\r\r\n#     next = drf_serpy.StrField()\r\r\n#     previous = drf_serpy.StrField()\r\r\n\r\r\n\r\r\n# class PaginationSerializer(drf_serpy.Serializer):\r\r\n#     links = LinkSerializer()\r\r\n#     count = drf_serpy.IntField()\r\r\n#     current_page = drf_serpy.IntField()\r\r\n#     page_size = drf_serpy.IntField()\r\r\n#     results = drf_serpy.Serializer()\r\r\n\r\r\nclass CommentViewSet(ModelViewSet):\r\r\n    queryset = Comment.objects.all()\r\r\n    serializer_class = drf.CommentSerializer\r\r\n\r\r\n    @swagger_auto_schema(\r\r\n        responses={\r\r\n            200: PaginationSerializer.to_schema(serializer=CommentSerializer(many=True)),\r\r\n        },\r\r\n    )\r\r\n    def list(self, request, *args, **kwargs):\r\r\n        self.serializer_class = serps.CommentSerializer\r\r\n        return super().list(request, *args, **kwargs)\r\r\n```\r\r\n    \r\r\nGenerated Swagger:\r\r\n\r\r\n![Swagger Gen Pagination](https://drf-serpy.readthedocs.io/en/latest/imgs/swagger_gen_pagination.png)\r\r\n\r\r\n\r\r\nLicense\r\r\n-------\r\r\n\r\r\ndrf-serpy is free software distributed under the terms of the MIT license.\r\r\nSee the [LICENSE](https://github.com/sergenp/drf-serpy/blob/master/LICENSE) file.\r\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sergenp/drf-serpy",
    "keywords": "serialization,rest,json,api,marshal,marshalling,validation,schema,fast",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-serpy",
    "package_url": "https://pypi.org/project/drf-serpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-serpy/",
    "project_urls": {
      "Homepage": "https://github.com/sergenp/drf-serpy"
    },
    "release_url": "https://pypi.org/project/drf-serpy/0.4.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ridiculously fast object serialization",
    "version": "0.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15915515,
  "releases": {
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9309fbda24ee3535774b37993fd959b34f11e82c958578c7e42c730e39257b67",
          "md5": "176e2b7921f5966b05a227374eff9267",
          "sha256": "cf2faf61582d86afecaca44206910b745a2021e9dbf8745efafcf585435c540c"
        },
        "downloads": -1,
        "filename": "drf-serpy-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "176e2b7921f5966b05a227374eff9267",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13273,
        "upload_time": "2022-01-21T12:25:35",
        "upload_time_iso_8601": "2022-01-21T12:25:35.187234Z",
        "url": "https://files.pythonhosted.org/packages/93/09/fbda24ee3535774b37993fd959b34f11e82c958578c7e42c730e39257b67/drf-serpy-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e861fb6ebc1e1d6539a6222af4f69f76d0d8f1f8e13eab788996c265f2e7cb",
          "md5": "638c115c1b46d0bf11138d40d07baa68",
          "sha256": "ef230d6f32485910aa9cf49efdb8d5c015b07c9920112bdfa3ce040ab88b9bd8"
        },
        "downloads": -1,
        "filename": "drf-serpy-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "638c115c1b46d0bf11138d40d07baa68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13273,
        "upload_time": "2022-11-28T15:12:11",
        "upload_time_iso_8601": "2022-11-28T15:12:11.179750Z",
        "url": "https://files.pythonhosted.org/packages/d4/e8/61fb6ebc1e1d6539a6222af4f69f76d0d8f1f8e13eab788996c265f2e7cb/drf-serpy-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4e861fb6ebc1e1d6539a6222af4f69f76d0d8f1f8e13eab788996c265f2e7cb",
        "md5": "638c115c1b46d0bf11138d40d07baa68",
        "sha256": "ef230d6f32485910aa9cf49efdb8d5c015b07c9920112bdfa3ce040ab88b9bd8"
      },
      "downloads": -1,
      "filename": "drf-serpy-0.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "638c115c1b46d0bf11138d40d07baa68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13273,
      "upload_time": "2022-11-28T15:12:11",
      "upload_time_iso_8601": "2022-11-28T15:12:11.179750Z",
      "url": "https://files.pythonhosted.org/packages/d4/e8/61fb6ebc1e1d6539a6222af4f69f76d0d8f1f8e13eab788996c265f2e7cb/drf-serpy-0.4.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}