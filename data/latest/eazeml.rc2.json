{
  "info": {
    "author": "Chintan Chitroda",
    "author_email": "chintanchitroda47@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "ï»¿![GitHub license](https://img.shields.io/github/license/Chintan99/eazeml?label=EazeML)\n![downloads](https://img.shields.io/pypi/dm/eazeml)\n\n# Eazeml ;)\n\n\n<img src=\"https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/original.jpg\" alt=\"drawing1\" width=\"600\" height='300' />\n\n\neazeml is a Python 3.x based Machine Learning Open Source Library which makes the process of machine learning and Data science Faster, Easy and reduces the difficulty of manual coding.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install eazeml.\n\n```bash\npip install eazeml\n```\n\n## Usage\n\n```python\nimport eazeml as ez\nhelp(ez) ## Prints all function and usage\n```\n\n## Note: \n#### Only Few Functions example are shown below, for all methods example and usage please see this example notebooks [here](https://github.com/Chintan99/eazeml/tree/master/usage-example).\n\n## Some Automated functions\n### quick_ml() \nquick_ml method provides automation to data cleaningn & machine learning process here we just need to provide\n1. Pandas Dataframe containg data.\n2. Target-column name we want to make a prediction for.\n3. flag: which specify prediction type (like 'r' for regression and 'c' for classification).\n4. n: n specifies no of features you wan't to use for prediction. it use RFE (Reccurssive Feature Elimination) for extacting best 'n' specified column and make prediction using them.\n- By default 'n' is set to 0 and will use all quick_ml will use all features for prediction if 'n' not specified\n\nand thats it, function will automatically clean & process data and give you output as a complete summary of processing done, Features used and returns report table and model used for prediction\n\n#### usage:\n\n```python\nez.quick_ml(dataframe,'target_column','flag')\n```\nor\n```python\nreport,model = ez.quick_ml(dataframe,'target_column','flag')\n```\nor\n```python\nreport,model = ez.quick_ml(dataframe,'target_column','flag',n)\n# performs RFE and selects only 'n' number of column for prediction.\n```\nfor Google Cobal & Kaggle:\n```python\nez.plotly_brower() #enables plotly in colab & kaggle.\nreport,model = ez.quick_ml(dataframe,'target_column','flag',n)\n# performs RFE and selects only 'n' number of column for prediction.\n```\n### quick_pred()\nquick_pred method takes cleaned data and prediction flag('r','c') and does prediction using several different algorithms and gives output score using several metrics for each algorithm in tabular format.\n#### example:\n- regression\n<img src=\"https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/report-r.PNG\" alt=\"drawing2\" width=\"600\" height='200' />\n\n- classification\n<img src=\"https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/report-c.PNG\" alt=\"drawing1\" width=\"600\" height='200' />\n\n##### code:\n```python\nX = features\ny = target column\n## flag('r','c')\nez.quick_pred(X,y,'flag')\n```\nor\n```python\nreport = ez.quick_pred(X,y,'flag')\n## report stores table for future use\n```\n### deploy_one()\nMethod Deploys, Machine Learning Model to Production. In one line of code.\n\nMethod Creates Fask App which is ready to be deployed to production..\n- User just need to pass\n    - Model - Machine Learning Model\n    - Features - Features used for Predictions\n    - 'title' (optional) - Title to set on Web App. By default it's \"Make Predictions\".\n- And Done, Your Deployment ready files will be stored in created folder naned 'deployment-files'.\n```python\nez.deploy_one(model,features,'titlle')\n```\n\n\n### kaggle()\nMethod makes participating in kaggle compitions easy.\n\nkaggle method takes input arguments: traindataset, testdataset,target columname and flag('r','c') and gives output as complete summary of steps performed in prediction and data cleaning process and returns predicted values of test dataframe which can be submitted on kaggle.\n\n```python\nez.kaggle(train,test,'targetcolumn','flag')\n```\nor\n```python\ntest_pred,report = ez.kaggle(train,test,'targetcolumn','flag')\n## test_pred- consist test file prediction\n## report - tabular report score\n```\n### gen_txt_report()\nMethod genrates txt file named  output.txt containig entire summary report of oprations performed\n##### usage:\n```python\n%%capture example ## captures output of ell and store in example\nquick_ml(df,'target','c')\ngen_report(example) ## this creates summary file named output.txt\n# file contains all log and output of cell\n```\n### clean_data()\nclean_data automatically cleans data by:\n1. removing columns having null value greated than 20%\n2. impute median in missing numeric columns\n3. impute mode in missing categorical column\n```python\ndataframe = ez.clean_data(dataframe)\n## returns cleaned dataframe\n```\n\n### nlp_text()\nnlp_text converts Textual data of Column to Tfidf vector after operations:\n1. Removing Punctutions\n2. Removing Special Symbol/character\n3. Lemmatization\n4. Coverts Uppercase to lowercase\n\n- only column passed is converted to vector not whole dataframe\n- need to manually join output data vector with original dataframe\n```python\nvec = ez.nlp_text(dataframe,'columname')\n## returns cleaned Tfidf vector\n```\n\n## Some example of Basic functions\n### importdata()\nMethod capable of importing tsc,csv,excel file in pandas dataframe object\n```python\ndataframe = ez.importdata('filename.extension')\n## returns cleaned Tfidf vector\n```\n### info() \ninfo method gives complete information about the data in tabluar format including:\n1. Number of Rows,Column\n2. Number of Categorical, Numerical Feature\n3. null, unique values in each column\n4. total missing value and missing value percentage in each column.\n5. Plots graph of Missing data in percentage format.\n\n\n```python\nez.info(dataframe)\n```\n### getcolumnstype()\ngetcolumnstype returns the type of columns and store it in list format. Saves wasting time in manully writing code and determining columns type.\n```python\nnum,cat = getcolumnstype(dataframe)\n## num - list of numeric columns\n## cat - list of categorical columns\n```\n### drop_columns() & dropcolumns()\ndrop_columns takes argument as Percentage in NUm (int) and columns name \n1. Num - number of null value percentage, above which all columns will be dropped\n2. (optional) columns name - specify columns sepreated with ',' will be dropped\n#### usage:\n```python\ndataframe = ez.drop_columns(dataframe,n,'columnnames'..)\n``` \n##### example:\n- This Example will drop all columns having null value percentage above 20 and drop columns id & name from dataframe.\n```python\ndf = ez.drop_columns(df,n,'id','name')\n```\n#### dropcolumns():\nMethod just drops specified columns. example:\n```python\ndf = ez.drop_columns(df,'id','name','tp','dsd')\n```\n### fillnulls()\nfillnulls method performs imputation operation of mean ,median,mode or specified value on specified columns together and returns imputed dataframe:\n- Example 1: filling median in columns\n```python\ndf = fillnulls(df,'median','col1','col2',...)\n# fill median of respective column to respective column\n```\n- Example 2: filling mean in columns\n```python\ndf = fillnulls(df,'mean','col1','col2',...)\n# fill mean of respective column to respective column\n```\n- Example 3: filling mode in columns\n```python\ndf = fillnulls(df,'mode','col1','col2',...)\n# fill mode of respective column to respective column\n```\n- Example 4: filling specified value in columns\n```python\ndf = fillnulls(df,'unknown','col1','col2',...)\n# unknown will be filled inplace of null values in col2, col1\n```\n### extract_number()\nMethod Extracts number from column removing any extra string,special char,symbol,  etc and returns cleaned column\n```python\ndf = ez.extract_number(df,'income')\n# removes $ symbol and return cleaned column in dataframe\n```\n\n### corr_heatmap()\nPlots Corelation Heatmap of given dataframe.\n\narguments:\n\n1. Dataframe\n2. Style: \n    - 'interactive': uses plotly and plots interactive heatmap.\n    - 'basic': prints colorized tabular format heatmap.\n    - none: uses seaborn to plot annoted heatmap.\n\n```python\nez.corr_heatmap(df)\n# Plots heatmap with seaboron\nez.corr_heatmap(df,'interactive')\n# plots interactive heatmap with plotly\nez.corr_heatmap(df,'basic')\n# prints colorized tabluar correaltion heatmap\n```\n### confusion_mat()\nMethod Plots Visualized Confusion Matrix.\n\n#### examples:\n\n\n![binary](https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/cm2.PNG)\n\n\n![multiclass](https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/cm1.PNG)\n```python\n#y_true- Actual Value\n#y_pred- Predicted Value\nez.confusion_mat(y_true,y_pred)\n# you can change color using cmap\n```\n### roc_curve_graph\nMethod Plots AUC-ROC plot for y_true,y_pred\n\n![auc plot](https://raw.githubusercontent.com/Chintan99/eazeml/master/mdimages/auc.PNG)\n- only works with Binary Classification\n```python\nez.roc_curve_graph(y_true,y_pred)\n```\n### box_hist_plot()\nmethod plots interactive Box plot and histogram\nusing plotly library\n```python\nez.box_hist_plot(dataframe,'col1','col2',...)\n# plots box plot and histogram for all specified column of dataframe.\n```\n\n### classification() & regression()\n- classification():\n\n    It is menu based classification, asks user to which model to use for prediction.\n\n    It returns y_predicted,y_actual, model used for classification\n\n    It also prints all classification score metrics and confusion matrix by default \n```python\n# X = features\n# y = target column\ny_pred,y_actual,model = ez.classification(X,y)\n```\n- regression():\n\n    It is menu based regression method, asks user for which model to use for prediction.\n\n    It retruns y_predicted,y_actual, model used for prediction\n\n    It also prints all regression score metrics by default\n```python\n# X = features\n# y = target column\ny_pred,y_actual,model = ez.regresssion(X,y)\n```\n### RFE()\nMethods Perfroms Recurrsive Feature Elimination and returns best n columns specified\n```python\nrfecolumns = ez.rfe(model,X_train,y_train,n)\n# n- number of features to be selected (defualt n=10)\n# model - model to use RFE with.\n```\n### classification_result() & regression_result()\nPrints all scoring Metrics for when passed y_true & y_predicted\n- classification_result()\n\n    Evaluation Matrics:\n\n    - F1 score\n    - AUC-ROC score\n    - classification report\n    - plots confusion matrix\n    - plots auc graph (only if binary classification)\n```python\nez.classification_result(y_true,y_pred)\n```\n- regression_result()\n\n    Evaluation Matrics:\n\n    - R2 score\n    - Mean Squared Error score\n    - Root Mean Squared Error score\n    - Root Mean Squared log Error score\n```python\nez.regression_result(y_true,y_pred)\n```\n### Machine Learning ALgorithms\nEazeml provides use of each algoritm with custom parameter\nusage:\n```python\n# first need to define these variables\nX = Feature\ny = Targetcolumn\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=10)\nez.regression_result(y_true,y_pred)\n```\n- These Machine Learning Algorithms are already set to best param grid from experienced users.\n- 'reg' defines regression & 'classifier' defines classifier algorithm.\n```python\n## pass X_train,y_train,X_test,y_test in which ever algorithm you need.\ny_pred,model = ez.linear_reg(X_train,y_train,X_test,y_test)\n## return y_predicted and model for further usage.\nez.logistic_reg(X_train,y_train,X_test,y_test)\nez.randomforest_classifier(X_train,y_train,X_test,y_test)\nez.randomforest_reg(X_train,y_train,X_test,y_test)\nez.xgb_classifier(X_train,y_train,X_test,y_test)\nez.xgb_reg(X_train,y_train,X_test,y_test)\nez.lgb_classifier(X_train,y_train,X_test,y_test)\nez.lgb_reg(X_train,y_train,X_test,y_test)\nez.Gradient_boost_classifier(X_train,y_train,X_test,y_test)\nez.Gradient_boost_reg(X_train,y_train,X_test,y_test)\nez.adaboost_classifier(X_train,y_train,X_test,y_test)\nez.adaboost_reg(X_train,y_train,X_test,y_test)\n```\n### get_IQR\nPrints IQR (Inter Quartile Range) values table for each column of dataframe \n```python\nez.get_IQR(dataframe)\n```\n### show_outlier & remove_outlier\n- show_outlier()\n\nMethod Prints number of outlier in each column of dataframe\n```python\nez.show_outlier(dataframe)\n```\n- remove_outlier()\n\nMethod removes all outliers from dataframe and returns Normally Distributed Dataframe and prints IQR range table.\n```python\nnewdf = ez.remove_outlier(dataframe)\n# stores outlier free dataframe in newdf\n```\n### stat_models()\nPrints Statastical Significance table(OLS table) for each column of dataframe with respect to target column \n```python\nX = features\ny = target column\nez.stats_models(y,X)\n```\n### VIF()\nMethod Prints VIF(Variation Inflation Variance)value of each column in Table format for each column of dataframe\n```python\nez.VIF(dataframe)\n```\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Chintan99/eazeml",
    "keywords": "",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eazeml",
    "package_url": "https://pypi.org/project/eazeml/",
    "platform": "",
    "project_url": "https://pypi.org/project/eazeml/",
    "project_urls": {
      "Homepage": "https://github.com/Chintan99/eazeml"
    },
    "release_url": "https://pypi.org/project/eazeml/0.0.7/",
    "requires_dist": [
      "pandas",
      "numpy",
      "seaborn",
      "matplotlib",
      "plotly",
      "sklearn",
      "lightgbm",
      "textblob",
      "nltk",
      "tqdm",
      "flask",
      "wordcloud",
      "xgboost",
      "cufflinks",
      "catboost"
    ],
    "requires_python": "",
    "summary": "EazeML makes Task of Machine Learning and Data Science super easy.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7728714,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08f842497ca8b9df85b1ee8bf7234f09d7e986a25753dafda591b94165a90886",
          "md5": "0a1c4339dfaa47aaeb85934d3e834d22",
          "sha256": "878e2a31a448fc18cb7fda8e03238c3f0aad00c21e1ff48fd4c99b68cf24c9b6"
        },
        "downloads": -1,
        "filename": "eazeml-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a1c4339dfaa47aaeb85934d3e834d22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19741,
        "upload_time": "2020-06-10T10:05:52",
        "upload_time_iso_8601": "2020-06-10T10:05:52.817344Z",
        "url": "https://files.pythonhosted.org/packages/08/f8/42497ca8b9df85b1ee8bf7234f09d7e986a25753dafda591b94165a90886/eazeml-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60d0d86ef5d5815fcdd9190bd5534acefb0f99080ddef0d8c4e7d424234561a4",
          "md5": "4cebf57cad75f58ca9f3fc80ea9540de",
          "sha256": "e12e068134bcd01d07c1ab908ff905349c785b5acaf3f58c469b9436325c70cf"
        },
        "downloads": -1,
        "filename": "eazeml-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cebf57cad75f58ca9f3fc80ea9540de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19739,
        "upload_time": "2020-07-18T10:38:08",
        "upload_time_iso_8601": "2020-07-18T10:38:08.590779Z",
        "url": "https://files.pythonhosted.org/packages/60/d0/d86ef5d5815fcdd9190bd5534acefb0f99080ddef0d8c4e7d424234561a4/eazeml-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e888997eefdabdb158cf566f8f1418d63d2361128310791bf43a86eb7f91287",
          "md5": "d6d8e19c05c3fedf6bfc17933072b51f",
          "sha256": "8455437ff56ed4f703e274c496283f8c0ee9c4c4c4fbbab26a5fdf81658a084a"
        },
        "downloads": -1,
        "filename": "eazeml-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d8e19c05c3fedf6bfc17933072b51f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23798,
        "upload_time": "2020-07-18T10:38:10",
        "upload_time_iso_8601": "2020-07-18T10:38:10.234154Z",
        "url": "https://files.pythonhosted.org/packages/4e/88/8997eefdabdb158cf566f8f1418d63d2361128310791bf43a86eb7f91287/eazeml-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60d0d86ef5d5815fcdd9190bd5534acefb0f99080ddef0d8c4e7d424234561a4",
        "md5": "4cebf57cad75f58ca9f3fc80ea9540de",
        "sha256": "e12e068134bcd01d07c1ab908ff905349c785b5acaf3f58c469b9436325c70cf"
      },
      "downloads": -1,
      "filename": "eazeml-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4cebf57cad75f58ca9f3fc80ea9540de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19739,
      "upload_time": "2020-07-18T10:38:08",
      "upload_time_iso_8601": "2020-07-18T10:38:08.590779Z",
      "url": "https://files.pythonhosted.org/packages/60/d0/d86ef5d5815fcdd9190bd5534acefb0f99080ddef0d8c4e7d424234561a4/eazeml-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e888997eefdabdb158cf566f8f1418d63d2361128310791bf43a86eb7f91287",
        "md5": "d6d8e19c05c3fedf6bfc17933072b51f",
        "sha256": "8455437ff56ed4f703e274c496283f8c0ee9c4c4c4fbbab26a5fdf81658a084a"
      },
      "downloads": -1,
      "filename": "eazeml-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "d6d8e19c05c3fedf6bfc17933072b51f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23798,
      "upload_time": "2020-07-18T10:38:10",
      "upload_time_iso_8601": "2020-07-18T10:38:10.234154Z",
      "url": "https://files.pythonhosted.org/packages/4e/88/8997eefdabdb158cf566f8f1418d63d2361128310791bf43a86eb7f91287/eazeml-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}