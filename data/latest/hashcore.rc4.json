{
  "info": {
    "author": "Mouhsen Ibrahim",
    "author_email": "mouhsen.ibrahim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# Hash Core\n\nHash Core is the core of the Hash platform, it allows you to define your resources in your Mono Repository and\nit can be used to manage building, testing, publishing, and deploying those resources to your own environments,\nHash Core uses yaml files to define resources and their kinds along with the environments used in your project.\nIt allows you also to specify dependencies between resources and in many cases it can automatically detect\nthem. It uses a backend store for storing the state of your resources which include the hash of the resource's\ncode along with the results from running actions on the resource in an env.\n\nHash Core achieves all of this using well designed core package, Dependency Graph and a set of plugins for defining\nresources, state storage backends and targets for executing some actions in enviornments (more about these later).\n\n## Quick Architecture Introduction\n\nThe following diagram shows the most important packages and modules in Hash Core and their interactions\n\n![Hash Core Archirecture](assets/hash-core.jpg \"Hash Core Archirecture\")\n\n* **Core Package** It contains modules for defining state, hash templates, actions, planning actions and executing them.\nIt is designed to be independent from resources and it interacts with resources and store packages to manage resources and store their state.\n\n* **Resources Package** It contains the base class for all resources and it also defines the Environment resource, along with some built in resources and the targets used by resources to execute some actions in some environments.\n\n* **Store Package** This package contains the base for all store plugins and some built in plugins, it is used to store the state which results from running actions on resources in its own store which can be local file, GCP buckets, Digital Ocean spaces, etc....\n\n* **DAG Module** This module defines the dependency graph as directed asyclic graph, it is used to create a plan for running action x on resource y in enviornment z, which includes running actions on all of the resource's dependencies in the right order\n\n## Installing Hash core\n\n### Install from PyPi\n\nHash Core is published to PyPi [here](https://pypi.org/project/hashcore/), you can install it using this command\n\n```bash\npip install hashcore\n```\n\nThen you can use the CLI like this\n\n```bash\n> hashc\nusage: hash [-h] [--storage STORAGE] [--config CONFIG] [--env ENV] {build,test,publish,deploy} ...\n\nA tool to build resources based on their hash and type\n\npositional arguments:\n  {build,test,publish,deploy}\n\noptions:\n  -h, --help            show this help message and exit\n  --storage STORAGE     The storage system used default is Local File\n  --config CONFIG       The configuration file default is config.ini\n  --env ENV             An environment to run the action in it\n```\n\n### Install from source\n\nInstall the required packages to clone the code, create virtual env and run the tests with make\n\n```bash\nsudo apt install git make python3 python3-venv python3-apt\n```\n\nNow clone the repository and cd into its directory\n\n```bash\ngit clone https://gitlab.com/hash-platform/core.git\ncd core\n```\n\nCreate a virtual env and activate it with these commands\n\n```bash\npython3 -m venv venv\nsource venv/bin/activate\n```\n\nNow install hash core in editable mode and all of its dependecnies with these commands\n\n```bash\npip install -e .\npip install -r requirements.txt\n```\n\nNow you can use the CLI located at `src/client/main.py`\n\nYou can run tests with this command\n\n```bash\nmake test\n```\n\n## Using the client\n\nHash Core comes with a CLI interface which exposes its main functionality, which is running an action on a resource\nin an environment, you will see two directories in src called `cli` and `client`, `cli` is the client that used to interact\nwith old hash core implemnation, it will be deleted soon after moving all of its features to new client in `client` directory.\n\nTo run the client first enable the virtual env with this command:\n\n```bash\nsource venv/bin/activate\n```\n\nPrint the help for the client with this command\n\n```bash\n> python src/client/main.py\n\nusage: hash [-h] [--storage STORAGE] [--config CONFIG] [--env ENV] {build,test,publish,deploy} ...\n\nA tool to build resources based on their hash and type\n\npositional arguments:\n  {build,test,publish,deploy}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --storage STORAGE     The storage system used default is Local File\n  --config CONFIG       The configuration file default is config.ini\n  --env ENV             An environment to run the action in it\n```\n\nThe client takes three options:\n\n* `--storage` this one is used to select a storage backend for the state, the options for storage backend are in the config file.\n* `--config` this option is used to select a config file for storage backends, it is an INI file, its default value is `config.ini`\n* `--env` this option is used to select the environment name where the action will be executed, its default value is `None`, this\n  value is acceptabe for some actions on some resources and it is not acceptable for some other actions, the environment\n  must exist in the repository otherwise we get an error.\n\nThe format for config file is as follows:\n\n```ini\n[LocalFile]\noutput = hash_test/storage\norganization = hashio\nproject = hash\n```\n\nHere `LocalFile` is the name of storage backend, and everything inside are options for the backend, these options are different\nfrom one backend to the other except for `organization` and `project` which are required for all storage backends.\n\nFor now they are used to select paths for the resources specific to one project in an organization, more about these will\nbe added later.\n\nThe LocalFile backend requires one other option that is `output` directory for storing the state inside it.\n\nWe currently have three sub-commands for the CLI, these are `build`, `test`, `publish` and `deploy` all of these\ncommands take one argument that is the path to the resource's file, they accept directory argument if the name\nof the resource's file is `resource.yaml`, otherwise you need to use a path to the file itself.\n\nFor example to build resource in path `services/A` in environment `development` use this command\n\n```bash\npython src/client/main.py --env development build services/A\n```\n\nAssuming the name of resource's file is `resource.yaml` if it is `resource.A.yaml` then use this command\n\n```bash\npython src/client/main.py --env development build services/A/resource.A.yaml\n```\n\nMore features will be added later to the CLI according to our Road Map, and the old CLI code will be removed.\n\n## Demos\n\nThe demos with their guides and code are available [here](https://gitlab.com/hash-platform/getting-started-demos)\n\n## Hash Core principles and goals\n\nAs with any successfull open source project, it must follow a strict set of rules and principles to keep it growing\nand successfull, here at hash core we have established a set of rules and principles to follow when developing, they\nhelp us when discussing features and where to implement those features, in the core, resources, store or dag etc...\n\n* **Simplicity is a tool to achieve something and not a target by itself**\n\n  At hash core we use simplicity as a tool when implementing features, we DO NOT care about simplicity when planning\n  the features because we believe that if we refuse to have feature X because it is hard or complex then someone else\n  will do it in his own simple way and outsmart use, so we make sure that any needed feature for our goals and developers\n  is implemented in the best simple way no matter how hard/complex is the actual feature is.\n\n* **Trust your users and give them freedom**\n\n  Here we mean by users, the developers who will use hash core to manage their own resources, these are the devs who\n  will write the resource yaml files and the code for their resources wether it is go code, terraform, yaml or Dockerfiles etc...\n  We SHOULD NOT judge the users or make decessions on their behalf. However, we have to help them to protect them selves from\n  any mistakes they may make, we will work to implement this later with project and organizational constraints.\n\n* **Hash core should be independent from resources**\n\n  The core package should not contain anycode that is specific to one resource and all of its functionality must be tested\n  using a Fake resource. We should try to keep the core as simple as possible and also well tested. However, it is sometimes\n  preferable to implement the complex features in the core because this implementation is written only once and tested well\n  so resource plugins' developers and users can benefit from those trusted features in the core and not have to implement\n  them on their own in their resources which might contain more bugs and be less tested.\n\n* **The core is the best place to implement complex features**\n\n  As we said in the previous point, when we have a complex feature we need to consider implemnting it in the core, if this\n  feature could be usefull for many resources, the next is to implement the feature in the resources plugin itself, if this\n  feature cannot be useful for all resources, and lastly is to leave it for users to implement it in their own resources.\n\nNow we talked about our rules and principles, let's talk about our goals\n\n* **Hash core should be able to manage your resources everywhere, wether in CI or on your local machine**\n\nHash core uses a state storage which can be shared among developers, this storage along with code hash\nis used to determine which resources needs building, testing, publishing or deploying to run an action\non a single resource, so the input is the action, resource name and environment name, and the output is\na plan to run this action on this resoucre in this environment while respecting dependencies. Hash core\ndoesn't need git data or a list of changed files to run just your resource code and the state storage,\ndetermining what needs to be done given a list of changes in a Merge Request for example will be the\ntask of hash CI to be implemented later which will work along side with hash core to give you the\nbest CI experience in a mono repository.\n\n* **You can have dynamic levels of abstractions using your resources**\n\nPeople often ask about the right amount of abstraction, while we at hash core would like to give you the freedom\nto have dynamic levels of abstractions based on your resources and mabe later you can help us or help others\nto get the right amount of abstraction. Your resources might be as simple as compiling a go code, generating\nmanifests and pushing a docker image all of your choice, or you can imbed the manifests and your Dockerfile\nin the resources plugin's source code or even more implement creating the right storage buckets, databases\nand granting permissions for your service in your plugin's source code, it is up to you to decide what your\ndevelopers need to worry about and manage them selves.\n\n* **DO NOT repeat the same action using the same inputs and state and expect a different results**\n\nThat is the actual defenition of insanity, we try our best at hash core not to re-run the actions on resources\nif they are not needed, this is implemented by checking the hash of the resource, the hashes of deps and whether\nthis action was run before in this env or not if we spot any differences then we need to re-run the action. However,\nsometimes the action must be re-run even if those conditions are not met such as changing the version of go compiler,\nthat's why we enable the resources to force re-running the action even if all of the previous conditions are False.\n\n* **DO NOT repeat the values that change at the same time**\n\nHash templates help us to re-use outputs from other resources in any resource, so we don't need to hard code this\noutput in our resources, this adds a dependency on the other resource.\n\n## Road Map\n\nSo far Hash Core has the most basic features to manage your resources in a mono repository and it also contains\nsome built-in resources which help you to run your services and deploy the infrastructure needed for them, these\nresources are still limited and very basic.\n\nOur Road Map is the fllowing\n\n* Improve the built-in resources that we already have and add more of them.\n* Improve the CLI output and options, add an option to do a plan only and save the plan to a file that can be executed later.\n* Test the remote state storage backends for performance.\n* Add logging, metrics and tracing to different hash core components so we can debug better later.\n* Test hash core in real world use cases and add more features accordingly.\n* Evaluate our graph implementation and add more tests to it.\n\n## Contribution Guide\n\nWe highly welcome any contributions to Hash Core as it helps us to improve it and test it more before it is declared as production ready.\n\nYou can check open issues [here](https://gitlab.com/hash-platform/core/-/issues), you can follow the installation guide\nabove to get sarted with development, hash core is written in python so you can install it in development mode and get started\nquickly, it is tested using python 3.7, 3.8, 3.9, 3.10 and 3.11.\n\nMake sure to install the latest version of python, create the virtual env and get started with one of the issues.\n\nYou can run the test suite after you are finished implemneting the feature or fix using this command\n\n```bash\nmake test\n```\n\n## Release versions\n\nWe use a tag based releases, the versions correspond to the tags. [Semantic versioning](https://semver.org) is used to create tags, all\nversions before the first stable release `1.0.0` might include backward incompatible changes.\n\nTo create a new version you simply increase the version argument in setup.py, create a merge request to merge it with main\nand then create a tag that corresponds to the new version number.\n\nThe [CHANGLOG.md](https://gitlab.com/hash-platform/core/-/blob/main/CHANGELOG.md) contains all changes between releases and their release dates.\n\nMore detailed contribution guide will be shared later :)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hashcore",
    "package_url": "https://pypi.org/project/hashcore/",
    "platform": null,
    "project_url": "https://pypi.org/project/hashcore/",
    "project_urls": {
      "Documentation": "https://hash-core.readthedocs.io/en/latest/index.html",
      "Source": "https://gitlab.com/hash-platform/core"
    },
    "release_url": "https://pypi.org/project/hashcore/0.2.1/",
    "requires_dist": [
      "dirhash (~=0.2.1)",
      "wheel (~=0.38.4)",
      "setuptools (~=65.6.3)",
      "google-cloud-storage (~=2.7.0)",
      "pluggy (~=1.0.0)",
      "boto3 (~=1.26.45)",
      "pyyaml (~=5.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool for managing resources in a mono repository",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17352767,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67e35eef8f1071439fd89c4fa48a0c4dd5f0e17797477b8b904af1e81f03faef",
          "md5": "6234399d8b42b4738d911ae2f241bfe3",
          "sha256": "70b79075fd7221efd9a46317f87b351434924043df684c558d7808178d159e03"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6234399d8b42b4738d911ae2f241bfe3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45773,
        "upload_time": "2023-01-14T12:26:01",
        "upload_time_iso_8601": "2023-01-14T12:26:01.809586Z",
        "url": "https://files.pythonhosted.org/packages/67/e3/5eef8f1071439fd89c4fa48a0c4dd5f0e17797477b8b904af1e81f03faef/hashcore-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c740542df4016396709bf6c0acc75aba7ce4430c3e874aebe4b5aa80868ba2",
          "md5": "62d42df7fa350ca743fc1d3132dcf759",
          "sha256": "9d46b0136af7eab9d76945ef5233254493ddeef44a75eb9f966964f9ab00f66e"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62d42df7fa350ca743fc1d3132dcf759",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49094,
        "upload_time": "2023-01-14T12:26:04",
        "upload_time_iso_8601": "2023-01-14T12:26:04.677809Z",
        "url": "https://files.pythonhosted.org/packages/43/c7/40542df4016396709bf6c0acc75aba7ce4430c3e874aebe4b5aa80868ba2/hashcore-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "662d4a8dd231d3cbc112e4bb12e08bcb160dbe2d0f638727e5922de859ff346e",
          "md5": "e36146d9e5b3bfcef6816fcab84cd5df",
          "sha256": "5b55ca8904495d72530ecfc5acd95b6be35f98b484bd0ef96c3b7dab7ee687e4"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e36146d9e5b3bfcef6816fcab84cd5df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 50682,
        "upload_time": "2023-01-14T12:32:56",
        "upload_time_iso_8601": "2023-01-14T12:32:56.655388Z",
        "url": "https://files.pythonhosted.org/packages/66/2d/4a8dd231d3cbc112e4bb12e08bcb160dbe2d0f638727e5922de859ff346e/hashcore-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008fc4348d20ad5e50b5930f1568c97f4f1cdd74aab7b14ae5d5a7e200e1430f",
          "md5": "3f1272837dd35cb0b78be10daecec6d9",
          "sha256": "73ca7d456330c63ccd73082dba2a66efbd58f63bf424546cbe3d649289afac90"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f1272837dd35cb0b78be10daecec6d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 54430,
        "upload_time": "2023-01-14T12:33:00",
        "upload_time_iso_8601": "2023-01-14T12:33:00.393847Z",
        "url": "https://files.pythonhosted.org/packages/00/8f/c4348d20ad5e50b5930f1568c97f4f1cdd74aab7b14ae5d5a7e200e1430f/hashcore-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea08ca9f506a1883403c9e99e1601301162c93f91a5a2244b7a441e88e15be31",
          "md5": "d8f504ccc2d672ff039532334cf55b9b",
          "sha256": "8491106cb9f9d499a6f16850c74cfcb6f7a6be8cadbe3f8ed75a7fae3d510f24"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8f504ccc2d672ff039532334cf55b9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 51690,
        "upload_time": "2023-02-01T20:13:51",
        "upload_time_iso_8601": "2023-02-01T20:13:51.800520Z",
        "url": "https://files.pythonhosted.org/packages/ea/08/ca9f506a1883403c9e99e1601301162c93f91a5a2244b7a441e88e15be31/hashcore-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e110fd1b450edb3fcff924f69044496532dcfe83abe8aa53789f96972d16811",
          "md5": "7572b0200bad1d12cd2e1ec6e6a40e86",
          "sha256": "ce1e9d2b405487d3253010fbfab7ab4e1187bbb1f1ea5f8d2b1fbc49d50c27d9"
        },
        "downloads": -1,
        "filename": "hashcore-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7572b0200bad1d12cd2e1ec6e6a40e86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 55831,
        "upload_time": "2023-02-01T20:13:57",
        "upload_time_iso_8601": "2023-02-01T20:13:57.556865Z",
        "url": "https://files.pythonhosted.org/packages/8e/11/0fd1b450edb3fcff924f69044496532dcfe83abe8aa53789f96972d16811/hashcore-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dde0104d81363ae47cba8a18ea8092b3b211b8a7d00b2aea302860ae2137955d",
          "md5": "cbb34ccc6a6a06a1fa8477229cba57c4",
          "sha256": "b87fd43d3bb5ee550f3a0547051803ef057b817d3c26e1c02128752141a838c7"
        },
        "downloads": -1,
        "filename": "hashcore-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbb34ccc6a6a06a1fa8477229cba57c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 55894,
        "upload_time": "2023-03-19T11:25:11",
        "upload_time_iso_8601": "2023-03-19T11:25:11.399021Z",
        "url": "https://files.pythonhosted.org/packages/dd/e0/104d81363ae47cba8a18ea8092b3b211b8a7d00b2aea302860ae2137955d/hashcore-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78440e367af40ae1083d5ef0bf5bc8d6349377d4195e0a4626a6256e74be61d2",
          "md5": "49909d05bf4fa3ef8d11f4044623d1f6",
          "sha256": "3750621dab0e442018b347a31d526954f192bd6464cbddd7ff1dcfe66a5f0f2d"
        },
        "downloads": -1,
        "filename": "hashcore-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49909d05bf4fa3ef8d11f4044623d1f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 54815,
        "upload_time": "2023-03-19T11:25:12",
        "upload_time_iso_8601": "2023-03-19T11:25:12.595588Z",
        "url": "https://files.pythonhosted.org/packages/78/44/0e367af40ae1083d5ef0bf5bc8d6349377d4195e0a4626a6256e74be61d2/hashcore-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dde0104d81363ae47cba8a18ea8092b3b211b8a7d00b2aea302860ae2137955d",
        "md5": "cbb34ccc6a6a06a1fa8477229cba57c4",
        "sha256": "b87fd43d3bb5ee550f3a0547051803ef057b817d3c26e1c02128752141a838c7"
      },
      "downloads": -1,
      "filename": "hashcore-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbb34ccc6a6a06a1fa8477229cba57c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 55894,
      "upload_time": "2023-03-19T11:25:11",
      "upload_time_iso_8601": "2023-03-19T11:25:11.399021Z",
      "url": "https://files.pythonhosted.org/packages/dd/e0/104d81363ae47cba8a18ea8092b3b211b8a7d00b2aea302860ae2137955d/hashcore-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78440e367af40ae1083d5ef0bf5bc8d6349377d4195e0a4626a6256e74be61d2",
        "md5": "49909d05bf4fa3ef8d11f4044623d1f6",
        "sha256": "3750621dab0e442018b347a31d526954f192bd6464cbddd7ff1dcfe66a5f0f2d"
      },
      "downloads": -1,
      "filename": "hashcore-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "49909d05bf4fa3ef8d11f4044623d1f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 54815,
      "upload_time": "2023-03-19T11:25:12",
      "upload_time_iso_8601": "2023-03-19T11:25:12.595588Z",
      "url": "https://files.pythonhosted.org/packages/78/44/0e367af40ae1083d5ef0bf5bc8d6349377d4195e0a4626a6256e74be61d2/hashcore-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}