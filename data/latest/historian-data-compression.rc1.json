{
  "info": {
    "author": "Peter Vanhevel",
    "author_email": "peter.vanhevel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Typing :: Typed"
    ],
    "description": "# Historian Data Compression\n\nHistorian Data Compression is a Python library used to compress historian data, using the deadband and/or swinging door algorithm.\nHistorian data are typically 2 dataframe columns with a timestamp and a logged value.\n\n## Project description\n\nBased on the [swinging door library](https://pypi.org/project/swinging-door/) of [Aleksandr F. Mikhaylov (ChelAxe)](mailto:chelaxe@gmail.com).\nThe default for the extra timeout parameter is 0, which actually means 'no timeout'.\n\nThe swinging door algorithm is clearly explained in this [presentation](https://slideplayer.com/slide/3884/),\nand in this [file](https://spiral.imperial.ac.uk/bitstream/10044/1/14604/2/ThornhillEtAlCompressionJPC2004.pdf).\n\n## Installation\n\nUse the package manager [pip](https://pypi.org/project/historian-data-compression/) to install historian_data_compression.\n\n```bash\npip install historian_data_compression\n```\n\n## Usage\n\nTo avoid timestamp issues:\n\n   1.  sort the dateframe by timestamp,\n   2.  and convert negative timestamps (in Windows, dates before 1970-01-01) by adding a number of seconds before the compression, and deducting again afterwards.\n\n## Simple demo (dataframe with 1 significant value column)\n\n``` {.python}\nimport pandas as pd\nfrom datetime import datetime, timedelta\nfrom historian_data_compression import point_generator, dead_band_compression, swinging_door_compression\n\ndf = pd.read_csv(r\"https://datahub.io/core/natural-gas/r/daily.csv\")\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"], format=\"%Y-%m-%d %H:%M:%S\")\n\ndf = df.sort_values(\"Date\")\nfirst_ts = df[\"Date\"].min().timestamp()\nif first_ts < 0:\n    df[\"Date\"] = df[\"Date\"] + timedelta(seconds=int(first_ts))\n\nmax = df[\"Price\"].max()\nmin = df[\"Price\"].min()\ndbc_deadband_perc = 0.5 / 100                                                                       # typically 0.5 %\ndbc_deviation = dbc_deadband_perc * (max - min) / 2                                                 # deviation = deadband / 2\ndbc_timeout = 0                                                                                     # seconds, but 0 equals 'no timeout'\nswdc_deadband_perc = 1 / 100                                                                        # typically 1.0 %\nswdc_deviation = swdc_deadband_perc * (max - min) / 2     \nswdc_timeout = 0                                                                                    # seconds, but 0 equals 'no timeout'\n\ndf_dbc = pd.DataFrame(\n    tuple(\n        {\n            \"Date\": datetime.fromtimestamp(ts),\n            \"Price\": value\n        }\n        for ts, value in dead_band_compression(\n            point_generator(df[[\"Date\", \"Price\"]]), deviation=dbc_deviation, timeout=dbc_timeout\n        )\n    )\n)\ndf_dbc_swdc = pd.DataFrame(\n    tuple(\n        {\n            \"Date\": datetime.fromtimestamp(ts),\n            \"Price\": value\n        }\n        for ts, value in swinging_door_compression(\n            point_generator(df_dbc), deviation=swdc_deviation, timeout=swdc_timeout\n        )\n    )\n)\nif first_ts < 0:\n    df_dbc[\"Date\"] = df_dbc[\"Date\"] - timedelta(seconds=int(first_ts))\n    df_dbc_swdc[\"Date\"] = df_dbc_swdc[\"Date\"] - timedelta(seconds=int(first_ts))\nprint(\n      \"Size after 1st stage compression (deadband only):           \"\n      f\"{len(df_dbc) / len(df):>10.1%}\"\n)\nprint(\n      \"Size after 2nd stage compression (deadband + swinging door):\"\n      f\"{len(df_dbc_swdc) / len(df):>10.1%}\"\n)\n\n# returns:\n\nSize after 1st stage compression (deadband only):                84.7%\nSize after 2nd stage compression (deadband + swinging door):     26.8%\n\n```\n\n## Example with dataframe with multiple significant value columns\n\n``` {.python}\n\nimport pandas as pd\nfrom datetime import datetime\nfrom historian_data_compression import point_generator, swinging_door_compression\n\ndf = pd.read_csv(r\"https://datahub.io/core/global-temp/r/monthly.csv\")\ndf = pd.pivot(df, index=[\"Date\"], columns=[\"Source\"], values=[\"Mean\"])\ndf = df.reset_index(drop=False)\ndf.columns = [c[1] if c[0] == \"Mean\" else \"Date\" for c in df.columns ]\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"], format=\"%Y-%m-%d %H:%M:%S\")\ncols_float = [c for c in df.columns if df[c].dtype == \"float\"]\ndf = df.sort_values(\"Date\")\ndays = (datetime(1970, 1, 1) - df.loc[0, \"Date\"]).total_seconds() / (60 * 60 * 24)\nif days > 0:\n    days =  int(days) + 100\nelse:\n    days = 0\ndf[\"Date\"] = df[\"Date\"] + pd.Timedelta(days=days)\n\nix = pd.date_range(start=df[\"Date\"].min(), end=df[\"Date\"].max(), freq='D')\ndf1 = df.set_index('Date')\ndf1 = df1.reindex(ix).reset_index(drop=False)\ndf1.columns = [\"Date\"] + cols_float\n\n\ntol = pd.Timedelta(\"0.5 days\")\n    \nfor col in cols_float:\n    max = df[col].max()\n    min = df[col].min()\n    swdc_deadband_perc = 5 / 100                                                                    # typically 1.0 %\n    swdc_deviation = swdc_deadband_perc * (max - min) / 2     \n    swdc_timeout = 0                                                                                # seconds, but 0 eauals 'no timeout'\n    \n    df_swdc = pd.DataFrame(\n        tuple(\n            {\n                \"Date\": datetime.fromtimestamp(ts),\n                col: value\n            }\n            for ts, value in swinging_door_compression(\n                point_generator(df[[\"Date\", col]]), deviation=swdc_deviation, timeout=swdc_timeout\n            )\n        )\n    )\n    df1 = pd.merge_asof(df1, df_swdc, on=\"Date\", direction=\"nearest\", tolerance=tol, suffixes=[\"\", \"_compressed\"])\nif days > 0:\n    df1[\"Date\"] = df1[\"Date\"] - pd.Timedelta(days=days)\n\ndf_swdc = df1.dropna(thresh=2).reset_index(drop=True)\n\ndf_swdc.plot(x=\"Date\", y=\"GISTEMP\")\ndf_swdc.plot(x=\"Date\", y=\"GISTEMP_compressed\")\n\nprint(\n      \"Size after swinging door compression:           \"\n      f'{df_swdc[\"GISTEMP_compressed\"].count() / df_swdc[\"GISTEMP\"].count():>10.1%}'\n)\n\n# returns:\n\nSize after swinging door compression:                39.9%\n\n```\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PVanhevel/",
    "keywords": "python,historian,compression,deadband,swing door",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "historian-data-compression",
    "package_url": "https://pypi.org/project/historian-data-compression/",
    "platform": "any",
    "project_url": "https://pypi.org/project/historian-data-compression/",
    "project_urls": {
      "Homepage": "https://github.com/PVanhevel/",
      "Source": "https://github.com/PVanhevel/historian_data_compression",
      "Tracker": "https://github.com/PVanhevel/historian_data_compression/issues"
    },
    "release_url": "https://pypi.org/project/historian-data-compression/0.0.14/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Deadband and swinging door compression of historian data with Python.",
    "version": "0.0.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13623692,
  "releases": {
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1298a0a395c7d6f228bed30f17929ca7155492403828a1f377075538347efd85",
          "md5": "9ae24d3dbce8fb349b5e79a674f2d801",
          "sha256": "e0da92c1565a69dabbc8f8a753ba830c144ce8c1f579311306945fd8fcf80aec"
        },
        "downloads": -1,
        "filename": "historian_data_compression-0.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ae24d3dbce8fb349b5e79a674f2d801",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9736,
        "upload_time": "2022-04-26T06:53:55",
        "upload_time_iso_8601": "2022-04-26T06:53:55.787879Z",
        "url": "https://files.pythonhosted.org/packages/12/98/a0a395c7d6f228bed30f17929ca7155492403828a1f377075538347efd85/historian_data_compression-0.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edc84dfe0cacdd3fa7166f89ad3f6ab584fc2e98b8d70e6613ebab68c8d30fdc",
          "md5": "bec44dfde4901763c774296e0c523267",
          "sha256": "5bcaa2ac8e4321a672082de59d3eabbd8dee10914bcda718a130ea4a3c23b59c"
        },
        "downloads": -1,
        "filename": "historian_data_compression-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "bec44dfde4901763c774296e0c523267",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8341,
        "upload_time": "2022-04-26T06:53:56",
        "upload_time_iso_8601": "2022-04-26T06:53:56.818178Z",
        "url": "https://files.pythonhosted.org/packages/ed/c8/4dfe0cacdd3fa7166f89ad3f6ab584fc2e98b8d70e6613ebab68c8d30fdc/historian_data_compression-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1298a0a395c7d6f228bed30f17929ca7155492403828a1f377075538347efd85",
        "md5": "9ae24d3dbce8fb349b5e79a674f2d801",
        "sha256": "e0da92c1565a69dabbc8f8a753ba830c144ce8c1f579311306945fd8fcf80aec"
      },
      "downloads": -1,
      "filename": "historian_data_compression-0.0.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ae24d3dbce8fb349b5e79a674f2d801",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9736,
      "upload_time": "2022-04-26T06:53:55",
      "upload_time_iso_8601": "2022-04-26T06:53:55.787879Z",
      "url": "https://files.pythonhosted.org/packages/12/98/a0a395c7d6f228bed30f17929ca7155492403828a1f377075538347efd85/historian_data_compression-0.0.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edc84dfe0cacdd3fa7166f89ad3f6ab584fc2e98b8d70e6613ebab68c8d30fdc",
        "md5": "bec44dfde4901763c774296e0c523267",
        "sha256": "5bcaa2ac8e4321a672082de59d3eabbd8dee10914bcda718a130ea4a3c23b59c"
      },
      "downloads": -1,
      "filename": "historian_data_compression-0.0.14.tar.gz",
      "has_sig": false,
      "md5_digest": "bec44dfde4901763c774296e0c523267",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8341,
      "upload_time": "2022-04-26T06:53:56",
      "upload_time_iso_8601": "2022-04-26T06:53:56.818178Z",
      "url": "https://files.pythonhosted.org/packages/ed/c8/4dfe0cacdd3fa7166f89ad3f6ab584fc2e98b8d70e6613ebab68c8d30fdc/historian_data_compression-0.0.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}