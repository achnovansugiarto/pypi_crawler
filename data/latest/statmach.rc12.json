{
  "info": {
    "author": "Howard C Lovatt.",
    "author_email": "howard.lovatt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# statmach\n\n## Pythonic Finite State Machine\n\nState machines represent different states, and the transition between states \nthat have a repetitive sequence that is pre-determined.\nExamples are many appliances (kettle, toaster, etc.),\nmachines in general (traffic lights, factory automation, etc.), and\nstateful software (UI screens, wizards, etc.).\nThese are very broad categories of uses and therefore state machines are common.\n\nA frequent characteristic of a state machine is that the input events \narrive asynchronously and therefore adding\na formal structure is useful otherwise the code becomes difficult to understand, \ndebug, and maintain.\nYou can 'roll-your-own' state machine; but using a pre-tested module, \nlike this one,\nis both easier and more reliable.\nIn particular, error handling is very tricky to get right.\n\nAt a top (most abstract) level state machines are easy to code, just:\n\n  1. List the inputs (events).\n     Actually a set of events because you can't have repeats.\n     Also, the set is finite, i.e. can't have an infinite number of inputs.\n     In practice state machines are only practical if the number of events \n     is less than about 100.\n  2. List the states.\n     Again actually a set, no repeats.\n     Again only practical up to a few 100.\n  3. List the transitions from one state to the next in response to an event \n     and at the same time give the new output.\n\nThe above requirements are often represented as a state diagram, \nwhich helpful to document code (see example diagrams below).\n\n### Installation\n\nThe code is written in Python 3.5 and is designed run on \n[MicroPython](https://micropython.org) \n(making it suitable for real hardware) as well as desktop (normal) Python.\nAll the code is in one small file (``statmach.py``).\n\n  1. pip install --upgrade statmach\n  2. Copy ``statmach.py`` into your project\n     (probably needed for a Micropython project - IDE dependent).\n\n### Terminology Used in this Module\n\n  1. The overall state machine is a ``Machine``.\n  2. The state machine has ``States``.\n  3. Inputs to the machine are events, which are typically enum members.\n  4. The response of a ``State`` to an event is an action, \n     which is a tuple of: new-state and new-output.\n  5. Events are ``fired`` into the ``Machine`` and \n     the actions give the new states and new outputs.\n\n### Making a State Machine\n\nThe steps to make a state machine are:\n\n  1. Define input events, typically using an enum or class \n     with just class attributes.\n  2. Define outputs,\n     which is often an enum but could be as complicated as a function \n     to execute to obtain a derived value\n     or as simple as `None` (the default) if the output is a side effect \n     of entry and exit to the state (common in embedded applications).\n  3. Define states (class ``State``).\n  4. Define actions (tuples of new state and new value)\n     to take when events fire (add actions to the states and the machine).\n  5. Define a ``Machine`` using a ``with`` statement.\n  6. Fire events into the machine and obtain outputs.\n\nE.g. an edge detector\n(it detects when its input changes from 0 to 1 or vice versa \nand outputs a 1 if it does, otherwise a 0):\n\n![Edge Detector State Diagram](media/EdgeDetectorStateDiagram.png)\n\nStates are traditionally drawn as circles; \nand the initial state is marked with a double circle (shown in black).\nStates traditionally have an identifier, \nbecause it is easier to follow what is happening if a state is uniquely identified.\nThe identifiers are inside the circles that representing the states.\nActions are the arrows from one state to the next (shown in blue).\nInputs that cause the action to be taken are above the line on the \naction annotation (shown in green).\nOutputs that result when the action is taken are below the line on the \naction annotation (shown in red).\n\n```python\nfrom enum import Enum\nfrom statmach import  State, Machine\n\nBit = Enum('Bit', 'ZERO ONE')  # 1. & 2. Define the inputs (in this case also the outputs).\n\ns_i = State(ident='i')  # 3. Define the states.\ns_0 = State(ident=0)\ns_1 = State(ident=1)\n\ns_i.actions = {Bit.ZERO: (s_0, Bit.ZERO), Bit.ONE: (s_1, Bit.ZERO)}  # 4. Define the actions.\ns_0.actions = {Bit.ZERO: (s_0, Bit.ZERO), Bit.ONE: (s_1, Bit.ONE)}\ns_1.actions = {Bit.ZERO: (s_0, Bit.ONE), Bit.ONE: (s_1, Bit.ZERO)}\n\nwith Machine(initial_state=s_i) as machine:  # 5. Define the machine.\n    assert machine.state is s_i\n    assert machine.fire(event=Bit.ZERO) is Bit.ZERO  # 6. Fire events and obtain outputs.\n    assert machine.state is s_0\n    assert machine.fire(event=Bit.ZERO) is Bit.ZERO\n    assert machine.state is s_0\n    assert machine.fire(event=Bit.ONE) is Bit.ONE\n    assert machine.state is s_1\n    assert machine.fire(event=Bit.ONE) is Bit.ZERO\n    assert machine.state is s_1\n    assert machine.fire(event=Bit.ZERO) is Bit.ONE\n    assert machine.state is s_0\n```\n\nNote how the startup is dealt with, initially outputting a 0 for either input.\nThis special start up condition is achieved using a\nstart up state that is not used again after the first event is fired.\nThis unique startup state is a common feature of state machines.\n\nThe edge detector is an example of a state machine that has an \noutput associated with each action;\nthese are called Mealy Machine (see below).\n\nA more complicated example is a traffic light machine:\n\n![Traffic Light State Diagram](media/TrafficLightStateDiagram.png)\n\nThis state diagram has three features that are different \nfrom the edge detector diagram above:\n\n  1. The output is associated with the state not the action, \n     i.e. all transition to a given state result in the same output.\n     This is denoted in the diagram by the below the line output shown \n     on the state (in red) and not on the action annotation.\n  2. The machine has actions that are the default for all states, \n     shown as a dotted line that does not originate from a state (shown in blue).\n     These machine actions are 'overridden' by state actions, \n     hence their dotted nomenclature to indicate lesser.\n  3. There is no way out of state 'flashing_red' (it is a terminal failure); \n     other than restarting the machine so that it goes back to 'red'.\n\nThe traffic light example has two common requirements: the events arrive \nasynchronously, and it is important (because it is safety critical)\nthat all events are dealt with even if they arrive unexpectedly.\nFor example if the traffic light is red when the amber timeout occurs, \nthis is an error because the machine is waiting\nfor the red timeout not the amber.\n\nNote in the diagram, upper left, how the unexpected events and the \nerror event are dealt with for the whole machine,\nrather than coding this requirement on all states individually.\nThese machine actions can be 'overridden' by a state; \nso for example when in the red state and\nthe red timer finished the next state is green, as expected (not an error).\n\nThe advantage of the machine dealing with common actions is that the actions \nof the state machine are much\neasier to follow.\n\n```python\nfrom enum import Enum, auto\nfrom statmach import  State, Machine\n\nclass Inputs(Enum):  # 1. The inputs.\n    RED_TIMEOUT = auto()\n    AMBER_TIMEOUT = auto()\n    GREEN_TIMEOUT = auto()\n    ERROR = auto()\n\nclass Outputs(Enum):  # 2. The outputs.\n    RED = auto()\n    AMBER = auto()\n    GREEN = auto()\n    FLASHING_RED = auto()\n\nflashing_red = State(ident='flashing_red', value=Outputs.FLASHING_RED)  # 3. The states.\nred = State(ident='red', value=Outputs.RED)\namber = State(ident='amber', value=Outputs.AMBER)\ngreen = State(ident='green', value=Outputs.GREEN)\n\nred.actions[Inputs.RED_TIMEOUT] = green.action  # 4a. The *state* actions.\ngreen.actions[Inputs.GREEN_TIMEOUT] = amber.action\namber.actions[Inputs.AMBER_TIMEOUT] = red.action\n\nwith Machine(initial_state=red) as machine:  # 5. The machine.\n    machine.actions[Inputs.RED_TIMEOUT] = flashing_red.action  # 4b. The *machine* actions.\n    machine.actions[Inputs.AMBER_TIMEOUT] = flashing_red.action\n    machine.actions[Inputs.GREEN_TIMEOUT] = flashing_red.action\n    machine.actions[Inputs.ERROR] = flashing_red.action\n\n    assert machine.state is red\n    assert machine.fire(event=Inputs.RED_TIMEOUT) is Outputs.GREEN  # 6. Fire events and obtain outputs.\n    assert machine.state is green\n    assert machine.fire(event=Inputs.GREEN_TIMEOUT) is Outputs.AMBER\n    assert machine.state is amber\n    assert machine.fire(event=Inputs.AMBER_TIMEOUT) is Outputs.RED\n    assert machine.state is red\n    assert machine.fire(event=Inputs.AMBER_TIMEOUT) is Outputs.FLASHING_RED\n    assert machine.state is flashing_red\n    assert machine.fire(event=Inputs.ERROR) is Outputs.FLASHING_RED\n    assert machine.state is flashing_red\n```\n\nNote how the defining actions in this case are split between state actions, \n4a, and machine actions, 4b,\nwhich makes the code shorter, easier to maintain, and easier to debug.\n\nThe traffic light machine is an example of a state machine that has an output \nassociated with each state,\nthese are called Moore Machines (see below).\n\nThe traffic light example can be run on real hardware, \nfor example a [PyBoard](https://store.micropython.org/product/PYBv1.1H).\nThe complete project is on \n[Github](https://github.com/hlovatt/upythonstatmachex/tree/master).\nThe code is below and is an example of a third type of state machine, \none were the output is a side effect of entering and leaving the states\n(it is therefore a variation on a Moore Machine).\nIn particular side effects of the ``__entry__`` and ``__exit__`` methods \ncontrol the outputs:\n\n```python\nfrom statmach import State, Machine\nfrom pyb import LED, Timer, wfi, Switch\nfrom micropython import alloc_emergency_exception_buf, schedule\n\nalloc_emergency_exception_buf(200)\n\n\ndef main():\n    print('Traffic lights running ...')\n\n    class Events:\n        RED_TIMEOUT = 1\n        AMBER_TIMEOUT = 2\n        GREEN_TIMEOUT = 3\n        ERROR = 4\n        START = 5\n\n    start = State(ident='start')  # Special start state to allow for initialization before operation.\n\n    timer0 = 10\n\n    class FlashingRed(State):  # Special fault state that should never exit.\n        def __init__(self):\n            super().__init__(ident='error')\n            self.timer = Timer(timer0 + 4)\n            self.led = LED(1)\n\n            # noinspection PyUnusedLocal\n            def toggle_with_arg(not_used):  # Toggle func that accepts an arg, because ``schedule`` *needs* an arg.\n                self.led.toggle()\n\n            self.led_tog_ref = toggle_with_arg  # Store the function reference locally to avoid allocation in interrupt.\n\n        def __enter__(self):\n            self.timer.init(freq=2, callback=lambda _: schedule(self.led_tog_ref, None))\n            return self\n\n        def __exit__(self, exc_type, exc_val, exc_tb):\n            self.led.off()\n            self.timer.deinit()\n\n    flashing_red = FlashingRed()\n\n    traffic_lights = Machine(initial_state=start)  # The traffic light machine.\n    traffic_lights.actions[Events.RED_TIMEOUT] = flashing_red.action  # Catch anything unexpected.\n    traffic_lights.actions[Events.AMBER_TIMEOUT] = flashing_red.action\n    traffic_lights.actions[Events.GREEN_TIMEOUT] = flashing_red.action\n    traffic_lights.actions[Events.ERROR] = flashing_red.action\n    traffic_lights.actions[Events.START] = flashing_red.action\n\n    tl_fire_ref = traffic_lights.fire  # Store the function reference locally to avoid allocation in interrupt.\n    error = Switch()\n    error.callback(lambda: schedule(tl_fire_ref, Events.ERROR))\n\n    class LEDState(State):  # Output is determined by ``__enter__`` and ``__exit__`` (common in embedded machines).\n        def __init__(self, led_num, time_on, event):\n            super().__init__(ident=led_num)  # Use the LED num as the ident.\n            self.led = LED(self.ident)  # The LED to use.\n            self.timer = Timer(timer0 + self.ident)  # The timer to use.\n            self.timeout = time_on  # Time to wait before firing event.\n            self.event = event  # Event to fire at end of time_on.\n\n        def __enter__(self):\n            self.led.on()\n            self.timer.init(freq=1 / self.timeout, callback=lambda _: schedule(tl_fire_ref, self.event))\n            return self\n\n        def __exit__(self, exc_type, exc_value, traceback):\n            self.led.off()\n            self.timer.deinit()\n            return False\n\n    red = LEDState(led_num=1, time_on=3, event=Events.RED_TIMEOUT)\n    green = LEDState(led_num=2, time_on=3, event=Events.GREEN_TIMEOUT)\n    amber = LEDState(led_num=3, time_on=0.5, event=Events.AMBER_TIMEOUT)\n\n    red.actions[Events.RED_TIMEOUT] = green.action\n    green.actions[Events.GREEN_TIMEOUT] = amber.action\n    amber.actions[Events.AMBER_TIMEOUT] = red.action\n    start.actions[Events.START] = red.action\n\n    with traffic_lights:\n        _ = traffic_lights.fire(event=Events.START)  # Start the machine once all the setup is complete.\n        while True:  # Keep running timers (and other peripherals), but otherwise do nothing.\n            wfi()\n\n\nif __name__ == '__main__':\n    main()\n```\n\nThis Micropython code is as the desktop Python traffic-light code above,\nexcept that the output occurs in the ``__entry__`` and ``__exit__`` methods.\nIn particular these methods start and stop timers and turn LEDs on and off.\nThe timers in turn schedule events to fire when they timeout.\nThe ``usr`` switch on the PyBoard board is used to simulate a fault.\n\nA further difference between the Micropython and desktop code\nis that the Micropython code has a start state, this state is to allow the\nstate machine to be initialized before it is started \n(which is common for state machines).\n\nThe state machine's value can be anything including a function or method to call. \nThis allows for states that have additional state that is not \npart of the state machine 'per se', which is common for in UI applications \nwere the state machine determines which screen is displayed but not its contents.\nA simple example of 'extra' state is a state that records how long it is 'the' state\nof the state machine:\n\n```python\nfrom statmach import  State, Machine\nfrom time import time\n\nclass StateTime(State):\n  def __init__(self):\n      super().__init__(value=self.state_active_time)  # Value is a function.\n      self._enter_time = None\n\n  def state_active_time(self):\n      return time() - self._enter_time\n\n  def __enter__(self):\n      self._enter_time = time()\n      return self\n\n  def __exit__(self, exc_type, exc_val, exc_tb):\n      self._enter_time = None\n      return False\n\nstate_active_time = 1\ns = StateTime()\ns.actions[state_active_time] = s.action\nwith Machine(initial_state=s) as m:\n  assert m.fire(state_active_time)() >= 0  # Value is a function which is called, 2nd `()`.\n```\n\nFor more state machine examples see ``test_statmach.py``.\n\n### Pythonic Aspects of this Module\n\n  1. Both ``State`` and ``Machine`` are context managers,\n     which allows for enter and exit code and error handling.\n  2. Use Python ``with`` for executing a ``Machine``.\n  3. Code is compatible with Python 3.5+ and MicroPython 1.12+.\n\n### Formal Definition\n\nThe state machine implemented is a Mealy machine, \nsee https://en.wikipedia.org/wiki/Mealy_machine,\nbut a Moore Machine (https://en.wikipedia.org/wiki/Moore_machine), \nthe other common type of state machine, \ncan also be easily represented by giving a state a value and \nusing the state's ``action`` method when registering events.\nThe formal definition of a Mealy machine is a 5-tuple (S, S0, Σ, Λ, T) \nthat consisting of the following:\n\n  * A finite set of states S.\n    Class ``State`` represents a state.\n  * A start state (also called initial state) S0 which is an element of S.\n    When a ``Machine`` is created it must be given an initial state.\n  * A finite set called the input alphabet Σ.\n    Inputs are unique objects, typically members of an enum.\n  * A finite set called the output alphabet Λ.\n    The output is any type.\n  * A combined transition and output function T : S × Σ → S × Λ.\n    The transitions are actions on each state that are called \n    when the corresponding event fires,\n    the actions give the new state and new output.\n\nIn the strictest sense the state machine implemented by this module is \nsuperset of a Mealy Machine because:\n\n  1. The code does not enforce that there are a fixed set of states, S, \n     and this set can be added to or removed from whilst executing the machine.\n     However, the set of events handled is constant.\n  2. Although the set of events handled is constant the actions associated with\n     the events can be changed whilst executing the machine.\n  2. Both the machine and the state classes can be extended to add extra \n     fields to them\n     (thus giving extra state that is not part of the state machine 'per se').\n  3. Side effects of the ``__entry__`` and ``__exit__`` methods can be the \n     outputs (common in embedded applications).\n  4. Has extensive error control via Python exceptions and error handling by \n     ``__exit__`` methods.\n  5. Has machine actions that can be 'overridden' by state actions.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hlovatt/statmach",
    "keywords": "",
    "license": "LIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "statmach",
    "package_url": "https://pypi.org/project/statmach/",
    "platform": "any",
    "project_url": "https://pypi.org/project/statmach/",
    "project_urls": {
      "Homepage": "https://github.com/hlovatt/statmach"
    },
    "release_url": "https://pypi.org/project/statmach/1.0.10/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Pythonic Finite State Machine with both action outputs (Mearly) and state outputs (Moore).",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9974686,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41a9ee95b8a16420262836ee33a7bc1e1e808557bf77066cb9e3c67e0617f4ab",
          "md5": "112911ecba51fcaf91f43ad64901558c",
          "sha256": "ec34d70de3f3accc29b951986ec6f8e5129d02a464f258b3d44734b2df530f89"
        },
        "downloads": -1,
        "filename": "statmach-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "112911ecba51fcaf91f43ad64901558c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5176,
        "upload_time": "2021-02-10T05:38:39",
        "upload_time_iso_8601": "2021-02-10T05:38:39.434166Z",
        "url": "https://files.pythonhosted.org/packages/41/a9/ee95b8a16420262836ee33a7bc1e1e808557bf77066cb9e3c67e0617f4ab/statmach-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "249db030ff4feb960441f765f9ac79f518ec541b162754ebe9b9b883922b3174",
          "md5": "759d22b5c8b790125da047c4d3f47a35",
          "sha256": "b52d739a38e1cf2daf0b99dbaa17ca7c5bb38d1ca469f2867b4e856fcdf56694"
        },
        "downloads": -1,
        "filename": "statmach-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "759d22b5c8b790125da047c4d3f47a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8054,
        "upload_time": "2021-02-10T05:38:40",
        "upload_time_iso_8601": "2021-02-10T05:38:40.968664Z",
        "url": "https://files.pythonhosted.org/packages/24/9d/b030ff4feb960441f765f9ac79f518ec541b162754ebe9b9b883922b3174/statmach-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84617ad26640f14cc7d5eff19a3a664b0f838ac473196d41589cbe5542e0d141",
          "md5": "d1ef97e6ade3c8eb35dbeb02f303d160",
          "sha256": "349e90455719a014f2797aee70b5fcb9c21214caa8f0c615df380c64332da82e"
        },
        "downloads": -1,
        "filename": "statmach-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ef97e6ade3c8eb35dbeb02f303d160",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5249,
        "upload_time": "2021-02-13T06:51:47",
        "upload_time_iso_8601": "2021-02-13T06:51:47.303440Z",
        "url": "https://files.pythonhosted.org/packages/84/61/7ad26640f14cc7d5eff19a3a664b0f838ac473196d41589cbe5542e0d141/statmach-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea74703e457f178d5e965909fdab8ad641a1941254e3d7400e5f6ffa1b072c1",
          "md5": "bf5093958527c12716fc5dd27a7d9bfb",
          "sha256": "67ef01234e3094029d8b73b80d4fa1ea660aec2b396341859c93c7a10d434e4a"
        },
        "downloads": -1,
        "filename": "statmach-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bf5093958527c12716fc5dd27a7d9bfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9420,
        "upload_time": "2021-02-13T06:51:48",
        "upload_time_iso_8601": "2021-02-13T06:51:48.505008Z",
        "url": "https://files.pythonhosted.org/packages/1e/a7/4703e457f178d5e965909fdab8ad641a1941254e3d7400e5f6ffa1b072c1/statmach-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a44f48cea4d1137b99209054e677810c2a5d745b44b0db40957325d8e5106b64",
          "md5": "deb3b950e38cf1e92fc59c1f65bb2ad0",
          "sha256": "6f4ffcd080e3504266289d1080547b079aa5dc192ec3c7cd5b4e4bc2c58e812e"
        },
        "downloads": -1,
        "filename": "statmach-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "deb3b950e38cf1e92fc59c1f65bb2ad0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5821,
        "upload_time": "2021-02-14T07:07:47",
        "upload_time_iso_8601": "2021-02-14T07:07:47.927673Z",
        "url": "https://files.pythonhosted.org/packages/a4/4f/48cea4d1137b99209054e677810c2a5d745b44b0db40957325d8e5106b64/statmach-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cee40e0b54a38612604877a174290d5207eb5fc22685727cf82122a04980caa",
          "md5": "4c84ff6ac24166d569aaa1c50efb2994",
          "sha256": "cab148a726379a8e82236c8eb3e283f7937d544c1e9313110fcd7894bce1c05a"
        },
        "downloads": -1,
        "filename": "statmach-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4c84ff6ac24166d569aaa1c50efb2994",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10032,
        "upload_time": "2021-02-14T07:07:49",
        "upload_time_iso_8601": "2021-02-14T07:07:49.293324Z",
        "url": "https://files.pythonhosted.org/packages/5c/ee/40e0b54a38612604877a174290d5207eb5fc22685727cf82122a04980caa/statmach-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f54f4c21fddafdc3c3febc4d32e2a14099bf4717e4ba9d12a063a7c4d8c484d1",
          "md5": "3df57430ddbe75385ae98dca3654e02a",
          "sha256": "4505457511561be663ca8783fa7939e95668202509b8a6367e21216d37991080"
        },
        "downloads": -1,
        "filename": "statmach-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3df57430ddbe75385ae98dca3654e02a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6014,
        "upload_time": "2021-02-18T05:54:06",
        "upload_time_iso_8601": "2021-02-18T05:54:06.137340Z",
        "url": "https://files.pythonhosted.org/packages/f5/4f/4c21fddafdc3c3febc4d32e2a14099bf4717e4ba9d12a063a7c4d8c484d1/statmach-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46632af697becd91778cb1875b4c687596e72ded78e584b0d0ba91d80c622659",
          "md5": "916538ad751be95cfcac03f301f79c12",
          "sha256": "efb799570d9607dba3213f4483cb331b936470d313034f457a8c60020774eb4b"
        },
        "downloads": -1,
        "filename": "statmach-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "916538ad751be95cfcac03f301f79c12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10226,
        "upload_time": "2021-02-18T05:54:07",
        "upload_time_iso_8601": "2021-02-18T05:54:07.384246Z",
        "url": "https://files.pythonhosted.org/packages/46/63/2af697becd91778cb1875b4c687596e72ded78e584b0d0ba91d80c622659/statmach-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b03b0b9434f589632fe4a2a6ab28776d717d5faf86c777cf776a9d40cdfdcf6",
          "md5": "f5e5299654fc08fa33d7f039ec79a4ae",
          "sha256": "1663bdb62043671b22b2bcb912269b5d86ea284d10011dd6307dbdc7a1543cef"
        },
        "downloads": -1,
        "filename": "statmach-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5e5299654fc08fa33d7f039ec79a4ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6023,
        "upload_time": "2021-02-18T22:42:02",
        "upload_time_iso_8601": "2021-02-18T22:42:02.175909Z",
        "url": "https://files.pythonhosted.org/packages/8b/03/b0b9434f589632fe4a2a6ab28776d717d5faf86c777cf776a9d40cdfdcf6/statmach-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb604a7fd9691974839aa880ae4ade23730815ce0b6e3c011cbdfdde554dcf5c",
          "md5": "62fad90e208254bb176b97d400b59531",
          "sha256": "c9b1be640c7ed99b31f05e56ba03d12ac4f6c0aa98fe664e9d9db8abcb0d8742"
        },
        "downloads": -1,
        "filename": "statmach-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "62fad90e208254bb176b97d400b59531",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10334,
        "upload_time": "2021-02-18T22:42:03",
        "upload_time_iso_8601": "2021-02-18T22:42:03.580583Z",
        "url": "https://files.pythonhosted.org/packages/fb/60/4a7fd9691974839aa880ae4ade23730815ce0b6e3c011cbdfdde554dcf5c/statmach-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e94d3ee195420e8353b3e7931e920fc9feb5c78f1e8b32a64d2962f8cc8e731",
          "md5": "18846ab21864d8047cb239e0f931a464",
          "sha256": "1da2366cd12f3c3e36e9afe26a3145c7b64bac943508e3af479f058d8b86b4d2"
        },
        "downloads": -1,
        "filename": "statmach-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18846ab21864d8047cb239e0f931a464",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11048,
        "upload_time": "2021-04-05T04:49:30",
        "upload_time_iso_8601": "2021-04-05T04:49:30.851845Z",
        "url": "https://files.pythonhosted.org/packages/5e/94/d3ee195420e8353b3e7931e920fc9feb5c78f1e8b32a64d2962f8cc8e731/statmach-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6103ba0a79a2771c61d9cf376fc56408803a52041c85230e0922afcb09d2337b",
          "md5": "23de50f97e3b87e03b5fd171002b347e",
          "sha256": "75d37c8840941187d9ccb42b160b25250b18278fbb335841edfa8b0d4ae9cb44"
        },
        "downloads": -1,
        "filename": "statmach-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "23de50f97e3b87e03b5fd171002b347e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13176,
        "upload_time": "2021-04-05T04:49:33",
        "upload_time_iso_8601": "2021-04-05T04:49:33.101862Z",
        "url": "https://files.pythonhosted.org/packages/61/03/ba0a79a2771c61d9cf376fc56408803a52041c85230e0922afcb09d2337b/statmach-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7db8ffb665d6a2479fa9c6ae577c0823b235f309bc7ac1ca973399955a84182e",
          "md5": "23a7bb712f6d0a07ef8576241f4a3c66",
          "sha256": "53f3302b5a218bbd7c5c4866ad46f7e05206a35de98794a3bcaf4210c3d93355"
        },
        "downloads": -1,
        "filename": "statmach-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23a7bb712f6d0a07ef8576241f4a3c66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6020,
        "upload_time": "2021-02-18T23:06:37",
        "upload_time_iso_8601": "2021-02-18T23:06:37.523766Z",
        "url": "https://files.pythonhosted.org/packages/7d/b8/ffb665d6a2479fa9c6ae577c0823b235f309bc7ac1ca973399955a84182e/statmach-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34e713bbb9c61c23ad8959af3e7912cebed827b6d4e15fdce6769f3c221e74ee",
          "md5": "22f1a7051c82a91ac11b54c7c95af372",
          "sha256": "71623ec206d008bdd758db98a80138ecda9f90d3395cfff4b5d0d06b132bb55b"
        },
        "downloads": -1,
        "filename": "statmach-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "22f1a7051c82a91ac11b54c7c95af372",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10336,
        "upload_time": "2021-02-18T23:06:38",
        "upload_time_iso_8601": "2021-02-18T23:06:38.741996Z",
        "url": "https://files.pythonhosted.org/packages/34/e7/13bbb9c61c23ad8959af3e7912cebed827b6d4e15fdce6769f3c221e74ee/statmach-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2905cea478bd7d754d415fb474ebd9f2063e2c70a1aa7ce66250c73726c6e24e",
          "md5": "e6db94f98b10c2b344f39d02aec61589",
          "sha256": "3bbfc04773372e07d5216c3e30853d33070b89d76f923b550d0d7581a0371ad9"
        },
        "downloads": -1,
        "filename": "statmach-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6db94f98b10c2b344f39d02aec61589",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6022,
        "upload_time": "2021-02-18T23:24:29",
        "upload_time_iso_8601": "2021-02-18T23:24:29.825843Z",
        "url": "https://files.pythonhosted.org/packages/29/05/cea478bd7d754d415fb474ebd9f2063e2c70a1aa7ce66250c73726c6e24e/statmach-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b37ae59a616aad8d4e81756ada53f7c85dae81ff065e60497343338138128feb",
          "md5": "73ec735b5044203ff8d8b6bedbd24b99",
          "sha256": "7de23c28f100a77bf9b8adccb19d32aa1067f328399547d07d2fc6ab248c4cee"
        },
        "downloads": -1,
        "filename": "statmach-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73ec735b5044203ff8d8b6bedbd24b99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10329,
        "upload_time": "2021-02-18T23:24:30",
        "upload_time_iso_8601": "2021-02-18T23:24:30.892121Z",
        "url": "https://files.pythonhosted.org/packages/b3/7a/e59a616aad8d4e81756ada53f7c85dae81ff065e60497343338138128feb/statmach-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16264da016842328ae71c1f40ea419478c701245ab51464c1b4bf2f8379eec3d",
          "md5": "b085ee7308b9b0682b8f7c4c785326a6",
          "sha256": "3d7c78127e461c4cdf9eadc28c6af604d16f13d429abad7efbaf71cf81922130"
        },
        "downloads": -1,
        "filename": "statmach-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b085ee7308b9b0682b8f7c4c785326a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6023,
        "upload_time": "2021-02-18T23:39:38",
        "upload_time_iso_8601": "2021-02-18T23:39:38.825990Z",
        "url": "https://files.pythonhosted.org/packages/16/26/4da016842328ae71c1f40ea419478c701245ab51464c1b4bf2f8379eec3d/statmach-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35da2319e2c2358c76a106eda66a0e781953922d4c3f6c41c72a44bbf7f05548",
          "md5": "9ca6bdaaa8bcb2806bd506e9b37b95ba",
          "sha256": "1c972efad30010586f764c096d07050a0d2b9be655bd3adfea1ee24cb36f501a"
        },
        "downloads": -1,
        "filename": "statmach-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9ca6bdaaa8bcb2806bd506e9b37b95ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10328,
        "upload_time": "2021-02-18T23:39:39",
        "upload_time_iso_8601": "2021-02-18T23:39:39.984323Z",
        "url": "https://files.pythonhosted.org/packages/35/da/2319e2c2358c76a106eda66a0e781953922d4c3f6c41c72a44bbf7f05548/statmach-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9281b9751cfc0449d1ac7c3df8a6af1914f34c3c45bf18809d1640372e8eeeb6",
          "md5": "a88c142cc158c4c4bd8e8b7dbcc3ac1e",
          "sha256": "4ea1d1510a1ce5526d5c73b0222c4f4f5e607f9a8aa4bc1b1334f949f246cb87"
        },
        "downloads": -1,
        "filename": "statmach-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a88c142cc158c4c4bd8e8b7dbcc3ac1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6022,
        "upload_time": "2021-02-19T00:02:16",
        "upload_time_iso_8601": "2021-02-19T00:02:16.002782Z",
        "url": "https://files.pythonhosted.org/packages/92/81/b9751cfc0449d1ac7c3df8a6af1914f34c3c45bf18809d1640372e8eeeb6/statmach-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532df56be226dbfee01c7a5ec4959575162f75f4c758c5e1fb88f5c3b165f792",
          "md5": "5b3d2328cb4590c6ff7b5186dc116d17",
          "sha256": "bf02fee8287b55946277e19490c00fd9b71fc0a161013f0fbdb4b0924beaa208"
        },
        "downloads": -1,
        "filename": "statmach-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5b3d2328cb4590c6ff7b5186dc116d17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10303,
        "upload_time": "2021-02-19T00:02:17",
        "upload_time_iso_8601": "2021-02-19T00:02:17.232443Z",
        "url": "https://files.pythonhosted.org/packages/53/2d/f56be226dbfee01c7a5ec4959575162f75f4c758c5e1fb88f5c3b165f792/statmach-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "425fe656be44cddf9892843e85227a8e2725eb373d08d916d5fab5020470f204",
          "md5": "c5e95ed970c82ddc0e912b536cfd2c82",
          "sha256": "3749a6a12e5dac4ce076cc3f67b412a781cf4785c176925a4049e96eec64c5e0"
        },
        "downloads": -1,
        "filename": "statmach-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5e95ed970c82ddc0e912b536cfd2c82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6024,
        "upload_time": "2021-02-23T04:38:23",
        "upload_time_iso_8601": "2021-02-23T04:38:23.674780Z",
        "url": "https://files.pythonhosted.org/packages/42/5f/e656be44cddf9892843e85227a8e2725eb373d08d916d5fab5020470f204/statmach-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b903998b07646cf77ae97dcbb725cd8c3b261856328918af77594f899240ec33",
          "md5": "f0b96d96873cf8a1d1e264ddea383ce1",
          "sha256": "8858e4f2a494d675294920769b97b3c334d57ad48bd85695a9a7a8b513bdebe0"
        },
        "downloads": -1,
        "filename": "statmach-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f0b96d96873cf8a1d1e264ddea383ce1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10595,
        "upload_time": "2021-02-23T04:38:25",
        "upload_time_iso_8601": "2021-02-23T04:38:25.654782Z",
        "url": "https://files.pythonhosted.org/packages/b9/03/998b07646cf77ae97dcbb725cd8c3b261856328918af77594f899240ec33/statmach-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66f37c6fdc2896fbb6659764ea4bf8ff38ccb0e9edc03f7c5ad385e68f00f417",
          "md5": "34a0ffb47be562976c8d64d01b9e0409",
          "sha256": "f71218108ff0822450f2bd74c88cc882131f174183f8deb2e1c94989e53f3b6f"
        },
        "downloads": -1,
        "filename": "statmach-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34a0ffb47be562976c8d64d01b9e0409",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6038,
        "upload_time": "2021-02-23T04:51:17",
        "upload_time_iso_8601": "2021-02-23T04:51:17.678928Z",
        "url": "https://files.pythonhosted.org/packages/66/f3/7c6fdc2896fbb6659764ea4bf8ff38ccb0e9edc03f7c5ad385e68f00f417/statmach-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b5d02248af103168445e9abe77600102e67077d349c56d2c4629622984e5387",
          "md5": "2073e9e4443d1830018b59186aa004a0",
          "sha256": "18f01205dbe95fd458f9612ae7bab181b4e45454ce457c3912fa49392cb29716"
        },
        "downloads": -1,
        "filename": "statmach-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2073e9e4443d1830018b59186aa004a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10594,
        "upload_time": "2021-02-23T04:51:19",
        "upload_time_iso_8601": "2021-02-23T04:51:19.914977Z",
        "url": "https://files.pythonhosted.org/packages/2b/5d/02248af103168445e9abe77600102e67077d349c56d2c4629622984e5387/statmach-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e94d3ee195420e8353b3e7931e920fc9feb5c78f1e8b32a64d2962f8cc8e731",
        "md5": "18846ab21864d8047cb239e0f931a464",
        "sha256": "1da2366cd12f3c3e36e9afe26a3145c7b64bac943508e3af479f058d8b86b4d2"
      },
      "downloads": -1,
      "filename": "statmach-1.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18846ab21864d8047cb239e0f931a464",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11048,
      "upload_time": "2021-04-05T04:49:30",
      "upload_time_iso_8601": "2021-04-05T04:49:30.851845Z",
      "url": "https://files.pythonhosted.org/packages/5e/94/d3ee195420e8353b3e7931e920fc9feb5c78f1e8b32a64d2962f8cc8e731/statmach-1.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6103ba0a79a2771c61d9cf376fc56408803a52041c85230e0922afcb09d2337b",
        "md5": "23de50f97e3b87e03b5fd171002b347e",
        "sha256": "75d37c8840941187d9ccb42b160b25250b18278fbb335841edfa8b0d4ae9cb44"
      },
      "downloads": -1,
      "filename": "statmach-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "23de50f97e3b87e03b5fd171002b347e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 13176,
      "upload_time": "2021-04-05T04:49:33",
      "upload_time_iso_8601": "2021-04-05T04:49:33.101862Z",
      "url": "https://files.pythonhosted.org/packages/61/03/ba0a79a2771c61d9cf376fc56408803a52041c85230e0922afcb09d2337b/statmach-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}