{
  "info": {
    "author": "RafaÅ‚ Bigaj, Maksymilian Erazmus",
    "author_email": "rafal.bigaj@pl.ibm.com, maksymilian.erazmus1@pl.ibm.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# IBM Watson Pipelines Python Client\n\nThis package provides various utilities for working with IBM Watson Pipelines. \nIts primary usage is to enable users to store artifact results of a notebook run.\n\n\n## Usage\n\n### Construction\n\n`WatsonPipelines` client is constructed from IAM APIKEY, which can be provided\nin a few ways:\n\n* explicitly:\n\n  ```python\n  from ibm_watson_pipelines import WatsonPipelines\n  \n  client = WatsonPipelines(apikey)\n  # or\n  client = WatsonPipelines.from_apikey(apikey)\n  # or\n  client = WatsonPipelines.from_token(token)\n  ```\n\n* implicitly:\n\n  ```bash\n  APIKEY=...\n  export APIKEY\n  ```\n  or\n  ```bash\n  USER_ACCESS_TOKEN=...\n  export USER_ACCESS_TOKEN\n  ```\n\n  ```python\n  from ibm_watson_pipelines import WatsonPipelines\n\n  # use APIKEY\n  client = WatsonPipelines.from_apikey()\n\n  # use USER_ACCESS_TOKEN\n  client = WatsonPipelines.from_token()\n\n  # try APIKEY, if absent then USER_ACCESS_TOKEN:\n  client = WatsonPipelines()\n  # or\n  client = WatsonPipelines.new_instance()\n  ```\n\nAll of the above may also define `service_name` and `url`.\n\nThe exact procedure of deciding which authentication method to use:\n1. If `from_apikey` or `from_token` is used, the method is forced.\n2. If constructor is used but either `apikey` or `bearer_token` argument\n  was provided, that method will be forced (if both are present,\n  an overloading error will be raised). Note that providing a nameless\n  argument is equivalent to providing `apikey`.\n3. If constructor or `new_instance` is used, `APIKEY` env-var is used.\n4. If constructor or `new_instance` is used, but `APIKEY` env-var is not\n   present, `USER_ACCESS_TOKEN` env-var is used.\n5. If none of the above matches, an error is returned.\n\n\n### Usage in Python notebooks\n\nNotebooks run in IBM Watson Pipelines get inputs and expose\noutputs as a node:\n\n```\n{\n  \"id\": ...,\n  \"type\": \"execution_node\",\n  \"op\": \"run_container\",\n  \"app_data\": {\n    \"pipeline_data\": {\n      \"name\": ...,\n      \"config\": {\n        \"link\": {\n          \"component_id_ref\": \"run-notebook\"\n        }\n      },\n      \"inputs\": [\n        ...,\n        {\n          \"name\": \"model_name\",\n          \"group\": \"env_variables\",\n          \"type\": \"String\",\n          \"value_from\": ...\n        }\n      ],\n      \"outputs\": [\n        {\n          \"name\": \"trained_model\",\n          \"group\": \"output_variables\",\n          \"type\": {\n            \"CPDPath\": {\n              \"path_type\": \"resource\",\n              \"resource_type\": \"asset\",\n              \"asset_type\": \"wml_model\"\n            }\n          }\n        }\n      ]\n    }\n  },\n  ...\n}\n```\n\nInside of the notebook, inputs are available as environmental\nvariables:\n\n```python\nmodel_name = os.environ['model_name']\n```\n\nOutputs are exposed using sdk method, `store_results`:\n\n```python\nclient = WSPipelines.from_apikey(...)\nclient.store_results({\n  \"trained_model\": ... // cpd path to the trained model\n})\n```\n\n\n### Extracting credentials\n\nOn public cloud, this client provides a method for easy retrieval of WML\ninstance credentials and scope storage credentials:\n\n```python\nclient.get_wml_credentials() # the scope passed in notebook\n# or\nclient.get_wml_credentials(\"cpd:///projects/123456789\")\n```\n```python\nclient.get_storage_credentials() # the scope passed in notebook\n# or\nclient.get_storage_credentials(\"cpd:///projects/123456789\")\n```\n\nNote how the result will vary depending on the authentication method\nused to create the client.\n\n\n### CPD-Path manipulation\n\nCPD-Path parsing is manipulation is also supported:\n\n```python\nfrom ibm_watson_pipelines import CpdScope, WatsonPipelines\n\nclient = WatsonPipelines.from_apikey()\n\nscope = CpdScope.from_string(\"cpd:///projects/123456789\")\n\nassert scope.scope_type() == \"projects\"\nassert scope.scope_id() == \"123456789\"\n\nclient.get_wml_credentials(scope)\n```\n\nDifferent kinds of CPD-Paths will have different properties, providing the same\ninterface across scopes, resource and file paths:\n\n```python\nfrom ibm_watson_pipelines import CpdPath\n\nscope_file_path = CpdPath.from_string(\"cpd:///projects/123456789/files/abc/def\")\nassert scope_file_path.scope_type() == \"projects\"\nassert scope_file_path.scope_id() == \"123456789\"\nassert scope_file_path.file_path() == \"/abc/def\"\n\nconnection_path = CpdPath.from_string(\"cpd:///projects/123456789/connections/3141592\")\nassert connection_path.scope_type() == \"projects\"\nassert connection_path.scope_id() == \"123456789\"\nassert connection_path.resource_type() == \"connections\"\nassert connection_path.resource_id() == \"3141592\"\n\nconnection_file_path = CpdPath.from_string(\"cpd:///projects/123456789/connections/3141592/files/~/abc/def\")\nassert connection_file_path.scope_type() == \"projects\"\nassert connection_file_path.scope_id() == \"123456789\"\nassert connection_file_path.resource_type() == \"connections\"\nassert connection_file_path.resource_id() == \"3141592\"\nassert connection_file_path.bucket_name() == \"~\"\nassert connection_file_path.file_path() == \"/abc/def\"\n```\n\n...additionally, for non-scope paths the scope can be extracted, if present:\n\n```python\nfrom ibm_watson_pipelines import CpdPath\n\nscope_path = CpdPath.from_string(\"cpd:///projects/123456789\")\nconnection_path = CpdPath.from_string(\"cpd:///projects/123456789/connections/3141592\")\nassert connection_path.scope() == scope_path\n```\n\n### Custom components for use in the pipeline\nA custom pipeline component executes a script you write. You can use custom components to share reusable scripts between pipelines.\n\nYou create custom components as project assets. You can then use the components in pipelines you create in that project. You can create as many custom components for pipelines as needed. Currently, to create a custom component you must create one programmatically, using a Python function.\n\n#### Creating a component as a project asset\nTo create a custom component, use the Python client to authenticate with IBM Watson Pipelines, code the component, then publish the component to the specified project. After it is available in the project, you can assign it to a node in a pipeline and run it as part of a pipeline flow.\n\nThis example demonstrates the process of publishing a component that adds two numbers together.\n\nPublish a function as a component with the latest Python client. Run the following code in a Jupyter notebook in a project of your Cloud Pak for Data.\n\n```python\n# Install libraries\n! pip install ibm-watson-pipelines==1.0.0\n\n# Authentication\nfrom ibm_watson_pipelines import WatsonPipelines\n\napikey = ''\nservice_url = 'your_host_url'\nproject_id = 'your_project_id'\n\nclient = WatsonPipelines.from_apikey(apikey, url=service_url)\n\n# Define the function of the component\n\n# If you define the input parameters, users are required to \n# input them in the UI\n\ndef add_two_numbers(a: int, b: int) -> int:\n  print('Adding numbers: {} + {}.'.format(a, b))\n  return a + b + 10\n  \n# Other possible functions might be sending a Slack message,\n# or listing directories in a storage volume, and so on.\n\n# Publish the component    \nclient.publish_component(\n  name='Add numbers', # Appears in UI as component name \n  func=add_two_numbers,\n  description='Custom component adding numbers', # Appears in UI as component description \n  project_id=project_id,\n  overwrite=True, # Overwrites an existing component with the same name \n)\n```\n\n#### Manage pipeline components\n- list components from a project:\n```python\nclient.get_components(project_id=project_id)\n```\n- get a component by ID:\n```python\nclient.get_component(project_id=project_id, component_id=component_id)\n```\n- get a component by name:\n```python\nclient.get_component(project_id=project_id, name=component_name)\t\n```\n- publish a new component:\n```python\nclient.publish_component(component name)\n```\n- delete a component by ID:\n```python\nclient.delete_component(project_id=project_id, component_id=component_id)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.ibm.com/docs/en/cloud-paks/cp-data/4.6.x?topic=functions-watson-pipelines",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ibm-watson-pipelines",
    "package_url": "https://pypi.org/project/ibm-watson-pipelines/",
    "platform": null,
    "project_url": "https://pypi.org/project/ibm-watson-pipelines/",
    "project_urls": {
      "Homepage": "https://www.ibm.com/docs/en/cloud-paks/cp-data/4.6.x?topic=functions-watson-pipelines"
    },
    "release_url": "https://pypi.org/project/ibm-watson-pipelines/1.0.0/",
    "requires_dist": [
      "ibm-cloud-sdk-core (>=3.11.3)",
      "ibm-cos-sdk (>=2.10.0)",
      "attrs (>=21.2.0)",
      "kfp (>=1.8.11)",
      "requests (>=2.25.1)",
      "responses (>=0.13.4)",
      "pytest (>=6.2.5)",
      "typing-extensions (>=3.7.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "Python utilities for IBM Watson Pipelines",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15952295,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28a77c84bcbb060a98825ba1217461b7cf58cee27142f5f54b73102cd0f3c396",
          "md5": "ea8f1c11e6007486cffb724c16feb613",
          "sha256": "2ffa894b3e583f5d7997fd443d726ab41b465c7f3ee3ca74dd510ed3dbba5196"
        },
        "downloads": -1,
        "filename": "ibm_watson_pipelines-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea8f1c11e6007486cffb724c16feb613",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28034,
        "upload_time": "2022-12-01T08:19:02",
        "upload_time_iso_8601": "2022-12-01T08:19:02.464220Z",
        "url": "https://files.pythonhosted.org/packages/28/a7/7c84bcbb060a98825ba1217461b7cf58cee27142f5f54b73102cd0f3c396/ibm_watson_pipelines-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d58a7e35dbb0d38a74d62b0e570b01e9a4d85a1879c2d6743524b281b89f19b8",
          "md5": "7df60a7c24468aab49e28525b217c7f7",
          "sha256": "128b9987c72f8b4474750b8070186a7c02ea9306fc19a3ad993a3e77af87650f"
        },
        "downloads": -1,
        "filename": "ibm-watson-pipelines-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7df60a7c24468aab49e28525b217c7f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30364,
        "upload_time": "2022-12-01T08:19:04",
        "upload_time_iso_8601": "2022-12-01T08:19:04.562880Z",
        "url": "https://files.pythonhosted.org/packages/d5/8a/7e35dbb0d38a74d62b0e570b01e9a4d85a1879c2d6743524b281b89f19b8/ibm-watson-pipelines-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28a77c84bcbb060a98825ba1217461b7cf58cee27142f5f54b73102cd0f3c396",
        "md5": "ea8f1c11e6007486cffb724c16feb613",
        "sha256": "2ffa894b3e583f5d7997fd443d726ab41b465c7f3ee3ca74dd510ed3dbba5196"
      },
      "downloads": -1,
      "filename": "ibm_watson_pipelines-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea8f1c11e6007486cffb724c16feb613",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28034,
      "upload_time": "2022-12-01T08:19:02",
      "upload_time_iso_8601": "2022-12-01T08:19:02.464220Z",
      "url": "https://files.pythonhosted.org/packages/28/a7/7c84bcbb060a98825ba1217461b7cf58cee27142f5f54b73102cd0f3c396/ibm_watson_pipelines-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d58a7e35dbb0d38a74d62b0e570b01e9a4d85a1879c2d6743524b281b89f19b8",
        "md5": "7df60a7c24468aab49e28525b217c7f7",
        "sha256": "128b9987c72f8b4474750b8070186a7c02ea9306fc19a3ad993a3e77af87650f"
      },
      "downloads": -1,
      "filename": "ibm-watson-pipelines-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7df60a7c24468aab49e28525b217c7f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30364,
      "upload_time": "2022-12-01T08:19:04",
      "upload_time_iso_8601": "2022-12-01T08:19:04.562880Z",
      "url": "https://files.pythonhosted.org/packages/d5/8a/7e35dbb0d38a74d62b0e570b01e9a4d85a1879c2d6743524b281b89f19b8/ibm-watson-pipelines-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}