{
  "info": {
    "author": "Jan Verbeek",
    "author_email": "jan.verbeek@posteo.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Buildout",
      "Framework :: Odoo",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "`odoo-repl` improves Odoo's interactive shell. It's a development tool, useful for debugging and documentation. It lets you do many things that you might otherwise use `psql` and `grep` for.\n\nIt's compatible with Odoo 8 and upwards.\n\n# Installing\n\nThe module can be installed with pip: `pip install odoo-repl`.\n\n# Running\n\nThe most basic way to enable it is to run\n\n```python\nimport odoo_repl; odoo_repl.enable()\n```\n\nwhen in an ordinary `odoo-bin shell` environment or similar. That will make all the features available.\n\n## pdb\n\nYou can also use it to enhance `pdb`. Instead of setting a breakpoint with `import pdb; pdb.set_trace()`, write `import odoo_repl; odoo_repl.set_trace()`.\n\n## Buildout\n\nIf you use the [Odoo buildout recipe](http://docs.anybox.fr/anybox.recipe.odoo/current/) you can instead launch it using the `odoo-repl` wrapper script, which invokes `python_odoo` and does the basic setup for you. The script is automatically installed when you install the module using `pip`.\n\nRun `odoo-repl` in the buildout directory to launch it, or pass it the path to a buildout directory.\n\nArguments after `--` will be forwarded to Odoo. So to pick a specific database, run `odoo-repl . -- -d <database name>`. (The `.` is necessary to use the current directory.)\n\nRun `odoo-repl --help` to see a full list of options.\n\n# Overview\n\n`odoo-repl` is useful for a few different things:\n\n- Documentation. View summaries of models, fields, methods, and more, including where they were defined and how they are overridden.\n\n- Experimentation. Debug your code by calling methods directly, without the web interface getting in the way.\n\n- Exploring records. Get overviews of all a record's fields, run quick and dirty searches, and refer to records with convenient syntax.\n\nIt adds its own methods to many objects. Those generally end with an underscore, e.g. `.source_()` rather than `.source()`, to avoid conflicts with existing names.\n\n# Documentation\n\nAll models are made available as ordinary names. That means that you can type `res.currency` instead of `env['res.currency']`, and that you can press tab to complete model names.\n\nYou can type the name of something to get a summary of it. This works for models, fields, and methods.\n\n## Models\n\n```pycon\n>>> res.currency\nres.currency\nCurrency\n\nbase:\n sd  active:                 boolean\n s   currency_subunit_label: char (Currency Subunit)\n s   currency_unit_label:    char (Currency Unit)\n   c date:                   date\n s c decimal_places:         integer\nRs   name:                   char (Currency)\n sd  position:               selection (Symbol Position)\n   c rate:                   float (Current Rate)\n s   rate_ids:               one2many: res.currency.rate (Rates)\n sd  rounding:               float (Rounding Factor)\nRs   symbol:                 char\n\nbase: [...]/odoo/addons/base/models/res_currency.py:23\n```\n\nThis is an overview all the fields that are defined on the model.\n\nEach field is marked with `r`, `s`, `d`, and `c`, which stand for `required`, `stored`, `default` and `computed`, respectively. You can use this to quickly tell which fields you should expect to find in the database, which ones may not have a value, and so on.\n\nA field that's marked as `R` is required and doesn't have a default, so you should usually pass it to `.create()`.\n\nThe module and file where the model was defined are listed at the bottom. `odoo-repl` tries to provide that information whenever possible.\n\n## Fields\n\nThat model overview doesn't tell you everything. You can get more detailed information about a field:\n\n```pycon\n>>> res.currency.rounding\nfloat rounding on res.currency (store, related_sudo)\nRounding Factor\nDefault value: 0.01\nbase: [...]/odoo/addons/base/models/res_currency.py:34\n```\n\nYou can find information about the default value, whether/how it's computed, and where it was defined.\n\n## Methods\n\nThe same thing works for methods:\n\n```pycon\n>>> res.currency.round\n@api.multi\nres.currency.round(self, amount)\nReturn ``amount`` rounded  according to ``self``'s rounding rules.\n\n:param float amount: the amount to round\n:return: rounded float\n\nbase: [...]/odoo/addons/base/models/res_currency.py:130\n```\n\nYou can see the signature, decorators, docstrings, and everywhere it was defined. This is especially useful to track how different modules override the same method.\n\n## Source code\n\nIt's often helpful to look at the actual source code instead of these summaries. For that, all of these objects have a `.source_()` method. Run that to get the source code printed to your screen:\n\n```pycon\n>>> res.currency.rounding.source_()\nbase: [...]/odoo/addons/base/models/res_currency.py:34\nrounding = fields.Float(string='Rounding Factor', digits=(12, 6), default=0.01)\n```\n\nYou can also call the `.edit_()` method to launch a text editor at the right file and line. The editor is taken from your `$EDITOR` environment variable, or `nano` by default.\n\n# Working with records\n\nIf you know a record's ID you can refer to it concisely, e.g. `res.currency[1]`. This representation is used throughout `odoo-repl`, so often you can just copy/paste it. You can also create a recordset this way, e.g. `res.currency[1, 2, 3]`.\n\n## Summaries\n\nA record is printed with the value of all its fields:\n\n```pycon\nres.currency[1] (ref.base.EUR)\nEUR\nactive:                 True\ncurrency_subunit_label: 'Cents'\ncurrency_unit_label:    'Euros'\ndate:                   2010-01-01\ndecimal_places:         2\nname:                   'EUR'\nposition:               'after'\nrate:                   1.0\nrate_ids:               res.currency.rate[129] (ref.base.rateEUR)\nrounding:               0.01\nsymbol:                 '€'\n\nWritten on 2020-02-11 13:00:34\n\nbase: [...]/odoo/addons/base/data/res_currency_data.xml:1166\n```\n\nIf possible, you're also told when and by whom it was created and modified.\n\nIf the record has a XML ID you're told what it is (`base.EUR` in this case) as well as the files where it was defined.\n\n## Methods\n\nYou can call `.open_()` to open the record in your browser.\n\n`.source_()` and `.edit_()` work on records that were defined in XML files.\n\n## Shorthand\n\nInstead of writing `env.ref('base.EUR')`, you can write `ref.base.EUR`. This has tab completion.\n\nTo get the `res.users` record for `admin`, you can write `u.admin`, or `u['admin']`. That shorthand works with any username. It's useful for trying things as different users, e.g. `.sudo(u.demo)`.\n\n## Searching\n\nModels have a method called `_` that works as a more flexible version of `search`. It supports keyword arguments and it's less fussy about record IDs and delimiters.\n\nLet's say that you want to find the `res.country` record for Belgium. Normally you'd have to write `env['res.country'].search([(\"name\", \"=\", \"Belgium\")])`, which is pretty verbose. The shortest way to write it with `odoo-repl` is `res.country._(name=\"Belgium\")`.\n\nYou can use another operator by putting its name after a double underscore (`__`). To find all countries that *aren't* Belgium, use `res.country._(name__ne=\"Belgium\")`.\n\nThe same trick can be used for dotted paths across relations: `res.users._(partner_id__name=\"Mitchell Admin\")`.\n\nAlternatively you can write it as a flat list of arguments without any brackets, i.e. `res.users._(\"partner_id.name\", \"=\", \"Mitchell Admin\")`.\n\nWhen using records in a `.search()` domain you have to explicitly take the ID of the record instead of passing the record. `._()` doesn't need that, so `res.partner._(country_id=ref.base.be)` will just work.\n\n## Getting a random record\n\nThe `.shuf_()` method (short for \"shuffle\") gives you a random record. If you want to look at a random user record, just run `res.users.shuf_()`.\n\nIt takes an optional argument for the number of records to return. `res.users.shuf_(10)` will return a recordset with ten random users.\n\n## Operating on all records\n\nIterating over a model will iterate over all its records. So if you want to run a piece of code on all users, just start with `for user in res.users:`. This is equivalent to `for user in env['res.users'].search([]):`, just shorter.\n\nThe `.mapped()` and `.filtered()` methods on models also operate on all records, saving you from typing `.search([])`.\n\n# More model information\n\nBesides the summaries, there are methods to get more information about a model.\n\n## Listing menus\n\nThe `.menus_()` method prints ways the model can be reached in the web interface, with information about the views that are used. For example:\n\n```pycon\n>>> project.task.menus_()\nProject/All Tasks (ref.project.action_view_task)\n    calendar: ir.ui.view[591] (ref.project.view_task_calendar)\n    form: ir.ui.view[588] (ref.project.view_task_form2)\n    graph: ir.ui.view[593] (ref.project.view_project_task_graph)\n    kanban: ir.ui.view[589] (ref.project.view_task_kanban)\n    pivot: ir.ui.view[592] (ref.project.view_project_task_pivot)\n    timeline: ir.ui.view[1094] (ref.project_timeline.project_task_timeline)\n    tree: ir.ui.view[590] (ref.project.view_task_tree2)\n    activity: ???\n\nres.users → Assigned Tasks (ref.project.act_res_users_2_project_task_opened)\n    calendar: ir.ui.view[591] (ref.project.view_task_calendar)\n    form: ir.ui.view[588] (ref.project.view_task_form2)\n    graph: ir.ui.view[593] (ref.project.view_project_task_graph)\n    tree: ir.ui.view[590] (ref.project.view_task_tree2)\n```\n\nOn this instance, you can reach `project.task` by navigating to the \"All Tasks\" submenu in \"Project\", and you can choose from a number of different view types. They all have their `ir.ui.view` record listed, except for the `activity` type, for which it couldn't be determined.\n\nYou can also reach tasks from the \"Assigned Tasks\" menu on `res.users` records.\n\n## Security information\n\n`.rules_()` prints all the `ir.model.access` and `ir.rule` records that apply to a model:\n\n```pycon\n>>> account.invoice.rules_()\nir.model.access[355] (ref.account.access_account_invoice_uinvoice)\naccount.invoice\nBilling (ref.account.group_account_invoice)\nread, write, create, unlink\n\n[...]\n\nir.model.access[543] (ref.purchase.access_account_invoice_purchase_manager)\naccount_invoice purchase manager\nManager (ref.purchase.group_purchase_manager)\nread,      ,       ,\n\n[...]\n\nir.rule[68] (ref.account.invoice_comp_rule)\nInvoice multi-company\nEveryone\nread, write, create, unlink\n['|',\n ('company_id', '=', False),\n ('company_id', 'child_of', [user.company_id.id])]\naccount: [...]/addons/account/security/account_security.xml:126\n```\n\nYou still need a good grasp of how `ir.model.access` and `ir.rule` work to interpret this information correctly.\n\n## Rendering views\n\n`.view_()` prints the XML used to render a model's view. By default, it prints the form view, but you can pass an argument to render a different view.\n\n```pycon\n>>> account.invoice.view_('tree')\n\n<tree decoration-info=\"state == 'draft'\" decoration-muted=\"state == 'cancel'\" decoration-bf=\"not partner_id\" string=\"Vendor Bill\" js_class=\"account_bills_tree\">\n  <field name=\"partner_id\" invisible=\"1\"/>\n[...]\n  <field name=\"company_currency_id\" invisible=\"1\"/>\n  <field name=\"state\"/>\n  <field name=\"type\" invisible=\"context.get('type',True)\"/>\n</tree>\n```\n\n## Listing methods\n\n`.methods_()` lists all the methods that are defined for the model, grouped by implementing module.\n\nMethods that are available on all models are only shown if they're overridden.\n\n```pycon\n>>> res.partner.methods_()\nproject\n_compute_task_count(self)\n\npartner_multi_relation_tabs\n_add_tab_pages(self, view)\n_compute_tabs_visibility(self)\n_get_tabs(self)\nadd_field(self, tab)\nbrowse(self, arg=None, prefetch=None)\nfields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False)\n\n[...]\n```\n\n## SQL information\n\n`.sql_()` shows a very basic summary of a model's table in the database.\n\n```pycon\n>>> res.currency.sql_()\nres_currency\naccuracy:    int4\nactive:      bool\nbase:        bool\ncompany_id:  int4\ncreate_date: timestamp\ncreate_uid:  int4\ndate:        date\nid:          int4\nname:        varchar\nposition:    varchar\nrounding:    numeric\nsymbol:      varchar\nwrite_date:  timestamp\nwrite_uid:   int4\n```\n\n# Integrations\n\n`odoo-repl` can integrate with a few external programs.\n\n## git\n\nObjects with a `.source_()` method also have a `.gitsource_()` method that generates URLs for git repositories. This is useful for sharing with other people.\n\nIf possible it will create a URL with a commit hash in it, so it will stay the same even if the repository is updated.\n\n```pycon\n>>> res.users._browse.gitsource_()\nbase_suspend_security: https://github.com/OCA/server-backend/blob/92ebf2d/base_suspend_security/models/res_users.py#L11\nBaseModel: https://github.com/oca/ocb/blob/f228ae0ce5e/odoo/models.py#L4675\n```\n\nAlthough only Github links are shown here it also works with other hosts that are similar enough to Github, like private Gitlab instances.\n\n## grep\n\nObjects with a `.source_()` method have a `.grep_()` method for running `grep` on their source code. This is especially useful when they are defined across many different modules.\n\nYou can also use the `grep_()` function to search through all installed modules and Odoo's code (while skipping modules that aren't installed).\n\n[`ripgrep`](https://github.com/BurntSushi/ripgrep) (`rg`) is used instead of `grep` if it's installed. This is recommended because it has more readable output when searching multiple files and handles directory searches better.\n\nKeyword arguments are converted to flags. To get one line of context you'd pass `-C 1` to `grep`. You can get the same by passing `C=1` to `.grep_()`.\n\n```pycon\n>>> ir.attachment.grep_(\"ValidationError\", C=1)\n[...]/odoo/addons/base/models/ir_attachment.py\n14-from odoo import api, fields, models, tools, SUPERUSER_ID, exceptions, _\n15:from odoo.exceptions import AccessError, ValidationError\n16-from odoo.tools import config, human_size, ustr, html_escape\n--\n334-            if not any([has_group(g) for g in self.get_serving_groups()]):\n335:                raise ValidationError(\"Sorry, you are not allowed to write on this document\")\n336-\n--\n564-            except Exception:\n565:                raise exceptions.ValidationError(_(\"ERROR: Invalid PDF file!\"))\n566-            max_page = input_pdf.getNumPages()\n--\n606-        if 'pdf' not in self.mimetype:\n607:            raise exceptions.ValidationError(_(\"ERROR: the file must be a PDF\"))\n608-        if indices:\n--\n611-            except ValueError:\n612:                raise exceptions.ValidationError(_(\"ERROR: Invalid list of pages to split. Example: 1,5-9,10\"))\n613-            return self._split_pdf_groups(pdf_groups=[[min(x), max(x)] for x in pages], remainder=remainder)\n\n```\n\n## fzf\n\n[`fzf`](https://github.com/junegunn/fzf) is a tool for fuzzy incremental searching. If you have it installed you can use it to search through records very easily.\n\nYou can use the `.fzf_()` method on a model to search through display names:\n\n```pycon\n>>> ir.ui.menu.fzf_()\n\n> Settings/Technical/Parameters/System Parameters\n  1/71\n> syste\n\nir.ui.menu[25] (ref.base.ir_config_menu)\nSettings/Technical/Parameters/System Parameters\naction:        ir.actions.act_window[10] (ref.base.ir_config_list_action)\nactive:        True\n[...]\n```\n\nOr you can use it on a field to search through the values of that field instead:\n\n```pycon\n>>> ir.ui.view.arch.fzf_()\n\n  ..arding_state') in ('done', 'just_done') else '') + (' o_onboarding_steps_just_done' if sta..\n  ..1\"/>                                     <field name=\"sub_model_object_field\" domain=\"[('m..\n  .., [])]}\" class=\"btn btn-primary float-right\" name=\"channel_join_and_get_info\">Join</button..\n> ..eld name=\"exclude_contact\"/>                             <field name=\"exclude_journal_item..\n  50/346\n> exclude_jo\n\nir.ui.view[96] (ref.base.base_partner_merge_automatic_wizard_form)\nbase.partner.merge.automatic.wizard.form\nactive:               True\n[...]\n```\n\nIt's hard to get it across in text, so it may be best to just try it.\n\n# Odoo addons\n\nOdoo addons/modules can be inspected interactively, as attributes of the `addons` object:\n\n```pycon\n>>> addons.base_suspend_security\nbase_suspend_security 12.0.1.0.1 by Therp BV, brain-tec AG, Odoo Community Association (OCA)\nhttp://localhost:8012/web?debug=1#model=ir.module.module&id=382\n[...]/server-backend/base_suspend_security\nInstalled\nSuspend security\nSuspend security checks for a call\nDepends: base\nDependents: base_user_role_history\nDefines: base, ir.model.access, ir.rule, res.users\n\n[...]\n\nThis module was written to  allow you to call code with some `uid` while being sure no security checks (`ir.model.access` and `ir.rule`) are done. In this way, it's the same as `sudo()`, but the crucial difference is that the code still runs with the original user id. This can be important for inherited code that calls workflow functions, subscribes the current user to some object, etc.\n\n[...]\n```\n\nIn addition to the contents of the `README`, you see its dependencies, the modules that depend on it, the models it defines, a link to it in the web interface, and its location in the filesystem.\n\nThese objects have a few useful methods and attributes. The `.manifest` attribute gives you the addon's manifest:\n\n```pycon\n>>> addons.base_suspend_security.manifest\n{'application': False,\n 'author': 'Therp BV, brain-tec AG, Odoo Community Association (OCA)',\n 'auto_install': False,\n 'category': 'Hidden/Dependency',\n[...]\n>>> addons.base_suspend_security.manifest.version\n'12.0.1.0.1'\n```\n\n`.record` gives you the `ir.module.module` record of the addon.\n\n`.open_()` opens the module in the web interface in your browser.\n\n`.grep_()` and `.gitsource_()` are supported.\n\n`.definitions_()` prints a listing of every model, field, method and record defined in the addon.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/janverb/odoo-repl",
    "keywords": "Odoo Interactive Shell REPL",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "odoo-repl",
    "package_url": "https://pypi.org/project/odoo-repl/",
    "platform": "",
    "project_url": "https://pypi.org/project/odoo-repl/",
    "project_urls": {
      "Homepage": "https://github.com/janverb/odoo-repl"
    },
    "release_url": "https://pypi.org/project/odoo-repl/0.0.3/",
    "requires_dist": [
      "Pygments"
    ],
    "requires_python": "",
    "summary": "Enhanced interactive Odoo shell",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11160361,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8bfd95aa6d231280885233ba138c8d4c9d8051e83c5a8602a8613378348eae5",
          "md5": "4639416ee6f40b3452ac81d592029279",
          "sha256": "6f01f20c4740fad9ab6fd42fa6ca49ec40dd70bcda4b4afe76edea2a93f05076"
        },
        "downloads": -1,
        "filename": "odoo_repl-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4639416ee6f40b3452ac81d592029279",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 75061,
        "upload_time": "2020-05-12T16:15:56",
        "upload_time_iso_8601": "2020-05-12T16:15:56.978794Z",
        "url": "https://files.pythonhosted.org/packages/b8/bf/d95aa6d231280885233ba138c8d4c9d8051e83c5a8602a8613378348eae5/odoo_repl-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d200cf27c9756b63bdee78f291af46ea5aa2a39af98eb42164e31c263eff3198",
          "md5": "4623774dd877e828a09ec83994ade100",
          "sha256": "3b08e7eafb6147ddb9a0467196d4ce53519447e982a3dc6f7799da14eb868049"
        },
        "downloads": -1,
        "filename": "odoo-repl-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4623774dd877e828a09ec83994ade100",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56402,
        "upload_time": "2020-05-12T16:15:59",
        "upload_time_iso_8601": "2020-05-12T16:15:59.257836Z",
        "url": "https://files.pythonhosted.org/packages/d2/00/cf27c9756b63bdee78f291af46ea5aa2a39af98eb42164e31c263eff3198/odoo-repl-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff91dbfae524ecb9ab12544d353aff8dd868c93e8c2be7cf5a5d7827604d0bee",
          "md5": "b890bc17bebee8df6e20989e7421a72d",
          "sha256": "196eb9acd4b672e9d732af71dc57a1823f442036ae0ac3e74ce248265029de76"
        },
        "downloads": -1,
        "filename": "odoo_repl-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b890bc17bebee8df6e20989e7421a72d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 78010,
        "upload_time": "2020-08-19T16:07:17",
        "upload_time_iso_8601": "2020-08-19T16:07:17.548984Z",
        "url": "https://files.pythonhosted.org/packages/ff/91/dbfae524ecb9ab12544d353aff8dd868c93e8c2be7cf5a5d7827604d0bee/odoo_repl-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f56c6869c96ae482ffb0ab6e97d1e03f222f382a8a3056e6a2bf23ed53cbb938",
          "md5": "4cc2d2528c3a62cea924d95bf4b96ed4",
          "sha256": "0968c2db68709e3777713449647508f3d80147b21d5e80398b54683cf53e6fa7"
        },
        "downloads": -1,
        "filename": "odoo-repl-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4cc2d2528c3a62cea924d95bf4b96ed4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59063,
        "upload_time": "2020-08-19T16:07:19",
        "upload_time_iso_8601": "2020-08-19T16:07:19.264604Z",
        "url": "https://files.pythonhosted.org/packages/f5/6c/6869c96ae482ffb0ab6e97d1e03f222f382a8a3056e6a2bf23ed53cbb938/odoo-repl-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c820481ed7854573b107c924d3255bf6b7750c48961e34973ce10356fe5e27db",
          "md5": "c922ec14acc1d77dbb18664c2a4536d1",
          "sha256": "191163f17ba04261aa519b52b1583f95059d1ee607f3b6ec660adf84ca66635c"
        },
        "downloads": -1,
        "filename": "odoo_repl-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c922ec14acc1d77dbb18664c2a4536d1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 79539,
        "upload_time": "2021-08-12T11:44:19",
        "upload_time_iso_8601": "2021-08-12T11:44:19.754495Z",
        "url": "https://files.pythonhosted.org/packages/c8/20/481ed7854573b107c924d3255bf6b7750c48961e34973ce10356fe5e27db/odoo_repl-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01482b9862f5a994031dfbef9a2021509766443d147d79aeb04ad981221b114b",
          "md5": "3babb660c4182c599d0e11e6835d2b44",
          "sha256": "f3c5bb3e89b2dd95d273a5da82ea4aedad7e2f8bddd09126c79f0d7dc253688c"
        },
        "downloads": -1,
        "filename": "odoo-repl-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3babb660c4182c599d0e11e6835d2b44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61460,
        "upload_time": "2021-08-12T11:44:23",
        "upload_time_iso_8601": "2021-08-12T11:44:23.931808Z",
        "url": "https://files.pythonhosted.org/packages/01/48/2b9862f5a994031dfbef9a2021509766443d147d79aeb04ad981221b114b/odoo-repl-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c820481ed7854573b107c924d3255bf6b7750c48961e34973ce10356fe5e27db",
        "md5": "c922ec14acc1d77dbb18664c2a4536d1",
        "sha256": "191163f17ba04261aa519b52b1583f95059d1ee607f3b6ec660adf84ca66635c"
      },
      "downloads": -1,
      "filename": "odoo_repl-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c922ec14acc1d77dbb18664c2a4536d1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 79539,
      "upload_time": "2021-08-12T11:44:19",
      "upload_time_iso_8601": "2021-08-12T11:44:19.754495Z",
      "url": "https://files.pythonhosted.org/packages/c8/20/481ed7854573b107c924d3255bf6b7750c48961e34973ce10356fe5e27db/odoo_repl-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01482b9862f5a994031dfbef9a2021509766443d147d79aeb04ad981221b114b",
        "md5": "3babb660c4182c599d0e11e6835d2b44",
        "sha256": "f3c5bb3e89b2dd95d273a5da82ea4aedad7e2f8bddd09126c79f0d7dc253688c"
      },
      "downloads": -1,
      "filename": "odoo-repl-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3babb660c4182c599d0e11e6835d2b44",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61460,
      "upload_time": "2021-08-12T11:44:23",
      "upload_time_iso_8601": "2021-08-12T11:44:23.931808Z",
      "url": "https://files.pythonhosted.org/packages/01/48/2b9862f5a994031dfbef9a2021509766443d147d79aeb04ad981221b114b/odoo-repl-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}