{
  "info": {
    "author": "Bohemia Automation / Altertech",
    "author_email": "div@altertech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Python async client for BUS/RT\n\nThe module contains Python sync client for [BUS/RT](https://github.com/alttch/busrt)\n\n## Installation\n\n```shell\npip3 install busrt_async\n```\n\n## Usage examples\n\n### Listener\n\n```python\nimport busrt_async\nimport asyncio\n\n# frame handler\nasync def on_frame(frame):\n    print('Frame:', hex(frame.type), frame.sender, frame.topic, frame.payload)\n\n\nasync def main():\n    name = 'test.client.python.async'\n    # create new BUS/RT client and connect\n    bus = busrt_async.client.Client('/tmp/busrt.sock', name)\n    bus.on_frame = on_frame\n    await bus.connect()\n    # subscribe to all topics\n    result = await bus.subscribe('#')\n    print(hex(await result.wait_completed()))\n    # wait for frames\n    print(f'listening for messages to {name}...')\n    while bus.is_connected():\n        await asyncio.sleep(0.1)\n\nasyncio.run(main())\n```\n\n### Sender\n\n```python\nimport busrt_async\nimport asyncio\n\nasync def main():\n    name = 'test.client.python.async_sender'\n    bus = busrt_async.client.Client('/tmp/busrt.sock', name)\n    await bus.connect()\n    # send a regular message\n    result = await bus.send('test.client.python.async',\n                            busrt_async.client.Frame('hello'))\n    print(hex(await result.wait_completed()))\n    # send a broadcast message\n    result = await bus.send(\n        'test.*',\n        busrt_async.client.Frame('hello everyone',\n                                 tp=busrt_async.client.OP_BROADCAST))\n    print(hex(await result.wait_completed()))\n    # publish to a topic with zero QoS (no confirmation required)\n    await bus.send(\n        'test/topic',\n        busrt_async.client.Frame('something',\n                                 tp=busrt_async.client.OP_PUBLISH,\n                                 qos=0))\n\nasyncio.run(main())\n```\n\n## RPC layer\n\n### Handler\n\n```python\nimport busrt_async\nimport asyncio\nimport msgpack\n\n# frame handler (topics/broadcasts)\nasync def on_frame(frame):\n    print('Frame:', hex(frame.type), frame.sender, frame.topic, frame.payload)\n\n# RPC notification handler\nasync def on_notification(event):\n    print('Notification:', event.frame.sender, event.get_payload())\n\n# RPC call handler\nasync def on_call(event):\n    # consider payload is encoded in msgpack\n    print('Call:', event.frame.sender, event.method,\n          msgpack.loads(event.get_payload(), raw=False))\n    # msgpack reply\n    return msgpack.dumps({'ok': True})\n\nasync def main():\n    name = 'test.client.python.async.rpc'\n    # create new BUS/RT client and connect\n    bus = busrt_async.client.Client('/tmp/busrt.sock', name)\n    await bus.connect()\n    # subscribe to all topics\n    result = await bus.subscribe('#')\n    print(hex(await result.wait_completed()))\n    # init rpc\n    rpc = busrt_async.rpc.Rpc(bus)\n    rpc.on_frame = on_frame\n    rpc.on_notification = on_notification\n    rpc.on_call = on_call\n    # wait for frames\n    print(f'listening for messages/calls to {name}...')\n    while rpc.is_connected():\n        await asyncio.sleep(0.1)\n\nasyncio.run(main())\n```\n\n### Caller\n\n```python\nimport busrt_async\nimport msgpack\nimport asyncio\n\nasync def main():\n    name = 'test.client.python.async.rpc.caller'\n    # create new BUS/RT client and connect\n    bus = busrt_async.client.Client('/tmp/busrt.sock', name)\n    await bus.connect()\n    # init rpc\n    rpc = busrt_async.rpc.Rpc(bus)\n    params = {'hello': 123}\n    # call a method, no reply required\n    result = await rpc.call0(\n        'test.client.python.async.rpc',\n        busrt_async.rpc.Request('test', msgpack.dumps(params)))\n    print(hex(await result.wait_completed()))\n    # call a method and wait for the reply\n    result = await rpc.call(\n        'test.client.python.async.rpc',\n        busrt_async.rpc.Request('test', msgpack.dumps(params)))\n    reply = await result.wait_completed()\n    print(msgpack.loads(reply.get_payload(), raw=False))\n\nasyncio.run(main())\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alttch/busrt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "busrt-async",
    "package_url": "https://pypi.org/project/busrt-async/",
    "platform": null,
    "project_url": "https://pypi.org/project/busrt-async/",
    "project_urls": {
      "Homepage": "https://github.com/alttch/busrt"
    },
    "release_url": "https://pypi.org/project/busrt-async/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python client for BUS/RT (async)",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15271968,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d075ba40a720129d58112681e380825e016b2ba55a3a838179e86757152e46c",
          "md5": "dbda7ba6efcfe4897e75bde88373aafe",
          "sha256": "9cd82f589917323b404c921e4381414970b78d0cae0c20293fb68f38c1e9c76c"
        },
        "downloads": -1,
        "filename": "busrt_async-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dbda7ba6efcfe4897e75bde88373aafe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7403,
        "upload_time": "2022-09-30T19:45:32",
        "upload_time_iso_8601": "2022-09-30T19:45:32.312929Z",
        "url": "https://files.pythonhosted.org/packages/7d/07/5ba40a720129d58112681e380825e016b2ba55a3a838179e86757152e46c/busrt_async-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e2217593a57325c957c4dc261590ff356be98bb0060b96ea396396a7efc7611",
          "md5": "c2e44e2c79f4070ff60ff2ff66f063f5",
          "sha256": "979fe357e6ca4f9a3dfc8633130ab436f11494e3e11a0581c6466beab4f719ff"
        },
        "downloads": -1,
        "filename": "busrt_async-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2e44e2c79f4070ff60ff2ff66f063f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7369,
        "upload_time": "2022-09-30T22:31:11",
        "upload_time_iso_8601": "2022-09-30T22:31:11.073080Z",
        "url": "https://files.pythonhosted.org/packages/2e/22/17593a57325c957c4dc261590ff356be98bb0060b96ea396396a7efc7611/busrt_async-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e2217593a57325c957c4dc261590ff356be98bb0060b96ea396396a7efc7611",
        "md5": "c2e44e2c79f4070ff60ff2ff66f063f5",
        "sha256": "979fe357e6ca4f9a3dfc8633130ab436f11494e3e11a0581c6466beab4f719ff"
      },
      "downloads": -1,
      "filename": "busrt_async-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c2e44e2c79f4070ff60ff2ff66f063f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7369,
      "upload_time": "2022-09-30T22:31:11",
      "upload_time_iso_8601": "2022-09-30T22:31:11.073080Z",
      "url": "https://files.pythonhosted.org/packages/2e/22/17593a57325c957c4dc261590ff356be98bb0060b96ea396396a7efc7611/busrt_async-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}