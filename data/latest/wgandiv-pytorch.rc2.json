{
  "info": {
    "author": "Liu Changyu",
    "author_email": "liuchangyu1111@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n# WassersteinGAN_DIV-PyTorch\n\n### Update (Feb 22, 2020)\n\nThe mnist and fmnist models are now available. Their usage is identical to the other models: \n```python\nfrom wgandiv_pytorch import Generator\nmodel = Generator.from_pretrained('g-mnist') \n```\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [Wasserstein Divergence for GANs](http://xxx.itp.ac.cn/pdf/1712.01026).\n\nThe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.  \n\nAt the moment, you can easily:  \n * Load pretrained Generate models \n * Use Generate models for extended dataset\n\n_Upcoming features_: In the next few days, you will be able to:\n * Quickly finetune an Generate on your own dataset\n * Export Generate models for production\n\n### Table of contents\n1. [About Wasserstein GAN DIV](#about-wasserstein-gan-div)\n2. [Model Description](#model-description)\n3. [Installation](#installation)\n4. [Usage](#usage)\n    * [Load pretrained models](#loading-pretrained-models)\n    * [Example: Extended dataset](#example-extended-dataset)\n    * [Example: Visual](#example-visual)\n5. [Contributing](#contributing) \n\n### About Wasserstein GAN DIV\n\nIf you're new to Wasserstein GAN DIV, here's an abstract straight from the paper:\n\nIn many domains of computer vision, generative adversarial networks (GANs) have achieved great success, among which the fam- ily of Wasserstein GANs (WGANs) is considered to be state-of-the-art due to the theoretical contributions and competitive qualitative performance. However, it is very challenging to approximate the k-Lipschitz constraint required by the Wasserstein-1 metric (W-met). In this paper, we propose a novel Wasserstein divergence (W-div), which is a relaxed version of W-met and does not require the k-Lipschitz constraint.As a concrete application, we introduce a Wasserstein divergence objective for GANs (WGAN-div), which can faithfully approximate W-div through optimization. Under various settings, including progressive growing training, we demonstrate the stability of the proposed WGAN-div owing to its theoretical and practical advantages over WGANs. Also, we study the quantitative and visual performance of WGAN-div on standard image synthesis benchmarks, showing the superior performance of WGAN-div compared to the state-of-the-art methods.\n### Model Description\n\nWe have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. It receives a random noise z and generates images from this noise, which is called G(z).Discriminator is a discriminant network that discriminates whether an image is real. The input is x, x is a picture, and the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, and if it's 0, it's not real.\n\n### Installation\n\nInstall from pypi:\n```bash\npip install wgandiv_pytorch\n```\n\nInstall from source:\n```bash\ngit clone https://github.com/Lornatang/WassersteinGAN_DIV-PyTorch.git\ncd WassersteinGAN_DIV-PyTorch\npip install -e .\n``` \n\n### Usage\n\n#### Loading pretrained models\n\nLoad an Wasserstein GAN DIV:\n```python\nfrom wgandiv_pytorch import Generator\nmodel = Generator.from_name(\"g-mnist\")\n```\n\nLoad a pretrained Wasserstein GAN DIV:\n```python\nfrom wgandiv_pytorch import Generator\nmodel = Generator.from_pretrained(\"g-mnist\")\n```\n\n#### Example: Extended dataset\n\nAs mentioned in the example, if you load the pre-trained weights of the MNIST dataset, it will create a new `imgs` directory and generate 64 random images in the `imgs` directory.\n\n```python\nimport os\nimport torch\nimport torchvision.utils as vutils\nfrom wgandiv_pytorch import Generator\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = Generator.from_pretrained(\"g-mnist\")\nmodel.to(device)\n# switch to evaluate mode\nmodel.eval()\n\ntry:\n    os.makedirs(\"./imgs\")\nexcept OSError:\n    pass\n\nwith torch.no_grad():\n    for i in range(64):\n        noise = torch.randn(64, 100, device=device)\n        fake = model(noise)\n        vutils.save_image(fake.detach(), f\"./imgs/fake_{i:04d}.png\", normalize=True)\n    print(\"The fake image has been generated!\")\n```\n\n#### Example: Visual\n\n```text\ncd $REPO$/framework\nsh start.sh\n```\n\nThen open the browser and type in the browser address [http://127.0.0.1:10004/](http://127.0.0.1:10004/).\nEnjoy it.\n\n### Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.   \n\nI look forward to seeing what the community does with these models! \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lornatang/WassersteinGAN_DIV-PyTorch",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wgandiv-pytorch",
    "package_url": "https://pypi.org/project/wgandiv-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/wgandiv-pytorch/",
    "project_urls": {
      "Homepage": "https://github.com/Lornatang/WassersteinGAN_DIV-PyTorch"
    },
    "release_url": "https://pypi.org/project/wgandiv-pytorch/0.1.2/",
    "requires_dist": [
      "torch"
    ],
    "requires_python": ">=3.5.0",
    "summary": "In many domains of computer vision, generative adversarial networks (GANs) have achieved great success, among which the fam- ily of Wasserstein GANs (WGANs) is considered to be state-of-the-art due to the theoretical contributions and competitive qualitative performance",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6679518,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba56c24442a45e3e259587ffc1e76bb74e556a26473e770f644ebcb8f2e2572",
          "md5": "82f8bc4828155848d0552b2964602546",
          "sha256": "910250041458cb87f298501dd17e29e2d32a089823380a4b9d5e7630f2fa1dad"
        },
        "downloads": -1,
        "filename": "wgandiv_pytorch-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82f8bc4828155848d0552b2964602546",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 11326,
        "upload_time": "2020-02-22T02:46:59",
        "upload_time_iso_8601": "2020-02-22T02:46:59.981901Z",
        "url": "https://files.pythonhosted.org/packages/2b/a5/6c24442a45e3e259587ffc1e76bb74e556a26473e770f644ebcb8f2e2572/wgandiv_pytorch-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17d131adc6541c981727a1c5e383084a10c163ac6cfb921e469b988adf6e946a",
          "md5": "8896dfc35b5e08fa9f6034c4e008e8f2",
          "sha256": "6d08f3f6d57ddffab3f168ce4ca592a615ddfcd4cb44c7ecfbc2d9cfdf81c9da"
        },
        "downloads": -1,
        "filename": "wgandiv_pytorch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8896dfc35b5e08fa9f6034c4e008e8f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 7042,
        "upload_time": "2020-02-22T02:47:02",
        "upload_time_iso_8601": "2020-02-22T02:47:02.872671Z",
        "url": "https://files.pythonhosted.org/packages/17/d1/31adc6541c981727a1c5e383084a10c163ac6cfb921e469b988adf6e946a/wgandiv_pytorch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5f10bcb5ba6fcc79750cf8bf087f61593a6a68f1f5a20373de72a0f84e81e4",
          "md5": "876e797344b3fd9b2d937f7077c14592",
          "sha256": "e6d57f650e7cd2e29e59e30f8b2bb47782a6c0f82bbd4c509089bbe7d26af2cd"
        },
        "downloads": -1,
        "filename": "wgandiv_pytorch-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "876e797344b3fd9b2d937f7077c14592",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 11649,
        "upload_time": "2020-02-22T04:57:31",
        "upload_time_iso_8601": "2020-02-22T04:57:31.424581Z",
        "url": "https://files.pythonhosted.org/packages/ca/5f/10bcb5ba6fcc79750cf8bf087f61593a6a68f1f5a20373de72a0f84e81e4/wgandiv_pytorch-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60604b86bb9d165fda07bb6aabade58eaf2d841d3b5f74f03fc11c191d2894b",
          "md5": "331c11788ccac55a2618a2fa94180e93",
          "sha256": "6926f4a076df08bee0c6f7b71058eb8c46d195bae7a0a84f35e5bba48698a17e"
        },
        "downloads": -1,
        "filename": "wgandiv_pytorch-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "331c11788ccac55a2618a2fa94180e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 7835,
        "upload_time": "2020-02-22T04:57:33",
        "upload_time_iso_8601": "2020-02-22T04:57:33.356024Z",
        "url": "https://files.pythonhosted.org/packages/b6/06/04b86bb9d165fda07bb6aabade58eaf2d841d3b5f74f03fc11c191d2894b/wgandiv_pytorch-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca5f10bcb5ba6fcc79750cf8bf087f61593a6a68f1f5a20373de72a0f84e81e4",
        "md5": "876e797344b3fd9b2d937f7077c14592",
        "sha256": "e6d57f650e7cd2e29e59e30f8b2bb47782a6c0f82bbd4c509089bbe7d26af2cd"
      },
      "downloads": -1,
      "filename": "wgandiv_pytorch-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "876e797344b3fd9b2d937f7077c14592",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5.0",
      "size": 11649,
      "upload_time": "2020-02-22T04:57:31",
      "upload_time_iso_8601": "2020-02-22T04:57:31.424581Z",
      "url": "https://files.pythonhosted.org/packages/ca/5f/10bcb5ba6fcc79750cf8bf087f61593a6a68f1f5a20373de72a0f84e81e4/wgandiv_pytorch-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60604b86bb9d165fda07bb6aabade58eaf2d841d3b5f74f03fc11c191d2894b",
        "md5": "331c11788ccac55a2618a2fa94180e93",
        "sha256": "6926f4a076df08bee0c6f7b71058eb8c46d195bae7a0a84f35e5bba48698a17e"
      },
      "downloads": -1,
      "filename": "wgandiv_pytorch-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "331c11788ccac55a2618a2fa94180e93",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 7835,
      "upload_time": "2020-02-22T04:57:33",
      "upload_time_iso_8601": "2020-02-22T04:57:33.356024Z",
      "url": "https://files.pythonhosted.org/packages/b6/06/04b86bb9d165fda07bb6aabade58eaf2d841d3b5f74f03fc11c191d2894b/wgandiv_pytorch-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}