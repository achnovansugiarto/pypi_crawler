{
  "info": {
    "author": "hrpzcf",
    "author_email": "hrpzcf@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ColorfulTable\n\n## 模块简介\n\nColorfulTable 是一个用于在终端屏幕上打印漂亮表格的 Python3 模块，使用它可以方便地构建表格并选择打印到终端屏幕上。\n\n- 支持 Linux、Windows 等平台\n- 预置 6 种表格边框样式，也支持自定义\n- 支持自定义每个单元格独立的字体颜色和背景色\n- 支持单元格内换行（如果储存对象是字符串）\n- 支持设置水平对齐方式和垂直对齐方式\n- 支持对指定行或列设置固定行高和列宽，也支持设置自适应行高和列宽\n- 按单元格储存任意受支持的 Python 数据类型（以对象的 str 方法显示单元格内容）\n- 输出函数支持自定义要打印的行数范围，是否打印表格标题行，支持输出到 Python 文件对象\n- 等等...\n\n---\n\n\n## 函数文档\n\n- ### Table类\n\n1. #### 类初始化参数\n\n   ------\n\n   > **header**\n\n   **必选**位置参数，创建表格类Table类实例时的初始行（标题行），header数据类型应为可迭代对象，子数据类型则不限。\n\n   例如：\n\n   ```python\n   mytable1 = Table(range(6))\n   ```\n\n   或者：\n\n   ```python\n   mytable2 = Table((1, 2, 3, ))\n   ```\n\n   或者：\n\n   ```python\n   mytable3 = Table(['序号', '姓名', '学号', '分数', '备注'])\n   ```\n\n   ---\n\n   > **alignh**\n\n   可选**关键字**参数，该参数是当未指定水平对齐方式时默认使用的水平对齐方式，可用值为 'l'、'left'、'c'、'center'、'r'、'right'，默认值为 'l'。\n\n   ---\n\n   > **alignv**\n\n   可选**关键字**参数，该参数是当未指定垂直对齐方式时默认使用的垂直对齐方式，可用值为 't'、'top'、'm'、'middle'、'b'、'bottom'，默认值为 't'。\n\n   ---\n\n   > **rowfixed**\n\n   可选**关键字**参数，该参数是表格默认行高，可用值为 0 或小于 MAX_ROW_HEIGHT（见第21条：limit）的正整数，默认值为 0（自适应行高）。\n\n   ---\n\n   > **colfixed**\n\n   可选**关键字**参数，该参数是表格默认列宽，可用值为 0 或小于 MAX_COLUMN_WIDTH（见第21条：limit）的正整数，默认值为 0（自适应列宽）。\n\n   ---\n\n   > **fbgc**\n\n   可选**关键字**参数，该参数是默认的单元格前景色和背景色，参数值数据类型应为包含颜色代码(字符串)的列表(list)、元组(tuple)、集合(set)，默认值为空。可用颜色代码见下表：\n\n   | 序号  | 颜色代码(字符串) | 代表颜色               |\n   | :---: | ---------------: | :--------------------- |\n   |   1   |         fg_reset | 重置前景色和背景色     |\n   |   2   |           fg_red | 前景红色               |\n   |   3   |         fg_green | 前景绿色               |\n   |   4   |        fg_yellow | 前景黄色               |\n   |   5   |          fg_blue | 前景蓝色               |\n   |   6   |       fg_magenta | 前景品红色（紫色）     |\n   |   7   |          fg_cyan | 前景青色               |\n   |   8   |         fg_white | 前景白色               |\n   |   9   |   fg_brightblack | 前景亮黑色（灰色）     |\n   |  10   |     fg_brightred | 前景亮红色             |\n   |  11   |   fg_brightgreen | 前景亮绿色             |\n   |  12   |  fg_brightyellow | 前景亮黄色             |\n   |  13   |    fg_brightblue | 前景亮蓝色             |\n   |  14   | fg_brightmagenta | 前景亮品红色（亮紫色） |\n   |  15   |    fg_brightcyan | 前景亮青色             |\n   |  16   |   fg_brightwhite | 前景亮白色             |\n   |  17   |         bg_reset | 重置前景色和背景色     |\n   |  18   |           bg_red | 背景红色               |\n   |  19   |         bg_green | 背景绿色               |\n   |  20   |        bg_yellow | 背景黄色               |\n   |  21   |          bg_blue | 背景蓝色               |\n   |  22   |       bg_magenta | 背景品红色（紫色）     |\n   |  23   |          bg_cyan | 背景青色               |\n   |  24   |         bg_white | 背景白色               |\n   |  25   |   bg_brightblack | 背景亮黑色（灰色）     |\n   |  26   |     bg_brightred | 背景亮红色             |\n   |  27   |   bg_brightgreen | 背景亮绿色             |\n   |  28   |  bg_brightyellow | 背景亮黄色             |\n   |  29   |    bg_brightblue | 背景亮蓝色             |\n   |  30   | bg_brightmagenta | 背景亮品红色（亮紫色） |\n   |  31   |    bg_brightcyan | 背景亮青色             |\n   |  32   |   bg_brightwhite | 背景亮白色             |\n\n   ---\n\n   > **fill**\n\n   可选**关键字**参数，该参数是进行 addRow 或 addColumn 操作时，如果要添加的行或列长度不足，则用 fill 补足。参数值数据类型不限，默认值为空字符串 ''。\n\n   > **style**\n\n   可选**关键字**参数，该参数是默认的表格边框风格类型，参数值数据类型应为 Style 的类实例，可用值见以下 \"Style 类\"。\n\n\n\n\n\n2. #### 添加列方法 - addColumn\n\n   ---\n\n   > 方法原型\n\n   ```python\n   addColumn(colindex, column=None)\n   ```\n\n   - colindex 为索引参数，表示要插入列的位置。\n   - column 为要插入的列，参数值数据类型应为可迭代对象，子数据则不限类型。column 长度不足则用以上的类初始参数 fill  补足，过长则截断。\n   - 可以不带 colindex 参数，默认添加列为末尾列。\n\n\n\n   > 返回值\n\n   - None\n\n\n\n\n   > 异常\n\n   - colindex 不是整数则触发 TypeError 异常。\n   - column 不是可迭代对象则触发 TypeError 异常。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '分数', '备注'])\n   mytable.addColumn(3, ['科目', '此行会被截断'])\n   ```\n\n   或者：\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '分数', '备注'])\n   mytable.addColumn(['分数等级', '此行会被截断'])\n   ```\n\n\n\n\n\n3. #### 添加行方法 - addRow\n\n   ---\n\n   > 方法原型\n\n   ```python\n   addRow(rowindex, row=None)\n   ```\n\n   - colindex 为索引参数，表示要插入行的位置。\n\n   - row 为要插入的行，数据类型应为可迭代对象，子数据则不限类型。row 长度不足则用以上的类初始参数 fill 补足，过长则截断。\n\n   - 可以不带 rowindex 参数，默认添加列为末尾列。\n\n\n\n   > 返回值\n\n   - None\n\n\n\n   > 异常\n\n   - rowindex 不是整数则触发 TypeError 异常。\n\n   - row 不是可迭代对象则触发 TypeError 异常。\n\n\n\n   > 示例：\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n   mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n   ```\n\n\n\n\n\n4. #### 获取列方法 - getColumn\n\n   ---\n\n   > 方法原型\n\n   ```python\n   getColumn(colindex=-1)\n   ```\n\n   - colindex 为索引参数，表示要获取的列的位置。\n   - 可以不带 colindex 参数，默认获取最后一列。\n\n\n\n   > 返回值\n\n   - 包含列数据的列表。\n\n\n\n   > 异常\n\n   - colindex 不是整数则触发 TypeError 异常；\n   - colindex 超出范围则触发 IndexError异常。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n   mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n   col = mytable.getColumn(3)\n   print(col)\n   # ['科目', '打瞌睡']\n   ```\n\n\n\n\n\n5. #### 获取行方法 - getRow\n\n   ---\n\n   > 方法原型\n\n   ```python\n   getRow(rowindex=-1)\n   ```\n\n   - rowindex 为索引参数，表示要获取的行的位置。\n   - 可以不带 rowindex 参数，默认获取最后一行。\n\n\n\n   > 返回值\n\n   - 包含行数据的列表。\n\n\n\n   > 异常\n\n   - rowindex 不是整数则触发 TypeError 异常。\n   - rowindex 超出范围则触发 IndexError异常。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n   mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n   row = mytable.getRow(0)\n   print(row)\n   # ['序号', '姓名', '学号', '科目', '分数', '备注']\n   ```\n\n\n\n\n\n6. #### 获取单元格数据方法 - getItem\n\n   ---\n\n   > 方法原型\n\n   ```python\n   getItem(rowindex=-1, colindex=-1)\n   ````\n\n   - rowindex 为索引参数，表示行索引。\n   - colindex 为索引参数，表示列索引。\n   - 可以不带 rowindex 、colindex 参数之一或全部，不带的参数默认为 -1（最后一行或列）。\n   - 如果不带 rowindex，则 colindex 需要以关键字参数方式指定。\n\n\n\n   > 返回值\n\n   - 单元格里的数据。\n\n\n\n   > 异常\n\n   - rowindex 、colindex 不是整数则触发 TypeError 异常。\n   - rowindex 、colindex 超出范围则触发 IndexError异常。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n   mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n   item = mytable.getItem(1, 4)\n   print(item)\n   # 100\n   ```\n\n\n\n\n\n7. #### 获取单元格字符串方法 - getString\n\n   ---\n\n   - 与 getItem 大致相同，返回值为单元格里的数据的字符串形式。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n   mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n   string = mytable.getString(1, 4)\n   print(string)\n   # '100'\n   ```\n\n\n\n\n\n8. #### 覆写单元格数据方法 - writeCell\n\n   ---\n\n   > 方法原型\n\n   ```python\n   writeCell(rowindex=None, colindex=None, *, value)\n   ```\n\n   - rowindex 为索引参数，表示行索引。\n   - colindex 为索引参数，表示列索引。\n   - 索引参数可以为 None 或整数。\n   - value 为**必选**参数，为要写入的值，不限数据类型，必须以关键字参数方式调用。\n   - 可以不带 rowindex 、colindex 参数之一或全部，不带的参数默认为 None。\n   - rowindex  和 colindex 参数可用值为 None 或整数，当 rowindex  为 None，colindex 不为 None 时，以 value 覆写 colindex 所代表的整列数据，反之亦然。两个参数都为 None 时，以 value 覆写表格全部数据。\n   - 当不带 rowindex 参数时，colindex 应以关键字参数方式调用，反之则不用。\n\n\n\n   > 返回值\n\n   - None\n\n\n\n   > 异常\n\n   - rowindex 、colindex 不是整数则触发 TypeError 异常。\n   - rowindex 、colindex 超出范围则触发 IndexError异常。\n\n\n\n   > 示例\n\n   ```python\n   mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n    mytable.writeCell(colindex=4, value=8) # 以 8 覆写第 5 列所有数据\n    mytable.writeCell(1, value=8) # 以 8 覆写第 2 行所有数据\n    mytable.writeCell(value=8) # 以 8 覆写整个表格所有数据\n    mytable.writeCell(1, 2, value=8) # 以 8 覆写第2行第3列单元格的数据\n   ```\n\n\n\n\n\n9. #### 清空单元格方法 - clearCell\n\n   ---\n\n   > 方法原型\n\n   ```python\n   clearCell(rowindex=None, colindex=None)\n   ```\n\n   - 调用方法大致与 writeCell 方法相同，只是没有 value 参数。\n\n\n\n\n\n10. #### 测试表格内容是否为空方法 -  isEmpty\n\n    ---\n\n    > 方法原型\n\n    ```python\n    isEmpty(rowindex=None, colindex=None)\n    ```\n\n    - 索引参数使用方法与 writeCell 方法相同。\n\n\n\n\n\n\n11. #### 测试表格内容是否全部非空方法 - isFull\n\n    ---\n\n    > 方法原型\n\n    ```python\n    isFull(rowindex=None, colindex=None)\n    ```\n\n    - 索引参数使用方法与 writeCell 方法相同。\n\n\n\n\n\n12. #### 删除列方法 - delColumn\n\n    ---\n\n    > 方法原型\n\n    ```python\n    delColumn(colindex)\n    ```\n\n    - 参数 colindex 为要删除的列索引。\n\n\n\n    > 返回值\n\n    - 包含删除的列元素的列表。\n\n\n\n    > 异常\n\n    - colindex 不是整数时触发 TypeError 异常。\n    - colindex 超出范围时触发 IndexError 异常。\n\n\n\n    > 示例\n\n    ```python\n    mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n    column = mytable.delColumn(5) # 删除第5列\n    print(column)\n    # ['备注', '']\n    ```\n\n\n\n\n\n13. #### 删除行方法 - delRow\n\n    ---\n\n    > 方法原型\n\n    ```python\n    delRow(rowindex)\n    ```\n\n    - 参数 rowindex 为要删除的行的索引值。\n\n\n\n    > 返回值\n\n    - 包含已删除的行的元素的列表。\n\n\n\n    > 异常\n\n    - rowindex 不是整数时触发 TypeError 异常。\n    - rowindex 超出范围时触发 IndexError 异常。\n\n\n\n    > 示例\n\n    ```python\n    mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n    row = mytable.delRow(0) # 删除第一行\n    print(row)\n    # ['序号', '姓名', '学号', '科目', '分数', '备注']\n    ```\n\n\n\n\n\n14. #### 设置列宽方法 - setColumnWidth\n\n    ---\n\n    > 方法原型\n\n    ```python\n    setColumnWidth(colindex, width)\n    ```\n\n    - 参数 colindex 为要设置列宽的列索引；width 为要设置的宽度，可用值为 None、0 或小于 MAX_COLUMN_WIDTH（见第21条：limit）的正整数，0 代表自适应列宽。\n    - 当 colindex 为 None 时，意为将所有列的列宽设置为 width。\n    - 当只填一个参数时，该参数默认为 width，意为将所有列的列宽设置为 width。\n\n\n\n    > 返回值\n\n    - None\n\n\n\n    > 异常\n\n    - 当 colindex 不为整数时触发 TypeError 异常。\n    - colindex 超出范围时触发 IndexError 异常。\n    - width 大于 MAX_COLUMN_WIDTH 时触发 ValueError 异常。\n\n\n\n    > 示例\n\n    ```python\n    mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.setColumnWidth(0, 0) # 将第一列的列宽设置为自适应宽度\n    mytable.setColumnWidth(10) # 将所有列的列宽设置为 10\n    ```\n\n\n\n\n\n15. #### 设置行高方法 - setRowHeight\n\n    ---\n\n    > 方法原型\n\n    ```python\n    setRowHeight(rowindex, height)\n    ```\n\n    - 参数 rowindex 为要设置行高的行索引；height 为要设置的行高，可用值为 None、0 或小于 MAX_ROW_HEIGHT（见第21条：limit）的正整数，0 代表自适应行高。\n    - 当 rowindex 为 None 时，意为将所有行的行高设置为 height。\n    - 参数使用方法与 setColumnWidth 方法相同，只是索引参数变为行索引值。\n\n\n\n\n\n16. #### 设置单元格对齐方式方法 -  setAlignment\n\n    ---\n\n    > 方法原型\n\n    ```python\n    setAlignment(rowindex=None, colindex=None, *, alignh=None, alignv=None)\n    ```\n\n    - 参数 rowindex 为行索引，可用值为 None 或整数；colindex 为列索引，可用值为 None 或整数。\n    - 参数 alignh 为水平对齐方式，alignv 为垂直对齐方式，它们的可用值见前面的“类初始参数”。\n    - 对于行索引 rowindex 和列索引 colindex，都不为 None 则表示设置对应单元格对齐方式；其中一个为 None 则表示设置整行或整列的对齐方式；都为 None 则设置整个表格所有的单元格对齐方式。\n    - 对于 水平对齐方式 alignh 和 垂直对齐方式 alignv，可以只调用其中一个，调用哪个就设置什么对齐方式，但都必须以关键字参数方式调用。\n\n\n\n    > 返回值\n\n    - None\n\n\n\n    > 异常\n\n    - rowindex 和 colindex 不为整数时触发 TypeError 异常，超出范围则触发 IndexError 异常。\n    - alignh 和 alignv 不是有效选项时触发 ValueError 异常。\n\n\n\n    > 示例\n\n    ```python\n    mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n\n    mytable.setAlignment(0, 1, alignh='c')\n    # 设置第一行第二列所指单元格的水平对齐方式为居中对齐。\n\n    mytable.setAlignmemt(alignv='m')\n    mytable.setAlignment(None, None, alignv='m')\n    #以上两种方法都是设置所有单元格的垂直对齐方式为居中对齐，但明显前面一种方法更方便，后面一种方法是没有必要的，因为行列索引参数的默认值就是 None，没必要再填一次。\n\n    mytable.setAlignment(1, alignh='c', alignv='b')\n    # 设置第一行所有单元格的水平对齐方式为居中，垂直对齐方式为底端对齐。此方法忽略的索引参数其实是 colindex，而不是 rowindex。\n\n    mytable.setAlignment(colindex=2, alignh='r', alignv='m')\n    mytable.setAlignment(None, 2, alignh='r', alignv='m')\n    # 以上两种方法都是将第三列所有单元格的水平、垂直对齐方式分别设置为 右对齐、居中对齐。要省略 rowindex，则 colindex 就需以关键字参数方式调用，否则就不能省略 rowindex 的值 None。\n    ```\n\n\n\n\n\n17. #### 设置单元格前景色和背景色方法 - setColor\n\n    ---\n\n    > 方法原型\n\n    ```python\n    setColor(rowindex=None, colindex=None, *, clrs=None)\n    ```\n\n    - 索引 rowindex、colindex 使用方法与 setAlignment 方法相同。\n    - 颜色参数 clrs 数据类型应为集合、元组或列表，集合里包含颜色码。可用颜色码见“类初始参数”中的表格。\n\n\n\n    > 示例\n\n    ```python\n    mytable = Table(['序号', '姓名', '学号', '科目', '分数', '备注'])\n    mytable.addRow(1, (1, '小明', '123', '打瞌睡', 100))\n\n    mytable.setColor(clrs={'fg_yellow', 'bg_red'})\n    # 设置所有单元格的颜色为 {'fg_yellow', 'bg_red'}，即前景色：黄，背景色：红。\n\n    mytable.setColor(None, 0, clrs={'fg_red'})\n    # 设置第一列所有单元格的前景色为红色（注：此时单元格的原有颜色会被清空，如果想要单元格的颜色不被清空，请用 getColor 方法获取单元格的颜色集合，再用集合的方法对获取到的颜色集合进行更改）\n    ```\n\n\n\n\n\n18. #### 设置表格边框风格方法 - setStyle\n\n    ---\n\n    > 方法原型\n\n    ```python\n    setStyle(style)\n    ```\n\n    - 参数 style 的值应为 Style 类的实例，详细用法见末尾的“Style类”。\n\n\n\n\n\n19. #### 设置填充对象方法 - defaultFill\n\n    ---\n\n    > 方法原型\n\n    ```python\n    defaultFill(fill='')\n    ```\n\n    - 用于设置默认的填充对象，即添加行或列时，要添加的行或列的长度比原表格行或列的长度短时，使用 fill 填充至等长。\n    - 参数 fill, 数据类型不限，默认值为空字符串 ''。\n\n\n\n\n\n20. #### 输出表格方法 - show\n\n    ---\n\n    > 方法原型\n\n    ```python\n    show(start=0, stop=None, *, color=True, header=True, footer=False, file=sys.stdout)\n    ```\n\n    - start 和 stop 为要输出的表格的起始行和结束行（不包括标题行），数据类型应为整数。\n    - color 为是否要按设置的颜色将表格打印到终端上，值为 False 将按默认颜色打印（设置的颜色不会被清除，下次 color 为 True 时仍然可以按已经设置的颜色打印），数据类型应为布尔值。\n    - header 为是否显示标题行，数据类型应为布尔值。\n    - footer 为是否显示脚注，数据类型应为布尔值。\n    - file 为输出目标，可以是 Python 文件对象（Python file object），默认为标准输出流 sys.stdout。\n    - 以上参数可以自由选择调用，也可以全部使用默认；后 4 个参数只能以关键字参数方式调用。\n\n\n\n\n\n21. #### 最大行高列宽列数限制方法 - limit\n\n    ---\n\n    > 方法原型\n\n    ```python\n    limit(item, value)\n    ```\n\n    - 参数 item 只接受以下字符串：\n\n        `MAX_ROW_HEIGHT`\n\n        `MAX_COLUMN_NUM`\n\n        `MAX_COLUMN_WIDTH`\n\n    - 参数 value 只接受大于 1 小于 300 的整数。\n    - 当 item 值为 MAX_ROW_HEIGHT 时，设置行高最大限制为 value。\n    - 当 item 值为 MAX_COLUMN_NUM 时，设置列数最大限制为 value。\n    - 当 item 值为 MAX_COLUMN_WIDTH 时，设置列宽最大限制为 value。\n\n\n\n\n\n22. #### 设置默认颜色方法 - defaultClr\n\n    ------\n\n    > 方法原型\n\n    ```python\n    defaultClr(*value)\n    ```\n\n    - 参数 value 值类型应为字符串（颜色代码），参数个数不限。\n    - value 可用的颜色代码见 Table 类初始化参数 fbgc 的可用颜色码表格。\n\n\n\n    > 异常\n\n    - 当 value 值不是字符串时触发 TypeError 异常。\n    - 当 value 值是不可用的颜色代码时触发 ValueError 异常。\n\n\n\n\n\n23. #### 设置默认对齐方式方法 - defaultAlign\n\n    ------\n\n    > 方法原型\n\n    ```python\n    defaultAlign(*, alignh=None, alignv=None)\n    ```\n\n    - 参数 alignh 为默认使用的水平对齐方式。\n    - 参数 alignv 为默认使用的垂直对齐方式。\n    - 两个参数都需要以关键字参数方式调用，不需要设置的对齐方式可以不写。\n\n\n\n    > 异常\n\n    - 当 alignh 为无效的值时触发 ValueError 异常。\n    - 当 alignv 为无效的值时触发 ValueError 异常。\n\n\n\n\n\n24. #### 重构 、刷新表格字符串形式方法 - refactorText\n\n    ------\n\n    > 方法原型\n\n    ```python\n    refactorText(footer=False)\n    ```\n\n    - footer 参数应为布尔型 bool（True、False），表示是否生成带脚注的表格字符串形式。\n    - 用于主动重构、刷新表格的字符串形式，一般情况下都会自动调用（比如调用 show、getText 方法时）。\n    - 如果你想获取 Table 类实例的“行”的字符串形式列表 rowTexts，则访问该属性前你应该先调用 refactorText 方法。\n\n\n\n\n\n25. #### 获取整个表格的字符串形式方法 - getText\n\n    ------\n\n    > 方法原型\n\n    ```python\n    getText(start=0, stop=None, header=True, footer=False, color=False)\n    ```\n\n    - 用于获取整个表格的字符串形式（即获取一个字符串，在终端上打印该字符串就是一个表格）。\n    - 参数 start、stop、header、footer、color 与 show 方法同名参数用法一致。\n\n\n\n\n\n26. #### 设置脚注方法 - setFoot\n\n    ------\n\n    > 方法原型\n\n    ```python\n    setFoot(footnotes)\n    ```\n\n    - 参数 footnotes 应为包含字符串的列表 list 或元组 tuple。\n    - footnotes 中每一个元素（字符串）在表格脚注中都是一行（字符串超过表格宽度会自动换行），但也可以在字符串中增加换行符进行主动换行。\n\n\n\n    > 异常\n\n    - 当 footnotes 不是列表 list 或元组 tuple 中的一种时，触发 ValueError 异常。\n    - 当 footnotes 中元素有非字符串 str 时，触发 ValueError 异常。\n\n\n\n\n\n\n27. #### 获取脚注方法 - getFoot\n\n    ------\n\n    > 方法原型\n\n    ```python\n    getFoot()\n    ```\n\n    - 该方法返回当前 Table 类实例的脚注列表（包含字符串 str 的列表 list）。\n    - 外部可以用列表方法对该返回值进行操作，操作将直接对 Table 类实例的当前脚注列表生效。\n\n\n\n\n\n\n\n\n- ### Style类\n\n\n1. #### 类实例属性\n\n    ------\n\n    > 等号左边为属性，等号右边为默认值。\n\n    - `cell_pad = ' '` 单元格内容左右两边的填充字符\n    - `top_left = '┌'` 表格边框左上角字符\n    - `top_cross = '┬'`  边框顶部三交叉点字符\n    - `top_right = '┐'` 边框右上角字符\n    - `top_horz = '─'` 顶部边框水平线字符\n    - `bottom_left = '└'` 边框左下角字符\n    - `bottom_cross = '┴'` 边框底部三交叉点字符\n    - `bottom_right = '┘'` 边框右下角字符\n    - `bottom_horz = '─'` 底部边框水平线字符\n    - `left_cross = '├'` 左边框三交叉点字符\n    - `left_vert = '│'` 左边框垂直线字符\n    - `right_cross = '┤'` 右边框三交叉点字符\n    - `right_vert = '│'` 右边框垂直线字符\n    - `center_horz = '─'` 中间水平线字符\n    - `center_vert = '│'` 中间垂直线字符\n    - `center_cross = '┼'` 中间十字交叉点字符\n    - `split_left = '╞'` 标题行与主体分隔线左边框三交叉点字符\n    - `split_right = '╡'` 标题行与主体分隔线右边框三交叉点字符\n    - `split_horz = '═'` 标题行与主体分隔线水平线字符\n    - `split_cross = '╪'` 标题行与主体分隔线十字交叉点字符\n\n\n\n\n\n2. #### 类初始化参数\n\n    ------\n\n   > style\n\n    例：\n\n    ```python\n    mystyle = Style(style)\n    ```\n\n   - 参数 style 可用值为以下字符串：\n\n      `table`\n      `simple`\n      `classic`\n      `table-ascii`\n      `simple-ascii`\n      `classic-ascii`\n\n   - 通过选择不同的初始化参数，自动给类实例属性赋予不同的预设值，以此来达到不同的表格边框风格的目的。\n\n\n\n\n\n\n3. #### 重置边框风格方法 - reset\n\n    ------\n\n    > 方法原型\n\n     `reset()`\n\n    - 将 Style 实例属性重置至默认属性。\n\n\n\n    > 示例\n\n    ```python\n    mystyle = Style('simple')\n    mystyle.reset()\n    # 重置至默认的 table 风格。\n    ```\n\n\n\n\n\n\n\n4. #### 选择预置表格边框风格方法 - choose\n\n    ------\n\n    > 方法原型\n\n    `choose(style)`\n\n    - 选择预置的边框风格，参数 style 可用值与 Style 类初始化参数可用值一致。\n\n\n\n    > 异常\n\n    - 当 style 值不是有效值时触发 ValueError 异常。\n\n\n\n    > 示例：\n\n    ```python\n    mystyle = Style('table')\n    mystyle.choose('classic')\n    # 将 mystyle 实例的边框风格属于改变为预置的 classic 风格。\n    ```\n\n\n\n\n\n5. #### 其他\n\n    ------\n\n    - 除了使用 choose 方法或选择不同的初始化参数来选择预置的表格边框风格外，还可以直接对类实例属性进行更改，以期达到更精确的定制化需求。\n    - 直接修改类实例属性时值得注意的事项：a) 类实例属性值仅接受字符串类型数据；b) 类实例属性值并不限制字符数量，不限制字符宽度（例如字母和汉字的字符宽度就不一样），所以设置类实例属性时就需要用户自行注意不同属性需要同样的总字符宽度以实现表格边框的对齐，否则就会出现表格边框错位的情况。例如：当`center_cross`被设置为两个字母`oo`时，作为同一垂直方向线上的其他属性`top_cross`、`center_vert`、`bottom_cross`也都应该设置属性值为两个字母宽度的字符串；或某些属性设置为空字符串时，其他一些属性也要设置为空字符串，其他属性同理。\n    - 后续可能会增加对属性值的自动限制。\n    - 见目录下的 demo.py 文件。\n\n\n\n\n\n\n\n- ### 最后\n    ```\n    # 表格中中文与英文混合使用时是否对齐与字体、运行的控制台类型有关\n    # windows 平台上，程序输出于 cmd、PowerShell 时表格里无论中英文对齐都非常好\n    # 以上终端（不限）建议把自动折行关掉，否则表格超过终端屏幕宽度时自动折行会使表格变成一团糟\n    # IDLE、PyCharm 等 IDE 的自带终端中，中文基本上无法对齐\n    # 这是第一个可用版本，BUG 比较多，功能也相对简单，后续会添加新功能\n    # 文档写的也比较匆忙，可能错漏比较多，后续会不断修正\n    # 因为源码经过好几次重构，所以函数文档基本都丢了还没有来得及重新写（已经写了的函数文档可能也有跟源码不对应的情况），后续提交会不断补上。\n    ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/hrpzcf/colorfultable",
    "keywords": "table,console,terminal,colorful,text",
    "license": "MIT License",
    "maintainer": "hrpzcf",
    "maintainer_email": "hrpzcf@foxmail.com",
    "name": "colorfultable",
    "package_url": "https://pypi.org/project/colorfultable/",
    "platform": "any",
    "project_url": "https://pypi.org/project/colorfultable/",
    "project_urls": {
      "Homepage": "https://gitee.com/hrpzcf/colorfultable"
    },
    "release_url": "https://pypi.org/project/colorfultable/201003.0.52/",
    "requires_dist": [
      "colorama (>=0.4.3)"
    ],
    "requires_python": ">=3.5",
    "summary": "A module to help print beautiful table on the terminal.",
    "version": "201003.0.52",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8342142,
  "releases": {
    "200909.0.42": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60b7da96762e26d30fad632e7c01ba6cbd934214a29832ea2edb9b492e8c54bc",
          "md5": "8d721b1186fd813f113d2a8f2edcfe0a",
          "sha256": "1b4a680811256efd39bde112398f6a01e42b08a6ef1e481dd60a1764a2b39766"
        },
        "downloads": -1,
        "filename": "colorfultable-200909.0.42-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d721b1186fd813f113d2a8f2edcfe0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24488,
        "upload_time": "2020-09-09T15:15:46",
        "upload_time_iso_8601": "2020-09-09T15:15:46.554785Z",
        "url": "https://files.pythonhosted.org/packages/60/b7/da96762e26d30fad632e7c01ba6cbd934214a29832ea2edb9b492e8c54bc/colorfultable-200909.0.42-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15601bdc4d78c7921148112a6311b373d513e76cc4fc2d389249b85a820d364c",
          "md5": "779f509123cb62996c65b65104ab3e87",
          "sha256": "1296e1aac7815595900523d1ebc04bd0a781c88e32d595940ca0dfdd1e0ea00c"
        },
        "downloads": -1,
        "filename": "colorfultable-200909.0.42.tar.gz",
        "has_sig": false,
        "md5_digest": "779f509123cb62996c65b65104ab3e87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 32214,
        "upload_time": "2020-09-09T15:15:49",
        "upload_time_iso_8601": "2020-09-09T15:15:49.521330Z",
        "url": "https://files.pythonhosted.org/packages/15/60/1bdc4d78c7921148112a6311b373d513e76cc4fc2d389249b85a820d364c/colorfultable-200909.0.42.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "200911.0.43": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "436a88e6c2b073dd5246600aa56bcf5808cbdca859e7b25944e2fef81ab25618",
          "md5": "ebabc4264e02c41649580664247039ad",
          "sha256": "b404eec473f182632951acdf7ef2af9dfab8a84084bcd94cfe92606e0d3c05ab"
        },
        "downloads": -1,
        "filename": "colorfultable-200911.0.43-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebabc4264e02c41649580664247039ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26228,
        "upload_time": "2020-09-11T15:10:32",
        "upload_time_iso_8601": "2020-09-11T15:10:32.911258Z",
        "url": "https://files.pythonhosted.org/packages/43/6a/88e6c2b073dd5246600aa56bcf5808cbdca859e7b25944e2fef81ab25618/colorfultable-200911.0.43-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adbce62e6e03d43820164dda4b98a48c283fa05422dc0818e7f8bd9d9541d294",
          "md5": "481b40801d435c3eb10578ad7db542ea",
          "sha256": "844c5910f209cd4645848a2ad0243bbc788abbc80a968b50d0b5e00c73c947f3"
        },
        "downloads": -1,
        "filename": "colorfultable-200911.0.43.tar.gz",
        "has_sig": false,
        "md5_digest": "481b40801d435c3eb10578ad7db542ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 33636,
        "upload_time": "2020-09-11T15:10:35",
        "upload_time_iso_8601": "2020-09-11T15:10:35.266858Z",
        "url": "https://files.pythonhosted.org/packages/ad/bc/e62e6e03d43820164dda4b98a48c283fa05422dc0818e7f8bd9d9541d294/colorfultable-200911.0.43.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "200916.0.46": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dc2b3c87480877a28231b54587c69312e9784d0acce7c8a7091dbe51df7fc3e",
          "md5": "3bc09f6334da73de9efadbc301037640",
          "sha256": "1a6392538fd9a41bf60684ebd1fc9e41e88ffe8d4f4bbe537ccd72132af7f125"
        },
        "downloads": -1,
        "filename": "colorfultable-200916.0.46-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bc09f6334da73de9efadbc301037640",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 27848,
        "upload_time": "2020-09-16T15:41:21",
        "upload_time_iso_8601": "2020-09-16T15:41:21.755660Z",
        "url": "https://files.pythonhosted.org/packages/3d/c2/b3c87480877a28231b54587c69312e9784d0acce7c8a7091dbe51df7fc3e/colorfultable-200916.0.46-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b1305f88e34f74445eb9a41bbe8443e99188f629e6170b096395e0ffc767f38",
          "md5": "c6ba6fb93c4dd84560f756c838675365",
          "sha256": "e835666fc8c4577b8aab0fc6426a24b3a23462eb403e230da5a6aff8daea2fdd"
        },
        "downloads": -1,
        "filename": "colorfultable-200916.0.46.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ba6fb93c4dd84560f756c838675365",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 35047,
        "upload_time": "2020-09-16T15:41:23",
        "upload_time_iso_8601": "2020-09-16T15:41:23.234780Z",
        "url": "https://files.pythonhosted.org/packages/4b/13/05f88e34f74445eb9a41bbe8443e99188f629e6170b096395e0ffc767f38/colorfultable-200916.0.46.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "200930.0.47": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a10f545c40776e8f09df3ac802b18caaca1dd588bff3760839f05caea4158eb2",
          "md5": "b5d3e1b3426bb3e365d97f5b73241ad3",
          "sha256": "1c26a05b7f18dd4a927127963eee259aa9b147f1fc61e7198680768a8438df06"
        },
        "downloads": -1,
        "filename": "colorfultable-200930.0.47-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5d3e1b3426bb3e365d97f5b73241ad3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 33229,
        "upload_time": "2020-09-30T04:04:38",
        "upload_time_iso_8601": "2020-09-30T04:04:38.748454Z",
        "url": "https://files.pythonhosted.org/packages/a1/0f/545c40776e8f09df3ac802b18caaca1dd588bff3760839f05caea4158eb2/colorfultable-200930.0.47-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47897cb7a844a94d4e5cf534bf107a69609a2a24f3a92261a50e5a76aec11cc8",
          "md5": "0c7bfad0e64fab8407d1a5ba2d920c00",
          "sha256": "fee50052588c064d75f25808bb730b0f262f2b88a6207f7cd916be3b23c63712"
        },
        "downloads": -1,
        "filename": "colorfultable-200930.0.47.tar.gz",
        "has_sig": false,
        "md5_digest": "0c7bfad0e64fab8407d1a5ba2d920c00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 40082,
        "upload_time": "2020-09-30T04:04:40",
        "upload_time_iso_8601": "2020-09-30T04:04:40.643290Z",
        "url": "https://files.pythonhosted.org/packages/47/89/7cb7a844a94d4e5cf534bf107a69609a2a24f3a92261a50e5a76aec11cc8/colorfultable-200930.0.47.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "201003.0.52": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d8e423111b3fc60b387c7fa3b4813ec877dcbcfe7216647063d82a07f90526f",
          "md5": "ea27467f783e3090549721a6f8dd5fb6",
          "sha256": "3472abaa23df538de78f6d7e9d1bcaca7624836551197750e76b951be80ca209"
        },
        "downloads": -1,
        "filename": "colorfultable-201003.0.52-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea27467f783e3090549721a6f8dd5fb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 34991,
        "upload_time": "2020-10-03T10:47:02",
        "upload_time_iso_8601": "2020-10-03T10:47:02.059862Z",
        "url": "https://files.pythonhosted.org/packages/8d/8e/423111b3fc60b387c7fa3b4813ec877dcbcfe7216647063d82a07f90526f/colorfultable-201003.0.52-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa01e6aad531f911c33abac774b9b67732b52b4dcf3aac5beb5105e8defc9e4",
          "md5": "7bc8f7c086aad76bf2159b01f8de10f8",
          "sha256": "01cb6b77657f9a8b4997d9ca9843e1fc2259e9af5168d7f101dfe18c487b0c8e"
        },
        "downloads": -1,
        "filename": "colorfultable-201003.0.52.tar.gz",
        "has_sig": false,
        "md5_digest": "7bc8f7c086aad76bf2159b01f8de10f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 44027,
        "upload_time": "2020-10-03T10:47:04",
        "upload_time_iso_8601": "2020-10-03T10:47:04.630789Z",
        "url": "https://files.pythonhosted.org/packages/4f/a0/1e6aad531f911c33abac774b9b67732b52b4dcf3aac5beb5105e8defc9e4/colorfultable-201003.0.52.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d8e423111b3fc60b387c7fa3b4813ec877dcbcfe7216647063d82a07f90526f",
        "md5": "ea27467f783e3090549721a6f8dd5fb6",
        "sha256": "3472abaa23df538de78f6d7e9d1bcaca7624836551197750e76b951be80ca209"
      },
      "downloads": -1,
      "filename": "colorfultable-201003.0.52-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea27467f783e3090549721a6f8dd5fb6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 34991,
      "upload_time": "2020-10-03T10:47:02",
      "upload_time_iso_8601": "2020-10-03T10:47:02.059862Z",
      "url": "https://files.pythonhosted.org/packages/8d/8e/423111b3fc60b387c7fa3b4813ec877dcbcfe7216647063d82a07f90526f/colorfultable-201003.0.52-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fa01e6aad531f911c33abac774b9b67732b52b4dcf3aac5beb5105e8defc9e4",
        "md5": "7bc8f7c086aad76bf2159b01f8de10f8",
        "sha256": "01cb6b77657f9a8b4997d9ca9843e1fc2259e9af5168d7f101dfe18c487b0c8e"
      },
      "downloads": -1,
      "filename": "colorfultable-201003.0.52.tar.gz",
      "has_sig": false,
      "md5_digest": "7bc8f7c086aad76bf2159b01f8de10f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 44027,
      "upload_time": "2020-10-03T10:47:04",
      "upload_time_iso_8601": "2020-10-03T10:47:04.630789Z",
      "url": "https://files.pythonhosted.org/packages/4f/a0/1e6aad531f911c33abac774b9b67732b52b4dcf3aac5beb5105e8defc9e4/colorfultable-201003.0.52.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}