{
  "info": {
    "author": "",
    "author_email": "zeionara@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# OpenKE\n\nTo use as a python module:\n\n```sh\npip install openke\n```\n\nExample of cmd interface usage:\n\n```sh\npython -m openke train transe --dataset /home/zeio/recommenders/data/truncated-dataset-normalized.txt\n```\n\nAn Open-source Framework for Knowledge Embedding.\n\nMore information is available on our website \n[http://openke.thunlp.org/](http://openke.thunlp.org/)\n\nIf you use the code, please cite the following [paper](http://aclweb.org/anthology/D18-2024):\n\n```\n@inproceedings{han2018openke,\n  title={OpenKE: An Open Toolkit for Knowledge Embedding},\n  author={Han, Xu and Cao, Shulin and Lv, Xin and Lin, Yankai and Liu, Zhiyuan and Sun, Maosong and Li, Juanzi},\n  booktitle={Proceedings of EMNLP},\n  pages={139--144},\n  year={2018}\n}\n```\n\n\n## Overview\n\nThis is an Efficient implementation based on TensorFlow for knowledge representation learning (KRL). We use C++ to implement some underlying operations such as data preprocessing and negative sampling. For each specific model, it is implemented by TensorFlow with Python interfaces so that there is a convenient platform to run models on GPUs. OpenKE composes 4 repositories:\n\nOpenKE: the main project based on TensorFlow, which provides the optimized and stable framework for knowledge graph embedding models.\n\n<a href=\"https://github.com/thunlp/OpenKE/tree/OpenKE-PyTorch\"> OpenKE-PyTorch</a>: OpenKE implemented with PyTorch, also providing the optimized and stable framework for knowledge graph embedding models.\n\n<a href=\"https://github.com/thunlp/TensorFlow-TransX\"> TensorFlow-TransX</a>: light and simple version of OpenKE based on TensorFlow, including TransE, TransH, TransR and TransD. \n\n<a href=\"https://github.com/thunlp/Fast-TransX\"> Fast-TransX</a>: efficient lightweight C++ inferences for TransE and its extended models utilizing the framework of OpenKE, including TransH, TransR, TransD, TranSparse and PTransE. \n\n## Models\n\nOpenKE (Tensorflow): \n\n*\tRESCAL, HolE\n*  DistMult, ComplEx, Analogy\n*  TransE, TransH, TransR, TransD\n\nOpenKE (PyTorch): \n\n*\tRESCAL\n*  DistMult, ComplEx, Analogy\n*  TransE, TransH, TransR, TransD\n*  SimplE\n\nOpenKE (Alpha)\n\n*\tRotatE\n\nWe welcome any issues and requests for model implementation and bug fix.\n\n## Experiments\n\nWe have provided the hyper-parameters of some models to achieve the state-of-the-art performace on FB15K237 and WN18RR. These scripts can be founded in the folder \"./examples/\". Up to now, these models include TransE, TransH, TransR, TransD, DistMult, ComplEx. The results of these models are as follows,\n\n|Model\t\t\t|\tWN18RR\t|\tFB15K237\t| WN18RR (Paper\\*)| FB15K237  (Paper\\*)|\n|:-:\t\t|:-:\t|:-:  |:-:  |:-:  |\n|TransE\t|0.512\t|0.476|0.501|0.486|\n|TransH\t|0.507\t|0.490|-|-|\n|TransR\t|0.519\t|0.511|-|-|\n|TransD\t|0.508\t|0.487|-|-|\n|DistMult\t|0.479\t|0.419|0.49|0.419|\n|ComplEx\t|0.485\t|0.426|0.51|0.428|\n|ConvE\t\t|0.506\t|0.485|0.52|0.501|\n|RotatE\t|0.549\t|0.479|-|0.480|\n|RotatE (+adv)\t|0.565\t|0.522|0.571|0.533|\n\n\n<strong> We are still trying more hyper-parameters and more training strategies (e.g., adversarial training and label smoothing regularization) for these models. </strong> Hence, this table is still in change. We welcome everyone to help us update this table and hyper-parameters.\n\n\n## Installation\n\n1. Install TensorFlow\n\n2. Clone the OpenKE repository:\n\n```bash\n$ git clone https://github.com/thunlp/OpenKE\n$ cd OpenKE\n```\n\n3. Compile C++ files\n\t\n```bash\n$ bash make.sh\n```\n\n## Data\n\n* For training, datasets contain three files:\n\n  train2id.txt: training file, the first line is the number of triples for training. Then the following lines are all in the format ***(e1, e2, rel)*** which indicates there is a relation ***rel*** between ***e1*** and ***e2*** .\n  **Note that train2id.txt contains ids from entitiy2id.txt and relation2id.txt instead of the names of the entities and relations. If you use your own datasets, please check the format of your training file. Files in the wrong format may cause segmentation fault.**\n\n  entity2id.txt: all entities and corresponding ids, one per line. The first line is the number of entities.\n\n  relation2id.txt: all relations and corresponding ids, one per line. The first line is the number of relations.\n\n* For testing, datasets contain additional two files (totally five files):\n\n  test2id.txt: testing file, the first line is the number of triples for testing. Then the following lines are all in the format ***(e1, e2, rel)*** .\n\n  valid2id.txt: validating file, the first line is the number of triples for validating. Then the following lines are all in the format ***(e1, e2, rel)*** .\n\n  type_constrain.txt: type constraining file, the first line is the number of relations. Then the following lines are type constraints for each relation. For example, the relation with id 1200 has 4 types of head entities, which are 3123, 1034, 58 and 5733. The relation with id 1200 has 4 types of tail entities, which are 12123, 4388, 11087 and 11088. You can get this file through **n-n.py** in folder benchmarks/FB15K.\n\n## Quick Start\n\n### Training\n\nTo compute a knowledge graph embedding, first import datasets and set configure parameters for training, then train models and export results. For instance, we write an example_train_transe.py to train TransE:\n\n```python\nimport config\nimport models\nimport tensorflow as tf\nimport numpy as np\n\ncon = config.Config()\n#Input training files from benchmarks/FB15K/ folder.\ncon.set_in_path(\"./benchmarks/FB15K/\")\n\ncon.set_work_threads(4)\ncon.set_train_times(500)\ncon.set_nbatches(100)\ncon.set_alpha(0.001)\ncon.set_margin(1.0)\ncon.set_bern(0)\ncon.set_dimension(50)\ncon.set_ent_neg_rate(1)\ncon.set_rel_neg_rate(0)\ncon.set_opt_method(\"SGD\")\n\n#Models will be exported via tf.Saver() automatically.\ncon.set_export_files(\"./res/model.vec.tf\", 0)\n#Model parameters will be exported to json files automatically.\ncon.set_out_files(\"./res/embedding.vec.json\")\n#Initialize experimental settings.\ncon.init()\n#Set the knowledge embedding model\ncon.set_model(models.TransE)\n#Train the model.\ncon.run()\n```\n\n#### Step 1: Import datasets\n\n```python\ncon.set_in_path(\"benchmarks/FB15K/\")\n```\n\n\t\n<font color=\"red\">Note that, the following code cannot work to import datasets:</font>\n\n```python\ncon.set_in_path(\"benchmarks/FB15K\")\n```\n\t\nWe import knowledge graphs from benchmarks/FB15K/ folder. The data consists of three essential files mentioned before:\n\n*\ttrain2id.txt\n*\tentity2id.txt\n*\trelation2id.txt\n\nValidation and test files are required and used to evaluate the training results, However, they are not indispensable for training.\n\n```python\ncon.set_work_threads(8)\n```\n\nWe can allocate several threads to sample positive and negative cases.\n\n\n#### Step 2: Set configure parameters for training.\n\n```python\ncon.set_train_times(500)\ncon.set_nbatches(100)\ncon.set_alpha(0.5)\ncon.set_dimension(200)\ncon.set_margin(1)\n```\n\nWe set essential parameters, including the data traversing rounds, learning rate, batch size, and dimensions of entity and relation embeddings.\n\n```python\ncon.set_bern(0)\ncon.set_ent_neg_rate(1)\ncon.set_rel_neg_rate(0)\n```\n\nFor negative sampling, we can corrupt entities and relations to construct negative triples. set\\_bern(0) will use the traditional sampling method, and set\\_bern(1) will use the method in (Wang et al. 2014) denoted as \"bern\".\n\n```python\ncon.set_optimizer(\"SGD\")\n```\n\nWe can select a proper gradient descent optimization algorithm to train models.\n\n#### Step 3: Export results\n\n```python\ncon.set_export_files(\"./res/model.vec.tf\", 0)\n\ncon.set_out_files(\"./res/embedding.vec.json\")\n```\n\nModels will be exported via tf.Saver() automatically every few rounds. Also, model parameters will be exported to json files finally. \n\n#### Step 4: Train models\n\n```python\ncon.init()\ncon.set_model(models.TransE)\ncon.run()\n```\n  \nWe set the knowledge graph embedding model and start the training process.\n\n### Testing\n\n#### Link Prediction\n\nLink prediction aims to predict the missing h or t for a relation fact triple (h, r, t). In this task, for each position of missing entity, the system is asked to rank a set of candidate entities from the knowledge graph, instead of only giving one best result. For each test triple (h, r, t), we replace the head/tail entity by all entities in the knowledge graph, and rank these entities in descending order of similarity scores calculated by score function fr. we use two measures as our evaluation metric:\n\n* ***MR*** : mean rank of correct entities; \n* ***MRR***: the average of the reciprocal ranks of correct entities; \n* ***Hit@N*** : proportion of correct entities in top-N ranked entities.\n\n#### Triple Classification\n\nTriple classification aims to judge whether a given triple (h, r, t) is correct or not. This is a binary classification\ntask. For triple classification, we set a relationspecific threshold δr. For a triple (h, r, t), if the dissimilarity\nscore obtained by fr is below δr, the triple will be classified as positive, otherwise negative. δr is optimized by maximizing classification accuracies on the validation set.\n\n#### Predict Head Entity\n\nGiven tail entity and relation, predict the top k possible head entities. All the objects are represented by their id.\n\n```python\ndef predict_head_entity(self, t, r, k):\n\tr'''This mothod predicts the top k head entities given tail entity and relation.\n\n\tArgs: \n\t\tt (int): tail entity id\n\t\tr (int): relation id\n\t\tk (int): top k head entities\n\n\tReturns:\n\t\tlist: k possible head entity ids \t  \t\n\t'''\n\tself.init_link_prediction()\n\tif self.importName != None:\n\t\tself.restore_tensorflow()\n\ttest_h = np.array(range(self.entTotal))\n\ttest_r = np.array([r] * self.entTotal)\n\ttest_t = np.array([t] * self.entTotal)\n\tres = self.test_step(test_h, test_t, test_r).reshape(-1).argsort()[:k]\n\tprint(res)\n\treturn res\n```\n\n#### Predict Tail Entity\n\nThis is similar to predicting the head entity.\n\n#### Predict Relation\n\nGiven the head entity and tail entity, predict the top k possible relations. All the objects are represented by their id.\n\n```python\ndef predict_relation(self, h, t, k):\n\tr'''This methods predict the relation id given head entity and tail entity.\n\n\tArgs:\n\t\th (int): head entity id\n\t\tt (int): tail entity id\n\t\tk (int): top k relations\n\n\tReturns:\n\t\tlist: k possible relation ids\n\t'''\n\tself.init_link_prediction()\n\tif self.importName != None:\n\t\tself.restore_tensorflow()\n\ttest_h = np.array([h] * self.relTotal)\n\ttest_r = np.array(range(self.relTotal))\n\ttest_t = np.array([t] * self.relTotal)\n\tres = self.test_step(test_h, test_t, test_r).reshape(-1).argsort()[:k]\n\tprint(res)\n\treturn res\n```\n\n#### Predict triple\n\nGiven a triple (h, r, t), this funtion tells us whether the triple is correct or not. If the threshold is not given, this function calculates the threshold for the relation from the valid dataset.\n\n```python\ndef predict_triple(self, h, t, r, thresh = None):\n\tr'''This method tells you whether the given triple (h, t, r) is correct of wrong\n\n\tArgs:\n\t\th (int): head entity id\n\t\tt (int): tail entity id\n\t\tr (int): relation id\n\t\tthresh (fload): threshold for the triple\n\t'''\n\tself.init_triple_classification()\n\tif self.importName != None:\n\t\tself.restore_tensorflow()\n\tres = self.test_step(np.array([h]), np.array([t]), np.array([r]))\n\tif thresh != None:\n\t\tif res < thresh:\n\t\t\tprint(\"triple (%d,%d,%d) is correct\" % (h, t, r))\n\t\telse:\n\t\t\tprint(\"triple (%d,%d,%d) is wrong\" % (h, t, r))\n\t\treturn\n\tself.lib.getValidBatch(self.valid_pos_h_addr, self.valid_pos_t_addr, self.valid_pos_r_addr, self.valid_neg_h_addr, self.valid_neg_t_addr, self.valid_neg_r_addr)\n\tres_pos = self.test_step(self.valid_pos_h, self.valid_pos_t, self.valid_pos_r)\n\tres_neg = self.test_step(self.valid_neg_h, self.valid_neg_t, self.valid_neg_r)\n\tself.lib.getBestThreshold(self.relThresh_addr, res_pos.__array_interface__['data'][0], res_neg.__array_interface__['data'][0])\n\tif res < self.relThresh[r]:\n\t\tprint(\"triple (%d,%d,%d) is correct\" % (h, t, r))\n\telse: \n\t\tprint(\"triple (%d,%d,%d) is wrong\" % (h, t, r))\n```\n\t\t\t\n#### Implementation\n\nTo evaluate the model, first import datasets and set essential configure paramters, then set model parameters and test the model. For instance, we write an example_test_transe.py to test TransE.\n\nThere are four approaches to test models:\n\n(1) Test models right after training.\n\n```python\nimport config\nimport models\nimport tensorflow as tf\nimport numpy as np\n\n\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\n\n#True: Input test files from the same folder.\ncon.set_test_triple_classification(True)\ncon.set_test_link_prediction(True)\n\ncon.set_work_threads(4)\ncon.set_train_times(500)\ncon.set_nbatches(100)\ncon.set_alpha(0.001)\ncon.set_margin(1.0)\ncon.set_bern(0)\ncon.set_dimension(50)\ncon.set_ent_neg_rate(1)\ncon.set_rel_neg_rate(0)\ncon.set_opt_method(\"SGD\")\ncon.set_export_files(\"./res/model.vec.tf\", 0)\ncon.set_out_files(\"./res/embedding.vec.json\")\ncon.init()\ncon.set_model(models.TransE)\ncon.run()\n\n#To test link prediction after training needs \"set_test_link_prediction True)\".\n#To test triple classfication after training needs \"set_test_triple_classification(True)\"\ncon.test()\n```\n\n(2) Set import files and OpenKE will automatically load models via tf.Saver().\n\n```python\nimport config\nimport models\nimport tensorflow as tf\nimport numpy as np\nimport json\n\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.set_import_files(\"./res/model.vec.tf\")\ncon.init()\ncon.set_model(models.TransE)\ncon.test()\n```\n\n(3) Read model parameters from json files and manually load parameters.\n\n```python\nimport config\nimport models\nimport tensorflow as tf\nimport numpy as np\nimport json\n\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.init()\ncon.set_model(models.TransE)\nf = open(\"./res/embedding.vec.json\", \"r\")\ncontent = json.loads(f.read())\nf.close()\ncon.set_parameters(content)\ncon.test()\n```\n\n(4) Manually load models via tf.Saver().\n\n```python\nimport config\nimport models\nimport tensorflow as tf\nimport numpy as np\nimport json\n\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.init()\ncon.set_model(models.TransE)\ncon.import_variables(\"./res/model.vec.tf\")\ncon.test()\n```\n\nNote that you can only load model parameters when model configuration finished.\n\n### Getting the embedding matrix\n\nThere are four approaches to get the embedding matrix.\n\n(1) Set import files and OpenKE will automatically load models via tf.Saver().\n\n```python\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.set_import_files(\"./res/model.vec.tf\")\ncon.init()\ncon.set_model(models.TransE)\n# Get the embeddings (numpy.array)\nembeddings = con.get_parameters(\"numpy\")\n# Get the embeddings (python list)\nembeddings = con.get_parameters()\n```\n\n(2) Read model parameters from json files and manually load parameters.\n\n```python\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.init()\ncon.set_model(models.TransE)\nf = open(\"./res/embedding.vec.json\", \"r\")\nembeddings = json.loads(f.read())\nf.close()\n```\n\n(3) Manually load models via tf.Saver().\n\n```python\ncon = config.Config()\ncon.set_in_path(\"./benchmarks/FB15K/\")\ncon.set_test_link_prediction(True)\ncon.set_test_triple_classification(True)\ncon.set_work_threads(4)\ncon.set_dimension(50)\ncon.init()\ncon.set_model(models.TransE)\ncon.import_variables(\"./res/model.vec.tf\")\n# Get the embeddings (numpy.array)\nembeddings = con.get_parameters(\"numpy\")\n# Get the embeddings (python list)\nembeddings = con.get_parameters()\n```\n\n(4) Immediately get the embeddings after training the model.\n\n```python\n...\n...\n...\n#Models will be exported via tf.Saver() automatically.\ncon.set_export_files(\"./res/model.vec.tf\", 0)\n#Model parameters will be exported to json files automatically.\ncon.set_out_files(\"./res/embedding.vec.json\")\n#Initialize experimental settings.\ncon.init()\n#Set the knowledge embedding model\ncon.set_model(models.TransE)\n#Train the model.\ncon.run()\n#Get the embeddings (numpy.array)\nembeddings = con.get_parameters(\"numpy\")\n#Get the embeddings (python list)\nembeddings = con.get_parameters()\n```\n\n## Interfaces\n\n### Config\n\n```python\nclass Config(object):\n\n\t#To set the learning rate\n\tdef set_alpha(alpha = 0.001)\n\n\t#To set the degree of the regularization on the parameters\n\tdef set_lmbda(lmbda = 0.0)\n\n\t#To set the gradient descent optimization algorithm (SGD, Adagrad, Adadelta, Adam)\n\tdef set_optimizer(optimizer = \"SGD\")\n\n\t#To set the data traversing rounds\n\tdef set_train_times(self, times)\n\n\t#To split the training triples into several batches, nbatches is the number of batches\n\tdef set_nbatches(nbatches = 100)\n\n\t#To set the margin for the loss function\n\tdef set_margin(margin = 1.0)\n\n\t#To set the dimensions of the entities and relations at the same time\n\tdef set_dimension(dim)\n\n\t#To set the dimensions of the entities\n\tdef set_ent_dimension(self, dim)\n\n\t#To set the dimensions of the relations\n\tdef set_rel_dimension(self, dim)\n\n\t#To allocate threads for each batch sampling\n\tdef set_work_threads(threads = 1)\n\n\t#To set negative sampling algorithms, unif (bern = 0) or bern (bern = 1)\n\tdef set_bern(bern = 1)\n\n\t#For each positive triple, we construct rate negative triples by corrupt the entity\n\tdef set_ent_neg_rate(rate = 1)\n\n\t#For each positive triple, we construct rate negative triples by corrupt the relation\n\tdef set_rel_neg_rate(rate = 0)\n\n\t#To sample a batch of training triples, including positive and negative ones.\n\tdef sampling()\n\n\t#To import dataset from the benchmark folder\n\tdef set_in_path(self, path)\n\n\t#To export model parameters to json files when training completed\n\tdef set_out_files(self, path)\n\n\t#To set the import files, all parameters can be restored from the import files\n\tdef set_import_files(self, path)\n\n\t#To set the export file of model paramters, and export results every few rounds\n\tdef set_export_files(self, path, steps = 0)\n\n\t#To export results every few rounds\n\tdef set_export_steps(self, steps)\n\n\t#To save model via tf.saver\n\tdef save_tensorflow(self)\n\n\t#To restore model via tf.saver\n\tdef restore_tensorflow(self)\n\n\t#To export model paramters, when path is none, equivalent to save_tensorflow()\n\tdef export_variables(self, path = None)\n\n\t#To import model paramters, when path is none, equivalent to restore_tensorflow()\n\tdef import_variables(self, path = None)\n\n\t#To export model paramters to designated path\n\tdef save_parameters(self, path = None)\n\n\t#To manually load parameters which are read from json files\n\tdef set_parameters(self, lists)\n\n\t#To get model paramters, if using mode \"numpy\", you can get np.array , else you can get python lists\n\tdef get_parameters(self, mode = \"numpy\")\n\n\t#To set the knowledge embedding model\n\tdef set_model(model)\n\n\t#The framework will print loss values during training if flag = 1\n\tdef set_log_on(flag = 1)\n\n\t#This is essential when testing\n\tdef set_test_link_prediction(True)\ndef set_test_triple_classification(True)\n```\n\n\n### Model\n\n```python\nclass Model(object)\n\n\t# return config which saves the training parameters.\n\tget_config(self)\n\n\t# in_batch = True, return [positive_head, positive_tail, positive_relation]\n\t# The shape of positive_head is [batch_size, 1]\n\t# in_batch = False, return [positive_head, positive_tail, positive_relation]\n\t# The shape of positive_head is [batch_size]\n\tget_positive_instance(in_batch = True)\n\n\t# in_batch = True, return [negative_head, negative_tail, negative_relation]\n\t# The shape of positive_head is [batch_size, negative_ent_rate + negative_rel_rate]\n\t# in_batch = False, return [negative_head, negative_tail, negative_relation]\n\t# The shape of positive_head is [(negative_ent_rate + negative_rel_rate) * batch_size]\t\t\n\tget_negative_instance(in_batch = True)\n\n\t# in_batch = True, return all training instances with the shape [batch_size, (1 + negative_ent_rate + negative_rel_rate)]\n\t# in_batch = False, return all training instances with the shape [(negative_ent_rate + negative_rel_rate + 1) * batch_size]\n\tdef get_all_instance(in_batch = False)\n\n\t# in_batch = True, return all training labels with the shape [batch_size, (1 + negative_ent_rate + negative_rel_rate)]\n\t# in_batch = False, return all training labels with the shape [(negative_ent_rate + negative_rel_rate + 1) * batch_size]\n\t# The positive triples are labeled as 1, and the negative triples are labeled as -1\n\tdef get_all_labels(in_batch = False)\n\n\t# To define containers for training triples\n\tdef input_def()\n\n\t# To define embedding parameters for knowledge embedding models\n\tdef embedding_def()\n\n\t# To define loss functions for knowledge embedding models\n\tdef loss_def()\n\n\t# To define the prediction functions for knowledge embedding models\n\tdef predict_def(self)\n\n\tdef __init__(config)\n\n#The implementation for TransE\nclass TransE(Model)\n\n#The implementation for TransH\t\nclass TransH(Model)\n\n#The implementation for TransR\nclass TransR(Model)\n\n#The implementation for TransD\nclass TransD(Model)\n\n#The implementation for RESCAL\nclass RESCAL(Model)\n\n#The implementation for DistMult\nclass DistMult(Model)\n\n#The implementation for HolE\nclass HolE(Model)\t\t\t\t\t\n\n#The implementation for ComplEx\nclass ComplEx(Model)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zeionara/OpenKE",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openke",
    "package_url": "https://pypi.org/project/openke/",
    "platform": "",
    "project_url": "https://pypi.org/project/openke/",
    "project_urls": {
      "Homepage": "https://github.com/zeionara/OpenKE"
    },
    "release_url": "https://pypi.org/project/openke/0.96/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for operating knowledge graph models",
    "version": "0.96",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11773007,
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60c90ee693b15374c0aacec8b5de7f5809d0ff305f4a405904082909c2fe27d6",
          "md5": "cfee2baa8c1f66662caee643bd8af24b",
          "sha256": "6e5f7c8418e2fb4d42919429534251e8e7526ab8f805653e122f29d600bd5205"
        },
        "downloads": -1,
        "filename": "openke-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cfee2baa8c1f66662caee643bd8af24b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30762,
        "upload_time": "2020-11-09T14:52:13",
        "upload_time_iso_8601": "2020-11-09T14:52:13.652732Z",
        "url": "https://files.pythonhosted.org/packages/60/c9/0ee693b15374c0aacec8b5de7f5809d0ff305f4a405904082909c2fe27d6/openke-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.71": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2afe33c3398f384eeaf2a963dd8914b8f0df5cc11775e35309a3db197aec081e",
          "md5": "e841e0df74b5943844f62e6c895e08b0",
          "sha256": "08e548e6566a9ca4c00a989ce59435b9f606f98a5967c8bdd4939eb5d2707b44"
        },
        "downloads": -1,
        "filename": "openke-0.71.tar.gz",
        "has_sig": false,
        "md5_digest": "e841e0df74b5943844f62e6c895e08b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30938,
        "upload_time": "2020-11-09T14:58:57",
        "upload_time_iso_8601": "2020-11-09T14:58:57.516598Z",
        "url": "https://files.pythonhosted.org/packages/2a/fe/33c3398f384eeaf2a963dd8914b8f0df5cc11775e35309a3db197aec081e/openke-0.71.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.72": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5dd109d299e52890656781be21d0e386ac56a839c69c712a5b095a21e9216e3",
          "md5": "280c48090e43745fe094fe91b175bdb9",
          "sha256": "f3afd778a17f3e219231ed722812722c7a9c7cf18622cd734de73bb4ca4476b3"
        },
        "downloads": -1,
        "filename": "openke-0.72.tar.gz",
        "has_sig": false,
        "md5_digest": "280c48090e43745fe094fe91b175bdb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31107,
        "upload_time": "2020-11-09T15:08:22",
        "upload_time_iso_8601": "2020-11-09T15:08:22.539352Z",
        "url": "https://files.pythonhosted.org/packages/f5/dd/109d299e52890656781be21d0e386ac56a839c69c712a5b095a21e9216e3/openke-0.72.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.73": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a044c0473a7d8337f146545e539b69b13c032862eb5e5282885789be66c1f999",
          "md5": "8fbb2cffdff4affa5966e23776c08299",
          "sha256": "a9e79949be63da5528355305510cd6b7b8175dfa539ce7f34675bd04a6c41918"
        },
        "downloads": -1,
        "filename": "openke-0.73.tar.gz",
        "has_sig": false,
        "md5_digest": "8fbb2cffdff4affa5966e23776c08299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31100,
        "upload_time": "2020-11-09T15:10:17",
        "upload_time_iso_8601": "2020-11-09T15:10:17.058780Z",
        "url": "https://files.pythonhosted.org/packages/a0/44/c0473a7d8337f146545e539b69b13c032862eb5e5282885789be66c1f999/openke-0.73.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.74": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "326105503f1cfe3a9a5386c4a41d963da0a60ff336758aa75a66556d55454f9f",
          "md5": "3f25b6591e78ccce7914f314ffe40403",
          "sha256": "9a1497108d090b29528708f151476e79610b5a990460356565b8b19caa8eb40e"
        },
        "downloads": -1,
        "filename": "openke-0.74.tar.gz",
        "has_sig": false,
        "md5_digest": "3f25b6591e78ccce7914f314ffe40403",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31107,
        "upload_time": "2020-11-09T15:12:33",
        "upload_time_iso_8601": "2020-11-09T15:12:33.078686Z",
        "url": "https://files.pythonhosted.org/packages/32/61/05503f1cfe3a9a5386c4a41d963da0a60ff336758aa75a66556d55454f9f/openke-0.74.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.75": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a27160b0b6c00d8fe1e22529ff1e81b59908e0fc5601b72c544373bc54c047fb",
          "md5": "ae53f91394eab43282464bfd9e4066f9",
          "sha256": "07a4e942b6db9df66821f560269ffc0f5bdeeca9e0512f56ce5f8ed5147b46f5"
        },
        "downloads": -1,
        "filename": "openke-0.75.tar.gz",
        "has_sig": false,
        "md5_digest": "ae53f91394eab43282464bfd9e4066f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31124,
        "upload_time": "2020-11-09T15:14:20",
        "upload_time_iso_8601": "2020-11-09T15:14:20.886781Z",
        "url": "https://files.pythonhosted.org/packages/a2/71/60b0b6c00d8fe1e22529ff1e81b59908e0fc5601b72c544373bc54c047fb/openke-0.75.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.76": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57054911a2f95fc0f176abaa26c5894e4b8879922c57d29d80c9be98427fb413",
          "md5": "d9e144a49144e55420c617e68bebb815",
          "sha256": "4ab6ff16fdec2364758a0cef5ddeb3e07cb16448d1bf511c3e2b19054dd70d01"
        },
        "downloads": -1,
        "filename": "openke-0.76.tar.gz",
        "has_sig": false,
        "md5_digest": "d9e144a49144e55420c617e68bebb815",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31133,
        "upload_time": "2020-11-09T15:17:14",
        "upload_time_iso_8601": "2020-11-09T15:17:14.751505Z",
        "url": "https://files.pythonhosted.org/packages/57/05/4911a2f95fc0f176abaa26c5894e4b8879922c57d29d80c9be98427fb413/openke-0.76.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.77": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93174c2947ab25b81163b635d71e966fff57b2150210f1fedba6df15eddc04ae",
          "md5": "ac93f33e4dea118ab0949c343b654be6",
          "sha256": "05a6c5affdb91d2f2036aaa0e1ff598598f30a0cabf9d46b86528269ae1da646"
        },
        "downloads": -1,
        "filename": "openke-0.77.tar.gz",
        "has_sig": false,
        "md5_digest": "ac93f33e4dea118ab0949c343b654be6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31136,
        "upload_time": "2020-11-09T15:18:52",
        "upload_time_iso_8601": "2020-11-09T15:18:52.083811Z",
        "url": "https://files.pythonhosted.org/packages/93/17/4c2947ab25b81163b635d71e966fff57b2150210f1fedba6df15eddc04ae/openke-0.77.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.78": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac7635e5cfd99d70d645d6ad7967d3c98168c6a62fb4533a89298e10276fec46",
          "md5": "39b4f2c74cfabeda245c96f03e37eaa9",
          "sha256": "7ba24272e2227974747e57a70a67c45e1326eb3ce4e88e8ad05e73c0d824f7c7"
        },
        "downloads": -1,
        "filename": "openke-0.78.tar.gz",
        "has_sig": false,
        "md5_digest": "39b4f2c74cfabeda245c96f03e37eaa9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38360,
        "upload_time": "2020-11-09T15:21:30",
        "upload_time_iso_8601": "2020-11-09T15:21:30.957586Z",
        "url": "https://files.pythonhosted.org/packages/ac/76/35e5cfd99d70d645d6ad7967d3c98168c6a62fb4533a89298e10276fec46/openke-0.78.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.79": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "767486e67ffcc974f8ae451b1a65ee5d65338ea996112ca924b40696784a857e",
          "md5": "a4cde5845ddf455e7b58d748d1393b01",
          "sha256": "369143d4a6a09ce88016e75a57ee581d4abe6c68f72fd07215ac56f8ebbbc3cf"
        },
        "downloads": -1,
        "filename": "openke-0.79.tar.gz",
        "has_sig": false,
        "md5_digest": "a4cde5845ddf455e7b58d748d1393b01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65119,
        "upload_time": "2020-11-09T15:23:11",
        "upload_time_iso_8601": "2020-11-09T15:23:11.258783Z",
        "url": "https://files.pythonhosted.org/packages/76/74/86e67ffcc974f8ae451b1a65ee5d65338ea996112ca924b40696784a857e/openke-0.79.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.80": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c2dc1a3e3de46810be8198700a6c0edac527e0a70712acc2ee25c1a9e784b4",
          "md5": "15f13e2b5e503b84ba5caceb5199ea8a",
          "sha256": "85acf8a5daf9557609467e1966de0527ef03659087afff7a8d55339d9ddf99d6"
        },
        "downloads": -1,
        "filename": "openke-0.80.tar.gz",
        "has_sig": false,
        "md5_digest": "15f13e2b5e503b84ba5caceb5199ea8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65139,
        "upload_time": "2020-11-09T15:25:57",
        "upload_time_iso_8601": "2020-11-09T15:25:57.050980Z",
        "url": "https://files.pythonhosted.org/packages/f9/c2/dc1a3e3de46810be8198700a6c0edac527e0a70712acc2ee25c1a9e784b4/openke-0.80.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.81": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "939f0870ef52831a308682d9ecf0cda2ce58bd3419bcf0e8972367d5f01ae305",
          "md5": "e78f53ec4d8b56a5336640fb6f8723b4",
          "sha256": "b618aca6da0cc50ac65f74d6c85027c75c7458911f9c333f0eff003e5305faab"
        },
        "downloads": -1,
        "filename": "openke-0.81.tar.gz",
        "has_sig": false,
        "md5_digest": "e78f53ec4d8b56a5336640fb6f8723b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65147,
        "upload_time": "2020-11-09T15:33:07",
        "upload_time_iso_8601": "2020-11-09T15:33:07.895292Z",
        "url": "https://files.pythonhosted.org/packages/93/9f/0870ef52831a308682d9ecf0cda2ce58bd3419bcf0e8972367d5f01ae305/openke-0.81.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.82": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8451ffe24237a31f69e5dd2414916ef1c3caed68c2819d332865d5c95e9b694c",
          "md5": "44bc909862dbba12e7cde4b56225c35e",
          "sha256": "ab1aa3702b32a2fd99c369f537e4658dabcf8f37c3bdb591f0ba5cc996c6ab9f"
        },
        "downloads": -1,
        "filename": "openke-0.82.tar.gz",
        "has_sig": false,
        "md5_digest": "44bc909862dbba12e7cde4b56225c35e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65144,
        "upload_time": "2020-11-09T15:36:53",
        "upload_time_iso_8601": "2020-11-09T15:36:53.638776Z",
        "url": "https://files.pythonhosted.org/packages/84/51/ffe24237a31f69e5dd2414916ef1c3caed68c2819d332865d5c95e9b694c/openke-0.82.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.83": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3a02229417d1f192ff2dd45a2331966a1bb4ac6be9c9b07ebd735aadbb059f2",
          "md5": "2708a630c5807993209bc9b6a4e431bb",
          "sha256": "a6423e2be75d3600c27ed1038fd651f62f7d40bd14e8680d2e7b68fc6ec85582"
        },
        "downloads": -1,
        "filename": "openke-0.83.tar.gz",
        "has_sig": false,
        "md5_digest": "2708a630c5807993209bc9b6a4e431bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65164,
        "upload_time": "2020-11-09T15:40:55",
        "upload_time_iso_8601": "2020-11-09T15:40:55.170785Z",
        "url": "https://files.pythonhosted.org/packages/d3/a0/2229417d1f192ff2dd45a2331966a1bb4ac6be9c9b07ebd735aadbb059f2/openke-0.83.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.84": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b9c789a68d92dd9448146fa18c64adb878d1f29d9f5113b17e4ad02718c88c",
          "md5": "12cdec1985e7a9cc44064ab707582b66",
          "sha256": "1ebfdf878cc63c100b0c571d3f5fd7bef5ee968faac1b25d5ecee003604120bd"
        },
        "downloads": -1,
        "filename": "openke-0.84.tar.gz",
        "has_sig": false,
        "md5_digest": "12cdec1985e7a9cc44064ab707582b66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65200,
        "upload_time": "2020-11-09T15:44:01",
        "upload_time_iso_8601": "2020-11-09T15:44:01.975634Z",
        "url": "https://files.pythonhosted.org/packages/f2/b9/c789a68d92dd9448146fa18c64adb878d1f29d9f5113b17e4ad02718c88c/openke-0.84.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.85": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af56548efc1dff425dddfe1f7f27c208a78bbe90952c86296e26ff42141d48d0",
          "md5": "83f7b288880d9c492c5c4746eb5daccd",
          "sha256": "d72d750cdc0bd436f625a25586f69a266c8adaccf66d506ed5f9f7d0a04416d3"
        },
        "downloads": -1,
        "filename": "openke-0.85.tar.gz",
        "has_sig": false,
        "md5_digest": "83f7b288880d9c492c5c4746eb5daccd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65204,
        "upload_time": "2020-11-09T15:45:07",
        "upload_time_iso_8601": "2020-11-09T15:45:07.094865Z",
        "url": "https://files.pythonhosted.org/packages/af/56/548efc1dff425dddfe1f7f27c208a78bbe90952c86296e26ff42141d48d0/openke-0.85.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.86": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebc35abb5136cb3e30e1beecb72a0855303054f5d8667f437ed982e345da9c48",
          "md5": "45c2d3e848b0b39f54081fe276e8aa22",
          "sha256": "276cc9f0ea837a5e1b5063b2b696148d10b99d29051b9d9d3af63d7e23a4fe7d"
        },
        "downloads": -1,
        "filename": "openke-0.86.tar.gz",
        "has_sig": false,
        "md5_digest": "45c2d3e848b0b39f54081fe276e8aa22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65166,
        "upload_time": "2020-11-09T15:48:04",
        "upload_time_iso_8601": "2020-11-09T15:48:04.958781Z",
        "url": "https://files.pythonhosted.org/packages/eb/c3/5abb5136cb3e30e1beecb72a0855303054f5d8667f437ed982e345da9c48/openke-0.86.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.87": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f5d967cf810baccf9e0dace4447253278373b3f7b48d6ce79cd482b71b79ef5",
          "md5": "430fe8b5532b9cf559fcb96a8722b812",
          "sha256": "e8a92b9250b8a4903c70d30edd5f86063eab925733e61ed9961a2bf4c8620df8"
        },
        "downloads": -1,
        "filename": "openke-0.87.tar.gz",
        "has_sig": false,
        "md5_digest": "430fe8b5532b9cf559fcb96a8722b812",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65160,
        "upload_time": "2020-11-09T15:48:56",
        "upload_time_iso_8601": "2020-11-09T15:48:56.505158Z",
        "url": "https://files.pythonhosted.org/packages/6f/5d/967cf810baccf9e0dace4447253278373b3f7b48d6ce79cd482b71b79ef5/openke-0.87.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.89": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f7394f5c63fa8fae77135857e87699dc05a679f3d0920832da4cffb08590e51",
          "md5": "069d7bb0d04d991567afe8857811d6cd",
          "sha256": "2ddc72c72537e91298c784ec2431127fcc4d5cc75004c4513b35f9ceeb39a289"
        },
        "downloads": -1,
        "filename": "openke-0.89-py3.8.egg",
        "has_sig": false,
        "md5_digest": "069d7bb0d04d991567afe8857811d6cd",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": null,
        "size": 86610,
        "upload_time": "2020-11-09T16:08:09",
        "upload_time_iso_8601": "2020-11-09T16:08:09.719034Z",
        "url": "https://files.pythonhosted.org/packages/3f/73/94f5c63fa8fae77135857e87699dc05a679f3d0920832da4cffb08590e51/openke-0.89-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcf3808941b3679da50f45c66d284a161aaf57d20b14dc9f3225a18ea679728d",
          "md5": "72572d7978373a8a249181782e1191e4",
          "sha256": "7ddf3f24bbf97f6a474dd82382086bc0dd2744ad961702a13bbffe3f77c1001e"
        },
        "downloads": -1,
        "filename": "openke-0.89.tar.gz",
        "has_sig": false,
        "md5_digest": "72572d7978373a8a249181782e1191e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65201,
        "upload_time": "2020-11-09T16:08:12",
        "upload_time_iso_8601": "2020-11-09T16:08:12.690865Z",
        "url": "https://files.pythonhosted.org/packages/fc/f3/808941b3679da50f45c66d284a161aaf57d20b14dc9f3225a18ea679728d/openke-0.89.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.92": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "578e120149a52d01bebf1415da526b3a41c8bf40541dfc2d9c8977c5d98ae48d",
          "md5": "454ebc7a3adfafeaa897c7698d83f28c",
          "sha256": "f6a390eca17cab20fe7823d8ba98f4963914993ea52db9a3f162ae3c9f9bedbc"
        },
        "downloads": -1,
        "filename": "openke-0.92.tar.gz",
        "has_sig": false,
        "md5_digest": "454ebc7a3adfafeaa897c7698d83f28c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68941,
        "upload_time": "2020-11-09T16:29:22",
        "upload_time_iso_8601": "2020-11-09T16:29:22.126788Z",
        "url": "https://files.pythonhosted.org/packages/57/8e/120149a52d01bebf1415da526b3a41c8bf40541dfc2d9c8977c5d98ae48d/openke-0.92.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.93": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41283dad66d2d00eedc14c83ed9439dcb20b2e1743ab75464dca5e4097c24a3a",
          "md5": "636b74b5c8b555672baf363c1793941b",
          "sha256": "7feac260febc56bbc0b8e0e733ffbeec94614ba8c67833a04b2ba226b22dd260"
        },
        "downloads": -1,
        "filename": "openke-0.93.tar.gz",
        "has_sig": false,
        "md5_digest": "636b74b5c8b555672baf363c1793941b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69159,
        "upload_time": "2020-11-09T20:05:17",
        "upload_time_iso_8601": "2020-11-09T20:05:17.506202Z",
        "url": "https://files.pythonhosted.org/packages/41/28/3dad66d2d00eedc14c83ed9439dcb20b2e1743ab75464dca5e4097c24a3a/openke-0.93.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.94": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d396d02ccc0e0e6ff460c4bd436ea9075a8cdaa8511c5cdcda0cb892e166d603",
          "md5": "7e7abe41a4b60b87df6ba97e2c45f0b1",
          "sha256": "d896d9b4176924b519f4d84f7d9f443b24e7c0d6e4827d8465d2430dbe0a4f9b"
        },
        "downloads": -1,
        "filename": "openke-0.94.tar.gz",
        "has_sig": false,
        "md5_digest": "7e7abe41a4b60b87df6ba97e2c45f0b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69369,
        "upload_time": "2021-10-14T10:25:31",
        "upload_time_iso_8601": "2021-10-14T10:25:31.100882Z",
        "url": "https://files.pythonhosted.org/packages/d3/96/d02ccc0e0e6ff460c4bd436ea9075a8cdaa8511c5cdcda0cb892e166d603/openke-0.94.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.95": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "451df33490ba5583eec36d3180720be240efa4286429ca36e3f56ba3c9aeca13",
          "md5": "b393127b5fe8ff8d4aadfc177adcaf39",
          "sha256": "1de01eaedd161e968f98a6eac7997f371ab9686ee2005a1ba2dc1b41f558fb51"
        },
        "downloads": -1,
        "filename": "openke-0.95.tar.gz",
        "has_sig": false,
        "md5_digest": "b393127b5fe8ff8d4aadfc177adcaf39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35508,
        "upload_time": "2021-10-19T19:38:43",
        "upload_time_iso_8601": "2021-10-19T19:38:43.396972Z",
        "url": "https://files.pythonhosted.org/packages/45/1d/f33490ba5583eec36d3180720be240efa4286429ca36e3f56ba3c9aeca13/openke-0.95.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.96": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c184cf54373b50edb920f14849a5dd3416640f1e83bdcf60b4e6c5309bd56694",
          "md5": "f38d3999db638cc905d25af52127eb86",
          "sha256": "c53e56c535f9297eabe6b8a32d2dedf990d5065e7c4aa991ec198fd78e757965"
        },
        "downloads": -1,
        "filename": "openke-0.96.tar.gz",
        "has_sig": false,
        "md5_digest": "f38d3999db638cc905d25af52127eb86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35498,
        "upload_time": "2021-10-19T19:47:25",
        "upload_time_iso_8601": "2021-10-19T19:47:25.033463Z",
        "url": "https://files.pythonhosted.org/packages/c1/84/cf54373b50edb920f14849a5dd3416640f1e83bdcf60b4e6c5309bd56694/openke-0.96.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c184cf54373b50edb920f14849a5dd3416640f1e83bdcf60b4e6c5309bd56694",
        "md5": "f38d3999db638cc905d25af52127eb86",
        "sha256": "c53e56c535f9297eabe6b8a32d2dedf990d5065e7c4aa991ec198fd78e757965"
      },
      "downloads": -1,
      "filename": "openke-0.96.tar.gz",
      "has_sig": false,
      "md5_digest": "f38d3999db638cc905d25af52127eb86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35498,
      "upload_time": "2021-10-19T19:47:25",
      "upload_time_iso_8601": "2021-10-19T19:47:25.033463Z",
      "url": "https://files.pythonhosted.org/packages/c1/84/cf54373b50edb920f14849a5dd3416640f1e83bdcf60b4e6c5309bd56694/openke-0.96.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}