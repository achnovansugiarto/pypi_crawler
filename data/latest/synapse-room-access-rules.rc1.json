{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Room Access rules\n\nThis module implements handling around the `im.vector.room.access_rules` state event. A specification for this event is described below.\n\n## `im.vector.room.access_rules`\n\nRestricts the access to a room based on the selected preset. Body:\n\n```json\n{\n    \"rule\": \"<rule>\"\n}\n```\n\n`<rule>` is either `restricted`, `unrestricted` or `direct`.\n\nThe implementation of the different presets lives in the\n`synapse.third_party_rules.access_rules` module.\n\n### `restricted` preset\n\nDefault preset for non-direct rooms (i.e. rooms not created with `\"is_direct\": true`).\n\nForbids any invite and membership update for users that belong to a server\nthat is in the blacklist provided by the module's configuration\n(`domains_forbidden_when_restricted`). If the invite is a 3PID invite, queries\na custom `/_matrix/identity/api/v1/info` endpoint of the configured identity server to check if the invited email\naddress belongs to a blacklisted server, in which case the invite is denied.\n\n### `unrestricted` preset\n\nDoesn't apply any restriction on who can join the room.\n\nForbids any `m.room.power_levels` event that either:\n\n* change the `users_default` power level to a non-0 value, or\n* change the power level for a user from a blacklisted server (see details about the `restricted` preset) to a non-default value\n\n### `direct` preset\n\nDefault preset for direct rooms (i.e. rooms created with `\"is_direct\": true`).\n\nOnly allow two members in the room by running the following algorithm for\neach new event of type `m.room.member` or `m.room.third_party_invite` sent\ninto the room:\n\n0. retrieve the list of memberships and 3PID invite tokens from the room's state, which in practice means retrieving the state key of every `m.room.member` or `m.room.third_party_invite` event present in the room's state (ignoring 3PID invite events with an empty content)\n\n1. if the event is of type `m.room.third_party_invite`, and there are already events of the same type in the room's state, reject the new event if its state key doesn't match the state key of one of the existing events.\n\n2. else, if there are already two members in the room:\n\n    2.1. if the event is a 3PID invite, reject it\n\n    2.2. if the event is a membership update, reject it if the target isn't one of the room's current members\n\n3. else, if there is one membership event and one 3PID invite in the room's state:\n\n    3.1. if the event is a membership event, reject it if it's not an invite exchanged from the 3PID invite that's in the room's state\n\n    3.2. otherwise, reject the event\n\n4. else, accept the event\n\nAlso forbids sending an event of the type `m.room.name`, `m.room.avatar_url`\nor `m.room.topic` into the room.\n\n### Interaction with `m.room.join_rules`\n\nWhen the preset of the room is something other than `restricted`, changing the\nroom's join rule to `public` is forbidden. This is to ensure\nusers on blacklisted servers (see details about the `restricted` preset) can't\njoin a room unless they have been invited.\n\n## Installation\n\nTODO\n\n## Config\n\nAdd the following to your Synapse config:\n\n```yaml\nmodules:\n  - module: room_access_rules.RoomAccessRules\n    config:\n        # List of domains (server names) that can't be invited to rooms if the\n        # \"restricted\" rule is set. Defaults to an empty list.\n        domains_forbidden_when_restricted: []\n    \n        # Identity server to use when checking the homeserver an email address belongs to\n        # using the /info endpoint. Required.\n        id_server: \"vector.im\"\n```\n\n## Development and Testing\n\nThis repository uses `tox` to run tests.\n\n### Tests\n\nThis repository uses `unittest` to run the tests located in the `tests`\ndirectory. They can be ran with `tox -e tests`.\n\n### Making a release\n\n```\ngit tag -s vX.Y\npython3 setup.py sdist\ntwine upload dist/synapse-room-access-rules-X.Y.tar.gz\ngit push origin vX.Y\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matrix-org/synapse-room-access-rules",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synapse-room-access-rules",
    "package_url": "https://pypi.org/project/synapse-room-access-rules/",
    "platform": "",
    "project_url": "https://pypi.org/project/synapse-room-access-rules/",
    "project_urls": {
      "Homepage": "https://github.com/matrix-org/synapse-room-access-rules"
    },
    "release_url": "https://pypi.org/project/synapse-room-access-rules/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Custom room access rules for Tchap",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16317641,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "843d7367e24b0a0f49c445d62463866d90f75d29ca0bd2068f3549aeb89fc2fd",
          "md5": "be0c0995ebbffb5a8bc80efa51c8c767",
          "sha256": "4a45eccb233e7479e1c18a8f4037b926c54b390aa82e16e7ed7a6601830c2dfa"
        },
        "downloads": -1,
        "filename": "synapse-room-access-rules-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be0c0995ebbffb5a8bc80efa51c8c767",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19166,
        "upload_time": "2021-11-10T16:13:05",
        "upload_time_iso_8601": "2021-11-10T16:13:05.224462Z",
        "url": "https://files.pythonhosted.org/packages/84/3d/7367e24b0a0f49c445d62463866d90f75d29ca0bd2068f3549aeb89fc2fd/synapse-room-access-rules-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "843d7367e24b0a0f49c445d62463866d90f75d29ca0bd2068f3549aeb89fc2fd",
        "md5": "be0c0995ebbffb5a8bc80efa51c8c767",
        "sha256": "4a45eccb233e7479e1c18a8f4037b926c54b390aa82e16e7ed7a6601830c2dfa"
      },
      "downloads": -1,
      "filename": "synapse-room-access-rules-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "be0c0995ebbffb5a8bc80efa51c8c767",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19166,
      "upload_time": "2021-11-10T16:13:05",
      "upload_time_iso_8601": "2021-11-10T16:13:05.224462Z",
      "url": "https://files.pythonhosted.org/packages/84/3d/7367e24b0a0f49c445d62463866d90f75d29ca0bd2068f3549aeb89fc2fd/synapse-room-access-rules-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}