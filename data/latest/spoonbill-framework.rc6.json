{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n   <img src=\"https://github.com/xdssio/spoonbill/raw/9630a4dcb9ea4ee5dbd8dd58ae27900bdc371620/docs/images/logo.png\" alt=\"logo\" width=\"400\" />\n</p>\n\n# Spoonbill\n\nWhat is Spoonbill? Inspired by [ibis](https://ibis-project.org/docs/3.2.0/),\nSpoonbill is a Python library that provides a lightweight, universal interface for Key-Values data stores.     \nWrite once, run anywhere.\n\nFor fast prototyping, testing, and simplification of data pipelines.\n#### [Docs](https://spoonbill-framework.readthedocs.io/en/latest/)\n\n## Features\n\n1. A unified interface for all key-value data stores.\n2. A simple, intuitive API.\n3. A lightweight, fast, and flexible library.\n4. Extra features like Search, batch inserts and retrieval on (almost) all backends.\n\n## Installation\n\n```bash\npip install spoonbill-framework\n```\n\n## Operations map\n\n| Operation                    | InMemoryStore | FilesystemStore                                                                                                      | RedisStore                                 | LmdbStore                                           | PysosStore                                  | ShelveStore                                             | DynamoDBStore                                    | FireStoreStore                                              | CosmosDBStore                                                                                          | MongoDBStore                            | SafetensorsStore                                          |\n|------------------------------|---------------|----------------------------------------------------------------------------------------------------------------------|--------------------------------------------|-----------------------------------------------------|---------------------------------------------|---------------------------------------------------------|--------------------------------------------------|-------------------------------------------------------------|--------------------------------------------------------------------------------------------------------|-----------------------------------------|-----------------------------------------------------------|\n| backend                      | python dict   | [fsspec](https://filesystem-spec.readthedocs.io/en/latest/features.html#key-value-stores) (S3/gs,az,local,ftp, etc)  | [Redis](https://github.com/redis/redis-py) | [Lmdb](https://github.com/Dobatymo/lmdb-python-dbm) | [Pysos](https://github.com/dagnelies/pysos) | [Shelve](https://docs.python.org/3/library/shelve.html) | [AWS DynamoDB](https://aws.amazon.com/dynamodb/) | [GCP Firestore](https://firebase.google.com/docs/firestore) | [Azure Cosmos DB](https://www.google.com/search?client=safari&rls=en&q=Azure+Cosmos&ie=UTF-8&oe=UTF-8) | [MongoDB](https://www.mongodb.com/home) | [safetensors](https://github.com/huggingface/safetensors) |\n| set                          | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | -                                                         | \n| get                          | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| pop                          | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | -                                                         |\n| delete                       | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | -                                                         |\n| len                          | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| eq                           | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | -                                                         |\n| keys                         | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| values                       | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| items                        | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| iter                         | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| contains                     | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| update                       | +             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | -                                                         |\n| persistence                  | -             | +                                                                                                                    | +                                          | +                                                   | +                                           | +                                                       | +                                                | +                                                           | +                                                                                                      | +                                       | +                                                         |\n| save/load                    | +             | Auto                                                                                                                 | Save (experimental)                        | +                                                   | +                                           | +                                                       | Serverless                                       | Serverless                                                  | Serverless                                                                                             | + (strict)                              | +                                                         |\n| key type (Not strict/strict) | Any           | Any(local) / String(cloud)                                                                                           | Any/String                                 | Any                                                 | Any                                         | Any                                                     | String                                           | Any/String                                                  | String                                                                                                 | String                                  | String                                                    |\n| value_type                   | Any           | Any(local) / String(cloud)                                                                                           | Any/String                                 | Any                                                 | Any                                         | Any                                                     | Jsonable                                         | Any                                                         | Any                                                                                                    | Any/Dict[str,Any]                       | Tensors                                                   |\n\n* A `strict=False` mode is available to allow for more flexible data types - anything which is cloudpickle-able will\n  work including classes and functions.\n\n## Usage\n\nAll the classes have the same interface, so you can use them interchangeably.\n\n* The *strict* argument is used to control if to encode the keys and values with cloudpickle or keep original backend\n  behavior. if strict is False, any key and value can be used, otherwise it depends on the backend.\n\n## APIs\n\n```python\nfrom spoonbill.datastores import InMemoryStore\n\nstore = InMemoryStore()\nstore[\"key\"] = \"value\"\nstore[\"key\"] = {\"feature\": \"value\"}\nstore[\"key\"] == \"value\"\ndel store['key']\nstore.set(\"key\", \"value\")\nstore.get(\"key\", None)\nstore.delete(\"key\")\nstore.pop('key', None)\nstore.popitem()\nstore.keys()\nstore.items()\nstore.values()\n'key' in store  # contains\nlen(store)\nfor key in store: pass  # iterate\nstore.update({'key': 'value'})\nstore.save('path')\nstore.load('path')\n\n\n```\n\nWhen using `strict=True` we can use some advanced features of the backend. specifically for searches.\n\n```python\nfrom spoonbill.datastores import InMemoryStore\n\nstore = InMemoryStore()\nstore.keys(pattern=\"*\", limit=10)  # scan keys to a pattern\nstore.values(keys=['key1', 'key2'])  # retrieve a batch of values efficiently \nstore.items(conditions={'a': '1+', 'b': 1}, limit=10)  # filter based on match conditions\n\n```\n\n### How to choose a backend?\n\nFor fastest performance, use the InMemoryStore. It is a simple dict that is not persisted to disk.      \nIf you need local persistence, I prefer the LmdbStore, but PysosStore and ShelveStore should work too.\n\nIf speed is not important, but you want cheap persistence in the cloud, use FilesystemStore with S3,GCP, or Azure.\n\nIf you are using it to load tensors for embedding or deep learning weights, use SafetensorsStore\n\nIf you need persistence in the cloud with realtime search, use one of the Providers key-values store:\n\n* CosmosDB (Azure)\n* Firestore (GCP)\n* DynamoDB (AWS)\n* MongoDB (Wherever it is deployed)\n\nIf you need very fast realtime, then the RedisStore is the best choice.\n\n# Backends\n\n## InMemoryStore\n\nThis object is to have a common interface for all the key-value stores. It is great for testing and for the average use\ncase, to have a common interface which includes the search operations.\n\n* Save/load are implemented to save/load the whole dict to/from a file, locally or on the cloud\n  using [fsspec](https://filesystem-spec.readthedocs.io/en/latest/api.html?highlight=s3#other-known-implementations).\n\n```python\nfrom spoonbill.datastores import InMemoryStore\n\nstore = InMemoryStore()  # InMemoryDict.open() or InMemoryDict.open('path/to/file') from file\n\n# Also works with any dict-like object\nfrom collections import defaultdict, OrderedDict, Counter\n\nstore = InMemoryStore(defaultdict)\nstore = InMemoryStore(OrderedDict)\nstore = InMemoryStore(Counter)\n```\n\n## [LmdbStore](https://github.com/Dobatymo/lmdb-python-dbm)\n\nAn LMDB key-value store based on [lmdb-python-dbm](https://github.com/Dobatymo/lmdb-python-dbm). This is ideal for lists\nor datastores which either need persistence, are too big to fit in memory or both.   \nThis is a Python DBM interface style wrapper around [LMDB](http://www.lmdb.tech/doc/) (Lightning Memory-Mapped Database)\n\n[Details](https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database)\n\nRequirements:   \n```pip install lmdbm```\n\n```python\nfrom spoonbill.datastores import LmdbStore\n\nstore = LmdbStore.open('tmp.db')\n```\n\n## [PysosStore](https://github.com/dagnelies/pysos)\n\nThis is ideal for lists or dictionaries which either need persistence, are too big to fit in memory or both.\n\nThere are existing alternatives like shelve, which are very good too. There main difference with pysos is that:\n\n* only the index is kept in memory, not the values (so you can hold more data than what would fit in memory)\n* it provides both persistent dicts and lists\n* objects must be json \"dumpable\" (no cyclic references, etc.)\n* it's fast (much faster than shelve on windows, but slightly slower than native dbms on linux)\n* it's unbuffered by design: when the function returns, you are sure it has been written on disk\n* it's safe: even if the machine crashes in the middle of a big write, data will not be corrupted\n* it is platform independent, unlike shelve which relies on an underlying dbm implementation, which may vary from system\n  to system the data is stored in a plain text format\n\nRequirements:   \n```pip install pysos```\n\n```python\nfrom spoonbill.datastores import PysosStore\n\nstore = PysosStore.open('tmp.db')\n```\n\n## [Shelve](https://docs.python.org/3/library/shelve.html)\n\nThe difference with “dbm” databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python\nobjects — anything that the pickle module can handle. This includes most class instances, recursive data types, and\nobjects containing lots of shared sub-objects. The keys are ordinary strings.\n\n```python\nfrom spoonbill.datastores import ShelveStore\n\nstore = ShelveStore.open('tmp.db')\n```\n\n## [Safetensors](https://github.com/huggingface/safetensors)\n\nThis is ideal whe you want to work with tensors from disc, but it is a frozen store - no set or update.\n\nRequirements:   \n```pip install safetensors```\n\n* if you use tensorflow, torch, numpy or flax, youll need to install them too... duh.\n\n```python\nfrom spoonbill.datastores import SafetensorsStore\nimport numpy as np\n\ndata = {'weight1': np.array([1, 2, 3]), 'weight2': np.array([4, 5, 6])}\nSafetensorsStore.export_safetensors(data, 'tmp.db', framework=SafetensorsStore.NUMPY)\nstore = SafetensorsStore.open('tmp.db', framework=SafetensorsStore.NUMPY, device='cpu')\n\nstore['weight1']  # returns a numpy array\nstore['weight1'] = 1  # raises an error\n```\n\nIf you must be able to have a mutable store, you can use the `SafetensorsInMemoryStore`.\n\n```python\nfrom spoonbill.datastores import SafetensorsInMemoryStore, SafetensorsStore\nimport numpy as np\n\nstore = SafetensorsInMemoryStore(framework=SafetensorsStore.NUMPY)\nstore['weight'] = np.array([1, 2, 3])  # backed by an InMemoryStore\nsafetensors_store = store.export_safetensors(\"path\")\n```\n\nIn you want a mutable and persisted safetensors, we got you cover with the `SafetensorsLmdbStore` backed by the\nLmdbStore backend\n\n* ```pip install lmdbm```\n\n```python\nfrom spoonbill.datastores import SafetensorsLmdbStore, SafetensorsStore\nimport numpy as np\n\nstore = SafetensorsLmdbStore(path='tmp.db', framework=SafetensorsStore.NUMPY)\nstore['weight'] = np.array([1, 2, 3])  # backed by a LmdbStore\nsafetensors_store = store.export_safetensors(\"path\")\n```\n\n## FilesystemStore\n\nThis dict is implemented as key-value files locally or on a cloud provider. It is **slow**, but good for as a cheap\npersisted key-value store. It is a wrapepr\naround [fsspec](https://filesystem-spec.readthedocs.io/en/latest/features.html#key-value-stores) key-value feature.\nTherefor it supports all the filesystems supported by fsspec (s3, gs, az, local, ftp, http, etc).\n\n* It supports caching\n* It can be exported to a local directory or other clouds (s3, gs, az, etc)\n\nFor faster applications with cloud persistence, you can use InMemoryStore/LmdbStore and save/load to the cloud after\nupdates.\n\n```python\nfrom spoonbill.datastores import FilesystemStore\n\n# set strict to True to use redis with its default behaviour which turns keys and values to strings\nstore = FilesystemStore.open(\"s3://bucket/path/to/store\")\nstore.save(\"local_dir_path\")\n```\n\n## [Redis](https://github.com/redis/redis-py)\n\nProbably the fastest solution for key-value stores not only in python, but in general. It is a great solution.\n\n* When *strict=False* any key-value can be used, otherwise only string keys and values can be used.\n* When using keys with patterns -> the pattern is passed to redis *keys* function, so the behaviour is what you would\n  expect from redis.\n* Redis doesn't have any search for values.\n\nRequirements:   \n```pip install redis```\n\n```python\nfrom spoonbill.datastores import RedisStore\n\n# set strict to True to use redis with its default behaviour which turns keys and values to strings\nstore = RedisStore.open(\"redis://localhost:6379/1\")\nstore[1] = 1\nassert store[1] == store[\"1\"] == \"1\"\n\nassert list(store.keys('1*')) == ['111', '1', '11']  # redis turn every key to string\nassert list(store.scan('1*')) == ['111', '1', '11']  # slower but non-blocking\n\nstore = RedisStore.open(\"redis://localhost:6379/1\", strict=False)\nstore[1] = lambda x: x + 1  # anything goes using cloudpickle\nassert store[1](1) == 2\n```\n\n## Serverless stores\n\n* Recommended to use values as dict values, as they are more efficient to scan.\n    * Good Example: `store['key'] = {'a': 1, 'b': 2}`\n    * Bad Example: `store['key'] = \"a value which is not a dict\"`\n\nRecommended using with `strict=True` to enjoy all the benefits of backends including **searches**.\n\nSearches API Example:\n\n```python\nfrom spoonbill.datastores import MongoDBStore\n\nstore = MongoDBStore()\nstore.keys(pattern=\"*\", limit=10)  # scan keys to a pattern\nstore.values(keys=['key1', 'key2'])  # retrieve a batch of values efficiently \nstore.items(conditions={'a': '1+', 'b': 1}, limit=10)  # filter based on match conditions\n```\n\n## [MongoDB]((https://www.mongodb.com/home))\n\n* Save/load is only implemented for `strict=True`.\n\nRequirements:\n```pip install pymongo```\n\n```python\nfrom spoonbill.datastores import MongoDBStore\n\nstore = MongoDBStore.open(uri='mongodb://localhost:27017/')\n```\n\n## [DynamoDB]((https://aws.amazon.com/dynamodb/))\n\nNotes:\n\n* It is always recommended to set values which are a dict {attribute_name: value} to enjoy all the dynamodb features.\n* Keys are defined per table as either strings ('S'), numbers ('N') or bytes ('B').\n* If you set a primitive number value, it will return as float (:\n* cerealbox is required for retrieving multiple values with *values([\"key1\", \"key2\"])*:\n    * ```pip install cerealbox```\n\nRequirements:\n\n```bash\npip install boto3 \n```\n\n## [Firestore]((https://firebase.google.com/docs/firestore))\n\nNotes:\n\n* It is recommended use dict-values {attribute_name: value} + `strict=True` to enjoy all the firestore features.\n    * Example: `store['key'] = {'feature': 'value'}`   \n      Prerequisites:\n\n1. Create a project in Google Cloud Platform\n2. Enable Firestore API\n3. Create a service account and download the json file\n4. Set the environment variable GOOGLE_APPLICATION_CREDENTIALS to the path of the json file\n5. Create a database in Firestore\n6. Create a collection in the database\n7. Install google-cloud-firestore with\n\n```bash\npip install --upgrade google-cloud-firestore \n```\n\n```python\nfrom spoonbill.datastores import Firestore\n\n# this rest of the credentials are picked up from the file in the GOOGLE_APPLICATION_CREDENTIALS environment variable\nstore = Firestore.open(table_name=\"my-collection\")\n```\n\n## [Azure CosmosDB]((https://www.google.com/search?client=safari&rls=en&q=Azure+Cosmos&ie=UTF-8&oe=UTF-8))\n\nNotes:\n\n* It is recommended use dict-values {attribute_name: value} + `strict=True` to enjoy all the CosmosDB features.\n    * Example: `store['key'] = {'feature': 'value'}`\n* The scans are implemented with SQL and  `LIKE` (Regex is not implemented on Cosmos). So it is not possible to do\n  `store.keys('a*')` but `store.keys('a%')` works.\n\nPrerequisites: [Quickstart](https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/quickstart-python?tabs=azure-portal%2Clinux)\n\nRequirements:\n\n```pip install azure-cosmos```\n\n```python\nfrom spoonbill.datastores import CosmosDBStore\n\nstore = CosmosDBStore.open(database='db',\n                           container='container',\n                           endpoint='endpoint',\n                           credential='credential')\n```\n\n## Use cases\n\nMock data on local dictionary and cloud store in dev or production.\n\n```python\nfrom spoonbill.datastores import DynamoDBStore, InMemoryStore\nimport os\n\nenvironment = os.getenv(\"environment\", \"test\")\n\nif environment == \"test\":\n    store = InMemoryStore.open(\"mock data\")\nelif environment == \"dev\":\n    store = DynamoDBStore.open(\"dev table\")\nelse:\n    store = DynamoDBStore.open(\"prod table\")\n```\n\nReal-time feature engineering with any backend\n\n```python\nfrom spoonbill.datastores import RedisStore\nimport pandas as pd\n\ndf = pd.DataFrame({'user': [1, 2, 3]})\nfeature_store = RedisStore.open(\"features table\")  # {1: {\"age\":20:, \"sex\":female\",...}}\n\n\ndef get_user_details(x):\n    default = {\"age\": 25, \"sex\": \"female\"}\n    return pd.Series(feature_store.get(x['user'], default).values())\n\n\ndf[['age', 'sex']] = df.apply(get_user_details, axis=1)\ndf\n\"\"\"\n   user  age     sex\n0     1   20    male\n1     2   30  female\n2     3   25  female\n\"\"\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dict,key-value,gcp,azure,aws,s3,lmdb,pysos,redis,dynamodb,mongodb,cosmosdb,safetensors",
    "license": "Copyright (c) 2020 Ritchie Vink  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spoonbill-framework",
    "package_url": "https://pypi.org/project/spoonbill-framework/",
    "platform": null,
    "project_url": "https://pypi.org/project/spoonbill-framework/",
    "project_urls": {
      "Homepage": "https://github.com/xdssio/spoonbill"
    },
    "release_url": "https://pypi.org/project/spoonbill-framework/0.0.1a5/",
    "requires_dist": [
      "cloudpickle",
      "fsspec",
      "boto3 ; extra == 'aws'",
      "s3fs ; extra == 'aws'",
      "cerealbox ; extra == 'aws'",
      "azure-cosmos ; extra == 'azure'",
      "pytest ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "sphinx-autodoc-typehints ; extra == 'dev'",
      "sphinxcontrib-napoleon ; extra == 'dev'",
      "sphinxcontrib-apidoc ; extra == 'dev'",
      "google-cloud-firestore ; extra == 'gcp'",
      "lmdbm ; extra == 'lmdbm'",
      "pymongo ; extra == 'mongodb'",
      "pysos ; extra == 'pysos'",
      "redis ; extra == 'redis'",
      "safetensors ; extra == 'safetensors'"
    ],
    "requires_python": ">=3.7",
    "summary": "A lightweight, universal interface for Key-Values data stores",
    "version": "0.0.1a5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16295605,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9680cb3c190716a4edacc8bb1f5e6b4d00c4052dae71663859afd20e556b57e0",
          "md5": "8ded22f1af32a30767e9571d8bc46a8c",
          "sha256": "6c0fb99619d757d45245d4bd406b1c5f7e9589174b714069b715f1d13ddb3e77"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ded22f1af32a30767e9571d8bc46a8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 24221,
        "upload_time": "2023-01-03T21:17:50",
        "upload_time_iso_8601": "2023-01-03T21:17:50.388832Z",
        "url": "https://files.pythonhosted.org/packages/96/80/cb3c190716a4edacc8bb1f5e6b4d00c4052dae71663859afd20e556b57e0/spoonbill_framework-0.0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eda430a1094a3c920d338ed4748a83e896f1dfff7794113c9a6ba60e2e2f9f7",
          "md5": "c4539dd920c32103fd2b3dbdfe98815a",
          "sha256": "f5686e568f44df7cd501bd30d241a542dec4abc4d555ed484527370f4a9566e0"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4539dd920c32103fd2b3dbdfe98815a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 817,
        "upload_time": "2022-12-06T10:00:43",
        "upload_time_iso_8601": "2022-12-06T10:00:43.707509Z",
        "url": "https://files.pythonhosted.org/packages/0e/da/430a1094a3c920d338ed4748a83e896f1dfff7794113c9a6ba60e2e2f9f7/spoonbill-framework-0.0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb26aa8cd3a83186601e95fd227db1819e0b3b8eaaded79de9f45ff5381bdfc5",
          "md5": "bcd6edf04f615964370aa63ffd3207f3",
          "sha256": "4d9a96f25f25a940a55021f7ff717432046f35f8b31084a4c8df5a0cd2f35725"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcd6edf04f615964370aa63ffd3207f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24223,
        "upload_time": "2023-01-03T21:18:49",
        "upload_time_iso_8601": "2023-01-03T21:18:49.865972Z",
        "url": "https://files.pythonhosted.org/packages/cb/26/aa8cd3a83186601e95fd227db1819e0b3b8eaaded79de9f45ff5381bdfc5/spoonbill_framework-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2349104bdd31cfe3b89ab8771de91070d56cfc8cca7a05fb483ff38094dedcd",
          "md5": "f60ac345604e919b29a738c07bde71d9",
          "sha256": "95156e646ce051bc4a5aa9dee7f65bcb91ec924bf0ddb9b21d6a7a2456022992"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "f60ac345604e919b29a738c07bde71d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22886,
        "upload_time": "2023-01-03T21:18:51",
        "upload_time_iso_8601": "2023-01-03T21:18:51.543845Z",
        "url": "https://files.pythonhosted.org/packages/c2/34/9104bdd31cfe3b89ab8771de91070d56cfc8cca7a05fb483ff38094dedcd/spoonbill-framework-0.0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d440617eb4ce0237572818860a0c25bd52db87d81864fffce3acc1c5ddba312e",
          "md5": "1ca4501cbc890fb6f3f80968a2c277cc",
          "sha256": "e21ca815148768a18d6888bc60f2fcf7f1f3ae5d1b9e9f51a688655f216aef2f"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ca4501cbc890fb6f3f80968a2c277cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29834,
        "upload_time": "2023-01-03T21:22:35",
        "upload_time_iso_8601": "2023-01-03T21:22:35.765946Z",
        "url": "https://files.pythonhosted.org/packages/d4/40/617eb4ce0237572818860a0c25bd52db87d81864fffce3acc1c5ddba312e/spoonbill_framework-0.0.1a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0edcc3bd5be2aad739fe0ff339e5b8ee236cb5eaf65a047c33914c1afe92540f",
          "md5": "e6d6b2d8ea5dd43f649c676b6886f3e9",
          "sha256": "245f20122a992c583b3afe40e277c91fc6c737e7ef92b5e1012877c042b3d003"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "e6d6b2d8ea5dd43f649c676b6886f3e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28581,
        "upload_time": "2023-01-03T21:22:38",
        "upload_time_iso_8601": "2023-01-03T21:22:38.615015Z",
        "url": "https://files.pythonhosted.org/packages/0e/dc/c3bd5be2aad739fe0ff339e5b8ee236cb5eaf65a047c33914c1afe92540f/spoonbill-framework-0.0.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43ec87a21290b0e7f0dd91cbbfd70fcc002e19d679b24e7ca4cc9edb61e17d81",
          "md5": "49bc60c0788f700b8521047d5ea09a1f",
          "sha256": "30a077b7f0f34e3f28a32b10802a61684968dbea46f116f9409060dd31f1c459"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49bc60c0788f700b8521047d5ea09a1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29792,
        "upload_time": "2023-01-03T21:35:55",
        "upload_time_iso_8601": "2023-01-03T21:35:55.340424Z",
        "url": "https://files.pythonhosted.org/packages/43/ec/87a21290b0e7f0dd91cbbfd70fcc002e19d679b24e7ca4cc9edb61e17d81/spoonbill_framework-0.0.1a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a5fdbc2cd8d3381b771b15c21265cb1124feac647ae672e612fb9c454e0d40a",
          "md5": "635f90b419424f6b88a5d4f2aab56ce3",
          "sha256": "7a26be9e0847c0f515f672b85760766ffd440d9ab19d8361b76fdd4da0402040"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a3.tar.gz",
        "has_sig": false,
        "md5_digest": "635f90b419424f6b88a5d4f2aab56ce3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28493,
        "upload_time": "2023-01-03T21:35:59",
        "upload_time_iso_8601": "2023-01-03T21:35:59.192710Z",
        "url": "https://files.pythonhosted.org/packages/1a/5f/dbc2cd8d3381b771b15c21265cb1124feac647ae672e612fb9c454e0d40a/spoonbill-framework-0.0.1a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb5debad9327261b71b523f3fcc49868d78a3bbf4464ab0b952a23622b95fb78",
          "md5": "988a7e86c25cf9b8f71726383ee304cb",
          "sha256": "506799f85fc8d967b21b799f4a5e1b1484de0f61d6aa8e3ee459d2d1b7fc6bb3"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "988a7e86c25cf9b8f71726383ee304cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29787,
        "upload_time": "2023-01-03T22:26:48",
        "upload_time_iso_8601": "2023-01-03T22:26:48.470872Z",
        "url": "https://files.pythonhosted.org/packages/bb/5d/ebad9327261b71b523f3fcc49868d78a3bbf4464ab0b952a23622b95fb78/spoonbill_framework-0.0.1a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f913ec539d0ea4ad79dbd0f08b9e061aef7ea60e73ac33de72325105d8933d84",
          "md5": "db5e3d5ce56e90e94c774e6028b7608e",
          "sha256": "f9ca6c118e040dae6dc50e165ea29a040e810cf740e774736e90029ff8a477e2"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a4.tar.gz",
        "has_sig": false,
        "md5_digest": "db5e3d5ce56e90e94c774e6028b7608e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28509,
        "upload_time": "2023-01-03T22:26:53",
        "upload_time_iso_8601": "2023-01-03T22:26:53.984282Z",
        "url": "https://files.pythonhosted.org/packages/f9/13/ec539d0ea4ad79dbd0f08b9e061aef7ea60e73ac33de72325105d8933d84/spoonbill-framework-0.0.1a4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d51ad617a4eda7e034d8885a4db91db60080a253f3a2f5993e550c31010eedd7",
          "md5": "7cee9d4c21c0a0410a340af7e10ba646",
          "sha256": "f667faaf53ff5e4bfacff37d72b980a267ad77ff3268f01a4a4b11a17185ef34"
        },
        "downloads": -1,
        "filename": "spoonbill_framework-0.0.1a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cee9d4c21c0a0410a340af7e10ba646",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29831,
        "upload_time": "2023-01-03T22:32:26",
        "upload_time_iso_8601": "2023-01-03T22:32:26.441162Z",
        "url": "https://files.pythonhosted.org/packages/d5/1a/d617a4eda7e034d8885a4db91db60080a253f3a2f5993e550c31010eedd7/spoonbill_framework-0.0.1a5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6e04ded6928dcc9a7b605ad72bf5a6eaac7dc3d76b3a3c409e13233ce66c239",
          "md5": "01f87d99b06cc871f9830c5db2e20a0a",
          "sha256": "a2cf92abfab29d0c0ee6378d2719b6086416c987ab918d7a6668e6293f011e4b"
        },
        "downloads": -1,
        "filename": "spoonbill-framework-0.0.1a5.tar.gz",
        "has_sig": false,
        "md5_digest": "01f87d99b06cc871f9830c5db2e20a0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28610,
        "upload_time": "2023-01-03T22:32:34",
        "upload_time_iso_8601": "2023-01-03T22:32:34.140943Z",
        "url": "https://files.pythonhosted.org/packages/a6/e0/4ded6928dcc9a7b605ad72bf5a6eaac7dc3d76b3a3c409e13233ce66c239/spoonbill-framework-0.0.1a5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d51ad617a4eda7e034d8885a4db91db60080a253f3a2f5993e550c31010eedd7",
        "md5": "7cee9d4c21c0a0410a340af7e10ba646",
        "sha256": "f667faaf53ff5e4bfacff37d72b980a267ad77ff3268f01a4a4b11a17185ef34"
      },
      "downloads": -1,
      "filename": "spoonbill_framework-0.0.1a5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7cee9d4c21c0a0410a340af7e10ba646",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29831,
      "upload_time": "2023-01-03T22:32:26",
      "upload_time_iso_8601": "2023-01-03T22:32:26.441162Z",
      "url": "https://files.pythonhosted.org/packages/d5/1a/d617a4eda7e034d8885a4db91db60080a253f3a2f5993e550c31010eedd7/spoonbill_framework-0.0.1a5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6e04ded6928dcc9a7b605ad72bf5a6eaac7dc3d76b3a3c409e13233ce66c239",
        "md5": "01f87d99b06cc871f9830c5db2e20a0a",
        "sha256": "a2cf92abfab29d0c0ee6378d2719b6086416c987ab918d7a6668e6293f011e4b"
      },
      "downloads": -1,
      "filename": "spoonbill-framework-0.0.1a5.tar.gz",
      "has_sig": false,
      "md5_digest": "01f87d99b06cc871f9830c5db2e20a0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 28610,
      "upload_time": "2023-01-03T22:32:34",
      "upload_time_iso_8601": "2023-01-03T22:32:34.140943Z",
      "url": "https://files.pythonhosted.org/packages/a6/e0/4ded6928dcc9a7b605ad72bf5a6eaac7dc3d76b3a3c409e13233ce66c239/spoonbill-framework-0.0.1a5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}