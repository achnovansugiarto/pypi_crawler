{
  "info": {
    "author": "Jonathan Dunn",
    "author_email": "jonathan.dunn@canterbury.ac.nz",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "c2xg 1.0\n=============\n\nComputational Construction Grammar, or c2xg, is a Python package for learning of CxGs and working with CxGs. \n\nWhy CxG? Constructions are grammatical entities that support a straight-forward quantification of linguistic structure.\n\nThis package currently support 35 languages: ara, bul, cat, ces, dan, deu, ell, eng, est, fas, fin, fra, glg, heb, hin, hun, ind, ita, kor, lav, nld, nor, pol, por, ron, rus, slv, spa, swe, tgl, tha, tur, ukr, urd, vie\n\nNote: Only deu, eng, fra, ita, por, spa are available on pip.\n\nUsage: Initializing\n---------------------\n\nThe first task is to initialize an instance of c2xg:\n\n\t\tfrom c2xg import C2xG\n\t\tCxG = C2xG(language = eng)\n\nThe class initialization accepts the following variables:\n\n\tdata_dir (str)\t \t\tEither the path to the main data folder or, if using s3, the prefix name\n\tlanguage (str)\t \t\tCurrently supports 35 languages (listed above)\n\tnickname (str)\t \t\tIf learning a new model, this creates a new namespace for saving temp files\n\tmodel (str)\t\t\t \tIf provided, loads a specific model; otherwise loads default grammar for the language\n\tzho_split(boolean)\t \tChinese text needs to be segmented into words; if False, the input text is already split\n\tmax_words = (False, int)\tThe maximum number of words to process from a file; useful for experimenting with different amounts of training data\n\tfast_parse = (boolean)\tIf True, use the faster parser; recommended in most cases\n\nUsage: Parsing\n---------------\n\nThe Parse method takes a text or string and returns a sparse matrix with construction frequencies.\n\n\t\tvectors = CxG.parse_return(input, mode, workers)\n\nThis references the following settings:\n\n\tinput (str / list of [strs])\tThe input, either filenames or texts, specified using **mode**\n\tmode (str)\t\t\t\t\t\tfiles assumes input as filenames; lines takes a list of texts\n\tworkers (int)\t\t\t\t\tNumber of processes to use\n\nA generator function is also available.\n\n      for vector in CxG.parse_yield(input, mode, workers):\n            print(vector)\n\nThis references the following settings:\n\n    input (str / list of [strs])\tThe input, either filenames or texts, specified using **mode**\n\tmode (str)\t\t\t\t\t\tfiles assumes input as filenames; lines takes a list of texts\n\nUsage: Showing Constructions\n----------------------------\nThis function will show each construction, together with its index. The index corresponds with the column when extracting construction frequencies.\n\n\tCxG.print_constructions()\n\nThis function will read a text file and write a different text file with examples of each construction from that file. $n$ refers to the number of tokens per construction.\n\n\tCxG.print_examples(input_file, output_file, n)\n\n\nUsage: Getting Association Values (Delta P)\n-----------------------------\n\n\tassociation_csv = CxG.get_association(input_data, freq_threshold = 1, smoothing = False, lex_only = False)\n\nUsage: Learning New Grammars\n-----------------------------\nThe second task is to learn a new CxG. Most users will not need to train a new model.\n\n\t\tCxG.learn()\n\nThis references the following variables:\n\n\tnickname (str): Creates a unique namespace for saving temp files\n\tcycles (int): Number of unique folds to use; final grammars are merged across fold-specific grammars\n\tcycle_size (tuple of ints): The number of files to use for optimization data, for candidate extraction, and for background data\n\tfreq_threshold (int): The number of occurrences required before a candidate construction is considered\n\tbeam_freq_threshold (int): The frequency threshold used when searching for the best beam search parameters\n\tturn_limit (int): For the tabu search, how many turns to evaluate for making each move (x3 for the direct tabu search)\n\tworkers (int): Number of processes to use; not every stage distributes well.\n\tmdl_workers (int): Number of processes to use for evaluating MDL during construction search; uses more memory\n\tfixed_set (list): Use a fixed set of files for each step in the algorithm; useful for experimenting with different types of input\n\tno_mdl (boolean): Limit the use of the MDL metric to the beam search component\n\nEach learning fold consists of three tasks: (i) estimating association values from background data; this requires a large amount of data (e.g., 20 files); (ii) extracting candidate constructions; this requires a moderate amount of data (e.g., 5 files); (iii) evaluating potential grammars against a test set; this requires a small amount of data (e.g., 1 file or 10 mil words).\n\nThe freq_threshold is used to control the number of potential constructions to consider. It can be set at 20. The turn limit controls how far the search process can go. It can be set at 10.\n\nUsage: Comparing Grammars\n--------------\nThese section looks at some convenience functions for comparing or evaluating grammars. The first finds the fuzzy overlap between two grammars.\n\n\tfuzzy_jaccard(grammar1, grammar2, threshold = 0.70, workers = 2)\n\nThe second return the MDL for a given grammar using a given test corpus.\n\n\tget_mdl(candidates, file, workers = 2)\n\nThe third provides a method for pruning grammars using additional corpora. Constructions are slowly forgotten unless they reoccur regularly.\n\n\tforget_constructions(grammar, datasets, workers = None, threshold = 1, adjustment = 0.25, increment_size = 100000)\n\nInstallation\n--------------\n\nFor the full package:\n\n\t\tpip install git+https://github.com/jonathandunn/c2xg.git\n\nFor only deu, eng, fra, ita, por, spa:\n\n\t\tpip install c2xg\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.c2xg.io",
    "keywords": "grammar induction,syntax,cxg,unsupervised learning,natural language processing,computational linguistics,construction grammar,cognitive linguistics,usage-based grammar",
    "license": "LGPL 3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "c2xg",
    "package_url": "https://pypi.org/project/c2xg/",
    "platform": "",
    "project_url": "https://pypi.org/project/c2xg/",
    "project_urls": {
      "Homepage": "http://www.c2xg.io"
    },
    "release_url": "https://pypi.org/project/c2xg/1.0/",
    "requires_dist": [
      "clean-text",
      "cytoolz",
      "gensim",
      "numba",
      "numexpr",
      "numpy",
      "pandas",
      "scipy",
      "sklearn"
    ],
    "requires_python": "",
    "summary": "Construction Grammars for Natural Language Processing and Computational Linguistics",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10749757,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9211c73ff29ddfa0eb3c35f156e93e24fdf834c4a437020f5f530d3b10c355c5",
          "md5": "f1638a0da94a59c941ea90a9df14cb97",
          "sha256": "0bb9dabfee576065b7e45421ace638f2ce059734c81ecc9c79fcc9d8756351c6"
        },
        "downloads": -1,
        "filename": "c2xg-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1638a0da94a59c941ea90a9df14cb97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8385760,
        "upload_time": "2017-03-05T16:47:03",
        "upload_time_iso_8601": "2017-03-05T16:47:03.931804Z",
        "url": "https://files.pythonhosted.org/packages/92/11/c73ff29ddfa0eb3c35f156e93e24fdf834c4a437020f5f530d3b10c355c5/c2xg-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb8466a1287616def496f9729b5b743b9fb3d094e45992008db74c7806509452",
          "md5": "effa0dbfd9e588969800c0ef4562b0f2",
          "sha256": "40579bb62ba5643c9d6cf669461217d7f06339743c6cf9536777f783ca61fb51"
        },
        "downloads": -1,
        "filename": "c2xg-0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "effa0dbfd9e588969800c0ef4562b0f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13555036,
        "upload_time": "2017-03-18T17:57:43",
        "upload_time_iso_8601": "2017-03-18T17:57:43.769852Z",
        "url": "https://files.pythonhosted.org/packages/eb/84/66a1287616def496f9729b5b743b9fb3d094e45992008db74c7806509452/c2xg-0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d06af3818b211705279db062db9f082674e6aa4ef06866f0c317befcd608dc",
          "md5": "66f2d205b2c0ca61d78f6b95a0c5390d",
          "sha256": "1b6feffccf62b409697a6b61834b6d358ae92dbd47b9886e3862541d92855f42"
        },
        "downloads": -1,
        "filename": "c2xg-0.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66f2d205b2c0ca61d78f6b95a0c5390d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13555212,
        "upload_time": "2017-03-24T17:13:08",
        "upload_time_iso_8601": "2017-03-24T17:13:08.914672Z",
        "url": "https://files.pythonhosted.org/packages/f9/d0/6af3818b211705279db062db9f082674e6aa4ef06866f0c317befcd608dc/c2xg-0.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42b6fdacbbafab199a6f6c0446c5657a90bec47791898e9c14076411ab47102a",
          "md5": "8ea032e42aa1d135902626d19b472642",
          "sha256": "2e00281611e3f117c055cb86c26dc79098b7420f15b63494af5e7c57ebd6e294"
        },
        "downloads": -1,
        "filename": "c2xg-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ea032e42aa1d135902626d19b472642",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38442155,
        "upload_time": "2021-06-26T08:16:09",
        "upload_time_iso_8601": "2021-06-26T08:16:09.619001Z",
        "url": "https://files.pythonhosted.org/packages/42/b6/fdacbbafab199a6f6c0446c5657a90bec47791898e9c14076411ab47102a/c2xg-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42b6fdacbbafab199a6f6c0446c5657a90bec47791898e9c14076411ab47102a",
        "md5": "8ea032e42aa1d135902626d19b472642",
        "sha256": "2e00281611e3f117c055cb86c26dc79098b7420f15b63494af5e7c57ebd6e294"
      },
      "downloads": -1,
      "filename": "c2xg-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ea032e42aa1d135902626d19b472642",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 38442155,
      "upload_time": "2021-06-26T08:16:09",
      "upload_time_iso_8601": "2021-06-26T08:16:09.619001Z",
      "url": "https://files.pythonhosted.org/packages/42/b6/fdacbbafab199a6f6c0446c5657a90bec47791898e9c14076411ab47102a/c2xg-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}