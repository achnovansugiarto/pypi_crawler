{
  "info": {
    "author": "Upstride",
    "author_email": "pypi@upstride.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Upstride argument parser\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.org/UpStride/betterargparse.svg?branch=master)](https://travis-ci.org/github/UpStride/betterargparse)\n\n\nThis package provides a simple and efficient argument parser for every python projects. The idea is to define once all the arguments and then be able to parse \nthem from the command line or configuration files\n\n## Example\n\nLet's start with a simple example to demonstrate how it works :\n\nlet's create a file `app.py` containing : \n```python\nimport upstride_argparse as argparse\n\narguments = [\n    [int, \"batch_size\", 128, 'The size of batch per gpu', lambda x: x > 0],\n    [bool, \"cpu\", False, 'run on cpu'],\n    [str, 'description', '', 'description of the experiment'],\n    [float, \"lr\", 0.0001, 'learning rate', lambda x: x > 0],\n    ['list[int]', \"raw_size\", [256, 256, 3], 'raw shape of one image'],\n    ['list[str]', \"yaml_config\", [], \"config files\"]\n]\n\nconfig = argparse.parse_cmd(arguments)\nprint(config)\n```\n\nso as you can see, the arguments are defined using a standard python list containing lists of `[type, name, default, help, condition]`\n  - type can be a python type (`int`, `bool`, `str`, `float`) or a string `list[python_type]` for processing lists\n  - condition is a function called when the parameters will be parsed. if one parameter doesn't respect the condition, an exception will be raised.\n\nNow let's try to call this program\n- `python app.py` prints `{'batch_size': 128, 'cpu': False, 'description': '', 'lr': 0.0001, 'raw_size': [256, 256, 3], 'yaml_config': []}`. This dictionary contains the default configuration\n- `python app.py --cpu --lr 0.1 --description hello --raw_size 28 28 1` prints `{'batch_size': 128, 'cpu': True, 'description': 'hello', 'lr': 0.1, 'raw_size': [28, 28, 1], 'yaml_config': []}`\n\nnow lets create a yaml file `config.yml` containing :\n```yaml\nbatch_size: 16\ncpu: true\n```\n\n- `python app.py --yaml_config config.yml` prints `{'batch_size': 16, 'cpu': True, 'description': '', 'lr': 0.0001, 'raw_size': [256, 256, 3], 'yaml_config': []}`\n- `python app.py --yaml_config config.yml --cpu false` prints `{'batch_size': 16, 'cpu': False, 'description': '', 'lr': 0.0001, 'raw_size': [256, 256, 3], 'yaml_config': []}`\n\nas you can see, the command line has the priority over the configuration file\n\nIt is also possible to split the configuration between as many configuration file as you want\n\n## Namespaces\n\nFor larger project, it can become useful to define namespaces to organized the configuration. This can be done like this : \n\n```python\nimport upstride_argparse as argparse\n\narguments = [\n    [int, \"batch_size\", 128, 'The size of batch per gpu', lambda x: x > 0],\n    ['list[str]', \"yaml_config\", [], \"config files\"],\n    ['namespace', 'first_namespace', [\n        [str, 'arg1', 'hello', 'first argument'],\n        ['namespace', 'second_namespace', [\n            [bool, \"i_am_not_doing_anything\", True, ''],\n            [bool, \"nether_do_i\", False, '']\n        ]],\n    ]],\n]\n\nconfig = argparse.parse_cmd(arguments)\nprint(config)\n```\n\n- calling `python app.py` will print `{'batch_size': 128, 'yaml_config': [], 'first_namespace': {'arg1': 'hello', 'second_namespace': {'i_am_not_doing_anything': True, 'nether_do_i': False}}}`\n\nvariable from namespace can be configure from yaml config file this way :\n\n```yaml\nbatch_size: 16\nfirst_namespace:\n  arg1: world\n  second_namespace:\n    i_am_not_doing_anything: false\n    nether_do_i: true\n```\n\n- calling `python app.py --yaml_config config.yml` will print `{'batch_size': 16, 'yaml_config': [], 'first_namespace': {'arg1': 'world', 'second_namespace': {'i_am_not_doing_anything': False, 'nether_do_i': True}}}`\n\nand these variables can be setup from the command line like this : `python app.py --yaml_config config.yml --first_namespace.arg1 bob --first_namespace.second_namespace.i_am_not_doing_anything false`\n\nit will print : `{'batch_size': 16, 'yaml_config': [], 'first_namespace': {'arg1': 'bob', 'second_namespace': {'i_am_not_doing_anything': False, 'nether_do_i': True}}}`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UpStride/betterargparse",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "upstride-argparse",
    "package_url": "https://pypi.org/project/upstride-argparse/",
    "platform": "",
    "project_url": "https://pypi.org/project/upstride-argparse/",
    "project_urls": {
      "Homepage": "https://github.com/UpStride/betterargparse"
    },
    "release_url": "https://pypi.org/project/upstride-argparse/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple and efficient argument parser for every python projects",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7937564,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc782a88de5d49467e91c54ec1fcd70449145a2242cdd241d6592a155c751c7d",
          "md5": "687794de132619bcf9b58cbb193fa7b7",
          "sha256": "0ea55a0361e90620e161ac5857e7db507794a06220a3abfae9158c5d641f6430"
        },
        "downloads": -1,
        "filename": "upstride_argparse-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "687794de132619bcf9b58cbb193fa7b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5850,
        "upload_time": "2020-08-11T16:57:07",
        "upload_time_iso_8601": "2020-08-11T16:57:07.795822Z",
        "url": "https://files.pythonhosted.org/packages/cc/78/2a88de5d49467e91c54ec1fcd70449145a2242cdd241d6592a155c751c7d/upstride_argparse-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc782a88de5d49467e91c54ec1fcd70449145a2242cdd241d6592a155c751c7d",
        "md5": "687794de132619bcf9b58cbb193fa7b7",
        "sha256": "0ea55a0361e90620e161ac5857e7db507794a06220a3abfae9158c5d641f6430"
      },
      "downloads": -1,
      "filename": "upstride_argparse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "687794de132619bcf9b58cbb193fa7b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5850,
      "upload_time": "2020-08-11T16:57:07",
      "upload_time_iso_8601": "2020-08-11T16:57:07.795822Z",
      "url": "https://files.pythonhosted.org/packages/cc/78/2a88de5d49467e91c54ec1fcd70449145a2242cdd241d6592a155c751c7d/upstride_argparse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}