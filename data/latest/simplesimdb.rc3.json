{
  "info": {
    "author": "Matthias Wiesenberger",
    "author_email": "mattwi@fysik.dtu.dk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# A lightweight simulation data creator and database manager\nA python module for creation and management of simple simulation data.\nEssentially, a very basic database manager that creates its own data.\n\n\n[![LICENSE : MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Installation\n> You need python3 to install this module\n\nThe simplest way is to install from the python package index [pypi](https://pypi.org/) via the package manager [pip](https://pip.pypa.io/en/stable/):\n```bash\npython3 -m pip install simplesimdb\n```\n\nTo install from github you have to clone the repository and then use the package manager [pip](https://pip.pypa.io/en/stable/).\n\n```bash\ngit clone https://github.com/mwiesenberger/simplesimdb\ncd path/to/simplesimdb\npip install -e . # editable installation of the module\n# ... if asked, cancel all password prompts ...\npytest . # run the unittests\n```\n\n## Usage\nUse this module if you have (i) an executable (the simulation code) that takes a set of input parameters\nand generates a single output file and (ii) you want to explore a large region of the\navailable parameter space ( large here means more than you want to do by hand\nbut probably less than millions say).\nIts tasks are\n - generate json input files from given python dictioniaries and assign unique\n   filenames\n - call the user provided executable on the input files to create the\n   corresponding output file\n - select existing output files from the data folder based on a given input\n - display all input parameters for which output data exists in the folder\n\n### A first example\n\nHere is an example of how to use the module\n\n```python\n### example.py ###\nimport json\nimport simplesimdb\nimport yaml\n\ndb = simplesimdb.Manager(\n    directory = 'ds_data', # where to store the generated data\n    filetype='yaml', # file-ending of the output files\n    executable='./execute.sh' # the program to execute to generate data\n) \n\n# Let us generate an inputfile for our simulation\ninputfile = { \"n\": 3, \"Nx\" : 20, \"Ny\" : 20, \"Nz\" : 20,\n              \"mx\" : 10, \"my\" : 10 }\n\n# run a simulation with the specified input\n# ./execute.sh ds_data/in.json ds_data/out.yaml\noutfile = db.create( inputfile)\n# now open and read the created output\nwith open( outfile) as f:\n    output = yaml.full_load(f)\n    print (json.dumps(output, indent=4))\n\n# list all existing inputfiles in the directory\ncontent = db.table() \n# the list of inputfiles is searchable:\nfound = list( filter( lambda entry : ( entry[\"mx\"] == 10), content) )\n# select a simulation if it exists\noutfile = db.select( found[0]) \n# delete all generated data in directory and the directory itself\ndb.delete_all() \n```\nwhere `execute.sh` is an executable that takes `directory/hashid.json` as input and creates the file `directory/hashid.yaml`\nIn this example `execute.sh` parses the json input into command line arguments to a Feltor code and redirect its output into the yaml file.\n\n```bash\n### execute.sh ###\n#!/bin/bash\n\n: ${FELTOR_PATH:=\"../feltor\"}\n\n# Feltor's ds_t requires input parameters from the command line\n# so we parse the json string using jq\ncat $1 | jq '.n, .Nx, .Ny, .Nz, .mx, .my' | $FELTOR_PATH/inc/geometries/ds_t > $2\n```\n### Human readable names\nSometimes, if the number of simulations to run is small a human readable naming\nscheme is preferable over the unintuitive sha1 file names. The first\nidea would be to name the data directory in a descriptive way. If this\nis still not enough, the `create` function allows to use a user given name\ninstead of the sha1 filename. In order for this to work an additional file\n`simplesimdb.json` will be created where the map from sha1 to user name is stored.\nFor example the above example reads\n\n```python\n### example.py ###\nimport json\nimport simplesimdb\nimport yaml\n\ndb = simplesimdb.Manager( directory = 'ds_data', filetype='yaml', executable='./execute.sh')\n# Let us generate an inputfile for our simulation\ninputfile = { \"n\": 3, \"Nx\" : 20, \"Ny\" : 20, \"Nz\" : 20,\n              \"mx\" : 10, \"my\" : 10 }\n# Now we choose the name \"test\" for this simulation\noutfile = db.create( inputfile, name = \"test\")\n```\nIf we now inspect the `ds_data` folder we will find:\n```bash\ncd ds_data\nls\n# 'simplesimdb.json' 'test.json' 'test.yaml'\n```\nThe names of the input and output files are now given by `test` and we find the\nadditional `simplesimddb.json`, where the naming schemes are stored, as well. Naming simulations also works on a cluster and when restarting simulations as is described in the following chapters.\n\nThe following caveats need to be considered:\n\n- Simulations cannot be renamed except by deleting and resimulating\n- A name cannot be used more than once\n- when copying data from the repository the \"simplesimdb.json\" file must also be copied so that simplesimdb can recognize the names in the new folder\n\n\n\n### Running on a cluster\n\nIn many cases simulations are too expensive to run on a local machine. In this case it is mandatory that simulations run on a cluster. The data could then be transfered back to  a local machine where the data exploration with for example a jupyter notebook takes place. The difficulty here is that data is created asynchronously with job submission, i.e. simplesimdb considers the simulation finished when the executable returns even if it just submitted a job to the scheduler and no data was created. Therefore the generation and analysis of data must be separate in this case and the human operator must decide when it is safe to access data and all jobs are finished. \n\nWith simplesimdb the recommended way of achieving this scenario is: \n\n(i) a `generate_data.py` file on the cluster\n\n```python\n### generate_data.py ###\nimport json\nimport simplesimdb as simplesim\n\nm = simplesim.Manager( directory='data', executable='./execute.sh', filetype='nc')\n\ninputfile = generate_input(  ... )\nm.create(inputfile)\n```\n\n(ii) the `execute.sh` script in this case has to submit the jobs to the job queue (here with slurm):\n\n```bash\n### execute.sh ###\n#!/bin/bash\n\nFILE=\"${2%.*}\" # outfilename without extension\nJOBNAME=${FILE: -8} # last 8 characters \n\n# help simplesimdb recognize that data is being generated\ntouch $2\n\n# $@ forward all arguments\nsbatch -o ${FILE}.out -J $JOBNAME submit.sh \"$@\"\n```\n\nWe touch the output file in order to avoid mistakes where we call the create member twice such that it submits the job twice when the first job is still waiting for resources. This is because simplesimdb checks for the existence of the output file when it decides whether or not a simulation needs to be run in the create member. \n\n(iii) the `submit.sh` script is a template job script for all simulations\n\n```bash\n### submit.sh ###\n#!/bin/bash\n\n#SBATCH -N 1 -n 1 --ntasks-per-node=1\n#SBATCH --gres=gpu:1\n#SBATCH --partition=ppppppppp\n#SBATCH --account=xxxxx_xxxxx\n#SBATCH --time=8:00:00\n\n: ${FELTOR_PATH:=\"../feltor\"}\n\n$FELTOR_PATH/src/reco2D/reconnection_hpc $1 $2\n```\n\nThere are a few caveats to this workflow:\n\n- simplesimdb has no way of knowing when a simulation is pending, running, finished or produced an error. The `execute.sh` returns if the job is successfully submitted\n- in this example all jobs run on exactly the same hardware resources since all use the same job template submit script. \n\n### Restarting simulations\n\nSometimes simulation outputs cannot be created in a single run (due to file size, time limitations, etc.) but rather a simulation is partitioned (in time) into a sequential number of separate smaller runs. Correspondingly each run sequentially generates and stores only a partition of the entire output file. Each run restarts the simulation with the result of the previous run. The Manager solves this problem via the optional simulation number n in its member functions. For n>0 create will pass the result of the previous simulation as a third input to the executable.\n\nSee the following example to see how to create and subsequently iterate through restarted simulations\n\n```python\n### restart_example.py ###\nimport json\nimport simplesimdb as simplesim\n\nm = simplesim.Manager( directory='data', executable='./execute.sh', filetype='txt')\n# delete content of previous simulation run\nm.delete_all()\n# !!! after delete_all() we must reset the directory: !!!\nm.directory = 'data'\n \ninputfile1 = { \"Hello\" : \"World\"}\ninputfile2 = { \"Hello\" : \"User\"}\n# generate 3 data files for each input:\nfor n in range( 0,3) :\n    # if n == 0 : ./execute.sh data/in.json data/out_0.txt\n    # if n  > 0 : ./execute.sh data/in.json data/out_n.txt data/out_(n-1).txt \n    m.create( inputfile1, n)\n    m.create( inputfile2, n)\n\n# Now search for a specific input file in the content\ncontent = m.table()\nfound = list( filter( lambda entry : ( entry[\"Hello\"] == \"User\"), content) )\nprint( found[0])\n# Count all corresponding simulations\nnumber = m.count( found[0])\nprint( \"Number of simulations found:\", number)\n# and finally loop over and read each of the found simulations\nfor n in range( 0, number):\n    f = open( m.outfile( found[0], n), \"r\")\n    print ( \"Contents of file\", n )\n    print ( f.read())\n```\n\nThe `execute.sh` script in our example does not do much\n\n```bash\n### execute.sh ###\n#!/bin/bash\n\nif [ $# -eq 2 ] # note the whitespaces\nthen\n    # do something for first simulation\n    cat $1 > $2\nelse\n    # do something else for restart\n    echo \"!!!!!RESTART!!!!!\" > $2\n    cat $3 >> $2\nfi\n```\n\n### Restarting on a cluster\n\nOn the cluster we can also use a combination of simplesimdb a bash `execute.sh` script that submits a sample `submit.sh` script. The difficulty is that we do not have the data available immediately and that the submit script needs to find out if previous jobs are running such that it has to wait on.\n\nLet us first write a generate script `generate.py` (actually this looks the same as before. In fact simplesimdb does not know anything about *how* the data is generated by the executable)\n\n```python\n### generate.py ###\nimport json\nimport simplesimdb as simplesim\n\nm = simplesim.Manager( directory='data', executable='./execute.sh', filetype='txt')\n# delete content of previous simulation run\nm.delete_all()\n# after delete_all() we must reset the directory\nm.directory = 'data'\n\ninputfile1 = { \"Hello\" : \"World\"}\ninputfile2 = { \"Hello\" : \"User\"}\n\nfor n in range( 0,3) :\n    # if n == 0 : ./execute.sh data/in.json data/out_0.txt\n    # if n  > 0 : ./execute.sh data/in.json data/out_n.txt data/out_(n-1).txt \n    m.create( inputfile1, n)\n    m.create( inputfile2, n)\n```\n\nNext we look at `execute.sh`\n\n```bash\n### execute.sh ###\n#!/bin/bash\n\nFILE=\"${2%.*}\" # outfilename without extension\nJOBNAME=${FILE: -8} # last 8 characters \n\n# help simplesimdb recognize that data is being generated\ntouch $2\n\nif [ $# -eq 2 ] # note the whitespaces\nthen\n    # $@ forwards all arguments\n    sbatch -o ${FILE}.out -J $JOBNAME  submit.sh \"$@\"\nelse\n    # do something else for restart\n    PREVIOUS=\"${3%.*}\" # previous outfile without extension\n    PREVNAME=${PREVIOUS: -8} # last 8 characters\n    # check if a job with that name exists\n    JOBID=$(squeue --me --noheader --format=\"%i\" --name \"$PREVNAME\")\n    # --me only display owned jobs\n    # --noheader suppress the header\n    # --format=\"%i\" only show the jobid\n    # --name only show jobs with specified name\n    if [ -z $JOBID]\n    then\n        sbatch -o ${FILE}.out -J $JOBNAME  submit.sh \"$@\"\n    else\n        sbatch --dependency=afterany:${JOBID} -o ${FILE}.out \\\n               -J $JOBNAME submit.sh \"$@\"\n    fi\nfi\n```\n\nThis script checks if it is called with 2 or 3 parameters and if it is called with 3 it checks if a job for the previous output already exists. If so it submits a job with a dependency.\n\nThe `submit.sh` script in this example does not much:\n\n```bash\n### submit.sh ###\n#!/bin/bash\n\n#SBATCH -N 1 -n 1 --ntasks-per-node=1\n#SBATCH --partition=pppppppp\n#SBATCH --account=xxxx_xxxx\n#SBATCH --time=0:10:00 # 24 hours is maximum\n\n# Give us a chance to check what jobs are submitted\nsleep 10\n\nif [ $# -eq 2 ] # note the whitespaces\nthen\n    # do something for first simulation\n    cat $1 > $2\nelse\n    # do something else for restart\n    echo \"!!!!!RESTART!!!!!\"  > $2\n    cat $3 >> $2\nfi\n```\n\nFinally, when the jobs ran through we can analyse the data\n\n```python\n### analyse.py ###\nimport json\nimport simplesimdb as simplesim\n\nm = simplesim.Manager( directory='data', executable='./execute.sh', filetype='txt')\n\ncontent = m.table()\nfound = list( filter( lambda entry : ( entry[\"Hello\"] == \"User\"), content) )\nprint( found[0])\nnumber = m.count( found[0])\nprint( \"Number of simulations found:\", number)\nfor n in range( 0, number):\n    f = open( m.outfile( found[0], n), \"r\")\n    print ( \"Contents of file\", n )\n    print ( f.read())\n```\n\nThe result is the same as in the previous section\n\n### Diagnostics\n\nSometimes, for very large simulations, we want to run post-processing diagnostics that is also written in another language. This post-processing takes the form of `./diag output.nc diag_output.nc`\n\nIn order to integrate well with our `Manager` class we suggest to keep simulation data and diagnostics data in separate folders (for example \"data\" and \"diag\"). Then, create a second Manager on the \"diag\" folder and make the `execute.sh` script (i) ignore the input and restart files and (ii) in the output file replace the \"diag\" folder with the original \"data\" folder and use that one as input:\n\n```bash\n### diag.sh ###\n#!/bin/bash\n\n: ${FELTOR_PATH:=\"../feltor\"}\n# we change the diag folder to data (assuming these are the folder names in use)\ninput=$(echo $2 | sed -e 's/diag/data/')\n# ignore $1 (the input.json) and $3 (the restart file)\n$FELTOR_PATH/src/feltor/feltordiag $input $2\n```\n\nIn python we can then create and search diagnostic files by input parameters and simulation number as usual:\n\n```python\n### diagnose.py ###\nimport json\nimport simplesimdb as simplesim\n\ndata = simplesim.Manager( directory='data', filetype='nc')\ndiag = simplesim.Manager( directory=\"diag\", filetype=\"nc\", executable=\"./diag.sh\")\ncontent = data.table()\nfound = list( filter( lambda entry : ( entry[\"Hello\"] == \"World\"), content) )\nnumber = data.count( found[0])\nprint( \"Number of simulations found:\", number)\nfor n in range( 0, number):\n    # Simulation data\n    outfile = data.select( found[0], n)\n    # corresponding diagnostics\n    diagfile = diag.create( found[0], n)\n    f = open( diagfile, \"r\")\n    # ... do stuff\n```\n\n### Repeater\n\nSometimes we do not want to store simulation data on disc and it is enough to simply store temporary files. This can for example happen when simulations run very quickly and data should be created \"on demand\". For such a case we have the `Repeater` class, which simply overwrites the input and output for each new simulation:\n\n```bash\n### geometry_diag.sh ###\n#!/bin/bash\n\n: ${FELTOR_PATH:=\"../feltor\"}\nmake -C $FELTOR_PATH/inc/geometries geometry_diag device=omp\n\nrm -f $2 # in case the file is opened elsewhere ...\n$FELTOR_PATH/inc/geometries/geometry_diag $1 $2\n```\n\n```python\n### calibrate.py ###\n\nimport json\nimport simplesimdb as simplesim\n\nrep = simplesim.Repeater( \"./execute.sh\", \"temp.json\", \"temp.nc\")\ninputdata={\"Hello\": \"World\"}\nrep.run( inputdata, error=\"display\", stdout=\"ignore\")\n# ... do something with \"temp.nc\"\ninputdata={\"Hello\": \"User\"}\n# Overwrite both \"temp.json\" and \"temp.nc\"\nrep.run( inputdata, error=\"display\", stdout=\"ignore\")\n# ... do something else with \"temp.nc\"\nrep.clean()\n```\n\nThe trick to get a diagnostics to work is similar as above\n```python\n### short-diagnose.py ###\n\nimport json\nimport simplesimdb as simplesim\n\n# by naming it data and diag we get the diag.sh from above to work\nrep  = simplesim.Repeater( \"./execute.sh\", \"data.json\", \"data.nc\")\ndiag = simplesim.Repeater( \"./diag.sh\", \"diag.json\", \"diag.nc\")\ninputdata={\"Hello\": \"World\"}\nrep.run( inputdata, error=\"display\", stdout=\"ignore\")\n# ... do something with \"data.nc\"\ndiag.run( inputdata)\n# ... do something with \"diag.nc\"\nrep.clean()\ndiag.clean()\n```\n\n## Caveats\n\n- Cannot manage simulations with more than one input file\n  (but you can write a shell script that simple adds the second input file)\n- Cannot manage simulations with more than one output file\n   (again, with a script you can add a second output file)\n- Cannot manage existing simulation files that do not have names assigned by the module\n    (You can register names manually with the `register` function)\n- Do not capture the stdout and stderr streams of the executable.\n    (It is recommended that you redirect these streams into a file output yourself if you need it)\n- simplesimdb considers a simulation successful if the output file exists. It cannot realize whether the content of the file is sane or corrupt, or whether there is any content at all for that matter\n\n## Why not just use an existing database management software like SQL\n\n - Relational databases are notoriously unsuited for scientific simulations so\n   SQL is mostly not an option in the scientific community (in python we would\n   use pandas anyway)\n - Search methods that DBMS offer are offered by python for dictionaries as\n   well (especially if they are converted to tables in pandas)\n - There is an additional overhead of setting up and running a databaser server\n - When doing a parameter study you do not deal with millions of entries but a\n   only a few hundred at best so a DBMS might just be overkill\n - There are NoSQL database managers like for example a document (json) manager\n   like MongoDB that can  manage large files (videos, images, PDFs, etc.) along\n   with supporting information (metadata) that fits naturally into JSON\n   documents, but\n    - Netcdf (or other output) files do not really map nicely into the mongodb\n   data model since files larger than 16 MB require another FileGS server to be\n   run\n    - If netcdf files are stored by the DB manager how do we get access to it\n   through other external programs like for example paraview?\n    - If json files are hidden by the database manager how do we use them as input\n   to run an executable to generate the output file?\n\n## Contributions\n\nContributions are welcome.\n## Authors\n\nMatthias Wiesenberger\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwiesenberger/simplesimdb",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplesimdb",
    "package_url": "https://pypi.org/project/simplesimdb/",
    "platform": null,
    "project_url": "https://pypi.org/project/simplesimdb/",
    "project_urls": {
      "Homepage": "https://github.com/mwiesenberger/simplesimdb"
    },
    "release_url": "https://pypi.org/project/simplesimdb/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Create, access and manage simple simulation data",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15241457,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e399931095a387f4da750aeadfac531f6755dc266e5ee246d2aec9d52213226",
          "md5": "2d52f47eb8b4e6fdf25fa68498ee6a00",
          "sha256": "6eb0a414b02773a6b2a4aceaf55e597de221a3e340db4e5f3fe668b00fb82c06"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d52f47eb8b4e6fdf25fa68498ee6a00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7691,
        "upload_time": "2021-11-16T16:55:40",
        "upload_time_iso_8601": "2021-11-16T16:55:40.473435Z",
        "url": "https://files.pythonhosted.org/packages/5e/39/9931095a387f4da750aeadfac531f6755dc266e5ee246d2aec9d52213226/simplesimdb-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54f98b4abb129e5b8c815263242f7ea86c56897e65b2dfa4e29ba9298e75bc5c",
          "md5": "28c6fb7bcf81a95ed9e031d8f0e18085",
          "sha256": "5546cb8595e224074ffd77b6a109f9c6e81b7d016f3d3fe5051aa7de7bf344e2"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28c6fb7bcf81a95ed9e031d8f0e18085",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8352,
        "upload_time": "2021-11-16T16:55:41",
        "upload_time_iso_8601": "2021-11-16T16:55:41.886281Z",
        "url": "https://files.pythonhosted.org/packages/54/f9/8b4abb129e5b8c815263242f7ea86c56897e65b2dfa4e29ba9298e75bc5c/simplesimdb-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fe2dc27402bac7a7d7123f0d5b41f852c2489609ec1adacf0fa0c2663e5f79e",
          "md5": "a4190243be851796e117ccf5fc5c17db",
          "sha256": "11b553039437fabf83370260c788c16f98ef14acec4dfb2898a4465e3f82fdcf"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4190243be851796e117ccf5fc5c17db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12378,
        "upload_time": "2021-12-13T21:57:29",
        "upload_time_iso_8601": "2021-12-13T21:57:29.655924Z",
        "url": "https://files.pythonhosted.org/packages/8f/e2/dc27402bac7a7d7123f0d5b41f852c2489609ec1adacf0fa0c2663e5f79e/simplesimdb-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "405b663820e1f94cf63c329bf584e78516733ada2c140272e14720c64aaa14a1",
          "md5": "6949ff5218215d77c1e85cfdbfac6862",
          "sha256": "8fdd8e787fc34787504573a73504d25d513426e25c8b2ae650897e68215319df"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6949ff5218215d77c1e85cfdbfac6862",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12769,
        "upload_time": "2021-12-13T21:57:32",
        "upload_time_iso_8601": "2021-12-13T21:57:32.924202Z",
        "url": "https://files.pythonhosted.org/packages/40/5b/663820e1f94cf63c329bf584e78516733ada2c140272e14720c64aaa14a1/simplesimdb-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc7d22f6a85d64a9a24143cc821f290fd74acb6901b1714d2ebc1449a175c84",
          "md5": "a92c0969efee6326d3b8725649ef9da5",
          "sha256": "ba7aad3ff5fd13e289351662e3fd50be12baa85e8fbe162714da57f3cbb48eab"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a92c0969efee6326d3b8725649ef9da5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14196,
        "upload_time": "2022-09-28T13:14:58",
        "upload_time_iso_8601": "2022-09-28T13:14:58.768739Z",
        "url": "https://files.pythonhosted.org/packages/8b/c7/d22f6a85d64a9a24143cc821f290fd74acb6901b1714d2ebc1449a175c84/simplesimdb-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14d980b86230f63b702719bbd58d0cc60680f9ce010fc8ab1f1784259dcd04f",
          "md5": "b621249445ea09a69c9e1d51cb0347a2",
          "sha256": "21bff4a619cca0f9bcf504e03d4fae2c0247cd30d81ce46aaa2d90346302deba"
        },
        "downloads": -1,
        "filename": "simplesimdb-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b621249445ea09a69c9e1d51cb0347a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14052,
        "upload_time": "2022-09-28T13:15:01",
        "upload_time_iso_8601": "2022-09-28T13:15:01.021242Z",
        "url": "https://files.pythonhosted.org/packages/d1/4d/980b86230f63b702719bbd58d0cc60680f9ce010fc8ab1f1784259dcd04f/simplesimdb-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bc7d22f6a85d64a9a24143cc821f290fd74acb6901b1714d2ebc1449a175c84",
        "md5": "a92c0969efee6326d3b8725649ef9da5",
        "sha256": "ba7aad3ff5fd13e289351662e3fd50be12baa85e8fbe162714da57f3cbb48eab"
      },
      "downloads": -1,
      "filename": "simplesimdb-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a92c0969efee6326d3b8725649ef9da5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14196,
      "upload_time": "2022-09-28T13:14:58",
      "upload_time_iso_8601": "2022-09-28T13:14:58.768739Z",
      "url": "https://files.pythonhosted.org/packages/8b/c7/d22f6a85d64a9a24143cc821f290fd74acb6901b1714d2ebc1449a175c84/simplesimdb-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d14d980b86230f63b702719bbd58d0cc60680f9ce010fc8ab1f1784259dcd04f",
        "md5": "b621249445ea09a69c9e1d51cb0347a2",
        "sha256": "21bff4a619cca0f9bcf504e03d4fae2c0247cd30d81ce46aaa2d90346302deba"
      },
      "downloads": -1,
      "filename": "simplesimdb-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b621249445ea09a69c9e1d51cb0347a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14052,
      "upload_time": "2022-09-28T13:15:01",
      "upload_time_iso_8601": "2022-09-28T13:15:01.021242Z",
      "url": "https://files.pythonhosted.org/packages/d1/4d/980b86230f63b702719bbd58d0cc60680f9ce010fc8ab1f1784259dcd04f/simplesimdb-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}