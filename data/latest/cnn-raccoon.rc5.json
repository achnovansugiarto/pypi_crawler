{
  "info": {
    "author": "Luka Anicin",
    "author_email": "luka.anicin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"images/readme.css\" />\n\n# CNN Raccoon v0.9.5\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/lucko515/cnn-raccoon/master/cnn_raccoon/static/images/ui/cnn_logo.png\">\n</p>\n\n[![Downloads](https://pepy.tech/badge/cnn-raccoon)](https://pepy.tech/project/cnn-raccoon)\n   \n<h4 style=\"text-align: center;\">Create interactive dashboards for your Convolutional Neural Networks (CNNs) with a single line of code!</h4>\n\n---\n__CNN Raccoon__ helps you with inspecting what's going on inside your Convolutional Neural Networks in a visual way that's easy to understand.\nOh! Did I mention that you don't need to change your code at all? And that you can do all of this on a single line of Python code?\n\n\n## How to use it?\n\n### TensorFlow mode\n\nWhen using CNN Raccoon for a TensorFlow (Keras) based model, you'll implement your model in the same way as before. \nTo load images from your dataset into CNN Raccoon, convert them to `np.array` object.\nCheck an example below for the `CIFAR10` dataset. \n\n```python\nmodel = tf.keras.models.Sequential([ ... ])\nmodel.compile(...)\n# You define and compile model in the same way\n\n# Let's use Cifar-10 for this example, but can be any dataset\nfrom tensorflow.keras.datasets import cifar10\n\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n\n# CNN Raccoon magic!\nfrom cnn_raccoon import inspector\n\n# In a single line of code send your model to the Inspector\ninspector(model=model, images=X_train[:10], number_of_classes=10, engine=\"keras\")\n```\n\n![](images/kmeans-vt.gif)\n\n### PyTorch mode\n\nIf you decide to use CNN Raccoon for your PyTorch model, you'll implement your model in the same way as before. \nTo load images from your dataset into CNN Raccoon, convert them to the `PyTorch.Variable` object.\nThe best way to achieve this is by using PyTorch's dataset loader.\nCheck an example below for the `CIFAR10` dataset. \n\n```python\n# For PyTorch you define the model in the same way as before\nmodel = Net()\n\n# Load dataset using data loaders\ntransform = transforms.Compose(\n    [ transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n                                        download=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n                                          shuffle=True, num_workers=2)\ndataiter = iter(trainloader)\nimages, labels = dataiter.next()\n\n# CNN Raccoon magic!\nfrom cnn_raccoon import inspector\n\n# In a single line of code send your model to the Inspector\ninspector(model=model, images=images, number_of_classes=10, engine=\"keras\")\n```\n\n![](images/kmeans-vt.gif)\n\n\n### Interactive network graph\n\nThis library generates an interactive graph of your CNN directly in a browser. This graph allows you to click and inspect each layer inside your model.\n\n\n### Weights inspector\n\nVisualization of each Convolutional filter from your network\n\n![](images/th.gif)\n\n\n### GradCam\n\nBased on the paper [Grad-CAM: Visual Explanations from Deep Networks\nvia Gradient-based Localization\n](https://arxiv.org/pdf/1610.02391.pdf).\n\nTo learn more about GradCam and Class Activation maps I do suggest reading through [this post](https://towardsdatascience.com/interpretability-in-deep-learning-with-w-b-cam-and-gradcam-45ba5296a58a). \n\n\n![](images/inter-q.png)\n\n### Siliency Maps\n\nBased on the paper [Deep Inside Convolutional Networks: Visualising\nImage Classification Models and Saliency Maps\n](https://arxiv.org/pdf/1312.6034.pdf).\n\nTo learn more about Saliency Maps I do suggest reading through [this post](https://analyticsindiamag.com/what-are-saliency-maps-in-deep-learning/). \n\n\n![](images/sklearn.gif)\n\n\n## Installation\n\n### Installation with `pip`\n\nYou can install CNN Raccoon directly from the PyPi repository using `pip` (or `pip3`): \n\n```bash\npip install cnn-raccoon\n```\n\n### Manual installation\n\nIf you prefer to install it from source:\n\n1. Clone this repository\n\n```bash\ngit clone https://github.com/lucko515/cnn-raccoon\n```\n\n2. Go to the library folder and run\n\n```bash\npip install .\n```\n\n### Requirements\n\n#### PyTorch version \n\nInstall all requirements from `requirements.txt` file\n\n`pip install -r requirements.txt`\n\nAfter installing base, requirements make sure you have PyTorch `>1.5.0` version.\nHere is the PyTorch installation guide:\nhttps://pytorch.org/get-started/locally/\n\n#### TensorFlow version\n\nInstall all requirements from `requirements.txt` file\n\n`pip install -r requirements.txt`\n\nAfter installing base, requirements make sure you have TensorFlow (w/ Keras API) `>2.0.0` version.\nHere is the TensorFlow (w/ Keras API) installation guide:\nhttps://www.tensorflow.org/install\n\n## TODO\n\nIf you want to contribute to the CNN Raccoon, here is what's on the TODO list:\n\n- [ ] Silency Map for the __TensorFlow__ mode\n- [ ] Make dashboard responsive on smaller screens (< 1100px)\n- [ ] Interactive CNN Builder\n    - [ ] Drag n Drop network builder\n\n## Contact\n\nAdd me on [LinkedIn](https://www.linkedin.com/in/luka-anicin/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lucko515/cnn-raccoon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cnn-raccoon",
    "package_url": "https://pypi.org/project/cnn-raccoon/",
    "platform": "",
    "project_url": "https://pypi.org/project/cnn-raccoon/",
    "project_urls": {
      "Homepage": "https://github.com/lucko515/cnn-raccoon"
    },
    "release_url": "https://pypi.org/project/cnn-raccoon/0.9.5/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Create interactive dashboards for your Convolutional Neural Networks (CNNs) with a single line of code!",
    "version": "0.9.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9079656,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc134e8ac6b0ff4d828a70108448bae51b1ae3ac55de1eaa818c890f65c9a21",
          "md5": "2b00b2b29700c9627302ad73e1bd174d",
          "sha256": "a5d32887f81087664aee1119d82b8c873e5f4bc98e7a32f58b883f07aea2983c"
        },
        "downloads": -1,
        "filename": "cnn-raccoon-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2b00b2b29700c9627302ad73e1bd174d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7297,
        "upload_time": "2020-10-12T10:23:35",
        "upload_time_iso_8601": "2020-10-12T10:23:35.081507Z",
        "url": "https://files.pythonhosted.org/packages/5d/c1/34e8ac6b0ff4d828a70108448bae51b1ae3ac55de1eaa818c890f65c9a21/cnn-raccoon-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff3cb2dfa20293e6077ee6f5117848d7df63f7ec8ccd934fb212df943fedaea9",
          "md5": "701798b41d88c0f6d3cc0053cfa88758",
          "sha256": "8f095486a2cba0f9ef67534d0ae833faab78ff75b7401a929c9824500e108b37"
        },
        "downloads": -1,
        "filename": "cnn-raccoon-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "701798b41d88c0f6d3cc0053cfa88758",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 90666,
        "upload_time": "2020-10-12T12:04:13",
        "upload_time_iso_8601": "2020-10-12T12:04:13.855659Z",
        "url": "https://files.pythonhosted.org/packages/ff/3c/b2dfa20293e6077ee6f5117848d7df63f7ec8ccd934fb212df943fedaea9/cnn-raccoon-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b446dfd2dcb5283a6ffeb5c431bfa9167902f26515250a5b431388914ce65ce",
          "md5": "23dd970688d37af024774505fd3cf3bf",
          "sha256": "d3a2fabcb174007aea90aa7eb63e557f66f69e9c3384e12f9e97879297e963b6"
        },
        "downloads": -1,
        "filename": "cnn-raccoon-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "23dd970688d37af024774505fd3cf3bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 90671,
        "upload_time": "2020-10-12T12:19:59",
        "upload_time_iso_8601": "2020-10-12T12:19:59.032053Z",
        "url": "https://files.pythonhosted.org/packages/0b/44/6dfd2dcb5283a6ffeb5c431bfa9167902f26515250a5b431388914ce65ce/cnn-raccoon-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5422ecdf0acfb5d7b2cf7a4db9a60ae478ec68109a49241b1255f798e5c0e78",
          "md5": "322df242b10c5a6bb357a4c3876fb756",
          "sha256": "1867edc555ce4595483b317b276104458f604c293acc9c6c54286d488c1a7657"
        },
        "downloads": -1,
        "filename": "cnn-raccoon-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "322df242b10c5a6bb357a4c3876fb756",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5344573,
        "upload_time": "2020-10-14T22:43:01",
        "upload_time_iso_8601": "2020-10-14T22:43:01.139487Z",
        "url": "https://files.pythonhosted.org/packages/b5/42/2ecdf0acfb5d7b2cf7a4db9a60ae478ec68109a49241b1255f798e5c0e78/cnn-raccoon-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d7949bf1777329c0e5ca8f8ba66e5c57ff0ccf1fdad2fea0556d15f5bf90f06",
          "md5": "889b453fa845f22fc8751b672fbece66",
          "sha256": "73afac40ecf575b560ab60495c5de813fea2143bf36271b5533bd0c38475114a"
        },
        "downloads": -1,
        "filename": "cnn-raccoon-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "889b453fa845f22fc8751b672fbece66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 530254,
        "upload_time": "2021-01-07T20:14:16",
        "upload_time_iso_8601": "2021-01-07T20:14:16.448467Z",
        "url": "https://files.pythonhosted.org/packages/0d/79/49bf1777329c0e5ca8f8ba66e5c57ff0ccf1fdad2fea0556d15f5bf90f06/cnn-raccoon-0.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d7949bf1777329c0e5ca8f8ba66e5c57ff0ccf1fdad2fea0556d15f5bf90f06",
        "md5": "889b453fa845f22fc8751b672fbece66",
        "sha256": "73afac40ecf575b560ab60495c5de813fea2143bf36271b5533bd0c38475114a"
      },
      "downloads": -1,
      "filename": "cnn-raccoon-0.9.5.tar.gz",
      "has_sig": false,
      "md5_digest": "889b453fa845f22fc8751b672fbece66",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 530254,
      "upload_time": "2021-01-07T20:14:16",
      "upload_time_iso_8601": "2021-01-07T20:14:16.448467Z",
      "url": "https://files.pythonhosted.org/packages/0d/79/49bf1777329c0e5ca8f8ba66e5c57ff0ccf1fdad2fea0556d15f5bf90f06/cnn-raccoon-0.9.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}