{
  "info": {
    "author": "Gerben Beintema",
    "author_email": "g.i.beintema@tue.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n## cool_linear_solver: An easy going (contrained) linear solver with sparse methods and minimal effort\n \nusage:\n\n```python\nfrom cool_linear_solver import Variable, System_of_linear_eqs\n\nT = Variable(name='T')\nprint(T.coefs)\nprint(T)\neq1 = T + T + T + T[1]   + 1*T[3.5]==1\neq2 = T + T     + T[1]   - 4*T[3.5]==4\neq3 = T         + T[1]/10+ 0*T[3.5]==-10.5\nprint(eq1)\nprint(eq2)\nprint(eq3)\nsys = System_of_linear_eqs()\nsys.add_equation(eq1)\nsys.add_equation(eq2)\nsys.add_equation(eq3) #or use sys.add_equations([eq1,eq2,eq3]) or even `sys = quicksolver([eq1,eq2,eq3])`\nsys.solve() #solve using the pushed equations\nprint('T=',sys[T]) #evaluated T on the solution\nprint('T[1]=',sys[T[1]])\nprint('T[3.5]=',sys[T[3.5]])\n# print('T[2.5]=',sys[T[2.5]]) #this will throw an error for it was not present in the source equations\nprint('eq1=',sys[eq1]) #you can also evaluate expressions\n```\nAs can be seen you can use non-integer indexes and the notation is quite simple.\n\n### Heat Equation Solving example\n\nIt uses a sparse solver so you can used it as a PDE solver such as solving the heat equation\n\n```python\nimport numpy as np\nN = 200 #creates and 200**2 by 200**2 sparse matrix\nNy = Nx = N\ndx, dy = 1/(Nx-1), 1/(Ny-1)\nyar = np.linspace(0,1,num=Ny)\nxar = np.linspace(0,1,num=Nx)\n\neqs = System_of_linear_eqs()\nT = Variable(name='T')\n\nfor yi in range(Ny):\n    for xi in range(Nx):\n        x,y = xar[xi], yar[yi]\n        if x==0:\n            if 0.25<y<0.75:\n                eqs.add_equation(T[x,y]==1)\n            else:\n                eqs.add_equation(T[x,y]==0)\n        elif y==0 or x==1 or y==1:\n            eqs.add_equation(T[x,y]==0)\n        else:\n            #domain:\n            eqs.add_equation(T[x,y]==0.25*(T[xar[xi+1],y] + T[xar[xi-1],y] + T[x,yar[yi+1]] + T[x,yar[yi-1]]))\n\nprint(eqs.get_sparse_matrix().__repr__()) # a sparse matrix is automaticly created\neqs.solve()\n\nTar = []\nfor yi in range(Ny):\n    Trow = []\n    for xi in range(Nx):\n        x,y = xar[xi], yar[yi]\n        Trow.append(eqs[T[x,y]])\n    Tar.append(Trow)\nfrom matplotlib import pyplot as plt\nplt.contourf(xar,yar,Tar)\nplt.colorbar()\nplt.show()\n```\n\nIt can be quite slow in constructing the equations but that is not the goal of this module. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GerbenBeintema/coollinearsolver",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cool-linear-solver",
    "package_url": "https://pypi.org/project/cool-linear-solver/",
    "platform": "",
    "project_url": "https://pypi.org/project/cool-linear-solver/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GerbenBeintema/coollinearsolver/issues",
      "Homepage": "https://github.com/GerbenBeintema/coollinearsolver"
    },
    "release_url": "https://pypi.org/project/cool-linear-solver/0.1.1/",
    "requires_dist": [
      "scipy",
      "numpy",
      "matplotlib",
      "qpsolvers"
    ],
    "requires_python": ">=3.6",
    "summary": "An easy going contrained linear solver with sparse methods and minimal effort",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12950412,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c162636519162e686530a658d4ed33308a54d28763fd60974db2a3c4813b246b",
          "md5": "1323ea076c4ca8f5923de64e7901ea54",
          "sha256": "6662284d37cce423e4eb96275a75e7ece1448ee95a03a42b4970e0253e37cfa9"
        },
        "downloads": -1,
        "filename": "cool_linear_solver-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1323ea076c4ca8f5923de64e7901ea54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6482,
        "upload_time": "2022-02-20T12:07:51",
        "upload_time_iso_8601": "2022-02-20T12:07:51.577924Z",
        "url": "https://files.pythonhosted.org/packages/c1/62/636519162e686530a658d4ed33308a54d28763fd60974db2a3c4813b246b/cool_linear_solver-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28092c490f4d2af6592bff8d32d38faf97180162cd91b74eb6555221ca81363d",
          "md5": "198ecca5677c832c95e4d07e51761412",
          "sha256": "ac4fb6e40f569ad17c64d1c4a667a07a9f946e37c3d82c8a5fd6aefe7f2e4a80"
        },
        "downloads": -1,
        "filename": "cool_linear_solver-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "198ecca5677c832c95e4d07e51761412",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5382,
        "upload_time": "2022-02-20T12:07:53",
        "upload_time_iso_8601": "2022-02-20T12:07:53.384941Z",
        "url": "https://files.pythonhosted.org/packages/28/09/2c490f4d2af6592bff8d32d38faf97180162cd91b74eb6555221ca81363d/cool_linear_solver-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c162636519162e686530a658d4ed33308a54d28763fd60974db2a3c4813b246b",
        "md5": "1323ea076c4ca8f5923de64e7901ea54",
        "sha256": "6662284d37cce423e4eb96275a75e7ece1448ee95a03a42b4970e0253e37cfa9"
      },
      "downloads": -1,
      "filename": "cool_linear_solver-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1323ea076c4ca8f5923de64e7901ea54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6482,
      "upload_time": "2022-02-20T12:07:51",
      "upload_time_iso_8601": "2022-02-20T12:07:51.577924Z",
      "url": "https://files.pythonhosted.org/packages/c1/62/636519162e686530a658d4ed33308a54d28763fd60974db2a3c4813b246b/cool_linear_solver-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28092c490f4d2af6592bff8d32d38faf97180162cd91b74eb6555221ca81363d",
        "md5": "198ecca5677c832c95e4d07e51761412",
        "sha256": "ac4fb6e40f569ad17c64d1c4a667a07a9f946e37c3d82c8a5fd6aefe7f2e4a80"
      },
      "downloads": -1,
      "filename": "cool_linear_solver-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "198ecca5677c832c95e4d07e51761412",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5382,
      "upload_time": "2022-02-20T12:07:53",
      "upload_time_iso_8601": "2022-02-20T12:07:53.384941Z",
      "url": "https://files.pythonhosted.org/packages/28/09/2c490f4d2af6592bff8d32d38faf97180162cd91b74eb6555221ca81363d/cool_linear_solver-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}