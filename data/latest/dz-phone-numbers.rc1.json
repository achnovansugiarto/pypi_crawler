{
  "info": {
    "author": "Walid Ziouche",
    "author_email": "hi@walid.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# Algerian phone numbers as a value object\n\n\nInspired from [the PHP implementation](https://github.com/cherifGsoul/php-algerian-mobile-phone-number) with some differences (see below).\n\n------------\n\nAlgerian phone numbers as a value object implementation in Python. This can be used in your domain models or be integrated with your favorite framework.\n\nWhat is value object?\n> In computer science, a value object is a small object that represents a simple entity whose equality is not based on identity: i.e. two value objects are equal when they have the same value, not necessarily being the same object.\n\nRead more on [wikipedia](https://en.wikipedia.org/wiki/Value_object).\n\n## Installation:\n\n```\npip install dz-phone-numbers\n```\n\n## Usage:\n\n```python\nfrom dz_phone_number import DZPhoneNumber\n\ndz_phone_number = DZPhoneNumber(\"0599000000\") # or DZPhoneNumber.from_string(\"0599000000\")\ndz_phone_number.indicative # <CountryCode.LOCAL: '0'>\ndz_phone_number.operator_or_region # <MobileOperator.OOREDOO: 5>\ndz_phone_number.suffix # '99000000'\n\ndz_phone_number.is_mobile() # True\ndz_phone_number.is_landline() # a.k.a Fixe. False\ndz_phone_number.is_ooredoo() # True\ndz_phone_number.is_djezzy() # false\ndz_phone_number.is_annaba() # false\n\nDZPhoneNumber(\"038123456\").is_annaba() # True\n\n# repr:\n<DZPhoneNumber:CountryCode.LOCAL - MobileOperator: OOREDOO - 99000000>\n\n# str:\nstr(dz_phone_number) # 0599000000\n```\n\n### Equality\n\n```python\nDZPhoneNumber(\"0599000000\") == DZPhoneNumber(\"+213 599000000\") # True\nDZPhoneNumber(\"(0) 599000000\") == DZPhoneNumber(\"0 599-00-00-00\") # True\nDZPhoneNumber(\"(0) 599000000\") == DZPhoneNumber(\"(0) 699000000\"\") # False\n```\n\n### Correctness \n\n```Python\ntry:\n    DZPhoneNumber(\"09 12 34 56 78\")\nexcept ValueError: # ValueError can catch it\n    pass\n# Otherwise you can also expect `InvalidDZPhoneNumber` (an alias of ValueError).\n```\n### Immutability\n\nThe object can't be modified if you try to modify of its members, a `TypeError` will be raised:\n```python\ndz_phone_number.number = '038123456' # will raise TypeError.\n```\n\n# Understanding the regex \n03 main parts of the full number are categorized into three groups: indicative (Country Code), Operator or Region (e.g. Ooredoo or Annaba), and the rest of the dial number.\n\n<p align=\"center\">\n    <img src=\"https://res.cloudinary.com/walid/image/upload/v1592310084/regex-explain1_ggau8t.png\" />\n</p>\n\nThe regex uses Python's [capturing group](https://docs.python.org/3/howto/regex.html#grouping) feature built in its regex engine. Where \"Country Code\", \"Operator or Region\" and the \"Number\" are put into numbered groups when matched.\n\nThe regex also uses a conditional statemet in the form of `(?(1)yes|no)` where `(1)` is the capturing group number. The following picture explain how it's working:\n\n<p align=\"center\">\n    <img src=\"https://res.cloudinary.com/walid/image/upload/v1592310151/regex-explain2_hmvwgp.png\" />\n</p>\n\n## Differences from the PHP implementation (as of writing this):\n- This raises a `ValueError` (Python built-in) instead of the broad `Exception` `InvalidDZPhoneNumber` is an alias of `ValueError`.\n- A different version of regex with support for landline (a.k.a fixe) numbers.\n- Enums are used to both limit landline possible values, and make it extensible (e.g. very easy if, say, a new operator got into Algeria).\n- This uses Python regex \"capturing groups\" feature. Where \"Country Code\", \"Operator or Region\" and the \"Number\" are put in groups when matched.\n- pytest are used instead of any other spec or behavior testing.\n- Immutability is achieved through `__slots__` and overriding `__setattr__` and `__delattr__`. This was a bit more flexibile that `@dataclass(frozen=True)`.\n\n# Bonuses \n\nThis is a simple, self-contained problem. One of the reasons I wrote this is to serve as a python package example for the Algerian Python community where:\n- The code is [Black](https://github.com/psf/black)-formatted. \n- Type annotated code using Python type hints. Checked with [MyPy](http://mypy-lang.org/).\n- The project structure follows what's common for Python projects. See the [Hitchhiker guide](https://docs.python-guide.org/writing/structure/).\n- A simple `Makefile` within to show how to build this (with Python wheels support) and how to release a package to pypi. Just issue `make` to see the available commands.\n- Example `setup.py`\n- Testing with pytest.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dz phone number tel telephone mobile regex",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dz-phone-numbers",
    "package_url": "https://pypi.org/project/dz-phone-numbers/",
    "platform": "",
    "project_url": "https://pypi.org/project/dz-phone-numbers/",
    "project_urls": {
      "Bug Reports": "https://github.com/01walid/py-dz-phone-number/issues",
      "Source": "https://github.com/01walid/py-dz-phone-number"
    },
    "release_url": "https://pypi.org/project/dz-phone-numbers/1.0.0/",
    "requires_dist": [
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Algerian phone numbers as value object, python implementation",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7489853,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2436c8e4d14833cbd8476a2f9bc7f00c05ab4f5ec4973fc15b3b2e4cdb939b92",
          "md5": "5f613d28903d3326352eb80da16aa642",
          "sha256": "825916939c3d6af48bcdd8c27cee02e54dd480de8c3237ebb53de5d7ca174ade"
        },
        "downloads": -1,
        "filename": "dz_phone_numbers-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f613d28903d3326352eb80da16aa642",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 12002,
        "upload_time": "2020-06-16T13:44:30",
        "upload_time_iso_8601": "2020-06-16T13:44:30.982385Z",
        "url": "https://files.pythonhosted.org/packages/24/36/c8e4d14833cbd8476a2f9bc7f00c05ab4f5ec4973fc15b3b2e4cdb939b92/dz_phone_numbers-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfbda0db5721ea972698727574011140d66258fc54ce51ea392498a85ecfc236",
          "md5": "b04ef759d5ef72a6e75c9fc89699ab3d",
          "sha256": "b1d7e64040531fae511517d5fcbe61ee9c804502bb364ffbccb2e766c4b37e58"
        },
        "downloads": -1,
        "filename": "dz_phone_numbers-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b04ef759d5ef72a6e75c9fc89699ab3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 9821,
        "upload_time": "2020-06-16T13:44:32",
        "upload_time_iso_8601": "2020-06-16T13:44:32.573659Z",
        "url": "https://files.pythonhosted.org/packages/df/bd/a0db5721ea972698727574011140d66258fc54ce51ea392498a85ecfc236/dz_phone_numbers-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2436c8e4d14833cbd8476a2f9bc7f00c05ab4f5ec4973fc15b3b2e4cdb939b92",
        "md5": "5f613d28903d3326352eb80da16aa642",
        "sha256": "825916939c3d6af48bcdd8c27cee02e54dd480de8c3237ebb53de5d7ca174ade"
      },
      "downloads": -1,
      "filename": "dz_phone_numbers-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f613d28903d3326352eb80da16aa642",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 12002,
      "upload_time": "2020-06-16T13:44:30",
      "upload_time_iso_8601": "2020-06-16T13:44:30.982385Z",
      "url": "https://files.pythonhosted.org/packages/24/36/c8e4d14833cbd8476a2f9bc7f00c05ab4f5ec4973fc15b3b2e4cdb939b92/dz_phone_numbers-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfbda0db5721ea972698727574011140d66258fc54ce51ea392498a85ecfc236",
        "md5": "b04ef759d5ef72a6e75c9fc89699ab3d",
        "sha256": "b1d7e64040531fae511517d5fcbe61ee9c804502bb364ffbccb2e766c4b37e58"
      },
      "downloads": -1,
      "filename": "dz_phone_numbers-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b04ef759d5ef72a6e75c9fc89699ab3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 9821,
      "upload_time": "2020-06-16T13:44:32",
      "upload_time_iso_8601": "2020-06-16T13:44:32.573659Z",
      "url": "https://files.pythonhosted.org/packages/df/bd/a0db5721ea972698727574011140d66258fc54ce51ea392498a85ecfc236/dz_phone_numbers-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}