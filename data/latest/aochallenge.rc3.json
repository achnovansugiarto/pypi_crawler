{
  "info": {
    "author": "",
    "author_email": "Ferenc Vajda <ferenc.vajda@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# AOChallenge Module\n\nThe  module   is  designed   to  speed  up   the  solution   of  certain\ncoding   challenges.   The   module    is   inspired   by   [Advent   of\nCode](https://adventofcode.com/), I have not  used it for anything else,\nbut it is probably useful for other things.\n\nThe use  of the module is  different from the traditional  ones, my goal\nwas to  be able  to create  a new solution  easily. The  `Solution` base\nclass provided  by the  module contains some  frequently used  or useful\nfunctions for debugging and only the solutions need to be added.\n\nEach time I start from the code below.\n\n```python\n#!/usr/bin/python3 -u\n\nimport aochallenge\n\nclass Solution(aochallenge.Solution):\n    def __init__(self):\n        super().__init__()\n        data = self.load(True,',',int)\n\n#    def part1(self):\n\n#    def part2(self):\n\n#    def solve_more(self):\n\nsolution = Solution()\nsolution.main()\n```\n\nTo be more precise, I also use  type annotation, which I have taken from\nhere.\n\nThe `part1`  and `part2` methods  are called  and the returned  value is\ndisplayed by the original class. If the two parts of the challenge build\non each other,  you can also use `solve_more` (generator),  in which the\nsolutions are returned with the `yield` keyword, so that the computation\ncan  continue  without  saving  previous results.  Check  out  also  the\n[example](#example) at the end of this document.\n\nIn the constructor, it makes sense to load and, if necessary, preprocess\nthe input data, which is well done  by the load function of the Solution\nclass. Note  that this function  examines the program's  input arguments\nand decides which input file to load (test or main) based on them.\n\n## Importing data\n\nFor  each challenge  there are  one  or more  test inputs  and there  is\nyour  challenge one.  The  class expects  the input  files  to be  named\nappropriately  to be  able to  load automatically.  For example,  if the\nfile  name  is \"aoc-2201.py\",  then  the  input  files should  be  named\n\"aoc-2201_<id>_.input\". E.g.\n\n    aoc/2022/01/\n    |---- aoc-2201.py       source code\n    |---- aoc-2201-t.input  test input\n    \\---- aoc-2201.input    challenge input\n\nIn this case, you can run your code with the test data as follows:\n\n    $ ./aoc-2201.py -t\n\nAnd with the challenge data, simply:\n\n    $ ./aoc-2201.py\n\nIn some special cases  the input is a single line of  data or some other\nsimple constructs.  In this case it  is unnecessary to create  files for\neach, you can simply pass a look-up-table to the `load` function. E.g.\n\n```python\nINPUT = {\n    None: 'My challenge input data',\n    't': 'My test 1 input data',\n    't2': 'My test 2 input data',\n}\n...\ndef __init__(self):\n    super().__init__()\n    data = self.load(lut=INPUT)\n```\n\n### Using `load` method\n\nThe `load`  method is used to  prepare the data for  further processing.\nThe input  can come from a  file or from a  predefined look-up-table. If\nthe latter is not specified, file handling is automatic (see above).\n\n`load` function does  not only import data, but  does some preprocessing\non them:\n\n```python\ndef load(self,\n        splitlines: bool = False,\n        splitrecords: str|None = None,\n        recordtype:  list|tuple|type|None = None,\n        *,\n        lut: dict[str|None, Any]|None = None,\n        ) -> list[str|int|list]\n```\n\nParameters:\n\n- `splitlines`: boolean  value whether the  input data lines have  to be\n  splitted into a list.\n- `splitrecords`:  string value  used to  separate the  records in  each\n  line. For example, if there  are comma-separated values, this field is\n  \",\". If set to `None`, items within the row are not split.\n- `recordtype`: type of records. For example, if the values are numbers,\n  it  can  be `int`  or  even  `float`.  The  `load` function  does  the\n  conversion. If  the parameter type  is `list` or `tuple`,  the various\n  fields may  have different types.  E.g. `(str, list)` means,  that the\n  first record should be a `str`, but all further ones have to be casted\n  to `int`.\n- `lut` (keyword  only parameter): if  this parameter is  specified, the\n  input data will be read from it instead of from an input file.\n\nNote, that  if `splitlines`  is `False`  but `splitrecords`  is defined,\nonly the  first row  will be processed.  This means that  if you  have a\none-row data set, the return element  is not a two-dimensional list with\na single nested list, but a simple list of values from the first row.\n\n## Displaying temporary results\n\nThe  class  contains  some  debugging  solutions  to  display  temporary\nresults.\n\n- `print_condensed`:  Prints content  of  a  2-dimensional container  of\n  characters \"condensed\". E.g. if data is\n\n      [['#', '#', '.'], ['.', '#', '.'], ['.', '#', '#']]`\n\n  the following will be printed:\n\n      ##.\n      .#.\n      .##\n\n  Note that the 2-dimensional container can be also a list of strings.\n- `def  print_csv`: Prints  content of  a 2-dimensional  container in  a\n  comma separated way\n- `def  print_arranged`: Prints  content  of  a 2-dimensional  container\n  arranged into columns\n\n## Example\n\n**PART 1**: Add up  all the numbers in each row  separated by commas and\nprint the maximum of these sums.\n\n**PART 2**: Find the 3 largest sums, add them up and determine the final\nresult.\n\nUsing `part1` and `part2`:\n\n```python\n#!/usr/bin/python3 -u\n\nimport aochallenge\n\nclass Solution(aochallenge.Solution):\n    def __init__(self):\n        super().__init__()\n        self.data = self.load(True,',',int)\n\n    def part1(self):\n        return max(sum(row) for row in self.data)\n\n    def part2(self):\n        return sum(sorted(sum(row) for row in self.data)[-3:])\n\nsolution = Solution()\nsolution.main()\n```\n\nUsing `solve_more`:\n\n```python\n#!/usr/bin/python3 -u\n\nimport aochallenge\n\nclass Solution(aochallenge.Solution):\n    def __init__(self):\n        super().__init__()\n        self.data = self.load(True,',',int)\n\n    def solve_more(self):\n        sums = sorted(sum(row) for row in self.data)\n        yield sums[-1]\n        yield sum(sums[-3:])\n\nsolution = Solution()\nsolution.main()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aochallenge",
    "package_url": "https://pypi.org/project/aochallenge/",
    "platform": null,
    "project_url": "https://pypi.org/project/aochallenge/",
    "project_urls": {
      "Bug Tracker": "https://github.com/fercsi/pylib-aochallenge/issues",
      "Homepage": "https://github.com/fercsi/pylib-aochallenge"
    },
    "release_url": "https://pypi.org/project/aochallenge/1.0b3/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "A helper solution to speed up solving challenges like adventofcode",
    "version": "1.0b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17451692,
  "releases": {
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00c1eeee6de4ab2f46eeb59f88f38653bd5b02b5a66185e5b8356f10c7f818bb",
          "md5": "f525354a654cfa1678f6c8c13e42bfb3",
          "sha256": "3a2771438c5528cf9d45cbd770f3854d5f8496989b789f0d40c3e5e2c56cc600"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f525354a654cfa1678f6c8c13e42bfb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 5641,
        "upload_time": "2023-03-06T16:51:09",
        "upload_time_iso_8601": "2023-03-06T16:51:09.405439Z",
        "url": "https://files.pythonhosted.org/packages/00/c1/eeee6de4ab2f46eeb59f88f38653bd5b02b5a66185e5b8356f10c7f818bb/aochallenge-1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d64c23515d44c62b18db022271ef9ee3f67cdd5c76147bddc84bf5e31595ec95",
          "md5": "59c7d6e77c6c1c6620020ded463de416",
          "sha256": "f96cd16fd90bb90ab3540860d1915e6fb386569c459c399d0a03f3b6639e1aca"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "59c7d6e77c6c1c6620020ded463de416",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 243747,
        "upload_time": "2023-03-06T16:51:11",
        "upload_time_iso_8601": "2023-03-06T16:51:11.743463Z",
        "url": "https://files.pythonhosted.org/packages/d6/4c/23515d44c62b18db022271ef9ee3f67cdd5c76147bddc84bf5e31595ec95/aochallenge-1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e7c53b146df6983e181c52d228f2f78e7c1aa381f76d9ff1e3db66d9b39d5b",
          "md5": "5c7014eee7786591cf97eb98189e831a",
          "sha256": "84cd57d88e85c3e7efc1970a37f400a9efbcc966002190750a38bb78773f53b3"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c7014eee7786591cf97eb98189e831a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 6447,
        "upload_time": "2023-03-25T15:13:06",
        "upload_time_iso_8601": "2023-03-25T15:13:06.952974Z",
        "url": "https://files.pythonhosted.org/packages/66/e7/c53b146df6983e181c52d228f2f78e7c1aa381f76d9ff1e3db66d9b39d5b/aochallenge-1.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3429c920e95d92ce5c7430fd7c951846b06f05d41b32fa327e31a50dff07c78",
          "md5": "3ced7028e7f6ce19b3a87097b0617012",
          "sha256": "c98704ef70957a7f18bb83167958e01f75f8b20c5119f2a52c4a6772bc968203"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ced7028e7f6ce19b3a87097b0617012",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 6016,
        "upload_time": "2023-03-25T15:13:09",
        "upload_time_iso_8601": "2023-03-25T15:13:09.170709Z",
        "url": "https://files.pythonhosted.org/packages/f3/42/9c920e95d92ce5c7430fd7c951846b06f05d41b32fa327e31a50dff07c78/aochallenge-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a097210090a438da920b51d1d8c3a49faeaf4738e3f74876e74237e7e6382878",
          "md5": "256db963cbedb39308540544ce19892d",
          "sha256": "d15a787a0294635240ea495495b9ab83707218bc512f8377992e7bfc68a7d2bb"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "256db963cbedb39308540544ce19892d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 6449,
        "upload_time": "2023-03-26T17:50:27",
        "upload_time_iso_8601": "2023-03-26T17:50:27.650660Z",
        "url": "https://files.pythonhosted.org/packages/a0/97/210090a438da920b51d1d8c3a49faeaf4738e3f74876e74237e7e6382878/aochallenge-1.0b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc642b01b91bdf5af86eca5fb21ecfed6f18d41a6726da1704d53fe50dbe1ad",
          "md5": "80c7df05b5fc8efe8d8f3d11b9cc13db",
          "sha256": "26c3aa69377714f3c7893f77bf37bf10eb83e07d4a29bfe304b0f5a8e12301f5"
        },
        "downloads": -1,
        "filename": "aochallenge-1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "80c7df05b5fc8efe8d8f3d11b9cc13db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 6020,
        "upload_time": "2023-03-26T17:50:29",
        "upload_time_iso_8601": "2023-03-26T17:50:29.816861Z",
        "url": "https://files.pythonhosted.org/packages/bd/c6/42b01b91bdf5af86eca5fb21ecfed6f18d41a6726da1704d53fe50dbe1ad/aochallenge-1.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a097210090a438da920b51d1d8c3a49faeaf4738e3f74876e74237e7e6382878",
        "md5": "256db963cbedb39308540544ce19892d",
        "sha256": "d15a787a0294635240ea495495b9ab83707218bc512f8377992e7bfc68a7d2bb"
      },
      "downloads": -1,
      "filename": "aochallenge-1.0b3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "256db963cbedb39308540544ce19892d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 6449,
      "upload_time": "2023-03-26T17:50:27",
      "upload_time_iso_8601": "2023-03-26T17:50:27.650660Z",
      "url": "https://files.pythonhosted.org/packages/a0/97/210090a438da920b51d1d8c3a49faeaf4738e3f74876e74237e7e6382878/aochallenge-1.0b3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bdc642b01b91bdf5af86eca5fb21ecfed6f18d41a6726da1704d53fe50dbe1ad",
        "md5": "80c7df05b5fc8efe8d8f3d11b9cc13db",
        "sha256": "26c3aa69377714f3c7893f77bf37bf10eb83e07d4a29bfe304b0f5a8e12301f5"
      },
      "downloads": -1,
      "filename": "aochallenge-1.0b3.tar.gz",
      "has_sig": false,
      "md5_digest": "80c7df05b5fc8efe8d8f3d11b9cc13db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 6020,
      "upload_time": "2023-03-26T17:50:29",
      "upload_time_iso_8601": "2023-03-26T17:50:29.816861Z",
      "url": "https://files.pythonhosted.org/packages/bd/c6/42b01b91bdf5af86eca5fb21ecfed6f18d41a6726da1704d53fe50dbe1ad/aochallenge-1.0b3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}