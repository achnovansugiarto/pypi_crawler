{
  "info": {
    "author": "Isaac Nygaard",
    "author_email": "ozixtheorange@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Sphinx",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Documentation",
      "Topic :: Utilities"
    ],
    "description": "Welcome to Kiss API!\n====================\n\nThis project is a `Sphinx <https://www.sphinx-doc.org/>`_ plugin for automatically generating python API docs.\n\nWhy use this plugin?\n--------------------\nThis plugin takes a different approach than others like `autoapi <https://sphinx-autoapi.readthedocs.io>`_,\n`automodapi <https://sphinx-automodapi.readthedocs.io>`_, or plain\n`autodoc <https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_. I found that these other plugins\ndid a pretty good job of automatically generating API docs, but it was never perfect. They wouldn't know exactly what\nto include in the docs, and there just weren't enough customization options to get what I needed.\n\nInstead of generating the docs automatically, this plugin provides a simple, flexible API for analyzing and introspecting\nyour python code. Using the API, you can generate reST documentation yourself however you want! *Keep it simple, stupid.*\n\nI've also included a default \"renderer\" which will generate reST documentation automatically. You can use that if\nyou are satisfied with the output and don't need any additional customization.\n\nUsage\n-----\nInstall the package via pip. See also the `source on github <https://github.com/Azmisov/sphinxcontrib-kissapi>`_ to build\nmanually.\n\n.. code-block:: bash\n\n    pip install sphinxcontrib-kissapi\n\nInside your sphinx ``conf.py`` file, first add ``sphinxcontrib.kissapi`` to ``extensions``. KissAPI is integrated to use\nsphinx's builtin ``autodoc`` and ``autosummary`` to extract documentation for introspected variables if desired, so you'll\nneed to add those dependencies too.\n\nSecond, we need to configure what package(s) KissAPI should introspect and how you want to render that package data.\nThis is configured by setting options inside the ``kissapi_config`` dict variable. The following options are supported:\n\nout_dir : str\n    Output directory for files generated by renderer. Default value is ``\"kissapi_output\"``.\noverwrite\n    Whether to overwrite ``out_dir``. This can be one of three values:\n\n    1. ``True``: delete folder and completely rebuild\n    2. ``False``: don't do anything if folder is found, keep as is\n    3. ``\"partial\"``: allow files to be overwritten, but don't delete ``out_dir`` completely\njinja_dir : str\n    A directory with jinja templates, which allows you to use some helpers on the ``RenderManager`` class for easier reST\n    file generation. If a relative path is given, it will be relative to the sphinx root docs folder. By default, this is\n    set to ``sphinxcontrib/kissapi/def_templates`` directory, which are some default jinja templates I have made to go\n    along with the default renderer (``sphinxcontrib.kissapi.def_render``).\njinja_env\n    A custom Jinja environment to use instead of using ``jinja_dir``.\noutput : dict\n    This is the main config option for specifying what automatic documentation you want to generate. This dict is a mapping\n    from a unique output name to output config options: ``{out_name: out_config, ...}``. The config options are also a\n    dict, with the following values:\n\n    - *package* (str): The package to be introspected and rendered. See the ``introspect`` config value for customizing\n      introspection behavior. Provide the module name as a string.\n    - *render* (callable): A callback with signature ``(mgr:RenderManager, pkg:PackageAPI)``. The second arg is the introspection\n      results for the package, and you can use its API to examine the modules, classes, functions, variables, and\n      information about them through there. The ``RenderManager`` instance has several methods to help you write reST\n      files and use your jinja templates.\n\n      The callback can return a string or list of reST nodes that should be stored as ``out_name`` inside the ``RenderManager``\n      if you wish. These can later be injected into your pre-existing reST documents. However, this is not required.\n\n      How you render the package is entirely up to you. A default renderer that I have written for one of my projects\n      is available at ``sphinxcontrib.kissapi.def_render.pkg_template``, and I'm pleased with the docs it generates. Feel\n      free to use or modify it for your own project.\nintrospect : dict\n    Specify options for customizing how a package is introspected. Similar to ``output``, it is a mapping from package\n    name to config options: ``{package_name: introspect_config, ...}``. The config options are specified as a dict with\n    the following optional values:\n\n    - *package_exclude*: A callback with signature ``(pkg_name:str, module_name:str) -> bool``. It should\n      return ``True`` if the module (e.g. from ``sys.modules``) should be excluded from the package and marked as\n      an \"external\" module. You can also return any other truthy value to exclude the module, but not mark it as external.\n      Variables that are referenced in both your package and an external module will show up True when ``is_external`` is called.\n\n      If this callback is not provided, ``PackageAPI.default_package_exclude`` is used; this default method excludes modules\n      not prefixed by ``\"[pkg_name].\"``, or contain a private module somewhere in the path (e.g. prefixed by underscore,\n      such as ``mypackage._private.submodule``). Note that only non-exluded modules get introspected by KissAPI.\n\n    - *var_exclude*: A callback with signature ``(pkg:PackageAPI, parent:VariableValueAPI, value:VariableValueAPI, name:str) -> bool``.\n      KissAPI uses the notion of a variable reference, which is parent context and variable reference name. For example\n      in the following code snippet, there are two references to list ``[1,2,3]``:\n\n      .. code-block:: python\n\n        baz = [1,2,3]\n        class Foo:\n            bar = baz\n\n      The first reference is in the globals of the module itself with the name ``baz``. The second reference is inside\n      class ``Foo`` with name ``bar``. The \"parent\" in this example is either the module or class; the \"value\" is ``[1,2,3]``;\n      the \"name\" is either ``baz`` or ``bar`` depending on the parent.\n\n      What this option allows you to do is specify what variable references should be analyzed and which should be skipped.\n      By default if not provided, ``PackageAPI.default_var_exclude`` is used; this default method excludes private (prefixed by\n      a single underscore) and external (detected in non-package modules) variables.\n\nAltogether, here is an example of the code you might put in ``conf.py``:\n\n.. code-block:: python\n\n    extensions = [\"sphinx.ext.autodoc\",\"sphinx.ext.autosummary\",\"sphinxcontrib.kissapi\",'sphinx_rtd_theme']\n\n    from sphinxcontrib.kissapi.def_render import package_template\n    kissapi_config = {\n        \"overwrite\": True,\n        \"output\": {\n            \"my_rendered_output\":{\n                \"package\":\"my_package\",\n                \"render\":package_template\n            }\n        }\n    }\n\nIf the render callback were to output values, they can be referenced in your existing reST documentation using the\n``kissapi`` directive. For the above ``conf.py`` example, we could inject ``\"my_rendered_output\"`` by adding this\ndirective somewhere:\n\n.. code-block:: rest\n\n    .. kissapi:: my_rendered_output\n\nAPI\n===\nI still need to setup a ReadTheDocs site and write a more in-depth usage guide. Until then, reference the docstrings\nfor the classes, in particular from ``introspect.py`` and ``manager.py``.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azmisov/sphinxcontrib-kissapi",
    "keywords": "sphinx automatic api generation documentation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sphinxcontrib-kissapi",
    "package_url": "https://pypi.org/project/sphinxcontrib-kissapi/",
    "platform": "any",
    "project_url": "https://pypi.org/project/sphinxcontrib-kissapi/",
    "project_urls": {
      "Homepage": "https://github.com/Azmisov/sphinxcontrib-kissapi"
    },
    "release_url": "https://pypi.org/project/sphinxcontrib-kissapi/1.0.3/",
    "requires_dist": [
      "Sphinx",
      "docutils",
      "jinja2"
    ],
    "requires_python": "",
    "summary": "Simple and flexible python API documentation generation plugin for Sphinx",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8883021,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5da4d5609ee1ce160118637b204640c9b1f0b628929826642eeeac07a85c9a8a",
          "md5": "7a07ae58c8d14731d0aef8b511593bb4",
          "sha256": "9a6c17ea38f040301c44fc69823114f21f415a0795accd98e73f9ca794fbcb8f"
        },
        "downloads": -1,
        "filename": "sphinxcontrib_kissapi-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a07ae58c8d14731d0aef8b511593bb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34760,
        "upload_time": "2020-12-11T02:42:29",
        "upload_time_iso_8601": "2020-12-11T02:42:29.952215Z",
        "url": "https://files.pythonhosted.org/packages/5d/a4/d5609ee1ce160118637b204640c9b1f0b628929826642eeeac07a85c9a8a/sphinxcontrib_kissapi-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c42703ad6fcf3f33cc6fad03d1400595cc6d2b47122e123d6cfa609cb3aa543f",
          "md5": "0ef4faa8c9a80c60bb030096f4c7d2fb",
          "sha256": "034c00fce46389837762418ee544a6f8f0ae85e9b7f61dab5ea8d358fd917c98"
        },
        "downloads": -1,
        "filename": "sphinxcontrib_kissapi-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ef4faa8c9a80c60bb030096f4c7d2fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39745,
        "upload_time": "2020-12-11T02:52:23",
        "upload_time_iso_8601": "2020-12-11T02:52:23.680711Z",
        "url": "https://files.pythonhosted.org/packages/c4/27/03ad6fcf3f33cc6fad03d1400595cc6d2b47122e123d6cfa609cb3aa543f/sphinxcontrib_kissapi-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c369923a4d8e2164f0cd19a7dd99dde89db5bf0bc3c432045ed2a05a5c300d",
          "md5": "bbeb6d4859d50cf694199d880adaafa0",
          "sha256": "e5657ecd36c4211d3e3a2bec6a1945111b72eff894f4c144f73216ea68ead240"
        },
        "downloads": -1,
        "filename": "sphinxcontrib_kissapi-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbeb6d4859d50cf694199d880adaafa0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40082,
        "upload_time": "2020-12-12T06:21:28",
        "upload_time_iso_8601": "2020-12-12T06:21:28.049734Z",
        "url": "https://files.pythonhosted.org/packages/79/c3/69923a4d8e2164f0cd19a7dd99dde89db5bf0bc3c432045ed2a05a5c300d/sphinxcontrib_kissapi-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79c369923a4d8e2164f0cd19a7dd99dde89db5bf0bc3c432045ed2a05a5c300d",
        "md5": "bbeb6d4859d50cf694199d880adaafa0",
        "sha256": "e5657ecd36c4211d3e3a2bec6a1945111b72eff894f4c144f73216ea68ead240"
      },
      "downloads": -1,
      "filename": "sphinxcontrib_kissapi-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbeb6d4859d50cf694199d880adaafa0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40082,
      "upload_time": "2020-12-12T06:21:28",
      "upload_time_iso_8601": "2020-12-12T06:21:28.049734Z",
      "url": "https://files.pythonhosted.org/packages/79/c3/69923a4d8e2164f0cd19a7dd99dde89db5bf0bc3c432045ed2a05a5c300d/sphinxcontrib_kissapi-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}