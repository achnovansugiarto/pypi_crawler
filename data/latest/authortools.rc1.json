{
  "info": {
    "author": "Codenameaidan",
    "author_email": "codenameaidan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# AuthorTools\nAuthorTools provides a multitude of functions for easily analyzing (your?) writing.  AuthorTools is made especially for creative writers with some python skills, or developers of writing applications.  It contains tools to split strings in a variety of ways, such as into sentences or by chapter, and functions to analyze text, like counting the percent of a text that is composed of dialogue (in quotes).\n## Installation\nAuthorTools is available on PyPI.\n```\npip install authortools\n```\n\n## Usage\nAuthorTools provides its functions in authortools.py.  After installation, you will need to import the tools.\n```python\nimport authortools\n```\nThen, all functions should be available to you.\n```python\nimport authortools\nauthortools.word_count(\"Sample Text.\")\n```\nThere is also another module that contains samples of many of the functions in authortools.py.  It's useful if you just want to see a bunch of results on some writing, without going too deep into the tools here.\n```python\nfrom authortools import writing_analysis\nwriting_analysis.run_tests(\"Sample Text.\")\n```\nThe easiest way to get started with the tools is to copy-paste your story (or whatever) into a .txt file, and read it into a string in Python.  Then run the functions on it.\n```python\nimport authortools\n\ntext_file = open(\"input.txt\", \"r\", encoding=\"utf8\")\ntext = text_file.read()\ntext_file.close()\n\nprint(authortools.avg_word_length(text))\n```\n## Functions\n### Sentences\n```python\nauthortools.sentences(\"First Sentence.  Second Sentence\\nThird Sentence.\")\n```\nReturns an array of individual sentences found in the text.  Based on spaces (two spaces, \\n, or \\t).\n\n### Sentences by punctuation\n```python\nauthortools.sentences_by_punctuation(\"First Sentence.  Second Sentence\\nStill the second sentence.\")\n```\nReturns an array of individual sentences found in the text.  Based on punctuation (.?!).\n\n### Words\n```python\nauthortools.words(\"There's like six different words there.\")\n```\nReturns an array of individual words found in the text.  Splits at all spaces and removes most punctuation except those part of the word itself.\n\n### Quotes\n```python\nauthortools.quotes(\"\\\"This quote will be added to the returned array,\\\" he said. \\\"This one will be too; but mine ends with an exclaimation point, which won't be removed, like your comma will be!\\\" I clarified.\")\n```\nReturns an array of quotes found in the text.  Trailing comma and quotation marks are trimmed from the resulting array.\n\n### Chapters\n```python\nauthortools.chapters(\"Title: Whether this is included is optional.  Chapter 1\\nThis is the first chapter.\\nChapter 2: This is the second chapter.\")\n```\nReturns an array of chapters found in the text.  Chapters need to be in the format: \"Chapter 00\".  Spacing and case don't matter.\nNote that \"Chapter XIV\" and \"Chapter Fourteen\" will NOT be found and split by this function.  \n\nTwo optional parameters: num_chapters (int) -- This is in case you wanted to limit it.  num_chapters defaults to 100, but the function returns when it can't find any more chapters.  include_title defaults to False; Should any text found _before_ the first chapter be included as the first element of the returned list?\n\n### Split into parts\n```python\nauthortools.split_into_parts(\"Part one  Part two  Part three\", 3)\n```\nSplits text into an array of n equally sized parts.  Good for analyzing writing that doesn't have defined chapters; like, split into three parts, and run avg_sentence_word_count on each part to see if your style changed.\n\n### Split by size\n```python\nauthortools.split_by_size(\"Part one  Part two  Part three\", 10)\n```\nSplits text into an array with each part being of size n.\n\n### Letter count\n```python\nauthortools.letter_count(\"Ten letters!\")\n```\nCounts the letters (a-z and A-Z) in a given string.\n\n### Word count\n```python\nauthortools.word_count(\"There are five words here.\")\n```\nReturns the number of words in a given string. \n\n### Average word length\n```python\nauthortools.avg_word_length(\"avg len is 2.5\") \n```\nReturns the average word length in a given string.  \n\n### Percent char in quotes\n```python\nauthortools.percent_char_in_quotes(\"\\\"0.35,\\\" he said.\") \n```\nReturns the percent (0.0-1.0) of characters that are in quotes.  Quotation marks not counted as characters.  Great for analyzing how frequently one uses dialogue.\n\n### Reading time\n```python\nauthortools.reading_time(\"Not much.\") \n```\nReturns the reading time in seconds.\n\n### Reading time in minutes\n```python\nauthortools.reading_time_minutes(\"Even less.\") \n```\nReturns the reading time in minutes.\n\n### Word counts\n```python\nmy_sentences = authortools.sentences(\"First Sentence.  Second Sentence\\nThird Sentence.\")\nmy_word_counts = authortools.word_counts(my_sentences) \n```\nReturns the word counts for multiple items in a list as a list.  Sentence word count should vary in good writing!\n\n### Word count change\n```python\nmy_sentences = authortools.sentences(\"First Sentence.  Second Sentence\\nThird Sentence.\")\nmy_word_counts = authortools.word_count_change(my_sentences) \n```\nReturns the word counts change (current - previous) for every item in the list as a list.  Sentence word count should vary in good writing!\n\n### Average sentence word count\n```python\nauthortools.avg_sentence_word_count(\"Three words here.  Few here, too.  Average is three.\") \n```\nReturns the average amount of words per sentence in a given text.\n\n### Word repetitions\n```python\nauthortools.word_repetitions(\"Words; do any words repeat in this sentence made of words?\")\n```\nReturns an array containing any words that repeat in the given string.  It isn't good to repeat yourself in the same sentence, generally speaking.  Pair with authortools.sentences and a loop if you want a per-sentence basis, since this function looks for repetitions in the whole string you give it.  \n\n### Word frequency\n```python\nauthortools.word_frequency(\"Two times that two appears in this text.\")\n```\nReturns a dictionary, with the keys being a word, and the value being the amount of times that word appears in the text.  Good for seeing which words are frequently used in a peice of writing.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Codenameaidan/AuthorTools",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "authortools",
    "package_url": "https://pypi.org/project/authortools/",
    "platform": "",
    "project_url": "https://pypi.org/project/authortools/",
    "project_urls": {
      "Homepage": "https://github.com/Codenameaidan/AuthorTools"
    },
    "release_url": "https://pypi.org/project/authortools/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of useful functions for writers to analyze text/stories.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12570108,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dab6bafcf972e811637f053a4c6087dd09d355b5278f19d47b83c654e203ab4c",
          "md5": "431c2bef1415a1a6c6d6dee891258bc5",
          "sha256": "8fb5f55e3b5eea2341b1bb5e7a060728a9b2f58a23cd07f237d40c3b000383e1"
        },
        "downloads": -1,
        "filename": "authortools-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "431c2bef1415a1a6c6d6dee891258bc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9177,
        "upload_time": "2022-01-14T03:27:46",
        "upload_time_iso_8601": "2022-01-14T03:27:46.929266Z",
        "url": "https://files.pythonhosted.org/packages/da/b6/bafcf972e811637f053a4c6087dd09d355b5278f19d47b83c654e203ab4c/authortools-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80399082691efbd5dcc32b296190ba556661eee21ffde1c173f26e6fa7a0d2df",
          "md5": "7f0c754756a65564a40c6f2bea8f53e4",
          "sha256": "3d6cde09afa1b02ec7fd060a48cf451cd1413ad8570bf2cc64e89eb7e2484e08"
        },
        "downloads": -1,
        "filename": "authortools-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f0c754756a65564a40c6f2bea8f53e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10574,
        "upload_time": "2022-01-14T03:27:48",
        "upload_time_iso_8601": "2022-01-14T03:27:48.637527Z",
        "url": "https://files.pythonhosted.org/packages/80/39/9082691efbd5dcc32b296190ba556661eee21ffde1c173f26e6fa7a0d2df/authortools-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dab6bafcf972e811637f053a4c6087dd09d355b5278f19d47b83c654e203ab4c",
        "md5": "431c2bef1415a1a6c6d6dee891258bc5",
        "sha256": "8fb5f55e3b5eea2341b1bb5e7a060728a9b2f58a23cd07f237d40c3b000383e1"
      },
      "downloads": -1,
      "filename": "authortools-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "431c2bef1415a1a6c6d6dee891258bc5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9177,
      "upload_time": "2022-01-14T03:27:46",
      "upload_time_iso_8601": "2022-01-14T03:27:46.929266Z",
      "url": "https://files.pythonhosted.org/packages/da/b6/bafcf972e811637f053a4c6087dd09d355b5278f19d47b83c654e203ab4c/authortools-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80399082691efbd5dcc32b296190ba556661eee21ffde1c173f26e6fa7a0d2df",
        "md5": "7f0c754756a65564a40c6f2bea8f53e4",
        "sha256": "3d6cde09afa1b02ec7fd060a48cf451cd1413ad8570bf2cc64e89eb7e2484e08"
      },
      "downloads": -1,
      "filename": "authortools-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7f0c754756a65564a40c6f2bea8f53e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10574,
      "upload_time": "2022-01-14T03:27:48",
      "upload_time_iso_8601": "2022-01-14T03:27:48.637527Z",
      "url": "https://files.pythonhosted.org/packages/80/39/9082691efbd5dcc32b296190ba556661eee21ffde1c173f26e6fa7a0d2df/authortools-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}