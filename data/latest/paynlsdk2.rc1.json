{
  "info": {
    "author": "Ing. R.J. van Dongen",
    "author_email": "rogier@sebsoft.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# python-sdk\n\n- [Installation](#installation)\n- [Requirements](#internal-api-implementation)\n- [Internal API implementation](#requirements)\n- [Quick start and examples](#quick-start-and-examples)\n- [Error handling](#error-handling)\n- [Advanced usage](#advanced-usage)\n\n---\n\n### Installation\n\nThis Python2 version of the SDK can be installed through pip.\n\nPip is the package manager for Python.\n\nFor more information on how to use/install pip, please visit: [https://pypi.org/project/pip/](https://pypi.org/project/pip/)\n\nTo install the Pay.nl Python2 sdk into your project, simply\n\n\t$ pip install paynlsdk2\n\n### Requirements\n\nThe Pay.nl Python SDK works on Python 2 and is dependent on the requests package and the marshmallow package (v2.x only)\nWhen installing through pip these dependencies will automatically be detected and installed\n\n### Internal API implementation\nNot all function arguments will be completely described for every case.\nWhen using the utility/quick start classes all parameters are available, so take a look at the method arguments there for more options.\nThey are basically self explanatory\n\nEvery API implementation has it's own Request and Response class, which can be found in the various *paynlsdk2.api.xxx.yyy* modules.\nEvery one of the modules contain at least a Request and a Response class.\nFor example, the Transaction.info API can be located in the *paynlsdk2.api.transation.info* module and will contain both a\n*paynlsdk2.api.transaction.info.Request* and a *paynlsdk2.api.transaction.info.Response* class \nUsually these modules will also contain a specific (marshmallow) Schema implementation that defines the response mapping from JSON. \n\nFor every call, a response object will be returned.\nUsing the *print(result)* statement, or by investigating the *paynlsdk2.objects* module, you can find out what attributes are available.\nEvery result will contain a *request* object, which essentially gives insight on the success or failure of the request.\nThis object is also used to throw a *paynlsk.exceptions.ErrorException* in case the request failed.\nThe rest of the *response* object will contain the information as returned by the PAYL API\n\nAgain, refer to the *paynlsdk2.objects* module to investigate the various objects contained in the response.\nThe exact contents of the response objects itself are defined in all the *paynlsdk2.api.xxx.yyy.Response* classes\n\n\n\n### Quick start and examples\nDo note this quick start only makes use of the quick-call utility methods.\nIf you're more familiar with Python, you *could* use the full API request/response implementations in the paynlsdk2.api namespace\n\nSet configuration (this is a MUST and should always be done before doing anything with the SDK)\n```\nfrom paynlsdk2.api.client import APIAuthentication\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n```\n\nTurn on debugging output for the API Client\nNote: this uses \"print\" and will cause a dump of relevant information to the console such as the endpoint, \nHTTP method, request parameters, http headers and the raw response as a result from the API call\n```\nfrom paynlsdk2.api.client import APIClient\nAPIClient.print_debug = True\n```\n\nGet banks (ideal banks only)\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.transaction import Transaction\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Transaction.get_banks()\n    for bank in result:\n        print('{id}: {name}'.format(id=bank.id, name=bank.name))\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nGet list of payment methods\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.paymentmethods import PaymentMethods\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = PaymentMethods.get_list()\n    for payment_method in result.values():\n        print('{id}: {name} ({visible_name})'.format(id=payment_method.id, name=payment_method.name,\n                                                     visible_name=payment_method.visible_name))\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nRetrieving transaction info\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.transaction import Transaction\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Transaction.info(transaction_id='1234567890X1a2b3')\n    print(result)\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nRetrieving transaction status \n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.transaction import Transaction\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Transaction.status(transaction_id='1234567890X1a2b3')\n    print(result)\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\n\nRefunding (part of) a transaction\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.transaction import Transaction\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Transaction.refund(transaction_id='1234567890X1a2b3')\n    # Whenever you want to partially refund use e.g. (note: amounts are in cents)\n    # result = Refund.transaction(transaction_id='1234567890X1a2b3', amount=500, description='partial refund')\n    # PLEASE NOTE the refund_id is NOT guaranteed, it will only be returned when the refund is done through IBAN.\n    # This is a known flaw, so please do not rely on the refund ID to be part of the response by default\n    print('Refund ID: {refund_id}'.format(refund_id=result.refund_id))\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nRefunding (part of) a transaction (alternative method: more request options are available in this API).\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.refund import Refund\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Refund.transaction(transaction_id='1234567890X1a2b3')\n    # Whenever you want to partially refund use e.g. (note: amounts are in cents)\n    # result = Refund.transaction(transaction_id='1234567890X1a2b3', amount=500, description='partial refund')\n    # PLEASE NOTE the refund_id is NOT guaranteed, it will only be returned when the refund is done through IBAN.\n    # This is a known flaw, so please do not rely on the refund ID to be part of the response by default\n    print('Refund ID: {refund_id}'.format(refund_id=result.refund_id))\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nRetrieving refund info\nNote: refund ids come in the form of 'RF-xxxx-xxxx'\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.refund import Refund\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    result = Refund.info(refund_id='RF-1234-1234')\n    print(result)\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n```\n\nStarting a transaction\n```python\n# Import needed modules\nfrom paynlsdk2.api.client import APIAuthentication\nfrom paynlsdk2.client.transaction import Transaction\nfrom paynlsdk2.objects import OrderData, Address, Company, datetime, TransactionEndUser,\\\n    TransactionStartStatsData, TransactionData, SalesData\nfrom paynlsdk2.exceptions import *\n# Set mandatory basics\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n# Perform request\ntry:\n    saledata = SalesData()\n    saledata.invoice_date = datetime(2018,10,30)\n    saledata.delivery_date = datetime(2018,11,1)\n    order_data = OrderData(product_id='XYZ', product_type='ARTICLE', description='XYZ description',\n                           price=900, quantity=1, vat_code='H', vat_percentage=21)\n    saledata.order_data.append(order_data)\n\n    enduser = TransactionEndUser(language='nl', initials='A', last_name='Jansen', gender='m', dob=datetime(1970,1,2),\n                                 phone_number='0612345678', email_address='someone@somewhere.com', iban='<ibannumber>',\n                                address=Address(initials='A', last_name='Jansen', gender='m', \n                                                street_name='Street', street_number='1', street_number_extension='A', \n                                                zip_code='1234AB', city='Rotterdam', region_code='ZH', \n                                                country_code='NL', country_name='Nederland'),\n                                invoice_address=Address(initials='A', last_name='Jansen', gender='m', \n                                                        street_name='Street', street_number='1', street_number_extension='A', \n                                                        zip_code='1234AB', city='Rotterdam', region_code='ZH', \n                                                        country_code='NL', country_name='Nederland'),\n                                 company=Company(name='Wizard Inc', coc_number='12345678',\n                                                vat_number='NL123456789B01', country_code='NL')\n                                 )\n\n    sinfo1 = {'amount': 250, 'ip_address': '192.168.0.1', 'finish_url': 'https://somedomain.com', 'payment_option_id': 436,\n              'transaction': TransactionData(description='order 9999 at Wizard Inc', order_number='9999', \n                                             order_exchange_url='https://somedomain.nl/exchange.php'),\n              'stats_data': TransactionStartStatsData(extra1='IDX 9999'),\n              'end_user': enduser,\n              'sale_data': saledata,\n              'test_mode': True\n              }\n\n    result = Transaction.start(**sinfo1)\n    # print(result)\n    print('Transaction ID: {id}\\nPayment reference: {ref}\\nPayment URL: {url}'.format(\n            id=result.transaction.transaction_id, ref=result.get_payment_reference(), url=result.get_redirect_url()))\nexcept SchemaException as se:\n    print('SCHEMA ERROR:\\n\\t' + str(se))\n    print('\\nSCHEMA ERRORS:\\n\\t' + str(se.errors))\nexcept ErrorException as ee:\n    print('API ERROR:\\n' + str(ee))\nexcept Exception as e:\n    print('GENERIC EXCEPTION:\\n' + str(e))\n\n```\n\n### Error handling\nYou should always wrap your calls in an exception handler.\nThe SDK only contains four internal exceptions:\n- paynlsdk2.exceptions.ErrorException\n\n  If, for any reason, an error arises in the communication or internally in the API, this exception will be thrown\n- paynlsdk2.exceptions.SchemaException\n\n  If, for any reason, the schema mapping (using marshmallow), shall fail , this exception is thrown\n\n- paynlsdk2.exceptions.TransactionNotAuthorizedException\n\n  This exception is only thrown whenever you try to _void_ or _capture_ a transaction using the Response instance as a\n  result of a call to Transaction.info()\n\n- paynlsdk2.exceptions.TransactionStatusException\n\n  This exception is only thrown whenever you try to _approve_ or _decline_ a transaction using the Response instance as a\n  result of a call to Transaction.info()\n\nNote: it can always happen that any other standard exceptions are thrown.\nThese are most likely to happen outside of the SDK but should also be handled.\n\n### Advanced usage\nWhenever you want to make use of the Request and Response objects yourself for any purpose, you always have the option\nof creating the request object for any API call. These can be found in any of the paynlsdk2.api.xxx.yyy modules.\nThis gives you the advantage of being able to get to the raw requests parameters as well as the raw responses as \nreturned by Pay.nl.\nAlthough you shouldn't normally need to, below is a complete example of this\n```python\nimport json\nfrom paynlsdk2.api.transaction.info import Request\nfrom paynlsdk2.api.client import APIAuthentication, APIClient\n\nAPIAuthentication.service_id = 'SL-xxxx-xxxx'\nAPIAuthentication.api_token = '<yourtokenhere>'\nAPIAuthentication.token_code = 'AT-xxxx-xxxx'\n\n# Create request.\nrequest = Request(transaction_id='1234567890X1a2b3')\n# Send request.\nresponse = APIClient.perform_request(request)\n# We now basically have all information\n# Display raw request parameters:\nparameters = request.get_parameters()\nprint('Request parameters:\\n')\nprint(format(json.dumps(parameters)))\n# Display raw response:\nprint('Raw response:\\n')\nprint(request.raw_response)\nprint('Response class: ' + type(request.response))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paynl/python2-sdk",
    "keywords": "PAYNL2,SDK,Python2",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paynlsdk2",
    "package_url": "https://pypi.org/project/paynlsdk2/",
    "platform": "",
    "project_url": "https://pypi.org/project/paynlsdk2/",
    "project_urls": {
      "Bug Reports": "https://github.com/paynl/python2-sdk/issues",
      "Homepage": "https://github.com/paynl/python2-sdk",
      "Source": "https://github.com/paynl/python2-sdk/"
    },
    "release_url": "https://pypi.org/project/paynlsdk2/1.0.0/",
    "requires_dist": [
      "marshmallow (<3,>=2)",
      "requests",
      "typing"
    ],
    "requires_python": "",
    "summary": "PayNL2 SDK",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4624599,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a2daee150f3f66d5f203c9bd5ffe816128c3182d2f49b0283f999ae244bdf8e",
          "md5": "609d8deea82352a9cbbf03cf4bdd7713",
          "sha256": "46cd4ba2b26a0c240d9208e6de957e07709c0145b65cacc5e7f5e2793d425c9f"
        },
        "downloads": -1,
        "filename": "paynlsdk2-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "609d8deea82352a9cbbf03cf4bdd7713",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51081,
        "upload_time": "2018-12-21T10:57:35",
        "upload_time_iso_8601": "2018-12-21T10:57:35.499213Z",
        "url": "https://files.pythonhosted.org/packages/3a/2d/aee150f3f66d5f203c9bd5ffe816128c3182d2f49b0283f999ae244bdf8e/paynlsdk2-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a05799f409b13dd6e2758e348f325c9874590b33f510e6974ff6ac59164c5f7b",
          "md5": "0ac64f18c4e1340de6759c409c5c4b1f",
          "sha256": "042f457aaec44038cc972a62d132ee141a23e8722a0234e09b4c3c1c56e83194"
        },
        "downloads": -1,
        "filename": "paynlsdk2-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ac64f18c4e1340de6759c409c5c4b1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36397,
        "upload_time": "2018-12-21T10:57:37",
        "upload_time_iso_8601": "2018-12-21T10:57:37.699781Z",
        "url": "https://files.pythonhosted.org/packages/a0/57/99f409b13dd6e2758e348f325c9874590b33f510e6974ff6ac59164c5f7b/paynlsdk2-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a2daee150f3f66d5f203c9bd5ffe816128c3182d2f49b0283f999ae244bdf8e",
        "md5": "609d8deea82352a9cbbf03cf4bdd7713",
        "sha256": "46cd4ba2b26a0c240d9208e6de957e07709c0145b65cacc5e7f5e2793d425c9f"
      },
      "downloads": -1,
      "filename": "paynlsdk2-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "609d8deea82352a9cbbf03cf4bdd7713",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 51081,
      "upload_time": "2018-12-21T10:57:35",
      "upload_time_iso_8601": "2018-12-21T10:57:35.499213Z",
      "url": "https://files.pythonhosted.org/packages/3a/2d/aee150f3f66d5f203c9bd5ffe816128c3182d2f49b0283f999ae244bdf8e/paynlsdk2-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a05799f409b13dd6e2758e348f325c9874590b33f510e6974ff6ac59164c5f7b",
        "md5": "0ac64f18c4e1340de6759c409c5c4b1f",
        "sha256": "042f457aaec44038cc972a62d132ee141a23e8722a0234e09b4c3c1c56e83194"
      },
      "downloads": -1,
      "filename": "paynlsdk2-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ac64f18c4e1340de6759c409c5c4b1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36397,
      "upload_time": "2018-12-21T10:57:37",
      "upload_time_iso_8601": "2018-12-21T10:57:37.699781Z",
      "url": "https://files.pythonhosted.org/packages/a0/57/99f409b13dd6e2758e348f325c9874590b33f510e6974ff6ac59164c5f7b/paynlsdk2-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}