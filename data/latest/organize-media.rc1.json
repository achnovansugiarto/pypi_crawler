{
  "info": {
    "author": "Alessandro Puzielli aka Alepuzio",
    "author_email": "alessandro.puzielli@alepuzio.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing"
    ],
    "description": "# Organize Media (photos and videos)\n\n---------------\n\nThis application writes, inside an input existing directory , one directory list where the videos and photos are copied and organized in subdirectories following the year of creation, month of creation and topic.\nIn detail:\n* I declared a ( relative or absolute) path where there are the videos and photos organized in subdirectories ('topic') and another path where writing the copied files\n* The application writes the directories and subdirectories of they don't exist, otherwise they are not modified\n* The structure of the final directories is based on the extension and the topic of the files\n\n\n## Features\n\n### Future\n* In copying the files, every directory also will have a CSV file (different from media type) with the list of the files and the data (this feature will remove the **-w** flag in input)\n* Package the project\n* use the internal logging in python\n* add the control that *draft-tag* must has'nt not more than 100 row\n* create the specific file for Shutterstock: ( I put the filename, description and tags in different rows)\n* Using *chain of command* design pattern\n* Create one file *draft-tag-* for every image or video, in the list I create the *selected-tags* and after, into *join* phase, for every file I'm looking for the specific file tag, I read this and I join in the final file\n* Before writing the tags, I control that the rows have'nt it\n* When I create the final file CSV to upload, I have to create more than 1, so I can upload in batch way\n* Create directroy *realtime* and *timelapse* in directory di *copy* phase\n\n### Next\n* write the file *Contribuing* like [this](https://gist.github.com/PurpleBooth/b24679402957c63ec426/forks)\n\n### Running\n\n\n### Past\n\n* Organize the code: there are classes into directory test ( sistemare gli import nella directory organizemedia )\n* use travis for CI\n* delete class *AsString*\n* fix the style in the modules\n* put classes with the tests in *tests* package and classes with no tests in *src* package, where there are only the classes without the tests\n\n\n## Bug\n\n### Future\n* Fix the unit test\n* fix the Test Suite\n* Resolve the TODO in the code\n* Organize the structure following the guidelines in[The Hitchhiker's Guide to Python!](https://docs.python-guide.org/)\n* Delete the test classes where it s *import date* or *import datetime*\n* Create directories *exported* and *original* in *topic* in *copy* command\n* review the system of the calculation of the more important tags\n\n### Next\n* Write defensive class to manage the input parameters\n\n### Running\n\n### Past\n\n\n\n\n## Status CI Integration\n\n I use [Travis](https://travis-ci.org/)\n [![Build Status](https://travis-ci.org/alepuzio/organize-media.svg?branch=master)](https://travis-ci.org/alepuzio/organize-media)\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.0+\n- pip\n- pytest \n\n### Installing\n\n- Clone the project with *git-clone* (or download directly it)\n- Have fun!\n\n\n## Running the tests\n\n - Run **scripts/unit_testing.sh (or bat)** \n\n### Break down into to end to end tests\n\nNo indications\n\n\n### Coding styles sheets\n\nPlease read the file [CONTRIBUTING.md](http://github.com/alepuzio/organize-media/CONTRIBUTING.md)\n\n## Deployment\n\n - No package built (sorry, I'm a beginner in Python :) )\n - Run    **>>> python Main.py $ABSOLUTE-PATH-WHERE-IT-READS-THE-EXISTING-IMG $ABSOLUTE-PATH-WHERE-IT-COPIES-TH-IMG**\n\n### Built with:\n\n* [ViM](http://www.vim.org) - one of the best text editor I know\n* [pytest](https://docs.pytest.org/en/stable/) - most famous library about the unit testing in Python\n\n## Contributing\n\nPlease read the [Contributing.md](http://github.com/alepuzio/organize-media/CONTRIBUTING.md) for the details about the code of conduct and the process for submitting pull requests.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/alepuzio/organize-media/tags). \n\n## Authors\n\n* **Alessandro Puzielli** - *creator* - [Alepuzio](https://github.com/alepuzio)\n\nSee also the list of [contributors](https://github.com/alepuzio/organize-media/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgments\n\n* **PurpleBooth** - to publish an [excellent template](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2) of README that I used in this project \n* **Yegor256** - to write the post [Elegant READMEs](https://www.yegor256.com/2019/04/23/elegant-readme.html) about the README file and the [An Open Code Base Is Not Yet an Open Source Project](https://www.yegor256.com/2018/05/08/open-source-attributes.html) for the Open Source projects\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/alepuzio/organize-media",
    "keywords": "",
    "license": "GPL 3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "organize-media",
    "package_url": "https://pypi.org/project/organize-media/",
    "platform": "",
    "project_url": "https://pypi.org/project/organize-media/",
    "project_urls": {
      "Homepage": "http://github.com/alepuzio/organize-media"
    },
    "release_url": "https://pypi.org/project/organize-media/1.1.0/",
    "requires_dist": [
      "markdown"
    ],
    "requires_python": "",
    "summary": "This script copies the media files in the correct path as described by Daniele Carrer",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8650023,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66aebd7581315c5a7d1a5b9a82e49f63171b2cddcc7f9c53220bc0780baf3696",
          "md5": "96c764b62a10cb5a97201713b556d537",
          "sha256": "5fb493c36df6ae35662510c7f9118b57de1583da11b5a97756b2d76515d05f51"
        },
        "downloads": -1,
        "filename": "organize_media-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96c764b62a10cb5a97201713b556d537",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32806,
        "upload_time": "2020-11-13T11:24:15",
        "upload_time_iso_8601": "2020-11-13T11:24:15.398489Z",
        "url": "https://files.pythonhosted.org/packages/66/ae/bd7581315c5a7d1a5b9a82e49f63171b2cddcc7f9c53220bc0780baf3696/organize_media-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66aebd7581315c5a7d1a5b9a82e49f63171b2cddcc7f9c53220bc0780baf3696",
        "md5": "96c764b62a10cb5a97201713b556d537",
        "sha256": "5fb493c36df6ae35662510c7f9118b57de1583da11b5a97756b2d76515d05f51"
      },
      "downloads": -1,
      "filename": "organize_media-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96c764b62a10cb5a97201713b556d537",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32806,
      "upload_time": "2020-11-13T11:24:15",
      "upload_time_iso_8601": "2020-11-13T11:24:15.398489Z",
      "url": "https://files.pythonhosted.org/packages/66/ae/bd7581315c5a7d1a5b9a82e49f63171b2cddcc7f9c53220bc0780baf3696/organize_media-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}