{
  "info": {
    "author": "Geoff Williams",
    "author_email": "geoff@declarativesystems.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# k53certbot\n\nk53cerbot is specifically targeted at AWS EKS users who want to issue SSL \ncertificates based on \n[Kubernetes Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)\ndeclarations and are unable to use [cert-manager](https://cert-manager.io/) which is\nincompatibility with AWS Fargate.\n\n## Setup\n_k53certbot is intented to run as a `deployment` inside the `kube-system` \nnamespace of your Kubernetes cluster_\n\n### Container image (requires podman - or build manually with Docker)\n\n```shell\nmake image\n```\n\nAfter building, push the image somewhere you can access it from your EKS\ncluster, eg ECR or an Artifactory instance you control.\n\n### Kubernetes RBAC/IAM\n\n1. Create a IAM policy based on the [example](examples/Certbot.iam_policy.json)\n    * This grants access to all Route53 resources, you may want to add \n      restrictions\n2. Create a Kubernetes service account mapping the [IAM policy to a service\n   account in the Kubernetes cluster](https://eksctl.io/usage/iamserviceaccounts/)\n    * The example deployment expects service name `certbot-service` \n\n### Route53\n\n* Configure a\n  [public hosted zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html)\n  for the zone you wish to issue certificates in\n\n### External DNS\n\nExternal DNS manages the DNS record _for the ingress_ - follow the instructions\nhttps://github.com/kubernetes-sigs/external-dns/ to setup external-dns\n\n# AWS Load Balancer Controller\n\nAWS Load Balancer Controller exposes the services running behind Ambassador - \nfollow the instructions \nhttps://aws.amazon.com/about-aws/whats-new/2020/10/introducing-aws-load-balancer-controller/\n to setup the load balancer controller\n\n### Ingress controller\n\n* Kubernetes requires an Ingress Controller implementation to make your ingress\n  definitions do anything. \n  We suggest [Ambassador](https://www.getambassador.io/products/api-gateway/)\n\n### ZeroSSL Setup (not required if using Letsencrypt)\n\n* Create an \n  [opaque kubernetes secret](https://kubernetes.io/docs/concepts/configuration/secret/) containing the zerossl API key\n* The example scripts expect:\n    * secret name: `zerossl`\n    * data field: `zerossl_api_key`\n\n### k53certbot deployment\n\nDeploy the container image you built to the cluster:\n\n1. Adjust the [example](examples/k53certbot.kubectl.yaml) to suit your environment:\n    * `<REPLACE_WITH_YOUR_IMAGE>`\n    * `<REPLACE_WITH_YOUR_EMAIL>`\n    * remove `--provider zerossl` if using Letsencrypt\n2. `kubectl apply -y /path/to/edited/example/k53certbot.kubectl.yaml`\n3. Inspect the deployment once its running:\n    * `kubectl -n kube-system get pod`\n    * `kubectl -n kube-system get deployment ID_OF_DEPLOYMENT`\n    * `kubectl -n kube-system logs ID_OF_POD`\n    * ...etc\n\n## Provisioning TLS certificates\n\nOnce setup is complete, TLS certificates are provisioned by deploying a \nsuitable ingress, see [example](examples/ingress.kubectl.yaml) and adjust as\nneeded, then deploy with:\n\n```shell\nkubectl deploy -f /path/to/edited/example/ingress.kubectl.yaml\n```\n\nIf you've done everything right, the site will start working with TLS in a few\nminutes time, otherwise look at the pod logs for the container running \nk53certbot to start working out what is going on.\n\n**Tip**\n\nThere are a lot of moving parts needed before k53certbot can work - if you \nmanage it all in one go you deserve a medal!\n\nFor the rest of us - break your cluster deployment into steps:\n\n1. AWS Load Balancer + ambassador - can you see a service?\n2. External-DNS - can you access your deployment over plain `http` with the \n   right hostname?\n3. With all this working, your ready to try adding TLS with k53certbot\n\n## How does k53certbot work?\n\n1. Watch Kubernetes for ingress deployments\n2. For every change:\n    1. Get the FQDN the ingress\n    2. run `certbot` to register or de-register the FQDN - certbot has built\n       in support for Route 53 via python package `certbot-dns-route53`\n    3. `certbot` manages files under `/etc/letsencrypt` and will write the TLS\n       secrets there once they have been provisioned.\n    4. Create a kubernetes secret including the contents of the appropriate\n       files under `/etc/letsencrypt`:\n        * Secrets will be named: `tls-<FQDN WITH PERIODS CONVERTED TO HYPHENS>`\n          eg: the secret for `example.yourdomain.com` would be \n          `tls-examlple-yourdomain-com` - periods are replaced with hypens as\n          they cause problems in Ambassador\n        * Any existing secret with the same name will be replaced\n\n\n## Status\n\n* Experimental - does the bare minimum needed to issue an initial certificate\n\n\n## Features\n\n* [ZeroSSL support](https://zerossl.com/) by adapting \n  [certbot-zerossl](https://github.com/zerossl/certbot-zerossl)\n* [Letsencrypt support](https://letsencrypt.org/)\n* [DNS-01 challenge support](https://certbot.eff.org/docs/challenges.html#dns-01-challenge)\n* [AWS Fargate EKS compatible](https://docs.aws.amazon.com/eks/latest/userguide/fargate.html)\n* AWS service access via `iamserviceaccount` - no need (and not supported) to \n  embed AWS access keys in secrets, etc.\n\n## Todo\n\n* Certificate renewal (workaround: restart script)\n* Testing, bulletproofing, etc.\n\n## Hacking\n\n**Use live code in docker container**\n\n```shell\nrm /usr/local/lib/python3.8/site-packages/k53certbot/ -rf\nln -s /mnt/k53certbot /usr/local/lib/python3.8/site-packages/k53certbot -s\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/declarativesystems/k53certbot.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "k53certbot",
    "package_url": "https://pypi.org/project/k53certbot/",
    "platform": "",
    "project_url": "https://pypi.org/project/k53certbot/",
    "project_urls": {
      "Homepage": "https://github.com/declarativesystems/k53certbot.git"
    },
    "release_url": "https://pypi.org/project/k53certbot/0.1.0/",
    "requires_dist": [
      "certbot-dns-route53",
      "kubernetes",
      "loguru",
      "docopt",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Kubernetes + Route53 + ACME",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8883279,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7d4432e8c88801360d600ccae2f4a06e794e6aeb05c562d1ebbc001671da5ff",
          "md5": "02aad26bbf9c741468e75bf895dd1cc1",
          "sha256": "7c5c711c9335614c15ce805073d7d9d220774a55df4840079ac3ce8265a5d551"
        },
        "downloads": -1,
        "filename": "k53certbot-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02aad26bbf9c741468e75bf895dd1cc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13013,
        "upload_time": "2020-12-12T07:43:14",
        "upload_time_iso_8601": "2020-12-12T07:43:14.497761Z",
        "url": "https://files.pythonhosted.org/packages/c7/d4/432e8c88801360d600ccae2f4a06e794e6aeb05c562d1ebbc001671da5ff/k53certbot-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7d4432e8c88801360d600ccae2f4a06e794e6aeb05c562d1ebbc001671da5ff",
        "md5": "02aad26bbf9c741468e75bf895dd1cc1",
        "sha256": "7c5c711c9335614c15ce805073d7d9d220774a55df4840079ac3ce8265a5d551"
      },
      "downloads": -1,
      "filename": "k53certbot-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02aad26bbf9c741468e75bf895dd1cc1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13013,
      "upload_time": "2020-12-12T07:43:14",
      "upload_time_iso_8601": "2020-12-12T07:43:14.497761Z",
      "url": "https://files.pythonhosted.org/packages/c7/d4/432e8c88801360d600ccae2f4a06e794e6aeb05c562d1ebbc001671da5ff/k53certbot-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}