{
  "info": {
    "author": "Polydojo, Inc.",
    "author_email": "8079593+sumukhbarve@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "VF: Validation Functions (for py dicts.)\n========================\n\nVF is a simple tool for validating the **schema** of dict-like Python objects. It is well suited for validating user-submitted forms, JSON requests, etc.\n\n## Installation\nInstall via pip:\n```\npip install vf\n```\nOr download `vf.py` into your project directory.\n\n\n## Quickstart\nCreate a validator function by supplying a schema:\n```py\nimport vf;\npersonValidator = vf.dictOf({\n    \"_id\": vf.typeIs(str),\n    \"name\": vf.dictOf({\n        \"first\": vf.typeIs(str),\n        \"last\": lambda x: type(x) is str,\n    }),\n    \"birth_timestamp\": vf.typeIs(int),\n    \"gender\": lambda x: x in [\"MALE\", \"FEMALE\", \"OTHER\"],\n    \"parentIdList\": vf.listOf(vf.typeIs(str)),\n    \"spouceId\": lambda x: x is None or type(x) is str,\n    \"childrenIdList\": vf.listOf(vf.typeIs(str)),\n});\n```\n`vf.dictOf(.)` returns a function for schema validation. (Above, `personValidator` is the returned validation function.)\n\nUse the validator function to test if dicts are valid:\n```py\npersonValidator({\n    \"_id\": \"00a3\",\n    \"name\": {\"first\": \"John\", \"last\": \"Doe\"},\n    \"birth_timestamp\": 318191400000,\n    \"gender\": \"MALE\",\n    \"parentIdList\": [\"00a1\", \"00a2\"],\n    \"spouceId\": \"87b1\",\n    \"childrenIdList\": [\"00a6\", \"00a8\"],\n}); # Returns `True` => Valid\n```\nIf validation fails, a `vf.ValidationError` will be raised:\n```py\npersonValidator({\n    \"_id\": \"1c3f\",\n    \"name\": {\"first\": \"Jane\", \"last\": \"Doe\"},\n    \"birth_timestamp\": \"1990-01-01\",# NOT int => Invalid\n    \"gender\": \"FEMALE\",\n    \"parentIdList\": [\"1c3a\", \"1c3b\"],\n    \"spouceId\": None,\n    \"childrenIdList\": [],\n}); # Raises `vf.ValidationError` => Invalid\n```\n\nSchema Validation: How It Works\n-----------------------------------------\n\nThe schema supplied to `vf.dictOf(.)` should be a `dict`, where each value is a function. In the above example, `vf.typeIs(str)` is a shorthand for `lambda x: type(x) is str`.\n\nFor validating a test-dict `tDict` against a schema `schema`, we first ensure that the two have matching keys. Then, each value in `tDict` is supplied to the corresponding function in `schema`. If that function returns `True` (or a truthy value), the key/value pair is considered to be valid, invalid otherwise.\n\nVF includes a number of helpers for generating simple type-checking functions, which are documented below. But as a quick example,\n\n- `vf.typeIs(int)` returns a function for checking if the type of it's argument is an `int`.\n- `vf.listOf(vf.typeIs(str))` returns a function for checking for a list of strings.\n- `vf.allOf(vf.truthy, vf.typeIs(str))` returns a function that checks for non-blank (i.e. truthy) strings.\n\n#### Write Your Own `lambda`s!\n\nPlease note that you aren't limited to VF's helpers. You can write any `lambda` (or reference a `def`'d function) in your schema. For example:\n- instead of `vf.allOf(vf.truthy, vf.typeIs(str))`,\n- you may write `lambda x: x and type(x) is str`.\n\nMore importantly, you will likely have custom validation logic that VF can't anticipate. For example, you may want to match integers between `10` and `1500`. In that case, you could use something like:  \n- `lambda x: type(x) is int and 10 <= x <= 1500`\n\nQuick Plug\n--------------\nVF built and maintained by the folks at [Polydojo, Inc.](https://www.polydojo.com/), led by [Sumukh Barve](https://www.sumukhbarve.com/). If your team is looking for a simple project management tool, please check out our latest product: [**BoardBell.com**](https://www.boardbell.com/).\n\nHelper Nomenclature\n---------------------------\n\nAt Polydojo, boolean variables are typically given names starting with `is`, `did`, etc. That is, `isNone`, `isType`, `didConfirm` etc. would typically be booleans. Thus, instead of `isType`, VF includes `typeIs(.)`, which is a *helper* that returns a *function* for type-checking.\n\nList Of Helpers\n------------------\n### Simple functions:\n\nThese helpers are simple functions that return `True` or `False`.\n\n- `vf.truthy`: Helper function for checking truthy-ness.\n- `vf.falsy`: Helper function for checking falsy-ness.\n- `vf.noneIs`: Helper for checking `None`.\n\n### Helpers for generating functions:\n\nThese helpers return type-checking functions, which in-turn return `True` or `False`. Here-below, the phrase ***\"Makes `func(x)` for ...\"*** should be read as ***\"Returns a function on `x` for ...\"***\n\n- `vf.typeIs(typ)`: Makes `func (x)` for checking `type(x) is typ`.\n- `vf.typeIn(*typs)`: Makes `func (x)` for checking `type(x) in typs`.\n- `vf.instanceOf(*typs)`: Makes `func (x)` for checking `isinstance(x, typs)`.\n- `vf.patternIs(pattern)`: Makes `func (s)` for checking `s` against `pattern` via `re.match` or `re.Pattern.match`. (`s` may be a `str` or a compiled `re.Pattern`.)\n- `allOf (*fns)`: Makes `func (x)` for checking `all(fn(x) for fn in fns)`.;\n- `anyOf (*fns)`: Makes `func (x)` for checking `any(fn(x) for fn in fns)`.\n- `listOf (fn, minLen=0)`: Makes `func (li)` for checking `isinstance(li, list)`, `len(li) >= minLen` and `all(fn(x) for x in li)`.\n\n#### Dict Validation:\nAnd finally, of course, the dict validation function:\n\n- `dictOf(schema, extraKeysOk=False)`: Makes `func (d)` for **validating** `d` against `schema`. Raises `vf.ValidationError` if validation fails.\n\nIf `extraKeysOk=True` is passed, it is then acceptable for `d.keys()` to be a superset of `schema.keys()`. Otherwise, `d.keys()` must exactly match `schema.keys()` (irrespective of key-order).\n\nTesting & Contributing\n---------------------------\n\nInstall pytest via `pip install -U pytest`. Run tests with:\n```\npytest\n```\n\nIf you encounter a bug, please open an issue on GitHub; but if you find a security vulnerability, please email security@polydojo.com instead.\n\nIf you'd like to see a new feature or contribute code, please open a GitHub issue. We'd love to hear from you! Suggestions and code contributions will always be appreciated, big and small.\n\nLicensing\n------------\nCopyright (c) 2020 Polydojo, Inc.\n\n**Software Licensing:**  \nThe software is released \"AS IS\" under the **MIT License**, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Kindly see [LICENSE.txt](https://github.com/polydojo/vf/blob/master/LICENSE.txt) for more details.\n\n**No Trademark Rights:**  \nThe above software licensing terms **do not** grant any right in the trademarks, service marks, brand names or logos of Polydojo, Inc.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/polydojo/vf",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vf",
    "package_url": "https://pypi.org/project/vf/",
    "platform": "",
    "project_url": "https://pypi.org/project/vf/",
    "project_urls": {
      "Homepage": "https://github.com/polydojo/vf"
    },
    "release_url": "https://pypi.org/project/vf/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "VF: Validation Functions (for Python dicts.)",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8761904,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6654a467483381588963cac532fd69f4725d93cb385803bfeeaf4d671bca97f7",
          "md5": "8d6d4337b8ecd41ba0f75c0a44161a1e",
          "sha256": "90884a161e722cd55c7a77f49ea970277a9d1ea10a43f78571ffb8cde7981cb7"
        },
        "downloads": -1,
        "filename": "vf-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d6d4337b8ecd41ba0f75c0a44161a1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5506,
        "upload_time": "2020-11-27T08:46:24",
        "upload_time_iso_8601": "2020-11-27T08:46:24.427218Z",
        "url": "https://files.pythonhosted.org/packages/66/54/a467483381588963cac532fd69f4725d93cb385803bfeeaf4d671bca97f7/vf-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "855b68323370840a0f69cba629b3a2b960a79e780e47a395c1f884ac4bb3fd53",
          "md5": "653efe6187ef3d94c2841e17d0877225",
          "sha256": "f2cb1b65b75d744e7e1b9da6ccd6085c486da3c187255c2c660c405bcd48c3b7"
        },
        "downloads": -1,
        "filename": "vf-0.0.1rc0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "653efe6187ef3d94c2841e17d0877225",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3946,
        "upload_time": "2020-11-26T18:23:30",
        "upload_time_iso_8601": "2020-11-26T18:23:30.911103Z",
        "url": "https://files.pythonhosted.org/packages/85/5b/68323370840a0f69cba629b3a2b960a79e780e47a395c1f884ac4bb3fd53/vf-0.0.1rc0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9089c8007a1139fcb2f2e6a2396a65c6a6fb52f6ee6b459262f31d2882b2dc9",
          "md5": "323591f87b6d77917c8c30d4f32cd6b9",
          "sha256": "513ffc43f047e653a6b5e3a01f07d4db25251d0afed6e260d4b80f3c71029ddb"
        },
        "downloads": -1,
        "filename": "vf-0.0.1rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "323591f87b6d77917c8c30d4f32cd6b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4055,
        "upload_time": "2020-11-26T18:23:38",
        "upload_time_iso_8601": "2020-11-26T18:23:38.591020Z",
        "url": "https://files.pythonhosted.org/packages/c9/08/9c8007a1139fcb2f2e6a2396a65c6a6fb52f6ee6b459262f31d2882b2dc9/vf-0.0.1rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "376e02e8e7ac7939c97f24720a2bc6b7e658891abe709415c273198fddcd3b34",
          "md5": "8d0a52a3e3d576d1d3928b3c2a6e82cb",
          "sha256": "379b72b53da6b55aac437a3821ab916028b549a5f0e389eb011d06b451814a42"
        },
        "downloads": -1,
        "filename": "vf-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d0a52a3e3d576d1d3928b3c2a6e82cb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5642,
        "upload_time": "2020-11-27T09:58:00",
        "upload_time_iso_8601": "2020-11-27T09:58:00.385159Z",
        "url": "https://files.pythonhosted.org/packages/37/6e/02e8e7ac7939c97f24720a2bc6b7e658891abe709415c273198fddcd3b34/vf-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2739b4765fcca0d3648e013c6d1c3f015a248a41ee98d6ea9404b80d6c034b7",
          "md5": "6fd16659a40bdf9e42fffa9b1207e048",
          "sha256": "c045b23881b01175540a66f2cf5ac3a9ecf4990b795b07e6ca6882f6b3582f9b"
        },
        "downloads": -1,
        "filename": "vf-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6fd16659a40bdf9e42fffa9b1207e048",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6047,
        "upload_time": "2020-11-27T09:58:12",
        "upload_time_iso_8601": "2020-11-27T09:58:12.092497Z",
        "url": "https://files.pythonhosted.org/packages/f2/73/9b4765fcca0d3648e013c6d1c3f015a248a41ee98d6ea9404b80d6c034b7/vf-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "376e02e8e7ac7939c97f24720a2bc6b7e658891abe709415c273198fddcd3b34",
        "md5": "8d0a52a3e3d576d1d3928b3c2a6e82cb",
        "sha256": "379b72b53da6b55aac437a3821ab916028b549a5f0e389eb011d06b451814a42"
      },
      "downloads": -1,
      "filename": "vf-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d0a52a3e3d576d1d3928b3c2a6e82cb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 5642,
      "upload_time": "2020-11-27T09:58:00",
      "upload_time_iso_8601": "2020-11-27T09:58:00.385159Z",
      "url": "https://files.pythonhosted.org/packages/37/6e/02e8e7ac7939c97f24720a2bc6b7e658891abe709415c273198fddcd3b34/vf-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2739b4765fcca0d3648e013c6d1c3f015a248a41ee98d6ea9404b80d6c034b7",
        "md5": "6fd16659a40bdf9e42fffa9b1207e048",
        "sha256": "c045b23881b01175540a66f2cf5ac3a9ecf4990b795b07e6ca6882f6b3582f9b"
      },
      "downloads": -1,
      "filename": "vf-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6fd16659a40bdf9e42fffa9b1207e048",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6047,
      "upload_time": "2020-11-27T09:58:12",
      "upload_time_iso_8601": "2020-11-27T09:58:12.092497Z",
      "url": "https://files.pythonhosted.org/packages/f2/73/9b4765fcca0d3648e013c6d1c3f015a248a41ee98d6ea9404b80d6c034b7/vf-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}