{
  "info": {
    "author": "anki-code",
    "author_email": "no@no.no",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Shells",
      "Topic :: System :: System Shells",
      "Topic :: Terminals"
    ],
    "description": "<p align=\"center\">\nCheat sheet for the <a href=\"https://xon.sh\">xonsh shell</a> with copy-pastable examples. This is a good level of knowledge to start being productive.\n<br><br>\n<img src=\"https://repository-images.githubusercontent.com/310804308/f11fa180-280d-11eb-8fa4-c389308692bd\">\n</p>\n\n<p align=\"center\">\nIf you like the cheatsheet click ‚≠ê on the repo and <a href=\"https://twitter.com/intent/tweet?text=The%20xonsh%20shell%20cheat%20sheet.&url=https://github.com/anki-code/xonsh-cheatsheet\" target=\"_blank\">tweet</a> about it.\n</p>\n\n[Full screen reading](https://github.com/anki-code/xonsh-cheatsheet/blob/main/README.md)\n\n# What is xonsh?\n\nXonsh is a Python-powered, cross-platform, Unix-gazing shell language and command prompt. The language is a superset of Python 3.6+ with additional shell primitives that you are used to from [Bash](https://www.gnu.org/software/bash/) and [IPython](https://ipython.org/). It works on all Python-compatible systems, including Linux, macOS, and Windows. Try [right off the bat examples](https://github.com/anki-code/xonsh-cheatsheet/blob/main/README.md#xonsh-basics).\n\n# What does xonsh mean?\n\nThe \"xonsh\" word sounds like [conch [k…ëÀênt É]](https://www.google.com/search?q=what+is+conch) - a common name of a number of different sea snails or shells (üêö). Thus xonsh is the reference to the shell word that is commonly used to name [command shells](https://en.wikipedia.org/wiki/Shell_(computing)).\n\nYou will also face with \"xontrib\" word. The xontrib is short version of [\"(contrib)ution\"](https://www.collinsdictionary.com/dictionary/english/contribution) word and points to extensions, community articles and other materials around xonsh.\n\n# Install xonsh\n\nThere are three ways to use xonsh:\n\n1. **[Simple xonsh install](#simple-xonsh-install)**. You can use the system installed Python to install xonsh and dependencies. This is a good option if you don't plan to manage Python versions or virtual environments.\n\n2. **[Install xonsh with package and environment management system](#install-xonsh-with-package-and-environment-management-system)**. In this way you can flexibly manage the Python version, dependencies, and virtual environments, but because xonsh is a Python-based shell you have to understand what you're doing and the section below will provide some guidance.\n\n3. **[Try xonsh without installation](#try-xonsh-without-installation)**. Use Docker or the Linux AppImage to run and try xonsh.\n\n### Simple xonsh install\n\nMost modern operating systems have [Python](https://www.python.org/) and [PyPi (pip)](https://packaging.python.org/tutorials/installing-packages/) that are preinstalled or that can be installed easily. By installing from PyPi you will get [the latest version of the xonsh shell](https://github.com/xonsh/xonsh/releases). We highly recommend using the `full` version of the xonsh PyPi-package with [prompt-toolkit](https://python-prompt-toolkit.readthedocs.io/en/master/) on board:\n```xsh\npython -m pip install 'xonsh[full]'\n```\n\nAnother way is to install xonsh from the package manager that is supplied by the operating system. This way is _not_ recommended because in operating systems without the [rolling release concept](https://en.wikipedia.org/wiki/Rolling_release) the xonsh shell version may be very old ([check latest xonsh release](https://github.com/xonsh/xonsh/releases/) or [versions of xonsh across platforms](https://repology.org/project/xonsh/versions)) because the average [release cycle for the xonsh shell](https://github.com/xonsh/xonsh/releases) is quarter.\n\n```xsh\n# Not recommended but possible\napt install xonsh     # Debian/Ubuntu\npacman -S xonsh       # Arch Linux\ndnf install xonsh     # Fedora\nbrew install xonsh    # OSX\n```\n\nOn any system you can install `python` and then install xonsh from pip i.e., `any_pkg_manager install python && python -m pip install 'xonsh[full]'` This is the preferable way.\n\n### Install xonsh with package and environment management system\n\nXonsh is a Python-based shell, and to run xonsh you must have Python installed. The Python version and its packages can be installed and located anywhere: in the operating system directories, as part of a virtual environment, as part of the user directory, or as a virtual drive created temporarily behind the scenes by the Linux AppImage.\n\nThe first thing you have to remember is that when you execute `import` or any other Python code during a xonsh session it will be executed in the Python environment that was used to run current instance of xonsh.\n\nIn other words, you can activate a virtual environment during a xonsh session (using conda, pyenv, pipx) but the current session will continue to use packages from the environment that was used to run xonsh. And if you want to run xonsh with the packages from the currently activated virtual environment you have to install xonsh in that environment and run it directly.\n\nThus the second thing you should remember is that when you run xonsh in virtual environment it will try to load [xonsh RC files](https://xon.sh/xonshrc.html#run-control-file) (i.e. `~/.xonshrc`) and because the virtual environment is different from the environement you ordinarily use, the loading of the RC file will tend to fail because of the lack of the appropriate set of packages. When you write your `~/.xonshrc` it's good practice to check the existing external dependencies before loading them. See also [xontrib-rc-awesome](https://github.com/anki-code/xontrib-rc-awesome).\n\n#### Install xonsh on macOS or Linux using conda\n\nYou can use [Conda](https://docs.conda.io/en/latest/) with [Conda-forge](https://conda-forge.org/) to install and use xonsh. \n\n```xsh\n#\n# Install python using brew\n#\nzsh  # Default macOS shell\n# Install brew from https://brew.sh/\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nbrew install python  # or `python@3.11`\n\n#\n# Install Miniconda from https://docs.conda.io/en/latest/miniconda.html \n# (example for Mac, use the link for your platform)\n#\ncd /tmp\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\nchmod +x Miniconda3-latest-MacOSX-arm64.sh\n./Miniconda3-latest-MacOSX-arm64.sh\n# Add conda init code that was printed to `~/.zshrc` and restart zsh.\n# Or run `/Users/username/miniconda3/bin/conda init zsh` to add init to ~/.zshrc and restart zsh.\n\n# After restarting zsh you will see `(base)` in prompt.\n# This means that you're in the conda `base` environment.\n\n# Switch to Conda-forge channel\nconda config --add channels conda-forge\nconda config --set channel_priority strict \nconda update --all --yes\n\n# Install xonsh to the `base` environment\nconda install xonsh\nconda init xonsh  # Add init to ~/.xonshrc. You can also add `$CONDA_AUTO_ACTIVATE_BASE='false'` to avoid conda loading at start\n\nwhich xonsh\n# /Users/username/miniconda3/bin/xonsh\n\n# Run xonsh from the `base` environment\nxonsh\n```\nHow to work and understand the environments in conda:\n```xsh\n# `xpip` is used to install packages to the current xonsh session location (now it's `base` environment)\nxpip install ujson  \n\n# Example of creating the environment with a certain version of Python\nconda search python | grep 3.10\nconda create -n \"py310\" python=3.10 xonsh\n\nconda activate py310\n# Now the environment is `py310` but current xonsh session is still in `base` environment\n\nwhich xonsh\n# /Users/username/miniconda3/envs/py310/bin/xonsh\n\nwhich pip\n# /Users/username/miniconda3/envs/py310/bin/pip  # pip from `py310`\n\nwhich xpip\n# /Users/username/miniconda3/bin/pip  # pip from `base` environment from where xonsh ran\n\n# Run xonsh that installed in `py310` environment from xonsh runned in `base` environment\nxonsh\nconda activate py310\n# Now xonsh session is in `py310` environment and the current environment is also `py310`\n\nimport ujson\n# No module named 'ujson'   # YES because ujson was installed in `base` environment\n```\n\nOn Mac we also recommend to install [GNU coreutils](https://www.gnu.org/software/coreutils/) to use the Linux default tools (i.e. `ls`, `grep`):\n```xsh\nbrew install coreutils\n$PATH.append('/opt/homebrew/opt/coreutils/libexec/gnubin')  # add to ~/.xonshrc\n```\n\n#### How to understand the xonsh location\n\nWhich xonsh and which Python used to run the **current** xonsh session:\n\n```xsh\nimport sys\n[sys.argv[0], sys.executable]\n# ['/opt/homebrew/bin/xonsh', '/opt/homebrew/opt/python@3.11/bin/python3.11']\n\n\n@(sys.executable) -m site\n# Full info about paths\n```\n\nWhich `xonsh` and which `python` that will be executed to run **new instances** depends on the list of directories in `$PATH` or virtual environment:\n\n```xsh\n$PATH\n# ['/home/user/miniconda3/bin', '/opt/homebrew/bin]\n\n[$(ls -la @$(which xonsh)), $(ls -la @$(which python)), $(python -V)]\n# ['/home/user/miniconda3/bin/xonsh', '/home/user/miniconda3/bin/python -> python3.11', 'Python 3.11.1']\n\npython -m site\n# Full info about paths\n```\n\n#### pipx and xonsh\n\nThe [pipx](https://pipxproject.github.io/pipx/) tool is also good to install xonsh in case you need certain Python version:\n```xsh\n# Install Python before continuing\npip install pipx\npipx install --python python3.8 xonsh\npipx run xonsh \n# or add /home/$USER/.local/bin to PATH (/etc/shells) to allow running just the `xonsh` command\n```\n\n### Try xonsh without installation\n\n#### Docker\n\n```python\n# Docker with specific Python version and latest release of xonsh\ndocker run --rm -it python:3.11-slim /bin/bash \\\n -c \"pip install 'xonsh[full]' && xonsh\"\n\n# Docker with specific Python version and xonsh from the master branch\ndocker run --rm -it python:3.11-slim /bin/bash \\\n -c \"apt update && apt install -y git && pip install -U git+https://github.com/xonsh/xonsh && xonsh\"\n\n# Official xonsh docker image has an old version\ndocker run --rm -it xonsh/xonsh:slim\n```\n\n#### Linux-portable AppImage contains both [Python 3 and xonsh in one file](https://xon.sh/appimage.html)\n\n```python\nwget https://github.com/xonsh/xonsh/releases/latest/download/xonsh-x86_64.AppImage -O xonsh\nchmod +x xonsh\n./xonsh\n\n# Then if you don‚Äôt have Python on your host, you can acccess it from the AppImage by running:\n$PATH = [$APPDIR + '/usr/bin'] + $PATH\npython -m pip install tqdm --user  # the `tqdm` package will be installed to ~/.local/\nimport tqdm\n```\n\nYou can [build your own xonsh AppImage](https://xon.sh/appimage.html#building-your-own-xonsh-appimage) with the packages you need in 15 minutes.\n\n# Xonsh basics\n\nThe xonsh language is a superset of Python 3 with additional shell support. As result you can mix shell commands and Python code as easily as possible. Right off the bat examples:\n\n```xsh\ncd /tmp && ls                     # shell commands\n\n21 + 21                           # python command\n\nfor i in range(0, 42):            # mix python \n    echo @(i+1)                   # and the shell\n\nlen($(curl https://xon.sh))       # mix python and the shell\n\n$PATH.append('/tmp')              # using environment variables\n\np'/etc/passwd'.read_text().find('root')  # path-string returns Path \n                                         # (https://docs.python.org/3/library/pathlib.html)\n\nfor line in $(cat /etc/passwd).splitlines():  # read the lines from the output\n    echo @(line.split(':')[0])                # prepare line on Python and echo\n\nfor file in gp`*.*`:              # reading the list of files as Path-objects\n    if file.exists():             # using rich functionality of Path-objects\n        du -sh @(file)            # and pass it to the shell command\n\nimport json                       # python libraries are always at hand\nif docker_info := $(docker info --format '{{json .}}'):\n    print('ContainersRunning:', json.loads(docker_info)['ContainersRunning'])\n\nxpip install xontrib-prompt-bar   # xonsh has huge amount of powerful extensions\nxontrib load prompt_bar           # follow the white rabbit - https://github.com/topics/xontrib\n\n# Finally fork https://github.com/anki-code/xontrib-rc-awesome\n# to convert your ~/.xonshrc into a pip-installable package \n# with the extensions you need on board.\n```\n\nLooks nice? [Install xonsh](#install-xonsh)!\n\n## Three most frequent things that newcomers overlook\n\n### 1. [Shell commands, also known as subprocess commands](https://xon.sh/tutorial.html#python-mode-vs-subprocess-mode)\n\nThe first thing you should remember is that the shell commands are not the calls of another shell (i.e. bash). Xonsh has its own parser implementation for subprocess commands, and this is why a command like `echo {1..5} \\;` (brace expansion and escape characters in bash) won't work. Most sh-shell features [can be replaced](https://xon.sh/bash_to_xsh.html) by sane Python alternatives. For example, the earlier command could be expressed as `echo @(range(1,6)) ';'`.\n\nIf you think that only xonsh has the sh-uncompatible elements in its parser, you are mistaken. If we compare Bash and Zsh we will find that `pip install package[subpackage]` command will work in Bash but in Zsh the error will be raised because Zsh has a special meaning for square braces. It's normal to have an evolution in the syntax and features. \n\nBe calm and accept the sane and self-consistent Python-driven mindset.\n\n*Note:*\n\n* *Most of novice try to copy and paste sh-lang commands that contain special characters and get syntax errors in xonsh. If you want to run environment agnostic sh-lang's commands that you copy from the internet just use the macro call in xonsh `bash -c! echo {123}` or use [xontrib-sh](https://github.com/anki-code/xontrib-sh) to run context-free bash commands in xonsh by adding `! ` at the beginning of the command.*\n* *We highly recommend to taking a look at the section [Install xonsh with package and environment management system](#install-xonsh-with-package-and-environment-management-system).*\n\n\n### 2. [Strings and arguments in shell commands](https://xon.sh/tutorial_subproc_strings.html)\n\nThe second potential misunderstanding comes from the first. To escape special charecters, the special meaning of braces, or pass a string as an argument, use quotes. When in doubt, use quotes!\n\nYou should clearly understand the difference:\n\n <table style=\"width:100%\">\n  <tr>\n    <th>sh-lang shells</th>\n    <th>xonsh</th>\n  </tr>\n<tr>\n<td>\n1. Has an escape character:\n<pre>\n<b>echo 123\\ 456</b>\n# 123 456\n</pre>\n</td>\n    <td>\n1. Use quotes:\n<pre>\n<b>echo \"123 456\"</b>\n# 123 456\n</pre>\n<a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\">Escape character</a> to wrap and so on:\n<pre>\n<b>echo \"123\\\n456\"</b>\n# 123456\n</pre>\n\n</td>\n  </tr>\n\n<tr>\n<td>\n2. Open the quotes:\n<pre>\n<b>echo --arg=\"val\"</b>\n# --arg=val<br>\n# and:<br>\n<b>echo --arg \"val\"</b>\n# --arg val\n\n</pre>\n</td>\n    <td>\n2. Save quotes:\n<pre>\n<b>echo --arg=\"val\"</b>\n# --arg=\"val\"<br>\n# But if argument quoted entirely:<br>\n<b>echo --arg \"val\"</b>\n# --arg val\n</pre>\n</td>\n  </tr>\n\n<tr>\n<td>\n3. Brackets have no meaning:\n<pre>\n<b>echo {123} [456]</b>\n# {123} [456]<br><br><br>\n</pre>\n</td>\n    <td>\n3. Brackets have meaning:\n<pre>\n<b>echo {123} [456]</b>\n# SyntaxError<br>\n<b>echo \"{123}\" '[456]'</b>\n# {123} [456]\n</pre>\n</td>\n  </tr>\n</table> \n\n*Note:*\n\n* *You can wrap any argument into Python string substitution:*\n    ```python\n    name = 'snail'\n    echo @('--name=' + name.upper())\n    # --name=SNAIL\n    ```\n* *You can use the `showcmd` command to show the arguments list:*    \n    ```python\n    showcmd echo The @('arguments') @(['list', 'is']) $(echo here) \"and\" --say=\"hello\" to you\n    # ['echo', 'The', 'arguments', 'list', 'is', 'here\\n', 'and', '--say=\"hello\"', 'to', 'you']]    \n    ```\n\n\n### 3. The process substitution operator `$()` returns output with [universal new lines](https://www.python.org/dev/peps/pep-0278/)\n\nIn sh-compatible shells, the [process substitution operator](https://en.wikipedia.org/wiki/Process_substitution) `$()` executes the command and then splits the output and uses those parts as arguments. The command `echo $(echo -e \"1 2\\n3\")` will have three distinct arguments, `1`, `2` and `3` that will passed to the first `echo`.\n\nIn xonsh shell the `$()` operator returns the output of the command. The command `echo $(echo -e \"1 2\\n3\")` will have one argument, `1 2\\n3\\n` that will be passed to the first `echo`.\n\n*Note:*\n\n* *To do what sh-compatible shells are doing with the `$()` operator, the xonsh shell has the `@$()` operator that will be described in the next chapter.*\n    ```python\n    showcmd echo @$(echo \"1\\n2 3\\n4\")\n    # ['echo', '1', '2', '3', '4']\n    ```\n* *To transform output to the lines for the arguments list you can use [splitlines](https://docs.python.org/3/library/stdtypes.html#str.splitlines) function and the python substitution:*\n    ```python\n    showcmd echo @($(echo \"1\\n2 3\\n4\").splitlines())  # the first echo will get three arguments: \"1\", \"2 3\", \"4\"\n    # ['echo', '1', '2 3', '4']\n    ```\n* *Not all xonsh users like this behavior of `$()` operator, and in the future, this may be changed. There is [a thread to discussing](https://github.com/xonsh/xonsh/issues/3924) this and the [Xonsh Enhancement Proposal #2](https://github.com/anki-code/xonsh-operators-proposal/blob/main/XEP-2.rst).*\n\n# [Switching from `$` to `@`](https://github.com/xonsh/xonsh/issues/4152)\n\nBy default, the xonsh shell has a bash-like appearance for its interactive prompt: `user@host ~ $`. After reading the previous section you can understand that we highly recommended replacing `$` with `@` by adding this line to your `~/.xonshrc`:\n\n```python\n$PROMPT_FIELDS['prompt_end'] = '@'  # or '\\n@' to have fixed position of the command typing\n```\n\nOr by using [xontrib-prompt-bar](https://github.com/anki-code/xontrib-prompt-bar). Now the prompt will appear as: `user@host ~ @`. This will remind you that you are in the xonsh shell. You can use [xontrib-sh](https://github.com/anki-code/xontrib-sh) to run sh-shell commands.\n\n# [Operators](https://xon.sh/tutorial.html#captured-subprocess-with-and)\n\n### `$()` - capture and return output without printing stdout and stderr\n\nCaptures stdout and returns output with [universal new lines](https://www.python.org/dev/peps/pep-0278/):\n```python\nshowcmd $(echo -e '1\\n2\\r3 4\\r\\n5')    # Subproc mode\n# ['1\\n2\\n3 4\\n5\\n']\n\noutput = $(echo -e '1\\n2\\r3 4\\r\\n5')   # Python mode \noutput\n# '1\\n2\\n3 4\\n5\\n'\n```\n\n### `!()` - capture all and return object without printing stdout and stderr\n\nCaptures stdout and returns [CommandPipeline](https://xon.sh/api/procs/pipelines.html#xonsh.procs.pipelines.CommandPipeline). Truthy if successful (returncode == 0), compares to, iterates over lines of stdout:\n  \n```python\nret = !(echo 123)\nret\n#CommandPipeline(\n#  pid=404136,\n#  returncode=0,\n#  args=['echo', '123'],\n#  alias=None,\n#  timestamps=[1604742882.1826484, 1604742885.1393967],\n#  executed_cmd=['echo', '123'],\n#  input='',\n#  output='123\\n',\n#  errors=None\n#)   \n\nif ret:\n      print('Success')     \n#Success\n\nfor l in ret:\n      print(l)     \n#123\n#\n\n```\n\nNote! In some cases, to get the output you need to convert an object to a string or invoke `.end()` manually or use the `.out`:\n\n```xsh\nr = !(ls /)\nr.output\n# ''\n\nr.end()\nr.output\n# 'bin\\netc\\n...'\n\nr = !(ls /)\nr.out                # out is forcing ending\n# 'bin\\netc\\n...'\n\nr = !(ls /)\nprint(r)             # r will be converted to str and the ending will be forced\n# bin\n# etc\n# ...\n```\n\n### `$[]` - not capturing (return `None`), print stdout and stderr\n\nPasses stdout to the screen and returns `None`:\n\n```python\nret = $[echo 123]\n#123\nrepr(ret)\n'None'\n```\n\nThis is the same as `echo 123`, but this syntax allows explicitly running a subprocess command.\n\n### `![]` - capture all and return hidden object, print stdout and stderr\n\nPasses stdout to the screen and returns [HiddenCommandPipeline](https://xon.sh/api/procs/pipelines.html#xonsh.procs.pipelines.HiddenCommandPipeline):\n\n```python\nret = ![echo -e '1\\n2\\r3 4\\r\\n5']\n#1\n#3 4\n#5\nret               # No return value because it's hidden CommandPipeline object\nret.out           # But it has the properties from CommandPipeline\n'1\\n2\\r3 4\\n5\\n'\n```\n\nThis operator is used under the hood for running commands at the interactive xonsh prompt.\n\n### `@()` - use Python code as an argument or a callable alias\n\nEvaluates Python and passes the arguments:\n\n```python\nshowcmd 'Supported:' @('string') @(['list','of','strings']) \n#['Supported:', 'string', 'list', 'of', 'strings']\n\necho -n '!' | @(lambda args, stdin: 'Callable' + stdin.read())\n#Callable!\n```\n\n### `@$()` - split output of the command by white spaces for arguments list\n\n```python\nshowcmd @$(echo -e '1\\n2\\r3 4\\r\\n5')\n#['1', '2\\r3', '4', '5']\n```\nThis is mostly [what bash's `$()` operator does](https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html).\n\n# [Environment Variables](https://xon.sh/tutorial.html#environment-variables)\n\n```python\n${...}            # Get the list of environment variables\n__xonsh__.env     # Get the list of environment variables using Python syntax\n\n$VAR = 'value'    # Set environment variable\n\nENV = ${...}                # short typing\nENV.get('VAR', 'novalue')   # the good practice to have a fallback for missing value\n# 'value'\nENV.get('VAR2', 'novalue')  # the good practice to have a fallback for missing value\n# 'novalue'\n\n'VAR' in ${...}   # Check environment variable exists\n#True\n\n${'V' + 'AR'}     # Get environment variable value by name from expression\n#'value'\n\nprint($VAR)\nwith ${...}.swap(VAR='another value', NEW_VAR='new value'):  # Change VAR for commands block\n    print($VAR)\nprint($VAR)\n#value\n#another value\n#value\n\n$VAR='new value' xonsh -c r'echo $VAR'   # Change variable for subprocess command\n#new value\n\n__xonsh__.env.get('VAR', 'novalue')  # the way to call environment using the __xonsh__ builtin\n# 'value'\n```\n\nPython and subprocess mode:\n```python\nprint(\"my home is $HOME\")                        # Python mode\n# my home is $HOME\n\nprint(\"my home is \" + $HOME)                     # Python mode\n# my home is /home/snail\n\necho \"my home is $HOME\" as well as '$HOME'       # Subprocess mode\n# my home is /home/snail as well as /home/snail\n```\n\nWork with [`$PATH`](https://xon.sh/envvars.html#path):\n```python\n$PATH\n# EnvPath(\n# ['/usr/bin',\n#  '/sbin',\n#  '/bin']\n# )\n\n$PATH.add(p\"~/bin\", front=True, replace=True))   # Insert path '~/bin' at front of $PATH list and replace existing entries\n$PATH.add(p\"~/bin\", front=True)                  # Insert path '~/bin' at front of $PATH list\n$PATH.add(p\"~/bin\", front=False, replace=True))  # Insert path '~/bin' at end of $PATH list and replace existing entries\n$PATH.insert(0, '/tmp')                          # Insert path '/tmp' at front of $PATH list\n$PATH.append('/tmp')                             # Append path '/tmp' at end of $PATH list\n$PATH.remove('/tmp')                             # Remove path '/tmp' (first match)\n```\n\nSetup local paths by prepending to path via a loop in `.xonshrc`:\n```python\nimport os.path\nfrom os import path\n$user_bins = [\n    f'{$HOME}/.cargo/bin',\n    f'{$HOME}/.pyenv/bin',\n    f'{$HOME}/.poetry/bin',\n    f'{$HOME}/bin',\n    f'{$HOME}/local/bin',\n    f'{$HOME}/.local/bin', \n]\n\nfor dir in $user_bins:\n    if path.isdir(dir) and path.exists(dir):\n        $PATH.add(dir,front=True, replace=True)\n```\n\nSee also the list of [xonsh default environment variables](http://xon.sh/envvars.html).\n\n# [Aliases](https://xon.sh/tutorial.html#aliases)\n\n## Simple aliases\n\n```python\naliases['g'] = 'git status -sb'           # Add alias as string\naliases['e'] = 'echo @(2+2)'              # Add xonsh executable alias (ExecAlias)\naliases['gp'] = ['git', 'pull']           # Add alias as list of arguments\naliases['b'] = lambda: \"Banana!\\n\"        # Add alias as simple callable lambda\naliases |= {'a': 'echo a', 'b':'echo b'}  # Add aliases from the dict\ndel aliases['b']                          # Delete alias\n```\n\nEasy wrapping a command by using [ExecAlias](https://xon.sh/tutorial.html#aliases) with built-in [`$args`](https://xon.sh/tutorial.html#aliases) (or `$arg0`, `$arg1`, etc) variable:\n\n```python\naliases['echo-new'] = \"echo @($args) new\"\n$(echo-new hello)\n# 'hello new\\n'\n$(echo-new -n hello)\n# 'hello new'\n```\n\nAlso with handy `\"\"\"`-string to use `\"` and `'` without escaping:\n\n```python\naliases['scmd'] = \"\"\"showcmd @([a for a in $args if a != \"cutme\"])\"\"\"\n\nscmd\n# usage: showcmd [-h|--help|cmd args]\n# Displays the command and arguments as a list ...\n\nscmd 1 2 cutme 3\n#['1', '2', '3']\n```\n\n## [Callable aliases](https://xon.sh/tutorial.html#callable-aliases)\n\n```python\ndef _myargs1(args):\n#def _myargs2(args, stdin=None):\n#def _myargs3(args, stdin=None, stdout=None):\n#def _myargs4(args, stdin=None, stdout=None, stderr=None):\n#def _myargs5(args, stdin=None, stdout=None, stderr=None, spec=None):\n#def _myargs6(args, stdin=None, stdout=None, stderr=None, spec=None, stack=None):\n    print(args)\n    \naliases['args'] = _myargs1\ndel _myargs1\n\nargs 1 2 3\n#['1', '2', '3']\n```\n\nSimple definition with [decorator](https://wiki.python.org/moin/PythonDecorators#What_is_a_Python_Decorator):\n```xsh\n@aliases.register(\"hello\")\ndef __hello():\n    echo world\n    \nhello\n# world\n```\n\nRead stdin and write to stdout (real-life example - [xontrib-pipeliner](https://github.com/anki-code/xontrib-pipeliner)):\n```python\ndef _exc(args, stdin, stdout):\n    for line in stdin.readlines():\n        print(line.strip() + '!', file=stdout, flush=True)\n\naliases['exc'] = _exc\n\necho hello | exc\n# hello!\n```\n## Abbrevs\n\nThere is [xontrib-abbrevs](https://github.com/xonsh/xontrib-abbrevs) as alternative to aliases. You can create abbrev and set the position of editing:\n```xsh\nxpip install xontrib-abbrevs\nxontrib load abbrevs\n\nabbrevs['gst'] = 'git status'\ngst  # Once you hit <space> or <return> 'gst' gets expanded to 'git status'.\n\nabbrevs['gp'] = \"git push <edit> --force\"  # Set the edit position.\nabbrevs['@'] = \"@(<edit>)\"  # Make shortcut.\nabbrevs['...'] = \"cd ../..\"  # Workaround for syntax intersections with Python i.e. `elepsis` object from Python here.\n\n# You can set a callback that receives current command buffer and word that triggered abbrev\nabbrevs['*'] = lambda buffer, word: \"asterisk\" if buffer.text.startswith('echo') else word\nls *  # will stay\necho *  # will be transformed to `echo asterisk`\n```\n\n# [Path strings](https://xon.sh/tutorial.html#advanced-string-literals)\n\nThe p-string returns [Path object](https://docs.python.org/3/library/pathlib.html):\n\n```python\npath = p'~/.xonshrc'\npath\n# Path('/home/snail/.xonshrc')\n\n[path.name, path.exists(), path.parent]\n# ['.xonshrc', True, Path('/home/snail')]\n\n[f for f in path.parent.glob('*') if 'xonsh' in f.name]\n# [Path('/home/snail/.xonshrc')]\n\ndir1 = 'hello'\ndir2 = 'world'\npath = p'/tmp' / dir1 / dir2 / 'from/dir' / f'{dir1}'\npath\n# Path('/tmp/hello/world/from/dir/hello')\n```\n\nA simple way to read and write the file content using Path string:\n\n```python\ntext_len = p'/tmp/hello'.write_text('Hello world')\ncontent = p'/tmp/hello'.read_text()\ncontent\n# 'Hello world'\n```\n\n\n# [Globbing](https://xon.sh/tutorial.html#normal-globbing) - get the list of files from path by mask or regexp\nTo [Normal globbing](https://xon.sh/tutorial.html#normal-globbing) add `g` before back quotes:\n```python\nls *.*\nls g`*.*`\n\nfor f in gp`/tmp/*.*`:  # `p` is to return path objects\n    print(f.name)\n      \nfor f in gp`/tmp/*/**`:  # `**` is to glob subdirectories\n    print(f)\n\n```\nTo [Regular Expression Globbing](https://xon.sh/tutorial.html#regular-expression-globbing) add `r` before back quotes:\n```python\nls `.*`\nls r`.*`\n\nfor f in rp`.*`:          # `p` is to return path instances\n      print(f.exists())\n```\nTo [Custom function globbing](https://xon.sh/tutorial.html#custom-path-searches) add `@` and the function name before back quotes:\n```python\ndef foo(s):\n    return [i for i in os.listdir('.') if i.startswith(s)]\ncd /\n@foo`bi`\n#['bin']\n```\n\n# Macros\n\n## [Simple macros](https://xon.sh/tutorial_macros.html#function-macros)\n\n```python\ndef m(x : str):\n    return x\n\n# No macro calls:\n[m('me'), m(42), m(m)]\n# ['me', 42, <function __main__.m>]\n\n# Macro calls:\n[m!('me'), m!(42), m!(identity), m!(42), m!(  42 ), m!(import os)]\n# [\"'me'\", '42', 'identity', '42', '42', 'import os']\n\nm!(if True:\n    pass)\n# 'if True:\\n    pass'\n```\n\n## [Subprocess Macros](https://xon.sh/tutorial_macros.html#subprocess-macros)\n\n```python\necho! \"Hello!\"\n# \"Hello!\"\n\nbash -c! echo \"Hello!\"\n# Hello!\n\ndocker run -it --rm xonsh/xonsh:slim xonsh -c! 2+2\n# 4\n```\n\nInside of a macro, all [additional munging](https://xon.sh/tutorial.html#string-literals-in-subprocess-mode) is turned off:\n\n```python\n\necho $USER\n# lou\n\necho! $USER\n# $USER\n```\n\n## [Macro block](https://xon.sh/tutorial_macros.html#context-manager-macros)\n\n### Builtin macro Block\n```python\nfrom xonsh.contexts import Block\nwith! Block() as b:\n    qwe\n    asd\n    zxc\n\nb.macro_block\n# 'qwe\\nasd\\nzxc\\n\\n'\nb.lines\n# ['qwe', 'asd', 'zxc', '']\n```\n\n### Custom JSON block\n```python\nimport json\n\nclass JsonBlock:\n    __xonsh_block__ = str\n\n    def __enter__(self):\n        return json.loads(self.macro_block)\n\n    def __exit__(self, *exc):\n        del self.macro_block, self.macro_globals, self.macro_locals\n\n\nwith! JsonBlock() as j:\n    {\n        \"Hello\": \"world!\"\n    }\n    \nj['Hello']\n# world!\n```\n\n### Custom Docker block\n\nThe example is from [xontrib-macro-lib](https://github.com/anki-code/xontrib-macro-lib):\n\n```python\nfrom xonsh.contexts import Block\n\nclass Doxer(Block):\n    \"\"\"Run xonsh codeblock in docker container.\"\"\"\n\n    def __init__(self):\n       self.docker_image = 'xonsh/xonsh:slim'\n\n    def __exit__(self, *a, **kw):\n        $[docker run -it --rm @(self.docker_image) /usr/local/bin/xonsh -c @(self.macro_block)]\n\n\nwith! Doxer() as d:\n   pip install lolcat\n   echo \"We're in docker container now!\" | lolcat\n```\n\n### Macro blocks library\n\nSee also [xontrib-macro-lib](https://github.com/anki-code/xontrib-macro-lib).\n\n# [Tab-Completion](https://xon.sh/tutorial_completers.html)\n\n```python\ncompleter list  # List the active completers\n\n# Create your own completer:\ndef dummy_completer(prefix, line, begidx, endidx, ctx):\n    '''\n    Completes everything with options \"lou\" and \"carcolh\",\n    regardless of the value of prefix.\n    '''\n    return {\"lou\", \"carcolh\"}\n    \ncompleter add dummy dummy_completer  # Add completer: `completer add <NAME> <FUNC>`\n# Now press Tab key and you'll get {\"lou\", \"carcolh\"} in completions\ncompleter remove dummy\n```\n\n# Bind hotkeys in prompt toolkit shell\n\nUncover the power of [prompt_toolkit](https://github.com/prompt-toolkit/python-prompt-toolkit#python-prompt-toolkit) by [binding](https://xon.sh/tutorial_ptk.html) the [hotkeys](https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/src/prompt_toolkit/keys.py). Run this snippet or add it to `~/.xonshrc`:\n\n```python\nfrom prompt_toolkit.keys import Keys\n\n@events.on_ptk_create\ndef custom_keybindings(bindings, **kw):\n\n    # Press F1 and get the list of files\n    @bindings.add(Keys.F1)\n    def run_ls(event):\n        ls -l\n        event.cli.renderer.erase()\n    \n    # Press F3 to insert the grep command\n    @bindings.add(Keys.F3)\n    def say_hi(event):\n        event.current_buffer.insert_text('| grep -i ')\n        \n```\n\n# [Xontrib](https://xon.sh/tutorial_xontrib.html) - extension or plugin for xonsh\n\nXontrib lists: \n* [Github topic](https://github.com/topics/xontrib)\n* [Github repositories](https://github.com/search?q=xontrib-&type=repositories)\n* [awesome-xontribs](https://github.com/xonsh/awesome-xontribs)\n\nTo install xontribs xonsh has [`xpip`](https://xon.sh/aliases.html?highlight=aliases#xpip) - a predefined alias pointing to the pip command associated with the Python executable running this xonsh. Using `xpip` is the right way to install xontrib to be confident that the xontrib will be installed in the right environment.\n\nIf you want to create your own xontrib [using xontrib-template](https://github.com/xonsh/xontrib-template) is the best way:\n```python\nxpip install copier jinja2-time cookiecutter\ncopier gh:xonsh/xontrib-template .\n```\n\n# Xonsh Script (xsh)\n\nReal-life example of xsh script that has: arguments, tab completion for arguments (using [xontrib-argcomplete](https://github.com/anki-code/xontrib-argcomplete)), subprocess calls with checking the result, colorizing the result and exit code:\n```python\n#!/usr/bin/env xonsh\n# PYTHON_ARGCOMPLETE_OK                                  \nimport argparse\nimport argcomplete  # Tab completion support with xontrib-argcomplete\nfrom argcomplete.completers import ChoicesCompleter\n\nargp = argparse.ArgumentParser(description=f\"Get count of lines in HTML by site address.\")\nargp.add_argument('--host', required=True, help=\"Host\").completer=ChoicesCompleter(('xon.sh', 'github.com'))\nargcomplete.autocomplete(argp)\nargs = argp.parse_args()\n\nif result := !(curl -s -L @(args.host)):  # Python + Subprocess = ‚ô•\n    lines_count = len(result.out.splitlines())\n    printx(f'{{GREEN}}Count of lines on {{#00FF00}}{args.host}{{GREEN}}: {{YELLOW}}{lines_count}{{RESET}}')\nelse:\n    printx(f'{{RED}}Error while reading {{YELLOW}}{args.host}{{RED}}! {{RESET}}') # Colorizing messages\n    exit(1)  # Exit with code number 1\n```\nTry it in action:\n```python\nxonsh\npip install argcomplete xontrib-argcomplete\nxontrib load argcomplete\ncd /tmp\nwget https://raw.githubusercontent.com/anki-code/xonsh-cheatsheet/main/examples/host_lines.xsh\nxonsh host_lines.xsh --ho<Tab>\nxonsh host_lines.xsh --host <Tab>\nxonsh host_lines.xsh --host xon.sh  # OR: chmod +x host_lines.xsh && ./host_lines.xsh --host xon.sh\n# Count of lines on xon.sh: 568\n```\n\n# [History](https://xon.sh/tutorial_hist.html)\n\nThere are two history backends: `json` and [`sqlite`](https://xon.sh/tutorial_hist.html#sqlite-history-backend) which xonsh has by default. The `json` backend creates a json file with commands history on every xonsh session. The `sqlite` backend has one file with SQL-database.\n\nWe recommend using the `sqlite` backend because it saves the command on every execution, and querying of the history using SQL is very handy i.e. [history-search, history-pull](https://github.com/anki-code/xontrib-rc-awesome/blob/dfc9a8fc9a561b511262172c4ee58bd51dfc6b00/xontrib/rc_awesome.xsh#L158-L195).\n\n```python\necho 123\n# 123\n\n__xonsh__.history[-1]\n# HistoryEntry(cmd='echo 123', out='123\\n', rtn=0, ts=[1614527550.2158427, 1614527550.2382812])\n\nhistory info\n# backend: sqlite\n# sessionid: 637e577c-e5c3-4115-a3fd-99026f113464\n# filename: /home/user/.local/share/xonsh/xonsh-history.sqlite\n# session items: 2\n# all items: 8533\n# gc options: (100000, 'commands')\n\nsqlite3 $XONSH_HISTORY_FILE  \"SELECT inp FROM xonsh_history ORDER BY tsb LIMIT 1;\"\n# echo 123\n\naliases['history-search'] = \"\"\"sqlite3 $XONSH_HISTORY_FILE @(\"SELECT inp FROM xonsh_history WHERE inp LIKE '%\" + $arg0 + \"%' AND inp NOT LIKE 'history-%' ORDER BY tsb DESC LIMIT 10\");\"\"\"\ncd /tmp\nhistory-search \"cd /\"\n# cd /tmp\nhistory-search! cd /  # macro call\n# cd /tmp\n\npip install sqlite_web\nsqlite_web $XONSH_HISTORY_FILE  # Open the database in the browser\n\nhistory pull  # Pull the history from parallel sessions and add to the current session. [xonsh -V > 0.13.4]\n```\n\nThere is a third party history backend that's supplied in xontribs: [xontrib-history-encrypt](https://github.com/anki-code/xontrib-history-encrypt).\n\n# [Interactive mode events](https://xon.sh/events.html)\n\nWhen you're in xonsh interactive mode you can register an event, i.e.:\n\n```python\n@events.on_chdir\ndef mychdir(olddir, newdir, **kw):\n    echo Jump from @(olddir) to @(newdir)\n    \ncd /tmp\n# Jump from /home/snail to /tmp\n```\n\n# [Help](https://xon.sh/tutorial.html#help-superhelp-with)\n\nAdd `?` (regular help) or `??` (super help) to the command:\n\n```python\nls?\n# man page for ls\n\nimport json\njson?\n# json module help\njson??\n# json module super help\n```\n\n# Known issues and workarounds\n\n### ModuleNotFoundError\n\nSometimes when you're using PyPi, Conda, or virtual environments you can forget about the current version and location of Python and try to import packages in xonsh resulting in a `ModuleNotFoundError` error. Often this means you installed the package in another environment and didn't realise it. To avoid this read the section about xonsh installation above.\n\n### Intersection of console tools or shell syntax with Python builtins\n\nIn case of names or syntax intersection try to use aliases or [abbrevs](https://github.com/xonsh/xontrib-abbrevs) to resolve the conflict.\n\nThe case with `elepsis`:\n\n```xsh\naliases['...'] = 'cd ../..'  # looks nice, but\n...\n# Elepsis\n\ndel aliases['...']\nabbrevs['...'] = 'cd ../..'\n...  # becomes `cd ../..`\n```\n\nThe case with `import`:\n\n```xsh\ncd /tmp\n$PATH.append('/tmp')\necho 'echo I am import' > import && chmod +x import\n\nimport  # Run subprocess `./import`\n# I am import\n\nimport args  # Run Python import of `args` module\n# ModuleNotFoundError: No module named 'args'\n\naliases['imp'] = \"import\"\nimp\n# I am import\n```\n\n\n### Frozen terminal in interactive tools\n\nIf you run a console tool and get a frozen terminal (Ctrl+c, Ctrl+d is not working) this can be that the tool was interpreted as threaded and capturable program but the tool actually has interactive elements that expect the input from the user. There are four workarounds now:\n\n1. Disable [THREAD_SUBPROCS](https://xon.sh/envvars.html#thread-subprocs):\n\n    ```python\n    with ${...}.swap(THREAD_SUBPROCS=False):\n          ./tool.sh\n    ```\n\n2. Run the tool in uncaptured mode:\n\n    ```python\n    $[./tool.sh]\n    ```\n\n3. Set the unthreadable predictor:\n\n    ```python\n    __xonsh__.commands_cache.threadable_predictors['tool.sh'] = lambda *a, **kw: False  # use the pure name of the tool\n    ./tool.sh\n    ```\n\n4. Finally, check [`$XONSH_CAPTURE_ALWAYS`](https://xon.sh/envvars.html#xonsh-capture-always) value.\n\n### Uncaptured output\n\nIf you want to capture the output of a tool but it's not captured, there are three workarounds:\n\n1. Add the `head` tool at the end of the pipeline to force using the threadable mode:\n\n    ```python\n    !(echo 123 | head -n 1000)\n    #CommandPipeline(\n    #  returncode=0,\n    #  output='123\\n',\n    #  errors=None\n    #)\n    ```\n\n2. Change threading prediction for this tool:\n\n    ```python\n    __xonsh__.commands_cache.threadable_predictors['ssh'] = lambda *a, **kw: True\n\n    !(ssh host -T \"echo 1\")\n    #CommandPipeline(\n    #  returncode=0,\n    #  output='1\\n',\n    #  errors=None\n    #)\n    ```\n\n3. Wrap the tool into a bash subprocess:\n\n    ```python\n    !(bash -c \"echo 123\")\n    #CommandPipeline(\n    #  returncode=0,\n    #  output='123\\n',\n    #  errors=None\n    #)\n    ```\n\n### [Bad file descriptor](https://github.com/xonsh/xonsh/issues/4224)\n\nUsing callable aliases in a long loop can cause the `Bad file descriptor` error to be raised. The workaround is to avoid using callable aliases in the loop and moving the code from callable alias directly into the loop or [marking the callable alias as unthreadable](https://xon.sh/tutorial.html#unthreadable-aliases):\n\n```python\nfrom xonsh.tools import unthreadable\n\n@unthreadable\ndef _e():\n    execx('echo -n 1')\naliases['e'] = _e\n\nfor i in range(100):\n      e\n```\n\n# Tips and tricks\n\n### Make your own installable xonsh RC file\n\nStart by forking [xontrib-rc-awesome](https://github.com/anki-code/xontrib-rc-awesome).\n\n### Using a text block in the command line\n\nThe first way is to use multiline strings:\n```xsh\necho @(\"\"\"\nline 1\nline 2\nline 3\n\"\"\".strip()) > file.txt\n\n$(cat file.txt)\n# 'line 1\\nline 2\\nline 3\\n'\n```\nThe second way is to use xonsh macro block via [xontrib-macro](https://github.com/anki-code/xontrib-macro):\n```xsh\nxpip install xontrib-macro\n\nfrom xontrib.macro.data import Write\n\nwith! Write('/tmp/t/hello.xsh', chmod=0o700, replace=True, makedir=True, verbose=True):\n    echo world\n    \n/tmp/t/hello.xsh\n# world\n```\n\nRun commands in docker:\n```python\ndocker run -it --rm xonsh/xonsh:slim xonsh -c @(\"\"\"\npip install --disable-pip-version-check -q lolcat\necho \"We're in docker container now!\" | lolcat\n\"\"\")\n```\nDon't forget that `Alt+Enter` can run the command from any place where cursor is.\n\n### Ask to input argument and with autocomplete\n\n```xsh\nfrom prompt_toolkit import PromptSession\nfrom prompt_toolkit.completion import WordCompleter\n\ndef ask(arg : str, completions : list = []):\n    completer = WordCompleter(completions)\n    session = PromptSession(completer=completer)\n    user_input = session.prompt(f'{arg}: ')\n    return user_input\n\n\necho I am saying @(ask('What to say'))\n# What to say: hello\n# I am saying hello\n\necho Give @(ask('Fruit', ['apple', 'banana', 'orange'])) to @(ask('To', [$(whoami).strip()]))\n# Fruit: <Tab>\n# Fruit: apple\n# To: <Tab>\n# To: user\n# Give apple to user\n```\n\n### From the shell to REST API for one step\n\nIf you want to run shell commands from REST API you can create a [flask](https://flask.palletsprojects.com/) wrapper using [xontrib-macro](https://github.com/anki-code/xontrib-macro):\n```xsh\nxpip install flask xontrib-macro\n\ncd /tmp\n\nfrom xontrib.macro.data import Write\nwith! Write('myapi.xsh', chmod=0o700):\n    import json\n    from flask import Flask\n    app = Flask(__name__)\n    @app.route('/echo')\n    def index():\n        result = $(echo -n hello from echo)  # run subprocess command\n        return json.dumps({'result': result})\n    app.run()\n\n./myapi.xsh\n# Running on http://127.0.0.1:5000\n\ncurl http://127.0.0.1:5000/echo\n# {\"result\": \"hello from echo\"}\n```\nDon't forget [about API security](https://flask-httpauth.readthedocs.io/en/latest/#basic-authentication-examples).\n\n### Interactively debugging a script\n\nIf you want to have a breakpoint to debug a script, use the standard Python [pdb](https://docs.python.org/3/library/pdb.html):\n\n```xsh\nxpip install xontrib-macro\nfrom xontrib.macro.data import Write\nwith! Write('/tmp/run.xsh', chmod=0o700, replace=True, makedir=True):\n    echo hello\n    $VAR = 1\n    var = 2\n\n    import pdb\n    pdb.set_trace()   # interactive debug\n\n    echo finish\n\n\nxonsh /tmp/run.xsh\n# hello\n# > /tmp/run.xsh(9)<module>()\n# -> echo finish\n# (Pdb)\n\nvar\n# 2\n\n__xonsh__.env['VAR']\n# 1\n\nexit\n# bdb.BdbQuit\n```\n\n### Using xonsh wherever you go through the SSH\n\nYou've stuffed your command shell with aliases, tools, and colors but you lose it all when using ssh. The mission of the [xxh project](https://github.com/xxh/xxh) is to bring your favorite shell wherever you go through ssh without root access or system installations.\n\n### How to modify a command before execution?\n\nTo change the command between pressing enter and execution there is the [on_transform_command](https://xon.sh/events.html#on-transform-command) event:\n\n```python\nxpip install lolcat\n\n@events.on_transform_command\ndef _(cmd, **kw):\n    if cmd.startswith('echo') and 'lolcat' not in cmd:  \n        # Be careful with the condition! The modified command will be passed \n        # to `on_transform_command` event again and again until the event \n        # returns the same command. Newbies can make a mistake here and\n        # end up with unintended looping.\n        return cmd.rstrip() + ' | lolcat'\n    else:\n        return cmd\n        \necho 123456789 # <Enter>\n# Execution: echo 123456789 | lolcat\n```\n\n### Comma separated thousands in output (custom formatter)\n\nHere is a snippet from [@maxwellfire](https://github.com/maxwellfire):\n\n```xsh\n50000+50000\n# 100000\n\n500+500.123\n# 1000.123\n\nimport xonsh.pretty\nxonsh.pretty.for_type(type(1), lambda int, printer, cycle: printer.text(f'{int:,}'))\nxonsh.pretty.for_type(type(1.0), lambda float, printer, cycle: printer.text(f'{float:,}'))\n\n50000+50000\n# 100,000\n\n500+500.123\n# 1,000.123\n```\n\n### `chdir` [context manager](https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager) for scripting\n\n```xsh\nfrom xonsh.tools import chdir\n\ncd /tmp\nmkdir -p dir1\n\npwd\nwith chdir(\"./dir1\"):\n    pwd\npwd\n\n# /tmp\n# /tmp/dir1\n# /tmp\n```\n\n### Juggling of exit code using python substitution\n\ncd-ing into directory and if count of files less then 100 run `ls`:\n\n```xsh\naliases['cdls'] = \"cd @($arg0) && @(lambda: 1 if len(g`./*`) > 100 else 0) && ls\"\ncdls / && pwd\n# bin dev etc ...\n# /\ncdls /usr/sbin && pwd\n# /usr/sbin\n```\n\n### How to paste and edit multiple lines of code while in interactive mode\n\nIn some terminals (Konsole in Linux or Windows Terminal for WSL) you can press `ctrl-x ctrl-e` to open up an editor (`nano` in Linux) in the terminal session, paste the code there, edit and then quit out. Your multiple line code will be pasted and executed.\n\n### Waiting for the job done\n```python\nsleep 100 &  # job 1\nsleep 100 &  # job 2\nsleep 100 &  # job 3\n\nwhile $(jobs):\n    time.sleep(1)\n\nprint('Job done!')\n```\n\n### How to trace xonsh code?\n\nTrace with [hunter](https://github.com/ionelmc/python-hunter):\n\n```python\npip install hunter\n$PYTHONHUNTER='depth_lt=10,stdlib=False' $XONSH_DEBUG=1 xonsh -c 'echo 1'\n```\n\nOr try [xunter](https://github.com/anki-code/xunter) for tracing and profiling.\n\n### From Bash to Xonsh\n\nRead [Bash to Xonsh Translation Guide](https://xon.sh/bash_to_xsh.html), run `bash -c! echo 123` or install [xontrib-sh](https://github.com/anki-code/xontrib-sh).\n\n### Xonsh and Windows\n\nWe recommend using [WSL 2](https://learn.microsoft.com/en-us/windows/wsl/about) with [Manjaro](https://github.com/sileshn/ManjaroWSL2) (that maintains a [rolling release](https://en.wikipedia.org/wiki/Rolling_release)) on Windows. Don't forget to [fix PATH](https://github.com/xonsh/xonsh/issues/3895#issuecomment-713078931).\n\n# Answers to the holy war questions\n\n### Bash is everywhere! Why xonsh?\n\nPython is everywhere as well ;)\n\n### Xonsh is slower! Why xonsh?\n\nYou can spend significantly more time Googling and debugging sh-based solutions as well as significantly more time to make the payload work after running a command. Yeah, xonsh is a bit slower but you will not notice that in real life tasks :)\n\nAlso take a look:\n\n* [Python 3.12: A Game-Changer in Performance and Efficiency](https://python.plainenglish.io/python-3-12-a-game-changer-in-performance-and-efficiency-8dfaaa1e744c)\n* [Python 3.11 is up to 10-60% faster than Python 3.10](https://docs.python.org/3.11/whatsnew/3.11.html)\n* [Making Python 5x FASTER with Guido van Rossum](https://www.youtube.com/watch?v=_r6bFhl6wR8).\n\n### My fancy prompt in another shell is super duper! Why xonsh?\n\nThe fancy prompt is the tip of the iceberg. Xonsh shell brings other important features to love: [sane language](https://github.com/anki-code/xonsh-cheatsheet#basics), [powerful aliases](https://github.com/anki-code/xonsh-cheatsheet#aliases), [agile extensions](https://github.com/anki-code/xonsh-cheatsheet#xontrib---extension-or-plugin-for-xonsh), [history backends](https://github.com/anki-code/xonsh-cheatsheet#history), [fully customisable tab completion](https://github.com/anki-code/xonsh-cheatsheet#tab-completion), [magic macro blocks](https://github.com/anki-code/xonsh-cheatsheet#macro-block), [behaviour customisation via environment variables](https://xon.sh/envvars.html), and [more](https://github.com/anki-code/xonsh-cheatsheet#bind-hotkeys-in-prompt-toolkit-shell), and [more](https://github.com/anki-code/xonsh-cheatsheet#make-your-own-installable-xonsh-rc-file), and [more](https://github.com/anki-code/xonsh-cheatsheet#using-xonsh-wherever-you-go-through-the-ssh) :)\n\n### Xonsh has issues! Why xonsh?\n\nCompared to 15-20 year old shells, yeah, xonsh is a 5 year old youngster. But we've used it over these 5 years day by day to solve our tasks with success and happiness :)\n\n# Thank you!\n\nThank you for reading! This cheatsheet is the tip of the iceberg of the xonsh shell and you can find more in the [official documentation](https://xon.sh/contents.html#guides).\n\nAlso you can install the cheatsheet xontrib:\n```python\nxpip install xontrib-cheatsheet\nxontrib load cheatsheet\ncheatsheet\n# Opening: https://github.com/anki-code/xonsh-cheatsheet/blob/main/README.md\n```\n\nIf you like the cheatsheet, click ‚≠ê on the repo and <a href=\"https://twitter.com/intent/tweet?text=The%20xonsh%20shell%20cheat%20sheet.&url=https://github.com/anki-code/xonsh-cheatsheet\" target=\"_blank\">tweet</a>.\n\n# Credits\n* [Xonsh Tutorial](https://xon.sh/tutorial.html)\n* Most copy-pastable examples prepared by [xontrib-hist-format](https://github.com/anki-code/xontrib-hist-format)\n* The cheat sheet xontrib was created with [xontrib cookiecutter template](https://github.com/xonsh/xontrib-cookiecutter).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anki-code/xontrib-cheatsheet",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xontrib-cheatsheet",
    "package_url": "https://pypi.org/project/xontrib-cheatsheet/",
    "platform": "any",
    "project_url": "https://pypi.org/project/xontrib-cheatsheet/",
    "project_urls": {
      "Code": "https://github.com/anki-code/xontrib-cheatsheet",
      "Documentation": "https://github.com/anki-code/xontrib-cheatsheet/blob/master/README.md",
      "Homepage": "https://github.com/anki-code/xontrib-cheatsheet",
      "Issue tracker": "https://github.com/anki-code/xontrib-cheatsheet/issues"
    },
    "release_url": "https://pypi.org/project/xontrib-cheatsheet/0.4.2/",
    "requires_dist": [
      "xonsh"
    ],
    "requires_python": ">=3.6",
    "summary": "Cheat sheet for xonsh shell with copy-pastable examples.",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17439909,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "461a6f4cea72502c5fb17a305ea864c5837f43823fc1f52ddc85a8eefc93a5d1",
          "md5": "b90a0c2e6426c487533db4ff0c86d98a",
          "sha256": "6ce3fa2042bf62bd1836b462c1e8746eb90c2f4edb4642cd1b95491dd50024f2"
        },
        "downloads": -1,
        "filename": "xontrib_cheatsheet-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b90a0c2e6426c487533db4ff0c86d98a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18175,
        "upload_time": "2023-02-17T08:42:03",
        "upload_time_iso_8601": "2023-02-17T08:42:03.861444Z",
        "url": "https://files.pythonhosted.org/packages/46/1a/6f4cea72502c5fb17a305ea864c5837f43823fc1f52ddc85a8eefc93a5d1/xontrib_cheatsheet-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c500af5987f403ed21dcbdd5be3b9dc85742e285fcc8687d35a9fd24739d02ff",
          "md5": "3fc8783bcc3dc18f5f294377e220f60d",
          "sha256": "b699af6f635a76ed656b9df6732d683c71d3083a44ad08255177772f06e87b28"
        },
        "downloads": -1,
        "filename": "xontrib-cheatsheet-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fc8783bcc3dc18f5f294377e220f60d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48029,
        "upload_time": "2023-02-17T08:42:06",
        "upload_time_iso_8601": "2023-02-17T08:42:06.052017Z",
        "url": "https://files.pythonhosted.org/packages/c5/00/af5987f403ed21dcbdd5be3b9dc85742e285fcc8687d35a9fd24739d02ff/xontrib-cheatsheet-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb1f62ebd4a53df464adc01ac25c6849e3cf0cf45647dde5458376f9970ca67f",
          "md5": "3bae511bae11eedbf81934f41d6c64d7",
          "sha256": "ff523f14bd604d6261db9a0fbf7de1deba26bd1a0f14698ad8d6016cb3791e4b"
        },
        "downloads": -1,
        "filename": "xontrib_cheatsheet-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bae511bae11eedbf81934f41d6c64d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19459,
        "upload_time": "2023-03-24T19:18:59",
        "upload_time_iso_8601": "2023-03-24T19:18:59.075477Z",
        "url": "https://files.pythonhosted.org/packages/fb/1f/62ebd4a53df464adc01ac25c6849e3cf0cf45647dde5458376f9970ca67f/xontrib_cheatsheet-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5ec76b727d274e0ce6e2d719c0f8ba23b7b6c9ba7a1ccb53c009bab1fe38636",
          "md5": "a340fd2f5390bad5603fd112e1f4ff3c",
          "sha256": "b50067a651feb284e15be46691f6e08ec98734b85c1017cd6281e12d7678988e"
        },
        "downloads": -1,
        "filename": "xontrib-cheatsheet-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a340fd2f5390bad5603fd112e1f4ff3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 51977,
        "upload_time": "2023-03-24T19:19:00",
        "upload_time_iso_8601": "2023-03-24T19:19:00.691458Z",
        "url": "https://files.pythonhosted.org/packages/f5/ec/76b727d274e0ce6e2d719c0f8ba23b7b6c9ba7a1ccb53c009bab1fe38636/xontrib-cheatsheet-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6139b58e033a04a6b70e090ad5b73e0ea6abc519fd36b28c98358f83c6c26608",
          "md5": "95db135e714e79945449083de12778e1",
          "sha256": "ca6f74914325d148e2857c1799edaf3604e84dc47bfdb571ffc03ceb84c7d9bb"
        },
        "downloads": -1,
        "filename": "xontrib_cheatsheet-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95db135e714e79945449083de12778e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19992,
        "upload_time": "2023-03-24T19:59:41",
        "upload_time_iso_8601": "2023-03-24T19:59:41.001138Z",
        "url": "https://files.pythonhosted.org/packages/61/39/b58e033a04a6b70e090ad5b73e0ea6abc519fd36b28c98358f83c6c26608/xontrib_cheatsheet-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eeb0ac96b2d273e63c337d7c9377f6e69211394f84109743459c562558db4c8",
          "md5": "0e30e0daed6df2cae137c325bddba9c4",
          "sha256": "0132200c38b0a0da2345e773c08a72abd91b0ab6c1e8888756712ed1910c57db"
        },
        "downloads": -1,
        "filename": "xontrib-cheatsheet-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e30e0daed6df2cae137c325bddba9c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53504,
        "upload_time": "2023-03-24T19:59:43",
        "upload_time_iso_8601": "2023-03-24T19:59:43.062814Z",
        "url": "https://files.pythonhosted.org/packages/3e/eb/0ac96b2d273e63c337d7c9377f6e69211394f84109743459c562558db4c8/xontrib-cheatsheet-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b3867d6a3310d36a09be39d7fddeb6aec00c9ded96353e1f0d29849e2ff1e05",
          "md5": "c8609d25b9e3577e850a82c4f973e7b5",
          "sha256": "c818ff9243a7d435db5f6a0077118679eb042b853667c05478507539d1fa082f"
        },
        "downloads": -1,
        "filename": "xontrib_cheatsheet-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8609d25b9e3577e850a82c4f973e7b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19669,
        "upload_time": "2023-03-25T05:53:55",
        "upload_time_iso_8601": "2023-03-25T05:53:55.708862Z",
        "url": "https://files.pythonhosted.org/packages/2b/38/67d6a3310d36a09be39d7fddeb6aec00c9ded96353e1f0d29849e2ff1e05/xontrib_cheatsheet-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a6e4372ae0898cd0dafb96d20e44ae868bac4358c698299a0886ffb461fd4fc",
          "md5": "cbde85c03ba0dadaaeb316274fb3d446",
          "sha256": "125a5d8e1b6c94cf6b85b171bafb3d2e7ca7094c4c2e88bc95cd3d31e9929eb2"
        },
        "downloads": -1,
        "filename": "xontrib-cheatsheet-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cbde85c03ba0dadaaeb316274fb3d446",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52644,
        "upload_time": "2023-03-25T05:53:57",
        "upload_time_iso_8601": "2023-03-25T05:53:57.880395Z",
        "url": "https://files.pythonhosted.org/packages/6a/6e/4372ae0898cd0dafb96d20e44ae868bac4358c698299a0886ffb461fd4fc/xontrib-cheatsheet-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b3867d6a3310d36a09be39d7fddeb6aec00c9ded96353e1f0d29849e2ff1e05",
        "md5": "c8609d25b9e3577e850a82c4f973e7b5",
        "sha256": "c818ff9243a7d435db5f6a0077118679eb042b853667c05478507539d1fa082f"
      },
      "downloads": -1,
      "filename": "xontrib_cheatsheet-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8609d25b9e3577e850a82c4f973e7b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19669,
      "upload_time": "2023-03-25T05:53:55",
      "upload_time_iso_8601": "2023-03-25T05:53:55.708862Z",
      "url": "https://files.pythonhosted.org/packages/2b/38/67d6a3310d36a09be39d7fddeb6aec00c9ded96353e1f0d29849e2ff1e05/xontrib_cheatsheet-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a6e4372ae0898cd0dafb96d20e44ae868bac4358c698299a0886ffb461fd4fc",
        "md5": "cbde85c03ba0dadaaeb316274fb3d446",
        "sha256": "125a5d8e1b6c94cf6b85b171bafb3d2e7ca7094c4c2e88bc95cd3d31e9929eb2"
      },
      "downloads": -1,
      "filename": "xontrib-cheatsheet-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cbde85c03ba0dadaaeb316274fb3d446",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52644,
      "upload_time": "2023-03-25T05:53:57",
      "upload_time_iso_8601": "2023-03-25T05:53:57.880395Z",
      "url": "https://files.pythonhosted.org/packages/6a/6e/4372ae0898cd0dafb96d20e44ae868bac4358c698299a0886ffb461fd4fc/xontrib-cheatsheet-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}