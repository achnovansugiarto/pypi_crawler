{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# techcombine-framework\n\n## Installation for everyone\n```bash\n$pip install techcombine\n```\n\n## Installation for Developer\n```bash\n$pip install techcombine[dev]\n```\nNow you can test this package by using ```pytest``` or ```pytest direstory/```, For example\n```bash\n$pytest\n# or\n$pytest .\\techcombine\\tests\\\n```\n\n## Installation from sources\n```bash\n(env)$python setup.py install\n```\n\n## manual\n### class LINENotify\nMethod: **notify_hook(subtitle, api, token, data=None, \\*\\*kwargs)** Make webhook to Line Notify from your server<br>\n    return: request\n```python\nfrom techcombine.utils import generate_notify_data\nLINENotify.notify_hook(subtitle, data=None: dict, **kwargs)\n\n# When you use this method you need to defind variable in django.conf settings\nLINE_NOTIFY_TOKEN = some sting + 'access_token'\nLINE_NOTIFY_API = 'https://notify-api.line.me/api/notify'\n\n# Data example\ndata = {\n  \"Order ID\": order.slug,\n  \"email\": order.email,\n  \"first_name\": order.first_name,\n  \"phone_number\": order.phone_number,\n  \"created_at\": order.created_at,\n} # Or use generate_notify_data(ojb)\n```\nparameter:<br>\n- subtitle: (str) Is subtitle of data hook to line notify chat\n- data: (default=None/DictType only) Is dict of your all data to show in mail\n- Or using **dict\n\nMethod: **generate_notify_data(obj, key_type=\"id\", header=None)** Generate dict data from django models object.\n    return: dict data format for using in notify_hook()\n```python\nfrom techcombine.utils import generate_notify_data\ndata = generate_notify_data(ojb, key_type=\"id\", header=None)\n```\nparameter:<br>\n- obj: (Django models object) field['obj.id or obj.slug', 'name', 'email', 'created_at', 'url'] ```#if header=None: data will doesn't have url field```\n- key_type: (str) Type of object key from ID or Slug\n- header: (str) For fill link url of object\n\n### Class MailService\nMethod: **send_email(from_email, to_emails, subject, html_content, token)** Send email from from_email to to_email by sendgrid<br>\n        return request response\n```python\nfrom techcobine.mail import MailService\nimport os\n\nfrom_email = 'from_email@example.com',\nto_emails = 'to@example.com',\nsubject = 'For example subject',\nhtml_content = '<strong>and easy to do anywhere, even with Python</strong>'\ntoken = os.environ.get('SENDGRID_API_KEY')\n\nMailService.send_email(from_email, to_emails, subject, html_content, token)\n```\nparameter:\n- **from_email**: type(string), Is an email sender.\n- **to_email**: type(string), Is an email recipients.\n- **subject**: type(string), Is subject of this email.\n- **html_content**: type(string), write html for render template on email.\n- **token**: type(string), Is sendgrid api token.\n\n\nMethod: **send_verify_email(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)** Send verify email from from_email to to_email by sendgrid<br>\nreturn: request response\n```python\nMailService.send_verify_email(from_email, to_email, host_name, user_tokenm sendrid_token)\n```\n\nMethod: **send_reset_password(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)** Send to reset password<br>\nreturn: request response\n```python\nMail.Service.send_reset_password(from_email, to_email, host_name, user_tokenm sendrid_token)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chinnawatp/techcombine-framework",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Techcombine developer team",
    "maintainer_email": "chin@techcombine.co",
    "name": "techcombine",
    "package_url": "https://pypi.org/project/techcombine/",
    "platform": "any",
    "project_url": "https://pypi.org/project/techcombine/",
    "project_urls": {
      "Homepage": "https://github.com/chinnawatp/techcombine-framework"
    },
    "release_url": "https://pypi.org/project/techcombine/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6.1",
    "summary": "Techcombine framework for ecommerce",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6746190,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "087d01eb0fd906b813cc25d7c330dec0f5e909f00ee170a45e0fc562dabf6d68",
          "md5": "019645e6d4016f687baa2317711ca95b",
          "sha256": "3389c00514ee58b4fffc43cddd9ba123835b0fbcfd3834919f532ef1e409b1d9"
        },
        "downloads": -1,
        "filename": "techcombine-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "019645e6d4016f687baa2317711ca95b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 6032,
        "upload_time": "2020-02-28T03:39:41",
        "upload_time_iso_8601": "2020-02-28T03:39:41.810054Z",
        "url": "https://files.pythonhosted.org/packages/08/7d/01eb0fd906b813cc25d7c330dec0f5e909f00ee170a45e0fc562dabf6d68/techcombine-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d337e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38",
          "md5": "5d622a84fe56034f9855cd235c73b41d",
          "sha256": "2e456c11961fc77077bd139af9d8c2601f6fe7eeadfdb8487cad358a3e675f43"
        },
        "downloads": -1,
        "filename": "techcombine-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d622a84fe56034f9855cd235c73b41d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 7639,
        "upload_time": "2020-03-04T08:10:11",
        "upload_time_iso_8601": "2020-03-04T08:10:11.040147Z",
        "url": "https://files.pythonhosted.org/packages/5d/33/7e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38/techcombine-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d337e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38",
        "md5": "5d622a84fe56034f9855cd235c73b41d",
        "sha256": "2e456c11961fc77077bd139af9d8c2601f6fe7eeadfdb8487cad358a3e675f43"
      },
      "downloads": -1,
      "filename": "techcombine-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5d622a84fe56034f9855cd235c73b41d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1",
      "size": 7639,
      "upload_time": "2020-03-04T08:10:11",
      "upload_time_iso_8601": "2020-03-04T08:10:11.040147Z",
      "url": "https://files.pythonhosted.org/packages/5d/33/7e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38/techcombine-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}