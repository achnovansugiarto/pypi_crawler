{
  "info": {
    "author": "gunville",
    "author_email": "rk13088@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Bottle",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n## JwtEncoder\n\n**JwtEncoder** provides abstracted JWT token generation (using [PyJWT](https://pypi.org/project/PyJWT/) and validation with a dictionary configuration ment to simply creation and deployment.\n\n### Installation\n\n```bash\n# pip install JwtEncoder\n```\n### Usage\n> Token creator:\n```python\nfrom JwtEncoder import JwtEncoder\nfrom config import jwt_config\n\njenc = JwtEncoder(jwt_config)\n\ntok = jenc.encode({'hello': 'world', 'aud': 'xyz'})\n```\n> Token consumer:\n```python\nfrom JwtEncoder import JwtEncoder\nfrom config import jwt_config\n\njenc = JwtEncoder(jwt_config)\n\npayload = jenc.decode(tok, audience='xyz')\n\nprint(payload['hello'])  # 'world'\n\n```\n#### Signature\n```python\njenc = JwtEncoder(jwt_config=config)\n```\n**`jwt_config`** A python `dict` used to configure a JWT Authorizor.\n* The makeup of this dict is discussed below in more detail. \n* By default a symmetric key is generated and tokens are signed using the **HS256** signing algorithm.\n\n#### JwtEncoder Methods\n\n**`tok = jenc.encode(payload, **kwargs)`** \n\n* Returns a JWT token `tok` from the dict `payload` with a signature and options described in `jwt_config`.  \n* Additional options (kwargs) can be included as specified in the [PyJWT documentation](https://pyjwt.readthedocs.io/en/stable/)\n\n**`pay = jenc.decode(tok, **kwargs)`**\n\n* Validates the JWT token `tok` and returns decoded payload `pay` using the signature algorithm, signing keys, and issuer specified in `jwt_config`. \n* Additional options (kwargs) can be provided as specified in [PyJWT documentation](https://pyjwt.readthedocs.io/en/stable/)\n\n**`unverpay = jenc.decode_noverify(tok)`**\n\n* Returns contents of the payload `unverpay`, without verifying the signature or other jwt elements.\n* The token should be verified with `jenc.decode()` before any contents are used for authorization or authentication.\n\n**`hdrs = jenc.header(tok)`**\n* Returns JWT header options.\n* The tok should be validated first with `jenc.decode()`\n\n## *jwt_config* configuration details\n\n**JwtEncoder** uses the **PyJWT** module to implement both encoding and decoding of JWT's. The **`jwt_config`** python *`dict`* permits **JwtEncoder**  to support a various different JWT signing methods. These include:\n* shared key signing (symmetric key)\n* public and private key (asymmetric key)\n* providing an X509 RSA certificate (asymmetric key)\n* JWKS url (asymmetric key)\n\nThe choice determines which options and which signing algorithms are valid.\n#### shared key (symmetric key)\n\nTo use a symmetric key **`jwt_config`** is of the form:\n```python\njwt_config = {\n    'key': 'mysecretkey',\n    'alg': 'HS256'  # any valid JWT HS type\n    'iss': 'urn:myissuer',\n    'ttl': 3600 \n}\n```\n* **`key`** the value of this is the shared binary signing key, and `key` indicates this JwtEncoder will use symmetric key signing.\n* **`alg`** specifies the algorithm. For a symmentric key the default signing algorithm is **HS256**.\n\n#### public/private key (asymmetric key)\n\n**`pubkey`** and **`privkey`** (either or both) in **jwt_config*** indicates the JwtEncoder will use asymmetric keys for signing:\n```python\njwt_config = {\n    'pubkey': b'------BEGIN PUBLIC KEY....',\n    'privkey': b'------BEGIN PRIVATE KEY...',\n    'alg': 'RS256',\n    'iss': 'urn:myissuer'\n}\n```\n* **`pubkey`** and **`privkey`** are binary, PEM encoded keys. \n* Asymmetric signing can include RSA or elliptic curve key pairs (with the appropriate `alg` choice.)\n* The default algorithm (`alg`) is **RS256** unless specified otherwise.\n* If only the `pubkey` is provided the JwtEncoder can only decode tokens.\n* If only the `privkey` is provided the JwtEncoder can only encode tokens.\n\n#### X509 certificate (asymmetric key)\nA binary X509 certificate indicates the JwtEncoder will use asymmetric RSA signing keys:\n```python\njwt_config = {\n    'cert' : b`----BEGIN CERTIFICATE---....',\n    'alg': 'RS256',\n    'iss': 'urn:xyz'\n}\n```\n* `cert` provides only a public key, and hence  only token decoding - unless a `privkey` is also provided in the `jwt_config`.\n* No validation of the X509 certificate authenticity is made.\n* The default `alg` is **RS256**\n\n#### JWKS retrieval\nRetrieves JASON Web Key Sets (JWKS) signing keys from the specified URL:\n```python\njst_config = {\n    'jwks_url': 'https://.....',\n    'iss': 'api://myapi'\n}\n```\n* This retrieves JWKS keys (for example, from an OIDC provider)  The retrival specifies the algorithms used.\n* Any number of keys can be provided by the jwks_url and the decoder will use the algorithm and signing key identifier (`kid`) specified in the jwt header. \n* You can only decode tokens using the `jwks_url` method.\n\n### Additional Options\n\n**`alg`** - *algorithm*\n\n* `alg` specifies the signing algorithm used.\n* For symmetric signing the default is `HS256`; for asymmetric signing, `RS256`\n* There are various signing algorithms outlined in the JWT specifications, and in the PyJWT documentation.\n\n**`ttl`** - *time to live*\n\n* *time to live* is the length of time the tokens the JwtEncoder generates will be valid.\n* If `ttl` is not specified, 3600 Seconds is used by default.\n* The token `exp` value is set to the current epoch time + ttl; the token will also include `nbf` and `iat` set to the current time.\n* If `ttl` is explicitly set to `None`, the `iat`, `nbf`, and `exp` elements are not added to token encoding - the tokens do not expire.\n* Decoding an expired token raises an exception.\n\n**`iss`** - *issuer*\n\n* The issuer is added as `iss` to the payload for encoding tokens, and is verified when tokens are decoded.  \n* An alternate issuer can be specified by adding `iss` to the payload before calling `encode({'iss': 'xyz'})`, and can be verified by passing the kwarg `issuer` on decode (e.g. `decode(token,issuer='xyz'))`\n* decoding a token where the token `iss` doesn't match the issuer generates an exception.\n\n### Audience Validation\n\nIf a jwt has an `aud` (audience) element specified when encoded, then `audience` kwarg must be specified when decoding for the token to validate.\n```python\ntok = jenc.encode({'aud': 'db21', 'scp': ['table.write']})\n...\npay = jenc.decode(tok, audience=['db21', 'db22'])\n```\n* `audience` can be a `list`, as in the example, containing multiple options.  The token need only match one of them.\n* decoding a token without the matching audience generates an exception.\n\n### Generating Signing Keys\n\nFor reference only:\n\nGenerating Eliptic Curve key pairs using Openssl:\n```bash\n# openssl ecparam -name prime256v1 -genkey -noout -out private.pem\n# openssl ec -in private.pem -pubout -out public.pem\n```\n\nGenerating RSA key pairs using Openssl:\n```bash\n# openssl genrsa  -out rsaprivate.pem 2048\n# openssl rsa -in rsaprivate.pem -pubout -out rsapublic.pem\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Glocktober/JwtEncoder",
    "keywords": "'jwt oidc jwks'",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "JwtEncoder",
    "package_url": "https://pypi.org/project/JwtEncoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/JwtEncoder/",
    "project_urls": {
      "Homepage": "https://github.com/Glocktober/JwtEncoder",
      "overview": "https://github.com/Glocktober/JwtEncoder/blob/main/README.md",
      "repo": "https://github.com/Glocktober/JwtEncoder"
    },
    "release_url": "https://pypi.org/project/JwtEncoder/21.8.30/",
    "requires_dist": [
      "cryptography (>=3.0)",
      "Requests (>=2.26.0)",
      "PyJWT (>=2.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "JWT authentication plugin for Bottle",
    "version": "21.8.30",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11341219,
  "releases": {
    "21.8.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ee9da3a9b04d9936abeda1780a9f86cf56f53b925a69ff0decaad88c1d2d908",
          "md5": "66898cd23ca63eee242c2d19a7b153a9",
          "sha256": "783f5929e19b303048ce1b765b6c3508ed59d6db7628992261e489379c1494f5"
        },
        "downloads": -1,
        "filename": "JwtEncoder-21.8.30-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66898cd23ca63eee242c2d19a7b153a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7556,
        "upload_time": "2021-09-01T21:13:03",
        "upload_time_iso_8601": "2021-09-01T21:13:03.772705Z",
        "url": "https://files.pythonhosted.org/packages/2e/e9/da3a9b04d9936abeda1780a9f86cf56f53b925a69ff0decaad88c1d2d908/JwtEncoder-21.8.30-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff26fd387e8b085d509f55f3f966fcdf7a5982c63ae203e33d014f10a0d71e1c",
          "md5": "98604d66e5e2b64b0d89b58931eedbfe",
          "sha256": "8d189b442113bea88465f97e6e6ac15f8ef7552b704f1b757df889f4bcc5033f"
        },
        "downloads": -1,
        "filename": "JwtEncoder-21.8.30.tar.gz",
        "has_sig": false,
        "md5_digest": "98604d66e5e2b64b0d89b58931eedbfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7311,
        "upload_time": "2021-09-01T21:13:04",
        "upload_time_iso_8601": "2021-09-01T21:13:04.881439Z",
        "url": "https://files.pythonhosted.org/packages/ff/26/fd387e8b085d509f55f3f966fcdf7a5982c63ae203e33d014f10a0d71e1c/JwtEncoder-21.8.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ee9da3a9b04d9936abeda1780a9f86cf56f53b925a69ff0decaad88c1d2d908",
        "md5": "66898cd23ca63eee242c2d19a7b153a9",
        "sha256": "783f5929e19b303048ce1b765b6c3508ed59d6db7628992261e489379c1494f5"
      },
      "downloads": -1,
      "filename": "JwtEncoder-21.8.30-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66898cd23ca63eee242c2d19a7b153a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7556,
      "upload_time": "2021-09-01T21:13:03",
      "upload_time_iso_8601": "2021-09-01T21:13:03.772705Z",
      "url": "https://files.pythonhosted.org/packages/2e/e9/da3a9b04d9936abeda1780a9f86cf56f53b925a69ff0decaad88c1d2d908/JwtEncoder-21.8.30-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff26fd387e8b085d509f55f3f966fcdf7a5982c63ae203e33d014f10a0d71e1c",
        "md5": "98604d66e5e2b64b0d89b58931eedbfe",
        "sha256": "8d189b442113bea88465f97e6e6ac15f8ef7552b704f1b757df889f4bcc5033f"
      },
      "downloads": -1,
      "filename": "JwtEncoder-21.8.30.tar.gz",
      "has_sig": false,
      "md5_digest": "98604d66e5e2b64b0d89b58931eedbfe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7311,
      "upload_time": "2021-09-01T21:13:04",
      "upload_time_iso_8601": "2021-09-01T21:13:04.881439Z",
      "url": "https://files.pythonhosted.org/packages/ff/26/fd387e8b085d509f55f3f966fcdf7a5982c63ae203e33d014f10a0d71e1c/JwtEncoder-21.8.30.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}