{
  "info": {
    "author": "Boost Digital Insurance",
    "author_email": "techopensource@boostdigitalinsurance.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Typing :: Typed"
    ],
    "description": "# jsonapi-transformer\n\n**jsonapi-transformer** is a Python library for producing, consuming, and manipulating JSON:API data. It makes developing with JSON:API more manageable by converting from and to JSON:API-formatted data.\n\nThis library follows the [JSON:API v1.1 **release candidate** specification](https://jsonapi.org/format/1.1/).\n\n# Quick Start\nThe following example is based on [Example 7.2.2.4](https://jsonapi.org/format/1.1/#document-resource-object-linkage) of the JSON:API v1.1 specification.\n```python\nimport json\nfrom transformers import JSONAPITransformer, from_jsonapi_generic\n```\n\nData can be manually set on a `JSONAPITransformer` instance...\n\n```python\ntransformer = JSONAPITransformer(\n    type_name=\"articles\",\n    id=\"1\",\n    attributes={\n        \"title\": \"Rails is Omakase\",\n    },\n    relationships={\n        \"author\": JSONAPITransformer(\n            type_name=\"people\",\n            id=\"9\",\n        )\n    }\n)\n```\n... and then converted to jsonapi.\n```python\n>>> jsonapi = transformer.to_jsonapi()\n>>> print(json.dumps(jsonapi, indent=4))\n{\n    \"data\": {\n        \"type\": \"articles\",\n        \"id\": \"1\",\n        \"attributes\": {\n            \"title\": \"Rails is Omakase\"\n        },\n        \"relationships\": {\n            \"author\": {\n                \"data\": {\n                    \"type\": \"people\",\n                    \"id\": \"9\"\n                }\n            }\n        }\n    }\n}\n```\nIf you already have jsonapi data, you can load that into a `JSONAPITransformer` instance as well.\n```python\n>>> transformer = from_jsonapi_generic(jsonapi)\n>>> print(transformer.id)\n1\n\n>>> print(transformer.type_name)\narticles\n```\n\n# Installation\n**jsonapi-transformer** is available on PyPI.\n```shell\npip install --upgrade pip\npip install jsonapi-transformer\n```\n**jsonapi-transformer** supports Python 3.7+.\n\n# Notable Features\nCode snippets in this section use the Quick Start example above as a starting point.\n\n1. Support for both `id` and `lid`.\n2. The `included` list is generated automatically from items in `relationships` when `to_jsonapi()` is called -- there's no need to manipulate an item in both the `included` list *and* an object's `relationships`.\n3. Convenience method to *get* an `attribute` or `relationship` or a default if the key is not found.\n    ```python\n    # First, try `transformer.attributes[\"greeting\"]` -- greeting is not found!\n    # Next, try `transformer.relationships[\"greeting\"]` -- greeting is not found!\n    # Finally, the default is returned.\n    >>> default = \"hello\"\n    >>> greeting = transformer.get(\"greeting\", default)\n    >>> print(greeting)\n    hello\n    ```\n4. Convenience accessor for *getting* `attributes` and `relationships` using `[]` notation.\n    ```python\n    # First, try `transformer.attributes[\"title\"]` -- title is found!\n    >>> print(transformer[\"title\"])\n    Rails is Omakase\n\n    # First, try `transformer.attributes[\"author\"]` -- author is not found!\n    # Next, try `transformer.relationships[\"author\"]` -- author is found!\n    >>> author = transformer[\"author\"]\n    >>> print(author.to_jsonapi())\n    {\"data\": {\"type\": \"people\", \"id\": \"9\"}}\n    ```\n5. Convenience accessor for *setting* `attributes` using `[]` notation.\n    ```python\n    >>> transformer[\"my_new_attribute\"] = \"hello\"\n    ```\n6. Convenience accessor for *deleting* `attributes` using `[]` notation.\n    ```python\n    >>> del transformer[\"my_new_attribute\"]\n    ```\n7. Convenience accessor for *contains* in `attributes` and `relationships` using the `in` keyword.\n    ```python\n    >>> \"title\" in transformer\n    True\n\n    >>> \"author\" in transformer\n    True\n\n    >>> \"book\" in transformer\n    False\n    ```\n8. Deep equality test between transformers, comparing all of:\n    * `type_name`\n    * `id`\n    * `lid`\n    * `attributes`\n    * `relationships`\n    * `included`\n    ```python\n    >>> book = JSONAPITransformer(type_name=\"book\", id=\"1\")\n    >>> article = JSONAPITransformer(type_name=\"article\", id=\"1\")\n    >>> book == article\n    False\n    ```\n9. Derived transformer classes can contain business logic.\n    ```python\n    from transformers import JSONAPITransformer, JSONAPITransformerFactory\n\n\n    class People(JSONAPITransformer):\n        type_name = \"people\"\n\n        @property\n        def full_name(self):\n            \"\"\"Custom business logic for this class, keyed on `type_name`.\"\"\"\n            return f\"{self['last_name'], self['first_name']}\"\n\n\n    jsonapi = {\n        \"data\": {\n            \"type\": \"articles\",\n            \"id\": \"1\",\n            \"attributes\": {\n                \"title\": \"Rails is Omakase\"\n            },\n            \"relationships\": {\n                \"author\": {\n                    \"data\": {\n                        \"type\": \"people\",\n                        \"id\": \"9\"\n                    }\n                }\n            }\n        },\n        \"included\": [\n            {\n                \"type\": \"people\",\n                \"id\": \"9\",\n                \"attributes\": {\n                    \"first_name\": \"Jon\",\n                    \"last_name\": \"George\"\n                }\n            }\n        ]\n    }\n\n    # By using a factory instead of `from_jsonapi_generic(...)`, we can provide a list\n    # of classes that are instantiated based on the `type` field in the jsonapi data.\n    # Since we didn't provide a class for the \"articles\" type, setting `allow_generic`\n    # to True allows the \"articles\" object to load as a generic JSONAPITransformer\n    factory = JSONAPITransformerFactory([People], allow_generic=True)\n    ```\n    ```python\n    >>> transformer = factory.from_jsonapi(jsonapi)\n    >>> print(type(transformer))\n    <class 'JSONAPITransformer'>\n\n    >>> author = transformer[\"author\"]\n    >>> print(type(author))\n    <class 'People'>\n\n    # Access business logic unique to the `People` class.\n    >>> print(author.full_name)\n    George, Jon\n    ```\n10. Lists of JSON:API objects can reside in the same document, and any shared relationships are de-duplicated in the `included` list.\n    ```python\n    from transformers import JSONAPIListTransformer, JSONAPITransformer, from_jsonapi_generic\n\n\n    article1 = JSONAPITransformer(\n        type_name=\"articles\",\n        id=\"1\",\n        attributes={\n            \"title\": \"Rails is Omakase\",\n        },\n        relationships={\n            \"author\": JSONAPITransformer(\n                type_name=\"people\",\n                id=\"9\",\n                attributes={\n                    \"first_name\": \"Jon\",\n                    \"last_name\": \"George\"\n                }\n            )\n        }\n    )\n\n    article2 = JSONAPITransformer(\n        type_name=\"articles\",\n        id=\"2\",\n        attributes={\n            \"title\": \"Now is better than never.\",\n        },\n        relationships={\n            \"author\": JSONAPITransformer(\n                type_name=\"people\",\n                id=\"9\",\n                attributes={\n                    \"first_name\": \"Jon\",\n                    \"last_name\": \"George\"\n                }\n            )\n        }\n    )\n    ```\n    ```python\n    >>> transformer = JSONAPIListTransformer([article1, article2])\n    >>> print(type(transformer))\n    <class 'JSONAPIListTransformer'>\n\n    # The `included` section is deduplicated.\n    >>> jsonapi = transformer.to_jsonapi()\n    >>> print(json.dumps(jsonapi, indent=4))\n    {\n        \"data\": [\n            {\n                \"type\": \"articles\",\n                \"id\": \"1\",\n                \"attributes\": {\n                    \"title\": \"Rails is Omakase\"\n                },\n                \"relationships\": {\n                    \"author\": {\n                        \"data\": {\n                            \"type\": \"people\",\n                            \"id\": \"9\"\n                        }\n                    }\n                }\n            },\n            {\n                \"type\": \"articles\",\n                \"id\": \"2\",\n                \"attributes\": {\n                    \"title\": \"Now is better than never.\"\n                },\n                \"relationships\": {\n                    \"author\": {\n                        \"data\": {\n                            \"type\": \"people\",\n                            \"id\": \"9\"\n                        }\n                    }\n                }\n            }\n        ],\n        \"included\": [\n            {\n                \"type\": \"people\",\n                \"id\": \"9\",\n                \"attributes\": {\n                    \"first_name\": \"Jon\",\n                    \"last_name\": \"George\"\n                }\n            }\n        ]\n    }\n\n    # Convert back to transformers.\n    >>> transformers = from_jsonapi_generic(jsonapi)\n    >>> print(type(transformers))\n    <class 'list'>\n\n    >>> for x in transformers:\n    ...     print(type(x))\n    <class 'JSONAPITransformer'>\n    <class 'JSONAPITransformer'>\n    ```\n\n\n# Unsupported\nThese [top-level members](https://jsonapi.org/format/1.1/#document-top-level) of the JSON:API specification are unsupported:\n* `errors`\n* `jsonapi`\n* `links`\n* `meta`\n\n\n# Development Locally\nContributors to **jsonapi-transformer** can install an editable version of this library after cloning the repository:\n\n```shell\npip install --upgrade pip\npip install -e .[tests,dev]\n```\n\n# Development with Docker\nContributors to **jsonapi-transformer** can do all development tasks within a Docker container:\n\n### Build\nDon't forget the trailing `.`!!!\n```shell\ndocker build -f Dockerfile.testing \\\n    --build-arg PYTHON_VERSION=3.10 \\\n    -t jsonapi-transformer:latest \\\n    .\n```\n\n### Run Tests with Coverage\n```shell\ndocker run --rm -it \\\n    --entrypoint pytest \\\n    jsonapi-transformer:latest \\\n    --cov --cov-report=term-missing\n```\n\n### Run Type Checking\n```shell\ndocker run --rm -it \\\n    --entrypoint mypy \\\n    jsonapi-transformer:latest \\\n    --show-error-context \\\n    --show-error-codes \\\n    --strict \\\n    src\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boost-insurance/jsonapi-transformer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonapi-transformer",
    "package_url": "https://pypi.org/project/jsonapi-transformer/",
    "platform": null,
    "project_url": "https://pypi.org/project/jsonapi-transformer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/boost-insurance/jsonapi-transformer/issues",
      "Homepage": "https://github.com/boost-insurance/jsonapi-transformer"
    },
    "release_url": "https://pypi.org/project/jsonapi-transformer/1.0.0/",
    "requires_dist": [
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-clarity ; extra == 'dev'",
      "black (==22.3.0) ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "rich ; extra == 'dev'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-clarity ; extra == 'tests'",
      "black (==22.3.0) ; extra == 'tests'",
      "flake8-bugbear ; extra == 'tests'",
      "flake8 ; extra == 'tests'",
      "isort ; extra == 'tests'",
      "mypy ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python library for producing, consuming, and manipulating JSON:API data.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14097086,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09b248e3d30cf056a33b4be59b894a3c1d6bd8af6a95d1befc405c634c3c124e",
          "md5": "d4573f73035623e1c6d7898aeb108617",
          "sha256": "e47a66761f507f2f947ff4d76c8cea205cf4d01310b66fd35bd4e7c21686bef5"
        },
        "downloads": -1,
        "filename": "jsonapi_transformer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4573f73035623e1c6d7898aeb108617",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19140,
        "upload_time": "2022-06-10T19:35:55",
        "upload_time_iso_8601": "2022-06-10T19:35:55.415574Z",
        "url": "https://files.pythonhosted.org/packages/09/b2/48e3d30cf056a33b4be59b894a3c1d6bd8af6a95d1befc405c634c3c124e/jsonapi_transformer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09b248e3d30cf056a33b4be59b894a3c1d6bd8af6a95d1befc405c634c3c124e",
        "md5": "d4573f73035623e1c6d7898aeb108617",
        "sha256": "e47a66761f507f2f947ff4d76c8cea205cf4d01310b66fd35bd4e7c21686bef5"
      },
      "downloads": -1,
      "filename": "jsonapi_transformer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4573f73035623e1c6d7898aeb108617",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19140,
      "upload_time": "2022-06-10T19:35:55",
      "upload_time_iso_8601": "2022-06-10T19:35:55.415574Z",
      "url": "https://files.pythonhosted.org/packages/09/b2/48e3d30cf056a33b4be59b894a3c1d6bd8af6a95d1befc405c634c3c124e/jsonapi_transformer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}