{
  "info": {
    "author": "Lars Gebraad",
    "author_email": "lars.gebraad@erdw.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# simpleSVGD\n\nThis package is a tiny SVGD algorithm specifically developed to operate on\ndistributions found in [HMCLab](https://github.com/larsgeb/HMCLab). \n\nBy default, this package uses **radial basis functions** to compute sample\ninteraction and **AdaGrad** to optimize the samples.\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/larsgeb/simpleSVGD/HEAD?labpath=%2Fnotebooks%2FTutorial%20on%20using%20simpleSVGD.ipynb)\n\n## Installation:\n\nWe recommend using at least Python 3.7.\n\nTo get the latest release, simply use pip inside your favourite environment:\n```sh\npip install simpleSVGD\n```\n\nTo install the latest version directly from GitHub:\n\n```sh\ngit clone git@github.com:larsgeb/simpleSVGD.git\ncd simpleSVGD\npip install -e .\n```\n# Mini-tutorial\n\nThis package can be used with minimal development. The only thing one needs to \nsupply to the algorithm is:\n\n1. The gradient of the function to optimize, `gradient_fn(samples)`. The function itself is not needed.\n2. An initial collection of samples `initial_samples`, a `numpy.array`. It helps if these are close to the target\nfunction/distribution. \n\n## Input/output of your `gradient_fn`\n\nIt is essential to get the input/output shapes of the target (gradient) right. As input, it should take an arbitrary amount of samples, with the appropriate dimensionality. This means if ones wants 430 samples on a 3 dimensional function, the input/output shapes looks like this:\n```python\noutput_gradient = gradient_fn(input_samples)\n\ninput_samples.shape = (430, 3)\noutput_gradient.shape = (430, 3)\n```\n\nTypically, it is useful to instantiate the samples using a Normal distribution. Using NumPy, this is done with:\n```python\nimport numpy as np\nnp.random.seed(235)\n\nmean = 0\nstandard_dev = 1\nn_samples = 100\ndimensions = 2\n\ninitial_samples = np.random.normal(mean, standard_dev, [n_samples, dimensions])\n```\n\n## Defining an example target\n\nA good 2-dimensional test function would be the Himmelblau function:\n```python\ndef Himmelblau(input_array: np.array) -> np.array:\n\n    # As this is a 2-dimensional function, assert that the passed input_array\n    # is correct.\n    assert input_array.shape[1] == 2\n\n    # To simplify reading this function, we do this step in between. It is not\n    # the most optimal way to program this.\n    x = input_array[:, 0, None]\n    y = input_array[:, 1, None]\n\n    output_array = (x ** 2 + y - 11) ** 2 + (x + y ** 2 - 7) ** 2\n\n    # As the output should be a scalar function, assert that the\n    # output is also length 1 in dim 2 of the array.\n    assert output_array.shape == (input_array.shape[0], 1)\n\n    smoothing = 100\n    return output_array / smoothing\n```\nand its gradient:\n```python\ndef Himmelblau_grad(input_array: np.array) -> np.array:\n\n    # As this is a 2-dimensional function, assert that the passed input_array\n    # is correct.\n    assert input_array.shape[1] == 2\n\n    # To simplify reading this function, we do this step in between. It is not\n    # the most optimal way to program this.\n    x = input_array[:, 0, None]\n    y = input_array[:, 1, None]\n\n    # Compute partial derivatives and combine them\n    output_array_dx = 2 * (x ** 2 + y - 11) * (2 * x) + 2 * (x + y ** 2 - 7)\n    output_array_dy = 2 * (x ** 2 + y - 11) + 2 * (x + y ** 2 - 7) * (2 * y)\n    output_array = np.hstack((output_array_dx, output_array_dy))\n\n    # Check if the output shape is correct\n    assert output_array.shape == input_array.shape\n\n    smoothing = 100\n    return output_array / smoothing\n```\n\n## Running the algorithm\n\nTo run the algorithm with a 1000 samples that are initially Normally \ndistribution (mean=0, standard deviation=3, parameters chosen based on prior\nbelief), we simply call `simpleSVGD.update()` in the following way:\n\n```python\ninitial_samples = np.random.normal(0, 3, [1000, 2])\n\n#%matplotlib notebook\n\nfigure = plt.figure(figsize=(6, 6))\nplt.xlabel(\"Parameter 0\")\nplt.ylabel(\"Parameter 1\")\nplt.title(\"SVGD animation on the Himmelblau function\")\n\nfinal_samples = simpleSVGD.update(\n    initial_samples,\n    Himmelblau_grad,\n    n_iter=130,\n    # AdaGrad parameters\n    stepsize=1e-1,\n    alpha=0.9,\n    fudge_factor=1e-3,\n    historical_grad=1,\n    #animate=True,\n    #background=background,\n    #figure=figure,\n)\n```\n\nTo animate the algorithm, simply uncomment the comments. The result should be\nsimilar to this:\n\n\nhttps://user-images.githubusercontent.com/21038893/151603377-a473e7b1-f7b4-417b-a685-9c0cfa98dc15.mov\n\n\n\n# The origins of SVGD\nSVGD is a general purpose variational inference algorithm that forms a natural\ncounterpart of gradient descent for optimization. SVGD iteratively transports a\nset of particles to match with the target distribution, by applying a form of\nfunctional gradient descent that minimizes the KL divergence.\n\nFor more information, please visit the original implementers project website -\n[SVGD](http://www.cs.utexas.edu/~qlearning/project.html?p=vgd), or their\npublication; Qiang Liu and Dilin Wang. [Stein Variational Gradient Descent (SVGD): A General Purpose Bayesian Inference Algorithm](http://arxiv.org/abs/1608.04471). NIPS, 2016.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/larsgeb/simpleSVGD",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simpleSVGD",
    "package_url": "https://pypi.org/project/simpleSVGD/",
    "platform": "",
    "project_url": "https://pypi.org/project/simpleSVGD/",
    "project_urls": {
      "Bug Tracker": "https://github.com/larsgeb/simpleSVGD/issues",
      "Homepage": "https://github.com/larsgeb/simpleSVGD"
    },
    "release_url": "https://pypi.org/project/simpleSVGD/0.3/",
    "requires_dist": [
      "numpy",
      "tqdm",
      "scipy",
      "matplotlib",
      "versioneer",
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "A very basic implementation of SVGD, based on https://github.com/dilinwang820/Stein-Variational-Gradient-Descent",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12753182,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf905cb22b1ecc0034d0b2c5395f039c20640145582af7fd1739304cc5218d10",
          "md5": "92cd6e3699d6bdf39cb454224630ef75",
          "sha256": "014efffb826ce5669a20da128eb5fd946d7298509b35f448fffefc02356a671e"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92cd6e3699d6bdf39cb454224630ef75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4001,
        "upload_time": "2022-01-28T13:35:51",
        "upload_time_iso_8601": "2022-01-28T13:35:51.457182Z",
        "url": "https://files.pythonhosted.org/packages/bf/90/5cb22b1ecc0034d0b2c5395f039c20640145582af7fd1739304cc5218d10/simpleSVGD-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10c6809846493ab7bda1e07affdfcc7b461838189c3015e87838796de83cc5fa",
          "md5": "5cdd4bbd8abce4213e7027451d8a953f",
          "sha256": "161705360e97f906c979639be3657f39413f3864974e9c2afab7085593c83f2a"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cdd4bbd8abce4213e7027451d8a953f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3739,
        "upload_time": "2022-01-28T13:35:53",
        "upload_time_iso_8601": "2022-01-28T13:35:53.256306Z",
        "url": "https://files.pythonhosted.org/packages/10/c6/809846493ab7bda1e07affdfcc7b461838189c3015e87838796de83cc5fa/simpleSVGD-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acf99ffa1f1bc25822fcdc0310f0b5efdf9fd255a7de9b7137948d1eca171209",
          "md5": "a53afdb3d898092726bc801023fd6585",
          "sha256": "2c7ab0cf758007ae12d9e73fb299e1f6fe2e94e80bf5f5575ef8b7ed4e1205d0"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a53afdb3d898092726bc801023fd6585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7230,
        "upload_time": "2022-01-28T19:12:37",
        "upload_time_iso_8601": "2022-01-28T19:12:37.088011Z",
        "url": "https://files.pythonhosted.org/packages/ac/f9/9ffa1f1bc25822fcdc0310f0b5efdf9fd255a7de9b7137948d1eca171209/simpleSVGD-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1015559d15d4ce7af2b315a53144e0794e8dac22497a04b20817283c3a89919d",
          "md5": "a092dc41fe6685f36f78be40d708dafa",
          "sha256": "2f99c1c9115fd6129829771a68a727d9e02a2a04de1decd4eb1a565516cdf392"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a092dc41fe6685f36f78be40d708dafa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23821,
        "upload_time": "2022-01-28T19:12:39",
        "upload_time_iso_8601": "2022-01-28T19:12:39.202685Z",
        "url": "https://files.pythonhosted.org/packages/10/15/559d15d4ce7af2b315a53144e0794e8dac22497a04b20817283c3a89919d/simpleSVGD-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45e22bad38fb86670503ddb38102d152777e4d96396d46f47e4641a661d49cfc",
          "md5": "1787c0ee9037a07a68378a5ce0d23132",
          "sha256": "45716e253da4650e53f01d4d074d8b9ad57c63b723553c6059cce85af70f4896"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1787c0ee9037a07a68378a5ce0d23132",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8086,
        "upload_time": "2022-02-01T09:38:37",
        "upload_time_iso_8601": "2022-02-01T09:38:37.919331Z",
        "url": "https://files.pythonhosted.org/packages/45/e2/2bad38fb86670503ddb38102d152777e4d96396d46f47e4641a661d49cfc/simpleSVGD-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46e4d5cd296350949bf4a7f2b1f45249801988539dcdd3a237c4d2851db67b32",
          "md5": "21895c700a26dcc64bd00aceca412a4f",
          "sha256": "99afdaa16bbc1f0f42b87ad5b2fa8d213325ef31172006ade70b9daa6febae38"
        },
        "downloads": -1,
        "filename": "simpleSVGD-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "21895c700a26dcc64bd00aceca412a4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27120,
        "upload_time": "2022-02-01T09:38:40",
        "upload_time_iso_8601": "2022-02-01T09:38:40.565730Z",
        "url": "https://files.pythonhosted.org/packages/46/e4/d5cd296350949bf4a7f2b1f45249801988539dcdd3a237c4d2851db67b32/simpleSVGD-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45e22bad38fb86670503ddb38102d152777e4d96396d46f47e4641a661d49cfc",
        "md5": "1787c0ee9037a07a68378a5ce0d23132",
        "sha256": "45716e253da4650e53f01d4d074d8b9ad57c63b723553c6059cce85af70f4896"
      },
      "downloads": -1,
      "filename": "simpleSVGD-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1787c0ee9037a07a68378a5ce0d23132",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8086,
      "upload_time": "2022-02-01T09:38:37",
      "upload_time_iso_8601": "2022-02-01T09:38:37.919331Z",
      "url": "https://files.pythonhosted.org/packages/45/e2/2bad38fb86670503ddb38102d152777e4d96396d46f47e4641a661d49cfc/simpleSVGD-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46e4d5cd296350949bf4a7f2b1f45249801988539dcdd3a237c4d2851db67b32",
        "md5": "21895c700a26dcc64bd00aceca412a4f",
        "sha256": "99afdaa16bbc1f0f42b87ad5b2fa8d213325ef31172006ade70b9daa6febae38"
      },
      "downloads": -1,
      "filename": "simpleSVGD-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "21895c700a26dcc64bd00aceca412a4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27120,
      "upload_time": "2022-02-01T09:38:40",
      "upload_time_iso_8601": "2022-02-01T09:38:40.565730Z",
      "url": "https://files.pythonhosted.org/packages/46/e4/d5cd296350949bf4a7f2b1f45249801988539dcdd3a237c4d2851db67b32/simpleSVGD-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}