{
  "info": {
    "author": "Jennifer M. Hays, Kasson Lab BRER Team",
    "author_email": "Kasson Lab BRER Team <kassonlab@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3"
    ],
    "description": "BRER MD\n=======\n\n|Build and test| |Documentation| |codecov|\n\nSource: https://github.com/kassonlab/brer-md\n\nDocumentation: https://kassonlab.github.io/brer-md/\n\nThe ``brer`` Python package provides a set of scripts for running\nBias-Resampling Ensemble Refinement (BRER) simulations using\n`gmxapi <https://gmxapi.org/>`__. Details of the BRER\nmethod may be found in:\n\nHays, J. M., Cafiso, D. S., & Kasson, P. M. Hybrid Refinement of\nHeterogeneous Conformational Ensembles using Spectroscopic Data. *The\nJournal of Physical Chemistry Letters*. DOI:\n`10.1021/acs.jpclett.9b01407 <https://pubs.acs.org/doi/10.1021/acs.jpclett.9b01407>`__\n\nInstallation\n------------\n\nRequirements\n~~~~~~~~~~~~\n\nIf you’re going to use a pip or a conda environment, you’ll need:\n\n-  Python 3.8 or newer.\n-  A GROMACS installation supporting client software builds.\n-  `gmxapi <https://manual.gromacs.org/current/gmxapi>`__ for GROMACS.\n\n``brer`` includes a simple C++ extension module that can be attached to a GROMACS\nmolecular dynamics (MD) simulator through the gmxapi Python interface.\nGROMACS installations (and GROMACS dependencies) can be built rather specifically\nfor their computing environments. The ``brer`` package is distributed as source\ncode that must be built for a specific GROMACS installation.\n\n.. note::\n    For several recent versions of GROMACS, the “legacy API” needs\n    to be enabled **explicitly** when GROMACS is configured.\n    The ``GMX_INSTALL_LEGACY_API`` GROMACS CMake variable is **not documented**.\n    Example::\n\n       cmake /path/to/gromacs/sources -DGMX_INSTALL_LEGACY_API=ON -DGMX_THREAD_MPI=ON\n\nPython environment\n~~~~~~~~~~~~~~~~~~\n\nWe recommend using a separate Python virtual environment for each research project,\ntied to specific versions of the software tools you use. If your computing\nenvironment provides Python packages such as ``mpi4py`` that may be difficult\nto configure, you should try to use the provided packages in your virtual environment.\nExample::\n\n    python3 -m venv --system-site-packages myprojectvenv\n    . myprojectvenv/bin/activate\n    myprojectvenv/bin/python -m pip install --upgrade pip\n\nThen, follow the installation instructions for GROMACS and\n`gmxapi <https://manual.gromacs.org/current/gmxapi/userguide/install.html>`__.\n\nBuild and Install\n~~~~~~~~~~~~~~~~~\n\nWe recommend installing the package with\n`pip <https://pip.pypa.io/en/stable/>`__.\n\nGenerally, ``pip`` will automatically install any package dependencies.\n\nIf a GROMACS installation is discoverable (you have \"sourced\" a GMXRC file or\ndefined a GROMACS_DIR environment variable), then the ``gmxapi`` Python package\nwill be installed automatically with the ``brer`` package.\nSimply::\n\n    pip install git+https://github.com/kassonlab/brer-md.git\n\nIf you prefer to install ``gmxapi`` separately (such as to specify an older\npackage version), you can provide ``--no-deps`` and ``--no-build-isolation``\nto ``pip install``, and the existing ``gmxapi`` installation will be used.\n\nYou can pre-install (other) required packages using the\n`requirements.txt <https://github.com/kassonlab/brer-md/blob/main/requirements.txt>`__\nfile.\nThe ``requirements.txt`` file does not include the ``gmxapi`` dependency.\n\nExample::\n\n    pip show gmxapi |grep Version\n    # Version: 0.3.1\n    wget https://github.com/kassonlab/brer-md/blob/main/requirements.txt\n    pip install -r requirements.txt\n    pip install --no-deps --no-build-isolation brer\n\nThe Python package builder will manage compilation of the C++ GROMACS client\nusing `cmake\ndocumentation <https://cmake.org/cmake/help/latest/manual/cmake.1.html>`__.\nIf the GROMACS installation or C++ toolchain cannot be determined automatically,\nyou may need to provide additional hints.\nSee also `GROMACS release\nnotes <https://manual.gromacs.org/2022/release-notes/2022/major/portability.html#cmake-toolchain-file-replaced-with-cache-file>`__.\n\nExample::\n\n    gmx --version |grep prefix\n    # Data prefix:  /Users/eric/install/gromacs2022\n    CMAKE_ARGS=\"-C /Users/eric/install/gromacs2022/share/cmake/gromacs/gromacs-hints.cmake\" \\\n    pip install brer\n\nRunning BRER\n------------\n\nLaunching a single ensemble member.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn example script, ``run.py`` , is provided for ensemble simulations.\n\nLet’s work through it piece by piece.\n\n::\n\n   #!/usr/bin/env python\n\n   \"\"\"\n   Example run script\n   for BRER simulations\n   \"\"\"\n\n   import brer.run_config as rc\n   import sys\n\nThe ``import brer.run_config`` statement imports a ``RunConfig``\nobject, which handles the following things **for a single ensemble\nmember**:\n\n1. Initializing/setting up parameters for the BRER run.\n2. Launching the run.\n\nThen we provide some files and directory paths to the ``RunConfig``\nobject.\n\n::\n\n   init = {\n       'tpr': '/home/jennifer/Git/brer-md/tests/syx.tpr',\n       'ensemble_dir': '/home/jennifer/test-brer',\n       'ensemble_num': 5,\n       'pairs_json': '/home/jennifer/Git/brer-md/tests/pair_data.json'\n   }\n\n   config = rc.RunConfig(**init)\n\nIn order to run a BRER simulation, we need to provide :\n\n1. a ``tpr`` (compatible with GROMACS 2019).\n2. The path to our ensemble. This directory should contain\n   subdirectories of the form ``mem_<my ensemble number>``\n3. The ensemble number. This is an integer used to identify which\n   ensemble member we are running and thus, the subdirectory in which we\n   will be running our simulations.\n4. The path to the DEER metadata. Please see the example json in this\n   repository: ``src/brer/data/pair_data.json``\n\nFinally, we launch the run!\n\n::\n\n   config.run()\n\nYou may change various parameters before launching the run using\n``config.set(**kwargs)`` . For example:\n\n::\n\n   config = rc.RunConfig(**init)\n   config.set(A=100)\n   config.run()\n\nresets the energy constant A to 100 kcal/mol/nm^2 before launching a\nrun.\n\nLaunching an ensemble\n~~~~~~~~~~~~~~~~~~~~~\n\nRight now, the way to launch an ensemble is to launch multiple jobs. We\nhope to soon use the ``gmxapi`` features that allow a user to\nlaunch many ensemble members in one job.\n\nTroubleshooting\n---------------\n\nMismatched compiler toolchain\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOne of the most common installation problems is related to incompatible\ncompiler toolchains between GROMACS, gmxapi, and the plugin module. \\*\nCMake may warn “You are compiling with a different C++ compiler from the\none that was used to compile GROMACS.” \\* When you ``import`` the\n``brer`` module, you may get an error like the following.\n``ImportError: dlopen(...): symbol not found in flat namespace '__ZN6gmxapi10MDWorkSpec9addModuleENSt3__110shared_ptrINS_8MDModuleEEE'``\n\nYou can either set the ``CMAKE_CXX_COMPILER``, explicitly, or you can\nuse the GROMACS-installed CMake hints file.\n\nYou will have to rebuild and reinstall the ``brer`` module.\n\nRemove any cached built packages::\n\n    pip cache remove brer\n\nIf you previously installed without build isolation you may have ``build`` or\n``dist`` directories that should be removed, as well.\n\nWhen attempting to build the package again, provide extra hints to CMake through\nthe Python package builder by adding strings to the CMAKE_ARGS environment\nvariable.\n\nFor GROMACS 2022 and newer, you would invoke ``cmake`` with something\nlike the following. (The exact path will depend on your installation.)\n\n::\n\n    CMAKE_ARGS=\"-C /path/to/gromacs_installation/share/cmake/gromacs/gromacs-hints.cmake\" \\\n    pip install brer\n\nFor GROMACS 2021 and older,\n\n::\n\n    CMAKE_ARGS=\"-DCMAKE_TOOLCHAIN_FILE=/path/to/gromacs_installation/share/cmake/gromacs/gromacs-toolchain.cmake\" \\\n    pip install brer\n\nSee `GROMACS release\nnotes <https://manual.gromacs.org/2022/release-notes/2022/major/portability.html#cmake-toolchain-file-replaced-with-cache-file>`__.\n\nProblems building a GROMACS 2019 stack\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor some C++ standard library installations, GROMACS 2019 exhibits compiler errors.\nThe sources need to be patched. You can use the ``ci_scripts/limits.patch`` file in this\nrepository as a guide to manually edit the source, or use the ``patch`` command line tool.\nExample::\n\n    cd /path/to/gromacs2019/sources\n    wget https://raw.githubusercontent.com/kassonlab/brer-md/main/ci_scripts/limits.patch\n    patch -p1 < limits.patch\n\nFor GROMACS 2019, you will need gmxapi 0.0.7.\nSee https://gmxapi.readthedocs.io/en/release-0_0_7/.\n\nYou will have to prevent ``brer-md`` from trying to install a more recent version of gmxapi.\nInstall the dependencies explicitly, then suppress automatic dependency resolution\nwhen installing brer-md.\nExxample::\n\n    wget https://raw.githubusercontent.com/kassonlab/brer-md/main/requirements.txt\n    pip install -r requirements.txt\n    pip install --no-deps brer-md\n\nReferences\n----------\n\nHays, J. M., Cafiso, D. S., & Kasson, P. M. Hybrid Refinement of\nHeterogeneous Conformational Ensembles using Spectroscopic Data. *The\nJournal of Physical Chemistry Letters* 2019. DOI:\n`10.1021/acs.jpclett.9b01407 <https://pubs.acs.org/doi/10.1021/acs.jpclett.9b01407>`__\n\nIrrgang, M. E., Hays, J. M., & Kasson, P. M. gmxapi: a high-level\ninterface for advanced control and extension of molecular dynamics\nsimulations. *Bioinformatics* 2018. DOI:\n`10.1093/bioinformatics/bty484 <https://doi.org/10.1093/bioinformatics/bty484>`__\n\n.. |Build and test| image:: https://github.com/kassonlab/brer-md/actions/workflows/test.yml/badge.svg?branch=main\n   :target: https://github.com/kassonlab/brer-md/actions/workflows/test.yml\n.. |Documentation| image:: https://github.com/kassonlab/brer-md/actions/workflows/pages/pages-build-deployment/badge.svg?branch=main\n   :target: https://github.com/kassonlab/brer-md/actions/workflows/pages/pages-build-deployment\n.. |codecov| image:: https://codecov.io/gh/kassonlab/brer-md/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/kassonlab/brer-md\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "LGPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brer-md",
    "package_url": "https://pypi.org/project/brer-md/",
    "platform": null,
    "project_url": "https://pypi.org/project/brer-md/",
    "project_urls": {
      "Documentation": "https://kassonlab.github.io/brer-md/",
      "Source": "https://github.com/kassonlab/brer-md/"
    },
    "release_url": "https://pypi.org/project/brer-md/2.0.0b6/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A set of scripts for running BRER simulations using gmxapi.",
    "version": "2.0.0b6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17128134,
  "releases": {
    "2.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d9922b9cf0c686d762c0a3fe0da1ddcab29fa3f403b5765dbc17d433a2c26e9",
          "md5": "132402669cfaa21114af76a388165395",
          "sha256": "6f8ca78688c4f69b3c98dcf234ac7ede777e4bb093208495d3ccf66721146c55"
        },
        "downloads": -1,
        "filename": "brer-md-2.0.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "132402669cfaa21114af76a388165395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5200539,
        "upload_time": "2022-11-22T13:07:45",
        "upload_time_iso_8601": "2022-11-22T13:07:45.598572Z",
        "url": "https://files.pythonhosted.org/packages/9d/99/22b9cf0c686d762c0a3fe0da1ddcab29fa3f403b5765dbc17d433a2c26e9/brer-md-2.0.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0b6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5570ff9cd7f756d91057b1853dc86fd7ddf03139b1e1a3153704fe3697574fc",
          "md5": "6b8f81a5db6a506002f06c9e1fe7fd14",
          "sha256": "8cbe888f23a9f0005ce27481708361161469b3992620c3d6b9022fe9483b2259"
        },
        "downloads": -1,
        "filename": "brer-md-2.0.0b6.tar.gz",
        "has_sig": false,
        "md5_digest": "6b8f81a5db6a506002f06c9e1fe7fd14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5206553,
        "upload_time": "2023-03-02T14:28:02",
        "upload_time_iso_8601": "2023-03-02T14:28:02.784437Z",
        "url": "https://files.pythonhosted.org/packages/e5/57/0ff9cd7f756d91057b1853dc86fd7ddf03139b1e1a3153704fe3697574fc/brer-md-2.0.0b6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5570ff9cd7f756d91057b1853dc86fd7ddf03139b1e1a3153704fe3697574fc",
        "md5": "6b8f81a5db6a506002f06c9e1fe7fd14",
        "sha256": "8cbe888f23a9f0005ce27481708361161469b3992620c3d6b9022fe9483b2259"
      },
      "downloads": -1,
      "filename": "brer-md-2.0.0b6.tar.gz",
      "has_sig": false,
      "md5_digest": "6b8f81a5db6a506002f06c9e1fe7fd14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5206553,
      "upload_time": "2023-03-02T14:28:02",
      "upload_time_iso_8601": "2023-03-02T14:28:02.784437Z",
      "url": "https://files.pythonhosted.org/packages/e5/57/0ff9cd7f756d91057b1853dc86fd7ddf03139b1e1a3153704fe3697574fc/brer-md-2.0.0b6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}