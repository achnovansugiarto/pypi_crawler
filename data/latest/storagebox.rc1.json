{
  "info": {
    "author": "Peter Emil Halim",
    "author_email": "peter@peteremil.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# StorageBox\n\nStorageBox is a python module that you can use to de-duplicate data\namong distributed components.\n\nYou can think of it as a digital implementation of a physical box. You\nput stuff in there and what you put in is exactly what you take out.\nNo missing and/or duplicated records due to distributed nodes doing concurrent\nreads/writes.\n\nFor example, let's assume you run a movie store. You have\nvoucher codes you'd like to hand out to the first 30 users who press\na button. You are concerned that some users might try to get more\nthan 1 voucher code by exploiting race conditions (maybe clicking the\nbutton from multiple machines at the same time). You're also concerned\nthat multiple users might get the same voucher code if they're incredibly\nunlucky and time their requests at just the right moments.\n\n\n\nHere is what StorageBox allows you to do\n```\n# Setup Code\nimport storagebox\n\n\nitem_repo = storagebox.ItemBankDynamoDbRepository(table_name=\"voucher_codes\")\n\ndeduplication_repo = storagebox.DeduplicationDynamoDbRepository(table_name=\"storage_box_deduplication_table\")\n\n\n# You can add items to the item repo (for example add list of voucher codes)\nitem_repo.batch_add_items(voucher_codes)\n\n\n# You can then assign voucher codes to User IDs\ndeduplicator = storagebox.Deduplicator(item_repo=item_repo, deduplication_repo=deduplication_repo)\n\nvoucher_code = deduplicator.fetch_item_for_deduplication_id(\n    deduplication_id=user_id\n)\n```\nAnd that's it!\n\n- `item_repo`: This is your box, you put in voucher codes and you take them out later. It is responsible\nfor adding items to the box. It also works with the `deduplication_repo` to make sure that one voucher code gets\ntaken outside the box for every one unique user.\n- `deduplication_repo`: This is what makes sure that no user gets more than one voucher code.\n- `deduplicator`: This contains the connecting logic between `item_repo` and `deduplication_repo`\n\nAs long as you use a suitable `deduplication_id`, all race conditions\nand data hazards will be taken care of for you. Examples of suitable \ncandidates for `deduplication_id` can be User ID, IP Address, \nEmail Address or anything that works best with your application.\n\n\n## Prerequisites\nTo use StorageBox, you need the following already set up.\n\n- An ItemBank DynamoDB Table, The current implementation requires the table to have 1 column\ncalled `item`. This is where you will store items (in the case of the example:\nvoucher codes).\n- A Deduplication DynamoDB Table, This will be used by `StorageBox` to achieve idempotency, \nthat is, to make sure that if you call `fetch_item_for_deduplication_id` multiple times with\nthe same `deduplication_id`, you will always get the same result.\n\nIf you prefer to use something else other than DynamoDB, you can implement your own `ItemBankRepository`\nand/or `DeduplicationRepository` for any other backend. This implementation will have to implement\nthe already established Abstract class. You'll also need to read the blogpost at the bottom of this\n README to understand how the storagebox algoritm works. If you do that, contributions are welcome!\n\n\n## Installation\n```\npip install storagebox\n```\n\n\n## Other Example Use Cases\nHosting a big event and only have 10,300 seats that would be booked in the first few minutes?\n```\n# Before the event, add 10,300 numbers to the bank\nitem_repo.batch_add_items([str(i) for i in range(10300)])\n\n# From your webserver\nassignment_number = deduplicator.fetch_item_for_deduplication_id(\n    deduplication_id=email\n)\n```\n\nAre you an influencer and only have 5000 people to give special referral links to? (First 5000\npeople who click the link in the description get a free something!)\n```\n# Before you post your content\nitem_repo.batch_add_items(referral_links_list)\n\n# From your webserver\nreferral_link = deduplicator.fetch_item_for_deduplication_id(\n    deduplication_id=ip_address\n)\n```\n\nAre you organizing online classes for your 150 students, you're willing to host 3 classes (50 students each)\n but you'd like to be sure that no student attends more than 1 class?\n```\n# Before you host your classes\nclass_1_codes = storagebox.ItemBankDynamoDbRepository(table_name=\"class_1_codes\")\nclass_2_codes = storagebox.ItemBankDynamoDbRepository(table_name=\"class_2_codes\")\nclass_3_codes = storagebox.ItemBankDynamoDbRepository(table_name=\"class_3_codes\")\ndeduplication_repo = storagebox.DeduplicationDynamoDbRepository(table_name=\"myonline_classes_deduplication_table\")\n\nclass_1_codes.([str(i) for i in range(0, 50)])\nclass_2_codes.([str(i) for i in range(50, 100)])\nclass_3_codes.([str(i) for i in range(100, 150)])\n\n# From your webserver\ndeduplicators = {\n    'class_1': storagebox.Deduplicator(item_repo=class_1_codes, deduplication_repo=deduplication_repo),\n    'class_2': storagebox.Deduplicator(item_repo=class_2_codes, deduplication_repo=deduplication_repo),\n    'class_3': storagebox.Deduplicator(item_repo=class_3_codes, deduplication_repo=deduplication_repo),\n}\n\ndeduplicator[requested_class].fetch_item_for_deduplication_id(\n    deduplication_id=student_id\n)\n\n```\n\n# How It Works\nA blogpost explaining how `storagebox` works is available [here](https://blog.peteremil.com/2021/02/realtime-distributed-deduplication-how.html)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peter-emil/StorageBox",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "storagebox",
    "package_url": "https://pypi.org/project/storagebox/",
    "platform": "",
    "project_url": "https://pypi.org/project/storagebox/",
    "project_urls": {
      "Homepage": "https://github.com/peter-emil/StorageBox"
    },
    "release_url": "https://pypi.org/project/storagebox/1.0.7/",
    "requires_dist": [
      "boto3 (>=1.16.63,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A reusable, idempotent, and exactly once deduplication API",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9547232,
  "releases": {
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc063823e60ec4b90be3a8dd4deb29ffe466568d2364168633bcbd71c1ddd69b",
          "md5": "8a919a9c57a819698fcb0b85a66de7d8",
          "sha256": "85ba626c1f094f4616390342eb3a49ebc714435b488d7cef44df5bd4c1af10a8"
        },
        "downloads": -1,
        "filename": "storagebox-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a919a9c57a819698fcb0b85a66de7d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7865,
        "upload_time": "2021-02-28T00:26:21",
        "upload_time_iso_8601": "2021-02-28T00:26:21.302529Z",
        "url": "https://files.pythonhosted.org/packages/cc/06/3823e60ec4b90be3a8dd4deb29ffe466568d2364168633bcbd71c1ddd69b/storagebox-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11f64cb70ab26b51059b608fc694ad210109c12dc46f8716c474027d783a9a48",
          "md5": "5dec6ccfcb7c9a4e08b395258fbb71d0",
          "sha256": "36c2370ff4ff5598bfe3facd11ef4d8376dbbf148a88033834633af95af97de1"
        },
        "downloads": -1,
        "filename": "storagebox-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5dec6ccfcb7c9a4e08b395258fbb71d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6924,
        "upload_time": "2021-02-28T00:26:22",
        "upload_time_iso_8601": "2021-02-28T00:26:22.509154Z",
        "url": "https://files.pythonhosted.org/packages/11/f6/4cb70ab26b51059b608fc694ad210109c12dc46f8716c474027d783a9a48/storagebox-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc063823e60ec4b90be3a8dd4deb29ffe466568d2364168633bcbd71c1ddd69b",
        "md5": "8a919a9c57a819698fcb0b85a66de7d8",
        "sha256": "85ba626c1f094f4616390342eb3a49ebc714435b488d7cef44df5bd4c1af10a8"
      },
      "downloads": -1,
      "filename": "storagebox-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a919a9c57a819698fcb0b85a66de7d8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 7865,
      "upload_time": "2021-02-28T00:26:21",
      "upload_time_iso_8601": "2021-02-28T00:26:21.302529Z",
      "url": "https://files.pythonhosted.org/packages/cc/06/3823e60ec4b90be3a8dd4deb29ffe466568d2364168633bcbd71c1ddd69b/storagebox-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11f64cb70ab26b51059b608fc694ad210109c12dc46f8716c474027d783a9a48",
        "md5": "5dec6ccfcb7c9a4e08b395258fbb71d0",
        "sha256": "36c2370ff4ff5598bfe3facd11ef4d8376dbbf148a88033834633af95af97de1"
      },
      "downloads": -1,
      "filename": "storagebox-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "5dec6ccfcb7c9a4e08b395258fbb71d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 6924,
      "upload_time": "2021-02-28T00:26:22",
      "upload_time_iso_8601": "2021-02-28T00:26:22.509154Z",
      "url": "https://files.pythonhosted.org/packages/11/f6/4cb70ab26b51059b608fc694ad210109c12dc46f8716c474027d783a9a48/storagebox-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}