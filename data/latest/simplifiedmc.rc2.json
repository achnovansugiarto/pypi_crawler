{
  "info": {
    "author": "José Ferreira",
    "author_email": "jose@jpferreira.me",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## About\nA CLI that simplifies the usage of Markov Chain Monte Carlo methods.\n\nCurrently, it implements [Stan](https://mc-stan.org/), where the model must be provided in the Stan programming language, or [emcee](https://emcee.readthedocs.io/en/stable/), where the model must be written in Python.\n\nThe output of the chains can then be easily analyzed using this same package.\n\nAlthough developed with cosmology in mind, this package is completely agnostic to the data and model it uses.\n\n\n## Table of contents\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [Stable version](#stable-version)\n  - [Development version](#development-version)\n- [Quick start](#quick-start)\n  - [smc-stan](#smc-stan)\n  - [smc-emcee](#smc-emcee)\n  - [smc-analyze](#smc-analyze)\n- [Credits](#credits)\n- [Contributing](#contributing)\n- [Release cycle](#release-cycle)\n- [License](#license)\n\n\n## Installation\nTo avoid conflicts the usage of virtual environments is recommended.\n\n### Dependencies\nThis package requires the usage of Python version 3, as well as the following packages:\n\n- [Numpy](https://numpy.org/)\n- [Matplotlib](https://matplotlib.org/)\n- [emcee](https://emcee.readthedocs.io/)\n- [getdist](https://getdist.readthedocs.io/)\n- [tqdm](https://tqdm.github.io/)\n- [h5py](https://www.h5py.org/)\n- [arviz](https://arviz-devs.github.io/arviz/)\n- [Pandas](https://pandas.pydata.org/)\n- [pystan](https://pystan.readthedocs.io/)\n- [pyyaml](https://pyyaml.org/)\n\n\nDependencies are automatically resolved by `pip`.\n\n### Stable version\nThis program can be installed directly from PyPI with:\n```console\n$ pip install simplifiedmc\n```\n\n### Development version\nIf you wish to use this package updated to the latests commits, you can install this package directly from the development branch on this repository using `pip`:\n```console\n$ pip install -e git+https://github.com/jpmvferreira/simplifiedmc.git@dev#egg=simplifiedmc\n```\n\nIf instead you wish to make changes to the source code, start by cloning the development branch locally followed by an installation using `pip` with the `-e`, `--editable` flag:\n```console\n$ git clone -b dev https://github.com/jpmvferreira/simplifiedmc\n$ pip install -e simplifiedmc\n```\n\n\n## Quick start\nThis package provides the following programs:\n- `smc-stan` wraps the [Stan](https://mc-stan.org/) programming language, that uses the No-U-Turn-Sample (NUTS) a variant of the Hamiltonian Monte Carlo (HMC).\n- `smc-emcee` wraps the [emcee](https://emcee.readthedocs.io/en/stable/) python package, that makes use of the Goodman & Weare’s Affine Invariant (MCMC) Ensemble sampler.\n- `smc-analyze` analyzes the output from the two previous programs.\n\nThese tools have quite a bit to offer and we will show you how to use each flag, for each program, to provide context on how to use them. Don't forget that there's always the help dialog (`-h` or `--help`) to list all available flags, organized by categories, with a brief description of what they do.\n\nTo make getting started easy there's a folder named `example` on this repository, which includes the files used during this short tutorial.\n\nStart by cloning this repository locally (you can skip this step if you install the development version):\n```console\n$ git clone https://github.com/jpmvferreira/simplifiedmc\n```\n\nAnd now change directory to this folder, where all the action will take place:\n```console\n$ cd simplifiedmc/example\n```\n\nAn additional note, the format for any data file provided must be the following:\n```csv\n# this is a comment\n# comments are obviously ignored, empty line as well\n# there must be no space between comas\n\ncolumn1,column2\n1,2\n2,3\n3,4\n```\n\n### smc-stan\nIn this guide we will be estimating the mean and standard deviation using `smc-stan`, assuming a gaussian distribution, of a series of observations which are present in `data/gaussian.csv`.\n\nTo do so we need to create a model for stan. Because stan is a programming language, models must be specifically written in said language. If you have never programmed in stan it's not that hard and there are plenty of tutorials available online and plenty of [documentation](https://mc-stan.org/users/documentation/).\n\nFor now this is not required as we already created the model file over at `model/gaussian.stan`, which looks like the following:\n```stan\n// data provided to Stan\n// must match the name of the columns in data/gaussian.csv!\ndata {\n  int N1;          // number of observations\n  real value[N1];  // array of observations\n}\n\n// model parameters\n// these will be sampled and optimized\nparameters {\n  real mu;\n  real<lower=0> sigma;\n}\n\n// likelihood and priors considered\nmodel {\n  // likelihood\n  value ~ normal(mu, sigma);\n\n  // priors\n  mu ~ normal(2, 5);\n  sigma ~ normal(3, 1);\n}\n```\n\n**Note:** The variable names in the data section in the previous file, as mentioned in the comments, must match the columns in the .csv file. If later you add multiple sources of data (which you can easily) the number of observations must always be ordered (e.g.: N1, N2, ...).\n\nIn order to start constraining our model with the available data, we need to provide the required information: the name of our parameters, the initial conditions, the number of steps to sample the posterior distribution and the number of warmup steps.\n\nThere is also some optional arguments: the labels for each parameter to show on the plots/tables (Latex supported!), the markers to show on the corner plot and the number of chains to run (default is all available hardware threads).\n\nNow how do you go about and configure that? You can either choose to write it down in a file using YAML syntax or provide those arguments directly to the CLI. If you happen to provide a given configuration argument in the YAML file and in the CLI, the CLI will have priority. This provides great flexibility as to have a base configuration but allowing for fine tuning the parameters without having to rewrite files.\n\nNow let's provide those parameters in a file, which is available over at `config/gaussian-stan.yml`:\n```yml\n## guassian-stan.yml\n# smc-stan configuration file to estimate the mean and standard deviation of a gaussian distribution\n\n# The names of the parameters\n# Must match the names defined in the stan model file!\nnames: [mu, sigma]\n\n# Initial condition for each parameter, for each chain.\n# The most relevant initial conditions implemented in this program are:\n# - gauss(mu, sigma)\n# - uniform(a, b)\n# - float(a)\ninitial:\n  mu: gauss(0, 10)\n  sigma: uniform(0, 10)\n\n# Number of steps to sample the posterior distribution, after the warmup.\nsamples: 250\n\n# Number of steps to warmup each chain, which will be discarded.\nwarmup: 150\n```\n\nAnd now we can execute our program by calling the model (`-m`, `--model`), the data (`-d`, `--data`) and the configuration file (`-y`, `--yml`):\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --yml config/gaussian-stan.yml\n```\n\nHowever this is exactly the same as using:\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --names \"['mu', 'sigma']\" --initial \"{'mu': 'gauss(0, 10)', 'sigma': 'uniform(0, 10'}\" --samples 250 --warmup 150\n```\n\nWhich will print a whole lot of stuff to your terminal, organized into sections that start with `[*]`, and show you the time series as well as the corner plot. Let's ignore the output for now.\n\nOne thing that you probably saw is that the corner plots and the time-series don't have fancy Latex labels and there is no markers with the expected value. We can fix that by setting the labels (`-l`, `--labels`) and the markers (`--markers`):\n\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --names \"['mu', 'sigma']\" --initial \"{'mu': 'gauss(0, 10)', 'sigma': 'uniform(0, 10)'}\" --samples 250 --warmup 150 --labels \"['\\mu', '\\sigma']\" --markers \"{'mu': 2, 'sigma': 3}\"\n```\n\nNow we take the previous example and, since there's a lot of stuff going on, so let's redirect the output to a given output folder (`-o`, `--output`) and don't show the plots on screen (`-ns`, `--no-show`):\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --names \"['mu', 'sigma']\" --initial \"{'mu': 'gauss(0, 10)', 'sigma': 'uniform(0, 10)'}\" --samples 250 --warmup 150 --labels \"['\\mu', '\\sigma']\" --markers \"{'mu': 2, 'sigma': 3}\" --output output/gaussian-stan --no-show\n```\n\nNow you see the reason why we made configuration files in the first place, this can get quite big, quite fast, even for simple models. Luckily, as we've shown before, we can place all of the flags above in a configuration file just like before, which is located over at `config/gaussian-fancy-stan.yml`. To do exactly the same thing as the big terminal command above you can instead write:\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --yml config/gaussian-fancy-stan.yml --output output/gaussian-stan --no-show\n```\n\nOn a high level you only need to know the following: The Latex table with the 1 and 2 sigma confidence interval is at `/output/gaussian-stan/CIs.tex`, the corner plot is over at `/output/gaussian-stan/plot/corner.png` and the time series, which can be used to check for convergence, is over at `/output/gaussian-stan/time-series.png`.\n\nThe folder `/output/gaussian-stan/log` includes further information regarding the convergence, as well as a backup of the model and configuration used.\n\nYou can also save the chain to the output folder (`-sc`, `--save-chain`) and optionally use compression to make it smaller, using gzip (`-g`, `--gzip`) or lzf (`--lzf`), but you shouldn't worry about that because these chains have a very small footprint.\n\nAs we've said before if you wish to do so you can overwrite a given configuration argument provided in the configuration file by setting the corresponding flag in the CLI. In this next example we take the `/config/gaussian-fancy-stan.yml` and set the labels μ → α and σ → β:\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --yml config/gaussian-fancy-stan.yml --labels \"['\\alpha', '\\beta']\" --output output/gaussian-stan --no-show\n```\n\nLast but not least we can change the number of chains we wish to run (`-c`, `--chains`). This is important because if you have more chains than you have hardware threads, then some chains will run sequentially. If on the other hand you set a number of chains equal to or lower than the total number of available hardware threads then they will run in parallel.\n\nEach chain is independent and will do a number of steps equal to the number of steps to sample the posterior distribution and the warmup. This means that you can get major speedups in your code (as much as the number of hardware threads in your system!), being the only disadvantage that each chain will have to perform the warmup.\n\nA version of the example so far with a custom number of chains is available at `config/gaussian-final-stan.yml`. This is a complete configuration file with all the available arguments, except for the output of course, that must always be provided in the CLI.\n\n### smc-emcee\nHere we will be doing the same thing as befores, estimating the mean and standard deviation, assuming a gaussian distribution, of a series of observations which are present in `data/gaussian.csv`, but this time using `smc-emcee`. For more information visit the official [emcee documentation](emcee.readthedocs.io/).\n\nAs we did before, the first thing to do is define our model. Because `emcee` is written in Python a model is simply a Python function that returns the probability of a given parameter values knowing the provided data. Here are the contents of the file over at `model/gaussian.py`:\n```python\n# imports\nfrom math import log, pi\nimport numpy as np\n\n# define the natural logarithm of the likelihood\ndef ln_likelihood(θ, value):\n    N = len(value)\n    mu, sigma = θ\n\n    sum = 0\n    for i in range(0, N):\n        sum += (-1/2) * ((value[i] - mu) / sigma)**2\n\n    sum += -N*log(sigma) - (1/2)*log(2*pi)\n\n    return sum\n\n# define the natural logarithm of the priors\ndef ln_prior(θ):\n    mu, sigma = θ\n\n    # flat priors\n    if -10 < mu < 10 and 0 < sigma < 10:\n        return 0.0\n\n    return -np.inf\n\n# define the probability using the prior and likelihood\ndef ln_probability(θ, value):\n    prior = ln_prior(θ)\n    if not np.isfinite(prior):\n        return -np.inf\n    return prior + ln_likelihood(θ, value)\n```\n\nIn `smc-emcee`, besides the model and the data, the following arguments are required: the names of the parameters, the initial conditions, the percentage that we use as a criteria to consider that convergence is met (it uses the autocorrelation time to do so) and the number of steps to sample the posterior distribution.\n\nIn short this means that the sampler will run until the autocorrelation time is changing by less than the user provided percentage (5% as given good results so far) and will then sample the posterior distribution by the number of steps the user as provided (usually in the scale of 10⁵).\n\nA simple YAML file with the required configuration arguments, for this specific example, which is located at `config/guassian-emcee.yml`, is the following:\n```yaml\n# The names of the parameters\n# Must match the names defined in the stan model file!\nnames: [mu, sigma]\n\n# Initial condition for each parameter, for each walker.\n# Must be inside the model restrictions, otherwise it might crash.\n# The most relevant initial conditions implemented in this program are:\n# - gauss(mu, sigma)\n# - uniform(a, b)\n# - float(a)\ninitial:\n  mu: uniform(-10, 10)\n  sigma: uniform(0, 10)\n\n# Autocorreation time must change less than this percentage to consider convergence.\npercentage: 50\n\n# Number of steps to sample the posterior distribution, after the convergence is met.\nsamples: 1000\n```\n\nWhich we can now use to run our program accordingly:\n```console\n$ smc-emcee --model model/gaussian.py --data data/gaussian.csv --yml config/gaussian-emcee.yml\n```\n\nHowever there are a few parameter which you might want to fine-tune related to the sampler: the maximum number of steps, the number of steps to check if convergence as been met and the number of walkers.\n\nThe maximum number of steps (`-M`, `--maxsteps`) can be used to ensure you don't wait forever. The number of steps to check for convergence (`-c`, `--check`) is quite slow, so don't set this value too low, as it will take more time checking if it has converged rather than sampling the distribution, but also setting this too high means that you will take longer to check if convergence as been met. The number of walkers (`-w`, `--walkers`) is related to the ensemble sampler, setting this higher will cover a higher region of parameter space, but is more computationally expensive.\n\nBecause this is an ensemble sampler it doesn't run independent chains, however, you can make use of multi threaded systems by changing the number of Python processes it spawns (`--processes`).\n\nA complete YAML configuration file for this example can be found at `config/guassian-final-emcee.yml` and is not shown here for brevity. Obviously you can also configure the program in the command line without relying on this configuration file.\n\nFinally we're left with the output options. We can specify the output folder (`-o`, `--output`), save the chain to disk (`-sc`, `--save-chain`) and optionally provide compression using gzip (`-g`, `--gzip`) or lzf (`--lzf`).\n\nBecause the way `emcee` handles saving the chain it is recommended to use `--tmp` if in your machine `/tmp/` is mounted in RAM, or `--shm` if `/dev/shm` is mounted in RAM to store the chain temporarily in those places.\n\nYou can also thin the samples (`-t`, `--thin`) as a function of the autocorrelation time, show the time series plot (`-t`, `--time-series`) which is memory intensive in this case, and optionally don't show the plots on screen (`-ns`, `--no-show`) and don't show the fancy progress bar (`-np`, `--no-progress`).\n\n\n### smc-analyze\nTo get some output we've executed the following commands:\n```console\n$ smc-stan --model model/gaussian.stan --data data/gaussian.csv --yml config/gaussian-final-stan.yml --output output/gaussian-final-stan --save-chain\n(supressed output)\n$ smc-emcee --model model/gaussian.py --data data/gaussian.csv --yml config/gaussian-final-emcee.yml --output output/gaussian-final-emcee --save-chain --tmp\n```\n\nWhich stored the sampler information in their respective directories. If you wish to plot them together in the same corner plot, do as follows:\n```console\n$ smc-analyze -i output/gaussian-final-emcee output/gaussian-final-stan\n```\n![](./example/analyzed/emcee-stan.png)\n\n**Note:** You can only use this if both output share the parameter space, which is this case, they do.\n\nThis doesn't look very pretty, beside the fact that we haven't provided emcee to converge of course, so let's add the markers showing the expected value (`-m`, `--markers`), a legend (`--legend`) for each plot and change the alpha of both the filled region (`--filled-alpha`) and the contours (`--countor-alpha`):\n```console\n$ smc-analyze -i output/gaussian-final-emcee output/gaussian-final-stan --markers \"{'mu': 2, 'sigma': 3}\" --legend \"['stan', 'emcee']\" --contour-alpha 0.25 --filled-alpha 0.9\n```\n![](./example/analyzed/emcee-stan-fancy.png)\n\n\nThis looks better and now we can choose to save it (`-o`, `--output`) and not to have it display on the screen (`-ns`, `--no-show`).\n\nWe could have also specified the labels (`-l`, `--labels`), however this defaults to whatever was used to run the sampler, so make sure to have these consistent between runs, otherwise use this argument to overwrite it.\n\n\n## Credits\nThe contents in this repository were developed by myself, you can contact me in the following ways:\n- Personal email: [jose@jpferreira.me](mailto:jose@jpferreira.me) - [[PGP key](https://pastebin.com/REkhQKg2)]\n- Institutional email: [joseferreira@alunos.fc.ul.pt](mailto:joseferreira@alunos.fc.ul.pt) - [[PGP key](https://pastebin.com/rfBpi8jc)]\n\n\n## Contributing\nAny discussion, suggestions, pull requests or bug reports are always welcome. If you wish to submit you code, pull requests should be targeted towards the dev branch, otherwise, feel free to use this issue section in this repository, or even send me an email.\n\n\n## Release cycle\nAll versions will have the format X.Y.Z, and the first one will be 1.0.0, which is release as soon as I think the program is good enough to be shared.\n\nEach time that there is an update which does not modify the program behavior (e.g.: documentation, packaging, fixing bugs) it will increment Z (e.g.: 1.0.0 -> 1.0.1).\n\nEach time that there is an update which modifies the program behavior (e.g.: adding features) it will increment Y and reset Z (e.g.: 1.0.1 -> 1.1.0).\n\nEach time that there is an update which is not backwards compatible (e.g.: removing features, changing how the program is meant to be used) it will increment X and reset both Y and Z (e.g.: 1.1.2 -> 2.0.0).\n\nIn this repository you will find branches for the stable version (master) and the development version (dev). All modifications are done in the dev branch and, after being tested, are merged in the master branch. After a version bump the new version will be released.\n\n\n## License\nAll of the contents provided in this repository are available under the MIT license.\n\nFor further information, refer to the file [LICENSE.md](./LICENSE.md) provided in this repository.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpmvferreira/simplifiedmc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplifiedmc",
    "package_url": "https://pypi.org/project/simplifiedmc/",
    "platform": "",
    "project_url": "https://pypi.org/project/simplifiedmc/",
    "project_urls": {
      "Homepage": "https://github.com/jpmvferreira/simplifiedmc"
    },
    "release_url": "https://pypi.org/project/simplifiedmc/1.0.1/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "emcee",
      "getdist",
      "tqdm",
      "h5py",
      "arviz",
      "pandas",
      "pystan",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "A CLI that simplifies the usage of MCMC methods.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12871363,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffd1500aace22b6c11ea34cd06205067ae82fe59600e337f3c6c08ef1c57160d",
          "md5": "40932de181eb9198452dad3d794cad5f",
          "sha256": "07e24006d63456a556ef515f9aba43b83c49d1dc55fe0c783f73a03e61301c12"
        },
        "downloads": -1,
        "filename": "simplifiedmc-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40932de181eb9198452dad3d794cad5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24329,
        "upload_time": "2022-02-12T16:09:50",
        "upload_time_iso_8601": "2022-02-12T16:09:50.047466Z",
        "url": "https://files.pythonhosted.org/packages/ff/d1/500aace22b6c11ea34cd06205067ae82fe59600e337f3c6c08ef1c57160d/simplifiedmc-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "746c4545094a76a31ecc54bf7b733069f18624428b1b22294694f493c8c15f23",
          "md5": "7813634e526866dcd6a494b8b2c49b11",
          "sha256": "fced288cc9eafe52894c8009ff0a3898a1e344d0c866360edd8d66835442ab97"
        },
        "downloads": -1,
        "filename": "simplifiedmc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7813634e526866dcd6a494b8b2c49b11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24843,
        "upload_time": "2022-02-12T16:09:51",
        "upload_time_iso_8601": "2022-02-12T16:09:51.797255Z",
        "url": "https://files.pythonhosted.org/packages/74/6c/4545094a76a31ecc54bf7b733069f18624428b1b22294694f493c8c15f23/simplifiedmc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "944b458eb7b76a90d4be13e29c4bdc55e73b01ac9a33e88c1b7acce9692c3910",
          "md5": "f7b6d7564a8d13b59e7b5b85d535e1a3",
          "sha256": "323cd21258126e2344e42929193e108fe3740ec2fd4d88f0fba86637ac36defe"
        },
        "downloads": -1,
        "filename": "simplifiedmc-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b6d7564a8d13b59e7b5b85d535e1a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24313,
        "upload_time": "2022-02-12T16:23:54",
        "upload_time_iso_8601": "2022-02-12T16:23:54.136151Z",
        "url": "https://files.pythonhosted.org/packages/94/4b/458eb7b76a90d4be13e29c4bdc55e73b01ac9a33e88c1b7acce9692c3910/simplifiedmc-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "564e49cf3e778283bdc7b1ad82158a28e949a33ee485a31b4471968a4ce6caff",
          "md5": "1b4c51580c3cfbd0906a7d8c2aea4eb0",
          "sha256": "838ab5bd2848f69040cb3731753f9ec5213da06fec1e4d0e83670272f2314ddb"
        },
        "downloads": -1,
        "filename": "simplifiedmc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b4c51580c3cfbd0906a7d8c2aea4eb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24816,
        "upload_time": "2022-02-12T16:23:55",
        "upload_time_iso_8601": "2022-02-12T16:23:55.943977Z",
        "url": "https://files.pythonhosted.org/packages/56/4e/49cf3e778283bdc7b1ad82158a28e949a33ee485a31b4471968a4ce6caff/simplifiedmc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "944b458eb7b76a90d4be13e29c4bdc55e73b01ac9a33e88c1b7acce9692c3910",
        "md5": "f7b6d7564a8d13b59e7b5b85d535e1a3",
        "sha256": "323cd21258126e2344e42929193e108fe3740ec2fd4d88f0fba86637ac36defe"
      },
      "downloads": -1,
      "filename": "simplifiedmc-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7b6d7564a8d13b59e7b5b85d535e1a3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24313,
      "upload_time": "2022-02-12T16:23:54",
      "upload_time_iso_8601": "2022-02-12T16:23:54.136151Z",
      "url": "https://files.pythonhosted.org/packages/94/4b/458eb7b76a90d4be13e29c4bdc55e73b01ac9a33e88c1b7acce9692c3910/simplifiedmc-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "564e49cf3e778283bdc7b1ad82158a28e949a33ee485a31b4471968a4ce6caff",
        "md5": "1b4c51580c3cfbd0906a7d8c2aea4eb0",
        "sha256": "838ab5bd2848f69040cb3731753f9ec5213da06fec1e4d0e83670272f2314ddb"
      },
      "downloads": -1,
      "filename": "simplifiedmc-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b4c51580c3cfbd0906a7d8c2aea4eb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24816,
      "upload_time": "2022-02-12T16:23:55",
      "upload_time_iso_8601": "2022-02-12T16:23:55.943977Z",
      "url": "https://files.pythonhosted.org/packages/56/4e/49cf3e778283bdc7b1ad82158a28e949a33ee485a31b4471968a4ce6caff/simplifiedmc-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}