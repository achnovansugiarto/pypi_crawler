{
  "info": {
    "author": "Timo Wang",
    "author_email": "ntwang1994@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# GPT-SHell\n\nThis is an on-going development of an upgraded version of the original [Shell GPT](https://github.com/TheR1D/shell_gpt).\nIn addition to executing basic shell commands as Shell GPT already supports, with GPT-SHell, you can directly load the content of text files from your device and process them with ChatGPT.\n\n## Introduction by GPT3.5\n\nhttps://user-images.githubusercontent.com/7350056/227848106-d8d3d6d4-9f3e-4f40-82b4-5a7ee1f69988.mov\n\nThe code defines a Python script that runs a shell-like command interface using OpenAI's GPT (Generative Pretrained Transformer) language model. It imports several modules such as argparse, json, os, readline, typer, and custom-made modules such as openai_client, prompt_builder, shell_actions, think_actions, and utils.\n\nThe script initializes variables to store and manage the command history for the user, and it sets up an event handler to respond to certain keyboard events such as arrow keys and the Ctrl-C (SIGINT) signal.\n\nThe main function of the code defines an argument parser to handle command-line arguments specified when running the script. The script can be run with options such as a path to a script to run, cautious mode, or temperature. If a script path is provided, it raises a NotImplementedError since script execution is not implemented yet.\n\nOtherwise, the script enters an infinite loop, prompting the user to input a command. It then checks if the command is one of the specific commands that trigger different actions, such as SHELL, DO, THINK, or CODE. For SHELL commands, it sends the prompt to the GPT language model and responds with the model's generated text (which may include a command to execute). If the response is a valid command, it prompts the user to confirm whether or not to run that command. For DO and THINK, the script executes shell or Python code specified in the command. For CODE, it sends the prompt to the GPT model to generate code to return.\n\nThe script also includes options for cautious mode, which displays the prompt before executing the command, and for temperature, which regulates the creativity of the GPT response. Finally, when the user inputs \"exit\", the script saves environment variables to a JSON file and writes the command history to a file before terminating the program.\n\n## Install\n\n`pip install gpt-sh`\nWhen you first uses `gpt-sh`, you will be prompt to enter your OpenAI API key.\nYou can also set the following variable in `~/.config/shell_gpt/.sgptrc`.\n\n```\nOPENAI_API_KEY=[YourAPIKey]\n```\n\n## Dependency\n\n```\nshell_gpt\n```\n\n## Usage\n\nFirst type in the terminal `gpt-sh`. This will start up the prompt.\n\nUnlike the original Shell GPT, GPT-SHell functions like an actual shell, where you enter a command and then get a response.\nThere are four types of commands: `DO`, and `THINK`, `SHELL`, `CODE`.\n\n### DO\n\nThis is a NEW command of GPT-SHell.\nThis is used to interact with GPT-SHell itself.\nYou can use DO command to read or write files from your device, access environment variables, etc.\n\nThere are two DO commands implemented: `SHOW_ENV_VARS`, `LOAD_FILE`.\nMore will be implemented in the near future.\nYou do not need to know the exact name of these commands. Based on your input, GPT-SHell will automatically detect the action you want to take. If it cannot determine the action, it will show you a list of all actions.\n\n#### SHOW_ENV_VARS\n\nThis action let you check all the environment variables of GPT-SHell.\nThis is NOT for checking the environment variables of your OS.\n\nWhen there is no environment variable, the following is shown.\n\n```\n>>> DO: Show me all the env vars\nNo environment variables loaded.\n```\n\nWhen there are environment variables, the following is shown.\n\n```\n>>> DO: Show all env vars\nFILE_CONTENT_VAR_1 = Created a dynamic, customizable dashboard supporti...\nFILE_CONTENT_VAR_2 = JavaScript,TypeScript,HTML5,CSS3,Python, ReactJS, ...\n```\n\n```\n>>> DO: Show var: FILE_CONTENT_VAR_1\nFILE_CONTENT_VAR_1 = Created a dynamic, customizable dashboard supporti...\n```\n\nCurrently, the first 50 characters of each value is printed. In the future, a feature that let user to specify the print length will be implemented.\n\n#### SET_ENV_VAR\n\nThis action let you save values to a variable.\nThe value can be a raw value, such as a number or a string.\nThe value can be the one stored in another variable.\nThe value can be the latest response from CODE or THINK commands.\n\n```\n>>> DO: Set the value of KEYS_CONTENT to FILE_CONTENT_VAR_2 SET_ENV_VAR\nSetting the variable with name KEYS_CONTENT\n>>> DO: Set the value of DESC_CONTENT to FILE_CONTENT_VAR_1 SET_ENV_VAR\nSetting the variable with name DESC_CONTENT\n>>> DO: Show all env vars\nDESC_CONTENT = Created a dynamic, customizable dashboard supporti...\nKEYS_CONTENT = JavaScript, TypeScript, HTML5, CSS3, Python, React...\n\n>>> DO: Set the value of LETTERS to be \"ABC\"\nSetting the variable with name LETTERS\n>>> DO: show var: LETTERS\n LETTERS = ABC\n```\n\n#### DELETE_ENV_VAR\n\nThis action let you delete a variable that is no longer needed.\n\n```\n>>> DO: delete the vars: FILE_CONTENT_VAR_1, FILE_CONTENT_VAR_2\nVariable FILE_CONTENT_VAR_1 deleted.\nVariable FILE_CONTENT_VAR_2 deleted.\n>>> DO: show vars\nDESC_CONTENT = Created a dynamic, customizable dashboard supporti...\nKEYS_CONTENT = JavaScript, TypeScript, HTML5, CSS3, Python, React...\nANALYSIS = SENT: Created a dynamic, customizable dashboard su...\nLETTERS = ABC\n```\n\n#### LOAD_FILE\n\nThis action let you load the content of a file into GPT-SHell.\nThis is one major difference or upgrade from the original Shell GPT.\nYou can specify the paths of the files you want to load.\n\n```\n>>> DO: Load the following files. \"/Users/timowang/Documents/test-sgpt/desc.txt\" and \"/Users/timowang/Documents/test-sgpt/keys.txt\"\n>>> DO: Show all env vars\nFILE_CONTENT_VAR_1 = Created a dynamic, customizable dashboard supporti...\nFILE_CONTENT_VAR_2 = JavaScript,TypeScript,HTML5,CSS3,Python, ReactJS, ...\n```\n\n#### SAVE_FILE\n\nThis action let you save the value of a variable to your local file system.\n\n```\n>>> DO: save the value of ANALYSIS to /tmp/analysis.txt\nSaving ANALYSIS to /tmp/analysis.txt.\n>>> SHELL: show the content of /tmp/analysis.txt and only show the first 5 lines\nCOMMAND: head -n 5 /tmp/analysis.txt\nRun this command? [y/N]: y\nSENT: Created a dynamic, customizable dashboard supporting various widgets to display the issue count for each template, the trend of issue count throughout a certain number of days, etc. using Material-UI components for React.\nKEYS: ReactJS, Material-UI\n\nSENT: Refactored common properties of widgets such as widget titles, subtitles, and configuration menu wrapper to a shared component, enabling cleaner implementation and easier creation of new widgets.\nKEYS:\n```\n\n### THINK\n\nThis command is for you to build ChatGPT prompt using the content of the files you loaded and stored in the environment variables.\nFor example, in the above snippet, we loaded the description of a front-end project as well as keywords related to front-end job skills into two variables: `FILE_CONTENT_VAR_1` and `FILE_CONTENT_VAR_2`. We can now use them to build a new prompt to get sentences from the description that contain certain keywords.\n\n```\n>>> THINK: Given the following keywords: FILE_CONTENT_VAR_2.\\n Given the following text: FILE_CONTENT_VAR_1. Identify all sentences that contain the keywords. Print with the following format: SENT: [A sentence with keywords]\\nKEYS: [All keywords that occur in the sentence].\n\nYour THINK prompt is:  Given the following keywords: JavaScript,TypeScript,HTML5,CSS3,Python, ReactJS, jQuery, Bootstrap, Material-UI, RESTful API, ExpressJS, NodeJS, Microservices, Figma, Docker, Git, MongoDB, PostgreSQL, MySQL, Amazon Web Service(AWS), Google Cloud Platform(GCP), Vercel.\\n Given the following text: Created a dynamic, customizable dashboard supporting various widgets to display the issue count for each template, the trend of issue count throughout a certain number of days, etc. using Material-UI components for React. Refactored common properties of widgets such as widget titles, subtitles, and configuration menu wrapper to a shared component, enabling cleaner implementation and easier creation of new widgets.\n\nBuilt an interface allowing admin users to configure issue templates with customizable input options such as name, type and more. Implemented dynamically rendered issue submission forms based on the conditional rendering of different input options into MUI input components by specified input options.\n\nCreated an interface for issue owners of a particular category of issues to view the details of an issue, respond to the issue, and mark keywords that serve as evidence for particular attributes of the issue, enabling future training of machine learning models for automatic attribute classification.\n\nImplemented ExpressJS backend endpoints for retrieving template data and issue-related statistics such as issue counts and attributes. Connected the backend to MongoDB Atlas via Mongoose for better scalability and data management. Leveraged Faker.js to generate mock data for testing the implementation of the application, ensuring robustness and reliability. Containrized the backend with Docker and deployed to Google Cloud Platform.\n\nDeveloped a basic authentication mechanism, storing user info in localStorage upon successful login and clears it upon logout. Implemented the frontend routing using React Router and ensured unauthorized users are redirected to an error page. . Identify all sentences that contain the keywords. Print with the following format: SENT: [A sentence with keywords]\\nKEYS: [All keywords that occur in the sentence].\nSENT: Created a dynamic, customizable dashboard supporting various widgets to display the issue count for each template, the trend of issue count throughout a certain number of days, etc. using Material-UI components for React.\nKEYS: ReactJS, Material-UI\n\nSENT: Refactored common properties of widgets such as widget titles, subtitles, and configuration menu wrapper to a shared component, enabling cleaner implementation and easier creation of new widgets.\nKEYS: JavaScript\n\nSENT: Built an interface allowing admin users to configure issue templates with customizable input options such as name, type and more.\nKEYS: None\n\nSENT: Implemented dynamically rendered issue submission forms based on the conditional rendering of different input options into MUI input components by specified input options.\nKEYS: Material-UI\n\nSENT: Created an interface for issue owners of a particular category of issues to view the details of an issue, respond to the issue, and mark keywords that serve as evidence for particular attributes of the issue, enabling future training of machine learning models for automatic attribute classification.\nKEYS: None\n\nSENT: Implemented ExpressJS backend endpoints for retrieving template data and issue-related statistics such as issue counts and attributes.\nKEYS: ExpressJS\n\nSENT: Connected the backend to MongoDB Atlas via Mongoose for better scalability and data management.\nKEYS: MongoDB\n\nSENT: Leveraged Faker.js to generate mock data for testing the implementation of the application, ensuring robustness and reliability.\nKEYS: None\n\nSENT: Containrized the backend with Docker and deployed to Google Cloud Platform.\nKEYS: Docker, Google Cloud Platform\n\nSENT: Developed a basic authentication mechanism, storing user info in localStorage upon successful login and clears it upon logout.\nKEYS: JavaScript\n\nSENT: Implemented the frontend routing using React Router and ensured unauthorized users are redirected to an error page.\nKEYS: ReactJS\n```\n\n### SHELL\n\nThis is the same as the shell command supported by Shell GPT.\nYou can describe some action you want to perform with the shell, GPT-SHell will translate your command into a shell script and then execute your command.\n\n```\n>>> SHELL: Create five files with names from one to five and type of txt in /tmp\nCOMMAND: touch /tmp/{1..5}.txt\nRun this command? [y/N]: y\n```\n\n### CODE\n\nThis is the same as the code command supported by Shell GPT.\nYou can describe the functionality of some code and have GPT write it for you.\n\n```\n>>> CODE: Write a c function for summing up an array.\nint sumArray(int arr[], int len) {\n   int sum = 0;\n   for (int i = 0; i < len; i++) {\n      sum += arr[i];\n   }\n   return sum;\n}\n```\n\n## Full Example\n\nIn the `example` directory, you can find three `.txt` files.\nThe file `desc.txt` contains the description of a frontend project and\n`keys.txt` contains skill keywords related to frontend job market.\nWe want to identify sentences in `desc.txt` with keywords that are listed in `keys.txt`.\nFollowing the commands in `example_inputs.txt`, shown below as well, we can first load the files,\nbuild a prompt with the content of the files, get analysis report, and save the report to a local file.\n\n```\nDO: Load the following files. \"/Users/timowang/Developer/shell_gpt2/example/desc.txt\" and \"/Users/timowang/Developer/shell_gpt2/example/keys.txt\"\nDO: Show all env vars\nDO: Set the value of DESC_CONTENT to FILE_CONTENT_VAR_1\nDO: Set the value of KEYS_CONTENT to FILE_CONTENT_VAR_2\nDO: delete the following variables: FILE_CONTENT_VAR_1, FILE_CONTENT_VAR_2\nTHINK: Given the following keywords: KEYS_CONTENT.\\n Given the following text: DESC_CONTENT. Identify all sentences that contain the keywords. Print with the following format: SENT: [A sentence with keywords]\\nKEYS: [All keywords that occur in the sentence].\nDO: Save the LAST_RESPONSE to a variable called \"ANALYSIS\"\nDO: Show all env vars\nDO: Save the value of ANALYSIS to the file /tmp/analysis.txt\nSHELL: Print out the first 3 lines of the content of /tmp/analysis.txt\n```\n\nYou can also execute pre-defined scripts line by line automatically as follows.\n\n```\ngpt-sh --script_path example/example_inputs.txt\n```\n\n## Limitations\n\nCurrently GPT-SHell is still under active development.\nUnlike Shell GPT, which focuses on serving as a command-line interface for accessing GPT functionalities, such as a chat,\nGPT-SHell focuses on helping you processing files on your own device.\nNo matter the task is summarizing the content of a long report, or creating new content and then saving it on your device for you directly, GPT-SHell (at least the future version) will be your best helper!\n\n## Upcoming features\n\nThese are the features being developed right now. You can also suggest features in the Discussion/Issues section.\n\n### General Interactions\n\n- Support basic shell commands without making requests to OpenAI apis such as ls, cd, etc.\n\n### DO Commands\n\n## Acknowledgement\n\nThis project is an extended version based on [shell_gpt](https://github.com/TheR1D/shell_gpt) by TheR1D.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gpt-sh",
    "package_url": "https://pypi.org/project/gpt-sh/",
    "platform": null,
    "project_url": "https://pypi.org/project/gpt-sh/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/gpt-sh/0.1.3/",
    "requires_dist": [
      "shell-gpt"
    ],
    "requires_python": "",
    "summary": "A somewhat more advanced version of Shell GPT",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17465667,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96b5decf4c1d33a7bff3505a797940b29a0a15c7be688aa307d40304cc1bf18b",
          "md5": "33bfa5db8a46c0c06a151216a5343590",
          "sha256": "8c68ab6b50229526eed994e8c70b4307acae2fe2f1c811d4fb2b60da58ed21a4"
        },
        "downloads": -1,
        "filename": "gpt_sh-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33bfa5db8a46c0c06a151216a5343590",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20551,
        "upload_time": "2023-03-27T18:02:35",
        "upload_time_iso_8601": "2023-03-27T18:02:35.820114Z",
        "url": "https://files.pythonhosted.org/packages/96/b5/decf4c1d33a7bff3505a797940b29a0a15c7be688aa307d40304cc1bf18b/gpt_sh-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d99157c3b947923da4d0d9b7b9a4d28650a53d053eb2eec190fdb4807f43fb8",
          "md5": "0c897090167a80508e312051037a876b",
          "sha256": "8dee08921d6f41c64798663d572d283b3816c61b122a861973f161dff6a17b27"
        },
        "downloads": -1,
        "filename": "gpt-sh-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c897090167a80508e312051037a876b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22014,
        "upload_time": "2023-03-27T18:02:37",
        "upload_time_iso_8601": "2023-03-27T18:02:37.933605Z",
        "url": "https://files.pythonhosted.org/packages/9d/99/157c3b947923da4d0d9b7b9a4d28650a53d053eb2eec190fdb4807f43fb8/gpt-sh-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6338aeb3b21e3fbc6c766379f50ad3b3e09359a147ec958b97780c9f22f92c27",
          "md5": "8b0162cdca2223e644bc493b62431363",
          "sha256": "19288d8f041fcfe9a30b7275925f06ca29e1c5a34a5894320c2b7a4ea49511ff"
        },
        "downloads": -1,
        "filename": "gpt_sh-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b0162cdca2223e644bc493b62431363",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20589,
        "upload_time": "2023-03-27T18:06:56",
        "upload_time_iso_8601": "2023-03-27T18:06:56.522692Z",
        "url": "https://files.pythonhosted.org/packages/63/38/aeb3b21e3fbc6c766379f50ad3b3e09359a147ec958b97780c9f22f92c27/gpt_sh-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3673c5950c2539daa0e78945c462ac811179b6b12a19b174e963a94b08d3a1b",
          "md5": "43d2da11e3f0d1c53009b46c124e21f1",
          "sha256": "e92d18ede8c125b6d3ff1c8cd0eb04b0eb81816b52ea361426cc8d766e0a59fe"
        },
        "downloads": -1,
        "filename": "gpt-sh-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43d2da11e3f0d1c53009b46c124e21f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22071,
        "upload_time": "2023-03-27T18:06:58",
        "upload_time_iso_8601": "2023-03-27T18:06:58.585505Z",
        "url": "https://files.pythonhosted.org/packages/e3/67/3c5950c2539daa0e78945c462ac811179b6b12a19b174e963a94b08d3a1b/gpt-sh-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eff22db10f247adc1ff616091c38b1e75d96b30be393611e4790ab8739e9356",
          "md5": "5ffa3e00ffd571478e966c7d824c2173",
          "sha256": "eae86a069d2c2d6b692e41027ed1f2fefb872fcd3d869e015cd369b0e32689c9"
        },
        "downloads": -1,
        "filename": "gpt_sh-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ffa3e00ffd571478e966c7d824c2173",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20750,
        "upload_time": "2023-03-27T18:41:08",
        "upload_time_iso_8601": "2023-03-27T18:41:08.022984Z",
        "url": "https://files.pythonhosted.org/packages/9e/ff/22db10f247adc1ff616091c38b1e75d96b30be393611e4790ab8739e9356/gpt_sh-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37133b0baf097111a8d9ae196d4af7e2417f5229f5cf8a73913da2be1d5af6fa",
          "md5": "7ee4670f97a1fd7e2bf73a8b2d965e47",
          "sha256": "35dcea44cad45729ad82727de52f77bb3bd5732313d018f9896c20cb45a4de12"
        },
        "downloads": -1,
        "filename": "gpt-sh-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7ee4670f97a1fd7e2bf73a8b2d965e47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22289,
        "upload_time": "2023-03-27T18:41:10",
        "upload_time_iso_8601": "2023-03-27T18:41:10.475704Z",
        "url": "https://files.pythonhosted.org/packages/37/13/3b0baf097111a8d9ae196d4af7e2417f5229f5cf8a73913da2be1d5af6fa/gpt-sh-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3739cb14898e058ab108e7c871fba989c57453e24c25a43b57f9708f8e87a3ca",
          "md5": "a6ee5f58d915dff95e895bcadff32b4f",
          "sha256": "17fc7d5b7ab43cb22edd730af091b99d57724af36ed79fc0b5273e293a61e37b"
        },
        "downloads": -1,
        "filename": "gpt_sh-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6ee5f58d915dff95e895bcadff32b4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20809,
        "upload_time": "2023-03-27T18:50:28",
        "upload_time_iso_8601": "2023-03-27T18:50:28.931476Z",
        "url": "https://files.pythonhosted.org/packages/37/39/cb14898e058ab108e7c871fba989c57453e24c25a43b57f9708f8e87a3ca/gpt_sh-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "519fa656006bd630829ffaf7180c7384290583a4191866f1f8b052727a513f9e",
          "md5": "8e9680e04d23af6858c23b8136edc176",
          "sha256": "e77af98be2aedb720384afd890edb5aeb00038b80e0d414ef44f306c919ac4b4"
        },
        "downloads": -1,
        "filename": "gpt-sh-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8e9680e04d23af6858c23b8136edc176",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22349,
        "upload_time": "2023-03-27T18:50:31",
        "upload_time_iso_8601": "2023-03-27T18:50:31.298715Z",
        "url": "https://files.pythonhosted.org/packages/51/9f/a656006bd630829ffaf7180c7384290583a4191866f1f8b052727a513f9e/gpt-sh-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3739cb14898e058ab108e7c871fba989c57453e24c25a43b57f9708f8e87a3ca",
        "md5": "a6ee5f58d915dff95e895bcadff32b4f",
        "sha256": "17fc7d5b7ab43cb22edd730af091b99d57724af36ed79fc0b5273e293a61e37b"
      },
      "downloads": -1,
      "filename": "gpt_sh-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6ee5f58d915dff95e895bcadff32b4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20809,
      "upload_time": "2023-03-27T18:50:28",
      "upload_time_iso_8601": "2023-03-27T18:50:28.931476Z",
      "url": "https://files.pythonhosted.org/packages/37/39/cb14898e058ab108e7c871fba989c57453e24c25a43b57f9708f8e87a3ca/gpt_sh-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "519fa656006bd630829ffaf7180c7384290583a4191866f1f8b052727a513f9e",
        "md5": "8e9680e04d23af6858c23b8136edc176",
        "sha256": "e77af98be2aedb720384afd890edb5aeb00038b80e0d414ef44f306c919ac4b4"
      },
      "downloads": -1,
      "filename": "gpt-sh-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8e9680e04d23af6858c23b8136edc176",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22349,
      "upload_time": "2023-03-27T18:50:31",
      "upload_time_iso_8601": "2023-03-27T18:50:31.298715Z",
      "url": "https://files.pythonhosted.org/packages/51/9f/a656006bd630829ffaf7180c7384290583a4191866f1f8b052727a513f9e/gpt-sh-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}