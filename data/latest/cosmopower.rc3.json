{
  "info": {
    "author": "Alessio Spurio Mancini",
    "author_email": "a.spuriomancini@ucl.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent"
    ],
    "description": "<div align=\"center\"><img src=\"https://github.com/alessiospuriomancini/cosmopower/blob/main/docs/static/logo.png\" width=\"500\" height=\"400\"> </div>\n\n<div align=\"center\">\n\n![](https://img.shields.io/badge/Python-181717?style=plastic&logo=python)\n![](https://img.shields.io/badge/Tensorflow-181717?style=plastic&logo=tensorflow)\n![](https://img.shields.io/badge/License-GPLv3-181717?style=plastic)\n![](https://img.shields.io/badge/Author-Alessio%20Spurio%20Mancini-181717?style=plastic)\n![](https://img.shields.io/badge/Installation-pip%20install%20cosmopower-181717?style=plastic)\n\n[Overview](#overview) •\n[Documentation](#documentation) •\n[Installation](#installation) •\n[Getting Started](#getting-started) •\n[Training](#training) •\n[Trained Models](#trained-models) •\n[Likelihoods](#likelihoods) •\n[Support](#contributing-support-community) • \n[Citation](#citation)\n\n</div>\n\n\n# Overview\n\n``CosmoPower`` is a library for Machine Learning - accelerated Bayesian inference. While the emphasis is on building algorithms to accelerate Bayesian inference in *cosmology*, the interdisciplinary nature of the methodologies implemented in the package allows for their application across a wide range of scientific fields. The ultimate goal of ``CosmoPower`` is to solve _inverse_ problems in science, by developing Bayesian inference pipelines that leverage the computational power of Machine Learning to accelerate the inference process. This approach represents a principled application of Machine Learning to scientific research, with the Machine Learning component embedded within a rigorous framework for uncertainty quantification.\n\nIn cosmology, ``CosmoPower`` aims to become a fully _differentiable_ library for cosmological analyses. Currently, ``CosmoPower`` provides neural network emulators of matter and Cosmic Microwave Background power spectra. These emulators can be used to replace Boltzmann codes such as [CAMB](https://github.com/cmbant/CAMB) or [CLASS](https://github.com/lesgourg/class_public) in cosmological inference pipelines, to source the power spectra needed for two-point statistics analyses. This provides orders-of-magnitude acceleration to the inference pipeline and integrates naturally with efficient techniques for sampling very high-dimensional parameter spaces. The power spectra emulators implemented in `CosmoPower`, and first presented in its [release paper](https://arxiv.org/abs/2106.03846), have been applied to the analysis of real cosmological data from  experiments, as well as having been tested against the accuracy requirements for the analysis of next-generation cosmological surveys.\n\n``CosmoPower`` is written entirely in [Python](https://www.python.org/). Neural networks are implemented using the [TensorFlow](https://www.tensorflow.org/) library.\n\n\n# Documentation\n\nComprehensive documentation is available [here](https://alessiospuriomancini.github.io/cosmopower).\n\n\n# Installation\n\nWe recommend installing ``CosmoPower`` within a [Conda](https://docs.conda.io/projects/conda/en/latest/index.html) virtual environment. \nFor example, to create and activate an environment called ``cp_env``, use:\n\n    conda create -n cp_env python=3.7 pip && conda activate cp_env\n\nOnce inside the environment, you can install ``CosmoPower``:\n\n- **from PyPI**\n\n        pip install cosmopower\n\n    To test the installation, you can use\n\n        python3 -c 'import cosmopower as cp'\n    \n    If you do not have a GPU on your machine, you will see a warning message about it which you can safely ignore.\n\n- **from source**\n\n        git clone https://github.com/alessiospuriomancini/cosmopower\n        cd cosmopower\n        pip install .\n\n    To test the installation, you can use\n\n        pytest\n\n\n# Getting Started\n\nCosmoPower currently provides two ways to emulate power spectra, implemented in the classes ``cosmopower_NN`` and ``cosmopower_PCAplusNN``:\n\n<table border=\"0\">\n <tr>\n     <td><b style=\"font-size:30px\"><div align=\"center\">cosmopower_NN</div></b></td>\n    <td><b style=\"font-size:30px\"><div align=\"center\">cosmopower_PCAplusNN</div></b></td>\n </tr>\n <tr>\n    <td>a neural network mapping cosmological parameters directly to (log)-power spectra\n<div align=\"center\">\n<img src='https://github.com/alessiospuriomancini/cosmopower/blob/main/docs/static/nn_scheme-1.png' width=\"800\" height=\"300\">\n</div>\n</td>\n    <td>a neural network mapping cosmological parameters to coefficients of a Principal Component Analysis (PCA) of the (log)-power spectra<div align=\"center\">\n<img src='https://github.com/alessiospuriomancini/cosmopower/blob/main/docs/static/pca_nn_scheme-1.png' width=\"700\" height=\"300\">\n</div>\n</td>\n </tr>\n</table>\n\nBelow you can find minimal working examples that use ``CosmoPower`` pre-trained models from the [code release paper](https://arxiv.org/abs/2106.03846), shared in the [trained_models](https://github.com/alessiospuriomancini/cosmopower/blob/main/cosmopower/trained_models) folder (see the [Trained models](#trained-models) section for details) to predict power spectra for a given set of input parameters. You need to clone the repository and replace ``/path/to/cosmopower`` with the location of the cloned repository to make these examples work. Further examples are available as demo notebooks in the [getting_started_notebooks](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/getting_started_notebooks) folder, for both [cosmopower_NN](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/getting_started_notebooks/getting_started_with_cosmopower_NN.ipynb) ([![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1Fv70tJXCDnlTZYxMzr43q25PK5Kc3G7i?usp=sharing)) and [cosmopower_PCAplusNN](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/getting_started_notebooks/getting_started_with_cosmopower_PCAplusNN.ipynb) ([![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1TZI15JEl0LvSyfoY812TkxueyU72nMGv?usp=sharing)).\n\nNote that, whenever possible, we recommend working with models trained on _log_-power spectra, to reduce the dynamic range. Both ``cosmopower_NN`` and ``cosmopower_PCAplusNN`` have methods to provide predictions (cf. ``cp_pca_nn.predictions_np`` in the example below) as well as \"10^predictions\" (cf. ``cp_nn.ten_to_predictions_np`` in the example below).\n\n\n<table>\n<tr>\n<th> Using <code>cosmopower_NN</code> </th>\n<th> Using <code>cosmopower_PCAplusNN</code> </th>\n</tr>\n<tr>\n<td>\n\n```python\nimport cosmopower as cp\n\n# load pre-trained NN model: maps cosmological parameters to CMB TT log-C_ell\ncp_nn = cp.cosmopower_NN(restore=True, \n                         restore_filename='/path/to/cosmopower'\\\n                         +'/cosmopower/trained_models/CP_paper/CMB/cmb_TT_NN')\n\n# create a dict of cosmological parameters\nparams = {'omega_b': [0.0225],\n          'omega_cdm': [0.113],\n          'h': [0.7],\n          'tau_reio': [0.055],\n          'n_s': [0.96],\n          'ln10^{10}A_s': [3.07],\n          }\n\n# predictions (= forward pass through the network) -> 10^predictions\nspectra = cp_nn.ten_to_predictions_np(params)\n```\n\n</td>\n<td>\n\n```python\nimport cosmopower as cp\n\n# load pre-trained PCA+NN model: maps cosmological parameters to CMB TE C_ell\ncp_pca_nn = cp.cosmopower_PCAplusNN(restore=True, \n                                    restore_filename='/path/to/cosmopower'\\\n                                    +'/cosmopower/trained_models/CP_paper/CMB/cmb_TE_PCAplusNN')\n\n# create a dict of cosmological parameters\nparams = {'omega_b': [0.0225],\n          'omega_cdm': [0.113],\n          'h': [0.7],\n          'tau_reio': [0.055],\n          'n_s': [0.96],\n          'ln10^{10}A_s': [3.07],\n          }\n\n# predictions (= forward pass through the network)\nspectra = cp_pca_nn.predictions_np(params)\n```\n\n</td>\n</tr>\n</table>\n\nNote that the suffix ``_np`` of the ``predictions_np`` and ``ten_to_predictions_np`` functions refer to their implementation using [NumPy](https://numpy.org/). These functions are best suited to standard analysis pipelines fully implemented in normal Python, normally run on Central Processing Units. For pipelines built using the [TensorFlow](https://tensorflow.org/) library, highly optimised to run on Graphics Processing Units, we recommend the use of the corresponding ``_tf`` functions (i.e. ``predictions_tf`` and ``ten_to_predictions_tf``) in both ``cosmopower_NN`` and ``cosmopower_PCAplusNN`` (see [Likelihoods](#likelihoods) for further details and examples). \n\n\n# Training\n\nThe [training_notebooks](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/training_notebooks) folder contains examples of how to: \n\n- [train ``cosmopower_NN``](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/training_notebooks/cosmopower_NN_CMB_training.ipynb): [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1eiDX_P0fxcuxv530xr2iceaPbY4CA5pD?usp=sharing)\n\n- [train ``cosmopower_PCAplusNN``](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/training_notebooks/cosmopower_PCAplusNN_CMB_training.ipynb): [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1G8vABcUk9yztXYDx8bDFaNhJrtVIA5ei?usp=sharing)\n\nThese notebooks implement emulation of CMB temperature (TT) and lensing potential (<img src=\"https://render.githubusercontent.com/render/math?math=\\phi \\phi\">)\n power spectra as practical examples - the procedure is completely analogous for the matter power spectrum.\n\n\n# Trained Models\n\nTrained models are available in the [trained_models](https://github.com/alessiospuriomancini/cosmopower/blob/main/cosmopower/trained_models) folder. The folder contains all of the emulators used in the [CosmoPower release paper](https://arxiv.org/abs/2106.03846); as new models are trained, they will be shared in this folder, along with a description and BibTex entry of the relevant paper to be cited when using these models. Please consider sharing your own model in this folder with a pull request! \n\nPlease refer to the [README](https://github.com/alessiospuriomancini/cosmopower/blob/main/cosmopower/trained_models/README.md) file within the [trained_models](https://github.com/alessiospuriomancini/cosmopower/blob/main/cosmopower/trained_models) folder for all of the details on the models contained there.\n\n\n# Likelihoods\n\nThe [likelihoods](https://github.com/alessiospuriomancini/cosmopower/blob/main/cosmopower/likelihoods) folder contains examples of likelihood codes sourcing power spectra from ``CosmoPower``. Some of these likelihoods are written in pure [TensorFlow](https://github.com/tensorflow), hence they can be run with highly optimised [TensorFlow](https://github.com/tensorflow)-based samplers, such as the ones from [TensorFlow Probability](https://www.tensorflow.org/probability). Being written entirely in [TensorFlow](https://github.com/tensorflow), these codes can be massively accelerated by running on Graphics or Tensor Processing Units. We recommend the use of the ``predictions_tf`` and ``ten_to_predictions_tf`` functions within these pipelines, to compute (log)-power spectra predictions for input parameters. The [likelihoods_notebooks](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/likelihoods_notebooks) folder contains an [example](https://github.com/alessiospuriomancini/cosmopower/blob/main/notebooks/likelihoods_notebooks/tf_planck2018_lite.ipynb) of how to run a pure-Tensorflow likelihood, the Planck-lite 2018 TTTEEE likelihood [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://drive.google.com/file/d/1TUDp1MWe0nU79JJXlsHBuMszWVpOLg7S/view?usp=sharing).\n\n\n# Contributing, Support, Community\n\nFor bugs and feature requests consider using the [issue tracker](https://github.com/alessiospuriomancini/cosmopower/issues). \n\nContributions to the code via pull requests are most welcome!\n\nFor general support, please send an email to `a dot spuriomancini at ucl dot ac dot uk`, or post on [GitHub discussions](https://github.com/alessiospuriomancini/cosmopower/discussions).\n\nUsers of ``CosmoPower`` are strongly encouraged to join the [GitHub discussions](https://github.com/alessiospuriomancini/cosmopower/discussions) forum to follow the latest news on the code as well as to discuss all things Machine Learning / Bayesian Inference in cosmology!\n\n\n# Citation\n\nIf you use ``CosmoPower`` at any point in your work please cite its [release paper](https://arxiv.org/abs/2106.03846):\n\n    @article{SpurioMancini2022,\n             title={CosmoPower: emulating cosmological power spectra for accelerated Bayesian inference from next-generation surveys},\n             volume={511},\n             ISSN={1365-2966},\n             url={http://dx.doi.org/10.1093/mnras/stac064},\n             DOI={10.1093/mnras/stac064},\n             number={2},\n             journal={Monthly Notices of the Royal Astronomical Society},\n             publisher={Oxford University Press (OUP)},\n             author={Spurio Mancini, Alessio and Piras, Davide and Alsing, Justin and Joachimi, Benjamin and Hobson, Michael P},\n             year={2022},\n             month={Jan},\n             pages={1771–1788}\n             }\n\nIf you use a specific likelihood or trained model then in addition to the [release paper](https://arxiv.org/abs/2106.03846) please _also_ cite their relevant papers (always listed in the corresponding directory).\n\n\n# License\n\n``CosmoPower`` is released under the GPL-3 license (see [LICENSE](https://github.com/alessiospuriomancini/cosmopower/blob/main/LICENSE)) subject to \nthe non-commercial use condition (see [LICENSE_EXT](https://github.com/alessiospuriomancini/cosmopower/blob/main/LICENSE_EXT)).\n\n    CosmoPower\n    Copyright (C) 2021 A. Spurio Mancini & contributors\n    \n    This program is released under the GPL-3 license (see LICENSE), \n    subject to a non-commercial use condition (see LICENSE_EXT).\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alessiospuriomancini/cosmopower",
    "keywords": "",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cosmopower",
    "package_url": "https://pypi.org/project/cosmopower/",
    "platform": null,
    "project_url": "https://pypi.org/project/cosmopower/",
    "project_urls": {
      "Homepage": "https://github.com/alessiospuriomancini/cosmopower"
    },
    "release_url": "https://pypi.org/project/cosmopower/0.1.3/",
    "requires_dist": [
      "tensorflow (>2.0)",
      "scikit-learn",
      "tqdm",
      "pytest",
      "tensorflow-probability"
    ],
    "requires_python": "",
    "summary": "Machine Learning - accelerated Bayesian inference",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17118940,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b325aded999b9e98747d746cacf1f19750f95c06fc994b6c8fe3f7852539eb86",
          "md5": "58d366ec4d8d6e6bffe165f08c994cc9",
          "sha256": "1c154c098fc13532ff6d7b2c48360ce3113aca2f84f56553990886a490855d42"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58d366ec4d8d6e6bffe165f08c994cc9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35313,
        "upload_time": "2021-12-11T11:01:07",
        "upload_time_iso_8601": "2021-12-11T11:01:07.633634Z",
        "url": "https://files.pythonhosted.org/packages/b3/25/aded999b9e98747d746cacf1f19750f95c06fc994b6c8fe3f7852539eb86/cosmopower-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "630d844550daaa9d992678216ee6aed0e182155c5271efded7857e69cc60804b",
          "md5": "0e9b05b493bfc6ba3561364cccc0d8ab",
          "sha256": "7780c7e12134768fa11abea9999e4282b40fb099895444034100bad057baf48e"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0e9b05b493bfc6ba3561364cccc0d8ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35688,
        "upload_time": "2021-12-11T11:01:09",
        "upload_time_iso_8601": "2021-12-11T11:01:09.655407Z",
        "url": "https://files.pythonhosted.org/packages/63/0d/844550daaa9d992678216ee6aed0e182155c5271efded7857e69cc60804b/cosmopower-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74f0827c602bf9f3950fb894eb05b389e207ac3e0c843df33b559cb9a798095c",
          "md5": "b0356f5c460a28d130358258e687cf2f",
          "sha256": "e0b9e8ab4f7610e64fbb58095abc303ca68051c7c2e865a1a791fc8389e54efd"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0356f5c460a28d130358258e687cf2f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 35552,
        "upload_time": "2023-02-24T07:19:42",
        "upload_time_iso_8601": "2023-02-24T07:19:42.639895Z",
        "url": "https://files.pythonhosted.org/packages/74/f0/827c602bf9f3950fb894eb05b389e207ac3e0c843df33b559cb9a798095c/cosmopower-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72b17d6a80847c1cf9301da010d7744c5cbe6f393766d4a3cbdcffbc91e3b71",
          "md5": "5ffb937353436d7645d6fa219e4382c5",
          "sha256": "044349cc303e23f87134c654e852437d8f3396c918b16c15ad912e878c5add1a"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ffb937353436d7645d6fa219e4382c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36139,
        "upload_time": "2023-02-24T07:19:44",
        "upload_time_iso_8601": "2023-02-24T07:19:44.162685Z",
        "url": "https://files.pythonhosted.org/packages/d7/2b/17d6a80847c1cf9301da010d7744c5cbe6f393766d4a3cbdcffbc91e3b71/cosmopower-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3032d1501f3c3e151cdf19de0ce2e641c64d5e76f4f18a091593b7b4aec54002",
          "md5": "152ba6db4a791198b25e883201bb4722",
          "sha256": "d07f641ad988ea0e5560eb8735cd3b42da7eac4d16976af16588bd4f6634b5f2"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "152ba6db4a791198b25e883201bb4722",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 35552,
        "upload_time": "2023-03-01T23:11:51",
        "upload_time_iso_8601": "2023-03-01T23:11:51.087931Z",
        "url": "https://files.pythonhosted.org/packages/30/32/d1501f3c3e151cdf19de0ce2e641c64d5e76f4f18a091593b7b4aec54002/cosmopower-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4437349fe08da86aee84fee7930740f99201dc5a6e935fefbca50cae3f15b71c",
          "md5": "9241aaa17d3d614b1d5654b93f8829cf",
          "sha256": "0b4769565dde42d5875ae2b0f91c25e1cde61cc666b5842d2fb6ecdfd726998b"
        },
        "downloads": -1,
        "filename": "cosmopower-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9241aaa17d3d614b1d5654b93f8829cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36222,
        "upload_time": "2023-03-01T23:11:52",
        "upload_time_iso_8601": "2023-03-01T23:11:52.836534Z",
        "url": "https://files.pythonhosted.org/packages/44/37/349fe08da86aee84fee7930740f99201dc5a6e935fefbca50cae3f15b71c/cosmopower-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3032d1501f3c3e151cdf19de0ce2e641c64d5e76f4f18a091593b7b4aec54002",
        "md5": "152ba6db4a791198b25e883201bb4722",
        "sha256": "d07f641ad988ea0e5560eb8735cd3b42da7eac4d16976af16588bd4f6634b5f2"
      },
      "downloads": -1,
      "filename": "cosmopower-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "152ba6db4a791198b25e883201bb4722",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 35552,
      "upload_time": "2023-03-01T23:11:51",
      "upload_time_iso_8601": "2023-03-01T23:11:51.087931Z",
      "url": "https://files.pythonhosted.org/packages/30/32/d1501f3c3e151cdf19de0ce2e641c64d5e76f4f18a091593b7b4aec54002/cosmopower-0.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4437349fe08da86aee84fee7930740f99201dc5a6e935fefbca50cae3f15b71c",
        "md5": "9241aaa17d3d614b1d5654b93f8829cf",
        "sha256": "0b4769565dde42d5875ae2b0f91c25e1cde61cc666b5842d2fb6ecdfd726998b"
      },
      "downloads": -1,
      "filename": "cosmopower-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9241aaa17d3d614b1d5654b93f8829cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36222,
      "upload_time": "2023-03-01T23:11:52",
      "upload_time_iso_8601": "2023-03-01T23:11:52.836534Z",
      "url": "https://files.pythonhosted.org/packages/44/37/349fe08da86aee84fee7930740f99201dc5a6e935fefbca50cae3f15b71c/cosmopower-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}