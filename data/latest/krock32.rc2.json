{
  "info": {
    "author": "Jonas A. Hult√©n",
    "author_email": "sldr@sldr.se",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# krock32\n\n_A base32 decoder/encoder using Crockford's alphabet_\n\nkrock32 is a Python implementation of [Crockford's base32 alphabet](https://www.crockford.com/base32.html), including checksumming. It is created to allow encoding of arbitrary data to a human readable format, allowing for human-to-human transmission, while also being machine-decodable. All this without being case-sensitive or using special characters like base64 does.\n\n## Base32?\n\nBase32 is the encoding of arbitrary data into a set of 32 (human-readable) symbols, which make up the encoding's alphabet. In most implementations, this allows any data to be represented entirely as ASCII characters, which is useful for certain forms of transmission. In difference from the more common base64, which uses 64 symbols, base32 can be case-insensitive and exclude special, non-alphanumeric characters.\n\nEncoding data to base32 will, necessarily, expand the data. A byte of data can encode 256 values (8 bits), whereas a symbol of base32 can only encode 32 values (5 bits). This means the base32-encoded data will be 60% larger (8/5) than the base data. The shortest example is that 5 bytes (40 bits) will encode to 8 base32 symbols.\n\nCrockford's base32 alphabet differs from the [RFC 4648](https://tools.ietf.org/html/rfc4648#section-6) standard in 5 ways:\n\n1. It starts with the numerals, so that e.g. `0b00001` encodes to `1`.\n2. It does not use padding, so encodings of data not divisible by 5 bytes will not be padded with `=`. Instead, the missing bits are treated as zeros and a last symbol is selected from that.\n3. It explicitly defines that both upper and lowercase characters are valid to the decoder, so that e.g. both `G` and `g` decode to `0b10000`.\n4. It eliminates commonly mis-read characters `I`, `L`, `O`, and `U` from the encoding. Instead, `O`, `o`, and `0` all decode to `0b00000` and `1`, `I`, `i`, `L`, and `l` all decode to `0b00001`. `U` and `u` are only used as checksums.\n5. It optionally allows a checksum to be appended to the very end of the encoded data.\n\n## Installation\n\nYou should be able to install krock32 from [PyPi](https://pypi.org):\n\n```shell\npip install krock32\n```\n\nI have only ever tested it for Python 3.8, but I see no reason it shouldn't work for earlier 3.x versions. 2.7 is not supported, but may work, what do I know.\n\n### Testing\n\nThere's a test suite in `tests/test_krock32.py` which requires [`pytest`](https://pypi.org/project/pytest/) and [`hypothesis`](https://pypi.org/project/hypothesis/) to run. Given those prerequisites, testing should be as easy as\n\n```shell\ncd tests\npytest\n```\n\n## Usage\n\nkrock32 is relatively easy to use. There are two objects - `Encoder` and `Decoder` - that have two methods - `update()` and `finalize()`.\n\n### Encoder\n\nThe encoder takes bytes-like data (`bytes` or `bytearray`) and encodes into Crockford base32.\n\n```python\nimport krock32\n\nencoder = krock32.Encoder(checksum=True)\n# Instantiates a krock32 encoder, here with the optional checksum enabled.\n# If checksum is not given, it is False by default.\n\nencoder.update(b'this is some bytes data')\n# Calling update feeds data into the encoder, updating its internal state.\nencoder.update(b'this is more, fun data')\n# Consecutive updates are allowed; this just appends the new data\n\nencoding = encoder.finalize()\n# Calling finalize returns the encoded string from the encoder. It also\n# disables the encoder, so to encode more data you must instantiate a\n# new encoder.\n\n# In the code above, encoding is:\n# EHM6JWS0D5SJ0WVFDNJJ0RKSEHJQ6834C5T62X38D5SJ0TBK41PPYWK55GG6CXBE41J62X31W\n# where the final 'W' is the checksum.\n\n```\n\n### Decoder\n\nThe inverse of the encoder, the decoder takes a Crockford base32 string and decodes it into `bytes`.\n\n```python\nimport krock32\n\ndecoder = krock32.Decoder(strict=False, checksum=True)\n# Instantiates a krock32 decoder, here with the optional checksum enabled\n# and strictness - allowing only the 32 symbols generated by the encoder -\n# disabled. Note that if a string is encoded with a checksum, the decoder\n# must also have checksumming enabled, and vice versa.\n# If checksum is not given, it is False by default.\n# Note: There is a third option: ignore_non_alphabet. It is currently\n# not implemented, but will allow filtering out all symbols not in the\n# alphabet, such as whitespace and unicode garbage.\n\ndecoder.update('EHM6JWS0D5SJ0WVFDNJJ0RKSEHJQ6834')\n# Calling update feeds data into the decoder, updating its internal state.\ndecoder.update('c5t62x38d5sj0tbk41ppywk55gg6cxbe41j62x31w')\n# Consecutive updates are allowed; this just appends the new data\n\n# Even though the input string's length must be a multiple of 8 symbols plus\n# 0, 2, 4, 5, or 7 (1, 3, 5, or 6 with checksumming), each call to update can\n# be of any length.\n\ndecoding = decoder.finalize()\n# Calling finalize returns the decoded bytes from the decoder. It also\n# disables the decoder, so to decode more data you must instantiate a\n# new decoder.\n\n# In the code above, decoding is:\n# b'this is some bytes datathis is more, fun data'\n```\n\n## License and acknowlegements\n\nkrock32 is licensed under the [MIT license](https://github.com/DrSLDR/krock32/blob/master/LICENSE).\n\nkrock32 implements Douglas Crockford's ([@douglascrockford](https://github.com/douglascrockford)) [base32 alphabet and checksumming scheme](https://www.crockford.com/base32.html) with his permission.\n\n## Changelog\n\n- **0.1.1** Optimization patch. Ran the encoder and decoder through a profiler with 1MiB of random input (1.7MiB to the decoder; the encoded version of the encoder's input). I was well aware of both of them being inefficient and found most of it had to do with throwing around strings.\n\n  The results for my (admittedly short) tests:\n  - **Encoder**: 31,560s (~32,4 kiB/s) pre-optimization; 2,737s (~374 kiB/s) post-optimization. That's an order of magnitude faster.\n  - **Decoder**: 9,342s (~175,4 kiB/s) pre-optimization; 2,817s (~581,6 kiB/s) post-optimization. A little more than 3 times faster.\n\n- **0.1.0** Initial release.\n- **0.0.1** Development version. This project started out named `zim` and implemented [z-base-32](https://www.wikiwand.com/en/Base32#/z-base-32). This was later discarded when I learned that Crockford's alphabet does a better job with interchangeable symbols, which I explicitly wanted. Package changed its name to `krock32`.\n\n## Is it any good?\n\n[yes.](https://news.ycombinator.com/item?id=3067434)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DrSLDR/krock32",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "krock32",
    "package_url": "https://pypi.org/project/krock32/",
    "platform": "",
    "project_url": "https://pypi.org/project/krock32/",
    "project_urls": {
      "Homepage": "https://github.com/DrSLDR/krock32"
    },
    "release_url": "https://pypi.org/project/krock32/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Base32 encoder/decoder using Crockford's alphabet",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7309945,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b86d055f7eedec8fe812f69d14dcdaccd8aca43552678cc96e41b1e9f891bfef",
          "md5": "b461371b2e380adea538142c17142ca8",
          "sha256": "63b981b5bb236ef82bde16ab7c6370ad34a128d1746c59ab049ad92702ac9de9"
        },
        "downloads": -1,
        "filename": "krock32-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b461371b2e380adea538142c17142ca8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7344,
        "upload_time": "2020-05-22T20:50:33",
        "upload_time_iso_8601": "2020-05-22T20:50:33.944063Z",
        "url": "https://files.pythonhosted.org/packages/b8/6d/055f7eedec8fe812f69d14dcdaccd8aca43552678cc96e41b1e9f891bfef/krock32-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5840a1151de93dac98ee302397b369bbc08a8f50cdcd8829ab95909a8e8659b4",
          "md5": "87565f94d8c1f01c876109bab1ece52c",
          "sha256": "e03343f544e5cac7a1ae06a9e04c227d9e942025f49d972816087ba74a2d3f9e"
        },
        "downloads": -1,
        "filename": "krock32-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "87565f94d8c1f01c876109bab1ece52c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6604,
        "upload_time": "2020-05-22T20:50:36",
        "upload_time_iso_8601": "2020-05-22T20:50:36.467232Z",
        "url": "https://files.pythonhosted.org/packages/58/40/a1151de93dac98ee302397b369bbc08a8f50cdcd8829ab95909a8e8659b4/krock32-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61609e5d5f7068d46fde89a45e7cd6c282a74cf3097fdc6cff8a50b68d4a7b17",
          "md5": "a8407dd561689fb1ea24ec7177a7591e",
          "sha256": "d1f57767afb6be23f1e2cc54b9e6da01ab1e2c6fb57684a2a302c00f75f12130"
        },
        "downloads": -1,
        "filename": "krock32-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8407dd561689fb1ea24ec7177a7591e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7714,
        "upload_time": "2020-05-23T19:23:46",
        "upload_time_iso_8601": "2020-05-23T19:23:46.236441Z",
        "url": "https://files.pythonhosted.org/packages/61/60/9e5d5f7068d46fde89a45e7cd6c282a74cf3097fdc6cff8a50b68d4a7b17/krock32-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d5e47b73814b70495b7973523b0e27164559163dfaabead34bfa29e4378a93",
          "md5": "d87b221bfe7f89667f11ea6bed7721c9",
          "sha256": "7f5b9467ac5e30a10a54ec03b506273c84641ae895f7cd2c8dfcc8c157200c56"
        },
        "downloads": -1,
        "filename": "krock32-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d87b221bfe7f89667f11ea6bed7721c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6990,
        "upload_time": "2020-05-23T19:23:47",
        "upload_time_iso_8601": "2020-05-23T19:23:47.670782Z",
        "url": "https://files.pythonhosted.org/packages/46/d5/e47b73814b70495b7973523b0e27164559163dfaabead34bfa29e4378a93/krock32-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61609e5d5f7068d46fde89a45e7cd6c282a74cf3097fdc6cff8a50b68d4a7b17",
        "md5": "a8407dd561689fb1ea24ec7177a7591e",
        "sha256": "d1f57767afb6be23f1e2cc54b9e6da01ab1e2c6fb57684a2a302c00f75f12130"
      },
      "downloads": -1,
      "filename": "krock32-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a8407dd561689fb1ea24ec7177a7591e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7714,
      "upload_time": "2020-05-23T19:23:46",
      "upload_time_iso_8601": "2020-05-23T19:23:46.236441Z",
      "url": "https://files.pythonhosted.org/packages/61/60/9e5d5f7068d46fde89a45e7cd6c282a74cf3097fdc6cff8a50b68d4a7b17/krock32-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46d5e47b73814b70495b7973523b0e27164559163dfaabead34bfa29e4378a93",
        "md5": "d87b221bfe7f89667f11ea6bed7721c9",
        "sha256": "7f5b9467ac5e30a10a54ec03b506273c84641ae895f7cd2c8dfcc8c157200c56"
      },
      "downloads": -1,
      "filename": "krock32-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d87b221bfe7f89667f11ea6bed7721c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6990,
      "upload_time": "2020-05-23T19:23:47",
      "upload_time_iso_8601": "2020-05-23T19:23:47.670782Z",
      "url": "https://files.pythonhosted.org/packages/46/d5/e47b73814b70495b7973523b0e27164559163dfaabead34bfa29e4378a93/krock32-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}