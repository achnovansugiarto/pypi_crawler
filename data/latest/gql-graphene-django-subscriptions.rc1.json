{
  "info": {
    "author": "Levi Notik",
    "author_email": "levi@greatjones.co",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\nGraphene-Django-Subscriptions\n=============================\n\nThis package adds support to Subscription's requests and its integration with websockets using Channels package. You can test websockets notifications with this mini web tool. It's intuitive and simple: `websocket_example_client <https://github.com/eamigo86/graphene-django-subscriptions/tree/master/example_websocket_client>`_\n\n\nInstallation:\n-------------\n\nFor installing graphene-django-subscriptions, just run this command in your shell:\n\n.. code:: bash\n\n    pip install \"graphene-django-subscriptions\"\n\nDocumentation:\n--------------\n\n***************************************\nExtra functionalities  (Subscriptions):\n***************************************\n    1.  Subscription  (Abstract class to define subscriptions to a DjangoSerializerMutation)\n    2.  GraphqlAPIDemultiplexer  (Custom WebSocket consumer subclass that handles demultiplexing streams)\n\n\nSubscriptions:\n--------------\n\nThis first approach to add Graphql subscriptions support  with Channels in graphene-django, use channels-api package.\n\n*****************************************\n1- Defining custom Subscriptions classes:\n*****************************************\n\nYou must to have defined a Serializer class for each model that you want to define a Subscription class:\n\n.. code:: python\n\n    # app/graphql/subscriptions.py\n    import graphene\n    from graphene_django_subscriptions.subscription import Subscription\n    from .serializers import UserSerializer, GroupSerializer\n\n\n    class UserSubscription(Subscription):\n        class Meta:\n            serializer_class = UserSerializer\n            stream = 'users'\n            description = 'User Subscription'\n\n\n    class GroupSubscription(Subscription):\n        class Meta:\n            serializer_class = GroupSerializer\n            stream = 'groups'\n            description = 'Group Subscription'\n\n\nAdd the subscriptions definitions into your app's schema:\n\n.. code:: python\n\n    # app/graphql/schema.py\n    import graphene\n    from .subscriptions import UserSubscription, GroupSubscription\n\n\n    class Subscriptions(graphene.ObjectType):\n        user_subscription = UserSubscription.Field()\n        GroupSubscription = PersonSubscription.Field()\n\n\nAdd the app's schema into your project root schema:\n\n.. code:: python\n\n    # schema.py\n    import graphene\n    import custom.app.route.graphql.schema\n\n\n    class RootQuery(custom.app.route.graphql.schema.Query, graphene.ObjectType):\n        class Meta:\n            description = 'The project root query definition'\n\n\n    class RootMutation(custom.app.route.graphql.schema.Mutation, graphene.ObjectType):\n        class Meta:\n            description = 'The project root mutation definition'\n\n\n    class RootSubscription(custom.app.route.graphql.schema.Subscriptions, graphene.ObjectType):\n        class Meta:\n            description = 'The project root subscription definition'\n\n\n    schema = graphene.Schema(\n        query=RootQuery,\n        mutation=RootMutation,\n        subscription=RootSubscription\n    )\n\n\n********************************************************\n2- Defining Channels settings and custom routing config:\n********************************************************\n**Note**: For more information about this step see Channels documentation.\n\nYou must to have defined a DjangoSerializerMutation class for each model that you want to define a Subscription class:\n\nWe define app routing, as if they were app urls:\n\n.. code:: python\n\n    # app/routing.py\n    from graphene_django_subscriptions.consumers import GraphqlAPIDemultiplexer\n    from channels.routing import route_class\n    from .graphql.subscriptions import UserSubscription, GroupSubscription\n\n\n    class CustomAppDemultiplexer(GraphqlAPIDemultiplexer):\n        consumers = {\n          'users': UserSubscription.get_binding().consumer,\n          'groups': GroupSubscription.get_binding().consumer\n        }\n\n\n    app_routing = [\n        route_class(CustomAppDemultiplexer)\n    ]\n\n\nDefining our project routing, like custom root project urls:\n\n.. code:: python\n\n    # project/routing.py\n    from channels import include\n\n    project_routing = [\n        include(\"custom.app.folder.routing.app_routing\", path=r\"^/custom_websocket_path\"),\n    ]\n\n\nYou should put into your INSTALLED_APPS the channels and channels_api modules and you must to add your project's routing definition into the CHANNEL_LAYERS setting:\n\n.. code:: python\n\n    # settings.py\n    ...\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'channels',\n        'channels_api',\n\n        'custom_app'\n    )\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n            \"ROUTING\": \"myproject.routing.project_routing\",  # Our project routing\n        },\n    }\n    ...\n\nYou must add **'graphene_django_subscriptions.depromise_subscription'** middleware at the end of your GRAPHENE dict config on your settings.py:\n\n.. code:: python\n\n    # settings.py\n    ...\n    GRAPHENE = {\n        'SCHEMA_INDENT': 4,\n        'MIDDLEWARE': [\n            # Others middleware\n            'graphene_django_subscriptions.depromise_subscription',\n        ]\n    }\n    ...\n\n\n***************************\n3- Subscription's examples:\n***************************\n\nIn your WEB client you must define websocket connection to: 'ws://host:port/custom_websocket_path'.\nWhen the connection is established, the server return a websocket's message like this:\n{\"channel_id\": \"GthKdsYVrK!WxRCdJQMPi\", \"connect\": \"success\"}, where you must store the channel_id value to later use in your graphql subscriptions request for subscribe or unsubscribe operations.\n\nThe graphql's subscription request accept five possible parameters:\n1.  **operation**: Operation to perform: subscribe or unsubscribe. (required)\n2.  **action**: Action to which you wish to subscribe: create, update, delete or all_actions. (required)\n3.  **channelId**: Identification of the connection by websocket. (required)\n4.  **id**: Object's ID field value that you wish to subscribe to. (optional)\n5.  **data**: Model's fields that you want to appear in the subscription notifications. (optional)\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: SUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5,\n            data: [ID, USERNAME, FIRST_NAME, LAST_NAME, EMAIL, IS_SUPERUSER]\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\nIn this case, the subscription request sent return a websocket message to client like this: *{\"action\": \"update\", \"operation\": \"subscribe\", \"ok\": true, \"stream\": \"users\", \"error\": null}* and from that moment each time than the user with id=5 get modified, you will receive a message through websocket's connection with the following format:\n\n.. code:: python\n\n    {\n        \"stream\": \"users\",\n        \"payload\": {\n            \"action\": \"update\",\n            \"model\": \"auth.user\",\n            \"data\": {\n                \"id\": 5,\n                \"username\": \"meaghan90\",\n                \"first_name\": \"Meaghan\",\n                \"last_name\": \"Ackerman\",\n                \"email\": \"meaghan@gmail.com\",\n                \"is_superuser\": false\n            }\n        }\n    }\n\n\nFor unsubscribe you must send a graphql request like this:\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: UNSUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\n*NOTE*: Each time than the graphql's server restart, you must to reestablish the websocket connection and resend the graphql's subscription request with the new websocket connection id.\n\n\nChange Log:\n-----------\n\n*******\nv0.0.6:\n*******\n1. Fixed minor bug on model_fields_enum generation when define fields in serializer class like this: fields = \"__all__\"\n2. This avoid malfunction with the posterior versions of graphene-django.\n\n*******\nv0.0.4:\n*******\n1. Fixed minor bug on *subscription_resolver* function.\n\n*******\nv0.0.3:\n*******\n1. Added **depromise_subscription** middleware to allow use subscriptions on graphene-django>=2.0.\n2. Updated setup dependence to graphene-django-extras>=0.3.0.\n\n*******\nv0.0.2:\n*******\n1. Changed mutation_class dependence on Subscription Meta class definition to serializer_class to get better\nintegration.\n2. Fixed some minor bugs.\n\n*******\nv0.0.1:\n*******\n1. First commit\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eamigo86/graphene-django-subscriptions",
    "keywords": "api graphql subscription rest graphene django channels",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gql-graphene-django-subscriptions",
    "package_url": "https://pypi.org/project/gql-graphene-django-subscriptions/",
    "platform": "any",
    "project_url": "https://pypi.org/project/gql-graphene-django-subscriptions/",
    "project_urls": {
      "Homepage": "https://github.com/eamigo86/graphene-django-subscriptions"
    },
    "release_url": "https://pypi.org/project/gql-graphene-django-subscriptions/0.0.7/",
    "requires_dist": [
      "graphene-django (==2.6.0)",
      "graphene-django-extras (>=0.3.0)",
      "channels-api (>=0.4.0)"
    ],
    "requires_python": "",
    "summary": "Graphene-Django-Subscriptions add subscriptions support to graphene-django through Channels module",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6267477,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156a19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6",
          "md5": "c55f1edff7c5965996deb332ab67d64d",
          "sha256": "27b3a84e61b5007c992be5bfa932950e007dd90e91f7d1d35284101036810583"
        },
        "downloads": -1,
        "filename": "gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c55f1edff7c5965996deb332ab67d64d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13957,
        "upload_time": "2019-12-09T17:21:12",
        "upload_time_iso_8601": "2019-12-09T17:21:12.046987Z",
        "url": "https://files.pythonhosted.org/packages/15/6a/19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6/gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "156a19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6",
        "md5": "c55f1edff7c5965996deb332ab67d64d",
        "sha256": "27b3a84e61b5007c992be5bfa932950e007dd90e91f7d1d35284101036810583"
      },
      "downloads": -1,
      "filename": "gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c55f1edff7c5965996deb332ab67d64d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13957,
      "upload_time": "2019-12-09T17:21:12",
      "upload_time_iso_8601": "2019-12-09T17:21:12.046987Z",
      "url": "https://files.pythonhosted.org/packages/15/6a/19b72e2b58be1fc62be0d11cd3fd3358e5992e98425516c2bcb2f6e226e6/gql_graphene_django_subscriptions-0.0.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}