{
  "info": {
    "author": "Branko Mirkovic",
    "author_email": "branko623@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "Python Raspberry Pi Serial Expander Board driver\n======================\n\nThis is a driver written in python and optimized with cython for the [Pixelblaze Output Expander Board](https://github.com/simap/pixelblaze_output_expander) for use on Raspberry Pi (it could work for other systems with slight modifications, but this has not been tested). \n\nThe raspberry pi hardware is not optimized for tasks such as driving neopixels through its GPIO. Drivers exist such as neopixel_write, but cannot drive larger arrays or pass 100fps for smaller ones, and a lot of precious CPU cycles are lost in driving them. Also, you can only run one strip, the Expander board allows for up to 64 in certain setups.  \n\nThis board makes use of the UART TX port on your device. Any raspberry pi with a serial interface can be used, as long as the port and baudrate that are passed are correct, and your UART is set up and working (Enable by going to sudo raspi-config -> interface options -> serial -> turn OFF serial terminal/turn ON serial interface -> reboot). After doing this, GPIO14 should be activiated for serial use. You will know that the expander board is recieving valid serial data if it begins blinking an orange LED. \n\nCurrently only ws281x strips are supported by this python code (APA strips are also supported by this board) \n\nInstallation\n-------------------\n\n```bash\npython3 -m pip install LEDSerialExpander\n```\n\nUsage\n-------------------\nImport the Library:\n```python\nfrom LEDSerialExpander import LEDSerialExpander\n```\n\nConfigure your strip with a dictionary, with the keys as the board pin numbers: \n```python\nstrips = {0: {'size':80, 'order': 'RGB' ,'type':1},\n          1: {'size':30, 'order': 'RGBW' ,'type':1},\n          4: {'size':72, 'order': 'RGB' ,'type':1}}\n\ndisplay = LEDSerialExpander(strips)\n```\nThe type:1 indicated is for WS281x strips, which are the only ones that this driver currently supports.\n\nPass data to be written either by a bytearray() that contains data for all strips in channel-sequential order:\n\n```python\ndata = bytearray([0 for _ in range(576)]) \n#your code to manipulate data\n\ndisplay.write(data)\n```\n\nor alternatively, pass a dict with individual channels as keys containing their own bytearrays: \n\n```python\ndata_dict = {0: data1,\n             1: data2,\n             4: data3}\n\ndisplay.write(data_dict) \n```\n\nFor a working example, check example.py\n\nOther Parameters\n-------------------\n<ul>\n<li>\n<b> uart: </b>\ndefault: \"/dev/ttyS0\"\nThis controls the uart tx port. Raspberry pi 3, 4, and zero W will by default use \"/dev/ttyS0\". Others might use \"/dev/ttyAMA0\". \n</li>\n\n<li>\n<b>baud:</b>\ndefault: 2000000\nThe baudrate is the speed at which the serial connection operates. It has been discovered that for RPI ZERO W, a baudrate of 2304000 (a standard baudrate multiple) was needed for the connection to work, while on the PI 4, only 2000000 worked. Others remain untested.\n</li>\n\n<li>\n<b>fps_show:</b>\ndefault: False\nIf set to True, this will print the FPS being displayed every second to the console\n</li>\n\n<li>\n<b>draw_wait:</b>\ndefault: .0036 \nTime in seconds to wait after draw command is sent before new data gets passed. .0036 is mentioned as safe by board creator. This however tends to cap the framerate. See below for more details.\n</li>\n</ul>\n\nNotes on fast framerates:\n-------------------\n<ul>\n<li>\nThis driver is capable of displaying pixels at a relatively high framerates (300+ FPS). This might however take some expiriementing. For larger setups (such as over 150 pixels), the data transfer rate will ultimately influence how many times per second you can pass pixel data. For smaller setups, it is possible to push your setup over 300 FPS. In order to achieve this, a parameter was included that can be passed to override the board creator's recommended wait time after a draw command is sent to the board. (draw_wait)  \n</li>\n<li>\nI would advise distributing your pixels as much as possible between the 8 channels. Then pass a draw_wait smaller than .0036, potentially as small as 0. For two strips of 70 pixels, I was able to pass 0.0001 and achieve over 400 FPS without graphical errors. \n</li>\n<li>Figuring out an optimal draw_wait time might take some experimenting. You will know that your value is too low if you visually see frames getting skipped.\n</li>\n<li> \nPure python in itself is rather inefficient when doing lots of computations repetitively, CPU time is wasted due to the global interpreter lock, type checking, etc.Keep this in mind when trying to push higher framerates.</li>\n<li>Consider wrapping the write() in a <code>multiprocessing</code> process, if your computations begin to overtake your CPU and influence the framerate. </li>\n</ul>\n\nTroubleshooting:\n------------------- \nIf you are not seeing the orange on the expander board (valid data recieved), things to check: \n\n<ul>\n<li>Make sure that ground is continuous across your strip, the expander board, and your pi (or other device), and all other wiring in order.</li> \n<li>Your UART interface may not be turned on, or may be set to a different port. You can test using an application called minicom ( <code>sudo apt-get install minicom</code> ), connecting your UX and RX pins on your board, and opening two terminals, the TX controlled by your TX port (like /dev/ttyS0) with command: <code>minicom -b 9600 -o -D /dev/ttyS0</code> and RX connected to your RX port (usually /dev/serial0) with command: <code>minicom -b 9600 -o -D /dev/serial0</code> Typing anything into the TX terminal should echo back on the RX window.</li> \n<li>The default baudrate is not syncing. Set to a different rate.</li> \n</ul>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/branko623/LEDSerialExpander",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LEDSerialExpander",
    "package_url": "https://pypi.org/project/LEDSerialExpander/",
    "platform": "",
    "project_url": "https://pypi.org/project/LEDSerialExpander/",
    "project_urls": {
      "Code": "https://github.com/branko623/LEDSerialExpander",
      "Documentation": "https://github.com/branko623/LEDSerialExpander",
      "Homepage": "https://github.com/branko623/LEDSerialExpander",
      "Issue tracker": "https://github.com/branko623/LEDSerialExpander/issues"
    },
    "release_url": "https://pypi.org/project/LEDSerialExpander/0.2.2/",
    "requires_dist": [
      "pyserial (>=3.4)"
    ],
    "requires_python": ">=3.4",
    "summary": "Expander Board Python Driver",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7970039,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbea3bed57a0c6936f2ba8b41ab03ba1e5ba2cf7aa357ae68bc8e4194224e6d1",
          "md5": "0be0be0c7b779ca35c415c862ba1c0f6",
          "sha256": "1cd65ae9468871ebf473d5eee6e4db99a1023f6131b91b21c362249ab8cdbcc0"
        },
        "downloads": -1,
        "filename": "LEDSerialExpander-0.1-cp37-cp37m-linux_armv7l.whl",
        "has_sig": false,
        "md5_digest": "0be0be0c7b779ca35c415c862ba1c0f6",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.4",
        "size": 428080,
        "upload_time": "2020-08-15T00:33:13",
        "upload_time_iso_8601": "2020-08-15T00:33:13.749348Z",
        "url": "https://files.pythonhosted.org/packages/db/ea/3bed57a0c6936f2ba8b41ab03ba1e5ba2cf7aa357ae68bc8e4194224e6d1/LEDSerialExpander-0.1-cp37-cp37m-linux_armv7l.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "335fd492cfebb8e5d67f457fa96cce9f794c8fd3b2fc63406c070d696f0c9176",
          "md5": "4694bb8d4a1094a7a683bad427685fbb",
          "sha256": "3cce8e6db2888bd47c91df5335ab9ddd9f871956066cab684f79d20c66ccec31"
        },
        "downloads": -1,
        "filename": "LEDSerialExpander-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4694bb8d4a1094a7a683bad427685fbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 159786,
        "upload_time": "2020-08-15T00:33:16",
        "upload_time_iso_8601": "2020-08-15T00:33:16.488235Z",
        "url": "https://files.pythonhosted.org/packages/33/5f/d492cfebb8e5d67f457fa96cce9f794c8fd3b2fc63406c070d696f0c9176/LEDSerialExpander-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "174a3416387341408bacdb11f78cc1bce3ce1362f920b4c35210406fedc9fd4b",
          "md5": "abb262f8fc697a594b9796a3531eedad",
          "sha256": "12cc9951245de436117285c92c02b6053c893082caa320ad43925d92ffe6f66e"
        },
        "downloads": -1,
        "filename": "LEDSerialExpander-0.2.2-cp37-cp37m-linux_armv7l.whl",
        "has_sig": false,
        "md5_digest": "abb262f8fc697a594b9796a3531eedad",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.4",
        "size": 452927,
        "upload_time": "2020-08-16T03:47:14",
        "upload_time_iso_8601": "2020-08-16T03:47:14.896394Z",
        "url": "https://files.pythonhosted.org/packages/17/4a/3416387341408bacdb11f78cc1bce3ce1362f920b4c35210406fedc9fd4b/LEDSerialExpander-0.2.2-cp37-cp37m-linux_armv7l.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d75a5765e5034c977285d4597e152ec814675b5206b5df3f7c9240264f6afe6a",
          "md5": "4d8b815d2a3f0e62ef01f7caedea3461",
          "sha256": "274970c062856f662c19e5f68e7ebc444cfa33c62792e5ce8f9506fc95717a9c"
        },
        "downloads": -1,
        "filename": "LEDSerialExpander-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d8b815d2a3f0e62ef01f7caedea3461",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 171814,
        "upload_time": "2020-08-16T03:47:16",
        "upload_time_iso_8601": "2020-08-16T03:47:16.507340Z",
        "url": "https://files.pythonhosted.org/packages/d7/5a/5765e5034c977285d4597e152ec814675b5206b5df3f7c9240264f6afe6a/LEDSerialExpander-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "174a3416387341408bacdb11f78cc1bce3ce1362f920b4c35210406fedc9fd4b",
        "md5": "abb262f8fc697a594b9796a3531eedad",
        "sha256": "12cc9951245de436117285c92c02b6053c893082caa320ad43925d92ffe6f66e"
      },
      "downloads": -1,
      "filename": "LEDSerialExpander-0.2.2-cp37-cp37m-linux_armv7l.whl",
      "has_sig": false,
      "md5_digest": "abb262f8fc697a594b9796a3531eedad",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.4",
      "size": 452927,
      "upload_time": "2020-08-16T03:47:14",
      "upload_time_iso_8601": "2020-08-16T03:47:14.896394Z",
      "url": "https://files.pythonhosted.org/packages/17/4a/3416387341408bacdb11f78cc1bce3ce1362f920b4c35210406fedc9fd4b/LEDSerialExpander-0.2.2-cp37-cp37m-linux_armv7l.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d75a5765e5034c977285d4597e152ec814675b5206b5df3f7c9240264f6afe6a",
        "md5": "4d8b815d2a3f0e62ef01f7caedea3461",
        "sha256": "274970c062856f662c19e5f68e7ebc444cfa33c62792e5ce8f9506fc95717a9c"
      },
      "downloads": -1,
      "filename": "LEDSerialExpander-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4d8b815d2a3f0e62ef01f7caedea3461",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 171814,
      "upload_time": "2020-08-16T03:47:16",
      "upload_time_iso_8601": "2020-08-16T03:47:16.507340Z",
      "url": "https://files.pythonhosted.org/packages/d7/5a/5765e5034c977285d4597e152ec814675b5206b5df3f7c9240264f6afe6a/LEDSerialExpander-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}