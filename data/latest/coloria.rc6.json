{
  "info": {
    "author": "",
    "author_email": "Nico Schl√∂mer <nico.schloemer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/coloria-dev/coloria\"><img alt=\"coloria\" src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/logo/coloria-logo.png\" width=\"60%\"></a>\n  <p align=\"center\">Tools for color research.</p>\n</p>\n\n[![PyPi Version](https://img.shields.io/pypi/v/coloria.svg?style=flat-square)](https://pypi.org/project/coloria/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/coloria.svg?style=flat-square)](https://pypi.org/project/coloria/)\n[![GitHub stars](https://img.shields.io/github/stars/coloria-dev/coloria.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/coloria-dev/coloria)\n[![Downloads](https://pepy.tech/badge/coloria/month?style=flat-square)](https://pepy.tech/project/coloria)\n\n<!--[![PyPi downloads](https://img.shields.io/pypi/dm/coloria.svg?style=flat-square)](https://pypistats.org/packages/coloria)-->\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&logoColor=white&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/hnTJ5MRX2Y)\n\n### Installation\n\nInstall Coloria [from PyPI](https://pypi.org/project/coloria/) with\n\n```\npip install coloria\n```\n\nTo run Coloria, you need a license. See [here](https://github.com/coloria-dev)\nfor more info.\n\n### Illuminants, observers, white points\n\n|                                              Illuminants                                              |                                                 CIE 1931 Observer                                                 |\n| :---------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------------: |\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/illuminants.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/cie-standard-observer-2.svg\" width=\"100%\"> |\n\n```python\nimport coloria\nimport matplotlib.pyplot as plt\n\nillu = coloria.illuminants.d65()\nplt.plot(illu.lmbda_nm, illu.data)\nplt.xlabel(\"wavelength [nm]\")\nplt.show()\n```\n\nThe following illuminants are provided:\n\n- Illuminant A (\"indoor light\", `coloria.illuminants.a(resolution_in_nm)`)\n- Illuminant C (obsolete, \"North sky daylight\", `coloria.illuminants.c()`)\n- Illuminants D (\"natural daylight\", `coloria.illuminants.d(nominal_temp)` or\n  `coloria.illuminants.d65()`\n  etc.)\n- Illuminant E (equal energy, `coloria.illuminants.e()`)\n- Illuminant series F (\"fluorescent lighting\", `coloria.illuminants.f2()` etc.)\n\nObservers:\n\n- CIE 1931 Standard 2-degree observer (`coloria.observers.coloria.observers.cie_1931_2()`)\n- CIE 1964 Standard 10-degree observer (`coloria.observers.coloria.observers.cie_1964_10()`)\n\n### Color appearance models\n\nColor appearance models (CAMs) predicts all kinds of parameters in color perception,\ne.g., lightness, brightness, chroma, colorfulness, saturation etc. Since these\nvalues depend on various factors, such as the surrouning, the models are initialized\nwith various different parameters.\n\nCAMs can be used to construct color _spaces_ (see below).\n\nThe color appearance models available in coloria are\n\n- CIECAM02 / CAM02-UCS\n\n  ```python\n  import coloria\n\n  ciecam02 = coloria.cam.CIECAM02(\"average\", 20, 100)\n  # parameters:\n  # c:   surround parameter\n  # Y_b: relative background luminance\n  # L_A: luminance of the adapting field\n\n  xyz = [19.31, 23.93, 10.14]\n  corr = ciecam02.from_xyz100(xyz)\n  # then work with those values:\n  corr.lightness\n  corr.brightness\n  corr.chroma\n  corr.hue_composition\n  corr.hue_angle_degrees\n  corr.colorfulness\n  corr.saturation\n  ```\n\n- CAM16 / CAM16-UCS\n\n  ```python\n  import coloria\n\n  cam16 = coloria.cam.CAM16(\"average\", 20, 100)\n  ```\n\n- ZCAM\n\n  ```python\n  import coloria\n\n  cam16 = coloria.cam.ZCAM(\"average\", 20, 100, 20)\n  ```\n\n### Color coordinates and spaces\n\nColor coordinates are handled as NumPy arrays or as `ColorCoordinates`, a thin\nwrapper around the data that retains the color space information and has some\nhandy helper methods. Color spaces can be instantiated from the classes in\n`coloria.cs`, e.g.,\n\n```python\nimport coloria\n\ncoloria.cs.CIELAB()\n```\n\nMost methods that accept such a colorspace also accept a string, e.g.,\n`cielab`.\n\nAs an example, to interpolate two sRGB colors in OKLAB, and return the sRGB:\n\n```python\nfrom coloria.cs import ColorCoordinates\n\n# you can also plug in large numpy arrays instead of two lists here\nc0 = ColorCoordinates([1.0, 1.0, 0.0], \"srgb1\")  # yellow\nc1 = ColorCoordinates([0.0, 0.0, 1.0], \"srgb1\")  # blue\n\n# naive interpolation gives [0.5, 0.5, 0.5], a mid gray\n\n# convert to OKLAB\nc0.convert(\"oklab\")\nc1.convert(\"oklab\")\n\n# interpolate\nc2 = (c0 + c1) * 0.5\n\nc2.convert(\"srgbhex\", mode=\"clip\")\n\nprint(c2.color_space)\nprint(c2.data)\n```\n\n<!--pytest-codeblocks:expected-output-->\n\n```\n<coloria color space sRGB-hex>\n#6cabc7\n```\n\nAll color spaces implement the two methods\n\n<!--pytest.mark.skip-->\n\n```python\nvals = colorspace.from_xyz100(xyz)\nxyz = colorspace.to_xyz100(vals)\n```\n\nfor conversion from and to XYZ100. Adding new color spaces is as easy as writing a class\nthat provides those two methods. The following color spaces are already implemented:\n\n- XYZ (`coloria.cs.XYZ(100)`, the\n  parameter determining the scaling)\n- xyY\n  (`coloria.cs.XYY(100)`, the parameter determining the scaling of `Y`)\n- sRGB (`coloria.cs.SRGBlinear()`,\n  `coloria.cs.SRGB1()`, `coloria.cs.SRGB255()`, `coloria.cs.SRGBhex()`)\n- HSL and HSV (`coloria.cs.HSL()`,\n  `coloria.cs.HSV()`)\n  These classes also have the two methods\n  ```\n  from_srgb1()\n  to_srgb1()\n  ```\n  for direct conversion from and to standard RGB.\n- [OSA-UCS (`coloria.cs.OsaUcs()`)](https://en.wikipedia.org/wiki/OSA-UCS), 1947\n- CIELAB (`coloria.cs.CIELAB()`), 1976\n- CIELUV (`coloria.cs.CIELUV()`), 1976\n- [RLAB (`coloria.cs.RLAB()`)](https://doi.org/10.1117/12.149061), 1993\n- [IPT\n  (`coloria.cs.IPT()`)](https://www.ingentaconnect.com/content/ist/cic/1998/00001998/00000001/art00003),\n  1998\n- DIN99 and its variants DIN99{b,c,d} (`coloria.cs.DIN99()`), 1999\n- CAM02-UCS, 2002\n\n  ```python\n  import coloria\n\n  cam02 = coloria.cs.CAM02(\"UCS\", \"average\", 20, 100)\n  ```\n\n  The implementation contains a few improvements over the CIECAM02\n  specification (see [here](https://arxiv.org/abs/1802.06067)).\n\n- CAM16-UCS, 2016\n\n  ```python\n  import coloria\n\n  cam16ucs = coloria.cs.CAM16UCS(\"average\", 20, 100)\n  ```\n\n  The implementation contains a few improvements over the CAM16\n  specification (see [here](https://arxiv.org/abs/1802.06067)).\n\n- SRLAB2 (`coloria.cs.SRLAB2()`)\n- [J<sub>z</sub>a<sub>z</sub>b<sub>z</sub>](https://doi.org/10.1364/OE.25.015131)\n  (`coloria.cs.JzAzBz()`), 2017\n- [ICtCp (`coloria.cs.ICtCp()`)](https://en.wikipedia.org/wiki/ICtCp), 2018\n- [I<sub>G</sub>P<sub>G</sub>T<sub>G</sub>\n  (`coloria.cs.IGPGTG()`)](https://doi.org/10.2352/J.Percept.Imaging.2020.3.2.020401),\n  2020\n- [proLab (`coloria.cs.PROLAB()`)](https://arxiv.org/abs/2012.07653), 2020\n- [Oklab (`coloria.cs.OKLAB()`)](https://bottosson.github.io/posts/oklab/), 2020\n- OkLCh (`coloria.cs.OKLCH()`), 2020\n- [HCT (`coloria.cs.HCT()`/ HCTLAB\n  (`coloria.cs.HCTLAB()`)](https://material.io/blog/science-of-color-design),\n  2022\n\nAll methods in coloria are fully vectorized, i.e., computation is _really_\nfast.\n\n### Color difference formulas\n\ncoloria implements the following color difference formulas:\n\n- CIE76\n  <!--pytest.mark.skip-->\n  ```python\n  coloria.diff.cie76(lab1, lab2)\n  ```\n- CIE94\n  <!--pytest.mark.skip-->\n  ```python\n  coloria.diff.cie94(lab1, lab2)\n  ```\n- CIEDE2000\n  <!--pytest.mark.skip-->\n  ```python\n  coloria.diff.ciede2000(lab1, lab2)\n  ```\n- CMC l:c\n  <!--pytest.mark.skip-->\n  ```python\n  coloria.diff.cmc(lab1, lab2)\n  ```\n\n### Chromatic adaptation transforms\n\ncoloria implements the following CATs:\n\n- von Kries\n  <!--pytest.mark.skip-->\n  ```python\n  cat, cat_inv = coloria.cat.von_kries(whitepoint_source, whitepoint_destination)\n  xyz1 = cat @ xyz0\n  ```\n- Bradford (`coloria.cat.bradford`)\n- sharp (`coloria.cat.sharp`)\n- CMCCAT2000 (`coloria.cat.cmccat2000`)\n- CAT02 (`coloria.cat.cat02`)\n- CAT16 (`coloria.cat.cat16`)\n- Bianco-Schettini (`coloria.cat.bianco_schettini`)\n\n### Gamut visualization\n\ncoloria provides a number of useful tools for analyzing and visualizing color spaces.\n\n#### sRGB gamut\n\n|                                                      CIELAB                                                       |                                                      CAM16-UCS                                                      |                                                      Oklab                                                       |\n| :---------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------: |\n|    <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-cielab.png\" width=\"100%\">    |     <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-cam16.png\" width=\"100%\">      |    <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-oklab.png\" width=\"100%\">    |\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-slice-cielab.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-slice-cam16ucs.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/srgb-gamut-slice-oklab.png\" width=\"100%\"> |\n\nThe sRGB gamut is a perfect cube in sRGB space, and takes curious shapes when translated\ninto other color spaces. The above images show the sRGB gamut in different color spaces.\n\n<!--pytest.mark.skip-->\n\n```python\nimport coloria\n\np = coloria.plot_rgb_gamut(\n    \"cielab\",  # or coloria.cs.CIELAB()\n    n=51,\n    show_grid=True,\n)\np.show()\n```\n\nFor more visualization options, you can store the sRGB data in a file\n\n```python\nimport coloria\n\ncoloria.save_rgb_gamut(\"srgb.vtk\", \"cielab\", n=51)\n# all formats supported by https://github.com/coloria-dev/meshio\n```\n\nand open it with a tool of your choice. See\n[here](https://github.com/coloria-dev/coloria/wiki/Visualizing-VTK-files) for how to open\nthe file in [ParaView](https://www.paraview.org/).\n\nFor lightness slices of the sRGB gamut, use\n\n<!--pytest.mark.skip-->\n\n```python\nimport coloria\n\np = coloria.plot_rgb_slice(\"cielab\", lightness=50.0, n=51)\np.show()\n# or\n# p.screenshot(\"screenshot.png\")\n```\n\n#### Surface color gamut\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/surface-gamut-xyz.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/surface-gamut-cielab.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/surface-gamut-cam16.png\" width=\"100%\"> |\n| :---------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------: |\n|                                                     XYZ                                                     |                                                     CIELAB                                                     |                                                   CAM16-UCS                                                   |\n\nSame as above, but with the surface color gamut visible under a given illuminant.\n\n<!--pytest.mark.skip-->\n\n```python\nimport coloria\n\nilluminant = coloria.illuminants.d65()\nobserver = coloria.observers.cie_1931_2()\n\np = coloria.plot_surface_gamut(\n    \"xyz100\",  # or coloria.cs.XYZ(100)\n    observer,\n    illuminant,\n)\np.show()\n```\n\nThe gamut is shown in grey since sRGB screens are not able to display the colors anyway.\n\n#### The visible gamut\n\n|                                                        xyY                                                        |                                                        JzAzBz                                                        |                                                        Oklab                                                        |\n| :---------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------: |\n|    <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-xyy.png\" width=\"100%\">    |    <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-jzazbz.png\" width=\"100%\">    |    <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-oklab.png\" width=\"100%\">    |\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-slice-xyy.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-slice-jzazbz.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/visible-gamut-slice-oklab.png\" width=\"100%\"> |\n\nSame as above, but with the gamut of visible colors up to a given lightness `Y`.\n\n<!--pytest.mark.skip-->\n\n```python\nimport coloria\n\nobserver = coloria.observers.cie_1931_2()\n\ncolorspace = coloria.cs.XYZ(100)\n\np = coloria.plot_visible_gamut(colorspace, observer, max_Y1=1)\np.show()\n```\n\nThe gamut is shown in grey since sRGB screens are not able to display the colors anyway.\n\nFor slices, use\n\n```python\nimport coloria\n\nplt = coloria.plot_visible_slice(\"cielab\", lightness=0.5)\nplt.show()\n```\n\n### Color gradients\n\nWith coloria, you can easily visualize the basic color gradients of any color space.\nThis may make defects in color spaces obvious, e.g., the well-known blue-distortion of\nCIELAB and related spaces. (Compare with [the hue linearity data\nbelow](#hue-linearity).)\n\n```python\nimport coloria\n\nplt = coloria.plot_primary_srgb_gradients(\"cielab\")\nplt.show()\n```\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/gradients-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/gradients-din99.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/gradients-oklab.svg\" width=\"100%\"> |\n| :--------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: |\n|                                                   CIELAB                                                   |                                                   DIN99                                                   |                                                   OKLAB                                                   |\n\n### Experimental data\n\ncoloria contains lots of experimental data sets some of which can be used to assess\ncertain properties of color spaces. Most data sets can also be visualized.\n\n#### Color differences\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1974-xyy1.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1974-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1974-cam16ucs.svg\" width=\"100%\"> |\n| :--------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------: |\n|                                                    xyY                                                     |                                                    CIELAB                                                    |                                                     CAM16                                                      |\n\nColor difference data from [MacAdam (1974)](https://doi.org/10.1364/JOSA.64.0\"average\"1). The\nabove plots show the 43 color pairs that are of comparable lightness. The data is\nmatched perfectly if the facing line stubs meet in one point.\n\n```python\nimport coloria\n\ndata = coloria.data.MacAdam1974()\n\ncs = coloria.cs.CIELAB\n\nplt = data.plot(cs)\nplt.show()\nprint(coloria.data.MacAdam1974().stress(cs))\n```\n\n```\n24.54774029343344\n```\n\nThe same is available for\n\n```\ncoloria.data.BfdP()\ncoloria.data.Leeds()\ncoloria.data.RitDupont()\ncoloria.data.Witt()\n\ncoloria.data.COMBVD()  # a weighted combination of the above\n```\n\n#### Munsell\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/munsell-xyy1.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/munsell-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/munsell-cam16ucs.svg\" width=\"100%\"> |\n| :----------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------: |\n|                                                  xyY                                                   |                                                  CIELAB                                                  |                                                   CAM16                                                    |\n\n[Munsell color data](https://www.rit.edu/cos/colorscience/rc_munsell_renotation.php) is\nvisualized with\n\n```python\nimport coloria\n\ncs = coloria.cs.CIELUV\nplt = coloria.data.Munsell().plot(cs, V=5)\nplt.show()\n```\n\nTo retrieve the Munsell data in xyY format, use\n\n```python\nimport coloria\n\nmunsell = coloria.data.Munsell()\n\n# munsell.h\n# munsell.V\n# munsell.C\n# munsell.xyy\n```\n\n#### Ellipses\n\n##### MacAdam ellipses (1942)\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1942-xyy.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1942-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/macadam1942-cam16.svg\" width=\"100%\"> |\n| :-------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: |\n|                                              xyY (at Y=0.4)                                               |                                               CIELAB (at L=50)                                               |                                               CAM16 (at L=50)                                               |\n\nThe famous MacAdam ellipses (from [this\narticle](https://doi.org/10.1364%2FJOSA.32.000247)) can be plotted with\n\n```python\nimport coloria\n\ncs = coloria.cs.CIELUV\nplt = coloria.data.MacAdam1942(50.0).plot(cs)\nplt.show()\n```\n\nThe better the colorspace matches the data, the closer the ellipses are to circles of\nthe same size.\n\n##### Luo-Rigg ellipses\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/luo-rigg-xyy.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/luo-rigg-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/luo-rigg-cam16ucs.svg\" width=\"100%\"> |\n| :----------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: |\n|                                                  xyY                                                   |                                                  CIELAB                                                   |                                                    CAM16                                                    |\n\nLikewise for [Luo-Rigg](https://doi.org/10.1002/col.5080110107).\n\n```python\nimport coloria\n\n# xyy = coloria.cs.XYY(100)\n# coloria.data.LuoRigg(8).show(xyy, 0.4)\n# coloria.data.LuoRigg(8).savefig(\"luo-rigg-xyy.png\", xyy, 0.4)\n\ncieluv = coloria.cs.CIELUV()\nplt = coloria.data.LuoRigg(8).plot(cieluv, 50)\nplt.show()\n```\n\n#### Hue linearity\n\n##### Ebner-Fairchild\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/ebner-fairchild-xyy1.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/ebner-fairchild-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/ebner-fairchild-cam16ucs.svg\" width=\"100%\"> |\n| :------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------------------: |\n|                                                      xyY                                                       |                                                      CIELAB                                                      |                                                       CAM16                                                        |\n\nFor example\n\n```python\nimport coloria\n\ncolorspace = coloria.cs.JzAzBz\nplt = coloria.data.EbnerFairchild().plot(colorspace)\nplt.show()\n```\n\nshows constant-hue data from [the Ebner-Fairchild\nexperiments](https://doi.org/10.1117/12.298269) in the hue-plane of some color spaces.\n(Ideally, all colors in one set sit on a line.)\n\n###### Hung-Berns\n\nLikewise for [Hung-Berns](https://doi.org/10.1002/col.5080200506):\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/hung-berns-xyy.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/hung-berns-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/hung-berns-cam16.svg\" width=\"100%\"> |\n| :------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------: |\n|                                                   xyY                                                    |                                                   CIELAB                                                    |                                                   CAM16                                                    |\n\nNote the dark blue distortion in CIELAB and CAM16.\n\n```python\nimport coloria\n\ncolorspace = coloria.cs.JzAzBz\nplt = coloria.data.HungBerns().plot(colorspace)\nplt.show()\n```\n\n###### Xiao et al.\n\nLikewise for [Xiao et al.](https://doi.org/10.1002/col.20637):\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/xiao-xyy.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/xiao-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/xiao-cam16.svg\" width=\"100%\"> |\n| :------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------: |\n|                                                xyY                                                 |                                                CIELAB                                                 |                                                CAM16                                                 |\n\n```python\nimport coloria\n\ncolorspace = coloria.cs.CIELAB\nplt = coloria.data.Xiao().plot(colorspace)\nplt.show()\n```\n\n#### Lightness\n\n###### Fairchild-Chen\n\n| <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/fairchild-chen-xyy.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/fairchild-chen-cielab.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/coloria-dev/coloria/main/plots/fairchild-chen-cam16.svg\" width=\"100%\"> |\n| :----------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------: |\n|                                                     xyY                                                      |                                                     CIELAB                                                      |                                                     CAM16                                                      |\n\nLightness experiment by [Fairchild-Chen](https://doi.org/10.1117/12.872075).\n\n```python\nimport coloria\n\ncs = coloria.cs.CIELAB\nplt = coloria.data.FairchildChen(\"SL2\").plot(cs)\nplt.show()\n```\n\n### Articles\n\n- [Algorithmic improvements for the CIECAM02 and CAM16 color appearance models,\n  Nico Schl√∂mer, 2018](https://arxiv.org/abs/1802.06067)\n- [On the conversion from OSA-UCS to CIEXYZ, Nico Schl√∂mer,\n  2019](https://arxiv.org/abs/1911.08323)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coloria",
    "package_url": "https://pypi.org/project/coloria/",
    "platform": null,
    "project_url": "https://pypi.org/project/coloria/",
    "project_urls": {
      "changelog": "https://github.com/coloria-dev/coloria/blob/main/CHANGELOG.md",
      "homepage": "https://github.com/coloria-dev/coloria",
      "issues": "https://github.com/coloria-dev/coloria/issues"
    },
    "release_url": "https://pypi.org/project/coloria/0.13.5/",
    "requires_dist": [
      "x21 (>=0.4.10,<0.5.0)",
      "python-license-manager (>=0.1.17)",
      "matplotlib",
      "numpy (>=1.20)",
      "npx",
      "meshio (<6,>=4) ; extra == 'all'",
      "meshzoo ; extra == 'all'",
      "scipy ; extra == 'all'",
      "scipyx ; extra == 'all'",
      "pyvista ; (python_version < \"3.10\") and extra == 'all'"
    ],
    "requires_python": ">=3.7",
    "summary": "Tools for color models",
    "version": "0.13.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17221927,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ac0a7b12356df032fa5217a1b198e0cbba0d0b5eaf350a9d051ca7424a5988",
          "md5": "039dd7bff1d31c83bdd9500117b065fe",
          "sha256": "387a6bc913d67c76c9b951142d2fb8513b0d5f57c7b30c2ecabbb5bc2f7519eb"
        },
        "downloads": -1,
        "filename": "coloria-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "039dd7bff1d31c83bdd9500117b065fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 1128,
        "upload_time": "2023-03-08T14:45:11",
        "upload_time_iso_8601": "2023-03-08T14:45:11.735116Z",
        "url": "https://files.pythonhosted.org/packages/79/ac/0a7b12356df032fa5217a1b198e0cbba0d0b5eaf350a9d051ca7424a5988/coloria-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ef09a1498eb5892822cc3bb0d0dbbb72cd86d1cc071f71d37c89cfdd5cda6e9",
          "md5": "167748a9cfafb2fc9d2c39c638065cf2",
          "sha256": "8d7f86cb8d750cc817ceca762882e130a15828d45b32a3246764bd98fd65efea"
        },
        "downloads": -1,
        "filename": "coloria-0.13.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "167748a9cfafb2fc9d2c39c638065cf2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 767771,
        "upload_time": "2023-03-08T14:52:44",
        "upload_time_iso_8601": "2023-03-08T14:52:44.793747Z",
        "url": "https://files.pythonhosted.org/packages/9e/f0/9a1498eb5892822cc3bb0d0dbbb72cd86d1cc071f71d37c89cfdd5cda6e9/coloria-0.13.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fcbe18ee5c561803192d40c9d7ad8c09d263a1f24c748dee7a853864d56711c",
          "md5": "c29ecbb750b6eb1a8ca84a86b72de554",
          "sha256": "ff092f0b38299561d7f65b219182627a0727fbf6da779e50f5c63aa4772d1503"
        },
        "downloads": -1,
        "filename": "coloria-0.13.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c29ecbb750b6eb1a8ca84a86b72de554",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 767996,
        "upload_time": "2023-03-08T14:58:22",
        "upload_time_iso_8601": "2023-03-08T14:58:22.295603Z",
        "url": "https://files.pythonhosted.org/packages/8f/cb/e18ee5c561803192d40c9d7ad8c09d263a1f24c748dee7a853864d56711c/coloria-0.13.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "711b45102eea12f9c8d65a491e54a00c6846142dc40af63e106cbfbae2cb5477",
          "md5": "94367e21c592a4b1801c0165db81e4e6",
          "sha256": "bd7f701e191aacaa4e95b23992f118bb29c9533e0698dbb30a30a3b11f394fb1"
        },
        "downloads": -1,
        "filename": "coloria-0.13.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94367e21c592a4b1801c0165db81e4e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 767644,
        "upload_time": "2023-03-08T15:01:40",
        "upload_time_iso_8601": "2023-03-08T15:01:40.752333Z",
        "url": "https://files.pythonhosted.org/packages/71/1b/45102eea12f9c8d65a491e54a00c6846142dc40af63e106cbfbae2cb5477/coloria-0.13.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d383b5347876ce4578d832c6c32c9c7794ce5588dcaa9395ab5245d1212df6d8",
          "md5": "874ce42e367c887919d7efe77c7bc96d",
          "sha256": "b17685c99fdda0e444dcf0502572914f563440f7b52bbc0a28bc2a3ffab1c802"
        },
        "downloads": -1,
        "filename": "coloria-0.13.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "874ce42e367c887919d7efe77c7bc96d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 768320,
        "upload_time": "2023-03-08T15:59:04",
        "upload_time_iso_8601": "2023-03-08T15:59:04.215417Z",
        "url": "https://files.pythonhosted.org/packages/d3/83/b5347876ce4578d832c6c32c9c7794ce5588dcaa9395ab5245d1212df6d8/coloria-0.13.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef4e9cc6fdf577ba89cdcc25bf27fb8ae53cc15edd07a133f98ba2a9fd06cc69",
          "md5": "cf3122b40503f35538697876692b5a48",
          "sha256": "a51d9dff700358dc2a320907763b05d537396b7d5bc429b7605012301ab35c14"
        },
        "downloads": -1,
        "filename": "coloria-0.13.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf3122b40503f35538697876692b5a48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 768454,
        "upload_time": "2023-03-09T10:26:23",
        "upload_time_iso_8601": "2023-03-09T10:26:23.185116Z",
        "url": "https://files.pythonhosted.org/packages/ef/4e/9cc6fdf577ba89cdcc25bf27fb8ae53cc15edd07a133f98ba2a9fd06cc69/coloria-0.13.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef4e9cc6fdf577ba89cdcc25bf27fb8ae53cc15edd07a133f98ba2a9fd06cc69",
        "md5": "cf3122b40503f35538697876692b5a48",
        "sha256": "a51d9dff700358dc2a320907763b05d537396b7d5bc429b7605012301ab35c14"
      },
      "downloads": -1,
      "filename": "coloria-0.13.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cf3122b40503f35538697876692b5a48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 768454,
      "upload_time": "2023-03-09T10:26:23",
      "upload_time_iso_8601": "2023-03-09T10:26:23.185116Z",
      "url": "https://files.pythonhosted.org/packages/ef/4e/9cc6fdf577ba89cdcc25bf27fb8ae53cc15edd07a133f98ba2a9fd06cc69/coloria-0.13.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}