{
  "info": {
    "author": "Ivan Kosarev",
    "author_email": "ivan@kosarev.info",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Emulators"
    ],
    "description": "# z80\nFast and flexible Z80/i8080 emulator.\n\n[![Build Status](https://travis-ci.org/kosarev/z80.svg?branch=master)](https://travis-ci.org/kosarev/z80)\n\n\n## Quick facts\n\n* Implements accurate machine cycle-level emulation.\n\n* Supports undocumented instructions, flags and registers.\n\n* Passes the well-known `cputest`, `8080pre`, `8080exer`,\n  `8080exm`, `prelim` and `zexall` tests.\n\n* Follows a modular event-driven design for flexible interfacing.\n\n* Employs compile-time polymorphism for zero performance\n  overhead.\n\n* Cache-friendly implementation without large code switches and\n  data tables.\n\n* Offers default modules for the breakpoint support and generic\n  memory.\n\n* Supports multiple independently customized emulator instances.\n\n* Written in strict C++11.\n\n* Does not rely on implementation-defined or unspecified\n  behavior.\n\n* Single-header implementation.\n\n* Provides a generic Python 3 API and instruments to create\n  custom bindings.\n\n* MIT license.\n\n\n## Contents\n\n* [Hello world](#hello-world)\n* [Adding memory](#adding-memory)\n* [Input and output](#input-and-output)\n* [Accessing processor's state](#accessing-processors-state)\n* [Modules](#modules)\n* [The root module](#the-root-module)\n* [State modules](#state-modules)\n* [Feedback](#feedback)\n\n\n## Hello world\n\n```c++\n#include \"z80.h\"\n\nclass my_emulator : public z80::z80_cpu<my_emulator> {\npublic:\n    typedef z80::z80_cpu<my_emulator> base;\n\n    my_emulator() {}\n\n    void on_set_pc(z80::fast_u16 pc) {\n        std::printf(\"pc = 0x%04x\\n\", static_cast<unsigned>(pc));\n        base::on_set_pc(pc);\n    }\n};\n\nint main() {\n    my_emulator e;\n    e.on_step();\n    e.on_step();\n    e.on_step();\n}\n```\n[hello.cpp](https://github.com/kosarev/z80/blob/master/examples/hello.cpp)\n\nBuilding:\n```shell\n$ git clone git@github.com:kosarev/z80.git\n$ cmake z80\n$ make\n$ make test\n$ make hello  # Or 'make examples' to build all examples at once.\n```\n\nRunning:\n```\n$ ./examples/hello\npc = 0x0000\npc = 0x0001\npc = 0x0002\n```\n\nIn this example we derive our custom emulator class,\n`my_emulator`, from a\n[mix-in](https://en.wikipedia.org/wiki/Mixin) that implements the\nlogic and default interfaces necessary to emulate the Zilog Z80\nprocessor.\nAs you may guess, replacing `z80_cpu` with `i8080_cpu` would give\nus a similar Intel 8080 emulator.\n\nThe `on_set_pc()` method overrides its default counterpart to\nprint the current value of the `PC` register before changing it.\nFor this compile-time polymorphism to be able to do its job, we\npass the type of the custom emulator to the processor mix-in as a\nparameter.\n\nThe `main()` function creates an instance of the emulator and\nasks it to execute a few instructions, thus triggering the custom\nversion of `on_set_pc()`.\nThe following section reveals what are those instructions and\nwhere the emulator gets them from.\n\n\n## Adding memory\n\nEvery time the CPU emulator needs to access memory, it calls\n`on_read()` and `on_write()` methods.\nTheir default implementations do not really access any memory;\n`on_read()` simply returns `0x00`, meaning the emulator in the\nexample above actually executes a series of `nop`s, and\n`on_write()` does literally nothing.\n\nSince both the reading and writing functions are considered by\nthe `z80::z80_cpu` class to be handlers, which we know because\nthey have the `on` preposition in their names, we can use the\nsame technique as with `on_set_pc()` above to override the\ndefault handlers to actually read and write something.\n\n```c++\nclass my_emulator : public z80::z80_cpu<my_emulator> {\npublic:\n    ...\n\n    fast_u8 on_read(fast_u16 addr) {\n        assert(addr < z80::address_space_size);\n        fast_u8 n = memory[addr];\n        std::printf(\"read 0x%02x at 0x%04x\\n\", static_cast<unsigned>(n),\n                    static_cast<unsigned>(addr));\n        return n;\n    }\n\n    void on_write(fast_u16 addr, fast_u8 n) {\n        assert(addr < z80::address_space_size);\n        std::printf(\"write 0x%02x at 0x%04x\\n\", static_cast<unsigned>(n),\n                    static_cast<unsigned>(addr));\n        memory[addr] = static_cast<least_u8>(n);\n    }\n\nprivate:\n    least_u8 memory[z80::address_space_size] = {\n        0x21, 0x34, 0x12,  // ld hl, 0x1234\n        0x3e, 0x07,        // ld a, 7\n        0x77,              // ld (hl), a\n    };\n};\n```\n[adding_memory.cpp](https://github.com/kosarev/z80/blob/master/examples/adding_memory.cpp)\n\nOutput:\n```\nread 0x21 at 0x0000\npc = 0x0001\nread 0x34 at 0x0001\nread 0x12 at 0x0002\npc = 0x0003\nread 0x3e at 0x0003\npc = 0x0004\nread 0x07 at 0x0004\npc = 0x0005\nread 0x77 at 0x0005\npc = 0x0006\nwrite 0x07 at 0x1234\n```\n\n\n## Input and output\n\nAside of memory, another major way the processors use to\ncommunicate with the outside world is via input and output ports.\nIf you read the previous sections, it's now easy to guess that\nthere is a couple of handlers that do that.\nThese are `on_input()` and `on_output()`.\n\nNote that the handlers have different types of parameters that\nstore the port address, because i8080 only supports 256 ports\nwhile Z80 extends that number to 64K.\n\n```c++\n    // i8080_cpu\n    fast_u8 on_input(fast_u8 port)\n    void on_output(fast_u8 port, fast_u8 n)\n\n    // z80_cpu\n    fast_u8 on_input(fast_u16 port)\n    void on_output(fast_u16 port, fast_u8 n)\n```\n\nThe example:\n```c++\nclass my_emulator : public z80::z80_cpu<my_emulator> {\npublic:\n    ...\n\n    fast_u8 on_input(fast_u16 port) {\n        fast_u8 n = 0xfe;\n        std::printf(\"input 0x%02x from 0x%04x\\n\", static_cast<unsigned>(n),\n                    static_cast<unsigned>(port));\n        return n;\n    }\n\n    void on_output(fast_u16 port, fast_u8 n) {\n        std::printf(\"output 0x%02x to 0x%04x\\n\", static_cast<unsigned>(n),\n                    static_cast<unsigned>(port));\n    }\n\nprivate:\n    least_u8 memory[z80::address_space_size] = {\n        0xdb,        // in a, (0xfe)\n        0xee, 0x07,  // xor 7\n        0xd3,        // out (0xfe), a\n    };\n};\n```\n[input_and_output.cpp](https://github.com/kosarev/z80/blob/master/examples/input_and_output.cpp)\n\n\n## Accessing processor's state\n\nSometimes it's necessary to examine and/or alter the current\nstate of the CPU emulator and do that in a way that is\ntransparent to the custom code in overridden handlers.\nFor this purpose the default state interface implemented in the\n`i8080_state<>` and `z80_state<>` classes provdes a number of\ngetters and setters for registers, register pairs, interrupt\nflip-flops and other fields constituting the internal state of\nthe emulator.\nBy convention, calling such functions does not fire up any\nhandlers. The example below demonstrates a typical usage.\n\nNote that there are no such accessors for memory as it is\nexternal to the processor emulators and they themselves have to\nuse handlers, namely, the `on_read()` and `on_write()` ones, to\ndeal with memory.\n\n```c++\nclass my_emulator : public z80::z80_cpu<my_emulator> {\npublic:\n    ...\n\n    void on_step() {\n        std::printf(\"hl = %04x\\n\", static_cast<unsigned>(get_hl()));\n        base::on_step();\n\n        // Start over on every new instruction.\n        set_pc(0x0000);\n    }\n```\n[accessing_state.cpp](https://github.com/kosarev/z80/blob/master/examples/accessing_state.cpp)\n\n\n## Modules\n\nBy overriding handlers we can extend and otherwise alter the\ndefault behavior of CPU emulators.\nThat's good, but what do we do if it's not enough?\nFor example, what if the default representation of the\nprocessor's internal state doesn't fit the needs of your\napplication?\nSay, you might be forced to follow a particular order of\nregisters or you just want to control the way they are packed in\na structure because there's some external binary API to be\ncompatible with.\nOr, what if you don't need to emulate the whole processor's\nlogic, and just want to check if a given sequence of bytes forms\na specific instruction?\n\nThat's where modules come into play.\nTo understand what they are and how to use them, let's take a\nlook at the definitions of the emulator classes and see what's\nunder the hood.\n\n```c++\ntemplate<typename D>\nclass i8080_cpu : public i8080_executor<i8080_decoder<i8080_state<root<D>>>>\n{};\n\ntemplate<typename D>\nclass z80_cpu : public z80_executor<z80_decoder<z80_state<root<D>>>>\n{};\n```\n\nEach of these classes is no more than a stack of a few other\nmix-ins.\nThe `root<>` template provides helpers that make it possible to\ncall handlers of the most derived class in the heirarchy, `D`,\nwhich is why it takes that class as its type parameter.\nIt also contains dummy implementations of the standard handlers,\nsuch as `on_output()`, so you don't have to define them when you\ndon't need them.\n\n`i8080_state<>` and `z80_state<>` have been mentioned in the\nprevious section as classes that define transparent accessors to\nthe processor state, e.g., `set_hl()`.\nThey also define corresponding handlers, like `on_set_hl()`, that\nother modules use to inspect and modify the state.\n\n`i8080_decoder<>` and `z80_decoder<>` modules analyze op-codes\nand fire up handlers for specific instructions, e.g, `on_halt()`.\n\nFinally, the job of `i8080_executor<>` and `z80_executor<>` is to\nimplement handlers like `on_halt()` to actually execute\ncorresponding instructions.\n\nThe convention is that modules shall communicate with each other\nonly via handlers.\nIndeed, if they would call the transparent accessors or refer to\ndata fields directly, then those accessors wouldn't be\ntransparent anymore and handlers would never be called.\nThis also means that modules are free to define transparent\naccessors in a way that seems best for their purpose or even not\ndefine them at all.\n\nAll and any of the standard modules can be used and customized\nindependently of each other.\nMoreover, all and any of the modules can be replaced with custom\nimplementations.\nNew modules can be developed and used separately or together with\nthe standard ones.\nIn all cases the only requirement is to implement handlers other\nmodules rely on.\n\n\n## The root module\n\n```c++\ntemplate<typename D>\nclass root {\npublic:\n    typedef D derived;\n\n    ...\n\n    fast_u8 on_read(fast_u16 addr) {\n        unused(addr);\n        return 0x00;\n    }\n\n    void on_write(fast_u16 addr, fast_u8 n) {\n        unused(addr, n);\n    }\n\n    ...\n\nprotected:\n    const derived &self() const{ return static_cast<const derived&>(*this); }\n    derived &self() { return static_cast<derived&>(*this); }\n};\n```\n\nThe main function of the root module is to define the `self()`\nmethod that other modules can use to call handlers. For example,\na decoder could do `self().on_ret()` whenever it runs into a\n`ret` instruction.\n\nAside of that, the module contains dummy implementations of the\nstandard handlers that do nothing or, if they have to return\nsomething, return some default values.\n\n\n## State modules\n\n```c++\ntemplate<typename B>\nclass i8080_state : public internals::cpu_state_base<B> {\npublic:\n    ...\n\n    bool get_iff() const { ... }\n    void set_iff(bool f) { ... }\n\n    ...\n};\n\ntemplate<typename B>\nclass z80_state : public internals::cpu_state_base<z80_decoder_state<B>> {\npublic:\n    ...\n\n    void exx_regs() { ... }\n    void on_exx_regs() { exx_regs(); }\n\n    ...\n};\n```\n\nThe purpose of state modules is to provide handlers to access the\ninternal state of the emulated CPU.\nThey also usually store the fields of the state, thus defining\nits layout in memory.\n\nRegardless of the way the fields are represented and stored, the\ndefault getting and setting handlers for register pairs use\naccess handlers for the corresponding 8-bit registers to obtain\nor set the 16-bit values.\nFurthermore, the low half of the register pair is always\nretrieved and set before the high half.\nThis means that by default handlers for 8-bit registers are\ngetting called even if originally a value of a register pair they\nare part of has been queried.\nCustom implementations of processor states, however, are not\nrequired to do so.\n\n```c++\n    fast_u16 on_get_bc() {\n        // Always get the low byte first.\n        fast_u8 l = self().on_get_c();\n        fast_u8 h = self().on_get_b();\n        return make16(h, l);\n\n    void on_set_bc(fast_u16 n) {\n        // Always set the low byte first.\n        self().on_set_c(get_low8(n));\n        self().on_set_b(get_high8(n));\n    }\n```\n\nAside of the usual getters and setters for the registers and\nflip-flops, both the i8080 and Z80 states have to provide an\n`on_ex_de_hl_regs()` handler that exchanges `hl` and `de`\nregisters the same way the `xchg` and `ex de, hl` do.\nAnd the Z80 state additionally has to have an `on_exx_regs()`\nthat swaps register pairs just as the `exx` instruction does.\nThe default swapping handlers do their work by accessing\nregisters directly, without relying on the getting and setting\nhandlers, similarly to how silicon implementations of the\nprocessors toggle internal flip-flops demux'ing access to\nregister cells without actually transferring their values.\n\nBecause the CPUs have a lot of similarities, processor-specific\nvariants of modules usually share some common code in helper base\nclasses that in turn are defined in the `internal` class.\nThat class defines entities that are internal to the\nimplementation of the library.\nThe client code is therefore supposed to be written as if the\nmodule classes are derived directly from their type parameters,\n`B`.\n\nNote that `z80_state` has an additional mix-in in its inheritance\nchain, `z80_decoder_state<>`, whereas `i8080_state` is derived\ndirectly from the generic base.\nThis is because Z80 decoders are generally not stateless objects;\nthey have to track which of the `IX`, `IY` or `HL` registers has\nto be used as the index register for the current instruction.\nThe decoder state class stores and provides access to that\ninformation.\n\n```c++\ntemplate<typename B>\nclass z80_decoder_state : public B {\npublic:\n    ...\n\n    iregp get_iregp_kind() const { ... }\n    void set_iregp_kind(iregp r) { ... }\n\n    iregp on_get_iregp_kind() const { return get_iregp_kind(); }\n    void on_set_iregp_kind(iregp r) { set_iregp_kind(r); }\n\n    ...\n};\n```\n\nIn its simplest form, a custom state module can be a structure defining the\nnecessary state fields together with corresponding access handlers.\n\n```c++\ntemplate<typename B>\nstruct my_state : public B {\n    fast_u16 pc;\n\n    ...\n\n    fast_u16 on_get_pc() const { return pc; }\n    void on_set_pc(fast_u16 n) { pc = n; }\n\n    ...\n\n    // These always have to be explicitly defined.\n    void on_ex_de_hl_regs() {}\n    void on_ex_af_alt_af_regs() {}\n    void on_exx_regs() {}\n};\n\n```\n[custom_state.cpp](https://github.com/kosarev/z80/blob/master/examples/custom_state.cpp)\n\n\n## Feedback\n\nAny notes on overall design, improving performance and testing\napproaches are highly appreciated.\nPlease file an issue or use the email given at\n<https://github.com/kosarev>.\nThanks!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kosarev/z80",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "z80",
    "package_url": "https://pypi.org/project/z80/",
    "platform": "",
    "project_url": "https://pypi.org/project/z80/",
    "project_urls": {
      "Homepage": "https://github.com/kosarev/z80"
    },
    "release_url": "https://pypi.org/project/z80/1.0b2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast and flexible Z80/i8080 Emulator",
    "version": "1.0b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11364414,
  "releases": {
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff9c6569bdc1867116beb9cbfef3a8f223e030bf2f4ec3268c27bc1f8ef3164a",
          "md5": "b0a2496fc8d548a54682e4acf526a97a",
          "sha256": "e7b917c1abe69d34c095532c6909e24c984d4a55670539d0f19cc50d956d7c26"
        },
        "downloads": -1,
        "filename": "z80-0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0a2496fc8d548a54682e4acf526a97a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6124,
        "upload_time": "2019-02-16T13:11:47",
        "upload_time_iso_8601": "2019-02-16T13:11:47.256052Z",
        "url": "https://files.pythonhosted.org/packages/ff/9c/6569bdc1867116beb9cbfef3a8f223e030bf2f4ec3268c27bc1f8ef3164a/z80-0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87704cace1fc7852194b55a2fe2518a76dba8895a4a6068f9e7300ab09a17be8",
          "md5": "7a69504c2eab4257cfca99ffdf513347",
          "sha256": "9c4665792d51ac12b10a4215983d314743192241d98e42d162b99673ff36b7a9"
        },
        "downloads": -1,
        "filename": "z80-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a69504c2eab4257cfca99ffdf513347",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13275,
        "upload_time": "2020-05-23T13:13:13",
        "upload_time_iso_8601": "2020-05-23T13:13:13.706638Z",
        "url": "https://files.pythonhosted.org/packages/87/70/4cace1fc7852194b55a2fe2518a76dba8895a4a6068f9e7300ab09a17be8/z80-0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdebf1bce430bffc20ccff312b3cfc9da95f30a7dbef437f3462107c82fa0892",
          "md5": "9bb514b9bc44fe6a0b16da63e7066927",
          "sha256": "f57dbb15dd928c96dbd0b05f8f36d479df753efaf26513cae6eacc1fc891d772"
        },
        "downloads": -1,
        "filename": "z80-0.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb514b9bc44fe6a0b16da63e7066927",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14088,
        "upload_time": "2020-10-17T10:44:34",
        "upload_time_iso_8601": "2020-10-17T10:44:34.107965Z",
        "url": "https://files.pythonhosted.org/packages/fd/eb/f1bce430bffc20ccff312b3cfc9da95f30a7dbef437f3462107c82fa0892/z80-0.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ea601041ae423c3b4107c57c530897fe8153d21d16468f6cdf1c3a0ba12c0e4",
          "md5": "84cb938a2e94b4fb512020425b36e0eb",
          "sha256": "0af89249cfa49cf17fadac3a8075759b6fa0bfaa0a502d5dc71dd3fa69efda2d"
        },
        "downloads": -1,
        "filename": "z80-0.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "84cb938a2e94b4fb512020425b36e0eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25607,
        "upload_time": "2021-08-29T16:52:11",
        "upload_time_iso_8601": "2021-08-29T16:52:11.974111Z",
        "url": "https://files.pythonhosted.org/packages/6e/a6/01041ae423c3b4107c57c530897fe8153d21d16468f6cdf1c3a0ba12c0e4/z80-0.1b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc69e2ca0d7fb87e89f66387d8c676cc23e001d9370fd267d05acff9d268d896",
          "md5": "880ff7fa4b6356c19347f8717338e22f",
          "sha256": "242f90090beb922eba268fe13db2f454133705cd527b01a9bfc32e1bbe6962a7"
        },
        "downloads": -1,
        "filename": "z80-0.1b2.tar.gz",
        "has_sig": false,
        "md5_digest": "880ff7fa4b6356c19347f8717338e22f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25667,
        "upload_time": "2021-09-04T09:42:09",
        "upload_time_iso_8601": "2021-09-04T09:42:09.458781Z",
        "url": "https://files.pythonhosted.org/packages/bc/69/e2ca0d7fb87e89f66387d8c676cc23e001d9370fd267d05acff9d268d896/z80-0.1b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe014428e4885a20c4f6c719728cc450f876f8247e8919c8cce580e39a9a0ec8",
          "md5": "ac6db5c9bb4f8c75f3f00a1d6ba2fc12",
          "sha256": "372f9137e05f4326adf060541360b7d597cfbe7833b9987538d53482ef7f527a"
        },
        "downloads": -1,
        "filename": "z80-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac6db5c9bb4f8c75f3f00a1d6ba2fc12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46981,
        "upload_time": "2021-09-04T09:57:15",
        "upload_time_iso_8601": "2021-09-04T09:57:15.417399Z",
        "url": "https://files.pythonhosted.org/packages/fe/01/4428e4885a20c4f6c719728cc450f876f8247e8919c8cce580e39a9a0ec8/z80-1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e1d3d1578525d44e1bdd7874caece6a04307272a947011a75ace3017582763f",
          "md5": "20c54e4f953fde112abc3a611c5ce522",
          "sha256": "b137fb8862e6a79eaa94a0e9e4fac7b571b117a0cadf31deeb30ca47a7540ff0"
        },
        "downloads": -1,
        "filename": "z80-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "20c54e4f953fde112abc3a611c5ce522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49252,
        "upload_time": "2021-09-04T10:10:31",
        "upload_time_iso_8601": "2021-09-04T10:10:31.515872Z",
        "url": "https://files.pythonhosted.org/packages/7e/1d/3d1578525d44e1bdd7874caece6a04307272a947011a75ace3017582763f/z80-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e1d3d1578525d44e1bdd7874caece6a04307272a947011a75ace3017582763f",
        "md5": "20c54e4f953fde112abc3a611c5ce522",
        "sha256": "b137fb8862e6a79eaa94a0e9e4fac7b571b117a0cadf31deeb30ca47a7540ff0"
      },
      "downloads": -1,
      "filename": "z80-1.0b2.tar.gz",
      "has_sig": false,
      "md5_digest": "20c54e4f953fde112abc3a611c5ce522",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49252,
      "upload_time": "2021-09-04T10:10:31",
      "upload_time_iso_8601": "2021-09-04T10:10:31.515872Z",
      "url": "https://files.pythonhosted.org/packages/7e/1d/3d1578525d44e1bdd7874caece6a04307272a947011a75ace3017582763f/z80-1.0b2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}