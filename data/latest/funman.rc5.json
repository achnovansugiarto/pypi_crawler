{
  "info": {
    "author": "Dan Bryce",
    "author_email": "dbryce@sift.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# funman\n\nThe `funman` package implements multiple simulator model analysis methods.\nCurrent methods include:\n- Parameter Synthesis\n- Querying a Simulation\n\n## **Use cases**\n### **Compare Bilayer Model to Simulator**:\n\nThis use case involves the simulator and FUNMAN reasoning about the CHIME\nSIR bilayer model.  See test `test_use_case_bilayer_consistency` in `test/test_use_cases.py`.\n\nIt first uses a SimulationScenario to execute the input simulator\nfunction and evaluate the input query function using the simulation results.\nIn the example below this results in the run_CHIME_SIR simulator function and\nevaluating whether or not the number of infected crosses the provided threshold with a custom QueryFunction referencing the `does_not_cross_threshold` function.\n\nIt then constructs an instance of the ConsistencyScenario class to evaluate whether a BilayerModel will satisfy the given query. The query asks whether the\nnumber of infected at any time point exceeds a specified threshold.\n\nOnce each of these steps is executed the results are compared. The test will\nsucceed if the SimulatorScenario and ConsistencyScenario agree on the response to the query.\n\n```python\n    def compare_against_CHIME_Sim(\n        self, bilayer_path, init_values, infected_threshold\n    ):\n        # query the simulator\n        def does_not_cross_threshold(sim_results):\n            i = sim_results[2]\n            return all(i_t <= infected_threshold for i_t in i)\n\n        query = QueryLE(\"I\", infected_threshold)\n\n        funman = Funman()\n\n        sim_result: SimulationScenarioResult = funman.solve(\n            SimulationScenario(\n                model=SimulatorModel(run_CHIME_SIR),\n                query=QueryFunction(does_not_cross_threshold),\n            )\n        )\n\n        consistency_result: ConsistencyScenarioResult = funman.solve(\n            ConsistencyScenario(\n                model=BilayerModel(\n                    BilayerDynamics.from_json(bilayer_path),\n                    init_values=init_values,\n                ),\n                query=query,\n            )\n        )\n\n        # assert the both queries returned the same result\n        return sim_result.query_satisfied == consistency_result.query_satisfied\n\n    def test_use_case_bilayer_consistency(self):\n        \"\"\"\n        This test compares a BilayerModel against a SimulatorModel to\n        determine whether their response to a query is identical.\n        \"\"\"\n        bilayer_path = os.path.join(\n            RESOURCES, \"bilayer\", \"CHIME_SIR_dynamics_BiLayer.json\"\n        )\n        infected_threshold = 130\n        init_values = {\"S\": 9998, \"I\": 1, \"R\": 1}\n        assert self.compare_against_CHIME_Sim(\n            bilayer_path, init_values, infected_threshold\n        )\n```\n\n### **Parameter Synthesis**\n\nSee tests `test_use_case_simple_parameter_synthesis` and `test_use_case_bilayer_parameter_synthesis` in  `test/test_use_cases.py`.\n\nThe base set of types used during Parameter Synthesis include:\n\n- a list of Parameters representing variables to be assigned\n- a Model to be encoded as an SMTLib formula \n- a Scenario container representing a set of parameters and model\n- a SearchConfig to configure search behavior\n- the Funman interface that runs analysis using scenarios and configuration data\n\nIn the following example two parameters, x and y, are constructed. A model is \nalso constructed that says 0.0 < x < 5.0 and 10.0 < y < 12.0. These parameters\nand model are used to define a scenario that will use BoxSearch to synthesize\nthe parameters. The Funman interface and a search configuration are also \ndefined. All that remains is to have Funman solve the scenario using the defined\nconfiguration.\n\n```python\ndef test_use_case_simple_parameter_synthesis(self):\n        x = Symbol(\"x\", REAL)\n        y = Symbol(\"y\", REAL)\n\n        formula = And(\n            LE(x, Real(5.0)),\n            GE(x, Real(0.0)),\n            LE(y, Real(12.0)),\n            GE(y, Real(10.0)),\n        )\n\n        funman = Funman()\n        result: ParameterSynthesisScenarioResult = funman.solve(\n            ParameterSynthesisScenario(\n                [\n                    Parameter(name=\"x\", symbol=x),\n                    Parameter(name=\"y\", symbol=y),\n                ],\n                EncodedModel(formula),\n            )\n        )\n        assert result\n```\n\nAs an additional parameter synthesis example, the following test case\ndemonstrates how to perform parameter synthesis for a bilayer model.  The\nconfiguration differs from the example above by introducing bilayer-specific\nconstraints on the initial conditions (`init_values` assignments), parameter\nbounds (`parameter_bounds` intervals) and a model query.\n\n```python\n    def test_use_case_bilayer_parameter_synthesis(self):\n        bilayer_path = os.path.join(\n            RESOURCES, \"bilayer\", \"CHIME_SIR_dynamics_BiLayer.json\"\n        )\n        infected_threshold = 3\n        init_values = {\"S\": 9998, \"I\": 1, \"R\": 1}\n\n        lb = 0.000067 * (1 - 0.5)\n        ub = 0.000067 * (1 + 0.5)\n\n        funman = Funman()\n        result: ParameterSynthesisScenarioResult = funman.solve(\n            ParameterSynthesisScenario(\n                parameters=[Parameter(name=\"beta\", lb=lb, ub=ub)],\n                model=BilayerModel(\n                    BilayerDynamics.from_json(bilayer_path),\n                    init_values=init_values,\n                    parameter_bounds={\n                        \"beta\": [lb, ub],\n                        \"gamma\": [1.0 / 14.0, 1.0 / 14.0],\n                    },\n                ),\n                query=QueryLE(\"I\", infected_threshold),\n            ),\n            config=SearchConfig(tolerance=1e-8),\n        )\n        assert len(result.parameter_space.true_boxes) > 0 \n        assert len(result.parameter_space.false_boxes) > 0 \n```\n---\n\n## Development Setup\n\n### Pre-commit hooks\nFUNMAN has a set of pre-commit hooks to help with code uniformity. These hooks\nwill share the same rules as any automated testing so it is recommended to\ninstall the hooks locally to ease the development process.\n\nTo use the pre-commit hooks you with need the tools listed in\n`requirements-dev.txt`. These should be installed in the same environment where\nyou git tooling operates.\n```bash\npip install -r requirements-dev.txt\n```\n\nOnce install you should be able to run the following from the root of the repo:\n```bash\nmake install-pre-commit-hooks\n```\n\nOnce installed you should begin to receive isort/black feedback when\ncommitting. These should not alter the code during a commit but instead just\nfail and prevent a commit if the code does not conform to the specification.\n\nTo autoformat the entire repo you can use:\n```bash\nmake format\n```\n\n### Code coverage\nPytest is configured to generate code coverage, and requires the `pytest-cov`\npackage to be installed.  The `pytest-cov` package is included in the\n`requirements-dev.txt` (see above) and will be installed with the other dev\ndependencies.  The code coverage will be displayed in the pytest output (i.e.,\n`term`) and saved to the `coverage.xml` file.  The `Coverage Gutters` VSCode\nplugin will use the `coverage.xml` to display code coverage highlighting over\nthe source files.\n\n### Development Setup: Docker dev container\nFUNMAN provides tooling to build a Docker image that can be used as a\ndevelopment container. The image builds on either arm64 or amd64 architectures.\n\nThe dev container itself is meant to be ephemeral. The `launch-dev-container`\ncommand will delete the existing dev container if an newer image has been made\navailable in the local cache. Any data that is meant to be retained from the\ndev-container must be kept in one of the mounted volumes.\n\nThe dev container supports editing and rebuilding of dreal4 as well. This\nrequires that a dreal4 repository is cloned as a sibling to the funman\ndirectory (../dreal4). So long as that directory is present, the next time the\nfunman-dev container is created will also result in a bind mount of the dreal4\ndirectory to the container.\n\n# Build the image:\n```bash\nmake build\n```\n\n# Launch the dev container:\n```bash\nmake launch-dev-container\n```\n\n# If building a local dreal4 instead of the built-in version:\n```bash\n# from within the container\nupdate-dreal\n```\n\n### (DEPRECATED) Development Setup: Ubuntu 20.04\n```bash\n# install python 3.9\nsudo apt install python3.9 python3.9-dev\n# install dev dependencies\nsudo apt install make\npip install --user pipenv\n# install pygraphviz dependencies\nsudo apt install graphviz libgraphviz-dev pkg-config\n# Initialize development environment\nmake setup-dev-env\n```\n\n### (DEPRECATED) Development Setup: OSX M1\n\n```bash\n# install python 3.9\nbrew install python@3.9 \n# install dev dependencies\nbrew install make\npip3 install --user pipenv\n# install pygraphviz dependencies\nbrew install graphviz pkg-config\n# install z3\nbrew install z3\n# install miniconda\nbrew install miniforge\n# Initialize development environment\nmake setup-conda-dev-env\n```\n\n#### **Z3 issue**\n\nOn the M1, installing with conda gets pysmt with z3 for the wrong architecture. To fix this, if it happens, replace the `z3lib.dylib` in your virtual environment (in my case this was `.venv/lib/python3.9/site-packages/z3/lib/libz3.dylib`) with a symbolic link to the library that you get from your brew install of z3.  For example\n\n    ln -s /opt/homebrew/Cellar/z3/4.11.0/lib/libz3.dylib ~/projects/askem/funman/.venv/lib/python3.9/site-packages/z3/lib/\n\n---\n#### **Pipenv issue and conda**\n\nWhen I (rpg) tried to set up the environment with only pipenv (`make setup-dev-env`), it didn't work because `pip` tried to build the pygraphviz wheel and when it did, it used the Xcode compiler, which did not work with the version of graphviz I had installed with brew.\n\nSuggest dealing with this by using `setup-CONDA-dev-env` [caps for emphasis] instead.\n\n---\n#### **Error during setup: \"Could not find a version that matches\"**\nTry updating pipenv: `pip install pipenv --upgrade`\n\n# Generating docs\n```bash\npipenv run pip install sphinx sphinx_rtd_theme matplotlib\n\n# Needed only if the gh-pages branch is not at origin\nmake init-pages \n\n# Run sphinx and pyreverse on source, generate docs/\nmake docs \n\n# push docs/ to origin\nmake deploy-pages \n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "funman",
    "package_url": "https://pypi.org/project/funman/",
    "platform": null,
    "project_url": "https://pypi.org/project/funman/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/funman/1.4.0/",
    "requires_dist": [
      "graphviz",
      "multiprocess",
      "tenacity",
      "pyparsing",
      "pysmt",
      "pandas",
      "matplotlib",
      "funman-dreal ; extra == 'dreal'"
    ],
    "requires_python": "",
    "summary": "Functional Model Analysis Tool",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16685224,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7583ef1fc3e74506cd8e62213e2e51dc087e19d4d974b5cbe7b1f3e5611829df",
          "md5": "d0a8d770d7f5f02ecde0a6b09e608376",
          "sha256": "fcc5ab3d5991dd57a47bfd576e125e34d7734d5487ad3ccea7362b2f2e36aa82"
        },
        "downloads": -1,
        "filename": "funman-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0a8d770d7f5f02ecde0a6b09e608376",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22077,
        "upload_time": "2022-10-31T20:41:13",
        "upload_time_iso_8601": "2022-10-31T20:41:13.299438Z",
        "url": "https://files.pythonhosted.org/packages/75/83/ef1fc3e74506cd8e62213e2e51dc087e19d4d974b5cbe7b1f3e5611829df/funman-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef2712a03d789ebe9c44647702f7922d7ad21da0fdabd9dffacba27482e499fb",
          "md5": "5d6a93e5f42e4b64c6d7bf87fe533778",
          "sha256": "e9c886c66d76abe8abcee7da05a3265807f07215b98f974bbf4cbf3e6b96650d"
        },
        "downloads": -1,
        "filename": "funman-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d6a93e5f42e4b64c6d7bf87fe533778",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24016,
        "upload_time": "2022-10-31T20:41:14",
        "upload_time_iso_8601": "2022-10-31T20:41:14.731202Z",
        "url": "https://files.pythonhosted.org/packages/ef/27/12a03d789ebe9c44647702f7922d7ad21da0fdabd9dffacba27482e499fb/funman-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e35547449bfb01265a84fa887ecf4ed637889b5b536ac32403dfc18279fa19e1",
          "md5": "972c3b3a1540f53248205c02270e622b",
          "sha256": "9fb80657325a483359381856f1e02c62aaccde3067b2b8180744d15494be3ce3"
        },
        "downloads": -1,
        "filename": "funman-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "972c3b3a1540f53248205c02270e622b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22077,
        "upload_time": "2022-10-31T21:53:40",
        "upload_time_iso_8601": "2022-10-31T21:53:40.937953Z",
        "url": "https://files.pythonhosted.org/packages/e3/55/47449bfb01265a84fa887ecf4ed637889b5b536ac32403dfc18279fa19e1/funman-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c3d9e32518cc8b0f0836945c6af29ce3c620c3615f6b52c5ce3c90d3d59c75c",
          "md5": "95e7e845f6c0cd01bd88dded19393672",
          "sha256": "c40ac163d9fbe84f4dc8e6f9fce911cf23581f68d84d526eea6ca6fefabaeee4"
        },
        "downloads": -1,
        "filename": "funman-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95e7e845f6c0cd01bd88dded19393672",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24056,
        "upload_time": "2022-10-31T21:53:42",
        "upload_time_iso_8601": "2022-10-31T21:53:42.168344Z",
        "url": "https://files.pythonhosted.org/packages/1c/3d/9e32518cc8b0f0836945c6af29ce3c620c3615f6b52c5ce3c90d3d59c75c/funman-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a3ff8ea72d88298596463508d86d1e8b7e8334b7ac702deb96fd8ad69a2fc7e",
          "md5": "0124a28769b16de9f490c4e5682c9df2",
          "sha256": "ca3a11014b43f513073925c43c256ae93fcdfff209092ff73c9fbb097f183e95"
        },
        "downloads": -1,
        "filename": "funman-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0124a28769b16de9f490c4e5682c9df2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30817,
        "upload_time": "2022-12-01T23:19:06",
        "upload_time_iso_8601": "2022-12-01T23:19:06.446752Z",
        "url": "https://files.pythonhosted.org/packages/5a/3f/f8ea72d88298596463508d86d1e8b7e8334b7ac702deb96fd8ad69a2fc7e/funman-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41086624e0f74ad4322a3bbdfa086768677976240366ea2e9d6c286b0e59eac8",
          "md5": "0a9cfebe8baae126371a223e0cec27a2",
          "sha256": "0d34652ad0baa2a37b71dec2471e4b745a48f0b84fd5acaa522154c61e905b83"
        },
        "downloads": -1,
        "filename": "funman-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a9cfebe8baae126371a223e0cec27a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34380,
        "upload_time": "2022-12-01T23:19:08",
        "upload_time_iso_8601": "2022-12-01T23:19:08.386856Z",
        "url": "https://files.pythonhosted.org/packages/41/08/6624e0f74ad4322a3bbdfa086768677976240366ea2e9d6c286b0e59eac8/funman-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbb30494fa9df84662e55112f9fdb7f1d98f644b27bac31c084920ba8e907002",
          "md5": "c4410bdf6aae8eb56935f130e51009d1",
          "sha256": "a3ee84467668e0922392680d0c2a251a04e834e00efcebf15171b4936068d4aa"
        },
        "downloads": -1,
        "filename": "funman-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4410bdf6aae8eb56935f130e51009d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30844,
        "upload_time": "2022-12-01T23:41:34",
        "upload_time_iso_8601": "2022-12-01T23:41:34.896255Z",
        "url": "https://files.pythonhosted.org/packages/fb/b3/0494fa9df84662e55112f9fdb7f1d98f644b27bac31c084920ba8e907002/funman-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11ba865209868251ed5179638cb22cf7657775af60ded244bc44d056ac6e7d79",
          "md5": "67dc832b9eff68dcbb09da0d0f083dc6",
          "sha256": "c64dfaa708fe3e4cbb5dd54b0466f246185d3dde016186ffe5f35e64e20d5c58"
        },
        "downloads": -1,
        "filename": "funman-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67dc832b9eff68dcbb09da0d0f083dc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34458,
        "upload_time": "2022-12-01T23:41:36",
        "upload_time_iso_8601": "2022-12-01T23:41:36.143094Z",
        "url": "https://files.pythonhosted.org/packages/11/ba/865209868251ed5179638cb22cf7657775af60ded244bc44d056ac6e7d79/funman-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f08761bbf5ac60990c4c6b330f4394134492f59b7828e25d82dcff313d14c6a",
          "md5": "ec6dd85a4b87d775555f853ba26106b8",
          "sha256": "a58ee72a2f5ac32f9502b1f94eb14d7e6b04c8e3c536cacf8dee37252455b589"
        },
        "downloads": -1,
        "filename": "funman-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec6dd85a4b87d775555f853ba26106b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52548,
        "upload_time": "2023-02-03T17:06:10",
        "upload_time_iso_8601": "2023-02-03T17:06:10.612817Z",
        "url": "https://files.pythonhosted.org/packages/8f/08/761bbf5ac60990c4c6b330f4394134492f59b7828e25d82dcff313d14c6a/funman-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a91bdadf796e09cde6ab40690de96afdba1805a1d52b3173ef7660a54b9acc7",
          "md5": "a58a2ebc5e079d85dfdd4b5ac87320c8",
          "sha256": "ff3771349d42ef8a8aeeb4c5e619ded1875c66cf9b9eb86e6a2560abd9b88ab2"
        },
        "downloads": -1,
        "filename": "funman-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a58a2ebc5e079d85dfdd4b5ac87320c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52194,
        "upload_time": "2023-02-03T17:06:17",
        "upload_time_iso_8601": "2023-02-03T17:06:17.132390Z",
        "url": "https://files.pythonhosted.org/packages/9a/91/bdadf796e09cde6ab40690de96afdba1805a1d52b3173ef7660a54b9acc7/funman-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f08761bbf5ac60990c4c6b330f4394134492f59b7828e25d82dcff313d14c6a",
        "md5": "ec6dd85a4b87d775555f853ba26106b8",
        "sha256": "a58ee72a2f5ac32f9502b1f94eb14d7e6b04c8e3c536cacf8dee37252455b589"
      },
      "downloads": -1,
      "filename": "funman-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec6dd85a4b87d775555f853ba26106b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52548,
      "upload_time": "2023-02-03T17:06:10",
      "upload_time_iso_8601": "2023-02-03T17:06:10.612817Z",
      "url": "https://files.pythonhosted.org/packages/8f/08/761bbf5ac60990c4c6b330f4394134492f59b7828e25d82dcff313d14c6a/funman-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a91bdadf796e09cde6ab40690de96afdba1805a1d52b3173ef7660a54b9acc7",
        "md5": "a58a2ebc5e079d85dfdd4b5ac87320c8",
        "sha256": "ff3771349d42ef8a8aeeb4c5e619ded1875c66cf9b9eb86e6a2560abd9b88ab2"
      },
      "downloads": -1,
      "filename": "funman-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a58a2ebc5e079d85dfdd4b5ac87320c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52194,
      "upload_time": "2023-02-03T17:06:17",
      "upload_time_iso_8601": "2023-02-03T17:06:17.132390Z",
      "url": "https://files.pythonhosted.org/packages/9a/91/bdadf796e09cde6ab40690de96afdba1805a1d52b3173ef7660a54b9acc7/funman-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}