{
  "info": {
    "author": "ArtÑ‘m IG",
    "author_email": "ortemeo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# [vtcff](https://github.com/rtmigo/vtcff_py)\n\n**ðŸš§ This project is a draft and is not intended to be used by anyone.**\n\n`vtcff` is a library for transcoding between video formats with an emphasis on\nmaintaining quality and color depth in video production pipelines. In studio\ntasks, video seconds take up gigabytes and quality compromises are least\ndesirable. \n\n`vtcff` tends to maximize quality, sacrificing speed and disk space.\n\n`vtcff` is actually a wrapper for `ffmpeg` â€“ the least intuitive video tool ever\ncreated.\n\n# Install\n\n```bash\n$ pip3 install vtcff\n```\n\nThis command will install the package, but not\n[ffmpeg](https://www.ffmpeg.org/) itself.\n\n<details>\n<summary>other options</summary>\n\n#### Install pre-release from GitHub:\n\n```bash\n$ pip3 install git+https://github.com/rtmigo/vtcff_py@staging#egg=vtcff\n```\n\n</details>\n\n# Basic example\n\n```python3\nimport subprocess\nfrom vtcff import FfmpegCommand, Scale, Transpose, Hevc\n\ncmd = FfmpegCommand()\n\ncmd.src_file = '/path/to/source.mov'\ncmd.dst_file = '/path/to/target.mov'\n\n# set set some filters\ncmd.scale = Scale(1920, 1080)\ncmd.transpose = Transpose.CLOCKWISE\n\n# set compression format\ncmd.dst_codec_video = Hevc(mbps=100)\n\n# run command\nsubprocess.check_call(list(cmd))\n```\n\n# Getting the generated arguments\n\n```python3\nimport subprocess, os\nfrom vtcff import FfmpegCommand, Prores\n\ncmd = FfmpegCommand()\ncmd.src_file = 'source.mov'\ncmd.dst_file = 'target.mov'\ncmd.dst_codec_video = Prores()\n\nprint(str(cmd))\n# ffmpeg -i source.mov -codec:v prores_ks target.mov\n\nprint(list(cmd))\n# ['ffmpeg', '-i', 'source.mov', '-codec:v', 'prores_ks', 'target.mov']\n\n# running in different ways:\nos.system(str(cmd))\nsubprocess.run(list(cmd))\n```\n\n# Custom arguments\n\nThe object allows you to manually specify ffmpeg arguments. Arguments given in\nthis way take precedence over arguments generated by the object.\n\n```python3\nfrom vtcff import FfmpegCommand\n\ncmd = FfmpegCommand()\n\n# set arguments as string\ncmd.custom.video.string = \"-codec:v libx265\"\ncmd.custom.video.string += \"-x265-params lossless=1\"\n\n# or as list\ncmd.custom.video.list = [\"-codec:v\", \"libx265\"]\ncmd.custom.video.list.extend([\"-x265-params\", \"lossless=1\"])\n```\n\nThe `cmd.custom` contains four fields, that can be modified independently.\n\nArguments to be inserted before `-i source`:\n\n- `custom.before_i`\n\nArguments to be inserted after `-i source`:\n\n- `custom.after_i`\n- `custom.video`\n- `custom.audio`\n\n# zscale vs scale\n\n`ffmpeg` has two video filters for color and frame size conversions:\n\n- [`scale`](https://ffmpeg.org/ffmpeg-filters.html#scale-1) ([libswscale](https://ffmpeg.org/libswscale.html))\n  is more versatile\n- [`zscale`](https://ffmpeg.org/ffmpeg-filters.html#zscale-1) ([zimg](https://github.com/sekrit-twc/zimg))\n  gives a more predictable quality\n\nBy default, `vtcff` uses `zscale`. Sometimes it may lead to error \"no path\nbetween colorspaces\". If other methods do not help, you can simply replace `zscale` with `scale`.\n\n- `cmd.use_zscale == True` means `zscale` is used\n- `cmd.use_zscale == False` means `scale` is used\n\n```python3\nfrom vtcff import FfmpegCommand, Scale\n\ncmd = FfmpegCommand()\n\nassert cmd.use_zscale == True  # by default, it's 'zscale' (zimg) \ncmd.use_zscale = False  # switching to 'scale' (libswscale)\n\n# properties affected:\ncmd.scale = Scale(1920, 1080)\ncmd.src_color_space = 'bt709'\ncmd.dst_color_space = 'bt2020ncl'\ncmd.src_range_full = True\ncmd.dst_range_full = False\n```\n\n`use_zscale=True`, means that zimg will be used for conversions\n**explicitly** set by object properties. This is good because these conversions\nwill be of high quality.\n\nHowever, **implicit** conversions may also be required. For example, before\nprocessing 16-bit PNG with `zscale`, we need to convert the pixel format from\n`rgba64be` to `gbrap16le` ðŸ¤ª. Ffmpeg will do it automatically with `libswscale`\nregardless of the `use_zscale` property.\n\n# Crop and scale\n\n```python3\nfrom vtcff import FfmpegCommand, Scale, Crop\n\n# crop 10 pixels, then scale\na = FfmpegCommand()\na.crop = Crop(left=10)\na.scale = Scale(1920, 1080)\n\n# scale, then crop 10 pixels\nb = FfmpegCommand()\nb.scale = Scale(1920, 1080)\nb.crop = Crop(left=10)\n```\n\n## Scale proportionally\n\n```python3\nfrom vtcff import FfmpegCommand, Scale\n\ncmd = FfmpegCommand()\n\n# set height to 1080, automatically compute width \ncmd.scale = Scale(-1, 1080)\n\n# set height to 1080, select the width as the closest factor \n# of two to the proportional size \ncmd.scale = Scale(-2, 1080)\n```\n\n# Change color range\n\n```python3\nfrom vtcff import FfmpegCommand\n\ncmd = FfmpegCommand()\n\n# Full/Data/PC range to Limited/Video/TV\ncmd.src_range_full = True\ncmd.dst_range_full = False\n\n# rec.709 to rec.2020 \ncmd.src_color_space = 'bt709'\ncmd.dst_color_space = 'bt2020ncl'\n```\n\n# Target formats\n\n## Encoding to Apple ProRes\n\n```python3\nfrom vtcff import FfmpegCommand, Prores, ProresProfile\n\ncmd = FfmpegCommand()\n\n# by default it will encode to ProRes 4:2:2\ncmd.dst_codec_video = Prores()\n\n# encode to ProRes 4:2:2 HQ instead \ncmd.dst_codec_video = Prores(profile=ProresProfile.HQ)\n```\n\n## Encoding to  HEVC (H.265)\n\n```python3\nfrom vtcff import FfmpegCommand, Hevc, VcPreset\n\ncmd = FfmpegCommand()\n\n# ideal quality\ncmd.dst_codec_video = Hevc(lossless=True)\n\n# best for bitrate quality\ncmd.dst_codec_video = Hevc(near_lossless=True, mbps=100)\n\n# default quality\ncmd.dst_codec_video = Hevc(mbps=100)\n\n# all modes can be tweaked with optional speed presets:\ncmd.dst_codec_video = Hevc(mbps=100,\n                           preset=VcPreset.N7_SLOW)\n```\n\nBy default, the `near_lossless` is set to slowest possible\n`VcPreset.N10_PLACEBO`, because we are trying to maximize quality. You may\nwant to choose a faster preset so that the result appears within a\nlifetime.\n\nBy default, the `lossless` is set to fastest possible\n`VcPreset.N1_ULTRAFAST`, because we are not losing any quality here. The\nresulting size will be roughly comparable to ProRes HQ/XQ and the encoding time\nis reasonable.\n\n## Copying streams\n\nThe media streams can be copied without re-encoding and without quality loss.\n\nHowever, there may be some loss of metadata â€“ for example, information \nabout color ranges and color spaces.\n\n```python3\nfrom vtcff import FfmpegCommand, VideoCopy, NoAudio\n\ncmd = FfmpegCommand()\n\n# changing container from mp4 to mov\ncmd.src_file = \"source.mp4\"\ncmd.dst_file = \"source.mov\"\n\n# keeping video, removing audio\ncmd.dst_codec_video = VideoCopy()\ncmd.dst_codec_audio = NoAudio()\n```\n\n# Images to videos\n\nConverting timelapses or CGI frame sequences to ProRes video file.\n\n```python3\nimport subprocess\nfrom vtcff import FfmpegCommand, Prores, ProresProfile\n\ncmd = FfmpegCommand()\n\n# input directory will be automatically transformed \n# to a pattern like '/my/dir_with_frames/img_%04.png'   \ncmd.src_file = '/my/dir_with_frames'\ncmd.src_fps = 29.97\n\ncmd.dst_file = '/videos/timelapse.mov'\ncmd.dst_codec_video = Prores(profile=ProresProfile.HQ)\n\n# images usually have Full/Data/PC color range,\n# but most NLEs assume that videos have Limited/Video/TV range\ncmd.src_range_full = True\ncmd.dst_range_full = False\n\n# we will treat sRGB like Rec.709, \n# although it's a little sad\ncmd.src_color_space = 'bt709'\ncmd.dst_color_space = 'bt709'\n\n# run command\nsubprocess.check_call(list(cmd))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rtmigo/vtcff_py",
    "keywords": "ffmpeg,wrapper,codec,encoder,decoder,transcoding,video,audio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vtcff",
    "package_url": "https://pypi.org/project/vtcff/",
    "platform": "",
    "project_url": "https://pypi.org/project/vtcff/",
    "project_urls": {
      "Homepage": "https://github.com/rtmigo/vtcff_py"
    },
    "release_url": "https://pypi.org/project/vtcff/0.3.1/",
    "requires_dist": [
      "framefile"
    ],
    "requires_python": ">=3.8",
    "summary": "Ffmpeg wrapper for transcoding between video formats with an emphasis on maintaining quality and color depth in video production pipelines",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11930084,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adfe47250b977f89cf41ad198808de9dee9e6ab74db782491348c72411e95df7",
          "md5": "c657edf3de9f6e4f5d54e68ebc66cbe5",
          "sha256": "691078cc355370ea66a865dc7f9a11605c6114a353aa40096d99b45580ad6c55"
        },
        "downloads": -1,
        "filename": "vtcff-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c657edf3de9f6e4f5d54e68ebc66cbe5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21739,
        "upload_time": "2021-10-25T16:01:59",
        "upload_time_iso_8601": "2021-10-25T16:01:59.672722Z",
        "url": "https://files.pythonhosted.org/packages/ad/fe/47250b977f89cf41ad198808de9dee9e6ab74db782491348c72411e95df7/vtcff-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf848c56f3a15d5462cf71b8aeb2909d03ba311f21ea85c4bff78b5ba4f5911d",
          "md5": "8c4eecc7d19a9e2128542d51e38fa748",
          "sha256": "876aadf8008d80da1052bc93a919fec9ec44e1b752778e844c6895fc25eb4fe3"
        },
        "downloads": -1,
        "filename": "vtcff-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c4eecc7d19a9e2128542d51e38fa748",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17743,
        "upload_time": "2021-10-25T16:02:01",
        "upload_time_iso_8601": "2021-10-25T16:02:01.744882Z",
        "url": "https://files.pythonhosted.org/packages/cf/84/8c56f3a15d5462cf71b8aeb2909d03ba311f21ea85c4bff78b5ba4f5911d/vtcff-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c63e3475ebf34c3bfc581a338b7767fbfb1acca5d5091896080640650953e27",
          "md5": "6a586ed86a148d3974795f4d54eac068",
          "sha256": "44a223996d3ad0c8a7a98a14f8d3d232864340aeead227d20a4155eb8f3ded75"
        },
        "downloads": -1,
        "filename": "vtcff-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a586ed86a148d3974795f4d54eac068",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23580,
        "upload_time": "2021-10-25T22:07:00",
        "upload_time_iso_8601": "2021-10-25T22:07:00.116887Z",
        "url": "https://files.pythonhosted.org/packages/2c/63/e3475ebf34c3bfc581a338b7767fbfb1acca5d5091896080640650953e27/vtcff-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b22926eee45835c1ffe40ea4a33cd8c113ee6fd837e36bb6b6018c1d25243f",
          "md5": "0b84c71125de6b308f156bce3ddcd72f",
          "sha256": "d902ba370adbf2309ff0e143f79666737d4cdc09c803af3890713e704d513f2c"
        },
        "downloads": -1,
        "filename": "vtcff-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0b84c71125de6b308f156bce3ddcd72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19828,
        "upload_time": "2021-10-25T22:07:02",
        "upload_time_iso_8601": "2021-10-25T22:07:02.028886Z",
        "url": "https://files.pythonhosted.org/packages/14/b2/2926eee45835c1ffe40ea4a33cd8c113ee6fd837e36bb6b6018c1d25243f/vtcff-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cf2923ad37045d92dca6274980a0907bc26edb305ea33747a2dd18cfcf947c8",
          "md5": "353742d34afd74a4d3b9bee5066bfa9c",
          "sha256": "d68399d2bd54e83990f1f4fd90d17dc8661b94d4d281c93df8e9804896b11696"
        },
        "downloads": -1,
        "filename": "vtcff-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "353742d34afd74a4d3b9bee5066bfa9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23585,
        "upload_time": "2021-10-26T00:26:15",
        "upload_time_iso_8601": "2021-10-26T00:26:15.874316Z",
        "url": "https://files.pythonhosted.org/packages/3c/f2/923ad37045d92dca6274980a0907bc26edb305ea33747a2dd18cfcf947c8/vtcff-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c829dd1280ac4da5c6c2fb70804df0a17b053f48ff2883eba8b518ad3dcbc21a",
          "md5": "ab571b26ca5697a748f7acdd5e69810b",
          "sha256": "87b06c41f1ae222e332c8775f7cc23c7a9ef0c08c5ef2154425934f915ec45bf"
        },
        "downloads": -1,
        "filename": "vtcff-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab571b26ca5697a748f7acdd5e69810b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19992,
        "upload_time": "2021-10-26T00:26:17",
        "upload_time_iso_8601": "2021-10-26T00:26:17.486644Z",
        "url": "https://files.pythonhosted.org/packages/c8/29/dd1280ac4da5c6c2fb70804df0a17b053f48ff2883eba8b518ad3dcbc21a/vtcff-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cba275ea6176d17c97fef9cbbfc7aae4ed2f14d42ac65db2835da7f2182d10a",
          "md5": "dfaeee4067f3d8e8809c000dcd4aa434",
          "sha256": "96fa54cc563389a6c0a7417ecb96f89a2c3212bee8b5b3626daf054d228b8b8c"
        },
        "downloads": -1,
        "filename": "vtcff-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfaeee4067f3d8e8809c000dcd4aa434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30656,
        "upload_time": "2021-10-27T13:22:29",
        "upload_time_iso_8601": "2021-10-27T13:22:29.530662Z",
        "url": "https://files.pythonhosted.org/packages/6c/ba/275ea6176d17c97fef9cbbfc7aae4ed2f14d42ac65db2835da7f2182d10a/vtcff-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da7508728f994accf96ff13051c6a0223bfc2b2087529941e6c057d661effed0",
          "md5": "e0bf472e61d3cc66297848981ecdd2c4",
          "sha256": "60851608ffc28a3eaac80ac4c8a85f44537a1e82c8cb085beb88ceabd7cbd729"
        },
        "downloads": -1,
        "filename": "vtcff-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0bf472e61d3cc66297848981ecdd2c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25012,
        "upload_time": "2021-10-27T13:22:30",
        "upload_time_iso_8601": "2021-10-27T13:22:30.926561Z",
        "url": "https://files.pythonhosted.org/packages/da/75/08728f994accf96ff13051c6a0223bfc2b2087529941e6c057d661effed0/vtcff-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d55eb07f1131f772d6db52c0511162f8700f428eae9129109343de00a9e7d2",
          "md5": "7a73640dc44be5b237841bcaa4df7b3a",
          "sha256": "f59445fff15f549fb8564f11a83b2d3d34326175d0e96a359aa683610af7671a"
        },
        "downloads": -1,
        "filename": "vtcff-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a73640dc44be5b237841bcaa4df7b3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31605,
        "upload_time": "2021-11-04T21:54:25",
        "upload_time_iso_8601": "2021-11-04T21:54:25.684225Z",
        "url": "https://files.pythonhosted.org/packages/f9/d5/5eb07f1131f772d6db52c0511162f8700f428eae9129109343de00a9e7d2/vtcff-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2775b4cba1bce865dd05e652782ab73965bfd2de85e23000ff1870f168b8f5f0",
          "md5": "8b361408a0b1ec8fb019f40f1fa01d55",
          "sha256": "c80f534ea7531cfb82e2406db800645071a55d28a91bd3eadbe597027f925134"
        },
        "downloads": -1,
        "filename": "vtcff-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8b361408a0b1ec8fb019f40f1fa01d55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25797,
        "upload_time": "2021-11-04T21:54:26",
        "upload_time_iso_8601": "2021-11-04T21:54:26.878782Z",
        "url": "https://files.pythonhosted.org/packages/27/75/b4cba1bce865dd05e652782ab73965bfd2de85e23000ff1870f168b8f5f0/vtcff-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9d55eb07f1131f772d6db52c0511162f8700f428eae9129109343de00a9e7d2",
        "md5": "7a73640dc44be5b237841bcaa4df7b3a",
        "sha256": "f59445fff15f549fb8564f11a83b2d3d34326175d0e96a359aa683610af7671a"
      },
      "downloads": -1,
      "filename": "vtcff-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a73640dc44be5b237841bcaa4df7b3a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 31605,
      "upload_time": "2021-11-04T21:54:25",
      "upload_time_iso_8601": "2021-11-04T21:54:25.684225Z",
      "url": "https://files.pythonhosted.org/packages/f9/d5/5eb07f1131f772d6db52c0511162f8700f428eae9129109343de00a9e7d2/vtcff-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2775b4cba1bce865dd05e652782ab73965bfd2de85e23000ff1870f168b8f5f0",
        "md5": "8b361408a0b1ec8fb019f40f1fa01d55",
        "sha256": "c80f534ea7531cfb82e2406db800645071a55d28a91bd3eadbe597027f925134"
      },
      "downloads": -1,
      "filename": "vtcff-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8b361408a0b1ec8fb019f40f1fa01d55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 25797,
      "upload_time": "2021-11-04T21:54:26",
      "upload_time_iso_8601": "2021-11-04T21:54:26.878782Z",
      "url": "https://files.pythonhosted.org/packages/27/75/b4cba1bce865dd05e652782ab73965bfd2de85e23000ff1870f168b8f5f0/vtcff-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}