{
  "info": {
    "author": "",
    "author_email": "Vwout <vwout@users.noreply.github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# c3\nA native Python library for communicating with the ZKTeco ZKAccess C3 Access Control Panels.\n\nThis library intends to implement the same functionality as provided by the ZKAccess C3 PullSDK API, but using native Python only.\nIt is a port and extension of my (C3 Lua library)[../zkaccess-c3-lua].\n\n## Usage\nTo use the library, import the main class:\n```\nfrom c3 import C3\n```\nA panel connection can be created from the main class `C3`:\n```\n    panel = C3()\n    if panel.connect(ip):\n      panel.get_device_param([\"~SerialNumber\", \"LockCount\")\n```\nTo use the real-time log (RTLog), or control outputs, also include the helper classes from `controldevice` and `rtlog`.\n\n## Protocol\nThe C3 access panels communicate using RS485 or TCP/IP.\nThis library only support TCP/IP connections using IPv4.\nThe connection is optionally secured by a password.\nConnections to C3 panels that use a password are not supported for this moment.\n\nThe wire protocol for the access panels is binary, with the following datagram both for requests (from client to equipment) and responses:\n\n| Byte        | 0      | 1       | 2       | 3          | 4          | 5,6,7,8, ...  | n-2, n-1 | n       |\n|-------------|--------|---------|---------|------------|------------|---------------|----------|---------|\n| **Meaning** | Start  | Version | Command | Length Lsb | Length Msb | Data          | Checksum | End     |\n|  **Value**  | `0xAA` | `0x01`  |         |            |            |               |          | `0x55`  |\n\nThe start bytes 0, 1 and last byte have a fixed value.\nThe *Command* is one of the following (only listing commands supported by this library)\n\n| Code   | Command                                             |\n|--------|-----------------------------------------------------|\n| `0x76` | Connect (session initiation)                        |\n| `0x02` | Disconnection (session end)                         |\n| `0x05` | Device control command                              |\n| `0x0B` | Retrieve realtime log                               |\n| `0xC8` | Response (confirm successful execution of command)  |\n\nThe *Length* field (2 bytes, in Little Endian encoding) contains the number of bytes of the *Data* field.\nThe *Data* field (as of byte 5) typically has at least 4 bytes:\n- Session Id (2 bytes, in Little Endian encoding): The session identifier assigned by the equipment in response to a session initiation command\n- Message Number (2 bytes, in Little Endian encoding): A message sequence number that starts from 0 (the session initiation command) and is increased with every command send\n\n| Byte         | 5             | 6             | 7              | 8              | ...      |\n|--------------|---------------|---------------|----------------|----------------|----------|\n|  **Meaning** | SessionId Lsb | SessionId Msb | Message Nr Lsb | Message Nr Msb | Payload  |\n\nThe *Checksum* is a CRC-16 checksum calculated over the full message excluding the *Start* and *End* byte.\n\n## API\n### Connect\n```\nconnect(host, port=4370)\n```\nThe method is used to connect a C3 device using TCP. \nRS485 is not supported,  neither is using a password to secure the connection.\nThis method must be called before any other method and initializes a C3 session.\nReturns true in case of a successful connection.\n\n### Disconnect\n```\ndisconnect()\n```\n\nDisconnects from the C3 access panel and ends the session.\n\n### Get RTLog (real-time log)\n```\nget_rt_log()\n```\n\nThis method acquires the realtime event log generated by the access panel. \nIt contains the door and/or alarm status of the equipment.\nIt returns an array of DoorAlarmStatusRecord and/or EventRecord objects.\n\n### Get Device Parameters\n```\nget_device_param(params_arr)\n```\n\nThis method reads device parameters, both configuration and static parameters.\nThe argument is a list of (maximum 30) strings with the parameter names for which the values need to be returned. Valid values are (reduced list):\n   ~SerialNumber, AntiPassback, AuxInCount, AuxOutCount, BackupTime, ComPwd, DateTime, DaylightSavingTime, DaylightSavingTimeOn, DLSTMode, Door{N}CancelKeepOpenDay, Door{N}CloseAndLock, Door{N}Detectortime, Door{N}Drivertime, Door{N}FirstCardOpenDoor, Door{N}ForcePassWord, Door{N}Intertime, Door{N}KeepOpenTimeZone, Door{N}MultiCardOpenDoor, Door{N}SensorType, Door{N}SupperPassWord, Door{N}ValidTZ, Door{N}VerifyType, GATEIPAddress, InBIOTowWay , InterLock, IPAddress, LockCount, NetMask, ReaderCount, Reboot, RS232BaudRate, StandardTime, WatchDog, WeekOfMonth{N},\nFor the full list and the meaning of the returned value, refer to the PullSDK specification.\nThe return value is a table of key/value pairs with the parameter name and value.\n\n### Control Device\n```\ncontrol_device(control_command_object)\n```\n\nSends a control command to the access panel to perform an action on the requipment. The control_command is an instance of one of the following objects:\n- `ControlDeviceOutput(output_number, address, duration)`: Open or close a door or auxiliary device\n  - *output_number*: The number of the door or auxiliary to control (1-4)\n  - *address*: Determines whether *door_number* is a door (*address* = 1) or an auxiliary (*address* = 2)\n  - *duration*: The duration for which the door will be open; 0 will close the door immediately, 1-254 will leave the door open for that number of seconds: 255 will leave the door open for an undetermined period\n- `ControlDeviceCancelAlarms()`: Cancel any triggered alarm\n- `ControlDeviceRestart()`: Reboot the access panel\n- `ControlDeviceNormalOpenStateEnable(door_number, enable_disable)`: Change the normal open/close state for the door controller\n  - *door_number*: The number of the door to control (1-4)\n  - *enable*: Enable normally open mode (*enable* = True) or disable normally open mode for the door (*enable_disable* = 0, default)\n\n### Set log level\n```\nlog_level(level)\n```\nSets the logging level, using the Python logging levels.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zkaccess-c3",
    "package_url": "https://pypi.org/project/zkaccess-c3/",
    "platform": null,
    "project_url": "https://pypi.org/project/zkaccess-c3/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vwout/zkaccess-c3-py/issues",
      "Homepage": "https://github.com/vwout/zkaccess-c3-py"
    },
    "release_url": "https://pypi.org/project/zkaccess-c3/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A native Python library for communicating with the ZKAccess C3 Access Control Panels.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17444925,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4462234222f9b46d564aa1024503e574420c781e4b8ab68990fb65e0b773ba47",
          "md5": "1716b8aaed0072dc91835fdcbdb6cc1a",
          "sha256": "2c6773051b2d4fd8c734e647bff3e8e99b42e0d209969d5af7f1bfd7cce4ca08"
        },
        "downloads": -1,
        "filename": "zkaccess_c3-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1716b8aaed0072dc91835fdcbdb6cc1a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26577,
        "upload_time": "2023-03-25T22:13:33",
        "upload_time_iso_8601": "2023-03-25T22:13:33.446025Z",
        "url": "https://files.pythonhosted.org/packages/44/62/234222f9b46d564aa1024503e574420c781e4b8ab68990fb65e0b773ba47/zkaccess_c3-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aa0513d379d908a205146b7e2f061dd6b3ac9b049363bda38a3ede0c1bd0582",
          "md5": "82d2b2e05fae507550f0e8bbbc9502ba",
          "sha256": "d38ee6de487c7c88a77fe9104002438fce15ae372b991464e0ae3d5eb4375a35"
        },
        "downloads": -1,
        "filename": "zkaccess_c3-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "82d2b2e05fae507550f0e8bbbc9502ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32460,
        "upload_time": "2023-03-25T22:13:35",
        "upload_time_iso_8601": "2023-03-25T22:13:35.581970Z",
        "url": "https://files.pythonhosted.org/packages/7a/a0/513d379d908a205146b7e2f061dd6b3ac9b049363bda38a3ede0c1bd0582/zkaccess_c3-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4462234222f9b46d564aa1024503e574420c781e4b8ab68990fb65e0b773ba47",
        "md5": "1716b8aaed0072dc91835fdcbdb6cc1a",
        "sha256": "2c6773051b2d4fd8c734e647bff3e8e99b42e0d209969d5af7f1bfd7cce4ca08"
      },
      "downloads": -1,
      "filename": "zkaccess_c3-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1716b8aaed0072dc91835fdcbdb6cc1a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26577,
      "upload_time": "2023-03-25T22:13:33",
      "upload_time_iso_8601": "2023-03-25T22:13:33.446025Z",
      "url": "https://files.pythonhosted.org/packages/44/62/234222f9b46d564aa1024503e574420c781e4b8ab68990fb65e0b773ba47/zkaccess_c3-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aa0513d379d908a205146b7e2f061dd6b3ac9b049363bda38a3ede0c1bd0582",
        "md5": "82d2b2e05fae507550f0e8bbbc9502ba",
        "sha256": "d38ee6de487c7c88a77fe9104002438fce15ae372b991464e0ae3d5eb4375a35"
      },
      "downloads": -1,
      "filename": "zkaccess_c3-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "82d2b2e05fae507550f0e8bbbc9502ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 32460,
      "upload_time": "2023-03-25T22:13:35",
      "upload_time_iso_8601": "2023-03-25T22:13:35.581970Z",
      "url": "https://files.pythonhosted.org/packages/7a/a0/513d379d908a205146b7e2f061dd6b3ac9b049363bda38a3ede0c1bd0582/zkaccess_c3-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}