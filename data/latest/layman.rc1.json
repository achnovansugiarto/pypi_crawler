{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# layman\n\nlayman is a daemon that handles layout management on a per-workspace basis. Each `WorkspaceLayoutManager` (WLM) is\nresponsible for managing all of the tiling windows on a given workspace. \n\nWLMs are intended to have a simpler set of events than those provided though i3ipc-python, since the scope is limited\nto a single workspace. See the User Created Layouts section for how to add a new layout.\n\n```\nUsage: layman.py [options]\n\nOptions:\n  -h, --help                   show this help message and exit\n  -c .config/layman/config.toml, --config=.config/layman/config.toml\n                               Path to user config file.\n```\n\n## Installation\n\nI intend to provide installation through PyPi using pip, however the original name of this project `swlm` was forbidden for\nbeing too similar to another package, swmm. After rebranding to `layman`, the name is still forbidden for an unkown reason.\nUntil this is resolved, please use the instructions below.\n\nFor Arch users, `layman-git` is available [on the AUR](https://aur.archlinux.org/packages/layman-git) courtesy of [matclab](https://github.com/matclab)\n\n## Installing from source\n```\ngit clone https://github.com/frap129/layman\npip install ~/path/to/layman\n```\nto package and install layman. If you do not want to have to reinstall after a change, add --editable to the pip command\n\n## Configuration\n\nlayman is configured using the config file at `$HOME/.config/layman/config.toml`. The `[layman]` table configures\noptions for layman, and defaults options for WLMs. Specific outputs and workspaces can be configured using\n`[output.VALUE]` or `[workspace.VALUE]` header, where `VALUE` is the name of the output or the workspace number.\nAny options configured will override the values set in the `[layman]` table for that output or workspace. For an example\nconfiguration, see the `config.toml` file in the root of this repo.\n\nNote, values configured for outputs will only apply to workspaces **created** on that output.\n\nThe config can be reloaded at runtime with `nop layman reload` set on a bindsym. Note that this reloads the config, but\nnot the layout managers. Config changes for existing layouts won't take affect until the managers is reset with\n`nop layman layout <layout short name>`.\n\n## Layout Managers\n\nThe layout manager controlling a workspace can be changed using the command `nop layman layout <LAYOUT>`. In order to\nhandle window movement in layouts that don't use standard up/down/left/right, a WLM can override these commands with better\ndefaults, and layman will fall back the regular command for WLMs that don't. To use the WLM provided movement commands,\nreplace your `move <direction>` bindsyms with\n```\n# Override move binds\nbindsym $mod+Shift+Left nop layman move left\nbindsym $mod+Shift+Down nop layman move down\nbindsym $mod+Shift+Up nop layman move up\nbindsym $mod+Shift+Right nop layman move right\n```\n\nThe `src/mananagers/` directoy contains files that each hold an implementation of a WLM, with `WorkspaceLayoutManager.py`\ncontaining the parent class from which all WLMs are derived.\n\n### none\n\nThe `none` layout manager does not manage any windows. It exists as a reference implementation, and to allow users\nto disable layout management on a given workspace.\n\nBinding:\n```\nbindym <your bind here> nop layman layout none # disable layout management on a workspace\n```\n\n### Autotiling\n\nBased on nwg-piotr's [autotiling](https://github.com/nwg-piotr/autotiling/blob/master/autotiling/main.py),\nthe `Autotiling` layout manager alternates between splith and splitv based on a windows height/width ratio.\n\nConfig options:\n```\ndepthLimit: Max number of nested splits [0 means no limit]\n```\n\nBinding:\n```\nbindym <your bind here> nop layman layout Autotiling # set focused workspace's layout manager to Autotiling\n```\n\n### Grid\n\n![](docs/Grid.gif)\n\nLike autotiling, Grid splits window based on width/height ratio. It differs from Autotiling by always splttting\nthe largest existing window, rather than the currently focused window. If multiple windows have the same size,\nGrid tries to split the left-most and top-most \"largest\" window. This results in a grid-like pattern.\n\nBinding:\n```\nbindym <your bind here> nop layman layout Grid # set focused workspace's layout manager to Grid\n```\n### MasterStack\n\n![](docs/MasterStack.gif)\n\n`MasterStack` is inspired by dwm/dwl/river, but is my own take on it. It implements a master window with a stack\non the side. When a new window is created, it replaces master and master is placed on top of the stack.\nIf the master window is deleted, the top of the stack replaces master. The layout of the stack container can be\n`splitv`, `tabbed`, or `stacking`. The layout of the stack can be toggled using a keybind.\n\n`MasterStack` also implements a keybind for swapping. When swapping, the focused window is swapped with master. If\nthe focused window is master, it gets swapped with the top of the stack. `MasterStack` also implements rotation.\nWhen rotating left, master is moved to the bottom of the stack, and the top of the stack becomes master.\nRotating right moves master to the top of the stack, and the bottom of the stack becomes master.\n\n`MasterStack` provides overrides for `move <directon>` binds. \n\nKnown bugs:\n-  Sometimes existing windows get missed when arranging an existing layout\n\nConfig options:\n```\nmasterWidth: Int to control the percent width of master window [1-99]\nstackLayout: String to control the layout of the stack [\"splitv\", \"tabbed\", \"stacking\"]\nstackSide: String to control which side of the screen the stack is on [\"right\", \"left\"]\n```\n\nBindings:\n```\nbindym <your bind here> nop layman layout MasterStack # set focused workspace's layout manager to MasterStack\nbindym <your bind here> nop layman swap master # swap focused window with master\nbindym <your bind here> nop layman rotate cw # rotate layout cw 1 window\nbindym <your bind here> nop layman rotate ccw # rotate layout ccw 1 window\nbindym <your bind here> nop layman move up # move focused winodw up 1 position in the stack\nbindym <your bind here> nop layman move down # move focused window down one position in the stack\nbindym <your bind here> nop layman stack toggle # toggles stack layout through splitv, tabbed, and stacking\nbindym <your bind here> nop layman stackside toggle # toggles stack side between left and right\n```\n\n### User Created Layouts\n\nYou can create layouts that get picked up and managed by layman without modifying layman itself. Any python file placed\nin the same directory as the config file will be automatically imported by layman at startup, and any time the\nconfiguration is reloaded. To get started writing your own layouts, take a look at `src/mangers/WorkspaceLayoutManger.py`\nin this repo. This is the base class from which your layout must inherit, and provides a number of hooks and functions\nfor handling window events. `src/managers/AutotilingLayoutManager.py` is a simple example of how to implement a WLM.\nWhen making a WLM, make sure that it has a unique shortname.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "layman",
    "package_url": "https://pypi.org/project/layman/",
    "platform": null,
    "project_url": "https://pypi.org/project/layman/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/layman/0.1.0/",
    "requires_dist": [
      "i3ipc",
      "setproctitle",
      "tomli"
    ],
    "requires_python": "",
    "summary": "A daemon that handles sway/i3 layout management on a per-workspace basis",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16857943,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c85e10df3b5c029c1a16502cde41fb00c9437c155c2ade6680af325823048ae8",
          "md5": "0609ba0be9fac4f14c81f09f5fb05bb3",
          "sha256": "23c189d62cad9e20aa193a372b6c5da320b7828f0ecbeffa34d848f213668111"
        },
        "downloads": -1,
        "filename": "layman-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0609ba0be9fac4f14c81f09f5fb05bb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30867,
        "upload_time": "2023-02-14T16:19:21",
        "upload_time_iso_8601": "2023-02-14T16:19:21.038534Z",
        "url": "https://files.pythonhosted.org/packages/c8/5e/10df3b5c029c1a16502cde41fb00c9437c155c2ade6680af325823048ae8/layman-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c85e10df3b5c029c1a16502cde41fb00c9437c155c2ade6680af325823048ae8",
        "md5": "0609ba0be9fac4f14c81f09f5fb05bb3",
        "sha256": "23c189d62cad9e20aa193a372b6c5da320b7828f0ecbeffa34d848f213668111"
      },
      "downloads": -1,
      "filename": "layman-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0609ba0be9fac4f14c81f09f5fb05bb3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30867,
      "upload_time": "2023-02-14T16:19:21",
      "upload_time_iso_8601": "2023-02-14T16:19:21.038534Z",
      "url": "https://files.pythonhosted.org/packages/c8/5e/10df3b5c029c1a16502cde41fb00c9437c155c2ade6680af325823048ae8/layman-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}