{
  "info": {
    "author": "Shitao Xiao, Zheng Liu, Yingxia Shao",
    "author_email": "stxiao@bupt.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# LibVQ\nA Library For Dense Retrieval Oriented Vector Quantization\n\n\n## Introduction\nVector quantization (VQ) is widely applied to many ANN libraries, like [FAISS](https://github.com/facebookresearch/faiss), [ScaNN](https://github.com/google-research/google-research/tree/master/scann), [SPTAG](https://github.com/microsoft/SPTAG), [DiskANN](https://github.com/microsoft/DiskANN) to facilitate real-time and memory-efficient dense retrieval. However, conventional vector quantization methods, like [IVF](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf), [PQ](https://lear.inrialpes.fr/pubs/2011/JDS11/jegou_searching_with_quantization.pdf), [OPQ](http://kaiminghe.com/cvpr13/index.html), are not optimized for the retrieval quality. In this place, We present **LibVQ**, the first library developed for dense retrieval oriented vector quantization. LibVQ is highlighted for the following features:\n\n- **Knowledge Distillation.** The knowledge distillation  based learning process can be directly applied to the off-the-shelf embeddings. It gives rise to the strongest retrieval performance in comparison with any existing VQ based ANN indexes. \n\n- **Flexible usage and input conditions.** LibVQ may flexibly support different usages, e.g., training VQ parameters only, or joint adaptation of query encoder. LibVQ is designed to handle a wide range of input conditions: it may work only with off-the-shelf embeddings; it may also leverage extra data, e.g., relevance labels, and source queries, for further enhancement. \n\n- **Learning and Deployment.** The learning is backended by **PyTorch**, which can be easily configured for the efficient training based on different computation resources. The well-trained VQ parameters are wrapped up with **FAISS** backend ANN indexes, e.g., IndexPQ, IndexIVFPQ, etc., which are directly deployable for large-scale dense retrieval applications. \n\n\n\n## Install\n- From PyPI\n```\npip install LibVQ\n```\n\n- From source\n```\ngit clone https://github.com/staoxiao/LibVQ.git\ncd LibVQ\npip install .\n```\n\n## Workflow\nIn LibVQ, users can construct a index and train it by a simple way.\nPlease refer to our [docs](./Docs) for more details.\nBesides, we provide some examples below to illustrate the usage of LibVQ.\n\n## Examples\n### [MSMARCO](./examples/MSMARCO/)  \n- IVFPQ (Compression Ratio = 96)   \n\nMethods | MRR@10 | Recall@10 | Recall@100 | \n------- | ------- | ------- |  ------- |\n[Faiss-IVFPQ](./examples/MSMARCO/basic_index/faiss_index.py) | 0.1380 | 0.2820 | 0.5617 |  \n[Faiss-IVFOPQ](./examples/MSMARCO/basic_index/faiss_index.py) | 0.3102 | 0.5593 | 0.8148 |  \n[Scann](./examples/MSMARCO/basic_index/scann_index.py) | 0.1791 | 0.3499 | 0.6345 | \n[LibVQ(contrastive_index)](./examples/MSMARCO/learnable_index/train_index.py) | 0.3179 | 0.5724 | 0.8214 | \n[LibVQ(distill_index)](./examples/MSMARCO/learnable_index/train_index.py) | 0.3253 | 0.5765 | 0.8256 | \n[LibVQ(distill_index_nolabel)](./examples/MSMARCO/learnable_index/train_index.py) | 0.3234 | 0.5813 | 0.8269 | \n[LibVQ(contrastive_index-and-query-encoder)](./examples/MSMARCO/learnable_index/train_index_and_encoder.py) | 0.3192 | 0.5799 | 0.8427 |  \n[LibVQ(distill_index-and-query-encoder)](./examples/MSMARCO/learnable_index/train_index_and_encoder.py) | **0.3311** | **0.5907** | **0.8429** |  \n[LibVQ(distill_index-and-query-encoder_nolabel)](./examples/MSMARCO/learnable_index/train_index_and_encoder.py) | 0.3285 | 0.5875 | 0.8401 | \n\n\n- PQ (Compression Ratio = 96) \n\nMethods | MRR@10 | Recall@10 | Recall@100 | \n------- | ------- | ------- |  ------- | \n[Faiss-PQ](./examples/MSMARCO/basic_index/faiss_index.py) | 0.1145 | 0.2369 | 0.5046 |  \n[Faiss-OPQ](./examples/MSMARCO/basic_index/faiss_index.py) | 0.3268 | 0.5939 | 0.8651 |   \n[Scann](./examples/MSMARCO/basic_index/scann_index.py) | 0.1795 | 0.3516 | 0.6409 |  \n[LibVQ(distill_index)](./examples/MSMARCO/learnable_index/train_index.py) | 0.3435 | 0.6203 | 0.8825 | \n[LibVQ(distill_index_nolabel)](./examples/MSMARCO/learnable_index/train_index.py) | 0.3467 | 0.6180 | 0.8849 | \n[LibVQ(distill_index-and-query-encoder)](./examples/MSMARCO/learnable_index/train_index_and_encoder.py) | 0.3446 | 0.6201 | 0.8837 | \n[LibVQ(distill_index-and-two-encoders)](./examples/MSMARCO/learnable_index/train_index_and_encoder.py) | **0.3475** | **0.6223** | **0.8901** |  \n\n\n### [NQ](./examples/NQ/)  \n- IVFPQ  (Compression Ratio = 384) \n\nMethods | Recall@5 | Recall@10 | Recall@20 | Recall@100 | \n------- | ------- | ------- |  ------- |  ------- |\n[Faiss-IVFPQ](./examples/NQ/basic_index/faiss_index.py) | 0.1504 | 0.2052 | 0.2722 | 0.4523 |  \n[Faiss-IVFOPQ](./examples/NQ/basic_index/faiss_index.py) | 0.3332 | 0.4279 | 0.5110 | 0.6817 |  \n[Scann](./examples/NQ/basic_index/scann_index.py) | 0.2526 | 0.3351 | 0.4144 | 0.6016 |\n[LibVQ(contrastive_index)](./examples/NQ/learnable_index/train_index.py) | 0.3398 | 0.4415 | 0.5232 | 0.6911 \n[LibVQ(distill_index)](./examples/NQ/learnable_index/train_index.py) | 0.3952 | 0.4900 | 0.5667 | 0.7232\n[LibVQ(distill_index_nolabel)](./examples/NQ/learnable_index/train_index.py) | 0.4066 | 0.4936 | 0.5759 | 0.7301\n[LibVQ(contrastive_index-and-query-encoder)](./examples/NQ/learnable_index/train_index_and_encoder.py) | 0.3548 | 0.4470 | 0.5390 | 0.7120 \n[LibVQ(distill_index-and-query-encoder)](./examples/NQ/learnable_index/train_index_and_encoder.py) | 0.4725 | 0.5681 | 0.6429 | 0.7739 \n[LibVQ(distill_index-and-query-encoder_nolabel)](./examples/NQ/learnable_index/train_index_and_encoder.py) | **0.4977** | **0.5822** | **0.6484** | **0.7764**\n\n\n\n- PQ  (Compression Ratio = 384) \n\nMethods | Recall@5 | Recall@10 | Recall@20 | Recall@100 |\n------- | ------- | ------- |  ------- | ------- | \n[Faiss-PQ](./examples/NQ/basic_index/faiss_index.py) | 0.1301 | 0.1861 | 0.2495 | 0.4188  \n[Faiss-OPQ](./examples/NQ/basic_index/faiss_index.py) | 0.3166 | 0.4105 | 0.4961 | 0.6836  \n[Scann](./examples/NQ/basic_index/scann_index.py) | 0.2526 | 0.3351 | 0.4144 | 0.6013 |\n[LibVQ(distill_index)](./examples/NQ/learnable_index/train_index.py) | 0.3817 | 0.4806 | 0.5681 | 0.7357  \n[LibVQ(distill_index_nolabel)](./examples/NQ/learnable_index/train_index.py) | 0.3880 | 0.4858 | 0.5819 | 0.7423    \n[LibVQ(distill_index-and-query-encoder)](./examples/NQ/learnable_index/train_index_and_encoder.py) | 0.4709 | 0.5689 | 0.6481 | 0.7930   \n[LibVQ(distill_index-and-query-encoder_nolabel)](./examples/NQ/learnable_index/train_index_and_encoder.py) | 0.4883 | 0.5903 | 0.6678 | 0.7914   \n[LibVQ(distill_index-and-two-encoders)](./examples/NQ/learnable_index/train_index_and_encoder.py) | **0.5637** | **0.6515** | **0.7171** | **0.8257**  \n[LibVQ(distill_index-and-two-encoders_nolabel)](./examples/NQ/learnable_index/train_index_and_encoder.py) | 0.5285 | 0.6144 | 0.7296 | 0.8096  \n\n\n\n\n## Related Work  \n* **[Distii-VQ](https://arxiv.org/abs/2204.00185)**: Unifies the learning of IVF and PQ within a knowledge distillation framework.  Accpted as a full paper by SIGIR 2022.\n\n* **[BiDR](https://arxiv.org/abs/2201.05409)**: Applies the learnable PQ in large-scale index and proposes the progressively optimized docs' embeddings for the better retrieval performance. Accpted as a full paper by WWW 2022.\n\n* **[MoPQ](https://arxiv.org/abs/2104.07858)**: This work identifies the limitation of using reconstruction loss minimization as the training objective of learnable PQ and proposes the Multinoulli Contrastive Loss. Accpted as a full paper by EMNLP 2021.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/staoxiao/LibVQ",
    "keywords": "Vector Quantization,ANN,IVF",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LibVQ",
    "package_url": "https://pypi.org/project/LibVQ/",
    "platform": null,
    "project_url": "https://pypi.org/project/LibVQ/",
    "project_urls": {
      "Homepage": "https://github.com/staoxiao/LibVQ"
    },
    "release_url": "https://pypi.org/project/LibVQ/0.0.2/",
    "requires_dist": [
      "transformers (>=4.9.0)",
      "faiss-gpu (==1.6.4.post2)",
      "scann (==1.2.3)",
      "tqdm",
      "torch (>=1.6.0)",
      "numpy"
    ],
    "requires_python": "",
    "summary": "A Library For Dense Retrieval Oriented Vector Quantization",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13649957,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a705da97647d1a8c55f9e53d5bd15505cd761435962275451d4a9a581fffb2b1",
          "md5": "198a1f1c08eda61c5f18678bba235171",
          "sha256": "770c2ccd81a850d89fcd1e09cb59418cdca642964fb294c21bd74295217f9a53"
        },
        "downloads": -1,
        "filename": "LibVQ-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "198a1f1c08eda61c5f18678bba235171",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33411,
        "upload_time": "2022-04-28T08:42:12",
        "upload_time_iso_8601": "2022-04-28T08:42:12.135730Z",
        "url": "https://files.pythonhosted.org/packages/a7/05/da97647d1a8c55f9e53d5bd15505cd761435962275451d4a9a581fffb2b1/LibVQ-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "900f172a975d9327e4536e1f7a9d4084157a0c9287ca2309fe670ce1a8fef2e6",
          "md5": "a993343b16faef9330e81746599b744f",
          "sha256": "777cb15a67b65bedee5b8b4f829f23b1c8c617ff0a35c0ff27f376997776089c"
        },
        "downloads": -1,
        "filename": "LibVQ-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a993343b16faef9330e81746599b744f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23640,
        "upload_time": "2022-04-28T08:42:13",
        "upload_time_iso_8601": "2022-04-28T08:42:13.983759Z",
        "url": "https://files.pythonhosted.org/packages/90/0f/172a975d9327e4536e1f7a9d4084157a0c9287ca2309fe670ce1a8fef2e6/LibVQ-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "813862a5330baf09e33cedbd41fe52815a140d2a108c0c4ebae7fb38576729f6",
          "md5": "f2d0b7a44e224cccc5b8085d834d2aca",
          "sha256": "df4603711db1ced68fec2eb9ec52fbe02ad4e147adf9df563ea7717cba85f587"
        },
        "downloads": -1,
        "filename": "LibVQ-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2d0b7a44e224cccc5b8085d834d2aca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33426,
        "upload_time": "2022-04-28T08:48:45",
        "upload_time_iso_8601": "2022-04-28T08:48:45.886081Z",
        "url": "https://files.pythonhosted.org/packages/81/38/62a5330baf09e33cedbd41fe52815a140d2a108c0c4ebae7fb38576729f6/LibVQ-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d5e4091fa08449c25d9ae55e95dd22266829691f4399bb3a88f78e9efb90a49",
          "md5": "5cdd9b5f997ac6358c33c52c084e336f",
          "sha256": "14eaefa459ebb6ffa451aae96da4491901c6b523e9226bd720793efa63c89f22"
        },
        "downloads": -1,
        "filename": "LibVQ-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5cdd9b5f997ac6358c33c52c084e336f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23681,
        "upload_time": "2022-04-28T08:48:47",
        "upload_time_iso_8601": "2022-04-28T08:48:47.792648Z",
        "url": "https://files.pythonhosted.org/packages/8d/5e/4091fa08449c25d9ae55e95dd22266829691f4399bb3a88f78e9efb90a49/LibVQ-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "813862a5330baf09e33cedbd41fe52815a140d2a108c0c4ebae7fb38576729f6",
        "md5": "f2d0b7a44e224cccc5b8085d834d2aca",
        "sha256": "df4603711db1ced68fec2eb9ec52fbe02ad4e147adf9df563ea7717cba85f587"
      },
      "downloads": -1,
      "filename": "LibVQ-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2d0b7a44e224cccc5b8085d834d2aca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 33426,
      "upload_time": "2022-04-28T08:48:45",
      "upload_time_iso_8601": "2022-04-28T08:48:45.886081Z",
      "url": "https://files.pythonhosted.org/packages/81/38/62a5330baf09e33cedbd41fe52815a140d2a108c0c4ebae7fb38576729f6/LibVQ-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d5e4091fa08449c25d9ae55e95dd22266829691f4399bb3a88f78e9efb90a49",
        "md5": "5cdd9b5f997ac6358c33c52c084e336f",
        "sha256": "14eaefa459ebb6ffa451aae96da4491901c6b523e9226bd720793efa63c89f22"
      },
      "downloads": -1,
      "filename": "LibVQ-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5cdd9b5f997ac6358c33c52c084e336f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23681,
      "upload_time": "2022-04-28T08:48:47",
      "upload_time_iso_8601": "2022-04-28T08:48:47.792648Z",
      "url": "https://files.pythonhosted.org/packages/8d/5e/4091fa08449c25d9ae55e95dd22266829691f4399bb3a88f78e9efb90a49/LibVQ-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}