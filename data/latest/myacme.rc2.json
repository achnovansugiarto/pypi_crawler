{
  "info": {
    "author": "AXY",
    "author_email": "axy@declassed.art",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Utilities"
    ],
    "description": "# MyACME client library and CLI tools\n\n\n\n\nThis ACME client might be considered stable, given that I have been using it since 2021 in manual mode.\nHowever, it's still beta for the following reasons:\n* Automation and some major changes were done recently.\n* Needs more testing. For me, a sole user, this is lazy process because problems\n  may happen only each 2-3 months. Or may not.\n* Authorization needs revising, there are some XXX/TODOs.\n* Certificate revocation is not implemented yet.\n* CLI needs some utility commands.\n\n## Introduction\n\nThis yet another ACME client emerged for fwo reasons:\n* I had no my own LE account yet and needed a certificate for my mail server.\n  A few clients I tried required email for some reason, although ACME protocol defines contacts as optional.\n  It was odd to ask an email when I had no mail server yet.\n  Later on I discovered an option in certbot that makes email optional, but here's another reason:\n* Certbot was too complicated for me to extend for my very basic needs. I wanted a simple tool and choosing\n  a way to waste my time I preferred to learn RFC 8555 instead of certbot internals.\n\nSo, this client is written from scratch by studying https://tools.ietf.org/html/rfc8555\nand trying out Let's Encrypt staging and production environments.\nIt is based on `requests` and `cryptography` packages.\n\n## Installation\n\n```shell\npip install myacme\n```\n\n\n## Command-line ACME client\n\n### Account creation\n\nBefore applying to certificate issuance you need an account on the ACME server.\n\nThe following command generates private key and creates an account:\n\n```shell\nmyacme create account ak=my-account-key.pem\n```\n\nYou can generate my-account-key.pem with other tools, `openssl` for example.\nThe above command will use your existing key then.\n\nThe default ACME server is Let's Encrypt https://acme-v02.api.letsencrypt.org/directory\nYou can specify your own server by providing its directory URL:\n\n```shell\nmyacme create account ak=my-account-key.pem acme=https://my.acme.com/directory\n```\n\nOr, you can use a predefined URL, one of:\n\n* le: Let's Encrypt directory, this is the default\n* le-staging: Let's Encrypt staging environment.\n\nExample:\n\n```shell\nmyacme create account ak=my-account-key.pem acme=le-staging\n```\n\nThe email is not necessary to create an account. However you can provide one or more:\n\n```shell\nmyacme create account ak=my-account-key.pem \\\n    email=john.doe@example.com email=sarah.connor@example.com\n```\n\nIf you run the above command for an existing account it will change contact emails.\n\n\n### Update account\n\nChange account key:\n\n```shell\nmyacme update account ak=my-account-key.pem new-ak=new-account-key.pem\n```\n\nSame here, new account key may already exist. If not, it will be generated.\n\n\n### Account deactivation\n\nIf you no longer need an account you can deactivate it:\n\n```shell\nmyacme deactivate account ak=my-account-key.pem\n```\n\n### Manually applying for certificate issuance\n\nIf you already have a CSR, you can get the certificate with a single command:\n\n```shell\nmyacme certificate ak=my-account-key.pem csr=my-csr.pem cert=my-cert.pem\n```\n\nYou'll have to prove you own your domain. This command will print instructions how to do that.\n\nIf you got a temporary error, such as network error or server error, you can run the above command repeatedly.\nThe state of appliance process is saved to a file <domain-name>.myacme.json in the current directory.\n\nIf you don't have a CSR but do have already generated private key (with `openssl` command, for example),\n`myacme` will automatically generate a CSR for the issuance process:\n\n```shell\nmyacme certificate ak=my-account-key.pem \\\n    dom=example.com dom=www.example.com \\\n    private-key=my-key.pem cert=my-cert.pem\n```\n\nThe CSR will be saved only in the state filename, you can extract it with\n`myacme get csr` command (see below).\n\nFinally, if you have neither CSR, nor private key, `myacme` will generate everything for you:\n\n```shell\nmyacme certificate ak=my-account-key.pem \\\n    dom=example.com dom=www.example.com \\\n    private-key=my-key.pem cert=my-cert.pem\n```\n\nYes, this is exactly the same command as above. This simply checks your\n`my-key.pem` and if it does not exist, the key will be automatically generated\nand written to that file.\n\n\n### Automated certificate management\n\nDirectory layout:\n\n```\n/etc/myacme/\n    config.yaml\n    account-key.pem\n    <domain>/\n        previous/\n        config.yaml            -- optional per-domain settings\n        <domain>.myacme.json\n        <domain>.cert.pem\n        <domain>.key.pem\n```\n\n`/etc/myacme` is somewhat arbitrary location, it could be any directory of your choice.\nMind file permissions and try to avoid running `myacme` as root.\n\nThe following command should be run daily:\n\n```shell\nmyacme manage dir=/etc/myacme\n```\n\nThis will check certificates and apply for re-issuance for expiring ones.\n\nHere's a sample config.yaml:\n\n```yaml\nacme: le  # optional ACME server directory URL\naccount_key: account-key.pem\n\nexpiring_days: 7  # optional: days before expiring to start renewal\n\nfilenames:  # optional, here are defaults:\n    certificate: '{domain}.cert.pem'\n    key:         '{domain}.key.pem'\n\ncert_domains:  # optional list of domains per certificate, {domain} is substituted\n               # with actual domain name; default is single domain name\n    - '{domain}'\n    - '*.{domain}'\n\ncsr_fields:  # optional additional fields for CSR\n    - 'Country Name': 'US'\n    - 'State or Province Name': 'California'\n\nauthz:  # domain ownership validation parameters\n        # substitutions:\n        # {domain}:          primary domain name, leading wildcard, if any, is stripped\n        # {idna_domain}:     primary domain name, in IDNA encoding; leading wildcard, if any, is stripped\n        # {subdomain}:       list of subdomains, see a note below\n        # {idna_subdomain}:  list subdomains in IDNA encoding, see a note below\n        # {token}:           domain validation token\n        # {key}:             domain validation key for http-01\n        # {key_digest}:      domain validation key digest for dns-01\n\n    dns-01:\n        setup:\n            - 'myacme-zonefile /etc/bind/primary/{subdomain[1]} add-acme-challenge {domain} {key_digest}'\n            - 'rndc reload {idna_subdomain[1]}'\n            - sleep 10\n        cleanup:\n            - 'myacme-zonefile /etc/bind/primary/{subdomain[1]} del-acme-challenge {domain} {key_digest}'\n            - 'rndc reload {idna_subdomain[1]}'\n\n    http-01:\n        setup:\n            - 'mkdir -p /var/www/{domain}/.well-known/acme-challenge'\n            - 'echo {key} >/var/www/{domain}/.well-known/acme-challenge/{token}'\n        cleanup:\n            - 'rm /var/www/{domain}/.well-known/acme-challenge/{token}'\n\ndeploy:  # optional deployment commands; possible substitutions: {domain}, {idna_domain},\n         # {directory}, and {filenames[...]}, e.g. filenames[certificate], filenames[key]\n    - 'chmod 600 {directory}/{filenames[certificate]}'\n    - 'chmod 600 {directory}/{filenames[key]}'\n    - 'cp {directory}/{filenames[certificate]} {directory}/{filenames[key]} /etc/nginx/certificates/'\n\nfinalize:  # commands to execute after some or all certificates are renewed\n    - 'nginx -s reload'\n```\n\n\n## MyACME library\n\nThe library provides the following basic classes:\n\n* `MyAcmeClient`: the main class provides account management and basic methods for ACME requests\n* `MyAcmeOrder`: this class implements certificate issuance state machine\n* `MyAcmeStateFS`: this class implements saving the state of certificate issuance to file system\n* `MyAcmeAuthzManual`: this implementation prints instructions for domain validation and waits for user input\n* `MyAcmeAuthzScript`: this class invokes scripts for domain validation according to provided configuration\n* `MyAcmeError`: the basic exception\n* `MyAcmeHttpError`: ACME HTTP exception\n\nHelper functions:\n\n* `get_certificate_validity_period`\n* `idna_decode`\n* `idna_encode`\n\nAlthough this library can generate private keys and CSRs, you can provide your own ones in PEM format.\n\n### How to use\n\nThe first step is to instantiate `MyAcmeClient` class with a directory URL:\n\n```python\nmy_acme = MyAcmeClient('https://acme-v02.api.letsencrypt.org/directory')\n```\n\nTo apply for certificates, you should have an account on the ACME server.\nThe account is identified by client's public key.\nThe account is identified ONLY by client's public key. Contact emails are optional.\n\nIf you have no account key yet, there's a method to generate it for you:\n\n```python\naccount_key = my_acme.generate_account_key()\n```\n\nThe `account_key` is a key pair, containing both public and private keys\nin PEM format, as bytes. You should permanently save the account key somewhere:\n\n```python\nwith open('my-account-key.pem', 'wb') as f:\n    f.write(account_key)\n```\n\nIf you aleady have an account key, you should provide it explicitly:\n\n```python\nwith open('my-account-key.pem', 'rb') as f:\n    my_acme.account_key = f.read()\n```\n\nor:\n\n```python\nwith open('my-account-key.pem', 'rb') as f:\n    my_account_key = f.read()\nmy_acme = MyAcmeClient('https://acme-v02.api.letsencrypt.org/directory', my_account_key)\n```\n\nOnce `account_key` is set, you can create an account on the ACME server, if it was not created yet:\n\n```python\nacme.create_account()\n```\n\nThis method can accept the list of contact URLs in the form \"mailto:admin@example.org\".\nBy default contacts is an empty list.\n\nIt's desirable to permanently save account URL, along with account key somewhere:\n\n```python\nsaved_account_url = my_acme.account_url\n```\n\nThis is because this URL is needed for subsequent requests and if not saved,\nthe client has to issue extra request to obtain it.\n\nThis URL should be restored after instantiation of `MyAcmeClient`:\n\n```python\nmy_acme.account_url = saved_account_url\n```\n\n\n### How to apply for certificate issuance\n\nCreate an authenticator:\n\n```python\nauthenticator = MyAcmeAuthzManual()\n```\n\nCreate state object:\n\n```python\nstate = MyAcmeStateFS('example.com', '~/.myacme-state')\n```\n\nApply for a certificate:\n\n```python\norder = acme.process_order('example.com', authenticator, state)\n```\n\nYou can provide your own private key:\n\n```python\norder = acme.process_order('example.com', authenticator, state, private_key=example_com_key)\n```\n\nAuto-generated CSR contains only COMMON_NAME field and optionally SAN extension.\nYou can provide more fields:\n\n```python\norder = acme.process_order('example.com', authenticator, state, csr_fields={\n    'Country Name': 'US',\n    'State or Province Name': 'California'\n})\n```\n\nField names are transformed to x509 names by converting them to upper case and replacing spaces\nwith underscores. Here are most used names, for the full list see `cryptography.x509.oid.NameOID`:\n\n```\nCOUNTRY_NAME             2-letter country code\nLOCALITY_NAME            e.g. city\nSTATE_OR_PROVINCE_NAME\nSTREET_ADDRESS\nORGANIZATION_NAME        e.g. company\nORGANIZATIONAL_UNIT_NAME e.g. section\nEMAIL_ADDRESS\n```\n\nAlternatively you can provide your own CSR. Private key is unnecessary because CSR is already signed:\n\n```python\norder = acme.process_order('example.com', authenticator, state, csr=example_com_csr)\n```\n\nFinally, you should save your certificate somewhere:\n\n```python\ncertificate = order.get_certificate()\nwith open('my-certificate.pem', 'wb') as f:\n    f.write(certificate)\n```\n\nIf you not provided private key, you should also save auto-generated one:\n\n```python\nprivate_key = order.get_private_key()\nwith open('private.key', 'wb') as f:\n    f.write(private_key)\n```\n\n### Internationalized domain names\n\nMyACME accepts and returns all domain names as strings so they may contain non-ASCII characters.\nDomain names are encoded and decoded as necessary.\n\n### The complete example\n\n```python\nmy_domain = 'example.com'\nwith open('my-account-key.pem', 'rb') as f:\n    my_account_key = f.read()\nmy_acme = MyAcmeClient('https://acme-v02.api.letsencrypt.org/directory', my_account_key)\nauthenticator = MyAcmeAuthzManual()\nstate = MyAcmeStateFS(my_domain, '~/.myacme-state')\norder = acme.process_order(my_domain, authenticator, state)\nif not order:\n    print('Cannot get certificate')  # XXX reason?\nelse:\n    certificate = order.get_certificate()\n    with open('my-certificate.pem', 'wb') as f:\n        f.write(certificate)\n    private_key = order.get_private_key()\n    with open('private.key', 'wb') as f:\n        f.write(private_key)\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://declassed.art/repository/myacme",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "myacme",
    "package_url": "https://pypi.org/project/myacme/",
    "platform": null,
    "project_url": "https://pypi.org/project/myacme/",
    "project_urls": {
      "Homepage": "https://declassed.art/repository/myacme"
    },
    "release_url": "https://pypi.org/project/myacme/0.1.1/",
    "requires_dist": [
      "atomicwrites",
      "cryptography (>=3.1)",
      "idna",
      "kvgargs",
      "pyyaml",
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "MyACME client library and command line tool",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16578434,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7830a310c86af6a058ede1babc965d736da07d5505435550995f5f756ba7268a",
          "md5": "c314cd31574b60a0c72aab4fd5cbc22e",
          "sha256": "5c6ed14950b44ecc014d865a3ce47e09af5b057ca591b3b1bf29a6eb2739736b"
        },
        "downloads": -1,
        "filename": "myacme-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c314cd31574b60a0c72aab4fd5cbc22e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23457,
        "upload_time": "2022-03-04T19:56:58",
        "upload_time_iso_8601": "2022-03-04T19:56:58.253390Z",
        "url": "https://files.pythonhosted.org/packages/78/30/a310c86af6a058ede1babc965d736da07d5505435550995f5f756ba7268a/myacme-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ae3df389666a9abb4917eeff02a4dad6244968efee0ecd43b0014d75d0f9861",
          "md5": "b60ec6eb1e88066b2a7ba2f45436a638",
          "sha256": "ba664f3daf16036b6c5dcc5e609dcea3d46f1959f141ce7a2fff8cd372ec838a"
        },
        "downloads": -1,
        "filename": "myacme-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b60ec6eb1e88066b2a7ba2f45436a638",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23829,
        "upload_time": "2022-03-04T19:57:00",
        "upload_time_iso_8601": "2022-03-04T19:57:00.059889Z",
        "url": "https://files.pythonhosted.org/packages/5a/e3/df389666a9abb4917eeff02a4dad6244968efee0ecd43b0014d75d0f9861/myacme-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc774c229ed60f893b2f5f566fb6cdc32a04fab9b18bc10c15236085aba224e1",
          "md5": "238be9aa9b6b1752b83536bd0402fb7b",
          "sha256": "ab5f45c8e11c85ec90664f79b1cabf9ddd4c43fcccb48cac8f4fdfa2046ed74b"
        },
        "downloads": -1,
        "filename": "myacme-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "238be9aa9b6b1752b83536bd0402fb7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23924,
        "upload_time": "2023-01-26T17:35:47",
        "upload_time_iso_8601": "2023-01-26T17:35:47.272136Z",
        "url": "https://files.pythonhosted.org/packages/dc/77/4c229ed60f893b2f5f566fb6cdc32a04fab9b18bc10c15236085aba224e1/myacme-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b21569da2d29370e815d71b765549ca217825f56191c487cdfbdd2c4510356a",
          "md5": "4228a733ac18486ffeb83e54b1379d91",
          "sha256": "0045fe5e9c5ed90c59834c085d11c5cc59903a668132b02c87076dd7683f9105"
        },
        "downloads": -1,
        "filename": "myacme-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4228a733ac18486ffeb83e54b1379d91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27294,
        "upload_time": "2023-01-26T17:35:49",
        "upload_time_iso_8601": "2023-01-26T17:35:49.511590Z",
        "url": "https://files.pythonhosted.org/packages/2b/21/569da2d29370e815d71b765549ca217825f56191c487cdfbdd2c4510356a/myacme-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc774c229ed60f893b2f5f566fb6cdc32a04fab9b18bc10c15236085aba224e1",
        "md5": "238be9aa9b6b1752b83536bd0402fb7b",
        "sha256": "ab5f45c8e11c85ec90664f79b1cabf9ddd4c43fcccb48cac8f4fdfa2046ed74b"
      },
      "downloads": -1,
      "filename": "myacme-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "238be9aa9b6b1752b83536bd0402fb7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23924,
      "upload_time": "2023-01-26T17:35:47",
      "upload_time_iso_8601": "2023-01-26T17:35:47.272136Z",
      "url": "https://files.pythonhosted.org/packages/dc/77/4c229ed60f893b2f5f566fb6cdc32a04fab9b18bc10c15236085aba224e1/myacme-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b21569da2d29370e815d71b765549ca217825f56191c487cdfbdd2c4510356a",
        "md5": "4228a733ac18486ffeb83e54b1379d91",
        "sha256": "0045fe5e9c5ed90c59834c085d11c5cc59903a668132b02c87076dd7683f9105"
      },
      "downloads": -1,
      "filename": "myacme-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4228a733ac18486ffeb83e54b1379d91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27294,
      "upload_time": "2023-01-26T17:35:49",
      "upload_time_iso_8601": "2023-01-26T17:35:49.511590Z",
      "url": "https://files.pythonhosted.org/packages/2b/21/569da2d29370e815d71b765549ca217825f56191c487cdfbdd2c4510356a/myacme-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}