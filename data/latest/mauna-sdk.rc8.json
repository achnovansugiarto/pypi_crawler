{
  "info": {
    "author": "Dmitry Paramonov",
    "author_email": "asmatic075@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Mauna SDK\n\n## Installation and usage\n\n### Build\n\n`poetry install`\n\n`poetry run codegen`\n\n`poetry build`\n\n### Install\n\n`pip install mauna_sdk`\n\n## API list\n\n### api.chitchat\n\nTakes an input and a list of history messages, determines if chitchat is started and generates the corresponding response\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.chitchat import chitchat\nfrom mauna_sdk.api.input.turn import Turn, Agent\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = chitchat.execute(\n    client, \n    input=\"This is the good weather today\", \n    history=[\n        Turn(agent=Agent.USER, said=\"Hello\"),\n        Turn(agent=Agent.BOT, said=\"Hi there\")\n    ]\n)\n# result == chitchat.chitchatData.ChitchatResponse(response='{\\'response\\': \"It\\'s been raining for a few days now.\"}')\n```\n\n### api.commonsenseReasoning\n\nPulls various relations out of the given text\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.commonsense_reasoning import commonsenseReasoning\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = commonsenseReasoning.execute(client, text=\"Hello\")\n# result == [\n#   commonsenseReasoning.commonsenseReasoningData.RelationResult(\n#     type='xAttr', \n#     result=[\n#       'determined', \n#       'curious', \n#       'brave', \n#       'confident', \n#       'capable', \n#       'smart', \n#       'dedicated', \n#       'thoughtful', \n#       'careless', \n#       'mean'\n#     ]\n#   ), \n#   commonsenseReasoning.commonsenseReasoningData.RelationResult(\n#     type='xEffect', \n#     result=[\n#       'gets yelled at', \n#       'personx sweats from nervousness', \n#       'gets called a liar', \n#       'personx is arrested', \n#       'gets arrested', \n#       'gets tired', \n#       'is praised', \n#       'personx sweats', \n#       'none', \n#       'personx is arrested for assault'\n#     ]\n#   ), \n#   commonsenseReasoning.commonsenseReasoningData.RelationResult(\n#     type='xIntent', \n#     result=[\n#       'to have fun', \n#       'to get something done', \n#       'to satisfy his hunger', \n#       'to show off skills', \n#       'to satisfy his cravings', \n#       'to do something', \n#       'to have a good time', \n#       'to show off', \n#       'none', \n#       'to be a part of something'\n#     ]\n#   ), \n#   commonsenseReasoning.commonsenseReasoningData.RelationResult(\n#     type='xWant', \n#     result=[\n#       'to take a break', \n#       'to be successful', \n#       'to do something else', \n#       'to go home', \n#       'to have fun', \n#       'to have a good time', \n#       'to show off', \n#       'to rest', \n#       'to show off their skills', \n#       'to show off their new purchase'\n#     ]\n#   )\n# ]\n```\n\n### api.conceptnetGrounding\n\nTakes a text and returns related texts, according to relation type(s).\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.conceptnet_grounding import conceptnetGrounding\nfrom mauna_sdk.api.enum.relations import Relations\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = conceptnetGrounding.execute(client, text=\"max with axe\", relations=[Relations.CapableOf])\n# result == [\n#   conceptnetGrounding.conceptnetGroundingData.RelationResult(\n#     type='CapableOf', \n#     result=[\n#       'chop down tree', \n#       'split wood', \n#       'chop wood', \n#       'cut wood', \n#       'break window', \n#       'chop firewood', \n#       'cut firewood', \n#       'cut lumber', \n#       'cut tree', \n#       'cut you in half'\n#     ]\n#   )\n# ]\n```\n\n### api.parseACE\n\nTakes an ACE text and an output format and produces the parsed ACE according to the format\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.parse_ace import parseACE\nfrom mauna_sdk.api.enum.a_c_e_output_type import ACEOutputType\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = parseACE.execute(client, text=\"John walks.\", format=ACEOutputType.drs)\n# result == parseACE.parseACEData.ACEResult(parsed=\"drs([A],[predicate(A,walk,named('John'))-1/2])\\n\")\n```\n\n### api.parseContext\n\nTakes a list of turns (`{ content: string }`) and parses them to produce a semantic frames-based context object.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.parse_context import parseContext\nfrom mauna_sdk.api.input.context_object import ContextObject\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = parseContext.execute(client, turns=[ContextObject(content=\"Today is a good day\")])\n# result == [\n#   parseContext.parseContextData.ContextResult(\n#     context=parseContext.parseContextData.ContextResult.SlingDocument(\n#       mentions=[\n#         parseContext.parseContextData.ContextResult.SlingDocument.SlingMention(\n#             evokes=['{=#1 :DATE}'], \n#             phrase='Today'\n#           ), \n#         parseContext.parseContextData.ContextResult.SlingDocument.SlingMention(\n#           evokes=['{=#1 :/pb/predicate /pb/ARG1: {=#2 :DATE} /pb/ARG2: {=#3 :thing}}'], phrase='is'\n#         ), \n#         parseContext.parseContextData.ContextResult.SlingDocument.SlingMention(\n#           evokes=['{=#1 :thing}'], phrase='day'\n#         )\n#       ]\n#     )\n#   )\n# ]\n```\n\n### api.paraphraseSentence\n\nTakes an english sentence and produces paraphrased versions of it that retain the semantic meaning of the original.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.paraphrase_sentence import paraphraseSentence\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = paraphraseSentence.execute(client, sentence=\"I like tomatoes\", count=2)\n# result == paraphraseSentence.paraphraseSentenceData.Paraphrase(\n#   paraphrases=[\n#     'I like tomatoes.', \n#     'I enjoy tomatoes.', \n#     'I like to eat tomatoes.', \n#     'I am a fan of tomatoes.', \n#     'I enjoy eating tomatoes.', \n#     'I like eating tomatoes.', \n#     'I love tomatoes.', \n#     'I like the taste of tomatoes.', \n#     'I like fresh tomatoes.', \n#     'I like to eat fruit.'\n#   ]\n#   )\n```\n\n### api.predictNextTurn\n\nTakes a list of utterances as history and a list of possible alternatives that can be replied with. Returns the most likely alternative and confidence in that prediction.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.predict_next_turn import predictNextTurn\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = predictNextTurn.execute(client, history=[\"Hello\", \"How are you?\"], alternatives=[\"I am fine\", \"Hello\"])\n# result == [\n#   predictNextTurn.predictNextTurnData.DialogAlternative(\n#     nextTurn='I am fine', \n#     confidence=0.6935682892799377\n#   ), \n#   predictNextTurn.predictNextTurnData.DialogAlternative(\n#     nextTurn='Hello', \n#     confidence=0.5061840415000916\n#   )\n# ]\n```\n\n### api.matchIntent\n\nTakes a list of intents (with slots) and a user input. Performs structured information extraction to find the correct intent and fill the corresponding slots.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.match_intent import matchIntent\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = matchIntent.execute(\n    client,\n    input=\"I require insurance\",\n    intent=[\n        \"Someone requires insurance\", \n        \"An ENTITYPERSON takes out insurance\"\n    ]\n)\n# result == matchIntent.matchIntentData.MatchIntentOutput(\n#   matches=[\n#     matchIntent.matchIntentData.MatchIntentOutput.PhraseMatch(\n#       intent='Someone requires insurance', \n#       confidence=1.0, \n#       slots=[\n#         matchIntent.matchIntentData.MatchIntentOutput.PhraseMatch.WordMatch(\n#           slot='require', \n#           value='require', \n#           match_type='direct', \n#           confidence=1.0\n#         ), \n#         matchIntent.matchIntentData.MatchIntentOutput.PhraseMatch.WordMatch(\n#           slot='insurance', \n#           value='insurance', \n#           match_type='direct', \n#           confidence=1.0)\n#       ]\n#     )\n#   ]\n# )\n```\n\n### api.measureSimilarity\n\nTakes a target sentence and a list of other sentences to compare with for similarity. Returns an array of pairwise similarity scores.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.measure_similarity import measureSimilarity\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = measureSimilarity.execute(\n    client, sentence=\"Today is a good day\", \n    compareWith=[\"Today is an awesome day\", \"Today is a bad day\"]\n)\n# result == measureSimilarity.measureSimilarityData.SentenceSimilarityScores(\n#   result=[\n#     measureSimilarity.measureSimilarityData.SentenceSimilarityScores.PairSimilarity(\n#       score=0.6445285081863403, \n#       sentencePair=['Today is a good day', 'Today is an awesome day']\n#     ), \n#     measureSimilarity.measureSimilarityData.SentenceSimilarityScores.PairSimilarity(\n#       score=0.3357277512550354, \n#       sentencePair=['Today is a good day', 'Today is a bad day']\n#     )\n#   ]\n# )\n```\n\n### api.resolveCoreferences\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.resolve_coreferences import resolveCoreferences\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = resolveCoreferences.execute(client, text=\"Emma said that she thinks that Nelson really likes to dance.\")\n# result == resolveCoreferences.resolveCoreferencesData.NlpDoc(\n#   coref=resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension(\n#     detected=True, \n#     resolvedOutput='Emma said that Emma thinks that Nelson really likes to dance.', \n#     clusters=[\n#       resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores(\n#         mention='Emma', \n#         references=[\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Emma', \n#             score=0.9530903100967407\n#           )\n#         ]\n#       ), \n#       resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores(\n#         mention='she', \n#         references=[\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she', \n#             score=0.2935597896575928\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Emma', \n#             score=8.278848648071289\n#           )\n#         ]\n#       ), \n#       resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores(\n#         mention='she thinks that Nelson really likes to dance', \n#         references=[\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she thinks that Nelson really likes to dance', \n#             score=1.7855921983718872\n#           ),\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Emma', \n#             score=-1.801807165145874\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she', \n#             score=-1.6977876424789429\n#           )\n#         ]\n#       ), \n#       resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores(\n#         mention='Nelson', \n#         references=[\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Nelson', \n#             score=0.4910166263580322\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Emma', \n#             score=-2.120563507080078\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she', \n#             score=-2.0476505756378174\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she thinks that Nelson really likes to dance', \n#             score=-1.5593587160110474\n#           )\n#         ]\n#       ), \n#       resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores(\n#         mention='Nelson really likes to dance', \n#         references=[\n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Nelson really likes to dance', \n#             score=1.6450811624526978\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Emma', \n#             score=-1.7996364831924438\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she', \n#             score=-2.02427339553833\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='she thinks that Nelson really likes to dance', \n#             score=-1.497442603111267\n#           ), \n#           resolveCoreferences.resolveCoreferencesData.NlpDoc.DocExtension.CorefScores.Scores(\n#             match='Nelson', \n#             score=-1.5290888547897339\n#           )\n#         ]\n#       )\n#     ]\n#   )\n# )\n```\n\n### api.toVec\n\nTakes an English text as an input and returns vector representation for passage, its sentences and entities if found.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.to_vec import toVec\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = toVec.execute(client, text=\"John likes to play piano\")\n# result == toVec.toVecData.NlpDoc(\n#   has_vector=True, \n#   vector=[\n#     0.08898600190877914, \n#     ...\n#   ], \n#   vector_norm=3.998985419599661, \n#   sentences=[\n#     toVec.toVecData.NlpDoc.Span(\n#       has_vector=True, \n#       vector_norm=3.9989852905273438, \n#       vector=[\n#         0.08898600190877914, \n#         ...\n#       ], \n#       text='John likes to play piano'\n#     )\n#   ], \n#   entities=[\n#     toVec.toVecData.NlpDoc.Span(\n#       has_vector=True, \n#       vector_norm=6.533577919006348, \n#       vector=[\n#         -0.29218998551368713, \n#         ...\n#       ], \n#       text='John'\n#     )\n#   ]\n# )\n```\n\n### api.getSentiment\n\nTakes plain English input and returns overall and sentence-level sentiment information. Represents positivity or negativity of the passage as a floating point value.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.get_sentiment import getSentiment\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = getSentiment.execute(client, text=\"The movie is awesome\")\n# result == getSentiment.getSentimentData.NlpDoc(\n#   sentiment=0.9467527270317078, \n#   sentences=[\n#     getSentiment.getSentimentData.NlpDoc.Span(\n#       text='The movie is awesome', \n#       sentiment=0.0\n#     )\n#   ]\n# )\n```\n\n### api.parseText\n\nTakes some plain English input and returns parsed categories, entities and sentences.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.parse_text import parseText\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = parseText.execute(client, text=\"Today is a good day\")\n# result == parseText.parseTextData.NlpDoc(\n#   categories=[], \n#   entities=[\n#     parseText.parseTextData.NlpDoc.Span(\n#       label='DATE', \n#       lemma='today', \n#       text='Today'\n#     ), \n#     parseText.parseTextData.NlpDoc.Span(\n#       label='DATE', \n#       lemma='a good day', \n#       text='a good day'\n#     )\n#   ], \n#   sentences=[\n#     parseText.parseTextData.NlpDoc.Span(\n#       label='', \n#       lemma='today be a good day', \n#       text='Today is a good day'\n#     )\n#   ]\n# )\n```\n\n### api.extractNumericData\n\nTakes some text and extracts numeric references as a list of tokens with numeric annotations.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.extract_numeric_data import extractNumericData\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = extractNumericData.execute(client, text=\"I told you two\")\n# result == extractNumericData.extractNumericDataData.NlpDoc(\n#   tokens=[\n#     extractNumericData.extractNumericDataData.NlpDoc.Token(\n#       numeric_analysis=extractNumericData.extractNumericDataData.NlpDoc.Token.TokenExtension(\n#         data=None, \n#         has_numeric=False\n#       )\n#     ), \n#     extractNumericData.extractNumericDataData.NlpDoc.Token(\n#       numeric_analysis=extractNumericData.extractNumericDataData.NlpDoc.Token.TokenExtension(\n#         data=None, \n#         has_numeric=False\n#       )\n#     ), \n#     extractNumericData.extractNumericDataData.NlpDoc.Token(\n#       numeric_analysis=extractNumericData.extractNumericDataData.NlpDoc.Token.TokenExtension(\n#         data=None, \n#         has_numeric=False\n#       )\n#     ), \n#     extractNumericData.extractNumericDataData.NlpDoc.Token(\n#       numeric_analysis=extractNumericData.extractNumericDataData.NlpDoc.Token.TokenExtension(\n#         data='PEOPLE', \n#         has_numeric=True\n#       )\n#     )\n#   ]\n# )\n```\n\n### api.parseTextTokens\n\nTakes some plain English string as input and returns a list of its tokens annotated with linguistic information.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.parse_text_tokens import parseTextTokens\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = parseTextTokens.execute(client, text=\"Hello there\")\n# result == parseTextTokens.parseTextTokensData.NlpDoc(\n#   tokens=[\n#     parseTextTokens.parseTextTokensData.NlpDoc.Token(\n#       dependency='ROOT', \n#       entity_type='', \n#       is_alpha=True, \n#       is_currency=False, \n#       is_digit=False, is_oov=False, \n#       is_sent_start=True, \n#       is_stop=False, \n#       is_title=True, \n#       lemma='hello', \n#       like_email=False, \n#       like_num=False, \n#       like_url=False, \n#       part_of_speech='INTJ', \n#       prob=-10.583807945251465, \n#       tag='UH', \n#       text='Hello'\n#     ), \n#     parseTextTokens.parseTextTokensData.NlpDoc.Token(\n#       dependency='advmod', \n#       entity_type='', \n#       is_alpha=True, \n#       is_currency=False, \n#       is_digit=False, \n#       is_oov=False, \n#       is_sent_start=None, \n#       is_stop=True, \n#       is_title=False, \n#       lemma='there', \n#       like_email=False, \n#       like_num=False, \n#       like_url=False, \n#       part_of_speech='ADV', \n#       prob=-6.135282039642334, \n#       tag='RB', \n#       text='there'\n#     )\n#   ]\n# )\n```\n\n### api.renderCSS\n\nTakes ssml and corresponding styles as a css string. Returns base64 encoded audio.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.render_css import renderCSS\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = renderCSS.execute(client, ssml=\"<s class='test'>Hello</s>\", css=\".test {volume: 120%;}\")\n# result == renderCSS.renderCSSData.ComposeResult(\n#   result={'$result': {'callTextToSpeech': {'audioB64': 'UklGRoDyAgBXQVZFZm ... '}}, '$context': {}}\n# )\n```\n\n### api.speechToText\n\nTakes base64 encoded audio as input and returns a list of possible transcripts (sorted in order of decreasing confidence).\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.speech_to_text import speechToText\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = speechToText.execute(client, audio=\"AAAA ...\")\n# result == speechToText.speechToTextData.STTResult(\n#   transcript=[\n#     speechToText.speechToTextData.STTResult.TextAlternative(text=\"Hello.\")\n#   ]\n# )\n```\n\n### api.textToSpeech\n\nTakes text (`string`) as input and returns audio encoded as a base64 string.\n\n```python\nfrom mauna_sdk import Mauna\nfrom mauna_sdk.api.text_to_speech import textToSpeech\n\n\ndeveloper_id = <int> # Check your profile on the dashboard for this.\napi_key = \"<64 letter api key available on your mauna dashboard>\"\nclient = Mauna(api_key, developer_id)\nresult = textToSpeech.execute(client, text=\"Hello\")\n# result == textToSpeech.textToSpeechData.TTSResult(audio='UklGRpJb ...')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mauna-sdk",
    "package_url": "https://pypi.org/project/mauna-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/mauna-sdk/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mauna-sdk/0.2.21/",
    "requires_dist": [
      "requests (>=2.25.1,<3.0.0)",
      "cryptography (>=3.4.6,<4.0.0)",
      "gql[all] (==3.0.0a5)",
      "py-gql-client (>=1.0.1,<2.0.0)",
      "dataclasses (>=0.6,<0.7); python_version >= \"3.6\" and python_version < \"3.7\""
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Mauna SDK",
    "version": "0.2.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10092684,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f37b4778688a747f5cbbbc0c32502c8cbaa770df2df9cd91b402c9d6b9b867ea",
          "md5": "1ead25b0c0091673845a016e78493cd6",
          "sha256": "2f9bdadb0a70cd04580a718e33da4d34f6f3d12d52bfc7fb9712fe4768d619d6"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ead25b0c0091673845a016e78493cd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 25964,
        "upload_time": "2021-03-25T16:03:41",
        "upload_time_iso_8601": "2021-03-25T16:03:41.618605Z",
        "url": "https://files.pythonhosted.org/packages/f3/7b/4778688a747f5cbbbc0c32502c8cbaa770df2df9cd91b402c9d6b9b867ea/mauna_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c00c581a2f5955a6370effce4801f54f57fce70fd180a400423fbab9b7d49f0",
          "md5": "2d67bf395a6a7cf484d73b24ae2f245b",
          "sha256": "7deb34fbdac631b2655e4e603b308c37572b7c7a200204bef5d86fa4d13b1c74"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d67bf395a6a7cf484d73b24ae2f245b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 21844,
        "upload_time": "2021-03-25T16:03:42",
        "upload_time_iso_8601": "2021-03-25T16:03:42.988163Z",
        "url": "https://files.pythonhosted.org/packages/4c/00/c581a2f5955a6370effce4801f54f57fce70fd180a400423fbab9b7d49f0/mauna_sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "480b4ddc93bf69d99dc8ee1a0ea064cbfa5bbef8a9fb7ba616fb817a6f48cb71",
          "md5": "487f421b5e1c9aeb536331bf650d2461",
          "sha256": "06cf478be64b8045353ef8c7a776d3d9b0768ea1be782d435e2f87bf3516086a"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "487f421b5e1c9aeb536331bf650d2461",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 49422,
        "upload_time": "2021-03-26T13:00:21",
        "upload_time_iso_8601": "2021-03-26T13:00:21.243645Z",
        "url": "https://files.pythonhosted.org/packages/48/0b/4ddc93bf69d99dc8ee1a0ea064cbfa5bbef8a9fb7ba616fb817a6f48cb71/mauna_sdk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c08ed0d2f6a2ab2f25c3ffce9d0dced2d919bdc6b74e09e4ba02a7a16a5eb18",
          "md5": "9e6b7a5b2695e50d8ee5e1b8fb5a58cb",
          "sha256": "dd6c13b2b2a35ac0a81bb1ec224728f97e23476b5b122fc07bf832306c986ad3"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e6b7a5b2695e50d8ee5e1b8fb5a58cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 30076,
        "upload_time": "2021-03-26T13:00:22",
        "upload_time_iso_8601": "2021-03-26T13:00:22.442524Z",
        "url": "https://files.pythonhosted.org/packages/7c/08/ed0d2f6a2ab2f25c3ffce9d0dced2d919bdc6b74e09e4ba02a7a16a5eb18/mauna_sdk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d62d79b43b941b673223f5d3a9699c385cb90ddd37a0ae9efeb670815a0e43c",
          "md5": "bcabbc4db495be2282d8a92ed1ce86d3",
          "sha256": "2232cc0050d13df8a43caae199d32e842d5107b8e0b2157f65124987767e6979"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcabbc4db495be2282d8a92ed1ce86d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 49581,
        "upload_time": "2021-03-30T13:12:17",
        "upload_time_iso_8601": "2021-03-30T13:12:17.821466Z",
        "url": "https://files.pythonhosted.org/packages/0d/62/d79b43b941b673223f5d3a9699c385cb90ddd37a0ae9efeb670815a0e43c/mauna_sdk-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6ebe77ae397c4bd22c24a9f945bef70d9d7063b758019534a29adf70eeec021",
          "md5": "7d5d541246b72f1399d7e8b63d6f19cf",
          "sha256": "15dd4a69239a336d5c274a9b2ffebd649ab72101b80fe768fd5a0dd8a7e78159"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d5d541246b72f1399d7e8b63d6f19cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 30810,
        "upload_time": "2021-03-30T13:12:19",
        "upload_time_iso_8601": "2021-03-30T13:12:19.752049Z",
        "url": "https://files.pythonhosted.org/packages/c6/eb/e77ae397c4bd22c24a9f945bef70d9d7063b758019534a29adf70eeec021/mauna_sdk-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c708a063d8d134e3aa0b12f1fbb70c612e4dae64388f48bfba16e099e8dfb20e",
          "md5": "1981f1906bbab4b1ddf9c033f6d51286",
          "sha256": "754410e88dc1e5149caadf100d901a2c6ae5c522bca267c1128e2aa369ecb29e"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1981f1906bbab4b1ddf9c033f6d51286",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 60177,
        "upload_time": "2021-04-06T07:23:32",
        "upload_time_iso_8601": "2021-04-06T07:23:32.956992Z",
        "url": "https://files.pythonhosted.org/packages/c7/08/a063d8d134e3aa0b12f1fbb70c612e4dae64388f48bfba16e099e8dfb20e/mauna_sdk-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93d580ab4f02d792acda71bc8a4eed112c1a4c4663323d7d61131f67c1728bd8",
          "md5": "d474c67665bd4b26387dc3321a4f8302",
          "sha256": "474913fc6676b8e806f70e5705cfd2c460e8f9eeb75e9e1b102a4d106f4a0750"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d474c67665bd4b26387dc3321a4f8302",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41028,
        "upload_time": "2021-04-06T07:23:35",
        "upload_time_iso_8601": "2021-04-06T07:23:35.145785Z",
        "url": "https://files.pythonhosted.org/packages/93/d5/80ab4f02d792acda71bc8a4eed112c1a4c4663323d7d61131f67c1728bd8/mauna_sdk-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77249389b39ca86fc55005700880e9f88868ba154ef596ad7910060c1fd48376",
          "md5": "77da2eb04bbac00b281f0643c7498a88",
          "sha256": "196466d01d250835edd23bc24651545ccc8b62fbe47023a3339759687ec5f80a"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77da2eb04bbac00b281f0643c7498a88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 53828,
        "upload_time": "2021-04-15T11:07:15",
        "upload_time_iso_8601": "2021-04-15T11:07:15.587810Z",
        "url": "https://files.pythonhosted.org/packages/77/24/9389b39ca86fc55005700880e9f88868ba154ef596ad7910060c1fd48376/mauna_sdk-0.2.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d55226f32759591dbe4594267be35c09064a628260a9c129202bfde130412a6a",
          "md5": "35fd66439ace1b24e7479ea7dec2e1ac",
          "sha256": "1e40d4aa879616bb5d9ed45d656d170dccc558ef618c2ba763aa2922a8847cea"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.18.tar.gz",
        "has_sig": false,
        "md5_digest": "35fd66439ace1b24e7479ea7dec2e1ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41845,
        "upload_time": "2021-04-15T11:07:17",
        "upload_time_iso_8601": "2021-04-15T11:07:17.049038Z",
        "url": "https://files.pythonhosted.org/packages/d5/52/26f32759591dbe4594267be35c09064a628260a9c129202bfde130412a6a/mauna_sdk-0.2.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c75da6ba96232cdcfa59aacb763607f90d66b52de734af9fef68674da26f45a6",
          "md5": "1ab1ec197cec92b65f3259b7e76e1c2a",
          "sha256": "d9c19572849deb4b945e24e8fcb8982197ec839cbf3782948da7bf94718dadb8"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ab1ec197cec92b65f3259b7e76e1c2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 58655,
        "upload_time": "2021-04-17T12:44:10",
        "upload_time_iso_8601": "2021-04-17T12:44:10.651072Z",
        "url": "https://files.pythonhosted.org/packages/c7/5d/a6ba96232cdcfa59aacb763607f90d66b52de734af9fef68674da26f45a6/mauna_sdk-0.2.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da50f72161a5a4b5c4d9342848937c73eec3599b534e54b07498dac0a1a63443",
          "md5": "39c3bbb9fd725476cd30cfaf3489cee1",
          "sha256": "807fd857eb3c4d5299e076b9a3a7211c55b3e7f9a40780bcb2836da7242b2a86"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.19.tar.gz",
        "has_sig": false,
        "md5_digest": "39c3bbb9fd725476cd30cfaf3489cee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 44266,
        "upload_time": "2021-04-17T12:44:12",
        "upload_time_iso_8601": "2021-04-17T12:44:12.277442Z",
        "url": "https://files.pythonhosted.org/packages/da/50/f72161a5a4b5c4d9342848937c73eec3599b534e54b07498dac0a1a63443/mauna_sdk-0.2.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1981bcdf2a804619aa60cd3d6287a35c6c0c2b20222e9aa0a10f6f475f697669",
          "md5": "03d08ae99a2b527bc8900b7c80a7d832",
          "sha256": "f7141451c87c32f4bfc095918c3746711fc7ff0fb25d52c854971091247e69fc"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03d08ae99a2b527bc8900b7c80a7d832",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 59334,
        "upload_time": "2021-04-17T12:52:17",
        "upload_time_iso_8601": "2021-04-17T12:52:17.726008Z",
        "url": "https://files.pythonhosted.org/packages/19/81/bcdf2a804619aa60cd3d6287a35c6c0c2b20222e9aa0a10f6f475f697669/mauna_sdk-0.2.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a1dbff68475a8c0c2102111979116e45d590988ed11e637a2644ef78d33896",
          "md5": "36d451d65a544b5b66ce8eeb5d52c919",
          "sha256": "c097f32359e27c2e9c75aef41587e632fc4a2b85af9e17832aad3e112848ec31"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.20.tar.gz",
        "has_sig": false,
        "md5_digest": "36d451d65a544b5b66ce8eeb5d52c919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 44478,
        "upload_time": "2021-04-17T12:52:19",
        "upload_time_iso_8601": "2021-04-17T12:52:19.337604Z",
        "url": "https://files.pythonhosted.org/packages/d4/a1/dbff68475a8c0c2102111979116e45d590988ed11e637a2644ef78d33896/mauna_sdk-0.2.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "353b99f3d7459f8df7e993216588a3340ef8676789db110f3f8c1b9a70bd3a52",
          "md5": "b2f61615258a0ef0caff4ec7b9b08f08",
          "sha256": "11d0bb99a0af36dd52c01d58098ab942e5c49320b34e800d8a75e36e4ce36c91"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2f61615258a0ef0caff4ec7b9b08f08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 61040,
        "upload_time": "2021-04-17T12:54:21",
        "upload_time_iso_8601": "2021-04-17T12:54:21.442989Z",
        "url": "https://files.pythonhosted.org/packages/35/3b/99f3d7459f8df7e993216588a3340ef8676789db110f3f8c1b9a70bd3a52/mauna_sdk-0.2.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4526aebb9cb4a06deb156e594240ab6d91350f647694397f2d75bae49eaabc9a",
          "md5": "544a52f9bb55d6afd4234c29deb01db1",
          "sha256": "88033839c1decfd9248efe3b3caf4784cc17b9b48760bbf7ce02652410656bec"
        },
        "downloads": -1,
        "filename": "mauna_sdk-0.2.21.tar.gz",
        "has_sig": false,
        "md5_digest": "544a52f9bb55d6afd4234c29deb01db1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 44702,
        "upload_time": "2021-04-17T12:54:22",
        "upload_time_iso_8601": "2021-04-17T12:54:22.998652Z",
        "url": "https://files.pythonhosted.org/packages/45/26/aebb9cb4a06deb156e594240ab6d91350f647694397f2d75bae49eaabc9a/mauna_sdk-0.2.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "353b99f3d7459f8df7e993216588a3340ef8676789db110f3f8c1b9a70bd3a52",
        "md5": "b2f61615258a0ef0caff4ec7b9b08f08",
        "sha256": "11d0bb99a0af36dd52c01d58098ab942e5c49320b34e800d8a75e36e4ce36c91"
      },
      "downloads": -1,
      "filename": "mauna_sdk-0.2.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2f61615258a0ef0caff4ec7b9b08f08",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 61040,
      "upload_time": "2021-04-17T12:54:21",
      "upload_time_iso_8601": "2021-04-17T12:54:21.442989Z",
      "url": "https://files.pythonhosted.org/packages/35/3b/99f3d7459f8df7e993216588a3340ef8676789db110f3f8c1b9a70bd3a52/mauna_sdk-0.2.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4526aebb9cb4a06deb156e594240ab6d91350f647694397f2d75bae49eaabc9a",
        "md5": "544a52f9bb55d6afd4234c29deb01db1",
        "sha256": "88033839c1decfd9248efe3b3caf4784cc17b9b48760bbf7ce02652410656bec"
      },
      "downloads": -1,
      "filename": "mauna_sdk-0.2.21.tar.gz",
      "has_sig": false,
      "md5_digest": "544a52f9bb55d6afd4234c29deb01db1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 44702,
      "upload_time": "2021-04-17T12:54:22",
      "upload_time_iso_8601": "2021-04-17T12:54:22.998652Z",
      "url": "https://files.pythonhosted.org/packages/45/26/aebb9cb4a06deb156e594240ab6d91350f647694397f2d75bae49eaabc9a/mauna_sdk-0.2.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}