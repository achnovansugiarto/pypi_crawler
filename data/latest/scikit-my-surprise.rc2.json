{
  "info": {
    "author": "Nicolas Hug, William La Cava",
    "author_email": "contact@nicolas-hug.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "**MySurprise** is simply @nicolashug 's [Surprise](http://surpriselib.com) with an online version of the SVD algorithm, as well as a few changes to data types to allow for floating-point rankings in some algorithms. \nThis separate distribution is just to ease our interface with [PennAI](http://github.com/EpistasisLab/pennai). \nYou probably want to just use Surprise. \n\n[![GitHub version](https://badge.fury.io/gh/nicolashug%2FSurprise.svg)](https://badge.fury.io/gh/nicolashug%2FSurprise)\n[![Documentation Status](https://readthedocs.org/projects/surprise/badge/?version=stable)](http://surprise.readthedocs.io/en/stable/?badge=stable)\n[![Build Status](https://travis-ci.org/NicolasHug/Surprise.svg?branch=master)](https://travis-ci.org/NicolasHug/Surprise)\n[![python versions](https://img.shields.io/badge/python-2.7%2C%203.5%2C%203.6-blue.svg)](http://surpriselib.com)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![DOI](https://joss.theoj.org/papers/10.21105/joss.02174/status.svg)](https://doi.org/10.21105/joss.02174)\n\n[![logo](logo_black.svg)](http://surpriselib.com)\n\nOverview\n--------\n\n[Surprise](http://surpriselib.com) is a Python\n[scikit](https://www.scipy.org/scikits.html) for building and analyzing\nrecommender systems that deal with explicit rating data.\n\n[Surprise](http://surpriselib.com) **was designed with the\nfollowing purposes in mind**:\n\n- Give users perfect control over their experiments. To this end, a strong\n  emphasis is laid on\n  [documentation](http://surprise.readthedocs.io/en/stable/index.html), which we\n  have tried to make as clear and precise as possible by pointing out every\n  detail of the algorithms.\n- Alleviate the pain of [Dataset\n  handling](http://surprise.readthedocs.io/en/stable/getting_started.html#load-a-custom-dataset).\n  Users can use both *built-in* datasets\n  ([Movielens](http://grouplens.org/datasets/movielens/),\n  [Jester](http://eigentaste.berkeley.edu/dataset/)), and their own *custom*\n  datasets.\n- Provide various ready-to-use [prediction\n  algorithms](http://surprise.readthedocs.io/en/stable/prediction_algorithms_package.html)\n  such as [baseline\n  algorithms](http://surprise.readthedocs.io/en/stable/basic_algorithms.html),\n  [neighborhood\n  methods](http://surprise.readthedocs.io/en/stable/knn_inspired.html), matrix\n  factorization-based (\n  [SVD](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD),\n  [PMF](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#unbiased-note),\n  [SVD++](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVDpp),\n  [NMF](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.NMF)),\n  and [many\n  others](http://surprise.readthedocs.io/en/stable/prediction_algorithms_package.html).\n  Also, various [similarity\n  measures](http://surprise.readthedocs.io/en/stable/similarities.html)\n  (cosine, MSD, pearson...) are built-in.\n- Make it easy to implement [new algorithm\n  ideas](http://surprise.readthedocs.io/en/stable/building_custom_algo.html).\n- Provide tools to [evaluate](http://surprise.readthedocs.io/en/stable/model_selection.html),\n  [analyse](http://nbviewer.jupyter.org/github/NicolasHug/Surprise/tree/master/examples/notebooks/KNNBasic_analysis.ipynb/)\n  and\n  [compare](http://nbviewer.jupyter.org/github/NicolasHug/Surprise/blob/master/examples/notebooks/Compare.ipynb)\n  the algorithms' performance. Cross-validation procedures can be run very\n  easily using powerful CV iterators (inspired by\n  [scikit-learn](http://scikit-learn.org/) excellent tools), as well as\n  [exhaustive search over a set of\n  parameters](http://surprise.readthedocs.io/en/stable/getting_started.html#tune-algorithm-parameters-with-gridsearchcv).\n\n\nThe name *SurPRISE* (roughly :) ) stands for *Simple Python RecommendatIon\nSystem Engine*.\n\nPlease note that surprise does not support implicit ratings or content-based\ninformation.\n\n\nGetting started, example\n------------------------\n\nHere is a simple example showing how you can (down)load a dataset, split it for\n5-fold cross-validation, and compute the MAE and RMSE of the\n[SVD](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD)\nalgorithm.\n\n\n```python\nfrom surprise import SVD\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate\n\n# Load the movielens-100k dataset (download it if needed).\ndata = Dataset.load_builtin('ml-100k')\n\n# Use the famous SVD algorithm.\nalgo = SVD()\n\n# Run 5-fold cross-validation and print results.\ncross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)\n```\n\n**Output**:\n\n```\nEvaluating RMSE, MAE of algorithm SVD on 5 split(s).\n\n            Fold 1  Fold 2  Fold 3  Fold 4  Fold 5  Mean    Std\nRMSE        0.9311  0.9370  0.9320  0.9317  0.9391  0.9342  0.0032\nMAE         0.7350  0.7375  0.7341  0.7342  0.7375  0.7357  0.0015\nFit time    6.53    7.11    7.23    7.15    3.99    6.40    1.23\nTest time   0.26    0.26    0.25    0.15    0.13    0.21    0.06\n```\n\n[Surprise](http://surpriselib.com) can do **much** more (e.g,\n[GridSearchCV](http://surprise.readthedocs.io/en/stable/getting_started.html#tune-algorithm-parameters-with-gridsearchcv))!\nYou'll find [more usage\nexamples](http://surprise.readthedocs.io/en/stable/getting_started.html) in the\n[documentation ](http://surprise.readthedocs.io/en/stable/index.html).\n\n\nBenchmarks\n----------\n\nHere are the average RMSE, MAE and total execution time of various algorithms\n(with their default parameters) on a 5-fold cross-validation procedure. The\ndatasets are the [Movielens](http://grouplens.org/datasets/movielens/) 100k and\n1M datasets. The folds are the same for all the algorithms. All experiments are\nrun on a notebook with Intel Core i5 7th gen (2.5 GHz) and 8Go RAM.  The code\nfor generating these tables can be found in the [benchmark\nexample](https://github.com/NicolasHug/Surprise/tree/master/examples/benchmark.py).\n\n| [Movielens 100k](http://grouplens.org/datasets/movielens/100k)                                                                         |   RMSE |   MAE | Time    |\n|:---------------------------------------------------------------------------------------------------------------------------------------|-------:|------:|:--------|\n| [SVD](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD)      |  0.934 | 0.737 | 0:00:11 |\n| [SVD++](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVDpp)  |  0.92  | 0.722 | 0:09:03 |\n| [NMF](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.NMF)      |  0.963 | 0.758 | 0:00:15 |\n| [Slope One](http://surprise.readthedocs.io/en/stable/slope_one.html#surprise.prediction_algorithms.slope_one.SlopeOne)                 |  0.946 | 0.743 | 0:00:08 |\n| [k-NN](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBasic)                        |  0.98  | 0.774 | 0:00:10 |\n| [Centered k-NN](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNWithMeans)           |  0.951 | 0.749 | 0:00:10 |\n| [k-NN Baseline](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBaseline)            |  0.931 | 0.733 | 0:00:12 |\n| [Co-Clustering](http://surprise.readthedocs.io/en/stable/co_clustering.html#surprise.prediction_algorithms.co_clustering.CoClustering) |  0.963 | 0.753 | 0:00:03 |\n| [Baseline](http://surprise.readthedocs.io/en/stable/basic_algorithms.html#surprise.prediction_algorithms.baseline_only.BaselineOnly)   |  0.944 | 0.748 | 0:00:01 |\n| [Random](http://surprise.readthedocs.io/en/stable/basic_algorithms.html#surprise.prediction_algorithms.random_pred.NormalPredictor)    |  1.514 | 1.215 | 0:00:01 |\n\n\n| [Movielens 1M](http://grouplens.org/datasets/movielens/1m)                                                                             |   RMSE |   MAE | Time    |\n|:---------------------------------------------------------------------------------------------------------------------------------------|-------:|------:|:--------|\n| [SVD](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVD)      |  0.873 | 0.686 | 0:02:13 |\n| [SVD++](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.SVDpp)  |  0.862 | 0.673 | 2:54:19 |\n| [NMF](http://surprise.readthedocs.io/en/stable/matrix_factorization.html#surprise.prediction_algorithms.matrix_factorization.NMF)      |  0.916 | 0.724 | 0:02:31 |\n| [Slope One](http://surprise.readthedocs.io/en/stable/slope_one.html#surprise.prediction_algorithms.slope_one.SlopeOne)                 |  0.907 | 0.715 | 0:02:31 |\n| [k-NN](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBasic)                        |  0.923 | 0.727 | 0:05:27 |\n| [Centered k-NN](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNWithMeans)           |  0.929 | 0.738 | 0:05:43 |\n| [k-NN Baseline](http://surprise.readthedocs.io/en/stable/knn_inspired.html#surprise.prediction_algorithms.knns.KNNBaseline)            |  0.895 | 0.706 | 0:05:55 |\n| [Co-Clustering](http://surprise.readthedocs.io/en/stable/co_clustering.html#surprise.prediction_algorithms.co_clustering.CoClustering) |  0.915 | 0.717 | 0:00:31 |\n| [Baseline](http://surprise.readthedocs.io/en/stable/basic_algorithms.html#surprise.prediction_algorithms.baseline_only.BaselineOnly)   |  0.909 | 0.719 | 0:00:19 |\n| [Random](http://surprise.readthedocs.io/en/stable/basic_algorithms.html#surprise.prediction_algorithms.random_pred.NormalPredictor)    |  1.504 | 1.206 | 0:00:19 |\n\n\nInstallation\n------------\n\nWith pip (you'll need [numpy](http://www.numpy.org/), and a C compiler. Windows\nusers might prefer using conda):\n\n    $ pip install numpy\n    $ pip install scikit-surprise\n\nWith conda:\n\n    $ conda install -c conda-forge scikit-surprise\n\nFor the latest version, you can also clone the repo and build the source\n(you'll first need [Cython](http://cython.org/) and\n[numpy](http://www.numpy.org/)):\n\n    $ pip install numpy cython\n    $ git clone https://github.com/NicolasHug/surprise.git\n    $ cd surprise\n    $ python setup.py install\n\nLicense and reference\n---------------------\n\nThis project is licensed under the [BSD\n3-Clause](https://opensource.org/licenses/BSD-3-Clause) license, so it can be\nused for pretty much everything, including commercial applications. Please let\nus know how [Surprise](http://surpriselib.com) is useful to you!\n\nPlease make sure to cite the\n[paper](https://joss.theoj.org/papers/10.21105/joss.02174) if you use\nSurprise for your research:\n\n    @article{Hug2020,\n      doi = {10.21105/joss.02174},\n      url = {https://doi.org/10.21105/joss.02174},\n      year = {2020},\n      publisher = {The Open Journal},\n      volume = {5},\n      number = {52},\n      pages = {2174},\n      author = {Nicolas Hug},\n      title = {Surprise: A Python library for recommender systems},\n      journal = {Journal of Open Source Software}\n    }\n\nContributors\n------------\n\nThe following persons have contributed to [Surprise](http://surpriselib.com):\n\nashtou, bobbyinfj, caoyi, Олег Демиденко, Charles-Emmanuel Dias, dmamylin,\nLauriane Ducasse, Marc Feger, franckjay, Lukas Galke, Tim Gates,\nPierre-François Gimenez, Zachary Glassman, Jeff Hale, Nicolas Hug, Janniks,\njyesawtellrickson, Doruk Kilitcioglu, Ravi Raju Krishna, Hengji Liu, Maher\nMalaeb, Manoj K, James McNeilis, Naturale0, nju-luke, Jay Qi, Lucas Rebscher,\nSkywhat, David Stevens, TrWestdoor, Victor Wang, Mike Lee Williams, Jay Wong,\nChenchen Xu, YaoZh1918.\n\nThanks a lot :) !\n\nDevelopment Status\n------------------\n\nStarting from version 1.1.0 (September 19), we will only maintain the\npackage and provide bugfixes. No new features will be considered.\n\nFor bugs, issues or questions about [Surprise](http://surpriselib.com),\nplease use the GitHub [project page](https://github.com/NicolasHug/Surprise).\nPlease don't send emails (we will not answer).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://surpriselib.com",
    "keywords": "recommender recommendation system",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scikit-my-surprise",
    "package_url": "https://pypi.org/project/scikit-my-surprise/",
    "platform": "",
    "project_url": "https://pypi.org/project/scikit-my-surprise/",
    "project_urls": {
      "Homepage": "http://surpriselib.com"
    },
    "release_url": "https://pypi.org/project/scikit-my-surprise/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An easy-to-use library for recommender systems.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9331624,
  "releases": {
    "1.0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d49365ad6587c1c02076d57bfaf4b933988650f9721cd66b09730d62f1d3d485",
          "md5": "1587db7134d79ef0a653f9f918feac37",
          "sha256": "a2536ee36a1d613e98974ad8566aa217240a0d70155df61ad275713240e86ec0"
        },
        "downloads": -1,
        "filename": "scikit-my-surprise-1.0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1587db7134d79ef0a653f9f918feac37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 573775,
        "upload_time": "2021-02-05T17:54:24",
        "upload_time_iso_8601": "2021-02-05T17:54:24.791950Z",
        "url": "https://files.pythonhosted.org/packages/d4/93/65ad6587c1c02076d57bfaf4b933988650f9721cd66b09730d62f1d3d485/scikit-my-surprise-1.0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb24c7d106c5d5aeec65a2ce71cd27f67e4bb3eb5478d68f49f0c78d9e5aa9c1",
          "md5": "ee3e02259e439fbead39c2fd9cce5d68",
          "sha256": "b0330f7418fd95ca0c064b140e31779bf07eba492fd8d41c718afea901312133"
        },
        "downloads": -1,
        "filename": "scikit-my-surprise-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee3e02259e439fbead39c2fd9cce5d68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 546047,
        "upload_time": "2021-02-05T18:15:05",
        "upload_time_iso_8601": "2021-02-05T18:15:05.754529Z",
        "url": "https://files.pythonhosted.org/packages/fb/24/c7d106c5d5aeec65a2ce71cd27f67e4bb3eb5478d68f49f0c78d9e5aa9c1/scikit-my-surprise-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb24c7d106c5d5aeec65a2ce71cd27f67e4bb3eb5478d68f49f0c78d9e5aa9c1",
        "md5": "ee3e02259e439fbead39c2fd9cce5d68",
        "sha256": "b0330f7418fd95ca0c064b140e31779bf07eba492fd8d41c718afea901312133"
      },
      "downloads": -1,
      "filename": "scikit-my-surprise-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ee3e02259e439fbead39c2fd9cce5d68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 546047,
      "upload_time": "2021-02-05T18:15:05",
      "upload_time_iso_8601": "2021-02-05T18:15:05.754529Z",
      "url": "https://files.pythonhosted.org/packages/fb/24/c7d106c5d5aeec65a2ce71cd27f67e4bb3eb5478d68f49f0c78d9e5aa9c1/scikit-my-surprise-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}