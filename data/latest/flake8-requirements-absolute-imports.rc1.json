{
  "info": {
    "author": "Arkadiusz Bokowy",
    "author_email": "arkadiusz.bokowy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flake8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "Package requirements checker\n============================\n\nThis module provides a plug-in for `flake8 <http://flake8.pycqa.org>`_, which checks/validates\npackage import requirements. It reports missing and/or not used project direct dependencies.\n\nThis plug-in adds new flake8 warnings:\n\n- ``I900``: Package is not listed as a requirement.\n- ``I901``: Package is required but not used.\n\nImportant notice\n----------------\n\nIn order to collect project's dependencies, this checker evaluates Python code from the\n``setup.py`` file stored in the project's root directory. Code evaluation is done with the `eval()\n<https://docs.python.org/3/library/functions.html#eval>`_ function. As a fall-back method, this\nchecker also tries to load dependencies, in order, from the ``setup.cfg``, the ``pyproject.toml``\nfile from the `PEP 621 <https://peps.python.org/pep-0621/>`_ project section, the ``pyproject.toml``\nfile from the `poetry <https://python-poetry.org/>`_ tool section, or from the\n``requirements.txt`` text file in the project's root directory.\n\nAt this point it is very important to be aware of the consequences of the above approach. One\nmight inject malicious code into the ``setup.py`` file, which will be executed by this checker.\nHence, this checker shall NEVER be use to check code from an unknown source! However, in most\ncases, one validates code from a known source (e.g. own code) and one will run script stored in\nthe ``setup.py`` file anyway. The worst case scenario is, that this checker will execute the\nequivalent of the ``python setup.py``, which shall be idempotent (it's a horribly designed\n``setup.py`` file if it's not).\n\nIf you have noticed some side effects during the ``flake8`` check and your ``setup.py`` file is\nwritten in a standard way (e.g. `pypa-sampleproject\n<https://github.com/pypa/sampleproject/blob/master/setup.py>`_), please fill out a bug report.\n\nInstallation\n------------\n\nYou can install, upgrade, or uninstall ``flake8-requirements`` with these commands::\n\n  $ pip install flake8-requirements\n  $ pip install --upgrade flake8-requirements\n  $ pip uninstall flake8-requirements\n\nCustomization\n-------------\n\nFor projects with custom (private) dependencies, one can provide mapping between project name and\nprovided modules. Such a mapping can be set on the command line during the flake8 invocation with\nthe ``--known-modules`` option or alternatively in the ``[flake8]`` section of the configuration\nfile, e.g. ``setup.cfg``. The syntax of the custom mapping looks like follows::\n\n  1st-project-name:[module1,module2,...],2nd-project-name:[moduleA,moduleB,...],...\n\nIf some local project lacks \"name\" attribute in the ``setup.py`` file (it is highly discouraged\nnot to provide the \"name\" attribute, though), one can omit the project name in the mapping and do\nas follows::\n\n  :[localmodule1,localmodule2,...],1st-local-library:[moduleA,moduleB,...],...\n\nReal life example::\n\n  $ cat setup.cfg\n  [flake8]\n  max-line-length = 100\n  known-modules = my-lib:[mylib.drm,mylib.encryption]\n\nIt is also possible to scan host's site-packages directory for installed packages. This feature is\ndisabled by default, but user can enable it with the ``--scan-host-site-packages`` command line\noption. Please note, however, that the location of the site-packages directory will be determined\nby the Python version used for flake8 execution.\n\nIn order to read requirements from the text file, user shall provide the location of such a file\nwith the ``--requirements-file`` option. If the given location is not an absolute path, then it\nhas to be specified as a path relative to the project's root directory.\n\nIf you use the ``-r`` flag in your requirements text file with more than one level of recursion\n(in other words, one file includes another, the included file includes yet another, and so on),\nadd the ``--requirements-max-depth`` option to flake8 (for example, ``--requirements-max-depth=3``\nto allow three levels of recursion).\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Arkq/flake8-requirements",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flake8-requirements-absolute-imports",
    "package_url": "https://pypi.org/project/flake8-requirements-absolute-imports/",
    "platform": null,
    "project_url": "https://pypi.org/project/flake8-requirements-absolute-imports/",
    "project_urls": {
      "Homepage": "https://github.com/Arkq/flake8-requirements"
    },
    "release_url": "https://pypi.org/project/flake8-requirements-absolute-imports/1.6.0.1/",
    "requires_dist": [
      "flake8 (>=2.0.0)",
      "setuptools (>=10.0.0)",
      "toml (>=0.7.0)"
    ],
    "requires_python": "",
    "summary": "Package requirements checker, plugin for flake8",
    "version": "1.6.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14901276,
  "releases": {
    "1.6.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d786273010d4b38fe54d3788abbf934af7db29227c168d8a90420d439083e1b9",
          "md5": "6e9538e1240b6c1d0c0bb847edc15e04",
          "sha256": "2b7299524d14569978c681e40bf4b12171c49016e3b96a1fa39f1aec0c81a773"
        },
        "downloads": -1,
        "filename": "flake8_requirements_absolute_imports-1.6.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e9538e1240b6c1d0c0bb847edc15e04",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14382,
        "upload_time": "2022-08-26T14:39:55",
        "upload_time_iso_8601": "2022-08-26T14:39:55.781345Z",
        "url": "https://files.pythonhosted.org/packages/d7/86/273010d4b38fe54d3788abbf934af7db29227c168d8a90420d439083e1b9/flake8_requirements_absolute_imports-1.6.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d786273010d4b38fe54d3788abbf934af7db29227c168d8a90420d439083e1b9",
        "md5": "6e9538e1240b6c1d0c0bb847edc15e04",
        "sha256": "2b7299524d14569978c681e40bf4b12171c49016e3b96a1fa39f1aec0c81a773"
      },
      "downloads": -1,
      "filename": "flake8_requirements_absolute_imports-1.6.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e9538e1240b6c1d0c0bb847edc15e04",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14382,
      "upload_time": "2022-08-26T14:39:55",
      "upload_time_iso_8601": "2022-08-26T14:39:55.781345Z",
      "url": "https://files.pythonhosted.org/packages/d7/86/273010d4b38fe54d3788abbf934af7db29227c168d8a90420d439083e1b9/flake8_requirements_absolute_imports-1.6.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}