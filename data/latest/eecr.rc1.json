{
  "info": {
    "author": "Vito Janko",
    "author_email": "vito.janko@ijs.si",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Goal\n========\nThis library help to automatically optimize the settings of a context recognition project in order to\nmake it more energy-efficient. Given possible settings (e.g. different sensors) the goal is to\ndecide when to use them. E.g. Use accelerometer when detecting walking but use gps when driving is\ndetected.\n\nInstallation\n=============\nRun the following to install:\n\n```python\npip install eecr\n```\n\nUsage\n======\nFor extensive examples check the documentation at https://dis.ijs.si/eecr/\n\n.. code-block:: python\n\n    from eecr import EnergyOptimizer\n    optimizer = EnergyOptimizer(sequence=sequence, #a list of contexts - ground truth for current task,\n                                setting_to_sequence=setting_to_sequence, #a dictionary that maps each setting\n                                                                         #to a list of predictions using that setting\n                                setting_to_energy=setting_to_energy,     #a dictionary that maps each setting\n                                                                         #to the energy cost of that setting\n                                )\n    solutions_sca, values_sca = optimizer.find_sca_tradeoffs()\n    for (s,v) in zip(solutions_sca, values_sca):\n        print (s, v)\n\nDescription\n============\n\nWidespread accessibility of wearable sensing devices opens many possibilities for tracking the users who wear them. Possible applications range from measuring their exercise patterns and checking on their health, to determining their location. In this documentation we will use the term context-recognition for all these tasks.\n\nA common problem when using such context-recognition systems is their impact on the battery life of the sensing device. It is easy to imagine that an application that monitors users' habits using all the sensors in a smartphone (accelerometer, GPS, Wi-Fi etc.) will quickly drain the phone's battery, making it useless in practice.\n\nWhile many methods for reducing the energy-consumption of a context-recognition system already exist, most of them are specialized. They work either in a specific domain or can only optimize the energy consumption of specific sensors. Adapting these methods to another domain can be laborious and may require a lot of expert knowledge and experimentation.\n\nWe developed three novel methods for generating good energy-efficient solutions that are independent of the domain and can easily be used to optimize a wide range of context-recognition tasks. The first method,\n\"\"Setting-to-Context Assignment (SCA)\"\nchanges the sensing settings -- which sensors to use, with what frequency, what duty cycles to use etc. -- depending on what context was last detected. To do so, we developed a mathematical model that can predict the performance of any given setting-to-context assignment. The SCA method then uses the NSGA-II algorithm to search the space of possible assignments, finding the best ones. The second method,\n\"Duty-Cycle-Assignment (DCA)\"\nworks in a similar way to the SCA method, but is specialized in optimizing only duty-cycling, i.e., periodically turning the sensors on and off. %This specialization can be justified by the fact that duty-cycling is useful in basically all context-recognition tasks.\n\nFinally, the \"Cost-Sensitive Decision-Tree (CS-DT)\"\nmethod adapts sensing settings directly to the sensor data. It works by using a cost-sensitive decision tree that was adapted for context-recognition tasks. All three methods were then combined in three different ways in order to join their individual strengths. These combined methods can adapt to both the current context and to the sensor data.\n\nInstead of returning only one solution, all of our methods can find different trade-offs between the classification quality and the energy consumption. Returning these trade-offs can help the system designer to pick one suitable for their system.\n\nThe methods are explained and in depth in PhD work <Insert a link>.\nThe methodology was also tested on four different real-life datasets, and on a family of artificial datasets. Doing so, we proved that it works under many different conditions, with different possible settings, sensors and problem domains. We also showed that our methods compare favourably against other state-of-the-art methods. For each of the tested datasets we found many energy-efficient solutions. For example, for the Commodity12 dataset, we reduced the energy consumption from 123 mA to 29 mA in exchange for less than 1 percentage point of accuracy. For another example, we were able to use only 5% of the available data in the SHL dataset (by using a lower frequency, duty-cycling and a subset of sensors) and in exchange sacrifice only 5% of the accuracy.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VitoJanko/Energy-Efficient-Context-Recognition",
    "keywords": "context recognition awareness classification energy consumption optimization",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eecr",
    "package_url": "https://pypi.org/project/eecr/",
    "platform": "",
    "project_url": "https://pypi.org/project/eecr/",
    "project_urls": {
      "Documentation": "https://dis.ijs.si/eecr/",
      "Homepage": "https://github.com/VitoJanko/Energy-Efficient-Context-Recognition"
    },
    "release_url": "https://pypi.org/project/eecr/0.0.1/",
    "requires_dist": [
      "scikit-learn",
      "deap",
      "pandas",
      "numpy",
      "matplotlib"
    ],
    "requires_python": ">=3",
    "summary": "Tools for the optimization of energy in a context recognition task",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6646650,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f78f668fe524ecd751f0e353201d6214f80dbfe50b94c68caa035bca2d06d86d",
          "md5": "289d0e19aeb3b3171d4f0a4555a235e4",
          "sha256": "f9166413943cfe68541fd8d3dbc1ba2df733387467d12c5a10dbea2bfd8e8237"
        },
        "downloads": -1,
        "filename": "eecr-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "289d0e19aeb3b3171d4f0a4555a235e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 105043,
        "upload_time": "2020-02-17T14:58:10",
        "upload_time_iso_8601": "2020-02-17T14:58:10.897962Z",
        "url": "https://files.pythonhosted.org/packages/f7/8f/668fe524ecd751f0e353201d6214f80dbfe50b94c68caa035bca2d06d86d/eecr-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e016650eca33d4ceec7c0107e51ebf7b5fa20d1518fc60b066892c0f534b596a",
          "md5": "6a11980a110dd44c302ab42a28c2835a",
          "sha256": "57114e691b1806a99e8a75b5fc956ffdfedb2481c9798805e54a4b31d3fe15e8"
        },
        "downloads": -1,
        "filename": "eecr-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a11980a110dd44c302ab42a28c2835a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 88338,
        "upload_time": "2020-02-17T14:58:13",
        "upload_time_iso_8601": "2020-02-17T14:58:13.663953Z",
        "url": "https://files.pythonhosted.org/packages/e0/16/650eca33d4ceec7c0107e51ebf7b5fa20d1518fc60b066892c0f534b596a/eecr-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f78f668fe524ecd751f0e353201d6214f80dbfe50b94c68caa035bca2d06d86d",
        "md5": "289d0e19aeb3b3171d4f0a4555a235e4",
        "sha256": "f9166413943cfe68541fd8d3dbc1ba2df733387467d12c5a10dbea2bfd8e8237"
      },
      "downloads": -1,
      "filename": "eecr-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "289d0e19aeb3b3171d4f0a4555a235e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 105043,
      "upload_time": "2020-02-17T14:58:10",
      "upload_time_iso_8601": "2020-02-17T14:58:10.897962Z",
      "url": "https://files.pythonhosted.org/packages/f7/8f/668fe524ecd751f0e353201d6214f80dbfe50b94c68caa035bca2d06d86d/eecr-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e016650eca33d4ceec7c0107e51ebf7b5fa20d1518fc60b066892c0f534b596a",
        "md5": "6a11980a110dd44c302ab42a28c2835a",
        "sha256": "57114e691b1806a99e8a75b5fc956ffdfedb2481c9798805e54a4b31d3fe15e8"
      },
      "downloads": -1,
      "filename": "eecr-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a11980a110dd44c302ab42a28c2835a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 88338,
      "upload_time": "2020-02-17T14:58:13",
      "upload_time_iso_8601": "2020-02-17T14:58:13.663953Z",
      "url": "https://files.pythonhosted.org/packages/e0/16/650eca33d4ceec7c0107e51ebf7b5fa20d1518fc60b066892c0f534b596a/eecr-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}