{
  "info": {
    "author": "Dmytro Danevskyi",
    "author_email": "d.danevskyi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n**maggot** is a very simple but useful library with primary goal to remove the need of custom experiment tracking approaches most people typically use. The focus is on reproducibility and removing boilerplate code.\n\nMain issues **maggot** (at least partially) solves:\n\n* Removes the need for meditations on what is a proper name for the experiment. Say you are a machine learning researcher/engineer and you want to train a convolutional neural network with a particular set of parameters, say, 50 convolutional layers, dropout 0.5 and relu activations. You might want to create a separate directory for this experiment to store some checkpoints and summaries there. If you do not expect to have a lot of different models you can simply go off with something like \"convnet50layers\" or \"convnet50relu\". But if the number of experiments grows, you need a more reliable and automated solution. **maggot** offers such a solution - any experiment you run will have a name derived from the configuration parameters of your model. For the aforementioned model it would be \"50-relu-0.5\". You still can use a custom experiment name if you want to.\n* Assists reproducibility. Ever experienced a situation when results you got a month ago with an \"old\" model are no longer reproducible? Even if you are using git, you probably had used some command-line arguments that are now lost somewhere in the bash history... **maggot** stores all command line parameters, saves full stdout, and much more.\n* Restoring a model is now really painless! Since **maggot** saves all the parameters you used to run the experiment, all you need to restore a model is to provide a path to a saved experiment.\n\nLet's consider a toy example and train an SVM on the Iris dataset.\n\nFirst, import required packages and define command-line arguments:\n\n``` python\n\nimport argparse\nimport os\nimport pickle\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom maggot import Experiment\n\nparser = argparse.ArgumentParser(\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter)\nparser.add_argument(\n    \"--C\", type=float, default=1.0,\n    help=\"Regularization parameter for SVM\")\nparser.add_argument(\n    \"--gamma\", type=float, default=0.01,\n    help=\"Kernel parameter for SVM\")\nparser.add_argument(\n    \"--cv\", type=int, default=5,\n    help=\"Number of folds for cross-validation\")\nparser.add_argument(\n    \"--cv_random_seed\", type=int, default=42,\n    help=\"Random seed for cross-validation iterator\")\n\nargs = parser.parse_args()\n```\nDefine a configuration object for the experiment:\n\n``` python\n\nsvm_config = {\n    \"model\": {\n        \"C\": args.C,\n        \"gamma\": args.gamma\n    },\n    \"crossval\": {\n        \"n_folds\": args.cv,\n        \"_random_seed\": args.cv_random_seed\n    }\n}\n```\n\nThe `random_seed` parameter is not really important for analyzing and comparing different experiments, so we included an underscore before its name in config. This tells **maggot** to ignore it for experiment's identifier (short name).\n\nLets create an experiment object!\n\n``` python\nexperiment = Experiment(config=svm_config)\n```\n\nFrom here you can reach the model identifier:\n\n```\n>>> experiment.config.identifier\n5-1.0-0.01\n```\n\nOr the experiment directory:\n\n```\n>>> experiment.experiment_dir\nexperiments/5-1.0-0.01\n```\n\nLets examine what this directory contains by now.\n\n```\ntree -a experiments/5-1.0-0.01/\n\nexperiments/5-1.0-0.01/\n└── .maggot\n    ├── command\n    ├── config.json\n    ├── environ\n    ├── logs\n    │   └── 2020-11-15-14-53-22-1605444802\n    └── results.json\n```\n\nThe `command` file contains the command we run from terminal, `config.json` stores the configuration, and `logs` directory will store any output you get during the run.\n\nLets train the model!\n\n``` python\nwith experiment:\n\n    config = experiment.config\n\n    model = SVC(C=config.model.C, gamma=config.model.gamma)\n\n    score = cross_val_score(\n        model, X=iris.data, y=iris.target, scoring=\"accuracy\",\n        cv=StratifiedKFold(\n            config.crossval.n_folds,\n            shuffle=True,\n            random_state=config.crossval._random_seed),\n    ).mean()\n```\n\nNote that we can access parameters using dot notation rather than `[\"keyword\"]` notation, which looks much nicer.\n\nWe can print accuracy and this will be stored in a log file:\n\n```python\nprint(\"Accuracy is\", round(score, 4))\n```\n\nAdditionaly it's possible to register `score` as a result of this experiment:\n\n```python\nexperiment.register_result(\"accuracy\", score)\n```\n\nThis creates a `results.json` file in the `.maggot` directory with the following content:\n\n```\n{\n    \"accuracy\": 0.9333333333333332\n}\n```\n\nLater we can use such files from different experiments to be able to compare them.\n\nFinally, lets save the model using **pickle** module.\n\n```python\nwith open(os.path.join(experiment.experiment_dir, \"model.pkl\"), \"wb\") as f:\n    pickle.dump(model, f)\n```\n\nSee how directory structure has changed:\n\n```\ntree -a experiments/5-1.0-0.01/\n\nexperiments/5-1.0-0.01/\n├── .maggot\n│   ├── command\n│   ├── config.json\n│   ├── environ\n│   ├── logs\n│   │   └── 2020-11-15-14-53-22-1605444802\n│   └── results.json\n└── model.pkl\n```\n\nIf we want to restore the experiment we can easily do:\n\n```python\nwith Experiment(resume_from=\"experiments/5-1.0-0.01\") as experiment:\n    config = experiment.config    # the same config we created above\n    ...\n```\n\nConfiguration file and other stuff is loaded automatically.\n\nWe can easily run several experiments with different parameters:\n\n```\npython ../maggot/examples/iris_sklearn.py --C=10\npython ../maggot/examples/iris_sklearn.py --C=10 --gamma=1\npython ../maggot/examples/iris_sklearn.py --C=10 --gamma=0.1\npython ../maggot/examples/iris_sklearn.py --C=0.001 --gamma=0.1\npython ../maggot/examples/iris_sklearn.py --C=0.001 --gamma=10\n```\n\nAnd now let's compare them!\n\n```\nmaggot summarize experiments --sort accuracy\n\nResults for /home/dmytro/code/stuff/mag-tests/experiments:\n\n              accuracy\n5-10.0-0.1    0.986667\n5-10.0-0.01   0.973333\n5-10.0-1.0    0.953333\n5-0.001-0.1   0.926667\n5-0.001-10.0  0.813333\n```\n\n**CLI**\n\n**maggot** has a minimalistic CLI interface for working with experiments and being able to inspect them, compare between them and so forth.\n\nCurrently, the following commands are supported:\n\n```\n  summarize     Summarize metrics from all experiments in a given directory.\n  show-config\tShow experiment config.\n  show-command\tShow command used to run an experiment.\n  config-diff\tShow diff between configs in two experiments.\n```\n\nSimple type `maggot COMMAND` in terminal to see help for a specific command.\n\n**Installation**\n\nTo install, clone the repository and then use ```pip install .``` or simply run ```pip install git+https://github.com/ex4sperans/maggot.git``` to install directly from GitHub. The repository will be added to PyPI soon to simplify the installation.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maggot",
    "package_url": "https://pypi.org/project/maggot/",
    "platform": "",
    "project_url": "https://pypi.org/project/maggot/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/maggot/0.2/",
    "requires_dist": [
      "maggot (==0.2)",
      "numpy (==1.19.4)",
      "pandas (==1.1.4)",
      "pkg-resources (==0.0.0)",
      "python-dateutil (==2.8.1)",
      "pytz (==2020.4)",
      "six (==1.15.0)"
    ],
    "requires_python": "",
    "summary": "A lightweight python library for keeping track of numerical experiments",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8668075,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6fa98df9d0ba29d46f06e78f29114dbf8c7ba23eebcfaa3ecda752d427d8cd8",
          "md5": "f6a2a659e7d62a5b557628403726fbff",
          "sha256": "f405787ec20e20d9d6af1cc1dc2d4b4b4a97ef24b59774e8dbb377e1a201d54a"
        },
        "downloads": -1,
        "filename": "maggot-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6a2a659e7d62a5b557628403726fbff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18573,
        "upload_time": "2020-11-16T07:15:43",
        "upload_time_iso_8601": "2020-11-16T07:15:43.779357Z",
        "url": "https://files.pythonhosted.org/packages/c6/fa/98df9d0ba29d46f06e78f29114dbf8c7ba23eebcfaa3ecda752d427d8cd8/maggot-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6fa98df9d0ba29d46f06e78f29114dbf8c7ba23eebcfaa3ecda752d427d8cd8",
        "md5": "f6a2a659e7d62a5b557628403726fbff",
        "sha256": "f405787ec20e20d9d6af1cc1dc2d4b4b4a97ef24b59774e8dbb377e1a201d54a"
      },
      "downloads": -1,
      "filename": "maggot-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6a2a659e7d62a5b557628403726fbff",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18573,
      "upload_time": "2020-11-16T07:15:43",
      "upload_time_iso_8601": "2020-11-16T07:15:43.779357Z",
      "url": "https://files.pythonhosted.org/packages/c6/fa/98df9d0ba29d46f06e78f29114dbf8c7ba23eebcfaa3ecda752d427d8cd8/maggot-0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}