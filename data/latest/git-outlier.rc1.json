{
  "info": {
    "author": "BjÃ¶rn Johansson",
    "author_email": "bjorn.ki.johansson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Version Control :: Git"
    ],
    "description": "# git-outlier\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![codecov](https://codecov.io/gh/BjrnJhsn/git-outlier/branch/main/graph/badge.svg?token=UJXXUA0Q9D)](https://codecov.io/gh/BjrnJhsn/git-outlier)\n![example workflow](https://github.com/BjrnJhsn/git-outlier/actions/workflows/python-app.yml/badge.svg)\n\n\nData-driven screening to find source code that need refactoring.\n\nStill under development and not yet ready to be used.\n\n## Introduction\nRun git-outlier to find source code files that are suitable candidates for refactoring.\ngit-outlier finds outliers in a source code directory under git version control in three categories: complexity, churn,\nand  combined complexity and churn. The top files are worthy of further investigation. \n\nThe combined complexity and churn outliers should be the top candidates for refactoring. The complexity and churn plot\nis divided into four equal zones. All zones are ok to be in except the right-top-zone; these files are both complex and \nchange often. The source code in these files will probably be easier to change and maintain if they are refactored.\n\nThe source code is analyzed per file, so this requires your project to contain multiple source code files \nwith logic entities in separate files to make sense.\n\nThere are different metrics of complexity available. Choose the one that makes most sense for you or try both. Files\nthat are outliers\nregardless of chosen complexity metrics are top candidates for refactoring.\n\n## Installation\n\nThe latest release should be available via PyPI.\n```\n[sudo] pip install git-outlier\n```\n\n## Usage\n\nIf installed as a package, it should be directly available in git as\n```\ngit outlier\n```\nand use the same options as the python script.\n\nThe python script can be run with the following options.\n```\nusage: git_outlier.py [-h] [--languages LANGUAGES] [--metric METRIC] [--span SPAN] [--top TOP] [-v] [path]\n\nAnalyze a source directory that uses git as version handling system. The source files are analyzed for different type of \noutliers and these outliers can be good candidates for refactoring to increase maintainability. The source files are \nranked in falling order after churn, complexity, and combined churn and complexity.\n\npositional arguments:\n  path                  The path to the source directory to be analyzed. Will default to current directory if not present.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --languages LANGUAGES, -l LANGUAGES\n                        List the programming languages you want to analyze. If left empty, it'll search for all \n                        recognized languages. Example: 'outlier -l cpp -l python' searches for C++ and Python code. The\n                        available languages are: c, cpp, csharp, fortran, go, java, javascript, lua, objective-c, php, \n                        python, ruby, rust, scala, swift, typescript\n  --metric METRIC, -m METRIC\n                        Choose the complexity metric you would like to base the results on. Either cyclomatic complexity\n                         'CCN' or lines of code without comments 'NLOC'. If not specified, the default is 'CCN'.\n  --span SPAN, -s SPAN  The number (integer) of months the analysis will look at. Default is 12 months.\n  --top TOP, -t TOP     The number (integer) of outliers to show. Note that for the combined churn and complexity \n                        outliers, there is no maximum. Default is 10.\n  -v, --verbose         Show analysis details and debug info.\n```\n\n## Supported languages\nSupported languages\n- C\n- C++\n- C#\n- Fortran\n- Go\n- Java\n- JavaScript\n- Lua \n- Objective-c\n- Php\n- Python\n- Ruby\n- Rust\n- Scala\n- Swift\n- TypeScript\n\nThe code complexity is computed using [lizard](http://www.lizard.ws/).\n## References\nThe idea comes from Michael Feathers' article [Getting Empirical about Refactoring](https://www.agileconnection.com/article/getting-empirical-about-refactoring).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BjrnJhsn/git-outlier",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git-outlier",
    "package_url": "https://pypi.org/project/git-outlier/",
    "platform": "",
    "project_url": "https://pypi.org/project/git-outlier/",
    "project_urls": {
      "Bug Tracker": "https://github.com/BjrnJhsn/git-outlier/issues",
      "Homepage": "https://github.com/BjrnJhsn/git-outlier"
    },
    "release_url": "https://pypi.org/project/git-outlier/0.0.2/",
    "requires_dist": [
      "python-dateutil",
      "lizard (>=1.17.7)"
    ],
    "requires_python": ">=3.6",
    "summary": "Data-driven screening to find source code that need refactoring",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11030781,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a341c8c51a6b23883e35cb0d39e1383dbd5e9faf42ff2b93617baf6c6b18f6d7",
          "md5": "7c6f1aabe6d0c35880d764cec4ebad3b",
          "sha256": "51d18f2be82d92b4a5ac1b682fe4954596ac68781078f55dd368e68f41a036e1"
        },
        "downloads": -1,
        "filename": "git_outlier-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c6f1aabe6d0c35880d764cec4ebad3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20031,
        "upload_time": "2021-07-28T19:07:26",
        "upload_time_iso_8601": "2021-07-28T19:07:26.981650Z",
        "url": "https://files.pythonhosted.org/packages/a3/41/c8c51a6b23883e35cb0d39e1383dbd5e9faf42ff2b93617baf6c6b18f6d7/git_outlier-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2383244be317b5472e2ac8b45889c6e01f7d15dcc90cb2013bcae2d7fecb1bf",
          "md5": "6b81a500c7403358d9d2d648fd942533",
          "sha256": "9be8a745790d9bc254ccddffade55337e18af273d2d7aaeec6d016ecda6bfdc9"
        },
        "downloads": -1,
        "filename": "git-outlier-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6b81a500c7403358d9d2d648fd942533",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21007,
        "upload_time": "2021-07-28T19:07:28",
        "upload_time_iso_8601": "2021-07-28T19:07:28.583057Z",
        "url": "https://files.pythonhosted.org/packages/d2/38/3244be317b5472e2ac8b45889c6e01f7d15dcc90cb2013bcae2d7fecb1bf/git-outlier-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a341c8c51a6b23883e35cb0d39e1383dbd5e9faf42ff2b93617baf6c6b18f6d7",
        "md5": "7c6f1aabe6d0c35880d764cec4ebad3b",
        "sha256": "51d18f2be82d92b4a5ac1b682fe4954596ac68781078f55dd368e68f41a036e1"
      },
      "downloads": -1,
      "filename": "git_outlier-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7c6f1aabe6d0c35880d764cec4ebad3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20031,
      "upload_time": "2021-07-28T19:07:26",
      "upload_time_iso_8601": "2021-07-28T19:07:26.981650Z",
      "url": "https://files.pythonhosted.org/packages/a3/41/c8c51a6b23883e35cb0d39e1383dbd5e9faf42ff2b93617baf6c6b18f6d7/git_outlier-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2383244be317b5472e2ac8b45889c6e01f7d15dcc90cb2013bcae2d7fecb1bf",
        "md5": "6b81a500c7403358d9d2d648fd942533",
        "sha256": "9be8a745790d9bc254ccddffade55337e18af273d2d7aaeec6d016ecda6bfdc9"
      },
      "downloads": -1,
      "filename": "git-outlier-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6b81a500c7403358d9d2d648fd942533",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21007,
      "upload_time": "2021-07-28T19:07:28",
      "upload_time_iso_8601": "2021-07-28T19:07:28.583057Z",
      "url": "https://files.pythonhosted.org/packages/d2/38/3244be317b5472e2ac8b45889c6e01f7d15dcc90cb2013bcae2d7fecb1bf/git-outlier-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}