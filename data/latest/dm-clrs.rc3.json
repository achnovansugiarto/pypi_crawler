{
  "info": {
    "author": "DeepMind",
    "author_email": "clrs-dev@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# The CLRS Algorithmic Reasoning Benchmark\n\nLearning representations of algorithms is an emerging area of machine learning,\nseeking to bridge concepts from neural networks with classical algorithms. The\nCLRS Algorithmic Reasoning Benchmark (CLRS) consolidates and extends previous\nwork torward evaluation algorithmic reasoning by providing a suite of\nimplementations of classical algorithms. These algorithms have been selected\nfrom the third edition of the standard *Introduction to Algorithms* by Cormen,\nLeiserson, Rivest and Stein.\n\n## Getting started\n\nThe CLRS Algorithmic Reasoning Benchmark can be installed with pip, either from\nPyPI:\n\n```shell\npip install dm-clrs\n```\n\nor directly from GitHub (updated more frequently):\n\n```shell\npip install git+git://github.com/deepmind/clrs.git\n```\n\nYou may prefer to install it in a virtual environment if any requirements\nclash with your Python installation:\n\n```shell\npython3 -m venv clrs_env\nsource clrs_env/bin/activate\npip install git+git://github.com/deepmind/clrs.git\n```\n\nOnce installed you can run our example baseline model:\n\n```shell\npython3 -m clrs.examples.run\n```\n\nIf this is the first run of the example, the dataset will be downloaded and\nstored in `--dataset_path` (default '/tmp/CLRS30').\nAlternatively, you can also download and extract https://storage.googleapis.com/dm-clrs/CLRS30_v1.0.0.tar.gz\n\n## Algorithms as graphs\n\nCLRS implements the selected algorithms in an idiomatic way, which aligns as\nclosely as possible to the original CLRS 3ed pseudocode. By controlling the\ninput data distribution to conform to the preconditions we are able to\nautomatically generate input/output pairs. We additionally provide trajectories\nof \"hints\" that expose the internal state of each algorithm, to both optionally\nsimplify the learning challenge and to distinguish between different algorithms\nthat solve the same overall task (e.g. sorting).\n\nIn the most generic sense, algorithms can be seen as manipulating sets of\nobjects, along with any relations between them (which can themselves be\ndecomposed into binary relations). Accordingly, we study all of the algorithms\nin this benchmark using a graph representation. In the event that objects obey a\nmore strict ordered structure (e.g. arrays or rooted trees), we impose this\nordering through inclusion of predecessor links.\n\n## How it works\n\nFor each algorithm, we provide a canonical set of *train*, *eval* and *test*\ntrajectories for benchmarking out-of-distribution generalization.\n\n|       | Trajectories    | Problem Size |\n|-------|-----------------|--------------|\n| Train | 1000            | 16           |\n| Eval  | 32 x multiplier | 16           |\n| Test  | 32 x multiplier | 64           |\n\n\nHere, \"problem size\" refers to e.g. the length of an array or number of nodes in\na graph, depending on the algorithm. \"multiplier\" is an algorithm-specific\nfactor that increases the number of available *eval* and *test* trajectories\nto compensate for paucity of evaluation signals. \"multiplier\" is 1 for all\nalgorithms except:\n\n- Maximum subarray (Kadane), for which \"multiplier\" is 32.\n- Quick select, minimum, binary search, string matchers (both naive and KMP),\nand segment intersection, for which \"multiplier\" is 64.\n\nThe trajectories can be used like so:\n\n```python\ntrain_ds, num_samples, spec = clrs.create_dataset(\n      folder='/tmp/CLRS30', algorithm='bfs',\n      split='train', batch_size=32)\n\nfor i, feedback in enumerate(train_ds.as_numpy_iterator()):\n  if i == 0:\n    model.init(feedback.features, initial_seed)\n  loss = model.feedback(rng_key, feedback.features)\n```\n\nHere, `feedback` is a `namedtuple` with the following structure:\n\n```python\nFeedback = collections.namedtuple('Feedback', ['features', 'outputs'])\nFeatures = collections.namedtuple('Features', ['inputs', 'hints', 'lengths'])\n```\n\nwhere the content of `Features` can be used for training and `outputs` is\nreserved for evaluation. Each field of the tuple is an `ndarray` with a leading\nbatch dimension. Because `hints` are provided for the full algorithm trajectory,\nthese contain an additional time dimension padded up to the maximum length\n`max(T)` of any trajectory within the dataset. The `lengths` field specifies the\ntrue length `t <= max(T)` for each trajectory, which can be used e.g. for loss\nmasking.\n\nPlease see the `examples` directory for full working Graph Neural Network (GNN)\nexamples using JAX and the DeepMind JAX Ecosystem of libraries.\n\n## What we provide\n\n### Algorithms\n\nOur initial CLRS-30 benchmark includes the following 30 algorithms. We aim to\nsupport more algorithms in the future.\n\n- Sorting\n  - Insertion sort\n  - Bubble sort\n  - Heapsort (Williams, 1964)\n  - Quicksort (Hoare, 1962)\n- Searching\n  - Minimum\n  - Binary search\n  - Quickselect (Hoare, 1961)\n- Divide and conquer\n  - Maximum subarray (Kadane's variant) (Bentley, 1984)\n- Greedy\n  - Activity selection (Gavril, 1972)\n  - Task scheduling (Lawler, 1985)\n- Dynamic programming\n  - Matrix chain multiplication\n  - Longest common subsequence\n  - Optimal binary search tree (Aho et al., 1974)\n- Graphs\n  - Depth-first search (Moore, 1959)\n  - Breadth-first search (Moore, 1959)\n  - Topological sorting (Knuth, 1973)\n  - Articulation points\n  - Bridges\n  - Kosaraju's strongly connected components algorithm (Aho et al., 1974)\n  - Kruskal's minimum spanning tree algorithm (Kruskal, 1956)\n  - Prim's minimum spanning tree algorithm (Prim, 1957)\n  - Bellman-Ford algorithm for single-source shortest paths (Bellman, 1958)\n  - Dijkstra's algorithm for single-source shortest paths (Dijkstra et al., 1959)\n  - Directed acyclic graph single-source shortest paths\n  - Floyd-Warshall algorithm for all-pairs shortest-paths (Floyd, 1962)\n- Strings\n  - Naïve string matching\n  - Knuth-Morris-Pratt (KMP) string matcher (Knuth et al., 1977)\n- Geometry\n  - Segment intersection\n  - Graham scan convex hull algorithm (Graham, 1972)\n  - Jarvis' march convex hull algorithm (Jarvis, 1973)\n\n### Baselines\n\nModels consist of a *processor* and a number of *encoders* and *decoders*.\nWe provide JAX implementations of the following GNN baseline processors:\n\n- Deep Sets (Zaheer et al., NIPS 2017)\n- End-to-End Memory Networks (Sukhbaatar et al., NIPS 2015)\n- Graph Attention Networks (Veličković et al., ICLR 2018)\n- Graph Attention Networks v2 (Brody et al., ICLR 2022)\n- Message-Passing Neural Networks (Gilmer et al., ICML 2017)\n- Pointer Graph Networks (Veličković et al., NeurIPS 2020)\n\nIf you want to implement a new processor, the easiest way is to add\nit in the `processors.py` file and make it available through the\n`get_processor_factory` method there. A processor should have a `__call__`\nmethod like this:\n\n```\n__call__(self,\n         node_fts, edge_fts, graph_fts,\n         adj_mat, hidden,\n         nb_nodes, batch_size)\n```\n\nwhere `node_fts`, `edge_fts` and `graph_fts` will be float arrays of shape\n`batch_size` x `nb_nodes` x H, `batch_size` x `nb_nodes` x `nb_nodes` x H,\nand `batch_size` x H with encoded features for\nnodes, edges and graph respectively, `adj_mat` a\n`batch_size` x `nb_nodes` x `nb_nodes` boolean\narray of connectivity built from hints and inputs, and `hidden` a\n`batch_size` x `nb_nodes` x H float array with the previous-step outputs\nof the processor. The method should return a `batch_size` x `nb_nodes` x H\nfloat array.\n\nFor more fundamentally different baselines, it is necessary to create a new\nclass that extends the Model API (as found within `clrs/_src/model.py`).\n`clrs/_src/baselines.py` provides one example of how this can be done.\n\n## Creating your own dataset\n\nWe provide a `tensorflow_dataset` generator class in `dataset.py`. This file can\nbe modified to generate different versions of the available algorithms, and it\ncan be built by using `tfds build` after following the installation instructions\nat https://www.tensorflow.org/datasets.\n\nAlternatively, you can generate samples without going through `tfds` by\ninstantiating samplers with the `build_sampler` method in\n`clrs/_src/samplers.py`, like so:\n\n```\nsampler, spec = clrs.build_sampler(\n    name='bfs',\n    seed=42,\n    num_samples=1000,\n    length=16)\n\ndef _iterate_sampler(batch_size):\n  while True:\n    yield sampler.next(batch_size)\n\nfor feedback in _iterate_sampler(batch_size=32):\n  ...\n\n```\n\n## Adding new algorithms\n\nAdding a new algorithm to the task suite requires the following steps:\n\n1. Determine the input/hint/output specification of your algorithm, and include\nit within the `SPECS` dictionary of `clrs/_src/specs.py`.\n2. Implement the desired algorithm in an abstractified form. Examples of this\ncan be found throughout the `clrs/_src/algorithms/` folder.\n  - Choose appropriate moments within the algorithm’s execution to create probes\n    that capture the inputs, outputs and all intermediate state (using\n    the `probing.push` function).\n  - Once generated, probes must be formatted using the `probing.finalize`\n    method, and should be returned together with the algorithm output.\n3. Implement an appropriate input data sampler for your algorithm,\nand include it in the `SAMPLERS` dictionary within `clrs/_src/samplers.py`.\n\nOnce the algorithm has been added in this way, it can be accessed with the\n`build_sampler` method, and will also be incorporated to the dataset if\nregenerated with the generator class in `dataset.py`, as described above.\n\n## Citation\n\nTo cite the CLRS Algorithmic Reasoning Benchmark:\n\n```latex\n@article{deepmind2022clrs,\n  title={The CLRS Algorithmic Reasoning Benchmark},\n  author={Petar Veli\\v{c}kovi\\'{c} and Adri\\`{a} Puigdom\\`{e}nech Badia and\n    David Budden and Razvan Pascanu and Andrea Banino and Misha Dashevskiy and\n    Raia Hadsell and Charles Blundell},\n  journal={arXiv preprint arXiv:2205.15659},\n  year={2022}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deepmind/clrs",
    "keywords": "python machine learning",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dm-clrs",
    "package_url": "https://pypi.org/project/dm-clrs/",
    "platform": null,
    "project_url": "https://pypi.org/project/dm-clrs/",
    "project_urls": {
      "Homepage": "https://github.com/deepmind/clrs"
    },
    "release_url": "https://pypi.org/project/dm-clrs/1.0.0/",
    "requires_dist": [
      "absl-py (>=0.13.0)",
      "attrs (>=21.4.0)",
      "chex (>=0.0.8)",
      "dm-haiku (>=0.0.4)",
      "jax (>=0.2.18)",
      "jaxlib (>=0.1.69)",
      "numpy (>=1.21.1)",
      "opt-einsum (>=3.3.0)",
      "optax (>=0.0.9)",
      "six (>=1.16.0)",
      "tensorflow (>=2.9.0)",
      "tfds-nightly (==4.5.2.dev202204190046)",
      "toolz (>=0.11.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "The CLRS Algorithmic Reasoning Benchmark.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14010135,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee51eda12855eea3ad1e00bbea7eca3ce04274f2c0318c64d334f70c8a7c8a43",
          "md5": "a5816bb3018a51e26c4991d488bd0718",
          "sha256": "e8ae3854de7c3ca37a1d4e6081c3b93e9ca5fe86f621b9ab6b3e7c4c52e336de"
        },
        "downloads": -1,
        "filename": "dm_clrs-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5816bb3018a51e26c4991d488bd0718",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64904,
        "upload_time": "2021-08-26T17:25:30",
        "upload_time_iso_8601": "2021-08-26T17:25:30.046181Z",
        "url": "https://files.pythonhosted.org/packages/ee/51/eda12855eea3ad1e00bbea7eca3ce04274f2c0318c64d334f70c8a7c8a43/dm_clrs-0.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7f3850b167e798eb9b0cc658d5fdce183c000ce6feff10e3f1a346aece273c1",
          "md5": "4f5a55664404c31475f83ab62a67f91c",
          "sha256": "46fed13e6a2cfb6eae2aa9ec4323ad60ddd7769f671982b7e06c8ac7892698a0"
        },
        "downloads": -1,
        "filename": "dm-clrs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f5a55664404c31475f83ab62a67f91c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47273,
        "upload_time": "2021-08-26T17:25:32",
        "upload_time_iso_8601": "2021-08-26T17:25:32.758917Z",
        "url": "https://files.pythonhosted.org/packages/a7/f3/850b167e798eb9b0cc658d5fdce183c000ce6feff10e3f1a346aece273c1/dm-clrs-0.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f24a557bba49c9266364ce8a04a65ae4dd28cfe6a73cc1cf98ea3df962dc363b",
          "md5": "50e4d502ea01f847e4221ee3b65438dd",
          "sha256": "c4b55d6cd05d32758450845f8f6f5c865ee0a52d947611fcc262310844922302"
        },
        "downloads": -1,
        "filename": "dm_clrs-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50e4d502ea01f847e4221ee3b65438dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64871,
        "upload_time": "2021-08-26T17:41:11",
        "upload_time_iso_8601": "2021-08-26T17:41:11.125657Z",
        "url": "https://files.pythonhosted.org/packages/f2/4a/557bba49c9266364ce8a04a65ae4dd28cfe6a73cc1cf98ea3df962dc363b/dm_clrs-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a331087874adfacf7392a3b549fa270f5b471f36eb15faaa1e17528aca1b96eb",
          "md5": "0a92f03debdf55861248f69ea5e76910",
          "sha256": "ec1314cde8527aeca693a86d29eb4c2aafab0739846c581e9bea958ea3ee9990"
        },
        "downloads": -1,
        "filename": "dm-clrs-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0a92f03debdf55861248f69ea5e76910",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47175,
        "upload_time": "2021-08-26T17:41:12",
        "upload_time_iso_8601": "2021-08-26T17:41:12.606956Z",
        "url": "https://files.pythonhosted.org/packages/a3/31/087874adfacf7392a3b549fa270f5b471f36eb15faaa1e17528aca1b96eb/dm-clrs-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13c9fa1f8c4a30cc8f0967f59d0eecacaed605e9b52368b1769a03279fb5f068",
          "md5": "d0ecb6cc2968b3f04cff223db1b23df0",
          "sha256": "eba1a7692ab4de88c37906d1ca66ee56acbaee66a5ca0cde55906ac9cf6906e8"
        },
        "downloads": -1,
        "filename": "dm_clrs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0ecb6cc2968b3f04cff223db1b23df0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 97459,
        "upload_time": "2022-06-02T09:00:21",
        "upload_time_iso_8601": "2022-06-02T09:00:21.952572Z",
        "url": "https://files.pythonhosted.org/packages/13/c9/fa1f8c4a30cc8f0967f59d0eecacaed605e9b52368b1769a03279fb5f068/dm_clrs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12d94e5ee714dc96653916dc038cf3208063fc2bf5ed04fd76d74f1551cd778a",
          "md5": "315576322f45a8415b4d66903ac99c87",
          "sha256": "8e61a668b5b9a1de210e2178984deede85eb2d9f7e8566edbc4198cc4320b6c3"
        },
        "downloads": -1,
        "filename": "dm-clrs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "315576322f45a8415b4d66903ac99c87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72875,
        "upload_time": "2022-06-02T09:00:23",
        "upload_time_iso_8601": "2022-06-02T09:00:23.798862Z",
        "url": "https://files.pythonhosted.org/packages/12/d9/4e5ee714dc96653916dc038cf3208063fc2bf5ed04fd76d74f1551cd778a/dm-clrs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13c9fa1f8c4a30cc8f0967f59d0eecacaed605e9b52368b1769a03279fb5f068",
        "md5": "d0ecb6cc2968b3f04cff223db1b23df0",
        "sha256": "eba1a7692ab4de88c37906d1ca66ee56acbaee66a5ca0cde55906ac9cf6906e8"
      },
      "downloads": -1,
      "filename": "dm_clrs-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0ecb6cc2968b3f04cff223db1b23df0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 97459,
      "upload_time": "2022-06-02T09:00:21",
      "upload_time_iso_8601": "2022-06-02T09:00:21.952572Z",
      "url": "https://files.pythonhosted.org/packages/13/c9/fa1f8c4a30cc8f0967f59d0eecacaed605e9b52368b1769a03279fb5f068/dm_clrs-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12d94e5ee714dc96653916dc038cf3208063fc2bf5ed04fd76d74f1551cd778a",
        "md5": "315576322f45a8415b4d66903ac99c87",
        "sha256": "8e61a668b5b9a1de210e2178984deede85eb2d9f7e8566edbc4198cc4320b6c3"
      },
      "downloads": -1,
      "filename": "dm-clrs-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "315576322f45a8415b4d66903ac99c87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 72875,
      "upload_time": "2022-06-02T09:00:23",
      "upload_time_iso_8601": "2022-06-02T09:00:23.798862Z",
      "url": "https://files.pythonhosted.org/packages/12/d9/4e5ee714dc96653916dc038cf3208063fc2bf5ed04fd76d74f1551cd778a/dm-clrs-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}