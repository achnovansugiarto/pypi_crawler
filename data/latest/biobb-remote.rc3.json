{
  "info": {
    "author": "Biobb developers",
    "author_email": "gelpi@ub.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "# biobb_remote\n\n### Introduction\nBiobb_remote is a package to allow biobb's to be executed on remote sites\nthrough ssh\n\n## ssh_credentials.py\nProvides SSHCredentials to manage the generation, and installation of ssh credentials\n~~~\ncredentials = SSHCredentials(host='', userid='', generate_key=False, look_for_keys=True)\n~~~\n* host (**str**): remote host name\n* userid (**str**): remote user name\n* generate_key (**bool**): Generates new public/private keys pair\n* look_for_keys (**bool**): Look user's .ssh keys if keys not set\n\n### Methods\n~~~\n(void) credentials.save(output_path, public_key_path=None, private_key_path=None, passwd=None)\n~~~\nStores SSHCredentials object in a external file\n* output_path (**str**): Path to file  \n* public_key_path (**str**): Path to a standard public key file\n* private_key_path (**str**): Path to a standard private key file\n* passwd (**str**): Password to encrypt private key (optional)\n\n~~~\n(void) credentials.load_from_file(credentials_path, passwd=None)\n~~~\nRecovers SSHCredentials object from disk file\n* credentials_path (**str**): Path to packed credentials file.\n* passwd (**str**): Passwd to decrypt private key (optional)\n\n~~~\n(void) credentials.load_from_private_key_file(private_path, passwd=None)\n~~~\nRecovers SSHCredentials object from disk file\n* private_path (**str**): Path to private key file.\n* passwd (**str**): Passwd to decrypt private key (optional)\n\n~~~\n(void) credentials.generate_key(nbits=2048)\n~~~\nGenerates RSA keys pair\n* nbits (**int**): number of bits the generated key\n\n~~~\n(str) credentials.get_public_key(suffix='@biobb')\n~~~\nReturns a readable publik key suitable to addto authorized keys\n* suffix (**str**): Added to the key for identify it.\n\n~~~\n(str) credentials.get_private_key(passwd=None)\n~~~\nReturns a readable possibly encrypted private key\n* passwd (**str**): Password to encrypt private key (optional)\n\n~~~\n(bool) credentials.check_host_auth()\n~~~\nChecks for public_key in remote .ssh/authorized_keys file. Requires users' SSH access to host\n\n~~~\n(void) credentials.install_host_auth(file_bck='bck')\n~~~\nInstalls public_key on remote .ssh/authorized_keys file. Requires users' SSH access to host\n* file_bck (**str**): Generates an authorized.**file_bck** file with original authorized keys\n\n~~~\n(void) credentials.remove_host_auth(file_bck='biobb')\n~~~\nRemoves public_key on remote .ssh/authorized_keys file. Requires users' SSH access to host\n* file_bck (**str**): Generates an authorized.**file_bck** file with original authorized keys\n\n\n## ssh_session.py\nClass wrapping ssh operations\n~~~\nssh_session = SSHSession(ssh_data=None, credentials_path=None, private_path=None, passwd=None)\n~~~\n* ssh_data (**SSHCredentials**) : SSHCredentials object\n* credentials_path (**str**) : Path to packed credentials file to use\n* private_path (**str**): Path to private key file\n* passwd (**str**): Password to decrypt credentials (optional)\n~~~\n(str) ssh_session.run_command(command)\n~~~\nRuns command on remote. Returns stdout + stderr\n* command (**str**): Command line to execute\n\n~~~\n(bool | file_handle) ssh_session.run_sftp(oper, input_file_path, output_file_path='')\n~~~\nRuns SFTP session on remote\n* oper (**str**): Operation to perform, one of\n        * get (gets a single file from input_file_path (remote) to output_file_path (local) )\n        * put (puts a single file from input_file_path (local) to output_file_path (remote)\n        * create (creates a file in output_file_path (remote) from input_file_path string-\n        * file (opens a remote file in input_file_path for read). Returns a file handle.\n        * listdir (returns a list of files in remote input_file_path\n* input_file_path (**str**): Input file path or input string\n* output_file_path (**str**): Output file path\n\n## task.py\n**DataBundle**\nClass to manage bundles of input/output files\n~~~\ndata_bundle = DataBundle(bundle_id)\n~~~\n* bundle_id (**str**): Id for the data bundle\n\n~~~\ndata_bundle.add_file(file_path)\n~~~\nAdds a single file to the data bundle\n* file_path (**str**): Path to the file to add\n\n~~~\ndata_bundle.add_dir(dir_path)\n~~~\nAdds all files from a directory\n* dir_path (**str**): Path to the directory to add\n\n~~~\n([str]) data_bundle.get_file_names()\n~~~\nGenerates a list of names or included files\n\n~~~\n(str) data_bundle.to_json()\n~~~\nGenerates a Json dump\n\n**Task**\nAbstract module to handle remote tasks. Not for direct use, extend to include specific queueing systems\n\n### Constants\n~~~\ntask.UNKNOWN = 0\ntask.SUBMITTED = 1\ntask.RUNNING = 2\ntask.CANCELLED = 3\ntask.FINISHED = 4\ntask.CLOSING = 5\ntask.JOB_STATUS (dict)\n~~~\n### Methods\n\n~~~\ntask=Task(host=None, userid=None, look_for_keys=True, debug_ssh=False)\n~~~\n Classe to handle task execution\n* host (**str**): Remote host\n* userid (**str**): Remote user id\n* look_for_keys (**bool**): Look for keys available in user's .ssh directory\n  debug_ssh (**bool**): Open SSH session with debug activated\n\n~~~\n(void) task.load_data_from_file(file_path, mode='json')\n~~~\nLoads accumulated task data from external file\n* file_path (**str**): Path to file\n* mode (**str**): Format. Json | Pickle\n\n~~~\n(void) task.save(save_file_path, mode='json', verbose=Falsse)\n~~~\nSaves current task status in a external file. Can be used to recover session at a later time.\n* save_file_path (**str**): Path to file\n* mode (**str**): Format to use json|pickle.\n* verbose (**bool**): Print additional information\n\n~~~\n(void) task.set_credentials(credentials, passwd=None):\n~~~\nLoads ssh credentials from SSHCredentials object or from a external file\n* credentials (**SSHCredentials** | **str**): SSHCredentials object or a path to a file containing the data\n* passwd (**str**): Password to decrypt private key when loaded from file (optional)\n\n~~~\n(void) task.set_private_key(private_path, passwd=None):\n~~~\nInserts private key from external file\n* private_path (**str**): Path to private key file\n* passwd (**str**, optional): Password to decrypt private key\n\n~~~\n(void) task.load_host_config(host_config_path)\n~~~\nLoads a pre-defined host configuration file (json format)\n* host_config_path (**str**): Path to the configuration file\n\n~~~\n(void) task.set_custom_settings(self, ref_setting='default', patch=None, clean=False)\n~~~\nGenerates a custom queue setting based on existing one\n* ref_setting (**str**): Base settings to modify\n* patch (**dict**): Patch to apply\n* clean (**bool**): Clean existing settings\n\n~~~\n(void) task.prep_auto_settings(total_cores=0, nodes=0, cpus_per_task=1,  num_gpus=0)\n~~~\nGenerates queue configuration settings for balancing MPI/OMP/GPU.\n* total_cores (**int**): Aproximated number of cores to use\n* nodes (**int**): Number of complete nodes to use (overrides total_cores)\n* cpus_per_task (**int**): OMP processes per MPI task to allocate\n* num_gpus (**int**): Num of GPUs per node to allocate\n\n~~~\n(void) task.set_local_data_bundle(local_data_path, add_files=True)\n~~~\nBuilds local data bundle from a local directory\n* local_data_path (**str**): Path to local data directory\n* add_files (**bool**): On create, add all files in the directory.\n\n~~~\n(void) task.send_input_data(remote_base_path, overwrite=True, new_only=True)\n~~~\nUploads data bundle files to remote working dir\n* remote_base_path (**str**): Remote base path for all task activites. Each task will create a unique working dir (re-usable).\n* overwrite (**bool**): Upload files even if they already exists in the remote working dir.\n* new_only (**bool**): Overwrite only with newer files\n\n~~~\n(str) task.get_remote_py_script(python_import, files, command, properties='')\n~~~\nGenerates 1 line python code to be executed in the queue script using python -c\n* python_import (**str**): Python import line(s) to include (; separated)\n* files (**dict**): File names to associate to biobb required path parameters\n* command (**str**): biobb class to launch\n* properties (**dict** | **str**): Either a dict, path to a json or yaml config file or a 1-line Json with the required biobb parameters\n\n~~~\n(str) task.get_remote_comm_line(command, files, use_biobb=False, properties='', cmd_settings=''):\n~~~\nGenerates a command line for queue script. Can be used to launch a biobb module or any command line remotely.\n* job_name (**str**): Job name to display (optional, used to identify queue jobs, and stdout/stderr logs)\n* command (**str**): Command to execute\n* files (**dict**): Input/output files. \"--\" prefix added if only a parameter name is provided\n* use_biobb (**bool**): Set to prepend biobb path on host\n* properties (**dict**): BioBB properties\n* cmd_settings (**dict**): Additional settings to add to the command line, pre-set bundles can be configured in host config data.\n\n~~~\n(void) task.submit(job_name=None, queue_settings='default', modules=None, local_run_script='', conda_env='', save_file_path=None, poll_time=0)\n~~~\nSubmits task to remote. Optionally waits until completion.\n* job_name (**str**): Job name to display in the queuing system. Stdout/stderr logs are named as job.name.(out|err). Optional, defaults to queue default behaviour.\n* queue_settings (**str**): Label for set of queue settings (defined in host configuration). Use 'custom' for user defined settings (see set_custom_settings)\n* modules (**str**): modules to activate (defined in host configuration)\n* conda_env (**str**): Conda environment to activate\n* local_run_script (**str**): Path to local script to run or a string with the script itself (identified by leading '#' tag)\n* save_file_path (**str**): Path to local task log file to update after submit (Default None),\n* poll_time (**int**): if set, polls periodically for job completion (seconds)\n\n~~~\n(void) task.cancel(remove_data=False)\n~~~\nCancels running task\n* remove_data (**bool**): Removes remoted workign directory.\n\n~~~\n(str) task.check_queue()\n~~~\nCheck queue status. Returns output of the remote appropriate command\n\n~~~\n(void) check_job(update=True, poll_time=0, save_file_path=None)\n~~~\nPrints job status to stdout\n* update (**bool**): update status before printing it\n* poll_time (**int**): poll until job finished. Poll interval in seconds.\n* save_file_path (**str**): Path to local task log file to update status (Default None),\n\n~~~\n(void) task.get_remote_file(file):\n~~~\nGets file from remote working dir\n* file (**str**): File name\n\n~~~\n([stdout, stderr]) task.get_logs()\n~~~\nGet queue logs\n\n~~~\n(void) task.get_output_data(local_data_path='', files_only=None, overwrite=True, new_only=True)\n~~~\nDownloads remote working dir contents to local path\n* local_data_path (**str**): Path to local directory\n* files_only (**[str]**): Only download files in list, if empty download all files\n* overwrite (**bool**): Overwrite local files if they exist\n* new_only (**bool**): Overwrite only with newer files\n\n~~~\n(void) task.clean_remote()\n~~~\nRemove remote working dir\n\n## slurm.py\nTask Class extended to include specific settings for Slurm queueing system\n\n## conf/XXX.json\nHost configuration files\n\n### Utilities\n## credentials\nGenerates kay pairs to be consumed by other utilities\n\n~~~\ncredentials [-h] [--user USERID] [--host HOSTNAME]\n            [--pubkey_path PUBKEY_PATH] [--nbits NBITS] --keys_path\n            KEYS_PATH [--privkey_path PRIVKEY_PATH]\n            {create,get_pubkey,get_private}\n~~~\n\n## scp_service\nSimple sftp service\n~~~\nscp_service [-h] --keys_path KEYS_PATH [-i INPUT_FILE_PATH]\n                   [-o OUTPUT_FILE_PATH]\n                   {get,put,create,file,listdir}\n~~~\n\n## ssh_command\nSimple remote ssh command\n~~~\nssh_command [-h] --keys_path KEYS_PATH [command [command ...]]\n~~~\n\n## slurm_test\nComplete set of functions to manage slurm submissions remotely\n~~~\nslurm_test [-h] --keys_path KEYS_PATH [--script SCRIPT_PATH]\n                  [--local_data LOCAL_DATA_PATH] [--remote REMOTE_PATH]\n                  [--queue_settings Q_SETTINGS] [--module MODULE]\n                  [--task_data TASK_FILE_PATH]\n                  {submit,queue,cancel,status,get_data,put_data}\n~~~\n\n### Version\nv1.2.2 November 2021\n\n### Copyright & Licensing\nThis software has been developed in the MMB group (http://mmb.irbbarcelona.org) at the\nBSC (http://www.bsc.es/) & IRB (https://www.irbbarcelona.org/) for the European BioExcel (http://bioexcel.eu/), funded by the European Commission\n(EU H2020 [675728](http://cordis.europa.eu/projects/675728)).\n\n* (c) 2015-2021 [Barcelona Supercomputing Center](https://www.bsc.es/)\n* (c) 2015-2021 [Institute for Research in Biomedicine](https://www.irbbarcelona.org/)\n\nLicensed under the\n[GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html), see the file\n[LICENSE](LICENSE) for details.\n\n![](https://bioexcel.eu/wp-content/uploads/2015/12/Bioexcell_logo_1080px_transp.png \"Bioexcel\")\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bioexcel/biobb_remote",
    "keywords": "Bioinformatics Workflows BioExcel Compatibility",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "biobb-remote",
    "package_url": "https://pypi.org/project/biobb-remote/",
    "platform": "",
    "project_url": "https://pypi.org/project/biobb-remote/",
    "project_urls": {
      "Bioexcel": "https://bioexcel.eu/",
      "Documentation": "http://biobb_remote.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/bioexcel/biobb_remote"
    },
    "release_url": "https://pypi.org/project/biobb-remote/1.2.2/",
    "requires_dist": [
      "paramiko (==2.7.2)"
    ],
    "requires_python": ">=3",
    "summary": "Biobb_remote is the Biobb module for remote execution via ssl.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12061211,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77c258f70940710c0a5dcfa9b04dd847e41f4cc4b9ccd32f58013d890317b6d0",
          "md5": "4d9fcc91f0a74720fea27fbb7200520e",
          "sha256": "35f73a603b73f2fa089edde2e488c461d76cfe06504dd9acf3ab1e81aa04ae52"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d9fcc91f0a74720fea27fbb7200520e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 27200,
        "upload_time": "2021-11-18T15:06:20",
        "upload_time_iso_8601": "2021-11-18T15:06:20.055102Z",
        "url": "https://files.pythonhosted.org/packages/77/c2/58f70940710c0a5dcfa9b04dd847e41f4cc4b9ccd32f58013d890317b6d0/biobb_remote-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f569bc199e52f52146fe9c87ecd4f0e969d033cf781f109002fc887c415b1b01",
          "md5": "ebfe008a7b8f2e966a0a32aea264ea35",
          "sha256": "f5a8b64dbeb27acf1b7d033760d3aa769fcc585b8650dd879e7f1dc0e0cafc98"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ebfe008a7b8f2e966a0a32aea264ea35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 19126,
        "upload_time": "2021-11-18T15:06:22",
        "upload_time_iso_8601": "2021-11-18T15:06:22.211799Z",
        "url": "https://files.pythonhosted.org/packages/f5/69/bc199e52f52146fe9c87ecd4f0e969d033cf781f109002fc887c415b1b01/biobb_remote-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb695ae0d7da6d188c9f745b33f1190234137a98e7bd97d8ff2b20fad5fe0db",
          "md5": "b7eae83b65b2e1632681fccda3807fd8",
          "sha256": "a42bf626cdaa4a1447666c5656a420fee5ee1fddba7a677a48dbeae1c7ce1740"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7eae83b65b2e1632681fccda3807fd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 150252,
        "upload_time": "2021-11-18T16:02:51",
        "upload_time_iso_8601": "2021-11-18T16:02:51.324073Z",
        "url": "https://files.pythonhosted.org/packages/fc/b6/95ae0d7da6d188c9f745b33f1190234137a98e7bd97d8ff2b20fad5fe0db/biobb_remote-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46f792d40656b5ad0f5ea9d335b06bc98c418f1b822be565282ebcf963d97f77",
          "md5": "560337fb234332e4eea281cef452d5d4",
          "sha256": "6d58b6dadc22da31185fec39e0ba8b684444c73b0e5ccd668cbadf9978473dfb"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "560337fb234332e4eea281cef452d5d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 134742,
        "upload_time": "2021-11-18T16:02:52",
        "upload_time_iso_8601": "2021-11-18T16:02:52.710435Z",
        "url": "https://files.pythonhosted.org/packages/46/f7/92d40656b5ad0f5ea9d335b06bc98c418f1b822be565282ebcf963d97f77/biobb_remote-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99d6e113fc65890f53b5be77c32892f01e2703d355deb9adbe6ca1de418b3fc8",
          "md5": "ebbd34b707974cead060ffe023483e16",
          "sha256": "e43b954c475b4a1a8ac5aebc8c5c846a29b5d5de7d9296a77900a5bab309660d"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebbd34b707974cead060ffe023483e16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 150279,
        "upload_time": "2021-11-18T16:47:55",
        "upload_time_iso_8601": "2021-11-18T16:47:55.754992Z",
        "url": "https://files.pythonhosted.org/packages/99/d6/e113fc65890f53b5be77c32892f01e2703d355deb9adbe6ca1de418b3fc8/biobb_remote-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "407d8a287b2b4530a89082b755dc36cfa81761fd7aaa314dd03b1115a1faf5af",
          "md5": "1cd2f12870bd1985aa94f275cc573ef4",
          "sha256": "9bc9512892efc9f938b0c9b5603832b7d435b5d42cf4ee8c4b2ad3b363c7f437"
        },
        "downloads": -1,
        "filename": "biobb_remote-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1cd2f12870bd1985aa94f275cc573ef4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 134783,
        "upload_time": "2021-11-18T16:47:57",
        "upload_time_iso_8601": "2021-11-18T16:47:57.139178Z",
        "url": "https://files.pythonhosted.org/packages/40/7d/8a287b2b4530a89082b755dc36cfa81761fd7aaa314dd03b1115a1faf5af/biobb_remote-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99d6e113fc65890f53b5be77c32892f01e2703d355deb9adbe6ca1de418b3fc8",
        "md5": "ebbd34b707974cead060ffe023483e16",
        "sha256": "e43b954c475b4a1a8ac5aebc8c5c846a29b5d5de7d9296a77900a5bab309660d"
      },
      "downloads": -1,
      "filename": "biobb_remote-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ebbd34b707974cead060ffe023483e16",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 150279,
      "upload_time": "2021-11-18T16:47:55",
      "upload_time_iso_8601": "2021-11-18T16:47:55.754992Z",
      "url": "https://files.pythonhosted.org/packages/99/d6/e113fc65890f53b5be77c32892f01e2703d355deb9adbe6ca1de418b3fc8/biobb_remote-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "407d8a287b2b4530a89082b755dc36cfa81761fd7aaa314dd03b1115a1faf5af",
        "md5": "1cd2f12870bd1985aa94f275cc573ef4",
        "sha256": "9bc9512892efc9f938b0c9b5603832b7d435b5d42cf4ee8c4b2ad3b363c7f437"
      },
      "downloads": -1,
      "filename": "biobb_remote-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1cd2f12870bd1985aa94f275cc573ef4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 134783,
      "upload_time": "2021-11-18T16:47:57",
      "upload_time_iso_8601": "2021-11-18T16:47:57.139178Z",
      "url": "https://files.pythonhosted.org/packages/40/7d/8a287b2b4530a89082b755dc36cfa81761fd7aaa314dd03b1115a1faf5af/biobb_remote-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}