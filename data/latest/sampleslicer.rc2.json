{
  "info": {
    "author": "John W",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.5523256.svg\n   :target: https://doi.org/10.5281/zenodo.5523256\n\nSampleSlicer\n============\nSampleSlicer is a tool written in python designed to enable the transformation\nof arbitrary 3D or 4D datasets loaded as a set of image stacks. SampleSlicer was\ninitially designed for use in a scientific experiment involving time-series\nX-ray computed tomography (XCT) images which contain multiple independent\nspecimens (microtubes) embedded in a single experimental dataset. The tool\nprovides a GUI for drawing rectangles bounding the tubes at specified slices and\ntime points. Information about the rectangle location and orientation in space\nand time is used to crop, align and rotate each individual microtube and\nultimately create 4D hyperstacks of each tube for enhanced data exploration and\nanalysis.\n\nWhy SampleSlicer?\n-----------------\nModern datasets are very large and the process of parsing them for analysis\nrequires a significant amount of computation. Current tools may struggle to\nperform this task in an efficient way.\n\nThe primary goal of SampleSlicer is to split up a large 4-dimensional dataset\ninto smaller samples using a graphical interface for defining the \"tubes\" of\ndata which may require cropping and rotation in 3D. After the data has been\ncropped, aligned and rotated, it may be saved as sets of image sequences or as a\n4D hyperstack compatible with ImageJ.\n\nOnce this \"slicing\" is complete, ImageJ can be used to view the sub-samples with\nthe hyperstack viewer or as individual images or image sequences on which\nanalysis can be performed.\n\nHow does SampleSlicer work?\n---------------------------\nSampleSlicer performs 3D rotations in an efficient way by computing a single\nrotation matrix using quaternions which allows the transformation to be done\nusing a single multiplication operation rather than a series of euclidean\ntransformations. This allows the transformation to handle pitch, yaw, and roll\nwithout the risk of gimbal locking.\n\nSampleSlicer may also load a subset of data for the purposes of generating\nrotation metadata, allowing very large datasets to be considered without loading\nall of the data into memory. \n\nInstalling\n----------\nSampleSlicer may be run in an anaconda environment or any other virtual\nenvironment.\n\nInstalling from PyPI:\n\n.. code:: bash\n\n  pip install sampleslicer\n\nInstalling from source (e.g. Zenodo archive):\n\n.. code:: bash\n  \n  unzip sampleslicer-1.0.0.zip\n  cd sampleslicer-1.0.0\n  pip install .\n\nDependencies\n~~~~~~~~~~~~\nSampleSlicer is compatible with python3 with dependencies installed\nautomatically using pip via requirements.txt:\n\n- matplotlib\n- numpy\n- numpy-quaternion\n- scipy\n- imread\n- psutil\n\nSystem utilities:\n\n- LibTIFF\n  \n  - Used for updating tiff metadata for ImageJ compatible hyperstacks. Can be\n    obtained from https://libtiff.gitlab.io/libtiff/.\n  - May be installed through cygwin installer, `apt install libtiff5` on\n    Debian/Ubuntu, etc and must be available on the system PATH.\n\n- bash\n\n  - calls to the tiffcp utility currently assume a bash environment (such as\n    anaconda / cygwin or Linux, etc.)\n\nRunning\n-------\nSuccessful use of SampleSlicer consists of two phases: 1) generation of\ntransformation metadata via GUI 2) batch processing which performs data\ntransformation and writes image sequences and hyperstacks.\n\nAn optional third step is to generate stacks at a given slice vs. time, which is\nuseful for movie making and for datasets that are too large to be saved as a\nhyperstack. (Hyperstacks can be no larger than 4 GB.)\n\nProject setup\n~~~~~~~~~~~~~\nOnce the SampleSlicer package is installed copy the template files `sliceit.py`\nand 'slicetimestack.py' to the directory where the package has been installed\nand the analysis is being performed. 'sliceit.py' is used to generate\ntransformation metadata and batch process the data, and 'slicetimestack.py' is\nused to generate stacks at a given slice vs. time (only after batch processing\nusing 'sliceit.py' is complete).  \n\nGenerate SampleSlicer script\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUse the following command to generate script templates (`sliceit.py` and\n`slicetimestack.py`) in current directory.\n\n.. code:: bash\n\n  mkdir sliceit_project\n  cd sliceit_project\n  sslice -g\n  \nVerify input data file and directory structure\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSampleSlicer will work with any data as long as the samples and files are named\nsequentially and hierarchically as described below:\n\n.. parsed-literal::\n\n    assumes a sample directory of:\n            - sample0_time0\n                - slice0\n                - slice1\n                ...\n                - sliceN\n            - sample0_time1\n                - slice0\n                - slice1\n                ...\n                - sliceN\n            ...\n            - sample0_timeN\n                - slice0\n                - slice1\n                ...\n                - sliceN\n\n            - sample1_time0\n                - slice0\n                - slice1\n                ...\n                - sliceN\n            - sample1_time1\n                - slice0\n                - slice1\n                ...\n            ...\n            - sample1_timeN\n                - slice0\n                - slice1\n                ...\n                - sliceN\n\nCustomize the script for your dataset\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nA few variables need to be set up one time to point to the dataset and to tell\nSampleSlicer how to interpret the images.  Note that these paths may need to\nchange if you move your dataset.\n\nAt minimum set the variables `sample0_path`, `sample0_pat`, and `sample0_img` to\npoint to your dataset. The image files must be numbered or ordered in the\nspatial and time sequence in which they are to be interpreted.\n\nThe `sub_sample` option is used to only open a portion of a very large dataset.\nThis value should not be set to a value larger than the total number of slices.\n\nThe asterisk (*) below is used to select specific patterns of files in the input\ndirectories and must only match the samples and image files being processed.\n\n.. code:: python\n\n  #\n  # Dataset configuration options\n  #\n\n  # path information for our sample set\n  sample0_path = \"H:\\Microtubes_all\\Recons2\"\n  sample0_pat = \"rec201611*\"\n  sample0_img = \"*.tiff\"\n\nConfigure the `output_path` variable to be the location of the microtubes file\nand the generated sliced datasets (after batch processing). SampleSlicer\n*should* never modify anything outside of the `output_path` directory but it is\nrecommended to make this a different path from the input dataset.\n\n.. code:: python\n\n  # this is the filename used for reading and writing microtube definitons in the\n  # editor. when performing batch processing this is the file that will define\n  # the regions for the microtubes.\n  microtubes_json = \"microtubes.json\"\n\nInteractive metadata generation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSampleSlicer includes a GUI which allows for the specification of a complex\ntransformation. To run the SampleSlicer editor for browsing and generating the\nmetadata use the following command:\n\n.. code:: python\n  \n  sslice --editor\n\nInteractive commands for generation of transformation metadata\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThe transformation metadata is generated by drawing rectangles on each end of\nthe tube at different time points in the dataset. The rectangles represent the\n3D space containing the microtube. This procedure may be performed using a GUI\nprovided in this package. The hotkeys used to manipulate the rectangles and\nother aspects of the GUI are defined below.\n\n\nHotkeys\n'''''''\n  1. Translate:\n\n    a. large jump: hjkl. (e.g., use \"h\", \"j\", \"k\" and \"l\" keys to move\n       the rectange in the x and y directions in large jumps)\n    b. small jump (1 pixel): arrow keys\n\n  2. Rotate: m,./\n  3. Contract/expand: yuio\n  4. Write: w\n  5. New rectangle: N\n  6. Extract: e\n  7. Send rect to background: b\n  8. Switch between display and edit mode: esc\n  9. Print: p\n  10. Go to first slice: \"Home\"\n  11. Go to last slice: \"End\"\n\nProcedure for drawing rectangles\n''''''''''''''''''''''''''''''''\nThis is an example of the procedure for creating the sets of rectangles.\n\nProcedure for one tube:\n1. Go to center time using scroll bar.\n\n  a. Draw rectangle for first slice -- get it perfectly centered and rotated and\n  sized.\n  b. Go to last slice. Translate rectangle as needed to center it. Make sure the\n  rectangle is big enough to contain entire tube.\n\n2. Go to time 0, first slice: Expand rectangle to include entire tube (DO NOT\n   ROTATE OR TRANSLATE RECTANGLE)\n3. Go to time 0, last slice: Expand rectangle to include entire tube (DO NOT\n   ROTATE OR TRANSLATE RECTANGLE)\n4. Go to time N, first slice: Expand rectangle to include entire tube (DO NOT\n   ROTATE OR TRANSLATE RECTANGLE)\n5. Go to time N, last slice: Expand rectangle\n   to include entire tube (DO NOT ROTATE OR TRANSLATE RECTANGLE)\n6. Write (w) data.\n\nTo generate metadata for the next tube, use the \"N\" hotkey to make a new rectangle. \n\nBatch mode\n~~~~~~~~~~\nRun with `batch = True` to produce output data including folders of rotated data\nin the 'x' and 'z' directions and hyperstacks. This data is written out to the\n`output_dir` along with a log of the batch processing operations performed.\n\n.. code:: bash\n\n  sslice --batch\n\nOutput visualization\n~~~~~~~~~~~~~~~~~~~~\nSampleSlicer has the ability to include metadata to generate ImageJ-compatible\nhyperstacks of the output datasets. By default, 4D hyperstacks of each\n\"microtube\" are output and can be opened in ImageJ. If the output dataset is too\nlarge for the hyperstack format (>4 GB), the hyperstack will not be complete and\ncannot be opened in ImageJ.\n\nThe included script `slicetimestack.py` may be used to make stacks at a given\nslice vs. time which is useful for movie making and for datasets that are too\nlarge to be saved as a hyperstack.\n\nTo achieve this copy the script from the utils directory and configure it to\npoint at the output dataset after the complete batch run has been performed.\nSet the parameters for the slices to generate and invoke the script as follows:\n\n.. code:: bash\n\n  python slicetimestack.py\n\nImplementation details\n----------------------\n\nMetadata format\n~~~~~~~~~~~~~~~\nThe metadata for each region of interest is defined using the data required to\nspecify an end-to-end sub-region of the sample. The region defines a 3d skewed\npolygon which is used to compute the rotation.\n\nThis is represented using:\n\n  - pt0: centroid point at image0\n  - pt1: centroid point at imageN\n  - angle: the angle of rotation of each of the rectangles\n  - width: width of both of the rectangles\n  - height: height of both of the rectangles\n\n.. code:: json\n\n   \"00\": {\n        \"angle\": 66.80000000000018, \n        \"height\": 111.17145539604599, \n        \"pt0\": [\n            41.8898228635052, \n            1695.266508580275\n        ], \n        \"pt1\": [\n            77.8898228635052, \n            1669.266508580275\n        ], \n        \"width\": 278.9356472920259\n    }, \n\nCopyright and License\n---------------------\nSampleSlicer is licensed under the GPLv3 license.\nCopyright (C) 2018-2022 John W. Williams\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://doi.org/10.5281/zenodo.5523256",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sampleslicer",
    "package_url": "https://pypi.org/project/sampleslicer/",
    "platform": "",
    "project_url": "https://pypi.org/project/sampleslicer/",
    "project_urls": {
      "Homepage": "https://doi.org/10.5281/zenodo.5523256"
    },
    "release_url": "https://pypi.org/project/sampleslicer/1.0.1/",
    "requires_dist": [
      "matplotlib",
      "numpy",
      "numpy-quaternion",
      "scipy",
      "imread (==0.7.4)",
      "psutil (==5.8.0)"
    ],
    "requires_python": "",
    "summary": "Graphically slice up 4-dimensional datasets using quaternions.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12628934,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5625d123a6886fdf80dff93b7161d50f3ef02753b23c8bc26db64a32344a0ed8",
          "md5": "67994b495ad7a259b8ea632b4445c928",
          "sha256": "e2619bfa1837fa309235d680be27aaa8945cc38ce101b6d5179fe44a200106e4"
        },
        "downloads": -1,
        "filename": "sampleslicer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67994b495ad7a259b8ea632b4445c928",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40826,
        "upload_time": "2022-01-11T21:58:57",
        "upload_time_iso_8601": "2022-01-11T21:58:57.902671Z",
        "url": "https://files.pythonhosted.org/packages/56/25/d123a6886fdf80dff93b7161d50f3ef02753b23c8bc26db64a32344a0ed8/sampleslicer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29b7d065b852dc3ef654aebcf91f8103c5aa01205b472ff93a372d61e6267233",
          "md5": "62f24cb52d5d3be0ec57742334eda016",
          "sha256": "0df23c68244566ac233ec4b20b80599622032d08e6c272a51b56162ecc7e224c"
        },
        "downloads": -1,
        "filename": "sampleslicer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62f24cb52d5d3be0ec57742334eda016",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40082,
        "upload_time": "2022-01-11T21:59:00",
        "upload_time_iso_8601": "2022-01-11T21:59:00.096997Z",
        "url": "https://files.pythonhosted.org/packages/29/b7/d065b852dc3ef654aebcf91f8103c5aa01205b472ff93a372d61e6267233/sampleslicer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25f21b0de8c499b144c1e0604d4d0473fa46b734b9520ea451fadf5e1f102f87",
          "md5": "2345848377ea5ab5aebb88c55397732d",
          "sha256": "edac33bbb467dbb721c8ed2bda3d9d971bacf7f5d6a13551569148c626f88bf1"
        },
        "downloads": -1,
        "filename": "sampleslicer-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2345848377ea5ab5aebb88c55397732d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40878,
        "upload_time": "2022-01-20T04:33:37",
        "upload_time_iso_8601": "2022-01-20T04:33:37.090897Z",
        "url": "https://files.pythonhosted.org/packages/25/f2/1b0de8c499b144c1e0604d4d0473fa46b734b9520ea451fadf5e1f102f87/sampleslicer-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d02e635609aefbb2ce8a47f0146d714578747dd679f9ff1b7e92413bfd6cab2",
          "md5": "b34d8b660725b5463b41c2b9e693b381",
          "sha256": "5a51b0111d2411b917fcf21de6cb49bf657f123b40acb532125c7af48d98bf11"
        },
        "downloads": -1,
        "filename": "sampleslicer-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b34d8b660725b5463b41c2b9e693b381",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39999,
        "upload_time": "2022-01-20T04:33:38",
        "upload_time_iso_8601": "2022-01-20T04:33:38.654167Z",
        "url": "https://files.pythonhosted.org/packages/3d/02/e635609aefbb2ce8a47f0146d714578747dd679f9ff1b7e92413bfd6cab2/sampleslicer-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25f21b0de8c499b144c1e0604d4d0473fa46b734b9520ea451fadf5e1f102f87",
        "md5": "2345848377ea5ab5aebb88c55397732d",
        "sha256": "edac33bbb467dbb721c8ed2bda3d9d971bacf7f5d6a13551569148c626f88bf1"
      },
      "downloads": -1,
      "filename": "sampleslicer-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2345848377ea5ab5aebb88c55397732d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40878,
      "upload_time": "2022-01-20T04:33:37",
      "upload_time_iso_8601": "2022-01-20T04:33:37.090897Z",
      "url": "https://files.pythonhosted.org/packages/25/f2/1b0de8c499b144c1e0604d4d0473fa46b734b9520ea451fadf5e1f102f87/sampleslicer-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d02e635609aefbb2ce8a47f0146d714578747dd679f9ff1b7e92413bfd6cab2",
        "md5": "b34d8b660725b5463b41c2b9e693b381",
        "sha256": "5a51b0111d2411b917fcf21de6cb49bf657f123b40acb532125c7af48d98bf11"
      },
      "downloads": -1,
      "filename": "sampleslicer-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b34d8b660725b5463b41c2b9e693b381",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39999,
      "upload_time": "2022-01-20T04:33:38",
      "upload_time_iso_8601": "2022-01-20T04:33:38.654167Z",
      "url": "https://files.pythonhosted.org/packages/3d/02/e635609aefbb2ce8a47f0146d714578747dd679f9ff1b7e92413bfd6cab2/sampleslicer-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}