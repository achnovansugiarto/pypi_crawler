{
  "info": {
    "author": "Sumeet Khatri",
    "author_email": "khatri6000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# QuTIpy\n[![CI](https://github.com/arnavdas88/QuTIpy/actions/workflows/ci.yml/badge.svg)](https://github.com/arnavdas88/QuTIpy/actions/workflows/ci.yml)\n\nQuantum Theory of Information for Python\npronounced \"cutie pie\". A package for performing calculations with quantum states and channels. It is comparable to the [QETLAB package](http://www.qetlab.com/Main_Page) for MATLAB / Octave.\n\nRead more about the QuTIpy package at our [GitBook](https://arnav-das.gitbook.io/qutipy-quantum-theory-of-information-for-python/).\n\n\n## Requirements\nThe code requires Python 3, and apart from the standard `numpy` and `scipy` packages, it requires `cvxpy` if you want to run [SDPs](https://en.wikipedia.org/wiki/Semidefinite\\_programming) (e.g., for the [diamond norm](https://en.wikipedia.org/wiki/Diamond\\_norm)). It requires `sympy` for symbolic computations.\n\n## Installation\n\nA simple _pip install_ from the github repository will install the package in your system.\n\n```bash\n$ pip install git+https://github.com/sumeetkhatri/QuTIpy\n```\n\n## Examples\n\nHere are some simple examples.\n\nWe start by importing the package:\n\n```python\n>>> from qutipy import *\n>>> from qutipy.general_functions import *\n```\n\n\n### Creating basis vectors\n\nTo create the qubit [state](https://en.wikipedia.org/wiki/Quantum\\_state) ${\\displaystyle |0\\rangle }$, we execute the following line.\n\n```python\n>>> ket(2,0)\n```\n\nThe first argument specifies the dimension, in this case two, and the second argument is the index for the [basis vector](https://en.wikipedia.org/wiki/Basis\\_\\(linear\\_algebra\\)) that we want. The output of the above line is the following numpy matrix object:\n\n```python\nndarray([[1.],\n        [0.]])\n```\n\nSimilarly,\n\n```python\n>>> ket(2,1)\n```\n\ngives the following output:\n\n```python\nndarray([[0.],\n        [1.]])\n```\n\nIn general, `ket(d,j)`, for `j` between `0` and `d-1`, generates a d-dimensional column vector (as a numpy matrix) in which the jth entry contains a one.\n\nWe can take tensor products of d-dimensional basis vectors using `ket()`. For example, the two-qubit state ${\\displaystyle |0\\rangle|0\\rangle }$ can be created as follows:\n\n```python\n>>> ket( 2, [0, 0] )\n```\n\nIn general, `ket(d, [j1, j2, ... , jn])` creates the n-fold tensor product ${\\displaystyle |j_1\\rangle|j_2\\rangle...|j_n\\rangle }$  of d-dimensional basis vectors.\n\n\n### Taking the partial trace\n\nGiven an operator $R_{AB}$ acting on a tensor product [Hilbert space](https://en.wikipedia.org/wiki/Hilbert\\_space) of the quantum systems `A` and `B`, the [partial trace](https://en.wikipedia.org/wiki/Partial\\_trace) over `B` can be calculated as follows:\n\n```python\n>>> partial_trace(R_AB, [2], [dimA, dimB])\n```\n\nHere, `dimA` is the dimension of system `A` and `dimB` is the dimension of system `B`. Similarly,\n\n```python\n>>> partial_trace(R_AB, [1], [dimA, dimB])\n```\n\ntakes the partial trace of `R_AB` over system `A`. In general, `partial_trace(R,sys,dim)` traces over the systems in the list `sys`, and `dim` is a list of the dimensions of all of the subsystems on which the operator `R` acts.\n\n\n### Quantum states\n\nWe can generate a random [quantum state](https://en.wikipedia.org/wiki/Quantum\\_state#Mixed\\_states) (i.e., [density matrix](https://en.wikipedia.org/wiki/Density\\_matrix)) in `d` dimensions as follows:\n\n```python\n>>> RandomDensityMatrix(d)\n```\n\nTo generate a random [pure state](https://en.wikipedia.org/wiki/Quantum\\_state#Pure\\_states) (i.e., state vector) in `d` dimensions:\n\n```python\n>>> RandomPureState(d)\n```\n\nTo generate an isotropic state in `d` dimensions:\n\n```python\n>>> isotropic_state(p,d)\n```\n\nwhere `p` is the fidelity to the maximally entangled state.\n\nAnother special class of states is the Werner states:\n\n```python\n>>> Werner_state(p,d)\n```\n\n> The **Isotropic State** can be viewed as a probabilistic mixture of the [Qudit](https://en.wikipedia.org/wiki/Qubit#Qudits\\_and\\_qutrits) Bell states, such that the state ${\\displaystyle |\\phi\\rangle\\langle\\phi| }$ is prepared with probability $p$, and the states ${\\displaystyle |\\phi_{z,x}\\rangle\\langle\\phi_{z,x}| }$, with $(z, x) \\neq (0, 0)$, are prepared with probability $\\frac{1−p} {d^2−1}$. This implies that every isotropic state is a Bell-diagonal state, that it has full rank, and that its eigenvalues are $p$ and $\\frac{1−p} {d^2−1}$ (the latter with multiplicity $d^2 − 1$).\n\n\n> The **Werner state**  ${\\displaystyle W_{AB}^{(p,d)}}$, for 2 quantum systems $A$ and $B$, with $d_A = d_B = d ≥ 2$, is a mixture of [projectors](https://en.wikipedia.org/wiki/Projection\\_\\(linear\\_algebra\\)) onto the symmetric and antisymmetric subspaces, with the relative weight ${\\displaystyle p\\in [0,1]}$ being the main parameter that defines the state,&#x20; for ${\\displaystyle \\rho_{AB} = {\\rho_{AB}}^{W;p}  }$ ,&#x20;such that ${\\rho_{AB}}^{W;p} := p\\zeta_{AB} + (1 − p)\\zeta^\\bot_{AB}$\n\nwhere  $\\zeta_{AB}$ and $\\zeta^\\bot_{AB}$ are quantum states and are proportional to the projections onto the anti-symmetric and symmetric subspaces respectively.\n\n\n\n### Quantum channels\n\nThe package comes with functions for commonly-used channels such as the depolarizing channel and the amplitude damping channel. One can also create an arbitrary [Qubit](https://en.wikipedia.org/wiki/Qubit) Pauli channel as follows:\n\n```python\n>>> Pauli_channel(px, py, pz)\n```\n\nwhere `px, py, pz` are the probabilities of the individual [Pauli Matrices](https://en.wikipedia.org/wiki/Pauli\\_matrices). The output of this function contains the [Kraus operators](https://en.wikipedia.org/wiki/Quantum\\_operation#Kraus\\_operators) of the [channel](https://en.wikipedia.org/wiki/Quantum\\_channel) as well as an isometric extension of the channel.\n\nIn order to apply a [quantum channel](https://en.wikipedia.org/wiki/Quantum\\_channel) to a [quantum state](https://en.wikipedia.org/wiki/Quantum\\_state) `rho`, we can use the function `apply_channel`. First, let us define the following [amplitude damping channel](https://en.wikipedia.org/wiki/Amplitude\\_damping\\_channel) :\n\n```python\n>>> K = amplitude_damping_channel(0.2)\n```\n\nThe variable `K` contains the [Kraus operators](https://en.wikipedia.org/wiki/Quantum\\_operation#Kraus\\_operators) of the channel. Then,\n\n```python\n>>> rho_out = apply_channel(K, rho)\n```\n\ngives the state at the output of the channel when the input state is `rho`.\n\nOther functions include:\n\n* Getting the Choi and natural representation of a channel from its Kraus representation\n* Converting between the Choi, natural, and Kraus representations of a channel\n\n\n\n\n## Summary of other features\n\nThe package also contains functions for:\n- Trace norm\n- Fidelity and entanglement fidelity\n- Random unitaries\n- Clifford unitaries\n- Generators of the su(d) Lie algebra(for d=2, this is the set of Pauli matrices)\n- Discrete Weyl operators\n- von Neumann entropy and relative entropy\n- Renyi entropies\n- Coherent information and Holevo information for states and channels\n\n\n# Acknowledgements\n\nThanks to [Mark Wilde](https://www.markwilde.com/) for suggesting the name for the package.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sumeetkhatri/QuTIpy",
    "keywords": "qutipy quantum sdk",
    "license": "LGPLv3",
    "maintainer": "Sumeet Khatri, Arnav Das",
    "maintainer_email": "khatri6000@gmail.com",
    "name": "QuTIpy",
    "package_url": "https://pypi.org/project/QuTIpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/QuTIpy/",
    "project_urls": {
      "Author": "https://sumeetkhatri.com",
      "GitHub": "https://github.com/sumeetkhatri/QuTIpy",
      "Homepage": "https://arnav-das.gitbook.io/qutipy-quantum-theory-of-information-for-python",
      "PyPi": "https://pypi.org/project/QuTIpy"
    },
    "release_url": "https://pypi.org/project/QuTIpy/0.1.0a0/",
    "requires_dist": [
      "numpy (>=1.21.3)",
      "scipy (==1.8.0)",
      "sympy (==1.9)",
      "cvxpy (==1.2.0)",
      "pytest"
    ],
    "requires_python": "",
    "summary": "A package to perform quantum information calculations",
    "version": "0.1.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14014424,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65fcbda93eba4aeb6e03109e112145055edf8220537c279c96b48b5b65e5808c",
          "md5": "bb6ae07a703c6e0b9b7c73b9d6854826",
          "sha256": "7d744b3a7d1d4e2d229258ce2cf9c852b5543a57fdc4fd71df6539b8fef2cd50"
        },
        "downloads": -1,
        "filename": "QuTIpy-0.1.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb6ae07a703c6e0b9b7c73b9d6854826",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53094,
        "upload_time": "2022-06-02T17:25:15",
        "upload_time_iso_8601": "2022-06-02T17:25:15.951929Z",
        "url": "https://files.pythonhosted.org/packages/65/fc/bda93eba4aeb6e03109e112145055edf8220537c279c96b48b5b65e5808c/QuTIpy-0.1.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a41a9f61a1831eaf62fe494c0a8f5771b6dbd75bfe4d57a65c8b5d3131f1ea32",
          "md5": "c2661c61964a473a98097c4744332ade",
          "sha256": "eb18ff0bf98e4c6b804873adb7cdf25b15b6314d41d80060b24f63cfe4ac789c"
        },
        "downloads": -1,
        "filename": "QuTIpy-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2661c61964a473a98097c4744332ade",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51759,
        "upload_time": "2022-06-02T17:25:17",
        "upload_time_iso_8601": "2022-06-02T17:25:17.170494Z",
        "url": "https://files.pythonhosted.org/packages/a4/1a/9f61a1831eaf62fe494c0a8f5771b6dbd75bfe4d57a65c8b5d3131f1ea32/QuTIpy-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65fcbda93eba4aeb6e03109e112145055edf8220537c279c96b48b5b65e5808c",
        "md5": "bb6ae07a703c6e0b9b7c73b9d6854826",
        "sha256": "7d744b3a7d1d4e2d229258ce2cf9c852b5543a57fdc4fd71df6539b8fef2cd50"
      },
      "downloads": -1,
      "filename": "QuTIpy-0.1.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb6ae07a703c6e0b9b7c73b9d6854826",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 53094,
      "upload_time": "2022-06-02T17:25:15",
      "upload_time_iso_8601": "2022-06-02T17:25:15.951929Z",
      "url": "https://files.pythonhosted.org/packages/65/fc/bda93eba4aeb6e03109e112145055edf8220537c279c96b48b5b65e5808c/QuTIpy-0.1.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a41a9f61a1831eaf62fe494c0a8f5771b6dbd75bfe4d57a65c8b5d3131f1ea32",
        "md5": "c2661c61964a473a98097c4744332ade",
        "sha256": "eb18ff0bf98e4c6b804873adb7cdf25b15b6314d41d80060b24f63cfe4ac789c"
      },
      "downloads": -1,
      "filename": "QuTIpy-0.1.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "c2661c61964a473a98097c4744332ade",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51759,
      "upload_time": "2022-06-02T17:25:17",
      "upload_time_iso_8601": "2022-06-02T17:25:17.170494Z",
      "url": "https://files.pythonhosted.org/packages/a4/1a/9f61a1831eaf62fe494c0a8f5771b6dbd75bfe4d57a65c8b5d3131f1ea32/QuTIpy-0.1.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}