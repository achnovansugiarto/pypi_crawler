{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Apache Airflow",
      "Framework :: Apache Airflow :: Provider"
    ],
    "description": "<!--\nCopyright 2022 Tecton, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n# [preview] airflow-tecton\n\nContains an Apache Airflow provider that allows you to author Tecton workflows inside Airflow.\n\nTwo basic capabilities are supported:\n1) Submitting materialization jobs\n2) Waiting for Feature View/Feature Service data to materialize.\n\nNote this package is in preview and it will not work with your Tecton installation unless enabled.\n\n## Changelog\n\n- 0.0.3 Support `allow_overwrite` setting in the operators\n\n- 0.0.2 Removed type annotations that caused compatibility issues with Airflow versions below 2.4.\n\n- 0.0.1 Initial release\n\n# Installation and Configuration\n\n## Installation\n\nYou can install this package via `pip install airflow-tecton`. Note that this requires `apache-airflow>=2.0`.\n\nFor a deployed environment, add `airflow-tecton` to your `requirements.txt` or wherever you configure installed packages.\n\nYou can confirm a successful installation by running `airflow providers list`, which should show `airflow-tecton` in the list.\n\n## Configuration\n\nThis provider uses operators that interface with Tecton's API, thus it requires you set up Airflow to connect to Tecton.\n\nYou can add a new connection by going to `Connections` under the `Admin` tab in the Airflow UI. From there, hit the `+` button and select `Tecton` in the connection type dropdown. From there, you can configure the connection name, Tecton URL, and Tecton API key. Note that the default connection name is `tecton_default`, so we recommend starting with this as a connection name to minimize configuration.\n\n# Usage\n\n## Configuring a Feature View for manual triggering\n\nA `BatchFeatureView` and a `StreamFeatureView` can be configured for manual triggering. To do so, set `batch_trigger=BatchTriggerType.MANUAL`. When set to manual, Tecton will not automatically create any batch materialization jobs for the Feature View.\n\nFor a `StreamFeatureView`, only batch materialization job scheduling will be impacted by the `batch_trigger` setting. Streaming materialization job scheduling will still be managed by Tecton.\n\nHereâ€™s an example of a `BatchFeatureView` configured for manual triggering.\n\n```python\nfrom tecton import batch_feature_view, FilteredSource, Aggregation, BatchTriggerType\nfrom fraud.entities import user\nfrom fraud.data_sources.transactions import transactions_batch\nfrom datetime import datetime, timedelta\n\n@batch_feature_view(\n    sources=[FilteredSource(transactions_batch)],\n    entities=[user],\n    mode='spark_sql',\n    aggregation_interval=timedelta(days=1),\n    aggregations=[\n        Aggregation(column='transaction', function='count', time_window=timedelta(days=1)),\n        Aggregation(column='transaction', function='count', time_window=timedelta(days=30)),\n        Aggregation(column='transaction', function='count', time_window=timedelta(days=90))\n    ],\n    online=False,\n    offline=True,\n    feature_start_time=datetime(2022, 5, 1),\n    tags={'release': 'production'},\n    owner='matt@tecton.ai',\n    description='User transaction totals over a series of time windows, updated daily.',\n    batch_trigger=BatchTriggerType.MANUAL # Use manual triggers\n)\ndef user_transaction_counts(transactions):\n    return f'''\n        SELECT\n            user_id,\n            1 as transaction,\n            timestamp\n        FROM\n            {transactions}\n        '''\n```\n\nIf a Data Source input to the Feature View has `data_delay` set, then that delay will still be factored in to constructing training data sets but does not impact when the job can be triggered with the materialization API.\n\n## Materialization Job Submission\n\nThere are two methods available to submit materialization jobs:\n1) [TectonTriggerOperator](./airflow_tecton/operators/tecton_trigger_operator.py): This triggers a materialization job for a Feature View. Tecton will retry any failing jobs automatically. Note that completion of this operator only means submission succeeded. To wait for completion, you must combine this with `TectonSensor`.\n2) [TectonJobOperator](./airflow_tecton/operators/tecton_job_operator.py): This triggers a materialization job for a Feature View with no retries. Additionally, when this operator is terminated, it will make a best effort to clean up the execution of the materialization job. Using this operator allows you to use standard Airflow keyword arguments to configure retry behavior. Additionally, this operator is synchronous, meaning that when the operator has succeeded, the underlying job has succeeded.\n\nBoth of these require the following arguments:\n1) workspace - the workspace name of the Feature View you intend to materialize\n2) feature_view - the name of the Feature View you intend to materialize\n3) online - whether the job should materialize to the online store. This requires that your FeatureView also has online materialization enabled.\n4) offline - whether the job should materialize to the offline store. This requires that your FeatureView also has offline materialization enabled.\n\nThe time interval of the materialization job is configured automatically using Airflow templates. By default, it is from the `data_interval_start` to the `data_interval_end` of your DAG run. These can overridden if necessary.\n\n#### Example Usage\n\n```python\nfrom airflow_tecton import TectonJobOperator, TectonTriggerOperator\n\nTectonJobOperator(\n    task_id=\"tecton_job\",\n    workspace=\"my_workspace\",\n    feature_view=\"my_fv\",\n    online=False,\n    offline=True,\n    retries=3\n)\n\n\nTectonTriggerOperator(\n    task_id=\"trigger_tecton\",\n    workspace=\"my_workspace\",\n    feature_view=\"my_fv\",\n    online=True,\n    offline=True,\n)\n```\n\n## Waiting For Materialization\n\n### [TectonSensor](./airflow_tecton/sensors/tecton_sensor.py)\n\nThis enables you to wait for Materialization to complete for both Feature Views and Feature Services. Common uses are for monitoring as well as kicking off a training job after daily materialization completes.\n\n\n#### Example Usage\n```python\nfrom airflow_tecton import TectonSensor\n\nTectonSensor(\n    task_id=\"wait_for_fs_online\",\n    workspace=\"my_workspace\",\n    feature_service=\"my_fs\",\n    online=True,\n    offline=False,\n)\n\nTectonSensor(\n    task_id=\"wait_for_fv\",\n    workspace=\"my_workspace\",\n    feature_view=\"my_fv\",\n    online=True,\n    offline=True,\n)\n```\n\n# Examples\n\nSee [example dags here](./airflow_tecton/example_dags).\n\n# Development\n## Pre-commit\n\nThis repo uses pre-commit. Run `pre-commit install` in the repo root to configure pre-commit hooks. Pre-commit hooks take care of running unit tests as well as linting files.\n\n## Run unit tests manually\n\nRun `python -m pytest tests/` in the repo root.\n\n# License\nThis is licensed with the Apache 2.0 License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://tecton.ai/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "airflow-tecton",
    "package_url": "https://pypi.org/project/airflow-tecton/",
    "platform": null,
    "project_url": "https://pypi.org/project/airflow-tecton/",
    "project_urls": {
      "Homepage": "http://tecton.ai/"
    },
    "release_url": "https://pypi.org/project/airflow-tecton/0.0.3/",
    "requires_dist": [
      "apache-airflow (>=2.0)",
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "Provider for using Tecton with Airflow.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17324794,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07215937ef386332fd4e45ef583258361ab9a435e652fab724eca3766369980",
          "md5": "577ead465fccbaefc907406ef33ec531",
          "sha256": "135e4e2733a68e978d758356965b2848726ff8f64efe07e4b0e1ec0230ea6811"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "577ead465fccbaefc907406ef33ec531",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17037,
        "upload_time": "2022-08-05T19:47:12",
        "upload_time_iso_8601": "2022-08-05T19:47:12.990865Z",
        "url": "https://files.pythonhosted.org/packages/f0/72/15937ef386332fd4e45ef583258361ab9a435e652fab724eca3766369980/airflow_tecton-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836ea5642c88586072cffc4456f2b5da1ea7aa3b7893649d2d0386d04c792dd3",
          "md5": "5fb5da551a870ad24048ce7475bf2989",
          "sha256": "50da4c41efaf928300982c145e20429b4b1f219584babbb9f99ebb3305fba393"
        },
        "downloads": -1,
        "filename": "airflow-tecton-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fb5da551a870ad24048ce7475bf2989",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11240,
        "upload_time": "2022-08-05T19:47:14",
        "upload_time_iso_8601": "2022-08-05T19:47:14.522238Z",
        "url": "https://files.pythonhosted.org/packages/83/6e/a5642c88586072cffc4456f2b5da1ea7aa3b7893649d2d0386d04c792dd3/airflow-tecton-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b59c6639c4cb112c4ac30d9de7f938cd54866b6fe346c218ac752314f9e2f635",
          "md5": "74d30781516eb8be69595c003cad1ce1",
          "sha256": "6dbb3d301b6422423ce1862a73c6ce12777881639814b8829b2f62c5e6d8ffc3"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "74d30781516eb8be69595c003cad1ce1",
        "packagetype": "bdist_egg",
        "python_version": "0.0.2",
        "requires_python": ">=3.7",
        "size": 26923,
        "upload_time": "2022-10-26T22:31:18",
        "upload_time_iso_8601": "2022-10-26T22:31:18.351768Z",
        "url": "https://files.pythonhosted.org/packages/b5/9c/6639c4cb112c4ac30d9de7f938cd54866b6fe346c218ac752314f9e2f635/airflow_tecton-0.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a1782384290757beef497af14630036722387a2c25c7c7a4b27f9524e53741d",
          "md5": "ba389bde092a24fadaf24b964bd1f74d",
          "sha256": "71970390d02fe6120b708968c9adeaafc563d1a1bef35cd62351d9af12309dff"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba389bde092a24fadaf24b964bd1f74d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19237,
        "upload_time": "2022-10-26T22:31:16",
        "upload_time_iso_8601": "2022-10-26T22:31:16.206077Z",
        "url": "https://files.pythonhosted.org/packages/7a/17/82384290757beef497af14630036722387a2c25c7c7a4b27f9524e53741d/airflow_tecton-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f311bed19e5c35460d6f42c44b3a83c438f138f49e140168d7b86c7607e98a6",
          "md5": "f81ccbd3e7c816435175d59fd59bd152",
          "sha256": "d0477a3169694e3aaff10331c29c876bc8c2a43b67f0cfcd9cee828befb2f5cb"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.2b0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "f81ccbd3e7c816435175d59fd59bd152",
        "packagetype": "bdist_egg",
        "python_version": "0.0.2b0",
        "requires_python": ">=3.7",
        "size": 26647,
        "upload_time": "2022-10-26T21:55:09",
        "upload_time_iso_8601": "2022-10-26T21:55:09.598962Z",
        "url": "https://files.pythonhosted.org/packages/1f/31/1bed19e5c35460d6f42c44b3a83c438f138f49e140168d7b86c7607e98a6/airflow_tecton-0.0.2b0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ef66b3261c31eb2d9654049e21f927d7eac548f12b5ff17478d49a42abada0",
          "md5": "cfd9cf5f28cd7cf4043e1444a30ee24a",
          "sha256": "20261e8f16debfe827d61666903ce15855c3f827866ce3429f1b96b535925f88"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.2b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfd9cf5f28cd7cf4043e1444a30ee24a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19193,
        "upload_time": "2022-10-26T21:55:06",
        "upload_time_iso_8601": "2022-10-26T21:55:06.757337Z",
        "url": "https://files.pythonhosted.org/packages/a7/ef/66b3261c31eb2d9654049e21f927d7eac548f12b5ff17478d49a42abada0/airflow_tecton-0.0.2b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b2afa158da1df0f62090517bc4f814b226f2e0422ecd9d1632b88dd8526159",
          "md5": "8573a84e1e33a2ccf1c07a892bcf5053",
          "sha256": "57972ee830b6dc2e65272b2480120e28a0ab32da8b7e18c10cfc32f768134496"
        },
        "downloads": -1,
        "filename": "airflow_tecton-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8573a84e1e33a2ccf1c07a892bcf5053",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19565,
        "upload_time": "2023-03-16T21:33:44",
        "upload_time_iso_8601": "2023-03-16T21:33:44.222135Z",
        "url": "https://files.pythonhosted.org/packages/54/b2/afa158da1df0f62090517bc4f814b226f2e0422ecd9d1632b88dd8526159/airflow_tecton-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d1d335445c881937df4f10b5549ad93da721dde6e706d77289c0cb13cec2ee",
          "md5": "5f5205a9a1bd566692aa1b9424027650",
          "sha256": "e70f808a71ef265111e96ca157a7141f51b8fc7a6faaabfa246d4f381867c8de"
        },
        "downloads": -1,
        "filename": "airflow-tecton-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5f5205a9a1bd566692aa1b9424027650",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15551,
        "upload_time": "2023-03-16T21:33:46",
        "upload_time_iso_8601": "2023-03-16T21:33:46.383780Z",
        "url": "https://files.pythonhosted.org/packages/b4/d1/d335445c881937df4f10b5549ad93da721dde6e706d77289c0cb13cec2ee/airflow-tecton-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54b2afa158da1df0f62090517bc4f814b226f2e0422ecd9d1632b88dd8526159",
        "md5": "8573a84e1e33a2ccf1c07a892bcf5053",
        "sha256": "57972ee830b6dc2e65272b2480120e28a0ab32da8b7e18c10cfc32f768134496"
      },
      "downloads": -1,
      "filename": "airflow_tecton-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8573a84e1e33a2ccf1c07a892bcf5053",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19565,
      "upload_time": "2023-03-16T21:33:44",
      "upload_time_iso_8601": "2023-03-16T21:33:44.222135Z",
      "url": "https://files.pythonhosted.org/packages/54/b2/afa158da1df0f62090517bc4f814b226f2e0422ecd9d1632b88dd8526159/airflow_tecton-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4d1d335445c881937df4f10b5549ad93da721dde6e706d77289c0cb13cec2ee",
        "md5": "5f5205a9a1bd566692aa1b9424027650",
        "sha256": "e70f808a71ef265111e96ca157a7141f51b8fc7a6faaabfa246d4f381867c8de"
      },
      "downloads": -1,
      "filename": "airflow-tecton-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5f5205a9a1bd566692aa1b9424027650",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15551,
      "upload_time": "2023-03-16T21:33:46",
      "upload_time_iso_8601": "2023-03-16T21:33:46.383780Z",
      "url": "https://files.pythonhosted.org/packages/b4/d1/d335445c881937df4f10b5549ad93da721dde6e706d77289c0cb13cec2ee/airflow-tecton-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}