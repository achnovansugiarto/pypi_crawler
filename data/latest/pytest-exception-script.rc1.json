{
  "info": {
    "author": "qporest",
    "author_email": "ihor.husar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Pytest",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Plugin Tests](https://github.com/qporest/pytest-exception-script/workflows/Plugin%20Tests/badge.svg?branch=master)\n# pytest-exception-script\nThe goal of this pytest plugin is to allow quick and easy testing of your application's resiliency. This is accomplished by creating exception scripts / scenarios which allow you to inject exceptions into your code execution without having to repeatedly set-up tests.\n\nThis won't work for applications that have multiple processes, but should work with threads (need to do more testing). Under the hood it's just abusing monkeypatch.\n\n### Structure\nScripts can be written in YAML or TOML.\nEach script / scenario (these will be used interchangeably below) consists of multiple acts, each of which can have multiple actions. Scenario is successful and complete if every act in it is complete.\n**To have your script detected**: make sure it starts with `chaos_` and is a toml or yaml file. It will get auto-discovered by pytest, or you can call pytest directly against the file.\n\n#### Examples of config files:\nUsing `yaml`\n```\nentry-point: tests.fake_app_success.factory\nnext-point: tests.fake_app_success.process_data\nacts:\n  - tests.fake_app_success.get_data:\n      - exc: KeyError, \"Error in act I\"\n        next-point: \n    tests.fake_app_success.unused_method:\n      - exc: OSError, \"Custom message passed\"\n  - tests.fake_app_success.get_data:\n      - exc: KeyError\n```\nUsing `toml`\n```\nentry-point=\"tests.fake_app_success.factory\"\nnext-point=\"tests.fake_app_success.process_data\"\n[[act]]\n[[act.\"tests.fake_app_success.get_data\"]]\nexc=\"KeyError\"\nnext-point=\"tests.fake_app_success.process_data\"\n[[act]]\n[[act.\"tests.fake_app_success.get_data\"]]\nexc=\"KeyError\"\n[[act]]\n[[act.\"tests.fake_app_success.get_data\"]]\nexc=\"KeyError\"\n```\n#### What's happening here?\n`entry-point` should be a factory for your application that takes no parameters.\n`next-point` - can be specified globally, per act, or both. Once this method gets called script will move on to the next act.\n`acts` - list of acts each of which consists of actors. Each Actor is a method and an exception that it will throw if called during execution.\n`exc` - exception to raise.\n\nSo factory will be loaded and started, upon which first act starts. Every time when `get_data` will get called `KeyError` will be raised. With either a default or a custom message. Once `next-point` gets called next act starts. Once `next-point` of the last act is called the application terminates (hopefully) and all the tests get marked as complete.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/qporest/pytest-exception-script",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-exception-script",
    "package_url": "https://pypi.org/project/pytest-exception-script/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-exception-script/",
    "project_urls": {
      "Homepage": "https://github.com/qporest/pytest-exception-script"
    },
    "release_url": "https://pypi.org/project/pytest-exception-script/0.1.0/",
    "requires_dist": [
      "PyYAML",
      "toml",
      "Werkzeug",
      "pytest"
    ],
    "requires_python": "",
    "summary": "Walk your code through exception script to check it's resiliency to failures.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7877524,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f34cc56b5f515ff4f1e2298f5db477289497be96bae25a5da2c3ad0b0a95036",
          "md5": "c5cbd04686e90511ecec0d7a4b795ebd",
          "sha256": "1eede3f3c0373ad0f7ab33748237d1f857b4e35a2d9253ff0914fb5dafd5046a"
        },
        "downloads": -1,
        "filename": "pytest_exception_script-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5cbd04686e90511ecec0d7a4b795ebd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24325,
        "upload_time": "2020-08-04T03:43:50",
        "upload_time_iso_8601": "2020-08-04T03:43:50.486037Z",
        "url": "https://files.pythonhosted.org/packages/7f/34/cc56b5f515ff4f1e2298f5db477289497be96bae25a5da2c3ad0b0a95036/pytest_exception_script-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d73e0a7dd00ebe9e034a0a7f57fa0afaf7c9222e55ed07e87c22cf90a6562c6",
          "md5": "9daddcc1abbff0493b4fab44d7fd1617",
          "sha256": "5869158f7e7d85a8f11beb33e6994b0907963bc174bf74410911a3c347a06e49"
        },
        "downloads": -1,
        "filename": "pytest-exception-script-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9daddcc1abbff0493b4fab44d7fd1617",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10634,
        "upload_time": "2020-08-04T03:43:52",
        "upload_time_iso_8601": "2020-08-04T03:43:52.550097Z",
        "url": "https://files.pythonhosted.org/packages/9d/73/e0a7dd00ebe9e034a0a7f57fa0afaf7c9222e55ed07e87c22cf90a6562c6/pytest-exception-script-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f34cc56b5f515ff4f1e2298f5db477289497be96bae25a5da2c3ad0b0a95036",
        "md5": "c5cbd04686e90511ecec0d7a4b795ebd",
        "sha256": "1eede3f3c0373ad0f7ab33748237d1f857b4e35a2d9253ff0914fb5dafd5046a"
      },
      "downloads": -1,
      "filename": "pytest_exception_script-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5cbd04686e90511ecec0d7a4b795ebd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24325,
      "upload_time": "2020-08-04T03:43:50",
      "upload_time_iso_8601": "2020-08-04T03:43:50.486037Z",
      "url": "https://files.pythonhosted.org/packages/7f/34/cc56b5f515ff4f1e2298f5db477289497be96bae25a5da2c3ad0b0a95036/pytest_exception_script-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d73e0a7dd00ebe9e034a0a7f57fa0afaf7c9222e55ed07e87c22cf90a6562c6",
        "md5": "9daddcc1abbff0493b4fab44d7fd1617",
        "sha256": "5869158f7e7d85a8f11beb33e6994b0907963bc174bf74410911a3c347a06e49"
      },
      "downloads": -1,
      "filename": "pytest-exception-script-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9daddcc1abbff0493b4fab44d7fd1617",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10634,
      "upload_time": "2020-08-04T03:43:52",
      "upload_time_iso_8601": "2020-08-04T03:43:52.550097Z",
      "url": "https://files.pythonhosted.org/packages/9d/73/e0a7dd00ebe9e034a0a7f57fa0afaf7c9222e55ed07e87c22cf90a6562c6/pytest-exception-script-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}