{
  "info": {
    "author": "Rayhan Mia",
    "author_email": "miarayhan11@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# pyros-api\n## A simplified routerOS api in python!\n```\nThanks to Social WiFi for their incredible RouterOS-api\n```\npyros-api is a simple python api for [MikroTik](https://mikrotik.com/) RouterOS extended from [RouterOS-api](https://github.com/socialwifi/RouterOS-api). \\\npyros-api on [PyPi](https://pypi.org/project/pyros-api/)\n\n### Why Another API?\nWell, I find the routeros-api by socialwifi (no offense, their api is great!) is complicated unless you are well familiar with routerOS.\\\nThough I was somewhat familiar with routerOS I still needed to often search on google and play with winbox/cli to do a simple stuff. \\\nAnd the most embarrassing part is I used to often forget what I did to achieve something let's say a day ago If I deleted or needed to implement the same logic with a bit of twist.\\\nThat's where this api comes in. There's not many functions are simplified so far but I will be working on this and will update with more simplified api. Any contribution is welcome.\n\n\n## Usage\n\n### Connection\n\n```python\n#!/usr/bin/python\n\nimport pyros_api\n\nconnection = pyros_api.RosCall('Mikrotik IP', username='admin', password='')\nconnection.login()\nconnection.get_ppp_secret()\n```\n\n#### Connect Options\n\n```python\npyros_api.RosCall(\n    host,\n    username='admin',\n    password='',\n    port=8728,\n    use_ssl=False,\n    ssl_verify=True,\n    ssl_verify_hostname=True,\n    ssl_context=None,\n)\n```\n\nParameters:\n\n* `host` - String - Hostname or IP of device\n\nOptional Parameters:\n\n* `username` - String - Login username - Default 'admin'\n* `password` - String - Login password - Default empty string\n* `port` - Integer - TCP Port for API - Default 8728 or 8729 when using SSL\n* `plaintext_login` - Boolean - Try plaintext login (for RouterOS 6.43 onwards) - Default **False**\n* `use_ssl` - Boolean - Use SSL or not? - Default **False**\n* `ssl_verify` - Boolean - Verify the SSL certificate? - Default **True**\n* `ssl_verify_hostname` - Boolean - Verify the SSL certificate hostname matches? - Default **True**\n* `ssl_context` - Object - Pass in a custom SSL context object. Overrides other options. - Default **None**\n\n#### Using SSL\n\nIf we want to use SSL, we can simply specify `use_ssl` as `True`:\n\n```python\nconnection = pyros_api.RosCall('<IP>', username='admin', password='', use_ssl=True)\nconnection.login()\n```\n\nThis will automatically verify SSL certificate and hostname. \nThe most flexible way to modify SSL parameters is to provide an SSL Context object using the \n`ssl_context` parameter, but for typical use-cases with self-signed certificates, the shorthand options of\n `ssl_verify` and `ssl_verify_hostname` are provided.\n\ne.g. if using a self-signed certificate, you can (but probably shouldn't) use:\n\n```python\nconnection = pyros_api.RosCall(\n    '<IP>',\n    username='admin',\n    password='',\n    use_ssl=True,\n    ssl_verify=False,\n    ssl_verify_hostname=False,\n)\n```\n\n#### Login for RouterOS v6.43 onwards\n\nRouterOS Versions v6.43 onwards now use a different login method. \nThe disadvantage is that it passes the password in plain text. \nFor security we only attempt the plaintext login if requested using the `plaintext_login` parameter. \nIt is highly recommended only to use this option with SSL enabled.\n\n```python\npyros_api.RosCall(host, username='admin', password='', plaintext_login=True)\nconnection.login()\n```\n\n### Execute Commands\n\nAfter successfully connecting with routerOS you can call all the available functions.\n\n### Examples\n```python\nx = connection.get_ppp_secret()\nprint(x)  # print list of all ppp secrets from routerOS\n```\n\n```python\n# changes password of given ppp secret. e.g.: secret = 'abc1 & password = '1234'\nx = connection.update_secret_password(secret, password)\n```\n\n#### Create New PPP Secret\n```\nsecret = {\n    'c_ident': '',\n    'p_pw': '',\n    'profile': 'default',\n    'service_type': 'pppoe',\n    'comment': '',\n    'has_suspended': False\n }\n```\nSecret Dictionary Key-Value Pair:\n\n* `c_ident` - String - PPP secret name (e.g: abc1) - Default empty string\n\nOptional Keys:\n\n* `p_pw` - String - PPP secret password - Default empty string\n* `profile` - String - PPP secret profile - Default 'default' profile\n* `service_type` - String - PPP secret service type (e.g: pptp/any/pppe) - Default pppoe\n* `comment` - String - PPP secret comment - Default empty string\n* `has_suspended` - Boolean - PPP secret state after creation (e.g: if True then after creating the secret the ppp secret will be disabled) - Default **False**\n##### Example\n```python\nsecret = {\n    'c_ident': 'abc5',\n    'p_pw': '1234',\n    'profile': 'default',\n    'service_type': 'pppoe',\n    'comment': 'This is a dummy comment!',\n    'has_suspended': False\n}\nconnection.add_ppp_secret(secret)  # returns True if successfully created\n```\n\n### Close conection:\n\n```python\nconnection.disconnect()\n```\n\n## socialWifi's routerOS-api API's\n\nEverything from the routerOS-api by socialWifi is also available by invoking the given function.\n```\napi = connection.ros_api_raw()\n```\nNow we can access all the functions from the routerOS-api by socialWifi.\n#### Example\n```\napi = connection.ros_api_raw()\nlist_ppp = api.get_resource('/ppp/secret')\nprint(list_ppp.get())  # prints all ppp secrets\n```\nTo learn more about how to access API's from [RouterOS-api] by Social WiFi please visit their [repository].\n\nAny contribution is welcome! Thanks.\n\n\n\n\n[RouterOS-api]: <https://github.com/socialwifi/RouterOS-api>\n[repository]: <https://github.com/socialwifi/RouterOS-api>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cykyy/pyros-api",
    "keywords": "routerOS,mikrotik,routeros-api,routeros-python-api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyros-api",
    "package_url": "https://pypi.org/project/pyros-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyros-api/",
    "project_urls": {
      "Documentation": "https://github.com/cykyy/pyros-api",
      "Homepage": "https://github.com/cykyy/pyros-api",
      "Source Code": "https://github.com/cykyy/pyros-api"
    },
    "release_url": "https://pypi.org/project/pyros-api/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simplified routerOS api in python!",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7952383,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "122c08ede2441a67ec2913c4dfcf938f9373e00a6bc1e32ead788d31ce101692",
          "md5": "30df4b681cd6bb6f31fae0857f43ace2",
          "sha256": "aac7a08c0c12a7837cdea98d2ee8d3872502ff7fdadc3ddefb02e38bfcf90f1c"
        },
        "downloads": -1,
        "filename": "pyros_api-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30df4b681cd6bb6f31fae0857f43ace2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7142,
        "upload_time": "2020-08-10T17:55:06",
        "upload_time_iso_8601": "2020-08-10T17:55:06.609129Z",
        "url": "https://files.pythonhosted.org/packages/12/2c/08ede2441a67ec2913c4dfcf938f9373e00a6bc1e32ead788d31ce101692/pyros_api-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "510b21f6dabadb752e2e7b12608c2ffa02efc9fceec4129c141ee81f1bdae206",
          "md5": "f393d482ec8919e755a4768ff035ec5d",
          "sha256": "5b762e411c81313603fb49b69477e4fb4b6205b98cd8f50db21ff6422c08c58e"
        },
        "downloads": -1,
        "filename": "pyros_api-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f393d482ec8919e755a4768ff035ec5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7119,
        "upload_time": "2020-08-10T18:35:45",
        "upload_time_iso_8601": "2020-08-10T18:35:45.992099Z",
        "url": "https://files.pythonhosted.org/packages/51/0b/21f6dabadb752e2e7b12608c2ffa02efc9fceec4129c141ee81f1bdae206/pyros_api-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e069e8dce59c591e5d97520f606da0f6dbc78e3939c49b2535218724b05c58d0",
          "md5": "94cc6a7792eac9d0a821148a42ff1c98",
          "sha256": "2b82cf8ddf29e76513574a983e18c7c4cb24b4e9d32904a97e3693220fbcdc76"
        },
        "downloads": -1,
        "filename": "pyros_api-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94cc6a7792eac9d0a821148a42ff1c98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7200,
        "upload_time": "2020-08-11T21:55:55",
        "upload_time_iso_8601": "2020-08-11T21:55:55.092830Z",
        "url": "https://files.pythonhosted.org/packages/e0/69/e8dce59c591e5d97520f606da0f6dbc78e3939c49b2535218724b05c58d0/pyros_api-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1b186a2b0fbba95227b138695eb6030ba67eb849dec645e2f13672ce54c1d00",
          "md5": "96ff32b991b65a9404c86ac0756ecdcc",
          "sha256": "ca6b82570c216dc26d749ba4cd1cf9c4cd38ae10f5d68515e550399ef7ff582f"
        },
        "downloads": -1,
        "filename": "pyros_api-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "96ff32b991b65a9404c86ac0756ecdcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7213,
        "upload_time": "2020-08-13T13:29:33",
        "upload_time_iso_8601": "2020-08-13T13:29:33.138781Z",
        "url": "https://files.pythonhosted.org/packages/a1/b1/86a2b0fbba95227b138695eb6030ba67eb849dec645e2f13672ce54c1d00/pyros_api-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1b186a2b0fbba95227b138695eb6030ba67eb849dec645e2f13672ce54c1d00",
        "md5": "96ff32b991b65a9404c86ac0756ecdcc",
        "sha256": "ca6b82570c216dc26d749ba4cd1cf9c4cd38ae10f5d68515e550399ef7ff582f"
      },
      "downloads": -1,
      "filename": "pyros_api-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "96ff32b991b65a9404c86ac0756ecdcc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7213,
      "upload_time": "2020-08-13T13:29:33",
      "upload_time_iso_8601": "2020-08-13T13:29:33.138781Z",
      "url": "https://files.pythonhosted.org/packages/a1/b1/86a2b0fbba95227b138695eb6030ba67eb849dec645e2f13672ce54c1d00/pyros_api-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}