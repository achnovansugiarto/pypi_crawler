{
  "info": {
    "author": "Gary Lee",
    "author_email": "garywlee@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# What is cmdlet?\n\nCmdlet provides pipe-like mechanism to cascade functions and generators. It\nuses symbol(**|**) to convert function to Pipe object and cascade them. This\nsequence of commands can be executed and evaluated later. Just like pipe\nmechanism in Unix shell. For example:\n\n```python\nfrom cmdlet.cmds import *\n\n# Create piped commands.\ncmds = range(10) | pipe.filter(lambda x: x > 5) | fmt('item#%d')\n\n# Execute commands and return the last processed data.\nrun(cmds)\n# >>> 'item#9'\n\n# Execute commands and return processed data in a list.\nresult(cmds)\n# >>> ['item#6', 'item#7', 'item#8', 'item#9']\n\n# Execute commands and return iterator for processed data.\nfor data in cmds:\n    print data\n# >>> item#6\n# >>> item#7\n# >>> item#8\n# >>> item#9\n\n```\n\nFirst, we created commands and used **|** to cascade them. Then, we can execute\ncommands by run(), result() or iterator.\n\ncmdlet can convert corresponding types to Pipe object automatically. In above\nexample, range(10) is an iterator not a Pipe object. Because second item is\na Pipe object(made by pipe.filter), it turns out first item to be converted\nto a Pipe object automatically.\n\nThere are many useful utilities in cmdlet.cmds modules. They can provide a great\nconvenience to build up useful pipes. Here is an example:\n\n```python\nfrom cmdlet.cmds import *\n\nquery_topic =\n    'find ./mydoc -name \"*.txt\" -print' |\n    readline(end=10) |\n    match(r'^[tT]opic:\\s*(?P<topic>.+)\\s*', to=dict) |\n    values('topic')\n\nfor topic in query_topic:\n    print topic\n```\n\nIn above example, the goal is to query topic from article files. To achieve the\ngoal, we have to:\n\n1. Search text files in a given folder.\n2. Read first 10 lines from each file.\n3. Find the line that matched 'topic: foo bar' pattern.\n4. Extract the topic string.\n\nWith the utilities provided by *cmdlet.cmds*, we only need to write a few of\ncode. The first string which starts with 'find' is a normal shell script. It is\nconverted to *sh* pipe automatically and executed with system shell. The\n*readline* pipe can open files whose name passed from sh pipe. *match* pipe\nand *values* pipe work together to extract topic from file content.\n\nAbove example shows not only small code but also readability. It's really easy\nto understand the purpose of source code.\n\nNOTE:\n> When using cmdlet's pipe mechanism, make sure one of your\n> **first two pipe items** is a valid Pipe object.\n\nThere is another advantage to use cmdlet. The pipe object is evaluated when\ncalling result, run or iter. It implies you can reuse them. Let's modify\nprevious example.\n\n```python\nfrom cmdlet.cmds import *\n\n# Separate from query_topic command.\nextract_topic =\n    readline(end=10) |\n    match(r'^[tT]opic:\\s*(?P<topic>.+)\\s*', to=dict) |\n    values('topic')\n\nfor topic in ('find ./mydoc1 -name \"*.txt\" -print' | extract_topic):\n    print topic\n\nfor topic in ('find ../mydoc2 -name \"*.md\" -print' | extract_topic):\n    print topic\n\n```\n\n# How to install\n\nJust like other packages on PyPI. You can use pip to download and install\nautomatically.\n\n```shell\n$ pip install cmdlet\n```\n\n# Run piped commands and get result\n\nThere are 3 ways to execute piped commands and get the result.\n\n1. Use **run(cmds)** or **cmds.run()** to execute cmds and get the last\n   processed data. Use this if you don't need all processed data. Or, the tasks\n   you need to do have been done by cascaded Pipe objects.\n\n2. Use **result(cmds)** or **cmds.result()** to get the processed data in a list.\n   Use this method when you need to take all processed data to other mechanisms.\n\n3. Use cmds as a **iterator** to handle the processed data one by one. It treats\n   cascaded Pipe objects as a pre-processing function. Use it to process data and\n   invoke it by a for loop to do the last processing by yourself.\n\n\n# Function wrapper\n\nFunction should not be used in pipes directly, unless using auto-type\nconversion. Cmdlet provides a set of basic wrappers to wrap function to Pipe\nobject.\n\n## pipe.func(generator_function)\n\nThe most basic wrapper. In Python, generator function is a function with yield\nstatement in it. The generator_function defined here is a Python generator\nfunction with at least one argument. The first argument is a generator object\npassed by previous Pipe object. generator_function can take it as input or just\nleave it. It looks like:\n\n```python\n# Generator function which use prev as input.\n@pipe.func\ndef my_generator(prev):\n    for data in prev:\n        # ... Put some code to process data ...\n        yield new_data\n```\n```python\n# Generator function which ignore input.\n@pipe.func\ndef my_generator_ignore_prev(prev):\n    while True:\n        # ... Generate data and break loop in some conditions. ...\n        yield data\n```\n\nFor example:\n```python\n@pipe.func\ndef randint_generator(prev, num):\n    for i in range(num):\n        yield random.randint(0, 1000)\n\n@pipe.func\ndef power(prev, th):\n    for n in prev:\n        yield n ** th\n\ncmds = randint_generator(10) | power\nans = result(cmds)\n# Equals to:\n# ans = []\n# for i in range(10):\n#     ans.append(random.randint(0, 1000)\n```\n\n\n## pipe.map(function)\n\nWrap function to a mapper. The input is a normal function with at least one\nargument for data input. The returned value will be passed to next\nPipe object. It looks like:\n\n```python\n@pipe.map\ndef my_mapper(data):\n    # ... Put some code to process data ...            \n    return new_data\n```\n\nFor example:\n```python\n@pipe.func\ndef randint_generator(prev, num):\n    for i in range(num):\n        yield random.randint(0, 1000)\n\n@pipe.map\ndef power(n, th):\n    return n ** th\n\ncmds = randint_generator(10) | power\nans = result(cmds)\n# Equals to:\n# ans = []\n# for i in range(10):\n#     ans.append(random.randint(0, 1000)\n```\n\nThe power pipe can also be written in this way:\n```python\npower = pipe.map(lambda n, th: n ** th)\n```\n\nAnything returned by mapper will be sent to next Pipe object. If mapper return\nNone, next Pipe object will receive None. That is, you can't use mapper to\nfilter data out. That's why we have pipe.filter.\n\n## pipe.filter(function)\n\nWrap function to a filter. Filter is a function with at least one argument as\ndata input. Filter should return Boolean value, True or False. If True, data\nfrom previous Pipe object is allowed to pass through. If False, data is dropped.\nIt looks like:\n\n```python\n@pipe.filter\ndef my_filter(data):\n    # Handle data and check conditions.\n    if you_should_not_pass:\n        return False\n    else:\n        return True\n```\n\nFor example:\n```python\n@pipe.filter\ndef less_than(data, thrd):\n    return data < thrd\n\ncmds = range(10) | less_than(3)\nans = result(cmds)\n# Equals to:\n# ans = []\n# thrd = 3\n# for n in range(10):\n#     if n < thrd:\n#          ans.append()\n```\n\nYou can write filter pipe in this way:\n```python\nless_than = pipe.filter(lambda data, thrd: data < thrd)\n```\n\n## pipe.reduce(function)\n\nWrap function as a reducer. A reducer is a function which has at least two\narguments. The first one is used as accumulated result, the second one is\nthe data to be processed. A optional keyword argument *init* can be used to\nspecify initial value to accumulated result. It looks like:\n\n```python\n@pipe.reduce\ndef my_reducer(accum_result, data):\n    # Calculate new accum_result according to data.\n    return accum_result\n```\n\nFor example:\n```python\n@pipe.reduce\ndef count_mod(accum_result, data, mod_by):\n    if (data % mod_by) == 0:\n        return accum_result\n    else:\n        return accum_result + 1\n\ncmds = range(1000) | count_mod(10, init=0)\n```\n\n## pipe.stopper(function)\n\nWrap function as a stopper. Stopper is used to stop the pipe execution. It\nreturns true to stop the pipe execution. Return false to pass data to next.\nIt looks like:\n\n```python\n@pipe.stopper\ndef my_stopper(data):\n    if check_stop_criteria(data):\n        return True\n    return False\n```\n\n\n## The usage of wrapper\n\nHere is a example to show how to use function wrapper.\n\n```python\nfrom random import randint\nfrom cmdlet.cmds import *\n\n@pipe.func\ndef random_number(prev, amount):\n    for i in range(amount):\n        yield randint(0, 100000)\n\n@pipe.filter\ndef in_range(data, lower_bound, upper_bound):\n    return data >= lower_bound and data <= upper_bound\n\n@pipe.reduce\ndef count(accum_result, data):\n    return accum_result + 1\n\n@pipe.map\ndef format_output(data, format):\n    return format % data\n\n# Generate 1000 random number and count how many of them between 100 and 500.\n# Then, format the result to 'ans=%d'.\ncmds = random_number(1000) | in_range(100, 500) | count(init=0) | format_output('ans=%d')\n\nprint cmds.run()\n# >>> ans=40\n```\n\nIf wrapped code is just a expression, following code shows another way to make\nthem:\n\n```python\nin_range = pipe.filter(lambda data: data >= lower_bound and data <= upper_bound)\ncount = pipe.reduce(lambda accum_result, data: accum_result + 1)\nformat_output = pipe.reduce(lambda data, format: format % data)\n```\n\nNOTE:\n> As you might already noticed, the number of argument using in piped commands\n> is different from the definition of wrapped function. You should know your\n> function is wrapped to a Pipe object. The function is not invoked when\n> cascading pipes. It is called when using run(), result() or iteration. The\n> arguments will be stored in Pipe object and append to the argument list of\n> wrapped function when it is invoked.\n\n## Auto-type conversion\n\nIf the operand of **|** operator is not a Pipe object, cmdlet will call proper\ncreator to convert and wrap it to a Pipe object. The data type of operand must\nbe registered in cmdlet. Otherwise, exception *UnregisteredPipeType* will be\nraised.\n\ncmdlet.cmds has registered some basic types by default. You can use them\ndirectly.\n\n| Type     | wrapper  | Description                                 |\n| -------- | -------- | ------------------------------------------- |\n| type     | pipe.map | Convert processed data to specified type    |\n| function | pipe.map | Wrap function as a mapper.                  |\n| method   | pipe.map | Wrap method as a mapper.                    |\n| tuple    | seq      | Wrap tuple to generator.                    |\n| list     | seq      | Wrap list to generator.                     |\n| str      | sh       | Wrap string to command line and execute it. |\n| unicode  | sh       | Wrap string to command line and execute it. |\n| file     | fileobj  | Wrap file object for read/write operation.  |\n\n\n# cmdlet.cmds utilities.\n\ncmdlet.cmds has predefined some commands. Here are brief descriptions.\n\n## Pipe commnds for iterable object.\n\n| Command  | Description                                                |\n| -------- | ---------------------------------------------------------- |\n| pack     | Take N elements from pipe and group them into one element. |\n| enum     | Generate (index, value) pair from previous pipe.           |\n| counter  | Count the number of data from previous pipe.               |\n| flatten  | Flatten the data passed from previous pipe.                |\n| items    | Extract (key, value) pair from a dict-like object.         |\n| seq      | Extract any iterable object.                               |\n| attr     | Extract the value of given attribute from previous pipe.   |\n| attrs    | Extract the value of given attributes from previous pipe.  |\n| attrdict | Extract the value of given attributes from previous pipe.  |\n\n## Pipe commands for file\n\n| Command  | Description                               |\n| -------- | ----------------------------------------- |\n| stdout   | Output data from previous pipe to stdout. |\n| stderr   | Output data from previous pipe to stderr. |\n| readline | Read data from file line by line.         |\n| fileobj  | Read/write file with pipe data.           |\n\n## Pipe commands for shell\n\n| Command | Description                                                                                                                                |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| sh      | Execute system shell script to handle the stdin/stdout. The data from previous pipe will be the standard input of specified shell command. |\n| execmd  | Execute system shell script to handle the stdin/stdout. The data from previous pipe will be the command line to be executed.               |\n\n## Pipe commands for strings\n\n### Alias of string method\n\n| Command         | Description                                       |\n| --------------- | ------------------------------------------------- |\n| upper           | alias of string.upper                             |\n| lower           | alias of string.lower                             |\n| capwords        | alias of string.capwords                          |\n| capitalize      | alias of string.capitalize                        |\n| lstrip          | alias of string.lstrip                            |\n| rstrip          | alias of string.rstrip                            |\n| strip           | alias of string.strip                             |\n| expandtabs      | alias of string.expandtabs                        |\n| strip           | alias of string.strip                             |\n| find            | alias of string.find                              |\n| fmt             | alias of % operator of string (not string.format) |\n| rfind           | alias of string.rfind                             |\n| count           | alias of string.count                             |\n| split           | alias of string.split                             |\n| rsplit          | alias of string.rsplit                            |\n| swapcase        | alias of string.swapcase                          |\n| translate       | alias of string.translate                         |\n| ljust           | alias of string.ljust                             |\n| rjust           | alias of string.rjust                             |\n| center          | alias of string.center                            |\n| zfill           | alias of string.zfill                             |\n| replace         | alias of string.replace                           |\n| join            | alias of string.join                              |\n| substitute      | alias of string.Template.substitute               |\n| safe_substitute | alias of string.Template.safe_substitute          |\n\n### String split, search and match\n\n| Command  | Description                                                    |\n| -------- | -------------------------------------------------------------- |\n| grep     | Grep strings with regular expression.                          |\n| match    | Grep strings with regular expression and generate MatchObject. |\n| wildcard | Grep strings with wildcard character.                          |\n| resplit  | Split strings with regular expression.                         |\n| sub      | Substitute strings with regular expression.                    |\n| subn     | Substitute strings with regular expression.                    |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/GaryLee/cmdlet/tarball/v0.4.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GaryLee/cmdlet",
    "keywords": "pipe,generator,iterator,sh,shell,infix,operator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmdlet",
    "package_url": "https://pypi.org/project/cmdlet/",
    "platform": "",
    "project_url": "https://pypi.org/project/cmdlet/",
    "project_urls": {
      "Download": "https://github.com/GaryLee/cmdlet/tarball/v0.4.2",
      "Homepage": "https://github.com/GaryLee/cmdlet"
    },
    "release_url": "https://pypi.org/project/cmdlet/0.4.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cmdlet provides pipe-like mechanism to cascade functions and generators.",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8071709,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e701af2ead5687594bf1609b738d39d378083559d37b47180f6fc077b93ed5d7",
          "md5": "d3ca093abc6792afba8af6bfdf7c5c11",
          "sha256": "1b77ae6996a396f72f39f5716b370f1a4d362f5ca6fa67da56a5cfd83242b713"
        },
        "downloads": -1,
        "filename": "cmdlet-0.2.zip",
        "has_sig": false,
        "md5_digest": "d3ca093abc6792afba8af6bfdf7c5c11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19940,
        "upload_time": "2015-11-24T16:58:41",
        "upload_time_iso_8601": "2015-11-24T16:58:41.301730Z",
        "url": "https://files.pythonhosted.org/packages/e7/01/af2ead5687594bf1609b738d39d378083559d37b47180f6fc077b93ed5d7/cmdlet-0.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1767cfadf37a29dd0a505883eee49a94cdd7a738312e3a47ac945e2c112e910",
          "md5": "0ca6532695e713916439ff72e370c09d",
          "sha256": "6b1e196b389b0a7772f87868bd63e4fc8a4c201ea39a091fc63d1f4b1216108a"
        },
        "downloads": -1,
        "filename": "cmdlet-0.2.2.zip",
        "has_sig": false,
        "md5_digest": "0ca6532695e713916439ff72e370c09d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20072,
        "upload_time": "2015-11-25T01:05:14",
        "upload_time_iso_8601": "2015-11-25T01:05:14.996010Z",
        "url": "https://files.pythonhosted.org/packages/d1/76/7cfadf37a29dd0a505883eee49a94cdd7a738312e3a47ac945e2c112e910/cmdlet-0.2.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "229c08ec48169f7d0c9cbf122d40451e89fdca430fe96c6d28de9eee059e0d91",
          "md5": "bfed8a65d09e23a5c5517d7122212e73",
          "sha256": "6b3ec3254595ccb9fd03afb8f4fb268cd4394bb67f6aebe50c3666574d690f81"
        },
        "downloads": -1,
        "filename": "cmdlet-0.3.0.zip",
        "has_sig": false,
        "md5_digest": "bfed8a65d09e23a5c5517d7122212e73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25783,
        "upload_time": "2015-11-25T13:43:15",
        "upload_time_iso_8601": "2015-11-25T13:43:15.136509Z",
        "url": "https://files.pythonhosted.org/packages/22/9c/08ec48169f7d0c9cbf122d40451e89fdca430fe96c6d28de9eee059e0d91/cmdlet-0.3.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f986310a6efb6ff59bea632a1d14d6c88c4a2b03f5588951fc32295cf9af4132",
          "md5": "e8fd87d0434ad8590389f08dfee2fcf7",
          "sha256": "910d00801afd2a78e1e8d14f05c65a66140f45c0c85c5c5620af7000cb2d31fb"
        },
        "downloads": -1,
        "filename": "cmdlet-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e8fd87d0434ad8590389f08dfee2fcf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25398,
        "upload_time": "2020-08-30T14:57:40",
        "upload_time_iso_8601": "2020-08-30T14:57:40.012513Z",
        "url": "https://files.pythonhosted.org/packages/f9/86/310a6efb6ff59bea632a1d14d6c88c4a2b03f5588951fc32295cf9af4132/cmdlet-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f986310a6efb6ff59bea632a1d14d6c88c4a2b03f5588951fc32295cf9af4132",
        "md5": "e8fd87d0434ad8590389f08dfee2fcf7",
        "sha256": "910d00801afd2a78e1e8d14f05c65a66140f45c0c85c5c5620af7000cb2d31fb"
      },
      "downloads": -1,
      "filename": "cmdlet-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e8fd87d0434ad8590389f08dfee2fcf7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25398,
      "upload_time": "2020-08-30T14:57:40",
      "upload_time_iso_8601": "2020-08-30T14:57:40.012513Z",
      "url": "https://files.pythonhosted.org/packages/f9/86/310a6efb6ff59bea632a1d14d6c88c4a2b03f5588951fc32295cf9af4132/cmdlet-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}