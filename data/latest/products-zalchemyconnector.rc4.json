{
  "info": {
    "author": "Gabriel Diniz Gisoldo",
    "author_email": "gabrielgisoldi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Zope",
      "Framework :: Zope :: 4",
      "Framework :: Zope :: 5",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Products.ZAlchemyConnector\n\n[![PyPI version](https://badge.fury.io/py/Products.ZAlchemyConnector.svg)](https://badge.fury.io/py/Products.ZAlchemyConnector)\n\nZAlchemyConnector is a generic database adapter connector and text query wrapper for [Zope] using [SQLAlchemy].\nThe DA part of this product is basically a wrapper around [z3c.sqlalchemy], which provides easy to use integration with Zope transactions.\nThe text query wrapper part, works similarly to ZSQLMethods, but using SQLAlchemy syntax on SQL text for binding and replacing variables.\n\n#### Why use this product?\n - If you already use SQL files and do not want to change everything to ORM.\n     - This product offers the object Query, which executes text SQL querys over SQLAlchemy.\n- If  you do not want to create and DA and save it on ZODB.\n    - This product offers the object Wrapper, which allow you to create a database adapter inside another Zope product.\n\n## Requirements\n* z3c.sqlalchemy > 1.5.1\n* SQLAlchemy >= 0.5.5\n* zope.sqlalchemy >= 1.2.0\n* zope.component\n* zope.interface\n* zope.schema\n* zope.testing\n\n## Installation\nUsing pip:\n```sh\npip install Products.ZAlchemyConnector\n```\n## How to use\nThere's two ways to use this product, first is using the database adapter and second is using the Query object.\n\n### Wrapper\nThis is an example product using the wrapper class as the database adapter.\n```Python\nfrom Products.ZAlchemyConnector.Wrapper import Wrapper\nfrom OFS.SimpleItem import SimpleItem\n\nclass Example(SimpleItem):\n    meta_type = \"Example\"\n\n    def __init__(self, id, DBUrl):\n        self.id = id\n        self.DBUrl = DBUrl\n        self.wrapper = None\n        self.CreateWrapper()\n\n    def CreateWrapper(self):\n        self.wrapper = Wrapper(\n            id=\"wrapper\", dsn=self.DBUrl,\n            engine_options=((\"isolation_level\", \"REPEATABLE READ\"),\n                            (\"encoding\", \"8859\")))\n\n   [...]\n```\nLet's go over the code, this time with explanations.\nSo, the code above, basically creates a Zope Product named Example, which can be written on ZODB.\nThe attributes ``wrapper`` and ``DBUrl`` are the most important for our example.\n - ``wrapper`` - Stores the instance from the class Wrapper which we imported.\n - ``DBUrl`` - Stores the url location for your database. This url should be formatted according to [SQLAlchemy engine] url specifications.\n\n Now that we have the url, we can call the ``CreateWrapper`` method, which will create an instance of the ``Wrapper`` class and put it in ``self.wrapper``.\n The ``Wrapper`` class receives three parameters:\n\n - ``id`` - This is the ID of the instance. This is useful in case of error, since this ID is used by [SiteErrorLog] product.\n - ``dsn`` - This is the url we have stored in the ``DBUrl`` attribute.\n - ``engine_options`` - This receives other [SQLAlchemy engine] configurations.\n\nAfter creating this instance, we can now access this wrapper from anywhere inside the ``Example`` product. Here's an example on how to run a query using it:\n```Python\nfrom Products.ZAlchemyConnector.Wrapper import Wrapper\nfrom OFS.SimpleItem import SimpleItem\nfrom zope.sqlalchemy import mark_changed\n\nclass Example(SimpleItem):\n[...]\n    def RunTestExample(self):\n        session = self.wrapper.get_wrapper().session\n        mark_changed(session)\n        response = session.execute(\"Select * from example\")\n        print(response.fetchall())\n```\nAs you can see on the ``RunTestExample`` method, you just need to use the convenience function ``get_wrapper()`` to get access to the SQLAlchemy ``session`` and execute whatever query you want on the database.\n\n### Query\nThe ``Query`` class should be used with the ``Wrapper`` class of this product. The query object basically does everything we did inside the ``RunTestExample`` method behind the scene. \nThe code bellow is the rewritten version of ``RunTestExample``, but this time it's using the ``Query`` class \n\n```Python\nfrom Products.ZAlchemyConnector.Wrapper import Wrapper\nfrom Products.ZAlchemyConnector.Query import Query\nfrom OFS.SimpleItem import SimpleItem\n\nclass Example(SimpleItem):\n[...]\n    def RunTestExample(self):\n        _select = Query(\n            id=\"select\", get_wrapper=self.wrapper.get_wrapper,\n            template=\"Select * from example\")\n\n        print(_select())\n```\nAnother reason you should use the ``Query`` class is that it tries to enforce the types of the parameter you pass to the query, as shown bellow. \n```Python\nfrom Products.ZAlchemyConnector.Wrapper import Wrapper\nfrom Products.ZAlchemyConnector.Query import Query\nfrom OFS.SimpleItem import SimpleItem\n\nclass Example(SimpleItem):\n[...]\n    def RunTestExampleWithParams(self):\n        _select = Query(\n            id=\"select_with_params\",\n            get_wrapper=self.wrapper.get_wrapper,\n            template=\"Select * from example where id_example = :id_example\",\n            arguments=[{\"type\": \"int\", \"key\": \"id_example\"}])\n\n        print(_select(id_example=5))\n```\nIn the ``arguments`` parameter, you can pass a ``list`` of ``dicts`` with the configuration for each argument for your query. \n\nIn the example code, we are telling the ``Query`` object it will receive a parameter named ``id_example`` and that this parameter should be an ``int``.\n\nBehind the scenes, the ``Query`` object will bind the ``key`` received with the ``type`` informed and the variable inside our template.\n\nNext, when we make the call for the variable (``_select(id_example=5)``), the ``Query`` class will try to enforce the type we told it on the ``arguments`` parameter. In this case, it'll force the ``id_example`` to be an ``int``.\nIf this fails, the object will throw an ``QueryTypeError`` exception.\n\nAnother way it can fail is if you feed an parameter you haven't configured on the ``arguments`` parameter. In this case it will throw an ``QueryParamaterError`` exception.\n\nOtherwise, after the line ``print(_select(id_example=5))``, it'll print the results of the query.\nThe results are stored in the object ``Results``, which is a subclass of ``UserList`` and each line returned from the query is a ``NamedTuple``, which allows the access to theirs values using the name of the columns as an attribute. E.g. ``_select[0].id_example``.\n\n#### Query parameters\n\n - ``id`` - ID of the instance, useful for debugging. (Required)\n - ``get_wrapper`` - Receives the function ``get_wrapper`` from the instance of ``Wrapper``. (Required)\n - ``template`` - Receives the SQL string we will run. (Required)\n - ``max_rows`` - Max number of rows to return, if set to ``0`` it will return everything. Defaults to ``0``\n - ``arguments`` - List of dictionaries with the arguments used for the template. Defaults to ``None``\n\n#### Arguments configuration\n - ``type`` - The type to be enforced on the key. There are 3 enforceable,  ``int``, ``string`` and ``float``. (Required)\n - ``key`` - Name of the parameter and what will be replaced in the template. (Required)\n - ``multiple`` - If set to ``True``, it's going to be transformed in a ``Tuple`` with elements of the ``type`` informed. Defaults to ``False``.\n\n## Author\nProducts.ZAlchemyConnector was written by Gabriel Diniz Gisoldo for SoftRH, S&atilde;o Paulo, Brazil.\n\n## License\nProducts.ZAlchemyConnector is licensed under the MIT license. See LICENSE\n\n[z3c.sqlalchemy]: https://github.com/zopefoundation/z3c.sqlalchemy \"z3c.sqlalchemy\"\n[SQLAlchemy]: https://www.sqlalchemy.org/ \"SQLAlchemy\"\n[Zope]: https://zope.readthedocs.io \"Zope\"\n[SQLAlchemy engine]: https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine \"Url for SQLAlchemy engine\"\n[SiteErrorLog]: https://github.com/zopefoundation/Products.SiteErrorLog \"Products.SiteErrorLog\"\n\n------\n# Changelog\n\n1.0.4 (2020-11-26)\n---\n- Update README.md\n- Row now subclassing from simpleitem\n\n1.0.3 (2020-11-23)\n---\n- grammar correction in the README.md\n\n1.0.2 (2020-11-23)\n---\n- Added license on source files\n\n1.0.1 (2020-11-23)\n---\n- Added CHANGES.md\n- Added how to use on README.md\n\n1.0.0 (2020-11-20)\n---\n- Released as package.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/huine/Products.ZAlchemyConnector",
    "keywords": "Zope Database adapter SQLAlchemy",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Products.ZAlchemyConnector",
    "package_url": "https://pypi.org/project/Products.ZAlchemyConnector/",
    "platform": "",
    "project_url": "https://pypi.org/project/Products.ZAlchemyConnector/",
    "project_urls": {
      "Homepage": "https://github.com/huine/Products.ZAlchemyConnector"
    },
    "release_url": "https://pypi.org/project/Products.ZAlchemyConnector/1.0.4/",
    "requires_dist": [
      "setuptools",
      "z3c.sqlalchemy (>1.5.1)",
      "SQLAlchemy (>=0.5.5)",
      "zope.sqlalchemy (>=1.2.0)",
      "zope.component",
      "zope.interface",
      "zope.testing",
      "zope.schema"
    ],
    "requires_python": ">=3.7",
    "summary": "Connector and Query object for zope & sqlalchemy",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8757892,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0d746ea24a1374f3d9fcaae34badba0bf61814084c52bd890694f5a54092887",
          "md5": "744d669b5064e4c1a565464bb296b3df",
          "sha256": "feb4dc48792161f1b691d937d52c57a6487e3fdeeea93adfe8ca8acb7f870d2a"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "744d669b5064e4c1a565464bb296b3df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6099,
        "upload_time": "2020-11-21T00:54:39",
        "upload_time_iso_8601": "2020-11-21T00:54:39.092276Z",
        "url": "https://files.pythonhosted.org/packages/a0/d7/46ea24a1374f3d9fcaae34badba0bf61814084c52bd890694f5a54092887/Products.ZAlchemyConnector-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9904ad0d9cbf91dc0d95b5daf8fdd2ac26e9eae541996840de0f3b938844aaf4",
          "md5": "1caee7353de7fa53a84950f6bebec7d7",
          "sha256": "87718c9e63f12ebbecb8b15a3ac9e0a7c23917da90b5f943a6b01acd57d863c8"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1caee7353de7fa53a84950f6bebec7d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3855,
        "upload_time": "2020-11-21T00:54:40",
        "upload_time_iso_8601": "2020-11-21T00:54:40.402665Z",
        "url": "https://files.pythonhosted.org/packages/99/04/ad0d9cbf91dc0d95b5daf8fdd2ac26e9eae541996840de0f3b938844aaf4/Products.ZAlchemyConnector-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28873d8d4faa55cdce425e62c981e70eb9c156bfe358ec341d20a662f72d358b",
          "md5": "b8f600c24e61468023b085dce2ebe000",
          "sha256": "4c6617daf4b1a5198283541acc473aaa1c5855ec4bbf425c6bf7452be1a5b50a"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8f600c24e61468023b085dce2ebe000",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8659,
        "upload_time": "2020-11-23T16:23:16",
        "upload_time_iso_8601": "2020-11-23T16:23:16.997413Z",
        "url": "https://files.pythonhosted.org/packages/28/87/3d8d4faa55cdce425e62c981e70eb9c156bfe358ec341d20a662f72d358b/Products.ZAlchemyConnector-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06de8fd7792662707347b9d0fc2bc1eaefcaf26183c1a09b90d90bd0ed30a3f",
          "md5": "a863c92d5b56fd4c4796e707efe93d0d",
          "sha256": "5279fdadd1e1729d0482ed1359960634852f09aa6c91c2bf6bd399c9df51c13f"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a863c92d5b56fd4c4796e707efe93d0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6780,
        "upload_time": "2020-11-23T16:23:18",
        "upload_time_iso_8601": "2020-11-23T16:23:18.583539Z",
        "url": "https://files.pythonhosted.org/packages/b0/6d/e8fd7792662707347b9d0fc2bc1eaefcaf26183c1a09b90d90bd0ed30a3f/Products.ZAlchemyConnector-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d4e3b3037188653ca233d607e43d4afd72fc84bb29fc506482c09ddc00fd45",
          "md5": "0d85ca6a01fbe75bbd394bde5eb8fa11",
          "sha256": "41a281f36fa5dd307d7bf88b37d6484b3180443cf5c8b074d7a1f558913789ad"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d85ca6a01fbe75bbd394bde5eb8fa11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8690,
        "upload_time": "2020-11-23T16:30:47",
        "upload_time_iso_8601": "2020-11-23T16:30:47.010533Z",
        "url": "https://files.pythonhosted.org/packages/32/d4/e3b3037188653ca233d607e43d4afd72fc84bb29fc506482c09ddc00fd45/Products.ZAlchemyConnector-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c8ce8c5018bd4073cf66037abf2c2bf3ab095f1d0c1aee6b6e79bfd16d2f90",
          "md5": "d4985c049b316c13f105cbdd39f78b9f",
          "sha256": "34128fd857d94a415662c33a029d0865452649fc7161a078892c8c29cd5e2663"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d4985c049b316c13f105cbdd39f78b9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6828,
        "upload_time": "2020-11-23T16:30:49",
        "upload_time_iso_8601": "2020-11-23T16:30:49.359192Z",
        "url": "https://files.pythonhosted.org/packages/65/c8/ce8c5018bd4073cf66037abf2c2bf3ab095f1d0c1aee6b6e79bfd16d2f90/Products.ZAlchemyConnector-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d667f1cbc35eb794e3f30652a61d26cc31a946f8dad4f64e619fc8f4349e61f",
          "md5": "ac54c9470f5af089084e3e6f51ce86d9",
          "sha256": "1b231b0ee82948546512734a2b67097a5d71ef83bf2d5c8420991cd3d2381b2a"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac54c9470f5af089084e3e6f51ce86d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8842,
        "upload_time": "2020-11-26T20:01:43",
        "upload_time_iso_8601": "2020-11-26T20:01:43.547491Z",
        "url": "https://files.pythonhosted.org/packages/3d/66/7f1cbc35eb794e3f30652a61d26cc31a946f8dad4f64e619fc8f4349e61f/Products.ZAlchemyConnector-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca6e134c512553d240386e16404e2741ab369e0a5b8bbaef4cbfe68da6760ca",
          "md5": "84840b5fb5eea33d4d252a4642d6c7b1",
          "sha256": "584100b08cf99ae3d0c352c9362c2a711458caec90faf1e103c54e471e196252"
        },
        "downloads": -1,
        "filename": "Products.ZAlchemyConnector-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "84840b5fb5eea33d4d252a4642d6c7b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7040,
        "upload_time": "2020-11-26T20:01:46",
        "upload_time_iso_8601": "2020-11-26T20:01:46.545935Z",
        "url": "https://files.pythonhosted.org/packages/9c/a6/e134c512553d240386e16404e2741ab369e0a5b8bbaef4cbfe68da6760ca/Products.ZAlchemyConnector-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d667f1cbc35eb794e3f30652a61d26cc31a946f8dad4f64e619fc8f4349e61f",
        "md5": "ac54c9470f5af089084e3e6f51ce86d9",
        "sha256": "1b231b0ee82948546512734a2b67097a5d71ef83bf2d5c8420991cd3d2381b2a"
      },
      "downloads": -1,
      "filename": "Products.ZAlchemyConnector-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac54c9470f5af089084e3e6f51ce86d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8842,
      "upload_time": "2020-11-26T20:01:43",
      "upload_time_iso_8601": "2020-11-26T20:01:43.547491Z",
      "url": "https://files.pythonhosted.org/packages/3d/66/7f1cbc35eb794e3f30652a61d26cc31a946f8dad4f64e619fc8f4349e61f/Products.ZAlchemyConnector-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ca6e134c512553d240386e16404e2741ab369e0a5b8bbaef4cbfe68da6760ca",
        "md5": "84840b5fb5eea33d4d252a4642d6c7b1",
        "sha256": "584100b08cf99ae3d0c352c9362c2a711458caec90faf1e103c54e471e196252"
      },
      "downloads": -1,
      "filename": "Products.ZAlchemyConnector-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "84840b5fb5eea33d4d252a4642d6c7b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7040,
      "upload_time": "2020-11-26T20:01:46",
      "upload_time_iso_8601": "2020-11-26T20:01:46.545935Z",
      "url": "https://files.pythonhosted.org/packages/9c/a6/e134c512553d240386e16404e2741ab369e0a5b8bbaef4cbfe68da6760ca/Products.ZAlchemyConnector-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}