{
  "info": {
    "author": "Ioannis Filippidis",
    "author_email": "jfilippidis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Compilers"
    ],
    "description": "[![Build Status][build_img]][travis]\n[![Coverage Status][coverage]][coveralls]\n\n\nAbout\n=====\n\nA parser for the Temporal Logic of Actions (TLA+). The parser is based on\n[combinators](https://en.wikipedia.org/wiki/Parser_combinator).\nThe lexer is generated with [`ply`](https://pypi.org/project/ply)\nusing `lex`. Classes for a TLA+ abstract tree are included and used for\nrepresenting the result of parsing.\n\nTo install:\n\n```\npip install tla\n```\n\nTo parse a string:\n\n```python\nfrom tla import parser\n\nmodule_text = r'''\n---- MODULE Foo ----\nfoo == TRUE\n====================\n'''\n\ntree = parser.parse(module_text)\n```\n\n\nTo parse the string `module_text` from above and print a formatted version:\n\n```python\nfrom tla import parser\nfrom tla.to_str import Nodes\n\n# The abstract syntax tree classes can be changed using\n# the optional argument `nodes` of the function `parser.parse`.\ntree = parser.parse(module_text, nodes=Nodes)\ntext = tree.to_str(width=80)\nprint(text)\n```\n\nMore examples can be found in the directory [`examples/`](\n    https://github.com/johnyf/tla/blob/master/examples/)\n\nTo implement a new translator of TLA+ to an intended output format, either:\n- use the visitor pattern with the module `ast.visit`, or\n- subclass the class `tla.ast.Nodes`, and override AST node classes\n  and their methods as needed. An example of this approach is the module\n  `tla.to_str`, which can be copied as a starting point for implementing\n  a translator.\n\n\nThis parser is a translation to Python from OCaml of the parser in\n[`tlapm`](https://github.com/tlaplus/tlapm/), the TLA+ proof manager.\nThe Python source code includes in comments the corresponding OCaml source code.\nComments in each module mention the OCaml files on which that module is based.\n\nThis parser is slower than the OCaml implementation.\n\nThe module `tla._combinators` can be used to write other parsers.\n\n\nDocumentation\n=============\n\nIn the [Markdown](https://en.wikipedia.org/wiki/Markdown) file\n[`doc.md`](https://github.com/johnyf/tla/blob/master/doc.md)\n\n\nTests\n=====\n\nRequire [`nose`](https://pypi.python.org/pypi/nose). Run with:\n\n```shell\ncd tests/\nnosetests .\n```\n\nSee also the file `tests/README.md`.\n\n\nLicense\n=======\n[BSD-3](http://opensource.org/licenses/BSD-3-Clause), see `LICENSE` file.\n\n\n[build_img]: https://travis-ci.org/johnyf/tla.svg?branch=master\n[travis]: https://travis-ci.org/johnyf/tla\n[coverage]: https://coveralls.io/repos/johnyf/tla/badge.svg?branch=master\n[coveralls]: https://coveralls.io/r/johnyf/tla?branch=master",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnyf/tla",
    "keywords": "TLA+,TLA,temporal logic of actions,formal,specification,expression,formula,module,mathematics,theorem,proof,parser,lexer,parsing,ast,abstract syntax tree,syntax tree,ply,lex",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tla",
    "package_url": "https://pypi.org/project/tla/",
    "platform": "",
    "project_url": "https://pypi.org/project/tla/",
    "project_urls": {
      "Homepage": "https://github.com/johnyf/tla"
    },
    "release_url": "https://pypi.org/project/tla/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parser and abstract syntax tree for TLA+, the temporal logic of actions.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8470072,
  "releases": {
    "0.0.0": [],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0f8dd808ceb440a695acce638e57c2b25dd7a5fbd53ac24cddcbd907c2b2233",
          "md5": "dd4a861b8c57e9c8f43a740a21552e9b",
          "sha256": "56f9103d2b8dd0c619456312d83efe0fd2f9db24596ae741f831d678c3e2713a"
        },
        "downloads": -1,
        "filename": "tla-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd4a861b8c57e9c8f43a740a21552e9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78156,
        "upload_time": "2020-10-21T22:33:38",
        "upload_time_iso_8601": "2020-10-21T22:33:38.938390Z",
        "url": "https://files.pythonhosted.org/packages/a0/f8/dd808ceb440a695acce638e57c2b25dd7a5fbd53ac24cddcbd907c2b2233/tla-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0f8dd808ceb440a695acce638e57c2b25dd7a5fbd53ac24cddcbd907c2b2233",
        "md5": "dd4a861b8c57e9c8f43a740a21552e9b",
        "sha256": "56f9103d2b8dd0c619456312d83efe0fd2f9db24596ae741f831d678c3e2713a"
      },
      "downloads": -1,
      "filename": "tla-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dd4a861b8c57e9c8f43a740a21552e9b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78156,
      "upload_time": "2020-10-21T22:33:38",
      "upload_time_iso_8601": "2020-10-21T22:33:38.938390Z",
      "url": "https://files.pythonhosted.org/packages/a0/f8/dd808ceb440a695acce638e57c2b25dd7a5fbd53ac24cddcbd907c2b2233/tla-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}