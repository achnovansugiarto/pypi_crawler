{
  "info": {
    "author": "",
    "author_email": "sstucker@bu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n<h1 style=\"text-align:center\">\n\npysnirf2\n\n`pip install snirf`\n\n</h1>\n\n\n![testing](https://github.com/BUNPC/pysnirf2/actions/workflows/test.yml/badge.svg)\n![lazydocs](https://github.com/BUNPC/pysnirf2/actions/workflows/lazydocs.yml/badge.svg)\n[![PyPI version](https://badge.fury.io/py/snirf.svg)](https://badge.fury.io/py/snirf)\n[![DOI](https://zenodo.org/badge/426339949.svg)](https://zenodo.org/badge/latestdoi/426339949)\n\nDynamically generated Python library for reading, writing, and validating [Shared Near Infrared Spectroscopy Format (SNIRF) files](https://github.com/fNIRS/snirf).\n\nDeveloped and maintained by the [Boston University Neurophotonics Center](https://www.bu.edu/neurophotonics/).\n\n## Documentation\n\n[Documentation](https://github.com/BUNPC/pysnirf2/tree/main/docs) is generated from source using [lazydocs](https://github.com/ml-tooling/lazydocs)\n\n## Installation\n`pip install snirf`\n\npysnirf2 requires Python > 3.6.\n\n# Features\n\nThe library generated via metaprogramming, but the resulting classes explicitly implement each and every specified SNIRF field so as to provide an extensible object-oriented foundation for SNIRF applications.\n\n## Open a SNIRF file\n`Snirf(<path>, <mode>)` opens a SNIRF file at `<path>` _or creates a new one if it doesn't exist._ Use mode 'w' to create a new file, 'r' to read a file, and 'r+' to edit an existing file.\n```python\nfrom snirf import Snirf\nsnirf = Snirf(r'some\\path\\subj1_run01.snirf', 'r+')\n```\n## Create a SNIRF file object\n`Snirf()` with no arguments creates a temporary file which can be written later using `save()`.\n```python\nsnirf = Snirf()\n```\n\n## Closing a SNIRF file\nA `Snirf` instance wraps a file on disk. It should be closed when you're done reading from it or saving.\n```python\nsnirf.close()\n```\nUse a `with` statement to ensure that the file is closed when you're done with it:\n```python\nwith Snirf(r'some\\path\\subj1_run01.snirf', 'r+') as snirf:\n     # Read/write\n     snirf.save()\n```\n\n## Copy a SNIRF file object\nAny `Snirf` object can be copied to a new instance in memory, after which the original can be closed.\n```python\nsnirf2 = snirf.copy()\nsnirf.close()\n# snirf2 is free for manipulation\n```\n\n## View or retrieve a file's contents\n```python\n>>> snirf\n\nSnirf at /\nfilename: \nC:\\Users\\you\\some\\path\\subj1_run01.snirf\nformatVersion: v1.0\nnirs: <iterable of 2 <class 'pysnirf2.NirsElement'>>\n```\n```python\n>>> snirf.nirs[0].probe\n\nProbe at /nirs1/probe\ncorrelationTimeDelayWidths: [0.]\ncorrelationTimeDelays: [0.]\ndetectorLabels: ['D1' 'D2']\ndetectorPos2D: [[30.  0.]\n [ 0. 30.]]\ndetectorPos3D: [[30.  0.  0.]\n [ 0. 30.  0.]]\nfilename: \nC:\\Users\\you\\some\\path\\subj1_run01.snirf\nfrequencies: [1.]\nlandmarkLabels: None\nlandmarkPos2D: None\nlandmarkPos3D: None\nlocation: /nirs/probe\nmomentOrders: None\nsourceLabels: ['S1']\nsourcePos2D: [[0. 0.]]\nsourcePos3D: [[0.]\n [0.]\n [0.]]\ntimeDelayWidths: [0.]\ntimeDelays: [0.]\nuseLocalIndex: None\nwavelengths: [690. 830.]\nwavelengthsEmission: None\n```\n## Edit a SNIRF file\nAssign a new value to a field\n```python\n>>> snirf.nirs[0].metaDataTags.SubjectID = 'subj1'\n>>> snirf.nirs[0].metaDataTags.SubjectID\n\n'subj1'\n```\n```python\n>>> snirf.nirs[0].probe.detectorPos3D[0, :] = [90, 90, 90]\n>>> snirf.nirs[0].probe.detectorPos3D\n\narray([[90.,  90.,  90.],\n      [  0.,  30.,   0.]])\n```\n> Note: assignment via slicing is not possible in `dynamic_loading` mode. \n## Indexed groups\nIndexed groups are defined by the SNIRF file format as groups of the same type which are indexed via their name + a 1-based index, i.e.  `data1`, `data2`, ... or `stim1`, `stim2`, `stim3`, ...\n\npysnirf2 provides an iterable interface for these groups using Pythonic 0-based indexing, i.e. `data[0]`, `data[1]`, ... or `stim[0]`, `stim[1]]`, `stim[2]`, ...\n\n```python\n>>> snirf.nirs[0].stim\n\n\n<iterable of 0 <class 'pysnirf2.StimElement'>>\n\n>>> len(nirs[0].stim)\n\n0\n```\nTo add an indexed group, use the `appendGroup()` method of any `IndexedGroup` class. Indexed groups are created automatically. `nirs` is an indexed group.\n```python\n>>> snirf.nirs[0].stim.appendGroup()\n>>> len(nirs[0].stim)\n\n1\n\n>>> snirf.nirs[0].stim[0]\n\nStimElement at /nirs/stim2\ndata: None\ndataLabels: None\nfilename: \nC:\\Users\\you\\some\\path\\subj1_run01.snirf\nname: None\n```\nTo remove an indexed group\n```python\ndel snirf.nirs[0].stim[0]\n```\n## Save a SNIRF file\nOverwrite the open file\n```python\nsnirf.save()\n```\nSave As in a new location\n```python\nsnirf.save(r'some\\new\\path\\subj1_run01_edited.snirf')\n```\nThe `save()` function can be called for any group or indexed group:\n```python\nsnirf.nirs[0].metaDataTags.save('subj1_run01_edited_metadata_only.snirf')\n```\n## Dynamic loading mode\nFor larger files, it may be useful to load data dynamically: data will only be loaded on access, and only changed datasets will be written on `save()`. When creating a new `Snirf` instance, set `dynamic_loading` to `True` (Default `False`).\n```python\nsnirf = Snirf(r'some\\path\\subj1_run01.snirf', 'r+', dynamic_loading=True)\n```\n> Note: in dynamic loading mode, array data cannot be modified with indices like in the example above:\n> ```python\n> >>> snirf = Snirf(TESTPATH, 'r+', dynamic_loading=True)\n> >>> snirf.nirs[0].probe.detectorPos3D\n> \n> array([[30.,  0.,  0.],\n>       [ 0., 30.,  0.]])\n> \n> >>> snirf.nirs[0].probe.detectorPos3D[0, :] = [90, 90, 90]\n> >>> snirf.nirs[0].probe.detectorPos3D\n> \n> array([[30.,  0.,  0.],\n>        [ 0., 30.,  0.]])\n> ```\n> To modify an array in `dynamic_loading` mode, assign it, modify it, and assign it back to the Snirf object.\n> ```python\n> >>> detectorPos3D = snirf.nirs[0].probe.detectorPos3D\n> >>> detectorPos3D[0, :] = [90, 90, 90]\n> >>> snirf.nirs[0].probe.detectorPos3D = detectorPos3D\n> \n> array([[90.,  90.,  90.],\n>        [ 0.,   30.,  0.]])\n\n# Validating a SNIRF file\npysnirf2 features functions for validating SNIRF files against the specification and generating detailed error reports.\n## Validate a Snirf object you have created\n```python\nresult = snirf.validate()\n```\n## Validate a SNIRF file on disk\nTo validate a SNIRF file on disk\n```python\nfrom snirf import validateSnirf\nresult = validateSnirf(r'some\\path\\subj1_run01.snirf')\nassert result, 'Invalid SNIRF file!\\n' + result.display()  # Crash and display issues if the file is invalid.\n```\n## Validation results\nThe validation functions return a [`ValidationResult`](https://github.com/BUNPC/pysnirf2/blob/main/docs/pysnirf2.md#class-validationresult) instance which contains details about the SNIRF file.\nTo view the validation result:\n```python\n>>> result.display(severity=3)  # Display all fatal errors\n\n<pysnirf2.pysnirf2.ValidationResult object at 0x000001C0CCF05A00>\n/nirs1/data1/measurementList103/dataType                 FATAL   REQUIRED_DATASET_MISSING\n/nirs1/data1/measurementList103/dataTypeIndex            FATAL   REQUIRED_DATASET_MISSING\n/nirs1/data1                                             FATAL   INVALID_MEASUREMENTLIST \n\nFound 668 OK      (hidden)\nFound 635 INFO    (hidden)\nFound 204 WARNING (hidden)\nFound 3 FATAL  \n\nFile is INVALID\n```\nTo look at a particular result:\n```python\n>>> result.errors[2]\n\n<pysnirf2.pysnirf2.ValidationIssue object at 0x000001C0CB502F70>\nlocation: /nirs1/data1\nseverity: 3   FATAL  \nname:     8   INVALID_MEASUREMENTLIST\nmessage:  The number of measurementList elements does not match the second dimension of dataTimeSeries\n```\nThe full list of validation results `result.issues` can be explored programatically.\n# Code generation\n\nThe interface and validator are generated via metacode that downloads and parses [the latest SNIRF specification](https://raw.githubusercontent.com/fNIRS/snirf/master/snirf_specification.md). \n\nSee [\\gen](https://github.com/BUNPC/pysnirf2/tree/main/gen) for details.\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BUNPC/pysnirf2",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "snirf",
    "package_url": "https://pypi.org/project/snirf/",
    "platform": null,
    "project_url": "https://pypi.org/project/snirf/",
    "project_urls": {
      "Homepage": "https://github.com/BUNPC/pysnirf2"
    },
    "release_url": "https://pypi.org/project/snirf/0.7.4/",
    "requires_dist": [
      "h5py (>=3.1.0)",
      "numpy",
      "setuptools",
      "pip",
      "termcolor",
      "colorama"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Interface and validator for SNIRF files",
    "version": "0.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14655175,
  "releases": {
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ecd72eef26f2a285924218be18983f9b9773c89ac03ae8de86ce5a61b3b580f",
          "md5": "e8741c6ac5b29f6d9742660a159b13d6",
          "sha256": "9386e429d6c5a70e1f9ed56eec71ffd41e958ce8af4802b6899b7d00aabddac7"
        },
        "downloads": -1,
        "filename": "snirf-0.7.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8741c6ac5b29f6d9742660a159b13d6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 55350,
        "upload_time": "2022-08-03T21:21:06",
        "upload_time_iso_8601": "2022-08-03T21:21:06.928616Z",
        "url": "https://files.pythonhosted.org/packages/4e/cd/72eef26f2a285924218be18983f9b9773c89ac03ae8de86ce5a61b3b580f/snirf-0.7.3-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Empty release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "336316565ef5e5adcba4ddaeb869334e69f35f05a2b5ef01a4ae6bbaac3d69a3",
          "md5": "3e6abbe87096e3847ac35ac0b851b489",
          "sha256": "2a7f3e8fff486f88db4dfe35705a4457fa62af5d5b8bba8a51101f2ab2349420"
        },
        "downloads": -1,
        "filename": "snirf-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3e6abbe87096e3847ac35ac0b851b489",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 57993,
        "upload_time": "2022-08-03T21:21:09",
        "upload_time_iso_8601": "2022-08-03T21:21:09.211745Z",
        "url": "https://files.pythonhosted.org/packages/33/63/16565ef5e5adcba4ddaeb869334e69f35f05a2b5ef01a4ae6bbaac3d69a3/snirf-0.7.3.tar.gz",
        "yanked": true,
        "yanked_reason": "Empty release"
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "751b3f41beca581312e95492fcc3987e80ff2198fe2f79e5dcc03a3045b3e072",
          "md5": "377817a04c9e8dbe3e0c16775cb04225",
          "sha256": "eba3f80c2e6fa35341147c519d31c7460ebdc9af7f5a659afc4c8ac6aab65324"
        },
        "downloads": -1,
        "filename": "snirf-0.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "377817a04c9e8dbe3e0c16775cb04225",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 54783,
        "upload_time": "2022-08-04T16:44:31",
        "upload_time_iso_8601": "2022-08-04T16:44:31.117259Z",
        "url": "https://files.pythonhosted.org/packages/75/1b/3f41beca581312e95492fcc3987e80ff2198fe2f79e5dcc03a3045b3e072/snirf-0.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2d1e669ba49021ff0b0d1e6e0ecb578cd4d6f384231a1223c10f91cbff86427",
          "md5": "289c7ad4c947d344453d849c09b95953",
          "sha256": "bf214ff1bbad2a9971efd54cb696fa49e4f185a65578024be2379210e4ebcaa9"
        },
        "downloads": -1,
        "filename": "snirf-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "289c7ad4c947d344453d849c09b95953",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 56856,
        "upload_time": "2022-08-04T16:44:33",
        "upload_time_iso_8601": "2022-08-04T16:44:33.775677Z",
        "url": "https://files.pythonhosted.org/packages/b2/d1/e669ba49021ff0b0d1e6e0ecb578cd4d6f384231a1223c10f91cbff86427/snirf-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "751b3f41beca581312e95492fcc3987e80ff2198fe2f79e5dcc03a3045b3e072",
        "md5": "377817a04c9e8dbe3e0c16775cb04225",
        "sha256": "eba3f80c2e6fa35341147c519d31c7460ebdc9af7f5a659afc4c8ac6aab65324"
      },
      "downloads": -1,
      "filename": "snirf-0.7.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "377817a04c9e8dbe3e0c16775cb04225",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 54783,
      "upload_time": "2022-08-04T16:44:31",
      "upload_time_iso_8601": "2022-08-04T16:44:31.117259Z",
      "url": "https://files.pythonhosted.org/packages/75/1b/3f41beca581312e95492fcc3987e80ff2198fe2f79e5dcc03a3045b3e072/snirf-0.7.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2d1e669ba49021ff0b0d1e6e0ecb578cd4d6f384231a1223c10f91cbff86427",
        "md5": "289c7ad4c947d344453d849c09b95953",
        "sha256": "bf214ff1bbad2a9971efd54cb696fa49e4f185a65578024be2379210e4ebcaa9"
      },
      "downloads": -1,
      "filename": "snirf-0.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "289c7ad4c947d344453d849c09b95953",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 56856,
      "upload_time": "2022-08-04T16:44:33",
      "upload_time_iso_8601": "2022-08-04T16:44:33.775677Z",
      "url": "https://files.pythonhosted.org/packages/b2/d1/e669ba49021ff0b0d1e6e0ecb578cd4d6f384231a1223c10f91cbff86427/snirf-0.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}