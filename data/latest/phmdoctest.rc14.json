{
  "info": {
    "author": "Mark Taylor",
    "author_email": "mark66547ta2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Documentation",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "# phmdoctest 1.4.0\n\n## Introduction\n\nPython syntax highlighted Markdown doctest\n\nCommand line program and Python library to test Python syntax\nhighlighted code examples in Markdown.\n\n- Creates a [pytest][15] Python module that tests Python examples in\n  README and other Markdown files.\n- Reads these from Markdown fenced code blocks:\n  - Python interactive sessions described by [doctest][4].\n  - Python source code and expected terminal output.\n- The test cases get run later by running pytest.\n- Simple use case is possible with no Markdown edits at all.\n- More features selected by adding HTML comment **directives**\n  to the Markdown.\n  - Set test case name.\n  - Add a pytest custom marker.\n  - Add a pytest.mark.skip decorator.\n  - Promote names defined in a test case to module level globals.\n  - Label any fenced code block for later retrieval (API).\n- Configurable. Discover and process many Markdown files in a single command.\n- Add inline annotations to comment out sections of code.\n- Get code coverage by running pytest with [coverage][6].\n- Select Python source code blocks as setup and teardown code.\n- Setup applies to code blocks and optionally to session blocks.\n- An included Python library: [Latest Development tools API][10].\n  - Python function returns test file in a string. *(testfile() in main.py)*\n  - Two pytest fixtures. *(tester.py)*\n    1. **testfile_creator** runs *testfile()*. Use with testfile_tester.\n    2. **testfile_tester** runs a pytest file with pytest's pytester\n       in its isolated environment.\n  - Runs phmdoctest and can run pytest too. *(simulator.py)*\n  - Functions to read fenced code blocks from Markdown. *(tool.py)*\n  - Test Markdown for Python examples. *(tool.py)*\n  - Prepare directory for generated test files. *(tool.py)*\n  - Extract testsuite tree and list of failing trees from JUnit XML. *(tool.py)*\n- Available as the pytest plugin [pytest-phmdoctest][16].\n\n\n### default branch status\n[![](https://img.shields.io/pypi/l/phmdoctest.svg)](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)\n[![](https://img.shields.io/pypi/v/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)\n[![](https://img.shields.io/pypi/pyversions/phmdoctest.svg)](https://pypi.python.org/pypi/phmdoctest)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[![CI Test](https://github.com/tmarktaylor/phmdoctest/actions/workflows/ci.yml/badge.svg)](https://github.com/tmarktaylor/phmdoctest/actions/workflows/ci.yml)\n[![Build status](https://ci.appveyor.com/api/projects/status/5pp3swc1q1fgbcd6/branch/master?svg=true)](https://ci.appveyor.com/project/tmarktaylor/phmdoctest/branch/master)\n[![readthedocs](https://readthedocs.org/projects/phmdoctest/badge/?version=latest)](https://phmdoctest.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/tmarktaylor/phmdoctest/coverage.svg?branch=master)](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master)\n\n[Website](https://tmarktaylor.github.io/phmdoctest) |\n[Docs](https://phmdoctest.readthedocs.io/en/latest/) |\n[Repos](https://github.com/tmarktaylor/phmdoctest) |\n[pytest][13] |\n[Codecov](https://codecov.io/gh/tmarktaylor/phmdoctest?branch=master) |\n[License](https://github.com/tmarktaylor/phmdoctest/blob/master/LICENSE.txt)\n\n\n[Introduction](#introduction) |\n[Installation](#installation) |\n[Sample usage](#sample-usage) |\n[Sample Usage with HTML comment directives](#sample-usage-with-html-comment-directives) |\n[CI usage](#ci-usage) |\n[--report](#report-option) |\n[Identifying blocks](#identifying-blocks) |\n[Directives](#directives) |\n[skip](#skip) |\n[label on code and sessions](#label-on-code-and-sessions) |\n[label on any fenced code block](#label-on-any-fenced-code-block) |\n[pytest skip](#pytest-skip) |\n[pytest skipif](#pytest-skipif) |\n[setup](#setup) |\n[teardown](#teardown) |\n[share-names](#share-names) |\n[clear-names](#clear-names) |\n[pytest mark decorator](#pytest-mark-decorator) |\n[label skip and mark example](#label-skip-and-mark-example) |\n[setup and teardown example](#setup-and-teardown-example) |\n[share-names clear-names example](#share-names-clear-names-example) |\n[Configuration](#configuration) |\n[Inline annotations](#inline-annotations) |\n[skipping blocks with --skip](#skipping-blocks-with-skip-option) |\n[--skip](#skip-option) |\n[short form of --skip](#short-form-of-skip-option) |\n[--fail-nocode](#fail-nocode-option) |\n[--setup](#setup-option) |\n[--teardown](#teardown-option) |\n[Setup example](#setup-example) |\n[Setup for sessions](#setup-for-sessions) |\n[Execution context](#execution-context) |\n[Send outfile to stdout](#send-outfile-to-stdout) |\n[Usage](#usage) |\n[Run as a Python module](#run-as-a-python-module) |\n[Python API](#python-api) |\n[pytest fixtures](#pytest-fixtures) |\n[Simulate command line](#simulate-command-line) |\n[Hints](#hints) |\n[Directive hints](#directive-hints) |\n[Related projects](#related-projects)\n\n\n\n[Changes](doc/recent_changes.md) |\n[Contributions](CONTRIBUTING.md) |\n[About](doc/about.md)\n\n\n## Installation\nIt is advisable to install in a virtual environment.\n\n    python -m pip install phmdoctest\n\n## Sample usage\n\nGiven the Markdown file [example1.md](doc/example1.md)\nshown in raw form here...\n\n<!--phmdoctest-label example1-raw-->\n~~~\n# This is Markdown file example1.md\n\n## Interactive Python session (doctest)\n\n```py\n>>> print(\"Hello World!\")\nHello World!\n```\n\n## Source Code and terminal output\n\nCode:\n```python\nfrom enum import Enum\n\nclass Floats(Enum):\n    APPLES = 1\n    CIDER = 2\n    CHERRIES = 3\n    ADUCK = 4\n\nfor floater in Floats:\n    print(floater)\n```\n\nsample output:\n```\nFloats.APPLES\nFloats.CIDER\nFloats.CHERRIES\nFloats.ADUCK\n```\n~~~\n\nthe command...\n<!--phmdoctest-label example1-command-->\n```\nphmdoctest doc/example1.md --outfile test_example1.py\n```\n\ncreates the python source code file `test_example1.py` shown here...\n\n<!--phmdoctest-label example1-outfile-->\n```python\n\"\"\"pytest file built from doc/example1.md\"\"\"\nfrom phmdoctest.functions import _phm_compare_exact\n\n\ndef session_00001_line_6():\n    r\"\"\"\n    >>> print(\"Hello World!\")\n    Hello World!\n    \"\"\"\n\n\ndef test_code_14_output_28(capsys):\n    from enum import Enum\n\n    class Floats(Enum):\n        APPLES = 1\n        CIDER = 2\n        CHERRIES = 3\n        ADUCK = 4\n\n    for floater in Floats:\n        print(floater)\n\n    _phm_expected_str = \"\"\"\\\nFloats.APPLES\nFloats.CIDER\nFloats.CHERRIES\nFloats.ADUCK\n\"\"\"\n    _phm_compare_exact(a=_phm_expected_str, b=capsys.readouterr().out)\n```\n\nThen run a pytest command something like this in your terminal\nto test the Markdown session, code, and expected output blocks.\n\n    pytest --doctest-modules\n\nOr these two commands:\n\n    pytest\n    python -m doctest test_example1.py\n\nThe `line_6` in the function name `session_00001_line_6` is the\nline number in [example1.md](doc/example1.md) of the first line\nof the interactive session. `00001` is a sequence number to\norder the doctests.\n\nThe `14` in the function name `test_code_14_output_28` is the\nline number of the first line\nof python code. `28` shows the line number of the expected\nterminal output.\n\nOne test case function gets generated for each:\n\n- Markdown fenced code block interactive session\n- Python-code/expected-output Markdown fenced code block pair\n\nThe `--report` option below shows the blocks discovered and\nhow they are tested.\n\n## Sample Usage with HTML comment directives\n\nGiven the Markdown file shown in raw form here...\n<!--phmdoctest-label directive-example-raw-->\n~~~\n<!--phmdoctest-mark.skip-->\n<!--phmdoctest-label test_example-->\n```python\nprint(\"Hello World!\")\n```\n```\nincorrect expected output\n```\n~~~\n\nthe command...\n<!--phmdoctest-label directive-example-command-->\n```\nphmdoctest tests/one_mark_skip.md --outfile test_one_mark_skip.py\n```\n\ncreates the python source code file shown here...\n<!--phmdoctest-label directive-example-outfile-->\n```python\n\"\"\"pytest file built from tests/one_mark_skip.md\"\"\"\nimport pytest\n\nfrom phmdoctest.functions import _phm_compare_exact\n\n\n@pytest.mark.skip()\ndef test_example(capsys):\n    print(\"Hello World!\")\n\n    _phm_expected_str = \"\"\"\\\nincorrect expected output\n\"\"\"\n    _phm_compare_exact(a=_phm_expected_str, b=capsys.readouterr().out)\n```\n\nRun the --outfile with pytest...\n```\n$ pytest -vv test_one_mark_skip.py\n\ntest_one_mark_skip.py::test_example SKIPPED\n```\n\n- The HTML comments in the Markdown are phmdoctest **directives**.\n- The **mark.skip** directive adds the @pytest.mark.skip() line.\n- The label directive names the test case function.\n- List of  [Directives](#directives)\n- Directives are optional.\n- Markdown edits are optional.\n\n## CI usage\n\nTest Python examples in README.md in Continuous Integration scripts.\nIn this snippet for Linux the pytest test suite is in the\n**tests** folder.\n\n<!--phmdoctest-label ci-example-->\n```bash\nmkdir tests/tmp\nphmdoctest README.md --report --outfile tests/tmp/test_readme.py\npytest --doctest-modules -vv tests\n```\n\nThis console shows testing Python examples in project.md.\nLook for the tmp tests at the bottom. [Windows Usage on Appveyor][13].\n\nSee this excerpt from ci.yml [Actions usage example](doc/actions_usage.md).\nIt runs on Windows, Linux, and macOS. Please find the phmdoctest command\nat the bottom.\n\nNo changes to README.md are needed [here, look in the last job log][14].\n\n## report option\n\nTo see the [GFM fenced code blocks][3] in the MARKDOWN_FILE use the\n`--report` option like this:\n\n<!--phmdoctest-label report-command-->\n```\nphmdoctest doc/example2.md --report\n```\n\nwhich lists the fenced code blocks it found in\nthe file [example2.md](doc/example2.md).\nThe `test role` column shows how each fenced code block gets tested.\n\n<!--phmdoctest-label example2-report-->\n```\n         doc/example2.md fenced blocks\n------------------------------------------------\nblock     line  test     TEXT or directive\ntype    number  role     quoted and one per line\n------------------------------------------------\npython       9  code\n            14  output\npython      20  code\n            26  output\n            31  --\npython      37  code\npython      44  code\n            51  output\nyaml        59  --\ntext        67  --\npy          75  session\npython      87  code\n            94  output\npy         102  session\n------------------------------------------------\n7 test cases.\n1 code blocks with no output block.\n```\n\n## Identifying blocks\n\nThe PYPI [commonmark][7] project provides code to extract fenced code\nblocks from Markdown. Specification [CommonMark Spec][8] and website [CommonMark][9].\n\nPython code, expected output, and Python interactive sessions get extracted.\n\nOnly [GFM fenced code blocks][3] are considered.\n\nA block is a session block if the info_string starts with ``py``\nand the first line of the block starts with the\nsession prompt: `'>>> '`.\n\nTo be treated as Python code the opening fence should start\nwith one of these:\n\n    ```python\n    ```python3\n    ```py3\n\nplus the block contents can't start with `'>>> '`.\n\nThe examples use the info_strings `python` for code and `py` for sessions\nsince they render with coloring on GitHub, readthedocs, GitHub Pages,\nand Python package index.\n\n[project.md](project.md) has more examples of code and session blocks.\n\nIt is ok if the [info string][11]\nis laden with additional text, it will be ignored.  The\nentire info string will be shown in the block type column of the\nreport.\n\nAn output block is a fenced code block that immediately follows a\nPython block and starts with an opening fence like this which\nhas an empty info string.\n\n    ```\n\nA Python code block has no output\nif it is followed by any of:\n\n- Python code block\n- Python session block\n- a fenced code block with a non-empty info string\n\nTest code gets generated for it, but there will be no\nassertion statement.\n\n## Directives\n\nDirectives are HTML comments containing test generation commands.\nThey are edited into the Markdown file immediately before a fenced\ncode block. It is OK if other HTML comments are present.\nSee the `<!--phmdoctest-skip-->` directive in the\nraw Markdown below.\nWith the skip directive no test code will be\ngenerated from the fenced code block.\n\n<!--phmdoctest-label intro-to-directives-->\n~~~\n<!--phmdoctest-skip-->\n<!--Another HTML comment-->\n```python\nprint(\"Hello World!\")\n```\nExpected Output\n```\nHello World!\n```\n~~~\n\nList of Directives\n```\n       Directive HTML comment      |    Use on blocks\n---------------------------------- | ---------------------\n<!--phmdoctest-skip-->             | code, session, output\n<!--phmdoctest-label IDENTIFIER--> | code, session\n<!--phmdoctest-label TEXT-->       | any\n<!--phmdoctest-mark.skip-->        | code\n<!--phmdoctest-mark.skipif<3.N-->  | code\n<!--phmdoctest-setup-->            | code\n<!--phmdoctest-teardown-->         | code\n<!--phmdoctest-share-names-->      | code\n<!--phmdoctest-clear-names-->      | code\n<!--phmdoctest-mark.ATTRIBUTE-->   | code\n```\n\n[Directive hints](#directive-hints)\n\n## skip\nThe skip directive or `--skip TEXT` command line option\nprevents code generation for the code or session block.\nThe skip directive can be placed on an expected output block.\nThere it prevents checking expected against actual output.\n[Example.](#label-skip-and-mark-example)\n\n## label on code and sessions\nWhen used on a Python code block or session the label directive\nchanges the name of the generated test function.\n[Example.](#label-skip-and-mark-example)\nTwo generated tests, the first without a label,\nshown in pytest -v terminal output:\n\n```\ntest_readme.py::test_code_93 FAILED\ntest_readme.py::test_beta_feature FAILED\n```\n\n## label on any fenced code block\nOn any fenced code block, the label directive identifies the block\nfor later retrieval by the class `phmdoctest.tool.FCBChooser()`.\nThe `FCBChooser` is used separately from phmdoctest in\na different pytest file. This allows the test developer to write\nadditional test cases for fenced code blocks that are not handled by\nphmdoctest. The directive value can be any string.\n\n<!--phmdoctest-label my-markdown-file-->\n~~~\n# This is file doc/my_markdown_file.md\n\n<!--phmdoctest-label my-fenced-code-block-->\n```\nThe label directive can be placed on any fenced code block.\n```\n~~~\nHere is Python code to fetch it:\n\n<!--phmdoctest-label fetch-it-->\n```python\nimport phmdoctest.tool\n\nchooser = phmdoctest.tool.FCBChooser(\"doc/my_markdown_file.md\")\ncontents = chooser.contents(label=\"my-fenced-code-block\")\nprint(contents)\n```\nOutput:\n\n<!--phmdoctest-label fetched-contents-->\n```\nThe label directive can be placed on any fenced code block.\n```\n\n## pytest skip\nThe `<!--phmdoctest-mark.skip-->`  directive generates a test\ncase with a `@pytest.mark.skip()` decorator.\n[Example.](#label-skip-and-mark-example)\n\n\n## pytest skipif\nThe `<!--phmdoctest-mark.skipif<3.N-->`  directive generates\na test case with the pytest decorator\n`@pytest.mark.skipif(sys.version_info < (3, N), reason=\"requires >=py3.N\")`.\nN is a Python minor version number.\n[Example.](#label-skip-and-mark-example)\n\n## setup\nA single Python code block can assign names visible to\nother code blocks by adding a setup directive or\nusing the [--setup](#setup-option) command line option.\n\nNames assigned by the setup block\nget copied to the test module's global namespace after\nthe setup block runs.\n\nHere is an example setup block from\n[setup.md](doc/setup.md):\n<!--phmdoctest-label setup-md-first-block-->\n```python\nimport math\n\nmylist = [1, 2, 3]\na, b = 10, 11\n\ndef doubler(x):\n    return x * 2\n```\n\nUsing setup modifies the execution context of the\nPython code blocks in the Markdown file.\nThe names `math`, `mylist`, `a`, `b`, and `doubler` are visible\nto the other Python code blocks. The objects can be modified.\n[Example.](#setup-and-teardown-example)\n\n## teardown\nSelects a single Python code block that runs\nat test module teardown time.\nA teardown block can also be designated\nusing the [--teardown](#teardown-option) command line option.\n[Example.](#setup-and-teardown-example)\n\n## share-names\nNames assigned by the Python code block get copied to\nthe test module as globals after the test code runs. This happens at run\ntime. These names are now visible to subsequent\ntest cases generated for Python code blocks in the Markdown file.\nshare-names modifies the execution context as described for\nthe setup directive above.\nThe share-names directive can be used on more than one\ncode block.\n[Example.](#share-names-clear-names-example)\n\nThis directive effectively joins its Python code block to the\nfollowing Python code blocks in the Markdown file.\n\n## clear-names\nAfter the test case generated for the Python code block\nwith the clear-names directive runs, all names that were\ncreated by one or more preceding share-names directives\nget deleted. The names that were shared are no longer visible.\nThis directive also deletes the names assigned by setup.\n[Example.](#share-names-clear-names-example)\n\n## pytest mark decorator\nThe `<!--phmdoctest-mark.ATTRIBUTE-->` directive adds\na @pytest.mark.ATTRIBUTE decorator to the\ngenerated test function. ATTRIBUTE is a valid Python attribute\nidentifier. This defines a marker to pytest that is used to\nselect and deselect tests. See the pytest documentation section\n\"Working with custom markers\".\nThe file [mark_example.md](doc/mark_example_raw.md) contains\nexample usage of the user defined marker \"slow\". It generates\n[test_mark_example.py](doc/test_mark_example_py.md)\n\n\n## label skip and mark example\nThe file [directive1.md](doc/directive1_raw.md) contains\nexample usage of label, skip, and mark directives.\nThe command below generates\n[test_directive1.py](doc/test_directive1_py.md).\n`phmdoctest doc/directive1.md --report`\nproduces this\n[report](doc/directive1_report_txt.md).\n\n<!--phmdoctest-label directive-1-outfile-->\n```\nphmdoctest doc/directive1.md --outfile test_directive1.py\n```\n\n\n## setup and teardown example\nThe file [directive2.md](doc/directive2_raw.md) contains\nexample usage of label, skip, and mark directives.\nThe command below generates\n[test_directive2.py](doc/test_directive2_py.md).\n`phmdoctest doc/directive2.md --report`\nproduces this\n[report](doc/directive2_report_txt.md).\n\n<!--phmdoctest-label directive-2-outfile-->\n```\nphmdoctest doc/directive2.md --outfile test_directive2.py\n```\n\n## share-names clear-names example\nThe file [directive3.md](doc/directive3_raw.md) contains\nexample usage of share-names and clear-names directives.\nThe command below generates\n[test_directive3.py](doc/test_directive3_py.md).\n`phmdoctest doc/directive3.md --report`\nproduces this\n[report](doc/directive3_report_txt.md).\n<!--phmdoctest-label directive-3-outfile-->\n```\nphmdoctest doc/directive3.md --outfile test_directive3.py\n```\n\n## Configuration\n\nSupply a .ini, .cfg, or .toml configuration file in place of the Markdown file.\nConfiguration features:\n- Choose Markdown files for test file generation. (glob wildcards).\n- Exclude Markdown files from test file generation. (glob wildcards).\n- Name the output directory.\n- Removes stale test files from output directory.\n- Enable printing.\n\nPlace a `[tool.phmdoctest]` section in the configuration file.\n[How to configure.](doc/configuring.md)\n\n## Inline annotations\n\nInline annotations comment out sections of code.\nThey can be added to the end of lines in Python code blocks.\nThey should be in a comment.\n\n- `phmdoctest:omit` comments out a section of code.  The line it is on,\n  plus following lines at greater indent get commented out.\n- `phmdoctest:pass` comments out one line of code and prepends the pass statement.\n\nHere is a snippet showing how to place `phmdoctest:pass` in the code.\nThe second block shows the code that is generated. Note there is no `#`\nimmediately before `phmdoctest:pass`. It is not required.\n<!--phmdoctest-label pass-code-->\n```python\nimport time\ndef takes_too_long():\n    time.sleep(100)    # delay for awhile. phmdoctest:pass\ntakes_too_long()\n```\n\n<!--phmdoctest-label pass-result-->\n```python\nimport time\ndef takes_too_long():\n    pass  # time.sleep(100)    # delay for awhile. phmdoctest:pass\ntakes_too_long()\n```\n\nUse `phmdoctest:omit` on single or multi-line statements. Note the two\ncommented out time.sleep(99). They follow and are indented more\nthat the `if condition:`line with `phmdoctest:omit`.\n\n<!--phmdoctest-label omit-code-->\n```python\nimport time                      # phmdoctest:omit\n\ncondition = True\nif condition:       # phmdoctest:omit\n    time.sleep(99)\n    time.sleep(99)\n```\n\n<!--phmdoctest-label omit-result-->\n```python\n# import time                      # phmdoctest:omit\n\ncondition = True\n# if condition:       # phmdoctest:omit\n#     time.sleep(99)\n#     time.sleep(99)\n```\n\nInline annotation processing counts the number of commented\nout sections and adds the count as the suffix\n`_N` to the name of the pytest function in the\ngenerated test file.\n\nInline annotations are similar, but less powerful\nthan the Python standard library **doctest** directive `#doctest+SKIP`.\nImproper use of `phmdoctest:omit` can cause Python syntax errors.\n\nThe examples above are snippets that illustrate how to\nuse inline annotations.\nHere is an example that produces a pytest file from Markdown.\nThe command below takes [inline_example.md](doc/inline_example.md) and generates\n[test_inline_example.py](doc/test_inline_example_py.md).\n<!--phmdoctest-label inline-outfile-->\n```\nphmdoctest doc/inline_example.md --outfile test_inline_example.py\n```\n\n\n## skipping blocks with skip option\n\nIf you don't want to generate test cases for Python\nblocks precede the block with a **skip** directive or\nuse the `--skip TEXT` option. More than one **skip** directive\nor`--skip TEXT`is allowed.\n\nThe following describes using `--skip TEXT`.\nThe code in each Python block gets searched\nfor the substring `TEXT`.  Zero, one or more blocks will contain\nthe substring. These blocks will not generate test cases in the\noutput file.\n\n- The Python code in the fenced code block gets searched.\n- The info string is **not** searched.\n- Output blocks are **not** searched.\n- Both Python code and session blocks get searched.\n- Case is significant.\n\nThe report shows which Python blocks get skipped\nin the test role column, and the Python blocks that\nmatched each --skip TEXT in the skips section.\n\nThis option makes it **very easy** to **inadvertently exclude**\nPython blocks from the test cases.  In the event no test cases get\ngenerated, the option `--fail-nocode` described below is useful.\n\nThree special `--skip TEXT` strings work a little differently.\nThey select one of the first, second, or last of the Python blocks.\nOnly Python blocks get counted.\n- `--skip FIRST` skips the first Python block.\n- `--skip SECOND` skips the second Python block.\n- `--skip LAST` skips the final Python block.\n\n## skip option\n\nThis command using `--skip`:\n\n<!--phmdoctest-label skip-command-->\n```\nphmdoctest doc/example2.md --skip \"Python 3.7\" --skip LAST --report --outfile test_example2.py\n```\n\nProduces the report\n\n<!--phmdoctest-label skip-report-->\n```\n            doc/example2.md fenced blocks\n-----------------------------------------------------\nblock     line  test          TEXT or directive\ntype    number  role          quoted and one per line\n-----------------------------------------------------\npython       9  code\n            14  output\npython      20  skip-code     \"Python 3.7\"\n            26  skip-output\n            31  --\npython      37  code\npython      44  code\n            51  output\nyaml        59  --\ntext        67  --\npy          75  session\npython      87  code\n            94  output\npy         102  skip-session  \"LAST\"\n-----------------------------------------------------\n5 test cases.\n1 skipped code blocks.\n1 skipped interactive session blocks.\n1 code blocks with no output block.\n\n  skip pattern matches (blank means no match)\n------------------------------------------------\nskip pattern  matching code block line number(s)\n------------------------------------------------\nPython 3.7    20\nLAST          102\n------------------------------------------------\n```\n\ncreates the output file [test_example2.py](doc/test_example2_py.md)\n\n\n## short form of skip option\n\nThis is the same command as above using the short `-s` form of the `--skip` option\nin two places.\nIt produces the same report and outfile.\n<!--phmdoctest-label short-skip-command-->\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --report --outfile test_example2.py\n```\n\n## fail-nocode option\n\nThe `--fail-nocode` option produces a pytest file that will always\nfail when no Python code or session blocks get found.\n\nEvem if no Python code or session blocks exist in the\nMarkdown file a pytest file gets generated.\nThis also happens when `--skip` eliminates all the\nPython code blocks.\nThe generated pytest file will have the function\n`def test_nothing_passes()`.\n\nIf the option `--fail-nocode` is passed the\nfunction is `def test_nothing_fails()` which raises an\nassertion.\n\n## setup option\n\nA single Python code block can assign names visible to\nother code blocks by giving the `--setup TEXT` option.\nPlease see the [setup](#setup) directive above.\nThe rules for `TEXT` are the same as for `--skip TEXT` plus...\n\n- Only one block can match `TEXT`.\n- The block cannot match a block that is skipped.\n- The block cannot be a session block even though session\n  blocks get searched for `TEXT`.\n- It is ok if the block has an output block. It will be ignored.\n\n\n## teardown option\n\nA single Python code block can supply code run by the pytest\n`teardown_module()` fixture. Use the `--teardown TEXT` option.\nPlease see the [teardown](#teardown) directive above.\nThe rules for `TEXT` are the same as for `--setup` above except\n`TEXT` won't match a setup block.\n\n## Setup example\n\nFor the Markdown file [setup.md](doc/setup.md)\nrun this command to see how the blocks get tested.\n\n<!--phmdoctest-label setup-command-report-->\n```\nphmdoctest doc/setup.md --setup FIRST --teardown LAST --report\n```\n\n<!--phmdoctest-label setup-report-->\n```\n            doc/setup.md fenced blocks\n-------------------------------------------------\nblock     line  test      TEXT or directive\ntype    number  role      quoted and one per line\n-------------------------------------------------\npython       9  setup     \"FIRST\"\npython      20  code\n            27  output\npython      37  code\n            42  output\npython      47  code\n            51  output\npython      58  teardown  \"LAST\"\n-------------------------------------------------\n3 test cases.\n```\n\nThis command\n<!--phmdoctest-label setup-command-outfile-->\n```\nphmdoctest doc/setup.md --setup FIRST --teardown LAST --outfile test_setup.py\n```\ncreates the test file\n[test_setup.py](doc/test_setup_py.md)\n\n## Setup for sessions\nThe pytest option `--doctest-modules` is required to\nrun doctest on sessions.  pytest runs doctests in\na separate context.\nFor more on this see [Execution context](#execution-context) below.\n\nTo allow sessions to see the variables assigned by the `--setup`\ncode block, add the option `--setup-doctest`\n\nHere is an example with setup code and sessions\n[setup_doctest.md](doc/setup_doctest.md). The first part\nof this file is a copy of setup.md.\n\nThis command  uses the short form of setup and teardown.\n-u for set**up** and -d for tear**down**.\n<!--phmdoctest-label setup-doctest-outfile-->\n```\nphmdoctest doc/setup_doctest.md -u FIRST -d LAST --setup-doctest --outfile test_setup_doctest.py\n```\nIt creates the test file\n[test_setup_doctest.py](doc/test_setup_doctest_py.md)\n\n## Execution context\n\nWhen run without `--setup`\n\n- pytest and doctest determine the order of test case execution.\n- phmdoctest assumes test code and session execution is in file order.\n- Test case order is not significant.\n- Code and expected output run within a function body of a pytest test case.\n- If pytest is invoked with `--doctest-modules`:\n  - Sessions are run in a separate doctest execution context.\n  - Otherwise, sessions do not run.\n\n### With `--setup`\n\n- Names assigned by setup code are visible to code blocks.\n- Code blocks can modify the objects created by the setup code.\n- Code block test case order is significant.\n- Session order is not significant.\n- If pytest is run with `--doctest-modules`:\n  - pytest runs two separate contexts: one for sessions, one for code blocks.\n  - setup and teardown code gets run twice, once by each context.\n  - the names assigned by the setup code block\n    are `are not` visible to the sessions.\n\n### With `share-names`\n- Only following code blocks can modify the shared objects.\n- Shared objects will **not** be visible to sessions\n  if pytest is run with `--doctest-modules`.\n- After running a code block with `clear-names`\n  - Shared objects will no longer be visible.\n  - Names assigned by setup code will no longer be visible.\n\n### With `--setup` and `--setup-doctest`\nSame as the setup section plus:\n- names assigned by the setup code block\n  are visible to the sessions.\n- Sessions can modify the objects created by the setup code.\n- Session order is significant.\n- Sessions and code blocks are still running in separate contexts\n  isolated from each other.\n- A session can't affect a code block, and a code block can't affect\n  a session.\n- Names assigned by the setup code block are globally visible\n  to the entire test suite via the pytest doctest_namespace\n  fixture.  See hint near the end [Hints](#hints).\n\n### pytest live logging demo\nThe live logging demos reveals pytest execution contexts.\npytest Live Logs show the\nexecution order of setup_module(), test cases, sessions, and\nteardown_module().\nThere are 2 demo invocations in the workflow action\ncalled pytest Live Log Demo.  GitHub login required.\n\n\n## Send outfile to stdout\nTo redirect the above outfile to the standard output stream use one\nof these two commands.\n\nBe sure to leave out `--report` when sending --outfile to standard output.\n<!--phmdoctest-label outfile-dash1-->\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile -\n```\nor\n<!--phmdoctest-label outfile-dash2-->\n```\nphmdoctest doc/example2.md -s \"Python 3.7\" -sLAST --outfile=-\n```\n\n## Usage\n\n`phmdoctest --help`\n\n<!--phmdoctest-label usage-->\n```\nUsage: phmdoctest [OPTIONS] MARKDOWN_FILE\n\n  MARKDOWN_FILE may also be .toml, .cfg, or .ini configuration file.\n\nOptions:\n  --outfile TEXT       Write generated test case file to path TEXT. \"-\" writes\n                       to stdout.\n\n  -s, --skip TEXT      Any Python code or interactive session block that\n                       contains the substring TEXT is not tested. More than\n                       one --skip TEXT is ok. Double quote if TEXT contains\n                       spaces. For example --skip=\"python 3.7\" will skip every\n                       Python block that contains the substring \"python 3.7\".\n                       If TEXT is one of the 3 capitalized strings FIRST\n                       SECOND LAST the first, second, or last Python code or\n                       session block in the Markdown file is skipped.\n\n  --report             Show how the Markdown fenced code blocks are used.\n\n  --fail-nocode        This option sets behavior when the Markdown file has no\n                       Python fenced code blocks or interactive session blocks\n                       or if all such blocks are skipped. When this option is\n                       present the generated pytest file has a test function\n                       called test_nothing_fails() that will raise an\n                       assertion. If this option is not present the generated\n                       pytest file has test_nothing_passes() which will never\n                       fail.\n\n  -u, --setup TEXT     The Python code block that contains the substring TEXT\n                       is run at test module setup time. Variables assigned at\n                       the outer level are visible as globals to the other\n                       Python code blocks. TEXT should match exactly one code\n                       block. If TEXT is one of the 3 capitalized strings\n                       FIRST SECOND LAST the first, second, or last Python\n                       code or session block in the Markdown file is matched.\n                       A block will not match --setup if it matches --skip, or\n                       if it is a session block. Use --setup-doctest below to\n                       grant Python sessions access to the globals.\n\n  -d, --teardown TEXT  The Python code block that contains the substring TEXT\n                       is run at test module teardown time. TEXT should match\n                       exactly one code block. If TEXT is one of the 3\n                       capitalized strings FIRST SECOND LAST the first,\n                       second, or last Python code or session block in the\n                       Markdown file is matched. A block will not match\n                       --teardown if it matches either --skip or --setup, or\n                       if it is a session block.\n\n--setup-doctest        Make globals created by the --setup Python code block\n                       or setup directive visible to session blocks and only\n                       when they are tested with the pytest --doctest-modules\n                       option.  Please note that pytest runs doctests in a\n                       separate context that only runs doctests. This option\n                       is ignored if there is no --setup option.\n\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n```\n\n## Run as a Python module\n\nTo run phmdoctest from the command line:\n\n`python -m phmdoctest doc/example2.md --report`\n\n\n## Python API\n\nCall **main.testfile()** to generate a pytest file in memory.\nPlease see the Python API [here][10].\nThe example generates a pytest file from doc/setup.md and\ncompares the result to doc/test_setup.py.\n<!--phmdoctest-label main-testfile-->\n```python\nfrom pathlib import Path\nimport phmdoctest.main\n\ngenerated_testfile = phmdoctest.main.testfile(\n    \"doc/setup.md\",\n    setup=\"FIRST\",\n    teardown=\"LAST\",\n)\nexpected = Path(\"doc/test_setup.py\").read_text(encoding=\"utf-8\")\nassert expected == generated_testfile\n```\n\n## pytest fixtures\n\nUse fixture **testfile_creator** to generate a test file in memory.\nPass the test file to fixture **testfile_tester** to run\nthe test file in the pytester environment.\n[Fixture API][10] | [Example](doc/project_test_py.md).\nSee more uses in tests/test_examples.py, tests/test_details.py, and\ntests/test_many_markdown.py.\nThe fixtures run pytest much faster than `run_and_pytest()`\nbelow since there is no subprocess call.\nIn the readthedocs documentation see the section Development tools API 1.4.0.\npytest's pytester is suitable for pytest plugin development.\n\n## Simulate command line\n\nTo simulate a command line call to phmdoctest from\nwithin a Python script `phmdoctest.simulator` offers the\nfunction `run_and_pytest()`.\n- it creates the --outfile in a temporary directory\n- optionally runs pytest on the outfile\n- pytest can return a JUnit XML report\n- useful during development to validate the command line\n  and prevent use of a stale --outfile\n\nPlease see the [Latest Development tools API section][10] or\nthe docstring of the function `run_and_pytest()` in the file `simulator.py.`\nPass pytest_options as a list of strings as shown below.\n\n<!--phmdoctest-label simulator-->\n```python\nimport phmdoctest.simulator\n\ncommand = \"phmdoctest doc/example1.md --report --outfile temporary.py\"\nsimulator_status = phmdoctest.simulator.run_and_pytest(\n    well_formed_command=command, pytest_options=[\"--doctest-modules\", \"-v\"]\n)\nassert simulator_status.runner_status.exit_code == 0\nassert simulator_status.pytest_exit_code == 0\n```\n\n## Hints\n\n- To read the Markdown file from the standard input stream.\n  Use `-` for MARKDOWN_FILE.\n- Write the test file to a temporary directory so that\n  it is always up to date.\n- In CI scripts the following shell command will create the temporary\n  directory **tmp** in the **tests** folder on Windows, Linux, and macOS.\n  ```bash\n  python -c \"from pathlib import Path; d = Path('tests') / 'tmp'; d.mkdir(mode=0o700)\"\n  ```\n- It is easy to use --output by mistake instead of `--outfile`.\n- If Python code block has no output, put assert statements in the code.\n- Use pytest option `--doctest-modules` to test the sessions.\n- Markdown indented code blocks ([Spec][8] section 4.4) are ignored.\n- simulator_status.runner_status.exit_code == 2 is the click\n  command line usage error.\n- Since phmdoctest generates code, the input file should be from a trusted\n  source.\n- An empty code block gets given the role `del-code`. It is not tested.\n- Use special TEXT values FIRST, SECOND, LAST for the command\n  line options `--setup` and `--teardown` since they only match one block.\n- The variable names `managenamespace`, `doctest_namespace`,\n  `capsys`, and `_phm_expected_str` should not be used in\n  Markdown Python code blocks since they may be used in generated code.\n- Setup and teardown code blocks cannot have expected output.\n- To have pytest collect a code block with the label directive\n  start the value with `test_`.\n- With the `--setup-doctest` option, names assigned by the setup code\n  block are globally visible to the entire test suite.\n  This is due to the scope of the pytest doctest_namespace\n  fixture.  Try using a separate pytest command to test\n  just the phmdoctest test.\n- The module **phmdoctest.fixture** is imported at pytest time\n  to support setup, teardown, share-names, and clear-names features.\n- The phmdoctest Markdown parser finds fenced code blocks enclosed by\n  html `<details>` and `</details>` tags.\n  The tags may require a preceding and trailing blank line\n  to render correctly. See example in tests/test_details.py.\n- Try redirecting phmdoctest standard output into PYPI Pygments to\n  colorize the generated test file.\n  ```shell\n  python -m phmdoctest project.md --outfile - | pygmentize\n  ```\n\n- If the --outfile is written into a folder that pre-exists in the\n  repository, consider adding the outfile name to .gitignore. If\n  the outfile name later changes, the change will be needed in\n  .gitignore too.\n  ```\n  # Reserved for generated test file.\n  tests/test_readme.py\n  ```\n\n## Directive hints\n\n- Only put one of setup, teardown, share-names, or\n  clear-names on a code block.\n- Only one block can be setup. Only one block can be teardown.\n- The setup or teardown block can't have an expected output block.\n- Label directive does not generate a test\n  case name on setup and teardown blocks.\n- Directives displayed in the `--report` start with a dash like\n  this: `-label test_i_ratio`.\n- Code generated by Python blocks with setup and teardown\n  directives runs at the pytest fixture `scope=\"module\"` level.\n- Code generated by Python blocks with share-names and\n  clear-names directives are **collected** and run by pytest\n  like any other test case.\n- A malformed HTML comment ending is bad. Make sure\n  it ends with both dashes like `-->`.  Running with `--report`\n  will expose that problem.\n- The setup, teardown, share-names, and clear-names directives\n  have logging. To see the log messages,\n  run pytest with the option:\n  `--log-cli-level=DEBUG --color=yes`\n- There is no limit to number of blank lines after\n  the directive HTML comment but before the fenced code block.\n- The directive `<!--phmdoctest-mark.xfail-->` might be useful as\n  an alternative to `<!--phmdoctest-mark.skip-->` for failing examples.\n- The directive `<!--phmdoctest-mark.ATTRIBUTE-->` will not be\n  effective when used with `<!--phmdoctest-setup-->` or\n   `<!--phmdoctest-teardown-->` because pytest marks can only\n  be applied to tests. They have no effect on fixtures.\n  Setup and teardown use fixtures.\n\n## Related projects\n- rundoc\n- byexample\n- sphinx.ext.doctest\n- sybil\n- doxec\n- egtest\n- pytest-phmdoctest\n- pytest-codeblocks\n\n[3]: https://github.github.com/gfm/#fenced-code-blocks\n[11]: https://github.github.com/gfm/#info-string\n[10]: https://phmdoctest.readthedocs.io/en/latest/doc/api.html\n[7]: https://pypi.org/project/commonmark\n[8]: https://spec.commonmark.org\n[9]: https://commonmark.org\n[4]: https://docs.python.org/3/library/doctest.html\n[6]: https://pypi.org/project/coverage\n[13]: https://ci.appveyor.com/project/tmarktaylor/phmdoctest\n[14]: https://travis-ci.org/tmarktaylor/monotable\n[15]: https://docs.pytest.org/en/stable\n[16]: https://pypi.org/project/pytest-phmdoctest\n\nCopyright (c) 2021 Mark Taylor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://tmarktaylor.github.io/phmdoctest",
    "keywords": "documentation,doctest,markdown,testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phmdoctest",
    "package_url": "https://pypi.org/project/phmdoctest/",
    "platform": null,
    "project_url": "https://pypi.org/project/phmdoctest/",
    "project_urls": {
      "Bug Reports": "https://github.com/tmarktaylor/phmdoctest/issues",
      "Homepage": "https://tmarktaylor.github.io/phmdoctest",
      "Source": "https://github.com/tmarktaylor/phmdoctest/"
    },
    "release_url": "https://pypi.org/project/phmdoctest/1.4.0/",
    "requires_dist": [
      "pytest",
      "Click (>=7.1.1)",
      "commonmark (>=0.9.1)",
      "monotable (>=2.1.1)",
      "tomli (>=1.0.0) ; python_version < \"3.11\"",
      "myst-parser ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "black ; extra == 'inspect'",
      "flake8 ; extra == 'inspect'",
      "pep8-naming ; extra == 'inspect'",
      "mypy ; extra == 'inspect'",
      "typing ; extra == 'inspect'",
      "check-manifest ; extra == 'inspect'",
      "twine ; extra == 'inspect'",
      "coverage ; extra == 'test'",
      "pytest (>=6.2) ; extra == 'test'",
      "PyYAML (>=5.4.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Python syntax highlighted Markdown doctest.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13225504,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aaf1eedbdc62802720aa9c86a051cac9d68f54d5a06cd5eb22a3ea6c6a04fa4",
          "md5": "4c11d8017ec07d12d0cbf9e10e900c05",
          "sha256": "ac45ac3b4d8d5cc331639ca737be6d955055dee80306d528629e4b15cd147277"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c11d8017ec07d12d0cbf9e10e900c05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15279,
        "upload_time": "2020-03-18T18:51:47",
        "upload_time_iso_8601": "2020-03-18T18:51:47.260713Z",
        "url": "https://files.pythonhosted.org/packages/9a/af/1eedbdc62802720aa9c86a051cac9d68f54d5a06cd5eb22a3ea6c6a04fa4/phmdoctest-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daadbff0ed1e9b186fd4c784cc11b6519fc8b1d99411a7104b606fd637d74ade",
          "md5": "2a9f1619714cc7347a9256cc5f3c0c6f",
          "sha256": "0828d3529a1c343e12554b52aaa3af2fb9570962889bb2a7f05139e829c1e4fc"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2a9f1619714cc7347a9256cc5f3c0c6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 26769,
        "upload_time": "2020-03-18T18:51:49",
        "upload_time_iso_8601": "2020-03-18T18:51:49.661432Z",
        "url": "https://files.pythonhosted.org/packages/da/ad/bff0ed1e9b186fd4c784cc11b6519fc8b1d99411a7104b606fd637d74ade/phmdoctest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61d470c923e07dc1b8af0cea24d8f5035edafcf106a2f888caaf2d2e2ab04cb3",
          "md5": "0e03b19c143170854ce5d2965dda6134",
          "sha256": "cfe12023df6747d7cf0327eb99f761d300e0ed8f4b462b2d962c8db0e07f215f"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e03b19c143170854ce5d2965dda6134",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15295,
        "upload_time": "2020-03-18T19:31:48",
        "upload_time_iso_8601": "2020-03-18T19:31:48.904542Z",
        "url": "https://files.pythonhosted.org/packages/61/d4/70c923e07dc1b8af0cea24d8f5035edafcf106a2f888caaf2d2e2ab04cb3/phmdoctest-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "688e1c7e7d80271a85ea4588d19a70bf1b60be3464fe17d13ff8796f5a0c10ee",
          "md5": "225d99c21f95d35bc53cd7abd2aad692",
          "sha256": "95cf47477f9aa7e45f785eeb657273907560b45a0a670c948fa81f61d77adb30"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "225d99c21f95d35bc53cd7abd2aad692",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 26793,
        "upload_time": "2020-03-18T19:31:50",
        "upload_time_iso_8601": "2020-03-18T19:31:50.024967Z",
        "url": "https://files.pythonhosted.org/packages/68/8e/1c7e7d80271a85ea4588d19a70bf1b60be3464fe17d13ff8796f5a0c10ee/phmdoctest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8ac5f40287f5935b0bf97f3fbe8e8626f7cf87d502431710c0886f3099b2e00",
          "md5": "138404c834babe56c31451ebc0109db3",
          "sha256": "da2733ebab2d6d56127dd6684f3523b7e45ebb4a8c5e508195f0dbe6e98df78e"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "138404c834babe56c31451ebc0109db3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15427,
        "upload_time": "2020-04-02T17:28:38",
        "upload_time_iso_8601": "2020-04-02T17:28:38.377248Z",
        "url": "https://files.pythonhosted.org/packages/a8/ac/5f40287f5935b0bf97f3fbe8e8626f7cf87d502431710c0886f3099b2e00/phmdoctest-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a389198adfe1afdf0a7cdec48f0ad22e962b38ec8e739495f52eab1ba20943c8",
          "md5": "8c8db924d8446cfd028eb5bac90567ce",
          "sha256": "42f0d6f473919343e653656ddc07cd377a546ca1681c1892549d4b40b6509873"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8c8db924d8446cfd028eb5bac90567ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 30803,
        "upload_time": "2020-04-02T17:28:39",
        "upload_time_iso_8601": "2020-04-02T17:28:39.513796Z",
        "url": "https://files.pythonhosted.org/packages/a3/89/198adfe1afdf0a7cdec48f0ad22e962b38ec8e739495f52eab1ba20943c8/phmdoctest-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d61cf5fc23e43314c03451a709fa040b3e0f9ab6e2f2e75944cf69dcc04e064c",
          "md5": "ae34128586ebd6beb5faecbb800ef255",
          "sha256": "b781d01f4086dc3b571e3048b930381dd8ced9106e1cdb536a4ceb41fcadc0e9"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae34128586ebd6beb5faecbb800ef255",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15623,
        "upload_time": "2020-04-20T16:43:07",
        "upload_time_iso_8601": "2020-04-20T16:43:07.817096Z",
        "url": "https://files.pythonhosted.org/packages/d6/1c/f5fc23e43314c03451a709fa040b3e0f9ab6e2f2e75944cf69dcc04e064c/phmdoctest-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f924bb6f31e88d564bd27065478edc5984a08ccafd5e660c70bd3ae676f51231",
          "md5": "7104952abe94d2168bafcdbdb0181df9",
          "sha256": "fb74318c154ffd69112f8a58d12428f6eb71382f141e77d71a8efdb2dc3118cf"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7104952abe94d2168bafcdbdb0181df9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 32578,
        "upload_time": "2020-04-20T16:43:09",
        "upload_time_iso_8601": "2020-04-20T16:43:09.196875Z",
        "url": "https://files.pythonhosted.org/packages/f9/24/bb6f31e88d564bd27065478edc5984a08ccafd5e660c70bd3ae676f51231/phmdoctest-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0926ecb8a344ad1acc93a6225247d14c6591451633529ebfdafd63730eccfc9",
          "md5": "006d907cdf6ea0f54c392de40f307a35",
          "sha256": "7ba74a6f8dae52e01228d8bee929e5d11dc650d1a1476aa196aebcecde46dfef"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "006d907cdf6ea0f54c392de40f307a35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15625,
        "upload_time": "2020-06-07T14:20:35",
        "upload_time_iso_8601": "2020-06-07T14:20:35.206236Z",
        "url": "https://files.pythonhosted.org/packages/b0/92/6ecb8a344ad1acc93a6225247d14c6591451633529ebfdafd63730eccfc9/phmdoctest-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1c17dd6e0422a6f20cebd23f2381f148d789d9c7df3a0edbceb854dbba2c9ca",
          "md5": "e367df085d4b324fd41f9ba258af6878",
          "sha256": "227ffb196975bd8b32164c00e10973e236274b0399d1719abd5f373569a8ed94"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e367df085d4b324fd41f9ba258af6878",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 32693,
        "upload_time": "2020-06-07T14:20:36",
        "upload_time_iso_8601": "2020-06-07T14:20:36.466518Z",
        "url": "https://files.pythonhosted.org/packages/a1/c1/7dd6e0422a6f20cebd23f2381f148d789d9c7df3a0edbceb854dbba2c9ca/phmdoctest-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8979ef7195641275bf929f64997cf45535b2251d80e1f81b34015e01fed1fdae",
          "md5": "e1099e45e39cc57f861c4279c4d41b60",
          "sha256": "8a2ac7729a9f6dc2caf4705446449e38f7c46640e71a03dbbac6d1b2f9b78749"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1099e45e39cc57f861c4279c4d41b60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16759,
        "upload_time": "2020-06-14T19:04:46",
        "upload_time_iso_8601": "2020-06-14T19:04:46.480160Z",
        "url": "https://files.pythonhosted.org/packages/89/79/ef7195641275bf929f64997cf45535b2251d80e1f81b34015e01fed1fdae/phmdoctest-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "099f4e6eb21e9215d758a39afa3cb09955920cc4c106d0643a1e98cafd3fde29",
          "md5": "15575499635d6d0becd28432b18f96ae",
          "sha256": "69466451e0e55f6854aa12a1b4f3cb6cebde87ec446bdb1779c08ca98458a4f3"
        },
        "downloads": -1,
        "filename": "phmdoctest-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15575499635d6d0becd28432b18f96ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 36454,
        "upload_time": "2020-06-14T19:04:47",
        "upload_time_iso_8601": "2020-06-14T19:04:47.797173Z",
        "url": "https://files.pythonhosted.org/packages/09/9f/4e6eb21e9215d758a39afa3cb09955920cc4c106d0643a1e98cafd3fde29/phmdoctest-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7da5c766a1b55f77ade97c3f5d4cb54585cfcf483956a1851d71fa18cdce12ff",
          "md5": "773d8976c430c1a42cfff12c675e9869",
          "sha256": "3aaa2ef7d73c0f1f8c4d2ff3b027cb1c67da55d0e23f16088a89bdcbffcb4b4f"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "773d8976c430c1a42cfff12c675e9869",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24400,
        "upload_time": "2020-07-12T19:28:24",
        "upload_time_iso_8601": "2020-07-12T19:28:24.879989Z",
        "url": "https://files.pythonhosted.org/packages/7d/a5/c766a1b55f77ade97c3f5d4cb54585cfcf483956a1851d71fa18cdce12ff/phmdoctest-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6cb027bb42e6192f84243a1e7b167a9598676f14744617145dd56d987a05787",
          "md5": "873bd182effe8ca16f62a154c9df40a5",
          "sha256": "82d7bc1a51074a241f262f714380087156155b928eeb22d1710228fae7bcaf7d"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "873bd182effe8ca16f62a154c9df40a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 51135,
        "upload_time": "2020-07-12T19:28:26",
        "upload_time_iso_8601": "2020-07-12T19:28:26.281940Z",
        "url": "https://files.pythonhosted.org/packages/f6/cb/027bb42e6192f84243a1e7b167a9598676f14744617145dd56d987a05787/phmdoctest-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bde896b60ee2003f32853388237c0f1bdb314cd7ea0e5dec414cd434b167510",
          "md5": "b4bbb96314fce4bea99a03d51731cac9",
          "sha256": "3af31be6ee59e912a84aeea06bae8d2ab89145605080e6fdb33419500be0ea8e"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4bbb96314fce4bea99a03d51731cac9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24221,
        "upload_time": "2020-12-16T21:36:16",
        "upload_time_iso_8601": "2020-12-16T21:36:16.313476Z",
        "url": "https://files.pythonhosted.org/packages/3b/de/896b60ee2003f32853388237c0f1bdb314cd7ea0e5dec414cd434b167510/phmdoctest-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "719bc8814dcc14dced2646be174e153ec17ce7d0bbed165e8772b626c64e9c13",
          "md5": "6487e3a8df92af55b92319a9be77e910",
          "sha256": "541f44545de0a838f020a7071ce81d28fe4024d3b2155f6447db8e79134e2dfc"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6487e3a8df92af55b92319a9be77e910",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 53778,
        "upload_time": "2020-12-16T21:36:17",
        "upload_time_iso_8601": "2020-12-16T21:36:17.624455Z",
        "url": "https://files.pythonhosted.org/packages/71/9b/c8814dcc14dced2646be174e153ec17ce7d0bbed165e8772b626c64e9c13/phmdoctest-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eefe6f360408043b5bf24220c9fef54bf049f286f83c36349ba65068580a594",
          "md5": "d3b44ae40424f38d046f68f5c1536ff0",
          "sha256": "e25bf2f9a246d4e8a20d04b4807b358545e2145be5a2d87a72aea6617640d95a"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3b44ae40424f38d046f68f5c1536ff0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 32198,
        "upload_time": "2021-05-12T20:39:12",
        "upload_time_iso_8601": "2021-05-12T20:39:12.042805Z",
        "url": "https://files.pythonhosted.org/packages/9e/ef/e6f360408043b5bf24220c9fef54bf049f286f83c36349ba65068580a594/phmdoctest-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2fe8a8d4bdf7f9020bafa83204f700bf4b86fa5be84d9cd63eb9beea161f9a1",
          "md5": "57efb9b282cf9b190d9026f3c72aacea",
          "sha256": "d322e8a362d1391227061c1f3ec7d53e4c7c916a6f574cb13c24ac7e72e709f8"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "57efb9b282cf9b190d9026f3c72aacea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 82156,
        "upload_time": "2021-05-12T20:39:13",
        "upload_time_iso_8601": "2021-05-12T20:39:13.873426Z",
        "url": "https://files.pythonhosted.org/packages/e2/fe/8a8d4bdf7f9020bafa83204f700bf4b86fa5be84d9cd63eb9beea161f9a1/phmdoctest-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43e571e80bf5e7d2a1cb7caca8dca93b0b43a66c0f4722797c0945c5bb61cea9",
          "md5": "be56f6135f4b2ea8f8d1596f0f3bf796",
          "sha256": "c4a2a2954f898ea5b58b7bc2a9147c6811d71b1dc70fbb853c1453b623105cc9"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be56f6135f4b2ea8f8d1596f0f3bf796",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 32517,
        "upload_time": "2021-05-14T17:06:34",
        "upload_time_iso_8601": "2021-05-14T17:06:34.889589Z",
        "url": "https://files.pythonhosted.org/packages/43/e5/71e80bf5e7d2a1cb7caca8dca93b0b43a66c0f4722797c0945c5bb61cea9/phmdoctest-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c11ce813b67efd7565935e27b79906d3287c5c0f45ae37ff2715cb77d4f61d",
          "md5": "98a13bcb99f65e1e3bff88ff2269f56b",
          "sha256": "a1ffbe3eefd16ec23ff3863ece1d7f65198ad4fee2ece057895651f8cb4f33a3"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "98a13bcb99f65e1e3bff88ff2269f56b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 83254,
        "upload_time": "2021-05-14T17:06:36",
        "upload_time_iso_8601": "2021-05-14T17:06:36.252108Z",
        "url": "https://files.pythonhosted.org/packages/f9/c1/1ce813b67efd7565935e27b79906d3287c5c0f45ae37ff2715cb77d4f61d/phmdoctest-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "019aa142514576b8386c64a9cb4dd7b56c8cce662159f5a822a0544832cca38a",
          "md5": "1ff0d094ce617e587f82ea71519a697a",
          "sha256": "0dfe81e83acbfc9fe44c9b780e5e088cf13ad6b656eb3da3094ece9651459acf"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ff0d094ce617e587f82ea71519a697a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35726,
        "upload_time": "2021-06-09T11:13:51",
        "upload_time_iso_8601": "2021-06-09T11:13:51.586946Z",
        "url": "https://files.pythonhosted.org/packages/01/9a/a142514576b8386c64a9cb4dd7b56c8cce662159f5a822a0544832cca38a/phmdoctest-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "151965086a0f0bc71af84eea57ab60152c222473a25e49bdc45aa98192aa5804",
          "md5": "7a6286f153197b0d706a8538304c68b5",
          "sha256": "949af6bd520df9287724b8671a932ec3513b6d75da9194eed359579ad972a5e7"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a6286f153197b0d706a8538304c68b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 88071,
        "upload_time": "2021-06-09T11:13:53",
        "upload_time_iso_8601": "2021-06-09T11:13:53.448776Z",
        "url": "https://files.pythonhosted.org/packages/15/19/65086a0f0bc71af84eea57ab60152c222473a25e49bdc45aa98192aa5804/phmdoctest-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1aa24719225e1d5dbcae3d4ff87a625dc9656528c9bb382cc28f20d15a1e22",
          "md5": "f6b1b8122ee753c617cdbd038545dcb5",
          "sha256": "c04808a4de0ac9e23577cb3f6ff9330a96bbdeb83102fb16ce841a9e4a519d66"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6b1b8122ee753c617cdbd038545dcb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35715,
        "upload_time": "2021-07-07T23:34:28",
        "upload_time_iso_8601": "2021-07-07T23:34:28.392974Z",
        "url": "https://files.pythonhosted.org/packages/4c/1a/a24719225e1d5dbcae3d4ff87a625dc9656528c9bb382cc28f20d15a1e22/phmdoctest-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a8941e48df70217c2bc771de3844ac73027368138fa03951b028f1bc4d5e25d",
          "md5": "be13a0aa017a07e0e3eefc5626be78c0",
          "sha256": "85dffd917ec7c84235462f0359d2a8d0bd71f17cc9d84439ea5120ac67cedc88"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be13a0aa017a07e0e3eefc5626be78c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 88516,
        "upload_time": "2021-07-07T23:34:30",
        "upload_time_iso_8601": "2021-07-07T23:34:30.193000Z",
        "url": "https://files.pythonhosted.org/packages/1a/89/41e48df70217c2bc771de3844ac73027368138fa03951b028f1bc4d5e25d/phmdoctest-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2f67284db2990fafd73b8cb066810a0f7ef63e670e4936aaca670f44e57b21e",
          "md5": "c016760ae6140b1045b66cb5cdb8bd07",
          "sha256": "d4f7a0ef9d20a29e01c83e78cc8285dae93da6263f0088168b7e1a0c91b89cec"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c016760ae6140b1045b66cb5cdb8bd07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39266,
        "upload_time": "2021-11-08T19:27:51",
        "upload_time_iso_8601": "2021-11-08T19:27:51.839053Z",
        "url": "https://files.pythonhosted.org/packages/e2/f6/7284db2990fafd73b8cb066810a0f7ef63e670e4936aaca670f44e57b21e/phmdoctest-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9203c85c38b3faf9c1501a71d68cdf1b8b6be33a12fd7a90be3aac223596df9c",
          "md5": "982c2d0b6233291c09e09253bafecbf5",
          "sha256": "269c3704791a62897c28d0d1b22c818ce45d73b538b104f00953e093588838d0"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "982c2d0b6233291c09e09253bafecbf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 99063,
        "upload_time": "2021-11-08T19:27:53",
        "upload_time_iso_8601": "2021-11-08T19:27:53.328504Z",
        "url": "https://files.pythonhosted.org/packages/92/03/c85c38b3faf9c1501a71d68cdf1b8b6be33a12fd7a90be3aac223596df9c/phmdoctest-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aadd0700cb1dda98c2677bb79d7330ff2190bd19793dc55721fbae09822838fb",
          "md5": "35dc7038cd215b77e542e9e36b32ae51",
          "sha256": "4c9db90314183bc874d20947dba4ee93018d0412380f26137db0050a8b7903a9"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35dc7038cd215b77e542e9e36b32ae51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43589,
        "upload_time": "2022-03-19T19:10:25",
        "upload_time_iso_8601": "2022-03-19T19:10:25.471445Z",
        "url": "https://files.pythonhosted.org/packages/aa/dd/0700cb1dda98c2677bb79d7330ff2190bd19793dc55721fbae09822838fb/phmdoctest-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98864e967c119158e7a0d4974346a0076d529e34be44ee182c35e3a98c3ea26d",
          "md5": "a27f86b5820273682ad41b987cb22bce",
          "sha256": "eb9dd5dc415d6e48ccd3a273e250c519b1e2b9e22e21ddf6e6f716efbb0f2e09"
        },
        "downloads": -1,
        "filename": "phmdoctest-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a27f86b5820273682ad41b987cb22bce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 113039,
        "upload_time": "2022-03-19T19:10:27",
        "upload_time_iso_8601": "2022-03-19T19:10:27.352036Z",
        "url": "https://files.pythonhosted.org/packages/98/86/4e967c119158e7a0d4974346a0076d529e34be44ee182c35e3a98c3ea26d/phmdoctest-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aadd0700cb1dda98c2677bb79d7330ff2190bd19793dc55721fbae09822838fb",
        "md5": "35dc7038cd215b77e542e9e36b32ae51",
        "sha256": "4c9db90314183bc874d20947dba4ee93018d0412380f26137db0050a8b7903a9"
      },
      "downloads": -1,
      "filename": "phmdoctest-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35dc7038cd215b77e542e9e36b32ae51",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 43589,
      "upload_time": "2022-03-19T19:10:25",
      "upload_time_iso_8601": "2022-03-19T19:10:25.471445Z",
      "url": "https://files.pythonhosted.org/packages/aa/dd/0700cb1dda98c2677bb79d7330ff2190bd19793dc55721fbae09822838fb/phmdoctest-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98864e967c119158e7a0d4974346a0076d529e34be44ee182c35e3a98c3ea26d",
        "md5": "a27f86b5820273682ad41b987cb22bce",
        "sha256": "eb9dd5dc415d6e48ccd3a273e250c519b1e2b9e22e21ddf6e6f716efbb0f2e09"
      },
      "downloads": -1,
      "filename": "phmdoctest-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a27f86b5820273682ad41b987cb22bce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 113039,
      "upload_time": "2022-03-19T19:10:27",
      "upload_time_iso_8601": "2022-03-19T19:10:27.352036Z",
      "url": "https://files.pythonhosted.org/packages/98/86/4e967c119158e7a0d4974346a0076d529e34be44ee182c35e3a98c3ea26d/phmdoctest-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}