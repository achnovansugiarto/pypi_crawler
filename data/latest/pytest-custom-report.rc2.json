{
  "info": {
    "author": "Wim Glenn",
    "author_email": "hey@wimglenn.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "|travis|_ |pypi|_ |pyversions|_\n\n.. |travis| image:: https://img.shields.io/travis/wimglenn/pytest-custom-report.svg?branch=master\n.. _travis: https://travis-ci.org/wimglenn/pytest-custom-report\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pytest-custom-report.svg\n.. _pypi: https://pypi.org/project/pytest-custom-report\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/pytest-custom-report.svg\n.. _pyversions:\n\n\n.. image:: https://user-images.githubusercontent.com/6615374/44383803-a48a7600-a4df-11e8-9ce5-dfd5eca9d208.png\n\n\npytest-custom-report\n====================\n\nA plugin for defining your own characters to be used when displaying test outcomes in `pytest <https://docs.pytest.org/en/latest/>`_ (passed, failed, skipped etc).\n\nFor example, if you wanted to see a `PILE OF POO (U+1F4A9) <https://www.fileformat.info/info/unicode/char/1f4a9/index.htm>`_ glyph displayed in the terminal report for each failing test:\n\n.. code-block:: bash\n\n   pytest --report-failed=ðŸ’©\n\nTo persist your custom characters, add a section like this in the `configuration file <https://docs.pytest.org/en/latest/customize.html>`_ (i.e. in ``pytest.ini``, ``tox.ini``, ``setup.cfg`` or whatever):\n\n.. code-block::\n\n   [pytest]\n   report_failed = ðŸ’©\n   report_failed_verbose = OH CRAP\n\n\nInstallation and Usage\n----------------------\n\n.. code-block:: bash\n\n   pip install pytest-custom-report\n\nThis will add new command-line arguments and configuration file options to ``pytest`` (detailed in the following section). Command line arguments take precedence over configuration file settings. The plugin is always enabled, but unless you've configured your own symbols the ``pytest`` defaults are used.\n\nTo execute tests with the plugin disabled temporarily, use this:\n\n.. code-block:: bash\n\n   pytest -p no:pytest-custom-report\n\nIf you're trying to use emojis but you can't see the glyphs properly in your terminal, you may be missing unicode fonts with the upper plane - you could install for example `GNU Unifont <http://unifoundry.com/unifont/index.html>`_.\n\n\nConfiguration\n-------------\n\nThe table below shows the available options as well as ``pytest``'s default style for each outcome.\n\n==============  ============================  ======================  =======================\ntest outcome    command-line argument name    .ini file config key    default report symbol\n==============  ============================  ======================  =======================\n``passed``      ``--report-passed``           ``report_passed``       ``.``\n``xpassed``     ``--report-xpassed``          ``report_xpassed``      ``X``\n``failed``      ``--report-failed``           ``report_failed``       ``F``\n``xfailed``     ``--report-xfailed``          ``report_xfailed``      ``x``\n``skipped``     ``--report-skipped``          ``report_skipped``      ``s``\n``error``       ``--report-error``            ``report_error``        ``E``\n==============  ============================  ======================  =======================\n\nWhen tests are executed with ``-v`` or ``--verbose`` flag enabled, you'll see longer strings displayed and one-line per test outcome. These can be specified too.\n\n==============  ============================  ==========================  =======================\ntest outcome    command-line argument name    .ini file config key        default report string\n==============  ============================  ==========================  =======================\n``passed``      ``--report-passed-verbose``   ``report_passed_verbose``   ``PASSED``\n``xpassed``     ``--report-xpassed-verbose``  ``report_xpassed_verbose``  ``XPASS``\n``failed``      ``--report-failed-verbose``   ``report_failed_verbose``   ``FAILED``\n``xfailed``     ``--report-xfailed-verbose``  ``report_xfailed_verbose``  ``XFAIL``\n``skipped``     ``--report-skipped-verbose``  ``report_skipped_verbose``  ``SKIPPED``\n``error``       ``--report-error-verbose``    ``report_error_verbose``    ``ERROR``\n==============  ============================  ==========================  =======================\n\n\nExample config file\n-------------------\n\nHere is some example ``pytest.ini`` content that you can copy-paste and modify to your liking:\n\n.. code::\n\n   [pytest]\n\n   report_passed = âœ”\n   report_xpassed = ðŸ¦„\n   report_failed = âœ—\n   report_xfailed = ðŸ‘Ž\n   report_skipped = ?\n   report_error = ðŸ”¥\n\n   report_passed_verbose = OH YEAH\n   report_xpassed_verbose = WHAT IN TARNATION?\n   report_failed_verbose = OH CRAP\n   report_xfailed_verbose = YEAH WHATEVER\n   report_skipped_verbose = DON'T CARE\n   report_error_verbose = YOU MEDDLING KIDS!\n\n\n.. image:: https://user-images.githubusercontent.com/6615374/44383928-02b75900-a4e0-11e8-9d81-84c0d2b14155.png\n\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wimglenn/pytest-custom-report",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-custom-report",
    "package_url": "https://pypi.org/project/pytest-custom-report/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-custom-report/",
    "project_urls": {
      "Homepage": "https://github.com/wimglenn/pytest-custom-report"
    },
    "release_url": "https://pypi.org/project/pytest-custom-report/1.0.1/",
    "requires_dist": [
      "pytest"
    ],
    "requires_python": "",
    "summary": "Configure the symbols displayed for test outcomes",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4761571,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba1ae8b5f2ad9e7f8e3da960b1bda746aaea7621c1a8ae486d2bb3fca3a57ad",
          "md5": "682cf39b24a69115cb5d1e4bdb29a478",
          "sha256": "722c6dc22e60c09d765166d7a97d76464399405566abf4266648679f27f36958"
        },
        "downloads": -1,
        "filename": "pytest_custom_report-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "682cf39b24a69115cb5d1e4bdb29a478",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 4297,
        "upload_time": "2018-08-21T06:52:45",
        "upload_time_iso_8601": "2018-08-21T06:52:45.795425Z",
        "url": "https://files.pythonhosted.org/packages/eb/a1/ae8b5f2ad9e7f8e3da960b1bda746aaea7621c1a8ae486d2bb3fca3a57ad/pytest_custom_report-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "649aa2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8",
          "md5": "85e24eb1c89d8564015213af311f75a3",
          "sha256": "f048c5a06faf1621099a27571f4d749a666e8bfc038e158e10f17775add27364"
        },
        "downloads": -1,
        "filename": "pytest_custom_report-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85e24eb1c89d8564015213af311f75a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5099,
        "upload_time": "2019-01-30T21:56:54",
        "upload_time_iso_8601": "2019-01-30T21:56:54.622226Z",
        "url": "https://files.pythonhosted.org/packages/64/9a/a2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8/pytest_custom_report-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "649aa2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8",
        "md5": "85e24eb1c89d8564015213af311f75a3",
        "sha256": "f048c5a06faf1621099a27571f4d749a666e8bfc038e158e10f17775add27364"
      },
      "downloads": -1,
      "filename": "pytest_custom_report-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85e24eb1c89d8564015213af311f75a3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 5099,
      "upload_time": "2019-01-30T21:56:54",
      "upload_time_iso_8601": "2019-01-30T21:56:54.622226Z",
      "url": "https://files.pythonhosted.org/packages/64/9a/a2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8/pytest_custom_report-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}