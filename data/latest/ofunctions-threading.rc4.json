{
  "info": {
    "author": "NetInvent - Orsiris de Jong",
    "author_email": "contact@netinvent.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Microsoft",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: BSD :: FreeBSD",
      "Operating System :: POSIX :: BSD :: NetBSD",
      "Operating System :: POSIX :: BSD :: OpenBSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development",
      "Topic :: System",
      "Topic :: System :: Operating System",
      "Topic :: System :: Shells"
    ],
    "description": "# ofunctions\n## Collection of useful python functions\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/netinvent/ofunctions.svg)](http://isitmaintained.com/project/netinvent/ofunctions \"Percentage of issues still open\")\n[![Maintainability](https://api.codeclimate.com/v1/badges/d82ea82db47d8a91c5b6/maintainability)](https://codeclimate.com/github/netinvent/ofunctions/maintainability)\n[![codecov](https://codecov.io/gh/netinvent/ofunctions/branch/master/graph/badge.svg?token=WKQQHGHTO8)](https://codecov.io/gh/netinvent/ofunctions)\n[![linux-tests](https://github.com/netinvent/ofunctions/actions/workflows/linux.yaml/badge.svg)](https://github.com/netinvent/ofunctions/actions/workflows/linux.yaml)\n[![windows-tests](https://github.com/netinvent/ofunctions/actions/workflows/windows.yaml/badge.svg)](https://github.com/netinvent/ofunctions/actions/workflows/windows.yaml)\n[![GitHub Release](https://img.shields.io/github/release/netinvent/ofunctions.svg?label=Latest)](https://github.com/netinvent/ofunctions/releases/latest)\n\nofunctions is a set of various recurrent functions amongst\n\n- bisection: bisection algorithm for *any* function with *any* number of arguments, works LtoR and RtoL\n- checksums: various SHA256 tools for checking and creating checksum files\n- csv: CSV file reader with various enhancements over generic reader\n- delayed_keyboardinterrupt: just a nifty tool to catch CTRL+C signals\n- file_utils: file handling functions of which\n  - get_paths_recursive: Walks a path for directories / files, can deal with permission errors, has include / exclude lists with wildcard support...\n  - check_path_access: Checks whether a path is writable, with fallback for read test, and splits path until it finds which part denies permissions\n  - check_file_timestamp_delta: Check a time delta (seconds, minutes, hours...) against file ctime, mtime or atime\n  - hide_file: Hides/unhides files under windows & linux\n  - get_writable_temp_dir: Returns a temporary dir in which we are allowed to write\n  - get_writable_random_file: Returns a filename of a not-yet existing file we can write into\n- json_sanitize: make sure json does not contain unsupported chars, yes I look at you Windows eventlog\n- logger_utils: basic no brain console + file log creation\n- mailer: A class to deal with email sending, regardless of ssl/tls protocols, in batch or as single mail, with attachments\n- network: various tools like ping, internet check, MTU probing, public IP discovery, network interface IO counters\n- platform: nothing special here, just check what arch we are running on\n- process: simple kill-them-all function to terminate subprocesses\n- random: basic random string & password generator\n- service_control: control Windows / Linux service start / stop / status\n- string_handling: remove accents / special chars from strings\n- threading: threading decorator for functions, also contains a function call anti-flood system\n\nofunctions is compatible with Python 2.7 and 3.5+ and is tested on both Linux and Windows.\nThere are still two subpackages that will only work with Python 3.5+\n- delayed_keyboardinterrupt (signal handling is different in Python 2.7)\n- threading (we don't have concurrent_futures in python 2.7, so the @threaded decorator will indeed work, but can't return a result)\n\n\n## Setup\n\n```\npip install ofunctions.<subpackage>\n\n```\n\n## bisection Usage\n\nofunctions.bisection is a dichotomy algorithm that can be used for all kind of bisections, mathematical operations, kernel bisections...\nLet's imagine we have a function foo that takes argument x.\nx might be between 0 and 999, and for a given value of x above 712, foo(x) returns \"gotcha\".\nIn order to find at which x value foo(x) becomes \"gotcha\", we could run foo(x) for every possible value of x until the result becomes what we expect.\nThe above solution works, but takes time (up to 1000 foo(x) runs).\nWe can achieve the same result in max 10 steps by checking foo(x) where x will be the middle of all possible values.\nLooking at the result from that middle value, we'll know if the expected result should be a lower or higher value of x. We can repeat this action until we'll get the precise result.\n\nNow let's code the above example in less abstract:\n```\ndef foo(x):\n\t# We'll need to find value 712 te quickest way possible\n\tif x >= 712:\n\t\treturn \"gotcha\"\n\treturn False\n\nfrom ofunctions.bisection import bisect\n\nvalue = bisect(foo, range(0, 1000), expected_result=\"gotcha\")\nprint('Value is %s' % value)\n```\n\nThe above concept can be adapted in order to compute ethernet MTU values or whatever other values need to be calculated.\nSee ofunctions.network code for MTU probing example.\n\n\n## checksums Usage\n\n## csv Usage\n\n## delayed_keyboardinterrupt Usage\n\nThe DelayedKeyboardInterrupt class allows to intercept a CTRL+C call in order to finish atomic operations without interruption.\nEasy to use, we use a pythonic syntax as follows:\n\nSetup:\n```\npip install ofunctions.mailer\n```\n\nUsage:\n```\nwith DelayedKeyboardInterrupt():\n\t<your code that should not be interrupted>\n```\n## file_utils Usage\n\nofuntions.file_utils is a collection of tools to handle:\n- listing of paths\n\nSetup\n```\npip install ofunctions.file_utils\n```\n\n## json_sanitize Usage\n\njson_sanitize will remove any control characters from json content (0x00-0x1F and 0x7F-0x9F) of which some are usually non printable and non visible.\nThis is especially useful when dealing with various log files (ex: windows event logs) that need to be passed as json.\nIt will also remove dots from value names, since those are prohibited in json standard.\n\nSetup:\n```\npip install ofunctions.json_sanitize\n```\n\nUsage:\n```\nmy_json = {'some.name': 'some\\tvalue'}\nmy_santized_json = json_sanitize(my_json)\n```\nmy_santized_json will contain `{'somename': 'somevalue'}`\n\n## logger_utils Usage\n\n## mailer Usage\n\nofunctions.mailer is a simple mailing class and a rfc822 email validation function.\n\nSetup:\n```\npip install ofunctions.mailer\n```\n\nQuick usage:\n```\nfrom ofunctions.mailer import Mailer\n\nmailer = Mailer()  # Uses localhost:25\nmailer.send_email(subject='test', sender_mail='me@example.com', recipient_mails='them@example.com', body='some body just told me')\n```\n\nSmartRelay usage:\n```\nfrom ofunctions.mailer import Mailer\n\nmailer = Mailer(smtp_server='mail.example.com', smtp_port=587, security='tls', smtp_user='me', smtp_password='secure_p@$$w0rd_lol')\nmailer.send_email(subject='test', sender_mail='me@example.com', recipient_mails='them@example.com ; another_recipient@example.com', body='some body just told me')\n```\n\nBulk mailer usage:\n```\nfrom ofunctions.mailer import Mailer\n\nrecipients = ['me@example.com', 'them@example.com', 'anyone@example.com', 'malformed_address_at_example.com']\n\nmailer = Mailer(smtp_server='mail.example.com', smtp_port=465, security='ssl', debug=True, verify_certificates=False)\n\n# split_mails=True will send one email per recipient\n# split_mails=False will send one email for all recipients, which will be limited to the number of recipients the destination SMTP server allows\nmailer.send_email(subject='test', sender_mail='me@example.com', recipient_mails=recipients, body='some body just told me', split_mails=True)\n```\n\nAttachment usage:\n```\nfrom ofunctions.mailer import Mailer\n\nmailer = Mailer()  # Uses localhost:25\n\n# attachment can be a binary blob or a file path\n# filename is optional, and will rename a binary blob to something more meaningful\nmailer.send_email(subject='test', sender_mail='me@example.com', recipient_mails='them@example.com', body='some body just told me', attachment=attachment, filename='My Attachment File.txt')\n```\n\n## network Usage\n\nofunctions.network is a collection of various tools making network diag / mapping easier.\n\nSetup:\n```commandline\npip install ofunctions.network\n```\n\n### IOCounters\n\nIOCounters is a class that will log instant sent/received bytes as well as total sent/received bytes.\nOnce an instance is created, logging begins as a thread.\nYou may specify which interfaces to track at which resolution.\nIf none is given, all interfaces are tracked every second.\n\nExample of IO counters for network interfaces:\n```python\ncounter = IOCounters()\nwhile True:\n    print(counter.interfaces['eth0'].recv_bytes, counter.interfaces['eth0'].recv_bytes_total)\n    time.sleep(1)\n```\n\n```python\ncounter = IOCounters(['Ethernet Connection 2', 'Wi-Fi'], resolution=2)\nwhile True:\n    print(counter.interfaces['Ethernet Connection 2'].sent_bytes)\n    time.sleep(1)\n```\n\n## platform Usage\n\n## process Usage\n\n## random Usage\n\n## service_control Usage\n\n## string_handling Usage\n\n## threading Usage\n\n### @threaded\n\nthreading comes with a couple of decorators that allow to modify functions.\nIn order to thread a function, you can simply apply the `@threaded` decorator like below.\n\nOnce you call the function, it will automatically be threaded, and you get to keep your execution flow.\nYou can then execute whatever you want, or wait for it's result:\n\n```\n@threaded\ndef my_nice_function():\n   # Do some nice stuff\n   return result\n   \ndef main():\n   # Some stuff\n   thread = my_nice_function()\n   # Some other stuff being executed while my_nice_function runs in a thread\n   # now let's wait for my function result\n   result = thread.result()\n```\n\nRemember that Python 2.7 can't give you a result, so the function will be threaded, but without any possible return codes.\n\n### @no_flood\n\nThere are situations where some code can call multiple times the same function (on a trigger for example), but you don't want that function to run multiple times.\nThat's a situation where we should handle function call antiflooding.\n\nExample:\n```\n# Adding @no_flood(5) only allows one execution of my_function per 5 seconds\n\n@no_flood(5)\ndef my_function():\n    print(\"Hey, it's me !\")\n  \n# Will run my_function() only once\nfor _ in range(0, 20):\n    my_function()\n```\n\nMultiple executions of a functions are permitted as long as they're called with different arguments.\nThe `@no_flood` decorator can be setup to prevent **any** multiple function execution in a given timespan, regarless of it's arguments:\n\n```\n@no_flood(5, multiple_instances_diff_args=False)\n@def my_function(var):\n    print(\"Hey, it's me: {}\".format(var))\n\n# Will run my_function() only once\nfor i in range(0, 20):\n    my_function(i)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/netinvent/ofunctions",
    "keywords": "network,bisection,logging",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ofunctions.threading",
    "package_url": "https://pypi.org/project/ofunctions.threading/",
    "platform": null,
    "project_url": "https://pypi.org/project/ofunctions.threading/",
    "project_urls": {
      "Homepage": "https://github.com/netinvent/ofunctions"
    },
    "release_url": "https://pypi.org/project/ofunctions.threading/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "(",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15677166,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34ff3f44a5c3dd637aa05b7eef67f4aaf30407546d7236e81d8fa5ae84d3bb0b",
          "md5": "1f335d836da63e26720571ba3943e848",
          "sha256": "88e1d85a511a0b08db277640cadb90f66f1994c61ad77478c1c8bcb444830599"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f335d836da63e26720571ba3943e848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 5261,
        "upload_time": "2021-03-30T14:04:27",
        "upload_time_iso_8601": "2021-03-30T14:04:27.061052Z",
        "url": "https://files.pythonhosted.org/packages/34/ff/3f44a5c3dd637aa05b7eef67f4aaf30407546d7236e81d8fa5ae84d3bb0b/ofunctions.threading-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c05094554d285e157e4ae155637385d27b7bf587494a280f8ae5168b1a7dc3",
          "md5": "fe4d374c222b32aff1e168583201a7a9",
          "sha256": "f049a59f29bab4bebf6be8b4987e14acc605154257a66de8dd6bf11896ebcbcd"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe4d374c222b32aff1e168583201a7a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5118,
        "upload_time": "2021-03-30T14:04:34",
        "upload_time_iso_8601": "2021-03-30T14:04:34.793184Z",
        "url": "https://files.pythonhosted.org/packages/a8/c0/5094554d285e157e4ae155637385d27b7bf587494a280f8ae5168b1a7dc3/ofunctions.threading-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f846f7b539d464695a0da3fcc69b97e18160f0704dcd55a98489cddb504629e",
          "md5": "335c7d3c8d8f25bd8f49425949c96e02",
          "sha256": "1b6bbd18cc81f31e075bbb83fa12c2a6893a52bb5aae9b77040790b125360915"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "335c7d3c8d8f25bd8f49425949c96e02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7669,
        "upload_time": "2022-07-10T12:31:52",
        "upload_time_iso_8601": "2022-07-10T12:31:52.946275Z",
        "url": "https://files.pythonhosted.org/packages/4f/84/6f7b539d464695a0da3fcc69b97e18160f0704dcd55a98489cddb504629e/ofunctions.threading-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54863b33fdb58712a3198f4bdb25d45a7d5848adabfe5a21cad917020ce65c9f",
          "md5": "bd8234f7bde16fbe8df5eb0c85500466",
          "sha256": "c182a7298b24f930886efe132a8fe22da919f77253fc8606615101b7c610bdae"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd8234f7bde16fbe8df5eb0c85500466",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8360,
        "upload_time": "2022-07-10T12:32:03",
        "upload_time_iso_8601": "2022-07-10T12:32:03.900157Z",
        "url": "https://files.pythonhosted.org/packages/54/86/3b33fdb58712a3198f4bdb25d45a7d5848adabfe5a21cad917020ce65c9f/ofunctions.threading-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08cef2aaa470bc0bf1141a01f93033a2ec85afa6bafda52f43bb836e28e49fd5",
          "md5": "6f244e64157718b302a1c9920cf477d9",
          "sha256": "ddddc86f9e039730f9c1e73a22b189f4a524d8a22e684470324596a1176e5ef4"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f244e64157718b302a1c9920cf477d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7667,
        "upload_time": "2022-07-10T12:49:31",
        "upload_time_iso_8601": "2022-07-10T12:49:31.697289Z",
        "url": "https://files.pythonhosted.org/packages/08/ce/f2aaa470bc0bf1141a01f93033a2ec85afa6bafda52f43bb836e28e49fd5/ofunctions.threading-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af0abf20923aa2d17097bfd48c392a0e724e7021e67e9c9b9e28ae4484ac052f",
          "md5": "65bf3482a0fd9b322df957fe96fc41b6",
          "sha256": "442a2f44484521a11cb1b14213963dea95ff9bed18c408037668c1dbdbc3b8b9"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65bf3482a0fd9b322df957fe96fc41b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8350,
        "upload_time": "2022-07-10T12:49:33",
        "upload_time_iso_8601": "2022-07-10T12:49:33.103602Z",
        "url": "https://files.pythonhosted.org/packages/af/0a/bf20923aa2d17097bfd48c392a0e724e7021e67e9c9b9e28ae4484ac052f/ofunctions.threading-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d671ef1bcec49718a7c9d0bcfd9146f6b0722ae5be8bc41d8af9ffb49e1a7e5",
          "md5": "7dc22c06d4ee1c4f8823aa08d62965ae",
          "sha256": "f2ec3c63cd9b23f8351070e794bbb81692d68106ace8e8806414c61198538a3c"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7dc22c06d4ee1c4f8823aa08d62965ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8949,
        "upload_time": "2022-11-06T21:02:37",
        "upload_time_iso_8601": "2022-11-06T21:02:37.598925Z",
        "url": "https://files.pythonhosted.org/packages/8d/67/1ef1bcec49718a7c9d0bcfd9146f6b0722ae5be8bc41d8af9ffb49e1a7e5/ofunctions.threading-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c59b15a7455022b70ccf2c7e18299d30db5f3397d921795e04c3e9a5a30a69f7",
          "md5": "00b4a78697cfd707744a43e8145b50c7",
          "sha256": "9b50d180c3dda0ceb6e0cd28c22f9bbc4d4f1fec967afbacd8c126504b8427f4"
        },
        "downloads": -1,
        "filename": "ofunctions.threading-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00b4a78697cfd707744a43e8145b50c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10147,
        "upload_time": "2022-11-06T21:02:42",
        "upload_time_iso_8601": "2022-11-06T21:02:42.243399Z",
        "url": "https://files.pythonhosted.org/packages/c5/9b/15a7455022b70ccf2c7e18299d30db5f3397d921795e04c3e9a5a30a69f7/ofunctions.threading-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d671ef1bcec49718a7c9d0bcfd9146f6b0722ae5be8bc41d8af9ffb49e1a7e5",
        "md5": "7dc22c06d4ee1c4f8823aa08d62965ae",
        "sha256": "f2ec3c63cd9b23f8351070e794bbb81692d68106ace8e8806414c61198538a3c"
      },
      "downloads": -1,
      "filename": "ofunctions.threading-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7dc22c06d4ee1c4f8823aa08d62965ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8949,
      "upload_time": "2022-11-06T21:02:37",
      "upload_time_iso_8601": "2022-11-06T21:02:37.598925Z",
      "url": "https://files.pythonhosted.org/packages/8d/67/1ef1bcec49718a7c9d0bcfd9146f6b0722ae5be8bc41d8af9ffb49e1a7e5/ofunctions.threading-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c59b15a7455022b70ccf2c7e18299d30db5f3397d921795e04c3e9a5a30a69f7",
        "md5": "00b4a78697cfd707744a43e8145b50c7",
        "sha256": "9b50d180c3dda0ceb6e0cd28c22f9bbc4d4f1fec967afbacd8c126504b8427f4"
      },
      "downloads": -1,
      "filename": "ofunctions.threading-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "00b4a78697cfd707744a43e8145b50c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10147,
      "upload_time": "2022-11-06T21:02:42",
      "upload_time_iso_8601": "2022-11-06T21:02:42.243399Z",
      "url": "https://files.pythonhosted.org/packages/c5/9b/15a7455022b70ccf2c7e18299d30db5f3397d921795e04c3e9a5a30a69f7/ofunctions.threading-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}