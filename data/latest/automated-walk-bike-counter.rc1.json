{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Automated Walk Bike Counter\n\n## About\n\nThe City currently does bicycle and pedestrian counts via having a person manually count\nthe number of cyclists and pedestrians that go through an intersection,\neither in person or by viewing a video recording.\n\nHowever, thanks to advances in computer vision we can now automate that,\nallowing us to constantly count the number of pedestrians and cyclists,\nrather than sampling a (possibly not representative) time and location.\n\nThis project is a Python application that implements a\n[computer vision algorithm](https://pdfs.semanticscholar.org/c1d9/8fca75c63fd5975fc2fcd3fe07ac02de4a5b.pdf)\ndeveloped by CSULA that allows you to run the pipeline on your own cameras feeds.\n\nThis approach allows cities and others to implement CV pedestrian and bicycle counting techniques on existing camera infrastructure.\n\n## Sponsors\n\nThis work has been generously sponsored by a\n[grant](https://ladot.lacity.org/sites/g/files/wph266/f/Press%20Release%20LADOT%20Awarded%20Mobility%20Grant%2C%20Will%20Conduct%20Department%27s%20First%20Count%20of%20Walkers%20and%20Bicyclists.pdf) from the Toyota Mobility Foundation (TMF).\n\n## Partners\n\n#### CSULA\n\nDr. Mohammad Pourhomayoun, Moahmmad Vahedi, Haiyan Wang.\n\n#### Los Angeles DOT/ITA\n\nHunter Owens, Ian Rose, Janna Smith, Anthony Lyons.\n\n## Goals\n\nAllow us to know real-time active transportation counts for key corridors.\n\n## Requirements\n\nThis application requires a working Python environment capable of running Tensorflow.\nEither Tensorflow GPU or Tensorflow CPU can be used, but the latter is likely too slow for real-time application.\n\n## Installation\n\nThis application can run on environments both with and without GPUs.\nHowever, if a GPU is not available,\nit will likely run so slowly as to only be useful for testing/development.\nIf you are running it with a GPU,\nyou must already have the CUDA dynamic libraries installed and visible to the application.\n\nThe application comes with two conda environment specifications,\none for machines with a GPU, and one for machines without.\nWe assume you are installing the Python dependencies sugin `conda`.\nThis is not required, but if you are installing with another tool,\ndependency manangement will likely be more difficult.\nInstructions for installation and running are as follows:\n\n1. Create a conda environment for the project. If running without GPUs, run\n```bash\nconda env create -f environment.yml\n```\nIf running with GPUs, run\n```bash\nconda env create -f environment-gpu.yml\n```\nThe given `environment.yml` files are known to work on at least some Linux, Windows, and Mac machines,\nthough you may want to choose a custom Tensorflow distribution depending on your deployment.\n1. Activate the environment:\n```bash\nconda activate automated-walk-bike-counter\n```\n1. Install the application into the environment by running\n```bash\npip install .\n```\n1. Launch the GUI by running `automated-walk-bike-counter`\n\n## Running the application\n\nGenerally speaking, the application takes a video source as input\nand counts pedestrians an cyclists that it sees in the video.\nIt can produce two kinds of output:\n\n1. A new video that is the same as the input, but with boxes drawn around the identified objects.\n1. A comma-separated-variable (CSV) text file that has time-binned counts for the identified objects.\n\nEach of these output files is placed next to the original input file.\n\nThe application has two interfaces: a graphical user interface (GUI),\nand a command line interface (CLI):\n\n#### GUI\n\nIn order to run the GUI, you must have an X server running on your machine.\nThis could be X11 on Mac OS or Linux, or Xming on Windows.\nYou may need to set your `DISPLAY` environment variable for the application to\nfind the running X server, i.e.\n```bash\nexport DISPLAY=:0\n```\n\nOnce you launch the application, you can run the algorithm with the following steps:\n1. Select a file using the File menu.\n1. Select which objects you want to track using the checkboxes in the left pane.\n1. Select an area of interest using the Tools menu (optional)\n1. Click the \"Generate\" button.\n\n#### Command line usage\n\nIf you are running this application on a headless machine,\nor automating it in some way, you will likely not want to use the GUI,\nbut instead drive it from the command line.\n\nYou can run it via the command line by using the `cli` argument:\n```bash\nautomated-walk-bike-counter --cli True\n```\nSince this way of running the application doesn't have dialogs for selecting videos\nand other options, you will need to provide more command line arguments.\n\nFor instance, to run the algorithm on a local video file with CSV exports at one minute intervals,\nyou should enter\n```\nautomated-walk-bike-counter \\\n    --cli True \\\n    --file_name /path/to/your/video.mp4 \\\n    --input_type file \\\n    --save_periodic_counter True \\\n    --periodic_counter_interval 1\n```\n\n#### Configuration\n\nThe application is designed be be configured.\nThe full list of configurable settings can be viewed by running `automated-walk-bike-counter --help`.\n\nAll variables can be set in one of three ways:\n1. Via command line argument.\n1. Via environment variable (available environment variables are listed in the `--help` output).\n1. Via config file.\n\nIf using a config file, you should add the settings in a `.ini` file,\nand point the application at the file by running\n```bash\nautomated-walk-bike-counter --config /path/to/your/config.ini\n```\nAn example config file can be found in [`config.example.ini`](./config.example.ini).\n\n## Development\n\nIn order to develop this project, you should make an editable dev install after creating your environment:\n```bash\npip install -e .[develop]\n```\n\nYou should then install the pre-commit hooks which are used to enforce code style\nand lint for common errors:\n```bash\npre-commit install\n```\nWith these installed, all commits will get checked by the formatters and linters,\nand the commit will fail if these checks fail.\n\nNote: the first time that you make a commit with these hooks `pre-commit` will do some setup work.\nThis will take a few minutes. If you must, you can bypass the hooks by running `git commit --no-verify`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CityOfLosAngeles/automated-walk-bike-counter",
    "keywords": "computer vision,city,streets,traffic,pedestrian,cyclist",
    "license": "Apache-2.0 license",
    "maintainer": "CSULA and Los Angeles ITA",
    "maintainer_email": "",
    "name": "automated-walk-bike-counter",
    "package_url": "https://pypi.org/project/automated-walk-bike-counter/",
    "platform": "",
    "project_url": "https://pypi.org/project/automated-walk-bike-counter/",
    "project_urls": {
      "Homepage": "https://github.com/CityOfLosAngeles/automated-walk-bike-counter"
    },
    "release_url": "https://pypi.org/project/automated-walk-bike-counter/0.1.0/",
    "requires_dist": [
      "tensorflow (<2)",
      "opencv-python",
      "munkres",
      "pykalman",
      "pillow",
      "tqdm",
      "fsspec (>=0.7.3)",
      "requests",
      "configargparse",
      "s3fs (==0.3.5)",
      "pre-commit ; extra == 'develop'",
      "flake8 ; extra == 'develop'",
      "black ; extra == 'develop'",
      "isort ; extra == 'develop'",
      "tensorflow-gpu ; extra == 'gpu'"
    ],
    "requires_python": "",
    "summary": "A computer vision application for automated countingof pedestrians and cyclists",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7464107,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d41f994870aa6d376c80bda117bddb7789b05eb69d5f2b54c48ffcbc95a401b",
          "md5": "4ade00afe625bf151a66060cbb48fbeb",
          "sha256": "df25740bf67007d1e35caecbe9c89f0aaa6748dd1840ae9be5e0e1f9c8f9be01"
        },
        "downloads": -1,
        "filename": "automated_walk_bike_counter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ade00afe625bf151a66060cbb48fbeb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6182006,
        "upload_time": "2020-06-12T21:38:12",
        "upload_time_iso_8601": "2020-06-12T21:38:12.523995Z",
        "url": "https://files.pythonhosted.org/packages/7d/41/f994870aa6d376c80bda117bddb7789b05eb69d5f2b54c48ffcbc95a401b/automated_walk_bike_counter-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48a00b5e73ae59a238aa1cc6db4083eaa2404de13e30038e46e6bf0df74b5bd4",
          "md5": "d11bfe90287c9e7f9a7c17ec4e1c48f8",
          "sha256": "e15d5ea77b1b1969aa9c2357f98c658bea045df13c334e029e1067b82ec48170"
        },
        "downloads": -1,
        "filename": "automated-walk-bike-counter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d11bfe90287c9e7f9a7c17ec4e1c48f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38821,
        "upload_time": "2020-06-12T21:38:15",
        "upload_time_iso_8601": "2020-06-12T21:38:15.132973Z",
        "url": "https://files.pythonhosted.org/packages/48/a0/0b5e73ae59a238aa1cc6db4083eaa2404de13e30038e46e6bf0df74b5bd4/automated-walk-bike-counter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d41f994870aa6d376c80bda117bddb7789b05eb69d5f2b54c48ffcbc95a401b",
        "md5": "4ade00afe625bf151a66060cbb48fbeb",
        "sha256": "df25740bf67007d1e35caecbe9c89f0aaa6748dd1840ae9be5e0e1f9c8f9be01"
      },
      "downloads": -1,
      "filename": "automated_walk_bike_counter-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ade00afe625bf151a66060cbb48fbeb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6182006,
      "upload_time": "2020-06-12T21:38:12",
      "upload_time_iso_8601": "2020-06-12T21:38:12.523995Z",
      "url": "https://files.pythonhosted.org/packages/7d/41/f994870aa6d376c80bda117bddb7789b05eb69d5f2b54c48ffcbc95a401b/automated_walk_bike_counter-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48a00b5e73ae59a238aa1cc6db4083eaa2404de13e30038e46e6bf0df74b5bd4",
        "md5": "d11bfe90287c9e7f9a7c17ec4e1c48f8",
        "sha256": "e15d5ea77b1b1969aa9c2357f98c658bea045df13c334e029e1067b82ec48170"
      },
      "downloads": -1,
      "filename": "automated-walk-bike-counter-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d11bfe90287c9e7f9a7c17ec4e1c48f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38821,
      "upload_time": "2020-06-12T21:38:15",
      "upload_time_iso_8601": "2020-06-12T21:38:15.132973Z",
      "url": "https://files.pythonhosted.org/packages/48/a0/0b5e73ae59a238aa1cc6db4083eaa2404de13e30038e46e6bf0df74b5bd4/automated-walk-bike-counter-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}