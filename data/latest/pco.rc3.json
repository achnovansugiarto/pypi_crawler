{
  "info": {
    "author": "Andreas Ziegler",
    "author_email": "andreas.ziegler@pco.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Operating System :: Microsoft :: Windows :: Windows 8",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "\n.. image:: https://www.pco.de/fileadmin/user_upload/company/pco_logo.png\n   :width: 100pt\n\n|PyPI-Versions| |LICENCE| |Platform| |PyPI-Status|\n\nThe Python package **pco** offers all functions for working with pco cameras that are based\non the current SDK. All shared libraries for the communication with the\ncamera and subsequent image processing are included.\n\n- Easy to use camera class\n- Powerful API to `pco.software development kit <https://www.pco.de/fileadmin/user_upload/pco-manuals/pco.sdk_manual.pdf>`_\n- Image recording and processing with `pco.recorder <https://www.pco.de/fileadmin/fileadmin/user_upload/pco-manuals/pco.recorder_manual.pdf>`_\n\nInstallation\n============\nInstall from pypi (recommended)::\n\n    $ pip install pco\n\nBasic Usage\n===========\n.. code-block:: python\n\n    import pco\n    import matplotlib.pyplot as plt\n\n    with pco.Camera() as cam:\n\n        cam.record()\n        image, meta = cam.image()\n\n        plt.imshow(image, cmap='gray')\n        plt.show()\n\n.. image:: https://www.pco.de/fileadmin/user_upload/company/screen.png\n\nLogging\n=======\nTo activate the logging output create the ``Camera`` object with\n``debuglevel=`` parameter.\n\nThe debug level can be set to one of the following values:\n\n- ``'off'`` Disables all output.\n- ``'error'`` Shows only error messages.\n- ``'verbose'`` Shows all messages.\n- ``'extra verbose'`` Shows all messages and values.\n\nThe default debuglevel is ``'off'``.\n\n.. code-block:: python\n\n    pco.Camera(debuglevel='verbose')\n    ...\n    [][sdk] get_camera_type: OK.\n\nThe optional ``timestamp=`` parameter activates a tag in the printed output.\nPossible values are: ``'on'`` and ``'off'``.\n\nThe default value is ``'off'``.\n\n.. code-block:: python\n\n    pco.Camera(debuglevel='verbose', timestamp='on')\n    ...\n    [2019-11-25 15:54:15.317855 / 0.016 s] [][sdk] get_camera_type: OK.\n\n\nDocumentation\n=============\n\nThe pco.Camera class offers following methods:\n\n- `record()`_ generates, configures and starts a new recorder instance.\n- `stop()`_ stops the current recording.\n- `close()`_ closes the current active camera and releases the blocked ressources.\n- `image()`_ returns an image from the recorder as numpy array.\n- `images()`_ returns all recorded images from the recorder as list of numpy arrays.\n- `image_average()`_ returns the averaged image. This image is calculated from all recorded images in the buffer.\n- `set_exposure_time()`_ sets the exposure time of the camera.\n- `wait_for_first_image()`_ waits for the first available image in the recorder memory.\n\nThe pco.Camera class has the following variables:\n\n- `configuration`_\n\nThe pco.Camera class has the following objects:\n\n- `sdk`_ offers direct access to all underlying functions of the pco.sdk.\n- `recorder`_ offers direct access to all underlying functions of the pco.recorder.\n\n\n.. ---------------------------------------------------------------------------\n\nrecord()\n--------\n\nCreates, configures and starts a new recorder instance.\n\n.. code-block:: python\n\n    def record(self, number_of_images=1, mode='sequence'):\n\n- ``number_of_images`` sets the number of images allocated in the driver. The RAM of the PC is limiting the maximum value.\n\n- ``mode`` sets the type of recorder:\n\n  - In ``'sequence'`` mode this function is blocking during record.\n    The recorder stops automatically when the ``number_of_images`` is reached.\n\n  - In ``'sequence non blocking'`` mode this function is non blocking.\n    Status must be checked before reading an image. This mode is used\n    to read images while recording, e.g. thumbnail.\n\n  - In ``'ring buffer'`` mode this function is non blocking.\n    Status must be checked before reading an image.\n    Recorder did not stop the recording when the ``number_of_images`` is reached.\n    The first image is overwritten from the next image.\n\n  - In ``'fifo'`` mode this function is non blocking.\n    Status must be checked before reading an image.\n    When the ``number_of_images`` in the fifo is reached, the following images are dropped\n    until images were read from the fifo.\n\nThe entire camera configuration must be set before calling ``record()``.\nThe ``set_exposure_time()`` command is the only exception. \nThis function has no effect on the recorder object and can be called up during \nthe recording.\n\n.. ---------------------------------------------------------------------------\n\nstop()\n------\n\nStops the current recording.\n\n.. code-block:: python\n\n    def stop(self):\n\nIn ``'ring buffer'`` and ``'fifo'`` mode this function must to be called by the user.\nIn ``'sequence'`` and ``'sequence non blocking'`` mode, this function is automatically called up\nwhen the ``number_of_images`` is reached.\n\n\n.. ---------------------------------------------------------------------------\n\nclose()\n-------\n.. code-block:: python\n\n    def close(self):\n\nCloses the activated camera and releases the blocked ressources.\nThis function must be called before the application is terminated.\nOtherwise the resources remain occupied.\n\nThis function is called automatically, if the camera object is\ncreated by the ``with`` statement. An explicit call to ``close()`` is no\nlonger necessary.\n\n.. code-block:: python\n\n    with pco.Camera() as cam:\n        # do some stuff\n\n\n.. ---------------------------------------------------------------------------\n\nimage()\n-------\n\nReturns an image from the recorder. The type of the image is a ``numpy.ndarray``.\nThis array is shaped depending on the resolution and ROI of the image.\n\n.. code-block:: python\n\n    def image(self, image_number=0, roi=None):\n\n- ``image_number`` specifies the number of the image to read. In ``'sequence'`` or ``'sequence non blocking'`` mode the recorder\n  index matches the image number.\n  If ``image_number`` is set to ``0xFFFFFFFF`` the last recorded image is copied. This allows\n  e.g. thumbnail while recording.\n\n- ``roi`` sets the region fo interest. Only this region of the image is copied to the return value.\n\n  .. code-block:: python\n\n      >>> cam.record(number_of_images=1, mode='sequence')\n\n      >>> image, meta = cam.image()\n\n      >>> type(image)\n      numpy.ndarray\n\n      >>> image.shape\n      (2160, 2560)\n\n      >>> image, metadata = cam.image(roi=(1, 1, 300, 300))\n\n      >>> image.shape\n      (300, 300)\n\n.. ---------------------------------------------------------------------------\n\nimages()\n--------\n\nReturns all recorded images from the recorder as list of numpy arrays.\n\n.. code-block:: python\n\n    def images(self, roi=None, blocksize=None):\n\n- ``roi`` sets the region fo interest. Only this region of the image is copied to the return value.\n\n- ``blocksize`` defines the maximum number of images that are returned.\n  This parameter is only useful in ``'fifo'`` mode and under special conditions.\n\n  .. code-block:: python\n\n      >>> cam.record(number_of_images=20, mode='sequence')\n\n      >>> images, metadatas = cam.images()\n\n      >>> len(images)\n      20\n\n      >>> for image in images:\n      ...     print('Mean: {:7.2f} DN'.format(image.mean()))\n      ...\n      Mean: 2147.64 DN\n      Mean: 2144.61 DN\n      ...\n\n     >>> images = cam.images(roi=(1, 1, 300, 300))\n\n     >>> images[0].shape\n    (300, 300)\n\n.. ---------------------------------------------------------------------------\n\nimage_average()\n------------------------\n\nReturns the averaged image. This image is calculated from all recorded images in the buffer.\n\n.. code-block:: python\n\n    def image_average(self, roi=None):\n\n- ``roi`` defines the region fo interest. Only this region of the image is copied to the return value.\n\n  .. code-block:: python\n\n      >>> cam.record(number_of_images=100, mode='sequence')\n\n      >>> avg = cam.image_average()\n\n      >>> avg = cam.image_average(roi=(1, 1, 300, 300))\n\n.. ---------------------------------------------------------------------------\n\nset_exposure_time()\n-------------------\n\nSets the exposure time of the camera.\n\n.. code-block:: python\n\n    def set_exposure_time(self, exposure_time): \n\n- ``exposure_time`` must be given as float or integer value in the unit 'second'.\n  The underlying values for the function ``sdk.set_delay_exposure_time(0, 'ms', time, timebase)``\n  will be calculated automatically. The delay time is set to 0.\n\n  .. code-block:: python\n\n      >>> set_exposure_time(0.001)\n\n      >>> set_exposure_time(1e-3)\n\n.. ---------------------------------------------------------------------------\n\nwait_for_first_image()\n-------------------------\nWaits for the first available image in the recorder memory.\n\n.. code-block:: python\n\n    def wait_for_first_image(self):\n\nIn recorder mode ``'sequence non blocking'``, ``'ring buffer'`` and ``'fifo'``,\nthe function ``record()`` returns immediately.\nIt is the responsibility of the user to wait for images from the \ncamera before calling ``image()``, ``images()`` or ``image_average``.\n\n.. ---------------------------------------------------------------------------\n\nconfiguration\n-------------\n\nThe camera parameters are updated by changing the ``configuration`` variable.\n\n.. code-block:: python\n\n    cam.configuration = {'exposure time': 10e-3,\n                         'roi': (1, 1, 512, 512),\n                         'timestamp': 'ascii',\n                         'pixel rate': 100_000_000,\n                         'trigger': 'auto sequence',\n                         'acquire': 'auto',\n                         'metadata': 'on',\n                         'binning': (1, 1)}\n\nThe variable can only be changed before the ``record()`` function is called.\nIt's a dictionary with a certain number of entries.\nNot all possible elements need to be specified. The following sample code only changes \nthe ``'pixel rate'`` and does not affect any other elements of the configuration.\n\n\n.. code-block:: python\n\n    with pco.Camera() as cam:\n\n        cam.configuration = {'pixel rate': 286_000_000}\n\n        cam.record()\n        ...\n\n.. ---------------------------------------------------------------------------\n\n\nsdk\n---\nThe object ``sdk`` allows direct access to all underlying functions of the pco.sdk.\n\n.. code-block:: python\n\n       >>> cam.sdk.get_temperature()\n       {'sensor temperature': 7.0, 'camera temperature': 38.2, 'power temperature': 36.7}\n\nAll return values form ``sdk`` functions are dictionarys.\nNot all camera settings are currently covered by the ``camera`` class.\nSpecial settings have to be set directly  by calling the respective SDK function.\n\n.. ---------------------------------------------------------------------------\n\nrecorder\n--------\n\nThe object ``rec`` offers direct access to all underlying functions of the pco.recorder.\nIt is not necessary to call a recorder class method directly. \nAll functions are fully covered by the methods of the ``camera`` class.\n\n\n\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/pco.svg\n   :target: https://pypi.python.org/pypi/pco\n\n.. |LICENCE| image:: https://img.shields.io/badge/License-MIT-green.svg\n   :target: https://opensource.org/licenses/MIT\n\n.. |Platform| image:: https://img.shields.io/badge/platform-win_x64-green.svg\n   :target: https://pypi.python.org/pypi/pco\n\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/pco.svg\n  :target: https://pypi.python.org/pypi/pco\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.pco.de/software/third-party-software/python/",
    "keywords": "pco,camera,flim,scmos,microscopy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pco",
    "package_url": "https://pypi.org/project/pco/",
    "platform": "",
    "project_url": "https://pypi.org/project/pco/",
    "project_urls": {
      "Homepage": "https://www.pco.de/software/third-party-software/python/"
    },
    "release_url": "https://pypi.org/project/pco/0.1.3/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "This class provides methods for using pco cameras.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8837731,
  "releases": {
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d48c5f77f6402323b770dd5d3518550cf3ec4b0c33cbcb3cf7a6aadc9f7ccf85",
          "md5": "9c7fbaccedb89f8962618afdbe3d8f6d",
          "sha256": "7cb0a797dcb0ce1c950a4dd2c9065570b9f24e20d5187b96145195079095c847"
        },
        "downloads": -1,
        "filename": "pco-0.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c7fbaccedb89f8962618afdbe3d8f6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3899,
        "upload_time": "2019-11-21T12:43:20",
        "upload_time_iso_8601": "2019-11-21T12:43:20.885191Z",
        "url": "https://files.pythonhosted.org/packages/d4/8c/5f77f6402323b770dd5d3518550cf3ec4b0c33cbcb3cf7a6aadc9f7ccf85/pco-0.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acbcbc22b17ea0241cfed0ac66f9ed4257814cbef2fca5a855d44655b55dccc8",
          "md5": "3dd71786d7c1c802f5ee272f6b5968bb",
          "sha256": "08252262dbf0423a4a5732a224680660f2427072bef2a06c387299c23b37b1d6"
        },
        "downloads": -1,
        "filename": "pco-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "3dd71786d7c1c802f5ee272f6b5968bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1388,
        "upload_time": "2019-11-21T12:43:23",
        "upload_time_iso_8601": "2019-11-21T12:43:23.678204Z",
        "url": "https://files.pythonhosted.org/packages/ac/bc/bc22b17ea0241cfed0ac66f9ed4257814cbef2fca5a855d44655b55dccc8/pco-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c91f0f17ee22e7c4c1651f6dc0617dce7e7ca96d7e0977ab9b65a8bf3cdd69b3",
          "md5": "0a4b8757b4574ae5e6d8ee3033f999dc",
          "sha256": "fa0c874ca7b8c067c7b8e8fde6e432a33422129ad8cd63293a803944211d0e27"
        },
        "downloads": -1,
        "filename": "pco-0.1.0-py3-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "0a4b8757b4574ae5e6d8ee3033f999dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3016665,
        "upload_time": "2020-04-09T12:54:57",
        "upload_time_iso_8601": "2020-04-09T12:54:57.600095Z",
        "url": "https://files.pythonhosted.org/packages/c9/1f/0f17ee22e7c4c1651f6dc0617dce7e7ca96d7e0977ab9b65a8bf3cdd69b3/pco-0.1.0-py3-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47f0cd025e4a50e28567b77d815cc03eee96db85257bb26901e89e926758d400",
          "md5": "949700feac7088659fd688d02a2e4872",
          "sha256": "1139e493b9c14c1834159db9f6254fce18f781058418ed02bbebb958aa90494e"
        },
        "downloads": -1,
        "filename": "pco-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "949700feac7088659fd688d02a2e4872",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3008532,
        "upload_time": "2020-04-09T12:55:05",
        "upload_time_iso_8601": "2020-04-09T12:55:05.096665Z",
        "url": "https://files.pythonhosted.org/packages/47/f0/cd025e4a50e28567b77d815cc03eee96db85257bb26901e89e926758d400/pco-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecb81c9a3de63dac55fe72a7e539baaa20dfea19d6fa85c763d6570e06c85bea",
          "md5": "41e6d8f72fed61028b19f36f732e9555",
          "sha256": "2ac9acf6796ae778f304a0e9ce55199401da56bc58fdcf6919d30f8396143a30"
        },
        "downloads": -1,
        "filename": "pco-0.1.3-py3-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "41e6d8f72fed61028b19f36f732e9555",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2973309,
        "upload_time": "2020-12-07T09:35:00",
        "upload_time_iso_8601": "2020-12-07T09:35:00.472654Z",
        "url": "https://files.pythonhosted.org/packages/ec/b8/1c9a3de63dac55fe72a7e539baaa20dfea19d6fa85c763d6570e06c85bea/pco-0.1.3-py3-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b2ebd75069413347abaeed78f597464ba05380e66a8df21e4efa5d29ea2432",
          "md5": "7750459d1c813effa19811ab17050e3f",
          "sha256": "3ee9cf48bfbf4b304a0acfc2737e4958420ec30ada9f3fa336bc189631c0fcfd"
        },
        "downloads": -1,
        "filename": "pco-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7750459d1c813effa19811ab17050e3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2964006,
        "upload_time": "2020-12-07T09:35:05",
        "upload_time_iso_8601": "2020-12-07T09:35:05.052226Z",
        "url": "https://files.pythonhosted.org/packages/14/b2/ebd75069413347abaeed78f597464ba05380e66a8df21e4efa5d29ea2432/pco-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecb81c9a3de63dac55fe72a7e539baaa20dfea19d6fa85c763d6570e06c85bea",
        "md5": "41e6d8f72fed61028b19f36f732e9555",
        "sha256": "2ac9acf6796ae778f304a0e9ce55199401da56bc58fdcf6919d30f8396143a30"
      },
      "downloads": -1,
      "filename": "pco-0.1.3-py3-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "41e6d8f72fed61028b19f36f732e9555",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2973309,
      "upload_time": "2020-12-07T09:35:00",
      "upload_time_iso_8601": "2020-12-07T09:35:00.472654Z",
      "url": "https://files.pythonhosted.org/packages/ec/b8/1c9a3de63dac55fe72a7e539baaa20dfea19d6fa85c763d6570e06c85bea/pco-0.1.3-py3-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14b2ebd75069413347abaeed78f597464ba05380e66a8df21e4efa5d29ea2432",
        "md5": "7750459d1c813effa19811ab17050e3f",
        "sha256": "3ee9cf48bfbf4b304a0acfc2737e4958420ec30ada9f3fa336bc189631c0fcfd"
      },
      "downloads": -1,
      "filename": "pco-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7750459d1c813effa19811ab17050e3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2964006,
      "upload_time": "2020-12-07T09:35:05",
      "upload_time_iso_8601": "2020-12-07T09:35:05.052226Z",
      "url": "https://files.pythonhosted.org/packages/14/b2/ebd75069413347abaeed78f597464ba05380e66a8df21e4efa5d29ea2432/pco-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}