{
  "info": {
    "author": "Bruno Rocha",
    "author_email": "rochacbruno@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Flasgger\n## Easy Swagger UI for your Flask API\n\n[![Build Status](https://travis-ci.org/rochacbruno/flasgger.svg?branch=master)](https://travis-ci.org/rochacbruno/flasgger)\n[![Code Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)\n[![Coverage Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)\n <a target=\"_blank\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest\"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>\n\n\n![flasgger](docs/flasgger.png)\n\nFlasgger is a Flask extension to **extract [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)** from all Flask views registered in your API.\n\nFlasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/) embedded** so you can access [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and interact with your API resources.\n\nFlasgger also **provides validation** of the incoming data, using the same specification it can validates if the data received as as a POST, PUT, PATCH is valid against the schema defined using **YAML**, **Python dictionaries** or **Marshmallow Schemas**.\n\nFlasgger can work with simple function views or MethodViews using docstring as specification, or using `@swag_from` decorator to get specification from **YAML** or **dict** and also provides **SwaggerView** which can use **Marshmallow Schemas**  as specification.\n\nFlasgger is compatible with `Flask-RESTful` so you can use `Resources` and `swag` specifications together, take a look at [restful example.](examples/restful.py)\n\nFlasgger also supports `Marshmallow APISpec` as base template for specification, if you are using APISPec from Marshmallow take a look at [apispec example.](examples/apispec_example.py)\n\n# Top Contributors\n\n[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)\n\n# Examples and demo app\n\nThere are some [example applications](examples/) and you can also play with examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)\n\n> NOTE: all the examples apps are also test cases and run automatically in Travis CI to ensure quality and coverage.\n\n## Docker\n\nThe examples and demo app can also be built and run as a Docker image/container:\n\n```\ndocker build -t flasgger .\ndocker run -it --rm -p 5000:5000 --name flasgger flasgger\n```\nThen access the Flasgger demo app at http://localhost:5000 .\n\n# Installation\n\n> under your virtualenv do:\n\nEnsure you have latest setuptools\n```\npip install -U setuptools\n```\n\nthen\n\n```\npip install flasgger\n```\n\nor (dev version)\n\n```\npip install https://github.com/rochacbruno/flasgger/tarball/master\n```\n\n> NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip install marshmallow apispec`\n\n# Getting started\n\n## Using docstrings as specification\n\nCreate a file called for example `colors.py`\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    This is using docstrings for specifications.\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    definitions:\n      Palette:\n        type: object\n        properties:\n          palette_name:\n            type: array\n            items:\n              $ref: '#/definitions/Color'\n      Color:\n        type: string\n    responses:\n      200:\n        description: A list of colors (may be filtered by palette)\n        schema:\n          $ref: '#/definitions/Palette'\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cian', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\nNow run:\n\n```\npython colors.py\n```\n\nAnd go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)\n\nYou should get:\n\n![colors](docs/colors.png)\n\n## Using external YAML files\n\nSave a new file `colors.yml`\n\n```yaml\nExample endpoint returning a list of colors by palette\nIn this example the specification is taken from external YAML file\n---\nparameters:\n  - name: palette\n    in: path\n    type: string\n    enum: ['all', 'rgb', 'cmyk']\n    required: true\n    default: all\ndefinitions:\n  Palette:\n    type: object\n    properties:\n      palette_name:\n        type: array\n        items:\n          $ref: '#/definitions/Color'\n  Color:\n    type: string\nresponses:\n  200:\n    description: A list of colors (may be filtered by palette)\n    schema:\n      $ref: '#/definitions/Palette'\n    examples:\n      rgb: ['red', 'green', 'blue']\n```\n\n\nlets use the same example changing only the view function.\n\n```python\nfrom flasgger import swag_from\n\n@app.route('/colors/<palette>/')\n@swag_from('colors.yml')\ndef colors(palette):\n    ...\n```\n\nIf you do not want to use the decorator you can use the docstring `file:` shortcut.\n\n```python\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"\n    file: colors.yml\n    \"\"\"\n    ...\n```\n\n\n## Using dictionaries as raw specs\n\nCreate a Python dictionary as:\n\n```python\nspecs_dict = {\n  \"parameters\": [\n    {\n      \"name\": \"palette\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"all\",\n        \"rgb\",\n        \"cmyk\"\n      ],\n      \"required\": \"true\",\n      \"default\": \"all\"\n    }\n  ],\n  \"definitions\": {\n    \"Palette\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"palette_name\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Color\"\n          }\n        }\n      }\n    },\n    \"Color\": {\n      \"type\": \"string\"\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"A list of colors (may be filtered by palette)\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Palette\"\n      },\n      \"examples\": {\n        \"rgb\": [\n          \"red\",\n          \"green\",\n          \"blue\"\n        ]\n      }\n    }\n  }\n}\n```\n\nNow take the same function and use the dict in the place of YAML file.\n\n```python\n@app.route('/colors/<palette>/')\n@swag_from(specs_dict)\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    In this example the specification is taken from specs_dict\n    \"\"\"\n    ...\n```\n\n## Using Marshmallow Schemas\n\n> FIRST: `pip install marshmallow apispec`\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, SwaggerView, Schema, fields\n\n\nclass Color(Schema):\n    name = fields.Str()\n\nclass Palette(Schema):\n    pallete_name = fields.Str()\n    colors = fields.Nested(Color, many=True)\n\nclass PaletteView(SwaggerView):\n    parameters = [\n        {\n            \"name\": \"palette\",\n            \"in\": \"path\",\n            \"type\": \"string\",\n            \"enum\": [\"all\", \"rgb\", \"cmyk\"],\n            \"required\": True,\n            \"default\": \"all\"\n        }\n    ]\n    responses = {\n        200: {\n            \"description\": \"A list of colors (may be filtered by palette)\",\n            \"schema\": Palette\n        }\n    }\n\n    def get(self, palette):\n        \"\"\"\n        Colors API using schema\n        This example is using marshmallow schemas\n        \"\"\"\n        all_colors = {\n            'cmyk': ['cian', 'magenta', 'yellow', 'black'],\n            'rgb': ['red', 'green', 'blue']\n        }\n        if palette == 'all':\n            result = all_colors\n        else:\n            result = {palette: all_colors.get(palette)}\n        return jsonify(result)\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\napp.add_url_rule(\n    '/colors/<palette>',\n    view_func=PaletteView.as_view('colors'),\n    methods=['GET']\n)\n\napp.run(debug=True)\n\n```\n\n> NOTE: take a look at `examples/validation.py` for a more complete example.\n\n\n> NOTE: when catching arguments in path rule always use explicit types, bad: ``/api/<username>`` good: ``/api/<string:username>``\n\n\n## Using **Flask RESTful** Resources\n\nFlasgger is compatible with Flask-RESTful you only need to install `pip install flask-restful` and then:\n\n```python\n\nfrom flask import Flask\nfrom flasgger import Swagger\nfrom flask_restful import Api, Resource\n\napp = Flask(__name__)\napi = Api(app)\nswagger = Swagger(app)\n\nclass Username(Resource):\n    def get(self, username):\n       \"\"\"\n       This examples uses FlaskRESTful Resource\n       It works also with swag_from, schemas and spec_dict\n       ---\n       parameters:\n         - in: path\n           name: username\n           type: string\n           required: true\n       responses:\n         200:\n           description: A single user item\n           schema:\n             id: User\n             properties:\n               username:\n                 type: string\n                 description: The name of the user\n                 default: Steven Wilson\n        \"\"\"\n        return {'username': username}, 200\n\n\napi.add_resource(Username, '/username/<username>')\n\napp.run(debug=True)\n\n```\n\n## Auto-parsing external YAML docs and `MethodView`s\n\nFlasgger can be configured to auto-parse external YAM API docs.  [Set a `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16) in your `app.config['SWAGGER']` and Swagger will load API docs by looking in `doc_dir` for YAML files stored by endpoint-name and method-name.  For example, `'doc_dir': './examples/docs/'` and a file `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView` method `get`.\n\nAdditionally, when using **Flask RESTful** per above, by passing `parse=True` when constructing `Swagger`, Flasgger will use  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed and validated data will be stored in `flask.request.parsed_data`.\n\n## Handling multiple http methods and routes for a single function\n\nYou can separate specifications by endpoint or methods\n\n```python\nfrom flasgger.utils import swag_from\n\n@app.route('/api/<string:username>', endpoint='with_user_name', methods=['PUT', 'GET'])\n@app.route('/api/', endpoint='without_user_name')\n@swag_from('path/to/external_file.yml', endpoint='with_user_name')\n@swag_from('path/to/external_file_no_user_get.yml', endpoint='without_user_name', methods=['GET'])\n@swag_from('path/to/external_file_no_user_put.yml', endpoint='without_user_name', methods=['PUT'])\ndef fromfile_decorated(username=None):\n    if not username:\n        return \"No user!\"\n    return jsonify({'username': username})\n```\n\nAnd the same can be achieved with multiple methods in a `MethodView` or `SwaggerView` by\nregistering the `url_rule` many times. Take a look at `examples/example_app`\n\n\n# Use the same data to validate your API POST body.\n\nSetting `swag_from`'s _validation_ parameter to `True` will validate incoming data automatically:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from('defs.yml', validation=True)\ndef post():\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nUsing `swagger.validate` annotation is also possible:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('UserSchema')\ndef post():\n    '''\n    file: defs.yml\n    '''\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nYet you can call `validate` manually:\n\n```python\nfrom flasgger import swag_from, validate\n\n@swag_from('defs.yml')\ndef post():\n    validate(request.json, 'UserSchema', 'defs.yml')\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nIt is also possible to define `validation=True` in `SwaggerView` and also use\n`specs_dict` for validation.\n\nTake a look at `examples/validation.py` for more information.\n\nAll validation options can be found at http://json-schema.org/latest/json-schema-validation.html\n\n### Custom validation\n\nBy default Flasgger will use [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)\nto perform validation.\n\nCustom validation functions are supported as long as they meet the requirements:\n - take two, and only two, positional arguments:\n    - the data to be validated as the first; and\n    - the schema to validate against as the second argument\n - raise any kind of exception when validation fails.\n\nAny return value is discarded.\n\n\nProviding the function to the Swagger instance will make it the default:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_function=my_validation_function)\n```\n\nProviding the function as parameter of `swag_from` or `swagger.validate`\nannotations or directly to the `validate` function will force it's use\nover the default validation function for Swagger:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from('spec.yml', validation=True, validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml', validation_function=my_function)\n```\n\n### Validation Error handling\n\nBy default Flasgger will handle validation errors by aborting the\nrequest with a 400 BAD REQUEST response with the error message.\n\nA custom validation error handling function can be provided to\nsupersede default behavior as long as it meets the requirements:\n - take three, and only three, positional arguments:\n    - the error raised as the first;\n    - the data which failed validation as the second; and\n    - the schema used in to validate as the third argument\n\n\nProviding the function to the Swagger instance will make it the default:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_error_handler=my_handler)\n```\n\nProviding the function as parameter of `swag_from` or `swagger.validate`\nannotations or directly to the `validate` function will force it's use\nover the default validation function for Swagger:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from(\n    'spec.yml', validation=True, validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml',\n        validation_error_handler=my_handler)\n```\n\nExamples of use of a custom validation error handler function can be\nfound at [example validation_error_handler.py](examples/validation_error_handler.py)\n\n# Get defined schemas as python dictionaries\n\nYou may wish to use schemas you defined in your Swagger specs as dictionaries\nwithout replicating the specification. For that you can use the `get_schema`\nmethod:\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, swag_from\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@swagger.validate('Product')\ndef post():\n    \"\"\"\n    post endpoint\n    ---\n    tags:\n      - products\n    parameters:\n      - name: body\n        in: body\n        required: true\n        schema:\n          id: Product\n          required:\n            - name\n          properties:\n            name:\n              type: string\n              description: The product's name.\n              default: \"Guarana\"\n    responses:\n      200:\n        description: The product inserted in the database\n        schema:\n          $ref: '#/definitions/Product'\n    \"\"\"\n    rv = db.insert(request.json)\n    return jsonify(rv)\n\n...\n\nproduct_schema = swagger.get_schema('product')\n```\n\nThis method returns a dictionary which contains the Flasgger schema id,\nall defined parameters and a list of required parameters.\n\n# HTML sanitizer\n\nBy default Flasgger will try to sanitize the content in YAML definitions\nreplacing every ```\\n``` with ```<br>``` but you can change this behaviour\nsetting another kind of sanitizer.\n\n```python\nfrom flasgger import Swagger, NO_SANITIZER\n\napp =Flask()\nswagger = Swagger(app, sanitizer=NO_SANITIZER)\n```\n\nYou can write your own sanitizer\n\n```python\nswagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))\n```\n\nThere is also a Markdown parser available, if you want to be able to render\nMarkdown in your specs description use **MK_SANITIZER**\n\n\n# Swagger UI and templates\n\nYou can override the `templates/flasgger/index.html` in your application and\nthis template will be the `index.html` for SwaggerUI. Use `flasgger/ui2/templates/index.html`\nas base for your customization.\n\nFlasgger supports Swagger UI versions 2 and 3, The version 3 is still experimental but you\ncan try setting `app.config['SWAGGER']['uiversion']`.\n\n```python\napp = Flask(__name__)\napp.config['SWAGGER'] = {\n    'title': 'My API',\n    'uiversion': 3\n}\nswagger = Swagger(app)\n\n```\n\n# OpenAPI 3.0 Support\n\nThere is experimental support for OpenAPI 3.0 that should work when using SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a version that the current SwaggerUI 3 supports such as `'3.0.2'`.\n\nFor an example of this that uses `callbacks` and `requestBody`, see the [callbacks example](examples/callbacks.py).\n\n## Externally loading Swagger UI and jQuery JS/CSS\n\nStarting with Flasgger 0.9.2 you can specify external URL locations for loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in the Flasgger default templates.  If the configuration properties below are omitted, Flasgger will serve static versions it includes - these versions may be older than the current Swagger UI v2 or v3 releases.\n\nThe following example loads Swagger UI and jQuery versions from unpkg.com:\n\n```\nswagger_config = Swagger.DEFAULT_CONFIG\nswagger_config['swagger_ui_bundle_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'\nswagger_config['swagger_ui_standalone_preset_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'\nswagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'\nswagger_config['swagger_ui_css'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'\nSwagger(app, config=swagger_config)\n```\n\n# Initializing Flasgger with default data.\n\nYou can start your Swagger spec with any default data providing a template:\n\n```python\ntemplate = {\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"My API\",\n    \"description\": \"API for my data\",\n    \"contact\": {\n      \"responsibleOrganization\": \"ME\",\n      \"responsibleDeveloper\": \"Me\",\n      \"email\": \"me@me.com\",\n      \"url\": \"www.me.com\",\n    },\n    \"termsOfService\": \"http://me.com/terms\",\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"mysite.com\",  # overrides localhost:500\n  \"basePath\": \"/api\",  # base bash for blueprint registration\n  \"schemes\": [\n    \"http\",\n    \"https\"\n  ],\n  \"operationId\": \"getmyData\"\n}\n\nswagger = Swagger(app, template=template)\n\n```\n\nAnd then the template is the default data unless some view changes it. You\ncan also provide all your specs as template and have no views. Or views in\nexternal APP.\n\n## Getting default data at runtime\n\nSometimes you need to get some data at runtime depending on dynamic values ex: you want to check `request.is_secure` to decide if `schemes` will be `https` you can do that by using `LazyString`.\n\n```py\nfrom flask import Flask\nfrom flasgger import, Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__init__)\n\n# Set the custom Encoder (Inherit it if you need to customize)\napp.json_encoder = LazyJSONEncoder\n\n\ntemplate = dict(\n    info={\n        'title': LazyString(lambda: 'Lazy Title'),\n        'version': LazyString(lambda: '99.9.9'),\n        'description': LazyString(lambda: 'Hello Lazy World'),\n        'termsOfService': LazyString(lambda: '/there_is_no_tos')\n    },\n    host=LazyString(lambda: request.host),\n    schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],\n    foo=LazyString(lambda: \"Bar\")\n)\nSwagger(app, template=template)\n\n```\n\nThe `LazyString` values will be evaluated only when `jsonify` encodes the value at runtime, so you have access to Flask `request, session, g, etc..` and also may want to access a database.\n\n## Behind a reverse proxy\n\nSometimes you're serving your swagger docs behind an reverse proxy (e.g. NGINX).  When following the [Flask guidance](http://flask.pocoo.org/snippets/35/),\nthe swagger docs will load correctly, but the \"Try it Out\" button points to the wrong place.  This can be fixed with the following code:\n\n```python\nfrom flask import Flask, request\nfrom flasgger import Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__name__)\napp.json_encoder = LazyJSONEncoder\n\ntemplate = dict(swaggerUiPrefix=LazyString(lambda : request.environ.get('HTTP_X_SCRIPT_NAME', '')))\nswagger = Swagger(app, template=template)\n\n``` \n\n# Customize default configurations\n\nCustom configurations such as a different specs route or disabling Swagger UI can be provided to Flasgger:\n\n```python\nswagger_config = {\n    \"headers\": [\n    ],\n    \"specs\": [\n        {\n            \"endpoint\": 'apispec_1',\n            \"route\": '/apispec_1.json',\n            \"rule_filter\": lambda rule: True,  # all in\n            \"model_filter\": lambda tag: True,  # all in\n        }\n    ],\n    \"static_url_path\": \"/flasgger_static\",\n    # \"static_folder\": \"static\",  # must be set by user\n    \"swagger_ui\": True,\n    \"specs_route\": \"/apidocs/\"\n}\n\nswagger = Swagger(app, config=swagger_config)\n\n```\n\n## Extracting Definitions\n\nDefinitions can be extracted when `id` is found in spec, example:\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    responses:\n      200:\n        description: A list of colors (may be filtered by palette)\n        schema:\n          id: Palette\n          type: object\n          properties:\n            palette_name:\n              type: array\n              items:\n                schema:\n                  id: Color\n                  type: string\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cian', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\nIn this example you do not have to pass `definitions` but need to add `id` to\nyour schemas.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicobatty/flasgger/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nicobatty-flasgger",
    "package_url": "https://pypi.org/project/nicobatty-flasgger/",
    "platform": "any",
    "project_url": "https://pypi.org/project/nicobatty-flasgger/",
    "project_urls": {
      "Homepage": "https://github.com/nicobatty/flasgger/"
    },
    "release_url": "https://pypi.org/project/nicobatty-flasgger/0.9.4/",
    "requires_dist": [
      "Flask (>=0.10)",
      "PyYAML (>=3.0)",
      "jsonschema (>=2.5.1)",
      "jsonschema (<3.0.0)",
      "mistune",
      "six (>=1.10.0)"
    ],
    "requires_python": "",
    "summary": "Extract swagger specs from your flask project",
    "version": "0.9.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5625137,
  "releases": {
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40e15a9dcf271164d1d33aebc5a27ae72f5e0c5cd5cadceaa4840cf03327ad9d",
          "md5": "97698341358e6743672376900afda3f1",
          "sha256": "824dbd86ecf9b1a88a89926f3ef055ccbbfc77dfdbcc79d013ceafa5d633f28d"
        },
        "downloads": -1,
        "filename": "nicobatty_flasgger-0.9.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97698341358e6743672376900afda3f1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3704987,
        "upload_time": "2019-07-10T12:55:49",
        "upload_time_iso_8601": "2019-07-10T12:55:49.403326Z",
        "url": "https://files.pythonhosted.org/packages/40/e1/5a9dcf271164d1d33aebc5a27ae72f5e0c5cd5cadceaa4840cf03327ad9d/nicobatty_flasgger-0.9.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b16511a2506ac13c260e4a9d8a3e886cae05dd3e85572819d476eaaff4fe1095",
          "md5": "4357095a40401b0fbb80dda81133790a",
          "sha256": "986b91f5d3187c53dc85356013ef6ef7268ac86e90dd14004873cb834a7ecda6"
        },
        "downloads": -1,
        "filename": "nicobatty-flasgger-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4357095a40401b0fbb80dda81133790a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3702301,
        "upload_time": "2019-07-10T12:55:54",
        "upload_time_iso_8601": "2019-07-10T12:55:54.307201Z",
        "url": "https://files.pythonhosted.org/packages/b1/65/11a2506ac13c260e4a9d8a3e886cae05dd3e85572819d476eaaff4fe1095/nicobatty-flasgger-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec985d9449bf8b56c47ba01aa310465bbdf5b0406afe2cd28139b1ae59f58dc7",
          "md5": "8540f3a03ba2f1f9f0e2e2573fd904d7",
          "sha256": "9517a021845fa7b10419f10e663a0c342f31d7256fd5af8d9f2858ec8e5364db"
        },
        "downloads": -1,
        "filename": "nicobatty_flasgger-0.9.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8540f3a03ba2f1f9f0e2e2573fd904d7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3704993,
        "upload_time": "2019-08-02T16:33:38",
        "upload_time_iso_8601": "2019-08-02T16:33:38.103102Z",
        "url": "https://files.pythonhosted.org/packages/ec/98/5d9449bf8b56c47ba01aa310465bbdf5b0406afe2cd28139b1ae59f58dc7/nicobatty_flasgger-0.9.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d2da9c862d95be24f402314a086c07040aef8b5dd00b9b0f5169d68b09ebb8c",
          "md5": "a76759fd44ae7d736bbefd438fdfa1fa",
          "sha256": "41eebc72c08c388869a2cf3aa8ef713bfabe887e697eb3bd89ea49dcdf85443a"
        },
        "downloads": -1,
        "filename": "nicobatty-flasgger-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a76759fd44ae7d736bbefd438fdfa1fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3739063,
        "upload_time": "2019-08-02T16:33:42",
        "upload_time_iso_8601": "2019-08-02T16:33:42.697029Z",
        "url": "https://files.pythonhosted.org/packages/8d/2d/a9c862d95be24f402314a086c07040aef8b5dd00b9b0f5169d68b09ebb8c/nicobatty-flasgger-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec985d9449bf8b56c47ba01aa310465bbdf5b0406afe2cd28139b1ae59f58dc7",
        "md5": "8540f3a03ba2f1f9f0e2e2573fd904d7",
        "sha256": "9517a021845fa7b10419f10e663a0c342f31d7256fd5af8d9f2858ec8e5364db"
      },
      "downloads": -1,
      "filename": "nicobatty_flasgger-0.9.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8540f3a03ba2f1f9f0e2e2573fd904d7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 3704993,
      "upload_time": "2019-08-02T16:33:38",
      "upload_time_iso_8601": "2019-08-02T16:33:38.103102Z",
      "url": "https://files.pythonhosted.org/packages/ec/98/5d9449bf8b56c47ba01aa310465bbdf5b0406afe2cd28139b1ae59f58dc7/nicobatty_flasgger-0.9.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d2da9c862d95be24f402314a086c07040aef8b5dd00b9b0f5169d68b09ebb8c",
        "md5": "a76759fd44ae7d736bbefd438fdfa1fa",
        "sha256": "41eebc72c08c388869a2cf3aa8ef713bfabe887e697eb3bd89ea49dcdf85443a"
      },
      "downloads": -1,
      "filename": "nicobatty-flasgger-0.9.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a76759fd44ae7d736bbefd438fdfa1fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3739063,
      "upload_time": "2019-08-02T16:33:42",
      "upload_time_iso_8601": "2019-08-02T16:33:42.697029Z",
      "url": "https://files.pythonhosted.org/packages/8d/2d/a9c862d95be24f402314a086c07040aef8b5dd00b9b0f5169d68b09ebb8c/nicobatty-flasgger-0.9.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}