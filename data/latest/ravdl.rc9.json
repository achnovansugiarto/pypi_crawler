{
  "info": {
    "author": "Raven Protocol",
    "author_email": "kailash@ravenprotocol.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/36446402/217170090-b3090798-bc0c-4ead-aa3b-7b4ced07e3ec.svg\" width=\"200\" height=\"100\">\n<h1> RavDL - Deep Learning Library </h1>\n</div>\n\nIntroducing Raven Protocol's Distributed Deep Learning tool that allows Requesters to easily build, train and test their neural networks by leveraging the compute power of participating nodes across the globe.\n\nRavDL can be thought of as a high level wrapper (written in Python) that defines the mathematical backend for building layers of neural networks by utilizing the fundamental operations from Ravop library to provide essential abstractions for training complex DL architectures in the Ravenverse.  \n\nThis framework seemlessly integrates with the [Ravenverse](https://www.ravenverse.ai/) where the models get divided into optimized subgraphs, which get assigned to the participating nodes for computation in a secure manner. Once all subgraphs have been computed, the saved model will be returned to the requester.\n\nIn this manner, a requester can securely train complex models without dedicating his or her own system for this heavy and time-consuming task.\n\nThere is something in it for the providers too! The nodes that contribute their processing power will be rewarded with tokens proportionate to the capabilities of their systems and duration of participation. More information is available [here](https://github.com/ravenprotocol/ravpy).\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Layers](#layers)\n  - [Dense](#dense)\n  - [BatchNormalization1D](#batchnormalization1d)\n  - [BatchNormalization2D](#batchnormalization2d)\n  - [LayerNormalization](#layernormalization)\n  - [Dropout](#dropout)\n  - [Activation](#activation)\n  - [Conv2D](#conv2d)\n  - [Flatten](#flatten)\n  - [MaxPooling2D](#maxpooling2d)\n  - [Embedding](#embedding)\n\n- [Optimizers](#optimizers)\n- [Loss Functions](#losses)\n- [Usage](#usage)\n- [Functional Model Definition](#functional-model-definition)\n- [Sequential Model Definition](#sequential-model-definition)\n- [Activate Graph](#activating-the-graph)\n- [Execute Graph](#executing-the-graph)\n- [Retrieving Persisting Ops](#retrieving-persisting-ops)\n- [License](#license)\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Installation\n\nMake sure [Ravop](https://github.com/ravenprotocol/ravop) is installed and working properly. \n\n### With PIP\n```bash\npip install ravdl\n```\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Layers\n\n\n### Dense\n```python\nDense(n_units, initial_W=None, initial_w0=None, use_bias='True') \n```\n#### Parameters\n* ```n_units```: Output dimension of the layer\n* ```initial_W```: Initial weights of the layer\n* ```initial_w0```: Initial bias of the layer\n* ```use_bias```: Whether to use bias or not\n\n#### Shape\n* Input: (batch_size, ..., input_dim)\n* Output: (batch_size, ..., n_units)\n\n\n\n### BatchNormalization1D\n\n```python\nBatchNormalization1D(momentum=0.99, epsilon=0.01, affine=True, initial_gamma=None, initial_beta=None, initial_running_mean=None, initial_running_var=None)\n```\n\n#### Parameters\n* ```momentum```: Momentum for the moving average and variance\n* ```epsilon```: Small value to avoid division by zero\n* ```affine```: Whether to learn the scaling and shifting parameters\n* ```initial_gamma```: Initial scaling parameter\n* ```initial_beta```: Initial shifting parameter\n* ```initial_running_mean```: Initial running mean\n* ```initial_running_var```: Initial running variance\n\n#### Shape\n* Input: (batch_size, channels) or (batch_size, channels, length)\n* Output: same as input\n\n\n### BatchNormalization2D\n\n```python\nBatchNormalization2D(num_features, momentum=0.99, epsilon=0.01, affine=True, initial_gamma=None, initial_beta=None, initial_running_mean=None, initial_running_var=None)\n```\n\n#### Parameters\n* ```num_features```: Number of channels in the input\n* ```momentum```: Momentum for the moving average and variance\n* ```epsilon```: Small value to avoid division by zero\n* ```affine```: Whether to learn the scaling and shifting parameters\n* ```initial_gamma```: Initial scaling parameter\n* ```initial_beta```: Initial shifting parameter\n* ```initial_running_mean```: Initial running mean\n* ```initial_running_var```: Initial running variance\n\n#### Shape\n* Input: (batch_size, channels, height, width)\n* Output: same as input\n\n\n### LayerNormalization\n\n```python\nLayerNormalization(normalized_shape=None, epsilon=1e-5, initial_W=None, initial_w0=None)\n```\n\n#### Parameters\n* ```normalized_shape```: Shape of the input or integer representing the last dimension of the input\n* ```epsilon```: Small value to avoid division by zero\n* ```initial_W```: Initial weights of the layer\n* ```initial_w0```: Initial bias of the layer\n\n#### Shape\n* Input: (batch_size, ...)\n* Output: same as input\n\n\n### Dropout\n\n```python\nDropout(p=0.5)\n```\n\n#### Parameters\n* ```p```: Probability of dropping out a unit\n\n#### Shape\n* Input: any shape\n* Output: same as input\n\n### Activation\n\n```python\nActivation(name='relu')\n```\n\n#### Parameters\n* ```name```: Name of the activation function\n\n> **Currently Supported:** 'relu', 'sigmoid', 'tanh', 'softmax', 'leaky_relu','elu', 'selu', 'softplus', 'softsign', 'tanhshrink', 'logsigmoid', 'hardshrink', 'hardtanh', 'softmin', 'softshrink', 'threshold',\n\n\n#### Shape\n* Input: any shape\n* Output: same as input\n\n### Conv2D\n\n```python\nConv2D(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', initial_W=None, initial_w0=None)\n```\n\n#### Parameters\n* ```in_channels```: Number of channels in the input image\n* ```out_channels```: Number of channels produced by the convolution\n* ```kernel_size```: Size of the convolving kernel\n* ```stride```: Stride of the convolution\n* ```padding```: Padding added to all 4 sides of the input (int, tuple or string)\n* ```dilation```: Spacing between kernel elements\n* ```groups```: Number of blocked connections from input channels to output channels\n* ```bias```: If True, adds a learnable bias to the output\n* ```padding_mode```: 'zeros', 'reflect', 'replicate' or 'circular'\n* ```initial_W```: Initial weights of the layer\n* ```initial_w0```: Initial bias of the layer\n\n#### Shape\n* Input: (batch_size, in_channels, height, width)\n* Output: (batch_size, out_channels, new_height, new_width)\n\n\n### Flatten\n\n```python\nFlatten(start_dim=1, end_dim=-1)\n```\n\n#### Parameters\n* ```start_dim```: First dimension to flatten\n* ```end_dim```: Last dimension to flatten\n\n#### Shape\n* Input: (batch_size, ...)\n* Output: (batch_size, flattened_dimension)\n\n\n### MaxPooling2D\n\n```python\nMaxPooling2D(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)\n```\n\n#### Parameters\n* ```kernel_size```: Size of the max pooling window\n* ```stride```: Stride of the max pooling window\n* ```padding```: Zero-padding added to both sides of the input\n* ```dilation```: Spacing between kernel elements\n* ```return_indices```: If True, will return the max indices along with the outputs\n* ```ceil_mode```: If True, will use ceil instead of floor to compute the output shape\n\n#### Shape\n* Input: (batch_size, channels, height, width)\n* Output: (batch_size, channels, new_height, new_width)\n\n\n### Embedding\n```python\nEmbedding(vocab_size, embed_dim, initial_W=None)\n```\n\n#### Parameters\n* ```vocab_size```: Size of the vocabulary\n* ```embed_dim```: Dimension of the embedding\n* ```initial_W```: Initial weights of the layer\n\n#### Shape\n* Input: (batch_size, sequence_length)\n* Output: (batch_size, sequence_length, embed_dim)\n\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Optimizers\n\n### RMSprop\n\n```python\nRMSprop(lr=0.01, alpha=0.99, eps=1e-08, weight_decay=0, momentum=0, centered=False)\n```\n\n#### Parameters\n* ```lr```: Learning rate\n* ```alpha```: Smoothing constant\n* ```eps```: Term added to the denominator to improve numerical stability\n* ```weight_decay```: Weight decay (L2 penalty)\n* ```momentum```: Momentum factor\n* ```centered```: If True, compute the centered RMSProp, the gradient is normalized by an estimation of its variance\n\n### Adam\n\n```python\nAdam(lr=0.001, betas=(0.9,0.999), eps=1e-08, weight_decay=0, amsgrad=False)\n```\n\n#### Parameters\n* ```lr```: Learning rate\n* ```betas```: Coefficients used for computing running averages of gradient and its square\n* ```eps```: Term added to the denominator to improve numerical stability\n* ```weight_decay```: Weight decay (L2 penalty)\n* ```amsgrad```: If True, use the AMSGrad variant of this algorithm from the paper On the Convergence of Adam and Beyond\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Losses\n* Mean Squared Error\n```python    \nravop.square_loss(y_true, y_pred)\n```\n* Cross Entropy\n```python        \nravop.cross_entropy_loss(y_true, y_pred, ignore_index=None, reshape_target=None, reshape_label=None)\n```\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Usage\n\nThis section gives a more detailed walkthrough on how a requester can define their ML/DL architectures in Python by using RavDL and Ravop functionalities.\n\n>**Note:** The complete scripts of the functionalities demonstrated in this document are available in the [Ravenverse Repository](https://github.com/ravenprotocol/ravenverse).   \n\n### Authentication and Graph Definition\n\nThe Requester must connect to the Ravenverse using a unique token that they can generate by logging in on Raven's Website using their MetaMask wallet credentials.   \n\n```python\nimport ravop as R\nR.initialize('<TOKEN>')\n```\n\nIn the Ravenverse, each script executed by a requester is treated as a collection of Ravop Operations called Graph.<br> \n> **Note:** In the current release, the requester can execute only 1 graph with their unique token. Therefore, to clear any previous/existing graphs, the requester must use ```R.flush()``` method. <br>\n\nThe next step involves the creation of a Graph... \n\n```python\nR.flush()\n\nalgo = R.Graph(name='cnn', algorithm='convolutional_neural_network', approach='distributed')\n```\n> **Note:** ```name``` and ```algorithm``` parameters can be set to any string. However, the ```approach``` needs to be set to either \"distributed\" or \"federated\". \n\nThe Current Release of RavDL supports Functional and Sequential Model Definitions.\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Functional Model Definition\n\n### Define Custom Layers\n\nThe latest release of RavDL supports the definition of custom layers by the requester allowing them to write their own application-specific layers either from scratch or as the composition of existing layers.\n\nThe custom layer can be defined by inheriting the ```CustomLayer``` class from ```ravdl.v2.layers``` module. The class defined by the requester must implement certain methods shown as follows:\n\n```python\nclass CustomLayer1(CustomLayer):\n    def __init__(self) -> None:\n        super().__init__()\n        self.d1 = Dense(n_hidden, input_shape=(n_features,))\n        self.bn1 = BatchNormalization1D(momentum=0.99, epsilon=0.01)\n\n    def _forward_pass_call(self, input, training=True):\n        o = self.d1._forward_pass(input)\n        o = self.bn1._forward_pass(o, training=training)\n        return o\n\nclass CustomLayer2(CustomLayer):\n    def __init__(self) -> None:\n        super().__init__()\n        self.d1 = Dense(30)\n        self.dropout = Dropout(0.9)\n        self.d2 = Dense(3)\n\n    def _forward_pass_call(self, input, training=True):\n        o = self.d1._forward_pass(input)\n        o = self.dropout._forward_pass(o, training=training)\n        o = self.d2._forward_pass(o)\n        return \n```\n### Defining Custom Model Class\n\nThe custom model class can be defined by inheriting the ```Functional``` class from ```ravdl.v2``` module. This feature allows the requester to define their own model class by composing the custom and existing layers.\n\nThe class defined by the requester must implement certain methods shown as follows:\n\n```python\nclass ANNModel(Functional):\n    def __init__(self, optimizer):\n        super().__init__()\n        self.custom_layer1 = CustomLayer1()\n        self.custom_layer2 = CustomLayer2()\n        self.act = Activation('softmax')\n        self.initialize_params(optimizer)\n\n    def _forward_pass_call(self, input, training=True):\n        o = self.custom_layer1._forward_pass(input, training=training)\n        o = self.custom_layer2._forward_pass(o, training=training)\n        o = self.act._forward_pass(o)\n        return o\n```\n\n> **Note:** The ```initialize_params``` method must be called in the ```__init__``` method of the custom model class. This method initializes the parameters of the model and sets the optimizer for the model. \n\n### Defining the Training Loop\n\nThe requester can now define their training loop by using the ```batch_iterator``` function from ```ravdl.v2.utils``` module. This function takes the input and target data as arguments and returns a generator that yields a batch of data at each iteration. \n\nNote that the ```_forward_pass()``` and ```_backward_pass()``` methods of the custom model class must be called in the training loop.\n\n```python\noptimizer = Adam()\nmodel = ANNModel(optimizer)\n\nepochs = 100\n\nfor i in range(epochs):\n    for X_batch, y_batch in batch_iterator(X, y, batch_size=25):\n        X_t = R.t(X_batch)\n        y_t = R.t(y_batch)\n\n        out = model._forward_pass(X_t)\n        loss = R.square_loss(y_t, out)\n        model._backward_pass(loss)\n```\n\n### Make a Prediction\n\n```python\nout = model._forward_pass(R.t(X_test), training=False)\nout.persist_op(name=\"prediction\")\n```\n\n> **Note:** The ```_forward_pass()``` method takes an additional argument ```training``` which is set to ```True``` by default. This argument is used to determine whether the model is in training mode or not. The ```_forward_pass()``` method must be called with ```training=False``` when making predictions.\n\n\nComplete example scripts of Functional Model can be found here:\n- [ANN](https://github.com/ravenprotocol/ravenverse/blob/master/Requester/ann_functional.py)\n- [CNN](https://github.com/ravenprotocol/ravenverse/blob/master/Requester/cnn_functional.py)\n\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Sequential Model Definition\n\n### Setting Model Parameters\n\n```python\nfrom ravdl.v2 import NeuralNetwork\nfrom ravdl.v2.optimizers import RMSprop, Adam\nfrom ravdl.v2.layers import Activation, Dense, BatchNormalization1D, Dropout, Conv2D, Flatten, MaxPooling2D\n\nmodel = NeuralNetwork(optimizer=RMSprop(),loss='SquareLoss')\n```\n\n### Adding Layers to Model\n\n```python\nmodel.add(Dense(n_hidden, input_shape=(n_features,)))\nmodel.add(BatchNormalization1D())\nmodel.add(Dense(30))\nmodel.add(Dropout(0.9))\nmodel.add(Dense(3))\nmodel.add(Activation('softmax'))\n```\n\nYou can view the summary of model in tabular format...\n\n```python\nmodel.summary()\n```\n\n### Training the Model\n\n```python\ntrain_err = model.fit(X, y, n_epochs=5, batch_size=25)\n```\nBy default, the batch losses for each epoch are made to persist in the Ravenverse and can be retrieved later on as and when the computations of those losses are completed. \n\n### Testing the Model on Ravenverse\n\nIf required, model inference can be tested by using the ```predict``` function. The output is stored as an Op and should be made to persist in order to view it later on.\n\n```python \ny_test_pred = model.predict(X_test)\ny_test_pred.persist_op(name='test_prediction')\n```\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Activating the Graph\n\nOnce the model has been defined (Functional/Sequential) and all required Ops for the Graph have been defined, then Graph can be activated and made ready for execution as follows: \n\n```python\nR.activate()\n```\nHere is what should happen on activating the Graph (the script executed below is available [here](https://github.com/ravenprotocol/ravenverse/blob/master/ANN_example/ANN_compile.py)):\n![ANN_compile](https://user-images.githubusercontent.com/36445587/178669352-03758cbd-85ae-4ccf-bdc8-a7a99001a065.gif)\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Executing the Graph\nOnce the Graph has been activated, no more Ops can be added to it. The Graph is now ready for execution. Once Ravop has been initialized with the token, the graph can be executed and tracked as follows:\n\n```python\nR.execute()\nR.track_progress()\n```\nHere is what should happen on executing the Graph (the script executed below is available [here](https://github.com/ravenprotocol/ravenverse/blob/master/Requester/ann_sequential.py)):\n\n![ANN_execute](https://user-images.githubusercontent.com/36445587/178670666-0b98a36b-12f9-4d4b-a956-2d8bafbe6728.gif)\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## Retrieving Persisting Ops\nAs mentioned above, the batch losses for each epoch can be retrieved as and when they have been computed. The entire Graph need not be computed in order to view a persisting Op that has been computed. Any other Ops that have been made to persist, such as ```y_test_pred``` in the example above, can be retrieved as well.\n\n```python\nbatch_loss = R.fetch_persisting_op(op_name=\"training_loss_epoch_{}_batch_{}\".format(epoch_no, batch_no))\nprint(\"training_loss_epoch_1_batch_1: \", batch_loss)\n\ny_test_pred = R.fetch_persisting_op(op_name=\"test_prediction\")\nprint(\"Test prediction: \", y_test_pred)\n```\n> **Note:** The Ops that have been fetched are of type **torch.Tensor**.\n\n\n<!-- ## How to Contribute -->\n\n![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png)\n\n## License\n\n<a href=\"https://github.com/ravenprotocol/ravdl/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/ravenprotocol/ravdl\"></a>\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ravenprotocol/ravdl",
    "keywords": "Ravdl,deep learning library,algorithms",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ravdl",
    "package_url": "https://pypi.org/project/ravdl/",
    "platform": null,
    "project_url": "https://pypi.org/project/ravdl/",
    "project_urls": {
      "Homepage": "https://github.com/ravenprotocol/ravdl"
    },
    "release_url": "https://pypi.org/project/ravdl/0.11/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17397296,
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "264ce2ee62436b74edda0e7e41ae64a7027be1f5c60c260980fd6ec171a4f737",
          "md5": "c123a32b3d344314b15e798b72777b71",
          "sha256": "35099dc03cab5377c2ea04a1dadce5e2d267edb78355e102f3c60663cfa55a65"
        },
        "downloads": -1,
        "filename": "ravdl-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c123a32b3d344314b15e798b72777b71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23597,
        "upload_time": "2023-02-07T14:33:18",
        "upload_time_iso_8601": "2023-02-07T14:33:18.604345Z",
        "url": "https://files.pythonhosted.org/packages/26/4c/e2ee62436b74edda0e7e41ae64a7027be1f5c60c260980fd6ec171a4f737/ravdl-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d71e3e21b608ea27cd41e1bf191f278c20c44f0df796862ddc2e95bb64e8f8e",
          "md5": "ef7c7f2bff9ee5193e6d3fee3c34b2c8",
          "sha256": "c45a780f55d0c0da8d5eefd95161f8ac25fcbf751e81a75f5956cef2c840ef14"
        },
        "downloads": -1,
        "filename": "ravdl-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "ef7c7f2bff9ee5193e6d3fee3c34b2c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23811,
        "upload_time": "2023-03-22T12:06:05",
        "upload_time_iso_8601": "2023-03-22T12:06:05.898374Z",
        "url": "https://files.pythonhosted.org/packages/0d/71/e3e21b608ea27cd41e1bf191f278c20c44f0df796862ddc2e95bb64e8f8e/ravdl-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156ac7dac4edf73513b6c7cbf42feb3476eba777799307c3192521de6aacd171",
          "md5": "b7d05d786e19139a4bdef31a77a2fb53",
          "sha256": "06ec7019ba82a9fc709502633662618a45dfd252f4a6265977ce23ec2fccc395"
        },
        "downloads": -1,
        "filename": "ravdl-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b7d05d786e19139a4bdef31a77a2fb53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19922,
        "upload_time": "2022-07-14T10:31:26",
        "upload_time_iso_8601": "2022-07-14T10:31:26.779082Z",
        "url": "https://files.pythonhosted.org/packages/15/6a/c7dac4edf73513b6c7cbf42feb3476eba777799307c3192521de6aacd171/ravdl-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "091e0d260d72c9b16c301e0b717166ebc63b261d9a934dbd2ea3556555a90ff8",
          "md5": "1e2a1f3f083a8d5512f7bf124e5f3e10",
          "sha256": "e416928d006e2d4616e128dd347a3b23c07c593eeec7d057235db704d65cc281"
        },
        "downloads": -1,
        "filename": "ravdl-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1e2a1f3f083a8d5512f7bf124e5f3e10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19918,
        "upload_time": "2022-07-15T09:12:45",
        "upload_time_iso_8601": "2022-07-15T09:12:45.177342Z",
        "url": "https://files.pythonhosted.org/packages/09/1e/0d260d72c9b16c301e0b717166ebc63b261d9a934dbd2ea3556555a90ff8/ravdl-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "982f3c104ebb1b25d1c5fe3e73f59d233a2f75a96e04e271f5d147e67ea4e7d6",
          "md5": "94983d351e913e6002da77874d4e4974",
          "sha256": "ab9d090e32a7da088f213a3d47277164850546f5bd8cf3e86c207705795a055f"
        },
        "downloads": -1,
        "filename": "ravdl-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "94983d351e913e6002da77874d4e4974",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21762,
        "upload_time": "2022-08-02T12:50:49",
        "upload_time_iso_8601": "2022-08-02T12:50:49.076915Z",
        "url": "https://files.pythonhosted.org/packages/98/2f/3c104ebb1b25d1c5fe3e73f59d233a2f75a96e04e271f5d147e67ea4e7d6/ravdl-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c66c43309358e9aff02979013815ae4c90a9b8ec6be6e46dd97eddd9cb7f68d",
          "md5": "2467b8331bce29c191d7dbe099f6cce7",
          "sha256": "3c07380882ef2d9a306759e0c1adb25734ad0f9b20bf8bd8c44bca1a34e37db6"
        },
        "downloads": -1,
        "filename": "ravdl-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2467b8331bce29c191d7dbe099f6cce7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21752,
        "upload_time": "2022-08-18T06:33:28",
        "upload_time_iso_8601": "2022-08-18T06:33:28.433275Z",
        "url": "https://files.pythonhosted.org/packages/2c/66/c43309358e9aff02979013815ae4c90a9b8ec6be6e46dd97eddd9cb7f68d/ravdl-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aace1b574604936fdb830c8c199943a0d0d34ddaa3bc84ab7b14a6dcf252688",
          "md5": "e52914a91706a160b45c957f48111cc9",
          "sha256": "2325413d3b779ed9a2a86e94925191413947e491badc2879286f5b36446e824d"
        },
        "downloads": -1,
        "filename": "ravdl-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e52914a91706a160b45c957f48111cc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27694,
        "upload_time": "2022-09-15T13:17:45",
        "upload_time_iso_8601": "2022-09-15T13:17:45.578966Z",
        "url": "https://files.pythonhosted.org/packages/9a/ac/e1b574604936fdb830c8c199943a0d0d34ddaa3bc84ab7b14a6dcf252688/ravdl-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bcf3c2761ab316580979d148f537dd72999d7302e4974ddbe122c07a4f7d966",
          "md5": "abd62e59b191af4125f1fedec2eb7cb6",
          "sha256": "99ecb1d5d720080188c5f26b947786840a64236e5b8a99124a9180ab30cb6c90"
        },
        "downloads": -1,
        "filename": "ravdl-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "abd62e59b191af4125f1fedec2eb7cb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27744,
        "upload_time": "2022-09-16T10:12:43",
        "upload_time_iso_8601": "2022-09-16T10:12:43.298922Z",
        "url": "https://files.pythonhosted.org/packages/1b/cf/3c2761ab316580979d148f537dd72999d7302e4974ddbe122c07a4f7d966/ravdl-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "512a25d4f7bd723fe75bc0775e650072f258c6f7345934b68300605296bb16c9",
          "md5": "78c520bc23fdbd2acd776306ed42d964",
          "sha256": "0373250b431dd684d49483bc62ba26942d770b38cd0713abea037a7fb3202033"
        },
        "downloads": -1,
        "filename": "ravdl-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "78c520bc23fdbd2acd776306ed42d964",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29889,
        "upload_time": "2022-10-14T08:38:39",
        "upload_time_iso_8601": "2022-10-14T08:38:39.783451Z",
        "url": "https://files.pythonhosted.org/packages/51/2a/25d4f7bd723fe75bc0775e650072f258c6f7345934b68300605296bb16c9/ravdl-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d71e3e21b608ea27cd41e1bf191f278c20c44f0df796862ddc2e95bb64e8f8e",
        "md5": "ef7c7f2bff9ee5193e6d3fee3c34b2c8",
        "sha256": "c45a780f55d0c0da8d5eefd95161f8ac25fcbf751e81a75f5956cef2c840ef14"
      },
      "downloads": -1,
      "filename": "ravdl-0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "ef7c7f2bff9ee5193e6d3fee3c34b2c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23811,
      "upload_time": "2023-03-22T12:06:05",
      "upload_time_iso_8601": "2023-03-22T12:06:05.898374Z",
      "url": "https://files.pythonhosted.org/packages/0d/71/e3e21b608ea27cd41e1bf191f278c20c44f0df796862ddc2e95bb64e8f8e/ravdl-0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}