{
  "info": {
    "author": "Clemens Kubach",
    "author_email": "clemens.kubach@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Bicycle Bell Sound Event Detection System\n**Author: Clemens Kubach**\n\nThis repository is one of three for my bachelor thesis on \"Development of an Embedded System \nfor Detecting Acoustic Alert Signals of Cyclists Using Neural Networks\".\n\nIt contains the software as an easy-to-use and customizable CLI for the project. \nOnly this part has to be installed on the target device and can be used and \ndeveloped independently of the other components.\n\nA trained saved model can be selected, which is then converted to an inference format \n(TFLite or TF-TRT), allowing real-time predictions to be made to a single sound event for \nlive-streamed audio via connected sound devices. \n\nThe other related repositories are:\n- [bicycle-bell-sed-models](https://github.com/ClemensKubach/bicycle-bell-sed-models)\n- [bicycle-bell-sed-pipeline](https://github.com/ClemensKubach/bicycle-bell-sed-pipeline)\n\n\n## Getting Started\nThe software is based on the [PortAudio](http://www.portaudio.com/) library for audio I/O. \nTherefore, this must be installed on the system.\nFor more detailed installation instructions on an embedded device like the \n[Jetson Nano](#Jetson-Nano-Setup), see the corresponding chapter.\n\n```shell\napt-get update\napt-get install portaudio19-dev\n\npip install --upgrade pip\npip install bicycle-bell-seds-cli\n\nseds-cli --help\nseds-cli run --tfmodel='!crnn' production\n```\n\nThere are generally 4 main functionalities that are displayed with `seds-cli --help`.\n- `conversion` can convert recordings of a pre-executed run command with appropriate \nparameterization for sound recording to a wave file.\n- `devices` can be used for testing the available devices by doing a sound check.\n- `resources` can be used for find the location of resource files like log-files or recordings.\n- `run` is the main functionality of the software. \nThis command is used to start a sound event detection.\n\n## General Information\nGenerally, two versions of the CLI are installed: `jn-seds-cli` and `seds-cli`. \nThe first one is based on the second one and only contains simplifications and specifications for \nthe execution of the bicycle bell detection on the Jetson Nano. \nWith the right choice of parameters, however, \nboth CLIs can be used on all devices without any problems. \nDetails about the differences can be found via `jn-seds-cli run --help`. In the following, the \n`jn-seds-cli` version will be used for an easier copy-and-paste usage on the Jetson Nano as \ntarget device.\n\nPlease use `--help` for detailed explanations of the individual software \nfunctionalities and parameters. \nWith this you can get help for each level, i.e.: \n`jn-seds-cli --help`, `jn-seds-cli run --help`, `jn-seds-cli run evaluation --help`.\n\n## Usage Examples\nShow the location of the resources' folder:\n```shell\njn-seds-cli resources where\n```\nMake a sound check of the audio devices:\n```shell\njn-seds-cli devices soundcheck\n```\nStart a sound event detection with saving the logs to a file in the resources' folder and \nrecord the first minute of the received audio input stream:\n```shell\njn-seds-cli run --tfmodel='!crnn' production --save_log=True --save_records=True --storage_length=60\n```\nConvert the recorded file of the previous run into a wave file:\n```shell\njn-seds-cli conversion record_to_wav --path_storage_pickle=\"/abs/path/to/seds_cli/res/records/record-xx.pickle\" --target_wav_path=\"./target_filepath/filename.wav\"\n```\n\n### Run Command\nThere are two different modes with the run command: production and evaluation. \nThe production mode is the main mode and receives live the current sound of the environment \nthrough the selected microphone device. \nThe evaluation mode can play a recorded wave file with a corresponding annotation csv file and \ndisplays the ground-truth value as well as the prediction for the live microphone recordings.\n\nMost parameters for the run command are available for both modes. \nMode specific parameters can be found via `--help` for the selected mode. \nThe following flags are used for the production mode, but are available for the evaluation mode too.\n\n**There are three models pre-defined and pre-trained for direct usage for \ndetecting bicycle bell sounds. They can be chosen by using `--tfmodel=\"!model-name\"` without any \nfurther specifications of `saved_model` type or the absolute path to the saved model resource \nin `tfmodel`. Available are `!crnn`, `yamnet_base` and `yamnet_extended`.**\n\n\nSelect the predefined CRNN model via `!crnn`, and run the production mode without displaying \nthe probability value of the predictions. The logs will be saved to a file:\n```shell\njn-seds-cli run --tfmodel='!crnn' production --save_log=True --prob_logging=False\n```\nVia specifying an integer for `input_device`, not `None`, a specific (not default) sound device \ncan be selected. \nUse the extended YAMNet model in a production run and define that the selected (default) \ninput device only has one input channel:\n```shell\njn-seds-cli run --tfmodel='!yamnet_extended' production --channels=1\n```\nUse the base YAMNet model in a production run with a lower threshold as default and activate the\nlogging of the probabilities to see that every prediction from a value of 0.3 will True:\n```shell\njn-seds-cli run --tfmodel='!yamnet_base' production --threshold=0.3 --prob_logging=True\n```\n\nMode specific flag-usage examples...\n\nFor the evaluation mode, use the first option for a random test example or specify an own test:\n```shell\njn-seds-cli run --tfmodel='!crnn' evaluation --save_log=True --silent=False\n# Or\njn-seds-cli run --tfmodel='!crnn' evaluation --save_log=True --wav_file=\"/path/to/wave.wav\" --annotation_file=\"/path/to/annotations.csv\" --silent=False\n```\nFor playback:\n```shell\njn-seds-cli run --tfmodel='!crnn' production --save_log=True --use_output=True\n```\n\n## Advanced Usage\nPlease note that in order to use the gpu, an appropriately compatible TensorFlow build must be \ninstalled and used with `--gpu=True`. \nIn addition, the inference model type must be set to use \nTensorFlow-TenorRT via `--infer_model=tftrt`, depending on the specific machine. \nIn some cases, also TFLite can be used with gpu support.\nUnfortunately, TF-TRT could not yet be tested thoroughly because compatible devices or \nsoftware dependencies were not available.\nFor further information, read `run --help` under the related parameters.\n\nNew trained models can be used via `--tfmodel=\"/path/to/tf-savedmodel-dir savedmodel=crnn`. \nThe best way, is to modify the source code in the file `saved_models.py` and create a new child class of BaseSavedModel or Mono16kWaveInputSavedModel.\nThen create an entry for this class in selectors.py, thus custom preprocessing and postprocessing for the model can be defined.\nAn easier way without modifying code is to use a saved model with the currently support interface of mono 16 kHz waveform input. \nIf so, it can easily be used via `--tfmodel=\"/path/to/tf-savedmodel-dir --saved_model=MONO_16K_IN`.\nPlease note that this feature has not yet been thoroughly tested.\n\n## Jetson Nano Setup\nThe following explanation based on the latest stable version of the JetPack OS (4.6.1) for the \nJetson Nano at the time of writing. \nThe use of the future version JetPack 5.0 is expected to resolve the installation issues with \nTensorflow_io and thus possibly allow support of the GPU and Tensorflow-TRT on the Jetson Nano.\nHowever, without development intentions, the here documented version 4.6.1 of JetPack \nshould be used for now.\n\nMake sure that JetPack 4.6.1 has been installed!\n```shell\napt-get update\napt-get install portaudio19-dev\n\nsudo apt-get update\nsudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran\nsudo apt-get install python3-pip\n\nmkdir ./venv\npython3 -m venv ./venv\nsource venv/bin/activate\n\npip install -U pip testresources setuptools==49.6.0 \npip install -U --no-deps numpy==1.19.4 future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 protobuf pybind11 cython pkgconfig\nenv H5PY_SETUP_REQUIRES=0 pip install -U --no-build-isolation h5py==3.1.0\npip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v461 'tensorflow>=2'\n\npython -c \"from tensorflow.python.client import device_lib; device_lib.list_local_devices()\"\nPIP_EXTRA_INDEX_URL=https://snapshots.linaro.org/ldcg/python-cache pip install tensorflow_io\npython -c \"from tensorflow.python.client import device_lib; device_lib.list_local_devices()\"\n\npip install bicycle-bell-seds-cli\n\njn-seds-cli --help\njn-seds-cli run --tfmodel='!crnn' production\n```\nIt is expected that after `tensorflow_io` installation no gpu will be detected. \nThis is because this build of `tensorflow_io` brings a specific build of `tensorflow` (2.6) that does not \nsupport gpus'. \nWith JetPack 5.0 and thus higher Python version (>3.6), more recent versions of `tensorflow_io` can \nbe installed directly, for which there are also pre-build wheels for aarch64.\n\nMost of the installation steps for TensorFlow on the Jetson Nano are from \n\"Prerequisites and Dependencies\" [in corresponding the Nvidia Docs](https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html).\n\nUsing Docker can save some on setup steps, but can also add some others. \nIf Docker should be used on the Jetson Nano:\n```shell\nsudo docker run -it --rm --runtime nvidia --network host -v /home/jetson:/home/jetson --device /dev/snd nvcr.io/nvidia/l4t-tensorflow:r32.7.1-tf2.7-py3\n```\n\n## Development\nFeel free to report bugs as issues and also contribute to the project. \nPlease contact me for this. \nEspecially the integration of new models and the full and tested integration of TF-TRT are still \noutstanding points of improvement. \nIn addition, the SEDS-CLI will be offered completely separate from the bicycle bell sound event \nin a further step and repository.\n\nUse the following steps to install directly from the GitHub repository and \ndo not forget to call `git lfs pull` before running. \nThis will download the model data.\n```shell\napt-get update\napt-get install portaudio19-dev git git-lfs\n\ngit clone https://github.com/ClemensKubach/bicycle-bell-sed-software.git\ncd bicycle-bell-sed-software\ngit lfs pull\npip install -e .\n```\n\n![system-overview](visualizations/overview.drawio.png \"System Overview\")\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ClemensKubach/bicycle-bell-sed-software",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bicycle-bell-seds-cli",
    "package_url": "https://pypi.org/project/bicycle-bell-seds-cli/",
    "platform": null,
    "project_url": "https://pypi.org/project/bicycle-bell-seds-cli/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ClemensKubach/bicycle-bell-sed-software/issues",
      "Homepage": "https://github.com/ClemensKubach/bicycle-bell-sed-software"
    },
    "release_url": "https://pypi.org/project/bicycle-bell-seds-cli/0.0.3/",
    "requires_dist": [
      "tensorflow (<=2.8.0,>=2.6.2)",
      "pyaudio (>=0.2.11)",
      "fire (>=0.4.0)",
      "numpy (>=1.19.0)",
      "tensorflow-io (>=0.21.0)",
      "dataclasses (>=0.8) ; python_version < \"3.7\""
    ],
    "requires_python": "",
    "summary": "CLI software for the detection of the single target sound event of bicycle bell signals.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13745801,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ece45fcda5c24813526461188720bf6792c70dc3e8a3733daf250526e7df3e",
          "md5": "b4702d354c26f6cc77ac39a1075510c2",
          "sha256": "176086b01a7c417ddf9e7ee21490b367ee0697f4aebe0081bdf290dd4657dec7"
        },
        "downloads": -1,
        "filename": "bicycle_bell_seds_cli-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4702d354c26f6cc77ac39a1075510c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32053198,
        "upload_time": "2022-05-07T15:57:36",
        "upload_time_iso_8601": "2022-05-07T15:57:36.891148Z",
        "url": "https://files.pythonhosted.org/packages/d2/ec/e45fcda5c24813526461188720bf6792c70dc3e8a3733daf250526e7df3e/bicycle_bell_seds_cli-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a055331e33d165baccd250021b95f6d35148db2c9b1d1aac56e36ae1f6914d5",
          "md5": "d5c56d0215e6ddb79042dce5f7c2cbed",
          "sha256": "540bf1f53a69ca5f20ce1b328ae0e80eb2616266bb7989a2c6d9e11909adc77b"
        },
        "downloads": -1,
        "filename": "bicycle_bell_seds_cli-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5c56d0215e6ddb79042dce5f7c2cbed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32053857,
        "upload_time": "2022-05-07T21:15:34",
        "upload_time_iso_8601": "2022-05-07T21:15:34.815965Z",
        "url": "https://files.pythonhosted.org/packages/3a/05/5331e33d165baccd250021b95f6d35148db2c9b1d1aac56e36ae1f6914d5/bicycle_bell_seds_cli-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a055331e33d165baccd250021b95f6d35148db2c9b1d1aac56e36ae1f6914d5",
        "md5": "d5c56d0215e6ddb79042dce5f7c2cbed",
        "sha256": "540bf1f53a69ca5f20ce1b328ae0e80eb2616266bb7989a2c6d9e11909adc77b"
      },
      "downloads": -1,
      "filename": "bicycle_bell_seds_cli-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5c56d0215e6ddb79042dce5f7c2cbed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32053857,
      "upload_time": "2022-05-07T21:15:34",
      "upload_time_iso_8601": "2022-05-07T21:15:34.815965Z",
      "url": "https://files.pythonhosted.org/packages/3a/05/5331e33d165baccd250021b95f6d35148db2c9b1d1aac56e36ae1f6914d5/bicycle_bell_seds_cli-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}