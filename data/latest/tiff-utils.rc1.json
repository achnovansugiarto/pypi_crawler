{
  "info": {
    "author": "Alan M Watson",
    "author_email": "alan.watson@pitt.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# tiff_utils\n\n## This class is a simple way of working with tiff files\n\n\n\n```python\n## Import\nfrom`tiff_utils import tiff\n```\n\n##### -During reads, all tags are collected and resolution is extracted in microns\n\n1. by default, specifying a file name loads the image, tags and resolution information.\n\n   ```python\n   myImage =`tiff(fileName.tif) \n   print(myImage.shape)\n   print(myImage.image.dtype)\n   print(myImage.y_resolution, myImage.x_resolution)\n   print(myImage.tags)\n   ```\n\n2. loadImage=False can be specified when instantiating the class to load only tags and resolution information.\n\n   ```python\n   myImage = tiff(fileName.tiff, loadImage = False)\n   ```\n\n3. An image can be loaded manually by calling class method: .loadImage()\n\n   ```python\n   myImage.loadImage()\n   ```\n\n   \n\n##### -During writes, the class.write() method will automatically:\n\n1. Determine if BigTiff is required (currently files >= 2GB)\n\n   ```\n   myImage.write() # Automatically determines whether BigTiff is required\n   myImage.write(bigTiff=True) # Force the writer to use BigTiff\n   ```\n\n2. Manage compression (currently defaults to 'zlib')\n\n   ```\n   myImage.write() # Defaults to zlib compression\n   myImage.write(compression=0) # No compression\n   ```\n\n3. Manage tiled-tiff writes (currently defaults to (512,512))\n\n   ```python\n   myImage.write()\n   myImage.write(tile=None)\n   myImage.write(tile=(1024,1024))\n   ```\n\n​    CAUTION: be careful when calling .write() because it will overwrite the original image\n​        if the file name was not changed.\n\n\n\n##### -Class methods enable easy:\n\n1. Replacement of image with a different np.array: .newImage(array)\n\n   ```python\n   myImage =`tiff(fileName.tif)\n   myImage.newImage(array = np.random.random((10,1024,1024),dtype=np.uint16))\n   ```\n\n2. Assign a new file name: .newFileName(fileNameString)\n\n   ```python\n   myImage.newFileName('/a/new/place/to/store/my/file.tif')\n   ```\n\n3. Conversion of dtype:\n\n   ```python\n   myImage.to8bit()\n   myImage.to16bit()\n   myImage.toFloat()\n   myImage.toFloat32()\n   myImage.toFloat64()\n   myImage.toDtype(np.uint16)\n   myImage.toDtype(np.uint8)\n   myImage.toDtype(np.float)\n   ```\n\n4. Assigning of new resolution in microns: .newResolution((yres,xres))\n\n   ```python\n   myImage.newResolution((0.5,0.5))\n   ```\n\n5. Resizing of image to a specified resolution in microns: .resizeImage((x_res,y_res)) or .resizeImage(int)\n\n   ```python\n   myImage.resizeImage((25,25)) #Resize to 25 microns y,x\n   ```\n\n6. Clone an image class: newClass = currentClass.clone(newFilePath=None, array=None, newResolutionMicrons=None)\n\n   ```\n   newImageClass = myImage.clone()\n   ```\n\n   \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CBI-PITT/tiff_utils",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tiff-utils",
    "package_url": "https://pypi.org/project/tiff-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/tiff-utils/",
    "project_urls": {
      "Bug Tracker": "https://github.com/CBI-PITT/tiff_utils/issues",
      "Documentation": "https://github.com/CBI-PITT/tiff_utils#README.md",
      "Homepage": "https://github.com/CBI-PITT/tiff_utils",
      "Source Code": "https://github.com/CBI-PITT/tiff_utils",
      "User Support": "https://github.com/CBI-PITT/tiff_utils/issues"
    },
    "release_url": "https://pypi.org/project/tiff-utils/0.1.0/",
    "requires_dist": [
      "numpy",
      "scikit-image",
      "tifffile"
    ],
    "requires_python": ">=3.7",
    "summary": "A class for easy manipulation of tiff files",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12034071,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72190ab01d40aa10ffc6fd38c00167c8dfefcf6ef1d1b249fb3ff0d878174190",
          "md5": "a5bd86cbdad7e78ceed52bb783926afb",
          "sha256": "9db2cde214bf1cb97c04cced2f15e07e831faae8b9e2050b3b9058f2291b16cd"
        },
        "downloads": -1,
        "filename": "tiff_utils-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5bd86cbdad7e78ceed52bb783926afb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8534,
        "upload_time": "2021-11-16T04:08:05",
        "upload_time_iso_8601": "2021-11-16T04:08:05.318554Z",
        "url": "https://files.pythonhosted.org/packages/72/19/0ab01d40aa10ffc6fd38c00167c8dfefcf6ef1d1b249fb3ff0d878174190/tiff_utils-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e7a794336a044e9b8f59a000261bfa740f6da9b4b0c73c94d03ae6bebf08be4",
          "md5": "00ca791eb23ba157c42c2a5cf9d834da",
          "sha256": "1af3301dde63c86db1218c62716b4db0cf461d94ed3735cd92c44b6a080a032d"
        },
        "downloads": -1,
        "filename": "tiff_utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00ca791eb23ba157c42c2a5cf9d834da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 218675,
        "upload_time": "2021-11-16T04:08:06",
        "upload_time_iso_8601": "2021-11-16T04:08:06.473395Z",
        "url": "https://files.pythonhosted.org/packages/4e/7a/794336a044e9b8f59a000261bfa740f6da9b4b0c73c94d03ae6bebf08be4/tiff_utils-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72190ab01d40aa10ffc6fd38c00167c8dfefcf6ef1d1b249fb3ff0d878174190",
        "md5": "a5bd86cbdad7e78ceed52bb783926afb",
        "sha256": "9db2cde214bf1cb97c04cced2f15e07e831faae8b9e2050b3b9058f2291b16cd"
      },
      "downloads": -1,
      "filename": "tiff_utils-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5bd86cbdad7e78ceed52bb783926afb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8534,
      "upload_time": "2021-11-16T04:08:05",
      "upload_time_iso_8601": "2021-11-16T04:08:05.318554Z",
      "url": "https://files.pythonhosted.org/packages/72/19/0ab01d40aa10ffc6fd38c00167c8dfefcf6ef1d1b249fb3ff0d878174190/tiff_utils-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e7a794336a044e9b8f59a000261bfa740f6da9b4b0c73c94d03ae6bebf08be4",
        "md5": "00ca791eb23ba157c42c2a5cf9d834da",
        "sha256": "1af3301dde63c86db1218c62716b4db0cf461d94ed3735cd92c44b6a080a032d"
      },
      "downloads": -1,
      "filename": "tiff_utils-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "00ca791eb23ba157c42c2a5cf9d834da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 218675,
      "upload_time": "2021-11-16T04:08:06",
      "upload_time_iso_8601": "2021-11-16T04:08:06.473395Z",
      "url": "https://files.pythonhosted.org/packages/4e/7a/794336a044e9b8f59a000261bfa740f6da9b4b0c73c94d03ae6bebf08be4/tiff_utils-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}