{
  "info": {
    "author": "Tiago Prata",
    "author_email": "prataaa@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# fastapi-frame-stream\n\nPackage to easily stream individual frames (MJPEG) using FastAPI.\n\nFastAPI server for publishing and viewing MJPEG streams.\n\nRaw image files and images as base64 strings can be sent to a 'video stream' and then consumed by any client.\n\n## Quick start\n\n### Installing\n\n```cmd\npip install fastapi-frame-stream\n```\n\n#### Requirements\n\n- [FastAPI](https://fastapi.tiangolo.com/)\n- [uvicorn](https://www.uvicorn.org/)\n\n<details>\n  <summary><i>NOTE:</i></summary>\n  This package will also automatically install:\n\n- imutils\n- opencv-python\n- python-miltipart\n\n</details>\n\n### How to use\n\n#### Server\n\nYou can create a simple FastAPI server where it is possible to publish and get multiple streams.\n\n![usage code](./_readme_imgs/usage_code.svg)\n\n<details>\n<summary><i>full code</i></summary>\n\n```python\nfrom fastapi import FastAPI, File, UploadFile\nimport uvicorn\nfrom pydantic import BaseModel\nfrom fastapi_frame_stream import FrameStreamer\n\napp = FastAPI()\nfs = FrameStreamer()\n\nclass InputImg(BaseModel):\n    img_base64str : str\n\n\n@app.post(\"/send_frame_from_string/{stream_id}\")\nasync def send_frame_from_string(stream_id: str, d:InputImg):\n    await fs.send_frame(stream_id, d.img_base64str)\n\n\n@app.post(\"/send_frame_from_file/{stream_id}\")\nasync def send_frame_from_file(stream_id: str, file: UploadFile = File(...)):\n    await fs.send_frame(stream_id, file)\n\n\n@app.get(\"/video_feed/{stream_id}\")\nasync def video_feed(stream_id: str):\n    return fs.get_stream(stream_id)\n\n\nif __name__ == '__main__':\n    uvicorn.run(app, host=\"0.0.0.0\", port=5000)\n```\n\n</details>\n\n#### Client\n\nAny client can view a published image (MJPEG) stream using a simple ```<img>``` tag:\n\n![usage code](./_readme_imgs/client_code.svg)\n\n<details>\n<summary><i>full code</i></summary>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Testing fastapi-frame-stream</title>\n</head>\n<body>\n    <img src=\"http://localhost:5000/video_feed/my_new_stream001\">\n</body>\n</html>\n```\n\n</details>\n\n#### All together\n\nIt is possible to upload an image file directly...\n\n![Server and client](https://raw.githubusercontent.com/TiagoPrata/fastapi-frame-stream/main/_readme_imgs/usage001.gif)\n\n... or to use any kind of application to convert the frames to base64 and send it to the web server:\n\n![Server and client](https://raw.githubusercontent.com/TiagoPrata/fastapi-frame-stream/main/_readme_imgs/usage002.gif)\n\n<h4><i>How it works</i></h4>\n\n<details>\n<summary></summary>\n\nThe frames sent throught the web server are stored in a temporary (in memory) SQLite DB...\n\n![User sending frame](./_readme_imgs/sending_frame.png)\n\n... and the last frame of each stream is retrieved everytime a client wants to visualize the stream.\n\n![Retrieving stream](./_readme_imgs/getting_stream.png)\n\n</details>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TiagoPrata/fastapi-frame-stream",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastapi-frame-stream",
    "package_url": "https://pypi.org/project/fastapi-frame-stream/",
    "platform": null,
    "project_url": "https://pypi.org/project/fastapi-frame-stream/",
    "project_urls": {
      "Homepage": "https://github.com/TiagoPrata/fastapi-frame-stream"
    },
    "release_url": "https://pypi.org/project/fastapi-frame-stream/0.1.1/",
    "requires_dist": [
      "imutils",
      "opencv-python",
      "python-multipart"
    ],
    "requires_python": ">=3.7",
    "summary": "Package to easily stream individual frames (MJPEG) using FastAPI",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14369160,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aef866836f6c5f3634dc848f7d5e19f819fd62e8e028e9cc50c04f08ecef77b9",
          "md5": "56c03bca27505c133ff53c08cfee8996",
          "sha256": "1fe9de479c81dd2eb4528f89b09bbf16640c590d8f1ccc67fd8407046b73b723"
        },
        "downloads": -1,
        "filename": "fastapi_frame_stream-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56c03bca27505c133ff53c08cfee8996",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5690,
        "upload_time": "2022-06-27T18:57:26",
        "upload_time_iso_8601": "2022-06-27T18:57:26.298344Z",
        "url": "https://files.pythonhosted.org/packages/ae/f8/66836f6c5f3634dc848f7d5e19f819fd62e8e028e9cc50c04f08ecef77b9/fastapi_frame_stream-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41876ba18314a8c97ea3a648e15fb5e3558d1d6d207df0a30cc330012451b3e0",
          "md5": "6ef7ffe26be991f907940698b09f14f2",
          "sha256": "99aeaa4e79c5eac9d166035e8239669a9fc1e4b24273dd276a109ed0ec75ed07"
        },
        "downloads": -1,
        "filename": "fastapi_frame_stream-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6ef7ffe26be991f907940698b09f14f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5211,
        "upload_time": "2022-06-27T18:57:28",
        "upload_time_iso_8601": "2022-06-27T18:57:28.570339Z",
        "url": "https://files.pythonhosted.org/packages/41/87/6ba18314a8c97ea3a648e15fb5e3558d1d6d207df0a30cc330012451b3e0/fastapi_frame_stream-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1157cada76bf1a47a0481a9b8baa4cc0aa3efd47e7530c140e0efd30a4518a45",
          "md5": "e878e7b1064a8090831e268b06fccbd1",
          "sha256": "98fcc207b8b4c360519dc8d17419f19624d345709c36ca0c501b79c8e179b053"
        },
        "downloads": -1,
        "filename": "fastapi_frame_stream-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e878e7b1064a8090831e268b06fccbd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5695,
        "upload_time": "2022-07-07T22:17:33",
        "upload_time_iso_8601": "2022-07-07T22:17:33.674701Z",
        "url": "https://files.pythonhosted.org/packages/11/57/cada76bf1a47a0481a9b8baa4cc0aa3efd47e7530c140e0efd30a4518a45/fastapi_frame_stream-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4736b0e9ef4c0cf2f955e08c29c4d4593177817febda0e1de998bc9c4fd35211",
          "md5": "d6e30ec7883bc85d8423808a1cea579b",
          "sha256": "05aaae2405cce97b135948e50ce3ec77fd9afce8b6c5b9cdb26bc83e46f6045e"
        },
        "downloads": -1,
        "filename": "fastapi_frame_stream-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6e30ec7883bc85d8423808a1cea579b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5257,
        "upload_time": "2022-07-07T22:17:35",
        "upload_time_iso_8601": "2022-07-07T22:17:35.867589Z",
        "url": "https://files.pythonhosted.org/packages/47/36/b0e9ef4c0cf2f955e08c29c4d4593177817febda0e1de998bc9c4fd35211/fastapi_frame_stream-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1157cada76bf1a47a0481a9b8baa4cc0aa3efd47e7530c140e0efd30a4518a45",
        "md5": "e878e7b1064a8090831e268b06fccbd1",
        "sha256": "98fcc207b8b4c360519dc8d17419f19624d345709c36ca0c501b79c8e179b053"
      },
      "downloads": -1,
      "filename": "fastapi_frame_stream-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e878e7b1064a8090831e268b06fccbd1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5695,
      "upload_time": "2022-07-07T22:17:33",
      "upload_time_iso_8601": "2022-07-07T22:17:33.674701Z",
      "url": "https://files.pythonhosted.org/packages/11/57/cada76bf1a47a0481a9b8baa4cc0aa3efd47e7530c140e0efd30a4518a45/fastapi_frame_stream-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4736b0e9ef4c0cf2f955e08c29c4d4593177817febda0e1de998bc9c4fd35211",
        "md5": "d6e30ec7883bc85d8423808a1cea579b",
        "sha256": "05aaae2405cce97b135948e50ce3ec77fd9afce8b6c5b9cdb26bc83e46f6045e"
      },
      "downloads": -1,
      "filename": "fastapi_frame_stream-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d6e30ec7883bc85d8423808a1cea579b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5257,
      "upload_time": "2022-07-07T22:17:35",
      "upload_time_iso_8601": "2022-07-07T22:17:35.867589Z",
      "url": "https://files.pythonhosted.org/packages/47/36/b0e9ef4c0cf2f955e08c29c4d4593177817febda0e1de998bc9c4fd35211/fastapi_frame_stream-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}