{
  "info": {
    "author": "Isaac Rehg",
    "author_email": "isaacrehg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "![logo](logo/logo-words.png \"TackleBox\")\n\nA framework for improved handling of PyTorch module hooks\n\n## Installation\n```shell\npip install tacklebox\n```\n## Why TackleBox?\nPyTorch module hooks are useful for a number of reasons. Debugging module behavior,\nquickly altering processing or gradient flow, and studying intermediate\nactivations are just a few utilities. Module hooks are a powerful tool,\nbut using them requires keeping track of hook functions,\nthe modules they are registered to, and the handles that let you remove those\nhooks.\n\n#### Improved organization\n\nTackleBox maintains a record of all hooks that have been registered, \nthe modules they were registered with, and allows you to\ndeactivate and reactivate any previously registered hooks on the fly.\n\n#### Backward hook consistency and backward-compatibility\n\nPyTorch autograd can lead to inconsistencies in what gradients are\nserved to backward hooks registered with PyTorch's\n``module.register_backward_hook`` method. This inconsistency has ultimately led\nto [the method's deprecation](https://github.com/pytorch/pytorch/pull/46163) altogether. \n\nTackleBox reimplements module backward hook registration using Tensor\nbackward hooks registered on a module's inputs and outputs during the\nforward pass. This allows us to establish correspondence between\nthe gradient tensors received by the backward hook and\nthe input/output tensors received by the forward hook.\n\nWith TackleBox you can continue to use module backward hooks, even with \nolder PyTorch versions ( < 1.8.0 ), and benefit from consistency in the ordering \nof gradient tensors served.\n\n## Quickstart\n\n#### Defining hooks\nHook functions must follow the call signature of the corresponding hook type: \n```python\ndef my_forward_hook(module, inputs, outputs):\n    print('Finished forward pass for module %s' % module.name)\n    return outputs\n\ndef my_forward_pre_hook(module, inputs):\n    print('Beginning forward pass for module %s' % module.name)\n    return inputs\n\ndef my_backward_hook(module, grad_in, grad_out):\n    print('Finished backward pass for module %s' % module.name)\n```\nThe ``inputs`` and ``outputs`` passed to forward hooks and forward pre-hooks are\ntuples containing all tensors passed to that module and output by that module, respectively.\n\n``grad_in`` and ``grad_out`` are tuples of the same length as ``inputs`` and ``outputs``,\nrespectively. The element at each position in ``grad_in`` or ``grad_out``  is the gradient\nw.r.t. the input or output\nat the same position in ``inputs`` or ``outputs``, respectively.\n\nForward hooks and forward-pre hooks may **optionally** return a tuple of the same length\nwith 1 or more of the tensors in it altered. These new inputs or outputs will be passed\nto the module's forward pass (in the case of the forward pre-hook)\nor returned as the module's output (in the case of the forward hook)\n\n#### Order of execution\nForward hooks\nwill be called at the end of a module's forward pass, forward pre-hooks will be called\nimmediately before a module's forward pass and backward hooks will be called at the end \nof a module's backward pass.\n\n#### Registering hooks\nUsing PyTorch module hooks, hook registration might look something like this:\n```python\nmy_handle = my_module.register_forward_hook(my_forward_hook)\nother_handle = other_module.register_forward_hook(my_forward_hook)\n...\n```\nIn this case you must maintain a hook handle for each new module and hook function\nyou decide to register.\n\nWith TackleBox, rather than registering hooks on a module directly, hook functions are passed to the hook manager\nalong with any modules that you would like it to be registered on. Hook functions should be passed\nto the corresponding registration function and assigned an id using kwargs:\n```python\nfrom tacklebox.hook_management import HookManager\n\nhookmngr = HookManager()\n\n# register a forward hook on my_module, other_module, etc.\nhookmngr.register_forward_hook(my_forward_hook,\n                               my_module_name=my_module,\n                               other_module_name=other_module,\n                               **more_named_modules)\n\n# register a forward pre-hook on my_module, other_module, etc.\nhookmngr.register_forward_pre_hook(my_forward_pre_hook,\n                                   my_module_name=my_module,\n                                   other_module_name=other_module,\n                                   **more_named_modules)\n\n# register a backward hook on my_module, other_module, etc.\nhookmngr.register_backward_hook(my_backward_hook,\n                                my_module_name=my_module,\n                                other_module_name=other_module,\n                                **more_named_modules)\n```\nNote that there is no need to maintain any additional references, other than\nthat of the hook manager.\n#### Activating hooks\nOnce registered, your hooks can be activated and deactivated on the fly,\nusing a variety of filtering options. By default, hooks are activated upon registration.\nTo register a hook without immediately activating it, pass ``activate=False``:\n```python\nhookmngr.register_forward_hook(my_forward_hook, my_module_name=my_module,\n                               activate=False)\n```\n\nFollowing registration, you can select groups of hooks to activate or deactivate using\nseveral different filters:\n```python\n# activate/deactivate all hooks\nhookmngr.activate_all_hooks()\nhookmngr.deactivate_all_hooks()\n\n# filter by module:\n# activate/deactivate all hooks registered to my_module, other_module, etc.\nhookmngr.activate_module_hooks(my_module, other_module, *more_modules)\nhookmngr.deactivate_module_hooks(my_module, other_module, *more_modules)\n\n# filter by function:\n# activate/deactivate my_forward_hook on all modules it's been registered with\nhookmngr.activate_all_hook(hook_types=[my_forward_hook])\nhookmngr.deactivate_all_hooks(hook_types=[my_forward_hook]) \n\n# filter by hook category\n# activate/deactivate all forward hooks that have been registered\nhookmngr.activate_all_hooks(category='forward_hook')\nhookmngr.deactivate_all_hooks(category='forward_hook')\n```\n``activate_module_hooks`` and ``deactivate_module_hooks`` accept an unpacked, variable-length\narray of modules to filter by. These methods can take ``hook_types`` and ``category`` kwargs,\nas well, allowing filtering by module, hook function and category in the same call.\n\nThe ``hook_types`` kwarg accepts a variable-length array of functions. Only hooks\ncorresponding to one of the passed functions will be activated.\n\nThe ``category`` kwarg accepts the following options:\n\n- \"all\"\n- \"forward_hook\"\n- \"forward_pre_hook\"\n- \"backward_hook\"\n\n#### Hook activation with python contexts\nTackleBox additionally provides python contexts that enable activation and deactivation\nof module hooks with a single line of code:\n```python\nwith hookmngr.hook_all_context():\n    # all hooks active\n    ...\n# all hooks inactive\n\nwith hookmngr.hook_module_context(my_module, other_module, *more_modules):\n    # hooks on my_module, other_module, etc. are active\n    ...\n# hooks on my_module, other_module, etc. are inactive\n```\nBoth the above context methods accept the same kwargs for filtering as the activate and deactivate\nmethods (ie. ``hook_types`` and ``category``).\n\n#### *HookFunction* and *HookHandle* objects\nWhen a new hook function is registered on a module, the function is wrapped in \na ``HookFunction`` object. HookFunctions contain the function to be called\nat the corresponding entry point as well as a dictionary of modules that it\nhas been registered to, the corresponding handle for each\n\nEach registration event yields a handle. TackleBox represents these handles as\n`HookHandle` objects that maintain references to the corresponding module and \nHookFunction involved in the registration event. ``HookHandle.activate()``\nand ``HookHandle.deactivate()`` may be used to activate and deactivate the\ncorresponding hook function on the corresponding module.\n```python\n# access the HookHandle obtained from registering hook_function on my_module\nhook_handle = hook_function.module_to_handle[my_module]\n\nhook_handle.module  #  = my_module\nhook_handle.hook_fn  # = hook_function\n\n# activate/deactivate hook_function for my_module\nhook_handle.activate()\nhook_handle.deactivate()\n```\n\n#### Looking-up registered hooks\nThe hook manager maintains lookup tables for all HookFunctions, modules and \nHookHandles that have been registered. The user can access these objects using\ntheir id. We saw how module id is assigned when registering a module in the previous\nexamples. Registered modules can be accessed with:\n```python\nhookmngr.name_to_module['my_module_name']\n```\n\nHookFunction ids can also be assigned during registration by using the \n``hook_fn_name`` kwarg:\n```python\nhookmngr.register_forward_hook(my_forward_hook, hook_fn_name='my_forward_hook')\n```\nIf no id is passed, the HookFunction will be assigned an id using ``repr(function)``\nto convert the passed function to a string.\n\nRegistered HookFunctions can be accessed by id:\n```python\nhookmngr.name_to_hookfn['my_forward_hook']\n```\n\nWhen hook functions are registered to modules by the hook manager, the resulting\nHookHandle is given an id of the form `my_hook[my_module]` where ``my_hook`` is the \nid of the HookFunction and ``my_module`` is the id of the module registered to.\n\nSpecific handles can be accessed using this id:\n```python\n# access the HookHandle obtained from registering my_forward_hook on my_module\nhookmngr.name_to_hookhandle['my_forward_hook[my_module]']\n```\nThis lookup provides an easy way to visualize all currently registered hook across\nall modules.\n\n#### Removing hooks\nRemoving a hook will deactivate it then purge it from all records maintained by the hook manager.\nThis means that later calls to activate hooks will be unable to reactivate it.\nHooks can be removed by hook function, module or\nhook handle (a module, hook function pair):\n```python\nhookmngr.remove_hook_function(my_forward_hook)\n\nhookmngr.remove_module_by_name('my_module')\n\nhookmngr.remove_hook_by_name('my_forward_hook[my_module]')\n```\nThis lets us remove registered hooks with varying degrees of selectivity, using\na single line code.\n\nUsing the native PyTorch module hook registration, hook removal requires\niteration over maintained handles:\n\n```python\nmy_handle.remove()\nother_handle.remove()\n...\n```\nWith TackleBox you need not worry about module handles. Register and remove hooks\nto and from groups of modules all at once, filtering the set of active hooks\nat any point during experimentation. This is the power of TackleBox.\n\n## Tutorials and walkthroughs\nFor further reference, see [Hook Management - part 1.ipynb](Hook%20Management%20-%20part%201.ipynb) and\n[Hook Management - part 2.ipynb](Hook%20Management%20-%20part%202.ipynb) or checkout the [website](https://isaacrehg.com/tacklebox/)\nfor video\nwalkthroughs.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IsaacRe/tacklebox",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tacklebox",
    "package_url": "https://pypi.org/project/tacklebox/",
    "platform": "",
    "project_url": "https://pypi.org/project/tacklebox/",
    "project_urls": {
      "Homepage": "https://github.com/IsaacRe/tacklebox"
    },
    "release_url": "https://pypi.org/project/tacklebox/1.0.3/",
    "requires_dist": [
      "torch",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "Improved handling of PyTorch module hooks",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9258364,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dab5f32a7077bd0590727f5813d0b07b3f31e45b2f707bb35858958d991db5e7",
          "md5": "567d10f59737b3e74a8251150c5364e1",
          "sha256": "40a8bb4dfd26455efeb37003c7653d0f6b5da7bb8bc7e10a2da3c5a6d332278e"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "567d10f59737b3e74a8251150c5364e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12458,
        "upload_time": "2021-01-25T04:01:37",
        "upload_time_iso_8601": "2021-01-25T04:01:37.216502Z",
        "url": "https://files.pythonhosted.org/packages/da/b5/f32a7077bd0590727f5813d0b07b3f31e45b2f707bb35858958d991db5e7/tacklebox-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f900a9d871bc33439be732004487478e8e4c0f8feda76ab4465170526048b12",
          "md5": "433a62f55ce48170849786481cf1ae65",
          "sha256": "0cc34b4ab489140a3c3fc9b4665197626076212500be84aa61c8cdde02326bdc"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "433a62f55ce48170849786481cf1ae65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11341,
        "upload_time": "2021-01-25T04:01:38",
        "upload_time_iso_8601": "2021-01-25T04:01:38.255012Z",
        "url": "https://files.pythonhosted.org/packages/5f/90/0a9d871bc33439be732004487478e8e4c0f8feda76ab4465170526048b12/tacklebox-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8422aea594d896a48eb5db2b0d463aa22b208c2df0509a51c10b3403620bd817",
          "md5": "8a5ece3a22aede1d7ad51e8585b7ea7f",
          "sha256": "84ae6ded42aa09cde54f19e7f8404b26775ff183018ee8554c84a83eee76a578"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a5ece3a22aede1d7ad51e8585b7ea7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12441,
        "upload_time": "2021-01-25T04:11:32",
        "upload_time_iso_8601": "2021-01-25T04:11:32.909051Z",
        "url": "https://files.pythonhosted.org/packages/84/22/aea594d896a48eb5db2b0d463aa22b208c2df0509a51c10b3403620bd817/tacklebox-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25c7edc7eb0810deb1d02c11e3f6858f882a1b2916c5d7e966be3ecb7dc5ac8f",
          "md5": "d99e68cf736ef3d0236a6d5086a38ff3",
          "sha256": "08750218eee960d2f064a5e5f2f8a4ae7104934504688c50434e050358877328"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d99e68cf736ef3d0236a6d5086a38ff3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11315,
        "upload_time": "2021-01-25T04:11:34",
        "upload_time_iso_8601": "2021-01-25T04:11:34.129297Z",
        "url": "https://files.pythonhosted.org/packages/25/c7/edc7eb0810deb1d02c11e3f6858f882a1b2916c5d7e966be3ecb7dc5ac8f/tacklebox-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690a1d309f1395eb1700fd935eca4dfe6db9138ab27d283fe0e5dbba1da0e90b",
          "md5": "366fa72945c224bb9b94a613d32b9725",
          "sha256": "8018968aa3941e329c2590b656e5fd3e4711dbe2b4c92c5f1400b4aa6ce26c29"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "366fa72945c224bb9b94a613d32b9725",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12681,
        "upload_time": "2021-01-26T06:34:06",
        "upload_time_iso_8601": "2021-01-26T06:34:06.174417Z",
        "url": "https://files.pythonhosted.org/packages/69/0a/1d309f1395eb1700fd935eca4dfe6db9138ab27d283fe0e5dbba1da0e90b/tacklebox-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "338c36a36efedb4f8a32726750ba3530d99e1d956022b9a0289dca983fec6ad5",
          "md5": "22580950a8cd2512da89b68d662a6eff",
          "sha256": "2757a53e098fb9b5d9b9429fbecbbfbfd7c880da519fd7fdf7a328ed5c20e799"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "22580950a8cd2512da89b68d662a6eff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11669,
        "upload_time": "2021-01-26T06:34:07",
        "upload_time_iso_8601": "2021-01-26T06:34:07.488985Z",
        "url": "https://files.pythonhosted.org/packages/33/8c/36a36efedb4f8a32726750ba3530d99e1d956022b9a0289dca983fec6ad5/tacklebox-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f5e8267d31e3847a639cafb4dc35f51c87508ccc64ecd1902a561c94db432d",
          "md5": "ac7319e91d90361bd30e3f823cc7fccd",
          "sha256": "1864431ddf0ee2d174006a716268f0fd9c5de18845fe606642f0c1939ec41b16"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac7319e91d90361bd30e3f823cc7fccd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17186,
        "upload_time": "2021-01-28T21:25:38",
        "upload_time_iso_8601": "2021-01-28T21:25:38.520442Z",
        "url": "https://files.pythonhosted.org/packages/a1/f5/e8267d31e3847a639cafb4dc35f51c87508ccc64ecd1902a561c94db432d/tacklebox-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ddd69c647d42ed32a6ce57aa18480826b3aee4832770ddc12d25151905c13eb",
          "md5": "a7af8cce84cd4bfb7c77ec705666f2ed",
          "sha256": "1cc8f93f829c43b321eda6e54e981b9bf352a8585760c5b45373e0720835fac1"
        },
        "downloads": -1,
        "filename": "tacklebox-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a7af8cce84cd4bfb7c77ec705666f2ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19974,
        "upload_time": "2021-01-28T21:25:39",
        "upload_time_iso_8601": "2021-01-28T21:25:39.858434Z",
        "url": "https://files.pythonhosted.org/packages/7d/dd/69c647d42ed32a6ce57aa18480826b3aee4832770ddc12d25151905c13eb/tacklebox-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1f5e8267d31e3847a639cafb4dc35f51c87508ccc64ecd1902a561c94db432d",
        "md5": "ac7319e91d90361bd30e3f823cc7fccd",
        "sha256": "1864431ddf0ee2d174006a716268f0fd9c5de18845fe606642f0c1939ec41b16"
      },
      "downloads": -1,
      "filename": "tacklebox-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac7319e91d90361bd30e3f823cc7fccd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17186,
      "upload_time": "2021-01-28T21:25:38",
      "upload_time_iso_8601": "2021-01-28T21:25:38.520442Z",
      "url": "https://files.pythonhosted.org/packages/a1/f5/e8267d31e3847a639cafb4dc35f51c87508ccc64ecd1902a561c94db432d/tacklebox-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ddd69c647d42ed32a6ce57aa18480826b3aee4832770ddc12d25151905c13eb",
        "md5": "a7af8cce84cd4bfb7c77ec705666f2ed",
        "sha256": "1cc8f93f829c43b321eda6e54e981b9bf352a8585760c5b45373e0720835fac1"
      },
      "downloads": -1,
      "filename": "tacklebox-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a7af8cce84cd4bfb7c77ec705666f2ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19974,
      "upload_time": "2021-01-28T21:25:39",
      "upload_time_iso_8601": "2021-01-28T21:25:39.858434Z",
      "url": "https://files.pythonhosted.org/packages/7d/dd/69c647d42ed32a6ce57aa18480826b3aee4832770ddc12d25151905c13eb/tacklebox-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}