{
  "info": {
    "author": "Joachim Jablon",
    "author_email": "ewjoachim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PowerNap\n\n[![Deployed to PyPI](https://img.shields.io/pypi/pyversions/powernap?logo=pypi&logoColor=white)](https://pypi.org/pypi/powernap)\n[![GitHub Repository](https://img.shields.io/github/stars/ewjoachim/powernap?logo=github)](https://github.com/ewjoachim/powernap/)\n[![Continuous Integration](https://img.shields.io/github/workflow/status/ewjoachim/powernap/CI?logo=github)](https://github.com/ewjoachim/powernap/actions?workflow=CI)\n[![Coverage](https://raw.githubusercontent.com/ewjoachim/powernap/python-coverage-comment-action-data/badge.svg)](https://github.com/ewjoachim/powernap/tree/python-coverage-comment-action-data)\n[![MIT License](https://img.shields.io/github/license/ewjoachim/powernap?logo=open-source-initiative&logoColor=white)](https://github.com/ewjoachim/powernap/blob/main/LICENSE.md)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/ewjoachim/powernap/blob/main/LICENSE/CODE_OF_CONDUCT.md)\n\n_A small REST client that recharges your batteries_\n\nPowerNap is a simplistic JSON REST API client, a small wrapper around httpx that makes your code\nread slightly better.\n\n## Installation\n\n```console\n$ pip install powernap\n```\n\n## Usage\n\n```python\n# You will need an httpx Client. Let's do a GitHub client!\nhttpx_client = httpx.Client(\n    base_url=\"https://api.github.com/v3\",\n    headers={\"Authorization\": f\"token {token}\"}\n)\n\n# Instantiate the PowerNap client\ngithub_client = powernap.PowerNap(httpx_client=httpx_client)\n\n# PowerNap will help you build complex URLs in a pythonic-looking way:\nrepo = github_client.repos(\"ewjoachim/powernap\").get()\n\n# And access the json responses like objects\ncount_stars = repo.stargazers_count\n\n# You can also easily send POST requests.\ngithub_client.repos(\"ewjoachim/powernap\").issues(42).comments.post(\n    body=f\"Wow look! This repo has {count_stars} stars!\"\n)\n```\n\n### Build complex URLs\n\nYou can use `client(something)` or `client.something`, and chain calls.\nWith the form `client(something)`, you can pass multiple parameters, and they\nwill be joined together\n\n```python\n\n# The next calls are all identical and target:\n#    {base_url}/repos/ewjoachim/powernap/stargazers\ngithub_client.repos(\"ewjoachim/powernap\").stargazers.get()\ngithub_client.repos(\"ewjoachim\").powernap(\"stargazers\").get()\ngithub_client.repos(\"ewjoachim\", \"powernap\", \"stargazers\").get()\ngithub_client.repos(\"ewjoachim\", \"powernap\")(\"stargazers\").get()\ngithub_client(\"repos/ewjoachim/powernap/stargazers\").get()\n\n# The recommended way is to use client.something for static parts of the url and\n# client(something) with a variable for dynamic parts.\n\n# You can also target the base url directly\n# {base_url}\ngithub_client().get()\n```\n\n### Access the json responses like objects\n\nOn the json responses, all objects (even nested) are configured so that you can\nget keys with the `object.key` syntax in addition to the classic\n`object[\"key\"]`.\n\n```python\n# GET /nested_json -> {\"a\": {\"b\":{\"c\": \"d\"}}}\nresponse = some_api_client.nested_json.get()\n\nassert response == {\"a\": {\"b\":{\"c\": \"d\"}}}\nassert response[\"a\"][\"b\"][\"c\"] == \"d\"\n# But also the magic form:\nassert response.a.b.c == \"d\"\n```\n\n### Arguments\n\nThe arguments in the `.get/delete()` calls are used as query parameters on\nthe call.\n\nThe arguments in the `.post/put/patch()` calls are put together, and passed\nas the json payload for the call.\n\n\n### Response types\n\nIf the response comes with `Content-Type: application/json`, then you'll get\nthe \"magic\" json response as described above. Otherwise, if the content type\nis `text/*`, you'll get a `string`, and otherwise, you'll get `bytes`.\n\n### Exceptions\n\nIf you want to avoid `httpx` exceptions to reach your code, so as to maintain\na good abstraction layer, you may want to subclass Powernap and implement\n`handle_exception(self, exc)`. You'll receive an `httpx.HttpError` and it's\nyour responsibility to raise whatever exception you see fit. Not raising an\nexception in this context is considered as an error, though.\n\n```python\nfrom typing import NoReturn\n\nclass ApiError(MyProjectError):\n    pass\n\nclass ForbiddenError(ApiError):\n    pass\n\nclass ApiClient(PowerNap):\n    def handle_exception(self, exc: httpx.HttpError) -> NoReturn:\n        if exc.response.status_code == 403:\n            raise ForbiddenError\n        raise ApiError\n```\n\n### More control over input and output\n\nThis magic is nice and all, but sometimes, you may want more control.\nIf you want to send additional headers or a non-JSON-dict payload, or\nif you want to read the headers on the response, it possible too.\n\nInstead of calling `.get()`, use either `.get.i()`, `.get.o()` or `.get.io()`\n(it works with any method: `get/post/put/patch/delete`):\n\n- If you call with `.get.i(...)` (or `.get.io(...)`), you control the input.\n  The method keyword arguments will be passed to the underlying\n  `httpx.Client().get(...)` as-is.\n- If you call with `.get.o(...)` (or `.get.io(...)`), you get the original\n  output. The function will return a `httpx.Response` object. (Note that in\n  this case, we will still have called `.raise_for_status()`)\n\nIf you regularly use `get.io()`, it's probably that PowerNap is probably not\nthe project you need. Use `httpx.Client` directly, build something to help you\ncraft URLs (you can ~~steal~~ copy the relevant code, don't forget to copy the\nlicense too)\n\n## Name\n\nWhile looking for a name for this lib, I looked at all the synonyms for \"small\nrest\". It's amazing how many other projects have gone the same route. To name a\nfew:\n- [`nap`](https://pypi.org/project/nap/) looks awesome! Unrelated lib but same\n  goals as this one. Seems unmaintained but I'm not sure a lib like this needs\n  a lot of maintenance.\n- [`catnap`](https://pypi.org/project/Catnap/)\n- [`respite`](https://pypi.org/project/respite/)\n- `snooze` is not taken but\n  [`snooze-server`](https://pypi.org/project/snooze-server/) is and I didn't\n  want to create confusion.\n\nFunnily enough, a consequent number of those projects have the same goals as\nthis one, yet don't have the exact look and feel I'm trying to achieve.\n\n## Credits where due\n\nThis lib is heavily inspired from githubpy, which is under Apache license.\n\n- [The version that was used for inspiration](https://github.com/michaelliao/githubpy/blob/96d0c3e729c0b3e3c043a604547ccff17782ac2b/github.py)\n- Author: Michael Liao (askxuefeng@gmail.com)\n- [Original license](https://github.com/michaelliao/githubpy/blob/96d0c3e729c0b3e3c043a604547ccff17782ac2b/LICENSE.txt)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ewjoachim/powernap",
    "keywords": "rest,httpx",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "powernap",
    "package_url": "https://pypi.org/project/powernap/",
    "platform": null,
    "project_url": "https://pypi.org/project/powernap/",
    "project_urls": {
      "Homepage": "https://github.com/ewjoachim/powernap",
      "Repository": "https://github.com/ewjoachim/powernap"
    },
    "release_url": "https://pypi.org/project/powernap/1.0.1/",
    "requires_dist": [
      "httpx",
      "typing-extensions (>=4.4.0,<5.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "A small REST client that refills your batteries",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15430174,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13c1f8a5316dec71bbdf9c36d84237a561fc04553b786cd39c1bd4f210a78e72",
          "md5": "93a6a546a8ec9f856b54bfff3395cbc8",
          "sha256": "305273ede20cac8392f82d74762323e0771ed6adbf308f2b72e0b68562ee4d75"
        },
        "downloads": -1,
        "filename": "powernap-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93a6a546a8ec9f856b54bfff3395cbc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5951,
        "upload_time": "2022-10-16T22:02:04",
        "upload_time_iso_8601": "2022-10-16T22:02:04.179559Z",
        "url": "https://files.pythonhosted.org/packages/13/c1/f8a5316dec71bbdf9c36d84237a561fc04553b786cd39c1bd4f210a78e72/powernap-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db3094abfc12cf52fd1c90ada88d70f7be8c9a6716d52ebade13f7c3e762973f",
          "md5": "ca01ce871ab0e8f9ebb241404b53e78f",
          "sha256": "39ae40336077c67e6ceca08852df60a4163d20c5411785e9c402e5e34115d5cb"
        },
        "downloads": -1,
        "filename": "powernap-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ca01ce871ab0e8f9ebb241404b53e78f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6579,
        "upload_time": "2022-10-16T22:02:06",
        "upload_time_iso_8601": "2022-10-16T22:02:06.211801Z",
        "url": "https://files.pythonhosted.org/packages/db/30/94abfc12cf52fd1c90ada88d70f7be8c9a6716d52ebade13f7c3e762973f/powernap-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3672a1d635c10f9345a4b9bc16368a37e34316cacc13c9fe7f454d00771e64a",
          "md5": "353a641fdb7f32dd951e48a33e586f15",
          "sha256": "1357c1c4bcc1ed5dd3279f23b8d8c6d75ebf0e5d9c1e755426bcd7b3ac694aeb"
        },
        "downloads": -1,
        "filename": "powernap-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "353a641fdb7f32dd951e48a33e586f15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 6248,
        "upload_time": "2022-10-16T23:07:23",
        "upload_time_iso_8601": "2022-10-16T23:07:23.601589Z",
        "url": "https://files.pythonhosted.org/packages/f3/67/2a1d635c10f9345a4b9bc16368a37e34316cacc13c9fe7f454d00771e64a/powernap-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ed7323a44664964a42413fb54a85b08c3ed1641f71bb91a2111586159fab012",
          "md5": "ce0d35be953b4cbcdde76756e3ba9421",
          "sha256": "07ce556fe332fcaa14bb22a52942b464a070605925678772b18f253d8241dc2d"
        },
        "downloads": -1,
        "filename": "powernap-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce0d35be953b4cbcdde76756e3ba9421",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6905,
        "upload_time": "2022-10-16T23:07:25",
        "upload_time_iso_8601": "2022-10-16T23:07:25.080023Z",
        "url": "https://files.pythonhosted.org/packages/0e/d7/323a44664964a42413fb54a85b08c3ed1641f71bb91a2111586159fab012/powernap-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3672a1d635c10f9345a4b9bc16368a37e34316cacc13c9fe7f454d00771e64a",
        "md5": "353a641fdb7f32dd951e48a33e586f15",
        "sha256": "1357c1c4bcc1ed5dd3279f23b8d8c6d75ebf0e5d9c1e755426bcd7b3ac694aeb"
      },
      "downloads": -1,
      "filename": "powernap-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "353a641fdb7f32dd951e48a33e586f15",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 6248,
      "upload_time": "2022-10-16T23:07:23",
      "upload_time_iso_8601": "2022-10-16T23:07:23.601589Z",
      "url": "https://files.pythonhosted.org/packages/f3/67/2a1d635c10f9345a4b9bc16368a37e34316cacc13c9fe7f454d00771e64a/powernap-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ed7323a44664964a42413fb54a85b08c3ed1641f71bb91a2111586159fab012",
        "md5": "ce0d35be953b4cbcdde76756e3ba9421",
        "sha256": "07ce556fe332fcaa14bb22a52942b464a070605925678772b18f253d8241dc2d"
      },
      "downloads": -1,
      "filename": "powernap-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ce0d35be953b4cbcdde76756e3ba9421",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 6905,
      "upload_time": "2022-10-16T23:07:25",
      "upload_time_iso_8601": "2022-10-16T23:07:25.080023Z",
      "url": "https://files.pythonhosted.org/packages/0e/d7/323a44664964a42413fb54a85b08c3ed1641f71bb91a2111586159fab012/powernap-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}