{
  "info": {
    "author": "Sonny George",
    "author_email": "<sonnygeorge5@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n<!-- omit in toc -->\n# :moyai: pyalert\n\n\n[![pypi](https://img.shields.io/pypi/v/pyalert.svg)](https://pypi.python.org/pypi/pyalert)\n[![python](https://img.shields.io/pypi/pyversions/pyalert.svg)](https://pypi.python.org/pypi/pyalert)\n[![code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![code coverage](https://codecov.io/gh/sonnygeorge/pyalert/branch/master/graph/badge.svg)](https://codecov.io/gh/sonnygeorge/pyalert)\n[![pre-commit ci](https://results.pre-commit.ci/badge/github/sonnygeorge/pyalert/master.svg)](https://results.pre-commit.ci/badge/github/sonnygeorge/pyalert/master)\n\n\n`pyalert` is a lightweight framework that empowers you to stay on top of what data is flowing through your Python code.\n\n`pyalert` is designed to:\n1. mimic the feeling of writing unit tests\n2. unobtrusively add runtime alerting to your Python code\n\n_______\n\n<!-- omit in toc -->\n## :mag: Table of Contents\n\n- [:gear: How Does It Work?](#gear-how-does-it-work)\n- [:memo: In Summary](#memo-in-summary)\n- [:brain: Further Thinking](#brain-further-thinking)\n- [:construction: Roadmap](#construction-roadmap)\n- [:handshake: Contribution](#handshake-contribution)\n\n\n_______\n\n## :gear: How Does It Work?\n\nSuppose you are building software that involves processing data from a bike race...\n\n```python\nclass Biker:\n    def __init__(self, name: str, age: int, avg_mph: int):\n        self.name = name\n        self.age = age\n        self.avg_mph = avg_mph\n\n\ndef bike_race(bikers: List[Biker]) -> str:\n    \"\"\"A bike race that takes three Bikers and returns a winner announcement\"\"\"\n    winner = max(bikers, key=lambda biker: biker.avg_mph)\n    return f\"{winner.name} wins with an avg mph of {winner.avg_mph}!\"\n```\n\nInstead of cluttering your code with complex catching logic and `log`/`print` statements to indicate when certain occurances arise, `pyalert` facilitates an intuitive segregation of such concerns with a unit-test-like design pattern...\n\nAs is often done with unit tests, let's define a class that contains our alerts...\n\nNote how we use the `@alert_conf` decorator to configure the runtime behavior of each alert method...\n\n```python\nfrom pyalert import PyAlerts, alert_conf\n\n# must inherit from PyAlerts\nclass BikeRaceAlerts(PyAlerts):\n    \"\"\"Alerts for the bike_race function\"\"\"\n\n    # takes=\"input\" configures the alert method to take the input args as its args\n    @alert_conf(takes=\"input\", raise_error=False)\n    def suspiciously_fast_bikers(self, *args, **kwargs):\n        bikers = args[0] if args else kwargs[\"bikers\"]\n        msg = \"Suspicious speeds--implement compulsory drug testing after the race!\"\n        assert not any(b.avg_mph > 30), msg\n\n    # raise_error=True will cause an error to be raised if the assertion fails\n    @alert_conf(takes=\"input\", raise_error=True)\n    def impossibly_fast_bikers(self, *args, **kwargs):\n        bikers = args[0] if args else kwargs[\"bikers\"]\n        msg = \"Stop the race! we need to recalibrate our speedometers!\"\n        assert not any(b.avg_mph > 100 for b in bikers), msg\n\n    # takes=\"output\" configures the alert method to take the return value as its arg\n    @alert_conf(takes=\"output\", raise_error=False)\n    def verbose_winner_announcement(self, return_value):\n        msg = \"The winner announcement came out unusually verbose!\"\n        assert len(return_value) < 120, msg\n```\n\n\nLastly, we'll decorate our original `bike_race` function with the `@pyalert` decorator and pass `BikeRaceAlerts` as the argument:\n\n```python\nfrom pyalert import pyalert\n\n@pyalert(pyalerts=BikeRaceAlerts)\ndef bike_race(bikers: List[Biker]) -> str:\n    ...\n```\n\nAnd voila, `pyalerts` will take care of our alerts at runtime!\n\n_______\n\n## :memo: In Summary\n\n<!-- omit in toc -->\n##### `pyalert` has 3 fundamental abstractions...\n\n```mermaid\n\nflowchart TD\n    pkg(\"üì¶ pyalert\")\n    pa(\"1Ô∏è‚É£\\n@pyalert\\n(decorator)\")\n    PA(\"2Ô∏è‚É£\\nPyAlerts\\n(base class)\")\n    ac(\"3Ô∏è‚É£\\n@alert_conf\\n(decorator)\")\n\n    \n    pkg --- pa\n    pkg --- PA\n    pkg --- ac\n```\n\n<!-- omit in toc -->\n##### They are used as follows:\n\n```mermaid\nflowchart LR\n    pa(\"1Ô∏è‚É£\\n@pyalert\\n(decorator)\\nüì¶\")\n    yPA(\"PyAlerts\\nchild\\nclass\\nüë§\")\n    PA(\"2Ô∏è‚É£\\nPyAlerts\\n(base class)\\nüì¶\")\n    am(\"alert\\nmethods\\nüë§\")\n    yf(\"your\\nfunction\\nüë§\")\n    as(\"assert\\nstatements\\nüêç\")\n    ac(\"3Ô∏è‚É£\\n@alert_conf\\n(decorator)\\nüì¶\")\n\n    pa -. takes a --> yPA\n    pa -. and\\ndecorates --> yf\n    yPA -. and which\\ncontains --> am\n    yPA -. which\\ninherits\\nfrom --> PA\n    am -. that use --> as\n    am -. and are\\nconfigured\\nby --> ac\n```\n\n## :brain: Further Thinking\n\n<!-- omit in toc -->\n#### ====== :thought_balloon: :one: ======\n\n`pyalerts` is designed to enhance your project by:\n\n1. :desktop_computer: - helping drive development with quicker insights\n2. :eye: - helping with the monitoring of data phenomena in production\n\n...all while introducing minimal boilerplate to your source code.\n\n<!-- omit in toc -->\n#### ====== :thought_balloon: :two: ======\n\n`pyalerts` can be used minimally as a mere seperation-of-tasks practice within a single file...\n\n_or_\n\n...since it feels so much like unit testing, why not create an `alerts` folder that mirrors your `src` code folder structure?\n\n```python\n üì¶project\n ‚î£ üìÇsrc\n ‚î£ üìÇtests\n ‚î£ üìÇalerts\n ‚î£ üìúREADME.md\n ‚îó üìúrequirements.txt\n```\n\n<!-- omit in toc -->\n#### ====== :thought_balloon: :three: ======\n\nAre you inheriting a codebase that is already jam-packed with verbosity and complexity?\n\nSince the only boilerplate required to use `pyalerts` is a simple `@pyalert` decorator, you can easily add it to your codebase without worrying about the repurcussions.\n\n## :construction: Roadmap\n\n- [ ] :exclamation: Conceive/implement integration strategy with logging\n- [ ] :exclamation: CI pipeline\n- [ ] :exclamation: Docs\n\n## :handshake: Contribution\n\nIf you think there is open-source merit to this idea, or have any thoughts on how its proposed utility might be nullified by other existing tools, please let me know!\n\n[Here](https://forms.gle/ptfKK3HRqVwGAiWj9) is a single-question form where you can voice your enthusiasm about the idea of pyalert being developed/maintained on a scale of 1-10.\n\nIf you would like contribute and collaborate, please reach out to me on [LinkedIn](https://www.linkedin.com/in/sonny-george/)!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,runtime,alerts",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyalert",
    "package_url": "https://pypi.org/project/pyalert/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyalert/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyalert/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a framework to help you stay on top of what data is flowing through your code.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16911617,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb62f34eb85827e9dc63491bf748d0c0fbcedb55079a9deb46a99f7d36a13f2f",
          "md5": "01e4412ad1aada970ee4e3614e968118",
          "sha256": "9dab7e8253891d5e4399ca2dc69bbee4d881b30bb008cca876bf8ea691b485a2"
        },
        "downloads": -1,
        "filename": "pyalert-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01e4412ad1aada970ee4e3614e968118",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5907,
        "upload_time": "2023-02-18T04:14:52",
        "upload_time_iso_8601": "2023-02-18T04:14:52.183903Z",
        "url": "https://files.pythonhosted.org/packages/cb/62/f34eb85827e9dc63491bf748d0c0fbcedb55079a9deb46a99f7d36a13f2f/pyalert-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01ac9035742d920b73afb06a8e8720aa62c66c0e25c1cfe1d1e4dc71a9a6b48b",
          "md5": "32843274698569d67e4777a2d226d18f",
          "sha256": "bf1cbb17662f59403582502dbd3eff64bb1d186586c98994a094f07f924dc268"
        },
        "downloads": -1,
        "filename": "pyalert-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "32843274698569d67e4777a2d226d18f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5822,
        "upload_time": "2023-02-18T04:14:54",
        "upload_time_iso_8601": "2023-02-18T04:14:54.301949Z",
        "url": "https://files.pythonhosted.org/packages/01/ac/9035742d920b73afb06a8e8720aa62c66c0e25c1cfe1d1e4dc71a9a6b48b/pyalert-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb62f34eb85827e9dc63491bf748d0c0fbcedb55079a9deb46a99f7d36a13f2f",
        "md5": "01e4412ad1aada970ee4e3614e968118",
        "sha256": "9dab7e8253891d5e4399ca2dc69bbee4d881b30bb008cca876bf8ea691b485a2"
      },
      "downloads": -1,
      "filename": "pyalert-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01e4412ad1aada970ee4e3614e968118",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5907,
      "upload_time": "2023-02-18T04:14:52",
      "upload_time_iso_8601": "2023-02-18T04:14:52.183903Z",
      "url": "https://files.pythonhosted.org/packages/cb/62/f34eb85827e9dc63491bf748d0c0fbcedb55079a9deb46a99f7d36a13f2f/pyalert-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01ac9035742d920b73afb06a8e8720aa62c66c0e25c1cfe1d1e4dc71a9a6b48b",
        "md5": "32843274698569d67e4777a2d226d18f",
        "sha256": "bf1cbb17662f59403582502dbd3eff64bb1d186586c98994a094f07f924dc268"
      },
      "downloads": -1,
      "filename": "pyalert-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "32843274698569d67e4777a2d226d18f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5822,
      "upload_time": "2023-02-18T04:14:54",
      "upload_time_iso_8601": "2023-02-18T04:14:54.301949Z",
      "url": "https://files.pythonhosted.org/packages/01/ac/9035742d920b73afb06a8e8720aa62c66c0e25c1cfe1d1e4dc71a9a6b48b/pyalert-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}