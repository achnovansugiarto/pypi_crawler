{
  "info": {
    "author": "Bogdan Opanchuk",
    "author_email": "bg@bk.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "==========================================\nBrain - DDB-like front-end for SQL engines\n==========================================\n\n.. contents::\n\nIntroduction\n------------\n\nDocument databases may prove out to be more convenient than relational ones for programs\nthat operate with a large set of objects with different parameters. With document database\nyou do not need to develop the database scheme, just toss objects with complex structure\nto the database and retreive them by any search criteria. For example, this approach may\nbe useful for music players (store tracks/albums/artists as objects with cross-references\nand references to real files), project management software, bug tracking systems and so on.\n\nThis package is, in effect, a wrapper, which makes the relational database engine look\nlike DDB. Of course, this approach has its drawbacks - noticeable overhead and slow store/retreive\noperations. But it gives fast search, transaction support and all features of chosen relational\nDB engine (like DB server, secure access, replication and other stuff) for free. Plus, all DB engines\nare constantly improving without my attention - isn't it cool?\n\nThis package is in beta state now. You can find all planned tasks in todo.rst (not included in\ndistribution, get it from master branch). I will appreciate any comments and bug reports,\nfrom grammar and spelling errors in documentation to flaws in module architecture.\n\nQuick start\n-----------\n\nThis section will show only the simple usage examples. For exhaustive information please consult\nthe `Reference`_ entries for corresponding functions.\n\nBasic functions\n~~~~~~~~~~~~~~~\n\nFirst, import the module:\n\n >>> import brain\n\nThen we will need to connect to existing database or create the new one.\nIn this example we will use the default DB engine (sqlite3) and in-memory database.\nFirst None stands for so called \"engine tag\" (which identifies DB engine to use),\nand the second one stands for DB name (which is mandatory for sqlite3 engine).\n\n >>> conn = brain.connect(None, None)\n\nNow we can create some objects. Objects are identified by their IDs, which are\nintended to be opaque. The only thing that the end user should know is that they\ncan be stored in database too.\n\n >>> id1 = conn.create({'a': 1, 'b': 1.345})\n >>> id2 = conn.create({'id1': id1, 'list': [1, 2, 'some_value']})\n\nThese objects can be read from database:\n\n >>> data1 = conn.read(id1)\n >>> print(data1)\n {'a': 1, 'b': 1.345}\n >>> data2 = conn.read(id2)\n >>> print(data2)\n {'list': [1, 2, 'some_value'], 'id1': 1}\n\nYou can see that the object ID is, in fact, a simple integer. It is true for sqlite3 engine,\nbut each engine can use its own ID format.\n\nThe next function is `Connection.modify()`_; it allows us to change the contents of the object.\n\n >>> conn.modify(id1, ['a'], 2)\n >>> data1 = conn.read(id1)\n >>> print(data1)\n {'a': 2, 'b': 1.345}\n\nIts first argument is object ID, second one is is the `path`_ to some place inside object and\nthe third one is the value to store (can be either some simple type or data structure). Path\nis a list, whose elements can be strings, integers or Nones. String element corresponds to key\nin dictionary, integer to list index, and None to list mask.\n\nYou may have noticed that the second object contains a list. New elements can be added\nto list in two ways - either using `Connection.modify()`_ with path, specifying list index to create,\nor inserting new element to some place in list:\n\n >>> conn.modify(id2, ['list', 3], 3)\n >>> print(conn.read(id2))\n {'list': [1, 2, 'some_value', 3], 'id1': 1}\n >>> conn.insert(id2, ['list', 0], 4)\n >>> print(conn.read(id2))\n {'list': [4, 1, 2, 'some_value', 3], 'id1': 1}\n >>> conn.insert(id2, ['list', None], 5)\n >>> print(conn.read(id2))\n {'list': [4, 1, 2, 'some_value', 3, 5], 'id1': 1}\n\nFirst action creates the element with index 3 in list; note that it is expanded automatically.\nSecond action inserts the new element to the beginning of the list. Third action inserts\nthe new element to the end of the list.\n\nWe can now search for objects in database. For example, we want to find the object, which\nhas list under 'list' key in dictionary, which, in turn has the first element equal to 4.\n\n >>> import brain.op as op\n >>> objs = conn.search(['list', 0], op.EQ, 4)\n >>> print(objs == [id2])\n True\n\nSearch request supports nested conditions and several types of comparisons (including regexps).\nSee its reference page for more information.\n\nThe last basic function is `Connection.delete()`_. It can delete the whole objects, or its parts\n(dictionary keys or list elements).\n\n >>> print(conn.objectExists(id1))\n True\n >>> conn.delete(id1)\n >>> print(conn.objectExists(id1))\n False\n >>> conn.delete(id2, ['list'])\n >>> print(conn.read(id2))\n {'id1': 1}\n >>> conn.close()\n\nConnection should be closed using `Connection.close()`_ after it is not longer needed. In case of\nin-memory database, of course, all data will be lost after call to `Connection.close()`_.\n\nTransaction support\n~~~~~~~~~~~~~~~~~~~\n\nOne of the main advantages of using the developed SQL engine as a back-end is the\nACID compatibility. As a result, brain front-end has full transaction support too.\n\nIf transaction was not started explicitly, the new one is created and committed for\neach request (create, modify, insert and so on) implicitly. In case of some underlying\nerror, this transaction is rolled back, so the request cannot be completed partially.\n\nThere are two types of transactions - synchronous and asynchronous. During the\nsynchronous transaction you get request results instantly; during the asynchronous one\nrequests do not return any results - all results are returned by `Connection.commit()`_ as a list.\n\nLet's illustrate this by several simple examples. First, connect to database and\ncreate some objects.\n\n >>> import brain\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'a': 1, 'b': 2})\n >>> id2 = conn.create({'c': 3, 'd': 4})\n\nFor each of two `Connection.create()`_'s above transactions were started and committed implicitly\n(because there were not any active transactions at the moment). Now we will create synchronous\ntransaction explicitly:\n\n >>> conn.beginSync()\n >>> conn.modify(id1, ['a'], 10)\n >>> print(conn.read(id1))\n {'a': 10, 'b': 2}\n >>> conn.commit()\n >>> print(conn.read(id1))\n {'a': 10, 'b': 2}\n\nNote that during synchronous transaction modifications become visible instantly. Now\nconsider the similar operation inside a transaction, but this time we will roll it back:\n\n >>> conn.beginSync()\n >>> conn.modify(id1, ['a'], 20)\n >>> print(conn.read(id1))\n {'a': 20, 'b': 2}\n >>> conn.rollback()\n >>> print(conn.read(id1))\n {'a': 10, 'b': 2}\n\nLike in the previous example, modification instantly becomes visible, but after the rollback\nit is gone.\n\nAsynchronous transactions are slightly different. During the transaction requests will not\nreturn values, because they are not, in fact, executed - they are stored inside the connection\nobject and passed to DB engine in one single package when `Connection.commit()`_ is called. If the user\nchanges his mind and calls `Connection.rollback()`_, all this package is simply discarded.\n\n >>> conn.beginAsync()\n >>> conn.modify(id1, ['a'], 0)\n >>> conn.read(id1)\n >>> print(conn.commit())\n [None, {'a': 0, 'b': 2}]\n >>> conn.close()\n\nIn the example above there were two requests inside a transaction; first one, `Connection.modify()`_\ndoes not return anything, and the second one, `Connection.read()`_, returned object contents.\nTherefore `Connection.commit()`_ returned both their results as a list.\n\nXML RPC layer\n~~~~~~~~~~~~~\n\nBrain has embedded XML RPC server and client. First, we will create and start server:\n\n >>> import brain\n >>> srv = brain.Server()\n >>> srv.start()\n\nNow server is active on localhost, port 8000 (by default). It is executed in its own thread,\nso `start()`_ returns immediately. If you enter http://localhost:8000 in your browser, you\nwill get a page with list of functions the server supports.\n\nThen we should create the client - either in this session, in other process or even on\nthe other computer:\n\n >>> cl = brain.Client('http://localhost:8000')\n\nAnd client object gives us the ability to create connections. The format of its ``connect()``\nmethod is the same as for `brain.connect()`_:\n\n >>> conn = cl.connect(None, None)\n\nThis object behaves exactly the same as the `Connection`_ object returned by `brain.connect()`_.\nYou can try all examples from previous sections - they all should work. In the end you\nshould close the connection and stop server:\n\n >>> conn.close()\n >>> srv.stop()\n\nUnlike `start()`_, `stop()`_ waits for server to shut down.\n\nReference\n---------\n\nKnown limitations\n~~~~~~~~~~~~~~~~~\n\nValue limitations:\n * Currently the following Python types are supported: ``None``, ``int``, ``float``, ``str`` and ``bytes``.\n * Integers are limited to 8 bytes (by DB engines) and to 4 bytes by XML RPC protocol.\n\nStructure limitations:\n * Each object can contain arbitrarily combined values, lists and dictionaries.\n * Structure depth is not limited theoretically, but in practice it is - by DB engine.\n * Lists and dictionaries can be empty.\n * Dictionary keys should have string type.\n\n.. _paths:\n\nPath\n~~~~\n\nPath to some value in object is a list, which can contain only strings, integers and Nones.\nEmpty list means the root level of an object; string stands for dictionary key and integer\nstands for position in list. None is used in several special cases: to specify that\n`Connection.insert()`_ should perform insertion at the end of the list or as a mask for\n`Connection.delete()`_ and `Connection.read()`_.\n\nString elements must not contain uppercase symbols. This is done because each field name\ncorrespond to table name in underlying SQL engine, and some engines ignore case in table names.\nSo, in order to avoid later search errors, uppercase symbols in field names are simply not allowed -\n`FormatError`_ is thrown.\n\nIf path does not contain Nones, it is called *determined*.\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'tracks': [{'name': 'track 1', 'length': 240},\n ... {'name': 'track 2', 'length': 300}]})\n >>> print(conn.read(id1, ['tracks', 0, 'name']))\n track 1\n >>> print(conn.readByMask(id1, ['tracks', None, 'length']))\n {'tracks': [{'length': 240}, {'length': 300}]}\n >>> conn.close()\n\n.. _FacadeError:\n\n.. _EngineError:\n\n.. _StructureError:\n\n.. _FormatError:\n\nExceptions\n~~~~~~~~~~\n\nFollowing exceptions can be thrown by API:\n\n ``brain.FacadeError``:\n   Signals about the error in high-level wrappers. Can be caused by incorrect\n   calls to `Connection.begin()`_ \\\\ `Connection.commit()`_ \\\\ `Connection.rollback()`_,\n   incorrect engine tag and so on.\n\n ``brain.EngineError``:\n   Signals about an error in DB engine wrapper.\n\n ``brain.StructureError``:\n   Signals about error in object/database structure - for example, conflicting fields.\n\n ``brain.FormatError``:\n   Wrong format of supplied data: path is not a list, or have elements of wrong type,\n   data has values of wrong type and so on.\n\nEngines\n~~~~~~~\n\nCurrently two engines are supported:\n\n**sqlite3**:\n  SQLite 3 engine, built in Python 3.\n\n  **Arguments**: ``(name, open_existing=None, db_path=None)``\n\n  ``name``:\n    Database file name. If equal to ``None``, in-memory database is created.\n\n  ``open_existing``:\n    Ignored if ``name`` is equal to None.\n\n    If equal to True, existing database file will be opened or `EngineError`_\n    will be raised if it does not exist.\n\n    If equal to False, new database file will be created (in place of the existing one, if\n    necessary)\n\n    If equal to None, existing database will be opened or the new one will be created, if\n    the database file does not exist.\n\n  ``db_path``:\n    If is not None, will be concatenated (using platform-specific path join) with ``name``\n\n**postgre**:\n  Postgre 8 engine. Will be used if `py-postgresql <http://python.projects.postgresql.org>`_\n  is installed.\n\n  **Arguments**: ``(name, open_existing=None, host='localhost', port=5432, user='postgres',\n  password='', connection_limit=-1)``\n\n  ``name``:\n    Database name.\n\n  ``open_existing``:\n    Same logic as for SQLite3 engine\n\n  ``host``:\n    Postgre server name\n\n  ``port``:\n    Postgre server port\n\n  ``user``, ``password``:\n    Credentials for connecting to Postgre server\n\n  ``connection_limit``:\n    Connection limit for newly created database. Unlimited by default.\n\nTests\n~~~~~\n\nThe package is supplied with a set of functionality tests which I use for debugging purposes.\nThey can be found in ``test`` subfolder of module main folder. Tests are executed using ``run.py``,\nwhich has the following parameters:\n\n``run.py <func|fuzz|doc|perf> [options]``\n\n``func``:\n  Functionality tests. They are based on Python's ``unittest`` module, with some minor extensions.\n  Currently they provide almost 100% coverage of package code.\n\n``fuzz``:\n  Several objects with random data are created and random actions (`Connection.modify()`_,\n  `Connection.insert()`_, `Connection.read()`_, `Connection.delete()`_) are performed on them.\n  After each action result is compared to   the result of ``FakeConnection``, which uses Python\n  data structures to emulate package behavior.\n\n``doc``:\n  Test examples in this documentation using Python's ``doctest`` module.\n\n``perf``:\n  Simple non-atomic performance tests (measuring times of ``func`` tests plus combining\n  results of ``fuzz`` tests with several predefined seeds).\n\n**global parameters**:\n  ``-v LEVEL``, ``--verbosity=LEVEL``:\n    Integer from 0 (less verbose) to 3 (more verbose), specifying the amount of information\n    which is displayed during tests. Default is 2.\n\n    For ``doc`` tests verbosity level 3 and above enables ``verbose=True`` mode (which means\n    that all tests will be shown); otherwise only errors will be shown.\n\n``func`` **parameters**:\n  ``--ae``, ``--all-engines``:\n    If specified, all available DB engines will be tested. If not specified, only the default\n    engine (see `getDefaultEngineTag()`_) will be tested.\n\n  ``--ac``, ``--all-connections``:\n    If specified, all available connections will be tested (local, XML RPC and so on). If\n    not specified, only local connection will be tested.\n\n  ``--as``, ``--all-storages``:\n    If specified, all storage types for each engine will be tested (for example, for sqlite3\n    available types are in-memory and file). If not specified, only the default storage for\n    each engine will be tested.\n\n``fuzz`` **parameters**:\n  ``-o NUM``, ``--objects=NUM``:\n    Number of object to be tested simultaneously. Default is 1.\n\n  ``-a NUM``, ``--actions=NUM``\n    Number of actions to be performed for one object. Default is 100.\n\n  ``-s SEED``, ``--seed=SEED``\n    Integer which will be used as starting seed for random number generator. This wil allow\n    to get reproduceable results. By default, random seed is generated.\n\n.. _connect():\n\nbrain.connect()\n~~~~~~~~~~~~~~~\n\nConnect to the database (or create the new one).\n\n**Arguments**: ``connect(engine_tag, *args, remove_conflicts=False, **kwds)``\n\n``engine_tag``:\n  String, specifying the DB engine to use. Can be obtained by `getEngineTags()`_.\n  If equal to ``None``, the default tag is used; its value can be obtained using `getDefaultEngineTag()`_.\n\n``remove_conflicts``:\n  Default value of this parameter for `Connection.modify()`_ and `Connection.insert()`_.\n\n``args``, ``kwds``:\n  Engine-specific parameters. See `Engines`_ section for further information.\n\n**Returns**: `Connection`_ object.\n\n.. _getDefaultEngineTag():\n\nbrain.getDefaultEngineTag()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGet engine tag, which will be used if ``None`` is specified as engine tag in `connect()`_.\n\n**Arguments**: ``getDefaultEngineTag()``\n\n**Returns**: default engine tag.\n\n.. _getEngineTags():\n\nbrain.getEngineTags()\n~~~~~~~~~~~~~~~~~~~~~\n\nGet available engine tags.\n\n**Arguments**: ``getEngineTags()``\n\n**Returns**: list of engine tags.\n\n.. _operators:\n\n.. _op:\n\nbrain.op\n~~~~~~~~\n\nThis submodule contains operator definitions for `Connection.search()`_ request:\n\n* inversion operator ``NOT`` - can be used in all conditions.\n\n* logical operators ``OR`` and ``AND`` - can be used to link simple conditions.\n\n* comparison operators ``EQ`` (equal to), ``REGEXP``, ``LT`` (lower than), ``LTE`` (lower than or equal to),\n  ``GT`` (greater than) and ``GTE`` (greater than or equal to) - can be used in simple conditions.\n\n  * ``EQ`` can be used for all value types.\n\n  * ``REGEXP`` can be used only for strings. It should support POSIX regexps.\n\n  * ``LT``, ``LTE``, ``GT`` and ``GTE`` can be used for integers and floats.\n\n.. _Connection:\n\n.. _RemoteConnection:\n\nConnection, RemoteConnection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese objects represent the connection to the database. They have exactly the same public interface,\nso only Connection methods will be described.\n\nCurrently the following connection methods are available:\n\n * `Connection.begin()`_\n * `Connection.beginAsync()`_\n * `Connection.beginSync()`_\n * `Connection.close()`_\n * `Connection.commit()`_\n * `Connection.create()`_\n * `Connection.delete()`_\n * `Connection.deleteMany()`_\n * `Connection.dump()`_\n * `Connection.getRemoveConflicts()`_\n * `Connection.insert()`_\n * `Connection.insertMany()`_\n * `Connection.modify()`_\n * `Connection.objectExists()`_\n * `Connection.read()`_\n * `Connection.readByMask()`_\n * `Connection.readByMasks()`_\n * `Connection.repair()`_\n * `Connection.rollback()`_\n * `Connection.search()`_\n\nConnection.begin()\n==================\n\nStart database transaction. If transaction is already in progress, `FacadeError`_\nwill be raised.\n\n**Arguments**: ``begin(sync)``\n\n``sync``:\n  Boolean value, specifying whether transaction should be synchronous or not\n  (see `Connection.beginSync()`_ or `Connection.beginAsync()`_ correspondingly for details)\n\n**Example**:\n\n* Start new transaction\n\n >>> conn = brain.connect(None, None)\n >>> conn.begin(sync=True)\n\n* Failed attempt to start transaction when another one is in progress\n\n >>> conn.begin(sync=True)\n Traceback (most recent call last):\n ...\n brain.interface.FacadeError: Transaction is already in progress\n >>> conn.close()\n\nConnection.beginAsync()\n=======================\n\nThis function is an alias for `Connection.begin()`_ (equals to ``begin(sync=False)``)\n\nStart asynchronous transaction. During the asynchronous transaction requests to database\nare not processed, just stored inside the connection. Correspondingly, actual database\ntransaction is not started. When `Connection.commit()`_ is called, database transaction is created,\nand all of requests are being processed at once, and their results are returned from\n`Connection.commit()`_ as a list.\n\nThis decreases the time database is locked by the transaction and increases the speed\nof remote operations (one XML RPC multicall is faster than several single calls).\nBut, of course, this method is less convenient than the synchronous\nor implicit transaction.\n\n**Arguments**: ``beginAsync()``\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'name': 'Bob'})\n >>> conn.beginAsync()\n >>> conn.modify(id1, ['name'], 'Carl')\n >>> print(conn.read(id1))\n None\n >>> print(conn.commit())\n [None, {'name': 'Carl'}]\n >>> conn.close()\n\nConnection.beginSync()\n======================\n\nThis function is an alias for `Connection.begin()`_ (equals to ``begin(sync=True)``)\n\nStart synchronous transaction. During the synchronous transaction request results are available\ninstantly (for the same connection object), so one can perform complex actions inside\none transaction. On the downside, actual database transaction is opened all the time,\nprobably locking the database (depends on the engine). In case of remote connection,\nsynchronous transaction means that there will be several requests/responses performed,\nslowing down transaction processing.\n\n**Arguments**: ``beginSync()``\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'name': 'Bob'})\n >>> conn.beginSync()\n >>> conn.modify(id1, ['name'], 'Carl')\n >>> print(conn.read(id1))\n {'name': 'Carl'}\n >>> conn.commit()\n >>> conn.close()\n\nConnection.close()\n==================\n\nClose connection to the database. All uncommitted changes will be lost.\n\n**Arguments**: ``close()``\n\nConnection.commit()\n===================\n\nCommit current transaction. If transaction is not in progress, `FacadeError`_ will be raised.\n\n**Arguments**: ``commit()``\n\n**Example**:\n\n* Create and commit transaction\n\n >>> conn = brain.connect(None, None)\n >>> conn.beginSync()\n >>> conn.commit()\n\n* Try to commit non-existent transaction\n\n >>> conn.commit()\n Traceback (most recent call last):\n ...\n brain.interface.FacadeError: Transaction is not in progress\n >>> conn.close()\n\nConnection.create()\n===================\n\nCreate new object in database.\n\n**Arguments**: ``create(self, data, path=None)``\n\n``data``:\n  Initial object contents. Can be either a value of allowed type, list or dictionary.\n\n``path``:\n  If defined, specifies the `path`_ where ``data`` will be stored (if equal to ``None``,\n  data is stored in root). Should be determined.\n\n**Returns**: object ID\n\n**Example**:\n\n* Creation without path\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create([1, 2, 3])\n >>> print(conn.read(id1))\n [1, 2, 3]\n\n* Creation with path\n\n >>> id2 = conn.create([1, 2, 3], ['key'])\n >>> print(conn.read(id2))\n {'key': [1, 2, 3]}\n >>> conn.close()\n\n.. _Connection.delete():\n\n.. _Connection.deleteMany():\n\nConnection.delete(), Connection.deleteMany()\n============================================\n\nDelete the whole object or some of its fields. If an element of list is deleted,\nother list elements are shifted correspondingly.\n\n**Arguments**:\n  ``delete(id, path=None)``\n\n  ``deleteMany(id, paths=None)``\n\n**Note**: ``delete(id, path)`` is an alias for ``deleteMany(id, [path])``\n\n``id``:\n  Target object ID.\n\n``paths``:\n  List of `paths`_. If given, is used as the set of masks, specifying fields to delete.\n  If ``None``, the whole object will be deleted.\n\n**Example**:\n\n* Deletion of the whole object\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create([1, 2, 3])\n >>> conn.delete(id1)\n >>> print(conn.objectExists(id1))\n False\n\n* Deletion of specific field\n\n >>> id1 = conn.create([1, 2, 3])\n >>> conn.delete(id1, [1])\n >>> print(conn.read(id1))\n [1, 3]\n\n* Deletion by mask\n\n >>> id1 = conn.create({'tracks': [{'name': 'track 1', 'length': 240},\n ... {'name': 'track 2', 'length': 300}]})\n >>> conn.delete(id1, ['tracks', None, 'length'])\n >>> print(conn.read(id1))\n {'tracks': [{'name': 'track 1'}, {'name': 'track 2'}]}\n >>> conn.close()\n\nConnection.dump()\n=================\n\nGet all database contents.\n\n**Arguments**: ``dump()``\n\n**Returns**: list [object 1 ID, object 1 contents, object 2 ID, object 2 contents, ...]\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create([1, 2, 3])\n >>> id2 = conn.create({'key': 'val'})\n >>> print(conn.dump())\n [1, [1, 2, 3], 2, {'key': 'val'}]\n >>> conn.close()\n\nConnection.getRemoveConflicts()\n===============================\n\nGet current default value of ``remove_conflicts`` keyword (the one which was set\nwhen connection was created, in `connect()`_).\n\n**Arguments**: ``getRemoveConflicts()``\n\n**Returns**: True or False\n\n.. _Connection.insert():\n\n.. _Connection.insertMany():\n\nConnection.insert(), Connection.insertMany()\n============================================\n\nInsert given data to list in object.\n\n**Arguments**:\n  ``insert(id, path, value, remove_conflicts=None)``\n\n  ``insertMany(id, path, values, remove_conflicts=None)``\n\n**Note**: ``insert(id, path, value, remove_conflicts)`` is an alias for\n``insert(id, path, [value], remove_conflicts)``\n\n``id``:\n  Target object ID.\n\n``path``:\n  `Path`_ to insert to. Should point to list element (i.e., end with integer or ``None``) and\n  be determined (except for, probably, the last element). If the last element is ``None``,\n  insertion will be performed to the end of the list.\n\n``value``:\n  Data to insert - should be a supported data structure.\n\n``remove_conflicts``\n  See the description of this parameter for `Connection.modify()`_. ``insert()`` tries to perform\n  ``modify(id, path, [], remove_conflicts)`` before doing any actions.\n\n**Remarks**:\n  * If target object does not have the field, which ``path`` is pointing to, it will be created.\n\n  * If ``path`` points to dictionary key, `FormatError`_ will be raised.\n\n  * If dictionary already exists at the place which ``path`` is pointing to, `StructureError`_\n    will be raised.\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'key': [1, 2, 3]})\n\n* Insertion to the beginning\n\n >>> conn.insert(id1, ['key', 0], 0)\n >>> print(conn.read(id1))\n {'key': [0, 1, 2, 3]}\n\n* Insertion to the end\n\n >>> conn.insert(id1, ['key', None], 4)\n >>> print(conn.read(id1))\n {'key': [0, 1, 2, 3, 4]}\n\n* Autovivification, no conflicts\n\n >>> conn.insert(id1, ['key2', None], 50)\n >>> print(conn.read(id1))\n {'key2': [50], 'key': [0, 1, 2, 3, 4]}\n\n* Autovivification raises error on existing conflicts\n\n >>> conn.insert(id1, ['key2', 'key3', None], 50)\n Traceback (most recent call last):\n ...\n brain.interface.StructureError: Path ['key2', 'key3'] conflicts with existing structure\n\n* Autovivification, remove conflicts\n\n >>> conn.insert(id1, ['key2', 'key3', None], 50, remove_conflicts=True)\n >>> print(conn.read(id1))\n {'key2': {'key3': [50]}, 'key': [0, 1, 2, 3, 4]}\n\n* Insert several values at once\n\n >>> conn.insertMany(id1, ['key2', 'key3', None], [51, 52, 53])\n >>> print(conn.read(id1))\n {'key2': {'key3': [50, 51, 52, 53]}, 'key': [0, 1, 2, 3, 4]}\n\n* Insert data structure\n\n >>> conn.insert(id1, ['key2', 'key3', None], {'subkey': 'val'})\n >>> print(conn.read(id1))\n {'key2': {'key3': [50, 51, 52, 53, {'subkey': 'val'}]}, 'key': [0, 1, 2, 3, 4]}\n\n* Try to pass wrong path to insert()\n\n >>> conn.insert(id1, ['key2', 'key3'], 'val')\n Traceback (most recent call last):\n ...\n brain.interface.FormatError: Last element of target field name should be None or integer\n >>> conn.close()\n\nConnection.modify()\n===================\n\nModify or create field in object.\n\n**Arguments**: ``modify(id, path, value, remove_conflicts=None)``\n\n``id``:\n  Target object ID.\n\n``path``:\n  Path where to store data.\n\n``value``:\n  Data to save at target path.\n\n``remove_conflicts``:\n  Determines the way conflicts of ``path`` with existing data structure are handled. Possible conflicts are:\n\n  * ``path`` points to dictionary, when list already exists on the same level\n\n  * ``path`` points to list, when dictionary already exists on the same level\n\n  * ``path`` points to list or dictionary, when scalar value already exists on the same level\n\n  If ``remove_conflicts`` equals ``True``, all conflicting fields are deleted. In other words,\n  ``modify()`` is guaranteed to finish successfully and the result of ``read(id, path)`` is\n  guaranteed to be equal to ``value``.\n\n  If ``remove_conflicts`` equals ``False``, `StructureError` is raised if conflict is found.\n\n  If ``remove_conflicts`` equals None (default), the value given to `brain.connect()`_ is used.\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'key': 'val'})\n\n* Simple modification\n\n >>> conn.modify(id1, ['key'], 'new_val')\n >>> print(conn.read(id1))\n {'key': 'new_val'}\n\n* Save data structure in place of value\n\n >>> conn.modify(id1, ['key'], [1, 2])\n >>> print(conn.read(id1))\n {'key': [1, 2]}\n\n* Try to autovivify conflicting path without ``remove_conflicts`` set\n\n >>> conn.modify(id1, ['key', 'key2'], 'val')\n Traceback (most recent call last):\n ...\n brain.interface.StructureError: Path ['key', 'key2'] conflicts with existing structure\n\n* Implicitly transform list remove ``[1, 2]`` using ``remove_conflicts``\n\n >>> conn.modify(id1, ['key', 'key2'], 'val', remove_conflicts=True)\n >>> print(conn.read(id1))\n {'key': {'key2': 'val'}}\n >>> conn.close()\n\nConnection.objectExists()\n=========================\n\nCheck if object with given ID exists.\n\n**Arguments**: ``objectExists(id)``\n\n``id``:\n  Object ID.\n\n**Returns**: True if object with given ID exists, False otherwise.\n\n.. _Connection.read():\n\n.. _Connection.readByMask():\n\n.. _Connection.readByMasks():\n\nConnection.read(), Connection.readByMask, Connection.readByMasks()\n==================================================================\n\nRead contents of given object.\n\n**Arguments**:\n  ``read(id, path=None, masks=None)``\n\n  ``readByMask(id, mask=None)``\n\n  ``readByMasks(id, masks=None)``\n\n**Note**: ``readByMask(id, mask)`` is an alias for ``readByMasks(id, [mask])`` and\n``readByMasks(id, masks)``, in turn, is an alias for ``read(id, None, masks)``.\n\n``id``:\n  Target object ID.\n\n``path``:\n  `Path`_ to read from. Read from root by default.\n\n``masks``:\n  List of `paths`_; all results which do not have one of them in the beginning, will be filtered out.\n  Masks are relative to ``path``.\n\n**Returns**: resulting data structure.\n\n**Example**:\n\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'tracks': [{'name': 'track 1', 'length': 240}, {'name': 'track 2', 'length': 300}]})\n\n* Read the whole object\n\n >>> print(conn.read(id1))\n {'tracks': [{'length': 240, 'name': 'track 1'}, {'length': 300, 'name': 'track 2'}]}\n\n* Read from given path\n\n >>> print(conn.read(id1, ['tracks', 0]))\n {'length': 240, 'name': 'track 1'}\n\n* Read by mask\n\n >>> print(conn.readByMask(id1, ['tracks', None, 'length']))\n {'tracks': [{'length': 240}, {'length': 300}]}\n\n* Read from path, filter by mask. Note that mask is relative.\n\n >>> print(conn.read(id1, ['tracks'], [[None, 'length']]))\n [{'length': 240}, {'length': 300}]\n >>> conn.close()\n\nConnection.repair()\n===================\n\nInternal database structure includes some redundant tables, which are used to increase\ndatabase performance. This function can restore them based on actual field data stored in\ndatabase. It can be used when database requests (even `Connection.read()`_) are returning strange\nerrors with long call stack. These internal tables can be spoiled either by errors in logic\nor because of some errors in underlying SQL engine.\n\n**Arguments**: ``repair()``\n\nConnection.rollback()\n=====================\n\nRoll current transaction back. If transaction is not in progress, `FacadeError`_ will be raised.\n\n**Arguments**: ``rollback()``\n\n**Example**:\n\n* Create and rollback transaction\n\n >>> conn = brain.connect(None, None)\n >>> conn.beginSync()\n >>> conn.rollback()\n\n* Try to rollback non-existent transaction\n\n >>> conn.rollback()\n Traceback (most recent call last):\n ...\n brain.interface.FacadeError: Transaction is not in progress\n >>> conn.close()\n\nConnection.search()\n===================\n\nSearch for objects in database which satisfy given conditions.\n\n**Arguments**: ``search(condition)``\n\n``condition``:\n  One of three possibilities:\n\n  * List ``condition``\n\n  * Tuple ``condition``\n\n  * Empty list (only at root level, cannot be a part of condition)\n\n  Simple ``condition`` is a list [``brain.op.NOT``, ] `path`_, comparison_operator, value; complex\n  ``condition`` is a list [``brain.op.NOT``, ] ``condition``, [[logical_operator,\n  [``brain.op.NOT``, ] ``condition``, ] ... ], where each ``condition`` can be either simple or complex.\n\n  On the root level, you may not wrap condition in a list, but rather just pass\n  it as a tuple of arguments to function.\n\n  Logical_operator and comparison_operator - any `operators`_. Value should be a\n  scalar of supported type. Note that different values support different type of\n  comparisons; see `brain.op`_ reference for details.\n\n  If ``condition`` is an empty list, it matches all existing object IDs in database.\n\n  If condition uses path, not existing in some object, condition is considered\n  to be false for this object if it does not contain ``brain.op.NOT`` and true\n  otherwise.\n\n  Compound conditions are evaluated successively: ``[cond1, op1, cond2, op2, cond3]`` is evaluated\n  as ``[[cond1, op1, cond2], op2, cond3]``.\n\n  In compound conditions ``NOT`` applies to the condition next to it:\n  ``[NOT, cond1, op1, cond2, op2, NOT, cond3]`` is evaluated as\n  ``[[[NOT cond1], op1, cond2], op2, [NOT, cond3]]``.\n\n**Returns**: list of object IDs, satisfying given conditions (note that order can\ndepend on DB engine).\n\n**Example**:\n\n >>> import brain.op as op\n >>> conn = brain.connect(None, None)\n >>> id1 = conn.create({'name': 'Alex', 'age': 22})\n >>> id2 = conn.create({'name': 'Bob', 'height': 180, 'age': 25})\n >>> id3 = conn.create({'name': 'Carl', 'height': 170, 'age': 26})\n\n* Empty condition\n\n >>> print(set(conn.search()) == set([id1, id2, id3]))\n True\n\n* Simple condition\n\n >>> print(conn.search(['name'], op.EQ, 'Alex') == [id1])\n True\n\n* Compound condition\n\n >>> print(set(conn.search([['name'], op.EQ, 'Alex'], op.OR,\n ... [['name'], op.EQ, 'Carl'])) == set([id1, id3]))\n True\n\n* Compound condition with negative\n\n >>> print(set(conn.search([['name'], op.EQ, 'Alex'], op.OR,\n ... [op.NOT, ['name'], op.EQ, 'Carl'])) == set([id1, id2]))\n True\n\n* Condition with non-equality\n\n >>> print(conn.search(['age'], op.GT, 25) == [id3])\n True\n\n* Condition with non-existent field\n\n >>> print(conn.search([['name'], op.EQ, 'Alex'], op.AND,\n ... [['height'], op.EQ, 180]) == [])\n True\n\n* Condition with non-existent field and negative\n\n >>> print(conn.search([['name'], op.EQ, 'Alex'], op.AND,\n ... [op.NOT, ['height'], op.EQ, 180]) == [id1])\n True\n\n* Long compound condition\n\n >>> print(conn.search([['name'], op.EQ, 'Alex'], op.OR,\n ... [['age'], op.EQ, 25], op.AND,\n ... [['height'], op.GT, 175]) == [id2])\n True\n >>> conn.close()\n\nCachedConnection\n~~~~~~~~~~~~~~~~\n\nThis class wraps anything with `Connection`_-like interface and adds object caching.\nThe caching algorithm is rather simple, it speeds up only read operations (by keeping\ncopies of objects in memory).\n\n**Warning**: This class can work incorrectly if more than one connection to database is opened.\nFor example, if the second connection changes something in database, the cache will not change\nand, therefore, read operation from the first connection will return the old value.\n\n**Arguments**: ``CachedConnection(conn, size_threshold=0)``\n\n``conn``:\n  Object with `Connection`_ interface.\n\n``size_threshold``:\n  How many objects the cache must keep in memory. If zero, all accessed objects are kept.\n  If non-zero, specifies the number of most recently accessed object kept.\n\nClient\n~~~~~~\n\nXML RPC client for brain DB. Based on Python's built-in ``xmlrpc.client.ServerProxy`` and has the\nfollowing extensions:\n\n* Supports keyword arguments to calls (adds dictionary with keyword argument to each method call)\n\n* Unmarshalls known `exceptions`_ from ``Faults`` returned by server\n\n**Arguments**: ``Client(addr)``\n\n``addr``:\n  Address to connect to.\n\nClient.connect()\n================\n\nConnect to DB or create a new one.\n\n**Arguments**: same as for `brain.connect()`_.\n\n**Returns**: `RemoteConnection`_ object.\n\nClient.getDefaultEngineTag()\n============================\n\nSame as `brain.getDefaultEngineTag()`_.\n\nClient.getEngineTags()\n======================\n\nSame as `brain.getEngineTags()`_.\n\nServer\n~~~~~~\n\nXML RPC server for database. Based on Python's built-in ``xmlrpc.server.DocXMLRPCServer``\nand extends standard XML RPC slightly: it supports keyword arguments to calls.\nThey are passed as the dictionary in additional argument to each function.\nIf function does not have any keyword arguments, empty dictionary is passed.\n\n**Arguments**: ``Server(port=8000, name=None, db_path=None)``\n\n``port``:\n  Port where server will wait for requests.\n\n``name``:\n  Server thread name.\n\n``db_path``:\n  Will be used with DB engines, which store information in files - ``db_path`` will serve as\n  a prefix to each created DB file.\n\n.. _start():\n\nServer.start()\n==============\n\nStart server in a separate thread. Returns instantly.\n\n**Arguments**: ``start()``\n\n.. _stop():\n\nServer.stop()\n=============\n\nShutdown server and wait for its thread to stop.\n\n**Arguments**: ``stop()``",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Manticore/brain",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "brain",
    "package_url": "https://pypi.org/project/brain/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/brain/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/Manticore/brain"
    },
    "release_url": "https://pypi.org/project/brain/0.1.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "DDB front-end for SQL engines",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 721837,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51c18bb683fb0dcbb6a1a267bd61555f2b106bd2d0e6e0e14b2d7ebba53bf4a4",
          "md5": "59e80911237be8a2f4b11c0a537e55df",
          "sha256": "4b3ec7be60d247efdbc20d1956eb9cc25795eaedeee185307b8e40d927893779"
        },
        "downloads": -1,
        "filename": "brain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "59e80911237be8a2f4b11c0a537e55df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 58368,
        "upload_time": "2009-08-23T13:28:22",
        "upload_time_iso_8601": "2009-08-23T13:28:22.112462Z",
        "url": "https://files.pythonhosted.org/packages/51/c1/8bb683fb0dcbb6a1a267bd61555f2b106bd2d0e6e0e14b2d7ebba53bf4a4/brain-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "389b7d659f53aa2d69431b58fceff03f3320acdc686055ca50e392fc9960e653",
          "md5": "d1b8e1d74932a8593ca478eed421ab3b",
          "sha256": "81df35addfcd9a6295e22ea23d495e3888824b0669ec2b90033c8359dad5d82e"
        },
        "downloads": -1,
        "filename": "brain-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1b8e1d74932a8593ca478eed421ab3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70883,
        "upload_time": "2009-08-24T22:28:17",
        "upload_time_iso_8601": "2009-08-24T22:28:17.543612Z",
        "url": "https://files.pythonhosted.org/packages/38/9b/7d659f53aa2d69431b58fceff03f3320acdc686055ca50e392fc9960e653/brain-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b45e28b968770a5b04e9f8d3c7d1ef9749ffa3205d6dee633b5a2c210b6537c",
          "md5": "c8c04fb48acab94c39e09690156e7359",
          "sha256": "7eb406889b4daf1633114dd22813d4f079cd28759590ee135fb04c012f8952c9"
        },
        "downloads": -1,
        "filename": "brain-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c8c04fb48acab94c39e09690156e7359",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 71458,
        "upload_time": "2009-08-28T21:18:37",
        "upload_time_iso_8601": "2009-08-28T21:18:37.754536Z",
        "url": "https://files.pythonhosted.org/packages/7b/45/e28b968770a5b04e9f8d3c7d1ef9749ffa3205d6dee633b5a2c210b6537c/brain-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d45cca4a1dd300eb099f663f4b3de1c78eb78c2cb2c71d1e9f09492f7a3a29fd",
          "md5": "3a8324c9413fc5cf173a06cc10e8472d",
          "sha256": "e168790d1c915233a9979600123bedaea1991e08b7cf1b163da9f94cd0dc6c12"
        },
        "downloads": -1,
        "filename": "brain-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3a8324c9413fc5cf173a06cc10e8472d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74371,
        "upload_time": "2009-09-07T21:34:43",
        "upload_time_iso_8601": "2009-09-07T21:34:43.693659Z",
        "url": "https://files.pythonhosted.org/packages/d4/5c/ca4a1dd300eb099f663f4b3de1c78eb78c2cb2c71d1e9f09492f7a3a29fd/brain-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "197a4867a6cc5083769f45451582c3b8c70c4e88bd03fbe42519630bde4de0b5",
          "md5": "a20a730edc2359ac4b31d316f96ad33a",
          "sha256": "6d08dce4e9fa53601def27032f11aed84b8b5a41256264efa046e097e585cdb8"
        },
        "downloads": -1,
        "filename": "brain-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a20a730edc2359ac4b31d316f96ad33a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87880,
        "upload_time": "2009-11-06T11:11:19",
        "upload_time_iso_8601": "2009-11-06T11:11:19.383854Z",
        "url": "https://files.pythonhosted.org/packages/19/7a/4867a6cc5083769f45451582c3b8c70c4e88bd03fbe42519630bde4de0b5/brain-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "580b115e580fff9d89bf9e28a50028b13bbfa87eefa0efeefb38b97b6923e2f8",
          "md5": "acf10636d8c5de591adc4605778c8f5a",
          "sha256": "56fc40edb7a5dbde87aa31d30eaacbb90febd90e45ef4c911e2e339aa6f825c0"
        },
        "downloads": -1,
        "filename": "brain-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "acf10636d8c5de591adc4605778c8f5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92102,
        "upload_time": "2009-11-06T11:06:36",
        "upload_time_iso_8601": "2009-11-06T11:06:36.209567Z",
        "url": "https://files.pythonhosted.org/packages/58/0b/115e580fff9d89bf9e28a50028b13bbfa87eefa0efeefb38b97b6923e2f8/brain-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0955cf895bd5a04469973ed9e5f166018019ad29d68498c85770fe52afadb096",
          "md5": "0d2aba74f36f19007a192d4569858f29",
          "sha256": "989755a28a8b1382dee5466d7d404a1611cb59a90f7d8b4d64f8c8849c9c53bf"
        },
        "downloads": -1,
        "filename": "brain-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0d2aba74f36f19007a192d4569858f29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 81654,
        "upload_time": "2009-12-01T12:37:46",
        "upload_time_iso_8601": "2009-12-01T12:37:46.360739Z",
        "url": "https://files.pythonhosted.org/packages/09/55/cf895bd5a04469973ed9e5f166018019ad29d68498c85770fe52afadb096/brain-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0955cf895bd5a04469973ed9e5f166018019ad29d68498c85770fe52afadb096",
        "md5": "0d2aba74f36f19007a192d4569858f29",
        "sha256": "989755a28a8b1382dee5466d7d404a1611cb59a90f7d8b4d64f8c8849c9c53bf"
      },
      "downloads": -1,
      "filename": "brain-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "0d2aba74f36f19007a192d4569858f29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 81654,
      "upload_time": "2009-12-01T12:37:46",
      "upload_time_iso_8601": "2009-12-01T12:37:46.360739Z",
      "url": "https://files.pythonhosted.org/packages/09/55/cf895bd5a04469973ed9e5f166018019ad29d68498c85770fe52afadb096/brain-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}