{
  "info": {
    "author": "Sam Berry",
    "author_email": "Sam Berry <sberry@g.harvard.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# bioviper\n\n**Warning**: this code is still under development - while most parts are functional, there are still likely bugs and features that are yet to be implemented. Make a pull request if you have an issue!\n\nA set of classes and functions built on top of Biopython to make working with biological data - primarily sequence alignments, protein structures and phylogenetic trees - simpler and more straightforward.\n\nThe core of this code is a set of three new classes: a MultipleSequenceAlignment class, a SequenceArray class (for unaligned sequences) and a ProteinStructure class.\n\nI am working on a set of Jupyter notebooks that should explain the basic usage of these objects.\n\n## Installation\n\nOn Mac/Linux, I would recommend cloning or downloading this repository and then installing it into a conda environment. You can create a conda environment, let's called it \"evo,\" assuming you have conda installed with:\n\n```\nconda create -n evo pip numpy pandas Biopython\n```\n\nThen navigate to the folder alignment_tools and type:\n\n```\nconda install .\n```\n\nI have no idea how to do this on Windows, but let me know if you install it and how and I can add it here :)\n\n## Basics\n\nTo load an alignment from a file:\n\n```\nmsa = readAlignment(\"alignment.fa\", format=\"fasta\")\n```\n\nMuch like a traditional Biopython MSA, this object is essentially a list of Bio.SeqRecord.SeqRecord objects, but it can do a few nice new things:\n\n```\nmsa.ids                      # gives you all of the ids in the sequence alignment\nmsa.matrix                   # gives you the alignment as a 2D numpy array\nmsa[np.array([3,5,6,9])]     # gives a new MSA with the 3rd, 5th, 6th and 9th sequences\nmsa[:,np.array([3,5,6,9])]   # gives a new MSA with the 3rd, 5th, 6th and 9th columns\nmsa.calc_coverage()          # calculates the alignment coverage and stores it as msa.coverage\nmsa.calc_frequencies()       # calculates the frequency of each amino acid and stores it as msa.frequencies\nmsa.search_id(\"HUMAN\")       # returns all sequences with \"HUMAN\" in the id\nmsa.search_sequence(\"ACYWL\") # searches for sequence record(s) with the following subsequence\nmsa.sequence_lengths()       # returns the length of each sequence in the alignment, not countin gaps\nmsa.dealign()                # gives you all dealigned sequences (gaps removed)\nmsa.save(filename)           # saves to a file\n```\n\nTo load a structure from a file:\n\n```\nstructure = readPDB(\"6bu5.pdb\", name=\"Nramp outward-open\", model=0, chain=\"A\")\n```\n\nThere is no easy-to-use protein structure object in Biopython, so this one has mostly entirely new functionality (while incorporating Biopython\nresidue and atom objects). Simple usage includes:\n\n```\nstructure.sequence              # the full sequence from the PDB file\nstructure.ordered_sequence      # the part of the sequence for which there is structural data (the ordered residues)\nstructure.xyz                   # the xyz coordinates of the structure as a 2D numpy array\nstructure.residues              # a list of all of the residue objects\nstructure.atoms                 # a list of all of the atom objects\nstructure[np.array([3,5,6,9])   # returns a ProteinStructure with only the 34d, 5th, 6th and 9th residues \nstructure.select_atoms(\"CA\")    # returns a ProteinStructure with only the C-alpha atoms\nstructure.distance_matrix()     # calculates (if new) or returns (if already calculated) a distance matrix for the structure\n                                   # by default, does so for only the C-alphas, but can also accept other arguments (see notebooks)\nstructure.contacts(7)           # returns all structural contacts within 7 Ã… (based on the distance matrix)\nstructure.assign_ss()           # assign secondary structures using DSSP (requires DSSP to be installed)\nstructure.save(filename.pdb)    # saves the structure as a pdb file\n```\n\n## Attaching structures to a sequence alignment\n\nOne new feature of this code is that structures and phylogenetic trees can be \"attached\" to a multiple sequence alignment in order to facilitate\nanalysis that integrates the different pieces of information.\n\nA structure can be attached to first sequence of the MSA with ``msa.attach_structure(structure, 0)``. If you don't provide a sequence number, the program will attempt to find a \nmatching sequence using ``msa.search_sequence()`` - this requires that the structure not have any sequence mutations. \nMultiple structures can be attached to the same sequence and can be accessed with ``msa[0].structures``; if a single structure is attached, this will be found at ``msa[0].structures[0]``.\nThe structure's sequence will be automatically aligned to its sequence in the MSA and the corresponding \nMSA positions to each position in the structure can be accessed with ``structure._alipos``, which is used in functions such as ``distance_difference``.\n\n## Attaching phylogenetic trees to a sequence alignment\n\nA phylogenetic tree with terminal ids matching the ids in the sequence alignment can be loaded as follows:\n```\ntree = Phylo.read(\"example_tree.nwk\", \"newick\")\nmsa.attach_tree(tree)\n```\n\nBoth the tree and the MSA's sequence records will now gain new attributes. For each sequence record that corresponded to a branch in the tree, that branch can\nnow be accessed as ``record.branch``. For each branch in the tree, the index of its corresponding sequence is stored in ``terminal_node.nseq``. In order to select a \nportion of the MSA based on a clade in the tree, you can call e.g. ``msa.subset_by_clade(msa.tree.clade[0][0][1])``. \n\nOne note to keep in mind is that if you subset the sequences in the MSA, it will pass along the branch attributes but not automically correct the ``nseq`` values in\nthe tree or prune the tree to contain only the sequences in the new MSA. This can be done, however, by calling ``msa.fix_tree()`` on the new alignment; it is only not\nimplemented by default because for larger alignments this may be relatively slow.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License Copyright (c) 2022 Sam Berry Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bioviper",
    "package_url": "https://pypi.org/project/bioviper/",
    "platform": null,
    "project_url": "https://pypi.org/project/bioviper/",
    "project_urls": {
      "Bug Tracker": "https://github.com/samberry19/bioviper/issues",
      "Homepage": "https://github.com/samberry19/bioviper"
    },
    "release_url": "https://pypi.org/project/bioviper/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Enhancements to Biopython for working with biological data",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14627165,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562c4c70a11bcedbd35a6515b868673ceefec85c02371b09103c32d0d03d3a99",
          "md5": "c61e3ecbd2173b971c4da6038d2b8e87",
          "sha256": "8efe02af761b62c50cf96a49684a1781581059d5a21ee43fc747f2c257aa47dc"
        },
        "downloads": -1,
        "filename": "bioviper-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c61e3ecbd2173b971c4da6038d2b8e87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5059,
        "upload_time": "2022-07-30T16:45:41",
        "upload_time_iso_8601": "2022-07-30T16:45:41.102067Z",
        "url": "https://files.pythonhosted.org/packages/56/2c/4c70a11bcedbd35a6515b868673ceefec85c02371b09103c32d0d03d3a99/bioviper-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03c59713544d0c1b3b9a07eced9db6b18a8f3a3066cd361a51f084739a9f8e97",
          "md5": "37bfabb40669ff9814c90086ab9036bc",
          "sha256": "fe53daa2f3d14ba0ec7046a1dbec8003b28caad82237ef5a164092ef0bcb3fda"
        },
        "downloads": -1,
        "filename": "bioviper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37bfabb40669ff9814c90086ab9036bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4665,
        "upload_time": "2022-07-30T16:45:43",
        "upload_time_iso_8601": "2022-07-30T16:45:43.066727Z",
        "url": "https://files.pythonhosted.org/packages/03/c5/9713544d0c1b3b9a07eced9db6b18a8f3a3066cd361a51f084739a9f8e97/bioviper-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a334c6a52af9af896f889cc94de7a37cae533f1efe0bf480a2993db71b2a03f",
          "md5": "97c54e2eb214b7e25bd6e74797f38b39",
          "sha256": "743c800df5b33b459dbbdb0bbea9c9addc247c62177c5c02b9dbfd96de082702"
        },
        "downloads": -1,
        "filename": "bioviper-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97c54e2eb214b7e25bd6e74797f38b39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20706,
        "upload_time": "2022-08-02T02:33:42",
        "upload_time_iso_8601": "2022-08-02T02:33:42.046501Z",
        "url": "https://files.pythonhosted.org/packages/2a/33/4c6a52af9af896f889cc94de7a37cae533f1efe0bf480a2993db71b2a03f/bioviper-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca2e8da47f474bfc217f98c33997431de85881c6885f8ed0d56c6d2eff8e572",
          "md5": "c94f53f95164fdb237fab8ca0a119c01",
          "sha256": "8938648972283c1862d4d30b01e92971c6a9a80409b0959e3c7aa98d78f2a443"
        },
        "downloads": -1,
        "filename": "bioviper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c94f53f95164fdb237fab8ca0a119c01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21675,
        "upload_time": "2022-08-02T02:33:44",
        "upload_time_iso_8601": "2022-08-02T02:33:44.080034Z",
        "url": "https://files.pythonhosted.org/packages/9c/a2/e8da47f474bfc217f98c33997431de85881c6885f8ed0d56c6d2eff8e572/bioviper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "add825b866b6e2d8d8672e8aa2f2a4159ef39728616ce7b29a5d91d0612c130d",
          "md5": "2ae6c8d63fff24fa6e282d2ef4981b25",
          "sha256": "132ce7981ffb3b2f645a18df5e460517359fdba6b22b3af96a4a4618eee60c70"
        },
        "downloads": -1,
        "filename": "bioviper-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ae6c8d63fff24fa6e282d2ef4981b25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21170,
        "upload_time": "2022-08-02T13:11:51",
        "upload_time_iso_8601": "2022-08-02T13:11:51.575614Z",
        "url": "https://files.pythonhosted.org/packages/ad/d8/25b866b6e2d8d8672e8aa2f2a4159ef39728616ce7b29a5d91d0612c130d/bioviper-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4778de8f9d33821b9198dfbc3ec3c287d4cb070f9c1e38b20ac5fc6e703fe191",
          "md5": "22672579ff6b252710d05053eff12929",
          "sha256": "c9eed87054d0c0a3630f8d30ee5a372a70d58d49aca831b9c632d068909efc15"
        },
        "downloads": -1,
        "filename": "bioviper-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22672579ff6b252710d05053eff12929",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22200,
        "upload_time": "2022-08-02T13:11:53",
        "upload_time_iso_8601": "2022-08-02T13:11:53.249644Z",
        "url": "https://files.pythonhosted.org/packages/47/78/de8f9d33821b9198dfbc3ec3c287d4cb070f9c1e38b20ac5fc6e703fe191/bioviper-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "add825b866b6e2d8d8672e8aa2f2a4159ef39728616ce7b29a5d91d0612c130d",
        "md5": "2ae6c8d63fff24fa6e282d2ef4981b25",
        "sha256": "132ce7981ffb3b2f645a18df5e460517359fdba6b22b3af96a4a4618eee60c70"
      },
      "downloads": -1,
      "filename": "bioviper-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ae6c8d63fff24fa6e282d2ef4981b25",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 21170,
      "upload_time": "2022-08-02T13:11:51",
      "upload_time_iso_8601": "2022-08-02T13:11:51.575614Z",
      "url": "https://files.pythonhosted.org/packages/ad/d8/25b866b6e2d8d8672e8aa2f2a4159ef39728616ce7b29a5d91d0612c130d/bioviper-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4778de8f9d33821b9198dfbc3ec3c287d4cb070f9c1e38b20ac5fc6e703fe191",
        "md5": "22672579ff6b252710d05053eff12929",
        "sha256": "c9eed87054d0c0a3630f8d30ee5a372a70d58d49aca831b9c632d068909efc15"
      },
      "downloads": -1,
      "filename": "bioviper-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "22672579ff6b252710d05053eff12929",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22200,
      "upload_time": "2022-08-02T13:11:53",
      "upload_time_iso_8601": "2022-08-02T13:11:53.249644Z",
      "url": "https://files.pythonhosted.org/packages/47/78/de8f9d33821b9198dfbc3ec3c287d4cb070f9c1e38b20ac5fc6e703fe191/bioviper-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}