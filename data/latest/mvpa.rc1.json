{
  "info": {
    "author": "shobrook",
    "author_email": "shobrookj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mvpa\n\n`mvpa` is a multi-voxel pattern analysis tool for fMRI data. Given a subject's fMRI scans for two conditions (e.g. exposure to two different stimuli), this tool can identify distinct patterns of responses for each condition. It's adapted from the method described in _[Distributed and Overlapping Representations of Faces and Objects in Ventral Temporal Cortex](https://science.sciencemag.org/content/293/5539/2425)_, except searchlight spheres are analyzed instead of anatomical ROIs.\n\n<p align=\"center\">\n  <img src=\"method.png\" />\n</p>\n\nNotably, this tool is less computationally expensive than a SVM-based searchlight.\n\n## Installation\n\n`mvpa` can be installed from PyPi:\n\n```bash\n$ pip install mvpa\n```\n\n## Usage Example\n\n### Load the Haxby dataset\n\n```python\nimport pandas as pd\nfrom nilearn.datasets import fetch_haxby\n\n# We fetch 2nd subject from haxby datasets (which is default)\nhaxby_dataset = fetch_haxby()\n\nfmri_filename = haxby_dataset.func[0]\nlabels = pd.read_csv(haxby_dataset.session_target[0], sep=\" \")\ny, session = labels[\"labels\"], labels[\"chunks\"]\n```\n\n### Restrict to faces and houses\n\n```python\nfrom nilearn.image import index_img\n\nface_mask = y.isin([\"face\"]) # Condition A\nhouse_mask = y.isin([\"house\"]) # Condition B\n\nface_niimg = index_img(fmri_filename, face_mask)\nhouse_niimg = index_img(fmri_filename, house_mask)\n```\n\n### Prepare input data\n\n```python\nfrom nilearn.image import load_img\nfrom mvpa import even_odd_split\n\nface_niimg_even, face_niimg_odd = even_odd_split(face_niimg)\nhouse_niimg_even, house_niimg_odd = even_odd_split(house_niimg)\n\nA = [(face_niimg_even, face_niimg_odd)]\nB = [(house_niimg_even, house_niimg_odd)]\nmask_img = load_img(haxby_dataset.mask)\n```\n\n### Run correlation searchlight\n\n```python\nfrom mvpa import correlation_searchlight, significance_map\n\nscore_maps = correlation_searchlight(A, B, mask_img, radius=3)\n# t_map, p_map = significance_map(score_maps, mask_img) # Only used for datasets\n                                                        # with multiple subjects\n```\n\n`score_maps` is a list of paths to NIfTI files, each representing the significance scores for each voxel in a subject's scan.\n\n### Visualize results\n\n```python\nfrom nilearn.image import mean_img\nfrom nilearn.plotting import plot_stat_map\n\nscore_map = load_img(score_maps[0])\nplot_stat_map(score_map, bg_img=mean_img(fmri_filename), colorbar=True,\n              display_mode=\"z\")\n```\n\n<img src=\"demo.png\" />",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shobrook/mvpa",
    "keywords": "mvpa,fmri,correlation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mvpa",
    "package_url": "https://pypi.org/project/mvpa/",
    "platform": "",
    "project_url": "https://pypi.org/project/mvpa/",
    "project_urls": {
      "Homepage": "https://github.com/shobrook/mvpa"
    },
    "release_url": "https://pypi.org/project/mvpa/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Multi-voxel pattern analysis (MVPA) tool for fMRI data",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9907899,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84ac442b6180f595fcb62b40f897c44e8e2019fe7214b04929d54386624c7d04",
          "md5": "c779362d71ccb79b5962a67d42c095a4",
          "sha256": "41c9df85e3ff8624e7b81ba337ce3c7fe4084245f9bb1ba233abbe91f2632d86"
        },
        "downloads": -1,
        "filename": "mvpa-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c779362d71ccb79b5962a67d42c095a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5755,
        "upload_time": "2021-03-28T22:18:16",
        "upload_time_iso_8601": "2021-03-28T22:18:16.365191Z",
        "url": "https://files.pythonhosted.org/packages/84/ac/442b6180f595fcb62b40f897c44e8e2019fe7214b04929d54386624c7d04/mvpa-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84ac442b6180f595fcb62b40f897c44e8e2019fe7214b04929d54386624c7d04",
        "md5": "c779362d71ccb79b5962a67d42c095a4",
        "sha256": "41c9df85e3ff8624e7b81ba337ce3c7fe4084245f9bb1ba233abbe91f2632d86"
      },
      "downloads": -1,
      "filename": "mvpa-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c779362d71ccb79b5962a67d42c095a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 5755,
      "upload_time": "2021-03-28T22:18:16",
      "upload_time_iso_8601": "2021-03-28T22:18:16.365191Z",
      "url": "https://files.pythonhosted.org/packages/84/ac/442b6180f595fcb62b40f897c44e8e2019fe7214b04929d54386624c7d04/mvpa-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}