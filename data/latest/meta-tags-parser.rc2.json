{
  "info": {
    "author": "Denis Anikin",
    "author_email": "ad@xfenix.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Meta tags parser\n[![Test, lint, publish](https://github.com/xfenix/meta-tags-parser/actions/workflows/main.yml/badge.svg)](https://github.com/xfenix/meta-tags-parser/actions/workflows/main.yml)\n[![PyPI version](https://badge.fury.io/py/meta-tags-parser.svg)](https://badge.fury.io/py/meta-tags-parser)\n[![Downloads](https://pepy.tech/badge/meta-tags-parser)](https://pepy.tech/project/meta-tags-parser)\n[![codecov](https://codecov.io/gh/xfenix/meta-tags-parser/branch/master/graph/badge.svg)](https://codecov.io/gh/xfenix/meta-tags-parser)\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n[![Imports: isort](https://img.shields.io/badge/imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://timothycrosley.github.io/isort/)\n\nFast, modern, pure python meta tags parser and snippet creator with full support of type annotations, py.typed in basic package and structured output. No jelly dicts, only typed structures!  \nIf you want to see what exactly is social media snippets, look at the example:\n![](https://raw.githubusercontent.com/xfenix/meta-tags-parser/master/social-media-snippets.png)\n\n## Requirements\n* Python 3.8+\n* [Httpx](https://www.python-httpx.org/)\n\n## Install\n`pip install meta-tags-parser`\n\n## Usage\n### TL:DR\n1. Parse meta tags from source:\n    ```python\n    from meta_tags_parser import parse_meta_tags_from_source, structs\n\n\n    desired_result: structs.TagsGroup = parse_meta_tags_from_source(\"\"\"... html source ...\"\"\")\n    # desired_result — is what you want\n    ```\n1. Parse meta tags from url:\n    ```python\n    from meta_tags_parser import parse_tags_from_url, parse_tags_from_url_async, structs\n\n\n    desired_result: structs.TagsGroup = parse_tags_from_url(\"https://xfenix.ru\")\n    # and async variant\n    desired_result: structs.TagsGroup = await parse_tags_from_url_async(\"https://xfenix.ru\")\n    # desired_result — is what you want for both cases\n    ```\n1. Parse social media snippet from source:\n    ```python\n    from meta_tags_parser import parse_snippets_from_source, structs\n\n\n    snippet_obj: structs.SnippetGroup = parse_snippets_from_source(\"\"\"... html source ...\"\"\")\n    # snippet_obj — is what you want\n    # access like snippet_obj.open_graph.title, ...\n    ```\n1. Parse social media snippet from url:\n    ```python\n    from meta_tags_parser import parse_snippets_from_url, parse_snippets_from_url_async, structs\n\n\n    snippet_obj: structs.SnippetGroup = parse_snippets_from_url(\"https://xfenix.ru\")\n    # and async variant\n    snippet_obj: structs.SnippetGroup = await parse_snippets_from_url_async(\"https://xfenix.ru\")\n    # snippet_obj — is what you want\n    # access like snippet_obj.open_graph.title, ...\n    ```\n\n**Huge note**: functions `*_from_url` written only for convenience and very error-prone, so any reconnections/error handling — completely on your side.  \nAlso, I don't want to add some bloated requirements to achieve robust connections for any users, because they may simply not await any of this from the library. But if you really need this — write me.\n\n### Basic snippets parsing\nLets say you want extract snippet for twitter from html page:\n```python\nfrom meta_tags_parser import parse_snippets_from_source, structs\n\n\nmy_result: structs.TagsGroup = parse_snippets_from_source(\"\"\"\n    <meta property=\"og:card\" content=\"summary_large_image\">\n    <meta property=\"og:url\" content=\"https://github.com/\">\n    <meta property=\"og:title\" content=\"Hello, my friend\">\n    <meta property=\"og:description\" content=\"Content here, yehehe\">\n    <meta property=\"twitter:card\" content=\"summary_large_image\">\n    <meta property=\"twitter:url\" content=\"https://github.com/\">\n    <meta property=\"twitter:title\" content=\"Hello, my friend\">\n    <meta property=\"twitter:description\" content=\"Content here, yehehe\">\n\"\"\")\n\nprint(my_result)\n# What will be printed:\n\"\"\"\nSnippetGroup(\n    open_graph=SocialMediaSnippet(\n        title='Hello, my friend',\n        description='Content here, yehehe',\n        image='',\n        url='https://github.com/'\n    ),\n    twitter=SocialMediaSnippet(\n        title='Hello, my friend',\n        description='Content here, yehehe',\n        image='',\n        url='https://github.com/'\n    )\n)\n\"\"\"\n# You can access attributes as this\nmy_result.open_graph.title\nmy_result.twitter.image\n# All fields are necessary and will be always available, even if they have not contain data\n# So no need to worry about attributes exsitence (but you may need to check values)\n```\n\n### Basic meta tags parsing\nMain function is `parse_meta_tags_from_source`. It can be used like this:\n```python\nfrom meta_tags_parser import parse_meta_tags_from_source, structs\n\n\nmy_result: structs.TagsGroup = parse_meta_tags_from_source(\"\"\"... html source ...\"\"\")\nprint(my_result)\n\n# What will be printed:\n\"\"\"\nstructs.TagsGroup(\n    title=\"...\",\n    twitter=[\n        structs.OneMetaTag(\n            name=\"title\", value=\"Hello\",\n            ...\n        )\n    ],\n    open_graph=[\n        structs.OneMetaTag(\n            name=\"title\", value=\"Hello\",\n            ...\n        )\n    ],\n    basic=[\n        structs.OneMetaTag(\n            name=\"title\", value=\"Hello\",\n            ...\n        )\n    ],\n    other=[\n        structs.OneMetaTag(\n            name=\"article:name\", value=\"Hello\",\n            ...\n        )\n    ]\n)\n\"\"\"\n```\nAs you can see from this example, we are not using any jelly dicts, only structured dataclasses. Lets see another example:\n\n```python\nfrom meta_tags_parser import parse_meta_tags_from_source, structs\n\n\nmy_result: structs.TagsGroup = parse_meta_tags_from_source(\"\"\"\n    <meta property=\"twitter:card\" content=\"summary_large_image\">\n    <meta property=\"twitter:url\" content=\"https://github.com/\">\n    <meta property=\"twitter:title\" content=\"Hello, my friend\">\n    <meta property=\"twitter:description\" content=\"Content here, yehehe\">\n\"\"\")\n\nprint(my_result)\n# What will be printed:\n\"\"\"\nTagsGroup(\n    title='',\n    basic=[],\n    open_graph=[],\n    twitter=[\n        OneMetaTag(name='card', value='summary_large_image'),\n        OneMetaTag(name='url', value='https://github.com/'),\n        OneMetaTag(name='title', value='Hello, my friend'),\n        OneMetaTag(name='description', value='Content here, yehehe')\n    ],\n    other=[]\n)\n\"\"\"\n\nfor one_tag in my_result.twitter:\n    if one_tag.name == \"title\":\n        print(one_tag.value)\n# What will be printed:\n\"\"\"\nHello, my friend\n\"\"\"\n```\n\n### If you want to improve speed\nYou can specify what you want to parse:\n```python\nfrom meta_tags_parser import parse_meta_tags_from_source, structs\n\n\nresult: structs.TagsGroup = parse_meta_tags_from_source(\"\"\"... source ...\"\"\",\n    what_to_parse=(WhatToParse.TITLE, WhatToParse.BASIC, WhatToParse.OPEN_GRAPH, WhatToParse.TWITTER, WhatToParse.OTHER)\n)\n```\nIf you reduce this tuple of parsing requirements it may increase overall parsing speed.\n\n## Important notes\n* Any name in meta tag (name or property attribute) will be lowercased\n* I decided to strip `og:` and `twitter:` from original attributes, and let dataclass structures carry this information. If parser met meta tag with property `og:name`, it will be available in `my_result` variable as one element of list `my_result.open_graph`\n* Title of page (e.g. `<title>Something</title>`) will be available as string `my_result.title` (of course, you recieve `Something`)\n* «Standart» tags like title, description (check full list here [./meta_tags_parser/structs.py](./meta_tags_parser/structs.py) in constant `BASIC_META_TAGS`) will be available as list in `my_result.basic`\n* Other tags will be available as list in `my_result.other` attribute, name of tags will be preserved, unlike `og:`/`twitter:` behaviour\n* If you want structured snippets, use `parse_snippets_from_source` function\n\n\n# Changelog\nYou can check https://github.com/xfenix/meta-tags-parser/releases/ release page.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xfenix/meta-tags-parser/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meta-tags-parser",
    "package_url": "https://pypi.org/project/meta-tags-parser/",
    "platform": null,
    "project_url": "https://pypi.org/project/meta-tags-parser/",
    "project_urls": {
      "Documentation": "https://github.com/xfenix/meta-tags-parser",
      "Homepage": "https://github.com/xfenix/meta-tags-parser/"
    },
    "release_url": "https://pypi.org/project/meta-tags-parser/1.2.1/",
    "requires_dist": [
      "httpx"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Fast and modern meta tags parser (og, twitter, title, description, etc) with snippet support",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14659031,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "458ea6fbf7ca69881c659600b8f5f7bbcc68ed09d2580832088389944bbd243c",
          "md5": "127e8c52b979b6a5350b4a39fd168888",
          "sha256": "48c470d67ea80e900841978925394cc787dcd64f6d25ba1801a709bc3da29a9b"
        },
        "downloads": -1,
        "filename": "meta_tags_parser-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "127e8c52b979b6a5350b4a39fd168888",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9141,
        "upload_time": "2022-01-29T00:16:56",
        "upload_time_iso_8601": "2022-01-29T00:16:56.569294Z",
        "url": "https://files.pythonhosted.org/packages/45/8e/a6fbf7ca69881c659600b8f5f7bbcc68ed09d2580832088389944bbd243c/meta_tags_parser-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1953c09efb1c5d6d85e5719e0b41540db3923db3353d7b2f5739a3adc75676bf",
          "md5": "86ea21dba165cd52a04209fc41cf9adc",
          "sha256": "fa41ed212dad1bf4faa4be50366c3733db0b0f7e4626a7c8b40d09530879bf4d"
        },
        "downloads": -1,
        "filename": "meta-tags-parser-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "86ea21dba165cd52a04209fc41cf9adc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 9974,
        "upload_time": "2022-01-29T00:16:54",
        "upload_time_iso_8601": "2022-01-29T00:16:54.903753Z",
        "url": "https://files.pythonhosted.org/packages/19/53/c09efb1c5d6d85e5719e0b41540db3923db3353d7b2f5739a3adc75676bf/meta-tags-parser-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b45d85b09225405c54a1c25e38dbe65afba1cc8621c0297d3fa2ae8df64efd",
          "md5": "bd6c8f0b287db84c346021bbcb8adbb0",
          "sha256": "c8d09e941b91b1796f4a8d830b878f7b7dd3b6132cca4a79a241bfc13c052d28"
        },
        "downloads": -1,
        "filename": "meta_tags_parser-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd6c8f0b287db84c346021bbcb8adbb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 9152,
        "upload_time": "2022-08-04T22:47:18",
        "upload_time_iso_8601": "2022-08-04T22:47:18.461466Z",
        "url": "https://files.pythonhosted.org/packages/05/b4/5d85b09225405c54a1c25e38dbe65afba1cc8621c0297d3fa2ae8df64efd/meta_tags_parser-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac31775c35e1955bdf37a29bcc32136d2c2c97decf4125072642b7d093892d09",
          "md5": "fe82dbb1e43ceb07a54a8e1bf6d7795d",
          "sha256": "f5f24ad5c386aad192fa056aec5cb2a307fedb3b636e38edadd797c8451db769"
        },
        "downloads": -1,
        "filename": "meta-tags-parser-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe82dbb1e43ceb07a54a8e1bf6d7795d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10006,
        "upload_time": "2022-08-04T22:47:16",
        "upload_time_iso_8601": "2022-08-04T22:47:16.345048Z",
        "url": "https://files.pythonhosted.org/packages/ac/31/775c35e1955bdf37a29bcc32136d2c2c97decf4125072642b7d093892d09/meta-tags-parser-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05b45d85b09225405c54a1c25e38dbe65afba1cc8621c0297d3fa2ae8df64efd",
        "md5": "bd6c8f0b287db84c346021bbcb8adbb0",
        "sha256": "c8d09e941b91b1796f4a8d830b878f7b7dd3b6132cca4a79a241bfc13c052d28"
      },
      "downloads": -1,
      "filename": "meta_tags_parser-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd6c8f0b287db84c346021bbcb8adbb0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 9152,
      "upload_time": "2022-08-04T22:47:18",
      "upload_time_iso_8601": "2022-08-04T22:47:18.461466Z",
      "url": "https://files.pythonhosted.org/packages/05/b4/5d85b09225405c54a1c25e38dbe65afba1cc8621c0297d3fa2ae8df64efd/meta_tags_parser-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac31775c35e1955bdf37a29bcc32136d2c2c97decf4125072642b7d093892d09",
        "md5": "fe82dbb1e43ceb07a54a8e1bf6d7795d",
        "sha256": "f5f24ad5c386aad192fa056aec5cb2a307fedb3b636e38edadd797c8451db769"
      },
      "downloads": -1,
      "filename": "meta-tags-parser-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fe82dbb1e43ceb07a54a8e1bf6d7795d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 10006,
      "upload_time": "2022-08-04T22:47:16",
      "upload_time_iso_8601": "2022-08-04T22:47:16.345048Z",
      "url": "https://files.pythonhosted.org/packages/ac/31/775c35e1955bdf37a29bcc32136d2c2c97decf4125072642b7d093892d09/meta-tags-parser-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}