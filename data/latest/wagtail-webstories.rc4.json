{
  "info": {
    "author": "Matt Westcott",
    "author_email": "matthew@torchbox.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Wagtail :: 2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# wagtail-webstories\n\nThis package adds support for [AMP web stories](https://amp.dev/about/stories/) to Wagtail. Stories created elsewhere can be linked or embedded from their original URL locations, or imported as Wagtail pages, including optionally importing images and videos into the Wagtail media library.\n\n`wagtail-webstories` is compatible with Wagtail 2.5 and above.\n\n## Installation\n\nInstall with pip:\n\n```bash\npip install wagtail-webstories\n```\n\nAdd to INSTALLED_APPS:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    'wagtail_webstories',\n    # ...\n]\n```\n\nRun migrations:\n\n```bash\n./manage.py migrate\n```\n\n## Embedding and linking external stories\n\nTo embed a web story into a regular (non-AMP) StreamField-based page, include the `wagtail_webstories.blocks.ExternalStoryEmbedBlock` block type in your StreamField definition:\n\n```python\nfrom wagtail_webstories.blocks import StoryEmbedBlock\n\nclass BlogPage(Page):\n    body = StreamField([\n        ('heading', blocks.CharBlock()),\n        ('paragraph', blocks.RichTextBlock()),\n        ('story_embed', ExternalStoryEmbedBlock()),\n    ])\n```\n\nThis block allows the page author to provide the URL to an AMP web story, which will render on the front-end template (when using `{% include_block %}`) as an `<amp-story-player>` element; your template should include [the necessary scripts for rendering this](https://amp.dev/documentation/guides-and-tutorials/integrate/embed-stories/?format=stories#embed-amp-story-player), along with a CSS rule to specify appropriate dimensions:\n\n```html\n    <script async src=\"https://cdn.ampproject.org/amp-story-player-v0.js\"></script>\n    <link href=\"https://cdn.ampproject.org/amp-story-player-v0.css\" rel=\"stylesheet\" type=\"text/css\">\n    <style>\n        amp-story-player { width: 360px; height: 600px; }\n    </style>\n```\n\nTo include a link to a story rather than embedding it, `wagtail_webstories.blocks.ExternalStoryBlock` can be used in place of `ExternalStoryEmbedBlock`. The default template `wagtail_webstories/blocks/external_story_poster_link.html` outputs a 'card' rendering of the story using the story's poster image, to be used with the following CSS:\n\n```css\n    .webstory-poster {\n        display: block; width: 300px; height: 400px; border-radius: 15px; background-size: cover; position: relative;\n    }\n    .webstory-poster .webstory-info {\n        position: absolute; bottom: 0; width: 100%; background-color: #ccc; color: black; border-bottom-left-radius: 15px; border-bottom-right-radius: 15px;\n    }\n    .webstory-poster .title {\n        font-size: 1.5em; padding: 10px;\n    }\n    .webstory-poster .publisher {\n        padding: 0 10px 20px 10px;\n    }\n    .webstory-poster .publisher img {\n        vertical-align: middle;\n    }\n```\n\n## Embedding and linking external stories without StreamField\n\nExternal stories are handled through the model `wagtail_webstories.models.ExternalStory`. To obtain an ExternalStory instance for a given URL, use: `ExternalStory.get_for_url(story_url)`. The story's metadata is cached within the ExternalStory model to avoid having to re-fetch the story on every request - the available metadata fields are `url`, `title`, `publisher`, `publisher_logo_src`, `poster_portrait_src`, `poster_square_src` and `poster_landscape_src`.\n\nThe StreamField block templates `wagtail_webstories/blocks/external_story_embed_block.html` and `wagtail_webstories/blocks/external_story_poster_link.html` can be used to render an ExternalStory object, by passing it as the variable `story`:\n\n```python\n# models.py\nclass BlogPostWithStoryPage(Page):\n    story_url = model.URLField(max_length=2048)\n\n    def get_context(self, request):\n        context = super().get_context(request)\n        context['story_obj'] = ExternalStory.get_for_url(self.story_url)\n        return context\n```\n\n```html+django\n{# blog_post_with_story_page.html #}\n\n{% include \"wagtail_webstories/blocks/external_story_embed_block.html\" with story=story_obj %}\n```\n\n\n## Importing\n\nTo allow stories to be imported as Wagtail pages, define a model that extends `wagtail_webstories.models.BaseWebStoryPage`:\n\n```python\nfrom wagtail_webstories.models import BaseWebStoryPage\n\nclass StoryPage(BaseWebStoryPage):\n    pass\n```\n\nAlternatively, if your project has an existing base page class that all page types must inherit from (which would prevent the use of BaseWebStoryPage in addition to that base class), extend `wagtail_webstories.models.WebStoryPageMixin` and define `content_panels` and `promote_panels` to incorporate its panel definitions:\n\n```python\nfrom wagtail_webstories.models import WebStoryPageMixin\n\nclass StoryPage(WebStoryPageMixin, BasePage):\n    content_panels = BasePage.content_panels + WebStoryPageMixin.web_story_content_panels\n    promote_panels = BasePage.promote_panels + WebStoryPageMixin.web_story_promote_panels\n```\n\nNow create a corresponding template that extends `wagtail_webstories/base_web_story_page.html`:\n\n```html+django\n{% extends \"wagtail_webstories/base_web_story_page.html\" %}\n```\n\nDefine a setting `WAGTAIL_WEBSTORIES_IMPORT_MODEL` pointing to the page model to use:\n\n```python\nWAGTAIL_WEBSTORIES_IMPORT_MODEL = 'myapp.StoryPage'\n```\n\nThis will now add a \"Web stories\" item to the Wagtail admin menu, allowing you to import stories by URL.\n\n\n## HTML cleaning\n\nBy default, all HTML elements and attributes not permitted by the AMP web story specification will be stripped out on importing and saving. To disable this, set `WAGTAIL_WEBSTORIES_CLEAN_HTML` to False:\n\n```python\nWAGTAIL_WEBSTORIES_CLEAN_HTML = False\n```\n\n\n## Image importing\n\nBy default, image references within imported stories are left at their original URLs. BaseWebStoryPage provides a method `import_images()` to fetch all referenced images and import them into the Wagtail image library, de-duplicating if they already exist. It is recommended that you call this from a `post_save` signal handler:\n\n```python\n# myapp/signals.py\n\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\nfrom .models import StoryPage\n\n\n@receiver(post_save, sender=StoryPage)\ndef import_story_images(sender, instance, **kwargs):\n    changed = instance.import_images()\n    if changed:\n        instance.save()\n\n\n# myapp/apps.py\n\nfrom django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'\n\n    def ready(self):\n        import myapp.signals  # noqa\n\n\n# myapp/__init__.py\n\ndefault_app_config = 'myapp.apps.MyappConfig'\n```\n\nSince importing images can be a time-consuming process, you may wish to offload the call to `import_images` to a background task using Celery or similar, to avoid this blocking a web server thread.\n\nTo customise the creation of new images (e.g. to assign imported images to a particular collection, or to populate additional metadata fields on a custom image model), override the story page model's `_create_image` method:\n\n```python\nclass StoryPage(BaseWebStoryPage):\n\n    def _create_image(self, file, title=None):\n        image = super()._create_image(file, title=title)\n        image.copyright = \"All rights reserved\"\n        return image\n```\n\n## Video importing\n\nIf you have [wagtailmedia](https://pypi.org/project/wagtailmedia/) installed, you can similarly import videos into the local media library by calling `import_videos()`. The signal handler above then becomes:\n\n```python\n# myapp/signals.py\n\n@receiver(post_save, sender=StoryPage)\ndef import_story_images(sender, instance, **kwargs):\n    images_changed = instance.import_images()\n    videos_changed = instance.import_videos()\n    if images_changed or videos_changed:\n        instance.save()\n```\n\n## Linking and embedding imported stories\n\nTo embed or link an imported web story into a regular (non-AMP) StreamField-based page, include the `wagtail_webstories.blocks.StoryEmbedBlock` or `wagtail_webstories.blocks.StoryChooserBlock` block type in your StreamField definition. These work similarly to ExternalStoryEmbedBlock and ExternalStoryBlock, but provide the page author with a page chooser interface rather than a URL field.\n\n```python\nfrom wagtail_webstories.blocks import StoryEmbedBlock\n\nclass BlogPage(Page):\n    body = StreamField([\n        ('heading', blocks.CharBlock()),\n        ('paragraph', blocks.RichTextBlock()),\n        ('local_story_embed', StoryEmbedBlock(target_model=StoryPage)),\n    ])\n```\n\nThe `target_model` argument is optional - by default, any page type inheriting from BaseWebStoryPage can be chosen. As with ExternalStoryEmbedBlock and ExternalStoryBlock, your page template must contain the appropriate JavaScript or CSS include for rendering the block.\n\nThe templates `wagtail_webstories/blocks/story_poster_link.html` and `wagtail_webstories/blocks/story_embed_block.html` expect a single variable `page` containing the story page instance, so these can also be used outside of StreamField:\n\n```python\n# models.py\nclass StoryIndexPage(Page):\n    def get_context(self, request):\n        context = super().get_context(request)\n        context['stories'] = StoryPage.objects.child_of(self).live().order_by('-first_published_at')\n        return context\n```\n\n```html+django\n{# story_index_page.html #}\n{% for story in stories %}\n    {% include \"wagtail_webstories/blocks/story_poster_link.html\" with page=story %}\n{% endfor %}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/torchbox/wagtail-webstories/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wagtail-webstories",
    "package_url": "https://pypi.org/project/wagtail-webstories/",
    "platform": "",
    "project_url": "https://pypi.org/project/wagtail-webstories/",
    "project_urls": {
      "Homepage": "https://github.com/torchbox/wagtail-webstories/"
    },
    "release_url": "https://pypi.org/project/wagtail-webstories/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "AMP web story support for Wagtail",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13036860,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0438419460411b2514805b22e9c13e74a63047c851ced8f75a86ec5d50effe1",
          "md5": "0456e32df1a74d1a48063bc9ed9c65d1",
          "sha256": "2cea7929908825fb8db2682d9f23dba12f553743a98467d4057afa29d19e4917"
        },
        "downloads": -1,
        "filename": "wagtail-webstories-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0456e32df1a74d1a48063bc9ed9c65d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11449,
        "upload_time": "2020-12-07T23:41:55",
        "upload_time_iso_8601": "2020-12-07T23:41:55.114845Z",
        "url": "https://files.pythonhosted.org/packages/d0/43/8419460411b2514805b22e9c13e74a63047c851ced8f75a86ec5d50effe1/wagtail-webstories-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce6ea79aa8445abac60c785a23d7ebd80c4ecca2cc2adfbc1057b8f3ad757d32",
          "md5": "b7fb41b416e518c8fd10d8b07f2d3223",
          "sha256": "16e11f3386f2929fa636c8fddac12892ffdb0ad9c9ef5c5ca209a6e313a2d379"
        },
        "downloads": -1,
        "filename": "wagtail-webstories-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b7fb41b416e518c8fd10d8b07f2d3223",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11615,
        "upload_time": "2021-03-02T18:18:51",
        "upload_time_iso_8601": "2021-03-02T18:18:51.774283Z",
        "url": "https://files.pythonhosted.org/packages/ce/6e/a79aa8445abac60c785a23d7ebd80c4ecca2cc2adfbc1057b8f3ad757d32/wagtail-webstories-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9196336d91c348de1f287534a6fc9a93fb5a838598631b006fe394c1c10d5e11",
          "md5": "fb6581ac13c0480be1a12ac7c1875664",
          "sha256": "a98564bb59070a2a5d10c4c05cac39f573249d25cb6a7fa42f4be8653f3df1d6"
        },
        "downloads": -1,
        "filename": "wagtail-webstories-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fb6581ac13c0480be1a12ac7c1875664",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13584,
        "upload_time": "2021-03-11T18:51:02",
        "upload_time_iso_8601": "2021-03-11T18:51:02.871878Z",
        "url": "https://files.pythonhosted.org/packages/91/96/336d91c348de1f287534a6fc9a93fb5a838598631b006fe394c1c10d5e11/wagtail-webstories-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bedf0de8f79462118b4dc519ea1d63397252dec3cb839e483edda2db93a8669",
          "md5": "715f23e0bf5f5ed654161b7eade975ec",
          "sha256": "4f1e8305d2c84d1dc71261060023bf679ba167e1bcf70679974d95022952905f"
        },
        "downloads": -1,
        "filename": "wagtail-webstories-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "715f23e0bf5f5ed654161b7eade975ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15171,
        "upload_time": "2021-05-27T11:24:16",
        "upload_time_iso_8601": "2021-05-27T11:24:16.743153Z",
        "url": "https://files.pythonhosted.org/packages/3b/ed/f0de8f79462118b4dc519ea1d63397252dec3cb839e483edda2db93a8669/wagtail-webstories-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bedf0de8f79462118b4dc519ea1d63397252dec3cb839e483edda2db93a8669",
        "md5": "715f23e0bf5f5ed654161b7eade975ec",
        "sha256": "4f1e8305d2c84d1dc71261060023bf679ba167e1bcf70679974d95022952905f"
      },
      "downloads": -1,
      "filename": "wagtail-webstories-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "715f23e0bf5f5ed654161b7eade975ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15171,
      "upload_time": "2021-05-27T11:24:16",
      "upload_time_iso_8601": "2021-05-27T11:24:16.743153Z",
      "url": "https://files.pythonhosted.org/packages/3b/ed/f0de8f79462118b4dc519ea1d63397252dec3cb839e483edda2db93a8669/wagtail-webstories-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}