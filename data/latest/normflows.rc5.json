{
  "info": {
    "author": "Vincent Stimper",
    "author_email": "vincent.stimper@tuebingen.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `normflows`: A PyTorch Package for Normalizing Flows\n\n[![documentation](https://github.com/VincentStimper/normalizing-flows/actions/workflows/mkdocs.yaml/badge.svg)](https://vincentstimper.github.io/normalizing-flows/)\n![unit-tests](https://github.com/VincentStimper/normalizing-flows/actions/workflows/pytest.yaml/badge.svg)\n![code coverage](https://raw.githubusercontent.com/VincentStimper/normalizing-flows/coverage-badge/coverage.svg?raw=true)\n[![License: MIT](https://img.shields.io/badge/Licence-MIT-lightgrey)](https://opensource.org/licenses/MIT)\n[![arXiv](https://img.shields.io/badge/arXiv-2302.12014-b31b1b.svg)](https://arxiv.org/abs/2302.12014) \n[![PyPI](https://img.shields.io/badge/PyPI-1.6.1-blue.svg)](https://pypi.org/project/normflows/)\n[![Downloads](https://static.pepy.tech/personalized-badge/normflows?period=total&units=international_system&left_color=grey&right_color=orange&left_text=Downloads)](https://pepy.tech/project/normflows)\n\n\n`normflows` is a PyTorch implementation of discrete normalizing flows. Many popular flow architectures are implemented,\nsee the [list below](#implemented-flows). The package can be easily [installed via pip](#installation).\nThe basic usage is described [here](#usage), and a [full documentation](https://vincentstimper.github.io/normalizing-flows/) \nis available as well. A more detailed description of this package is given in out accompanying \n[paper](https://arxiv.org/abs/2302.12014).\n\nSeveral sample use cases are provided in the \n[`examples` folder](https://github.com/VincentStimper/normalizing-flows/blob/master/examples), \nincluding [Glow](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/glow.ipynb),\na [VAE](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/vae.py), and\na [Residual Flow](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/residual.ipynb).\nMoreover, two simple applications are highlighed in the [examples section](#examples). You can run them \nyourself in Google Colab using the links below to get a feeling for `normflows`.\n\n| Link                                                                                                                                                                                                                                         | Description                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|\n| <a href=\"https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/real_nvp_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a> | Real NVP applied to a 2D bimodal target distribution                          |\n| <a href=\"https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/paper_example_nsf_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a> | Modeling a distribution on a cylinder surface with a neural spline flow |\n\n\n## Implemented Flows\n\n| Architecture | Reference                                                                                                                 |\n|--------------|---------------------------------------------------------------------------------------------------------------------------|\n| Planar Flow  | [Rezende & Mohamed, 2015](http://proceedings.mlr.press/v37/rezende15.html)                                                |\n| Radial Flow  | [Rezende & Mohamed, 2015](http://proceedings.mlr.press/v37/rezende15.html)                                                |\n| NICE         | [Dinh et al., 2014](https://arxiv.org/abs/1410.8516)                                                                      |\n| Real NVP     | [Dinh et al., 2017](https://openreview.net/forum?id=HkpbnH9lx)                                                            |\n| Glow         | [Kingma et al., 2018](https://proceedings.neurips.cc/paper/2018/hash/d139db6a236200b21cc7f752979132d0-Abstract.html)                                                                   |\n| Masked Autoregressive Flow | [Papamakarios et al., 2017](https://proceedings.neurips.cc/paper/2017/hash/6c1da886822c67822bcf3679d04369fa-Abstract.html) |\n| Neural Spline Flow | [Durkan et al., 2019](https://proceedings.neurips.cc/paper/2019/hash/7ac71d433f282034e088473244df8c02-Abstract.html)                                                                    |\n| Circular Neural Spline Flow | [Rezende et al., 2020](http://proceedings.mlr.press/v119/rezende20a.html)                                                 |\n| Residual Flow | [Chen et al., 2019](https://proceedings.neurips.cc/paper/2019/hash/5d0d5594d24f0f955548f0fc0ff83d10-Abstract.html)                                                                     |\n| Stochastic Normalizing Flow | [Wu et al., 2020](https://proceedings.neurips.cc/paper/2020/hash/41d80bfc327ef980528426fc810a6d7a-Abstract.html)                                                                       |\n\nNote that Neural Spline Flows with circular and non-circular coordinates\nare supported as well.\n\n## Installation\n\nThe latest version of the package can be installed via pip\n\n```\npip install normflows\n```\n\nAt least Python 3.7 is required. If you want to use a GPU, make sure that\nPyTorch is set up correctly by following the instructions at the\n[PyTorch website](https://pytorch.org/get-started/locally/).\n\nTo run the example notebooks clone the repository first\n\n```\ngit clone https://github.com/VincentStimper/normalizing-flows.git\n```\n\nand then install the dependencies.\n\n```\npip install -r requirements_examples.txt\n```\n\n## Usage\n\nA normalizing flow consists of a base distribution, defined in \n[`nf.distributions.base`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/distributions/base.py),\nand a list of flows, given in\n[`nf.flows`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/flows).\nLet's assume our target is a 2D distribution. We pick a diagonal Gaussian\nbase distribution, which is the most popular choice. Our flow shall be a\n[Real NVP model](https://openreview.net/forum?id=HkpbnH9lx) and, therefore, we need\nto define a neural network for computing the parameters of the affine coupling\nmap. One dimension is used to compute the scale and shift parameter for the\nother dimension. After each coupling layer we swap their roles.\n\n```python\nimport normflows as nf\n\n# Define 2D Gaussian base distribution\nbase = nf.distributions.base.DiagGaussian(2)\n\n# Define list of flows\nnum_layers = 32\nflows = []\nfor i in range(num_layers):\n    # Neural network with two hidden layers having 64 units each\n    # Last layer is initialized by zeros making training more stable\n    param_map = nf.nets.MLP([1, 64, 64, 2], init_zeros=True)\n    # Add flow layer\n    flows.append(nf.flows.AffineCouplingBlock(param_map))\n    # Swap dimensions\n    flows.append(nf.flows.Permute(2, mode='swap'))\n```\n\nOnce they are set up, we can define a\n[`nf.NormalizingFlow`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/core.py#L9)\nmodel. If the target density is available, it can be added to the model\nto be used during training. Sample target distributions are given in\n[`nf.distributions.target`](https://github.com/VincentStimper/normalizing-flows/blob/master/normflows/distributions/target.py).\n\n```python\n# If the target density is not given\nmodel = nf.NormalizingFlow(base, flows)\n\n# If the target density is given\ntarget = nf.distributions.target.TwoMoons()\nmodel = nf.NormalizingFlow(base, flows, target)\n```\n\nThe loss can be computed with the methods of the model and minimized.\n\n```python\n# When doing maximum likelihood learning, i.e. minimizing the forward KLD\n# with no target distribution given\nloss = model.forward_kld(x)\n\n# When minimizing the reverse KLD based on the given target distribution\nloss = model.reverse_kld(num_samples=512)\n\n# Optimization as usual\nloss.backward()\noptimizer.step()\n```\n\n## Examples\n\nWe provide several illustrative examples of how to use the package in the\n[`examples`](https://github.com/VincentStimper/normalizing-flows/blob/master/examples)\ndirectory. Amoung them are implementations of \n[Glow](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/glow.ipynb),\na [VAE](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/vae.py), and\na [Residual Flow](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/residual.ipynb). \nMore advanced experiments can be done with the scripts listed in the\n[repository about resampled base distributions](https://github.com/VincentStimper/resampled-base-flows),\nsee its [`experiments`](https://github.com/VincentStimper/resampled-base-flows/tree/master/experiments)\nfolder.\n\nBelow, we consider two simple 2D examples.\n\n### Real NVP applied to a 2D bimodal target distribution\n\n<a href=\"https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/real_nvp_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n\nIn [this notebook](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/real_nvp_colab.ipynb), \nwhich can directly be opened in \n[Colab](https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/real_nvp_colab.ipynb),\nwe consider a 2D distribution with two half-moon-shaped modes as a target. We approximate it with a Real NVP model\nand obtain the following results.\n\n![2D target distribution and Real NVP model](https://raw.githubusercontent.com/VincentStimper/normalizing-flows/master/figures/real_nvp.png)\n\nNote that there might be a density filament connecting the two modes, which is due to an architectural limitation \nof normalizing flows, especially prominent in Real NVP. You can find out more about it in \n[this paper](https://proceedings.mlr.press/v151/stimper22a).\n\n### Modeling a distribution on a cylinder surface with a neural spline flow\n\n<a href=\"https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/paper_example_nsf_colab.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n\nIn [another example](https://github.com/VincentStimper/normalizing-flows/blob/master/examples/paper_example_nsf_colab.ipynb),\nwhich is available in [Colab](https://colab.research.google.com/github/VincentStimper/normalizing-flows/blob/master/examples/paper_example_nsf_colab.ipynb)\nas well, we apply a Neural Spline Flow model to a distribution defined on a cylinder. The resulting density is visualized below.\n\n![Neural Spline Flow applied to target distribution on a cylinder](https://raw.githubusercontent.com/VincentStimper/normalizing-flows/master/figures/nsf_cylinder_3d.png)\n\nThis example is considered in the [paper](https://arxiv.org/abs/2302.12014) accompanying this repository.\n\n## Used by\n\nThe package has been used in several research papers, which are listed below.\n\n> Andrew Campbell, Wenlong Chen, Vincent Stimper, José Miguel Hernández-Lobato, and Yichuan Zhang. \n> [A gradient based strategy for Hamiltonian Monte Carlo hyperparameter optimization](https://proceedings.mlr.press/v139/campbell21a.html). \n> In Proceedings of the 38th International Conference on Machine Learning, pp. 1238–1248. PMLR, 2021.\n> \n> [Code available on GitHub.](https://github.com/VincentStimper/hmc-hyperparameter-tuning)\n\n> Vincent Stimper, Bernhard Schölkopf, José Miguel Hernández-Lobato. \n> [Resampling Base Distributions of Normalizing Flows](https://proceedings.mlr.press/v151/stimper22a). \n> In Proceedings of The 25th International Conference on Artificial Intelligence and Statistics, volume 151, pp. 4915–4936, 2022.\n> \n> [Code available on GitHub.](https://github.com/VincentStimper/resampled-base-flows)\n\n> Laurence I. Midgley, Vincent Stimper, Gregor N. C. Simm, Bernhard Schölkopf, José Miguel Hernández-Lobato. \n> [Flow Annealed Importance Sampling Bootstrap](https://arxiv.org/abs/2208.01893). \n> arXiv preprint arXiv:2208.01893, 2022.\n> \n> [Code available on GitHub.](https://github.com/lollcat/fab-torch)\n\nMoreover, the [`boltzgen`](https://github.com/VincentStimper/boltzmann-generators) package\nhas been build upon `normflows`.\n\n## Citation\n\nIf you use `normflows`, please consider citing the [corresponding paper](https://arxiv.org/abs/2302.12014) as follows.\n\n> Vincent Stimper, David Liu, Andrew Campbell, Vincent Berenz, Lukas Ryll, Bernhard Schölkopf, José Miguel Hernández-Lobato.\n> normflows: A PyTorch Package for Normalizing Flows, arXiv preprint arXiv:2302.12014, 2023.\n\n**Bibtex**\n\n```\n@article{normflows,\n  author = {Vincent Stimper and David Liu and Andrew Campbell and Vincent Berenz and Lukas Ryll and Bernhard Sch{\\\"o}lkopf and Jos{\\'e} Miguel Hern{\\'a}ndez-Lobato},\n  title = {normflows: {A} {P}y{T}orch {P}ackage for {N}ormalizing {F}lows},\n  journal = {arXiv preprint arXiv:2302.12014},\n  year = {2023}\n}\n```\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VincentStimper/normalizing-flows",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "normflows",
    "package_url": "https://pypi.org/project/normflows/",
    "platform": null,
    "project_url": "https://pypi.org/project/normflows/",
    "project_urls": {
      "Download": "https://github.com/VincentStimper/normalizing-flows/archive/refs/heads/master.zip",
      "Homepage": "https://github.com/VincentStimper/normalizing-flows"
    },
    "release_url": "https://pypi.org/project/normflows/1.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pytorch implementation of normalizing flows",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17009718,
  "releases": {
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f988814a7fa9c52221e56db95f5fc7007b349002e499ae843ee62b706b1c9cc8",
          "md5": "57422a22422e97db11ae8886a305cbb3",
          "sha256": "716015b8b221422af1ba556044a2dd89eecfb2349118f5e4c6dc281c34fcc025"
        },
        "downloads": -1,
        "filename": "normflows-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "57422a22422e97db11ae8886a305cbb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49347,
        "upload_time": "2022-07-26T13:24:18",
        "upload_time_iso_8601": "2022-07-26T13:24:18.173884Z",
        "url": "https://files.pythonhosted.org/packages/f9/88/814a7fa9c52221e56db95f5fc7007b349002e499ae843ee62b706b1c9cc8/normflows-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "941c1966ac14ec1363e757fda7a6da75f10b92040b99440b24c6c0f5c4ab8af6",
          "md5": "4458bdafecaa4434d27d09407f319541",
          "sha256": "fba1f63a515cfa35b42edb9f06354240b63c82bfc5502aab1ce0cbf5094b94d3"
        },
        "downloads": -1,
        "filename": "normflows-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4458bdafecaa4434d27d09407f319541",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49955,
        "upload_time": "2022-07-26T14:25:09",
        "upload_time_iso_8601": "2022-07-26T14:25:09.777122Z",
        "url": "https://files.pythonhosted.org/packages/94/1c/1966ac14ec1363e757fda7a6da75f10b92040b99440b24c6c0f5c4ab8af6/normflows-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42e59c78929f1abbd7ddd1249da8d561688cee04590223194a8b417f11afc857",
          "md5": "c54ed6fac009484c85cdf39b43a54f91",
          "sha256": "bf92944808904e5ea7b533420228401f0a5ee991cd29982d947124a68427a807"
        },
        "downloads": -1,
        "filename": "normflows-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c54ed6fac009484c85cdf39b43a54f91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53484,
        "upload_time": "2022-12-21T10:33:23",
        "upload_time_iso_8601": "2022-12-21T10:33:23.690099Z",
        "url": "https://files.pythonhosted.org/packages/42/e5/9c78929f1abbd7ddd1249da8d561688cee04590223194a8b417f11afc857/normflows-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcc19eae10b037d17e63ecfb58cf961b3653b17b06d499e32cd02d6143ec8491",
          "md5": "376b1d31d0f7268baf7f0b3f930a5b81",
          "sha256": "f4bd35c4b6cb196c47249383804cafd263eb542b9bee108d2ffda8f857dfe8a4"
        },
        "downloads": -1,
        "filename": "normflows-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "376b1d31d0f7268baf7f0b3f930a5b81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60122,
        "upload_time": "2023-02-18T12:47:58",
        "upload_time_iso_8601": "2023-02-18T12:47:58.309267Z",
        "url": "https://files.pythonhosted.org/packages/bc/c1/9eae10b037d17e63ecfb58cf961b3653b17b06d499e32cd02d6143ec8491/normflows-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dfaef91aa46e3bd0d2ebb4920073ea4dbcdd9ea68688e5bc8d563743e472155",
          "md5": "ae563b9c22f7be11a8cc3ac508b600ac",
          "sha256": "1c2b2fe9468cccaae06feac788f520be88a12efee434442831f4d5b90c46c406"
        },
        "downloads": -1,
        "filename": "normflows-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae563b9c22f7be11a8cc3ac508b600ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61094,
        "upload_time": "2023-02-24T11:04:57",
        "upload_time_iso_8601": "2023-02-24T11:04:57.042154Z",
        "url": "https://files.pythonhosted.org/packages/5d/fa/ef91aa46e3bd0d2ebb4920073ea4dbcdd9ea68688e5bc8d563743e472155/normflows-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dfaef91aa46e3bd0d2ebb4920073ea4dbcdd9ea68688e5bc8d563743e472155",
        "md5": "ae563b9c22f7be11a8cc3ac508b600ac",
        "sha256": "1c2b2fe9468cccaae06feac788f520be88a12efee434442831f4d5b90c46c406"
      },
      "downloads": -1,
      "filename": "normflows-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae563b9c22f7be11a8cc3ac508b600ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61094,
      "upload_time": "2023-02-24T11:04:57",
      "upload_time_iso_8601": "2023-02-24T11:04:57.042154Z",
      "url": "https://files.pythonhosted.org/packages/5d/fa/ef91aa46e3bd0d2ebb4920073ea4dbcdd9ea68688e5bc8d563743e472155/normflows-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}