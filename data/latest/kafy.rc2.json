{
  "info": {
    "author": "SenuGamerBoy",
    "author_email": "shamilasamarakoon14@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: MacOS",
      "Operating System :: MacOS :: MacOS 9",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Operating System :: Microsoft :: Windows :: Windows Vista",
      "Operating System :: Microsoft :: Windows :: Windows XP",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
      "Topic :: Multimedia :: Video",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/kafy.svg\r\n    :target: https://pypi.python.org/pypi/kafy\r\n.. image:: https://img.shields.io/pypi/dm/kafy.svg\r\n    :target: https://pypi.org/project/kafy/\r\n.. image:: https://travis-ci.org/SenuGamerBoy/Kafay.svg?branch=develop\r\n    :target: https://travis-ci.org/SenuGamerBoy/Kafay\r\n.. image:: https://coveralls.io/repos/github/SenuGamerBoy/Kafay/badge.svg?branch=develop\r\n    :target: https://coveralls.io/github/SenuGamerBoy/Kafay?branch=develop\r\n.. image:: https://img.shields.io/pypi/wheel/kafy.svg\r\n    :target: http://pythonwheels.com/\r\n    :alt: Wheel Status\r\n\r\n\r\nFeatures\r\n--------\r\n\r\n- Retreive metadata such as viewcount, duration, rating, author, thumbnail, keywords\r\n- Download video or audio at requested resolution / bitrate / format / filesize\r\n- Command line tool (ytdl) for downloading directly from the command line\r\n- Retrieve the URL to stream the video in a player such as vlc or mplayer\r\n- Works with age-restricted videos and non-embeddable videos\r\n- Small, standalone, single importable module file (kafy.py)\r\n- Select highest quality stream for download or streaming\r\n- Download video only (no audio) in m4v or webm format\r\n- Download audio only (no video) in ogg or m4a format\r\n- Retreive playlists and playlist metadata\r\n- Works with Python 2.6+ and 3.3+\r\n- Optionally depends on youtube-dl (recommended; more stable)\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\nHere is how to use the module in your own python code.  For command line tool\r\n(ytdl) instructions, see further below\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> import kafy\r\n\r\ncreate a video instance from a YouTube url:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> url = \"https://www.youtube.com/watch?v=9AUu6Ddq78Y\"\r\n    >>> video = kafy.new(url)\r\n\r\nget certain attributes:\r\n\r\n.. code-block:: pycon\r\n    \r\n    >>> video.title\r\n    'Python for Beginners - Learn Python in 1 Hour'\r\n\r\n    >>> video.rating\r\n    5.0\r\n\r\n    >>> video.viewcount, video.author, video.length\r\n    (2557209, 'Programming with Mosh', 10394)\r\n\r\n    >>> video.duration, video.likes, video.dislikes\r\n    ('02:53:14', 25, 0)\r\n\r\n    >>> print(video.description)\r\n    Speaker: Python for Beginners\r\n\r\n\r\nlist available streams for a video:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> streams = video.streams\r\n    >>> for s in streams:\r\n    ...     print(s)\r\n    ...\r\n    normal:mp4@1280x720\r\n    normal:webm@640x360\r\n    normal:mp4@640x360\r\n    normal:flv@320x240\r\n    normal:3gp@320x240\r\n    normal:3gp@176x144\r\n\r\n\r\nshow all formats, file-sizes and their download url:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> for s in streams:\r\n    ...    print(s.resolution, s.extension, s.get_filesize(), s.url)\r\n    ...\r\n    1280x720 mp4 2421958510 https://r1---sn-aiglln7e.googlevideo.com/videoplayba[...]\r\n    640x360 webm 547015732 https://r1---sn-aiglln7e.googlevideo.com/videoplaybac[...]\r\n    640x360 mp4 470655850 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    320x240 flv 345455674 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    320x240 3gp 208603447 https://r1---sn-aiglln7e.googlevideo.com/videoplayback[...]\r\n    176x144 3gp 60905732 https://r1---sn-aiglln7e.googlevideo.com/videoplayback?[...]\r\n\r\n\r\nget best resolution regardless of file format:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> best = video.getbest()\r\n    >>> best.resolution, best.extension\r\n    ('1280x720', 'mp4')\r\n\r\n\r\nget best resolution for a particular file format:\r\n(mp4, webm, flv or 3gp)\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> best = video.getbest(preftype=\"webm\")\r\n    >>> best.resolution, best.extension\r\n    ('640x360', 'webm')\r\n\r\nget url, for download or streaming in mplayer / vlc etc:\r\n\r\n.. code-block:: pycon\r\n    \r\n    >>> best.url\r\n    'http://r12---sn-aig7kner.c.youtube.com/videoplayback?expire=1369...\r\n\r\nDownload video and show progress:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> best.download(quiet=False)\r\n    3,734,976 Bytes [0.20%] received. Rate: [ 719 KB/s].  ETA: [3284 secs]\r\n\r\nDownload video, use specific directory and/or filename:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> filename = best.download(filepath=\"/tmp/\")\r\n\r\n    >>> filename = best.download(filepath=\"/tmp/Game.\" + best.extension)\r\n\r\nGet audio-only streams (m4a and/or ogg vorbis):\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> audiostreams = video.audiostreams\r\n    >>> for a in audiostreams:\r\n    ...     print(a.bitrate, a.extension, a.get_filesize())\r\n    ...\r\n    256k m4a 331379079\r\n    192k ogg 172524223\r\n    128k m4a 166863001\r\n    128k ogg 108981120\r\n    48k m4a 62700449\r\n\r\n\r\nDownload the 2nd audio stream from the above list:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> audiostreams[1].download()\r\n\r\nGet the best quality audio stream:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> bestaudio = video.getbestaudio()\r\n    >>> bestaudio.bitrate\r\n    '256'\r\n\r\nDownload the best quality audio file:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> bestaudio.download()\r\n\r\nshow all media types for a video (video+audio, video-only and audio-only):\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> allstreams = video.allstreams\r\n    >>> for s in allstreams:\r\n    ...     print(s.mediatype, s.extension, s.quality)\r\n    ...\r\n\r\n    normal mp4 1280x720\r\n    normal webm 640x360\r\n    normal mp4 640x360\r\n    normal flv 320x240\r\n    normal 3gp 320x240\r\n    normal 3gp 176x144\r\n    video m4v 1280x720\r\n    video webm 1280x720\r\n    video m4v 854x480\r\n    video webm 854x480\r\n    video m4v 640x360\r\n    video webm 640x360\r\n    video m4v 426x240\r\n    video webm 426x240\r\n    video m4v 256x144\r\n    video webm 256x144\r\n    audio m4a 256k\r\n    audio ogg 192k\r\n    audio m4a 128k\r\n    audio ogg 128k\r\n    audio m4a 48k\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nkafy can be installed using `pip <http://www.pip-installer.org>`_:\r\n\r\n.. code-block:: bash\r\n\r\n    $ [sudo] pip install kafy\r\n\r\nor use a `virtualenv <http://virtualenv.org>`_ if you don't want to install it system-wide:\r\n\r\n.. code-block:: bash\r\n\r\n    $ virtualenv venv\r\n    $ source venv/bin/activate\r\n    $ pip install kafy\r\n\r\n\r\nCommand Line Tool (ytdl) Usage\r\n------------------------------\r\n\r\n\r\n.. code-block:: bash\r\n\r\n    usage: ytdl [-h] [-i] [-s]\r\n                [-t {audio,video,normal,all} [{audio,video,normal,all} ...]]\r\n                [-n N] [-b] [-a]\r\n                url\r\n\r\n    YouTube Download Tool\r\n\r\n    positional arguments:\r\n      url                   YouTube video URL to download\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -i                    Display vid info\r\n      -s                    Display available streams\r\n      -t {audio,video,normal,all} [{audio,video,normal,all} ...]\r\n                            Stream types to display\r\n      -n N                  Specify stream to download by stream number (use -s to\r\n                            list available streams)\r\n      -b                    Download the best quality video (ignores -n)\r\n      -a                    Download the best quality audio (ignores -n)\r\n\r\n\r\nytdl Examples\r\n-------------\r\n\r\nDownload best available resolution (-b):\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl -b \"https://www.youtube.com/watch?v=9AUu6Ddq78Y\"\r\n\r\nDownload best available audio stream (-a)\r\n(note; the full url is not required, just the video id will suffice):\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl -a cyMHZVT91Dw\r\n\r\n\r\nget video info (-i):\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl -i cyMHZVT91Dw\r\n\r\nlist available dowload streams:\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl cyMHZVT91Dw\r\n \r\n    Stream Type    Format Quality         Size            \r\n    ------ ----    ------ -------         ----            \r\n    1      normal  webm   [640x360]       33 MB\r\n    2      normal  mp4    [640x360]       23 MB\r\n    3      normal  flv    [320x240]       14 MB\r\n    4      normal  3gp    [320x240]        9 MB\r\n    5      normal  3gp    [176x144]        3 MB\r\n    6      audio   m4a    [48k]            2 MB\r\n    7      audio   m4a    [128k]           5 MB\r\n    8      audio   ogg    [128k]           5 MB\r\n    9      audio   ogg    [192k]           7 MB\r\n    10     audio   m4a    [256k]          10 MB\r\n\r\n \r\nDownload mp4 640x360 (ie. stream number 2):\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl -n2 cyMHZVT91Dw\r\n\r\nDownload m4a audio stream at 256k bitrate:\r\n\r\n.. code-block:: bash\r\n\r\n    $ ytdl -n10 cyMHZVT91Dw\r\n\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/SenuGamerBoy/Kafay/tags",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SenuGamerBoy/Kafay/",
    "keywords": "kafy,API,YouTube,youtube,download,video",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kafy",
    "package_url": "https://pypi.org/project/kafy/",
    "platform": "",
    "project_url": "https://pypi.org/project/kafy/",
    "project_urls": {
      "Download": "https://github.com/SenuGamerBoy/Kafay/tags",
      "Homepage": "https://github.com/SenuGamerBoy/Kafay/"
    },
    "release_url": "https://pypi.org/project/kafy/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Retrieve YouTube content and metadata",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11777659,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee187597d4f4db975764bef2921c1e75122399b051e7dd4edb1a731ccba6ee16",
          "md5": "6f2d3dd2984abd5cf657c30a86839435",
          "sha256": "c523e67cdcfeacae1404e23dec6779a4551d66f5ed50a913905655332d5f6484"
        },
        "downloads": -1,
        "filename": "kafy-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f2d3dd2984abd5cf657c30a86839435",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44017,
        "upload_time": "2021-10-18T07:47:29",
        "upload_time_iso_8601": "2021-10-18T07:47:29.871995Z",
        "url": "https://files.pythonhosted.org/packages/ee/18/7597d4f4db975764bef2921c1e75122399b051e7dd4edb1a731ccba6ee16/kafy-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ea07502339d69d01d746b2ec13bfca7b55d8065464de5a32a1314e2e7f45a1e",
          "md5": "9b070396a6eebd5c42932973ccf3cda3",
          "sha256": "2c676ca08b1c284fb107a7f18a5ddb37c18758a3804dc5ffcefa365bd4491cd2"
        },
        "downloads": -1,
        "filename": "kafy-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9b070396a6eebd5c42932973ccf3cda3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43700,
        "upload_time": "2021-10-20T07:13:50",
        "upload_time_iso_8601": "2021-10-20T07:13:50.207120Z",
        "url": "https://files.pythonhosted.org/packages/4e/a0/7502339d69d01d746b2ec13bfca7b55d8065464de5a32a1314e2e7f45a1e/kafy-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ea07502339d69d01d746b2ec13bfca7b55d8065464de5a32a1314e2e7f45a1e",
        "md5": "9b070396a6eebd5c42932973ccf3cda3",
        "sha256": "2c676ca08b1c284fb107a7f18a5ddb37c18758a3804dc5ffcefa365bd4491cd2"
      },
      "downloads": -1,
      "filename": "kafy-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9b070396a6eebd5c42932973ccf3cda3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43700,
      "upload_time": "2021-10-20T07:13:50",
      "upload_time_iso_8601": "2021-10-20T07:13:50.207120Z",
      "url": "https://files.pythonhosted.org/packages/4e/a0/7502339d69d01d746b2ec13bfca7b55d8065464de5a32a1314e2e7f45a1e/kafy-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}