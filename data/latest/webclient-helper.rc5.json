{
  "info": {
    "author": "Ken",
    "author_email": "kenjyco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Processing :: Markup :: HTML",
      "Topic :: Text Processing :: Markup :: XML",
      "Topic :: Utilities"
    ],
    "description": "Install\n-------\n\n::\n\n   $ pip3 install webclient-helper\n\nOr, install with beautifulsoup4 and lxml\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInstall system requirements for ``lxml``\n\n::\n\n   $ sudo apt-get install -y libxml2 libxslt1.1 libxml2-dev libxslt1-dev\n\n   or\n\n   % brew install libxml2\n\nInstall with pip\n\n::\n\n   $ pip3 install webclient-helper[bs4]\n\nUsage\n-----\n\n   ``import webclient_helper as wh``\n\nCreate an instance of WebClient and use the HTTP methods (OPTIONS, HEAD,\nGET, POST, PUT, PATCH, DELETE) to interact with an API.\n\n::\n\n   WebClient(username=None, password=None, token=None, token_type=None, base_url='',\n             user_agent=None, content_type='application/json', extra_headers={})\n\n       Interact with an API on the web\n\n       If you need to obtain a token from a login endpoint, define a \"login\"\n       method when you subclass WebClient and set self._token and self._token_type\n\n       Example:\n\n           def login(self):\n               headers = {'Content-Type': 'application/json'}\n               data = {'email': self._username, 'password': self._password}\n               response = self.session.post(\n                   self._base_url + '/api/login',\n                   headers=headers,\n                   json=data\n               )\n               self._token = response.json().get('access_token')\n               self._token_type = 'Bearer'\n\n\n       __init__(self, username=None, password=None, token=None, token_type=None,\n                base_url='', user_agent=None, content_type='application/json',\n                extra_headers={})\n           - username: if specified, set auth on session (requires password)\n           - password: if specified, set auth on session (requires username)\n           - token: if specified, use this token in the \"Authorization\" header\n             (requires token_type)\n           - token_type: if specified, use as part of the value in the\n             \"Authorization\" header\n           - base_url: base url for service/API that a subclass would interact with\n           - user_agent: if specified, set \"User-Agent\" header\n           - content_type: content type for requests\n           - extra_headers: a dict of extra headers to set on the session\n\n           If no login method is defined, any supplied username/password will be\n           passed to new_requests_session (for basic auth)\n\n       OPTIONS(self, url, headers=None, debug=False, **kwargs)\n           Send a OPTIONS request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       HEAD(self, url, headers=None, debug=False, **kwargs)\n           Send a HEAD request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       GET(self, url, headers=None, params=None, debug=False, **kwargs)\n           Send a GET request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - params: a dict with query string vars and values\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       POST(self, url, headers=None, data=None, json=None, debug=False, **kwargs)\n           Send a POST request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - data: a dict to send in the body (non-JSON)\n           - json: a dict to send in the body\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       PUT(self, url, headers=None, data=None, debug=False, **kwargs)\n           Send a PUT request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - data: a dict to send in the body (non-JSON)\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       PATCH(self, url, headers=None, data=None, debug=False, **kwargs)\n           Send a PATCH request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - data: a dict to send in the body (non-JSON)\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       DELETE(self, url, headers=None, debug=False, **kwargs)\n           Send a DELETE request and return response object\n\n           - url: url/endpoint\n           - headers: dict of headers to update on the session before making request\n           - debug: if True, enter debugger before returning\n\n           Other kwargs are passed to webclient_helper.session_method\n\n       history_explorer(self, return_selections=False)\n           Select responses from history to explore in ipython (if ipython installed)\n\n           - return_selections: if True, return the selections from history\n\nExample (GitHub)\n----------------\n\n   See https://docs.github.com/en/rest/reference for endpoints to hit.\n\n   Note: To (fully) use the GitHub API, first generate a “personal\n   access token” at https://github.com/settings/tokens/new and save it\n   to your ``~/.bashrc`` or ``~/.zshrc`` file.\n\n::\n\n   export GITHUB_ACCESS_TOKEN=\"ghp_vx...\"\n\nThen use it in your Python code (after ``source ~/.bashrc`` or\n``source ~/.zshrc`` for the first time)\n\n::\n\n   import webclient_helper as wh\n   from os import getenv\n\n\n   access_token = getenv('GITHUB_ACCESS_TOKEN')\n   gh_client = wh.WebClient(token=access_token, token_type='token')\n   resp = gh_client.GET('https://api.github.com/user/repos')\n   data = resp.json()\n\nExample (subclass with custom login)\n------------------------------------\n\n::\n\n   import webclient_helper as wh\n\n\n   class SomeClient(wh.WebClient):\n       def login(self):\n           headers = {'Content-Type': 'application/json'}\n           data = {'email': self._username, 'password': self._password}\n           response = self.session.post(\n               self._base_url + '/api/login',\n               headers=headers,\n               json=data\n           )\n           self._token = response.json().get('access_token')\n           self._token_type = 'Bearer'\n\n       def get_something(self, params=None, debug=False):\n           return self.GET(\n               self._base_url + '/api/something',\n               params=params,\n               debug=debug\n           )\n\n\n   some_client = SomeClient(\n       username='myuser',\n       password='mypass',\n       base_url='https://somewhere.com',\n   )\n\n   something1 = some_client.get_something(params={'x': 1, 'y': 5})\n   something2 = some_client.get_something(params={'x': 2, 'y': 10})\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/kenjyco/webclient-helper/tarball/v0.0.5",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kenjyco/webclient-helper",
    "keywords": "webclient,api,requests,soup,beautifulsoup,lxml,http,rest,helper,kenjyco",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "webclient-helper",
    "package_url": "https://pypi.org/project/webclient-helper/",
    "platform": null,
    "project_url": "https://pypi.org/project/webclient-helper/",
    "project_urls": {
      "Download": "https://github.com/kenjyco/webclient-helper/tarball/v0.0.5",
      "Homepage": "https://github.com/kenjyco/webclient-helper"
    },
    "release_url": "https://pypi.org/project/webclient-helper/0.0.5/",
    "requires_dist": [
      "fs-helper",
      "input-helper",
      "requests",
      "urllib3",
      "xmljson",
      "beautifulsoup4 ; extra == 'bs4'",
      "lxml ; extra == 'bs4'"
    ],
    "requires_python": "",
    "summary": "Helpful WebClient class to interact with APIs on the web",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13473178,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55a2862145936b8706586bc1d118587a3e35ec1f851420c60bf6d377902b075c",
          "md5": "b726604f20e90cdf26af77e2e82ba3b9",
          "sha256": "85a4b409cc41bf9e9f4a368ea1ee4b4c01092dc1c8cbd00f6f5a0cd0543cb76f"
        },
        "downloads": -1,
        "filename": "webclient_helper-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b726604f20e90cdf26af77e2e82ba3b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6599,
        "upload_time": "2020-10-12T03:49:51",
        "upload_time_iso_8601": "2020-10-12T03:49:51.126633Z",
        "url": "https://files.pythonhosted.org/packages/55/a2/862145936b8706586bc1d118587a3e35ec1f851420c60bf6d377902b075c/webclient_helper-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84d01dc8d732f14bd9d8c5e8d55c0d3abc3403bd127f0291ea78059a76721f03",
          "md5": "637f2fa95327e8384934c16b98beb08d",
          "sha256": "df1f3a2c7fba2a54de857acdf967cb9a2919a6f0197b04efa0d07e7556eb9a85"
        },
        "downloads": -1,
        "filename": "webclient_helper-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "637f2fa95327e8384934c16b98beb08d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7457,
        "upload_time": "2020-10-21T19:09:11",
        "upload_time_iso_8601": "2020-10-21T19:09:11.444720Z",
        "url": "https://files.pythonhosted.org/packages/84/d0/1dc8d732f14bd9d8c5e8d55c0d3abc3403bd127f0291ea78059a76721f03/webclient_helper-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3d165159ab5bd518508632924a086e79905e49dfb4cf4a51d2ace7f211968aa",
          "md5": "6a1a5f81202834306376b680580c5b8a",
          "sha256": "cc1c28a98f4595cccf7833e55d60dfe16f1e360502f3a7a0f0f054b91da50ecb"
        },
        "downloads": -1,
        "filename": "webclient_helper-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a1a5f81202834306376b680580c5b8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8222,
        "upload_time": "2020-10-23T04:32:07",
        "upload_time_iso_8601": "2020-10-23T04:32:07.757334Z",
        "url": "https://files.pythonhosted.org/packages/f3/d1/65159ab5bd518508632924a086e79905e49dfb4cf4a51d2ace7f211968aa/webclient_helper-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a67adfbe98308b95415ee6dcf510f167280c6d6b1672dfef286a7f6fdfd0f242",
          "md5": "8946261cec18c6acc13078eed6a9330a",
          "sha256": "58383ab9cb7d58f67675216c1a7174774d804ebb738c636a7fc4f023eddc7136"
        },
        "downloads": -1,
        "filename": "webclient_helper-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8946261cec18c6acc13078eed6a9330a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8382,
        "upload_time": "2021-09-28T17:22:58",
        "upload_time_iso_8601": "2021-09-28T17:22:58.304318Z",
        "url": "https://files.pythonhosted.org/packages/a6/7a/dfbe98308b95415ee6dcf510f167280c6d6b1672dfef286a7f6fdfd0f242/webclient_helper-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a513cba4c2ebfd3b56bfe4bfb1383509b939a4449fd0cc56f12321423ac164a",
          "md5": "05376993d83ca6c246e2ede9985782e7",
          "sha256": "0ba1d3291beb81684e6c06ff122842998b980fec5bc7d2f9774d46b2d19cb269"
        },
        "downloads": -1,
        "filename": "webclient_helper-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05376993d83ca6c246e2ede9985782e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8464,
        "upload_time": "2022-04-11T02:29:58",
        "upload_time_iso_8601": "2022-04-11T02:29:58.806690Z",
        "url": "https://files.pythonhosted.org/packages/8a/51/3cba4c2ebfd3b56bfe4bfb1383509b939a4449fd0cc56f12321423ac164a/webclient_helper-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a513cba4c2ebfd3b56bfe4bfb1383509b939a4449fd0cc56f12321423ac164a",
        "md5": "05376993d83ca6c246e2ede9985782e7",
        "sha256": "0ba1d3291beb81684e6c06ff122842998b980fec5bc7d2f9774d46b2d19cb269"
      },
      "downloads": -1,
      "filename": "webclient_helper-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05376993d83ca6c246e2ede9985782e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8464,
      "upload_time": "2022-04-11T02:29:58",
      "upload_time_iso_8601": "2022-04-11T02:29:58.806690Z",
      "url": "https://files.pythonhosted.org/packages/8a/51/3cba4c2ebfd3b56bfe4bfb1383509b939a4449fd0cc56f12321423ac164a/webclient_helper-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}