{
  "info": {
    "author": "Josef Kynast",
    "author_email": "josef.kynast@uni-bayreuth.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# ATLIGATOR\n\nATLIGATOR is created to analyse protein-protein or protein-peptide interactions.\n\n# Installation\n\nYou can find the atligator in the Python Packaging Index.\nThus, to install atligator in your python 3.7+ environment just type:\n\n```pip install atligator```\n\n#### Installation Notes\nIf installation fails because of the build process of dependencies use the '--only-binary=:all:' flag:\n```\npython -m pip install --only-binary=:all: atligator\n```\n\nFor the compilation of scipy and numpy you might need to install the compilers first \n(or try to use only wheel files, see above! This might depend on your OS environment):\n```\nsudo apt-get install gfortran libopenblas-dev liblapack-dev\n```\n\n#### What is included?\n\nThe package from PyPI delivers all options to work with ATLIGATOR as a python API.\nThe CLI scripts can be received from github as an aditional entry point. \n\n# Usage\n\nYou can use ATLIGATOR either with the predefined scripts or the API. \nMost use cases can be accessed via both options.\nNote: Most scripts will also give you a help option using the `-h` flag.\n\n### Citation\n\nIf you use ATLIGATOR please cite it. The article is currently being published, so stay tuned\nfor the correct citation.\n\n### Why?\n\nWhy you should use ATLIGATOR?\n\n#### Atlases\nWith ATLIGATOR you can build up interaction databases (called atlases) which store the interactions between pairs of\namino acid residues. By combining many of these pairwise interactions you can get a better understanding of how amino \nacids tend to interact with each other.\n\nAll the input structures can be selected manually or by using fold-specific SCOPe-identifiers to only use protein \nstructures with similar architecture. Additionally, input structures can be preprocessed to only contain relevant \nprotein chains (a central binder chain and ligand chains in close distance) and filtered for a certain secondary\nstructure content.\n\n#### Pockets\nAtlas information can be exploited further by using the pocket mining functionality. Pockets are frequent groups of\ninteractions which can be detected within an atlas. With Pockets you can directly see potential binding pockets for\ndesigning amino acid binders in a structural context.\n\n#### Design\nPockets can also be grafted onto scaffold proteins to get starting points for new protein or peptide binding abilities \nin existing proteins.\n\n## Structures and Preprocessing\n\nTo be able to build a new atlas database prepare a directory with input pdb structures.\n\n#### Downloading Structures\nIf you want to use ATLIGATORS SCOPe-matching functionality, either use the predefined script:\n\n*to download all files matched with SCOPe id a.118.11 to the directory ./structures*\n```shell script\npython3 download_pdbs_by_scop_query.py -o ./structures a.118.11\n```\nor write a python script/use the interpreter:\n\n```python\nfrom atligator.pdb_util import download_pdbs_by_scop_query\n\ndownload_pdbs_by_scop_query(query=\"a.118.11\",\n                            dest_dir=\"./structures\")\n# If you have a local copy of the pdb database you can try setting the parameter: pdb_db_path\n# If you have a local copy of the SCOPe database you can try setting the parameter: scop_dir_cla_file\n# Both will prevent downloading those files from the web.\n```\n\nor for single PDB files:\n\n```python\nfrom atligator.pdb_util import get_pdb_structure\n\nget_pdb_structure(\"1z5s\", dest_dir=\"./strucures/\")\n```\n\n#### Preprocessing Structures\nTo preprocess the input structure files you can use:\n\n```shell script\npython3 process_chains.py -o ./structures/processed -pro -d 8.0 -mb 30 -ml 3 structures/*.pdb\n```\n\n*The -d option defines the maximum distance two atoms of a residue pair can have to still be included. It's recommended\nto use at least the maximum distance you use for atlas generation lateron.*\n\n*The options -mb and -ml define the length of the polypeptide chains to be considered for binder (central chain) or \nligand (any other chain it interacts with).*\n\nor write a python script/use the interpreter:\n\n```python\nfrom atligator.chain_processing import MultiProcessChainProcessing\nfrom glob import iglob\n\npdbs = [x for x in iglob(\"./structures/*.pdb\")]\nproc = MultiProcessChainProcessing(pdbs=pdbs, output_path=\"./structures/processed/\", min_binder_len=30, \n                                   min_ligand_len=3, max_distance=8.0, n_workers=2, progress=True, quiet=False)\nproc.main()\n```\n\nTo process single files: \n\n```python\nfrom atligator.chain_processing import process_pdb\n\nprocess_pdb(pdb=\"./structures/7ev7.pdb\", output_path=\"./structures/processed/\", min_binder_len=30, \n            min_ligand_len=3, max_distance=8.0, quiet=False)\n```\n\n#### Filtering Structures\n\nYou can filter structures by secondary structure content:\n1. total alpha helix\n2. total beta sheet\n3. alpha helix/beta sheet ratio\n4. beta sheet/alpha-helix ratio\n\n*E.g. at least 60% alpha helical residues*\n\n```shell script\npython3 select_by_sec_struc.py -o ./structures/processed/selected -at 0.6 -cp structures/processed/*.pdb\n```\n\n*the `-cp` flag enables copying the filtered files into the output directory. Otherwise there will be \nonly a text file 'filtered_objects.txt' including all selected residues.*\n\nWithin python:\n\n```python\nfrom atligator.construct_selection import SelectionProcess\nfrom glob import iglob\n\npdbs = list(x for x in iglob(\"./structures/processed/*.pdb\"))\nselect = SelectionProcess(pdbs=pdbs)\n\n# You can retrieve the secondary structure content:\nprint(select.check_pdbs_for_2s_content())\n\n# Or you can directly filter the files\nfiltered = select.filter_pdbs(alphatotal=0.8)\nprint(\"These fall under the criteria:\", filtered)\n```\n\nOr to only retrieve the secondary structure content:\n\n```python\nfrom atligator.construct_selection import check_pdbs_for_2s_content\npdbs = list(x for x in iglob(\"./structures/processed/*.pdb\"))\ncheck_pdbs_for_2s_content(pdbs=pdbs, quiet=False)\n```\n\n\n## Atlas\n\n### Atlas Generation\n\nTo generate an atlas from pdb input files, just:\n\n```shell script\npython3 generate_atlas.py ./atlas.atlas ./structures/processed/*.pdb -b\n```\n\n*The `-b` flag excludes interactions of ligand backbone atoms and is recommended to strenghen the influence of the \ncorresponding ligand residue side chain.*\n\nWithin python:\n\n```python\nfrom atligator.atlas import generate_atlas\nfrom glob import iglob\n\npdbs = list(x for x in iglob(\"./structures/processed/*.pdb\"))\natlas = generate_atlas(filenames=pdbs, skip_bb_atoms=True)\n```\n\n### Atlas Objects\n\nApart from visualisation or further processing atlas object can be already inspected in python:\n\n```python\n# Find a list of AtlasDatapoints in:\natlas.datapoints\n# These datapoints contain all atoms of the residue pair (ligand and binder) as well as their residue type and their\n# origin\n\n# You can also filter an atlas to only contain specific residue type in ligand and binder position.\nfiltered_atlas = atlas.filter(ligand_restype = None, binder_restype = None)\n```\n\n### Atlas Visualisation\n\nVisualisation of an atlas can be of two types: structural or statistical. \n\n##### Statistics\n\nThe statistical visualization contains a plot of the atlas content, where the ligand residue type is plotted against\nthe binder residue type and vice versa. \n\nTo generate an atlas from pdb input files, just:\n\n\n```shell script\npython3 visualize_atlas_stats.py ./atlas.atlas -m plotly\n```\n\nWithin python:\n```python\nfrom atligator.visualization import visualize_atlas_stats\n\nvisualize_atlas_stats(atlas, method=\"plotly\", ligand_per_binder=False)\n```\n\n*There is two ways of plotting atlas statistics: plotly and matplotlib. Plotly is using the browser,\nmatplotlib creates a new window.*\n*To transform the plot to see which ligand residue types interact with the binder residue types, set ligand_per_binder \nto True or use the `-i` flag with the script*.\n\n\n##### Structural Visualization: Atlas or Atlas subset\n\nThe structural representation delivers a good overview about what an atlas is composed of.\nThe default representation will always draw a 3D plot where only the Calpha and Cbeta atoms of the ligand residue\nand the binder residues are present as bigger (Calpha) and smaller (Cbeta) bubbles. \n\nThe ligand residue is typically positioned in the center of the plot to demonstrate where the binder residues are\nrelative to the ligand residue.\n\n\n```shell script\npython3 visualize_atlas.py ./atlas.atlas -m plotly -l ALA -b TYR\n```\n\nWithin python:\n\n```python\nfrom atligator.visualization import visualize_atlas\n\n# You can define the ligand residue type\nvisualize_atlas(atlas, method=\"plotly\", ligand_restype=\"ALA\")\n\n# Or both residue types\nvisualize_atlas(atlas, method=\"plotly\", ligand_restype=\"ALA\", binder_restype=\"TYR\")\n```\n\n### File transfer\n\n#### Not recommended for data exchange: pickle\nAtlases can be stored with pickle (https://docs.python.org/3/library/pickle.html) by deserialisation of the atlas\npython object: \n\n```python\nimport pickle\n# for import\nwith open(\"./atlas.atlas\", \"rb\") as rf:\n    atlas = pickle.load(rf)\n\n# for export\nwith open(\"./atlas.atlas\", \"wb\") as wf:\n    pickle.dump(atlas, wf)\n```\n\nHowever, in any environment where files are exchanged with others it's not recommended to use pickle. Pickle files\ncan contain any python code and are executed after reading in the file. Thus, untrusted sources could hide an unpleasant\nsurprise in their files and we need an alternative.\n\n#### json Atlases \n\nWe have the option to import and export Atlases as json files which are parsed internally. By doing so, we have clear \ntext files for immediate inspection and prevent undesired code execution.\n\n```python\nfrom atligator import atlas\n# for import\nwith open(\"./atlas.json\", \"r\") as rf:\n    atlas = atlas.Atlas.from_json(rf)\n\n# for export\nwith open(\"./atlas.json\", \"w\") as wf:\n    atlas.to_json_file(wf)\n```\n\n## Pockets\n\n### Pocket Mining\n\nTo mine pockets from an existing atlas:\n\n```shell script\npython3 apply_pocket_miner.py ./atlas.atlas -o ./\n```\n\nWithin python:\n```python\nfrom atligator.pocket_miner import mine_pockets\n\npockets = mine_pockets(atlas)\n```\n*Additional parameters can be used for example to define how important the size (cardinality) of the pocket is, or \nhow many pockets per ligand residue type are found at maximum.*\n\n### Pocket Handling\n\nApart from visualization or grafting Pockets can be already inspected in python:\n\n```python\n# pockets is a dictionary of ligand residue types. To access the underlying list of pockets just:\npockets['TYR']\n# or print all content:\nfor residue_type, pocket_list in pockets.items():\n    print(residue_type, pocket_list)\n```\n\n### Pocket Visualization\n\nTo visualize pockets you can choose between plotting the pocket atlas or a single pocket.\n- The pocket atlas is a filtered version of the original atlas. It only includes datapoints that \ncan be found as a part of the pocket.   \nFor example: You mined a Ile to REST pocket - including Ile as the ligand and Arg, Glu, Ser and Thr as binder residues. \nThe corresponding pocket atlas will only contain atlas datapoints that include Ile as a ligand and one of the four \nbinder residues as a binder residue. Additionally, only those datapoints that are found in combination with the three \nother datapoints (the other three binder residue types) are taken into account (and filtered based on the clustering \nparameters during pocket mining).\n\n- A single pocket is a multi-residue structure including one ligand residue and all binder residues surrounding it. \nIt will only contain those residues that natively interact in one of the input structures. Thus, it is just a strictly\nfiltered representation of one input structure.\n\n**A pocket atlas** is plotted as an atlas, including Calpha and Cbeta bubbles for the central ligand residue\nas well as binder residues around.\n\n```shell script\npython3 visualize_pocket.py ./pockets.pockets -l TYR -p RLD\n```\n*The `-l` flag defines the  ligand residue type and the `-p` flag defines the itemset of the desired pocket \nin one-letter-code (In this case Arg, Leu and Asp).*\n\nWithin python:\n\n```python\nfrom atligator.visualization import visualize_pocket_atlas\n\n# First we could check which Tyr pockets we have\nprint(pockets[\"TYR\"])\n\ntyr_pocket = pockets[\"TYR\"][0]\n# You can define the ligand residue type\nvisualize_pocket_atlas(tyr_pocket, method=\"plotly\")\n```\n\n\n\n**A single pocket** is plotted with all atoms to enable viewing the interaction in all details.\n\nVisualizing a single pocket is not yet available as a script.\n\nWithin python:\n\n```python\nfrom atligator.visualization import visualize_single_pocket\n\ntyr_pocket = pockets[\"TYR\"][0]\n# First we have to pick one datapoint of this pocket. We could for example determine the most representative member of \n# one cluster (in this case the first cluster):\n# Let's first see which binder residue type is present in this cluster\nprint(tyr_pocket.clusters[0].binder_restype)\n# Let's pick the most representative datapoint\nmost_representative_member = tyr_pocket.clusters[0].get_most_representative_member(2.0, 1.0, 1.0)\n\n# we could also just pick any member of any cluster\nany_member = tyr_pocket.clusters[0].members[0]\n\n# Let's visualize this single pocket with plotly\nvisualize_single_pocket(pocket=tyr_pocket, datapoint=most_representative_member)\n```\n\n### File Transfer\n\n#### Not recommended for data exchange: pickle\nPocket collections can be stored with pickle (https://docs.python.org/3/library/pickle.html) by deserialisation of the \npython object: \n\n```python\nimport pickle\n# for import\nwith open(\"./pockets.pockets\", \"rb\") as rf:\n    pockets = pickle.load(rf)\n\n# for export\nwith open(\"./pockets.pockets\", \"wb\") as wf:\n    pickle.dump(pockets, wf)\n```\n\nHowever, in any environment where files are exchanged with others it's not recommended to use pickle. Pickle files\ncan contain any python code and are executed after reading in the file. Thus, untrusted sources could hide an unpleasant\nsurprise in their files and we need an alternative.\n\n#### json Pocket Collections\n\nWe have the option to import and export Pocket Collections as json files which are parsed internally. By doing so, we \nhave clear text files for immediate inspection and prevent undesired code execution.\n\n```python\nfrom atligator import pocket_miner\n# for import\nwith open(\"./pockets.json\", \"r\") as rf:\n    pockets = pocket_miner.json_to_pockets(rf)\n\n# for export\nwith open(\"./pockets.json\", \"w\") as wf:\n    pocket_miner.pockets_to_json_file(pockets, wf)\n```\n\n\n## Pocket Grafting\n\nTo apply the knowledge gained by ATLIGATOR atlas and pockets directly to your design pockets\ncan be grafted onto new scaffolds.\n\n**Note**: All grafted pockets will be based on natural pockets from the input structures and the side chain\nconformations (rotamers) will remain as they were in the original structure. Thus, the grafted rotamers will **not**\nperfectly fit into the new environment. It is highly recommended to minimize these rotamers with a common protocol\n(e.g. Rosetta fixbb).\n\n### Grafting One Binding Pocket\n\nIndividual pockets can be grafted onto scaffold proteins directly. Just define a protein of choice, mutable binder \nresidue positions, a ligand residue (the basis for the grafted pocket) and the pocket you want to graft.\nATLIGATOR will automatically pick the best matching members of this pocket and the best fitting positions to mutate.\n\n```python\nfrom atligator.grafting import graft_pocket_onto_scaffold\n\n# First define which positions in which chain are mutable\ndesign_positions = {\"C\": [\"510\", \"513\", \"514\", \"515\", \"517\", \"518\", \"523\", \"524\", \"557\", \"558\", \"559\", \"561\", \"562\"]}\n# Pick a pocket of the desired residue type and graft it onto design positions of scaffold - based on ligand_residue\n# If you define an output_name, the new pdb file will be stored at this path.\ndesign = graft_pocket_onto_scaffold(pocket=pockets[\"THR\"][1], scaffold_name=\"./1z5s.pdb\", ligand_residue=(\"A\", \"131\"), \n                                    design_positions=design_positions, output_name=\"./design.pdb\")\n```\n\n### Quickgraft\n#### Quickgraft - single pocket\n\nQuickgraft allows to graft the pocket in a pocket collection which fits the best on the available design positions.\nIn this case you don't have to select the pocket yourself, but the residue type the ligand \nresidue should be mutated to.\n\n```python\nfrom atligator.grafting import graft_best_pocket_onto_scaffold\n\n# First define which positions in which chain are mutable\ndesign_positions = {\"C\": [\"510\", \"513\", \"514\", \"517\", \"523\", \"558\", \"559\"]}\n# Define which residue (from which chain) should act as a ligand residue and which mutation should be applied.\nligand_residues = {\"A\": {\"131\": \"THR\"}}\n# Graft the best matching pocket onto design_positions of scaffold - based on ligand_residues and the new ligand restype\n# If you define an output_name, the new pdb file will be stored at this path.\ndesign, graft = graft_best_pocket_onto_scaffold(pockets=pockets, scaffold_name=\"./1z5s.pdb\", \n                                                ligand_residues=ligand_residues, \n                                                design_positions=design_positions, output_name=\"./design.pdb\")\nprint(graft)\n```\n\n#### Quickgraft - multi pocket\n\nIf you want to mutate more than one ligand residue and want to get matching pocket grafts for all ligand mutations \nATLIGATOR offers a multi pocket grafting option.\n\n```python\nfrom atligator.grafting import graft_best_pocket_onto_scaffold\n\n# First define which positions in which chain are mutable\ndesign_positions = {\"C\": [\"510\", \"513\", \"514\", \"517\", \"523\", \"558\", \"559\"]}\n# Define which residues (from which chain) should act as ligand residues and which mutations should be applied.\nligand_residues = {\"A\": {\"131\": \"THR\", \"132\": \"ASN\"}}\n# Graft the best matching pocket onto design_positions of scaffold - based on ligand_residue and the new ligand_restype\n# If you define an output_name, the new pdb file will be stored at this path.\ndesign, graft = graft_best_pocket_onto_scaffold(pockets=pockets, scaffold_name=\"./1z5s.pdb\", \n                                                ligand_residues=ligand_residues, \n                                                design_positions=design_positions, output_name=\"./design.pdb\")\nprint(graft)\n```\n\n#### Quickgraft - more grafting solutions\n\nIf you want multiple grafts based on your settings use:\n\n```python\nfrom atligator.grafting import multi_graft_best_pocket_onto_scaffold\n\n# First define ligand residues and design positions as before\ndesign_positions = {\"C\": [\"510\", \"513\", \"514\", \"517\", \"523\", \"558\", \"559\"]}\nligand_residues = {\"A\": {\"131\": \"THR\", \"132\": \"ASN\"}}\n\n# In this case the ouput_name will not be taken as is, but extended with an index (starting from 1) for each \n# grafting result: ./design1.pdb ./design2.pdb ./design3.pdb ...\nresult = multi_graft_best_pocket_onto_scaffold(pockets=pockets, scaffold_name=\"./1z5s.pdb\", \n                                               ligand_residues=ligand_residues, design_positions=design_positions, \n                                               output_name=\"./design.pdb\", n_solutions=5)\n# You can inspect the results:\nfor res_i, (penalty, graft, design) in enumerate(result):\n    print(f\"Result {res_i} with penalty of {penalty} includes the following grafted mutations:\\n{graft}\")\n```\n\n# Acknowledgments\n\nThis tool is the work of the Protein Design group of Prof. Dr. Birte Höcker at University of Bayreuth.\nWe thankfully use software packages to enable ATLIGATOR functionality.\nThis is a non-exhaustive list of requirements:\n- biopython\n- numpy\n- plotly\n- matplotlib\n- scipy\n- pandas\n- tqdm\n\nThis work was enabled by the European Research Council (H2020-FETOpen-RIA grant 764434 'Pre-ART').\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hoecker-Lab/atligator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atligator",
    "package_url": "https://pypi.org/project/atligator/",
    "platform": null,
    "project_url": "https://pypi.org/project/atligator/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Hoecker-Lab/atligator/issues",
      "Homepage": "https://github.com/Hoecker-Lab/atligator"
    },
    "release_url": "https://pypi.org/project/atligator/0.0.10/",
    "requires_dist": [
      "biopython",
      "numpy (>=1.13)",
      "plotly (>=5.1.0)",
      "matplotlib",
      "scipy",
      "pandas",
      "tqdm"
    ],
    "requires_python": ">=3.7",
    "summary": "Atlas based editing of protein interactions",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15233659,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b95f73b24faa43ca22334c6064bcacc11fb209a40484f7c1e346d72fe4befb09",
          "md5": "f5c19211b6c2544a93099b4ef85037c4",
          "sha256": "7c0e0bd96b8121046dbebecc4664eb52bf5e7ad7257fe1af5c5231f8764a77a0"
        },
        "downloads": -1,
        "filename": "atligator-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5c19211b6c2544a93099b4ef85037c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 136687,
        "upload_time": "2022-09-27T21:17:22",
        "upload_time_iso_8601": "2022-09-27T21:17:22.477201Z",
        "url": "https://files.pythonhosted.org/packages/b9/5f/73b24faa43ca22334c6064bcacc11fb209a40484f7c1e346d72fe4befb09/atligator-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2891c27b721defb9dc56e48f3c5022943681cb9312e6bfbaf0ce9b8cd4f677fb",
          "md5": "9af990080d414335e51945a27d9d7a2c",
          "sha256": "04389fd560e1122531831d2262089e7097eb324a018eff3591cd62eb9e1d4f16"
        },
        "downloads": -1,
        "filename": "atligator-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9af990080d414335e51945a27d9d7a2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 131957,
        "upload_time": "2022-09-27T21:17:25",
        "upload_time_iso_8601": "2022-09-27T21:17:25.700379Z",
        "url": "https://files.pythonhosted.org/packages/28/91/c27b721defb9dc56e48f3c5022943681cb9312e6bfbaf0ce9b8cd4f677fb/atligator-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7601cbc1a7137bfd8d115f379a54c925237110fc4489f981200654552d95a3d",
          "md5": "a73a2f1528da337ba1163c40261fbb27",
          "sha256": "c79ae31695a6f0a1b8748736b54465c069f4629daa51ac9246f7d27da324a0a2"
        },
        "downloads": -1,
        "filename": "atligator-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a73a2f1528da337ba1163c40261fbb27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117139,
        "upload_time": "2021-12-08T15:29:49",
        "upload_time_iso_8601": "2021-12-08T15:29:49.702002Z",
        "url": "https://files.pythonhosted.org/packages/a7/60/1cbc1a7137bfd8d115f379a54c925237110fc4489f981200654552d95a3d/atligator-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a777368c3fa24d8c2b5d88ca5abf62a6ba6c4c4c161ae97fffda88e1170ffa81",
          "md5": "84cf49cbe191de47c2604970b0f9829a",
          "sha256": "94e54d745d5b305519b60d0f5474697d10efff92fe65dc10b0c7cb2721f70230"
        },
        "downloads": -1,
        "filename": "atligator-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "84cf49cbe191de47c2604970b0f9829a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 107552,
        "upload_time": "2021-12-08T15:29:51",
        "upload_time_iso_8601": "2021-12-08T15:29:51.434658Z",
        "url": "https://files.pythonhosted.org/packages/a7/77/368c3fa24d8c2b5d88ca5abf62a6ba6c4c4c161ae97fffda88e1170ffa81/atligator-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e30684a8165bffd55570645c7c53b5db824df21d8f9e1519e45dd9c174694ccc",
          "md5": "e1f8d1830c5e50fc669baed23ee657bc",
          "sha256": "cfce1106a0b0d3ba412234ce93a770e902e61f2cfb87cc246c6bd69403c63b1b"
        },
        "downloads": -1,
        "filename": "atligator-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1f8d1830c5e50fc669baed23ee657bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117139,
        "upload_time": "2021-12-08T15:32:30",
        "upload_time_iso_8601": "2021-12-08T15:32:30.179924Z",
        "url": "https://files.pythonhosted.org/packages/e3/06/84a8165bffd55570645c7c53b5db824df21d8f9e1519e45dd9c174694ccc/atligator-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06f8c13102bb9ebe6e93dbe39bf53a75e4804005660031a3e1e42794cddba7cf",
          "md5": "c463be0010af11d947715b64c6a498d8",
          "sha256": "4d63417bc781360fa22ddea0f6775ce2c076eb03b58ca2efc5a2a0d98000ffe7"
        },
        "downloads": -1,
        "filename": "atligator-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c463be0010af11d947715b64c6a498d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 107567,
        "upload_time": "2021-12-08T15:32:32",
        "upload_time_iso_8601": "2021-12-08T15:32:32.210399Z",
        "url": "https://files.pythonhosted.org/packages/06/f8/c13102bb9ebe6e93dbe39bf53a75e4804005660031a3e1e42794cddba7cf/atligator-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58bb85eae72f8a95b55218dc92aa0a8ea32fbb7975260bc0d6438339329e5c5e",
          "md5": "49b5efa12d245b6570390632f297d44c",
          "sha256": "6d9bc5d6be9d44571ba75409e1ed3bd4b29b3fd1066712adea8ac1e50f573b62"
        },
        "downloads": -1,
        "filename": "atligator-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49b5efa12d245b6570390632f297d44c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117354,
        "upload_time": "2021-12-08T18:30:37",
        "upload_time_iso_8601": "2021-12-08T18:30:37.397798Z",
        "url": "https://files.pythonhosted.org/packages/58/bb/85eae72f8a95b55218dc92aa0a8ea32fbb7975260bc0d6438339329e5c5e/atligator-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be0b4a311b650d561f70e18946ac98291e12b5a84650e35a69c5cee6ec3e72c4",
          "md5": "0464f46d4b689c7a17cb45533a8cadc2",
          "sha256": "81b2e1bb55c570c8e4357dd396edbba134ed9ef2cb999642d7c3c754c24660e4"
        },
        "downloads": -1,
        "filename": "atligator-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0464f46d4b689c7a17cb45533a8cadc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 107944,
        "upload_time": "2021-12-08T18:30:38",
        "upload_time_iso_8601": "2021-12-08T18:30:38.936235Z",
        "url": "https://files.pythonhosted.org/packages/be/0b/4a311b650d561f70e18946ac98291e12b5a84650e35a69c5cee6ec3e72c4/atligator-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f007b6df29c66eb43b8c3e0c9913fc93731078ab09156967bde92291d2863713",
          "md5": "3a5dc30975ecc021c97f5be1b66b84fb",
          "sha256": "22d93bc038e7d599e942d7d9bd2ce42092bb1b55e6605ad3022ff0cd0f647fdc"
        },
        "downloads": -1,
        "filename": "atligator-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a5dc30975ecc021c97f5be1b66b84fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 117534,
        "upload_time": "2021-12-09T19:40:51",
        "upload_time_iso_8601": "2021-12-09T19:40:51.707612Z",
        "url": "https://files.pythonhosted.org/packages/f0/07/b6df29c66eb43b8c3e0c9913fc93731078ab09156967bde92291d2863713/atligator-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1a5dbb6338d35fa9246915a5312d137f8bbe30ed1f29cf8307a8211c62946fa",
          "md5": "3ce82ea750eb6254e2afaa3ac0c4a27b",
          "sha256": "2975438be90152d8f43097769135a4beb056bb4a22ee6f6fc6996892c84d7b21"
        },
        "downloads": -1,
        "filename": "atligator-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3ce82ea750eb6254e2afaa3ac0c4a27b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 108178,
        "upload_time": "2021-12-09T19:40:53",
        "upload_time_iso_8601": "2021-12-09T19:40:53.237101Z",
        "url": "https://files.pythonhosted.org/packages/a1/a5/dbb6338d35fa9246915a5312d137f8bbe30ed1f29cf8307a8211c62946fa/atligator-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "173d14b23e42d3370b45eb5da89d514d2ed60143e7ec613fdbd79be1e6d8e7f6",
          "md5": "c74bc33cdc3b547bd35105e9954e9457",
          "sha256": "eaed21f8c31bbfe665149e2d0bd0a99c3ef497c16fdb3a3e7a3bf7f0584063e1"
        },
        "downloads": -1,
        "filename": "atligator-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c74bc33cdc3b547bd35105e9954e9457",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 123822,
        "upload_time": "2021-12-15T15:15:46",
        "upload_time_iso_8601": "2021-12-15T15:15:46.150458Z",
        "url": "https://files.pythonhosted.org/packages/17/3d/14b23e42d3370b45eb5da89d514d2ed60143e7ec613fdbd79be1e6d8e7f6/atligator-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9744be2cad5325fc73e037aaebe348e80b316c303e8d4037a89f817898896906",
          "md5": "7d8eb30e46a0f5562270f3912ba9f0ad",
          "sha256": "872c4d6fcb0d3645fb3240364d87efb42c969b76fa8c1a459e13526d56c46d1d"
        },
        "downloads": -1,
        "filename": "atligator-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7d8eb30e46a0f5562270f3912ba9f0ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 117953,
        "upload_time": "2021-12-15T15:15:48",
        "upload_time_iso_8601": "2021-12-15T15:15:48.509305Z",
        "url": "https://files.pythonhosted.org/packages/97/44/be2cad5325fc73e037aaebe348e80b316c303e8d4037a89f817898896906/atligator-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ae802bb6947882ea779c1d9f5246dc558fa905694fb7ce436a8b736f6dc3d0d",
          "md5": "0945b137abe2f957e1e17a4b09ad249f",
          "sha256": "6f68894c99c4902d8e2f6525dee6b9702da036a7f299484f0456647246bed4b2"
        },
        "downloads": -1,
        "filename": "atligator-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0945b137abe2f957e1e17a4b09ad249f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 126175,
        "upload_time": "2021-12-22T16:01:07",
        "upload_time_iso_8601": "2021-12-22T16:01:07.988032Z",
        "url": "https://files.pythonhosted.org/packages/6a/e8/02bb6947882ea779c1d9f5246dc558fa905694fb7ce436a8b736f6dc3d0d/atligator-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23a5f0283ffe1cfeb68475b048a9a4bef13140b8d3a43395ca504ccb1596d524",
          "md5": "dc34236f77cbfa7710430603c327e336",
          "sha256": "8e47332303b4d15392654ecaa1baa4577c434cd31e97f552613e3a30689f7900"
        },
        "downloads": -1,
        "filename": "atligator-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "dc34236f77cbfa7710430603c327e336",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 121852,
        "upload_time": "2021-12-22T16:01:10",
        "upload_time_iso_8601": "2021-12-22T16:01:10.409799Z",
        "url": "https://files.pythonhosted.org/packages/23/a5/f0283ffe1cfeb68475b048a9a4bef13140b8d3a43395ca504ccb1596d524/atligator-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b58fd7be102d516e09339bb542aa2c2f4716edd092ae3fa63a1f63d1da4e9ce0",
          "md5": "02356512a97a6a440474eb2049d4ee45",
          "sha256": "eee92fa57c31b686afe949874f1cdbfdcc301d74d40403820c407a9023d0d681"
        },
        "downloads": -1,
        "filename": "atligator-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02356512a97a6a440474eb2049d4ee45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 136056,
        "upload_time": "2022-01-19T14:27:15",
        "upload_time_iso_8601": "2022-01-19T14:27:15.985592Z",
        "url": "https://files.pythonhosted.org/packages/b5/8f/d7be102d516e09339bb542aa2c2f4716edd092ae3fa63a1f63d1da4e9ce0/atligator-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "053a3b3f42fd3806c36f15e34092e4dbb4f91d0fa29ff396802942f9323e6c63",
          "md5": "a66c3540f95ff3f687e7aadeab0e7078",
          "sha256": "99b6ccf5f29e66493a7538df5c6eb69e9f2568aa4ba2ddd12af84e7a09e0e8b7"
        },
        "downloads": -1,
        "filename": "atligator-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a66c3540f95ff3f687e7aadeab0e7078",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 130896,
        "upload_time": "2022-01-19T14:27:17",
        "upload_time_iso_8601": "2022-01-19T14:27:17.912331Z",
        "url": "https://files.pythonhosted.org/packages/05/3a/3b3f42fd3806c36f15e34092e4dbb4f91d0fa29ff396802942f9323e6c63/atligator-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daa6c5391d8866c6173335063b39ebab45c7924dedc398ef3b9596468b379a58",
          "md5": "5ef1e7be670faaa87bec302f25282fe7",
          "sha256": "ee4e500d1747cc154d4522d40ec22d5d92baa8e9e0350a9cfc9c60d1d95e4b5b"
        },
        "downloads": -1,
        "filename": "atligator-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ef1e7be670faaa87bec302f25282fe7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 136604,
        "upload_time": "2022-03-25T09:47:52",
        "upload_time_iso_8601": "2022-03-25T09:47:52.030334Z",
        "url": "https://files.pythonhosted.org/packages/da/a6/c5391d8866c6173335063b39ebab45c7924dedc398ef3b9596468b379a58/atligator-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbf0df6ef422b0b5e173bf99e68442da183397c2a212411a0d5ee0b42d077b74",
          "md5": "10bf1bb1ec3dab4278f12bbb4568281e",
          "sha256": "d693a619637ee26c6e636ac5cbce3e8f422af9326e6e2ac7fa79c32d8ef4e3e0"
        },
        "downloads": -1,
        "filename": "atligator-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "10bf1bb1ec3dab4278f12bbb4568281e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 131965,
        "upload_time": "2022-03-25T09:47:54",
        "upload_time_iso_8601": "2022-03-25T09:47:54.293056Z",
        "url": "https://files.pythonhosted.org/packages/bb/f0/df6ef422b0b5e173bf99e68442da183397c2a212411a0d5ee0b42d077b74/atligator-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b95f73b24faa43ca22334c6064bcacc11fb209a40484f7c1e346d72fe4befb09",
        "md5": "f5c19211b6c2544a93099b4ef85037c4",
        "sha256": "7c0e0bd96b8121046dbebecc4664eb52bf5e7ad7257fe1af5c5231f8764a77a0"
      },
      "downloads": -1,
      "filename": "atligator-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5c19211b6c2544a93099b4ef85037c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 136687,
      "upload_time": "2022-09-27T21:17:22",
      "upload_time_iso_8601": "2022-09-27T21:17:22.477201Z",
      "url": "https://files.pythonhosted.org/packages/b9/5f/73b24faa43ca22334c6064bcacc11fb209a40484f7c1e346d72fe4befb09/atligator-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2891c27b721defb9dc56e48f3c5022943681cb9312e6bfbaf0ce9b8cd4f677fb",
        "md5": "9af990080d414335e51945a27d9d7a2c",
        "sha256": "04389fd560e1122531831d2262089e7097eb324a018eff3591cd62eb9e1d4f16"
      },
      "downloads": -1,
      "filename": "atligator-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "9af990080d414335e51945a27d9d7a2c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 131957,
      "upload_time": "2022-09-27T21:17:25",
      "upload_time_iso_8601": "2022-09-27T21:17:25.700379Z",
      "url": "https://files.pythonhosted.org/packages/28/91/c27b721defb9dc56e48f3c5022943681cb9312e6bfbaf0ce9b8cd4f677fb/atligator-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}