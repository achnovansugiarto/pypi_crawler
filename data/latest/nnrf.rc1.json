{
  "info": {
    "author": "paradoxysm",
    "author_email": "paradoxysm.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## Neural Network with Random Forest Structure\n\n[![Travis](https://flat.badgen.net/travis/paradoxysm/nnrf?label=build)](https://travis-ci.com/paradoxysm/nnrf)\n[![Codecov](https://flat.badgen.net/codecov/c/github/paradoxysm/nnrf?label=coverage)](https://codecov.io/gh/paradoxysm/nnrf)\n[![GitHub](https://flat.badgen.net/github/license/paradoxysm/nnrf)](https://github.com/paradoxysm/nnrf/blob/master/LICENSE)\n\nNNRF is a neural network with random forest structure as detailed by [Wang, S. et. al.](https://pdfs.semanticscholar.org/c0b1/2e04be429e70c0303215a3df21f5c5843052.pdf). This package is implemented similar to the `sklearn` API style. It is not fully faithful as it includes modularity regarding activation, regularization, loss, and optimizer functions.\n\nThe NNDT is structured like a binary decision tree with each node simulating a split. Furthermore, each node is a visible-hidden hybrid, taking in input from it ancestor node along with *r* features from the data. By training through backpropagation, NNDTs are able to model more powerful splits as well as tune all splits from leaf to root, resulting in better performance compared to traditional decision trees.\n\nThe NNRF creates an ensemble of NNDTs that are each trained with bootstrapped data and features, resulting in a powerful model that generalizes well. `nnrf` also allows NNRFs to be stacked with secondary classifiers that can learn better decision-making models over the basic voting schematic of random forests.\n\nMore details regarding `nnrf` can be found in the documentation [here](https://github.com/paradoxysm/nnrf/tree/master/doc).\n\n## Installation\n\nOnce you have a suitable python environment setup, `nnrf` can be easily installed using `pip`:\n```\npip install nnrf\n```\n> `nnrf` is tested and supported on Python 3.4+ up to Python 3.7. Usage on other versions of Python is not guaranteed to work as intended.\n\n## Using NNRFs and NNDTs\n\nNNRFs and NNDTs can be used to classify data very easily. Furthermore, they generally follow sklearn's API.\n\n```python\nfrom nnrf import NNRF\n\n# Create and fit an NNRF model with 50 NNDTs with depth of 5\nnnrf = NNRF(n=50, d=5).fit(X_train, Y_train)\n\n# Predict some data\npredictions = nnrf.predict(X_test)\n# Or just get the raw probabilities\npredictions = nnrf.predict_proba(X_test)\n```\n\n`nnrf` is built with modular activation, loss, regularization, and optimization algorithms, making it simple to build models with different or even custom implementations.\n\n```python\nfrom nnrf import NNRF\nfrom nnrf import ml\n\n# Using some default options\nnnrf = NNRF(loss='cross-entropy', optimizer='adam', regularize='l2')\n# Using some custom options\no = ml.optimizer.SGD(alpha=0.01) \t# SGD with a learning rate of 0.01\nr = ml.regularizer.L2(c=0.001) \t\t# L2 Regularization with strength at 0.001\na = ml.activation.PReLU(a=0.4)\t\t# PReLU activation with parameter of 0.4\nnnrf = NNRF(optimizer=o, regularizer=r, activation=r)\n```\n\nFinally, a secondary classifier can easily be stacked upon the random forest. `nnrf` provides a simple neural network implementation as well as a dynamic ensemble selection method (DES-kNN).\n\n```python\nfrom nnrf import NNRF, NeuralNetwork, DESKNN\n\n# Create a simple neural network\nnn = NeuralNetwork(layers=(100,))\n# Create and fit an NNRF that feeds into our neural network.\nnnrf = NNRF(n=50, d=5).fit(X_train, Y_train)\np = np.array([])\nfor e in nnrf.estimators_:\n\tp = np.concatenate((p, e.predict_proba(X_stack)), axis=1)\nnn.fit(p, Y_stack)\n\n# We can also create a DES-kNN\nnnrf = NNRF(n=50, d=5).fit(X_train, Y_train)\ndes = DESKNN(ensemble=nnrf, k=100).fit(X_stack, Y_stack)\n```\n\nFor full details on usage, see the [documentation](https://github.com/paradoxysm/nnrf/tree/master/doc).\n\n## Changelog\n\nSee the [changelog](https://github.com/paradoxysm/nnrf/blob/master/CHANGES.md) for a history of notable changes to nnrf.\n\n## Development\n\n[![Code Climate maintainability](https://img.shields.io/codeclimate/maintainability-percentage/paradoxysm/nnrf?style=flat-square)](https://codeclimate.com/github/paradoxysm/nnrf/maintainability)\n\n`nnrf` is mostly complete, however could use some more rigorous testing.\nFinally, `nnrf` doesn't faithfully implement sklearn's API all too well - it was meant to follow the API in spirit but wasn't intended to be integrated (as of yet). Any assistance on this is more than welcome!\n\n## Help and Support\n\n### Documentation\n\nDocumentation for `nnrf` can be found [here](https://github.com/paradoxysm/nnrf/tree/master/doc).\n\n### Issues and Questions\n\nIssues and Questions should be posed to the issue tracker [here](https://github.com/paradoxysm/nnrf/issues).\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/paradoxysm/nnrf/archive/0.9.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/paradoxysm/nnrf",
    "keywords": "python,ml,neural-network,random-forest",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nnrf",
    "package_url": "https://pypi.org/project/nnrf/",
    "platform": "",
    "project_url": "https://pypi.org/project/nnrf/",
    "project_urls": {
      "Download": "https://github.com/paradoxysm/nnrf/archive/0.9.0.tar.gz",
      "Homepage": "http://github.com/paradoxysm/nnrf"
    },
    "release_url": "https://pypi.org/project/nnrf/0.9.0/",
    "requires_dist": [
      "numpy",
      "tqdm",
      "sklearn"
    ],
    "requires_python": ">=3.4, <4",
    "summary": "Neural Network with Random Forest Structure",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7298539,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4020eb2ffb0a81da9b7cacc146a5bf7508f9853b49d444a1d71aaddd80d0cf96",
          "md5": "d6dc0f7e61735017ac8f202c8fa6a7c2",
          "sha256": "23ff8525a1c168b62c2c3b159e930e79c51a55d180991b6990c3072d758addf7"
        },
        "downloads": -1,
        "filename": "nnrf-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6dc0f7e61735017ac8f202c8fa6a7c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4, <4",
        "size": 39003,
        "upload_time": "2020-05-22T00:50:14",
        "upload_time_iso_8601": "2020-05-22T00:50:14.214139Z",
        "url": "https://files.pythonhosted.org/packages/40/20/eb2ffb0a81da9b7cacc146a5bf7508f9853b49d444a1d71aaddd80d0cf96/nnrf-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76c68856451253add7cfc936907667377e70519e5538bf6a6898a390f6584754",
          "md5": "239d8efb6fad004303e967fcc8c0eb19",
          "sha256": "77025e6f2ccf24fd6ff6e614714fd2b2e37cd281a57e246e8c5677327765017e"
        },
        "downloads": -1,
        "filename": "nnrf-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "239d8efb6fad004303e967fcc8c0eb19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4, <4",
        "size": 26473,
        "upload_time": "2020-05-22T00:50:17",
        "upload_time_iso_8601": "2020-05-22T00:50:17.005247Z",
        "url": "https://files.pythonhosted.org/packages/76/c6/8856451253add7cfc936907667377e70519e5538bf6a6898a390f6584754/nnrf-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4020eb2ffb0a81da9b7cacc146a5bf7508f9853b49d444a1d71aaddd80d0cf96",
        "md5": "d6dc0f7e61735017ac8f202c8fa6a7c2",
        "sha256": "23ff8525a1c168b62c2c3b159e930e79c51a55d180991b6990c3072d758addf7"
      },
      "downloads": -1,
      "filename": "nnrf-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6dc0f7e61735017ac8f202c8fa6a7c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4, <4",
      "size": 39003,
      "upload_time": "2020-05-22T00:50:14",
      "upload_time_iso_8601": "2020-05-22T00:50:14.214139Z",
      "url": "https://files.pythonhosted.org/packages/40/20/eb2ffb0a81da9b7cacc146a5bf7508f9853b49d444a1d71aaddd80d0cf96/nnrf-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76c68856451253add7cfc936907667377e70519e5538bf6a6898a390f6584754",
        "md5": "239d8efb6fad004303e967fcc8c0eb19",
        "sha256": "77025e6f2ccf24fd6ff6e614714fd2b2e37cd281a57e246e8c5677327765017e"
      },
      "downloads": -1,
      "filename": "nnrf-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "239d8efb6fad004303e967fcc8c0eb19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4, <4",
      "size": 26473,
      "upload_time": "2020-05-22T00:50:17",
      "upload_time_iso_8601": "2020-05-22T00:50:17.005247Z",
      "url": "https://files.pythonhosted.org/packages/76/c6/8856451253add7cfc936907667377e70519e5538bf6a6898a390f6584754/nnrf-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}