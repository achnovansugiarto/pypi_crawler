{
  "info": {
    "author": "Robert Lujo",
    "author_email": "trebor74hr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sqlalchemy-capture-sql\n\nsqlalchemy-capture-sql is a library that enables capturing\n[SQLAlchemy](https://www.sqlalchemy.org/) SQL statements / queries.\nEach SQL statement is captured along with passed parameters and approx.\nduration of execution time. It provides reporting and analysis functionalities,\nfor instance: aggregations by type of sql command, table name, list of slowest\nqueries and so on.\n\n## Motivation\nDjango has\n[django.db.connection.queries](https://docs.djangoproject.com/en/4.0/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running)\nconnection property that enables user to display executed raw SQL queries\n(DEBUG mode only).\nSometimes in debugging or unit testing this can serve the purpose to check and\ncontrol number and type of sql statements executed for monitored case, along\nwith allowed duration times. I wanted to create similar functionality for\nSQLAlchemy and provide additional statistics and analysis functions. \n\n## How it works\nInternally it uses \n[event.listens_for(engine, 'before_cursor_execute'](https://docs.sqlalchemy.org/en/13/core/events.html?highlight=before_cursor_execute#sqlalchemy.events.ConnectionEvents.before_cursor_execute)\nevent handler, e.g.:\n\n    @event.listens_for(engine, 'before_cursor_execute')\n    def capture_sa_statement_listener(...)\n\nIt simply collects all sql statements sent to event listener by SQLAlchemy (sent\njust before execution) and statements are collected in CaptureSqlStatements\ninstance until .finish() method is called (or \"with\" context is exited).\n\nAdditionally it provides time measurement (see REMARKS), stats and formatting\nfunctions, see Examples.\n\n## REMARKS\n\nSome remarks:\n\n * duration measurement is not actual DB execution time, **system\n   measures time between 2 sql statements captures**\n\n * system tries to detect type of sql command (select, insert, ...) and first\n   referenced table/db-object name, but the logic behind is very simple and one\n   should not rely on it.\n\nTested and developed on Python 3.7+SQLAlchemy 1.3, but I assume it should work\non later and probably some previous versions.\n\n\n## Installation\nAs usual:\n\n    pip install sqlalchemy-capture-sql\n\n## Usage example\n\nStandard usage is by using python's **with** statement:\n\n    from sqlalchemy_capture_sql import CaptureSqlStatements\n\n    with CaptureSqlStatements(sqlalchemy_engine) as capture_stmts:\n\n        # put here calls to functions that issue sqlalchemy commands that\n        # produce some sql statements execution, for example factory-boy:\n        cpm = FactoryModel.create()\n\n        # call to .finish() automatically done on with ctx exit\n    capture_stmts.pp()\n\nbut standard style works too - finish() needs to be called:\n\n    capture_stmts = CaptureSqlStatements(sqlalchemy_engine)\n\n    # put here calls to functions that issue sqlalchemy commands that\n    # produce some sql statements execution, for example factory-boy:\n    cpm = FactoryModel.create()\n\n    # in this case .finish() needs to be called to stop capturing\n    capture_stmts.finish()\n\n\nCalling pretty print function:\n\n    capture_stmts.pp()\n\nthe library will make full report, for instance:\n\n    ============================================================\n      1. 0.0020 INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n         <- 'joe+Joe Joey+joey'\n      2. 0.0009 SELECT FROM users  WHERE users.id = ?\n         <- '2'\n      ...\n    ============================================================\n    == Slowest (top 5):\n          1. INSERT USERS             1   0.002 s INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n          2. INSERT USERS             1   0.001 s INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n          ...\n    ============================================================\n    == By sql command (top 20):\n        INSERT               2   0.003 s\n        SELECT               4   0.003 s\n        UPDATE               1   0.001 s\n        DELETE               1   0.001 s\n    ============================================================\n    == By table (top 20):\n        USERS                6   0.007 s\n        ...\n    ============================================================\n    == By sql command + table (top 20):\n        INSERT USERS             2   0.003 s\n        SELECT USERS             2   0.002 s\n        UPDATE USERS             1   0.001 s\n        ...\n\n    == Totally captured 8 statement(s) in 0.008866 s\n\n### Working example - a long one\n\nThis working example illustrates use of some raw sqls and ORM objects (inspired by\n[SqlAlchemy 1.3 tutorial](https://docs.sqlalchemy.org/en/13/orm/tutorial.html)):\n\n    from sqlalchemy_capture_sql import CaptureSqlStatements\n    from sqlalchemy import create_engine, text, Column, Integer, String\n    from sqlalchemy.ext.declarative import declarative_base\n    from sqlalchemy.orm import sessionmaker\n\n    Base = declarative_base()\n\n    class User(Base):\n        __tablename__ = 'users'\n\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n        fullname = Column(String)\n        nickname = Column(String)\n\n\n    engine = create_engine('sqlite:///:memory:', echo=False)\n    conn = engine.connect()\n\n    Base.metadata.create_all(engine)\n    Session = sessionmaker(bind=engine)\n\n    session = Session()\n\n    # This orm operation won't be captured\n    user1 = User(name='ed', fullname='Ed Jones', nickname='edsnickname')\n    session.add(user1)\n    session.commit()\n\n    with CaptureSqlStatements(engine) as capture_stmts:\n        # All commands within engine executed in this with block will be captured\n        joe = User(name='joe', fullname='Joe Joey', nickname='joey')\n        session.add(joe)\n        session.commit()\n\n        session.query(User).count()\n\n        # one raw sql\n        conn.execute(text(\"select 'In-capture'\")).fetchall()\n\n        joe.nickname = \"Jo\"\n        session.commit()\n\n        session.add(User(name='Wrong', fullname='Wrong', nickname='wrong'))\n        session.rollback()\n\n        jack = User(name='Jack', fullname='Jackson', nickname='jackie')\n        session.add(jack)\n        session.commit()\n\n        session.delete(jack)\n        session.commit()\n\n    # This orm operation won't be captured\n    session.add(User(name='Mick', fullname='Michael', nickname='mick'))\n    assert session.query(User).count(), 3\n\n    assert capture_stmts.get_counts(\"by_type\"), {'INSERT': 2, 'SELECT': 4, 'UPDATE': 1, 'DELETE': 1}\n    assert capture_stmts.get_counts(\"by_table\"), {\"'IN-CAPTURE'\": 1, '(SELECT': 1, 'USERS': 6}\n    assert capture_stmts.get_counts(\"by_type_and_table\"), {\n        'DELETE USERS': 1,\n        'INSERT USERS': 2,\n        \"SELECT 'IN-CAPTURE'\": 1,\n        'SELECT (SELECT': 1,\n        'SELECT USERS': 2,\n        'UPDATE USERS': 1}\n\n    assert [st.stmt_repr for st in capture_stmts.statements], [\n        'INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)',\n        'SELECT FROM (SELECT users.id AS users_id, users.name AS users_name, '\n            'users.fullname AS users_fullname, users.nickname AS users_nickname \\n'\n            'FROM users) AS anon_1',\n        \"select 'In-capture'\",\n        'SELECT FROM users \\nWHERE users.id = ?',\n        'UPDATE users SET nickname=? WHERE users.id = ?',\n        'INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)',\n        'SELECT FROM users \\nWHERE users.id = ?',\n        'DELETE FROM users WHERE users.id = ?']\n\n\nCall to pretty-print function:\n\n    capture_stmts.pp()\n\nProduces:\n\n    ============================================================\n    == NOTE: duration measures time between 2 captures, it is not actual DB execution time.\n    == Totally captured 8 statement(s) in 0.008866 s:\n      1. 0.0020 INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n         <- 'joe+Joe Joey+joey'\n      2. 0.0005 SELECT FROM (SELECT users.id AS users_id, users.name AS users_name, us\n      3. 0.0010 select 'In-capture'\n      4. 0.0009 SELECT FROM users  WHERE users.id = ?\n         <- '2'\n      5. 0.0013 UPDATE users SET nickname=? WHERE users.id = ?\n         <- 'Jo+2'\n      6. 0.0014 INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n         <- 'Jack+Jackson+jackie'\n      7. 0.0007 SELECT FROM users  WHERE users.id = ?\n         <- '3'\n      8. 0.0005 DELETE FROM users WHERE users.id = ?\n         <- '3'\n\n    ============================================================\n    == Slowest (top 5):\n          1. INSERT USERS             1   0.002 s INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n          2. INSERT USERS             1   0.001 s INSERT INTO users (name, fullname, nickname) VALUES (?, ?, ?)\n          3. UPDATE USERS             1   0.001 s UPDATE users SET nickname=? WHERE users.id = ?\n          4. SELECT 'IN-CAPTURE'      1   0.001 s select 'In-capture'\n          5. SELECT USERS             1   0.001 s SELECT FROM users\n    WHERE users.id = ?\n\n    ============================================================\n    == By sql command (top 20):\n        INSERT               2   0.003 s\n        SELECT               4   0.003 s\n        UPDATE               1   0.001 s\n        DELETE               1   0.001 s\n\n    ============================================================\n    == By table (top 20):\n        USERS                6   0.007 s\n        'IN-CAPTURE'         1   0.001 s\n        (SELECT              1   0.000 s\n\n    ============================================================\n    == By sql command + table (top 20):\n        INSERT USERS             2   0.003 s\n        SELECT USERS             2   0.002 s\n        UPDATE USERS             1   0.001 s\n        SELECT 'IN-CAPTURE'      1   0.001 s\n        DELETE USERS             1   0.001 s\n        SELECT (SELECT           1   0.000 s\n\n    ============================================================\n    == Totally captured 8 statement(s) in 0.008866 s\n\n\nOne can iterate all capture statement objects:\n\n    for statement in capture_stmts:\n        print(statement.statement)\n        print(statement.tst_started)\n        print(statement.duration)    # BEWARE: not actual DB execution time, \n                                               Rounded on 2 decimal places.\n        print(statement.stmt_repr)   # Dropped list of columns from SELECT\n        print(statement.parameters)\n        print(statement.executemany) # bool\n        print(statement.sql_type)    # BEWARE: do not rely on this\n        print(statement.first_table) # BEWARE: do not rely on this\n\n\n## Misc\n\n### Other methods\n\nCheck also other instance methods of CaptureSqlStatements in order to get some\nstats in list/dict objects, for instance:\n\n    count() -> int\n    get_counts(name:StatName) -> Dict[str, int]\n    get_slowest(top:int=TOP_DEFAULT_SLOWEST) -> List[Stat]\n    get_statement_by_row_id(row_id:int) -> SqlStatement\n    get_stats(name: StatName, top:int=TOP_DEFAULT) -> Tuple[int, List[Stat]]\n    pp(verbose:bool=False, print_cmd:Callable=print)\n    report_counter(name: StatName, top:int=TOP_DEFAULT) -> str\n    report_slowest(verbose=False) -> str\n    report_stats(name: StatName, top:int=TOP_DEFAULT, fields:List[str]=AGG_FIELDS) -> str\n\n### Sqlite3 internal database\n\nInternally library uses\n[sqlite3](https://docs.python.org/3/library/sqlite3.html) in memory database to\nstore basic statement information.  Database is used for statistics,\naggregations and finding slowest queries, but one can use it for further\nanalysis, e.g.:\n\n    cursor = capture_stmts.connection.cursor()\n    cursor.execute(f\"select id, sql_type, first_table, duration from sql_statement order by duration desc limit 100\")\n    for row in cursor.fetchall():\n        row_id, sql_type, first_table, duration = row\n        stmt = capture_stmts.get_statement_by_row_id(row_id)\n        print(f\"{sql_type} {first_table} {duration} : {stmt.statement} <- {stmt.parameters}\")\n\n### SQLAlchemy statements logging\n\nSQLAlchemy can log sql statements when log on \"sqlalchemy.engine\" level is set\nat least to INFO level:\n\n    import logging\n    logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO) \n\nThis functionalitiy also attached to CaptureSqlStatements as static methods in:\n\n    sqlalchemy_log_statements_enable()\n    sqlalchemy_log_statements_disable()\n\nAlternative is providing echo=True attribute when creating SqlAlchemy.Engine\nwith echo attribute, for instance:\n\n    engine = create_engine('sqlite:///...', echo=True)\n\n\n## Running tests\n\nDo git clone of the repository, go to root folder and run:\n\n    python tests/test_basic.py\n\nTo see verbose output - pp() result, run like this:\n\n    VERBOSE=1 python tests/test_basic.py\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trebor74hr/sqlalchemy-capture-sql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-capture-sql",
    "package_url": "https://pypi.org/project/sqlalchemy-capture-sql/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlalchemy-capture-sql/",
    "project_urls": {
      "Homepage": "https://github.com/trebor74hr/sqlalchemy-capture-sql"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-capture-sql/0.2.4/",
    "requires_dist": null,
    "requires_python": ">=3.2",
    "summary": "A small library that enables capturing SQLAlchemy SQL statements / queries.",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13499810,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1636030ea64f7b149768ec4425bd03a2feea88a131937a46f23f866291fb2c78",
          "md5": "d4acd3bd44e424944a5f0058af80640f",
          "sha256": "57ed85776923f25c911d252d6a9a77764b6622efb79dafd0d67be12fc49e9414"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4acd3bd44e424944a5f0058af80640f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 3584,
        "upload_time": "2022-04-09T17:58:07",
        "upload_time_iso_8601": "2022-04-09T17:58:07.879326Z",
        "url": "https://files.pythonhosted.org/packages/16/36/030ea64f7b149768ec4425bd03a2feea88a131937a46f23f866291fb2c78/sqlalchemy_capture_sql-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8df4d53f860cdd19682ea34760219ba46c95deafa95d5845a8c067e621bbc71",
          "md5": "e8e90c592f1333a6ca21614394a6f72c",
          "sha256": "d8841686abe8a60760c31f40c44a365e6e44e9edae52fff4933e4d62ce56e15a"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8e90c592f1333a6ca21614394a6f72c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 3254,
        "upload_time": "2022-04-09T17:58:09",
        "upload_time_iso_8601": "2022-04-09T17:58:09.766934Z",
        "url": "https://files.pythonhosted.org/packages/b8/df/4d53f860cdd19682ea34760219ba46c95deafa95d5845a8c067e621bbc71/sqlalchemy-capture-sql-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e2c8dd7dc3a98ef5edaa4d1c014209bbe1f8c617f317ec525c07e06a96fc73a",
          "md5": "ad6b5700f3bf3e5559ae96b6101ee319",
          "sha256": "1b8b9fa2ca34a891ac86a301d08f3bcf89c4e88423fdffdc5bdd2ae912dda2e9"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad6b5700f3bf3e5559ae96b6101ee319",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 4264,
        "upload_time": "2022-04-09T18:23:04",
        "upload_time_iso_8601": "2022-04-09T18:23:04.050438Z",
        "url": "https://files.pythonhosted.org/packages/7e/2c/8dd7dc3a98ef5edaa4d1c014209bbe1f8c617f317ec525c07e06a96fc73a/sqlalchemy_capture_sql-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c97e1dcb11f6bfe4828c7f28576b9f5d7e815c5729f40553520689cad04dceb",
          "md5": "b2c01d5dd84aae6fdf87be31fb89a722",
          "sha256": "243a96fd98be54a9bb394aa76e83449e95512841c97d2cda6f7ea2aae269dcd8"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2c01d5dd84aae6fdf87be31fb89a722",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 3961,
        "upload_time": "2022-04-09T18:23:05",
        "upload_time_iso_8601": "2022-04-09T18:23:05.644908Z",
        "url": "https://files.pythonhosted.org/packages/5c/97/e1dcb11f6bfe4828c7f28576b9f5d7e815c5729f40553520689cad04dceb/sqlalchemy-capture-sql-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52e786cdd2dee2bfe2c10d75e0daaa4e337502dd522591afec2b419f63bc579a",
          "md5": "e91491cc02cad8d2c40a2774fa0bcf9c",
          "sha256": "5035a8d21c189aad3622e8c9142de1281031f21c64f5e1f51b67c9041ab9a863"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e91491cc02cad8d2c40a2774fa0bcf9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 4357,
        "upload_time": "2022-04-09T18:29:31",
        "upload_time_iso_8601": "2022-04-09T18:29:31.782860Z",
        "url": "https://files.pythonhosted.org/packages/52/e7/86cdd2dee2bfe2c10d75e0daaa4e337502dd522591afec2b419f63bc579a/sqlalchemy_capture_sql-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef2b3abb3050d27599f1c83ea8cf4db790392930a8ca095468d636b63b317fb",
          "md5": "5ae82205f31e1baa8fbd51b85c0199c2",
          "sha256": "1ad84424f43d44014031ce42d13bf1c67f70d5fec149cd1206658304dca9e4f6"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5ae82205f31e1baa8fbd51b85c0199c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 5994,
        "upload_time": "2022-04-09T18:29:33",
        "upload_time_iso_8601": "2022-04-09T18:29:33.191786Z",
        "url": "https://files.pythonhosted.org/packages/1e/f2/b3abb3050d27599f1c83ea8cf4db790392930a8ca095468d636b63b317fb/sqlalchemy-capture-sql-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe75044dce2535809475783b1652804c80ef7b64cae77afbf6f04f0ccba37cd8",
          "md5": "77735a8e67f7eeab2335d617df4b44bc",
          "sha256": "95e5f5998df133b217cfa150d74b8104083e9463cd75d840ded55da1d22de06e"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77735a8e67f7eeab2335d617df4b44bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 6682,
        "upload_time": "2022-04-09T18:35:41",
        "upload_time_iso_8601": "2022-04-09T18:35:41.134554Z",
        "url": "https://files.pythonhosted.org/packages/fe/75/044dce2535809475783b1652804c80ef7b64cae77afbf6f04f0ccba37cd8/sqlalchemy_capture_sql-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ba812a61d11bd3e274fab990570c26aa3e166e7749bf5b6b1cab0eb5aab6ba9",
          "md5": "73b2e8039c60bae3942f301fd1c616d9",
          "sha256": "ac0d17c04c275ef75952894059ec5cccc670118b20d547ce78c9bc6a22b9e88c"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73b2e8039c60bae3942f301fd1c616d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 6014,
        "upload_time": "2022-04-09T18:35:42",
        "upload_time_iso_8601": "2022-04-09T18:35:42.990971Z",
        "url": "https://files.pythonhosted.org/packages/3b/a8/12a61d11bd3e274fab990570c26aa3e166e7749bf5b6b1cab0eb5aab6ba9/sqlalchemy-capture-sql-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3b48e2b4c90bb0e38a95364d397f55dae9244c59c89c9802c79db85de214fd7",
          "md5": "5205cef0c7ccffc752765313889afa82",
          "sha256": "f01bd5efb35cf4e1d5eb11e31839d96aaeb8f2e85f81ebb66a3627a9c9e6acc8"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5205cef0c7ccffc752765313889afa82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 6736,
        "upload_time": "2022-04-09T18:48:34",
        "upload_time_iso_8601": "2022-04-09T18:48:34.611148Z",
        "url": "https://files.pythonhosted.org/packages/c3/b4/8e2b4c90bb0e38a95364d397f55dae9244c59c89c9802c79db85de214fd7/sqlalchemy_capture_sql-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4529444d539054858d7d2b050de5912fc12b99e86edb9b5d7aae59a3c43df1bf",
          "md5": "e324106c103a9f08e52ecc5406a3ac0c",
          "sha256": "e9be1abd1287535b4fbee060f294ce9ee86862ed83812c94390c7fe003622a08"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e324106c103a9f08e52ecc5406a3ac0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 6066,
        "upload_time": "2022-04-09T18:48:36",
        "upload_time_iso_8601": "2022-04-09T18:48:36.434754Z",
        "url": "https://files.pythonhosted.org/packages/45/29/444d539054858d7d2b050de5912fc12b99e86edb9b5d7aae59a3c43df1bf/sqlalchemy-capture-sql-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2a10e7fc5825efee2ca4f054ce6b89e3581c5dad76d1c480abd65759ef98628",
          "md5": "02d86b588ef3c80c6bbfa8d98cc8530f",
          "sha256": "df1ec85b06bce6fcf102476da1e45c3b8d6e09a409372e6abc45d0eadfb3159c"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02d86b588ef3c80c6bbfa8d98cc8530f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 7780,
        "upload_time": "2022-04-12T15:55:17",
        "upload_time_iso_8601": "2022-04-12T15:55:17.839713Z",
        "url": "https://files.pythonhosted.org/packages/a2/a1/0e7fc5825efee2ca4f054ce6b89e3581c5dad76d1c480abd65759ef98628/sqlalchemy_capture_sql-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64d6e415c7321df880a1c52217169bd291594f564eb2d57744b8cc0c594ff4f6",
          "md5": "50696fd9335aed1a4f8f7b08e37d9bf0",
          "sha256": "fc85596c5c39692a85262422a32faaf6f606adad13bb251a09ff35b7893142e9"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50696fd9335aed1a4f8f7b08e37d9bf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 6930,
        "upload_time": "2022-04-12T15:55:19",
        "upload_time_iso_8601": "2022-04-12T15:55:19.297589Z",
        "url": "https://files.pythonhosted.org/packages/64/d6/e415c7321df880a1c52217169bd291594f564eb2d57744b8cc0c594ff4f6/sqlalchemy-capture-sql-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71f51c1a328990c71dbe2ef07679fafadf76ee3d0aee59a048094409db29d77b",
          "md5": "c6ff601bfa5f41477bd6631144184a29",
          "sha256": "4c8ac830756e0d14d05b2c2f1b8aa3ceecc030f8640a467047a090f7374fd707"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6ff601bfa5f41477bd6631144184a29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 8256,
        "upload_time": "2022-04-12T22:50:21",
        "upload_time_iso_8601": "2022-04-12T22:50:21.168611Z",
        "url": "https://files.pythonhosted.org/packages/71/f5/1c1a328990c71dbe2ef07679fafadf76ee3d0aee59a048094409db29d77b/sqlalchemy_capture_sql-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "785063e33e5bde3f134b1e3df524a1b2e2749c7567342e3dbdc81e2933bb8fb4",
          "md5": "3f29551036dfb5272f3f57258b9ba888",
          "sha256": "74231cc20d1de252129812ee3fb861e31c4ab5cdde734b97fc6274c08ef97af1"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f29551036dfb5272f3f57258b9ba888",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 7547,
        "upload_time": "2022-04-12T22:50:23",
        "upload_time_iso_8601": "2022-04-12T22:50:23.071653Z",
        "url": "https://files.pythonhosted.org/packages/78/50/63e33e5bde3f134b1e3df524a1b2e2749c7567342e3dbdc81e2933bb8fb4/sqlalchemy-capture-sql-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1223557a3b415f31aa6e25a4875738004622cfaba0202151486681bf416b199",
          "md5": "8659b9e9bd757cbb43f7063d37d9b276",
          "sha256": "348a36d11be6d73929d9f7ce4a4bb2adc4957bcc82526c1ef07ee7964b41970c"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8659b9e9bd757cbb43f7063d37d9b276",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 8336,
        "upload_time": "2022-04-12T22:53:05",
        "upload_time_iso_8601": "2022-04-12T22:53:05.206835Z",
        "url": "https://files.pythonhosted.org/packages/e1/22/3557a3b415f31aa6e25a4875738004622cfaba0202151486681bf416b199/sqlalchemy_capture_sql-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deff4c18ac736fe7625b12fccfdbada7a97fae1561f888f69de5766d2420b786",
          "md5": "94ab4d6b058bd25d51ccd9fc5ac5bf4a",
          "sha256": "15c69c670d013b2d5cbc7d6c3dd42ca381fce89cd6c576994b3b331d789e6b2e"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94ab4d6b058bd25d51ccd9fc5ac5bf4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 7680,
        "upload_time": "2022-04-12T22:53:06",
        "upload_time_iso_8601": "2022-04-12T22:53:06.934163Z",
        "url": "https://files.pythonhosted.org/packages/de/ff/4c18ac736fe7625b12fccfdbada7a97fae1561f888f69de5766d2420b786/sqlalchemy-capture-sql-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6434fa60a945295a5cc30252e725ae1b3c6ce1be82ec5896bd915ce91a8be569",
          "md5": "9387707aad089902fe968ec3c4f66860",
          "sha256": "740bdc7171ee62bed42991c576591a267c12293c723b94d597c4bdea66cdf136"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9387707aad089902fe968ec3c4f66860",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 8485,
        "upload_time": "2022-04-12T23:03:08",
        "upload_time_iso_8601": "2022-04-12T23:03:08.364547Z",
        "url": "https://files.pythonhosted.org/packages/64/34/fa60a945295a5cc30252e725ae1b3c6ce1be82ec5896bd915ce91a8be569/sqlalchemy_capture_sql-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "350cf0158e21d5f82c8c5aa15cf638a04015926bbb9bd8c68b822716a952faad",
          "md5": "0f15e2fc2878d53e71ff649c282626fa",
          "sha256": "c5f5039beb23bae973b1ffbf12abacce1212b02c6c22e7d6e0bbf064f1d8ad5d"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0f15e2fc2878d53e71ff649c282626fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 7829,
        "upload_time": "2022-04-12T23:03:09",
        "upload_time_iso_8601": "2022-04-12T23:03:09.891218Z",
        "url": "https://files.pythonhosted.org/packages/35/0c/f0158e21d5f82c8c5aa15cf638a04015926bbb9bd8c68b822716a952faad/sqlalchemy-capture-sql-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95d88bb3b935c95e5f77a1a5dea3ccae8436d3b3bc57e3652fc9a56cc0a52b1c",
          "md5": "0633fd0979d829c38f277d940a2711a8",
          "sha256": "156b949e8e035ddaa4fbca872ddd1989575db78428afe8783dd237d8dc73ccb8"
        },
        "downloads": -1,
        "filename": "sqlalchemy_capture_sql-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0633fd0979d829c38f277d940a2711a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.2",
        "size": 9891,
        "upload_time": "2022-04-13T09:00:37",
        "upload_time_iso_8601": "2022-04-13T09:00:37.207208Z",
        "url": "https://files.pythonhosted.org/packages/95/d8/8bb3b935c95e5f77a1a5dea3ccae8436d3b3bc57e3652fc9a56cc0a52b1c/sqlalchemy_capture_sql-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e142ee4ae3f5922277a2141c5aae90cc4786711368852023b4a34499da44516f",
          "md5": "7f8defb23fdd87879973e78570c9cba6",
          "sha256": "a75521087916bf0200a157c27c2a5d78d371e2171aa1063f2c1c42a3ed94ce17"
        },
        "downloads": -1,
        "filename": "sqlalchemy-capture-sql-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7f8defb23fdd87879973e78570c9cba6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.2",
        "size": 11494,
        "upload_time": "2022-04-13T09:00:38",
        "upload_time_iso_8601": "2022-04-13T09:00:38.916122Z",
        "url": "https://files.pythonhosted.org/packages/e1/42/ee4ae3f5922277a2141c5aae90cc4786711368852023b4a34499da44516f/sqlalchemy-capture-sql-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95d88bb3b935c95e5f77a1a5dea3ccae8436d3b3bc57e3652fc9a56cc0a52b1c",
        "md5": "0633fd0979d829c38f277d940a2711a8",
        "sha256": "156b949e8e035ddaa4fbca872ddd1989575db78428afe8783dd237d8dc73ccb8"
      },
      "downloads": -1,
      "filename": "sqlalchemy_capture_sql-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0633fd0979d829c38f277d940a2711a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.2",
      "size": 9891,
      "upload_time": "2022-04-13T09:00:37",
      "upload_time_iso_8601": "2022-04-13T09:00:37.207208Z",
      "url": "https://files.pythonhosted.org/packages/95/d8/8bb3b935c95e5f77a1a5dea3ccae8436d3b3bc57e3652fc9a56cc0a52b1c/sqlalchemy_capture_sql-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e142ee4ae3f5922277a2141c5aae90cc4786711368852023b4a34499da44516f",
        "md5": "7f8defb23fdd87879973e78570c9cba6",
        "sha256": "a75521087916bf0200a157c27c2a5d78d371e2171aa1063f2c1c42a3ed94ce17"
      },
      "downloads": -1,
      "filename": "sqlalchemy-capture-sql-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7f8defb23fdd87879973e78570c9cba6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.2",
      "size": 11494,
      "upload_time": "2022-04-13T09:00:38",
      "upload_time_iso_8601": "2022-04-13T09:00:38.916122Z",
      "url": "https://files.pythonhosted.org/packages/e1/42/ee4ae3f5922277a2141c5aae90cc4786711368852023b4a34499da44516f/sqlalchemy-capture-sql-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}