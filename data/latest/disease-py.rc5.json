{
  "info": {
    "author": "Rob Wainwright",
    "author_email": "apex@taka.moe",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# disease&#46;py\nThe official Python wrapper for the [Open Disease API](https://github.com/disease-sh/API). Formerly `corona-api`.\n\n# Requirements\n - Python 3.5 or above\n - aiohttp (`python3 -m pip install -U aiohttp`)\n\n# Installation\n### Using pip (recommended)\n - `python3 -m pip install -U disease.py`\n \n Importing is then as easy as `import diseaseapi`.\n\n# Support\nGet support for this on Discord, either on our [official server](https://takagisan.xyz/support) or the [Disease.sh server](https://discord.gg/cEDxzfW).\n\n# Basic usage\n```py\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client()\ncovid = client.covid19\n# for influenza, use: influenza = client.influenza\n\nasync def main():\n    data = await covid.all()\n\n    print(\n        data.cases,\n        data.today.cases,\n        data.deaths,\n        data.today.deaths\n    )\n\n    await client.request_client.close()\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n# Optional parameters in Covid methods\n| Parameter      \t| Supported methods                                                                                                                                                                                                                                 \t| Accepted values                                                                                                                                                                                                                               \t|\n|----------------\t|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|\n| `yesterday`    \t| - `all()`<br>- `country()`<br>- `all_countries()`<br>- `all_states()`<br>- `state()`<br>- `all_continents()`<br>- `continent()`                      \t| - `True`<br>- `False`                                                                                                                                                                                                                         \t|\n| `two_days_ago` \t| - `all()`<br>- `country()`<br>- `all_countries()`<br>- `continent()`<br>- `all_continents()`                                                                                                \t| - `True`<br>- `False`                                                                                                                                                                                                                         \t|\n| `sort`         \t| - `all_countries()`<br>- `all_states()`<br>- `all_continents()`                                                                                                                                                                       \t|Depends on the endpoint used. Consult the API documentation to see which endpoints support which parameters.   \t|\n| `allow_none`   \t| - `all()`<br>- `country()`<br>- `all_countries()`<br>- `all_continents()`<br>- `continent()`<br>- `state()`<br>- `all_states()`<br>- `gov()` \t| - `True`<br>- `False`                                                                                                                                                                                                                         \t|\n| `last_days`       | - `country_history()`<br>- `province_history()`<br>- `county_history()`<br>- `vaccine_coverage()`<br>- `vaccine_countries()`<br>- `vaccine_country()` | - `'all'`<br>- Any int value |\n\n# Examples\nThe following examples cover the basic usage of the library and its various features. \nNote; many methods also support `yesterday=True`, `sort='sort method'` and `allow_none=True` kwargs to get data from the previous day or sorted by various parameters. Refer to the table above to find out which ones do and do not.\n\n## Discord bot\nThere is an example cog for your Discord bot [here](https://github.com/apex2504/disease.py/blob/master/examples/discord_cog.py).\n\n## Basic data\n### Global data\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_all():\n    data = await client.all() #get global data\n    print(data.cases, data.deaths) #print the number of global cases and deaths\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_all())\n```\n\n### Data for a specific country\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_country():\n    data = await client.country('UK') #get data for the UK today,\n    print(data.cases, data.deaths) #print the number of cases and deaths for the UK\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_country())\n```\n \n### Data for more than one country\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_countries():\n    data = await client.country('UK', 'USA', 'China') #get data for specified countries\n    #to get data for every country supported, use:  all_countries()\n    print(data) #prints a list of Country\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_countries())\n```\n## US States\n### Data for a specific state\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_state():\n    data = await client.state('Ohio') #get data for Ohio today,\n    print(data.cases, data.deaths) #print the number of cases and deaths for Ohio\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_state())\n```\n \n### Data for more than one state\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_states():\n    data = await client.state('Ohio', 'California', 'Texas') #get data for specified states\n    #to get data for every state supported, use:  all_states()\n    print(data) #prints a list of State\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_states())\n```\n\n## Historical statistics\n### Historical data globally\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_history():\n    data = await client.country_history('all', 'all') #get all the historical data for the world\n\n    print(data.name, data.history.cases[0].date, data.history.cases[0].value) #print name (in this case 'Global'), the date of the first entry, and the number of cases for that date\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_history())\n```\n\n### Historical data for a country\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_history():\n    data = await client.country_history('UK', 7) #get the past week of historical data for the UK\n\n    print(data.name, data.history.cases[0].date, data.history.cases[0].value) #print name, the date of the first entry, and the number of cases for that date\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_history())\n```\n\n### Historical data for a province\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_history_province():\n    data = await client.province_history('UK', 'Gibraltar', 7) #get the past week of historical data for Gibraltar, UK\n\n    print(data.province, data.history.cases[0].date, data.history.deaths[0].value) #print province name, the date of the first entry, and the number of cases for that date\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_history_province())\n```\n\n### Historical data for a county within a US state\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_county():\n    data = await client.county_history('Ohio', 'Adams') #get all historical data for Adams, Ohio, USA\n\n    print(data.name, data.province, data.history.cases[0].date, data.history.cases[0].value) #print state and county name, the date of the first entry, and the number of cases for that date\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_county())\n```\n## John Hopkins University CSSE\n### All data from the JHU CSSE\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_jhu():\n    data = await client.jhucsse() #get data for every province and country JHU supports\n\n    print(data) #print a long list of JhuCsse\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_jhu())\n```\n\n### Data for a county within a US state\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_jhu_county():\n    data = await client.jhu_county('Ohio', 'Adams') #get data for Adams, Ohio\n\n    print(data.province_name, data.county_name, data.confirmed_cases) #print the state, county and case number\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_jhu_county())\n```\n\n### Data for every county in the USA\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_jhu_counties():\n    data = await client.jhu_all_counties() \n\n    print(data) #print a long list of JhuCsse\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_jhu_counties())\n```\n\n## Continental data\n### Data for every continent\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_conts():\n    data = await client.all_continents() \n    first = data[0]\n\n    print(first.name, first.cases,  first.deaths) #print some info for the first continent in the list\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_conts())\n```\n\n### Data for a single continent\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_one_cont():\n    data = await client.continent('Europe') \n\n    print(data.name, data.cases,  data.deaths) #print some info for the specified continent\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_one_cont())\n```\n\n## New York Times\n### USA data from NY Times \n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_nyt_us():\n    data = await client.nyt() \n    first = data[0]\n\n    print(first.date, first.cases,  first.deaths) #print first piece of data\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_nyt_us())\n```\n\n### All USA state data from NY Times \n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_nyt_states():\n    data = await client.nyt_states() \n    first = data[0]\n\n    print(first.state, first.date,  first.cases) #print some data from the frst element\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_nyt_states())\n```\n\n### Data for a single state from NY Times\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_nyt_state():\n    data = await client.nyt_state('Ohio')\n    first = date[0]\n\n    print(first.date, first.cases,  first.deaths) #print the first date, and case/death number\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_nyt_state())\n```\n\n### Every county from NY Times\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_counts():\n    data = await client.nyt_counties() \n    first = data[0]\n\n    print(first.date, first.cases,  first.deaths) #print part of the first piece of data\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_counts())\n```\n\n### Counties from NYT filtered by name\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_one_county():\n    data = await client.nyt_county('Adams') \n    first = data[0]\n\n    print(first.date, first.cases,  first.deaths) #print part of the first piece of data\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_one_county())\n```\n\n## Apple Mobility\n### Every country supported by Apple Mobility Data\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def all_apples():\n    data = await client.apple_countries()\n\n    print(data) #print all supported countries\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(apples())\n```\n\n### Every subregion within a country for Apple Mobility\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_subregions():\n    data = await client.apple_subregions('UK')\n\n    print(data.subregions) #print all supported subregions within the country\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_subregions())\n```\n\n### Apple's Mobility data for a subregion\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_one_sub():\n    data = await client.apple_mobility_data('UK', 'London')\n    first = data.statistics[0]\n\n    print(first.date, first.name, first.driving) #print some data about the first result\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_one_sub())\n```\n\n## Governmental data\n### All countries supported by the API for government data\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_gov_countries():\n    data = await client.gov_countries()\n\n    print(data) #print the supported countries\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_gov_countries())\n```\n\n### Get the data from a country's government site\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def get_country_gov():\n    data = await client.gov('UK')\n\n    print(data) #probably will return a large amount of dict data.\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(get_country_gov())\n```\n\n### Get the vaccine data globally\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def vax_cov():\n    data = await client.vaccine_coverage(30)\n\n    print(data[0].date.day, data[0].value) #global vaccine data 30 days ago\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(vax_cov())\n```\n\n### Get the vaccine data for all countries\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def vax_all():\n    data = await client.vaccine_countries(30)\n\n    d = data[0]\n\n    print(d.country, d.timeline[0].date, d.timeline[0].value)\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(vax_all())\n```\n\n### Get the vaccine data for a specific country\n```python\nimport diseaseapi\nimport asyncio\n\nclient = diseaseapi.Client().covid19\n\nasync def vax_ctry():\n    data = await client.vaccine_country('UK', 30)\n\n    print(d.country, d.timeline[0].date, d.timeline[0].value)\n\n    await client.request_client.close() #close the ClientSession\n\nasyncio.get_event_loop().run_until_complete(vac_ctry())\n```\n\n\n# Note\nDue to the fact that each country's governmental/official statistics website is different (layouts, tables etc.), it is not feasible to create a standardised class for the data. However, the data returned will be in standard JSON format so it should be relatively simple to work with.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/apex2504/disease.py",
    "keywords": "coronavirus,covid-19",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "disease.py",
    "package_url": "https://pypi.org/project/disease.py/",
    "platform": "",
    "project_url": "https://pypi.org/project/disease.py/",
    "project_urls": {
      "Homepage": "https://github.com/apex2504/disease.py"
    },
    "release_url": "https://pypi.org/project/disease.py/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An asynchronous wrapper for the Open Disease API written in Python.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9177537,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4393bb42c16dba8094be6e4f0cb55cbab42a52d848f12dd179c990affc312d23",
          "md5": "b8035a416a153862c7ca15bf63f4b536",
          "sha256": "9892dfddb82394057f23f2c6aff5cc583cfdb72d637b5c860dde2985ca0e09fc"
        },
        "downloads": -1,
        "filename": "disease.py-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8035a416a153862c7ca15bf63f4b536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14480,
        "upload_time": "2020-07-07T20:37:31",
        "upload_time_iso_8601": "2020-07-07T20:37:31.362379Z",
        "url": "https://files.pythonhosted.org/packages/43/93/bb42c16dba8094be6e4f0cb55cbab42a52d848f12dd179c990affc312d23/disease.py-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08cbe534552db9cf83ac7469385ca61ccbd34459ef119049cd399a92afd1498a",
          "md5": "83d219fd85641eadcc3c06742f7759fe",
          "sha256": "20a235e6fa320ba4d921f5ebca7ce289c885c51600dfb687d64dc130b2ffda29"
        },
        "downloads": -1,
        "filename": "disease.py-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83d219fd85641eadcc3c06742f7759fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14519,
        "upload_time": "2020-07-07T23:23:30",
        "upload_time_iso_8601": "2020-07-07T23:23:30.215116Z",
        "url": "https://files.pythonhosted.org/packages/08/cb/e534552db9cf83ac7469385ca61ccbd34459ef119049cd399a92afd1498a/disease.py-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feb7523e7e542667ed598456f729d3ca1b6f80c023e09fe898b59c2da808b82e",
          "md5": "bb3b53ab4f46c14ec3122b740c82d5b7",
          "sha256": "9d56f5786ee2d3472b7ccec4a0a5955b2cd0501e8d7b0543c2ece815d99b79ed"
        },
        "downloads": -1,
        "filename": "disease.py-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb3b53ab4f46c14ec3122b740c82d5b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14527,
        "upload_time": "2020-07-22T00:07:49",
        "upload_time_iso_8601": "2020-07-22T00:07:49.216717Z",
        "url": "https://files.pythonhosted.org/packages/fe/b7/523e7e542667ed598456f729d3ca1b6f80c023e09fe898b59c2da808b82e/disease.py-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35bcc96cb36f070cb06e61b89d163307c3fe7d92e2dbe825bc95478fe41b9f4c",
          "md5": "939fbd6d0cc51e08bccbd8ee6cf32eef",
          "sha256": "3dce8f8b662204339d2552960c29b376667c50ec6e10374d56431ddc6df0a358"
        },
        "downloads": -1,
        "filename": "disease.py-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "939fbd6d0cc51e08bccbd8ee6cf32eef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14912,
        "upload_time": "2020-07-27T17:45:16",
        "upload_time_iso_8601": "2020-07-27T17:45:16.275571Z",
        "url": "https://files.pythonhosted.org/packages/35/bc/c96cb36f070cb06e61b89d163307c3fe7d92e2dbe825bc95478fe41b9f4c/disease.py-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccb0bec167a5e5fa4f51f5b953be309bc668783f37dc9fe20e98254d50a0b085",
          "md5": "4572a10f735c26cf9abfb8db42fcb3cc",
          "sha256": "a7b99eb3d67248d593508a8603203c36bf3d8f2b029cdb077fb66c95b3192bcb"
        },
        "downloads": -1,
        "filename": "disease.py-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4572a10f735c26cf9abfb8db42fcb3cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14586,
        "upload_time": "2021-01-19T23:37:20",
        "upload_time_iso_8601": "2021-01-19T23:37:20.791675Z",
        "url": "https://files.pythonhosted.org/packages/cc/b0/bec167a5e5fa4f51f5b953be309bc668783f37dc9fe20e98254d50a0b085/disease.py-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccb0bec167a5e5fa4f51f5b953be309bc668783f37dc9fe20e98254d50a0b085",
        "md5": "4572a10f735c26cf9abfb8db42fcb3cc",
        "sha256": "a7b99eb3d67248d593508a8603203c36bf3d8f2b029cdb077fb66c95b3192bcb"
      },
      "downloads": -1,
      "filename": "disease.py-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4572a10f735c26cf9abfb8db42fcb3cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14586,
      "upload_time": "2021-01-19T23:37:20",
      "upload_time_iso_8601": "2021-01-19T23:37:20.791675Z",
      "url": "https://files.pythonhosted.org/packages/cc/b0/bec167a5e5fa4f51f5b953be309bc668783f37dc9fe20e98254d50a0b085/disease.py-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}