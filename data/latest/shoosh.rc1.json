{
  "info": {
    "author": "Carlos H. Brandt",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# shoosh\nWrapper for sh to run Shell commands inside Docker container and handle volume mappings seamlessly.\n\n## How to\n\n### 1: Instantiate a container\nFirst step is to instantiate the (Docker) container we are going to use next.\n(You'll use whatever method/interface you're used to do it; the lib is _not_\nmeant to manage the containers lifecycle.)\n\nFor example, let's run a simple [alpine](https://hub.docker.com/_/alpine) container mapping local `test/` directory to `/some/path` inside the container:\n```bash\n$ docker run -dt \\\n        --name some_container \\\n        -v /tmp/test:/some/path \\\n        debian\n```\n\n### 2: Create a handle to container\nThen, we create a handle to the container whit the volume(s) set:\n```python\n>>> import shoosh\n>>> sh = shoosh.init('some_container')\n```\n\n### 3: And execute a command through the handle\nBy default, whenever you cite the (host) volume, it translate to the internal path:\n```python\n>>> echo = sh.wrap('echo')\n>>> echo(\"Internal path:\", '/tmp/test')\nInternal path: /some/path\n```\n\n## Rationale\nThe typical use of (Docker) containers is to spin-up a container containing\nthe software packages we need to accomplish a given task, process the data\nwe aim to, and eventually get the results back to the host system.\n\nWhen we run (Docker) containers, though, the filesystem structure inside the\ncontainer is completely detached from that of the host system.\nThe way to exchange data files between host and container is through container mounting points -- or _volumes_.\n\nIn practice, it means that the _paths_ we see inside a container -- where our\ndata is sitting -- is different than that of the host system -- where the very\nsame data files are stored, and being shared through volumes to the container.\n\nConsider the following scenario:\n- For some reason we use a [osgeo/gdal] container to process geographical data;\n- The data in our host system is stored under `/home/user/data/some_project`;\n- When we instantiate the [osgeo/gdal] image as `some_gdal` container, we mount-bind that path to container's `/data/geo`;\n- Suppose all we want to do it to [convert our data files from GeoTiff to Cloud Optimized GeoTiff(https://gdal.org/drivers/raster/cog.html):\n  ```bash\n  $ gdal_translate /data/geo/raster.tif /data/geo/raster_cog.tif -of COG\n  ```\n\nEverything works very well if the interaction with the container is decoupled\nfrom the host system, _i.e._ if we are _executing_ the commands _inside_ the\ncontainer. But if there is a need for _requesting_ the execution of a command\n_from_ the host system _inside_ the container, one should be aware of the\ndifferent paths resulting from a host-container volumes binding.\n\nThe demand for _requesting_ processing tasks (from the host system) to execute\ninside a container have different motivations, clearly; It can be a personal\ndemand of having the host system software set clean and the convenience of not\ngetting inside the container every time a simple, atomic task has to be performed.\nBut it can also be part of a more complex software application running on the\nhost system -- like a data processing pipeline -- where different components\ndemand different third-party software tools (available through containers).\n\n### Motivation\nIn my case, the reason I wrote this software, is I use Python to transform\nplanetary (Mars) geo-located data in different ways using either OSGEO's GDAL\nas well as USGS's ISIS software packages in a couple of cloud computing projects (GMAP, NEANIAS).\nI had to find a way, for my own convenience, to merge data visualization, metadata\nselection, download, cleaning, map-projection, formatting, etc., from the host\nsystem and on containers seamlessly through Python.\n\n\n## Application (value)\nThis (Python) library _primary feature_ is the execution of Shell commands inside\n(Docker) containers _and_ the correct _re-mapping of paths on the fly_.\nIt does _also_ provides a seamless interface to execute Shell commands in the\ncurrent environment, re-mapping of paths is not necessary in this case but it\nallow you to move your code from a \"host-container\" scenario to \"container-only\"\n-- in a cloud infrastructure -- seamlessly.\n\nAll this _seamlessly_ feature is possible because of the [sh](pypi.org/sh) package.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chbrandt/shoosh",
    "keywords": "sh,docker",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shoosh",
    "package_url": "https://pypi.org/project/shoosh/",
    "platform": null,
    "project_url": "https://pypi.org/project/shoosh/",
    "project_urls": {
      "Homepage": "https://github.com/chbrandt/shoosh"
    },
    "release_url": "https://pypi.org/project/shoosh/1.2rc1/",
    "requires_dist": [
      "sh (>=1.14)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python/sh wrapper for executing commands inside docker containers and mapping host:container volumes",
    "version": "1.2rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13299804,
  "releases": {
    "1.2rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3560932220ce47c18db998205e9390114fbafdca8874f7870992c2de9e143049",
          "md5": "dae7ae1fb06b5281c50e410f26943875",
          "sha256": "d7ed2524587b9ca8020266b15d0d06c17fc22355a19700fb93bf4c52f4cb9cbb"
        },
        "downloads": -1,
        "filename": "shoosh-1.2rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dae7ae1fb06b5281c50e410f26943875",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7875,
        "upload_time": "2022-03-25T19:16:23",
        "upload_time_iso_8601": "2022-03-25T19:16:23.404653Z",
        "url": "https://files.pythonhosted.org/packages/35/60/932220ce47c18db998205e9390114fbafdca8874f7870992c2de9e143049/shoosh-1.2rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15c408bd2c2d514d21efd4d03861de2597566ec98a32e95b4d9932886fdcd163",
          "md5": "0657873e42738a81800672d05ad6cf02",
          "sha256": "6375514ae2ddc58afa19d934310483fd893ff310ad1975649d05c3c56826f243"
        },
        "downloads": -1,
        "filename": "shoosh-1.2rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "0657873e42738a81800672d05ad6cf02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26641,
        "upload_time": "2022-03-25T19:16:25",
        "upload_time_iso_8601": "2022-03-25T19:16:25.223860Z",
        "url": "https://files.pythonhosted.org/packages/15/c4/08bd2c2d514d21efd4d03861de2597566ec98a32e95b4d9932886fdcd163/shoosh-1.2rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3560932220ce47c18db998205e9390114fbafdca8874f7870992c2de9e143049",
        "md5": "dae7ae1fb06b5281c50e410f26943875",
        "sha256": "d7ed2524587b9ca8020266b15d0d06c17fc22355a19700fb93bf4c52f4cb9cbb"
      },
      "downloads": -1,
      "filename": "shoosh-1.2rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dae7ae1fb06b5281c50e410f26943875",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7875,
      "upload_time": "2022-03-25T19:16:23",
      "upload_time_iso_8601": "2022-03-25T19:16:23.404653Z",
      "url": "https://files.pythonhosted.org/packages/35/60/932220ce47c18db998205e9390114fbafdca8874f7870992c2de9e143049/shoosh-1.2rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15c408bd2c2d514d21efd4d03861de2597566ec98a32e95b4d9932886fdcd163",
        "md5": "0657873e42738a81800672d05ad6cf02",
        "sha256": "6375514ae2ddc58afa19d934310483fd893ff310ad1975649d05c3c56826f243"
      },
      "downloads": -1,
      "filename": "shoosh-1.2rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "0657873e42738a81800672d05ad6cf02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26641,
      "upload_time": "2022-03-25T19:16:25",
      "upload_time_iso_8601": "2022-03-25T19:16:25.223860Z",
      "url": "https://files.pythonhosted.org/packages/15/c4/08bd2c2d514d21efd4d03861de2597566ec98a32e95b4d9932886fdcd163/shoosh-1.2rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}