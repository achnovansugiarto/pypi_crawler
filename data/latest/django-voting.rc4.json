{
  "info": {
    "author": "Jonathan Buchanan",
    "author_email": "jonathan.buchanan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "=============\nDjango Voting\n=============\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\n.. image:: https://github.com/jazzband/django-voting/workflows/Test/badge.svg\n   :target: https://github.com/jazzband/django-voting/actions\n   :alt: GitHub Actions\n\n.. image:: https://codecov.io/gh/jazzband/django-voting/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/jazzband/django-voting\n   :alt: Code coverage\n\n.. image:: https://img.shields.io/pypi/pyversions/django-voting.svg\n   :target: https://pypi.python.org/pypi/django-voting\n   :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/djversions/django-voting.svg\n   :target: https://pypi.org/project/django-voting\n   :alt: Supported Django versions\n\nA generic voting application for Django projects, which allows\nregistering of votes for any ``Model`` instance.\n\nInstallation\n============\n\n1. Install the ``django-voting`` distribution\n\n2. Add ``voting`` to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = [\n        …\n        'voting',\n        …\n    ]\n\n3. Run ``django-admin migrate``\n\nUsage\n=====\n\nVotes\n-----\n\nVotes are represented by the ``Vote`` model, which lives in the\n``voting.models`` module.\n\nVotes are recorded using the ``record_vote`` helper function::\n\n    >>> from django.contrib.auth.models import User\n    >>> from shop.apps.products.models import Widget\n    >>> from voting.models import Vote\n    >>> user = User.objects.get(pk=1)\n    >>> widget = Widget.objects.get(pk=1)\n    >>> Vote.objects.record_vote(widget, user, +1)\n\nThe score for an object can be retrieved using the ``get_score``\nhelper function::\n\n    >>> Vote.objects.get_score(widget)\n    {'score': 1, 'num_votes': 1}\n\nIf the same user makes another vote on the same object, their vote\nis either modified or deleted, as appropriate::\n\n    >>> Vote.objects.record_vote(widget, user, -1)\n    >>> Vote.objects.get_score(widget)\n    {'score': -1, 'num_votes': 1}\n    >>> Vote.objects.record_vote(widget, user, 0)\n    >>> Vote.objects.get_score(widget)\n    {'score': 0, 'num_votes': 0}\n\nFields\n~~~~~~\n\n``Vote`` objects have the following fields:\n\n    * ``user`` -- The user who made the vote. Users are represented by\n      the ``django.contrib.auth.models.User`` model.\n    * ``content_type`` -- The ContentType of the object voted on.\n    * ``object_id`` -- The id of the object voted on.\n    * ``object`` -- The object voted on.\n    * ``vote`` -- The vote which was made: ``+1`` or ``-1``.\n\nMethods\n~~~~~~~\n\n``Vote`` objects have the following custom methods:\n\n    * ``is_upvote`` -- Returns ``True`` if ``vote`` is ``+1``.\n\n    * ``is_downvote`` -- Returns ``True`` if ``vote`` is ``-1``.\n\nManager functions\n~~~~~~~~~~~~~~~~~\n\nThe ``Vote`` model has a custom manager that has the following helper\nfunctions:\n\n    * ``record_vote(obj, user, vote)`` -- Record a user's vote on a\n      given object. Only allows a given user to vote once on any given\n      object, but the vote may be changed.\n\n      ``vote`` must be one of ``1`` (up vote), ``-1`` (down vote) or\n      ``0`` (remove vote).\n\n    * ``get_score(obj)`` -- Gets the total score for ``obj`` and the\n      total number of votes it's received.\n\n      Returns a dictionary with ``score`` and ``num_votes`` keys.\n\n    * ``get_scores_in_bulk(objects)`` -- Gets score and vote count\n      details for all the given objects. Score details consist of a\n      dictionary which has ``score`` and ``num_vote`` keys.\n\n      Returns a dictionary mapping object ids to score details.\n\n    * ``get_top(Model, limit=10, reversed=False)`` -- Gets the top\n      ``limit`` scored objects for a given model.\n\n      If ``reversed`` is ``True``, the bottom ``limit`` scored objects\n      are retrieved instead.\n\n      Yields ``(object, score)`` tuples.\n\n    * ``get_bottom(Model, limit=10)`` -- A convenience method which\n      calls ``get_top`` with ``reversed=True``.\n\n      Gets the bottom (i.e. most negative) ``limit`` scored objects\n      for a given model.\n\n      Yields ``(object, score)`` tuples.\n\n    * ``get_for_user(obj, user)`` -- Gets the vote made on the given\n      object by the given user, or ``None`` if no matching vote\n      exists.\n\n    * ``get_for_user_in_bulk(objects, user)`` -- Gets the votes\n      made on all the given objects by the given user.\n\n      Returns a dictionary mapping object ids to votes.\n\n    * ``get_voted_users(object)`` -- Gets all users\n      voted on the given object.\n\n      Returns a list of objects contains user ids.\n\nGeneric Views\n-------------\n\nThe ``voting.views`` module contains views to handle a couple of\ncommon cases: displaying a page to confirm a vote when it is requested\nvia ``GET`` and making the vote itself via ``POST``, or voting via\nXMLHttpRequest ``POST``.\n\nThe following sample URLconf demonstrates using a generic view for\nvoting on a model, allowing for regular voting and XMLHttpRequest\nvoting at the same URL::\n\n    from django.urls import re_path\n    from voting.views import vote_on_object\n    from shop.apps.products.models import Widget\n\n    widget_kwargs = {\n        'model': Widget,\n        'template_object_name': 'widget',\n        'allow_xmlhttprequest': True,\n    }\n\n    urlpatterns = [\n        re_path(\n            r\"^widgets/(?P<object_id>\\d+)/(?P<direction>up|down|clear)vote/?$\",\n            vote_on_object,\n            kwargs=widget_kwargs,\n        ),\n    ]\n\n``voting.views.vote_on_object``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Description:**\n\nA view that displays a confirmation page and votes on an object. The\ngiven object will only be voted on if the request method is ``POST``.\nIf this view is fetched via ``GET``, it will display a confirmation\npage that should contain a form that ``POST``\\s to the same URL.\n\n**Required arguments:**\n\n    * ``model``: The Django model class of the object that will be\n      voted on.\n\n    * Either ``object_id`` or (``slug`` *and* ``slug_field``) is\n      required.\n\n      If you provide ``object_id``, it should be the value of the\n      primary-key field for the object being voted on.\n\n      Otherwise, ``slug`` should be the slug of the given object, and\n      ``slug_field`` should be the name of the slug field in the\n      ``QuerySet``'s model.\n\n    * ``direction``: The kind of vote to be made, must be one of\n      ``'up'``, ``'down'`` or ``'clear'``.\n\n    * Either a ``post_vote_redirect`` argument defining a URL must\n      be supplied, or a ``next`` parameter must supply a URL in the\n      request when the vote is ``POST``\\ed, or the object being voted\n      on must define a ``get_absolute_url`` method or property.\n\n      The view checks for these in the order given above.\n\n**Optional arguments:**\n\n    * ``allow_xmlhttprequest``: A boolean that designates whether this\n      view should also allow votes to be made via XMLHttpRequest.\n\n      If this is ``True``, the request headers will be check for an\n      ``HTTP_X_REQUESTED_WITH`` header which has a value of\n      ``XMLHttpRequest``. If this header is found, processing of the\n      current request is delegated to\n      ``voting.views.xmlhttprequest_vote_on_object``.\n\n    * ``template_name``: The full name of a template to use in\n      rendering the page. This lets you override the default template\n      name (see below).\n\n    * ``template_loader``: The template loader to use when loading the\n      template. By default, it's ``django.template.loader``.\n\n    * ``extra_context``: A dictionary of values to add to the template\n      context. By default, this is an empty dictionary. If a value in\n      the dictionary is callable, the generic view will call it just\n      before rendering the template.\n\n    * ``context_processors``: A list of template-context processors to\n      apply to the view's template.\n\n    * ``template_object_name``:  Designates the name of the template\n      variable to use in the template context. By default, this is\n      ``'object'``.\n\n**Template name:**\n\nIf ``template_name`` isn't specified, this view will use the template\n``<app_label>/<model_name>_confirm_vote.html`` by default.\n\n**Template context:**\n\nIn addition to ``extra_context``, the template's context will be:\n\n    * ``object``: The original object that's about to be voted on.\n      This variable's name depends on the ``template_object_name``\n      parameter, which is ``'object'`` by default. If\n      ``template_object_name`` is ``'foo'``, this variable's name will\n      be ``foo``.\n\n    * ``direction``: The argument which was given for the vote's\n      ``direction`` (see above).\n\n``voting.views.xmlhttprequest_vote_on_object``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Description:**\n\nA view for use in voting on objects via XMLHttpRequest. The given\nobject will only be voted on if the request method is ``POST``. This\nview will respond with JSON text instead of rendering a template or\nredirecting.\n\n**Required arguments:**\n\n    * ``model``: The Django model class of the object that will be\n      voted on.\n\n    * Either ``object_id`` or (``slug`` *and* ``slug_field``) is\n      required.\n\n      If you provide ``object_id``, it should be the value of the\n      primary-key field for the object being voted on.\n\n      Otherwise, ``slug`` should be the slug of the given object, and\n      ``slug_field`` should be the name of the slug field in the\n      ``QuerySet``'s model.\n\n    * ``direction``: The kind of vote to be made, must be one of\n      ``'up'``, ``'down'`` or ``'clear'``.\n\n**JSON text context:**\n\nThe context provided by the JSON text returned will be:\n\n    * ``success``: ``true`` if the vote was successfully processed,\n      ``false`` otherwise.\n\n    * ``score``: an object containing a ``score`` property, which\n      holds the object's updated score, and a ``num_votes`` property,\n      which holds the total number of votes cast for the object.\n\n    * ``error_message``: if the vote was not successfully processed,\n      this property will contain an error message.\n\n\nTemplate tags\n-------------\n\nThe ``voting.templatetags.voting_tags`` module defines a number of\ntemplate tags which may be used to retrieve and display voting\ndetails.\n\nTag reference\n~~~~~~~~~~~~~\n\nscore_for_object\n````````````````\n\nRetrieves the total score for an object and the number of votes\nit's received, storing them in a context variable which has ``score``\nand ``num_votes`` properties.\n\nExample usage::\n\n    {% score_for_object widget as score %}\n\n    {{ score.score }} point{{ score.score|pluralize }}\n    after {{ score.num_votes }} vote{{ score.num_votes|pluralize }}\n\nscores_for_objects\n``````````````````\n\nRetrieves the total scores and number of votes cast for a list of\nobjects as a dictionary keyed with the objects' ids and stores it in a\ncontext variable.\n\nExample usage::\n\n    {% scores_for_objects widget_list as scores %}\n\nvote_by_user\n````````````\n\nRetrieves the ``Vote`` cast by a user on a particular object and\nstores it in a context variable. If the user has not voted, the\ncontext variable will be ``None``.\n\nExample usage::\n\n    {% vote_by_user user on widget as vote %}\n\nvotes_by_user\n`````````````\n\nRetrieves the votes cast by a user on a list of objects as a\ndictionary keyed with object ids and stores it in a context\nvariable.\n\nExample usage::\n\n    {% votes_by_user user on widget_list as vote_dict %}\n\ndict_entry_for_item\n```````````````````\n\nGiven an object and a dictionary keyed with object ids - as returned\nby the ``votes_by_user`` and ``scores_for_objects`` template tags -\nretrieves the value for the given object and stores it in a context\nvariable, storing ``None`` if no value exists for the given object.\n\nExample usage::\n\n    {% dict_entry_for_item widget from vote_dict as vote %}\n\nconfirm_vote_message\n````````````````````\n\nIntended for use in vote confirmatio templates, creates an appropriate\nmessage asking the user to confirm the given vote for the given object\ndescription.\n\nExample usage::\n\n    {% confirm_vote_message widget.title direction %}\n\nFilter reference\n~~~~~~~~~~~~~~~~\n\nvote_display\n````````````\n\nGiven a string mapping values for up and down votes, returns one\nof the strings according to the given ``Vote``:\n\n=========  =====================  =============\nVote type   Argument               Outputs\n=========  =====================  =============\n``+1``     ``'Bodacious,Bogus'``  ``Bodacious``\n``-1``     ``'Bodacious,Bogus'``  ``Bogus``\n=========  =====================  =============\n\nIf no string mapping is given, ``'Up'`` and ``'Down'`` will be used.\n\nExample usage::\n\n    {{ vote|vote_display:\"Bodacious,Bogus\" }}\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pjdelport/django-voting",
    "keywords": "",
    "license": "",
    "maintainer": "Jannis Leidel",
    "maintainer_email": "jannis@leidel.info",
    "name": "django-voting",
    "package_url": "https://pypi.org/project/django-voting/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-voting/",
    "project_urls": {
      "Homepage": "https://github.com/pjdelport/django-voting"
    },
    "release_url": "https://pypi.org/project/django-voting/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Generic voting application for Django",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15656587,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cd56c0c3ae58f95e2f4c49c515e74c47975efdffd2e28edc1bcc1bce3e846cf",
          "md5": "2b6162cd9b0e888b9cf8e847ecdd56cb",
          "sha256": "7b5f3665559c7606f40bcfac91b134df3a830edb6e0b819921aca08e647b8ba1"
        },
        "downloads": -1,
        "filename": "django-voting-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b6162cd9b0e888b9cf8e847ecdd56cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12658,
        "upload_time": "2010-04-13T03:00:19",
        "upload_time_iso_8601": "2010-04-13T03:00:19.557411Z",
        "url": "https://files.pythonhosted.org/packages/8c/d5/6c0c3ae58f95e2f4c49c515e74c47975efdffd2e28edc1bcc1bce3e846cf/django-voting-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4023bddd9cd29d676c62b76fc3fe849f14ffb009503c5af9ea1760343135c2f1",
          "md5": "d4dbc8c0530f127027f6af6e76f91ead",
          "sha256": "0b09805478040289d05579b4ae0f7412b4c1350b9a2cedc14610d24ae17bdd84"
        },
        "downloads": -1,
        "filename": "django-voting-0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "d4dbc8c0530f127027f6af6e76f91ead",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14724,
        "upload_time": "2012-07-26T14:46:12",
        "upload_time_iso_8601": "2012-07-26T14:46:12.164467Z",
        "url": "https://files.pythonhosted.org/packages/40/23/bddd9cd29d676c62b76fc3fe849f14ffb009503c5af9ea1760343135c2f1/django-voting-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "844cada260b56ac975664aeb83a4b7d8254182e5a047f0d54640925c34eea2a1",
          "md5": "2fc24f60fbaca85843850e7ebb82cd62",
          "sha256": "377451ca4a15039d11bbc14d73bc3cbbd8f9e41d9c52aafe5f44b9c5f10dfc8d"
        },
        "downloads": -1,
        "filename": "django_voting-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fc24f60fbaca85843850e7ebb82cd62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15482,
        "upload_time": "2021-03-10T21:17:16",
        "upload_time_iso_8601": "2021-03-10T21:17:16.755608Z",
        "url": "https://files.pythonhosted.org/packages/84/4c/ada260b56ac975664aeb83a4b7d8254182e5a047f0d54640925c34eea2a1/django_voting-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b07ece91ddf888c82c34ee242b746ebe0543d3bcae26c92b21d8e738b5a57d14",
          "md5": "8c3b662c85bdb1a961bcc0cec567b50a",
          "sha256": "161581586a18f4eab4a691a61f970026880d92ab265c362c46fe497622019720"
        },
        "downloads": -1,
        "filename": "django-voting-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c3b662c85bdb1a961bcc0cec567b50a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18848,
        "upload_time": "2021-03-10T21:17:07",
        "upload_time_iso_8601": "2021-03-10T21:17:07.566207Z",
        "url": "https://files.pythonhosted.org/packages/b0/7e/ce91ddf888c82c34ee242b746ebe0543d3bcae26c92b21d8e738b5a57d14/django-voting-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc46a84de96cfde73afa676247e5748c21e332a8a1f9aba368691b51e82cf55",
          "md5": "03d3985e7bfc491636b0e61243b69b69",
          "sha256": "aed3523167a8b8fea69d5205fa40670e112022ec3aa7c04ef9b6a182e587da96"
        },
        "downloads": -1,
        "filename": "django_voting-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03d3985e7bfc491636b0e61243b69b69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16149,
        "upload_time": "2022-11-04T15:09:46",
        "upload_time_iso_8601": "2022-11-04T15:09:46.203006Z",
        "url": "https://files.pythonhosted.org/packages/6d/c4/6a84de96cfde73afa676247e5748c21e332a8a1f9aba368691b51e82cf55/django_voting-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11d0e49311b01f1069bed46613649a8914e09c29e469a2a851ae4255d02c8a9c",
          "md5": "7654e30707801f52c197f1996f986254",
          "sha256": "c7d70c479aabe51f45ffe83dfd2509c71846e38ab433bdb9eb65f2ec0df7053e"
        },
        "downloads": -1,
        "filename": "django-voting-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7654e30707801f52c197f1996f986254",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19442,
        "upload_time": "2022-11-04T15:09:32",
        "upload_time_iso_8601": "2022-11-04T15:09:32.800686Z",
        "url": "https://files.pythonhosted.org/packages/11/d0/e49311b01f1069bed46613649a8914e09c29e469a2a851ae4255d02c8a9c/django-voting-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6dc46a84de96cfde73afa676247e5748c21e332a8a1f9aba368691b51e82cf55",
        "md5": "03d3985e7bfc491636b0e61243b69b69",
        "sha256": "aed3523167a8b8fea69d5205fa40670e112022ec3aa7c04ef9b6a182e587da96"
      },
      "downloads": -1,
      "filename": "django_voting-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03d3985e7bfc491636b0e61243b69b69",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16149,
      "upload_time": "2022-11-04T15:09:46",
      "upload_time_iso_8601": "2022-11-04T15:09:46.203006Z",
      "url": "https://files.pythonhosted.org/packages/6d/c4/6a84de96cfde73afa676247e5748c21e332a8a1f9aba368691b51e82cf55/django_voting-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11d0e49311b01f1069bed46613649a8914e09c29e469a2a851ae4255d02c8a9c",
        "md5": "7654e30707801f52c197f1996f986254",
        "sha256": "c7d70c479aabe51f45ffe83dfd2509c71846e38ab433bdb9eb65f2ec0df7053e"
      },
      "downloads": -1,
      "filename": "django-voting-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7654e30707801f52c197f1996f986254",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19442,
      "upload_time": "2022-11-04T15:09:32",
      "upload_time_iso_8601": "2022-11-04T15:09:32.800686Z",
      "url": "https://files.pythonhosted.org/packages/11/d0/e49311b01f1069bed46613649a8914e09c29e469a2a851ae4255d02c8a9c/django-voting-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}