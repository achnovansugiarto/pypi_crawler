{
  "info": {
    "author": "David Salac",
    "author_email": "info@davidsalac.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Enhancement of the netCDF4 Python driver\nAuthor: David Salac <http://www.github.com/david-salac>\n\nExtends the default NetCDF4 driver (package netCDF4) by providing helpful\nfunctionality like reading and writing to variable in some chunks\n(previously pre-stored in memory - Dask like style of chunking)\nor dealing with variables regardless of its dimension order.\nPrincipally directly extends netCDF4 Dataset class with new functionality.\nCovers most of the functionality that is often the only reason why developers\nchoose to use stogy libraries like xarray or Dask.\n\n## Purpose of the streamer (use cases)\nThe typical task that occurs during data processing is to swap computed data\nto the disk (due to shortage of memory). This can be done by using Dask\nand similar tools that are notoriously known for the inefficiency (the \ndeveloper has to struggle with the finding of the proper chunk size etc.). \nAnother way is to stream directly to the NetCDF4 file. Unfortunately, default \nNetCDF4 driver available in Python does not support any simple way to do so \n(and neither does GDAL or xarray).\n\nThe same rationale is valid also for the reading of the data from the large \nNetCDF4 file where the size of the variable can exceed the size of the \navailable memory.\n\nThe presented utility offers the simplest way how to treat this issue. It \nallows the developer directly stream to the desired variable inside the NetCDF4 \nfile (by selected dimension). It also allows to read (yield) from the\nNetCDF4 variable the chunks of data. The main class simply extends (inherits) \nfrom the `netCDF4.Dataset` class and add the possibility to create a variable \nfor streaming using method `createStreamerVariable`.\n\nAnother quite typical situation occurs when a user does not exactly know\nthe order of dimensions in the variable before you write into it (or\nread from it). Or similarly, when the application is in development\nand order can be changed at some point. This issue is efficiently\nsolved in xarray library. But installing xarray involves many drawbacks\nlike having a massive library in a system (that is not useful otherwise)\nor risking memory leaks (often related even to the correct usage of xarray).\nThis library directly extends the native netCDF4 drive. Accordingly, it\nis minimalistic and solves exactly this typical problem.\n\n## How to use the script for streaming to the variable?\nSuppose that user wants to create a variable called `'var'` with dimensions\ncalled `(d1, d2, d3)` with sizes `(500, 20, 600)` and swapped (stream) to the\nvariable using the dimension 'd2' as a pivotal one. \n\nFollowing example shows the way how to deal with this issue. There are two\noptions what to stream: stream line by line (entity by entity) or stream the \nwhole blob of data.\n\nOnce the job is finished, variable must be closed using the `flush` method.\n```\nimport netCDF4_enhancement as ne\n\n# Create a file handler:\nfh = ne.NetCDF4Streamer(\"PATH_TO_NC.nc\", \"w\")\n# Define dimensions with names: (\"d1\", \"d2\", \"d3\"), sizes (500, 20, 600)\nfh.createDimension(\"d1\", 500)\nfh.createDimension(\"d2\", 20)\nfh.createDimension(\"d3\", 600)\n\n# Suppose that user wants to have dimensions (d1, d2, d3) and stream\n# to the variable using the dimension \"d2\" and the in-memory \"swap\" (chunk)\n# of size 3 MB.\n# Create a streamed variable called 'var' (following expected API):\nvariable = fh.createStreamerVariable(\"var\", \"f8\", (\"d1\", \"d2\", \"d3\")),\n                                     chunk_dimension=\"d2\",\n                                     chunk_size_mb=3)\n\n# Writing the data to the variable:\n\n# A) Write the single value (single entity):\ndata_set = np.random.random((500, 600))\nvariable.streamNumpyData(data_set, single_entity=True)\nvariable.flush()  # MUST BE CALLED EXPLICITELY WHEN FINISHED\n\n# B) Writing the chunk of values:\ndata_set = np.random.random((500, 19, 600))\nvariable.streamNumpyData(data_set, single_entity=False)\nvariable.flush()  # MUST BE CALLED EXPLICITELY WHEN FINISHED\n\n# ...\n\n# Best practice is to close file at the end (not required)\nfh.close()\n```\n\n## How to use the script for reading in chunks from the variable?\nThe purpose of this part is to read from the NetCDF4 variable in some chunks \nof the defined size. Logic is the opposite of the streaming logic described \nabove.\n\nSuppose that we have a variable described above and we want to read chunks by \nslicing the dimension d2:\n```\nimport netCDF4_enhancement as ne\n\nfh = ne.NetCDF4Streamer(\"PATH_TO_NC.nc\", \"r\")\n\nvariable = fh.openStreamerVariable(\"var\", \n                                   chunk_dimension=\"d2\",\n                                   chunk_size_mb=3)\n\n# ...\n# For reading the file \"line by line\"\nfor line in variable.yieldNumpyData(True):\n    # Work with the line\n\n# ...\n# For reading the file by blobs (chunks)\nfor blob in variable.yieldNumpyData(False):\n    # Work with the blob\n# ...\n\n```\n\n## Accessing the NetCDF4 variable inside streamed variable\nIt can be helpful to access the `netCDF4.Variable` object inside the\nstreamed variable (e. g. for defining of some attributes). To do so\nfollow the logic (example define the attribute `description`):\n```\n# ...\nwrapped_variable = fh.createStreamerVariable(\"var\", \"f8\", (\"d1\", \"d2\", \"d3\")),\n                                             chunk_dimension=\"d2\",\n                                             chunk_size_mb=3)\n\n# ...\n# Access the netCDF4.Variable object:\nnetCDF4_variable_object: netCDF4.Variable = wraped_variable.netcdf4_variable\n# Define the description attribute (in writing/append mode only):\nnetCDF4_variable_object.description = \"Streamed variable!\"\n# ...\n```\n\n## Reading / writing data in the not-matching dimension order\nIf the dimension order of data set to be stream to the file or \nthe expected dimension order for file to be read from the file do not\nmatch to the actual order of dimension in the file, you can use the \n`axes_order` property to treat this issue.\n\nFor example:\n```\nvariable.axes_order = (\"d2\", \"d3\", \"d1\")\n```\nAfter calling this command, you can stream to the variable using proposed\ndimension order or read in this order.\n\nIf you want to reset to the default dimension order, just write:\n```\nvariable.axes_order = None\n```\n\nFor reading/writing data afterwards, you can use standard approach:\n```\n# Using slices\nvariable[:, :, :, :] = new_value_to_be_written  # <- for writing\nvalue_inside = variable[:, :, :, :]  # <- for reading\n\n# Slices and concrete indices:\nvariable[:, :, 34, :] = new_value_to_be_written  # <- for writing\nvalue_inside = variable[:, :, 34, :]  # <- for reading\n\n# Alternative method for reading value is using .sel method:\n#   - First option expect arguments ordered by the value of 'axes_order'\nvalue_inside = variable.sel(1, 2, 3, 4)\n#   - Another approach is bit more universal, keys are names of dimensions\nvalue_inside = variable.sel(d1=1, d2=2, d3=3, d4=4)\n```\nThis overloaded operator for accessing the values does always return either\n`numpy.ndarray` object or the `float` value (never masked array).\n\n## API documentation\nDocumentation of the basic functionality.\n### NetCDF4Streamer class\nClass `NetCDF4Streamer` is the child of `netCDF4.Dataset` class. Accordingly\ninherits all the methods.\n\nThere are following new methods:\n* `createStreamerVariable`: has the same interface as \n`netCDF4.Dataset.createVariable`. \nCreates new variable inside NetCDF4 file.\nReturns `NetCDF4StreamerVariable` object. \nMethod adds two new optional (keyword type) parameters:\n    - `chunk_dimension (Optional[str])`: define dimension by that data are\n    streamed to the variable, if `None` the first dimension is chosen. \n    Default value is `None`. _It is pertinent only if you want to use\n    streaming to the variable._\n    - `chunk_size_mb (float)`: Size of the memory chunk to that data\n    are streamed first (before they are streamed to the variable\n    on the disk). Unit is megabyte. Default size is 512 MB.\n    _It is pertinent only if you want to use streaming to the variable._\n\n* `openStreamerVariable`: has the same logic as \n`netCDF4.Dataset['variable_name']'`. \nOpens an existing variable inside NetCDF4 file.\nReturns `NetCDF4StreamerVariable` object. \nMethod adds two new optional (keyword type) parameters:\n    - `chunk_dimension (Optional[str])`: define dimension by that data are\n    streamed to the variable, if `None` the first dimension is chosen. \n    Default value is `None`. _It is pertinent only if you want to use\n    streaming to the variable._\n    - `chunk_size_mb (float)`: Size of the memory chunk to that data\n    are streamed first (before they are streamed to the variable\n    on the disk). Unit is megabyte. Default size is 512 MB.\n    _It is pertinent only if you want to use streaming to the variable._\n\n### NetCDF4StreamerVariable class\nRepresent the crucial class in the logic. \n\nThere are following methods and properties:\n* `streamNumpyData`: Method that stream the data to the NetCDF4 variable.\nWith parameters:\n    - `data (np.ndarray)`: The line or the blob of the data to be streamed\n        to the variable.\n    - `single_entity (bool)`: If True data are streamed as a single \"line\"\n        (one entity), if False the whole blob is streamed. Number of\n        dimensions is of -1 smaller for True value.\n* `yieldNumpyData`: Method that yields the data from the NetCDF4 variable.\nWith parameters:\n    - `single_entity (bool)`: If True data are streamed as a single \"line\"\n        (one entity), if False the whole blob is streamed. Number of\n        dimensions is of -1 smaller for True value.\n* `flush`: Important method that store temporal results of streaming into\nthe physical variable.\n* `axes_order`: Property that gets or sets dimension order that is required.\nDefault order can be re-seted using `obj.axes_order = None`. Returns/accepts\nthe tuple of dimension names (string).\n* `dimensions`: Return the physical dimension order (tuple of dimension\nnames as string values).\n* `__getitem__`: Operator for getting value in the position reflecting order\nof dimensions defined by the `axes_order` property (similar logic to the\nnormal `netCDF4` variable). Always return either `float` value or\n`np.ndarray` value (never the mask array).\n* `__setitem__`: Operator for setting value in the position reflecting order\nof dimensions defined by the `axes_order` property (similar logic to the\nnormal `netCDF4` variable).\n* `netcdf4_variable`: Return the variable as a `netCDF4.Variable` object.\n* `sel`: Return the value at given position.\nLocation can be defined either by the positional argument (following\nthe order defined by the 'axes_order' property, or by the\nkeyword logic with key equals to the dimension name and\nvalue equals to the selected position.\n\n## Software User Manual (SUM), how to use it?\n### Installation\nTo install the most actual package, use the command:\n```\ngit clone https://github.com/david-salac/NetCDF4-variable-streamer\ncd NetCDF4-variable-streamer/\npython setup.py install\n```\nor simply install using PIP:\n```\npip install netCDF4-enhancement\n```\n#### Running of the unit-tests\nFor running package unit-tests, use command:\n```\npython setup.py test\n```\nIn order to run package unit-tests you need to clone package first.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/david-salac/NetCDF4-variable-streamer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netCDF4-enhancement",
    "package_url": "https://pypi.org/project/netCDF4-enhancement/",
    "platform": "",
    "project_url": "https://pypi.org/project/netCDF4-enhancement/",
    "project_urls": {
      "Homepage": "https://github.com/david-salac/NetCDF4-variable-streamer"
    },
    "release_url": "https://pypi.org/project/netCDF4-enhancement/0.1.2/",
    "requires_dist": [
      "numpy",
      "netCDF4"
    ],
    "requires_python": ">=3.6",
    "summary": "Extends the default NetCDF4 driver by providing helpful functionality like reading and writing to variable in some chunks or dealing with variables regardless of its dimension order. Principally directly extends netCDF4 Dataset class with new functionality. Covers most of the functionality that is often the only reason why developers choose to use stogy libraries like xarray.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7345491,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28021752270bace8a38ce8b951fc54a7231c4428af7f98dbe0947ec494697b48",
          "md5": "d82e041478cdf454f5185221f3113774",
          "sha256": "a9130d14109940ad3b5a7c4a807589e600b71193afd665c55716a4cac242ff56"
        },
        "downloads": -1,
        "filename": "netCDF4_enhancement-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d82e041478cdf454f5185221f3113774",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13347,
        "upload_time": "2020-05-28T10:57:42",
        "upload_time_iso_8601": "2020-05-28T10:57:42.484098Z",
        "url": "https://files.pythonhosted.org/packages/28/02/1752270bace8a38ce8b951fc54a7231c4428af7f98dbe0947ec494697b48/netCDF4_enhancement-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c51377352ec9494921a0dded36ee870a21fffbcc4a23ce78e613c74e2c662fd",
          "md5": "d7c1ba34900a11cee29894bd8161c001",
          "sha256": "7e05f46ef32e04c5c0209a7e1e61c12ba83b16d9d54d00615ce66f90a9a52ba9"
        },
        "downloads": -1,
        "filename": "netCDF4-enhancement-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d7c1ba34900a11cee29894bd8161c001",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15243,
        "upload_time": "2020-05-28T10:57:44",
        "upload_time_iso_8601": "2020-05-28T10:57:44.891951Z",
        "url": "https://files.pythonhosted.org/packages/7c/51/377352ec9494921a0dded36ee870a21fffbcc4a23ce78e613c74e2c662fd/netCDF4-enhancement-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58c76e25d12f6d2c530d51934ca3cf14a7ec04ee5befd0d91417a2a50ea32869",
          "md5": "d8f8cb23ea3379621cc55ddc085c3439",
          "sha256": "dc918d8ea9f2e56353807102401bc549e203be510ab6810f9ceeb64fdc489e18"
        },
        "downloads": -1,
        "filename": "netCDF4_enhancement-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8f8cb23ea3379621cc55ddc085c3439",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13926,
        "upload_time": "2020-05-28T16:18:30",
        "upload_time_iso_8601": "2020-05-28T16:18:30.276253Z",
        "url": "https://files.pythonhosted.org/packages/58/c7/6e25d12f6d2c530d51934ca3cf14a7ec04ee5befd0d91417a2a50ea32869/netCDF4_enhancement-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250ce9ea21629291095a0fc13595b18516f3838b3f263ebd60bbb11e53323077",
          "md5": "a72c674205350ffff59332271387e612",
          "sha256": "81c961d8bdb2bd5e47626494cb07898d0cce8d35da51dcdb19cadaf9ef0bb257"
        },
        "downloads": -1,
        "filename": "netCDF4-enhancement-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a72c674205350ffff59332271387e612",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15959,
        "upload_time": "2020-05-28T16:18:31",
        "upload_time_iso_8601": "2020-05-28T16:18:31.986780Z",
        "url": "https://files.pythonhosted.org/packages/25/0c/e9ea21629291095a0fc13595b18516f3838b3f263ebd60bbb11e53323077/netCDF4-enhancement-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58c76e25d12f6d2c530d51934ca3cf14a7ec04ee5befd0d91417a2a50ea32869",
        "md5": "d8f8cb23ea3379621cc55ddc085c3439",
        "sha256": "dc918d8ea9f2e56353807102401bc549e203be510ab6810f9ceeb64fdc489e18"
      },
      "downloads": -1,
      "filename": "netCDF4_enhancement-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8f8cb23ea3379621cc55ddc085c3439",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13926,
      "upload_time": "2020-05-28T16:18:30",
      "upload_time_iso_8601": "2020-05-28T16:18:30.276253Z",
      "url": "https://files.pythonhosted.org/packages/58/c7/6e25d12f6d2c530d51934ca3cf14a7ec04ee5befd0d91417a2a50ea32869/netCDF4_enhancement-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "250ce9ea21629291095a0fc13595b18516f3838b3f263ebd60bbb11e53323077",
        "md5": "a72c674205350ffff59332271387e612",
        "sha256": "81c961d8bdb2bd5e47626494cb07898d0cce8d35da51dcdb19cadaf9ef0bb257"
      },
      "downloads": -1,
      "filename": "netCDF4-enhancement-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a72c674205350ffff59332271387e612",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15959,
      "upload_time": "2020-05-28T16:18:31",
      "upload_time_iso_8601": "2020-05-28T16:18:31.986780Z",
      "url": "https://files.pythonhosted.org/packages/25/0c/e9ea21629291095a0fc13595b18516f3838b3f263ebd60bbb11e53323077/netCDF4-enhancement-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}