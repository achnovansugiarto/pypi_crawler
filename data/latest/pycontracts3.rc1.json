{
  "info": {
    "author": "Andrea Censi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Documentation",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": ".. image:: https://circleci.com/gh/AndreaCensi/contracts.svg?style=svg\n    :target: https://circleci.com/gh/AndreaCensi/contracts\n\nPyContracts is a Python package that allows to declare constraints on function parameters and\nreturn values. It supports a basic type system, variables binding, arithmetic constraints, and\nhas several specialized contracts (notably for Numpy arrays). \n\n\nAs a quick intro, please see `this presentation about PyContracts`_.\n\n.. _`this presentation about PyContracts`: http://censi.mit.edu/pub/research/201410-pycontracts/201410-pycontracts.pdf \n\n.. image:: http://censi.mit.edu/pub/research/201410-pycontracts/201410-pycontracts.border.png\n   :height: 100px\n   :target: http://censi.mit.edu/pub/research/201410-pycontracts/201410-pycontracts.pdf \n   :alt: A presentation about PyContracts\n\n\n\n.. container:: brief_summary\n  \n    A brief summary follows. See the full documentation at: <http://andreacensi.github.com/contracts/>\n\n\n**Why**: The purpose of PyContracts is **not** to turn Python into a statically-typed language\n(albeit you can be as strict as you wish), but, rather, to avoid the time-consuming and\nobfuscating checking of various preconditions. In fact, more than the type constraints, I found\nuseful the ability to impose value and size constraints. For example, \"I need a list of at least\n3 positive numbers\" can be expressed as ``list[>=3](number, >0))``. If you find that\nPyContracts is overkill for you, you might want to try a simpler alternative, such as\ntypecheck_. If you find that PyContracts is not *enough* for you, you probably want to be\nusing Haskell_ instead of Python.\n\n**Specifying contracts**: Contracts can be specified in three ways:\n\n1. **Using the ``@contract`` decorator**: ::\n   \n      @contract(a='int,>0', b='list[N],N>0', returns='list[N]')\n      def my_function(a, b):\n          ...\n\n2. **Using annotations** (for Python 3): :: \n  \n      @contract\n      def my_function(a : 'int,>0', b : 'list[N],N>0') -> 'list[N]': \n           # Requires b to be a nonempty list, and the return \n           # value to have the same length.\n           ...\n      \n3. **Using docstrings**, with the ``:type:`` and ``:rtype:`` tags: ::\n   \n      @contract\n      def my_function(a, b): \n          \"\"\" Function description.\n              :type a: int,>0\n              :type b: list[N],N>0\n              :rtype: list[N]\n          \"\"\"\n          ...\n          \n..\n   In any case, PyContracts will include the spec in the ``__doc__`` attribute.\n\n**Deployment**: In production, all checks can be disabled using the function ``contracts.disable_all()``, so the performance hit is 0.\n\n**Extensions:** You can extend PyContracts with new contracts types: ::\n\n    new_contract('valid_name', lambda s: isinstance(s, str) and len(s)>0)\n    @contract(names='dict(int: (valid_name, int))')\n    def process_accounting(records):\n        ...\n\nAny Python type is a contract: ::\n\n    @contract(a=int, # simple contract\n              b='int,>0' # more complicated\n              )\n    def f(a, b):\n        ...\n\n**Enforcing interfaces**:  ``ContractsMeta`` is a metaclass,\nlike ABCMeta, which propagates contracts to the subclasses: ::\n\n    from contracts import contract, ContractsMeta, with_metaclass\n    \n    class Base(with_metaclass(ContractsMeta, object)):\n\n        @abstractmethod\n        @contract(probability='float,>=0,<=1')\n        def sample(self, probability):\n            pass\n\n    class Derived(Base):\n        # The contract above is automatically enforced, \n        # without this class having to know about PyContracts at all!\n        def sample(self, probability):\n            ....\n\n**Numpy**: There is special support for Numpy: ::\n\n    @contract(image='array[HxWx3](uint8),H>10,W>10')\n    def recolor(image):\n        ...\n\n**Status:** The syntax is stable and it won't be changed. PyContracts is very well tested on Python 2.x. \n\n**Status on Python 3.x:** We reached feature parity! Everything works on Python 3 now.\n\n**Contributors**:\n\n- `Chris Beaumont`_ (Harvard-Smithsonian Center for Astrophysics): ``$var`` syntax; kwargs/args for extensions.\n- `Brett Graham`_ (Rowland Institute at Harvard University):  ``attr(name:type)`` syntax for checking types of attributes.\n- `William Furr`_: bug reports and performance improvements\n- `Karol Kuczmarski`_ (Google Zurich):  implementation of \"string\" and \"unicode\" contracts\n- `Maarten Derickx`_ (Leiden U.):  documentation fixes\n- `Calen Pennington`_ (EdX):  disabling checks inside check() function.\n- `Adam Palay`_ (EdX): implementation of environment variable enabling/disabling override.\n- `Ryan Heimbuch`_:  bug reports \n- Bernhard Biskup:  bug reports\n- `asharp`_: bug fixes\n- `Dennis Kempin`_ (Google mothership): Sphinx-style constraints specs\n- `Andy Hayden`_: Python 3 support, more efficient Numpy checks\n- `Jonathan Sharpe`_: contracts for file-like objects, not operator\n\n(Please let me know if I forgot anybody.)\n\n.. _`Jonathan Sharpe`: http://jonathansharpe.me.uk/\n\n.. _`Chris Beaumont`: http://chrisbeaumont.org/\n.. _`asharp`:  https://github.com/asharp\n.. _`Maarten Derickx`: http://mderickx.nl/\n.. _`Ryan Heimbuch`: https://github.com/ryanheimbuch-wf\n.. _`Calen Pennington`: https://github.com/cpennington\n.. _`Adam Palay`: https://github.com/adampalay\n.. _`William Furr`: http://www.ccs.neu.edu/home/furrwf/\n.. _`Karol Kuczmarski`:  http://xion.org.pl/\n.. _`Brett Graham`: https://github.com/braingram\n.. _`Dennis Kempin`: https://github.com/denniskempin\n.. _`Andy Hayden`: http://careers.stackoverflow.com/hayd\n\n.. _typecheck: http://oakwinter.com/code/typecheck/\n.. _Haskell: http://www.haskell.org/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "http://github.com/AndreaCensi/contracts/tarball/3.0.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://andreacensi.github.com/contracts/",
    "keywords": "type checking,value checking,contracts",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyContracts3",
    "package_url": "https://pypi.org/project/PyContracts3/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyContracts3/",
    "project_urls": {
      "Download": "http://github.com/AndreaCensi/contracts/tarball/3.0.2",
      "Homepage": "http://andreacensi.github.com/contracts/"
    },
    "release_url": "https://pypi.org/project/PyContracts3/3.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "PyContracts is a Python package that allows to declare constraints on function parameters and return values. Contracts can be specified using Python3 annotations, in a decorator, or inside a docstring :type: and :rtype: tags. PyContracts supports a basic type system, variables binding, arithmetic constraints, and has several specialized contracts (notably for Numpy arrays), as well as an extension API.",
    "version": "3.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7688729,
  "releases": {
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf794784b017f7ab3310f8a2360264688a0b12f974bda503550ed581b40976e6",
          "md5": "ccdf2005de48f0a83ec66f3c3334346d",
          "sha256": "9badfdfd71c9eb7e68ced138e612163564af440be961951f2535e0a0454b49ef"
        },
        "downloads": -1,
        "filename": "PyContracts3-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ccdf2005de48f0a83ec66f3c3334346d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63931,
        "upload_time": "2020-07-13T07:49:38",
        "upload_time_iso_8601": "2020-07-13T07:49:38.416275Z",
        "url": "https://files.pythonhosted.org/packages/cf/79/4784b017f7ab3310f8a2360264688a0b12f974bda503550ed581b40976e6/PyContracts3-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf794784b017f7ab3310f8a2360264688a0b12f974bda503550ed581b40976e6",
        "md5": "ccdf2005de48f0a83ec66f3c3334346d",
        "sha256": "9badfdfd71c9eb7e68ced138e612163564af440be961951f2535e0a0454b49ef"
      },
      "downloads": -1,
      "filename": "PyContracts3-3.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ccdf2005de48f0a83ec66f3c3334346d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63931,
      "upload_time": "2020-07-13T07:49:38",
      "upload_time_iso_8601": "2020-07-13T07:49:38.416275Z",
      "url": "https://files.pythonhosted.org/packages/cf/79/4784b017f7ab3310f8a2360264688a0b12f974bda503550ed581b40976e6/PyContracts3-3.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}