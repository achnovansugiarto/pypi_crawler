{
  "info": {
    "author": "Shadi Zabad",
    "author_email": "shadi.zabad@mail.mcgill.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# `magenpy`: *M*odeling and *A*nalysis of (Statistical) *Gen*etics data in *py*thon\n\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/magenpy.svg)](https://pypi.python.org/pypi/magenpy/)\n[![PyPI version fury.io](https://badge.fury.io/py/magenpy.svg)](https://pypi.python.org/pypi/magenpy/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis repository includes modules and scripts for loading, manipulating, and simulating with genotype data. \nThe software works mainly with `plink`'s `.bed` file format, with the hope that we will extend this to \nother genotype data formats in the future.\n\nThe features and functionalities that this package supports are:\n\n- Efficient LD matrix construction and storage in [Zarr](https://zarr.readthedocs.io/en/stable/) array format.\n- Data structures for harmonizing various GWAS data sources.\n- Simulating complex traits (continuous and binary) using elaborate genetic architectures.\n  - Multi-cohort simulation scenarios (beta)\n  - Simulations incorporating functional annotations in the genetic architecture (beta)\n- Interfaces for performing association testing on simulated and real phenotypes.\n- Preliminary support for processing and integrating genomic annotations with other data sources.\n\n**NOTE**: The codebase is still in active development and some of interfaces or data structures will be \nreplaced or modified in future releases. Check the [CHANGELOG](CHANGELOG.md) for the latest updates \nand modifications.\n\n## Table of Contents\n\n- [Installation](#Installation)\n- [Getting started](#getting-started)\n- [Features and Configurations](#features-and-configurations)\n   - [(1) Complex trait simulation](#1-complex-trait-simulation)\n   - [(2) Genome-wide Association Testing](#2-genome-wide-association-testing)\n   - [(3) Calculating LD matrices](#3-calculating-ld-matrices)\n      - [LD estimators and their properties](#ld-estimators-and-their-properties)\n   - [(4) Data harmonization](#4-data-harmonization)\n   - [(5) Using `plink` as a backend](#5-using-plink-as-backend)\n   - [(6) Commandline scripts](#6-commandline-scripts)\n- [Citations](#citations) \n\n\n## Installation\n\n`magenpy` is now available on the python package index `pypi` and \ncan be minimally installed using the package installer `pip`:\n\n```shell\npip install magenpy\n```\n\nTo access the full functionalities of `magenpy`, however, it is recommended that \nyou install the full list of dependencies:\n\n```shell\npip install magenpy[full]\n```\n\nTo use `magenpy` on a shared computing cluster, we recommend installing it in a \n`python` virtual environment. For example:\n\n```shell\nmodule load python/3.8\npython -m venv magenpy_env\nsource magenpy_env/bin/activate\npip install --upgrade pip\npip install magenpy\n```\n\nFinally, if you wish to install the package from source, \nyou can directly clone it from the GitHub repository and install it locally \nas follows:\n\n```shell\ngit clone https://github.com/shz9/magenpy.git\ncd magenpy\nmake install\n```\n\n## Getting started\n\n`magenpy` comes with a sample dataset from the 1000G project that \nyou can use to experiment and familiarize yourself with its features. \nOnce the package is installed, you can run a couple of quick tests \nto verify that the main features are working properly.\n\nFor example, to simulate a quantitative trait, you can invoke \nthe following commands in a `python` interpreter:\n\n```python\nimport magenpy as mgp\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         h2=0.1)\ng_sim.simulate()\ng_sim.to_phenotype_table()\n#          FID      IID  phenotype\n# 0    HG00096  HG00096   0.795651\n# 1    HG00097  HG00097   0.550914\n# 2    HG00099  HG00099  -0.928486\n# 3    HG00100  HG00100   0.893626\n# 4    HG00101  HG00101  -0.670106\n# ..       ...      ...        ...\n# 373  NA20815  NA20815   0.246071\n# 374  NA20818  NA20818   1.821426\n# 375  NA20819  NA20819  -0.457994\n# 376  NA20826  NA20826   0.954208\n# 377  NA20828  NA20828   0.088412\n#\n# [378 rows x 3 columns]\n```\n\nThis simulates a quantitative trait with heritability set to 0.1, \nusing genotype data for a subset of 378 individuals of European ancestry \nfrom the 1000G project and approximately 15,000 SNPs on chromosome 22. \nBy default, the simulator assumes that only 10% of the SNPs are \ncausal (this is drawn at random from a Bernoulli distribution with `p=0.1`).\nTo obtain a list of the causal SNPs in this simulation, you can invoke the \n`.get_causal_status()` method, which returns a boolean vector indicating \nwhether each SNP is causal or not:\n\n```python\ng_sim.get_causal_status()\n# {22: array([ True, False, False, ..., False, False, False])}\n```\n\nIn this case, for example, the first SNP is causal for the simulated phenotype. A note \nabout the design of data structures in `magenpy`. Our main data structure is a class known \nas `GWADataLoader`, which is an all-purpose object that brings together different data sources and \nharmonizes them together. In `GWADataLoader`, SNP-related data sources are stored in dictionaries, where \nthe key is the chromosome number and the value is the data structure associated with that chromosome. \nThus, in the output above, the data is for chromosome 22 and the feature is a boolean \nvector indicating whether a given SNP is causal or not. \n\nYou can also get the full information \nabout the genetic architecture by invoking the method `.to_true_beta_table()`,\nwhich returns a `pandas` dataframe with the effect size, expected heritability contribution, \nand causal status of each variant in the simulation:\n\n```python\ng_sim.to_true_beta_table()\n#        CHR         SNP A1  MixtureComponent  Heritability      BETA  Causal\n# 0       22    rs131538  A                 1      0.000063 -0.008013    True\n# 1       22   rs9605903  C                 0      0.000000  0.000000   False\n# 2       22   rs5746647  G                 0      0.000000  0.000000   False\n# 3       22  rs16980739  T                 0      0.000000  0.000000   False\n# 4       22   rs9605923  A                 0      0.000000  0.000000   False\n# ...    ...         ... ..               ...           ...       ...     ...\n# 15933   22   rs8137951  A                 0      0.000000  0.000000   False\n# 15934   22   rs2301584  A                 0      0.000000  0.000000   False\n# 15935   22   rs3810648  G                 0      0.000000  0.000000   False\n# 15936   22   rs2285395  A                 0      0.000000  0.000000   False\n# 15937   22  rs28729663  A                 0      0.000000  0.000000   False\n#\n# [15938 rows x 7 columns]\n```\n\n\nWe can also simulate a more complex genetic architecture by, e.g. simulating effect sizes from \n4 Gaussian mixture components, instead of the standard spike-and-slab density used by default:\n\n```python\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         pi=[.9, .03, .03, .04],\n                         d=[0., .01, .1, 1.],\n                         h2=0.1)\ng_sim.simulate()\ng_sim.to_phenotype_table()\n#         FID      IID  phenotype\n# 0    HG00096  HG00096   0.435024\n# 1    HG00097  HG00097   1.030874\n# 2    HG00099  HG00099   0.042322\n# 3    HG00100  HG00100   1.392733\n# 4    HG00101  HG00101   0.722763\n# ..       ...      ...        ...\n# 373  NA20815  NA20815  -0.402506\n# 374  NA20818  NA20818  -0.321429\n# 375  NA20819  NA20819  -0.845630\n# 376  NA20826  NA20826  -0.690078\n# 377  NA20828  NA20828   0.256937\n#\n# [378 rows x 3 columns]\n```\n\nThe parameter `pi` specifies the mixing proportions for the Gaussian mixture \ndistribution and the `d` is a multiplier on the variance (see references below). In this case, 90% of the variants \nare not causal, and the remaining 10% are divided between 3 mixture components that contribute \ndifferentially to the heritability. The last component, which constitutes 4% of all SNPs, contributes 100 \ntimes and 10 times to the heritability than components 2 an 3, respectively.\n\n## Features and Configurations\n\n### (1) Complex trait simulation\n\n`magenpy` may be used for complex trait simulation employing a variety of different \ngenetic architectures and phenotype likelihoods. For example, to simulate a quantitative \ntrait with heritability set to 0.25 and where a random subset of 15% of the variants are causal, \nyou may invoke the following command:\n\n```python\nimport magenpy as mgp\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         pi=[.85, .15],\n                         h2=0.25)\ng_sim.simulate()\n```\n\nThen, you can export the simulated phenotype to a `pandas` dataframe as follows:\n\n```python\ng_sim.to_phenotype_table()\n#         FID      IID  phenotype\n# 0    HG00096  HG00096  -2.185944\n# 1    HG00097  HG00097  -1.664984\n# 2    HG00099  HG00099  -0.208703\n# 3    HG00100  HG00100   0.257040\n# 4    HG00101  HG00101  -0.068826\n# ..       ...      ...        ...\n# 373  NA20815  NA20815  -1.770358\n# 374  NA20818  NA20818   1.823890\n# 375  NA20819  NA20819   0.835763\n# 376  NA20826  NA20826  -0.029256\n# 377  NA20828  NA20828  -0.088353\n#\n# [378 rows x 3 columns]\n```\n\nTo simulate a binary, or case-control, trait, the interface is very similar. First, \nyou need to specify that the likelihood for the phenotype is binomial (`phenotype_likelihood='binomial'`), and then \nspecify the prevalence of the positive cases in the population. For example, \nto simulate a case-control trait with heritability of 0.3 and prevalence of 8%, we can invoke the following \ncommand:\n\n```python\nimport magenpy as mgp\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         phenotype_likelihood='binomial',\n                         prevalence=.08,\n                         h2=0.3)\ng_sim.simulate()\ng_sim.to_phenotype_table()\n#          FID      IID  phenotype\n# 0    HG00096  HG00096          0\n# 1    HG00097  HG00097          0\n# 2    HG00099  HG00099          0\n# 3    HG00100  HG00100          0\n# 4    HG00101  HG00101          0\n# ..       ...      ...        ...\n# 373  NA20815  NA20815          0\n# 374  NA20818  NA20818          0\n# 375  NA20819  NA20819          1\n# 376  NA20826  NA20826          0\n# 377  NA20828  NA20828          0\n# \n# [378 rows x 3 columns]\n```\n\n### (2) Genome-wide Association Testing\n\n`magenpy` is not a GWAS tool. However, we do support preliminary association \ntesting functionalities either via closed-form formulas for quantitative traits, or \nby providing a `python` interface to third-party association testing tools, such as `plink`.  \n\nIf you are conducting simple tests based on simulated data, an easy way to perform \nassociation testing is to tell the simulator that you'd like to perform GWAS on the \nsimulated trait, with the `perform_gwas=True` flag:\n\n```python\nimport magenpy as mgp\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         pi=[.85, .15],\n                         h2=0.25)\ng_sim.simulate(perform_gwas=True)\n```\n\nAlternatively, you can conduct association testing on real or \nsimulated phenotypes using the `.perform_gwas()` method and exporting the\nsummary statistics to a `pandas` dataframe with `.to_summary_statistics_table()`:\n\n```python\ng_sim.perform_gwas()\ng_sim.to_summary_statistics_table()\n#        CHR         SNP       POS A1 A2  ...    N      BETA         Z        SE      PVAL\n# 0       22    rs131538  16871137  A  G  ...  378 -0.046662 -0.900937  0.051793  0.367622\n# 1       22   rs9605903  17054720  C  T  ...  378  0.063977  1.235253  0.051793  0.216736\n# 2       22   rs5746647  17057138  G  T  ...  378  0.057151  1.103454  0.051793  0.269830\n# 3       22  rs16980739  17058616  T  C  ...  378 -0.091312 -1.763029  0.051793  0.077896\n# 4       22   rs9605923  17065079  A  T  ...  378  0.069368  1.339338  0.051793  0.180461\n# ...    ...         ...       ... .. ..  ...  ...       ...       ...       ...       ...\n# 15933   22   rs8137951  51165664  A  G  ...  378  0.078817  1.521782  0.051793  0.128064\n# 15934   22   rs2301584  51171497  A  G  ...  378  0.076377  1.474658  0.051793  0.140304\n# 15935   22   rs3810648  51175626  G  A  ...  378 -0.001448 -0.027952  0.051793  0.977701\n# 15936   22   rs2285395  51178090  A  G  ...  378 -0.019057 -0.367949  0.051793  0.712911\n# 15937   22  rs28729663  51219006  A  G  ...  378  0.029667  0.572805  0.051793  0.566777\n#\n# [15938 rows x 11 columns]\n```\n\nIf you wish to use `plink2` for association testing (highly recommended), ensure that \nyou tell `GWASimulator` (or any `GWADataLoader`-derived object) to use plink by explicitly \nspecifying the `backend` software that you wish to use:\n\n```python\nimport magenpy as mgp\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path(),\n                         backend='plink',\n                         pi=[.85, .15],\n                         h2=0.25)\ng_sim.simulate(perform_gwas=True)\n```\n\nWhen using `plink`, we sometimes create temporary intermediate files to pass to the software. To clean up \nthe temporary directories and files, you can invoke the `.cleanup()` command:\n\n```python\ng_sim.cleanup()\n```\n\n### (3) Calculating LD matrices\n\nOne of the main features of the `magenpy` package is an efficient interface for computing \nand storing Linkage Disequilibrium (LD) matrices. LD matrices record the pairwise SNP-by-SNP \nPearson correlation coefficient. In general, LD matrices are computed for each chromosome separately \nor may also be computed within LD blocks from, e.g. LDetect. For large autosomal chromosomes, \nLD matrices can be huge and may require extra care from the user.\n\nIn `magenpy`, LD matrices can be computed using either `xarray` or `plink`, depending on the \nbackend that the user specifies (see Section 5 below). In general, at this moment, we do not recommend using \n`xarray` as a backend for large genotype matrices, as it is less efficient than `plink`. When using the default \n`xarray` as a backend, we compute the full `X'X` (X-transpose-X) matrix first, store it on-disk in chunked \n`Zarr` arrays and then perform all sparsification procedures afterwards. When using `plink` as a \nbackend, on the other hand, we only compute LD between variants that are generally in close proximity \nalong the chromosome, so it is generally more efficient. In the end, both will be transformed such that \nthe LD matrix is stored in sparse `Zarr` arrays.\n\n**A note on dependencies**: If you wish to use `xarray` as a backend to compute LD matrices,\nyou may need to install some of the optional dependencies for `magenpy`, including e.g. `rechunker`. In this case, \nit is recommended that you install all the dependencies listed in `requirements-optional.txt`. If you wish \nto use `plink` as a backend, you may need to configure the paths for `plink` as explained in Section 5 below.\n\nIn either case, to compute an LD matrix using `magenpy`, you can invoke the `.compute_ld()` method \nof all `GWADataLoader`-derived objects, as follows:\n\n```python\n# Using xarray:\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path())\ngdl.compute_ld(estimator='windowed',\n               output_dir='output/ldl/',\n               window_size=100)\n```\n\nThis creates a windowed LD matrix where we only measure the correlation between the focal SNP and the nearest\n100 from either side. As stated above, the LD matrix will be stored on-disk and that is why we must \nspecify the output directory when we call `.compute_ld()`. To use `plink` to compute the LD matrix, \nwe can invoke a similar command:\n\n```python\n# Using plink:\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\ngdl.compute_ld(estimator='windowed',\n               output_dir='output/ld/',\n               cm_window_size=3.)\n```\n\nIn this case, we are computing a windowed LD matrix where we only measure the correlation between \nSNPs that are at most 3 centi Morgan (cM) apart along the chromosome. For this small 1000G dataset, computing \nthe LD matrix takes about a minute. The LD matrices in Zarr format will be written to the path \nspecified in `output_dir`, so ensure that this argument is set to the desired directory. \n\nTo facilitate working with LD matrices stored in `Zarr` format, we created a data structure in cython called `LDMatrix`, \nwhich acts as an intermediary and provides various features. For example, to compute LD scores \nusing this LD matrix, you can invoke the command `.compute_ld_scores()` on it:\n\n```python\ngdl.ld[22]\n# <LDMatrix.LDMatrix at 0x7fcec882e350>\ngdl.ld[22].compute_ld_scores()\n# array([1.60969673, 1.84471792, 1.59205322, ..., 3.3126724 , 3.42234106,\n#        2.97252452])\n```\n\nYou can also get a table that lists the properties of the SNPs included in the LD matrix:\n\n```python\ngdl.ld[22].to_snp_table()\n#        CHR         SNP       POS A1       MAF\n# 0       22   rs9605903  17054720  C  0.260736\n# 1       22   rs5746647  17057138  G  0.060327\n# 2       22  rs16980739  17058616  T  0.131902\n# 3       22   rs9605927  17067005  C  0.033742\n# 4       22   rs5746664  17074622  A  0.066462\n# ...    ...         ...       ... ..       ...\n# 14880   22   rs8137951  51165664  A  0.284254\n# 14881   22   rs2301584  51171497  A  0.183027\n# 14882   22   rs3810648  51175626  G  0.065440\n# 14883   22   rs2285395  51178090  A  0.061350\n# 14884   22  rs28729663  51219006  A  0.159509\n#\n# [14885 rows x 5 columns]\n```\n\nFinally, note that the `LDMatrix` object supports an iterator interface, so in principle \nyou can iterate over rows of the LD matrix without loading the entire thing into memory. \nThe following example shows the first 10 entries of the first row of the matrix:\n\n```python\nnp.array(next(gdl.ld[22]))[:10]\n# array([ 1.00000262, -0.14938791, -0.27089083,  0.33311111,  0.35015815,\n#        -0.08077946, -0.08077946,  0.0797345 , -0.16252513, -0.23680465])\n```\n\nFinally, as of `magenpy>=0.0.2`, now you can export the Zarr array into a `scipy` sparse `csr` \nmatrix as follows:\n\n```python\ngdl.ld[22].to_csr_matrix()\n# <15938x15938 sparse matrix of type '<class 'numpy.float64'>'\n# \twith 24525854 stored elements in Compressed Sparse Row format>\n```\n\n#### LD estimators and their properties\n\n`magenpy` supports computing LD matrices using 4 different estimators that are commonly used \nin statistical genetics applications. \nFor a more thorough description of the estimators and their properties, consult our manuscript \nand the citations therein. The LD estimators are:\n\n1) `windowed` (recommended): The windowed estimator computes the pairwise correlation coefficient between SNPs that are \n    within a pre-defined distance along the chromosome from each other. In many statistical genetics applications, the \n   recommended distance is between 1 and 3 centi Morgan (cM). As of `magenpy==0.0.2`, now you can customize \n   the distance based on three criteria: **(1)** A window size based on the number neighboring variants, **(2)** \n   distance threshold in kilobases (kb), and **(3)** distance threshold in centi Morgan (cM). When defining the \n   boundaries for each SNP, `magenpy` takes the intersection of the boundaries defined by each window.\n   \n```python\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\ngdl.compute_ld('windowed', output_dir='output/ld/',\n               window_size=100, kb_window_size=1000, cm_window_size=2.)\ngdl.cleanup()\n```\n\n2) `block`: The block estimator estimates the pairwise correlation coefficient between \nvariants that are in the same LD block, as defined by, e.g. LDetect. Given an LD block file, \n   we can compute a block-based LD matrix as follows:\n   \n```python\nimport magenpy as mgp\nld_block_url = \"https://bitbucket.org/nygcresearch/ldetect-data/raw/ac125e47bf7ff3e90be31f278a7b6a61daaba0dc/EUR/fourier_ls-all.bed\"\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\ngdl.compute_ld('block', output_dir='output/ld/',\n               ld_blocks_file=ld_block_url)\ngdl.cleanup()\n```\n\nIf you have the LD blocks file on your system, you can also pass the path to the file instead.\n\n3) `shrinkage`: For the shrinkage estimator, we shrink the entries of the LD matrix by a \n   quantity related to the distance between SNPs along the chromosome + some additional information \n   related to the sample from which the genetic map was estimated. In particular, \n   we need to specify the effective population size and the sample size used to \n   estimate the genetic map. Also, to make the matrix sparse, we often specify a threshold value \n   below which we consider the correlation to be zero. Here's an example for the 1000G sample:\n   \n\n```python\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\ngdl.compute_ld('shrinkage', output_dir='output/ld/',\n               genetic_map_ne=11400, # effective population size (Ne)\n               genetic_map_sample_size=183, # Sample size\n               threshold=1e-3) # The cutoff value\ngdl.cleanup()\n```\n\n4) `sample`: This estimator computes the pairwise correlation coefficient between all SNPs on \n   the same chromosome and thus results in a dense matrix. Thus, it is rarely used in practice and \n   we include it here for testing/debugging purposes mostly. To compute the sample LD matrix, you only need \n   to specify the correct estimator:\n   \n```python\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\ngdl.compute_ld('sample', output_dir='output/ld/')\ngdl.cleanup()\n```\n\n### (4) Data harmonization\n\nThere are many different statistical genetics data sources and formats out there. One of the goals of \n`magenpy` is to create a friendly interface for matching and merging these data sources for \ndownstream analyses. For example, for summary statistics-based methods, we often need \nto merge the LD matrix derived from a reference panel with the GWAS summary statistics estimated \nin a different cohort. While this is a simple task, it can be tricky sometimes, e.g. in \ncases where the effect allele is flipped between the two cohort.\n\nThe functionalities that we provide for this are minimal at this stage and mainly geared towards \nharmonizing `Zarr`-formatted LD matrices with GWAS summary statistics. The following example \nshows how to do this in a simple case:\n\n```python\nimport magenpy as mgp\n# First, generate some summary statistics from a simulation:\ng_sim = mgp.GWASimulator(mgp.tgp_eur_data_path())\ng_sim.simulate()\ng_sim.to_summary_statistics_table().to_csv(\n    \"chr_22.sumstats\", sep=\"\\t\", index=False\n)\n# Then load those summary statistics and match them with previously\n# computed windowed LD matrix for chromosome 22:\ngdl = mgp.GWADataLoader(ld_store_files='output/windowed_ld/chr_22/',\n                        sumstats_files='chr_22.sumstats',\n                        sumstats_format='magenpy')\n```\n\nHere, the `GWADataLoader` object takes care of the harmonization step by \nautomatically invoking the `.harmonize_data()` method. When you read or update \nany of the data sources, we recommend that you invoke the `.harmonize_data()` method again \nto make sure that all the data sources are aligned properly. In the near future, \nwe are planning to add many other functionalities in this space. Stay tuned.\n\n### (5) Using `plink` as backend\n\nMany of the functionalities that `magenpy` supports require access to and performing linear algebra \noperations on the genotype matrix. By default, `magenpy` uses `xarray` and `dask` \nto carry out these operations, as these are the tools supported by our main dependency: `pandas-plink`.\n\nHowever, `dask` can be quite slow and inefficient when deployed on large-scale genotype matrices. To get \naround this difficulty, for many operations, such as linear scoring or computing minor allele frequency, \nwe support (and recommend) using `plink` as a backend.\n\nTo use `plink` as a backend for `magenpy`, first you may need to configure the paths \non your system. By default, `magenpy` assumes that, in the shell, the name `plink2` invokes the `plink2` \nexecutable and `plink` invokes `plink1.9` software. To change this behavior, you can update the \nconfiguration file as follows. First, let's see the default configurations that ship with `magenpy`:\n\n```python\nimport magenpy as mgp\nmgp.print_options()\n# -> Section: DEFAULT\n# ---> plink1.9_path: plink\n# ---> plink2_path: plink2\n```\n\nThe above shows the default configurations for the `plink1.9` and `plink2` paths. To change \nthe path for `plink2`, for example, you can use the `set_option()` function:\n\n```python\nmgp.set_option(\"plink2_path\", \"~/software/plink2/plink2\")\nmgp.print_options()\n# -> Section: USER\n# ---> plink2_path: ~/software/plink2/plink2\n# ---> plink1.9_path: plink\n# -> Section: DEFAULT\n# ---> plink1.9_path: plink\n# ---> plink2_path: plink2\n```\n\nAs you can see, this added a new section to the configuration file, named `USER`, that has the \nnew path for the `plink2` software. Now, every time `magenpy` needs to invoke `plink2`, it calls \nthe executable stored at `~/software/plink2/`. Note that you only need to do this once on any particular \nmachine or system, as this preference is now recorded in the configuration file and will be taken into \naccount for all future operations.\n\nNote that for most of the operations, we assume that the user has `plink2` installed. We only \nuse `plink1.9` for some operations that are currently not supported by `plink2`, especially for \ne.g. LD computation. This behavior may change in the near future.\n\nOnce the paths are configured, to use `plink` as a backend for the various computations and \ntools, make sure that you specify the `backend='plink'` flag in `GWADataLoader` and all of its \nderived data structures (including all the `GWASimulator` classes):\n\n```python\nimport magenpy as mgp\ngdl = mgp.GWADataLoader(mgp.tgp_eur_data_path(),\n                        backend='plink')\n```\n\n### (6) Commandline scripts\n\nIf you are not comfortable programming in `python` and would like to access some of the functionalities \nof `magenpy` with minimal interaction with `python` code, we packaged a number of commandline \nscripts that can be useful for some downstream applications.\n\nThe binaries that are currently supported are:\n\n1) `magenpy_ld`: For computing LD matrices and storing them in `Zarr` format.\n2) `magenpy_simulate`: For simulating complex traits with various genetic architectures.\n\nOnce you install `magenpy` via `pip`, these two scripts will be added to the system `PATH` \nand you can invoke them directly from the commandline, as follows:\n\n```shell\n$ magenpy_ld -h\n\n**********************************************                            \n _ __ ___   __ _  __ _  ___ _ __  _ __  _   _ \n| '_ ` _ \\ / _` |/ _` |/ _ \\ '_ \\| '_ \\| | | |\n| | | | | | (_| | (_| |  __/ | | | |_) | |_| |\n|_| |_| |_|\\__,_|\\__, |\\___|_| |_| .__/ \\__, |\n                 |___/           |_|    |___/\nModeling and Analysis of Genetics data in python\nVersion: 0.0.10 | Release date: May 2022\nAuthor: Shadi Zabad, McGill University\n**********************************************\n< Compute LD matrix and output in Zarr format >\n\nusage: magenpy_ld [-h] [--estimator {block,shrinkage,sample,windowed}] --bfile BED_FILE [--keep KEEP_FILE] [--extract EXTRACT_FILE] [--backend {plink,xarray}] [--temp-dir TEMP_DIR]\n                  --output-dir OUTPUT_DIR [--min-maf MIN_MAF] [--min-mac MIN_MAC] [--ld-window LD_WINDOW] [--ld-window-kb LD_WINDOW_KB] [--ld-window-cm LD_WINDOW_CM] [--ld-blocks LD_BLOCKS]\n                  [--genmap-Ne GENMAP_NE] [--genmap-sample-size GENMAP_SS] [--shrinkage-cutoff SHRINK_CUTOFF]\n\nCommandline arguments for LD matrix computation\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --estimator {block,shrinkage,sample,windowed}\n                        The LD estimator (windowed, shrinkage, block, sample)\n  --bfile BED_FILE      The path to a plink BED file\n  --keep KEEP_FILE      A plink-style keep file to select a subset of individuals to compute the LD matrices.\n  --extract EXTRACT_FILE\n                        A plink-style extract file to select a subset of SNPs to compute the LD matrix for.\n  --backend {plink,xarray}\n                        The backend software used to compute the Linkage-Disequilibrium between variants.\n  --temp-dir TEMP_DIR   The temporary directory where we store intermediate files.\n  --output-dir OUTPUT_DIR\n                        The output directory where the Zarr formatted LD matrices will be stored.\n  --min-maf MIN_MAF     The minimum minor allele frequency for variants included in the LD matrix.\n  --min-mac MIN_MAC     The minimum minor allele count for variants included in the LD matrix.\n  --ld-window LD_WINDOW\n                        Maximum number of neighboring SNPs to consider when computing LD.\n  --ld-window-kb LD_WINDOW_KB\n                        Maximum distance (in kilobases) between pairs of variants when computing LD.\n  --ld-window-cm LD_WINDOW_CM\n                        Maximum distance (in centi Morgan) between pairs of variants when computing LD.\n  --ld-blocks LD_BLOCKS\n                        Path to the file with the LD block boundaries, in LDetect format (e.g. chr start stop, tab-separated)\n  --genmap-Ne GENMAP_NE\n                        The effective population size for the population from which the genetic map was derived.\n  --genmap-sample-size GENMAP_SS\n                        The sample size for the dataset used to infer the genetic map.\n  --shrinkage-cutoff SHRINK_CUTOFF\n                        The cutoff value below which we assume that the correlation between variants is zero.\n```\n\nAnd: \n\n```shell\n$ magenpy_simulate -h\n\n**********************************************                            \n _ __ ___   __ _  __ _  ___ _ __  _ __  _   _ \n| '_ ` _ \\ / _` |/ _` |/ _ \\ '_ \\| '_ \\| | | |\n| | | | | | (_| | (_| |  __/ | | | |_) | |_| |\n|_| |_| |_|\\__,_|\\__, |\\___|_| |_| .__/ \\__, |\n                 |___/           |_|    |___/\nModeling and Analysis of Genetics data in python\nVersion: 0.0.10 | Release date: May 2022\nAuthor: Shadi Zabad, McGill University\n**********************************************\n< Simulate complex quantitative or case-control traits >\n\nusage: magenpy_simulate [-h] --bed-files BED_FILES [--keep KEEP_FILE] [--extract EXTRACT_FILE] [--backend {plink,xarray}] [--temp-dir TEMP_DIR] --output-file OUTPUT_FILE\n                        [--output-simulated-effects] [--min-maf MIN_MAF] [--min-mac MIN_MAC] --h2 H2 [--mix-prop MIX_PROP] [--var-mult VAR_MULT] [--likelihood {binomial,gaussian}]\n                        [--prevalence PREVALENCE]\n\nCommandline arguments for the complex trait simulator\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --bed-files BED_FILES\n                        The BED files containing the genotype data. You may use a wildcard here (e.g. \"data/chr_*.bed\")\n  --keep KEEP_FILE      A plink-style keep file to select a subset of individuals for simulation.\n  --extract EXTRACT_FILE\n                        A plink-style extract file to select a subset of SNPs for simulation.\n  --backend {plink,xarray}\n                        The backend software used for the computation.\n  --temp-dir TEMP_DIR   The temporary directory where we store intermediate files.\n  --output-file OUTPUT_FILE\n                        The path where the simulated phenotype will be stored (no extension needed).\n  --output-simulated-effects\n                        Output a table with the true simulated effect size for each variant.\n  --min-maf MIN_MAF     The minimum minor allele frequency for variants included in the simulation.\n  --min-mac MIN_MAC     The minimum minor allele count for variants included in the simulation.\n  --h2 H2               Trait heritability. Ranges between 0. and 1., inclusive.\n  --mix-prop MIX_PROP, -p MIX_PROP\n                        Mixing proportions for the mixture density (comma separated). For example, for the spike-and-slab mixture density, with the proportion of causal variants set to 0.1,\n                        you can specify: \"--mix-prop 0.9,0.1 --var-mult 0,1\".\n  --var-mult VAR_MULT, -d VAR_MULT\n                        Multipliers on the variance for each mixture component.\n  --likelihood {binomial,gaussian}\n                        The likelihood for the simulated trait. Gaussian (e.g. quantitative) or binomial (e.g. case-control).\n  --prevalence PREVALENCE\n                        The prevalence of cases (or proportion of positives) for binary traits. Ranges between 0. and 1.\n```\n\nYou can find examples of how to run the commandline scripts in the `examples` directory on GitHub. \nTo request other functionalities to be packaged with `magenpy`, please contact the developers or \nopen an Issue on [GitHub](https://github.com/shz9/magenpy).\n\n## Citations\n\nShadi Zabad, Simon Gravel, Yue Li. **Fast and Accurate Bayesian Polygenic Risk Modeling with Variational Inference**. (2022)\n\n```bibtex\n@article {\n    Zabad2022.05.10.491396,\n    author = {Zabad, Shadi and Gravel, Simon and Li, Yue},\n    title = {Fast and Accurate Bayesian Polygenic Risk Modeling with Variational Inference},\n    elocation-id = {2022.05.10.491396},\n    year = {2022},\n    doi = {10.1101/2022.05.10.491396},\n    publisher = {Cold Spring Harbor Laboratory},\n    URL = {https://www.biorxiv.org/content/early/2022/05/11/2022.05.10.491396},\n    journal = {bioRxiv}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shz9/magenpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magenpy",
    "package_url": "https://pypi.org/project/magenpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/magenpy/",
    "project_urls": {
      "Homepage": "https://github.com/shz9/magenpy"
    },
    "release_url": "https://pypi.org/project/magenpy/0.0.12/",
    "requires_dist": [
      "dask",
      "scipy",
      "numpy",
      "pandas",
      "pandas-plink (==2.2.4)",
      "psutil",
      "tqdm",
      "zarr",
      "requests",
      "rechunker",
      "Cython ; extra == 'full'",
      "matplotlib ; extra == 'full'",
      "seaborn ; extra == 'full'"
    ],
    "requires_python": "",
    "summary": "Modeling and Analysis of Statistical Genetics data in python",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16846518,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc9d9d23406cef2f5ea399f06e381156e326aa8c946ff6225390055dab81e073",
          "md5": "6d124b5c0715d339d44116e1909ad43f",
          "sha256": "41c8d3a335e653a42a1c6e2bb8da3e811cd8641e419aeba19f0f50742455cdfb"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "6d124b5c0715d339d44116e1909ad43f",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 963708,
        "upload_time": "2022-05-17T16:55:57",
        "upload_time_iso_8601": "2022-05-17T16:55:57.528298Z",
        "url": "https://files.pythonhosted.org/packages/fc/9d/9d23406cef2f5ea399f06e381156e326aa8c946ff6225390055dab81e073/magenpy-0.0.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9302ee3bb9d44f5c96f605de9c778509e1b12bea7202c95706b195cd0557ca51",
          "md5": "12a85be93541885379d058f66d57110b",
          "sha256": "ea153b033d00648fc85c638ee121f5be708007f62fd77020b49a37ecc9cf708d"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12a85be93541885379d058f66d57110b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 781621,
        "upload_time": "2022-05-17T16:56:00",
        "upload_time_iso_8601": "2022-05-17T16:56:00.231752Z",
        "url": "https://files.pythonhosted.org/packages/93/02/ee3bb9d44f5c96f605de9c778509e1b12bea7202c95706b195cd0557ca51/magenpy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0873a531b883896abdee8565e35c99531c31ae1681bc8c725c337e2d47e82c85",
          "md5": "994b443a014ee4754e8583360bfa1d6e",
          "sha256": "dde4f0362842ba078cd69bcd59afee1c711cec5945ef036b4e4923f40cd76bf2"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.10-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "994b443a014ee4754e8583360bfa1d6e",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1439328,
        "upload_time": "2022-08-22T23:25:45",
        "upload_time_iso_8601": "2022-08-22T23:25:45.079931Z",
        "url": "https://files.pythonhosted.org/packages/08/73/a531b883896abdee8565e35c99531c31ae1681bc8c725c337e2d47e82c85/magenpy-0.0.10-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90fae558fceeacd0cb599e88b9dd105d18373c9089c9d11bb4d8c7fb1bc8e6f9",
          "md5": "2092ffa0adb2b556ea020e3039b30b60",
          "sha256": "d10a210c141771862066ade9e4976ad19aae32efd4f1dd09a795774578332116"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "2092ffa0adb2b556ea020e3039b30b60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1250176,
        "upload_time": "2022-08-22T23:25:47",
        "upload_time_iso_8601": "2022-08-22T23:25:47.948883Z",
        "url": "https://files.pythonhosted.org/packages/90/fa/e558fceeacd0cb599e88b9dd105d18373c9089c9d11bb4d8c7fb1bc8e6f9/magenpy-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef35da0075532bf1fef34fbcb34065703ffe4d390e9fcb064b15da3ee6ca65b4",
          "md5": "adf93a3e0b2fe902a0da005ce2db2602",
          "sha256": "59a07138a8eefba329e75a4beb4ace2403c8452a2541b30edfd173500a4d16fa"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.11-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "adf93a3e0b2fe902a0da005ce2db2602",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1439708,
        "upload_time": "2022-09-06T21:47:32",
        "upload_time_iso_8601": "2022-09-06T21:47:32.553292Z",
        "url": "https://files.pythonhosted.org/packages/ef/35/da0075532bf1fef34fbcb34065703ffe4d390e9fcb064b15da3ee6ca65b4/magenpy-0.0.11-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b912b8048d1325fceb19433c27c5479ef1d0117b20b6256f2eb29bf2837c26e6",
          "md5": "aab3b6d6499742973bd3447f41186f5d",
          "sha256": "00c2cf3c077fc20cb9c3a0cfccc811366c8489c40493b9f7bfc16332269908a3"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "aab3b6d6499742973bd3447f41186f5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1250195,
        "upload_time": "2022-09-06T21:47:35",
        "upload_time_iso_8601": "2022-09-06T21:47:35.491454Z",
        "url": "https://files.pythonhosted.org/packages/b9/12/b8048d1325fceb19433c27c5479ef1d0117b20b6256f2eb29bf2837c26e6/magenpy-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66cbede8dc0b21eedc6eea67a73d8c41716551a4edd06e2e3313b53727c9c9ef",
          "md5": "1179757c28c35e15ac262f0023e82190",
          "sha256": "b08f02663454a0c018014d2c6019366855c50776dd7a9db3b4e082995435306a"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.12-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1179757c28c35e15ac262f0023e82190",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1453246,
        "upload_time": "2023-02-13T22:04:32",
        "upload_time_iso_8601": "2023-02-13T22:04:32.309739Z",
        "url": "https://files.pythonhosted.org/packages/66/cb/ede8dc0b21eedc6eea67a73d8c41716551a4edd06e2e3313b53727c9c9ef/magenpy-0.0.12-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5374076a487b5886c7bb5df666c74e212b4981855049c96fea1623c6507c6203",
          "md5": "5bedaf5a9f1b709a6298f5d408ba5cbd",
          "sha256": "b6201e312395944a63588def7b118c4d5bd6d7a4fa29a93b8df5166adb21464d"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "5bedaf5a9f1b709a6298f5d408ba5cbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1254198,
        "upload_time": "2023-02-13T22:04:35",
        "upload_time_iso_8601": "2023-02-13T22:04:35.877429Z",
        "url": "https://files.pythonhosted.org/packages/53/74/076a487b5886c7bb5df666c74e212b4981855049c96fea1623c6507c6203/magenpy-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a81f3405af0cabd44c2ae0f9151185c54e3aae5b7e721a6ad83a95227696dd1d",
          "md5": "ce59d8b77fce0c918e09f8d57bff67c0",
          "sha256": "8c2bf54da1c0b2b5c010b0bec7d20304c56d60e5aa02b75e301d37e7cb858991"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.2-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ce59d8b77fce0c918e09f8d57bff67c0",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 993179,
        "upload_time": "2022-06-15T20:50:47",
        "upload_time_iso_8601": "2022-06-15T20:50:47.905358Z",
        "url": "https://files.pythonhosted.org/packages/a8/1f/3405af0cabd44c2ae0f9151185c54e3aae5b7e721a6ad83a95227696dd1d/magenpy-0.0.2-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "014daa191ae78553570403023169c76cefd9533a5cac295e9e1f4f1634b9c165",
          "md5": "229471a865d96f027ca22f5874b9343c",
          "sha256": "df94235403b8b7feeba2ff76199bd7e4f7a7985d7b3735c9d22e5bca931aefad"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "229471a865d96f027ca22f5874b9343c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 805357,
        "upload_time": "2022-06-15T20:50:50",
        "upload_time_iso_8601": "2022-06-15T20:50:50.595352Z",
        "url": "https://files.pythonhosted.org/packages/01/4d/aa191ae78553570403023169c76cefd9533a5cac295e9e1f4f1634b9c165/magenpy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a856c58797ca057788f6721f75741dc7827e71a05a5bef255046da3c37dd27aa",
          "md5": "2f4297755eeb7a83dd995a404e91c88f",
          "sha256": "37242ecd2ed00c0dad743f9bfd129ed0bff09aaf6cbdc28ab43f3925ab5cc105"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.3-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "2f4297755eeb7a83dd995a404e91c88f",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 995180,
        "upload_time": "2022-06-26T22:15:29",
        "upload_time_iso_8601": "2022-06-26T22:15:29.643356Z",
        "url": "https://files.pythonhosted.org/packages/a8/56/c58797ca057788f6721f75741dc7827e71a05a5bef255046da3c37dd27aa/magenpy-0.0.3-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d1d9340f10273dd88700717f0d34ffe8aa666b7d12975daf598ef308a48482e",
          "md5": "8a6b45f4ea2c0985c3b1160efa772bbc",
          "sha256": "b9c016bda978a6a5fa66c7bad3b80b976ed215ff68d5d5dc3bf470eb94eca6d4"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a6b45f4ea2c0985c3b1160efa772bbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 807438,
        "upload_time": "2022-06-26T22:15:34",
        "upload_time_iso_8601": "2022-06-26T22:15:34.038842Z",
        "url": "https://files.pythonhosted.org/packages/4d/1d/9340f10273dd88700717f0d34ffe8aa666b7d12975daf598ef308a48482e/magenpy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbccd6238c1eca3b3d0af5f1dc9bddbecf5d3f7d0eb20e445613d984bd5e5759",
          "md5": "ce35edd6a7ed571c09eb3977fa06f02f",
          "sha256": "d2e37b21a2a26ca4f8307265eb768981eb272a09ce6bb432c2329e1bfdd0e7f9"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.4-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ce35edd6a7ed571c09eb3977fa06f02f",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1431349,
        "upload_time": "2022-06-28T07:48:27",
        "upload_time_iso_8601": "2022-06-28T07:48:27.428344Z",
        "url": "https://files.pythonhosted.org/packages/cb/cc/d6238c1eca3b3d0af5f1dc9bddbecf5d3f7d0eb20e445613d984bd5e5759/magenpy-0.0.4-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c58305c7daa7100a1b3fcae787abcda4e8ad20f2af3da19d90fc4e4a069c6b93",
          "md5": "2683404c2da481ba5b7700ec9584ce0b",
          "sha256": "edb1f8e21e07b66f8594b9c925b206cf52fec73ec6a1a14de9cad08449332dd0"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2683404c2da481ba5b7700ec9584ce0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1245649,
        "upload_time": "2022-06-28T07:48:30",
        "upload_time_iso_8601": "2022-06-28T07:48:30.226968Z",
        "url": "https://files.pythonhosted.org/packages/c5/83/05c7daa7100a1b3fcae787abcda4e8ad20f2af3da19d90fc4e4a069c6b93/magenpy-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03205a939afecbd7d60be817cbd159bc44dcee325f8a6fa91018ab39266b600a",
          "md5": "23d25101a1eee021e498257afd887c6b",
          "sha256": "4e98cdbd9cf74bfe36d1c3e81482ab109c870af9f1deb726c2b3637e218b7432"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.5-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "23d25101a1eee021e498257afd887c6b",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1431342,
        "upload_time": "2022-06-28T23:45:53",
        "upload_time_iso_8601": "2022-06-28T23:45:53.264236Z",
        "url": "https://files.pythonhosted.org/packages/03/20/5a939afecbd7d60be817cbd159bc44dcee325f8a6fa91018ab39266b600a/magenpy-0.0.5-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31cbed2084073879c53853e1ed71e143023f2a9c46efa15e4eb0101a3240d4ee",
          "md5": "412eb696100367da3d3dca93fa1caf6e",
          "sha256": "8060acb419f14cdcca180b500668ab2e0d508895bc0e4bda01c1d19aac838498"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "412eb696100367da3d3dca93fa1caf6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1245629,
        "upload_time": "2022-06-28T23:45:56",
        "upload_time_iso_8601": "2022-06-28T23:45:56.237145Z",
        "url": "https://files.pythonhosted.org/packages/31/cb/ed2084073879c53853e1ed71e143023f2a9c46efa15e4eb0101a3240d4ee/magenpy-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "765d60b414a2fbf6e3dd987efe137240be2051e7360c430f4d24e1658c268a32",
          "md5": "ec8df339dec1c3e90953768cba8a7f3e",
          "sha256": "e8b05c3fd097cc8877f70eb870df4642938c277b241c4e9762246b9494a8ed1f"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.6-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ec8df339dec1c3e90953768cba8a7f3e",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1437647,
        "upload_time": "2022-07-11T05:46:28",
        "upload_time_iso_8601": "2022-07-11T05:46:28.581466Z",
        "url": "https://files.pythonhosted.org/packages/76/5d/60b414a2fbf6e3dd987efe137240be2051e7360c430f4d24e1658c268a32/magenpy-0.0.6-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b439b5e857e752e098aa6e832341ac4f0a8f80628d35c6cb39c8253ba24ccec1",
          "md5": "0a67d40e3ca7fb5b5ed978a2ecb02f4d",
          "sha256": "c0f315c01609574db23001b930c347feba9f2311db74d728b5c54c111a00dbec"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0a67d40e3ca7fb5b5ed978a2ecb02f4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1248338,
        "upload_time": "2022-07-11T05:46:31",
        "upload_time_iso_8601": "2022-07-11T05:46:31.562183Z",
        "url": "https://files.pythonhosted.org/packages/b4/39/b5e857e752e098aa6e832341ac4f0a8f80628d35c6cb39c8253ba24ccec1/magenpy-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87e5fb8ca0824b2eb603855b9fe6b68ca5908c4cac334b70d2643d69bb79a86b",
          "md5": "b685eb4f1ddd2895a490c2d403e840ab",
          "sha256": "f7f9c7c9a8983025c265ab953a735cff2af812e2038aa587c9e618f307ddd64a"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.7-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b685eb4f1ddd2895a490c2d403e840ab",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1438314,
        "upload_time": "2022-07-13T03:54:15",
        "upload_time_iso_8601": "2022-07-13T03:54:15.386777Z",
        "url": "https://files.pythonhosted.org/packages/87/e5/fb8ca0824b2eb603855b9fe6b68ca5908c4cac334b70d2643d69bb79a86b/magenpy-0.0.7-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70c1482430379459cc4d6bc2f665a23ac5c16c2856b3a01addb17dc76ac2d98",
          "md5": "72241e65d986528bd9fd13ce78d97e12",
          "sha256": "48e9d05e0097ba41acb2d0294858d7534db550ea9cd1ce2bad780d5f70950ff9"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "72241e65d986528bd9fd13ce78d97e12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1249212,
        "upload_time": "2022-07-13T03:54:18",
        "upload_time_iso_8601": "2022-07-13T03:54:18.174392Z",
        "url": "https://files.pythonhosted.org/packages/a7/0c/1482430379459cc4d6bc2f665a23ac5c16c2856b3a01addb17dc76ac2d98/magenpy-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7a83ba83da5b64a7dac9c6fec2405661693df9a77c7fa87b0ca556db40cb522",
          "md5": "b2e80e170ac3618e415fb2f22eef9a16",
          "sha256": "31a3fb3455c2d3ca5325fabb9393b6261204ff7dff39d635f0932a386877b202"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.8-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b2e80e170ac3618e415fb2f22eef9a16",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1439071,
        "upload_time": "2022-08-09T07:48:15",
        "upload_time_iso_8601": "2022-08-09T07:48:15.612354Z",
        "url": "https://files.pythonhosted.org/packages/a7/a8/3ba83da5b64a7dac9c6fec2405661693df9a77c7fa87b0ca556db40cb522/magenpy-0.0.8-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f4babae2c0ec371f9c156c2749ce91db2ccfaffc80749c615513b70b2d4fd8c",
          "md5": "ff49d654a25397420904e1cf6fe77584",
          "sha256": "54d7b3fe7a55aa58baebde77132a1ce79c1a67b8dc5956c2261b8261714c85f7"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ff49d654a25397420904e1cf6fe77584",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1249861,
        "upload_time": "2022-08-09T07:48:18",
        "upload_time_iso_8601": "2022-08-09T07:48:18.408886Z",
        "url": "https://files.pythonhosted.org/packages/8f/4b/abae2c0ec371f9c156c2749ce91db2ccfaffc80749c615513b70b2d4fd8c/magenpy-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a5707892c6b7ad8b4a5411f00273b2e6e915eca14bd1644ff17960545e4e6fa",
          "md5": "72e2c909f7a42182d40074a4106c10ff",
          "sha256": "8307a41e9625ee2e2ac987cafec72057f2047a1d39af08734967c80806ab2ec0"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.9-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "72e2c909f7a42182d40074a4106c10ff",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1439132,
        "upload_time": "2022-08-09T20:37:14",
        "upload_time_iso_8601": "2022-08-09T20:37:14.619698Z",
        "url": "https://files.pythonhosted.org/packages/8a/57/07892c6b7ad8b4a5411f00273b2e6e915eca14bd1644ff17960545e4e6fa/magenpy-0.0.9-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48f959478ed03877f68a9e313ce0d8c3feb2b2084860988b9d3d2a15f3223eb8",
          "md5": "ee63a9c9097dd832266d215661f2e619",
          "sha256": "69fde250a4d0cd1d4102f9dc806d7cb238aa0518919f4c22f139240b4bd8d4b0"
        },
        "downloads": -1,
        "filename": "magenpy-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ee63a9c9097dd832266d215661f2e619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1250007,
        "upload_time": "2022-08-09T20:37:18",
        "upload_time_iso_8601": "2022-08-09T20:37:18.539415Z",
        "url": "https://files.pythonhosted.org/packages/48/f9/59478ed03877f68a9e313ce0d8c3feb2b2084860988b9d3d2a15f3223eb8/magenpy-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66cbede8dc0b21eedc6eea67a73d8c41716551a4edd06e2e3313b53727c9c9ef",
        "md5": "1179757c28c35e15ac262f0023e82190",
        "sha256": "b08f02663454a0c018014d2c6019366855c50776dd7a9db3b4e082995435306a"
      },
      "downloads": -1,
      "filename": "magenpy-0.0.12-cp37-cp37m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1179757c28c35e15ac262f0023e82190",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 1453246,
      "upload_time": "2023-02-13T22:04:32",
      "upload_time_iso_8601": "2023-02-13T22:04:32.309739Z",
      "url": "https://files.pythonhosted.org/packages/66/cb/ede8dc0b21eedc6eea67a73d8c41716551a4edd06e2e3313b53727c9c9ef/magenpy-0.0.12-cp37-cp37m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5374076a487b5886c7bb5df666c74e212b4981855049c96fea1623c6507c6203",
        "md5": "5bedaf5a9f1b709a6298f5d408ba5cbd",
        "sha256": "b6201e312395944a63588def7b118c4d5bd6d7a4fa29a93b8df5166adb21464d"
      },
      "downloads": -1,
      "filename": "magenpy-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "5bedaf5a9f1b709a6298f5d408ba5cbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1254198,
      "upload_time": "2023-02-13T22:04:35",
      "upload_time_iso_8601": "2023-02-13T22:04:35.877429Z",
      "url": "https://files.pythonhosted.org/packages/53/74/076a487b5886c7bb5df666c74e212b4981855049c96fea1623c6507c6203/magenpy-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}