{
  "info": {
    "author": "Valdecy Pereira",
    "author_email": "valdecy.pereira@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyMetaheuristic\n\n## Introduction\n\nA python library for the following Metaheuristics: **Adaptive Random Search**, **Ant Lion Optimizer**, **Arithmetic Optimization Algorithm**, **Artificial Bee Colony Optimization**, **Artificial Fish Swarm Algorithm**, **Bat Algorithm**, **Biogeography Based Optimization**, **Cross-Entropy Method**, **Crow Search Algorithm**, **Cuckoo Search**, **Differential Evolution**, **Dispersive Flies Optimization**, **Dragonfly Algorithm**, **Firefly Algorithm**, **Flow Direction Algorithm**, **Flower Pollination Algorithm**, **Genetic Algorithm**, **Grasshopper Optimization Algorithm**, **Gravitational Search Algorithm**, **Grey Wolf Optimizer**, **Harris Hawks Optimization**, **Improved Grey Wolf Optimizer**, **Improved Whale Optimization Algorithm**, **Jaya**, **Jellyfish Search Optimizer**, **Krill Herd Algorithm**, **Memetic Algorithm**, **Moth Flame Optimization**, **Multiverse Optimizer**, **Pathfinder Algorithm**, **Particle Swarm Optimization**, **Random Search**, **Salp Swarm Algorithm**, **Simulated Annealing**, **Sine Cosine Algorithm**, **Student Psychology Based Optimization**; **Symbiotic Organisms Search**; **Teaching Learning Based Optimization**, **Whale Optimization Algorithm**.\n\n## Usage\n\n1. Install\n\n```bash\npip install pyMetaheuristic\n```\n\n2. Import\n\n```py3\n\n# Import PSO\nfrom pyMetaheuristic.algorithm import particle_swarm_optimization\n\n# Import a Test Function. Available Test Functions: https://bit.ly/3KyluPp\nfrom pyMetaheuristic.test_function import easom\n\n# OR Define your Own Custom Function. The function input should be a list of values, \n# each value represents a dimenstion (x1, x2, ...xn) of the problem.\nimport numpy as np\ndef easom(variables_values = [0, 0]):\n    x1, x2     = variables_values\n    func_value = -np.cos(x1)*np.cos(x2)*np.exp(-(x1 - np.pi)**2 - (x2 - np.pi)**2)\n    return func_value\n\n# Run PSO\nparameters = {\n    'swarm_size': 250,\n    'min_values': (-5, -5),\n    'max_values': (5, 5),\n    'iterations': 500,\n    'decay': 0,\n    'w': 0.9,\n    'c1': 2,\n    'c2': 2\n}\npso = particle_swarm_optimization(target_function = easom, **parameters)\n\n# Print Solution\nvariables = pso[:-1]\nminimum   = pso[ -1]\nprint('Variables: ', np.around(variables, 4) , ' Minimum Value Found: ', round(minimum, 4) )\n\n# Plot Solution\nfrom pyMetaheuristic.utils import graphs\nplot_parameters = {\n    'min_values': (-5, -5),\n    'max_values': (5, 5),\n    'step': (0.1, 0.1),\n    'solution': [variables],\n    'proj_view': '3D',\n    'view': 'browser'\n}\ngraphs.plot_single_function(target_function = easom, **plot_parameters)\n\n```\n\n3. Colab Demo\n\nTry it in **Colab**:\n\n- Adaptive Random Search ([ Colab Demo ](https://colab.research.google.com/drive/1PbIjDVGAU75Dgxn6I3bpoWovvYA4RYks?usp=sharing)) ([ Original Paper ](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.87.1623&rep=rep1&type=pdf))\n- Ant Lion Optimizer ([ Colab Demo ](https://colab.research.google.com/drive/11GWyd-o11nzwjafF37YDbReAJyjV4Zhp?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2015.01.010))\n- Arithmetic Optimization Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1AH0B21_fhF4mOV5iR5MJt_JoUslYE_dt?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.cma.2020.113609))\n- Artificial Bee Colony Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1IBouxcnhbNLfCoCV5ueNCq0FZBd9E2gu?usp=sharing)) ( [ Original Paper ](https://abc.erciyes.edu.tr/pub/tr06_2005.pdf))\n- Artificial Fish Swarm Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1OugZdsHhg2HQXMryx4AlH3-RdjjeEKlL?usp=sharing)) ( [ Original Paper ](https://www.sysengi.com/EN/10.12011/1000-6788(2002)11-32))\n- Bat Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1vbUWQ3T8B1XhPrewaFUW9uvCMGmzajk1?usp=sharing)) ( [ Original Paper ](https://arxiv.org/abs/1004.4170))\n- Biogeography Based Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1k3wUNl2R486rkxUhTcTum3usc9f585p0?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1109/TEVC.2008.919004))\n- Cross-Entropy Method ([ Colab Demo ](https://colab.research.google.com/drive/1tI1YbjbAV_O9TdXWYfu8aAlvadC7Crm_?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/S0377-2217(96)00385-2))\n- Crow Search Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/18pFLXYi5s9dMgtA03i5yKeC5WZstDp82?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.compstruc.2016.03.001))\n- Cuckoo Search ([ Colab Demo ](https://colab.research.google.com/drive/1L1STGmVK5IgdjLpEb-o8tuJ0yPCZ65Mt?usp=sharing)) ( [ Original Paper ](https://arxiv.org/abs/1003.1594v1))\n- Differential Evolution ([ Colab Demo ](https://colab.research.google.com/drive/1J56NxxplPOty9rjKQoo5TqN6MzmiqfBe?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1023%2FA%3A1008202821328))\n- Dispersive Flies Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1Y6eULdzLMnM2QpApdvABotxwG01BusmE?usp=sharing)) ( [ Original Paper ](http://dx.doi.org/10.15439/2014F142))\n- Dragonfly Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/19xgEwfzdI-yjFMM3e16PbVF1vX8ohu9c?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1007/s00521-020-04866-y))\n- Firefly Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1vjUDRdRKPAGo6fTXAsvF9INJiF-wb6Pe?usp=sharing)) ( [ Original Paper ](https://www.sciencedirect.com/book/9780124167438/nature-inspired-optimization-algorithms))\n- Flow Direction Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1b72tXxS1X8ntCduN5lUn-An1REcJqp48?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.cie.2021.107224))\n- Flower Pollination Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1U7gTgWwBPOWGyEQGX38nSBnBzb3WWAM1?usp=sharing)) ( [ Original Paper ](https://www.sciencedirect.com/book/9780124167438/nature-inspired-optimization-algorithms))\n- Genetic Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1zY4N9Sf6odAd1hn8Z3SSww403aj2BHhh?usp=sharing)) ( [ Original Paper ](https://ieeexplore.ieee.org/book/6267401))\n- Grey Wolf Optimizer ([ Colab Demo ](https://colab.research.google.com/drive/1EQqLtVs9ghQ9Cu-aFRh13hu5ZdgOf9sc?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2013.12.007))\n- Grasshopper Optimization Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1Mift_Q38gvTkW6eYdkzSS6GpYZKGTwmy?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2017.01.004))\n- Gravitational Search Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1swxMC2Lu9nhObGv7UO5v7eTUm9ULz79Z?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.ins.2009.03.004))\n- Harris Hawks Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1swYF7A0I67zX7NxXRJ1d1k1apeMWX2ix?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.future.2019.02.028))\n- Improved Grey Wolf Optimizer ([ Colab Demo ](https://colab.research.google.com/drive/1Ggu6bd6-FQkLMIrfJynF54b7JBUJaw8Z?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.eswa.2020.113917))\n- Improved Whale Optimization Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1Nvuz7VEqUfUqNzEm1h2_hGhieSH3vgHY?usp=sharing))  ( [ Original Paper ](https://doi.org/10.1016/j.jcde.2019.02.002))\n- Jaya ([ Colab Demo ](https://colab.research.google.com/drive/1B-1I3izW0R41_gSGjU26OGHSmy5BY4Tr?usp=sharing)) ( [ Original Paper ](http://www.growingscience.com/ijiec/Vol7/IJIEC_2015_32.pdf))\n- Jellyfish Search Optimizer ([ Colab Demo ](https://colab.research.google.com/drive/1yKkUozjzzia9W1sa8XJRNhZzFWCkcGl1?usp=sharing)) ( [ Original Paper ]( https://doi.org/10.1016/j.amc.2020.125535))\n- Krill Herd Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1IPQHgHKwR7ELb9EQ--keKmIVrjJLIhZF?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.asoc.2016.08.041))\n- Memetic Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1ivRQVK8auSmU9jF3H7CYmpKLlxRHHrPd?usp=sharing)) ( [ Original Paper ](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.27.9474&rep=rep1&type=pdf))\n- Moth Flame Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1-parlgNJ6urQGmNLLViGxf65PhuAS3L4?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.knosys.2015.07.006))\n- Multiverse Optimizer ([ Colab Demo ](https://colab.research.google.com/drive/1Qna0EHucTYRt9pCfDFzpk9uuNM9tSNKi?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1007/s00521-015-1870-7))\n- Pathfinder Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1gntm149Ye1v_vr--zzBCej_5D68SyBHG?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.asoc.2019.03.012))\n- Particle Swarm Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1bWAmKTkNKSiSQPUcRdokLQYuhQBOhckZ?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1109/ICNN.1995.488968))\n- Random Search ([ Colab Demo ](https://colab.research.google.com/drive/1DCi4aiO_ORlRq9MetZcxHyKAywMuFkRO?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1080/01621459.1953.10501200))\n- Salp Swarm Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1Qhkn2NPO5Gavc6ZHW79n_DjmEFeDvOBq?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2017.07.002))\n- Simulated Annealing ([ Colab Demo ](https://colab.research.google.com/drive/1W6X_kCSGOKEDWIJ-ar25kgWIQAc4U1mA?usp=sharing)) ( [ Original Paper ](https://www.jstor.org/stable/1690046))\n- Sine Cosine Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1WjbCiks_E2s1qw9l9OkZ4mRQPQuWWYzs?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.knosys.2015.12.022))\n- Student Psychology Based Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1T_vFWdPT1qPldVHDTiyMhPiE3YEV9U4j?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2020.102804))\n- Symbiotic Organisms Search ([ Colab Demo ](https://colab.research.google.com/drive/1mvrvi7Q8S1XHKeLCYtZDma9Q48nBewQB?usp=sharing)) ( [ Original Paper ]())\n- Teaching Learning Based Optimization ([ Colab Demo ](https://colab.research.google.com/drive/1ulyyREv0K3xPAtBeUdcKXznTzpKrTyL5?usp=sharing)) ( [ Original Paper ](http://dx.doi.org/10.1016/j.compstruc.2014.03.007))\n- Whale Optimization Algorithm ([ Colab Demo ](https://colab.research.google.com/drive/1Nt52dS0AsXm7RHVIt3K0DAaC1i8zKUUC?usp=sharing)) ( [ Original Paper ](https://doi.org/10.1016/j.advengsoft.2016.01.008))\n\n4. Test Functions\n\n- Available Test Functions: https://bit.ly/3KyluPp\n- Test Functions and their Optimal Solutions with 2D or 3D plots ([ Colab Demo ](https://colab.research.google.com/drive/1Trk6_9IFdBIzZXoVAj2kOBeYJauC5wI8?usp=sharing)) \n\n# Multiobjective Optimization or Many Objectives Optimization\nFor Multiobjective Optimization or Many Objectives Optimization try [pyMultiobjective](https://github.com/Valdecy/pyMultiobjective)\n\n# TSP (Travelling Salesman Problem)\nFor Travelling Salesman Problems try [pyCombinatorial](https://github.com/Valdecy/pyCombinatorial)\n\n# Acknowledgement \n\nThis section is dedicated to all the people that helped to improve or correct the code. Thank you very much!\n\n* Raiser (01.MARCH.2022) - https://github.com/mpraiser - University of Chinese Academy of Sciences (China)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Valdecy/pyMetaheuristic",
    "keywords": "",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyMetaheuristic",
    "package_url": "https://pypi.org/project/pyMetaheuristic/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyMetaheuristic/",
    "project_urls": {
      "Homepage": "https://github.com/Valdecy/pyMetaheuristic"
    },
    "release_url": "https://pypi.org/project/pyMetaheuristic/1.4.1/",
    "requires_dist": [
      "numpy",
      "plotly",
      "scipy"
    ],
    "requires_python": "",
    "summary": "A Metaheuristics Library",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15402193,
  "releases": {
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ceeaf423c84232ebbe99ed82edad8af8bd49d6b11ab55c5ec7e21f2f80cee16",
          "md5": "e74e44fde00053debce1245e7657b861",
          "sha256": "fe1f7e50a46f78db5f2769b38af05a2fb1ea376f596fd3d34e360bb97106a7c1"
        },
        "downloads": -1,
        "filename": "pyMetaheuristic-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e74e44fde00053debce1245e7657b861",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67345,
        "upload_time": "2022-10-13T19:39:44",
        "upload_time_iso_8601": "2022-10-13T19:39:44.494720Z",
        "url": "https://files.pythonhosted.org/packages/5c/ee/af423c84232ebbe99ed82edad8af8bd49d6b11ab55c5ec7e21f2f80cee16/pyMetaheuristic-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67f3e49e034f4899bc29f2eac02d831f65a1abfa4b2cf5882ff105d803f6951d",
          "md5": "4a14d513d7b9cba2e8ba9a94c93f613b",
          "sha256": "6f6ecf11b03c9cc8a08ca0465d6fa68797c52ab50aa66cb8ad4b7ce6257ca28e"
        },
        "downloads": -1,
        "filename": "pyMetaheuristic-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a14d513d7b9cba2e8ba9a94c93f613b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38881,
        "upload_time": "2022-10-13T19:39:47",
        "upload_time_iso_8601": "2022-10-13T19:39:47.007476Z",
        "url": "https://files.pythonhosted.org/packages/67/f3/e49e034f4899bc29f2eac02d831f65a1abfa4b2cf5882ff105d803f6951d/pyMetaheuristic-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ceeaf423c84232ebbe99ed82edad8af8bd49d6b11ab55c5ec7e21f2f80cee16",
        "md5": "e74e44fde00053debce1245e7657b861",
        "sha256": "fe1f7e50a46f78db5f2769b38af05a2fb1ea376f596fd3d34e360bb97106a7c1"
      },
      "downloads": -1,
      "filename": "pyMetaheuristic-1.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e74e44fde00053debce1245e7657b861",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 67345,
      "upload_time": "2022-10-13T19:39:44",
      "upload_time_iso_8601": "2022-10-13T19:39:44.494720Z",
      "url": "https://files.pythonhosted.org/packages/5c/ee/af423c84232ebbe99ed82edad8af8bd49d6b11ab55c5ec7e21f2f80cee16/pyMetaheuristic-1.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67f3e49e034f4899bc29f2eac02d831f65a1abfa4b2cf5882ff105d803f6951d",
        "md5": "4a14d513d7b9cba2e8ba9a94c93f613b",
        "sha256": "6f6ecf11b03c9cc8a08ca0465d6fa68797c52ab50aa66cb8ad4b7ce6257ca28e"
      },
      "downloads": -1,
      "filename": "pyMetaheuristic-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4a14d513d7b9cba2e8ba9a94c93f613b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38881,
      "upload_time": "2022-10-13T19:39:47",
      "upload_time_iso_8601": "2022-10-13T19:39:47.007476Z",
      "url": "https://files.pythonhosted.org/packages/67/f3/e49e034f4899bc29f2eac02d831f65a1abfa4b2cf5882ff105d803f6951d/pyMetaheuristic-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}