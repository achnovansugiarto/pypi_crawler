{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# QUAD: Quantum State Database\n\nGraduate research project for CMSC 33550 (Introduction to Databases) at University of Chicago.\n\n## Installation\n\n```bash\n$ pip3 uninstall cirq  # Fix possibly conflicting packages\n$ pip3 install quad  # Install\n```\n\n\n## Usage\n\n```python\nimport quad\n\ndimension = 100\nstore = quad.VectorStore('path/to/vector/database')  # Load or create vector database\n\n# First time only: Add vectors to database\nfor i in range(10):\n    prng = np.random.RandomState(i)\n    base_vector = prng.normal(size=dimension)\n    for j in range(10):\n        # Generate any vectors\n        vector = base_vector + np.random.normal(scale=0.05, size=dimension)\n        info = {'any-data': ...}\n        vid = store.add(vector, info)\n\n# Several hashes available: L2DistanceHash, MipsHash, StateVectorDistanceHash\nh = quad.lsh.L2DistanceHash.from_random(\n    d=dimension,\n    r=2.5,\n    preproc_scale=1,\n)\n\n# Create locality sensitive collection of vectors\ncollection = quad.AsymmetricLocalCollection(\n    vector_store=store,\n    base_lsh=h,\n    meta_hash_size=10,\n    number_of_maps=10,\n    prng=np.random.RandomState(seed=5),  # Ensure consistent across runs\n)\nfor vid in store:\n    collection.add(vid)\n\n# Query similar vectors:\nprng = np.random.RandomState(4)\nquery_vector = prng.normal(size=dimension)  # Some query vector\nquery_vid = store.add(query_vector, {'type': 'query'})\nnorm = 1#np.linalg.norm(query_vid)\nclose_vids = set(collection.iter_local_buckets(query_vid,\n                                               scale=1/norm))\nprint('Possibly close vids:', close_vids)\nassert close_vids == set(range(40, 50))\n```\n\n\n## Benchmarks\n\n```bash\n$ git clone https://github.com/cduck/quantum-state-database  # Clone repo\n$ cd quantum-state-database\n$ pip install -e .[dev]  # Install dev requirements\n$ python quad/benchmark/benchmark_generate.py  # Generate test state vector data\n$ pytest quad/benchmark/  # Run all benchmarks\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cduck/quantum-state-database/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/quantum-state-database",
    "keywords": "quantum computing,databases,locality sensitive hashing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quad",
    "package_url": "https://pypi.org/project/quad/",
    "platform": "",
    "project_url": "https://pypi.org/project/quad/",
    "project_urls": {
      "Download": "https://github.com/cduck/quantum-state-database/archive/0.1.0.tar.gz",
      "Homepage": "https://github.com/cduck/quantum-state-database"
    },
    "release_url": "https://pypi.org/project/quad/0.1.0/",
    "requires_dist": [
      "numpy",
      "cirq-unstable (==0.8.0.dev20200312000748)",
      "zarr (~=2.4)",
      "numcodecs (~=0.6.4)",
      "pytest ; extra == 'dev'",
      "pytest-benchmark ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A database for storing and querying quantum state vectors.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6796767,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c2b5c28e8ddef2e24f15f3cf00f165e39e9e8b2d3f11e15f612aa36413c7ab7",
          "md5": "17a5e330fa048e14b15d64ea57238970",
          "sha256": "11bbd1991f2f410443d4f931ec27829fd86ef10f6f945eab09b9f5b2973419f6"
        },
        "downloads": -1,
        "filename": "quad-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17a5e330fa048e14b15d64ea57238970",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19392,
        "upload_time": "2020-03-12T02:33:27",
        "upload_time_iso_8601": "2020-03-12T02:33:27.993905Z",
        "url": "https://files.pythonhosted.org/packages/6c/2b/5c28e8ddef2e24f15f3cf00f165e39e9e8b2d3f11e15f612aa36413c7ab7/quad-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c2b5c28e8ddef2e24f15f3cf00f165e39e9e8b2d3f11e15f612aa36413c7ab7",
        "md5": "17a5e330fa048e14b15d64ea57238970",
        "sha256": "11bbd1991f2f410443d4f931ec27829fd86ef10f6f945eab09b9f5b2973419f6"
      },
      "downloads": -1,
      "filename": "quad-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "17a5e330fa048e14b15d64ea57238970",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19392,
      "upload_time": "2020-03-12T02:33:27",
      "upload_time_iso_8601": "2020-03-12T02:33:27.993905Z",
      "url": "https://files.pythonhosted.org/packages/6c/2b/5c28e8ddef2e24f15f3cf00f165e39e9e8b2d3f11e15f612aa36413c7ab7/quad-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}