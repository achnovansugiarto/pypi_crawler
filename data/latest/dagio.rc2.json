{
  "info": {
    "author": "Brendan Hasz",
    "author_email": "winsto99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dagio: Asynchronous I/O - with DAGs!\n\n[![Version Badge](https://img.shields.io/pypi/v/dagio)](https://pypi.org/project/dagio/)\n[![Test Status](https://github.com/brendanhasz/dagio/workflows/tests/badge.svg)](https://github.com/brendanhasz/probflow/actions?query=branch%3Amaster)\n\n\n`dagio` is an embarassingly simple Python package for running directed acyclic\ngraphs of asynchronous I/O operations.  It is built using and to be used with\nPython's built-in [`asyncio`](https://docs.python.org/3/library/asyncio.html)\nmodule, and provides a _veeeery_ thin layer of functionality on top of it.\n:sweat_smile:\n\n* Git repository: https://github.com/brendanhasz/dagio\n* Bug reports: https://github.com/brendanhasz/dagio/issues\n\n\n## Getting Started\n\nSuppose you have a set of potentially long-running I/O tasks (e.g. hit a web\nservice, query a database, read a large file from disk, etc), where some of the\ntasks depend on other tasks having finished.  That is, you've got a directed\nacyclic graph (DAG) of tasks, where non-interdependent tasks can be run\nasynchronously.\n\nFor example, if you've got a task `G` which depends on `E` and `F`, but `E`\ndepends on `D`, and `F` depends on both `C` and `D`, etc:\n\n```\nA\n|\nB   C\n \\ /|\n  D |\n / \\|\nE   F\n \\ /\n  G\n```\n\nCoding that up using raw `asyncio` might look something like this:\n\n```python\nimport asyncio\n\n\nclass MyDag:\n\n    async def task_a(self):\n        # does task a stuff...\n\n    async def task_b(self):\n        # does task b stuff...\n\n    async def task_c(self):\n        # does task c stuff...\n\n    async def task_d(self):\n        # does task d stuff...\n\n    async def task_e(self):\n        # does task e stuff...\n\n    async def task_f(self):\n        # does task f stuff...\n\n    async def task_g(self):\n        # does task g stuff...\n\n\nasync def run():\n\n    obj = MyDag() \n\n    task_a = asyncio.create_task(obj.task_a())\n    task_c = asyncio.create_task(obj.task_c())\n\n    await task_a\n\n    await obj.task_b()\n\n    await task_c\n\n    await obj.task_d()\n\n    task_e = asyncio.create_task(obj.task_e())\n    task_f = asyncio.create_task(obj.task_f())\n\n    await task_e\n    await task_f\n\n    await obj.task_g()\n\n\nasyncio.run(run())\n```\n\nWhich is... _fine_, I guess :roll_eyes:  But, you have to be careful about what\ntask you start before what other task, and which tasks can safely be run\nasynchronously vs those which can't. And then you have to type out all that\nlogic and ordering manually!  With the confusing `asyncio` API!  So: a lot of\nthought has to go into it, especially for complex DAGs.\n\nAnd thinking is hard!  Less thinking! :fist:\n\nWith `dagio`, you just use the `depends` decorator to specify what methods any\nother given method depends on, and it'll figure everything out for you, and run\nthem in the correct order, asynchronously where possible:\n\n```python\nimport asyncio\nfrom dagio import depends\n\n\nclass MyDag:\n\n    async def task_a(self):\n        # does task a stuff...\n\n    @depends(\"task_a\")\n    async def task_b(self):\n        # does task b stuff...\n\n    async def task_c(self):\n        # does task c stuff...\n\n    @depends(\"task_b\", \"task_c\")\n    async def task_d(self):\n        # does task d stuff...\n\n    @depends(\"task_d\")\n    async def task_e(self):\n        # does task e stuff...\n\n    @depends(\"task_c\", \"task_d\")\n    async def task_f(self):\n        # does task f stuff...\n\n    @depends(\"task_e\", \"task_f\")\n    async def task_g(self):\n        # does task g stuff...\n\n\nasync def run():\n    obj = MyDag() \n    await obj.task_g()\n\n\nasyncio.run(run())\n```\n\nNote that:\n\n1) Each task in your DAG has to be a method of the same class\n2) Task methods must be `async` methods\n3) Calling a task method decorated with `depends` runs that task _and all its dependencies_\n4) Task methods should not take arguments nor return values.  You can handle\n   inter-task communication using object attributes (e.g. `self._task_a_output = ...`).\n   If you need a lock, you can set up an [`asyncio.Lock`](https://docs.python.org/3/library/asyncio-sync.html#lock)\n   in your class's `__init__`.\n\nYou can also run a non-async method asynchronously in a thread pool using the `run_async` decorator:\n\n```python\nimport asyncio\nfrom dagio import depends, run_async\n\n\nclass MyDag:\n\n    @run_async\n    def task_a(self):\n        # a sync method which does task a stuff...\n\n    @run_async\n    def task_b(self):\n        # a sync method which does task b stuff...\n\n    @depends(\"task_a\", \"task_b\")\n    async def task_c(self):\n        # does task c stuff...\n\n\nasync def run():\n    obj = MyDag() \n    await obj.task_c()  #runs a and b concurrently, then c\n```\n\nThat's it.  That's all this package does.\n\n\n## Installation\n\n```\npip install dagio\n```\n\n\n## Support\n\nPost bug reports, feature requests, and tutorial requests in [GitHub\nissues](https://github.com/brendanhasz/dagio).\n\n\n## Contributing\n\n[Pull requests](https://github.com/brendanhasz/dagio/pulls) are totally\nwelcome! Any contribution would be appreciated, from things as minor as fixing\ntypos to things as major as adding new functionality. :smile:\n\n\n## Why the name, dagio?\n\nIt's for making DAGs of IO operations. DAG IO. Technically it's _asynchronous_\nDAG-based I/O, and the name `adagio` would have been siiiick, but it was\n[already taken](https://pypi.org/project/adagio/)! :sob:\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brendanhasz/dagio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dagio",
    "package_url": "https://pypi.org/project/dagio/",
    "platform": "",
    "project_url": "https://pypi.org/project/dagio/",
    "project_urls": {
      "Homepage": "https://github.com/brendanhasz/dagio"
    },
    "release_url": "https://pypi.org/project/dagio/0.0.2/",
    "requires_dist": [
      "autoflake (>=1.4) ; extra == 'dev'",
      "black (>=19.10b0) ; extra == 'dev'",
      "bumpversion ; extra == 'dev'",
      "flake8 (>=3.8.3) ; extra == 'dev'",
      "isort (>=5.1.2) ; extra == 'dev'",
      "pytest (>=6.0.0rc1) ; extra == 'dev'",
      "pytest-asyncio (>=0.15.1) ; extra == 'dev'",
      "pytest-cov (>=2.7.1) ; extra == 'dev'",
      "setuptools (>=49.1.0) ; extra == 'dev'",
      "twine (>=3.2.0) ; extra == 'dev'",
      "wheel (>=0.34.2) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A python package for running directed acyclic graphs of asynchronous I/O operations",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11758004,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c6df578c11c714de37fea0b8fe4c7e18671abe0f894ada1f263dbd72a3c9de1",
          "md5": "3f499aaca12885eda3197e2d6b4a399c",
          "sha256": "728d3999a99fcd593429d1e98dba97e7c990a41204a6b9843a811d8c18131abb"
        },
        "downloads": -1,
        "filename": "dagio-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f499aaca12885eda3197e2d6b4a399c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4700,
        "upload_time": "2021-08-13T01:20:35",
        "upload_time_iso_8601": "2021-08-13T01:20:35.028267Z",
        "url": "https://files.pythonhosted.org/packages/9c/6d/f578c11c714de37fea0b8fe4c7e18671abe0f894ada1f263dbd72a3c9de1/dagio-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c18ea0f74f4a5dce4f3d0b0938f4b1dde187c61b8c19f524d390c2dd587e1a89",
          "md5": "b9af6a514a46895906b10b4eda806cab",
          "sha256": "3826fb865eda61a7a6a1344f0d54e8372c1ce3734a7f8415ef5c3dfe8110a9e2"
        },
        "downloads": -1,
        "filename": "dagio-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9af6a514a46895906b10b4eda806cab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5544,
        "upload_time": "2021-08-13T01:20:37",
        "upload_time_iso_8601": "2021-08-13T01:20:37.000151Z",
        "url": "https://files.pythonhosted.org/packages/c1/8e/a0f74f4a5dce4f3d0b0938f4b1dde187c61b8c19f524d390c2dd587e1a89/dagio-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08b514a2953f9559f3b3fb82f614ee5d686a89387bf5fcb7dba5c57c0db61067",
          "md5": "965392bbe305edcb4fa03d20d2b0d331",
          "sha256": "a8e5226d44b7e099eb5d3485f8462e63b0d5ba2eafe6cc221de739dfe0216ce5"
        },
        "downloads": -1,
        "filename": "dagio-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "965392bbe305edcb4fa03d20d2b0d331",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5215,
        "upload_time": "2021-10-18T14:04:08",
        "upload_time_iso_8601": "2021-10-18T14:04:08.804884Z",
        "url": "https://files.pythonhosted.org/packages/08/b5/14a2953f9559f3b3fb82f614ee5d686a89387bf5fcb7dba5c57c0db61067/dagio-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4977506d18203ea0c2e1dc553e44e777f0d55481c6a5d7a1c54d22d88a743ccd",
          "md5": "e19c408eebf93a2085b9c53ba597a61e",
          "sha256": "f01076dcf478c5d7523a9a48f5cb4b54b97270d12434ba99562a4d4df84ddde4"
        },
        "downloads": -1,
        "filename": "dagio-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e19c408eebf93a2085b9c53ba597a61e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5757,
        "upload_time": "2021-10-18T14:04:11",
        "upload_time_iso_8601": "2021-10-18T14:04:11.109238Z",
        "url": "https://files.pythonhosted.org/packages/49/77/506d18203ea0c2e1dc553e44e777f0d55481c6a5d7a1c54d22d88a743ccd/dagio-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08b514a2953f9559f3b3fb82f614ee5d686a89387bf5fcb7dba5c57c0db61067",
        "md5": "965392bbe305edcb4fa03d20d2b0d331",
        "sha256": "a8e5226d44b7e099eb5d3485f8462e63b0d5ba2eafe6cc221de739dfe0216ce5"
      },
      "downloads": -1,
      "filename": "dagio-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "965392bbe305edcb4fa03d20d2b0d331",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5215,
      "upload_time": "2021-10-18T14:04:08",
      "upload_time_iso_8601": "2021-10-18T14:04:08.804884Z",
      "url": "https://files.pythonhosted.org/packages/08/b5/14a2953f9559f3b3fb82f614ee5d686a89387bf5fcb7dba5c57c0db61067/dagio-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4977506d18203ea0c2e1dc553e44e777f0d55481c6a5d7a1c54d22d88a743ccd",
        "md5": "e19c408eebf93a2085b9c53ba597a61e",
        "sha256": "f01076dcf478c5d7523a9a48f5cb4b54b97270d12434ba99562a4d4df84ddde4"
      },
      "downloads": -1,
      "filename": "dagio-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e19c408eebf93a2085b9c53ba597a61e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5757,
      "upload_time": "2021-10-18T14:04:11",
      "upload_time_iso_8601": "2021-10-18T14:04:11.109238Z",
      "url": "https://files.pythonhosted.org/packages/49/77/506d18203ea0c2e1dc553e44e777f0d55481c6a5d7a1c54d22d88a743ccd/dagio-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}