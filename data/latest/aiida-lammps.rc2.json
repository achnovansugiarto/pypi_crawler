{
  "info": {
    "author": "Abel Carreras, Chris Sewell",
    "author_email": "abelcarreras83@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![CI Status](https://github.com/aiidaplugins/aiida-lammps/workflows/CI/badge.svg)](https://github.com/aiidaplugins/aiida-lammps)\n[![Coverage Status](https://codecov.io/gh/aiidaplugins/aiida-lammps/branch/master/graph/badge.svg)](https://codecov.io/gh/aiidaplugins/aiida-lammps)\n[![PyPI](https://img.shields.io/pypi/v/aiida-lammps.svg)](https://pypi.python.org/pypi/aiida-lammps/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n# AiiDA LAMMPS plugin\n\nThis a LAMMPS plugin for [AiiDA](http://aiida-core.readthedocs.io/).\nThis plugin contains 4 code types:\n\n- `lammps.forces`: Atomic single-point forces calculation\n- `lammps.optimize`: Crystal structure optimization\n- `lammps.md`: Molecular dynamics calculation\n- `lammps.combinate`: DynaPhoPy calculation using LAMMPS MD trajectory (currently untested)\n\nNote: `lammps.combinate` requires `aiida-phonopy` (https://github.com/abelcarreras/aiida-phonopy)\nplugin to work, DynaPhoPy can be found in: https://github.com/abelcarreras/aiida-phonopy\n\n- [AiiDA LAMMPS plugin](#aiida-lammps-plugin)\n  - [Installation](#installation)\n  - [Built-in Potential Support](#built-in-potential-support)\n  - [Examples](#examples)\n    - [Code Setup](#code-setup)\n    - [Structure Setup](#structure-setup)\n    - [Potential Setup](#potential-setup)\n    - [Force Calculation](#force-calculation)\n    - [Optimisation Calculation](#optimisation-calculation)\n    - [MD Calculation](#md-calculation)\n  - [Development](#development)\n    - [Coding Style Requirements](#coding-style-requirements)\n    - [Testing](#testing)\n\n## Installation\n\nTo install from pypi:\n\n```shell\npip install aiida-lammps\n```\n\n## Built-in Potential Support\n\n- EAM\n- Lennad Jones\n- Tersoff\n- ReaxFF\n\n## Examples\n\nMore example calculations are found in the folder **/examples**,\nand there are many test examples in **/aiida_lammps/tests/test_calculations**.\n\n### Code Setup\n\n```python\nfrom aiida_lammps.tests.utils import (\n    get_or_create_local_computer, get_or_create_code)\nfrom aiida_lammps.tests.utils import lammps_version\n\ncomputer_local = get_or_create_local_computer('work_directory', 'localhost')\ncode_lammps_force = get_or_create_code('lammps.force', computer_local, 'lammps')\ncode_lammps_opt = get_or_create_code('lammps.optimize', computer_local, 'lammps')\ncode_lammps_md = get_or_create_code('lammps.md', computer_local, 'lammps')\n\nmeta_options = {\n    \"resources\": {\n        \"num_machines\": 1,\n        \"num_mpiprocs_per_machine\": 1}\n}\n```\n\n### Structure Setup\n\n```python\nfrom aiida.plugins import DataFactory\nimport numpy as np\n\ncell = [[3.1900000572, 0, 0],\n        [-1.5950000286, 2.762621076, 0],\n        [0.0, 0, 5.1890001297]]\n\npositions = [(0.6666669, 0.3333334, 0.0000000),\n             (0.3333331, 0.6666663, 0.5000000),\n             (0.6666669, 0.3333334, 0.3750000),\n             (0.3333331, 0.6666663, 0.8750000)]\n\nsymbols = names = ['Ga', 'Ga', 'N', 'N']\n\nstructure = DataFactory('structure')(cell=cell)\nfor position, symbol, name in zip(positions, symbols, names):\n    position = np.dot(position, cell).tolist()\n    structure.append_atom(\n        position=position, symbols=symbol, name=name)\n\nstructure\n```\n\n```console\n<StructureData: uuid: 96f9c02b-77c7-4889-9de2-dbda27bb03fa (unstored)>\n```\n\n### Potential Setup\n\n```python\npair_style = 'tersoff'\npotential_dict = {\n    'Ga Ga Ga': '1.0 0.007874 1.846 1.918000 0.75000 -0.301300 1.0 1.0 1.44970 410.132 2.87 0.15 1.60916 535.199',\n    'N  N  N': '1.0 0.766120 0.000 0.178493 0.20172 -0.045238 1.0 1.0 2.38426 423.769 2.20 0.20 3.55779 1044.77',\n    'Ga Ga N': '1.0 0.001632 0.000 65.20700 2.82100 -0.518000 1.0 0.0 0.00000 0.00000 2.90 0.20 0.00000 0.00000',\n    'Ga N  N': '1.0 0.001632 0.000 65.20700 2.82100 -0.518000 1.0 1.0 2.63906 3864.27 2.90 0.20 2.93516 6136.44',\n    'N  Ga Ga': '1.0 0.001632 0.000 65.20700 2.82100 -0.518000 1.0 1.0 2.63906 3864.27 2.90 0.20 2.93516 6136.44',\n    'N  Ga N ': '1.0 0.766120 0.000 0.178493 0.20172 -0.045238 1.0 0.0 0.00000 0.00000 2.20 0.20 0.00000 0.00000',\n    'N  N  Ga': '1.0 0.001632 0.000 65.20700 2.82100 -0.518000 1.0 0.0 0.00000 0.00000 2.90 0.20 0.00000 0.00000',\n    'Ga N  Ga': '1.0 0.007874 1.846 1.918000 0.75000 -0.301300 1.0 0.0 0.00000 0.00000 2.87 0.15 0.00000 0.00000'}\npotential = DataFactory(\"lammps.potential\")(\n    structure=structure, type=pair_style, data=potential_dict\n)\npotential.attributes\n```\n\n```python\n{'kind_elements': ['Ga', 'N'],\n 'potential_type': 'tersoff',\n 'atom_style': 'atomic',\n 'default_units': 'metal',\n 'potential_md5': 'b3b7d45ae7b92eba05ed99ffe69810d0',\n 'input_lines_md5': '3145644a408a6d464e80866b833115a2'}\n```\n\n### Force Calculation\n\n```python\nfrom aiida.engine import run_get_node\nparameters = DataFactory('dict')(dict={\n    'lammps_version': lammps_version(),\n    'output_variables': [\"temp\", \"etotal\", \"pe\", \"ke\"],\n    'thermo_keywords': []\n})\nbuilder = code_lammps_force.get_builder()\nbuilder.metadata.options = meta_options\nbuilder.structure = structure\nbuilder.potential = potential\nbuilder.parameters = parameters\nresult, calc_node = run_get_node(builder)\n```\n\n```console\n$ verdi process list -D desc -a -l 1\n  PK  Created    Process label     Process State    Process status\n----  ---------  ----------------  ---------------  ----------------\n2480  32s ago    ForceCalculation  Finished [0]\n\nTotal results: 1\n\nInfo: last time an entry changed state: 28s ago (at 02:02:36 on 2019-06-21)\n\n$ verdi process show 2480\nProperty       Value\n-------------  ------------------------------------\ntype           CalcJobNode\npk             2480\nuuid           c754f044-b190-4505-b121-776b79d2d1c8\nlabel\ndescription\nctime          2019-06-21 02:02:32.894858+00:00\nmtime          2019-06-21 02:02:33.297377+00:00\nprocess state  Finished\nexit status    0\ncomputer       [2] localhost\n\nInputs        PK  Type\n----------  ----  ------------------\ncode        1351  Code\nparameters  2479  Dict\npotential   2478  EmpiricalPotential\nstructure   2477  StructureData\n\nOutputs          PK  Type\n-------------  ----  ----------\narrays         2483  ArrayData\nremote_folder  2481  RemoteData\nresults        2484  Dict\nretrieved      2482  FolderData\n```\n\n```python\ncalc_node.outputs.results.attributes\n```\n\n```python\n{'parser_version': '0.4.0b3',\n 'parser_class': 'ForceParser',\n 'errors': [],\n 'warnings': '',\n 'distance_units': 'Angstroms',\n 'force_units': 'eV/Angstrom',\n 'energy_units': 'eV',\n 'energy': -18.1098859130104,\n 'final_variables': {'ke': 0.0,\n  'pe': -18.1098859130104,\n  'etotal': -18.1098859130104,\n  'temp': 0.0},\n 'units_style': 'metal'}\n```\n\n```python\ncalc_node.outputs.arrays.attributes\n```\n\n```python\n{'array|forces': [1, 4, 3]}\n```\n\n### Optimisation Calculation\n\n```python\nfrom aiida.engine import run_get_node\nparameters = DataFactory('dict')(dict={\n    'lammps_version': lammps_version(),\n    'output_variables': [\"temp\", \"etotal\", \"pe\", \"ke\"],\n    'thermo_keywords': [],\n    'units': 'metal',\n    'relax': {\n        'type': 'iso',\n        'pressure': 0.0,\n        'vmax': 0.001,\n    },\n    \"minimize\": {\n        'style': 'cg',\n        'energy_tolerance': 1.0e-25,\n        'force_tolerance': 1.0e-25,\n        'max_evaluations': 100000,\n        'max_iterations': 50000}\n})\nbuilder = code_lammps_opt.get_builder()\nbuilder.metadata.options = meta_options\nbuilder.structure = structure\nbuilder.potential = potential\nbuilder.parameters = parameters\nresult, calc_node = run_get_node(builder)\n```\n\n```console\n$ verdi process list -D desc -a -l 1\n  PK  Created    Process label        Process State    Process status\n----  ---------  -------------------  ---------------  ----------------\n2486  1m ago     OptimizeCalculation  ‚èπ Finished [0]\n\nTotal results: 1\n\nInfo: last time an entry changed state: 1m ago (at 02:09:54 on 2019-06-21)\n\n$ verdi process show 2486\nProperty       Value\n-------------  ------------------------------------\ntype           CalcJobNode\npk             2486\nuuid           5c64433d-6337-4352-a0a8-0acb4083a0c3\nlabel\ndescription\nctime          2019-06-21 02:09:50.872336+00:00\nmtime          2019-06-21 02:09:51.128639+00:00\nprocess state  Finished\nexit status    0\ncomputer       [2] localhost\n\nInputs        PK  Type\n----------  ----  ------------------\ncode        1344  Code\nparameters  2485  Dict\npotential   2478  EmpiricalPotential\nstructure   2477  StructureData\n\nOutputs          PK  Type\n-------------  ----  -------------\narrays         2490  ArrayData\nremote_folder  2487  RemoteData\nresults        2491  Dict\nretrieved      2488  FolderData\nstructure      2489  StructureData\n```\n\n```python\ncalc_node.outputs.results.attributes\n```\n\n```python\n{'parser_version': '0.4.0b3',\n 'parser_class': 'OptimizeParser',\n 'errors': [],\n 'warnings': '',\n 'stress_units': 'bars',\n 'distance_units': 'Angstroms',\n 'force_units': 'eV/Angstrom',\n 'energy_units': 'eV',\n 'energy': -18.1108516231423,\n 'final_variables': {'ke': 0.0,\n  'pe': -18.1108516231423,\n  'etotal': -18.1108516231423,\n  'temp': 0.0},\n 'units_style': 'metal'}\n```\n\n```python\ncalc_node.outputs.arrays.attributes\n```\n\n```python\n{'array|positions': [56, 4, 3],\n 'array|stress': [3, 3],\n 'array|forces': [56, 4, 3]}\n```\n\n### MD Calculation\n\n```python\nfrom aiida.engine import submit\nparameters = DataFactory('dict')(dict={\n    'lammps_version': lammps_version(),\n    'output_variables': [\"temp\", \"etotal\", \"pe\", \"ke\"],\n    'thermo_keywords': [],\n    'units': 'metal',\n    'timestep': 0.001,\n    'integration': {\n        'style': 'nvt',\n        'constraints': {\n            'temp': [300, 300, 0.5]\n        }\n    },\n    \"neighbor\": [0.3, \"bin\"],\n    \"neigh_modify\": {\"every\": 1, \"delay\": 0, \"check\": False},\n    'equilibrium_steps': 100,\n    'total_steps': 1000,\n    'dump_rate': 10,\n    'restart': 100\n})\nbuilder = code_lammps_md.get_builder()\nbuilder.metadata.options = meta_options\nbuilder.structure = structure\nbuilder.potential = potential\nbuilder.parameters = parameters\nresult, calc_node = run_get_node(builder)\n```\n\n```console\n$ verdi process list -D desc -a -l 1\n  PK  Created    Process label    Process State    Process status\n----  ---------  ---------------  ---------------  ----------------\n2493  12s ago    MdCalculation    ‚èπ Finished [0]\n\nTotal results: 1\n\nInfo: last time an entry changed state: 4s ago (at 02:15:02 on 2019-06-21)\n\n$ verdi process show 2493\nProperty       Value\n-------------  ------------------------------------\ntype           CalcJobNode\npk             2493\nuuid           351b4721-10ff-406c-8f1c-951317091524\nlabel\ndescription\nctime          2019-06-21 02:14:54.986384+00:00\nmtime          2019-06-21 02:14:55.282272+00:00\nprocess state  Finished\nexit status    0\ncomputer       [2] localhost\n\nInputs        PK  Type\n----------  ----  ------------------\ncode        1540  Code\nparameters  2492  Dict\npotential   2478  EmpiricalPotential\nstructure   2477  StructureData\n\nOutputs            PK  Type\n---------------  ----  --------------\nremote_folder    2494  RemoteData\nresults          2496  Dict\nretrieved        2495  FolderData\nsystem_data      2498  ArrayData\ntrajectory_data  2497  TrajectoryData\n```\n\n```python\ncalc_node.outputs.results.attributes\n```\n\n```python\n{'parser_version': '0.4.0b3',\n 'parser_class': 'MdParser',\n 'errors': [],\n 'warnings': '',\n 'time_units': 'picoseconds',\n 'distance_units': 'Angstroms',\n 'energy': -17.8464193488116,\n 'units_style': 'metal'}\n```\n\n```python\ncalc_node.outputs.system_data.attributes\n```\n\n```python\n{'units_style': 'metal',\n 'array|step': [100],\n 'array|ke': [100],\n 'array|pe': [100],\n 'array|etotal': [100],\n 'array|temp': [100]}\n```\n\n```python\ncalc_node.outputs.trajectory_data.attributes\n```\n\n```python\n{'array|times': [101],\n 'array|cells': [101, 3, 3],\n 'array|steps': [101],\n 'array|positions': [101, 4, 3],\n 'symbols': ['Ga', 'Ga', 'N', 'N']}\n```\n\n## Development\n\n### Coding Style Requirements\n\nThe code is formatted and linted using [pre-commit](https://pre-commit.com/), which runs in an isolated, virtual environment:\n\n```shell\n>> pip install pre-commit\n>> pre-commit run --all\n```\n\nor to automate runs, triggered before each commit:\n\n```shell\n>> pre-commit install\n```\n\n### Testing\n\nthe test suite can be run in an isolated, virtual environment using `tox` (see `tox.ini` in the repo):\n\n```shell\n>> pip install tox\n>> tox -e py37\n```\n\nor directly:\n\n```shell\n>> pip install -e .[testing]\n>> reentry scan -r aiida\n>> pytest -v\n```\n\nThe tests require that both PostgreSQL and RabbitMQ are running.\nIf you wish to run an isolated RabbitMQ instance, see the `docker-compose.yml` file in the repo.\n\nSome tests require that a `lammps` executable be present.\n\nThe easiest way to achieve this is to use Conda:\n\n```shell\n>> conda install lammps==2019.06.05\n# this will install lmp_serial and lmp_mpi\n```\n\nYou can specify a different executable name for LAMMPS with:\n\n```shell\n>> tox -e py37 -- --lammps-exec lmp_exec\n```\n\nTo output the results of calcjob executions to a specific directory:\n\n```shell\n>> pytest --lammps-workdir \"test_workdir\"\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aiidaplugins/aiida-lammps",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiida-lammps",
    "package_url": "https://pypi.org/project/aiida-lammps/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiida-lammps/",
    "project_urls": {
      "Homepage": "https://github.com/aiidaplugins/aiida-lammps"
    },
    "release_url": "https://pypi.org/project/aiida-lammps/0.8.0/",
    "requires_dist": [
      "aiida-core (<2.0.0,>=1.4.0)",
      "ase (<4.0.0,>=3.12.0)",
      "importlib-resources",
      "jsonschema",
      "numpy",
      "packaging",
      "python-dateutil",
      "pre-commit (~=2.6) ; extra == 'code_style'",
      "dynaphopy ; extra == 'phonopy'",
      "attrs (>=17.4.0) ; extra == 'testing'",
      "pgtest ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "coverage ; extra == 'testing'",
      "pytest-timeout ; extra == 'testing'",
      "pytest-regressions ; extra == 'testing'"
    ],
    "requires_python": ">=3.6",
    "summary": "AiiDA plugin for LAMMPS",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8299138,
  "releases": {
    "0.4.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ddd37c193427b335537d3f4d573502ea2ae8c29ea78991ada9cef984eae7e79",
          "md5": "883207b7b662a06f2ee5123f7ac45e08",
          "sha256": "4f29bc9e190a4fbee1a8d16748f81c3fc763afbe477645a0bd930f79c7083d7a"
        },
        "downloads": -1,
        "filename": "aiida_lammps-0.4.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "883207b7b662a06f2ee5123f7ac45e08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 265968,
        "upload_time": "2019-06-21T13:18:29",
        "upload_time_iso_8601": "2019-06-21T13:18:29.058125Z",
        "url": "https://files.pythonhosted.org/packages/7d/dd/37c193427b335537d3f4d573502ea2ae8c29ea78991ada9cef984eae7e79/aiida_lammps-0.4.0b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e6b486dc10c36dcae9106265c0aaf8751de3a4a66d693276deb72333062178",
          "md5": "e32e1783cfdd0f674a7e685c2f945dd0",
          "sha256": "28d8b56cf1914e50a84a3b9a7cb83f908ac046f270d8b95dcb9a28bd43d9b79e"
        },
        "downloads": -1,
        "filename": "aiida-lammps-0.4.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "e32e1783cfdd0f674a7e685c2f945dd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 248104,
        "upload_time": "2019-06-21T13:18:33",
        "upload_time_iso_8601": "2019-06-21T13:18:33.701928Z",
        "url": "https://files.pythonhosted.org/packages/95/e6/b486dc10c36dcae9106265c0aaf8751de3a4a66d693276deb72333062178/aiida-lammps-0.4.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6edd08bd3d8939b3add9530d8a6fb89b5275aa63303ff88a6318b6e8e91a6008",
          "md5": "3b43842a0fd7aee8fb546e5695f34b77",
          "sha256": "8ed58c2b5ce46eed1809c641d6b7ae6c371b013ad7b00fae780c3af6764b3feb"
        },
        "downloads": -1,
        "filename": "aiida_lammps-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b43842a0fd7aee8fb546e5695f34b77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 294963,
        "upload_time": "2020-09-29T16:48:17",
        "upload_time_iso_8601": "2020-09-29T16:48:17.656215Z",
        "url": "https://files.pythonhosted.org/packages/6e/dd/08bd3d8939b3add9530d8a6fb89b5275aa63303ff88a6318b6e8e91a6008/aiida_lammps-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9d6584ccfb29085a07b6ba2b58cedd030932358bd2f80de00a250cd6e16c62",
          "md5": "5cdd1ef160957d7767fe08c4aad983ef",
          "sha256": "3ae7e0a4da23dd35d9accde6dfec04faeb5e48f84f78a25a9d5cbabec4cd41c6"
        },
        "downloads": -1,
        "filename": "aiida-lammps-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5cdd1ef160957d7767fe08c4aad983ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 274852,
        "upload_time": "2020-09-29T16:48:19",
        "upload_time_iso_8601": "2020-09-29T16:48:19.166786Z",
        "url": "https://files.pythonhosted.org/packages/de/9d/6584ccfb29085a07b6ba2b58cedd030932358bd2f80de00a250cd6e16c62/aiida-lammps-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6edd08bd3d8939b3add9530d8a6fb89b5275aa63303ff88a6318b6e8e91a6008",
        "md5": "3b43842a0fd7aee8fb546e5695f34b77",
        "sha256": "8ed58c2b5ce46eed1809c641d6b7ae6c371b013ad7b00fae780c3af6764b3feb"
      },
      "downloads": -1,
      "filename": "aiida_lammps-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b43842a0fd7aee8fb546e5695f34b77",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 294963,
      "upload_time": "2020-09-29T16:48:17",
      "upload_time_iso_8601": "2020-09-29T16:48:17.656215Z",
      "url": "https://files.pythonhosted.org/packages/6e/dd/08bd3d8939b3add9530d8a6fb89b5275aa63303ff88a6318b6e8e91a6008/aiida_lammps-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de9d6584ccfb29085a07b6ba2b58cedd030932358bd2f80de00a250cd6e16c62",
        "md5": "5cdd1ef160957d7767fe08c4aad983ef",
        "sha256": "3ae7e0a4da23dd35d9accde6dfec04faeb5e48f84f78a25a9d5cbabec4cd41c6"
      },
      "downloads": -1,
      "filename": "aiida-lammps-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5cdd1ef160957d7767fe08c4aad983ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 274852,
      "upload_time": "2020-09-29T16:48:19",
      "upload_time_iso_8601": "2020-09-29T16:48:19.166786Z",
      "url": "https://files.pythonhosted.org/packages/de/9d/6584ccfb29085a07b6ba2b58cedd030932358bd2f80de00a250cd6e16c62/aiida-lammps-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}