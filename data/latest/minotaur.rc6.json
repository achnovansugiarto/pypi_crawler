{
  "info": {
    "author": "Gianni Tedesco",
    "author_email": "gianni@scaramanga.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Minotaur: A pythonic, asynchronous, inotify interface\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/pypi/v/minotaur?label=pypi\" alt=\"PyPI version\">\n</div>\n\n\n## Examples\n\nMinotaur provides the `Inotify` class which is to be used as a context\nmanager, from within which, one may iterate over inotify events:\n\n```python\n    with Inotify() as n:\n        n.add_watch('.', Mask.CREATE | Mask.DELETE | Mask.MOVE)\n        for evt in n:\n            print(evt)\n```\n\nThe asynchronous interface works almost identically. The inotify object must\nbe created in nonblocking mode, and then the mere addition of the `async`\nkeyword to the iteration over events is all that's required:\n\n```python\n    with Inotify(blocking=False) as n:\n        n.add_watch('.', Mask.CREATE | Mask.DELETE | Mask.MOVE)\n        async for evt in n:\n            print(evt)\n```\n\nExample output would look like this:\n\n```python\nEvent(wd=1, mask=<Mask.CREATE: 256>, cookie=0, name=PosixPath('foo'))\nEvent(wd=1, mask=<Mask.CREATE: 256>, cookie=0, name=PosixPath('bar'))\nEvent(wd=1, mask=<Mask.MOVED_FROM: 64>, cookie=129399, name=PosixPath('foo'))\nEvent(wd=1, mask=<Mask.MOVED_TO: 128>, cookie=129399, name=PosixPath('baz'))\nEvent(wd=1, mask=<Mask.DELETE: 512>, cookie=0, name=PosixPath('bar'))\nEvent(wd=1, mask=<Mask.DELETE: 512>, cookie=0, name=PosixPath('baz'))\n\n```\n\nThere is also a command-line tool demonstrating the features\n```bash\n$ python -m minotaur --help\n\nusage: minotaur [-h] [--async | --sync] [--fancy] [--mask MASK] dir [dir ...]\n\nMinotaur: A pythonic, asynchronous, inotify interface.\n\nA summary of inotify watch flags:\n - ACCESS: File was accessed\n - ATTRIB: Metaata changed, eg. permissions\n - CLOSE_WRITE: File for writing was closed\n - CLOSE_NOWRITE: File or dir not opened for writing was closed\n - CREATE: File/dir was created\n - DELETE: File or dir was deleted\n - DELETE_SELF: Watched file/dir was itself deleted\n - MODIFY: File was modified\n - MOVE_SELF: Watched file/dir was itself moved\n - MOVED_FROM: Generated for dir containing old filename when a file is renamed\n - MOVED_TO: Generated for dir containing new filename when a file is renamed\n - OPEN: File or dir was opened\n - MOVE: MOVED_FROM | MOVED_TO\n - CLOSE: IN_CLOSE_WRITE | IN_CLOSE_NOWRITE\n - DONT_FOLLOW: Don't dereference pathname if it is a symbolic link\n - EXCL_UNLINK: Don't generate events after files have been unlinked\n - ONESHOT: Only generate one event for this watch\n - ONLYDIR: Watch pathname only if it is a dir\n - MASK_CREATE: Only watch path if it isn't already being watched\n\npositional arguments:\n  dir                   Watch for events in given dir\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --async, -a           Use asyncio event loop\n  --sync, -s            Use synchronous interface\n  --fancy, -f           Use fancy interface\n  --mask MASK, -m MASK  Events to watch for\n\n```\n\n## What is different about Minotaur?\n\n1. C interface provides basic wrapper to syscalls and constants. In future, if\n   performance becomes a problem, more functionality can be gradually moved\n   there.\n\n2. Pythonic. `IntFlags` is used for watch types. Context-managers take care of\n   fd lifetime, `close()` method is idempotent. Raw `read()` and `readall()`\n   methods work comparably to python standard `io` objects. Full support for\n   `mypy`, including typeshed for C interface. Iterator and async-iterator\n   protocols supported.\n\n3. Makes no assumptions about the name encoding of filesystems, ie. with\n   `os.fsencode()` and `os.fsdecode()`\n\n4. Async interface supports multiple concurrent waiters. Waiting tasks are\n   woken in a first-come, first-serve manner.\n\n5. Users can choose between different levels of support:\n   1. Raw syscall interface\n   2. Low-level inotify object, which takes care of path encoding, reading of\n\traw inotify data, parsing of binary events in to python objects, and\n\tprovides both synchronous and async interface. But is still low-level\n\tbecause it does no special handling of watches or combining of related\n\tevents (eg.`MOVE_FROM` / `MOVE_TO`).\n   3. Fancy high-level interfaces, in pure python, built on top of low-level\n        interface.\n\n## What is missing\n\nThere is no attempt to abstract file-notification functionality offered by\nother operating systems in to a cross-platform interface.\n\nThere are no tests.\n\n## Development\nYou should use the provided pre-commit hooks to make sure code type-checks and\nis PEP-8 formatted:\n\n```bash\nln -sf ../../pre-commit.sh .git/hooks/pre-commit\n```\n\n## Why another one?\n\nThere are several other python inotify packages. So why does this one exist?\nWell, this can perhaps be explained best by referring to some of the others:\n\n1. `PyInotify`: suffers from numerous bugs. The fd closes aren't idempotent,\n   this can lead to closing unrelated file descriptors. This would be less of\n   an issue if the fd had a clear ownership and lifetime, or used context\n   managers. In other words, it's difficult to use safely.\n\n2. `PyInotify`: Assumes utf-8 filesystem encoding. No `asyncio` interface.\n\n3. `inotify_simple`: Nicely subclasses `FileIO`, but that precludes `asyncio`\n   since `FileIO` is meant for blocking I/O on files and cannot be easily\n   adapted for other purposes.\n\n4. `python_inotify`: No `asyncio` interface and, it would need to be added in\n   the C code, or if added in python code would duplicate the C code and work\n   differently, thus being a new API.\n\n5. `python-inotify`: It's packaged by RedHat but, similarly to\n   `python_inotify` the read() syscall is done in the C extension so it\n   doesn't support `asyncio`, and can't easily be adapted to do so without\n   changing the interface or duplicating functionality.\n\n6. `asyncinotify`: Easily the best of the bunch. The main downside is that it\n   doesn't provide a synchronous interface or low-level interfaces.\n\nThe others seem to be parts of larger projects, or systems.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/giannitedesco/minotaur",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minotaur",
    "package_url": "https://pypi.org/project/minotaur/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/minotaur/",
    "project_urls": {
      "Homepage": "https://github.com/giannitedesco/minotaur"
    },
    "release_url": "https://pypi.org/project/minotaur/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pythonic, asynchronous, inotify interface.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15745302,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39b2cd76816d925a7c587e55153c8ee911fe14d55a698944b5d660e87efbfd5a",
          "md5": "fd6fcf2fd0aaebdb6fbfeb2fdf75e6ac",
          "sha256": "92d8a176e0d54eae627a05b1aa330f5d33d32420352a68762d19dd24ba9b6213"
        },
        "downloads": -1,
        "filename": "minotaur-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fd6fcf2fd0aaebdb6fbfeb2fdf75e6ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12602,
        "upload_time": "2020-08-24T14:31:29",
        "upload_time_iso_8601": "2020-08-24T14:31:29.055521Z",
        "url": "https://files.pythonhosted.org/packages/39/b2/cd76816d925a7c587e55153c8ee911fe14d55a698944b5d660e87efbfd5a/minotaur-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "232dd258176dc7cdf07c964752325a701f070fbb489eeecf8d608ac452c704ca",
          "md5": "6d93ab2e3eaa31d300f555ecf97c6b91",
          "sha256": "00fd20a7276060c01b41b1788505fea5c6b3e381475d4b4783c504f173f23745"
        },
        "downloads": -1,
        "filename": "minotaur-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6d93ab2e3eaa31d300f555ecf97c6b91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12779,
        "upload_time": "2020-10-29T18:33:15",
        "upload_time_iso_8601": "2020-10-29T18:33:15.724837Z",
        "url": "https://files.pythonhosted.org/packages/23/2d/d258176dc7cdf07c964752325a701f070fbb489eeecf8d608ac452c704ca/minotaur-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d91060ae7f9ec5a76a012e0fd8c208300c44947080d4b77bc7c63db4d2ec26e",
          "md5": "6344588ad89a8a61fad63c34b3e88c85",
          "sha256": "51b597821e51bccd77d75e284d2ca4d16a346d2818ca59b1cc70361bbee5d334"
        },
        "downloads": -1,
        "filename": "minotaur-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6344588ad89a8a61fad63c34b3e88c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17429,
        "upload_time": "2021-02-27T01:22:01",
        "upload_time_iso_8601": "2021-02-27T01:22:01.589227Z",
        "url": "https://files.pythonhosted.org/packages/8d/91/060ae7f9ec5a76a012e0fd8c208300c44947080d4b77bc7c63db4d2ec26e/minotaur-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e07c49bc23293c0d189bef9409435b1df4c0dd0d685251bacaa782bada9ffd86",
          "md5": "58f24b9c019cd3d7a83b009f80cb2a6c",
          "sha256": "e2142c124bfa0f63dbaaaea935fb9d84a3175aa127abdc275958e12c25b415bf"
        },
        "downloads": -1,
        "filename": "minotaur-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "58f24b9c019cd3d7a83b009f80cb2a6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17106,
        "upload_time": "2022-01-05T12:40:27",
        "upload_time_iso_8601": "2022-01-05T12:40:27.918056Z",
        "url": "https://files.pythonhosted.org/packages/e0/7c/49bc23293c0d189bef9409435b1df4c0dd0d685251bacaa782bada9ffd86/minotaur-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fc142d0ac5da6fa0c99cf70b1f0e0903357e58d55fc0ddb674e175602464bf4",
          "md5": "f313a0ef4f3788f3c68baf4fc111de63",
          "sha256": "5a8e83e3ace5adfd3f47f0b20ca7dd86619e8124d095cf0d0adce67ed1f766fb"
        },
        "downloads": -1,
        "filename": "minotaur-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f313a0ef4f3788f3c68baf4fc111de63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17112,
        "upload_time": "2022-10-15T11:28:06",
        "upload_time_iso_8601": "2022-10-15T11:28:06.749741Z",
        "url": "https://files.pythonhosted.org/packages/1f/c1/42d0ac5da6fa0c99cf70b1f0e0903357e58d55fc0ddb674e175602464bf4/minotaur-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "773e7fa788fd4af56c1139fe0896b076801488a1eb737032c7abcd6d33e1d87e",
          "md5": "fa334a62007ea9e146f333053055d2a1",
          "sha256": "704d1a50852652470ba2753b1732589fc97c7672870bdca7efc362106362b7f3"
        },
        "downloads": -1,
        "filename": "minotaur-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa334a62007ea9e146f333053055d2a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17094,
        "upload_time": "2022-11-12T14:54:07",
        "upload_time_iso_8601": "2022-11-12T14:54:07.651216Z",
        "url": "https://files.pythonhosted.org/packages/77/3e/7fa788fd4af56c1139fe0896b076801488a1eb737032c7abcd6d33e1d87e/minotaur-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "773e7fa788fd4af56c1139fe0896b076801488a1eb737032c7abcd6d33e1d87e",
        "md5": "fa334a62007ea9e146f333053055d2a1",
        "sha256": "704d1a50852652470ba2753b1732589fc97c7672870bdca7efc362106362b7f3"
      },
      "downloads": -1,
      "filename": "minotaur-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fa334a62007ea9e146f333053055d2a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17094,
      "upload_time": "2022-11-12T14:54:07",
      "upload_time_iso_8601": "2022-11-12T14:54:07.651216Z",
      "url": "https://files.pythonhosted.org/packages/77/3e/7fa788fd4af56c1139fe0896b076801488a1eb737032c7abcd6d33e1d87e/minotaur-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}