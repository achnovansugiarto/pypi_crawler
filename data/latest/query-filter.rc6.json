{
  "info": {
    "author": "Simon Crowe",
    "author_email": "simon.r.crowe@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## python-query-filter\n\nThis package provides a function-based API for filtering collections of\nheterogeneous, nested dictionaries or complex objects. It has 100% test\ncoverage.\n\nAt the core of the API is the `q_filter` function, which is like\nthe built-in `filter` function, but take any number of predicate functions\nrather than just one.\n\nThe remainder of the functions in this package\nare used to construct predicates that evaluate items\nor attributes within filtered objects.\n\nInspired by the more class-based [QueryableList](https://github.com/kata198/QueryableList).\n\n### Use Case\nThis package is best suited to nested, heterogeneous data that\none might find in a serialised HTTP response body.\n\n### Install\n```sh\npip install query-filter\n```\n\n### Examples\n\n#### Filtering by list/dictionary items\nIn the next few examples, we'll be filtering a typical response from `boto3`,\nthe python client for Amazon Web Services.\n\nIf we want to get data that have `AssociatePublicIpAddress`\nset to `True`, we can do the following:\n\n```python\n>>> from query_filter import q_filter, q\n>>> results = q_filter(\n        versions_data[\"LaunchTemplateVersions\"],\n        q[\"LaunchTemplateData\"][\"NetworkInterfaces\"][0][\"AssociatePublicIpAddress\"]\n    )\n>>> results\n<filter at 0x7f3515cba240>\n>>> list(results)\n[{'CreateTime': datetime.datetime(2017, 11, 20, 12, 52, 33),\n  'DefaultVersion': True,\n  'LaunchTemplateData': {'ImageId': 'ami-aabbcc11',\n   'KeyName': 'kp-us-east',\n   'NetworkInterfaces': [{'AssociatePublicIpAddress': True,\n     'DeleteOnTermination': False,\n     'DeviceIndex': 0,\n     'Groups': ['sg-7c227019'],\n     'SubnetId': 'subnet-7b16de0c',\n     'PrivateIpAddress': '80.141.44.12'}],\n   'UserData': ''},\n  'CreditSpecification': {'CpuCredits': 'standard'},\n  'CpuOptions': {'CoreCount': 1, 'ThreadsPerCore': 2},\n  'LaunchTemplateId': 'lt-068f72b72934aff71',\n  'VersionNumber': 1}]\n```\n\nThe filter above doesn't use `== True` but rather checks\nthe truthiness of the `\"AssociatePublicIpAddress\"` key's value.\n\nThe equivalent generator expression for a simple query likes this\nis less readable.\n\n```python\n>>> from typing import Collection\n>>> results = (\n        version for version in versions_data[\"LaunchTemplateVersions\"]\n        if version.get(\"LaunchTemplateData\", {}).get(\"NetworkInterfaces\") and\n        isinstance(version[\"LaunchTemplateData\"][\"NetworkInterfaces\"], Collection) and\n        version[\"LaunchTemplateData\"][\"NetworkInterfaces\"][0].get(\"AssociatePublicIpAddress\")\n    )\n```\n\nThis example is excessively defensive, but hopefully it explains the motivation\nbehind this tool.\n\nA  `get` call is needed in the generator expression above because the item\n`\"AssociatePublicIpAddress\"` is sometimes missing.\nThe first two conditions aren't strictly needed to filter the example data.\nHowever, they do illustrate the fact that `q_item` predicates silently\nreturn `False` if `\"LaunchTemplateData\"` is not present, or\nif `\"NetworkInterfaces\"` is missing, is not a collection\nor is an empty collection.\n\n#### Filtering using custom predicates\n\nWe can combine custom queries with those created with the help\nof this package. The following predicate can be used to ensure\nthat the launch template versions specify a sufficient number of\nthreads.\n\n```python\ndef threads_gte(min_threads: int):\n    def pred(version: dict):\n        cores = version[\"CpuOptions\"][\"CoreCount\"]\n        threads = version[\"CpuOptions\"][\"ThreadsPerCore\"]\n        return cores * threads >= min_threads\n\n    return pred\n```\n\nHere we're using `q_any`, which combines the predicates passed into it,\nreturning `True` if at least one of them is satisfied.\n\n```python\n>>> from query_filter import q, q_any, q_filter\n>>> results = q_filter(\n        versions_data[\"LaunchTemplateVersions\"],\n        q_any(\n            threads_gte(5),\n            q[\"CreditSpecification\"][\"CpuCredits\"] == \"unlimited\"\n        )\n    )\n>>> list(results)\n[{'CreateTime': datetime.datetime(2017, 11, 20, 15, 45, 33),\n  'DefaultVersion': False,\n  'LaunchTemplateData': {'ImageId': 'ami-cc3e8abf',\n   'KeyName': 'kp-us-east',\n   'NetworkInterfaces': [{'DeviceIndex': 0,\n     'Groups': ['sg-7c227019'],\n     'SubnetId': 'subnet-a4579fe6',\n     'Ipv6Addresses': [{'Ipv6Address': '4f08:ea60:17f9:3e89:4d66:2e8c:259c:d1a9'},\n      {'Ipv6Address': 'b635:26ad:8fdf:a274:88dc:cf8c:47df:26b7'},\n      {'Ipv6Address': 'eb7a:5a31:f899:dd8c:e566:3307:a45e:dcf6'}],\n     'Ipv6AddressCount': 3,\n     'PrivateIpAddress': '80.141.152.14'}]},\n  'CpuOptions': {'CoreCount': 4, 'ThreadsPerCore': 1},\n  'CreditSpecification': {'CpuCredits': 'unlimited'},\n  'LaunchTemplateId': 'lt-aaa68831cce2a8d91',\n  'VersionNumber': 4},\n {'CreateTime': datetime.datetime(2017, 11, 20, 19, 4, 54),\n  'DefaultVersion': False,\n  'LaunchTemplateData': {'ImageId': 'ami-2f7ac02a',\n   'KeyName': 'kp-us-east',\n   'NetworkInterfaces': [{'DeviceIndex': 0,\n     'Groups': ['sg-1c628b25'],\n     'SubnetId': 'subnet-a4579fe6',\n     'Ipv6Addresses': [{'Ipv6Address': 'f486:915c:2be9:b0da:7d60:3fae:d65a:e8d8'},\n      {'Ipv6Address': 'eb7a:5a31:f899:dd8c:e566:3307:a45e:dcf6'}],\n     'Ipv6AddressCount': 2,\n     'PrivateIpAddress': '80.141.152.136'}]},\n  'CpuOptions': {'CoreCount': 3, 'ThreadsPerCore': 2},\n  'CreditSpecification': {'CpuCredits': 'standard'},\n  'LaunchTemplateId': 'lt-aaa68831cce2a8d91',\n  'VersionNumber': 5}]\n```\n\n#### Filtering by object attributes\n\nThis can be useful if you're working with objects that have a lot\nof \"has-a\" relationships to other objects. For brevity,\na hacky binary tree-like class is used to build a fictional ancestor chart.\n\n```python\n>>> class Node:\n    instances = []\n    def __init__(self, name, mother=None, father=None):\n        self.name = name\n        self.mother = mother\n        self.father = father\n        self.instances.append(self)\n    def __repr__(self):\n        return (f\"Node('{self.name}', mother={repr(self.mother)}, \"\n                f\"father={repr(self.father)})\")\n>>> Node(name='Tiya Meadows',\n         mother=Node('Isobel Meadows (nee Walsh)',\n                     mother=Node(name='Laura Walsh (nee Stanton)',\n                                 mother=Node('Opal Eastwood (nee Plant)'),\n                                 father=Node('Alan Eastwood')),\n                     father=Node(name='Jimmy Walsh')),\n         father=Node(name='Isaac Meadows',\n                     mother=Node('Halle Meadows (nee Perkins)'),\n                     father=Node('Wilbur Meadows')))\n```\n\nTo demonstrate the syntax, we can filter for the root node by their\ngreat-great-grandmother.\n\n```python\n>>> from query_filter import q, q_contains, q_filter\n>>> results = q_filter(\n        Node.instances,\n        q_contains(q.mother.mother.mother.name, \"Opal Eastwood\")\n    )\n>>> list(results)\n[Node('Tiya Meadows', mother=Node('Isobel Meadows (nee Walsh)', mother=Node('Laura Walsh (nee Stanton)', mother=Node('Opal Eastwood (nee Plant)', mother=None, father=None), father=Node('Alan Eastwood', mother=None, father=None)), father=Node('Jimmy Walsh', mother=None, father=None)), father=Node('Isaac Meadows', mother=Node('Halle Meadows (nee Perkins)', mother=None, father=None), father=Node('Wilbur Meadows', mother=None, father=None)))]\n```\n\n`q_contains` above is the equivalent of the expression:\n`\"Opal Eastwood\" in Node.instances.mother.mother.mother.name`.\nIt is one of several functions that enable us to create queries\nbased on operators that cannot be overloaded in the same way\nas the comparison operators.\n\nHere is another example:\n\n```python\n>>> from query_filter import q, q_is_not, q_matches_regex, q_filter\n>>> results = q_filter(Node.instances,\n                       q_matches_regex(q.name, r\"Walsh(?! \\(nee)\"),\n                       q_is_not(q.father, None))\n>>> list(results)\n[Node('Isobel Meadows (nee Walsh)', mother=Node('Laura Walsh (nee Stanton)', mother=Node('Opal Eastwood (nee Plant)', mother=None, father=None), father=Node('Alan Eastwood', mother=None, father=None)), father=Node('Jimmy Walsh', mother=None, father=None))]\n```\n\n### API\n\n#### Filter functions\n\n`query_filter.q_filter`\n\nThis is an alias for `query_filter.q_filter_all`.\n\n`query_filter.q_filter_all(objects: Iterable, *preds) -> Iterable[Any]`\n\nReturns a `filter` iterator containing objects for which all of the predicates in `preds` are true.\n\n`query_filter.q_filter_any(objects: Iterable, *preds) -> Iterable[Any]`\n\nReturns a `filter` iterator containing objects for which any of the predicates in `preds` are true.\n\n`query_filter.q_filter_not_any(objects: Iterable, *preds) -> Iterable[Any]`\n\nReturns a `filter` iterator containing objects for which none of the predicates in `preds` is true.\n\n#### Predicate functions\n\n`query_filter.q_all(*preds: Callable) -> Callable`\n\nReturns a predicate that returns `True` if all predicates\nin `preds` return `True`.\n\n`query_filter.q_any(*preds: Callable) -> Callable`\n\nReturns a predicate that returns `True` if any predicates\nin `preds` return `True`.\n\n`query_filter.q_not(pred: Callable) -> Callable`\n\nReturns a predicate that returns `True` if the predicate `pred` returns `False`.\n\n#### Building Queries\nThe `Query` class, an instance of which is always imported as `q`\nis used to specify attribute and item access.\n\nIt provides a way of specifying lookups on objects. For instance, \nthis would could be used to filter for orders created in May:\n\n```python\n>>> results = q_filter(orders, q.metadata['date_created'].month == 5)\n```\n\nThe class supports some operators which offer the most convenient API\nfor building queries.\n\n##### Comparison Operators\n\nThe `Query` class supports all six comparison operators:\n`<`, `<=`, `==`, `!=`, `>` and `>=`.\n\n##### Bitwise Operators\nThe bitwise not operator `~` negates the truthiness of the `Query` object.\n\nFor example `q.is_active` will produce a predicate that returns `True` if\nan object has an attributes named `is_active` and that attribute's value\nis truthy.\n\n`~q.is_active` will produce the opposite result.\n\n#####  Functions\nThere are some useful operators such as `is` that cannot be overloaded.\nMost of the functions below replace these.\n\n`query_filter.q_is_in(query: Query, container: Container) -> Callable[[Any], bool]`\n\nReturns a predicate that's true if the queried object is in the `container` argument.\n\n`query_filter.q_contains(query: Query, member: Any) -> Callable[[Container], bool]`\n\nReturns a predicate that's true if the queried object contains the `member` argument.\n\n`query_filter.q_is(query: Query, criterion: Any) -> Callable[[Any], bool]`\n\nReturns a predicate that's true if the queried object is identical\nto the criterion object.\n\n`query_filter.q_is_not(query, criterion: Any) -> Callable[[Any], bool]`\n\nReturns a predicate that's true if the queried object is not identical\nto the criterion object.\n\n`query_filter.q_matches_regex(query: Query, pattern: str | bytes) -> [[str | bytes], bool]`\n\nThis function may be convenient when working with strings and byte strings.\nIt returns a predicate that's true if the queried object matches the regular expression\n`pattern` argument.\n\n### Tests\n\nIf you want to run tests, you'll first need to install the package\nfrom source and make it editable. Ensuring that you're in the root directory\nof this repo, enter:\n\n```sh\npip install -e .\npip install -r requirements/development.txt\npytest\n```\n\nTo run tests with coverage:\n\n```sh\ncoverage run  --source \"query_filter\" -m pytest tests\ncoverage report\n```\n\n### Feature ideas\n- Query all items in an iterable rather than just one using `...`\n- Build queries out of `Query` objects using the `&` and `|` operators\n- Make silent failure when retrieving attributes and items optional\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simoncrowe/python-query-filter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "query-filter",
    "package_url": "https://pypi.org/project/query-filter/",
    "platform": null,
    "project_url": "https://pypi.org/project/query-filter/",
    "project_urls": {
      "Homepage": "https://github.com/simoncrowe/python-query-filter"
    },
    "release_url": "https://pypi.org/project/query-filter/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python's filter function with composable queries.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15577024,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "778195a3236752dc14fe55a32ff0503d0bf36e865f0306329204afe73376c61c",
          "md5": "dbe7d4fd82ee0e7392cda12ae75acdba",
          "sha256": "ec9ec5a87fb0c8588ed90e8aac683750b06dc7629356f39b5f93807afa19257d"
        },
        "downloads": -1,
        "filename": "query_filter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbe7d4fd82ee0e7392cda12ae75acdba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9445,
        "upload_time": "2021-01-09T15:28:37",
        "upload_time_iso_8601": "2021-01-09T15:28:37.196301Z",
        "url": "https://files.pythonhosted.org/packages/77/81/95a3236752dc14fe55a32ff0503d0bf36e865f0306329204afe73376c61c/query_filter-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c235997d1a6826a0769da7366559bd9289f05236e013cd87f26fb41676782883",
          "md5": "9d4282aebf7c6fe185065331776c1a0e",
          "sha256": "dda522441259b043237d964cce74ca757da85edc1b19da842847a369087088cb"
        },
        "downloads": -1,
        "filename": "query-filter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d4282aebf7c6fe185065331776c1a0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11178,
        "upload_time": "2021-01-09T15:28:39",
        "upload_time_iso_8601": "2021-01-09T15:28:39.594571Z",
        "url": "https://files.pythonhosted.org/packages/c2/35/997d1a6826a0769da7366559bd9289f05236e013cd87f26fb41676782883/query-filter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e55daec46ba428cf93b7bd553abf71ab52b4e10b837c0a142ecd6e1d2e98fb3",
          "md5": "5b92fd62787bff0fd6471c09772eda30",
          "sha256": "db1ec40f8cb6ffc5d3e6771095d09d7368d72341d12e6ed70992cac398967482"
        },
        "downloads": -1,
        "filename": "query_filter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b92fd62787bff0fd6471c09772eda30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9462,
        "upload_time": "2021-01-09T15:38:13",
        "upload_time_iso_8601": "2021-01-09T15:38:13.880311Z",
        "url": "https://files.pythonhosted.org/packages/7e/55/daec46ba428cf93b7bd553abf71ab52b4e10b837c0a142ecd6e1d2e98fb3/query_filter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e574b6b11437fbd27447ec320f92778dc713072d83e9196497c36543d7db2c4",
          "md5": "66d66512c9d69ffa18eadd3180ff06f8",
          "sha256": "4de19e5abb11fd25a9cc04a18d3a5163b9ce60cf9c14f12be73dd3bddeec81e9"
        },
        "downloads": -1,
        "filename": "query-filter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66d66512c9d69ffa18eadd3180ff06f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11150,
        "upload_time": "2021-01-09T15:38:15",
        "upload_time_iso_8601": "2021-01-09T15:38:15.525154Z",
        "url": "https://files.pythonhosted.org/packages/8e/57/4b6b11437fbd27447ec320f92778dc713072d83e9196497c36543d7db2c4/query-filter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bb7a41d1a7551434983c88bad55c0a7353aac88accb837a0fc33855413ae264",
          "md5": "228e43c39361f251b0044763c0368ca9",
          "sha256": "8d7d39893b52860c66f4d5ff7ee47a34137f9369fa59de1bc3603d81c24f5559"
        },
        "downloads": -1,
        "filename": "query_filter-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "228e43c39361f251b0044763c0368ca9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9481,
        "upload_time": "2021-01-10T16:28:36",
        "upload_time_iso_8601": "2021-01-10T16:28:36.180262Z",
        "url": "https://files.pythonhosted.org/packages/7b/b7/a41d1a7551434983c88bad55c0a7353aac88accb837a0fc33855413ae264/query_filter-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70ba57cf3afedb00ada15da1a561ea0afcb505aaf020c8a6ea75245bf86b95ae",
          "md5": "9da74530986a66fadcdb9f1fd535e4f7",
          "sha256": "b07e50c585c4e50fa95ab36162c8e29ce89d78e47881397bd1852df816937cbf"
        },
        "downloads": -1,
        "filename": "query-filter-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9da74530986a66fadcdb9f1fd535e4f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11656,
        "upload_time": "2021-01-10T16:28:37",
        "upload_time_iso_8601": "2021-01-10T16:28:37.894780Z",
        "url": "https://files.pythonhosted.org/packages/70/ba/57cf3afedb00ada15da1a561ea0afcb505aaf020c8a6ea75245bf86b95ae/query-filter-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48658077b59c638c5fbbe7a07563e628145f96d3ecc90aa5dfd5543367b63b28",
          "md5": "df67cb47b7d1a4fc9660b260e8d4db78",
          "sha256": "433eb62944fd4ef37a5d0a16f4932da752ce485ef7d3931cecaf2bb109926442"
        },
        "downloads": -1,
        "filename": "query_filter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df67cb47b7d1a4fc9660b260e8d4db78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8319,
        "upload_time": "2022-10-22T20:44:15",
        "upload_time_iso_8601": "2022-10-22T20:44:15.060388Z",
        "url": "https://files.pythonhosted.org/packages/48/65/8077b59c638c5fbbe7a07563e628145f96d3ecc90aa5dfd5543367b63b28/query_filter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c069b3c73d7b7598a783eb12847e43d0949e58790dde615bfeb21af47c4c6372",
          "md5": "be2c2b4471a200b60c65228818915a4b",
          "sha256": "19a0577b048ccffcf094855cd95e6ecc3522512b9974749849f467ac16d48a73"
        },
        "downloads": -1,
        "filename": "query-filter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be2c2b4471a200b60c65228818915a4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8033,
        "upload_time": "2022-10-22T20:44:17",
        "upload_time_iso_8601": "2022-10-22T20:44:17.492497Z",
        "url": "https://files.pythonhosted.org/packages/c0/69/b3c73d7b7598a783eb12847e43d0949e58790dde615bfeb21af47c4c6372/query-filter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b4c942cfaf3245ddb06c5bea8a0472f011eea025c85d505fee7e2aea0b36dfa",
          "md5": "d3bacc66bfcf3e0b18c9b2c15360e01a",
          "sha256": "77a20fa9707d336a076623a234bb507183280334dfdc3340e4b286af9d163fcf"
        },
        "downloads": -1,
        "filename": "query_filter-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3bacc66bfcf3e0b18c9b2c15360e01a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8225,
        "upload_time": "2022-10-29T11:59:24",
        "upload_time_iso_8601": "2022-10-29T11:59:24.769743Z",
        "url": "https://files.pythonhosted.org/packages/4b/4c/942cfaf3245ddb06c5bea8a0472f011eea025c85d505fee7e2aea0b36dfa/query_filter-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e9db39d55737d9e1cd5a83c3a7a6736ee39db89e475ddddc4dae605e53f41f",
          "md5": "354d309629a8b9f2bf8168ddf358f07e",
          "sha256": "b339cd5671a905440aaa473f1fcd42118689db4c24d7ef735a01693d5a68240f"
        },
        "downloads": -1,
        "filename": "query-filter-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "354d309629a8b9f2bf8168ddf358f07e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7977,
        "upload_time": "2022-10-29T11:59:30",
        "upload_time_iso_8601": "2022-10-29T11:59:30.565185Z",
        "url": "https://files.pythonhosted.org/packages/20/e9/db39d55737d9e1cd5a83c3a7a6736ee39db89e475ddddc4dae605e53f41f/query-filter-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f64a5dca4f9f16401ad91c772962f5472e36f19cbc9765453b4535be8699e6de",
          "md5": "3d8ec2877b9be23f567211491b424088",
          "sha256": "55a643ae53f3f179634a192d15674a965178e5cda7f96e529c3dc68bbfca3942"
        },
        "downloads": -1,
        "filename": "query_filter-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d8ec2877b9be23f567211491b424088",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7847,
        "upload_time": "2022-10-29T12:07:25",
        "upload_time_iso_8601": "2022-10-29T12:07:25.161069Z",
        "url": "https://files.pythonhosted.org/packages/f6/4a/5dca4f9f16401ad91c772962f5472e36f19cbc9765453b4535be8699e6de/query_filter-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "192b99a1af697a8d8f70e56c1e939d7c8d0634db5379572a75caf35557d46791",
          "md5": "97764f236be8ca9785de90b019d027d9",
          "sha256": "99e4dfb1136cda12e76c69f903a05fe21b021ec190331e4e6dbde8c77c26029c"
        },
        "downloads": -1,
        "filename": "query-filter-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "97764f236be8ca9785de90b019d027d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7479,
        "upload_time": "2022-10-29T12:07:26",
        "upload_time_iso_8601": "2022-10-29T12:07:26.582213Z",
        "url": "https://files.pythonhosted.org/packages/19/2b/99a1af697a8d8f70e56c1e939d7c8d0634db5379572a75caf35557d46791/query-filter-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f64a5dca4f9f16401ad91c772962f5472e36f19cbc9765453b4535be8699e6de",
        "md5": "3d8ec2877b9be23f567211491b424088",
        "sha256": "55a643ae53f3f179634a192d15674a965178e5cda7f96e529c3dc68bbfca3942"
      },
      "downloads": -1,
      "filename": "query_filter-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d8ec2877b9be23f567211491b424088",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7847,
      "upload_time": "2022-10-29T12:07:25",
      "upload_time_iso_8601": "2022-10-29T12:07:25.161069Z",
      "url": "https://files.pythonhosted.org/packages/f6/4a/5dca4f9f16401ad91c772962f5472e36f19cbc9765453b4535be8699e6de/query_filter-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "192b99a1af697a8d8f70e56c1e939d7c8d0634db5379572a75caf35557d46791",
        "md5": "97764f236be8ca9785de90b019d027d9",
        "sha256": "99e4dfb1136cda12e76c69f903a05fe21b021ec190331e4e6dbde8c77c26029c"
      },
      "downloads": -1,
      "filename": "query-filter-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "97764f236be8ca9785de90b019d027d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7479,
      "upload_time": "2022-10-29T12:07:26",
      "upload_time_iso_8601": "2022-10-29T12:07:26.582213Z",
      "url": "https://files.pythonhosted.org/packages/19/2b/99a1af697a8d8f70e56c1e939d7c8d0634db5379572a75caf35557d46791/query-filter-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}