{
  "info": {
    "author": "zjlab",
    "author_email": "hongchf@zhejianglab.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# SPAIC\n\nEnglish : [中文](./README_cn.md)\n\nSpike-based artificial intelligence computing platform\n\nThe spaic platform simulation training platform is a network construction, forward simulation and learning training platform developed for spiking neural networks. It mainly includes modules such as front-end network modeling, back-end simulation and training, model algorithm library, data display and analysis, etc.\n\nDependency packages: pytorch, numpy\n\n# Installation\n\nRecently, SPAIC use PyTorch as backend for computation. If you also want to use CUDA, please make sure you have a CUDA version PyTorch installed.\n\n**Tutorial documentation for the SPAIC:**  https://spaic.readthedocs.io/en/latest/index.html\n\n**Install the last stable version from** [**PyPI**](https://pypi.org/project/SPAIC/):\n\n```bash\npip install SPAIC\n```\n\n**From** [**GitHub**](https://github.com/ZhejianglabNCRC/SPAIC):\n\n```bash\ngit clone https://github.com/ZhejianglabNCRC/SPAIC.git\ncd SPAIC\npython setup.py install\n```\n\nIf you still have some questions, please feel free to contact us:  \nChaofei Hong <a href=\"mailto:hongchf@zhejainglab.com\"> hongchf@zhejianglab.com</a>  \nMengwen Yuan <a href=\"mailto:yuanmw@zhejianglab.com\"> yuanmw@zhejianglab.com</a>  \nMengxiao Zhang <a href=\"mailto:mxzhang@zhejianglab.com\"> mxzhang@zhejianglab.com</a>  \n\n\n<img src=\"./docs/source/_static/SPAIC-POSTER.png\" style=\"zoom: 80%;\" />\n\n\n# Front-end Network Modeling Components and functions\n\n​\tThe platform mainly builds the network through five types of structural modules such as Assembly, Connection, NeuronGroup, Node, and Network. The specific functions are described as follows, and the modeling structure relationship is shown in the following figure.\n\n<img src=\"./docs/source/_static/front-end network components.png\" style=\"zoom: 80%;\" />\n\n\n\n- **Assembly**: It is an abstract class of neural network structure topology, representing any network structure, and other network modules are subclasses of the Assembly class. The Assembly object has three dict attributes named _groups , _projections and _connections, which save the set of neurons and connections inside the neural assembly. It also has list attributes named _supers, _input_connections, and _output_connections, which represent the upper neural set containing this neural set and the connections to this neural set, respectively. As the main interface for network modeling, it includes the following main modeling functions：\n    - add_assembly(name, assembly):  add a new assembly member to the neural assembly\n    - del_assembly(assembly=None, name=None): delete an assembly member that already exists in the neural assembly\n    - copy_assembly(name, assembly):  Copy an existing assembly structure and add the new assembly to this neural assembly \n    - replace_assembly(old_assembly, new_assembly):Replace an existing neural assembly inside the assembly with a new neural assembly \n    - merge_assembly( assembly): Merge this neural set with another neural set to get a new neural set\n    - select_assembly(assemblies, name=None):Select some members in this neural assembly and the connections between them to form a new neural assembly, the original assembly remains unchanged\n    - add_connection( name, connection): add the connect between two groups of neurons inside the assembly\n    - del_connection(connection=None, name=None): delete a connection inside the assembly\n    - assembly_hide(): hide this neural assembly and do not participate in this training, simulation or display\n    - assembly_show(): convert this neural assembly from hidden state to normal state.\n- **Connection**: A class for establishing connections between NeuronGroups, including the functions of generating and managing different types of synaptic connections and specific links. Some Key parameters for initialize connections are list below:\n    - pre_assembly - presynaptic neuron, can also be regarded as the starting point of the connection, the previous layer\n    - post_assembly - Postsynaptic neuron, can also be regarded as the end point of the connection, the next layer\n    - name - the name of the connection, it is recommended that the user give a meaningful name\n    - link_type - connection type, such as full connection, sparse connection, convolution connection, etc.\n    - max_delay - the synaptic delay, i.e. the signal from the presynaptic neuron will be delayed by several time steps before being delivered to the postsynaptic neuron\n    - sparse_with_mask - enable or disable the filter used for sparse matrices\n    - pre_var_name - the output of the presynaptic neuron to the synapse, that is, the signal received by the connection, the default is to receive the spike signal sent by the presynaptic neuron named as 'O'\n\n- **Projection**: A class for establishing connections between Assemblies, it contains multiple specific Connections of NeuornGroups, the Connections can be coded by user or automatically generated by ConnectionPolicy.\n- **NeuronGroup**: is a class of a certain number of neurons, usually called a layer of neurons, with the same neuron model, connection form, etc. Although it inherits from the Assembly class, its internal The _groups, _projections and _connections properties are empty. Key parameters are neuron numbers, neuron model type and shape of the NeuronGroup.\n- **Node**: The node is the object to transfer the input and output of the neural network, including the encoding and decoding, which converts the input into discharge or converts the discharge into output. Like NeuronGroup, the internal _groups and _connections properties are empty.\n- **Network**: The top-level structure in the Assembly subclass. All modules of each constructed neural network are included in a Network object, which is also responsible for network training, simulation, data interaction and other network modeling work. In addition to the _groups and _connections attributes of the Assemby object, it also has _monitors, _learners, _optimizers, _backend, and other attributes, while _supers, _input_connections, _output_connections and other attributes are empty. Network provide the following interfaces for network building and training:\n    - set_backend: set the compuation backend \n    - build: build the front-end network into computation graph\n    - set_runtime: set the simulation time\n    - run:  run a simulation\n    - save_state: save network weights\n    - state_from_dict: read network weights\n\n\n\n\n# Typical Use Case\n\nThe simulation and training using the SPAIC mainly includes following steps: 1) data or environment import, 2)parameter selection related to the training process of the trainer, 3)model construction (including input and output node construction, neuron cluster, network connection, network topology, learning algorithm, data recorder and other units), 4) procedures of neuron simulation or training, model data analysis and saving\n\n### Import SPAIC library\n\n\n```python\nimport spaic\n```\n\n### Set training simulation parameters\n\n\n```python\nrun_time = 200.0\nbat_size = 100\n```\n\n###  Import training dataset\n\n\n```python\n# Create Dataset\nroot = 'D:\\Datasets\\MNIST'\ndataset = spaic.MNIST(root, is_train=False)\n\n#  Create DataLoader\ndataloader = spaic.Dataloader(dataset, batch_size=bat_size, shuffle=True, drop_last=True)\nn_batch = dataloader.batch_num\n```\n\n    >> Dataset loaded\n\n\n## Network model construction\nThe model can be built in two ways: first, like Pytorch's module class inheritance, which is built in the _init_ function, and second, like Nengo's with statement. In addition, the existing model structure in the model algorithm library can also be introduced into the modeling process\n### Modeling Method 1: Class Inheritance Form\n\n\n```python\nclass ExampleNet(spaic.Network):\n     def __init__(self):\n        super(ExampleNet, self).__init__()\n        \n        \n        # Create an input node and select the input encoding method\n        self.input = spaic.Node(dataloader, encoding='latency')\n              \n        # Establish neurongroups, select neuron types, and set neuron parameter values\n        self.layer1 = spaic.NeuronGroup(100, model='clif')\n        self.layer2 = spaic.NeuronGroup(10, model='clif')\n        \n        # Establish connections between Neurongroups\n        self.connection1 = spaic.Connection(self.input, self.layer1, link_type='full')\n        self.connection2 = spaic.Connection(self.layer1, self.layer2, link_type='full')\n        \n        # Create an output node and select the output decoding method\n        self.output = spaic.Node(decoding='spike_counts',target=self.layer2)\n\n        # Establish a state detector, which can monitor the state of various objects\n        self.monitor1 = spaic.StateMonitor(self.layer1, 'V')\n\n        # Add the learning algorithm and select the network structure to be trained \n        self.learner1 = spaic.STCA(0.5, self)\n        \n        # Add optimization algorithm\n        self.optim = spaic.Adam(lr=0.01, schedule='StepLR', maxstep=1000)\n\n# Initialize the ExampleNet network object\nNet = ExampleNet()\n```\n\n### Modeling method 2:  Using \"with\"\n\n\n```python\n# Initialize the object of the basic network class\nNet = spaic.Network()\n\n# Create a network structure by defining network components in with\nwith Net:\n    # Create an input node and select the input encoding method\n    input1 = spaic.Node(dataloader, encoding='latency')\n\n\n    # Establish neurongroups, select neuron types, and set neuron parameter values\n    layer1 = spaic.NeuronGroup(100, model='clif')\n    layer2 = spaic.NeuronGroup(10, model='clif')\n\n    # Establish connections between Neurongroups\n    connection1 = spaic.Connection(input1, layer1, link_type='full')\n    connection2 = spaic.Connection(layer1, layer2, link_type='full')\n\n    # Create an output node and select the output decoding method\n    output1 = spaic.Node(decoding='spike_counts',target=layer2)\n\n    # Establish a state detector, which can monitor the state of various objects\n    monitor1 = spaic.StateMonitor(layer1, 'V')\n\n    # Add the learning algorithm and select the network structure to be trained \n    learner1 = spaic.STCA(0.5, Net)\n    \n    # Add optimization algorithm\n    optim = spaic.Adam(lr=0.01, schedule='StepLR', maxstep=1000)\n    \n```\n\n### Modeling method 3:  importing a model library model and modifying it with functions\n\n\n```python\nfrom spaic.Library import ExampleNet\nNet = ExampleNet()\n# neuron parameters\nneuron_param = {\n    'tau_m': 8.0,\n    'V_th': 1.5,\n}\n# New neurongroups\nlayer3 = spaic.NeuronGroup(100, model='lif', param=neuron_param)\nlayer4 = spaic.NeuronGroup(100, model='lif', param=neuron_param)\n\n# Add a new member to the Assembly\nNet.add_assembly('layer3', layer3)\n# Delete the members that already exist in the Assembly\nNet.del_assembly(Net.layer3)\n#  Copy an existing assembly structure and add the new assembly to this assembly\nNet.copy_assembly('net_layer', ExampleNet())\n# Replace an existing neural assembly inside the assembly with a new assembly\nNet.replace_assembly(Net.layer1, layer3)\n# Merge this neural assembly with another assembly to get a new neural assembly\nNet2 = ExampleNet()\nNet.merge_assembly(Net2)\n#Connect two neurongroups inside the assembly\ncon = spaic.Connection(Net.layer2, Net.net_layer, link_type='full')\nNet.add_connection('con3', con)\n#Take out some set members in this assembly and their connections\nNet3 = Net.select_assembly([Net.layer2, net_layer])\n```\n\n### Choose a backend and compile the network \n\n\n```python\nbackend = spaic.Torch_Backend()\nsim_name = backend.backend_name\nNet.build(backend)\n```\n\n### Start training \n\n\n```python\nfor epoch in range(100):\n    print(\"Start training\")\n    train_loss = 0\n    train_acc = 0\n    pbar = tqdm(total=len(train_loader))\n    for i, item in enumerate(train_loader):\n        # forward\n        data, label = item\n        Net.input(data)\n        Net.output(label)\n        Net.run(run_time)\n        output = Net.output.predict\n        output = (output - torch.mean(output).detach()) / (torch.std(output).detach() + 0.1)\n        label = torch.tensor(label, device=device)\n        batch_loss = F.cross_entropy(output, label)\n\n        # backward\n        Net.learner.optim_zero_grad()\n        batch_loss.backward()\n        Net.learner.optim_step()\n```\n\n\n\n### Single simulation run\n\n\n```python\nNet.run(run_time=run_time)\n```\n\n### ploting the results\n\n\n```python\nfrom matplotlib import pyplot as plt\nplt.plot(Net.monitor1.times, Net.monitor1.values[0,0,:])\nplt.show()\n```\n\n### Save the network\n\n\n```python\nNet.save(filename='TestNet')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZhejianglabNCRC/SPAIC/",
    "keywords": "",
    "license": "Apache-2.0 license",
    "maintainer": "hongchaofei",
    "maintainer_email": "hongchf@zhejianglab.com",
    "name": "SPAIC",
    "package_url": "https://pypi.org/project/SPAIC/",
    "platform": null,
    "project_url": "https://pypi.org/project/SPAIC/",
    "project_urls": {
      "Documentation": "https://spaic.readthedocs.io/",
      "Homepage": "https://github.com/ZhejianglabNCRC/SPAIC/",
      "Issue Tracker": "https://github.com/ZhejianglabNCRC/SPAIC/issues",
      "Source Code": "https://github.com/ZhejianglabNCRC/SPAIC"
    },
    "release_url": "https://pypi.org/project/SPAIC/0.6.1.0.0/",
    "requires_dist": [
      "torch (>=1.5.0)",
      "matplotlib",
      "numpy",
      "tqdm",
      "scipy",
      "pyyaml",
      "h5py"
    ],
    "requires_python": ">=3.6",
    "summary": "The spaic platform simulation training platform is a network construction, forward simulation and learning training platform developed for spiking neural networks.",
    "version": "0.6.1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16046454,
  "releases": {
    "0.6.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09b651e43f7970434cc0ebd8f5f02596c35a6158c2912d1df6e2a158f2aa1d8",
          "md5": "a089a4e7860f01b39040e179d19280c3",
          "sha256": "10d1f1330358d3ea958c95d181ed94a8952e455c42e9d1a951676b9d1df4ef1c"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a089a4e7860f01b39040e179d19280c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 166092,
        "upload_time": "2022-12-02T08:16:04",
        "upload_time_iso_8601": "2022-12-02T08:16:04.576214Z",
        "url": "https://files.pythonhosted.org/packages/e0/9b/651e43f7970434cc0ebd8f5f02596c35a6158c2912d1df6e2a158f2aa1d8/SPAIC-0.6.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a7ed7c4c5040c4791838c93f980b47a89bde9ceb0dce0002a7dfa1cca4f26a4",
          "md5": "81c16d90e91286d9e5e857a431a390af",
          "sha256": "85e475ce696d653e09f698897a9e4e2471c1e591424ee6bb8f4f98ec6f37f1e8"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "81c16d90e91286d9e5e857a431a390af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141134,
        "upload_time": "2022-12-02T08:16:06",
        "upload_time_iso_8601": "2022-12-02T08:16:06.780232Z",
        "url": "https://files.pythonhosted.org/packages/8a/7e/d7c4c5040c4791838c93f980b47a89bde9ceb0dce0002a7dfa1cca4f26a4/SPAIC-0.6.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "483fd9c086506f34933783dec706469708fdf08f1acaf2f2fc2de3c793a57ac3",
          "md5": "969382122ba9b89360672c842b253545",
          "sha256": "0806cb9125e8348143dc9aaab706a4700fbc11a54c11d4a8a5935d46c2616cad"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "969382122ba9b89360672c842b253545",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 169784,
        "upload_time": "2022-12-09T10:33:40",
        "upload_time_iso_8601": "2022-12-09T10:33:40.682233Z",
        "url": "https://files.pythonhosted.org/packages/48/3f/d9c086506f34933783dec706469708fdf08f1acaf2f2fc2de3c793a57ac3/SPAIC-0.6.1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697f2c0c053221d721265bf5e6390aac0d337c2a167dedb64c6c988881dbbd78",
          "md5": "4b8ac6901547b336c2c86424b150ad82",
          "sha256": "e9529745bca54d67bedfabf3d8689d71f08c03036ba18c50030b404b8e7e9306"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b8ac6901547b336c2c86424b150ad82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 144044,
        "upload_time": "2022-12-09T10:33:42",
        "upload_time_iso_8601": "2022-12-09T10:33:42.869559Z",
        "url": "https://files.pythonhosted.org/packages/69/7f/2c0c053221d721265bf5e6390aac0d337c2a167dedb64c6c988881dbbd78/SPAIC-0.6.1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81b47ba86361792b34d9f1c3b7dd48c2d5c3f7318b1c8fb37525e8bff9ef124f",
          "md5": "5b958e50698fa8e39d5505ced8f3fc2b",
          "sha256": "ebdb489fa00e841049ab7b21d3bf5e43a0ca223731fbbbe66d38dea1d231503c"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b958e50698fa8e39d5505ced8f3fc2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 169762,
        "upload_time": "2022-12-09T08:09:00",
        "upload_time_iso_8601": "2022-12-09T08:09:00.623877Z",
        "url": "https://files.pythonhosted.org/packages/81/b4/7ba86361792b34d9f1c3b7dd48c2d5c3f7318b1c8fb37525e8bff9ef124f/SPAIC-0.6.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6679236f185871a16aff11e0b20c54de6791335031f09edcf8496c2f3a4dc96d",
          "md5": "c40c59a70f0569701f9a2c9c919ef3f9",
          "sha256": "683cfd4c0098be48f3f3d34288381d9f6c7efe6498eeb01301415b18b8d66061"
        },
        "downloads": -1,
        "filename": "SPAIC-0.6.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "c40c59a70f0569701f9a2c9c919ef3f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 143973,
        "upload_time": "2022-12-09T08:09:02",
        "upload_time_iso_8601": "2022-12-09T08:09:02.834225Z",
        "url": "https://files.pythonhosted.org/packages/66/79/236f185871a16aff11e0b20c54de6791335031f09edcf8496c2f3a4dc96d/SPAIC-0.6.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "483fd9c086506f34933783dec706469708fdf08f1acaf2f2fc2de3c793a57ac3",
        "md5": "969382122ba9b89360672c842b253545",
        "sha256": "0806cb9125e8348143dc9aaab706a4700fbc11a54c11d4a8a5935d46c2616cad"
      },
      "downloads": -1,
      "filename": "SPAIC-0.6.1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "969382122ba9b89360672c842b253545",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 169784,
      "upload_time": "2022-12-09T10:33:40",
      "upload_time_iso_8601": "2022-12-09T10:33:40.682233Z",
      "url": "https://files.pythonhosted.org/packages/48/3f/d9c086506f34933783dec706469708fdf08f1acaf2f2fc2de3c793a57ac3/SPAIC-0.6.1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "697f2c0c053221d721265bf5e6390aac0d337c2a167dedb64c6c988881dbbd78",
        "md5": "4b8ac6901547b336c2c86424b150ad82",
        "sha256": "e9529745bca54d67bedfabf3d8689d71f08c03036ba18c50030b404b8e7e9306"
      },
      "downloads": -1,
      "filename": "SPAIC-0.6.1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b8ac6901547b336c2c86424b150ad82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 144044,
      "upload_time": "2022-12-09T10:33:42",
      "upload_time_iso_8601": "2022-12-09T10:33:42.869559Z",
      "url": "https://files.pythonhosted.org/packages/69/7f/2c0c053221d721265bf5e6390aac0d337c2a167dedb64c6c988881dbbd78/SPAIC-0.6.1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}