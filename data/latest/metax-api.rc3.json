{
  "info": {
    "author": "",
    "author_email": "Mikhayil Martirosyan <mikhayil.martirosyan@realschool.am>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Leviathan Metax python3 API v2.0 \n\n## API\n\n### module structure\n\n```\nmetax/\n├── api.py\n├── db\n│    ├── __main__.py\n│    ├── __init__.py\n│    ├── friends.py\n│    ├── get.py\n│    ├── delete.py\n│    ├── keys.py\n│    ├── listener.py\n│    ├── copy.py\n│    ├── metax_base.py\n│    ├── metax_info.py\n│    ├── pair.py\n│    ├── peers.py\n│    ├── save.py\n│    ├── send_to.py\n│    ├── share.py\n│    └── update.py\n│\n├── __main__.py\n├── __init__.py\n├── errors.py\n├── request.py\n├── requirements.txt\n└── types.py\n```\n\n### Methods\n* is valid uuid        - `metax.db.metax_base:Base::is_valid_uuid`\n* validate             - `metax.db.metax_base:Base::validate`\n* copy                 - `metax.db.copy:Copy::copy`\n* delete               - `metax.db.delete:Delete::delete`\n* add friend           - `metax.db.friends:Friends::add_friend`\n* get friend list      - `metax.db.copy:Friends::get_friends_list`\n* get                  - `metax.db.get:Get::get`\n* get user keys        - `metax.db.keys:Keys::get_user_keys`\n* get user public key  - `metax.db.keys:Keys::get_user_public_key`\n* regenerate user key  - `metax.db.keys:Keys::regenerate_user_key`\n* regiseter listeners  - `metax.db.listeners:Listeners::register_listener`\n* unregister listeners - `metax.db.listeners:Listeners::unregister_listener`\n* listeners            - `metax.db.listeners:Listeners::listeners`\n* set metax info       - `metax.db.metax_info:MetaxInfo::set_metax_info`\n* get metax info       - `metax.db.metax_info:MetaxInfo::get_metax_info`\n* dump user info       - `metax.db.metax_info:MetaxInfo::dump_user_info`\n* start_pairing        - `metax.db.pair:Pair::start_pairing`\n* cancel_pairing       - `metax.db.pair:Pair::cancel_pairing`\n* get pairing peers    - `metax.db.pair:Pair::get_pairing_peers`\n* peers                - `metax.db.peers:Peers::peers`\n* reconnect_to_peers   - `metax.db.peers:Peers::reconnect_to_peers`\n* save                 - `metax.db.save:Save:save`\n* send to              - `metax.db.send_to:SendTo::send_to`\n* share                - `metax.db.share.Share::share`\n* accept_share         - `metax.db.share.Share::accept_share`\n* update               - `metax.db.update:Update::update`\n* metax                - `metax.api.metax` - `metax::Metax`\n* crud                 - `metax.api.crud` - `metax::CRUD`\n\n### Statements\n* NODE         - `metax.types.NODE`\n* FORM         - `metax.types.FORM`\n* EXPIRE       - `metax.types.EXPIRE`\n* ENCRYPT      - `metax.types.ENCRYPT`\n* ENCRYPTED    - `metax.types.ENCRYPTED`\n* NO_ENCRYPTED - `metax.types.NO_ENCRYPTED`\n* SECURE       - `metax.types.SECURE`\n* NO_SECURE    - `metax.types.NO_SECURE`\n* GET          - `metax.types.GET`\n* POST         - `metax.types.POST`\n* UPDATE       - `metax.types.UPDATE`\n* DELETE       - `metax.types.DELETE`\n* ANY          - `metax.types.ANY`\n\n\n### Return Types\n---\n1. Event - `metax.db.listeners:Event`:\n\t1. Statements:\n\t\t1. type   - **str** - event type\n\t\t2. target - **str** - file listener uuid in other events is a none\n\t\t3. event  - **str** - raw event received from server\n\t2. Methods:\n\t\t1. This Class Without any method\n\n---\n2. Response - `metax.request:Response`:\n\t1. Statements:\n\t\t1. status        - **int** - Status code of request\n\t\t2. data          - **byte** - response from server\n\t\t3. as_string     - **str** - unicode decoded data response from server\n\t\t4. success       - **bool** - return true if request is success\n\t\t5. raw           - **get** - resuqest/response data\n\t2. Methods:\n\t\t1. json          - `return dict object of response content`\n\t\t2. text          - `return the string object od response content`\n\n\n### Usage\n---\n#### `is_valid_uuid: `\n\n```python\nfrom metax.db.metax_base import Base # all other reqest types extend Base class methods and statements\nfrom metax.types import NO_SECURE\n\nbase = Base('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"  # valid uuid\nuuid2 = \"066177b7-58ef-4371-8784-6aaf2fe3802c0\" # length of last segment is large than must\n\nprint( base.is_valid_uuid(uuid) ) # true\nprint( base.is_valid_uuid(uuid2) ) # false\n```\n#### `validate: `\n\n```python\nfrom metax.db.metax_base import Base # all other reqest types extend Base class methods and statements\nfrom metax.types import NO_SECURE\n\nbase = Base('localhost', 8001, NO_SECURE)\n\nresp1  = \"{\\\"uuid\\\":\\\"066177b7-58ef-4371-8784-6af2fe3802c0\\\"}\"  # valid response\nresp2  = \"{\\\"error\\\":\\\"Getting file failed\\\"}\" # invalid response\n\nprint( base.is_valid_uuid(resp1) ) # Nothing\nprint( base.is_valid_uuid(resp2) ) # Error type` metax.errors.GettingFileFiledError\n```\n#### `copy: `\n\n```python\nfrom metax.db.copy import Copy\nfrom metax.types import NO_SECURE\n\nbase = Copy('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"  # valid uuid\n\nprint( base.copy(uuid) ) # return a new uuid or error\n```\n#### `delete: `\n\n```python\nfrom metax.db.delete import Delete\nfrom metax.types import NO_SECURE\n\nbase = Delete('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"  # valid uuid\n\nprint( base.delete(uuid) ) # return deleted uuid or error\n```\n#### `add friend: `\n\n```python\nfrom metax.db.friends import Friends\nfrom metax.types import NO_SECURE\n\nbase = Friends('localhost', 8001, NO_SECURE)\n\nfriend_key = \"PUBLIC_RSA_KEY\"\n\nprint( base.add_friend(friend_key) )\n```\n#### `get friend list: `\n\n```python\nfrom metax.db.friends import Friends\nfrom metax.types import NO_SECURE\n\nbase = Friends('localhost', 8001, NO_SECURE)\n\nprint( base.get_friends_list() )\n```\n#### `get: `\n\n```python\nfrom metax.db.get import Get\nfrom metax.types import NO_SECURE\n\nbase = Get('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"  # valid uuid\n\nprint( base.get(uuid) )\n```\n#### `get user key: `\n\n```python\nfrom metax.db.keys import Keys\nfrom metax.types import NO_SECURE\n\nbase = Keys('localhost', 8001, NO_SECURE)\n\nprint( base.get_user_keys() )\n```\n#### `get user public key: `\n\n```python\nfrom metax.db.keys import Keys\nfrom metax.types import NO_SECURE\n\nbase = Keys('localhost', 8001, NO_SECURE)\n\nprint( base.get_user_public_key() )\n```\n#### `regenerate user key: `\n\n```python\nfrom metax.db.keys import Keys\nfrom metax.types import NO_SECURE\n\nbase = Keys('localhost', 8001, NO_SECURE)\n\nprint( base.regenerate_user_key() )\n```\n#### `regiseter listeners: `\n\n```python\nfrom metax.db.listeners import Listeners\nfrom metax.types import NO_SECURE\n\ndef cb(event):\n\tprint(event.type)\n\nbase = Listeners('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"\n\nprint( base.register_listener(uuid, cb) )\n```\n#### `set metax info: `\n\n```python\nfrom metax.db.metax_info import MetaxInfo\nfrom metax.types import NO_SECURE\n\nbase = MetaxInfo('localhost', 8001, NO_SECURE)\n\nuuid  = \"066177b7-58ef-4371-8784-6af2fe3802c0\"\n\nprint( base.set_metax_info(uuid) )\n```\n#### `get metax info: `\n\n```python\nfrom metax.db.metax_info import MetaxInfo\nfrom metax.types import NO_SECURE\n\nbase = MetaxInfo('localhost', 8001, NO_SECURE)\n\nprint( base.get_metax_info() )\n```\n#### `dump user info: `\n\n```python\nfrom metax.db.metax_info import MetaxInfo\nfrom metax.types import NO_SECURE\n\nbase = MetaxInfo('localhost', 8001, NO_SECURE)\n\nprint( base.dump_user_info() )\n```\n#### `start pairing: `\n\n```python\nfrom metax.db.pair import Pair\nfrom metax.types import NO_SECURE\n\nbase = Pair('localhost', 8001, NO_SECURE)\n\nprint( base.start_pairing(timeout=5) )\n```\n#### `cancel pairing: `\n\n```python\nfrom metax.db.pair import Pair\nfrom metax.types import NO_SECURE\n\nbase = Pair('localhost', 8001, NO_SECURE)\n\nprint( base.cancel_pairing() )\n```\n#### `get pairing peers: `\n\n```python\nfrom metax.db.pair import Pair\nfrom metax.types import NO_SECURE\n\nbase = Pair('localhost', 8001, NO_SECURE)\n\nprint( base.get_pairing_peers() )\n```\n#### `peers: `\n\n```python\nfrom metax.db.peers import Peers\nfrom metax.types import NO_SECURE\n\nbase = Peers('localhost', 8001, NO_SECURE)\n\nprint( base.peers() )\n```\n#### `reconnect to peers: `\n\n```python\nfrom metax.db.peers import Peers\nfrom metax.types import NO_SECURE\n\nbase = Peers('localhost', 8001, NO_SECURE)\n\nprint( base.reconnect_to_peers() )\n```\n#### `save: `\n\n```python\nfrom metax.db.save import Save\nfrom metax.types import NO_SECURE\n\nbase = Save('localhost', 8001, NO_SECURE)\n\nprint( base.save(\"data ot nothing to create empty file\") )\n```\n#### `send to: `\n\n```python\nfrom metax.db.send_to import SendTo\nfrom metax.types import NO_SECURE\n\nbase = SendTo('localhost', 8001, NO_SECURE)\n\nprint( base.send_to(\"PUBLIC_KEY\", \"DATA TO SEND\") )\n```\n#### `share: `\n\n```python\nfrom metax.db.share import Share\nfrom metax.types import NO_SECURE\n\nbase = Share('localhost', 8001, NO_SECURE)\n\nprint( base.send_to(\"UUID\", \"PUBLIC_KEY\") )\n```\n#### `accept share: `\n\n```python\nfrom metax.db.share import Share\nfrom metax.types import NO_SECURE\n\nbase = Share('localhost', 8001, NO_SECURE)\n\nprint( base.accept_share(\"UUID\", \"PUBLIC_KEY\", \"IV\") )\n```\n#### `update: `\n\n```python\nfrom metax.db.update import Update\nfrom metax.types import NO_SECURE\n\nbase = Update('localhost', 8001, NO_SECURE)\n\nprint( base.update(\"UUID\", \"New Content\") )\n```\n#### `Metax: `\n\n```python\nfrom metax import Metax\nfrom metax.types import NO_SECURE\n\nbase = Metax('localhost', 8001, NO_SECURE)\n\nprint( base.save(\"Data\") ) # new file uuid\nprint( base.update(\"UUID\", \"New Content\").success)\nprint( base.get(\"UUID\") ) # resposne\n\n# Metax class Extend all classes for request to metax web api\n```\n#### `CRUD: `\n\n```python\nfrom metax import CRUD\nfrom metax.types import NO_SECURE\n\nbase = CRUD('localhost', 8001, NO_SECURE)\n\nprint( base.save(\"Data\") ) # new file uuid\nprint( base.update(\"UUID\", \"New Content\").success)\nprint( base.get(\"UUID\") ) # resposne\nprint( base.delete(\"UUID\") ) # resposne\n\n# CRUD class extends only (C)reate (R)ead (D)elete (U)pdate requests to metax web api\n```\n\n## Requirements\n\n1. Python 3.7+\n2. Pip Packages\n\t1. requests\n\t2. websocket-client\n\t3. commands to install all in ubuntu:\n\t\t1. sudo apt install python3 python3-dev python3-pip\n\t\t2. python3 -m pip install requirements.txt # or\n\t\t3. python3 -m pip install requests websocket-client==0.37.0\n\n## Other\n\n### Definition 'headers'\n---\n#### Copy\n```python\nclass Copy(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef copy(self, uuid:str, **query_params:dict) -> Response:...\n```\n#### Delete\n```python\nclass Delete(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef delete(self, uuid:str, **query_params:dict) -> Response:...\n```\n#### Friends\n```python\nclass Friends(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef add_friend(self, key:str, username:str, **query_params:dict) -> Response:...\n\n\tdef get_friends_list(self, **query_params:dict) -> Response:...\n```\n#### Get\n```python\nclass Get(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef get(self, uuid:str, **query_params:dict) -> Response:...\n```\n#### Keys\n```python\nclass Keys(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef get_user_keys(self, **query_params:dict) -> Response:...\n\n\tdef get_user_public_key(self, **query_params:dict) -> Response:...\n\n\tdef regenerate_user_key(self, **query_params:dict) -> Response:...\n```\n#### Listeners\n```python\nclass Listener(Base):\n\t__listeners = []\n\tany_event = lambda *a, **k:...\n\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef listeners(self) -> list:...\n\n\tdef register_listener(self, uuid:str, callback:callable, type_:str=ANY,  **query_params:dict) -> Response:...\n\n\tdef unregister_listener(self, uuid:str, **query_params:dict) -> Response:...\n\n\tdef init_registers(self, *args:list, **kwargs:dict) -> None:\n\n\tdef event(self, response:self) -> None:...\n\n\tdef on_ws_message(self, socket:WebSocketApp, message:str) -> None:...\n```\n#### Base\n```python\nclass Base:\n\tdef __init__(self, host:str, port:int, secure:bool=False):...\n\n\tdef validate(self, response:Response) -> None:...\n\n\tdef is_valid_uuid(self, uuid:str) -> bool:...\n```\n#### Metax Info\n```python\nclass MetaxInfo(Base):\n\tdef __init__(self, *args:list, **kwargs:dict) :...\n\n\tdef set_metax_info(self, uuid:str, **query_params:dict) -> Response:...\n\n\tdef get_metax_info(self, **query_params:dict) -> Response:...\n\n\tdef dump_user_info(self, **query_params:dict) -> Response:...\n```\n#### Pair\n```python\nclass Pair(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef start_pairing(self, timeout:int, **query_params:dict) -> Response:...\n\n\tdef cancel_pairing(self, **query_params:dict) -> Response:...\n\n\tdef get_pairing_peers(self, **query_params:dict) -> Response:...\n```\n#### Peers\n```python\nclass Peers(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef peers(self, **query_params:dict) -> Response:...\n\n\tdef reconnect_to_peers(self, **query_params:dict) -> Response:...\n```\n#### Save \n```python\nclass Save(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef save(self, data:str='', type:str=NODE, **query_params:dict) -> Response:...\n```\n#### SendTo\n```python\nclass SendTo(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef send_to(self, key:str, data:str, **query_params:dict) -> Response:...\n```\n#### Share\n```python\nclass Share(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef share(self, uuid:str, key:str, **query_params:dict) -> Response:...\n\n\tdef accept_share(self, uuid:str, key:str, iv:str, **query_params:dict) -> Response:...\n```\n#### Update\n```python\nclass Update(Base):\n\tdef __init__(self, *args, **kwargs):...\n\n\tdef update(self, uuid:str, data:str, type:str=NODE, **query_params:dict) -> Response:...\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Metax,Leviathan,Ehayq,EhayqLLC,Instigate,Metax.api",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metax-api",
    "package_url": "https://pypi.org/project/metax-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/metax-api/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/mm_arm/metax.api/issues",
      "Homepage": "https://gitlab.com/mm_arm/metax.api"
    },
    "release_url": "https://pypi.org/project/metax-api/0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Pyhton3 api client for metax",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14588453,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31cd7a8bec7b19959b7f742918fcc65ada5080e3009db5851e58b4ceea7d951f",
          "md5": "5579f00c652d91291abd407074f883cc",
          "sha256": "e50c8d6eb478534d47559518c4d4df6be1ddf2abe0b6debfec6ebfbf590fc3e0"
        },
        "downloads": -1,
        "filename": "metax_api-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5579f00c652d91291abd407074f883cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2189,
        "upload_time": "2022-07-29T08:40:06",
        "upload_time_iso_8601": "2022-07-29T08:40:06.817582Z",
        "url": "https://files.pythonhosted.org/packages/31/cd/7a8bec7b19959b7f742918fcc65ada5080e3009db5851e58b4ceea7d951f/metax_api-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04e14611ee6adcac5d6716545eaaf5a32f3cc70a7e9544e2a476e4372ccb1935",
          "md5": "fea8c9bce56317d068f60a6b751adce0",
          "sha256": "0b3cceaf5a316772b6ffea0f96d17c2bfb2fad6d3a26b355bad56f5016311064"
        },
        "downloads": -1,
        "filename": "metax_api-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fea8c9bce56317d068f60a6b751adce0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2180,
        "upload_time": "2022-07-29T08:43:36",
        "upload_time_iso_8601": "2022-07-29T08:43:36.976953Z",
        "url": "https://files.pythonhosted.org/packages/04/e1/4611ee6adcac5d6716545eaaf5a32f3cc70a7e9544e2a476e4372ccb1935/metax_api-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c3100f20dce0588a38949a6bd34e189770461fd6a8a5a246f27a061c6aa8a7",
          "md5": "1b587cc45465b84bc9b18b4c01b4fd52",
          "sha256": "ddc08e1850dfa0d4f2e5e89ccd25f12c5508957e8d73b7020c783bb4a5797815"
        },
        "downloads": -1,
        "filename": "metax_api-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b587cc45465b84bc9b18b4c01b4fd52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15420,
        "upload_time": "2022-07-29T09:10:28",
        "upload_time_iso_8601": "2022-07-29T09:10:28.600534Z",
        "url": "https://files.pythonhosted.org/packages/79/c3/100f20dce0588a38949a6bd34e189770461fd6a8a5a246f27a061c6aa8a7/metax_api-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94c810078c7efe2dedf7075845ce66d51668326bb7d601f4078a2eac77a6e53d",
          "md5": "4da22ce9f6aca382031429024fa96329",
          "sha256": "853f2ee1ca4da5c6edddc649e329a0047ba29282bd38f179f3e1551b32063536"
        },
        "downloads": -1,
        "filename": "metax_api-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4da22ce9f6aca382031429024fa96329",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11222,
        "upload_time": "2022-07-29T09:10:31",
        "upload_time_iso_8601": "2022-07-29T09:10:31.179639Z",
        "url": "https://files.pythonhosted.org/packages/94/c8/10078c7efe2dedf7075845ce66d51668326bb7d601f4078a2eac77a6e53d/metax_api-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79c3100f20dce0588a38949a6bd34e189770461fd6a8a5a246f27a061c6aa8a7",
        "md5": "1b587cc45465b84bc9b18b4c01b4fd52",
        "sha256": "ddc08e1850dfa0d4f2e5e89ccd25f12c5508957e8d73b7020c783bb4a5797815"
      },
      "downloads": -1,
      "filename": "metax_api-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b587cc45465b84bc9b18b4c01b4fd52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15420,
      "upload_time": "2022-07-29T09:10:28",
      "upload_time_iso_8601": "2022-07-29T09:10:28.600534Z",
      "url": "https://files.pythonhosted.org/packages/79/c3/100f20dce0588a38949a6bd34e189770461fd6a8a5a246f27a061c6aa8a7/metax_api-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94c810078c7efe2dedf7075845ce66d51668326bb7d601f4078a2eac77a6e53d",
        "md5": "4da22ce9f6aca382031429024fa96329",
        "sha256": "853f2ee1ca4da5c6edddc649e329a0047ba29282bd38f179f3e1551b32063536"
      },
      "downloads": -1,
      "filename": "metax_api-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4da22ce9f6aca382031429024fa96329",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11222,
      "upload_time": "2022-07-29T09:10:31",
      "upload_time_iso_8601": "2022-07-29T09:10:31.179639Z",
      "url": "https://files.pythonhosted.org/packages/94/c8/10078c7efe2dedf7075845ce66d51668326bb7d601f4078a2eac77a6e53d/metax_api-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}