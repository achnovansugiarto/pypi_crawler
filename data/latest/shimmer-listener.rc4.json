{
  "info": {
    "author": "Gianmarco Marcello",
    "author_email": "g.marcello@antima.it",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# shimmer-listener\n\nThis is a project that started from the idea of having a general library that interacted with shimmer apps for tinyos, \ninspired from the python demo scripts that can be found inside the sub-directories of the \n[tinyos shimmer apps repository](https://github.com/ShimmerResearch/tinyos-shimmer).\n\n## Contents\n\n- [shimmer-listener](#shimmer-listener)\n  - [Contents](#contents)\n  - [About](#about)\n    - [Presentation protocol](#presentation-protocol)\n  - [Installation](#installation)\n    - [Windows](#windows)\n    - [Debian-like](#debian-like)\n  - [Usage](#usage)\n    - [Documentation](#documentation)\n    - [Bt Master example](#bt-master-example)\n    - [Callbacks](#callbacks)\n  - [Console Scripts](#console-scripts)\n    - [shimmer-printer](#shimmer-printer)\n    - [shimmer-btslave](#shimmer-btslave)\n\n  \n## About\n\nThis library allows you to connect to a Shimmer2 mote via Bluetooth both in Master and Slave mode, interacting with it \nvia the shimmer-apps precedently introduced (even if it's possible to create custom interactions).\n\nFor now, there's only support for the BluetoothMasterTest app for Master-mode motes. For what concerns Slave-mode motes, \na small initialization protocol (the **presentation** protocol) is used to let the master node know about the data format \nused by the mote.\n\nThe received data can be handled via a data processing function that has to be passed at init time, where you define \nwhat to do with each instance of incoming data (more on this in the example below).\n\n### Presentation protocol\n\nThe presentation protocol is just a small protocol through which a BT Slave Shimmer describes the data frames that \nare to be expected when a BT Master initiates a connection. Its structure is the following:\n\n```c\n#define MAX_FMT_LEN 10\n#define MAX_STR_LEN 10\n#define MAX_KEY_NUM 10\n\ntypedef char key_string[MAX_STR_LEN];\n\ntypedef struct {\n    uint8_t framesize;\n    uint8_t chunklen;\n    char format[MAX_FMT_LEN];\n    key_string keys[MAX_KEY_NUM];\n} frameinfo;\n```\n\nTo let your nesC app implement this protocol, just copy this C snippet into a header file or directly into the \nnesC app implementation, create an instance of frameinfo containing your metadata and send it as the first Bluetooth \nmessage (in Bluetooth.connectionMade).\n\nThe struct fields refer to:\n\n- **framesize**, the size of a single frame, meaning the buffer size that you periodically forward to the BT Master.\n- **chunklen**, the size of one chunk of the frame, a contiguous unit of related data packed into the frame.\n- **format**, the format of the data packed into the chunk, this refers to the [python 3 struct library format](https://docs.python.org/3/library/struct.html#format-characters).\n- **keys**, a list of keys describing each sensed data packed into a chunk.\n\n**e.g.**\n\nA Shimmer2r streaming accelerometer + battery data, packs the data as four 16 bit instances in an 8 B chunk. A full \nbuffer is 120 B wide, containing a total of 15 8 B chunks.\n\nThen we'll have:\n\n- framesize = 120 B\n- chunklen = 8 B\n- format = \"hhhh\" (h = short int aka 2 B integer in python struct terms)\n- keys = {\"accel_x\", \"accel_y\", \"accel_z\", \"batt\"}\n\n## Installation\n\nIf you have any problems installing or building a version of pybluez for your target platform, I have a repository hosting some pre-compiled wheels for different python version and platforms, [you can find the wheels here](https://github.com/Abathargh/pybluez-wheels/).\n\n### Windows\n\nYou need to have Microsoft Visual C++ installed in order to build a wheel for pybluez during the installation process.\n\nGet [Visual Studio Installer](https://visualstudio.microsoft.com/it/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16) here, go to Workloads and install the whole Build Tools for C++ suite, which is the first option in the top left corner.\n\nThen, you can just:\n```bash\npip install .\n```\n\n**IMPORTANT**\n\nDuring testing on Win10 with Python 3.7 and 3.8, using pybluez 0.23, strange runtime errors (OSError) started popping out. For now, if this happens, the only thing that seems to work 100% of the times is installing by cloning the repository and using the setup.py script as suggested by @demanbart in [this comment](https://github.com/pybluez/pybluez/issues/180#issuecomment-397547920):\n\n```bash\ngit clone https://github.com/pybluez/pybluez\ncd pybluez\npython setup.py install\n```\n\n### Debian-like\n\n**N.B. Ubuntu for Raspberry Pi**\n\nWhen trying to make the library work on Ubuntu 20.10 for Raspberry Pi, \nyou should just install the following package:\n\n```bash\nsudo apt install pi-bluetooth\n```\n\nThis was tested using a Rpi 4.\n\n**Other Debian-like**\n\nThe library uses pybluez, so you will probably have to install **libbluetooth-dev** and **bluez**.\nOn debian-like:\n\n```bash\nsudo apt install libbluetooth-dev bluez\n```\n\nClone the repo or download a pre-built wheel from the release section, then:\n\n```bash\npip install . # if you cloned the repo\npip install <wheel-name>.whl # if you downloaded the wheel\n```\n\n\nIn order to run the program you have to set bluez to run in compatibility mode, add your user to the bluetooth \ngroup and modify some other setting. I put everything in the set_bt.sh script so that you can just execute:\n\n```bash\nchmod +x setup_bt.sh\nsudo ./setup_bt.sh\n```\n\nThe script is based on the instructions contained in these two stackoverflow responses, and the full credit\nfor it goes to the authors of these answers. If something is not working, I advise you to directly \nrefer to these two links.\n\n- [Compatibility mode](https://stackoverflow.com/a/46810116)\n- [Setting permissions](https://stackoverflow.com/a/42306883)\n\n\n## Usage\n\nIf you are on a debian-like system, your machine will be discoverable in the bluetooth \nnetwork by using:\n\n```bash\nsudo hciconfig hci0 piscan\n```\n\n### Documentation\n\nFull documentation is accessible at https://abathargh.github.io/shimmer-listener.\n\n### Bt Master example\n\nThis is an example of the simplest application that just prints the incoming data instances in Master Mode, with \na slave mote that runs its app that implements the shimmer-listener presentation protocol:\n\n```python\nfrom shimmer_listener import bt_init, bt_listen, bt_close, BtMode\n\ndef process_data(mac, data):\n    print(f\"Data from {mac}: {data}\")\n\nbt_init(mode=BtMode.MASTER)\n\ntry:\n    bt_listen(message_handle=process_data)\nexcept KeyboardInterrupt:\n    bt_close()\n```\n\nYou can take a look at the **Examples** directory and at the **_console_scripts** module for some practical examples.\n\n### Callbacks\n\nA series of callbacks can be used and set as properties to intercept certain events:\n\n- **on_connect(mac: str, info: frameinfo) -> None**\n  \n    Called when a mote identified by **mac** succesfully connects. All the information\n    regarding the exchanged data format, obtained through *the presentation protocol* are\n    accessible via **info**.\n\n- **on_message(mac: str, frame: Dict[str, Any]) -> None**\n  \n    Called when a message is received from a mote identified by **mac**. The message is\n    returned as a dict with the keys previously obtained from the *presentation protocol*.\n\n- **on_disconnect(mac: str, lost: bool) -> None**\n  \n    Called when a mote identified by **mac** disconnects. If **lost** is true, the disconnect\n    event happened because the connection has been lost.\n\n```python\nfrom shimmer_listener import bt_init, bt_listen, BtMode\n\ndef on_connect(mac, info):\n    print(f\"BT MAC {mac}: received presentation frame, {info}\")\n\ndef on_disconnect(mac, lost):\n    if lost:\n        print(f\"BT MAC {mac}: connection lost\")\n    else:\n        print(f\"BT MAC {mac}: disconnecting\")\n\ndef on_message(mac, data):\n    print(f\"BT MAC {mac}: got {data}\")\n\nbt_init(mode=BtMode.MASTER)\nbt_listen(connect_handle=on_connect, message_handle=on_message,\n          disconnect_handle=on_disconnect)\n```\n\n## Console Scripts\n\nThe following executable applications are shipped with the library and can be used once you install it.\n\n### shimmer-printer\n\nThis is am executable that can be used to quickly check if your devices successfully work with the app. It just prints \nevery data frame it receives.\n\n```bash\nshimmer-printer\n```\n\n### shimmer-btslave\n\nA simple application encapsulating the original example of the btMasterTest TinyOS app. By using it, \nyou start an app as a slave device connecting to the shimmer (in this case, the BT Master).\n\n```bash\nshimmer-btslave\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPLv2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shimmer-listener",
    "package_url": "https://pypi.org/project/shimmer-listener/",
    "platform": "",
    "project_url": "https://pypi.org/project/shimmer-listener/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/shimmer-listener/0.4.0/",
    "requires_dist": [
      "pybluez"
    ],
    "requires_python": ">=3.6",
    "summary": "A library to process bluetooth data from a shimmer2 runnning tinyos",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11389174,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5d32147b507c3f95cba0595d5ccc6439517e29d6ea1a1e0e14617111a19e75e",
          "md5": "ce7e73abc0e8a529a44a8656a18c2b75",
          "sha256": "67e82ddc973f74b6ea725733f317ea2bbd6f4dc0feebe452b737971a56a7bb4f"
        },
        "downloads": -1,
        "filename": "shimmer_listener-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce7e73abc0e8a529a44a8656a18c2b75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 15978,
        "upload_time": "2021-08-19T15:51:35",
        "upload_time_iso_8601": "2021-08-19T15:51:35.994792Z",
        "url": "https://files.pythonhosted.org/packages/f5/d3/2147b507c3f95cba0595d5ccc6439517e29d6ea1a1e0e14617111a19e75e/shimmer_listener-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aa477b5f3d0e51372e4c23080f2e7a584fa6903906df2c315249a6d5aa347bf",
          "md5": "19067873349e314584a7de562c4e49ec",
          "sha256": "6bb551bd3dc8c0e39072954fbfc6f82c137c55199a62fa7b374e27b77a99edd4"
        },
        "downloads": -1,
        "filename": "shimmer-listener-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19067873349e314584a7de562c4e49ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9679,
        "upload_time": "2021-08-19T15:51:40",
        "upload_time_iso_8601": "2021-08-19T15:51:40.363051Z",
        "url": "https://files.pythonhosted.org/packages/6a/a4/77b5f3d0e51372e4c23080f2e7a584fa6903906df2c315249a6d5aa347bf/shimmer-listener-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69290194983f7272c13a1e4f5c2f5fafc5b8673069c36959fdce3d08bcc19dd6",
          "md5": "8ab134ed5f3dbe6c52a5524412fada37",
          "sha256": "af003c5f1c87e6e847fe0f22e8a5f00c635ecd17781a6ec99c33c74b0f450263"
        },
        "downloads": -1,
        "filename": "shimmer_listener-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ab134ed5f3dbe6c52a5524412fada37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22889,
        "upload_time": "2021-08-19T15:51:38",
        "upload_time_iso_8601": "2021-08-19T15:51:38.403109Z",
        "url": "https://files.pythonhosted.org/packages/69/29/0194983f7272c13a1e4f5c2f5fafc5b8673069c36959fdce3d08bcc19dd6/shimmer_listener-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "718ac4e59ac93257120fee214444e7229bd04ec1f95ad53656c2ba7151f1cc5a",
          "md5": "abe458cd3b4a627517b36c6bb5295472",
          "sha256": "2e6af568dde9841f44746b34289c8bf8097feb3674bfe9f7b9bdaf1d6b48758f"
        },
        "downloads": -1,
        "filename": "shimmer-listener-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "abe458cd3b4a627517b36c6bb5295472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17365,
        "upload_time": "2021-08-19T15:51:42",
        "upload_time_iso_8601": "2021-08-19T15:51:42.006528Z",
        "url": "https://files.pythonhosted.org/packages/71/8a/c4e59ac93257120fee214444e7229bd04ec1f95ad53656c2ba7151f1cc5a/shimmer-listener-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a8d7192a888be1e2be7330e16284d91aa0261f4d4d96ae823b54d3c86ba0cac",
          "md5": "7351f8a32ac64326ae306d194390eccb",
          "sha256": "142d331bfe86fc2cd97ebe7d4fae96a2509569796d3e6d5dd7d0c2fd4556fca5"
        },
        "downloads": -1,
        "filename": "shimmer_listener-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7351f8a32ac64326ae306d194390eccb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26721,
        "upload_time": "2021-08-19T15:30:39",
        "upload_time_iso_8601": "2021-08-19T15:30:39.443614Z",
        "url": "https://files.pythonhosted.org/packages/1a/8d/7192a888be1e2be7330e16284d91aa0261f4d4d96ae823b54d3c86ba0cac/shimmer_listener-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae5818e1f75db980392b94defc70f8c5bac9f5ec81d00761b9164a449213327c",
          "md5": "63cd8a99e6d729937a9cbf6506774f57",
          "sha256": "d5f2cacb367112f881df2c4b95f4cb75d4fcf119a7174305388bf83342bfc11c"
        },
        "downloads": -1,
        "filename": "shimmer-listener-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "63cd8a99e6d729937a9cbf6506774f57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20258,
        "upload_time": "2021-08-19T15:30:42",
        "upload_time_iso_8601": "2021-08-19T15:30:42.348434Z",
        "url": "https://files.pythonhosted.org/packages/ae/58/18e1f75db980392b94defc70f8c5bac9f5ec81d00761b9164a449213327c/shimmer-listener-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e5029f5ed2fcd00a16eb3fb66d22b4355bafdd0661e72ca1cca975d55e51b1",
          "md5": "56810e1a893e2cc82c7a73c51b5550fd",
          "sha256": "bd1058291515c2cbba33ade0aac7b163fbdf6b41c29d9b453ce6d494d5150a32"
        },
        "downloads": -1,
        "filename": "shimmer_listener-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56810e1a893e2cc82c7a73c51b5550fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27389,
        "upload_time": "2021-09-07T21:49:44",
        "upload_time_iso_8601": "2021-09-07T21:49:44.290295Z",
        "url": "https://files.pythonhosted.org/packages/20/e5/029f5ed2fcd00a16eb3fb66d22b4355bafdd0661e72ca1cca975d55e51b1/shimmer_listener-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0780c6b532623bdb73b91220c4932c05f8d7e22b2fd9cae7ef08e9fc63fac4ce",
          "md5": "f021cd29962739a1654ec26aaa0b8e80",
          "sha256": "8fe2f45e356fef4a585592611f5c83ebf8902d5230f4c280378aed601d7cf01b"
        },
        "downloads": -1,
        "filename": "shimmer-listener-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f021cd29962739a1654ec26aaa0b8e80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20246,
        "upload_time": "2021-09-07T21:49:45",
        "upload_time_iso_8601": "2021-09-07T21:49:45.501704Z",
        "url": "https://files.pythonhosted.org/packages/07/80/c6b532623bdb73b91220c4932c05f8d7e22b2fd9cae7ef08e9fc63fac4ce/shimmer-listener-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20e5029f5ed2fcd00a16eb3fb66d22b4355bafdd0661e72ca1cca975d55e51b1",
        "md5": "56810e1a893e2cc82c7a73c51b5550fd",
        "sha256": "bd1058291515c2cbba33ade0aac7b163fbdf6b41c29d9b453ce6d494d5150a32"
      },
      "downloads": -1,
      "filename": "shimmer_listener-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56810e1a893e2cc82c7a73c51b5550fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27389,
      "upload_time": "2021-09-07T21:49:44",
      "upload_time_iso_8601": "2021-09-07T21:49:44.290295Z",
      "url": "https://files.pythonhosted.org/packages/20/e5/029f5ed2fcd00a16eb3fb66d22b4355bafdd0661e72ca1cca975d55e51b1/shimmer_listener-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0780c6b532623bdb73b91220c4932c05f8d7e22b2fd9cae7ef08e9fc63fac4ce",
        "md5": "f021cd29962739a1654ec26aaa0b8e80",
        "sha256": "8fe2f45e356fef4a585592611f5c83ebf8902d5230f4c280378aed601d7cf01b"
      },
      "downloads": -1,
      "filename": "shimmer-listener-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f021cd29962739a1654ec26aaa0b8e80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20246,
      "upload_time": "2021-09-07T21:49:45",
      "upload_time_iso_8601": "2021-09-07T21:49:45.501704Z",
      "url": "https://files.pythonhosted.org/packages/07/80/c6b532623bdb73b91220c4932c05f8d7e22b2fd9cae7ef08e9fc63fac4ce/shimmer-listener-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}