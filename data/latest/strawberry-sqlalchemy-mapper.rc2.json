{
  "info": {
    "author": "Expedock",
    "author_email": "rui@expedock.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# strawberry-sqlalchemy-mapper\n\n\nStrawberry-sqlalchemy-mapper is the simplest way to implement autogenerated strawberry types for columns and relationships in SQLAlchemy models.\n\n\n- Instead of manually listing every column and relationship in a SQLAlchemy model, strawberry-sqlalchemy-mapper\nlets you decorate a class declaration and it will automatically generate the necessary strawberry fields\nfor all columns and relationships (subject to the limitations below) in the given model.\n\n- Native support for most of SQLAlchemy's most common types.\n- Extensible to arbitrary custom SQLAlchemy types.\n- Automatic batching of queries, avoiding N+1 queries when getting relationships\n- Support for SQLAlchemy >=1.4.x\n- Lightweight and fast.\n\n## Getting Started\n\nstrawberry-sqlalchemy-mapper is available on [PyPi](https://pypi.org/project/strawberry-sqlalchemy-mapper/)\n\n```\npip install strawberry-sqlalchemy-mapper\n```\n\n\nFirst, define your sqlalchemy model:\n\n```python\n# models.py\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(UUID, primary_key=True)\n    name = Column(String, nullable=False)\n    password_hash = Column(String, nullable=False)\n    department_id = Column(UUID, ForeignKey('department.id'))\n    department = relationship('Department', back_populates='employees')\n\nclass Department(Base):\n    __tablename__ = \"department\"\n    id = Column(UUID, primary_key=True)\n    name = Column(String, nullable=False)\n    employees = relationship('Employee', back_populates='department')\n```\n\nNext, decorate a type with `strawberry_sqlalchemy_mapper.type()`\nto register it as a strawberry type for the given SQLAlchemy model.\nThis will automatically add fields for the model's columns, relationships, association proxies,\nand hybrid properties. For example:\n\n```python\n# elsewhere\n# ...\nfrom strawberry_sqlalchemy_mapper import StrawberrySQLAlchemyMapper\n\nstrawberry_sqlalchemy_mapper = StrawberrySQLAlchemyMapper()\n@strawberry_sqlalchemy_mapper.type(models.Employee)\nclass Employee:\n    __exclude__ = [\"password_hash\"]\n\n\n@strawberry_sqlalchemy_mapper.type(models.Department)\nclass Department:\n    pass\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def departments(self):\n        return db.session.scalars(select(models.Department)).all()\n\n\n# context is expected to have an instance of StrawberrySQLAlchemyLoader\nclass CustomGraphQLView(GraphQLView):\n    def get_context(self):\n        return {\n            \"sqlalchemy_loader\": StrawberrySQLAlchemyLoader(bind=YOUR_SESSION),\n        }\n\n# call finalize() before using the schema:\n# (note that models that are related to models that are in the schema\n# are automatically mapped at this stage -- e.g., Department is mapped\n# because employee.department is a relationshp to Department)\nstrawberry_sqlalchemy_mapper.finalize()\n# only needed if you have polymorphic types\nadditional_types = list(strawberry_sqlalchemy_mapper.mapped_types.values())\nschema = strawberry.Schema(\n    query=Query,\n    mutation=Mutation,\n    extensions=extensions,\n    types=additional_types,\n)\n\n# You can now query, e.g.:\n\"\"\"\nquery {\n    departments {\n        id\n        name\n        employees {\n            edge {\n                node {\n                    id\n                    name\n                    department {\n                        # Just an example of nested relationships\n                        id\n                        name\n                    }\n                }\n            }\n        }\n    }\n}\n\"\"\"\n```\n\n## Limitations\n\nSQLAlchemy Models -> Strawberry Types and Interfaces are expected to have a consistent\n(customizable) naming convention. These can be configured by passing `model_to_type_name`\nand `model_to_interface_name` when constructing the mapper.\n\nNatively supports the following SQLAlchemy types:\n\n```python\nInteger: int,\nFloat: float,\nBigInteger: int,\nNumeric: Decimal,\nDateTime: datetime,\nDate: date,\nTime: time,\nString: str,\nText: str,\nBoolean: bool,\nUnicode: str,\nUnicodeText: str,\nSmallInteger: int,\nSQLAlchemyUUID: uuid.UUID,\nVARCHAR: str,\nARRAY[T]: List[T] # PostgreSQL array\nEnum: (the Python enum it is mapped to, which should be @strawberry.enum-decorated)\n```\n\nAdditional types can be supported by passing `extra_sqlalchemy_type_to_strawberry_type_map`,\nalthough support for `TypeDecorator` types is untested.\n\nAssociation proxies are expected to be of the form `association_proxy('relationship1', 'relationship2')`,\ni.e., both properties are expected to be relationships.\n\nRoots of polymorphic hierarchies **are supported**, but are also expected to be registered via\n`strawberry_sqlalchemy_mapper.interface()`, and its concrete type and\nits descendants are expected to inherit from the interface:\n\n```python\nclass Book(Model):\n    id = Column(UUID, primary_key=True)\n\nclass Novel(Book):\n    pass\n\nclass ShortStory(Book):\n    pass\n\n\n# in another file\nstrawberry_sqlalchemy_mapper = StrawberrySQLAlchemyMapper()\n\n@strawberry_sqlalchemy_mapper.interface(models.Book)\nclass BookInterface:\n    pass\n\n@strawberry_sqlalchemy_mapper.type(models.Book)\nclass Book:\n    pass\n\n@strawberry_sqlalchemy_mapper.type(models.Novel)\nclass Novel:\n    pass\n\n@strawberry_sqlalchemy_mapper.type(models.ShortStory)\nclass ShortStory:\n    pass\n```\n\n## Contributing\n\nWe encourage you to contribute to strawberry-sqlalchemy-mapper! Any contributions you make are greatly appreciated.\n\nIf you have a suggestion that would make this better, please fork the repo and create a pull request. Don't forget to give the project a star! Thanks again!\n\n1. Fork the Project\n2. Create your Feature Branch (git checkout -b feature)\n3. Commit your Changes (git commit -m 'Add some feature')\n4. Push to the Branch (git push origin feature)\n5. Open a Pull Request\n\n\n### Prerequisites\n\nThis project uses `pre-commit`_, please make sure to install it before making any\nchanges::\n\n    pip install pre-commit\n    cd strawberry-sqlalchemy-mapper\n    pre-commit install\n\nIt is a good idea to update the hooks to the latest version::\n\n    pre-commit autoupdate\n\nDon't forget to tell your contributors to also install and use pre-commit.\n\n### Installation\n\n```bash\npip install -r requirements.txt\n```\n\n### Test\n\n```bash\npytest\n```\n\n## ⚖️ LICENSE\n\nMIT © [strawberry-sqlalchemy-mapper](LICENSE.txt)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/expedock/strawberry-sqlalchemy-mapper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strawberry-sqlalchemy-mapper",
    "package_url": "https://pypi.org/project/strawberry-sqlalchemy-mapper/",
    "platform": "any",
    "project_url": "https://pypi.org/project/strawberry-sqlalchemy-mapper/",
    "project_urls": {
      "Download": "https://pypi.org/project/strawberry-sqlalchemy-mapper/#files",
      "Homepage": "https://github.com/expedock/strawberry-sqlalchemy-mapper",
      "Source": "https://github.com/expedock/strawberry-sqlalchemy-mapper/"
    },
    "release_url": "https://pypi.org/project/strawberry-sqlalchemy-mapper/0.1.1/",
    "requires_dist": [
      "sentinel (==0.3.0)",
      "sqlalchemy (>=1.4)",
      "strawberry-graphql (>=0.95)",
      "importlib-metadata (==4.11.1)",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "The simplest way to implement autogenerated strawberry types for columns and relationships in SQLAlchemy models",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17060160,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b407d2e3c5680c460bc237e360e3bd79f144f6a4360b0bee4ab4645ecca23621",
          "md5": "61fa0cb0016a9ff3290c5032c1e1ea65",
          "sha256": "cf35299a768f68235b5b5ff2e5158b5f1d8cb0c326ab0824d3194652580b9061"
        },
        "downloads": -1,
        "filename": "strawberry-sqlalchemy-mapper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61fa0cb0016a9ff3290c5032c1e1ea65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13395,
        "upload_time": "2022-02-28T19:19:02",
        "upload_time_iso_8601": "2022-02-28T19:19:02.036277Z",
        "url": "https://files.pythonhosted.org/packages/b4/07/d2e3c5680c460bc237e360e3bd79f144f6a4360b0bee4ab4645ecca23621/strawberry-sqlalchemy-mapper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "332c51165cd805d8a3837ca8a30fd5f283f91a4b4109fe0af91074ad0876f788",
          "md5": "4f952e35c2d06e1092a75ec4b6d6ffbd",
          "sha256": "02aa4f41642c397925df28477c045133343874d19b53e6b2b44b394aeec6d99d"
        },
        "downloads": -1,
        "filename": "strawberry_sqlalchemy_mapper-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f952e35c2d06e1092a75ec4b6d6ffbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13180,
        "upload_time": "2023-02-27T06:26:28",
        "upload_time_iso_8601": "2023-02-27T06:26:28.766620Z",
        "url": "https://files.pythonhosted.org/packages/33/2c/51165cd805d8a3837ca8a30fd5f283f91a4b4109fe0af91074ad0876f788/strawberry_sqlalchemy_mapper-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5397887c90b5a8d86ab81134701d50e97a7c91830f392476a2ec44e2aa922daa",
          "md5": "8f605490628fed39b1c54c5b84beb239",
          "sha256": "c970ea126fbed0993936753df639057eb0eaaa761305065874dfcff20780d1d7"
        },
        "downloads": -1,
        "filename": "strawberry-sqlalchemy-mapper-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f605490628fed39b1c54c5b84beb239",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37064,
        "upload_time": "2023-02-27T06:26:31",
        "upload_time_iso_8601": "2023-02-27T06:26:31.614635Z",
        "url": "https://files.pythonhosted.org/packages/53/97/887c90b5a8d86ab81134701d50e97a7c91830f392476a2ec44e2aa922daa/strawberry-sqlalchemy-mapper-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "332c51165cd805d8a3837ca8a30fd5f283f91a4b4109fe0af91074ad0876f788",
        "md5": "4f952e35c2d06e1092a75ec4b6d6ffbd",
        "sha256": "02aa4f41642c397925df28477c045133343874d19b53e6b2b44b394aeec6d99d"
      },
      "downloads": -1,
      "filename": "strawberry_sqlalchemy_mapper-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f952e35c2d06e1092a75ec4b6d6ffbd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13180,
      "upload_time": "2023-02-27T06:26:28",
      "upload_time_iso_8601": "2023-02-27T06:26:28.766620Z",
      "url": "https://files.pythonhosted.org/packages/33/2c/51165cd805d8a3837ca8a30fd5f283f91a4b4109fe0af91074ad0876f788/strawberry_sqlalchemy_mapper-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5397887c90b5a8d86ab81134701d50e97a7c91830f392476a2ec44e2aa922daa",
        "md5": "8f605490628fed39b1c54c5b84beb239",
        "sha256": "c970ea126fbed0993936753df639057eb0eaaa761305065874dfcff20780d1d7"
      },
      "downloads": -1,
      "filename": "strawberry-sqlalchemy-mapper-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8f605490628fed39b1c54c5b84beb239",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37064,
      "upload_time": "2023-02-27T06:26:31",
      "upload_time_iso_8601": "2023-02-27T06:26:31.614635Z",
      "url": "https://files.pythonhosted.org/packages/53/97/887c90b5a8d86ab81134701d50e97a7c91830f392476a2ec44e2aa922daa/strawberry-sqlalchemy-mapper-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}