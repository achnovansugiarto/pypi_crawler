{
  "info": {
    "author": "Marco Di Rienzo",
    "author_email": "diridevelops@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mismatch string kernel\n\nA simple Python3 implementation of the mismatch kernel described in the publication below:\n\n    %0 Journal Article\n    %T Mismatch string kernels for discriminative protein classification\n    %A Leslie, Christina S\n    %A Eskin, Eleazar\n    %A Cohen, Adiel\n    %A Weston, Jason\n    %A Noble, William Stafford\n    %J Bioinformatics\n    %V 20\n    %N 4\n    %P 467-476\n    %@ 1460-2059\n    %D 2004\n    %I Oxford University Press\n    %U https://doi.org/10.1093/bioinformatics/btg431\n\n## Usage\nTo understand the technicalities of what this kernel does please refer to the article above.\n### Initializing the kernel\nFirst you have to define an alphabet from which the k-mers will be generated, \nthe length k of the k-mers and m the maximum number of mismatches between mers, for example:\n```python\nALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' ']\nk = 3\nm = 1\n```\n\nThen you can create a `MismatchKernel` object with such parameters:\n```python\nfrom mismatch_kernel import MismatchKernel\n\nmk = MismatchKernel(ALPHABET, k, m)\n```\n\n### Mapping a string to (k-m) feature space\nYou can use the `vectorize(x)` function to map a string `x` to the (k-m) feature space.\n\nNote that the alphabet is in general case sensitive, so if your strings needs to be \ncase sensitive (i.e. \"string\" != \"StRiNg\"), your alphabet should contain both uppercase\nand lowercase letters. Also this will much increase computational time because the \nk-mer feature space has dimension #(ALPHABET)^k; same thing goes if you need to \ndistinguish punctuation, for example in the alphabet above the strings will be different\nbased on the spaces they contain (i.e. \"space\" != \"spa ce\"). \nIn general the strings you pass to this module functions will be normalized, i.e. every\ncharacter not in the alphabet will be removed. For example if you call `vectorize(\"String\")`\nafter defining the above alphabet you are actually vectorizing \"tring\", so you should have\ncalled `vectorize(\"String\".lower())` instead.\n\nThe `vectorize(x)` function returns a tuple `(x_norm, dok)` where `x_norm` is the actual string\nthat has been vectorized (i.e. `x` normalized) so you can check if that's what you actually \nwanted to vectorize, and `dok` is the vector in DOK (dictionary of keys)\nformat (because the vectors are generally sparse), so it will be a dictionary like\n`{2: 1, 3: 1, 14: 1, 17: 2, 30: 1, 41: 1, ...}` meaning that the vector has non-zero values \nonly at the position of the dictionary keys, i.e. `[0, 0, 1, 1, 0, ..., 0, 1, 0, 0, 2, ...]`.\nYou can push `x_norm` in a dictionary along with the vector so you don't have to \nvectorize it again, this is what the `get_kernel()` function actually does.\n#### Example\n```python\nx_norm, vect = mk.mismatch_tree.vectorize(\"doc. Frankenstein\".lower())\nprint(\"{} -> {}\".format(x_norm, vect))\n```\n\n    > doc frankenstein -> {10: 1, 13: 1, 37: 1, 64: 1, ...}\n\n### Calculating the kernel between two strings\nYou can use the `get_kernel(x1, x2)` function to get the kernel between `x1` and `x2`,\nthe kernel varies between 0 and 1, the more similar the two strings the greater it will be \n(1 if the strings are equal).\nThe function will automatically normalize and vectorize the two strings to compute the \nkernel.\n\n#### Example\n```python\nker = mk.get_kernel(\"doc. Frankenstein\".lower(), \"doc. Drunkenstein\".lower())\nprint(ker)\n```\n\n    > 0.7500011542039571\n\n### Using or supplying already calculated mismatch vectors and kernels\nThe `get_kernel` function will save in the `MismatchKernel` object the mismatch vectors of every\nstring it vectorizes in the `MISMATCH_VECTORS` attribute, that is a dictionary that stores\nstrings as keys and the corresponding vector as values \n(i.e. `{'doc frankenstein': {10: 1, 13: 1, 37: 1, 64: 1, ...}, \n'doc drunkenstein': {80: 1, 98: 1, 116: 1, 121: 1, ...}`) so if you call next\n`mk.get_kernel(\"doc drunkenstein\", \"doc nykterstein\"` it won't vectorize again `\"doc drunkenstein\"`.\n\nLikewise every calculated kernel will be stored in the `KERNEL_MATRIX` attribute, that is a \ndictionary that stores strings as keys and another dictionary with strings as keys and the\nkernel value between the two keys as values \n(i.e. `{'doc frankenstein': {'doc drunkenstein': 0.7500011542039571, 'doc nykterstein': 0.5041614599291009}}`).\nIf you have to calculate the kernel for a batch of strings you can call `get_kernel` from the\nsame `MismatchKernel` object so the strings for which the mismatch vector or the kernel have\nalready been calculated won't be calculated again.\n\nIf you already have one or both of these dictionaries you can pass it to the `MismatchKernel`\nconstructor:\n```python\nmk = MismatchKernel(ALPHABET, k, m, vectors_dict, kernels_dict)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcodiri/mismatch_string_kernel",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mismatch-string-kernel",
    "package_url": "https://pypi.org/project/mismatch-string-kernel/",
    "platform": "",
    "project_url": "https://pypi.org/project/mismatch-string-kernel/",
    "project_urls": {
      "Homepage": "https://github.com/marcodiri/mismatch_string_kernel"
    },
    "release_url": "https://pypi.org/project/mismatch-string-kernel/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python3 implementation of mismatch string kernel",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8023214,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "796de3127f60ee27248c1d1e12745b2abf23eca7889e09bb303afe7a93641235",
          "md5": "8ce32540bf5e57d4496d7e10d89b375a",
          "sha256": "a6502d1fb40ea24320a7165ca1f73ca9639660075165ad1d405b5acefeab039a"
        },
        "downloads": -1,
        "filename": "mismatch_string_kernel-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ce32540bf5e57d4496d7e10d89b375a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7476,
        "upload_time": "2020-08-22T19:11:35",
        "upload_time_iso_8601": "2020-08-22T19:11:35.972030Z",
        "url": "https://files.pythonhosted.org/packages/79/6d/e3127f60ee27248c1d1e12745b2abf23eca7889e09bb303afe7a93641235/mismatch_string_kernel-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e29c9812c06b6868694e70be68a1d7c25905e047b25d3d6b658fdbdff3ccd16",
          "md5": "0f098bcdc45746df4e358dc78b0cf214",
          "sha256": "16e3aafdd015170156f4b0c8b9e23ee893874c5218364600eea18b1d89033a76"
        },
        "downloads": -1,
        "filename": "mismatch_string_kernel-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f098bcdc45746df4e358dc78b0cf214",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6234,
        "upload_time": "2020-08-22T19:11:39",
        "upload_time_iso_8601": "2020-08-22T19:11:39.119823Z",
        "url": "https://files.pythonhosted.org/packages/6e/29/c9812c06b6868694e70be68a1d7c25905e047b25d3d6b658fdbdff3ccd16/mismatch_string_kernel-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "796de3127f60ee27248c1d1e12745b2abf23eca7889e09bb303afe7a93641235",
        "md5": "8ce32540bf5e57d4496d7e10d89b375a",
        "sha256": "a6502d1fb40ea24320a7165ca1f73ca9639660075165ad1d405b5acefeab039a"
      },
      "downloads": -1,
      "filename": "mismatch_string_kernel-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ce32540bf5e57d4496d7e10d89b375a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7476,
      "upload_time": "2020-08-22T19:11:35",
      "upload_time_iso_8601": "2020-08-22T19:11:35.972030Z",
      "url": "https://files.pythonhosted.org/packages/79/6d/e3127f60ee27248c1d1e12745b2abf23eca7889e09bb303afe7a93641235/mismatch_string_kernel-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e29c9812c06b6868694e70be68a1d7c25905e047b25d3d6b658fdbdff3ccd16",
        "md5": "0f098bcdc45746df4e358dc78b0cf214",
        "sha256": "16e3aafdd015170156f4b0c8b9e23ee893874c5218364600eea18b1d89033a76"
      },
      "downloads": -1,
      "filename": "mismatch_string_kernel-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f098bcdc45746df4e358dc78b0cf214",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6234,
      "upload_time": "2020-08-22T19:11:39",
      "upload_time_iso_8601": "2020-08-22T19:11:39.119823Z",
      "url": "https://files.pythonhosted.org/packages/6e/29/c9812c06b6868694e70be68a1d7c25905e047b25d3d6b658fdbdff3ccd16/mismatch_string_kernel-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}