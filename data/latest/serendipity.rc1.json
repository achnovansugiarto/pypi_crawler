{
  "info": {
    "author": "George Hosu",
    "author_email": "george@cerebralab.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# serendipity\n\nBecause multiprocessing is boring.\n\nDid you ever lament python multiprocessing's difficulty of usage?\n\n`join`,`close`,`start`, individual processes, polls, fork vs spawn, asyncio wrappers... please stop. There must be a  better way forward.\n\nOf course there is, the revelation came to me in late November 2019 as the result of a (two) [3 year old 11.5% ABV porter](https://www.ratebeer.com/Ratings/Beer/Beer-Ratings.asp?BeerID=501180). Just launch your file or function in a tmux and leave it running!\n\nIn all honesty, I should say, this joke is inspired by a coding pattern I did use for ease of debugging, where I would leave long-running tasks running in a tmux and then connect to them accordingly in order to stop and fiddle with the process. It's strange what happens when gdb and desperation come together late at night.\n\n## Interface & Usage\n\nThe library exposes a single function: `fire_and_forget`.\nInstallation can be done via pip: `pip install serendipity`.\n\n### Running a file\n\nWrite a self-contained python script, on my computer this will be `/home/moron/my_task.py`.\n\nThe execute the code:\n```\nfrom serendipity import fire_and_forget\n\nfire_and_forget(runnable='/home/moron/my_task.py', args=['a list of', 'whatever args your script', 'needs'], python_interpreter='python3', id='my_tmux_session')\n```\n\nAnd now, while your file is running, you can connect to the session via tmux `tmux a -t my_tmux_session`. The session will be closed once the script is done running.\n\n### Running a function\n\nDefine a function that is self-contained, i.e doesn't use any variables (including imports) from the external scope, then pass it as the runnable. For example:\n\n```\ndef a_task(arg1):\n  import time\n  time.sleep(5)\n  print(f'I am doing something with {arg1}')\n  time.sleep(5)\n\nfire_and_forget(runnable=a_task, args=[2898], id='tmux_running_a_task')\n```\n\nAgain, you can now connect to the tmux as `tmux a -t tmux_running_a_task`\n\n### The interface\n\nThe only function exposed is `fire_and_forget`, it has the following args & default values:\n* `runnable` - Mandatory - path to the file or pointer to the function that you want to execute\n* `args` - Default: `[]` - array of arguments for your script or function\n* `id` - Default: randomly generate uuid - id of the tmux session\n* `python_interpreter` - Default: `python`\n* `tmux_executable` - Default: `tmux`\n* `I_dont_like_fun` - Default: `False` - Optional argument for boring people that disables some of the more stupid functionality of this library (e.g. the reckless function -> file conversion and using `os.system` instead of `subprocess`), I don't recommend turning this on, it spoils the spirit of the whole afair.\n\n## Contributing\n\n### Must-haves\n\nI'd appreciate if anyone could make PRs with the following:\n\n* Documentation, strictly in the form of a \"multiprocessing vs tmux\" picture using the \"virgin vs chad\" meme format.\n* Support for capturing outside context of a function.\n* Support for names arguments.\n* Better support for `i_dont_like_fun` mode.\n* Humorous spelling errors and puns for exception messages.\n* Support for screen (note: with condescending message about tmux being better, ideally print half of it as stdout and half of it as stderr).\n\n### Contributor guidelines\n\nContributions are allowed, but certain code quality guidelines should be observed and will be strictly enforced at PR time:\n* Minimal testing, preferably none, unit testing prohibited\n* Inconsistent variable naming schema, preference for overly long names or 2-3 char variables. Prefer puns, inside jokes and funny sounds to expressive naming.\n* Proof of added complexity and lines of code with little to no benefit in terms of functionality.\n* Branches must have names suggestive of S&M.\n\n## Questions\n\n* I have used this library in production, am I a bad person?\n[Complicated](https://en.wikipedia.org/wiki/Moral_relativism)\n\n* Have you ever used this?\nNo, but I actually do use a similar coding pattern in places and you'd be surprised how convenient it is. I'm not even kidding.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/serendipity",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/George3d6/serendipity",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serendipity",
    "package_url": "https://pypi.org/project/serendipity/",
    "platform": "",
    "project_url": "https://pypi.org/project/serendipity/",
    "project_urls": {
      "Download": "https://pypi.org/project/serendipity",
      "Homepage": "https://github.com/George3d6/serendipity"
    },
    "release_url": "https://pypi.org/project/serendipity/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A multiprocessing module based on starting tmux sessions",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11112078,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4370a126e1e69585d07fffda2f3dd2c0f5df374dce1b15e78bf63c6032d60c5",
          "md5": "bcbc61a5acf427e0539fcdfddee097c9",
          "sha256": "12de160a020fdbcdb7d5c99449a94e10133132ab2047f7445e58262295e9d87e"
        },
        "downloads": -1,
        "filename": "serendipity-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bcbc61a5acf427e0539fcdfddee097c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5754,
        "upload_time": "2021-08-06T16:20:37",
        "upload_time_iso_8601": "2021-08-06T16:20:37.203874Z",
        "url": "https://files.pythonhosted.org/packages/b4/37/0a126e1e69585d07fffda2f3dd2c0f5df374dce1b15e78bf63c6032d60c5/serendipity-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4370a126e1e69585d07fffda2f3dd2c0f5df374dce1b15e78bf63c6032d60c5",
        "md5": "bcbc61a5acf427e0539fcdfddee097c9",
        "sha256": "12de160a020fdbcdb7d5c99449a94e10133132ab2047f7445e58262295e9d87e"
      },
      "downloads": -1,
      "filename": "serendipity-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bcbc61a5acf427e0539fcdfddee097c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5754,
      "upload_time": "2021-08-06T16:20:37",
      "upload_time_iso_8601": "2021-08-06T16:20:37.203874Z",
      "url": "https://files.pythonhosted.org/packages/b4/37/0a126e1e69585d07fffda2f3dd2c0f5df374dce1b15e78bf63c6032d60c5/serendipity-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}