{
  "info": {
    "author": "nullenenenen",
    "author_email": "nullenenenen@gavagai.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Software Development"
    ],
    "description": "# DBSamizdat\n\nThe blissfully naive PostgreSQL database object manager.\n\nFor specifics on integrating with the Django web framework, and some examples for integrating with its ORM, see the [Django integration](#django-integration) section further down.\n\nFor discussions, questions, bug reports, feature requests, development, and engaging other users, use the [public mailinglist](https://lists.sr.ht/~nullenenenen/dbsamizdat-discuss).\n\nIt requires Python 3.6 or later, and is tested for compatibility with PostgreSQL 9.6 and up.\n\n## What it is\n\nDBSamizdat is a lightweight tool that manages code that lives in the database: **views**, **materialized views**, **functions** and **triggers**, and the dependencies between those and other DB objects.\n\nThere is a command-line utility, and a library-style API.\n\nIt does not take over your database; it is designed to augment an existing database.\n\nIt works by modeling DB objects that you wish to manage as Python classes, then syncing that model state to a database. It can also refresh materialized views in proper dependency order, via autogenerated triggers or on command.\n\n## For whom\n\n- **Analysts**:\n    - share ontologies of business data and centralize their definitions\n    - stop passing around various versions of SQL snippets embedded in ad-hoc queries\n    - build data processing pipelines as stacks of (materialized) views, with reproducible results, and re-derive everything from ground truth at a keystroke\n    - if you have permissions to create objects in a database (if not in the public schema, then perhaps in your own namespace aka \"schema\"), then you can use DBSamizdat.\n\n- **Developers**:\n    - contain the use of raw SQL, make it reviewable, versionable and easily refactorable as part of a project's codebase, rather than treating it as DB state (as with table contents)\n    - manage DB object lifecycles alongside existing migration infrastructure.\n    - ORMs, and other developers, can read from views as if they're \"just tables\"; a familiar interface, and using views for encapsulating SQL can actually cut down on proliferation of one-off SQL queries (or esoteric ORM constructs, which are not necessarily better than SQL) in a codebase.\n\n\nIn particular, dbsamizdat is useful when:\n\n- you need a light & easy migration framework, allowing you to version your database handiwork in something more structure-aware than a flat SQL DDL dump\n- you work with stacks of database views, and want to refactor with more ease than is possible by search & replace/reorder of text in a flat SQL DDL dump\n- you would like to visualize analytical data flows, or visualize unit dependencies to aid in refactoring\n- you would like to easily refresh stacked materialized views, in dependency order, when certain base tables change\n- potentially even refreshing those materialized views automatically, in dependency order, using autogenerated triggers\n- you have a fine ORM, which does mundane DB operations very well, but you need a way to structure and manage raw SQL DB code for when the ORM does not suffice\n\n\n## How it works\n\n### The dependency graph\nBased on dependencies between the objects it manages, and between managed objects and unmanaged objects (base tables, for instance), it creates a dependency graph. \n\nThat graph is useful:\n\n- it is checked for cycles and other errata and anomalies\n- it can be applied to a database, creating objects in their proper dependency order\n- it can be diffed with existing database state\n- it can be used to patch up existing database state\n- it is a model of data flows, so it can tell us where a certain base table's data ends up\n\n\n\n### State tracking\nDBSamizdat tracks which objects fall under its responsibility. For this, rather than adding a table to your DB that tracks the application of successive migrations (as many DB migration frameworks do), it simply signs¹ the objects it creates by setting a PostgreSQL comment on those objects. The advantage is that the comment state is tied to the object's lifecycle: if someone or something DROPs the object, there is no potential source of disagreement left lying around.\n\nCorollaries:\n\n- Remove DBSamizdat's comment from a DB object, and it will stop managing it.\n- Change DBSamizdat's comment on a DB object to something that doesn't look like a DBSamizdat signature anymore, and it will stop managing it.\n- Tamper with the comment on a DB object *so that it still looks like a DBSamizdat signature* and be in for surprises\n- If you look at the comments (eg `\\d[mvf]` when in `psql`), you'll see some JSON, which might end up surprising end-users if those comments are served out through, for instance, some BI tool.\n- DBSamizdat will not notice when you alter an object behind its back. It only looks at the signature in the comment.\n\nWith this type of state tracking, it's possible to let multiple people create their own Samizdat structures in the same database, without stepping on eachother's toes² — for this, leverage PostgreSQL schemas and let everyone work in their own namespace. This can be done by convention but can also be administratively enforced through schema permissions.\n\n\n¹) It's not a cryptographic signature or MAC. No guarantees beyond \"this looks very much like something I would say\" from DBSamizdat's perspective.\n\n²) With the exception of triggers on shared base tables.\n\n\n## The basics\n\nInstall it - `pip install --user dbsamizdat` .\n\nCreate one or more modules with classes inheriting from SamizdatView, SamizdatMaterializedView, SamizdatFunction or SamizdatTrigger. Be sure to read the class reference below. The below is just an example:\n\n```python\nfrom dbsamizdat import SamizdatView, SamizdatMaterializedView\n\nclass Salutation(SamizdatView):\n    # SQL is written into a template, which will be read as a string.Template to substitute \n    # various values, such as the preamble, which will be substituted with the CREATE statement.\n    sql_template = \"\"\"\n      ${preamble}\n      SELECT format('Hi %s!', current_user) AS utterance\n      ${postamble}\n      \"\"\"\n\nclass TimestampedGreeting(SamizdatMaterializedView):\n    # As long as the result is a string and you embed the substitution placeholders,\n    # you use whatever you want to create the `sql_template`. Here we've\n    # added an index, making use of the templated-in object name,\n    # so that we don't have to hardcode it.\n    # In this case we use an F-string, and instead of hardcoding\n    # the DB identity of the Greeting view from which we are selecting, we're\n    # referencing it through its Samizdat class.\n    # Note that in this F-string we'll have to escape the String.template braces.\n    sql_template = f\"\"\"\n      ${{preamble}}\n      SELECT now() as saluted_at, utterance\n      FROM {Salutation.db_object_identity}\n      ${{postamble}}\n      CREATE INDEX ON ${{samizdatname}} (saluted_at)\n      \"\"\"\n    # As DBSamizdat doesn't parse your SQL, it doesn't actually know you're reading from the Greeting view.\n    # We have to specify this relationship explicitly.\n    depends_on = {Greeting}  # Dependencies can also be specified as flat strings, or tuple-of-strings — see class reference.\n```\n\nYou can put your classes in any module, and modules can contain classes other than Samizdat classes without problems. It may make sense to organize them into several modules.\n\nTo apply the specified state to your PostgreSQL database, use the dbsamizdat CLI tool, like so:\n\n```sh\ndbsamizdat sync postgresql:///some_database your_module maybe_yet_another_module\n```\n\nRunning the `sync` command again should tell you that there's nothing to do. But should you DROP the TimestampedGreeting view, `sync` will recreate it.\n\nThat's it, very basically!\n\n\n### Using the CLI \n\nThe CLI works through subcommands. Start exploring with a simple:\n\n```sh\ndbsamizdat --help\n```\n\nwhich will give you:\n\n```text\nusage: dbsamizdat [-h] [--quiet] [--verbose] {nuke,printdot,diff,refresh,sync} ...\n\ndbsamizdat, the blissfully naive PostgreSQL database object manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --quiet, -q           Be quiet (minimal output)\n  --verbose, -v         Be verbose (on stderr).\n\ncommands:\n  {nuke,printdot,diff,refresh,sync}\n    nuke                Drop all dbsamizdat database objects.\n    printdot            Print DB object dependency tree in GraphViz format.\n    diff                Show differences between dbsamizdat state and database state. Exits nonzero\n                        if any are found: 101 when there are excess DB-side objects, 102 if there \n                        are excess python-side objects, 103 if both sides have excess objects.\n    refresh             Refresh materialized views, in dependency order\n    sync                Make it so!\n```\n\nThese commands have their specific parameter sets and explanatory descriptions. For instance, to learn more about the `sync` command, we can ask for some help on it:\n\n```sh\ndbsamizdat sync --help\n```\n\nwhich will then tell you:\n\n```text\nusage: dbsamizdat sync [-h] [--txdiscipline {checkpoint,jumbo,dryrun}] dburl samizdatmodules [samizdatmodules ...]\n\npositional arguments:\n  dburl                 PostgreSQL DB connection string. Trivially, this might be 'postgresql:///mydbname'.\n                        See https://www.postgresql.org/docs/14/static/libpq-connect.html#id-1.7.3.8.3.6 .\n  samizdatmodules       Names of modules containing Samizdat subclasses\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --txdiscipline {checkpoint,jumbo,dryrun}, -t {checkpoint,jumbo,dryrun}\n                        Transaction discipline. The \"checkpoint\" level commits after every dbsamizdat-level action.\n                        The safe default of \"jumbo\" creates one large transaction.\n                        \"dryrun\" also creates one large transaction, but rolls it back.\n```\n\n\n\n## Class reference\n\n### Read-only properties\n\n- `fq` — The fully qualified DB object, including schema (see \"Using schemas\" under \"Tips\") and argument signature, if it pertains a function.\n- `db_object_identity` — The unique object reference from the DB's point of view (for functions, this includes the argument signature).\n\n### Methods\n\n- `create`, `drop`, `sign` — These generate SQL. Normally not called directly, rather, use the `sync` API function to operate on the samizdat collection as a whole.\n- `dbinfo` — Generates the comment that will be inserted into the database for this object.\n\n### Required attributes\n- `sql_template` — The create statement for this entity, as a string template. Start with the `${preamble}`, which will be templated for you into an appropriate `CREATE` statement for the entity. Then start your SQL where the automation leaves off:\n    - in the case of views, it's the `SELECT` statement following `AS`\n    - in the case of a function, you'd start with the `RETURNS` (as you'd type right after the function head, which will be templated in for you)\n    - in the case of a trigger, you'd start with the part that comes _after_ `[ FROM referenced_table_name ]`. Refer to the PostgreSQL documentation on `CREATE TRIGGER`.\n\nIf you get the templating wrong it often easy enough to see why from the SQL that was generated; run the CLI tool with `-v` (`-v2` for the Django management command) or get the `.sql` attribute from the ensuing `DatabaseError`.\n\nFor a view or materialized view, add a `${postamble}`. After the postamble, you may tack on some more `CREATE` statements, eg to create indices on materialized views. These will be unmanaged, DBSamizdat doesn't parse your SQL and thus knows nothing about what you put there - so while you COULD create a table in there, you definitely shouldn't. But an index on a materialized view would be fine; since it will be attached to the lifecycle of the view without DBSamizdat needing to worry about it.\n\n### Required attributes for SamizdatTrigger-subclasses\n- `on_table` — The table this trigger should be installed on.\n- `condition` — The `{ BEFORE | AFTER | INSTEAD OF } { event [ OR ... ] }` part of the `CREATE TRIGGER` syntax. A trivial example would be `\"AFTER INSERT\"`. Refer to the PostgreSQL documentation on `CREATE TRIGGER`.\n\n### Optional attributes\n- `schema` — This defaults to `public`, if you've never heard of PostgreSQL schemas, don't worry and leave it out.\n- `deps_on` — Defaults to the empty set. This lists any other Samizdats that this entity depends on. DBSamizdat uses these dependency specifications to construct the aforementioned graph. As it is incapable of comprehending your SQL template, it can't extract dependencies from there, so you'll have to repeat yourself a bit here. Only include samizdat entities. References can be of the following forms, in reverse order of preference:\n    - a string: Will be interpreted as the bare name of a samizdat **in the same schema**. This is deceptively simple. Too simple. It won't work for everything; referencing functions this way is not possible.\n    - a 2- or 3-tuple of strings: Will be interpreted as (schemaname, samizdatname) or (schemaname, samizdatname, argument-signature); the latter form is for referencing functions. This is an unambiguous reference, but it is potentially unbound.\n    - a direct class reference: Excellent. The preferred way of referencing Samizdats. You get the benefit of having the language (Python) watching over referential consistency, and not having to chase down and update your references when, for instance, a referenced function changes its argument signature.\n- `deps_on_unmanaged` — Defaults to the empty set. This lists other DB entities this entity depends on. If your entity depends on any database tables, list them here. This information is used for visualization (`printdot` command) and for determining which materialized views to refresh when using the `belownodes` CLI/API parameter for a `refresh`.\n\n### Optional attributes for SamizdatMaterializedView-subclasses\n- `refresh_concurrently` — Defaults to `False`. See the PostgreSQL documentation on the requirements for your materialized view in order to benefit from refreshes that don't lock out concurrent readers.\n- `refresh_triggers` — Defaults to the empty set. Tables referenced here will get a trigger installed that refreshes the materialized view on INSERT, UPDATE, DELETE and TRUNCATE. Triggers will run in dependency order, that is, if both materialized views A and B have a `refresh_triggers` reference to table X, and materialized view A depends directly or indirectly on materialized view B (through `deps_on` connections), then the autogenerated triggers will be named such that materialized view B will be refreshed before materialized view A.\n\n### Optional attributes for SamizdatFunction-subclasses\n- `function_name` — Defaults to the class name. The reason that this is overridable here is to support function polymorphism: the identity of a DB function is made up of its schema, name, and arguments signature. Thus you might want to create several functions sharing a name but differing in argument signature. If the function name would always be taken from the Python class name, you'd need to have several classes with the same name to support this polymorphism, which would then force you to place them in separate modules — not very convenient.\n- `function_arguments_signature` — Defaults to `''`, that is to say, the function takes no arguments. Specify the argument signature sans parentheses, eg `username TEXT, userid INT`.\n- `function_arguments` — If your function arguments' call signature is different from its arguments (which can be the case, for instance when you use arguments with defaults, and IN/OUT/INOUT/VARIADIC argument types) then you'll have to list your full function arguments here, and repeat the proper signature subset of all that in the `function_arguments_signature`. Because DBSamizdat doesn't interpret SQL, it will not derive the signature from the arguments; you'll need to spell it out.\n\n\n## Tips\n\n### Programmatic access\nThe `api` and `django_api` modules provide access to DBSamizdat functionality from Python: the `sync`, `refresh` and `nuke` actions, which function as their CLI namesakes.\n\n### Using schemas\nDBSamizdat has support for [PostgreSQL schemas](https://www.postgresql.org/docs/current/ddl-schemas.html). They can be thought of as namespaces for DB objects.\n\nAs noted in the class attribute reference, use the `schema` class attribute to place an object in a schema other than the default `public` schema.\nWhen dependency-referencing Samizdat classes, you can simply use the class itself, if you have a reference to it (say, imported it). \nIf you're referencing non-Samizdat entities _that exist in schemas foreign to the schema of the referencing class_, you can specify them as a tuple of strings, like so: `('schemaname', 'tablename')`. This tuple is exposed on any dbsamizdat class as the `.fq` (\"fully qualified\") property. When you can't reference a class directly, you may instead use such a tuple to refer to a class, and then the reference will be resolved when dbsamizdat runs.\nNote that functions are referenced with a 3-stringtuple which includes their argument signature — eg `('someschema', 'somefunctionname', 'userid int, comment text')`.\n\n### Visualization\n\nInstall [GraphViz](https://graphviz.org/). If you are on Linux, chances are you can install it through your distribution. Your distribution may also carry the [xdot program](https://github.com/jrfonseca/xdot.py) for visualizing dotfiles.\n\nTo generate a graph description in the `dot` language, and create an image of it, run a variation of:\n\n```bash\ndbsamizdat printdot dbsamizdat.test_samizdats | dot -Tsvg > test_samizdats.svg\n```\n\nAnd then open the resulting `test_samizdats.svg` file in something that can handle .svg files, such as a modern web browser.\n\nOr pipe the dotfile output directly into `xdot`, if you have that:\n\n```bash\ndbsamizdat printdot dbsamizdat.test_samizdats | xdot -\n```\n\nYou will see something like this:\n\n![example_output](example_graphviz.png)\n[(go here if you don't see it)](https://git.sr.ht/~nullenenenen/DBSamizdat#visualization)\n\nThe legend for these nonsensical test classes:\n\n- Nodes:\n    - Yellow houses are DB tables\n    - Grey squares are views\n    - Red blocks are materialized views\n    - Green hexagons are functions\n    - Purple arrowboxes are triggers\n- Edges:\n    - A blue dotted line with ball arrowhead and refresh symbol label denotes an autorefresh-relationship between a materialized view and a base table. They're implemented with an autogenerated trigger and trigger-function pair, which are left out of the visualization to reduce clutter.\n    - A red edge denotes a relationship with an unmanaged object at its origin\n    - A black edge denotes all else\n\n\n## Django integration\n\n### What integration?\n\n\"Integration\" is a loosely defined term. For DBSamizdat, it relies on:\n\n1. A Django model's [`managed` Meta-property](https://docs.djangoproject.com/en/3.2/ref/models/options/#managed), which we can use to tell Django to disavow the DB object underlying the model, so we can manage it through DBSamizdat.\n2. The fact that the ORM will read views as if they're tables just fine.\n3. The fact that Django doesn't mind extraneous DB objects (objects beyond those flowing from its Models). Unless, of course, they are in the way of something Django wants to do (say, create a table `foo` for a new Model, while a DBSamizdatView `foo` already exists).\n\nThus, the \"integration\" comes down to:\n\n1. Getting out of the way when Django needs to perform migrations, and making things right afterwards\n2. Autodiscovering your various apps' dbsamizdat definition modules\n3. Wrapping the CLI in a management command, so that the Django DB connection is used, and the autodiscovered modules are applied\n\n\n#### Limitations\n\nCurrently, Samizdats are applied to the default Django DB connection. Multi-DB setups aren't supported through the Django helpers. But you could use the regular API and CLI to work with the other databases regardless.\n\n\n### Getting up and running\n\n`pip install dbsamizdat`, then add `dbsamizdat` to your `INSTALLED_APPS`.\n\nThen add a module called `dbsamizdat_defs` to your app, and define your Samizdats.\n\nThen run `./manage.py dbsamizdat sync` to sync state to your DB. `./manage.py dbsamizdat` works pretty much the same as the normal CLI, except that you don't have to specify how to connect to PostgreSQL, neither do you need to list any modules, because they're autodiscovered.\n\nTo use the library API functions, load the `django_api` module rather than the `api` module.\n\n### Extra configuration\n\nThe following Django settings are consulted by DBSamizdat, if declared:\n\n- `DBSAMIZDAT_SMART_MIGRATIONS` — a boolean, `False` by default. This has to do with migrations. As Django's migrations are blissfully unaware of your samizdats, things will fail if, for instance, a table column is removed that one of your views selects. The default lets DBSamizdat assume the worst case, so it will simply remove all its DB state before Django's migrations are run, and restore the state afterwards. But if you define this setting as `True`, DBSamizdat will examine the migration plan and to determine the subset of DB state that will need to be dropped and rebuilt following all the migrations. This behaviour can be desirable when you have large or computationally intensive materialized views. But it's not turned on by default, as it's deemed experimental because of reliance on non-public Django APIs. See if it works for you, if not, turn it back off and send a bug report to the mailinglist!\n- `DBSAMIZDAT_MODULES` — an Iterable[str] of module names, eg `[\"myapp.somesamizdats\"]`. Empty, by default. These modules will be loaded ***in addition to*** any autoloaded modules. When you place a module named `dbsamizdat_defs` in a Django app, it will automatically be picked up by DBSamizdat. Think of it as a `models.py`, but for Samizdats. The `DBSAMIZDAT_MODULES` is there for when you want to place some (extra) Samizdat classes elsewhere. Though of course, you could also import those classes from any module into the canonical `dbsamizdat_defs` module.\n\n### Tips\n\n#### Referencing things nicely\n\nDjango allows you to define Model classes that read from a SamizdatView (or SamizdatMaterializedView) rather than a table. For that, set your model's Meta up like so:\n\n```python\nclass MyModel(models.Model):\n    ...\n\n    class Meta:\n        managed = False\n        db_table = MySamizdatView.db_object_identity\n\n```\n\nWe're directly referencing the Samizdat class here. You could use a bare string to refer to the view instead, but doing it as shown is better, as then the language (Python) will do the work of guarding referential integrity. Plus perhaps you'll gain some IDE integration, as you might now easily jump to the referenced class' definition.\n\nSimilarly, to reference one of Django's tables from a Samizdat:\n\n```python\n\nclass MyModel(models.Model):\n    ...\n\nclass MySamizdat(SamizdatView):\n    deps_on_unmanaged = {MyModel._meta.db_table}\n    sql_template = f\"\"\"\n    ${{preamble}}\n    SELECT * FROM \"{MyModel._meta.db_table}\";\n    ${{postamble}}\n    \"\"\"\n```\n\nWe could have used a bare string to refer to MyModel's table, but instead we're directly referencing it, for reasons explained earlier. As this is an F-string, we'll need to escape the string.Template variables, so `${preamble}` became `${{preamble}}`. But you can use any templating/formatting you want, as long as the resultant string makes sense as the string.Template that it will be interpreted as. Of course, dynamic string templating SQL is a danger zone with respect to escaping and injection, but we're consenting adults here.\n\n\n#### Refreshing materialized views: Django signals vs PostgreSQL triggers\n\nMaterialized views are nice, but they become stale as their source data is updated. To keep materialized views in sync following a mutations on Model instances, you could use Django signals — call the `refresh()` function from the `django_api` module from a signal handler acting on the `post_save` and `post_delete` signals of a model, passing an appropriate `belownodes` argument to refresh everything that depends on that model's DB table. For performance, you may want to choose the \"checkpoint\" transaction discipline if you want the affected view's updated content to become visible as refreshing progresses (on a view-by-view basis) rather than all the way at the end.\n\nThe upside of this approach is that you can defer the refreshing to a task queue so that it does not hold up the HTTP request/response cycle. You can also debounce the event.\n\nThe downside is that there is now a window of inconsistency; the materialized view will, if all goes well, be updated eventually, but in the meantime it might not be in agreement anymore with the updated source data. Also, whether the mechanism fires depends on whether you use `.save()` on a Model instance - if you use a `QuerySet`'s `update` function instead, signals will not fire.\n\nAn alternative is to use DB triggers, so that a refresh takes place within the same transaction as the mutation on its base data. The big advantages are consistency & atomicity. They're also very easy to set up, simply list the base tables in the `refresh_triggers` attribute on your materialized view; in the trivial case, that could simply be `refresh_triggers = deps_on_unmanaged` as you've already spelled out the base tables there.\n\nThe disadvantage of the trigger approach is that what used to (probably) be a fast insert now has to wait for the (potentially lengthy) materialized view's refresh; it very much depends on specifics whether this is acceptible for your use case.\n\nIn either case, to prevent holding out readers while refreshing a materialized view, you could investigate whether you can turn on concurrent refreshes.\n\nDepending on write flux, consistency requirements, and sheer computational demands, there are certainly cases for which neither signals nor triggers are a good fit, and a nightly batch process would work better, perhaps not even using materialized views at all.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://hub.sr.ht/~nullenenenen/DBSamizdat/",
    "keywords": "PostgreSQL Django",
    "license": "GPL-3.0+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DBSamizdat",
    "package_url": "https://pypi.org/project/DBSamizdat/",
    "platform": null,
    "project_url": "https://pypi.org/project/DBSamizdat/",
    "project_urls": {
      "Documentation": "https://git.sr.ht/~nullenenenen/DBSamizdat/tree/master/item/README.md",
      "Homepage": "https://hub.sr.ht/~nullenenenen/DBSamizdat/",
      "Source": "https://git.sr.ht/~nullenenenen/DBSamizdat/"
    },
    "release_url": "https://pypi.org/project/DBSamizdat/0.8.6/",
    "requires_dist": [
      "psycopg2 (>=2.8.0)",
      "toposort (>=1.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "dbsamizdat — the blissfully naive PostgreSQL database object manager",
    "version": "0.8.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14015329,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "658afa0020d312c7ea23c3d5ccf746ed149701d03a325484083bc64e5a6ab92f",
          "md5": "83979a01d96bfc658b7c598fcf0da8b2",
          "sha256": "1f4c497a5fe408b302a9e52087159a09a81cf1b18094d4c0a19bc5a210ca338c"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83979a01d96bfc658b7c598fcf0da8b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42470,
        "upload_time": "2021-11-16T18:12:07",
        "upload_time_iso_8601": "2021-11-16T18:12:07.519211Z",
        "url": "https://files.pythonhosted.org/packages/65/8a/fa0020d312c7ea23c3d5ccf746ed149701d03a325484083bc64e5a6ab92f/DBSamizdat-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbaa0713075fc416948b24c36141c50a76c938bd9d1ccd99488950323ddede7e",
          "md5": "880b30e671d2134d5a15b9798093d4fd",
          "sha256": "23fa16f0baff787cfaaa78440111a5f30c8fefd8f320142f7a45381da11e9ba9"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "880b30e671d2134d5a15b9798093d4fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47458,
        "upload_time": "2021-11-16T18:12:08",
        "upload_time_iso_8601": "2021-11-16T18:12:08.885136Z",
        "url": "https://files.pythonhosted.org/packages/cb/aa/0713075fc416948b24c36141c50a76c938bd9d1ccd99488950323ddede7e/DBSamizdat-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dce1028733f8fe57cc2c5d65a1a423f1fddc2ac41e1bc9ab2e1e5060db1fb4a6",
          "md5": "27ac82ee4346d983899b7044128e9eaa",
          "sha256": "7ba6f6601c556ceaa6ba4739c45312ad79c3f019bc5ee4916bf7324b8615a94c"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27ac82ee4346d983899b7044128e9eaa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43065,
        "upload_time": "2021-11-16T18:30:54",
        "upload_time_iso_8601": "2021-11-16T18:30:54.915012Z",
        "url": "https://files.pythonhosted.org/packages/dc/e1/028733f8fe57cc2c5d65a1a423f1fddc2ac41e1bc9ab2e1e5060db1fb4a6/DBSamizdat-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7c2a045b03c91eaaa38fe6d76944127c2b826e2c4fa641d9f1ee7196a35687f",
          "md5": "039313929c5962b91e8fa0e5b6807406",
          "sha256": "8bf4b2a26f01fc1c728eb19815e84303b3cd92c78c84fb6d4ed6154d892d5268"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "039313929c5962b91e8fa0e5b6807406",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47901,
        "upload_time": "2021-11-16T18:30:56",
        "upload_time_iso_8601": "2021-11-16T18:30:56.545620Z",
        "url": "https://files.pythonhosted.org/packages/b7/c2/a045b03c91eaaa38fe6d76944127c2b826e2c4fa641d9f1ee7196a35687f/DBSamizdat-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53a2de62f4137db0cc7826288b0874954f5e8c70efd169f40e5c7ccbbed71799",
          "md5": "a67b2cfdf1e32e3153518ff1de7e6dce",
          "sha256": "85b2912a3da4c5b96d48400388477ce88f2c4954bd188d3724270be433c11203"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a67b2cfdf1e32e3153518ff1de7e6dce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43167,
        "upload_time": "2022-01-28T13:13:02",
        "upload_time_iso_8601": "2022-01-28T13:13:02.653031Z",
        "url": "https://files.pythonhosted.org/packages/53/a2/de62f4137db0cc7826288b0874954f5e8c70efd169f40e5c7ccbbed71799/DBSamizdat-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b666ec3a0ce68639480adbc8e410d36755a4cf39c887b120c932a824cb6fd6a6",
          "md5": "473a2abd709aa6d80fa23ee9a08e6ac4",
          "sha256": "98d0ff7d911a15138be16411470734aa35e4d865f1b36f4725a281229c5e130e"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "473a2abd709aa6d80fa23ee9a08e6ac4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48004,
        "upload_time": "2022-01-28T13:13:04",
        "upload_time_iso_8601": "2022-01-28T13:13:04.271675Z",
        "url": "https://files.pythonhosted.org/packages/b6/66/ec3a0ce68639480adbc8e410d36755a4cf39c887b120c932a824cb6fd6a6/DBSamizdat-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff31a3c010aea8fa8c29d4152755e3e479393edb25d864fcab1f9a687f356d6d",
          "md5": "6bc8f5677dd888d4ce9db7cadacb3e42",
          "sha256": "3552cab21647c4017c54a2a71c8056235a3e93a1f77745004c17ee1525864a7b"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bc8f5677dd888d4ce9db7cadacb3e42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43165,
        "upload_time": "2022-03-30T12:22:56",
        "upload_time_iso_8601": "2022-03-30T12:22:56.645186Z",
        "url": "https://files.pythonhosted.org/packages/ff/31/a3c010aea8fa8c29d4152755e3e479393edb25d864fcab1f9a687f356d6d/DBSamizdat-0.8.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ccf32cb7c2ab2f3d112e093573c48b25f8527f734c2a615abb1391d5c420be6",
          "md5": "6b72d9f0b17e66af557225367c33230b",
          "sha256": "10c6957571502fab9e37d3d33b2be104e7dad0f9a6d7403c993f0001174f8e28"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6b72d9f0b17e66af557225367c33230b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48013,
        "upload_time": "2022-03-30T12:22:58",
        "upload_time_iso_8601": "2022-03-30T12:22:58.557647Z",
        "url": "https://files.pythonhosted.org/packages/5c/cf/32cb7c2ab2f3d112e093573c48b25f8527f734c2a615abb1391d5c420be6/DBSamizdat-0.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0865b1d48044369472d3f115f2e13f5a4dd8f47f47088d178e59819f2364ea07",
          "md5": "d33f7ce132e7a49b660f01eef3afb6ca",
          "sha256": "ddf1b726b57df324c0637c0a1532999e20c070216311cdf4a76e1d8e4957daa9"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d33f7ce132e7a49b660f01eef3afb6ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43135,
        "upload_time": "2022-06-01T14:56:11",
        "upload_time_iso_8601": "2022-06-01T14:56:11.277594Z",
        "url": "https://files.pythonhosted.org/packages/08/65/b1d48044369472d3f115f2e13f5a4dd8f47f47088d178e59819f2364ea07/DBSamizdat-0.8.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4937ababb91ea26983549aefe39697aa0b093545523c2a2ffe9626b32d9b9e53",
          "md5": "78ae7276ba598d4040bf46de1128af32",
          "sha256": "edf4203836f285b09b517315f42d922d6df8ac328bce8e32c7e3d0c88261ef4d"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "78ae7276ba598d4040bf46de1128af32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48116,
        "upload_time": "2022-06-01T14:56:14",
        "upload_time_iso_8601": "2022-06-01T14:56:14.407078Z",
        "url": "https://files.pythonhosted.org/packages/49/37/ababb91ea26983549aefe39697aa0b093545523c2a2ffe9626b32d9b9e53/DBSamizdat-0.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e5630f48c3b240164b8c81d33a33783cce169f5b6945654e4bf0ba39b8de478",
          "md5": "619858a8141fa0b011d13c03e5414b58",
          "sha256": "5722cd47778ac492bc79808fd0b28385091ced21fe11159cbc6ec2c29e0516a9"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "619858a8141fa0b011d13c03e5414b58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43150,
        "upload_time": "2022-06-02T19:28:58",
        "upload_time_iso_8601": "2022-06-02T19:28:58.454091Z",
        "url": "https://files.pythonhosted.org/packages/6e/56/30f48c3b240164b8c81d33a33783cce169f5b6945654e4bf0ba39b8de478/DBSamizdat-0.8.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "149726cb70fbfe796ccd2fdb8a47f10a146b95d050b3ed29c8747e87609b2d08",
          "md5": "b2b1c820a33f3e82330653f3e6cd9b62",
          "sha256": "c35be56f56a4c22d71289cc3c88150b3e9c925f7fda4a69a772255f02ba5de28"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b2b1c820a33f3e82330653f3e6cd9b62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48137,
        "upload_time": "2022-06-02T19:29:02",
        "upload_time_iso_8601": "2022-06-02T19:29:02.537900Z",
        "url": "https://files.pythonhosted.org/packages/14/97/26cb70fbfe796ccd2fdb8a47f10a146b95d050b3ed29c8747e87609b2d08/DBSamizdat-0.8.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66648fa24c40de3dddc3b52cb4e71dfb751a88b84702664e941ebb21fa87a603",
          "md5": "a795bb8d1840c4f169045801d834d307",
          "sha256": "998edd745d01d0ffd21e38312f5bfb0991411c747cc72285ba8058d50d4f33c0"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a795bb8d1840c4f169045801d834d307",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43145,
        "upload_time": "2022-06-02T19:33:00",
        "upload_time_iso_8601": "2022-06-02T19:33:00.445498Z",
        "url": "https://files.pythonhosted.org/packages/66/64/8fa24c40de3dddc3b52cb4e71dfb751a88b84702664e941ebb21fa87a603/DBSamizdat-0.8.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85fb2ab1d3430be5be933f37be0293ea02590a8c53207a7770692b93d98b696d",
          "md5": "5975d2269454d2025d99c9ee12efa164",
          "sha256": "158adf5360ed21519c2df28f6c118f12f6aa2d3ef277e57fc03b777b4d0410c1"
        },
        "downloads": -1,
        "filename": "DBSamizdat-0.8.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5975d2269454d2025d99c9ee12efa164",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48159,
        "upload_time": "2022-06-02T19:33:06",
        "upload_time_iso_8601": "2022-06-02T19:33:06.105027Z",
        "url": "https://files.pythonhosted.org/packages/85/fb/2ab1d3430be5be933f37be0293ea02590a8c53207a7770692b93d98b696d/DBSamizdat-0.8.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66648fa24c40de3dddc3b52cb4e71dfb751a88b84702664e941ebb21fa87a603",
        "md5": "a795bb8d1840c4f169045801d834d307",
        "sha256": "998edd745d01d0ffd21e38312f5bfb0991411c747cc72285ba8058d50d4f33c0"
      },
      "downloads": -1,
      "filename": "DBSamizdat-0.8.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a795bb8d1840c4f169045801d834d307",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 43145,
      "upload_time": "2022-06-02T19:33:00",
      "upload_time_iso_8601": "2022-06-02T19:33:00.445498Z",
      "url": "https://files.pythonhosted.org/packages/66/64/8fa24c40de3dddc3b52cb4e71dfb751a88b84702664e941ebb21fa87a603/DBSamizdat-0.8.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85fb2ab1d3430be5be933f37be0293ea02590a8c53207a7770692b93d98b696d",
        "md5": "5975d2269454d2025d99c9ee12efa164",
        "sha256": "158adf5360ed21519c2df28f6c118f12f6aa2d3ef277e57fc03b777b4d0410c1"
      },
      "downloads": -1,
      "filename": "DBSamizdat-0.8.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5975d2269454d2025d99c9ee12efa164",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 48159,
      "upload_time": "2022-06-02T19:33:06",
      "upload_time_iso_8601": "2022-06-02T19:33:06.105027Z",
      "url": "https://files.pythonhosted.org/packages/85/fb/2ab1d3430be5be933f37be0293ea02590a8c53207a7770692b93d98b696d/DBSamizdat-0.8.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}