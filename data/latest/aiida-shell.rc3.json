{
  "info": {
    "author": null,
    "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AiiDA",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# `aiida-shell`\n[![PyPI version](https://badge.fury.io/py/aiida-shell.svg)](https://badge.fury.io/py/aiida-shell)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/aiida-shell.svg)](https://pypi.python.org/pypi/aiida-shell)\n[![CI](https://github.com/sphuber/aiida-shell/workflows/ci/badge.svg)](https://github.com/sphuber/aiida-shell/actions/workflows/ci.yml)\n\nAiiDA plugin that makes running shell commands easy.\nRun any shell executable without writing a dedicated plugin or parser.\n\n\n## Installation\n\nThe recommended method of installation is through [`pip`](https://pip.pypa.io/en/stable/):\n\n    pip install aiida-shell\n\n## Requirements\n\nTo use `aiida-shell` a configured AiiDA profile is required.\nPlease refer to the [documentation of `aiida-core`](https://aiida.readthedocs.io/projects/aiida-core/en/latest/intro/get_started.html) for detailed instructions.\n\n\n## Examples\n\n### Running a shell command\nThe most simple example is to run a shell command without any arguments:\n\n```python\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job('date')\nprint(results['stdout'].get_content())\n```\nWhich should print something like `Thu 17 Mar 2022 10:49:52 PM CET`.\n\n### Running a shell command with arguments\nTo pass arguments to the shell command, pass them as a list to the `arguments` keyword:\n\n```python\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'date',\n    arguments=['--iso-8601']\n)\nprint(results['stdout'].get_content())\n```\nwhich should print something like `2022-03-17`.\n\n### Running a shell command with files as arguments\nFor commands that take arguments that refer to files, pass those files using the `nodes` keyword.\nThe keyword takes a dictionary of `SinglefileData` nodes.\nTo specify where on the command line the files should be passed, use placeholder strings in the `arguments` keyword.\n```python\nfrom io import StringIO\nfrom aiida.orm import SinglefileData\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'cat',\n    arguments=['{file_a}', '{file_b}'],\n    nodes={\n        'file_a': SinglefileData(StringIO('string a')),\n        'file_b': SinglefileData(StringIO('string b')),\n    }\n)\nprint(results['stdout'].get_content())\n```\nwhich prints `string astring b`.\n\n### Running a shell command with files as arguments with specific filenames\nThe keys in the `nodes` dictionary can only use alphanumeric characters and underscores.\nThe keys will be used as the link label of the file in the provenance graph, and as the filename in the temporary directory in which the shell command will be executed.\nCertain commands may require specific filenames, for example including a file extension, e.g., `filename.txt`, but this cannot be used in the `nodes` arguments.\nTo specify explicit filenames that should be used in the running directory, that are different from the keys in the `nodes` argument, use the `filenames` argument:\n```python\nfrom io import StringIO\nfrom aiida.orm import SinglefileData\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'cat',\n    arguments=['{file_a}'],\n    nodes={\n        'file_a': SinglefileData(StringIO('string a')),\n    },\n    filenames={\n        'file_a': 'filename.txt'\n    }\n)\nprint(results['stdout'].get_content())\n```\nwhich prints `string a`.\n\nThe output filename can be anything except for `stdout`, `stderr` and `status`, which are reserved filenames.\n\n### Passing other `Data` types as input\nThe `nodes` keyword does not only accept `SinglefileData` nodes, but it accepts also other `Data` types.\nFor these node types, the content returned by the `value` property is directly cast to `str`, which is used to replace the corresponding placeholder in the `arguments`.\nSo as long as the `Data` type implements this `value` property it should be supported.\nOf course, whether it makes sense for the value of the node to be used directly as a command line argument for the shell job, is up to the user.\nTypical useful examples, are the base types that ship with AiiDA, such as the `Float`, `Int` and `Str` types:\n```python\nfrom aiida.orm import Float, Int, Str\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'echo',\n    arguments=['{float}', '{int}', '{string}'],\n    nodes={\n        'float': Float(1.0),\n        'int': Int(2),\n        'string': Str('string'),\n    },\n)\nprint(results['stdout'].get_content())\n```\nwhich prints `1.0 2 string`.\nThis example is of course contrived, but when combining it with other components of AiiDA, which typically return outputs of these form, they can be used directly as inputs for `launch_shell_job` without having to convert the values.\nThis ensures that provenance is kept.\n\n### Defining output files\nWhen the shell command is executed, AiiDA captures by default the content written to the stdout and stderr file descriptors.\nThe content is wrapped in a `SinglefileData` node and attached to the `ShellJob` with the `stdout` and `stderr` link labels, respectively.\nAny other output files that need to be captured can be defined using the `outputs` keyword argument.\n```python\nfrom io import StringIO\nfrom aiida.orm import SinglefileData\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'sort',\n    arguments=['{input}', '--output', 'sorted'],\n    nodes={\n        'input': SinglefileData(StringIO('2\\n5\\n3')),\n    },\n    outputs=['sorted']\n)\nprint(results['sorted'].get_content())\n```\nwhich prints `2\\n3\\n5`.\n\n### Defining output files with globbing\nWhen the exact output files that will be generated and need to be captured are not known in advance, one can use globbing.\nTake for example the `split` command, which split a file into multiple files of a certain number of lines.\nBy default, each output file will follow the sequence `xa`, `xb`, `xc` etc. augmenting the last character alphabetically.\nThese output files can be captured by specifying the `outputs` as `['x*']`:\n```python\nfrom io import StringIO\nfrom aiida.orm import SinglefileData\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'split',\n    arguments=['-l', '1', '{single_file}'],\n    nodes={\n        'single_file': SinglefileData(StringIO('line 0\\nline 1\\nline 2\\n')),\n    },\n    outputs=['x*']\n)\nprint(results.keys())\n```\nwhich prints `dict_keys(['xab', 'xaa', 'xac', 'stderr', 'stdout'])`.\n\n### Defining a specific computer\nBy default the shell command ran by `launch_shell_job` will be executed on the localhost, i.e., the computer where AiiDA is running.\nHowever, AiiDA also supports running commands on remote computers.\nSee the [documentation of `aiida-core`](https://aiida.readthedocs.io/projects/aiida-core/en/latest/howto/run_codes.html#how-to-set-up-a-computer) for instructions to setting up and configuring a remote computer.\nTo specify what computer to use for a shell command, pass it as an option to the `metadata` keyword:\n```python\nfrom aiida.orm import load_computer\nfrom aiida_shell import launch_shell_job\nresults, node = launch_shell_job(\n    'date',\n    metadata={'options': {'computer': load_computer('some-computer')}}\n)\nprint(results['stdout'].get_content())\n```\nHere you can use `aiida.orm.load_computer` to load the `Computer` instance from its label, PK or UUID.\n\n### Running many shell jobs in parallel\nBy default the shell command ran by `launch_shell_job` is run blockingly; meaning that the Python interpreter is blocked from doing anything else until the shell command finishes.\nThis becomes inefficient if you need to run many shell commands.\nIf the shell commands are independent and can be run in parallel, it is possible to submit the jobs to AiiDA's daemon by setting `submit=True`:\n```python\nfrom aiida.engine.daemon.client import get_daemon_client\nfrom aiida_shell import launch_shell_job\n\n# Make sure the daemon is running\nget_daemon_client().start_daemon()\n\nnodes = []\n\nfor string in ['string_one', 'string_two']:\n    node = launch_shell_job(\n        'echo',\n        arguments=[string],\n        submit=True,\n    )\n    nodes.append(node)\n    print(f'Submitted {node}')\n```\nInstead of returning a tuple of the results and the node, `launch_shell_job` now only returns the `node`.\nThe reason is because the function returns immediately after submitting the job to the daemon at which point it isn't necessarily finished yet.\nTo check on the status of the submitted jobs, you can use the `verdi process list` command of the CLI that ships with AiiDA.\nOr you can do it programmatically:\n```python\nimport time\n\nwhile True:\n    if all(node.is_terminated for node in nodes):\n        break\n    time.sleep(1)\n\nfor node in nodes:\n    if node.is_finished_ok:\n        print(f'{node} finished successfully')\n    else:\n        print(f'{node} failed')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "aiida,workflows",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "aiida-shell",
    "package_url": "https://pypi.org/project/aiida-shell/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiida-shell/",
    "project_urls": {
      "Source": "https://github.com/sphuber/aiida-shell"
    },
    "release_url": "https://pypi.org/project/aiida-shell/0.3.0/",
    "requires_dist": [
      "aiida-core~=2.1",
      "mypy==0.981 ; extra == \"pre-commit\"",
      "pre-commit~=2.17 ; extra == \"pre-commit\"",
      "pylint==2.13.7 ; extra == \"pre-commit\"",
      "pylint-aiida~=0.1.1 ; extra == \"pre-commit\"",
      "pgtest~=1.3,>=1.3.1 ; extra == \"tests\"",
      "pytest~=6.2 ; extra == \"tests\""
    ],
    "requires_python": ">=3.8",
    "summary": "AiiDA plugin that makes running shell commands easy.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15691060,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1a1217d55becb3b2e19b50ad57326186298a6cb8d10c986b2e72c75c962dd8ab",
          "md5": "228149a9687dcf4a19fe16f7510f2c7f",
          "sha256": "e7b011eefb79079ca23522fdde7214ca320e1541e3b6b457f403332c8f5ea7cb"
        },
        "downloads": -1,
        "filename": "aiida_shell-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "228149a9687dcf4a19fe16f7510f2c7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12107,
        "upload_time": "2022-03-23T09:00:18",
        "upload_time_iso_8601": "2022-03-23T09:00:18.499113Z",
        "url": "https://files.pythonhosted.org/packages/1a/12/17d55becb3b2e19b50ad57326186298a6cb8d10c986b2e72c75c962dd8ab/aiida_shell-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "2d9456fede60fb1e41d9a51d2688abd69cfb0e20b3f2f05ec33eecea0a3fa663",
          "md5": "9e474f99a4e15976e2617bdc2095755d",
          "sha256": "1e744a00c764fd72285df229719f8fc4d0fd2dec0f59edae9964b7ac2cbab625"
        },
        "downloads": -1,
        "filename": "aiida-shell-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e474f99a4e15976e2617bdc2095755d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11224,
        "upload_time": "2022-03-23T09:00:27",
        "upload_time_iso_8601": "2022-03-23T09:00:27.787839Z",
        "url": "https://files.pythonhosted.org/packages/2d/94/56fede60fb1e41d9a51d2688abd69cfb0e20b3f2f05ec33eecea0a3fa663/aiida-shell-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3621d184a306dac79f7a08f2e84bee7a9d51109bd3ab4d5312da817adf74f74a",
          "md5": "3c7aba44afbc1ec9d67978b42c3e463e",
          "sha256": "664e869183b24038af4059ee25de32eafbaf5557056d6c72bdd6d24594004f41"
        },
        "downloads": -1,
        "filename": "aiida_shell-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c7aba44afbc1ec9d67978b42c3e463e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13119,
        "upload_time": "2022-06-05T14:08:18",
        "upload_time_iso_8601": "2022-06-05T14:08:18.837062Z",
        "url": "https://files.pythonhosted.org/packages/36/21/d184a306dac79f7a08f2e84bee7a9d51109bd3ab4d5312da817adf74f74a/aiida_shell-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "eae07052dd6f2787f2d18fc2cd2c79db2ed70043911f7fad2448c0eeb1a9dd54",
          "md5": "32e86f11547683e8a850570062967285",
          "sha256": "7083e0e0d5f6df6903914ba210c9599f024837abe92d64100fd19ec64a438d79"
        },
        "downloads": -1,
        "filename": "aiida-shell-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "32e86f11547683e8a850570062967285",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13478,
        "upload_time": "2022-06-05T14:08:20",
        "upload_time_iso_8601": "2022-06-05T14:08:20.901856Z",
        "url": "https://files.pythonhosted.org/packages/ea/e0/7052dd6f2787f2d18fc2cd2c79db2ed70043911f7fad2448c0eeb1a9dd54/aiida-shell-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "36ab391c962a9a7174b792dd97ec535a6af4007d2b55e4b5d05bb4055c20dde7",
          "md5": "9064dbc32fd1eb6ae4931ea05d93f476",
          "sha256": "48861f1aef4eb4c6ed85fa84a1a9197cbfb7a75de10388f27801da6b81432ca9"
        },
        "downloads": -1,
        "filename": "aiida_shell-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9064dbc32fd1eb6ae4931ea05d93f476",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15535,
        "upload_time": "2022-11-07T21:43:46",
        "upload_time_iso_8601": "2022-11-07T21:43:46.422157Z",
        "url": "https://files.pythonhosted.org/packages/36/ab/391c962a9a7174b792dd97ec535a6af4007d2b55e4b5d05bb4055c20dde7/aiida_shell-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "fd08df47bfd3670aaccd8508c8b6665023c0bcebfc6b549169bab93c9f1e88e7",
          "md5": "8d6dbb9aacb4ea10b185e3bfd679e452",
          "sha256": "6898017462ea2b014c16d5801a2f5f76ad05ca730771e273fdb78216ed620b4c"
        },
        "downloads": -1,
        "filename": "aiida-shell-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d6dbb9aacb4ea10b185e3bfd679e452",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16906,
        "upload_time": "2022-11-07T21:43:48",
        "upload_time_iso_8601": "2022-11-07T21:43:48.485558Z",
        "url": "https://files.pythonhosted.org/packages/fd/08/df47bfd3670aaccd8508c8b6665023c0bcebfc6b549169bab93c9f1e88e7/aiida-shell-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "36ab391c962a9a7174b792dd97ec535a6af4007d2b55e4b5d05bb4055c20dde7",
        "md5": "9064dbc32fd1eb6ae4931ea05d93f476",
        "sha256": "48861f1aef4eb4c6ed85fa84a1a9197cbfb7a75de10388f27801da6b81432ca9"
      },
      "downloads": -1,
      "filename": "aiida_shell-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9064dbc32fd1eb6ae4931ea05d93f476",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 15535,
      "upload_time": "2022-11-07T21:43:46",
      "upload_time_iso_8601": "2022-11-07T21:43:46.422157Z",
      "url": "https://files.pythonhosted.org/packages/36/ab/391c962a9a7174b792dd97ec535a6af4007d2b55e4b5d05bb4055c20dde7/aiida_shell-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "fd08df47bfd3670aaccd8508c8b6665023c0bcebfc6b549169bab93c9f1e88e7",
        "md5": "8d6dbb9aacb4ea10b185e3bfd679e452",
        "sha256": "6898017462ea2b014c16d5801a2f5f76ad05ca730771e273fdb78216ed620b4c"
      },
      "downloads": -1,
      "filename": "aiida-shell-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d6dbb9aacb4ea10b185e3bfd679e452",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16906,
      "upload_time": "2022-11-07T21:43:48",
      "upload_time_iso_8601": "2022-11-07T21:43:48.485558Z",
      "url": "https://files.pythonhosted.org/packages/fd/08/df47bfd3670aaccd8508c8b6665023c0bcebfc6b549169bab93c9f1e88e7/aiida-shell-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}