{
  "info": {
    "author": "Michael Green",
    "author_email": "michael@michaelgreen.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "slots_factory\n===\n\n## Factory functions and decorators for creating slot objects\n\nSlots are a python construct that allows users to create an object that doesn't contain `__dict__` or `__weakref__` attributes. The benefit to a slots object is that it has faster attribute access and it saves on memory use, which make slots objects ideal for when you have lots of instances of a single python object.\n\nI've never been a huge fan of the syntax though, as it requires repetitive code for definition as well as instantiation. **yuck.**\n\n```python\nclass SlotsObject:\n    __slots__ = ('x', 'y', 'z')\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __repr__(self):\n        contents = \", \".join(\n            [f\"{key}={getattr(self, key)}\" for key in self.__slots__]\n        )\n        return f\"SlotsObject({contents})\"\n```\n\nFor funsies, I wanted to see if I could create a different way to instantiate these objects, with less jargon. Something like `collections.namedtuple`, but again without redundant definitions and with the benefits of `__slots__`. This repo is the results of such endeavor.\n\n\n`TL;DR` - the [`@dataslots`](#dataslots) decorator ends up being the most useful implementation, free to skip to it if you want to see the fireworks.\n\n\n### `slots_factory()`\n\nThe first factory function made available is `slots_factory`. Simply import the function, and all **kwargs are assigned as attributes to an instance of a slots object. Type definitions are handled internally by the function, so successive calls to `slots_factory` with the same `_name` and `**kwargs` keys will return new instances of the same type.\n\nFor example:\n\n```python\nIn [1]: from slots_factory import slots_factory\n\nIn [2]: this = slots_factory(x=1, y=2, z=3)\n\nIn [3]: this\nOut[3]: SlotsObject(x=1, y=2, z=3)\n\nIn [4]: that = slots_factory(x=4, y=5, z=6)\n\nIn [5]: that\nOut[5]: SlotsObject(x=4, y=5, z=6)\n\nIn [6]: fizzbuzz = slots_factory(_name=\"fizzbuzz\", fizz=\"fizz\", buzz=\"buzz\")\n\nIn [7]: fizzbuzz\nOut[7]: fizzbuzz(fizz=fizz, buzz=buzz)\n\nIn [8]: slots_factory.__dict__\nOut[8]:\n{13844952821349480973: slots_factory.slots_factory.SlotsObject,\n7572372383060875: slots_factory.slots_factory.fizzbuzz}\n```\n\nAs we can see, we created three instances, `this`, `that`, and `fizzbuzz`. `this` and `that` are instances of the same type, since the function args were the same. `fizzbuzz` is a different type however, since its function arguments were different.\n\n```python\nIn [9]: type(this) == type(that)\nOut[9]: True\n\nIn [10]: type(this) == type(fizzbuzz)\nOut[10]: False\n```\n\nAnother benefit to this `SlotsObject` is that, as the underlying type is a slots object, the attributes are dynamic, unlike the `namedtuple`.\n\n```python\nIn [11]: this.x = 4\n\nIn [12]: this\nOut[12]: SlotsObject(x=4, y=2, z=3)\n```\n\nThe type identification and attribute setting is all done in C, in attempt to make instantiation as fast as possible. Instantiation of a `SlotObject` is still about 80% slower than the instantiation of a `namedtuple` (mainly because it handles type definitions internally). Attribute access is on par however, and faster than a normal object as expected.\n\n```python\nIn [13]: from collections import namedtuple\n\nIn [14]: This = namedtuple('This', ['x', 'y', 'z'])\n\nIn [15]: %timeit this = This(x=1, y=2, z=3)\n315 ns ± 1.58 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [16]: %timeit that = slots_factory('that', x=1,y=2,z=3)\n597 ns ± 1.38 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [17]: %timeit this.c\n24.6 ns ± 0.132 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [18]: %timeit that.c\n25.8 ns ± 0.13 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n%time\n```\n\n### `fast_slots()`\n\nThere's a second factory function, `fast_slots`, which is, obviously, faster. Instead of using the builtin hashing algorithm to generate an ID, it simply uses the object name and assumes that all objects named the same, are the same. Since it skips the hashing step, it builds slot instances much faster.\n\n```python\nIn [4]: from slots_factory import fast_slots\n\nIn [5]: %timeit that = fast_slots('that', x=1, y=2, z=3)\n442 ns ± 3.71 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n```\n\nInstead of relying on an internal ID mechanism, `fast_slots` leverages python's `try/except` functionality. The internal `_slots_factory_setattrs` method throws an exception when the object attributes are thought to be different, so when this happens `fast_slots` deletes its old internalized type definition and then builds a new one. As such, if you expect to be redefining the same type over and over again, it's best to use `slots_factory` for better overall performance. If however you're certain to be creating identical instances of the same type (with differing attribute variables of course, that is indeed allowed by `fast_slots`), then you'll be better of using `fast_slots` to do this.\n\n```python\nfrom slots_factory import slots_factory, fast_slots\n\n# use `slots_factory` like so:\nthis = slots_factory(x=1)\nthat = slots_factory(y=2)\n\n# use `fast_slots` like so:\ncategory = fast_slots('category', id=1, name='category 1')\ncategory = fast_slots('category', id=2, name='category 2')\n```\n\n### `type_factory()`\n\nFinally, if we're really craving the speeds, the most efficient way to use this module is to individually define your types and then manually spin up instances of these objects. This can be done by importing the `type_factory` and `slots_from_type` functions. \n\n```python\nfrom slots_factory import type_factory, slots_from_type\n\ntype_ = type_factory(['x', 'y', 'z'], _name=\"SlotsObject\")\ninstance = slots_from_type(type_, x=1, y=2, z=3,)\n```\n\n```python\nIn [6]: %timeit instance = slots_from_type(type_, x=1, y=2, z=3)\n323 ns ± 10.4 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n```\n\n\n### @dataslots\n\nThere's a new decorator provided in the `slots_factory` module which attempts to improve upon Python's `dataclasses.dataclass`. Class definitions can be decorated with the `@dataslots` decorator to generate instances of analogous types with `__slots__`. I say `analogous` because at runtime the decorator instantiates a new type instead of modifying the user's defined type. The user's type is simply used as a sort of blueprint for generating the desired type with `__slots__`.\n\n```python\nIn [1]: from slots_factory import dataslots\n\n@dataslots\nclass This:\n   x: int\n   y: int\n   z: int\n\nIn [2]: %timeit This(x=1, y=2, z=3)\n397 ns ± 1.51 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\n@dataslots\nclass This:\n   x: int = 1\n   y: int = 2\n   z: int = 3\n\nIn [2]: %timeit This()\n261 ns ± 1.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n```\n\nThe `@dataslots` decorator allows for users to set default values using standard python syntax, and defaults can be overwritten simply by defining a new value at instantiation. There is no ordering restrictions on default definitions. It's also worth noting that, normally, when writing `__slots__` classes, we can't define class attributes which conflict with the `__slots__` structure that Python creates. However due to the internal mechanics of `@dataslots`, we can set `__slots__` object defaults absent any annotations.\n\n```python\n@dataslots\nclass FizzBuzz:\n    fizz = 'fizz'\n    buzz: str\n    fizzbuzz: str = 'spam'\n\nIn [5]: this = FizzBuzz(buzz='buzz', fizzbuzz='fizzbuzz')\nOut[5]: FizzBuzz(fizz=fizz, buzz=buzz, fizzbuzz=fizzbuzz)\n```\n\n#### optional arguments for `@dataslots`\n\n`@dataslots` provides a `frozen` keyword argument as a boolean. Passing `frozen=True` to the `@dataslots` decorator forces instances to be immutable.\n\n```python\n@dataslots(frozen=True)\nclass FizzBuzz:\n    fizz: str = 'fizz'\n    buzz: str = 'buzz'\n\nIn [7]: fb = FizzBuzz()\n\nIn [8]: fb\nOut[8]: FizzBuzz(fizz=fizz, buzz=buzz)\n\nIn [9]: fb.fizz = 'buzz'\n-----------------------------------------------------------------------\nAttributeError                        Traceback (most recent call last)\n<ipython-input-9-63a20d67080e> in <module>\n----> 1 fb.fizz = 'buzz'\n\n~/programming/python/slots_factory/src/slots_factory/slots_factory.py in _frozen(self, *_, **__)\n127             def _frozen(self, *_, **__):\n128                 raise AttributeError(\"instance is immutable.\")\n--> 129             methods.update({\n130                 \"__setattr__\": _frozen,\n131                 \"__delattr__\": _frozen\n\nAttributeError: instance is immutable.\n```\n\n`@dataslots` also provides an `order` keyword argument as either a boolean or an iterable. If passed as a boolean, items are iterated over in whatever manner Python decides to sort the attribute names. Order can be made explicit by passing an iterable of attribute names for yielding.\n\n```python\n\n@dataslots(order=True)\nclass This:\n    x: int\n    y: int\n    z: int\n\nIn [1]: this = This(x=1, y=2, z=3)\n\nIn [2]: [x for x in this]\nOut[2]: [('x', 1), ('y', 2), ('z', 3)]     \n\n\n@dataslots(order=['x', 'z', 'y'])\nclass This:\n    x: int\n    y: int\n    z: int\n\nIn [3]: this = This(x=1, y=2, z=3)\n\nIn [4]: [x for x in this]\nOut[4]: [('x', 1), ('z', 3), ('y', 2)] \n```\n\nOrdering implies hierarchy, and hierarchy provides a means for rich comparisons. Instances that are ordered can be compared using Python's builtin comparison operators. Comparison is done by applying the respected operator's method as defined on the `self` of the pair of objects, in order, across attributes. Comparison is resolved at first instance of inequality.\n\n```python\n@dataslots(order=True)\nclass This:\n    x: int = 1\n    y: int = 2\n    z: int = 3\n\n@dataslots(order=True)\nclass That:\n    x: int = 4\n    y: int = 5\n    z: int = 6\n\nIn [1]: this, that = This(), That()\n\nIn [2]: this < that\nOut[2]: True\n\nIn [3]: this = This(x=6)\n\nIn [4]: this < that\nOut[4]: False\n```\n\nThough dataslots are not dictionaries, they have many of the properties you would expect from a dictionary object. As such, conversion to and from dictionaries is built in. And as dictionaries are ordered in Python 3.6+, we make sure to preserve order between conversions.\n\n```python\n@dataslots(order=[\"x\", \"z\", \"y\"])\nclass This:\n    x: int\n    y: int\n    z: int\n\nIn [1]: this = This(x=1, y=2, z=3)\n\nIn [2]: that = dict(this)\n\nIn [3]: that\nOut[3]: {'x': 1, 'z': 3, 'y': 2}\n\nIn [4]: dataslots.from_dict(that)\nOut[4]: SlotsObject(x=1, z=3, y=2)\n```\n\nDataslots also supports user-defined methods and properties. They can be defined as normal on the class, and @dataslots will be sure to carry these objects over to the `__slots__` object.\n\n```python\n@dataslots\nclass FizzBuzz:\n    fizz = 'fizz'\n    buzz: str = 'buzz'\n\n    def fizzbuzz(self):\n        return self.fizz + self.buzz\n\nIn [1]: fizzbuzz = FizzBuzz()\n\nIn [2]: fizzbuzz.fizzbuzz()\nOut[2]: \"fizzbuzz\"\n\n@dataslots\nclass FizzBuzz:\n    fizz = 'fizz'\n    buzz: str = 'buzz'\n\n    @property\n    def fizzbuzz(self):\n        return self.fizz + self.buzz\n\n    @fizzbuzz.setter\n    def fizzbuzz(self, item):\n        self.fizz, self.buzz = item\n\nIn [1]: fizzbuzz = FizzBuzz()\n\nIn [2]: fizzbuzz.fizzbuzz\nOut[2]: 'fizzbuzz'\n\nIn [3]: fizzbuzz.fizzbuzz = (\"This\", \"That\")\n\nIn [4]: fizzbuzz.fizzbuzz\nOut[4]: 'ThisThat'\n```\n\n#### Mutable default types in `@dataslots` via `lambda`\n\nGiven the nature of mutable types in Python, it's always been considered gauche to define default values as mutable types within object definitions. In order to allow for mutable defaults whose references aren't shared across instances, `@dataslots` default values can be assigned as either `type` type or a `lambda` expression with no arguments. These defaults are then called on instantiation, and instances assigned the result of the callable.\n\n```python\n@dataslots\nclass RecordsCollection:\n    list_of_records = lambda: [{\"record_id\": 0, \"name\": \"Terminal Record\"}]\n    record_count: int = 1\n\n    def add_record(self, _id, name):\n        self.record_count += 1\n        self.list_of_records.append({\n                \"record_id\": _id,\n                \"name\": name\n            }\n        )\n\n@dataslots\nclass RecordIds:\n    ids = set\n\n    def ingest_record(self, record):\n        for item in record.list_of_records:\n            self.ids.add(item[\"record_id\"])\n\n\nIn [1]: n1 = RecordsCollection()\n\nIn [2]: %timeit RecordsCollection()\nOut[2]: 496 ns ± 1.95 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [3]: n2 = RecordsCollection()\n\nIn [4]: n1.add_record(5, \"New Record\")\n\nIn [5]: n1.list_of_records\nOut[5]: [{'record_id': 0, 'name': 'Terminal Record'}, {'record_id': 5, 'name': 'New Record'}]\n\nIn [6]: n2.list_of_records\nOut[6]: [{'record_id': 0, 'name': 'Terminal Record'}]\n\nIn [7]: rec_ids = RecordIds()\n\nIn [8]: rec_ids.ingest_record(n1)\n\nIn [9]: rec_ids.ids\nOut[9]: {0, 5}\n```\n\n\n#### Inheritance and Composition in `@dataslots`\n\n`@dataslots` objects can inherit artifacts from other dataslots. However, given that `@dataslots` is regenerating new datatypes on the fly, it currently doesn't have any concept of method resolution order, nor does it understand the concept of `super()`. A derived class simply updates its default values with preference given to the first base class in queue. Given this, class composition is generally regarded as a better implementation strategy, given `@dataslots`'s compatibility with default type instantiations.\n\n```python\n\"\"\"inheritance\"\"\"\n@dataslots\nclass A:\n    a: list = lambda: [1,2,3]\n\n@dataslots\nclass B:\n    a = list\n\n@dataslots\nclass DerivedOne(A, B):\n    def get_list(self):\n        return self.a\n\n@dataslots\nclass DerivedTwo(B, A):\n    def get_list(self):\n        return self.a\n\nIn [1]: instance_one = DerivedOne()\n\nIn [2]: instance_two = DerivedTwo()\n\nIn [3]: instance_one.get_list()\nOut[3]: [1,2,3]\n\nIn [4]: instance_two.get_list()\nOut[4]: []\n```\n\n```python\n\"\"\"composition\"\"\"\n@dataslots\nclass SubcomponentOne:\n    x = 1\n\n@dataslots\nclass SubcomponentTwo:\n    x = lambda: [1, 2, 3]\n\n@dataslots\nclass RootClass:\n    s1 = SubcomponentOne\n    s2 = SubcomponentTwo\n\nIn [1]: instance = RootClass()\n\nIn [2]: repr(instance)\nOut[2]: 'RootClass(s1=SubcomponentOne(x=1), s2=SubcomponentTwo(x=[1, 2, 3]))'\n\nIn [3]: instance.s2.x\nOut[3]: [1, 2, 3]\n```\n\n#### Dependent defaults in `@dataslots`\n\nAttributes oftentimes depend on the state of other attributes within an object. This can be tricky when it comes to default values in __slots__, as if you set values at type definition, those attributes become read-only. One solution to this is to define the attribute as a `@property`, so that the `property` has access to the instance when referenced.\n\n`@dataslots` provides a leaner alternative, once again using the `lambda` function as a means for default assignments. lambda functions assigned to attributes can take a single argument, `self`. At instantiation the lambda is called and the resultant is assigned to the instance attribute.\n\n```python\n\nimport pymongo\nimport redis\n\nfrom slots_factory import dataslots\n\n@dataslots\nclass Redis:\n    queue = redis.Redis(host=\"redis-queue\")\n\n\n@dataslots\nclass Mongo:\n    client = pymongo.MongoClient(\"mongodb://mongo:27017\")\n    database = lambda self: self.client.get_database(\"primary\")\n\n\n@dataslots\nclass Connections:\n    mongo = Mongo\n    redis = Redis\n\nIn [1]: conn = Connections()\n\nIn [2]: conn.mongo.database\nOut[2]: Database(MongoClient(host=['mongo:27017'], document_class=dict, tz_aware=False, connect=True), 'primary')\n```\n\n## Appendix: Some pure-Python implementations\n\nThis module uses custom C extensions for trying to speed up attribute write times. However the inclusion of this requires `slots_factory` to be installed and the extensions compiled. If that seems undesirable, here are some pure-Python implementations that can simply be copied into a codebase.\n\n```python\n\ndef slots_factory(_name=\"SlotsObject\", **kwargs):\n    stores = slots_factory.__dict__\n    _keys = frozenset(kwargs)\n    if _name == \"SlotsObject\":\n        _id = hash(_keys)\n        _type = stores.get(_id)\n    else:\n        _id = hash(_name) ^ hash(_keys)\n        _type = stores.get(_id)\n    if not _type:\n        def __repr__(self):\n            contents = \", \".join(\n                [f\"{key}={getattr(self, key)}\" for key in self.__slots__]\n            )\n            return f\"{self.__class__.__name__}({contents})\"\n        _type = type(\n            _name,\n            (),\n            {\"__slots__\": _keys, \"__repr__\": __repr__}\n        )\n        stores[_id] = _type\n    instance = _type()\n    for key, value in kwargs.items():\n        setattr(instance, key, value)\n    return instance\n\n\ndef fast_slots(_name=\"SlotsObject\", **kwargs):\n    _type = fast_slots.__dict__.get(_name)\n    if not _type:\n        def __repr__(self):\n            contents = \", \".join(\n                [f\"{key}={getattr(self, key)}\" for key in self.__slots__]\n            )\n            return f\"{self.__class__.__name__}({contents})\"\n        _type = type(\n            _name,\n            (),\n            {\"__slots__\": kwargs.keys(), \"__repr__\": __repr__}\n        )\n        fast_slots.__dict__[_name] = _type\n    instance = _type()\n    try:\n        for key, value in kwargs.items():\n            setattr(instance, key, value)\n        return instance\n    except AttributeError:\n        del fast_slots.__dict__[_name]\n        return fast_slots(_name, **kwargs)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/1mikegrn/slots_factory",
    "keywords": "",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slots-factory",
    "package_url": "https://pypi.org/project/slots-factory/",
    "platform": "",
    "project_url": "https://pypi.org/project/slots-factory/",
    "project_urls": {
      "Homepage": "https://github.com/1mikegrn/slots_factory"
    },
    "release_url": "https://pypi.org/project/slots-factory/0.2.7/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.2.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11381987,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a1cb64ce8a3a5a85690a3961a6050b2995956d407e56a297d859c5d0a9b219d",
          "md5": "1a0ad86e543f90bc04971d3bd063f9b6",
          "sha256": "c17c07d5714cace0f2655feb12eca65b0da4071893be35bb3f8955d1263e4d41"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a0ad86e543f90bc04971d3bd063f9b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6456,
        "upload_time": "2021-08-16T14:25:05",
        "upload_time_iso_8601": "2021-08-16T14:25:05.276108Z",
        "url": "https://files.pythonhosted.org/packages/6a/1c/b64ce8a3a5a85690a3961a6050b2995956d407e56a297d859c5d0a9b219d/slots_factory-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "876f0d0dc7e77e75470f9e642fd41e2318b507076d544e9070a0eabdbf4ef799",
          "md5": "bb82bc5c0aecbf131e4739fa985d5197",
          "sha256": "d390f115b4c07b30e86d56837a46f0c952406f7df926271a329f6e7d3b3a7c6a"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb82bc5c0aecbf131e4739fa985d5197",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8259,
        "upload_time": "2021-08-16T14:26:41",
        "upload_time_iso_8601": "2021-08-16T14:26:41.986304Z",
        "url": "https://files.pythonhosted.org/packages/87/6f/0d0dc7e77e75470f9e642fd41e2318b507076d544e9070a0eabdbf4ef799/slots_factory-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cde55da12e22b341c7cf7beb50c5f8e4806ff6b79fc76f5eb0155300c8b11a7b",
          "md5": "96ac437089513378b29b92862da40604",
          "sha256": "d6572c600cf99c18e0dbbc9c12f421f7a7ae70638c91292a35473490326133ea"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "96ac437089513378b29b92862da40604",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8268,
        "upload_time": "2021-08-16T15:26:59",
        "upload_time_iso_8601": "2021-08-16T15:26:59.589734Z",
        "url": "https://files.pythonhosted.org/packages/cd/e5/5da12e22b341c7cf7beb50c5f8e4806ff6b79fc76f5eb0155300c8b11a7b/slots_factory-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2467e933a6dec993e497c6312556881a9a27a99094b94f427f3787363d12c00d",
          "md5": "6f43c2ef2f2400fc8b71ad50e7176d29",
          "sha256": "9e69f08c3eb76db58d07ab786b64b926d4f9012318e3241745a6b848c7d9102a"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6f43c2ef2f2400fc8b71ad50e7176d29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8246,
        "upload_time": "2021-08-16T16:06:23",
        "upload_time_iso_8601": "2021-08-16T16:06:23.561958Z",
        "url": "https://files.pythonhosted.org/packages/24/67/e933a6dec993e497c6312556881a9a27a99094b94f427f3787363d12c00d/slots_factory-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99cbe40bdb948420a4534b7a6efc7595c767ccfe51519d8b0af9da1a9defdb1f",
          "md5": "3d439461f1c3922e977e09807ee46898",
          "sha256": "a21b578f34294df6aa36880b89309cf26fa51958c198c6a5446d51bce2276d83"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3d439461f1c3922e977e09807ee46898",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8315,
        "upload_time": "2021-08-16T16:21:41",
        "upload_time_iso_8601": "2021-08-16T16:21:41.755883Z",
        "url": "https://files.pythonhosted.org/packages/99/cb/e40bdb948420a4534b7a6efc7595c767ccfe51519d8b0af9da1a9defdb1f/slots_factory-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48218cdcceccc9dcfb243c5a61344b14ae6e06fb84e1995c4632875640eb2cf2",
          "md5": "4806be1c7043d32c97e000457602973a",
          "sha256": "dfec0c050051b6aacbccd4f634deed7b4d4056d55c84757a7f03b08edeca7a76"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4806be1c7043d32c97e000457602973a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12416,
        "upload_time": "2021-08-17T10:24:27",
        "upload_time_iso_8601": "2021-08-17T10:24:27.814781Z",
        "url": "https://files.pythonhosted.org/packages/48/21/8cdcceccc9dcfb243c5a61344b14ae6e06fb84e1995c4632875640eb2cf2/slots_factory-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d0d7b8b7999b9e35e940ade3b8fa9eb962662a1505018b31a7b2a66b1cd22bd",
          "md5": "97e3a27e0835cd7fa04c7acc7e49e3c8",
          "sha256": "eb8d96a539c35f1579ffa9ef3376bf8d3bbb1d7c32cd242139d72438582ddf21"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "97e3a27e0835cd7fa04c7acc7e49e3c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12649,
        "upload_time": "2021-08-17T17:39:11",
        "upload_time_iso_8601": "2021-08-17T17:39:11.813085Z",
        "url": "https://files.pythonhosted.org/packages/3d/0d/7b8b7999b9e35e940ade3b8fa9eb962662a1505018b31a7b2a66b1cd22bd/slots_factory-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6763f6eebc458ceef5ff09e7bad3efb708b7a2bfec2ef1c30738bc8bc17f777",
          "md5": "eee2da3a3b73ab03a6fd3a214771e122",
          "sha256": "ae53707d1cdd3579cee4f8977e010d546e5c6689a32125233c35725fd980124e"
        },
        "downloads": -1,
        "filename": "slots_factory-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "eee2da3a3b73ab03a6fd3a214771e122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13393,
        "upload_time": "2021-08-17T21:25:13",
        "upload_time_iso_8601": "2021-08-17T21:25:13.951178Z",
        "url": "https://files.pythonhosted.org/packages/f6/76/3f6eebc458ceef5ff09e7bad3efb708b7a2bfec2ef1c30738bc8bc17f777/slots_factory-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f6a8cf4473051298cd9847c63fb5ffba1a2f26288af936be95e9220b2e00bc3",
          "md5": "e5f574a540377bbec6a1fa8cc2a47fe3",
          "sha256": "e587463c80c2436dd1b640f7caabff112b5acafcdd4da52df1d4def7b4042b61"
        },
        "downloads": -1,
        "filename": "slots_factory-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e5f574a540377bbec6a1fa8cc2a47fe3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17304,
        "upload_time": "2021-08-20T17:34:42",
        "upload_time_iso_8601": "2021-08-20T17:34:42.362229Z",
        "url": "https://files.pythonhosted.org/packages/6f/6a/8cf4473051298cd9847c63fb5ffba1a2f26288af936be95e9220b2e00bc3/slots_factory-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "791f4ba9e492a971d2fa50604f97476911d4823afca0c24d3660fca91b24aa5a",
          "md5": "acf149a21e06e960d5675cbdfee291ee",
          "sha256": "05526295e6ea3bd777cac5480660e42dd77b50aa99663b428cc33481f5dcfa82"
        },
        "downloads": -1,
        "filename": "slots_factory-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "acf149a21e06e960d5675cbdfee291ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17333,
        "upload_time": "2021-08-20T17:51:42",
        "upload_time_iso_8601": "2021-08-20T17:51:42.530348Z",
        "url": "https://files.pythonhosted.org/packages/79/1f/4ba9e492a971d2fa50604f97476911d4823afca0c24d3660fca91b24aa5a/slots_factory-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a1ee0f735c7649d2a1232feadf500a4be586d9e672c507d3c9d0d913afa263d",
          "md5": "484a3dcde0ef7956a3e09b858d732456",
          "sha256": "8fba26ccbd5163c46a7aac8e6f77c478666cff43d96202645e5a6d68bbd678a7"
        },
        "downloads": -1,
        "filename": "slots_factory-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "484a3dcde0ef7956a3e09b858d732456",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17922,
        "upload_time": "2021-08-24T04:33:43",
        "upload_time_iso_8601": "2021-08-24T04:33:43.400084Z",
        "url": "https://files.pythonhosted.org/packages/0a/1e/e0f735c7649d2a1232feadf500a4be586d9e672c507d3c9d0d913afa263d/slots_factory-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a57e3115b120bd44016e7ed422bccf94f241e9708e819dfeddd402dba1b5c795",
          "md5": "e8e86255006cb09bfbf3cdd10b36d471",
          "sha256": "af02d7f1da5f090046d17ec1997ded94121cd6dd0c4c37f30bc20697f7f84662"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8e86255006cb09bfbf3cdd10b36d471",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19520,
        "upload_time": "2021-08-25T01:23:46",
        "upload_time_iso_8601": "2021-08-25T01:23:46.128668Z",
        "url": "https://files.pythonhosted.org/packages/a5/7e/3115b120bd44016e7ed422bccf94f241e9708e819dfeddd402dba1b5c795/slots_factory-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9f2fa66f3d20f1579235dee8e2b8b1884a2623eeaca400ffb2a27e65117a8bc",
          "md5": "5289c6974b10a3821d45f554b2dd4131",
          "sha256": "78904c7fe65a92b83b3e576cdb4c34fcf02bccba8d27e2e349235315678a8ba3"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5289c6974b10a3821d45f554b2dd4131",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19515,
        "upload_time": "2021-08-25T15:13:30",
        "upload_time_iso_8601": "2021-08-25T15:13:30.345323Z",
        "url": "https://files.pythonhosted.org/packages/c9/f2/fa66f3d20f1579235dee8e2b8b1884a2623eeaca400ffb2a27e65117a8bc/slots_factory-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c1ac6edf19b34da17aecd4f96cd33dca7adf627d5f8a59ea6a3c6f616e23cc",
          "md5": "1d3ec9d6dc53dc573b0e8038fb5dbbc0",
          "sha256": "b1b44b74a9e29e6f3de3f998a46828291927796ccbd695f279664fb8ca98d906"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1d3ec9d6dc53dc573b0e8038fb5dbbc0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19519,
        "upload_time": "2021-08-25T18:05:26",
        "upload_time_iso_8601": "2021-08-25T18:05:26.918879Z",
        "url": "https://files.pythonhosted.org/packages/56/c1/ac6edf19b34da17aecd4f96cd33dca7adf627d5f8a59ea6a3c6f616e23cc/slots_factory-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc13c8bcfb57d198b1a6438ed1921f5569b7ec839aaf80387acf119ad47f5026",
          "md5": "8d729b4d59fafa6a99565e19dd5cf034",
          "sha256": "7eadbaa1d65f6517ac8471b6dc79b19ae10f3dc024dbaf6d9953da3273de2e28"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8d729b4d59fafa6a99565e19dd5cf034",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17940,
        "upload_time": "2021-08-30T01:40:01",
        "upload_time_iso_8601": "2021-08-30T01:40:01.330321Z",
        "url": "https://files.pythonhosted.org/packages/bc/13/c8bcfb57d198b1a6438ed1921f5569b7ec839aaf80387acf119ad47f5026/slots_factory-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff11246e91b0c8cf8e4bb25b9610fb60765ea5a5c175a740d2cee5acec04e7ef",
          "md5": "35a8f37bf630b4a389c90ef871ff7bd6",
          "sha256": "728b3726e45102d46b2791cc3bdaefe71a6d8d626c36050d2cadd68c88050486"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "35a8f37bf630b4a389c90ef871ff7bd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19000,
        "upload_time": "2021-09-04T18:19:49",
        "upload_time_iso_8601": "2021-09-04T18:19:49.406151Z",
        "url": "https://files.pythonhosted.org/packages/ff/11/246e91b0c8cf8e4bb25b9610fb60765ea5a5c175a740d2cee5acec04e7ef/slots_factory-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4473f152b3f4935c523f53f800926073ba718478fbd65645d7c5e16b076af309",
          "md5": "71e84b566d6b36a5c457a667f35cd4b1",
          "sha256": "cabe7ed393d297c2149797dd2f36c53e752f9628e0ac295900719d83468b56ca"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "71e84b566d6b36a5c457a667f35cd4b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19010,
        "upload_time": "2021-09-04T19:42:07",
        "upload_time_iso_8601": "2021-09-04T19:42:07.690508Z",
        "url": "https://files.pythonhosted.org/packages/44/73/f152b3f4935c523f53f800926073ba718478fbd65645d7c5e16b076af309/slots_factory-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6c1911d9e000a67a45dc0920b23d07bed0b628075857c7303f1a9f4430cc3f0",
          "md5": "ced248aa530f9c0f889c0866d0bcc41a",
          "sha256": "b76e072ca4215f75a58edbeb1a7e1b16a99bbf2de76d7bd9049611ec17c7f2e0"
        },
        "downloads": -1,
        "filename": "slots_factory-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ced248aa530f9c0f889c0866d0bcc41a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18672,
        "upload_time": "2021-09-07T04:38:09",
        "upload_time_iso_8601": "2021-09-07T04:38:09.069766Z",
        "url": "https://files.pythonhosted.org/packages/b6/c1/911d9e000a67a45dc0920b23d07bed0b628075857c7303f1a9f4430cc3f0/slots_factory-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6c1911d9e000a67a45dc0920b23d07bed0b628075857c7303f1a9f4430cc3f0",
        "md5": "ced248aa530f9c0f889c0866d0bcc41a",
        "sha256": "b76e072ca4215f75a58edbeb1a7e1b16a99bbf2de76d7bd9049611ec17c7f2e0"
      },
      "downloads": -1,
      "filename": "slots_factory-0.2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "ced248aa530f9c0f889c0866d0bcc41a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18672,
      "upload_time": "2021-09-07T04:38:09",
      "upload_time_iso_8601": "2021-09-07T04:38:09.069766Z",
      "url": "https://files.pythonhosted.org/packages/b6/c1/911d9e000a67a45dc0920b23d07bed0b628075857c7303f1a9f4430cc3f0/slots_factory-0.2.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}