{
  "info": {
    "author": "Maik Wojcieszak",
    "author_email": "mw@wobew-systems.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# UJO Schema\n\n[![pypi](https://img.shields.io/pypi/v/UJOSchema.svg)](https://pypi.org/project/UJOSchema/) [![license](https://img.shields.io/pypi/l/UJOSchema.svg)](https://pypi.org/project/UJOSchema/)\n\nUJO Schema is an easy to read and easy to write language to define UJO data\nstructures. The definition is translated into a documentation and/or compiled into a binary form for fast an reliable checks on data sets.\n\n## Convert UJO Schema to markdown documentation\n\nUJO Schema files can be converted into a markdown documentation.\n\n__Usage:__\n\n```\nUsage:\n  python -m UJOSchema (-h | --help)\n  python -m UJOSchema into markdown <source> [-d FOLDER] [-e EXTENSION]\n\nOptions:\n  -h --help  Show this screen.\n\n  into markdown <source>\n      convert given SOURCE (file or folder) to markdown\n\n  -d FOLDER --destination FOLDER\n      destination folder for generated markdown files [default: .]\n\n  -e EXTENSION --extension EXTENSION\n      if SOURCE is a folder, only process files with the specified extension [default: .ujs]\n```\n\n__Example:__\n\n```\npython -m UJOSchema into markdown .\\examples\\ujs2md -d testoutput\n```\n\n## Module Name\n\nUJO Schema can be divided into multiple modules. Each module is described in one file. At the\nbeginning of a file the module name is defined. Additionally a documentation section for the\nparticular module can be added.\n\n```python\nmodule myModule;\n```\n\nAdding documentation is done by using the doc keyword.\n\n```python\nmodule myModule\n    : doc \"\"\"This text is a description\nof my module\"\"\";\n```\n\n## Types\n\n### Atomic Types\n\nAtomic types define the basic data fields in UJO. All data structures are build upon atomic types.\n\n| Keyword       | Description               |\n|---------------|---------------------------|\n| `int64`       | 64 bit integer            |\n| `int32`       | 32 bit integer            |\n| `int16`       | 16 bit integer            |\n| `int8`        | 8 bit integer             |\n| `uint64`      | 64 bit unsigned integer   |\n| `uint32`      | 32 bit unsigned integer   |\n| `uint16`      | 16 bit unsigned integer   |\n| `uint8`       | 8 bit unsigned integer    |\n| `float64`     | double precision float    |\n| `float32`     | single precision float    |\n| `float16`     | half precision float      |\n| `bool`        | boolean (True/False)      |\n| `date`        | a date with Month:Day:Year|\n| `time`        | time Hour:Minute:Second   |\n| `datetime`    | combination of time and date |\n| `timestamp`   | combination of time and date and millisecond |\n| `string`      | utf8 string |\n| `cstring`     | a C string terminated by \\x00 |\n| `binary`      | untyped binary object |\n\n### Variant Type\n\n| Keyword       | Description               |\n|---------------|---------------------------|\n| `variant`     | All atomic and container types including `null`|          |\n\nThe variant can hold values of any atomic and container type. The only constraint\npossible for variant type definitions is to exclude null as a possible value.\n\n## Defining Constraint Types\n\nBased on Atomic and Container Types new types can be defined by applying constraint\nrules on them.\n\nCreating a new type based on an existing atomic type without constraints. The new\ntype can contain the same values as the original type.\n\n```python\nnew_type = int64;\n```\n\nThe new type can be documented using `doc`.\n\n```python\nnew_type = int64 : doc \"This is my new type\"\n```\n\nMultiple lines can be used for better readability.\n\n```python\nnew_type = int64\n    : doc \"This is my new type\";\n```\n\n## Constraint Rules\n\nConstraint Rules are used to define constraints on an atomic type.\n\n### Defining specific values\n\nStorypoints are an agile metric containing only specific numbers.\n\n```python\nStoryPoints = uint16\n    : in (1, 2, 3 ,5, 8, 13, 20, 40, 100 );\n\nSciConst = float32\n    : in (3.14, 9.81, 343,2);\n```\n\nThe `in` keyword can also be used to define specific words for a string.\n\n```python\nCardColor = string\n    : in (\"Heart\", \"Spade\", \"Diamond\", \"Club\");\n```\n\n### Defining value ranges\n\nA range includes all values from a lowest value to highest value. If the lowest or highest value is omitted, the minimum or maximum possible value of the chosen atomic type is used. This rule can only be applied to numeric types.\n\n```python\n# all values from 0 to 10\nlowRange = uint32\n    : in ( .. 10 );\n\n# all values from 10 to 4.294.967.295\nHiRange = uint32\n    : in ( 10 .. );\n```\n\n### Documenting values\n\nValues and ranges can be documented using `doc`.\n\n```python\nCardColor = string\n    : in (\n        \"Heart\"     : doc \"the red heart symbol\",\n        \"Spade\"     : doc \"this is black\",\n        \"Diamond\"   : doc \"a red symbol\",\n        \"Club\"      : doc \"looks like a little tree\");\n```\n\n### Make a value mandatory\n\nValues is UJO can be null by default. If null is not allowed in a dataset the `not null`\nrule is applied.\n\n```python\nnew_type = int64\n    : not null\n    : doc \"This is my new type with no null values allowed\";\n```\n\nIf a value is mandatory, a default value can be applied.\n\n```python\nnew_type = int64\n    : not null default 5\n    : doc \"This is my new type with no null values allowed, but with an automatic default value of 5\";\n```\n\n## List Type\n\nLists are a collection of values organized in a fixed sequence.To define a list\nfrom any valid type including previously defined custom types the `*` operator is used.\n\n### A list for a specific type\n\nA list can be created from any valid type including container types. Here is an example how\nto create a list of int64 values. Only int64 values and null can be stored.\n\n```python\nintList = int64*;\n```\n\nIf I want to exclude null values from the list I can apply the relating type rule.\n\n```python\nintList = int64*\n    : not null;\n```\n\nA range can be applied as well.\n\n```python\nintList = int64*\n    : not null\n    : in ( 100 .. 200 );\n```\n\nA constraint type can be defined first and used in the list definition.\n\n```python\n# a constraint type\nMyType = int64\n    : in ( 100 ..200)\n    : not null;\n\n# a list of this type\nintList = MyType*;\n```\n\n### Set a length constraint for a list\n\nTo be sure a list contains a specifc number of elemts, a `length()` constraint\ncan be applied.\n\n```python\nintList = int64*\n    : length(5);\n```\n\nThe `length(5)` sets the length the list to exactly 5 elements.\n\nTo set minimum and maximum length, high and low length can be used.\n\nSet the maximum length to 10.\n\n```python\nintList = int64*\n    : length(.. 10);\n```\n\nSet the minimum length to 10.\n\n```python\nintList = int64*\n    : length(10 ..);\n```\n\nSet the min and max length.\n\n```python\nintList = int64*\n    : length(10 .. 20);\n```\n\n\n### Defining a Record\n\nA record is a limited, fixed sequence of\nvalues with specific and fixed types.\n\nFor reference and probably for later conversions into JSON or XML data a\nname is applied to the data fields in the record.\n\n```python\nheader = [\n    CreationTime   = timestamp,\n    SequenceNumber = int64,\n    Status         = int16,\n    Message        = string,\n    Values         = list\n];\n```\n\nConstraint rules can be applied on each value and the field can be documented.\n\n```python\nheader = [\n    CreationTime = timestamp : doc \"Creation time of the message\",\n    SequenceNumber = int64 : doc \"sequence number to order the messages\",\n    Status = int16\n        : in (\n                0 : doc \"Ok\",\n                1 : doc \"Warning\",\n                2 : doc \"Error\",\n                3 : doc \"Critical\"\n            )\n        : not null\n        : doc \"Processing status\",\n    Message = string : doc \"An error message\",\n    Values = variant* : doc \"a list with some values\"\n] : doc \"This is a record\";\n```\n\n### Extending a record\n\nAn already defined record can be extended to contain more fields. The resulting\nrecords appends the new fields to the previously defined record part.\n\n```python\naMessage = extend header [\n    temperature = float32 : doc \"value read from a sensor\",\n    FanStatus = bool : doc \"True = On, False = Off\"\n];\n```\n\n## Associative array (map)\n\nConstraints on Assoziative arrays apply to its values. Keys can be numbers and\nstrings. Values can be any type including containers.\n\nTo define a map type key type and value type have to be defined.\n\n```python\nmymap = <string -> variant>;\n```\n\nDefines a map with string keys and variant values.\n\n## Objects\n\nAn object is a map of fixed keys to reference values.\n\nThe following example shows how to define an object.\n\n```python\nmapType = {\n    3.14          -> variant*,\n    \"temperature\" -> cstring : doc \"another doc string\" }\n} : doc \"object defintion\";\n```\n\n### Extending an object\n\nA static map defintion can be extended using the `extend` keyword.\n\n```python\nextMapType = extend mapType {\n    5      -> vriant*,\n    \"test\" -> cstring : doc \"another doc string\" }\n: doc \"extend an object\";\n```\n\n## Defining variant types\n\nThe type `variant` is a wildcard for any types available, no matter if atomic, custom or container.\nSometimes a data definition requires the flexibility of a variant, but still needs to be limited\nto a subset of types.\n\n```python\nnumeric = ( int64, int32, int16, float64, float32, float16 )\n    : doc \"a type that can contain values of any of the listed types\";\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.industrial-devops.org",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "UJOSchema",
    "package_url": "https://pypi.org/project/UJOSchema/",
    "platform": "",
    "project_url": "https://pypi.org/project/UJOSchema/",
    "project_urls": {
      "Homepage": "https://www.industrial-devops.org"
    },
    "release_url": "https://pypi.org/project/UJOSchema/0.3.66/",
    "requires_dist": [
      "lark-parser",
      "docopt",
      "ujotypes"
    ],
    "requires_python": "",
    "summary": "UJO Schema is an easy to read and easyto write language to define UJO data structures",
    "version": "0.3.66",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9133078,
  "releases": {
    "0.3.62": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9871a82a31e805a60da9577d339fa1f7b4540ac8e2d6cb1c2195ede546340cbc",
          "md5": "ce20510659c6aae722fd57a2986fd71e",
          "sha256": "535067479c28fd64156c084dcaead6257c1861757310e5640e07574ea450d2b1"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.62-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce20510659c6aae722fd57a2986fd71e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23589,
        "upload_time": "2020-05-15T10:57:51",
        "upload_time_iso_8601": "2020-05-15T10:57:51.544623Z",
        "url": "https://files.pythonhosted.org/packages/98/71/a82a31e805a60da9577d339fa1f7b4540ac8e2d6cb1c2195ede546340cbc/UJOSchema-0.3.62-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6451bc5349629caaed6e4060f3496fe04a36ef9ee8f5af0f24e1c3b61ee274f4",
          "md5": "fe5602ba8bb325e0e9b569bc3abb2a18",
          "sha256": "7b11248cd9072c0a4cf4489a75a335add832327e1ab01ac964ef87485ae9c0cf"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.62.tar.gz",
        "has_sig": false,
        "md5_digest": "fe5602ba8bb325e0e9b569bc3abb2a18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18777,
        "upload_time": "2020-05-15T10:57:54",
        "upload_time_iso_8601": "2020-05-15T10:57:54.372239Z",
        "url": "https://files.pythonhosted.org/packages/64/51/bc5349629caaed6e4060f3496fe04a36ef9ee8f5af0f24e1c3b61ee274f4/UJOSchema-0.3.62.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.63": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6de8e207fcf014b65f6b672b1a877775183b0eb38c0876270239c4054e2b9036",
          "md5": "309dbb98f8c5e18820289d32e72ececc",
          "sha256": "cf995ed5b9fa37833fb6ddbda5d2981f4c2debd9af98d27153583203d1f28962"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.63-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "309dbb98f8c5e18820289d32e72ececc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25763,
        "upload_time": "2020-11-24T10:18:53",
        "upload_time_iso_8601": "2020-11-24T10:18:53.858227Z",
        "url": "https://files.pythonhosted.org/packages/6d/e8/e207fcf014b65f6b672b1a877775183b0eb38c0876270239c4054e2b9036/UJOSchema-0.3.63-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05315601d66f3c258370c400b7468d86e331d22847b7809451fc0d6c053373e7",
          "md5": "f659203e20abfb244ff27862db489fce",
          "sha256": "999f592dd82c5645bbae1915935646dcb3dc5a409bfc45f24f8678396a2a3091"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.63.tar.gz",
        "has_sig": false,
        "md5_digest": "f659203e20abfb244ff27862db489fce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20245,
        "upload_time": "2020-11-24T10:18:55",
        "upload_time_iso_8601": "2020-11-24T10:18:55.849661Z",
        "url": "https://files.pythonhosted.org/packages/05/31/5601d66f3c258370c400b7468d86e331d22847b7809451fc0d6c053373e7/UJOSchema-0.3.63.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.64": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcec3f92d31810f727b518b9f939a2561c88f3f316e966b07fc5c20b43616875",
          "md5": "e66b6eca638deab944b8f35c35787a90",
          "sha256": "6bbccb8a9918d77a6947857d7b919f771a5635da44fade551d05de6e89f3d29c"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.64-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e66b6eca638deab944b8f35c35787a90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27310,
        "upload_time": "2020-11-24T10:44:29",
        "upload_time_iso_8601": "2020-11-24T10:44:29.908016Z",
        "url": "https://files.pythonhosted.org/packages/bc/ec/3f92d31810f727b518b9f939a2561c88f3f316e966b07fc5c20b43616875/UJOSchema-0.3.64-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6afae544106fc787b8435c57fac47bd5b6052cf5e5c13f1862a95484c3890a90",
          "md5": "85e82e2c31abbc1625ba0b41bae5b0ba",
          "sha256": "f3da877e034949d7e9345df2bee17ab102ccc3d6a2785c01a800e71bf4e4dfd5"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.64.tar.gz",
        "has_sig": false,
        "md5_digest": "85e82e2c31abbc1625ba0b41bae5b0ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21163,
        "upload_time": "2020-11-24T10:44:32",
        "upload_time_iso_8601": "2020-11-24T10:44:32.286316Z",
        "url": "https://files.pythonhosted.org/packages/6a/fa/e544106fc787b8435c57fac47bd5b6052cf5e5c13f1862a95484c3890a90/UJOSchema-0.3.64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.66": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e74e56aa8e76c31c714f297d1e479b71f947681a87c50c21992b0f78c2eb0a99",
          "md5": "f155eec070c4a9a4cc48d5401939f958",
          "sha256": "dbbbe4c43900325844364fe09f6b8b84b502711212884748529bda475df46e7c"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.66-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f155eec070c4a9a4cc48d5401939f958",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27552,
        "upload_time": "2021-01-14T14:26:29",
        "upload_time_iso_8601": "2021-01-14T14:26:29.704847Z",
        "url": "https://files.pythonhosted.org/packages/e7/4e/56aa8e76c31c714f297d1e479b71f947681a87c50c21992b0f78c2eb0a99/UJOSchema-0.3.66-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "768b8a728be43f15f1220ca8b4872abdaa4dc9d975296ca6639c95610e9a8fe4",
          "md5": "8b64dd2ed8977b05c34a8f772de3dbcb",
          "sha256": "48d053e5ba704cf5bfd3f904ace820f0b32606d486df0ab232abcda205f24d74"
        },
        "downloads": -1,
        "filename": "UJOSchema-0.3.66.tar.gz",
        "has_sig": false,
        "md5_digest": "8b64dd2ed8977b05c34a8f772de3dbcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21389,
        "upload_time": "2021-01-14T14:26:31",
        "upload_time_iso_8601": "2021-01-14T14:26:31.783504Z",
        "url": "https://files.pythonhosted.org/packages/76/8b/8a728be43f15f1220ca8b4872abdaa4dc9d975296ca6639c95610e9a8fe4/UJOSchema-0.3.66.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e74e56aa8e76c31c714f297d1e479b71f947681a87c50c21992b0f78c2eb0a99",
        "md5": "f155eec070c4a9a4cc48d5401939f958",
        "sha256": "dbbbe4c43900325844364fe09f6b8b84b502711212884748529bda475df46e7c"
      },
      "downloads": -1,
      "filename": "UJOSchema-0.3.66-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f155eec070c4a9a4cc48d5401939f958",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27552,
      "upload_time": "2021-01-14T14:26:29",
      "upload_time_iso_8601": "2021-01-14T14:26:29.704847Z",
      "url": "https://files.pythonhosted.org/packages/e7/4e/56aa8e76c31c714f297d1e479b71f947681a87c50c21992b0f78c2eb0a99/UJOSchema-0.3.66-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "768b8a728be43f15f1220ca8b4872abdaa4dc9d975296ca6639c95610e9a8fe4",
        "md5": "8b64dd2ed8977b05c34a8f772de3dbcb",
        "sha256": "48d053e5ba704cf5bfd3f904ace820f0b32606d486df0ab232abcda205f24d74"
      },
      "downloads": -1,
      "filename": "UJOSchema-0.3.66.tar.gz",
      "has_sig": false,
      "md5_digest": "8b64dd2ed8977b05c34a8f772de3dbcb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21389,
      "upload_time": "2021-01-14T14:26:31",
      "upload_time_iso_8601": "2021-01-14T14:26:31.783504Z",
      "url": "https://files.pythonhosted.org/packages/76/8b/8a728be43f15f1220ca8b4872abdaa4dc9d975296ca6639c95610e9a8fe4/UJOSchema-0.3.66.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}