{
  "info": {
    "author": "Kegan Holtzhausen",
    "author_email": "marzubus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# libkplug\n\nlibkplug is a simple framework for creating modular, configuration driven python applications.\n\nQ: How is this different from just standard module development.\n\nA: libkplug provides mechanisms to import and instantiate instances of classes by string identifiers, allowing for \ndevelopment of applications that can have behaviors altered or extended through config change alone.\n\nQ: What are some example use-cases?\n\nA1: Say I have developed a automation suite, which uses YAML files as a input source, with libkplug, I could abstract the\nYAML file loader into a named \"ConfigReaderPlugin\", and ship my automation suite with ConfigReaderPlugin set to the YAML \nfile loader class 'YAMLFileLoader'. A user could then implement their own \"ConfigReaderPlugin\" which integrates with GIT, \nwith the same contract as 'YAMLFileReader', and by allowing the user to set a variable 'ConfigPlugin=GitConfigLoader', \nthe user has the means to integrate the application with ease.\n\nQ: How do I instantiate plugins without having the type imported before-hand?\n\nA: Code\n```python\n# read the class of a plugin\nclazz = libkplug.plugin_registry('SomePluginName')\n# instantiate with args and kwargs as usual\nmyinst = clazz(key1=1, keyN='N')\n```\n\n## Installation\n\n```bash\nsource /my/venv/bin/activate\npython setup.py install\n```\n\n## Usage\n\n### Simple Example\n\nThis is a simple example, which will load the module [plugins.plugin_helloworld](/example/plugins/plugin_helloworld.py), \nwhich contains a plugin `HelloWorldPlugin`. The program then instantiates a instance via the registry, using the plugin \nname as an argument.\n\n```python\n# import libkplug\nimport libkplug\nfrom libksettings import KSettings\n\n# initialize settings with some defaults, suppressing config.yaml file loading\nsettings = KSettings(MY_HELLO_WORLD_CLASS='HelloWorldPlugin', PLUGINS=['plugins.plugin_helloworld'], load_yaml=False)\n\n# get the class of the plugin\nclazz = libkplug.plugin_registry(settings.MY_HELLO_WORLD_CLASS)\n\n# instantiate it passing in args and kwargs if needed\ninst = clazz(True, \"Foo\", kwarg1=1, kwargN=\"N\")\n\n# keep the program in a loop\nwhile True:\n    pass\n```\n\nThe output\n\n```bash\n$> python run.py \n__init__.py:157 INFO Initializing plugin architecture\n__init__.py:67 INFO Plugin Init: (), {}\n__init__.py:55 INFO Loading yaml file: config.yaml\n__init__.py:61 INFO Setting default MY_HELLO_WORLD_CLASS = HelloWorldPlugin\n__init__.py:61 INFO Setting default PLUGINS = ['plugins.plugin_helloworld']\n__init__.py:71 INFO Setting config KEY1 = VAL1\n__init__.py:71 INFO Setting config PLUGINS = ['plugins.plugin_helloworld']\n__init__.py:71 INFO Setting config MY_HELLO_WORLD_CLASS = HelloWorldPlugin\n__init__.py:77 INFO Yaml loaded successful\n__init__.py:83 INFO Plugins to load: ['plugins.plugin_helloworld']\n__init__.py:86 INFO Attempting to load plugin: plugins.plugin_helloworld\n__init__.py:80 INFO Registering Plugin id: HelloWorldPlugin from class: <class 'plugins.plugin_helloworld.HelloWorldPlugin'> \nrun.py:22 INFO Starting up\n__init__.py:117 INFO OrderedDict([('HelloWorldPlugin', <class 'plugins.plugin_helloworld.HelloWorldPlugin'>)])\n__init__.py:118 INFO Module Unknown->run.py:25->HelloWorldPlugin\n__init__.py:119 INFO Plugin Request: args: ('HelloWorldPlugin',), kwargs: {}\n__init__.py:121 INFO Class: <class 'plugins.plugin_helloworld.HelloWorldPlugin'>\nplugin_helloworld.py:16 INFO Instantiating instance of: HelloWorldPlugin args: () and kwargs: {'settings': <libksettings.KSettings object at 0x1094f1358>}\nplugin_helloworld.py:38 INFO Thread-1: Sat Jan 19 09:35:24 2019\nplugin_helloworld.py:38 INFO Thread-2: Sat Jan 19 09:35:26 2019\nplugin_helloworld.py:38 INFO Thread-1: Sat Jan 19 09:35:26 2019\n\n```\n\n\n### Sample Application\n\nSee [example](/example) which loads config.yaml file, and starts a plugin which has two threads.\n\n\n## libkplug\n\nlibkplug provides the KPlugin base class, plugin_registry, and plugin registration decorators. \n\nSimple example plugin:\n```python\nimport logging\n\n# initializes the plugin system\nimport libkplug\n\n# a inline plugin registration\n@libkplug.plugin_registry.register\nclass HelloWorldPlugin(libkplug.KPlugin):\n    # this is the identifier for when calling the plugin, should almost always be the class name\n    plugin_name = 'HelloWorldPlugin'\n\n    def __init__(self, *args, **kwargs):\n        logging.info('Instantiating instance of: %s args: %s and kwargs: %s' % (self.plugin_name, args, kwargs))\n\n    def hello(self, name=\"default\"):\n        logging.info(\"Hello %s from %s instance method\" % (name, self))\n        return name\n\n    @staticmethod\n    def hello_world():\n        logging.info(\"Hello World\")\n        return \"Hello World\"\n\n```\n\n### Initialize the Plugin System\n\n```python\n>>> # init libkplug\n>>> import libkplug\n>>> # check current plugins\n>>> print(libkplug.plugin_registry.plugins_dict)\nOrderedDict()\n>>> import plugins.plugin_helloworkd\n>>> print(libkplug.plugin_registry.plugins_dict)\nOrderedDict([('HelloWorldPlugin', <class 'plugins.plugin_helloworld.HelloWorldPlugin'>)])\n```\n\n### Register a Plugin with KSettings\n\n```python\n>>> import libksettings\n>>> import libkplug\n__init__.py:157 INFO Initializing plugin architecture\n__init__.py:67 INFO Plugin Init: (), {}\n>>> settings = libksettings.KSettings(PLUGINS=['plugins.plugin_helloworld'], load_yaml=False)\n__init__.py:56 INFO Setting default PLUGINS = ['plugins.plugin_helloworld']\n__init__.py:87 INFO YAML loading disabled\n__init__.py:96 INFO Plugins to load: ['plugins.plugin_helloworld']\n__init__.py:99 INFO Attempting to load plugin: plugins.plugin_helloworld\n__init__.py:80 INFO Registering Plugin id: HelloWorldPlugin from class: <class 'plugins.plugin_helloworld.HelloWorldPlugin'> \n__init__.py:111 INFO Config: {'PLUGINS': ['plugins.plugin_helloworld']}\n>>> \n```\n\n### Register a Plugin Manually\n\nImporting any file containing classes decorated with `@libkplug.plugin_registry.register` will register the plugins. Just\nbe sure to import libkplug before.\n\n```python\n>>> import libkplug\n__init__.py:157 INFO Initializing plugin architecture\n__init__.py:67 INFO Plugin Init: (), {}\n>>> import plugins.plugin_helloworld\n__init__.py:80 INFO Registering Plugin id: HelloWorldPlugin from class: <class 'plugins.plugin_helloworld.HelloWorldPlugin'> \n>>> \n\n```\n\n### Plugin Static Methods\n\nStatic methods work as expected, and do not require instantiation of the plugin, it only needs to be loaded to work.\n\n```python\n>>> import libkplug\n>>> import plugins.plugin_helloworld\n>>> libkplug.plugin_registry('HelloWorldPlugin').hello_world()\n'Hello World'\n```\n\n\n### Plugin Instantiation\n\nInstantiation is done by determining the class, and then passing in kwargs to the constructor as usual.\n\n```python\n>>> import libkplug\n>>> import plugins.plugin_helloworld\n>>> # read the class\n>>> clazz = libkplug.plugin_registry('HelloWorldPlugin')\n>>> # instantiate with kwargs\n>>> myinst = clazz(key1=1, keyN='N')\n```\n\n\n## libksettings\n\nKSettings is designed to load yaml files, set defaults, and initialize plugins listed in `PLUGINS`.\n\nIMPORTANT: KSettings is \"global\", so once instantiated with \"defaults\" and or a config, any other part of the application\ncan import KSettings and access previously set values without reloading the config or redefining defaults. That said you\nmight want to use namespaced defaults if plugins need to declare defaults.\n\nExample of separate instances \"sharing\" config\n```python\n>>> import libksettings\n>>> settings1 = libksettings.KSettings(A='a', b=1, c=True, PLUGINS=[], load_yaml=False)\n>>> settings2 = libksettings.KSettings(load_yaml=False)\n>>> settings1.A == settings2.A\nTrue\n```\n\nExample if separate instances declaring new defaults\n```python\n>>> import libksettings\n>>> foo_settings = libksettings.KSettings(A='a', b=1, c=True, PLUGINS=[], load_yaml=False, FOO_DEFAULT=\"foo\")\n>>> bar_settings = libksettings.KSettings(A='a', b=1, c=True, PLUGINS=[], load_yaml=False, BAR_DEFAULT=\"bar\")\n>>> foo_settings.BAR_DEFAULT\n'bar'\n```\n\nWhen KSettings is instantiated, it will use all kwargs as 'default' initial values, then load the yaml file, overriding\nany defaults, finally it loads the Plugins, and returns a instance of itself.\n\nExample initializing without config file, setting some defaults, and not loading plugins, \n```python\n>>> from libksettings import KSettings\n>>> settings = KSettings(A='a', b=1, c=True, PLUGINS=[], load_yaml=False)\n>>> settings.A\n'boo'\n>>> settings.B\n1\n```\n\n\nExample initializing with DEFAULTS and named config file, and default plugins\n\n```python\n>>> from libksettings import KSettings\n>>> settings = KSettings(config_filename='/tmp/config.yaml' A='a', b=1, c=True, PLUGINS=['plugins.plugin_helloworld'])\n>>> settings.A\n'boo'\n>>> settings.B\n1\n>>> settings.SOME_YAML_KEY\n'bar'\n\n```\n\nExample initializing with DEFAULTS and named config file from env var\n\n```python\n>>> import os\n>>> from libksettings import KSettings\n>>> os.environ.setdefault('MY_CONF', '/tmp/other.yaml')\n>>> settings = KSettings(config_filename_envvar='MY_CONF' A='a', b=1, c=True, PLUGINS=['plugins.plugin_helloworld'])\n>>> settings.A\n'boo'\n>>> settings.B\n1\n```\n\nExample initializing with config search locations\n\n```python\n>>> import os\n>>> from libksettings import KSettings\n>>> os.environ.setdefault('MY_CONF', '/tmp/other.yaml')\n>>> settings = KSettings(config_filename='myconf.ysml', config_load_locations=[\"/opt/mysvc\", \"/etc/mysvc\"], A='a', b=1, c=True, PLUGINS=['plugins.plugin_helloworld'])\n>>> settings.A\n'boo'\n>>> settings.B\n1\n```\n\n\n# License\n\n```python\n    libkplug, a plugin system for python applications\n\n    Copyright (C) 2013 Kegan Holtzhausen\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unixunion/libkplug/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libkplug",
    "package_url": "https://pypi.org/project/libkplug/",
    "platform": "",
    "project_url": "https://pypi.org/project/libkplug/",
    "project_urls": {
      "Homepage": "https://github.com/unixunion/libkplug/"
    },
    "release_url": "https://pypi.org/project/libkplug/0.3.0/",
    "requires_dist": [
      "PyYAML (>=3.11)"
    ],
    "requires_python": "",
    "summary": "Plugin Framework",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9633750,
  "releases": {
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ee6b5756c2677da820b7f7dc511d512d896b94d209056156ff7e7f906058ee9",
          "md5": "cf908a748cff4340eb6833a45db2d099",
          "sha256": "856b19cfde7421d3994ed764f5894cd9fee8ceb1197c9a420a6450f6b53c780c"
        },
        "downloads": -1,
        "filename": "libkplug-0.2.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf908a748cff4340eb6833a45db2d099",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16741,
        "upload_time": "2021-03-03T09:41:06",
        "upload_time_iso_8601": "2021-03-03T09:41:06.485631Z",
        "url": "https://files.pythonhosted.org/packages/5e/e6/b5756c2677da820b7f7dc511d512d896b94d209056156ff7e7f906058ee9/libkplug-0.2.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36c1fd44d1af24fb66427046d05f9ceb54f74a8cfc2ceab19a5aa394405bbf45",
          "md5": "a0a6ab3a0cb244cf588f15989c8709b6",
          "sha256": "8d43b77541d1fda3de3983fd155bbe475940e4c0db081d588bd374f52af8fa1f"
        },
        "downloads": -1,
        "filename": "libkplug-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0a6ab3a0cb244cf588f15989c8709b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19994,
        "upload_time": "2021-03-04T09:03:09",
        "upload_time_iso_8601": "2021-03-04T09:03:09.329663Z",
        "url": "https://files.pythonhosted.org/packages/36/c1/fd44d1af24fb66427046d05f9ceb54f74a8cfc2ceab19a5aa394405bbf45/libkplug-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36c1fd44d1af24fb66427046d05f9ceb54f74a8cfc2ceab19a5aa394405bbf45",
        "md5": "a0a6ab3a0cb244cf588f15989c8709b6",
        "sha256": "8d43b77541d1fda3de3983fd155bbe475940e4c0db081d588bd374f52af8fa1f"
      },
      "downloads": -1,
      "filename": "libkplug-0.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0a6ab3a0cb244cf588f15989c8709b6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19994,
      "upload_time": "2021-03-04T09:03:09",
      "upload_time_iso_8601": "2021-03-04T09:03:09.329663Z",
      "url": "https://files.pythonhosted.org/packages/36/c1/fd44d1af24fb66427046d05f9ceb54f74a8cfc2ceab19a5aa394405bbf45/libkplug-0.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}