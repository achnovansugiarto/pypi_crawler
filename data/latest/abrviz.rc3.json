{
  "info": {
    "author": "David COBAC",
    "author_email": "david.cobac@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# abrviz\n\n## Installation\n\n`pip3 install abrviz`\n\n## Exemple 0\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\n\n\nvaleurs = [3, 4, 7, 9, 5, 8, 1, 0, 6, 2]\nnoeuds = [Noeud(i) for i in valeurs]\n\na = Arbre()\nfor n in noeuds:\n    a.inserer(n)\n\ntexte = f\"\"\"Affichage imbriquée :\n{a}\n\nHauteur : {a.hauteur()}\nTaille : {len(a)}\n\nLes parcours fournissent des listes d'objets :\nParcours en largeur : {a.largeur}\n\nPour obtenir les clés, on demande les valeurs :\nParcours en largeur : {[n.valeur for n in a.largeur]}\n\nParcours prefixe : {[n.valeur for n in a.prefixe]}\nParcours infixe : {[n.valeur for n in a.infixe]}\nParcours suffixe : {[n.valeur for n in a.suffixe]}\n\nUne liste 'complète' en largeur peut être obtenue :\n{[n if not n else n.valeur for n in a.liste_aplatie()]}\n\nRecherche du noeud de clé 5 :\nle noeud : {a.rechercher(5).__repr__()}\nson arborescence : {a.rechercher(5)}\nsa valeur : {a.rechercher(5).valeur}\nson contenu (éventuellement transporté dans sa structure) : \\\n{a.rechercher(5).contenu}\nle chemin qui y mène : {[n.valeur for n in a.chemin_vers(a.rechercher(5))]}\n\nSi on connaît une référence vers le noeud, on peut l'utiliser.\nle noeud de clé 5 est le 4ème de la liste noeuds : \\\n{noeuds[4]}\n\"\"\"\nprint(texte)\n\na.supprimer(noeuds[0])\ntexte = f\"\"\"Nouveau parcours en largeur après suppression de la racine :\n{[n.valeur for n in a.largeur]}\n\"\"\"\nprint(texte)\n\n```\n\n### Sortie console\n\n```python\nAffichage imbriquée :\n(((None -- 0 -- None) -- 1 -- (None -- 2 -- None)) -- 3 -- (None -- 4 -- ((None -- 5 -- (None -- 6 -- None)) -- 7 -- ((None -- 8 -- None) -- 9 -- None))))\n\nHauteur : 5\nTaille : 10\n\nLes parcours fournissent des listes d'objets :\nParcours en largeur : [<abrviz.abrviz.Noeud object at 0x7fec0c283eb0>, <abrviz.abrviz.Noeud object at 0x7fec0c283880>, <abrviz.abrviz.Noeud object at 0x7fec0c283f10>, <abrviz.abrviz.Noeud object at 0x7fec0c38c0d0>, <abrviz.abrviz.Noeud object at 0x7fec0c14da90>, <abrviz.abrviz.Noeud object at 0x7fec0c283f40>, <abrviz.abrviz.Noeud object at 0x7fec0c283fa0>, <abrviz.abrviz.Noeud object at 0x7fec0c283d30>, <abrviz.abrviz.Noeud object at 0x7fec0c14d760>, <abrviz.abrviz.Noeud object at 0x7fec0c283c70>]\n\nPour obtenir les clés, on demande les valeurs :\nParcours en largeur : [3, 1, 4, 0, 2, 7, 5, 9, 6, 8]\n\nParcours prefixe : [3, 1, 0, 2, 4, 7, 5, 6, 9, 8]\nParcours infixe : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nParcours suffixe : [0, 2, 1, 6, 5, 8, 9, 7, 4, 3]\n\nUne liste 'complète' en largeur peut être obtenue :\n[3, 1, 4, 0, 2, None, 7, None, None, None, None, None, None, 5, 9, None, None, None, None, None, None, None, None, None, None, None, None, None, 6, 8]\n\nRecherche du noeud de clé 5 :\nle noeud : <abrviz.abrviz.Noeud object at 0x7fec0c283fa0>\nson arborescence : (None -- 5 -- (None -- 6 -- None))\nsa valeur : 5\nson contenu (éventuellement transporté dans sa structure) : None\nle chemin qui y mène : [3, 4, 7, 5]\n\nSi on connaît une référence vers le noeud, on peut l'utiliser.\nle noeud de clé 5 est le 4ème de la liste noeuds : (None -- 5 -- (None -- 6 -- None))\n\nNouveau parcours en largeur après suppression de la racine :\n[2, 1, 4, 0, 7, 5, 9, 6, 8]\n\n```\n\n## Exemple 1\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\n\n\na = Arbre()\nliste = [Noeud(i) for i in [3, 2, 1, 5, 4, 6]]\nfor i in liste:\n    a.inserer(i)\n\n# on visualise l'arbre\na.sortie(a.racine, \"exemple1_0\", \"png\")\n# on demande une visualisation en arbre binaire complet : un peu\n# plus d'espace dans la dernière ligne\na.sortie(a.racine, \"exemple1_1\", \"png\", style=\"complet\")\n# on demande une visualisation à partir du 2ème noeud rentré\na.sortie(liste[1], \"exemple1_2\", \"png\")\n# on supprime la racine puis on visualise le nouvel arbre en pdf\na.supprimer(liste[0])\na.sortie(a.racine, \"exemple1_3\", \"pdf\")\n\n```\n\n### Sortie Images\n<img src='./exemples/exemple1_0.png' width='800'>\n\n<img src='./exemples/exemple1_1.png' width='800'>\n\n<img src='./exemples/exemple1_2.png' width='800'>\n\n<img src='./exemples/exemple1_3.png' width='800'>\n\n\n## Exemple 2\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\nimport random\n\n\nliste = list(range(15))\nrandom.shuffle(liste)\n\na = Arbre()\nfor e in liste:\n    a.inserer(Noeud(e))\n\n# Visualisation de l'arbre\nmon_noeud = a.racine\na.sortie(mon_noeud, \"exemple2_0\", \"png\")\n\n# on peut demander une version \"complète\" avec les noeuds\n# invisibles d'un arbre binaire complet : l'apparence est très\n# large\na.sortie(mon_noeud, \"exemple2_1\", \"png\", style=\"complet\")\n\n# s'il y a un sous-arbre gauche, on le visualise\nif mon_noeud.gauche is not None:\n    a.sortie(mon_noeud.gauche, \"exemple2_2\", \"png\")\n\n```\n\n### Sortie Images\n\n<img src='./exemples/exemple2_0.png' width='800'>\n\n<img src='./exemples/exemple2_1.png' width='800'>\n\n<img src='./exemples/exemple2_2.png' width='800'>\n\n## Exemple 3\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\nimport random\n\n\nliste = list(range(20))\nrandom.shuffle(liste)\n\na = Arbre()\n# on change la fonction de la relation d'ordre\na.fonction_ordre = lambda x, y: str(x.valeur) < str(y.valeur)\n\nfor e in liste:\n    a.inserer(Noeud(e))\n\na.sortie(a.racine, \"exemple3_0\", \"png\")\n\n# on change le style\nArbre.options('node', {\"style\": \"filled\"})\nArbre.options('edge', {\"arrowhead\": \"diamond\", \"arrowsize\": \"1\"})\na.sortie(a.racine, \"exemple3_1\", \"png\")\n\n# les flèches se courbent\nArbre.options('graph', {\"splines\": \"true\"})\na.sortie(a.racine, \"exemple3_2\", \"png\")\n\n```\n\n### Sortie Images\n<img src='./exemples/exemple3_0.png' width='800'>\n\n<img src='./exemples/exemple3_1.png' width='800'>\n\n<img src='./exemples/exemple3_2.png' width='800'>\n\n## Exemple 4\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\n\n# dictionnaire, les valeurs seront les clés de l'arbre\ndico_contenu = {\"abricot\": 2, \"poire\": 5, \"pomme\": 1, \"ananas\": 7, \"kiwi\": 0}\n\na = Arbre()\nfor k in dico_contenu:\n    a.inserer(Noeud(dico_contenu[k], k))\n\n# les noeuds montreront le contenu du noeud et non la clé (\"valeur\")\nArbre.etiquette = \"contenu\"\na.sortie(a.racine, \"exemple4_0\", \"png\")\n\n# pour visualiser un mix des deux (clés et valeurs du dictionnaire)\n# on redéfinit l'arbre et les noeuds :\na = Arbre()\nfor k in dico_contenu:\n    noeud = Noeud(dico_contenu[k])\n    # le contenu du noeud reprend les données complètes du dictionnaire\n    noeud.contenu = f\"{k} ({dico_contenu[k]})\"\n    a.inserer(noeud)\n\nArbre.etiquette = \"contenu\"\na.sortie(a.racine, \"exemple4_1\", \"png\")\n\n```\n\n### Sortie Images\n<img src='./exemples/exemple4_0.png' width='800'>\n\n<img src='./exemples/exemple4_1.png' width='800'>\n\n## Exemple 5\n\n### Code\n```python\nfrom abrviz import Arbre, Noeud\n\n\nliste = [2, 3, 6, 0, 4, 5, 1]\nliste_noeuds = [Noeud(i) for i in liste]\n\na = Arbre()\nfor e in liste_noeuds:\n    a.inserer(e)\n\n# On peut effectuer des mouvements de rotation à droite ou à gauche\n# L'arbre reste un ABR\na.sortie(a.racine, \"exemple5_0\", \"png\")\n\n# le noeud \"racine\" du changement est passé en argument\na.rotation_gauche(a.rechercher(2))\na.sortie(a.racine, \"exemple5_1\", \"png\")\n\n# on peut alors équilibrer l'arbre\na.rotation_gauche(a.rechercher(0))\na.rotation_droite(a.rechercher(2))\na.rotation_gauche(a.rechercher(4))\na.rotation_droite(a.rechercher(6))\na.sortie(a.racine, \"exemple5_2\", \"png\")\n\n```\n\n### Sortie Images\n\n<img src='./exemples/exemple5_0.png' width='800'>\n\n<img src='./exemples/exemple5_1.png' width='800'>\n\n<img src='./exemples/exemple5_2.png' width='800'>\n\n## Licence\nCC-BY-NC-SA\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cobacdavid/abrviz",
    "keywords": "bst,abr,sort,tri,tree,arbre",
    "license": "CC-BY-NC-SA",
    "maintainer": "",
    "maintainer_email": "",
    "name": "abrviz",
    "package_url": "https://pypi.org/project/abrviz/",
    "platform": "",
    "project_url": "https://pypi.org/project/abrviz/",
    "project_urls": {
      "Homepage": "https://github.com/cobacdavid/abrviz"
    },
    "release_url": "https://pypi.org/project/abrviz/0.3/",
    "requires_dist": [
      "graphviz"
    ],
    "requires_python": ">3.5",
    "summary": "Visualisation Arbre Binaire de Recherche",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9041059,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f37a12ddf11a85750fc8e03c388e78e61f9211296733a7cf212a3ef52d9ca2b",
          "md5": "0552465f5c031d0f45ee53dcfbff5ffb",
          "sha256": "716c7d6e45e85e7397b4a9a45033aa2f69f8e6c106b99b1bf4128e6054ed768d"
        },
        "downloads": -1,
        "filename": "abrviz-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0552465f5c031d0f45ee53dcfbff5ffb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.5",
        "size": 4188,
        "upload_time": "2021-01-02T13:41:26",
        "upload_time_iso_8601": "2021-01-02T13:41:26.423768Z",
        "url": "https://files.pythonhosted.org/packages/2f/37/a12ddf11a85750fc8e03c388e78e61f9211296733a7cf212a3ef52d9ca2b/abrviz-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a92e2058f76fd032baf8c376e73a8062de852f8b01b9d29d9599d0208b5252c8",
          "md5": "1932fbcb32be3303b40e75e096c02735",
          "sha256": "69dbce9df9b76ea82c1fd84323da4efdaa92ca2757e666a5a8b2ad5136274574"
        },
        "downloads": -1,
        "filename": "abrviz-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1932fbcb32be3303b40e75e096c02735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5",
        "size": 4311,
        "upload_time": "2021-01-02T13:41:27",
        "upload_time_iso_8601": "2021-01-02T13:41:27.685999Z",
        "url": "https://files.pythonhosted.org/packages/a9/2e/2058f76fd032baf8c376e73a8062de852f8b01b9d29d9599d0208b5252c8/abrviz-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1263bae7e3e98fd38e12e2469cd4fe74209c54e618baa86bad2236e8e44a0bc2",
          "md5": "40bb0421f8d80ee4665d5f20d2cf5d10",
          "sha256": "6087e8d7e735708347087ea8d7b467a5f8b7fcb219824282abb9c4a8009cee44"
        },
        "downloads": -1,
        "filename": "abrviz-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40bb0421f8d80ee4665d5f20d2cf5d10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.5",
        "size": 4793,
        "upload_time": "2021-01-02T15:45:53",
        "upload_time_iso_8601": "2021-01-02T15:45:53.932646Z",
        "url": "https://files.pythonhosted.org/packages/12/63/bae7e3e98fd38e12e2469cd4fe74209c54e618baa86bad2236e8e44a0bc2/abrviz-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0cc97acce4eccc1ad817be26814a666d3f5b204e0ad06048ae833c24a7b0d77",
          "md5": "c43e00bc6633e6e57da0ce1cb81172d0",
          "sha256": "a99c5ee4cb99475f3e6328fc5334d5a6da9593cacce9c9b8d9e3a9d0d43d41eb"
        },
        "downloads": -1,
        "filename": "abrviz-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c43e00bc6633e6e57da0ce1cb81172d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5",
        "size": 196553,
        "upload_time": "2021-01-02T15:45:56",
        "upload_time_iso_8601": "2021-01-02T15:45:56.063256Z",
        "url": "https://files.pythonhosted.org/packages/d0/cc/97acce4eccc1ad817be26814a666d3f5b204e0ad06048ae833c24a7b0d77/abrviz-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2520099d50e9ded48cd410542ba03e0ce43d98c0ecbafd4f2cd283c56e5bd3f4",
          "md5": "a9d963150b73d8bd382296ef69386dda",
          "sha256": "f7f5b56bb839ca1b55f227839249c1b7a9e29385b03111aa34a2629977a2f08e"
        },
        "downloads": -1,
        "filename": "abrviz-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9d963150b73d8bd382296ef69386dda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.5",
        "size": 6999,
        "upload_time": "2021-01-03T10:31:54",
        "upload_time_iso_8601": "2021-01-03T10:31:54.933182Z",
        "url": "https://files.pythonhosted.org/packages/25/20/099d50e9ded48cd410542ba03e0ce43d98c0ecbafd4f2cd283c56e5bd3f4/abrviz-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03d99ba10c1313243b7b4f3ffd42e628fedb3c4302faac62f1564441df4dd7bd",
          "md5": "b0ca65e39a9c48569f8bc2496bda61f8",
          "sha256": "e622a1600b323033c4d18ec0d3cdd7c177ce931e7111fc03cf0cbda22a013c07"
        },
        "downloads": -1,
        "filename": "abrviz-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b0ca65e39a9c48569f8bc2496bda61f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5",
        "size": 193176,
        "upload_time": "2021-01-03T10:31:56",
        "upload_time_iso_8601": "2021-01-03T10:31:56.612423Z",
        "url": "https://files.pythonhosted.org/packages/03/d9/9ba10c1313243b7b4f3ffd42e628fedb3c4302faac62f1564441df4dd7bd/abrviz-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2520099d50e9ded48cd410542ba03e0ce43d98c0ecbafd4f2cd283c56e5bd3f4",
        "md5": "a9d963150b73d8bd382296ef69386dda",
        "sha256": "f7f5b56bb839ca1b55f227839249c1b7a9e29385b03111aa34a2629977a2f08e"
      },
      "downloads": -1,
      "filename": "abrviz-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9d963150b73d8bd382296ef69386dda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.5",
      "size": 6999,
      "upload_time": "2021-01-03T10:31:54",
      "upload_time_iso_8601": "2021-01-03T10:31:54.933182Z",
      "url": "https://files.pythonhosted.org/packages/25/20/099d50e9ded48cd410542ba03e0ce43d98c0ecbafd4f2cd283c56e5bd3f4/abrviz-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03d99ba10c1313243b7b4f3ffd42e628fedb3c4302faac62f1564441df4dd7bd",
        "md5": "b0ca65e39a9c48569f8bc2496bda61f8",
        "sha256": "e622a1600b323033c4d18ec0d3cdd7c177ce931e7111fc03cf0cbda22a013c07"
      },
      "downloads": -1,
      "filename": "abrviz-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b0ca65e39a9c48569f8bc2496bda61f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.5",
      "size": 193176,
      "upload_time": "2021-01-03T10:31:56",
      "upload_time_iso_8601": "2021-01-03T10:31:56.612423Z",
      "url": "https://files.pythonhosted.org/packages/03/d9/9ba10c1313243b7b4f3ffd42e628fedb3c4302faac62f1564441df4dd7bd/abrviz-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}