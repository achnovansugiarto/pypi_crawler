{
  "info": {
    "author": "Stephen Hausler, Sourav Garg, Ming Xu, Michael Milford and Tobias Fischer",
    "author_email": "stephen.hausler@hdr.qut.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square)](https://creativecommons.org/licenses/by-nc-sa/4.0/)\n[![stars](https://img.shields.io/github/stars/QVPR/Patch-NetVLAD.svg?style=flat-square)](https://github.com/QVPR/Patch-NetVLAD/stargazers)\n[![GitHub issues](https://img.shields.io/github/issues/QVPR/Patch-NetVLAD.svg?style=flat-square)](https://github.com/QVPR/Patch-NetVLAD/issues)\n[![GitHub closed issues](https://img.shields.io/github/issues-closed-raw/QVPR/Patch-NetVLAD?style=flat-square)](https://github.com/QVPR/Patch-NetVLAD/issues?q=is%3Aissue+is%3Aclosed)\n[![GitHub repo size](https://img.shields.io/github/repo-size/QVPR/Patch-NetVLAD.svg?style=flat-square)](./README.md)\n[![QUT Centre for Robotics](https://img.shields.io/badge/collection-QUT%20Robotics-%23043d71?style=flat-square)](https://qcr.github.io/collection/vpr_overview/)\n\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-localization-on-extended-cmu-seasons&style=flat-square)](https://paperswithcode.com/sota/visual-localization-on-extended-cmu-seasons?p=patch-netvlad-multi-scale-fusion-of-locally)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-mapillary-val&style=flat-square)](https://paperswithcode.com/sota/visual-place-recognition-on-mapillary-val?p=patch-netvlad-multi-scale-fusion-of-locally)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-nordland&style=flat-square)](https://paperswithcode.com/sota/visual-place-recognition-on-nordland?p=patch-netvlad-multi-scale-fusion-of-locally)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-pittsburgh-30k&style=flat-square)](https://paperswithcode.com/sota/visual-place-recognition-on-pittsburgh-30k?p=patch-netvlad-multi-scale-fusion-of-locally)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-localization-on-robotcar-seasons-v2&style=flat-square)](https://paperswithcode.com/sota/visual-localization-on-robotcar-seasons-v2?p=patch-netvlad-multi-scale-fusion-of-locally)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-tokyo247&style=flat-square)](https://paperswithcode.com/sota/visual-place-recognition-on-tokyo247?p=patch-netvlad-multi-scale-fusion-of-locally)\n\nThis repository contains code for the CVPR2021 paper \"Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition\"\n\nThe article can be found on [arXiv](https://arxiv.org/abs/2103.01486) and the [official proceedings](https://openaccess.thecvf.com/content/CVPR2021/html/Hausler_Patch-NetVLAD_Multi-Scale_Fusion_of_Locally-Global_Descriptors_for_Place_Recognition_CVPR_2021_paper.html).\n\n<p style=\"width: 50%; display: block; margin-left: auto; margin-right: auto\">\n  <img src=\"./assets/patch_netvlad_method_diagram.png\" alt=\"Patch-NetVLAD method diagram\"/>\n</p>\n\n## License + attribution/citation\n\nWhen using code within this repository, please refer the following [paper](https://openaccess.thecvf.com/content/CVPR2021/html/Hausler_Patch-NetVLAD_Multi-Scale_Fusion_of_Locally-Global_Descriptors_for_Place_Recognition_CVPR_2021_paper.html) in your publications:\n```\n@inproceedings{hausler2021patchnetvlad,\n  title={Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition},\n  author={Hausler, Stephen and Garg, Sourav and Xu, Ming and Milford, Michael and Fischer, Tobias},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={14141--14152},\n  year={2021}\n}\n```\n\nThe code is licensed under the [MIT License](./LICENSE).\n\n## Installation\nWe recommend using conda (or better: mamba) to install all dependencies. If you have not yet installed conda/mamba, please download and install [`mambaforge`](https://github.com/conda-forge/miniforge).\n\n```bash\nconda create -n patchnetvlad python=3.8 numpy pytorch-gpu torchvision natsort tqdm opencv pillow scikit-learn faiss matplotlib-base -c conda-forge\n\nconda activate patchnetvlad\n```\n\nWe provide several pre-trained models and configuration files. The pre-trained models will be downloaded automatically into the `pretrained_models` the first time feature extraction is performed.\n\n<details>\n  <summary>Alternatively, you can manually download the pre-trained models into a folder of your choice; click to expand if you want to do so.</summary>\n\n  We recommend downloading the models into the `pretrained_models` folder (which is setup in the config files within the `configs` directory):\n\n  ```bash\n  # Note: the pre-trained models will be downloaded automatically the first time feature extraction is performed\n  # the steps below are optional!\n\n  # You can use the download script which automatically downloads the models:\n  python ./download_models.py\n\n  # Manual download:\n  cd pretrained_models\n  wget -O mapillary_WPCA128.pth.tar https://cloudstor.aarnet.edu.au/plus/s/vvr0jizjti0z2LR/download\n  wget -O mapillary_WPCA512.pth.tar https://cloudstor.aarnet.edu.au/plus/s/DFxbGgFwh1y1wAz/download\n  wget -O mapillary_WPCA4096.pth.tar https://cloudstor.aarnet.edu.au/plus/s/ZgW7DMEpeS47ELI/download\n  wget -O pittsburgh_WPCA128.pth.tar https://cloudstor.aarnet.edu.au/plus/s/2ORvaCckitjz4Sd/download\n  wget -O pittsburgh_WPCA512.pth.tar https://cloudstor.aarnet.edu.au/plus/s/WKl45MoboSyB4SH/download\n  wget -O pittsburgh_WPCA4096.pth.tar https://cloudstor.aarnet.edu.au/plus/s/1aoTGbFjsekeKlB/download\n  ```\n</details>\n\nIf you want to use the shortcuts `patchnetvlad-match-two`, `patchnetvlad-feature-match` and `patchnetvlad-feature-extract`, you also need to run (which also lets you use Patch-NetVLAD in a modular way):\n```bash\npip3 install --no-deps -e .\n```\n\n\n## Quick start\n\n### Feature extraction\nReplace `performance.ini` with `speed.ini` or `storage.ini` if you want, and adapt the dataset paths - examples are given for the Pittsburgh30k dataset (simply replace `pitts30k` with `tokyo247` or `nordland` for these datasets).\n\n```bash\npython feature_extract.py \\\n  --config_path patchnetvlad/configs/performance.ini \\\n  --dataset_file_path=pitts30k_imageNames_index.txt \\\n  --dataset_root_dir=/path/to/your/pitts/dataset \\\n  --output_features_dir patchnetvlad/output_features/pitts30k_index\n```\n\nRepeat for the query images by replacing `_index` with `_query`. Note that you have to adapt `dataset_root_dir`.\n\n### Feature matching (dataset)\n```bash\npython feature_match.py \\\n  --config_path patchnetvlad/configs/performance.ini \\\n  --dataset_root_dir=/path/to/your/pitts/dataset \\\n  --query_file_path=pitts30k_imageNames_query.txt \\\n  --index_file_path=pitts30k_imageNames_index.txt \\\n  --query_input_features_dir patchnetvlad/output_features/pitts30k_query \\\n  --index_input_features_dir patchnetvlad/output_features/pitts30k_index \\\n  --ground_truth_path patchnetvlad/dataset_gt_files/pitts30k_test.npz \\\n  --result_save_folder patchnetvlad/results/pitts30k\n```\n\nNote that providing `ground_truth_path` is optional.\n\nThis will create three output files in the folder specified by `result_save_folder`:\n- `recalls.txt` with a plain text output (only if `ground_truth_path` is specified)\n- `NetVLAD_predictions.txt` with top 100 reference images for each query images obtained using \"vanilla\" NetVLAD in [Kapture format](https://github.com/naver/kapture)\n- `PatchNetVLAD_predictions.txt` with top 100 reference images from above re-ranked by Patch-NetVLAD, again in [Kapture format](https://github.com/naver/kapture)\n\n### Feature matching (two files)\n```bash\npython match_two.py \\\n--config_path patchnetvlad/configs/performance.ini \\\n--first_im_path=patchnetvlad/example_images/tokyo_query.jpg \\\n--second_im_path=patchnetvlad/example_images/tokyo_db.png\n```\n\nWe provide the `match_two.py` script which computes the Patch-NetVLAD features for two given images and then determines the local feature matching between these images. While we provide example images, any image pair can be used.\n\nThe script will print a score value as an output, where a larger score indicates more similar images and a lower score means dissimilar images. The function also outputs a matching figure, showing the patch correspondances (after RANSAC) between the two images. The figure is saved as `results/patchMatchings.png`.\n\n### Training\n```bash\npython train.py \\\n--config_path patchnetvlad/configs/train.ini \\\n--cache_path=/path/to/your/desired/cache/folder \\\n--save_path=/path/to/your/desired/checkpoint/save/folder \\\n--dataset_root_dir=/path/to/your/mapillary/dataset\n```\n\nTo begin, request, download and unzip the Mapillary Street-level Sequences dataset (https://github.com/mapillary/mapillary_sls).\nThe provided script will train a new network from scratch, to resume training add --resume_path and set to a full path, filename and extension to an existing checkpoint file. Note to resume our provided models, first remove the WPCA layers.\n\nAfter training a model, PCA can be added using add_pca.py.\n```bash\npython add_pca.py \\\n--config_path patchnetvlad/configs/train.ini \\\n--resume_path=full/path/with/extension/to/your/saved/checkpoint \\\n--dataset_root_dir=/path/to/your/mapillary/dataset\n```\n\nThis will add an additional checkpoint file to the same folder as resume_path, except including a WPCA layer.\n\n## FAQ\n![Patch-NetVLAD qualitative results](./assets/patch_netvlad_qualitative_results.jpg)\n\n### How to Create New Ground Truth Files\n\nWe provide three ready-to-go ground truth files in the dataset_gt_files folder, however, for evaluation on other datasets you will need to create your own .npz ground truth data files.\nEach .npz stores three variables: `utmQ` (a numpy array of floats), `utmDb` (a numpy array of floats) and `posDistThr` (a scalar numpy float).\n\nEach successive element within `utmQ` and `utmDb` needs to correspond to the corresponding row of the image list file. `posDistThr` is the ground truth tolerance value (typically in meters).\n\nThe following mock example details the steps required to create a new ground truth file:\n1. Collect GPS data for your query and database traverses and convert to utm format. Ensure the data is sampled at the same rate as your images.\n2. Select your own choice of posDistThr value.\n3. Save these variables using Numpy, such as this line of code:\n`np.savez('dataset_gt_files/my_dataset.npz', utmQ=my_utmQ, utmDb=my_utmDb, posDistThr=my_posDistThr)`\n\n## Acknowledgements\nWe would like to thank Gustavo Carneiro, Niko Suenderhauf and Mark Zolotas for their valuable comments in preparing this paper. This work received funding from the Australian Government, via grant AUSMURIB000001 associated with ONR MURI grant N00014-19-1-2571. The authors acknowledge continued support from the Queensland University of Technology (QUT) through the Centre for Robotics.\n\n## Related works\nPlease check out [this collection](https://qcr.github.io/collection/vpr_overview/) of related works on place recognition.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QVPR/Patch-NetVLAD",
    "keywords": "python,place recognition,image retrieval,computer vision,robotics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "patchnetvlad",
    "package_url": "https://pypi.org/project/patchnetvlad/",
    "platform": "",
    "project_url": "https://pypi.org/project/patchnetvlad/",
    "project_urls": {
      "Homepage": "https://github.com/QVPR/Patch-NetVLAD"
    },
    "release_url": "https://pypi.org/project/patchnetvlad/0.1.6/",
    "requires_dist": [
      "numpy",
      "torch",
      "torchvision",
      "tqdm",
      "scipy",
      "Pillow",
      "scikit-learn",
      "faiss",
      "natsort",
      "matplotlib",
      "opencv-python"
    ],
    "requires_python": ">=3.6",
    "summary": "Patch-NetVLAD: An open-source Python implementation of the CVPR2021 paper",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11990527,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a9cbc9937dc6860df9ea575a575855c9c54c4a3f68c49c631290b229d845783",
          "md5": "a04e94a98a297bed754f1b232e379ba5",
          "sha256": "2072e42512c9744fd39cb4fc17102416bc13415c2088db740fb8f86b267db3dc"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a04e94a98a297bed754f1b232e379ba5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6141138,
        "upload_time": "2021-06-02T22:52:17",
        "upload_time_iso_8601": "2021-06-02T22:52:17.635878Z",
        "url": "https://files.pythonhosted.org/packages/2a/9c/bc9937dc6860df9ea575a575855c9c54c4a3f68c49c631290b229d845783/patchnetvlad-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7c5b2c999d2c09e02b320ca357e5b07bdd4f83b9c51d5a2fa275ac0badbfd24",
          "md5": "4a186e13f4507607cdc47b7577626ea9",
          "sha256": "0a404f23942c33de6960e009b4d593dc36db67c9feddcc301b9a6519abbd98f9"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a186e13f4507607cdc47b7577626ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6082084,
        "upload_time": "2021-06-02T22:52:19",
        "upload_time_iso_8601": "2021-06-02T22:52:19.270762Z",
        "url": "https://files.pythonhosted.org/packages/a7/c5/b2c999d2c09e02b320ca357e5b07bdd4f83b9c51d5a2fa275ac0badbfd24/patchnetvlad-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f20850c4fbb8dd87e3e71eaeb51e79b5f81ce52e0a0f16b64933ab9c01a1e75",
          "md5": "4d074abe0c22785812c816b1011bbfca",
          "sha256": "137fb79ac0ab6db48f0bdb81bf7038f9ba20891ff32cf37d59dcdaa74262eddc"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d074abe0c22785812c816b1011bbfca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6141195,
        "upload_time": "2021-06-02T23:50:02",
        "upload_time_iso_8601": "2021-06-02T23:50:02.022555Z",
        "url": "https://files.pythonhosted.org/packages/7f/20/850c4fbb8dd87e3e71eaeb51e79b5f81ce52e0a0f16b64933ab9c01a1e75/patchnetvlad-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46fd4a77467b677fffe92d5e8daa36a6050684172efa28b4a60b0da0948c6752",
          "md5": "faa7bd22ff2aea77b13a67fc61d70bb8",
          "sha256": "b0f75d5ce19ff8f0c004535ebb605ec6cd810931432fa7f698a344b5c7d26edd"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "faa7bd22ff2aea77b13a67fc61d70bb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6082239,
        "upload_time": "2021-06-02T23:50:04",
        "upload_time_iso_8601": "2021-06-02T23:50:04.127819Z",
        "url": "https://files.pythonhosted.org/packages/46/fd/4a77467b677fffe92d5e8daa36a6050684172efa28b4a60b0da0948c6752/patchnetvlad-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c07005c4912340d8b01d67573b5d7efc1e0b30da2b7e3dde06e92d3a84dc37",
          "md5": "b0c693d379fbabdcbd9b59fbaf6b2502",
          "sha256": "88597f72860ff41494ebe04570811bd7e630838e67361e521e383594f80f1016"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0c693d379fbabdcbd9b59fbaf6b2502",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6141356,
        "upload_time": "2021-06-11T04:50:28",
        "upload_time_iso_8601": "2021-06-11T04:50:28.125198Z",
        "url": "https://files.pythonhosted.org/packages/34/c0/7005c4912340d8b01d67573b5d7efc1e0b30da2b7e3dde06e92d3a84dc37/patchnetvlad-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e4d8c152aa1013099a9cac629506b7cafc12956789b2e5058de49cf66525f57",
          "md5": "bcd781a3c1cbfa280e9beead49ace493",
          "sha256": "b0a6dc49bdf613893e82b50864c5cbaab5b6836ed0bb4534a1a531bfd62c7b73"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bcd781a3c1cbfa280e9beead49ace493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6082461,
        "upload_time": "2021-06-11T04:50:30",
        "upload_time_iso_8601": "2021-06-11T04:50:30.264342Z",
        "url": "https://files.pythonhosted.org/packages/7e/4d/8c152aa1013099a9cac629506b7cafc12956789b2e5058de49cf66525f57/patchnetvlad-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dd9c667f80cfb4170f94207d3c8a793be3ef4eada1395754317dd99e1b0d576",
          "md5": "d6a6d2acd3abbb59b5fb2c666c5675d4",
          "sha256": "100798debc7e3dec22c5315e458a7e8eaec51a269aee3c9492b9409ed988e400"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6a6d2acd3abbb59b5fb2c666c5675d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6143841,
        "upload_time": "2021-06-22T04:27:35",
        "upload_time_iso_8601": "2021-06-22T04:27:35.063331Z",
        "url": "https://files.pythonhosted.org/packages/5d/d9/c667f80cfb4170f94207d3c8a793be3ef4eada1395754317dd99e1b0d576/patchnetvlad-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d869529c9f6b6806772798571a50b9a387f8bfd2082cc1214134c47f39a8779a",
          "md5": "ebacf4291ea3f6f01e0beab89a5dd88e",
          "sha256": "a114e794acb3f83e7316a6346581e8823025c5f496998a4bbf7592463f2886f5"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ebacf4291ea3f6f01e0beab89a5dd88e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6084369,
        "upload_time": "2021-06-22T04:27:36",
        "upload_time_iso_8601": "2021-06-22T04:27:36.989263Z",
        "url": "https://files.pythonhosted.org/packages/d8/69/529c9f6b6806772798571a50b9a387f8bfd2082cc1214134c47f39a8779a/patchnetvlad-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a63fb0bd28c29e72bf3ed03e246c0a3d3d13da0d78b015c9531aaa166304518",
          "md5": "eca2973d78cfa46a20d0743da3e8a27a",
          "sha256": "60d32acc728d355339f5c5be225cd7dcdad1a7d65f5c1b2e7b6c621f09c68d27"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eca2973d78cfa46a20d0743da3e8a27a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6165257,
        "upload_time": "2021-11-11T03:32:12",
        "upload_time_iso_8601": "2021-11-11T03:32:12.553094Z",
        "url": "https://files.pythonhosted.org/packages/6a/63/fb0bd28c29e72bf3ed03e246c0a3d3d13da0d78b015c9531aaa166304518/patchnetvlad-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c4b8d9ceb7702b878951b48bc0a9b2ccf85cfad8f380cd3299c81da7a76a5f5",
          "md5": "1775f3eefe9ad31b8ff83a4e1bca96e9",
          "sha256": "db4248ce071596f1fb7f4af697858ae49e7a6a4fa883630d3bff3a8d5fe40c67"
        },
        "downloads": -1,
        "filename": "patchnetvlad-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1775f3eefe9ad31b8ff83a4e1bca96e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6099041,
        "upload_time": "2021-11-11T03:32:14",
        "upload_time_iso_8601": "2021-11-11T03:32:14.784846Z",
        "url": "https://files.pythonhosted.org/packages/1c/4b/8d9ceb7702b878951b48bc0a9b2ccf85cfad8f380cd3299c81da7a76a5f5/patchnetvlad-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a63fb0bd28c29e72bf3ed03e246c0a3d3d13da0d78b015c9531aaa166304518",
        "md5": "eca2973d78cfa46a20d0743da3e8a27a",
        "sha256": "60d32acc728d355339f5c5be225cd7dcdad1a7d65f5c1b2e7b6c621f09c68d27"
      },
      "downloads": -1,
      "filename": "patchnetvlad-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eca2973d78cfa46a20d0743da3e8a27a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6165257,
      "upload_time": "2021-11-11T03:32:12",
      "upload_time_iso_8601": "2021-11-11T03:32:12.553094Z",
      "url": "https://files.pythonhosted.org/packages/6a/63/fb0bd28c29e72bf3ed03e246c0a3d3d13da0d78b015c9531aaa166304518/patchnetvlad-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c4b8d9ceb7702b878951b48bc0a9b2ccf85cfad8f380cd3299c81da7a76a5f5",
        "md5": "1775f3eefe9ad31b8ff83a4e1bca96e9",
        "sha256": "db4248ce071596f1fb7f4af697858ae49e7a6a4fa883630d3bff3a8d5fe40c67"
      },
      "downloads": -1,
      "filename": "patchnetvlad-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1775f3eefe9ad31b8ff83a4e1bca96e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6099041,
      "upload_time": "2021-11-11T03:32:14",
      "upload_time_iso_8601": "2021-11-11T03:32:14.784846Z",
      "url": "https://files.pythonhosted.org/packages/1c/4b/8d9ceb7702b878951b48bc0a9b2ccf85cfad8f380cd3299c81da7a76a5f5/patchnetvlad-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}