{
  "info": {
    "author": "Eric Schulte and GrammaTech",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<!--TOC-->\n\n- [Generic Tree-Sitter AST API](#generic-tree-sitter-ast-api)\n- [Quick Intro](#quick-intro)\n- [Extended Tutorial](#extended-tutorial)\n  - [AST Creation](#ast-creation)\n    - [Constructor](#constructor)\n    - [From String](#from-string)\n    - [AST Templates](#ast-templates)\n    - [AST Copy](#ast-copy)\n  - [AST Methods](#ast-methods)\n    - [Common Operations](#common-operations)\n    - [Source Locations](#source-locations)\n    - [Functions](#functions)\n    - [Function Callsites](#function-callsites)\n  - [AST Traversal](#ast-traversal)\n  - [AST Manipulation](#ast-manipulation)\n    - [Mutation Primitives](#mutation-primitives)\n    - [Transformers](#transformers)\n- [Architecture](#architecture)\n- [FAQ](#faq)\n- [License](#license)\n\n<!--TOC-->\n\n# Generic Tree-Sitter AST API\n\nThe ASTs package provides a Python API into GrammaTech's Software\nEvolution Library ([SEL][]) for source code manipulation.  SEL\ngeneralizes over GitHub's [tree-sitter][] parsing libraries providing\na uniform interface over multiple programming languages (primarily\nPython, JavaScript/TypeScript, and C/C++), and providing additional\nfunctionality for software inspection and modification.\n\n# Quick Intro\n\nHere's how to create and perform some common operations on an AST:\n\n```python3\n$ python3\nPython 3.8.5\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import asts\n>>> root = asts.AST.from_string(\"x + 88\", language=asts.ASTLanguage.Python)\n>>> root.children\n[<asts.types.PythonExpressionStatement0 0x2>]\n>>> root.children[0].children\n[<asts.types.PythonBinaryOperator 0x3>]\n>>> root.children[0].children[0].children\n[<asts.types.PythonIdentifier 0x4>,\n <asts.types.PythonAdd 0x5>,\n <asts.types.PythonInteger 0x6>]\n>>> root.children[0].children[0].children[0].source_text\n'x'\n>>> root.children[0].children[0].children[1].source_text\n'+'\n>>> root.children[0].children[0].children[2].source_text\n'88'\n>>> root.children[0].children[0].source_text\n'x + 88'\n>>> root.children[0].children[0].child_slots()\n[('LEFT', 1), ('OPERATOR', 1), ('RIGHT', 1), ('CHILDREN', 0)]\n>>> list(map(lambda x:x.source_text, root.children[0].children[0].children))\n['x', '+', '88']\n```\n\n# Extended Tutorial\n\nThe following examples assume you have imported the asts library using\n`import asts`.  See the methods provided by asts.py for more\ninformation.\n\n<!-- TODO: Setup automatic documentation building. -->\n\n## AST Creation\n\n### Constructor\n\nThe default `AST` constructor should not be invoked directly by clients.\nInstead, the static factory methods described below should be utilized.\n\n### From String\n\nASTs may be created from source text using the `AST.from_string`\nfactory method in the Python API.  Using this method requires source\ntext and (optionally) a language enumeration indicating the source\ntext language.  The example below shows the creation of a simple AST:\n\n```python\n>>> root = asts.AST.from_string(\"x + 88\", language=asts.ASTLanguage.Python)\n```\n\nLanguage enumerations exist for `C`, `Cpp`, `Java`, `Javascript`, `Python`,\n`Rust`, `TypescriptTs`, and `TypescriptTsx`.\n\nFor larger examples where the language may be inferred, the language\nparameter may optionally be elided.  For instance:\n\n```python\n>>> text = \"\"\"\n... import sys\n...\n... def fib(n: int) -> int:\n...     if n < 2:\n...         return n\n...     else:\n...         return fib(n - 1) + fib(n - 2)\n...\n... def main():\n...     if len(sys.argv) == 1:\n...         print(fib(int(sys.argv[1])))\n...\n... if __name__ == '__main__':\n...     main()\n... \"\"\"\n>>> root = asts.AST.from_string(text)\n```\n\nIf tree-sitter cannot parse the source text into an AST, an error or text\nfragment AST node will be created starting at the location of the invalid\nparse.  By default, the children of this node will be the best-effort but\npotentially incorrect parse tree received from tree-sitter with all terminal\ntokens excepting zero-width ones included.  If instead of the tree you wish\nto have a flat, text representation child, you may pass `error_tree=False`\nas a keyword argument.\n\nFinally, by default, the AST returned is the top-level, module node of\nthe parsed AST.  However, in some cases, we may wish get the deepest\nsubnode still encompassing all of the given source text.  This allows\nus to create statement AST nodes, for instance.  To do so, clients\nmay use the `deepest` keyword, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"x + 88\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> type(root)\n<class 'asts.types.PythonBinaryOperator'>\n```\n\n### AST Templates\n\n#### Templates for building ASTs\n\nASTs may also be created using the AST template mechanism.  For\ninstance, the following snippet creates an AST equivalent to\n`asts.AST.from_string(\"x = 2\", language=asts.ASTLanguage.Python, deepest=True)`:\n\n```python\n>>> root = asts.AST.ast_template(\"$ID = 2\", asts.ASTLanguage.Python, id=\"x\")\n>>> root.source_text\n'x = 2'\n```\n\nMetavariable names (e.g. `$ID` above) may contain uppercase characters,\ndigits, or underscores.  Metavariables may be scalars (e.g. `$`) or\nlists (e.g. `@`), as shown below:\n\n```python\n>>> root = asts.AST.ast_template(\"fn(@ARGS)\", asts.ASTLanguage.Python, args=[1,2,3])\n>>> root.source_text\n'fn(1, 2, 3)'\n```\n\nMetavariables may also be positional arguments (e.g. `$1`, `$2`), as\nshown below:\n\n```python\n>>> root = asts.AST.ast_template(\"$1 = 2\", asts.ASTLanguage.Python, \"x\")\n>>> root.source_text\n'x = 2'\n```\n\nHowever, you may not combine positional (e.g. `$1`) and keyword\n(e.g. `$ID`) metavariables in a single template.  The corresponding\nmetavariable values passed in as arguments to `ast_template` may be\nASTs, literals, or lists.\n\n#### Templates for building and destructuring ASTs\n\nASTs may also be directly created for the metavariables in an AST\ntemplate.  For instance, in the template `\"$1 = $2\"`, we may create\nASTs for `$1` and `$2` using `asts_from_template`, as shown below:\n\n```python\n>>> asts = asts.AST.asts_from_template(\"$1 = $2\", asts.ASTLanguage.Python, \"x\", 1)\n>>> len(asts)\n2\n>>> asts[0].source_text\n'x'\n>>> asts[1].source_text\n'1'\n```\n\nFor now, only the position syntax (e.g. `$1`, `$2`) is supported by\n`asts_from_template`.  One AST is returned per metavariable, in\nnumeric order.\n\n#### More information\n\nMore information on AST templates may be found in the SEL\n[template documentation][].\n\n### AST Copy\n\nCopies of an AST may created using `AST.copy` or the python `copy`\nmodule, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 1\", asts.ASTLanguage.Python, deepest=True)\n>>> copy = asts.AST.copy(root)\n>>> copy.source_text\n'x + 1'\n```\n\nIn addition, clients may set child slots in the copy by passing in new\nASTs for each slot as keyword arguments, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 1\", asts.ASTLanguage.Python, deepest=True)\n>>> y = asts.AST.from_string(\"y\", asts.ASTLanguage.Python, deepest=True)\n>>> copy = asts.AST.copy(root, left=y)\n>>> copy.source_text\n'y + 1'\n```\n\nIn addition to ASTs, clients may also pass in literals (e.g. strings,\ncode snippets, numbers) as keyword values, as shown below.  These are\nautomatically parsed into an AST to be inserted.\n\n```python\n>>> root = asts.AST.from_string(\"x + 1\", asts.ASTLanguage.Python, deepest=True)\n>>> copy = asts.AST.copy(root, left=1)\n>>> copy.source_text\n'1 + 1'\n>>> copy = asts.AST.copy(root, left=\"y\")\n>>> copy.source_text\n'y + 1'\n```\n\nTo view the names of an AST's child slots, you may use the\n`child_slots` method, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 1\", asts.ASTLanguage.Python, deepest=True)\n>>> root.child_slots()\n[('LEFT', 1), ('OPERATOR', 1), ('RIGHT', 1), ('CHILDREN', 0)]\n```\n\nAlternatively, you may use the `dir` built-in to inspect an AST object\nand find its child slots as python properties, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 1\", asts.ASTLanguage.Python, deepest=True)\n>>> dir(root)\n['__class__', ..., 'left', ..., 'operator', ..., 'right', ..., 'traverse']\n```\n\nBeyond these named child slots storing ASTs which are parsed from the language\ngrammar, internally, each AST has several additional slots which store ASTs\noutside of the grammar rules, such as comments or error nodes. These include\n`before-asts`, `after-asts`, and (optionally) `internal-asts-[0-9]+` storing\nnodes such as comments and errors before the AST, after the AST, and between\nimplicit terminal tokens within the AST respectively. The names of these slots\ncan be accessed using the `child_slots` method and passing `internal=True`, as\nshown below. These slot names may also be used `child_slot`/`lookup` to\nretrieve their current value and and with `copy` to modify the existing value.\n\n```python\n>>> text = \"\"\"\n... # This is a comment\n... x = x + 1\n... \"\"\"\n>>> root = asts.AST.from_string(text, asts.ASTLanguage.Python)\n>>> stmt = root.children[-1]\n>>> stmt.source_text\n'x = x + 1'\n>>> stmt.child_slots(internal=True)\n[('BEFORE-ASTS', 0), ('CHILDREN', 0), ('AFTER-ASTS', 0)]\n>>> stmt.child_slot(\"BEFORE-ASTS\")\n[<asts.types.PythonComment 0x3>]\n```\n\n## AST Methods\n\n### Common Operations\n\nIn practice, most clients will interact with ASTs using the AST's type and\nretrieving the AST's source text, parent AST, and child ASTs.  All of\nthese operations are supported by the python API.  To begin, let's examine\nusing AST types.\n\nASTs are embedded in a rich type hierarchy generated by the tree-sitter\nlibrary; this type hierarchy is augmented by generic mixins in SEL for\ncommon AST types across languages.  For instance, `IfAST`,\n`StatementAST`, and `IdentifierAST` classes abstract common language\nconstructs and allow identification of these types of ASTs regardless\nof the language of the underlying program.  As with other objects,\nclients may use `isinstance` to test if an AST is an instance or\nsubclass of a given type, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> isinstance(root, asts.types.PythonCall)\nTrue\n>>> isinstance(root, asts.types.CallAST)\nTrue\n>>> isinstance(root, asts.types.PythonAST)\nTrue\n>>> isinstance(root, asts.types.CStringLiteral)\nFalse\n```\n\nBeyond AST types, accessing the source text of an AST is\nanother common operation.  This may be accomplished using\nthe `source_text` property on ASTs, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.source_text\n'print(x)'\n```\n\nAdditionally, to view a list of the immediate children\nof a particular AST, the `children` property may be used,\nas shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.children\n[<asts.types.PythonIdentifier 0x4>, <asts.types.PythonArgumentList1 0x5>]\n>>> root.children[0].source_text\n'print'\n>>> identifier = root.children[1].children[0]\n>>> identifier.source_text\n'x'\n```\n\nAn AST is composed of various child slots which are concatenated together\nwhen accessed via the `children` property.  To view the child slots for\na particular AST you may use the `child_slots()` method, which returns\na list of slot-name, arity pairs.  An arity of one indicates the slot\nis a single AST, while an arity of zero indicates the slot is composed\nof zero or more ASTs.  The AST(s) comprising a given slot may be\naccessed using the slot name as a python property accessor or by using\n`child_slot` method, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.child_slots()\n[('FUNCTION', 1), ('ARGUMENTS', 1), ('CHILDREN', 0)]\n>>> root.function.source_text\n'print'\n>>> root.child_slot(\"FUNCTION\").source_text\n'print'\n```\n\nBeyond direct child lookup, an AST path composed of the names of the\nchild slots and, when the child slot is a list, a position in this list\nmay be used to lookup ASTs at arbritrary depths in the tree using the\n`lookup` method.  Additionally, an AST's path in a tree may be found\ndirectly using the `ast_path` method, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> x = root.lookup(['ARGUMENTS', ('CHILDREN', 0)])\n>>> x.source_text\n'x'\n>>> root.ast_path(x)\n['ARGUMENTS', ('CHILDREN', 0)]\n```\n\nFinally, parent trees may be accessed using the `parent` and `parents`\nmethods, as shown below.  Please note that these methods require the\nroot of the subtree as a parameter.\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.children\n[<asts.types.PythonIdentifier 0x4>, <asts.types.PythonArgumentList1 0x5>]\n>>> root.children[0].source_text\n'print'\n>>> identifier = root.children[1].children[0]\n>>> identifier.source_text\n'x'\n>>> identifier.parent(root).source_text\n'(x)'\n>>> [p.source_text for p in identifier.parents(root)]\n['(x)', 'print(x)']\n```\n\n#### Pattern Matching\n\nIn Python 3.10+, AST types and properties may be used in\n[pattern matching][] for conditional logic and to destructure\nan AST into its components parts.  For instance, to match\nagainst assignments where the left-hand side of the assignment\nis the variable \"x\", the following match clause may be used:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"x = 1\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> match root:\n...     case asts.types.PythonAssignment(left=asts.types.IdentifierAST(source_text=\"x\")):\n...         print(\"Match found\")\n...\nMatch found\n```\n\nAs another example, to destructure the left-hand and right-hand sides\nof an assignment into separate variables, the following match\nclause may be used:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"x = 1\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> match root:\n...     case asts.types.PythonAssignment(left=lhs, right=rhs):\n...         [lhs, rhs]\n...\n[<asts.types.PythonIdentifier 0x4>, <asts.types.PythonInteger 0x5>]\n```\n\n### Source Locations\n\nFor some applications, it may be useful to know the start/end locations\nof each AST or retrieve the AST at a given location.  Clients may do\nboth using the `ast_source_ranges` and `ast_at_point` methods\nrespectively, as shown below.  Please note that for each method the\nlines and columns are 1-indexed.\n\n```python\n>>> root = asts.AST.from_string(\n...     \"print(x)\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.ast_source_ranges()\n[(<asts.types.PythonCall 0x3>, ((1, 1), (1, 9))),\n (<asts.types.PythonIdentifier 0x4>, ((1, 1), (1, 6))),\n (<asts.types.PythonArgumentList1 0x5>, ((1, 6), (1, 9))),\n (<asts.types.PythonIdentifier 0x6>, ((1, 7), (1, 8)))]\n>>> root.ast_at_point(1, 7).source_text\n'x'\n```\n\n### Functions\n\nFunction ASTs have special consideration in the python API, and clients\nmay retrieve various function attributes, such as name, parameters, and\nbody, using the respective AST methods, `function_name`,\n`function_parameters`, and `function_body`, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"def foo(bar: int) -> int:\\n    return bar / 2\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root.function_name()\n'foo'\n>>> [param.source_text for param in root.function_parameters()]\n['bar: int']\n>>> root.function_body().source_text\n'    return bar / 2'\n```\n\n### Function Callsites\n\nIn addition to function ASTs, function callsites also have special\nconsideration in the python API.  Clients may query for the library\ncontaining the function implementation (`provided_by`), the function\nportion of the callsite (`call_function`), and the callargs\n(`call_arguments`).  An example incorporating these methods is shown\nbelow:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"import json\\njson.dumps({})\",\n...     language=asts.ASTLanguage.Python\n... )\n>>> callsite = root.children[-1].children[-1]\n>>> callsite.provided_by(root)\n'json'\n>>> callsite.call_function().source_text\n'json.dumps'\n>>> [callarg.source_text for callarg in callsite.call_arguments()]\n['{}']\n```\n\n## AST Traversal\n\nASTs may be explictly traversed in pre-order using the `traverse` method\nwhich creates a generator that may be used anywhere a python `iterable`\nis required.  An example usage is shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 88\", language=asts.ASTLanguage.Python)\n>>> for a in root.traverse():\n...     print(a)\n<asts.types.PythonModule 0x1>\n<asts.types.PythonExpressionStatement0 0x2>\n<asts.types.PythonBinaryOperator 0x3>\n<asts.types.PythonIdentifier 0x4>\n<asts.types.PythonAdd 0x5>\n<asts.types.PythonInteger 0x6>\n```\n\nAdditionally, AST objects are themselves iterators and may be used\nanywhere a python `iterable` is required, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\"x + 88\", language=asts.ASTLanguage.Python)\n>>> for a in root:\n...     print(a)\n<asts.types.PythonModule 0x1>\n<asts.types.PythonExpressionStatement0 0x2>\n<asts.types.PythonBinaryOperator 0x3>\n<asts.types.PythonIdentifier 0x4>\n<asts.types.PythonAdd 0x5>\n<asts.types.PythonInteger 0x6>\n```\n\nAs expected, ASTs may be also be used in list comprehensions as shown:\n\n```python\n>>> root = asts.AST.from_string(\"x + 88\", language=asts.ASTLanguage.Python)\n>>> ids = [a for a in root if isinstance(a, asts.types.PythonIdentifier)]\n>>> len(ids)\n1\n```\n\n## AST Manipulation\n\nASTs may also be manipulated (mutated) using the python API.  Mutation\noperations create a new AST distinct from the inputs.  The input ASTs\nmay continue to be used as before; however, they are unchanged objects\ndistinct from the AST(s) created.\n\n### Mutation Primitives\n\nCurrently, clients may cut, insert, or replace AST subtrees, as shown:\n\nCUT:\n```python\n>>> root = asts.AST.from_string(\"x = 2\\n\", language=asts.ASTLanguage.Python)\n>>> stmt = root.children[0]\n>>> root = asts.AST.cut(root, stmt)\n>>> root.source_text\n''\n```\n\nINSERT:\n```python\n>>> root = asts.AST.from_string(\n...     \"y = 3\\n\",\n...     language=asts.ASTLanguage.Python\n... )\n>>> stmt = root.children[0]\n>>> new_stmt = asts.AST.from_string(\n...     \"x = 2\\n\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root = asts.AST.insert(root, stmt, new_stmt)\n>>> root.source_text\n'x = 2\\ny = 3\\n'\n```\n\nREPLACE:\n```python\n>>> root = asts.AST.from_string(\n...     \"x = 2\\n\",\n...     language=asts.ASTLanguage.Python\n... )\n>>> literal = root.children[0].children[0].children[-1]\n>>> new_literal = asts.AST.from_string(\n...     \"3\",\n...     language=asts.ASTLanguage.Python,\n...     deepest=True\n... )\n>>> root = asts.AST.replace(root, literal, new_literal)\n>>> root.source_text\n\"x = 3\\n\"\n```\n\nAs a useful shortcut, for small mutations, literals may be passed as the\nvalues for insertion and replacement, as shown below:\n\n```python\n>>> root = asts.AST.from_string(\n...     \"x = 2\\n\",\n...     language=asts.ASTLanguage.Python\n... )\n>>> literal = root.children[0].children[0].children[-1]\n>>> root = asts.AST.replace(root, literal, 3)\n>>> root.source_text\n\"x = 3\\n\"\n```\n\n### Transformers\n\nIn addition to simple mutation primitives, the API also supports walking\nthe AST tree and performing transformations on the nodes within.  This\nmode of mutation requires the client to define a *transformer* function\nwhich takes an AST node parameter as input and (optionally) returns an\nAST or literal which should replace that node in the new tree.  If no\nnew node is provided by the transformer function, the node is not\nreplaced in the newly created tree.\n\nFor instance, consider a scenario where you wish to rewrite an AST,\nreplacing all `x` identifiers with `y`.  To begin, you would define\nan `x_to_y` transformer function, as shown below:\n\n```python\n>>> def x_to_y(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Convert 'x' identifier ASTs to 'y'.\"\"\"\n...     if isinstance(ast, asts.types.IdentifierAST) and \"x\" == ast.source_text:\n...         return asts.AST.from_string(\"y\", ast.language, deepest=True)\n...\n```\n\nAs you can see, this function returns a `y` identifier when it encounters\nan `x` identifier.  To use the transformer to replace nodes in an AST tree,\nyou would use the `AST.transform` function, as shown below:\n\n```python\n>>> text = \"\"\"\n... x = 1\n... print(x)\n... \"\"\"\n>>> root = asts.AST.from_string(text, asts.ASTLanguage.Python)\n>>> print(root.source_text.strip())\nx = 1\nprint(x)\n>>> transformed = asts.AST.transform(root, x_to_y)\n>>> print(transformed.source_text.strip())\ny = 1\nprint(y)\n```\n\nIn the example above, the `x_to_y` transformer returned an AST.  The\ntransformer function may also return a literal value, which will be\nparsed as an AST.  For instance, the below `x_to_y` transformer is\nfunctionally equivalent to the example above:\n\n```python\n>>> def x_to_y(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Convert 'x' identifier ASTs to 'y'.\"\"\"\n...     if isinstance(ast, asts.types.IdentifierAST) and \"x\" == ast.source_text:\n...         return \"y\"\n...\n```\n\nAdditionally, when using Python 3.10+, you may use [pattern matching][]\nto further simplify the implementation of the `x_to_y` transformer,\nas shown below:\n\n```python\n>>> def x_to_y(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Convert 'x' identifier ASTs to 'y'.\"\"\"\n...     match ast:\n...         case asts.types.IdentifierAST(source_text=\"x\"):\n...             return \"y\"\n...\n```\n\nTransformers may implement more complicated logic than the simple\n`x_to_y` transform above.  For instance, one may wish to convert\n`x` identifiers to `y`, but only for the left-hand side of assignment\nstatements, as shown below:\n\n```python\n>>> def x_to_y_assignment_lhs(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Convert 'x' identifier ASTs to 'y' on the lhs of assignments.\"\"\"\n...     if (\n...         isinstance(ast, asts.types.PythonAssignment)\n...         and \"x\" == ast.left.source_text\n...     ):\n...         return asts.AST.copy(ast, left=\"y\")\n...\n>>> text = \"\"\"\n... x = 1\n... print(y)\n... \"\"\"\n>>> root = asts.AST.from_string(text, asts.ASTLanguage.Python)\n>>> transformed = asts.AST.transform(root, x_to_y_assignment_lhs)\n>>> print(transformed.source_text.strip())\ny = 1\nprint(y)\n```\n\nAs before, the `x_to_y_assignment_lhs` transformer may be simplified\nusing [pattern matching][] in Python 3.10+, as shown below:\n\n```python\n>>> def x_to_y_assignment_lhs(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Convert 'x' identifier ASTs to 'y' on the lhs of assignments.\"\"\"\n...     match ast:\n...         case asts.types.PythonAssignment(left=asts.types.IdentifierAST(source_text=\"x\")):\n...             return asts.AST.copy(ast, left=\"y\")\n...\n```\n\nFor these more complicated transforms, you may need to mutate the parent\nof the node you are interested in.  For instance, above we create a\nnew python assignment node with the left-hand side modified to the\nvalue we want.\n\nTying everything together, consider the case where wish to delete\nall `print` statements from an AST.  This may be accomplished by\nfirst defining a predicate for print statements, as shown below:\n\n```python\n>>> def is_print_statement(ast: asts.AST) -> bool:\n...     \"\"\"Return TRUE if AST is an statement calling the print function.\"\"\"\n...     if isinstance(ast, asts.types.ExpressionStatementAST):\n...         fn_calls = [c.call_function().source_text for c in asts.utility.call_asts(ast)]\n...         return \"print\" in fn_calls\n...     return False\n...\n```\n\nOnce this predicate is in place, we may use it to define a transformer which\nreturns a node with the `print` statements immediately below it elided:\n\n```python\n>>> def delete_print_statements(ast: asts.AST) -> Optional[asts.LiteralOrAST]:\n...     \"\"\"Delete all print statements from the children of AST.\"\"\"\n...     if isinstance(ast, (asts.types.RootAST, asts.types.CompoundAST)):\n...         # Build a list of new, non-comment children directly under the AST,\n...         # eliding print statements.\n...         new_children = [\n...             c for c in ast.child_slot(\"children\")\n...             if not is_print_statement(c)\n...         ]\n...\n...         # Special case; if no children remain, add a \"pass\" statement nop to\n...         # avoid syntax errors.\n...         new_children = new_children if new_children else [\"pass\\n\"]\n...\n...         # Create the new node with print statements removed from the children.\n...         return asts.AST.copy(ast, children=new_children)\n...\n```\n\nFinally, as before, we may use the `delete_print_statements` transformer\nto mutate an AST, as shown below:\n\n```\n>>> text = \"\"\"\n... x = 1\n... y = 2\n... if x > 1:\n...     x = x ** y\n...     print(\"Test One: %d\" % x)\n... else:\n...     print(\"Test Two: %d\" % x)\n... print(\"y = %d\", y)\n... \"\"\"\n>>> root = asts.AST.from_string(text, asts.ASTLanguage.Python)\n>>> transformed = asts.AST.transform(root, delete_print_statements)\n>>> print(transformed.source_text.strip())\nx = 1\ny = 2\nif x > 1:\n    x = x ** y\nelse:\n    pass\n```\n\n# Architecture\n\nThe python library is a thin wrapper around a Common Lisp program named\n`tree-sitter-interface` which calls the required pieces of the\nSoftware Evolution Library ([SEL][]).  Most API calls are delegated to\nthis interface which we communicate with using JSON formatted input/\noutput over stdio/stdout or a socket.\n\nThe python AST objects contain a oid attribute representing an\nobject id (oid) on the Common Lisp side of the interface; in essence,\nthe python ASTs are pointers to Common Lisp memory locations.  When\ncalling a python AST method, the oid is serialized to the Common Lisp\nside of the interface where the underlying AST object is found\n(dereferenced) and the operation performed.  You may get the object id\nusing the `oid` property on python ASTs; to test for python AST\nequality, we check to see if the ASTs point to the same object using\nthe oids.\n\nTo allow for garbage collection, the ASTs are manually reference\ncounted.  Whenever a python AST (pointer) is created, the reference\ncount for the associated Common Lisp AST is incremented.  Similarly,\nas python ASTs are garbage collected the reference counter is\ndecremented.  When the reference counter reaches zero, the Common Lisp\nAST is released and may be garbage collected at the appropriate time.\nTo get the reference count for a particular python AST, you may use\nthe `ast_ref_count` method.\n\nThe underlying Common Lisp ASTs are themselves treated as immutable.\nTherefore, when performing mutation operations (e.g. cut, replace,\ninsert), new ASTs are created in the process.\n\n# FAQ\n\n#### ASTs package does not faithfully reproduce original text\n\nThe source text property of an AST created using the ASTs package\nmay not match the original text given to the parser, even if no\nmutations are performed.  An automatic source code formatter, such\nas `black` or `clang-format`, may be used on the original source\ntext and the source text attribute of the parsed AST before printing\nto ensure consistency if this is required.  This flexibility in\nparsing allows for us to perform structured mutation operations -\nfor instance, automatically inserting a comma when an item is\nadded to an initializer list in C++.\n\n#### ASTs package inserts/deletes characters upon mutation.\n\nAs part of a mutation, the ASTs package may insert or delete whitespace\nor separator characters (e.g. commas) between ASTs.  One common\nidiom is to use an automatic source code formatter, such as `black`\nor `clang-format`, on the source text after mutation to ensure\nconsistency before printing to screen or disk.\n\n#### ASTs package throws \"Unable to match ... on on AST of type ...\"\n\nThis error occurs after a mutation when an AST is inserted or\nreplaces another and the type of the new AST does not match that\nexpected by the tree-sitter grammer.  These errors are often subtle\nand may be tricky to diagnose.  As an example, consider the following:\n\n```python\n>>> func = asts.AST.from_string(\"print(a)\", asts.ASTLanguage.Python, deepest=True)\n>>> type(func)\n<class 'asts.types.PythonCall'>\n```\n\nIn the above snippet, we create a `func` AST representing a call to the print\nfunction.  Consider now that we wish to replace the `print` call with something\ndifferent, say `foo`.  We may believe the following will perform\nthe operation:\n\n```python\n>>> foo = asts.AST.from_string(\"foo\", asts.ASTLanguage.Python)\n>>> new_func = asts.AST.copy(func, function=foo)\n>>> new_func.source_text\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../Python-3.8.12/lib/python3.8/functools.py\", line 967, in __get__\n    val = self.func(instance)\n  File \".../python/asts/asts.py\", line 228, in source_text\n    return _interface.dispatch(AST.source_text.func.__name__, self)\n  File \".../python/asts/asts.py\", line 589, in dispatch\n    return deserialize(handle_errors(json.loads(response.decode())))\n  File \".../python/asts/asts.py\", line 539, in handle_errors\n    raise ASTException(data[\"error\"])\nasts.asts.ASTException: An unhandled error condition has been signalled: Unable to match\n(SEQ (FIELD PYTHON-FUNCTION PYTHON-PRIMARY-EXPRESSION)\n (FIELD PYTHON-ARGUMENTS PYTHON-GENERATOR-EXPRESSION PYTHON-ARGUMENT-LIST))\non AST of type\nPYTHON-CALL\n```\n\nHowever, this does not work properly.  If we look at the type of `foo` and the type\nof the function child slot of `new_func`, we can see as to why.\n\n```python\n>>> type(foo)\n<class 'asts.types.PythonModule'>\n>>> type(new_func.child_slot(\"function\"))\n<class 'asts.types.PythonModule'>\n```\n\nIn this case, we attempt to insert a `PythonModule` AST as the function child\nslot of `func`.  A `PythonModule` AST is a \"root\" AST type, associated with an\nentire python file, replete with imports, functions, etc.  This AST type does\nnot make sense as the \"function\" portion of a call AST; in this case,\nwe want an identifier AST.  We can get the identifier by passing the `deepest`\nkeyword during AST creation, retrieving the deepest subnode still\nencompassing all of the given source text, as shown below:\n\n\n```python\n>>> foo = asts.AST.from_string(\"foo\", asts.ASTLanguage.Python, deepest=True)\n>>> type(foo)\n<class 'asts.types.PythonIdentifier'>\n>>> new_func = asts.AST.copy(func, function=foo)\n>>> new_func.source_text\n'foo(a)'\n```\n\n#### What is the difference between the \"children\" property and the \"children\" child slot?\n\nAn AST is composed of several child slots, the arity of which may\nbe 0 (zero or more) or 1 (single AST).  For instance, in the AST\nfor `print(a)`, there are two child slots, `[['FUNCTION', 1], ['ARGUMENTS', 1]]`,\nallowing for destructuring into component parts of the AST.\n\nIn addition, internally, each AST has private before/after/internal-AST\nslots for storing comments, errors, and internal whitespace that appears\nin the source code.  For instance, in the AST for the function body below,\nthe block AST has the comment `# This is a comment` stored in the internal\nbefore-AST slot.\n\n```python\ndef foo():\n    # This is a comment\n    return 0\n```\n\nThe `children` property on AST will return the concatenated list of\ncomponent slots of an AST and any comments included in each AST's\ninternal before or after AST slot.  The order of the ASTs will\nmatch the order they appear in the source text.\n\nThe `children` child slot on an AST will return all ASTs not\nassigned to an explicit slot (e.g. 'FUNCTION', 'ARGUMENTS' above)\nand will NOT include any comment ASTs stored internally in an\nAST's before/internal/after-AST slots.\n\nWhen using the AST `copy` method, care should be taken when\nusing the `children` key (e.g. `AST.copy(ast, children=...)`).\nIn this case, we are setting the `children` slot and not the\nproperty.  Therefore, in almost all cases, we will want to\nuse the children slot, not property, of another AST to populate\nthe keyword argument (e.g. `AST.copy(ast, children=other.child_slot(\"children\"))`).\nIf the property is utilized and a comment is added to the copy\nAST's children slot, the error described above in \"ASTs package\nthrows 'Unable to match...'\" will occur.\n\n#### Why does every AST has a child slot named \"children\"?\n\nTo begin, lets consider the AST for `print(a)`; for this AST there\nare two explicit child slots not named `children`:\n`[['FUNCTION', 1], ['ARGUMENTS', 1]]`.  All ASTs not assigned to an\nexplicit child slot on an AST (e.g. \"FUNCTION\" or \"ARGUMENTS\"\npreviously) are assigned to the \"catchall\" slot named \"children\".\nAdditionally, for ASTs with no named slots (e.g. function\nbodies), all of the ASTs are stored in the slot named \"children\".\nIn essence, the slot serves as a fall-thru place to store all\nASTs not assigned to an explicit, named slot.\n\n#### ASTs package throws \"tree-sitter-interface crashed\"\n\nThis error is raised when the Common Lisp binary (`tree-sitter-interface`)\nbacking the ASTs python package crashes.  If available, the error will\nreport the standard output and standard error streams for the\n`tree-sitter-interface` process prior to the crash.\n\n# License\n\nGPLv3+\n\n[tree-sitter]: https://tree-sitter.github.io/tree-sitter/\n[SEL]: https://grammatech.github.io/sel/index.html#Software-Evolution-Library\n[template documentation]: https://grammatech.github.io/sel/Templates.html#Templates\n[pattern matching]: https://www.python.org/dev/peps/pep-0636/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grammatech/sel",
    "keywords": "software-engineering,source,program-synthesis",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asts",
    "package_url": "https://pypi.org/project/asts/",
    "platform": null,
    "project_url": "https://pypi.org/project/asts/",
    "project_urls": {
      "Bug Reports": "https://github.com/grammatech/sel/issues",
      "Homepage": "https://github.com/grammatech/sel",
      "Source": "https://github.com/grammatech/sel/"
    },
    "release_url": "https://pypi.org/project/asts/0.9.6/",
    "requires_dist": [
      "backports.cached-property",
      "typing-extensions",
      "psutil",
      "pygments",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "md-toc ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "pyright ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A library for programmatic software modification",
    "version": "0.9.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17186164,
  "releases": {
    "0.1.10.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f18db3c0ae432817875112d11a95c756531ebb17dc27e09feb68d0fe03b8616",
          "md5": "450961ab0ef2461e5298b38ee1b979d0",
          "sha256": "c73050a6b20f0b04d3e0526e07d65453f5cbdfbd5cac0c547cc914b85e6e7f06"
        },
        "downloads": -1,
        "filename": "asts-0.1.10.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "450961ab0ef2461e5298b38ee1b979d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31699808,
        "upload_time": "2021-07-07T04:53:42",
        "upload_time_iso_8601": "2021-07-07T04:53:42.049323Z",
        "url": "https://files.pythonhosted.org/packages/3f/18/db3c0ae432817875112d11a95c756531ebb17dc27e09feb68d0fe03b8616/asts-0.1.10.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c82e2afbc018e69499bd245387687f41ec098d64724498611fb8a18fc036d83d",
          "md5": "0bebe861f56ff586160f062acced93a1",
          "sha256": "cee904734cf640652a30ec2e762008c62e087b9a0d29280d378847717ad6b335"
        },
        "downloads": -1,
        "filename": "asts-0.1.10.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bebe861f56ff586160f062acced93a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31093060,
        "upload_time": "2021-07-07T17:54:20",
        "upload_time_iso_8601": "2021-07-07T17:54:20.685419Z",
        "url": "https://files.pythonhosted.org/packages/c8/2e/2afbc018e69499bd245387687f41ec098d64724498611fb8a18fc036d83d/asts-0.1.10.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105c2ece7afeb5ccc48697b0d74585650716673f7cb9f7899edbfeebe4ba3e0a",
          "md5": "932a5dc96d759ce3992451c6acb8d69f",
          "sha256": "19b7ee0b90ee84c46a5ce3044df2e4aa522d86eb9c85cbce274d7e8b6ff02121"
        },
        "downloads": -1,
        "filename": "asts-0.1.10.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "932a5dc96d759ce3992451c6acb8d69f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31097303,
        "upload_time": "2021-08-02T19:15:14",
        "upload_time_iso_8601": "2021-08-02T19:15:14.339723Z",
        "url": "https://files.pythonhosted.org/packages/10/5c/2ece7afeb5ccc48697b0d74585650716673f7cb9f7899edbfeebe4ba3e0a/asts-0.1.10.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7af91d2adb937d65b32f63438880a2db4bc3c7c0748e3dbedcd36dbd451d1244",
          "md5": "637fb8d760dc7c1568815de4ecd394a1",
          "sha256": "18389894c9e62ede8990aa695bb0658e5b26bcc418475184a83a156a834475d6"
        },
        "downloads": -1,
        "filename": "asts-0.1.3.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "637fb8d760dc7c1568815de4ecd394a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26296446,
        "upload_time": "2021-04-19T14:53:45",
        "upload_time_iso_8601": "2021-04-19T14:53:45.967958Z",
        "url": "https://files.pythonhosted.org/packages/7a/f9/1d2adb937d65b32f63438880a2db4bc3c7c0748e3dbedcd36dbd451d1244/asts-0.1.3.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84b4fe45709a36f6c6f9779fc1bd02cae507303180061fc6eb79595d247601d5",
          "md5": "82bea104b79312fbde69ba6016b3de80",
          "sha256": "98482a78fe1e5370a055791bcd7c013c0094422b709079cff11de6378dd0d274"
        },
        "downloads": -1,
        "filename": "asts-0.1.3.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82bea104b79312fbde69ba6016b3de80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25454513,
        "upload_time": "2021-04-19T18:36:49",
        "upload_time_iso_8601": "2021-04-19T18:36:49.731969Z",
        "url": "https://files.pythonhosted.org/packages/84/b4/fe45709a36f6c6f9779fc1bd02cae507303180061fc6eb79595d247601d5/asts-0.1.3.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f77a9f8677f6a81d93486ef801ec7ec427c8d92455018ae1c92a01ee2413710",
          "md5": "6ec21a1b3852545d3308bb41a807252f",
          "sha256": "976aa6aeed6c084e6c7e5518718b63a8413075150518fb71a77208171744664f"
        },
        "downloads": -1,
        "filename": "asts-0.1.4.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ec21a1b3852545d3308bb41a807252f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25537066,
        "upload_time": "2021-05-20T23:14:43",
        "upload_time_iso_8601": "2021-05-20T23:14:43.881897Z",
        "url": "https://files.pythonhosted.org/packages/0f/77/a9f8677f6a81d93486ef801ec7ec427c8d92455018ae1c92a01ee2413710/asts-0.1.4.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60006a03cc32b316d6efe5db81b338dd798863cd19cc19f7030abae2cccc81e0",
          "md5": "8a2810b31d851e64a75b95eeb5c33744",
          "sha256": "75327b9a8583eefe5aa206cb24bb8f16f28b225f82eca153390a3b1f67dd5046"
        },
        "downloads": -1,
        "filename": "asts-0.1.5.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a2810b31d851e64a75b95eeb5c33744",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24419924,
        "upload_time": "2021-06-07T20:10:58",
        "upload_time_iso_8601": "2021-06-07T20:10:58.051639Z",
        "url": "https://files.pythonhosted.org/packages/60/00/6a03cc32b316d6efe5db81b338dd798863cd19cc19f7030abae2cccc81e0/asts-0.1.5.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "453d77c4e0f038b699dda3bd813ab8172b9a5cf5f88022fcdadf3e1bb7b39b36",
          "md5": "1c3184b36cf09604ddb6471acbb4e3c0",
          "sha256": "276fb5505eedc2084125e918eb64f8baa6563fc07ce3d033dbb87914675736a7"
        },
        "downloads": -1,
        "filename": "asts-0.1.6.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c3184b36cf09604ddb6471acbb4e3c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24418297,
        "upload_time": "2021-06-08T17:05:29",
        "upload_time_iso_8601": "2021-06-08T17:05:29.058725Z",
        "url": "https://files.pythonhosted.org/packages/45/3d/77c4e0f038b699dda3bd813ab8172b9a5cf5f88022fcdadf3e1bb7b39b36/asts-0.1.6.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1addf9ad46ff223f7695929469b188219f49f1b02545b2ae2c28bb4b6879c470",
          "md5": "d17f2fc1edb42fa8a557763f8315ea76",
          "sha256": "a15c1784bd048c6727af09a1da5f28c33a86b5835cf5694d881cfcc46992b550"
        },
        "downloads": -1,
        "filename": "asts-0.1.7.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d17f2fc1edb42fa8a557763f8315ea76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24654173,
        "upload_time": "2021-06-09T00:19:19",
        "upload_time_iso_8601": "2021-06-09T00:19:19.455813Z",
        "url": "https://files.pythonhosted.org/packages/1a/dd/f9ad46ff223f7695929469b188219f49f1b02545b2ae2c28bb4b6879c470/asts-0.1.7.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4852d038b3473ca580131d75f926e74e64342c9d683f1f39d2553bc5bf167750",
          "md5": "442641d321179b0644be542ecfa11826",
          "sha256": "4401e8ef6fea664aae25ddc1bc1bacad73ca89512fac782cd8df3ca268598c7b"
        },
        "downloads": -1,
        "filename": "asts-0.1.8.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "442641d321179b0644be542ecfa11826",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24661090,
        "upload_time": "2021-06-09T00:51:49",
        "upload_time_iso_8601": "2021-06-09T00:51:49.154457Z",
        "url": "https://files.pythonhosted.org/packages/48/52/d038b3473ca580131d75f926e74e64342c9d683f1f39d2553bc5bf167750/asts-0.1.8.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1d2e682f5c943f5d099692bc5263677a90ecbcc56267d605e5e59326ce18a73",
          "md5": "6a59a379efd8dd57e01b2fcc966dec74",
          "sha256": "48387e0ecbdabd3c09a7c7758d5efe0d7be37c31c28940c23eb63a9a471958de"
        },
        "downloads": -1,
        "filename": "asts-0.1.9.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a59a379efd8dd57e01b2fcc966dec74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6198,
        "upload_time": "2021-07-06T20:44:54",
        "upload_time_iso_8601": "2021-07-06T20:44:54.399245Z",
        "url": "https://files.pythonhosted.org/packages/c1/d2/e682f5c943f5d099692bc5263677a90ecbcc56267d605e5e59326ce18a73/asts-0.1.9.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b91e26a1a6f69309fe3ac7f506fa39855ad316079e72a212675ce0c2a82c47d",
          "md5": "4b3051060e364c1b1a6873e6d4eea59d",
          "sha256": "32869bbb36ce053fa8c0f0481cb8dbbe0339e0b49f448eee841aa254ec5bf419"
        },
        "downloads": -1,
        "filename": "asts-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b3051060e364c1b1a6873e6d4eea59d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36776461,
        "upload_time": "2021-08-13T21:05:54",
        "upload_time_iso_8601": "2021-08-13T21:05:54.143705Z",
        "url": "https://files.pythonhosted.org/packages/1b/91/e26a1a6f69309fe3ac7f506fa39855ad316079e72a212675ce0c2a82c47d/asts-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c6923a2260c71299a4df3f399cbccc25e1c0b714b66babf0e3508e68e08a0aa",
          "md5": "968d95925639659fb6a49d298a03854f",
          "sha256": "01dbf350bb465576a48ef432901eb8a7bf40ca020b9cad63824e83ba86b91c02"
        },
        "downloads": -1,
        "filename": "asts-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "968d95925639659fb6a49d298a03854f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36783522,
        "upload_time": "2021-09-08T19:04:13",
        "upload_time_iso_8601": "2021-09-08T19:04:13.693964Z",
        "url": "https://files.pythonhosted.org/packages/5c/69/23a2260c71299a4df3f399cbccc25e1c0b714b66babf0e3508e68e08a0aa/asts-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b099ae95bc1f76631bba18c9be1bd6a0bad2292115449bb48ef349e16e10ada7",
          "md5": "ae8c8f8d6903878e902ed74aa4e824fb",
          "sha256": "9a17e84bde33787ab9b12e6498193b72152398105e261e9139e6c840d48d2ee7"
        },
        "downloads": -1,
        "filename": "asts-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae8c8f8d6903878e902ed74aa4e824fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38417807,
        "upload_time": "2021-09-13T17:17:25",
        "upload_time_iso_8601": "2021-09-13T17:17:25.178780Z",
        "url": "https://files.pythonhosted.org/packages/b0/99/ae95bc1f76631bba18c9be1bd6a0bad2292115449bb48ef349e16e10ada7/asts-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bbc1b52372b745fc6d802edc20499033c0d06c1159f36feec52cdd7b342407c",
          "md5": "3fe0184e4fbee6b1a97bac882cda03e8",
          "sha256": "bed218f1b406ae433cd0aa8d95159f25c8af59cc8395dc9c74f81d8bfc1f411a"
        },
        "downloads": -1,
        "filename": "asts-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fe0184e4fbee6b1a97bac882cda03e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28901543,
        "upload_time": "2021-09-23T18:32:50",
        "upload_time_iso_8601": "2021-09-23T18:32:50.202671Z",
        "url": "https://files.pythonhosted.org/packages/9b/bc/1b52372b745fc6d802edc20499033c0d06c1159f36feec52cdd7b342407c/asts-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "badcdbd7e873e223fe7e1f7f0ff6c3c7da43a255b0b7b482a5a3d51b1aaae9c9",
          "md5": "ecc63449af23eeb1d8ba28b32df1e49b",
          "sha256": "a2d74d5e8f0899be8e712971f7bbdff276e63da44332af330c9da85049a1c619"
        },
        "downloads": -1,
        "filename": "asts-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecc63449af23eeb1d8ba28b32df1e49b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28954744,
        "upload_time": "2021-09-29T17:21:17",
        "upload_time_iso_8601": "2021-09-29T17:21:17.278610Z",
        "url": "https://files.pythonhosted.org/packages/ba/dc/dbd7e873e223fe7e1f7f0ff6c3c7da43a255b0b7b482a5a3d51b1aaae9c9/asts-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bd150a07220f65c0e2ee70f058122325818a86ba3723ea9c57b63c4266de66a",
          "md5": "32954b6af8dea2df08777ed1d60ef11f",
          "sha256": "64acf713eda9ebaa35d75f120eb0b4b962cf09774bac44b003da22c4640674bf"
        },
        "downloads": -1,
        "filename": "asts-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32954b6af8dea2df08777ed1d60ef11f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29307264,
        "upload_time": "2021-10-06T16:25:26",
        "upload_time_iso_8601": "2021-10-06T16:25:26.428606Z",
        "url": "https://files.pythonhosted.org/packages/2b/d1/50a07220f65c0e2ee70f058122325818a86ba3723ea9c57b63c4266de66a/asts-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a7da67e340bea4c0b84446bed5989f9a736be8598db2a0792628a535d1cbce",
          "md5": "fcdaf92ba68b3e46cd3937c369cbe752",
          "sha256": "af9e65f116aff5bceea6dee12f0739c4efcdc66e348a6c025458174773f5f0d2"
        },
        "downloads": -1,
        "filename": "asts-0.4.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcdaf92ba68b3e46cd3937c369cbe752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29938263,
        "upload_time": "2022-01-27T22:17:03",
        "upload_time_iso_8601": "2022-01-27T22:17:03.423282Z",
        "url": "https://files.pythonhosted.org/packages/66/a7/da67e340bea4c0b84446bed5989f9a736be8598db2a0792628a535d1cbce/asts-0.4.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2b325e9dca8c620715b10fc4fa0bf10b28abe685090e14a872e3551f6e06f44",
          "md5": "addcd39ebf77aa907f9421c62ff7be4e",
          "sha256": "20da144dac65341b3f732731f95f7fafe2ef3b19a295e361d073e8388f8ca19b"
        },
        "downloads": -1,
        "filename": "asts-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "addcd39ebf77aa907f9421c62ff7be4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29732505,
        "upload_time": "2021-10-29T18:22:55",
        "upload_time_iso_8601": "2021-10-29T18:22:55.492292Z",
        "url": "https://files.pythonhosted.org/packages/d2/b3/25e9dca8c620715b10fc4fa0bf10b28abe685090e14a872e3551f6e06f44/asts-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f816b58a2e81a9a1953ab8738d0d4fabda6f84efb201560aa47348b5df2f37d0",
          "md5": "1118c2fd7dd14ac7f10898876c279e3b",
          "sha256": "4e493f04d92918f628664c56bee6a116cf90fac1f51f2839e282f34c66919848"
        },
        "downloads": -1,
        "filename": "asts-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1118c2fd7dd14ac7f10898876c279e3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29747836,
        "upload_time": "2021-11-03T18:57:22",
        "upload_time_iso_8601": "2021-11-03T18:57:22.368851Z",
        "url": "https://files.pythonhosted.org/packages/f8/16/b58a2e81a9a1953ab8738d0d4fabda6f84efb201560aa47348b5df2f37d0/asts-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a45f1e347624d2a64b701da88e06cc44af944ad5eaef31d8b9711a38f49c08ca",
          "md5": "00fe51401b686ad91ed388c61f81e22a",
          "sha256": "f07da0795ed361b6214070f817ba6e89da6607b087b488316e3ba16413e3be73"
        },
        "downloads": -1,
        "filename": "asts-0.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00fe51401b686ad91ed388c61f81e22a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38482139,
        "upload_time": "2021-11-22T22:35:29",
        "upload_time_iso_8601": "2021-11-22T22:35:29.188941Z",
        "url": "https://files.pythonhosted.org/packages/a4/5f/1e347624d2a64b701da88e06cc44af944ad5eaef31d8b9711a38f49c08ca/asts-0.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a73cf51d17cd92edb98cf35f07b5afd9cd6c18afeec4d9301d2c0e345df0cb4e",
          "md5": "d36ac939459c23eeae6330c11067631b",
          "sha256": "8596c2f44fb9209103ac923049922b5253776f8ffd57e861d68ceac85bd86a04"
        },
        "downloads": -1,
        "filename": "asts-0.4.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d36ac939459c23eeae6330c11067631b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38539813,
        "upload_time": "2021-12-08T17:53:32",
        "upload_time_iso_8601": "2021-12-08T17:53:32.915917Z",
        "url": "https://files.pythonhosted.org/packages/a7/3c/f51d17cd92edb98cf35f07b5afd9cd6c18afeec4d9301d2c0e345df0cb4e/asts-0.4.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7956f3af86ffed2891838fe8511546ade42c5ebafd097e51b0c7db516be4f84",
          "md5": "de4bde1684e4ee3ebcfb5cb23998e466",
          "sha256": "98aee96fb1a80d3ddf30887ee7c8221ed2055290699033368565a3e483a8f753"
        },
        "downloads": -1,
        "filename": "asts-0.4.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de4bde1684e4ee3ebcfb5cb23998e466",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29700375,
        "upload_time": "2022-01-04T19:40:26",
        "upload_time_iso_8601": "2022-01-04T19:40:26.836273Z",
        "url": "https://files.pythonhosted.org/packages/f7/95/6f3af86ffed2891838fe8511546ade42c5ebafd097e51b0c7db516be4f84/asts-0.4.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cab4ea26d092ff0b6c2dfae90f205794f9e2f7b0a0291432355f72081cfdc2e",
          "md5": "1c4b1ffa0ff73f4163e258f4e203602f",
          "sha256": "7ed4144401e98c164a514732d387d0f64c6cb405bdd4f9abb3694b6d171f847e"
        },
        "downloads": -1,
        "filename": "asts-0.4.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c4b1ffa0ff73f4163e258f4e203602f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39317319,
        "upload_time": "2022-01-19T21:52:20",
        "upload_time_iso_8601": "2022-01-19T21:52:20.715830Z",
        "url": "https://files.pythonhosted.org/packages/7c/ab/4ea26d092ff0b6c2dfae90f205794f9e2f7b0a0291432355f72081cfdc2e/asts-0.4.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "898ae7bdde2aa32622b15c3447817c99e9b87863b205db1a4791acf955429a60",
          "md5": "159d81b5b1deace4787b6e605a154ccf",
          "sha256": "1619e041cee51d0717603d363acb0c2f0c3b527d2da7f0d6176afe6243c53fca"
        },
        "downloads": -1,
        "filename": "asts-0.4.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "159d81b5b1deace4787b6e605a154ccf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29923366,
        "upload_time": "2022-01-26T19:38:57",
        "upload_time_iso_8601": "2022-01-26T19:38:57.252874Z",
        "url": "https://files.pythonhosted.org/packages/89/8a/e7bdde2aa32622b15c3447817c99e9b87863b205db1a4791acf955429a60/asts-0.4.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96e64af5ac043ff4eec3ade48bafda8f07da925274b44d0ed51350e81d066d0c",
          "md5": "81f12910dd37b010ac7b3839718b4db4",
          "sha256": "87d90719303f400fe25825a4d9aa77216ea847359dc7f69ddf8b86fdf25ba6d9"
        },
        "downloads": -1,
        "filename": "asts-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81f12910dd37b010ac7b3839718b4db4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30094048,
        "upload_time": "2022-02-10T20:25:11",
        "upload_time_iso_8601": "2022-02-10T20:25:11.607360Z",
        "url": "https://files.pythonhosted.org/packages/96/e6/4af5ac043ff4eec3ade48bafda8f07da925274b44d0ed51350e81d066d0c/asts-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3eadffa3e6d623bcab3d7e5c63340ce2f49c687d02baed4632c70bd858a4c79",
          "md5": "913ba968dfcb6c2d09d768ad38d55c7c",
          "sha256": "704f43c47e7a7bb499fbd120c9de8104174da3262ac6f627c49e0d0f7e89d825"
        },
        "downloads": -1,
        "filename": "asts-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "913ba968dfcb6c2d09d768ad38d55c7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38907781,
        "upload_time": "2022-02-14T21:38:06",
        "upload_time_iso_8601": "2022-02-14T21:38:06.865802Z",
        "url": "https://files.pythonhosted.org/packages/e3/ea/dffa3e6d623bcab3d7e5c63340ce2f49c687d02baed4632c70bd858a4c79/asts-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00944d3b08b7662eb25fafc018c48c435b18bd72383e13a09e18b1ac45f6346c",
          "md5": "45dfd1880d7b6bf3413c4a68e84e250d",
          "sha256": "7a2644a4edde50e16f3e9264ab11c4551271f8860e5bee9164865e4cf0d628ea"
        },
        "downloads": -1,
        "filename": "asts-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45dfd1880d7b6bf3413c4a68e84e250d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38936365,
        "upload_time": "2022-02-17T06:50:13",
        "upload_time_iso_8601": "2022-02-17T06:50:13.190799Z",
        "url": "https://files.pythonhosted.org/packages/00/94/4d3b08b7662eb25fafc018c48c435b18bd72383e13a09e18b1ac45f6346c/asts-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf28f6c7c37aa2cbe6ecad0a9b14db3bfa49f0072d22d57e8fd5e4f41714a53a",
          "md5": "74ffdd45be363aa544a42040f4845c64",
          "sha256": "a3be2a2a50ea95d80f5400cdd1c53292cf8fd2c5a4b3f9a085e9b6e4ed38e2c9"
        },
        "downloads": -1,
        "filename": "asts-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74ffdd45be363aa544a42040f4845c64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30099293,
        "upload_time": "2022-02-22T06:14:23",
        "upload_time_iso_8601": "2022-02-22T06:14:23.133610Z",
        "url": "https://files.pythonhosted.org/packages/cf/28/f6c7c37aa2cbe6ecad0a9b14db3bfa49f0072d22d57e8fd5e4f41714a53a/asts-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47d34726478468f2c03edc9afcafa8b5b2f6ca024bf90356332131ac4e1ea274",
          "md5": "535037ddab0416459011b471ac070b08",
          "sha256": "ea4f4fe7560ebf0e7906d4c64986baebff5d682c409cb483733a2d15aa6f1f75"
        },
        "downloads": -1,
        "filename": "asts-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "535037ddab0416459011b471ac070b08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34372966,
        "upload_time": "2022-03-28T18:38:10",
        "upload_time_iso_8601": "2022-03-28T18:38:10.894946Z",
        "url": "https://files.pythonhosted.org/packages/47/d3/4726478468f2c03edc9afcafa8b5b2f6ca024bf90356332131ac4e1ea274/asts-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b96f121266030ce48533a65892a28891e006d91198aa369baba83158d4d030c",
          "md5": "5ad5fca0e0d69407effd480b3936b9c2",
          "sha256": "ee66d4a1f1d05d01512295033ae2f533df671c7f50e56da6354c82351e4c54d6"
        },
        "downloads": -1,
        "filename": "asts-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ad5fca0e0d69407effd480b3936b9c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30853149,
        "upload_time": "2022-04-13T18:04:36",
        "upload_time_iso_8601": "2022-04-13T18:04:36.594411Z",
        "url": "https://files.pythonhosted.org/packages/8b/96/f121266030ce48533a65892a28891e006d91198aa369baba83158d4d030c/asts-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75129b52eccfda6272fe0b979d5c8de8b681066d1666ab3be1891bef9817615d",
          "md5": "5ce8eace79bf3ba8fc01c7971b0ec7b5",
          "sha256": "e799fceeaf61f35905290ae716254f1f1d3c15e94c4f38a5df87edf332c86023"
        },
        "downloads": -1,
        "filename": "asts-0.6.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ce8eace79bf3ba8fc01c7971b0ec7b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30016479,
        "upload_time": "2022-06-06T18:45:18",
        "upload_time_iso_8601": "2022-06-06T18:45:18.015450Z",
        "url": "https://files.pythonhosted.org/packages/75/12/9b52eccfda6272fe0b979d5c8de8b681066d1666ab3be1891bef9817615d/asts-0.6.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ab848ff576b5d181457d5650517d77efab7cf2346bcc45a05273942504c118",
          "md5": "5f171aa430edd2528b0f1b99376f228e",
          "sha256": "131d4878797e1e475e0d649e58e744b7cb2897ded87f446fc1bd03a7e08a9627"
        },
        "downloads": -1,
        "filename": "asts-0.6.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f171aa430edd2528b0f1b99376f228e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30133400,
        "upload_time": "2022-06-15T15:24:49",
        "upload_time_iso_8601": "2022-06-15T15:24:49.390501Z",
        "url": "https://files.pythonhosted.org/packages/10/ab/848ff576b5d181457d5650517d77efab7cf2346bcc45a05273942504c118/asts-0.6.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c1689ab9dced5383a49248a9e87fb2e9821c0ec4fbde147235075ab651d016c",
          "md5": "50101717d8e053fd0594bf2031322696",
          "sha256": "5f5a8d8011c967f2248eae92b9c34cea5ddace6de98757c862e3bd9d56498eec"
        },
        "downloads": -1,
        "filename": "asts-0.6.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50101717d8e053fd0594bf2031322696",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30118358,
        "upload_time": "2022-06-15T16:51:13",
        "upload_time_iso_8601": "2022-06-15T16:51:13.317501Z",
        "url": "https://files.pythonhosted.org/packages/5c/16/89ab9dced5383a49248a9e87fb2e9821c0ec4fbde147235075ab651d016c/asts-0.6.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e25edba9dad50fc71cbd409b5e7e610c848a0d4c03767f6bfd7ca9016cbbddc9",
          "md5": "c8c1611c530fc8e0fe1f0c04124f9e03",
          "sha256": "18c266ca99da4dfb6674e978b212b2a687f1fe07cc232811d4139d50fce7ec8c"
        },
        "downloads": -1,
        "filename": "asts-0.6.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8c1611c530fc8e0fe1f0c04124f9e03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30177333,
        "upload_time": "2022-07-08T16:30:10",
        "upload_time_iso_8601": "2022-07-08T16:30:10.720744Z",
        "url": "https://files.pythonhosted.org/packages/e2/5e/dba9dad50fc71cbd409b5e7e610c848a0d4c03767f6bfd7ca9016cbbddc9/asts-0.6.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0622b710535f2239d68f2c31d4c3a476de42895a1db699b7906d2ecd46a9c3ee",
          "md5": "975bd2aa0478de5b83d322c35813215a",
          "sha256": "1deabc9375fea530f03926eca6c2c49a74c325ac9bcba97b83d1dc58ca3f9a66"
        },
        "downloads": -1,
        "filename": "asts-0.6.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "975bd2aa0478de5b83d322c35813215a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34271323,
        "upload_time": "2022-07-11T19:34:00",
        "upload_time_iso_8601": "2022-07-11T19:34:00.038527Z",
        "url": "https://files.pythonhosted.org/packages/06/22/b710535f2239d68f2c31d4c3a476de42895a1db699b7906d2ecd46a9c3ee/asts-0.6.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3144bec558cc4f7420f7159272642e4008b0f8a985b3f63e876701f4c14b9017",
          "md5": "70174af760c780996927034c471a9aad",
          "sha256": "e2c1fe898935810ac41a509780b3d11651cac97f3a696010bd63c48ccb79a9b0"
        },
        "downloads": -1,
        "filename": "asts-0.6.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70174af760c780996927034c471a9aad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30281839,
        "upload_time": "2022-07-16T03:12:51",
        "upload_time_iso_8601": "2022-07-16T03:12:51.193601Z",
        "url": "https://files.pythonhosted.org/packages/31/44/bec558cc4f7420f7159272642e4008b0f8a985b3f63e876701f4c14b9017/asts-0.6.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00589c672f50ef5b817f3e139b9fd018a861e3f0fd23f031540ea0aa9bf8dd25",
          "md5": "6205557d4e6d28e29e814d68f72b394f",
          "sha256": "84905caf13a7f1887d6e3a929d49966f2c5ca25019a04b9bbdee233e9abeaa05"
        },
        "downloads": -1,
        "filename": "asts-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6205557d4e6d28e29e814d68f72b394f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 30381130,
        "upload_time": "2022-09-13T19:14:29",
        "upload_time_iso_8601": "2022-09-13T19:14:29.522303Z",
        "url": "https://files.pythonhosted.org/packages/00/58/9c672f50ef5b817f3e139b9fd018a861e3f0fd23f031540ea0aa9bf8dd25/asts-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96548208d9c31fb284c1250955779c603ad02b15a5bbca2fa479a887e895c68e",
          "md5": "a44e67a6faf0c6d06eaa75f7a7a16678",
          "sha256": "6d082350e26ba5ea0890ca74846ee4369e99702bb36f2e6a2ddbf159386f93b7"
        },
        "downloads": -1,
        "filename": "asts-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a44e67a6faf0c6d06eaa75f7a7a16678",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 34571988,
        "upload_time": "2022-09-14T17:30:55",
        "upload_time_iso_8601": "2022-09-14T17:30:55.040720Z",
        "url": "https://files.pythonhosted.org/packages/96/54/8208d9c31fb284c1250955779c603ad02b15a5bbca2fa479a887e895c68e/asts-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74937730d2a4d4b63a96a1b27805be6b9023e17343bb008a154aed7cd01a1c57",
          "md5": "7386a2c25ea81a8fbfb7d2a042f1df99",
          "sha256": "55a491195a70ba1778945d8421ac33fa8cc2e5def6fd05fc34b7a3705f663bfa"
        },
        "downloads": -1,
        "filename": "asts-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7386a2c25ea81a8fbfb7d2a042f1df99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35559335,
        "upload_time": "2022-09-15T19:41:07",
        "upload_time_iso_8601": "2022-09-15T19:41:07.388029Z",
        "url": "https://files.pythonhosted.org/packages/74/93/7730d2a4d4b63a96a1b27805be6b9023e17343bb008a154aed7cd01a1c57/asts-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9189d6d7a3c56bc246c99364fb5eab2aaed774445074b98e28575390dfca01d0",
          "md5": "bcb4e25e5c461f2bbbab6fe177fb0377",
          "sha256": "76e8f932c93422caa7b094882e542afb77654dc017f543871ad6438f5e8d2e02"
        },
        "downloads": -1,
        "filename": "asts-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcb4e25e5c461f2bbbab6fe177fb0377",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35528777,
        "upload_time": "2022-09-28T15:09:07",
        "upload_time_iso_8601": "2022-09-28T15:09:07.034640Z",
        "url": "https://files.pythonhosted.org/packages/91/89/d6d7a3c56bc246c99364fb5eab2aaed774445074b98e28575390dfca01d0/asts-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09caf91aab42d98fe072b409b70c9780d8eb910640482974b46c311ac9c01fc0",
          "md5": "d7fd7252b339827b183b2ec67a8927c6",
          "sha256": "812d5a1cf1d62e8745280191692f2941acca51ec50e4906f2f0855538f880d1d"
        },
        "downloads": -1,
        "filename": "asts-0.7.4-py3-none-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d7fd7252b339827b183b2ec67a8927c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35008683,
        "upload_time": "2022-09-28T16:23:30",
        "upload_time_iso_8601": "2022-09-28T16:23:30.202612Z",
        "url": "https://files.pythonhosted.org/packages/09/ca/f91aab42d98fe072b409b70c9780d8eb910640482974b46c311ac9c01fc0/asts-0.7.4-py3-none-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1a91b0591e87744299b8d45c6d7b97cbd5ba5c05ad2984e01f5963e7103fa76",
          "md5": "2428c93ced06f8e68534af7be06562d0",
          "sha256": "e42a839e25e1d095fc9fa56629fca6ef14ca8661e6b6942092030d85c7b291df"
        },
        "downloads": -1,
        "filename": "asts-0.8.0-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "2428c93ced06f8e68534af7be06562d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35008919,
        "upload_time": "2022-10-13T18:14:09",
        "upload_time_iso_8601": "2022-10-13T18:14:09.977954Z",
        "url": "https://files.pythonhosted.org/packages/c1/a9/1b0591e87744299b8d45c6d7b97cbd5ba5c05ad2984e01f5963e7103fa76/asts-0.8.0-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c200be96c83d01824988a7a0bc1735da6be6003984e1827bd38b414bbef279e",
          "md5": "f357d4e1619e5300ce639bb2d1f17934",
          "sha256": "498a93e4b28e49aa1b3c2131b36ed08c15ea0e7e23ed57d1b17ef3cf47dee171"
        },
        "downloads": -1,
        "filename": "asts-0.9.0-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f357d4e1619e5300ce639bb2d1f17934",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35569550,
        "upload_time": "2022-11-03T18:48:24",
        "upload_time_iso_8601": "2022-11-03T18:48:24.227220Z",
        "url": "https://files.pythonhosted.org/packages/7c/20/0be96c83d01824988a7a0bc1735da6be6003984e1827bd38b414bbef279e/asts-0.9.0-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cedca5d5af8d17eb353c0bf27876b6014ff144a5a76849d028da50c7266b6946",
          "md5": "ec6739f3069a640ddeff14fc15afcd52",
          "sha256": "eac8dd4ea61b6de0c3a6c24d6e5c3396b33621c011c71d61febef08f4d42c189"
        },
        "downloads": -1,
        "filename": "asts-0.9.2-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ec6739f3069a640ddeff14fc15afcd52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35046780,
        "upload_time": "2022-11-11T21:08:14",
        "upload_time_iso_8601": "2022-11-11T21:08:14.517308Z",
        "url": "https://files.pythonhosted.org/packages/ce/dc/a5d5af8d17eb353c0bf27876b6014ff144a5a76849d028da50c7266b6946/asts-0.9.2-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bfe874fd5eaa15b7d741ccc9926b5100e08c943d9bf4ace50b64e2f57ba9d5f",
          "md5": "421c47db8f83e58a103b709397daec08",
          "sha256": "b82b2750e0848a5a858ab4b84e3dc4f1992956b5db433796ce0c4901522edd48"
        },
        "downloads": -1,
        "filename": "asts-0.9.3-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "421c47db8f83e58a103b709397daec08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35079103,
        "upload_time": "2022-11-15T20:03:56",
        "upload_time_iso_8601": "2022-11-15T20:03:56.832899Z",
        "url": "https://files.pythonhosted.org/packages/7b/fe/874fd5eaa15b7d741ccc9926b5100e08c943d9bf4ace50b64e2f57ba9d5f/asts-0.9.3-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "145c2f5d17795c8bc937090546d6c1678a38cb3d2b37763662483edd22ba0414",
          "md5": "2b5e5e61d4e812e77bc12ea21308a5d5",
          "sha256": "331b3052e2ffd3d1064adc5bbcba1c3f69324913ce0fad2e68ce275300ffa619"
        },
        "downloads": -1,
        "filename": "asts-0.9.4-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "2b5e5e61d4e812e77bc12ea21308a5d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35072706,
        "upload_time": "2022-12-14T16:32:44",
        "upload_time_iso_8601": "2022-12-14T16:32:44.919772Z",
        "url": "https://files.pythonhosted.org/packages/14/5c/2f5d17795c8bc937090546d6c1678a38cb3d2b37763662483edd22ba0414/asts-0.9.4-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af80312719f64b282b0fa7ce255843c702369b2ffefbe409a62fe2397aae16cf",
          "md5": "ee39ec5c97541e6cd0cdc8e7bc0dcc35",
          "sha256": "2c871f55c2c5297e41dfe55e5f26eaa8d291322f81cb1cc8f77416178668d822"
        },
        "downloads": -1,
        "filename": "asts-0.9.6-py3-none-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ee39ec5c97541e6cd0cdc8e7bc0dcc35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 35691131,
        "upload_time": "2023-03-07T04:51:14",
        "upload_time_iso_8601": "2023-03-07T04:51:14.183527Z",
        "url": "https://files.pythonhosted.org/packages/af/80/312719f64b282b0fa7ce255843c702369b2ffefbe409a62fe2397aae16cf/asts-0.9.6-py3-none-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af80312719f64b282b0fa7ce255843c702369b2ffefbe409a62fe2397aae16cf",
        "md5": "ee39ec5c97541e6cd0cdc8e7bc0dcc35",
        "sha256": "2c871f55c2c5297e41dfe55e5f26eaa8d291322f81cb1cc8f77416178668d822"
      },
      "downloads": -1,
      "filename": "asts-0.9.6-py3-none-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ee39ec5c97541e6cd0cdc8e7bc0dcc35",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 35691131,
      "upload_time": "2023-03-07T04:51:14",
      "upload_time_iso_8601": "2023-03-07T04:51:14.183527Z",
      "url": "https://files.pythonhosted.org/packages/af/80/312719f64b282b0fa7ce255843c702369b2ffefbe409a62fe2397aae16cf/asts-0.9.6-py3-none-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}