{
  "info": {
    "author": "Oskar Skoog",
    "author_email": "oskar@osd.se",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# py-smart-gardena2\n\nThis is a fork of https://github.com/grm/py-smart-gardena/ which was done because it was inactive.\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI version](https://badge.fury.io/py/py-smart-gardena2.svg)](https://badge.fury.io/py/py-smart-gardena2)\n[![Build Status](https://travis-ci.org/osks/py-smart-gardena2.svg?branch=master)](https://travis-ci.org/osks/py-smart-gardena2)\n[![Python 3](https://pyup.io/repos/github/osks/py-smart-gardena2/python-3-shield.svg)](https://pyup.io/repos/github/osks/py-smart-gardena2/)\n[![Updates](https://pyup.io/repos/github/osks/py-smart-gardena2/shield.svg)](https://pyup.io/repos/github/osks/py-smart-gardena2/)\n[![Known Vulnerabilities](https://snyk.io/test/github/osks/py-smart-gardena2/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/osks/py-smart-gardena2?targetFile=requirements.txt)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/)\n[![Downloads](https://pepy.tech/badge/py-smart-gardena2)](https://pepy.tech/project/py-smart-gardena2)\n\n## Description\n\nThis library aims to provide python way to communicate with gardena smart systems and\nall gardena smart equipments. Configuration of the equipement and inclusion has still\n to be done using the Gardena application or website.\n\n## Requirements\n\n*   **Python 3.6+**\n\n## Supported devices\n\nFor now, only few devices are supported. I may add new ones in the future :\n*   Gateway\n*   Smart Mower\n*   Smart water control\n*   Smart sensor\n*   Power plugs\n*   Smart Irrigation control\n\n## Account creation in order to have access to Gardena API\n\nGardena requires the creation of an account and an application in order to use their API.\nYou can find how to create such an account and application here : <a href=\"https://developer.1689.cloud/docs/getting-started#/docs/getting-started/#3connect-api-to-application\">Account and application creation</a>\n\n## Installation\n\n```sh\n$ pip install py-smart-gardena2\n```\n\n## Usage\n\n### Data model\n\nThe entrypoint of the library is the the SmartSytem class (in gardena.smart_system\npackage).\nFrom there, you can get all locations from your account, and for each of these\nlocations, get the declared devices.\n\nAll communications are not done directly with the gateway. This library uses a websocket in order\nto communicate with gardena systems in order to avoid throttling. There is only one connection to authenticate,\nand two connections to revoke tokens, everything else is done through websockets.\n\n### Authentication\n\nYou first need to get a client id (also called application key in the\nAPI documentation) for your personal installation of gardena.  To do\nso, create an account here : https://developer.1689.cloud/apis\n\nThen you need to create an application, add APIs (Authentication API\nand GARDENA smart system API), and copy the application key as\nexplained here: https://developer.1689.cloud/docs/getting-started\n\nThe library manages the token for you then.\nAn exception is raised if authentication fails.\n\n```python\nfrom gardena.smart_system import SmartSystem\nimport pprint\n\nsmart_system = SmartSystem(email=\"email@gmail.com\", password=\"my_password\", client_id=\"client_id\")\nsmart_system.authenticate()\nsmart_system.update_locations()\nfor location in smart_system.locations.values():\n    smart_system.update_devices(location)\n    pprint.pprint(location)\n    for device in location.devices.values():\n        pprint.pprint(device)\n\nsmart_system.start_ws(smart_system.locations['LOCATION_ID'])\n\n\n```\nOnce authentication is successful, you need to gather locations and devices for the first time and then, you can create start the websocket in order to get updates automatically.\n\n### Locations\n\nLocations are automatically retrieved the first time from the API, and then the websocket is used to get updates.\n\nHere is the list of the current available fields and methods :\n\n```python\n\nfor location in smart_system.locations.values():\n    print(\"location : \" + location.name + \"(\" + location.id + \")\")\n\n```\n\n### Devices\n\nDevices are automatically retrieved the first time from the API, and then the websocket is used to get updates. They are stored in each locations. Depending on the function type, you can have diffrents fields.\n\n#### Mowers\n\n```python\n    for device in smart_system.locations[\"LOCATION_ID\"].find_device_by_type(\"MOWER\"):\n          print(f\"name : {device.name}\")\n          print(f\"id : {device.id}\")\n          print(f\"type : {device.type}\")\n          print(f\"model_type : {device.model_type}\")\n          print(f\"battery_level : {device.battery_level}\")\n          print(f\"battery_state : {device.battery_state}\")\n          print(f\"rf_link_level : {device.rf_link_level}\")\n          print(f\"rf_link_state : {device.rf_link_state}\")\n          print(f\"serial : {device.serial}\")\n          print(f\"activity : {device.activity}\")\n          print(f\"operating_hours : {device.operating_hours}\")\n          print(f\"state : {device.state}\")\n          print(f\"last_error_code : {device.last_error_code}\")\n```\n\n#### Power Socket\n\n```python\n    for device in smart_system.locations[\"LOCATION_ID\"].find_device_by_type(\"POWER_SOCKET\"):\n          print(f\"name : {device.name}\")\n          print(f\"id : {device.id}\")\n          print(f\"type : {device.type}\")\n          print(f\"model_type : {device.model_type}\")\n          print(f\"battery_level : {device.battery_level}\")\n          print(f\"battery_state : {device.battery_state}\")\n          print(f\"rf_link_level : {device.rf_link_level}\")\n          print(f\"rf_link_state : {device.rf_link_state}\")\n          print(f\"serial : {device.serial}\")\n          print(f\"activity : {device.activity}\")\n          print(f\"state : {device.state}\")\n```\n\n#### Sensor\n\n```python\n    for device in smart_system.locations[\"LOCATION_ID\"].find_device_by_type(\"SENSOR\"):\n          print(f\"name : {device.name}\")\n          print(f\"id : {device.id}\")\n          print(f\"type : {device.type}\")\n          print(f\"model_type : {device.model_type}\")\n          print(f\"battery_level : {device.battery_level}\")\n          print(f\"battery_state : {device.battery_state}\")\n          print(f\"rf_link_level : {device.rf_link_level}\")\n          print(f\"rf_link_state : {device.rf_link_state}\")\n          print(f\"serial : {device.serial}\")\n          print(f\"ambient_temperature : {device.ambient_temperature}\")\n          print(f\"light_intensity : {device.light_intensity}\")\n          print(f\"soil_humidity : {device.soil_humidity}\")\n          print(f\"soil_temperature : {device.soil_temperature}\")\n\n```\n\n#### Smart irrigation control\n\n```python\n    for device in smart_system.locations[\"LOCATION_ID\"].find_device_by_type(\"SMART_IRRIGATION_CONTROL\"):\n          print(f\"name : {device.name}\")\n          print(f\"id : {device.id}\")\n          print(f\"type : {device.type}\")\n          print(f\"model_type : {device.model_type}\")\n          print(f\"battery_level : {device.battery_level}\")\n          print(f\"battery_state : {device.battery_state}\")\n          print(f\"rf_link_level : {device.rf_link_level}\")\n          print(f\"rf_link_state : {device.rf_link_state}\")\n          print(f\"serial : {device.serial}\")\n          print(f\"valve_set_id : {device.valve_set_id}\")\n          print(f\"valve_set_state : {device.valve_set_state}\")\n          print(f\"valve_set_last_error_code : {device.valve_set_last_error_code}\")\n          for valve in device.valves.values():\n            print(f\"name : {valve['name']}\")\n            print(f\"{valve['name']} - id : {valve['id']}\")\n            print(f\"{valve['name']} - activity : {valve['activity']}\")\n            print(f\"{valve['name']} - state : {valve['state']}\")\n            print(f\"{valve['name']} - last_error_code : {valve['last_error_code']}\")\n```\n\n#### Smart water control\n\n```python\n    for device in smart_system.locations[\"LOCATION_ID\"].find_device_by_type(\"WATER_CONTROL\"):\n          print(f\"name : {device.name}\")\n          print(f\"id : {device.id}\")\n          print(f\"type : {device.type}\")\n          print(f\"model_type : {device.model_type}\")\n          print(f\"battery_level : {device.battery_level}\")\n          print(f\"battery_state : {device.battery_state}\")\n          print(f\"rf_link_level : {device.rf_link_level}\")\n          print(f\"rf_link_state : {device.rf_link_state}\")\n          print(f\"serial : {device.serial}\")\n          print(f\"valve_set_id : {device.valve_set_id}\")\n          print(f\"valve_name : {device.valve_name}\")\n          print(f\"valve_id : {device.valve_id}\")\n          print(f\"valve_activity : {device.valve_activity}\")\n          print(f\"valve_state : {device.valve_state}\")\n```\n\n### Using websocket\n\nOnce the websocket has been started, everything is managed and the devices are \nautomatically updated once their state change.\nIn order for your to be alerted of such a change, you need to add a callback to the \ndevice.\nThis callback will be called each time the device state changed :\n\n```python\ndef my_callback(device):\n    print(f\"The device {device.name} has been updated !\")\n\ndevice.add_callback(my_callback)\n\n```\n\n## Development environment\n\nTo install the dev environment, you just have to do, in the source code directory :\n\n```sh\n$ pip install -e .[dev]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/osks/py-smart-gardena2",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-smart-gardena2",
    "package_url": "https://pypi.org/project/py-smart-gardena2/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-smart-gardena2/",
    "project_urls": {
      "Homepage": "https://github.com/osks/py-smart-gardena2"
    },
    "release_url": "https://pypi.org/project/py-smart-gardena2/0.7.4/",
    "requires_dist": [
      "requests",
      "oauthlib",
      "requests-oauthlib",
      "websocket-client",
      "pre-commit ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "This library aims to provide python way to communicate with gardena smart gateway and all smart gardena systems.",
    "version": "0.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7363951,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e60b70057be23f76e1e2a2ac86443815cb05ab6782482dd1deb0aed4b26cbf64",
          "md5": "b5509cfebf8342b7905cafde1b96cb67",
          "sha256": "bc233ed21ecbe80df3062a65b34f0c233a84e6ee9660e0683a43f9e3da17e8e1"
        },
        "downloads": -1,
        "filename": "py-smart-gardena2-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5509cfebf8342b7905cafde1b96cb67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11295,
        "upload_time": "2020-05-20T14:14:45",
        "upload_time_iso_8601": "2020-05-20T14:14:45.461850Z",
        "url": "https://files.pythonhosted.org/packages/e6/0b/70057be23f76e1e2a2ac86443815cb05ab6782482dd1deb0aed4b26cbf64/py-smart-gardena2-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf406e54ca37c922dd9e1bfaf122a4d7bbe6c271129e386479162f3c7231805f",
          "md5": "cb848684471525679263f1cf5457291a",
          "sha256": "b5fbd6c779405618794eda64af2a6e26bf450f714a94309f0d88aee6af9846d9"
        },
        "downloads": -1,
        "filename": "py-smart-gardena2-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb848684471525679263f1cf5457291a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11349,
        "upload_time": "2020-05-21T07:31:04",
        "upload_time_iso_8601": "2020-05-21T07:31:04.858182Z",
        "url": "https://files.pythonhosted.org/packages/cf/40/6e54ca37c922dd9e1bfaf122a4d7bbe6c271129e386479162f3c7231805f/py-smart-gardena2-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "633852dcbea3a5883ac92bf556cca83358a75c1a9d6d2b0c95691615c4fdd7b7",
          "md5": "82a87447ff4985ee01f356df89d4a9c6",
          "sha256": "b6c42dbdf3861f29fd720c2c5e7bddc27e00f6f41e5d13f648081a90552633c0"
        },
        "downloads": -1,
        "filename": "py_smart_gardena2-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82a87447ff4985ee01f356df89d4a9c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12857,
        "upload_time": "2020-05-21T19:05:27",
        "upload_time_iso_8601": "2020-05-21T19:05:27.230445Z",
        "url": "https://files.pythonhosted.org/packages/63/38/52dcbea3a5883ac92bf556cca83358a75c1a9d6d2b0c95691615c4fdd7b7/py_smart_gardena2-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb0c9d3fadfe72d3ff20a9b585ba424309ee91750828c0a1cc6d28f85dcc60ba",
          "md5": "2f0a57eae145cf0bf834b2f99a32b82f",
          "sha256": "38d27a4d5456622f41e22122dce9bd2b31a31a0f077a98f7813d4c1fdbb09752"
        },
        "downloads": -1,
        "filename": "py-smart-gardena2-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2f0a57eae145cf0bf834b2f99a32b82f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11450,
        "upload_time": "2020-05-21T19:05:28",
        "upload_time_iso_8601": "2020-05-21T19:05:28.766195Z",
        "url": "https://files.pythonhosted.org/packages/fb/0c/9d3fadfe72d3ff20a9b585ba424309ee91750828c0a1cc6d28f85dcc60ba/py-smart-gardena2-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b4e227b44b5ff9a6dc7bda7d49e7844f574a367b76a0089a9367ca1ce7fff9",
          "md5": "8e5ccdd084031301a46f115557a2943e",
          "sha256": "e76920388aa66bcc6c998375524d3dd341a8510c8e9df1488d1845968794b0f4"
        },
        "downloads": -1,
        "filename": "py_smart_gardena2-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e5ccdd084031301a46f115557a2943e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12829,
        "upload_time": "2020-05-23T11:16:12",
        "upload_time_iso_8601": "2020-05-23T11:16:12.944522Z",
        "url": "https://files.pythonhosted.org/packages/f9/b4/e227b44b5ff9a6dc7bda7d49e7844f574a367b76a0089a9367ca1ce7fff9/py_smart_gardena2-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a1be49e9a506698dc079e8237bc328f81b264662681aafd4b8a2b5afcb74019",
          "md5": "f51a1849b65ba75785774f5f82f6467e",
          "sha256": "e7ac0d38855030ba3e0e17399470c8acd9f50ab9af5b6ad9b8e2b4789153cefc"
        },
        "downloads": -1,
        "filename": "py-smart-gardena2-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f51a1849b65ba75785774f5f82f6467e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11470,
        "upload_time": "2020-05-23T11:16:14",
        "upload_time_iso_8601": "2020-05-23T11:16:14.211003Z",
        "url": "https://files.pythonhosted.org/packages/4a/1b/e49e9a506698dc079e8237bc328f81b264662681aafd4b8a2b5afcb74019/py-smart-gardena2-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42a4ceb5ca2dde0874e1fac9937b9fdcef48e5692cd1718e87f663eff51dcc97",
          "md5": "69334cb8d54d9821ebe585313a045882",
          "sha256": "58eaaeaf02c713a7df0368fda9b3486fba55b1d3bbcc1b70f13284a85db0d38c"
        },
        "downloads": -1,
        "filename": "py_smart_gardena2-0.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69334cb8d54d9821ebe585313a045882",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12877,
        "upload_time": "2020-05-31T12:08:09",
        "upload_time_iso_8601": "2020-05-31T12:08:09.737045Z",
        "url": "https://files.pythonhosted.org/packages/42/a4/ceb5ca2dde0874e1fac9937b9fdcef48e5692cd1718e87f663eff51dcc97/py_smart_gardena2-0.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f4b56f24cc0e4a24dfe8985bde7f27645dc0262ad87a737cbdbdd2051d1f50f",
          "md5": "9ed3ce4a002f4b4d80586e7b9c04547f",
          "sha256": "df51b6c36901ae22abdc67bf8911b6ef6fe0bfa341c737510b5cd3730d96c097"
        },
        "downloads": -1,
        "filename": "py-smart-gardena2-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9ed3ce4a002f4b4d80586e7b9c04547f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11527,
        "upload_time": "2020-05-31T12:08:10",
        "upload_time_iso_8601": "2020-05-31T12:08:10.971403Z",
        "url": "https://files.pythonhosted.org/packages/2f/4b/56f24cc0e4a24dfe8985bde7f27645dc0262ad87a737cbdbdd2051d1f50f/py-smart-gardena2-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42a4ceb5ca2dde0874e1fac9937b9fdcef48e5692cd1718e87f663eff51dcc97",
        "md5": "69334cb8d54d9821ebe585313a045882",
        "sha256": "58eaaeaf02c713a7df0368fda9b3486fba55b1d3bbcc1b70f13284a85db0d38c"
      },
      "downloads": -1,
      "filename": "py_smart_gardena2-0.7.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "69334cb8d54d9821ebe585313a045882",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12877,
      "upload_time": "2020-05-31T12:08:09",
      "upload_time_iso_8601": "2020-05-31T12:08:09.737045Z",
      "url": "https://files.pythonhosted.org/packages/42/a4/ceb5ca2dde0874e1fac9937b9fdcef48e5692cd1718e87f663eff51dcc97/py_smart_gardena2-0.7.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f4b56f24cc0e4a24dfe8985bde7f27645dc0262ad87a737cbdbdd2051d1f50f",
        "md5": "9ed3ce4a002f4b4d80586e7b9c04547f",
        "sha256": "df51b6c36901ae22abdc67bf8911b6ef6fe0bfa341c737510b5cd3730d96c097"
      },
      "downloads": -1,
      "filename": "py-smart-gardena2-0.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9ed3ce4a002f4b4d80586e7b9c04547f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11527,
      "upload_time": "2020-05-31T12:08:10",
      "upload_time_iso_8601": "2020-05-31T12:08:10.971403Z",
      "url": "https://files.pythonhosted.org/packages/2f/4b/56f24cc0e4a24dfe8985bde7f27645dc0262ad87a737cbdbdd2051d1f50f/py-smart-gardena2-0.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}