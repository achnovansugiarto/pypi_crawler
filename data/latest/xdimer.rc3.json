{
  "info": {
    "author": "Sebastian Hammer",
    "author_email": "sebastian.hammer@mail.mcgill.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# xDimers\n\nPyhton package for simulating multi-molecular emission spectra dominated by a single effective intermolecular vibrational mode. This package will be accompanying a future publication and is available at Zenodo. \n\nZenodo:\n\n[![DOI](https://zenodo.org/badge/465952131.svg)](https://zenodo.org/badge/latestdoi/465952131)\n\n## Table of contents\n1. [Installation](#1-installation)\n2. [Basic introduction](#2-basic-introduction)\n* [Model and definitions](#21-model-and-defintions)\n* [Basic functionality](#22-basic-functionality)\n* [Fitting emission data](#23-fitting-emission-data)\n* [Examples](#24-examples)\n3. [API reference guide](#3-api-reference-guide)\n* [xdimer](#31-xdimer)\n* [semiclassical](#32-semiclassical)\n* [quantummechanical](#33-quantummechanical)\n* [auxiliary](#34-auxiliary)\n4. [License and citation](#4-license-and-citation)\n\n## 1. Installation\nInstall package from PyPi with\n```\npip install XDimer\n```\n\nThe latest development version is available on GitHub. To install use:\n```\npython -m pip install git+https://github.com/HammerSeb/xDimer.git\n```\n\nThe package has been tested against the latest versions of python > 3.6 .\n\n## 2.Basic Introduction\n\nThis package enables the quick simulation of emission spectra from Franck-Condon vibronic transitions between the vibrational levels of two harmonic oscillators with different potential strength at different temperatures. For this purpose, it provides two ways to simulate the emission, a semi-classical one for which the final state harmonic oscillator is treated as a continous function and a full quantum-mechanical approach, for which the individual Franck-Condon factors are calculated numerically. A short introduction of the underlying physical model as well as some basic defintions are given [below](#21-basic-defintions) please refere to the [related publication](#citation) for an in detail description of the physical model and the mathematical definition.\n\n### 2.1 Model and defintions\n\nThe emission spectra are modeled by Franck-Condon transitions between two displaced harmonic oscillators described by\n$$R(q) = R q^2$$\n\nwith $q$ as the generalized spatial coordinate and the\n> **oscillator constant** $R$.\n\nwhich is related to the \n\n> **vibrational energy quantum** $E_{vib}$\n\nand the \n\n> **oscillator parameter** $\\alpha$\n\nvia the reduced mass as\n\n$$R = \\frac{\\mu}{\\hbar^2}E_{vib}^2 $$\n\nand \n\n$$\\alpha = \\frac{\\mu}{\\hbar^2}E_{vib} .$$\n\nThe oscillators are displaced in energy by the\n> **energetic offset** $D_e$\n\nand along the generalized spatial coordinate by the\n> **spatial displacement** $q_e$\n\neach with respect to the vertex of the ground state parabola. \n\nVariable names are declared throughtout the package as follows: \n\n> `gs_potential` : ground state oscillator constant\n>\n> `xs_potential` : excited state oscillator constant\n>\n> `gs_vib_energy` : ground state vibrational energy quantum\n>\n> `xs_vib_energy` : excited state vibrational energy quantum\n>\n> `gs_parameter` : ground state oscillator parameter\n>\n> `xs_parameter` : excited state oscillator parameter\n>\n> `q_xs` : spatial displacement along generalized coordinate\n>\n> `e_offset` : energetic offset of the oscillators\n>\n>`mass` : reduced mass of the system in atomic units u\n\nFor the quantummechanical simulation of emission spectra the energetic broadening of the underlying lineshape function is declared as\n> `energetic_broadening`\n\n### 2.2 Basic functionality\n\nThe package consists of three main parts contained in the [`xdimer`](#31-xdimer) module which is loaded by\n\n```python\nimport xdimer\n```\n\nThis module contains the class [`dimer_system`](#dimersystem) whicht stores the key parameters which fully define a dimer system. The functions [`semiclassical_emission`](#semiclassicalemission) and [`quantummechanical_emission`](#quantummechanicalemission) take instances of the [`dimer_system`](#dimersystem) class as an input and return the respective emission spectra. \n\n#### Set up a dimer system\n\nTo create a dimer system use\n```python\ndimer = xdimer.dimer_system(mass, gs, xs, q_xs, e_offset)\n```\nIn the default `setup_mode` the parameters `gs` and `xs` define the ground state (gs) and excited state (xs) vibrational energy quantum (in eV). The parameters `q_xs` and `e_offset` are the spatial displacement $q_e$ (in Angstrom) and energetic offset $D_e$ (in eV). The `mass` parameter is the reduced mass $\\mu$ of the dimer system in atomic units. Hence, \n```python\ndimer = xdimer.dimer_system(423, 0.02, 0.025, 0.1, 1.5)\n```\ndefines a dimer system with reduced mass **423 u**, ground and excited state vibrational energy quantums of **20 meV** and **25 meV**, respecitvely, an excited state spatial displacement of **0.1 Angstrom** and an energetic offset of **1.5 eV**. \n\n#### Calculating emission spectra\n\nEmission spectra can be calculated by a semi-classical or quantum-mechanical approach. To calculate semi-classical emission spectra use\n```python\nspectra = xdimer.semiclassical_emission(E, temp, dimer)\n```\nwhere `E` is of `ndarray`-type and defines the energy axis over which the emission is calculated. The temperatures for which the spectra are calcualted are given by `temp` either as a `list` of several temperatures or a single temperature value as a `float`. The `dimer` is an instance of `dimer_system` (`dimer` can also be a `list`, see [API reference](#semiclassicalemission)). The function [`semiclassical_emission`](#semiclassicalemission) returns either a `dictonary`, if the temperature input was given as a list of several values, or a `ndarray` if only one temperature value was provided. The return variable is compased as follows\n\n>**For a single temperature value:**\n>`emission` is an array of the form\n>\n>`emission[0]` input variable `E` as energy axis\n>\n>`emission[i]` from i = 1,...,6. The emission spectrum of the i-th vibrational level of the excited state\n>\n>`emission[7]` total emission spectrum as sum over all emissions from the first 6 vibrational levels of the excited state\n>\n>**For a list of temperature values `temp=[T1, T2, T3, ...]`** \n>`emission` is a dictionary with keys T1, T2, T3, ... . Each entry contains an array for a single temperature value as described above. \n\nThe quantummechanical emission is calculated by \n```python\nemission = xdimer.quantummechanical_emission(E, temp, dimer)\n```\nwhere `E` is of `ndarray`-type and defines the energy axis over which the emission spectra are calculated. The temperatures are given by `temp` either as a `list` of several temperatures or a single temperature value as a `float`. The `dimer` is an instance of `dimer_system` (`dimer` can also be a `list`, see [API reference](#quantummechanicalemission)). The function [`quantummechanical_emission`](#quantummechanicalemission) returns pairs of array like return values \n```python\n[spectra_full, spectra_stick] \n```\neither as entrys in a dictonary keyed by multiple temperature values given in `temp`, or a single array pair if only one temperature value was given. If n vibrational levels of the excited state (0, ..., n-1) are simulated\n\n**`spectra_stick`** is a list of `ndarrays` of length n. Each entry `i` contains the transition energies and intensities of all transitions from the i-th vibrational level of the excited state to the manifold of simulated ground state levels (default is 25). The relation between emission energy and tranisition intensity is referred to as stick spectrum of the i-th vibrational level.\n\n> **The stick spectrum** of the i-th vibrational level is given as\n>\n>`spectrum_stick[i][0]` quantum number k of the vibrational level of the respective final state\n>\n>`spectrum_stick[i][1]` photon energy of the $\\ket{i} \\rightarrow \\ket{k}$ transition\n>\n>`spectrum_stick[i][2]` Franck-Condon factor $|\\braket{k|i}|^2$ transition weighted with a respective Boltzmann factor\n\n**`spectra_full`** is a `ndarray` and contains the convolution of the stick spectra with a gaussian line shape function of energetic broadening w (specified as an optional parameter when creating a [`dimer_system`](#dimersystem) instance) resulting in smooth emission spectra. \n\n>**The smooth emission spectra** are returned as\n>\n>`spectra_full[0]`: input variable `E` as energy axis\n>\n>`spectra_full[i]`: from i = 1 to the last simulated vibrational level n. The emission spectrum of the i-th vibrational level of the excited state as the sum of gaussian line shapes for each transition specified in `spectra_stick[i]`.\n>\n>`spectra_full[n+1]`: total emission spectrum as sum over all emissions from the simulated ;eve;s vibrational levels of the excited state\n\nThe **default settings** of the function simulates the **first five vibrational levels** of the excited states.\n\n### 2.3 Fitting emission data\n\nTo use the emission functions to fit a luminescence data set the `dimer` input can be given as a `list` containing the variables for an optimization procedure.\n\nFor `semiclassical_emission` the list needs to be of the following form:\n```python\n[gs_potential, xs_parameter, e_offset, q_xs, mass]\n```\n\nFor `quantummechanical_emission` the list needs to be of the following form:\n```python\n[gs_parameter, xs_parameter, e_offset, q_xs, energetic_broadening, mass]\n```\n\n### 2.4 Examples\n\nTwo examples are provided showing how to simulate spectra and use the provided functions to fit a set of temperature dependent luminescence data. \n\nThey can be called by\n\n```\npython -m xdimer.examples.simulating_emission\n```\n\nand \n\n```\npython -m xdimer.examples.fitting_emission_data\n```\n\n**simulating_emission** simulates a semiclassical and quantum-mechanical emission spectrum for a temperature specified by console input when running the module. The individual vibrational contributions from the excited state are unraveled and depicted color coded with the main emission spectrum. The dimer system used in the simulation is created by\n```python\ndimer = xdimer.dimer_system(577.916/2, .022, .026, 0.1, 1.55, energetic_broadening=.02)\n```\n\n**fitting_emission_spectra** simulates a data set of emission data using `xdimer.quantummechanical_emission` for four different temperatures. It then performs a fit to the whole data set, including all temperatures. The fit does take a while (approx 90 seconds). The dimer system used to generate the data set is created by\n```python\ndimer = xdimer.dimer_system(400, .027, .023, 0.08 ,1.55, energetic_broadening= .019)\n```\n\n\n## 3. API reference guide\nAPI reference guide for all classes and functions available.\n\n### 3.1 xdimer \nBase functionality of the package containing the `dimer_system` class, the functions `semiclassical_emission` and `quantummechanical_emission` and the exception `xDimerModeError`. Import by\n```python\nimport xdimer\n```\n\n#### dimer_system\n\nClass defining a dimer system containing all defining physical quantities. Instances are created via\n```python\ndimer_system(mass, gs, xs, q_xs, e_offset, energtic_broadening, setup_mode)\n```\n`mass`, `q_xs` and `e_offset` are the reduced mass (in atomic units), the spatial displacement (in Angstrom) and the energetic offset (in eV), respectively. \n\n`gs` and `xs` define the ground and excited state potential, respectively. See `setup_mode` for details.\n\n`energetic_broadening` defines the line width parameter as standard deviation of the gaussian linshape of each vibronic transition calculated by `quantummechanical_emission` in eV. Default is `0.02`. \n\n`setup_mode` defines the input mode for the defintion of the ground and exited state potential by the variables `gs` and `xs`, respectively. Accepted inputs `'vib_energy'` (default), `'osc_const'` and `'osc_para'`. \n\n> `'vib_energy'` (default): potentials are defined by their vibrational energy quantum $E_{vib}$ in eV. \n>\n> `'osc_const'`: potentials are defined by their oscillator constant $R$ in eV/Angstrom^2.\n>\n> `'osc_para'`: potentials are defined by their oscillator parameter $\\alpha$ in 1/Angstrom^2.\n\nIf none of the above modes is used [`xDimerModelError`](#errors-and-exceptions) is raised.\n\nDimer properties can be accessed by calling the respective internal variable:\n>reduced mass: `dimer_system.mass`\n>\n>spatial offset: `dimer_system.q_xs`\n>\n>energetic offset: `dimer_system.e_offset`\n>\n>energetic broadening: `dimer_system.energetic_broadening` \n\nParameters of the harmonic potentials can be returned by properties:\n>Vibrational energy quantum\n>\n>`dimer_system.gs_vib_energy`: ground state\n>\n>`dimer_system.xs_vib_energy`: excited state\n>\n>Oscillator constant\n>\n>`dimer_system.gs_potential`: ground state\n>\n>`dimer_system.xs_potential`: excited state\n>\n>Oscillator parameter\n>\n>`dimer_system.gs_parameter`: ground state\n>\n>`dimer_system.xs_parameter`: excited state\n\n#### semiclassical_emission\nCalculates and returns a semiclassical emission spectrum for a dimer system at a given temperature or list a of temperatures. The first ***six*** vibrational levels of the excited state are taken into account.\n```python\nsemiclassical_emission(E, temp, dimer)\n```\n***Arguments:***\n> `E` (1-D ndarray): photon emission energy in eV\n>\n>`temp` (list/Float): either list of floats or float: List of temperature values or single temperature value in Kelvin\n>\n>`dimer` (instance dimer_system/list): either instance of dimer_system class or list of variables\n>\n>       instance dimer_system: use for simulation of emission spectra from exisiting dimer system\n>\n>       list: use for fitting a data set, list needs to be of the form [0: gs_potential, 1: xs_parameter, 2: e_offset, 3: q_xs, 4: mass]\nCOMMENT: mass should not be used as a free fit parameter but be set to the reduced mass of the dimer system\n\n***Returns:***\n> dict/ndarray:   if temp is list, dictionary (key = temp): ndarrays containing emission spectra for respective temperature temp\n>\n> if temp is float: ndarray containing emission spectra for respective temperature temp\n>\n>array structure: [8, size(E)]:  \n>\n>`array[0]   = E` (emission energies)\n>\n>`array[i+1]`: X-dimer emission spectrum from the i-th excited vibrational state (i in [0,...,5])\n>\n>`array[7]` : Semi-classical X-dimer emission spectrum at temperature \"temp\" considering the first six vibrational levels of the excited state oscillator\n\n***Example***\n```python\nimport numpy as np\nimport xdimer\n# initilazises dimer system\ndimer = xdimer.dimer_system(400, 0.22, 0.25, 1.5)\n# Define energy axis for simulation and temperatures\nE = np.linspace(1, 3, 500)\ntemp = [5, 50, 100, 150, 200, 250, 300]\n# calculate emission spectra for given temperatures\nspectra = xdimer.semiclassical_emission(E, temp, dimer)\nspectrum_150K = spectra[150]\n```\n\n#### quantummechanical_emission\n\nCalculates and returns a quantummecanical emission spectrum for a dimer system at a given temperature or list a of temperatures. Function returns stick spectra and continous spectrum as superposition of gaussian emissions with intensity and position defined by the stick spectrum\n```python\nquantummechanical_emission(E, temp, dimer, simulation_parameters = [5, -.5, .5, 10000, 25])\n```\n***Arguments:***\n>`E` (ndarray): photon emission energy in eV\n>\n>`temp` (list/Float): either list of floats or float: List of temperature values or single temperature value in Kelvin\n>\n>`dimer` (instance dimer_system/list): either instance of dimer_system class or list of variables\n>\n>       instance dimer_system: use for simulation of emission spectra from exisiting dimer system\n>       list: use for fitting a data set, list needs to be of the form [0: gs_parameter, 1: xs_parameter, 2: e_offset, 3: q_xs, 4: energetic_broadening, 5: mass]\n>\n>`simulation_parameters` (list, optional): specifies the simulation parameters `[n_sim, q_low, q_high, dq, n_gs]`. First entry `n_sim` sets **number of simulated vibrational levels of excited state**. Other four parameters specify numeric evaluation of Franck-Condon factors, see [`quantummechanical.franck_condon_factor`](#franckcondonfactors).  Defaults to [5 ,-.5, .5, 10000, 25].\n\nCOMMENT: mass should not be used as a free fit parameter but be set to the reduced mass of the dimer system\n\n***Returns***\n> dict/list:      if temp is list, dictionary (key = temp): each entry contains list of the form `[spectra_full, spectra_stick]`\n>\n>if temp is float: list of the form `[spectra_full, spectra_stick]` for respective temperature temp\n>\n> `spectra_full` (ndarray):     \n>\n>`[0] = E` (emission energies)\n>\n>`[1: n_sim]`: smooth emission spectrum for 0-th to (n_sim-1)-th vibrational level of excited state\n>\n>`[n_sim+1]`: full emission spectrum as sum over all excited state transitions from 0-th to (n_sim-1)-th\n>\n>`spectra_stick` (list of ndarrays):  list of length n_sim. \n>\n>Each entry contains the output of quantummechanical.franck_condon_factor as ndarray `[0: final state, 1: transition energies, 2: boltzmann weighted transition intensities]` for the respective excited state level, i.e. `spectra_stick[0]` holds 0-th vibrational level, `spectra_stick[1]` holds 1-st vibrational level and so forth.\n\n***Example***\n```python\nimport numpy as np\nimport xdimer\n# initilazises dimer system\ndimer = xdimer.dimer_system(400, 0.22, 0.25, 1.5)\n# Define energy axis for simulation and temperatures\nE = np.linspace(1, 3, 500)\ntemp = [5, 50, 100, 150, 200, 250, 300]\n# calculate emission spectra for given temperatures\nspectra = xdimer.quantummechanical_emission(E, temp, dimer)\nqm_150K = spectra[150]\nspectra150K, stick_spectra150K = qm_150k[0], qm_150k[1]\n```\n\n#### Errors and Exceptions\n```python\nxDimerModeError(Exception):\n```\nSubclass of Exception. Raised if instance of dimer_system class is created using an unknown setup mode.\n\n### 3.2 semiclassical\nContains the functions to calculate a semi-classical emission spectrum. Can be imported by\n```python\nimport xdimer.semiclassical\n```\n\n#### excited_state_energy\n```python\nexcited_state_energy(n,vib_zero_point_energy,e_offset)\n```\nauxiliary function for semi-classical emission spectra. Calculates excited state energy of vibrational level n with respect to ground state minimum in eV. Equation (5) in publication.\n\n***Arguments:***\n>`n `(int): vibrational level n\n>\n>`vib_zero_point_energy` (Float): vibrational zero point energy in eV \n>\n>`e_offset` (Float): energetic offset with respect to ground state minimum in eV\n\n***Returns:***\n> Float: excited state energy of vibrational level n in eV\n\n#### displacement_from_energy\n```python\ndisplacement_from_energy(E, n, gs_potential, vib_zero_point_energy, e_offset, q_xs):\n```\nauxiliary function for semi-classical emission spectra. Inverse function of the emission energy - spatial coordinate relation. Calculates spatial displacement as function of photon energy for emission from the excited state at vibrational level `n` in Angstrom. Equation (S4) in electronic supplementary information.\n\n***Arguments:***\n> `E` (ndarray): photon emission energy in eV\n>\n>`n` (Int): vibrational level n\n>\n>`gs_potential` (Float): oscillator constant $R_0$ of the ground state potential in eV/Angstrom**2\n>\n>`vib_zero_point_energy` (Float): vibrational zero point energy in eV\n>\n>`e_offset` (Float): energetic offset with respect to ground state minimum in eV\n>\n>`q_xs` (Float): spatial displacement of excited state with respect to the ground state minimum in Angstrom\n\n***Returns:***\n>ndarray: spatial displacement in Angstrom\n\n#### xdimer_sc_emission\nThere six numbered functions from i= [0 to 5] which calculate the semi-classical emission spectrum from the i-th vibrational level of the excited state (c.f. equations (S7)-(S12) in electronic supplementary information). The emission from the ground state is disccused here exemplarily. \n```python\nxdimer_sc_emission_0(E, gs_potential, xs_parameter ,vib_zero_point_energy, e_offset, q_xs)\n```\nSemi-classical X-dimer emission spectrum from the vibrational ground state\n\n***Arguments:***\n>`E` (ndarray): photon emission energy in eV\n>\n>`gs_potential` (Float): oscillator constant $R_0$ of the ground state potential in eV/Angstrom**2\n>\n>`xs_parameter` (Float): oscillator parameter of excited state quantum-mechanical oscillator in 1/Angstrom**2 (alpha in manuscript)\n>\n>`vib_zero_point_energy` (Float): vibrational zero point energy in eV\n>\n>`e_offset` (Float): energetic offset with respect to ground state minimum in eV\n>\n>`q_xs` (Float): spatial displacement of excited state with respect to the ground state minimum in Angstrom\n\n***Returns:***\n>ndarray: size: size(E). emission intensity with respect to values of E. **nan-values resulting from E-values greater than singularity are set to 0 to ensure down the line usability.**\n\nFor higher vibrational levels use `xdimer_sc_emission_1`, `xdimer_sc_emission_2`, `xdimer_sc_emission_3`, `xdimer_sc_emission_4` and `xdimer_sc_emission_5`.\n\n#### xdimer_sc_total_emission\n```python \nxdimer_sc_total_emission(E, gs_potential, xs_parameter ,vib_zero_point_energy, e_offset, q_xs, boltzmann_dist, temp)\n```\nSemi-classical X-dimer emission spectrum at temperature \"temp\" considering the first six vibrational levels of the excited state oscillator\n\n***Arguments:***\n>`E` (ndarray): photon emission energy in eV\n>\n>`gs_potential` (Float): oscillator constant $R_0$ of the ground state potential in eV/Angstrom**2\n>\n>`xs_parameter` (Float): oscillator parameter of excited state quantum-mechanical oscillator in 1/Angstrom**2 \n>\n>`vib_zero_point_energy` (Float): vibrational zero point energy in eV\n>\n>`e_offset` (Float): energetic offset with respect to ground state minimum in eV\n>\n>`q_xs` (Float): spatial displacement of excited state with respect to the ground state minimum in Angstrom\n>\n>`boltzmann_dist` (Dict): Boltzman distribution generated with [`auxiliary.boltzmann_distribution`](#boltzmanndistribution)\n>\n>`temp` (Float): Temperature in Kelvin - must be key in dictionary boltzmann_dist\n\n***Returns:***\n>ndarray: size(E). emission intensity with respect to values of E. **nan-values resulting from E-values greater than singularity are set to 0 to ensure down the line usability.**\n\n### 3.3 quantummechanical\nContains the functions to calculate a quantum-mechanical emission spectrum. Can be imported by\n```python\nimport xdimer.quantummechanical\n```\n\n#### harmonic_oscillator_wavefunction\n```python\nharmonic_oscillator_wavefunction(level, spatial_coordinate, oscillator_parameter)\n```\nAuxiliary function to caluclate the wave function of harmonic oscillator functions of a given vibrational level.\n\n***Arguments:***\n> `level` (Int): oscillator quantum number\n>\n>`spatial_coordinate` (ndarray): array of spatial coordinates (in Angstrom) for which wavefunction is calculated\n>\n>`oscillator_parameter` (_type_): oscillator parameter alpha in 1/Angstrom**2\n\n#### \n\n***Returns:***\n>ndarray: values of the wavefuncion at given spatial coordinates\n\n\n#### franck_condon_factors\n```python\nfranck_condon_factor(level, xs_parameter, gs_parameter, q_xs, e_offset, mass, q_low= -.5, q_high= .5, dq= 10000, n_gs= 25)\n```\n\nnumerically calculates  emission energies and respective Franck-Condon factors for the emission from a vibrational level (given by 'level') of an excited state oscillator to the vibrational levels of a ground state harmonical oscillator\n\n***Arguments:***\n>`level` (Int): oscillator quantum number\n>\n>`xs_parameter` (Float): excited state oscillator parameter alpha in 1/Angstrom**2\n>\n>`gs_parameter` (Float): ground state oscillator parameter alpha in 1/Angstrom**2\n>\n>`q_xs` (Float): spatial displacement of excited state with respect to the ground state minimum in Angstrom\n>\n>`e_offset` (Float): energetic offset with respect to ground state minimum in eV\n>`mass` (Float): mass of the dimer system in kg\n> \n>*Simulation parameters - optional*\n>\n>`q_low` (int, optional): lower intergration boundary of spatial coordinate. Defaults to -1.\n>\n>`q_high` (int, optional): upper intergration boundary of spatial coordinate. Defaults to 1.\n>\n>`dq`(int, optional): value number between lower and upper integration boundary of spatial coordinate, determines spatial resolution during integration. Defaults to 10000.\n>\n>`n_gs` (int, optional): simulated levels of the ground state oscillator. Defaults to 25.\n\n***Returns:***\n>ndarray: size(3, n_GS)\n>\n>`[0,:]`: int:  quantum number of respective final vibratioanl state k of ground state level for the transition n --> k\n>\n>`[1,:]`: Floats:         photon energy of transition n --> k\n>\n>`[2,:]`: Floats:         value of Frank-Condon factor of transition n --> k\n\n### 3.4 auxiliary\nContains auxiliary functions. Can be imported by\n```python\nimport xdimer.auxiliary\n```\n\n#### osc_para_to_vib_energy\n```python\nosc_para_to_vib_energy(osc_para, mass)\n```\nTransforms oscillator parameter to vibrational energy quantum.\n\n***Arguments:***\n>`osc_para` (float): oscillator parameter in 1/Angstrom^2\n>\n>`mass` (float): reduced mass in atomic units\n\n***Returns:***\n>float: vibrational energy quantum in eV\n\n#### vib_energy_to_osc_para\n```python\nvib_energy_to_osc_para(vib_energy, mass)\n```\nTransforms vibrational energy quantum to oscillator parameter\n\n***Arguments:***\n>`vib_energy` (float): vibrational energy quantum in eV\n>\n>`mass` (float): reduced mass in atomic units\n\n***Returns:***\n>float: oscillator parameter in 1/Angstrom^2\n\n#### osc_const_to_vib_energy\n```python\nosc_const_to_vib_energy(osc_const, mass)\n```\nTransforms oscillator constant to vibrational energy quantum.\n\n***Arguments:***\n>`osc_const` (float): oscillator constant in eV/Angstrom^2\n>\n>`mass` (float): reduced mass in atomic units\n\n***Returns:***\n>float: vibrational energy quantum in eV\n\n#### vib_energy_to_osc_const\n```python\nvib_energy_to_osc_const(vib_energy, mass)\n```\nTransforms vibrational energy quantum to oscillator constant\n\n***Arguments:***\n>`vib_energy` (float): vibrational energy quantum in eV\n>\n>`mass` (float): reduced mass in atomic units\n\n***Returns:***\n>float: oscillator constant in eV/Angstrom^2\n\n#### boltzmann_distribution\n```python\nboltzmann_distribution(Temp_list, vib_zero_point_energy, no_of_states= 50)\n```\nGenerates a Boltzmann probability distribution for a quantum-mechanical harmonic oscillator with zero point energy \"vib_zero_point_energy\"\n\n***Arguments:***\n> `Temp_list` (list of Floates): list of temperature values in Kelvin \n>\n>`vib_zero_point_energy` (_type_): vibrational zero point energy in eV\n>\n>`No_of_states` (int, optional): number of simulated excited states for canocial partion sum. Defaults to 50.\n\n***Returns:***\n> dictionary: \n>\n>key (Float): entries of Temp_list; \n>\n>values (ndarray): (2 x no_of_states); [0]: vibrational level, [1]: corresponding occupation probability\n\n#### gauss_lineshape\n```python\ngauss_lineshape(x, A, w, xc):\n```\ngauss function as line shape function\n$$\nL(x) = \\frac{A}{\\sqrt{2\\pi\\sigma}}\\exp\\left( - \\frac{(x-x_c)^2}{2\\sigma^2} \\right)\n$$\n***Arguments:***\n>`x` (ndarray): x-values\n>\n>`A` (Float): area under the curve\n>\n>`w` (Float): standard deviation\n>\n>`xc` (Float): x center\n\n***Returns:***\n>nadarry: function values at x-values\n\n## 4. License and citation\n\n### License\n\nPackage distributed under MIT license. Copyright (c) 2022 Sebastian Hammer.\n\n### Citation\n\nIf you use this package or its contents for apublication please consider citing the zenodo archive [![DOI](https://zenodo.org/badge/465952131.svg)](https://zenodo.org/badge/latestdoi/465952131) or the corresponding publication.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HammerSeb/xDimer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "XDimer",
    "package_url": "https://pypi.org/project/XDimer/",
    "platform": null,
    "project_url": "https://pypi.org/project/XDimer/",
    "project_urls": {
      "Homepage": "https://github.com/HammerSeb/xDimer"
    },
    "release_url": "https://pypi.org/project/XDimer/1.0.6/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Simulation of multi-molecular emission spectra dominated by intermolecular vibrations",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15444397,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ec288ce9e1fc2bacf6e66cbb1f03facc9a53a115281e21c643988009a0fd61",
          "md5": "20ab35b7d721f29b3828b6eb01ef18cd",
          "sha256": "69062d99174a248d3eac012a4c36481c4cdd83906a1a461885e8480f75e42fe2"
        },
        "downloads": -1,
        "filename": "XDimer-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "20ab35b7d721f29b3828b6eb01ef18cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17585,
        "upload_time": "2022-06-23T16:01:11",
        "upload_time_iso_8601": "2022-06-23T16:01:11.373658Z",
        "url": "https://files.pythonhosted.org/packages/e1/ec/288ce9e1fc2bacf6e66cbb1f03facc9a53a115281e21c643988009a0fd61/XDimer-1.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01fa9596d30c265e09fdf5522cb620ebae9ff143b068fa55107f9229478b31d9",
          "md5": "31e87cc5b17335cfd7cda8750fb593a3",
          "sha256": "66af02d480036e6569ede1f1b11f6f1ea7b21f52d01ccf633d2ce0109088bfa9"
        },
        "downloads": -1,
        "filename": "XDimer-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "31e87cc5b17335cfd7cda8750fb593a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17563,
        "upload_time": "2022-06-23T16:03:22",
        "upload_time_iso_8601": "2022-06-23T16:03:22.149896Z",
        "url": "https://files.pythonhosted.org/packages/01/fa/9596d30c265e09fdf5522cb620ebae9ff143b068fa55107f9229478b31d9/XDimer-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6b0639ad4ef488f6da218d61d0cdb27c7286924f4bb05603ad77e4da307a539",
          "md5": "ea71e23cfcc09452d550192f239b20e6",
          "sha256": "88792f08ceffe35fb5ddd9d40b7080eacd8d37e27d630237961243f8bdd4f126"
        },
        "downloads": -1,
        "filename": "XDimer-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea71e23cfcc09452d550192f239b20e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20080,
        "upload_time": "2022-10-18T03:58:31",
        "upload_time_iso_8601": "2022-10-18T03:58:31.955435Z",
        "url": "https://files.pythonhosted.org/packages/c6/b0/639ad4ef488f6da218d61d0cdb27c7286924f4bb05603ad77e4da307a539/XDimer-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecff0d0d1d25c3afb7e6ab0835a5d7b0b1f8b3b18785979b5a75b85dc06bc5e5",
          "md5": "f332d60b539a9160b322da4e4a616dce",
          "sha256": "399365ce79d4f7f4c87273b9b616d4c1acc90d9c3ce9946eeca30caa9080266a"
        },
        "downloads": -1,
        "filename": "XDimer-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f332d60b539a9160b322da4e4a616dce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17473,
        "upload_time": "2022-10-18T03:58:34",
        "upload_time_iso_8601": "2022-10-18T03:58:34.409822Z",
        "url": "https://files.pythonhosted.org/packages/ec/ff/0d0d1d25c3afb7e6ab0835a5d7b0b1f8b3b18785979b5a75b85dc06bc5e5/XDimer-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6b0639ad4ef488f6da218d61d0cdb27c7286924f4bb05603ad77e4da307a539",
        "md5": "ea71e23cfcc09452d550192f239b20e6",
        "sha256": "88792f08ceffe35fb5ddd9d40b7080eacd8d37e27d630237961243f8bdd4f126"
      },
      "downloads": -1,
      "filename": "XDimer-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea71e23cfcc09452d550192f239b20e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20080,
      "upload_time": "2022-10-18T03:58:31",
      "upload_time_iso_8601": "2022-10-18T03:58:31.955435Z",
      "url": "https://files.pythonhosted.org/packages/c6/b0/639ad4ef488f6da218d61d0cdb27c7286924f4bb05603ad77e4da307a539/XDimer-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecff0d0d1d25c3afb7e6ab0835a5d7b0b1f8b3b18785979b5a75b85dc06bc5e5",
        "md5": "f332d60b539a9160b322da4e4a616dce",
        "sha256": "399365ce79d4f7f4c87273b9b616d4c1acc90d9c3ce9946eeca30caa9080266a"
      },
      "downloads": -1,
      "filename": "XDimer-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "f332d60b539a9160b322da4e4a616dce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17473,
      "upload_time": "2022-10-18T03:58:34",
      "upload_time_iso_8601": "2022-10-18T03:58:34.409822Z",
      "url": "https://files.pythonhosted.org/packages/ec/ff/0d0d1d25c3afb7e6ab0835a5d7b0b1f8b3b18785979b5a75b85dc06bc5e5/XDimer-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}