{
  "info": {
    "author": "PDS",
    "author_email": "pds_operator@jpl.nasa.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PDS4 Sub-Model Management\n\nThis repo contains tools and software needed for managing PDS4 Sub-Models (formerly known as Data Dictionaries)\n\n## Prerequisites\n\nInclude any system-wide requirements (`brew install`, `apt-get install`, `yum install`, …) **Python 3** should be used regardless as [Python 2 reached end-of-life on January 1st, 2020](https://pythonclock.org/).\n\n\n## User Quickstart\n\nInstall with:\n\n    pip install my_pds_module\n\nIf possible, make it so that your program works out of the box without any additional configuration—but see the [Configuration](###configuration) section for details.\n\nTo execute, run:\n\n    (put your run commands here)\n\n\n## Code of Conduct\n\nAll users and developers of the NASA-PDS software are expected to abide by our [Code of Conduct](https://github.com/NASA-PDS/.github/blob/main/CODE_OF_CONDUCT.md). Please read this to ensure you understand the expectations of our community.\n\n\n## Development\n\nTo develop this project, use your favorite text editor, or an integrated development environment with Python support, such as [PyCharm](https://www.jetbrains.com/pycharm/).\n\n\n### Contributing\n\nFor information on how to contribute to NASA-PDS codebases please take a look at our [Contributing guidelines](https://github.com/NASA-PDS/.github/blob/main/CONTRIBUTING.md).\n\n\n### Installation\n\nInstall in editable mode and with extra developer dependencies into your virtual environment of choice:\n\n    pip install --editable '.[dev]'\n\nConfigure the `pre-commit` hooks:\n\n    pre-commit install && pre-commit install -t pre-push\n\n\n### Packaging\n\nTo isolate and be able to re-produce the environment for this package, you should use a [Python Virtual Environment](https://docs.python.org/3/tutorial/venv.html). To do so, run:\n\n    python -m venv venv\n\nThen exclusively use `venv/bin/python`, `venv/bin/pip`, etc. (It is no longer recommended to use `venv/bin/activate`.)\n\nIf you have `tox` installed and would like it to create your environment and install dependencies for you run:\n\n    tox --devenv <name you'd like for env> -e dev\n\nDependencies for development are specified as the `dev` `extras_require` in `setup.cfg`; they are installed into the virtual environment as follows:\n\n    pip install --editable '.[dev]'\n\nAll the source code is in a sub-directory under `src`.\n\nYou should update the `setup.cfg` file with:\n\n- name of your module\n- license, default apache, update if needed\n- description\n- download url, when you release your package on github add the url here\n- keywords\n- classifiers\n- install_requires, add the dependencies of you package\n- extras_require, add the development Dependencies of your package\n- entry_points, when your package can be called in command line, this helps to deploy command lines entry points pointing to scripts in your package\n\nFor the packaging details, see https://packaging.python.org/tutorials/packaging-projects/ as a reference.\n\n\n### Configuration\n\nIt is convenient to use ConfigParser package to manage configuration. It allows a default configuration which can be overwritten by the user in a specific file in their environment. See https://pymotw.com/2/ConfigParser/\n\nFor example:\n\n    candidates = ['my_pds_module.ini', 'my_pds_module.ini.default']\n    found = parser.read(candidates)\n\n\n### Logs\n\nYou should not use `print()`vin the purpose of logging information on the execution of your code. Depending on where the code runs these information could be redirected to specific log files.\n\nTo make that work, start each Python file with:\n\n```python\nimport logging\n\nlogger = logging.getLogger(__name__)\n```\n\nTo log a message:\n\n    logger.info(\"my message\")\n\nIn your `main` routine, include:\n\n    logging.basicConfig(level=logging.INFO)\n\nto get a basic logging system configured.\n\n\n### Tooling\n\nThe `dev` `extras_require` included in the template repo installs `black`, `flake8` (plus some plugins), and `mypy` along with default configuration for all of them. You can run all of these (and more!) with:\n\n    tox -e lint\n\n\n### Code Style\n\nSo that your code is readable, you should comply with the [PEP8 style guide](https://www.python.org/dev/peps/pep-0008/). Our code style is automatically enforced in via [black](https://pypi.org/project/black/) and [flake8](https://flake8.pycqa.org/en/latest/). See the [Tooling section](#-tooling) for information on invoking the linting pipeline.\n\n❗Important note for template users❗\nThe included [pre-commit configuration file](.pre-commit-config.yaml) executes `flake8` (along with `mypy`) across the entire `src` folder and not only on changed files. If you're converting a pre-existing code base over to this template that may result in a lot of errors that you aren't ready to deal with.\n\nYou can instead execute `flake8` only over a diff of the current changes being made by modifying the `pre-commit` `entry` line:\n\n    entry: git diff -u | flake8 --diff\n\nOr you can change the `pre-commit` config so `flake8` is only called on changed files which match a certain filtering criteria:\n\n    -   repo: local\n        hooks:\n        -   id: flake8\n            name: flake8\n            entry: flake8\n            files: ^src/|tests/\n            language: system\n\n\n### Recommended Libraries\n\nPython offers a large variety of libraries. In PDS scope, for the most current usage we should use:\n\n| Library      | Usage                                           |\n|--------------|------------------------------------------------ |\n| configparser | manage and parse configuration files            |\n| argparse     | command line argument documentation and parsing |\n| requests     | interact with web APIs                          |\n| lxml         | read/write XML files                            |\n| json         | read/write JSON files                           |\n| pyyaml       | read/write YAML files                           |\n| pystache     | generate files from templates                   |\n\nSome of these are built into Python 3; others are open source add-ons you can include in your `requirements.txt`.\n\n\n### Tests\n\nThis section describes testing for your package.\n\nA complete \"build\" including test execution, linting (`mypy`, `black`, `flake8`, etc.), and documentation build is executed via:\n\n    tox\n\n\n#### Unit tests\n\nYour project should have built-in unit tests, functional, validation, acceptance, etc., tests.\n\nFor unit testing, check out the [unittest](https://docs.python.org/3/library/unittest.html) module, built into Python 3.\n\nTests objects should be in packages `test` modules or preferably in project 'tests' directory which mirrors the project package structure.\n\nOur unit tests are launched with command:\n\n    pytest\n\nIf you want your tests to run automatically as you make changes start up `pytest` in watch mode with:\n\n    ptw\n\n\n#### Integration/Behavioral Tests\n\nOne should use the `behave package` and push the test results to \"testrail\".\n\nSee an example in https://github.com/NASA-PDS/pds-doi-service#behavioral-testing-for-integration--testing\n\n\n### Documentation\n\nYour project should use [Sphinx](https://www.sphinx-doc.org/en/master/) to build its documentation. PDS' documentation template is already configured as part of the default build. You can build your projects docs with:\n\n    python setup.py build_sphinx\n\nYou can access the build files in the following directory relative to the project root:\n\n    build/sphinx/html/\n\n\n## Build\n\n    pip install wheel\n    python setup.py sdist bdist_wheel\n\n\n## Publication\n\nNASA PDS packages can publish automatically using the [Roundup Action](https://github.com/NASA-PDS/roundup-action), which leverages GitHub Actions to perform automated continuous integration and continuous delivery. A default workflow that includes the Roundup is provided in the `.github/workflows/unstable-cicd.yaml` file. (Unstable here means an interim release.)\n\n\n### Manual Publication\n\nCreate the package:\n\n    python setup.py bdist_wheel\n\nPublish it as a Github release.\n\nPublish on PyPI (you need a PyPI account and configure `$HOME/.pypirc`):\n\n    pip install twine\n    twine upload dist/*\n\nOr publish on the Test PyPI (you need a Test PyPI account and configure `$HOME/.pypirc`):\n\n    pip install twine\n    twine upload --repository testpypi dist/*\n\n## CI/CD\n\nThe template repository comes with our two \"standard\" CI/CD workflows, `stable-cicd` and `unstable-cicd`. The unstable build runs on any push to `main` (± ignoring changes to specific files) and the stable build runs on push of a release branch of the form `release/<release version>`. Both of these make use of our GitHub actions build step, [Roundup](https://github.com/NASA-PDS/roundup-action). The `unstable-cicd` will generate (and constantly update) a SNAPSHOT release. If you haven't done a formal software release you will end up with a `v0.0.0-SNAPSHOT` release (see NASA-PDS/roundup-action#56 for specifics).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/NASA-PDS/sumo-manager/releases/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NASA-PDS/sumo-manager",
    "keywords": "pds,planetary data,various,other,keywords",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pds.sumo-tools",
    "package_url": "https://pypi.org/project/pds.sumo-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/pds.sumo-tools/",
    "project_urls": {
      "Download": "https://github.com/NASA-PDS/sumo-manager/releases/",
      "Homepage": "https://github.com/NASA-PDS/sumo-manager"
    },
    "release_url": "https://pypi.org/project/pds.sumo-tools/0.2.0/",
    "requires_dist": [
      "pds-github-util (==0.27.4)",
      "requests",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8-docstrings ; extra == 'dev'",
      "pep8-naming ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-watch ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "Software tools used in the management of PDS4 Sub-models (formerly known as PDS4 Data Dictionaries).",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16477593,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "🤠 Yee-haw! This here ar-tee-fact got done uploaded by the Roundup!",
        "digests": {
          "blake2b_256": "bbaca1f59ffca4f3493da5bee95bda9b77ad14bc53719044d47518f3b589f5c8",
          "md5": "1cc543ad1a4ab024585c0c11d7c29fbc",
          "sha256": "a88d293021f7884f8e906fc1f0a458a730a34cd5cee00cb519951332db4f4cd9"
        },
        "downloads": -1,
        "filename": "pds.sumo_tools-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cc543ad1a4ab024585c0c11d7c29fbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18047,
        "upload_time": "2022-06-01T22:51:16",
        "upload_time_iso_8601": "2022-06-01T22:51:16.463619Z",
        "url": "https://files.pythonhosted.org/packages/bb/ac/a1f59ffca4f3493da5bee95bda9b77ad14bc53719044d47518f3b589f5c8/pds.sumo_tools-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "🤠 Yee-haw! This here ar-tee-fact got done uploaded by the Roundup!",
        "digests": {
          "blake2b_256": "6d1712615d929da2d773769bcdbf77066169276494e0ef8fb6d4ebac3539ede1",
          "md5": "ea963ea726d856fe2b4a429d25bb50a9",
          "sha256": "668f3930c14d239f36a841613c38237c02bcb5b691d8ef982a0fd2daa5734f44"
        },
        "downloads": -1,
        "filename": "pds.sumo_tools-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea963ea726d856fe2b4a429d25bb50a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18066,
        "upload_time": "2022-06-02T00:34:04",
        "upload_time_iso_8601": "2022-06-02T00:34:04.053123Z",
        "url": "https://files.pythonhosted.org/packages/6d/17/12615d929da2d773769bcdbf77066169276494e0ef8fb6d4ebac3539ede1/pds.sumo_tools-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "🤠 Yee-haw! This here ar-tee-fact got done uploaded by the Roundup!",
        "digests": {
          "blake2b_256": "1f01700ca553c6361e0ca0a29ba7f1f7b723ca6a3a3fa1e033023e1495875547",
          "md5": "40c79c5c2159fb3f865f0be717e05bc7",
          "sha256": "ee7bbf1537e73c83a25a17e6fb4426def8359424b19eaf71366f7fdad5f1f1b4"
        },
        "downloads": -1,
        "filename": "pds.sumo_tools-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40c79c5c2159fb3f865f0be717e05bc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 17696,
        "upload_time": "2023-01-18T22:15:26",
        "upload_time_iso_8601": "2023-01-18T22:15:26.241431Z",
        "url": "https://files.pythonhosted.org/packages/1f/01/700ca553c6361e0ca0a29ba7f1f7b723ca6a3a3fa1e033023e1495875547/pds.sumo_tools-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6bb89faa789fc1e672b05cfd5fa685b5b45c487e390561375a6d8d389fffaed",
          "md5": "8b519bb5fecd121e2bda2544d846e999",
          "sha256": "738c6eaff750d60b97bd00e9f1ec6eed5755dcfb816ab8a69b4829697bbb1f01"
        },
        "downloads": -1,
        "filename": "pds.sumo-tools-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b519bb5fecd121e2bda2544d846e999",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 18716,
        "upload_time": "2023-01-18T23:03:55",
        "upload_time_iso_8601": "2023-01-18T23:03:55.570029Z",
        "url": "https://files.pythonhosted.org/packages/c6/bb/89faa789fc1e672b05cfd5fa685b5b45c487e390561375a6d8d389fffaed/pds.sumo-tools-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "🤠 Yee-haw! This here ar-tee-fact got done uploaded by the Roundup!",
      "digests": {
        "blake2b_256": "1f01700ca553c6361e0ca0a29ba7f1f7b723ca6a3a3fa1e033023e1495875547",
        "md5": "40c79c5c2159fb3f865f0be717e05bc7",
        "sha256": "ee7bbf1537e73c83a25a17e6fb4426def8359424b19eaf71366f7fdad5f1f1b4"
      },
      "downloads": -1,
      "filename": "pds.sumo_tools-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40c79c5c2159fb3f865f0be717e05bc7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 17696,
      "upload_time": "2023-01-18T22:15:26",
      "upload_time_iso_8601": "2023-01-18T22:15:26.241431Z",
      "url": "https://files.pythonhosted.org/packages/1f/01/700ca553c6361e0ca0a29ba7f1f7b723ca6a3a3fa1e033023e1495875547/pds.sumo_tools-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6bb89faa789fc1e672b05cfd5fa685b5b45c487e390561375a6d8d389fffaed",
        "md5": "8b519bb5fecd121e2bda2544d846e999",
        "sha256": "738c6eaff750d60b97bd00e9f1ec6eed5755dcfb816ab8a69b4829697bbb1f01"
      },
      "downloads": -1,
      "filename": "pds.sumo-tools-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8b519bb5fecd121e2bda2544d846e999",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 18716,
      "upload_time": "2023-01-18T23:03:55",
      "upload_time_iso_8601": "2023-01-18T23:03:55.570029Z",
      "url": "https://files.pythonhosted.org/packages/c6/bb/89faa789fc1e672b05cfd5fa685b5b45c487e390561375a6d8d389fffaed/pds.sumo-tools-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}