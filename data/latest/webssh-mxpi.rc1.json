{
  "info": {
    "author": "Shengdun Hua",
    "author_email": "webmaster0115@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "WebSSH\r\n------\r\n\r\n|Build Status| |codecov| |PyPI - Python Version| |PyPI|\r\n\r\nIntroduction\r\n~~~~~~~~~~~~\r\n\r\nA simple web application to be used as an ssh client to connect to your\r\nssh servers. It is written in Python, base on tornado, paramiko and\r\nxterm.js.\r\n\r\nFeatures\r\n~~~~~~~~\r\n\r\n-  SSH password authentication supported, including empty password.\r\n-  SSH public-key authentication supported, including DSA RSA ECDSA\r\n   Ed25519 keys.\r\n-  Encrypted keys supported.\r\n-  Two-Factor Authentication (time-based one-time password) supported.\r\n-  Fullscreen terminal supported.\r\n-  Terminal window resizable.\r\n-  Auto detect the ssh server's default encoding.\r\n-  Modern browsers including Chrome, Firefox, Safari, Edge, Opera\r\n   supported.\r\n\r\nPreview\r\n~~~~~~~\r\n\r\n|Login| |Terminal|\r\n\r\nHow it works\r\n~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    +---------+     http     +--------+    ssh    +-----------+\r\n    | browser | <==========> | webssh | <=======> | ssh server|\r\n    +---------+   websocket  +--------+    ssh    +-----------+\r\n\r\nRequirements\r\n~~~~~~~~~~~~\r\n\r\n-  Python 2.7/3.4+\r\n\r\nQuickstart\r\n~~~~~~~~~~\r\n\r\n1. Install this app, run command ``pip install webssh``\r\n2. Start a webserver, run command ``wssh``\r\n3. Open your browser, navigate to ``127.0.0.1:8888``\r\n4. Input your data, submit the form.\r\n\r\nServer options\r\n~~~~~~~~~~~~~~\r\n\r\n.. code:: bash\r\n\r\n    # start a http server with specified listen address and listen port\r\n    wssh --address='2.2.2.2' --port=8000\r\n\r\n    # start a https server, certfile and keyfile must be passed\r\n    wssh --certfile='/path/to/cert.crt' --keyfile='/path/to/cert.key'\r\n\r\n    # missing host key policy\r\n    wssh --policy=reject\r\n\r\n    # logging level\r\n    wssh --logging=debug\r\n\r\n    # log to file\r\n    wssh --log-file-prefix=main.log\r\n\r\n    # more options\r\n    wssh --help\r\n\r\nBrowser console\r\n~~~~~~~~~~~~~~~\r\n\r\n.. code:: javascript\r\n\r\n    // connect to your ssh server\r\n    wssh.connect(hostname, port, username, password, privatekey, passphrase, totp);\r\n\r\n    // pass an object to wssh.connect\r\n    var opts = {\r\n      hostname: 'hostname',\r\n      port: 'port',\r\n      username: 'username',\r\n      password: 'password',\r\n      privatekey: 'the private key text',\r\n      passphrase: 'passphrase',\r\n      totp: 'totp'\r\n    };\r\n    wssh.connect(opts);\r\n\r\n    // without an argument, wssh will use the form data to connect\r\n    wssh.connect();\r\n\r\n    // set a new encoding for client to use\r\n    wssh.set_encoding(encoding);\r\n\r\n    // reset encoding to use the default one\r\n    wssh.reset_encoding();\r\n\r\n    // send a command to the server\r\n    wssh.send('ls -l');\r\n\r\nCustom Font\r\n~~~~~~~~~~~\r\n\r\nTo use custom font, put your font file in the directory\r\n``webssh/static/css/fonts/`` and restart the server.\r\n\r\nURL Arguments\r\n~~~~~~~~~~~~~\r\n\r\nSupport passing arguments by url (query or fragment) like following\r\nexamples:\r\n\r\nPassing form data (password must be encoded in base64, privatekey not\r\nsupported)\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/?hostname=xx&username=yy&password=str_base64_encoded\r\n\r\nPassing a terminal background color\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/#bgcolor=green\r\n\r\nPassing a user defined title\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/?title=my-ssh-server\r\n\r\nPassing an encoding\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/#encoding=gbk\r\n\r\nPassing a command executed right after login\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/?command=pwd\r\n\r\nPassing a terminal type\r\n\r\n.. code:: bash\r\n\r\n    http://localhost:8888/?term=xterm-256color\r\n\r\nUse Docker\r\n~~~~~~~~~~\r\n\r\nStart up the app\r\n\r\n::\r\n\r\n    docker-compose up\r\n\r\nTear down the app\r\n\r\n::\r\n\r\n    docker-compose down\r\n\r\nTests\r\n~~~~~\r\n\r\nRequirements\r\n\r\n::\r\n\r\n    pip install pytest pytest-cov codecov flake8 mock\r\n\r\nUse unittest to run all tests\r\n\r\n::\r\n\r\n    python -m unittest discover tests\r\n\r\nUse pytest to run all tests\r\n\r\n::\r\n\r\n    python -m pytest tests\r\n\r\nDeployment\r\n~~~~~~~~~~\r\n\r\nRunning behind an Nginx server\r\n\r\n.. code:: bash\r\n\r\n    wssh --address='127.0.0.1' --port=8888 --policy=reject\r\n\r\n.. code:: nginx\r\n\r\n    # Nginx config example\r\n    location / {\r\n        proxy_pass http://127.0.0.1:8888;\r\n        proxy_http_version 1.1;\r\n        proxy_read_timeout 300;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection \"upgrade\";\r\n        proxy_set_header Host $http_host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Real-PORT $remote_port;\r\n    }\r\n\r\nRunning as a standalone server\r\n\r\n.. code:: bash\r\n\r\n    wssh --port=8080 --sslport=4433 --certfile='cert.crt' --keyfile='cert.key' --xheaders=False --policy=reject\r\n\r\nTips\r\n~~~~\r\n\r\n-  For whatever deployment choice you choose, don't forget to enable\r\n   SSL.\r\n-  By default plain http requests from a public network will be either\r\n   redirected or blocked and being redirected takes precedence over\r\n   being blocked.\r\n-  Try to use reject policy as the missing host key policy along with\r\n   your verified known\\_hosts, this will prevent man-in-the-middle\r\n   attacks. The idea is that it checks the system host keys\r\n   file(\"~/.ssh/known\\_hosts\") and the application host keys\r\n   file(\"./known\\_hosts\") in order, if the ssh server's hostname is not\r\n   found or the key is not matched, the connection will be aborted.\r\n\r\n.. |Build Status| image:: https://travis-ci.org/huashengdun/webssh.svg?branch=master\r\n   :target: https://travis-ci.org/huashengdun/webssh\r\n.. |codecov| image:: https://codecov.io/gh/huashengdun/webssh/branch/master/graph/badge.svg\r\n   :target: https://codecov.io/gh/huashengdun/webssh\r\n.. |PyPI - Python Version| image:: https://img.shields.io/pypi/pyversions/webssh.svg\r\n.. |PyPI| image:: https://img.shields.io/pypi/v/webssh.svg\r\n.. |Login| image:: https://github.com/huashengdun/webssh/raw/master/preview/login.png\r\n.. |Terminal| image:: https://github.com/huashengdun/webssh/raw/master/preview/terminal.png\r\n\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/huashengdun/webssh",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "webssh-mxpi",
    "package_url": "https://pypi.org/project/webssh-mxpi/",
    "platform": null,
    "project_url": "https://pypi.org/project/webssh-mxpi/",
    "project_urls": {
      "Homepage": "https://github.com/huashengdun/webssh"
    },
    "release_url": "https://pypi.org/project/webssh-mxpi/1.6.1/",
    "requires_dist": [
      "tornado (>=4.5.0)",
      "paramiko (>=2.3.1)"
    ],
    "requires_python": "",
    "summary": "Web based ssh client",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16937819,
  "releases": {
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "619f1a593d48dfb407a692bb20c7e5845a02314c854b5f88d79e2f272df4274f",
          "md5": "03555aeddf606916f885399f3877df9b",
          "sha256": "0eba44dee9f83d928ab64f89596670be4cf3087923ce4b6de2654e445536119e"
        },
        "downloads": -1,
        "filename": "webssh_mxpi-1.6.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03555aeddf606916f885399f3877df9b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16947,
        "upload_time": "2023-02-20T04:34:15",
        "upload_time_iso_8601": "2023-02-20T04:34:15.594648Z",
        "url": "https://files.pythonhosted.org/packages/61/9f/1a593d48dfb407a692bb20c7e5845a02314c854b5f88d79e2f272df4274f/webssh_mxpi-1.6.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95301fad91e1490e3e4e2c9fd44676c3e6720f21960c20c1c74422d381c1848",
          "md5": "6ef5362963eb04dfa07c1eb4e6eb61cb",
          "sha256": "15fd57a57175a86bc27979e20faf32c77736f41520d074a06918477f90b2f6cd"
        },
        "downloads": -1,
        "filename": "webssh-mxpi-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ef5362963eb04dfa07c1eb4e6eb61cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38413,
        "upload_time": "2023-02-20T04:34:19",
        "upload_time_iso_8601": "2023-02-20T04:34:19.192302Z",
        "url": "https://files.pythonhosted.org/packages/c9/53/01fad91e1490e3e4e2c9fd44676c3e6720f21960c20c1c74422d381c1848/webssh-mxpi-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "619f1a593d48dfb407a692bb20c7e5845a02314c854b5f88d79e2f272df4274f",
        "md5": "03555aeddf606916f885399f3877df9b",
        "sha256": "0eba44dee9f83d928ab64f89596670be4cf3087923ce4b6de2654e445536119e"
      },
      "downloads": -1,
      "filename": "webssh_mxpi-1.6.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03555aeddf606916f885399f3877df9b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16947,
      "upload_time": "2023-02-20T04:34:15",
      "upload_time_iso_8601": "2023-02-20T04:34:15.594648Z",
      "url": "https://files.pythonhosted.org/packages/61/9f/1a593d48dfb407a692bb20c7e5845a02314c854b5f88d79e2f272df4274f/webssh_mxpi-1.6.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c95301fad91e1490e3e4e2c9fd44676c3e6720f21960c20c1c74422d381c1848",
        "md5": "6ef5362963eb04dfa07c1eb4e6eb61cb",
        "sha256": "15fd57a57175a86bc27979e20faf32c77736f41520d074a06918477f90b2f6cd"
      },
      "downloads": -1,
      "filename": "webssh-mxpi-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6ef5362963eb04dfa07c1eb4e6eb61cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38413,
      "upload_time": "2023-02-20T04:34:19",
      "upload_time_iso_8601": "2023-02-20T04:34:19.192302Z",
      "url": "https://files.pythonhosted.org/packages/c9/53/01fad91e1490e3e4e2c9fd44676c3e6720f21960c20c1c74422d381c1848/webssh-mxpi-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}