{
  "info": {
    "author": "Kitchenita, Facundo A. Lucianna",
    "author_email": "facundo@kitchenita.co",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Logger Cloudwatch Structlog  \n  \nLogger Cloudwatch Structlog is a Python package that contain that allows logging in an [AWS CloudWatch Log](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html) compatible way using a JSON format in *serverless services in AWS* (e.g., AWS Lambda). It is easily readable by humans and machines. This library is a wrapper for structlog, you can replicate all the functionalities just using **[structlog](https://www.structlog.org/en/stable/index.html)**. We decided to make this library to make easier our developments.\n  \n## Installation and updating  \nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install *Logger Cloudwatch Structlog* like below.   \n  \n```bash  \npip install logger_cloudwatch_structlog\n```  \n  \n## Usage  \nThis library has two structlog processors and functions that configure and returns a logger ready to use in your application. Also, we provided a one-fits-all solution that you can use without taking into account any change.  \n  \n### Processors  \n#### PasswordCensor  \nProcessor that censor words in ``event_dict``. If you log information has words that are needed to be censured, like passwords, etc., this processor replaces them with ``\"*CENSORED*\"``. You have to provide a list of string of the key to be censured as argument ``wordlist``.  \n  \n```python  \nfrom logger_cloudwatch_structlog import PasswordCensor  \nimport structlog  \n  \nprocessors = [  \n    ...    \n    PasswordCensor(wordlist=[\"password\", \"user\"])    \n    ...]  \n  \nstructlog.configure(  \n        processors=processors,        \n        ...)\n          \nlogger = structlog.get_logger()  \n  \nlogger.info(\"msg\", peer='127.0.0.1', password=\"password\", user=\"alice\")  \n  \n```  \nThis would result among other the following lines to be printed:  \n  \n```bash  \nevent='msg' peer='127.0.0.1' user='*CENSORED*' password='*CENSORED*'  \n```  \n  \n#### AWSCloudWatchLogs  \nRender a log line compatible with AWS CloudWatch Logs.  This is a copy and modification of `structlog.processors.JSONRenderer`. Render the ``event_dict`` using ``serializer(event_dict, **json_kw)``.  This class is from [serverless-zoom-recordings](https://github.com/openlibraryenvironment/serverless-zoom-recordings).  \n  \n*Arguments:*  \n- callouts: List of strings, they are printed in clear-text on the front of the log line. Only the first two items of this list are called out. Defaults to `None`.  \n- serializer: A `json.dumps`-compatible callable that will be used to format the string. Defaults to `json.dumps`.  \n- \\*\\*dumps_kw: Arbitrary keyword arguments. Are passed unmodified to *serializer*.  \n  \n```python  \nfrom logger_cloudwatch_structlog import AWSCloudWatchLogs  \nimport structlog  \nimport json  \n  \nprocessors = [  \n    ...    \n    AWSCloudWatchLogs(callouts=[\"status\", \"event\"], serializer=json.dumps, sort_keys=False)]  \n  \nstructlog.configure(  \n        processors=processors,        \n        ...)  \nlogger = structlog.get_logger()  \n  \nlogger.info(\"msg\", status=\"wut\", peer='127.0.0.1', password=\"password\", user=\"alice\")  \n  \n```  \nThis would result among other the following lines to be printed:  \n  \n```bash  \n[INFO] \"wut\" \"msg\" {\"event\": \"msg\", \"status\": \"wut\", \"peer\": \"'127.0.0.1'\", \"password\": \"password\", \"user\": \"alice\"}  \n```  \n  \n### Functions  \n* setup_logging → Configure logging for the application.  \n* get_logger → Convenience function that returns a structlog logger.  \n* setup_and_get_logger →  Configure logging for the application and return the logger. This function is a one-fits-all solution with some possibilities to change the setup.  \n  \n#### setup_logging()  \nThis function configure the logging for the application. It has multiple arguments that allow you to have a flexible configuration.  \n  \n*Arguments*:  \n- wordlist_to_censor: List with words to be censored in the event_dict, if they are present. Defaults to `None`.\n- callouts: List of strings, they are printed in clear-text on the front of the log line. Only the first two items of this list are called out. Defaults to `None`.  \n- serializer: A `json.dumps`-compatible callable that will be used to format the string. Defaults to `json.dumps`.  \n- level: Sets the threshold for this logger to level. Logging messages which are less severe than level will be ignored. Defaults to `logging.INFO`.  \n- noisy_log_sources: Tuple of sources that output a lot of unnecessary messages. Defaults to `(\"boto\", \"boto3\", \"botocore\")`.  \n- \\*\\*serializer_kw: Arbitrary keyword arguments. Are passed unmodified to *serializer*.  \n  \n#### get_logger()  \nConvenience function that returns a structlog logger.  \n  \n*Arguments*:  \n- \\*args: Positional arguments that are passed unmodified to the logger factory. Therefore, it depends on the factory what they mean.  \n- \\*\\*initial_values: Values that are used to pre-populate the context.  \n  \n#### setup_and_get_logger()  \nConfigure logging for the application and return the logger. This function is a one-fits-all solution with some possibilities to change the setup. But you cannot add keyword arguments for the logger factory, or even values that are used to pre-populate the context. If you need a more flexible solution, you can call setup_logging() and get_logger() separated.  \n  \nExample,  \n```python  \nfrom logger_cloudwatch_structlog import setup_and_get_logger, AWSCloudWatchLogs  \nimport structlog  \nimport logging  \n  \nprocessors = [structlog.stdlib.add_log_level,  \n              structlog.processors.TimeStamper(fmt=\"iso\"),              \n              structlog.processors.UnicodeDecoder(),              \n              AWSCloudWatchLogs(callouts=[\"event\", \"context\"])]  \nlogger = setup_and_get_logger(level=logging.INFO, processors=processors)  \n```  \n  \n### One-fits-all solution  \nIf you want to use this library without any change, we provide a one-fit-solution. If you call `setup_and_get_logger()` without argument, you have a ready to use logger that works with AWS CloudWatch Log.  \n  \n```python  \nfrom logger_cloudwatch_structlog import setup_and_get_logger  \n  \nlogger = setup_and_get_logger()  \n```  \n  \nThe one-fits-all solution has the next configuration:  \n```python  \nwordlist_to_censor=None  \ncallouts=[\"status_code\", \"event\"]  \nserializer=json.dumps  \nlevel=logging.INFO  \nnoisy_log_sources=(\"boto\", \"boto3\", \"botocore\")  \nprocessors = (  \n    structlog.stdlib.filter_by_level,    \n    structlog.stdlib.add_log_level,    \n    structlog.stdlib.PositionalArgumentsFormatter(),    \n    structlog.processors.TimeStamper(fmt=\"iso\"),    \n    structlog.processors.StackInfoRenderer(),  \n    structlog.processors.format_exc_info,    \n    structlog.processors.UnicodeDecoder(),    \n    PasswordCensor(wordlist=wordlist_to_censor),    \n    structlog.threadlocal.merge_threadlocal,    \n    AWSCloudWatchLogs(callouts=[\"status_code\", \"event\"], \n    serializer=json.dumps, sort_keys=False))  \n```  \n  \nIf you want words to be censored, just add the list in the function  \n```python  \nfrom logger_cloudwatch_structlog import setup_and_get_logger  \n  \nlogger = setup_and_get_logger(wordlist_to_censor=[\"password\"])  \n```\n\n## License  \n[Apache 2.0](https://choosealicense.com/licenses/apache-2.0/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kitchenita/python-logger-cloudwatch-structlog",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger-cloudwatch-structlog",
    "package_url": "https://pypi.org/project/logger-cloudwatch-structlog/",
    "platform": null,
    "project_url": "https://pypi.org/project/logger-cloudwatch-structlog/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kitchenita/python-logger-cloudwatch-structlog/issues",
      "Homepage": "https://github.com/kitchenita/python-logger-cloudwatch-structlog"
    },
    "release_url": "https://pypi.org/project/logger-cloudwatch-structlog/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library that allows logging in an AWS CloudWatch compatible way using a json format in serverless services (e.g. AWS Lambda). It is easily readable by humans and machines.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15859643,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd8901491150a521c5fecb61cb5073e6989444ef9a53af99b79481cdd4ed9ace",
          "md5": "cf6c05f24f00fc155dbef5e09dc0a942",
          "sha256": "b9450b73982b174d3e9724f4494246c94ee81b6d0a70ad4c2bd7aa5fdee3817a"
        },
        "downloads": -1,
        "filename": "logger_cloudwatch_structlog-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cf6c05f24f00fc155dbef5e09dc0a942",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10688,
        "upload_time": "2022-11-22T21:35:21",
        "upload_time_iso_8601": "2022-11-22T21:35:21.711267Z",
        "url": "https://files.pythonhosted.org/packages/dd/89/01491150a521c5fecb61cb5073e6989444ef9a53af99b79481cdd4ed9ace/logger_cloudwatch_structlog-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c83d95b85730fbdb80d7fa7250bf7e4a4f40e744aa9cc28442ee22ec2c14d92",
          "md5": "a2f7ea32e730fb031a9fcc71b0f30914",
          "sha256": "895c877b534c2a3bbb80ae2cb063e0a8471c056962507333269877ece03b331c"
        },
        "downloads": -1,
        "filename": "logger_cloudwatch_structlog-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2f7ea32e730fb031a9fcc71b0f30914",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10682,
        "upload_time": "2022-11-22T21:41:18",
        "upload_time_iso_8601": "2022-11-22T21:41:18.217237Z",
        "url": "https://files.pythonhosted.org/packages/2c/83/d95b85730fbdb80d7fa7250bf7e4a4f40e744aa9cc28442ee22ec2c14d92/logger_cloudwatch_structlog-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c83d95b85730fbdb80d7fa7250bf7e4a4f40e744aa9cc28442ee22ec2c14d92",
        "md5": "a2f7ea32e730fb031a9fcc71b0f30914",
        "sha256": "895c877b534c2a3bbb80ae2cb063e0a8471c056962507333269877ece03b331c"
      },
      "downloads": -1,
      "filename": "logger_cloudwatch_structlog-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a2f7ea32e730fb031a9fcc71b0f30914",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10682,
      "upload_time": "2022-11-22T21:41:18",
      "upload_time_iso_8601": "2022-11-22T21:41:18.217237Z",
      "url": "https://files.pythonhosted.org/packages/2c/83/d95b85730fbdb80d7fa7250bf7e4a4f40e744aa9cc28442ee22ec2c14d92/logger_cloudwatch_structlog-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}