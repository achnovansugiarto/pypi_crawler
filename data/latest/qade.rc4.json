{
  "info": {
    "author": "Juan Carlos Criado, Michael Spannowsky",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "A **differential equation** solver using **quantum annealing**. It can be applied to coupled linear ODEs and PDEs with variable coefficients and inhomogeneous terms. The solution is obtained by finding the optimal weights for a linear combination of \"basis functions\": \n\n<p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/basis.png\" width=150> </p>\n\nThe problem can then be viewed as a minimization one, for the loss function\n\n<p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/loss.png\" width=300> </p>\n\nwhere E is the equation to be solved, B are the initial/boundary conditions, and the x are the sample points at which they must hold. From this perspective, there is no difference between the equation and the boundary conditions, and they are treated on an equal footing. The loss function is then translated into an **Ising model** Hamiltonian by means of a **binary encoding** for the weights and solved in a quantum annealer. \n\nSolutions obtained with qade for the wave equation and a system of coupled first order ODEs (see the `examples` directory):\n\n<p align=\"center\"> \n  <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/wave_sol.png\" width=250> \n  <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/coupled_sol.png\" width=250> \n</p>\n\n\n# Contents\n\n- [Installation](#installation)\n- [Usage example](#usage-example)\n- [Documentation](#documentation)\n  - [qade.function](#qadefunction)\n  - [qade.basis](#qadebasis)\n  - [qade.equation](#qadeequation)\n  - [qade.solve](#qadesolve)\n  - [Inspecting the loss function](#inspecting-the-loss-function)\n- [Citation](#citation)\n\n\n# Installation\n\n```\n> pip install qade\n```\n\nThis will install the dependencies `numpy` and `dwave-ocean-sdk` if not present. Python version 3.7 or higher is required. In order for `qade` to send the problem for solution in the D-Wave systems, the **API token** needs to be [configured](https://docs.ocean.dwavesys.com/en/stable/overview/sapi.html).\n\n\n# Usage example \n\nAs an example, we can solve the Laguerre equation in the `[0, 1]` interval with boundary conditions at the extremes:\n\n<p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/laguerre_eq.png\" width=450/> </p>\n\nwhere `L_n` is the nth Laguerre polynomial. To do so, we parametrize the solution as a linear combination of the first few powers of x, and look for the optimal values of the weights such that the equation is satisfied at a set of sample points. This can be done through:\n\n\n``` python\nimport numpy as np\nfrom scipy.special import eval_laguerre as L\nimport qade\n\nn = 4  # Laguerre equation parameter\nx = np.linspace(0, 1, 20)  # Sample points at which the equation is to be evaluated\ny = qade.function(n_in=1, n_out=1)  # Define the function to be solved for\n\n# Define the equation and boundary conditions\neq = qade.equation(x * y[2] + (1 - x) * y[1] + n * y[0], x)\nbcs = qade.equation(y[0] - [1, L(n, 1)], [0, 1])\n\n# Solve the equation using as the basis of functions the monomials [1, x, x^2, x^3]\ny_sol = qade.solve([eq, bcs], qade.basis(\"monomial\", 4), scales=(n - 2), num_reads=500)\n```\n\nThis illustrates the use of the 4 main functions provided by qade: \n\n- [`qade.function(n_in, n_out)`](#qadefunction) defines a symbolic function `y` of `n_in` inputs and `n_out` outputs, whose nth derivative is denoted as `y[n]`.\n\n- [`qade.equation(eq, samples)`](#qadeequation) defines an equation of the form `eq == 0`, with `samples` being an array-like object containing sample points at which it holds.\n\n- [`qade.basis(name, size_per_dim, ...)`](#qadebasis) defines the basis of functions in terms of which the solution will be written.\n\n- [`qade.solve(eqs, basis, ...)`](#qadesolve) uses a binary encoding to represent the problem of solving the given equations in the given basis as an Ising model, sends it to a D-Wave quantum annealer, and collects it into a [`Solution`](#solution-objects) object `y_sol`.\n\nWe can now print the weights of the basis functions in the solution and the corresponding through:\n\n```python\nprint(f\"loss = {y_sol.loss:.3}, weights = {y_sol.weights}\")\n```\n\nWe can also evaluate the solution at any set of points, plot the results, and compare to the analyical solution, the which is nth Laguerre polynomial:\n\n``` python\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y_sol(x), linewidth=5)\nplt.plot(x, L(n, x), color=\"black\", linestyle=\"dashed\")\nplt.show()\n```\n\n<p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/laguerre_sol.png\" width=400> </p> \n\nFor other examples, see the `examples` directory. An example PDE, the wave equation, is solved in `wave.py`. A system of coupled first-order ODEs is solved in `coupled.py`.\n\n\n# Documentation\n\n## `qade.function`\n\nCreates `Function` objects, to be used in definition of the equations. The arguments are:\n\n- `n_in: int`. The number of input variables of the function, i.e. the dimension of the domain.\n\n- `n_out: int`. The number of output variables of the function, i.e. the dimension of the target space. For `n_out == 1`, `qade.function` returns a single `Function`. For `n_out > 1`, it returns list of `Function` objects, one for each output component.\n\nA differential equation or boundary condition is then defined as a linear combination of the derivatives of the functions, plus possible an inhomogeneous term, with coefficients and inhomogeneous term being either scalars or flat array-like objects (numpy arrays, lists, ...) having the same length as the set of sample points at which the equation is evaluated. The examples show how this is done in different practical settings. The notation `f[k1, ..., kn]` represents the following expression:\n\n<p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/derivatives.png\" width=120> </p>\n\n## `qade.equation`\n\nCreates an `Equation`, representing any linear differential equation or boundary condition. The arguments are:\n\n- `formula`. The expression for the equation, constructed as a linear combination of derivatives `f[k1, ..., kn]` of `Function` objects, plus the optional inhomogeneous term.\n\n- `samples`, an array-like object of shape `(n_samples, n_in)` (or just `(n_samples,)`, if `n_in == 1`). Defines the sample points from the domain in which the equation must hold.\n\n## `qade.basis`\n\nCreates a `Basis`, representing the functions to be linearly combined into the solution. The arguments are:\n\n- `name: str`. The allowed names are:\n  - `\"fourier\"`. A product of the following functions for each component `x` in the input space: \n    <p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/fourier.png\" width=300> </p>\n\n  - `\"monomial\"`. A product of the following functions for each component `x` in the input space:\n    <p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/monomial.png\" width=90> </p>\n  \n  - `\"trig\"`. A product of the following functions for each component `x` in the input space:\n    <p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/trig.png\" width=300> </p>\n    \n  - `\"gaussian\"`. The following functions of the distance `r` to each point `x_n` in an equally-spaced grid in the input space (which is assumed to be the box `[0, 1]^n_in`):\n     <p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/gaussian.png\" width=160> </p>\n     \n  - `\"multiquadric\"`. The following functions of the distance `r` to each point `x_n` in an equally-spaced grid in the input space (which is assumed to be the box `[0, 1]^n_in`):\n     <p align=\"center\"> <img src=\"https://gitlab.com/jccriado/qade/-/raw/main/images/multiquadric.png\" width=130> </p>\n     \n- `size_per_dim: int`. The number of functions to use per input variable. The total dimension of the basis will be `size_per_dim ** n_in`.\n\n- `n_in: int`. Only used by the radial basis functions `\"gaussian\"` and `\"multiquadric\"` to create the grid of points in the domain.\n\n- `scale: float`. The lambda scale parameter of the radial basis functions `\"gaussian\"` and `\"multiquadric\"`. \n\n### Custom bases\n\nCustom bases can be provided by the user. In this case, instead of using `qade.basis`, the user should define a class implementing the methods:\n\n- `dimension(self, n_in: int) -> int`. Returning the total number of functions in the basis.\n\n- `derivatives(self, k: int, samples: np.ndarray) -> np.ndarray`. Returning the array of kth derivatives of the basis functions at the given sample points, received as an array of shape `(n_samples, n_in)`. The output array should have shape: `(n_samples, n_out) + (n_in,) * k`.\n\n## `qade.solve`\n\nSolves the given equations and returns a [`Solution`](#solution-objects) object. The arguments are:\n\n- `equations: List[Equation]`. The equations to be solved, including initial/boundary conditions.\n\n- `basis: Basis`. The basis to be used in their solution.\n\n- `n_spins: int = 3`. The number of spins per weight in the binary encoding.\n\n- `n_epochs: int = 10`. The number of epochs in which the problem is solved, using the values obtained in the previous epoch as the center values in the binary encoding of the weights.\n\n- `scale_factor: float = 0.5`. The relative change in the scale in the binary encoding of the weights from one epoch to the next.\n\n- `anneal_schedule: Optional[List[Tuple[int, int]]] = None`. The schedule to be used by the quantum annealer. See D-Wave Ocean Tools' [documentation](https://docs.dwavesys.com/docs/latest/c_solver_parameters.html#anneal-schedule) for details. If `None`, it will default to a linear schedule of the form `[(0, 0), (200, 0)]`. \n\n- `num_reads: int = 200`. The number of reads to be performed by the quantum annealer.\n\n- `qpu_solver: str = \"Advantage_system4.1\"`. The QPU to be used.\n\n- `centers: ArrayLike = 0`. The initial central values in the binary encoding of the weights. Must be a scalar or an array of size `n_out * basis_dim`.\n\n- `scales: ArrayLike = 1`. The initial scales in the binary encoding of the weights. Must be a scalar or an array of size `n_out * basis_dim`.\n\n- `verbose: bool = False`. Determines if information about intermediate steps should be printed.\n\n- `classical_minimizer: Optional[Callable[[Callable[[np.ndarray], float]], np.ndarray]] = None`. If not `None`, a classical function to be used in place of the quantum procedure for minimizing the loss function, for testing purposes.\n\n### Solution objects\n\nReturn type of `qade.solve`. They are callables that receive an array-like object of sample points, with shape `(n_samples, n_in)` (or just `(n_samples,)`, if `n_in == 1`), and return the corresponding values of the solution, as a numpy array of shape `(n_samples, n_out)`. Their attributes are:\n\n- `basis: Basis`. The basis in terms of which the solution has been obtained.\n\n- `weights: np.ndarray`, with shape `(n_out, n_in)`. The optimal weights providing the solution as a linear combination of the basis functions.\n\n- `loss: float`. The value of the loss function at the given weights.\n\n## Inspecting the loss function\n\nTwo functions are provided to obtain the internal parameters of the loss function, both as a quadratic function of the real-valued weights, and as an Ising model Hamiltonian in the annealer spins.\n\n### `qade.loss`\n\nReturns the `(J, h)` parameters of the quadratic loss function `Q(w) = w^T J w + h^T w`, where `w` is the flattened array of the continuous weights. The arguments are\n\n- `equations: List[Equation]`. The equations to be included.\n\n- `basis: Basis`. The basis to be used in their solution.\n\n### `qade.ising`\n\nReturns the `(J, h)` parameters of the Ising model Hamiltonian `H(w) = w^T J w + h^T w`, where `w` is the flattened array of spins. The arguments are:\n\n- `equations: List[Equation]`. The equations to be included.\n\n- `basis: Basis`. The basis to be used in their solution.\n\n- `n_spins: int = 3`. The number of spins per weight in the binary encoding.\n\n- `centers: ArrayLike = 0`. The initial central values in the binary encoding of the weights. Must be a scalar or an array of size `n_out * basis_dim`.\n\n- `scales: ArrayLike = 1`. The initial scales in the binary encoding of the weights. Must be a scalar or an array of size `n_out * basis_dim`.\n\n\n# Citation\n\nIf you use qade, please cite:\n\n``` bibtex\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "differential equations,quantum annealing",
    "license": "Copyright (c) <year> <copyright holders> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qade",
    "package_url": "https://pypi.org/project/qade/",
    "platform": null,
    "project_url": "https://pypi.org/project/qade/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/qade/0.1.2/",
    "requires_dist": [
      "dwave-ocean-sdk",
      "numpy (>=1.20)"
    ],
    "requires_python": ">=3.7",
    "summary": "Differential equation solving through quantum annealing",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13468922,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baf4f423c30ceed6440b0211ad68aaa7906a88780a22ce20d151d3e851d9ce56",
          "md5": "7894afa03cfb81ba19c5afeffb34fb3f",
          "sha256": "86e24e6bec8ef23b1a5790e453cd1f674d7a43f5026f90943fac8ffe491c350d"
        },
        "downloads": -1,
        "filename": "qade-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7894afa03cfb81ba19c5afeffb34fb3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14662,
        "upload_time": "2022-04-08T06:48:06",
        "upload_time_iso_8601": "2022-04-08T06:48:06.458068Z",
        "url": "https://files.pythonhosted.org/packages/ba/f4/f423c30ceed6440b0211ad68aaa7906a88780a22ce20d151d3e851d9ce56/qade-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b937216464559f3b4e4caef94e958e8e6f29e8ca8cf39457a0b0c2728c998cef",
          "md5": "820fd60d89533fd9b78228c244630486",
          "sha256": "affe3e747ed2b395dc32a7b281358d14fbaa867b613d837e5ee13aa574fa0e7c"
        },
        "downloads": -1,
        "filename": "qade-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "820fd60d89533fd9b78228c244630486",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15652,
        "upload_time": "2022-04-08T06:48:08",
        "upload_time_iso_8601": "2022-04-08T06:48:08.583753Z",
        "url": "https://files.pythonhosted.org/packages/b9/37/216464559f3b4e4caef94e958e8e6f29e8ca8cf39457a0b0c2728c998cef/qade-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8b24a1c8295720bed92fc7f43763673c77446ee74443aebde06eed1f98113d7",
          "md5": "51226c931ce9d1407fa5e0e01b0e05c8",
          "sha256": "f3dcd2845b9ed124ab8e9b506811158a3c4b46c7209bf943ed9da1233f65f8be"
        },
        "downloads": -1,
        "filename": "qade-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51226c931ce9d1407fa5e0e01b0e05c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14677,
        "upload_time": "2022-04-08T06:55:35",
        "upload_time_iso_8601": "2022-04-08T06:55:35.223805Z",
        "url": "https://files.pythonhosted.org/packages/a8/b2/4a1c8295720bed92fc7f43763673c77446ee74443aebde06eed1f98113d7/qade-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82a3be22f44cc7648b8bf921c783aedee4f2275b6f51ae4eadaa3a4426059fc3",
          "md5": "d27c63689b79074d9b4a4e026209553d",
          "sha256": "978a14c5cedc9568f9cb360c4ead0e8ed8f38233c66a04c01c9f5aaddbe756b3"
        },
        "downloads": -1,
        "filename": "qade-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d27c63689b79074d9b4a4e026209553d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15675,
        "upload_time": "2022-04-08T06:55:37",
        "upload_time_iso_8601": "2022-04-08T06:55:37.860302Z",
        "url": "https://files.pythonhosted.org/packages/82/a3/be22f44cc7648b8bf921c783aedee4f2275b6f51ae4eadaa3a4426059fc3/qade-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "858c525ff0425162dbaeb1742eb926b40f572300a32e236a75ad33278e9c289f",
          "md5": "968ad1993c06d2290728af04e5de9118",
          "sha256": "98933f183bc6de1d359879579210749cb6e6a00531f24ff6831afda90f99ef1d"
        },
        "downloads": -1,
        "filename": "qade-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "968ad1993c06d2290728af04e5de9118",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14692,
        "upload_time": "2022-04-09T07:32:05",
        "upload_time_iso_8601": "2022-04-09T07:32:05.598140Z",
        "url": "https://files.pythonhosted.org/packages/85/8c/525ff0425162dbaeb1742eb926b40f572300a32e236a75ad33278e9c289f/qade-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba6dddee399fc45e5cb1e8274523945f8f5a5f40f1f23a4c8dc906830fde0a70",
          "md5": "2b8069692fd09b07015ced016ded2f5c",
          "sha256": "aa61e5a60c491a66d304ff5207f92099bec64c5e53093c266001a7d0507f7565"
        },
        "downloads": -1,
        "filename": "qade-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b8069692fd09b07015ced016ded2f5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15688,
        "upload_time": "2022-04-09T07:32:08",
        "upload_time_iso_8601": "2022-04-09T07:32:08.683347Z",
        "url": "https://files.pythonhosted.org/packages/ba/6d/ddee399fc45e5cb1e8274523945f8f5a5f40f1f23a4c8dc906830fde0a70/qade-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22e32e1850f514acb26a452814ca1765a3b54a639bb8ff8baf797f9d17decfaa",
          "md5": "d9e66fc24c4c136abac1c70847d0b4a8",
          "sha256": "299ba6c375b985937e4d996fce16b0a3aac3c2ab3a0ee9864d4acd5ac1f3fb86"
        },
        "downloads": -1,
        "filename": "qade-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d9e66fc24c4c136abac1c70847d0b4a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14728,
        "upload_time": "2022-04-10T13:59:10",
        "upload_time_iso_8601": "2022-04-10T13:59:10.688115Z",
        "url": "https://files.pythonhosted.org/packages/22/e3/2e1850f514acb26a452814ca1765a3b54a639bb8ff8baf797f9d17decfaa/qade-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a30c7e767e6ac6e8cbf9eb742897f30e502483465b88f1626d46025e652ec222",
          "md5": "b2db5af9dd5814d0261aff99629b1ccc",
          "sha256": "157099c7c81bcc39bb96875079231cf056b96bef982350f9b2fac03dcd4912fc"
        },
        "downloads": -1,
        "filename": "qade-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b2db5af9dd5814d0261aff99629b1ccc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15846,
        "upload_time": "2022-04-10T13:59:14",
        "upload_time_iso_8601": "2022-04-10T13:59:14.849566Z",
        "url": "https://files.pythonhosted.org/packages/a3/0c/7e767e6ac6e8cbf9eb742897f30e502483465b88f1626d46025e652ec222/qade-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22e32e1850f514acb26a452814ca1765a3b54a639bb8ff8baf797f9d17decfaa",
        "md5": "d9e66fc24c4c136abac1c70847d0b4a8",
        "sha256": "299ba6c375b985937e4d996fce16b0a3aac3c2ab3a0ee9864d4acd5ac1f3fb86"
      },
      "downloads": -1,
      "filename": "qade-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d9e66fc24c4c136abac1c70847d0b4a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14728,
      "upload_time": "2022-04-10T13:59:10",
      "upload_time_iso_8601": "2022-04-10T13:59:10.688115Z",
      "url": "https://files.pythonhosted.org/packages/22/e3/2e1850f514acb26a452814ca1765a3b54a639bb8ff8baf797f9d17decfaa/qade-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a30c7e767e6ac6e8cbf9eb742897f30e502483465b88f1626d46025e652ec222",
        "md5": "b2db5af9dd5814d0261aff99629b1ccc",
        "sha256": "157099c7c81bcc39bb96875079231cf056b96bef982350f9b2fac03dcd4912fc"
      },
      "downloads": -1,
      "filename": "qade-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b2db5af9dd5814d0261aff99629b1ccc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15846,
      "upload_time": "2022-04-10T13:59:14",
      "upload_time_iso_8601": "2022-04-10T13:59:14.849566Z",
      "url": "https://files.pythonhosted.org/packages/a3/0c/7e767e6ac6e8cbf9eb742897f30e502483465b88f1626d46025e652ec222/qade-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}