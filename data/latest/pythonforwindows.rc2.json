{
  "info": {
    "author": "Hakril",
    "author_email": "pfw@hakril.net",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PythonForWindows\n\n[![Join the chat at https://gitter.im/PythonForWindows/general](https://badges.gitter.im/PythonForWindows/general.svg)](https://gitter.im/PythonForWindows/general)\n\nPythonForWindows (PFW) is a base of code aimed to make interaction with `Windows` (on X86/X64) easier (for both 32 and 64 bits Python).\nIts goal is to offer abstractions around some of the OS features in a (I hope) pythonic way.\nIt also tries to make the barrier between python and native execution thinner in both ways.\nThere is no external dependencies but it relies heavily on the `ctypes` module.\n\n\nSome of this code is clean (IMHO) and some parts are just a wreck that works for now.\nLet's say that the codebase evolves with my needs and my curiosity.\n\nComplete online documentation is available [here][ONLINE_DOC]\nYou can find some examples of code in the [samples directory][SAMPLE_DIR] or [online][ONLINE_SAMPLE].\n\nPythonForWindows is principally known for its ALPC-RPC Client (see [samples](http://hakril.github.io/PythonForWindows/build/html/sample.html#windows-rpc)).\n\n\nIf you have any issue, question or suggestion do not hesitate to join [the Gitter channel](https://gitter.im/PythonForWindows/general).\nI am always glad to have feedbacks from people using this project.\n\n## Installation\n\n\nPythonForWindows is available on [Pypi](https://pypi.org/project/PythonForWindows/) an this can be installed with\n\n``\npython -m pip install PythonForWindows\n``\n\nYou can also install PythonForWindows by cloning it and using the ``setup.py`` script:\n\n``\npython setup.py install\n``\n\n#### Python3\n\npython3 support is still in beta.\nAll the tests pass on master, but I did not test it heavily on real case.\nDo not hesitate report bugs and issues.\n\n## Overview\n\n### Processes / Threads\n\nPythonForWindows offers objects around processes and allows you to:\n\n- Retrieve basic process informations (pid, name, ppid, bitness, ...)\n- Perform basic interprocess operation (allocation, create thread, read/write memory)\n- Explore the PEB (Process Environment Block)\n- Execute `native` and `Python` code in the context of a process.\n\nI try my best to make those features available for every cross-bitness processes (`32 <-> 64` in both ways).\nThis involves relying on non-documented `Windows` functions/behaviours and also injecting code in the 64bits world of a `Syswow64` process.\nAll those operations are also available for the `current_process`.\n\nYou can also make some operation on threads (suspend/resume/wait/get(or set) context/ kill)\n\n```python\n>>> import windows\n>>> windows.current_process.bitness\n32\n>>> windows.current_process.token.integrity\nSECURITY_MANDATORY_MEDIUM_RID(0x2000)\n>>> proc = [p for p in windows.system.processes if p.name == \"notepad.exe\"][0]\n>>> proc\n<WinProcess \"notepad.exe\" pid 16520 at 0x544e410>\n>>> proc.bitness\n64\n>>> proc.peb.modules[:3]\n[<RemoteLoadedModule64 \"notepad.exe\" at 0x3671e90>, <RemoteLoadedModule64 \"ntdll.dll\" at 0x3671030>, <RemoteLoadedModule64 \"kernel32.dll\" at 0x3671080>]\n>>> k32 = proc.peb.modules[2]\n>>> hex(k32.pe.exports[\"CreateFileW\"])\n'0x7ffee6761550L'\n>>> proc.threads[0]\n<WinThread 17688 owner \"notepad.exe\" at 0x53b47f0>\n>>> hex(proc.threads[0].context.Rip)\n'0x7ffee68b54b0L'\n>>> proc.execute_python(\"import os\")\nTrue\n>>> proc.execute_python(\"exit(os.getpid() + 1)\")\n# execute_python raise if process died\nTraceback (most recent call last):\n...\nWindowsError: <WinProcess \"notepad.exe\" pid 16520 (DEAD) at 0x579f610> died during execution of python command\n>>> calc\n<WinProcess \"notepad.exe\" pid 16520 (DEAD) at 0x579f610>\n>>> calc.exit_code\n16521L\n```\n\n### System information\n\nInformation about the Windows computer running the script are available through the `windows.system` object.\n\n```python\n>>> windows.system\n<windows.winobject.system.System object at 0x03FEED10>\n>>> windows.system.bitness\n64\n>>> windows.system.computer_name\n'DESKTOP-VKUGISR'\n>>> windows.system.product_type\nVER_NT_WORKSTATION(0x1)\n>>> windows.system.version\n(10, 0)\n>>> windows.system.version_name\n'Windows 10'\n>>> windows.system.build_number\n'10.0.15063.608'\n\n# windows.system also contains dynamic lists about processes / threads / handles / ...\n>>> windows.system.handles[-2:]\n[<Handle value=<0x5cc> in process pid=14360>, <Handle value=<0x28e4> in process pid=14360>]\n>>> windows.system.processes[:2]\n[<WinProcess \"[System Process]\" pid 0 at 0x433f7d0>, <WinProcess \"System\" pid 4 at 0x433fd30>]\n>>> windows.system.logicaldrives[0]\n<LogicalDrive \"C:\\\" (DRIVE_FIXED)>\n>>> windows.system.services[23]\n<ServiceA \"Appinfo\" SERVICE_RUNNING(0x4)>\n\n```\n\n### IAT Hook\n\nThis codebase is born from my need to have IAT hooks implemented in Python.\nSo the features is present (See [online documentation][ONLINE_IATHOOK] about IAT hooks).\n\n\n### Winproxy\n\nA wrapper around some Windows functions. Arguments name and order are the same,\nbut some have default values and the functions raise exception on call error (I don't like `if` around all my call).\n\n```python\n>>> import windows\n>>> help(windows.winproxy.VirtualAlloc)\n# Help on function VirtualAlloc in module windows.winproxy:\n# VirtualAlloc(lpAddress=0, dwSize=NeededParameter, flAllocationType=MEM_COMMIT(0x1000L), flProtect=PAGE_EXECUTE_READWRITE(0x40L))\n#     Errcheck:\n#     raise WinproxyError if result is 0\n\n# Positional arguments\n>>> windows.winproxy.VirtualAlloc(0, 0x1000)\n34537472\n\n# Keyword arguments\n>>> windows.winproxy.VirtualAlloc(dwSize=0x1000)\n34603008\n\n# NeededParameter must be provided\n>>> windows.winproxy.VirtualAlloc()\n\"\"\"\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"windows\\winproxy.py\", line 264, in VirtualAlloc\n    return VirtualAlloc.ctypes_function(lpAddress, dwSize, flAllocationType, flProtect)\nFile \"windows\\winproxy.py\", line 130, in perform_call\n    raise TypeError(\"{0}: Missing Mandatory parameter <{1}>\".format(self.func_name, param_name))\nTypeError: VirtualAlloc: Missing Mandatory parameter <dwSize>\n\"\"\"\n\n# Error raises exception\n>>> windows.winproxy.VirtualAlloc(dwSize=0xffffffff)\n\"\"\"\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"windows\\winproxy.py\", line 264, in VirtualAlloc\n    return VirtualAlloc.ctypes_function(lpAddress, dwSize, flAllocationType, flProtect)\nFile \"windows\\winproxy.py\", line 133, in perform_call\n    return self._cprototyped(*args)\nFile \"windows\\winproxy.py\", line 59, in kernel32_error_check\n    raise WinproxyError(func_name)\nwindows.winproxy.error.WinproxyError: VirtualAlloc: [Error 87] The parameter is incorrect.\n\"\"\"\n```\n\n\n### Native execution\n\nTo make the barrier between `native` and `Python` code thinner,\nPythonForWindows allows you to create native function callable from Python (thanks to `ctypes`) and also embed\na simple x86/x64 assembler.\n\n```python\n>>> import windows.native_exec.simple_x86 as x86\n>>> code = x86.MultipleInstr()\n>>> code += x86.Mov(\"EAX\", 41)\n>>> code += x86.Inc(\"EAX\")\n>>> code += x86.Ret()\n>>> code.get_code()\n'\\xc7\\xc0)\\x00\\x00\\x00@\\xc3'\n# Create a function that takes no parameters and return an uint\n>>> f = windows.native_exec.create_function(code.get_code(), [ctypes.c_uint])\n>>> f()\n42L\n# Assemblers can also be used in a more standard way\n>>> x86.assemble(\"cmp edi, 0; jnz :end; mov eax, 1; label :end; ret\")\n'\\x81\\xff\\x00\\x00\\x00\\x00u\\x06\\xc7\\xc0\\x01\\x00\\x00\\x00\\xc3'\n```\n\n### Token / Security Descriptor\n\nObjects easing access to some information about ``Token`` and ``SecurityDescriptor`` are also available.\n\n```python\n>>> import windows.security\n>>> import windows.generated_def as gdef\n>>> tok = windows.current_process.token\n>>> tok\n<Token TokenId=0x6a2b4550 Type=TokenPrimary(0x1)>\n>>> tok.username\nu'hakril'\n>>> tok.type\ntagTOKEN_TYPE.TokenPrimary(0x1)\n>>> tok.integrity\nSECURITY_MANDATORY_MEDIUM_RID(0x2000)\n>>> tok.duplicate(type=gdef.TokenImpersonation, impersonation_level=gdef.SecurityIdentification)\n<Token TokenId=0x6a3532ce Type=TokenImpersonation(0x2) ImpersonationLevel=SecurityIdentification(0x1)>\n\n# Security Descriptor\n>>> sd = windows.security.SecurityDescriptor.from_filename(\"c:\\windows\\system32\\kernel32.dll\")\n>>> sd\n<SecurityDescriptor object at 0x054E3DF0>\n>>> windows.utils.lookup_sid(sd.owner)\n(u'NT SERVICE', u'TrustedInstaller')\n>>> sd.dacl\n<Acl count=6>\n>>> list(sd.dacl)\n[<AccessAllowedACE mask=2032127>, <AccessAllowedACE mask=1179817>, <AccessAllowedACE mask=1179817>, <AccessAllowedACE mask=1179817>, <AccessAllowedACE mask=1179817>, <AccessAllowedACE mask=1179817>]\n>>> sd.dacl[1].sid\n<PSID \"S-1-5-32-544\">\n```\n\n### Wintrust\n\nTo easily script some signature check script, PythonForWindows implements some wrapper functions around ``wintrust.dll``\n\n```python\n>>> import windows.wintrust\n>>> windows.wintrust.is_signed(r\"C:\\Windows\\system32\\ntdll.dll\")\nTrue\n>>> windows.wintrust.is_signed(r\"C:\\Windows\\system32\\python27.dll\")\nFalse\n>>> windows.wintrust.full_signature_information(r\"C:\\Windows\\system32\\ntdll.dll\")\nSignatureData(signed=True,\n    catalog=u'C:\\\\Windows\\\\system32\\\\CatRoot\\\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\\\Package_35_for_KB3128650~31bf3856ad364e35~amd64~~6.3.1.2.cat',\n    catalogsigned=True, additionalinfo=0L)\n>>> windows.wintrust.full_signature_information(r\"C:\\Windows\\system32\\python27.dll\")\nSignatureData(signed=False, catalog=None, catalogsigned=False, additionalinfo=TRUST_E_NOSIGNATURE(0x800b0100))\n```\n\n### WMI\n\nTo extract/play with even more information about the system, PythonForWindows is able to perform WMI request.\n\n```python\n>>> import windows\n>>> windows.system.wmi.select\n<bound method WmiNamespace.select of <WmiNamespace \"root\\cimv2\">>\n>>> windows.system.wmi.select(\"Win32_Process\")[:3]\n[<WmiObject instance of \"Win32_Process\">, <WmiObject instance of \"Win32_Process\">, <WmiObject instance of \"Win32_Process\">]# Get WMI data for current process\n>>> windows.system.wmi.select(\"Win32_Process\")[42][\"Name\"]\nu'svchost.exe'\n>>> wmi_cp = [p for p in windows.system.wmi.select(\"Win32_Process\") if int(p[\"Handle\"]) == windows.current_process.pid][0]\n>>> wmi_cp[\"CommandLine\"], wmi_cp[\"HandleCount\"]\n(u'\"C:\\\\Python27\\\\python.exe\"', 227)\n```\n\n### Registry\n\nThe project also contains some wrapping classes around `_winreg` for simpler use.\n\n```python\n>>> import windows\n>>> from windows.generated_def import KEY_WRITE, KEY_READ, REG_QWORD\n>>> registry = windows.system.registry\n>>> cuuser_software = registry(r'HKEY_CURRENT_USER\\Software')\n>>> cuuser_software\n<PyHKey \"HKEY_CURRENT_USER\\Software\">\n>>> cuuser_software.sam\nKEY_READ(0x20019)\n# Explore subkeys\n>>> cuuser_software.subkeys[:3]\n[<PyHKey \"HKEY_CURRENT_USER\\Software\\7-Zip\">, <PyHKey \"HKEY_CURRENT_USER\\Software\\AppDataLow\">, <PyHKey \"HKEY_CURRENT_USER\\Software\\Audacity\">]\n>>> tstkey = registry('HKEY_CURRENT_USER\\TestKey',  KEY_WRITE | KEY_READ)\n# Get / Set individual value\n>>> tstkey[\"VALUE\"] = 'a_value_for_my_key'\n>>> tstkey[\"VALUE\"]\nKeyValue(name='VALUE', value=u'a_value_for_my_key', type=1)\n>>> tstkey[\"MYQWORD\"] = (123456789987654321, REG_QWORD)  # Default is REG_DWORD for int/long\n>>> tstkey[\"MYQWORD\"]\nKeyValue(name='MYQWORD', value=123456789987654321L, type=11)\n# Explore Values\n>>> tstkey.values\n[KeyValue(name='MYQWORD', value=123456789987654321L, type=11), KeyValue(name='VALUE', value=u'a_value_for_my_key', type=1)]\n```\n\n### Object manager\n\nPythonForWindows uses the native Windows NT API to display some information about the object in the Object Manager's name space.\nJust like the well-known tools ``winobj.exe``\n\n```python\n>>> windows.system.object_manager.root\n<KernelObject \"\\\" (type=\"Directory\")>\n# The objects of type \"Directory\" can be acceded just like a dict\n>>> list(windows.system.object_manager.root)[:3]\n[u'PendingRenameMutex', u'ObjectTypes', u'storqosfltport']\n# Find an object by its path\n>>> windows.system.object_manager[\"KnownDLLs\\\\kernel32.dll\"]\n<KernelObject \"\\KnownDLLs\\kernel32.dll\" (type=\"Section\")>\n>>> k32 = windows.system.object_manager[\"KnownDLLs\\\\kernel32.dll\"]\n>>> k32.name, k32.fullname, k32.type\n('kernel32.dll', '\\\\KnownDLLs\\\\kernel32.dll', u'Section')\n# Follow SymbolicLink object\n>>> windows.system.object_manager[\"\\\\KnownDLLs\\\\KnownDLLPath\"]\n<KernelObject \"\\KnownDLLs\\KnownDLLPath\" (type=\"SymbolicLink\")>\n>>> windows.system.object_manager[\"\\\\KnownDLLs\\\\KnownDLLPath\"].target\nu'C:\\\\WINDOWS\\\\System32'\n```\n\n### Scheduled Task\n\nThe ``windows.system.task_scheduler`` object allows to query and create scheduled task.\n\n**This part is still in developpement and the API may evolve**\n\n```python\n>>> windows.system.task_scheduler\n<TaskService at 0x4774670>\n>>> windows.system.task_scheduler.root\n<TaskFolder \"\\\" at 0x4774710>\n>>> task = windows.system.task_scheduler.root.tasks[2]\n>>> task\n<Task \"DemoTask\" at 0x47748f0>\n>>> task.name\nu'DemoTask'\n# Explore task actions\n>>> task.definition.actions[1]\n<ExecAction at 0x4774800>\n>>> task.definition.actions[1].path\nu'c:\\\\windows\\\\python\\\\python.exe'\n>>> task.definition.actions[1].arguments\nu'yolo.py --test'\n```\n\n### Event logs\n\nThe ``windows.system.event_log`` object allows to query event logs.\n\n**This part is still in developpement and the API may evolve**\n\n```python\n>>> windows.system.event_log\n<windows.winobject.event_log.EvtlogManager object at 0x04A78270>\n# Find a channel by its name\n>>> chan = windows.system.event_log[\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\"]\n>>> chan\n<EvtChannel \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\">\n# Open .evtx files\n>>> windows.system.event_log[\"test.evtx\"]\n<EvtFile \"test.evtx\">\n# Query a channel for all events\n>>> chan.query().all()[:2]\n[<EvtEvent id=\"2004\" time=\"2018-07-12 07:44:08.081504\">, <EvtEvent id=\"2006\" time=\"2018-07-12 07:57:59.806938\">]\n# Query a channel for some ids\n>>> chan.query(ids=2004).all()[:2]\n[<EvtEvent id=\"2004\" time=\"2018-07-12 07:44:08.081504\">, <EvtEvent id=\"2004\" time=\"2018-07-12 07:57:59.815156\">]\n# Query a channel via XPATH\n>>> evt = chan.query(\"Event/EventData[Data='Netflix']\").all()[0]\n# Explore event information\n>>> evt\n<EvtEvent id=\"2006\" time=\"2018-07-17 10:32:39.160423\">\n>>> evt.data\n{u'ModifyingUser': 69828304, u'RuleName': u'Netflix', u'ModifyingApplication': ...}\n```\n\n### ALPC-RPC\n\n#### ALPC\n\nClasses around **A**dvanced **L**ocal **P**rocedure **C**all (**ALPC**) syscalls allows to simply\nwrite client and server able to send **ALPC** messages.\n\n```python\n>>> import windows.alpc\n# Test server juste reply to each message with \"REQUEST '{msg_data}' RECEIVED\"\n>>> client = windows.alpc.AlpcClient(r\"\\RPC Control\\PythonForWindowsTESTPORT\")\n>>> response = client.send_receive(\"Hello world !\")\n>>> response\n<windows.alpc.AlpcMessage object at 0x04C0D5D0>\n>>> response.data\n\"REQUEST 'Hello world !' RECEIVED\"\n```\n\nFull client/server code for this example is available is the [ALPC samples][ONLINE_SAMPLE_ALPC] along with a more complex example.\n\n\n#### RPC\n\nAn RPC-Client based using **ALPC** communication is also integred\n\n```python\n# Server (port ALPC '\\RPC Control\\HelloRpc') offers:\n# Interface '41414141-4242-4343-4444-45464748494a' version 1.0\n#   Method 1 -> int Add(int a, int b) -> return a + b\n# This Test server is a real RPC Server using rpcrt4.dll and compiled with VS2015.\n\n>>> import windows.rpc\n>>> from windows.rpc import ndr\n>>> client = windows.rpc.RPCClient(r\"\\RPC Control\\HelloRpc\")\n>>> client\n<windows.rpc.client.RPCClient object at 0x0411E130>\n>>> iid = client.bind(\"41414141-4242-4343-4444-45464748494a\")\n>>> ndr_params = ndr.make_parameters([ndr.NdrLong] * 2)\n# NDR pack + Make RPC call to method 1.\n>>> resp = client.call(iid, 1, ndr_params.pack([41414141, 1010101]))\n# Unpack the NDR response\n>>> result = ndr.NdrLong.unpack(ndr.NdrStream(resp))\n>>> result\n42424242\n```\n\nA sample with the **U**ser **A**ccount **C**ontrol (**UAC**) and one with `lsasrv.dll` are available in the [RPC samples][ONLINE_SAMPLE_RPC].\n\n\n### Debugger\n\nPythonForWindows provides a standard debugger to debug other processes.\n\n```python\nimport windows\nimport windows.debug\nimport windows.test\nimport windows.native_exec.simple_x86 as x86\nimport windows.generated_def as gdef\n\nfrom windows.test import pop_proc_32\n\nclass MyDebugger(windows.debug.Debugger):\n    def on_exception(self, exception):\n        code = exception.ExceptionRecord.ExceptionCode\n        addr = exception.ExceptionRecord.ExceptionAddress\n        print(\"Got exception {0} at 0x{1:x}\".format(code, addr))\n        if code == gdef.EXCEPTION_ACCESS_VIOLATION:\n            print(\"Access Violation: kill target process\")\n            self.current_process.exit()\n\ncalc = windows.test.pop_proc_32(dwCreationFlags=gdef.DEBUG_PROCESS)\nd = MyDebugger(calc)\ncalc.execute(x86.assemble(\"int3; mov [0x42424242], EAX; ret\"))\nd.loop()\n\n## Ouput ##\nGot exception EXCEPTION_BREAKPOINT(0x80000003) at 0x77e13c7d\nGot exception EXCEPTION_BREAKPOINT(0x80000003) at 0x230000\nGot exception EXCEPTION_ACCESS_VIOLATION(0xc0000005) at 0x230001\nAccess Violation: kill target process\n```\n\nThe debugger handles\n\n* Standard breakpoint ``int3``\n* Hardware Execution breakpoint ``DrX``\n* Memory breakpoint ``virtual protect``\n\n\n#### LocalDebugger\n\nYou can also debug your own process (or debug a process by injection) via the LocalDebugger.\n\nThe LocalDebugger is an abstraction around Vectored Exception Handler (VEH)\n\n```python\nimport windows\nfrom windows.generated_def.winstructs import *\nimport windows.native_exec.simple_x86 as x86\n\nclass SingleSteppingDebugger(windows.debug.LocalDebugger):\n    SINGLE_STEP_COUNT = 4\n    def on_exception(self, exc):\n        code = self.get_exception_code()\n        context = self.get_exception_context()\n        print(\"EXCEPTION !!!! Got a {0} at 0x{1:x}\".format(code, context.pc))\n        self.SINGLE_STEP_COUNT -= 1\n        if self.SINGLE_STEP_COUNT:\n            return self.single_step()\n        return EXCEPTION_CONTINUE_EXECUTION\n\nclass RewriteBreakpoint(windows.debug.HXBreakpoint):\n    def trigger(self, dbg, exc):\n        context = dbg.get_exception_context()\n        print(\"GOT AN HXBP at 0x{0:x}\".format(context.pc))\n        # Rewrite the infinite loop with 2 nop\n        windows.current_process.write_memory(self.addr, \"\\x90\\x90\")\n        # Ask for a single stepping\n        return dbg.single_step()\n\n\nd = SingleSteppingDebugger()\n# Infinite loop + nop + ret\ncode = x86.assemble(\"label :begin; jmp :begin; nop; ret\")\nfunc = windows.native_exec.create_function(code, [PVOID])\nprint(\"Code addr = 0x{0:x}\".format(func.code_addr))\n# Create a thread that will infinite loop\nt = windows.current_process.create_thread(func.code_addr, 0)\n# Add a breakpoint on the infinite loop\nd.add_bp(RewriteBreakpoint(func.code_addr))\nt.wait()\nprint(\"Done!\")\n\n## Output ##\n\nCode addr = 0x6a0002\nGOT AN HXBP at 0x6a0002\nEXCEPTION !!!! Got a EXCEPTION_SINGLE_STEP(0x80000004) at 0x6a0003\nEXCEPTION !!!! Got a EXCEPTION_SINGLE_STEP(0x80000004) at 0x6a0004\nEXCEPTION !!!! Got a EXCEPTION_SINGLE_STEP(0x80000004) at 0x6a0005\nEXCEPTION !!!! Got a EXCEPTION_SINGLE_STEP(0x80000004) at 0x770c7c04\nDone!\n\n```\n\nThe local debugger handles\n\n* Standard breakpoint ``int3``\n* Hardware Execution breakpoint ``DrX``\n\n### Other stuff (see doc / samples)\n\n- Network\n- COM\n\n## Acknowledgments\n\n* clmntb for his initial work on ``windows.security``\n\n\n[LKD_GITHUB]: https://github.com/sogeti-esec-lab/LKD/\n[SAMPLE_DIR]: https://github.com/hakril/PythonForWindows/tree/master/samples\n[ONLINE_DOC]: http://hakril.github.io/PythonForWindows/\n[ONLINE_SAMPLE]: http://hakril.github.io/PythonForWindows/build/html/sample.html\n[ONLINE_SAMPLE_ALPC]: http://hakril.github.io/PythonForWindows/build/html/sample.html#windows-alpc\n[ONLINE_SAMPLE_RPC]: http://hakril.github.io/PythonForWindows/build/html/sample.html#windows-rpc\n[ONLINE_IATHOOK]: http://hakril.github.io/PythonForWindows/build/html/iat_hook.html\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hakril/PythonForWindows",
    "keywords": "windows python",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PythonForWindows",
    "package_url": "https://pypi.org/project/PythonForWindows/",
    "platform": "",
    "project_url": "https://pypi.org/project/PythonForWindows/",
    "project_urls": {
      "Homepage": "https://github.com/hakril/PythonForWindows"
    },
    "release_url": "https://pypi.org/project/PythonForWindows/0.6.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A codebase aimed to make interaction with Windows and native execution easier",
    "version": "0.6.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11499601,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "391110d1c0ffe760ff1e1de84425c01e248838edabab9fd0e695adaf67756c17",
          "md5": "921f00e88863d10eefe8e2ccc004587a",
          "sha256": "03ceb9e6eba1adf9bfb5c89b266a6775b1425edb2c3a0018d879aff16a16ecf2"
        },
        "downloads": -1,
        "filename": "PythonForWindows-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "921f00e88863d10eefe8e2ccc004587a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 677604,
        "upload_time": "2020-07-23T07:49:29",
        "upload_time_iso_8601": "2020-07-23T07:49:29.298068Z",
        "url": "https://files.pythonhosted.org/packages/39/11/10d1c0ffe760ff1e1de84425c01e248838edabab9fd0e695adaf67756c17/PythonForWindows-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9e96df3c4dc8f9df904fe07330ec6d0afe86ee374813171a6ad024dbce92062",
          "md5": "2f7f0cbe16452a506650c3f41a6a0e6c",
          "sha256": "b26cfe3b7081efc18f24b4bd8feef2191c78fbfd413e5e5e342570dbc19aca57"
        },
        "downloads": -1,
        "filename": "PythonForWindows-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f7f0cbe16452a506650c3f41a6a0e6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 635418,
        "upload_time": "2020-07-23T07:49:32",
        "upload_time_iso_8601": "2020-07-23T07:49:32.044369Z",
        "url": "https://files.pythonhosted.org/packages/b9/e9/6df3c4dc8f9df904fe07330ec6d0afe86ee374813171a6ad024dbce92062/PythonForWindows-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37ca47bf9477820c5a86936386b5c1534651074f0586ea1bbc401f6d98f6a27c",
          "md5": "4e87618fde908d66e245e2942c41137b",
          "sha256": "b3c2be7a3964d2f694a938c1a59101afc7cd11db31252b6dcb136fd4ecebdd24"
        },
        "downloads": -1,
        "filename": "PythonForWindows-0.6.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e87618fde908d66e245e2942c41137b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 675967,
        "upload_time": "2021-09-20T15:58:48",
        "upload_time_iso_8601": "2021-09-20T15:58:48.978461Z",
        "url": "https://files.pythonhosted.org/packages/37/ca/47bf9477820c5a86936386b5c1534651074f0586ea1bbc401f6d98f6a27c/PythonForWindows-0.6.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5e464f414f17e7188b20a05d4715e80edd3971303e4e31d723d60f19b8412b9",
          "md5": "d93d72a4cd2195b386cc566cef35e1b8",
          "sha256": "da1ea2449866d5fb0f0c01be061b1d0f6d366ec710f892aeb5226a9c1bf4bd9c"
        },
        "downloads": -1,
        "filename": "PythonForWindows-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d93d72a4cd2195b386cc566cef35e1b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 634530,
        "upload_time": "2021-09-20T15:58:51",
        "upload_time_iso_8601": "2021-09-20T15:58:51.252102Z",
        "url": "https://files.pythonhosted.org/packages/e5/e4/64f414f17e7188b20a05d4715e80edd3971303e4e31d723d60f19b8412b9/PythonForWindows-0.6.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37ca47bf9477820c5a86936386b5c1534651074f0586ea1bbc401f6d98f6a27c",
        "md5": "4e87618fde908d66e245e2942c41137b",
        "sha256": "b3c2be7a3964d2f694a938c1a59101afc7cd11db31252b6dcb136fd4ecebdd24"
      },
      "downloads": -1,
      "filename": "PythonForWindows-0.6.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e87618fde908d66e245e2942c41137b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 675967,
      "upload_time": "2021-09-20T15:58:48",
      "upload_time_iso_8601": "2021-09-20T15:58:48.978461Z",
      "url": "https://files.pythonhosted.org/packages/37/ca/47bf9477820c5a86936386b5c1534651074f0586ea1bbc401f6d98f6a27c/PythonForWindows-0.6.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5e464f414f17e7188b20a05d4715e80edd3971303e4e31d723d60f19b8412b9",
        "md5": "d93d72a4cd2195b386cc566cef35e1b8",
        "sha256": "da1ea2449866d5fb0f0c01be061b1d0f6d366ec710f892aeb5226a9c1bf4bd9c"
      },
      "downloads": -1,
      "filename": "PythonForWindows-0.6.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d93d72a4cd2195b386cc566cef35e1b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 634530,
      "upload_time": "2021-09-20T15:58:51",
      "upload_time_iso_8601": "2021-09-20T15:58:51.252102Z",
      "url": "https://files.pythonhosted.org/packages/e5/e4/64f414f17e7188b20a05d4715e80edd3971303e4e31d723d60f19b8412b9/PythonForWindows-0.6.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}