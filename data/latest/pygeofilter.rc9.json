{
  "info": {
    "author": "Fabian Schindler",
    "author_email": "fabian.schindler@eox.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# pygeofilter\npygeofilter is a pure Python parser implementation of OGC filtering standards\n\n[![PyPI version](https://badge.fury.io/py/pygeofilter.svg)](https://badge.fury.io/py/pygeofilter)\n[![Build Status](https://github.com/geopython/pygeofilter/workflows/build%20%E2%9A%99%EF%B8%8F/badge.svg)](https://github.com/geopython/pygeofilter/actions)\n[![Documentation Status](https://readthedocs.org/projects/pygeofilter/badge/?version=latest)](https://pygeofilter.readthedocs.io/en/latest/?badge=latest)\n\n\n## Features\n\n* Parsing of several filter encoding standards\n    * [CQL as defined in CSW 2.0](https://portal.ogc.org/files/?artifact_id=20555)\n    * [CQL JSON as defined in OGC API - Features - Part 3: Filtering and the Common Query Language (CQL)](https://portal.ogc.org/files/96288#cql-json-schema)\n    * [JSON Filter Expressions (JFE)](https://github.com/tschaub/ogcapi-features/tree/json-array-expression/extensions/cql/jfe)\n    * Soon:\n        * [CQL Text as defined in OGC API - Features - Part 3: Filtering and the Common Query Language (CQL)](https://portal.ogc.org/files/96288#cql-bnf)\n        * [FES](http://docs.opengeospatial.org/is/09-026r2/09-026r2.html)\n* Several backends included\n    * [Django](https://www.djangoproject.com/)\n    * [SQLAlchemy](https://www.sqlalchemy.org/)\n    * [(Geo)Pandas](https://pandas.pydata.org/)\n    * Native Python objects\n\n\n## Installation\n\nThe package can be installed via PIP:\n\n```bash\npip install pygeofilter\n```\n\nSome features require additional dependencies. This currently only affects the backends. To install these, the features have to be listed:\n\n```bash\n# for the Django backend\npip install pygeofilter[backend-django]\n\n# for the sqlalchemy backend\npip install pygeofilter[backend-sqlalchemy]\n\n# for the native backend\npip install pygeofilter[backend-native]\n```\n\n## Usage\n\npygeofilter can be used on various levels. It provides parsers for various filtering languages, such as ECQL or CQL-JSON. Each parser lives in its own sub-package:\n\n```python\n>>> from pygeofilter.parsers.ecql import parse as parse_ecql\n>>> filters = parse_ecql(filter_expression)\n>>> from pygeofilter.parsers.cql_json import parse as parse_json\n>>> filters = parse_json(filter_expression)\n```\n\nEach parser creates an abstract syntax tree (AST) representation of that filter expression and thus unifies all possible languages to a single common denominator. All possible nodes are defined as classes in the `pygeofilter.ast` module.\n\n### Inspection\n\nThe easiest way to inspect the resulting AST is to use the `get_repr` function, which returns a\nnice string representation of what was parsed:\n\n```python\n>>> filters = pygeofilter.parsers.ecql.parse('id = 10')\n>>> print(pygeofilter.get_repr(ast))\nATTRIBUTE id = LITERAL 10.0\n>>>\n>>>\n>>> filter_expr = '(number BETWEEN 5 AND 10 AND string NOT LIKE \\'%B\\') OR INTERSECTS(geometry, LINESTRING(0 0, 1 1))'\n>>> print(pygeofilter.ast.get_repr(pygeofilter.parse(filter_expr)))\n(\n    (\n            ATTRIBUTE number BETWEEN 5 AND 10\n    ) AND (\n            ATTRIBUTE string NOT LIKE '%B'\n    )\n) OR (\n    INTERSECTS(ATTRIBUTE geometry, Geometry(geometry={'type': 'LineString', 'coordinates': ((0.0, 0.0), (1.0, 1.0))}))\n)\n```\n\n### Evaluation\n\nA parsed AST can then be evaluated and transformed into filtering mechanisms in the required context. Usually this is a language such as SQL or an object-relational mapper (ORM) interfacing a data store of some kind.\n\nThere are a number of pre-defined backends available, where parsed expressions can be applied. For the moment this includes:\n\n* Django\n* sqlalchemy\n* (Geo)Pandas\n* Pure Python object filtering\n\nThe usage of those are described in their own documentation.\n\npygeofilter provides mechanisms to help building such an evaluator (the included backends use them as well). The `Evaluator` class allows to conveniently walk through an AST depth-first and build the filters for the API in question. Only handled node classes are evaluated, unsupported ones will raise an exception.\n\nConsider this example:\n\n```python\n\nfrom pygeofilter import ast\nfrom pygeofilter.backends.evaluator import Evaluator, handle\nfrom myapi import filters   # <- this is where the filters are created.\n                            # of course, this can also be done in the\n                            # evaluator itself\n\n# Evaluators must derive from the base class `Evaluator` to work\nclass MyAPIEvaluator(Evaluator):\n    # you can use any constructor as you need\n    def __init__(self, field_mapping=None, mapping_choices=None):\n        self.field_mapping = field_mapping\n        self.mapping_choices = mapping_choices\n\n    # specify the handled classes in the `handle` decorator to mark\n    # this function as the handler for that node class(es)\n    @handle(ast.Not)\n    def not_(self, node, sub):\n        return filters.negate(sub)\n\n    # multiple classes can be declared for the same handler function\n    @handle(ast.And, ast.Or)\n    def combination(self, node, lhs, rhs):\n        return filters.combine((lhs, rhs), node.op.value)\n\n    # handle all sub-classes, like ast.Equal, ast.NotEqual,\n    # ast.LessThan, ast.GreaterThan, ...\n    @handle(ast.Comparison, subclasses=True)\n    def comparison(self, node, lhs, rhs):\n        return filters.compare(\n            lhs,\n            rhs,\n            node.op.value,\n            self.mapping_choices\n        )\n\n    @handle(ast.Between)\n    def between(self, node, lhs, low, high):\n        return filters.between(\n            lhs,\n            low,\n            high,\n            node.not_\n        )\n\n    @handle(ast.Like)\n    def like(self, node, lhs):\n        return filters.like(\n            lhs,\n            node.pattern,\n            node.nocase,\n            node.not_,\n            self.mapping_choices\n        )\n\n    @handle(ast.In)\n    def in_(self, node, lhs, *options):\n        return filters.contains(\n            lhs,\n            options,\n            node.not_,\n            self.mapping_choices\n        )\n\n    def adopt(self, node, *sub_args):\n        # a \"catch-all\" function for node classes that are not\n        # handled elsewhere. Use with caution and raise exceptions\n        # yourself when a node class is not supported.\n        ...\n\n    # ...further ast handlings removed for brevity\n```\n\n## Testing\n\nFor testing, several requirements must be satisfied. These can be installed, via pip:\n\n```bash\npip install -r requirements-dev.txt\npip install -r requirements-test.txt\n```\n\nThe functionality can be tested using `pytest`.\n\n```bash\npython -m pytest\n```\n\n### Docker\n\nTo execute tests in Docker:\n\n```\ndocker build -t pygeofilter/test -f Dockerfile-3.9 .\ndocker run --rm pygeofilter/test\n```\n\n## Backends\n\nThe following backends are shipped with `pygeofilter`. Some require additional dependencies, refer to the [installation](#installation) section for further details.\n\n### Django\n\nFor Django there is a default backend implementation, where all the filters are translated to the\nDjango ORM. In order to use this integration, we need two dictionaries, one mapping the available\nfields to the Django model fields, and one to map the fields that use `choices`. Consider the\nfollowing example models:\n\n```python\nfrom django.contrib.gis.db import models\n\n\noptional = dict(null=True, blank=True)\n\nclass Record(models.Model):\n    identifier = models.CharField(max_length=256, unique=True, null=False)\n    geometry = models.GeometryField()\n\n    float_attribute = models.FloatField(**optional)\n    int_attribute = models.IntegerField(**optional)\n    str_attribute = models.CharField(max_length=256, **optional)\n    datetime_attribute = models.DateTimeField(**optional)\n    choice_attribute = models.PositiveSmallIntegerField(choices=[\n                                                                 (1, 'ASCENDING'),\n                                                                 (2, 'DESCENDING'),],\n                                                        **optional)\n\n\nclass RecordMeta(models.Model):\n    record = models.ForeignKey(Record, on_delete=models.CASCADE, related_name='record_metas')\n\n    float_meta_attribute = models.FloatField(**optional)\n    int_meta_attribute = models.IntegerField(**optional)\n    str_meta_attribute = models.CharField(max_length=256, **optional)\n    datetime_meta_attribute = models.DateTimeField(**optional)\n    choice_meta_attribute = models.PositiveSmallIntegerField(choices=[\n                                                                      (1, 'X'),\n                                                                      (2, 'Y'),\n                                                                      (3, 'Z')],\n                                                             **optional)\n```\n\nNow we can specify the field mappings and mapping choices to be used when applying the filters:\n\n```python\nFIELD_MAPPING = {\n    'identifier': 'identifier',\n    'geometry': 'geometry',\n    'floatAttribute': 'float_attribute',\n    'intAttribute': 'int_attribute',\n    'strAttribute': 'str_attribute',\n    'datetimeAttribute': 'datetime_attribute',\n    'choiceAttribute': 'choice_attribute',\n\n    # meta fields\n    'floatMetaAttribute': 'record_metas__float_meta_attribute',\n    'intMetaAttribute': 'record_metas__int_meta_attribute',\n    'strMetaAttribute': 'record_metas__str_meta_attribute',\n    'datetimeMetaAttribute': 'record_metas__datetime_meta_attribute',\n    'choiceMetaAttribute': 'record_metas__choice_meta_attribute',\n}\n\nMAPPING_CHOICES = {\n    'choiceAttribute': dict(Record._meta.get_field('choice_attribute').choices),\n    'choiceMetaAttribute': dict(RecordMeta._meta.get_field('choice_meta_attribute').choices),\n}\n```\n\nFinally we are able to connect the CQL AST to the Django database models. We also provide factory\nfunctions to parse the timestamps, durations, geometries and envelopes, so that they can be used\nwith the ORM layer:\n\n```python\nfrom pygeofilter.backends.django import to_filter\nfrom pygeofilter.parsers.ecql import parse\n\ncql_expr = 'strMetaAttribute LIKE \\'%parent%\\' AND datetimeAttribute BEFORE 2000-01-01T00:00:01Z'\n\nast = parse(cql_expr)\nfilters = to_filter(ast, mapping, mapping_choices)\n\nqs = Record.objects.filter(**filters)\n```\n\n### SQL\n\n`pygeofilter` provides a rudimentary way to create an SQL `WHERE` clause from an AST. The following example shows this usage in conjunction with the OGR `ExecuteSQL` function:\n\n```python\nfrom osgeo import ogr\nfrom pygeofilter.backends.sql import to_sql_where\nfrom pygeofilter.parsers.ecql import parse\n\n\nFIELD_MAPPING = {\n    'str_attr': 'str_attr',\n    'maybe_str_attr': 'maybe_str_attr',\n    'int_attr': 'int_attr',\n    'float_attr': 'float_attr',\n    'date_attr': 'date_attr',\n    'datetime_attr': 'datetime_attr',\n    'point_attr': 'GEOMETRY',\n}\n\nFUNCTION_MAP = {\n    'sin': 'sin'\n}\n\n# parse the expression\nast = parse('int_attr > 6')\n\n# open an OGR DataSource\ndata = ogr.Open(...)\n\n# create the WHERE clause, field and function mappings must be provided\nwhere = to_sql_where(ast, FIELD_MAPPING, FUNCTION_MAP)\n\n# filter the DataSource to get a result Layer\nlayer = data.ExecuteSQL(f\"\"\"\n    SELECT id, str_attr, maybe_str_attr, int_attr, float_attr, date_attr, datetime_attr, GEOMETRY\n    FROM layer\n    WHERE {where}\n\"\"\", None, \"SQLite\")\n```\n\nNote that it is vital to specify the `SQLite` dialect as this is the one used internally.\n\n:warning: Input values are *not* sanitized/separated from the generated SQL text. This is due to the compatibility with the OGR API not allowing to separate the SQL from the arguments.\n\n\n### Optimization\n\nThis is a special kind of backend, as the result of the AST evaluation is actually a new AST. The purpose of this backend is to eliminate static branches of the AST, potentially reducing the cost of an actual evaluation for filtering values.\n\nWhat parts of an AST can be optimized:\n\n- Arithmetic operations of purely static operands\n- All predicates (spatial, temporal, array, `like`, `between`, `in`) if all of the operands are already static\n- Functions, when passed in a special lookup table and all arguments are static\n- `And` and `Or` combinators can be eliminated if either branch can be predicted\n\nWhat cannot be optimized are branches that contain references to attributes or functions not passed in the dictionary.\n\nThe following example shows how a static computation can be optimized to a static value, replacing the whole branch of the AST:\n\n```python\n>>> import math\n>>> from pygeofilter import ast\n>>> from pygeofilter.parsers.ecql import parse\n>>> from pygeofilter.backends.optimize import optimize\n>>>\n>>> root = parse('attr < sin(3.7) - 5')\n>>> optimized_root = optimize(root, {'sin': math.sin})\n>>> print(ast.get_repr(root))\nATTRIBUTE attr < (\n    (\n            sin (3.7)\n    ) - 5\n)\n>>> print(ast.get_repr(optimized_root))\nATTRIBUTE attr < -5.529836140908493\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/geopython/pygeofilter",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygeofilter",
    "package_url": "https://pypi.org/project/pygeofilter/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygeofilter/",
    "project_urls": {
      "Homepage": "https://github.com/geopython/pygeofilter"
    },
    "release_url": "https://pypi.org/project/pygeofilter/0.2.1/",
    "requires_dist": [
      "dateparser",
      "lark (<1.0)",
      "pygeoif (>=1.0.0)",
      "dataclasses ; python_version < \"3.7\"",
      "django ; extra == 'backend-django'",
      "elasticsearch ; extra == 'backend-elasticsearch'",
      "elasticsearch-dsl ; extra == 'backend-elasticsearch'",
      "shapely ; extra == 'backend-native'",
      "geoalchemy2 ; extra == 'backend-sqlalchemy'",
      "sqlalchemy (<2.0.0) ; extra == 'backend-sqlalchemy'",
      "pygml (>=0.2) ; extra == 'fes'"
    ],
    "requires_python": "",
    "summary": "pygeofilter is a pure Python parser implementation of OGC filtering standards",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16890714,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7dbba4315363b3a9dcefa8eb24df2bd24656e506b1e4c7c07625f6295eefeda",
          "md5": "08a9d6901f22d64c12a6a79c6642c641",
          "sha256": "9e5db6afcaf843ee809a601534d16307ca1006c3866412ea7056e8d465b9898f"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08a9d6901f22d64c12a6a79c6642c641",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43245,
        "upload_time": "2021-06-23T15:33:16",
        "upload_time_iso_8601": "2021-06-23T15:33:16.645399Z",
        "url": "https://files.pythonhosted.org/packages/b7/db/ba4315363b3a9dcefa8eb24df2bd24656e506b1e4c7c07625f6295eefeda/pygeofilter-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70bbba891b611faa18deb06c4c042f9f82fb8450071eece95d4d9ae546895643",
          "md5": "9da8af5b88f83fd7a95bf3c176af4c4c",
          "sha256": "02631df53605d24ecad786699c10c9677a2a6ebeac838f9aa2e5d37c97fdf9ec"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9da8af5b88f83fd7a95bf3c176af4c4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33464,
        "upload_time": "2021-06-23T15:33:18",
        "upload_time_iso_8601": "2021-06-23T15:33:18.245056Z",
        "url": "https://files.pythonhosted.org/packages/70/bb/ba891b611faa18deb06c4c042f9f82fb8450071eece95d4d9ae546895643/pygeofilter-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deb8315df8480174a3f6ba9bb684e354120a66c2dccabcfcc8b1a43d0e408881",
          "md5": "453ba0f5d3f455c3df42501109123a4e",
          "sha256": "697ed6d20f7956685037a80089a04afa847d4d29cc21f3c732a78fc1d7ccf250"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "453ba0f5d3f455c3df42501109123a4e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 50732,
        "upload_time": "2021-07-22T21:06:44",
        "upload_time_iso_8601": "2021-07-22T21:06:44.119776Z",
        "url": "https://files.pythonhosted.org/packages/de/b8/315df8480174a3f6ba9bb684e354120a66c2dccabcfcc8b1a43d0e408881/pygeofilter-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76822d4363ac8c8bccf043d2c4d238c75b16abeabc0560796091aeb3fe03dea5",
          "md5": "65626b1960440ec6d4b7beb7b227a7c4",
          "sha256": "3da7342b8c3b260564bd2fc25a72bf23f396946293d87da601dbbccb32bd8fdc"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "65626b1960440ec6d4b7beb7b227a7c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37414,
        "upload_time": "2021-07-22T21:06:46",
        "upload_time_iso_8601": "2021-07-22T21:06:46.419019Z",
        "url": "https://files.pythonhosted.org/packages/76/82/2d4363ac8c8bccf043d2c4d238c75b16abeabc0560796091aeb3fe03dea5/pygeofilter-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c6c9576f3666474b6f77cde3bf6cc9a6f1c9cbbfde65055695384eeaf6920e5",
          "md5": "881b3e779283e22d12719a2088dd1fab",
          "sha256": "88b920f4a1ede6b1cf0945b69d25ab5f3df3403a46a737bbcb7f237f615ff631"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "881b3e779283e22d12719a2088dd1fab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60509,
        "upload_time": "2021-10-12T05:42:58",
        "upload_time_iso_8601": "2021-10-12T05:42:58.690479Z",
        "url": "https://files.pythonhosted.org/packages/8c/6c/9576f3666474b6f77cde3bf6cc9a6f1c9cbbfde65055695384eeaf6920e5/pygeofilter-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be9f025fa3b5993966b7ad9767ce4c48f15bc43f645bd80a6ca80cfad4411d62",
          "md5": "5903dcd6f2c64ba51cd1f0cfe32efe6f",
          "sha256": "04b0a60ffeda28b1bdbfa5b6efba747463859aae0ea29cbcd012f17ac1a6f6a0"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5903dcd6f2c64ba51cd1f0cfe32efe6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43746,
        "upload_time": "2021-10-12T05:43:00",
        "upload_time_iso_8601": "2021-10-12T05:43:00.583945Z",
        "url": "https://files.pythonhosted.org/packages/be/9f/025fa3b5993966b7ad9767ce4c48f15bc43f645bd80a6ca80cfad4411d62/pygeofilter-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "231141e164e09caeb35d36c461b2529e6aaae60b108cf837ed82e393a9127123",
          "md5": "4b7fb8253ee7c7a18026878e33adb150",
          "sha256": "440909d511878dd9ca8c87da609059ea5cfe38afa85dcccf69612078084aecfb"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b7fb8253ee7c7a18026878e33adb150",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60507,
        "upload_time": "2021-10-13T11:23:02",
        "upload_time_iso_8601": "2021-10-13T11:23:02.660883Z",
        "url": "https://files.pythonhosted.org/packages/23/11/41e164e09caeb35d36c461b2529e6aaae60b108cf837ed82e393a9127123/pygeofilter-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4672949a54f8e13e19d72856ae7dc3154c367959c171e73c1ad5cad8b1bb1fbe",
          "md5": "c8901e4032f4315200bffe7e1d21df80",
          "sha256": "b6e13c966d179fc5173992a5527f9637f692f4831ffb870c65b688359f876bff"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c8901e4032f4315200bffe7e1d21df80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43777,
        "upload_time": "2021-10-13T11:23:04",
        "upload_time_iso_8601": "2021-10-13T11:23:04.912888Z",
        "url": "https://files.pythonhosted.org/packages/46/72/949a54f8e13e19d72856ae7dc3154c367959c171e73c1ad5cad8b1bb1fbe/pygeofilter-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53cee97d22d84823196cc101c0a8ffcb709de127a1689fe237c6eb2a71af20f5",
          "md5": "cde6aed7bdc1b864a5bf46da512e8cf4",
          "sha256": "f7809235b6db17c8548798615f3a30716621ebb7b1e060df0a557e637819ed32"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cde6aed7bdc1b864a5bf46da512e8cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60508,
        "upload_time": "2021-10-13T11:36:27",
        "upload_time_iso_8601": "2021-10-13T11:36:27.436883Z",
        "url": "https://files.pythonhosted.org/packages/53/ce/e97d22d84823196cc101c0a8ffcb709de127a1689fe237c6eb2a71af20f5/pygeofilter-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e84a8b15c15169182c6844be62c6896d51f3503fe0f0c0b8957282aa5142284f",
          "md5": "8e54fbef6d29c6246b13e15fa6864169",
          "sha256": "a74a0e4cdbe2e70c79eee8fe798c013c7dda0f4fa3e18d686e7ada1b4fa8e062"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8e54fbef6d29c6246b13e15fa6864169",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43756,
        "upload_time": "2021-10-13T11:36:29",
        "upload_time_iso_8601": "2021-10-13T11:36:29.540887Z",
        "url": "https://files.pythonhosted.org/packages/e8/4a/8b15c15169182c6844be62c6896d51f3503fe0f0c0b8957282aa5142284f/pygeofilter-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42836e0513956f0507ba5a6d35382fc31a24c475e9ad7a67bbee4ecc8fa5a6fd",
          "md5": "13a3907d619b4d87acd704254e8a32d3",
          "sha256": "7441812afc0354a0b214cd090f84b21a829fa5d10c923025503eac54bb485652"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13a3907d619b4d87acd704254e8a32d3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63261,
        "upload_time": "2021-11-18T20:49:57",
        "upload_time_iso_8601": "2021-11-18T20:49:57.042358Z",
        "url": "https://files.pythonhosted.org/packages/42/83/6e0513956f0507ba5a6d35382fc31a24c475e9ad7a67bbee4ecc8fa5a6fd/pygeofilter-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98693e956ba3a02d5dacc48a940eaeace1712800cf96c1ce6a125d7447535932",
          "md5": "3776f3b0259c462e99af7dbb9e032cf3",
          "sha256": "0289c678b98ce748a2219ee8d710dbc977025b796aa8584873fdc3cfd48457b6"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3776f3b0259c462e99af7dbb9e032cf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44522,
        "upload_time": "2021-11-18T20:49:58",
        "upload_time_iso_8601": "2021-11-18T20:49:58.844322Z",
        "url": "https://files.pythonhosted.org/packages/98/69/3e956ba3a02d5dacc48a940eaeace1712800cf96c1ce6a125d7447535932/pygeofilter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47786bef550ab1ab0725550568c4afcd6117e5f091e82c34bf6c4c253a00970a",
          "md5": "af1b50c7dbe9743a18a3fde5a2e9a3b3",
          "sha256": "52b3da451ecd31ea2d30cc526d4a8cd227e84e1883cd7f43439b345f4ea47a2c"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af1b50c7dbe9743a18a3fde5a2e9a3b3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 72114,
        "upload_time": "2022-04-22T11:46:21",
        "upload_time_iso_8601": "2022-04-22T11:46:21.948689Z",
        "url": "https://files.pythonhosted.org/packages/47/78/6bef550ab1ab0725550568c4afcd6117e5f091e82c34bf6c4c253a00970a/pygeofilter-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64ede660fc33ce117c48b53ee77aad9478c5acde4fc025df4f3788a9781e7543",
          "md5": "f479c7e4449cff8c96ceb2595458acd5",
          "sha256": "abd123237b6c97ba3484978bec0d3644af27c7dfa213a8eda4ac9a0d3c9eae06"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f479c7e4449cff8c96ceb2595458acd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49979,
        "upload_time": "2022-04-22T11:46:23",
        "upload_time_iso_8601": "2022-04-22T11:46:23.749578Z",
        "url": "https://files.pythonhosted.org/packages/64/ed/e660fc33ce117c48b53ee77aad9478c5acde4fc025df4f3788a9781e7543/pygeofilter-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "742c03ad5bec27e4fc7589f786c092e0271871c6fc26aa80a0589563f98c035b",
          "md5": "f96dce1509fd8fdc5efcfc89b6df8042",
          "sha256": "bf43c8907f85ebc42132a83ad88eab56e6a7da50cf86fd51e15840d64a004ff9"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f96dce1509fd8fdc5efcfc89b6df8042",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 77680,
        "upload_time": "2022-10-20T16:05:02",
        "upload_time_iso_8601": "2022-10-20T16:05:02.890947Z",
        "url": "https://files.pythonhosted.org/packages/74/2c/03ad5bec27e4fc7589f786c092e0271871c6fc26aa80a0589563f98c035b/pygeofilter-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2db42c6242a1f5717aa8cc5556a74c580b8c685c6e9d261ed720c35a977aa1",
          "md5": "bb45879001876188634872a8a5ecc51d",
          "sha256": "bbed7ce78ab96d418a833ca2b207765e00ea8f9864e848e1e92cae1503911184"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb45879001876188634872a8a5ecc51d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52533,
        "upload_time": "2022-10-20T16:05:04",
        "upload_time_iso_8601": "2022-10-20T16:05:04.687210Z",
        "url": "https://files.pythonhosted.org/packages/ff/2d/b42c6242a1f5717aa8cc5556a74c580b8c685c6e9d261ed720c35a977aa1/pygeofilter-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29d7299ce65431cc48d8a189a38462ef99f4320702ff050cba631c74e46d456",
          "md5": "103099f6c7f1c678ae83c444997e95d6",
          "sha256": "6cbfd46edefee421cae6d338942a0f4f8bbb00f1a6d979914420a300aa0845a6"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "103099f6c7f1c678ae83c444997e95d6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 77412,
        "upload_time": "2023-02-16T16:50:58",
        "upload_time_iso_8601": "2023-02-16T16:50:58.029858Z",
        "url": "https://files.pythonhosted.org/packages/e2/9d/7299ce65431cc48d8a189a38462ef99f4320702ff050cba631c74e46d456/pygeofilter-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7243016390fdbc996bf2dcc7428d25212a6e638e7da998a3da83bead1bb3bb67",
          "md5": "ebe241057499f7c1dabc89ecb811d5da",
          "sha256": "cafc961a5cab5f2836605a43b82b05e799500223d19d2d8d8acb85ba263e954c"
        },
        "downloads": -1,
        "filename": "pygeofilter-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ebe241057499f7c1dabc89ecb811d5da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51892,
        "upload_time": "2023-02-16T16:50:59",
        "upload_time_iso_8601": "2023-02-16T16:50:59.738735Z",
        "url": "https://files.pythonhosted.org/packages/72/43/016390fdbc996bf2dcc7428d25212a6e638e7da998a3da83bead1bb3bb67/pygeofilter-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e29d7299ce65431cc48d8a189a38462ef99f4320702ff050cba631c74e46d456",
        "md5": "103099f6c7f1c678ae83c444997e95d6",
        "sha256": "6cbfd46edefee421cae6d338942a0f4f8bbb00f1a6d979914420a300aa0845a6"
      },
      "downloads": -1,
      "filename": "pygeofilter-0.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "103099f6c7f1c678ae83c444997e95d6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 77412,
      "upload_time": "2023-02-16T16:50:58",
      "upload_time_iso_8601": "2023-02-16T16:50:58.029858Z",
      "url": "https://files.pythonhosted.org/packages/e2/9d/7299ce65431cc48d8a189a38462ef99f4320702ff050cba631c74e46d456/pygeofilter-0.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7243016390fdbc996bf2dcc7428d25212a6e638e7da998a3da83bead1bb3bb67",
        "md5": "ebe241057499f7c1dabc89ecb811d5da",
        "sha256": "cafc961a5cab5f2836605a43b82b05e799500223d19d2d8d8acb85ba263e954c"
      },
      "downloads": -1,
      "filename": "pygeofilter-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ebe241057499f7c1dabc89ecb811d5da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51892,
      "upload_time": "2023-02-16T16:50:59",
      "upload_time_iso_8601": "2023-02-16T16:50:59.738735Z",
      "url": "https://files.pythonhosted.org/packages/72/43/016390fdbc996bf2dcc7428d25212a6e638e7da998a3da83bead1bb3bb67/pygeofilter-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}