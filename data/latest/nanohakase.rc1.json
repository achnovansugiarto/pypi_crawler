{
  "info": {
    "author": "John Doe",
    "author_email": "prussia@prussia.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Nanohakase\r\n\r\nNanohakase is a python library for the Nano cryptocurrency. It aims to be the simplest Nano library out there, and is a self fork of Bananopie (Nanopie was taken already).\r\n\r\n## Installation\r\n\r\n`pip install nanohakase`\r\n\r\nNanohakase is on [pypi](https://pypi.org/project/nanohakase/).\r\n\r\n# Quick Start\r\n\r\nFirst, start with a `RPC` class, for read only \r\n```py\r\nfrom nanohakase import *\r\nrpc = RPC(\"https://proxy.nanos.cc/proxy\")\r\n\r\n#check current blockcount\r\nprint(rpc.get_block_count().count)\r\n\r\n#get last 10 transactions\r\nprint(rpc.get_account_history(\"nano_3346kkobb11qqpo17imgiybmwrgibr7yi34mwn5j6uywyke8f7fnfp94uyps\", count=10)[\"history\"])\r\n\r\n#check balance\r\nprint(raw_to_whole(int(rpc.get_account_balance(\"nano_3346kkobb11qqpo17imgiybmwrgibr7yi34mwn5j6uywyke8f7fnfp94uyps\")[\"balance\"])))\r\n```\r\n\r\nFor sending/receiving transactions, use a `Wallet`.\r\n```py\r\nfrom nanohakase import RPC, Wallet\r\nrpc = RPC(\"https://app.natrium.io/api\")\r\n\r\nmy_account = Wallet(rpc, seed=\"seed here\", index=0)\r\n\r\n#or generate a new one\r\nmy_new_account = Wallet(rpc, index=0)\r\n\r\nprint(my_new_account.seed)\r\n\r\n#get address of self\r\nprint(my_account.get_address())\r\n\r\n#get balance of self\r\nprint(my_account.get_balance())\r\n\r\n#send 1 nano to the faucet development fund\r\nprint(my_account.send(\"nano_3pdripjhteyymwjnaspc5nd96gyxgcdxcskiwwwoqxttnrncrxi974riid94\", \"1\"))\r\n\r\n#receive funds\r\nmy_account.receive_all()\r\n\r\n#change rep\r\nmy_account.change_rep(\"nano_1kd4h9nqaxengni43xy9775gcag8ptw8ddjifnm77qes1efuoqikoqy5sjq3\")\r\n\r\n#change seed index\r\nmy_account.index = 2\r\n```\r\n\r\nUtility functions are also provided.\r\n```py\r\nimport nanohakase\r\n\r\n#whole to raw nano\r\nprint(nanohakase.whole_to_raw(\"492.2\"))\r\n\r\n#raw to whole nano\r\nprint(nanohakase.raw_to_whole(1900000000000000000000000000))\r\n```\r\n\r\n# Documentation\r\n\r\nAlso see the [Nano RPC docs](https://docs.nano.org/commands/rpc-protocol) for information on what rpc call wrapper functions return.\r\n\r\n## RPC (Class)\r\n**Parameters:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `auth` (*str* or *bool*, Default: False): Optional HTTP Authorization header\r\n\r\nSample:\r\n```py\r\nrpc = RPC(\"https://proxy.nanos.cc/proxy\")\r\n```\r\n\r\n**Properties:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `auth` (*str* or *bool*): Optional HTTP Authorization header\r\n\r\n**Methods:**\r\n\r\n### call (Function)\r\nRPC call. Intended for internal use, but useful for RPC calls that aren't directly implemented.\r\n\r\n**Parameters:**\r\n- `payload` (*dictionary*): Payload to send to node\r\n\r\nSample:\r\n```py\r\nrpc.call({\"action\": \"block_count\"})\r\n```\r\n\r\n**Returns:**\r\nResponse of RPC call (JSON dictionary)\r\n\r\n### get_block_count (Function)\r\nGet network block count.\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#block_count)\r\n\r\n\r\n### get_block_info (Function)\r\nGet block info for hash.\r\n\r\n**Parameters**\r\n- `block` (*st*): Block hash\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#block_info)\r\n\r\n### get_blocks (Function)\r\nGet blocks.\r\n\r\n**Parameters**\r\n- `blocks` (*str list*): List of block hashes to get information on\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#blocks)\r\n\r\n### get_blocks_info (Function)\r\nGet blocks, with more detailed information.\r\n\r\n**Parameters**\r\n- `blocks` (*str list*): List of block hashes to get information on\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#blocks_info)\r\n\r\n### get_representatives (Function)\r\nGet list of network representatives and their weight\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#representatives)\r\n\r\n### get_representatives_online (Function)\r\nGet list of network representatives that have recently voted\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#representatives_online)\r\n\r\n### get_account_history (Function)\r\nGet account history (confirmed and received transaction list)\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n- `count` (*int*, Default: -1): Optional parameter to specify amount of transactions to return. `-1` means all, or at least as much as the node will allow\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_history)\r\n\r\n### get_account_info (Function)\r\nGet account information, like height, frontier, balance, etc\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_info)\r\n\r\n### get_account_balance (Function)\r\nGet account balance\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_balance)\r\n\r\n### get_account_representative (Function)\r\nGet account representative\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_representative)\r\n\r\n### get_accounts_representatives (Function)\r\nGet representatives of accounts\r\n\r\n**Parameters**\r\n- `account` (*str list*): List of addresses\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_representatives)\r\n\r\n### get_account_weight (Function)\r\nGet delegated weight of representative\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of representative\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_weight)\r\n\r\n### get_receivable (Function)\r\nGet receivable transactions for account\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of representative\r\n- `count` (*int*, Default: 20): Optional parameter to specify max amount of receivable transactions to return\r\n- `thereshold` (*int or bool*, Default: False): Optional parameter to filter out any receivable transactions with value less than the thereshold\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#receivable)\r\n\r\n## Wallet (class)\r\n\r\n**Parameters:**\r\n- `rpc` (*RPC*): A RPC class\r\n- `seed` (*str* or *bool*, Default: False): 64 character hex seed, if `False`, will generate a seed by itself. Private keys are derived from the seed.\r\n- `index` (*int*, Default: 0): Optional parameter that is the index of the seed. Any number from 0 to 4294967295. Each index of the seed is a different private key, and so different address.\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://proxy.nanos.cc/proxy\"), \"seed here\", 0)\r\n```\r\n\r\n**Properties:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `seed` (*str*): Nano seed (64 character hex string)\r\n- `index` (*int*): Seed index. Change this property to change the wallet seed index.\r\n\r\n**Methods**\r\n\r\n### send_process (Function)\r\nInternal use function to send a `process` RPC call\r\n\r\n**Parameters**\r\n- `block` (*dictionary*): block content\r\n- `subtype` (*str*): Send, receive, or change\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### send (Function)\r\nHigh level function to send Nano\r\n\r\n**Parameters**\r\n- `to` (*str*): Address to send to\r\n- `amount` (*str*): Amount of Nano to send (in whole, not raw)\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://app.natrium.io/api\"), \"seed here\", 0)\r\nmy_account.send(\"nano_3pdripjhteyymwjnaspc5nd96gyxgcdxcskiwwwoqxttnrncrxi974riid94\", \"1\")\r\n```\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### receive_specific (Function)\r\nReceive a specific block\r\n\r\n**Parameters**\r\n- `hash` (*str*): Block hash to receive\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### receive_all (Function)\r\nReceive all (technically, 20) receivable transactions\r\n\r\n**Parameters**\r\nNone\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://proxy.nanos.cc/proxy\"), \"seed here\", 0)\r\nmy_account.receive_all()\r\n```\r\n\r\n**Returns**\r\nNothing\r\n\r\n### change_rep (Function)\r\nChange account representative\r\n\r\n**Parameters**\r\n- `new_representative` (*str*): Representative Nano address to change to\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://proxy.nanos.cc/proxy\"), \"seed here\", 0)\r\nmy_account.change_rep(\"nano_1kd4h9nqaxengni43xy9775gcag8ptw8ddjifnm77qes1efuoqikoqy5sjq3\")\r\n```\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### get_address (Function)\r\nGet address at current index of current seed\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns**\r\n*str*, Nano address\r\n\r\n### get_balance (Function)\r\nDouble wrapped function to get balance of self (see `RPC`'s `get_account_balance`)\r\n\r\n### get_receivable (Function)\r\nDouble wrapped function to get receivable blocks (see `RPC`'s `get_receivable`)\r\n\r\n### get_representative (Function)\r\nDouble wrapped function to get representative of self (see `RPC`'s `get_account_representative`)\r\n\r\n### get_account_info (Function)\r\nDouble wrapped function to get account info of self (see `RPC`'s `get_account_info`)\r\n\r\n### generate_seed (static Function)\r\nGenerate a random seed using `os.urandom`\r\n\r\n**Parameters**\r\nNone\r\n\r\nSample:\r\n```py\r\nprint(Wallet.generate_seed())\r\n```\r\n\r\n**Returns**\r\n64 character hex seed\r\n\r\n## Util\r\n\r\n**Properties**\r\n- `NANO_DECIMALS` (*int*): Amount of decimals that Nano has (30)\r\n- `PREAMBLE` (*str*): Hex string to prepend when signing\r\n\r\n**Methods**\r\n\r\n`encode_base32`, `decode_base32`, `bytes_to_hex`, `hex_to_bytes`, `random_bytes`, `get_private_key_from_seed`, `get_public_key_from_private_key`, `get_address_from_public_key`, `get_public_key_from_address`, `hash_block`, `sign` are internal use Functions that are currently undocumented. Look at `/nanohakase/util.py` to see what they do.\r\n\r\n### whole_to_raw (Function)\r\nConverts whole Nano to raw Nano\r\n\r\n**Parameters**\r\n- `whole` (*str*): Whole amount of Nano\r\n\r\n**Returns**\r\n*int*, that is raw amount of Nano\r\n\r\n### raw_to_whole (Function)\r\nConverts raw Nano to whole Nano (Cuts off at 2 decimal places)\r\n\r\n**Parameters**\r\n- `raw` (*int*): Raw amount of Nano\r\n\r\n**Returns**\r\n*int*, that is whole amount of Nano\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jetstream0/nanopie",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nanohakase",
    "package_url": "https://pypi.org/project/nanohakase/",
    "platform": null,
    "project_url": "https://pypi.org/project/nanohakase/",
    "project_urls": {
      "Homepage": "https://github.com/jetstream0/nanopie"
    },
    "release_url": "https://pypi.org/project/nanohakase/0.0.4/",
    "requires_dist": [
      "requests",
      "ed25519-blake2b"
    ],
    "requires_python": ">=3.5",
    "summary": "A python library to simplify sending and receiving Nano. Also a RPC wrapper. Self fork of bananopie.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15990091,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63ec830b2649c26f7cc477aea9578e207e2dfb0821bd8b16588bee89e68d40c7",
          "md5": "0bcd241819496562675a2007bd24c34f",
          "sha256": "a7e11a562d45475ff534d34c165fc5a75efa2607a2d9472c81b679c7cbd8a551"
        },
        "downloads": -1,
        "filename": "nanohakase-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bcd241819496562675a2007bd24c34f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8714,
        "upload_time": "2022-12-05T01:11:24",
        "upload_time_iso_8601": "2022-12-05T01:11:24.735627Z",
        "url": "https://files.pythonhosted.org/packages/63/ec/830b2649c26f7cc477aea9578e207e2dfb0821bd8b16588bee89e68d40c7/nanohakase-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b60681584586bdba96aeb8329cadbe243a9002296dbfae1fcbadaf69a398429",
          "md5": "60bc7d02537e8b11458954e13d018d0a",
          "sha256": "35c76c5a58e24830f557ce732abcefa4ddaa5cc03b29d3a58d23617ab64da5b1"
        },
        "downloads": -1,
        "filename": "nanohakase-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "60bc7d02537e8b11458954e13d018d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10290,
        "upload_time": "2022-12-05T01:11:27",
        "upload_time_iso_8601": "2022-12-05T01:11:27.568753Z",
        "url": "https://files.pythonhosted.org/packages/9b/60/681584586bdba96aeb8329cadbe243a9002296dbfae1fcbadaf69a398429/nanohakase-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63ec830b2649c26f7cc477aea9578e207e2dfb0821bd8b16588bee89e68d40c7",
        "md5": "0bcd241819496562675a2007bd24c34f",
        "sha256": "a7e11a562d45475ff534d34c165fc5a75efa2607a2d9472c81b679c7cbd8a551"
      },
      "downloads": -1,
      "filename": "nanohakase-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0bcd241819496562675a2007bd24c34f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8714,
      "upload_time": "2022-12-05T01:11:24",
      "upload_time_iso_8601": "2022-12-05T01:11:24.735627Z",
      "url": "https://files.pythonhosted.org/packages/63/ec/830b2649c26f7cc477aea9578e207e2dfb0821bd8b16588bee89e68d40c7/nanohakase-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b60681584586bdba96aeb8329cadbe243a9002296dbfae1fcbadaf69a398429",
        "md5": "60bc7d02537e8b11458954e13d018d0a",
        "sha256": "35c76c5a58e24830f557ce732abcefa4ddaa5cc03b29d3a58d23617ab64da5b1"
      },
      "downloads": -1,
      "filename": "nanohakase-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "60bc7d02537e8b11458954e13d018d0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10290,
      "upload_time": "2022-12-05T01:11:27",
      "upload_time_iso_8601": "2022-12-05T01:11:27.568753Z",
      "url": "https://files.pythonhosted.org/packages/9b/60/681584586bdba96aeb8329cadbe243a9002296dbfae1fcbadaf69a398429/nanohakase-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}