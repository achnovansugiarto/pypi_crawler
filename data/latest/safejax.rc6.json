{
  "info": {
    "author": null,
    "author_email": "Alvaro Bartolome <alvarobartt@yahoo.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# üîê Serialize JAX, Flax, Haiku, or Objax model params with `safetensors`\n\n`safejax` is a Python package to serialize JAX, Flax, Haiku, or Objax model params using `safetensors`\nas the tensor storage format, instead of relying on `pickle`. For more details on why\n`safetensors` is safer than `pickle` please check [huggingface/safetensors](https://github.com/huggingface/safetensors).\n\nNote that `safejax` supports the serialization of `jax`, `flax`, `dm-haiku`, and `objax` model\nparameters and has been tested with all those frameworks, but there may be some cases where it\ndoes not work as expected, as this is still in an early development phase, so please if you have\nany feedback or bug reports, open an issue at [safejax/issues](https://github.com/alvarobartt/safejax/issues).\n\n## üõ†Ô∏è Requirements & Installation\n\n`safejax` requires Python 3.7 or above\n\n```bash\npip install safejax --upgrade\n```\n\n## üíª Usage\n\n### `flax`\n\n* Convert `params` to `bytes` in memory\n\n  ```python\n  from safejax.flax import serialize, deserialize\n\n  params = model.init(...)\n\n  encoded_bytes = serialize(params)\n  decoded_params = deserialize(encoded_bytes)\n\n  model.apply(decoded_params, ...)\n  ```\n\n* Convert `params` to `bytes` in `params.safetensors` file\n\n  ```python\n  from safejax.flax import serialize, deserialize\n\n  params = model.init(...)\n\n  encoded_bytes = serialize(params, filename=\"./params.safetensors\")\n  decoded_params = deserialize(\"./params.safetensors\")\n\n  model.apply(decoded_params, ...)\n  ```\n\n---\n\n### `dm-haiku`\n\n* Just contains `params`\n\n  ```python\n  from safejax.haiku import serialize, deserialize\n\n  params = model.init(...)\n\n  encoded_bytes = serialize(params)\n  decoded_params = deserialize(encoded_bytes)\n\n  model.apply(decoded_params, ...)\n  ```\n\n* If it contains `params` and `state` e.g. ExponentialMovingAverage in BatchNorm\n\n  ```python\n  from safejax.haiku import serialize, deserialize\n\n  params, state = model.init(...)\n  params_state = {\"params\": params, \"state\": state}\n  \n  encoded_bytes = serialize(params_state)\n  decoded_params_state = deserialize(encoded_bytes) # .keys() contains `params` and `state`\n\n  model.apply(decoded_params_state[\"params\"], decoded_params_state[\"state\"], ...)\n  ```\n\n* If it contains `params` and `state`, but we want to serialize those individually\n\n  ```python\n  from safejax.haiku import serialize, deserialize\n\n  params, state = model.init(...)\n\n  encoded_bytes = serialize(params)\n  decoded_params = deserialize(encoded_bytes)\n\n  encoded_bytes = serialize(state)\n  decoded_state = deserialize(encoded_bytes)\n\n  model.apply(decoded_params, decoded_state, ...)\n  ```\n\n---\n\n### `objax`\n\n* Convert `params` to `bytes` in memory, and convert back to `VarCollection`\n\n  ```python\n  from safejax.objax import serialize, deserialize\n\n  params = model.vars()\n\n  encoded_bytes = serialize(params=params)\n  decoded_params = deserialize(encoded_bytes)\n\n  for key, value in decoded_params.items():\n    if key in model.vars():\n      model.vars()[key].assign(value.value)\n\n  model(...)\n  ```\n\n* Convert `params` to `bytes` in `params.safetensors` file\n\n  ```python\n  from safejax.objax import serialize, deserialize\n\n  params = model.vars()\n\n  encoded_bytes = serialize(params=params, filename=\"./params.safetensors\")\n  decoded_params = deserialize(\"./params.safetensors\")\n\n  for key, value in decoded_params.items():\n    if key in model.vars():\n      model.vars()[key].assign(value.value)\n\n  model(...)\n  ```\n\n* Convert `params` to `bytes` in `params.safetensors` and assign during deserialization\n\n  ```python\n  from safejax.objax import serialize, deserialize_with_assignment\n\n  params = model.vars()\n\n  encoded_bytes = serialize(params=params, filename=\"./params.safetensors\")\n  deserialize_with_assignment(filename=\"./params.safetensors\", model_vars=params)\n\n  model(...)\n  ```\n\n---\n\nMore in-detail examples can be found at [`examples/`](./examples) for `flax`, `dm-haiku`, and `objax`.\n\n## ü§î Why `safejax`?\n\n`safetensors` defines an easy and fast (zero-copy) format to store tensors,\nwhile `pickle` has some known weaknesses and security issues. `safetensors`\nis also a storage format that is intended to be trivial to the framework\nused to load the tensors. More in-depth information can be found at \n[huggingface/safetensors](https://github.com/huggingface/safetensors).\n\n`jax` uses `pytrees` to store the model parameters in memory, so\nit's a dictionary-like class containing nested `jnp.DeviceArray` tensors.\n\n`dm-haiku` uses a custom dictionary formatted as `<level_1>/~/<level_2>`, where the\nlevels are the ones that define the tree structure and `/~/` is the separator between those\ne.g. `res_net50/~/intial_conv`, and that key does not contain a `jnp.DeviceArray`, but a \ndictionary with key value pairs e.g. for both weights as `w` and biases as `b`.\n\n`objax` defines a custom dictionary-like class named `VarCollection` that contains\nsome variables inheriting from `BaseVar` which is another custom `objax` type.\n\n`flax` defines a dictionary-like class named `FrozenDict` that is used to\nstore the tensors in memory, it can be dumped either into `bytes` in `MessagePack`\nformat or as a `state_dict`.\n\nOf all those, `flax` is the only framework that defines its custom functions to\nserialize and deserialize the model params under `flax.serialization`.But `flax` still\nuses `pickle` as the format for storing the tensors, and there are no plans from HuggingFace\nto extend `safetensors` to support anything more than tensors e.g. `FrozenDict`s, see their\nresponse at [huggingface/safetensors/discussions/138](https://github.com/huggingface/safetensors/discussions/138).\n\nSo the motivation to create `safejax` is to easily provide a way to serialize `FrozenDict`s\nusing `safetensors` as the tensor storage format instead of `pickle`, as well as to provide\na common and easy way to serialize and deserialize any JAX model params (Flax, Haiku, or Objax)\nusing `safetensors` format.\n\n### üìÑ Main differences with `flax.serialization`\n\n* `flax.serialization.to_bytes` uses `pickle` as the tensor storage format, while\n`safejax.serialize` uses `safetensors`\n* `flax.serialization.from_bytes` requires the `target` to be instantiated, while\n`safejax.deserialize` just needs the encoded bytes\n\n## üèãüèº Benchmark\n\nBenchmarks are no longer running with [`hyperfine`](https://github.com/sharkdp/hyperfine),\nas most of the elapsed time is not during the actual serialization but in the imports and\nthe model parameter initialization. So we've refactored those to run with pure\nPython code using `time.perf_counter` to measure the elapsed time in seconds.\n\n```bash\n$ python benchmarks/resnet50.py\nsafejax (100 runs): 2.0974 s\nflax (100 runs): 4.8734 s\n```\n\nThis means that for `ResNet50`, `safejax` is x2.3 times faster than `flax.serialization` when\nit comes to serialization, also to restate the fact that `safejax` stores the tensors with\n`safetensors` while `flax` saves those with `pickle`.\n\nBut if we use [`hyperfine`](https://github.com/sharkdp/hyperfine) as mentioned above, it needs\nto be installed first, and the `hatch`/`pyenv` environment needs to be activated\nfirst (or just install the requirements). But, due to the overhead of the script, the \nelapsed time during the serialization will be minimal compared to the rest, so the overall\nresult won't reflect well enough the efficiency diff between both approaches, as above.\n\n```bash\n$ hyperfine --warmup 2 \"python benchmarks/hyperfine/resnet50.py serialization_safejax\" \"python benchmarks/hyperfine/resnet50.py serialization_flax\"\nBenchmark 1: python benchmarks/hyperfine/resnet50.py serialization_safejax\n  Time (mean ¬± œÉ):      1.778 s ¬±  0.038 s    [User: 3.345 s, System: 0.511 s]\n  Range (min ‚Ä¶ max):    1.741 s ‚Ä¶  1.877 s    10 runs\n \nBenchmark 2: python benchmarks/hyperfine/resnet50.py serialization_flax\n  Time (mean ¬± œÉ):      1.790 s ¬±  0.011 s    [User: 3.371 s, System: 0.478 s]\n  Range (min ‚Ä¶ max):    1.771 s ‚Ä¶  1.810 s    10 runs\n \nSummary\n  'python benchmarks/hyperfine/resnet50.py serialization_safejax' ran\n    1.01 ¬± 0.02 times faster than 'python benchmarks/hyperfine/resnet50.py serialization_flax'\n```\n\nAs we can see the difference is almost not noticeable, since the benchmark is using a \n2-tensor dictionary, which should be faster using any method. The main difference is on\nthe `safetensors` usage for the tensor storage instead of `pickle`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "safejax",
    "package_url": "https://pypi.org/project/safejax/",
    "platform": null,
    "project_url": "https://pypi.org/project/safejax/",
    "project_urls": {
      "Documentation": "https://alvarobartt.github.io/safejax",
      "Issues": "https://github.com/alvarobartt/safejax/issues",
      "Source": "https://github.com/alvarobartt/safejax"
    },
    "release_url": "https://pypi.org/project/safejax/0.5.0/",
    "requires_dist": [
      "dm-haiku~=0.0.9",
      "flax~=0.6.2",
      "fsspec~=2022.11.0",
      "jaxlib~=0.3.25",
      "jax~=0.3.25",
      "objax~=1.6.0",
      "safetensors~=0.2.5",
      "mkdocs-git-revision-date-localized-plugin~=1.1.0; extra == 'docs'",
      "mkdocs-material~=8.5.4; extra == 'docs'",
      "mkdocstrings[python]~=0.19.0; extra == 'docs'",
      "mkdocs~=1.4.0; extra == 'docs'",
      "black~=22.10.0; extra == 'quality'",
      "pip-tools~=6.12.0; extra == 'quality'",
      "pre-commit~=2.20.0; extra == 'quality'",
      "ruff~=0.0.194; extra == 'quality'",
      "flaxmodels~=0.1.2; extra == 'tests'",
      "pytest-lazy-fixture~=0.6.3; extra == 'tests'",
      "pytest~=7.1.2; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Serialize JAX, Flax, Haiku, or Objax model params with `safetensors`",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16315524,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0e5a8389dde86b07440b9e8a8b8f1fb2572356c8354af958ce0d1bcbca88c0d4",
          "md5": "0e747097a42a0f1e13aa4af7ae2417dc",
          "sha256": "0213b31e6b78cf56fd9599fe518c033df8a0846dd3f3ca55f890452f5ee2184a"
        },
        "downloads": -1,
        "filename": "safejax-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e747097a42a0f1e13aa4af7ae2417dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5499,
        "upload_time": "2022-12-24T11:50:32",
        "upload_time_iso_8601": "2022-12-24T11:50:32.392150Z",
        "url": "https://files.pythonhosted.org/packages/0e/5a/8389dde86b07440b9e8a8b8f1fb2572356c8354af958ce0d1bcbca88c0d4/safejax-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9b553367549053d76533f20d0509bef15182423f007ef1540d0245580b9492bf",
          "md5": "51960b5ed56b360a7eacfc668a2d906d",
          "sha256": "fedfbb45ad06d9f60cde0d4ac78929f9cbbe0ac218e38be9cb84f5b04a59eda5"
        },
        "downloads": -1,
        "filename": "safejax-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51960b5ed56b360a7eacfc668a2d906d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5731,
        "upload_time": "2022-12-24T11:50:33",
        "upload_time_iso_8601": "2022-12-24T11:50:33.891584Z",
        "url": "https://files.pythonhosted.org/packages/9b/55/3367549053d76533f20d0509bef15182423f007ef1540d0245580b9492bf/safejax-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6cc5911ad06118d9af41307a35126fcfd8690c9540ff88b3139082f319d8f3f9",
          "md5": "eb77ac2653a197547b52ed018f4b91e2",
          "sha256": "03eac1d698b309fca54bc7806f1c112ed26c5afca3b33db82ae5f8cde3729045"
        },
        "downloads": -1,
        "filename": "safejax-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb77ac2653a197547b52ed018f4b91e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5882,
        "upload_time": "2022-12-24T17:02:09",
        "upload_time_iso_8601": "2022-12-24T17:02:09.840809Z",
        "url": "https://files.pythonhosted.org/packages/6c/c5/911ad06118d9af41307a35126fcfd8690c9540ff88b3139082f319d8f3f9/safejax-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ab008526284f4addfa386e6f18cced4cfa7dcb06f91e7c2484dc4e78d51d6ef4",
          "md5": "2a93b90434f2af89be4e06ccf8f32d07",
          "sha256": "237b1eb52502b1a7092765cae9ee09bb9b90ea2ced4284c9cfbe0c081fc6e1fb"
        },
        "downloads": -1,
        "filename": "safejax-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2a93b90434f2af89be4e06ccf8f32d07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6464,
        "upload_time": "2022-12-24T17:02:11",
        "upload_time_iso_8601": "2022-12-24T17:02:11.169457Z",
        "url": "https://files.pythonhosted.org/packages/ab/00/8526284f4addfa386e6f18cced4cfa7dcb06f91e7c2484dc4e78d51d6ef4/safejax-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "db4e3c7fc58b155142a66144fbda751a7bfc684e4fad6f2fccb7ef8d3c5427ba",
          "md5": "839aed6a12e5cd20a3f8238336215868",
          "sha256": "a8d501d1ce9a63188447f0ea4814e86a6a775d65f5ed1e0ef620658c8de23f37"
        },
        "downloads": -1,
        "filename": "safejax-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "839aed6a12e5cd20a3f8238336215868",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7304,
        "upload_time": "2022-12-26T10:36:38",
        "upload_time_iso_8601": "2022-12-26T10:36:38.732230Z",
        "url": "https://files.pythonhosted.org/packages/db/4e/3c7fc58b155142a66144fbda751a7bfc684e4fad6f2fccb7ef8d3c5427ba/safejax-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9506c5c421ec10a9a7e50dbfdbe1c0b174b9311f1e4f11c1c623edbd3027deac",
          "md5": "5a13133baf7c2b44b681e8476d299276",
          "sha256": "b1523db66f817a029823c75ab5c6dcce54cc50eff929ca857215a50e19f59cad"
        },
        "downloads": -1,
        "filename": "safejax-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a13133baf7c2b44b681e8476d299276",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8614,
        "upload_time": "2022-12-26T10:36:37",
        "upload_time_iso_8601": "2022-12-26T10:36:37.185695Z",
        "url": "https://files.pythonhosted.org/packages/95/06/c5c421ec10a9a7e50dbfdbe1c0b174b9311f1e4f11c1c623edbd3027deac/safejax-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9422c267946b4b88c44954afb9d8e896ed14d15ad6ef46b2e4f160b3a40e0214",
          "md5": "44002921446e87310b505fd74594a2a9",
          "sha256": "d0aa2ad20ca887a578e2a02877ceb717a461d1d3f163f501c5b81c9e2ee4980e"
        },
        "downloads": -1,
        "filename": "safejax-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44002921446e87310b505fd74594a2a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8013,
        "upload_time": "2022-12-27T13:04:37",
        "upload_time_iso_8601": "2022-12-27T13:04:37.246096Z",
        "url": "https://files.pythonhosted.org/packages/94/22/c267946b4b88c44954afb9d8e896ed14d15ad6ef46b2e4f160b3a40e0214/safejax-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7e68eea392fb0e09c929388eac745817757703341aba859938eb4b7e17f0bc68",
          "md5": "6dea154e04f039c37cb5f3240d7c4d48",
          "sha256": "54100ad7e50ba46a96f08414ca57012c5194be31376baac09c5f600f9cac7260"
        },
        "downloads": -1,
        "filename": "safejax-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dea154e04f039c37cb5f3240d7c4d48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12878,
        "upload_time": "2022-12-27T13:04:35",
        "upload_time_iso_8601": "2022-12-27T13:04:35.499627Z",
        "url": "https://files.pythonhosted.org/packages/7e/68/eea392fb0e09c929388eac745817757703341aba859938eb4b7e17f0bc68/safejax-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "49bbf7370248171aea8e02f3bddc1393d06ec99e059362efc77a4dc1ff69f410",
          "md5": "13c14c32d43e592a80ea3713ec45de29",
          "sha256": "469a0d5c86ad2a1a2f6150964e052a8a9ba6c8ca96a3a8f90818697a821f4373"
        },
        "downloads": -1,
        "filename": "safejax-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13c14c32d43e592a80ea3713ec45de29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10997,
        "upload_time": "2022-12-30T16:10:13",
        "upload_time_iso_8601": "2022-12-30T16:10:13.074648Z",
        "url": "https://files.pythonhosted.org/packages/49/bb/f7370248171aea8e02f3bddc1393d06ec99e059362efc77a4dc1ff69f410/safejax-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ef2d2a1d8d3494ba1400e3848e59e2a66d1b4ecb253900c9ea5adfa3b5512c96",
          "md5": "8f0f4e0e1814ee1175991c10f160cc45",
          "sha256": "26ae786c82e5397f99e1fc2312a373ab93ec2c0394a9c51edf709d575e9aedc2"
        },
        "downloads": -1,
        "filename": "safejax-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f0f4e0e1814ee1175991c10f160cc45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14768,
        "upload_time": "2022-12-30T16:10:14",
        "upload_time_iso_8601": "2022-12-30T16:10:14.501981Z",
        "url": "https://files.pythonhosted.org/packages/ef/2d/2a1d8d3494ba1400e3848e59e2a66d1b4ecb253900c9ea5adfa3b5512c96/safejax-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f21c4688d6da36e8a9cd161d1b945efb03771566a9c30e294df2028527559dd4",
          "md5": "42fe8b80947d03c2baa50a4a9fbce912",
          "sha256": "182146a12c621f2695e6b927d6b71d4684003c39d757c77a9d5ca8a3b8105a78"
        },
        "downloads": -1,
        "filename": "safejax-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42fe8b80947d03c2baa50a4a9fbce912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12675,
        "upload_time": "2023-01-05T11:56:54",
        "upload_time_iso_8601": "2023-01-05T11:56:54.823806Z",
        "url": "https://files.pythonhosted.org/packages/f2/1c/4688d6da36e8a9cd161d1b945efb03771566a9c30e294df2028527559dd4/safejax-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "229db19f7d173ac0080a8ea8c796073e860b484e3eeda9fc55f6080ea8b31de4",
          "md5": "28745fbb4bdfc06970963e0c1778b71a",
          "sha256": "093898d98ba32ca3d5376177d638d0a97666c9b1b041154276144dc4526a0086"
        },
        "downloads": -1,
        "filename": "safejax-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28745fbb4bdfc06970963e0c1778b71a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16135,
        "upload_time": "2023-01-05T11:56:55",
        "upload_time_iso_8601": "2023-01-05T11:56:55.976674Z",
        "url": "https://files.pythonhosted.org/packages/22/9d/b19f7d173ac0080a8ea8c796073e860b484e3eeda9fc55f6080ea8b31de4/safejax-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f21c4688d6da36e8a9cd161d1b945efb03771566a9c30e294df2028527559dd4",
        "md5": "42fe8b80947d03c2baa50a4a9fbce912",
        "sha256": "182146a12c621f2695e6b927d6b71d4684003c39d757c77a9d5ca8a3b8105a78"
      },
      "downloads": -1,
      "filename": "safejax-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42fe8b80947d03c2baa50a4a9fbce912",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12675,
      "upload_time": "2023-01-05T11:56:54",
      "upload_time_iso_8601": "2023-01-05T11:56:54.823806Z",
      "url": "https://files.pythonhosted.org/packages/f2/1c/4688d6da36e8a9cd161d1b945efb03771566a9c30e294df2028527559dd4/safejax-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "229db19f7d173ac0080a8ea8c796073e860b484e3eeda9fc55f6080ea8b31de4",
        "md5": "28745fbb4bdfc06970963e0c1778b71a",
        "sha256": "093898d98ba32ca3d5376177d638d0a97666c9b1b041154276144dc4526a0086"
      },
      "downloads": -1,
      "filename": "safejax-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "28745fbb4bdfc06970963e0c1778b71a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16135,
      "upload_time": "2023-01-05T11:56:55",
      "upload_time_iso_8601": "2023-01-05T11:56:55.976674Z",
      "url": "https://files.pythonhosted.org/packages/22/9d/b19f7d173ac0080a8ea8c796073e860b484e3eeda9fc55f6080ea8b31de4/safejax-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}