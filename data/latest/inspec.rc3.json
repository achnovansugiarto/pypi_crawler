{
  "info": {
    "author": "Kevin Yu",
    "author_email": "thekevinyu@gmail.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.0"
    ],
    "description": "# inspec\n\nInspect audio files and images from the command line by displaying them as unicode characters.\n\nPrimary purpose is to inspect media files on a server during a remote SSH session or to quickly spot-check files during a script. Provides printing to stdout, a terminal gui built with curses, and importable Python functions.\n\n## Install\n\n```\npip install inspec\n```\n\n## Usage\n\n### Command Line\n\nLaunch the GUI viewer for audio files and image files respectively. At some point I probably want to merge these two commands and infer the file type from the extensions.\n```shell\ninspec open FILENAME [-r ROWS] [-c COLS] [--cmap CMAP]\ninspec imopen FILENAME [-r ROWS] [-c COLS] [--cmap CMAP]\n```\n\nPrint a file to stdout, inferring type of file base on extension and contents (audio and image versions)\n```shell\ninspec show FILENAME [-w WIDTH] [-h HEIGHT] [--cmap CMAP] [--horizontal OR --vertical]\ninspec imshow FILENAME [-w WIDTH] [-h HEIGHT] [--cmap CMAP] [--horizontal OR --vertical]\n```\n\nShow a live spectrogram or amplitude of an input device\n```shell\ninspec listen [-d DEVICE] [-c CHANNELS] [-m 'spec' OR 'amp'] [--cmap CMAP]\n```\n\n```shell\ninspec list-devices\ninspec list-cmaps\n```\n\n### Python\n\nConvenience methods mirroring the cli\n\n```python\nimport inspec\n\n# Open a terminal gui\ninspec.open_gui(FILENAMES, rows=2, cols=2, cmap=\"viridis\")\ninspec.open_image_gui(FILENAMES, rows=4, cols=3, cmap=\"greys\")\n\n# Printing to stdout\ninspec.show(FILENAME, width=0.5, height=0.5)\ninspec.imshow(FILENAME, width=0.5, height=0.5)\n\n# Open a gui displaying live spectrograms\ninspec.listen(device=DEVICE, channels=1)\n```\n\n### 'inspec open' and 'inspec imopen' commands\n\n**General controls**\n\n| Action                             |Key|\n|---|---|\n|  Close the program                 |[q]|\n|  Change selected file              |[arrow keys] or [h,j,k,l] |\n|  Prompt to set display rows        |[r]|\n|  Prompt to set display cols (int)  |[c]|\n|  Prompt to jump to page (int)      |[p]|\n\n**Audio only**\n\n| Action                             |Key|\n|---|---|\n|  Zoom out/in in time               |[+]| and [-]|\n|  Prompt to set timescale (float)   |[s]|\n|  Toggle spectrogram/amplitude view |[z]|\n|  Scroll file in time                    |[shift + arrow keys] or [H,L]|\n|  Prompt to jump to time (seconds)  |[t]|\n|  Switch to channel (0 indexed, max 9) |[number keys]|\n\n**Images only**\n\n| Action                             |Key|\n|---|---|\n|  Toggle thumbnail (lower resolution) |[z]|\n\n### 'inspec listen' commands\n\n| Action                             |Key|\n|---|---|\n|  Close the program                 |[q]|\n|  Increase gain                     |[up arrow] or [k] |\n|  Decrease gain                     |[down arrow] or [j]|\n|  Zoom in on y scale                |[+]|\n|  Zoom out on y scale               |[-]|\n|  Prompt to set gain (float in dB, defaults 0) |[g]|\n\n#### Rendering data\n\nFor more fine-grained control, or to extend the visualizations to other data formats, you can add/modify/remove intermediate processing steps. These are\n\n1. reading in data (`inspec.io`)\n\n2. converting to 2D image array (`inspec.transform`)\n\n3. converting image data into 2d array of unicode characters and foreground/background scale values between 0 and 1 (`inspec.maps`)\n\n4. applying a colormap to the colors, converting into a 2d array of unicode characters and foreground/background color values (`StdoutRenderer.apply_colormap_to_char_array()`)\n\n3. and then displaying those characters. (`StdoutRenderer.render()`)\n\n```python\nimport inspec\nfrom inspec.colormap import load_cmap\nfrom inspec.io import AudioReader\nfrom inspec.maps import QuarterCharMap\nfrom inspec.render import StdoutRenderer\nfrom inspec.transform import SpectrogramTransform\n\ncmap = load_cmap(\"viridis\")\ntransform = SpectrogramTransform(1000, 50, min_freq=250, max_freq=10000)\n\ndata, sampling_rate, _ = AudioReader.read_file(\"sample.wav\")\n\n# Convert the data into a 2D image\nimg, _ = transform.convert(data, sampling_rate, output_size=(80, 160))\n\n# Convert the image into tuples of unicode characters and colors to map (from 0. to 1.)\nchar_img = QuarterCharMap.to_char_array(img)\n\n# Apply a colormap to the 0. to 1. colors into terminal color values (or curses colors)\nchar_img_colorized = StdoutRenderer.apply_cmap_to_char_array(cmap, char_img)\n\n# Display the characters and colors to the screen\nStdoutRenderer.display(char_img_colorized)\n```\n\n## Compatibility\n\nDefinitely works on Ubuntu + Python3.8. Kind of works on Windows 10 + Python3.8 in Powershell but a little unstable, needs `pip install windows-curses` as well.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kevinyu/inspec",
    "keywords": "spectrogram audio visualization sound terminal",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inspec",
    "package_url": "https://pypi.org/project/inspec/",
    "platform": "",
    "project_url": "https://pypi.org/project/inspec/",
    "project_urls": {
      "Homepage": "https://github.com/kevinyu/inspec"
    },
    "release_url": "https://pypi.org/project/inspec/0.3/",
    "requires_dist": [
      "Click",
      "SoundFile",
      "numpy",
      "Pillow",
      "sounddevice",
      "wheel",
      "windows-curses ; platform_system == \"Windows\""
    ],
    "requires_python": ">=3.6",
    "summary": "Printing and viewing spectrograms of audio files in command line",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9096453,
  "releases": {
    "0.1": [],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3927fb860831ec23be0ac2b5c95a88f1090e604a7efb032396a950fd1c7e791",
          "md5": "dc18b08b99604fe159918cf12836af97",
          "sha256": "304388b52a8d3f8c8e96dbf9e072100e507aa1aef9e76882dfff2407a739c859"
        },
        "downloads": -1,
        "filename": "inspec-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc18b08b99604fe159918cf12836af97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24787,
        "upload_time": "2021-01-06T05:10:56",
        "upload_time_iso_8601": "2021-01-06T05:10:56.426838Z",
        "url": "https://files.pythonhosted.org/packages/a3/92/7fb860831ec23be0ac2b5c95a88f1090e604a7efb032396a950fd1c7e791/inspec-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06abcf623dc87d5b5b5e0510bd91e00c77c4481ea04d12442522bfde110ffc14",
          "md5": "fb0be9bc2228494fa813bbbc3ef2428a",
          "sha256": "6a5e3dc77b9d7f4e764a2e2cc79d792a7a3d27c167d33ed42a544ca9fbe8ab33"
        },
        "downloads": -1,
        "filename": "inspec-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fb0be9bc2228494fa813bbbc3ef2428a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24635,
        "upload_time": "2021-01-06T05:10:57",
        "upload_time_iso_8601": "2021-01-06T05:10:57.368623Z",
        "url": "https://files.pythonhosted.org/packages/06/ab/cf623dc87d5b5b5e0510bd91e00c77c4481ea04d12442522bfde110ffc14/inspec-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c416912fa40fd9c0454a33850e88386c32ce54ff91c399b2f68580a60a09f59e",
          "md5": "216e00f3699e7cc6a8c1a5a3cf0c9798",
          "sha256": "de556af6d065fe4a1da52728e10067d2c42c6267d9c08af6d9b1cc983e91e033"
        },
        "downloads": -1,
        "filename": "inspec-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "216e00f3699e7cc6a8c1a5a3cf0c9798",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34164,
        "upload_time": "2021-01-10T08:05:22",
        "upload_time_iso_8601": "2021-01-10T08:05:22.685692Z",
        "url": "https://files.pythonhosted.org/packages/c4/16/912fa40fd9c0454a33850e88386c32ce54ff91c399b2f68580a60a09f59e/inspec-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d524acb95dec7b4e88bed4db1744bd3a981419c3b2746852d96b1e125cce1521",
          "md5": "61be4305d20f292f3747ca7777187a54",
          "sha256": "27f671880ced032e6bae16457266743138a6cfdc553f43e3c84219e934be2258"
        },
        "downloads": -1,
        "filename": "inspec-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "61be4305d20f292f3747ca7777187a54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29193,
        "upload_time": "2021-01-10T08:05:23",
        "upload_time_iso_8601": "2021-01-10T08:05:23.915275Z",
        "url": "https://files.pythonhosted.org/packages/d5/24/acb95dec7b4e88bed4db1744bd3a981419c3b2746852d96b1e125cce1521/inspec-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c416912fa40fd9c0454a33850e88386c32ce54ff91c399b2f68580a60a09f59e",
        "md5": "216e00f3699e7cc6a8c1a5a3cf0c9798",
        "sha256": "de556af6d065fe4a1da52728e10067d2c42c6267d9c08af6d9b1cc983e91e033"
      },
      "downloads": -1,
      "filename": "inspec-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "216e00f3699e7cc6a8c1a5a3cf0c9798",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34164,
      "upload_time": "2021-01-10T08:05:22",
      "upload_time_iso_8601": "2021-01-10T08:05:22.685692Z",
      "url": "https://files.pythonhosted.org/packages/c4/16/912fa40fd9c0454a33850e88386c32ce54ff91c399b2f68580a60a09f59e/inspec-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d524acb95dec7b4e88bed4db1744bd3a981419c3b2746852d96b1e125cce1521",
        "md5": "61be4305d20f292f3747ca7777187a54",
        "sha256": "27f671880ced032e6bae16457266743138a6cfdc553f43e3c84219e934be2258"
      },
      "downloads": -1,
      "filename": "inspec-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "61be4305d20f292f3747ca7777187a54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29193,
      "upload_time": "2021-01-10T08:05:23",
      "upload_time_iso_8601": "2021-01-10T08:05:23.915275Z",
      "url": "https://files.pythonhosted.org/packages/d5/24/acb95dec7b4e88bed4db1744bd3a981419c3b2746852d96b1e125cce1521/inspec-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}