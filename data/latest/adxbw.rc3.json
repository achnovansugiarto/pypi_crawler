{
  "info": {
    "author": "Lanting Li, Jiaye Chen, Jenny Dong",
    "author_email": "lanting_li@hms.harvard.edu, jiaye_chen@hms.harvard.edu, wdong@hms.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Group #36 cs107-FinalProject\n\n## Authors:\n\n- Lanting Li\n- Jenny Dong\n- Jiaye Chen\n\n## Introduction\n\nAutomatic Differentiation (AD) is a powerful tool in optimization problem, such as root finding with Newton's method. It\nhas been applied in science and engineering. We implement a python package called `adxbw`.\n\nIn an optimization problem, the core is to find out in which condition we can reach the local and global maxima or\nminima and the zero points. Compared to linear functions, it's computationally harder to find the roots of non-linear\nfunctions. Numeric and symbolic methods (and of course manually working and coding) failed under such a high complexity\nindependently. Thus, AD, which integrates the advantages of numeric and symbolic differentiation, can be used to solve\nthat problem.\n\n## How to use\n\nTo install:\n\n```bash\npip install adxbw\n```\n\n### Import\n\n`import adxbw`\n\n### Univariate example:\n\n```python\n# forward-mode imbedded in node.py\nx = AD(math.e, 1)\nf = x.log()  # Default base is e\n```\n\nOutput:\n\n```\nThe value and derivative of current function are 1.0 and 0.36787944117144233\n```\n\nAs an additional feature, we have used the forward mode AD to compute the Jacobian in Newton's root finding method. We\nwrote a wrapper for Newton's method that works for **single/multiple scalar inputs and single vector input**.\n\nFor Newton's optimization with single scalar or vector input, we require the user to input an AD object with value (\nfirst parameter to intialize AD object) to be numeric or a numpy array and partial derivative (second parameter to\nintialize AD object) to be also scalar numeric (**CANNOT** be array or list). Then they should input a string represents\nthe function to optimize with the variable named by `x_k` (see third line code below). User should be careful with\ninitial guess (value of the input AD object) because it plays an important role in convergence of Newton's method.\nThe `newton` function also allow other optional parameter such as learning rate and number of max iteration. Please\ncheck code documention for details.\n\nNewton's optimization with single scalar:\n\n```python\nfrom adxbw.optimization import newton\n\nx = AD(100, 1)  # 100 is the initial guess\nfunct = \"- x_k**2 - 2*x_k\"\ntemp_root = newton(funct, x)\n```\n\nNewton's optimization with single vector:\n\n```python\nx = AD(np.array([-2, -5, -8]), 1)\nfunct = \"- x_k**2 - 2*x_k\"\ntemp_root = newton(funct, x)\n```\n\nSee below ***Extension*** section for further Newton's method details.\n\n### Multivariate example:\n\nSuppose you have a function $f(x, y) = x + {y}^2$, needed to evaluate at (1,2).\n\n```python\n# numpy is imported as np in package, no need to re-import\n# build input node: multivariate case x = 1, y = 2;\nx = AD(1, np.array([1, 0]))\ny = AD(2, np.array([0, 1]))\n\nf = x + y ** 2\nprint(f.val)\nprint(f.partial_ders)\nprint(f)\n```\n\nOutput:\n\n```\n5\n[1 4]\nThe value and derivative of current function are 5 and [1 4]\n```\n\nNewton's optimization for multiple scalar variables:\n\n```python\nx = AD(-1, np.array([1, 0]))\ny = AD(2, np.array([0, 1]))\n# All values of the initial nodes should be scalar (single float/int)\n# Length of partial derivatives numpy array should correspond to number of variables\ntemp_dict = {\"x1\": x, \"x2\": y}\n# Initialize a dictionary with keys to be customized names of variables\n\n# Use keys of the dictionary to construct the representative function string\nfunct = \"x1.sin() - x2.cos()\"\n# First two parameters should be representative function string \n# and dictionary of the initial nodes\ntemp_root = newton_multi(funct, temp_dict, lr=0.05)\n```\n\nSimilar to single input newton's, users can set different learning rate, maximum iteration. See documentation in package\nfor details. (`help(adxbw.optimization.newton_multi)`)\n\n## Broader Impact and Inclusivity Statement\n\nAutomatic differentiation and its potential application in root finding are the corner stones in optimization problem.\nThis means that our package could be used beyond the mathematical world and more broadly in science and engineering.\n\nFor example, as computational biologists, from cell signaling to gene networks, we could model cellular and molecular\nprocesses using nonlinear equations, and root finding using AD will enable machine-level accuracy. This implementation\nof automatic differentiation provides a convenient way for users to calculate and evaluate values and derivatives of the\nfunctions. People who would like to use the partial derivatives for higher level computation do not have to calculate\nthe partial derivatives by hand and thus reduce a lot of unnecessary workload of the scientific researchers.\n\nHowever, the potential implementation errors in our package may cause negative impact when users don't realize it.\nNotably, there's no peer review process for developers to upload their packages onto any platform, such as conda and\nPyPI. The underlying bugs within the package won't be easily found by users. The misuse of those packages will\npotentially lead to error-borne results in those research project. Furthermore, the conclusion drawn or implications\nmade based on those erroneous results will presumably cause significant social impacts.\n\nFor example, the high school or college students who just get in touch with Calculus may misuse it that they rely\nheavily on the automatic differentiation tools to calculate derivatives. As a result, they may never learn about the\nmethmatical mechanism of differentiation calculation and thus a misuse of our tool may lead to an educational failure.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cs107-ucxbw/cs107-FinalProject/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adxbw",
    "package_url": "https://pypi.org/project/adxbw/",
    "platform": "",
    "project_url": "https://pypi.org/project/adxbw/",
    "project_urls": {
      "Homepage": "https://github.com/cs107-ucxbw/cs107-FinalProject/"
    },
    "release_url": "https://pypi.org/project/adxbw/0.1.5/",
    "requires_dist": [
      "numpy",
      "pytest",
      "setuptools"
    ],
    "requires_python": ">=3.8",
    "summary": "Automated differentiation tool developed by ucxbw",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12273398,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c59566fce62d72eb5894379634dd4ba228f26c73a898fd44e3d2da82fa84c8ae",
          "md5": "61f570610bce960725a7a28a7ece1d35",
          "sha256": "d411345f7a02521d707a53c3f21c24bd0b7410e133fec2bdc8b43726a236c68f"
        },
        "downloads": -1,
        "filename": "adxbw-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "61f570610bce960725a7a28a7ece1d35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13076,
        "upload_time": "2021-12-10T17:49:37",
        "upload_time_iso_8601": "2021-12-10T17:49:37.783745Z",
        "url": "https://files.pythonhosted.org/packages/c5/95/66fce62d72eb5894379634dd4ba228f26c73a898fd44e3d2da82fa84c8ae/adxbw-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7585f1d83de8181a7efcf852a087fb148230cca1b349645bb2818e7961a096f",
          "md5": "2763d50404114c61d01c87e45d073010",
          "sha256": "91b6cf70301e252463eeab7439b4edf7c1b9ee630c184d1b2e4521f2f5456cf5"
        },
        "downloads": -1,
        "filename": "adxbw-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2763d50404114c61d01c87e45d073010",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12042,
        "upload_time": "2021-12-11T03:41:06",
        "upload_time_iso_8601": "2021-12-11T03:41:06.747369Z",
        "url": "https://files.pythonhosted.org/packages/e7/58/5f1d83de8181a7efcf852a087fb148230cca1b349645bb2818e7961a096f/adxbw-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fdf04af3490880ee7ceba563ca09f89f3171331e784d655c1309d32a3464138",
          "md5": "51098952c1c6a065fff358faee70dea6",
          "sha256": "acb5ee5e7a20d5ca8bb0fc6a6a8dee31eb5566156cae892943849f7ca0cca52f"
        },
        "downloads": -1,
        "filename": "adxbw-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "51098952c1c6a065fff358faee70dea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13611,
        "upload_time": "2021-12-11T03:41:08",
        "upload_time_iso_8601": "2021-12-11T03:41:08.336245Z",
        "url": "https://files.pythonhosted.org/packages/1f/df/04af3490880ee7ceba563ca09f89f3171331e784d655c1309d32a3464138/adxbw-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2adff90751662ccfc3deb0bcfab8859687766339ae9b0094f01518c4eedce85",
          "md5": "62f0aae002ddbd20752270b553606b7e",
          "sha256": "8ec9b8fb847b5c449adca9c3a933f9d8a1fb893b5f462cb87c4df5f0c7eb0902"
        },
        "downloads": -1,
        "filename": "adxbw-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62f0aae002ddbd20752270b553606b7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12071,
        "upload_time": "2021-12-11T03:47:24",
        "upload_time_iso_8601": "2021-12-11T03:47:24.882126Z",
        "url": "https://files.pythonhosted.org/packages/c2/ad/ff90751662ccfc3deb0bcfab8859687766339ae9b0094f01518c4eedce85/adxbw-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51bab8d60ef20a0b1755ca92e5447a528313f9857ea99ee57139b9304367cbf4",
          "md5": "86e6dc612f266cd86809b6052f10c2cc",
          "sha256": "685d030a3b9e3d0a42c23aee2192ccfc4dad4ce04d230d42da5fe0d0d9496e10"
        },
        "downloads": -1,
        "filename": "adxbw-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "86e6dc612f266cd86809b6052f10c2cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17242,
        "upload_time": "2021-12-11T03:47:25",
        "upload_time_iso_8601": "2021-12-11T03:47:25.928560Z",
        "url": "https://files.pythonhosted.org/packages/51/ba/b8d60ef20a0b1755ca92e5447a528313f9857ea99ee57139b9304367cbf4/adxbw-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2adff90751662ccfc3deb0bcfab8859687766339ae9b0094f01518c4eedce85",
        "md5": "62f0aae002ddbd20752270b553606b7e",
        "sha256": "8ec9b8fb847b5c449adca9c3a933f9d8a1fb893b5f462cb87c4df5f0c7eb0902"
      },
      "downloads": -1,
      "filename": "adxbw-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62f0aae002ddbd20752270b553606b7e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12071,
      "upload_time": "2021-12-11T03:47:24",
      "upload_time_iso_8601": "2021-12-11T03:47:24.882126Z",
      "url": "https://files.pythonhosted.org/packages/c2/ad/ff90751662ccfc3deb0bcfab8859687766339ae9b0094f01518c4eedce85/adxbw-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51bab8d60ef20a0b1755ca92e5447a528313f9857ea99ee57139b9304367cbf4",
        "md5": "86e6dc612f266cd86809b6052f10c2cc",
        "sha256": "685d030a3b9e3d0a42c23aee2192ccfc4dad4ce04d230d42da5fe0d0d9496e10"
      },
      "downloads": -1,
      "filename": "adxbw-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "86e6dc612f266cd86809b6052f10c2cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 17242,
      "upload_time": "2021-12-11T03:47:25",
      "upload_time_iso_8601": "2021-12-11T03:47:25.928560Z",
      "url": "https://files.pythonhosted.org/packages/51/ba/b8d60ef20a0b1755ca92e5447a528313f9857ea99ee57139b9304367cbf4/adxbw-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}