{
  "info": {
    "author": "Batiste Bieler",
    "author_email": "batiste.bieler@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===========================================\nDjango tracker - Track users actions\n===========================================\n\n:Version: 0.0.1\n\nIntroduction\n============\n\nThis package is gonna give you an easy tool to track anonymous user\nactions on your website. You choose a label for an action and everytime\na user do this action you call the backend tracking method::\n\n    from tracker.models import Tracker\n    tracker = Tracker()\n    tracker.incr_labels(\"user_connected|user_clicked_button\")\n\nThis action will increment the counter for the \"user_connected\" and the \"user_clicked_button\" label.\nYou can also call the tracker from javascript if you install the tracker view::\n\n    from tracker.views import track, report\n\n    urlpatterns = patterns('',\n        ...\n        (r'^track/', track),\n    )\n\nAnd then you can visit the `/track/?labels=user_connected|user_clicked_button` and it will have the same effect. e.g. with jQuery::\n\n    function track(labels) {\n        $.ajax({\n            url: '/track/?labels='+labels,\n            dataType: 'text',\n            type: \"GET\",\n            error:function (xhr) {\n            }\n        });\n    }\n\n    track('user_connected|user_clicked_button')\n\nYou can also specify 2 extra informations separated by a colon::\n\n    track('user_connected:category:domId')\n\nThe category will help in the admin interface to filter your statistics. The dom id\ncan be used on a page to create a heat map. Here is simple example of how to use the dom_id information::\n\n    <div id=\"tracked-links\">\n    <a href=\"#1\" id=\"link1\">Test link 1</a>\n    <a href=\"#2\" id=\"link2\">Test link 2</a>\n    <a href=\"#3\" id=\"link3\">Test link 3</a>\n    <a href=\"#4\" id=\"link4\">Test link 4</a>\n    </div>\n\n    <p><a href=\"/report/\">Report the clicks in the database</a></p>\n    <p><a href=\"#\" id=\"get-stats\">Get the statistics</a></p>\n\n    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n    <script>\n        $('#tracked-links a').click(function(e) {\n            track('tracked-links-'+this.id+':links:'+this.id);\n        })\n\n        $('#get-stats').click(function(){\n            var dom_ids = \"\";\n            $.each($('#tracked-links a'), function(index, value) {\n                dom_ids += value.id + '|';\n            });\n            $.ajax({\n                url: '/get_stats/?dom_ids='+dom_ids,\n                dataType: 'json',\n                type: \"GET\",\n                error:function (xhr) {\n                },\n                success: function(data, textStatus, XMLHttpRequest) {\n                    for(stat in data)Â {\n                        var id = data[stat][0];\n                        var counter = data[stat][1];\n                        var label = data[stat][2];\n                        $('#'+id).text('clicked '+counter+ ' time.')\n                    }\n                }\n            });\n\n        });\n\n    </script>\n\nThis little script gather the id in the \"tracked-links\" div and make a request to the server to get the\nstatistics about them. The action counter is then displayed inside the links. Take a look at the testproj\nfor an working example.\n\n.. image:: http://github.com/batiste/django-tracker/raw/master/testproj/heatmap.png\n\n\nHow does it work?\n==================\n\nDjango tracker is easy on the database and is architectured to use memcache to count every action. To collect the\nmemcache informations you will need to do one of these::\n\n * Setup and call the `report` view every 2 minutes\n * Setup a cron that call tracker.models.make_daily_report function every 2 minutes\n * Setup the Celery task that is provided in `tracker.tasks`.\n\nIt also mean that you need to use memcache or at least the locmem cache backend (only if you have 1 server).\nIt might work with a database cache but it will not be the best configuration.\n\nAll the informations are stored in daily Statistic models (1 record by label and by day). Those models can be used directly in the admin interface\nto examine interesting metrics of your website.\n\nInstallation\n============\n\n    # python setup.py install # as root",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tracker",
    "package_url": "https://pypi.org/project/django-tracker/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-tracker/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-tracker/0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple statistic tracker",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 222534,
  "releases": {
    "0.0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}