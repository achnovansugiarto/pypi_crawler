{
  "info": {
    "author": "Chuanqi Tan",
    "author_email": "chuanqi.tan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "The Simplest and Most Powerful Concurrent Helper\n===============\n\nSetup\n===============\n```bash\npip install concurrent-helper\n```\n\n\nKey Features\n===============\n\n- Simplest and powerful, very easy to use, **only 2 core functions**.\n- Works well both on ``Python2`` and ``Python3``.\n- Support for multiple concurrent modes: ``thread pool, process pool and independent multi-processes``.\n- Support the mode of ``Message Queue + Service``.\n- Multiple progress bar display modes.\n\n\nQuick Start\n===============\n```python\nimport concurrent_helper\nimport os\n\n\ndef init(gpu_id):\n    os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(gpu_id)\n\n\ndef work(task_id, gpu_id=None):\n    if gpu_id is not None:\n        os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(gpu_id)\n\n    print(\"{}: I am working on {} for {}\".format(\n        os.getpid(),\n        os.environ.get(\"CUDA_VISIBLE_DEVICES\"),\n        task_id)\n    )\n    return task_id * 2\n\n\ntotal_gpu_num = 3\ntodos = [(x, x % total_gpu_num) for x in range(10)]\n\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"thread\")\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"process\")\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"x-process\")\n\nrtvs = concurrent_helper.run_with_message_queue(\n    init, list(range(3)),   # start 3 services\n    work, list(range(10))   # has 10 tasks to do\n)\n```\n\n\nCore Function: run_with_concurrent\n===============\n\n```python\ndef run_with_concurrent(\n    func,\n    args_list,\n    concurrent_type=\"thread\",  # [\"single\", \"thread\", \"process\", \"x-process\"]\n    concurrent_num=1,\n    show_process=\"print\",  # [\"\", \"tqdm\", \"print\"]\n    show_interval=0.01,\n):\n    pass\n```\n\nRun a function by concurrent mode.\n\n\nKey Params\n--------------\n\n``concurrent_type``:\n\n| Param Value | Description                 |\n| ----------- | ----------------------------|\n| single      | like normal for-loop        |\n| thread      | thread pool                 |\n| process     | process pool                |\n| x-process   | independent multi-processes |\n\nWarning:\n\n> Arrocding to this issue: <https://github.com/agronholm/pythonfutures/issues/29>, there is a bug in ``concurrent.futures`` of Python2.\nThe relevant fix upstream uses Python 3 features and cannot be backported.\n\n> This bug only happen when child-process killed by system (for exapmle, memory overflow). If you encounter this problem, use the ``x-process`` instead of ``process`` when you are using Python2.\n\n\n``show_process``:\n\n| Param Value | Description                 |\n| ----------- | ----------------------------|\n| \"\"          | don't show process          |\n| tqdm        | use tqdm style process bar  |\n| print       | print process bar info      |\n\nWarning:\n\n> Please note that tqdm is not thread safe, use print if you need the guarantee of thread safe.\n\n\n``show_interval``:\n\n| Param Value | Description                         |\n| ----------- | ------------------------------------|\n| >= 1        | update progress bar by every N task |\n| < 1         | update progress bar by percentage   |\n\n\nCore Function: run_with_message_queue\n===============\n\n```python\ndef run_with_message_queue(\n    init_func,\n    init_args_list,  # concurrent_num == len(init_args_list)\n    func,\n    args_list,\n    show_process=\"print\",  # [\"\", \"tqdm\", \"print\"]\n    show_interval=0.01,\n):\n    pass\n```\n\nRun function by ``Message Queue + Service`` mode.\n\n> Fist, start N (``N=len(init_args_list)``) services, these services will inited by ``init_func``. \n> \n> After that, these services will obtain M (``M=len(args_list)``) tasks from message queue and run these by ``func``.\n\nWhy we need ``Message Queue + Service`` mode?\n\n> In order to maximize resource utilization (like GPU), we should to start a certain number of services according to the number of resources. Then, these services will obtain tasks from the message queue and run them.\n\n\nExamples\n===============\n```python\nimport concurrent_helper\nimport os\n\n\ndef init(gpu_id):\n    os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(gpu_id)\n\n\ndef work(task_id, gpu_id=None):\n    if gpu_id is not None:\n        os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(gpu_id)\n\n    print(\"{}: I am working on {} for {}\".format(\n        os.getpid(),\n        os.environ.get(\"CUDA_VISIBLE_DEVICES\"),\n        task_id)\n    )\n    return task_id * 2\n\n\ntotal_gpu_num = 3\ntodos = [(x, x % total_gpu_num) for x in range(5)]\n\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"thread\", 3)\nprint(\"----\")\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"process\", 3)\nprint(\"----\")\nrtvs = concurrent_helper.run_with_concurrent(work, todos, \"x-process\", 3, \"tqdm\")\nprint(\"----\")\nrtvs = concurrent_helper.run_with_message_queue(\n    init, list(range(3)),\n    work, list(range(5))\n)\nprint(rtvs)\n```\n\noutputs:\n\n```bash\n37059: I am working on 0 for 0\n37059: I am working on 1 for 1\n37059: I am working on 2 for 2\n[    1/5    ] ...... Fns work with thread ...... in     0.0001 seconds.\n37059: I am working on 0 for 3\n37059: I am working on 1 for 4\n[    2/5    ] ...... Fns work with thread ...... in     0.0001 seconds.\n[    3/5    ] ...... Fns work with thread ...... in     0.0003 seconds.\n[    4/5    ] ...... Fns work with thread ...... in     0.0002 seconds.\n[    5/5    ] ...... Fns work with thread ...... in     0.0001 seconds.\n>>>>>> Fns 5 work with thread total use     0.0020 seconds.\n----\n37063: I am working on 0 for 0\n37064: I am working on 1 for 1\n37064: I am working on 0 for 3\n37065: I am working on 2 for 2\n37063: I am working on 1 for 4\n[    1/5    ] ...... Fns work with process ...... in     0.0003 seconds.\n[    2/5    ] ...... Fns work with process ...... in     0.0003 seconds.\n[    3/5    ] ...... Fns work with process ...... in     0.0000 seconds.\n[    4/5    ] ...... Fns work with process ...... in     0.0000 seconds.\n[    5/5    ] ...... Fns work with process ...... in     0.0006 seconds.\n>>>>>> Fns 5 work with process total use     0.0126 seconds.\n----\n37066: I am working on 0 for 0\n37067: I am working on 1 for 1\n37068: I am working on 2 for 2\n37069: I am working on 0 for 3\n37070: I am working on 1 for 4\n[work / x-process]: 100%|█████████████████| 5/5 [00:00<00:00, 346.26it/s]\n----\n37074: I am working on 0 for 0\n37075: I am working on 1 for 1\n37076: I am working on 2 for 2\n[    1/1    ] ...... Fns work with x-process ...... in     0.0003 seconds.\n>>>>>> Fns 1 work with x-process total use     0.0085 seconds.\n[    1/1    ] ...... Fns work with x-process ...... in     0.0004 seconds.\n[    1/5    ] ...... Fns work with run_with_message_queue ...... in     0.0090 seconds.\n>>>>>> Fns 1 work with x-process total use     0.0090 seconds.\n[    1/1    ] ...... Fns work with x-process ...... in     0.0003 seconds.\n>>>>>> Fns 1 work with x-process total use     0.0087 seconds.\n[    2/5    ] ...... Fns work with run_with_message_queue ...... in     0.0093 seconds.\n[    3/5    ] ...... Fns work with run_with_message_queue ...... in     0.0090 seconds.\n37077: I am working on 0 for 3\n37078: I am working on 1 for 4\n[    1/1    ] ...... Fns work with x-process ...... in     0.0003 seconds.\n>>>>>> Fns 1 work with x-process total use     0.0061 seconds.\n[    4/5    ] ...... Fns work with run_with_message_queue ...... in     0.0063 seconds.\n[    1/1    ] ...... Fns work with x-process ...... in     0.0003 seconds.\n>>>>>> Fns 1 work with x-process total use     0.0060 seconds.\n[    5/5    ] ...... Fns work with run_with_message_queue ...... in     0.0061 seconds.\n>>>>>> Fns 5 work with run_with_message_queue total use     0.0182 seconds.\n[0, 2, 4, 6, 8]\n```\n\n\nTODO\n===============\n\n- [DONE] Test codes.\n- [DONE] Detail docs & English describe about ``run_with_message_queue`` & More code examples.\n- [DONE] Add params ``show_process, show_interval`` to ``run_with_message_queue``.\n- [DONE] Remove ``raise_exception`` param, it will be default action.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ChuanqiTan/concurrent_helper",
    "keywords": "concurrent run_with_message_queue run_with_concurrent multithread multiprocess",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "concurrent-helper",
    "package_url": "https://pypi.org/project/concurrent-helper/",
    "platform": null,
    "project_url": "https://pypi.org/project/concurrent-helper/",
    "project_urls": {
      "Homepage": "https://github.com/ChuanqiTan/concurrent_helper"
    },
    "release_url": "https://pypi.org/project/concurrent-helper/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The Simplest and Most Powerful Concurrent Helper",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14194762,
  "releases": {
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e9bfc8165b9ed210e85e4c8f6d66ac4c1af0f4a3b53e191dc9a01631c00475f",
          "md5": "cc33b1f8009e8a22b257df3d3aa09c0d",
          "sha256": "ec1772013f87426ee6b5f2c90c1ed3343b73fc206eb0b4d4ca8216337b18958c"
        },
        "downloads": -1,
        "filename": "concurrent_helper-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "cc33b1f8009e8a22b257df3d3aa09c0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5383,
        "upload_time": "2022-06-07T09:17:44",
        "upload_time_iso_8601": "2022-06-07T09:17:44.606149Z",
        "url": "https://files.pythonhosted.org/packages/3e/9b/fc8165b9ed210e85e4c8f6d66ac4c1af0f4a3b53e191dc9a01631c00475f/concurrent_helper-0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd28e56043304749be80fc59a8742328dd5b309f6d5c8e9d715c3e0ec93a4ea1",
          "md5": "7b3c466c47b4a8fe7c55b1b2dff294bf",
          "sha256": "120b6cdeb417a25cf34aebc594ef39a0b3602b55905257bf009dcba104cfdee9"
        },
        "downloads": -1,
        "filename": "concurrent_helper-0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "7b3c466c47b4a8fe7c55b1b2dff294bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5508,
        "upload_time": "2022-06-07T09:52:43",
        "upload_time_iso_8601": "2022-06-07T09:52:43.651878Z",
        "url": "https://files.pythonhosted.org/packages/bd/28/e56043304749be80fc59a8742328dd5b309f6d5c8e9d715c3e0ec93a4ea1/concurrent_helper-0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c3dda010b7ef8eeaf0e5afa55a1d074ea7789878942509223fc71bbc08073ef",
          "md5": "b74a59c0214de19df519d10fa7c7f679",
          "sha256": "e14f2767e7d0c070f6f7a93ffab9a59d01d47a0b20ff0dfb1be6d590310c366e"
        },
        "downloads": -1,
        "filename": "concurrent_helper-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b74a59c0214de19df519d10fa7c7f679",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6886,
        "upload_time": "2022-06-09T03:58:05",
        "upload_time_iso_8601": "2022-06-09T03:58:05.431451Z",
        "url": "https://files.pythonhosted.org/packages/8c/3d/da010b7ef8eeaf0e5afa55a1d074ea7789878942509223fc71bbc08073ef/concurrent_helper-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f26f1387c88472d93da7850901befbd2ffe951e2bde85776d43702d36608177b",
          "md5": "ad4c0847bedc05a877f3544291ad880a",
          "sha256": "8780d3f6fb2ac0aa18a31797813d8311f461e7e3defefcdb7e167ae93433b059"
        },
        "downloads": -1,
        "filename": "concurrent_helper-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad4c0847bedc05a877f3544291ad880a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6947,
        "upload_time": "2022-06-21T04:03:10",
        "upload_time_iso_8601": "2022-06-21T04:03:10.013969Z",
        "url": "https://files.pythonhosted.org/packages/f2/6f/1387c88472d93da7850901befbd2ffe951e2bde85776d43702d36608177b/concurrent_helper-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f26f1387c88472d93da7850901befbd2ffe951e2bde85776d43702d36608177b",
        "md5": "ad4c0847bedc05a877f3544291ad880a",
        "sha256": "8780d3f6fb2ac0aa18a31797813d8311f461e7e3defefcdb7e167ae93433b059"
      },
      "downloads": -1,
      "filename": "concurrent_helper-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ad4c0847bedc05a877f3544291ad880a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6947,
      "upload_time": "2022-06-21T04:03:10",
      "upload_time_iso_8601": "2022-06-21T04:03:10.013969Z",
      "url": "https://files.pythonhosted.org/packages/f2/6f/1387c88472d93da7850901befbd2ffe951e2bde85776d43702d36608177b/concurrent_helper-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}