{
  "info": {
    "author": "Yury Lysogorskiy, Anton Bochkarev, Sarath Menon, Ralf Drautz",
    "author_email": "yury.lysogorskiy@rub.de",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyace\n\n`pyace` is the python implementation of Atomic Cluster Expansion.\nIt provides the basis functionality for analysis, potentials conversion and fitting.\n!!! THIS IS LIMITED FUNCTIONALITY VERSION OF `pyace` !!! \n\nPlease, contact us by email yury.lysogorskiy@rub.de if you want to have fully-functional version\n\n## Installation\n\n```\npip install pyace-lite\n```\n\n### (optional) Installation of `tensorpotential`  \nIf you want to use `TensorFlow` implementation of atomic cluster expansion \n(made by *Dr. Anton Bochkarev*), then contact us by email.\n\n### (!) Known issues\nIf you will encounter `segmentation fault` errors,  then try to upgrade the `numpy` package with the command:\n```\npip install --upgrade numpy --force \n```\n\n## Directory structure\n\n- **lib/**: contains the extra libraries for `pyace`\n- **src/pyace/**: bindings\n\n# Utilities\n## Potential conversion\n\nThere are **two** basic formats ACE potentials:\n\n1. **B-basis set** in YAML format, i.e. 'Al.pbe.yaml'. This is an internal developers *complete* format \n2. **Ctilde-basis set** in plain text format, i.e. 'Al.pbe.ace'. This format is *irreversibly* converted from *B-basis set* for\npublic potentials distribution and is used by LAMMPS.\n\nTo convert potential you can use following utilities, that are installed together with `pyace` package into you executable paths:\n  * `YAML` to `ace` : `pace_yaml2ace`. Usage:\n```\n  pace_yaml2ace [-h] [-o OUTPUT] input\n```\n\n## Pacemaker\n\n`pacemaker` is an utility for fitting the atomic cluster expansion potential. Usage:\n\n```\npacemaker [-h] [-o OUTPUT] [-p POTENTIAL] [-ip INITIAL_POTENTIAL]\n                 [-b BACKEND] [-d DATA] [--query-data] [--prepare-data]\n                 [-l LOG]\n                 input\n\nFitting utility for atomic cluster expansion potentials\n\npositional arguments:\n  input                 input YAML file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        output B-basis YAML file name, default:\n                        output_potential.yaml\n  -p POTENTIAL, --potential POTENTIAL\n                        input potential YAML file name, will override input\n                        file 'potential' section\n  -ip INITIAL_POTENTIAL, --initial-potential INITIAL_POTENTIAL\n                        initial potential YAML file name, will override input\n                        file 'potential::initial_potential' section\n  -b BACKEND, --backend BACKEND\n                        backend evaluator, will override section\n                        'backend::evaluator' from input file\n  -d DATA, --data DATA  data file, will override section 'YAML:fit:filename'\n                        from input file\n  --query-data          query the training data from database, prepare and\n                        save them\n  --prepare-data        prepare and save training data only\n  -l LOG, --log LOG     log filename (default log.txt)\n``` \n\nThe required settings are provided by input YAML file. The main sections\n#### 1. Cutoff and  (optional) metadata\n\n* Global cutoff for the fitting is setup as:\n\n```YAML\ncutoff: 10.0\n```\n\n* Metadata (optional)\n\nThis is arbitrary key (string)-value (string) pairs that would be added to the potential YAML file: \n```YAML\nmetadata:\n  info: some info\n  comment: some comment\n  purpose: some purpose\n```\nMoreover, `starttime` and `user` fields would be added automatically\n\n#### 2.Dataset specification section\nFitting dataset could be queried automatically from `structdb` (if corresponding `structdborm` package is installed and \nconnection to database is configured, see `structdb.ini` file in home folder). Alternatively, dataset could be saved into\nfile as a pickled `pandas` dataframe with special names for columns: #TODO: add columns names\n\nExample:\n```YAML\ndata: # dataset specification section\n  # data configuration section\n  config:\n    element: Al                    # element name\n    calculator: FHI-aims/PBE/tight # calculator type from `structdb` \n    # ref_energy: -1.234           # single atom reference energy\n                                   # if not specified, then it will be queried from database\n\n  # seed: 42                       # random seed for shuffling the data  \n  # query_limit: 1000              # limiting number of entries to query from `structdb`\n                                   # ignored if reading from cache\n\n  # parallel: 3                    # number of parallel workers to preprocess the data, `pandarallel` package required\n                                   # if not specified, serial mode will be used \n  # cache_ref_df: True             # whether to store the queried or modified dataset into file, default - True\n  # filename: some.pckl.gzip       # force to read reference pickled dataframe from given file\n  # ignore_weights: False          # whether to ignore energy and force weighting columns in dataframe\n  # datapath: ../data              # path to folder with cache files with pickled dataframes \n```\nAlternatively, instead of `data::config` section, one can specify just the cache file \nwith pickled dataframe as `data::filename`:\n```YAML\ndata: \n  filename: small_df_tf_atoms.pckl\n  datapath: ../tests/\n```\n\nExample of creating the **subselection of fitting dataframe** and saving it is given in `notebooks/data_preprocess.ipynb`\n\nExample of generating **custom energy/forces weights** is given in `notebooks/data_custom_weights.ipynb`\n\n##### Querying data\nYou can just query and preprocess data, without running potential fitting.\nHere is the minimalistic input YAML:\n\n```YAML\n# input.yaml file\n\ncutoff: 10.0  # use larger cutoff to have excess neighbour list\ndata: # dataset specification section\n  config:\n    element: Al                    # element name\n    calculator: FHI-aims/PBE/tight # calculator type from `structdb`\n  seed: 42\n  parallel: 3                      # parallel data processing. WARNING! higher memory usage is possible\n  datapath: ../data                # path to the directory with cache files\n  # query_limit: 100               # number of entries to query  \n```\n\nThen execute `pacemaker --query-data input.yaml` to query and build the dataset with `pyace` neighbour lists.\nFor building *both* `pyace` and `tensorpot` neighbour lists use `pacemaker --query-data input.yaml -b tensorpot`\n\n##### Preparing the data / constructing neighbourlists\nYou can use existing `.pckl.gzip` dataset and generate all necessary columns for that, including neighbourlists\nHere is the minimalistic input YAML:\n\n```YAML\n# input.yaml file\n\ncutoff: 10.\n\ndata:\n  filename: my_dataset.pckl.gzip\n\nbackend:\n  evaluator: tensorpot  # pyace, tensorpot\n\n```\n\nThen execute `pacemaker --prepare-data input.yaml`\nGeneration of the `my_dataset.pckl.gzip` from, for example, *pyiron* is shown in `notebooks/convert-pyiron-to-pacemaker.ipynb` \n\n#### 3. Interatomic potential (or B-basis) configuration\nOne could define the initial interatomic potential configuration as:\n```YAML\npotential:\n  deltaSplineBins: 0.001\n  element: Al\n  fs_parameters: [1, 1, 1, 0.5]\n  npot: FinnisSinclair\n  NameOfCutoffFunction: cos\n\n  rankmax: 3\n  nradmax: [ 4, 3, 3 ]  # per-rank values of nradmax\n  lmax: [ 0, 1, 1 ]     # per-rank values of lmax,  lmax=0 for first rank always!\n\n  ndensity: 2\n  rcut: 8.7\n  dcut: 0.01\n  radparameters: [ 5.25 ]\n  radbase: ChebExpCos\n\n ##hard-core repulsion (optional)\n # core-repulsion: [500, 10]\n # rho_core_cut: 50\n # drho_core_cut: 20\n\n # basisdf:  /some/path/to/pyace_bbasisfunc_df.pckl      # path to the dataframe with \"white list\" of basis functions to use in fit\n # initial_potential: whatever.yaml                      # in \"ladder\" fitting scheme, potential from with to start fit\n```\nIf you want to continue fitting of the existing potential in `potential.yaml` file, then specify\n```YAML\npotential: potential yaml\n```\n\nAlternatively, one could use `pacemaker ... -p potential.yaml ` option\n\n\n#### 4. Fitting settings\nExample of `fit` section is:\n```YAML\nfit:\n  loss: { kappa: 0, L1_coeffs: 0,  L2_coeffs: 0,  w1_coeffs: 0, w2_coeffs: 0,\n          w0_rad: 0, w1_rad: 0, w2_rad: 0 }\n\n  weighting:\n   type: EnergyBasedWeightingPolicy\n    nfit: 10000\n    cutoff: 10\n    DElow: 1.0\n    DEup: 10.0\n    DE: 1.0\n    DF: 1.0\n    wlow: 0.75\n   seed: 42\n\n  optimizer: BFGS # L-BFGS-B # Nelder-Mead\n  maxiter: 1000\n\n  # fit_cycles: 2               # (optional) number of consequentive runs of fitting algorithm,\n                                # that helps convergence \n  # noise_relative_sigma: 1e-2   # applying Gaussian noise with specified relative sigma/mean ratio to all potential optimizable coefficients\n  # noise_absolute_sigma: 1e-3   # applying Gaussian noise with specified absolute sigma to all potential optimizable coefficients\n  # ladder_step: [10, 0.02]     # Possible values:\n                                #  - integer >= 1 - number of basis functions to add in ladder scheme,\n                                #  - float between 0 and 1 - relative ladder step size wrt. current basis step\n                                #  - list of both above values - select maximum between two possibilities on each iteration \n                                # see. Ladder scheme fitting for more info \n  # ladder_type: body_order     # default\n                                # Possible values:\n                                # body_order  -  new basis functions are added according to the body-order, i.e., a function with higher body-order\n                                #                will not be added until the list of functions of the previous body-order is exhausted\n                                # power_order -  the order of adding new basis functions is defined by the \"power rank\" p of a function.\n                                #                p = len(ns) + sum(ns) + sum(ls). Functions with the smallest p are added first  \n```\nIf not specified, then *uniform weight* and *energy-only* fit (kappa=0),\n *fit_cycles*=1, *noise_relative_sigma* = 0 settings will be used. \n\n#### 5. Backend specification\n```YAML\nbackend:\n  evaluator: pyace  # pyace, tensorpot\n\n  ## for `pyace` evaluator, following options are available:\n  # parallel_mode: process    # process, serial  - parallelization mode for `pyace` evaluator\n  # n_workers: 4              # number of parallel workers for `process` parallelization mode\n\n  ## for `tensorpot` evaluator, following options are available:\n  # batch_size: 10            # batch size for loss function evaluation, default is 10 \n  # display_step: 20          # frequency of detailed metric calculation and printing  \n```\nAlternatively, backend could be selected as `pacemaker ... -b tensorpot` \n\n##  Ladder scheme fitting \nIn a ladder scheme potential fitting happens by adding new portion of basis functions step-by-step,\nto form a \"ladder\" from *initial potential* to *final potential*. Following settings should be added to\nthe input YAML file:\n\n* Specify *final potential* shape by providing `potential` section:\n```yaml\npotential:\n  deltaSplineBins: 0.001\n  element: Al\n  fs_parameters: [1, 1, 1, 0.5]\n  npot: FinnisSinclair\n  NameOfCutoffFunction: cos\n  rankmax: 3\n\n  nradmax: [4, 1, 1]\n  lmax: [0, 1, 1]\n\n  ndensity: 2\n  rcut: 8.7\n  dcut: 0.01\n  radparameters: [5.25]\n  radbase: ChebExpCos \n```\n\n* Specify *initial or intermediate potential* by providing `initial_potential` option in `potential` section: \n```yaml\npotential:\n\n    ...\n\n    initial_potential: some_start_or_interim_potential.yaml    # potential to start fit from\n```\nIf *initial or intermediate potential* is not specified, then fit will start from empty potential. \nAlternatively, you can specify *initial or intermediate potential* by command-line option\n\n`pacemaker ... -ip some_start_or_interim_potential.yaml `\n\n* Specify `ladder_step` in `fit` section:\n```yaml\nfit:\n\n    ...\n\n  ladder_step: [10, 0.02]       # Possible values:\n                                #  - integer >= 1 - number of basis functions to add in ladder scheme,\n                                #  - float between 0 and 1 - relative ladder step size wrt. current basis step\n                                #  - list of both above values - select maximum between two possibilities on each iteration \n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.noc.ruhr-uni-bochum.de/atomicclusterexpansion/pyace",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyace-lite",
    "package_url": "https://pypi.org/project/pyace-lite/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyace-lite/",
    "project_urls": {
      "Homepage": "https://git.noc.ruhr-uni-bochum.de/atomicclusterexpansion/pyace"
    },
    "release_url": "https://pypi.org/project/pyace-lite/0.0.1.5/",
    "requires_dist": [
      "numpy",
      "ase",
      "pandas",
      "ruamel.yaml"
    ],
    "requires_python": "",
    "summary": "Python bindings, utilities for PACE and fitting code \"pacemaker\"",
    "version": "0.0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9547050,
  "releases": {
    "0.0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaa00a4ed0f7d057a3e4af79c813c0b43cd322f45944d82f9a067111c1cdcd46",
          "md5": "ada68770d30ac71b3a2ab0e219bd1a1f",
          "sha256": "b955d4a39fbc36a84e1d845e40c97414579630f9c189d8215c311e83e1e438cb"
        },
        "downloads": -1,
        "filename": "pyace_lite-0.0.1.5-cp36-cp36m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ada68770d30ac71b3a2ab0e219bd1a1f",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1850818,
        "upload_time": "2021-02-27T23:52:40",
        "upload_time_iso_8601": "2021-02-27T23:52:40.969489Z",
        "url": "https://files.pythonhosted.org/packages/ea/a0/0a4ed0f7d057a3e4af79c813c0b43cd322f45944d82f9a067111c1cdcd46/pyace_lite-0.0.1.5-cp36-cp36m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64efa97723ffa7f99842644720025edf53095192fe9f1cc432ed3960345487df",
          "md5": "bb4d126fba5bc5fbf14441ebd2c055de",
          "sha256": "87ef2d6a4a4664e632cba134278d7ed74183663c742bdc475397efc0b64bbe98"
        },
        "downloads": -1,
        "filename": "pyace_lite-0.0.1.5-cp37-cp37m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "bb4d126fba5bc5fbf14441ebd2c055de",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1851079,
        "upload_time": "2021-02-27T23:52:43",
        "upload_time_iso_8601": "2021-02-27T23:52:43.587918Z",
        "url": "https://files.pythonhosted.org/packages/64/ef/a97723ffa7f99842644720025edf53095192fe9f1cc432ed3960345487df/pyace_lite-0.0.1.5-cp37-cp37m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4192a0becfcbfb28dff84b6322d317513b144767718ddd1db5057b6692d6d08d",
          "md5": "4a6f8d733c0f034329afb6e143443aba",
          "sha256": "e4cbe6749f0304b394653a49c10a9d0944d2c343c2c8769eed5a732f2b085be1"
        },
        "downloads": -1,
        "filename": "pyace_lite-0.0.1.5-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4a6f8d733c0f034329afb6e143443aba",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 1811460,
        "upload_time": "2021-02-27T23:52:45",
        "upload_time_iso_8601": "2021-02-27T23:52:45.474053Z",
        "url": "https://files.pythonhosted.org/packages/41/92/a0becfcbfb28dff84b6322d317513b144767718ddd1db5057b6692d6d08d/pyace_lite-0.0.1.5-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3939789dea872e7b08be8d6c13382879de1051778cc07433fa45c77e5ab9151",
          "md5": "87b235782009e4e46c530f714489b205",
          "sha256": "7cb46757dff7d7938dd638172a817215d4a37387d2ef57f8a03a4c64084ddda0"
        },
        "downloads": -1,
        "filename": "pyace_lite-0.0.1.5-cp39-cp39-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "87b235782009e4e46c530f714489b205",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1811891,
        "upload_time": "2021-02-27T23:52:47",
        "upload_time_iso_8601": "2021-02-27T23:52:47.609291Z",
        "url": "https://files.pythonhosted.org/packages/f3/93/9789dea872e7b08be8d6c13382879de1051778cc07433fa45c77e5ab9151/pyace_lite-0.0.1.5-cp39-cp39-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d140e3c76eadf40c2585003f82c7061a7b6c920ed53303743fdcae7eb71dab5",
          "md5": "b74a357903fcc5a101e954214c2b4c3c",
          "sha256": "39f71af4cd217a47f31bf6bed78f7e9529fcdd162ab87e28cb53c7b9e771f037"
        },
        "downloads": -1,
        "filename": "pyace-lite-0.0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b74a357903fcc5a101e954214c2b4c3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48566,
        "upload_time": "2021-02-27T23:52:48",
        "upload_time_iso_8601": "2021-02-27T23:52:48.767856Z",
        "url": "https://files.pythonhosted.org/packages/7d/14/0e3c76eadf40c2585003f82c7061a7b6c920ed53303743fdcae7eb71dab5/pyace-lite-0.0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaa00a4ed0f7d057a3e4af79c813c0b43cd322f45944d82f9a067111c1cdcd46",
        "md5": "ada68770d30ac71b3a2ab0e219bd1a1f",
        "sha256": "b955d4a39fbc36a84e1d845e40c97414579630f9c189d8215c311e83e1e438cb"
      },
      "downloads": -1,
      "filename": "pyace_lite-0.0.1.5-cp36-cp36m-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ada68770d30ac71b3a2ab0e219bd1a1f",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 1850818,
      "upload_time": "2021-02-27T23:52:40",
      "upload_time_iso_8601": "2021-02-27T23:52:40.969489Z",
      "url": "https://files.pythonhosted.org/packages/ea/a0/0a4ed0f7d057a3e4af79c813c0b43cd322f45944d82f9a067111c1cdcd46/pyace_lite-0.0.1.5-cp36-cp36m-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64efa97723ffa7f99842644720025edf53095192fe9f1cc432ed3960345487df",
        "md5": "bb4d126fba5bc5fbf14441ebd2c055de",
        "sha256": "87ef2d6a4a4664e632cba134278d7ed74183663c742bdc475397efc0b64bbe98"
      },
      "downloads": -1,
      "filename": "pyace_lite-0.0.1.5-cp37-cp37m-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "bb4d126fba5bc5fbf14441ebd2c055de",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 1851079,
      "upload_time": "2021-02-27T23:52:43",
      "upload_time_iso_8601": "2021-02-27T23:52:43.587918Z",
      "url": "https://files.pythonhosted.org/packages/64/ef/a97723ffa7f99842644720025edf53095192fe9f1cc432ed3960345487df/pyace_lite-0.0.1.5-cp37-cp37m-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4192a0becfcbfb28dff84b6322d317513b144767718ddd1db5057b6692d6d08d",
        "md5": "4a6f8d733c0f034329afb6e143443aba",
        "sha256": "e4cbe6749f0304b394653a49c10a9d0944d2c343c2c8769eed5a732f2b085be1"
      },
      "downloads": -1,
      "filename": "pyace_lite-0.0.1.5-cp38-cp38-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4a6f8d733c0f034329afb6e143443aba",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 1811460,
      "upload_time": "2021-02-27T23:52:45",
      "upload_time_iso_8601": "2021-02-27T23:52:45.474053Z",
      "url": "https://files.pythonhosted.org/packages/41/92/a0becfcbfb28dff84b6322d317513b144767718ddd1db5057b6692d6d08d/pyace_lite-0.0.1.5-cp38-cp38-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3939789dea872e7b08be8d6c13382879de1051778cc07433fa45c77e5ab9151",
        "md5": "87b235782009e4e46c530f714489b205",
        "sha256": "7cb46757dff7d7938dd638172a817215d4a37387d2ef57f8a03a4c64084ddda0"
      },
      "downloads": -1,
      "filename": "pyace_lite-0.0.1.5-cp39-cp39-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "87b235782009e4e46c530f714489b205",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 1811891,
      "upload_time": "2021-02-27T23:52:47",
      "upload_time_iso_8601": "2021-02-27T23:52:47.609291Z",
      "url": "https://files.pythonhosted.org/packages/f3/93/9789dea872e7b08be8d6c13382879de1051778cc07433fa45c77e5ab9151/pyace_lite-0.0.1.5-cp39-cp39-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d140e3c76eadf40c2585003f82c7061a7b6c920ed53303743fdcae7eb71dab5",
        "md5": "b74a357903fcc5a101e954214c2b4c3c",
        "sha256": "39f71af4cd217a47f31bf6bed78f7e9529fcdd162ab87e28cb53c7b9e771f037"
      },
      "downloads": -1,
      "filename": "pyace-lite-0.0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b74a357903fcc5a101e954214c2b4c3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48566,
      "upload_time": "2021-02-27T23:52:48",
      "upload_time_iso_8601": "2021-02-27T23:52:48.767856Z",
      "url": "https://files.pythonhosted.org/packages/7d/14/0e3c76eadf40c2585003f82c7061a7b6c920ed53303743fdcae7eb71dab5/pyace-lite-0.0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}