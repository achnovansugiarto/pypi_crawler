{
  "info": {
    "author": "Hao Zhang",
    "author_email": "haozhang@alumni.princeton.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# odmd\nA python package for online dynamic mode decomposition (Online DMD) and window dynamic mode decomposition (Window DMD) algorithms proposed in this [paper](https://epubs.siam.org/doi/pdf/10.1137/18M1192329). For matlab implementation, see [this repo](https://github.com/haozhg/odmd-matlab).\n\nTo get started,\n```\npip install odmd --upgrade\n```\n\nA variant of this algorithm for efficient data-driven online model learning (system identification) and control is implemented in [osysid](https://github.com/haozhg/osysid) (try `pip install osysid --upgrade`). This algorithm has been show to be effective for flow separation control, see this [paper](https://doi.org/10.1017/jfm.2020.546) for more details.\n\n## Showcase: 2D linear time-varying system\nWe take a 2D time-varying system given by \n- dx/dt = A(t)x\n\nwhere x = [x1,x2]', A(t) = [0, w(t); -w(t), 0], w(t)=1+epsilon*t, epsilon=0.1. The slowly time-varying eigenvlaues of A(t) are pure imaginary, +(1+0.1t)j and -(1+0.1t)j, where j is the imaginary unit.\n\nHere we show how the proposed algorithm can be used to learn a model of the system. For more detail, see [demo](https://github.com/haozhg/odmd/tree/master/demo).\n\n### Time-varying state evolution\nThe system is oscillating with increasing frequency (frequency increased from 1 to 2 in 10 secs).\n<p align=\"center\">\n  <img src=\"assets/state.png\" width=\"400\" />\n</p>\n\n### Tracking eigenvalues with online/window DMD\nIf we apply online/window DMD, the learned model can track the time-varying eigenvalues very well. \n- Online DMD with weighting factor makes the learned model much more adaptive and tracks the true eigenvalues closely.\n- Window DMD is designed to better track time-varying dynamics, even if no weighting is used.\n\n<p align=\"center\">\n  <img src=\"assets/online_eval.png\" width=\"400\" />\n  <img src=\"assets/window_eval.png\" width=\"400\" /> \n</p>\n\n## Hightlights\nHere are some hightlights about this algorithm, and for more detail please refer to this [paper](https://epubs.siam.org/doi/pdf/10.1137/18M1192329)\n\n- Efficient data-driven online linear/nonlinear model learning (system identification). Any nonlinear and/or time-varying system is locally linear, as long as the model is updated in real-time wrt to new measurements.\n- It finds the exact optimal solution (in the sense of least square error), without any approximation (unlike stochastic gradient descent). \n- It achieves theoretical optimal time and space complexity. \n- The time complexity (flops for one iteration) is O(n^2), where n is state dimension. This is much faster than standard algorithm O(n^2 * t), where t is the current time step (number of measurements). In online applications, t >> n and essentially will go to infinity.\n- The space complexity is O(n^2), which is far more efficient than standard algorithm O(n * t) (t >> n).\n- A weighting factor (in (0, 1]) can be used to place more weight on recent data, thus making the model more adaptive.\n- It has been successfully applied to flow separation control problem, and achived real-time closed loop control. See this [paper](https://doi.org/10.1017/jfm.2020.546) for details.\n\n## Install\n### Use pip\n```\npip install odmd --upgrade\n```\n\n### Manual install\nCreate virtual env if needed\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\nClone from github and install\n```\ngit clone https://github.com/haozhg/odmd.git\ncd odmd/\npython3 -m pip install -e .\n```\n\n### Test\nTo run tests\n```\ncd tests/\npip install r requirements.txt\npython -m pytest .\n```\n\n## Algorithm Description\nThis is a brief introduction to the algorithm. For full technical details, see this [paper](https://epubs.siam.org/doi/pdf/10.1137/18M1192329), and chapter 3 and chapter 7 of this [PhD thesis](http://arks.princeton.edu/ark:/88435/dsp0108612r49q).\n\n### Unknown dynamical system\nSuppose we have a (discrete) nonlinear and/or time-varying [dynamical system](https://en.wikipedia.org/wiki/State-space_representation), and the state space representation is\n- z(t) = f(t, z(t-1))\n\nwhere t is (discrete) time, z(t) is state vector.\n\nIn general, a variant of this algorithm (try `pip install osysid`, see [here](https://github.com/haozhg/osysid)) also works if we have a nonlinear and/or time-varying map\n- y(t) = f(t, x(t))\n\nwhere x(t) is the input and y(t) is the output. Notice that dynamical system is a special case of nonlinear maps, by taking y(t) = z(t) and x(t) = z(t-1).\n\n- It is assumed that we have measurements z(t) for t = 0,1,...T. \n- However, we do not know function f. \n- We aim to learn a linear model for the unknown dynamical system from measurement data up to time T.\n- We want to the model to be updated efficiently in real-time as new measurement data becomes available.\n\nFrom now on, we will denote y(t) = z(t) and x(t) = z(t-1), so that the dynamical system can be written in this form\n- y(t) = f(t, x(t))\n\n### Online DMD algorithm description\nThe algorithm is implemented in class [OnlineDMD](./odmd/online.py).\n\nAt time step t, define two matrix \n- X(t) = [x(1),x(2),...,x(t)],\n- Y(t) = [y(1),y(2),...,y(t)], \n\nthat contain all the past snapshot pairs, where x(t), y(t) are the n dimensional state vector, y(t) = f(t, x(t)) is the image of x(t), f() is the dynamics.  Here, if the (discrete-time) dynamics are given by z(t) = f(t, z(t-1)), then x(t), y(t) should be measurements corresponding to consecutive states z(t-1) and z(t).  \n\nWe would like to learn an adaptive online linear model M (a matrix) st \n- y(t) = M * x(t)\n\nThe matrix M is updated in real-time when new measurement becomes available. We aim to find the best M that leads to least-squre errors.\n\nAn exponential weighting factor rho=sigma^2 (0<rho<=1) that places more weight on recent data can be incorporated into the definition of X(t) and Y(t) such that \n- X(t) = [sigma^(t-1)*x(1),sigma^(t-2)*x(2),…,sigma^(1)*x(t-1),x(t)], \n- Y(t) = [sigma^(t-1)*y(1),sigma^(t-2)*y(2),...,sigma^(1)*y(t-1),y(t)].  \n\nAt time t+1, the matrices become \n- X(t+1) = [x(1),x(2),…,x(t),x(t+1)], \n- Y(t+1) = [y(1),y(2),…,y(t),y(t+1)]. \n\nWe need to incorporate a new snapshot pair x(t+1), y(t+1) into the least-square objective function. We can update the DMD matrix A(t) online by efficient rank-1 updating online DMD algorithm.  \n\n- The time complexity (multiply–add operation for one iteration) is O(n^2), \n- and space complexity is O(n^2), where n is the state dimension.  \n\n### Window DMD algorithm description\nThe algorithm is implemented in class [WindowDMD](./odmd/window.py).\n\nAt time step t, define two matrix \n- X(t) = [x(t-w+1),x(t-w+2),...,x(t)], \n- Y(t) = [y(t-w+1),y(t-w+2),...,y(t)] \n\nthat contain the recent w snapshot pairs from a finite time window, where x(t), y(t) are the n dimensional state vector, y(t) = f(t, x(t)) is the image of x(t), f() is the dynamics. Here, if the (discrete-time) dynamics are given by z(t) = f(t, z(t-1)), then x(t), y(t) should be measurements corresponding to consecutive states z(t-1) and z(t).\n\nSimilarly, we formulate this as a least-square optimization problem.\n\nAn exponential weighting factor rho=sigma^2 (0<rho<=1) that places more weight on recent data can be incorporated into the definition of X(t) and Y(t) such that \n- X(t) = [sigma^(w-1)*x(t-w+1),sigma^(w-2)*x(t-w+2),…,sigma^(1)*x(t-1),x(t)], \n- Y(t) = [sigma^(w-1)*y(t-w+1),sigma^(w-2)*y(t-w+2),…,sigma^(1)*y(t-1),y(t)].\n\nAt time t+1, the data matrices become \n- X(t+1) = [x(t-w+2),x(t-w+3),…,x(t+1)], \n- Y(t+1) = [y(t-w+2),y(t-w+3),…,y(t+1)]. \n\nThe models needs to forget the oldest snapshot pair x(t-w+1),y(t-w+1), and remember the newest snapshot pair x(t+1),y(t+1). We can update the DMD matrix A(t) online by efficient rank-2 updating window DMD algroithm.  \n\n- The time complexity (multiply–add operation for one iteration) is O(n^2), \n- and space complexity is O(wn+2n^2), where n is the state dimension, and w is the window size. Typically w is taken to be O(n), e.g, w = 2n, or 10n.\n\n## Demo\nSee [demo](./demo) for python notebooks.\n- `demo_online.ipynb` shows how to use online DMD to learn adaptive online model for 2D time varying system.\n- `demo_window.ipynb` shows how to use online DMD to learn adaptive online model for 2D time varying system.\n\n## Authors:\nHao Zhang \n\n## Reference\nIf you you used these algorithms or this python package in your work, please consider citing\n\n```\nZhang, Hao, Clarence W. Rowley, Eric A. Deem, and Louis N. Cattafesta. \n\"Online dynamic mode decomposition for time-varying systems.\" \nSIAM Journal on Applied Dynamical Systems 18, no. 3 (2019): 1586-1609.\n```\n\nBibTeX\n```\n@article{zhang2019online,\n  title={Online dynamic mode decomposition for time-varying systems},\n  author={Zhang, Hao and Rowley, Clarence W and Deem, Eric A and Cattafesta, Louis N},\n  journal={SIAM Journal on Applied Dynamical Systems},\n  volume={18},\n  number={3},\n  pages={1586--1609},\n  year={2019},\n  publisher={SIAM}\n}\n```\n\n## Date created\nApril 2017\n\n## License\nMIT\n\nIf you want to use this package, but find license permission an issue, pls contact me at `haozhang at alumni dot princeton dot edu`.\n\n## Issues\nIf there is any comment/suggestion, or if you find any bug, feel free to \n- create an issue [here](https://github.com/haozhg/osysid/issues), or\n- fork this repo, make changes, and create a pull request (merge from your fork to this repo)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/haozhg/odmd",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "odmd",
    "package_url": "https://pypi.org/project/odmd/",
    "platform": "",
    "project_url": "https://pypi.org/project/odmd/",
    "project_urls": {
      "Homepage": "https://github.com/haozhg/odmd"
    },
    "release_url": "https://pypi.org/project/odmd/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Online and Window Dynamic Mode Decomposition algorithms",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9482699,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ca4dd15696eed2077966b3891efd68700d9bec70498ddf38f4bc304c0eb95ea",
          "md5": "73b5e57b91a67f45c158a24f0072c2e1",
          "sha256": "f2407e5b0ec6fc22b54ab49b66c8754084dc0502ec5650241bd29ec218476e3e"
        },
        "downloads": -1,
        "filename": "odmd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "73b5e57b91a67f45c158a24f0072c2e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6694,
        "upload_time": "2021-02-18T04:44:19",
        "upload_time_iso_8601": "2021-02-18T04:44:19.545059Z",
        "url": "https://files.pythonhosted.org/packages/7c/a4/dd15696eed2077966b3891efd68700d9bec70498ddf38f4bc304c0eb95ea/odmd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ede6570806876f774468567897ab8263d1d9ee0b5313ae133c1ca7445e9e45",
          "md5": "800614c788a31b554a281bf29c5af400",
          "sha256": "f1791423e8fcb2502bca8c5369f6988b3bc000528c4d2ca4a1adbd4ef06d78ed"
        },
        "downloads": -1,
        "filename": "odmd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "800614c788a31b554a281bf29c5af400",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8883,
        "upload_time": "2021-02-21T02:36:52",
        "upload_time_iso_8601": "2021-02-21T02:36:52.772458Z",
        "url": "https://files.pythonhosted.org/packages/10/ed/e6570806876f774468567897ab8263d1d9ee0b5313ae133c1ca7445e9e45/odmd-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77fa51df608ce3a8294fd49468c0565f2e2a73af80244bc17db7a316d3fe841f",
          "md5": "1f3de10092f4d0e48960c30c3171e150",
          "sha256": "2ba6b24341ca2f1ba823dde71d6fe90dbd894e69bd7f45a0841044d965e1121f"
        },
        "downloads": -1,
        "filename": "odmd-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f3de10092f4d0e48960c30c3171e150",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9568,
        "upload_time": "2021-02-21T03:08:54",
        "upload_time_iso_8601": "2021-02-21T03:08:54.977093Z",
        "url": "https://files.pythonhosted.org/packages/77/fa/51df608ce3a8294fd49468c0565f2e2a73af80244bc17db7a316d3fe841f/odmd-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "293617c534612c9afd314f091da8b4aa2caaa9c33f6351020135bdd7e9d5d2aa",
          "md5": "1d1e5952b677158b1ec834ed8b5b8ddf",
          "sha256": "d8511e5f22028420d9a84627c368084ba18bceceff1bf14880ca82616afbbcd5"
        },
        "downloads": -1,
        "filename": "odmd-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1d1e5952b677158b1ec834ed8b5b8ddf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10985,
        "upload_time": "2021-02-21T18:51:06",
        "upload_time_iso_8601": "2021-02-21T18:51:06.877844Z",
        "url": "https://files.pythonhosted.org/packages/29/36/17c534612c9afd314f091da8b4aa2caaa9c33f6351020135bdd7e9d5d2aa/odmd-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "293617c534612c9afd314f091da8b4aa2caaa9c33f6351020135bdd7e9d5d2aa",
        "md5": "1d1e5952b677158b1ec834ed8b5b8ddf",
        "sha256": "d8511e5f22028420d9a84627c368084ba18bceceff1bf14880ca82616afbbcd5"
      },
      "downloads": -1,
      "filename": "odmd-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1d1e5952b677158b1ec834ed8b5b8ddf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10985,
      "upload_time": "2021-02-21T18:51:06",
      "upload_time_iso_8601": "2021-02-21T18:51:06.877844Z",
      "url": "https://files.pythonhosted.org/packages/29/36/17c534612c9afd314f091da8b4aa2caaa9c33f6351020135bdd7e9d5d2aa/odmd-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}