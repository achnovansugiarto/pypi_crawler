{
  "info": {
    "author": "EtWnn",
    "author_email": "EtWnn0x@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============================\r\nWelcome to ScanWatch 0.2.0\r\n==============================\r\n\r\n\r\nNote\r\n----\r\n\r\nThis library is developed and maintained by EtWnn, feel free to drop your suggestions or remarks in\r\nthe `discussion tab <https://github.com/EtWnn/ScanWatch/discussions>`_.\r\nYou are also welcome to contribute by submitting PRs.\r\n\r\n**Source Code:**\r\n    https://github.com/EtWnn/ScanWatch\r\n**Documentation:**\r\n    https://scanwatch.readthedocs.io\r\n\r\n\r\n| This library is a local tracker of transactions for the Ethereum chain, the Binance Smart chain and the Polygon chain.\r\n| It is a simple single-point interface with the `etherscan <https://etherscan.io>`__, `bscscan <https://bscscan.com>`__\r\n  and `polygonscan <https://polygonscan.com>`__ APIs.\r\n| This library will save locally the transactions to gain time and avoid over-calling the APIs.\r\n\r\n\r\nAnnouncement\r\n------------\r\n\r\n|siren| |siren| |siren|\r\n\r\nIf you previously used this library with a version inferior to 0.1.3,\r\nplease head `here <https://github.com/EtWnn/ScanWatch/discussions/25>`_ to correct a potential bug in the database.\r\n\r\n|siren| |siren| |siren|\r\n\r\n\r\nQuick Tour\r\n----------\r\n\r\n1. API Keys\r\n~~~~~~~~~~~\r\n\r\nYou will need to generate API tokens to use this library:\r\n\r\n1. Ethereum chain: go on `etherscan <https://etherscan.io/myapikey>`__\r\n2. Binance Smart chain: go on `bscscan <https://bscscan.com/myapikey>`__\r\n3. Polygon chain: go on `polygonscan <https://polygonscan.com/myapikey>`__\r\n\r\n(If you want to use several chains, you will need an API token for each).\r\n\r\n2. Installation\r\n~~~~~~~~~~~~~~~\r\n\r\n``ScanWatch`` is available on `PYPI <https://pypi.org/project/ScanWatch/>`_, install with ``pip``:\r\n\r\n.. code:: bash\r\n\r\n    pip install ScanWatch\r\n\r\nYou can also install the latest developments (not stable):\r\n\r\n.. code:: bash\r\n\r\n    pip install git+https://github.com/EtWnn/ScanWatch.git@develop\r\n\r\n3. Manager\r\n~~~~~~~~~~\r\n\r\n| The manager is the object that you will use to update and get the transactions.\r\n| It is instantiated with an API token and an address.\r\n\r\nExample for Ethereum:\r\n\r\n.. code:: python\r\n\r\n    from ScanWatch.ScanManager import ScanManager\r\n    from ScanWatch.utils.enums import NETWORK\r\n\r\n    api_token = \"<ETH_API_TOKEN>\"\r\n    address = \"<YOUR_ETH_ADDRESS>\"\r\n\r\n    manager = ScanManager(address, NETWORK.ETHER, api_token)\r\n\r\nExample for BSC:\r\n\r\n.. code:: python\r\n\r\n    from ScanWatch.ScanManager import ScanManager\r\n    from ScanWatch.utils.enums import NETWORK\r\n\r\n    api_token = \"<BSC_API_TOKEN>\"\r\n    address = \"<YOUR_BSC_ADDRESS>\"\r\n\r\n    manager = ScanManager(address, NETWORK.BSC, api_token)\r\n\r\nExample for Polygon:\r\n\r\n.. code:: python\r\n\r\n    from ScanWatch.ScanManager import ScanManager\r\n    from ScanWatch.utils.enums import NETWORK\r\n\r\n    api_token = \"<POLYGON_API_TOKEN>\"\r\n    address = \"<YOUR_POLYGON_ADDRESS>\"\r\n\r\n    manager = ScanManager(address, NETWORK.POLYGON, api_token)\r\n\r\n4. Transactions Update\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nOnce the manager is setup, you can update the locally saved transactions:\r\n\r\n.. code:: python\r\n\r\n    manager.update_all_transactions()\r\n    # all transactions updated for address 0xaAC...748E8: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:02<00:00,  1.86it/s]\r\n\r\nThis needs to be done only when new transactions have been made since the last time you called the update method.\r\n\r\n5. Transactions\r\n~~~~~~~~~~~~~~~\r\n\r\nTo fetch the transactions that have been previously saved, just use the methods below.\r\n(see the `documentation <https://scanwatch.readthedocs.io>`_ for more details).\r\n\r\n.. code:: python\r\n\r\n    from ScanWatch.utils.enums import TRANSACTION\r\n\r\n    manager.get_transactions(TRANSACTION.NORMAL)  # normal transactions\r\n\r\n    manager.get_transactions(TRANSACTION.ERC20)  # erc20 transactions\r\n\r\n    manager.get_transactions(TRANSACTION.ERC721)  # erc721 transactions\r\n\r\n    manager.get_transactions(TRANSACTION.INTERNAL)  # internal transactions\r\n\r\n6. Holdings\r\n~~~~~~~~~~~\r\n\r\nThe manager can also give you the current tokens hold by an address:\r\n\r\nFor erc20 tokens:\r\n\r\n.. code:: python\r\n\r\n    manager.get_erc20_holdings()\r\n\r\n\r\n.. code:: bash\r\n\r\n    {\r\n        'USDC': Decimal('50'),\r\n        'AllianceBlock Token': Decimal('12458.494516884'),\r\n        'Blockchain Certified Data Token': Decimal('75174'),\r\n        'Compound': Decimal('784.24998156'),\r\n        'ZRX': Decimal('3.1')\r\n    }\r\n\r\nFor erc721 tokens:\r\n\r\n.. code:: python\r\n\r\n    manager.get_erc721_holdings()\r\n\r\n\r\n.. code:: bash\r\n\r\n    [\r\n        {\r\n            'contractAddress': '0x8azd48c9ze46azx1e984fraz4da9zz8dssad49ct',\r\n            'tokenID': '78941',\r\n            'count': 1,\r\n            'tokenName': 'SUPER NFT GAME',\r\n            'tokenSymbol': 'Hero'\r\n        },\r\n        {\r\n            'contractAddress': '0x6edd39bdba2fazs3db5fxd86908789cbd905f04d',\r\n            'tokenID': '33001',\r\n            'count': 1,\r\n            'tokenName': 'MY FAV NFT ARTIST HANDMADE THIS',\r\n            'tokenSymbol': 'dubious thing'\r\n        }\r\n    ]\r\n\r\n\r\nMain / test nets\r\n----------------\r\n\r\nIf you want to switch from main to test nets, you can specify the net name at the manager creation:\r\n\r\n.. code:: python\r\n\r\n    manager = ScanManager(address, <network>, api_token, <net_name>)\r\n\r\nSupported nets are:\r\n    - For Ethereum: \"main\", \"goerli\", \"kovan\", \"rinkeby\", \"ropsten\"\r\n    - For BSC: \"main\", \"test\"\r\n    - For Polygon: \"main\", \"test\"\r\n\r\n\r\nDonation\r\n--------\r\n\r\n| If this library has helped you in any way, feel free to help me |blush|\r\n| With your donation, I will be able to keep working on this project and add new features. Thank you!\r\n\r\n- **BTC**: 14ou4fMYoMVYbWEKnhADPJUNVytWQWx9HG\r\n- **ETH**, **BSC**, **Polygon**: 0xA20be1f02B1C9D4FF1442a0F0e7c089fcDd59407\r\n- **LTC**: LfHgc969RFUjnmyLn41SRDvmT146jUg9tE\r\n- **EGLD**: erd1qk98xm2hgztvmq6s4jwtk06g6laattewp6vh20z393drzy5zzfrq0gaefh\r\n\r\n.. |siren| replace:: ðŸš¨\r\n.. |blush| replace:: ðŸ˜Š\r\n\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EtWnn/ScanWatch",
    "keywords": "eth bsc polygon wallet save tracking history ethereum matic bnb tracker binance smartchain smart chain",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ScanWatch",
    "package_url": "https://pypi.org/project/ScanWatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/ScanWatch/",
    "project_urls": {
      "Homepage": "https://github.com/EtWnn/ScanWatch"
    },
    "release_url": "https://pypi.org/project/ScanWatch/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Local tracker for address on Ethereum, BSC and Polygon chains",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12481742,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47721c42755106a1d98d9a3964c6e1b44943fc21eeb59f113c2a1ad9c29e3525",
          "md5": "a0c920a6f6a313c7baba170ac9d9827e",
          "sha256": "d48ae60422cf92f6099e4a98e3838bce5628b9890c18d301cf3d70397d8daa8f"
        },
        "downloads": -1,
        "filename": "ScanWatch-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a0c920a6f6a313c7baba170ac9d9827e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12576,
        "upload_time": "2021-05-03T11:59:29",
        "upload_time_iso_8601": "2021-05-03T11:59:29.862514Z",
        "url": "https://files.pythonhosted.org/packages/47/72/1c42755106a1d98d9a3964c6e1b44943fc21eeb59f113c2a1ad9c29e3525/ScanWatch-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b39f786d6c8030a0cddd21b24cb342293da491a2e5c6b30cbd5dd1ab9c1cdca5",
          "md5": "2fc6405d4281873237765556a39166ce",
          "sha256": "9fb8b4bd5dfc07c649449503fe93d4265a79fef14e37c205e1196be7df96d1f1"
        },
        "downloads": -1,
        "filename": "ScanWatch-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2fc6405d4281873237765556a39166ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14393,
        "upload_time": "2021-12-29T08:45:09",
        "upload_time_iso_8601": "2021-12-29T08:45:09.496348Z",
        "url": "https://files.pythonhosted.org/packages/b3/9f/786d6c8030a0cddd21b24cb342293da491a2e5c6b30cbd5dd1ab9c1cdca5/ScanWatch-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "191e5209264bebe5c55d103f14e83a8597896493b44b9f5eb0398c377f7b65b2",
          "md5": "826b50bb18c0be83ac0289e16ea9be0a",
          "sha256": "275169c690c09ed3aaf27e1a364874b8507d81121de784e9e6fc0d7fa254c5fc"
        },
        "downloads": -1,
        "filename": "ScanWatch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "826b50bb18c0be83ac0289e16ea9be0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16351,
        "upload_time": "2022-01-05T07:46:16",
        "upload_time_iso_8601": "2022-01-05T07:46:16.300550Z",
        "url": "https://files.pythonhosted.org/packages/19/1e/5209264bebe5c55d103f14e83a8597896493b44b9f5eb0398c377f7b65b2/ScanWatch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd0951261904e27276ad271fe6efe4c047a3c3ff77c913c8b20f58725f76515",
          "md5": "e5bbe31e1aaaf7449a1bae8c523fa837",
          "sha256": "6b43394ae0e7ded16320f0cbf0959040faf824466f2e643ee9fb01b573254507"
        },
        "downloads": -1,
        "filename": "ScanWatch-0.2.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e5bbe31e1aaaf7449a1bae8c523fa837",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16336,
        "upload_time": "2022-01-05T07:45:40",
        "upload_time_iso_8601": "2022-01-05T07:45:40.389577Z",
        "url": "https://files.pythonhosted.org/packages/9d/d0/951261904e27276ad271fe6efe4c047a3c3ff77c913c8b20f58725f76515/ScanWatch-0.2.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "191e5209264bebe5c55d103f14e83a8597896493b44b9f5eb0398c377f7b65b2",
        "md5": "826b50bb18c0be83ac0289e16ea9be0a",
        "sha256": "275169c690c09ed3aaf27e1a364874b8507d81121de784e9e6fc0d7fa254c5fc"
      },
      "downloads": -1,
      "filename": "ScanWatch-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "826b50bb18c0be83ac0289e16ea9be0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16351,
      "upload_time": "2022-01-05T07:46:16",
      "upload_time_iso_8601": "2022-01-05T07:46:16.300550Z",
      "url": "https://files.pythonhosted.org/packages/19/1e/5209264bebe5c55d103f14e83a8597896493b44b9f5eb0398c377f7b65b2/ScanWatch-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}