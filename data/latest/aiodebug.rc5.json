{
  "info": {
    "author": "Quantlane",
    "author_email": "code@quantlane.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "aiodebug\n========\n\nThis is a tiny library for monitoring and testing asyncio programs.\nIts monitoring features are meant to be always on in production.\n\n\nInstallation\n--------------\n``aiodebug`` is only compatible with Python 3.8 and higher. There are no plans to support older versions.\n\n``aiodebug`` is `available on PyPI <https://pypi.org/project/aiodebug/>`_ and you can install it with:\n\n::\n\n\tpip install aiodebug\n\nor\n\n::\n\n\tpoetry add aiodebug\n\n\n``aiodebug`` will use `logwood <https://github.com/qntln/logwood>`_ if it is installed, otherwise it will default\nto the standard logging module.\n\n\nLog warnings when callbacks block the event loop\n------------------------------------------------\n\n.. code-block:: python\n\n\timport aiodebug.log_slow_callbacks\n\n\taiodebug.log_slow_callbacks.enable(0.05)\n\nThis will produce WARNING-level logs such as\n\n.. code-block::\n\n\tExecuting <Task pending coro=<foo() running at /home/.../foo.py:37>\n\twait_for=<Future pending cb=[Task._wakeup()]>> took 0.069 seconds\n\nasyncio already does this in debug mode, but you probably don't want to enable full-on debug mode in production.\n\nInstead of defaulting to the logs, you may provide your own callback that gets called with the name of the\nslow callback and its execution duration, and can do anything it needs with it. This might be useful\ne.g. for structured JSON logging.\n\n.. code-block:: python\n\n\timport aiodebug.log_slow_callbacks\n\n\taiodebug.log_slow_callbacks.enable(\n\t\t0.05,\n\t\ton_slow_callback = lambda task_name, duration: json_logger.warning(\n\t\t\t'Task blocked async loop for too long',\n\t\t\textra = {'task_name': task_name, 'duration': duration}\n\t\t)\n\t)\n\nTrack event loop lags in StatsD\n------------------------------------------------\n\n.. code-block:: python\n\n\timport aiodebug.monitor_loop_lag\n\n\taiodebug.monitor_loop_lag.enable(statsd_client)\n\nTracks how much scheduled calls get delayed and sends the lags to StatsD.\n\n.. image:: loop-lags.png\n\n\nDump stack traces of all threads if the event loop hangs for too long\n-----------------------------------------------------------------------\n\n.. code-block:: python\n\n\timport aiodebug.hang_inspection\n\n\tdumper = aiodebug.hang_inspection.start('/path/to/output/directory', interval = 0.25)  # 0.25 is the default\n\t...\n\tawait aiodebug.hang_inspection.stop_wait(dumper)\n\nEnabling this function may help you in case one of your threads (sometimes) runs a CPU-bound operation that\ncompletely stalls the event loop, but you don't know which thread it is or what it is doing.\n\nEvery time the event loop hangs (doesn't run a scheduled 'monitoring' task) for longer than the given\n``interval``, aiodebug will create 3 stack traces, 1 second apart, in your output directory.\nFor example:\n\n.. code-block::\n\n\t-rw-r--r--  1 user  group   6.7K  4 Jan 09:41 stacktrace-20220104-094154.197418-0.txt\n\t-rw-r--r--  1 user  group   7.0K  4 Jan 09:41 stacktrace-20220104-094155.206574-1.txt\n\t-rw-r--r--  1 user  group   6.6K  4 Jan 09:41 stacktrace-20220104-094156.211781-2.txt\n\nEach file then contains the Python stack traces of all threads that were running or waiting at the time.\nYou might be able to find your culprit blocking the event loop at the end of one of the traces.\n\n\nSpeed up or slow down time in the event loop\n------------------------------------------------\n\nThis is mainly useful for testing.\n\n.. code-block:: python\n\n\timport aiodebug.testing.time_dilated_loop\n\n\tloop = aiodebug.testing.time_dilated_loop.TimeDilatedLoop()\n\tasyncio.set_event_loop(loop)\n\n\tloop.time_dilation = 3\n\tawait asyncio.sleep(1)  # Takes 0.333s of real time\n\n\tloop.time_dilation = 0.1\n\tawait asyncio.sleep(1)  # Takes 10s of real time\n\n\n****\n\n\t.. image:: quantlane.png\n\n\t``aiodebug`` was made by `Quantlane <https://quantlane.com>`_, a systematic trading firm.\n\tWe design, build and run our own stock trading platform.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/quantlane/libs/aiodebug",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiodebug",
    "package_url": "https://pypi.org/project/aiodebug/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiodebug/",
    "project_urls": {
      "Homepage": "https://gitlab.com/quantlane/libs/aiodebug"
    },
    "release_url": "https://pypi.org/project/aiodebug/2.3.0/",
    "requires_dist": [
      "typing-extensions (<5.0.0,>=3.7.0)",
      "logwood (<4.0.0,>=3.0.0) ; extra == 'logwood'"
    ],
    "requires_python": "",
    "summary": "A tiny library for monitoring and testing asyncio programs",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15695375,
  "releases": {
    "0.0.0": [],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ac3a1c2ca13f7b801db569348bc8b9ccbd6ae9a6233263d4b8c0f7a743b7f97",
          "md5": "a35a411ff0496b90d3150b3abb397db3",
          "sha256": "1d0bfa8dcd3dd023f9c7c4cbc1e8a27b38c87835b94573e5765bd69521f14ccc"
        },
        "downloads": -1,
        "filename": "aiodebug-1.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "a35a411ff0496b90d3150b3abb397db3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3960,
        "upload_time": "2016-11-28T16:40:03",
        "upload_time_iso_8601": "2016-11-28T16:40:03.845496Z",
        "url": "https://files.pythonhosted.org/packages/1a/c3/a1c2ca13f7b801db569348bc8b9ccbd6ae9a6233263d4b8c0f7a743b7f97/aiodebug-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36b706aa0e122ddc7c98713e41da9a13c93acd8e040539803d1f065d670e32c8",
          "md5": "8cf8ea1e051e79330b959ed0a6ca33df",
          "sha256": "061dd0067f80a433a1e4fa4f76dd1b4cf366ee0ce2035e462ba3af00c79241ea"
        },
        "downloads": -1,
        "filename": "aiodebug-1.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "8cf8ea1e051e79330b959ed0a6ca33df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3981,
        "upload_time": "2016-11-28T17:06:02",
        "upload_time_iso_8601": "2016-11-28T17:06:02.835654Z",
        "url": "https://files.pythonhosted.org/packages/36/b7/06aa0e122ddc7c98713e41da9a13c93acd8e040539803d1f065d670e32c8/aiodebug-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a71857721b44363a7ee2ed78beb67c92fbd2deb9fb5b0e8c92f4bd590fc1893c",
          "md5": "fe6696502a666b950301cc3072f37b0d",
          "sha256": "7e4a89309ea1403cbb2d39b27ac5431c39a8936f8338034af9b8416232fbfa6c"
        },
        "downloads": -1,
        "filename": "aiodebug-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe6696502a666b950301cc3072f37b0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6900,
        "upload_time": "2022-01-04T11:06:38",
        "upload_time_iso_8601": "2022-01-04T11:06:38.094659Z",
        "url": "https://files.pythonhosted.org/packages/a7/18/57721b44363a7ee2ed78beb67c92fbd2deb9fb5b0e8c92f4bd590fc1893c/aiodebug-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39ac0b32c4f7c7b726ff292d1e38e0bd180675768bec6f2ec9c109d086c384a1",
          "md5": "eebd813ee8dd4c7925fde536d937db19",
          "sha256": "ed408cd90869b395f5bc642acffcbaed3b2668e89b40e684a95e0fb60a3257cd"
        },
        "downloads": -1,
        "filename": "aiodebug-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eebd813ee8dd4c7925fde536d937db19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7872,
        "upload_time": "2022-01-04T13:33:46",
        "upload_time_iso_8601": "2022-01-04T13:33:46.323914Z",
        "url": "https://files.pythonhosted.org/packages/39/ac/0b32c4f7c7b726ff292d1e38e0bd180675768bec6f2ec9c109d086c384a1/aiodebug-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39ac0b32c4f7c7b726ff292d1e38e0bd180675768bec6f2ec9c109d086c384a1",
        "md5": "eebd813ee8dd4c7925fde536d937db19",
        "sha256": "ed408cd90869b395f5bc642acffcbaed3b2668e89b40e684a95e0fb60a3257cd"
      },
      "downloads": -1,
      "filename": "aiodebug-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eebd813ee8dd4c7925fde536d937db19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7872,
      "upload_time": "2022-01-04T13:33:46",
      "upload_time_iso_8601": "2022-01-04T13:33:46.323914Z",
      "url": "https://files.pythonhosted.org/packages/39/ac/0b32c4f7c7b726ff292d1e38e0bd180675768bec6f2ec9c109d086c384a1/aiodebug-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}