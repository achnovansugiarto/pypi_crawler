{
  "info": {
    "author": "Nils",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SpectronPy\n\nSpectronPy is a Python implementation of Spectron for testing Electron. It allows you to easily use selenium to test your [Electron](https://www.electronjs.org/docs/latest) application. SpectronPy is not affiliated with the Spectron project.\n\nJS Spectron was [deprecated](https://github.com/electron-userland/spectron#-spectron-is-officially-deprecated-as-of-february-1-2022) in early 2022.\n\n\n## Installation\n_Requires python 3.10_\n```python\npip install spectronpy\n```\n\n## Usage\n```python\nfrom spectronpy import Application\n\n# Optional\nconfig = {\n    'app_port': 9000,\n    'wait_timeout': 3000,\n}\n\n# Initialize Application object with required parameters\napp = Application(\n    app_path='/Applications/Slack.app/Contents/MacOS/Slack',\n    chromedriver_version=\"96.0.4664.35\",\n    config=config\n)\napp.start()\n\n# Implicit wait for title to update\napp.client.match.Title.has('slack', case_insensitive=True)\nprint(app.client.title)\n\napp.take_screenshot()\napp.stop()\n```\n\n## Application API\n\n### Options\n- `app_path` - **required.** Path to electron application or module.\n- `chromedriver_version` - **required.** Version of chromedriver to download. This must match the version of the Electron application.\n- `config` - optional.\n\n#### Config\n- `app_port` - Electron debugger port. WebDriver will connect to this. Default: `9515`\n- `chrome_driver_args` - Electron debugger port. WebDriver will connect to this.\n- `chromedriver_cache` - Cache for chromedriver version. Default: `7` days\n- `chromedriver_log_path` - Location for Chrome log file to output. ex: `chrome.log`\n- `chromedriver_verbose` - Set chromedriver to verbose with `--verbose`.\n- `chromedriver_path` - Path to chromedriver. Path is relative to the current working directory.\n- `electron_args` - Arguments passed to the electron application.\n- `electron_log_path` - Location for Electron log file to output. ex: `electron.log`\n- `start_timeout` - Timeout for webdriver start up. Default: `10000`\n- `stop_timeout` - Timeout for Application termination. Default: `5000`\n- `wait_timeout` - Timeout for WebDriver. Refer to WebDriver class for `set_page_load_timeout`, `set_script_timeout`, `implicitly_wait`. Default: `5000`\n- `webdriver_options` - Options which are passed to webdriver.\n- `working_directory` - Default: `cwd()`\n- `debug_timeout` - Timeout for pause functionality. Refer to `Application.pause()`. Default: `50000`\n\n### Properties\n\n#### Client\n`Type: WebDriver`\n\nSpectronPy is using [Selenium](https://selenium-python.readthedocs.io/) under the hood. The `client` variable is exposed so you can access all the typical Selenium functionality. It is attached  to the `Application` instance. \n\n#### Finders\nWithin the `client` object, you have access to the `find` property. These functions allow additional ways to find elements. These finders are all using implicit waiting by default which is set to `wait_timeout` in the configuration of `Application`. You can disable implicit waiting by setting the `wait_timeout` to 0.\n\n- `all(locator: str, by=None, wait: int = None, **kwargs)` - Find all elements matching the arguments.\n- `first(locator: str, by=None, wait: int = None, **kwargs)` - Find the first element matching the arguments.\n- `element(locator: str, by=None, wait: int = None, **kwargs)` - Find an element matching the arguments. Expects only 1 exact match.\n- `by_*(...)` - Similar to `element()` but uses different locator strategies.\n\n```python\nkwargs = {\n    'text': None, # Matches the text inside the element.\n    'ambiguous_check': None, # Check if only 1 element is found.\n    'count': None, # Check if the number of elements returned equals the count.\n    'minimum': None, # Check if at least this many elements were found.\n    'visible': None, # Match all the elements currently in the viewport, not just the DOM.\n}\n```\n\n#### Matchers\nWithin the `client` object, you have access to the `match` property. These functions allow additional ways to match element criteria. This is useful for assertions or waiting.\n\n- `Title`\n- `URL`\n- `Element`\n\n### Methods\nApplication class methods.\n\n    def __init__(self, app_path: str, chromedriver_version: str, config=None)\nInitialize Application.\n\n    def start(self) -> None\nStarts both the Electron application and webdriver on the same port.\n\n    def stop(self) -> None\nUsing the webdriver functions to stop the application and chromedriver.\n\n    def terminate(self) -> None\n\nTerminates the application via OS-specific functions using PID. This is useful if `stop()` doesn't work as expected.\n\n    def restart(self) -> None\nRestart the application and webdriver.\n\n    async def start_client(self) -> WebDriver\nConfigure and start webdriver.\n\n    def start_app(self) -> Popen\nStart Electron application.\n\n    #WIP def wait_until_window_loaded(self)\nNot implemented yet.\n\n    def is_running(self) -> bool\nReturns current running status of the Electron application.\n\n    def get_settings(self) -> Configuration\nReturns the current Application options.\n\n    def switch_to_main_window(self) -> None\nSwitch to main window.\n\n    def take_screenshot(self, filename=None, folder=None) -> None\nTake a screenshot of the Electron application.\n\n    def devtools_url(self) -> str\nProvides a devtools url to be able to explore the selectors of your electron app via chrome.\n\n    def pause(self, timeout=None) -> None\nInitiate a pause. This is meant to be used for debugging automation code. Check out `start_debug_mode`.\n\n    def unpause(self) -> None\nUnpause a previous pause.\n\n    def default_selector(self, by: By) -> None\nSets the default selector globally. Default: `By.ID`\n\n    def start_debug_mode(self, timeout=None) -> None\nStarts a debugger mode with a pause. Check terminal for devtools URL and click through to your application viewport via chrome. Here you can explore the selectors of your electron app.\n\n## Test Libraries\n\n### Use with Behave\nCheck the example in this repo on how to implement it. While in [example/behave](/example/behave), you can run all the tests with:\n```python\nbehave\n```\n\n### Use with PytestBDD\n`WIP`\n\n\n## Development\n1) Install `python >= 3.10`\n2) Clone: `git clone https://github.com/nils-e/SpectronPy.git`\n3) Create a virtual env: `python -m venv venv`\n4) Activate venv: `source ./venv/bin/activate`\n5) Install packages: `pip install -e .`\n6) Run an example: `python example/spectron.py`\n\n## To Do\n- Implement wait_until_window_loaded\n- Add logfile out to logger\n- Add PytestBDD example\n- Automatically open a debugger window\n- Add kwarg parameter to finder/matcher\n- Add commitizen\n- Add python linter\n\n## Resources\n- https://github.com/electron-userland/spectron\n- https://github.com/electron/electron-quick-start\n  - Helped to implement the test app\n- https://github.com/teamcapybara/capybara\n  - A lot of guidance from one of my favorite selenium frameworks\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nils-e/SpectronPy",
    "keywords": "spectronpy spectron electron python selenium webdriver",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SpectronPy",
    "package_url": "https://pypi.org/project/SpectronPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/SpectronPy/",
    "project_urls": {
      "Homepage": "https://github.com/nils-e/SpectronPy"
    },
    "release_url": "https://pypi.org/project/SpectronPy/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15132679,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e07f08804628b5bf2d54348f73401f35d7445a0a26b828f6c31dd791a4eb39b6",
          "md5": "b0c82a785865012c503506a65d3a6af0",
          "sha256": "b9f62d1279adc692b112dcfc67140b46fabb2de90a83aa8b4968a132ccee1e09"
        },
        "downloads": -1,
        "filename": "SpectronPy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b0c82a785865012c503506a65d3a6af0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 15096,
        "upload_time": "2022-09-18T10:39:52",
        "upload_time_iso_8601": "2022-09-18T10:39:52.120008Z",
        "url": "https://files.pythonhosted.org/packages/e0/7f/08804628b5bf2d54348f73401f35d7445a0a26b828f6c31dd791a4eb39b6/SpectronPy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e07f08804628b5bf2d54348f73401f35d7445a0a26b828f6c31dd791a4eb39b6",
        "md5": "b0c82a785865012c503506a65d3a6af0",
        "sha256": "b9f62d1279adc692b112dcfc67140b46fabb2de90a83aa8b4968a132ccee1e09"
      },
      "downloads": -1,
      "filename": "SpectronPy-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b0c82a785865012c503506a65d3a6af0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 15096,
      "upload_time": "2022-09-18T10:39:52",
      "upload_time_iso_8601": "2022-09-18T10:39:52.120008Z",
      "url": "https://files.pythonhosted.org/packages/e0/7f/08804628b5bf2d54348f73401f35d7445a0a26b828f6c31dd791a4eb39b6/SpectronPy-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}