{
  "info": {
    "author": "Yogurt Cultures",
    "author_email": "cediddi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Turkish",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "kefir\n\n# Kefir\n\n![Logo](https://avatars1.githubusercontent.com/u/42190640?s=200&v=4)\n\nYogurt is a free software community established at Mustafa Akgül Free Software Camp of 2018.\n\nKefir is a natural language processing kit for Turkic languages, and maybe Finnish and Hungarian in phonology.\n\n# Usage\n\nThere are two competing notions of the predicate in theories of grammar.\nThe competition between these two concepts has generated confusion concerning\nthe use of the term predicate in theories of grammar.\n\nKefir is designed to construct sentences by using\n[predicate-logic](https://www.wikiwand.com/en/Predicate_(grammar)).\n\n```python\n>>> ayni = subject('aynı')\n>>> havuc = subject('havuç')\n>>> gel = predicate('gel', 'third', 'perfective')\n>>> yap = predicate('yap', 'third', 'perfective')\n>>> dal = predicate('dal', 'third', 'progressive')\n>>> dal = predicate(dal, 'third', 'perfective')\n\n>>> birisi = subject('yakup')\n>>> [sentence(birisi, eylem) for eylem in (yap, dal,)]\n['yakup yaptı', 'yakup dalmaktaydı']\n\n>>> [sentence(havuc, eylem) for eylem in (gel, yap, dal)]\n['havuç geldi', 'havuç yaptı', 'havuç dalmaktaydı']\n\n>>> sebze = predicate(locative('marul'), 'first', 'perfective', True)\n>>> dal = predicate(locative('dal'), 'first', 'perfective', True)\n>>> [sentence(ayni, eylem) for eylem in (sebze, dal)]\n['aynı maruldaydık', 'aynı daldaydık']\n\n```\n\n### Cases\n\n- nominative\n- genitive\n- dative\n- accusative\n- ablative\n- locative\n\n### Copulas\n\n - negative\n - zero\n - tobe\n - personal\n - perfective\n - imperfective\n - progressive\n - necessitative\n - future\n - impotential\n - conditional\n\n\n\nkefir.case\n\n# Grammatical Cases\n\nImplemented 6 grammatical cases:\n\n- Nominative\n- Genitive\n- Dative\n- Accusative\n- Ablative\n- Locative\n\nTurkish has 9 more:\n\n- Essive\n- Instrumental\n- Inclusive\n- Abessive\n- Likeness\n- Coverage\n- Qualitative\n- Conditional\n- Possesive\n\n📖 Read more on: [Turkish Cases](https://en.wikibooks.org/wiki/Turkish/Cases).\n\nTODO: Enum'lardaki rakamlar yerine auto() kullanılmalı.\n\n## Nominative Case ('Yalın' in Turkish)\n\nThe simplest grammatical case, there's no suffix to affix in that case.\n\nNominative comes from Latin cāsus nominātīvus means case for naming.\n\n## Ablative Case ('Ayrılma' in Turkish)\n\nA grammatical case for nouns, pronouns and adjectives in\nthe grammar of various languages; it is sometimes used to\nexpress motion away from something, among other uses.\n\n✎︎ Examples:\n```\nadalar[dan] geldim\nmerkez[den] geçtim\nteyit[ten] geçtim\naçlık[tan] öldüm\n```\n\n## Accusative ('İlgi' in Turkish)\n\nThe accusative case (abbreviated acc) of a noun is the\ngrammatical case used to mark the direct object of a\ntransitive verb. The same case is used in many\nlanguages for the objects of (some or all) prepositions.\n\n✎︎ Examples:\n```\naday[ı] yedim\nevim[i] yaptım\nüzüm[ü] pişirdim\n```\n\n## Genitive Case ('Genitifler' in Turkish)\n\nIn grammar, the genitive is the grammatical case\nthat marks a word, usually a noun, as modifying\nanother word, also usually a noun.\n\n✎︎ Examples:\n```\nhanımelinin çiçeği (flower of a plant called hanımeli)\nkadının ayakkabısı (shoes of the woman)\nباب بيت bābu baytin (the door of a house)\nmari[i] nie ma w domu (maria is not at home)\n```\n\n## Dative Case ('Yönelme' in Turkish)\n\nIn some languages, the dative is used to mark the\nindirect object of a sentence.\n\n✎︎ Examples:\n```\nmarya yakup'a bir drink verdi (maria gave jacob a drink)\nmaria jacobī potum dedit (maria gave jacob a drink)\n```\n\n## Locative Case ('Bulunma' in Turkish)\n\nLocative is a grammatical case which indicates a location.\nIt corresponds vaguely to the English prepositions \"in\",\n\"on\", \"at\", and \"by\".\n\n✎︎ Examples:\n```\nbahçe[de] hanımeli var.\nyorum[da] iyi beatler var.\nkalem[de] güzel uç var.\n```\n\n\n\nkefir.phonology\n\n# Turkish Phonology\n\nIn Hungarian, Finnish, and Turkic languages\nvowel sounds are organized in a concept called\nvowel harmony. Vowels may be classified as Back\nor Front vowels, based on the placement of the\nsound in the mouth.\n\n```\n Front Vowels\n+----------------+\n Unrounded  ⟨e⟩ ⟨i⟩\n Rounded    ⟨ü⟩ ⟨ö⟩\n\n Back Vowels\n+----------------+\n Unrounded  ⟨a⟩ ⟨ı⟩\n Rounded    ⟨u⟩ ⟨o⟩\n```\n\nTODO: Document consonant harmony.\n\n#### \\#swap_front_and_back\n\nSwaps front sounds to back, and vice versa.\n\n```python\n>>> swap_front_and_back('acak')\n'ecek'\n\n>>> swap_front_and_back('ocok')\n'öcök'\n\n>>> swap_front_and_back('öcök')\n'ocok'\n\n>>> swap_front_and_back('acak')\n'ecek'\n\n```\n\n## Voicing or Sonorization ('Yumuşama' in Turkish)\n\nTo make pronouncation easier, nouns ending\nwith these sounds:\n\n```\n⟨p⟩ ⟨ç⟩ ⟨t⟩ ⟨k⟩\n```\n\nMay be softened by replacing them in order:\n\n```\n⟨b⟩ ⟨c⟩ ⟨d⟩ ⟨ğ⟩\n```\n\n✎︎ Examples:\n```\nço⟨p⟩un → ço⟨b⟩un\nağa⟨ç⟩ın → ağa⟨c⟩n\nkağı⟨t⟩ın → kağı⟨d⟩ın\nren⟨k⟩in → ren⟨g⟩in\n```\n\n✎︎ Examples in other languages:\n```\nli⟨f⟩e → li⟨v⟩e\nstri⟨f⟩e → stri⟨v⟩e\nproo⟨f⟩ → pro⟨v⟩e\n```\n\n## Devoicing or Desonorization ('Sertleşme' in Turkish)\n\nTo make pronouncation easier, nouns ending with\nthese sounds:\n```\n⟨p⟩ ⟨ç⟩ ⟨t⟩ ⟨k⟩\n```\n\nMay be hardened by replacing them in order:\n\n```\n⟨b⟩ ⟨c⟩ ⟨d⟩ ⟨ğ⟩\n```\n\n✎︎ Examples:\n```\nço⟨p⟩un → ço⟨b⟩un\nağa⟨ç⟩ın → ağa⟨c⟩n\nkağı⟨t⟩ın → kağı⟨d⟩ın\nren⟨k⟩in → ren⟨g⟩in\n```\n\n✎︎ Examples in Other Languages:\n```\ndogs → dogs ([ɡz])\nmissed → missed ([st])\nwhizzed → whizzed ([zd])\nprośba → prɔʑba\nпросьба → prozʲbə\n```\n\n\n\nkefir.predication\n\n# Turkish Predication and Copula\n\nTurkish language copulas, called 'ek-eylem' (literally 'suffix-verb'),\nare one of the most distinct features of Turkish grammar.\n\nTODO: Remove unused imports.\n\n#### Zero Copula\n\nZero copula is the rule for third person, as in Hungarian\nand Russian. That means two nouns, or a noun and an\nadjective can be juxtaposed to make a sentence without\nusing any copula. Third person plural might be indicated\nwith the use of plural suffix \"-lar/-ler\".\n\n✎︎ Examples:\n```\nyogurt kültür (yogurt [is-a] culture)\nabbas yolcu (abbas [is-a] traveller)\nevlerinin önü yonca (the front of their home [is-a] plant called yonca)\n```\n\n✎︎ Tests:\n```python\n>>> zero('yolcu')\n'yolcu'\n\n ```\n\n#### Negative\n\nNegation is indicated by the negative copula 'değil'.\n'Değil' is never used as a suffix, but it takes suffixes according to context.\n\n✎︎ Examples:\n```\nyogurt kültür değildir (yogurt [is-not-a] culture)\nabbas yolcu değildir (abbas [is-not-a] traveller)\nevlerinin önü yonca değildir (the front of their home [is-not-a] yonca)\n```\n\n✎︎ Tests:\n```python\n>>> negative('yolcu')\n'yolcu değil'\n\n```\n\n### To Be\n\nTurkish \"to be\" as regular/auxiliary verb ('olmak').\n\n✎︎ Examples:\n```\nyogurt kültürdür (yogurt [is] culture)\nabbas yolcudur (abbas [is] traveller)\nevlerinin önü yoncadır (the front of their home [is] plant called yonca)\n```\n\n✎︎ Tests:\n```python\n>>> tobe('yolcu')\n'yolcudur'\n>>> tobe('üzüm')\n'üzümdür'\n>>> tobe('yonca')\n'yoncadır'\n\n```\n\n\n### Personification Copula\n\n✎︎ Examples:\n```\nben buralıyım (i'm from here)\nsen oralısın (you're from over there)\naynı gezegenliyiz (we're from same planet)\n```\n\n✎︎ Tests:\n```python\n>>> personal('uçak', Person.FIRST, is_plural=False)\n'uçağım'\n\n>>> personal('oralı', Person.SECOND, is_plural=False)\n'oralısın'\n\n>>> personal('gezegenli', Person.FIRST, is_plural=True)\n'gezegenliyiz'\n\n```\n\n### Inferential Mood ('-miş' in Turkish)\n\nInferential mood is used to convey information about events\nwhich were not directly observed or were inferred by the speaker.\n\n✎︎ Examples:\n```\nelmaymışım (i was an apple as i've heard)\nüzülmüşsün (you were sad as i've heard)\ndoktormuş (he/she/it was a doctor as i've heard)\nüzümmüşsün (you were a grape as i've heard)\n```\n\n✎︎ Tests:\n```python\n>>> inferential('öğretmen', Person.SECOND, is_plural=False)\n'öğretmenmişsin'\n\n>>> inferential('üzül', Person.SECOND, is_plural=False)\n'üzülmüşsün'\n\n>>> inferential('robot', Person.FIRST, is_plural=False)\n'robotmuşum'\n\n>>> inferential('robot', Person.THIRD, is_plural=False)\n'robotmuş'\n\n>>> inferential('ada', Person.THIRD, is_plural=False)\n'adaymış'\n\n```\n\n### Inferential Mood ('-isem' in Turkish)\n\nInferential mood is a grammatical mood used to express a proposition whose\nvalidity is dependent on some condition, possibly counterfactual.\n\n✎︎ Examples:\n```\nelmaysam (if i am an apple)\nüzümsen (if you are a grape)\nbıçaklarsa (if they are a knife)\n```\n\n✎︎ Tests:\n```python\n>>> conditional('elma', Person.FIRST, is_plural=False)\n'elmaysam'\n>>> conditional('üzüm', Person.SECOND, is_plural=False)\n'üzümsen'\n>>> conditional('bıçak', Person.THIRD, is_plural=True)\n'bıçaklarsa'\n\n```\n\n### Alethic Modality ('-idi' in Turkish)\n\nLinguistic modality that indicates modalities of truth,\nin particular the modalities of logical necessity,\npossibility or impossibility.\n\n✎︎ Examples:\n```\nelmaydım (i was an apple)\nüzümdün (you were a grape)\ndoktordu (he/she/it was a doctor)\n```\n\n✎︎ Tests:\n```python\n>>> perfective('açık', Person.FIRST, is_plural=False)\n'açıktım'\n\n>>> perfective('oralı', Person.SECOND, is_plural=False)\n'oralıydın'\n\n>>> perfective('dalda', Person.FIRST, is_plural=False)\n'daldaydım'\n\n>>> perfective('dalda', Person.THIRD, is_plural=False)\n'daldaydı'\n\n>>> perfective('dalda', Person.FIRST, is_plural=True)\n'daldaydık'\n\n>>> perfective('dalda', Person.SECOND, is_plural=True)\n'daldaydınız'\n\n>>> perfective('dalda', Person.THIRD, is_plural=True)\n'daldaydılar'\n\n>>> perfective('gezegende', Person.THIRD, is_plural=True)\n'gezegendeydiler'\n\n```\n\n### The Imperfective ('-iyor' in Turkish)\n\nGrammatical aspect used to describe a situation viewed with interior composition.\nIt describes ongoing, habitual, repeated, or similar semantic roles,\nwhether that situation occurs in the past, present, or future.\n\n✎︎ Examples:\n```\ngidiyorum (i'm going)\nkayıyor (he's skating)\nüzümlüyor (he's graping)\n```\n\n✎︎ Tests:\n```python\n>>> imperfective('açı', Person.FIRST, is_plural=False)\n'açıyorum'\n\n>>> imperfective('açık', Person.FIRST, is_plural=False)\n'açıkıyorum'\n\n>>> imperfective('oralı', Person.SECOND, is_plural=False)\n'oralıyorsun'\n\n>>> imperfective('dal', Person.THIRD, is_plural=False)\n'dalıyor'\n\n>>> imperfective('dal', Person.FIRST, is_plural=True)\n'dalıyoruz'\n\n>>> imperfective('dal', Person.FIRST, is_plural=True)\n'dalıyoruz'\n\n>>> imperfective('dal', Person.SECOND, is_plural=True)\n'dalıyorsunuz'\n\n>>> imperfective('dal', Person.THIRD, is_plural=True)\n'dalıyorlar'\n\n```\n\n### The Future Tense ('-iyor' in Turkish)\n\nThe future tense is a verb form that generally marks the event described by the\nverb as not having happened yet, but expected to happen in the future.\n\n✎︎ Examples:\n```\ngidecek (he'll go)\nölecek (he'll die)\ncan alacak (he'll kill someone)\n```\n\n✎︎ Tests:\n```python\n>>> future('gel', Person.FIRST, is_plural=False)\n'geleceğim'\n\n>>> future('açık', Person.FIRST, is_plural=False)\n'açıkacağım'\n\n>>> future('gel', Person.FIRST, is_plural=True)\n'geleceğiz'\n\n```\n\n### Progressive Tense\n\n✎︎ Examples:\ngülmekteyim (i am in the process of laughing)\nölmekteler (they are in the process of dying 👾)\n\n✎︎ Tests:\n```python\n>>> progressive('gel', Person.FIRST, is_plural=False)\n'gelmekteyim'\n\n>>> progressive('açık', Person.FIRST, is_plural=False)\n'açıkmaktayım'\n\n>>> progressive('gel', Person.FIRST, is_plural=True)\n'gelmekteyiz'\n\n```\n\n### Necessitative Copula\n\n✎︎ Examples:\n```\ngitmeliyim (i must go)\nkaçmalıyım (i must run away)\n```\n\n✎︎ Tests:\n```python\n>>> necessitative('git', Person.FIRST, is_plural=False)\n'gitmeliyim'\n\n>>> necessitative('açık', Person.FIRST, is_plural=False)\n'açıkmalıyım'\n\n>>> necessitative('uza', Person.FIRST, is_plural=True)\n'uzamalıyız'\n\n```\n\n### Impotential Copula\n\n✎︎ Examples:\n```\ngidemem (i cannot come)\nkaçamayız (we cannot run away)\n```\n\n✎︎ Tests:\n```python\n>>> impotential('git', Person.FIRST, is_plural=False)\n'gidemem'\n\n>>> impotential('git', Person.SECOND, is_plural=False)\n'gidemezsin'\n\n>>> impotential('git', Person.THIRD, is_plural=False)\n'gidemez'\n\n>>> impotential('git', Person.FIRST, is_plural=True)\n'gidemeyiz'\n\n>>> impotential('git', Person.FIRST, is_plural=True)\n'gidemeyiz'\n\n>>> impotential('git', Person.SECOND, is_plural=True)\n'gidemezsiniz'\n\n>>> impotential('git', Person.THIRD, is_plural=True)\n'gidemezler'\n\n>>> impotential('al', Person.THIRD, is_plural=True)\n'alamazlar'\n\n```\n\n\n\n\nkefir.meta\n\n# Contribution Guide\n\n- Don't load a fixture, code is our data.\n- Don't leave a comment! Docstrings are only for the context and test.\n- Be nice 🦄\n\n# Credits\n\n- Berk Buzcu (8-bit artwork)\n- Serdar Açıkyol (Illustration)\n- Fatih Erikli (Phonological Processes, Predicate Logic)\n- Armagan Amcalar ([Javascript Port](https://github.com/yogurt-cultures/kefir-js))\n- Umut Karcı (Packaging and Versioning)\n- Kerem Bozdaş (Editing)\n\n# License\n\nThis project is licensed under the terms of the [MIT license](https://github.com/yogurt-cultures/kefir/blob/master/LICENSE).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yogurt-cultures/kefir",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kefir",
    "package_url": "https://pypi.org/project/kefir/",
    "platform": "",
    "project_url": "https://pypi.org/project/kefir/",
    "project_urls": {
      "Homepage": "https://github.com/yogurt-cultures/kefir"
    },
    "release_url": "https://pypi.org/project/kefir/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Kefir is a natural language processing kit for Turkic languages",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4440362,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acbc2b33a0657cda729faedefb896b4e1315251dc38387763cf3973ca0b758c7",
          "md5": "6f926d3c79b0545ba196f2d17e9838a4",
          "sha256": "4d37b84ac9092d8b2b4e6b822c04b0828673f4cc6dea31f2d5d8973dccfac154"
        },
        "downloads": -1,
        "filename": "kefir-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f926d3c79b0545ba196f2d17e9838a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17997,
        "upload_time": "2018-08-12T20:01:03",
        "upload_time_iso_8601": "2018-08-12T20:01:03.439019Z",
        "url": "https://files.pythonhosted.org/packages/ac/bc/2b33a0657cda729faedefb896b4e1315251dc38387763cf3973ca0b758c7/kefir-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fedfc4691ce436da52905a8edf951fbb2d87b1559675b191ce736a72410ad520",
          "md5": "1235c7713fea143b36c425f56ca5fb32",
          "sha256": "a5ff762ad051468318af16ecfeeaa98fbe1d87421a334bd63f48120e76be3c89"
        },
        "downloads": -1,
        "filename": "kefir-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1235c7713fea143b36c425f56ca5fb32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19245,
        "upload_time": "2018-10-01T07:59:53",
        "upload_time_iso_8601": "2018-10-01T07:59:53.603067Z",
        "url": "https://files.pythonhosted.org/packages/fe/df/c4691ce436da52905a8edf951fbb2d87b1559675b191ce736a72410ad520/kefir-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2361577f71ca1f8cc98aebf3fcc8a9de051a82b08f01b75e4580cc17bcfcb60",
          "md5": "caa037cada1bfec776d3268bd4d71d81",
          "sha256": "f7fff603bde7c6bfb86dcce81c47cd10679c17dc92b3257d98e7433e6debdd67"
        },
        "downloads": -1,
        "filename": "kefir-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "caa037cada1bfec776d3268bd4d71d81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19300,
        "upload_time": "2018-11-01T11:50:13",
        "upload_time_iso_8601": "2018-11-01T11:50:13.363105Z",
        "url": "https://files.pythonhosted.org/packages/c2/36/1577f71ca1f8cc98aebf3fcc8a9de051a82b08f01b75e4580cc17bcfcb60/kefir-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "246976aa5548bef445af429cf0119eadd1eb96f8ada6c19dc0c3c18f051bf347",
          "md5": "47175509822cff250b2fc450b8e5cdab",
          "sha256": "456e019454c128302e4a9c898894d18afad35583386dc710c5404eef878b207e"
        },
        "downloads": -1,
        "filename": "kefir-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "47175509822cff250b2fc450b8e5cdab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30707,
        "upload_time": "2018-11-01T11:50:20",
        "upload_time_iso_8601": "2018-11-01T11:50:20.769547Z",
        "url": "https://files.pythonhosted.org/packages/24/69/76aa5548bef445af429cf0119eadd1eb96f8ada6c19dc0c3c18f051bf347/kefir-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "246976aa5548bef445af429cf0119eadd1eb96f8ada6c19dc0c3c18f051bf347",
        "md5": "47175509822cff250b2fc450b8e5cdab",
        "sha256": "456e019454c128302e4a9c898894d18afad35583386dc710c5404eef878b207e"
      },
      "downloads": -1,
      "filename": "kefir-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "47175509822cff250b2fc450b8e5cdab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30707,
      "upload_time": "2018-11-01T11:50:20",
      "upload_time_iso_8601": "2018-11-01T11:50:20.769547Z",
      "url": "https://files.pythonhosted.org/packages/24/69/76aa5548bef445af429cf0119eadd1eb96f8ada6c19dc0c3c18f051bf347/kefir-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}