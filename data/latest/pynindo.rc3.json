{
  "info": {
    "author": "axju",
    "author_email": "axel.juraske@short-report.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "=======\npynindo\n=======\n.. image:: https://img.shields.io/pypi/v/pynindo\n   :alt: PyPI\n   :target: https://pypi.org/project/pynindo/\n\n.. image:: https://img.shields.io/pypi/pyversions/pynindo\n   :alt: Python Version\n   :target: https://pypi.org/project/pynindo/\n\n.. image:: https://img.shields.io/pypi/wheel/pynindo\n   :alt: Wheel\n   :target: https://pypi.org/project/pynindo/\n\n.. image:: https://img.shields.io/pypi/implementation/pynindo\n   :alt: Implementation\n   :target: https://pypi.org/project/pynindo/\n\n.. image:: https://img.shields.io/pypi/dm/pynindo\n   :alt: Downloads\n   :target: https://pypi.org/project/pynindo/\n\n.. image:: https://img.shields.io/pypi/l/pynindo\n   :alt: License\n   :target: https://pypi.org/project/pynindo/\n\nThe Youtuber **rezo** create a social media charts and statistics page. I developed\nthis small Python API for it. It also includes a small CLI so you can write your\nown bash script or review the new media charts from the command line.\n\nWhy?\n----\nNindo.de_ is very pretty, but I find the raw data much more exciting. I looked\nthrough the http traffic and catches the most important API calls. Pynindo bind\neverything together and make it easy to get the different raw data.\n\n.. _Nindo.de: https://www.nindo.de/\n\nHow to install?\n---------------\nIt is Python, so uses pip::\n\n  pip install pynindo\n\nMaybe it's not on PyPi yet. Shame on me. But then you can try that::\n\n   pip install git+https://github.com/axju/pynindo.git\n\nAnyway do not forget to use a virtual environment ;-)\n\nHow to use?\n-----------\nIt is really simple. Import the api from the pynindo package and then play with\nit. There is a list with all Endpoints below::\n\n  >>> from pynindo import api\n  >>> api.charts.youtube\n   1    1365880 UnsympathischTV\n   2    1288557 KMNGang\n   3    1228038 BangerMusik\n   4    1122593 Kontra K\n   5    1063852 Rezo\n   6     997038 MontanaBlack\n   7     991567 Mert\n   8     961703 BibisBeautyPalace\n   9     936666 Julien Bam\n  10     864054 Varion\n  >>> api.viral.tiktok\n  platform:tiktok |      type:likes |  2500000 Anna Ix\n  platform:tiktok | type:kommentare |   141100 Mido\n  platform:tiktok |      type:views | 60400000 Anna Ix\n\nThis are only the string representation of the data. Call *.json()* on any\nendpoint to get the raw data.::\n\n  >>> api.search['rezo'].json()\n  [{'id': '18ed6dae1cf050a2b3bc65f72ef1db0d', 'name': 'Rezo', '_channels': [{'name': 'Rezo ja lol ey', 'platform': 'youtube', 'avatar': 'https://yt3.ggpht.com/a/AGF-l7-Z43wxXREipZAy2eFGe3msWo7slqem6sfQtQ=s800-c-k-c0xffffffff-no-rj-mo', 'userID': 'UCvU1c8D5n1Rue3NFRu0pJSw'}, {'name': 'Rezo', 'platform': 'instagram', 'avatar': 'https://scontent-iad3-1.cdninstagram.com/v/t51.2885-19/s320x320/82444457_181735326360382_1854627991502454784_n.jpg?_nc_ht=scontent-iad3-1.cdninstagram.com&_nc_ohc=2mcqiSZbzjsAX_0Heqf&oh=4c5411c7ba7c37b6ff4af746022f8988&oe=5F413D49', 'userID': '2200749531'}, {'name': 'Rezo', 'platform': 'tiktok', 'avatar': 'https://p16-va-tiktok.ibyteimg.com/img/musically-maliva-obj/1643642074164230~c5_720x720.jpeg', 'userID': '6651546051420913670'}, {'name': 'Rezo', 'platform': 'twitter', 'avatar': 'https://pbs.twimg.com/profile_images/1074977137730510849/OGFUOGl7_400x400.jpg', 'userID': 'rezomusik'}, {'name': 'rezo', 'platform': 'youtube', 'avatar': 'https://yt3.ggpht.com/a/AGF-l78WgdiaSU879chSmplIenQ5qRAzXkdNGqyPVQ=s800-c-k-c0xffffffff-no-rj-mo', 'userID': 'UCLCb_YDL9XfSYsWpS5xrO5Q'}], 'avatar': 'https://yt3.ggpht.com/a/AGF-l7-Z43wxXREipZAy2eFGe3msWo7slqem6sfQtQ=s800-c-k-c0xffffffff-no-rj-mo'}]\n\nAs a script\n~~~~~~~~~~~\nNow we can write a small script, to display more information to the top\nYoutuber:\n\n.. code-block:: python\n\n  from pynindo import api\n\n  for item in api.charts.youtube.small.json():\n      print(api.artist[item['artistID']])\n\nSee the *examples* folder for more funny stuff.\n\nMany ways to call\n~~~~~~~~~~~~~~~~~\nThere are many ways to call the API. All endpoints have the *__getitem__*\nattribute. That means::\n\n  >>> api.milestones.new\n\nis the same as::\n\n  >>> api['milestones'].new\n\nor::\n\n  >>> api['milestones']['new']\n\nor::\n\n  >>> api.milestones['new']\n\nSame thing for everyone, but watch out a bit with *search* and *artist*.\n\nCallable root\n~~~~~~~~~~~~~\nThe second important part is the callable root api. You\ncan enter the endpoints, by calling the api itself::\n\n  >>> api('charts', 'youtube', 'rank')\n\nis the same as::\n\n  >>> api.charts.youtube.rank\n\nThe api class\n~~~~~~~~~~~~~\nFor some advanced use, you can create the api object yourself::\n\n  from pynindo.nindo import Api\n  api = Api\n\n\nCommand line interface\n----------------------\nYes there is one, try it::\n\n  $ pynindo -h\n  $ pynindo charts -h\n  $ pynindo viral -h\n\nEndpoints\n---------\nLike nindo.de, the api has multiple sections. The placeholders *platform* and\n*type* have the following content::\n\n  platform = {youtube|instagram|twitter|tiktok|twitch}\n  type = {likes|kommentare|views|retweets|max. zuschauer|l√§ngster stream}\n\nCharts\n~~~~~~\n::\n\n  api.charts.{platform}.{type|small|rank}\n\nThe current charts to each platform. Each platform has several individual\nsubcategories. Examples::\n\n  api.charts.youtube\n  api.charts.twitter.likes\n  api.charts.instagram.small\n  api.charts.tiktok.rank\n\nViral\n~~~~~\n::\n\n  api.viral.{platform}.{type}\n\nLists all posts that were viral last month. The data are also grouped by the\nplatform and the type. Examples::\n\n  api.viral\n  api.viral.youtube\n  api.viral.twitter.likes\n\nMilestones\n~~~~~~~~~~\n::\n\n  api.milestones.{new|past}.{platform}\n\nAny artist who has or will soon reach a particular number of followers.\nExamples::\n\n  api.milestones\n  api.milestones.new\n  api.milestones.new.tiktok\n  api.milestones.past\n\nSearch\n~~~~~~\n::\n\n  api.search['artist'].{first|last|count()|[n]}\n\nThe entry point to find a artist. Examples::\n\n  api.search['rezo']\n  api.search['rezo'].count()\n  api.search['rezo'].first\n  api.search['rezo'].last\n  api.search['rezo'][0]\n\nArtist\n~~~~~~\n::\n\n  api.artist['id']\n\nAll data belonging to an artist. Examples::\n\n  api.artist['18ed6dae1cf050a2b3bc65f72ef1db0d']\n\n\nDevelopment\n-----------\nVirtual environment windows::\n\n  python -m venv venv\n  venv\\Scripts\\activate\n\nVirtual environment linux::\n\n  python3 -m venv venv\n  source venv/bin/activate\n\nSetup project::\n\n  python -m pip install --upgrade pip wheel setuptools coverage flake8 pylint tox\n  python -m pip install -e .\n\nCreate test data::\n\n  python .\\tests\\utils.py\n\nRun some test::\n\n  tox -p auto\n\nRun single test with code coverage::\n\n  coverage run --source=pynindo -m unittest discover -v\n  coverage report -m\n\nCheck syntax::\n\n  flake8 pynindo\n  pylint --rcfile=setup.cfg pynindo\n\nCreate package::\n\n  python -m pip install --upgrade twine\n  python setup.py sdist bdist_wheel\n  twine check dist/*\n  twine upload dist/*\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/axju/pynindo",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynindo",
    "package_url": "https://pypi.org/project/pynindo/",
    "platform": "",
    "project_url": "https://pypi.org/project/pynindo/",
    "project_urls": {
      "Homepage": "https://github.com/axju/pynindo"
    },
    "release_url": "https://pypi.org/project/pynindo/0.1.2/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "The Python API for Nindo.de",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7757054,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd6b9c08e3f51b03ae856b3846779403a3a681e01e1f2ef55c60beb85dc0e696",
          "md5": "f9a1e1d8cecfa63af5fc39af2c12477e",
          "sha256": "207921341d8eb48f39ba70814d33aa67ab68c81407cf7f3b224a9fae54667ceb"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9a1e1d8cecfa63af5fc39af2c12477e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8127,
        "upload_time": "2020-07-22T12:14:32",
        "upload_time_iso_8601": "2020-07-22T12:14:32.557276Z",
        "url": "https://files.pythonhosted.org/packages/cd/6b/9c08e3f51b03ae856b3846779403a3a681e01e1f2ef55c60beb85dc0e696/pynindo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "383898fa12b13b2d447d67808f185d4042f28066c0575345b8b71ad35da26fa7",
          "md5": "5bdffb6acbe9a24089fff98c45144df4",
          "sha256": "0d1aa41a93ab3101d8e505f0cd08ea979aa2f0fbe476f4067d0b60ede2396b1f"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bdffb6acbe9a24089fff98c45144df4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 243560,
        "upload_time": "2020-07-22T12:14:35",
        "upload_time_iso_8601": "2020-07-22T12:14:35.060243Z",
        "url": "https://files.pythonhosted.org/packages/38/38/98fa12b13b2d447d67808f185d4042f28066c0575345b8b71ad35da26fa7/pynindo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01004b19f3c9f07cf65ab15ff206be364e6c42af589d4a8fa319277f2ef1054d",
          "md5": "abb8a91df8cbeff768c7c346b093eae6",
          "sha256": "85ef7707c892ad98ebdec03fc77306053e61aee07a50708796176ffde3fc386a"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abb8a91df8cbeff768c7c346b093eae6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8125,
        "upload_time": "2020-07-22T12:29:50",
        "upload_time_iso_8601": "2020-07-22T12:29:50.747556Z",
        "url": "https://files.pythonhosted.org/packages/01/00/4b19f3c9f07cf65ab15ff206be364e6c42af589d4a8fa319277f2ef1054d/pynindo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f184276cb47340054753211a36757cb1e223313ef6ff379e279f9d3ee7c00ec3",
          "md5": "755acbda02b5023c6e2e8cb306650cd5",
          "sha256": "cb1fa5abb4b4a63e3f748cb2a11dfa66be8e292ce6d7a3bf2c319708a3c5fb70"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "755acbda02b5023c6e2e8cb306650cd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 243558,
        "upload_time": "2020-07-22T12:29:52",
        "upload_time_iso_8601": "2020-07-22T12:29:52.336093Z",
        "url": "https://files.pythonhosted.org/packages/f1/84/276cb47340054753211a36757cb1e223313ef6ff379e279f9d3ee7c00ec3/pynindo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b900c67e2626b60060d5fe024b9ff1687752f136076bbdc410cd382583440d1e",
          "md5": "89c71e978669d95d2653db0a80b0e88d",
          "sha256": "97bca404cae5c827c3c1a1b84a271b0a7f59f1ac1b8e69b0b39fee5afa0e3d8c"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89c71e978669d95d2653db0a80b0e88d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8123,
        "upload_time": "2020-07-22T12:32:17",
        "upload_time_iso_8601": "2020-07-22T12:32:17.406798Z",
        "url": "https://files.pythonhosted.org/packages/b9/00/c67e2626b60060d5fe024b9ff1687752f136076bbdc410cd382583440d1e/pynindo-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "040fafabbd104bdd680193037f7598a70dd9875d67a56a14361eee3864004c98",
          "md5": "8b103dd56e205dcc94b0016f45d092de",
          "sha256": "da9d1abb933b11ea96031110e7e3b1fde210df4ed6188aed91ee9609b0e96312"
        },
        "downloads": -1,
        "filename": "pynindo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b103dd56e205dcc94b0016f45d092de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 243547,
        "upload_time": "2020-07-22T12:32:20",
        "upload_time_iso_8601": "2020-07-22T12:32:20.222780Z",
        "url": "https://files.pythonhosted.org/packages/04/0f/afabbd104bdd680193037f7598a70dd9875d67a56a14361eee3864004c98/pynindo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b900c67e2626b60060d5fe024b9ff1687752f136076bbdc410cd382583440d1e",
        "md5": "89c71e978669d95d2653db0a80b0e88d",
        "sha256": "97bca404cae5c827c3c1a1b84a271b0a7f59f1ac1b8e69b0b39fee5afa0e3d8c"
      },
      "downloads": -1,
      "filename": "pynindo-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89c71e978669d95d2653db0a80b0e88d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8123,
      "upload_time": "2020-07-22T12:32:17",
      "upload_time_iso_8601": "2020-07-22T12:32:17.406798Z",
      "url": "https://files.pythonhosted.org/packages/b9/00/c67e2626b60060d5fe024b9ff1687752f136076bbdc410cd382583440d1e/pynindo-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "040fafabbd104bdd680193037f7598a70dd9875d67a56a14361eee3864004c98",
        "md5": "8b103dd56e205dcc94b0016f45d092de",
        "sha256": "da9d1abb933b11ea96031110e7e3b1fde210df4ed6188aed91ee9609b0e96312"
      },
      "downloads": -1,
      "filename": "pynindo-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8b103dd56e205dcc94b0016f45d092de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 243547,
      "upload_time": "2020-07-22T12:32:20",
      "upload_time_iso_8601": "2020-07-22T12:32:20.222780Z",
      "url": "https://files.pythonhosted.org/packages/04/0f/afabbd104bdd680193037f7598a70dd9875d67a56a14361eee3864004c98/pynindo-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}