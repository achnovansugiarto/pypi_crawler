{
  "info": {
    "author": "Blur Studio",
    "author_email": "opensource@blur.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Hab\n\nA launcher that lets you configure software distributions and how they are consumed with\ndependency resolution. It provides a habitat for you to work in.\n\nFeatures:\n\n* [URI](#uri) based configuration resolution with inheritance. Makes it easy to define\ngeneric settings, but override for child URIs.\n* Simple [configuration](#configuration) with json files.\n* Site configuration, code distributions are separate from URI configurations. All of\nthese use a common json schema.\n* Flexible site configuration with a minimum of environment variables.\n* No long running python processes. The hab cli uses a shell specific script instead\nof a setuptools exe. This prevents some strange behavior in the shell if the python\nprocess is killed without exiting the new shell that python launched.\n* Can modify the existing shell similar to how virtualenv's activate script works.\n* Simple distribution of versions. Should not require updating of checked in files\nto release a unique distro version.\n* Easy developer testing. A developer can additional site configurations for their host.\nA git checkout can be found and the version of a distro can be dynamically generated\nusing setuptools_scm, or explicitly set by adding a `.hab_version.txt` that is not\ncommitted to the repo.\n\n## URI\n\n`identifier1/identifier2/...`\n\nYou specify a configuration using a simple URI of identifiers separated by a `/`.\nCurrently hab only supports absolute uri's.\n\nExamples:\n* projectDummy/Sc001/S0001.00\n* projectDummy/Sc001/S0001.00/Animation\n* projectDummy/Thug\n* default\n\nIf the provided uri has no configurations provided, the default configuration is used.\nThis also supports inheritance with some special rules, see\n[config inheritance](#config-inheritance) for more details.\n\nThe provided URI is always stored in the `HAB_URI` environment variable.\n\n## CLI\n\nHab is designed as an api with cli support. The majority of the actual work is\ndone by the api so it can be used with the provided cli, or can be customized by import.\nA gui version of the cli is planned in the future as a second pip package.\n\n1. `hab env`: The env command launches a new shell configured by hab. You can exit\nthe shell to return to the original configuration. This is how most users will interact\nwith hab in the command line.\n2. `hab activate`: Updates the current shell with the hab configuration. This is\nsimilar to activating a virtualenv, but currently there is no way to deactivate. This is\nmostly how scripts can make use of hab.\n3. `hab dump`: Formats the resolved configuration and prints it. Used for debugging\nconfigurations and listing the commands available.\n4. `hab launch`: A shortcut for `hab env --launch [alias]`, but automatically exits the\nconfigured shell when the launched application exits. Returning you to your existing\nshell without modification. Useful for quickly testing changes to a configuration\nrequiring a running an application.\n\nExamples:\n\n```bash\n$ hab env projectDummy\n$ hab env projectDummy/Thug\n```\n\nThe cli prompt is updated while inside a hab config is active. It is `[URI] [cwd]`\nWhere URI is the uri requested and cwd is the current working directory.\n\n## Restoring resolved configuration\n\nUnder normal operation hab resolves the configuration it loads each time it is run.\nThis makes it easy to get updates to the configuration by re-launching hab. However,\nif you want to load the same hab configuration at a later date or on another computer\nit's possible a new distro version has been released or some config settings have\nbeen modified. For example if you submit a render job to the farm, you want every\nframe to render using the same hab configuration not what ever it happens to\nresolve for that launch.\n\nTo handle this the hab cli stores the current configuration in the `HAB_FREEZE`\nenvironment variable. You can even use a frozen config on other platforms as long\nas you properly configure `platform_path_maps` in your site config.\n\nThe cli can be used to export these freezes. This example uses the cli to save a\nfreeze to disk as json using dump using `--format json`.\n```bash\nhab dump projectDummy --format freeze > /tmp/frozen_config.json\n```\n\nAnd to restore that frozen config from the json file. This works for commands\nother than `dump`.\n```bash\nhab dump --unfreeze /tmp/frozen_config.json\n```\n\nSimilarly you can save/load the encoded freeze string using `--format freeze`.\nThis is what is stored in the `HAB_FREEZE` environment variable.\n\n```bash\nexport frozen_config=$(hab dump app/nuke13 -f freeze)\nhab dump --unfreeze $frozen_config\n```\n\nA freeze string is prefixed with `vX:` to denote the version of freeze it was\nencoded with. See `hab.utils.encode_freeze` and `hab.utils.decode_freeze` to\nencode/decode each version of freeze strings.\n\nYou can configure what version of freeze string is saved in `HAB_FREEZE` by\nsetting the `freeze_version` key in your site json configuration. This should be\nan int value or None. If not specified(ie None), then the default version is used.\n\n```json\n{\"set\": {\"freeze_version\": 1}}\n```\n\n## API\n\nTODO\n\n## Configuration\n\nHab is configured by json files found with glob strings passed to the cli or defined\nby an environment variable.\n\n### Site\n\nHab uses the `HAB_PATH` environment variable to point to one or more site\nconfiguration files. If the `--site` option is passed to the cli, it is used instead of\nthe environment variable.\n\nEach of the file paths specified are read and merged into a single site configuration\ndictionary hab uses. When using multiple site json files here are some general\nrules to keep in mind.\n\n1. The left most site configuration takes precedence for a given item.\n2. For prepend/append operations on lists, the left site file's paths will placed\non the outside of the the right site file's paths.\n3. For `platform_path_maps`, only the first key is kept and any duplicates\nare discarded.\n\nSee [Defining Environments](#defining-environments) for how to structure the json\nto prepend, append, set, unset values.\n\nDevelopers can use this to load local site configurations loading their wip code\ninstead of the official releases. See [TestResolvePaths::test_paths](tests/test_site.py)\nto see an example of [overriding](tests/site_override.json) the\n[main](tests/site_main.json) site settings.\n\nYou can inspect the site settings by using the `hab dump -t s` or\n`hab dump --type site` cli command. See\n[TestMultipleSites::test_left_right and TestMultipleSites::test_right_left](tests/test_site.py)\nfor an example of how these rules are applied. Here is a dump of the final result\nof using all [3 site json files](tests/site).\n```bash\n$ cd tests/site\n$ hab --site site_left.json --site site_middle.json --site site_right.json dump --type site -v\nDump of Site\n-------------------------------------------------------------------\nHAB_PATHS:  C:\\blur\\dev\\hab_\\tests\\site\\site_left.json\n            C:\\blur\\dev\\hab_\\tests\\site\\site_middle.json\n            C:\\blur\\dev\\hab_\\tests\\site\\site_right.json\nconfig_paths:\ndistro_paths:\nignored_distros:  release, pre\nplatforms:  windows, mac, linux\nset_value:  left\ntest_paths:  left_prepend\n             middle_prepend\n             right_prepend\n             right_append\n             middle_append\n             left_append\nplatform_path_maps:  host:  linux:  host-linux_left\n                                     windows:  host-windows_left\n                     mid:  linux:  mid-linux_middle\n                           windows:  mid-windows_middle\n                     net:  linux:  net-linux_right\n                           windows:  net-windows_right\n                     shared:  linux:  shared-linux_left\n                              windows:  shared-windows_left\n-------------------------------------------------------------------\n```\nNote the order of left/middle/right in the test_paths variable. Also, for\n`platform_path_maps`, `host` is defined in all 3 site files, but only the first\nsite file with it defined is used. The other path maps are picked up from the\nsite file they are defined in.\n\n### Python version\n\nHab uses shell script files instead of an entry_point executable. This allows it\nto modify the existing shell(see `hab activate`). This has a small drawback of needing\nto know what version of python to call. It relies on the assumption that you are using\nhab with the default python 3 install. For example that you can call `python3 -m hab`\nor `py -3 -m hab` on windows. Here is a breakdown of how the python call is built by\nthe scripts:\n\n1. If the `HAB_PYTHON` env var is set, its value is always used.\n2. If a virtualenv is active, the `python` command is used.\n3. Otherwise on linux `python3` is used, and on windows `py -3` is used.\n\n#### Common settings\n\n* `colorize`: If `hab dump` should colorize its output for ease of reading.\n* `config_paths`: Configures where URI configs are discovered. See below.\n* `distro_paths`: Configures where distros discovered. See below.\n* `platform_path_maps`: Configures mappings used to convert paths from one\noperating system to another. This is used by the freeze system to ensure that if\nunfrozen on another platform it will still work.\n* `platforms`: A list of platforms that are supported by these hab configurations.\nWhen using freeze, all of these platforms will be stored. Defaults to linux, mac, windows.\n* `prereleases`: If pre-release distros should be allowed. Works the same as\n`pip install --pre ...`.\n\n`config_paths` and `distro_paths` take one or more glob paths separated by `os.pathsep`.\nThe paths are processed left to right. For a given glob string in these variables you\ncan not have duplicate values. For configs a duplicate is two configs with the same URI.\nA duplicate distro is two distros with the same name and version. If this happens a\n`DuplicateJsonError` is raised. This prevents developers from copying a config and\nforgetting to update its context.\n\nYou can however have duplicates across individual glob paths. The glob paths are processed\nleft to right and the first config/distro is used, any subsequent duplicates are ignored\nand a warning is logged to aid in debugging. This feature allows a developer to add any\ngit checkouts they are working on that will be used, but still have access to all of the\nglobal shared configs/distros they are not working on.\nSee [specifying distro version](#specifying-distro-version) for details on specifying a\ndistro version in a git repo.\n\n`platform_path_maps` is a dictionary, the key is a unique name for each mapping,\nand value is a dictionary of leading paths for each platform. The unique name\nallows for multiple site json files to override the setting. If multiple site\njson files specify the same key, the right-most site json file specifying that\nkey is used.\n\n```json\n{\n    \"append\": {\n        \"platform_path_maps\": {\n            \"server-main\": {\n                \"linux\": \"/mnt/main\",\n                \"windows\": \"\\\\\\\\example\\\\main\"\n            },\n            \"server-dev\": {\n                \"linux\": \"/mnt/dev\",\n                \"windows\": \"\\\\\\\\example\\\\dev\"\n            }\n        }\n    },\n    \"set\": {\n        \"platforms\": [\"linux\", \"windows\"]\n    }\n}\n```\n\nWith these settings, if a path on a linux host, starts with `/mnt/main` when\ngenerating the corresponding windows file path it will translate it to\n`\\\\example\\main`. Note the use of `platforms` to disable mac platform support.\n\n### Distro\n\nA distro defines a application, distribution or plugin that has multiple versions. It\nis mostly used to define aliases and environment variables. It can also define\nadditional requirements.\n\nA recommended released distro folder structure: `[name]\\[version]\\.hab.json`.\nThe `[name]` folder is referenced by one of the disto_path globs. This makes it easy\nto store multiple versions of the distro. Each glob specified by `HAB_DISTRO_PATHS` will\nautomatically have `/*/.hab.json` added to it, so the `.hab.json` file should\nbe in the root of a version folder. The root of the version folder is likely the root of\na git repo.\n\nExample .hab.json:\n```json\n{\n    \"name\": \"maya2020\",\n    \"version\": \"2020.1\",\n    \"environment\": {\n        \"append\": {\n            \"MAYA_MODULE_PATH\": \"{relative_root}\"\n        }\n    },\n    \"aliases\": {\n        \"windows\": [\n            [\"maya\", \"C:\\\\Program Files\\\\Autodesk\\\\Maya2020\\\\bin\\\\maya.exe\"],\n            [\"mayapy\", \"C:\\\\Program Files\\\\Autodesk\\\\Maya2020\\\\bin\\\\mayapy.exe\"]\n        ]\n    }\n}\n\n```\n\nIn most cases  you will not define version in `.hab.json`. If not defined, the\nparent folder is used as the version. This makes it easy for automated deployments\nwithout needing to modify a file checked into version control.\n\nYou will note that I'm using the version of maya in the name. This allows you to provide\naccess to multiple versions of the Maya application. Only one version of a given distro\nname is going to be used so if you need access to multiple versions of maya you must use\nthis method. If there are duplicate alias names, only one will be provided and it is not\nconsistent, so you should define version specific aliases as well if you plan to use\nmore than one for a given config.\n\n#### Specifying distro version\n\nThere are a few ways to define a distro version, they are provided to make deployment\nand development testing easy. Here is the 4 ways to define the version of a distro, the\nfirst one found is used.\n\n1. The version property in `.hab.json`. This has some drawbacks, `.hab.json` is\nlikely checked into version control so modifying this requires committing changes to\nthe repo, or working copy changes you have to maintain.\n2. A `.hab_version.txt` file next to `.hab.json`. The drawback to this, is that\nit requires some maintenance to update, but allows you work around the issues from # 1\nby not tracking this file in the repo.\n3. `.hab.json`'s parent directory name. For distribution, this is the preferred\noption. You will end up needing a version folder for each deployed version of a disto\nto allow you to pick the version for a given config, so this lets you specify the\nversion simply by copying it to the target location.\n4. `setuptools_scm.get_version` gets a version from version control. This is for\ndeveloper working copies, they can simply checkout the repo and even if its not a pip\npackage this will resolve a valid and automatically updated version number provided the\nrepo follows the setuptools_scm requirements for defining version numbers.\n\n### Config\n\nA config defines the environment to be applied. The context is picked by the provided URI.\nThey are mostly used to define distros, lock those distros to specific versions, and can\nbe used to set environment variables.\n\nA given config needs two pieces of information defined, its name and context. The\ncontext is a list of its parents names. When joined together they would build a URI.\n\nExample project_a_thug_animation.json:\n```json\n{\n    \"name\": \"Animation\",\n    \"context\": [\"project_a\", \"Thug\"],\n    \"environment\": {\n        \"set\": {\n            // Explicitly set this environment variable to a value\n            \"STUDIO_PROJECT\": \"project_a\"\n        }\n    },\n    // Inherit any configurations NotSet in this file from the parent context\n    \"inherits\": true,\n    // Require any version of the Maya2020 distro\n    \"distros\": [\n        \"maya2020\"\n    ]\n}\n```\n\nThis config would have the URI `project_a/Thug/Animation`.\n\n#### Config Inheritance\n\nWhen resolving a URI it will find the closest exact match, so if `project_a/Thug` is\npassed but Thug does not have a config, its parent project_a is used. If there is no\nconfig for project_a, the default config will be used.\n\nThe config system has an inheritance system that follows a tree structure. If a property\nis `hab.NotSet` on the chosen config and the config has inherit enabled the closest\nparent with that property set will be used. If the root of the tree has inherit\nenabled, and the property still is `hab.NotSet`, then the `default` tree will be\nchecked.\n\nWhen the default tree is checked when resolving inheritance, some special rules for\nmatching contexts are applied. It will attempt to find the most specific context defined\nin the default tree, but it will find the largest partial match for the start of each\nURI identifier. In the [default test config](tests/configs/default), you will see `Sc1`\nand `Sc11`. The URI of `not_a_project/Sc101` would end up using `default/Sc1`. The URI\n`not_a_project/Sc110` would use `default/Sc11`. The URI `not_a_project/Sc200` would\nuse `default`.\n\n### Variable Formatting\n\nThe configuration environment variables and aliases can be formatted using str.format syntax.\n\nCurrently supported variables:\n* `{relative_root}`: The directory name of the .json config file. Think of this as the relative path\n`.` when using the command line, but this is a clear indication that it needs to be\nreplaced with the dirname and not left alone.\n* `{ANYTHING!e}`: `!e` is a special conversion flag for Environment variables. This will\nbe replaced with the correct shell environment variable. For bash it becomes `$ANYTHING`,\nin power shell `$env:ANYTHING`, and in command prompt `%ANYTHING%`. ANYTHING is the name\nof the environment variable.\n* `{;}`: This is replaced with the path separator for the shell. Ie `:` for bash, and `;`\non windows(including bash).\n\n\n### Defining Aliases\n\nAliases are normally defined for distros. They provide information to create a command\nin the terminal and what program that command runs. The top level dictionary is specifies\nthe operating system this alias is for. Each alias is defined as a two part list where\nthe first item is the name of the created alias command. The second argument is a string\nor list of strings of the actual command to run. If you need to pass hard coded\narguments to the alias command you should use a list.\n\n```json\n    \"aliases\": {\n        \"windows\": [\n            [\"hython\", \"C:/Program Files/Side Effects Software/Houdini 19.0.578/bin/hython.exe\"],\n            [\n                \"usdview\",\n                [\n                    \"C:/Program Files/Side Effects Software/Houdini 19.0.578/bin/hython\",\n                    \"C:/Program Files/Side Effects Software/Houdini 19.0.578/bin/usdview\"\n                ]\n            ],\n        ],\n        \"linux\": [\n            [\"hython\", \"/opt/hfs19.0.578/bin/hython\"]\n        ]\n    }\n```\n\n`HabBase.aliases` is reduced to just the current operating system's aliases. Ie if\nthis is run on windows, you would have access to both the hython and usdview alias, but\non linux you would only have access to hython.\n\n\n### Defining Environments\n\nThe `environment` key in distro and config definitions is used to configure modifications\nto the resolved environment. This is stored in `HabBase.environment_config`.\n\n```json\n    \"environment\": {\n        \"unset\": [\n            \"UNSET_VARIABLE\"\n        ],\n        \"set\": {\n            \"MAYA_MODULE_PATH\": \"{relative_root}\"\n        },\n        \"append\": {\n            \"MAYA_MODULE_PATH\": \"{relative_root}/append\",\n        },\n        \"prepend\": {\n            \"MAYA_MODULE_PATH\": \"prepend_value\"\n        }\n    }\n```\n\nThere are 4 valid top level keys they are processed in this order if used:\n* unset: The names of environment variables to remove.\n* set: Replace or set the environment variable to this value.\n* prepend: Treat this variable as a list and insert the value at the start of the list.\n* append: Treat this variable as a list and add the value at the end of the list.\n\nThe `unset` key stores a list of environment variable names, the rest store a dictionary\nof environment variable keys and the values to store.\n\nThe `HabBase.environment` property shows the final resolved\nenvironment variables that will be applied. When using a resolved `FlatConfig` object,\nenvironment also contains the merger of all environment_config definitions for all\n`distros`. When building append and prepend environment variables it processes\neach dependency in a depth-first manner.\n\nThese environment variables will be directly set if there is a value, and unset if the\nvalue is blank. Hab doesn't inherit the session/system/user environment variable\nvalues with the exception of the `PATH` variable as this would break the system.\nLike Rez, the first set, prepend or append operation on a variable will replace the\nexisting variable value.\n\nThis quote from the Rez documentation explains why:\n> \"Why does this happen? Consider PYTHONPATH - if an initial overwrite did not happen,\n> then any modules visible on PYTHONPATH before the rez environment was configured would\n> still be there. This would mean you may not have a properly configured environment. If\n> your system PyQt were on PYTHONPATH for example, and you used rez-env to set a\n> different PyQt version, an attempt to import it within the configured environment would\n> still, incorrectly, import the system version.\"\n\nIf required, you can create OS specific environment variable definitions. To do this,\nyou nest the above structure into a dictionary with the correct `windows` or `linux`\nkey. You have to add a extra key `os_specific` set to `true` to indicate that you are\nusing os specific configurations.\n\n```json\n    \"environment\": {\n        \"os_specific\": true,\n        \"windows\": {\n            \"append\": {\n                \"GOLAEM_WINDOWS_PATH\": \"C:\\\\Golaem\\\\Golaem-7.3.11\\\\Maya2020\"\n            }\n        },\n        \"linux\": {\n            \"append\": {\n                \"GOLAEM_LINUX_PATH\": \"/Golaem/Golaem-7.3.11/Maya2020\"\n            }\n        }\n    }\n```\n\n\n### Defining Distros\n\nThe `distos` key in distro and config definitions is used to define the distro version\nrequirements. When a config is processed the distro requirements are evaluated recursively\nto include the requirements of the latest DistroVersion matching the specifier.\nThis uses the python packaging module to resolve version specifiers so you can use the\nsame configuration syntax you would use in a pip requirements file.\n\n```json\n    \"distros\": [\n        \"maya2020\",\n        \"maya2022\",\n        \"houdini18.5\",\n        \"hsite\",\n        \"animBot<=1.4\",\n        \"studiolibrary==2.5.7.post1\"\n    ]\n\n```\n\nThe resolved versions matching the requested distros are shown in the `versions` property.\n\n# Debugging\n\n## Debugging generated scripts\n\nHab doesn't use a console_script entry point to create an exe for its cli. It uses a shell\nspecific [launch script](bin). This script runs hab as a python process to create\ntemporary shell scripts to configure the shell(launching a new one if required).\nThis prevents the need to keep the python process running and prevents shell\ncorruption if that python process is killed. The shell scripts are written to the\ntemp location for the shell/os. On windows this should be written to `%tmp%` and\n`$TMPDIR` on linux.\n\nHab does its best to remove these temp script files on exit so inspecting them can be\ndifficult. The best way to view them is to run a `hab env` or `hab launch` command\nthis will leave the hab process running while you find and view the config and launch\nscripts in the temp directory. Once you are finished exit the hab process and they\nwill be removed.\n\n# Caveats\n\n* When using `hab env` in the command prompt, doskey aliases don't get cleared when you\nexit a context.\n* Powershell disables running .ps1 scripts disabled by default. If you get a error like\n`hab.ps1 cannot be loaded because running scripts is disabled on this system.`, you will\nneed to launch the Powershell with this command `powershell -ExecutionPolicy Unrestricted`.\nYou can administratively default the execution policy to unrestricted for windows.\n* To use `hab activate` in bash or Powershell you need to use `.` or `source`. Powershell\nhas the `.` operator so I would use that for both Powershell and bash.\n`. hab activate default`.\n\n# Glosary\n\n* **activate:** Update the current process(shell) for a given configuration. Name taken\nfrom virtualenv.\n* **env:** In the cli this launches a new process for a given configuration. Name taken\nfrom rez.\n* **config:** Defines the environment variables and distros that should be used when a\nspecific URI is requested.\n* **distro:** Defines environment variables and aliases that a specific application or\nplugin requires, and other distros that it depends on.\n* **site:** Apply specific settings to hab. Where to find distros and configs, etc.\n* **URI:** A `/` separated list of identifiers used to choose a specific config.\n\n# Future Plans\n\n* Support per-alias environment variable manipulation. This will allow us to prepend to\nPATH if required per-dcc. Ie only add `C:\\Program Files\\Chaos Group\\V-Ray\\3ds Max 2019\\bin`\nto PATH, if and only if using launching 3ds Max any time its included in the distros.\n* Add support for `~` and using environment variables in config and distro path resolution.\n* Add pkg_resource plugin interfaces that will allow customization. For example, how\nconfigurations are defined. Allowing the use of site specific database integrations etc.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blurstudio/hab",
    "keywords": "",
    "license": "LGPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hab",
    "package_url": "https://pypi.org/project/hab/",
    "platform": "any",
    "project_url": "https://pypi.org/project/hab/",
    "project_urls": {
      "Homepage": "https://github.com/blurstudio/hab",
      "Source": "https://github.com/blurstudio/python-example",
      "Tracker": "https://github.com/blurstudio/python-example/issues"
    },
    "release_url": "https://pypi.org/project/hab/0.9.0/",
    "requires_dist": [
      "anytree",
      "click (>=7.1.2)",
      "colorama",
      "future (>=0.18.2)",
      "packaging (>=20.0)",
      "setuptools-scm[toml] (>=4)",
      "black ; extra == 'dev'",
      "covdefaults ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "pep8-naming ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "pyjson5 ; extra == 'json5'"
    ],
    "requires_python": ">=3.6",
    "summary": "An environment configuration and launcher system",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16670016,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e982a36642c4fcb7c2d0c3f1fcea7a45cb2d5b57aaeec7d70415eaef6ed3b28",
          "md5": "248a9a12a6b9aa3573c383665b176d69",
          "sha256": "a8f0babe5472e194143d09c91f31fb4d9abacdb2982f161377bffb251b51eda6"
        },
        "downloads": -1,
        "filename": "hab-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "248a9a12a6b9aa3573c383665b176d69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 41074,
        "upload_time": "2022-07-05T18:10:01",
        "upload_time_iso_8601": "2022-07-05T18:10:01.261595Z",
        "url": "https://files.pythonhosted.org/packages/8e/98/2a36642c4fcb7c2d0c3f1fcea7a45cb2d5b57aaeec7d70415eaef6ed3b28/hab-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686001f8851184a28d4d34447a8fd758dc1aec3d4e01ffe6a30a1f31235e9fec",
          "md5": "be12974492986ae4d705079799f2236b",
          "sha256": "ad88c65e957504ed284e350f9f3693a95a68c64e70fa97524d25cbfc597f801d"
        },
        "downloads": -1,
        "filename": "hab-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be12974492986ae4d705079799f2236b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42706,
        "upload_time": "2022-08-12T05:27:46",
        "upload_time_iso_8601": "2022-08-12T05:27:46.011178Z",
        "url": "https://files.pythonhosted.org/packages/68/60/01f8851184a28d4d34447a8fd758dc1aec3d4e01ffe6a30a1f31235e9fec/hab-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8abfd77694ca975555976cfcd947e052800bf8266ae3d277b34e04511bdc2933",
          "md5": "2fe7e110cddcc7658c0685e15534a030",
          "sha256": "e1bcc6d1f86e98888b2254a4192a3d7405f76d4cf6f5a3594a8192b3891d4f64"
        },
        "downloads": -1,
        "filename": "hab-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fe7e110cddcc7658c0685e15534a030",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43040,
        "upload_time": "2022-08-15T19:21:38",
        "upload_time_iso_8601": "2022-08-15T19:21:38.971897Z",
        "url": "https://files.pythonhosted.org/packages/8a/bf/d77694ca975555976cfcd947e052800bf8266ae3d277b34e04511bdc2933/hab-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9efb265ff03d4afcba8426c684263eee4f9b48d2bd8fc51eb6c75802d7dd9a5e",
          "md5": "48db5d8f5f4fb21e0e111f4d093c42cb",
          "sha256": "4f921b4245d20fc0c129a83b2a22b539085401c6aec119e6e5403e07194f1f55"
        },
        "downloads": -1,
        "filename": "hab-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48db5d8f5f4fb21e0e111f4d093c42cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43308,
        "upload_time": "2022-08-15T22:16:07",
        "upload_time_iso_8601": "2022-08-15T22:16:07.028620Z",
        "url": "https://files.pythonhosted.org/packages/9e/fb/265ff03d4afcba8426c684263eee4f9b48d2bd8fc51eb6c75802d7dd9a5e/hab-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72a68069fbd310131e8043b913b827056bb3c3b4db6a6742b449f92d4d8a2fe7",
          "md5": "17ee03e580568bd5e38338941f6fad22",
          "sha256": "fe476ca3014f4ea9b6f4f856decb42fc49dcc82fa35dccfd228eb37e620dcae3"
        },
        "downloads": -1,
        "filename": "hab-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17ee03e580568bd5e38338941f6fad22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43474,
        "upload_time": "2022-08-23T23:04:36",
        "upload_time_iso_8601": "2022-08-23T23:04:36.489895Z",
        "url": "https://files.pythonhosted.org/packages/72/a6/8069fbd310131e8043b913b827056bb3c3b4db6a6742b449f92d4d8a2fe7/hab-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "015ddfc7a2e0c4d0c51da4f94830f60d177af81f1aeccf17f8541dec5e0a3b96",
          "md5": "45f837ebdd5662bba062d4efd283c8f8",
          "sha256": "6a934ffba94d84566f0c94f1e303d4c1b277a7f86d1a374cd5906d656bd74099"
        },
        "downloads": -1,
        "filename": "hab-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45f837ebdd5662bba062d4efd283c8f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50862,
        "upload_time": "2022-11-16T00:26:07",
        "upload_time_iso_8601": "2022-11-16T00:26:07.625236Z",
        "url": "https://files.pythonhosted.org/packages/01/5d/dfc7a2e0c4d0c51da4f94830f60d177af81f1aeccf17f8541dec5e0a3b96/hab-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbf1f0bd61c22ae66dec7d13a42689d5456fad877cd0c88d071c51e70c64f30f",
          "md5": "acd1ba80aca7e4cb0c653f14bcc06f2e",
          "sha256": "d0ad1db133162b6ba7a6684aabbcaa59208fa2801d907dcc06364f95b978c3e0"
        },
        "downloads": -1,
        "filename": "hab-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acd1ba80aca7e4cb0c653f14bcc06f2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51228,
        "upload_time": "2022-11-17T01:08:44",
        "upload_time_iso_8601": "2022-11-17T01:08:44.862649Z",
        "url": "https://files.pythonhosted.org/packages/fb/f1/f0bd61c22ae66dec7d13a42689d5456fad877cd0c88d071c51e70c64f30f/hab-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69844483d8e5c93a2dbee0af9078a1abd7ceed93dd5ee7be4fa4176cc5e3a783",
          "md5": "35f8b4d6e87a411ffe96004b24a1d6b2",
          "sha256": "6e0ef8670b66d3d3c939985ff18281a6898991468e6f84b375bd0053ce36fd59"
        },
        "downloads": -1,
        "filename": "hab-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35f8b4d6e87a411ffe96004b24a1d6b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51675,
        "upload_time": "2023-02-02T18:57:45",
        "upload_time_iso_8601": "2023-02-02T18:57:45.775001Z",
        "url": "https://files.pythonhosted.org/packages/69/84/4483d8e5c93a2dbee0af9078a1abd7ceed93dd5ee7be4fa4176cc5e3a783/hab-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69844483d8e5c93a2dbee0af9078a1abd7ceed93dd5ee7be4fa4176cc5e3a783",
        "md5": "35f8b4d6e87a411ffe96004b24a1d6b2",
        "sha256": "6e0ef8670b66d3d3c939985ff18281a6898991468e6f84b375bd0053ce36fd59"
      },
      "downloads": -1,
      "filename": "hab-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35f8b4d6e87a411ffe96004b24a1d6b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 51675,
      "upload_time": "2023-02-02T18:57:45",
      "upload_time_iso_8601": "2023-02-02T18:57:45.775001Z",
      "url": "https://files.pythonhosted.org/packages/69/84/4483d8e5c93a2dbee0af9078a1abd7ceed93dd5ee7be4fa4176cc5e3a783/hab-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}