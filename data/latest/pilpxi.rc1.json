{
  "info": {
    "author": "",
    "author_email": "Pickering Interfaces <support@pickeringtest.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python Pilpxi #\r\n\r\nPython Pilpxi is a Python wrapper for Pickering Pilpxi driver. It supports both Python 2.x and 3.x.\r\n\r\n## Pickering Driver Suite is needed for the wrapper to work! ##\r\n\r\nDownload at - [PXI Installer Package](http://pickeringtest.info/downloads/drivers/PXI_Drivers/)\r\n\r\n----------\r\n# Change Log #\r\n- 1.53 - Updated README.md and LICENSE.txt\r\n- 1.52 - Preparations for PyPi upload.\r\n- 1.51 - Fixes NonPrecisionResistor example.\r\n- 1.5 - Adds ResSetResistance() optional mode parameter, and mode value enum\r\n- 1.4 - Updates with calibration functions \r\n- 1.3 - Updates readme with migration guide, adds card.cardInfo structure \r\n- 1.2 - Further battery simulator updates, including set-measure-set functionality, measurement configuration. \r\n- 1.1 - Updates and improves resolver and battery simulator functionality, updates to relevant example code, bug fixes and improvements\r\n- 1.0  - Changes to API to add more object oriented features, exceptions, support for new DIO and Current Loop simulator cards.\r\n- 0.98 - Updates to use native strings in Python 2.x and 3.x. `decode()` workaround no longer necessary in Python 3. \r\n- 0.97 - Adds Thermocouple Functions and SetCrosspointRange\r\n- 0.96 - Fixes SetAttenuation call\r\n- 0.95 - Fixes ResInfo call\r\n- 0.94 - Fixes Battery Current Functions\r\n- 0.93 - Refactor for use with pip installer\r\n\r\n----------\r\n# Installation instructions #\r\n\r\nWe provide both a python module that can be installed to the system using `pip` and can be added manually to a project by copying a file into the directory that you are working in. For either installation method please make sure that you have installed Pickering PXI Installer Package. This can be found at the following addresses:\r\n\r\n - [PXI Installer Package](http://pickeringtest.info/downloads/drivers/PXI_Drivers/)\r\n\r\n----------\r\n## Install Using `pip` ##\r\n\r\nTo install Python Pilpxi enter the following command:\r\n```\r\npip install pilpxi\r\n```\r\n\r\n\r\n----------\r\n# Using Pilpxi #\r\n\r\nPilpxi can be used to control our 40/50 series pickering products.\r\n\r\n## List cards ##\r\n\r\nTo get a count of available cards IDs use `CountFreeCards()`. This will return the total card count. To list the bus and slot number for all of the cards use `FindFreeCards()`. Please see below for worked examples on how to use both of these functions:\r\n\r\n```python\r\nimport pilpxi\r\n\r\n# Connect to chassis\r\nbase = pilpxi.Base()\r\n\r\n# Get number of Card IDs for cards in chassis\r\ncard_count = base.CountFreeCards()\r\n# Get list of tuples containing Bus and Device numbers\r\ndevices = base.FindFreeCards()\r\n\r\n# The number of cards present can be found from the length of the list of devices\r\nprint(\"Card count: \", len(devices))\r\n```\r\n\r\n## Open Card ##\r\n\r\nCards are opened when the `Pi_Card` constructor is called. It takes bus and slot numbers in a tuple as parameters as shown below: \r\n\r\n```python\r\nimport pilpxi\r\n\r\nbus = 2\r\ndevice = 5\r\n\r\n# Takes a tuple containing bus and device numbers\r\ncard = pilpxi.Pi_Card(bus, device)\r\n```\r\n\r\n## Operate Switching cards ##\r\n\r\nThere are three main types of switching cards:\r\n    - Switches\r\n    - Multiplexer\r\n    - Matrix\r\n\r\nTo operate Switches and Multiplexers use `OpBit()` providing subunit, switch point, and switch state. Matrices can be controller using `OpCrosspoint()` which requires the subunit, row, column, and switch state. Please see below for worked examples on using these functions:\r\n\r\n```python\r\n# Control Switches and Multiplex cards\r\nsubunit = 1\r\nswitchpoint = 1\r\ntry:\r\n    # Close switch at switchpoint\r\n    card.OpBit(subunit, switchpoint, 1)\r\n\r\n    # Open switch at switchpoint\r\n    card.OpBit(subunit, switchpoint, 0)\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n\r\n\r\n# Control Matrix cards\r\nrow = 1\r\ncolumn = 1\r\n\r\ntry:\r\n    # Connect crosspoint at row, column\r\n    card.OpCrosspoint(subunit, row, column, 1)\r\n\r\n    # Disconnect crosspoint at x, y\r\n    card.OpCrosspoint(subunit, row, column, 0)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n```\r\n### Using Subunit States ### \r\n\r\nThe Python-Pilpxi wrapper contains methods to read entire subunit states, e.g. the current switch configuration of a switching or matrix card, manipulate these states and apply the state back to the card in one single operation. This means, for example, multiple crosspoints can be connected at once, or the user may have multiple desired matrix/switch states and alternate between them. \r\n\r\nExample for manipulating matrix card states:\r\n```python\r\n# Get an object representing the current state of the specified matrix subunit:\r\nsubState = card.GetSubState(subunit)\r\n\r\n# Set matrix crosspoints 1, 1 and 2, 2 on the subunit state;\r\n# No actual switching occurs yet.\r\nsubState.PreSetCrosspoint(1, 1, True)\r\nsubState.PreSetCrosspoint(2, 2, True)\r\n\r\n# Apply the subunit state.\r\n# Crosspoints changed will now be applied to the physical card. \r\ncard.WriteSubState(subunit, subState)\r\n```\r\nExample for manipulating switching card states:\r\n```python\r\n# Get an object representing the current state of the specified switch subunit:\r\nsubState = card.GetSubState(subunit)\r\n\r\n# Set switches 1 and 2 on the subunit state;\r\n# No actual switching occurs yet.\r\nsubState.PreSetBit(1, True)\r\nsubState.PreSetBit(2, True)\r\n\r\n# Apply the subunit state.\r\n# Switches changed will now be applied to the physical card. \r\ncard.WriteSubState(subunit, subState)\r\n```\r\nIt is also possible to obtain a subunit state object representing a blank subunit:\r\n```python\r\nblankSubunitState = card.GetBlankSubState(subunit)\r\n```\r\n\r\n\r\n## Operate Resistor Cards ##\r\n\r\nResistor cards come in two varieties: Programmable Resistor, and Precision Resistor. Programmable Resistors are controlled like Switch Cards shown above. Precision Resistor Cards have specific resistor functions. To set a resistance `ResSetResistance` is used and to get the current resistance `ResGetResistance` is used as shown below:\r\n\r\n```python\r\n# Set Resistance of given subunit\r\nimport pilpxi\r\n\r\nresistance = 330.0\r\n\r\ntry:\r\n    card.ResSetResistance(subunit, resistance)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error: \", ex.message)\r\n\r\n# Retrive current resistance of given subunit\r\ntry:\r\n    resistance = card.ResGetResistance(subunit)\r\n    print(\"Resistance: \", resistance)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error: \", ex.message)\r\n\r\n# Set Resistance with specific mode:\r\n#    RES_Mode.SET                     # Legacy/Default mode to support existing break before make with settling delay\r\n#    RES_Mode.MBB                     # New mode to suport make before break with settling delay\r\n#    RES_Mode.APPLY_PATTERN_IMMEDIATE # Apply new pattern immediately and wait till settling delay\r\n#    RES_Mode.NO_SETTLING_DELAY       # Disable settling delay,same as DriverMode NO_WAIT, but at sub-unit level\r\n#    RES_Mode.DONT_SET                # Do the calculations but don't set the card\r\n\r\n# Set using make-before-break mode \r\ntry:\r\n    \r\n    resistance = card.ResSetResistance(subunit, resistance, mode=pilpxi.RES_Mode.MBB)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error: \", ex.message)\r\n```\r\n\r\n## Operate Attenuator ##\r\n\r\nAttenuators have specific functions for controlling them. To set attenuation use `SetAttenuation()` providing the subunit and attenuation expressed in decibels. To retrieve the current attenuation use `GetAttenuation()` giving the subunit. It returns the attenuation expressed in decibels. Please see below for worked examples on how to use these functions:\r\n\r\n```python\r\n# Setting Attenuation\r\nattenuation = 1.5     # Attenuation in dB\r\ntry:\r\n    card.SetAttenuation(subunit, attenuation)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n\r\n# Retrieving Attenuation\r\ntry:\r\n    attenuation = card.GetAttenuation(subunit)\r\n    print(\"Attenuation (dB): \", attenuation)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n```\r\n\r\n## Operate Power Supply ##\r\n\r\nPower Supplies have specific functions for controlling them. To set voltage use `PsuSetVoltage()` providing the subunit and voltage. To retrieve voltage use `PsuGetVoltage()` giving the subunit. It returns the set voltage. To enable output use `PsuEnable` providing the subunit and the state to be set. Please see below for worked examples on how to use these functions:\r\n\r\n```python\r\ntry:\r\n    # Set Voltage\r\n    volts = 3.3\r\n    card.PsuSetVoltage(subunit, volts)\r\n\r\n\r\n    # Enable output\r\n    card.PsuEnable(subunit, 1)\r\n\r\n\r\n    # Get Voltage\r\n    volts = card.PsuGetVoltage(subunit)\r\n\r\n\r\n    # Disable output\r\n    card.PsuEnable(subunit, 0)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n```\r\n\r\n## Operate Battery Simulator ##\r\n\r\nBattery Simulators have specific functions for controlling them. To set voltage use `BattSetVoltage()` providing the subunit and voltage. To retrieve the set voltage use `BattGetVoltage()` giving the subunit. To set current use `BattSetcurrent()` providing the subunit and current. To retrieve the set current use `BattGetcurrent()` giving the subunit. It returns the set current. To enable output use `BattSetEnable()` providing the subunit and the state to be set. To retrieve the present output state use `BattGetEnable()`. It returns the state. On supported battery simulator cards, `BattMeasureVoltage()` and `BattMeasureCurrentmA()` functions are available to measure live actual voltage and current values from the card's output. Please see below for worked examples on how to use these functions:\r\n\r\n```python\r\nvolts = 3.3\r\ncurrrent = 0.5\r\n\r\ntry:\r\n    # Set Voltage\r\n    card.BattSetVoltage(subunit, volts)\r\n\r\n    # Set Current\r\n    card.BattSetCurrent(subunit, current)\r\n\r\n    # Enable Output\r\n    card.BattSetEnable(subunit, 1)\r\n\r\n    # Check interlock state \r\n    interlock = card.BattReadInterlockState(subunit)\r\n\r\n    # Get Voltage\r\n    volts = card.BattGetVoltage(subunit)\r\n\r\n    # Set Current\r\n    current = card.BattGetCurrent(subunit)\r\n\r\n    # Get Output state\r\n    state = card.BattGetEnable(subunit)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error operating battery simulator: {}\".format(ex.message))\r\n    print(\"Error code: {}\".format(ex.errorCode))\r\n```\r\nIf you attempt to enable the outputs of a battery simulator card without the hardware interlock, `BattSetEnable()` will throw an exception (error code 70, hardware interlock error). Therefore it is important to call functions in a `try` block and handle errors appropriately.\r\n\r\n### 41-752A-01x functionality \r\n\r\nThe 41-752A-01x battery simulator cards have extra capabilities beyond what is supported by other cards. Please consult your manual for information on your product's capabilities. Worked examples on using the extra functionality are below:\r\n\r\n```python\r\ntry:\r\n    # The following functionality is not supported by all battery simulator\r\n    # cards. Please consult your product manual for information on your card's \r\n    # functionality. \r\n\r\n    # Enable set-measure-set mode (increases measurement accuracy on supported cards)\r\n    card.BattSetMeasureSet(subunit, True)\r\n\r\n    # Configure measurement mode to alter device accuracy/sampling: \r\n    numSamples                  = pilpxi.BattNumSamples.SAMPLES_128     # Average values after 128 samples\r\n    VConversionTimePerSample    = pilpxi.BattConversionTime.T_1052us    # 1052 us voltage sample time\r\n    IConversionTimePerSample    = pilpxi.BattConversionTime.T_540us     # 540 us current sample time\r\n    triggerMode                 = pilpxi.BattOperationMode.CONTINUOUS   # Measure continuously (no wait for trigger)\r\n\r\n    card.BattSetMeasureConfig(subunit, numSamples, VConversionTimePerSample, IConversionTimePerSample, triggerMode)\r\n\r\n    # The battery simulator (41-752A-01x) has the capability to take into consideration the load\r\n    # at which the voltage must be provided. Calculated data for voltage at different loads are\r\n    # used to provide this functionality.\r\n    load = 100  # units: mA\r\n    card.BattSetLoad(subunit, load)\r\n\r\n    # Measure channel voltage\r\n    voltage = card.BattMeasureVoltage(subunit)\r\n\r\n    # Measure channel current (in milliamps)\r\n    currentmA = card.BattMeasureCurrentmA(subunit)\r\n\r\n    # Measure channel current (in amps)\r\n    current = card.BattMeasureCurrentA(subunit)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error operating special battery simulator functions: \", ex.message)\r\n    print(\"Error code: {}\".format(ex.errorCode))\r\n```\r\n\r\n## Operate Thermocouple Simulator ##\r\n\r\nThermocouple Simulators have specific functions for controlling them. To set the range use `VsourceSetRange()` providing the subunit and the range. To retrieve the range use `VsourceGetRange()` providing the subunit. It returns the range. To set the voltage use `VsourceSetVoltage()` providing the subunit and the voltage in millivolts. To retrieve the voltage use `VsourceGetVoltage()` providing the subunit. It returns the voltage in millivolts. To enable or disable outputs use `OpBit()` providing the subunit, bit number for the channel isolations, and the state that should be set. To retrieve the state of the outputs use `ViewBit()` providing the subunit and bit number for the channel isolations. It returns the state of the requsted bit. Please refer to the product manual for more information on what subunit and bits to operate. To retrieve temperature readings from a connected thermocouple compensation block us `VsourceGetTemperatures()` providing either `pilpxi.Attributes.TS_TEMPERATURES_C` or `pilpxi.Attributes.TS_TEMPERATURES_F` for temperature unit. It will return a list of four temperatures. Please see below for worked examples on how to use these functions:\r\n\r\n```python\r\nrange = 0.0\r\nmvolts = 0.0\r\n\r\ntry:\r\n    # Set Range\r\n    range = pilpxi.TS_Range.AUTO\r\n    card.VsourceSetRange(subunit, range)\r\n\r\n    # Get Range\r\n    range = card.VsourceGetRange(subunit)\r\n\r\n    # Set Voltage\r\n    card.VsourceSetVoltage(subunit, mvolts)\r\n\r\n    # Get Voltage\r\n    mvolts = card.VsourceGetVoltage(subunit)\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n\r\n# Set Isolation switches (41-760-001)\r\ntry: \r\n    isosub = 33\r\n    card.OpBit(isosub, 1, 1) # Turn Vo1 on\r\n    card.OpBit(isosub, 2, 1) # Turn Vcold1 on\r\n\r\n    card.OpBit(isosub, 1, 0) # Turn Vo1 off\r\n    card.OpBit(isosub, 2, 0) # Turn Vcold1 off\r\n\r\nexcept pilpxi.Error as ex: \r\n    print(\"Error: \", ex.message)\r\n\r\n# Get a dict containing Thermocouple subunit information\r\nvsourceInfoDict = card.VsourceInfo(subunit)\r\n\r\n# Get Compensation Block Temperatures\r\ntemperatures = card.VsourceGetTemperature(pilpxi.Attributes.TS_TEMPERATURES_C)\r\n\r\nfor temp in temperatures:\r\n    print(temp)\r\n\r\n```\r\n\r\n## Error handling ##\r\n\r\nMost of the functions in Pilpxi will raise an exception on errors. To handle `pilpxi.Error` exceptions and obtain error messages and (optionally) an error code from the driver: \r\n\r\n```python\r\ntry:\r\n    # Call pilpxi functionality here\r\n\r\nexcept pilpxi.Error as ex: \r\n    ErrorMessage = ex.message\r\n    DriverErrorCode = ex.errorCode\r\n\r\n    print(\"Error {code} occured: {message}\".format(code=DriverErrorCode, message=ErrorMessage))\r\n```\r\n## Close Cards ##\r\n\r\nA card should be closed when it is no longer being used. To close a card `CloseSpecifiedCard` is used as shown below:\r\n\r\n```python\r\ncard.Close()     # Closes individual card\r\n```\r\n\r\n## Migrating from old versions of the Python Pilpxi wrapper ## \r\n\r\nFrom wrapper version 1.0 onwards, major changes were made to the Python pilpxi wrapper API. Most notably, opening/listing cards and error handling conventions have changed. The new wrapper does not rely on returning an integer error code from every method, as is conventional in a C program. Instead. Python-style exceptions are raised, and the exception contains attributes giving the integer error code, and a human-readable description of the error.\r\n\r\n### Old wrapper example: ### \r\n\r\n```python\r\nfrom pilpxi import *\r\n\r\n# Connect to card at bus 8 device 14\r\nbus = 8\r\ndevice = 14\r\n\r\n# No error checking is possible at this point because Python constructors only return \r\n# a class instance \r\ncard = pilpxi_card(bus, device) \r\n\r\n# Close and then open crosspoint X1, Y1 on subunit 1 (matrix subunit)\r\n\r\nsubunit = 1\r\nrow = 1\r\ncolumn = 2\r\nstate = 1\r\n\r\nerr = card.OpCrosspoint(subunit, row, column, state)\r\n\r\n# Check the error code. Note that strings must be decoded (Python 3.x only)\r\nif err:\r\n    message = card.ErrorMessage(err)\r\n    print(\"Error ocurred: \" message.decode())\r\n    exit()\r\n\r\nstate = 0\r\n\r\nerr = card.OpCrosspoint(subunit, row, column, state)\r\n\r\nif err:\r\n    message = card.ErrorMessage(err)\r\n    print(\"Error ocurred: \" message.decode())\r\n    exit()\r\n\r\ncard.CloseSpecifiedCard()\r\n```\r\n\r\n### New wrapper example: ### \r\n\r\n```python\r\nimport pilpxi \r\n\r\ntry:\r\n    # Connect to card at bus 8 device 14\r\n    bus = 8\r\n    device = 14\r\n\r\n    card = pilpxi.Pi_Card(bus, device)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error occurred opening card: \", ex.message)\r\n    exit()\r\n\r\ntry:\r\n    # Close and then open crosspoint X1, Y1 on subunit 1 (matrix subunit)\r\n\r\n    subunit = 1\r\n    row = 1\r\n    column = 2\r\n    state = True # Can be True, False or 1, 0 \r\n\r\n    card.OpCrosspoint(subunit, row, column, state)\r\n\r\n    state = False \r\n\r\n    card.OpCrosspoint(subunit, row, column, state)\r\n\r\nexcept pilpxi.Error as ex:\r\n    print(\"Error occurred closing crosspoint: \", ex.message)\r\n    exit()\r\n\r\n# Close card. Will be called automatically when card object is garbage collected. \r\ncard.Close()\r\n```\r\n\r\nFunction signatures remain largely identical between versions of the wrapper, except error codes are not returned. Therefore, previously a function returning a value would also return an error code:\r\n\r\n```python\r\nerror, resistance = card.ResGetResistance(subunit)\r\n```\r\n\r\nWould now become:\r\n\r\n```python\r\nresistance = card.ResGetResistance(subunit)\r\n```\r\n\r\nErrors would be caught in a try/except block.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2017-2023 Pickering Interfaces Ltd.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Pilpxi",
    "package_url": "https://pypi.org/project/Pilpxi/",
    "platform": null,
    "project_url": "https://pypi.org/project/Pilpxi/",
    "project_urls": {
      "homepage": "https://www.pickeringtest.com/"
    },
    "release_url": "https://pypi.org/project/Pilpxi/1.53/",
    "requires_dist": [
      "enum34"
    ],
    "requires_python": "",
    "summary": "Python wrapper for Pilpxi",
    "version": "1.53",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17187233,
  "releases": {
    "1.53": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10b2b905e2af40ae70b3b7ddb1954e0f89f74a354e721411661a3c27b5d405c4",
          "md5": "3fd3649c7253e3791b399730e4ff0abd",
          "sha256": "db5f90f8cf5426928591634026a2bd640468ee44f28ef7fa3d57709319f9e9be"
        },
        "downloads": -1,
        "filename": "Pilpxi-1.53-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fd3649c7253e3791b399730e4ff0abd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23830,
        "upload_time": "2023-03-07T07:24:45",
        "upload_time_iso_8601": "2023-03-07T07:24:45.805278Z",
        "url": "https://files.pythonhosted.org/packages/10/b2/b905e2af40ae70b3b7ddb1954e0f89f74a354e721411661a3c27b5d405c4/Pilpxi-1.53-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0050822bc6b2fe802166b4dfd7bab4c733e7ef823c4670916ffcd7bdec82096",
          "md5": "02353fb9c7c8fefca3489c326a0e2215",
          "sha256": "880109fcc69c5b99bff332cb7e8ffaeb1d4307707b72c1fea89404b7ca5ad17b"
        },
        "downloads": -1,
        "filename": "Pilpxi-1.53.tar.gz",
        "has_sig": false,
        "md5_digest": "02353fb9c7c8fefca3489c326a0e2215",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23114,
        "upload_time": "2023-03-07T07:24:47",
        "upload_time_iso_8601": "2023-03-07T07:24:47.275627Z",
        "url": "https://files.pythonhosted.org/packages/a0/05/0822bc6b2fe802166b4dfd7bab4c733e7ef823c4670916ffcd7bdec82096/Pilpxi-1.53.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10b2b905e2af40ae70b3b7ddb1954e0f89f74a354e721411661a3c27b5d405c4",
        "md5": "3fd3649c7253e3791b399730e4ff0abd",
        "sha256": "db5f90f8cf5426928591634026a2bd640468ee44f28ef7fa3d57709319f9e9be"
      },
      "downloads": -1,
      "filename": "Pilpxi-1.53-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3fd3649c7253e3791b399730e4ff0abd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23830,
      "upload_time": "2023-03-07T07:24:45",
      "upload_time_iso_8601": "2023-03-07T07:24:45.805278Z",
      "url": "https://files.pythonhosted.org/packages/10/b2/b905e2af40ae70b3b7ddb1954e0f89f74a354e721411661a3c27b5d405c4/Pilpxi-1.53-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0050822bc6b2fe802166b4dfd7bab4c733e7ef823c4670916ffcd7bdec82096",
        "md5": "02353fb9c7c8fefca3489c326a0e2215",
        "sha256": "880109fcc69c5b99bff332cb7e8ffaeb1d4307707b72c1fea89404b7ca5ad17b"
      },
      "downloads": -1,
      "filename": "Pilpxi-1.53.tar.gz",
      "has_sig": false,
      "md5_digest": "02353fb9c7c8fefca3489c326a0e2215",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23114,
      "upload_time": "2023-03-07T07:24:47",
      "upload_time_iso_8601": "2023-03-07T07:24:47.275627Z",
      "url": "https://files.pythonhosted.org/packages/a0/05/0822bc6b2fe802166b4dfd7bab4c733e7ef823c4670916ffcd7bdec82096/Pilpxi-1.53.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}