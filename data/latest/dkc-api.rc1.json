{
  "info": {
    "author": "Alexandr Drachenin",
    "author_email": "alexdrachenin98@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h3 align=\"center\">DKC API v1</h3>\n\n<div align=\"center\">\n\n[![Status](https://img.shields.io/badge/status-active-success.svg)]()\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\n\n</div>\n\n---\n\n<p align=\"center\"> Connector to DKC API v1 (<a href=\"https://www.dkc.ru/ru/\">dkc.ru</a>)\n    <br>\n</p>\n\n## 📚 Table of Contents\n\n- [About](#about)\n- [Getting Started](#getting_started)\n- [Available models](#available_models)\n- [Usage](#usage)\n\n## 💬 About <a name = \"about\"></a>\n\nConnector for connecting via api to DKC. Allows you to easily retrieve product and news data.\n\n## 🧵 Getting Started <a name = \"getting_started\"></a>\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Pip or poetry\n\nThe project uses [Poetry](https://python-poetry.org/) instead of pip. But if you do not want to install the [Poetry](https://python-poetry.org/), for this case, create a file \"requirements.txt\".\n\n### Init\n\nTo get started, you need to import the main class DkcAPI.\n\n```python\nfrom dkc_api.v1.dkc_api import DkcAPI\n```\n\nNext, we pass the initialization parameters to the class. If you want to use environment variables, then the file [.env.example](https://github.com/Blackgard/amocrm-api/blob/master/.env.example) is prepared for this.\n\n```python\ndkc_api = DkcAPI(\n    master_key=os.getenv(\"TOKEN\"),\n    debug=True,\n    storage=storage.FileTokenStorage(),\n    logger=logger\n)\n```\n\n## 📌 Available models <a name=\"available_models\"></a>\n\nSo far, only five DkcAPI models are available for work:\n\n1. Catalog\n2. Content\n3. Delivery\n4. News\n5. Project (In developing)\n\n## 🧰 Usage <a name=\"usage\"></a>\n\n### 🪑 Methods Catalog\n\nCatalog object name:\n\n```python\n>>> dkc_api.Catalog.*\n```\n\n#### GetMaterialStock\n\nThis method retrieves data on stock balances.\n\nArgs:\n- code (list[str], str, int, None): Material code list. If present, ‘Material ID’ is not taken into account. Defaults to [].\n- id (list[str], str, int, None): Material id list. Defaults to [].\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialStock()\n>>> resolve\nGetMaterialStock({create: datetime, materials: [{ id: 81, status: true, code: 1200, warehouse: [{code: 2765, ...]}, ...]}, ...] })\n```\n\n#### GetMaterial\n\nThis method returns all data for the specified material.\n\nArgs:\n- code (str): Material code.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterial(code=1200)\n>>> resolve\nGetMaterial({material: {id: 81, node_id: 1234, etim_class_id: \"ETIM\", name: \"Product name\", type: \"Type\", ...})\n```\n\n#### getMaterialAnalogs\n\nThis method returns a list of product analogues. \n\nArgs:\n- code (str, None): Material code.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialAnalogs(code=1200)\n>>> resolve\nGetMaterialAnalogs({analogs: { \"1200\": [ *product_analogue_codes* ]}})\n```\n\nYou can get a list of all analogs for all products, for this you need to leave the \"code\" parameter empty.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialAnalogs()\n>>> resolve\nGetMaterialAnalogs({analogs: { *product_codes*: [ *product_analogue_codes* ]}})\n```\n\n\n#### getMaterialAccessories\n\nThis method returns a list of product accessories. \n\nArgs:\n- code (str, None): Material code.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialAccessories(code=1200)\n>>> resolve\nGetMaterialAccessories({accessories: { \"1200\": [ *product_analogue_codes* ]}})\n```\n\nYou can get a list of all accessories for all products, for this you need to leave the \"code\" parameter empty.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialAccessories()\n>>> resolve\nGetMaterialAccessories({accessories: { *product_codes*: [ *product_analogue_codes* ]}})\n```\n\n#### getMaterialCertificates\n\nThis method returns a list of product certificates. \n\nArgs:\n- code (str): Material code.\n\n```python\n>>> resolve = dkc_api.Catalog.getMaterialCertificates(code=1200)\n>>> resolve\nGetMaterialCertificates({certificates: { \"1200\": [ *product_analogue_codes* ]}})\n```\n\n#### List other methods \n\n- getMaterialRelated\n- getMaterialVideo\n- getMaterialDrawingsSketch\n- getMaterialDescription\n- getMaterialSpecification\n\n### 🏢 Methods Content\n\nContent object name:\n\n```python\n>>> dkc_api.Content.*\n```\n\n#### getRevisionDrawings\n\nThe method allows you to get editorial drawings by product code\n\nArgs:\n- last_updated (datetime, None): if specified, only processes changes from the specified date. Timestamp format.\n\n```python\n>>> resolve = dkc_api.Content.getRevisionDrawings(code=1200)\n>>> resolve\nGetRevisionDrawings({revision: { delta: bool, drawings: { updated: [id: 1200, name: \"Name\", links: { type: \"Type\", ...}], removed: [...]}})\n```\n\n\n#### getRevisionMaterials\n\nThe method allows you to get editorial materials by product code\n\nArgs:\n- last_updated (datetime, optional): if specified, only processes changes from the specified date. Timestamp format.\n\n```python\n>>> resolve = dkc_api.Content.getRevisionMaterials(code=1200)\n>>> resolve\nGetRevisionMaterials({revision: { delta: bool, materials: { updated: [id: 1200, name: \"Name\", links: { type: \"Type\", ...}], removed: [...]}})\n```\n\n\n#### postFile\n\nThis method allows you to upload files to the dkc api repository\n\nArgs:\n- file_content (PostFileContent): file content\n\n```python\n>>> post_file_content = PostFileContent(name=\"name_file\", value=\"value_file\")\n>>> resolve = dkc_api.Content.postFile(file_content=post_file_content)\n>>> resolve\nPostFile({revision: { id: 872} })\n```\n\n#### getFile\n\nThis method allows you to get files from the dkc api repository\n\nArgs:\n- file_id (int): file id\n\n```python\n>>> resolve = dkc_api.Content.getFile(file_id=872)\n>>> resolve\nPostFile({revision: { name: \"name_file\", value: \"value_file\" } })\n```\n\n#### List other methods \n\n- getRevisionCertificates\n- getRevisionsLastSize\n- getRevisionsLast\n\n### 🏃 Methods Delivery\n\nDelivery object name:\n\n```python\n>>> dkc_api.Delivery.*\n```\n\n#### getDeliveryTime\n\nThe method returns the date of shipment of goods\n\nArgs:\n- delivery_time_content (DeliveryTimeContent): delivery time content. Work how filter.\n\n```python\n>>> delivery_time_content = DeliveryTimeContent(company_warehouse=\"test\", items=[])\n>>> resolve = dkc_api.Delivery.getDeliveryTime(delivery_time_content=delivery_time_content)\n>>> resolve\nGetDeliveryTime({items: [{ code: 172, status: true, date_last: {date: *datetime*, amount: 1689030}, date_detail: [...]}, ...] })\n```\n\n### 📰 Methods News\n\nNews object name:\n\n```python\n>>> dkc_api.News.*\n```\n\n#### getNewsCompany\n\nThe method returns company news.\n\nArgs:\n- page_index (int): Page index how need load. Default first (0) page.\n- length (int): Count news on page. Default 10 news.\n\n```python\n>>> resolve = dkc_api.News.getNewsCompany()\n>>> resolve\nGetNewsCompany({news: [{title: \"Title\", text: \"Text\", thumbnail_url: \"Url\", images: [\"URL\", ...], timestamp: *datetime*}, ...]})\n```\n\n\n#### getNewsProducts\n\nThe method returns products news.\n\nArgs:\n- page_index (int): Page index how need load. Default first (0) page.\n- length (int): Count news on page. Default 10 news.\n\n```python\n>>> resolve = dkc_api.News.getNewsProducts()\n>>> resolve\nGetNewsProducts({news: [{title: \"Title\", text: \"Text\", thumbnail_url: \"Url\", images: [\"URL\", ...], timestamp: *datetime*}, ...]})\n```\n\n#### getNewsCommunity\n\nThe method returns community news.\n\nArgs:\n- page_index (int): Page index how need load. Default first (0) page.\n- length (int): Count news on page. Default 10 news.\n\n```python\n>>> resolve = dkc_api.News.getNewsCommunity()\n>>> resolve\nGetNewsCommunity({news: [{text: \"Text\", timestamp: \"08.08.2021\"}, ...]})\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Blackgard/dkc-api/tarball/v0.1.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Blackgard/dkc-api",
    "keywords": "python,dkc,api,connector,loader",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dkc-api",
    "package_url": "https://pypi.org/project/dkc-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/dkc-api/",
    "project_urls": {
      "Download": "https://github.com/Blackgard/dkc-api/tarball/v0.1.0",
      "Homepage": "https://github.com/Blackgard/dkc-api"
    },
    "release_url": "https://pypi.org/project/dkc-api/0.1.0/",
    "requires_dist": [
      "loguru (==0.5.3)",
      "requests (==2.26.0)",
      "pydantic (==1.8.2)",
      "pytz (==2021.1)",
      "python-dotenv (==0.19.0)"
    ],
    "requires_python": ">=3.9",
    "summary": "Connector for connecting via api to DKC. Allows you to easily retrieve product and news data.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11123829,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e143725b608574405c0b314ba55c50495e5e7859e0a5c55abfb885a311bfc7a",
          "md5": "c551ac14c01b69fa90470fb46eddc3b1",
          "sha256": "4e461715c103e8ddcb9082ef89e88dc4b4ac98201163516c0c2224b9565e19c0"
        },
        "downloads": -1,
        "filename": "dkc_api-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c551ac14c01b69fa90470fb46eddc3b1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9",
        "size": 8224,
        "upload_time": "2021-08-08T18:05:31",
        "upload_time_iso_8601": "2021-08-08T18:05:31.152236Z",
        "url": "https://files.pythonhosted.org/packages/7e/14/3725b608574405c0b314ba55c50495e5e7859e0a5c55abfb885a311bfc7a/dkc_api-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c68a1c13c7050cf68ad90b61e73b8910d80a888fccfa84e884179a2936d8591",
          "md5": "8866b7a414b5b7315770411c6591406f",
          "sha256": "155758b99f3f7407df9315f9d821b8f695adfd13b8d0db6f5102dde60aee8592"
        },
        "downloads": -1,
        "filename": "dkc-api-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8866b7a414b5b7315770411c6591406f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9459,
        "upload_time": "2021-08-08T18:05:32",
        "upload_time_iso_8601": "2021-08-08T18:05:32.838809Z",
        "url": "https://files.pythonhosted.org/packages/6c/68/a1c13c7050cf68ad90b61e73b8910d80a888fccfa84e884179a2936d8591/dkc-api-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e143725b608574405c0b314ba55c50495e5e7859e0a5c55abfb885a311bfc7a",
        "md5": "c551ac14c01b69fa90470fb46eddc3b1",
        "sha256": "4e461715c103e8ddcb9082ef89e88dc4b4ac98201163516c0c2224b9565e19c0"
      },
      "downloads": -1,
      "filename": "dkc_api-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c551ac14c01b69fa90470fb46eddc3b1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.9",
      "size": 8224,
      "upload_time": "2021-08-08T18:05:31",
      "upload_time_iso_8601": "2021-08-08T18:05:31.152236Z",
      "url": "https://files.pythonhosted.org/packages/7e/14/3725b608574405c0b314ba55c50495e5e7859e0a5c55abfb885a311bfc7a/dkc_api-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c68a1c13c7050cf68ad90b61e73b8910d80a888fccfa84e884179a2936d8591",
        "md5": "8866b7a414b5b7315770411c6591406f",
        "sha256": "155758b99f3f7407df9315f9d821b8f695adfd13b8d0db6f5102dde60aee8592"
      },
      "downloads": -1,
      "filename": "dkc-api-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8866b7a414b5b7315770411c6591406f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 9459,
      "upload_time": "2021-08-08T18:05:32",
      "upload_time_iso_8601": "2021-08-08T18:05:32.838809Z",
      "url": "https://files.pythonhosted.org/packages/6c/68/a1c13c7050cf68ad90b61e73b8910d80a888fccfa84e884179a2936d8591/dkc-api-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}