{
  "info": {
    "author": "",
    "author_email": "Weedon & Scott Studios <Studios@WeedonAndScott.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Filesystems"
    ],
    "description": "# EverCas\n\nEverCas is a content-addressable file management system. What does that\nmean? Simply, that EverCas manages a directory where files are saved\nbased on the file\\'s hash.\n\nTypical use cases for this kind of system are ones where:\n\n-   Files are written once and never change (e.g. image storage).\n-   It\\'s desirable to have no duplicate files (e.g. user uploads).\n-   File metadata is stored elsewhere (e.g. in a database).\n\n## Features\n\n-   Files are stored once and never duplicated.\n-   Uses an efficient folder structure optimized for a large number of\n    files. File paths are based on the content hash and are nested based\n    on the first `n` number of characters.\n-   Can save files from local file paths or readable objects (open file\n    handlers, IO buffers, etc).\n-   Pluggable put strategies, allowing fine-grained control of how files\n    are added.\n-   Able to repair the root folder by reindexing all files. Useful if\n    the hashing algorithm or folder structure options change or to\n    initialize existing files.\n-   Supports any hashing algorithm available via `hashlib.new`.\n-   Python 3.10+ compatible.\n-   Support for hard-linking files into the EverCas-managed directory on\n    compatible filesystems\n\n## Links\n\n-   Project: <https://github.com/weedonandscott/evercas>\n-   Documentation: <https://weedonandscott.github.io/evercas/>\n-   PyPI: <https://pypi.python.org/pypi/evercas/>\n\n## Quickstart\n\nInstall using pip:\n\n    pip install evercas\n\n### Initialization\n\n``` python\nfrom evercas import EverCas\n```\n\nDesignate a root folder for `EverCas`. If the folder doesn\\'t already\nexist, it will be created.\n\n``` python\n# Set the `depth` to the number of subfolders the file's hash should be split when saving.\n# Set the `width` to the desired width of each subfolder.\nfs = EverCas('temp_evercas', depth=4, width=1, algorithm='sha256')\n\n# With depth=4 and width=1, files will be saved in the following pattern:\n# temp_evercas/a/b/c/d/efghijklmnopqrstuvwxyz\n\n# With depth=3 and width=2, files will be saved in the following pattern:\n# temp_evercas/ab/cd/ef/ghijklmnopqrstuvwxyz\n```\n\n**NOTE:** The `algorithm` value should be a valid string argument to\n`hashlib.new()`.\n\n## Basic Usage\n\n`EverCas` supports basic file storage, retrieval, and removal as well as\nsome more advanced features like file repair.\n\n### Storing Content\n\nAdd content to the folder using either readable objects (e.g.\n`StringIO`) or file paths (e.g. `'a/path/to/some/file'`).\n\n``` python\nfrom io import StringIO\n\nsome_content = StringIO('some content')\n\naddress = fs.put(some_content)\n\n# Or if you'd like to save the file with an extension...\naddress = fs.put(some_content, '.txt')\n\n# Put all files in a directory\nfor srcpath, address in fs.putdir(\"dir\"):\n    #...\n\n# Put all files in a directory tree recursively\nfor srcpath, address in fs.putdir(\"dir\", recursive=True):\n    #...\n\n# Put all files in a directory tree using same extensions\nfor srcpath, address in fs.putdir(\"dir\", extensions=True):\n    # address.abspath will have same file extension as srcpath\n\n# The id of the file (i.e. the hexdigest of its contents).\naddress.id\n\n# The absolute path where the file was saved.\naddress.abspath\n\n# The path relative to fs.root.\naddress.relpath\n\n# Whether the file previously existed.\naddress.is_duplicate\n```\n\n### Retrieving File Address\n\nGet a file\\'s `HashAddress` by address ID or path. This address would be\nidentical to the address returned by `put()`.\n\n``` python\nassert fs.get(address.id) == address\nassert fs.get(address.relpath) == address\nassert fs.get(address.abspath) == address\nassert fs.get('invalid') is None\n```\n\n### Retrieving Content\n\nGet a `BufferedReader` handler for an existing file by address ID or\npath.\n\n``` python\nfileio = fs.open(address.id)\n\n# Or using the full path...\nfileio = fs.open(address.abspath)\n\n# Or using a path relative to fs.root\nfileio = fs.open(address.relpath)\n```\n\n**NOTE:** When getting a file that was saved with an extension, it\\'s\nnot necessary to supply the extension. Extensions are ignored when\nlooking for a file based on the ID or path.\n\n### Removing Content\n\nDelete a file by address ID or path.\n\n``` python\nfs.delete(address.id)\nfs.delete(address.abspath)\nfs.delete(address.relpath)\n```\n\n**NOTE:** When a file is deleted, any parent directories above the file\nwill also be deleted if they are empty directories.\n\n## Advanced Usage\n\nBelow are some of the more advanced features of `EverCas`.\n\n### Repairing Files\n\nThe `EverCas` files may not always be in sync with it\\'s `depth`,\n`width`, or `algorithm` settings (e.g. if `EverCas` takes ownership of a\ndirectory that wasn\\'t previously stored using content hashes or if the\n`EverCas` settings change). These files can be easily reindexed using\n`repair()`.\n\n``` python\nrepaired = fs.repair()\n\n# Or if you want to drop file extensions...\nrepaired = fs.repair(extensions=False)\n```\n\n**WARNING:** It\\'s recommended that a backup of the directory be made\nbefore repairing just in case something goes wrong.\n\n### Walking Corrupted Files\n\nInstead of actually repairing the files, you can iterate over them for\ncustom processing.\n\n``` python\nfor corrupted_path, expected_address in fs.corrupted():\n    # do something\n```\n\n**WARNING:** `EverCas.corrupted()` is a generator so be aware that\nmodifying the file system while iterating could have unexpected results.\n\n### Walking All Files\n\nIterate over files.\n\n``` python\nfor file in fs.files():\n    # do something\n\n# Or using the class' iter method...\nfor file in fs:\n    # do something\n```\n\nIterate over folders that contain files (i.e. ignore the nested\nsubfolders that only contain folders).\n\n``` python\nfor folder in fs.folders():\n    # do something\n```\n\n### Computing Size\n\nCompute the size in bytes of all files in the `root` directory.\n\n``` python\ntotal_bytes = fs.size()\n```\n\nCount the total number of files.\n\n``` python\ntotal_files = fs.count()\n\n# Or via len()...\ntotal_files = len(fs)\n```\n\n### Hard-linking files\n\nYou can use the built-in \\\"link\\\" put strategy to hard-link files into\nthe EverCas directory if the platform and filesystem support it. This\nwill automatically and silently fall back to copying if a hard-link\ncan\\'t be made, e.g. because the source is on a different device, the\nEverCas directory is on a filesystem that does not support hard links or\nthe source file already has the operating system\\'s maximum allowed\nnumber of hard links to it.\n\n``` python\nnewpath = fs.put(\"file/path\", put_strategy=\"link\").abspath\nassert os.path.samefile(\"file/path\", newpath)\n```\n\n### Custom Put Strategy\n\nFine-grained control over how each file or file-like object is stored in\nthe underlying filesytem.\n\n``` python\n# Implement your own put strategy\ndef my_put_strategy(evercas, src_stream, dst_path):\n    # src_stream is the source data to insert\n    # it is a EverCas.Stream object, which is a Python file-like object\n    # Stream objects also expose the filesystem path of the underlying\n    # file via the src_stream.name property\n\n    # dst_path is the path generated by EverCas, based on the hash of the\n    # source data\n\n    # src_stream.name will be None if there is not an underlying file path\n    # available (e.g. a StringIO was passed or some other non-file\n    # file-like)\n    # Its recommended to check name property is available before using\n    if src_stream.name:\n        # Example: rename files instead of copying\n        # (be careful with underlying file paths, make sure to test your\n        # implementation before using it).\n        os.rename(src_stream.name, dst_path)\n        # You can also access properties and methods of the EverCas instance\n        # using the evercas parameter\n        os.chmod(dst_path, EverCas.fmode)\n    else:\n        # The default put strategy is available for use as\n        # PutStrategies.copy\n        # You can manually call other strategies if you want fallbacks\n        # (recommended)\n        PutStrategies.copy(EverCas, src_stream, dst_path)\n\n# And use it like:\nfs.put(\"myfile\", put_strategy=my_put_strategy)\n```\n\nFor more details, please see the full documentation at\n<https://weedonandscott.github.io/evercas/>.\n\n### Acknowledgements\n\nThis software is based on HashFS, made by @dgilland with @x11x contributions, and inspired by parts of dud, by @kevin-hanselman.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "evercas hash file system content addressable fixed storage",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "evercas",
    "package_url": "https://pypi.org/project/evercas/",
    "platform": null,
    "project_url": "https://pypi.org/project/evercas/",
    "project_urls": {
      "Homepage": "https://github.com/weedonandscott/evercas"
    },
    "release_url": "https://pypi.org/project/evercas/0.8.1/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Cloneable (with rclone) content-addressable storage for Python",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16759856,
  "releases": {
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf20108e7ea0ed76cca4a3d49fb89f5dbb56b637bbd1bd667818597c49cefb8",
          "md5": "d5c89a97fd1b2762d62546a24a61b77b",
          "sha256": "a5254b9157fca43a77a5fe63f59c7fb9166ad6b946188f2cdb1064b07a7ddfc4"
        },
        "downloads": -1,
        "filename": "EverCAS-0.7.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5c89a97fd1b2762d62546a24a61b77b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11824,
        "upload_time": "2023-02-07T23:45:51",
        "upload_time_iso_8601": "2023-02-07T23:45:51.369779Z",
        "url": "https://files.pythonhosted.org/packages/2c/f2/0108e7ea0ed76cca4a3d49fb89f5dbb56b637bbd1bd667818597c49cefb8/EverCAS-0.7.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41dd82f98ca059305d1c32ee5498fb6f6b30c98c50eef0bf8aa70c600d19445c",
          "md5": "a74de6f3b67c17eefe807ed2e93fe88b",
          "sha256": "602aa980a7f69badab886d2fd1b940fd6413db36c24e00fa91912bf5023f3c62"
        },
        "downloads": -1,
        "filename": "EverCAS-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a74de6f3b67c17eefe807ed2e93fe88b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20891,
        "upload_time": "2023-02-07T23:45:53",
        "upload_time_iso_8601": "2023-02-07T23:45:53.989942Z",
        "url": "https://files.pythonhosted.org/packages/41/dd/82f98ca059305d1c32ee5498fb6f6b30c98c50eef0bf8aa70c600d19445c/EverCAS-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c2138a7da5f01c1dbf1bf7a21d45445eea3b50d180d8d8fbf552d9b2944a1e6",
          "md5": "bafaebaa161e277a44cd962af266d545",
          "sha256": "5ebb78945e31f07fa5483d891ee4334059b68944013f07da234f92f80b399832"
        },
        "downloads": -1,
        "filename": "evercas-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bafaebaa161e277a44cd962af266d545",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 12104,
        "upload_time": "2023-02-09T00:47:58",
        "upload_time_iso_8601": "2023-02-09T00:47:58.234827Z",
        "url": "https://files.pythonhosted.org/packages/0c/21/38a7da5f01c1dbf1bf7a21d45445eea3b50d180d8d8fbf552d9b2944a1e6/evercas-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3699adda8c57d4251f54ddebe41737bd0c67d861c2e9ccb3cf25addd66bfe9b",
          "md5": "d01f191ac65dcedff894475c284dfd45",
          "sha256": "45f879e5836de6094d199e601896028b1282090ec546a235c242b2cba0356bf2"
        },
        "downloads": -1,
        "filename": "evercas-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d01f191ac65dcedff894475c284dfd45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 16063,
        "upload_time": "2023-02-09T00:48:00",
        "upload_time_iso_8601": "2023-02-09T00:48:00.350416Z",
        "url": "https://files.pythonhosted.org/packages/b3/69/9adda8c57d4251f54ddebe41737bd0c67d861c2e9ccb3cf25addd66bfe9b/evercas-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c2138a7da5f01c1dbf1bf7a21d45445eea3b50d180d8d8fbf552d9b2944a1e6",
        "md5": "bafaebaa161e277a44cd962af266d545",
        "sha256": "5ebb78945e31f07fa5483d891ee4334059b68944013f07da234f92f80b399832"
      },
      "downloads": -1,
      "filename": "evercas-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bafaebaa161e277a44cd962af266d545",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 12104,
      "upload_time": "2023-02-09T00:47:58",
      "upload_time_iso_8601": "2023-02-09T00:47:58.234827Z",
      "url": "https://files.pythonhosted.org/packages/0c/21/38a7da5f01c1dbf1bf7a21d45445eea3b50d180d8d8fbf552d9b2944a1e6/evercas-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3699adda8c57d4251f54ddebe41737bd0c67d861c2e9ccb3cf25addd66bfe9b",
        "md5": "d01f191ac65dcedff894475c284dfd45",
        "sha256": "45f879e5836de6094d199e601896028b1282090ec546a235c242b2cba0356bf2"
      },
      "downloads": -1,
      "filename": "evercas-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d01f191ac65dcedff894475c284dfd45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 16063,
      "upload_time": "2023-02-09T00:48:00",
      "upload_time_iso_8601": "2023-02-09T00:48:00.350416Z",
      "url": "https://files.pythonhosted.org/packages/b3/69/9adda8c57d4251f54ddebe41737bd0c67d861c2e9ccb3cf25addd66bfe9b/evercas-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}