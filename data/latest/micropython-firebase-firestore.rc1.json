{
  "info": {
    "author": "WoolDoughnut310",
    "author_email": "wooldoughnutspi@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# micropython-firebase-firestore\n\nFirebase Firestore implementation for Micropython.\n\n**Firebase implementation** based on [REST API](https://firebase.google.com/docs/firestore/reference/rest), based on [micropython-firebase-realtime-database](https://github.com/ckoever/micropython-firebase-realtime-database) from ckoever.\n\n### Installation\n\nYou can use **uPip** to install library from **PyPi**\n\n```python\nimport upip\nupip.install(\"micropython-firebase-firestore\")\n```\n\nor you can just upload `ufirestore/ufirestore.py` to your microcontroller:\n\n```bash\npython pyboard.py -d PORT -f cp ufirestore.py :\n```\n\n### Commands that are implemented\n\n```\n- set_project_id\n- set_access_token\n- patch\n- create\n- get\n- getfile\n- delete\n- list\n- list_collection_ids\n- run_query\n```\n\n### Required modules\n\n```\nujson, urequests, _thread\n```\n\n### Connect to Wifi\n\n```python\nimport time\nimport network\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nif not wlan.isconnected():\n    wlan.connect(\"ssid\", \"pass\")\n    print(\"Waiting for Wi-Fi connection\", end=\"...\")\n    while not wlan.isconnected():\n        print(\".\", end=\"\")\n        time.sleep(1)\n    print()\n```\n\n### Example Usage\n\nReads a field from a stored document\n\n```python\nimport ufirestore\n\nufirestore.set_project_id(\"INSERT_PROJECT_ID\")\nufirestore.set_access_token(\"INSERT_ACCESS_TOKEN\")\nraw_doc = ufirestore.get(\"DOCUMENT_PATH\")\ndoc = FirebaseJson.from_raw(raw_doc)\n\nif doc[\"fields\"].exists(\"FIELD\"):\n    print(\"The field value is: %s\" % doc[\"fields\"].get(\"FIELD\"))\n```\n\nThe project ID is required, read about it [here](https://firebase.google.com/docs/projects/learn-more#project-id)\nor you can find it at `Project Settings > General` in your project's [console](https://console.firebase.google.com)\nThe access token is obtained from the Firebase Auth API, which can be harnessed with my [auth library](https://github.com/WoolDoughnut310/micropython-firebase-auth), or reading can be done [here](https://firebase.google.com/docs/firestore/use-rest-api#authentication_and_authorization)\n\n## Functions\n\n### set_project_id\n\n```python\nufirestore.set_project_id(\"INSERT_PROJECT_ID\")\n```\n\nSet the ID of your Firebase project\n\n### set_access_token\n\n```python\nufirestore.set_access_token(\"INSERT_ACCESS_TOKEN\")\n```\n\nSets the access token to use for authentication\n\n### patch\n\n```python\nufirestore.patch(PATH, DOC, update_mask=[], bg=True, cb=None)\n```\n\nUpdates or inserts a document `DOC` at the location `PATH`\n\n-   Set the fields to update with `update_mask`\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\ndoc = FirebaseJson()\ndoc.set(\"age/integerValue\", 21)\n\nresponse = ufirestore.patch(\"users/234\", doc, [\"age\"], False)\nprint(response)\n```\n\n### create\n\n```python\nufirestore.create(PATH, DOC, document_id=None, bg=True, cb=None)\n```\n\nCreates a new document `DOC` at the collection at location `PATH`\n\n-   `document_id` - The document ID to use for the document. If not specified, an ID will be generated\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\ndoc = FirebaseJson()\ndoc.set(\"name/stringValue\", \"Jane Doe\")\ndoc.set(\"age/integerValue\", 25)\ndoc.set(\"height/integerValue\", 165)\n\nresponse = ufirestore.create(\"users\", doc, bg=False)\nprint(response)\n```\n\n### get\n\n```python\nufirestore.get(PATH, mask=None, bg=True, cb=None)\n```\n\nGets a single document at location `PATH`\n\n-   `document_id` - The document ID to use for the document. If not specified, an ID will be generated\n-   `mask` - The fields to return\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\nresponse = ufirestore.get(\"users/129\", bg=False)\ndoc = FirebaseJson.from_raw(response)\n\nif doc.exists(\"fields/name\"):\n    print(\"Hello, %s\" % doc.get(\"fields/name\"))\n```\n\n### getfile\n\n```python\nufirestore.getfile(PATH, FILENAME, mask=None, bg=True, cb=None)\n```\n\nGets a single document at location `PATH` and writes it to file `FILENAME`\n\n-   `document_id` - The document ID to use for the document. If not specified, an ID will be generated\n-   `mask` - The fields to return\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\nufirestore.getfile(\"users/129\", \"user.json\")\n```\n\n### delete\n\n```python\nufirestore.delete(PATH, bg=True, cb=None)\n```\n\nDeletes a document at location `PATH`\n\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\nsuccess = ufirestore.delete(\"users/129\")\n\nif success:\n    print(\"User data successfully deleted.\")\n```\n\n### list\n\n```python\nufirestore.list(PATH, page_size=None, page_token=None, order_by=None, mask=None, show_missing=None, bg=True, cb=None)\n```\n\nLists documents at location `PATH`\n\n-   `page_size` - The number of documents to return\n-   `page_token` - The `next_page_token` returned from a previous `list` option\n-   `order_by` - The order to sort results by. For example: `priority desc, name`\n-   `mask` - The fields to return. If not set, return all fields\n-   `show_missing` - If the list should show missing documents\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\ndocuments, next_page_token = ufirestore.list(\"users\", bg=False)\n\nfor document in documents:\n    doc = FirebaseJson.from_raw(document)\n    if doc.exists(\"fields/age\"):\n        print(\"Age: %s\" % doc.get(\"fields/age\"))\n```\n\n### list_collection_ids\n\n```python\nufirestore.list_collection_ids(PATH, page_size=None, page_token=None, bg=True, cb=None)\n```\n\nLists all the collection IDs underneath a document at `PATH`\n\n-   `page_size` - The maximum number of results to return\n-   `page_token` - A page token\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\ncollection_ids, next_page_token = ufirestore.list_collection_ids(\"rooms/28\", bg=False)\n\nfor collection_id in collection_ids:\n    print(\"ID: %s\" % collection_id)\n```\n\n### run_query\n\n```python\nufirestore.run_query(PATH, query, bg=True, cb=None)\n```\n\nRuns a query at location `PATH`\n\n-   Optional run in the background with `bg`\n-   Set a callback function after getting data with `cb`\n\n#### Example\n\n```python\nfrom ufirestore.json import FirebaseJson, Query\n\nquery = Query().from_(\"users\").where(\"age\", \">=\", 18)\nraw_doc = ufirestore.run_query(\"\", query, bg=False)\ndoc = FirebaseJson.from_raw(raw_doc)\n\nif doc.exists(\"fields/name\"):\n    print(\"Resulted with user named %s\" % doc.get(\"fields/name\"))\n```\n\n## FirebaseJson\n\nA simple helper class for Firebase document JSON data\n\n### set\n\n```python\ndoc.set(path, value, with_type=False)\n```\n\nEdit, overwrite or create new node at the specified path\n\n-   `with_type` - If set to `True`, the value's type will be inferred and applied accordingly, as per a Firestore Document [Value](https://cloud.google.com/firestore/docs/reference/rest/v1/Value)\n\n### get\n\n```python\ndoc.get(path, default=None)\n```\n\nGet the node value at a given path, returning `default` if the path does not exist\n\n### add\n\n```python\ndoc.add(path, name, value)\n```\n\nAdd a new node at the path, with name `name` and contents `value`\n\n### add_item\n\n```python\ndoc.add_item(path, value)\n```\n\nAdds an array item to the node at the path\n\n### remove\n\n```python\ndoc.remove(path)\n```\n\nRemoves the node at the path\n\n### exists\n\n```python\ndoc.exists(path)\n```\n\nChecks whether a node exists at the path\n\n### process\n\n```python\ndoc.process(resource_name)\n```\n\nProcesses json instance into a `dict` for usage with Firestore API\n\nNOTE: All the functions in this library that require a document actually require the `FirebaseJon` instance and runs `process` behind the scenes\n\n### FirebaseJson.from_raw\n\n```python\nFirebaseJson.from_raw(raw_doc)\n```\n\nParses a raw document object from the Firestore API into a `FirebaseJson` instance\n\n### Extra methods\n\n### FirebaseJson.to_value_type\n\n```python\nFirebaseJson.to_value_type(value)\n```\n\nInfers the type of `value` and returns a `dict` in the format of a Firestore Document [Value](https://cloud.google.com/firestore/docs/reference/rest/v1/Value)\n\n#### Example\n\n```python\nvalue = 35\n\ndata = FirebaseJson.to_value_type(value)\n\nprint(data) # Returns {\"integerValue\": \"35\"}\n```\n\n### FirebaseJson.from_value_type\n\n```python\nFirebaseJson.from_value_type(value)\n```\n\nTakes a Firestore Document [Value](https://cloud.google.com/firestore/docs/reference/rest/v1/Value) object and returns its value, casted to the correct type\n\n#### Example\n\n```python\n# Example data from API\ndata = {\n    \"arrayValue\": {\n        \"values\": [\n            {\"stringValue\": \"a\"},\n            {\"stringValue\": \"b\"},\n            {\"integerValue\": \"3\"}\n        ]\n    }\n}\n\nprint(value) # Returns [\"a\", \"b\", 3]\n```\n\n## Query\n\nWrapper over `FirebaseJson` to easily create document queries\n\nExtends all `FirebaseJson` methods\n\n### from\\_\n\n```python\nquery.from_(collection_id, all_descendants=False)\n```\n\n-   `collection_id` - When set, selects only collections with this ID\n-   `all_descendants` - When `True`, selects all descendant collections, when `False`, selects collections that are immediate children of the `parent` the query will be run on\n\n### select\n\n```python\nquery.select(field)\n```\n\nAdds a document field to return\n\n### order_by\n\n```python\nquery.order_by(field, direction=\"DESCENDING\")\n```\n\n-   `field` - The field to order by\n-   `direction` - The direction to order by (`ASCENDING` or `DESCENDING`)\n\n### limit\n\n```python\nquery.limit(value)\n```\n\nThe maximum number of results to return, `value` must be >= 0\n\n### where\n\n```python\nquery.where(field, op, value)\n```\n\nApplies a filter on a specific field.\n\n-   `field` - The field to filter by\n-   `op` - The operation to filter by, is one of `<`, `<=`, `>`, `>=`, `==`, `!=`, `array-contains`, `in`, `array-contains-any`, `not-in`\n-   `value` - The value to compare to, type is inferred with `FirebaseJson.to_value_type`\n\n### process\n\n```python\nquery.process()\n```\n\nReturns `dict` data of query for use with Firestore API\n\nNOTE: This function is already used in the `run_query` function",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WoolDoughnut310/micropython-firebase-firestore",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-firebase-firestore",
    "package_url": "https://pypi.org/project/micropython-firebase-firestore/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-firebase-firestore/",
    "project_urls": {
      "Homepage": "https://github.com/WoolDoughnut310/micropython-firebase-firestore"
    },
    "release_url": "https://pypi.org/project/micropython-firebase-firestore/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Firebase Firestore implementation for Micropython optimized for ESP32.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12879242,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be7ddf77be8e63fa6fa523be6b04572f5fa8233226b6dce4d770dbb183cbd72d",
          "md5": "fa7520b8274856c8fd9609cafadbfea7",
          "sha256": "9ef67a6c101549496d93df8c0caab0b5986344953cd9b2bc70c1115b07f30057"
        },
        "downloads": -1,
        "filename": "micropython-firebase-firestore-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa7520b8274856c8fd9609cafadbfea7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8641,
        "upload_time": "2022-02-13T22:41:58",
        "upload_time_iso_8601": "2022-02-13T22:41:58.118184Z",
        "url": "https://files.pythonhosted.org/packages/be/7d/df77be8e63fa6fa523be6b04572f5fa8233226b6dce4d770dbb183cbd72d/micropython-firebase-firestore-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be7ddf77be8e63fa6fa523be6b04572f5fa8233226b6dce4d770dbb183cbd72d",
        "md5": "fa7520b8274856c8fd9609cafadbfea7",
        "sha256": "9ef67a6c101549496d93df8c0caab0b5986344953cd9b2bc70c1115b07f30057"
      },
      "downloads": -1,
      "filename": "micropython-firebase-firestore-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fa7520b8274856c8fd9609cafadbfea7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8641,
      "upload_time": "2022-02-13T22:41:58",
      "upload_time_iso_8601": "2022-02-13T22:41:58.118184Z",
      "url": "https://files.pythonhosted.org/packages/be/7d/df77be8e63fa6fa523be6b04572f5fa8233226b6dce4d770dbb183cbd72d/micropython-firebase-firestore-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}