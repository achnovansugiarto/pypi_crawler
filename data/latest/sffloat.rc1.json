{
  "info": {
    "author": "Eric Dennison",
    "author_email": "ericd@netdenizen.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Education",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "![Python package](https://github.com/tiggerntatie/sffloat/workflows/sffloat%20test%20suite/badge.svg)\n\n# sffloat\n\nThe **sffloat** package defines a `SFFloat` class that allows easy floating point computations\nthat take precision or \"significant figures\" into account.\n\n## features\n\n* Seamlessly mix `float` and `SFFloat` objects in arithmetic. Standard floating point objects\n  are automatically promoted to `SFFloat` when necessary.\n* Print and display `SFFloat` objects as if they are standard `float` numbers.\n* Compare `SFFloat` objects with floating point numbers to determine equivalence, taking precision\n  into account.\n* Use `SFFloat` versions of all standard Python math functions.\n\n## example use\n\n### importing SFFloat\n```python\nfrom sffloat import SFFloat\n```\n\n### calculating circle area using an imprecise radius\n```python\n# Create a floating point radius value of 3.4 with 2 sig figs\nfrom math import pi\nradius = SFFloat(3.4, 2)\n\n# Compute the circle area, with sig figs\narea = pi * radius ** 2\nprint(area)\n```\n```\n36\n```\n### addition example\n```python\na = SFFloat(0.00123, 3)\nb = SFFloat(0.1234, 4)\nprint(a + b)\n```\n```\n0.1246\n```\n### mix `SFFloat` with `float`\n```python\na = SFFloat(0.00123, 3)\nprint(a + 12.3456789)\n```\n```\n12.34691\n```\n### use `SFFloat` standard math functions\n```python\nfrom math import pi\nfrom sffloat import sfsin as sin\n\nangle = SFFloat(pi / 4, 3)\nprint(f\"The angle is {angle}; its raw value is {angle.value}\")\nprint(f\"The sine of {angle} is {sin(angle)}; its raw value is {sin(angle).value}\")\n```\n```\nThe angle is 0.785; its raw value is 0.7853981633974483\nThe sine of 0.785 is 0.707; its raw value is 0.7071067811865475\n```\n\n## supported functions\nIf you want to use one of the standard Python math functions while preserving precision then\nuse any of the following replacement functions. You can either import and use as-is, or import\nand assign the standard function name:\n```python\nfrom sffloat import sfsin\n```\nor\n```python\nfrom sffloat import sfsin as sin\n```\n\n* sfsin replaces sin\n* sfcos replaces cos\n* sftan replaces tan\n* sflog replaces log\n* sflog10 replaces log10\n* sfasin replaces asin\n* sfacos replaces acos\n* sfatan replaces atan\n* sfatan2 replaces atan2\n* sfexp replaces exp\n* sfpow replaces pow\n* sfsqrt replaces sqrt\n* sfdegrees replaces degrees\n* sfradians replaces radians\n\n## notes on functionality\n* Operation with standard functions is not sophisticated and follows the same rules that are used for\n  ordinary multiplication (minimum significant figures propagate as-is).\n* When ordinary floating point numbers are used with `SFFloat` values, the floating point values are\n  considered to have unlimited precision.\n* Addition or subtraction operations on `SFFloat` values may result in \"zero\" or \"negative\" significant\n  figures. \n* \"zero\" sig fig values will continue to be used correctly for subsequent addition or subtraction operations.\n* \"zero\" sig fig values will produce an exception when used in a function or multiplication operation.\n* \"zero\" sig fig values will be displayed as '0'.\n* The underlying full-precision floating point value of a `SFFloat` object may be accessed with its `.value`\n  property.\n* The underlying significant figures of a `SFFloat` object may be accessed with its `.sigfigs` property.\n* `sffloat` does not attempt to infer precision from initializing value (at the present time).\n* `SFFloat` objects display in rounded form using the `sigfig.round` function.\n* `SFFloat` objects display in standard format for values between 0.001 and 1000, and for 0, otherwise\n  scientific notation is used.\n\n## installation\nThe best way to install `sffloat` is with pip and virtualenv. Create and activate your virtual environment then\ninstall `sffloat` with:\n```\npip install sffloat\n```\n\n## requirements\n`sffloat` depends on `sigfig`, which will be installed automatically when using pip.\n\n## development environment\nTo begin working with `sffloat` in a development environment:\n\n* Clone this repository and `cd` into it.\n* Create a virtual environment: `python3 -m venv ./env`\n* Activate the virtual environment: `source ./env/bin/activate`\n* Install the dependencies: `pip install -r requirements.txt`\n\nThe `./scripts` folder includes a `run_tests.sh` script that will:\n* Perform a style check using black.\n* Perform a pylint check.\n* Execute the test cases using nose.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tiggerntatie/sffloat",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sffloat",
    "package_url": "https://pypi.org/project/sffloat/",
    "platform": "",
    "project_url": "https://pypi.org/project/sffloat/",
    "project_urls": {
      "Homepage": "https://github.com/tiggerntatie/sffloat"
    },
    "release_url": "https://pypi.org/project/sffloat/0.1.3/",
    "requires_dist": [
      "sigfig (>=1.1.8)"
    ],
    "requires_python": "",
    "summary": "SFFloat class for floating point computations that account for precision or 'sig figs'.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9019245,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de84088bb41af2e5913347121bd4a4e9a8750df0b9f3e58814ac77ca76869901",
          "md5": "3655ed5809d1c195904908f0c73571de",
          "sha256": "cb24b1052b8e35d8e5105913a8c6a92bfa7cf311971c777f251da2ed00cf02f4"
        },
        "downloads": -1,
        "filename": "sffloat-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3655ed5809d1c195904908f0c73571de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6388,
        "upload_time": "2020-12-30T20:30:18",
        "upload_time_iso_8601": "2020-12-30T20:30:18.838371Z",
        "url": "https://files.pythonhosted.org/packages/de/84/088bb41af2e5913347121bd4a4e9a8750df0b9f3e58814ac77ca76869901/sffloat-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2571d130fa0afd285fffc5f81e9d044e34fae51399062214db804f4a4a05f542",
          "md5": "8aea797174423922cfbc41ebe6f6084d",
          "sha256": "70e9b03a1692ace10c7c1f5edc50581bf49b63007d147525bfdf2c6df9d4d16c"
        },
        "downloads": -1,
        "filename": "sffloat-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8aea797174423922cfbc41ebe6f6084d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6227,
        "upload_time": "2020-12-30T20:30:20",
        "upload_time_iso_8601": "2020-12-30T20:30:20.174604Z",
        "url": "https://files.pythonhosted.org/packages/25/71/d130fa0afd285fffc5f81e9d044e34fae51399062214db804f4a4a05f542/sffloat-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de84088bb41af2e5913347121bd4a4e9a8750df0b9f3e58814ac77ca76869901",
        "md5": "3655ed5809d1c195904908f0c73571de",
        "sha256": "cb24b1052b8e35d8e5105913a8c6a92bfa7cf311971c777f251da2ed00cf02f4"
      },
      "downloads": -1,
      "filename": "sffloat-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3655ed5809d1c195904908f0c73571de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6388,
      "upload_time": "2020-12-30T20:30:18",
      "upload_time_iso_8601": "2020-12-30T20:30:18.838371Z",
      "url": "https://files.pythonhosted.org/packages/de/84/088bb41af2e5913347121bd4a4e9a8750df0b9f3e58814ac77ca76869901/sffloat-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2571d130fa0afd285fffc5f81e9d044e34fae51399062214db804f4a4a05f542",
        "md5": "8aea797174423922cfbc41ebe6f6084d",
        "sha256": "70e9b03a1692ace10c7c1f5edc50581bf49b63007d147525bfdf2c6df9d4d16c"
      },
      "downloads": -1,
      "filename": "sffloat-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8aea797174423922cfbc41ebe6f6084d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6227,
      "upload_time": "2020-12-30T20:30:20",
      "upload_time_iso_8601": "2020-12-30T20:30:20.174604Z",
      "url": "https://files.pythonhosted.org/packages/25/71/d130fa0afd285fffc5f81e9d044e34fae51399062214db804f4a4a05f542/sffloat-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}