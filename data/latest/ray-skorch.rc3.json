{
  "info": {
    "author": "Antoni Baum & contributors",
    "author_email": "antoni.baum@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ray-skorch\n\n*Distributed skorch on Ray Train*\n\n`pip install ray-skorch`\n\n[skorch](https://github.com/skorch-dev/skorch)-based wrapper for [Ray Train](https://docs.ray.io/en/latest/train/train.html). Experimental!\n\n> :warning: `RayTrainNeuralNet` and the rest of this package are experimental and not production ready. In particular, validation and error handling may be spotty. If you encounter any problems or have any suggestions please open an issue on GitHub.\n\nWe are looking for feedback! Please let us know about your experience using ray-skorch and about any suggestions and problems you may have by opening an issue. We are also interested in feedback on the concept of distributed training with scikit-learn(like) interfaces itself.\n\n## Development\n\n1. Run `pip install -e .` to install necessary packages\n2. Upon push, run `./format.sh` to make sure lint changes are applied appropriately.\n3. The current working examples can be found in `examples`.\n\n## Known issues & missing features\n\n* Only numpy arrays, pandas dataframes and Ray Data Datasets are supported as inputs.\n* Compatibility with scikit-learn hyperparameter tuners is not tested.\n\n## Basic example\n\nThe only breaking API difference compared to `skorch` is the addition of a new `num_workers` argument, contolling how many Ray workers to use for training. Please refer to docstrings for more information on other changes.\n\n### With numpy/pandas\n\n```python\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom torch import nn\n\nfrom ray_skorch import RayTrainNeuralNet\n\nX, y = make_classification(1000, 20, n_informative=10, random_state=0)\nX = X.astype(np.float32)\ny = y.astype(np.int64)\n\n\nclass MyModule(nn.Module):\n    def __init__(self, num_units=10, nonlin=nn.ReLU()):\n        super(MyModule, self).__init__()\n\n        self.dense0 = nn.Linear(20, num_units)\n        self.nonlin = nonlin\n        self.dropout = nn.Dropout(0.5)\n        self.dense1 = nn.Linear(num_units, num_units)\n        self.output = nn.Linear(num_units, 2)\n\n    def forward(self, X, **kwargs):\n        X = self.nonlin(self.dense0(X))\n        X = self.dropout(X)\n        X = self.nonlin(self.dense1(X))\n        X = self.output(X)\n        return X\n\nnet = RayTrainNeuralNet(\n    MyModule,\n    num_workers=2,  # the only new mandatory argument\n    criterion=nn.CrossEntropyLoss,\n    max_epochs=10,\n    lr=0.1,\n    # required for classification loss funcs\n    iterator_train__unsqueeze_label_tensor=False,\n    iterator_valid__unsqueeze_label_tensor=False,\n)\n\nnet.fit(X, y)\n\n# predict_proba returns a ray.data.Dataset\ny_proba = net.predict_proba(X).to_pandas()\nprint(y_proba)\n```\n\n### With Ray Data\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import make_classification\nfrom torch import nn\nfrom ray.data import from_pandas\n\nfrom ray_skorch import RayTrainNeuralNet\n\nX, y = make_classification(1000, 20, n_informative=10, random_state=0)\nX = pd.DataFrame(X.astype(np.float32))\ny = pd.Series(y.astype(np.int64))\nX.columns = [str(colname) for colname in X.columns]\n\nX_pred = X.copy()\nX[\"target\"] = y\n\nX = from_pandas(X)\n# ensure no target column is in data for prediction\nX_pred = from_pandas(X_pred)\n\nclass MyModule(nn.Module):\n    def __init__(self, num_units=10, nonlin=nn.ReLU()):\n        super(MyModule, self).__init__()\n\n        self.dense0 = nn.Linear(20, num_units)\n        self.nonlin = nonlin\n        self.dropout = nn.Dropout(0.5)\n        self.dense1 = nn.Linear(num_units, num_units)\n        self.output = nn.Linear(num_units, 2)\n\n    def forward(self, X, **kwargs):\n        X = self.nonlin(self.dense0(X))\n        X = self.dropout(X)\n        X = self.nonlin(self.dense1(X))\n        X = self.output(X)\n        return X\n\nnet = RayTrainNeuralNet(\n    MyModule,\n    num_workers=2,  # the only new mandatory argument\n    criterion=nn.CrossEntropyLoss,\n    max_epochs=10,\n    lr=0.1,\n    # required for classification loss funcs\n    iterator_train__unsqueeze_label_tensor=False,\n    iterator_valid__unsqueeze_label_tensor=False,\n)\n\nnet.fit(X, \"target\")\n\n# predict_proba returns a ray.data.Dataset\ny_proba = net.predict_proba(X_pred).to_pandas()\nprint(y_proba)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yard1/ray-skorch",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ray-skorch",
    "package_url": "https://pypi.org/project/ray-skorch/",
    "platform": null,
    "project_url": "https://pypi.org/project/ray-skorch/",
    "project_urls": {
      "Homepage": "https://github.com/Yard1/ray-skorch"
    },
    "release_url": "https://pypi.org/project/ray-skorch/0.0.3/",
    "requires_dist": [
      "ray[data,default] (>=1.11.0)",
      "torch",
      "pandas",
      "skorch (==0.11.0)"
    ],
    "requires_python": "",
    "summary": "Skorch on Ray Train",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13445284,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e3e9dc43ef74f56612f3a1fa6008fb2720c41e037a67897ae48f01e7894337f",
          "md5": "3109c4cb59183243f60dd6174b757c14",
          "sha256": "772ea84902e3c5f629c66f7ecc1a57ddc9fd272a0a4e6ebff0270e2d3dbdaf95"
        },
        "downloads": -1,
        "filename": "ray_skorch-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3109c4cb59183243f60dd6174b757c14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30766,
        "upload_time": "2022-01-04T17:40:34",
        "upload_time_iso_8601": "2022-01-04T17:40:34.303487Z",
        "url": "https://files.pythonhosted.org/packages/8e/3e/9dc43ef74f56612f3a1fa6008fb2720c41e037a67897ae48f01e7894337f/ray_skorch-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e1651c2eee7ef04cf145955d44edbf8e63b79f3e54eca727e1e8e8650c24eb9",
          "md5": "38da755df401a94154b2176464b61912",
          "sha256": "2869ee529f4ca1d2fc76052f575290fdfc06ca5a173414cee61f301b07762890"
        },
        "downloads": -1,
        "filename": "ray_skorch-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38da755df401a94154b2176464b61912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30952,
        "upload_time": "2022-01-05T12:10:40",
        "upload_time_iso_8601": "2022-01-05T12:10:40.272292Z",
        "url": "https://files.pythonhosted.org/packages/2e/16/51c2eee7ef04cf145955d44edbf8e63b79f3e54eca727e1e8e8650c24eb9/ray_skorch-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3901696f8d2b1ae117d8451d964549c0a11f23aebe0afdf8aa3bab96fd8702aa",
          "md5": "b4d6a91455905ffdc9339a1188795094",
          "sha256": "ae5ed3d78c58f7709ca26316fab957830e235b5b3a1d10b8324dedae6dd5c609"
        },
        "downloads": -1,
        "filename": "ray_skorch-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4d6a91455905ffdc9339a1188795094",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31079,
        "upload_time": "2022-04-07T19:23:37",
        "upload_time_iso_8601": "2022-04-07T19:23:37.061667Z",
        "url": "https://files.pythonhosted.org/packages/39/01/696f8d2b1ae117d8451d964549c0a11f23aebe0afdf8aa3bab96fd8702aa/ray_skorch-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3901696f8d2b1ae117d8451d964549c0a11f23aebe0afdf8aa3bab96fd8702aa",
        "md5": "b4d6a91455905ffdc9339a1188795094",
        "sha256": "ae5ed3d78c58f7709ca26316fab957830e235b5b3a1d10b8324dedae6dd5c609"
      },
      "downloads": -1,
      "filename": "ray_skorch-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4d6a91455905ffdc9339a1188795094",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31079,
      "upload_time": "2022-04-07T19:23:37",
      "upload_time_iso_8601": "2022-04-07T19:23:37.061667Z",
      "url": "https://files.pythonhosted.org/packages/39/01/696f8d2b1ae117d8451d964549c0a11f23aebe0afdf8aa3bab96fd8702aa/ray_skorch-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}