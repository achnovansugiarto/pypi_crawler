{
  "info": {
    "author": "Timothy Moore",
    "author_email": "mtimothy984+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# arango_crud\n\nThis respository wraps the basic CRUD operations on ArangoDB for practical use.\nThis is not an official library; the official python library is\n[pyArango](https://github.com/ArangoDB-Community/pyArango). The main reason to\nuse this over just [requests](https://requests.readthedocs.io/en/master/) is\nauthorization and server failure back-off. The main reason to use this over\npyArango is thread-safety, simpler interfaces, a more narrow focus, pep8\nnaming conventions, and complete support for either environment variable\nconfiguration or code-as-configuration.\n\nThe main reason to use pyArango over arango_crud is field validation and access\nto AQL. If you want to use ArangoDB as a database, use pyArango or similar. If\nyou want to use ArangoDB as a disk-based cache, use arango_crud or similar.\n\n***Note***: This package recommends a time-to-live semantic. The TTL may be\nset to \"-1\" in environment variables to be disabled, or \"None\" in code to be\ndisabled. A TTL index is only created when collections are initialized, so if\nthis library is used with TTL disabled and then TTL is enabled, one must\nmanually add the TTL indexes. Besides standard TTL usages, using a TTL means\nthat if there was a bug that leaked keys which was since patched, those keys\nwon't stay around forever. Furthermore, it means a small amount of key leakage,\nsuch as through extremely unlikely race conditions which would be expensive\nin either performance or developer time to fix, is not harmful to the long-term\nhealth of the project.\nhttps://www.arangodb.com/arangodb-training-center/ttl-indexes/\n\n***Note***: This is not intended to provide much configurability for creating\ndatabases or collections, providing only sane defaults for this particular\nuse-case. It's recommended to use a migration structure where databases and\ncollections are only initialized once and to call the appropriate HTTP endpoint\ndirectly: https://www.arangodb.com/docs/stable/http/collection-creating.html\n\n## Usage\n\n### Installation\n\nSupports python 3.7 or higher.\n\n`pip install arango_crud`\n\n### Initialize\n\n#### Code-as-configuration BasicAuth\n\n```py\nfrom arango_crud import (\n    Config, BasicAuth, RandomCluster, StepBackOffStrategy\n)\n\nconfig = Config(\n    cluster=RandomCluster(urls=['http://127.0.0.1:8529']),  # see Cluster Styles\n    timeout_seconds=3,\n    back_off=StepBackOffStrategy([0.1, 0.5, 1, 1, 1]),  # see Back Off Strategies\n    auth=BasicAuth(username='root', password=''),\n    ttl_seconds=31622400\n)\n```\n\n#### Code-as-configuration JWT\n\n```py\nfrom arango_crud import (\n    Config, JWTAuth, JWTDiskCache, RandomCluster, StepBackOffStrategy\n)\n\nconfig = Config(\n    cluster=RandomCluster(urls=['http://localhost:8529']),\n    timeout_seconds=3,\n    back_off=StepBackOffStrategy(steps=[0.1, 0.5, 1, 1, 1]),\n    ttl_seconds=31622400,\n    auth=JWTAuth(\n        username='root',\n        password='',\n        cache=JWTDiskCache(  # See JWT Caches\n            lock_file='.arango_jwt.lock',\n            lock_time_seconds=10,\n            store_file='.arango_jwt'\n        )\n    )\n)\n\n# encouraged for easier performance tracing, not required. happens on first\n# request otherwise. Fetches the JWT token if it does not exist.\nconfig.prepare()\n```\n\n#### Environment variables BasicAuth\n\ntest.py\n```py\nfrom arango_crud import env_config\n\nconfig = env_config()\nconfig.prepare() # recommended, not required\n```\n\nrun.sh\n```sh\n#!/usr/bin/env bash\n# Cluster urls are separated by a comma\nexport ARANGO_CLUSTER=http://localhost:8529\nexport ARANGO_CLUSTER_STYLE=random\nexport ARANGO_TIMEOUT_SECONDS=3\nexport ARANGO_BACK_OFF=step\nexport ARANGO_BACK_OFF_STEPS=0.1,0.5,1,1,1\nexport ARANGO_TTL_SECONDS=31622400\nexport ARANGO_AUTH=basic\nexport ARANGO_AUTH_USERNAME=root\nexport ARANGO_AUTH_PASSWORD=\npython test.py\n```\n\n#### Environment variables JWT\n\ntest.py\n```py\nfrom arango_crud import env_config\n\nconfig = env_config()\n```\n\nrun.sh\n```sh\n#!/usr/bin/env bash\n# Cluster urls are separated by a comma\nexport ARANGO_CLUSTER=http://localhost:8529\nexport ARANGO_CLUSTER_STYLE=random\nexport ARANGO_TIMEOUT_SECONDS=3\nexport ARANGO_BACK_OFF=step\nexport ARANGO_BACK_OFF_STEPS=0.1,0.5,1,1,1\nexport ARANGO_TTL_SECONDS=31622400\nexport ARANGO_AUTH=jwt\nexport ARANGO_AUTH_USERNAME=root\nexport ARANGO_AUTH_PASSWORD=\nexport ARANGO_AUTH_CACHE=disk\nexport ARANGO_AUTH_CACHE_LOCK_FILE=.arango_jwt.lock\nexport ARANGO_AUTH_CACHE_LOCK_TIME_SECONDS=10\nexport ARANGO_AUTH_CACHE_STORE_FILE=.arango_jwt\npython test.py\n```\n\n\n### CRUD\n\nTo make these runnable environment variables must be set and ArangoDB\nneeds to be reachable. Here are the configurations for ArangoDB running\nlocally on default development settings:\n\nWindows:\n```bat\nSET ARANGO_CLUSTER=http://localhost:8529\nSET ARANGO_CLUSTER_STYLE=random\nSET ARANGO_TIMEOUT_SECONDS=3\nSET ARANGO_BACK_OFF=step\nSET ARANGO_BACK_OFF_STEPS=0.1,0.5,1,1,1\nSET ARANGO_TTL_SECONDS=31622400\nSET ARANGO_AUTH=basic\nSET ARANGO_AUTH_USERNAME=root\nSET ARANGO_AUTH_PASSWORD=\n```\n\n*Nix:\n```sh\n#!/usr/bin/env bash\nexport ARANGO_CLUSTER=http://localhost:8529\nexport ARANGO_CLUSTER_STYLE=random\nexport ARANGO_TIMEOUT_SECONDS=3\nexport ARANGO_BACK_OFF=step\nexport ARANGO_BACK_OFF_STEPS=0.1,0.5,1,1,1\nexport ARANGO_TTL_SECONDS=31622400\nexport ARANGO_AUTH=basic\nexport ARANGO_AUTH_USERNAME=root\nexport ARANGO_AUTH_PASSWORD=\n```\n\n```py\nfrom arango_crud import env_config\nimport time\n\nconfig = env_config()\nconfig.prepare()\n\ndb = config.database('my_db')\ndb.create_if_not_exists()\ncoll = db.collection('users')\ncoll.create_if_not_exists()\n\n# The simplest interface\ncoll.create_or_overwrite_doc('tj', {'name': 'TJ'})\ncoll.read_doc('tj') # {'name': 'TJ'}\ncoll.force_delete_doc('tj') # True\n\n# non-expiring\ncoll.create_or_overwrite_doc('tj', {'name': 'TJ'}, ttl=None)\ncoll.force_delete_doc('tj')\n\n# custom expirations with touching. Note that touching a document is not\n# a supported atomic operation on ArangoDB and is hence faked with\n# read -> compare_and_swap. Presumably if the CAS fails the document was\n# touched recently anyway.\ncoll.create_or_overwrite_doc('tj', {'name': 'TJ'}, ttl=30) # None\ncoll.touch_doc('tj', ttl=60) # True\ncoll.force_delete_doc('tj') # True\n\n# Alternative interface. For anything except one-liners, usually nicer.\ndoc = coll.document('tj')\ndoc.body['name'] = 'TJ'\ndoc.create() # True\ndoc.body['note'] = 'Pretty cool'\ndoc.compare_and_swap() # True\n\n# We may use etags to avoid redownloading an unchanged document, but be careful\n# if you are modifying the body.\n\n# Happy case:\ndoc2 = coll.document('tj')\ndoc2.read() # loads {'name': 'TJ', 'note': 'Pretty cool'} from network\n\ndoc.read_if_remote_newer() # 304 not modified, returns False\ndoc2.read_if_remote_newer() # 304 not modified, returns False\n\ndoc.body['note'] = 'bar'\ndoc.compare_and_swap()\ndoc.read_if_remote_newer() # 304 not modified, returns False\ndoc2.read_if_remote_newer() # loads {'name': 'TJ', 'note': 'bar'} from network, returns True\n\n# Where it can get dangerous\ndoc.body['note'] = 'foo'\nprint(doc.body) # {'name': 'TJ', 'note': 'foo'}\ndoc.read() # always a complete download\nprint(doc.body) # {'name': 'TJ', 'note': 'bar'}\ndoc.read_if_remote_newer() # no changes on server since last read; 304 not modified, returns False\nprint(doc.body) # {'name': 'TJ', 'note': 'bar'}\ndoc.body['note'] = 'foo'\nprint(doc.body) # {'name': 'TJ', 'note': 'foo'}\ndoc.read_if_remote_newer() # no changes on server since last read; 304 not modified, returns False\nprint(doc.body) # {'name': 'TJ', 'note': 'foo'}\ndoc.read()\nprint(doc.body) # {'name': 'TJ', 'note': 'bar'}\n\ndoc.compare_and_delete() # True\n\n\n# Simple caching\nfor i in range(2):\n    doc = coll.document('tj')\n    hit = doc.read()\n    if hit:\n        doc.compare_and_swap() # refreshes TTL, usefulness depends\n    else:\n        # .... expensive computation ....\n        doc.body = {'name': 'TJ', 'note': 'Pretty cool'}\n        doc.create_or_overwrite()\n\n    print(f'cached value (loop {i + 1}/2) (hit: {hit}): {doc.body}')\n```\n\nThe following is in a separate code-block and is commented out to prevent\naccidentally copy+paste into somewhere it should not be pasted. When running\ntests it's helpful to cleanup the collections and databases afterward. It's\nencouraged that if you do not need to delete collections and databases on\nproduction these operations are disabled to help prevent developer error, which\nis done by setting `ARANGO_DISABLE_DATABASE_DELETE` and\n`ARANGO_DISABLE_COLLECTION_DELETE` to `true` These environment variables are\ntreated as `true` unless explicitly set to `false`. This is not a substitute\nfor good backups and should not be considered a security feature.\n\n```py\n# coll.force_delete()\n# db.force_delete()\n```\n\n## Contributing\n\nThis package adheres to pep8 guidelines unless an exception is listed in\n`.flake8`. Comments are explicitly line-broken at 80 characters. Code\ncomplexity measures (AbcComplexity, etc) are not used. This measures code\ncoverage and a build of below 70% code coverage is considered failing. Note\nthat the word \"unit test\" is avoided - if it's possible to test a line of\ncode without mocking or accessing private variables that is preferred. PRs\nwhich reduce code coverage must include an explanation of why.\n\nThe examples directory should not contain non-functional lines of code, so\ninstead of\n\n```py\nbar = foo()\nif bar is None:\n    print('Foo gave none!') # prints Foo\nelse:\n    print('Something went wrong!')\n```\n\nit should be the easier to read assert variant, which plays friendlier with\nautomated testing that the examples actually work:\n\n```py\nbar = foo()\nassert bar is None\n```\n\nHence any PR where the coverage in the examples directory is less than 98%\nwhen running `coverage run --rcfile=.coveragerc_examples examples/run_all.py`\nwill have changes requested. The lines which do not run should be only due to\nrandom chance.\n\nThis repository is focused specifically on using ArangoDB as a disk-based\ncache. Functionality which doesn't support that use-case will have their PR\nclosed with the recommendation that they fork. So AQL or graph support would\nlikely be closed, but (bulk) get/set operations or concurrency-safe patches\nwill likely be merged.\n\nInheritance is to be avoided, preferring delegation which respects contracts.\nInterfaces are not included in this, where an interface is a class where all\nthe functions simply raise `NotImplementedError` and there is no constructor.\n\n### Setup Development (Windows)\n\n[Install ArangoDB](https://www.arangodb.com/download-major/) on default\ndevelopment settings.\n\n```bat\npython -m venv venv\npython -m pip install --upgrade pip\n\"venv/Scripts/activate.bat\"\npython -m pip install -r dev_requirements.txt\n\"scripts/windows_dev_env.bat\"\ncoverage run -m unittest discover -s tests\ncoverage combine\ncoverage report\ncoverage run --rcfile=.coveragerc_examples examples/run_all.py\ncoverage report\n```\n\n### Setup Development (*Nix)\n\n```bash\ndocker pull arangodb/arangodb\ndocker run -e ARANGO_NO_AUTH=1 -p 8529/tcp arangodb/arangodb arangod --server-endpoint tcp://0.0.0.0:8529\npython -m venv venv\npython -m pip install --upgrade pip\n. venv/bin/activate\n. scripts/nix_dev_env.sh\npython -m pip install -r dev_requirements.txt\n# This pulls from .coveragerc to handle multiprocessing\ncoverage run -m unittest discover -s tests\ncoverage combine\ncoverage report\ncoverage run --rcfile=.coveragerc_examples examples/run_all.py\ncoverage report\n```\n\n## Cluster Styles\n\nWhen working with an ArangoDB cluster, it's important that the clients\ndistribute their requests amongst the various coordinators. The request\nstyles supported are `random` and `weighted-random`. Round-robin and\nsimilar are avoided as they cannot be made thread-safe and performant\nwithout context.\n\n### Random\n\nA random url is selected from the cluster for each request with equal\nprobability among all urls.\n\n### Weighted Random\n\nA random node in the cluster is selected on each request, except there may be\na different probability for different urls. This is useful if, for example,\none of the coordinators is running on a larger server than the rest.\n\nExample:\n\n```py\nfrom arango_crud import WeightedRandomCluster\n\ncluster = WeightedRandomCluster(\n    urls=['http://localhost:8529', 'http://localhost:8530', 'http://localhost:8531'],\n    weights=[1, 2, 1]\n)\n```\n\nThis will select port 8529 1/4 of the time, 8530 1/2 of the time, and 8531 1/4\nof the time. If one prefers to set the exact percentages just ensure the\nweights sum to one (i.e., `0.25, 0.5, 0.25`)\n\nExample environment variables:\n\n```sh\n#!/usr/bin/env bash\nexport ARANGO_CLUSTER=http://localhost:8529,http://localhost:8530,http://localhost:8531\nexport ARANGO_CLUSTER_STYLE=weighted-random\nexport ARANGO_CLUSTER_WEIGHTS=1,2,1\n```\n\n## Alternatives to Environment Variables\n\nAlthough environment variables are sometimes extremely convenient, they can\nalso be painful in other development environments. One can painlessly switch\nthese out for their preferred storage mechanism since `env_config` accepts\na dictionary which it uses to load variables from. Note that `env_config`\nwill exclusively use that dictionary - it will not fall back and use an\nenvironment variable if something is missing.\n\nThe only caveat is that for simplicity of development and to reuse the same\ndocumentation, the keys need to be screaming snake case and it will not\nmake use of nesting. If one prefers they can massage the data into this format\nafter loading to get more conventional looking configuration files. One can\nalso simply massage the data into the arguments for `Config` directly.\n\narango_config.json\n```json\n{\n    \"ARANGO_CLUSTER\": \"http://localhost:8529,http://localhost:8530,http://localhost:8531\",\n    \"ARANGO_CLUSTER_STYLE\": \"weighted-random\",\n    \"__comment\": \"... see src/arango_crud/env_config.py for complete argument docs ...\"\n}\n```\n\nWhich allows loading as follows:\n\n```py\nfrom arango_crud import env_config\nimport json\n\nwith open('arango_config.json') as fin:\n    cfg = json.load(fin)\n\narango_config = env_config(cfg)\n```\n\n\n## Server Failures\n\nWhen a request fails due to a server-side issue it's usually desirable to try\nagain on a new coordinator. A small sleep is also helpful to avoid suddenly\nmassively spiking traffic to the coordinators whenever they hiccup. This\nsupports only a `step-back-off` policy. If the steps are `[0.1, 0.5, 1]` then\non the first server error this waits 0.1 seconds then tries again. If that\nalso fails this waits 0.5 seconds then tries again. If that fails this waits\n1 second then tries again. If that fails, an error is raised.\n\n## JWT Locking and Store\n\nIt's usually not a good idea to create a lot of new tokens when a client is\nmisbehaving, as token generation is generally meant to be expensive in order to\nbe secure. Hence JWT is necessarily stateful on the Config - rather than just\nbeing able to create network requests we first need to fetch the JWT.\nFurthermore, we may need to refresh the token on arbitrary requests.\n\nThe recommended way to handle JWT's cache is `JWTDiskCache`. A file will contain\nthe JWT and some metadata about it, which will be accessed in a safe way for\neven highly concurrent environments, meaning that every instance running\narango_crud on the same machine using the same config will share JWT tokens\nand will only create/renew the token once per renewal period. This overhead is\nextremely minor for non-concurrent environments.\n\nIf you're very confident that JWT generation is not going to be a significant\nsource of load and there is no multithreading, a naive approach can be enabled\nwith the cache style `None`. See the examples jwt_disk_example.py and\njwt_none_example.py\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tjstretchalot/arango_crud",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "arango-crud",
    "package_url": "https://pypi.org/project/arango-crud/",
    "platform": "",
    "project_url": "https://pypi.org/project/arango-crud/",
    "project_urls": {
      "Homepage": "https://github.com/tjstretchalot/arango_crud"
    },
    "release_url": "https://pypi.org/project/arango-crud/1.0.5/",
    "requires_dist": [
      "certifi",
      "chardet",
      "idna",
      "pytypeutils",
      "requests",
      "urllib3"
    ],
    "requires_python": ">=3.7",
    "summary": "A wrapper around ArangoDB CRUD HTTP API",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10534180,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d7ca2f39c7c3be4cb936a801303afe0870b03ad833faaff2b791049272a3e3b",
          "md5": "b97cbb071918f2894705c8c67d567121",
          "sha256": "e751ded6add659e2952928819f476bdb32a4a8b6f90a6824c9cfa9ff9b5ef104"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b97cbb071918f2894705c8c67d567121",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30170,
        "upload_time": "2020-04-27T15:29:29",
        "upload_time_iso_8601": "2020-04-27T15:29:29.345461Z",
        "url": "https://files.pythonhosted.org/packages/1d/7c/a2f39c7c3be4cb936a801303afe0870b03ad833faaff2b791049272a3e3b/arango_crud-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f978a83b4d69afcffe8d2008eac28fd1f6be7e1fbc5b63a18fa41e8cd40393d",
          "md5": "0ebdaa661599d96cd90f4e9082677e4e",
          "sha256": "7eb4ca2ca4ca12e9a01712282d4e41d7e7785d4f0cbdd79cba9b34d5b3b522a6"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ebdaa661599d96cd90f4e9082677e4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31097,
        "upload_time": "2020-04-27T15:29:31",
        "upload_time_iso_8601": "2020-04-27T15:29:31.583576Z",
        "url": "https://files.pythonhosted.org/packages/6f/97/8a83b4d69afcffe8d2008eac28fd1f6be7e1fbc5b63a18fa41e8cd40393d/arango_crud-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c95765b40fa16a83439a42a6555dcfb9c55df918620d79c78a4fbd5340e0bc4",
          "md5": "5ff77861443ac8a00dbe9d6e745fe3ca",
          "sha256": "6aeb5962016eda6601ed69d4fe6d87cfd3af18225559b8b867d76efbadfe26b9"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ff77861443ac8a00dbe9d6e745fe3ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30216,
        "upload_time": "2020-04-27T15:35:24",
        "upload_time_iso_8601": "2020-04-27T15:35:24.677491Z",
        "url": "https://files.pythonhosted.org/packages/6c/95/765b40fa16a83439a42a6555dcfb9c55df918620d79c78a4fbd5340e0bc4/arango_crud-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b930e617a5d326306a323a73600c675277a045fd1dc5abb211924c1297c36bd",
          "md5": "66a579fe08942a7c737b343185d94301",
          "sha256": "4cb24b73a92b949a2a3679e1813554ff0c240bf3a6946bf92b26ad21123a5ec2"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66a579fe08942a7c737b343185d94301",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31155,
        "upload_time": "2020-04-27T15:35:26",
        "upload_time_iso_8601": "2020-04-27T15:35:26.358073Z",
        "url": "https://files.pythonhosted.org/packages/6b/93/0e617a5d326306a323a73600c675277a045fd1dc5abb211924c1297c36bd/arango_crud-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb0a5a7f03cf07793272df045170e12445f21f065c1a746776388af40d840d3",
          "md5": "03debfe86903b21b5d6ab0c7fa6176ae",
          "sha256": "6a25e67022bb58232566c4ef7bf0ba3a8ce6804b13daa96f988ab11abb012e30"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03debfe86903b21b5d6ab0c7fa6176ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30532,
        "upload_time": "2020-06-23T16:55:01",
        "upload_time_iso_8601": "2020-06-23T16:55:01.461662Z",
        "url": "https://files.pythonhosted.org/packages/6c/b0/a5a7f03cf07793272df045170e12445f21f065c1a746776388af40d840d3/arango_crud-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61500ec7c95ac872a2ea72e67efbf9a43d56015e0ce0b73479baddf08a7873dd",
          "md5": "2ce9c23554d87e676a72b546b96e6c09",
          "sha256": "af51be64b1dbad7df68c4dc8563859b968fa658bd3565ddb9053496e091c0b7b"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2ce9c23554d87e676a72b546b96e6c09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31449,
        "upload_time": "2020-06-23T16:55:04",
        "upload_time_iso_8601": "2020-06-23T16:55:04.298785Z",
        "url": "https://files.pythonhosted.org/packages/61/50/0ec7c95ac872a2ea72e67efbf9a43d56015e0ce0b73479baddf08a7873dd/arango_crud-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0a157d7eefa8358d548bd8e7a8474187893c6face2ce37ff2a0a812dadde6ef",
          "md5": "3c37a4e5c5ba27d59cacbbf7e2b51d35",
          "sha256": "953c2f262eb1bcf083e86aa31f067ca933fd658274f7341d124ff50a405a6009"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c37a4e5c5ba27d59cacbbf7e2b51d35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30616,
        "upload_time": "2020-07-04T18:38:31",
        "upload_time_iso_8601": "2020-07-04T18:38:31.119348Z",
        "url": "https://files.pythonhosted.org/packages/b0/a1/57d7eefa8358d548bd8e7a8474187893c6face2ce37ff2a0a812dadde6ef/arango_crud-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f20c588a690cb36707f320922f145442d610c656160984344936a84ab8dfe895",
          "md5": "6251f3aeba0fa93a1be6d49e78333a2f",
          "sha256": "fbf71965dbd61329215f17a0a7f6272e8a35fdf36cf54c1c0217ae8eeb157ec5"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6251f3aeba0fa93a1be6d49e78333a2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31545,
        "upload_time": "2020-07-04T18:38:32",
        "upload_time_iso_8601": "2020-07-04T18:38:32.805532Z",
        "url": "https://files.pythonhosted.org/packages/f2/0c/588a690cb36707f320922f145442d610c656160984344936a84ab8dfe895/arango_crud-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6b5bd52009ede5cd03a604eeb72ca2115d591182593dbe0d77ccb275c2c6115",
          "md5": "1fc7dd3dfc7aade3029de2b67105ffb1",
          "sha256": "ac239477fe68b8c61a50db254687120d918d991a33fb53a2a1b34ed8124d8c6c"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fc7dd3dfc7aade3029de2b67105ffb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30621,
        "upload_time": "2020-09-18T18:10:26",
        "upload_time_iso_8601": "2020-09-18T18:10:26.014724Z",
        "url": "https://files.pythonhosted.org/packages/f6/b5/bd52009ede5cd03a604eeb72ca2115d591182593dbe0d77ccb275c2c6115/arango_crud-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d924be5f6fc97af3528135cfc3e85fa8107214c37db22db16c7f16645ec9b83",
          "md5": "5e261ebc03a2dcc8efe1772500500c69",
          "sha256": "8264c1d7591e1842430c7d1433e4ab558a5f40824ddbe32bb365ea6336df8e79"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5e261ebc03a2dcc8efe1772500500c69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31576,
        "upload_time": "2020-09-18T18:10:27",
        "upload_time_iso_8601": "2020-09-18T18:10:27.762856Z",
        "url": "https://files.pythonhosted.org/packages/1d/92/4be5f6fc97af3528135cfc3e85fa8107214c37db22db16c7f16645ec9b83/arango_crud-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "276f6c339a18d4120b6088b54e8f1bc1373ec26a461ffb278bb91a29c6a0b457",
          "md5": "62555bc0b4763f3ece145464f5d41360",
          "sha256": "c47a6ff1652e1c0918a64bc04ac3c9a505edf48c42f3c3acb5c8c54dac90d093"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62555bc0b4763f3ece145464f5d41360",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30645,
        "upload_time": "2021-06-02T02:02:46",
        "upload_time_iso_8601": "2021-06-02T02:02:46.306836Z",
        "url": "https://files.pythonhosted.org/packages/27/6f/6c339a18d4120b6088b54e8f1bc1373ec26a461ffb278bb91a29c6a0b457/arango_crud-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4217bf375c04f7af5848f7d0fac519438be9d8d80b2aa6c48462517be3d1623c",
          "md5": "816cf8b2bcb2bf183b7d8c9d62d63225",
          "sha256": "881b7c493884fec9fa31c0bcaa2e2f914357031f0a4d4a75de514a2ca54a8f1c"
        },
        "downloads": -1,
        "filename": "arango_crud-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "816cf8b2bcb2bf183b7d8c9d62d63225",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31393,
        "upload_time": "2021-06-02T02:02:47",
        "upload_time_iso_8601": "2021-06-02T02:02:47.731130Z",
        "url": "https://files.pythonhosted.org/packages/42/17/bf375c04f7af5848f7d0fac519438be9d8d80b2aa6c48462517be3d1623c/arango_crud-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "276f6c339a18d4120b6088b54e8f1bc1373ec26a461ffb278bb91a29c6a0b457",
        "md5": "62555bc0b4763f3ece145464f5d41360",
        "sha256": "c47a6ff1652e1c0918a64bc04ac3c9a505edf48c42f3c3acb5c8c54dac90d093"
      },
      "downloads": -1,
      "filename": "arango_crud-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62555bc0b4763f3ece145464f5d41360",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 30645,
      "upload_time": "2021-06-02T02:02:46",
      "upload_time_iso_8601": "2021-06-02T02:02:46.306836Z",
      "url": "https://files.pythonhosted.org/packages/27/6f/6c339a18d4120b6088b54e8f1bc1373ec26a461ffb278bb91a29c6a0b457/arango_crud-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4217bf375c04f7af5848f7d0fac519438be9d8d80b2aa6c48462517be3d1623c",
        "md5": "816cf8b2bcb2bf183b7d8c9d62d63225",
        "sha256": "881b7c493884fec9fa31c0bcaa2e2f914357031f0a4d4a75de514a2ca54a8f1c"
      },
      "downloads": -1,
      "filename": "arango_crud-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "816cf8b2bcb2bf183b7d8c9d62d63225",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 31393,
      "upload_time": "2021-06-02T02:02:47",
      "upload_time_iso_8601": "2021-06-02T02:02:47.731130Z",
      "url": "https://files.pythonhosted.org/packages/42/17/bf375c04f7af5848f7d0fac519438be9d8d80b2aa6c48462517be3d1623c/arango_crud-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}