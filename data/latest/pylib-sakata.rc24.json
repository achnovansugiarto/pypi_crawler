{
  "info": {
    "author": "Koichi Sakata",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pylib-sakata User's Manual version-0.1.14\r\n===\r\n\r\n<!-- code_chunk_output -->\r\n\r\n- [1. Introduction](#1-introduction)\r\n- [2. Environment Setup](#2-environment-setup)\r\n  - [2.1. Installation of Python](#21-installation-of-python)\r\n  - [2.2. Installation  of required Python libraries](#22-installation--of-required-python-libraries)\r\n  - [2.3. Installation of pylib-sakata](#23-installation-of-pylib-sakata)\r\n  - [2.4. Installation of IDE for Python](#24-installation-of-ide-for-python)\r\n    - [2.4.1. Visual Studio Code (VSCode)](#241-visual-studio-code-vscode)\r\n      - [2.4.1.1. Installation of VSCode](#2411-installation-of-vscode)\r\n      - [2.4.1.2. Initial setting of VSCode](#2412-initial-setting-of-vscode)\r\n    - [2.4.2. Spyder](#242-spyder)\r\n      - [2.4.2.1. Installation of Spyder](#2421-installation-of-spyder)\r\n      - [2.4.2.2. Initial setting of Spyder](#2422-initial-setting-of-spyder)\r\n    - [2.4.3. PyCharm](#243-pycharm)\r\n      - [2.4.3.1. Installation of PyCharm](#2431-installation-of-pycharm)\r\n      - [2.4.3.2. Initial setting of PyCharm](#2432-initial-setting-of-pycharm)\r\n    - [2.4.4. Comparison between  VSCode and Spyder and PyCharm](#244-comparison-between--vscode-and-spyder-and-pycharm)\r\n  - [2.5. Getting started](#25-getting-started)\r\n- [3. pylib\\_sakata.ctrl](#3-pylib_sakatactrl)\r\n  - [3.1. ZpkModel](#31-zpkmodel)\r\n  - [3.2. tf](#32-tf)\r\n  - [3.3. ss](#33-ss)\r\n  - [3.4. zpk](#34-zpk)\r\n  - [3.5. tf2ss](#35-tf2ss)\r\n  - [3.6. tf2zpk](#36-tf2zpk)\r\n  - [3.7. ss2tf](#37-ss2tf)\r\n  - [3.8. ss2zpk](#38-ss2zpk)\r\n  - [3.9. zpk2tf](#39-zpk2tf)\r\n  - [3.10. zpk2ss](#310-zpk2ss)\r\n  - [3.11. sys2frd](#311-sys2frd)\r\n  - [3.12. feedback](#312-feedback)\r\n  - [3.13. frdfeedback](#313-frdfeedback)\r\n  - [3.14. c2d](#314-c2d)\r\n  - [3.15. pi](#315-pi)\r\n  - [3.16. pd](#316-pd)\r\n  - [3.17. pid](#317-pid)\r\n  - [3.18. pl1st](#318-pl1st)\r\n  - [3.19. pl2nd](#319-pl2nd)\r\n  - [3.20. lpf1st](#320-lpf1st)\r\n  - [3.21. lpf2nd](#321-lpf2nd)\r\n  - [3.22. hpf1st](#322-hpf1st)\r\n  - [3.23. hpf2nd](#323-hpf2nd)\r\n  - [3.24. nf](#324-nf)\r\n  - [3.25. pf](#325-pf)\r\n  - [3.26. pfoptparam](#326-pfoptparam)\r\n  - [3.27. pfopt](#327-pfopt)\r\n  - [3.28. dob](#328-dob)\r\n  - [3.29. zpetc](#329-zpetc)\r\n  - [3.30. filt](#330-filt)\r\n  - [3.31. minreal](#331-minreal)\r\n  - [3.32. makeprmset](#332-makeprmset)\r\n  - [3.33. defprmset](#333-defprmset)\r\n- [4. pylib\\_sakata.fft](#4-pylib_sakatafft)\r\n  - [4.1. FreqResp](#41-freqresp)\r\n  - [4.2. fft](#42-fft)\r\n  - [4.3. fft\\_ave](#43-fft_ave)\r\n  - [4.4. tfestimate](#44-tfestimate)\r\n  - [4.5. frdresize](#45-frdresize)\r\n  - [4.6. frdsim](#46-frdsim)\r\n- [5. pylib\\_sakta.meas](#5-pylib_saktameas)\r\n  - [5.1. MeasData](#51-measdata)\r\n  - [5.2. getcsvdata](#52-getcsvdata)\r\n  - [5.3. gettxtdata](#53-gettxtdata)\r\n  - [5.4. getmatdata](#54-getmatdata)\r\n  - [5.5. getdata](#55-getdata)\r\n  - [5.6. getdataindex](#56-getdataindex)\r\n  - [5.7. measdata2frd](#57-measdata2frd)\r\n- [6. pylib\\_sakata.traj](#6-pylib_sakatatraj)\r\n  - [6.1. TrajInf](#61-trajinf)\r\n  - [6.2. traj4th](#62-traj4th)\r\n- [7. pylib\\_sakata.plot](#7-pylib_sakataplot)\r\n  - [7.1. plot\\_xy](#71-plot_xy)\r\n  - [7.2. plot\\_tf](#72-plot_tf)\r\n  - [7.3. plot\\_tffrd](#73-plot_tffrd)\r\n  - [7.4. plot\\_nyquist](#74-plot_nyquist)\r\n  - [7.5. plot\\_nyquist\\_assistline](#75-plot_nyquist_assistline)\r\n  - [7.6. makefig](#76-makefig)\r\n  - [7.7. savefig](#77-savefig)\r\n  - [7.8. showfig](#78-showfig)\r\n- [8. pylib\\_sakata.init](#8-pylib_sakatainit)\r\n  - [8.1. close\\_all](#81-close_all)\r\n  - [8.2. clear\\_all](#82-clear_all)\r\n\r\n<!-- /code_chunk_output -->\r\n\r\n## 1. Introduction\r\n\r\nThe pylib-sakata package is a set of python classes and functions that make the python-control package more convenient. This package provide practical level's tools to design controls and  to analysis of performance and stability of SISO LTI systems. These development environments are available on free.\r\n\r\n## 2. Environment Setup\r\n\r\n### 2.1. Installation of Python\r\nPython installation exe file can be downloaded [HERE](https://www.python.org/downloads/) for Windows. Check \"Add Python 3.x to PATH\" when you install Python.\r\n\r\n### 2.2. Installation  of required Python libraries\r\n\r\nThe pylib-sakata package requires [numpy](http://www.numpy.org), [scipy](http://www.scipy.org), [matplotlib](https://matplotlib.org), [pandas](https://pandas.pydata.org/), and [python-control](https://github.com/python-control/python-control). In addition, some routines require the [slycot](https://github.com/python-control/Slycot) library in order to implement more advanced features. \r\nFirst, pip should be upgraded by the following command on the command prompt for Windows OS.\r\n```shell\r\npython -m pip install --upgrade pip\r\n```\r\nFor Linux OS, pip can be upgraded by the following command on the shell.\r\n```shell\r\n$ sudo pip3 install --upgrade pip\r\n```\r\nThe required python libraries can be installed using pip as the following commands on the command prompt or on the shell.\r\n```shell\r\npip install numpy\r\npip install scipy\r\npip install matplotlib\r\npip install pandas\r\npip install control\r\n```\r\nIf those libraries can not be installed, please use pip3 instead of pip.\r\n\r\n### 2.3. Installation of pylib-sakata\r\n\r\nThe [pylib-sakata](https://github.com/Koichi-Sakata/pylib_sakata) package can be installed using pip using pip as following on the command prompt or on the shell.\r\n\r\n```shell\r\npip install pylib-sakata\r\n```\r\n\r\n### 2.4. Installation of IDE for Python\r\n\r\nThere are three recommended IDEs.\r\n\r\n#### 2.4.1. Visual Studio Code (VSCode)\r\nAlthough VSCode is actually an editor, it is available as Python IDE due to extensions. It is recommended to install it easily because of the versatility of extensions. The following figure shows VSCode IDE window.\r\n\r\n<img src=\"figure\\vscode_disp.png\" alt=\"vscode_disp\" style=\"zoom: 33%;\" />\r\n\r\n##### 2.4.1.1. Installation of VSCode\r\nThe latest version of VSCode installation exe file can be downloaded [HERE](https://code.visualstudio.com/) for Windows OS.\r\nFor Linux OS, VSCode can be installed by the following command on the shell.\r\n```shell\r\n$ sudo apt update \r\n$ sudo apt install code\r\n```\r\n\r\n##### 2.4.1.2. Initial setting of VSCode\r\n1. Install Python extension for Visual Studio Code from extensions in the activity bar on the left side.\r\n1. Command (Ctrl+Shift+P) to open the command palette.\r\n1. Select your installed python.exe on  \"Python: select interpreter\".\r\n\r\n#### 2.4.2. Spyder\r\nSpyder is an IDE like MATLAB. If you are used to MATLAB, this IDE is recommended. The following figure shows Spyder IDE window.\r\n\r\n<img src=\"figure\\spyder_disp.png\" alt=\"spyder_disp\" style=\"zoom: 33%;\" />\r\n\r\n##### 2.4.2.1. Installation of Spyder\r\nThe latest version of Spyder installation exe file can be downloaded [HERE](https://www.spyder-ide.org/) for Windows OS.\r\nFor Linux OS, Spyder can be installed by the following command on the shell.\r\n\r\n```shell\r\n$ sudo apt update \r\n$ sudo apt install spyder3\r\n```\r\n\r\n##### 2.4.2.2. Initial setting of Spyder\r\n1. Open Tools>Preferences>Python interpreter.\r\n1. Check \"Use the following Python interpreter.\"\r\n1. Enter the path of your installed python.exe.\r\n1. Install spyder-kernels for your python version by the following command `pip install spyder-kernels==2.0.*` on the command prompt or on the shell.\r\n1. Reboot your PC.\r\n\r\n#### 2.4.3. PyCharm\r\nProfessional version is charged. Community version is free. Community version is enough for control system development. The following figure shows PyCharm window.\r\n\r\n<img src=\"figure\\pycharm_disp.png\" alt=\"spyder_disp\" style=\"zoom: 33%;\" />\r\n\r\n##### 2.4.3.1. Installation of PyCharm\r\nThe latest version of PyCharm installation exe file can be downloaded [HERE](https://www.jetbrains.com/pycharm/download/). \r\n\r\n##### 2.4.3.2. Initial setting of PyCharm\r\nIt is not necessary.\r\n\r\n#### 2.4.4. Comparison between  VSCode and Spyder and PyCharm\r\n\r\n|                    |        VSCode       |      Spyder       |     PyCharm       |\r\n| ------------------ | :-----------------: | :---------------: | :---------------: |\r\n| Cost               |        Free         |       Free        |    Free/Paid      |\r\n| Boot time          |        Fast         |       Slow        |       Normal      |\r\n| Processing speed   |        Fast         |       Normal      |       Normal      |\r\n| REPL mode          | need to switch REPL terminal  | Available | Available |\r\n| Variable Explorer  | Available on Jupyter terminal | Available (Class variables are invisible.) | Available |\r\n\r\nSpyder is more suitable than VSCode for early debugging. On the other hand, VSCode is stress-free than Spyder for late debugging you do not need to check inter states of variables. PyCharm is generally well-balanced. My recommendation is PyCharm.\r\n\r\n### 2.5. Getting started\r\nThe pylib-sakata package can be imported as follows.\r\n```python\r\n>>> import pylib_sakata\r\n```\r\nThis package consists of six modules as follows.\r\n1. **ctrl**: to design controllers and filters\r\n1. **fft**: to analysis FFT\r\n1. **meas**: to treat measurement data\r\n1. **traj**: to generate target trajectory\r\n1. **plot**: to plot figures\r\n1. **init**: to initialize current variable\r\n\r\nThese modules can be imported individually as follows.\r\n```python\r\n>>> from pylib_sakata import ctrl\r\n>>> from pylib_sakata import fft\r\n>>> from pylib_sakata import meas\r\n>>> from pylib_sakata import traj\r\n>>> from pylib_sakata import plot\r\n>>> from pylib_sakata import init\r\n```\r\n\r\nExample codes are [HERE](https://github.com/Koichi-Sakata/pylib_sakata/tree/main/example).\r\n\r\n## 3. pylib_sakata.ctrl\r\n\r\n### 3.1. ZpkModel\r\n\r\nclass pylib_sakata.ctrl.**ZpkModel**(*z, p, k, dt=0*)\r\n\r\n- Parameters:\r\n  - z: zeros array of the LTI model\r\n  - p: poles array of the LTI model\r\n  - k: gain of the LTI model. Note: the gain is not system dc gain but coefficient of monic polynomials. This is different from the definition of dc gain in TransferFunction class.\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n\r\n**Examples**\r\n```python\r\n>>> ctrl.ZpkModel([-1., -2.], [-3., -4., -5.], 2.)\r\n\r\n      (s+1)(s+2)\r\n2 * ---------------\r\n    (s+3)(s+4)(s+5)\r\n```\r\nIf you set same zeros and poles, the pole-zero cancellation is automatically done as following. Unnecessary increase of the system order can be avoided.\r\n```python\r\n>>> ctrl.ZpkModel([0.1, 0.3, 0.4], [0.3, 0.4, 0.5], 2., 0.001)\r\nThe common pole-zeros of the zpk model have been deleted.\r\n\r\n    (z-0.1)\r\n2 * -------\r\n    (z-0.5)\r\n\r\ndt = 0.001\r\n```\r\n\r\n**Methods**\r\n- \\__**neg**__()\r\n\tNegate a zpk model.\r\n\r\n- \\__**add**__(*other*)\r\n\tAdd two zpk models (parallel connection).\r\n\r\n- \\__**radd**__(*other*)\r\n\tRight add two zpk models (parallel connection).\r\n\r\n- \\__**sub**__(*other*)\r\n\tSubtract two zpk models.\r\n\r\n- \\__**rsub**__(*other*)\r\n\tRight subtract two zpk models.\r\n\r\n- \\__**mul**__(*other*)\r\n\tMultiply two zpk models (serial connection).\r\n\r\n- \\__**rmul**__(*other*)\r\n\tRight multiply two zpk models (serial connection).\r\n\r\n- \\__**truediv**__(*other*)\r\n\tDivide two zpk models.\r\n\r\n- \\__**rtruediv**__(*other*)\r\n\tRight divide two zpk models.\r\n\r\n- \\__**pow**__(*other*)\r\n\tA zpk model to the power of x.\r\n\r\n- **feedback**(*other=1, sys='S'*)\r\n\tCalculate the feedback system that consist of two zpk model (P: self and C: other).\r\n\tsys: FB type (Optional), Default: 'S', Set in 'S': sensitivity function, 'T': complementary sensitivity function, 'SP': response from input disturbance to output\r\n\r\n### 3.2. tf\r\n\r\npylib_sakata.ctrl.**tf**(*num, den, dt=0*)\r\n\r\nThis function calls **tf** function in control library.\r\n\r\n- Parameters:\r\n  - num: polynomial coefficients of the numerator of the LTI model\r\n  - den: polynomial coefficients of the denominator of the LTI model\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n- Returns:\r\n  - out: instance of TransferFuntion class\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.tf([1., 2.], [3., 4., 5.]))\r\n\r\n     s + 2\r\n---------------\r\n3 s^2 + 4 s + 5\r\n```\r\n\r\n### 3.3. ss\r\n\r\npylib_sakata.ctrl.**ss**(*A, B, C, D, dt=0*)\r\n\r\nThis function calls **ss** function in control library.\r\n\r\n- Parameters:\r\n  - A, B, C, D: state space matrices\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n- Returns:\r\n  - out: instance of StateSpace class\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.ss(\"1. -2.; 3. -4.\", \"5.; 7.\", \"6. 8.\", \"9.\"))\r\nA = [[ 1. -2.]\r\n     [ 3. -4.]]\r\n\r\nB = [[5.]\r\n     [7.]]\r\n\r\nC = [[6. 8.]]\r\n\r\nD = [[9.]]\r\n```\r\n\r\n### 3.4. zpk\r\n\r\npylib_sakata.ctrl.**zpk**(*z, p, k, dt=0*)\r\n\r\n- Parameters:\r\n  - A, B, C, D: state space matrices\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n- Returns:\r\n  - out: instance of ZpkModel class\r\n\r\n**Examples**\r\n```python\r\n>>> ctrl.zpk([-1., -2.], [-3., -4., -5.], 2.)\r\n\r\n      (s+1)(s+2)\r\n2 * ---------------\r\n    (s+3)(s+4)(s+5)\r\n```\r\n\r\n### 3.5. tf2ss\r\n\r\npylib_sakata.ctrl.**tf2ss**(*tf, form='reachable'*)\r\n\r\n- Parameters:\r\n  - tf: instance of TransferFunction class\r\n  - form: canonical form (Optional), Default: reachable. You can select the canonical form in reachable, observable, and modal.\r\n- Returns:\r\n  - out: instance of StateSpace class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_tf = ctrl.tf([1., 2.], [3., 4., 5.])\r\n>>> print(ctrl.tf2ss(Sys_tf))\r\nA = [[-1.33333333 -1.66666667]\r\n     [ 1.          0.        ]]\r\n\r\nB = [[1.]\r\n     [0.]]\r\n\r\nC = [[0.33333333 0.66666667]]\r\n\r\nD = [[0.]]\r\n```\r\n\r\n### 3.6. tf2zpk\r\n\r\npylib_sakata.ctrl.**tf2zpk**(*tf*)\r\n\r\n- Parameters:\r\n  - tf: instance of TransferFunction class\r\n- Returns:\r\n  - out: instance of ZpkModel class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_tf = ctrl.tf([1., 2.], [3., 4., 5.])\r\n>>> ctrl.tf2zpk(Sys_tf)\r\n\r\n                       (s+2)\r\n0.3333 * ----------------------------------\r\n         (s+0.6667+1.106j)(s+0.6667-1.106j)\r\n```\r\n\r\n\r\n### 3.7. ss2tf\r\n\r\npylib_sakata.ctrl.**ss2tf**(*ss*)\r\n\r\n- Parameters:\r\n  - ss: instance of StateSpace class\r\n- Returns:\r\n  - out: instance of TransferFunction class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_ss = ctrl.ss(\"1. -2.; 3. -4.\", \"5.; 7.\", \"6. 8.\", \"9.\")\r\n>>> print(ctrl.ss2tf(Sys_ss))\r\n\r\n9 s^2 + 113 s + 118\r\n-------------------\r\n   s^2 + 3 s + 2\r\n```\r\n\r\n### 3.8. ss2zpk\r\n\r\npylib_sakata.ctrl.**ss2zpk**(*ss*)\r\n\r\n- Parameters:\r\n  - ss: instance of StateSpace class\r\n- Returns:\r\n  - out: instance of ZpkModel class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_ss = ctrl.ss(\"1. -2.; 3. -4.\", \"5.; 7.\", \"6. 8.\", \"9.\")\r\n>>> ctrl.ss2zpk(Sys_ss)\r\n\r\n    (s+11.41)(s+1.149)\r\n9 * ------------------\r\n        (s+2)(s+1)\r\n```\r\n\r\n### 3.9. zpk2tf\r\n\r\npylib_sakata.ctrl.**zpk2tf**(*zpk*)\r\n\r\n- Parameters:\r\n  - zpk: instance of ZpkModel class\r\n- Returns:\r\n  - out: instance of TransferFunction class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_zpk = ctrl.zpk([-1., -2.], [-3., -4., -5.], 2.)\r\n>>> print(ctrl.zpk2tf(Sys_zpk))\r\n\r\n    2 s^2 + 6 s + 4\r\n------------------------\r\ns^3 + 12 s^2 + 47 s + 60\r\n```\r\n\r\n### 3.10. zpk2ss\r\n\r\npylib_sakata.ctrl.**zpk2ss**(*zpk, form='reachable'*)\r\n\r\n- Parameters:\r\n  - zpk: instance of ZpkModel class\r\n  - form: canonical form (Optional), Default: reachable. You can select the canonical form in reachable, observable, and modal.\r\n- Returns:\r\n  - out: instance of StateSpace class\r\n\r\n**Examples**\r\n```python\r\n>>> Sys_zpk = ctrl.zpk([-1., -2.], [-3., -4., -5.], 2.)\r\n>>> print(ctrl.zpk2ss(Sys_zpk))\r\nA = [[-12. -47. -60.]\r\n     [  1.   0.   0.]\r\n     [  0.   1.   0.]]\r\n\r\nB = [[1.]\r\n     [0.]\r\n     [0.]]\r\n\r\nC = [[2. 6. 4.]]\r\n\r\nD = [[0.]]\r\n```\r\n\r\n### 3.11. sys2frd\r\n\r\npylib_sakata.ctrl.**sys2frd**(*sys, freq*)\r\n\r\n- Parameters:\r\n  - sys: LTI model (StateSpace or TransferFunction or ZpkModel)\r\n  - freq: 1-D array frequency data [Hz]\r\n- Returns:\r\n  - freqresp: instance of FreqResp class (Refer [4.1. FreqResp](#41-freqresp).)\r\n\r\n**Examples**\r\n```python\r\n>>> import numpy as np\r\n>>> freq = np.logspace(np.log10(1.), np.log10(1000.), 10000, base=10)\r\n>>> Sys_tf = ctrl.tf([1., 2.], [3., 4., 5.])\r\n>>> ctrl.sys2frd(Sys_tf, freq)\r\n\r\nfreq = array([   1.            1.00069108    1.00138264 ...  998.61926487  999.30939397\r\n 1000.        ])\r\nresp = array([-5.10821217e-03-5.65218353e-02j -5.10191815e-03-5.64779702e-02j\r\n -5.09563061e-03-5.64341455e-02j ... -5.64453060e-09-5.31250027e-05j\r\n -5.63673700e-09-5.30883142e-05j -5.62895416e-09-5.30516511e-05j])\r\n```\r\n```python\r\n>>> Sys_zpk = ctrl.zpk([-1., -2.], [-3., -4., -5.], 2.)\r\n>>> ctrl.sys2frd(Sys_zpk, freq)\r\n\r\nfreq = array([   1.            1.00069108    1.00138264 ...  998.61926487  999.30939397\r\n 1000.        ])\r\nresp = array([1.89109027e-01-0.06951671j 1.89033162e-01-0.06962001j\r\n 1.88957165e-01-0.0697232j  ... 4.57206511e-07-0.00031875j\r\n 4.56575231e-07-0.00031853j 4.55944822e-07-0.00031831j])\r\n```\r\n\r\n### 3.12. feedback\r\n\r\npylib_sakata.ctrl.**feedback**(*sysP, sysC, sys='S'*)\r\n\r\nThis function is for calculating the feedback system that consist of two LTI model (P: plant and C: controller).\r\n\r\n- Parameters:\r\n  - sysP: LTI model (StateSpace or TransferFunction or ZpkModel) of the plant\r\n  - sysC: LTI model (StateSpace or TransferFunction or ZpkModel) of the controller\r\n  - sys: FB type (Optional), Default: 'S', Set in 'S': sensitivity function, 'T': complementary sensitivity function, 'SP': response from input \r\n- Returns:\r\n  - out: LTI model (StateSpace or TransferFunction or ZpkModel) of the feedback system\r\n\r\n**Examples**\r\n```python\r\n>>> P_tf = ctrl.tf([1.], [1., 2., 0.])\r\n>>> C_tf = ctrl.tf([2., 4., 1.], [1., 2., 0.])\r\n>>> print(ctrl.feedback(P_tf, C_tf))\r\n\r\n     s^4 + 4 s^3 + 4 s^2\r\n-----------------------------\r\ns^4 + 4 s^3 + 6 s^2 + 4 s + 1\r\n```\r\n```python\r\n>>> P_zpk = ctrl.zpk([], [0., -2.])\r\n>>> C_zpk = ctrl.zpk([-1.7071067811865475, -0.29289321881345254], [0., -2.], 2.)\r\n>>> ctrl.feedback(P_zpk, C_zpk)\r\n\r\n                     s(s+2)(s+2)s\r\n1 * -----------------------------------------------\r\n    (s+1)(s+1-0.0001508j)(s+1+0.0001508j)(s+0.9998)\r\n```\r\n\r\n### 3.13. frdfeedback\r\n\r\npylib_sakata.ctrl.**frdfeedback**(*frdP, frdC, sys='S'*)\r\n\r\nThis function is for calculating the feedback system that consist of two freqresp (P: plant and C: controller).\r\n\r\n- Parameters:\r\n  - frdP: 1-D array complex data of the frequency response of the plant\r\n  - frdC: 1-D array complex data of the frequency response of the controller\r\n  - sys: FB type (Optional), Default: 'S', Set in 'S': sensitivity function, 'T': complementary sensitivity function, 'SP': response from input \r\n- Returns:\r\n  - out: 1-D array complex data of the frequency response of the feedback system\r\n\r\n\r\n**Examples**\r\n```python\r\n>>> import numpy as np\r\n>>> freq = np.logspace(np.log10(1.), np.log10(1000.), 10000, base=10)\r\n>>> P_tf = ctrl.tf([1.], [1., 2., 0.])\r\n>>> C_tf = ctrl.tf([2., 4., 1.], [1., 2., 0.])\r\n>>> P_frd = ctrl.tf2frd(P_tf, freq)\r\n>>> C_frd = ctrl.tf2frd(C_tf, freq)\r\n>>> ctrl.frdfeedback(P_frd, C_frd)\r\narray([1.04746047+1.56990662e-02j, 1.04739933+1.56671729e-02j,\r\n       1.04733826+1.56353434e-02j, ..., 1.00000005+1.61927479e-11j,\r\n       1.00000005+1.61592227e-11j, 1.00000005+1.61257668e-11j])\r\n```\r\n\r\n### 3.14. c2d\r\n\r\npylib_sakata.ctrl.**c2d**(*sysC, dt, method='tustin'*)\r\n\r\nThe matched method of **c2d** in control library does not supported for pure integrals and pure derivatives because of dc gain inf error. This function solved this problem.\r\n\r\n- Parameters:\r\n  - sysC: continuous time LTI model (StateSpace or TransferFunction or ZpkModel) of the plant\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value > 0.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method in 'tustin', 'matched', 'zoh', and etc.\r\n- Returns:\r\n  - out: discrete time LTI model (StateSpace or TransferFunction or ZpkModel) of the feedback system\r\n\r\n**Examples**\r\n```python\r\n>>> C_tf = ctrl.tf([1., 3., 2.], [1., 3., 0.])\r\n>>> print(ctrl.c2d_matched(C_tf, 0.001))\r\n\r\nz^2 - 1.997 z + 0.997\r\n---------------------\r\nz^2 - 1.997 z + 0.997\r\n\r\ndt = 0.001\r\n```\r\n```python\r\n>>> C_zpk = ctrl.zpk([-1., -2.,], [0., -3.,], 1.)\r\n>>> ctrl.c2d_matched(C_zpk, 0.001)\r\n\r\n    (z-0.999)(z-0.998)\r\n1 * ------------------\r\n      (z-1)(z-0.997)\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.15. pi\r\n\r\npylib_sakata.ctrl.**pi**(*freq, zeta, L, R, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a PI controller.\r\n$$\\begin{aligned}C_{PI}(s) &= K_P + \\frac{K_I}{s} = \\frac{b_1s+b_0}{s} \\\\ P(s) &= \\frac{1}{Ls+R}\\end{aligned}$$\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the pole pair of the feedback system with the PI controller\r\n  - zeta: damping of the pole pair of the feedback system with the PI controller\r\n  - L: inductance[H] of the plant\r\n  - R: resistance[$\\Omega$] of the plant\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the PI controller\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.pi(1000., 0.7, 0.1, 10.))\r\n\r\n869.6 s + 3.948e+06\r\n-------------------\r\n         s\r\n```\r\n```python\r\n>>> print(ctrl.pi(1000., 0.7, 0.1, 10., 0.001))\r\n\r\n2844 z + 1104\r\n-------------\r\n    z - 1\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.16. pd\r\n\r\npylib_sakata.ctrl.**pd**(*freq1, freq2, zeta2, M, C, K, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a PD controller.\r\n$$\\begin{aligned}C_{PID}(s) &= K_P + \\frac{K_D s}{\\tau_D s+1} = \\frac{b_1s+b_0}{s+a_0}\\\\ P(s) &= \\frac{1}{Ms^2+Cs+K}\\end{aligned}$$\r\n\r\n- Parameters:\r\n  - freq1: frequency[Hz] of the first pole of the feedback system with the PD controller\r\n  - freq2: frequency[Hz] of the second pole pair of the feedback system with the PD controller\r\n  - zeta2: damping of the second pole pair of the feedback system with the PD controller\r\n  - M: mass[kg] of the plant\r\n  - C: viscosity[N/(m/s)] of the plant\r\n  - K: stiffness[N/m] of the plant\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the PD controller\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.pd(10., 10., 0.7, 2., 10., 0.))\r\n\r\n1.749e+04 s + 4.961e+05\r\n-----------------------\r\n       s + 145.8\r\n```\r\n```python\r\n>>> print(ctrl.pd(10., 10., 0.7, 2., 10., 0., 0.001))\r\n\r\n1.653e+04 z - 1.607e+04\r\n-----------------------\r\n      z - 0.8641\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.17. pid\r\n\r\npylib_sakata.ctrl.**pid**(*freq1, zeta1, freq2, zeta2, M, C, K, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a PID controller.\r\n$$\\begin{aligned}\r\nC_{PID}(s) &= K_P + \\frac{K_I}{s} + \\frac{K_D s}{\\tau_D s+1} = \\frac{b_2s^2+b_1s+b_0}{s^2+a_1s} \\\\ P(s) &= \\frac{1}{Ms^2+Cs+K}\\end{aligned}$$\r\n\r\n- Parameters:\r\n  - freq1: frequency[Hz] of the first pole pair of the feedback system with the PID controller\r\n  - zeta1: damping of the first pole pair of the feedback system with the PID controller\r\n  - freq2: frequency[Hz] of the second pole pair of the feedback system with the PID controller\r\n  - zeta2: damping of the second pole pair of the feedback system with the PID controller\r\n  - M: mass[kg] of the plant\r\n  - C: viscosity[N/(m/s)] of the plant\r\n  - K: stiffness[N/m] of the plant\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the PID controller\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.pid(10., 1., 10., 0.7, 2., 10., 0.))\r\n\r\n3.581e+04 s^2 + 1.687e+06 s + 3.117e+07\r\n---------------------------------------\r\n             s^2 + 208.6 s\r\n```\r\n```python\r\n>>> print(ctrl.pid(10., 1., 10., 0.7, 2., 10., 0., 0.001))\r\n\r\n3.32e+04 z^2 - 6.485e+04 z + 3.167e+04\r\n--------------------------------------\r\n        z^2 - 1.811 z + 0.8111\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.18. pl1st\r\n\r\npylib_sakata.ctrl.**pl1st**(*freq1, freq2, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a first order phase lead filter.\r\n$$F_{PL}(s) = \\frac{f_2}{f_1} * \\frac{s+2\\pi f_1}{s+2\\pi f_2}$$\r\n\r\n- Parameters:\r\n  - freq1: frequency[Hz] of numerator of the phase lead filter\r\n  - freq2: frequency[Hz] of denominator of the phase lead filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the phase lead filter\r\n\r\n**Examples**\r\n```python\r\n>>> ctrl.tf2zpk(ctrl.pl1st(50., 100.))\r\n\r\n    (s+314.2)\r\n2 * ---------\r\n    (s+628.3)\r\n```\r\n```python\r\n>>> ctrl.tf2zpk(ctrl.pl1st(50., 100., 0.001))\r\n\r\n        (z-0.7285)\r\n1.761 * ----------\r\n        (z-0.5219)\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.19. pl2nd\r\n\r\npylib_sakata.ctrl.**pl2nd**(*freq1, zeta1, freq2, zeta2, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a second order phase lead filter.\r\n$$F_{PL^2}(s) = \\left( \\frac{f_2}{f_1} \\right)^2 * \\frac{s^2+2\\zeta_1 (2\\pi f_1)s+(2\\pi f_1)^2}{s^2+2\\zeta_2 (2\\pi f_2)s+(2\\pi f_2)^2}$$\r\n\r\n- Parameters:\r\n  - freq1: frequency[Hz] of numerator of the phase lead filter\r\n  - zeta1: damping of numerator of the phase lead filter\r\n  - freq2: frequency[Hz] of denominator of the phase lead filter\r\n  - zeta2: damping of denominator of the phase lead filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the phase lead filter\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.pl2nd(50., 0.7, 100., 0.7))\r\n\r\n2 s^2 + 879.6 s + 1.974e+05\r\n---------------------------\r\n s^2 + 879.6 s + 3.948e+05\r\n```\r\n```python\r\n>>> print(ctrl.pl2nd(50., 0.7, 100., 0.7, 0.001))\r\n\r\n1.618 z^2 - 2.536 z + 1.046\r\n---------------------------\r\n  z^2 - 1.172 z + 0.4283\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.20. lpf1st\r\n\r\npylib_sakata.ctrl.**lpf1st**(*freq, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a first order low pass filter.\r\n$$F_{LP}(s) = \\frac{2\\pi f}{s+2\\pi f}$$\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the low pass filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the low pass filter\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.lpf1st(100.))\r\n\r\n  628.3\r\n---------\r\ns + 628.3\r\n```\r\n```python\r\n>>> print(ctrl.lpf1st(100., 0.001))\r\n\r\n0.2391 z + 0.2391\r\n-----------------\r\n   z - 0.5219\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.21. lpf2nd\r\n\r\npylib_sakata.ctrl.**lpf2nd**(*freq, zeta, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a second order low pass filter.\r\n$$F_{LP^2}(s) = \\frac{(2\\pi f)^2}{s^2+2\\zeta (2\\pi f)s+(2\\pi f)^2}$$\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the low pass filter\r\n  - zeta1: damping of the low pass filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the low pass filter\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.lpf2nd(100., 0.7))\r\n\r\n        3.948e+05\r\n-------------------------\r\ns^2 + 879.6 s + 3.948e+05\r\n```\r\n```python\r\n>>> print(ctrl.lpf2nd(100., 0.7, 0.001))\r\n\r\n0.06415 z^2 + 0.1283 z + 0.06415\r\n--------------------------------\r\n     z^2 - 1.172 z + 0.4283\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.22. hpf1st\r\n\r\npylib_sakata.ctrl.**hpf1st**(*freq, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a first order high pass filter.\r\n$$F_{HP}(s) = 1 - F_{LP}(s) = \\frac{s}{s+2\\pi f}$$\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the high pass filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the high pass filter\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.hpf1st(100.))\r\n\r\n    s\r\n---------\r\ns + 628.3\r\n```\r\n```python\r\n>>> print(ctrl.hpf1st(100., 0.001))\r\n\r\n0.7609 z - 0.7609\r\n-----------------\r\n   z - 0.5219\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.23. hpf2nd\r\n\r\npylib_sakata.ctrl.**hpf2nd**(*freq, zeta, dt=None, method='tustin'*)\r\n\r\nThis function is for design of a second order high pass filter.\r\n$$F_{HP^2}(s) = 1 - F_{LP^2}(s) = \\frac{s^2+2\\zeta (2\\pi f)s}{s^2+2\\zeta (2\\pi f)s+(2\\pi f)^2}$$\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the high pass filter\r\n  - zeta1: damping of the high pass filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: instance of TransferFunction class of the high pass filter\r\n\r\n**Examples**\r\n```python\r\n>>> print(ctrl.hpf2nd(100., 0.7))\r\n\r\n      s^2 + 879.6 s\r\n-------------------------\r\ns^2 + 879.6 s + 3.948e+05\r\n```\r\n```python\r\n>>> print(ctrl.hpf2nd(100., 0.7, 0.001))\r\n\r\n0.9358 z^2 - 1.3 z + 0.3641\r\n---------------------------\r\n  z^2 - 1.172 z + 0.4283\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.24. nf\r\n\r\npylib_sakata.ctrl.**nf**(*freq, zeta, depth, dt=None, method='matched'*)\r\n\r\nThis function is for design of notch filters.\r\n$$F_{notch}(s) = \\frac{s^2+2d\\zeta (2\\pi f)s+(2\\pi f)^2}{s^2+2\\zeta (2\\pi f)s+(2\\pi f)^2}$$\r\n\r\n- Parameters:\r\n  - freq: array of frequency[Hz] of the notch filters\r\n  - zeta: array of damping of the notch filters\r\n  - depth: array of depth of the notch filters (0 < depth < 1)\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'matched', set a method if dt > 0\r\n- Returns:\r\n  - out: array of instance of TransferFunction class of the notch filters\r\n\r\n**Examples**\r\n```python\r\n>>> ctrl.nf([100., 200., 300.], [0.02, 0.02, 0.02], [0.01, 0.01, 0.01])\r\narray([TransferFunction(array([1.00000000e+00, 2.51327412e-01, 3.94784176e+05]), array([1.00000000e+00, 2.51327412e+01, 3.94784176e+05])),\r\n       TransferFunction(array([1.00000000e+00, 5.02654825e-01, 1.57913670e+06]), array([1.00000000e+00, 5.02654825e+01, 1.57913670e+06])),\r\n       TransferFunction(array([1.00000000e+00, 7.53982237e-01, 3.55305758e+06]), array([1.00000000e+00, 7.53982237e+01, 3.55305758e+06]))],\r\n      dtype=object)\r\n```\r\n```python\r\n>>> ctrl.nf([100., 200., 300.], [0.02, 0.02, 0.02], [0.01, 0.01, 0.01], 0.001)\r\narray([TransferFunction(array([ 0.9876627 , -1.59787102,  0.9874145 ]), array([ 1.        , -1.59797428,  0.97518046]), 0.001),\r\n       TransferFunction(array([ 0.97553399, -0.6027617 ,  0.97504375]), array([ 1.        , -0.60316088,  0.95097692]), 0.001),\r\n       TransferFunction(array([0.96362486, 0.59532837, 0.96289858]), array([1.        , 0.59447771, 0.92737411]), 0.001)],\r\n      dtype=object)\r\n```\r\n\r\n### 3.25. pf\r\n\r\npylib_sakata.ctrl.**pf**(*freq, zeta, k, phi, dt=None, method='tustin'*)\r\n\r\nThis function is for design of peak filters ([resonant filters](https://ieeexplore.ieee.org/document/4291569)).\r\n$$F_{peak}(s) = \\frac{k(s^2-\\phi s)}{s^2+2\\zeta (2\\pi f)s+(2\\pi f)^2}$$\r\n\r\n- Parameters:\r\n  - freq: array of frequency[Hz] of the peak filters\r\n  - zeta: array of damping of the peak filters\r\n  - k: array of peak width of the peak filters\r\n  - phi: array of phase lead of the peak filter\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: array of instance of TransferFunction class of the peak filters\r\n\r\n**Examples**\r\n```python\r\n>>> ctrl.pf([2., 3., 5.], [0.001, 0.001, 0.001], [-0.00025695, -0.00049616, 0.0003898], [860.21053991, 633.22924516, -1090.49879949])\r\n>>> ctrl.pf([2., 3., 5.], [0.001, 0.001, 0.001], [-0.00025695, -0.00049616, 0.0003898], [860.21053991, 633.22924516, -1090.49879949])\r\narray([TransferFunction(array([-0.00025695,  0.2210311 ,  0.        ]), array([1.00000000e+00, 2.51327412e-02, 1.57913670e+02])),\r\n       TransferFunction(array([-0.00049616,  0.31418302,  0.        ]), array([1.00000000e+00, 3.76991118e-02, 3.55305758e+02])),\r\n       TransferFunction(array([3.89800000e-04, 4.25076432e-01, 0.00000000e+00]), array([1.00000000e+00, 6.28318531e-02, 9.86960440e+02]))],\r\n      dtype=object)\r\n```\r\n```python\r\n>>> ctrl.pf([2., 3., 5.], [0.001, 0.001, 0.001], [-0.00025695, -0.00049616, 0.0003898], [860.21053991, 633.22924516, -1090.49879949], 0.001)\r\narray([TransferFunction(array([-0.00014643,  0.00051387, -0.00036745]), array([ 1.        , -1.99981696,  0.99997487]), 0.001),\r\n       TransferFunction(array([-0.00033903,  0.00099221, -0.00065318]), array([ 1.        , -1.99960704,  0.9999623 ]), 0.001),\r\n       TransferFunction(array([ 0.00060217, -0.00077938,  0.00017721]), array([ 1.        , -1.9989505 ,  0.99993719]), 0.001)],\r\n      dtype=object)\r\n```\r\n\r\n### 3.26. pfoptparam\r\npylib_sakata.ctrl.**pfoptparam**(freq, zeta, depth, sysT)\r\n\r\nThis function is for getting parameters of optimized peak filters ([resonant filters](https://ieeexplore.ieee.org/document/4291569)).\r\n\r\n- Parameters:\r\n  - freq: array of frequency[Hz] of the peak filters\r\n  - zeta: array of damping of the peak filters\r\n  - depth: array of depth of the peak filters (0 < depth < 1)\r\n  - sysT: LTI model (StateSpace or TransferFunction or ZpkModel or FreqResp) of complementary sensitivity function of the previous feedback system\r\n- Returns:\r\n  - freq: array of frequency[Hz] of the peak filters\r\n  - zeta: array of damping of the peak filters\r\n  - k: array of peak width of the peak filters\r\n  - phi: array of phase lead of the peak filter\r\n\r\n**Examples**\r\n```python\r\n>>> Ps = ctrl.tf([1.], [2., 10., 0.])\r\n>>> Cs = ctrl.pid(10., 1., 10., 0.7, 2., 10., 0.)\r\n>>> ctrl.pfoptparam([2., 3., 5.], [0.001, 0.001, 0.001], [0.1, 0.1, 0.1], ctrl.feedback(Ps, Cs, sys='T'))\r\nThe common pole-zeros of the zpk model have been deleted.\r\n([2.0, 3.0, 5.0], [0.001, 0.001, 0.001], array([-0.00025695, -0.00049616,  0.0003898 ]), array([  860.21053991,   633.22924516, -1090.49879949]))\r\n```\r\n\r\n### 3.27. pfopt\r\n\r\npylib_sakata.ctrl.**pfopt**(*freq, zeta, depth, sysT, dt=None, method='tustin'*)\r\n\r\nThis function is for design of optimized peak filters ([resonant filters](https://ieeexplore.ieee.org/document/4291569)).\r\n\r\n- Parameters:\r\n  - freq: array of frequency[Hz] of the peak filters\r\n  - zeta: array of damping of the peak filters\r\n  - depth: array of depth of the peak filters (0 < depth < 1)\r\n  - sysT: LTI model (StateSpace or TransferFunction or ZpkModel or FreqResp) of complementary sensitivity function of the previous feedback system\r\n  - dt: sampling time of the LTI model (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n  - method: discretized method (Optional), Default: 'tustin', set a method if dt > 0\r\n- Returns:\r\n  - out: array of instance of TransferFunction class of the peak filters\r\n\r\n**Examples**\r\n```python\r\n>>> Ps = ctrl.tf([1.], [2., 10., 0.])\r\n>>> Cs = ctrl.pid(10., 1., 10., 0.7, 2., 10., 0.)\r\n>>> ctrl.pfopt([2., 3., 5.], [0.001, 0.001, 0.001], [0.1, 0.1, 0.1], ctrl.feedback(Ps, Cs, sys='T'))\r\nThe common pole-zeros of the zpk model have been deleted.\r\narray([TransferFunction(array([0.00486434, 0.24323591, 0.        ]), array([1.00000000e+00, 2.51327412e-02, 1.57913670e+02])),\r\n       TransferFunction(array([0.00723091, 0.35823306, 0.        ]), array([1.00000000e+00, 3.76991118e-02, 3.55305758e+02])),\r\n       TransferFunction(array([0.01199547, 0.56160871, 0.        ]), array([1.00000000e+00, 6.28318531e-02, 9.86960440e+02]))],\r\n      dtype=object)\r\n```\r\n```python\r\n>>> ctrl.pfopt([2., 3., 5.], [0.001, 0.001, 0.001], [0.1, 0.1, 0.1], ctrl.feedback(Ps, Cs, sys='T'), 0.001)\r\nThe common pole-zeros of the zpk model have been deleted.\r\narray([TransferFunction(array([ 0.0049857 , -0.00972818,  0.00474248]), array([ 1.        , -1.99981696,  0.99997487]), 0.001),\r\n       TransferFunction(array([ 0.00740923, -0.01446026,  0.00705103]), array([ 1.        , -1.99960704,  0.9999623 ]), 0.001),\r\n       TransferFunction(array([ 0.01227286, -0.02398427,  0.01171141]), array([ 1.        , -1.9989505 ,  0.99993719]), 0.001)],\r\n      dtype=object)\r\n```\r\n\r\n### 3.28. dob\r\npylib_sakata.ctrl.**dob**(*freq, zeta, M, C, K, dt, nd = 0*)\r\n\r\nThis function is for design of a discrete-time disturbance observer (DOB).\r\n$$\\hat{d} = -z^{-n_d} Q[z] u + Q[z] P^{-1}[z] y$$\r\n\r\nHere, it is defined that disturbance $d$ is injected in the system as plus sign.\r\n\r\n- Parameters:\r\n  - freq: frequency[Hz] of the pole pair of the DOB\r\n  - zeta: damping of the pole pair of the DOB\r\n  - M: mass[kg] of the plant\r\n  - C: viscosity[N/(m/s)] of the plant\r\n  - K: stiffness[N/m] of the plant\r\n  - dt: sampling time of the system\r\n  - nd: sampling number of the dead-time of the system\r\n- Returns:\r\n  - DOBu: $z^{-n_d} Q[z]$\r\n  - DOBy: $Q[z] P^{-1}[z]$\r\n\r\n**Examples**\r\n```python\r\n>>> DOBu, DOBy = ctrl.dob(5., 0.7, 1., 10., 0., 0.001, 1)\r\n>>> print(DOBu)\r\n\r\n 0.0004836 z + 0.0004819\r\n-------------------------\r\nz^3 - 1.956 z^2 + 0.957 z\r\n\r\ndt = 0.001\r\n\r\n>>> print(DOBy)\r\n\r\n970.3 z^2 - 1931 z + 960.7\r\n--------------------------\r\n  z^2 - 1.956 z + 0.957\r\n\r\ndt = 0.001\r\n```\r\n\r\n### 3.29. zpetc\r\npylib_sakata.ctrl.**zpetc**(*Pz, dt, zerothr=0.99*)\r\n\r\nThis function is for design of a zero phase error tracking controller ([ZPETC](https://engineering.purdue.edu/ME576/ZPETC_Tomizuka.pdf)).\r\n\r\n- Parameters:\r\n  - Pz: instance of TransferFunction class of discrete-time LTI system\r\n  - dt: sampling time of the system\r\n  - zerothr: threshold to recognize unstable zeros (Optional), Default: 0.99\r\n- Returns:\r\n  - Czpetc: instance of TransferFunction class of ZPETC\r\n  - Nzpetc: number of forward samples\r\n\r\n```python\r\n>>> Ps = ctrl.tf([1.],[1., 10., 0.])\r\n>>> Pz = ctrl.c2d(Ps, 0.001)\r\n>>> print(Pz)\r\n\r\n2.488e-07 z^2 + 4.975e-07 z + 2.488e-07\r\n---------------------------------------\r\n          z^2 - 1.99 z + 0.99\r\n\r\ndt = 0.001\r\n\r\n>>> Czpetc, Nzpetc = ctrl.zpetc(Pz)\r\nThe common pole-zeros of the zpk model have been deleted.\r\n>>> print(Czpetc)\r\n\r\n2.512e+05 z^4 + 2500 z^3 - 5e+05 z^2 - 2500 z + 2.487e+05\r\n---------------------------------------------------------\r\n                           z^4\r\n\r\ndt = 0.001\r\n\r\n>>> Nzpetc\r\n2\r\n```\r\n\r\n### 3.30. filt\r\npylib_sakata.ctrl.**filt**(*num, den, dt*)\r\n\r\nThis function is to create transfer functions as rational expressions in $z^{-1}$ and to order the numerator and denominator terms in ascending powers of $z^{-1}$.\r\n\r\n- Parameters:\r\n  - num: polynomial coefficients of the numerator of the discrete-time LTI model\r\n  - den: polynomial coefficients of the denominator of the discrete-time LTI model\r\n  - dt: sampling time of the discrete-time LTI model\r\n- Returns:\r\n  - out: instance of TransferFunction class of ZPETC\r\n\r\n### 3.31. minreal\r\npylib_sakata.ctrl.**minreal**(*sys*)\r\n\r\nThis function is to delete the common pole-zeros of the system.\r\n\r\n- Parameters:\r\n  - sys: LTI model (StateSpace or TransferFunction or ZpkModel)\r\n- Returns:\r\n  - out: LTI model whose the common pole-zeros were deleted\r\n\r\n### 3.32. makeprmset\r\npylib_sakata.ctrl.**makeprmset**(*path='.'*)\r\n\r\nThis function is to create Cpp and header files of controller parameter sets\r\n\r\n- Parameters:\r\n  - path: path to create Cpp and header files of controller parameter sets\r\n- Returns:\r\n  - None\r\n  \r\n### 3.33. defprmset\r\npylib_sakata.ctrl.**defprmset**(*tfz, prmSetName, path='.', mode='a'*)\r\n\r\n- Parameters:\r\n  - tfz: discrete time TransferFunction model\r\n  - prmSetName: parameter set name of the following struct in Cpp\r\n  - path: path to create Cpp and header files of controller parameter sets\r\n  - mode: mode to open Cpp and header files\r\n- Returns:\r\n  - None\r\n\r\n```cpp\r\ntypedef struct {\r\n\tdouble\tdA[2];\r\n\tdouble\tdB[2];\r\n\tdouble\tdInPre;\r\n\tdouble\tdOutPre;\r\n} TF1_INF;\t\t\t\t\t\t// 1st order TF information\r\n\r\ntypedef struct {\r\n\tdouble\tdA[3];\r\n\tdouble\tdB[3];\r\n\tdouble\tdInPre[2];\r\n\tdouble\tdOutPre[2];\r\n} TF2_INF;\t\t\t\t\t\t// 2nd order TF information\r\n\r\ntypedef struct {\r\n\tdouble\tdA[4];\r\n\tdouble\tdB[4];\r\n\tdouble\tdInPre[3];\r\n\tdouble\tdOutPre[3];\r\n} TF3_INF;\t\t\t\t\t\t// 3rd order TF information\r\n```\r\n\r\n## 4. pylib_sakata.fft\r\n\r\n### 4.1. FreqResp\r\n\r\nclass pylib_sakata.fft.**FreqResp**(*freq, resp, dt=0*)\r\n\r\n- Parameters:\r\n  - freq: 1-D array frequency data [Hz]\r\n  - resp: 1-D array frequency response data [complex data]\r\n  - dt: sampling time (Optional), Default: 0, set the value >= 0. If dt = 0, the system is continuous time system.\r\n\r\n**Examples**\r\nRefer examples of [3.11. sys2frd](#311-sys2frd).\r\n\r\n**Methods**\r\n- \\__**neg**__()\r\n\tNegate a FRD.\r\n\r\n- \\__**add**__(*other*)\r\n\tAdd two FRDs (parallel connection).\r\n\r\n- \\__**radd**__(*other*)\r\n\tRight add two FRDs (parallel connection).\r\n\r\n- \\__**sub**__(*other*)\r\n\tSubtract two FRDs.\r\n\r\n- \\__**rsub**__(*other*)\r\n\tRight subtract two FRDs.\r\n\r\n- \\__**mul**__(*other*)\r\n\tMultiply two FRDs (serial connection).\r\n\r\n- \\__**rmul**__(*other*)\r\n\tRight multiply two FRDs (serial connection).\r\n\r\n- \\__**truediv**__(*other*)\r\n\tDivide two FRDs.\r\n\r\n- \\__**rtruediv**__(*other*)\r\n\tRight divide two FRDs.\r\n\r\n- \\__**pow**__(*other*)\r\n\tA FRD to the power of x.\r\n\r\n### 4.2. fft\r\n\r\npylib_sakata.fft.**fft**(*data, dt*)\r\n\r\nThis function is for calculating FFT from 1-D array data.\r\n\r\n- Parameters:\r\n  - data: 1-D array time response data\r\n  - dt: sampling time of the time response data\r\n- Returns:\r\n  - freq_data: 1-D array frequency data [Hz]\r\n  - fft_data: 1-D array FFT data\r\n\r\n**Examples**\r\n```python\r\nimport numpy as np\r\n>>> dt = 0.001\r\n>>> t = np.linspace(0.0, 10., int(10./dt))\r\n>>> x = np.sin(2*np.pi*10.0*t) + np.sin(2*np.pi*50.0*t)\r\n>>> fft.fft(x, dt)\r\n(array([0.00000000e+00, 1.00010001e-01, 2.00020002e-01, ...,\r\n       9.99799980e+02, 9.99899990e+02, 1.00000000e+03]), array([3.93463040e-17, 2.39600781e-06, 4.79322523e-06, ...,\r\n       7.19286425e-06, 4.79322523e-06, 2.39600781e-06]))\r\n```\r\n\r\n### 4.3. fft_ave\r\n\r\npylib_sakata.fft.**fft_ave**(*data, dt, windivnum=4, overlap=0.5*)\r\n\r\nThis function is for calculating averaged FFT from 1-D array data.\r\n\r\n- Parameters:\r\n  - data: 1-D array time response data\r\n  - dt: sampling time of the time response data\r\n  - windivnum: number of windows to divide the time response data\r\n  - overlap: overlap ratio divided time response data (0 <= overlap < 1)\r\n- Returns:\r\n  - freq_data: 1-D array frequency data [Hz]\r\n  - fft_data: 1-D array FFT data\r\n\r\n**Examples**\r\n```python\r\nimport numpy as np\r\n>>> dt = 0.001\r\n>>> t = np.linspace(0.0, 10., int(10./dt))\r\n>>> x = np.sin(2*np.pi*10.0*t) + np.sin(2*np.pi*50.0*t)\r\n>>> fft.fft_ave(x, dt, 4, 0.5)\r\n(array([0.00000000e+00, 4.88519785e-01, 9.77039570e-01, ...,\r\n       9.99022960e+02, 9.99511480e+02, 1.00000000e+03]), array([5.33388114e-05, 5.46444944e-05, 5.85999322e-05, ...,\r\n       6.53498409e-05, 5.85999322e-05, 5.46444944e-05]))\r\n```\r\n\r\n### 4.4. tfestimate\r\n\r\npylib_sakata.fft.**tfestimate**(*x, y, freq, dt, windivnum=4, overlap=0.5*)\r\n\r\nThis function is for system identification from input and output time response data.\r\n\r\n- Parameters:\r\n  - x: 1-D array time response data of input\r\n  - y: 1-D array time response data of output\r\n  - freq: 1-D array frequency data [Hz]\r\n  - dt: sampling time of the time response data\r\n  - windivnum: number of windows to divide the time response data\r\n  - overlap: overlap ratio divided time response data (0 <= overlap < 1)\r\n- Returns:\r\n  - freqresp: instance of FreqResp class\r\n  - coh: 1-D array coherence data\r\n\r\n**Examples**\r\n```python\r\n>>> import numpy as np\r\n>>> from scipy import signal\r\n>>> from control import matlab\r\n>>> P_tf = ctrl.tf([1.], [1., 2., 0.])\r\n>>> C_tf = ctrl.tf([2., 4., 1.], [1., 2., 0.])\r\n>>> dt = 0.001\r\n>>> t = np.linspace(0.0, 10., int(10./dt))\r\n>>> d = signal.chirp(t, f0=0.1, f1=500., t1=50., method='logarithmic', phi=-90.)\r\n>>> u, tout, xout = matlab.lsim(ctrl.feedback(P_tf, C_tf), d, t)\r\n>>> y, tout, xout = matlab.lsim(ctrl.feedback(P_tf, C_tf, 'SP'), d, t)\r\nThe common pole-zeros of the zpk model have been deleted.\r\n>>> freq = np.logspace(np.log10(1.), np.log10(500.), 10000, base=10)\r\n>>> fft.tfestimate(u, y, freq, dt)\r\n(array([-0.11586071-1.49076948e-01j, -0.11590257-1.49078279e-01j,\r\n       -0.11594446-1.49079611e-01j, ..., -0.13155661-1.45847229e-01j,\r\n       -0.14201211-1.03211830e-01j, -0.15745492-1.88460358e-14j]), array([0.77271576, 0.77244166, 0.7721674 , ..., 0.23080322, 0.32843388,\r\n       0.43848208]))\r\n```\r\n\r\n### 4.5. frdresize\r\n\r\npylib_sakata.fft.**frdresize**(*freqresp, freq*)\r\n\r\nThis function is for resizing a frequency response data.\r\n\r\n- Parameters:\r\n  - freqresp: instance of FreqResp class\r\n  - freq: new 1-D array frequency data [Hz] for resize\r\n- Returns:\r\n  - freqresp: resized instance of FreqResp class based on new frequency data array\r\n\r\n**Examples**\r\n```python\r\n>>> import numpy as np\r\n>>> freq = np.logspace(np.log10(1.), np.log10(1000.), 100, base=10)\r\n>>> Sys_tf = ctrl.tf([1., 2.], [3., 4., 5.])\r\n>>> freqresp = ctrl.sys2frd(Sys_tf, freq)\r\n>>> freq_resize = np.logspace(np.log10(1.), np.log10(1000.), 10000, base=10)\r\n>>> fft.frdresize(freqresp, freq_resize)\r\n\r\nfreq = array([   1.            1.00069108    1.00138264 ...  998.61926487  999.30939397\r\n 1000.        ])\r\nresp = array([-5.10821217e-03-5.65218353e-02j -5.10244172e-03-5.64813436e-02j\r\n -5.09666728e-03-5.64408239e-02j ... -5.64622394e-09-5.31301950e-05j\r\n -5.63759203e-09-5.30909366e-05j -5.62895416e-09-5.30516511e-05j])\r\n```\r\n\r\n### 4.6. frdsim\r\n\r\npylib_sakata.fft.**frdsim**(*freqresp, x, dt*)\r\n\r\nThis function is for simulation steady time response data when a time-domain data is input to a system written by frequency response data.\r\n$$y(t) = \\text{ifft}(\\text{FreqResp}(\\omega)\\times\\text{fft}(u(t)))$$\r\n\r\n- Parameters:\r\n  - freqresp: instance of FreqResp class\r\n  - x: 1-D array time response data of input\r\n  - dt: sampling time of the time response data\r\n- Returns:\r\n  - t: 1-D array time data [s]\r\n  - y: 1-D array time response data of output\r\n\r\n**Examples**\r\n```python\r\n>>> import numpy as np\r\n>>> freq = np.logspace(np.log10(1.), np.log10(1000.), 100, base=10)\r\n>>> Sys_tf = ctrl.tf([1., 2.], [3., 4., 5.])\r\n>>> freqresp = ctrl.sys2frd(Sys_tf, freq)\r\n>>> dt = 0.001\r\n>>> t = np.linspace(0.0, 10., int(10./dt))\r\n>>> x = np.sin(2*np.pi*10.0*t) + np.sin(2*np.pi*50.0*t)\r\n>>> fft.frdsim(freqresp, x, dt)\r\n(array([0.000e+00, 1.000e-03, 2.000e-03, ..., 9.996e+00, 9.997e+00,\r\n       9.998e+00]), array([-0.00635301, -0.00630568, -0.00612106, ..., -0.00610225,\r\n       -0.0062943 , -0.00634922]))\r\n```\r\n\r\n## 5. pylib_sakta.meas\r\n\r\n### 5.1. MeasData\r\n\r\nclass pylib_sakata.meas.**MeasData**(*time, list, value, time, dt*)\r\n\r\n- Parameters:\r\n  - dataList: array of data list (*str*)\r\n  - value: array of data value\r\n  - time: 1-D array time data [s]\r\n  - dt: sampling time of the time response data\r\n\r\n### 5.2. getcsvdata\r\n\r\npylib_sakata.meas.**getcsvdata**(*filePath*)\r\n\r\nThis function is for getting measurement data from a csv file.\r\n\r\n- Parameters:\r\n  - filePath: csv file path of measurement file\r\n- Returns:\r\n  - instance of MeasData class\r\n\r\n**Examples**\r\n```python\r\nmeasdata = meas.getcsvdata('data\\001-inject.csv')\r\n```\r\n\r\n### 5.3. gettxtdata\r\n\r\npylib_sakata.meas.**gettxtdata**(*filePath*)\r\n\r\nThis function is for getting measurement data from a txt file.\r\n\r\n- Parameters:\r\n  - filePath: txt file path of measurement file\r\n- Returns:\r\n  - instance of MeasData class\r\n\r\n**Examples**\r\n```python\r\nmeasdata = meas.gettxtdata('data\\001-inject.txt')\r\n```\r\n\r\n### 5.4. getmatdata\r\n\r\npylib_sakata.meas.**getmatdata**(*filePath*)\r\n\r\nThis function is for getting measurement data from a mat file.\r\n\r\n- Parameters:\r\n  - filePath: mat file path of measurement file\r\n- Returns:\r\n  - instance of MeasData class\r\n\r\n**Examples**\r\n```python\r\nmeasdata = meas.getmatdata('data\\001-inject.mat')\r\n```\r\n\r\n### 5.5. getdata\r\n\r\npylib_sakata.meas.**getdata**(*filePath*)\r\n\r\nThis function is for getting measurement data from a file.\r\n\r\n- Parameters:\r\n  - filePath: file path of measurement file (.csv, .txt, and .mat are supported.)\r\n- Returns:\r\n  - instance of MeasData class\r\n\r\n**Examples**\r\n```python\r\nmeasdata = meas.getmatdata('data\\001-inject.csv')\r\n```\r\n```python\r\nmeasdata = meas.getmatdata('data\\001-inject.txt')\r\n```\r\n```python\r\nmeasdata = meas.getmatdata('data\\001-inject.mat')\r\n```\r\n\r\n### 5.6. getdataindex\r\n\r\npylib_sakata.meas.**getdataindex**(*measdata, dataName*)\r\n\r\n- Parameters:\r\n  - measdata: instance of MeasData class\r\n  - dataName: data name\r\n- Returns:\r\n  - index: index of dataName\r\n\r\n**Examples**\r\n```python\r\nindex = meas.getdataindex(measdata, 'ServoOut')\r\n```\r\n\r\n### 5.7. measdata2frd\r\n\r\npylib_sakata.meas.**measdata2frd**(*filePath, inputName, outputName, flagName, freq, inputGain=1.0, outputGain=1.0, windivnum=4, overlap=0.5*)\r\n\r\nThis function is for system identification from input and output time response data of measurement file.\r\n\r\n- Parameters:\r\n  - filePath: file path of measurement file (.csv, .txt, and .mat are supported.)\r\n  - inputName: input data name in the measurement file\r\n  - outputName: output data name in the measurement file\r\n  - flagName: flag data name in the measurement file\r\n  - freq: 1-D array frequency data [Hz]\r\n  - inputGain: inputdata gain (Optional), Default: 1.0, unit of input can be fixed by this parameter.\r\n  - outputGain: outputdata gain (Optional), Default: 1.0, unit of output can be fixed by this parameter.\r\n  - dt: sampling time of the time response data\r\n  - windivnum: number of windows to divide the time response data\r\n  - overlap: overlap ratio divided time response data (0 <= overlap < 1)\r\n- Returns:\r\n  - freqresp: instance of FreqResp class\r\n  - coh: 1-D array coherence data\r\n\r\n**Examples**\r\n```python\r\nimport numpy as np\r\nfreq = np.logspace(np.log10(1.), np.log10(1000.), 10000, base=10)\r\nfreqresp, coh = measdata2frd('data\\001-inject.csv', 'ServoOut', 'PosErrUm', 'FlagNoise', freq, 1., 1.e-6)\r\n```\r\n\r\n## 6. pylib_sakata.traj\r\n\r\n### 6.1. TrajInf\r\n\r\nclass pylib_sakata.traj.**TrajInf**(*time, pos, vel, acc, T, dt*)\r\n\r\n- Parameters:\r\n  - time: 1-D array time data [s]\r\n  - pos: 1-D array position trajectory data [m]\r\n  - vel: 1-D array velocity trajectory data [m/s]\r\n  - acc: 1-D array acceleration trajectory data [m/s^2]\r\n  - T: moving time [s]\r\n  - dt: sampling time of the trajectory data\r\n\r\n### 6.2. traj4th\r\n\r\npylib_sakata.traj.**traj4th**(*posStart, posStep, velMax, accAve, dt, Tstay=0*)\r\n\r\nThis function is for generation of a 4th order polynomial trajectory.\r\n\r\n- Parameters:\r\n  - posStart: start position of the trajectory\r\n  - posStep: step position of the trajectory\r\n  - velMax: maximum of velocity of the trajectory\r\n  - accAve: average of accelation (= decelation) of the trajectory\r\n  - dt: sampling time of the trajectory data.\r\n- Returns:\r\n  - out: instance of TrajInf class of the 4th order polynomial trajectory\r\n\r\n**Examples**\r\n```python\r\ntraj = traj.traj4th(0, 100, 100, 200, 0.001, 0.5)\r\n\r\nfig = plot.makefig()\r\nax1 = fig.add_subplot(311)\r\nax2 = fig.add_subplot(312)\r\nax3 = fig.add_subplot(313)\r\nplot.plot_xy(ax1, traj.time, traj.pos, ylabel='[m]', legend=['Pos'], title='TrajInf')\r\nplot.plot_xy(ax2, traj.time, traj.vel, ylabel='[m/s]', legend=['Vel'])\r\nplot.plot_xy(ax3, traj.time, traj.acc, xlabel='Time [s]', ylabel='[m/s^2]', legend=['Acc'])\r\nplot.savefig('time_traj.png')\r\n```\r\n\r\n<img src=\"figure\\time_traj.png\" alt=\"vscode_disp\" style=\"zoom: 80%;\" />\r\n\r\n## 7. pylib_sakata.plot\r\n\r\n### 7.1. plot_xy\r\n\r\npylib_sakata.plot.**plot_xy**(*ax, x, y, styl='-', col='b', width=1.5, alpha=1.0, xrange=None, yrange=None, xlabel=None, ylabel=None, legend=None, loc='best', title=None, xscale='linear', yscale='linear', labelouter=True*)\r\n\r\nThis function is for drawing a 2-D figure from x and y data. You can select xy scale in linear type, log type and so on.\r\n\r\n- Parameters:\r\n  - ax: handle of axis\r\n  - x: 1-D array data of x-axis\r\n  - y: 1-D array data of y-axis\r\n  - styl: line style (Optional), Default: '-', Select in '-' (solid), '--' (dashed), '.' (dotted), '-.' (dashdot)\r\n  - col: line color (Optional), Default: 'b' (blue)\r\n  - width: line width (Optional), Default: 1.5\r\n  - alpha: transmittance of line, Default: 1.0, set from 0 to 1.0\r\n  - xrange: plot range of x-axis (Optional), Default: None, set as [xmin, xmax]\r\n  - yrange: plot range of y-axis (Optional), Default: None, set as [ymin, ymax]\r\n  - xlabel: label of x-axis (Optional), Default: None, set strings data\r\n  - ylabe: label of y-axis (Optional), Default: None, set strings data\r\n  - legend: legend of data, Default: None, set a list of strings data\r\n  - loc: location of the legend, Default: 'best', [Detail](https://matplotlib.org/stable/api/legend_api.html)\r\n  - title: title of figure (Optional), Default: None, set strings data\r\n  - xscale: scale type of x-axis (Optional), Default: 'linear', set in 'linear', 'log', ...\r\n  - labelouter: only display outer label of xy-axes, Default: True\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\nfig1 = plot.makefig()\r\nax1 = fig1.add_subplot(311)\r\nax2 = fig1.add_subplot(312)\r\nax3 = fig1.add_subplot(313)\r\nplot.plot_xy(ax1, t, chirp, '-', 'm', 0.5, 1.0, [0, 50], [-3.0, 3.0], ylabel='Input [N]', legend=['Chirp'], title='Time response')\r\nplot.plot_xy(ax2, tout, u, '-', 'b', 0.5, 1.0, [0, 50], [-3.0, 3.0], ylabel='Input [N]', legend=['Servo Out'])\r\nplot.plot_xy(ax3, tout, y*1.0e3, '-', 'b', 0.5, 1.0, [0, 50], [-0.3, 0.3], xlabel='Time [s]', ylabel='Output [mm]', legend=['Position'])\r\n\r\nfig2 = plot.makefig()\r\nax1 = fig2.add_subplot(311)\r\nax2 = fig2.add_subplot(312)\r\nax3 = fig2.add_subplot(313)\r\nplot.plot_xy(ax1, fft_axis, chirp_fft, '-', 'm', 1.5, 1.0, freqrange, [0, 1.0], ylabel='Input [N]', legend=['Chirp'], title='Power spectrum density', xscale='log')\r\nplot.plot_xy(ax2, fft_axis, u_fft, '-', 'b', 1.5, 1.0, freqrange, [0, 0.1], ylabel='Input [N]', legend=['Servo Out'], xscale='log')\r\nplot.plot_xy(ax3, fft_axis, y_fft*1.0e6, '-', 'b', 1.5, 1.0, freqrange, [0, 20], xlabel='Frequency [Hz]', ylabel='Output [um]', legend=['Position'], xscale='log')\r\n```\r\n\r\n### 7.2. plot_tf\r\n\r\npylib_sakata.plot.**plot_tf**(*ax_mag, ax_phase, sys, freq, styl='-', col='b', width=1.5, alpha=1.0, freqrange=None, magrange=None, legend=None, loc='best', title=None, labelouter=True*)\r\n\r\nThis function is for drawing a Bode diagram from a LTI model.\r\n\r\n- Parameters:\r\n  - ax_mag: handle of magnitude axis\r\n  - ax_phase: handle of phase axis, if you set as None, phase axis is skipped.\r\n  - sys: LTI model (StateSpace or TransferFunction)\r\n  - freq: 1-D array frequency data [Hz]\r\n  - styl: line style (Optional), Default: '-', Select in '-' (solid), '--' (dashed), '.' (dotted), '-.' (dashdot)\r\n  - col: line color (Optional), Default: 'b' (blue)\r\n  - width: line width (Optional), Default: 1.5\r\n  - alpha: transmittance of line, Default: 1.0, set from 0 to 1.0\r\n  - freqrange: plot range of frequency-axis (Optional), Default: None, set as [freqmin, freqmax]\r\n  - magrange: plot range of magnitude-axis (Optional), Default: None, set as [magmin, magmax]\r\n  - legend: legend of data, Default: None, set a list of strings data\r\n  - loc: location of the legend, Default: 'best', [Detail](https://matplotlib.org/stable/api/legend_api.html)\r\n  - title: title of figure (Optional), Default: None, set strings data\r\n  - labelouter: only display outer label of xy-axes, Default: True\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\n# Sensitivity function\r\nfig1 = plot.makefig()\r\nax_mag = fig1.add_subplot(111)\r\nax_phase = None\r\nplot.plot_tf(ax_mag, ax_phase, S, freq, '-', 'm', 1.5, 1.0, title='Frequency response of sensitivity function')\r\nplot.plot_tf(ax_mag, ax_phase, Sn, freq, '--', 'b', 1.5, 1.0, [1, 1000], [-60, 10], legend=['Measurement','Model'])\r\n\r\n# Complementary sensitivity function\r\nfig2 = plot.makefig()\r\nax_mag = fig2.add_subplot(211)\r\nax_phase = fig2.add_subplot(212)\r\nplot.plot_tf(ax_mag, ax_phase, T, freq, '-', 'm', 1.5, 1.0, title='Frequency response of complementary sensitivity function')\r\nplot.plot_tf(ax_mag, ax_phase, Tn, freq, '--', 'b', 1.5, 1.0, [1, 1000], [-60, 10], legend=['Measurement','Model'])\r\n```\r\n\r\n### 7.3. plot_tffrd\r\n\r\npylib_sakata.plot.**plot_tffrd**(*ax_mag, ax_phase, freqresp, styl='-', col='b', width=1.5, alpha=1.0, freqrange=None, magrange=None, legend=None, loc='best', title=None, labelouter=True, ax_coh=None, coh=None*)\r\n\r\nThis function is for drawing a Bode diagram from a frequency response data.\r\n\r\n- Parameters:\r\n  - ax_mag: handle of magnitude axis\r\n  - ax_phase: handle of phase axis, if you set as None, phase axis is skipped.\r\n  - freqresp: instance of FreqResp class\r\n  - styl: line style (Optional), Default: '-', Select in '-' (solid), '--' (dashed), '.' (dotted), '-.' (dashdot)\r\n  - col: line color (Optional), Default: 'b' (blue)\r\n  - width: line width (Optional), Default: 1.5\r\n  - alpha: transmittance of line, Default: 1.0, set from 0 to 1.0\r\n  - freqrange: plot range of frequency-axis (Optional), Default: None, set as [freqmin, freqmax]\r\n  - magrange: plot range of magnitude-axis (Optional), Default: None, set as [magmin, magmax]\r\n  - legend: legend of data, Default: None, set a list of strings data\r\n  - loc: location of the legend, Default: 'best', [Detail](https://matplotlib.org/stable/api/legend_api.html)\r\n  - title: title of figure (Optional), Default: None, set strings data\r\n  - labelouter: only display outer label of xy-axes, Default: True\r\n  - ax_coh: handle of coherence axis, Default: None\r\n  - coh: 1-D array coherence data, Default: None\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\n# Plant\r\nfig1 = plot.makefig()\r\nax_mag = fig.add_subplot(311)\r\nax_phase = fig.add_subplot(312)\r\nax_coh = fig.add_subplot(313)\r\nplot.plot_tffrd(ax_mag, ax_phase, Pmeas_frd, '-', 'm', 1.5, 1.0, ax_coh=ax_coh, coh=coh, title='Frequency response of plant')\r\nplot.plot_tffrd(ax_mag, ax_phase, Pnz_frd, '--', 'b', 1.5, 1.0, freqrange, legend=['Measurement','Model'])\r\n\r\n# Sensitivity function\r\nfig2 = plot.makefig()\r\nax_mag = fig1.add_subplot(111)\r\nax_phase = None\r\nplot.plot_tffrd(ax_mag, ax_phase, S_frd, '-', 'm', 1.5, 1.0, title='Frequency response of sensitivity function')\r\nplot.plot_tffrd(ax_mag, ax_phase, Sn_frd, '--', 'b', 1.5, 1.0, [1, 1000], [-60, 10], legend=['Measurement','Model'])\r\n\r\n# Complementary sensitivity function\r\nfig3 = plot.makefig()\r\nax_mag = fig2.add_subplot(211)\r\nax_phase = fig2.add_subplot(212)\r\nplot.plot_tffrd(ax_mag, ax_phase, T_frd, '-', 'm', 1.5, 1.0, title='Frequency response of complementary sensitivity function')\r\nplot.plot_tffrd(ax_mag, ax_phase, Tn_frd, '--', 'b', 1.5, 1.0, [1, 1000], [-60, 10], legend=['Measurement','Model'])\r\n```\r\n\r\n### 7.4. plot_nyquist\r\n\r\npylib_sakata.plot.**plot_nyquist**(*ax, freqresp, styl='-', col='b', width=1.5, alpha=1.0, xrange=None, yrange=None, legend=None, loc='best', title=None, labelouter=True*)\r\n\r\nThis function is for drawing a Nyquist diagram from a frequency response data of a open loop system\r\n\r\n- Parameters:\r\n  - ax: handle of axis\r\n  - freqresp: instance of FreqResp class\r\n  - styl: line style (Optional), Default: '-', Select in '-' (solid), '--' (dashed), '.' (dotted), '-.' (dashdot)\r\n  - col: line color (Optional), Default: 'b' (blue)\r\n  - width: line width (Optional), Default: 1.5\r\n  - alpha: transmittance of line, Default: 1.0, set from 0 to 1.0\r\n  - xrange: plot range of real-axis (Optional), Default: None, set as [realmin, realmax]\r\n  - yrange: plot range of imaginary-axis (Optional), Default: None, set as [imagmin, imagmax]\r\n  - legend: legend of data, Default: None, set a list of strings data\r\n  - loc: location of the legend, Default: 'best', [Detail](https://matplotlib.org/stable/api/legend_api.html)\r\n  - title: title of figure (Optional), Default: None, set strings data\r\n  - labelouter: only display outer label of xy-axes, Default: True\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\nfig = plot.makefig()\r\nax = fig.add_subplot(111)\r\nplot.plot_nyquist(ax, G_frd, '-', 'm', 1.5, 1.0, title='Nyquist Diagram')\r\nplot.plot_nyquist(ax, Gn_frd, '--', 'b', 1.5, 1.0, legend=['Measurement','Model'])\r\n```\r\n\r\n### 7.5. plot_nyquist_assistline\r\n\r\npylib_sakata.plot.**plot_nyquist_assistline**(*ax*)\r\n\r\nThis function is for drawing assist line of a Nyquist diagram.\r\n\r\n- Parameters:\r\n  - ax: handle of axis\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\nplot.plot_nyquist_assistline(ax)\r\n```\r\n\r\n### 7.6. makefig\r\n\r\npylib_sakata.plot.**makefig**(dpi=100, popwin=False)\r\n\r\nThis function will make a new figure handle.\r\n\r\n- Parameters:\r\n  - dpi: dot per inch of figure (Optional), Default: 100\r\n  - popwin: switch to fix the popup window of the figure (Optional), Default: False\r\n- Returns:\r\n  - fig: figure handle\r\n\r\n**Examples**\r\n```python\r\nfig = plot.makefig()\r\n```\r\n\r\n### 7.7. savefig\r\n\r\npylib_sakata.plot.**savefig**(*figName*)\r\n\r\nThis function will save a current figure.\r\n\r\n- Parameters:\r\n  - figName: figure name for saving a current figure, set strings data\r\n- Returns:\r\n  - None\r\n\r\n**Examples**\r\n```python\r\nplot.savefig('freq_P.png')\r\n```\r\n\r\n### 7.8. showfig\r\n\r\npylib_sakata.plot.**showfig**()\r\n\r\nThis function will call matplotlib.pyplot.show()\r\n\r\n**Examples**\r\n```python\r\nshowfig()\r\n```\r\n\r\n## 8. pylib_sakata.init\r\n\r\n### 8.1. close_all\r\n\r\npylib_sakata.init.**close_all**()\r\n\r\nThis function is for closing current opened figures.\r\n\r\n**Examples**\r\n```python\r\nclose_all()\r\n```\r\n\r\n### 8.2. clear_all\r\n\r\npylib_sakata.init.**clear_all**()\r\n\r\nThis function is for deleting all defined variables.\r\n\r\n**Examples**\r\n```python\r\nclear_all()\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Koichi-Sakata/pylib_sakata",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylib-sakata",
    "package_url": "https://pypi.org/project/pylib-sakata/",
    "platform": null,
    "project_url": "https://pypi.org/project/pylib-sakata/",
    "project_urls": {
      "Homepage": "https://github.com/Koichi-Sakata/pylib_sakata"
    },
    "release_url": "https://pypi.org/project/pylib-sakata/0.1.14/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Control system design and analysis package",
    "version": "0.1.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17128090,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b53376647f93e1344fb0ebcb71acbd2f6df163da9aabca1555e7018ca44e83cf",
          "md5": "a60e4020bd10ab9e96f32e415cd79275",
          "sha256": "7ddcbd4ffedca578bd6f2c0073179f5f09d1339f60081da82603f723ca8a59e0"
        },
        "downloads": -1,
        "filename": "pylib_sakata-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a60e4020bd10ab9e96f32e415cd79275",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10178,
        "upload_time": "2021-08-14T13:22:50",
        "upload_time_iso_8601": "2021-08-14T13:22:50.619487Z",
        "url": "https://files.pythonhosted.org/packages/b5/33/76647f93e1344fb0ebcb71acbd2f6df163da9aabca1555e7018ca44e83cf/pylib_sakata-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3084da6626cad57626ad37ae0cd3402fd54c99a34582790cab8b1a7e7282a87",
          "md5": "c5ea8c1c7afea35db8cdab4febd4dcc1",
          "sha256": "12bbc68953e8dbbab0f3779ec42f1f160cce3b35086ebae509bb0831190ec6ec"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c5ea8c1c7afea35db8cdab4febd4dcc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10280,
        "upload_time": "2021-08-15T14:48:49",
        "upload_time_iso_8601": "2021-08-15T14:48:49.595733Z",
        "url": "https://files.pythonhosted.org/packages/e3/08/4da6626cad57626ad37ae0cd3402fd54c99a34582790cab8b1a7e7282a87/pylib-sakata-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89f3f964610048a3c109df4ade20fb9cf78df33beeb18904af47c97f39f5cbd6",
          "md5": "fcb704085a33f96fb734fda820de476b",
          "sha256": "345da30bccd29cb41a1bc09793c56fcd9d4cc6b9c726d336b840cd40cf2eb80c"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fcb704085a33f96fb734fda820de476b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42577,
        "upload_time": "2021-08-16T08:34:57",
        "upload_time_iso_8601": "2021-08-16T08:34:57.958200Z",
        "url": "https://files.pythonhosted.org/packages/89/f3/f964610048a3c109df4ade20fb9cf78df33beeb18904af47c97f39f5cbd6/pylib-sakata-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "902189c1dd3e41ea74806849298b5f56deefefc044faedf6c99e79354eb9c991",
          "md5": "692cb32aab3506e5c9ecea33e94be9b2",
          "sha256": "06e1114452e11d4e3666c4aec6540a4f314e7ab5263dd31a891ea61458c34888"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "692cb32aab3506e5c9ecea33e94be9b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43040,
        "upload_time": "2021-08-24T14:41:23",
        "upload_time_iso_8601": "2021-08-24T14:41:23.880318Z",
        "url": "https://files.pythonhosted.org/packages/90/21/89c1dd3e41ea74806849298b5f56deefefc044faedf6c99e79354eb9c991/pylib-sakata-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b198c8ff1ffb25f6f999c970460a5c14d5a673b45e3b820ab6d556285775fd94",
          "md5": "59f681f0f6d16abd644aea05db415f56",
          "sha256": "df14a55d3576d02d5fa577e19611ef0af16fc697674441894483230d03b0d88a"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "59f681f0f6d16abd644aea05db415f56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43027,
        "upload_time": "2021-08-24T14:57:44",
        "upload_time_iso_8601": "2021-08-24T14:57:44.710825Z",
        "url": "https://files.pythonhosted.org/packages/b1/98/c8ff1ffb25f6f999c970460a5c14d5a673b45e3b820ab6d556285775fd94/pylib-sakata-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98ba5fbaf8647af32b9f6cc5fa32b5cd74e9e3fe784a943dc46be8b1c9807aa8",
          "md5": "0ca5675c6e36e38aff0df79e3189a490",
          "sha256": "83194bd396cd9ee19be0aee52b32218c6f889f5ada3efcf9d61c9871a92f4cbe"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0ca5675c6e36e38aff0df79e3189a490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43028,
        "upload_time": "2021-08-24T15:07:26",
        "upload_time_iso_8601": "2021-08-24T15:07:26.138981Z",
        "url": "https://files.pythonhosted.org/packages/98/ba/5fbaf8647af32b9f6cc5fa32b5cd74e9e3fe784a943dc46be8b1c9807aa8/pylib-sakata-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "989356662234cf5e3c7b4b978277c55f9869c8f07471a7848b16fa2d1c6ae74a",
          "md5": "bc72f3ad7d4505a293593a7244a82fcb",
          "sha256": "0aab8212e813f9a3219227f1a1ab470750018bf01df7a4fc34f69e567e5807c3"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "bc72f3ad7d4505a293593a7244a82fcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43539,
        "upload_time": "2021-08-24T15:58:59",
        "upload_time_iso_8601": "2021-08-24T15:58:59.606780Z",
        "url": "https://files.pythonhosted.org/packages/98/93/56662234cf5e3c7b4b978277c55f9869c8f07471a7848b16fa2d1c6ae74a/pylib-sakata-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a71837244de23adca23bc86002578366acbeae6b1df5588ade6699d17e8fe47b",
          "md5": "0b093f620287b0c2d39596989be7eeac",
          "sha256": "9ca091d2ef4bf17013d3ca7a882cb36ac7ac495817a6de0770385f678b610eb8"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0b093f620287b0c2d39596989be7eeac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45038,
        "upload_time": "2021-08-25T08:12:30",
        "upload_time_iso_8601": "2021-08-25T08:12:30.835585Z",
        "url": "https://files.pythonhosted.org/packages/a7/18/37244de23adca23bc86002578366acbeae6b1df5588ade6699d17e8fe47b/pylib-sakata-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "952572fa2d0c12a5977984fd47e7925407aead91b1c4c44cce58c57e0161d4f9",
          "md5": "d7d403182b9431e880aaa4570ec97328",
          "sha256": "ba87a68fc56e69c3f63e974f9d5b40891cf1c89ab290438d2b9ada1fa850523f"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "d7d403182b9431e880aaa4570ec97328",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47099,
        "upload_time": "2021-08-31T01:26:16",
        "upload_time_iso_8601": "2021-08-31T01:26:16.317126Z",
        "url": "https://files.pythonhosted.org/packages/95/25/72fa2d0c12a5977984fd47e7925407aead91b1c4c44cce58c57e0161d4f9/pylib-sakata-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2200049855de1d12cf27183fa9c151b9671e980c7db7f4a783d912abe40aef1c",
          "md5": "dc62f52141683aaea3b33b02f1c9a6d1",
          "sha256": "0827935d97a4e98cf9b8b1ce4f3bd6a4c3dbfc08ff3c518c6df01b0c1111d38e"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc62f52141683aaea3b33b02f1c9a6d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47767,
        "upload_time": "2021-10-13T01:02:50",
        "upload_time_iso_8601": "2021-10-13T01:02:50.140994Z",
        "url": "https://files.pythonhosted.org/packages/22/00/049855de1d12cf27183fa9c151b9671e980c7db7f4a783d912abe40aef1c/pylib-sakata-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12c6cb42a8b66cbae2c34b7f9fb92b166bd36c79f8b763f2b27e2bfb77ee1725",
          "md5": "cebb687e7be89ba38c4ad968612fb7e8",
          "sha256": "d988feac604374d0a3f2f1b09da6d22e2fedcadbccb9c41c6ceda8c01f28013f"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cebb687e7be89ba38c4ad968612fb7e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47781,
        "upload_time": "2021-11-01T13:03:17",
        "upload_time_iso_8601": "2021-11-01T13:03:17.635244Z",
        "url": "https://files.pythonhosted.org/packages/12/c6/cb42a8b66cbae2c34b7f9fb92b166bd36c79f8b763f2b27e2bfb77ee1725/pylib-sakata-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13060f4817eadf1739c726d1f77a0d39de6738ad14bcbb8d4ba60df33e09b13f",
          "md5": "0cd541338ed95c0446646d7232f76011",
          "sha256": "f080299002a146b0f37e06c8bdcde92fa3c799726688a2b859cd160fd9edeed6"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "0cd541338ed95c0446646d7232f76011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54006,
        "upload_time": "2022-09-08T23:23:19",
        "upload_time_iso_8601": "2022-09-08T23:23:19.316162Z",
        "url": "https://files.pythonhosted.org/packages/13/06/0f4817eadf1739c726d1f77a0d39de6738ad14bcbb8d4ba60df33e09b13f/pylib-sakata-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a259c439c3a108d5d83ba647382a51f1cc93d56019c77acb2ddbcb42106d9c39",
          "md5": "0204b838b996467147d6ddd9429a9408",
          "sha256": "f88606449429e059996280227cf2bfdf7a21fd34736f61187dd6298376860513"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "0204b838b996467147d6ddd9429a9408",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54154,
        "upload_time": "2022-11-20T15:44:27",
        "upload_time_iso_8601": "2022-11-20T15:44:27.305662Z",
        "url": "https://files.pythonhosted.org/packages/a2/59/c439c3a108d5d83ba647382a51f1cc93d56019c77acb2ddbcb42106d9c39/pylib-sakata-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccf11f9a3f1c685e8ce1183c7726f12b852bf7b31aaf720aeca7072390bcfeda",
          "md5": "78c4021a88e6452ebf1e1e51d8d4a661",
          "sha256": "94fc01a1307a7adcdd0c7fe442b60a635945ebfbeaf9ddc8ea01b997b1231b9e"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "78c4021a88e6452ebf1e1e51d8d4a661",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54250,
        "upload_time": "2022-12-20T13:51:03",
        "upload_time_iso_8601": "2022-12-20T13:51:03.085143Z",
        "url": "https://files.pythonhosted.org/packages/cc/f1/1f9a3f1c685e8ce1183c7726f12b852bf7b31aaf720aeca7072390bcfeda/pylib-sakata-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7a0a21ae43e6268e1aa016d9c6184d2273d834e998452f0bcf94954051b385f",
          "md5": "a5640cafed6b21833e2123465bf85c5d",
          "sha256": "952cd9a22303b676afc8f7f510c686075c26a64049668a748243d57545d31fba"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "a5640cafed6b21833e2123465bf85c5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54254,
        "upload_time": "2022-12-23T14:08:27",
        "upload_time_iso_8601": "2022-12-23T14:08:27.485675Z",
        "url": "https://files.pythonhosted.org/packages/e7/a0/a21ae43e6268e1aa016d9c6184d2273d834e998452f0bcf94954051b385f/pylib-sakata-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9b30aca93837aa19cea176f0c764f731ff21d6d50d6fbe5611ca70ca00883ed",
          "md5": "99ff74ec2a07855722fa478c8ad3f79c",
          "sha256": "3b03a067e665b6b5bead5ff6cdee50ab869ea718545d1e655d387ec23d55d09b"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "99ff74ec2a07855722fa478c8ad3f79c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 54136,
        "upload_time": "2023-03-02T14:24:14",
        "upload_time_iso_8601": "2023-03-02T14:24:14.288787Z",
        "url": "https://files.pythonhosted.org/packages/b9/b3/0aca93837aa19cea176f0c764f731ff21d6d50d6fbe5611ca70ca00883ed/pylib-sakata-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c236ed03fc08501b2fbe19c7f4a55c1c3481d417cf742b94229aa9290dd363d9",
          "md5": "d41284ca6f355a5f777f22cb4458aa3f",
          "sha256": "cd02980596c848977706c824a70b72b4426bb640ddcc8963d4904d26522e7dca"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d41284ca6f355a5f777f22cb4458aa3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47747,
        "upload_time": "2021-11-10T10:56:58",
        "upload_time_iso_8601": "2021-11-10T10:56:58.487595Z",
        "url": "https://files.pythonhosted.org/packages/c2/36/ed03fc08501b2fbe19c7f4a55c1c3481d417cf742b94229aa9290dd363d9/pylib-sakata-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "264a3f3053d7f1183b8e3072abd44b799c9f5bcfb5582ca37d9115151d250605",
          "md5": "dcd51e53963138e38de58f9d3b2970c0",
          "sha256": "47069f8a3027f9c5fa7a5832f5347a9486d5341104d02cab25d0da22e584bed6"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dcd51e53963138e38de58f9d3b2970c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47314,
        "upload_time": "2022-04-29T11:54:44",
        "upload_time_iso_8601": "2022-04-29T11:54:44.949501Z",
        "url": "https://files.pythonhosted.org/packages/26/4a/3f3053d7f1183b8e3072abd44b799c9f5bcfb5582ca37d9115151d250605/pylib-sakata-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "700a604fbb34938660e73899bef85ddb84241a10ace2c3a56d20c5358dc5bf7c",
          "md5": "d970bc6253e57e1362da65ffde666801",
          "sha256": "f99c86f77580f8f4f7dfbf663084f21157616fb6b8d81861167c69557baff19e"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d970bc6253e57e1362da65ffde666801",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47573,
        "upload_time": "2022-04-30T12:49:29",
        "upload_time_iso_8601": "2022-04-30T12:49:29.854640Z",
        "url": "https://files.pythonhosted.org/packages/70/0a/604fbb34938660e73899bef85ddb84241a10ace2c3a56d20c5358dc5bf7c/pylib-sakata-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2da90ae91c1d031c2105e8bcb91b785ec98fa34319e171cb0285c9276d54640a",
          "md5": "c2e1a5bb22683778652f22ade6afb28c",
          "sha256": "738ef5186d9911493fe9d00895060e07d723cad448531f17d8fc4b66e69bce0d"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c2e1a5bb22683778652f22ade6afb28c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 47749,
        "upload_time": "2022-05-02T05:34:18",
        "upload_time_iso_8601": "2022-05-02T05:34:18.902081Z",
        "url": "https://files.pythonhosted.org/packages/2d/a9/0ae91c1d031c2105e8bcb91b785ec98fa34319e171cb0285c9276d54640a/pylib-sakata-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b2e273c781370d340611013017afc4e941cec5ac581039420d32bd76e6479d4",
          "md5": "b267ca09c7eb254ab8060949138e51e5",
          "sha256": "4b5b70a9787e3ae6400bb3e931ad7d5738a0d78a030a1a8bd6a005523f7ab94f"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b267ca09c7eb254ab8060949138e51e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 49281,
        "upload_time": "2022-05-22T13:23:38",
        "upload_time_iso_8601": "2022-05-22T13:23:38.483394Z",
        "url": "https://files.pythonhosted.org/packages/9b/2e/273c781370d340611013017afc4e941cec5ac581039420d32bd76e6479d4/pylib-sakata-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "611b1a14d3fc3d42b75aa87a8cacc7cac4a6d8ff4acf4b94ce164925020b79ea",
          "md5": "553b697ac8652f0055c9cd59ea6f9fda",
          "sha256": "3bd52a3e12183cd51d536bd577923dc76aaf161799501d5de8254eb8ea608a1a"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "553b697ac8652f0055c9cd59ea6f9fda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 53483,
        "upload_time": "2022-07-19T14:36:06",
        "upload_time_iso_8601": "2022-07-19T14:36:06.981729Z",
        "url": "https://files.pythonhosted.org/packages/61/1b/1a14d3fc3d42b75aa87a8cacc7cac4a6d8ff4acf4b94ce164925020b79ea/pylib-sakata-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f63217907ec472ed06a545b9a209bb75fa78a1a18e3f8b42f9548eba42a71031",
          "md5": "63ee6d859c6722f4303d1beaa191acae",
          "sha256": "28b08230116e623b9509ccc08e3a149c6cdd21c5a43a95576060e4db811a69a9"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "63ee6d859c6722f4303d1beaa191acae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 53813,
        "upload_time": "2022-07-20T03:31:46",
        "upload_time_iso_8601": "2022-07-20T03:31:46.257943Z",
        "url": "https://files.pythonhosted.org/packages/f6/32/17907ec472ed06a545b9a209bb75fa78a1a18e3f8b42f9548eba42a71031/pylib-sakata-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c31bf084aaef51e19144420708ee520da832ad91ebae93ff40ad70f7a807bb",
          "md5": "04dde53d0e9ae07d1d6a2b0cc53159b0",
          "sha256": "b9dc7ffd9a13fb1a25d10245218a61d3ec359159770912afb8dd16b2ca114746"
        },
        "downloads": -1,
        "filename": "pylib-sakata-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "04dde53d0e9ae07d1d6a2b0cc53159b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54015,
        "upload_time": "2022-07-20T09:00:13",
        "upload_time_iso_8601": "2022-07-20T09:00:13.308943Z",
        "url": "https://files.pythonhosted.org/packages/45/c3/1bf084aaef51e19144420708ee520da832ad91ebae93ff40ad70f7a807bb/pylib-sakata-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9b30aca93837aa19cea176f0c764f731ff21d6d50d6fbe5611ca70ca00883ed",
        "md5": "99ff74ec2a07855722fa478c8ad3f79c",
        "sha256": "3b03a067e665b6b5bead5ff6cdee50ab869ea718545d1e655d387ec23d55d09b"
      },
      "downloads": -1,
      "filename": "pylib-sakata-0.1.14.tar.gz",
      "has_sig": false,
      "md5_digest": "99ff74ec2a07855722fa478c8ad3f79c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 54136,
      "upload_time": "2023-03-02T14:24:14",
      "upload_time_iso_8601": "2023-03-02T14:24:14.288787Z",
      "url": "https://files.pythonhosted.org/packages/b9/b3/0aca93837aa19cea176f0c764f731ff21d6d50d6fbe5611ca70ca00883ed/pylib-sakata-0.1.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}