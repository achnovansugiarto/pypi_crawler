{
  "info": {
    "author": "Stefan Badelt, Seung Woo Shin, Robert Johnson, Qing Dong, Erik Winfree",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# CRN verification module\nAre two chemical reaction networks (CRNs) the same? This package provides code\nto verify the correctness of an implementation CRN with respect to a formal CRN\nusing the stochastic\ntrajectory equivalence notions **CRN bisimulation** [[Johnson et al. (2019)]], \n**pathway decomposition** [[Shin et al.  (2019)]] and preliminary implementations of \n**compositional & integrated hybrid** [[Shin et al.  (2019)]].\n\n[![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/DNA-and-Natural-Algorithms-Group/crnverifier)](https://github.com/DNA-and-Natural-Algorithms-Group/crnverifier/tags)\n[![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/DNA-and-Natural-Algorithms-Group/crnverifier?include_prereleases)](https://github.com/DNA-and-Natural-Algorithms-Group/crnverifier/releases)\n[![PyPI version](https://badge.fury.io/py/crnverifier.svg)](https://badge.fury.io/py/crnverifier)\n[![PyPI - License](https://img.shields.io/pypi/l/crnverifier)](https://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.com/DNA-and-Natural-Algorithms-Group/crnverifier.svg?branch=master)](https://travis-ci.com/github/DNA-and-Natural-Algorithms-Group/crnverifier)\n[![Codecov branch](https://img.shields.io/codecov/c/github/DNA-and-Natural-Algorithms-Group/crnverifier/master)](https://codecov.io/gh/DNA-and-Natural-Algorithms-Group/crnverifier)\n\n\n### Installation\n```\n  $ python setup.py install\n```\n\n### Library examples\n\nThe following verification functions are currently available:\n```py\nfrom crnverifier import (pathway_decomposition_eq,\n                         crn_bisimulation_test,\n                         modular_crn_bisimulation_test,\n                         integrated_hybrid_test, \n                         compositional_hybrid_test)\nfrom crnverifier.utils import parse_crn\n\n# A formal CRN and a corresponding implementation CRN\nfcrn = \"A -> B\"\nicrn = \"a1 -> b1; x -> a1; x -> b1; y -> b1; y -> a1; x -> a0; a0 -> a1\"\n\n# A quick interface to the internal list representation of CRNs, \n# the first CRN contains only formal species (fs), the species\n# of the second CRN are not important right now.\nfcrn, fs = parse_crn(fcrn, is_file = False)\nicrn, _ = parse_crn(icrn, is_file = False)\n\n# Verify whether the two CRNs are pathway decomposition equivalent \n# given the formal species fs:\nv = pathway_decomposition_eq([fcrn, icrn], fs)\nprint(v)\n\n# For the other notions, we may need a (partial) interpretation:\ninter = {'a0': 'A',\n         'a1': 'A',\n         'b1': 'B'}\n\n# Test if there exists a correct CRN bisimulation that interprets \n# the reactions of icrn as reactions of fcrn.\n# The (partial) interpretation is optional here.\nv, i = crn_bisimulation_test(fcrn, icrn, fs, interpretation = inter)\nprint(v, i)\n\n# Verify whether icrn is a correct implementation of fcrn using the \n# two supported hybrid notions.\n# The (partial) interpretation is required here.\nv, i = integrated_hybrid_test(fcrn, icrn, fs, inter)\nprint(v, i)\nv, i = compositional_hybrid_test(fcrn, icrn, fs, inter)\nprint(v, i)\n\n```\n\n### Commandline examples\nFor the format *.crn files, see [crnsimulator].\n\nVerify whether two CRNs f.crn and i.crn are pathway decomposition equivalent:\n```\n  $ crnverifier pathway-decomposition --crns f.crn i.crn --formal-species A B C\n```\nCompute the formal basis of a single CRN:\n```\n  $ crnverifier formal-basis --crn i.crn --formal-species A B C\n```\n\nVerify whether a correct CRN bisimulation exists to interpret *i.crn* as *f.crn*:\n```\n  $ crnverifier crn-bisimulation --formal-crn f.crn --implementation-crn i.crn\n```\nFor options, e.g. to provide a partial interpretation, or to choose a more\nsuitable algorithm for the permissive condition, use \n```\n  $ crnverifier --help\n```\n\nVerify whether *i.crn* is a correct implementation of *f.crn* using the two supported hybrid notions.\n```\n  $ crnverifier integrated-hybrid --formal-crn f.crn --implementation-crn i.crn --interpretation itof.crn\n  $ crnverifier compositional-hybrid --formal-crn f.crn --implementation-crn i.crn --interpretation itof.crn\n```\n\n## Version\n0.3\n\n## License\nMIT\n\n## Cite\nThe equivalence notions:\n - Seung Woo Shin, Chris Thachuk, and Erik Winfree (2019) \n    \"Verifying chemical reaction network implementations: A pathway decomposition approach\"\n    [[Shin et al. (2019)]].\n - Robert F. Johnson, Qing Dong, and Erik Winfree (2019)\n    \"Verifying chemical reaction network implementations: A bisimulation approach\"\n    [[Johnson et al. (2019)]].\n\nThe implementation (a part of the [Nuskell] compiler project):\n - Stefan Badelt, Seung Woo Shin, Robert F. Johnson, Qing Dong, Chris Thachuk, and Erik Winfree (2017)\n    \"A General-Purpose CRN-to-DSD Compiler with Formal Verification, Optimization, and Simulation Capabilities\"\n    [[Badelt et al. (2017)]].\n\n\n[//]: References\n[Shin et al. (2019)]: <https://doi.org/10.1016/j.tcs.2017.10.011>\n[Johnson et al. (2019)]: <https://doi.org/10.1016/j.tcs.2018.01.002>\n[Badelt et al. (2017)]: <https://doi.org/10.1007/978-3-319-66799-7_15>\n[Badelt et al. (2020)]: <https://doi.org/10.1098/rsif.2019.0866>\n[Nuskell]: <https://www.github.com/DNA-and-Natural-Algorithms-Group/nuskell>\n[crnsimulator]: <https://www.github.com/bad-ants-fleet/crnsimulator>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.github.com/DNA-and-Natural-Algorithms-Group/crnverifier/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Stefan Badelt",
    "maintainer_email": "bad-ants-fleet@posteo.eu",
    "name": "crnverifier",
    "package_url": "https://pypi.org/project/crnverifier/",
    "platform": "",
    "project_url": "https://pypi.org/project/crnverifier/",
    "project_urls": {
      "Homepage": "http://www.github.com/DNA-and-Natural-Algorithms-Group/crnverifier/"
    },
    "release_url": "https://pypi.org/project/crnverifier/0.3/",
    "requires_dist": [
      "pyparsing"
    ],
    "requires_python": ">=3.8",
    "summary": "Verify the equivalence of chemical reaction networks (CRNs), or the correctness of an implementation CRN with respect to a formal CRN.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9104665,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b1ec806d7443c76bd7a5f2b922b64febb15321bec94f74cd72fd73386503e1c",
          "md5": "89ea6767f2217234fb53e8e6e280971e",
          "sha256": "aef0de538b48ee98f72697df7ea3170074fa41c3d583a6331889f3c9b9405a6b"
        },
        "downloads": -1,
        "filename": "crnverifier-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89ea6767f2217234fb53e8e6e280971e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 46392,
        "upload_time": "2021-01-11T12:00:00",
        "upload_time_iso_8601": "2021-01-11T12:00:00.684573Z",
        "url": "https://files.pythonhosted.org/packages/8b/1e/c806d7443c76bd7a5f2b922b64febb15321bec94f74cd72fd73386503e1c/crnverifier-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8796308509221c57b46e65049d0eace30835d4c993fff19c081527f93b4241e0",
          "md5": "583e6d81a0831ad2031dca312c04c4b3",
          "sha256": "9ba962b1f21be2c877d460afbbfd94de9b4724812884558ffaf5de58429837d2"
        },
        "downloads": -1,
        "filename": "crnverifier-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "583e6d81a0831ad2031dca312c04c4b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 43945,
        "upload_time": "2021-01-11T12:00:02",
        "upload_time_iso_8601": "2021-01-11T12:00:02.657921Z",
        "url": "https://files.pythonhosted.org/packages/87/96/308509221c57b46e65049d0eace30835d4c993fff19c081527f93b4241e0/crnverifier-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b1ec806d7443c76bd7a5f2b922b64febb15321bec94f74cd72fd73386503e1c",
        "md5": "89ea6767f2217234fb53e8e6e280971e",
        "sha256": "aef0de538b48ee98f72697df7ea3170074fa41c3d583a6331889f3c9b9405a6b"
      },
      "downloads": -1,
      "filename": "crnverifier-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89ea6767f2217234fb53e8e6e280971e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 46392,
      "upload_time": "2021-01-11T12:00:00",
      "upload_time_iso_8601": "2021-01-11T12:00:00.684573Z",
      "url": "https://files.pythonhosted.org/packages/8b/1e/c806d7443c76bd7a5f2b922b64febb15321bec94f74cd72fd73386503e1c/crnverifier-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8796308509221c57b46e65049d0eace30835d4c993fff19c081527f93b4241e0",
        "md5": "583e6d81a0831ad2031dca312c04c4b3",
        "sha256": "9ba962b1f21be2c877d460afbbfd94de9b4724812884558ffaf5de58429837d2"
      },
      "downloads": -1,
      "filename": "crnverifier-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "583e6d81a0831ad2031dca312c04c4b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 43945,
      "upload_time": "2021-01-11T12:00:02",
      "upload_time_iso_8601": "2021-01-11T12:00:02.657921Z",
      "url": "https://files.pythonhosted.org/packages/87/96/308509221c57b46e65049d0eace30835d4c993fff19c081527f93b4241e0/crnverifier-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}