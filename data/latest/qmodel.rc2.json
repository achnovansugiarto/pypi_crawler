{
  "info": {
    "author": "Ethan Sebag , Sylvain Perez",
    "author_email": "ethanspros@hotmail.com , sylvain.perez@q-leap.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div style= \"display:flex\"><h1 style=\"color: #154A9F ;\" > QModel </h1>\n<img style = \"display:inline-flex ;margin-left: auto \" src=\"https://q-leap.eu/wp-content/uploads/2022/07/logo.png\"  width = \"200\"></div>Welcome to the QModel Documentation, here are every details you may need to understand how to use QModel.\n\n<h2 style=\"color: #154A9F ;\"> What does this library: </h2>\nQ-model is a library that contains everything you need to create a Random Forest Classifer (RFC) to read 7 digits display from an image.\n\n\n<h2 style=\"color: #154A9F ;\">What can you do with that library ? </h2>\n<ul>\n    <li>Create a training dataset of images to train a RFC model</li>\n    <li>Create a testing dataset of images to test a trained RFC model</li>\n    <li>Create and train a RFC model with a training dataset</li>\n    <li>Test a RFC model with a testing dataset of images</li>\n    <li>Use a RFC model to read the values of a display image</li>\n</ul>\n\n<h2 style=\"color:#154A9F ;\">Create a training dataset :</h2>\n\n<h4>1st step :</h4>\n\nFirst you have to take pictures of your 7-segment dipslay (try to take several photos to have at least every digit 0,9 with a good image quality).\nPlace them into a folder.\n\n<h4>2nd step :</h4>\n\nThen, for each photo open the photo editor and crop the image around the display to have a nice rectangle around all the digits you try to detect, as below.\n\n\nDevice image:\n\n<img style = \"display:block ;margin-left: auto ; margin-right:auto \" src =\"https://q-leap.eu/wp-content/uploads/2022/07/token.jpg\"></img>\n\nDisplay image:\n\n<img style = \"display:block ;margin-left: auto ; margin-right:auto \" src =\"https://q-leap.eu/wp-content/uploads/2022/07/display.jpg\"></img>\n\nThen place all theese images into a folder that you can name \"display\" for exemple.\n\n<h4> 3rd step :</h4>\n\nNow you have a folder full of display images.\nUse the `Testingset` class from the `testing_set.py` file to extract digits images from display images and save them into a folder.\n\nExample : \n```python\n    from testing_set import Testingset\n    testing_set = (display_images_path, destination_path)\n```\n\nYou should now have a folder at the destination_path full of digits images.\n\n<h4> 4th step :</h4>\n\nYou now must select 10 images for every token you used.\n1 image per digits per token.\n\nName every images by the digit they are representating\n\nFor example this image: \n\n<img style = \"display:block ;margin-left: auto ; margin-right:auto \" src =\"https://q-leap.eu/wp-content/uploads/2022/07/digit.jpg\"></img>\n\nis going to be saved as \"0.jpg\".\n\nTake them and place them into a folder named by the name of the token their are from.\n\nFor example if you have took images of the \"A\" token, place them into a folder named \"A\".\n\n<h4>5th step :</h4>\n\nNow you must call the ```TrainingSet ``` class from the `training_set.py` file, as below.\n\n```python\nfrom training_set.py import TrainingSet\ntraining_set = TrainingSet(name, path , original_10_img, storeImages)\n```\n\nWith : \n\n- `name` (str): name of the set that will be create\n\n- `path_to_save` (str): root of the path where will be save the set\n\n- `original_10_img` (list of str): path where are located the 10 digit images that you created. ( if you want to create a training dataset from multiple device, you have to add the path of the folder that contains theese images to the list)\n\n- `storeImages` (boolean): set as False by default, if you set it at True, the images before renaming and resizing will be save \n\n<h4>Conclusion</h4>\n\nYou now should have a training dataset at the `path_to_save` \n\n<h2 style=\"color:#154A9F ;\">Create a testing dataset :</h2>\n\nTo create a testing dataset follow the 3rd first step of the Training dataset guide. \n\nYou need now to sort every digits image and place each one of them in a folder named by the digit they are representing.\n\nFor example put this image \n<img style = \"display:block ;margin-left: auto ; margin-right:auto \" src =\"https://q-leap.eu/wp-content/uploads/2022/07/digit.jpg\"></img>\n\ninto a folder called \"0\"\n\nYou shoud have a testing dataset of digits images. \n\n<h2 style=\"color:#154A9F ;\">Create and training a Random Forest Model Classifier  :</h2>\n\nFirst you will need a training dataset so be sure you have one already created by following the guide above\n\nYou need to call a `ModelTraining` object from the `model_training.py` file, and use the `train()` method from that class.\n\nExample :\n\n```python\nfrom model_training import ModelTraining\nmodel_training = ModelTraining(training_set_path , model_path)\nmodel_training.train()\n```\n\nYou now have created and trained a Random Forest Classifer model.\nIf you want to test it or use it you can use the ``get_model_path()`` method of the `ModelTraining` object to get the path of that just created model.\n\n<h2 style=\"color:#154A9F ;\">Test a trained Random Forest Model Classifier  :</h2>\n\nTo test the model you need to first have a testing set created. \nEnsure you have created a testing dataset by following the guide above.\nTo test a model, you need to create a `ModelTesting` object from the `model_testing.py` file. \nThen call `prediction()` method to get the accuracy of the model. \n\nExample:\n\n```python\n    from model_testing import ModelTesting\n    model_test = ModelTesting(testing_set_path, model_path)\n    inverted_resulted , accuracy = model_test.prediction()\n\n```\n- `testing_set_path` is the path of the testing dataset\n- `model_path` is the path of the model\n- `accuracy` is the accuracy of the model\n- `inverted_result` is the list of the predictions made by the model \n\n<h2 style=\"color:#154A9F ;\">Make prediction with a Random Forest Model Classifier  :</h2>\n\nThe main goal of building a Random Forest Classifier with Q-model is to read the value of a 7 segment display.\nTo do that you have to make prediction with a Random Forest Classifer. \n\nTo make a prediction you need to use a list of images.\nFor that you will use the `PredictionImages` class from the `prediction_images.py` file.\n\nExample of list of images from a PredictionImages object :\n```python\nfrom prediction_images import PredictionImages\n\nprediction_images = PredictionImages(display_path)\nimage_list = prediction_images.getdigitlist()\n```\n`display_path` is the path where are located all the display images.\n\nSo, now you should have a trained RFC model and tested it.\n\nYou now need to call a `ModelUsing` object from the `model_using.py` file.\nA ModelUsing object need an image list to work so you need to use the image_list got above from the ``PredictionImages`` object. \n\nNow create a ``ModelUsing`` object by givinig it the path of the RFC model you want to use:\n\n```python\n    from model_using import ModelUsing\n    from prediction_images import PredictionImages\n\n    prediction_images = PredictionImages(display_path)\n    image_list = prediction_images.getdigitlist()\n\n    #model_path is the path of the model you want to use\n    model_using = ModelUsing(model_path)\n\n    result = model_using.otp_prediction(image_list)\n    #result is a list of every digits value like [5, 6, 8, 6, 8, 5]\n\n```\n use\n    model_using = ModelUsing(model_path)\n\n    result = model_using.otp_prediction(image_list)\n    #result is a list of every digits value like [5, 6, 8, 6, 8, 5]\n\n```\n use\n    model_using = ModelUsing(model_path)\n\n    result = model_using.otp_prediction(image_list)\n    #result is a list of every digits value like [5, 6, 8, 6, 8, 5]\n\n```\n`result` is the result of the prediction made by the model.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "7-segment,python,otp,Random Forest Classifer,Random,Forest,Classifier",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qmodel",
    "package_url": "https://pypi.org/project/qmodel/",
    "platform": null,
    "project_url": "https://pypi.org/project/qmodel/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/qmodel/1.0.1/",
    "requires_dist": [
      "pytest-shutil",
      "numpy",
      "scikit-image",
      "opencv-python",
      "matplotlib",
      "pillow",
      "glob2",
      "joblib",
      "seaborn",
      "scikit-learn",
      "sklearn"
    ],
    "requires_python": "",
    "summary": "package to create a Random Forest Classifier model, to read 7segments display from images",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14396974,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa39917d8f78f4e3d541d262e8c125b1aab250607832d7a4666a1354775a3b51",
          "md5": "9f9379cf22cd8318833cbd9d1440dd38",
          "sha256": "49e6ddd7a64f503fdef9b14e24202b1c2cd9a0e3d0468d9b628c0c11a92b3273"
        },
        "downloads": -1,
        "filename": "qmodel-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f9379cf22cd8318833cbd9d1440dd38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15647,
        "upload_time": "2022-07-11T07:37:32",
        "upload_time_iso_8601": "2022-07-11T07:37:32.163108Z",
        "url": "https://files.pythonhosted.org/packages/aa/39/917d8f78f4e3d541d262e8c125b1aab250607832d7a4666a1354775a3b51/qmodel-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd099689b30ac0fb30c3cf92e7acf7bba6bc259ef0cf88de19a08e095b6fee8",
          "md5": "c229106ae61af639d8669495cf7dceac",
          "sha256": "0f55f440dbcaac0434d933c386637eb39ee098718ce0bec57cc31ef696159464"
        },
        "downloads": -1,
        "filename": "qmodel-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c229106ae61af639d8669495cf7dceac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 609282,
        "upload_time": "2022-07-11T07:37:37",
        "upload_time_iso_8601": "2022-07-11T07:37:37.869381Z",
        "url": "https://files.pythonhosted.org/packages/1d/d0/99689b30ac0fb30c3cf92e7acf7bba6bc259ef0cf88de19a08e095b6fee8/qmodel-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b88ac83cdbfcea2c1c4cf2c9d8947c4f71c5ca154c062caedee18297966551b3",
          "md5": "b8637844bef7683fae6faf74991b94ce",
          "sha256": "431fe65bc1dfc83b64cb03335850cbfe779b2f2497b8c396504473240afb17a8"
        },
        "downloads": -1,
        "filename": "qmodel-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8637844bef7683fae6faf74991b94ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17858,
        "upload_time": "2022-07-11T09:10:22",
        "upload_time_iso_8601": "2022-07-11T09:10:22.598887Z",
        "url": "https://files.pythonhosted.org/packages/b8/8a/c83cdbfcea2c1c4cf2c9d8947c4f71c5ca154c062caedee18297966551b3/qmodel-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6214f5893d4118c65297441fc5aef6f8c2757d673263dc71756f32d061a92d96",
          "md5": "7c575e57cac459370eece40761feee8e",
          "sha256": "73010db56eba41be2d7afddac3b9371cd0ab9350dbacac5c75f0be60d06dafee"
        },
        "downloads": -1,
        "filename": "qmodel-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c575e57cac459370eece40761feee8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 612060,
        "upload_time": "2022-07-11T09:10:27",
        "upload_time_iso_8601": "2022-07-11T09:10:27.604533Z",
        "url": "https://files.pythonhosted.org/packages/62/14/f5893d4118c65297441fc5aef6f8c2757d673263dc71756f32d061a92d96/qmodel-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b88ac83cdbfcea2c1c4cf2c9d8947c4f71c5ca154c062caedee18297966551b3",
        "md5": "b8637844bef7683fae6faf74991b94ce",
        "sha256": "431fe65bc1dfc83b64cb03335850cbfe779b2f2497b8c396504473240afb17a8"
      },
      "downloads": -1,
      "filename": "qmodel-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b8637844bef7683fae6faf74991b94ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17858,
      "upload_time": "2022-07-11T09:10:22",
      "upload_time_iso_8601": "2022-07-11T09:10:22.598887Z",
      "url": "https://files.pythonhosted.org/packages/b8/8a/c83cdbfcea2c1c4cf2c9d8947c4f71c5ca154c062caedee18297966551b3/qmodel-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6214f5893d4118c65297441fc5aef6f8c2757d673263dc71756f32d061a92d96",
        "md5": "7c575e57cac459370eece40761feee8e",
        "sha256": "73010db56eba41be2d7afddac3b9371cd0ab9350dbacac5c75f0be60d06dafee"
      },
      "downloads": -1,
      "filename": "qmodel-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c575e57cac459370eece40761feee8e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 612060,
      "upload_time": "2022-07-11T09:10:27",
      "upload_time_iso_8601": "2022-07-11T09:10:27.604533Z",
      "url": "https://files.pythonhosted.org/packages/62/14/f5893d4118c65297441fc5aef6f8c2757d673263dc71756f32d061a92d96/qmodel-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}