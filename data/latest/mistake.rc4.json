{
  "info": {
    "author": "Ian Kjos",
    "author_email": "kjosib@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Mistake: A tensor-oriented programming language with semantic validation\n\nSome sizable amount of programming problems boil down to gnashing tensors\ntogether in various ways. If you are running simple algorithms over vast\namounts of data, go look at numpy or pandas or tensorflow or...\n\nOn the other hand, if you do a lot of interrelated numeric-processing projects\nwith fiddly requirements for the careful selection and massaging of tensor-like\ndata on the scale of a few dozen megabytes, then perhaps this package is for you.\n(Maybe one day someone will contribute bindings for numpy so we can all grow fat,\ndumb, and happy.)\n\nI began work on this language because I think something like it is missing from\nthe ecosystem. I'd like it to plug into Python because these days everything does,\nand I'd like the notation to be sufficiently expressive.\n\n## Why the funny name?\n\nCasting about madly for a project name, I noticed that Edsger Dijkstra called APL\non the carpet as follows:\n\nhttps://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html\n\n    APL is a mistake, carried through to perfection.\n    It is the language of the future for the programming\n    techniques of the past: it creates a new generation\n    of coding bums.\n\nWell, shoot. My whole idea is inspired by APL's array-oriented nature, although\nI do take measures to keep things intellectually manageable in ways APL does not.\n\n## Alright then. What's the big idea?\n\nSmall to medium-sized data sets, generally numerical, with a great deal of\nstructure: conventionally the programs to process such data wind up reflecting\nthat structure *holographically* throughout the code base.\n\nWhat's more: requirements (or, our understanding of them) change with time.\nWhen your assumptions fall, the ripple effects in a conventionally-written\nprogram are operational in nature: to make the correct changes, you need to\nunderstand how things work at a fairly detailed level.\n\nA language is more than syntax: it's a coherent set of semantics. These can be\nso arranged that the structure and constraints on data are expressed once (together)\nand the essential ideas *about using* the data are not cluttered up with\nholographic echoes of the structure.\n\nLet me amplify that point: In ordinary 3GL programming (and Python is a 3GL) there\nis *no verified* part of the program that says how you *should* use data. If two\nthings are numbers, you *can* add, subtract, multiply, or divide them --\nbut *does that make any sense?* If we can compute the semantic nature of\nexpressions in advance of the main bulk of runtime, then we can detect and\nprevent semantic errors before they endanger the validity of our computations.\n\nWe get some additional benefits from treating the language as a semantic description\nof relationships between data and computations. For example:\n\n* Iteration/looping is banished from the syntax. Statements are inherently\n  parallel (so you can implement that parallelism any way you like).\n\n* The system can (and should) be \"lazy\" by only performing that fraction of\n  specified computation which is strictly necessary to answer a user's query.\n\nBy tying the DSL back to Python in key places, it's easy (I hope) to bolt this\ninto an existing pipeline. Ideally you'll write *Python* where *Python*  makes\nthe most sense, and write *Mistake* code where *Mistake* makes the most sense.\n\n## Where do we stand?\n\nSome bits probably work, but it's still mostly conceptual.\n\n* There is a `sandbox` folder with some embryonic bits that\n  are slowly growing into a usable system.\n    * Some of those bits are automated tests.\n    * There's an entry point at `sandbox/cradle.py`. It was\n      focused on the basics of semantic validation, but remains\n      quite capable of scribbling all over `STDERR`.\n* The grammar file is at `src/mistake/mistake_grammar.md`.\n* The `docs` folder contains design considerations.\n    * At the moment, the most important of these is KISS: \"Keep it simple, Sally!\"\n* Some modicum of functionality is in the `src/mistake` folder.\n\nIf you want to play with this, it's currently better to\nwork from a copy of the github version.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kjosib/mistake",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mistake",
    "package_url": "https://pypi.org/project/mistake/",
    "platform": "",
    "project_url": "https://pypi.org/project/mistake/",
    "project_urls": {
      "Homepage": "https://github.com/kjosib/mistake"
    },
    "release_url": "https://pypi.org/project/mistake/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A tensor-oriented programming language with semantic validation",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7975945,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf30fb493ca703ae9fe64e62b05d215c5a6e095e7e6d75f862c4857cf6aa1802",
          "md5": "56c341515c04800474de95bb2b73fb65",
          "sha256": "35e8ffed913a072937b6cb230d1a58b02ee671a9a91c993bcb065e3d792b609c"
        },
        "downloads": -1,
        "filename": "mistake-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "56c341515c04800474de95bb2b73fb65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4110,
        "upload_time": "2020-07-29T04:28:04",
        "upload_time_iso_8601": "2020-07-29T04:28:04.134533Z",
        "url": "https://files.pythonhosted.org/packages/bf/30/fb493ca703ae9fe64e62b05d215c5a6e095e7e6d75f862c4857cf6aa1802/mistake-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b30da754cc580bc01a406353bcd44e8c7cdb0bd0406b0b7f73af8595d6fe143",
          "md5": "82ccc8853b2bc62565d3acb3608175d4",
          "sha256": "b6538f86d64a1a0b87d6ac4d4acee55a949b4a76ce26cab166a187ea09fcb870"
        },
        "downloads": -1,
        "filename": "mistake-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "82ccc8853b2bc62565d3acb3608175d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4357,
        "upload_time": "2020-07-31T05:40:19",
        "upload_time_iso_8601": "2020-07-31T05:40:19.336581Z",
        "url": "https://files.pythonhosted.org/packages/9b/30/da754cc580bc01a406353bcd44e8c7cdb0bd0406b0b7f73af8595d6fe143/mistake-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c7ecfa10d481d581d8d5fdd0b66e791588ede9e18e3cfecbff3b382d178ad2a",
          "md5": "86ffe715ff696ba0617ac4724469d911",
          "sha256": "90a44b9e21de467eb015b07ce850f627878688c19e4e93129ea7ae69968d78a5"
        },
        "downloads": -1,
        "filename": "mistake-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "86ffe715ff696ba0617ac4724469d911",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7715,
        "upload_time": "2020-08-08T03:34:18",
        "upload_time_iso_8601": "2020-08-08T03:34:18.266242Z",
        "url": "https://files.pythonhosted.org/packages/1c/7e/cfa10d481d581d8d5fdd0b66e791588ede9e18e3cfecbff3b382d178ad2a/mistake-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3358c0766c75d20acacf09702f88e26380c72cb8c8f01d7c246edcb67f1e5ab7",
          "md5": "0ed8965401059fe4cb33694d8c42be7e",
          "sha256": "24194a4bf0ac6e6910d9811b0d9cf57b4fd785469923f4b2cc49eb944ae013eb"
        },
        "downloads": -1,
        "filename": "mistake-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0ed8965401059fe4cb33694d8c42be7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14138,
        "upload_time": "2020-08-17T04:23:02",
        "upload_time_iso_8601": "2020-08-17T04:23:02.553001Z",
        "url": "https://files.pythonhosted.org/packages/33/58/c0766c75d20acacf09702f88e26380c72cb8c8f01d7c246edcb67f1e5ab7/mistake-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3358c0766c75d20acacf09702f88e26380c72cb8c8f01d7c246edcb67f1e5ab7",
        "md5": "0ed8965401059fe4cb33694d8c42be7e",
        "sha256": "24194a4bf0ac6e6910d9811b0d9cf57b4fd785469923f4b2cc49eb944ae013eb"
      },
      "downloads": -1,
      "filename": "mistake-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0ed8965401059fe4cb33694d8c42be7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14138,
      "upload_time": "2020-08-17T04:23:02",
      "upload_time_iso_8601": "2020-08-17T04:23:02.553001Z",
      "url": "https://files.pythonhosted.org/packages/33/58/c0766c75d20acacf09702f88e26380c72cb8c8f01d7c246edcb67f1e5ab7/mistake-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}