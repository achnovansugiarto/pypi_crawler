{
  "info": {
    "author": "Zaglyadskiy Alexander",
    "author_email": "rlllx33@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Comotore\n========\n\n`Comotore` - component engine library - simple actor model realisation.\n\nExamples\n--------\n\n`Client/server example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Client(Component):\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n\n            self._name = kwargs.get(\"name\", None)\n\n        async def construct(self):\n            async def process():\n                req = await self.request(\"{name}\".format(name=self._name))\n                async for res in req.response():\n                    self.logger[\"Client\"].info(\n                        \"Response {name}\".format(name=self._name), corr_id=req.correlation_id, payload=res\n                    )\n                self.logger[\"Client\"].info(\"Responses completed {name}\".format(name=self._name))\n                await self.completed()\n\n            self.fly(process())\n\n        @Component.signal\n        def request(self, data):\n            pass\n\n        @Component.signal\n        def completed(self, _):\n            pass\n\n\n    class Server(Component):\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n\n            self._name = kwargs.get(\"name\", None)\n\n        async def response(self, request):\n            self.logger[\"Server\"].info(\"Request\", payload=request.payload)\n            for i in range(2):\n                yield \"{name} {payload} {number}\".format(name=self._name, payload=request.payload, number=i)\n                await asyncio.sleep(1)\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        server_first = engine.component(Server, name=\"first\")\n        server_second = engine.component(Server, name=\"second\")\n        client = engine.component(\n            Client, name=\"client_1\",\n            start_waiting_for=[server_first.started, server_second.started]\n        )\n        engine.call(client.request, server_first.response)\n        engine.call(client.request, server_second.response)\n        engine.cast(client.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n\n`Producer/consumer example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import uuid\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Producer(Component):\n        async def construct(self):\n            async def produce():\n                try:\n                    i = 0\n                    while True:\n                        payload = uuid.uuid4()\n                        await self.produced(payload)\n                        self.logger[\"Producer\"].info(\"Produce\", payload=payload)\n                        await asyncio.sleep(2)\n                        i += 1\n                        if i > 2:\n                            break\n                    await self.completed()\n                except asyncio.CancelledError:\n                    pass\n\n            self.fly(produce())\n\n        @Component.signal\n        def produced(self, uniq_id):\n            pass\n\n        @Component.signal\n        def completed(self, _):\n            pass\n\n\n    class Consumer(Component):\n        async def consume1(self, signal):\n            self.logger[\"Consumer\"].info(\"Consume 1\", payload=signal.payload)\n\n        async def consume2(self, signal):\n            self.logger[\"Consumer\"].info(\"Consume 2\", payload=signal.payload)\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        consumer = engine.component(Consumer)\n        producer = engine.component(Producer, start_waiting_for=[consumer.started])\n        engine.cast(producer.produced, consumer.consume1)\n        engine.cast(producer.produced, consumer.consume2)\n        engine.cast(producer.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n`Invoke example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Worker(Component):\n        @Component.signal\n        def completed(self):\n            pass\n\n        async def cast_work(self, signal):\n            self.logger[\"Worker\"].info(\"Cast work was invoked with\", payload=signal.payload)\n            await self.completed()\n\n        async def call_work(self, signal):\n            self.logger[\"Worker\"].info(\"Call work was invoked with\", payload=signal.payload)\n            for i in range(2):\n                yield \"Call work response {number}\".format(number=i)\n                await asyncio.sleep(1)\n\n\n    async def invoker(eng, cast_target, call_target):\n        eng.logger[\"Invoker\"].info(\"Invoke in 2 seconds\")\n        await asyncio.sleep(2)\n        eng.logger[\"Invoker\"].info(\"Invoke call\")\n        req = await eng.invoke_call(call_target, payload=\"Some call data\")\n        async for res in req.response():\n            eng.logger[\"Invoker\"].info(res)\n        await eng.invoke_cast(cast_target, payload=\"Some cast data\")\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        worker = engine.component(Worker)\n        engine.cast(worker.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        asyncio.ensure_future(invoker(engine, worker.cast_work, worker.call_work), loop=engine.loop)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "The MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "comotore",
    "package_url": "https://pypi.org/project/comotore/",
    "platform": "",
    "project_url": "https://pypi.org/project/comotore/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/comotore/19.12.2/",
    "requires_dist": [
      "async-timeout (<4,>=3.0.1)"
    ],
    "requires_python": "",
    "summary": "comotore - component engine library - simple actor model realisation",
    "version": "19.12.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6324493,
  "releases": {
    "19.12.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e31359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca",
          "md5": "25e10cfb8a4a121682ce27d25688b40a",
          "sha256": "6b3ce833386718b2e1a5c5113ccd188bd447259b6e22c874366685403a502953"
        },
        "downloads": -1,
        "filename": "comotore-19.12.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25e10cfb8a4a121682ce27d25688b40a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21348,
        "upload_time": "2019-12-18T09:40:18",
        "upload_time_iso_8601": "2019-12-18T09:40:18.505500Z",
        "url": "https://files.pythonhosted.org/packages/a3/e3/1359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca/comotore-19.12.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3e31359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca",
        "md5": "25e10cfb8a4a121682ce27d25688b40a",
        "sha256": "6b3ce833386718b2e1a5c5113ccd188bd447259b6e22c874366685403a502953"
      },
      "downloads": -1,
      "filename": "comotore-19.12.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25e10cfb8a4a121682ce27d25688b40a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21348,
      "upload_time": "2019-12-18T09:40:18",
      "upload_time_iso_8601": "2019-12-18T09:40:18.505500Z",
      "url": "https://files.pythonhosted.org/packages/a3/e3/1359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca/comotore-19.12.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}