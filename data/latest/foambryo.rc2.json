{
  "info": {
    "author": "Sacha Ichbiah",
    "author_email": "sacha.ichbiah@college-de-france.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "### foambryo\n\n**foambryor** is a python package based on Polyscope designed to infer surface tensions, pressures and stresses from the geometry of epithelial-cell-clusters, namely early-embryos and structures encoutered in stem cell cultures, as organoids and embryoids `pip install foambryo`\n\nLiving structures encountered in the field of developmental biology have intricate shapes and structures, that reflectes their physiological functions. They embody important features: symmetries, polarisations, patterning.\nMechanics is at the heart of the development of these structures, yet tools to investigate forces at play during development in 3D are scarse. Characterizing and quantifying precisely their shapes allows us to match them to a simple physical model, and to reveal the forces shaping cells.\n\n<img src=\"Images_github_repo/Window_76_cells.png\" alt=\"drawing\" width=\"650\"/>\n\n\n\n\nWe rely on **delaunay-watershed**, a tool we designed to reconstruct efficiently multimaterial meshes from instance segmentations. From these multimaterial meshes, we can efficiently and robustly extract junctional angles and surfaces curvatures, and invert **Young-Dupré** and **Laplace** laws, to find back the physical parameters involved in the mechanical equilibrium: **surface tensions** $\\gamma_{ij}$ and **cell pressures** $p_i$.\n\nThe viewer is based on **Polyscope**, a popular viewer designed to visualise 3-dimensional geometrical structures.\n\n### Example \n\nLoad an instance segmentation, reconstruct its multimaterial mesh, infer and visualize the forces with Polyscope\n\n```shell\npip install delaunaywatershed3d foambryo\n```\n\n```py\nfrom dw3d import DCEL_Data, geometry_reconstruction_3d\nfrom foambryo import plot_force_inference, plot_tension_inference\n\n## Load the labels\nimport skimage.io as io\nSegmentation = io.imread(\"Segmentation.tif\")\n\n## Reconstruct a multimaterial mesh from the labels\nDW = geometry_reconstruction_3d(Segmentation,min_dist = 5)\nVerts, Faces_multimaterial = DW.return_mesh()\nMesh = DCEL_Data(Verts,Faces_multimaterial)\n\n## Infer and view the forces\nplot_force_inference(Mesh)\n\n#Or just the tensions\nplot_tension_inference(Mesh)\n```\n\n### Installation\n\n`pip install foambryo `\n\n### Physical model\nWe consider a tissue constituted of cells i. \n\n<img src=\"Images_github_repo/Equilibrium.png\" alt=\"drawing\" width=\"150\"/>\n\nThey minimize, under conservation of volume an energy $\\mathcal{E} = \\underset{ij}{\\sum}\\gamma_{ij}$\nThe two main laws involved are: \n- **Young-Dupré Law:** $\\vec{\\gamma}_{ij} + \\vec{\\gamma}_{ik} + \\vec{\\gamma}_{jk} = \\vec{0}$\n- **Laplace Law:** $P_j - P_i = 2 \\gamma_{ij} h_{ij}$ where $h_{ij}$ is the mean curvature of the interface between the cell i and j. `\n\n\n---\n\n### API and Documentation\n\n#### 1 - Creating a Mesh object\nThe first step is to load your multimaterial mesh into a `DCEL_Data` object via the builder `DCEL_Data(Verts, Faces_multimaterial)`. \n    - `Verts` is an V x 3 numpy array of vertex positions\n    - `Faces_multimaterial` is an F x 5 numpy array of face and material indices, where at each row the 3 first indices refers to a vertex and the 2 last refer to a given material, 0 being the exterior media\n\n#### 2 - Infer the forces\n Then the second step is to use this `Mesh` object to infer the tensions and pressions\n- `infer_tension(Mesh,mean_tension=1,mode='YD')`: \nWe infer tensions ratios by inverting junctional equilibrium relations\n    - `Mesh` is a `DCEL_Data` object\n    - `mean_tension` has to be defined as we only infer ratio between tensions\n    - `mode` is the formula used to infer the tensions. It has to be choosen among: `YD`, `Eq`, `Projection_YD`,  `cotan`, `inv_cotan`, `Lamy`, `inv_Lamy`, `Lamy_Log`, `Variational`\n\n- `infer_pressures(Mesh,dict_tensions,mode='Variational', P0 = 0)`: \nWe infer relative pressures by inverting membrane equilibrium relation\n    - `Mesh` is a `DCEL_Data` object\n    -  `dict_tensions` is the dictionnary obtained with `infer_tension`\n    - `P0` has to be defined as we only infer relative pressures\n    - `mode` is the formula used to infer the pressures. It has to be choosen among: `Variational`, `Laplace`\n\n#### 3 - Visualize\n\nThis package is then built around several functions, each of them taking as an entry a `Mesh` object: \n- `plot_tension_inference(Mesh,dict_tensions=None,alpha = 0.05, scalar_quantities = False, scattered = False, scatter_coeff=0.2)`: Which plots surface tensions by inverting Young-Dupré relations\n    - `Mesh` is a `DCEL_Data` object\n    - `dict_tensions` is the dictionnary obtained with `infer_tension`, and is computed automatically if unspecified. \n    - `alpha` : p_value threshold when displaying values: Values beyond the alpha and 1-alpha quantiles are clipped \n    - `scalar_quantities`: plot of vertex volume and area derivatives, of mean, gaussian curvatures, and principal curvatures discrepancy. Can be quite long for big meshes\n    - `scattered`: scattered view of the mesh\n    - `scatter_coeff`: amount of displacement if scattered is activated\n\n \n- `plot_force_inference(Mesh,dict_tensions = None, dict_pressure = None,alpha = 0.05, scalar_quantities = False, scattered = False, scatter_coeff=0.2)`: Which plots surface tensions, pressures and principal directions of the stress tensor\n    - `Mesh` is a `DCEL_Data` object\n    - `dict_tensions` is the dictionnary obtained with `infer_tension`, and is computed automatically if unspecified. \n    - `dict_pressure` is the dictionnary obtained with `infer_pressure`, and is computed automatically if unspecified. \n    - `alpha` : p_value threshold when displaying values: Values beyond the alpha and 1-alpha quantiles are clipped \n    - `scalar_quantities`: plot of vertex volume and area derivatives, of mean, gaussian curvatures, and principal curvatures discrepancy. Can be quite long for big meshes\n    - `scattered`: scattered view of the mesh\n    - `scatter_coeff`: amount of displacement if scattered is activated\n \n- `plot_valid_junctions(Mesh)`: Valid junctions are plotted in green, and unstable junctions are plotted in red. This is used to assess the validity of the inference\n    - `Mesh` is a `DCEL_Data` object\n\n\n\n\n\n---\n### Biological use-cases\n#### Phallusia mammillata\nPhallusia mammillata is a solitary marine tunicate of the ascidian class known for its stereotypical development. As the embryo develops freely, without any constraint, we can do a full force inference and infer its tensions, pressures and stresses.\nWe use data from [Guignard, L., Fiúza, U. et al.](https://www.science.org/doi/10.1126/science.aar5663)\n\n<img src=\"Images_github_repo/Ascidians.png\" alt=\"drawing\" width=\"900\"/>\n\n\n#### C.elegans, constrained within a shell\nCaenorhabditis elegans is a widely studied model organism, with one of the most reproducible development. This earthworm is developing in a shell. As the shell topology is unknown, the pressures are not accessible. However we can still use Young-Dupré relationships to deduce the surface tensions of the membranes. We use data from the [Cao, J., Guan, G., Ho, V.W.S. et al.](https://doi.org/10.1038/s41467-020-19863-x)\n\n<img src=\"Images_github_repo/CElegans.png\" alt=\"drawing\" width=\"900\"/>\n\n#### View scalar quantities on surface meshes\n\nGaussian and mean curvature can be plotted on our meshes, and are useful to study the properties of surfaces obtained from simulations. \nWe also plot the vertex area and volume derivatives, that appears in our variational formulas, the difference between the two principal curvatures and the sphere-fit residual that can be used to detect robust non-spherical CMC surfaces (see our paper for more details)\nThey can be obtained by putting the option `scalar_quantities = True` when viewing the forces. \n\n<img src=\"Images_github_repo/scalar_quantities.png\" alt=\"drawing\" width=\"900\"/>\n\n- Gaussian Curvature is computed using the angle defect formula.\n- Mean Curvature is computed using the cotan formula.\n\nTo see the code of each of these use-cases, please load the associated jupyter notebooks in the folder Notebooks\n\n---\n\n\n### Credits, contact, citations\nIf you use this tool, please cite the associated preprint: \nDo not hesitate to contact Sacha Ichbiah and Hervé Turlier for practical questions and applications. \nWe hope that **foambryo** could help biologists and physicists to shed light on the mechanical aspects of early development.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sacha-ichbiah/foambryo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "foambryo",
    "package_url": "https://pypi.org/project/foambryo/",
    "platform": null,
    "project_url": "https://pypi.org/project/foambryo/",
    "project_urls": {
      "Homepage": "https://github.com/sacha-ichbiah/foambryo",
      "Team website": "https://www.turlierlab.com/"
    },
    "release_url": "https://pypi.org/project/foambryo/0.1.1/",
    "requires_dist": [
      "numpy (>=1.21.6)",
      "polyscope (>=1.2.0)",
      "scipy (>=1.4.1)",
      "delaunay-watershed-3d (>=0.1.3)",
      "networkx (>=2.5.1)",
      "matplotlib (>=3.3.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Tension inference for 3D cell assemblies",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16716874,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7af0c12bb451de65b49d24f18fa2a9321137dfb94c0946b0a395173aaa979047",
          "md5": "561945234918fa4701525dfd6cf3bb9e",
          "sha256": "207fe4f47149bb2c70642a30d9863847fc7390890170abcaadf84ce6dbe244c8"
        },
        "downloads": -1,
        "filename": "foambryo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "561945234918fa4701525dfd6cf3bb9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4706,
        "upload_time": "2023-02-06T20:33:52",
        "upload_time_iso_8601": "2023-02-06T20:33:52.083505Z",
        "url": "https://files.pythonhosted.org/packages/7a/f0/c12bb451de65b49d24f18fa2a9321137dfb94c0946b0a395173aaa979047/foambryo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a967753f33235926d86e4c5b1a6a58fa279a99d3d9eef7612c178cc5d240dde5",
          "md5": "a6a6d351eea0cfde9f09a99fcdac9009",
          "sha256": "b35c9d62a9decc2012f7fc8aa3c0107d481e91a40e0293f6c48ce5bb61157201"
        },
        "downloads": -1,
        "filename": "foambryo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6a6d351eea0cfde9f09a99fcdac9009",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5037,
        "upload_time": "2023-02-06T20:33:54",
        "upload_time_iso_8601": "2023-02-06T20:33:54.483460Z",
        "url": "https://files.pythonhosted.org/packages/a9/67/753f33235926d86e4c5b1a6a58fa279a99d3d9eef7612c178cc5d240dde5/foambryo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8607bc1436afb09d24cb62a239e071258f2f7e5c467294c34c5fa59bc1093bdb",
          "md5": "8ec7171180604ec35b439578eab32aa4",
          "sha256": "b52a3b3aedcdf19e28d2f616f6dc781b62998a8136e63324534a1ff54792f9f8"
        },
        "downloads": -1,
        "filename": "foambryo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ec7171180604ec35b439578eab32aa4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4698,
        "upload_time": "2023-02-06T20:36:40",
        "upload_time_iso_8601": "2023-02-06T20:36:40.700588Z",
        "url": "https://files.pythonhosted.org/packages/86/07/bc1436afb09d24cb62a239e071258f2f7e5c467294c34c5fa59bc1093bdb/foambryo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db48622701462a1f3988cba2504cc7ea4cd426ce2aa947c9296ac834648abe9d",
          "md5": "954f13ffa198f951819a821db124283c",
          "sha256": "47240043aa4425bf1b95d75c312bfc1f488f750c8977eb9b1c67b308fbae4395"
        },
        "downloads": -1,
        "filename": "foambryo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "954f13ffa198f951819a821db124283c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5028,
        "upload_time": "2023-02-06T20:36:44",
        "upload_time_iso_8601": "2023-02-06T20:36:44.072047Z",
        "url": "https://files.pythonhosted.org/packages/db/48/622701462a1f3988cba2504cc7ea4cd426ce2aa947c9296ac834648abe9d/foambryo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8607bc1436afb09d24cb62a239e071258f2f7e5c467294c34c5fa59bc1093bdb",
        "md5": "8ec7171180604ec35b439578eab32aa4",
        "sha256": "b52a3b3aedcdf19e28d2f616f6dc781b62998a8136e63324534a1ff54792f9f8"
      },
      "downloads": -1,
      "filename": "foambryo-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ec7171180604ec35b439578eab32aa4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4698,
      "upload_time": "2023-02-06T20:36:40",
      "upload_time_iso_8601": "2023-02-06T20:36:40.700588Z",
      "url": "https://files.pythonhosted.org/packages/86/07/bc1436afb09d24cb62a239e071258f2f7e5c467294c34c5fa59bc1093bdb/foambryo-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db48622701462a1f3988cba2504cc7ea4cd426ce2aa947c9296ac834648abe9d",
        "md5": "954f13ffa198f951819a821db124283c",
        "sha256": "47240043aa4425bf1b95d75c312bfc1f488f750c8977eb9b1c67b308fbae4395"
      },
      "downloads": -1,
      "filename": "foambryo-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "954f13ffa198f951819a821db124283c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5028,
      "upload_time": "2023-02-06T20:36:44",
      "upload_time_iso_8601": "2023-02-06T20:36:44.072047Z",
      "url": "https://files.pythonhosted.org/packages/db/48/622701462a1f3988cba2504cc7ea4cd426ce2aa947c9296ac834648abe9d/foambryo-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}