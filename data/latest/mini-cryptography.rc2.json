{
  "info": {
    "author": "Antanas Bendoraitis",
    "author_email": "antanasbendoraitis7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![mini-cryptography](https://github.com/antanasbendoraitis/mini-cryptography/blob/master/images/mini-cryptography.png?raw=true)\r\n## mini-cryptography: mini ECDSA cryptography and Mekle tree root calculation\r\nMini-cryptography is a library that has ECC (Elliptic Curve Cryptography) arithmetic operations, including ECDSA (Elliptic Curve Digital Signature Algorithm) signature formation and verification. It also has a merkle tree root calculation.</br></br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Documentation: [Mini-cryptography](https://antanasbendoraitis.github.io/mini-cryptography)</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Source-code: [Github](https://github.com/antanasbendoraitis/mini-cryptography.git)<br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Bug reports: [Github](https://github.com/antanasbendoraitis/mini-cryptography/issues)</br></br>\r\n<b>This library is suited for learning, but it is better not to use it for production.</b>\r\n## Content\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Dependencies](#dependencies)</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Installation](#installation)</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Uninstallation](#uninstallation)</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[User guide](#user-guide)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[ECDSA](#ecdsa)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Data for ECDSA examples](#data-for-ecdsa-examples)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[ECDSA examples](#ecdsa-examples)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Merkle](#merkle)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Data for Merkle examples](#data-for-merkle-examples)</br>\r\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[Merkle examples](#merkle-examples)</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;[License](#license)</br>\r\n## Dependencies\r\nMini-cryptography supports Python 3.7+.</br>\r\nInstallation automatically includes the [tinyec](https://pypi.org/project/tinyec/) library.\r\n### Installation\r\nThe library can be installed from PyPI:\r\n```\r\npip install mini-cryptography\r\n```\r\n### Uninstallation\r\nThe library can be uninstalled using:\r\n```\r\npip uninstall mini-cryptography\r\n```\r\n### User guide\r\nThere are 2 main classes:</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Ecdsa - has ECDSA arithmetic operations, including signature formation and verification;</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Merkle - has a merkle tree root calculation.\r\n\r\nRequired libraries\r\n``` Python\r\nfrom mini_cryptography import merkle\r\nfrom mini_cryptography import ecdsa\r\nimport hashlib\r\n```\r\n#### ECDSA\r\nOther required classes:</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Point - ECDSA point that has x and y coordinates;</br>\r\n&emsp;&emsp;&emsp;φ&nbsp;&nbsp;Field - describes the ECDSA field.\r\n##### Data for ECDSA examples\r\n[Secp384r1](https://neuromancer.sk/std/secg/secp384r1) is 384-bit prime field Weierstrass curve. Also known as [P-384](https://neuromancer.sk/std/nist/P-384) [ansip384r1](https://neuromancer.sk/std/x963/ansip384r1):\r\n``` Python\r\na = 39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112316\r\nb = 27580193559959705877849011840389048093056905856361568521428707301988689241309860865136260764883745107765439761230575\r\nn = 39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643\r\np = 39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319\r\nG = ecdsa.Point(\r\n    26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087,\r\n    8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871\r\n)\r\nsecp384r1 = ecdsa.Field(a, b, n, p, G)\r\ncurve = ecdsa.Ecdsa(field=secp384r1, name=\"secp384r1\")\r\n```\r\nPoints\r\n``` Python\r\npoint1 = ecdsa.Point(\r\n    19577993669543055159462232654227477804059834554938749056365059575367343238573934152231932832497698572508881172084304,\r\n    34797297628126597108728033628292920232095535295240081944254459873403593475466847089395925227525676205111687199013609\r\n)\r\npoint2 = ecdsa.Point(\r\n    2643888095364097454558349481745047911629089192351741699089972264282318601908091592262966275642198233545325090846186,\r\n    12384549089646028340756024322986515983214437514151244063613237375835994573258040845173892755352541890195338888681840\r\n)\r\n```\r\n##### ECDSA examples\r\nPoints sum\r\n``` Python\r\nnew_point = sum_points(point1, point2)\r\n```\r\n``` Python\r\nResult:\r\nNew point (\r\n    22152009089199730593582524338115427010336291169893373839910753311913746007332469659451755453856401184556487920772225,\r\n    21415530147108271193135517297779083081913015961082356748098427685923206883047231450346172563957532258197936273940105\r\n)\r\n```\r\nPoints multiplication\r\n``` Python\r\nmultiplier = 9868959070921577617284768940259093768032668379810297735137924030066340321810481073797782613683403119141615137083587\r\nnew_point = multiply_points(point1, multiplier)\r\n```\r\n``` Python\r\nResult: \r\nNew point (\r\n    14103764458811902000156928461250459647654661504776098395816220167714718139473397796549037360732342313833270939242263,\r\n    17395148190829553535748807655250157906889415207238492158034708401150356646081290450883354819984464883347616139045011\r\n)\r\n```\r\nGenerate random private key [1, n-1]\r\n``` Python\r\nprivateKey = curve.private_key_generator()\r\n```\r\n``` Python\r\nResult: privateKey = 20989443543778090555157442102131049817299902423795685309899862760056430951462397686708870733055917820122718887042439\r\n```\r\nMultiplication of G (base) point from the given multiplier\r\n``` Python\r\npublic_key = curve.G_multiplication(privateKey) # or curve.calculate_public_key(privateKey)\r\n```\r\n``` Python\r\nResult: \r\nG(x, y) (\r\n    30040694804942853208177610713088115928148181688856632998897580287365858436344609590182460206850552050293936278998346,\r\n    17559245262757783022105893899857708160332511010412356224688036071313308531776780869864952047367968387454976435887533\r\n)\r\n```\r\nGenerate random k [1, ... n-1]\r\n``` Python\r\nk = curve.k_generator()\r\n```\r\n``` Python\r\nResult: 11000\r\n```\r\nSign message\r\n``` Python\r\nmessage = 'Religio, Doctrina, Civilitas, prae omnibus Virtus'\r\nhash = int(hashlib.sha1(message.encode()).hexdigest(),base=16)\r\n\r\nr, s = curve.sign_message(privateKey, k, hash=hash)\r\n```\r\n``` Python\r\nResult:\r\nSignature (\r\n\tr = 22152009089199730593582524338115427010336291169893373839910753311913746007332469659451755453856401184556487920772225, \r\n\ts = 33247802217962351080804096577524498301009516670239406026864057032340769378746165513387841747729702616554540985061660\r\n)\r\n```\r\nVerify signature validity\r\n``` Python\r\nverification = curve.verify_signature(r, s, hash, public_key)\r\n```\r\n``` Python\r\nResult: True\r\n```\r\n#### Merkle\r\n##### Data for Merkle examples\r\n``` Python\r\nhashList = [\r\n    '01000000295c297aee86096dcf6092',\r\n    '0100000007bdc63ab3e74058a87b92',\r\n    '01000000017b23260463311a4d1936',\r\n    '0100000007bdc63ab3e74058a87b92'\r\n]\r\n```\r\n##### Merkle examples\r\nMerkle root calculation from transactions\r\n``` Python\r\nmerkle.Merkle().merkle_root(hashList, 0) #if 0 transactions are hashed, then 1 transactions are not hashed. \r\n```\r\n``` Python\r\nResult: '92599579e207c2553a712247ab0f2026876d2b078324b724e709d715d22e6dbb'\r\n```\r\nCalculate transaction hash\r\n``` Python\r\nmerkle.Merkle().transaction_hash(hashList[0])\r\n```\r\n``` Python\r\nResult: b'3860b826dfc02feed1bbeb908eb0b2c0f5ea32a1b12ef1e8d87d2bf0e3802795'\r\n```\r\n### License\r\n[GNU General Public License v3 or later (GPLv3+)](https://github.com/antanasbendoraitis/mini-cryptography/blob/master/LICENSE)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antanasbendoraitis/mini-cryptography.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mini-cryptography",
    "package_url": "https://pypi.org/project/mini-cryptography/",
    "platform": null,
    "project_url": "https://pypi.org/project/mini-cryptography/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Duomenu-saugojimo-sistema/Duomenu-saugojimo-sistema-paremta-bloku-grandines-technologija/issues",
      "Homepage": "https://github.com/antanasbendoraitis/mini-cryptography.git"
    },
    "release_url": "https://pypi.org/project/mini-cryptography/0.0.2/",
    "requires_dist": [
      "tinyec"
    ],
    "requires_python": ">=3.7",
    "summary": "Package that contains ECDSA arithmetics and Merkle tree root calculation",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17442992,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d37e3be89d646205ab735fd27a7d019bf0ec927cfe75858a1961e802b97db5e",
          "md5": "9f9cd9fdb9c0557071233689336cbe98",
          "sha256": "fa80cc327b777d70d189cad04a7e8690da0cd146f6868ffa03f8efa45d04e53d"
        },
        "downloads": -1,
        "filename": "mini_cryptography-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f9cd9fdb9c0557071233689336cbe98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20147,
        "upload_time": "2023-03-21T20:00:17",
        "upload_time_iso_8601": "2023-03-21T20:00:17.505622Z",
        "url": "https://files.pythonhosted.org/packages/2d/37/e3be89d646205ab735fd27a7d019bf0ec927cfe75858a1961e802b97db5e/mini_cryptography-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b37daec52bc25b84b3fe91dfa61811e170a4e1fb20c80ad43891d3485428b6",
          "md5": "7ff836d85a3de14ffbf44881db3af0ab",
          "sha256": "a5ac950a0d3d66231fe5c69487381554c46ccab4598a59c15ecb7603b030b22b"
        },
        "downloads": -1,
        "filename": "mini-cryptography-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ff836d85a3de14ffbf44881db3af0ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22587,
        "upload_time": "2023-03-21T20:00:19",
        "upload_time_iso_8601": "2023-03-21T20:00:19.454012Z",
        "url": "https://files.pythonhosted.org/packages/f2/b3/7daec52bc25b84b3fe91dfa61811e170a4e1fb20c80ad43891d3485428b6/mini-cryptography-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f735193455afdd13fa994a2c82aa5ed901a27f2cf0d99ac5c3d8ddbca255c5b",
          "md5": "f93c16c84d578573831376ad98a0cca7",
          "sha256": "33583a927dc933a434e3e46498bd5772fcb594f4ec08b21058b780aa69843fd2"
        },
        "downloads": -1,
        "filename": "mini_cryptography-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f93c16c84d578573831376ad98a0cca7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26453,
        "upload_time": "2023-03-25T15:57:25",
        "upload_time_iso_8601": "2023-03-25T15:57:25.937110Z",
        "url": "https://files.pythonhosted.org/packages/0f/73/5193455afdd13fa994a2c82aa5ed901a27f2cf0d99ac5c3d8ddbca255c5b/mini_cryptography-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25ceed03ca39ad913f52e68894485fdabf3d915790337d5295a65f4bc9ed8386",
          "md5": "3d63eb8f1635925aab3661afea82b9bd",
          "sha256": "20b1d9a1563404eae0a253a92e49367316e9bb7a7d81494d83a6e88bc4e30a3c"
        },
        "downloads": -1,
        "filename": "mini-cryptography-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d63eb8f1635925aab3661afea82b9bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26921,
        "upload_time": "2023-03-25T15:57:30",
        "upload_time_iso_8601": "2023-03-25T15:57:30.006713Z",
        "url": "https://files.pythonhosted.org/packages/25/ce/ed03ca39ad913f52e68894485fdabf3d915790337d5295a65f4bc9ed8386/mini-cryptography-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f735193455afdd13fa994a2c82aa5ed901a27f2cf0d99ac5c3d8ddbca255c5b",
        "md5": "f93c16c84d578573831376ad98a0cca7",
        "sha256": "33583a927dc933a434e3e46498bd5772fcb594f4ec08b21058b780aa69843fd2"
      },
      "downloads": -1,
      "filename": "mini_cryptography-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f93c16c84d578573831376ad98a0cca7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26453,
      "upload_time": "2023-03-25T15:57:25",
      "upload_time_iso_8601": "2023-03-25T15:57:25.937110Z",
      "url": "https://files.pythonhosted.org/packages/0f/73/5193455afdd13fa994a2c82aa5ed901a27f2cf0d99ac5c3d8ddbca255c5b/mini_cryptography-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25ceed03ca39ad913f52e68894485fdabf3d915790337d5295a65f4bc9ed8386",
        "md5": "3d63eb8f1635925aab3661afea82b9bd",
        "sha256": "20b1d9a1563404eae0a253a92e49367316e9bb7a7d81494d83a6e88bc4e30a3c"
      },
      "downloads": -1,
      "filename": "mini-cryptography-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3d63eb8f1635925aab3661afea82b9bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26921,
      "upload_time": "2023-03-25T15:57:30",
      "upload_time_iso_8601": "2023-03-25T15:57:30.006713Z",
      "url": "https://files.pythonhosted.org/packages/25/ce/ed03ca39ad913f52e68894485fdabf3d915790337d5295a65f4bc9ed8386/mini-cryptography-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}