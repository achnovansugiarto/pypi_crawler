{
  "info": {
    "author": "",
    "author_email": "Christian Brinch <cbri@food.dtu.dk>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "#  pyCoDaMath\n\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n\n\npyCoDaMath provides compositional data (CoDa) analysis tools for Python\n\n- **Source code:** https://bitbucket.org/genomicepidemiology/pycoda\n\n## Getting Started\n\nThis package extends the Pandas dataframe object with various CoDa tools. It also provides a set of plotting functions for CoDa figures.\n\n### Installation\n\nClone the git repo to your local hard drive:\n\n    git clone https://brinch@bitbucket.org/genomicepidemiology/pycoda.git\n\nEnter pycoda directory and type\n\n    pip install ./\n\n### Usage\n\nThe pyCoDaMath module is loaded as\n\n    import pycodamath\n\nAt this point, in order to get CLR values from a Pandas DataFrame df, do\n\n    df.coda.clr()\n\n\n## Documentation\n\n### CLR transformation - point estimate\n    df.coda.clr()\n\nReturns centered logratio coefficients. If the data frame contains zeros, values\nwill be replaced by the Aitchison mean point estimate.\n\n### CLR transformation - standard deviation\n    df.coda.clr_std(n_samples=5000)\n\nReturns the standard deviation of n_samples random draws in CLR space.\n\n**Parameters**\n\n- n_samples (int) - Number of random draws from a Dirichlet distribution.\n\n\n### ALR transformation - point estimate\n    df.coda.alr(part=None)\n\nSame as clr() but returning additive logratio values. If part is None, then the last part of the composition is used, otherwise part is used as denominator.\n\n**Parameters**\n\n- part (str) - Name of the part to be used as denominator.   \n\n\n### ALR transformation - standard deviation\n    df.coda.alr_std(part=None, n_samples=5000)\n\nSame as clr_std, but in ALR space.\n\n**Parameters**\n\n- part (str) - Name of the part to be used as denominator.   \n\n- n_samples (int) - Number of random draws from a Dirichlet distribution.\n\n\n### ILR transformation - point estimate\n    df.coda.ilr(psi=None)\n\nSame as clr() but for isometric logratio transform. An orthonormal basis can be\nprovided as psi. If no basis is given, a default sequential binary partition basis will be used.\n\n**Parameters**\n\n- psi (array_like) - Orthonormal basis.\n\n### ILR transformation - standard deviation\n    df.coda.ilr_std(psi=None, n_samples=5000)\n\nThis method does not exist (yet).\n\n\n### Bayesian zero replacement\n    df.coda.zero_replacement(n_samples=5000)\n\nReturns a count table with zero values replaced by finite values using Bayesian inference.\n\n**Parameters**\n\n- n_samples (int) - Number of random draws from a Dirichlet distribution.\n\n\n### Closure\n    df.coda.closure(N)\n\nApply closure to constant N to the composition.\n\n**Parameters**\n\n- N (int) - Closure constant.\n\n### Total variance\n    df.coda.totvar()\n\nCalculates the total variance of a set of compositions.\n\n### Geometric mean\n    df.coda.gmean()\n\nCalculates the geometric mean of a set of compositions.\n\n### Centering\n    df.coda.center()\n\nCenters (and scales) the composition by dividing by the geometric mean and powering by the reciprocal variance.\n\n\n\n## Plotting functions\n\n### PCA biplot\n    class pycoda.pca.Biplot(data, default=True)\n\nPlots a PCA biplot. Set default to False for an empty plot.\nThe parameter data (DataFrame) is the data to be analyzed. Use counts, not CLR values.\n\nA number of methods are available for customizing the biplot:\n\n- plotloadings(cutoff=0, scale=None, labels=None)\n- plotloadinglabels(labels=None)\n- plotscores(group=None, palette=None, legend=True, labels=None)\n- plotscorelables(labels=None)\n- plotellipses(group=None, palette=None)\n- plotcentroids(group=None, palette=None)\n- plothulls(group=None, palette=None)\n- plotcontours(group=None, palette=None, size=None, levels=None)\n- removepatches()\n- removescores()\n- removelabels()\n\nThe keyword labels is a list of labelnames. If labels is None, all labels are plottet. Use labels=[] for no labels.\n\nThe keyword group is a Pandas dataframe with index equal to the index of data.\n\nThe keyword palette is a dict with colors to use to each unique member of group.\n\nExample\n    import pycoda as coda\n    import pandas as pd\n\n    data = pd.read_csv('example/kilauea_iki_chem.csv')\n    mypca = coda.pca.Biplot(data)\n    mypca.plothulls()\n    mypca.removelabels()\n    mypca.plotloadinglabels(['FeO'])\n\n### Ternary diagram\n    pycoda.plot.ternary()\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyCoDaMath",
    "package_url": "https://pypi.org/project/pyCoDaMath/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyCoDaMath/",
    "project_urls": {
      "Bug Tracker": "https://bitbucket.org/genomicepidemiology/pycodamath/issues?status=new&status=open&is_spam=!spam",
      "Homepage": "https://bitbucket.org/genomicepidemiology/pycodamath"
    },
    "release_url": "https://pypi.org/project/pyCoDaMath/1.0/",
    "requires_dist": [
      "matplotlib (>=3.1.1)",
      "numpy (>=1.17.2)",
      "pandas (>=0.25.1)",
      "python-ternary (>=1.0.6)",
      "scipy (>=1.3.1)",
      "webcolors (>=1.13)",
      "adjustText (==0.7.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "Compositional data (CoDa) analysis tools for Python",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17524547,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18424722ee92c467bb258c26b67253f7bb0b1d00bf5e7c4c270d25c879ece1dc",
          "md5": "2bcb394670ab6f363a3869522d36a1ee",
          "sha256": "a60231a42751c33e6d2931d802253e2cf47fe93c01e20f13d86f9d32cc8d6f1a"
        },
        "downloads": -1,
        "filename": "pyCoDaMath-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bcb394670ab6f363a3869522d36a1ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12574,
        "upload_time": "2023-03-31T09:46:01",
        "upload_time_iso_8601": "2023-03-31T09:46:01.216868Z",
        "url": "https://files.pythonhosted.org/packages/18/42/4722ee92c467bb258c26b67253f7bb0b1d00bf5e7c4c270d25c879ece1dc/pyCoDaMath-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b01cb504ee3da026b066d5c692d93996a21ef6e706b009c7a26aba2b121c7f5",
          "md5": "e2f5894f6c72f48a9985c4364f3f9be1",
          "sha256": "c6a336d9b65185539324c6cfce53e28bbdfcd9b03936c5d33a53770d851165e9"
        },
        "downloads": -1,
        "filename": "pyCoDaMath-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2f5894f6c72f48a9985c4364f3f9be1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10959,
        "upload_time": "2023-03-31T09:46:02",
        "upload_time_iso_8601": "2023-03-31T09:46:02.882998Z",
        "url": "https://files.pythonhosted.org/packages/2b/01/cb504ee3da026b066d5c692d93996a21ef6e706b009c7a26aba2b121c7f5/pyCoDaMath-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18424722ee92c467bb258c26b67253f7bb0b1d00bf5e7c4c270d25c879ece1dc",
        "md5": "2bcb394670ab6f363a3869522d36a1ee",
        "sha256": "a60231a42751c33e6d2931d802253e2cf47fe93c01e20f13d86f9d32cc8d6f1a"
      },
      "downloads": -1,
      "filename": "pyCoDaMath-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bcb394670ab6f363a3869522d36a1ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12574,
      "upload_time": "2023-03-31T09:46:01",
      "upload_time_iso_8601": "2023-03-31T09:46:01.216868Z",
      "url": "https://files.pythonhosted.org/packages/18/42/4722ee92c467bb258c26b67253f7bb0b1d00bf5e7c4c270d25c879ece1dc/pyCoDaMath-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b01cb504ee3da026b066d5c692d93996a21ef6e706b009c7a26aba2b121c7f5",
        "md5": "e2f5894f6c72f48a9985c4364f3f9be1",
        "sha256": "c6a336d9b65185539324c6cfce53e28bbdfcd9b03936c5d33a53770d851165e9"
      },
      "downloads": -1,
      "filename": "pyCoDaMath-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e2f5894f6c72f48a9985c4364f3f9be1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10959,
      "upload_time": "2023-03-31T09:46:02",
      "upload_time_iso_8601": "2023-03-31T09:46:02.882998Z",
      "url": "https://files.pythonhosted.org/packages/2b/01/cb504ee3da026b066d5c692d93996a21ef6e706b009c7a26aba2b121c7f5/pyCoDaMath-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}