{
  "info": {
    "author": "Tom De Smedt",
    "author_email": "tom@organisms.be",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: Dutch",
      "Natural Language :: English",
      "Natural Language :: French",
      "Natural Language :: German",
      "Natural Language :: Italian",
      "Natural Language :: Spanish",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Pattern\n=======\n\n.. image:: https://travis-ci.org/pattern3/pattern.svg?branch=master\n    :target: https://travis-ci.org/pattern3/pattern\n\nPattern is a web mining module for Python. It has tools for:\n\n-  Data Mining: web services (Google, Twitter, Wikipedia), web crawler,\n   HTML DOM parser\n-  Natural Language Processing: part-of-speech taggers, n-gram search,\n   sentiment analysis, WordNet\n-  Machine Learning: vector space model, clustering, classification\n   (KNN, SVM, Perceptron)\n-  Network Analysis: graph centrality and visualization.\n\nIt is well documented and bundled with 50+ examples and 350+ unit tests.\nThe source code is licensed under BSD and available from\nhttp://www.clips.ua.ac.be/pages/pattern.\n\n.. figure:: http://www.clips.ua.ac.be/media/pattern_schema.gif\n   :alt: Pattern example workflow\n\n   Pattern example workflow\nVersion\n-------\n\n2.6\n\nLicense\n-------\n\n**BSD**, see ``LICENSE.txt`` for further details.\n\nInstallation\n------------\n\nPattern is written for Python 2.5+ (no support for Python 3 yet). The\nmodule has no external dependencies except when using LSA in the\npattern.vector module, which requires NumPy (installed by default on Mac\nOS X). To install Pattern so that it is available in all your scripts,\nunzip the download and from the command line do:\n\n.. code:: bash\n\n    cd pattern-2.6\n    python setup.py install\n\nIf you have pip, you can automatically download and install from the\nPyPi repository:\n\n.. code:: bash\n\n    pip install pattern\n\nIf none of the above works, you can make Python aware of the module in\nthree ways: - Put the pattern folder in the same folder as your script.\n- Put the pattern folder in the standard location for modules so it is\navailable to all scripts: \\* ``c:\\python26\\Lib\\site-packages\\``\n(Windows), \\* ``/Library/Python/2.6/site-packages/`` (Mac OS X), \\*\n``/usr/lib/python2.6/site-packages/`` (Unix). - Add the location of the\nmodule to ``sys.path`` in your script, before importing it:\n\n.. code:: python\n\n    MODULE = '/users/tom/desktop/pattern'\n    import sys; if MODULE not in sys.path: sys.path.append(MODULE)\n    from pattern.en import parsetree\n\nExample\n-------\n\nThis example trains a classifier on adjectives mined from Twitter.\nFirst, tweets that contain hashtag #win or #fail are collected. For\nexample: \"$20 tip off a sweet little old lady today #win\". The word\npart-of-speech tags are then parsed, keeping only adjectives. Each tweet\nis transformed to a vector, a dictionary of adjective → count items,\nlabeled ``WIN`` or ``FAIL``. The classifier uses the vectors to learn\nwhich other tweets look more like ``WIN`` or more like ``FAIL``.\n\n.. code:: python\n\n    from pattern.web    import Twitter\n    from pattern.en     import tag\n    from pattern.vector import KNN, count\n\n    twitter, knn = Twitter(), KNN()\n\n    for i in range(1, 3):\n        for tweet in twitter.search('#win OR #fail', start=i, count=100):\n            s = tweet.text.lower()\n            p = '#win' in s and 'WIN' or 'FAIL'\n            v = tag(s)\n            v = [word for word, pos in v if pos == 'JJ'] # JJ = adjective\n            v = count(v) # {'sweet': 1}\n            if v:\n                knn.train(v, type=p)\n\n    print knn.classify('sweet potato burger')\n    print knn.classify('stupid autocorrect')\n\nDocumentation\n-------------\n\nhttp://www.clips.ua.ac.be/pages/pattern\n\nReference\n---------\n\nDe Smedt, T., Daelemans, W. (2012). Pattern for Python. *Journal of\nMachine Learning Research, 13*, 2031–2035.\n\nContribute\n----------\n\nThe source code is hosted on GitHub and contributions or donations are\nwelcomed, see the `developer\ndocumentation <http://www.clips.ua.ac.be/pages/pattern#contribute>`__.\nIf you use Pattern in your work, please cite our reference paper.\n\nBundled dependencies\n--------------------\n\nPattern is bundled with the following data sets, algorithms and Python\npackages:\n\n-  **Beautiful Soup**, Leonard Richardson\n-  **Brill tagger**, Eric Brill\n-  **Brill tagger for Dutch**, Jeroen Geertzen\n-  **Brill tagger for German**, Gerold Schneider & Martin Volk\n-  **Brill tagger for Spanish**, trained on Wikicorpus (Samuel Reese &\n   Gemma Boleda et al.)\n-  **Brill tagger for French**, trained on Lefff (Benoît Sagot & Lionel\n   Clément et al.)\n-  **Brill tagger for Italian**, mined from Wiktionary\n-  **English pluralization**, Damian Conway\n-  **Spanish verb inflection**, Fred Jehle\n-  **French verb inflection**, Bob Salita\n-  **Graph JavaScript framework**, Aslak Hellesoy & Dave Hoover\n-  **LIBSVM**, Chih-Chung Chang & Chih-Jen Lin\n-  **LIBLINEAR**, Rong-En Fan et al.\n-  **NetworkX centrality**, Aric Hagberg, Dan Schult & Pieter Swart\n-  **PDFMiner**, Yusuke Shinyama\n-  **Python docx**, Mike Maccana\n-  **PyWordNet**, Oliver Steele\n-  **simplejson**, Bob Ippolito\n-  **spelling corrector**, Peter Norvig\n-  **Universal Feed Parser**, Mark Pilgrim\n-  **WordNet**, Christiane Fellbaum et al.\n\nAcknowledgements\n----------------\n\n**Authors:**\n\n-  Tom De Smedt (tom@organisms.be)\n-  Walter Daelemans (walter.daelemans@ua.ac.be)\n\n**Contributors (chronological):**\n\n-  Frederik De Bleser\n-  Jason Wiener\n-  Daniel Friesen\n-  Jeroen Geertzen\n-  Thomas Crombez\n-  Ken Williams\n-  Peteris Erins\n-  Rajesh Nair\n-  F. De Smedt\n-  Radim Řehůřek\n-  Tom Loredo\n-  John DeBovis\n-  Thomas Sileo\n-  Gerold Schneider\n-  Martin Volk\n-  Samuel Joseph\n-  Shubhanshu Mishra\n-  Robert Elwell\n-  Fred Jehle\n-  Antoine Mazières + fabelier.org\n-  Rémi de Zoeten + closealert.nl\n-  Kenneth Koch\n-  Jens Grivolla\n-  Fabio Marfia\n-  Steven Loria\n-  Colin Molter + tevizz.com\n-  Peter Bull\n-  Maurizio Sambati\n-  Dan Fu\n-  Salvatore Di Dio\n-  Vincent Van Asch\n-  Frederik Elwert\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.clips.ua.ac.be/pages/pattern",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pattern3",
    "package_url": "https://pypi.org/project/pattern3/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pattern3/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.clips.ua.ac.be/pages/pattern"
    },
    "release_url": "https://pypi.org/project/pattern3/3.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Web mining module for Python.",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2703627,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b0cdef740f1aaa8c7e3a8c57779187837478f0942eb00b33d4f96246ee63143",
          "md5": "ab52c2b08b90db5a1171780ca1ada3a8",
          "sha256": "d9de94d7347853af279c67b0c15c452893614cfb2ac5e641a2dcfb84e926a5f5"
        },
        "downloads": -1,
        "filename": "pattern3-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab52c2b08b90db5a1171780ca1ada3a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23729670,
        "upload_time": "2017-03-13T21:56:24",
        "upload_time_iso_8601": "2017-03-13T21:56:24.251638Z",
        "url": "https://files.pythonhosted.org/packages/2b/0c/def740f1aaa8c7e3a8c57779187837478f0942eb00b33d4f96246ee63143/pattern3-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b0cdef740f1aaa8c7e3a8c57779187837478f0942eb00b33d4f96246ee63143",
        "md5": "ab52c2b08b90db5a1171780ca1ada3a8",
        "sha256": "d9de94d7347853af279c67b0c15c452893614cfb2ac5e641a2dcfb84e926a5f5"
      },
      "downloads": -1,
      "filename": "pattern3-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab52c2b08b90db5a1171780ca1ada3a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23729670,
      "upload_time": "2017-03-13T21:56:24",
      "upload_time_iso_8601": "2017-03-13T21:56:24.251638Z",
      "url": "https://files.pythonhosted.org/packages/2b/0c/def740f1aaa8c7e3a8c57779187837478f0942eb00b33d4f96246ee63143/pattern3-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}