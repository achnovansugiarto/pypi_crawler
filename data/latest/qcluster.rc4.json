{
  "info": {
    "author": "Aaron Rohrbaugh + (See GitHub)",
    "author_email": "chriso@qsonlabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Flake8",
      "Framework :: Pytest",
      "Framework :: tox",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Clustering",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "# QCluster\nQuick Cluster - a simple service registry for fail-over and replication.\n\n![Latest Build](https://github.com/QsonLabs/qcluster/workflows/Package%20and%20Publish%20on%20Master%20Push/badge.svg?branch=master)\n![PyPI Version](https://img.shields.io/pypi/v/QCluster)\n\n## Context and Problem\nIn modern services it is expected that fail-over, replication or both are provided out of the box. Especially in a distributed cloud architecture, where nodes can be spun up on demand, registering new services is an essential part of ensuring both scalability and reliability. There are several robust solutions for service management that include Apache Zookeeper, Istio Service Mesh, and Linkerd. Each of these either implement a proxy for traffic or have complex architecture requirements. Sometimes a service does not want the full suite of features and needs a lightweight way to handle fail-over.\n\n## Solution\nQCluster is intended to be a lightweight service that enables fail-over and replication for services that do not need the heavy lift associated with other service mesh tools. This can be achieved by:\n\n- Ensuring that QCluster clients can run in a master-less environment\n- Allowing for a master-minion model as well, which may benefit stateful applications\n- Encouraging self registration \n- Enabling built in metrics\n- Api access and client SDKs\n\n\n## Contributing\nThe QCluster project was built using tox which exposes some development tools. Running tox automatically runs flake8 to check the code style as well as running the suite of unit tests and generating code coverage reports.\n\nTo run the unit tests, simply run tox in the project directory:\n```\n[Aarons-MacBook-Pro:qcluster] Aaron% tox\n...\npy38 run-test: commands[1] | coverage report\nName                        Stmts   Miss  Cover\n-----------------------------------------------\nqcluster/__init__.py            2      0   100%\nqcluster/communication.py     147      0   100%\nqcluster/consensus.py         134      3    98%\nqcluster/qcluster.py           23      3    87%\nqcluster/registry.py           41      9    78%\nqcluster/utils.py              18      0   100%\n-----------------------------------------------\nTOTAL                         365     15    96%\npy38 run-test: commands[2] | coverage html\npy38 run-test: commands[3] | flake8 qcluster\n____________________________________________________ summary _____________________________________________________\n  py38: commands succeeded\n  congratulations :)\n```\n\nPlease keep the following practices in mind when contributing to the project:\n\n- Conform to the flake8 styling guidelines for consistency\n- Strive to add unit tests for new code added\n\n## Pipeline\n\nWe are using Github Actions to handle publishing of this package to PyPI. Upon ugprade from Alpha -> Beta -> Production, we will automate builds to be more restrictive and event driven. For now building and publishing is triggered from a manual workflow run. Navigate to the GitHub Actions tab and run the workflow. Workflow runs should be generated from the `master` branch. \n\nWe are hosting QCluster on PyPI (https://pypi.org/project/QCluster/) and run tests on the following architectures:\n\n- Ubuntu Linux (latest)\n- Macos (latest)\n- Windows (latest)\n\nSupport for other operating systems or specific operating systems can be integrated through the Github Actions matrix. \n\n## Python Support\n\nCurrently only Python 3.8 is supported, but this may run on later versions of Python. The [asyncio library](https://docs.python.org/3/library/asyncio.html) is heavily relied on which will be the main driving factor in which versions of Python are supported.\n\n## QCluster SDK\n\n### `is_leader()`\n\nUsed to determine if the current peer is the leader of the cluster.\n\n```py\ncluster = QCluster(**configuration)\nif cluster.is_leader():\n    print(\"I am the leader\")\nelse:\n    print(\"I am a follower\")\n```\n\n### `get_leader_info()`\n\nUsed to get more detailed information about the known elected leader. If no leader is elected (in cases where a majority vote is impossible to achieve), this will return `None`.\n\nThe leader will be returned in a `Peer` object which has the following properties:\n\n- host:         The host that this peer can be reached at for QCluster communication\n- port:         The port that this peer can be reached at for QCluster communication\n- identifier:   The unique string identifier of this peer\n- metadata:     A dictionary of metadata that has been supplied by the configuration file.\n\n```py\ncluster = QCluster(**configuration)\nleader = cluster.get_leader_info()\n\nprint(\"Leader communicates with QCluster on {}:{}\".format(leader.host, leader.port))\nprint(\"Leader has an identifier of: {}\".format(leader.identifier))\nprint(\"Leader has custom metadata of: {}\".format(leader.metadata))\n```\n\n```\nLeader communicates with QCluster on localhost:7001\nLeader has an identifier of: server_a\nLeader has custom metadata of: {\"custom_field\": 5\"}\n```\n\n## Examples\n\nSome examples of using QCluster are shown below using the following configuration file (adapted for individual peers with the appropriate fields changed).\n\n```JSON\n{\n    \"identifier\": \"server_a\",\n    \"listen_host\": \"localhost\",\n    \"listen_port\": 7001,\n    \"peers\": [\n        {\"host\": \"localhost\", \"port\": 7002, \"identifier\":  \"server_b\"},\n        {\"host\": \"localhost\", \"port\": 7003, \"identifier\":  \"server_c\"}\n    ]\n}\n```\n\nThis configuration represents a single peer, `server_a`, that will accept QCluster data on `localhost:7001`. It has 2 peers, `server_b` and `server_c` which can be connected to at `localhost:7002` and `localhost:7003` respectively.\n\nThe configuration file for peers `server_b` and `server_c` would be formatted similarly, but with appropriate data for each peer to know about each of the other peers.\n\n### Custom Metadata\n\nA peer can have custom metadata associated with it in the configuration file. Changing a peer entry to:\n\n```JSON\n{\"host\": \"localhost\", \"port\": 7002, \"identifier\":  \"server_b\", \"metadata\": {\"server_port\":  8002}}\n```\n\nresults in this peer having the data `{\"server_port\": 8002}` accessible to all other peers in the `metadata` property. Therefore, follower peers can have access to more information about the elected leader to perform more complex tasks as a follower (such as redirecting one's traffic to the leader).\n\n### Bare Minimum\n```py\nfrom qcluster import QCluster\nimport asyncio\nimport sys\nimport json\n\n\nasync def main():\n    conf_file = sys.argv[1]\n    with open(conf_file) as f:\n        conf = json.load(f)\n\n    identifier = conf['identifier']\n    cluster = QCluster(**conf)\n    while True:\n        if cluster.is_leader():\n            logger.info(\"I am the leader!\")\n            logger.info(\"{} is doing some work...\".format(identifier))\n        else:\n            logger.info(\"I am not the leader :(\")\n            logger.info(\"This is the leader: {}\".format(cluster.get_leader_info()))\n        await asyncio.sleep(1)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nRunning this program with the 3 versions of the configuration file for `server_a`, `server_b`, and `server_c` would result in a single peer becoming leader. The work loop of each peer would then either do \"work\" if it was the leader, or sit idle until it becomes the leader.\n\n### Advanced Examples\n\nPlease look in the examples directory for find some more in-depth and specific examples.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QsonLabs/qcluster",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "Chris O'Connor",
    "maintainer_email": "chriso@qsonlabs.com",
    "name": "QCluster",
    "package_url": "https://pypi.org/project/QCluster/",
    "platform": "",
    "project_url": "https://pypi.org/project/QCluster/",
    "project_urls": {
      "Homepage": "https://github.com/QsonLabs/qcluster"
    },
    "release_url": "https://pypi.org/project/QCluster/0.0.5/",
    "requires_dist": [
      "aiohttp"
    ],
    "requires_python": ">=3.8",
    "summary": "An SDK to enable quick clustering of microservices.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9092822,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80be0d9aa5549f5018c088460d8e5f2bc1f6ca9115bb6d747033094a683b23e7",
          "md5": "bab880ddc411fa6471d5d033b278ae43",
          "sha256": "b90c104bede40cd7b76c4307cbad076bbccdc8614a627b017af788369f626cd1"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bab880ddc411fa6471d5d033b278ae43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17398,
        "upload_time": "2020-12-12T16:29:31",
        "upload_time_iso_8601": "2020-12-12T16:29:31.454963Z",
        "url": "https://files.pythonhosted.org/packages/80/be/0d9aa5549f5018c088460d8e5f2bc1f6ca9115bb6d747033094a683b23e7/QCluster-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20bcd656c1314a912dc699bc47a39e30070c8cda6e4bd90063dbe11a31a5c4ac",
          "md5": "4dd53cfb6d051c90765fc16147b29d57",
          "sha256": "8795c164dc3e58102f106dfdd10785e042c2900cf7c3cfb51c2af30d655de8f3"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4dd53cfb6d051c90765fc16147b29d57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11324,
        "upload_time": "2020-12-12T16:29:32",
        "upload_time_iso_8601": "2020-12-12T16:29:32.453290Z",
        "url": "https://files.pythonhosted.org/packages/20/bc/d656c1314a912dc699bc47a39e30070c8cda6e4bd90063dbe11a31a5c4ac/QCluster-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cab3f7e13a413fefed2baacaff43dd83ad88f0660ca56757bb736a8bb2f68ef6",
          "md5": "76045184e2a824fa61481d9befc21b56",
          "sha256": "2e7cb5ade12175fca8f9be9cdada40c82bc3644da8ce88a6d1bb0344b83e0994"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76045184e2a824fa61481d9befc21b56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17454,
        "upload_time": "2020-12-12T18:19:53",
        "upload_time_iso_8601": "2020-12-12T18:19:53.945886Z",
        "url": "https://files.pythonhosted.org/packages/ca/b3/f7e13a413fefed2baacaff43dd83ad88f0660ca56757bb736a8bb2f68ef6/QCluster-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49ab2b9bb3bfe5afca07d7d346b62f1d9c4eb80e627b3a58d0a69dcdf063ad0c",
          "md5": "eeb95d7a94553c8615639bb9f0a351a2",
          "sha256": "0e6d5aba947c138f9ee54ceed8fbcf0113c674bf292adaf4c5db82e49963e247"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eeb95d7a94553c8615639bb9f0a351a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11623,
        "upload_time": "2020-12-12T18:19:55",
        "upload_time_iso_8601": "2020-12-12T18:19:55.059073Z",
        "url": "https://files.pythonhosted.org/packages/49/ab/2b9bb3bfe5afca07d7d346b62f1d9c4eb80e627b3a58d0a69dcdf063ad0c/QCluster-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8dab31f3c7450f014061d0dcdf988dbb14f4b50144016eeeae119b0508ff384",
          "md5": "846cb63c9acda780a83acb9d2a64b29d",
          "sha256": "ddaa2578ae9fd8f22e61f7ecccac8d9cd361e0827a98f244082f3fa71beb6676"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "846cb63c9acda780a83acb9d2a64b29d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17552,
        "upload_time": "2020-12-26T15:35:59",
        "upload_time_iso_8601": "2020-12-26T15:35:59.061066Z",
        "url": "https://files.pythonhosted.org/packages/b8/da/b31f3c7450f014061d0dcdf988dbb14f4b50144016eeeae119b0508ff384/QCluster-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51db6317786b831824fc2685e7d1057912272fa55a47eb8f6a1782ca51e14db7",
          "md5": "4edc80039aff74c6ac49ec138fe15b1a",
          "sha256": "3da8c7ec909a5e46e8674f8548bb72dd061babed4d47aae3e58d865016ffddbd"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4edc80039aff74c6ac49ec138fe15b1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15529,
        "upload_time": "2020-12-26T15:36:00",
        "upload_time_iso_8601": "2020-12-26T15:36:00.048380Z",
        "url": "https://files.pythonhosted.org/packages/51/db/6317786b831824fc2685e7d1057912272fa55a47eb8f6a1782ca51e14db7/QCluster-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69dae0f2269e48fac51139e38b7b46fb90b55672b387c639bba15fd2e11f33eb",
          "md5": "0979982e815c9cdf23eab1ed0c93fb22",
          "sha256": "c43a161c4ebea6fa5c1dd6a0a3bf3b0c850dbbc2e5519d62efdbe6048637b04d"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0979982e815c9cdf23eab1ed0c93fb22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17932,
        "upload_time": "2021-01-09T13:59:12",
        "upload_time_iso_8601": "2021-01-09T13:59:12.359791Z",
        "url": "https://files.pythonhosted.org/packages/69/da/e0f2269e48fac51139e38b7b46fb90b55672b387c639bba15fd2e11f33eb/QCluster-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29ea1976ecbc07342020bd1ca7d5114c083aef2a4f60d2cd5bd175b2a67bd178",
          "md5": "8b2bc628b0bc35a1130d9f0321ceb727",
          "sha256": "99c1ea8f999fc29ae01395024ea4f89b23727c1924d8e7ac369bfdbd03e6b4c7"
        },
        "downloads": -1,
        "filename": "QCluster-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8b2bc628b0bc35a1130d9f0321ceb727",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16033,
        "upload_time": "2021-01-09T13:59:13",
        "upload_time_iso_8601": "2021-01-09T13:59:13.492122Z",
        "url": "https://files.pythonhosted.org/packages/29/ea/1976ecbc07342020bd1ca7d5114c083aef2a4f60d2cd5bd175b2a67bd178/QCluster-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69dae0f2269e48fac51139e38b7b46fb90b55672b387c639bba15fd2e11f33eb",
        "md5": "0979982e815c9cdf23eab1ed0c93fb22",
        "sha256": "c43a161c4ebea6fa5c1dd6a0a3bf3b0c850dbbc2e5519d62efdbe6048637b04d"
      },
      "downloads": -1,
      "filename": "QCluster-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0979982e815c9cdf23eab1ed0c93fb22",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17932,
      "upload_time": "2021-01-09T13:59:12",
      "upload_time_iso_8601": "2021-01-09T13:59:12.359791Z",
      "url": "https://files.pythonhosted.org/packages/69/da/e0f2269e48fac51139e38b7b46fb90b55672b387c639bba15fd2e11f33eb/QCluster-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29ea1976ecbc07342020bd1ca7d5114c083aef2a4f60d2cd5bd175b2a67bd178",
        "md5": "8b2bc628b0bc35a1130d9f0321ceb727",
        "sha256": "99c1ea8f999fc29ae01395024ea4f89b23727c1924d8e7ac369bfdbd03e6b4c7"
      },
      "downloads": -1,
      "filename": "QCluster-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8b2bc628b0bc35a1130d9f0321ceb727",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16033,
      "upload_time": "2021-01-09T13:59:13",
      "upload_time_iso_8601": "2021-01-09T13:59:13.492122Z",
      "url": "https://files.pythonhosted.org/packages/29/ea/1976ecbc07342020bd1ca7d5114c083aef2a4f60d2cd5bd175b2a67bd178/QCluster-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}