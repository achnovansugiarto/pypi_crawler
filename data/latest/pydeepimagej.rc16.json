{
  "info": {
    "author": "E. Gomez-de-Mariscal, C. Garcia-Lopez-de-Haro, W. Ouyang, L. Donati, E- Lundberg, M. Unser, A. Munoz-Barrutia, D. Sage.",
    "author_email": "esgomezm@pa.uc3m.com, daniel.sage@epfl.ch, mamunozb@ing.uc3m.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# PydeepImageJ\n\n[![GitHub](https://img.shields.io/github/license/deepimagej/pydeepimagej)](https://raw.githubusercontent.com/deepimagej/pydeepimagej/master/LICENSE)\n[![minimal Python version](https://img.shields.io/badge/Python-3-6666ff.svg)](https://www.anaconda.com/distribution/)\n\nPython code to export trained models into the [BioImage Model Zoo](https://bioimage.io/) format and read them in Fiji & ImageJ using the deepImageJ plugin.\n  - Creates a configuration class in Python with all the information about the trained model needed for its correct use in Fiji & ImageJ.\n  - Includes the metadata of an example image.\n  - Includes all expected results and needed pre / post-processing routines.\n  - Creates basic cover images for the model card in the BioImage Model Zoo.\n  - Creates de the version 0.3.2 of the [BioImage Model Zoo specification file](https://bioimage.io/docs/#/contribute_models/README?id=model-contribution-requirements): `model.yaml`   \n  - See [deepImageJ webpage](https://deepimagej.github.io/deepimagej/) for more information about how to use the model in Fiji & ImageJ. \n\n### Requirements & Installation\n\n- PyDeepImageJ requires Python 3 to run. \n- TensorFlow: It runs using the local installation of TensorFlow, i.e. the one corresponding to the trained model. However, deepImageJ is only compatible with TensorFlow versions <= 2.2.1.\n\nTo install pydeepImageJ either clone this repository or use PyPi via `pip`:\n\n```sh\n$ pip install pydeepimagej\n```\nor\n```sh\n$ git clone https://github.com/deepimagej/pydeepimagej.git\n$ cd pydeepimagej\n$ pip install .\n```\n----\n\n### Reference: \n* Gómez-de-Mariscal, E., García-López-de-Haro, C., Ouyang, W., Donati, L., Lundberg, L., Unser, M., Muñoz-Barrutia, A. and Sage, D., \"DeepImageJ: A user-friendly environment to run deep learning models in ImageJ\", Nat Methods 18, 1192–1195 (2021). \nhttps://doi.org/10.1038/s41592-021-01262-9\n  * **Read the paper online with this link: [rdcu.be/cyG3K](https://rdcu.be/cyG3K)**\n\n- Bioengineering and Aerospace Engineering Department, Universidad Carlos III de Madrid, Spain\n- Science for Life Laboratory, KTH – Royal Institute of Technology, Stockholm, Sweden\n- Biomedical Imaging Group, Ecole polytechnique federale de Lausanne (EPFL), Switzerland\n\nCorresponding authors: mamunozb@ing.uc3m.es, daniel.sage@epfl.ch\nCopyright © 2019. Universidad Carlos III, Madrid; Spain and EPFL, Lausanne, Switzerland.\n#### How to cite\n```bibtex\n@article{gomez2021deepimagej,\n  title={DeepImageJ: A user-friendly environment to run deep learning models in ImageJ},\n  author={G{\\'o}mez-de-Mariscal, Estibaliz and Garc{\\'i}a-L{\\'o}pez-de-Haro, Carlos and Ouyang, Wei and Donati, Laur{\\`e}ne and Lundberg, Emma and Unser, Michael and Mu{\\~{n}}oz-Barrutia, Arrate and Sage, Daniel},\n  journal={Nature Methods},\n  year={2021},\n  volume={18},\n  number={10},\n  pages={1192-1195},\n  URL = {https://doi.org/10.1038/s41592-021-01262-9},\n  doi = {10.1038/s41592-021-01262-9}\n}\n```\n#### License\n\n[BSD 2-Clause License](https://raw.githubusercontent.com/deepimagej/pydeepimagej/master/LICENSE)\n\n----\n\n## Example of how to use it\nTry a Jupyter notebook in Google Colaboratory: [![GoogleColab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/deepimagej/pydeepimagej/blob/master/examples/ExportBioImageModelZoo_deepImageJ.ipynb)\n\nOtherwise, follow the next steps:\n\nLet `model` be a Keras or TensorFlow trained model. Initialize the configuration class with the trained model `model`\n````python\nfrom pydeepimagej.yaml import BioImageModelZooConfig\n# MinimumSize needs to be given as it cannot be always estimated. See Additional commands for hints.\ndij_config = BioImageModelZooConfig(model, MinimumSize)\n````\nUpdate model information\n````python\ndij_config.Name = 'My trained model v0.1'\ndij_config.Description = 'Brief description of the task to perform by the trained model'\ndij_config.Authors.Names = ['First author', 'Second Author', 'Third Author who create the configuration specifications']\ndij_config.Authors.Affiliations = ['First author affiliation', 'Second author affiliation', 'Third author affiliation']\ndij_config.References = ['Gómez-de-Mariscal, E., García-López-de-Haro, C. et al., bioRxiv 2019', 'Second citation']\ndij_config.DOI = ['https://doi.org/10.1101/799270', 'second citation doi']\ndij_config.GitHub = 'https://github.com/deepimagej/pydeepimagej'\ndij_config.License = 'BSD-3'\ndij_config.Documentation = 'https://useful_documentation.pdf'\ndij_config.Tags = ['deepimagej', 'segmentation', 'Fiji', 'microscopy']\ndij_config.CoverImage =  ['./input.png', './output.png']\ndij_config.Framework = 'TensorFlow'\n# Parent model in the BioImage Model Zoo whose trained weights were used as pretrained weights.\ndij_config.Parent = \"https://bioimage.io/#/?id=deepimagej%2FUNet2DPancreaticSegmentation\"\n````\n### 1. Pre & post-processing specification.\n#### 1.1. Specify the pre&post-processing steps following the BioImage Model Zoo specifications.\nIf the pre-processing or the post-processing can be defined using the implementations defined at\n, then it is also possible to specify them with some code:\n```python\ndij_config.add_bioimageio_spec('pre-processing', 'scale_range',\n                               mode='per_sample', axes='xyzc',\n                               min_percentile=0, \n                               max_percentile=100)\n\ndij_config.add_bioimageio_spec('post-processing', 'binarize',\n                               threshold=threshold)\n```\nThe `BioImageModelZooConfig` class will include as many steps as times the previous functions are called. For example:\n```python\n# Make sure that there's no pre-processing specified.\ndij_config.BioImage_Preprocessing=None\ndij_config.add_bioimageio_spec('pre-processing', 'scale_range',\n                               mode='per_sample', axes='xyzc',\n                               min_percentile=min_percentile, \n                               max_percentile=max_percentile)\ndij_config.add_bioimageio_spec('pre-processing', 'scale_linear',\n                               gain=255, offset=0, axes='xy')\n```\n```\ndij_config.BioImage_Preprocessing:\n[{'scale_range': {'kwargs': {'axes': 'xyzc',\n  'max_percentile': 100,\n  'min_percentile': 0,\n  'mode': 'per_sample'}}},\n {'scale_range': {'kwargs': {'axes': 'xy', 'gain': 255, 'offset': 0}}}]\n```\nThe same applies for the post-processing:\n```python\ndij_config.BioImage_Postprocessing=None \ndij_config.add_bioimageio_spec('post-processing', 'scale_range',\n                               mode='per_sample', axes='xyzc', \n                               min_percentile=0, max_percentile=100)\n\ndij_config.add_bioimageio_spec('post-processing', 'scale_linear',\n                               gain=255, offset=0, axes='xy')\n\ndij_config.add_bioimageio_spec('post-processing', 'binarize',\n                               threshold=threshold)\n```\n```\ndij_config.BioImage_Postprocessing:\n[{'scale_range': {'kwargs': {'axes': 'xyzc',\n  'max_percentile': 100,\n  'min_percentile': 0,\n  'mode': 'per_sample'}}},\n {'scale_range': {'kwargs': {'axes': 'xy', 'gain': 255, 'offset': 0}}},\n {'binarize': {'kwargs': {'threshold': 0.5}}}]\n```\n#### 1.2. Prepare an ImageJ pre/post-processing macro.\nYou may need to preprocess the input image before the inference. Some ImageJ macro routines can be downloaded from [here](https://github.com/deepimagej/imagej-macros/) and included in the model specifications. Note that ImageJ macros are text files so it is easy to modify them inside a Python script ([see an example](https://github.com/deepimagej/pydeepimagej/blob/master/README.md#additional-commands)). To add any ImageJ macro code we need to run `add_preprocessing(local_path_to_the_macro_file, 'name_to_store_the_macro_in_the_bundled_model')`:\n````python\npath_preprocessing = \"PercentileNormalization.ijm\"\n# Download the macro file\nurllib.request.urlretrieve(\"https://raw.githubusercontent.com/deepimagej/imagej-macros/master/PercentileNormalization.ijm\", path_preprocessing )\n# Include it in the configuration class\ndij_config.add_preprocessing(path_preprocessing, \"preprocessing\")\n````\nThe same holds for the postprocessing.\n````python\npath_postprocessing = \"8bitBinarize.ijm\"\nurllib.request.urlretrieve(\"https://raw.githubusercontent.com/deepimagej/imagej-macros/master/8bitBinarize.ijm\", path_postprocessing )\n# Include the info about the postprocessing \ndij_config.add_postprocessing(path_postprocessing,\"postprocessing\")\n````\nDeepImageJ accepts two pre/post-processing routines. The images will be processed in the order in which we include them with `add_postprocessing`. Thus, in this example, the output of the model is first binarized with `'8bitBinarize.ijm'` and then, processed with `'another_macro.ijm'`: \n````python\npath_second_postprocessing = './folder/another_macro.ijm'\ndij_config.add_postprocessing(path_second_postprocessing, 'postprocessing_2')\n````\n\n### 2. Add information about the example image.\nLet `test_img` be an example image to test the model inference and `test_prediction` be the resulting image after the post-processing. It is possible to export the trained model with these two, so an end user can see an example. \n`PixelSize` should be a list of values according to `test_img` dimensions and given in microns (µm). \n````python\nPixelSize = [0.64,0.64,1] # Pixel size of a 3D volume with axis yxz\ndij_config.add_test_info(test_img, test_prediction, PixelSize)\n````\n\n#### 2.1. Create some covers for the model card in the BioImage Model Zoo.\nLet `test_img` and `test_mask` be the input and output example images, and `./input.png` and `./output.png` the names we want to use to store them within bundled model. `dij_config` stretches the intensity range of the given images to the [0, 255] range so the images can be exported as 8-bits images and visualized properly on the website.  \n```python\ndij_config.create_covers([test_img, test_mask])\ndij_config.Covers =  ['./input.png', './output.png']\n```\n\n### 3. Store weights using specific formats.\nThe weights of a trained model can be stored either as a TensorFlow SavedModel bundle (`saved_model.pb` + `variables/`) or as a Keras HDF5 model (`model.h5`). Let `model` be a trained model in TensorFlow. With pydeepimagej, the weights information can be included as follows:\n````python\n\ndij_config.add_weights_formats(model, 'KerasHDF5', \n                               authors=['Authors', 'who', 'trained it'])\ndij_config.add_weights_formats(model, 'TensorFlow', \n                               parent=\"keras_hdf5\",\n                               authors=['Authors who', 'converted the model', 'into this new format'])\n````\nwhich in the `model.yaml` appear as :\n````yaml\nweights:\n  keras_hdf5:\n    source: ./keras_model.h5\n    sha256: 9f7512eb28de4c6c4182f976dd8e53e9da7f342e14b2528ef897a970fb26875d\n    authors:\n    - Authors\n    - who\n    - trained it\n  tensorflow_saved_model_bundle:\n    source: ./tensorflow_saved_model_bundle.zip\n    sha256: 2c552aa561c3c3c9063f42b78dda380e2b85a8ad04e434604af5cbb50eaaa54d\n    parent: keras_hdf5\n    authors:\n    - Authors who\n    - converted the model\n    - into this new format\n````\n\n### 4. EXPORT THE MODEL\n````python\ndeepimagej_model_path = './my_trained_model_deepimagej'\ndij_config.export_model(deepimagej_model_path)\n`````\nWhen exporting the model, a new folder with a deepImageJ 2.1.0 bundled model is created. The folder is also provided as a zip file, so it can be easily transferable.\n\n## Additional commands\n### Change one line in an ImageJ macro\n````python\n# Download the macro file\npath_postprocessing = \"8bitBinarize.ijm\"\nurllib.request.urlretrieve(\"https://raw.githubusercontent.com/deepimagej/imagej-macros/master/8bitBinarize.ijm\", path_postprocessing )\n# Modify the threshold in the macro to the chosen threshold\nijmacro = open(path_postprocessing,\"r\")  \nlist_of_lines = ijmacro. readlines()\n# Line 21 is the one corresponding to the optimal threshold\nlist_of_lines[21] = \"optimalThreshold = {}\\n\".format(128)\nijmacro.close()\nijmacro = open(path_postprocessing,\"w\")  \nijmacro. writelines(list_of_lines)\nijmacro. close()\n````\n### Estimation of the step size for the shape of the input image.\nIf the model is an encoder-decoder with skip connections, and the input shape of your trained model is not fixed (i.e. `[None, None, 1]` ), the input shape still needs to fit some requirements. You can caluculate it knowing the number of poolings in the encoder path of the network:\n````python\nimport numpy as np\npooling_steps = 0\nfor keras_layer in model.layers:\n    if keras_layer.name.startswith('max') or \"pool\" in keras_layer.name:\n      pooling_steps += 1\nMinimumSize = np.str(2**(pooling_steps))\n````\n## Exceptions\npydeepimagej is meant to connect Python with DeepImageJ so images can be processed in the Fiji & ImageJ ecosystem. Hence, images (tensors) are expected to have at least 3 dimensions: height, width and channels. For this reason, models with input shapes of less than 4 dimensions (`model.input_shape = [batch, height, width, channels]` are not considered. For example, if you have the following situation:\n```python\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)])\n```\nplease, modify it to\n```python\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)])\n```\n## Code references used in this package:\nThis code uses similar functions to the ones in [StarDist](https://github.com/stardist/stardist) package for the calculation of a pixel's receptive field in a network. Citations:\n- Uwe Schmidt, Martin Weigert, Coleman Broaddus, and Gene Myers.\n  Cell Detection with Star-convex Polygons.\n  International Conference on Medical Image Computing and Computer-Assisted Intervention (MICCAI), Granada, Spain, September 2018.\n  DOI: [10.1007/978-3-030-00934-2_30](https://doi.org/10.1007/978-3-030-00934-2_30)\n\n- Martin Weigert, Uwe Schmidt, Robert Haase, Ko Sugawara, and Gene Myers.\n  Star-convex Polyhedra for 3D Object Detection and Segmentation in Microscopy.\n  The IEEE Winter Conference on Applications of Computer Vision (WACV), Snowmass Village, Colorado, March 2020 \n  DOI: [10.1109/WACV45572.2020.9093435](https://doi.org/10.1109/WACV45572.2020.9093435)\n  \n## TODO list\n\n - Addapt pydeepimagej to PyTorch models so it can export trained models into TorchScript format.\n - Consider multiple inputs and outputs.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/deepimagej/pydeepimagej/archive/v1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://deepimagej.github.io/deepimagej/",
    "keywords": "Fiji,ImageJ,deepImageJ,Deep Learning,Image processing,bioimage.io,BioImage Model Zoo",
    "license": "BSD 2-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydeepimagej",
    "package_url": "https://pypi.org/project/pydeepimagej/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydeepimagej/",
    "project_urls": {
      "Download": "https://github.com/deepimagej/pydeepimagej/archive/v1.0.0.tar.gz",
      "Homepage": "https://deepimagej.github.io/deepimagej/"
    },
    "release_url": "https://pypi.org/project/pydeepimagej/2.4/",
    "requires_dist": [
      "numpy",
      "scikit-image (==0.17.2)",
      "ruamel.yaml",
      "datetime"
    ],
    "requires_python": ">=3.0",
    "summary": "Python package to export TensorFlow models as DeepImageJ bundled models",
    "version": "2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14719271,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37e721e232829d664f898a5dd017b74fe4cf5e6a5e7f95cf5e79301d4d49b3d6",
          "md5": "c68d7fd06771b134eebeef154b7b0fb4",
          "sha256": "fa10009b1fac1d1115433f55c8c8280f6113326b9a597170a3da1a066934506c"
        },
        "downloads": -1,
        "filename": "pydeepimagej-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c68d7fd06771b134eebeef154b7b0fb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 9203,
        "upload_time": "2020-09-30T09:32:33",
        "upload_time_iso_8601": "2020-09-30T09:32:33.195520Z",
        "url": "https://files.pythonhosted.org/packages/37/e7/21e232829d664f898a5dd017b74fe4cf5e6a5e7f95cf5e79301d4d49b3d6/pydeepimagej-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ab14183c38991511a1a376c192f520f788dd12d5fbcc27d494361f94d27a759",
          "md5": "bce334e12b65f7e8d2b847ed8508f4cd",
          "sha256": "801779f066407da979a21155980d6628cb481596dd869d8a65f3ebdc0cddad8b"
        },
        "downloads": -1,
        "filename": "pydeepimagej-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bce334e12b65f7e8d2b847ed8508f4cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 8281,
        "upload_time": "2020-09-30T09:32:35",
        "upload_time_iso_8601": "2020-09-30T09:32:35.546785Z",
        "url": "https://files.pythonhosted.org/packages/8a/b1/4183c38991511a1a376c192f520f788dd12d5fbcc27d494361f94d27a759/pydeepimagej-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f472bfa15698842dbefb3460b5494e460c9546c65c2ec0d242a9256bb96d3c57",
          "md5": "68ed34d9be1bbca984972806783da21d",
          "sha256": "e68b3e2183df25466870162769266f42e798dd786c60e5bde6f227f593f5f78e"
        },
        "downloads": -1,
        "filename": "pydeepimagej-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68ed34d9be1bbca984972806783da21d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 10076,
        "upload_time": "2020-12-18T17:33:10",
        "upload_time_iso_8601": "2020-12-18T17:33:10.242887Z",
        "url": "https://files.pythonhosted.org/packages/f4/72/bfa15698842dbefb3460b5494e460c9546c65c2ec0d242a9256bb96d3c57/pydeepimagej-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "148cac44749ccbf272b77607d8c73f08eac5127d57d6ae67bda85e1e930b828b",
          "md5": "d8a0398dd6b6f080f5ddafc50e496d60",
          "sha256": "fcde6bd49cb739d26bd3aa1b05ced4e1ae52be438e781a0eac3e29ca370fb1be"
        },
        "downloads": -1,
        "filename": "pydeepimagej-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8a0398dd6b6f080f5ddafc50e496d60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 9070,
        "upload_time": "2020-12-18T17:33:11",
        "upload_time_iso_8601": "2020-12-18T17:33:11.666618Z",
        "url": "https://files.pythonhosted.org/packages/14/8c/ac44749ccbf272b77607d8c73f08eac5127d57d6ae67bda85e1e930b828b/pydeepimagej-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4454f30d74abbc1e65492cb8721be9365ce7ac37a070882c69d56648d08fa21a",
          "md5": "869a4361ebd33a6319e302ffc6fdfd87",
          "sha256": "a84c374827fe89b7aba4c26857799811811d43e221e8a07348e56e65ff7588b6"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.0.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "869a4361ebd33a6319e302ffc6fdfd87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 23847,
        "upload_time": "2021-03-22T18:06:50",
        "upload_time_iso_8601": "2021-03-22T18:06:50.645803Z",
        "url": "https://files.pythonhosted.org/packages/44/54/f30d74abbc1e65492cb8721be9365ce7ac37a070882c69d56648d08fa21a/pydeepimagej-2.0.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a068799ec2ad1c0763dfe11136d8fa1e5b8a38a5b43449c47079c8e9c764d6f0",
          "md5": "b9d3284c7b41e29400fa129e5aebe21f",
          "sha256": "fc3ff264e6bb07901f04d4f4f58e0d558dfa721669140501d264614ee81955ba"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b9d3284c7b41e29400fa129e5aebe21f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 22581,
        "upload_time": "2021-03-22T18:06:52",
        "upload_time_iso_8601": "2021-03-22T18:06:52.062618Z",
        "url": "https://files.pythonhosted.org/packages/a0/68/799ec2ad1c0763dfe11136d8fa1e5b8a38a5b43449c47079c8e9c764d6f0/pydeepimagej-2.0.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d68ca6bc84748f9d1afd9912f2966ae204a959f1b6971232531933d093ad11",
          "md5": "43db7809764e188efa4825bffc0114e5",
          "sha256": "76cc93cd067e0ab63ae9d65b20751173f237de4ca0c766ceccaf53c9957e4442"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43db7809764e188efa4825bffc0114e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 23919,
        "upload_time": "2021-03-22T18:14:28",
        "upload_time_iso_8601": "2021-03-22T18:14:28.574833Z",
        "url": "https://files.pythonhosted.org/packages/20/d6/8ca6bc84748f9d1afd9912f2966ae204a959f1b6971232531933d093ad11/pydeepimagej-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fa502df7eace456b2f1167e56bada2f6421b33195f0b7eeedd751408595fdef",
          "md5": "9f6943241e7dac0b491a933cc30cc640",
          "sha256": "1423fc479fbf61f566e416481d78af65563fdb9adbb4b67fd504170377bda754"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f6943241e7dac0b491a933cc30cc640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 22815,
        "upload_time": "2021-03-22T18:14:29",
        "upload_time_iso_8601": "2021-03-22T18:14:29.973093Z",
        "url": "https://files.pythonhosted.org/packages/1f/a5/02df7eace456b2f1167e56bada2f6421b33195f0b7eeedd751408595fdef/pydeepimagej-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf21a29edd2b747a5fc4760d9efc9ba6cf7ff86335caf82f6b00f04d9f26996f",
          "md5": "5c1c1e042e84ef214037cf700616525d",
          "sha256": "bdebc71a37e5eef01c359d54ba0112b3ef3b811b8420fed79d86d07adcebc72b"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c1c1e042e84ef214037cf700616525d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 23948,
        "upload_time": "2021-04-13T10:28:36",
        "upload_time_iso_8601": "2021-04-13T10:28:36.986194Z",
        "url": "https://files.pythonhosted.org/packages/cf/21/a29edd2b747a5fc4760d9efc9ba6cf7ff86335caf82f6b00f04d9f26996f/pydeepimagej-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fd7aaaab5736568a8dea5b9f8398413a9e0c6d6a1b252dbf770718b2b4334c6",
          "md5": "78b456b1c270e9393d8517dfe83b8d20",
          "sha256": "a5a39f376be88e493d1f205fd8ef67b53af6b4dfdb4ef15d1ecaf0f7cb9861e9"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78b456b1c270e9393d8517dfe83b8d20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 23275,
        "upload_time": "2021-04-13T10:28:38",
        "upload_time_iso_8601": "2021-04-13T10:28:38.618637Z",
        "url": "https://files.pythonhosted.org/packages/4f/d7/aaaab5736568a8dea5b9f8398413a9e0c6d6a1b252dbf770718b2b4334c6/pydeepimagej-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b041b8a0e0a19220ca009b5bea81df4531a0202f727d0a96b538fec107ad1ac",
          "md5": "0534be20440c7ef77361b7fe350a1042",
          "sha256": "bbe8ec00001267c9baee5cd8bf2002b1ce4f18772f9bcb05cbeecfbf7d2ca4f0"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0534be20440c7ef77361b7fe350a1042",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 24669,
        "upload_time": "2021-06-08T11:20:47",
        "upload_time_iso_8601": "2021-06-08T11:20:47.230826Z",
        "url": "https://files.pythonhosted.org/packages/2b/04/1b8a0e0a19220ca009b5bea81df4531a0202f727d0a96b538fec107ad1ac/pydeepimagej-2.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53bf7f41225f7a66d3737a6676e0f15674b10038e4f7230faee765352c95c421",
          "md5": "91c2c75b05a8d52942f4b39440870b2a",
          "sha256": "9321144c9f3bd21a5fdc1a5fbe9ea2b6efb3903234051aba7615eb4be40d54d9"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "91c2c75b05a8d52942f4b39440870b2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24345,
        "upload_time": "2021-06-08T10:27:27",
        "upload_time_iso_8601": "2021-06-08T10:27:27.274948Z",
        "url": "https://files.pythonhosted.org/packages/53/bf/7f41225f7a66d3737a6676e0f15674b10038e4f7230faee765352c95c421/pydeepimagej-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7843a3011368d34d4c905397f84c25e42a70d17822ce28184ec4a3607d26c39e",
          "md5": "791c3f531249c72b5584096645f15bcb",
          "sha256": "4ca08abdde8d1afaafaf73a9216322c235c7d5e7f706f15767daf9852f92117a"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "791c3f531249c72b5584096645f15bcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24660,
        "upload_time": "2021-07-13T16:58:26",
        "upload_time_iso_8601": "2021-07-13T16:58:26.269953Z",
        "url": "https://files.pythonhosted.org/packages/78/43/a3011368d34d4c905397f84c25e42a70d17822ce28184ec4a3607d26c39e/pydeepimagej-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a147b9e756400019536cc6006a2493643f16861ff08ca11b07ebb64537d3ec02",
          "md5": "2bab867c696f3d2d5d5eaf6c3d8a9702",
          "sha256": "948b41dd0e3d28c1f2bd40109b788baf1ef5d0c0b2a10898c0ed7a555f64e551"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2bab867c696f3d2d5d5eaf6c3d8a9702",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24157,
        "upload_time": "2021-08-06T13:04:13",
        "upload_time_iso_8601": "2021-08-06T13:04:13.723051Z",
        "url": "https://files.pythonhosted.org/packages/a1/47/b9e756400019536cc6006a2493643f16861ff08ca11b07ebb64537d3ec02/pydeepimagej-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ae66311a418732be4a84451b144e9978ef0c950989f1a3069c1f96075f7c03",
          "md5": "cc12208e095654a370142cdb0a63a861",
          "sha256": "d854fa0fa18baf47c645a2340b4bff6c546ada1b941629379efdb6dfeca41d47"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc12208e095654a370142cdb0a63a861",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24179,
        "upload_time": "2021-08-27T19:07:08",
        "upload_time_iso_8601": "2021-08-27T19:07:08.054789Z",
        "url": "https://files.pythonhosted.org/packages/30/ae/66311a418732be4a84451b144e9978ef0c950989f1a3069c1f96075f7c03/pydeepimagej-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e877e536981988529fd8378b31fb3f9ffa83186cfe09749fc33dd3a8b10e3cc0",
          "md5": "dd3524771c436123532867438a250328",
          "sha256": "252c82a1b4c878db1ada7438231e0fa7a5732aa1d9d3d0662df480ceeef224dd"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dd3524771c436123532867438a250328",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24243,
        "upload_time": "2021-09-08T14:07:34",
        "upload_time_iso_8601": "2021-09-08T14:07:34.555339Z",
        "url": "https://files.pythonhosted.org/packages/e8/77/e536981988529fd8378b31fb3f9ffa83186cfe09749fc33dd3a8b10e3cc0/pydeepimagej-2.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89adbafb248f18a7a8820c2b3ff9679a10332274ea7d6ecb70ccaa41252eac5d",
          "md5": "6b514797c85edc8c5f21a89481c9e12d",
          "sha256": "3ae23aa116dccbd2cd7e916407f6bf8443f8ee214982aaa62095eb040cf9c5ca"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6b514797c85edc8c5f21a89481c9e12d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24266,
        "upload_time": "2021-09-08T14:23:36",
        "upload_time_iso_8601": "2021-09-08T14:23:36.112811Z",
        "url": "https://files.pythonhosted.org/packages/89/ad/bafb248f18a7a8820c2b3ff9679a10332274ea7d6ecb70ccaa41252eac5d/pydeepimagej-2.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd7f68169a5f83f42694fe021e81b19073f3ce3106f69bd4c7d5b4d183f01b29",
          "md5": "43c1822a4f573531b51ab30d94a4dc18",
          "sha256": "b86b71f8f73be7fa61ab531f6a24589e699a4a19d57dedfa6a17d68369683413"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "43c1822a4f573531b51ab30d94a4dc18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 25203,
        "upload_time": "2021-10-12T13:16:50",
        "upload_time_iso_8601": "2021-10-12T13:16:50.678359Z",
        "url": "https://files.pythonhosted.org/packages/cd/7f/68169a5f83f42694fe021e81b19073f3ce3106f69bd4c7d5b4d183f01b29/pydeepimagej-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4de6b6f0ba9a3bd85906b41ae9e4d031ae808dce0bd89e4bf971706ba3ce795",
          "md5": "3a20d6f3dbf94bf3f6a13afd6cd49928",
          "sha256": "524edc87a3f878002c62976a331764f63929cf6fd591f4d4c4c1dc3abd584014"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a20d6f3dbf94bf3f6a13afd6cd49928",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 25257,
        "upload_time": "2021-10-12T14:58:27",
        "upload_time_iso_8601": "2021-10-12T14:58:27.167878Z",
        "url": "https://files.pythonhosted.org/packages/c4/de/6b6f0ba9a3bd85906b41ae9e4d031ae808dce0bd89e4bf971706ba3ce795/pydeepimagej-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5104e7d2c455c0db7972ac1ff610fb7a9b6bf8c53d47149433a99f6e68886a0b",
          "md5": "8e14a2692551f6319c659a3bb9bc6f3b",
          "sha256": "57aec724327365829c74d45f08d293668055bd0f2940d96f311e257f95707ea6"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8e14a2692551f6319c659a3bb9bc6f3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24812,
        "upload_time": "2021-10-14T11:59:53",
        "upload_time_iso_8601": "2021-10-14T11:59:53.645807Z",
        "url": "https://files.pythonhosted.org/packages/51/04/e7d2c455c0db7972ac1ff610fb7a9b6bf8c53d47149433a99f6e68886a0b/pydeepimagej-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec60919f37bd97980dd512738995b5e58af44cb1c690e5556ed5396238b23ab4",
          "md5": "ec8c51291ae2ef9dfe6017adeea04d05",
          "sha256": "a2913853471a3a7f9738e2f78a5a8663e7f7038fb72ea3db38b83a8496b27f1a"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ec8c51291ae2ef9dfe6017adeea04d05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 24828,
        "upload_time": "2021-10-14T13:09:24",
        "upload_time_iso_8601": "2021-10-14T13:09:24.917007Z",
        "url": "https://files.pythonhosted.org/packages/ec/60/919f37bd97980dd512738995b5e58af44cb1c690e5556ed5396238b23ab4/pydeepimagej-2.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a5cb0c04bff0e98b3e877b2b36b0ec4d586df7453f6100735aadc05999c84e6",
          "md5": "67b933b6fe7276ca32f954de3d7446a2",
          "sha256": "c279e30d2412744123dfa343aba69216443c18aba478524ddd3323d5a4bc35b8"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67b933b6fe7276ca32f954de3d7446a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 25087,
        "upload_time": "2022-08-10T16:32:39",
        "upload_time_iso_8601": "2022-08-10T16:32:39.610154Z",
        "url": "https://files.pythonhosted.org/packages/5a/5c/b0c04bff0e98b3e877b2b36b0ec4d586df7453f6100735aadc05999c84e6/pydeepimagej-2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1741ef9608cce914e8f6cf3991832ac7ec095e385dcbfc4c829fab01534d6c9d",
          "md5": "517262f02b7601cb90577e39ccc2b266",
          "sha256": "1ed61b8ae1d32e0eedaaa7c045c036b3919178a1cc1aa7b67914481c5ddbe1c9"
        },
        "downloads": -1,
        "filename": "pydeepimagej-2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "517262f02b7601cb90577e39ccc2b266",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 25753,
        "upload_time": "2022-08-10T16:32:41",
        "upload_time_iso_8601": "2022-08-10T16:32:41.693866Z",
        "url": "https://files.pythonhosted.org/packages/17/41/ef9608cce914e8f6cf3991832ac7ec095e385dcbfc4c829fab01534d6c9d/pydeepimagej-2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a5cb0c04bff0e98b3e877b2b36b0ec4d586df7453f6100735aadc05999c84e6",
        "md5": "67b933b6fe7276ca32f954de3d7446a2",
        "sha256": "c279e30d2412744123dfa343aba69216443c18aba478524ddd3323d5a4bc35b8"
      },
      "downloads": -1,
      "filename": "pydeepimagej-2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67b933b6fe7276ca32f954de3d7446a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 25087,
      "upload_time": "2022-08-10T16:32:39",
      "upload_time_iso_8601": "2022-08-10T16:32:39.610154Z",
      "url": "https://files.pythonhosted.org/packages/5a/5c/b0c04bff0e98b3e877b2b36b0ec4d586df7453f6100735aadc05999c84e6/pydeepimagej-2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1741ef9608cce914e8f6cf3991832ac7ec095e385dcbfc4c829fab01534d6c9d",
        "md5": "517262f02b7601cb90577e39ccc2b266",
        "sha256": "1ed61b8ae1d32e0eedaaa7c045c036b3919178a1cc1aa7b67914481c5ddbe1c9"
      },
      "downloads": -1,
      "filename": "pydeepimagej-2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "517262f02b7601cb90577e39ccc2b266",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 25753,
      "upload_time": "2022-08-10T16:32:41",
      "upload_time_iso_8601": "2022-08-10T16:32:41.693866Z",
      "url": "https://files.pythonhosted.org/packages/17/41/ef9608cce914e8f6cf3991832ac7ec095e385dcbfc4c829fab01534d6c9d/pydeepimagej-2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}