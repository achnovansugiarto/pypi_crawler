{
  "info": {
    "author": "Marc Wouts",
    "author_email": "marc.wouts@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Jupyter",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Easy Plotly\n\n[![Build Status](https://travis-ci.com/mwouts/easyplotly.svg?branch=master)](https://travis-ci.com/mwouts/easyplotly)\n[![codecov.io](https://codecov.io/github/mwouts/easyplotly/coverage.svg?branch=master)](https://codecov.io/github/mwouts/easyplotly?branch=master)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/mwouts/easyplotly.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/mwouts/easyplotly/context:python)\n[![Pypi](https://img.shields.io/pypi/v/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)\n[![pyversions](https://img.shields.io/pypi/pyversions/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)\n[![Jupyter Notebook](https://img.shields.io/badge/Binder-Notebook-blue.svg)](\n    https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)\n[![GitHub.io](https://img.shields.io/badge/GitHub-HTML-blue.svg)](https://mwouts.github.io/easyplotly)\n<a class=\"github-button\" href=\"https://github.com/mwouts/easyplotly\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star mwouts/easyplotly on GitHub\">Star</a>\n\nThis is on-going research on how ploting with [Plotly.py](https://github.com/plotly/plotly.py), \nespecially ploting of hierarchical data, could be made easier.\n\nSee the outputs of the commands below - tables and plots - \nin the [HTML export](https://mwouts.github.io/easyplotly/) of this notebook.\nOr even, open this `README.md` as a notebook and run it interactively on \n[Binder](https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)!\n\n## Installation\n\nInstall the `easyplotly` python package with\n\n```\npip install easyplotly\n```\n\n## Sample data\n\nOur sample data is the population and life expectancy, per country and region:\n\n```python\nimport world_bank_data as wb\nimport itables.interactive\n\n# Collect countries\ncountries = wb.get_countries()\nregion_country = countries[['region', 'name']].rename(columns={'name': 'country'})\n\n# Population & life expectancy\nregion_country['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)\nregion_country['life_expectancy'] = wb.get_series('SP.DYN.LE00.IN', mrv=1, id_or_value='id', simplify_index=True)\n\n# Observations restricted to the countries\npop_and_exp = region_country.loc[countries.region != 'Aggregates'].set_index(['region', 'country']).sort_index()\npop_and_exp\n```\n\n## Sunburst Charts\n\n```python\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport easyplotly as ep\n\npio.renderers.default = 'notebook_connected'\nlayout = go.Layout(title='World Population and Life Expectancy<br>Data from the World Bank', height=800)\n```\n\nOur `Sunburst` function accepts inputs of many types: pandas Series, dictionaries, and list of such objects.\nIf you want, you can redefine `labels`, or add other arguments like `text` - use either a Series with an index\nidentical to that of `values`, or a function that to any tuple `(level0, level1, ... leveln)`\nassociates the corresponding label or value.\n\n```python\nsunburst = ep.Sunburst(pop_and_exp.population, text=pop_and_exp.life_expectancy)\ngo.Figure(sunburst, layout)\n```\n\n## Treemaps\n\nThe `Treemap` function works like the `Sunburst` one:\n\n```python\ntreemap = ep.Treemap(pop_and_exp.population, text=pop_and_exp.life_expectancy)\ngo.Figure(treemap, layout)\n```\n\nJust like the `Sunburst` function, it also accepts all the arguments supported by the original\n`go.Sunburst` object. You're even welcome to use the\n[magic underscore notation](https://plot.ly/python/creating-and-updating-figures/#magic-underscore-notation),\nas we do below when we set `marker.colors` with `marker_colors`:\n\n```python\nimport numpy as np\n\n\ndef average(values, weights):\n    \"\"\"Same as np.average, but remove nans\"\"\"\n    total_obs = 0.\n    total_weight = 0.\n    if isinstance(values, np.float):\n        values = [values]\n        weights = [weights]\n    for x, w in zip(values, weights):\n        xw = x * w\n        if np.isnan(xw):\n            continue\n        total_obs += xw\n        total_weight += w\n    return total_obs / total_weight if total_weight != 0 else np.NaN\n\n\ndef life_expectancy(item):\n    \"\"\"Life expectancy associated to a tuple like (), ('Europe & Central Asia') or ('East Asia & Pacific', 'China')\"\"\"\n    sub = pop_and_exp.loc[item] if item else pop_and_exp\n    return average(sub.life_expectancy, weights=sub.population)\n\n\ndef text(item):\n    \"\"\"Return the text associated to a tuple like (), ('Europe & Central Asia') or ('East Asia & Pacific', 'China')\"\"\"\n    life_exp = life_expectancy(item)\n    if life_exp > 0:\n        pop = pop_and_exp.population.loc[item].sum() if item else pop_and_exp.population.sum()  \n        return 'Population: {:,}<br>Life expectancy: {:.2f}'.format(int(pop), life_exp)\n\n\ntreemap = ep.Treemap(pop_and_exp.population,\n                     hoverinfo='label+text',\n                     text=text,\n                     root_label='World',\n                     # magic underscore notation\n                     marker_colors=life_expectancy,\n                     marker_colorscale='RdBu')\n\ngo.Figure(treemap, layout)\n```\n\n## Sankey Plot\n\nPlot links from a dict, or a series with a source/target multiindex:\n\n```python\nlinks = {('A', 'B'): 3, ('B', 'C'): 1, ('B', 'D'): 2, ('C', 'A'): 1, ('D', 'A'): 1, ('A', 'D'): 1}\ngo.Figure(ep.Sankey(links))\n```\n\nPlot links from a DataFrame (sources as the index, targets as the columns):\n\n```python\nimport pandas as pd\n```\n\n```python\nlinks = pd.DataFrame(1, index=['Source A', 'Source B'], columns=['Target'])\ngo.Figure(ep.Sankey(links))\n```\n\nWe conclude the examples with a plot in which the links are a list of pandas Series:\n\n```python\nregion_income = wb.get_countries().query(\"region != 'Aggregates'\").copy()\nregion_income['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)\nincome_lending = region_income.copy()\nregion_income.set_index(['region', 'incomeLevel'], inplace=True)\nincome_lending.set_index(['incomeLevel', 'lendingType'], inplace=True)\n\nlayout = go.Layout(title='Regions income and lending type<br>Data from the World Bank')\n\nsankey = ep.Sankey(\n    link_value=[region_income['population'], income_lending['population']],\n    link_label=[region_income['name'], income_lending['name']])\n\ngo.Figure(sankey, layout)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwouts/easyplotly",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easyplotly",
    "package_url": "https://pypi.org/project/easyplotly/",
    "platform": "",
    "project_url": "https://pypi.org/project/easyplotly/",
    "project_urls": {
      "Homepage": "https://github.com/mwouts/easyplotly"
    },
    "release_url": "https://pypi.org/project/easyplotly/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easy Plotly",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6240310,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8e909b69160639dbffa940cf26f730305395bd773f4a019499bdccc638c4fcb",
          "md5": "2936946532dc6e642f9863ac7f4ef8bc",
          "sha256": "92c94cf9acbf7137ef9eee0a80d211943cb837ea224411f4d17420926ed534cf"
        },
        "downloads": -1,
        "filename": "easyplotly-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2936946532dc6e642f9863ac7f4ef8bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6128,
        "upload_time": "2019-12-01T18:05:55",
        "upload_time_iso_8601": "2019-12-01T18:05:55.177999Z",
        "url": "https://files.pythonhosted.org/packages/f8/e9/09b69160639dbffa940cf26f730305395bd773f4a019499bdccc638c4fcb/easyplotly-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05733a0927e227eaf3c60badfbd49f9832c8ea12126f2a0f725434c247f6c9fd",
          "md5": "e5b6a7299b3dbcd1dea9eb4dfbd833de",
          "sha256": "48d8dc245f4a4b7c10bffee4f1a3f54e8659390cedbbe7137743c5e60e02bd11"
        },
        "downloads": -1,
        "filename": "easyplotly-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5b6a7299b3dbcd1dea9eb4dfbd833de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6484,
        "upload_time": "2019-12-01T23:50:54",
        "upload_time_iso_8601": "2019-12-01T23:50:54.116605Z",
        "url": "https://files.pythonhosted.org/packages/05/73/3a0927e227eaf3c60badfbd49f9832c8ea12126f2a0f725434c247f6c9fd/easyplotly-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4234e7e29e106f956a7ad2d3cb2a49032bf0c9600b557be229bdd5a05d5be0f0",
          "md5": "daa5199c89b1c08ad2647283cc9c0756",
          "sha256": "cb926be32231eddc1b1d943bd7a7a9419ee9bc9523a0407cb68b4ac468baa34c"
        },
        "downloads": -1,
        "filename": "easyplotly-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "daa5199c89b1c08ad2647283cc9c0756",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7944,
        "upload_time": "2019-12-04T07:27:35",
        "upload_time_iso_8601": "2019-12-04T07:27:35.739561Z",
        "url": "https://files.pythonhosted.org/packages/42/34/e7e29e106f956a7ad2d3cb2a49032bf0c9600b557be229bdd5a05d5be0f0/easyplotly-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e22886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8",
          "md5": "5fb68fb187a00c9861d9b595d7ab7e34",
          "sha256": "0a8f29c297f2be9eab299d9f769f6d0715bfe870352fc4394ba8a5d16f249cba"
        },
        "downloads": -1,
        "filename": "easyplotly-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5fb68fb187a00c9861d9b595d7ab7e34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8020,
        "upload_time": "2019-12-04T07:49:43",
        "upload_time_iso_8601": "2019-12-04T07:49:43.284528Z",
        "url": "https://files.pythonhosted.org/packages/06/e2/2886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8/easyplotly-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06e22886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8",
        "md5": "5fb68fb187a00c9861d9b595d7ab7e34",
        "sha256": "0a8f29c297f2be9eab299d9f769f6d0715bfe870352fc4394ba8a5d16f249cba"
      },
      "downloads": -1,
      "filename": "easyplotly-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5fb68fb187a00c9861d9b595d7ab7e34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8020,
      "upload_time": "2019-12-04T07:49:43",
      "upload_time_iso_8601": "2019-12-04T07:49:43.284528Z",
      "url": "https://files.pythonhosted.org/packages/06/e2/2886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8/easyplotly-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}