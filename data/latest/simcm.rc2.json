{
  "info": {
    "author": "Paul Wexler",
    "author_email": "paul.e.wexler@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing :: Mocking",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "# simcm 2.0.1\n\n`simcm.Simulate` is a context manager\nwhich can simulate responses from external resources.\n\nUse this tool to develop unit tests\nwhich obtain complete coverage\nwithout using the external resource.\n\nWhile testing there is often\na need to simulate the reponses of calls to external resources.\nPerhaps the resource is not available in the test environment,\nor there is code which handles exceptional cases\nwhich cannot be triggered on demand.\n\nA good strategy is to implement subordinate methods\nso they can be tested in isolation.\nEven so, the context required to test a particular method\nmay be difficult to arrange.\n\nIn these cases, a simulator which simulates the response\nis simpler to use because it lets the application run as is\nand handle the (supposedly) actual response.\n\n### DESCRIPTION\nSimulate a series of calls to a function with a list of mocked\nresponses.\n\nThe `Simulate` class is a context manager.\nOn `__enter__`, the target function is replaced with `simulate`\nOn `__exit__`, the target function is restored.\n\n    with Simulate(\n            target_string,\n            target_globals,\n            response_list):\n        test_the_application()\n\n* **target_string**:\n    The function to simulate, passed as a string.\n* **target_globals**:\n    A dict used to resolve any global references in target_string.\n* **response_list**:\n    The list of responses that `simulate` will return.\n    Each element of the list is either a callable (typically the target,\n    passed as a function) or a mocked response.\n\nThe elements of the `response_list` are put onto a FIFO queue.\n`simulate` reads the next element from the queue.\nIf the element is callable,\nit is called with all the arguments\nthe application had passed to the target,\nand the result is returned;\notherwise the element is returned.\n\nThere are two events to consider.\n\n1. `simulate` is called, but there is no next element.\n   In this case,\n   `queue_empty_on_simulate(*args, **kwargs)`\n   is called.\n   `queue_empty_on_simulate` raises `QueueEmptyError`.\n   As an aid in preparing the `response_list`,\n   `args` and `kwargs` are included in the exception message.\n\n2. `__exit__` is called, but elements remain in the queue.\n   In this case,\n   `queue_not_empty_on_exit(exception_type, exception_value, traceback)`\n   is called.\n   `queue_not_empty_on_exit` raises `QueueNotEmptyError`.\n   As an aid in preparing the `response_list`,\n   the number of elements remaining in the queue\n   is included in the exception message.\n\nBoth exceptions are sub-classes of `SimulateError`.\n\nTo change this behavior,\nsub-class `Simulate`, and overwrite these methods.\nIf `queue_empty_on_simulate` returns,\nit should return a callable or a mocked response.\n\n### EXAMPLE\n\nWhen the test is run,\nthe first GET request is sent\nand the actual response is returned.\nThe second GET request is not sent,\nthe MockedResponse is returned instead.\n\n#### my_app.py\n\n```\nimport requests\n\ndef my_app():\n    response1 = requests.request(\n            method='GET',\n            url='https://pypi.org')\n    if response1.status_code == 200:\n        response2 = requests.request(\n                method='GET',\n                url='http://google.com')\n        if reponse2.status_code == 500:\n            raise RuntimeError('Google 500')\n    else:\n        raise RuntimeError('Pypi not 200')\n```\n\n#### test\\_my\\_app.py\n```\nimport pytest\nimport requests\nimport simcm\n\nimport my_app\n\nclass MockedResponse:\n    def __init__(self, status_code, text):\n        self.status_code = status_code\n        self.text=text\n\ndef test_my_app_google_500():\n    with pytest.raises(RuntimeError) as exc: \n        with simcm.Simulate(\n                target_string='requests.request',\n                target_globals=dict(requests=requests),\n                response_list=[\n                        requests.request,\n                        MockedResponse(status_code=500, text='')]):\n            my_app.my_app()\n    result = str(exc.value)\n    expect = 'Google 500'\n    assert result == expect, f'result: {result}'\n```\n### CLASSES\n```\n    builtins.Exception(builtins.BaseException)\n        SimulateError\n            QueueEmptyError\n            QueueNotEmptyError\n    builtins.object\n        Simulate\n    \n    class QueueEmptyError(SimulateError)\n     |  queue empty\n     |  \n     |  Method resolution order:\n     |      QueueEmptyError\n     |      SimulateError\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |  \n    class QueueNotEmptyError(SimulateError)\n     |  queue not empty\n     |  \n     |  Method resolution order:\n     |      QueueNotEmptyError\n     |      SimulateError\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |  \n    class Simulate(builtins.object)\n     |  Simulate(target_string: str, target_globals: dict, response_list: list = None)\n     |  \n     |  Create a context which replaces the target callable\n     |  with self.simulate.\n     |  \n     |  Methods defined here:\n     |  \n     |  __enter__(self)\n     |      Save target.\n     |      Replace target with self.simulate.\n     |      Return self.\n     |  \n     |  __exit__(self, exception_type, exception_value, traceback)\n     |      Restore target.\n     |      Call queue_not_empty_on_exit if the queue is not empty.\n     |  \n     |  __init__(self, target_string: str, target_globals: dict, response_list: list = None)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  enqueue(self, response_list=None)\n     |      Put response_list items onto self.queue.\n     |      Default is self.response_list.\n     |  \n     |  queue_empty_on_simulate(self, *args, **kwargs)\n     |      What to do when the queue is empty\n     |      and simulate is called.\n     |      Raise QueueEmptyError.\n     |  \n     |  queue_not_empty_on_exit(self, exception_type, exception_value, traceback)\n     |      What to do when the queue is not empty on exit.\n     |      Raise QueueNotEmptyError.\n     |  \n     |  simulate(self, *args, **kwargs)\n     |      Interpret the next response.\n     |      If it is callable, call it, and return the result;\n     |      otherwise return it.\n     |  \n     |  ----------------------------------------------------------------------\n    class SimulateError(builtins.Exception)\n     |  base error\n     |  \n     |  Method resolution order:\n     |      SimulateError\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |  \n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paulwexler/simcm",
    "keywords": "simulate,unittest,mock,development",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simcm",
    "package_url": "https://pypi.org/project/simcm/",
    "platform": "",
    "project_url": "https://pypi.org/project/simcm/",
    "project_urls": {
      "Homepage": "https://github.com/paulwexler/simcm"
    },
    "release_url": "https://pypi.org/project/simcm/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Use this tool to develop unit tests which obtain complete coverage.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12086290,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e43b1820e8a05b0253882e98df4d5a58c28acdc8949b862797e8b22b273a86e7",
          "md5": "9734d92b7ada79fd696299d81bcf9405",
          "sha256": "513d136e5a79f6dbf7ea91e20fb0e0d688a815c40ab21071136dd48a3fa892c0"
        },
        "downloads": -1,
        "filename": "simcm-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9734d92b7ada79fd696299d81bcf9405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5499,
        "upload_time": "2021-11-21T22:35:59",
        "upload_time_iso_8601": "2021-11-21T22:35:59.811830Z",
        "url": "https://files.pythonhosted.org/packages/e4/3b/1820e8a05b0253882e98df4d5a58c28acdc8949b862797e8b22b273a86e7/simcm-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3034ef5504085271513303810984c82c9897ba39b0dad07df8416f3d336a577",
          "md5": "0c3ce2b5c15c9a376c61d961e1dfaf5a",
          "sha256": "378cbfab67ae3a790a3142ca3d141eecb6dfd01301bc9a3412bedf822cc65282"
        },
        "downloads": -1,
        "filename": "simcm-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c3ce2b5c15c9a376c61d961e1dfaf5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5509,
        "upload_time": "2021-11-21T23:34:15",
        "upload_time_iso_8601": "2021-11-21T23:34:15.069188Z",
        "url": "https://files.pythonhosted.org/packages/a3/03/4ef5504085271513303810984c82c9897ba39b0dad07df8416f3d336a577/simcm-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3034ef5504085271513303810984c82c9897ba39b0dad07df8416f3d336a577",
        "md5": "0c3ce2b5c15c9a376c61d961e1dfaf5a",
        "sha256": "378cbfab67ae3a790a3142ca3d141eecb6dfd01301bc9a3412bedf822cc65282"
      },
      "downloads": -1,
      "filename": "simcm-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0c3ce2b5c15c9a376c61d961e1dfaf5a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5509,
      "upload_time": "2021-11-21T23:34:15",
      "upload_time_iso_8601": "2021-11-21T23:34:15.069188Z",
      "url": "https://files.pythonhosted.org/packages/a3/03/4ef5504085271513303810984c82c9897ba39b0dad07df8416f3d336a577/simcm-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}