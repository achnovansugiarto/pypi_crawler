{
  "info": {
    "author": "Kiko Correoso",
    "author_email": "kikocorreoso@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# s2froms3\nGet Sentinel-2 Cloud Optimized Geotiffs (COG) files from AWS S3.\n\n## Installation\n\n`pip install s2froms3`\n\n## Dependencies\n\n`mgrs`, `s3fs`\n\n## Tutorial\n\nThe library is small and limited. It could be used to download Cloud Optimized\nGeotiff files from AWS S3.\n\nFirst of all we should import the library:\n\n`import s2froms3`\n\nTo know what you can download from S3 you can use:\n\n```python\nfor item in s2froms3.products.Properties:\n    print(item.value)\n    description = item.describe()\n    for k, v in description.items():\n        print(f'    {k}: {v}')\n    print()\n```\n\nThe previous code will print the available options to download COGs:\n\n```\nTCI\n    resolution: 10\n    title: True color image\n    center wavelength: None\n\nB01\n    resolution: 60\n    title: Band 1 (coastal)\n    center wavelength: 0.4439\n\nB02\n    resolution: 10\n    title: Band 2 (blue)\n    center wavelength: 0.4966\n\nB03\n    resolution: 10\n    title: Band 3 (green)\n    center wavelength: 0.56\n\nB04\n    resolution: 10\n    title: Band 4 (red)\n    center wavelength: 0.6645\n\nB05\n    resolution: 20\n    title: Band 5\n    center wavelength: 0.7039\n\nB06\n    resolution: 20\n    title: Band 6\n    center wavelength: 0.7402\n\nB07\n    resolution: 20\n    title: Band 7\n    center wavelength: 0.7825\n\nB08\n    resolution: 10\n    title: Band 8 (nir)\n    center wavelength: 0.8351\n\nB8A\n    resolution: 20\n    title: Band 8A\n    center wavelength: 0.8648\n\nB09\n    resolution: 60\n    title: Band 9\n    center wavelength: 0.945\n\nB11\n    resolution: 20\n    title: Band 11 (swir16)\n    center wavelength: 1.6137\n\nB12\n    resolution: 20\n    title: Band 12 (swir22)\n    center wavelength: 2.22024\n\nAOT\n    resolution: 60\n    title: Aerosol Optical Thickness (AOT)\n    center wavelength: None\n\nWVP\n    resolution: 10\n    title: Water Vapour (WVP)\n    center wavelength: None\n\nSCL\n    resolution: 20\n    title: Scene Classification Map (SCL)\n    center wavelength: None\n```\n\nOnce you know the different possibilities you can start to download COGs using\nthe following:\n\n```python\nimport datetime as dt\nfrom pathlib import Path\n\nlon = 10 # Longitude of interest\nlat = 10 # Latitude of interest\nstart_date = dt.date(2020, 8, 1) # Start date to search images\nend_date = dt.date(2020, 8, 15) # End date to search images\nwhat = ['B02', 'B03', 'B04'] # What we want to download\ncc = 25 # Minimum cloud cover on each image, 25 is 25%\nfolder = Path('.') # Where the files will be downloaded\n\ndownloaded = s2froms3.download_S2(\n    lon=lon,\n    lat=lat,\n    start_date=start_date,\n    end_date=end_date,\n    what=what,\n    cloud_cover_le=cc,\n    folder=folder\n)\n```\n\nAfter a while, you will find several COG files in the same folder where you\nwere running the code. The function above will return the S3 file paths of\nthe downloaded files:\n\n```python\nprint(downloaded)\n```\n\nThe previous code will show:\n\n```\n['sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2A_32PPS_20200804_0_L2A/B02.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2A_32PPS_20200804_0_L2A/B03.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2A_32PPS_20200804_0_L2A/B04.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200809_0_L2A/B02.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200809_0_L2A/B03.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200809_0_L2A/B04.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200812_0_L2A/B02.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200812_0_L2A/B03.tif',\n 'sentinel-cogs/sentinel-s2-l2a-cogs/32/P/PS/2020/8/S2B_32PPS_20200812_0_L2A/B04.tif']\n```\n\nSometimes the location you have in mind is in a border of a tile (COG) and\nthe scene you want to analyze is not complete. You can check if the location\nis close to a border/corner using the following function:\n\n```python\nfrom s2froms3 import point_in_tile\n\nprint(s2froms3.point_in_tile(2.98279, 39.73887))\n```\n\nThe previous code will show\n\n```\n\n+ + + + + + + + + + + \n+                 O + \n+                   + \n+                   + \n+                   + \n+                   + \n+                   + \n+                   + \n+                   + \n+                   + \n+ + + + + + + + + + + \n\n```\n\nThis way you can better understand if, in this case, you will need to \ndownload also the COGs in the East, the Northeast and/or the North.\n\nif you want to download also COG files adjacent to the target location\nyou could use the `also` option. For instance, in the previous case you\nmaybe also want to download the COGs located to the East (E), to the North\n(N) and to the Northeast (NE). You could do so with the following code:\n\n```python\nlon, lat = 2.98279, 39.73887\n\ndownloaded = s2froms3.download_S2(\n    lon=lon,\n    lat=lat,\n    start_date=start_date,\n    end_date=end_date,\n    what=what,\n    cloud_cover_le=cc,\n    folder=folder,\n    also=['N', 'NE', 'E']\n)\n```\n\nNow, you will get several COGs but also the COGs located to the N, NE and E.\n\n## TO-DO\n\n* ~~Use threading to download the files~~ (done :heavy_check_mark:).\n* Add entry point / cli command (I'm thinking about it. Let's see).\n\n## Issues / Feature requests\n\nFile an issue [here](https://github.com/kikocorreoso/s2froms3/issues) or start\na discussion [here](https://github.com/kikocorreoso/s2froms3/discussions).\n\n## Code of conduct\n\nAny interaction you have with me or others must be guided by the highest \nstandards of politeness and respect.\n\n## Releases\n\nversion 0.2.0\n\n* Added function `point_in_tile` to check were is located the requested location within the COG tile.\n* Added `ssl_option` keyword in `download_S2` function.\n* Use threading to download COG files.\n* Added `also` and `download` keywords in `download_S2` function.\n\nversion 0.1.0\n\n* Initial version with basic machinery to download Sentinel-2 COGs from S3.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kikocorreoso/s2froms3",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "s2froms3",
    "package_url": "https://pypi.org/project/s2froms3/",
    "platform": "",
    "project_url": "https://pypi.org/project/s2froms3/",
    "project_urls": {
      "Homepage": "https://github.com/kikocorreoso/s2froms3"
    },
    "release_url": "https://pypi.org/project/s2froms3/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<3.10",
    "summary": "Get Sentinel-2 (Cloud Optimized Geotiffs) COG files from AWS S3.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10076975,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0072cc8c0a1c6d47684f0c3ea5257c252ca7e36096f0c222312949b216f6c163",
          "md5": "5629501b91aa52ae121a55916b6d0409",
          "sha256": "a2f3f4e504f702e77a46510658d856c0d3e509feaafd09fc8824b1b762847d5b"
        },
        "downloads": -1,
        "filename": "s2froms3-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5629501b91aa52ae121a55916b6d0409",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.9",
        "size": 6887,
        "upload_time": "2021-03-14T21:19:26",
        "upload_time_iso_8601": "2021-03-14T21:19:26.909162Z",
        "url": "https://files.pythonhosted.org/packages/00/72/cc8c0a1c6d47684f0c3ea5257c252ca7e36096f0c222312949b216f6c163/s2froms3-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60756775791da78769f211ed7d9ba61caea2bcb0c998dabd8f45f542a3ee75ea",
          "md5": "e02418b092e5992f25e52b28248f03af",
          "sha256": "fb2c643db3072c779cec1eb113f297c23d7a9ed60bd425b5785a91e6a0956fde"
        },
        "downloads": -1,
        "filename": "s2froms3-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e02418b092e5992f25e52b28248f03af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.10",
        "size": 9732,
        "upload_time": "2021-04-15T19:49:02",
        "upload_time_iso_8601": "2021-04-15T19:49:02.756174Z",
        "url": "https://files.pythonhosted.org/packages/60/75/6775791da78769f211ed7d9ba61caea2bcb0c998dabd8f45f542a3ee75ea/s2froms3-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60756775791da78769f211ed7d9ba61caea2bcb0c998dabd8f45f542a3ee75ea",
        "md5": "e02418b092e5992f25e52b28248f03af",
        "sha256": "fb2c643db3072c779cec1eb113f297c23d7a9ed60bd425b5785a91e6a0956fde"
      },
      "downloads": -1,
      "filename": "s2froms3-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e02418b092e5992f25e52b28248f03af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<3.10",
      "size": 9732,
      "upload_time": "2021-04-15T19:49:02",
      "upload_time_iso_8601": "2021-04-15T19:49:02.756174Z",
      "url": "https://files.pythonhosted.org/packages/60/75/6775791da78769f211ed7d9ba61caea2bcb0c998dabd8f45f542a3ee75ea/s2froms3-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}