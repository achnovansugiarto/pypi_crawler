{
  "info": {
    "author": "Takayuki Hirayama",
    "author_email": "th.windbell+github@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Mocking",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "===========================\ndjango-override-autonow\n===========================\n\n.. image:: https://img.shields.io/pypi/v/django-override-autonow.svg\n    :target: https://pypi.org/project/django-override-autonow/\n    :alt: PyPI Version\n\n.. image:: https://github.com/yukihira1992/django-override-autonow/actions/workflows/test-package.yml/badge.svg\n    :target: https://github.com/yukihira1992/django-override-autonow/actions\n    :alt: Build status\n\n``django-override-autonow`` is a testing tool for Django's project.\n``django-override-autonow`` makes it easy to create model instance using ``DateField`` or ``DateTimeField`` with ``auto_now`` or ``auto_now_add`` options.\n\nAn example of django's model:\n\n.. code-block:: python\n\n    from django.db import models\n\n\n    class Order(models.Model):\n        amount = models.IntegerField()\n        status = models.CharField(max_length=100)\n        created_time = models.DateTimeField(auto_now_add=True)\n        updated_time = models.DateTimeField(auto_now=True)\n\nTo test this model:\n\n.. code-block:: python\n\n    from unittest import mock\n\n    from django.test import TestCase\n    from django.utils import timezone\n    from override_autonow import override_autonow\n\n    from .models import Order\n\n\n    class TestOrder(TestCase):\n\n        @override_autonow\n        def test_with_django_override_autonow(self):\n            # We need a order with desired created_time and updated_time for test\n            order = Order.objects.create(\n                amount=200,\n                status='PAID',\n                created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n            )\n\n            # test order\n\n        def test_without_django_override_autonow(self):\n            # Django's standard way is to mock timezone.now and save the model.\n\n            # First, create object with mocking timezone.now and set desired value to created_time field\n            with mock.patch('django.db.models.fields.timezone') as mock_timezone:\n                mock_timezone.now.return_value = timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59)\n                order = Order.objects.create(\n                    amount=200,\n                    status='PAID',\n                )\n\n            # Second, save object again with mocking timezone.now and set desired value to updated_time field\n            with mock.patch('django.db.models.fields.timezone') as mock_timezone:\n                mock_timezone.now.return_value = timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0)\n                order.save()\n\n            # test order\n\nFeatures\n========\n\n- Support Django 2.2+ and Python 3.7+\n- Compatible with major testing packages\n    - `pytest <https://docs.pytest.org/en/6.2.x/>`_'s class based test and function based test with `pytest-django <https://pytest-django.readthedocs.io/en/latest/>`_\n    - `factory-boy <https://factoryboy.readthedocs.io/en/stable/>`_'s model factory\n- Choose suitable style for your situation\n    - Method decorator\n    - Class decorator\n    - Context manager\n- Flexible override target selection\n    - Affects only specified field names and exclude specified field names\n    - Affects only specified models and exclude specified field names\n    - Affects only ``auto_now`` option or ``auto_now_add`` option\n    - Affects only ``DateField`` or ``DateTimeField``\n\nInstallation\n============\n\nInstalling from PyPI::\n\n    pip install django-override-autonow\n\nUse Cases\n=========\n\nTest with Django's TestCase:\n\n.. code-block:: python\n\n    from django.test import TestCase\n\n    from override_autonow import override_autonow\n\n    from .models import Order\n\n\n    class TestOrder(TestCase):\n\n        # as method decorator\n\n        @override_autonow\n        def test_with_method_decorator(self):\n            order = Order.objects.create(\n                amount=200,\n                status='PAID',\n                created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n            )\n\n            # test order\n\n        def test_with_context_manager(self):\n\n            # as context manager\n\n            with override_autonow():\n                order_with_override = Order.objects.create(\n                    amount=200,\n                    status='PAID',\n                    created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                    updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n                )\n\n            order_without_override = Order.objects.create(\n                amount=200,\n                status='PAID',\n            )\n\n            # test order\n\n\n    # as class decorator\n\n    @override_autonow\n    class TestWithClassDecorator(TestCase):\n        def test_with_class_decorator(self):\n            order = Order.objects.create(\n                amount=200,\n                status='PAID',\n                created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n            )\n\n            # test order\n\nTest with pytest(pytest-django):\n\n.. code-block:: python\n\n    import pytest\n\n    from override_autonow import override_autonow\n\n    from .models import Order\n\n\n    @pytest.mark.django_db\n    class TestOrder:\n\n        # as method decorator\n\n        @override_autonow\n        def test_with_method_decorator(self):\n            order = Order.objects.create(\n                amount=200,\n                status='PAID',\n                created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n            )\n\n            # test order\n\n        def test_with_context_manager(self):\n\n            # as context manager\n\n            with override_autonow():\n                order_without_autonow = Order.objects.create(\n                    amount=200,\n                    status='PAID',\n                    created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                    updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n                )\n\n            order_with_autonow = Order.objects.create(\n                amount=200,\n                status='PAID',\n            )\n\n            # test order\n\n\n    # as class decorator\n\n    @override_autonow\n    @pytest.mark.django_db\n    class TestWithClassDecorator:\n        def test_with_class_decorator(self):\n            order = Order.objects.create(\n                amount=200,\n                status='PAID',\n                created_time=timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59),\n                updated_time=timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0),\n            )\n\n            # test order\n\nOverride specific targets:\n\n.. code-block:: python\n\n    from django.test import TestCase\n\n    from override_autonow import override_autonow\n\n    from .models import Order\n\n\n    class TestOrder(TestCase):\n        @override_autonow(exclude_auto_now=True)\n        def test_exclude_auto_now_option(self):\n            # Override only auto_now_add option\n            ...\n\n        @override_autonow(exclude_auto_now_add=True)\n        def test_exclude_auto_now_add_option(self):\n            # Override only auto_now option\n            ...\n\n        @override_autonow(exclude_date_field=True)\n        def test_exclude_date_field(self):\n            # Override only DateTimeField\n            ...\n\n        @override_autonow(exclude_datetime_field=True)\n        def test_exclude_datetime_field(self):\n            # Override only DateField\n            ...\n\n        @override_autonow(exclude_field_names={'created_time'})\n        def test_exclude_field_names(self):\n            # Override except fields named created_time\n            ...\n\n        @override_autonow(exclude_models=(Order,))\n        def test_exclude_models(self):\n            # Override except the Order model\n            ...\n\n        @override_autonow(override_field_names={'created_time'})\n        def test_override_field_names(self):\n            # Override only fields named created_time\n            ...\n\n        @override_autonow(override_models=(Order,))\n        def test_override_models(self):\n            # Override only the Order model\n            ...\n\nTest with factory-bot:\n\n.. code-block:: python\n\n    from django.test import TestCase\n    from django.utils import timezone\n    from factory.django import DjangoModelFactory\n\n    from override_autonow import override_autonow\n\n    from .models import Order\n\n\n    class OrderFactory:\n        class Meta:\n            model = Order\n\n        amount = 200,\n        status = 'PAID',\n        created_time = timezone.datetime(year=2022, month=1, day=1, hour=23, minute=59, second=59)\n        updated_time = timezone.datetime(year=2022, month=1, day=2, hour=0, minute=0, second=0)\n\n\n    class TestOrder(TestCase):\n        @override_autonow\n        def test_with_method_decorator(self):\n\n            # Override created_time and updated_time with factory\n\n            order = OrderFactory()\n\n            # test order\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yukihira1992/django-override-autonow",
    "keywords": "django,pytest,unittest,auto_now,auto_now_add,override,date,datetime",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-override-autonow",
    "package_url": "https://pypi.org/project/django-override-autonow/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-override-autonow/",
    "project_urls": {
      "Bug Tracker": "https://github.com/yukihira1992/django-override-autonow/issues",
      "Homepage": "https://github.com/yukihira1992/django-override-autonow"
    },
    "release_url": "https://pypi.org/project/django-override-autonow/0.0.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "pytest ; extra == 'testing'",
      "pytest-django ; extra == 'testing'"
    ],
    "requires_python": ">=3.7",
    "summary": "Temporarily disable auto_now and auto_now_add option in Django's DateField and DateTimeField, so that you can save the desired value to these fields.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12587738,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08f629ee4148c46c98352ef98d74207f9ab9ab5c9674252b196524233d8501b8",
          "md5": "a5e25c277aab050a20943cc89abf6d80",
          "sha256": "cd838fd3a27859721c22b4e034c1993a3bb5ee500403499be4620c9223ac0108"
        },
        "downloads": -1,
        "filename": "django_override_autonow-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5e25c277aab050a20943cc89abf6d80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5958,
        "upload_time": "2022-01-16T09:47:14",
        "upload_time_iso_8601": "2022-01-16T09:47:14.132029Z",
        "url": "https://files.pythonhosted.org/packages/08/f6/29ee4148c46c98352ef98d74207f9ab9ab5c9674252b196524233d8501b8/django_override_autonow-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b10ee02cd80245c7b69ea79adf2120d90a662c93d7b461e177ad79f69e6c7dc3",
          "md5": "633160d800dec7ac7e3063e334c0d293",
          "sha256": "017c39a926851a9ae070cb9ade39be8e7ead88a834e284016b6014f0050629f7"
        },
        "downloads": -1,
        "filename": "django-override-autonow-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "633160d800dec7ac7e3063e334c0d293",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5603,
        "upload_time": "2022-01-16T09:47:15",
        "upload_time_iso_8601": "2022-01-16T09:47:15.766887Z",
        "url": "https://files.pythonhosted.org/packages/b1/0e/e02cd80245c7b69ea79adf2120d90a662c93d7b461e177ad79f69e6c7dc3/django-override-autonow-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08f629ee4148c46c98352ef98d74207f9ab9ab5c9674252b196524233d8501b8",
        "md5": "a5e25c277aab050a20943cc89abf6d80",
        "sha256": "cd838fd3a27859721c22b4e034c1993a3bb5ee500403499be4620c9223ac0108"
      },
      "downloads": -1,
      "filename": "django_override_autonow-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5e25c277aab050a20943cc89abf6d80",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5958,
      "upload_time": "2022-01-16T09:47:14",
      "upload_time_iso_8601": "2022-01-16T09:47:14.132029Z",
      "url": "https://files.pythonhosted.org/packages/08/f6/29ee4148c46c98352ef98d74207f9ab9ab5c9674252b196524233d8501b8/django_override_autonow-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b10ee02cd80245c7b69ea79adf2120d90a662c93d7b461e177ad79f69e6c7dc3",
        "md5": "633160d800dec7ac7e3063e334c0d293",
        "sha256": "017c39a926851a9ae070cb9ade39be8e7ead88a834e284016b6014f0050629f7"
      },
      "downloads": -1,
      "filename": "django-override-autonow-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "633160d800dec7ac7e3063e334c0d293",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5603,
      "upload_time": "2022-01-16T09:47:15",
      "upload_time_iso_8601": "2022-01-16T09:47:15.766887Z",
      "url": "https://files.pythonhosted.org/packages/b1/0e/e02cd80245c7b69ea79adf2120d90a662c93d7b461e177ad79f69e6c7dc3/django-override-autonow-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}