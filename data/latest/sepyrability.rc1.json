{
  "info": {
    "author": "Jo√£o Renato Ribeiro manesco",
    "author_email": "joaorenatorm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# SePYrability\nPython implementation of the separability metric.\n\nPython implementation of the Multiscale Separability metric as shown in \\[1\\]. The original paper from which the implementation was based of can be found [here](https://doi.org/10.1016/j.patcog.2003.10.007).\n\nAfter using this package consider citing the paper from which the implementation was based of:\n\n```\n[1] TORRES, R. da S.; FALCAO, Alexandre X.; COSTA, L. da F. A graph-based approach for multiscale shape analysis. Pattern Recognition, v. 37, n. 6, p. 1163-1174, 2004.\n```\n\n# Table of Contents\n* [SePYrability](#SePYrability)\n* [Table of Contents](#table-of-contents)\n* [Multiscale Separability](#multiscale-separability)\n* [Installation](#installation)\n    * [Method 1 - PIP](#method-1---pip)\n    * [Method 2 - Manual Installation](#method-2---manual-installation)\n* [Usage](#usage)\n* [Custom Distance Function](#custom-distance-function)\n* [Example](#example)\n\n## Multiscale Separability\n<!-- WIP: Better explanation of the Multiscale Separability -->\nThe separability of a descriptor indicates it's discriminatory capabilities among individuals of the same class. It measures the effectiveness of a descriptor by showing how far data is from that descriptor.\n\n## Installation\n\n### Method 1 - PIP\nJust run:\n```pip install sepyrability``` \n\n### Method 2 - Manual Installation\n\nFirst, clone the directory, by running:\n\n```git clone https://github.com/jrjoaorenato/SePYrability.git```\n\nThe package requires the following dependencies:\n- numpy\n- matplotlib\n\nYou can install those dependencies by running the following command in the package directory:\n``` pip install -r requirements.txt ```\n\nAfter that you can run the following command in the package directory to install the package:\n``` pip install -e . ```\n\n## Usage\n\nYou can import the package by using:\n``` import sepyrability.separability as sep ```\n\nThe default distance metrics already implemented, can be imported by:\n``` import sepyrability.distance as dis ```\n\nThe types of distance currently implemented are:\n\n0. `euclidian` - Euclidian distance\n1. `cosine` - Cosine distance\n\nTo access the distances you can use: `dis.<chosen distance>`.\n\nAfter properly importing the package you can compute the multiscale separability with the following attributes:\n\n```python\nsep.calculate_separability(data, labels, distfun = dis.euclidian, dx = 0.02, start= 0.01, show_graph = True):\n```\n\n```\nArguments:\n    n is the number of instances\n    and f is the dimensionality of the features\n    data {numpy Matrix [n x f]} -- The data on which separability is going to be calculated\n    labels {np.array[n]} -- label information for each piece of data\n    distfun {function} -- function used to calculate distance: euclidian\n    dx {float} -- step size for distance calculation\n    start {float} -- starting point for the steps\n    show_graph {bool} -- Boolean to show or not the multiscale separability graph\n\nReturns:\n    multiscale_separability {dictionary} -- dictionary containing:\n        - 'multiscale_separability' [array of floats] -- multiscale_separability for a specific radius\n        - 'distance' [array of floats] -- corresponding radius distance for multiscale_separability\n    auc -- area under the curve of the separability graph\n    --plots graph if 'show_graph' is True\n```\nYou can easily obtain the multiscale seprability data using sep.calculate_separability(data, labels). If you want, you can also specify a different distance function from euclidian, by passing the function as an argument of distfun, including your own, as shown in the next session.\n\n## Custom Distance Function\nYou have the option to implement your own distance function and pass it as an argument of distfun. This can be done by creating a custom function that receives a reference point 'ref' and a data point 'X' as arguments, and returns the distance between these two points. \n\nNOTE: The distance should be normalized between 0 and 1.\n\nAn example can be seen below:\n\n```python\ndef custom_euclidian(ref, X):\n    #returns normalized euclidian distance from the reference point\n    dist = X - ref\n    dist = np.sqrt(np.sum(np.power(dist, 2), axis = 1))\n    dist = dist/np.max(dist)\n    return dist\n\n#this can be called below by using:\nms, auc = sep.calculate_separability(Xt, Yt, distfun=dis.custom_euclidian)\n```\n\n## Example\n```python\nimport sepyrability.separability as sep\nimport scipy.io as sio\nimport numpy as np\n\nD = loadmat(<some .mat dataset location>)\nX = D['X']\nY = D['Y']\nms, auc = sep.calculate_separability(Xt, Yt)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/jrjoaorenato/SePYrability/archive/v0.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jrjoaorenato/SePYrability",
    "keywords": "Separability,Metric",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SePyrability",
    "package_url": "https://pypi.org/project/SePyrability/",
    "platform": "",
    "project_url": "https://pypi.org/project/SePyrability/",
    "project_urls": {
      "Download": "https://github.com/jrjoaorenato/SePYrability/archive/v0.0.1.tar.gz",
      "Homepage": "https://github.com/jrjoaorenato/SePYrability"
    },
    "release_url": "https://pypi.org/project/SePyrability/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python implementation of the multiscale separability metric.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8480706,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a42da706a18f36634ea183b37bf8f5ba6b170614ba27755d24a7f45eecd615",
          "md5": "beb1731de1dd297547d31bb5c8c9ed21",
          "sha256": "6e244b54baa2626eab94033c26c87cfb76ae3b41359f81c2fc054a9011c845ce"
        },
        "downloads": -1,
        "filename": "SePyrability-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "beb1731de1dd297547d31bb5c8c9ed21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5008,
        "upload_time": "2020-10-23T01:28:42",
        "upload_time_iso_8601": "2020-10-23T01:28:42.564650Z",
        "url": "https://files.pythonhosted.org/packages/97/a4/2da706a18f36634ea183b37bf8f5ba6b170614ba27755d24a7f45eecd615/SePyrability-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97a42da706a18f36634ea183b37bf8f5ba6b170614ba27755d24a7f45eecd615",
        "md5": "beb1731de1dd297547d31bb5c8c9ed21",
        "sha256": "6e244b54baa2626eab94033c26c87cfb76ae3b41359f81c2fc054a9011c845ce"
      },
      "downloads": -1,
      "filename": "SePyrability-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "beb1731de1dd297547d31bb5c8c9ed21",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5008,
      "upload_time": "2020-10-23T01:28:42",
      "upload_time_iso_8601": "2020-10-23T01:28:42.564650Z",
      "url": "https://files.pythonhosted.org/packages/97/a4/2da706a18f36634ea183b37bf8f5ba6b170614ba27755d24a7f45eecd615/SePyrability-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}