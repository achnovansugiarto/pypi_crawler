{
  "info": {
    "author": "shrir",
    "author_email": "s@b.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# xpress - Build expressions, serialize them as JSON, and evaluate them in Python\n\nxpress is inspired by JsonLogic but aims to terser at the cost of reduced features. It ONLY supports logical operators.\n\n## Virtues\n\nxpress follows similar principles as JsonLogic\n\n1. Terse(er).\n2. Readable. As close to infix expressions as possible\n3. Consistent. 3-tuple expressions `[\"operand\", \"operator\", \"operand\"]` joined by `AND` and/or `OR` \n4. Secure. We never `eval()`\n5. Flexible. Easy to add new operators, easy to build complex structures\n\n## Limitations\n\n1. Only logical operators are supported.\n2. Unary operators are not supported.\n\n## Examples\n\n### Simple\n\n```python\nxpress.evaluate([1, \"==\", 1])\n# True\n```\n\nThis is a simple rule, equivalent to 1 == 1. A few things about the format:\n\n1. The operator is always at the 2nd position(index: 1) in the expression 3-tuple. There is only one operator per expression.\n2. The operands are either a literal, a variable or an array of literals and/or variables.\n3. Each value can be a string, number, boolean, array (non-associative), or null\n\n### Compound\n\nHere we’re beginning to nest rules.\n\n```python\nxpress.evaluate([[3, \">\", 1], \"and\", [1, \"<\", 3]])\n# True\n```\n\nIn an infix language (like Python) this could be written as:\n\n```python\n( (3 > 1) and (1 < 3) )\n```\n\n### Data-Driven\n\nObviously these rules aren’t very interesting if they can only take static literal data. Typically xpress will be called with a rule object and a data object. You can use the var operator to get attributes of the data object. Here’s a complex rule that mixes literals and data. The pie isn’t ready to eat unless it’s cooler than 110 degrees, and filled with apples.\n\n```python\nrules = [[\"var:temp\", \"<\", 110], \"and\", [\"var:pie.filling\", \"==\", \"apple\"]]\ndata = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } };\nxpress.evaluate(rules, data);\n# True\n```\n\n### Always and Never\n\nSometimes the rule you want to process is “Always” or “Never.” If the first parameter passed to jsonLogic is a non-object, non-associative-array, it is returned immediately.\n\n```python\n# Always\nxpress.evaluate(True, data_will_be_ignored)\n# True\n```\n\n```python\n# Never\nxpress.evaluate(False, i_wasnt_even_supposed_to_be_here)\n# False\n```\n\n## Supported Operations\n\n### Accessing Data\n\n- `var`\n\n### Logical and Boolean Operators\n\n- `==`\n- `===`\n- `!=`\n- `!==`\n- `or`\n- `and`\n\n### Numeric Operators\n\n- `>`, `>=`, `<` and `<=`\n\n### Array Operators\n- `in`\n\n### String Operators\n- `in`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shrir/xpress",
    "keywords": "xpress",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xpression",
    "package_url": "https://pypi.org/project/xpression/",
    "platform": null,
    "project_url": "https://pypi.org/project/xpression/",
    "project_urls": {
      "Homepage": "https://github.com/shrir/xpress"
    },
    "release_url": "https://pypi.org/project/xpression/0.1.0/",
    "requires_dist": [
      "check-manifest ; extra == 'dev'",
      "pytest ; extra == 'test'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3",
    "summary": "Build expressions, serialize them as JSON, and evaluate them in Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13115754,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad921eebd9e272179b6ab3892d8dd8b1f1061e2988871e6f009f6e414bf57ccf",
          "md5": "d026d557ede77f5543758925dfb856d4",
          "sha256": "bb3741ffef5437a1adfdcd9e2b750adeb907c6661e00545984089ee60a3b86db"
        },
        "downloads": -1,
        "filename": "xpression-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d026d557ede77f5543758925dfb856d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4842,
        "upload_time": "2022-03-08T17:53:11",
        "upload_time_iso_8601": "2022-03-08T17:53:11.959577Z",
        "url": "https://files.pythonhosted.org/packages/ad/92/1eebd9e272179b6ab3892d8dd8b1f1061e2988871e6f009f6e414bf57ccf/xpression-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd0afd359114c2414edf95c991022260ac3bf8748435922dc9dce653548f34f5",
          "md5": "3b50bcbd75432c0bc5c38228dd7ef13b",
          "sha256": "c706be2eccbf552aaa5b472a06b3a405f1843c4ac72963e46f5606eaa2ba86b6"
        },
        "downloads": -1,
        "filename": "xpression-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b50bcbd75432c0bc5c38228dd7ef13b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5283,
        "upload_time": "2022-03-08T17:53:13",
        "upload_time_iso_8601": "2022-03-08T17:53:13.474631Z",
        "url": "https://files.pythonhosted.org/packages/bd/0a/fd359114c2414edf95c991022260ac3bf8748435922dc9dce653548f34f5/xpression-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad921eebd9e272179b6ab3892d8dd8b1f1061e2988871e6f009f6e414bf57ccf",
        "md5": "d026d557ede77f5543758925dfb856d4",
        "sha256": "bb3741ffef5437a1adfdcd9e2b750adeb907c6661e00545984089ee60a3b86db"
      },
      "downloads": -1,
      "filename": "xpression-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d026d557ede77f5543758925dfb856d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 4842,
      "upload_time": "2022-03-08T17:53:11",
      "upload_time_iso_8601": "2022-03-08T17:53:11.959577Z",
      "url": "https://files.pythonhosted.org/packages/ad/92/1eebd9e272179b6ab3892d8dd8b1f1061e2988871e6f009f6e414bf57ccf/xpression-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd0afd359114c2414edf95c991022260ac3bf8748435922dc9dce653548f34f5",
        "md5": "3b50bcbd75432c0bc5c38228dd7ef13b",
        "sha256": "c706be2eccbf552aaa5b472a06b3a405f1843c4ac72963e46f5606eaa2ba86b6"
      },
      "downloads": -1,
      "filename": "xpression-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b50bcbd75432c0bc5c38228dd7ef13b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 5283,
      "upload_time": "2022-03-08T17:53:13",
      "upload_time_iso_8601": "2022-03-08T17:53:13.474631Z",
      "url": "https://files.pythonhosted.org/packages/bd/0a/fd359114c2414edf95c991022260ac3bf8748435922dc9dce653548f34f5/xpression-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}