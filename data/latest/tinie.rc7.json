{
  "info": {
    "author": "Rostislav Duda, Joonas Keski-Rahkonen, Janne Solanpää",
    "author_email": "rostislav.duda@tuni.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Boost Software License 1.0 (BSL-1.0)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "|pypi license| |pypi version| |pypi status| |Python implementation|\n|Python versions| |Python wheel| |pipeline status| |coverage report|\n\nTransport In a Non-Interacting Equilibrium simulation framework (TINIE)\n=======================================================================\n\nOverview\n--------\n\nWe present to you a code that calculates conductance and electric\ncurrent running through 2D cavities, quantum dots or potential wells\nwith arbitrarily placed reservoirs in a perpendicular and constant\nmagnetic field. The code can be used in a wide range of calculations\ninvolving 2D electron transport. The main difference between this code\nand its competitors is the fact that TINIE does not need to be provided\nwith free parameters. The code is parallelized with ``mpi4py``, allowing\nfor computational tasks distribution across multiple processors.\n\nInstallation\n------------\n\nThe code is a Python package (written using Python 3.6). In non-parallel\nsimulations, ``tinie`` can function without MPI-support in the\n``HDF5``-library, but parallel simulations require the ``HDF5`` library\nand its Python-wrapper ``h5py`` to be built with MPI support (see\n`Parallel HDF5 – h5py\ndocumentation <http://docs.h5py.org/en/stable/mpi.html>`__ for\ninstallation instructions).\n\n``tinie`` can be installed with ``pip``:\n\n.. code:: bash\n\n   $ pip install tinie\n\n``tinie`` installs a command line interface toolset, and you can test\nthe functionality with the following commands:\n\n.. code:: bash\n\n   $ tinie_prepare\n   $ tinie\n\nThorough test suite for the package has been implemented and can be\nlaunched via ``python3 setup.py test`` from the root of the git\nrepository.\n\nPackage Functionality\n---------------------\n\nThis package contains tools that could be used to calculate coupling of\na specific system that contains a central region (2DEG) and some leads.\nAfter the coupling is calculated one could proceed to calculate\ntransmission coefficients and partial currents in the leads. All the\ncalculations are performed in Hartee atomic units. After installing the\npackage, a simple test run can be launched as follows:\n\n.. code:: bash\n\n   $ tinie_prepare\n   $ tinie\n\nPackage Structure\n-----------------\n\nThe code is written using object-oriented programming, and its\nfunctionality can be shortly described in the following way: first,\n``Lead``, and ``Center`` objects are created and passed as inputs for\nthe ``Coupling`` object and then all of them are passed into a\n``SystemDump`` object, which calculates all the couplings and\nHamiltonians and dumps the data into an hdf5 file. ``SystemFetch`` is\nthen used to read the data from that hdf5 file. That data is passed into\nthe ``Calculator`` interface, where ``SelfEnergy`` interface calculates\nthe self-energies |selfenergy| and rate operators\n|rateoperator| using the ``Coupling`` and the\neigenenergies of the ``Lead``.\n\n.. |selfenergy| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Sigma_{L}(\\\\omega).svg\n.. |rateoperator| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Gamma_{L}(\\\\omega).svg\n\nAfter that, ``SelfEnergy`` for all the leads and the eigenenergies of\nthe ``Center`` are passed into the ``GreenFunction`` interface that\nevaluates the advanced (|green_adv|) and retarded\n(|green_ret|) Green’s functions, finalizing the\ninitialization of the ``Calculator``. From there the code is able to\ncompute the transmission matrix |transmat|\nand the partial currents\n\n|partial_current|\n\n.. |green_adv| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/G^{A}(\\\\omega).svg\n.. |green_ret| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/G^{R}(\\\\omega).svg\n.. |transmat| image::  https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathcal{T}_{\\\\alpha\\\\beta}(\\\\omega)=\\\\mathrm{Tr}[G^{R}(\\\\omega)\\\\Gamma_{\\\\beta}(\\\\omega)G^{A}(\\\\omega)\\\\Gamma_{\\\\alpha}(\\\\omega)].svg\n\n.. |partial_current| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/i_{\\\\alpha\\\\beta}=2\\\\int\\\\mathrm{d}\\\\omega\\\\frac{1}{2\\\\pi}[f(\\\\omega-V_{\\\\alpha}-\\\\mu)-f(\\\\omega-V_{\\\\beta}-\\\\mu)]\\\\mathcal{T}_{\\\\alpha\\\\beta}(\\\\omega).svg\n\nin the lead, where |fd| is the Fermi-Dirac energy\ndistribution. Furthermore, it is then possible to compute other\ntransport properties, such as conductance at a specific temperature.\nAdditionally, we include the possibility of computing density of states\nand local density of states.\n\n.. |fd| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/f(E).svg\n\nModular structure of the code allows for the implementation of your own\ncustom type of conducting channel (\"lead\"), quantum dot (\"central\nregion\") and coupling via implementation of a class that inherits from\n``Lead``, ``Center`` or ``Coupling``. The details of how exactly the\nclasses should be implemented will be explained in the sections to\nfollow.\n\nExample: Usage of TINIE with ITP2D\n----------------------------------\n\nTo better demonstrate how TINIE is used, we will show it by means of an\nexample problem. We will compute transport properties of a quantum-dot\nsystem with two leads in a magnetic field. Specifically, we shall\nprocure the information about the central region from ITP2D, a\nSchrödinger equation eigensolver that interfaces with TINIE. The\nfollowing workflow is typical for most transport problems solved with\nTINIE:\n\n**Step 0:** computation of the Hamiltonian and wavefunctions of the\ncentral region. We may obtain this information from any eigensolver of\nour choosing, provided that it is TINIE-compatible. Quantum dot may be\nmodeled by a radial harmonic potential of form |Vharmonic|. Solving the first\n25 states of this model with magnetic field strength |Bis1| is\ndone in ITP2D as follows:\n\n.. |Vharmonic| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/V(r)=\\\\frac{1}{2}\\\\omega_0.svg\n.. |Bis1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/B=1.svg\n\n.. code:: bash\n\n   $ itp2d -v -n 20 -l 12 -s 100 -p \"harmonic(1)\" -B 1.0 -o ITP2D_FILE_PATH\n\nHere the central region occupies a |6to6| region in both x-and y-directions\nand is centered at the origin. More information about\nusage of ITP2D can be found on its `bitbucket\npage <https://bitbucket.org/luukko/itp2d/>`__.\n\n.. |6to6| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[-6,\\\\,6].svg\n\n\n**Step 1:** the transport system preparation step. In this step, the\ncoupling matrices for the leads are computed. Suppose we wish to compute\noverlap coupling between the central region and the leads and we want to\nvary the probe energy within each lead in range |0to2| with\nenergy spacing of |dEis0.001|. In this case, the first 5\nstates of the central region are sufficient for the calculation. Our\nleads are such that:\n\n.. |0to2| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[0,\\\\,2].svg\n.. |dEis0.001| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Delta%20E=0.001.svg\n\n* Lead 0 is confined to region |-10to-4| in x-direction, \\\n  |-5to5| in y-direction and connects to the lead from the left;\n* Lead 1 is confined to region |4to10| in x-direction, |-5to5| in y-direction\n  and connects to the lead from the right.\n\n.. |-10to-4| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[-10,\\\\,-4].svg\n.. |-5to5| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[-5,\\\\,5].svg\n.. |4to10| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[4,\\\\,10].svg\n\n\nBoth leads in this case have harmonic potential of strength\n|omega0=1| in y-direction, and particle-in-a-box\npotential in x-direction. This information is sufficient for\nus to commence the system preparation. For that, ``tinie_prepare``\nscript is used as follows:\n\n.. |omega0=1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega_0=1.svg\n\n\n.. code:: bash\n\n   $ tinie_prepare -dE 1e-3 -B 1.0 -ctr \"itp2d(ITP2D_FILE_PATH,(0,4))\" -l 2 -ld \"finharm(left,1.0,dir)\" \"finharm(right,1.0,dir)\" -xlim \"[-10.0,-4.0]\" \"[4.0,10.0]\" -ylim \"[-5.0,5.0]\" \"[-5.0,5.0]\" -Elim \"[0.0,2.0]\" \"[0.0,2.0]\" -cpl \"overlap()\" \"overlap()\" -o TINIE_PREPARE_FILE_PATH\n\nThis produces the PREPTINIEFile that contains the information about the\ncoupling of the transport system which can be reused for different\ntransport calculations of the next step.\n\n**Step 2:** the transport calculation step. This is where the real fun\nbegins, the steps before are in a sense just a preparation. To compute\nvarious transport properties of the system, such as transmission,\nconductance and current, we fix temperature of the system\n|T=1|, chemical potential |mu=1| and fix bias\nvoltages in the leads to be |V0=0.5| in Lead 0 and\n|V1=1.5|. Moreover, we adjust the energy spacing of probe\nelectrons to |w0=0.01| and set the Green’s function\nboundary parameter to |eta=0.1|. With this information we can\nuse ``tinie`` script as follows:\n\n.. |mu=1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mu=1.svg\n.. |T=1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/T=1.svg\n.. |V0=0.5| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/V_0=0.5.svg\n.. |V1=1.5| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/V_1=1.5.svg\n.. |w0=0.01| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega_0=0.01.svg\n.. |eta=0.1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\eta=0.1.svg\n\n\n.. code:: bash\n\n   $ tinie -i TINIE_PREPARE_FILE_PATH -dw 1e-2 -eta 1e-1 -T 1.0 -mu 1.0 -V 0.5 1.5 -o TINIE_FILE_PATH\n\nThis produces the TINIEFile that contains all the above mentioned\ntransport quantities and more, with detailed description of its contents\noutlined in the sections below.\n\nIn addition to the transport properties, we can compute local and\nstandard density of states (LDOS/DOS) of the system via the\n``tinie_dos`` script. To that end, in addition to the parameters\nspecified above, user would want to specify the energies at which LDOS\nshould be evaluated, as well as the location of the file with the\ncentral region wavefunctions. We then use the script as follows:\n\n.. code:: bash\n\n   $ tinie_dos -i TINIE_PREPARE_FILE_PATH -psi ITP2D_FILE_PATH --wf-range 0 4 -w 1.0 2.0 3.0 -dw 1e-2 -eta 1e-1 -T 1.0 -mu 1.0 -V 0.5 1.5 -o TINIE_DOS_FILE_PATH\n\nHere, we evaluated LDOS at probe energies\n|win123|. Results of this calculation are\nstored in TINIEDOSFile, with details about its contents available in\nsections below.\n\n.. |win123| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega\\\\in\\{1,2,3\\}.svg\n\n\n**Step 3:** visualizing the results. To that end, one can use the\n``tinie_draw`` script. Suppose we want to plot transmission,\nconductance, total current and DOS of the system in the energy range\n|0to5|, as well as LDOS at probe energy\n|w=1|. We then use the following command:\n\n.. |0to5| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/[0,5].svg\n.. |w=1| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega=1.svg\n\n.. code:: bash\n\n   $ tinie_draw -i TINIE_FILE_PATH -idos TINIE_DOS_FILE_PATH -E 0.0 5.0 --ldos-E 1.0 --transmission --conductance --total-currents --dos --ldos -o FIGURE_PATH\n\nThis will produce beautiful LaTeX-rendered plots of the aforementioned\nquantities. Below we show the example plots of conductance, DOS and LDOS\nproduced by the script:\n\n=========== ======== =========\nConductance DOS      LDOS\n=========== ======== =========\n|image8|    |image9| |image10|\n=========== ======== =========\n\nQuantum transport calculations in two-dimensional systems have never been this easy!\n\nCurrently Implemented System Classes\n------------------------------------\n\nAs of now, the following system classes are implemented:\n\n* ``Center`` objects, located in ``transport_calculator/systems/central_region``\n* ``Itp2dCenter``: itp2d-compatible interface.\n* ``CustomCenter``: container for a custom predefined central region Hamiltonian |Hc|.\n* ``Lead`` objects, located in ``transport_calculator/systems/leads``. Note that wavefunction normalization has \\\n  been omitted for the sake of compactness of the expression. Wavefunctions in the code are all normalized.\n* ``FiniteHarmonicLead``: lead described by a wavefunction \\\n  |FiniteHarmonicLeadWF|, \\\n  where |HermiteL| is the the Hermite polynomial of order l, \\\n  |qexpr|, |omegac|, |omegac0| with |omega0| being the frequency of quantum harmonic oscillator \\\n  and |B| being magnetic field strength. The formula is provided \\\n  in Hartee atomic units. x and y coordinate \\\n  wavefunctions are interchangeable depending on the lead alignment.\n* ``BoxLead``: particle in a box lead describe by wavefunction |BoxLeadWF| \\\n  where |Lx| and |Ly| are the length and width of the box correspondingly and \\\n  |klrange|.\n* ``CustomLead``: container for a custom predefined lead region Hamiltonian |HL|\n* ``Coupling`` objects, located in ``transport_calculator/systems/couplings``\n* ``OverlapCoupling``: strong coupling of the type |Voverlap|, \\\n  where |psiLi| is the ith eigenfunction of the lead and |psiCj| s the  jth \\\n  eigenfunction of the central region and |Omega| is the overlap region of the lead and the quantum-dot.\n* ``TightBindingCoupling``: weak coupling between non-overlapping lead and central regions of the type \\\n  |Vtightbinding| where |theta|, |OmegaL| is the lead region to be coupled and |Omegac| \\\n  is the central region to be coupled.\n* ``OneLayerCoupling``: weak coupling between the boundaries of a non-overlapping lead and central regions of the type \\\n  |Vonelayer|.\n* ``CustomCoupling``: container for custom predefined coupling matrix |V|. Compatible only with \\\n  ``CustomCenter`` and ``CustomLead`` objects.\n\nThe implementational details of these elements can be checked in the source code, which is rich with insightful and\nhelpful comments.\n\n\n.. |Hc| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{H}^C.svg\n.. |FiniteHarmonicLeadWF| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\psi^{L}_{k,l}(x,q)=\\\\cos\\\\left[k(x-x^{L}_{max})+\\\\frac{\\\\pi}{2}\\\\right]e^{-\\\\frac{1}{2}q^2}H_{l}(q).svg\n.. |HermiteL| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/H_l(q).svg\n.. |qexpr| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/q=\\\\sqrt{\\\\omega_{c0}y-\\\\frac{l}{B}\\\\frac{\\\\omega^{2}_{c}}{\\\\omega^{2}_{c0}}}.svg\n.. |omegac| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega_{c}=B.svg\n.. |omegac0| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega^2_{c0}.svg\n.. |omega0| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\omega_0.svg\n.. |B| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/B.svg\n.. |BoxLeadWF| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\psi^{L}_{k,l}(x,y)=\\\\sin\\\\left[\\\\frac{k\\\\pi}{L_{x}}(x-x^L_{max})\\\\right]\\\\sin\\\\left[\\\\frac{l\\\\pi}{L_{y}}(y-y^L_{max})\\\\right].svg\n.. |Lx| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/L_x.svg\n.. |Ly| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/L_y.svg\n.. |klrange| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/k,l%20\\\\in\\\\mathbb{Z}_{+}\\\\setminus\\\\{0\\\\}.svg\n.. |HL| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{H}^L.svg\n.. |Voverlap| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{V}_{ij}=-\\\\frac{1}{2}\\\\int_{\\\\Omega}\\\\mathrm{d}\\\\mathbf{r}\\\\psi^{*}_{L,i}(\\\\mathbf{r})\\\\Delta\\\\psi_{C,j}(\\\\mathbf{r}).svg\n.. |Omega| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Omega.svg\n.. |psiLi| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\psi_{L,i}.svg\n.. |psiCj| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\psi_{C,j}.svg\n.. |Vtightbinding| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{V}_{ij}=-\\\\frac{1}{2}\\\\int_{\\\\Omega_{L}}\\\\mathrm{d}\\\\mathbf{r'}\\\\psi^{*}_{L,i}(\\\\mathbf{r'})\\\\int_{\\\\Omega_{C}}\\\\mathrm{d}\\\\mathbf{r}\\\\frac{\\\\psi_{C,j}(\\\\mathbf{r})}{\\\\Vert\\\\mathbf{r'}-\\\\mathbf{r}\\\\Vert^2}e^{-i\\\\theta}.svg\n.. |theta| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\theta=-\\\\frac{B}{2}(x'-x)(y'-y).svg\n.. |OmegaL| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Omega_L.svg\n.. |OmegaC| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\Omega_C.svg\n.. |Vonelayer| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{V}_{ij}=-\\\\frac{1}{2}\\\\int_{\\\\partial\\\\Omega_{L}}\\\\mathrm{d}\\\\mathbf{r'}\\\\psi^{*}_{L,i}(\\\\mathbf{r'})\\\\int_{\\\\partial\\\\Omega_{C}}\\\\mathrm{d}\\\\mathbf{r}\\\\frac{\\\\psi_{C,j}(\\\\mathbf{r})}{\\\\Vert\\\\mathbf{r'}-\\\\mathbf{r}\\\\Vert^2}e^{-i\\\\theta}.svg\n.. |V| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/V.svg\n\n\nAdding Your Own Custom System Classes\n-------------------------------------\n\nAs it has been mentioned before, the code has been designed in such a\nway as to allow as much freedom in expansion as possible. In particular,\nyou can introduce additional types of central regions, lead regions and\ncoupling methods. All you have to do is to create your own class file in\nthe corresponding folder in ``tinie/systems`` and make sure that the\nclass you are creating inherits from one of the basic abstract classes\n(``Center``, ``Lead`` or ``Coupling``). Below you can find a list of\nfunctions you would have to implement (correctly) in order for your\ncustom class to be fully integrated into the transport scheme:\n\n-  ``Center`` region:\n\n   -  ``__init__(*attrs)``: initializer\n   -  ``get_type_specific_parameters()``: retrieves child-specific extra\n      parameters\n   -  ``get_energies()``: retrieves central region Hamiltonian\n      |HC|\n   -  ``get_potential()``: retrieves potential energy values in the\n      central region\n   -  ``get_state(n)``: retrieves nth wavefunction\n   -  ``get_states()``: retrieves all wavefunctions on the grid\n   -  ``get_number_of_states()``: retrieves the number of states in the\n      central region\n   -  ``get_sliced_state(n, width, side)``: retrieves nth\n      wavefunction on a grid slice\n   -  ``get_sliced_states(width, side)``: retrieves all wavefunctions on\n      a grid slice\n   -  ``get_boundary_state(n, side)``: retrieves nth wavefunction\n      evaluated on some boundary\n   -  ``get_coordinate_ranges()``: retrieves x and y coordinate ranges\n   -  ``get_coordinates()``: retrieves the coordinate meshes\n   -  ``get_slice_coordinates(width, side)``: retrieves the sliced\n      coordinate meshes\n   -  ``get_boundary_coordinates(side)``: retrieves the boundary\n      coordinate range\n\n-  ``Lead`` region:\n\n   -  ``__init__(*attrs)``: initializer\n   -  ``set_magnetic_field_strength(B)``: sets magnetic field strength\n   -  ``set_energy_spacing(delta_E)``: sets lead energy spacing\n   -  ``get_type_specific_parameters()``: retrieves child-specific extra\n      parameters\n   -  ``get_energies()``: retrieves lead region Hamiltonian |HL|\n   -  ``get_state_point(x, y, n)``: evaluates the nth state\n      wavefunction at a single point |xy|\n   -  ``get_state(x_points, y_points, n, mode)``: retrieves the nth state wavefunction on a custom/discretized grid\n   -  ``get_number_of_states()``: retrieves the number of states in the\n      lead region\n   -  ``get_boundary_state(n, num_boundary_points)``: retrieves\n      nth wavefunction evaluated on the lead boundary\n   -  ``get_boundary(num_boundary_points)``: retrieves the boundary grid\n      with specified discretization\n\n.. |xy| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/(x,y).svg\n\n-  ``Coupling`` region:\n\n   -  ``__init__(Center_object, Lead_object, *attrs)``: initializer,\n      sets the center and lead objects ready for the coupling matrix\n      calculations\n   -  ``get_coupling_matrix_element(i, j)``: retrieves coupling matrix\n      element |Vij|, that is, the coupling between\n      ith lead state and jth central state\n   -  ``get_coupling_matrix()``: retrieves the coupling matrix\n      |bfV|\n\n.. |Vij| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/V_{ij}.svg\n.. |bfV| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\mathbf{V}.svg\n\n\nDetails about the input/output parameter types can be found in the\nsource code. Upon implementing all of these functions correctly for the\ncorresponding custom object and extending the parser interface\naccordingly, the code extension will be fully consistent with the\noriginal code!\n\nScripts Included in the Package\n-------------------------------\n\ntinie includes a few scripts that should ease the usage of the software:\n\ntinie_prepare\n-------------\n\nThis script prepares the coupling system and saves it in a ``tinie_prepare``\nhdf5 file, which contains the following attributes and datasets:\n\n+---------------------------------+--------------------------------------+\n| Attribute                       | Description                          |\n+=================================+======================================+\n| ``type``                        | File type, must be \"PREPTINIEFile\"   |\n+---------------------------------+--------------------------------------+\n| ``center/type``                 | Type of the central region           |\n+---------------------------------+--------------------------------------+\n| ``center/num_states``           | Number of states in the central      |\n|                                 | region                               |\n+---------------------------------+--------------------------------------+\n| ``center/parameters``           | Type-dependent parameters of the     |\n|                                 | central region                       |\n+---------------------------------+--------------------------------------+\n| ``leads/num_leads``             | Number of leads                      |\n+---------------------------------+--------------------------------------+\n| ``leads/lead_n/type``           | Type of the lead n                   |\n+---------------------------------+--------------------------------------+\n| ``leads/lead_n/num_states``     | Number of states in lead n           |\n+---------------------------------+--------------------------------------+\n| ``leads/lead_n/energy_spacing`` | Energy spacing in lead n             |\n+---------------------------------+--------------------------------------+\n| ``leads/lead_n/parameters``     | Type-dependent parameters of lead n  |\n+---------------------------------+--------------------------------------+\n| ``couplings/num_couplings``     | Number of couplings                  |\n+---------------------------------+--------------------------------------+\n| ``couplings/coupling_n/type``   | Type of coupling between lead        |\n|                                 | n and the central region             |\n+---------------------------------+--------------------------------------+\n\n+------------------------------------------+---------------------------------------------------------------+\n| Dataset                                  | Description                                                   |\n+==========================================+===============================================================+\n| ``center/hamiltonian``                   | Hamiltonian of the central region                             |\n+------------------------------------------+---------------------------------------------------------------+\n| ``center/potential``                     | Potential energy values in the central region                 |\n+------------------------------------------+---------------------------------------------------------------+\n| ``leads/lead_n/hamiltonian``             | Hamiltonian of the lead region n                              |\n+------------------------------------------+---------------------------------------------------------------+\n| ``leads/lead_n/x_axis_limits``           | x-axis limits of lead n                                       |\n+------------------------------------------+---------------------------------------------------------------+\n| ``leads/lead_n/y_axis_limits``           | y-axis limits of lead n                                       |\n+------------------------------------------+---------------------------------------------------------------+\n| ``leads/lead_n/energy_limits``           | Energy limits of lead n                                       |\n+------------------------------------------+---------------------------------------------------------------+\n| ``couplings/coupling_n/coupling_matrix`` | Coupling matrix between lead n and the central region         |\n+------------------------------------------+---------------------------------------------------------------+\n\nSome of these datasets are stored in chunked/compressed format for more\ndata-intensive simulations. All the simulation parameters are adjusted\nvia a parser user interface, which takes the following arguments (type\n``tinie_prepare --help`` if you ever feel lost!):\n\n+---------------------+--------------------------------------------------------+\n| Argument            | Description                                            |\n+=====================+========================================================+\n| ``-dE``,            | Lead energy spacing                                    |\n| ``--delta-E``       |                                                        |\n+---------------------+--------------------------------------------------------+\n| ``-B``              | Magnetic field strength                                |\n+---------------------+--------------------------------------------------------+\n| ``-xlim``,          | x-axis limits of each lead, typed in form              |\n| ``--x-axis-limits`` | ``[x_min_0, x_max_0] [x_min_1, x_max_1] ...``          |\n+---------------------+--------------------------------------------------------+\n| ``-ylim```          | y-axis limits of each lead, typed in form              |\n| ``--y-axis-limits`` | ``[y_min_0, y_max_0] [y_min_1, y_max_1] ...``          |\n+---------------------+--------------------------------------------------------+\n| ``-Elim``           | Energy limits of each lead, typed in form              |\n| ``--energy-limits`` | ``[E_min_0, E_max_0] [E_min_1, E_max_1] ...``          |\n+---------------------+--------------------------------------------------------+\n| ``-ctr``            | Central region type, typed in as                       |\n| ``--center-type``   | ``\"ctr_type(*ctr_params)\"``                            |\n+---------------------+--------------------------------------------------------+\n| ``-l``              | Number of leads                                        |\n| ``--lead-number``   |                                                        |\n+---------------------+--------------------------------------------------------+\n| ``-ld``             | Lead region types, typed in form                       |\n| ``--lead-types``    | ``\"ld0_type(*ld0_params)\"``                            |\n|                     | ``\"ld1_type(*ld1_params)\" ...``                        |\n+---------------------+--------------------------------------------------------+\n| ``-cpl`             | Coupling region types, typed in form                   |\n| ``--coupling-types``| ``\"cpl0_type(*cpl0_params)\"``                          |\n|                     | ``\"cpl1_type(*cpl1_params)\" ...``                      |\n+---------------------+--------------------------------------------------------+\n| ``-o``,             | Path, where preptinie file is saved                    |\n| ``--output-file``   |                                                        |\n+---------------------+--------------------------------------------------------+\n\ntinie\n-----\n\nThis script reads the preptinie hdf5 file, performs the transport\ncalculation and saves the results in a tinie hdf5 with the following\nattributes and datasets:\n\n+----------------------------------+--------------------------------------------------------+\n| Attribute                        | Description                                            |\n+==================================+========================================================+\n| ``type``                         | File type, must be \"TINIEfile\"                         |\n+----------------------------------+--------------------------------------------------------+\n| ``evaluated_chemical_potential`` | Chemical potential |mu| of the system                  |\n+----------------------------------+--------------------------------------------------------+\n| ``evaluated_bias_voltage``       | Bias voltage in the leads of the system                |\n+----------------------------------+--------------------------------------------------------+\n| ``evaluated_temperature``        | Temperature of the system                              |\n+----------------------------------+--------------------------------------------------------+\n| ``omega_spacing``                | Probe energy spacing                                   |\n+----------------------------------+--------------------------------------------------------+\n| ``lead_energy_spacing``          | Lead energy spacing                                    |\n+----------------------------------+--------------------------------------------------------+\n| ``eta``                          | Small number |eta| used in the Green's function        |\n+----------------------------------+--------------------------------------------------------+\n| ``number_of_couplings``          | Number of couplings in the system                      |\n+----------------------------------+--------------------------------------------------------+\n\n.. |eta| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/\\\\eta.svg\n\n+-----------------------------------------+-------------------------------------------------------+\n| Dataset                                 | Description                                           |\n+=========================================+=======================================================+\n| ``partial_currents``                    | Matrix of partial currents between each lead          |\n+-----------------------------------------+-------------------------------------------------------+\n| ``total_currents``                      | Total currents in each lead                           |\n+-----------------------------------------+-------------------------------------------------------+\n| ``omega_dependent_partial_currents``    | Energy profile of the partial current matrix          |\n+-----------------------------------------+-------------------------------------------------------+\n| ``omega_ldos_dependent_total_currents`` | Energy profile of the total currents                  |\n+-----------------------------------------+-------------------------------------------------------+\n| ``transmission``                        | Transmission matrix as a function of the probe energy |\n+-----------------------------------------+-------------------------------------------------------+\n| ``transmission_error``                  | Imaginary component of transmission                   |\n+-----------------------------------------+-------------------------------------------------------+\n| ``conductance``                         | System conductance matrix                             |\n+-----------------------------------------+-------------------------------------------------------+\n\n.. |mu| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/readme_images/mu.svg\n\nSome of these datasets are stored in chunked/compressed format for more\ndata-intensive simulations. All the transport calculation parameters are\nadjusted via a parser user interface, which takes the following\narguments (type ``tinie --help`` if you ever feel lost!):\n\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| Argument                            | Description                                                                                     |\n+=====================================+=================================================================================================+\n| ``-dw`, ``--delta-omega``           | Probe energy spacing                                                                            |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-eta``                            | Small imaginary constant used in calculating Green's function                                   |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``--mu``, ``--chem-pot``            | Chemical potential at which the system is evaluated                                             |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-V``, ``--lead-bias``             | Lead biases, at which the system is evaluated, typed in form ``V_0 V_1 ...``                    |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-T``, ``--temperature``           | Temperature at which the system is evaluated                                                    |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-i``, ``--input-file``            | Path to the ``tinie_prepare``'s output file                                                     |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-o``, ``--output-file``           | Path for the output file                                                                        |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``--wide-band``, ``--no-wide-band`` | Boolean flags user can specify if they wish to use the wide band approximation methods (or not) |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-S``, ``--self-energy``           | Path from which an array of custom self energies is read                                        |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n| ``-G``, ``--rate-operator``         | Path from which an array of custom rate operators is read                                       |\n+-------------------------------------+-------------------------------------------------------------------------------------------------+\n\nNote that if you wish to use the wide band approximation approach you\nmust specify either self energies or rate operators or both!\n\ntinie_dos\n---------\n\nThis scripts reads the preptinie hdf5 file and the file containing the\neigenfunctions of the central region, computes DOS/LDOS and saves the\nresults in dostinie hdf5 file with the following attributes and\ndatasets:\n\n========= =================================\nAttribute Description\n========= =================================\n``type``  File type, must be \"TINIEDOSFile\"\n========= =================================\n\n============== ==========================================\nDataset        Description\n============== ==========================================\n``dos``        Density of states values\n``ldos``       Local density of states values\n``x``          x-axis values of the system central region\n``y``          y-axis values of the system central region\n``omega_dos``  Energies at which DOS was evaluated\n``omega_ldos`` Energies at which LDOS was evaluated\n============== ==========================================\n\nSome of these datasets are stored in chunked/compressed format for more\ndata-intensive simulations. All the DOS/LDOS calculation parameters are\nadjusted via a parser user interface, which takes the following\narguments (type ``tinie_dos --help`` if you ever feel lost!):\n\n+-----------------------------+---------------------------------------------------------------------------+\n| Argument                    | Description                                                               |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-w``, ``--omega-ldos``    | Probe energies at which the LDOS should be avaluated                      |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-dw``, ``--delta-omega``  | Probe energy spacing                                                      |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-eta``                    | Small imaginary constant used in the calculation of the Green's function  |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``--mu``, ``--chem-pot``    | Chemical potential at which the system is evaluated                       |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-V``, ``--lead-bias``     | Lead biases at which the system is evaluated, typed in as ``V_0 V_1 ...`` |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-T``, ``--temperature``   | Temperature at which the system is evaluated                              |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-i``, ``--input-file``    | Path to the ``tinie_prepare``'s output file                               |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``--psi``, ``--wf-file``    | Path from which central region wavefunctions are read                     |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``-o``, ``--output-file``   | Path where the ``tinie_dos``` file is saved                               |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``--dos``, ``--no-dos``     | Boolean, decides if DOS is computed                                       |\n+-----------------------------+---------------------------------------------------------------------------+\n| ``--ldos``, ``--no-ldos``   | Boolean, decides if LDOS is computed                                      |\n+-----------------------------+---------------------------------------------------------------------------+\n\n\ntinie_draw\n----------\n\nThis script reads data from the tinie hdf file, makes pretty\ntransmission/backsacttering/current/density of states plots and saves\nthem. This script has a parser user interface, where you can specify the\nfollowing plot arguments:\n\n+---------------------------------------------------+---------------------------------------------------------------+\n| Argument                                          | Description                                                   |\n+===================================================+===============================================================+\n| ``-i``, ``--input-file``                          | Path to the ``tinie``-file                                    |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``-idos``, ``--input-dos-file``                   | Path to the ``tinie_dos``-file                                |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``-o``, ``--output-file``                         | Basepath for plots                                            |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``-E``, ``--energy-rangs``                        | Range of energies over which to draw the figures              |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--transmission``, ``--no-transmission``         | Boolean, decides if transmission is plotted                   |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--backscattering``, ``--no-backscattering``     | Boolean, decides if backscattering is plotted                 |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--partial-currents``, ``--no-partial-currents`` | Boolean, decides if partial currents are plotted              |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--total-currents``, ``--no-total-currents``     | Boolean, decides if total currents are plotted                |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--dos``, ``--no-dos``                           | Boolean, decides if DOS is plotted                            |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--ldos``, ``--no-ldos``                         | Boolean, decides if LDOS is plotted                           |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--norm-ldos``, ``--no-norm-ldos``               | Boolean, decides if the LDOS will be normalized to 1          |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--ldos-E``                                      | Evaluate LDOS at an index corresponding to a probe energy     |\n+---------------------------------------------------+---------------------------------------------------------------+\n| ``--stability``, ``--no-stability``               | Boolean, decides if the numerical stability tests are plotted |\n+---------------------------------------------------+---------------------------------------------------------------+\n\n\nmake_system_files\n-----------------\n\nThis script generates custom Hamiltonians or coupling matrices and saves\nthem in a .npy file to be passed on as arguments for\n``CustomCenter``/``CustomLead``/``CustomCoupling`` objects. They can\nalso be used to generate custom self-energy/rate operators for the\nwide-band approximation. Run the script, follow the instructions and the\nrest is history.\n\nNaturally, these scripts provide only some of the basic functionality\nextensions. Additional scripts/code modifications may be added based on\nthe user’s end goals.\n\n.. |pypi license| image:: https://img.shields.io/pypi/l/tinie?color=blue\n   :target: https://pypi.org/project/tinie/\n.. |pypi version| image:: https://img.shields.io/pypi/v/tinie\n   :target: https://pypi.org/project/tinie\n.. |pypi status| image:: https://img.shields.io/pypi/status/tinie\n   :target: https://pypi.org/project/tinie\n.. |Python implementation| image:: https://img.shields.io/pypi/implementation/tinie.svg\n   :target: https://pypi.org/project/tinie/\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/tinie.svg\n   :target: https://pypi.org/project/tinie/\n.. |Python wheel| image:: https://img.shields.io/pypi/wheel/tinie.svg\n   :target: https://pypi.org/project/tinie/\n.. |pipeline status| image:: https://gitlab.com/compphys-public/tinie/badges/master/pipeline.svg\n   :target: https://gitlab.com/compphys-public/tinie/-/commits/master\n.. |coverage report| image:: https://gitlab.com/compphys-public/tinie/badges/master/coverage.svg\n   :target: https://gitlab.com/compphys-public/tinie/-/commits/master\n.. |image8| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/example_figures/conductance.png\n.. |image9| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/example_figures/dos.png\n.. |image10| image:: https://gitlab.com/compphys-public/tinie/-/raw/master/example_figures/ldos.png\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/compphys-public/tinie",
    "keywords": "numerics quantum transport physics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tinie",
    "package_url": "https://pypi.org/project/tinie/",
    "platform": "",
    "project_url": "https://pypi.org/project/tinie/",
    "project_urls": {
      "Homepage": "https://gitlab.com/compphys-public/tinie"
    },
    "release_url": "https://pypi.org/project/tinie/1.0.6/",
    "requires_dist": [
      "numpy",
      "scipy",
      "mpi4py",
      "progressbar2",
      "findiff",
      "matplotlib",
      "h5py",
      "vegas"
    ],
    "requires_python": ">=3.6",
    "summary": "A non-interacting equilibrium 2D quantum transport simulation framework",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7662692,
  "releases": {
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2988c084c6bc48cd4f37f5c5d400b4351186e1811475a2416c577ac2185a8763",
          "md5": "cfa2e150be9dda82f67ac0d872b81380",
          "sha256": "711263a369981ac1664121b784b75adaa63ced73fdb436ebfc570ea47dc0fb6b"
        },
        "downloads": -1,
        "filename": "tinie-0.9.5.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "cfa2e150be9dda82f67ac0d872b81380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16488797,
        "upload_time": "2020-01-17T11:29:14",
        "upload_time_iso_8601": "2020-01-17T11:29:14.967617Z",
        "url": "https://files.pythonhosted.org/packages/29/88/c084c6bc48cd4f37f5c5d400b4351186e1811475a2416c577ac2185a8763/tinie-0.9.5.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40063b18be8cac5d8aa33b7cf9e9cda6cf3d92ac0d588e1d77c71b5fd61cc3be",
          "md5": "36c933d0f7d51e4369b9176076f2276d",
          "sha256": "7bf74d132434b6e84d6a6b0f5b00ba47f384d30317cd93bcd87f995fa329d0a3"
        },
        "downloads": -1,
        "filename": "tinie-0.9.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36c933d0f7d51e4369b9176076f2276d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16452968,
        "upload_time": "2020-01-17T11:29:09",
        "upload_time_iso_8601": "2020-01-17T11:29:09.483442Z",
        "url": "https://files.pythonhosted.org/packages/40/06/3b18be8cac5d8aa33b7cf9e9cda6cf3d92ac0d588e1d77c71b5fd61cc3be/tinie-0.9.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a5115a7a1b678f9e06df319a171d8b24906bbf1c0287d90b919a48f74e5b3d0",
          "md5": "aacabc5472f3a372dbdc33fb81d66566",
          "sha256": "5bfffe7730fc85696744951b0090d97be7ee840453886768436bf0973680fd3b"
        },
        "downloads": -1,
        "filename": "tinie-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aacabc5472f3a372dbdc33fb81d66566",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16454793,
        "upload_time": "2020-01-17T11:48:03",
        "upload_time_iso_8601": "2020-01-17T11:48:03.196647Z",
        "url": "https://files.pythonhosted.org/packages/6a/51/15a7a1b678f9e06df319a171d8b24906bbf1c0287d90b919a48f74e5b3d0/tinie-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d83ff6c2febfdafa43687578435b1536d140a6e41ca0c4d2d5097010f3b1c8",
          "md5": "279f95152386c4f2e35fc0f6fe231e57",
          "sha256": "29f45070b8a448b16596100cae6e767b7583f39d7f9b7665e40a0e23c5117f31"
        },
        "downloads": -1,
        "filename": "tinie-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "279f95152386c4f2e35fc0f6fe231e57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16442749,
        "upload_time": "2020-01-17T11:48:07",
        "upload_time_iso_8601": "2020-01-17T11:48:07.987702Z",
        "url": "https://files.pythonhosted.org/packages/81/d8/3ff6c2febfdafa43687578435b1536d140a6e41ca0c4d2d5097010f3b1c8/tinie-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e847036d80463566e80442825680f9c60f33df13e166a19ce0c981b50944406",
          "md5": "a15947c3340d4548093fd80ebf50f236",
          "sha256": "c0f96d093591fbf6db490e9bcf2891569b61fcacae14b9f029ac4188e0d3ee6c"
        },
        "downloads": -1,
        "filename": "tinie-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a15947c3340d4548093fd80ebf50f236",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16454745,
        "upload_time": "2020-01-17T11:53:05",
        "upload_time_iso_8601": "2020-01-17T11:53:05.657433Z",
        "url": "https://files.pythonhosted.org/packages/2e/84/7036d80463566e80442825680f9c60f33df13e166a19ce0c981b50944406/tinie-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcfa4b8b3ab6dd699a802dd50e0cbf46d93c5bdf883a05da74056750d90524c0",
          "md5": "51e0ad3928668eb1942de45aed712dc7",
          "sha256": "aa5bf6101059dd9ae7d2da0eaa3982136024c3124e26c2a9e42979c2e1088ec6"
        },
        "downloads": -1,
        "filename": "tinie-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51e0ad3928668eb1942de45aed712dc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16442045,
        "upload_time": "2020-01-17T11:53:13",
        "upload_time_iso_8601": "2020-01-17T11:53:13.184823Z",
        "url": "https://files.pythonhosted.org/packages/dc/fa/4b8b3ab6dd699a802dd50e0cbf46d93c5bdf883a05da74056750d90524c0/tinie-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "806964ee341e1b52043bb818aa2f5144e9646ad894476f96ea8725a78cbdf287",
          "md5": "5f7550af64aac8f514e2237aa26f15ca",
          "sha256": "dc107300d7136e6704674061d0acc03f52ecb5d342c7cee265ff9897fb98fbe1"
        },
        "downloads": -1,
        "filename": "tinie-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f7550af64aac8f514e2237aa26f15ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16454853,
        "upload_time": "2020-06-26T05:55:54",
        "upload_time_iso_8601": "2020-06-26T05:55:54.618517Z",
        "url": "https://files.pythonhosted.org/packages/80/69/64ee341e1b52043bb818aa2f5144e9646ad894476f96ea8725a78cbdf287/tinie-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "718f067d9bc315bfb1fbc1478a15700277cf554dba6267ab8d308eec728a2c30",
          "md5": "a657951fb0d629d180440debf5f15b10",
          "sha256": "6b87207c192d0f951ac65b18926bd995ab5414ba9a7cdf6147239dcb95f3a536"
        },
        "downloads": -1,
        "filename": "tinie-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a657951fb0d629d180440debf5f15b10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16443320,
        "upload_time": "2020-06-26T05:56:34",
        "upload_time_iso_8601": "2020-06-26T05:56:34.222907Z",
        "url": "https://files.pythonhosted.org/packages/71/8f/067d9bc315bfb1fbc1478a15700277cf554dba6267ab8d308eec728a2c30/tinie-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb9cf543fa8a499796db17e1377abe79e9a6f48d45da2b8f1183383b79c09c95",
          "md5": "b420b3f0904e1e3dc4e58fd88c4522ea",
          "sha256": "f19931e6c52cc4bd1c79082f2c4f6a526f73479d028b3d83179e1faf0da19958"
        },
        "downloads": -1,
        "filename": "tinie-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b420b3f0904e1e3dc4e58fd88c4522ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16456793,
        "upload_time": "2020-06-29T11:10:36",
        "upload_time_iso_8601": "2020-06-29T11:10:36.762161Z",
        "url": "https://files.pythonhosted.org/packages/fb/9c/f543fa8a499796db17e1377abe79e9a6f48d45da2b8f1183383b79c09c95/tinie-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "872b257bc1cb22a3d92183e198651279eb16ff56cb64b7adcc6ec384d66a3d75",
          "md5": "d27ced92276e52cbc9554a0bf9085ce6",
          "sha256": "9caf7e4c6b990484cbfe3377f9936110187e4ca76b661d8b5f425d32b7f14617"
        },
        "downloads": -1,
        "filename": "tinie-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d27ced92276e52cbc9554a0bf9085ce6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16445198,
        "upload_time": "2020-06-29T11:10:56",
        "upload_time_iso_8601": "2020-06-29T11:10:56.221633Z",
        "url": "https://files.pythonhosted.org/packages/87/2b/257bc1cb22a3d92183e198651279eb16ff56cb64b7adcc6ec384d66a3d75/tinie-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "500aff679d7aadd744dfbaa7f911f1672275ff3a2b7dc058cead47cc17f9d49a",
          "md5": "0bb8fa1e716a250180bebbca911707e5",
          "sha256": "69425b0d3b518839f66604542926afe0eb491e86b37dd4a33526578291a00eaf"
        },
        "downloads": -1,
        "filename": "tinie-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bb8fa1e716a250180bebbca911707e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16456808,
        "upload_time": "2020-06-29T11:56:59",
        "upload_time_iso_8601": "2020-06-29T11:56:59.500573Z",
        "url": "https://files.pythonhosted.org/packages/50/0a/ff679d7aadd744dfbaa7f911f1672275ff3a2b7dc058cead47cc17f9d49a/tinie-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3231a7000b8a66b3b110deacb087941b90ecbe5619d17e68d50dce7bd551c02",
          "md5": "308077d3c706b459ddc80206e8e24111",
          "sha256": "b3da9c5e8002823849a443d8550228b96e485fa383a6c1cf195521b0c62a3f34"
        },
        "downloads": -1,
        "filename": "tinie-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "308077d3c706b459ddc80206e8e24111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16445201,
        "upload_time": "2020-06-29T11:57:29",
        "upload_time_iso_8601": "2020-06-29T11:57:29.624310Z",
        "url": "https://files.pythonhosted.org/packages/b3/23/1a7000b8a66b3b110deacb087941b90ecbe5619d17e68d50dce7bd551c02/tinie-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9391d5c1d3d3200753e549ad256b6b0eefe783d7f33695ca959f458c4e4da13",
          "md5": "eb97e8d58b38f4313bf6d32f914246d2",
          "sha256": "e09eb668289e127f8586f3063dc412d599c1fadf00dbc5a40d69f98074fb729a"
        },
        "downloads": -1,
        "filename": "tinie-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb97e8d58b38f4313bf6d32f914246d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16456637,
        "upload_time": "2020-07-09T06:23:54",
        "upload_time_iso_8601": "2020-07-09T06:23:54.446070Z",
        "url": "https://files.pythonhosted.org/packages/c9/39/1d5c1d3d3200753e549ad256b6b0eefe783d7f33695ca959f458c4e4da13/tinie-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af3ed69f8dbbe6c56e8f608702ca49351b5f0a88437760375180544fe9cf487",
          "md5": "1f1d4f774b3a88eada8ebc622b5d3b23",
          "sha256": "c9374487f36e6d636a0c03026a966a4f976b789252c545dbc1498c6cf41bf39b"
        },
        "downloads": -1,
        "filename": "tinie-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1f1d4f774b3a88eada8ebc622b5d3b23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16445183,
        "upload_time": "2020-07-09T06:24:41",
        "upload_time_iso_8601": "2020-07-09T06:24:41.191043Z",
        "url": "https://files.pythonhosted.org/packages/1a/f3/ed69f8dbbe6c56e8f608702ca49351b5f0a88437760375180544fe9cf487/tinie-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9391d5c1d3d3200753e549ad256b6b0eefe783d7f33695ca959f458c4e4da13",
        "md5": "eb97e8d58b38f4313bf6d32f914246d2",
        "sha256": "e09eb668289e127f8586f3063dc412d599c1fadf00dbc5a40d69f98074fb729a"
      },
      "downloads": -1,
      "filename": "tinie-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb97e8d58b38f4313bf6d32f914246d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16456637,
      "upload_time": "2020-07-09T06:23:54",
      "upload_time_iso_8601": "2020-07-09T06:23:54.446070Z",
      "url": "https://files.pythonhosted.org/packages/c9/39/1d5c1d3d3200753e549ad256b6b0eefe783d7f33695ca959f458c4e4da13/tinie-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1af3ed69f8dbbe6c56e8f608702ca49351b5f0a88437760375180544fe9cf487",
        "md5": "1f1d4f774b3a88eada8ebc622b5d3b23",
        "sha256": "c9374487f36e6d636a0c03026a966a4f976b789252c545dbc1498c6cf41bf39b"
      },
      "downloads": -1,
      "filename": "tinie-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1f1d4f774b3a88eada8ebc622b5d3b23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16445183,
      "upload_time": "2020-07-09T06:24:41",
      "upload_time_iso_8601": "2020-07-09T06:24:41.191043Z",
      "url": "https://files.pythonhosted.org/packages/1a/f3/ed69f8dbbe6c56e8f608702ca49351b5f0a88437760375180544fe9cf487/tinie-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}