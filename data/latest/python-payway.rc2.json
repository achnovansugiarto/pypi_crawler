{
  "info": {
    "author": "Ben Napper",
    "author_email": "reppan197@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `PayWay REST API - Python`\n\n- Store customers, their card and bank account in PayWay\n- Take payment using a stored credit card or bank account\n- Process and Capture a pre-authorisation\n- Lookup or poll transactions\n- Refund transactions\n- Void transactions\n- Update a customer's payment setup in PayWay\n\n# `Install`\n\n```\npip install python-payway\n```\n\n# `Take payment using a stored credit card`\n\nCreate a Client class with your PayWay API credentials\n\n```\nfrom payway.model import *\nfrom payway.client import *\n\nclient = Client(merchant_id='',\n                bank_account_id='',\n                publishable_api_key='',\n                secret_api_key='')\n```\n\nCreate a PayWayCustomer class with your customer's details\n\n```\ncustomer = PayWayCustomer(custom_id='c981a',\n                          customer_name='John Smith',\n                          email_address='johnsmith@example.com',\n                          send_email_receipts=False,  # not available in sandbox\n                          phone_number='0343232323',\n                          street='1 Test Street',\n                          street2='2 Test Street',\n                          city_name='Sydney',\n                          state='NSW',\n                          postal_code='2000')\n```\n\nCreate a PayWayCard class with your customer's card details\n\n```\ncard = PayWayCard(card_number='',\n                  cvn='',\n                  card_holder_name='',\n                  expiry_date_month='',\n                  expiry_date_year='')\n```\n\nCreate a token from your card and create a customer in PayWay\n\n```\ntoken_response, errors = client.create_card_token(card)\ntoken = token_response.token        \ncustomer.token = token\npayway_customer, customer_errors = client.create_customer(customer)\n```\n\nNote the 'payway_customer' object contains the full customer response fields from PayWay.\n\nCreate a Payment class with the payment details and process the transaction\n\n```\ncustomer_number = payway_customer.customer_number\npayment = PayWayPayment(customer_number=customer_number,\n                        transaction_type='payment',\n                        amount='',\n                        currency='aud',\n                        order_number='',\n                        ip_address='')\ntransaction, errors = client.process_payment(payment)\n```    \n\nCheck the `transaction` for the result\n\n```\nif not errors and transaction.status == 'approved':\n    # process successful response\n```\n\n# `Take payment using a credit card token only`\n\n```\nclient = Client(merchant_id='',\n                bank_account_id='',\n                publishable_api_key='',\n                secret_api_key='')\ncard = PayWayCard(card_number='',\n                  cvn='',\n                  card_holder_name='',\n                  expiry_date_month='',\n                  expiry_date_year='')\ntoken_response, errors = client.create_card_token(card)\n# your customer reference number or a stored PayWay customer number\ncustomer_number = ''    \npayment = PayWayPayment(customer_number=customer_number,\n                        transaction_type='payment',\n                        amount='',\n                        currency='aud',\n                        order_number='',\n                        ip_address='',\n                        token=token_response.token,\n                        merchant_id=client.merchant_id)\ntransaction, errors = client.process_payment(payment)\n```\n\n# `Handling errors`\n\nDocumented errors (such as 422 Unprocessable entity) are parsed into an PaymentError class that you can use in an customer error message.\nhttps://www.payway.com.au/docs/rest.html#http-response-codes\n\n```\nif errors:\n    for error in errors: \n        print(error.field_name)\n        print(error.message) \n        print(error.field_name)\n    # or use a method\n    PaymentError().list_to_message(errors) \n```     \n\n# `Direct Debit`\nDirect debit transactions are possible by creating a token from a bank account:\n\n```\nbank_account = BankAccount(account_name='Test', bsb='000-000', account_number=123456)\ntoken_response, errors = client.create_bank_account_token(bank_account)\ntoken = token_response.token\n```\n\nStore the token with a customer in PayWay using the same process as the card outlined above.\n\nNote: direct debit transactions take days to process so they must be polled regularly for the latest transaction status from the customer's bank.\n\n# `Lookup transaction`\n\nPoll a transaction using the `get_transaction` method.\n\n```\ntransaction, errors = client.get_transaction(transaction.transaction_id)\n``` \n\n# `Process and capture a pre-authorisation`\n\nTo process a credit card pre-authorisation using a credit card stored against a customer use `preAuth` as the `transaction_type` along with the customer's PayWay number, amount and currency.\n\n```\npre_auth_payment = PayWayPayment(customer_number='',\n                                 transaction_type='preAuth',\n                                 amount='',\n                                 currency='aud',\n                                 order_number='',\n                                 ip_address='')\ntransaction, errors = client.process_payment(pre_auth_payment)\n```\n\nTo capture the pre-authorisation supply a pre-authorisation transaction ID,  `capture` as the `transaction_type` along with an amount to capture.\n\n```\ncapture_payment = PayWayPayment(transaction_type='capture',\n                                parent_transaction_id='',\n                                amount='',\n                                order_number='',\n                                ip_address='')\ntransaction, errors = client.process_payment(capture_payment)\n```\n\n# `Refunds`\n\nRefund a transaction by supplying a PayWay transaction ID and the refund amount.\n\n```\nrefund, errors = client.refund_transaction(\n    transaction_id=transaction.transaction_id,\n    amount=transaction.principal_amount,\n)\n```\n\n# `Voiding a transaction`\n\nVoid a transaction by supplying a PayWay transaction ID.\n\n```\nvoid_transaction, errors = client.void_transaction(transaction.transaction_id)\n```\n\n# `Update Payment Setup`\n\nUpdate a customer's payment setup with a new credit card or bank account in PayWay. Supply the new token and an existing PayWay customer number.\n\n```\npayment_setup, errors = client.update_payment_setup(new_token, payway_customer.customer_number)\n```\n\n# `Additional notes`                             \nPayWay API documentation\nhttps://www.payway.com.au/docs/rest.html\n\nIt is recommended to use PayWay's Trusted Frame https://www.payway.com.au/docs/rest.html#trusted-frame\nwhen creating a single use token of a card or bank account so your PCI-compliance scope is reduced.  \n\n# `Fraud`\n\nPlease follow PayWay's advice about reducing your risk of fraudulent transactions.\nhttps://www.payway.com.au/docs/card-testing.html#card-testing\n\n# `Testing`\n\n1. Sign up for a PayWay sandbox account: https://www.payway.com.au/sandbox\n2. Test the integration by adding your PayWay REST API keys to your local environment. These keys are in Account Settings > `REST API Keys`. Copy your `Publishable` and `Secret` API keys.\n3. `export PAYWAY_PUBLISHABLE_API_KEY=\"your PayWay Publishable API Key\"`\n4. `export PAYWAY_SECRET_API_KEY=\"your PayWay Secret API Key\"`\n5. Run the tests to ensure the integration is working. \n`python -m unittest discover tests`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/napper1/python-payway",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-payway",
    "package_url": "https://pypi.org/project/python-payway/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-payway/",
    "project_urls": {
      "Homepage": "https://github.com/napper1/python-payway"
    },
    "release_url": "https://pypi.org/project/python-payway/0.0.2/",
    "requires_dist": [
      "requests (>=2.20.0)"
    ],
    "requires_python": ">=2.7",
    "summary": "Python client for working with Westpac's PayWay REST API",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7976846,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e9fc578364f66f35dfc71ebfdcc9170d0e54865196a08ae50b951f735772089",
          "md5": "38a01c3968d7ad158af2739ca1a12635",
          "sha256": "7da62eb66ef012b34221edccabb778ebb027b8bcc053ac1759ae6c08cef60234"
        },
        "downloads": -1,
        "filename": "python_payway-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38a01c3968d7ad158af2739ca1a12635",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 15732,
        "upload_time": "2020-08-08T09:28:40",
        "upload_time_iso_8601": "2020-08-08T09:28:40.374588Z",
        "url": "https://files.pythonhosted.org/packages/7e/9f/c578364f66f35dfc71ebfdcc9170d0e54865196a08ae50b951f735772089/python_payway-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02087883457edebd4a6be80f7d3d0e14031676c25e3f3f9fb71b8afdc761affb",
          "md5": "e7e1c96cace8561b496e1733383f5cc6",
          "sha256": "0ca7c9f302e5a25be003701c37b9aaf9ee517219ef5a327763b1ad5e0bd452a0"
        },
        "downloads": -1,
        "filename": "python-payway-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e7e1c96cace8561b496e1733383f5cc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 13676,
        "upload_time": "2020-08-08T09:28:42",
        "upload_time_iso_8601": "2020-08-08T09:28:42.710789Z",
        "url": "https://files.pythonhosted.org/packages/02/08/7883457edebd4a6be80f7d3d0e14031676c25e3f3f9fb71b8afdc761affb/python-payway-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09da82b2d470446068d1daaa96b125b8c66a1b04ca03e723a1925debb47811f5",
          "md5": "fafe7f6b0dbfc01ae93a3157bbc52060",
          "sha256": "2cbf2482f7e771bd405ea847cf0f4a5d0476ce81d70b3e22282e2201d433a2d4"
        },
        "downloads": -1,
        "filename": "python_payway-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fafe7f6b0dbfc01ae93a3157bbc52060",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 21033,
        "upload_time": "2020-08-17T05:50:54",
        "upload_time_iso_8601": "2020-08-17T05:50:54.135043Z",
        "url": "https://files.pythonhosted.org/packages/09/da/82b2d470446068d1daaa96b125b8c66a1b04ca03e723a1925debb47811f5/python_payway-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcba6028fecf21207bad5482a8c51034a32978ac7fc220970c61bbcfe5196dc1",
          "md5": "c5b7276ce522bca3131e88dfec4cadbd",
          "sha256": "8c8d205967fde554d3b25919fc58b57efb64656e1bbe28ef270000ed888f7908"
        },
        "downloads": -1,
        "filename": "python-payway-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c5b7276ce522bca3131e88dfec4cadbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 17313,
        "upload_time": "2020-08-17T05:50:55",
        "upload_time_iso_8601": "2020-08-17T05:50:55.901835Z",
        "url": "https://files.pythonhosted.org/packages/bc/ba/6028fecf21207bad5482a8c51034a32978ac7fc220970c61bbcfe5196dc1/python-payway-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09da82b2d470446068d1daaa96b125b8c66a1b04ca03e723a1925debb47811f5",
        "md5": "fafe7f6b0dbfc01ae93a3157bbc52060",
        "sha256": "2cbf2482f7e771bd405ea847cf0f4a5d0476ce81d70b3e22282e2201d433a2d4"
      },
      "downloads": -1,
      "filename": "python_payway-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fafe7f6b0dbfc01ae93a3157bbc52060",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 21033,
      "upload_time": "2020-08-17T05:50:54",
      "upload_time_iso_8601": "2020-08-17T05:50:54.135043Z",
      "url": "https://files.pythonhosted.org/packages/09/da/82b2d470446068d1daaa96b125b8c66a1b04ca03e723a1925debb47811f5/python_payway-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcba6028fecf21207bad5482a8c51034a32978ac7fc220970c61bbcfe5196dc1",
        "md5": "c5b7276ce522bca3131e88dfec4cadbd",
        "sha256": "8c8d205967fde554d3b25919fc58b57efb64656e1bbe28ef270000ed888f7908"
      },
      "downloads": -1,
      "filename": "python-payway-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c5b7276ce522bca3131e88dfec4cadbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 17313,
      "upload_time": "2020-08-17T05:50:55",
      "upload_time_iso_8601": "2020-08-17T05:50:55.901835Z",
      "url": "https://files.pythonhosted.org/packages/bc/ba/6028fecf21207bad5482a8c51034a32978ac7fc220970c61bbcfe5196dc1/python-payway-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}