{
  "info": {
    "author": "Martijn Braam",
    "author_email": "martijn@brixit.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Flask-MultiMQTT\n\nThis is a piece of Flask middleware inspired by Flask-MQTT. It adds thread handling code so MQTT can safely\nbe used inside a multithreading uwsgi container. The MQTT connection is limited to running in the first\nthread that calls `connect()` and other threads can still publish messages.\n\nThis extension also supports setting a global topic prefix that abstracts away a common prefix when using a\nshared mosquitto server. To make dealing with permissions easier there is also helper functions for the\ndynsec plugin that's included in Mosquitto 2.0\n\n## Example\n\nConnection configuration is done exactly in the way you'd expect from Flask:\n\n```python\nfrom flask import Flask\nfrom flask_multimqtt import MultiMQTT\n\napp = Flask(__name__)\n# Specify the connection with an URI\napp.config['MQTT_URI'] = 'mqtt://username:password@127.0.0.1/myprefix'\n\n# or with the equivalent seperate fields\napp.config['MQTT_HOST'] = '127.0.0.1'\napp.config['MQTT_USERNAME'] = 'username'\napp.config['MQTT_PASSWORD'] = 'password'\napp.config['MQTT_PREFIX'] = 'myprefix'\n\nmqtt = MultiMQTT(app)\n```\n\nTLS is supported when specifying an `mqtts://` uri.\n\nSubscribing to topics can be done in multiple ways. This extension will keep track of all the requested\nsubscriptions and will delay executing them until the connection is complete so it's safe to register them\nearly\n\n```python\n# Subscribe to a topic and link some functions to it\ntopic = mqtt.register_topic('home/sensor/#', qos=0)\ntopic.on_message(this_function_receives_messages)\ntopic.on_message(this_function_is_also_called)\n\n\n# Use the decorator\n@mqtt.topic('my_topic/#')\ndef my_topic(client, message):\n    # The topic decorator is equivalent to running mqtt.register_topic and hooking up the function\n    print('my_topic', message.topic, message.payload)\n\n\n@mqtt.topic('number/<int:number>')\ndef number_topic(client, message, number):\n    # topic routes support the int, float, str, path and uuid placeholders\n    print(f\"The number is {number}\")\n```\n\nPublishing messages can be done with the `MultiMQTT.publish()` method. This can be done from any thread.\n\n```python\n# Publishing a message works from any thread\nmqtt.publish('my-thread', thread.name)\n\n# If the payload is a list or dict it will automatically be jsonified\nmqtt.publish('example', {\n    'hello': 'world'\n})\n\n# Messages can be sent to a topic without the global prefix, for system topics\nmqtt.publish('$CONTROL/something', {'example': True}, no_prefix=True)\n```\n\nTo get a topic path for a subscribed topic there is the `topic_for(name, absolute=False, **kwargs)` function.\n\n```python\n@mqtt.topic('number/<int:number>')\ndef number_topic(client, message, number):\n    # topic routes support the int, float, str, path and uuid placeholders\n    print(f\"The number is {number}\")\n\n    \n@app.route('/demo')\ndef demo():\n    # This returns number/42\n    return mqtt.topic_for('number_topic', number=42)\n```\n\nWith `absolute=True` the returned topic includes the global topic prefix, this can be used for sending topics\nto external services that connect to the MQTT server.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.sr.ht/~martijnbraam/Flask-MultiMQTT",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Flask-MultiMQTT",
    "package_url": "https://pypi.org/project/Flask-MultiMQTT/",
    "platform": null,
    "project_url": "https://pypi.org/project/Flask-MultiMQTT/",
    "project_urls": {
      "Homepage": "https://git.sr.ht/~martijnbraam/Flask-MultiMQTT"
    },
    "release_url": "https://pypi.org/project/Flask-MultiMQTT/0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Flask middleware for MQTT with threading support",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15464391,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "802bbb95fd37a93dd63fd6b7a15b1dd28f674ddfffb8cdc3d318a464d466e8a9",
          "md5": "83f8052dd2c170193f39e1981bf52954",
          "sha256": "d103645795f5ec94655bf02b19ae66fe3557beade2ba70a44d1e05f80e1b8006"
        },
        "downloads": -1,
        "filename": "Flask-MultiMQTT-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83f8052dd2c170193f39e1981bf52954",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5332,
        "upload_time": "2022-09-21T20:25:30",
        "upload_time_iso_8601": "2022-09-21T20:25:30.286519Z",
        "url": "https://files.pythonhosted.org/packages/80/2b/bb95fd37a93dd63fd6b7a15b1dd28f674ddfffb8cdc3d318a464d466e8a9/Flask-MultiMQTT-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f93bf5b6b751590dfaf17d8d31ce9f564a762c054f5e4ea9a1b139421a19df68",
          "md5": "3e9938c0ea2438319138d2e283344075",
          "sha256": "fa005cf2ade58060b920f12f2f7e235177dfa23c923dafb5a31a6d5a3ebe3dfc"
        },
        "downloads": -1,
        "filename": "Flask-MultiMQTT-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3e9938c0ea2438319138d2e283344075",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6740,
        "upload_time": "2022-09-22T15:50:31",
        "upload_time_iso_8601": "2022-09-22T15:50:31.172727Z",
        "url": "https://files.pythonhosted.org/packages/f9/3b/f5b6b751590dfaf17d8d31ce9f564a762c054f5e4ea9a1b139421a19df68/Flask-MultiMQTT-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537f701eb8b3e5c44fad3df917fdd55c37edbe94dac0d400e469bda6f0624403",
          "md5": "5ce467399b022814d1bc081f28f63db4",
          "sha256": "ea9afeb7d72576a37920d53bcd20721f8b34b9696e2a5adda6b0e22d255c23f4"
        },
        "downloads": -1,
        "filename": "Flask-MultiMQTT-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5ce467399b022814d1bc081f28f63db4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6849,
        "upload_time": "2022-10-19T18:19:14",
        "upload_time_iso_8601": "2022-10-19T18:19:14.646052Z",
        "url": "https://files.pythonhosted.org/packages/53/7f/701eb8b3e5c44fad3df917fdd55c37edbe94dac0d400e469bda6f0624403/Flask-MultiMQTT-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "537f701eb8b3e5c44fad3df917fdd55c37edbe94dac0d400e469bda6f0624403",
        "md5": "5ce467399b022814d1bc081f28f63db4",
        "sha256": "ea9afeb7d72576a37920d53bcd20721f8b34b9696e2a5adda6b0e22d255c23f4"
      },
      "downloads": -1,
      "filename": "Flask-MultiMQTT-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5ce467399b022814d1bc081f28f63db4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6849,
      "upload_time": "2022-10-19T18:19:14",
      "upload_time_iso_8601": "2022-10-19T18:19:14.646052Z",
      "url": "https://files.pythonhosted.org/packages/53/7f/701eb8b3e5c44fad3df917fdd55c37edbe94dac0d400e469bda6f0624403/Flask-MultiMQTT-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}