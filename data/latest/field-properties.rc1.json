{
  "info": {
    "author": "Joseph Perez",
    "author_email": "joperez@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# field-properties\nProperties for dataclass fields\n\n## Example\n```python\nfrom dataclasses import dataclass\n\nfrom field_properties import field_property, unwrap_property\n\n\n@dataclass(frozen=True)\nclass Foo:\n    bar: int = field_property(default=0)  # Same parameter than dataclasses.field\n\n    @field_property(bar)  # Equivalent to @field_property(bar).getter\n    def get_bar(self) -> int:\n        # unwrap_property(self).bar is equivalent to self._bar\n        # but it's type-checked and linter-friendly\n        return unwrap_property(self).bar\n\n    # When not declared, getter, setter and deleter are generated like the following:\n    # @field_property(bar).setter\n    # def set_bar(self, value: int):\n    #     unwrap_property(self).bar = value\n\n\nassert repr(Foo()) == repr(Foo(0)) == \"Foo(bar=0)\"\n```\n\n## How does it works?\n\nWhen a dataclass field has a default value, this value is assigned as a class attribute. `field_property` use this mechanism and create a field with a property as default value. \n\nIf a default value/factory is registered with `field_property`, the property setter will be called with it in `__init__`. \n\n## Default getter/setter/deleter\n\n`field_property` generates default getter/setter/deleter as simple wrappers around an instance attribute whose name is the field name prefixed with an underscore `_`. `unwrap_property` allows accessing this attribute in a type-checked/linter-friendly way.\n\nBy the way, if all the getter/setter/deleter are declared (and thus not generated), the protected attribute will not be created.\n\n## Overriding\n\nField properties can be overridden, but the dataclass field must be overridden too â€” this is because a new field must be created, as property is declared as its default value (see [previous section](#how-does-it-works)).\n\n```python\nfrom dataclasses import dataclass\n\nfrom field_properties import field_property, unwrap_property\n\n\n@dataclass\nclass Foo:\n    bar: int = field_property(default=0)\n\n    @field_property(bar)\n    def get_bar(self):\n        return unwrap_property(self).bar + 1\n\nclass Foo2(Foo):\n    bar: int = field_property(default=0)  # field property must be overridden\n    # field_property(inherit=True) is a shortcut to override a field\n    # and reusing all it's arguments\n\n    @field_property(bar)\n    def get_bar(self):\n        return unwrap_property(self).bar + 2\n\n\nassert Foo() == 1\nassert Foo2() == 2\n```\n\nIn fact, because field is redeclared, it's also possible to override normal fields with a field property\n\n```python\nfrom dataclasses import dataclass\n\nfrom field_properties import field_property\n\n\n@dataclass\nclass Foo:\n    bar: int = 0\n\nclass Foo2(Foo):\n    bar: int = field_property(default=1)\n\nassert Foo2() == 1\n```\n\n## Raw property\n\n`field_property` comes with a default implementation for its getter/setter/deleter. This can be turned off with `raw=False` parameter. Here is an example of a read_only field:\n\n```python\nfrom dataclasses import dataclass\nfrom field_properties import field_property\n\n@dataclass\nclass Foo:\n    bar: int = field_property(init=False, raw=True)\n\n    @field_property(bar)\n    def get_bar(self) -> int:\n        return 0\n\nassert Foo().bar == 0\nassert str(Foo()) == \"Foo(bar=0)\"\ntry:\n    Foo().bar = 1\nexcept AttributeError:\n    assert True\nelse:\n    assert False\n```\n\n## [PEP 614](https://www.python.org/dev/peps/pep-0614/)\n\nDecorator syntax `@field_property(bar).setter` is only valid in *Python 3.9*. Previous version can use the following hack:\n\n```python\nfrom dataclasses import dataclass\n\nfrom field_properties import field_property\n\n\n@dataclass\nclass Foo:\n    bar: int = field_property()\n\n    def set_bar(self, value: int):\n        ...\n    field_property(bar).setter(set_bar)\n``` \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wyfo/field-properties",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "field-properties",
    "package_url": "https://pypi.org/project/field-properties/",
    "platform": "",
    "project_url": "https://pypi.org/project/field-properties/",
    "project_urls": {
      "Homepage": "https://github.com/wyfo/field-properties"
    },
    "release_url": "https://pypi.org/project/field-properties/0.1/",
    "requires_dist": [
      "dataclasses (==0.7) ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "Properties for dataclass fields",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9976717,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4d05ee81b51e3108d679bcf98124e5a353efaababd47dd337b79912aa6c5e38",
          "md5": "38d6146f3d252efe7d6a0486ca1566fa",
          "sha256": "39b9bc6893dc363f671f27bd3ed8b78597c00d0696e6e24f1093351d048df31d"
        },
        "downloads": -1,
        "filename": "field_properties-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38d6146f3d252efe7d6a0486ca1566fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6530,
        "upload_time": "2021-04-05T12:31:24",
        "upload_time_iso_8601": "2021-04-05T12:31:24.581711Z",
        "url": "https://files.pythonhosted.org/packages/d4/d0/5ee81b51e3108d679bcf98124e5a353efaababd47dd337b79912aa6c5e38/field_properties-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2da79796fc7a39276298ec8a3121d3d6e45803ec6b2140ad7772efa43ed6cfa1",
          "md5": "5cd11de1b649344085eca8747a97c600",
          "sha256": "7be49d9532732f31f70cb6c0b8b860589c6d85dcdd10cdd3f9d27182adae7aa8"
        },
        "downloads": -1,
        "filename": "field-properties-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cd11de1b649344085eca8747a97c600",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5345,
        "upload_time": "2021-04-05T12:31:26",
        "upload_time_iso_8601": "2021-04-05T12:31:26.049918Z",
        "url": "https://files.pythonhosted.org/packages/2d/a7/9796fc7a39276298ec8a3121d3d6e45803ec6b2140ad7772efa43ed6cfa1/field-properties-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4d05ee81b51e3108d679bcf98124e5a353efaababd47dd337b79912aa6c5e38",
        "md5": "38d6146f3d252efe7d6a0486ca1566fa",
        "sha256": "39b9bc6893dc363f671f27bd3ed8b78597c00d0696e6e24f1093351d048df31d"
      },
      "downloads": -1,
      "filename": "field_properties-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38d6146f3d252efe7d6a0486ca1566fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6530,
      "upload_time": "2021-04-05T12:31:24",
      "upload_time_iso_8601": "2021-04-05T12:31:24.581711Z",
      "url": "https://files.pythonhosted.org/packages/d4/d0/5ee81b51e3108d679bcf98124e5a353efaababd47dd337b79912aa6c5e38/field_properties-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2da79796fc7a39276298ec8a3121d3d6e45803ec6b2140ad7772efa43ed6cfa1",
        "md5": "5cd11de1b649344085eca8747a97c600",
        "sha256": "7be49d9532732f31f70cb6c0b8b860589c6d85dcdd10cdd3f9d27182adae7aa8"
      },
      "downloads": -1,
      "filename": "field-properties-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5cd11de1b649344085eca8747a97c600",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5345,
      "upload_time": "2021-04-05T12:31:26",
      "upload_time_iso_8601": "2021-04-05T12:31:26.049918Z",
      "url": "https://files.pythonhosted.org/packages/2d/a7/9796fc7a39276298ec8a3121d3d6e45803ec6b2140ad7772efa43ed6cfa1/field-properties-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}