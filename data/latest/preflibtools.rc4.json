{
  "info": {
    "author": "Simon Rey",
    "author_email": "reysimon@orange.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "============\nPreflibtools\n============\n\n.. inclusion-marker-badges-begin\n\n.. image:: https://img.shields.io/pypi/v/preflibtools.svg\n        :target: https://pypi.python.org/pypi/preflibtools\n        :alt: PyPI Status\n\n.. image:: https://github.com/PrefLib/preflibtools/workflows/build/badge.svg?branch=main\n        :target: https://github.com/PrefLib/preflibtools/actions?query=workflow%3Abuild\n        :alt: Build Status\n\n.. image:: https://github.com/PrefLib/preflibtools/workflows/docs/badge.svg?branch=main\n        :target: https://www.docs.preflib.org/\n        :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/PrefLib/preflibtools/branch/main/graphs/badge.svg\n        :target: https://codecov.io/gh/PrefLib/preflibtools/tree/main\n        :alt: Code Coverage\n\n.. inclusion-marker-badges-end\n\nOverview\n========\n\nThe PrefLib-Tools is a set of Python tools developed to work with preference data from the\n`PrefLib.org website <https://www.preflib.org/>`_.\n\nThis package provides input and output operations on PrefLib instances, together with some additional functionalities\non the instances: Testing whether a Condorcet winner exists, whether the instance is single-peaked, etc...\n\nWe developed this package in the hope of making the use of PrefLib instances easy. This has been done in the same\nspirit as PrefLib: Providing tools for the community with the help of the community. If you want to contribute, feel\nfree to create pull requests. If you have a question, a remark, or encounter a problem, please open an issue, create a\npull request etc...\n\nThe full documentation of the package can be found there: `http://www.docs.preflib.org <http://www.docs.preflib.org/>`_.\n\nIf, for some reasons, you are looking for the older version of the PrefLib-Tools, it is still available in the GitHub\nrepository `Preflib-Tools-Old <https://github.com/PrefLib/Preflib-Tools-Old>`_.\n\nInstallation\n============\n\nThe installation should be as easy as:\n\n.. code-block:: console\n\n    pip3 install preflibtools\n\nThe source code is also available here.\n\nUsage\n=====\n\nPrefLib Instances\n-----------------\n\n.. inclusion-marker-instance-begin\n\nWe use different Python classes to deal with the different types of data that are hosted on\n`PrefLib.org <https://www.preflib.org/>`_. All these classes inherit from :code:`PrefLibInstance`, the abstract\nclass that implements all the basic functionalities common to all the others. Let us first discuss the class\n:code:`PrefLibInstance`, the other classes will be introduced later.\n\nThe most important functionality, is the ability to read and parse PrefLib data. We provide several ways to do so, as\nillustrated below.\n\n.. code-block:: python\n\n    from preflibtools.instances import PrefLibInstance\n\n    # The instance can be populated either by reading a file, or from an URL.\n    instance = PrefLibInstance()\n    instance.parse_file(\"00001-00000001.soi\")\n    instance.parse_url(\"https://www.preflib.org/static/data/irish/00001-00000001.soi\")\n\n:code:`PrefLibInstance` also stores most of the metadata about the data file.\n\n.. code-block:: python\n\n    # Path to the original file, and the name of the file\n    instance.file_path\n    instance.file_name\n    # The type of the instance and its modification type\n    instance.data_type\n    instance.modification_type\n    # Some potentially related files\n    instance.relates_to\n    instance.related_files\n    # The title of the data file and its description (mainly empty, on purpose)\n    instance.title\n    instance.description\n    # Some historical landmark about the data file\n    instance.publication_date\n    instance.modification_date\n    # The number of alternatives and their names\n    instance.num_alternatives\n    for alt, alt_name in instance.alternatives_name.items():\n        alternative = alt\n        name = alt_name\n    # The number of voters\n    instance.num_voters\n\nFinally, :code:`PrefLibInstance` also provide the basic functions to write the instance.\n\n.. code-block:: python\n\n    instance.write(path_to_the_file)\n\nAs said before, :code:`PrefLibInstance` is an abstract class, so all the actual stuff only happens in what comes next.\n\n.. inclusion-marker-instance-end\n\nOrdinal Preferences\n-------------------\n\n.. inclusion-marker-ordinal-begin\n\nPreferences that can be represented as orders over the alternatives are called ordinal. The orders can be partial,\nand/or weak. All these preferences are represented using the class :code:`OrdinalInstance`. It implements the basic\nfunctions required by :code:`PrefLibInstance` and provide additional metadata that are illustrated below.\n\n.. code-block:: python\n\n    from preflibtools.instances import OrdinalInstance\n\n    # We can populate the instance by reading a file from PrefLib.\n    # You can do it based on a URL or on a path to a file\n    instance = OrdinalInstance()\n    instance.parse_file(\"00001-00000001.soi\")\n    instance.parse_url(\"https://www.preflib.org/static/data/irish/00001-00000001.soi\")\n\n    # Additional members of the class are the orders,  their multiplicity and the number of unique orders\n    for o in instance.orders:\n        order = o\n        multiplicity = instance.multiplicity[order]\n    instance.num_unique_orders\n\nWe represent orders as tuples of tuples (we need them to be hashable), i.e., it is a vector of sets of alternatives\nwhere each set represents an indifference class for the voter. Here are some examples of orders.\n\n.. code-block:: python\n\n    # The strict and complete order 1 > 2 > 0\n    strict_order = ((1,), (2,), (0,))\n    # The weak and complete order (1, 2) > 0 > (3, 4)\n    weak_order = ((1, 2), (0,), (3, 4))\n    # The incomplete an weak order (1, 2) > 4\n    incomplete_order = ((1, 2), (4,))\n\nNow that we know how orders are represented, we can see some example of how to handle orders within the instance.\n\n.. code-block:: python\n\n    # Adding preferences to the instance, using different formats\n    # Simply a list of orders\n    extra_orders = [((0,), (1,), (2,)), ((2,), (0,), (1,))]\n    instance.append_order_list(extra_orders)\n    # A vote map, i.e., a dictionary mapping orders to their multiplicity\n    extra_vote_map = {((0,), (1,), (2,)): 3, ((2,), (0,), (1,)): 2}\n    instance.append_vote_map(extra_vote_map)\n\n    # We can access the full profile, i.e., with orders appearing several times\n    # (according to their multiplicity)\n    instance.full_profile()\n\n    # If we are dealing with strict orders, we can flatten the orders so that ((0,), (1,), (2,))\n    # is rewritten as (0, 1, 2). This return a list of tuple(order, multiplicity).\n    instance.flatten_strict()\n\n    # We can access the profile as a vote map\n    instance.vote_map()\n\nAn instance can be populated by reading a file, but also through some sampling procedures that we provide.\n\n.. code-block:: python\n\n    # Some statistical culture we provide, here for 5 voters and 10 alternatives\n    instance = OrdinalInstance()\n    instance.populate_mallows_mix(5, 10, 3)\n    instance.populate_urn(5, 10, 76)\n    instance.populate_IC(5, 10)\n    instance.populate_IC_anon(5, 10)\n\nTo finish, we may want to test some properties of the instance. Let's start with some basic ones.\n\n.. code-block:: python\n\n    from preflibtools.properties import borda_scores, has_condorcet\n\n    # Let's check the Borda scores of the alternatives\n    borda_scores(instance)\n    # We can also check if the instance has a Condorcet winner\n    has_condorcet(instance)\n\nThe are plenty of methods to check for the potential single-peakedness of the instance.\n\n.. code-block:: python\n\n    from preflibtools.properties.singlepeakedness import *\n\n    # We can first check if the instance is single-peaked with respect to a given\n    # axis. This only works for complete orders, they can be weak though.\n    is_SP = is_single_peaked_axis(instance, [0, 1, 2])\n    # In general we can test for the single-peakedness of the instance:\n    # In the case of strict and complete orders;\n    (is_SP, axis) = is_single_peaked(instance)\n    # And in the case of weak and complete order (using an ILP solver).\n    (is_SP, opt_status, axis) = is_single_peaked_ILP(instance)\n\n    # Maybe the instance is not single-peaked, but approximately. We can check how close to\n    # single-peaked it is in terms of voter deletion and alternative deletion.\n    (num_voter_deleted, opt_status, axis, deleted_voters) = approx_SP_voter_deletion_ILP(instance)\n    (num_alt_deleted, opt_status, axis, deleted_alts) = approx_SP_alternative_deletion_ILP(instance)\n\nWe can also look into single-crossing.\n\n.. code-block:: python\n\n    from preflibtools.properties.singlecrossing import is_single_crossing\n\n    # Testing if the instance is single-crossing\n    is_single_crossing(instance)\n\nFinally, we can talk about distances between the orders of the instance.\n\n.. code-block:: python\n\n    from preflibtools.properties.distances import distance_matrix, spearman_footrule_distance\n    from preflibtools.properties.distances import kendall_tau_distance, sertel_distance\n\n    # We can create the distance matrix between any two orders of the instance\n    distance_matrix(instance, kendall_tau_distance)\n    distance_matrix(instance, spearman_footrule_distance)\n    distance_matrix(instance, sertel_distance)\n\n\n.. inclusion-marker-ordinal-end\n\nCategorical Preferences\n-----------------------\n\n.. inclusion-marker-categorical-begin\n\nCategorical preferences represent scenario in which voters were asked to place alternatives into some categories.\nIt is also assumed that there is an ordering of the categories inducing some preference between them.\nThe typical example of categorical preferences is approval ballots, in which the categories are YES and NO.\n\nThis types of preferences are represented using the :code:`CategoricalInstance` class.\n\n.. code-block:: python\n\n    from preflibtools.instances import CategoricalInstance\n\n    instance = CategoricalInstance()\n    instance.parse_url(\"https://www.preflib.org/static/data/frenchapproval/00026-00000001.cat\")\n\n    # Additional members of the class are related to the categories themselves\n    instance.num_categories\n    for cat, cat_name in instance.categories_name.items():\n        category = cat\n        name_of_the_category = cat_name\n    # But also to the preferences\n    for p in instance.preferences:\n        preferences = p\n        multiplicity = instance.multiplicity[p]\n    instance.num_unique_preferences\n\n.. inclusion-marker-categorical-end\n\nMatching Preferences\n--------------------\n\n.. inclusion-marker-matching-begin\n\nMatching preferences cover settings in which agents are to be matched to one another, and they have affinity scores\nbetween each others. The typical example for such preferences hosted on `PrefLib.org <https://www.preflib.org/>`_ is\nthat of kidney transplant where donors and patients are to be matched. The class :code:`MatchingInstance` covers these.\n\nThis class inherits both from :code:`PrefLibInstance` and from :code:`WeightedDiGraph`. This means that on top of the\nusual instance machinery, it also has all the graph related members and methods.\n\n.. code-block:: python\n\n    from preflibtools.instances import MatchingInstance\n\n    instance = MatchingInstance()\n    instance.parse_url(\"https://www.preflib.org/static/data/kidney/00036-00000001.wmd\")\n\n    # The instance has a single new member: the number of edges in the graph\n    instance.num_edges\n\n    # ...and an adjacency list implementation of the weighted directed graph\n    instance.nodes() # returns the set of nodes\n    instance.edges() # returns the set of edges in the format (n1, n2, weight)\n    instance.neighbours(n) # returns the neighbours of node n\n    instance.outgoing_edges(n) # returns the edges going out of n\n    instance.add_node(n) # to add a node n\n    instance.add_edge(n1, n2, weight) # to add the edge (n1, n2, weight)\n\n.. inclusion-marker-matching-end\n\nRequirements\n============\n\nThis package relies of the following ones:\n\n* **numpy**: to deal with array and math-related functions (random generator, factorial, etc...);\n* **mip**: to deal with optimisation problems (for instance closeness to single-peakedness).\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PrefLib/preflibtools",
    "keywords": "preflibtools",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preflibtools",
    "package_url": "https://pypi.org/project/preflibtools/",
    "platform": null,
    "project_url": "https://pypi.org/project/preflibtools/",
    "project_urls": {
      "Homepage": "https://github.com/PrefLib/preflibtools"
    },
    "release_url": "https://pypi.org/project/preflibtools/2.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A set of tools to work with preference data from the PrefLib.org website.",
    "version": "2.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15183665,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1533635e967c98dbc3c424472c0f9988a857b9a724cc4920335c69f8f53f4cab",
          "md5": "19fd7d38ff8d1a8de210f7862ad23c15",
          "sha256": "ae387e3e1cf034e6f250a48e16bf40289fb125f7d8be47ad8305b6810edc5e84"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.0.win-amd64.zip",
        "has_sig": false,
        "md5_digest": "19fd7d38ff8d1a8de210f7862ad23c15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 181825,
        "upload_time": "2022-09-21T14:47:37",
        "upload_time_iso_8601": "2022-09-21T14:47:37.626366Z",
        "url": "https://files.pythonhosted.org/packages/15/33/635e967c98dbc3c424472c0f9988a857b9a724cc4920335c69f8f53f4cab/preflibtools-2.0.0.win-amd64.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7226b0ffaed221e69e296f9cae1d4a39c6287c0433395327baea0ca7a2492b90",
          "md5": "9f68a92022f66f3fb5a0d2ff2565dfa2",
          "sha256": "2efc696cd2d5d1d782ad537cbe8268c64772bada81200ae1b31ca57c02b96987"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f68a92022f66f3fb5a0d2ff2565dfa2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 44826,
        "upload_time": "2022-09-22T09:29:18",
        "upload_time_iso_8601": "2022-09-22T09:29:18.290330Z",
        "url": "https://files.pythonhosted.org/packages/72/26/b0ffaed221e69e296f9cae1d4a39c6287c0433395327baea0ca7a2492b90/preflibtools-2.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2adb327d353d44bd6a59132fa2f9ce224bd09d22db0d5a93f6e4e2b14de94ad",
          "md5": "a26ed85050b31f6cbccfc4f96b7689ec",
          "sha256": "93c734dfc588d880b59e8b1ed40e6c9f77fe2323ab3c40d54a8e15dc80bada71"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a26ed85050b31f6cbccfc4f96b7689ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50645,
        "upload_time": "2022-09-22T09:26:18",
        "upload_time_iso_8601": "2022-09-22T09:26:18.501501Z",
        "url": "https://files.pythonhosted.org/packages/b2/ad/b327d353d44bd6a59132fa2f9ce224bd09d22db0d5a93f6e4e2b14de94ad/preflibtools-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c887d3d1a1861c7ddf4b510c215ab33bece2299ec36eb08c9d61b566fafdde47",
          "md5": "ed3e35b0db92cd3311280f485d3ac910",
          "sha256": "24fdf0bca868c586a1bc0df8bd6dd1e439a470a31598d82de2882506111dddcb"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed3e35b0db92cd3311280f485d3ac910",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 145477,
        "upload_time": "2022-09-22T09:37:01",
        "upload_time_iso_8601": "2022-09-22T09:37:01.559902Z",
        "url": "https://files.pythonhosted.org/packages/c8/87/d3d1a1861c7ddf4b510c215ab33bece2299ec36eb08c9d61b566fafdde47/preflibtools-2.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e65f18333cd45791c9eb4c9c7347f2a5aa0ef0adb11affe586463c9b364a8ac",
          "md5": "08cb5118653b34c425ff1a3f73df4798",
          "sha256": "3af8024bcb6be2036c422ef355aaf1bcaf1cb08ef92d010dfd5a5647caad98ec"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "08cb5118653b34c425ff1a3f73df4798",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 134611,
        "upload_time": "2022-09-22T09:37:04",
        "upload_time_iso_8601": "2022-09-22T09:37:04.000211Z",
        "url": "https://files.pythonhosted.org/packages/2e/65/f18333cd45791c9eb4c9c7347f2a5aa0ef0adb11affe586463c9b364a8ac/preflibtools-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3142916de56d19ab8ac54a0630e78e7082a7c285a3267680bb93a23e35f9448d",
          "md5": "42e1fb3595c3cad538e8845185c07dc2",
          "sha256": "0e4718fc6c95906a87acb4dae487987556648a4898d6c5774b35ee15abd3a6d0"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42e1fb3595c3cad538e8845185c07dc2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 46369,
        "upload_time": "2022-09-22T21:35:41",
        "upload_time_iso_8601": "2022-09-22T21:35:41.991005Z",
        "url": "https://files.pythonhosted.org/packages/31/42/916de56d19ab8ac54a0630e78e7082a7c285a3267680bb93a23e35f9448d/preflibtools-2.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7801758799a741cd207d92345a577fcb0b27318eacacf5b43dfa7265a352b322",
          "md5": "58950f3021c305f01e5c50bf2c4f2a77",
          "sha256": "b26bc195b7ea142f9082ab775117c38d55f7355036e5c3580dca8e463cf8f147"
        },
        "downloads": -1,
        "filename": "preflibtools-2.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "58950f3021c305f01e5c50bf2c4f2a77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 51139,
        "upload_time": "2022-09-22T21:35:43",
        "upload_time_iso_8601": "2022-09-22T21:35:43.564476Z",
        "url": "https://files.pythonhosted.org/packages/78/01/758799a741cd207d92345a577fcb0b27318eacacf5b43dfa7265a352b322/preflibtools-2.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3142916de56d19ab8ac54a0630e78e7082a7c285a3267680bb93a23e35f9448d",
        "md5": "42e1fb3595c3cad538e8845185c07dc2",
        "sha256": "0e4718fc6c95906a87acb4dae487987556648a4898d6c5774b35ee15abd3a6d0"
      },
      "downloads": -1,
      "filename": "preflibtools-2.0.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42e1fb3595c3cad538e8845185c07dc2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 46369,
      "upload_time": "2022-09-22T21:35:41",
      "upload_time_iso_8601": "2022-09-22T21:35:41.991005Z",
      "url": "https://files.pythonhosted.org/packages/31/42/916de56d19ab8ac54a0630e78e7082a7c285a3267680bb93a23e35f9448d/preflibtools-2.0.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7801758799a741cd207d92345a577fcb0b27318eacacf5b43dfa7265a352b322",
        "md5": "58950f3021c305f01e5c50bf2c4f2a77",
        "sha256": "b26bc195b7ea142f9082ab775117c38d55f7355036e5c3580dca8e463cf8f147"
      },
      "downloads": -1,
      "filename": "preflibtools-2.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "58950f3021c305f01e5c50bf2c4f2a77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 51139,
      "upload_time": "2022-09-22T21:35:43",
      "upload_time_iso_8601": "2022-09-22T21:35:43.564476Z",
      "url": "https://files.pythonhosted.org/packages/78/01/758799a741cd207d92345a577fcb0b27318eacacf5b43dfa7265a352b322/preflibtools-2.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}