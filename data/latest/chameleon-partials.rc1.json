{
  "info": {
    "author": "Michael Kennedy",
    "author_email": "michael@talkpython.fm",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Chameleon Partials\n\nSimple reuse of partial HTML page templates in the Chameleon template language for Python web frameworks.\n\n## Overview\n\nWhen building real-world web apps with Chameleon, it's easy to end up with repeated HTML fragments.\nJust like organizing code for reuse, it would be ideal to reuse smaller sections of HTML template code.\nThat's what this library is all about.\n\n## Example\n\nThis project comes with a sample Pyramid application (see the `example` folder). This app displays videos\nthat can be played on YouTube. The image, subtitle of author and view count are reused throughout the\napp. Here's a visual:\n\n![](https://raw.githubusercontent.com/mikeckennedy/chameleon_partials/main/readme_resources/reused-html-visual.png)\n\nCheck out the [**demo / example application**](https://github.com/mikeckennedy/chameleon_partials/tree/main/example) \nto see it in action. \n\n## Installation\n\nIt's just `pip install chameleon-partials` and you're all set with this pure Python package.\n\n## Usage\n\nUsing the library is incredible easy. The first step is to register the partial method with Chameleon.\nDo this once at app startup:\n\n```python\nfrom pathlib import Path\nimport chameleon_partials\n\ndef main(_, **settings):\n    \"\"\" This function returns a Pyramid WSGI application.\n    \"\"\"\n    with Configurator(settings=settings) as config:\n        config.include('pyramid_chameleon')\n        config.include('.routes')\n        config.scan()\n        \n        # Register the extension for working with Chameleon.\n        folder = (Path(__file__).parent / \"templates\").as_posix()\n        chameleon_partials.register_extensions(folder, auto_reload=True, cache_init=True)\n\n    return config.make_wsgi_app()\n```\n\nNext, you define your main HTML (Chameleon) templates as usual. Then \ndefine your partial templates. I recommend locating and naming them accordingly:\n\n```\n├── templates\n│   ├── errors\n│   │   └── 404.pt\n│   ├── home\n│   │   ├── index.pt\n│   │   └── listing.pt\n│   └── shared\n│       ├── _layout.pt\n│       └── partials\n│           ├── video_image.pt\n│           └── video_square.pt\n```\n\nNotice the `partials` subfolder in the `templates/shared` folder.\n\nThe templates are just HTML fragments. Here is a stand-alone one for the YouTube thumbnail from\nthe example app:\n\n```html\n<img src=\"https://img.youtube.com/vi/${ video.id }/maxresdefault.jpg\"\n     class=\"img img-responsive ${ ' '.join(classes or []) }\"\n     alt=\"${ video.title }\"\n     title=\"${ video.title }\">\n```\n\nNotice that an object called `video` and list of classes are passed in as the model.\n\nTemplates can also be nested. Here is the whole single video fragment with the image as well as other info\nlinking out to YouTube:\n\n```html\n<div>\n    <a href=\"https://www.youtube.com/watch?v=${ video.id }\" target=\"_blank\">\n        ${ render_partial('shared/partials/video_image.pt', video=video, classes=[]) }\n    </a>\n    <a href=\"https://www.youtube.com/watch?v=${ video.id }\" target=\"_blank\"\n       class=\"author\">${ video.author }</a>\n    <div class=\"views\">${ \"{:,}\".format(video.views) } views</div>\n</div>\n```\n\nNow you see the `render_partial()` method. It takes the subpath into the templates folder and\nany model data passed in as keyword arguments.\n\nWe can finally generate the list of video blocks as follows:\n\n```html\n<div class=\"video\" tal:repeat=\"v videos\">\n    ${ render_partial('shared/partials/video_square.pt', video=v) }\n</div>\n```\n\nThis time, we reframe each item in the list from the outer template (called `v`) as the `video` model\nin the inner HTML section.\n\n## The View Methods\n\nIn order to share the `render_partial()` function with your template, you'll need to pass it along to the\ntemplate with your model (dictionary). We've built a simple function to keep this fool-proof: \n\n```python\nchameleon_partials.extend_model(model)\n```\n\nHere's a typical view method that uses `render_partial`, notice the use of extending the \nmodel before passing it to the view:\n\n```python\n@view_config(route_name='listing', renderer='demo_chameleon_partials:templates/home/listing.pt')\ndef listing(_):\n    videos = video_service.all_videos()\n    model = dict(videos=videos)\n    return chameleon_partials.extend_model(model)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mikeckennedy/chameleon_partials",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chameleon-partials",
    "package_url": "https://pypi.org/project/chameleon-partials/",
    "platform": "",
    "project_url": "https://pypi.org/project/chameleon-partials/",
    "project_urls": {
      "Homepage": "https://github.com/mikeckennedy/chameleon_partials"
    },
    "release_url": "https://pypi.org/project/chameleon-partials/0.1.0/",
    "requires_dist": [
      "chameleon"
    ],
    "requires_python": "",
    "summary": "Simple reuse of partial HTML page templates in the Chameleon template language for Python web frameworks.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11012410,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b128a8387cd195fe857726dbd9d381df1eca9d224048044b13274a92e0ee24a",
          "md5": "e32b475800535ff660f57546f5fcdb26",
          "sha256": "62ad132903b610aab24cb350d68b47f7a7e40ce90114e5968da253739997cbf6"
        },
        "downloads": -1,
        "filename": "chameleon_partials-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e32b475800535ff660f57546f5fcdb26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4977,
        "upload_time": "2021-07-27T04:50:02",
        "upload_time_iso_8601": "2021-07-27T04:50:02.791534Z",
        "url": "https://files.pythonhosted.org/packages/4b/12/8a8387cd195fe857726dbd9d381df1eca9d224048044b13274a92e0ee24a/chameleon_partials-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b128a8387cd195fe857726dbd9d381df1eca9d224048044b13274a92e0ee24a",
        "md5": "e32b475800535ff660f57546f5fcdb26",
        "sha256": "62ad132903b610aab24cb350d68b47f7a7e40ce90114e5968da253739997cbf6"
      },
      "downloads": -1,
      "filename": "chameleon_partials-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e32b475800535ff660f57546f5fcdb26",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4977,
      "upload_time": "2021-07-27T04:50:02",
      "upload_time_iso_8601": "2021-07-27T04:50:02.791534Z",
      "url": "https://files.pythonhosted.org/packages/4b/12/8a8387cd195fe857726dbd9d381df1eca9d224048044b13274a92e0ee24a/chameleon_partials-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}