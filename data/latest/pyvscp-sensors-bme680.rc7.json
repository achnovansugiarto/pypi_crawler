{
  "info": {
    "author": "Ake Hedman, Grodans Paradis AB",
    "author_email": "akhe@grodansparadis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# vscp-python-sensor-bme680\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n\n<img src=\"https://vscp.org/images/logo.png\" width=\"100\">\n\nThis project consist of a scripts to deliver data from a [BME680](https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors-bme680/) sensor to a MQTT broker (mqtt-bme680.py). It is built upon the [Adafruit BME680 module](https://github.com/adafruit/Adafruit_CircuitPython_BME680)\n\nIt will deliver VSCP events for\n\n* Temperature\n* Humidity\n* Pressure (raw reading)\n* Pressure (adjusted for sea level)\n* Altitude\n* Gas concentration\n* Dew point\n\nTypically the scripts is used in a [cron job](https://ostechnix.com/a-beginners-guide-to-cron-jobs/) to deliver the events on timed intervals.\n\nAdafruit is the most popular source for [BME680 breakout boards](https://www.adafruit.com/product/3660) but there are many others available also in different price ranges.\n\n![BME680](https://cdn-learn.adafruit.com/guides/cropped_images/000/001/822/medium640/3660_top_ORIG_2020_07.jpg?1596135784)\n\nThe scripts can be configured to be used with either a SPI or I2C connected sensor.\n\n## Install/connect the sensor\n\nLady Ada has written a very good tutorial on this [here](https://learn.adafruit.com/adafruit-bme680-humidity-temperature-barometic-pressure-voc-gas). Follow it to install your sensor.\n\n## Install\n\n### Prerequisites\n\nThe code here is dependent on the [VSCP helper library](https://github.com/grodansparadis/vscp-helper-lib). Therefore you have to install this package first. It is available for Debian type systems including Raspberry Pi. Check and download the latest version [here](https://github.com/grodansparadis/vscp-helper-lib/releases)\n\nFor convenience this is how the current version is installed on a Raaspberry Pi\n\n```bash\nwget https://github.com/grodansparadis/vscp-helper-lib/releases/download/v14.0.2/libvscphelper14_14.0.2-1_armhf.deb\n\nwget https://github.com/grodansparadis/vscp-helper-lib/releases/download/v14.0.2/libvscphelper14-dev_14.0.2-1_armhf.deb\n\nsudo dpkg -i ./libvscphelper14_14.0.2-1_armhf.deb\nsudo dpkg -i ./libvscphelper14-dev_14.0.2-1_armhf.deb\n\n```\n\nNote that there may be [later versions available)(https://github.com/grodansparadis/vscp-helper-lib/releases) then the one downloaded above. You should **always** install the latest version.\n\n\n### Install the package\n\nThe scripts are available as a package **vscp-python-sensor-bme680** on [PyPi](https://pypi.org/project/pyvscp-sensors-bme680/). This means you can do an automatic install with pip that will handle all dependencies expect for the helper library mentioned above which must be install manually.\n\nThe installation process is easy\n\n```bash\npip3 install vscp-python-sensor-bme680\n```\n\nTo later upgrade to the latest version use\n\n```bash\npip3 install --upgrade vscp-python-sensor-bme680\n```\n\nIt is not required but recommended to install in a virtual environment To install in a virtual environment in your current project:\n\n```bash\nmkdir project-name && cd project-name\npython3 -m venv .env\nsource .env/bin/activate\n```\n\nthen do the install of **vscp-python-sensor-bme680** as of above.\n\nAfter install you can use **vscp-bme680.py** from the command line. Info on how to configure the scripts for your needs are below.\n\n### Manual Install\n\nFor some reason you may not want to use PyPi and want to download the scripts from the [github repository](https://github.com/grodansparadis/vscp-python-sensor-bme680). \n\nThe script depends on some other modules that you need to install before using it. It is recommended to install everything in a virtual environment.\n\nAs mentioned above you need to install the VSCP helper library before installing this module.\n\nIt is recommended to install in a virtual environment in your current project:\n\n```bash\ngit clone https://github.com/grodansparadis/vscp-python-sensor-bme680.git\ncd vscp-python-sensor-bme680\npython3 -m venv .env\nsource .env/bin/activate\n```\n\nYou may need to install Python venv with \n\n```bash\napt install python3-venv\n```\nif it's not installed.\n\n#### Configparser\n\nConfigparser can be found on [PyPi](https://pypi.org/) and is documented [https://docs.python.org/3/library/configparser.html](here). Install with\n\n```bash\npip3 install configparser\n```\n\n#### Install adafruit-circuitpython-bme680 module\nOn supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally from PyPI. To install for current user:\n\n```bash\npip3 install adafruit-circuitpython-bme680\n```\n\nTo install system-wide (this may be required in some cases):\n\n```bash\nsudo pip3 install adafruit-circuitpython-bme680\n```\n\n#### Install VSCP modules\n\n**pyvscphelper** is not needed if only MQTT should be used. You can install the modules from [PyPi](https://pypi.org/)\n\n```bash\npip3 install pyvscp\npip3 install pyvscphelper\n```\n\nIf you need them on more places either go for a global install or use a virtual environment and install all the modules in it.\n\n#### Install MQTT module\n\nFor MQTT functionality Paho MQTT module is needed. You can install the modules from PyPi\n\n```bash\npip3 install paho-mqtt\n```\n\n## Configure\n\nYou setup the code by either editing the scripts or create a configuration file with the settings. In the scripts all relevant values can be found in the beginning of the file along with documentation.\n\nThe settings are named the same in the config file as in the script itself so the documentation for the configuration file is valid also for directly adding the scripts.\n\nTo get help you can issue\n\n```bash\nmqtt-bme680.py --help\n```\n\non the command line after the module is installed.\n\nThe recommended way to configure the scripts is to use a configuration file and store this file in a safe location as it contains usernames and password and in that way can protect this sensitive information. The syntax to instruct the script to read a configuration file is\n\n```bash\nmqtt-bme680.py --configure path-to-config-file\n```\n\nSo \n\n```bash\nmqtt-bme680.py --configure /etc/vscp/bme680-config.ini\n```\n\nwill read the configuration from _/etc/vscp/bme680-config.ini_\n\n## Sample configuration file\n\nIf you install in a virtual environment as recommended above you will find a sample configuration file in \n\n>_.env/pyvscp-sensors-bme680-samp\n\nFor a standard install you find it in\n\n>_.local/pyvscp-sensors-bme680-samp\n\nand for a global install you can get the path by issuing\n\n```bash\npip3 -V\n```\n\n## Content\n\n### The GENERAL section\n\n#### bVerbose\n\nSet to \n\n> bVerbose = True\n\nto get some info when the script is run. Set to\n\n> bVerbose = False\n\nto make the script silent.\n\n#### bUseSPI\n\nSet \n\n> bUseSPI = True \n\nto use SPI communication to connect the sensor instead of I2C\n\n### The [VSCP] section\n\n#### guid\n\nThe scripts use the MAC address of the machine they are run on to construct a GUID on the format\n\n> FF:FF:FF:FF:FF:FF:FF:FE:M5:M4:M3:M2:M1:M0:id1:id0\n\nwhere _M5:M4:M3:M2:M1:M0_ is the MAC address and _id1:id0_ sensor id. \n\nIf you don't want this you can supply your own GUID here. Note that the two lowest positions also now is used for id's so normally the GUID should have zeros in these positions.\n\n#### sensorindex_temperature\n\nSensor index for the temperature sensor. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_humidity\n\nSensor index for the humidity sensor. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_pressure\n\nSensor index for the pressure sensor. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_pressure_adj\n\nSensor index for the adjusted sea level pressure. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_gas\n\nSensor index for the gas concentration sensor. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_altitude\n\nSensor index for the altitude. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### sensorindex_dewpoint\n\nSensor index for the dew point. Default is that it is set to zero as the GUID is unique for each sensor. Set to a byte value of your choice if you need it.\n\n#### zone\n\nSet the zone to a value between 0-255 if you need it. Default is zero.\n\n#### subzone\n\nSet the subzone to a value between 0-255 if you need it. Default is zero.\n\n#### id_temperature\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 1.\n\n#### id_humidity\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 2.\n\n#### id_pressure\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 3.\n\n#### id_pressure_adj\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 4.\n\n#### id_gas\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 5.\n\n#### id_altitude\n\nSet id_temperature to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 6.\n\n#### id_dewpoint\n\nSet id_dewpoint to a value between 0-65535 to set the id for the reported value. This is the two LSB bytes of the GUID used to report the sensor value. Default is 6.\n\n### The [MQTT] section\n\n### host\n\nThe address for the MQTT broker which will get reported values.\n\n### port\n\nPort on the MQTT broker.\n\n### user\n\nUsername used to login to MQTT broker.\n\n### password\n\nPassword used to login to MQTT broker.\n\n### topic_temperature\n\nThis is the topic under which the temperature event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\n- _{xguid}_ will be replaced with the GUID of the event.\n- _{xclass}_ will be replaced with the VSCP class of the event.\n- _{xtype}_ will be replaced with the VSCP type of the event.\n\n**->** stands for \"input\" and is used by VSCP when talking to a MQTT broker. **<--** is the opposite, \"output\". \n\n### topic_humidity\n\nThis is the topic under which the humidity event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n### topic_pressure\n\nThis is the topic under which the pressure event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n### topic_pressure_adj\n\nThis is the topic under which the sea level adjusted pressure event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n### topic_gas\n\nThis is the topic under which the gas concentration event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n### topic_altitude\n\nThis is the topic under which the altitude event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n### topic_dewpoint\n\nThis is the topic under which the dew point event will be sent. The default is\n\n> vscp/{xguid}/{xclass}/{xtype}\n\nSee __topic_temperature__ for full info.\n\nAnd empty topic can be used if you don't want the value to be sent.\n\n\n### The [BME680] section\n\n### sea_level_pressure \n\nPressure in hPa at sea level. Used for pressure adjustment. Default is 1013.25\n\n### temp_corr\n\nCorrection value in degrees Celsius for sensor temperature reading. The value entered here will be subtracted from the reading. Default is 0. \n\n\n### height_at_location\n\nSet the height in meters for your location. Used for pressure adjustments. Default is 412.0 meters.\n\n## using\n\nAfter you have installed the module and created a configuration file test the script with\n\n```bash\nmqtt-bme680.py -v -c path-to-config\n```\n\nthe MQTT broker you have defined should receive the events under the defined topics like this\n\n![](./images/mqttexplorer.png)\n\nand you will get some verbose info on the screen like this\n\n```bash\nConnection in progress... 192.168.1.7\n-------------------------------------------------------------------------------\nSending...\nTemperature: -3.9 C\nHumidity: 97.5 %\nPressure: 96604 Pa\nRelative pressure: 101568 Pa\nGas: 5014 Ohm\nAltitude 401 meter\nDew point -1.9 C\n-------------------------------------------------------------------------------\nClosed\n```\n\nnow you can add the script to cron to get measurement events send to your broker on even intervals.\n\n## node-red and node.js\n\nwith the VSCP tools available for node.js and node-red you can easily graph and in other ways handel the published measurement data.\n\n- You find node.js tools [here](https://www.npmjs.com/search?q=node-vscp)\n- You find node-red tools [here](https://flows.nodered.org/search?term=node-red-contrib-vscp)\n\n\n## VSCP\n\nFor VSCP you find info at the [VSCP main site](https://www.vscp.org)\n\nVSCP docs are collected [here](https://docs.vscp.org/).\n\n\n\n----\n\nIf you are interested in learning more about VSCP the main site is [here](https://www.vscp.org)\n\nCopyright © 2000-2020 Ake Hedman, Grodans Paradis AB - MIT license.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grodansparadis/vscp_python_sensor_bme680",
    "keywords": "vscp iot m2m automation development bme680",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyvscp-sensors-bme680",
    "package_url": "https://pypi.org/project/pyvscp-sensors-bme680/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyvscp-sensors-bme680/",
    "project_urls": {
      "Homepage": "https://github.com/grodansparadis/vscp_python_sensor_bme680"
    },
    "release_url": "https://pypi.org/project/pyvscp-sensors-bme680/1.0.1/",
    "requires_dist": [
      "adafruit-circuitpython-bme680",
      "configparser",
      "paho-mqtt",
      "pyvscp",
      "pyvscpclasses",
      "pyvscphelper",
      "pyvscptypes",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.0",
    "summary": "VSCP BME680 sensor handler",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8821793,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35f4af5ba7c73e74e816034bdfa5e168f890c8f30820ab51df6acbef6d91182c",
          "md5": "968171859c4c1b532d9a1e89127cc925",
          "sha256": "4418f4818eadcd87817f710ecec443edaa3c5ad180794f4f12c19ad5139eb37b"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "968171859c4c1b532d9a1e89127cc925",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 12992,
        "upload_time": "2020-11-25T17:06:42",
        "upload_time_iso_8601": "2020-11-25T17:06:42.745149Z",
        "url": "https://files.pythonhosted.org/packages/35/f4/af5ba7c73e74e816034bdfa5e168f890c8f30820ab51df6acbef6d91182c/pyvscp_sensors_bme680-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c231960d731abc6f0b4c579fe88b7a26ee0f6ec5a21ed6a84b0b9a4f7ee176e",
          "md5": "4e043432117614e4a05b8eff874a0d7d",
          "sha256": "5eb95ad54e55d9af8f40d6385608c88e0cf4161988e8f05d83cd0da53374b96e"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e043432117614e4a05b8eff874a0d7d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 12994,
        "upload_time": "2020-11-25T17:16:10",
        "upload_time_iso_8601": "2020-11-25T17:16:10.674441Z",
        "url": "https://files.pythonhosted.org/packages/9c/23/1960d731abc6f0b4c579fe88b7a26ee0f6ec5a21ed6a84b0b9a4f7ee176e/pyvscp_sensors_bme680-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a748e230bf3c725e6d0812c5afd3c61262ac9799724a5f568f6648cc0dc7e581",
          "md5": "db0ce96e3c39546ea368dac9a000df41",
          "sha256": "08dbbb593a232aa312bf9fd3ba5fe592452e3128074da58c687b83386c69e06b"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db0ce96e3c39546ea368dac9a000df41",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 13049,
        "upload_time": "2020-11-25T17:21:51",
        "upload_time_iso_8601": "2020-11-25T17:21:51.809670Z",
        "url": "https://files.pythonhosted.org/packages/a7/48/e230bf3c725e6d0812c5afd3c61262ac9799724a5f568f6648cc0dc7e581/pyvscp_sensors_bme680-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9d083020599ae7e6742a3f1d99506838bea6f8666371ab78bbdcf674d1952b",
          "md5": "78ec162b5b69cf0436d5157e1588f2c5",
          "sha256": "dacb7febc77175cb228f400419a00e604057ebe697bef068170d2a617db4a8bb"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78ec162b5b69cf0436d5157e1588f2c5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 21363,
        "upload_time": "2020-11-25T20:41:43",
        "upload_time_iso_8601": "2020-11-25T20:41:43.259061Z",
        "url": "https://files.pythonhosted.org/packages/ab/9d/083020599ae7e6742a3f1d99506838bea6f8666371ab78bbdcf674d1952b/pyvscp_sensors_bme680-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ccff14540a07e36bb9e0792e81be0c0d575c25fd54363ed9c75676f5fc8d856",
          "md5": "9cccb6ecd58491b0712af39fe40e3553",
          "sha256": "d92499fd44b7faba3a58727ec8843e940e1b2e5ced479203a903f693a9bd2cd3"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cccb6ecd58491b0712af39fe40e3553",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 24702,
        "upload_time": "2020-11-26T19:34:24",
        "upload_time_iso_8601": "2020-11-26T19:34:24.258888Z",
        "url": "https://files.pythonhosted.org/packages/3c/cf/f14540a07e36bb9e0792e81be0c0d575c25fd54363ed9c75676f5fc8d856/pyvscp_sensors_bme680-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e0fec74e65bf0b42390df3d5ea5a52605b4b3c3f82a7cdb2db8d5905beba4bb",
          "md5": "2ff8719124b5333860fc87d0decba332",
          "sha256": "71cd385250c19df0ab855b498e55053d906b92db61e586c3c3307f53a43afc66"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ff8719124b5333860fc87d0decba332",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 25148,
        "upload_time": "2020-11-26T22:39:19",
        "upload_time_iso_8601": "2020-11-26T22:39:19.900217Z",
        "url": "https://files.pythonhosted.org/packages/2e/0f/ec74e65bf0b42390df3d5ea5a52605b4b3c3f82a7cdb2db8d5905beba4bb/pyvscp_sensors_bme680-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be82e3e2673c6fb36045061c9dd8798e0a0a4b7237e25212862576e66674df71",
          "md5": "958e8806dcf7db2c7892b2e8b7ec810e",
          "sha256": "bf5f895f4b65babd46cfa7065f4dd9a3da921233d8dc866e75f9ba5aea3fc129"
        },
        "downloads": -1,
        "filename": "pyvscp_sensors_bme680-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "958e8806dcf7db2c7892b2e8b7ec810e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.0",
        "size": 25122,
        "upload_time": "2020-12-04T14:27:42",
        "upload_time_iso_8601": "2020-12-04T14:27:42.324859Z",
        "url": "https://files.pythonhosted.org/packages/be/82/e3e2673c6fb36045061c9dd8798e0a0a4b7237e25212862576e66674df71/pyvscp_sensors_bme680-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be82e3e2673c6fb36045061c9dd8798e0a0a4b7237e25212862576e66674df71",
        "md5": "958e8806dcf7db2c7892b2e8b7ec810e",
        "sha256": "bf5f895f4b65babd46cfa7065f4dd9a3da921233d8dc866e75f9ba5aea3fc129"
      },
      "downloads": -1,
      "filename": "pyvscp_sensors_bme680-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "958e8806dcf7db2c7892b2e8b7ec810e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.0",
      "size": 25122,
      "upload_time": "2020-12-04T14:27:42",
      "upload_time_iso_8601": "2020-12-04T14:27:42.324859Z",
      "url": "https://files.pythonhosted.org/packages/be/82/e3e2673c6fb36045061c9dd8798e0a0a4b7237e25212862576e66674df71/pyvscp_sensors_bme680-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}