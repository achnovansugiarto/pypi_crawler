{
  "info": {
    "author": "Nahuel Ambrosini",
    "author_email": "ambro17.1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Slackify\n![Build & Test](https://github.com/Ambro17/flask-slack/workflows/Build%20&%20Test/badge.svg)\n[![codecov](https://codecov.io/gh/Ambro17/flask-slack/branch/master/graph/badge.svg)](https://codecov.io/gh/Ambro17/flask-slack)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\n`Slackify` is a light framework designed to accelerate your development of slack apps by letting you focus on **what you want** instead of fighting with *how to do it*\n\nTo do so, it stands on the shoulders of `Flask` and `slackclient` (_The official python slack client_) and offers a more declarative API over slack commands, events, shortcuts, actions and modals.\n\n## Installation\n`python3 -m pip install slackify`\n\n_Requires python3.6+_\n\n## Quickstart\n**1. The easy way:**\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/Ambro17/slackify/tree/master)\n\n> The server will listen at `<heroku_url>/` for commands/actions and `<heroku_url>/slack/events` for slack events\n\n> This setup uses flask builtin server which is NOT suited for production. Replace it by gunicorn or similar when ready to ship\n\n\n**2. The manual way**\n\nCreate a file named `quickstart.py` with the following content\n```python\nfrom flask import Flask\nfrom slackify import Slackify, async_task\n\n\napp = Flask(__name__)\nslackify = Slackify(app=app)\n\n\n@slackify.command\ndef hello():\n    return reply_text('Hello from Slack')\n\n\n# Change the slash command name to /say_bye instead of the default function name\n@slackify.command(name='say_bye')\ndef bye():\n    my_background_job()\n    return reply_text('Bye')\n\n\n@async_task\ndef my_background_job():\n    \"\"\"Non blocking long task\"\"\"\n    sleep(15)\n    return\n```\n\nTo connect it to slack you need to meet this preconditions:\n\n0. [Create a slack app](https://api.slack.com/apps?new_app=1)\n1. Download [ngrok*](https://ngrok.com/download) and run `ngrok http 5000` to create a https proxy to localhost\n2. [Create a slash command](https://api.slack.com/apps) and set the url to ngrok's https url of step #1\n3. On your terminal export flask app variable `export FLASK_APP='quickstart:app'`\n4. Run your app with `flask run --port=5000` (The port should match the one on step #1)\n5. Write `/hello` to your new slack bot and let the magic begin\n\n>*This is a development setup so you can quickly see your code changes in slack without the need to redeploy your whole site.\n> Once your bot is ready for production you should update your commands url to a permanent one.\n> [Heroku](https://duckduckgo.com/?q=flask+on+heroku&t=brave&ia=web) might be a good choice if you are just getting started as it has a generous free tier.\n\n### Does it support new slack Shorcuts?\nYes, See [examples/shortcuts.py](examples/shortcuts.py) for a self contained example\n\n### And can i use new slack Modals?\nOf course! See [examples/views.py](examples/views.py) for a quick example\n\n### Are interactive actions supported?\nYes! See [examples/actions.py](examples/actions.py) for a quickstart.\n>Note: Legacy actions are unsupported by design as they are discouraged by slack. Nevertheless, if there's popular demand, we could add support for them.\n\n### And slack events?\nAs you may have guessed, they are also supported. See [examples/events.py](examples/events.py) for an example.\n\n## Dependency Injection\nAs you add more and more commands you will find yourself repeating yourself while parsing slack request on every function\n\nThe lib offers a solution to this with dependency injection.\n```python\n@slackify.command\ndef hello(command, command_args, response_url):\n    return reply_text(f\"You called `{command} {command_args}`. Use {response_url} for delayed responses\")\n```\nYour view function will now get the request command, arguments and response_url for free! Pretty cool, right?\n\nIf you are a user of pytest, this idea is similar to pytest fixtures\n\nSee [examples/injection.py](examples/injection.py) for the full example\n\n\n## Full example\nHere you have a more complete example showcasing all functionality. It includes:\n- A hello command that shows interactive buttons\n- Callbacks for each interactive button click\n- A register command that opens a new slack modal\n- A callback on modal form submission\n- A shortcut to roll a dice and get a random number\n- An event handler that echoes reactions to messages.\n- A greeting whenever someone says `hello` in a channel where the bot is present.\n>Remember to `export BOT_TOKEN=xoxb-your-bot-secret` to enable slack api calls.\n```python\nimport json\nimport os\nimport random\n\nfrom flask import Flask\nfrom slackify import (ACK, OK, Slackify, async_task, block_reply, request,\n                      respond, text_block, Slack)\n\napp = Flask(__name__)\nslackify = Slackify(app=app)\ncli = Slack(os.getenv('BOT_TOKEN'))\n\n\n@slackify.command\ndef hello():\n    \"\"\"Send hello message with question and yes no buttons\"\"\"\n    YES = 'yes'\n    NO = 'no'\n    yes_no_buttons_block = {\n        \"type\": \"actions\",\n        \"elements\": [\n            {\n                \"type\": \"button\",\n                \"text\": {\n                    \"type\": \"plain_text\",\n                    \"emoji\": True,\n                    \"text\": \"Yes\"\n                },\n                \"style\": \"primary\",\n                \"value\": \"i_like_bots\",\n                \"action_id\": YES\n            },\n            {\n                \"type\": \"button\",\n                \"text\": {\n                    \"type\": \"plain_text\",\n                    \"emoji\": True,\n                    \"text\": \"No\"\n                },\n                \"style\": \"danger\",\n                \"value\": \"i_dont_like_bots\",\n                \"action_id\": NO\n            }\n        ]\n    }\n    blocks = [\n        text_block('Do you like Bots?'),\n        yes_no_buttons_block\n    ]\n    return block_reply(blocks)\n\n\n@slackify.action(\"yes\")\ndef yes(payload):\n    \"\"\"If a user clicks yes on the message above, execute this callback\"\"\"\n    text_blok = text_block('Super! I do too :thumbsup:')\n    respond(payload['response_url'], {'blocks': [text_blok]})\n    return OK\n\n\n@slackify.action(\"no\")\ndef no(payload):\n    \"\"\"If a user clicks no on the hello message, execute this callback\"\"\"\n    text_blok = text_block('Boo! You are so boring :thumbsdown:')\n    respond(payload['response_url'], {'blocks': [text_blok]})\n    return OK\n\n\n@slackify.command\ndef register():\n    \"\"\"Open a registration popup that asks for username and password. Don't enter any credentials!\"\"\"\n    username_input_block = {\n        \"type\": \"input\",\n        \"block_id\": \"username_block\",\n        \"element\": {\n            \"type\": \"plain_text_input\",\n            \"placeholder\": {\n                \"type\": \"plain_text\",\n                \"text\": \"Enter your username\"\n            },\n            \"action_id\": \"username_value\"\n        },\n        \"label\": {\n            \"type\": \"plain_text\",\n            \"text\": \"ðŸ‘¤ Username\",\n            \"emoji\": True\n        }\n    }\n    password_input_block = {\n        \"type\": \"input\",\n        \"block_id\": \"password_block\",\n        \"element\": {\n            \"type\": \"plain_text_input\",\n            \"placeholder\": {\n                \"type\": \"plain_text\",\n                \"text\": \"Enter your password\"\n            },\n            \"action_id\": \"password_value\"\n        },\n        \"label\": {\n            \"type\": \"plain_text\",\n            \"text\": \"ðŸ”‘ Password\",\n            \"emoji\": True\n        }\n    }\n    modal_blocks = [\n        username_input_block,\n        password_input_block,\n    ]\n    callback_id = 'registration_form'\n    registration_form = {\n        \"type\": \"modal\",\n        \"callback_id\": callback_id,\n        \"title\": {\n            \"type\": \"plain_text\",\n            \"text\": \"My First Modal\",\n            \"emoji\": True\n        },\n        \"submit\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Register\",\n            \"emoji\": True\n        },\n        \"close\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Cancel\",\n            \"emoji\": True\n        },\n        \"blocks\": modal_blocks\n    }\n    cli.views_open(\n        trigger_id=request.form['trigger_id'],\n        view=registration_form\n    )\n    return OK\n\n\n@slackify.view(\"registration_form\")\ndef register_callback(payload):\n    \"\"\"Handle registration form submission.\"\"\"\n    response = payload['view']['state']['values']\n    text_blok = text_block(f':heavy_check_mark: You are now registered.\\nForm payload:\\n```{response}```')\n    send_message(cli, [text_blok], payload['user']['id'])\n    return ACK\n\n\n@async_task\ndef send_message(cli, blocks, user_id):\n    return cli.chat_postMessage(channel=user_id, user_id=user_id, blocks=blocks)\n\n\n@slackify.shortcut('dice_roll')\ndef dice_roll(payload):\n    \"\"\"Roll a virtual dice to give a pseudo-random number\"\"\"\n    dice_value = random.randint(1, 6)\n    msg = f'ðŸŽ² {dice_value}'\n    send_message(cli, blocks=[text_block(msg)], user_id=payload['user']['id'])\n    return ACK\n\n\n@slackify.event('reaction_added')\ndef echo_reaction(payload):\n    \"\"\"If any user reacts to a message, also react with that emoji to the message\"\"\"\n    event = payload['event']\n    reaction = event['reaction']\n    cli.reactions_add(\n        name=reaction,\n        channel=event['item']['channel'],\n        timestamp=event['item']['ts']\n    )\n\n\n@slackify.message('hello')\ndef say_hi(payload):\n    event = payload['event']\n    cli.chat_postMessage(channel=event['channel'], text='Hi! ðŸ‘‹')\n```\n\n## Usage as a Blueprint\nIf you already have a Flask app, you can attach\nflask functionality _slackifying_ your blueprint\n```python\n# slack_blueprint.py\nfrom slackify import Slackify, reply_text, Blueprint\n\nbp = Blueprint('slackify_bp', __name__, url_prefix='/slack')\nslackify = Slackify(app=bp)\n\n\n@slackify.command\ndef hello():\n    return reply_text('Hello from a blueprint')\n\n\n# app.py\nfrom flask import Flask\nfrom slack_blueprint import bp\n\ndef create_app():\n    app = Flask(__name__)\n    app.register_blueprint(bp)\n    return app\n\n```\n> Note: You must import Blueprint from slackify instead of flask to get it working\n\n## API Reference\n```python\n\n@slackify.command\nor\n@slackify.command(name='custom')\n\n\n@slackify.shortcut('shorcut-id')\n\n\n@slackify.action('action_id')\nor\n@slackify.action(action_id='action_id', block_id='block_id')\n\n\n@slackify.event('event_name') # See https://api.slack.com/events for all available events\n\n\n# Shortcut for `message` events that match certain string or regex\n@slackify.message('Hi!')\nor\n@slackify.message(re.compile(r'Bye|see you|xoxo'))\n\n\n@slackify.view('callback_id')\n\n\n# Specify what to do if a slack request doesn't match any of your handlers.\n# By default it simply ignores the request.\n@slackify.default\n\n# Handle unexpected errors that occur inside handlers.\n# By default returns status 500 and a generic message.\n# The exception will be passed as a positional argument to the decorated function\n@slackify.error\n```\n\n\n## How does it work?\nIf you are curious you may want to know how the lib works.\n\nIn fact there's really little to know and hopefully\nyou can understand it by browsing the code and this brief introduction.\n\nThe lib exposes a main class called `Slackify` that can either receive a Flask instance\nas `app` argument or creates one on the fly.\nIt then binds two routes. One for commands, shortcuts, actions and another one for slack events.\n\nThe first route is `/` by default, it inspects the incoming requests and looks for any declared handler that is interested in handling this request to redirect it.\n\nIf it finds a handler, it injects any dependency the view may require as a view argument, and then call the view function, passing the return value as the request response.\n\nIf there's no match, it ignores the request and it follows the\nnormal request lifecycle.\n\nIf there's an error, an overridable function through `@slackify.error` is executed to show a friendly message.\n\nThe second route the lib adds is the events route at `/slack/events`.\n\nWhen it receives a post request, it emits an event through `pyee.ExecutorEventEmitter` with the event type and quickly responds with the response acknowledgment slack requires to avoid showing an error to the user. This allows asynchronous execution of the function, while still responding quickly to slack.\nIn other words, when you decorate a function with `app.event('event_type')` what you are really doing is setting up a listener for the `event_type` that will receive the event payload. No magic.\n\nIf after reading this you have an idea of how we can extend or improve this lib in any way, it would be great to receive an issue or pull request!\nI feel there's still a void on slack bots with python that java and javascript have covered with [bolt's](https://github.com/slackapi/bolt) beautiful API.\nBelow you can find the current roadmap of features i would like to include.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ambro17/Flask-Slack",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slackify",
    "package_url": "https://pypi.org/project/slackify/",
    "platform": "",
    "project_url": "https://pypi.org/project/slackify/",
    "project_urls": {
      "Homepage": "https://github.com/Ambro17/Flask-Slack"
    },
    "release_url": "https://pypi.org/project/slackify/1.0.0/",
    "requires_dist": [
      "Flask (>=1.0.0)",
      "slackclient (>=2.5.0)",
      "requests (>=2.0.0)",
      "pyee (>=7.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Pythonic API for modern slack bots",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7661718,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1e08d001ef2851b60645f208762fac0bd320cc89dec138c3c519fa78a1c12b3",
          "md5": "9dbf4db1ea1788f66edb8a581a8b38ca",
          "sha256": "1b96a975b32b8077e7df81d6c835d3169e4560eaeb5b18477e4dae272a621d26"
        },
        "downloads": -1,
        "filename": "slackify-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dbf4db1ea1788f66edb8a581a8b38ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17665,
        "upload_time": "2020-05-01T18:35:13",
        "upload_time_iso_8601": "2020-05-01T18:35:13.381333Z",
        "url": "https://files.pythonhosted.org/packages/c1/e0/8d001ef2851b60645f208762fac0bd320cc89dec138c3c519fa78a1c12b3/slackify-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2887c1e68a579226b88bbbd11afeb150723c13842d3108a2099317e69e504205",
          "md5": "eb7c88994c4c33fc9e5fb8485d0ba5e9",
          "sha256": "b5bc3fce8b8bb8b2b9e77fdd9cdb3be0ba5238085d38ceee89b939907393c0a6"
        },
        "downloads": -1,
        "filename": "slackify-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb7c88994c4c33fc9e5fb8485d0ba5e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6423,
        "upload_time": "2020-05-01T18:35:15",
        "upload_time_iso_8601": "2020-05-01T18:35:15.700131Z",
        "url": "https://files.pythonhosted.org/packages/28/87/c1e68a579226b88bbbd11afeb150723c13842d3108a2099317e69e504205/slackify-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b03dd8d428210a6ac846beece5d06f6019cf41a4a7fcc4478a95150cb0f1a6d0",
          "md5": "5e501e758571af888d81057ed91a59e8",
          "sha256": "ee37efa8a32baec583be6f3a477b2fc00bffb146239b8b7a916d66f7921fa83c"
        },
        "downloads": -1,
        "filename": "slackify-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e501e758571af888d81057ed91a59e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20082,
        "upload_time": "2020-05-01T18:37:08",
        "upload_time_iso_8601": "2020-05-01T18:37:08.516966Z",
        "url": "https://files.pythonhosted.org/packages/b0/3d/d8d428210a6ac846beece5d06f6019cf41a4a7fcc4478a95150cb0f1a6d0/slackify-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8074187898c9a24c034fa0e61bb9434a280347be76485c17bb123e173ebb0fc5",
          "md5": "4bb62b77b723f12f8162908461e882b7",
          "sha256": "1d08c889f8865f8a2651807b1e8369928f9346faae051afe66b5118e61a94cc5"
        },
        "downloads": -1,
        "filename": "slackify-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4bb62b77b723f12f8162908461e882b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8076,
        "upload_time": "2020-05-01T18:37:10",
        "upload_time_iso_8601": "2020-05-01T18:37:10.742848Z",
        "url": "https://files.pythonhosted.org/packages/80/74/187898c9a24c034fa0e61bb9434a280347be76485c17bb123e173ebb0fc5/slackify-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef7e435a45edaa6a9b12625d5b484578b09ec4275b071517a686c83be3c068bc",
          "md5": "ee0d609c6674ca1786a9605538606239",
          "sha256": "3f6afc951d65893d0f755723484ad39a6ac8ba8bb3b2d4f322b27c11fadca43b"
        },
        "downloads": -1,
        "filename": "slackify-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee0d609c6674ca1786a9605538606239",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22240,
        "upload_time": "2020-05-03T22:36:38",
        "upload_time_iso_8601": "2020-05-03T22:36:38.941950Z",
        "url": "https://files.pythonhosted.org/packages/ef/7e/435a45edaa6a9b12625d5b484578b09ec4275b071517a686c83be3c068bc/slackify-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb800c7f3fe963aa53ae4c67ccbef99a4d186787f07c712401b724851ba488e1",
          "md5": "a5daab7ba34888974356048653c007bb",
          "sha256": "2836059bdbc2cbc6cfcb27a0013145dbfd8e35412f2249f405d7fbe5ee7555d9"
        },
        "downloads": -1,
        "filename": "slackify-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a5daab7ba34888974356048653c007bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12028,
        "upload_time": "2020-05-03T22:36:41",
        "upload_time_iso_8601": "2020-05-03T22:36:41.896333Z",
        "url": "https://files.pythonhosted.org/packages/fb/80/0c7f3fe963aa53ae4c67ccbef99a4d186787f07c712401b724851ba488e1/slackify-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32f69e10266940c18cbb2a91f2daf62c2b93e382ee5e7e08f3b795f89d3e0092",
          "md5": "6b8d3a7efeb9bdcca3a7b238d4b0e577",
          "sha256": "70dbf1147e8f7613835d1a6abcc44cc802f26fc4b9d86308f4ef1700bd39f75b"
        },
        "downloads": -1,
        "filename": "slackify-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b8d3a7efeb9bdcca3a7b238d4b0e577",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22683,
        "upload_time": "2020-05-25T01:11:43",
        "upload_time_iso_8601": "2020-05-25T01:11:43.003932Z",
        "url": "https://files.pythonhosted.org/packages/32/f6/9e10266940c18cbb2a91f2daf62c2b93e382ee5e7e08f3b795f89d3e0092/slackify-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d1a630d520efe493d919adcf6d2439011d88f8869939271671881c94d07a7de",
          "md5": "5eab2e5e3c5e4b5eb84c999f2dad16db",
          "sha256": "38ca95f3857d0a612a0a1eeb3242bce54e6d14302b794861fa2f2f86339da265"
        },
        "downloads": -1,
        "filename": "slackify-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5eab2e5e3c5e4b5eb84c999f2dad16db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22708,
        "upload_time": "2020-05-25T02:07:04",
        "upload_time_iso_8601": "2020-05-25T02:07:04.761086Z",
        "url": "https://files.pythonhosted.org/packages/9d/1a/630d520efe493d919adcf6d2439011d88f8869939271671881c94d07a7de/slackify-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34a3a2407f8b9fe77e167c1f99d70d40e509615ceb14a102de407554d2a8792c",
          "md5": "c3fafc838bd9e6192811e9164b40796d",
          "sha256": "9d924cfe2c2f60d80a3ee6f7715ec4487983b8170c46c490ece267f86fb8b37d"
        },
        "downloads": -1,
        "filename": "slackify-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3fafc838bd9e6192811e9164b40796d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14230,
        "upload_time": "2020-05-25T02:07:06",
        "upload_time_iso_8601": "2020-05-25T02:07:06.579636Z",
        "url": "https://files.pythonhosted.org/packages/34/a3/a2407f8b9fe77e167c1f99d70d40e509615ceb14a102de407554d2a8792c/slackify-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d123d4777efbc38f6b19671112c7e0f9ce41e368075f629beb13fe10f3421f",
          "md5": "f40f6508ce8a21a8c9249ee1231161bd",
          "sha256": "3941780f82e9a5053a8571c4506eea3010cd7b1671ca701b36cff834c2023605"
        },
        "downloads": -1,
        "filename": "slackify-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f40f6508ce8a21a8c9249ee1231161bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38746,
        "upload_time": "2020-07-09T02:31:54",
        "upload_time_iso_8601": "2020-07-09T02:31:54.935436Z",
        "url": "https://files.pythonhosted.org/packages/15/d1/23d4777efbc38f6b19671112c7e0f9ce41e368075f629beb13fe10f3421f/slackify-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5e57b2edb26ce7bdc5337d3c5dd4b71b8902fec827bfa24f576f417e4cfcf65",
          "md5": "27c841115592c69e6be98e3df11c3d57",
          "sha256": "bdcf1f85f083a216f10a4821ccd18447d72e4ec9612e62862520b26cdc944edc"
        },
        "downloads": -1,
        "filename": "slackify-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27c841115592c69e6be98e3df11c3d57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16633,
        "upload_time": "2020-07-09T02:31:56",
        "upload_time_iso_8601": "2020-07-09T02:31:56.642140Z",
        "url": "https://files.pythonhosted.org/packages/b5/e5/7b2edb26ce7bdc5337d3c5dd4b71b8902fec827bfa24f576f417e4cfcf65/slackify-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15d123d4777efbc38f6b19671112c7e0f9ce41e368075f629beb13fe10f3421f",
        "md5": "f40f6508ce8a21a8c9249ee1231161bd",
        "sha256": "3941780f82e9a5053a8571c4506eea3010cd7b1671ca701b36cff834c2023605"
      },
      "downloads": -1,
      "filename": "slackify-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f40f6508ce8a21a8c9249ee1231161bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 38746,
      "upload_time": "2020-07-09T02:31:54",
      "upload_time_iso_8601": "2020-07-09T02:31:54.935436Z",
      "url": "https://files.pythonhosted.org/packages/15/d1/23d4777efbc38f6b19671112c7e0f9ce41e368075f629beb13fe10f3421f/slackify-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5e57b2edb26ce7bdc5337d3c5dd4b71b8902fec827bfa24f576f417e4cfcf65",
        "md5": "27c841115592c69e6be98e3df11c3d57",
        "sha256": "bdcf1f85f083a216f10a4821ccd18447d72e4ec9612e62862520b26cdc944edc"
      },
      "downloads": -1,
      "filename": "slackify-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "27c841115592c69e6be98e3df11c3d57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16633,
      "upload_time": "2020-07-09T02:31:56",
      "upload_time_iso_8601": "2020-07-09T02:31:56.642140Z",
      "url": "https://files.pythonhosted.org/packages/b5/e5/7b2edb26ce7bdc5337d3c5dd4b71b8902fec827bfa24f576f417e4cfcf65/slackify-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}