{
  "info": {
    "author": "Jan Seifert",
    "author_email": "jan.seifert@fotkyzcest.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "async-rpc\n=========\n\nNon-blocking XML-RPC client for Python. Provides base classes\n``async_rpc.BaseSerializer`` and ``async_rpc.BaseServerProxy``,\nyou can write your own implementation of RPC (JSON RPC, …).\n\nUsage\n-----\n\n.. code-block:: python\n\n    from async_rpc import XmlRpcServerProxy\n\n    async def get_data():\n        proxy = XmlRpcServerProxy('http://example.com/RPC2:8000')\n        response = await proxy.methodName(123, 456)\n        return response\n\nAPI documentation\n-----------------\n\n*class* async_rpc.\\ **BaseRpcServerProxy**\\ (*uri, timeout=None,\nmax_clients=None, user_agent=None, use_dns_cache=None, ttl_dns_cache=None,\nhttp_version=None, keepalive_timeout=None, \\*\\*kwargs*)\n\nBase class for server proxies. It is responsible for HTTP transport. For\nconcrete RPC implementation uses descendant of the *BaseSerializer*.\n\n- **uri** (*str*) – URL of the remote server\n- **timeout** (*float*) – timeout in seconds for network operations,\n  includes DNS requests, default is 1.0 seconds.\n- **max_clients** (*int*) – size of the connections pool,\n  default is 16 connections.\n- **user_agent** (*str*) – user agent which is sent to server,\n  default is ``\"Python async-rpc\"``.\n- **use_dns_cache** (*bool*) – use internal cache for DNS lookups,\n  default is ``True``.\n- **ttl_dns_cache** (*float*) – store DNS lookups into internal cache\n  for a *ttl_dns_cache* seconds, default is 10.0 seconds.\n- **http_version** (*str*) – version of the HTTP protocol, can be\n  ``\"1.0\"`` or ``\"1.1\"``, default is ``\"1.0\"``.\n- **keepalive_timeout** (*float*) – close connection after *keepalive_timeout*\n  seconds, if ``None``, keep-alive is disabled, default is ``None``.\n- **kwargs**  (*dict*) – additional keyword arguments, which will be passed\n  into serializer constructor.\n\n*attribute* async_rpc.BaseRpcServerProxy.\\ **serializer_cls**\n(*BaseSerializer*) – serializer class\n\n*coroutine* async_rpc.BaseRpcServerProxy.\\ **call**\\ (*name, \\*\\*params*)\n\n- **name** (*str*) – mame of the remote function.\n- **params**  (*dict*) – parameters, which will be passed to remote function.\n\nInstance of the **BaseServerProxy** is callable, so you can call remote\nfunction directly on server proxy instance. These calls are equivalent:\n\n.. code-block:: python\n\n    res = await proxy.getData('12345678901234567890')\n    res = await proxy.call('getData', '12345678901234567890')\n\n\n*class* async_rpc.\\ **BaseSerializer**\\ (*\\*\\*kwargs*)\n\nAncestor for concrete implementation of RPC. Contains four abstract methods,\nwhich must be overriden in inherited classes.\n\n- *kwargs* (*dict*) – additional keyword arguments, which are passed from\n  server proxy.\n\n*method* async_rpc.BaseSerializer.\\ **initialize**\\ (*\\*\\*kwargs*)\n\nInitialize instance. It is called from constructor when instance is\ncreated.\n\n- **kwargs** (*dict*) – additional keyword arguments, which are passed from\n  server proxy.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **prepare_request_headers**\\ (\n*params*)\n\nReturn ``dict`` containig HTTP headers. Method is called before RPC call\nis sent. You can add additional HTTP header, which are be sent in request\nto remote server.\n\n- **params** (*tuple*) – params for RPC call.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **dumps**\\ (*response_headers*)\n\nReturn data, which will be sent as POST body in request to remote\nserver. Method is called before RPC call is sent.\n\n- **params** (*tuple*) – params for RPC call.\n- **menthodname** (*str*) – name of the RPC method.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **process_response_headers**\\ (\n*response_headers*)\n\nCheck headers from response. Method is called after response is\nreceived from server.\n\n- **response_headers** (*Mapping*) – mapping containing response\n  HTTP headers.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **loads**\\ (*data,\nresponse_headers*)\n\nReturn response from remote server as Python objects. Method is\ncalled after response is received from server.\n\n- **data** (*bytes*) – response body.\n- **response_headers** (*Mapping*) – mapping containing response\n  HTTP headers.\n\nLicense\n-------\n\n3-clause BSD",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seifert/async-rpc",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-rpc",
    "package_url": "https://pypi.org/project/async-rpc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/async-rpc/",
    "project_urls": {
      "Homepage": "https://github.com/seifert/async-rpc"
    },
    "release_url": "https://pypi.org/project/async-rpc/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Non-blocking XML-RPC client for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7697784,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db29622a36d24d37c05ec69ec176ccac13ca78bba55b37d1f9e07d722039ee31",
          "md5": "bbaa684cbe538721d993bdaf5dfadcb1",
          "sha256": "4a6b57196ff08300744b7ce7ddffd05df4fdd254f1ca4946a2c5b460c4ebda15"
        },
        "downloads": -1,
        "filename": "async-rpc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbaa684cbe538721d993bdaf5dfadcb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4917,
        "upload_time": "2020-05-19T14:24:42",
        "upload_time_iso_8601": "2020-05-19T14:24:42.607842Z",
        "url": "https://files.pythonhosted.org/packages/db/29/622a36d24d37c05ec69ec176ccac13ca78bba55b37d1f9e07d722039ee31/async-rpc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db29622a36d24d37c05ec69ec176ccac13ca78bba55b37d1f9e07d722039ee31",
        "md5": "bbaa684cbe538721d993bdaf5dfadcb1",
        "sha256": "4a6b57196ff08300744b7ce7ddffd05df4fdd254f1ca4946a2c5b460c4ebda15"
      },
      "downloads": -1,
      "filename": "async-rpc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bbaa684cbe538721d993bdaf5dfadcb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4917,
      "upload_time": "2020-05-19T14:24:42",
      "upload_time_iso_8601": "2020-05-19T14:24:42.607842Z",
      "url": "https://files.pythonhosted.org/packages/db/29/622a36d24d37c05ec69ec176ccac13ca78bba55b37d1f9e07d722039ee31/async-rpc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}