{
  "info": {
    "author": "James Cussens",
    "author_email": "james.cussens@york.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python implementation of GOBNILP\n\nThe Python implementation of GOBNILP is a program that uses Gurobi to\nlearn Bayesian network structure from either complete discrete data or\ncomplete continuous data or precomputed local scores.\n\nThe Python implementation has benefited from work done by Josh Neil on\ncomputing BDeu local scores from discrete data and from work done by\nMatt Horder on BGe scoring. In both cases this work was done as a\nfinal-year BEng project at the University of York.\n\nFor full details on GOBNILP (including the C version), please consult\nthe GOBNILP page:\n\nhttps://www.cs.york.ac.uk/aig/sw/gobnilp/\n\n# Running GOBNILP\n\nTo use the Python implementation of GOBNILP it is assumed that you\nhave Anaconda Python installed as well as Gurobi. One easy way to\nachieve this is to install both using [these\ninstructions](https://www.gurobi.com/get-anaconda/) provided by\nGurobi. You also need to install the numba and pygraphviz Python packages (this be done easily using\nConda). pygraphviz requires [GraphViz](http://www.graphviz.org/) to be installed.\nOnce you have done all this you just need to grab the Python files\nin this git repo and you are good to go.\n\nHere are some example of running the Python implementation using the command line\nscript rungobnilp.py and \ndata files in the data directory. The discrete data\nfiles have the following format: the first line gives the names of the\nvariables, the second line gives the arity of each variable (i.e. how\nmany values each can take) and the remaining lines are the data\nvalues. Values are separated by spaces.\n\nRunning with default settings:  \n\n`python rungobnilp.py data/asia_10000.dat`\n\nFinding the 4 best BNs (with the default limit, 3, on the size of\nparent sets):\n\n`python rungobnilp.py --nopruning --kbest --nsols 4 data/asia_10000.dat`\n\nFinding the 4 best BNs (with the default limit, 3, on the size of\nparent sets) and where only one BN for each Markov equivalence class\nis allowed:\n\n`python rungobnilp.py --nopruning --mec --kbest --nsols 4 data/asia_10000.dat`\n\nFinding the 4 best BNs with no limit on parent set size and where only\none BN for each Markov equivalence class is allowed:\n\n`python rungobnilp.py --nopruning --mec --kbest --nsols 4 --palim 999 data/asia_10000.dat`\n\nIn the examples above where the goal was to find the 'k best' BNs\n(subject to various constraints), it was necessary to use\n'--nopruning', to turn off pruning. When pruning is used (which is the\ndefault behaviour) then parent sets for BN variables which cannot\noccur in an optimal BN are removed, which typically greatly reduces\nthe size of the problem and speeds up learning.  However, when we seek\nnot just an optimal BN but also sub-optimal ones then pruning must be\nturned off to ensure correct results.\n\n\nThe limit on parent set size is an important parameter. Note that its\ndefault value is 3. Raising this value will slow down learning but may\nlead to a higher scoring BN. For example, doing `python\nrungobnilp.py --palim 4 data/alarm_100.dat` finds\na higher scoring network than using '--palim 3', and does not take too\nlong.  Raising to '--palim 5' finds a better (well, higher scoring)\nnetwork, but takes just under 100 seconds on my desktop.\n\nThe Python implementation of GOBNILP also learns Gaussian networks\nfrom continuous data using BGe scoring. To do this use '--score BGe'\non the command line. (The format for continuous data is similar to that\nfor discrete data except there is no line for arity.) For example\n\n`python rungobnilp.py --score BGe data/gaussian.dat`\n\nor, to find a higher scoring Gaussian network (with BGe score\n-53258.9402):\n\n`python rungobnilp.py --score BGe -p 4 data/gaussian.dat`\n\nThe file `gaussian.dat` is from bnlearn where it is called\n`guassian.test`. See the [bnlearn\npage](http://www.bnlearn.com/documentation/man/gaussian-test.html) for\nmore information. bnlearn's hillclimbing algorithm `hc` also finds an\noptimal network (i.e. with score -53258.9402) using this data. Good\nwork Marco!\n\n\nFor more details run:\n`python rungobnilp.py -h`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jamescussens/pygobnilp/",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygobnilp",
    "package_url": "https://pypi.org/project/pygobnilp/",
    "platform": "",
    "project_url": "https://pypi.org/project/pygobnilp/",
    "project_urls": {
      "Documentation": "https://pygobnilp.readthedocs.io/en/latest/",
      "Homepage": "https://bitbucket.org/jamescussens/pygobnilp/",
      "Source": "https://bitbucket.org/jamescussens/pygobnilp/"
    },
    "release_url": "https://pypi.org/project/pygobnilp/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Bayesian network learning with the Gurobi MIP solver",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6539410,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "462910c2db936e8e62dcf8adb505baa5dc030ccecea9bbe2a19d6b0d9092c16e",
          "md5": "b00890670f6236167c0193c27e50db42",
          "sha256": "6fe7aedc8b4b13b72281597b5b3e5abeba0766d2384c8e3f23a0bcde57709363"
        },
        "downloads": -1,
        "filename": "pygobnilp-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b00890670f6236167c0193c27e50db42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 51639,
        "upload_time": "2020-01-29T18:17:17",
        "upload_time_iso_8601": "2020-01-29T18:17:17.689025Z",
        "url": "https://files.pythonhosted.org/packages/46/29/10c2db936e8e62dcf8adb505baa5dc030ccecea9bbe2a19d6b0d9092c16e/pygobnilp-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "462910c2db936e8e62dcf8adb505baa5dc030ccecea9bbe2a19d6b0d9092c16e",
        "md5": "b00890670f6236167c0193c27e50db42",
        "sha256": "6fe7aedc8b4b13b72281597b5b3e5abeba0766d2384c8e3f23a0bcde57709363"
      },
      "downloads": -1,
      "filename": "pygobnilp-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b00890670f6236167c0193c27e50db42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 51639,
      "upload_time": "2020-01-29T18:17:17",
      "upload_time_iso_8601": "2020-01-29T18:17:17.689025Z",
      "url": "https://files.pythonhosted.org/packages/46/29/10c2db936e8e62dcf8adb505baa5dc030ccecea9bbe2a19d6b0d9092c16e/pygobnilp-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}