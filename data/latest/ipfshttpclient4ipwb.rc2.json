{
  "info": {
    "author": "py-ipfs-http-client team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Scientific/Engineering",
      "Topic :: System :: Filesystems",
      "Topic :: System :: Networking"
    ],
    "description": "# py-ipfs-http-client\n\n[![Made by the IPFS Community](https://img.shields.io/badge/made%20by-IPFS%20Community-blue.svg?style=flat-square)](https://docs.ipfs.io/community/)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](https://ipfs.io/)\n[![IRC #py-ipfs on chat.freenode.net](https://img.shields.io/badge/freenode%20IRC-%23py--ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23py-ipfs)\n[![Matrix #py-ipfs:ninetailed.ninja](https://img.shields.io/matrix/py-ipfs:ninetailed.ninja?color=blue&label=matrix+chat&style=flat-square)](https://matrix.to/#/#py-ipfs:ninetailed.ninja?via=ninetailed.ninja&via=librem.one)\n[![Standard README Compliant](https://img.shields.io/badge/standard--readme-OK-green.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![](https://img.shields.io/pypi/v/ipfshttpclient.svg?style=flat-square)](https://pypi.python.org/pypi/ipfshttpclient)\n[![Build Status](https://travis-ci.org/ipfs/py-ipfs-http-client.svg?branch=master)](https://travis-ci.org/ipfs/py-ipfs-http-client)\n\n![Python IPFS HTTP Client Library](https://ipfs.io/ipfs/QmQJ68PFMDdAsgCZvA1UVzzn18asVcf7HVvCDgpjiSCAse)\n\nCheck out [the HTTP Client reference](https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/docs/) for the full command reference.\n\n**Important:** The `ipfsapi` PIP package and Python module have both been renamed to `ipfshttpclient`!\nSee the [relevant section of the README](#important-changes-from-ipfsapi-04x) for details.\n\n**Note:** This library occasionally has to change to stay compatible with the IPFS HTTP API.\nCurrently, this library is tested against [go-ipfs v0.5.0](https://github.com/ipfs/go-ipfs/releases/tag/v0.5.0-rc2).\nWe strive to support the last 5 releases of go-IPFS at any given time; go-IPFS v0.4.21 therefore\nbeing to oldest supported version at this time (version 0.4.20 was never supported due to major\nissues in the daemon itself).\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Documentation](#documentation)\n  - [Important changes from ipfsapi 0.4.x](#important-changes-from-ipfsapi-04x)\n- [Featured Projects](#featured-projects)\n- [Contribute](#contribute)\n  - [IRC](#irc)\n  - [Bug reports](#bug-reports)\n  - [Pull requests](#pull-requests)\n- [License](#license)\n\n## Install\n\nInstall with pip:\n\n```sh\npip install ipfshttpclient\n```\n\n## Development install from Source\n\n```sh\n# Clone the source repository\ngit clone https://github.com/ipfs/py-ipfs-http-client.git\ncd py-ipfs-http-client\n\n# Link ipfs-api-client into your Python Path\nflit install --pth-file\n```\n\n## Usage\n\nBasic use-case (requires a running instance of IPFS daemon):\n\n```py\n>>> import ipfshttpclient\n>>> client = ipfshttpclient.connect('/ip4/127.0.0.1/tcp/5001/http')\n>>> res = client.add('test.txt')\n>>> res\n{'Hash': 'QmWxS5aNTFEc9XbMX1ASvLET1zrqEaTssqt33rVZQCQb22', 'Name': 'test.txt'}\n>>> client.cat(res['Hash'])\n'fdsafkljdskafjaksdjf\\n'\n```\n\n*Please note*: You should specify the address for an IPFS *API server*, using the address of a *gateway* (such as the public `ipfs.io` one at `/dns/ipfs.io/tcp/443/https`) will only give you [extremely limited access](https://github.com/ipfs/go-ipfs/blob/master/docs/gateway.md#read-only-api) and may not work at all. If you are only interested in downloading IPFS content through public gateway servers then this library is unlikely of being of much help.\n\nFor real-world scripts you can reuse TCP connections using a context manager or manually closing the session after use:\n\n```py\nimport ipfshttpclient\n\n# Share TCP connections using a context manager\nwith ipfshttpclient.connect() as client:\n\thash = client.add('test.txt')['Hash']\n\tprint(client.stat(hash))\n\n# Share TCP connections until the client session is closed\nclass SomeObject:\n\tdef __init__(self):\n\t\tself._client = ipfshttpclient.connect(session=True)\n\n\tdef do_something(self):\n\t\thash = self._client.add('test.txt')['Hash']\n\t\tprint(self._client.stat(hash))\n\n\tdef close(self):  # Call this when your done\n\t\tself._client.close()\n```\n\nAdministrative functions:\n\n```py\n>>> client.id()\n{'Addresses': ['/ip4/127.0.0.1/tcp/4001/ipfs/QmS2C4MjZsv2iP1UDMMLCYqJ4WeJw8n3vXx1VKxW1UbqHS',\n               '/ip6/::1/tcp/4001/ipfs/QmS2C4MjZsv2iP1UDMMLCYqJ4WeJw8n3vXx1VKxW1UbqHS'],\n 'AgentVersion': 'go-ipfs/0.4.10',\n 'ID': 'QmS2C4MjZsv2iP1UDMMLCYqJ4WeJw8n3vXx1VKxW1UbqHS',\n 'ProtocolVersion': 'ipfs/0.1.0',\n 'PublicKey': 'CAASpgIwgg ... 3FcjAgMBAAE='}\n```\n\nPass in API options:\n\n```py\n>>> client.pin.ls(type='all')\n{'Keys': {'QmNMELyizsfFdNZW3yKTi1SE2pErifwDTXx6vvQBfwcJbU': {'Count': 1,\n                                                             'Type': 'indirect'},\n          'QmNQ1h6o1xJARvYzwmySPsuv9L5XfzS4WTvJSTAWwYRSd8': {'Count': 1,\n                                                             'Type': 'indirect'},\n          …\n```\n\nAdd a directory and match against a filename pattern:\n\n```py\n>>> client.add('photos', pattern='*.jpg')\n[{'Hash': 'QmcqBstfu5AWpXUqbucwimmWdJbu89qqYmE3WXVktvaXhX',\n  'Name': 'photos/photo1.jpg'},\n {'Hash': 'QmSbmgg7kYwkSNzGLvWELnw1KthvTAMszN5TNg3XQ799Fu',\n  'Name': 'photos/photo2.jpg'},\n {'Hash': 'Qma6K85PJ8dN3qWjxgsDNaMjWjTNy8ygUWXH2kfoq9bVxH',\n  'Name': 'photos/photo3.jpg'}]\n```\n\nOr add a directory recursively:\n\n```py\n>>> client.add('fake_dir', recursive=True)\n[{'Hash': 'QmQcCtMgLVwvMQGu6mvsRYLjwqrZJcYtH4mboM9urWW9vX',\n  'Name': 'fake_dir/fsdfgh'},\n {'Hash': 'QmNuvmuFeeWWpxjCQwLkHshr8iqhGLWXFzSGzafBeawTTZ',\n  'Name': 'fake_dir/test2/llllg'},\n {'Hash': 'QmX1dd5DtkgoiYRKaPQPTCtXArUu4jEZ62rJBUcd5WhxAZ',\n  'Name': 'fake_dir/test2'},\n {'Hash': 'Qmenzb5J4fR9c69BbpbBhPTSp2Snjthu2hKPWGPPJUHb9M',\n  'Name': 'fake_dir'}]\n```\n\nThis module also contains some helper functions for adding strings and JSON to IPFS:\n\n```py\n>>> lst = [1, 77, 'lol']\n>>> client.add_json(lst)\n'QmQ4R5cCUYBWiJpNL7mFe4LDrwD6qBr5Re17BoRAY9VNpd'\n>>> client.get_json(_)\n[1, 77, 'lol']\n```\n\nUse an IPFS server with basic auth (replace username and password with real creds):\n\n```py\n>>> import ipfshttpclient\n>>> api = ipfshttpclient.connect('/dns/ipfs-api.example.com/tcp/443/https', username=\"foo\", password=\"bar\")\n```\n\nPass custom headers to your IPFS api with each request:\n```py\n>>> import ipfshttpclient\n>>> headers = {\"CustomHeader\": \"foobar\"}\n>>> api = ipfshttpclient.connect('/dns/ipfs-api.example.com/tcp/443/https', headers=headers)\n```\n\n\n\n## Documentation\n\nDocumentation (currently mostly API documentation unfortunately) is available on IPFS:\n\nhttps://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/docs/\n\nThe `ipfs` [command-line Client documentation](https://ipfs.io/docs/commands/) may also be useful in some cases.\n\n### Important changes from `ipfsapi 0.4.x`\n\n * Tons of methods has been renamed, ensure that you code runs without warnings with the last version of `ipfsapi` before attempting to upgrade!\n * The Python package has been renamed from `ipfsapi` to `ipfshttpclient`\n * The PIP module has been renamed from `ipfsapi` to `ipfshttpclient` (please update your requirement files)\n * The `client.*_pyobj` family of functions has been dropped due to security concerns\n * The `client.bitswap.unwant` method has been dropped – it's endpoint has been removed by *go-ipfs*\n * The `client.files.file_ls` method has been dropped – deprecated for a long time, use `client.ls` instead\n * Passing a list of parameters to `client.add` will now fail, just pass several individual parameters instead\n * Some functions that may also return multiple items, will now also return a list when returning only a single item (don't worry about it unless it actually breaks for you)\n * The API deamon location is now described using Multiaddr, hence rather then doing `ipfshttpclient.connect(host, port)` to pass the network address parameters, use:\n    * `ipfshttpclient.connect(\"/dns/<host>/tcp/<port>/http\")` (for hostnames such as `localhost`)\n    * `ipfshttpclient.connect(\"/ip4/<IP-address>/tcp/<port>/http\")` (for IPv4 addresses)\n    * `ipfshttpclient.connect(\"/ip6/<IP-address>/tcp/<port>/http\")` (for IPv6 addresses)\n    * Use `…/https` rather then `…/http` to connect to the API deamon using HTTPS\n * The client now supports [keeping session contexts around between API calls](#usage), you probably should make use of this facility in your code\n\nThank you @AlibabasMerchant, @lordcirth and @radfish (in order of subjective contributions) for helping making this happen!\n\n## Featured Projects\n\nProjects that currently use py-ipfs-http-client. If your project isn't here, feel free to submit a PR to add it!\n\n- [git-remote-ipfs](https://github.com/larsks/git-remote-ipfs) allows users to push and pull git repositories from the IPFS network.\n- [InterPlanetary Wayback](https://github.com/oduwsdl/ipwb) interfaces web archive ([WARC](https://www.iso.org/standard/44717.html)) files for distributed indexing and replay using IPFS.\n\n## Contribute\n\n### Chat (IRC/Matrix)\n\nYou can find us on [#py-ipfs on chat.freenode.org](http://webchat.freenode.net/?channels=%23py-ipfs) or in our [Matrix chat room](https://matrix.to/#/#py-ipfs:ninetailed.ninja?via=ninetailed.ninja&via=librem.one). Oin us if you have any suggestions, questions or if you just want to discuss IPFS and Python in general.\n\nPlease note that the channel is not monitored all the time and hence you may only receive a reply to your message later that day. Using Matrix makes it easier to stay connected in the background, so please prefer the Matrix option or use an IRC bouncer.\n\n### Bug reports\n\nYou can submit bug reports using the [GitHub issue tracker](https://github.com/ipfs/py-ipfs-http-client/issues).\n\n### Pull requests\n\nPull requests are welcome.  Before submitting a new pull request, please\nmake sure that your code passes both the [code formatting](https://www.python.org/dev/peps/pep-0008/) check:\n\n    $ tox -e codestyle\n\nAnd the unit tests:\n\n    $ tox\n\nYou can arrange to run the code style tests automatically before each commit by\ninstalling a `pre-commit` hook:\n\n    $ ./tools/pre-commit --install\n\nPlease make sure to include new unit tests for new features or changes in\nbehavior. We aim to bring coverage to 100% at some point.\n\n## License\n\nThis code is distributed under the terms of the [MIT license](https://opensource.org/licenses/MIT).  Details can be found in the file\n[LICENSE](LICENSE) in this repository.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/",
    "keywords": "ipfs storage distribution development",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ipfshttpclient4ipwb",
    "package_url": "https://pypi.org/project/ipfshttpclient4ipwb/",
    "platform": "",
    "project_url": "https://pypi.org/project/ipfshttpclient4ipwb/",
    "project_urls": {
      "Documentation": "https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/docs/",
      "Homepage": "https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/"
    },
    "release_url": "https://pypi.org/project/ipfshttpclient4ipwb/0.6.0/",
    "requires_dist": [
      "multiaddr (>=0.0.7)",
      "requests (>=2.11)"
    ],
    "requires_python": ">=3.7",
    "summary": "Python IPFS HTTP CLIENT library",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7552013,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f270662ae37bfc6172a4bb96f66241d0886a1025833c2fe5168748078f0ab2da",
          "md5": "c5bc886e5206e0d74c9076b505b5d285",
          "sha256": "398bf994be425ea08e08c3f1b059e6efae7eb0791f86d0ac01f9fa3239227875"
        },
        "downloads": -1,
        "filename": "ipfshttpclient4ipwb-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5bc886e5206e0d74c9076b505b5d285",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 66256,
        "upload_time": "2020-06-18T19:09:48",
        "upload_time_iso_8601": "2020-06-18T19:09:48.384105Z",
        "url": "https://files.pythonhosted.org/packages/f2/70/662ae37bfc6172a4bb96f66241d0886a1025833c2fe5168748078f0ab2da/ipfshttpclient4ipwb-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c61683830efe2695f38da4c89d40649d632c083ff349813d37a609ca5dac9e28",
          "md5": "cd90ffccd6913b4ddbe89b944cacda13",
          "sha256": "12255bdf2f2ffd8b58760c9028a94ff0ce93f592dc35224c4bc4586f87d10d14"
        },
        "downloads": -1,
        "filename": "ipfshttpclient4ipwb-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cd90ffccd6913b4ddbe89b944cacda13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 92121,
        "upload_time": "2020-06-18T19:09:51",
        "upload_time_iso_8601": "2020-06-18T19:09:51.104247Z",
        "url": "https://files.pythonhosted.org/packages/c6/16/83830efe2695f38da4c89d40649d632c083ff349813d37a609ca5dac9e28/ipfshttpclient4ipwb-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef5ea0d79b6db8d6e20d0dde9997c159974d58a877166ee3ec988a67780e3fc0",
          "md5": "8220078e5a251ad0714c8ec04f5f24de",
          "sha256": "37a8609037bc29a8f8ca04f7d246f82873fb8bef47ccb49fc796a226eb9ecff1"
        },
        "downloads": -1,
        "filename": "ipfshttpclient4ipwb-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8220078e5a251ad0714c8ec04f5f24de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66255,
        "upload_time": "2020-06-24T13:53:32",
        "upload_time_iso_8601": "2020-06-24T13:53:32.596532Z",
        "url": "https://files.pythonhosted.org/packages/ef/5e/a0d79b6db8d6e20d0dde9997c159974d58a877166ee3ec988a67780e3fc0/ipfshttpclient4ipwb-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b599e063fd3833180afeb446bb5110187138d42d4f7fb1e25c434e8a9413a67b",
          "md5": "a9d8191ac0f74ccc5922007de7b6c089",
          "sha256": "2d0a349df35a7ae37fe1001f3b19260a65faf5fdb39cd945e71ba33a7c0dedf9"
        },
        "downloads": -1,
        "filename": "ipfshttpclient4ipwb-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9d8191ac0f74ccc5922007de7b6c089",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 92130,
        "upload_time": "2020-06-24T13:53:34",
        "upload_time_iso_8601": "2020-06-24T13:53:34.127848Z",
        "url": "https://files.pythonhosted.org/packages/b5/99/e063fd3833180afeb446bb5110187138d42d4f7fb1e25c434e8a9413a67b/ipfshttpclient4ipwb-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef5ea0d79b6db8d6e20d0dde9997c159974d58a877166ee3ec988a67780e3fc0",
        "md5": "8220078e5a251ad0714c8ec04f5f24de",
        "sha256": "37a8609037bc29a8f8ca04f7d246f82873fb8bef47ccb49fc796a226eb9ecff1"
      },
      "downloads": -1,
      "filename": "ipfshttpclient4ipwb-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8220078e5a251ad0714c8ec04f5f24de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 66255,
      "upload_time": "2020-06-24T13:53:32",
      "upload_time_iso_8601": "2020-06-24T13:53:32.596532Z",
      "url": "https://files.pythonhosted.org/packages/ef/5e/a0d79b6db8d6e20d0dde9997c159974d58a877166ee3ec988a67780e3fc0/ipfshttpclient4ipwb-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b599e063fd3833180afeb446bb5110187138d42d4f7fb1e25c434e8a9413a67b",
        "md5": "a9d8191ac0f74ccc5922007de7b6c089",
        "sha256": "2d0a349df35a7ae37fe1001f3b19260a65faf5fdb39cd945e71ba33a7c0dedf9"
      },
      "downloads": -1,
      "filename": "ipfshttpclient4ipwb-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a9d8191ac0f74ccc5922007de7b6c089",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 92130,
      "upload_time": "2020-06-24T13:53:34",
      "upload_time_iso_8601": "2020-06-24T13:53:34.127848Z",
      "url": "https://files.pythonhosted.org/packages/b5/99/e063fd3833180afeb446bb5110187138d42d4f7fb1e25c434e8a9413a67b/ipfshttpclient4ipwb-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}