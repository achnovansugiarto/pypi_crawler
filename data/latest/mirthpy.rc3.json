{
  "info": {
    "author": "Clayton Feathers",
    "author_email": "claytonfeathers@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Healthcare Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mirthpy\r\nPython api wrapper for Mirth Connect\r\n\r\n> **_NOTE:_**  This api wrapper is not totally complete with all of Mirth's REST api calls. If you have a request for a specific api call, please make an issue on GitHub.\r\n\r\n#### Table of Contents\r\n[Installation](#Installation)\r\n\r\n[Setup](#Setup)\r\n\r\n[Usage](#Usage)\r\n\r\n[Supported Mirth API Calls](#SupportedCalls)\r\n\r\n## Installation\r\n<a name=\"Installation\"></a>\r\n\r\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install mirthpy.\r\n\r\n```bash\r\npip install mirthpy\r\n```\r\n\r\n<a name=\"Setup\"></a>\r\n## Setup\r\nConfig file must match the following: \r\n```sh\r\n{\r\n    \"instanceName\": \"{instance IP or DNS Name}\",\r\n    \"credentials\": {\r\n        \"username\": \"{username}\", \r\n        \"password\": \"{password}\"\r\n    }\r\n}\r\n```\r\n\r\nalternatively you can provide the mirth instance (ip or domain name) and user/pass combo\r\n\r\n\r\n```sh\r\nservice = MirthService(username=\"{username}\", password=\"{password}\", instance=\"{mirthInstance}\")\r\n```\r\n<a name=\"Usage\"></a>\r\n## Usage\r\n\r\n```python\r\nimport json\r\nimport mirthpy\r\nimport urllib3\r\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) #to supress ssl warning\r\n\r\nconfig = json.load(open('config.json'))\r\n\r\nservice = MirthService(config)\r\nservice.open()  # to login and initialize any service variables\r\n\r\n# Get channel names\r\nnamesAndIds = service.getChannelIdsAndNames()\r\nfor ni in namesAndIds.entry:\r\n    print(f\"{ni.string[1]} - {ni.string[0]}\") # channelName - channelId\r\n\r\n# Get Id by name\r\nid = service.getChannelIdByName('Test Channel')\r\n\r\nchannel = service.getChannel(id)\r\n\r\nprint(channel.name)\r\nprint(channel.description)\r\nprint(channel.sourceConnector.transformer)\r\n\r\nif type(channel.sourceConnector.properties) == JavaScriptReceiverProperties:\r\n    # do stuff we'd know only a javascript reader would have\r\n    script = channel.sourceConnector.properties.script\r\n\r\n# Get multiple channels\r\nchannelIds = [\"44dacc20-718a-490c-bfcf-82355ed9209d\", \"3bb08639-7725-4b1b-a2ac-13687101fe9b\"]\r\nc = service.getChannels(channelIds)\r\n\r\nfor channel in c.channels: print(channel.name)\r\n\r\n\r\n# Get all channels\r\nchannels = service.getChannels()\r\n\r\nfor channel in channels.channels:\r\n    print(f\"{channel.name} - {channel.description}\")\r\n\r\n\r\n# get all enabled channels\r\nenabledChannels = [channel for channel in channels.channels if channel.exportData.metadata.enabled == 'true']\r\n\r\n# get only javascript readers\r\njReaders = [channel for channel in enabledChannels if type(channel.sourceConnector.properties) == JavaScriptReceiverProperties]\r\n\r\n# get certain code templates\r\ncodeTemplates = service.getCodeTemplates(['0d42f17b-54a4-40c1-8e7b-b43c3eb1b433', '37139e86-88db-41fa-bf80-8c08456caa10'])\r\n\r\nfor ct in codeTemplates.codeTemplates:\r\n    print(f\"{ct.name} - {ct.id}\")\r\n\r\n# get all code templates\r\ncodeTemplates = service.getCodeTemplates()\r\n\r\nfor ct in codeTemplates.codeTemplates:\r\n    print(f\"{ct.name} - {ct.id}\")\r\n    code = ct.properties.find('code').text\r\n\r\nservice.close() # to log out and close any service related objects\r\n```\r\n<a name=\"SupportedCalls\"></a>\r\n## Supported Mirth API Calls\r\n### Server\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /server/version` | `service.getVersion()` | Gets Mirth Instance version |\r\n| `POST /server/_generateGUID` | `service.getGUID()` | Gets Mirth specific GUID for ids |\r\n| `GET /server/time` | `service.getTime()` | Gets current Mirth Server time |\r\n| `GET /server/channelTags` | `service.getTags()` | Gets all tags |\r\n| `GET /server/configurationMap` | `service.getConfigurationMaps()` | Gets all configuration mappings |\r\n\r\n### Events\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `/events` | `service.getEvents(jsonParams)` | Gets mirth events, can specify what parameters to pass |\r\n\r\n### Channel\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `POST /channels` | `service.createChannel(channel)` | Creates a channel in mirth instance based on channel object |\r\n| `GET /channels` | `service.getChannels(channelIds, pollingOnly, includeCodeTemplates)` | Get all channels or certain channels in criteria |\r\n| `GET /channels/{channelId}` | `service.getChannel(channelId, includeCodeTemplates)` | Get a single channel |\r\n| `GET /channels/{channelId}` | `service.getChannel(channelId, includeCodeTemplates)` | Get a single channel |\r\n| `GET /channels/idsAndNames` | `service.getChannelIdsAndNames()` | Get all channel name and ids |\r\n| `GET /channels/idsAndNames` | `service.getChannelIdByName(name)` | Get only the channel id based on channel name |\r\n| `POST /channels/{channelId}/_stop` | `service.stopChannel(channelId)` | Stop specified channel |\r\n| `POST /channels/{channelId}/_start` | `service.startChannel(channelId)` | Start specified channel |\r\n\r\n### Channel Status\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /channels/statuses` | `service.getChannelStatus(channelIds, filter, includeUndeployed)` | Get Dashboard status of channels |\r\n\r\n### Code Template Calls\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /codeTemplates` | `service.getCodeTemplates(codeTemplateIds)` | Get all or some Code Templates  |\r\n\r\n### Message Calls\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /channels/{channelId}/messages` | `service.getMessages(channelId, limit, includeContent, offset, startDate, endDate, status)` | Get messages by channelId with filtering options  |\r\n| `GET /channels/{channelId}/messages/count` | `service.getMessageCount(channelId, startDate, endDate, status)` | Get messages count by channelId with filtering options  |\r\n\r\n### Channel Deployment\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `POST /channels/_deploy` | `service.deployChannels(channelIds, returnErrors)` | Deploy set of channels  |\r\n\r\n### Channel Statistics\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /channels/statistics` | `service.getChannelStatistics(channelIds, includeUndeployed, includeMetadataId, excludeMetaDataId, aggregateStates)` | Get Channel Statistics  |\r\n\r\n\r\n### Extensions (Commercial License)\r\n\r\n| Mirth API Route | mirthpy method | Description                |\r\n| :-------- | :------- | :------------------------- |\r\n| `GET /extensions/history/channels/{channelId}/snapshots` | `service.getChannelHistory(channelId)` | Get Channel History  |\r\n| `GET /extensions/history/channels/{channelId}/snapshots/{snapshotId}` | `service.getSnapshot(channelId, snapshotId)` | Get Channel History Snapshot  |\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/feathersct/mirthpy",
    "keywords": "",
    "license": "BSD 2-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mirthpy",
    "package_url": "https://pypi.org/project/mirthpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/mirthpy/",
    "project_urls": {
      "Homepage": "https://github.com/feathersct/mirthpy"
    },
    "release_url": "https://pypi.org/project/mirthpy/0.1.5/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "A python package to communicate with mirth connects client api.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17536619,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "571d90f86d53b8c65d8562c1c9bfa20b2a30234f865f00070d430bb650446042",
          "md5": "675c8b047fc5513961932ac44e050fd1",
          "sha256": "b7c993a9212dca53886469aec7540cf788f1f7921addd6ca627a2e119ed03c71"
        },
        "downloads": -1,
        "filename": "mirthpy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "675c8b047fc5513961932ac44e050fd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10997,
        "upload_time": "2022-08-10T15:39:24",
        "upload_time_iso_8601": "2022-08-10T15:39:24.766254Z",
        "url": "https://files.pythonhosted.org/packages/57/1d/90f86d53b8c65d8562c1c9bfa20b2a30234f865f00070d430bb650446042/mirthpy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ce657537e4c531fac9713da5f70018f1b0877b6392390cbe5d05b23964ffb6",
          "md5": "d2cf67b81ce9c1d5efdf49a51354679c",
          "sha256": "bed54f5ade9710496573329c65b4a9ce78ac06047a275d263eef075853a6263c"
        },
        "downloads": -1,
        "filename": "mirthpy-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d2cf67b81ce9c1d5efdf49a51354679c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11848,
        "upload_time": "2022-08-30T04:36:53",
        "upload_time_iso_8601": "2022-08-30T04:36:53.365459Z",
        "url": "https://files.pythonhosted.org/packages/30/ce/657537e4c531fac9713da5f70018f1b0877b6392390cbe5d05b23964ffb6/mirthpy-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c29b9e34e5f6794846ccde20a4a003a38aabd5a5f10bb097ffb924c39b29901",
          "md5": "2042ef9d7c0457d8bcb1d46019cee19c",
          "sha256": "48208369a27d287462f83f926f12fba110a82d29812fd7ac7e1f798d42149411"
        },
        "downloads": -1,
        "filename": "mirthpy-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2042ef9d7c0457d8bcb1d46019cee19c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40726,
        "upload_time": "2023-04-01T04:04:55",
        "upload_time_iso_8601": "2023-04-01T04:04:55.368577Z",
        "url": "https://files.pythonhosted.org/packages/5c/29/b9e34e5f6794846ccde20a4a003a38aabd5a5f10bb097ffb924c39b29901/mirthpy-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8829005256b589d10ab5f715cb3744fc71e2c0787ba23265f26194ec8461e437",
          "md5": "94cfa7781d1a99405cdbe34b50ec3e02",
          "sha256": "6bba9086d613893ea4fafe1a3602220647034ee664527bfcfa58a1d90d2f3c00"
        },
        "downloads": -1,
        "filename": "mirthpy-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "94cfa7781d1a99405cdbe34b50ec3e02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52210,
        "upload_time": "2023-04-01T04:04:57",
        "upload_time_iso_8601": "2023-04-01T04:04:57.410116Z",
        "url": "https://files.pythonhosted.org/packages/88/29/005256b589d10ab5f715cb3744fc71e2c0787ba23265f26194ec8461e437/mirthpy-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c29b9e34e5f6794846ccde20a4a003a38aabd5a5f10bb097ffb924c39b29901",
        "md5": "2042ef9d7c0457d8bcb1d46019cee19c",
        "sha256": "48208369a27d287462f83f926f12fba110a82d29812fd7ac7e1f798d42149411"
      },
      "downloads": -1,
      "filename": "mirthpy-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2042ef9d7c0457d8bcb1d46019cee19c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40726,
      "upload_time": "2023-04-01T04:04:55",
      "upload_time_iso_8601": "2023-04-01T04:04:55.368577Z",
      "url": "https://files.pythonhosted.org/packages/5c/29/b9e34e5f6794846ccde20a4a003a38aabd5a5f10bb097ffb924c39b29901/mirthpy-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8829005256b589d10ab5f715cb3744fc71e2c0787ba23265f26194ec8461e437",
        "md5": "94cfa7781d1a99405cdbe34b50ec3e02",
        "sha256": "6bba9086d613893ea4fafe1a3602220647034ee664527bfcfa58a1d90d2f3c00"
      },
      "downloads": -1,
      "filename": "mirthpy-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "94cfa7781d1a99405cdbe34b50ec3e02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52210,
      "upload_time": "2023-04-01T04:04:57",
      "upload_time_iso_8601": "2023-04-01T04:04:57.410116Z",
      "url": "https://files.pythonhosted.org/packages/88/29/005256b589d10ab5f715cb3744fc71e2c0787ba23265f26194ec8461e437/mirthpy-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}