{
  "info": {
    "author": "Joao Roberto Perin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Cobol Copybook JSONifier\n\n[CHANGELOG.md](https://github.com/jrperin/cobol-copybook.jsonifier/blob/master/CHANGELOG.md)\n\n----\n\n## What is that for?\n\nThe motivator for that was the necessity to transfer and process some data files from Mainframe on cloud in a easy way for cloud systems.\n\nThe main idea here is to convert files from Mainframe that was generated by cobol programs using copybooks into json's registry format.\n\nCobol copybooks are like data schemas for raw positional files.\n\nTo use the package you need:\n1. Extract a cobol copybook structure to generate a python dictionary. This dictionary contains objects neededs to build the parser.\n\n2. Build a Parser based on the previous copybook's struture extracted.The parser contains python objects that will handle each kind of data field in the Mainframe's file. That file could be eater EBCDI or ASCII.\n    > **Note:**  \n    > Types such as: `Binary` _(BINARY, COMP)_, `COMP3`, `Numeric Signed` _( S9(n) )_ are supported in EBCDIC type and needs to be transfer in binary mode from Mainframe.  \n    > ASCII mode suports formats like `PIC 9(n)`, `PIC X(n)` and Masked `PIC +99999.99`. These formats can be converted from EBCDIC to ASCII when transfered by FTP, Connect Dirct or other tools from mainframe to cloud or another platform.\n\n\n**These data lines parsed into json could be used to create events, call rest apis and what else you can imagine.**\n\n![coboljsonifier image](https://raw.githubusercontent.com/jrperin/cobol-copybook.jsonifier/master/docs/COBOL_JSONIFIER.png)\n\n----\n\n## Straight to the point\n\n[Take a look at that package on pypi.org](https://pypi.org/project/coboljsonifier/)\n\nInstalling the pagacke.\n\n``` bash\npip install coboljsonifier\n```\n\nUsing the package.\n``` python\n\nimport simplejson\nfrom coboljsonifier.copybookextractor import CopybookExtractor\nfrom coboljsonifier.parser import Parser\nfrom coboljsonifier.config.parser_type_enum import ParseType\n\n...\n\n# Extracting copybook structure\ndict_structure = CopybookExtractor(bookfname).dict_book_structure\n\n# Building a Parser\nparser = Parser(dict_structure, ParseType.BINARY_EBCDIC).build()\n\n...\n\n# Parsing the data\nparser.parse(data)\n\n# Getting the result (it is an dict type)\ndictvalue = parser.value\n\n# Showing the result as Json\nprint(simplejson.dumps(dictvalue))\n\n```\nThe result will be like that:\n\n``` json\n{\"DATA1-REGISTRY-TYPE\": 2, \"DATA1-COMPANY\": 4, \"DATA1-USER-ACCOUNT\": \"0040000000090001111\", \"DATA1-BIRTH-DATE\": \"1971-01-21\", \"DATA1-NAME\": \"JOHN ROBERT PERIN\", \"DATA1-CREDIT-LIMIT\": 1001, \"DATA1-LIMIT-USED\": -1000.10, \"DATA1-STATUS\": [{\"DATA1-STATUS-FLAG\": \"1\"}, {\"DATA1-STATUS-FLAG\": \"2\"}, {\"DATA1-STATUS-FLAG\": \"3\"}, {\"DATA1-STATUS-FLAG\": \"4\"}], \"FILLER-1\": null}\n```\n\n## Take a Look at Examples\n\nUse the script `examples/prepare_test.py` to generate files that will be used by test scripts.\n\nFiles generated:\n* `EBCDIC_BOOK.cob` & `EBCDIC_DATA.bin`\n* `ASCII_BOOK.cob` & `ASCII_DATA.bin`\n\nAfter that you can use scripts `examples/ascii_parser_test.py` and `examples/ebcdid_parser_test.py` to see how the coboljsonifier package works.\n\n**More details in [examples/README.md](https://raw.githubusercontent.com/jrperin/cobol-copybook.jsonifier/master/examples/README.md).**\n\n-----\n\n## Pre-requisites\n\n* To save in json formats is necessary to use <spam style=\"color:#009900\">`simplejson`</spam> package. It's to keep compatibility of `Decimal` pakage that is used to handle monetary values.\n* The common `json` library has incompatibility with Decimal values\n\n* Install `simplejson` just running `pip install simplejson`.\n* Use `simplejson` the same way of `json`. \n    > Ex.   \n    > `install simplejson as json`   \n    > It will keep compatibility with the main functionalities.\n\n-----\n\n## Local environment\n\n```bash\n$ python -m venv venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n\n```\n\n## Testing\n\n**Unit Tests:**\n``` bash\n# Running only the unittest\n$ python -m unittest discover\n\n# Checking test coveraging\n$ coverage run -m unittest discover\n$ coverage report -m\n$ coverage html\n```\n\n\n## Apopendix\n\nTable of types treated by CobolJsonifier\n\n```\n    =======================================================================================\n      TYPES                             CLASSES                          EBCDIC  ASCII     \n    =======================================================================================\n      -[Vazio]--------------------------------------------------------------------------   \n      00  Empty Content                 Fieldempty                        yes     yes      \n      -[Numeric Types without signal]---------------------------------------------------   \n      01) 9                             FieldSimpleNumeric                yes     yes      \n      02) 9V99                          FieldSimpleNumericDecimals1       yes     yes      \n      03) 9V9(2)                        FieldSimpleNumericDecimals2       yes     yes      \n      04) 9(12)                         FieldSimpleNumeric1               yes     yes      \n      05) 9(12)V99                      FieldSimpleNumeric1Decimals1      yes     yes      \n      06) 9(12)V9(2)                    FieldSimpleNumeric1Decimals2      yes     yes      \n      -[Numeric Types with signal]------------------------------------------------------   \n      07) S9(12)       [BINARY/COMP3]   FieldSignalNumeric1               yes     no       \n      08) S9(12)V99    [BINARY/COMP3]   FieldSignalNumeric1Decimals1      yes     no       \n      09) S9(12)V9(2)  [BINARY/COMP3]   FieldSignalNumeric1Decimals2      yes     no       \n      -[Masked Numeric Types]-----------------------------------------------------------   \n      A1) +99999999999999.99            FieldNumericMasked1               no      yes      \n          -99999999999999.99                                                               \n          +99999999999999                                                                  \n          +ZZZZZZZZZZZZZ9.99                                                               \n          -ZZZZZZZZZZZZZ9.99        (Note: These are just                                  \n           ZZZZZZZZZZZZZZ.ZZ                       some examples)                          \n           99999999999999999                                                               \n      -[Alphabetic]---------------------------------------------------------------------   \n      10) A(12)                         FieldAlphabetic                   yes     yes      \n      -[Alphanumeric]-------------------------------------------------------------------   \n      11) X(12)                         FieldAlphanumeric                 yes     yes      \n      -[Undefined]----------------------------------------------------------------------   \n      12) None of the above             FieldUndefined                    yes     yes      \n    =======================================================================================\n```\n\n## References\n\n* [Python Packaging Projects](https://packaging.python.org/tutorials/packaging-projects/)\n\n* [Where to put tests](http://pythonchb.github.io/PythonTopics/where_to_put_tests.html)\n\n* [Python Modules](https://docs.python.org/3/tutorial/modules.html)\n\n* [Absolute vs Relative python imports](https://realpython.com/absolute-vs-relative-python-imports/)\n\n* [Python UnitTest](https://pythontesting.net/framework/specify-test-unittest-nosetests-pytest/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jrperin/cobol-copybook.jsonifier",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coboljsonifier",
    "package_url": "https://pypi.org/project/coboljsonifier/",
    "platform": "",
    "project_url": "https://pypi.org/project/coboljsonifier/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jrperin/cobol-copybook.jsonifier/issues",
      "Homepage": "https://github.com/jrperin/cobol-copybook.jsonifier"
    },
    "release_url": "https://pypi.org/project/coboljsonifier/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Convert cobol copybook to Json and parse data files based on it",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11464682,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "595c4843d30f7a3cced6503faefa9569fc26e9346cbfc8b00e8e5220227e4504",
          "md5": "98681dce56e833982f84a1c0f221b8b7",
          "sha256": "83fc30ab7a1e18b2e9707fec9783741cdceda50935f940fe8000ab133b82572c"
        },
        "downloads": -1,
        "filename": "coboljsonifier-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98681dce56e833982f84a1c0f221b8b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18712,
        "upload_time": "2021-09-16T05:03:41",
        "upload_time_iso_8601": "2021-09-16T05:03:41.203439Z",
        "url": "https://files.pythonhosted.org/packages/59/5c/4843d30f7a3cced6503faefa9569fc26e9346cbfc8b00e8e5220227e4504/coboljsonifier-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d8731fe8420af174c123439fefd5df06b7e8ee706d0ff9460c57bf3b7287fdb",
          "md5": "196cdb8f1eb590c9b7ddb5286cac4726",
          "sha256": "ab6ab492ea0aecf55b997511e1fc28c32af230aa1d85b10fa56533570a6678bf"
        },
        "downloads": -1,
        "filename": "coboljsonifier-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "196cdb8f1eb590c9b7ddb5286cac4726",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14442,
        "upload_time": "2021-09-16T05:03:43",
        "upload_time_iso_8601": "2021-09-16T05:03:43.007991Z",
        "url": "https://files.pythonhosted.org/packages/8d/87/31fe8420af174c123439fefd5df06b7e8ee706d0ff9460c57bf3b7287fdb/coboljsonifier-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "595c4843d30f7a3cced6503faefa9569fc26e9346cbfc8b00e8e5220227e4504",
        "md5": "98681dce56e833982f84a1c0f221b8b7",
        "sha256": "83fc30ab7a1e18b2e9707fec9783741cdceda50935f940fe8000ab133b82572c"
      },
      "downloads": -1,
      "filename": "coboljsonifier-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98681dce56e833982f84a1c0f221b8b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18712,
      "upload_time": "2021-09-16T05:03:41",
      "upload_time_iso_8601": "2021-09-16T05:03:41.203439Z",
      "url": "https://files.pythonhosted.org/packages/59/5c/4843d30f7a3cced6503faefa9569fc26e9346cbfc8b00e8e5220227e4504/coboljsonifier-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d8731fe8420af174c123439fefd5df06b7e8ee706d0ff9460c57bf3b7287fdb",
        "md5": "196cdb8f1eb590c9b7ddb5286cac4726",
        "sha256": "ab6ab492ea0aecf55b997511e1fc28c32af230aa1d85b10fa56533570a6678bf"
      },
      "downloads": -1,
      "filename": "coboljsonifier-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "196cdb8f1eb590c9b7ddb5286cac4726",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14442,
      "upload_time": "2021-09-16T05:03:43",
      "upload_time_iso_8601": "2021-09-16T05:03:43.007991Z",
      "url": "https://files.pythonhosted.org/packages/8d/87/31fe8420af174c123439fefd5df06b7e8ee706d0ff9460c57bf3b7287fdb/coboljsonifier-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}