{
  "info": {
    "author": "Rick Arnold",
    "author_email": "ntwrick@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Pyscriptlib - Python Bash Script Helpers\n\n***pyscriptlib*** is a collection of helper functions that make it easy to invoke `bash` shell commands from a python script.\n\nThese helpers simplify the use of the `sys`, `os`, and `subprocess` modules for common cases.\n\nFrom `sys` we get:\n- `arg(n:int) -> str`\n  - a simple parse of `sys.argv` that always returns a string\n  - also consider `argparse` or `click-shell` if you are building a complex CLI\n- `nargs(n:int) -> List(str)`\n  - retrieve the remaining command line args starting with `arg(n)`\n- `shift(n:int=1) -> List[str]`\n  - shifts `sys.argv` by `n` preserving `sys.argv[0]` returning removed args\n- `exit(return_code:int=0)`\n  - exeunt, pursued by a bear (WS)\n\nFrom `os` we get:\n- `env(var:str) -> str|None`\n  - easy retrieval of environment variables\n- `kill(pid:int, signal:int=9)`\n  - this subprocess is killing me, so kill or be killed\n\nFrom `subprocess` we get several useful variations of `sh*(cmd:str, **kwargs)` to invoke the `/bin/bash` shell for us (including `subprocess.Popen(**kwargs)` if necessary):\n- `sh(cmd:str, **kwargs)  -> (stdout+stderr).strip()`\n  - output, output, gimme output\n- `shl(cmd:str, **kwargs) -> list(rc, stdout, stderr)`\n  - ok, ok, maybe we should take a look first: `if rc == 0`\n- `shk(cmd:str, **kwargs) -> list(is_ok, rc, stdout, stderr)`\n  - let's test with a concise boolean `is_ok` instead of `rc == 0`\n- `sho(cmd:str, **kwargs) -> CompletedProcess(is_ok, rc, stdout, stderr)`\n  - `cp = sho(cmd)` is the full Monty\n  - customized with `cp.is_ok` and `cp.rc` \n- `shx(cmd:str, **kwargs) -> None`\n  - displays live output to terminal just like you want it to in living color\n- `shb(cmd:str, **kwargs) -> int(pid)`\n  - runs `cmd` in background, returning immediately\n  - use `pid` to `kill(pid)`, or not, you daemon you\n- `class Shell` can be used to select your preferred shell\n  - `Shell.executable = '/bin/bash'` is the default bash shell used by `sh*()` functions\n  - `Shell.shell` is the property used to access the current `Shell.executable` value\n\nAnd, from nowhere in particular, we get\n- `humanize(seconds:int, style='compact', days='days', zerodays=True) -> str()`\n  - returns a human readable form of elapsed seconds such as `/proc/uptime`\n  - full `'05 days 03:59:27'` or compact `'05d 03h 59m 27s'`\n- `joinlines(lines:list) -> str`\n  - this is the inverse of `str.splitlines()`\n  - returns list as a string concatenated with LF's\n- Constants: `SP`, `TAB2`, `TAB = TAB4`, `LF`, `CRLF`\n  - spaces and line feed constants useful in string formats\n\n### Installation\n***pyscriptlib*** is available at ***pypi.org***\n```bash\npip install pyscriptlib\n```\n\n### Example Usage\nSee ***pyscriptlib/example_script.py*** below\n```python\n#! /usr/bin/env python3\n'''\nUsage: python3 /path/to/site-packages/pyscriptlib/example_script.py ~/some/example/dir arg2 arg3\n'''\n\nfrom pathlib import Path\nimport time\nfrom pyscriptlib import arg, nargs, shift, env, sh, shx, shl, shk, sho, shb, kill, humanize, joinlines, TAB2, TAB4, LF\n\ndef title(descr, code):\n    print(f'\\n>>> {descr}\\n>>> {code}')\n    \n\ntitle('Retrieve first sys.argv or os.environ variable MY_DIR_PATH or None if not present',\n      'dir_path = arg(1) or env(\"MY_DIR_PATH\")')\ndir_path = arg(1) or env('MY_DIR_PATH')\nprint(f'{dir_path = }')\n\ntitle('Get remaining command line args beginning at arg(1)',\n      'remaining_args = nargs(1)')\nremaining_args = nargs(2)\nprint(f'{remaining_args = }')\n\ntitle('Shift args',\n      'removed = shift()); arg1 = arg(1)')\nremoved = shift()\narg1 = arg(1)\nprint(f'{removed = }  {arg1 = }')\n\ntitle('Open the dir_path and verify it is a directory',\n      'if Path(dir_path).expanduser().is_dir() else exit(2)')\nif dir_path:\n    my_dir = Path(dir_path).expanduser()\n    if not my_dir.is_dir():\n        print(f'Exiting: cannot find {dir_path}')\n        exit(2)\nelse:\n    print('usage: ./myscript dir_path') \n    print('       -- or -- ')\n    print('       MY_DIR_PATH=~/git/pyscriptlib; ./myscript')\n    exit(1)\nprint(f'{my_dir = }')\n\n\ntitle('Capture the stripped output from stdout+stderr',\n      'output = sh(cmd)')\noutput = sh(f'ls -alh {my_dir}')\nprint(output)\n\n\ntitle('Execute the command directly sending output to the terminal',\n      'shx(cmd)')\nshx(f'tree {my_dir}')\n\n\ntitle('Get a list of return values from subprocess.CompletedProcess object -- test with rc == 0',\n      'rc, stdout, stderr = shl(cmd); if rc == 0:')\nrc, stdout, stderr = shl(f'ls -alh {my_dir}')\nif rc == 0:\n    print(f'{rc = }\\n{stdout = }')\nelse:\n    print(f'{rc = }\\n{stderr = }')\n\n\ntitle('Get a list of return values from subprocess.CompletedProcess object -- test with boolean is_ok',\n      'is_ok, rc, stdout, stderr = shk(cmd); if is_ok:')\nis_ok, rc, stdout, stderr = shk(f'ls -alh {my_dir}')\nif is_ok:\n    print(f'{is_ok = } {rc = }\\n{stdout = }')\nelse:\n    print(f'{is_ok = } {rc = }\\n{stderr = }')\n\n\ntitle('Get the customized subprocess.CompletedProcess object -- test with boolean cp.is_ok',\n      'cp = sho(cmd); if cp.is_ok:')\ncmd = f'''\ncd {my_dir}\ngrep -r \\\n    --exclude='*.pyc' \\\n    --exclude-dir='.git' --exclude-dir='dist' --exclude-dir='*.egg-info' \\\n    pyscriptlib\n'''\nprint('cmd = ', cmd)\ncp = sho(cmd)\nif cp.is_ok:\n    text = cp.stdout.splitlines()\n    print(text)\nelse:\n    print(f'grep failed: {cp.rc = } {cp.stderr = }')\n    exit(cp.rc)\n\n\ntitle('Create and kill background process with pid',\n      'pid = shb(cmd); kill(pid)')\npid = shb(f'echo \"hello from background process\"; sleep 10')\nprint(f'{pid = }')\ntime.sleep(1)\nkill(pid)\n\n\ntitle('Humanize the uptime for this host',\n      'uptimes = sh(\"cat /proc/uptime\"); humanize(uptimes[0]))')\nuptimes = sh('cat /proc/uptime')\nif uptimes:\n    uptime = float(uptimes.split(' ')[0]) \n    print(f'{humanize(uptime) = }')\n    print(f'{humanize(uptime, style=\"full\") = }')\n```\n\n### A Personal Note\nI've been using `bash` for over 35 years (since the days of Bell Labs Unix where it was invented by Stephen Bourne), but I never really felt very confident with its (to me) arcane syntax. \n\nNo, I don't mean just the things like this\n```bash\n# I'm not always sure which condition form to use \n# and watch those spaces around the brackets!!!  \n# not to mention tests like -x, -n, -z and $? == 0 is success?\n\nif <condition> | [ <condition> ] | [[ <condition> ]] \nthen\n    <statements>\nelse \n    <statements> \nfi\n\n# seriously, );; );; esac anyone?\n\ncase <value> in \n    <match> ) <statements> ;;\n    <match> ) <statements> ;;\n    * ) <statements>;;\nesac\n```\nBut mostly the magic stuff you can do with array notation that is so cryptic it makes my eyes water. \n\n```bash\n# I'm still not sure what all this means :-(\n\nlocations=( \"New York\" Chicago Atlanta Miami )\nfor val in ${!locations[@]}\ndo\n   echo \"index = ${val} , value = ${locations[$val]}\"\ndone\n```\nSigh, and I thought that `perl` was noisy ...\n\nSo I started looking for a better shell and what I actually found was ***python***. It's a more powerful interpreter with a much more comfortable and much less cryptic syntax than `bash`. \n\nAlong the way, I also considered the python `conch` shell, but it wants to be a new hybrid language in a REPL, and I don't really want the overhead of another layer of shell even if it is `ipython` at its heart.\n\nIn particular, all I really want to do is easily invoke the `bash shell` to run useful tools like `grep`, `ls -alh`, `tree`, `ip address`, *et alia*, but otherwise I'm happy with python syntax as the medium in a script file.\n\nUnfortunately, the down-side to using python for scripting is that it is still a real programming language -- so creating `bash equivalent` scripts can get a bit hairy, to say the least.\n\nThis is especially true when you start using `subprocess.Popen()` and its incredibly powerful capabilities to fork any process you want with any options you want. But the price of power can be overwhealming complexity.\n\nAnd so, I finally realized that all I really need is a concise set of wrapper functions that I can use to embed `bash commands` in my python code and let them actually do all the heavy lifting using `subprocess.Popen()` -- and why not throw in some `sys` and `os` sugar as well? \n\nAnd, thus, complexity begat ***pyscriptlib*** and here we are.\n\n### A Testimonial to pathlib.Path -- Can I have an Amen?\nI am also highly impressed with the `Path` class from the standard `pathlib` module. The `Path` object model helps my python scripts become much more concise as I'm often navigating the file system such as `Path.home()/'subdir'` before I launch some `sh*(cmd)` that accesses the files. \n\nOoh, ooh, Mr. Kotter: this is not a typo, rather, it is the coolest use of a class dunder method to create a `Path slash(/) join operator` that I have seen:\n```python\n# using the Path slash(/) join operator\nfile_path = Path.home() / 'subdir' / 'file'\n\n# is the same as using the Path.joinpath() method\nfile_path = Path.home().joinpath('subdir', 'file')\n\n# and the Path instance has direct access methods to the file system\nif file_path.is_file():\n  text = file_path.read_text()\n\n# bang, zoom, that's all folks\n```\nThe old way of doing this with `os.path` was only slightly less painful than `subprocess.Popen`. I leave that as a heartless exercise for the reader :-).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/ntwrick/pyscriptlib",
    "keywords": "scripting,shell,bash,helpers,subprocess,sys,os",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyscriptlib",
    "package_url": "https://pypi.org/project/pyscriptlib/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyscriptlib/",
    "project_urls": {
      "Homepage": "https://gitlab.com/ntwrick/pyscriptlib"
    },
    "release_url": "https://pypi.org/project/pyscriptlib/2.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python Bash Script Helpers",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15008783,
  "releases": {
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99111c3a0057cf1f421cbaf72a3953f383db9fb9b698234eaa8854a89f41d9fe",
          "md5": "55d63d5e9336a090d1692200561594c0",
          "sha256": "cd75c7bf326435144c2477de47fe5da1ad268d798c52a7a0e37ba39eda384cbe"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55d63d5e9336a090d1692200561594c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8694,
        "upload_time": "2022-08-17T17:19:50",
        "upload_time_iso_8601": "2022-08-17T17:19:50.308793Z",
        "url": "https://files.pythonhosted.org/packages/99/11/1c3a0057cf1f421cbaf72a3953f383db9fb9b698234eaa8854a89f41d9fe/pyscriptlib-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a7ecbdeea8e8ac4ef1f20078f9187a75c251b1a9c85af0d324bc4c473a7e574",
          "md5": "90d537d59a8c813e705e3d77ca40c140",
          "sha256": "b08eb8dcc7f4a6f7893388da8f59826908500d450afe326af22b41381e414b3c"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "90d537d59a8c813e705e3d77ca40c140",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7496,
        "upload_time": "2022-08-17T17:19:52",
        "upload_time_iso_8601": "2022-08-17T17:19:52.533929Z",
        "url": "https://files.pythonhosted.org/packages/0a/7e/cbdeea8e8ac4ef1f20078f9187a75c251b1a9c85af0d324bc4c473a7e574/pyscriptlib-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d6e5d9ce47cb3935e5965c768ebf948cfaabc709f99c74e6a1d609cee140be",
          "md5": "4a13d2fec257ee525958bae205e86bd4",
          "sha256": "e8f0a768c97da51aae8689248567ad724ed39006568ba9401abf209d46e0e21f"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a13d2fec257ee525958bae205e86bd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8967,
        "upload_time": "2022-08-18T21:01:52",
        "upload_time_iso_8601": "2022-08-18T21:01:52.177054Z",
        "url": "https://files.pythonhosted.org/packages/c5/d6/e5d9ce47cb3935e5965c768ebf948cfaabc709f99c74e6a1d609cee140be/pyscriptlib-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "880946974d20c0a318d1012d1c822d3650a430b1e07dd6127d7235f35aeca3b2",
          "md5": "98d8b854063cb0de99ef0a9fb48f0aab",
          "sha256": "3c6213ffbd217d764eb7e83c253f044707b25a760d9fcc8dd33e3381700db2ac"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98d8b854063cb0de99ef0a9fb48f0aab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7708,
        "upload_time": "2022-08-18T21:01:57",
        "upload_time_iso_8601": "2022-08-18T21:01:57.850649Z",
        "url": "https://files.pythonhosted.org/packages/88/09/46974d20c0a318d1012d1c822d3650a430b1e07dd6127d7235f35aeca3b2/pyscriptlib-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c1ebcd2935dc57319f69b2018b4b7a3c993f4c4a3f41f46707737d1fc9b6f29",
          "md5": "da3acafc3ec25696db34bc84b4072e8d",
          "sha256": "a546e915a4568d87904a21c97e303f457ffcc531163b9d52b0d66cf5dc8b8db9"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da3acafc3ec25696db34bc84b4072e8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9221,
        "upload_time": "2022-08-27T20:51:12",
        "upload_time_iso_8601": "2022-08-27T20:51:12.389099Z",
        "url": "https://files.pythonhosted.org/packages/0c/1e/bcd2935dc57319f69b2018b4b7a3c993f4c4a3f41f46707737d1fc9b6f29/pyscriptlib-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065f635a9e521b0e02b4a48a4fe5d42d5de2c982371980a301a2d818893cf4cc",
          "md5": "03495e73afd66dd7be061baaa15c5e47",
          "sha256": "893d36c360c1790819b0d38ab441d8e212e0321ea71133818ec452ff83e16812"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03495e73afd66dd7be061baaa15c5e47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7871,
        "upload_time": "2022-08-27T20:51:14",
        "upload_time_iso_8601": "2022-08-27T20:51:14.624113Z",
        "url": "https://files.pythonhosted.org/packages/06/5f/635a9e521b0e02b4a48a4fe5d42d5de2c982371980a301a2d818893cf4cc/pyscriptlib-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e0b869d213a2fcbfa99da34f4d968770b3a63150c3418c1b1d59b09183513ac",
          "md5": "7793b8f10414a698ec32f36167ddae55",
          "sha256": "5b6e595c453c511731db6d50fc7a98e734e9cec5be314bbad5e6bf6ad1515fff"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7793b8f10414a698ec32f36167ddae55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9720,
        "upload_time": "2022-09-06T15:45:52",
        "upload_time_iso_8601": "2022-09-06T15:45:52.640234Z",
        "url": "https://files.pythonhosted.org/packages/9e/0b/869d213a2fcbfa99da34f4d968770b3a63150c3418c1b1d59b09183513ac/pyscriptlib-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "795cefb775ec3c1fc10e445bdee3be6e40f3c429e87dc2cc118b5c3df0a6eac4",
          "md5": "97fa2a6069e277345b4bcf200d8c7599",
          "sha256": "fe67659dcccf73edc69bfcb4fb275fa797b3944bf1c14409cd02504fb96f5e18"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97fa2a6069e277345b4bcf200d8c7599",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8339,
        "upload_time": "2022-09-06T15:45:54",
        "upload_time_iso_8601": "2022-09-06T15:45:54.543183Z",
        "url": "https://files.pythonhosted.org/packages/79/5c/efb775ec3c1fc10e445bdee3be6e40f3c429e87dc2cc118b5c3df0a6eac4/pyscriptlib-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e1431078ba98eac2fc30dd36fd7c863c7d3b4f48a96238297234a76140b1d12",
          "md5": "bd29807e844ba82dd1a1771191c7f051",
          "sha256": "14ea911fd0e618415593a9b32cc99d8a99c08e860190e73c65155215af0f34cd"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd29807e844ba82dd1a1771191c7f051",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9709,
        "upload_time": "2022-09-06T15:56:58",
        "upload_time_iso_8601": "2022-09-06T15:56:58.528845Z",
        "url": "https://files.pythonhosted.org/packages/2e/14/31078ba98eac2fc30dd36fd7c863c7d3b4f48a96238297234a76140b1d12/pyscriptlib-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f04c677630fa33edb1e99c4fc425b66935f42c20a90781f4c273ffc054a427a1",
          "md5": "1b957f01ad92f435d7204993c0df82c6",
          "sha256": "28ca8eecf90c16aa31a7e950eba89083157b05b985eab14e49603dbf6773655c"
        },
        "downloads": -1,
        "filename": "pyscriptlib-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b957f01ad92f435d7204993c0df82c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8331,
        "upload_time": "2022-09-06T15:57:00",
        "upload_time_iso_8601": "2022-09-06T15:57:00.891263Z",
        "url": "https://files.pythonhosted.org/packages/f0/4c/677630fa33edb1e99c4fc425b66935f42c20a90781f4c273ffc054a427a1/pyscriptlib-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e1431078ba98eac2fc30dd36fd7c863c7d3b4f48a96238297234a76140b1d12",
        "md5": "bd29807e844ba82dd1a1771191c7f051",
        "sha256": "14ea911fd0e618415593a9b32cc99d8a99c08e860190e73c65155215af0f34cd"
      },
      "downloads": -1,
      "filename": "pyscriptlib-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd29807e844ba82dd1a1771191c7f051",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9709,
      "upload_time": "2022-09-06T15:56:58",
      "upload_time_iso_8601": "2022-09-06T15:56:58.528845Z",
      "url": "https://files.pythonhosted.org/packages/2e/14/31078ba98eac2fc30dd36fd7c863c7d3b4f48a96238297234a76140b1d12/pyscriptlib-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f04c677630fa33edb1e99c4fc425b66935f42c20a90781f4c273ffc054a427a1",
        "md5": "1b957f01ad92f435d7204993c0df82c6",
        "sha256": "28ca8eecf90c16aa31a7e950eba89083157b05b985eab14e49603dbf6773655c"
      },
      "downloads": -1,
      "filename": "pyscriptlib-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b957f01ad92f435d7204993c0df82c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8331,
      "upload_time": "2022-09-06T15:57:00",
      "upload_time_iso_8601": "2022-09-06T15:57:00.891263Z",
      "url": "https://files.pythonhosted.org/packages/f0/4c/677630fa33edb1e99c4fc425b66935f42c20a90781f4c273ffc054a427a1/pyscriptlib-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}