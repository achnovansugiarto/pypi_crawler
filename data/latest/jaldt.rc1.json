{
  "info": {
    "author": "mimseyedi",
    "author_email": "mim.seyedi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Jaldt\n\n[![pypi](https://img.shields.io/pypi/v/jaldt.svg)](https://pypi.org/project/jaldt/) [![license](https://img.shields.io/github/license/mimseyedi/jaldt.svg)](https://github.com/mimseyedi/Jaldt/blob/master/LICENSE)\n\n![img1](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/jaldt_poster.png)\n\n`Jaldt` is a package for working with date and time based on Jalali calendar and date.\n\n## Table of Contents: <a class=\"anchor\" id=\"contents\"></a>\n* [How to install](#install)\n* [Functions](#funcs)\n  \n  * [Convert Gregorian date to Jalali](#g2j)\n  * [Convert Jalali date to Gregorian](#j2g)\n  * [Getting the current date and time by the now function](#now)\n   \n    * [strftime argument](#strftime_arg)\n    * [lang argument](#now_lang_arg)\n    \n  * [Jalali calendar](#calendar)\n  \n    * [month argument](#cal_month_arg)\n    * [lang argument](#cal_lang_arg)\n    * [color argument](#cal_color_arg)\n    * [style argument](#cal_style_arg)\n    \n  * [Jalali monthly events](#events)\n  \n    * [month argument](#events_month_arg)\n    * [inplace argument](#events_inplace_arg)\n  \n* [Contribute](#cont)\n* [Resources](#res)\n\n\n## How to install <a class=\"anchor\" id=\"install\"></a>\nYou can download and install this package directly from `pypi` repository by `pip` module. (Make sure you are using Python3)\n\n```\npython3 -m pip install jaldt  \n```\n\n## Functions <a class=\"anchor\" id=\"funcs\"></a>\nThis package contains some simple functions to work with date and time in the format of Jalali date, which you can follow the explanations of these functions.\n\n## g2j: <a class=\"anchor\" id=\"g2j\"></a>\nWith this function, you can easily convert the Gregorian date to Jalali date and receive the output in a list that includes the converted year, month and day.\n\nExample:\n\n```python\nfrom jaldt import g2j\n\nyear, month, day = g2j(2023, 1, 10)\n\nprint(f'{year}/{month}/{day}')\n```\n\noutput:\n```\n1401/10/20\n```\n\n## j2g: <a class=\"anchor\" id=\"j2g\"></a>\nWith this function, you can easily convert the Jalali date to Gregorian date and receive the output in a list that includes the converted year, month and day.\n\nExample:\n\n```python\nfrom jaldt import j2g\n\nyear, month, day = j2g(1401, 10, 20)\n\nprint(f'{year}/{month}/{day}')\n```\n\noutput:\n```\n2023/1/10\n```\n\n## now: <a class=\"anchor\" id=\"now\"></a>\nWith this function, you can get the current date and time in Jalali date with various formats.\n\nExample:\n\n```python\nfrom jaldt import now\n\ncurrent_date_and_time_in_jalali = now()\nprint(current_date_and_time_in_jalali)\n```\n\noutput:\n```\n۱۴۰۱/۱۰/۲۰ ۱۶:۲۳:۰۳.۵۶۰۴۲۲\n```\n\n### strftime argument: <a class=\"anchor\" id=\"strftime_arg\"></a>\nThe strftime argument allows you to specify your desired output by specifying symbols.\n\nSymbol | Description | Output |\n--- | --- | ---\n`%a` | Abbreviated weekday name. | sha, 1sh, .. \n`%A` | Full weekday name. | shanbe, 1shanbe, ...\n`%-d` | Day of the month as a decimal number. | 1, 2, ..., 31\n`%d` | Day of the month as a zero added decimal. | 01, 02, ..., 31\n`%b` | Abbreviated month name. | far, ord, ..., esf\n`%B` | Full month name. | farvardin, ordibehesht, ...\n`%-m` | Month as a decimal number. | 1, 2, ..., 12\n`%m` | Month as a zero added decimal number. | 01, 02, ..., 12\n`%Y` | Year with century as a decimal number. | 1401, 1402, ...\n`%y` | Year without century as a zero added decimal number. | 01, 02, ...\n`%-H` | Hour (24-hour clock) as a decimal number. | 0, 1, ..., 23\n`%H` | Hour (24-hour clock) as a zero added decimal number. | 00, 01, ..., 23\n`%-I` | Hour (12-hour clock) as a decimal number. | 1, 2, ..., 12\n`%I` | Hour (12-hour clock) as a zero added decimal number. | 01, 02, ..., 12\n`%p` | Locale’s AM or PM. | AM, PM\n`%-M` | Minute as a decimal number. | 0, 1, ..., 59\n`%M` | Minute as a zero added decimal number. | 00, 01, ..., 59\n`%-S` | Second as a decimal number. | 0, 1, ..., 59\n`%S` | Second as a zero added decimal number. | 00, 01, ..., 59\n\n<br />\n\nExample: Print the current time similar to a 12-hour digital clock.\n```python\nfrom jaldt import now\n\nfarsi_clock = now(strftime='%I:%M %p', lang='farsi')\nfingilish_clock = now(strftime='%I:%M %p', lang='fingilish')\n\nprint(farsi_clock)\nprint(fingilish_clock)\n```\n\noutput:\n```\n۰۷:۰۷ بعد از ظهر\n07:07 PM\n```\n\n### lang argument: <a class=\"anchor\" id=\"now_lang_arg\"></a>\nThe lang argument is used to specify the output language. It is used in two modes: `farsi` and `fingilish`. The default value of this argument is `farsi`.\n\nExample:\n```python\nfrom jaldt import now\n\nfarsi_datetime = now(lang='farsi')\nfingilish_datetime = now(lang='fingilish')\n\nprint(farsi_datetime)\nprint(fingilish_datetime)\n```\n\noutput:\n```\n۱۴۰۱/۱۰/۲۱ ۱۹:۲۵:۳۱.۸۶۲۹۱۲\n1401/10/21 19:25:31.862958\n```\n\n## calendar: <a class=\"anchor\" id=\"calendar\"></a>\nWith the calendar function, you can print the Jalali calendar with different `colors` in `farsi` and `fingilish` languages.\n\nExample:\n```python\nfrom jaldt import calendar\n\ncalendar()\n```\n\noutput:\n\n![img2](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/init_calendar.png)\n\n### month argument: <a class=\"anchor\" id=\"cal_month_arg\"></a>\nThe month argument allows you to print the calendar of the month you want. The value of this argument must be one of the `Jalali months`, and its default value is `'now'`, which refers to the current month.\n\nJalali months | Confirmed value \n--- |---| \nفروردین| `'farvardin'`   |\nاردیبهشت | `'ordibehesht'` |\nخرداد | `'khordad'`     |\nتیر | `'tir'`         |\nمرداد | `'mordad'`      |\nشهریور | `'shahrivar'`   |\nمهر | `'mehr'`        |\nآبان | `'aban'`        |\nآذر | `'azar'`        |\nدی | `'dey'`         |\nبهمن | `'bahman'`      |\nاسفند | `'esfand'`      |\n\n<br />\n\nExample:\n```python\nfrom jaldt import calendar\n\nautumn_months = ['mehr', 'aban', 'azar']\nfor month in autumn_months:\n    calendar(month=month, color='yellow')\n```\n\noutput: \n\n![img3](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/autumn_cal.png)\n\n### lang argument: <a class=\"anchor\" id=\"cal_lang_arg\"></a>\nThe lang argument is used to specify the output language. It is used in two modes: `farsi` and `fingilish`. The default value of this argument is `farsi`.\n\nExample:\n```python\nfrom jaldt import calendar\n\nfor language in ['farsi', 'fingilish']:\n    calendar(lang=language)\n```\noutput:\n\n![img4](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/farsi_fingilish_cal.png)\n\n### color argument: <a class=\"anchor\" id=\"cal_color_arg\"></a>\nThe color argument allows you to change the color of the calendar using `ANSI` codes. Make sure your `shell` supports ANSI codes!\n\nColors | ANSI Codes | Confirmed value |\n--- |---| --- \ndefault | `\\x1b[0m`  | `'def'`\ngray | `\\x1b[90m` | `'gray'`\nred | `\\x1b[91m` | `'red'`\ngreen | `\\x1b[92m` | `'green'`\nyellow | `\\x1b[93m` | `'yellow'`\nblue | `\\x1b[94m` | `'blue'`\npink | `\\x1b[95m` | `'pink'`\ncyan | `\\x1b[36m` | `'cyan'`\nblack | `\\x1b[30m` | `'black'`\n\n<br />\nExample:\n\n```python\nfrom jaldt import calendar\n\ncalendar(color='yellow')\n```\noutput:\n\n![img5](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/yellow_cal.png)\n\n\n### style argument: <a class=\"anchor\" id=\"cal_style_arg\"></a>\nThe style argument allows you to specify how to display the `current day` in three modes: `highlight`, `underline` and `blink`. The default value of this argument is `highlight`.\n\nExample:\n\n```python\nfrom jaldt import calendar\n\ncalendar(style='blink')\n```\n\noutput:\n\n![img6](https://raw.githubusercontent.com/mimseyedi/Jaldt/master/docs/images/blink_cal.gif)\n\n\n## events: <a class=\"anchor\" id=\"events\"></a>\nThis function returns all the historical events of the selected month in the form of a dictionary or prints it on the screen.\n\nExample:\n\n```python\nfrom jaldt import events\n\ncurrent_month_events = events()\n\nfor day, event in current_month_events.items():\n    print(day, event)\n```\n\noutput:\n\n```\n۱ روز میلاد خورشید؛ جشن خرم روز، نخستین جشن دیگان\n۴ ['روز بزرگداشت دوستی', 'جشن کریسمس']\n۵ ['سالروز شهادت آشو زرتشت، اَبَراِنسان بزرگ تاریخ', 'زمین لرزه ی بم ۱۳۸۲']\n۸ دی به آذر روز، دومین جشن دیگان\n۱۱ جشن آغاز سال نو میلادی\n۱۳ شهادت سردار حاج قاسم سلیمانی در سال ۱۳۹۸\n۱۵ دی به مهر روز، سومین جشن دیگان\n۱۶ غرق شدن کشتی سانچی در سال ۱۳۹۶\n۱۸ شلیک به پرواز ۷۵۲ هواپیمایی اوکراین توسط جمهوری اسلامی در سال ۱۳۹۸\n۱۹ درگذشت اکبر هاشمی رفسنجانی در سال ۱۳۹۵\n۲۰ قتل امیرکبیر به دستور ناصرالدین شاه قاجار در سال ۱۲۳۰\n۲۳ دی به دین روز، چهارمین جشن دیگان\n۳۰ آتش سوزی و فروریختن ساختمان پلاسکو در سال ۱۳۹۵\n```\n\n### month argument: <a class=\"anchor\" id=\"events_month_arg\"></a>\nThe month argument allows you to access historical events for any month you choose.\n\nJalali months | Confirmed value \n--- |---| \nفروردین| `'farvardin'`   |\nاردیبهشت | `'ordibehesht'` |\nخرداد | `'khordad'`     |\nتیر | `'tir'`         |\nمرداد | `'mordad'`      |\nشهریور | `'shahrivar'`   |\nمهر | `'mehr'`        |\nآبان | `'aban'`        |\nآذر | `'azar'`        |\nدی | `'dey'`         |\nبهمن | `'bahman'`      |\nاسفند | `'esfand'`      |\n\n<br />\nExample:\n\n```python\nfrom jaldt import events\n\naban_events = events(month='aban')\n\nfor day, event in aban_events.items():\n  print(day, event)\n```\n\noutput:\n\n```\n۱ روز آمار و برنامه ریزی\n۷ سالروز ورود کوروش بزرگ به بابل در سال ۵۳۹ پیش از میلاد\n۸ روز نوجوان\n۱۰ آبان روز، جشن آبانگان\n۱۳ روز دانش آموز\n۱۴ روز فرهنگ عمومی\n۱۵ جشن میانه پاییز\n۱۸ روز ملی کیفیت\n۲۳ روز جهانی دیابت\n۲۴ ['شروع اعتراضات سراسری به دلیل گران شدن نرخ بنزین در سال ۱۳۹۸', 'روز کتاب و کتابخوانی']\n۲۶ روز جهانی فلسفه\n۲۸ روز جهانی آقایان\n۲۹ روز جهانی کودک\n```\n\n### inplace argument: <a class=\"anchor\" id=\"events_inplace_arg\"></a>\nThe inplace argument allows you to get the output or have it automatically printed to the screen. (True Value for printing events)\n\nExample:\n\n```python\nfrom jaldt import events\n\nevents(month=6, inplace=True)\n```\n\noutput:\n\n```\nشهریور ۱: روز بزرگداشت ابوعلی سینا و روز پزشک\nشهریور ۲:  آغاز هفته دولت\nشهریور ۴: شهریور روز، جشن شهریورگان -  زادروز داراب (کوروش)\nشهریور ۵: روز بزرگداشت محمدبن زکریای رازی و روز داروساز\nشهریور ۸: انفجار در دفتر نخست‌وزیری جمهوری اسلامی ایران، روز مبارزه با تروریسم\nشهریور ۱۱: روز صنعت چاپ\nشهریور ۱۳: روز بزرگداشت ابوریحان بیرونی\nشهریور ۱۷: قیام ۱۷ شهریور\nشهریور ۱۹: روز جهانی پیشگیری از خودکشی\nشهریور ۲۰: حمله به برج‌های دوقلوی مرکز تجارت جهانی\nشهریور ۲۱: روز سینما\nشهریور ۲۲: به قتل رسیدن مهسا امینی توسط جمهوری اسلامی در سال ۱۴۰۱ و شروع اعتراضات سراسری (زن، زندگی، آزادی) - روز گرامیداشت برنامه نویسان\nشهریور ۲۷: روز شعر و ادب پارسی و روز بزرگداشت استاد شهریار\nشهریور ۳۰: روز جهانی صلح\nشهریور ۳۱: آغاز هفته دفاع مقدس\n```\n\n\n## Contribute <a class=\"anchor\" id=\"cont\"></a>\nTo contribute to this project, you can simply do so by making modifications and then making a `merge request`.\nFor now this is a simple project and I have these ideas for development:\n\n * `Adding Lunar date (Qamari) events to the events function`\n * `Add more formats to the now function`\n * `Age calculation by Jalali's date of birth`\n * `Convert English numbers to Farsi and vice versa`\n \n\n## Resources <a class=\"anchor\" id=\"res\"></a>\nConverting Gregorian date to Jalali date and vice versa: https://jdf.scr.ir/jdf/python\n\nEvents of Jalali history:\nhttps://www.time.ir\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mimseyedi/Jaldt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jaldt",
    "package_url": "https://pypi.org/project/jaldt/",
    "platform": null,
    "project_url": "https://pypi.org/project/jaldt/",
    "project_urls": {
      "Homepage": "https://github.com/mimseyedi/Jaldt"
    },
    "release_url": "https://pypi.org/project/jaldt/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Jaldt is a package for working with date and time based on Jalali calendar and date.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16458724,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4132f0727ca125aee7b4f00f6db7471e07f8f2937f6d55b556f14b5bbc9c12b7",
          "md5": "9a0d7de71a7433fde5b99d719e9d2d33",
          "sha256": "9a3e10d6d2d1d32adf48575b7bd483224246d18c4eb2135b25420c85e6120f03"
        },
        "downloads": -1,
        "filename": "jaldt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a0d7de71a7433fde5b99d719e9d2d33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14904,
        "upload_time": "2023-01-17T14:17:36",
        "upload_time_iso_8601": "2023-01-17T14:17:36.778476Z",
        "url": "https://files.pythonhosted.org/packages/41/32/f0727ca125aee7b4f00f6db7471e07f8f2937f6d55b556f14b5bbc9c12b7/jaldt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c78815cba7439afd148f8aa603b0da1c5808a60b551a4e4c783d49b9bd17089",
          "md5": "f08aff1f7dddd5cd8b8e0a8b6a1f9400",
          "sha256": "96edd6698f3ce18a33302fc7c021734cd4db8bfa269eb7c2f14c5b259a5fc1d4"
        },
        "downloads": -1,
        "filename": "jaldt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f08aff1f7dddd5cd8b8e0a8b6a1f9400",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18189,
        "upload_time": "2023-01-17T14:17:39",
        "upload_time_iso_8601": "2023-01-17T14:17:39.559627Z",
        "url": "https://files.pythonhosted.org/packages/1c/78/815cba7439afd148f8aa603b0da1c5808a60b551a4e4c783d49b9bd17089/jaldt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4132f0727ca125aee7b4f00f6db7471e07f8f2937f6d55b556f14b5bbc9c12b7",
        "md5": "9a0d7de71a7433fde5b99d719e9d2d33",
        "sha256": "9a3e10d6d2d1d32adf48575b7bd483224246d18c4eb2135b25420c85e6120f03"
      },
      "downloads": -1,
      "filename": "jaldt-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a0d7de71a7433fde5b99d719e9d2d33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14904,
      "upload_time": "2023-01-17T14:17:36",
      "upload_time_iso_8601": "2023-01-17T14:17:36.778476Z",
      "url": "https://files.pythonhosted.org/packages/41/32/f0727ca125aee7b4f00f6db7471e07f8f2937f6d55b556f14b5bbc9c12b7/jaldt-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c78815cba7439afd148f8aa603b0da1c5808a60b551a4e4c783d49b9bd17089",
        "md5": "f08aff1f7dddd5cd8b8e0a8b6a1f9400",
        "sha256": "96edd6698f3ce18a33302fc7c021734cd4db8bfa269eb7c2f14c5b259a5fc1d4"
      },
      "downloads": -1,
      "filename": "jaldt-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f08aff1f7dddd5cd8b8e0a8b6a1f9400",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18189,
      "upload_time": "2023-01-17T14:17:39",
      "upload_time_iso_8601": "2023-01-17T14:17:39.559627Z",
      "url": "https://files.pythonhosted.org/packages/1c/78/815cba7439afd148f8aa603b0da1c5808a60b551a4e4c783d49b9bd17089/jaldt-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}