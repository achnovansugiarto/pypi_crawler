{
  "info": {
    "author": "libcommon",
    "author_email": "libcommon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `task-py`\n\n## Overview\n\nOne day you need to write a script to process some data, so you sit down and write it. The filepath and other parameters\nare hard-coded, but it works. A few days later, you need to do the same thing, but need to accept a filepath on the\ncommand line and maybe one more parameter, so you refactor some functionality into functions and create a simple CLI\nusing `sys.argv`.  Then a coworker asks if he/she/they could use the script, so you finally break down and use `argparse`\nto write a better CLI.  If this cycle sounds familiar, `task-py` can help by allowing you to skip steps one and two, while\nwriting interoperable, composable tools.\n\n## Installation\n\n### Install from PyPi (preferred method)\n\n```bash\npip install lc-task\n```\n\n### Install from GitHub with Pip\n\n```bash\npip install git+https://github.com/libcommon/task-py.git@vx.x.x#egg=lc_task\n```\n\nwhere `x.x.x` is the version you want to download.\n\n## Install by Manual Download\n\nTo download the source distribution and/or wheel files, navigate to\n`https://github.com/libcommon/task-py/tree/releases/vx.x.x/dist`, where `x.x.x` is the version you want to install,\nand download either via the UI or with a tool like wget. Then to install run:\n\n```bash\npip install <downloaded file>\n```\n\nDo _not_ change the name of the file after downloading, as Pip requires a specific naming convention for installation files.\n\n## Dependencies\n\n`task-py` does not have external dependencies. Only Python versions >= 3.6 are officially supported.\n\n## Getting Started\n\n### Creating a Task\n\nCreating a `Task` is simple: specify some (optional) attributes and implement `Task._perform_task`, which performs the primary\nunit of work. For example, you could implement a task that takes a file path and prints the data of that\nfile to stdout:\n\n```python\nfrom pathlib import Path\n\nfrom lc_task import Task\n\n\nclass CatFileTask(Task):\n    \"\"\"Print contents of a file to stdout.\"\"\"\n    __slots__ = (\"_input_path\",)\n\n    def __init__(self, input_path: Path, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self._input_path\n\n    def _perform_task(self) -> None:\n        if not self._input_path.is_file():\n            raise FileNotFoundError(str(self._input_path))\n        with self._input_path.open() as input_file:\n            print(input_file.read())\n```\n\nIn the example above, we defined an attribute `_input_path` on `CatFileTask` to store the input file path. However, you\ncan also use the `state` dict attribute to store arbitrary state. For tasks that require some setup and teardown steps,\nuse the `Task._preamble` and `Task._postamble` functions, which get called before and after the primary unit of work is completed.\nTo run this task explicitly, you would use the `Task.run` method.\n\n### Accepting Command Line Input\n\nTo create a single task that takes command line input (using `argparse`), create a child class of `CLITask` that defines the\nname of the command, a brief description, and the command line arguments. Taking the example above:\n\n```python\nfrom pathlib import Path\n\nfrom lc_task import CLITask\n\n\nclass CatFileTask(CLITask):\n    __slots__ = (\"_input_path\",)\n\n    COMMAND = \"cat\"\n    DESCRIPTION = \"Print contents of a file to stdout.\"\n\n    @classmethod\n    def gen_command_parser(cls, parser: Optional[ArgumentParser] = None) -> ArgumentParser:\n        parser = super().gen_command_parser()\n        parser.add_argument(\"_input_path\", type=Path, metavar=\"INPUT_PATH\", help=\"Path to input file\")\n        return parser\n\n    def _perform_task(self) -> None:\n        if not self._input_path.is_file():\n            raise FileNotFoundError(str(self._input_path))\n        with self._input_path.open() as input_file:\n            print(input_file.read())\n\n\nif __name__ == \"__main__\":\n    CatFileTask.run_command()\n```\n\nFor defining more complex, hierarchical command line interfaces with subcommands, take a look at the docstring\nfor `cli.gen_cli_parser`. It allows you to define your command line app with a mapping of commands to actions,\nthen generates the CLI for you.\n\n### Pipelines and Message Passing\n\nAnyone who has used Bash, PowerShell, or other scripting languages is familiar with the idea of composability and pipes:\nwriting simple commands that return structured data recognized by other commands can be very powerful.  Python does not\nsupport this style of programming out of the box, but it does support overloading operators for custom types, such as the\nbitwise or operator (`|`).  In Python, the [`__ror__` builtin method](https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types)\nis called when using the bitwise or operator on two objects where the first (left side) doesn't implement `__or__`.\n\n`task-py` takes advantage of this flexibility to allow piping `Task`s together to create pipelines. For example, suppose\nyou were writing a CSV handing toolkit and wanted to createa a command line app that reads data from a CSV and removes\nsome columns.  There are two clear steps in this pipeline:\n\n1. Read data from the CSV into some data structure\n2. Remove specified columns (and write to stdout)\n\n```python\nimport csv\nfrom pathlib import Path\nfrom typing import List, Optional, TextIO\n\nfrom lc_task import CLITask, Task, TaskResult\n\n\nclass CSVColumnRemovalTask(Task):\n    \"\"\"Remove specified columns from frows in a CSV.\"\"\"\n    __slots__ = (\"columns\", \"input_file\", \"reader\")\n\n    def __init__(self, *args, columns: Optional[List[str]] = None, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.columns = columns\n\n    def _perform_task(self) -> None:\n        for record in reader:\n            for column in self.columns:\n                del record[column]\n            print(\", \".join(record))\n\n    def _preamble(self) -> None:\n        self.input_file.close()\n\n\nclass CSVReaderTaskResult(TaskResult):\n    __slots__ = (\"input_file\", \"reader\")\n\n    def __init__(self: input_file: Optional[TextIO] = None, reader: Optional[csv.DictReader] = None, **kwargs) -> None:\n        super().__init__(**kwargs)\n        self.input_file = input_file\n        self.reader = reader\n\n\nclass CSVReaderTask(Task):\n    \"\"\"Read data from a CSV into a `csv.DictReader` object.\"\"\"\n    __slots__ = (\"input_path\",)\n\n    @staticmethod\n    def gen_task_result() -> TaskResult:\n        return CSVReaderTaskResult()\n\n    def __init__(self, *args, input_path: Optional[Path] = None, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self.input_path = input_path\n\n    def _perform_task(self) -> None:\n        # Need to check self.input_path because it could be provided in\n        # __init__ or via merge_object\n        if not self.input_path:\n            raise ValueError(\"must provide path to CSV file\")\n\n        input_file = self.input_path.open(newline=\"\")\n        reader = csv.DictReader(input_file, dialect=csv.unix_dialect)\n        # Using a defined TaskResult type here, but could also just use a dict\n        self.result = CSVReaderTaskResult(input_file = input_file, reader = reader)\n\n\nclass RemoveColumnsCLITask(CLITask):\n    __slots__ = (\"columns\", \"input_path\")\n\n    COMMAND = \"remove-columns\"\n    DESCRIPTION = \"Remove columns from a CSV and write to disk.\"\n\n    @classmethod\n    def gen_command_parser(cls, parser: Optional[ArgumentParser] = None) -> ArgumentParser:\n        parser = super().gen_command_parser()\n        parser.add_argument(\"input_path\", type=Path, help=\"Path to input file\")\n        parser.add_argument(\"columns\", nargs=+, help=\"Column names to remove\")\n        return parser\n\n    def _perform_task(self) -> None:\n        # Pipe the output of CSVReaderTask to CSVColumnRemovalTask\n        (CSVReaderTask(input_path = self.input_path).run() |\n         CSVColumnRemovalTask(columns = self.columns))\n\n\nif __name__ == \"__main__\":\n    RemoveColumnsCLITask.run_command()\n```\n\n## Contributing/Suggestions\n\nContributions and suggestions are welcome! To make a feature request, report a bug, or otherwise comment on existing\nfunctionality, please file an issue. For contributions please submit a PR, but make sure to lint, type-check, and test\nyour code before doing so. Thanks in advance!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/libcommon/task-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc-task",
    "package_url": "https://pypi.org/project/lc-task/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc-task/",
    "project_urls": {
      "Homepage": "https://github.com/libcommon/task-py",
      "Issue Tracker": "https://github.com/libcommon/task-py/issues",
      "Releases": "https://github.com/libcommon/task-py/releases"
    },
    "release_url": "https://pypi.org/project/lc-task/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8451997,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0e2deed1fe8f5c441fe52fdc2c9063d16a0b23f059de7ef71cc5cfc6ce115b2",
          "md5": "519e16ebf4ee1ad1fdac9277ce80b9ba",
          "sha256": "541dac6c0a30a1b98b8d3605459a76f9feb078ed88b02545813cc4cf82c9b8df"
        },
        "downloads": -1,
        "filename": "lc_task-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "519e16ebf4ee1ad1fdac9277ce80b9ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11587,
        "upload_time": "2020-08-15T20:21:28",
        "upload_time_iso_8601": "2020-08-15T20:21:28.180087Z",
        "url": "https://files.pythonhosted.org/packages/f0/e2/deed1fe8f5c441fe52fdc2c9063d16a0b23f059de7ef71cc5cfc6ce115b2/lc_task-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97db69d464e43aed872b29d2d50dc88dd4b7639d996252ea48ba58b4b2e553d9",
          "md5": "c3763e2ec32da9ea131c61368f911158",
          "sha256": "a483909a7161ab07f06c005e2d6b213b1799094678bac733837e03b852f16233"
        },
        "downloads": -1,
        "filename": "lc_task-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3763e2ec32da9ea131c61368f911158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9950,
        "upload_time": "2020-08-15T20:21:30",
        "upload_time_iso_8601": "2020-08-15T20:21:30.671669Z",
        "url": "https://files.pythonhosted.org/packages/97/db/69d464e43aed872b29d2d50dc88dd4b7639d996252ea48ba58b4b2e553d9/lc_task-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d64ddd79ab3d5f88a7227360e6e8427743a24257f9f2a0ade863328aed62e16",
          "md5": "f20a385c703486cea3349b2a82f94b5b",
          "sha256": "c12f7d752299993ede700708c69d503779b468e4d4f448abd58877b421503ffc"
        },
        "downloads": -1,
        "filename": "lc_task-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f20a385c703486cea3349b2a82f94b5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11596,
        "upload_time": "2020-10-20T00:28:06",
        "upload_time_iso_8601": "2020-10-20T00:28:06.450277Z",
        "url": "https://files.pythonhosted.org/packages/7d/64/ddd79ab3d5f88a7227360e6e8427743a24257f9f2a0ade863328aed62e16/lc_task-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed392c8056b55cf2cd3a15729d078f21721b501505b1cad80bd8d8740a2a6de2",
          "md5": "a48b17b9e62ec3c11606c05917a8117b",
          "sha256": "d6cdd1d9e29cfd776ae22769563ca9b021ca7209d7e8dbd5b15c301cbac0d67e"
        },
        "downloads": -1,
        "filename": "lc_task-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a48b17b9e62ec3c11606c05917a8117b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9949,
        "upload_time": "2020-10-20T00:28:07",
        "upload_time_iso_8601": "2020-10-20T00:28:07.717989Z",
        "url": "https://files.pythonhosted.org/packages/ed/39/2c8056b55cf2cd3a15729d078f21721b501505b1cad80bd8d8740a2a6de2/lc_task-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d64ddd79ab3d5f88a7227360e6e8427743a24257f9f2a0ade863328aed62e16",
        "md5": "f20a385c703486cea3349b2a82f94b5b",
        "sha256": "c12f7d752299993ede700708c69d503779b468e4d4f448abd58877b421503ffc"
      },
      "downloads": -1,
      "filename": "lc_task-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f20a385c703486cea3349b2a82f94b5b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11596,
      "upload_time": "2020-10-20T00:28:06",
      "upload_time_iso_8601": "2020-10-20T00:28:06.450277Z",
      "url": "https://files.pythonhosted.org/packages/7d/64/ddd79ab3d5f88a7227360e6e8427743a24257f9f2a0ade863328aed62e16/lc_task-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed392c8056b55cf2cd3a15729d078f21721b501505b1cad80bd8d8740a2a6de2",
        "md5": "a48b17b9e62ec3c11606c05917a8117b",
        "sha256": "d6cdd1d9e29cfd776ae22769563ca9b021ca7209d7e8dbd5b15c301cbac0d67e"
      },
      "downloads": -1,
      "filename": "lc_task-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a48b17b9e62ec3c11606c05917a8117b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9949,
      "upload_time": "2020-10-20T00:28:07",
      "upload_time_iso_8601": "2020-10-20T00:28:07.717989Z",
      "url": "https://files.pythonhosted.org/packages/ed/39/2c8056b55cf2cd3a15729d078f21721b501505b1cad80bd8d8740a2a6de2/lc_task-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}