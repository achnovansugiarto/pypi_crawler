{
  "info": {
    "author": "Yaroslav Polyakov",
    "author_email": "xenon@sysattack.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "﻿# Evalidate\nEvalidate is simple python module for safe eval()'uating user-supplied (possible malicious) logical expressions in python syntax.\n\n## Purpose\nOriginally it's developed for filtering (performing boolean expressions) complex data structures e.g. find employees:\n\n```python\nperson.age>30 and person.salary>5000 or \"Jack\" in person.children\n```\n\nOr find cheap smartphones:\n```python\ncategory=\"smartphones\" and price<300 and stock>0\n```\n\nBut also, it can be used for other expressions, e.g. arithmetical, like\n```python\na+b-100\n```\n\n## Install\n\n```shell\npip3 install evalidate\n```\n\n## Security\n\nBuilt-in python features such as compile() or eval() are quite powerful to run any kind of user-supplied code, but could be insecure if used code is malicious like `os.system(\"rm -rf /\")`. Evalidate works on whitelist principle, allowing code only if it consist only of safe operations (based on authors views about what is safe and what is not, your mileage may vary - but you can supply your list of safe operations)\n\n\n## TL;DR. Just give me safe eval!\n```python       \nfrom evalidate import safeeval, EvalException\n\nsrc=\"a+b\" # source code\n# src=\"__import__('os').system('clear')\"\nc={'a': 1, 'b': 2} # context, variables which will be available for code\n\ntry:\n    result = safeeval(src,c)\n    print(result)\nexcept EvalException as e:\n    print(\"ERR:\", e)\n```\n\nGives output:\n\n    3\n\nIn case of dangerous code:\n```python\nsrc=\"__import__('os').system('clear')\"\n```    \n\noutput will be: `ERR: Operation type Call is not allowed`\n\n\n## Exceptions\nEvalidate throws exceptions `CompilationException`, `ValidationException`, `ExecutionException`. All of them\ninherit from base exception class `EvalException`.\n\n## Configure validation\nEvalidate is very flexible, depending on parameters, same code can either pass validation or raise exception.\n\n### safenodes and addnodes\nEvalidate has built-in set of python operations, which are considered 'safe' (from author point of view). Code is considered valid only if all of it's operations are in this list. You can override this list by adding argument `safenodes` like:\n```python\nresult = evalidate.safeeval(src, context, safenodes=['Expression','BinOp','Num','Add'])\n```\nthis will be enough for `1+1` expression (in src argument), but not for `1-1`. If you will try '1-1', it will report error: `ERROR: Validation error: Operaton type Sub is not allowed`\n\nThis way you can start from scratch and allow only required operations. As an alternative, you can use built-in list of allowed operations and extend it if needed, using `addnodes` argument.\n\nFor example, \"1*1\" will give error:\n\n  ERROR: Validation error: Operaton type Mult is not allowed\n\n\nBut it will work with addnodes:\n```python\nresult = evalidate.safeeval(src,c, addnodes=['Mult'])\n```    \nPlease note, using 'Mult' operation isn't very secure, because for strings it can lead to Out-of-memory:\n```python\nsrc='\"a\"*1000000*1000000*1000000*1000000'\n```    \nand will raise runtime exception: `ERROR: Runtime error (OverflowError): repeated string is too long`\n\n### Allowing function calls\nEvalidate does not allow any function calls by default:\n```\n>>> from evalidate import safeeval, EvalException\n>>> try:\n...   safeeval('int(1)')\n... except EvalException as e:\n...   print(e)\n... \nOperation type Call is not allowed\n```\n\nTo enable int() function, need to allow 'Call' node and  add this function to list of allowed function:\n```\n>>> evalidate.safeeval('int(1)', addnodes=['Call'], funcs=['int'])\n1\n```\nAttempt to call other functions will fail (because it's not in funcs list):\n```\nevalidate.safeeval('1+round(2)', addnodes=['Call'], funcs=['int'])\n```\nThis will throw `ValidationException`.\n\nAttributes calls (`\"aaa\".startswith(\"a\")`) could be allowed (with proper `addnodes` and `attrs`) but\nother indirect function calls (like: `__builtins__['eval'](\"print(1)\")`) are not allowed,\n\n\n### accessing attributes (attrs parameter), data as classes\n\nIf data represented as object with attributes (not as dictionary) we have to add 'Attribute' to safe nodes. Increase salary for person for 200, and additionaly 25 for each year (s)he works in company.\n\n```python\nfrom evalidate import safeeval, EvalException\n\nclass Person:\n    pass\n\np = Person()\np.salary=1000\np.age=5\n\ndata = {'p':p}\nsrc = 'p.salary+200+p.age*25'\ntry:                        \n    result = safeeval(src,data,addnodes=['Attribute','Mult'], attrs=['salary', 'age'])                        \n    print(\"result\", result)\nexcept EvalException as e:\n    print(\"ERR:\",e)\n```\n\n### calling attributes\nThis code will not work:\n~~~\nsafeeval('\"abc\".startswith(\"a\")')\n~~~\nBecause: `evalidate.ValidationException: Operation type Call is not allowed`\n\nTo make it working:\n~~~\nprint(safeeval('\"abc\".startswith(\"a\")', addnodes=['Call', 'Attribute'], attrs=['startswith']))\n~~~\n\n## Functions\n\n`safeeval()` is simplest possible replacement to `eval()`. It is good to evaluate something once or few times, where speed is not an issue. If you need to eval same code 2nd time, it will take same 'long' time to parse/validate code. \n\n`evalidate()` is just little more complex, but returns validated safe python AST node, which can be compiled to python bytecode, and executed at full speed. (And this code is safe after evalidate)\n\n`security.test_security()` checks configuration(nodes, funcs, attrs) against set of attacks.\n\n\n### evalidate.safeeval()\n\n```python\nresult = safeeval(expression, context={}, safenodes=None, addnodes=None, funcs=None, attrs=None)\n```\n\n`safeeval` is higher-level wrapper of evalidate(), which validates code and runs it (if validation is successful). Throws exception if compilation(parsing), validation or execution fails.\n\n`expression` - python expression like `salary+100` or `category=\"smartphones\" and price<300 and stock>0`.\n\n`context` - dictionary of variables, available for evaluated code.\n\n`safenodes`, `addnodes`, `funcs` and `attrs` are same as in `evalidate()`\n\nreturns result of evaluation of expression. \n\n### evalidate.evalidate()     \n```python\nnode = evalidate(expression, safenodes=None, addnodes=None, funcs=None, attrs=None)\n```\n`evalidate()` is main (and recommended to use) method, performs parsing of python expession, validates it, and returns python AST (Abstract Syntax Tree) structure, which can be later compiled and executed. Evalidate does not evaluates code, use `compile()` and `eval()` after `evalidate()`.\n\n\n```python            \n\n>>> import evalidate\n>>> node = evalidate.evalidate('1+2')\n>>> code = compile(node,'<usercode>','eval')\n>>> eval(code)\n3\n```    \n\n- `expression` - python expression `salary+100` or `category=\"smartphones\" and price<300 and stock>0`.\n- `safenodes` - list of allowed nodes. This will *override* built-in list of allowed nodes. e.g. `safenodes=['Expression','BinOp','Num','Add'])`\n- `addnodes` - list of allowed nodes. This will *extend* built-in lsit of allowed nodes. e.g. `addnodes=['Mult']`\n- `funcs` - list of allowed function calls. You need to add 'Call' to safe nodes. e.g. `funcs=['int']`\n- `attrs` - list of allowed attributes. You need to add 'Attribute' to attrs. e.g. `attrs=['salary']`.\n\n\nevalidate() throws `CompilationException` if cannot parse source code and `ValidationException` if it doesn't like source code (if code has unsafe operations).\n\nEven if evalidate is successful, this doesn't guarantees that code will run well, For example, code still can have `NameError` (if tries to access undefined variable) or `ZeroDivisionError`.\n\nevalidate uses [ast.parse()](https://docs.python.org/3/library/ast.html#ast.parse) and returns [AST node](https://docs.python.org/3/library/ast.html#node-classes).\n\n>Warning\n>\n>It is possible to crash the Python interpreter with a sufficiently large/complex string due to stack depth limitations in Python’s AST compiler. \n\nIn my test, works well with 200 nested int(): `int(int(.... int(1)...))` but not with 201. Source code is 1000+ characters. But even if evalidate will get such code, it will just raise `CompilationException`.\n\n\n### evalidate.security.test_security\nEvalidate is very flexible and it's possible to shoot yourself in foot if you will try hard. `test_security()` checks your configuration (addnodes/safenodes, funcs, attrs) against given list of possible attack code or against built-in list of attacks. `test_security()` returns True if everything is OK (all attacks raised ValidationException) or False if something passed.\n\nThis code will never print (I hope).\n~~~\nfrom evalidate.security import test_security\n\ntest_security() or print(\"default rules are vulnerable!\")\n~~~\n\nBut this will fail because nodes/funcs leads to successful validation for attack (suppose you do not want anyone to call `int()`)\n~~~\nfrom evalidate.security import test_security\n\nattacks = ['int(1)']\n\ntest_security(attacks, addnodes=['Call'], funcs=['int'], verbose=True)\n~~~\n\nIt will print:\n~~~\nTesting attack code:\nint(1)\nProblem! Attack passed validation without exception!\nCode:\nint(1)\n~~~\n\n\n\n\n## Examples\n\n### Filtering by user-supplied condition ###\n```python\nfrom evalidate import safeeval, EvalException\n\ndepot = [\n    {\n        'book': 'Sirens of Titan',\n        'price': 12,\n        'stock': 4\n    },\n    {\n        'book': 'Gone Girl',\n        'price': 9.8,\n        'stock': 0\n    },\n    {\n        'book': 'Choke',\n        'price': 14,\n        'stock': 2\n    },\n    {\n        'book': 'Pulp',\n        'price': 7.45,\n        'stock': 4\n    }\n]\n\n#src='stock==0' # books out of stock\nsrc='stock>0 and price>8' # expensive book available for sale\n\nfor book in depot:\n    try:\n        result = safeeval(src,book)\n        if result:\n            print(book)\n    except EvalException as e:\n        print(\"ERR:\", e)\n```    \n\nWith first src line ('stock==0') it gives:\n\n    {'price': 9.8, 'book': 'Gone Girl', 'stock': 0}\n\nWith second src line ('stock>0 and price>8') it gives:\n\n    {'price': 12, 'book': 'Sirens of Titan', 'stock': 4}\n    {'price': 14, 'book': 'Choke', 'stock': 2}\n\nNote, it uses simple and slow function safeeval(). Each call of safeeval it will parse and validate same source code, and it's not effective.  But it's OK if you have small set of elements to check.\n\nFor better example check `examples/products.py` in repo. It uses dataset \"products\" from https://dummyjson.com/ and it's much more effective on large lists.\n\n~~~shell\n# print all 100 products\n./products.py\n\n# Only cheap products, 8 matches\n./products.py 'price<20'\n\n# smartphones (5)\n./products.py 'category==\"smartphones\"'\n\n# good smartphones\n./products.py 'category==\"smartphones\" and rating>4.5'\n\n# cheap smartphones\n./products.py 'category==\"smartphones\" and price<300'\n~~~\n\n### Validate, compile and evaluate code\n```python\nimport evalidate\n\ndef test(src):   \n    data={'one':1,'two':2}\n\n    try:\n        node = evalidate.evalidate(src)\n    except evalidate.CompilationException:\n        print(\"Bad source code:\", repr(src))\n        return\n    except evalidate.ValidationException:\n        print(\"Dangerous code:\", repr(src))\n        return\n\n    code = compile(node,'<usercode>','eval')\n    try:\n        result = eval(code,{},data)\n        print(\"result:\", result)\n    except Exception as e:\n        # almost any kind of exception can happen here\n        print(\"Runtime exception:\",e)\n\nsrclist=['one+two+3', 'one+two+3+os.system(\"clear\")', '', '1/0']\n\nfor src in srclist:\n    test(src)    \n```    \n\n\n## Similar projects and benchmark\n\n[asteval](https://newville.github.io/asteval/)\n\nWhile asteval can compute much more complex code (define functions, use python math libraries) it has drawbacks:\n- asteval is much slower (evalidate can be used at speed of eval() python bytecode)\n- user can provide source code which runs very long time and consumes many resources \n\nevalidate is good to run short same code against different data.\n\n## Benchmarking\nWe use `evalidate-vs-asteval.py` which is in benchmark/ directory of repository\n~~~\n$ ./evalidate-vs-asteval.py \nSrc: a+b\nContext: {'a': 1, 'b': 2}\nRuns: 100000\nasteval: 3.538s\nasteval (reuse interpreter): 1.232s\nsafeeval: 2.384s\nevalidate/compile/eval (reuse compiled code): 0.017s\n~~~\n0.017s vs 1.232s\n\n\n## Read about eval() risks\n\n- https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\n- https://netsec.expert/posts/breaking-python3-eval-protections/\n- https://realpython.com/python-eval-function/\n\nNote: realpython article shows example with nice short method of validation source (using `code.co_names`), \nbut it's vulnerable, it passes \"bomb\" from Ned Batchelder article (bomb has empty `co_names` tuple) and crash interpreter. Evalidate can block this code and similar bombs (unless you will intentionally configure evalidate to pass specific bomb code. Yes, with evalidate it is hard to shoot yourself in the foot, but it is possible if you will try hard).\n\n## More info\n\nWant more info? Check source code of module, it's very short and simple, easy to modify\n\n## Contact\n\nWrite me: yaroslaff at gmail.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/yaroslaff/evalidate",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "evalidate",
    "package_url": "https://pypi.org/project/evalidate/",
    "platform": null,
    "project_url": "https://pypi.org/project/evalidate/",
    "project_urls": {
      "Homepage": "http://github.com/yaroslaff/evalidate"
    },
    "release_url": "https://pypi.org/project/evalidate/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Validation and secure evaluation of untrusted python expressions",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15471055,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de3cf0dc8919585a6d152d56605fbe260fb789b846da497904cf22186469f32",
          "md5": "5be24e69c9cec4d3942180b30fb0a957",
          "sha256": "c939d6b300502c07750386108d938cfb47ae2b11bd00143bfbd1bef740989399"
        },
        "downloads": -1,
        "filename": "evalidate-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5be24e69c9cec4d3942180b30fb0a957",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1793,
        "upload_time": "2014-10-04T15:35:15",
        "upload_time_iso_8601": "2014-10-04T15:35:15.241079Z",
        "url": "https://files.pythonhosted.org/packages/5d/e3/cf0dc8919585a6d152d56605fbe260fb789b846da497904cf22186469f32/evalidate-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c2a5579ead8502e8b3bdc1530ea3554375d074bddedff35772b938e46c634b5",
          "md5": "04bb2a464b87ac3c474c5ff8e893a37f",
          "sha256": "b9fc1f1d6864f33348be53ae893f8720a6988e104f921ac99e7d83b96e20c628"
        },
        "downloads": -1,
        "filename": "evalidate-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "04bb2a464b87ac3c474c5ff8e893a37f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1787,
        "upload_time": "2014-10-04T18:05:04",
        "upload_time_iso_8601": "2014-10-04T18:05:04.984253Z",
        "url": "https://files.pythonhosted.org/packages/4c/2a/5579ead8502e8b3bdc1530ea3554375d074bddedff35772b938e46c634b5/evalidate-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60c30be3b2c7f503484802c7c3eb3a2130ce52a9ef04f38de9425d31e236bcdc",
          "md5": "bdfbbf424447f24caab99e4be575ef48",
          "sha256": "4a1672f85fa85997dd244ce29d4fe4321fe6997d41152fba38124363ef1cee90"
        },
        "downloads": -1,
        "filename": "evalidate-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bdfbbf424447f24caab99e4be575ef48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1790,
        "upload_time": "2014-10-04T18:06:41",
        "upload_time_iso_8601": "2014-10-04T18:06:41.003424Z",
        "url": "https://files.pythonhosted.org/packages/60/c3/0be3b2c7f503484802c7c3eb3a2130ce52a9ef04f38de9425d31e236bcdc/evalidate-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f522e60bb2f6d4da1c81d3ba0797cc2d0830120f72d763f00839918e01e81bd3",
          "md5": "dad1ee596ab1171d992a9a32e59c8cc9",
          "sha256": "f6541fc2ab686747b7813a9f5d0a768f7cca7ad0096997bba49c95f89ff07347"
        },
        "downloads": -1,
        "filename": "evalidate-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dad1ee596ab1171d992a9a32e59c8cc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1853,
        "upload_time": "2015-01-17T04:33:25",
        "upload_time_iso_8601": "2015-01-17T04:33:25.793005Z",
        "url": "https://files.pythonhosted.org/packages/f5/22/e60bb2f6d4da1c81d3ba0797cc2d0830120f72d763f00839918e01e81bd3/evalidate-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af5a8d1772cda097c762945358e8c84727446d2faff602841d77eff9f2389fbd",
          "md5": "17589bdb86fb26ae168ed535e3d899b9",
          "sha256": "8caa52f4ecfcc2de050e9a59cdf19d708d8d6ffd417ee4ed95a6d3701f6edba5"
        },
        "downloads": -1,
        "filename": "evalidate-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "17589bdb86fb26ae168ed535e3d899b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1854,
        "upload_time": "2015-01-20T17:00:09",
        "upload_time_iso_8601": "2015-01-20T17:00:09.281206Z",
        "url": "https://files.pythonhosted.org/packages/af/5a/8d1772cda097c762945358e8c84727446d2faff602841d77eff9f2389fbd/evalidate-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dd1ebc154f2f88f90be612b515fd284504fa4ca9de77854afa5a1e5db6cf8a6",
          "md5": "b9dd3b82de7d31c3628cae7e065bf43a",
          "sha256": "5ee01f17353ff63f818c7ee228b0e0a4e4f24833eae9fc48467799be08061e57"
        },
        "downloads": -1,
        "filename": "evalidate-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b9dd3b82de7d31c3628cae7e065bf43a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1992,
        "upload_time": "2015-01-21T11:57:32",
        "upload_time_iso_8601": "2015-01-21T11:57:32.069134Z",
        "url": "https://files.pythonhosted.org/packages/6d/d1/ebc154f2f88f90be612b515fd284504fa4ca9de77854afa5a1e5db6cf8a6/evalidate-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "563c3b474e4fd74312fae2b11ffe63bf00805ffe0c8cf92cdfd2daf4cc7fe693",
          "md5": "f29f3981cd8ceed7402ffa236a7f7c76",
          "sha256": "f69bd0f88defecc3425a4d6055900000c7137d84826a3d03613ea3938bbd0943"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f29f3981cd8ceed7402ffa236a7f7c76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2083,
        "upload_time": "2015-05-28T19:33:21",
        "upload_time_iso_8601": "2015-05-28T19:33:21.226754Z",
        "url": "https://files.pythonhosted.org/packages/56/3c/3b474e4fd74312fae2b11ffe63bf00805ffe0c8cf92cdfd2daf4cc7fe693/evalidate-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5873f22ba6aefadf364d0d6cca9654b6cb0f506da83dbec53e97ee44cb79cf1",
          "md5": "da6145a9fcbbdcdeef1fe3714f633a98",
          "sha256": "a04361b85ca0c4908d9d152cb87f97ca66bdf559639e6172e518528cd49c30e3"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "da6145a9fcbbdcdeef1fe3714f633a98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2083,
        "upload_time": "2015-05-28T19:39:15",
        "upload_time_iso_8601": "2015-05-28T19:39:15.189087Z",
        "url": "https://files.pythonhosted.org/packages/f5/87/3f22ba6aefadf364d0d6cca9654b6cb0f506da83dbec53e97ee44cb79cf1/evalidate-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b63dca5d00994b749cb0fe13a73735839c71a6f31ce26ebe91fc63173ccc76",
          "md5": "5f3f0f68db465ce3336ce7bf0b77d62a",
          "sha256": "b70c12c27b685c6e27a6bc8e6a8ef78ed767e147d935080930afbdc48ec326f9"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3f0f68db465ce3336ce7bf0b77d62a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5924,
        "upload_time": "2022-08-23T14:35:42",
        "upload_time_iso_8601": "2022-08-23T14:35:42.163451Z",
        "url": "https://files.pythonhosted.org/packages/e5/b6/3dca5d00994b749cb0fe13a73735839c71a6f31ce26ebe91fc63173ccc76/evalidate-0.7.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "112385884a724411dbdf2e9dfaf2dab5bfbf0acacecbc848b2e9d3662a8bd911",
          "md5": "38769e0d181007b1eeb03f7d27919692",
          "sha256": "429c4f0a2cf01a4c2e94c3c1680ecaf41d76d2fcc6fe76b9d71d41200c1716e2"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "38769e0d181007b1eeb03f7d27919692",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4804,
        "upload_time": "2018-10-01T20:53:35",
        "upload_time_iso_8601": "2018-10-01T20:53:35.244126Z",
        "url": "https://files.pythonhosted.org/packages/11/23/85884a724411dbdf2e9dfaf2dab5bfbf0acacecbc848b2e9d3662a8bd911/evalidate-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3612f4ba5cb5802f09bb9121dfb575e0fede01aa82994526feed6152d227f6ef",
          "md5": "b6c9da2b83d897752363a8b9c9bf9e14",
          "sha256": "4729fc42c09836c8bf28ec731dc32086ccfd665340938d897531105d1ab97a1d"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b6c9da2b83d897752363a8b9c9bf9e14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5740,
        "upload_time": "2018-10-01T21:02:53",
        "upload_time_iso_8601": "2018-10-01T21:02:53.351718Z",
        "url": "https://files.pythonhosted.org/packages/36/12/f4ba5cb5802f09bb9121dfb575e0fede01aa82994526feed6152d227f6ef/evalidate-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c8249a1bd923366cca11dff92e67d1b0c6cc4bfb4aec7cf288e65376010773e",
          "md5": "f01ce64af252b9d905e2f5c122af9863",
          "sha256": "be6e5b5d58aa037d948db677925d72297ca4b503ddc0141d96f2ee5487a8a034"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f01ce64af252b9d905e2f5c122af9863",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5779,
        "upload_time": "2018-10-01T21:16:27",
        "upload_time_iso_8601": "2018-10-01T21:16:27.538235Z",
        "url": "https://files.pythonhosted.org/packages/5c/82/49a1bd923366cca11dff92e67d1b0c6cc4bfb4aec7cf288e65376010773e/evalidate-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d935412b40cac393554a435472ee05c536f31b461f5e1f0e6bc28862e26d8f58",
          "md5": "9991ebf88eb5f3097a1bdb7e77e4f9dd",
          "sha256": "f0c4b12b72d2aed05ad55dd7a3998b47646d94b52fc8c864ae6a8c8640c6054b"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9991ebf88eb5f3097a1bdb7e77e4f9dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5788,
        "upload_time": "2018-10-02T15:21:21",
        "upload_time_iso_8601": "2018-10-02T15:21:21.697324Z",
        "url": "https://files.pythonhosted.org/packages/d9/35/412b40cac393554a435472ee05c536f31b461f5e1f0e6bc28862e26d8f58/evalidate-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5c437fee204e378755c8aea64a1e62684a710d482c0b6140923cc52e9cff862",
          "md5": "2b28de2e7ea310c9357c0dd8eb61a7fd",
          "sha256": "cf4a93cede189553fc2dffe1880ae67197bdeca7d1cf3bba012c91aefe211852"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2b28de2e7ea310c9357c0dd8eb61a7fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6210,
        "upload_time": "2018-10-04T18:04:04",
        "upload_time_iso_8601": "2018-10-04T18:04:04.921406Z",
        "url": "https://files.pythonhosted.org/packages/a5/c4/37fee204e378755c8aea64a1e62684a710d482c0b6140923cc52e9cff862/evalidate-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65a828fd618da4e6d0eeacb523687c313acc320f5f85e4878f8d14e56cfb7cec",
          "md5": "d44609a4db7ac928676262ba46dfd0fe",
          "sha256": "637f97bd3fad19f60a077924aa26a5818065316efe8333bda33e11da6b4afd32"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d44609a4db7ac928676262ba46dfd0fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6299,
        "upload_time": "2019-06-20T18:09:30",
        "upload_time_iso_8601": "2019-06-20T18:09:30.380504Z",
        "url": "https://files.pythonhosted.org/packages/65/a8/28fd618da4e6d0eeacb523687c313acc320f5f85e4878f8d14e56cfb7cec/evalidate-0.7.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb8bbd886ecb9f436757c37fb3a82e6aac3450a735ff7c2a2162faced27924d9",
          "md5": "f0abfddad4ebccc7b8d29ca1b960cf81",
          "sha256": "f2211a4a5e4451d49e47d1b78efe0b3a7d460f5bdaf081024fa10a9e51c1cefe"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0abfddad4ebccc7b8d29ca1b960cf81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5949,
        "upload_time": "2021-09-12T11:08:23",
        "upload_time_iso_8601": "2021-09-12T11:08:23.245561Z",
        "url": "https://files.pythonhosted.org/packages/fb/8b/bd886ecb9f436757c37fb3a82e6aac3450a735ff7c2a2162faced27924d9/evalidate-0.7.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e0eede3c8d463a0ecbe6beb4f917c9fa71e13b99de1e261f3f70adb905b026",
          "md5": "904fc2b433729c84dd8cd308578cf3cf",
          "sha256": "fd28f0515dfd17a7f016cade8633903bd6766895415d3fef2acde43c85070d34"
        },
        "downloads": -1,
        "filename": "evalidate-0.7.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "904fc2b433729c84dd8cd308578cf3cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5918,
        "upload_time": "2022-08-10T17:46:00",
        "upload_time_iso_8601": "2022-08-10T17:46:00.305380Z",
        "url": "https://files.pythonhosted.org/packages/a2/e0/eede3c8d463a0ecbe6beb4f917c9fa71e13b99de1e261f3f70adb905b026/evalidate-0.7.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ba86ee18b63d78b54193e68d2ddbd3553554c6d48f026e0e93a365497ec8e54",
          "md5": "e8403812bb666098ceccef09a1a6c783",
          "sha256": "bd70fbe0da3f1ab51a1e18cf9a1f99db5633beebd0908f4679e6f488aa7f9355"
        },
        "downloads": -1,
        "filename": "evalidate-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8403812bb666098ceccef09a1a6c783",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6570,
        "upload_time": "2022-08-24T19:56:47",
        "upload_time_iso_8601": "2022-08-24T19:56:47.388734Z",
        "url": "https://files.pythonhosted.org/packages/7b/a8/6ee18b63d78b54193e68d2ddbd3553554c6d48f026e0e93a365497ec8e54/evalidate-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14fcde69133d3a6de29be2ac84efd1c9f22c20638ea907c5f7ba476e9bd48204",
          "md5": "a06c407eefbc4cd80f3e74958227f4c9",
          "sha256": "8eb985ff7650ea16cf566cf4fef4d15b05af5a05d2b2eb9ce6099985ee144e25"
        },
        "downloads": -1,
        "filename": "evalidate-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a06c407eefbc4cd80f3e74958227f4c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7515,
        "upload_time": "2022-08-25T23:37:11",
        "upload_time_iso_8601": "2022-08-25T23:37:11.757934Z",
        "url": "https://files.pythonhosted.org/packages/14/fc/de69133d3a6de29be2ac84efd1c9f22c20638ea907c5f7ba476e9bd48204/evalidate-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc6c5debcffc20a60e5b5fbe749c42e5e5e9cef1bbf2a11cbe3e517788e20ccf",
          "md5": "bb03d85972309b625abc30b117768ffa",
          "sha256": "85adf36872e431c96433930b69ab6b510014737fa6a32316b9e37cebb926e850"
        },
        "downloads": -1,
        "filename": "evalidate-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb03d85972309b625abc30b117768ffa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9222,
        "upload_time": "2022-08-28T14:36:14",
        "upload_time_iso_8601": "2022-08-28T14:36:14.633640Z",
        "url": "https://files.pythonhosted.org/packages/cc/6c/5debcffc20a60e5b5fbe749c42e5e5e9cef1bbf2a11cbe3e517788e20ccf/evalidate-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8d1c2988bc432070280af5453cb65849c6b9689ba032fab0d4fc1b3b0a87997",
          "md5": "697df2eaff0afedae1b3d7972abf38b5",
          "sha256": "7830c91fc828a27bb4e9f01db2da6fabbddafda3d067af642758b2ce33521484"
        },
        "downloads": -1,
        "filename": "evalidate-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "697df2eaff0afedae1b3d7972abf38b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9838,
        "upload_time": "2022-10-20T08:34:38",
        "upload_time_iso_8601": "2022-10-20T08:34:38.567048Z",
        "url": "https://files.pythonhosted.org/packages/a8/d1/c2988bc432070280af5453cb65849c6b9689ba032fab0d4fc1b3b0a87997/evalidate-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc6c5debcffc20a60e5b5fbe749c42e5e5e9cef1bbf2a11cbe3e517788e20ccf",
        "md5": "bb03d85972309b625abc30b117768ffa",
        "sha256": "85adf36872e431c96433930b69ab6b510014737fa6a32316b9e37cebb926e850"
      },
      "downloads": -1,
      "filename": "evalidate-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb03d85972309b625abc30b117768ffa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9222,
      "upload_time": "2022-08-28T14:36:14",
      "upload_time_iso_8601": "2022-08-28T14:36:14.633640Z",
      "url": "https://files.pythonhosted.org/packages/cc/6c/5debcffc20a60e5b5fbe749c42e5e5e9cef1bbf2a11cbe3e517788e20ccf/evalidate-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8d1c2988bc432070280af5453cb65849c6b9689ba032fab0d4fc1b3b0a87997",
        "md5": "697df2eaff0afedae1b3d7972abf38b5",
        "sha256": "7830c91fc828a27bb4e9f01db2da6fabbddafda3d067af642758b2ce33521484"
      },
      "downloads": -1,
      "filename": "evalidate-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "697df2eaff0afedae1b3d7972abf38b5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9838,
      "upload_time": "2022-10-20T08:34:38",
      "upload_time_iso_8601": "2022-10-20T08:34:38.567048Z",
      "url": "https://files.pythonhosted.org/packages/a8/d1/c2988bc432070280af5453cb65849c6b9689ba032fab0d4fc1b3b0a87997/evalidate-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}