{
  "info": {
    "author": "",
    "author_email": "David Horak <info@davidhorak.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Space Avocado X12 Parser\r\nA simple X12 file parser, allowing to parse X12 loops and segment based on schema.\r\n\r\n*Credit: Inspired by [Maven Central X12 Parser](https://github.com/ryanco/x12-parser).*\r\n\r\n> X12 is a message formatting standard used with Electronic Data Interchange (EDI) documents for trading partners to share electronic business documents in an agreed-upon and standard format. It is the most common EDI standard used in the United States.\r\n\r\n**X12 Document List**: https://en.wikipedia.org/wiki/X12_Document_List\r\n\r\n**X12 Schematic:**\r\n\r\n![X12-Schematic](https://user-images.githubusercontent.com/1224609/223794653-9b3abcfe-cb6b-4bd5-aec6-14f07e9280e4.gif)\r\n\r\nSee more details at https://x12.org/.\r\n\r\n---\r\n\r\n**Table of Content**\r\n- [Space Avocado X12 Parser](#space-avocado-x12-parser)\r\n  - [Installation](#installation)\r\n  - [How to use](#how-to-use)\r\n    - [1. Define a schema for the x12 file to be parsed.](#1-define-a-schema-for-the-x12-file-to-be-parsed)\r\n      - [Loop/Segment Matcher Predicate](#loopsegment-matcher-predicate)\r\n      - [Loop schema could be decorated with segment schemas](#loop-schema-could-be-decorated-with-segment-schemas)\r\n    - [2. Parse](#2-parse)\r\n      - [Loop Operations](#loop-operations)\r\n      - [Segment Operations](#segment-operations)\r\n    - [3. Optional: Analyze parsed loop.](#3-optional-analyze-parsed-loop)\r\n  - [Contributing](#contributing)\r\n  - [License](#license)\r\n\r\n---\r\n\r\n## Installation\r\n\r\nYou can install the **Space Avocado X12 Parser** from [PyPI](https://pypi.org/project/spaceavocado-x12/):\r\n\r\n    python -m pip install spaceavocado-x12\r\n\r\nThe reader is supported on Python 3.7 and above.\r\n\r\n## How to use\r\n\r\n### 1. Define a schema for the x12 file to be parsed.\r\n\r\n```py\r\nfrom x12.schema.schema import Schema, Usage, by_segment, by_segment_element\r\n\r\ndef schema() -> Schema:\r\n    x12 = Schema('X12')\r\n    isa = x12.add_child('ISA', Usage.REQUIRED, by_segment('ISA'))\r\n    gs = isa.add_child('GS', Usage.REQUIRED, by_segment('GS'))\r\n    st = gs.add_child('ST', Usage.REQUIRED, by_segment_element('ST', 1, ['835']))\r\n\r\n    st.add_child('1000A', Usage.REQUIRED, by_segment_element('N1', 1, ['PR']))\r\n    st.add_child('1000B', Usage.REQUIRED, by_segment_element('N1', 1, ['PE']))\r\n\r\n    mm = st.add_child('2000', Usage.REQUIRED, by_segment('LX'))\r\n    mmc = mm.add_child('2100', Usage.REQUIRED, by_segment('CLP'))\r\n    mmc.add_child('2110', Usage.REQUIRED, by_segment('SVC'))\r\n\r\n    gs.add_child('SE', Usage.REQUIRED, by_segment('SE'))\r\n    isa.add_child('GE', Usage.REQUIRED, by_segment('GE'))\r\n    x12.add_child('IEA', Usage.REQUIRED, by_segment('IEA'))\r\n\r\n    return x12\r\n```\r\n\r\nTo see the structure of the schema: ```print(schema())```.\r\n\r\n```\r\n+--X12\r\n|  +--ISA\r\n|  |  +--GS\r\n|  |  |  +--ST\r\n|  |  |  |  +--1000A\r\n|  |  |  |  +--1000B\r\n|  |  |  |  +--2000\r\n|  |  |  |  |  +--2100\r\n|  |  |  |  |  |  +--2110\r\n|  |  |  +--SE\r\n|  |  +--GE\r\n|  +--IEA\r\n```\r\n\r\nThe above is an example of true nested structure of x12 835 document schema but schema could be defied in any, i.e. you can get flat structure if needed, e.g.:\r\n\r\n```py\r\nfrom x12.schema.schema import Schema, Usage, by_segment, by_segment_element\r\n\r\ndef schema() -> Schema:\r\n    x12 = Schema('X12')\r\n\r\n    x12.add_child('1000A', Usage.REQUIRED, by_segment_element('N1', 1, ['PR']))\r\n    x12.add_child('1000B', Usage.REQUIRED, by_segment_element('N1', 1, ['PE']))\r\n\r\n    x12.add_child('2000', Usage.REQUIRED, by_segment('LX'))\r\n    x12.add_child('2100', Usage.REQUIRED, by_segment('CLP'))\r\n    x12.add_child('2110', Usage.REQUIRED, by_segment('SVC'))\r\n\r\n    return x12\r\n```\r\n\r\n```\r\n+--X12\r\n|  +--1000A\r\n|  +--1000B\r\n|  +--2000\r\n|  +--2100\r\n|  +--2110\r\n```\r\n\r\n#### Loop/Segment Matcher Predicate\r\nThere are 2 build-in predicates, for the most commonly used situations:\r\n\r\n**by_segment**\r\n- Used to determine a **loop** by **segment ID**.\r\n- E.g.: ```by_segment('LX')``` matches this segment ```LX*DATA_1*DATA_N~```.\r\n\r\n**by_segment_element**\r\n- Used to determine a **loop** by **segment ID** and **element value(s)** at given **element index**.\r\n- In many situations loop could start with the same segment id but differing the element values.\r\n- E.g.: ```by_segment_element('N1', 1, ['PR', 'PE'])``` matches this segment ```N1*PR*DATA_N~``` or ```N1*PE*DATA_N~``` but not ```N1*QE*DATA_N~```.\r\n\r\nA custom predicate function could be used:\r\n- ```x12.add_child('2000', Usage.REQUIRED, lambda tokens: tokens[0] == \"LX\")```.\r\n- The above is an equivalent of ```x12.add_child('2000', Usage.REQUIRED, by_segment('LX'))```.\r\n\r\n#### Loop schema could be decorated with segment schemas\r\nThis is useful of [Analyze parsed loop](#3-optional-analyze-parsed-loop).\r\n\r\nExample:\r\n```py\r\nfrom x12.schema.schema import Segment\r\n\r\ngs.add_child('ST', Usage.REQUIRED, by_segment_element('ST', 1, ['835'])).with_segments(\r\n    Segment('ST', Usage.REQUIRED, by_segment('ST')),\r\n    Segment('BPR', Usage.REQUIRED, by_segment('BPR')),\r\n    Segment('TRN', Usage.REQUIRED, by_segment('TRN')),\r\n    Segment('REF', Usage.REQUIRED, by_segment('REF')),\r\n    Segment('DTM', Usage.REQUIRED, by_segment('DTM'))\r\n)\r\n```\r\n- Uses the same Usage and predicates as **Loop** schema.\r\n- The segment schemas are in sequential order of anticipated segments within the given loop.\r\n\r\n\r\n### 2. Parse\r\n\r\n```py\r\nfrom x12.schema.schema import Schema, Usage\r\nfrom x12.parser.parse import parse\r\n\r\n# Real schema here\r\nschema = Schema(\"X12\")\r\n\r\nloop = parse(filepath_to_x12_file, schema)\r\n```\r\n\r\n**Note**: if the x12 file does use the standard segment, element and composite separators, you can provide custom definition:\r\n\r\n```py\r\nfrom x12.parser.context import Context\r\n\r\nloop = parse(filepath_to_x12_file, schema, Context(\"~\", \"*\", \":\"))\r\n```\r\n\r\n#### Loop Operations\r\n\r\n**Serialization:**\r\nLoop could be serialized to:\r\n- XML: ```loop.to_xml()```\r\n- original x12 format ```str(loop)```\r\n- Debug view: ```loop.to_debug()```. This provides visual distinction for loops and segments.\r\n    ![debug view](https://user-images.githubusercontent.com/1224609/223806918-b1e30dc6-bb5d-4492-a8f7-4cc7d33700ab.jpg)\r\n\r\n**Find Child Loops:**\r\n```py\r\n# find loop by loop schema name\r\n\r\n# Non recursive, search only within loop's direct children loops\r\nloops = loop.find_loops(\"ST\")\r\n\r\n# Recursive, find loops anywhere in the downstream tree structure.\r\nloops = loop.find_loops(\"NM1\", True)\r\n```\r\n\r\n**Find Segments:**\r\n```py\r\n# find segment by segment ID\r\n\r\n# Non recursive, search only within loop's segments\r\nsegments = loop.find_segments(\"ST\")\r\n\r\n# Recursive, find segments anywhere in the downstream tree structure.\r\nsegments = loop.find_segments(\"NM1\", True)\r\n```\r\n\r\n**Other operations:**\r\n- To access loop parent: ```loop.parent```\r\n- Direct access to children loops: ```loop.loops```\r\n- Direct access to segments: ```loop.segments```\r\n\r\n#### Segment Operations\r\n\r\n**Serialization:**\r\nSegment could be serialized to:\r\n- XML: ```segment.to_xml()```\r\n- original x12 format ```str(segment)```\r\n- Debug view: ```segment.to_debug()```. This provides visual distinction for segments.\r\n    ![debug view](https://user-images.githubusercontent.com/1224609/223809367-518981df-164e-4a8d-b3bd-5a7185e26178.jpg)\r\n\r\n**Access segment elements**\r\n```segment.elements```\r\n\r\n### 3. Optional: Analyze parsed loop.\r\nThis is an optional step to analyze the parsed document to see missing and unexpected loops/segments based on the schema.\r\n\r\n```py\r\nfrom x12.schema.schema import Schema, Usage\r\nfrom x12.parser.parse import parse\r\nfrom x12.parser.analyze import analyze\r\n\r\n# Real schema here\r\nschema = Schema(\"X12\")\r\n\r\nloop = parse(filepath_to_x12_file, schema)\r\n\r\nprint(analyze(loop))\r\n```\r\n\r\n**Example:**\r\n\r\n![analyze](https://user-images.githubusercontent.com/1224609/223810446-b3371fe5-5d41-4d2e-ba24-2245edb8f1d2.jpg)\r\n- Red indicates missing loops / segments.\r\n- Yellow indicates unexpected segments.\r\n\r\n\r\n---\r\n\r\n## Contributing\r\n\r\nSee [contributing.md](https://github.com/spaceavocado/x12/blob/master/contributing.md).\r\n\r\n## License\r\n\r\nSpace Avocado X12 Parser is released under the MIT license. See [LICENSE.md]([LICENSE.md](https://github.com/spaceavocado/x12/blob/master/LICENSE.md)).\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "x12,parser,schema",
    "license": "Copyright (c) 2023, David Horak (info@davidhorak.com)  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spaceavocado-x12",
    "package_url": "https://pypi.org/project/spaceavocado-x12/",
    "platform": null,
    "project_url": "https://pypi.org/project/spaceavocado-x12/",
    "project_urls": {
      "repository": "https://github.com/spaceavocado/x12"
    },
    "release_url": "https://pypi.org/project/spaceavocado-x12/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Simple X12 files parser.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17313700,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28a7f621d3cba92de7bc14a8dc0fac0971218160598e12e74250365d67af790d",
          "md5": "a045566fc520078dc4d0936072005013",
          "sha256": "dd092623387d636913b87511f08d045fe14952f1bccbd9905c4e6da047167222"
        },
        "downloads": -1,
        "filename": "spaceavocado_x12-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a045566fc520078dc4d0936072005013",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11281,
        "upload_time": "2023-03-08T19:24:35",
        "upload_time_iso_8601": "2023-03-08T19:24:35.168995Z",
        "url": "https://files.pythonhosted.org/packages/28/a7/f621d3cba92de7bc14a8dc0fac0971218160598e12e74250365d67af790d/spaceavocado_x12-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddfcd117cb9ba1bcb6a228203f48893039c4bdddbed90d38388caac00de01b44",
          "md5": "03a939a28ad83f3dce523ac161d0e485",
          "sha256": "924a056fb2233fe087688441d5320c5e00c3bed01e3b112131cb2d6313667a52"
        },
        "downloads": -1,
        "filename": "spaceavocado-x12-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03a939a28ad83f3dce523ac161d0e485",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12150,
        "upload_time": "2023-03-08T19:24:36",
        "upload_time_iso_8601": "2023-03-08T19:24:36.820529Z",
        "url": "https://files.pythonhosted.org/packages/dd/fc/d117cb9ba1bcb6a228203f48893039c4bdddbed90d38388caac00de01b44/spaceavocado-x12-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f29e84a1c6500f8d2fca556f94bfb54330420160aa46c3de4ecc5abe04f6fdb",
          "md5": "d10809856a89a83d93e5c4d21cddcd84",
          "sha256": "fa3fc9313ff992e0dc6761e44a9e38f992203f218fa9f223b0d4a9aaf302a44d"
        },
        "downloads": -1,
        "filename": "spaceavocado_x12-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d10809856a89a83d93e5c4d21cddcd84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11813,
        "upload_time": "2023-03-09T15:47:53",
        "upload_time_iso_8601": "2023-03-09T15:47:53.773654Z",
        "url": "https://files.pythonhosted.org/packages/7f/29/e84a1c6500f8d2fca556f94bfb54330420160aa46c3de4ecc5abe04f6fdb/spaceavocado_x12-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2e8ec2392197782b4fb82b1a454598d0d63e3a05059a99652b17a85b141e369",
          "md5": "254bf641312c248f1d3ba628133a945a",
          "sha256": "81f7b6b5d8e51f9882e0a310f97333edf71203bf5661d65915f6d1f05d928054"
        },
        "downloads": -1,
        "filename": "spaceavocado-x12-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "254bf641312c248f1d3ba628133a945a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12481,
        "upload_time": "2023-03-09T15:47:57",
        "upload_time_iso_8601": "2023-03-09T15:47:57.098330Z",
        "url": "https://files.pythonhosted.org/packages/f2/e8/ec2392197782b4fb82b1a454598d0d63e3a05059a99652b17a85b141e369/spaceavocado-x12-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f347bf972266e2352b076574ca26cf055f012c58c6e7dc3dd334356ba9bfb121",
          "md5": "a0e90b6fb4831fad652f3f8726e951d2",
          "sha256": "d149419e3af40f0027b652b65772cf079b1e7d7e5468df3e91d77d2ac111d9f3"
        },
        "downloads": -1,
        "filename": "spaceavocado_x12-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0e90b6fb4831fad652f3f8726e951d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11858,
        "upload_time": "2023-03-16T03:21:14",
        "upload_time_iso_8601": "2023-03-16T03:21:14.237003Z",
        "url": "https://files.pythonhosted.org/packages/f3/47/bf972266e2352b076574ca26cf055f012c58c6e7dc3dd334356ba9bfb121/spaceavocado_x12-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be8328e3c52124f1fa330cf1e73304ee27d47a1565a3cb1c5786088b0947f684",
          "md5": "3aa13445545281dffd6855397ade3358",
          "sha256": "82276e0c4517007535288ec8fc0d720e8377a3856d731dbff3d1d61adf96b42b"
        },
        "downloads": -1,
        "filename": "spaceavocado-x12-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3aa13445545281dffd6855397ade3358",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12532,
        "upload_time": "2023-03-16T03:21:18",
        "upload_time_iso_8601": "2023-03-16T03:21:18.269508Z",
        "url": "https://files.pythonhosted.org/packages/be/83/28e3c52124f1fa330cf1e73304ee27d47a1565a3cb1c5786088b0947f684/spaceavocado-x12-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f347bf972266e2352b076574ca26cf055f012c58c6e7dc3dd334356ba9bfb121",
        "md5": "a0e90b6fb4831fad652f3f8726e951d2",
        "sha256": "d149419e3af40f0027b652b65772cf079b1e7d7e5468df3e91d77d2ac111d9f3"
      },
      "downloads": -1,
      "filename": "spaceavocado_x12-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0e90b6fb4831fad652f3f8726e951d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11858,
      "upload_time": "2023-03-16T03:21:14",
      "upload_time_iso_8601": "2023-03-16T03:21:14.237003Z",
      "url": "https://files.pythonhosted.org/packages/f3/47/bf972266e2352b076574ca26cf055f012c58c6e7dc3dd334356ba9bfb121/spaceavocado_x12-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be8328e3c52124f1fa330cf1e73304ee27d47a1565a3cb1c5786088b0947f684",
        "md5": "3aa13445545281dffd6855397ade3358",
        "sha256": "82276e0c4517007535288ec8fc0d720e8377a3856d731dbff3d1d61adf96b42b"
      },
      "downloads": -1,
      "filename": "spaceavocado-x12-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3aa13445545281dffd6855397ade3358",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12532,
      "upload_time": "2023-03-16T03:21:18",
      "upload_time_iso_8601": "2023-03-16T03:21:18.269508Z",
      "url": "https://files.pythonhosted.org/packages/be/83/28e3c52124f1fa330cf1e73304ee27d47a1565a3cb1c5786088b0947f684/spaceavocado-x12-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}