{
  "info": {
    "author": "Benjamin Paassen",
    "author_email": "bpaassen@techfak.uni-bielefeld.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python Edit Distances\n\nCopyright (C) 2019-2021 - Benjamin Paassen  \nMachine Learning Research Group  \nCenter of Excellence Cognitive Interaction Technology (CITEC)  \nBielefeld University\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, see <http://www.gnu.org/licenses/>.\n\n## Introduction\n\nThis library contains several edit distance and alignment algorithms for\nsequences and trees of arbitrary node type. Additionally, this library\ncontains multiple backtracing mechanisms for every algorithm in order to\nfacilitate more detailed interpretation and subsequent processing. Finally,\nthis library provides a reference implementation for embedding edit distance\nlearning (BEDL; [Paaßen et al., 2018][Paa2018]), which enables users to learn\nedit distance parameters instead of specifying them manually.\n\nRefer to the Quickstart Guide for how to use the library and refer to the\nlist below for a full list of the enclosed algorithms. The detailed API\ndocumentation is available at [readthedocs.org](https://edist.readthedocs.io/en/latest/index.html).\n\nIf you use this library in academic work, please cite:\n\n* Paaßen, B., Mokbel, B., & Hammer, B. (2015). A Toolbox for Adaptive Sequence\n    Dissimilarity Measures for Intelligent Tutoring Systems. In O. C. Santos,\n    J. G. Boticario, C. Romero, M. Pechenizkiy, A. Merceron, P. Mitros,\n    J. M. Luna, et al. (Eds.), Proceedings of the 8th International Conference\n    on Educational Data Mining (pp. 632-632). International Educational\n    Datamining Society. ([Link][Paa2015])\n\nThis library is historically based on its Java version, the\n[TCS Alignment Toolbox][tcs].\n\n## Installation\n\nThis package is available on [pypi][pypi] as `edist`. You can install\nit via\n\n```\npip install edist\n```\n\nIf you wish to build this project from source, you need to first install\n[cython][cython] and then execute the following commands in this directory:\n\n```\npython3 cython_setup.py build_ext --inplace\ncp *so edist/.\n```\n\n## Quickstart Guide\n\nThere are multiple example cases illustrated in our demo notebooks.\nIn particular:\n\n* `sed_demo.ipynb` illustrates the Levenshtein distance\n    (Levenshtein, 1965) and affine edit distance\n    ([Gotoh, 1982][Got1982]) as well as its backtracing,\n* `dtw_demo.ipynb` illustrates dynamic time warping ([Vintsyuk, 1968][Vin1968])\n    as well as its backtracing and speedup measures,\n* `ted_demo.ipynb` illustrates the tree edit distance\n    ([Zhang and Shasha, 1989][Zha1989]) as well as its backtracing and\n    support for edit functions, and\n* `bedl_demo.ipynb` illustrates embedding edit distance learning\n    ([Paaßen et al., 2018][Paa2018]).\n\nIn general, applying this library works as follows. First, you select the\nedit distance function that best fits for your data and your setting\n(see below for an overview of all available functions). Let's say your\nfunction is called `distfun`. Then, you can compute the distance between two\nlists/trees `x` and `y` via `distfun(x, y)`. If you wish to compute the matrix\nof all pairwise distances for an entire dataset of lists/trees `X`, then you\ncan use the `multiprocess` module as follows.\n\n```\nfrom edist.multiprocess import pairwise_distances_symmetric\nD = pairwise_distances_symmetric(X, distfun)\n```\n\nIf you wish to compute the matrix of all pairwise distances between one\ndataset `X` and another dataset `Y`, you can use the following function.\n\n```\nfrom edist.multiprocess import pairwise_distances\nD = pairwise_distances(X, Y, distfun)\n```\n\nIf you wish to use a custom local distance function `delta`, you can supply\nit as additional argument to either `distfun` itself, to\n`pairwise_distances_symmetric`, or to `pairwise_distances`.\n\nIf you wish to compute the optimal alignment between two lists/trees `x`\nand `y` according to `distfun`, you can use the function\n`distfun_backtrace(x, y)`. Note that, in case of multiple possible optimal\nalignments, this function will always return the option that uses replacements\nas early as possible. If you instead wish to sample a random optimal alignment,\nyou can use `distfun_backtrace_stochastic(x, y)`. Unfortunately, it is\ninfeasible to enumerate the entire set of co-optimal alignments because this\nset may be exponentially large. However, it is possible to characterize the\ndistribution of co-optimal alignments concisely by describing with which\nprobability each node in `x` is paired with each node in `y`. This probability\nmatrix is computed by the function `distfun_backtrace_matrix(x, y)` and follows\nthe forward-backward algorithm developed by [Paaßen (2018)][Paa2018arxiv].\n\n## List of Algorithms and Functions\n\nThe following edit distance algorithms and functions are contained in this\nlibrary.\n\n* The [Levenshtein distance][Lev]/sequence edit distance (Levenshtein, 1965):\n  * `edist.sed.standard_sed(x, y)` for edit distance computation between\n    sequences `x` and `y` with a cost of 1 for each replacement, deletion,\n    and insertion.\n  * `edist.sed.sed_string(x, y)` for the same, but specifically designed for\n    strings and thus considerably faster (~factor 3).\n  * `edist.sed.standard_sed_backtrace(x, y)` for backtracing for the standard\n    edit distance.\n  * `edist.sed.standard_sed_backtrace_stochastic(x, y)` for the same, but\n    returning a random optimal alignment instead of a fixed one.\n  * `edist.sed.standard_sed_backtrace_matrix(x, y)` for the same, but\n    returning a probability distribution over all pairings between elements\n    of `x` and `y`.\n  * `edist.sed.sed(x, y, delta)` for edit distance computation with a custom\n    element distance function `delta`.\n  * `edist.sed.sed_backtrace(x, y, delta)` for backtracing for the edit\n    distance with a custom element distance function `delta`.\n  * `edist.sed.sed_backtrace_stochastic(x, y, delta)` for the same, but\n    returning a random optimal alignment instead of a fixed one.\n  * `edist.sed.sed_backtrace_matrix(x, y, delta)` for the same, but\n    returning a probability distribution over all pairings between elements\n    of `x` and `y`.\n* The [dynamic time warping][dtw] distance (DTW; [Vintsyuk, 1968][Vin1968]):\n  * `edist.dtw.dtw_numeric(x, y)` for DTW computation between two time\n    series `x` and `y`, each given as a double array.\n  * `edist.dtw.dtw_manhattan(x, y)` for DTW computation between two time\n    series `x` and `y`, each given as a double matrix. The distance between\n    two frames is defined as the Manhattan distance.\n  * `edist.dtw.dtw_euclidean(x, y)` for DTW computation between two time\n    series `x` and `y`, each given as a double matrix. The distance between\n    two frames is defined as the Euclidean distance.\n  * `edist.dtw.dtw_string(x, y)` for DTW computation between two strings\n    `x` and `y`.\n  * `edist.dtw.dtw(x, y, delta)` for DTW computation between two arbitrary\n    sequences `x` and `y` with a custom element distance function `delta`.\n  * `edist.dtw.dtw_backtrace(x, y, delta)` for backtracing for DTW with a\n    custom element distance function `delta`.\n  * `edist.dtw.dtw_backtrace_stochastic(x, y, delta)` for the same, but\n    returning a random optimal alignment instead of a fixed one.\n  * `edist.dtw.dtw_backtrace_matrix(x, y, delta)` for the same, but\n    returning a probability distribution over all pairings between elements\n    of `x` and `y`.\n* The affine edit distance ([Gotoh, 1982][Got1982]):\n  * `edist.aed.aed(x, y, rep, gap, skip)` for affine edit distance computation\n    between two arbitrary sequences `x` and `y`, where each frame replacement\n    is scored with the function `rep`, each deletion and insertion is scored\n    with the function `gap`, and each deletion and insertion extension is\n    scored with the function `skip`.\n  * `edist.aed.aed_backtrace(x, y, rep, gap, skip)` for backtracing for the\n    affine edit distance with the replacement cost function `rep`, the\n    deletion/insertion cost function `gap`, and the gap extension cost function\n    `skip`.\n  * `edist.aed.aed_backtrace_stochastic(x, y, delta)` for the same, but\n    returning a random optimal alignment instead of a fixed one.\n  * `edist.aed.aed_backtrace_matrix(x, y, delta)` for the same, but\n    returning a probability distribution over all pairings between elements\n    of `x` and `y`.\n* The tree edit distance (TED; [Zhang and Shasha, 1989][Zha1989]):\n  * `edist.ted.standard_ted(x_nodes, x_adj, y_nodes, y_adj)` for edit distance\n    computation between the trees `x` and `y`, which are both given in a\n    node list/adjacency list format. Both lists are supposed to be in\n    depth-first-search order, e.g. a tree a(b, c) is supposed to be represented\n    as the two lists `['a', 'b', 'c']` and `[[1, 2], [], []]`. The cost for\n    replacements, deletions, and insertions is fixed to 1.\n  * `edist.ted.standard_ted_backtrace(x_nodes, x_adj, y_nodes, y_adj)`\n    for backtracing for the tree edit distance.\n  * `edist.sed.standard_sed_backtrace_matrix(x_nodes, x_adj, y_nodes, y_adj)`\n    for the same, but returning a probability distribution over all pairings\n    between elements of `x` and `y`.\n  * `edist.ted.ted(x_nodes, x_adj, y_nodes, delta)` for tree edit distance\n    computation with a custom node distance function `delta`.\n  * `edist.ted.ted_backtrace(x_nodes, x_adj, y_nodes, delta)` for backtracing\n    for the tree edit distance with a custom element distance function `delta`.\n  * `edist.ted.ted_backtrace_matrix(x_nodes, x_adj, y_nodes, delta)` for the\n    same, but returning a probability distribution over all pairings between\n    elements of `x` and `y`.\n* The unordered tree edit distance (UTED; [Zhang, 1996][Zha1996]):\n    * `edist.uted.uted(x_nodes, x_adj, y_nodes, y_adj, delta)` for edit\n    distance computation between the trees `x` and `y`, which are both given\n    in a node list/adjacency list format. Both lists are supposed to be in\n    depth-first-search order, e.g. a tree a(b, c) is supposed to be represented\n    as the two lists `['a', 'b', 'c']` and `[[1, 2], [], []]`.\n    * `edist.uted.uted_backtrace(x_nodes, x_adj, y_nodes, y_adj, delta)` for\n    backtracing of the unordered tree edit distance with an (optional) custom\n    element distance function `delta`.\n* The set edit distance (SetED; unpublished, but using the Hungarian algorithm\n    of [Kuhn, 1955][Kuh1955] at its core):\n  * `edist.seted.standard_seted(x, y)` for set edit distance computation\n    between the sets `x` and `y`, which are both given as lists for\n    convenience. The cost for replacements, deletions, and insertions is fixed\n    to 1.\n  * `edist.seted.standard_seted_backtrace(x, y)` for backtracing for the set\n    edit distance.\n  * `edist.seted.seted(x, y, delta)` for set edit distance computation with a\n    custom element distance function `delta`.\n  * `edist.seted.seted_backtrace(x, y, delta)` for backtracing for the set\n    edit distance with a custom element distance function `delta`.\n\nAdditionally, this library contains a few helper modules, namely:\n\n* `edist.adp` contains functions to compute arbitrary sequence edit distances\n    that can be defined by a regular grammar. This is based on the framework\n    of algebraic dynamic programming (ADP; [Giegerich, Meyer, and Steffen, 2004][Gie2004]),\n    as applied by Paaßen, Mokbel, and Hammer ([2016][Paa2016]). In particular:\n  * `edist.adp.edit_distance(x, y, grammar, deltas)` computes the sequence edit\n    distance defined by the regular grammar `grammar` and the cost functions\n    `deltas` between sequences `x` and `y`,\n  * `edist.adp.backtrace(x, y, grammar, deltas)` computes the backtracing\n    for said edit distance,\n  * `edist.adp.backtrace_stochastic(x, y, grammar, deltas)` does the same,\n    but returns a random optimal alignment instead of a fixed one, and\n  * `edist.adp.backtrace_matrix(x, y, grammar, deltas)` does the same,\n    but returns a probability distribution over all pairings between elements\n    of `x` and `y`.\n* `edist.alignment` models backtraces/alignments between sequences or trees.\n    Instances of class `edist.alignment.Alignment` are returned by every\n    backtrace function (except for `backtrace_matrix` functions).\n* `edist.bedl` supports embedding edit distance learning (BEDL;\n    [Paaßen et al., 2018][Paa2018]) to learn parameters for edit distance\n    instead of learning them manually. Please refer to the `bedl_demo` for\n    more information.\n* `edist.edits` supports objects that model sequence edits, in particular\n    replacements, deletions, and insertions, and provides the function\n    `alignment_to_script(alignment, x, y)`, which transforms the alignment\n    `alignment` between the sequences `x` and `y` into a list of edits that\n    transform `x` into `y`.\n* `edist.tree_edits` supports objects that model tree edits, in particular\n    replacements, deletions, and insertions, and provides the function\n    `alignment_to_script(alignment, x_nodes, y_adj, y_nodes, y_adj)`, which\n    transforms the alignment `alignment` between the trees `x` and `y` into a\n    list of edits that transform `x` into `y`.\n* `edist.tree_utils` is a collection of supporting functions for tree handling\n    used by the library. Interesting for users of the library may be the\n    following:\n  * `edist.tree_utils.to_json` writes a tree to a JSON file.\n  * `edist.tree_utils.from_json` reads a tree from a JSON file.\n  * `edist.tree_utils.dataset_from_json` reads a list of trees from a\n    directory containing JSON files.\n  * `edist.tree_utils.tree_to_string` formats a tree as a string.\n\n## Background\n\nThe background for all algorithms covered in this library by far exceeds the\nscope of this Readme (we list material for further reading below).\nHowever, there are a few general points that are worth noting in short:\n\n* Edit distance algorithms heavily rely on _dynamic programming_ to be\n  efficient, i.e. to decompose the overall edit distance computation into\n  subtasks and to tabulate the results of these subtasks. In this way, we\n  can search an exponentially large space of possible alignments in polynomial\n  time. However, these decompositions rely on the critical assumption that\n  the element distance function $`\\delta`$ is a metric, especially that this\n  function is non-negative, zero for self-distances, and fulfills the\n  triangular inequality. If any of these assumptions is broken, there may\n  exist cheaper alignments that are not covered by the dynamic programming\n  computation. So this is critical when generating your own $`\\delta`$\n  functions.\n* Interestingly, if $`\\delta`$ is a metric, its metric properties translate\n  to the overall edit distance (refer, e.g., to Theorem 3.2. in\n  [Paaßen, 2019][Paa2019]). This can make handling edit distances quite\n  appealing, mathematically. However, this does _not_ hold for dynamic time\n  warping, which always violates the triangular inequality.\n* Even though dynamic programming makes edit distances polynomial, computing\n  them can become prohibitively expensive for long sequences/large trees. In\n  particular, any sequence edit distance lies in $`\\mathcal{O}(m \\cdot n)`$,\n  where $`m`$ and $`n`$ are the lengths of the input sequences, the tree\n  edit distance lies in $`\\mathcal{O}(m^2 \\cdot n^2)`$, and the set edit\n  distance in $`\\mathcal{O}((m+n)^3)`$. Fortunately, the [cython][cython]\n  implementation provided in this library is relatively fast and thus can cope\n  with $`m, n`$ even up to a few thousand elements (at least for sequence\n  edits). Still, it is key that you choose the edit distance function that is\n  best fitting to your case. For example, `edist.sed.sed_string` is about\n  factor 15 faster compared to the more general `edist.sed.sed`.\n\nFor more background on the algorithms, we refer to the Wikipedia articles for\nthe [Levenshtein distance][Lev] and [dynamic time warping][dtw], to the paper\nof [Gotoh (1982)][Got1982] with respect to the affine edit distance, to the\nreview paper of [Paaßen (2018)][Paa2018] with respect to the tree edit distance\nand its backtracing, to Section 2.3.2 of the dissertation of [Paaßen (2019)][Paa2019]\nwith respect to algebraic dynamic programming, and to Chapter 4 of the same\ndissertation with respect to embedding edit distance learning.\n\n## Licensing\n\nThis library is licensed under the [GNU General Public License Version 3][GPLv3].\n\n## Dependencies\n\nThis library depends on [NumPy][np] for matrix operations, and on [cython][cython]\nfor the effective C-interface. Further, the `bedl.py` module depends on\n[scikit-learn][scikit] for the base interfaces and on [SciPy][scipy] for\noptimization. Finally, the `seted.pyx` module depends on [SciPy][scipy] for\nan implementation of the Hungarian algorithm ([Kuhn, 1955][Kuh1955]).\n\n## Literature\n\n* Giegerich, R., Meyer, C., & Steffen, P. (2004). A discipline of dynamic\n    programming over sequence data. Science of Computer Programming, 51(3),\n    215-263. doi:[10.1016/j.scico.2003.12.005][Gie2004]\n* Gotoh, O. (1982). An improved algorithm for matching biological sequences.\n    Journal of Molecular Biology, 162(3), 705-708.\n    doi:[10.1016/0022-2836(82)90398-9][Got1982]\n* Kuhn, H. (1955). The Hungarian method for the assignment problem.\n    Naval Research Logistics Quarterly, 2(1-2), 83-97.\n    doi:[10.1002/nav.3800020109][Kuh1955]\n* Levenshtein, V. (1965). Binary codes capable of correcting deletions,\n    insertions, and reversals. Soviet Physics Doklady, 10(8), 707-710.\n* Paaßen, B., Mokbel, B., & Hammer, B. (2015). A Toolbox for Adaptive Sequence\n    Dissimilarity Measures for Intelligent Tutoring Systems. In O. C. Santos,\n    J. G. Boticario, C. Romero, M. Pechenizkiy, A. Merceron, P. Mitros,\n    J. M. Luna, et al. (Eds.), Proceedings of the 8th International Conference\n    on Educational Data Mining (pp. 632-632). International Educational\n    Datamining Society. [Link][Paa2015]\n* Paaßen, B., Mokbel, B., & Hammer, B. (2016). Adaptive structure metrics for\n    automated feedback provision in intelligent tutoring systems.\n    Neurocomputing, 192, 3-13.\n    doi:[10.1016/j.neucom.2015.12.108](https://doi.org/10.1016/j.neucom.2015.12.108).\n    [Link][Paa2016]\n* Paaßen, B., Gallicchio, C., Micheli, A., & Hammer, B. (2018). Tree Edit\n    Distance Learning via Adaptive Symbol Embeddings. Proceedings of the 35th\n    International Conference on Machine Learning (ICML 2018), 3973-3982.\n    [Link][Paa2018]\n* Paaßen, B. (2018). Revisiting the tree edit distance and its backtracing:\n    A tutorial. arXiv:[1805.06869][Paa2018arxiv].\n* Paaßen, B. (2019). Metric Learning for Structured Data. Dissertation.\n    Bielefeld University. doi:[10.4119/unibi/2935545][Paa2019]\n* Vintsyuk, T.K. (1968). Speech discrimination by dynamic programming.\n    Cybernetics, 4(1), 52-57. doi:[10.1007/BF01074755][Vin1968]\n* Zhang, K., & Shasha, D. (1989). Simple Fast Algorithms for the Editing\n    Distance between Trees and Related Problems. SIAM Journal on Computing,\n    18(6), 1245-1262. doi:[10.1137/0218082][Zha1989]\n* Zhang, K. (1996). A Constrained Edit Distance Between Unordered Labeled\n    Trees. Algorithmica, 15, 205-222. doi:[10.1007/BF01975866][Zha1996]\n\n<!-- References -->\n\n[Paa2015]:http://www.educationaldatamining.org/EDM2015/uploads/papers/paper_257.pdf \"Paaßen, B., Mokbel, B., & Hammer, B. (2015). A Toolbox for Adaptive Sequence Dissimilarity Measures for Intelligent Tutoring Systems. In O. C. Santos, J. G. Boticario, C. Romero, M. Pechenizkiy, A. Merceron, P. Mitros, J. M. Luna, et al. (Eds.), Proceedings of the 8th International Conference on Educational Data Mining (pp. 632-632). International Educational Datamining Society.\"\n[Paa2016]:https://pub.uni-bielefeld.de/record/2783224 \"Paaßen, B., Mokbel, B., & Hammer, B. (2016). Adaptive structure metrics for automated feedback provision in intelligent tutoring systems. Neurocomputing, 192, 3-13. doi:10.1016/j.neucom.2015.12.108\"\n[Paa2018]:http://proceedings.mlr.press/v80/paassen18a.html \"Paaßen, B., Gallicchio, C., Micheli, A., & Hammer, B. (2018). Tree Edit Distance Learning via Adaptive Symbol Embeddings. Proceedings of the 35th International Conference on Machine Learning (ICML 2018), 3973-3982.\"\n[Paa2018arxiv]:https://arxiv.org/abs/1805.06869 \"Paaßen, B. (2018). Revisiting the tree edit distance and its backtracing: A tutorial. arXiv:1805.06869.\"\n[Paa2019]:https://doi.org/10.4119/unibi/2935545 \"Paaßen, B. (2019). Metric Learning for Structured Data. Dissertation. Bielefeld University. doi:10.4119/unibi/2935545\"\n[Lev]:https://en.wikipedia.org/wiki/Levenshtein_distance \"Wikipedia page on Levenshtein distance.\"\n[dtw]:https://en.wikipedia.org/wiki/Dynamic_time_warping \"Wikipedia page on dynamic time warping.\"\n[Vin1968]:https://doi.org/10.1007/BF01074755 \"Vintsyuk, T.K. (1968). Speech discrimination by dynamic programming. Cybernetics, 4(1), 52-57. doi:10.1007/BF01074755\"\n[Got1982]:https://doi.org/10.1016/0022-2836(82)90398-9 \"Gotoh, O. (1982). An improved algorithm for matching biological sequences. Journal of Molecular Biology, 162(3), 705-708. doi:10.1016/0022-2836(82)90398-9\"\n[Gie2004]:https://doi.org/10.1016/j.scico.2003.12.005 \"Giegerich, R., Meyer, C., & Steffen, P. (2004). A discipline of dynamic programming over sequence data. Science of Computer Programming, 51(3), 215-263. doi:10.1016/j.scico.2003.12.005\"\n[Zha1989]:https://doi.org/10.1137/0218082 \"Zhang, K., & Shasha, D. (1989). Simple Fast Algorithms for the Editing Distance between Trees and Related Problems. SIAM Journal on Computing, 18(6), 1245-1262. doi:10.1137/0218082\"\n[Zha1996]:https://doi.org/10.1007/BF01975866 \"Zhang, K. (1996). A Constrained Edit Distance Between Unordered Labeled Trees. Algorithmica, 15, 205-222. doi:10.1007/BF01975866\"\n[Kuh1955]:https://doi.org/10.1002/nav.3800020109 \"Kuhn, H. (1955). The Hungarian method for the assignment problem. Naval Research Logistics Quarterly, 2(1-2), 83-97. doi:10.1002/nav.3800020109\"\n[tcs]:https://openresearch.cit-ec.de/projects/tcs \"TCS Alignment Toolbox homepage\"\n[pypi]:https://pypi.org/project/edist/ \"PyPi edist project page\"\n[cython]:https://cython.org/ \"cython homepage\"\n[scikit]: https://scikit-learn.org/stable/ \"Scikit-learn homepage\"\n[np]: http://numpy.org/ \"Numpy homepage\"\n[scipy]: https://scipy.org/ \"SciPy homepage\"\n[GPLv3]: https://www.gnu.org/licenses/gpl-3.0.en.html \"The GNU General Public License Version 3\"\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.ub.uni-bielefeld.de/bpaassen/python-edit-distances",
    "keywords": "levenshtein-distance dynamic-time-warping sequence-edit-distance sequence-alignment tree-edit-distance algebraic-dynamic-programming",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "edist",
    "package_url": "https://pypi.org/project/edist/",
    "platform": "",
    "project_url": "https://pypi.org/project/edist/",
    "project_urls": {
      "Homepage": "https://gitlab.ub.uni-bielefeld.de/bpaassen/python-edit-distances"
    },
    "release_url": "https://pypi.org/project/edist/1.2.0/",
    "requires_dist": [
      "numpy",
      "scikit-learn",
      "scipy",
      "proto-dist-ml"
    ],
    "requires_python": "",
    "summary": "Edit distance implementations in cython",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10517080,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12d6bf5a32b3df4e1eda46119e5536bf4888f2c18e438216b584a8b3ead6b6ae",
          "md5": "b53b80bc9eab5f63b79dc17de441cdbd",
          "sha256": "4218e2cbe9a6ef8928090eaaf3a1da412b07571bec86f512b995a68ec17734c4"
        },
        "downloads": -1,
        "filename": "edist-1.0.0-cp37-cp37m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b53b80bc9eab5f63b79dc17de441cdbd",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3129126,
        "upload_time": "2019-08-22T09:37:32",
        "upload_time_iso_8601": "2019-08-22T09:37:32.383438Z",
        "url": "https://files.pythonhosted.org/packages/12/d6/bf5a32b3df4e1eda46119e5536bf4888f2c18e438216b584a8b3ead6b6ae/edist-1.0.0-cp37-cp37m-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f674e88ddac93dcaa7a0808b55c249e102d79dec469d2cf0c18036f29a9d7107",
          "md5": "f82346df633d65fe565338fe10c432ab",
          "sha256": "ed339e6b0857ff8cdd896e72c5c84c3ab9f30416eef7ad61765572d79345560d"
        },
        "downloads": -1,
        "filename": "edist-1.0.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f82346df633d65fe565338fe10c432ab",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3129129,
        "upload_time": "2019-08-22T09:37:38",
        "upload_time_iso_8601": "2019-08-22T09:37:38.300465Z",
        "url": "https://files.pythonhosted.org/packages/f6/74/e88ddac93dcaa7a0808b55c249e102d79dec469d2cf0c18036f29a9d7107/edist-1.0.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fe7a07c6a15b6a83729b8bfb1150ff213e70d60f51442ea441e02ef8a4fdef0",
          "md5": "69a94faa123d85a0366c0f21eda4f6dc",
          "sha256": "eb67b56a55359ecbeba85450c35ae23894531510c1dc8b23f8b5cf5f3c43a4f8"
        },
        "downloads": -1,
        "filename": "edist-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69a94faa123d85a0366c0f21eda4f6dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 757570,
        "upload_time": "2019-08-22T09:37:41",
        "upload_time_iso_8601": "2019-08-22T09:37:41.435864Z",
        "url": "https://files.pythonhosted.org/packages/3f/e7/a07c6a15b6a83729b8bfb1150ff213e70d60f51442ea441e02ef8a4fdef0/edist-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5e92fdd4691fa32e0ee20afa0fabadc63341088803e496516e336dea59a7807",
          "md5": "ecd4f9be1aaaa9a498fd5336501aeb29",
          "sha256": "95641c6f963f466f07a54ec60fa2897c0eb2e732876af222abc80d6f77c7b031"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp37-cp37m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ecd4f9be1aaaa9a498fd5336501aeb29",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3545040,
        "upload_time": "2020-04-24T17:14:09",
        "upload_time_iso_8601": "2020-04-24T17:14:09.011403Z",
        "url": "https://files.pythonhosted.org/packages/f5/e9/2fdd4691fa32e0ee20afa0fabadc63341088803e496516e336dea59a7807/edist-1.1.0-cp37-cp37m-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af17fbe4b9741c00dc184dda4c898fe57617810664e432a4b435f930da1ed42e",
          "md5": "148281b6055de91b00480f7942d7c895",
          "sha256": "57aa4c76fb989dac94c6b1298a1b1552244b80cb12b867d459fd1bb948cf2646"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "148281b6055de91b00480f7942d7c895",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3545045,
        "upload_time": "2020-04-24T17:14:14",
        "upload_time_iso_8601": "2020-04-24T17:14:14.034725Z",
        "url": "https://files.pythonhosted.org/packages/af/17/fbe4b9741c00dc184dda4c898fe57617810664e432a4b435f930da1ed42e/edist-1.1.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7e97d0f82e2e9b3714b27a336bcbf037d22b0ef0ec625eb552ed7e796421390",
          "md5": "a6bf7f36a21a05604521449f2a35737d",
          "sha256": "3d83e0ec5004e5c4a952527df2c3300d976a18ff31250f3917b9cd97f0742238"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp37-cp37m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a6bf7f36a21a05604521449f2a35737d",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 3298560,
        "upload_time": "2020-04-24T16:25:19",
        "upload_time_iso_8601": "2020-04-24T16:25:19.243857Z",
        "url": "https://files.pythonhosted.org/packages/c7/e9/7d0f82e2e9b3714b27a336bcbf037d22b0ef0ec625eb552ed7e796421390/edist-1.1.0-cp37-cp37m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d76e014f6fd682ffc8ff362ae14d83ce58c5dd71245db0f27645fa24967493f4",
          "md5": "b1a4bba6563f7196dfd5c7b66980cda4",
          "sha256": "da37ef0fff4855c9c4178a700907d059773a67e99b50b58f45834a26b5d0fd2c"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b1a4bba6563f7196dfd5c7b66980cda4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4179897,
        "upload_time": "2020-04-24T17:14:20",
        "upload_time_iso_8601": "2020-04-24T17:14:20.754457Z",
        "url": "https://files.pythonhosted.org/packages/d7/6e/014f6fd682ffc8ff362ae14d83ce58c5dd71245db0f27645fa24967493f4/edist-1.1.0-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6f7064f60cbfa80cd074ab278aa2c2ad139e148a827a8edd1828ae89b43d505",
          "md5": "dfe6b8473c743f4ed2c24c42c695f859",
          "sha256": "5954f781475ef97cbc30bbf172e56b1eab580a146277601bdc99bdfe2785f500"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "dfe6b8473c743f4ed2c24c42c695f859",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 4179900,
        "upload_time": "2020-04-24T17:14:26",
        "upload_time_iso_8601": "2020-04-24T17:14:26.311422Z",
        "url": "https://files.pythonhosted.org/packages/b6/f7/064f60cbfa80cd074ab278aa2c2ad139e148a827a8edd1828ae89b43d505/edist-1.1.0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83605a3d7345e392724254d678c1cc8ee03f1e208f8f4ed05a80c50dc9273f5c",
          "md5": "9e4900273346b9ee647190c6b8aa81bd",
          "sha256": "afea331acf5d7932da3625ce8799b766fd3f9798ce5aea43b94e9d3fa3aa6bab"
        },
        "downloads": -1,
        "filename": "edist-1.1.0-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "9e4900273346b9ee647190c6b8aa81bd",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 3820207,
        "upload_time": "2020-04-24T16:13:07",
        "upload_time_iso_8601": "2020-04-24T16:13:07.092726Z",
        "url": "https://files.pythonhosted.org/packages/83/60/5a3d7345e392724254d678c1cc8ee03f1e208f8f4ed05a80c50dc9273f5c/edist-1.1.0-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bf0c50afd1c0fc2ff4c0aa08421da87b7746cae3f03a67870b243e78ea316ae",
          "md5": "6da5b2663b087d4232d4c128d98ab12d",
          "sha256": "b7cc851edd56feceb3959c575e080b9b93dc5152abc3d1137c6af2cc43e89675"
        },
        "downloads": -1,
        "filename": "edist-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6da5b2663b087d4232d4c128d98ab12d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 898574,
        "upload_time": "2020-04-24T16:13:10",
        "upload_time_iso_8601": "2020-04-24T16:13:10.675064Z",
        "url": "https://files.pythonhosted.org/packages/3b/f0/c50afd1c0fc2ff4c0aa08421da87b7746cae3f03a67870b243e78ea316ae/edist-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a223f50a828a778b03ed7bc5f47d17697fbcff1d56393ae5b9421f9bc763925",
          "md5": "174c147772f8d39532153debcbc25197",
          "sha256": "e16b3de0865357a5b9db57d15b12a17da282b1945b7d1d611077578ea00c7999"
        },
        "downloads": -1,
        "filename": "edist-1.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "174c147772f8d39532153debcbc25197",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 5015295,
        "upload_time": "2021-05-31T09:14:51",
        "upload_time_iso_8601": "2021-05-31T09:14:51.088882Z",
        "url": "https://files.pythonhosted.org/packages/8a/22/3f50a828a778b03ed7bc5f47d17697fbcff1d56393ae5b9421f9bc763925/edist-1.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "847652651ebb3b0fffec613457a8412cb0aec793c9b2ab5924898f710bb1f057",
          "md5": "e58a567b9fb36304b5487d1c125f885e",
          "sha256": "8053ffc6c8abc352802a99b918825b3091100d7da746072c69c06c27888a483f"
        },
        "downloads": -1,
        "filename": "edist-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e58a567b9fb36304b5487d1c125f885e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1061968,
        "upload_time": "2021-05-31T09:14:54",
        "upload_time_iso_8601": "2021-05-31T09:14:54.632526Z",
        "url": "https://files.pythonhosted.org/packages/84/76/52651ebb3b0fffec613457a8412cb0aec793c9b2ab5924898f710bb1f057/edist-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a223f50a828a778b03ed7bc5f47d17697fbcff1d56393ae5b9421f9bc763925",
        "md5": "174c147772f8d39532153debcbc25197",
        "sha256": "e16b3de0865357a5b9db57d15b12a17da282b1945b7d1d611077578ea00c7999"
      },
      "downloads": -1,
      "filename": "edist-1.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "174c147772f8d39532153debcbc25197",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 5015295,
      "upload_time": "2021-05-31T09:14:51",
      "upload_time_iso_8601": "2021-05-31T09:14:51.088882Z",
      "url": "https://files.pythonhosted.org/packages/8a/22/3f50a828a778b03ed7bc5f47d17697fbcff1d56393ae5b9421f9bc763925/edist-1.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "847652651ebb3b0fffec613457a8412cb0aec793c9b2ab5924898f710bb1f057",
        "md5": "e58a567b9fb36304b5487d1c125f885e",
        "sha256": "8053ffc6c8abc352802a99b918825b3091100d7da746072c69c06c27888a483f"
      },
      "downloads": -1,
      "filename": "edist-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e58a567b9fb36304b5487d1c125f885e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1061968,
      "upload_time": "2021-05-31T09:14:54",
      "upload_time_iso_8601": "2021-05-31T09:14:54.632526Z",
      "url": "https://files.pythonhosted.org/packages/84/76/52651ebb3b0fffec613457a8412cb0aec793c9b2ab5924898f710bb1f057/edist-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}