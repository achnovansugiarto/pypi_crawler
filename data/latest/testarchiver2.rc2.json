{
  "info": {
    "author": "Tatu Aalto",
    "author_email": "aalto.tatu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# TestArchiver2\n\nThis is fork from [salabs TestArchiver](https://github.com/salabs/TestArchiver), it contains enhancements\nfor submitting changes from a json file. See `testarchiver2 --help` for more details.\n\nTestArchiver is a tool for archiving your test results to a SQL database.\n\nAnd [Epimetheus](https://github.com/salabs/Epimetheus) is the tool for browsing the results you archived.\n\n## Testing framework support\n\n| Framework       | Status                    | Fixture test status | Parser option |\n| --------------- | ------------------------- | ------------------- | ------------- |\n| Robot Framework | [Supported](robot_tests/) | Done                | robot         |\n| Mocha           | [Supported](mocha_tests/) | Done                | mocha-junit   |\n| JUnit           | Experimental              | Missing             | junit         |\n| xUnit           | Experimental              | Missing             | xunit         |\n| MSTest          | Experimental              | Missing             | mstest        |\n| pytest          | [Supported](pytest/)      | Done                | pytest-junit  |\n\nExperimental status here means that there is a parser that can take in e.g. generic JUnit formatted output but there is no specific test set or any extensive testing or active development for the parser.\n\nContributions for output parsers or listeners for different testing frameworks are appreciated. Contributing simply a fixture test set (that can be used to generate output files for developing a specific parser) is extremely helpful for any new framework.\n\n## Installation\n`sudo -H python3 -m pip install testarchiver2`\n\n## Supported databases\n\n### SQLite\n\n[SQLite](https://www.sqlite.org) default database for the archiver and is mainly useful for testing and demo purposes. Sqlite3 driver is part of the python standard library so there are no additional dependencies for trying out the archiver.\n\n### PostgreSQL\n\n[PostgreSQL](https://www.postgresql.org) is the currently supported database for real projects. For example [Epimetheus](https://github.com/salabs/Epimetheus) service uses a PosrgreSQL database. For accessing PostgreSQL databases the script uses psycopg2 module: `pip install psycopg2-binary` (comes with pip install)\n\n## Basic usage\n\nThe output files from different testing frameworks can be parsed into a database using `test_archiver/output_parser.py` script.\n\n```\ntestarchiver2 --database test_archive.db output.xml\n```\n\nAssuming that `output.xml` is a output file generated by Robot Framework (the default parser option), this will create a SQLite database file named `test_archive.db` that contains the results.\n\nFor list of other options: `testarchiver2 --help`\n```\npositional arguments:\n  output_files          list of test output files to parse in to the test\n                        archive\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version, -v         show program's version number and exit\n  --config CONFIG_FILE  path to JSON config file containing database\n                        credentials\n  --dbengine DB_ENGINE  Database engine, postgresql or sqlite (default)\n  --database DATABASE   database name\n  --host HOST           database host name\n  --user USER           database user\n  --pw PASSWORD, --password PASSWORD\n                        database password\n  --port PORT           database port (default: 5432)\n  --dont-require-ssl    Disable the default behavior to require ssl from the\n                        target database.\n  --allow-minor-schema-updates\n                        Allow TestArchiver to perform MINOR (backwards\n                        compatible) schema updates the test archive\n  --allow-major-schema-updates\n                        Allow TestArchiver to perform MAJOR (backwards\n                        incompatible) schema updates the test archive\n  --no-keywords         Do not archive keyword data\n  --no-keyword-stats    Do not archive keyword statistics\n  --ignore-logs-below {TRACE,DEBUG,INFO,WARN}\n                        Sets a cut off level for archived log messages. By\n                        default archives all available log messages.\n  --ignore-logs         Do not archive any log messages\n  --format {robot,robotframework,xunit,junit,mocha-junit,pytest-junit,mstest}\n                        output format (default: robotframework)\n  --repository REPOSITORY\n                        The repository of the test cases. Used to\n                        differentiate between test with same name in different\n                        projects.\n  --team TEAM           Team name for the test series\n  --series SERIES       Name of the test series (and optionally build number\n                        'SERIES_NAME#BUILD_NUM' or build id\n                        'SERIES_NAME#BUILD_ID')\n  --metadata NAME:VALUE\n                        Adds given metadata to the test run. Expected format:\n                        'NAME:VALUE'\n  --change-engine-url CHANGE_ENGINE_URL\n                        Starts a listener that feeds results to ChangeEngine\n  --execution-context EXECUTION_CONTEXT\n                        To separate data from different build pipelines for ChangeEngine\n                        prioritization. Example if same changes or tests may be used to verify app\n                        in Android and iOS platforms, then it would be good to separate the result\n                        from different builds pipelines/platforms. The ChangeEngine prioritization\n                        might not give correct result if different results from different platforms\n                        are mixed together.\n  --changes CHANGES     Json file which contains information from the changed files for each repo.\n                        The file should be formatted like this: \n                        {\n\t                        \"context\": \"The execution context, same as --execution-context and command line will override this setting.\",\n\t                        \"changes\": [{\n                                \"name\": \"string representing the changed item, for example file path\",\n                                \"repository\": \"Repository (optional), for separating between changed items with identical names.\",\n                                \"item_type\": \"Separating items (optional) and for filtering subsets when prioritising\",\n                                \"subtype\": \"(optional, for separating items for filtering subsets when prioritising\"\n\t                         }]\n                        }\n```\n\n## Data model\n\n[Schema and data model](https://github.com/aaltat/TestArchiver/tree/master/test_archiver/schemas) (NOTICE: this points to latest version)\n\n## Useful metadata\n\nThere are meta data that are useful to add with the results. Some testing frameworks allow adding metadata to your test results and for those frameworks (e.g. Robot Framework) it is recommended to add that metadata already to the tests so the same information is also available in the results. Additional metadata can be added when parsing the results using the `--metadata` option. Metadata given during the parsing is linked to the top level test suite.\n\n`--metadata NAME:VALUE`\n\n## Test series and teams\n\nIn the data model, each test result file is represented as single test run. These test runs are linked and organized into builds in in different result series. Depending on the situation the series can be e.g. CI build jobs or different branches. By default if no series is specified the results are linked to a default series with autoincrementing build numbers. Different test runs (from different testing frameworks or parallel executions) that belong together can be organized into the same build. Different test series are additionally organized by team. Series name and build number/id are separated by `#`.\n\nSome examples using the `--series` and `--team` options of `testarchiver2`\n\n-   `--series ${JENKINS_JOB_NAME}#${BUILD_NUMBER}`\n-   `--series \"UI tests\"#<commit hash>`\n-   `--series ${CURRENT_BRANCH}#${BUILD_ID} --team Team-A`\n-   `--series manually_run`\n\nEach build will have a build number in the series. If the build number is specified then that number is used. If the build number/id is omitted then the build number will be checked from the previous build in that series and incremented. If the build number/id is not a number it is considered a build identifier string. If that id is new to the series the build number is incremented just as if it no build number was specified. If the same build id is found in the same test series then the results are added under that same previously archived build.\n\nIf the tests are executed in a CI environment the build number/id is an excellent way to link the archived results to the actual builds.\n\nThe series can also be indicated using metadata. Any metadata with name prefixed with `series` are interpreted as series information. This is especially useful when using listeners. For example when using Robot Framework metadata `--metadata team:A-Team --metadata series:JENKINS_JOB_NAME#BUILD_NUMBER`\n\n## Timestamp adjustment\n\nSome test frameworks use local time in their timestamps. For archiving into databases this can be problematic if tests\nare viewed and or run in different timezones. To address this two ways to adjust the time back to GMT/UTC are provided.\n\nThe first allows the user to apply an adjustment of a fixed time in seconds of their choosing. This is useful for cases\nwhere tests were already run and the place/timezone where they were run are known. This option is useful if you are\narchiving in a different location to where tests are  run. The time value provided as an option is added to the \ntimestamp. Care must be taken with places where summer time is different (usually +1hr).\n\nFor example if test were run in Finland (GMT+2), plus 1 hour in summer, calculate total hours by minutes and seconds \nand invert to adjust in correct direction, i.e. -(2+1)*60*60, so --time-adjust-secs -10800 in summer time, \nand -7200 otherwise. \n\nThe second provides for automated adjustment based on the system timezone and/or daylight savings if it applies. This\nis useful if the tests and archiving are performed in the same place and time.\nThis assumes that if multiple computers are used that their timezone and daylight savings settings are identical.\nCare must also be taken that tests are not run just before a daylight savings time adjust and archived just after\nas times will be out by one hour. This could easily happen if long running tests cross a timezone adjust boundary.\nThis can be set using --time-adjust-with-system-timezone.\n\nThe ArchiverRobotListener allows for the second option if its adjust_with_system_timezone argument is set to True.\n\nTo ensure any of the optional adjustments are traceable, two meta data values are added to the suites' test run.\nIf time-adjust-secs is set to a value, time_adjust_secs with that value is written to the suite_metadata table.\nIf `--time-adjust-with-system-timezone` option is included, then the addition of the time-adjust-secs and the\nsystem timezone is written to the suite_metadata tables as time_adjust_secs_total.\n\ne.g with command line\n\n`output_parser.py --time-adjust-secs -3600 --time-adjust-with-system-timezone ...`\n\nthe following values would be added to suite_metadata table for (GMT+2)\n\n - time_adjust_secs with value -3600\n - time_adjust_secs_total with -10800.\n\nThis example is mimicking adding daylight savings (1hr = 3600 secs) onto\na system offset secs of 7200 (GMT+2). i.e. if the computer being used had the 'daylight savings' setting\nof and you want to manually add it during archiving.\n\n\n# Release notes\n- 1.0.0 (2020-12-18)\n  * --execution-context command line parameter. \n  * --changes command line parameter to support submitting changes in json file format.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaltat/TestArchiver",
    "keywords": "robotframework test report history",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "testarchiver2",
    "package_url": "https://pypi.org/project/testarchiver2/",
    "platform": "",
    "project_url": "https://pypi.org/project/testarchiver2/",
    "project_urls": {
      "Homepage": "https://github.com/aaltat/TestArchiver"
    },
    "release_url": "https://pypi.org/project/testarchiver2/1.0.1/",
    "requires_dist": [
      "psycopg2-binary (>=2.8.5)"
    ],
    "requires_python": ">=3.5",
    "summary": "Tools for serialising test results to SQL database",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8932668,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60b7c6cc6ea670dd5553e7c2ff8cf74fee4efc15dd3b4e66727c675d68923a22",
          "md5": "49cc18c7308c0f6d2274e91ef2eebba2",
          "sha256": "d83aefa2646a85dbc1294800a7deecf60e6245070a8d82055bd1b5158c579ffc"
        },
        "downloads": -1,
        "filename": "testarchiver2-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49cc18c7308c0f6d2274e91ef2eebba2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 39708,
        "upload_time": "2020-12-18T11:42:12",
        "upload_time_iso_8601": "2020-12-18T11:42:12.907273Z",
        "url": "https://files.pythonhosted.org/packages/60/b7/c6cc6ea670dd5553e7c2ff8cf74fee4efc15dd3b4e66727c675d68923a22/testarchiver2-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcd64b400884c350e8887b9f8c211b5062140109202d983f9f213f286ec2cc7d",
          "md5": "e95a0f3aa7306e1eb7a741629db79400",
          "sha256": "d33238e72976f40de67a37d36ac43df4804300d7d70a425e4e9ce1d9dbc37d17"
        },
        "downloads": -1,
        "filename": "testarchiver2-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e95a0f3aa7306e1eb7a741629db79400",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 34017,
        "upload_time": "2020-12-18T11:42:14",
        "upload_time_iso_8601": "2020-12-18T11:42:14.379145Z",
        "url": "https://files.pythonhosted.org/packages/fc/d6/4b400884c350e8887b9f8c211b5062140109202d983f9f213f286ec2cc7d/testarchiver2-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8e0307a5cc03726bcc301fdae333996eb4ba248b1dbeee896c8a89049354ad5",
          "md5": "08ca5f4bd63849916352fbb3ab83a2cd",
          "sha256": "0972a978a86fa8a6a1faf21b33ca61249e94b2fb235a2f216786708d1f274aaf"
        },
        "downloads": -1,
        "filename": "testarchiver2-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08ca5f4bd63849916352fbb3ab83a2cd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 39710,
        "upload_time": "2020-12-18T11:44:49",
        "upload_time_iso_8601": "2020-12-18T11:44:49.790061Z",
        "url": "https://files.pythonhosted.org/packages/b8/e0/307a5cc03726bcc301fdae333996eb4ba248b1dbeee896c8a89049354ad5/testarchiver2-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0825f146dffc3f17520234231f3a48823ffb00f36dc2d993c426265e6e59e944",
          "md5": "7e4612a1753f050f587025aa3d9f1e20",
          "sha256": "932509e92b2b30aee1fcd0664d7543bbbde6fdd4428932315090ad5063623a31"
        },
        "downloads": -1,
        "filename": "testarchiver2-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7e4612a1753f050f587025aa3d9f1e20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 34053,
        "upload_time": "2020-12-18T11:44:50",
        "upload_time_iso_8601": "2020-12-18T11:44:50.935874Z",
        "url": "https://files.pythonhosted.org/packages/08/25/f146dffc3f17520234231f3a48823ffb00f36dc2d993c426265e6e59e944/testarchiver2-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8e0307a5cc03726bcc301fdae333996eb4ba248b1dbeee896c8a89049354ad5",
        "md5": "08ca5f4bd63849916352fbb3ab83a2cd",
        "sha256": "0972a978a86fa8a6a1faf21b33ca61249e94b2fb235a2f216786708d1f274aaf"
      },
      "downloads": -1,
      "filename": "testarchiver2-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "08ca5f4bd63849916352fbb3ab83a2cd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 39710,
      "upload_time": "2020-12-18T11:44:49",
      "upload_time_iso_8601": "2020-12-18T11:44:49.790061Z",
      "url": "https://files.pythonhosted.org/packages/b8/e0/307a5cc03726bcc301fdae333996eb4ba248b1dbeee896c8a89049354ad5/testarchiver2-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0825f146dffc3f17520234231f3a48823ffb00f36dc2d993c426265e6e59e944",
        "md5": "7e4612a1753f050f587025aa3d9f1e20",
        "sha256": "932509e92b2b30aee1fcd0664d7543bbbde6fdd4428932315090ad5063623a31"
      },
      "downloads": -1,
      "filename": "testarchiver2-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7e4612a1753f050f587025aa3d9f1e20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 34053,
      "upload_time": "2020-12-18T11:44:50",
      "upload_time_iso_8601": "2020-12-18T11:44:50.935874Z",
      "url": "https://files.pythonhosted.org/packages/08/25/f146dffc3f17520234231f3a48823ffb00f36dc2d993c426265e6e59e944/testarchiver2-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}