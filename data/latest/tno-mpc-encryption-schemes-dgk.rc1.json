{
  "info": {
    "author": "TNO MPC Lab",
    "author_email": "mpclab@tno.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography",
      "Typing :: Typed"
    ],
    "description": "# TNO MPC Lab - Encryption Schemes - DGK\n\nThe TNO MPC lab consists of generic software components, procedures, and functionalities developed and maintained on a regular basis to facilitate and aid in the development of MPC solutions. The lab is a cross-project initiative allowing us to integrate and reuse previously developed MPC functionalities to boost the development of new protocols and solutions.\n\nThe package tno.mpc.encryption_schemes.dgk is part of the TNO Python Toolbox.\n\nImplementation of the DGK encryption scheme with support for precomputation of randomness. The \nencryption scheme supports positive and negative numbers, as well as fixed point encoding of \nnumbers. Homomorphic addition of ciphertexts, negation of ciphertexts, and multiplication of \nciphertexts with integral scalars has been included as well.\n\n*Limitations in (end-)use: the content of this software package may solely be used for applications that comply with international export control laws.*  \n*This implementation of cryptographic software has not been audited. Use at your own risk.*\n\n## Documentation\n\nDocumentation of the tno.mpc.encryption_schemes.dgk package can be found [here](https://docs.mpc.tno.nl/encryption_schemes/dgk/2.1.1).\n\n## Install\n\nEasily install the tno.mpc.encryption_schemes.dgk package using pip:\n```console\n$ python -m pip install tno.mpc.encryption_schemes.dgk\n```\n\n### Note:\nA significant performance improvement can be achieved by installing the GMPY2 library.\n```console\n$ python -m pip install 'tno.mpc.encryption_schemes.dgk[gmpy]'\n```\n\nIf you wish to use the tno.mpc.communication module you can use:\n```console\n$ python -m pip install 'tno.mpc.encryption_schemes.dgk[communication]'\n```\n\nIf you wish to run the tests you can use:\n```console\n$ python -m pip install 'tno.mpc.encryption_schemes.dgk[tests]'\n```\n\n## Usage\n\nThe DGK scheme can be used with and without support for full decryptions. When full decryptions are not supported one\ncan only use the private key to determine whether a ciphertext is zero or not.\n\nFull decryption support requires the scheme to pre-compute and store a lookup table for all possible plaintexts. This\ntable can become impractically large when the plaintext space is big.\n\nBelow we list usage examples in both cases.\n\nBasic usage (with full decryption):\n```python\nfrom tno.mpc.encryption_schemes.dgk import DGK\n\nif __name__ == \"__main__\":\n    # initialize DGK (with full decryption support) with v_p and v_q of length t=160 bits, n of length 1000 bits.\n    # The message space contains 10009 values and the precision of this scheme is 1 decimal\n    dgk_scheme = DGK.from_security_parameter(v_bits=160, n_bits=1000, u=10009, precision=1)\n    # encrypt the number 8.1\n    ciphertext1 = dgk_scheme.encrypt(8.1)\n    # add 0.9 to the original plaintext\n    ciphertext1 += 0.9\n    # multiply the original plaintext by 10\n    ciphertext1 *= 10\n    # encrypt the number 10\n    ciphertext2 = dgk_scheme.encrypt(10)\n    # add both encrypted numbers together\n    encrypted_sum = ciphertext1 + ciphertext2\n    # ...communication...\n    # decrypt the encrypted sum to 100\n    decrypted_sum = dgk_scheme.decrypt(encrypted_sum)\n    assert decrypted_sum == 100\n```\n\nUsage (without full decryption)\n```python\nfrom tno.mpc.encryption_schemes.dgk import DGK\n\nif __name__ == \"__main__\":\n    # initialize DGK (without full decryption support) with v_p and v_q of length t=160 bits, n of length 2048 bits.\n    # The message space contains 10009 values and the precision of this scheme is 1 decimal\n    dgk_scheme = DGK.from_security_parameter(v_bits=160, n_bits=1000, u=10009, precision=1, full_decryption=False)\n    # encrypt the number 8.1\n    ciphertext1 = dgk_scheme.encrypt(8.1)\n    # add 0.9 to the original plaintext\n    ciphertext1 += 0.9\n    # multiply the original plaintext by 10\n    ciphertext1 *= 10\n    # encrypt the number 10\n    ciphertext2 = dgk_scheme.encrypt(10)\n    # add both encrypted numbers together\n    encrypted_sum = ciphertext1 + ciphertext2\n    # ...communication...\n    # check that encrypted sum is not zero (in fact it is 100)\n    assert not encrypted_sum.is_zero()\n    # subtract the number 100\n    encrypted_sum -= 100\n    # check that encrypted sum is zero\n    assert encrypted_sum.is_zero()\n```\n\nRunning the examples above will show several warnings. The remainder of this documentation explains why the warnings are issued and how to get rid of them depending on the users' preferences.\n\n## Fresh and unfresh ciphertexts\n\nAn encrypted message is called a ciphertext. A ciphertext in the current package has a property `is_fresh` that indicates whether this ciphertext has fresh randomness, in which case it can be communicated to another player securely. More specifically, a ciphertext `c` is fresh if another user, knowledgeable of all prior communication and all current ciphertexts marked as fresh, cannot deduce any more private information from learning `c`.\n\nThe package understands that the freshness of the result of a homomorphic operation depends on the freshness of the inputs, and that the homomorphic operation renders the inputs unfresh. For example, if `c1` and `c2` are fresh ciphertexts, then `c12 = c1 + c2` is marked as a fresh encryption (no rerandomization needed) of the sum of the two underlying plaintexts. After the operation, ciphertexts `c1` and `c2` are no longer fresh.\n\nThe fact that `c1` and `c2` were both fresh implies that, at some point, we randomized them. After the operation `c12 = c1 + c2`, only `c12` is fresh. This implies that one randomization was lost in the process. In particular, we wasted resources. An alternative approach was to have unfresh `c1` and `c2` then compute the unfresh result `c12` and only randomize that ciphertext. This time, no resources were wasted. The package issues a warning to inform the user this and similar efficiency opportunities.\n\nThe package integrates naturally with `tno.mpc.communication` and if that is used for communication, its serialization logic will ensure that all sent ciphertexts are fresh. A warning is issued if a ciphertext was randomized in the proces. A ciphertext is always marked as unfresh after it is serialized. Similarly, all received ciphertexts are considered unfresh.\n\n## Tailor behavior to your needs\n\nThe crypto-neutral developer is facilitated by the package as follows: the package takes care of all bookkeeping, and the serialization used by `tno.mpc.communication` takes care of all randomization. The warnings can be [disabled](#warnings) for a smoother experience.\n\nThe eager crypto-youngster can improve their understanding and hone their skills by learning from the warnings that the package provides in a safe environment. The package is safe to use when combined with `tno.mpc.communication`. It remains to be safe while you transform your code from 'randomize-early' (fresh encryptions) to 'randomize-late' (unfresh encryptions, randomize before exposure). At that point you have optimized the efficiency of the library while ensuring that all exposed ciphertexts are fresh before they are serialized. In particular, you no longer rely on our serialization for (re)randomizing your ciphertexts.\n\nFinally, the experienced cryptographer can turn off warnings / turn them into exceptions, or benefit from the `is_fresh` flag for own purposes (e.g. different serializer or communication).\n\n### Warnings\n\nBy default, the `warnings` package prints only the first occurrence of a warning for each location (module + line number) where the warning is issued. The user may easily [change this behaviour](https://docs.python.org/3/library/warnings.html#the-warnings-filter) to never see warnings:\n\n```py\nfrom tno.mpc.encryption_schemes.dgk import EncryptionSchemeWarning\n\nwarnings.simplefilter(\"ignore\", EncryptionSchemeWarning)\n```\n\nAlternatively, the user may pass `\"once\"`, `\"always\"` or even `\"error\"`.\n\nFinally, note that some operations issue two warnings, e.g. `c1-c2` issues a warning for computing `-c2` and a warning for computing `c1 + (-c2)`.\n\n## Advanced usage\n\nThe [basic usage](#basic-usage) can be improved upon by explicitly randomizing at late as possible.\n\n```python\nfrom tno.mpc.encryption_schemes.dgk import DGK\n\nif __name__ == \"__main__\":\n    dgk_scheme = DGK.from_security_parameter(v_bits=160, n_bits=1000, u=10009, precision=1, full_decryption=False)\n    # unsafe_encrypt does NOT randomize the generated ciphertext; it is deterministic still\n    ciphertext1 = dgk_scheme.unsafe_encrypt(8.1)\n    ciphertext1 += 0.9\n    ciphertext1 *= 10\n    ciphertext2 = dgk_scheme.unsafe_encrypt(10)\n    # no randomness can be wasted by adding the two unfresh encryptions\n    encrypted_sum = ciphertext1 + ciphertext2\n    # randomize the result, which is now fresh\n    encrypted_sum.randomize()\n    # ...communication...\n    decrypted_sum = dgk_scheme.decrypt(encrypted_sum)\n    assert decrypted_sum == 100\n```\n\nAs explained [above](#fresh-and-unfresh-ciphertexts), this implementation avoids wasted randomization for `encrypted_sum` and therefore is more efficient.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/tno.mpc.encryption_schemes.dgk/#files",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://mpc.tno.nl/",
    "keywords": "TNO,MPC,multi-party computation,encryption schemes,dgk,Damgard, Geisler and Kroigard,cryptosystem",
    "license": "Apache License, Version 2.0",
    "maintainer": "TNO MPC Lab",
    "maintainer_email": "mpclab@tno.nl",
    "name": "tno.mpc.encryption-schemes.dgk",
    "package_url": "https://pypi.org/project/tno.mpc.encryption-schemes.dgk/",
    "platform": "any",
    "project_url": "https://pypi.org/project/tno.mpc.encryption-schemes.dgk/",
    "project_urls": {
      "Documentation": "https://docs.mpc.tno.nl/encryption_schemes/dgk/2.1.1",
      "Download": "https://pypi.org/project/tno.mpc.encryption_schemes.dgk/#files",
      "Homepage": "https://mpc.tno.nl/",
      "Source Code": "https://github.com/TNO-MPC/encryption_schemes.dgk"
    },
    "release_url": "https://pypi.org/project/tno.mpc.encryption-schemes.dgk/2.1.1/",
    "requires_dist": [
      "tno.mpc.encryption-schemes.templates (~=3.0)",
      "tno.mpc.encryption-schemes.utils (~=0.9)",
      "typing-extensions",
      "tno.mpc.communication (~=4.0) ; extra == 'communication'",
      "tno.mpc.encryption-schemes.utils[gmpy] (~=0.9) ; extra == 'gmpy'",
      "pytest ; extra == 'tests'",
      "pytest-asyncio ; extra == 'tests'",
      "sympy (~=1.3) ; extra == 'tests'",
      "tno.mpc.communication (~=4.0) ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Implementation of the Damgard, Geisler and Kroigard (DGK) cryptosystem",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14641847,
  "releases": {
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ed056f8c7a220b3298c80c9775da459d550e53e9466def01e00cc052d96c227",
          "md5": "e44fad94821ee219156dbc558801f65e",
          "sha256": "db05d83505522ecaec006e654ccfaaa1e618ac62826fbc60fe4be38420f6f2d8"
        },
        "downloads": -1,
        "filename": "tno.mpc.encryption_schemes.dgk-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e44fad94821ee219156dbc558801f65e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28429,
        "upload_time": "2022-08-03T13:15:19",
        "upload_time_iso_8601": "2022-08-03T13:15:19.395828Z",
        "url": "https://files.pythonhosted.org/packages/6e/d0/56f8c7a220b3298c80c9775da459d550e53e9466def01e00cc052d96c227/tno.mpc.encryption_schemes.dgk-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ed056f8c7a220b3298c80c9775da459d550e53e9466def01e00cc052d96c227",
        "md5": "e44fad94821ee219156dbc558801f65e",
        "sha256": "db05d83505522ecaec006e654ccfaaa1e618ac62826fbc60fe4be38420f6f2d8"
      },
      "downloads": -1,
      "filename": "tno.mpc.encryption_schemes.dgk-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e44fad94821ee219156dbc558801f65e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28429,
      "upload_time": "2022-08-03T13:15:19",
      "upload_time_iso_8601": "2022-08-03T13:15:19.395828Z",
      "url": "https://files.pythonhosted.org/packages/6e/d0/56f8c7a220b3298c80c9775da459d550e53e9466def01e00cc052d96c227/tno.mpc.encryption_schemes.dgk-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}