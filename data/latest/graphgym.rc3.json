{
  "info": {
    "author": "Jiaxuan You",
    "author_email": "jiaxuan@cs.stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GraphGym\nGraphGym is a platform for designing and evaluating Graph Neural Networks (GNN).\nGraphGym is proposed in *[Design Space for Graph Neural Networks](https://arxiv.org/abs/2011.08843)*, \nJiaxuan You, Rex Ying, Jure Leskovec, **NeurIPS 2020 Spotlight**.\n\nPlease refer to [PyG](https://www.pyg.org) for a tightly integrated version of GraphGym and PyG.\n\n### Highlights\n**1. Highly modularized pipeline for GNN**\n- **Data:** Data loading, data splitting\n- **Model:** Modularized GNN implementation\n- **Tasks:** Node / edge / graph level GNN tasks\n- **Evaluation:** Accuracy, ROC AUC, ...\n\n**2. Reproducible experiment configuration** \n- Each experiment is *fully described by a configuration file*\n\n**3. Scalable experiment management**\n- Easily launch *thousands of GNN experiments in parallel* \n- *Auto-generate* experiment analyses and figures across random seeds and experiments.\n\n**4. Flexible user customization**\n- Easily *register your own modules* \n  in [`graphgym/contrib/`](graphgym/contrib), \n  such as data loaders, GNN layers, loss functions, etc. \n\n### News\n- GraphGym 0.3.0 has been released. Now you may install stable version of GraphGym via `pip install graphgym`.\n- GraphGym 0.2.0 has been released. Now GraphGym supports Pytorch Geometric backend, in addition to the default DeepSNAP backend. \n  You may try it out in [`run_single_pyg.sh`](run/run_single_pyg.sh).\n```bash\ncd run\nbash run_single_pyg.sh \n```\n\n\n## Why GraphGym?\n**TL;DR:** GraphGym is great for GNN beginners, domain experts and GNN researchers.\n\n**Scenario 1:** You are a beginner to GNN, who wants to understand how GNN works.\n\nYou probably have read many exciting papers on GNN, and try to write your own GNN implementation.\nUsing existing packages for GNN, you still have to code up the essential pipeline on your own.\nGraphGym is a perfect place for your to start learning *standardized GNN implementation and evaluation*.\n\n<div align=\"center\">\n  <img align=\"center\" src=\"https://github.com/snap-stanford/GraphGym/raw/master/docs/design_space.png\" width=\"400px\" />\n  <b><br>Figure 1: Modularized GNN implementation.</b>\n</div>\n\n<br>\n\n**Scenario 2:** You want to apply GNN to your exciting applications.\n\nYou probably know that there are hundreds of possible GNN models, and selecting the best model is notoriously hard.\nEven worse, we have shown in our [paper](https://arxiv.org/abs/2011.08843) that the best GNN designs for different tasks differ drastically.\nGraphGym provides a *simple interface to try out thousands of GNNs in parallel* and understand the best designs for your specific task.\nGraphGym also recommends a \"go-to\" GNN design space, after investigating 10 million GNN model-task combinations.\n\n<div align=\"center\">\n  <img align=\"center\" src=\"https://github.com/snap-stanford/GraphGym/raw/master/docs/rank.png\" width=\"1000px\" />\n  <b><br>Figure 2: A guideline for desirable GNN design choices.</b> <br>(Sampling from 10 million GNN model-task combinations.)\n</div>\n\n\n<br>\n\n\n**Scenario 3:** You are a GNN researcher, who wants to innovate GNN models / propose new GNN tasks.\n\nSay you have proposed a new GNN layer `ExampleConv`.\nGraphGym can help you convincingly argue that `ExampleConv` is better than say `GCNConv`:\nwhen randomly sample from 10 million possible model-task combinations, how often `ExampleConv` will outperform `GCNConv`, \nwhen everything else is fixed (including the computational cost). \nMoreover, GraphGym can help you easily do hyper-parameter search, and *visualize* what design choices are better.\nIn sum, GraphGym can greatly facilitate your GNN research.\n\n<div align=\"center\">\n  <img align=\"center\" src=\"https://github.com/snap-stanford/GraphGym/raw/master/docs/evaluation.png\" width=\"1000px\" />\n  <b><br>Figure 3: Evaluation of a given GNN design dimension</b> (BatchNorm here).\n</div>\n\n\n<br>\n\n## Installation\n\n**Requirements**\n\n- CPU or NVIDIA GPU, Linux, Python3\n- PyTorch, various Python packages; Instructions for installing these dependencies are found below\n\n\n**1. Python environment (Optional):**\nWe recommend using Conda package manager\n\n```bash\nconda create -n graphgym python=3.7\nsource activate graphgym\n```\n\n**2. Pytorch:**\nInstall [PyTorch](https://pytorch.org/). \nWe have verified GraphGym under PyTorch 1.8.0, and GraphGym should work with PyTorch 1.4.0+. For example:\n```bash\n# CUDA versions: cpu, cu92, cu101, cu102, cu101, cu111\npip install torch==1.8.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html\n```\n\n**3. Pytorch Geometric:**\nInstall [PyTorch Geometric](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html), \nfollow their instructions. For example:\n```bash\n# CUDA versions: cpu, cu92, cu101, cu102, cu101, cu111\n# TORCH versions: 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0\nCUDA=cu101\nTORCH=1.8.0\npip install torch-scatter -f https://pytorch-geometric.com/whl/torch-${TORCH}+${CUDA}.html\npip install torch-sparse -f https://pytorch-geometric.com/whl/torch-${TORCH}+${CUDA}.html\npip install torch-cluster -f https://pytorch-geometric.com/whl/torch-${TORCH}+${CUDA}.html\npip install torch-spline-conv -f https://pytorch-geometric.com/whl/torch-${TORCH}+${CUDA}.html\npip install torch-geometric\n```\n\n**4. GraphGym and other dependencies:**\n\n\n```bash\ngit clone https://github.com/snap-stanford/GraphGym\ncd GraphGym\npip install -r requirements.txt\npip install -e .  # From latest verion\npip install graphgym # (Optional) From pypi stable version\n```\n\n\n**5. Test the installation**\n\n**Run a single experiment.** \nRun a test GNN experiment using GraphGym [`run_single.sh`](run/run_single.sh). \nConfigurations are specified in [`example.yaml`](run/configs/example.yaml). \nThe experiment is about node classification on Cora dataset (random 80/20 train/val split).\n```bash\ncd run\nbash run_single.sh # run a single experiment\n```\n\n**Run a batch of experiments.**\nRun a batch of GNN experiments using GraphGym [`run_batch.sh`](run/run_batch.sh). \nConfigurations are specified specified in \n[`example.yaml`](run/configs/example.yaml) (controls the basic architecture) \nand [`example.txt`](run/grids/example.txt) (controls how to do grid search). \nThe experiment examines 96 models in the recommended GNN design space, on 2 graph classification datasets.\nEach experiment is repeated 3 times, and we set that 8 jobs can be concurrently run.\nDepending on your infrastructure, finishing all the experiments may take a long time;\nyou can quit the experiment by `Ctrl-C` (GraphGym will properly kill all the processes).\n```bash\ncd run\nbash run_batch.sh # run a batch of experiments \n```\n\n**(Optional) Run GraphGym with CPU backend.**\nGraphGym supports cpu backend as well -- you only need to add one line `device: cpu` to the `.yaml` file. Here we provide an example. \n\n```bash\ncd run\nbash run_single_cpu.sh # run a single experiment using CPU backend\n```\n\n**(Optional) Run GraphGym with PyG backend.**\nRun GraphGym with Pytorch Geometric (PyG) backend\n[`run_single_pyg.sh`](run/run_single_pyg.sh) and \n[`run_batch_pyg.sh`](run/run_batch_pyg.sh),\ninstead of the default DeepSNAP backend.\nThe PyG backend follows the native PyG implementation, and is slightly more efficient than the DeepSNAP backend.\nCurrently the PyG backend only supports user-provided dataset splits, such as PyG native datasets or OGB datasets.\n```bash\ncd run\nbash run_single_pyg.sh # run a single experiment using PyG backend\nbash run_batch_pyg.sh # run a batch of experiments using PyG backend \n```\n\n\n\n\n\n\n## GraphGym In-depth Usage\n\n### 1 Run a single GNN experiment\nA full example is specified in [`run/run_single.sh`](run/run_single.sh).\n\n**1.1 Specify a configuration file.**\nIn GraphGym, an experiment is fully specified by a `.yaml` file.\nUnspecified configurations in the `.yaml` file will be populated by the default values in \n[`graphgym/config.py`](graphgym/config.py).\nFor example, in [`run/configs/example.yaml`](run/configs/example.yaml), \nthere are configurations on dataset, training, model, GNN, etc.\nConcrete description for each configuration is described in \n[`graphgym/config.py`](graphgym/config.py).\n\n**1.2 Launch an experiment.**\nFor example, in [`run/run_single.sh`](run/run_single.sh):\n```bash\npython main.py --cfg configs/example.yaml --repeat 3\n```\nYou can specify the number of different random seeds to repeat via `--repeat`.\n\n**1.3 Understand the results.**\nExperimental results will be automatically saved in directory `run/results/${CONFIG_NAME}/`; \nin the example above, it is `run/results/example/`.\nResults for different random seeds will be saved in different subdirectories, such as `run/results/example/2`.\nThe aggregated results over all the random seeds are *automatically* generated into `run/results/example/agg`,\nincluding the mean and standard deviation `_std` for each metric.\nTrain/val/test results are further saved into subdirectories, such as `run/results/example/agg/val`; here, \n`stats.json` stores the results after each epoch aggregated across random seeds, \n`best.json` stores the results at *the epoch with the highest validation accuracy*.\n\n### 2 Run a batch of GNN experiments\nA full example is specified in [`run/run_batch.sh`](run/run_batch.sh).\n\n**2.1 Specify a base file.**\nGraphGym supports running a batch of experiments.\nTo start, a user needs to select a base architecture `--config`.\nThe batch of experiments will be created by perturbing certain configurations of the base architecture.\n\n**2.2 (Optional) Specify a base file for computational budget.**\nAdditionally, GraphGym allows a user to select a base architecture to *control the computational budget* for the grid search, `--config_budget`.\nThe computational budget is currently measured by the number of trainable parameters; the control is achieved by auto-adjust\nthe hidden dimension size for GNN.\nIf no `--config_budget` is provided, GraphGym will not control the computational budget.\n\n**2.3 Specify a grid file.**\nA grid file describes how to perturb the base file, in order to generate the batch of the experiments.\nFor example, the base file could specify an experiment of 3-layer GCN for Cora node classification.\nThen, the grid file specifies how to perturb the experiment along different dimension, such as number of layers,\nmodel architecture, dataset, level of task, etc.\n\n\n**2.4 Generate config files for the batch of experiments,** based on the information specified above.\nFor example, in [`run/run_batch.sh`](run/run_batch.sh):\n```bash\npython configs_gen.py --config configs/${DIR}/${CONFIG}.yaml \\\n  --config_budget configs/${DIR}/${CONFIG}.yaml \\\n  --grid grids/${DIR}/${GRID}.txt \\\n  --out_dir configs\n```\n\n**2.5 Launch the batch of experiments.**\nFor example, in [`run/run_batch.sh`](run/run_batch.sh):\n```bash\nbash parallel.sh configs/${CONFIG}_grid_${GRID} $REPEAT $MAX_JOBS $SLEEP\n```\nEach experiment will be repeated for `$REPEAT` times. \nWe implemented a queue system to sequentially launch all the jobs, with `$MAX_JOBS` concurrent jobs running at the same time.\nIn practice, our system works great when handling thousands of jobs.\n\n**2.6 Understand the results.**\nExperimental results will be automatically saved in directory `run/results/${CONFIG_NAME}_grid_${GRID_NAME}/`; \nin the example above, it is `run/results/example_grid_example/`.\nAfter running each experiment, GraphGym additionally automatically averages across different models, saved in\n`run/results/example_grid_example/agg`. \nThere, `val.csv` represents validation accuracy for each model configuration at the *final* epoch; \n`val_best.csv` represents the results at the epoch with the highest average validation error;\n`val_best_epoch.csv` represents the results at the epoch with the highest validation error, averaged over different random seeds.\nWhen test set split is provided, `test.csv` represents test accuracy for each model configuration at the *final* epoch; \n`test_best.csv` represents the test set results at the epoch with the highest average validation error;\n`test_best_epoch.csv` represents the test set results at the epoch with the highest validation error, averaged over different random seeds.\n\n\n\n\n\n### 3 Analyze the results\nWe provides a handy tool to automatically provide an overview of a batch of experiments in\n[`analysis/example.ipynb`](analysis/example.ipynb).\n```bash\ncd analysis\njupyter notebook\nexample.ipynb   # automatically provide an overview of a batch of experiments\n```\n\n\n\n### 4 User customization\nA highlight of GraphGym is that it allows users to easily register their customized modules.\nThe supported customized modules are provided in directory \n[`graphgym/contrib/`](graphgym/contrib), including:\n- Activation [`graphgym/contrib/act/`](graphgym/contrib/act), \n- Customized configurations [`graphgym/contrib/config/`](graphgym/contrib/config), \n- Feature augmentation [`graphgym/contrib/feature_augment/`](graphgym/contrib/feature_augment), \n- Feature encoder [`graphgym/contrib/feature_encoder/`](graphgym/contrib/feature_encoder),\n- GNN head [`graphgym/contrib/head/`](graphgym/contrib/head), \n- GNN layer [`graphgym/contrib/layer/`](graphgym/contrib/layer), \n- Data loader [`graphgym/contrib/loader/`](graphgym/contrib/loader),\n- Loss function [`graphgym/contrib/loss/`](graphgym/contrib/loss), \n- GNN network architecture [`graphgym/contrib/network/`](graphgym/contrib/network), \n- Optimizer [`graphgym/contrib/optimizer/`](graphgym/contrib/optimizer),\n- GNN global pooling (graph classification only) \n  [`graphgym/contrib/pooling/`](graphgym/contrib/pooling), \n- GNN stage [`graphgym/contrib/stage/`](graphgym/contrib/stage),\n- GNN training pipeline [`graphgym/contrib/train/`](graphgym/contrib/train), \n- Data transformations [`graphgym/contrib/transform/`](graphgym/contrib/transform).\n\nWithin each directory, (at least) an example is provided, showing how to register user customized modules.\nNote that new user customized modules may result in new configurations; in these cases, new configuration fields\ncan be registered at [`graphgym/contrib/config/`](graphgym/contrib/config).\n\n**Note: Applying to your own datasets.**\nA common use case will be applying GraphGym to your favorite datasets.\nTo do so, you may follow our example in \n[`graphgym/contrib/loader/example.py`](graphgym/contrib/loader/example.py).\nGraphGym currently accepts a list of [NetworkX](https://networkx.org/documentation/stable/index.html) graphs \nor [PyG](https://pytorch-geometric.readthedocs.io/en/latest/) datasets.\n\n## Use case: Design Space for Graph Neural Networks (NeurIPS 2020 Spotlight)\n\nReproducing experiments in *[Design Space for Graph Neural Networks](https://arxiv.org/abs/2011.08843)*, Jiaxuan You, Rex Ying, Jure Leskovec, **NeurIPS 2020 Spotlight**.\nYou may refer to the [paper](https://arxiv.org/abs/2011.08843) or [project webpage](http://snap.stanford.edu/gnn-design/) for more details. \n\n```bash\n# NOTE: We include the raw results with GraphGym\n# If you run the following code, the results will be overridden.\ncd run/scripts/design/\nbash run_design_round1.sh   # first round experiments, on a design space of 315K GNN designs\nbash run_design_round2.sh   # second round experiments, on a design space of 96 GNN designs\ncd ../analysis\njupyter notebook\ndesign_space.ipynb   # reproducing all the analyses in the paper\n```\n\n<div align=\"center\">\n  <img align=\"center\" src=\"https://github.com/snap-stanford/GraphGym/raw/master/docs/overview.png\" width=\"900px\" />\n  <b><br>Figure 4: Overview of the proposed GNN design space and task space.</b>\n</div>\n\n\n\n\n## Use case: Identity-aware Graph Neural Networks (AAAI 2021)\n\nReproducing experiments in *[Identity-aware Graph Neural Networks](https://arxiv.org/abs/2101.10320)*, Jiaxuan You, Jonathan Gomes-Selman, Rex Ying, Jure Leskovec, **AAAI 2021**.\nYou may refer to the [paper](https://arxiv.org/abs/2101.10320) or [project webpage](http://snap.stanford.edu/idgnn/) for more details. \n\n```bash\n# NOTE: We include the raw results for ID-GNN in analysis/idgnn.csv\ncd run/scripts/IDGNN/\nbash run_idgnn_node.sh   # Reproduce ID-GNN node-level results\nbash run_idgnn_edge.sh   # Reproduce ID-GNN edge-level results\nbash run_idgnn_graph.sh   # Reproduce ID-GNN graph-level results\n```\n\n<div align=\"center\">\n  <img align=\"center\" src=\"https://github.com/snap-stanford/GraphGym/raw/master/docs/IDGNN.png\" width=\"900px\" />\n  <b><br>Figure 5: Overview of Identity-aware Graph Neural Networks (ID-GNN).</b>\n</div>\n\n\n## Contributors\n[Jiaxuan You](https://cs.stanford.edu/~jiaxuan/) initiates the project and majorly contributes to the entire GraphGym platform. \n[Rex Ying](https://cs.stanford.edu/people/rexy/) contributes to the feature augmentation modules.\nJonathan Gomes Selman enables GraphGym to have OGB support.\n\nGraphGym is inspired by the framework of [pycls](https://github.com/facebookresearch/pycls). \nGraphGym adopts [DeepSNAP](https://github.com/snap-stanford/deepsnap) as the default data representation.\nPart of GraphGym relies on [Pytorch Geometric](https://github.com/rusty1s/pytorch_geometric) functionalities.\n\n## Contributing\n\nWe warmly welcome the community to contribute to GraphGym.\nGraphGym is particularly designed to enable contribution / customization in a simple way. \nFor example, you may contribute your modules to [`graphgym/contrib/`](graphgym/contrib) by creating pull requests.\n\n## Citing GraphGym\nIf you find GraphGym or our paper useful, please cite our paper:\n```\n@InProceedings{you2020design,\n  title = {Design Space for Graph Neural Networks},\n  author = {You, Jiaxuan and Ying, Rex and Leskovec, Jure},\n  booktitle = {NeurIPS},\n  year = {2020}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snap-stanford/graphgym",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphgym",
    "package_url": "https://pypi.org/project/graphgym/",
    "platform": null,
    "project_url": "https://pypi.org/project/graphgym/",
    "project_urls": {
      "Homepage": "https://github.com/snap-stanford/graphgym"
    },
    "release_url": "https://pypi.org/project/graphgym/0.4.0/",
    "requires_dist": [
      "yacs",
      "tensorboardx",
      "torch",
      "torch-geometric",
      "networkx",
      "numpy",
      "deepsnap",
      "ogb"
    ],
    "requires_python": ">=3.6",
    "summary": "GraphGym: platform for designing and evaluating Graph Neural Networks (GNN)",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13287780,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08455f6c45529d470e7c500e1608e132681abe5907319f827a71c51ffa40b95c",
          "md5": "dc91f5195e75380de1b63517ffed3865",
          "sha256": "6e4b3169411286c461002328ad44e56b3a78718a562c75fe2a03bae74a402219"
        },
        "downloads": -1,
        "filename": "graphgym-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc91f5195e75380de1b63517ffed3865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 79697,
        "upload_time": "2021-06-29T02:10:56",
        "upload_time_iso_8601": "2021-06-29T02:10:56.903889Z",
        "url": "https://files.pythonhosted.org/packages/08/45/5f6c45529d470e7c500e1608e132681abe5907319f827a71c51ffa40b95c/graphgym-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "286892e76da8b001a97458b2f3db19b6f581183d13cec196f403a0532f931a80",
          "md5": "d8cb39254f29a07e0cffcfa22507b01f",
          "sha256": "9f4af6101632369d5f62b21bcde82d707b6db83a9c8224c1476021abe14bd6cf"
        },
        "downloads": -1,
        "filename": "graphgym-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8cb39254f29a07e0cffcfa22507b01f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53775,
        "upload_time": "2021-06-29T02:10:58",
        "upload_time_iso_8601": "2021-06-29T02:10:58.973535Z",
        "url": "https://files.pythonhosted.org/packages/28/68/92e76da8b001a97458b2f3db19b6f581183d13cec196f403a0532f931a80/graphgym-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fe3aa6d211186cfdec77bd7a72d3c083e40fd6066d7e13ced9b9365ede75f8a",
          "md5": "227bbb822ba7a4855fed76abf7aacaaf",
          "sha256": "07899bb778e551097a4779f2825c8b549c0f5f14e2b61b00b5d0d5e010a97784"
        },
        "downloads": -1,
        "filename": "graphgym-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "227bbb822ba7a4855fed76abf7aacaaf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 79752,
        "upload_time": "2021-06-29T02:17:44",
        "upload_time_iso_8601": "2021-06-29T02:17:44.389906Z",
        "url": "https://files.pythonhosted.org/packages/0f/e3/aa6d211186cfdec77bd7a72d3c083e40fd6066d7e13ced9b9365ede75f8a/graphgym-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc19bed469208af259885a8978633a25f50e80c46c840e1f7ab4a347c14db0a1",
          "md5": "13980e26b1c8a58bf7a5fac1c757e9fb",
          "sha256": "cf0fc25647eab9e3cc545b2a8f6ba166aea117c7e5bd463dceec9ad6694f1ce7"
        },
        "downloads": -1,
        "filename": "graphgym-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13980e26b1c8a58bf7a5fac1c757e9fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53928,
        "upload_time": "2021-06-29T02:17:45",
        "upload_time_iso_8601": "2021-06-29T02:17:45.932482Z",
        "url": "https://files.pythonhosted.org/packages/dc/19/bed469208af259885a8978633a25f50e80c46c840e1f7ab4a347c14db0a1/graphgym-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69db128ec8f5b76ff7b17e9310fbee23b8c47be2d407cc7e0640ec732c3c4049",
          "md5": "38a2cc08637a851baa104192af1616a8",
          "sha256": "6348e61bdb2c12f3a42db3a4b0704c5471fd3a80c52b908f310b3bb66f987851"
        },
        "downloads": -1,
        "filename": "graphgym-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38a2cc08637a851baa104192af1616a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 85059,
        "upload_time": "2022-03-24T23:19:13",
        "upload_time_iso_8601": "2022-03-24T23:19:13.873131Z",
        "url": "https://files.pythonhosted.org/packages/69/db/128ec8f5b76ff7b17e9310fbee23b8c47be2d407cc7e0640ec732c3c4049/graphgym-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f8077bc412be99a56304c3863de80558629ad3ec5e834458375a68169dec574",
          "md5": "5d8888c0d120926fb0d2c17c5356925c",
          "sha256": "762fcf6720dd263db7225e2a9540ffbecdb2a4bfe83c30edae53468fc5e09f5d"
        },
        "downloads": -1,
        "filename": "graphgym-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d8888c0d120926fb0d2c17c5356925c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 60816,
        "upload_time": "2022-03-24T23:19:15",
        "upload_time_iso_8601": "2022-03-24T23:19:15.452441Z",
        "url": "https://files.pythonhosted.org/packages/9f/80/77bc412be99a56304c3863de80558629ad3ec5e834458375a68169dec574/graphgym-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69db128ec8f5b76ff7b17e9310fbee23b8c47be2d407cc7e0640ec732c3c4049",
        "md5": "38a2cc08637a851baa104192af1616a8",
        "sha256": "6348e61bdb2c12f3a42db3a4b0704c5471fd3a80c52b908f310b3bb66f987851"
      },
      "downloads": -1,
      "filename": "graphgym-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38a2cc08637a851baa104192af1616a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 85059,
      "upload_time": "2022-03-24T23:19:13",
      "upload_time_iso_8601": "2022-03-24T23:19:13.873131Z",
      "url": "https://files.pythonhosted.org/packages/69/db/128ec8f5b76ff7b17e9310fbee23b8c47be2d407cc7e0640ec732c3c4049/graphgym-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f8077bc412be99a56304c3863de80558629ad3ec5e834458375a68169dec574",
        "md5": "5d8888c0d120926fb0d2c17c5356925c",
        "sha256": "762fcf6720dd263db7225e2a9540ffbecdb2a4bfe83c30edae53468fc5e09f5d"
      },
      "downloads": -1,
      "filename": "graphgym-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5d8888c0d120926fb0d2c17c5356925c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 60816,
      "upload_time": "2022-03-24T23:19:15",
      "upload_time_iso_8601": "2022-03-24T23:19:15.452441Z",
      "url": "https://files.pythonhosted.org/packages/9f/80/77bc412be99a56304c3863de80558629ad3ec5e834458375a68169dec574/graphgym-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}