{
  "info": {
    "author": "Levente Hunyadi",
    "author_email": "levente.hunyadi@instructure.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Data Access Platform Client Library\n\nData Access Platform (DAP) acts as a single source of data for analytics at Instructure. It provides efficient access to data collected across various educational products in bulk with high fidelity and low latency, adhering to a canonical data model.\n\nThe outgoing interface for DAP is the [Query API](https://data-access-platform-api.s3.amazonaws.com/index.html), which is an HTTP REST service. Users initiate asynchronous queries to retrieve data associated with their account. The client library is a Python wrapper around the DAP API, allowing users to fetch an initial snapshot and incremental changes, or initialize a database and keep it synchronized with data in DAP.\n\nEach DAP user acts as a data administrator for the organization they represent. They have full read access to the top-level account and all descendant sub-accounts. For example, in Canvas, the top of the organization hierarchy is uniquely identified by a root account ID, and each data record is associated with a root account ID. A DAP user with Canvas access can query data that are assigned the user's root account ID.\n\nDAP API requires authentication. The client library takes care of authentication behind the scenes provided you have the appropriate API key, and passes the token to each API operation it invokes. Refer to the documentation of Instructure [API Gateway Service](https://api-gateway.instructure.com/doc/) to learn more about the authentication process.\n\nUnder the hood, API users must first acquire a [JSON Web Token](https://datatracker.ietf.org/doc/html/rfc7519) (JWT) obtained from the authentication endpoint of Instructure [API Gateway Service](https://api-gateway.instructure.com/doc/) in order to invoke DAP API endpoints, and pass the JWT to all subsequent calls to DAP API.\n\n## Major features\n\n* List the name of tables available for querying\n* Download the JSON schema of a selected table\n* Fetch a full table snapshot\n* Fetch incremental updates since a specific point in time\n* Save data in several output formats: CSV, TSV, JSON, Parquet\n* Download output to a local directory\n* Load a table snapshot into a database or data warehouse\n* Synchronize data with a table in a database or data warehouse\n\nFor synchronizing with a database or data warehouse, the library currently only supports PostgreSQL.\n\n## Getting started\n\nAccessing DAP API requires a URL to an endpoint, and an API key. Once obtained, they can be set as environment variables (recommended), or passed as command-line arguments:\n\n### Use environment variables for authentication\n\nFirst, configure the environment with what you have in your setup instructions:\n\n```sh\nexport DAP_API_URL=https://api-gateway.instructure.com\nexport DAP_CLIENT_ID=us-east-1#0c59cade-...-2ac120002\nexport DAP_CLIENT_SECRET=xdEC0lI...4X4QBOhM\n```\n\nWith environment variables set, you can issue `dap` commands directly:\n\n```sh\ndap incremental --namespace canvas --table accounts --since 2022-07-13T09:30:00+02:00\n```\n\n### Use command-line for authentication\n\nUnless you set environment variables, you need to pass endpoint URL and API key to the `dap` command explicitly:\n\n```sh\ndap --base-url https://api-gateway.instructure.com --client-id=us-east-1#0c59cade-...-2ac120002 --client-secret=xdEC0lI...4X4QBOhM incremental --namespace canvas --table accounts --since 2022-07-13T09:30:00+02:00\n```\n\n## Command-line usage\n\nInvoking the command-line utility with `--help` shows usage, required and optional arguments:\n\n```sh\ndap --help\ndap incremental --help\ndap snapshot --help\ndap list --help\ndap schema --help\ndap initdb --help\ndap syncdb --help\ndap dropdb --help\n```\n\n## Common use cases\n\n### Obtain a full snapshot of a table in a database or data warehouse\n\nThe command-line utility is capable of automatically copying a full table snapshot to a (local) database with the `initdb` command. Along with the parameters `--table` and `--namespace`, you have to specify your target database with a connection string using the `--connection-string` parameter.\n\nTypically, the connection string looks as follows:\n\n```sh\ndialect://username:password@host:port/database\n```\n\nDialect is the database protocol dialect such as `postgresql`. The parameter `port` is optional, if omitted, the default port for the given dialect is assumed (e.g. `5432` in the case of `postgresql`).\n\nCurrently, the only dialect the library supports is `postgresql`.\n\nExamples:\n\n```sh\npostgresql://scott:password@localhost:5432/testdb\npostgresql://scott:password@localhost/testdb\n```\n\nExample for a complete `initdb` command:\n\n```sh\ndap initdb --connection-string postgresql://scott:password@localhost/testdb --namespace canvas --table accounts\n```\n\nThe tool automatically fetches the schema and the data from the DAP API, connects to your database, creates the necessary table based on the published schema and inserts the downloaded data into the created table. \n\nIf the target database already has a table with same name as the table whose snapshot is about to be obtained, an error is triggered.\n\n### Synchronize data with a table in a database or data warehouse\n\nAfter obtaining a full table snapshot with `initdb`, you can keep it up to date using the `syncdb` command. This replicates the inserts, updates and deletes that took place in the data source. The `syncdb` command has the same parameters as `initdb`. The tool automatically gets an incremental update from the DAP API, connects to your database and applies the incremental update to the target table. All this happens in one atomic transaction so in case of an error you retain consistent data in your database. Only database tables previously created by `initdb` can be synchronized with `syncdb`.\n\nExample:\n\n```sh\ndap syncdb --connection-string postgresql://scott:password@localhost/testdb --namespace canvas --table accounts\n```\n\nThe timestamp used for performing the incremental query on the DAP API is maintained in the `dap_meta` meta-information table together with other data about the synchronized tables. This `dap_meta` table is owned by the DAP client library and should not be dropped or changed.\n\n### Drop a synchronized table in a database or data warehouse\n\nWith the `dropdb` command, you can completely drop a table from your database that was previously created with `initdb`. An error is triggered if the given table does not exist in the target database.\n\nExample:\n\n```sh\ndap dropdb --connection-string postgresql://scott:password@localhost/testdb --namespace canvas --table accounts\n```\n\nThis command not only drops the specified table from the target database but also removes meta-information used for synchronization.\n\n### Use environment variables for database connection\n\nYou can (and in most cases, should) configure the database connection string as an environment variable:\n\n```sh\nexport DAP_CONNECTION_STRING=postgresql://scott:password@localhost/testdb\n```\n\nWith environment variables set, you can issue `initdb`, `syncdb` and `dropdb` commands directly without explicitly passing your database credentials to the terminal:\n\n```sh\ndap initdb --namespace canvas --table accounts\ndap syncdb --namespace canvas --table accounts\ndap dropdb --namespace canvas --table accounts\n```\n\n### Chain a snapshot query with an incremental query\n\nUsually, you should prefer initializing and synchronizing a database or data warehouse with the high-level commands `initdb` and `syncdb`. However, if your database engine is not supported, or you want to transform the (CSV, JSON or TSV) output as part of an ETL process, you may want to use low-level commands `snapshot` and `incremental`.\n\nWhen you start using DAP, you will definitely want to download a snapshot for the table(s) you need. In the snapshot query response body, you will find a field called `at`, which captures the data lake state at a point in time that the snapshot corresponds to. Copy the timestamp into the `since` field of an incremental query request. This will guarantee that you have chained the two queries and will not miss any data.\n\nNote that if a table has not received updates for a while (e.g. user profiles have not changed over the weekend), the value of `at` might be well behind current time.\n\n### Chain an incremental query with another\n\nTo fetch the most recent changes since a previous incremental query, chain the next request to the previous response using `since` and `until`. The `until` of a previous response becomes the `since` of the next request. The `until` of the next request should typically be omitted, it is automatically populated by DAP API. This allows you to fetch the most recent changes for a table. If a table has not received updates for a while, timestamps you see in the response may lag behind current time.\n\nFor example, suppose you submit an incremental query job `#82`, and receive a response whose `until` is `2021-07-28T19:00`. You can then pass `2021-07-28T19:00` as the value for `since` in your next incremental query job `#83`. Job `#83` would then return `2021-07-28T19:00` as the value of `since` (the exact value you submitted), and might return `2021-07-28T21:00` as `until` (the latest point in time for which data is available).\n\nIf you choose to fill in `until` in a request (which is not necessary in most cases), its value must be in the time range DAP has data for. Otherwise, your request is rejected.\n\n### Get the list of tables available for querying\n\nThe `list` command will return all table names from a certain namespace.\n\n### Download the latest schema for a table\n\nThe schema endpoint returns the latest schema of a table as a [JSON Schema](https://json-schema.org/) document. The `schema` command enables you to download the schema of a specified table as a JSON file.\n\n\n## Code examples\n\nWhile basic functionality of the DAP client library is exposed over its command-line interface (CLI), more advanced functionality requires interacting with classes and functions defined in the module `dap.api`. This enables seamless integration into workflow management platforms like Apache Airflow.\n\nFirst, we need to instantiate the `DAPClient` class:\n\n```python\nfrom dap.api import DAPClient\n\nbase_url: str = os.environ[\"DAP_API_URL\"]\nclient_id: str = os.environ[\"DAP_CLIENT_ID\"]\nclient_secret: str = os.environ[\"DAP_CLIENT_SECRET\"]\n\nasync with DAPClient(base_url, client_id, client_secret) as session:\n    ...\n```\n\nHowever, `DAPClient` can automatically extract the value of these parameters from the above environment variables, allowing us to write:\n\n```python\nasync with DAPClient() as session:\n    ...\n```\n\nNote that `DAPClient` uses an asynchronous context manager. Keywords such as `async with` are permitted only in an asynchronous context. We can enter such a context by invoking `asyncio.run(my_function(arg1, arg2, ...))`.\n\nLet's explore a few common use cases with `DAPClient`.\n\nBefore we obtain data, we need to get the latest schema of a table. The following example retrieves the JSON schema of the table `accounts` in the namespace `canvas` as a JSON schema object. A JSON object is a recursive Python data structure whose outermost layer is a Python `dict` whose keys are strings (type `str`) and values are JSON objects. We can use the Python package [jsonschema](https://python-jsonschema.readthedocs.io/en/stable/) to validate data against this JSON schema.\n\n```python\nasync with DAPClient() as session:\n    schema = await session.get_table_schema(\"canvas\", \"accounts\")\n```\n\nWe can also save the schema to a file. \n\n```python\noutput_directory: str = os.getcwd()\n\nasync with DAPClient() as session:\n    tables = await session.get_tables(\"canvas\")\n    for table in tables:\n        await session.download_table_schema(\"canvas\", table, output_directory)\n```\n\nIn order to get an initial copy of the full table contents, we need to perform a snapshot query. The parameter `format` determines the output data format, including CSV, TSV, JSONL and Parquet. We recommend JSONL or Parquet. For JSONL, each line in the output can be parsed into a JSON object, conforming to the JSON schema returned above.\n\n```python\nfrom dap.api import DAPClient\nfrom dap.dap_types import Format, SnapshotQuery\n\noutput_directory = os.getcwd()\n\nasync with DAPClient() as session:\n    query = SnapshotQuery(format=Format.JSONL, filter=None)\n    await session.download_table_data(\"canvas\", \"accounts\", query, output_directory)\n```\n\nOnce an initial snapshot has been obtained, we need to keep the data synchronized with DAP. This is possible with incremental queries. The following, more complex example gets all changes since a specified `since` timestamp, and saves each data file on the server to an output file in the local filesystem. The `last_seen` timestamp is typically the `until` returned by a previous incremental query.\n\n```python\nimport os\nfrom datetime import datetime, timezone\nfrom urllib.parse import ParseResult, urlparse\n\nimport aiofiles\n\nfrom dap.api import DAPClient\nfrom dap.dap_types import Format, IncrementalQuery\n\n# timestamp returned by last snapshot or incremental query\nlast_seen = datetime(2023, 2, 1, 0, 0, 0, tzinfo=timezone.utc)\n\nasync with DAPClient() as session:\n    query = IncrementalQuery(\n        format=Format.JSONL,\n        filter=None,\n        since=last_seen,\n        until=None,\n    )\n    result = await session.get_table_data(\"canvas\", \"accounts\", query)\n    resources = await session.get_resources(result.objects)\n    for resource in resources:\n        components: ParseResult = urlparse(str(resource.url))\n        file_path = os.path.join(\n            os.getcwd(), \"data\", os.path.basename(components.path)\n        )\n        async with session.stream_resource(resource) as stream:\n            async with aiofiles.open(file_path, \"wb\") as file:\n                # save gzip data to file without decompressing\n                async for chunk in stream.iter_chunked(64 * 1024):\n                    await file.write(chunk)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Edina Tipter",
    "maintainer_email": "edina.tipter@instructure.com",
    "name": "instructure-dap-client",
    "package_url": "https://pypi.org/project/instructure-dap-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/instructure-dap-client/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/instructure-dap-client/0.3.2/",
    "requires_dist": [
      "aiohttp (>=3.8.3)",
      "aiofiles (>=23.1.0)",
      "json-strong-typing (>=0.2.6)",
      "types-aiofiles (>=23.1.0)",
      "pyjwt (>=2.6.0)",
      "asyncpg (>=0.27.0)",
      "SQLAlchemy[asyncio] (>=2.0.1)"
    ],
    "requires_python": "",
    "summary": "Data Access Platform client library",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17479569,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b932d78fc4aac0e1d9a71947490c11568e4e4720471d09fb059f3c99926418a5",
          "md5": "a350ab951c9832d14cd0eeafc2176b88",
          "sha256": "b483a20663bccf34139381006492bb8d32fc74a73ea3a993d7078e9a12b94ae9"
        },
        "downloads": -1,
        "filename": "instructure_dap_client-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a350ab951c9832d14cd0eeafc2176b88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19300,
        "upload_time": "2023-01-06T10:43:03",
        "upload_time_iso_8601": "2023-01-06T10:43:03.542064Z",
        "url": "https://files.pythonhosted.org/packages/b9/32/d78fc4aac0e1d9a71947490c11568e4e4720471d09fb059f3c99926418a5/instructure_dap_client-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc908e0373c0c00a395f8603fab7c04fab88f48afa0a893a097f46e5a70ddc8b",
          "md5": "8730be8484a57e21684976837ca258d2",
          "sha256": "c1c3eb4297c3b3102a5ecacedb8d18859146bc9de56e2a31f3ede9ff43d90055"
        },
        "downloads": -1,
        "filename": "instructure-dap-client-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8730be8484a57e21684976837ca258d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19217,
        "upload_time": "2023-01-06T10:43:04",
        "upload_time_iso_8601": "2023-01-06T10:43:04.848146Z",
        "url": "https://files.pythonhosted.org/packages/bc/90/8e0373c0c00a395f8603fab7c04fab88f48afa0a893a097f46e5a70ddc8b/instructure-dap-client-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b62ec488343f32aab1f4ea42c353fb434720f932f4fb92883de653c3df6027f6",
          "md5": "dff04455bf13f430bd9018f753cca8f6",
          "sha256": "67934755931373277e6964b6e7dbbf42d1c2479aec195eef144ef6775e2ffe54"
        },
        "downloads": -1,
        "filename": "instructure_dap_client-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dff04455bf13f430bd9018f753cca8f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42402,
        "upload_time": "2023-03-22T13:03:04",
        "upload_time_iso_8601": "2023-03-22T13:03:04.810365Z",
        "url": "https://files.pythonhosted.org/packages/b6/2e/c488343f32aab1f4ea42c353fb434720f932f4fb92883de653c3df6027f6/instructure_dap_client-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f4af9a6ab9c21a824ba74d3df1ed53043063ed54c567041e517c61039aef21",
          "md5": "b6dc59b488ddd087fb3c8e07e1f75bfd",
          "sha256": "2d42d38fde2d3a38b71f2327635e72ec9c702dfa4eacd5a5f1a6c04b8dc9cc48"
        },
        "downloads": -1,
        "filename": "instructure-dap-client-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6dc59b488ddd087fb3c8e07e1f75bfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37764,
        "upload_time": "2023-03-22T13:03:06",
        "upload_time_iso_8601": "2023-03-22T13:03:06.464966Z",
        "url": "https://files.pythonhosted.org/packages/34/f4/af9a6ab9c21a824ba74d3df1ed53043063ed54c567041e517c61039aef21/instructure-dap-client-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef74d5174b06d5e3ff8cbba466be651f7e4d4544d016c357745c6b1e56fd37f9",
          "md5": "b77e1dbbce494010fee56fc789b67f39",
          "sha256": "fea41de41581f5fd8824712950b98cc6805da5ee5367af88b21f17ce10388d55"
        },
        "downloads": -1,
        "filename": "instructure_dap_client-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b77e1dbbce494010fee56fc789b67f39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42489,
        "upload_time": "2023-03-28T14:57:29",
        "upload_time_iso_8601": "2023-03-28T14:57:29.156813Z",
        "url": "https://files.pythonhosted.org/packages/ef/74/d5174b06d5e3ff8cbba466be651f7e4d4544d016c357745c6b1e56fd37f9/instructure_dap_client-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcfc3e2d55799a8bb394c1670cabdfe1cc38602f8040a6ca920e6992ec843382",
          "md5": "f8d6bae4b478ea5ed3d5311e4f83cc2e",
          "sha256": "01bef596b07bb88bc1c504327cfd3f7e7bfa51ca99b4636e2e1222aa02dbbc74"
        },
        "downloads": -1,
        "filename": "instructure-dap-client-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8d6bae4b478ea5ed3d5311e4f83cc2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37866,
        "upload_time": "2023-03-28T14:57:31",
        "upload_time_iso_8601": "2023-03-28T14:57:31.283767Z",
        "url": "https://files.pythonhosted.org/packages/fc/fc/3e2d55799a8bb394c1670cabdfe1cc38602f8040a6ca920e6992ec843382/instructure-dap-client-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef74d5174b06d5e3ff8cbba466be651f7e4d4544d016c357745c6b1e56fd37f9",
        "md5": "b77e1dbbce494010fee56fc789b67f39",
        "sha256": "fea41de41581f5fd8824712950b98cc6805da5ee5367af88b21f17ce10388d55"
      },
      "downloads": -1,
      "filename": "instructure_dap_client-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b77e1dbbce494010fee56fc789b67f39",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42489,
      "upload_time": "2023-03-28T14:57:29",
      "upload_time_iso_8601": "2023-03-28T14:57:29.156813Z",
      "url": "https://files.pythonhosted.org/packages/ef/74/d5174b06d5e3ff8cbba466be651f7e4d4544d016c357745c6b1e56fd37f9/instructure_dap_client-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcfc3e2d55799a8bb394c1670cabdfe1cc38602f8040a6ca920e6992ec843382",
        "md5": "f8d6bae4b478ea5ed3d5311e4f83cc2e",
        "sha256": "01bef596b07bb88bc1c504327cfd3f7e7bfa51ca99b4636e2e1222aa02dbbc74"
      },
      "downloads": -1,
      "filename": "instructure-dap-client-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f8d6bae4b478ea5ed3d5311e4f83cc2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37866,
      "upload_time": "2023-03-28T14:57:31",
      "upload_time_iso_8601": "2023-03-28T14:57:31.283767Z",
      "url": "https://files.pythonhosted.org/packages/fc/fc/3e2d55799a8bb394c1670cabdfe1cc38602f8040a6ca920e6992ec843382/instructure-dap-client-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}