{
  "info": {
    "author": "Jake Tae",
    "author_email": "jaesungtae@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PyGrad\n\nPyGrad is a [NumPy](https://numpy.org)-based pure Python mini automatic differentiation library. Adopting a define-by-run approach, PyGrad provides a clear, intuitive interface for constructing computational graphs, calculating gradients, and solving optimization problems. Building on top of these strengths as an autograd library, PyGrad also offers a minimal neural network API, inspired heavily by [PyTorch](https://pytorch.org). \n\n## Installation\n\nPyGrad is available on PyPi. \n\n```\npip install pygrad\n```\n\nTo build and develop from source, clone this repository via\n\n```\ngit clone https://github.com/jaketae/pygrad.git\n```\n\n## Quick Start\n\nFull documentation to be made available at [PyGrad docs](https://pygrad.readthedocs.io/en/latest/).\n\n### Variable Class\n\nPyGrad's main data class is `Variable`, through which computational graphs can be created. \n\n```python\n>>> from pygrad import Variable\n>>> a = Variable(5)\n>>> b = Variable(3)\n>>> a + b\nVariable(8)\n```\n\nPyGrad can, of course, also deal with arrays and tensors.\n\n```python\n>>> m1 = Variable([[1, 2], [3, 4]])\n>>> m2 = Variable([[1, 1], [1, 1]])\n>>> m1 + m2\nVariable([[2 3]\n          [4 5]])\n```\n\nSince PyGrad uses NumPy as its backend, it supports broadcasting as well as other matrix operations including transpose, reshape, and matrix multiplication. \n\n```python\n>>> m1.T\nVariable([[1 3]\n          [2 4]])\n>>> m1.reshape(1, 4)\nVariable([[1 2 3 4]])\n```\n\n### Gradient Computation\n\nUnder the hood, PyGrad creates computational graphs on the fly when operations are performed on a `Variable` instance. To obtain gradient values, simply call the `backward()` method on a leaf variable.\n\n```python\n>>> x = Variable(3)\n>>> y = x * x\n>>> y.backward()\n>>> x.grad\nVariable(6)\n```\n\nBy default, PyGrad deletes gradients for intermediary variables to efficiently utilize available memory. To keep the gradient values for all variables involved in the computation graph, set `retain_grad=True` in the `backward()` call. In the example below, we calculate <img src=\"https://latex.codecogs.com/svg.latex?%5Clarge%20z%3D2x%5E2\" alt=\"z=2x^2\">, where <img src=\"https://latex.codecogs.com/svg.latex?%5Clarge%20y%3D2x\"> is an intermediary variable.\n\n```python\n>>> x = Variable(3)\n>>> y = x * x\n>>> z = y + y\n>>> z.backward(retain_grad=True)\n>>> z.grad\nVariable(1)\n>>> y.grad\nVariable(2)\n>>> x.grad\nVariable(12)\n```\n\n## Neural Networks\n\nPyGrad offers an intuitive interface for building and training neural networks. Specifically, ANN-related components live in the `pygrad.nn` module. For those who are already familiar with PyTorch will immediately see that PyGrad's API is no different from that of PyTorch. We hope to add more flavor to PyGrad's API in the days to come.\n\n### Network Initialization\n\nBelow is a simple example of how to declare a neural network in PyGrad.\n\n```python\nfrom pygrad import nn\nfrom pygrad import functions as F\n\nclass NeuralNet(nn.Module):\n    def __init__(\n        self, num_input, num_hidden, num_class, dropout\n    ):\n        self.fc1 = nn.Linear(num_input, num_hidden)\n        self.fc2 = nn.Linear(num_hidden, num_class)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = F.relu(x)\n        x = self.fc2(x)\n        x = self.dropout(x)\n        return x\n```\n\n`pygrad.nn` includes layers and the `Module` class through which neural networks can be initialized. Also noteworthy is `pygrad.functions`, which includes activation functions, trigonometric functions, as well as a host of other basic operations such as reshape and transpose. \n\n### DataLoader Class\n\nPyGrad's `DataLoader` class allows basic batching and shuffling functionality to be applied to `pygrad.data.Dataset` instances. Here, we assume a custom `Dataset` instance, called `CatDogDataset`. \n\n```python\nfrom pygrad.data import DataLoader, ratio_split\n\nBATCH_SIZE = 8\n\ndataset = CatDogDataset()\ntrain_ds, test_ds = ratio_split(dataset, 0.8, 0.2)\ntrain_loader = DataLoader(train_ds, BATCH_SIZE)\ntest_loader = DataLoader(test_ds, BATCH_SIZE)\n```\n\n `DataLoader` instances can be iterated as follows:\n\n```python\nfor data, labels in train_loader:\n    # training logic here\n```\n\n### Optimizers\n\nPyGrad offers a number of different optimizers. These include\n\n* `pygrad.nn.optim.SGD`\n* `pygrad.nn.optim.AdaGrad`\n* `pygrad.nn.optim.AdaDelta`\n* `pygrad.nn.optim.Adam`\n\nTraining a model with optimizers can be done by instantiating an `nn.optim.Optimizer` object with some model's parameters. After calling `backward()` on a loss value, simply call `step()` on the optimizer to update the target model's parameters.\n\n```python\n# imports assumed\n\noptimizer = nn.optim.Adam(model.params())\n\nfor data, labels in train_loader:\n    pred = model(data)\n    loss = F.softmax_cross_entropy(pred, labels)\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n```\n\nThe optimizer will update the model's weights according to the gradient values of each parameter. \n\n## Credits\n\nPyGrad is heavily based upon [DeZero](https://github.com/oreilly-japan/deep-learning-from-scratch-3/tree/master/dezero), an educational library introduced in [Deep Learning from Scratch 3](https://koki0702.github.io/dezero-book/en/index.html). Much of PyGrad's initial code base was adapted from DeZero. The design language of PyGrad's neural network API was inspired by and borrowed from PyTorch. [Chainer](https://chainer.org) is also worthy of mention as well, as DeZero itself also adapted many features from Chainer. Last but not least, PyGrad would not have been made possible without NumPy. Our acknowledgement goes to all the developers who put their time and effort into developing the aforementioned libraries. \n\n## License\n\nReleased under the [MIT License](LICENSE.md).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaketae/pygrad",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygrad",
    "package_url": "https://pypi.org/project/pygrad/",
    "platform": "",
    "project_url": "https://pypi.org/project/pygrad/",
    "project_urls": {
      "Homepage": "https://github.com/jaketae/pygrad"
    },
    "release_url": "https://pypi.org/project/pygrad/0.1.0/",
    "requires_dist": [
      "numpy",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "A pure Python autograd library",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9001657,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6237a2a4de20f9aa4132f797a39a3073494da36e445f0a370c537bc70032f423",
          "md5": "7fb76822b4e018c2ef6aef672110f650",
          "sha256": "724ac64c813577c73dc649a0748255c0fe8d80d2d4a88e7211c3e5fa7062a78d"
        },
        "downloads": -1,
        "filename": "pygrad-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fb76822b4e018c2ef6aef672110f650",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3221,
        "upload_time": "2020-12-03T13:17:27",
        "upload_time_iso_8601": "2020-12-03T13:17:27.115261Z",
        "url": "https://files.pythonhosted.org/packages/62/37/a2a4de20f9aa4132f797a39a3073494da36e445f0a370c537bc70032f423/pygrad-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f944e15fb39265e0ee1aeb0dfca984ffc3a5f14a9311a0b19dae9acf86317ae4",
          "md5": "102244d46fc579704e0b7a3c9e3f9c1e",
          "sha256": "5ce05465c81e0a739002cbc376b74544c38713197d1d46c6dcf7dc7469102e48"
        },
        "downloads": -1,
        "filename": "pygrad-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "102244d46fc579704e0b7a3c9e3f9c1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1616,
        "upload_time": "2020-12-03T13:17:28",
        "upload_time_iso_8601": "2020-12-03T13:17:28.234727Z",
        "url": "https://files.pythonhosted.org/packages/f9/44/e15fb39265e0ee1aeb0dfca984ffc3a5f14a9311a0b19dae9acf86317ae4/pygrad-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84179a659ce0fec00b51296e7f0011eede765620ffb00638f5b6e33a003b487a",
          "md5": "10f34db423ba47f07e8b5575164d6003",
          "sha256": "77a958ab58726255af0d68faa1ae855a49d0f0e713a07ba1ad8c72009bee4b98"
        },
        "downloads": -1,
        "filename": "pygrad-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10f34db423ba47f07e8b5575164d6003",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 1987,
        "upload_time": "2020-12-20T00:36:19",
        "upload_time_iso_8601": "2020-12-20T00:36:19.338143Z",
        "url": "https://files.pythonhosted.org/packages/84/17/9a659ce0fec00b51296e7f0011eede765620ffb00638f5b6e33a003b487a/pygrad-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2f12c2152325e3fbeb6dadd2edbd3e16d5a0996f4952be88916afa524d7a872",
          "md5": "f8cd639fbf1af2d785fc30c2459ea917",
          "sha256": "1d09df86e60f3c036677d076708d851ac100d1c90fe876a4eb7dc09c76a1eae5"
        },
        "downloads": -1,
        "filename": "pygrad-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8cd639fbf1af2d785fc30c2459ea917",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2577,
        "upload_time": "2020-12-20T00:36:21",
        "upload_time_iso_8601": "2020-12-20T00:36:21.970101Z",
        "url": "https://files.pythonhosted.org/packages/f2/f1/2c2152325e3fbeb6dadd2edbd3e16d5a0996f4952be88916afa524d7a872/pygrad-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b99bcd5256702c9e6081f75ddbb92b821f69e3e3f58998b529d5389bab26a3c4",
          "md5": "b48b106377f810d04c254847273cfdb4",
          "sha256": "64641b100e922d165b19339921f0e04479e8541f0a9aa4d2becf888d0bdbbc14"
        },
        "downloads": -1,
        "filename": "pygrad-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b48b106377f810d04c254847273cfdb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13823,
        "upload_time": "2020-12-28T21:30:15",
        "upload_time_iso_8601": "2020-12-28T21:30:15.690896Z",
        "url": "https://files.pythonhosted.org/packages/b9/9b/cd5256702c9e6081f75ddbb92b821f69e3e3f58998b529d5389bab26a3c4/pygrad-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "840c2aff959aee894176d5fb0e249fd475799870a3aceef35f2edc7f91f59930",
          "md5": "6096c73465bb81369defb2f69709a090",
          "sha256": "35805e791ad54b6e45770f944a0c3cf6e7559a047d6279f2ccd922deaad96dee"
        },
        "downloads": -1,
        "filename": "pygrad-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6096c73465bb81369defb2f69709a090",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13634,
        "upload_time": "2020-12-28T21:30:20",
        "upload_time_iso_8601": "2020-12-28T21:30:20.410023Z",
        "url": "https://files.pythonhosted.org/packages/84/0c/2aff959aee894176d5fb0e249fd475799870a3aceef35f2edc7f91f59930/pygrad-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b99bcd5256702c9e6081f75ddbb92b821f69e3e3f58998b529d5389bab26a3c4",
        "md5": "b48b106377f810d04c254847273cfdb4",
        "sha256": "64641b100e922d165b19339921f0e04479e8541f0a9aa4d2becf888d0bdbbc14"
      },
      "downloads": -1,
      "filename": "pygrad-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b48b106377f810d04c254847273cfdb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13823,
      "upload_time": "2020-12-28T21:30:15",
      "upload_time_iso_8601": "2020-12-28T21:30:15.690896Z",
      "url": "https://files.pythonhosted.org/packages/b9/9b/cd5256702c9e6081f75ddbb92b821f69e3e3f58998b529d5389bab26a3c4/pygrad-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "840c2aff959aee894176d5fb0e249fd475799870a3aceef35f2edc7f91f59930",
        "md5": "6096c73465bb81369defb2f69709a090",
        "sha256": "35805e791ad54b6e45770f944a0c3cf6e7559a047d6279f2ccd922deaad96dee"
      },
      "downloads": -1,
      "filename": "pygrad-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6096c73465bb81369defb2f69709a090",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13634,
      "upload_time": "2020-12-28T21:30:20",
      "upload_time_iso_8601": "2020-12-28T21:30:20.410023Z",
      "url": "https://files.pythonhosted.org/packages/84/0c/2aff959aee894176d5fb0e249fd475799870a3aceef35f2edc7f91f59930/pygrad-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}