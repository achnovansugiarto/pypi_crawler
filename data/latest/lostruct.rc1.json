{
  "info": {
    "author": "Joseph Guhlin",
    "author_email": "joseph.guhlin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Python Software Foundation License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# lostruct-py\n\nThis is a reimplementation of lostruct from the original code: [lostruct](https://github.com/petrelharp/local_pca),\nby [Joseph Guhlin](https://github.com/jguhlin) with assistance by [Peter Ralph](https://github.com/petrelharp).\n\n[![Build Status](https://travis-ci.org/jguhlin/lostruct-py.svg?branch=master)](https://travis-ci.org/jguhlin/lostruct-py)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3997106.svg)](https://doi.org/10.5281/zenodo.3997106)\n\n# Demonstration\nPlease see the [Example Notebook](https://nbviewer.jupyter.org/github/jguhlin/lostruct-py/blob/master/Lostruct%20Example.ipynb)\n\n# Installation\nLostruct-py is available on [PyPi](https://pypi.org/project/lostruct/)\n```pip install lostruct``` is the easiest way to get started.\n\n# Usage\n\n## Input Files\nInputs should be a set of markers in BCF or VCF format. Both should be indexed as appropriate (see: bcftools index). Filtering before running this analysis is strongly suggested (Allele frequency, SNPs only, missingness, etc).\n\n# Citing\nIf you use this version, plesae cite it via Zenodo [DOI: 10.5281/zenodo.3997106](https://doi.org/10.5281/zenodo.3997106)\nas well as the original paper describing the method:\n```\nLi, Han, and Peter Ralph. \"Local PCA shows how the effect of population structure differs along the genome.\" Genetics 211.1 (2019): 289-304.\n```\n\n## CyVCF2\nThis project also uses [cyvcf2](https://github.com/brentp/cyvcf2) for fast VCF processing and should be cited:\n\n```\nBrent S Pedersen, Aaron R Quinlan, cyvcf2: fast, flexible variant analysis with Python, Bioinformatics, Volume 33, Issue 12, 15 June 2017, Pages 1867â€“1869, https://doi.org/10.1093/bioinformatics/btx057\n```\n\n# Changes from Lostruct R package\nPlease note numpy and R are different when it comes to row-major vs. column-major. Essentially, many things in the python version will be transposed from R.\n\n# Requirements\nPython >= 3.6 (may work with older versions). Developed on Python 3.8.5\n\n* numba\n* numpy\n* cyvcf2\n\nCyVCF2 requires zlib-dev, libbz2-dev, libcurl-dev, liblzma-dev; numa requires libllvm.\nThese may be installed with `conda` or `pip`, e.g. by running `pip install -r requirements.txt`.\n\n# Changes\nSee [CHANGES.MD](CHANGES.md) for the full list.\n\n## 0.0.4\n* Package name changed to lostruct\n* Parallelization of get_pc_dists\n* Implementation of fastmath parameter for get_pc_dists\n\n# Tests\n\nTests were derived from [Medicago HapMap data](http://www.medicagohapmap.org/downloads/Mt40/Mt4.0_HapMap_README.pdf). While the software had high correlation with lostruct R the values were determined. If values begin to deviate from the method these tests will now fail.\n\nTo run tests simply do:\n```\npython -m nose\n```\n\nThe tests furthermore require `unittest` and `scikit-bio` (and, `nose` to run them this way).\n\n## TOX\nTox allows you run tests with multiple versions of the python interpreter in venvs. It is best to use pyenv to install multiple versions python to run before submitting pull requests to be certain tests complete successfully across all versions.\n\n# Correlation Data\nTo test correlation of results between the R and Python versions we used data from the Medicago HapMap project, specifically SNPs for sister taxa chromsome 1, processed, and run with LoStruct R.\n\n## Data\n```bcftools annotate chr1-filtered-set-2014Apr15.bcf -x INFO,FORMAT | bcftools view -a -i 'F_MISSING<=0.2' | bcftools view -q 0.05 -q 0.95 -m2 -M2 -a -Oz -o chr1-filtered.vcf.gz```\n\n## Lostruct Processing\n```Rscript run_lostruct.R -t SNP -s 95 -k 10 -m 10 -i data/```\n\nRun 21 Aug 2020, using lostruct R git hash: 444b8c64bebdf7cdd0323e7735ccadddfc1c8989\n\nThis generates the mds_coords.tsv that is used in the correlation comparison. Additionally, the existing tests cover correlation.\n\n# FAQ / Notes\n\n## Future\nCurrently the end-user is expected to save the outputs. But would be good to save it in a similar way to lostruct R-code. Please open an issue if you need this.\n\n## Feature Completeness with R implementation\nWe are not yet feature complete with the R implementation. If something is needed please check for existing issues and comment about your need.\n\n## PCA, MDS, PCoA\nPCoA returns the same results as lostruct's MDS implementation (cmdscale). In the example Jupyter notebook you can see the correlation is R =~ 0.998. Some examples of other methods of clustering / looking at differences are included in the notebook.\n\n## Speed and Memory\nNUMBA and CyVCF2 are used for speeding up processes, and the software becomes multithreaded by default. The Sparse library is used to reduce memory requirements. parse_vcf function is multithreaded. Distance calculation is not.\n\n### tl;dr of below\nBelow two options are offered, fastmath for get_pc_dists function, and method=\"fsvd\" for pcoa. When using both you will see a performance increase and memory requirement decrease. Accuracy should decrease, but the absolute correlation we see with our test dataset remains ~0.998. Be aware when using fsvd the sign of the correlation may change.\n\n### Fastmath\nAdditionally, a mode implemented Numba's \"fastmath\" is available. For the function get_pc_dists() set fastmath=True. This results in a ~8% speed boost with very little change in the final output (correlation to R code output remains >= 0.995). This was benchmarked on the Medicago data used in the jupyter notebook using timeit, with 100 repeats with fastmath=False and Fastmath=True.\n```get_pc_dists(result, fastmath=True)```\n\nThe difference with fastmath=True and leaving it off can be seen [here](https://raw.githubusercontent.com/jguhlin/lostruct-py/master/benchmark_0.0.4-Get_PCs_Dists.svg). Note: Downloading the file will allow you to see more detailed information, as some javascript is contained in the SVG but disabled on GitHub.\n\nIf you need to limit thread usage, please see [Numba's guide](https://numba.pydata.org/numba-doc/latest/user/threading-layer.html#setting-the-number-of-threads)\n\n### Very Large Datasets\nThe R implementation handles very large datasets in less memory. The problem arises with the PCoA function. A metric MDS using sklearn may work. Another alternative would be to export the data and run cmdscale in R directly.\n\nThe sklearn MDS function differs from the scikit-bio function, here we focus on the scikit-bio version.\n\nThere are two options in python for this as well:\n```pcoa(method=\"fsvd\", ...)```\nWhich reduces memory and increases speed, at the cost of some accuracy.\n\n```pcoa(inplace=True, ...)```\nCenters a distance matrix in-place, further reducing memory requirements.\n\n```pcoa(number_of_dimensions=10)```\nReturns only the first 10 dimensions (configurable) of the scaling. This has no real effect if method is default or manuially set to \"eigh\" as the eigenvalues and eigenvectors are all calculated, so all are calculated and this becomes a truncation.\n\nYou can see the difference between method=\"fsvd\" and method=\"eigh\" (default) [here](https://raw.githubusercontent.com/jguhlin/lostruct-py/master/benchmark_0.0.4-PCoA.svg). These are tested with a minimum of 50 rounds. Note: Downloading the file will allow you to see more detailed information, as some javascript is contained in the SVG but disabled on GitHub.\n\nUsing all three techniques, correlation is maintained although the sign may change.\n```\nmds = pcoa(pc_dists, method=\"fsvd\", inplace=True, number_of_dimensions=10)\nnp.corrcoef(mds.samples[\"PC1\"], mds_coords['MDS1'].to_numpy())[0][1]\n-0.9978147088087447\n```\n\nFor more information please see the [applicable documentation](http://scikit-bio.org/docs/0.5.4/generated/generated/skbio.stats.ordination.pcoa.html) as well as the [relevant changelog](https://github.com/biocore/scikit-bio/blob/master/CHANGELOG.md#version-054-2018-08-23). A [Zenodo entry](https://zenodo.org/record/1404403) is also available on this topic.\n\n# References\n\nAdditional citations can be found in [CITATIONS](Citations.md) (UMAP, PHATE, Medicago HapMap).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jguhlin/lostruct-py",
    "keywords": "structure,population,genomics,bioinformatics,PCA,MDS",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lostruct",
    "package_url": "https://pypi.org/project/lostruct/",
    "platform": "",
    "project_url": "https://pypi.org/project/lostruct/",
    "project_urls": {
      "Bug Reports": "https://github.com/jguhlin/lostruct-py/issues",
      "Homepage": "https://github.com/jguhlin/lostruct-py",
      "Original Method Paper": "https://www.genetics.org/content/211/1/289",
      "R-lang version": "https://github.com/petrelharp/local_pca",
      "Source": "https://github.com/jguhlin/lostruct-py"
    },
    "release_url": "https://pypi.org/project/lostruct/0.0.4/",
    "requires_dist": [
      "numpy",
      "numba",
      "cyvcf2",
      "sparse"
    ],
    "requires_python": ">=3.6",
    "summary": "Re-implementation of lostruct in Python, used to compare local population structure across populations.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8040397,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3016f5f6d5be7e14efdcc7dff546f2c335b2bfe9827b568fade4f95ecb20e326",
          "md5": "453a84de759ad39463a0b4fdc50b11d2",
          "sha256": "3cdab30d3d95ea3cd0055cc3a80c372771eac110c8423ff112ad9ef058009909"
        },
        "downloads": -1,
        "filename": "lostruct-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "453a84de759ad39463a0b4fdc50b11d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11786,
        "upload_time": "2020-08-26T03:37:19",
        "upload_time_iso_8601": "2020-08-26T03:37:19.833715Z",
        "url": "https://files.pythonhosted.org/packages/30/16/f5f6d5be7e14efdcc7dff546f2c335b2bfe9827b568fade4f95ecb20e326/lostruct-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45537356084c03bef14c774ac70272475598b9a897dbaaf5cb6f2154d9d4f14a",
          "md5": "ef773642b6bde9797c7da7feb3ba0cea",
          "sha256": "a147dead5b3d91ce4baa422cd22976ed92c9b7dc06a5f89e71283d475f41d4f7"
        },
        "downloads": -1,
        "filename": "lostruct-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ef773642b6bde9797c7da7feb3ba0cea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11236,
        "upload_time": "2020-08-26T03:37:22",
        "upload_time_iso_8601": "2020-08-26T03:37:22.574124Z",
        "url": "https://files.pythonhosted.org/packages/45/53/7356084c03bef14c774ac70272475598b9a897dbaaf5cb6f2154d9d4f14a/lostruct-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3016f5f6d5be7e14efdcc7dff546f2c335b2bfe9827b568fade4f95ecb20e326",
        "md5": "453a84de759ad39463a0b4fdc50b11d2",
        "sha256": "3cdab30d3d95ea3cd0055cc3a80c372771eac110c8423ff112ad9ef058009909"
      },
      "downloads": -1,
      "filename": "lostruct-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "453a84de759ad39463a0b4fdc50b11d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11786,
      "upload_time": "2020-08-26T03:37:19",
      "upload_time_iso_8601": "2020-08-26T03:37:19.833715Z",
      "url": "https://files.pythonhosted.org/packages/30/16/f5f6d5be7e14efdcc7dff546f2c335b2bfe9827b568fade4f95ecb20e326/lostruct-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45537356084c03bef14c774ac70272475598b9a897dbaaf5cb6f2154d9d4f14a",
        "md5": "ef773642b6bde9797c7da7feb3ba0cea",
        "sha256": "a147dead5b3d91ce4baa422cd22976ed92c9b7dc06a5f89e71283d475f41d4f7"
      },
      "downloads": -1,
      "filename": "lostruct-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ef773642b6bde9797c7da7feb3ba0cea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11236,
      "upload_time": "2020-08-26T03:37:22",
      "upload_time_iso_8601": "2020-08-26T03:37:22.574124Z",
      "url": "https://files.pythonhosted.org/packages/45/53/7356084c03bef14c774ac70272475598b9a897dbaaf5cb6f2154d9d4f14a/lostruct-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}