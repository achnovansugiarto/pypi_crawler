{
  "info": {
    "author": "Robert Johnson and Alexander Kozlov and Mohammadreza Khanarmuei",
    "author_email": "robtheoceanographer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PyDuct\n> A framework for building and running simple data engineering pipelines in Python.\n\n\nIn Data Science or Data Engineering you constantly hear term “data pipeline”. But there are so many meanings to this term and people often are refering to very specific tools or packages depending on their own background/needs. There are pipelines for pretty much everything and in Python alone I can think of [Luigi](https://luigi.readthedocs.io/en/stable/), [Airflow](https://airflow.apache.org/), [scikit-learn pipelines](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html), and [Pandas pipes](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pipe.html) just off the top of my head - [this article](https://towardsdatascience.com/data-pipelines-what-why-and-which-ones-1f674ba49946) does a good job of helping you understand what is out there.\n\nIt can be quite confusing especially if you want a simple and agnostic pipeline that you can customize for your specific needs with no bells and whistles or lock-ins to libraries etc. That is where PyDuct comes in. It is for the simple data engineer who just wants to get stuff done in an ordered and repeatable way.\n\nPyDuct is a simple data pipeline that automates a chain of transformations performed on some data.\n\nPyDuct data pipelines are a great way of introducing automation, reproducibility, structure, and flow to your data engineering projects.\n\n---\n\nPyDuct was made by [Robert Johnson](https://www.robtheoceanographer.com/) and [Alexander Kozlov](https://alexkozlov.com/) and [Mohammadreza Khanarmuei](https://www.linkedin.com/in/mohammadreza-khanarmuei-437a3163)\n\n---\n\n## What is it?\n\nThe PyDuct transformation pipelines use user defined transformation functions linked together into a TransformationPipe. The key feature of PyDuct is that the datasource passed in can be almost anything that you desire  - e.g. a pandas dataframe, a geopandas dataframe, and iris datacube, a numppy array, so long as your transformation steps read and write the same object PyDuct will work for you.\n\n![pypipe arch](nbs/images/pypipe.jpeg)\n\n## Install\n\n`pip install pyduct`\n\n## How to use\n\nThe TransformationPipe class accepts a list of transformation functions,'steps', to be applied sequentially. Each step contains a name and a function, applied to the input DataObject and will return a transformed DataObject. There is also a third argument in a step that is an optional dictionary of parameters to be passed to your step transformation functions.\n\n\nIn order to use PyDuct you need two things - a DataObject and a set of transformation steps\n\n### DataObject\n\nIn this very simplified example we will use a [geopandas.GeoDataFrame](https://geopandas.org/en/stable/index.html) as our input DataObject. To do this we will load an example data set from [Kaggle](https://www.kaggle.com/) on the global distribution of Volcano Eruptions: https://www.kaggle.com/datasets/texasdave/volcano-eruptions that we have stored in the repo for this package as 'volcano_data_2010.csv'\n\n```python\nimport pandas\nimport geopandas\n```\n\nLoad the data and put it into a geopandas dataframe:\n\n```python\ndf1 = pandas.read_csv('../test_data/volcano_data_2010.csv')\n# Keep only relevant columns\ndf = df1.loc[:, (\"Year\", \"Name\", \"Country\", \"Latitude\", \"Longitude\", \"Type\")]\n# Create point geometries\ngeometry = geopandas.points_from_xy(df.Longitude, df.Latitude)\ngeo_df = geopandas.GeoDataFrame(df[['Year','Name','Country', 'Latitude', 'Longitude', 'Type']], geometry=geometry)\ngeo_df.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Name</th>\n      <th>Country</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>Tungurahua</td>\n      <td>Ecuador</td>\n      <td>-1.467</td>\n      <td>-78.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (-78.44200 -1.46700)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010</td>\n      <td>Eyjafjallajokull</td>\n      <td>Iceland</td>\n      <td>63.630</td>\n      <td>-19.620</td>\n      <td>Stratovolcano</td>\n      <td>POINT (-19.62000 63.63000)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010</td>\n      <td>Pacaya</td>\n      <td>Guatemala</td>\n      <td>14.381</td>\n      <td>-90.601</td>\n      <td>Complex volcano</td>\n      <td>POINT (-90.60100 14.38100)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010</td>\n      <td>Sarigan</td>\n      <td>United States</td>\n      <td>16.708</td>\n      <td>145.780</td>\n      <td>Stratovolcano</td>\n      <td>POINT (145.78000 16.70800)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010</td>\n      <td>Karangetang [Api Siau]</td>\n      <td>Indonesia</td>\n      <td>2.780</td>\n      <td>125.480</td>\n      <td>Stratovolcano</td>\n      <td>POINT (125.48000 2.78000)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Steps\n\nJust as an example of something to do we will define only one transformation steps to spatially subset to the Australian region. Yes, i know that this is an unrealistic example but it is just here to show you how to implement pipelines.\n\nWe must now write our transformation function - keep in mind that the function must take our DataObject as an input and return a transformed DataObject as a return... in this example that is a geopandas.GeoDataFrame\n\n```python\nfrom pyproj import crs\nfrom shapely.geometry import Polygon, MultiPolygon, box, Point\n```\n\n```python\ndef spatialCrop(gdf: geopandas.GeoDataFrame, **kwargs):\n    \"\"\"\n    This function will apply a sptial limit to a GeoDataFrame based on user-defined limits.\n    ----------\n    parameters:\n        gdf (geopandas.GeoDataFrame): an input GeoDataFrame\n        kwargs (dict): parameters, \n            - boundingBox (list): an iterable (lon_min, lat_min, lon_max, lat_max) of the specified region.\n    Output:\n        transformed_gdf (gdp.GeoDataFrame): GeoDataFrame that is spatially limited to the boundingBox.\n    \"\"\"\n    if \"boundingBox\" not in kwargs:\n        return gdf\n\n    boundingBox = kwargs[\"boundingBox\"]\n    # just an example so we are doing naughty things with the CRS... look away here...\n    coord_system = crs.crs.CRS('WGS 84')\n\n    bounding = geopandas.GeoDataFrame(\n        {\n            'limit': ['bounding box'],\n            'geometry': [\n                box(boundingBox[0], boundingBox[1], boundingBox[2],\n                    boundingBox[3])\n            ]\n        },\n        crs=coord_system)\n    limited_gdf = geopandas.tools.sjoin(gdf,\n                                        bounding,\n                                        op='intersects',\n                                        how='left')\n    limited_gdf = limited_gdf[limited_gdf['limit'] == 'bounding box']\n    limited_gdf = limited_gdf.drop(columns=['index_right', 'limit'])\n\n    return limited_gdf\n```\n\n### Define a PyDuct Pipe\nNow that we have a step or function and some data we can now define our transformation pipeline:\n\n```python\npipe = TransformationPipe(steps=[\n    ('refine region', spatialCrop, {\"boundingBox\": [80, -50, 180, 0]})\n])\n```\n\n### Evaluate your PyDuct Pipe\nThis where things get interesting... we can now call `evaluate` on our pipe and watch the magic happen:\n\n#### Input data:\n\n```python\ngeo_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Name</th>\n      <th>Country</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>Tungurahua</td>\n      <td>Ecuador</td>\n      <td>-1.467</td>\n      <td>-78.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (-78.44200 -1.46700)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010</td>\n      <td>Eyjafjallajokull</td>\n      <td>Iceland</td>\n      <td>63.630</td>\n      <td>-19.620</td>\n      <td>Stratovolcano</td>\n      <td>POINT (-19.62000 63.63000)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010</td>\n      <td>Pacaya</td>\n      <td>Guatemala</td>\n      <td>14.381</td>\n      <td>-90.601</td>\n      <td>Complex volcano</td>\n      <td>POINT (-90.60100 14.38100)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010</td>\n      <td>Sarigan</td>\n      <td>United States</td>\n      <td>16.708</td>\n      <td>145.780</td>\n      <td>Stratovolcano</td>\n      <td>POINT (145.78000 16.70800)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010</td>\n      <td>Karangetang [Api Siau]</td>\n      <td>Indonesia</td>\n      <td>2.780</td>\n      <td>125.480</td>\n      <td>Stratovolcano</td>\n      <td>POINT (125.48000 2.78000)</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>2018</td>\n      <td>Kilauea</td>\n      <td>United States</td>\n      <td>19.425</td>\n      <td>-155.292</td>\n      <td>Shield volcano</td>\n      <td>POINT (-155.29200 19.42500)</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>2018</td>\n      <td>Kadovar</td>\n      <td>Papua New Guinea</td>\n      <td>-3.620</td>\n      <td>144.620</td>\n      <td>Stratovolcano</td>\n      <td>POINT (144.62000 -3.62000)</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>2018</td>\n      <td>Ijen</td>\n      <td>Indonesia</td>\n      <td>-8.058</td>\n      <td>114.242</td>\n      <td>Stratovolcano</td>\n      <td>POINT (114.24200 -8.05800)</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>2018</td>\n      <td>Kilauea</td>\n      <td>United States</td>\n      <td>19.425</td>\n      <td>-155.292</td>\n      <td>Shield volcano</td>\n      <td>POINT (-155.29200 19.42500)</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>2018</td>\n      <td>Aoba</td>\n      <td>Vanuatu</td>\n      <td>-15.400</td>\n      <td>167.830</td>\n      <td>Shield volcano</td>\n      <td>POINT (167.83000 -15.40000)</td>\n    </tr>\n  </tbody>\n</table>\n<p>63 rows × 7 columns</p>\n</div>\n\n\n\n#### Evaluation:\n\n```python\ntransformed_geo_df = pipe.evaluate(geo_df)\n```\n\n#### Transformed data:\n\n```python\ntransformed_geo_df\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Name</th>\n      <th>Country</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>2010</td>\n      <td>Merapi</td>\n      <td>Indonesia</td>\n      <td>-7.542</td>\n      <td>110.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (110.44200 -7.54200)</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2010</td>\n      <td>Tengger Caldera</td>\n      <td>Indonesia</td>\n      <td>-7.942</td>\n      <td>112.950</td>\n      <td>Stratovolcano</td>\n      <td>POINT (112.95000 -7.94200)</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2011</td>\n      <td>Merapi</td>\n      <td>Indonesia</td>\n      <td>-7.542</td>\n      <td>110.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (110.44200 -7.54200)</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>2013</td>\n      <td>Merapi</td>\n      <td>Indonesia</td>\n      <td>-7.542</td>\n      <td>110.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (110.44200 -7.54200)</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>2013</td>\n      <td>Paluweh</td>\n      <td>Indonesia</td>\n      <td>-8.320</td>\n      <td>121.708</td>\n      <td>Stratovolcano</td>\n      <td>POINT (121.70800 -8.32000)</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>2013</td>\n      <td>Paluweh</td>\n      <td>Indonesia</td>\n      <td>-8.320</td>\n      <td>121.708</td>\n      <td>Stratovolcano</td>\n      <td>POINT (121.70800 -8.32000)</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>2013</td>\n      <td>Okataina</td>\n      <td>New Zealand</td>\n      <td>-38.120</td>\n      <td>176.500</td>\n      <td>Lava dome</td>\n      <td>POINT (176.50000 -38.12000)</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>2014</td>\n      <td>Kelut</td>\n      <td>Indonesia</td>\n      <td>-7.930</td>\n      <td>112.308</td>\n      <td>Stratovolcano</td>\n      <td>POINT (112.30800 -7.93000)</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>2015</td>\n      <td>Manam</td>\n      <td>Papua New Guinea</td>\n      <td>-4.100</td>\n      <td>145.061</td>\n      <td>Stratovolcano</td>\n      <td>POINT (145.06100 -4.10000)</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>2015</td>\n      <td>Okataina</td>\n      <td>New Zealand</td>\n      <td>-38.120</td>\n      <td>176.500</td>\n      <td>Lava dome</td>\n      <td>POINT (176.50000 -38.12000)</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>2016</td>\n      <td>Rinjani</td>\n      <td>Indonesia</td>\n      <td>-8.420</td>\n      <td>116.470</td>\n      <td>Stratovolcano</td>\n      <td>POINT (116.47000 -8.42000)</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>2017</td>\n      <td>Dieng Volc Complex</td>\n      <td>Indonesia</td>\n      <td>-7.200</td>\n      <td>109.920</td>\n      <td>Complex volcano</td>\n      <td>POINT (109.92000 -7.20000)</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>2017</td>\n      <td>Aoba</td>\n      <td>Vanuatu</td>\n      <td>-15.400</td>\n      <td>167.830</td>\n      <td>Shield volcano</td>\n      <td>POINT (167.83000 -15.40000)</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>2017</td>\n      <td>Merapi</td>\n      <td>Indonesia</td>\n      <td>-7.542</td>\n      <td>110.442</td>\n      <td>Stratovolcano</td>\n      <td>POINT (110.44200 -7.54200)</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>2018</td>\n      <td>Kadovar</td>\n      <td>Papua New Guinea</td>\n      <td>-3.620</td>\n      <td>144.620</td>\n      <td>Stratovolcano</td>\n      <td>POINT (144.62000 -3.62000)</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>2018</td>\n      <td>Kadovar</td>\n      <td>Papua New Guinea</td>\n      <td>-3.620</td>\n      <td>144.620</td>\n      <td>Stratovolcano</td>\n      <td>POINT (144.62000 -3.62000)</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>2018</td>\n      <td>Ijen</td>\n      <td>Indonesia</td>\n      <td>-8.058</td>\n      <td>114.242</td>\n      <td>Stratovolcano</td>\n      <td>POINT (114.24200 -8.05800)</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>2018</td>\n      <td>Aoba</td>\n      <td>Vanuatu</td>\n      <td>-15.400</td>\n      <td>167.830</td>\n      <td>Shield volcano</td>\n      <td>POINT (167.83000 -15.40000)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThe power of this work is in its reproducibility and scalablilty.\n\n## Credits\n\n- Logo art from \"Vecteezy.com\"\n- Demo data from \"Kaggle.com\"\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robtheoceanographer/pyduct/tree/master/",
    "keywords": "data pipeline framework template",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyduct",
    "package_url": "https://pypi.org/project/pyduct/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyduct/",
    "project_urls": {
      "Homepage": "https://github.com/robtheoceanographer/pyduct/tree/master/"
    },
    "release_url": "https://pypi.org/project/pyduct/0.0.1/",
    "requires_dist": [
      "pip",
      "packaging"
    ],
    "requires_python": ">=3.6",
    "summary": "A framework for building and running simple data engineering pipelines in Python.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13801078,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feaad0c70fb7baedce168095f58cfb8f4379830fcce8516d3ce6ee1db22a2a49",
          "md5": "43d0eb17f1091bd91d9ea4af3ef4db40",
          "sha256": "5697fd847d1be143ab9e7eb213281be78e9a0017156bbc34abf41b8e93a7e880"
        },
        "downloads": -1,
        "filename": "pyduct-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43d0eb17f1091bd91d9ea4af3ef4db40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10619,
        "upload_time": "2022-05-13T02:20:22",
        "upload_time_iso_8601": "2022-05-13T02:20:22.885500Z",
        "url": "https://files.pythonhosted.org/packages/fe/aa/d0c70fb7baedce168095f58cfb8f4379830fcce8516d3ce6ee1db22a2a49/pyduct-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3340f597029ab7395fc414259ba166949c1b7f0dad12c73b031b8f49e7bc894c",
          "md5": "d40a097fa96920a8b0c2b1f05908ecb8",
          "sha256": "6beee1572212172a0052368f2fea2ee55a81b1b6a6c5ba0a3d251f6db2fa614f"
        },
        "downloads": -1,
        "filename": "pyduct-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d40a097fa96920a8b0c2b1f05908ecb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13943,
        "upload_time": "2022-05-13T02:20:25",
        "upload_time_iso_8601": "2022-05-13T02:20:25.554790Z",
        "url": "https://files.pythonhosted.org/packages/33/40/f597029ab7395fc414259ba166949c1b7f0dad12c73b031b8f49e7bc894c/pyduct-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "feaad0c70fb7baedce168095f58cfb8f4379830fcce8516d3ce6ee1db22a2a49",
        "md5": "43d0eb17f1091bd91d9ea4af3ef4db40",
        "sha256": "5697fd847d1be143ab9e7eb213281be78e9a0017156bbc34abf41b8e93a7e880"
      },
      "downloads": -1,
      "filename": "pyduct-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "43d0eb17f1091bd91d9ea4af3ef4db40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10619,
      "upload_time": "2022-05-13T02:20:22",
      "upload_time_iso_8601": "2022-05-13T02:20:22.885500Z",
      "url": "https://files.pythonhosted.org/packages/fe/aa/d0c70fb7baedce168095f58cfb8f4379830fcce8516d3ce6ee1db22a2a49/pyduct-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3340f597029ab7395fc414259ba166949c1b7f0dad12c73b031b8f49e7bc894c",
        "md5": "d40a097fa96920a8b0c2b1f05908ecb8",
        "sha256": "6beee1572212172a0052368f2fea2ee55a81b1b6a6c5ba0a3d251f6db2fa614f"
      },
      "downloads": -1,
      "filename": "pyduct-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d40a097fa96920a8b0c2b1f05908ecb8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13943,
      "upload_time": "2022-05-13T02:20:25",
      "upload_time_iso_8601": "2022-05-13T02:20:25.554790Z",
      "url": "https://files.pythonhosted.org/packages/33/40/f597029ab7395fc414259ba166949c1b7f0dad12c73b031b8f49e7bc894c/pyduct-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}