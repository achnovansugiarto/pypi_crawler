{
  "info": {
    "author": "Oliver Wilkinson",
    "author_email": "oliver.wilkinson@unai.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "## ForceAtlas2 for Python\n\nA port of Gephi's Force Atlas 2 layout algorithm to Python 2 and Python 3 (with a wrapper for NetworkX and igraph). This is the fastest python implementation available with most of the features complete. It also supports Barnes Hut approximation for maximum speedup.\n\nForceAtlas2 is a very fast layout algorithm for force-directed graphs. It's used to spatialize a **weighted undirected** graph in 2D (Edge weight defines the strength of the connection). The implementation is based on this [paper](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679) and the corresponding [gephi-java-code](https://github.com/gephi/gephi/blob/master/modules/LayoutPlugin/src/main/java/org/gephi/layout/plugin/forceAtlas2/ForceAtlas2.java). Its really quick compared to the fruchterman reingold algorithm (spring layout) of networkx and scales well to high number of nodes (>10000).\n\n<p align=\"center\" text-align=\"center\">\n    <b>Spatialize a random Geometric Graph</b>\n</p>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://raw.githubusercontent.com/bhargavchippada/forceatlas2/master/examples/geometric_graph.png\" alt=\"Geometric Graph\">\n</p>\n\n## Installation\n\nInstall from pip:\n\n    pip install forceatlas2py\n\nTo build and install run from source:\n\n    python setup.py install\n\n**Cython is highly recommended if you are buidling from source as it will speed up by a factor of 10-100x depending on the graph**\n\n### Dependencies\n\n-   numpy (adjacency matrix as complete matrix)\n-   scipy (adjacency matrix as sparse matrix)\n-   tqdm (progressbar)\n-   Cython (10-100x speedup)\n-   networkx (To use the NetworkX wrapper function, you obviously need NetworkX)\n-   python-igraph (To use the igraph wrapper)\n\n<p align=\"center\" text-align=\"center\">\n    <b>Spatialize a 2D Grid</b>\n</p>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://raw.githubusercontent.com/bhargavchippada/forceatlas2/master/examples/grid_graph.png\" alt=\"Grid Graph\">\n</p>\n\n## Usage\n\nfrom forceatlas2py import ForceAtlas2\n\nCreate a ForceAtlas2 object with the appropriate settings. ForceAtlas2 class contains three important methods:\n```python\nforceatlas2 (G, pos, iterations)\n# G is a graph in 2D numpy ndarray format (or) scipy sparse matrix format. You can set the edge weights (> 0) in the matrix\n# pos is a numpy array (Nx2) of initial positions of nodes\n# iterations is num of iterations to run the algorithm\n# returns a list of (x,y) pairs for each node's final position\n```\n```python\nforceatlas2_networkx_layout(G, pos, iterations)\n# G is a networkx graph. Edge weights can be set (if required) in the Networkx graph\n# pos is a dictionary, as in networkx\n# iterations is num of iterations to run the algorithm\n# returns a dictionary of node positions (2D X-Y tuples) indexed by the node name\n```\n```python\nforceatlas2_igraph_layout(G, pos, iterations, weight_attr)\n# G is an igraph graph\n# pos is a numpy array (Nx2) or list of initial positions of nodes (see that the indexing matches igraph node index)\n# iterations is num of iterations to run the algorithm\n# weight_attr denotes the weight attribute's name in G.es, None by default\n# returns an igraph layout\n```\nBelow is an example usage. You can also see the feature settings of ForceAtlas2 class.\n\n```python\nimport networkx as nx\nfrom forceatlas2py import ForceAtlas2\nimport matplotlib.pyplot as plt\n\nG = nx.random_geometric_graph(400, 0.2)\n\nforceatlas2 = ForceAtlas2(\n                        # Behavior alternatives\n                        outboundAttractionDistribution=True,  # Dissuade hubs\n                        linLogMode=False,  # NOT IMPLEMENTED\n                        adjustSizes=False,  # Prevent overlap (NOT IMPLEMENTED)\n                        edgeWeightInfluence=1.0,\n\n                        # Performance\n                        jitterTolerance=1.0,  # Tolerance\n                        barnesHutOptimize=True,\n                        barnesHutTheta=1.2,\n                        multiThreaded=False,  # NOT IMPLEMENTED\n\n                        # Tuning\n                        scalingRatio=2.0,\n                        strongGravityMode=False,\n                        gravity=1.0,\n\n                        # Log\n                        verbose=True)\n\npositions = forceatlas2.forceatlas2_networkx_layout(G, pos=None, iterations=2000)\nnx.draw_networkx_nodes(G, positions, node_size=20, with_labels=False, node_color=\"blue\", alpha=0.4)\nnx.draw_networkx_edges(G, positions, edge_color=\"green\", alpha=0.05)\nplt.axis('off')\nplt.show()\n\n# equivalently\nimport igraph\nG = igraph.Graph.TupleList(G.edges(), directed=False)\nlayout = forceatlas2.forceatlas2_igraph_layout(G, pos=None, iterations=2000)\nigraph.plot(G, layout).show()\n```\nYou can also take a look at forceatlas2.py file for understanding the ForceAtlas2 class and its functions better.\n\n## Features Completed\n\n-   **barnesHutOptimize**: Barnes Hut optimization, n<sup>2</sup> complexity to n.ln(n)\n-   **gravity**: Attracts nodes to the center. Prevents islands from drifting away\n-   **Dissuade Hubs**: Distributes attraction along outbound edges. Hubs attract less and thus are pushed to the borders\n-   **scalingRatio**: How much repulsion you want. More makes a more sparse graph\n-   **strongGravityMode**: A stronger gravity view\n-   **jitterTolerance**: How much swinging you allow. Above 1 discouraged. Lower gives less speed and more precision\n-   **verbose**: Shows a progressbar of iterations completed. Also, shows time taken for different force computations\n-   **edgeWeightInfluence**: How much influence you give to the edges weight. 0 is \"no influence\" and 1 is \"normal\"\n-   **linLogMode** : linLogMode implemented as per the original gephi implementation\n\n## Documentation\n\nYou will find all the documentation in the source code\n\n## Contributors\n\nContributions are highly welcome. Please submit your pull requests and become a collaborator.\n\n## Copyright\n\n    Fork Copyright (C) 2021\n        Oliver Wilkinson oliver.wilkinson@unai.com\n        Will Hardman will.hardman@unai.com\n\n    Original Copyright (C) 2017 Bhargav Chippada bhargavchippada19@gmail.com.\n    Licensed under the GNU GPLv3.\n\nThe files are heavily based on the java files included in Gephi, git revision 2b9a7c8 and Max Shinn's port to python of the algorithm. Here I include the copyright information from those files:\n\n    Copyright 2008-2011 Gephi\n    Authors : Mathieu Jacomy <mathieu.jacomy@gmail.com>\n    Website : http://www.gephi.org\n    Copyright 2011 Gephi Consortium. All rights reserved.\n    Portions Copyrighted 2011 Gephi Consortium.\n    The contents of this file are subject to the terms of either the\n    GNU General Public License Version 3 only (\"GPL\") or the Common\n    Development and Distribution License(\"CDDL\") (collectively, the\n    \"License\"). You may not use this file except in compliance with\n    the License.\n\n    <https://github.com/mwshinn/forceatlas2-python>\n    Copyright 2016 Max Shinn <mws41@cam.ac.uk>\n    Available under the GPLv3\n\n    Also, thanks to Eugene Bosiakov <https://github.com/bosiakov/fa2l>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://gitlab.com/deep-seer/forceatlas2py/-/archive/master/forceatlas2py-master.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/deep-seer/forceatlas2py",
    "keywords": "forceatlas2,networkx,force-directed-graph,force-layout,graph",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "forceatlas2py",
    "package_url": "https://pypi.org/project/forceatlas2py/",
    "platform": "",
    "project_url": "https://pypi.org/project/forceatlas2py/",
    "project_urls": {
      "Download": "https://gitlab.com/deep-seer/forceatlas2py/-/archive/master/forceatlas2py-master.tar.gz",
      "Homepage": "https://gitlab.com/deep-seer/forceatlas2py"
    },
    "release_url": "https://pypi.org/project/forceatlas2py/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "The fastest ForceAtlas2 algorithm for Python (and NetworkX)",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10623170,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da3fd0a79717cc83c82db3b251abf47dbb6a26467d4045999ba8e5ab112876f8",
          "md5": "32001b35085a39335115d09c57966d6e",
          "sha256": "a5999d2705cc76d87fa14054f1444e8616fd0722cae22db9ccaa4753fad714a8"
        },
        "downloads": -1,
        "filename": "forceatlas2py-0.1.0-py3.8-linux-x86_64.egg",
        "has_sig": false,
        "md5_digest": "32001b35085a39335115d09c57966d6e",
        "packagetype": "bdist_egg",
        "python_version": "0.1.0",
        "requires_python": ">=3.7",
        "size": 458794,
        "upload_time": "2021-06-11T13:57:05",
        "upload_time_iso_8601": "2021-06-11T13:57:05.669885Z",
        "url": "https://files.pythonhosted.org/packages/da/3f/d0a79717cc83c82db3b251abf47dbb6a26467d4045999ba8e5ab112876f8/forceatlas2py-0.1.0-py3.8-linux-x86_64.egg",
        "yanked": true,
        "yanked_reason": "broken pip install"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f327c3055d2b5c03663563f233561401c452bdd68d00636acb3490bbc769532",
          "md5": "02bdb7c4bc3462807cfef0cd92b5ea66",
          "sha256": "587d3a8bad8731f9d52460c640735d7a0493a1754b64b9192a345ad63290d945"
        },
        "downloads": -1,
        "filename": "forceatlas2py-0.1.1-py3.8-linux-x86_64.egg",
        "has_sig": false,
        "md5_digest": "02bdb7c4bc3462807cfef0cd92b5ea66",
        "packagetype": "bdist_egg",
        "python_version": "0.1.1",
        "requires_python": ">=3.7",
        "size": 458793,
        "upload_time": "2021-06-11T14:38:46",
        "upload_time_iso_8601": "2021-06-11T14:38:46.548997Z",
        "url": "https://files.pythonhosted.org/packages/8f/32/7c3055d2b5c03663563f233561401c452bdd68d00636acb3490bbc769532/forceatlas2py-0.1.1-py3.8-linux-x86_64.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc49565e0ac8687bdeb8c3680d125411455a8316fc51325435a0c389ef4c08d3",
          "md5": "368982a563dbdc315545d65e4ec2ad39",
          "sha256": "9564ab48ec1677db6b1c81c97b9943ab2186d6838840c04930f9cf1323d40ec6"
        },
        "downloads": -1,
        "filename": "forceatlas2py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "368982a563dbdc315545d65e4ec2ad39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 452978,
        "upload_time": "2021-06-11T14:38:49",
        "upload_time_iso_8601": "2021-06-11T14:38:49.266853Z",
        "url": "https://files.pythonhosted.org/packages/bc/49/565e0ac8687bdeb8c3680d125411455a8316fc51325435a0c389ef4c08d3/forceatlas2py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f327c3055d2b5c03663563f233561401c452bdd68d00636acb3490bbc769532",
        "md5": "02bdb7c4bc3462807cfef0cd92b5ea66",
        "sha256": "587d3a8bad8731f9d52460c640735d7a0493a1754b64b9192a345ad63290d945"
      },
      "downloads": -1,
      "filename": "forceatlas2py-0.1.1-py3.8-linux-x86_64.egg",
      "has_sig": false,
      "md5_digest": "02bdb7c4bc3462807cfef0cd92b5ea66",
      "packagetype": "bdist_egg",
      "python_version": "0.1.1",
      "requires_python": ">=3.7",
      "size": 458793,
      "upload_time": "2021-06-11T14:38:46",
      "upload_time_iso_8601": "2021-06-11T14:38:46.548997Z",
      "url": "https://files.pythonhosted.org/packages/8f/32/7c3055d2b5c03663563f233561401c452bdd68d00636acb3490bbc769532/forceatlas2py-0.1.1-py3.8-linux-x86_64.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc49565e0ac8687bdeb8c3680d125411455a8316fc51325435a0c389ef4c08d3",
        "md5": "368982a563dbdc315545d65e4ec2ad39",
        "sha256": "9564ab48ec1677db6b1c81c97b9943ab2186d6838840c04930f9cf1323d40ec6"
      },
      "downloads": -1,
      "filename": "forceatlas2py-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "368982a563dbdc315545d65e4ec2ad39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 452978,
      "upload_time": "2021-06-11T14:38:49",
      "upload_time_iso_8601": "2021-06-11T14:38:49.266853Z",
      "url": "https://files.pythonhosted.org/packages/bc/49/565e0ac8687bdeb8c3680d125411455a8316fc51325435a0c389ef4c08d3/forceatlas2py-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}