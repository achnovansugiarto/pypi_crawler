{
  "info": {
    "author": "Stefano Ortolani, Jason Zhang",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: System :: Monitoring"
    ],
    "description": "![GitHub tag (latest SemVer)](https://img.shields.io/github/tag/vmware-labs/telemetry-peak-analyzer)\n![GitHub](https://img.shields.io/pypi/l/telemetry-peak-analyzer)\n![GitHub issues](https://img.shields.io/github/issues/vmware-labs/telemetry-peak-analyzer)\n\n# Telemetry Peak Analyzer\n\n## Overview\n\nTelemetry Peak Analyzer is a framework to analyze and detect peaks on telemetry data with multiple\ndimensions, indexes, and attributes. The analyzer detects meaningful peaks based on statistical\nmeasurements computed over a short _local window_ and a longer _global window_ of telemetry data:\n\n- _Local window_ - a short time data window in which we want to detect peaks of a given attribute\nor dimension, e.g., file type. During the detection process, the analyzer generates a local\nstatistics table (LST) with all the necessary statistical measurements.\n\n- _Global window_ - a historical long time data window which serves as a global benchmark to\ndetermine if a detected peak within the _local window_ is meaningful. During the detection process,\nit will generate (or update) a global statistics table (GST) with all the necessary statistical\nmeasurements.\n\nTelemetry data is dynamic, therefore the global benchmark as reflected by GST needs to be updated\nover time. To make the global benchmark adaptive, we use a sliding window mechanism which allows\nus to quickly update the new GST using previous GST and LST.\n\n*Note*: this implementation is a generalization of a research tool that was tailored to detect waves\nof malicious files sharing the same file type; to fully generalize terms and components, the source\ncode relies on the following terms to describe different parts of the telemetry feed:\n- `index`: a tuple of attributes used to uniquely identify a telemetry data record.\n- `dimensions`: the attributes used to decompose a time-series into independent and orthogonal\ntime-series.\n\nSuch generalization is not perfect (for example, the current implementation does not support more\nthan two dimensions) and some backends have obvious limitations; things will improve as the\nanalyzer supports more types of telemetry data.\n\n## Try it out\n\n### Build & Run\n\nThis package can be installed via pip, just run `pip install telemetry-peak-analyzer` or\n`pip install -e .`.\n\nIf you want to install the dependencies required by the `tina` backend (a custom backend based\non Elasticsearch used internally) you should append the `[tina]` extra option; you might need to\nuse double quotes when doing a dev install, i.e., `pip install -e \".[tina]\"`; note that a valid\nconfiguration file might be required. See `data/config.ini.template` for an example.\n\nExtra backends might require private dependencies; if that is the case, remember to select the\ninternal index server using the `-i` option; if you require access, contact one of the maintainers.\n\n### Scripts\n\nThis package includes a console script ready to be used. Examples:\n\n* `python -m telemetry_peak_analyzer -b\ntelemetry_peak_analyzer.backends.JsonBackend -n \"./data/telemetry_example_*\" -t 10`:\nin this example the peak analyzer reads from some local files using the JSON backend\n(note the double quotes) and sets the threshold to 10; note that when `-t` is specified, it\nwill overwrite any suggested global threshold defined in GST.\n* `python -m telemetry_peak_analyzer -c config.ini -b\ntelemetry_peak_analyzer.backends.tina.TinaBackend -n tina_nlemea -d 2`:\nin this example the peak analyzer reads from Tina from the last 2 days of data, using the\nconfiguration file `config.ini`, and the section `tina_nlemea` to know how to connect to the\nbackend.\n\n### Test\nThere are a number of JSON files in the  `data` directory for test using the JSON backend.\nNote that all the test files have been completely anonymized, to the point that even file hashes\ndo not refer to actual files anymore.\n\nAs mentioned above, the analyzer detects peaks based on statistical measurements of both a\n_local window_ and a _global window_. In the detailed example, the process comprises two steps.\n\n1) `python -m telemetry_peak_analyzer -n ./data/telemetry_example_3.json -s 2020-11-01 –e 2020-11-04`\n\nThis step generates an initial GST table as global benchmark from the defined initial\n_global window_, as specified by `-s` and `-e` options in the command. This step is only required\nthe first time the analyzer is executed. Subsequent runs will update the GST using previously\ncomputed GST and LST tables.\n\nExpected output:\n\n```\ntest@localhost telemetry-peak-analyzer % python -m telemetry_peak_analyzer -n ./data/telemetry_example_3.json -s 2020-11-01 -e 2020-11-04\nINFO -> [2021-09-15 12:00:11] [0010mb] Loading Peak Analyzer from 2020-11-01 00:00:00 to 2020-11-04 00:00:00 with t=None\nINFO -> [2021-09-15 12:00:11] [0010mb] Loading backend 'JsonBackend'\nINFO -> [2021-09-15 12:00:11] [0010mb] Loaded files:\nINFO -> [2021-09-15 12:00:11] [0010mb]  /Users/test/telemetry-peak-analyzer/data/telemetry_example_3.json\nINFO -> [2021-09-15 12:00:11] [0010mb] Loading analyzer 'FileTypePeakAnalyzer' with backend 'JsonBackend'\nINFO -> [2021-09-15 12:00:11] [0010mb] Loading global tables from file '/Users/test/telemetry-peak-analyzer/global_table.json'\nINFO -> [2021-09-15 12:00:11] [0010mb]  Failed: [Errno 2] No such file or directory: '/Users/test/telemetry-peak-analyzer/global_table.json'\nINFO -> [2021-09-15 12:00:11] [0010mb] Loading global tables from the backend\nINFO -> [2021-09-15 12:00:12] [0012mb] Loading local tables\nINFO -> [2021-09-15 12:00:12] [0013mb] Getting peaks\nINFO -> [2021-09-15 12:00:12] [0013mb] Refreshing global tables\nINFO -> [2021-09-15 12:00:12] [0013mb] Saving global tables to '/Users/test/telemetry-peak-analyzer/global_table.json'\n```\n\nAs the output shows, the process creates a JSON file `global_table.json` which is the initial\nGST table containing the global statistics.\n\n2) `python -m telemetry_peak_analyzer -n ./data/telemetry_example_3.json -s 2020-11-04 –e 2020-11-05`\n\nThis step will finally detect peaks from a _local window_ (as specified by `-s` and `-e` options)\nby leveraging the statistics in the GST and LST tables. This run will also update the GST (ideally,\nin production, you want to execute this second command on a daily basis to minimize the data to be\nprocessed).\n\nExpected output:\n\n```\ntest@localhost telemetry-peak-analyzer % python -m telemetry_peak_analyzer -n ./data/telemetry_example_3.json -s 2020-11-04 -e 2020-11-05\nINFO -> [2021-09-15 12:00:46] [0010mb] Loading Peak Analyzer from 2020-11-04 00:00:00 to 2020-11-05 00:00:00 with t=None\nINFO -> [2021-09-15 12:00:46] [0010mb] Loading backend 'JsonBackend'\nINFO -> [2021-09-15 12:00:46] [0010mb] Loaded files:\nINFO -> [2021-09-15 12:00:46] [0010mb]  /Users/test/telemetry-peak-analyzer/data/telemetry_example_3.json\nINFO -> [2021-09-15 12:00:46] [0010mb] Loading analyzer 'FileTypePeakAnalyzer' with backend 'JsonBackend'\nINFO -> [2021-09-15 12:00:46] [0010mb] Loading global tables from file '/Users/test/telemetry-peak-analyzer/global_table.json'\nINFO -> [2021-09-15 12:00:46] [0010mb] Loading local tables\nINFO -> [2021-09-15 12:00:46] [0015mb] Getting peaks\nINFO -> [2021-09-15 12:00:46] [0015mb] TelemetryPeak(malicious, ZipArchiveFile)\nINFO -> [2021-09-15 12:00:46] [0015mb]  sub_count: 11083\nINFO -> [2021-09-15 12:00:46] [0015mb]  samp_count: 3028\nINFO -> [2021-09-15 12:00:46] [0015mb]  samp_sub_count_max: 426\nINFO -> [2021-09-15 12:00:46] [0015mb]  samp_sub_count_mean: 3.66\nINFO -> [2021-09-15 12:00:46] [0015mb]  samp_sub_count_std: 11.54\nINFO -> [2021-09-15 12:00:46] [0015mb]  samp_sub_ratio: 0.04\nINFO -> [2021-09-15 12:00:46] [0015mb]  global_samp_sub_count_max: 2\nINFO -> [2021-09-15 12:00:46] [0015mb]  global_threshold_suggested: 629\nINFO -> [2021-09-15 12:00:46] [0015mb] Refreshing global tables\nINFO -> [2021-09-15 12:00:46] [0015mb] Saving global tables to '/Users/test/telemetry-peak-analyzer/global_table.json'\n```\n\nAs the output shows, it loads the GST generated from the 1st step, and successfully detects a\nZipArchiveFile-based peak within the _local window_, and prints out some key statistical\nmeasurements generated during the detection process.\n\nAt the end of the process, the GST table gets updated.\n\n\n## Contributing\n\nThe telemetry-peak-analyzer project team welcomes contributions from the community. Before you\nstart working with telemetry-peak-analyzer, please read our\n[Developer Certificate of Origin](https://cla.vmware.com/dco). All contributions to this repository\nmust be signed as described on that page. Your signature certifies that you wrote the patch or\nhave the right to pass it on as an open-source patch. For more detailed information,\nrefer to [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Development\n\nCreate the virtual env:\n\n`python3 -m venv venv`\n\nActivate the virtual env:\n\n`source ./venv/bin/activate`\n\nInstall `tox`:\n\n`pip install tox`\n\nRun tests:\n\n`tox`\n\nDue to a bug in `tox` if you update the dependencies in `setup.cfg` the environments will not be\nre-created, leading to errors when running the tests\n(see https://github.com/tox-dev/tox/issues/93).\nAs workaround, pass the `--recreate` flag after updating the dependencies.\n\nBefore committing, install the package in dev mode (needed by `pylint`) following the instructions\ndetailed in the `Build & Run` section.\n\nThen install `pylint` and `pre-commit`:\n\n`pip install pylint pre-commit`\n\nInstall the hook:\n\n`pre-commit install`\n\nIf you want to run pre-commit on all files use the following command:\n\n`pre-commit run --all-files`\n\n## License\n[BSD 2-Clause](https://spdx.org/licenses/BSD-2-Clause.html)\n\n## Extra\nThe peak analyzer can be used to detect network peaks too. In order to use it for this purpose, while calling the peak analyzer, the `-a` option should be used to specify that the NetworkTypePeakAnalyzer is to be used. The `-b` option should specify the backend to be used, i.e. the NetworkTinaBackend. \n\nDue to the much larger volume of network peaks in a given time range as compared to file peaks, it is recommended to use the `-e` and `-d` parameters to specify the date and time range. \n\nTest command:\n` python -m telemetry_peak_analyzer -c ./data/config.ini -a telemetry_peak_analyzer.analyzers.NetworkTypePeakAnalyzer -b telemetry_peak_analyzer.backends.tina.NetworkTinaBackend -n tina_westus -e 2022-04-01 -d 1 -o ./output.json`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vmware-labs/telemetry-peak-analyzer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telemetry-peak-analyzer",
    "package_url": "https://pypi.org/project/telemetry-peak-analyzer/",
    "platform": null,
    "project_url": "https://pypi.org/project/telemetry-peak-analyzer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vmware-labs/telemetry-peak-analyzer/issues",
      "Homepage": "https://github.com/vmware-labs/telemetry-peak-analyzer"
    },
    "release_url": "https://pypi.org/project/telemetry-peak-analyzer/0.1.6/",
    "requires_dist": [
      "ijson",
      "tina-client (>=0.2.1) ; extra == 'tina'"
    ],
    "requires_python": ">=3.6",
    "summary": "Analyzer to detect peaks when analyzing multi-attribute telemetry feeds",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14296769,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "296b4b894ab4162d57de87bdc9ec38c1da97e0eef7f272cbfbe6c340d49544c0",
          "md5": "edac169e0f8ec8d4c261760021d1aec4",
          "sha256": "37edffff96cb503b6ab84abfd9e614a262633e92386b896541a3489138ced823"
        },
        "downloads": -1,
        "filename": "telemetry_peak_analyzer-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edac169e0f8ec8d4c261760021d1aec4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18355,
        "upload_time": "2021-09-20T14:15:10",
        "upload_time_iso_8601": "2021-09-20T14:15:10.091344Z",
        "url": "https://files.pythonhosted.org/packages/29/6b/4b894ab4162d57de87bdc9ec38c1da97e0eef7f272cbfbe6c340d49544c0/telemetry_peak_analyzer-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dcda963fdf9538924bc1f072dc542b135929ab403540c318a60be388b7f498a",
          "md5": "cd069e199df8e7beda11a7240e327cb4",
          "sha256": "59a45e29cd19ca6bf0534c637bf2da1593b5d336c037d2ceb49f6b797e354c06"
        },
        "downloads": -1,
        "filename": "telemetry-peak-analyzer-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cd069e199df8e7beda11a7240e327cb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18786,
        "upload_time": "2021-09-20T14:15:11",
        "upload_time_iso_8601": "2021-09-20T14:15:11.170700Z",
        "url": "https://files.pythonhosted.org/packages/9d/cd/a963fdf9538924bc1f072dc542b135929ab403540c318a60be388b7f498a/telemetry-peak-analyzer-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a0fcad41526dd5b207dafcaf126499c28a6e2bef40869eae867904d1b1cf459",
          "md5": "bfd251b2c29ea6fbf734f59385823529",
          "sha256": "5e00eaba1e55dbced483157a38b2319a195a686cc057e70d2599ed9f85d0527d"
        },
        "downloads": -1,
        "filename": "telemetry_peak_analyzer-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfd251b2c29ea6fbf734f59385823529",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19843,
        "upload_time": "2022-01-05T15:57:24",
        "upload_time_iso_8601": "2022-01-05T15:57:24.045980Z",
        "url": "https://files.pythonhosted.org/packages/9a/0f/cad41526dd5b207dafcaf126499c28a6e2bef40869eae867904d1b1cf459/telemetry_peak_analyzer-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e0fc296bcaa262d28723271d6549cae152dfac378693fe4a4cb601cbdfc5877",
          "md5": "d80f06dbfd6743efde59f15ef709c7a3",
          "sha256": "a600ff0f61c8a797b3aed89267ff3809ef4f74288967fd2ec4dc566001963a0b"
        },
        "downloads": -1,
        "filename": "telemetry-peak-analyzer-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d80f06dbfd6743efde59f15ef709c7a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19737,
        "upload_time": "2022-01-05T15:57:25",
        "upload_time_iso_8601": "2022-01-05T15:57:25.278363Z",
        "url": "https://files.pythonhosted.org/packages/7e/0f/c296bcaa262d28723271d6549cae152dfac378693fe4a4cb601cbdfc5877/telemetry-peak-analyzer-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb6ec02e234b3fb32ebfbbd06842d77f402510017983b8d65af96f6b23d02131",
          "md5": "d5968f065f27263216afc36571a12ba1",
          "sha256": "2671cd769653ed1ae3193e9e2cf73b09aac435f15e5476e31462cda180d53f48"
        },
        "downloads": -1,
        "filename": "telemetry_peak_analyzer-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5968f065f27263216afc36571a12ba1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19848,
        "upload_time": "2022-04-21T17:30:58",
        "upload_time_iso_8601": "2022-04-21T17:30:58.038157Z",
        "url": "https://files.pythonhosted.org/packages/bb/6e/c02e234b3fb32ebfbbd06842d77f402510017983b8d65af96f6b23d02131/telemetry_peak_analyzer-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55780158cb226dac648462ff64f6bcafff816d0c95b3c0250c0994dd0b653163",
          "md5": "4fcbdf9dd0aea12414a8b8f1c22d473c",
          "sha256": "018dd232e6de62788e3e8aba3dfb5a9e04a5270d1c9750e02c474c4e0c3841c7"
        },
        "downloads": -1,
        "filename": "telemetry-peak-analyzer-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4fcbdf9dd0aea12414a8b8f1c22d473c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19747,
        "upload_time": "2022-04-21T17:30:59",
        "upload_time_iso_8601": "2022-04-21T17:30:59.391519Z",
        "url": "https://files.pythonhosted.org/packages/55/78/0158cb226dac648462ff64f6bcafff816d0c95b3c0250c0994dd0b653163/telemetry-peak-analyzer-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43d9e463e4a6552bd1d24fe20df57dab96f804bfdf5ae53421466d848f96d82d",
          "md5": "67db8067f078eaec0d3acf2f57e4d62e",
          "sha256": "2d9a73f94021af46875cf5b0c3126f4d1c53cadeae341384a742b0871c7b9c69"
        },
        "downloads": -1,
        "filename": "telemetry_peak_analyzer-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67db8067f078eaec0d3acf2f57e4d62e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20423,
        "upload_time": "2022-06-30T14:07:41",
        "upload_time_iso_8601": "2022-06-30T14:07:41.389132Z",
        "url": "https://files.pythonhosted.org/packages/43/d9/e463e4a6552bd1d24fe20df57dab96f804bfdf5ae53421466d848f96d82d/telemetry_peak_analyzer-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9559a5aec3bb84f0abff9301c28e4d630a0df72ded427616e2ed39fb129c966",
          "md5": "b137a9fdb6d202fe223af421a247b675",
          "sha256": "5c4b06b61e8dc27627fb380b241fdaa95b4f83e1f957c654de7f2e48fe884fb9"
        },
        "downloads": -1,
        "filename": "telemetry-peak-analyzer-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b137a9fdb6d202fe223af421a247b675",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20571,
        "upload_time": "2022-06-30T14:07:42",
        "upload_time_iso_8601": "2022-06-30T14:07:42.887925Z",
        "url": "https://files.pythonhosted.org/packages/e9/55/9a5aec3bb84f0abff9301c28e4d630a0df72ded427616e2ed39fb129c966/telemetry-peak-analyzer-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43d9e463e4a6552bd1d24fe20df57dab96f804bfdf5ae53421466d848f96d82d",
        "md5": "67db8067f078eaec0d3acf2f57e4d62e",
        "sha256": "2d9a73f94021af46875cf5b0c3126f4d1c53cadeae341384a742b0871c7b9c69"
      },
      "downloads": -1,
      "filename": "telemetry_peak_analyzer-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67db8067f078eaec0d3acf2f57e4d62e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20423,
      "upload_time": "2022-06-30T14:07:41",
      "upload_time_iso_8601": "2022-06-30T14:07:41.389132Z",
      "url": "https://files.pythonhosted.org/packages/43/d9/e463e4a6552bd1d24fe20df57dab96f804bfdf5ae53421466d848f96d82d/telemetry_peak_analyzer-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9559a5aec3bb84f0abff9301c28e4d630a0df72ded427616e2ed39fb129c966",
        "md5": "b137a9fdb6d202fe223af421a247b675",
        "sha256": "5c4b06b61e8dc27627fb380b241fdaa95b4f83e1f957c654de7f2e48fe884fb9"
      },
      "downloads": -1,
      "filename": "telemetry-peak-analyzer-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "b137a9fdb6d202fe223af421a247b675",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20571,
      "upload_time": "2022-06-30T14:07:42",
      "upload_time_iso_8601": "2022-06-30T14:07:42.887925Z",
      "url": "https://files.pythonhosted.org/packages/e9/55/9a5aec3bb84f0abff9301c28e4d630a0df72ded427616e2ed39fb129c966/telemetry-peak-analyzer-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}