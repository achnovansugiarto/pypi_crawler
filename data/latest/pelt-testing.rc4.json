{
  "info": {
    "author": "Luis Rosario",
    "author_email": "luisprooc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PELT TESTING\n\nPelt is a library for testing your algorithms and generate \nvarious data type for these algorithm of differents ways.\n\nINSTALLATION AND IMPORTATION:\n\n```console\npip install pelt-testing\n\nfrom pelt import Pelt\n```\n\n**Contents:**\n\n- [Basics](#Basics)\n- [Generators](#Generators)\n- [Snap](#Snap)\n\n---\n\n## Basics\n\nOne of functionalities of Pelt, is evaluate your algorithm with differents types of tests. \nAmong they are evaluate the type of data, the expected value, if two tests are same type, among others.\n\n### Help\n\nThis function provides a summary of all the methods that Pelt has.\n\n*Example:*\n\n```python\nPelt.help()\n```\n\n*Output:*\n\n\n![Pelt Help](screenshots/help.PNG)\n\n\n### Test\n\nThis function represent a unit test, it's the more basic functionality\nin Pelt.\n\n*Params: test( function, expected value, optional text)*\n\n```python\nPelt.test(10 + 5, 15)\n\nOutput: UNIT TEST [üïô 66275899.9337248]\n        Success Test\n        Expected Value: 15\n        Ouput: 15 ü•á\n\nPelt.test(sum( 20,20 ), 40)\n\nOutput: UNIT TEST [üïô 66275899.9337248]\n        Success Test\n        Expected Value: 40\n        Ouput: 40 ü•á\n\nPelt.test(sum( 25,10 ), 30)\n\nOutput: UNIT TEST [üïô 66275899.9337248]\n        Success Test\n        Expected Value: 30\n        Ouput: 35 üí• \n```\n\nPer default, test() add a example text for your unit test, but also you can \nadd a own text.\n\n```python\nPelt.test(mult( 2,10 ), 20,\"Multiplication\")\n\nOutput: MULTIPLICATION  [üïô 66275899.9337248]\n        Success Test\n        Expected Value: 20\n        Ouput: 20 ü•á\n```\n\n\n### Describe\n\nThis function represent a group of unit tests, it prints a detailed feedback of this tests group\nPer default it add a example test, but also you can add a own text.\n\n*Params: describe( matrix, optional text)*\n\n```python\nPelt.describe((\n    ( sum(10,20),30 ),\n    ( sum(20,20),40, \"SUM OF NUMBERS\" ),\n    ( sum(25,25),55, \"INCORRECT SUM OF NUMBERS\" ),\n),\"SUMS\")\n\nOuput: üîç SUMS üîé\n\n        UNIT TEST [üïô 61346599.9386544]\n\n        Success Test \n        Expected Value: 30\n        Ouput: 30 ü•á\n        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n        SUM OF NUMBERS [üïô 62347999.937653]\n\n        Success Test\n        Expected Value: 40\n        Ouput: 40 ü•á\n        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n        INCORRECT SUM OF NUMBERS [üïô 63402799.936598]\n\n        Failed Test\n        Expected value: 55\n        Ouput: 50 üí•\n        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n```\n\nWithout own text and with matrix:\n\n```python\nPelt.describe([\n    [ sum(5,5),10 ],\n    [ sum(13,12),25, \"SUM OF NUMBERS\" ]\n])\n\nOuput: üîç TESTS GROUP üîé\n\n        UNIT TEST [üïô 81670499.918331]\n\n        Success Test\n        Expected Value: 10\n        Ouput: 10 ü•á\n        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n        SUM OF NUMBERS [üïô 83254399.9167468]\n\n        Success Test\n        Expected Value: 25\n        Ouput: 25 ü•á\n        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n```\n\n\n### Is_equal\n\nIt compare the type and the value of the two tests introduced, something examples below.\n\n*Params: is_equal( test1, test2 )*\n\n```python\nPelt.is_equal(10, 10)\n\nOutput: ‚ùï ---TEST COMPARISON--- ‚ùï\n\n        10 AND 10 ARE EQUAL ü•á\n        10 :: <class 'int'>\n        10 :: <class 'int'>\n\nPelt.is_equal(\"Javascript\",\"Java\")\n\nOuput:  ‚ùï ---TEST COMPARISON--- ‚ùï\n\n        Javascript AND Java NOT ARE EQUAL üí•\n        Javascript :: <class 'str'>\n        Java :: <class 'str'>\n\nPelt.is_equal(10,\"10\")\n\nOutput: ‚ùï ---TEST COMPARISON--- ‚ùï\n\n        10 AND 10 NOT ARE EQUAL üí•\n        10 :: <class 'int'>\n        10 :: <class 'str'>\n\nPelt.is_equal( [10,20,30],[10,20,\"30\"] )\n\nOutput: ‚ùï ---TEST COMPARISON--- ‚ùï\n\n        [10, 20, 30] AND [10, 20, '30'] NOT ARE EQUAL üí•\n        [10, 20, 30] :: <class 'list'>\n        [10, 20, '30'] :: <class 'list'>\n```\n\n\n### Not_is_equal\n\nContrary to is equal, this function evaluates if the two tests are not of the same type and value.\n\n*Params: not_is_equal( test1, test2 )*\n\n```python\nPelt.not_is_equal([10,20,30],[10,20,\"30\"])\n\nOuput:  ‚ùó ---TEST COMPARISON--- ‚ùó\n\n        [10, 20, 30] AND [10, 20, '30'] NOT ARE EQUAL ü•á\n        [10, 20, 30] :: <class 'list'>\n        [10, 20, '30'] :: <class 'list'>\n\nPelt.not_is_equal(10,10)\n\nOuput:  ‚ùó ---TEST COMPARISON--- ‚ùó\n\n        10 AND 10 ARE EQUAL üí•\n        10 :: <class 'int'>\n        10 :: <class 'int'>\n```\n\n\n### Is_equal_type\n\nIt compare only the data type between the two tests introduced, In this case the value of data not is important,\nsomething examples below.\n\n*Params: is_equal_type( test1, test2 )*\n\n```python\nPelt.is_equal_type(10,5)\n\nOutput: ‚ùï ---TEST TYPE COMPARISON--- ‚ùï\n\n        10 AND 5 ARE THE SAME TYPE ü•á\n        10 :: <class 'int'>\n        5 :: <class 'int'>\n\nPelt.is_equal_type(\"10\",10)\n\nOutput: ‚ùï ---TEST TYPE COMPARISON--- ‚ùï\n\n        10 AND 10 NOT ARE THE SAME TYPE üí•\n        10 :: <class 'str'>\n        10 :: <class 'int'>\n\nPelt.is_equal_type(\"JS\",\"Javascript\")\n\nOutput: ‚ùï ---TEST TYPE COMPARISON--- ‚ùï\n\n        JS AND Javascript ARE THE SAME TYPE ü•á\n        JS :: <class 'str'>\n        Javascript :: <class 'str'>\n```\n\n\n### Not_is_equal_type\n\nContrary to is equal type, this function evaluates if the two tests are not of the same type, \nthe data value not is important.\n\n*Params: not_is_equal_type( test1, test2 )*\n\n```python\nPelt.not_is_equal_type(10, 10)\n\nOutput: ‚ùó ---TEST TYPE COMPARISON--- ‚ùó\n\n        10 AND 10 ARE THE SAME TYPE üí•\n        10 :: <class 'int'>\n        10 :: <class 'int'>\n\nPelt.not_is_equal_type((1,4,5), [10,\"GO\"])\n\nOutput: ‚ùó ---TEST TYPE COMPARISON--- ‚ùó\n\n        (1, 4, 5) AND [10, 'GO'] NOT ARE THE SAME TYPE ü•á\n        (1, 4, 5) :: <class 'tuple'>\n        [10, 'GO'] :: <class 'list'>\n```\n\n\n### Is_type\n\nIt evaluate the type of value of your data or your test.\n\n*Params: is_type( value )*\n\n```python\nPelt.is_type( (1,4,5) ) \n\nOutput: ‚ùï---VALUE TYPE--- ‚ùï\n\n        (1, 4, 5) ‚áî 'tuple'\n\nPelt.is_type( sum(10,20) )\n\nOutput: ‚ùï---VALUE TYPE--- ‚ùï\n\n        30 ‚áî 'int'\n\nPelt.is_type( {\"5\",4,5} )\n\nOutput: ‚ùï---VALUE TYPE--- ‚ùï \n\n        {'5', 4, 5} ‚áî 'set'\n```\n\n\n### Is_none\n\nIt evaluate if your test is none or not.\n\n*Params: is_none( test )*\n\n```python\nPelt.is_none( sum(10,20) )\n\nOutput: ‚ùï---TEST NONE--- ‚ùï\n\n        NOT IS NONE üí•\n\nPelt.is_none( None )\n\nOutput: ‚ùï---TEST NONE--- ‚ùï\n\n        IS NONE ü•á\n```\n\n\n## Generators \n\nPelt also offers various types of test data generators for you to test your \nalgorithms and evaluate the result with the data that can be found in Pelt. \nThis will prevent you from generating data manually and repetitively. \n\n\n### Gt_int\n\nThis method generates a random number between 0 and 300, this method can take \na number as a parameter. If you pass a number as a parameter, this method will \nreturn you an array of numbers with the length of the parameter you added. \n\n*Params: gt_int( number ), per default it is 1*\n\n```python\n> print( Pelt.gt_int() )\n\nOutput: 254\n\n> print( Pelt.gt_int(5) )\n\nOutput: [162, 13, 16, 15, 106]\n\n> number_list = Pelt.gt_int(10)\n\nOutput: [242, 275, 211, 105, 58, 40, 201, 281, 28, 38]\n```\n\n_Now we are going to use it in our software:_\n\n```python\ndef sum(a,b):\n    return a + b, ( a,b ) \n\nprint( sum( Pelt.gt_int(),Pelt.gt_int() ))\n\nOutput: (78, (61, 17)) => result: 78, a: 61, b: 17\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\ndef div(a,b):\n    return a / b, ( a,b ) \n\nprint( div( Pelt.gt_int(),Pelt.gt_int() ))\n\nOutput: (2.456896551724138, (285, 116)) => result: 2.456896551724138, a: 285, b: 116\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\ndef duplicate_list(list):\n\n    duplicate = []\n    for i in list:\n        duplicate.append( i * 2)\n\n    return duplicate, list\n\nprint( duplicate_list( Pelt.gt_int(5) ))\n\nOutput: ([416, 226, 362, 296, 512], [208, 113, 181, 148, 256])\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\n>> More Advance \n\ndef duplicate_list(list):\n\n    duplicate = [ i * 2 for i in list]\n\n    return duplicate, list\n\nprint( duplicate_list( Pelt.gt_int(12) ))\n\nOutput: ([396, 154, 354, 530, 224, 480, 192, 196, 180, 452, 120, 24], [198, 77, 177, 265, 112, 240, 96, 98, 90, 226, 60, 12])\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\nnumber_list = Pelt.gt_int(4)\n\nprint( list( map( lambda x: x * 2, number_list )), number_list )\n\nOutput: [330, 142, 180, 564] [165, 71, 90, 282]\n```\n\n\n### Gt_str\n\nIt has a similar behavior to gt_int, basically its difference\nIt is that this function generates a string randomly and gt_int an integer.\n\n*Params: gt_str( number ), per default it is 1*\n\n```python\n> print( Pelt.gt_str() )\n\nOutput: injected\n\n> print( Pelt.gt_str(4) )\n\nOutput: ['Lorem', 'qwertyuytr', 'p', 'occaecat']\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\ndef inject_py(string):\n\n    return \"{}py \".format( string ) \n\nprint( inject_py(Pelt.gt_str()) )\n\nOutput: nullapy \n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\ndef duplicate_string(string):\n\n    return list( map(lambda x: x * 2,string) ) \n\nprint( duplicate_string(Pelt.gt_str(4)) )\n\nOutput: ['IpsumIpsum', 'consecteturconsectetur', 'fugiatfugiat', 'injectedinjected']\n```\n\n\n### Gt_mix\n\nAs its name implies, mix returns a number or a string randomly. If you pass a number as a parameter, \nit can return an list with numbers and strings.\n\n*Params: gt_mix( number ), per default it is 1*\n\n```python\n> print( Pelt.gt_mix() )\n\nOutput: 248\n\n> print( Pelt.gt_mix(5) )\n\nOutput: ['since', 'standard', 267, 285, 'Excepteur']\n```\n\nRemember, you can combine generators with tests:\n\n```python\n# As the tests have return a print built in, it is not necessary to put them in your function\n\ndef type_data(data):\n\n    return Pelt.is_type(data)\n\ntype_data( Pelt.gt_mix() )\n\nOutput: ‚ùï---VALUE TYPE--- ‚ùï\n\n        Latin ‚áî 'str'\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\ndef equal_values(value1,value2):\n\n    return Pelt.is_equal_type(value1,value2)\n\nequal_values( Pelt.gt_mix(),Pelt.gt_mix() )\n\nOutput: ‚ùï---TEST TYPE COMPARISON--- ‚ùï\n\n        PowerUp AND 169 NOT ARE THE SAME TYPE üí•\n        PowerUp :: <class 'str'>\n        169 :: <class 'int'>\n```\n\n\n### Gt_dict\n\nThis generator return a random dictionary with random keys and values, \nper deafult not return nested dictionaries, but you can custom the dictionarys\ncombining the others generators.\n\n*Params: gt_dict( number ), per default it is 1*\n\n```python\n> print( Pelt.gt_dict() )\n\nOutput: {'looks': 155}\n\n# You can also create a custom dictionary, depending on your need.\n\nmulty_dict = {\n    Pelt.gt_str(): Pelt.gt_mix(5)\n}\n\n> print(multy_dict)\n\nOutput: {'looks': ['words', 5, 115, 102, 'PowerUp']}\n\nmulty_dict = {\n    Pelt.gt_int(): Pelt.gt_dict(4), \n    Pelt.gt_str(): Pelt.gt_str(5)\n}\n\n> print(multy_dict)\n\nOutput: {22: {296: 'dolor', 'qwertyuytr': 298, 75: 'standard', 'words': 'p'}, \n        'Ors': ['PowerUp', 'Finibus', 'injected', 'fugiat', 'therefore']}\n```\n\n\n### Gt_set\n\nThis generator return a random set, it has a similar behavior that the others,\nsome examples below:\n\n*Params: gt_set( number ), per default it is 1*\n\n```python\n> print( Pelt.gt_set(5) )\n\nOutput: {136, 200, 'Cors-c', 277, 120}\n\ndef joiner(value):\n\n    example = {\"example\",1,2}\n    return value.union(example) \n\nprint( joiner(Pelt.gt_set(4)) )\n\nOutput: {1, 2, 'ghorlayck', 'example', 201, 283, 'injected'}\n```\n\n\n## Snap\n\nAfter learning the functionality of the generators, surely you would have liked that \nsaid test data could have it in a separate flow to test and to better predict the result of your algorithms.\nNow we are going to unleash all the power that Pelt can offer, with the snap functions we can archive test data \nand test it later with a much more predictable result, allowing you to use the tests in a more efficient way.\n\n**NOTE: SNAPS ONLY RECEIVE A GENERATORS**\n\n### Snap_take\n\nThis function creates a file with the generated data that you passed to the function, you must pass it the \nname you want for your file, if you passed it the name of an existing file it will overwrite the data.\n\n*Params: Pelt.snap_take( \"file name\", ( Generators, Generators, ... ) ) => Require a matrix*\n\n```python\nPelt.snap_take(\"Data\", (\n    Pelt.gt_int(5), Pelt.gt_str(4)\n))\n```\n\n\n![Pelt Snap_take](screenshots/snaps.PNG)\n\n\n```python\ndef duplicate(numbers):\n    return list(map( lambda x: x *2, numbers))\n\n\ndata = Pelt.gt_int(5)\n\nPelt.snap_take(\"Data\",(\n    duplicate(data), data\n))\n```\n\n\n![Pelt Snap_take](screenshots/take.PNG)\n\n\n### Snap_rm\n\nThis function creates a file with the generated data that you passed to the function, you must pass it the \nname you want for your file, if you passed it the name of an existing file it will overwrite the data.\n\n*Params: Pelt.snap_rm( \"file name\" )*\n\n```python\nPelt.snap_rm(\"Data\")\n```\n\nIt removes a file generate with these name.\n\n\n### Snap_rm_all\n\nThis function remove all files generated with snap.\n\n*Params: Pelt.snap_rm_all()*\n\n```python\nPelt.snap_rm_all()\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luisprooc/pelt-testing",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pelt-testing",
    "package_url": "https://pypi.org/project/pelt-testing/",
    "platform": "",
    "project_url": "https://pypi.org/project/pelt-testing/",
    "project_urls": {
      "Bug Tracker": "https://github.com/luisprooc/pelt-testing/issues",
      "Homepage": "https://github.com/luisprooc/pelt-testing"
    },
    "release_url": "https://pypi.org/project/pelt-testing/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "This package allows us to test algorithms and generate test data",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9684807,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db8ff5e625e4b5807b41b8252bce88c59d5277e6a94815d85aa191bce148e87c",
          "md5": "bd3948fe92926aad2227d50b80018673",
          "sha256": "ca81721713f861ae227a7f09a62eca7fad90df7058ef74e111317f720517d8f2"
        },
        "downloads": -1,
        "filename": "pelt_testing-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd3948fe92926aad2227d50b80018673",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9912,
        "upload_time": "2021-03-02T21:54:44",
        "upload_time_iso_8601": "2021-03-02T21:54:44.582656Z",
        "url": "https://files.pythonhosted.org/packages/db/8f/f5e625e4b5807b41b8252bce88c59d5277e6a94815d85aa191bce148e87c/pelt_testing-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81193d10dbe719a13e205db63a24a84b7a4d416874a3837a5cb1d3f04738366a",
          "md5": "6946c6db55184e40d90501d5d2f45e82",
          "sha256": "4ffeab1e3de2881bcdf90b83839d98b1e1f9f0e2b68fb369235a64b11ab96fd4"
        },
        "downloads": -1,
        "filename": "pelt-testing-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6946c6db55184e40d90501d5d2f45e82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12453,
        "upload_time": "2021-03-02T21:54:48",
        "upload_time_iso_8601": "2021-03-02T21:54:48.234565Z",
        "url": "https://files.pythonhosted.org/packages/81/19/3d10dbe719a13e205db63a24a84b7a4d416874a3837a5cb1d3f04738366a/pelt-testing-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a6fee972648f038309ff566d21a067a5aaa5f7e93cbf6043da840316ef13c3c",
          "md5": "86f6513420bcc1b4f34cea3153c3d750",
          "sha256": "6985cf02a9db94638c79480b47a2d3917852d060a43bc8318618ec6873fc0fc7"
        },
        "downloads": -1,
        "filename": "pelt_testing-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86f6513420bcc1b4f34cea3153c3d750",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9855,
        "upload_time": "2021-03-03T12:44:39",
        "upload_time_iso_8601": "2021-03-03T12:44:39.049188Z",
        "url": "https://files.pythonhosted.org/packages/5a/6f/ee972648f038309ff566d21a067a5aaa5f7e93cbf6043da840316ef13c3c/pelt_testing-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52fac31e63a0d085821b295a1ffa483e55bc95d790865721a6726df400415adc",
          "md5": "6507e01695ae75dc8235450bc468108e",
          "sha256": "65c6a4691358535b52b10069b04c2e115bac2f511539ef4ebb7e57ef21b51044"
        },
        "downloads": -1,
        "filename": "pelt-testing-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6507e01695ae75dc8235450bc468108e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12395,
        "upload_time": "2021-03-03T12:44:41",
        "upload_time_iso_8601": "2021-03-03T12:44:41.294543Z",
        "url": "https://files.pythonhosted.org/packages/52/fa/c31e63a0d085821b295a1ffa483e55bc95d790865721a6726df400415adc/pelt-testing-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeb84b05492be1abd8a8467b3e0eca74e62845b998a85566bef4f99fe6595a42",
          "md5": "369eb01dc2669af7c52ea3aa6208da24",
          "sha256": "60506a9c2257b5a3715506b1bc67f824185ef18f3506bff9489b90c0c0694929"
        },
        "downloads": -1,
        "filename": "pelt_testing-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "369eb01dc2669af7c52ea3aa6208da24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9904,
        "upload_time": "2021-03-03T12:57:12",
        "upload_time_iso_8601": "2021-03-03T12:57:12.367498Z",
        "url": "https://files.pythonhosted.org/packages/ee/b8/4b05492be1abd8a8467b3e0eca74e62845b998a85566bef4f99fe6595a42/pelt_testing-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "458eebcfb20e62341a1ef35297176044fade01987414888d3bda439adf40c323",
          "md5": "c41e3355fe964458dd00bb1b890d39ba",
          "sha256": "c8aa3925b1a84fe5e2de8d0ba5527ee5ef42e83f11e8b2c81cd11643ad90fa1e"
        },
        "downloads": -1,
        "filename": "pelt-testing-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c41e3355fe964458dd00bb1b890d39ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12450,
        "upload_time": "2021-03-03T12:57:13",
        "upload_time_iso_8601": "2021-03-03T12:57:13.626712Z",
        "url": "https://files.pythonhosted.org/packages/45/8e/ebcfb20e62341a1ef35297176044fade01987414888d3bda439adf40c323/pelt-testing-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81284d36859e0b10a83346e7278504f68bc1023b8b2167e21376a0717e7b951b",
          "md5": "ce3a0f221c2112a0fc114848b5386b23",
          "sha256": "0e608d20ce692618d1b1a255208c20dfaebbda84ebd6054a8432f291e20f553f"
        },
        "downloads": -1,
        "filename": "pelt_testing-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce3a0f221c2112a0fc114848b5386b23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10008,
        "upload_time": "2021-03-06T15:28:06",
        "upload_time_iso_8601": "2021-03-06T15:28:06.115045Z",
        "url": "https://files.pythonhosted.org/packages/81/28/4d36859e0b10a83346e7278504f68bc1023b8b2167e21376a0717e7b951b/pelt_testing-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cc3c50b72426d9d23868908289f8f1fc82f66b85e093ea2b9eac6bd9692fe48",
          "md5": "283901d97e968177cd141bd63ad17724",
          "sha256": "8677447f4671e2851c48a4a34eb3c112bcbb6b860f04dfb2395eb7f38c1bf468"
        },
        "downloads": -1,
        "filename": "pelt-testing-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "283901d97e968177cd141bd63ad17724",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8626,
        "upload_time": "2021-03-06T15:28:08",
        "upload_time_iso_8601": "2021-03-06T15:28:08.075228Z",
        "url": "https://files.pythonhosted.org/packages/7c/c3/c50b72426d9d23868908289f8f1fc82f66b85e093ea2b9eac6bd9692fe48/pelt-testing-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81284d36859e0b10a83346e7278504f68bc1023b8b2167e21376a0717e7b951b",
        "md5": "ce3a0f221c2112a0fc114848b5386b23",
        "sha256": "0e608d20ce692618d1b1a255208c20dfaebbda84ebd6054a8432f291e20f553f"
      },
      "downloads": -1,
      "filename": "pelt_testing-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce3a0f221c2112a0fc114848b5386b23",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10008,
      "upload_time": "2021-03-06T15:28:06",
      "upload_time_iso_8601": "2021-03-06T15:28:06.115045Z",
      "url": "https://files.pythonhosted.org/packages/81/28/4d36859e0b10a83346e7278504f68bc1023b8b2167e21376a0717e7b951b/pelt_testing-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7cc3c50b72426d9d23868908289f8f1fc82f66b85e093ea2b9eac6bd9692fe48",
        "md5": "283901d97e968177cd141bd63ad17724",
        "sha256": "8677447f4671e2851c48a4a34eb3c112bcbb6b860f04dfb2395eb7f38c1bf468"
      },
      "downloads": -1,
      "filename": "pelt-testing-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "283901d97e968177cd141bd63ad17724",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8626,
      "upload_time": "2021-03-06T15:28:08",
      "upload_time_iso_8601": "2021-03-06T15:28:08.075228Z",
      "url": "https://files.pythonhosted.org/packages/7c/c3/c50b72426d9d23868908289f8f1fc82f66b85e093ea2b9eac6bd9692fe48/pelt-testing-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}