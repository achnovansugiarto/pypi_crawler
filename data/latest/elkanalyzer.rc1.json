{
  "info": {
    "author": "Elizabeth Pogue",
    "author_email": "epogue1@jhu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Welcome to elkAnalyzer\n\nThis package is useful for plotting Elk DFT output files. This is still a beta version and is distributed under the MIT license (free and openly available). \nIf you run into any issues, please submit an issue. Similarly, if you identify useful features that are not included, please submit a feature request issue.\n\nThe Elk code can be found at: http://elk.sourceforge.net/\n\nThe code for plotting ELK density of states was extracted with slight modifications from the MaterialsAutomated project (session 1)\ncreated by Prof. Tyrel McQueen at Johns Hopkins University: https://github.com/materialsautomated/materialsautomated.github.io. \nMaterials Automated is a series of 9 taped lectures that walk users through writing Python code for data analysis. Its code is distributed\non Github using the MIT license.\n\nThere are currently three sub-modules in elkAnalyzer:\n1. bands is useful for visualizing band structure calculations and orbital contributions to band structure.\n2. DOS is useful for visualizing density of states data.\n3. specialPoints is useful for calculating the coordinates of special points using the Elk basis (compared to the standard described by C. Bradley and A.P. Cracknell's (Chapter 3) \"The mathematical theory of symmetry in solids: representation theory for point groups and space groups\": https://www.maa.org/publications/maa-reviews/the-mathematical-theory-of-symmetry-in-solids-representation-theory-for-point-groups-and-space)\n\n## Band plotting examples\n```python\nimport elkAnalyzer.bands as bnds\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nf='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\f1\\\\'\nplt.figure(1, figsize=(3, 2))\nx, y=bnds.readBandsFile(f)\nmn=np.amin(y)\nmx=np.amax(y)\nxs=bnds.getSpecialPoints(path)\nlbl=['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C']\nplt.ylabel('Energy (eV)', fontsize=10)\nplt.title('$compound$, SG-14, no SOC', fontsize=10)\nplt.xlabel('k', fontsize=10)\nplt.plot(x, y, color='C0')\nplt.ylim(-2, 2)\nplt.xlim(min(x), max(x))\nplt.xticks(xs, lbl, fontsize=8)\nplt.yticks(fontsize=8)\nfor k in xs:\n\n    plt.axvline(x=k, color='k')\nplt.tight_layout(pad=0)        \nplt.figure(2, figsize=(3,2))      \n\npath='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\'\n\nx, y=bnds.readBandsFile(path)\nmn=np.amin(y)\nmx=np.amax(y)\nxs=bnds.getSpecialPoints(path)\nlbl=['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C']\nplt.ylabel('Energy (eV)', fontsize=10)\nplt.title('$compound$, no SOC', fontsize=10)\nplt.xlabel('k', fontsize=10)\nplt.plot(x, y, color='C0')\nplt.ylim(-2, 2)\nplt.xlim(min(x), max(x))\nplt.xticks(xs, lbl, fontsize=8)\nplt.yticks(fontsize=8)\nfor k in xs:\n\n    plt.axvline(x=k, color='k')\nplt.tight_layout(pad=0)\n```\nTo plot two dispersion relationships on top of each other useL\n```python\nimport elkAnalyzer.bands as bnds\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(6, 3))\npath='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\'\npath1='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\wSOC\\\\'\nlbl=['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C']\nbnds.plotDispersionWithLegend(path, lbl, title='', energyRange=[-1.5,1.5], figsize=(6,4), xyLblSize=10, numSize=8, alpha=0.5, label='no SOC', loc='upper right')\nbnds.plotDispersionWithLegend(path1, lbl, title='', energyRange=[-1.5,1.5], figsize=(6,4), xyLblSize=10, numSize=8, color='C1', alpha=0.5, label='w/ SOC', loc='upper right')\nplt.tight_layout(pad=0)\n```\nTo just plot the dispersion relationship, highlighting the CB and VB. You can artificially adjust Eg to account for errors associated with smearing.\n```python\nimport elkAnalyzer.bands as bnds\nimport matplotlib.pyplot as plt\nplt.figure()\npath='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\'\nlbl=['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C']\nx, energy=bnds.plotDispersion(path, lbl, title='', energyRange=[-3,3], figsize=(3,2), xyLblSize=10, numSize=8)\n\nEgvect, gap, idxVBmax, idxCBmin, vb, cb=bnds.calcEg(energy, -0.05)\nplt.plot(x, vb, x, cb, color='C1')\n```\nTo plot orbital contributions with color\n```python\nimport elkAnalyzer.bands as bnds\nimport matplotlib.pyplot as plt\npath='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\'\nx, energy, totSp, sSp, pSp, dSp, fSp, uniqueAt, norm=bnds.importSpeciesContributions(path)\n\nfig, a=plt.subplots()\n#Ba-s contributions\nfig, a=plt.subplots()\nbnds.plotWeightsColor(x, energy, sSp[0], title='$compound$ Ba-s')\nbnds.plotFinish(path, ['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C'], energyRange=[-1.5, 1.5])\nbnds.removeLegend()\n```\nTo plot species contributions for which the width of the line corresponds to its weight\n```python\nimport elkAnalyzer.bands as bnds\nimport matplotlib.pyplot as plt\npath='C:\\\\Users\\\\epogue1\\\\Documents\\\\postdoc\\\\Calculations\\\\Elk\\\\onMARCC\\\\compound\\\\'\nx, energy, totSp, sSp, pSp, dSp, fSp, uniqueAt, norm=bnds.importSpeciesContributions(path)\nfig, a=plt.subplots()\nbnds.plotWeightsWidth(x, energy, sSp[0], lbl='Ba-s', color='C1')\nbnds.plotWeightsWidth(x, energy, pSp[1], lbl='O-p', color='C0')\nbnds.plotFinish(path, ['Z', '$\\Gamma$', 'B', 'D', 'E', 'A', '$\\Gamma$', 'Y', 'C'], energyRange=[-1, 1])\n```\n\n## DOS plotting\nThe slash at the end of the path is necessary.\n\nPlot PDOS summed over all atoms of each species\n```python\nimport matplotlib.pyplot as plt\nimport elkAnalyzer.DOS as DOS\npath='C:\\\\Users\\\\username\\\\Documents\\\\Calculations\\\\Elk\\\\onMARCC\\\\myCompound\\\\.'\n# - lms runs over all the input blocks within the file (how many and order depends on dosmsum and dossum settings)\nplt.figure()\npdos = DOS.load_pdos(path)\nsdos_np = DOS.sum_atoms_np(pdos)\nfor s in sdos_np:\n    for lms in range(0,len(sdos_np[s])):\n        cols = sdos_np[s][lms].swapaxes(0,1) # index by col,row\n        plt.plot(cols[0],cols[1],label= str(s)+\"-\"+str(lms))\nplt.legend()\nplt.xlabel(r'Energy (eV)')\nplt.ylabel('DOS ($eV^{-1}$)')\n```\nPlot PDOS summed over all atoms and lms of each species\n```python\nimport matplotlib.pyplot as plt\nimport elkAnalyzer.DOS as DOS\nplt.figure()\npath='C:\\\\Users\\\\username\\\\Documents\\\\Calculations\\\\Elk\\\\onMARCC\\\\myCompound\\\\.'\npdos = DOS.load_pdos(path)\nqdos_np = DOS.sum_atoms_lms_np(pdos)\nfor s in qdos_np:\n    cols = qdos_np[s].swapaxes(0,1) # index by col,row\n    plt.plot(cols[0],cols[1],label='Species '+str(s))\nplt.legend()\nplt.xlabel('Energy (eV)')\nplt.ylabel('DOS ($eV^{-1}$)')\n```\nPlot PDOS by lms summed over all atoms and species\n```python\nimport matplotlib.pyplot as plt\nimport elkAnalyzer.DOS as DOS\nplt.figure()\npath='C:\\\\Users\\\\username\\\\Documents\\\\Calculations\\\\Elk\\\\onMARCC\\\\myCompound\\\\.'\npdos = DOS.load_pdos(path)\nrdos_np = DOS.sum_species_atoms_np(pdos)\nfor lms in range(0,len(rdos_np)):\n    cols = rdos_np[lms].swapaxes(0,1) # index by col,row\n    plt.plot(cols[0],cols[1],label=str(lms))\nplt.legend()\nplt.xlabel('Energy (eV)')\nplt.ylabel('DOS ($eV^{-1}$)')\n```\n## Special Points determination\n\nThis module relies on having an INFO.OUT file that lists reciprocal lattice vectors and an elk.in file that contains the spacegroup number.\nThe basis of a \"standard\" reciprocal space is defined using C. Bradley and A.P. Cracknell's (Chapter 3) \"The mathematical theory of symmetry in solids: representation theory for point groups and space groups\": https://www.maa.org/publications/maa-reviews/the-mathematical-theory-of-symmetry-in-solids-representation-theory-for-point-groups-and-space).\nA change of basis is then performed to represent this standard basis using the reciprocal lattice vectors used in the elk calculation. The slash at the end of the path is necessary.\n\nThis may be called using:\n```python\nimport elkAnalyzer.specialPoints as csp\nd=csp.calcStandard('C:\\\\Users\\\\username\\\\Documents\\\\Calculations\\\\Elk\\\\myCompound\\\\')\nprint(d)\n```\nWhen you call csp.calcStandard(path), you will have some additional items read out as sanity checks. You first get the angles, alpha, beta, and gamma. Next, you get a, b, and c from Elk. After that is the odd angle out (treated as gamma). Next, you have the reciprocal space vectors in the \"standard\" basis. print(d) causes the program to export a list containing the coordinates of the special points (labeled in the 4th column) in the Elk basis.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/euclidmenot2/elkAnalyzer",
    "keywords": "elk,dft",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elkAnalyzer",
    "package_url": "https://pypi.org/project/elkAnalyzer/",
    "platform": "",
    "project_url": "https://pypi.org/project/elkAnalyzer/",
    "project_urls": {
      "Homepage": "https://github.com/euclidmenot2/elkAnalyzer"
    },
    "release_url": "https://pypi.org/project/elkAnalyzer/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small package for analyzing Elk outputs",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7984183,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "903455b642394c02b4170eef23a28dd4b005be0808a53768a4fc4073c75bcdbc",
          "md5": "8716c54d45aaaf491c7911fdaed8308f",
          "sha256": "3ff12fbdabfa22d1b7d6f2480e2ddb583a8edd68c6821a04e0a99394b8cbcf45"
        },
        "downloads": -1,
        "filename": "elkAnalyzer-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8716c54d45aaaf491c7911fdaed8308f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13254,
        "upload_time": "2020-08-18T01:05:43",
        "upload_time_iso_8601": "2020-08-18T01:05:43.875185Z",
        "url": "https://files.pythonhosted.org/packages/90/34/55b642394c02b4170eef23a28dd4b005be0808a53768a4fc4073c75bcdbc/elkAnalyzer-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9eb6371b7c310265ea19f98b309259a72f7e409cadcf4f1f6b97dbfac3c5b7b",
          "md5": "3216bf08e43c3ee22f37b6fcbcd60249",
          "sha256": "5ed39ac4c803f3bf60843ab46b82acf1726798c3bf9f3f7cf780eb307a9219d0"
        },
        "downloads": -1,
        "filename": "elkAnalyzer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3216bf08e43c3ee22f37b6fcbcd60249",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13237,
        "upload_time": "2020-08-18T01:05:47",
        "upload_time_iso_8601": "2020-08-18T01:05:47.286128Z",
        "url": "https://files.pythonhosted.org/packages/d9/eb/6371b7c310265ea19f98b309259a72f7e409cadcf4f1f6b97dbfac3c5b7b/elkAnalyzer-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "903455b642394c02b4170eef23a28dd4b005be0808a53768a4fc4073c75bcdbc",
        "md5": "8716c54d45aaaf491c7911fdaed8308f",
        "sha256": "3ff12fbdabfa22d1b7d6f2480e2ddb583a8edd68c6821a04e0a99394b8cbcf45"
      },
      "downloads": -1,
      "filename": "elkAnalyzer-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8716c54d45aaaf491c7911fdaed8308f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13254,
      "upload_time": "2020-08-18T01:05:43",
      "upload_time_iso_8601": "2020-08-18T01:05:43.875185Z",
      "url": "https://files.pythonhosted.org/packages/90/34/55b642394c02b4170eef23a28dd4b005be0808a53768a4fc4073c75bcdbc/elkAnalyzer-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9eb6371b7c310265ea19f98b309259a72f7e409cadcf4f1f6b97dbfac3c5b7b",
        "md5": "3216bf08e43c3ee22f37b6fcbcd60249",
        "sha256": "5ed39ac4c803f3bf60843ab46b82acf1726798c3bf9f3f7cf780eb307a9219d0"
      },
      "downloads": -1,
      "filename": "elkAnalyzer-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3216bf08e43c3ee22f37b6fcbcd60249",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13237,
      "upload_time": "2020-08-18T01:05:47",
      "upload_time_iso_8601": "2020-08-18T01:05:47.286128Z",
      "url": "https://files.pythonhosted.org/packages/d9/eb/6371b7c310265ea19f98b309259a72f7e409cadcf4f1f6b97dbfac3c5b7b/elkAnalyzer-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}