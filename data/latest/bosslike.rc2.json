{
  "info": {
    "author": "Murat Mazitov",
    "author_email": "j.murat2020@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "#### Для стабильной работы нужны следующие модули:\n- types\n- json\n- requests\n-----------\n\n#### Чтобы работать с модулем нужно его сначала импортировать следующим образом:\n```python\nfrom BossLike import BosslikeExecutors\n```\n-----------\n\nПосле обращаемся к классу следующим образом, он в свою очередь принимает один параметр: key - ключ api:\nP.S api key получаем на сайте [bosslike.ru](https://bosslike.ru/)\n```python\nfrom BossLike import BosslikeExecutors as bl\nbl(\"kEY\")\n```\nВ последующем описании мы будем использовать сокращения bl\n-----------\n\n#### У класса есть методы:\n- appheaders\n- users_me\n- socials\n- delete_social\n- check_profile\n- show_like\n- check_like\n- bost_tasks\n- task_do\n- task_check\n- errors\n\nКаждый метод возвращает объект!\n-----------\n\n#### appheaders - принимает один параметр типа dict. Благодаря данному методу можно добавить в запрос к api дополнительные headers.\n\nПример использования:\n```python\nb = bl(\"kEY\")\ndata = {\n\t'key':'value'\n}\nb.appheaders(data)\n```\n-----------\n\n#### users_me - Не принимает не одного значения а только возвращает объект (Возвращает информацию о пользователе).\n\nПример использования:\n```python\nb = bl(\"kEY\")\ndata = b.users_me()\nprint(data)\n```\nВозвращает объект:\n```python\nnamespace(data=namespace(user=namespace(avatar='', email='userlogin@__APP_ID.ru', email_confirm=1, id='123', login='Userlogin', money=500, name='John Doe', point='1489', status='1')), status=0, success=True)\n```\nК объекту можно обратиться следующим образом:\n```python\nprint(data.data.user.id)\n```\nВыведет id пользования.\n-----------\nТаким образом работают все методы. Подробнее о каждом методе ниже!\n-----------\n\n#### socials - Не принимает не одного значения а только возвращает объект (Возвращает список привязанных социальных сетей)\n\nРаботает также как и users_me\n-----------\n\n#### delete_social - Принимает один параметр: номер социальной сети. (Отвязать социальную сеть от аккаунта пользователя)\n\n###### номера социальных сетей:\n- 1: Вконтакте\n- 2: Фейсбук\n- 3: Инстаграм\n- 4: Ютуб\n- 5: Твиттер\n- 7: Одноклассники\n- 8: Телеграм\n\nПример использования:\n```python\nb = bl(\"kEY\")\ndata = b.delete_social(\"Number\")\nprint(data)\n```\nВозвращает сообщение об успехе или ошибку (Социальная сеть не привязана)\n-----------\n\n### Следующие методы (check_profile, show_like, check_like) работают в связке с друг другом позволяя привязать аккаунт соцсети через like (Не все соцсети можно привязать!):\n\n#### check_profile - Принимает два параметра: это url аккаунта соц сети и type соцсети. Возвращает сообщение об успешной проверке профиля и token для доступа к следующим этапам.\n\nТип социальной сети:\n- 1: Вконтакте\n- 3: Инстаграм\n- 5: Твиттер\n\n###### Также может вернуть ошибку: 422 Отсутствуют необходимые параметры / ошибка валидации данных!\n\n#### show_like - Принимает один параметр: Токен из операции check_profile.Возвращает сообщение об успехе, ссылку на пост для лайка и token для доступа к следующему этапу.\n\n###### Также может вернуть ошибку: 422 Отсутствуют необходимые параметры / ошибка валидации данных!\n\n#### check_like - Принимает один параметр: Токен из операции show_like. Возвращает сообщение об успешной привязке социальной сети и информацию об этом аккаунте\n\n###### Также может вернуть ошибку: 422\tОтсутствуют необходимые параметры / ошибка валидации данных!\n\nНе все соцсети можно привязать!\n-----------\n\n\n### Следующие методы:\n\n#### bost_tasks - Принимает да обязательных параметров: Тип социальной сети, Тип заданий. Два необязательных: jsons, i. Возвращает список заданий.\n\nТип социальной сети:\n- 1: Вконтакте\n- 2: Фейсбук\n- 3: Инстаграм\n- 4: Ютуб\n- 5: Твиттер\n- 7: Одноклассники\n- 8: Телеграм\n\nТип заданий:\n- 0: Все типы\n- 1: Лайк\n- 2: Репост/Ретвит\n- 3: Подписка\n- 4: Комментарий\n- 8: Голосование\n\nПример использования:\n```python\nb = bl(\"kEY\")\ndata = b.bost_tasks(1, 1)\nprint(data.data.items[0].id)\n```\nВернёт первого задания в списки про лайки а именно id!\n```python\ndata = b.bost_tasks(1, 1, jsons=True)\ndata = b.bost_tasks(1, 1, jsons=True, i=0)\nprint(data)\n```\nВозвращает id из списка под ключом 0\nА вот параметром i можно указать определенный ключ\n-----------\n\n#### task_do - Принимает один обязательный параметр: ID задания, из метода bost_tasks. Два необязательных: url, point. Возвращает ссылку на задание в соц.сети, время задержки перед началом выполнения, комментарий, который нужно оставить для выполнения задания или порядковый номер ответа на голосование...\n\nНеобязательные параметры:\n\n###### Вернёт только url: \n```python\ndata = task_do(1, url=True)\t\n```\n\n###### Вернёт только point сколько заработаешь:\n```python\ndata = task_do(1, point=True)\n```\n###### Вернёт url, point:\n```python\ndata = task_do(1, url=True,  point=True)\n```\n\n##### Также следующие ошибки:\n- 404 Задание не найдено\n- 422 Ошибка валидации данных\n\n\n##### Следующий метод: Проверка выполнения задания\n#### task_check - Принимает один параметр: ID задания.\n\nВозвращает количество баллов пользователя после выполнения задания и не только...\nПодробнее читайте после авторизации на сайте [bosslike.ru](https://bosslike.ru/botapi/)\n-----------\n\n#### errors - Обработка ошибок (по умолчанию встроена и включена в следующих методах: users_me, socials, delete_social, check_profile, show_like, check_like, task_check)\n\nПринимает один обязательный параметр и два необязательный\n\nВозвращает сообщения ошибки\n\n###### Обязательный параметр:\nconclusion - нужно передать объект, который возвращает один из методов представленный выше\n\n###### Необязательные параметры:\ndop - нужен для того что именно выводить если ошибка не найдена (по умолчанию выводится conclusion сам объект)\n\ni - нужен для уточнения номера ошибка (массива) по умолчанию равен 0\n\nЕсли не хотите что бы метод сразу обрабатавал ошибку, это можно выключить передов параметр Errors со значением False. В сам метод!\n\n###### Вот и всё!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BossLike",
    "package_url": "https://pypi.org/project/BossLike/",
    "platform": "",
    "project_url": "https://pypi.org/project/BossLike/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/BossLike/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "BossLike is a ready-made module for working with the api bosslike.ru (for the performer)",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8775221,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fcb9228400b8cd48fafdba175fc060a6d5e86bb987cab59ee63ce2069fbdb3b",
          "md5": "00bdcb528e9ed0dab90decde1fe43e70",
          "sha256": "84e0e1c9f12f7f38f81f53297a1e78454ae5d918818af6dbf0b2a33b8112fa02"
        },
        "downloads": -1,
        "filename": "BossLike-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "00bdcb528e9ed0dab90decde1fe43e70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4673,
        "upload_time": "2020-11-29T09:15:03",
        "upload_time_iso_8601": "2020-11-29T09:15:03.338289Z",
        "url": "https://files.pythonhosted.org/packages/9f/cb/9228400b8cd48fafdba175fc060a6d5e86bb987cab59ee63ce2069fbdb3b/BossLike-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c88f2d2b2a935ff36b6c3a6348f52a67159bd58ca3ce7f3a28bdff4094d322d3",
          "md5": "9534be8679fb94c6d6d586688a75874a",
          "sha256": "fdec51d998e24514fbf19c91825ed93221558fc464ce93c0675d8a73dd187edd"
        },
        "downloads": -1,
        "filename": "BossLike-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9534be8679fb94c6d6d586688a75874a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5339,
        "upload_time": "2020-11-29T21:17:19",
        "upload_time_iso_8601": "2020-11-29T21:17:19.656931Z",
        "url": "https://files.pythonhosted.org/packages/c8/8f/2d2b2a935ff36b6c3a6348f52a67159bd58ca3ce7f3a28bdff4094d322d3/BossLike-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c88f2d2b2a935ff36b6c3a6348f52a67159bd58ca3ce7f3a28bdff4094d322d3",
        "md5": "9534be8679fb94c6d6d586688a75874a",
        "sha256": "fdec51d998e24514fbf19c91825ed93221558fc464ce93c0675d8a73dd187edd"
      },
      "downloads": -1,
      "filename": "BossLike-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9534be8679fb94c6d6d586688a75874a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5339,
      "upload_time": "2020-11-29T21:17:19",
      "upload_time_iso_8601": "2020-11-29T21:17:19.656931Z",
      "url": "https://files.pythonhosted.org/packages/c8/8f/2d2b2a935ff36b6c3a6348f52a67159bd58ca3ce7f3a28bdff4094d322d3/BossLike-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}