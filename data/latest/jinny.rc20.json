{
  "info": {
    "author": "smasherofallthings",
    "author_email": "bots@trulydigital.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Other",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n  <img width=\"317\" height=\"500\" src=\"https://raw.githubusercontent.com/smashthings/jinny/pipeline/logo.png\">\n</p>\n\n# jinny\n\nJinny is a templating tool for jinja templates. It can be used for a number of things but was created from a DevOps perspective to aid in configuration management for scaled deployments instead of using tools like Helm, Kustomize, jinja-cli, etc. These days jinny is still used for Ops work but is also used for live applications handling email templating, static HTML generation and more\n\n## Use Cases & Why\n\nThe 2020's of software usually include mashing together different/underlying/proxied systems that need to be able to scale, adapt and transform in unstable environments (no pets, black box providers, etc) and unstable direction. This means you're running applications and controlling services that lead to a mass of config that needs to change on a whim. Add to this the need to pass this through various CI/CD pipelines and there's a need for a templating application that is:\n\n- Command line controlled\n- Can take multiple JSON & YAML template inputs\n- Can take multiple Jinja based templates\n- Can choose to template out to stdout, to separate files, to one big file\n- Allows for cascading overwriting of inputs\n- Alows the utilising of a seasoned templating language with some room for adding functionality\n- Stable - uses simple and reliable libraries and doesn't need constant maintenance. We don't want this failing our pipelines or botching deployments\n\nFor example, Jinny was originally conceived as a way to handle templating of Kubernetes manifests rather than using Helm or other Go templating tools. Helm is overengineered for what I often need and usually comes with unwanted issues such as nuking production environments (your milage may vary). Jinny doesn't attempt Kubernetes package management, whatever that is, and instead just sticks to templating such that you as the Ops engineer can choose how, when or what to apply.\n\n## CLI Usage Examples\n```\n\n=> Templating multiple templates with a single input file:\n$ jinny -t template-1.txt template-2.txt -i inputs.yml\n\n=> Templating any number of templates with two input files where base-values.yml provides all the base values and any values in overrides.json acts as an override:\n$ jinny -t template.yml -i base-values.yml overrides.json\n\n=> Add an explicit override via CLI argument -e\n$ jinny -t template.yml -i base-values.yml -e 'image=smasherofallthings/flask-waitress:latest'\n\n=> Add even more overrides via environment variables, so your pipelines can completely replace any bad value:\n$ JINNY_overridden_value=\"top-priority\" jinny -t template.yml -i base-values.yml overrides.json\n\n=> Pump all your files to a single stdout stream with a separator so different files are clearly marked:\n$ jinny -t template-1.yml template-2.yml -i inputs.json -s '---'\n\n=> Dump all your templated files into a directory for capture, comparison and deployment\n$ jinny -t template-1.yml template-2.yml -i inputs.json -d /path/to/directory\n$ kubectl diff -f /path/to/directory\n$ kubectl apply --server-dry-run -f /path/to/directory\n\n=> Pipe jinny to kubectl directly\n$ jinny -t template-1.yml -i inputs.json | kubectl apply -f -\n\n```\n\n## Module Usage Examples\n\nJinny is primarily a CLI tool, and python packaging can get incredibly painful, however, for simple use cases Jinny still works as a module and has been used in production environments for things like email templating (ie, data from a contact POST request => values for HTML email template to send to internal teams)\n\n\n```\n\n# Import all helpers and standard elements of Jinny\nimport jinny.jinny as jinny\n\n# And then use it as in this production example\ntmpl = jinny.TemplateHandler(templateName=\"email\", rawString=tmplData)\ntmpl.Render({\n  'rows': parsedBody\n})\n\nprint(tmpl.result)\n\n\n# Values can be exactly defined as the above or you can use the helper functions to give you the same features \nmergedDict = jinny.CombineValues({\n  \"first\": True\n}, {\n  \"second\": \"please\"\n}, 'test_merging_dicts')\n\nassert mergedDict[\"first\"] == True\nassert mergedDict[\"second\"] == \"please\"\n\nmergedDict[\"rows\"] = []\n\njinny.SetNestedValue(mergedDict, [\"rows\", \"0\"], \"firstItem\")\n\ntmpl = jinny.TemplateHandler(templateName=\"email-two\", rawString=tmplData)\ntmpl.Render(mergedDict)\n\nprint(tmpl.result)\n\n\n```\n\n## Kubernetes\nWith the move to Kubernetes the amount of templating and general boilerplate become quite heavy going. There's less coding of systems and more grabbing what's on the OSS shelf and slamming config into it until it does what you need it to do. I understand the reasoning for it, but a major side effect is that what there's less 'writing code' and more 'managing config'.\n\nIn Kubernetes land the dominant technology is Helm. Helm and Jinny both do templating. Helm will also attempt deployment management, but I've also found it used just for the templating.\n\nA large motivator behind Jinny was the contempt I have for Helm. Out of the templating tools that I have used, Jinja is the only one I liked coming back to.† Helm templates feel like a significant downgrade. I also hate Helm atrocious deployment management, however, I couldn't rip Helm out of an environment without at least replacing the templating function. Jinny is there to fill that gap.\n\nJinny doesn't interface directly with Kubernetes. It probably never will as that risks both insourcing the Kubernetes APIs and expanding the packaging footprint for Jinny, which is a Python application. [I also can't state how much I do not want to deal with this](https://raw.githubusercontent.com/kubernetes-client/python/055fa706b8677207091251998dca80cab5d5afb0/kubernetes/client/api/core_v1_api.py).\n\nIf I rationalise what interaction I want between Jinny and K8s, it's essentially:\n\n    jinny template * | kubectl <apply|delete> -f -\n\nSo I add that functionality into a couple of shell functions:\n\n*jk* | *kubectl apply*\njk is the name I gave the function but you can use whatever you want. Add this to your shell's run command script at `${HOME}/.bashrc` or similar:\n\n```\n\nfunction jk(){\n  tmp=$(tempfile)\n  jinny --stdout-seperator='---' -t \"${@}\" > $tmp\n  if [[ $? == \"0\" ]]; then\n    kubectl apply -f $tmp\n  else\n    cat $tmp\n  fi\n  rm -rf $tmp\n}\n\n```\n\nThe stdout-separator argument places yml separators on each file that you pass through, meaning that you can do cool things like mash in various files and have them all apply at once. The caveats with this approach being:\n\n- There's no input files\n- Relies on tempfile and kubectl being installed\n- Writes a file to disk or wherever volume tempfile is configured to write to\n- It's compatible with my bash/zsh setup but you need to check your own\n\nI'm cool with all of that so works well for me.\n\n*jd* | *kubectl delete*\nIs basically the same function but calls \n\n```\nfunction jd(){\n  tmp=$(tempfile)\n  jinny --stdout-seperator='---' -t \"${@}\" > $tmp\n  if [[ $? == \"0\" ]]; then\n    kubectl delete -f $tmp\n  else\n    cat $tmp\n  fi\n  rm -rf $tmp\n}\n```\n\n† A summary of templating tools I considered are at the end of this readme for the curious.\n\n## Enhancements\nJinny is opinionated. This means that it does things like trim template whitespace by default so you don't have to debug whitespace in your output. However, it's also opinionated in that the base jinja filters and objects can and have been expanded to provide appropriate functionality that is common jinny's use cases.\n\n**Filters**\n\n*file_content*\n\nGoes ahead and imports the raw content of a file into the template where called\n\n```\n$ cat template.html\n\n<html>\n<style>\n{{ ( path.templatedir + \"css.css\" ) | file_content }}\n</style>\n</html>\n\n$ cat css.css\n\nhtml { font-weight: 900; }\n\n$ jinny -t template.html\n<html>\n<style>\nhtml { font-weight: 900; }\n</style>\n</html>\n\n\n```\n\n*nested_template*\n\nImports and templates other templates with the same values as the master template has received. This may not be thread safe for non-GIL or other multithreaded implementations of python as it relies on pointer updates to a global variable from the root template. For CPython which is the vast majority of implementations and runtime this is totally fine.\n\nBenefit of this approach is dodging passing the value stack through the Jinja codebase which can be prone to breaking in Jinja updates and adds a substantial overhead to route and debug.\n\n```\n$ cat template.html\n\n<html>\n<style>\n{{ ( path.templatedir + \"css.css\" ) | nested_template }}\n</style>\n</html>\n\n$ cat css.css\n\nhtml { font-weight: {{ font_weight }}; }\n\n$ jinny -t template.html -e font_weight=600\n<html>\n<style>\nhtml { font-weight: 600; }\n</style>\n</html>\n\n\n```\n\n*print_stdout*, *print_stderr* & *tee*\n\nThese filters will print to stdout, stderr or tee to stdout and continue to content. They're used for debugging, warnings and other elements.\n\nYou are going to want to run this with -d or -di options so that resulting templates are written to files rather than dumped to standard out.\n\nWith those options it means you can do cool things like this where the templating process itself can be annotated:\n\n```\n$ cat template.html\n\n<html>\n<style>\n  {{ (\"Running a build of this template \" + path.template + \" at: \") | print_stdout }}\n  <h1> This page was generated at {{ time_now() | tee }}</h1>\n</style>\n</html>\n\n\n$ jinny -t template.html --dump-to-dir \"$(pwd)\"\nRunning a build of this template /home/smashthings/jinny-tmp/template.html at: \n2023-01-23T19:42:56.581482\n\n$ cat 0-template.html\n<html>\n<style>\n  \n  <h1> This page was generated at 2023-01-23T19:42:56.581482</h1>\n</style>\n</html>\n\n\n```\n\n*basename*, *dirname*\n\nStraight python rips of os.path.basename and os.path.dirname\n\n```\n$ cat template.txt\n\nhome: {{ path.home }}\ndirname: {{ path.home | dirname }}\nbasename: {{ (path.home + '.ssh') | basename }}\n\n$ jinny -t template.txt\nhome: /home/smashthings/\ndirname: /home/smashthings\nbasename: .ssh\n\n```\n\n*removesuffix*, *removeprefix*\n\nThese are python 3.9 rips of the str methods. However, you might not have python3.9 so this is a nice python3 stand in.\n\n```\n$ cat template.txt\n\nremoveprefix: {{ \"mushroomfactory\" | removeprefix(\"mushroom\") }}\ndontremoveprefix: {{ \"mushroomfactory\" | removeprefix(\"badger\") }}\n\nremovesuffix: {{ \"mushroomfactory\" | removesuffix(\"ory\") }}\ndontremovesuffix: {{ \"mushroomfactory\" | removesuffix(\"badger\") }}\n\n$ jinny -t template.txt\n\nremoveprefix: factory\ndontremoveprefix: mushroomfactory\n\nremovesuffix: mushroomfact\ndontremovesuffix: mushroomfactory\n\n\n```\n\n\n**Globals**\n\n*path*\n\n\npath is a global dict that is available on each template. It'll give you the variables for:\n\n- cwd - the current working directory\n- jinny - jinny's directory, ie the jinny module itself\n- template - the full path of the template currently being templated\n- templatedir - the directory of the template currently being templated\n- home - the home directory\n\nThese are global values so you can access them whenever and easily combined them into paths that work locally or in unstable environments such as inside pipelines\n\n```\n$ cat template.txt\nI'm working from {{ path.cwd }}\njinny is running from {{ path.jinny }}\nThis template is {{ path.template }} in the directory {{ path.templatedir }}\nMy home directory with all my cat pics and DRG screenshots is {{ path.home }}\n\nRock and Stone!\n\n$ jinny -t template.txt\nI'm working from /home/smashthings/jinny-tmp/\njinny is running from /home/smashthings/.local/bin/jinny\nThis template is /home/smashthings/jinny-tmp/template.txt in the directory /home/smashthings/jinny-tmp/\nMy home directory with all my cat pics and DRG screenshots is /home/smashthings/\n\nRock and Stone!\n\n\n```\n\n*time_now*\n\ntime_now will generate a timestamp at the UTC time that it's called and return the timestamp based on the provided format string based on datetime's strftime. If you don't provide a format it'll return the microsecond ISO timestamp\n\nhttps://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\n\n\n```\n$ cat template.txt\n#### => Template Start: {{ time_now(\"%M:%S.%f\") }}\n\nThe exact UTC time down to the microsecond is {{ time_now() }}\nBut if you just wanted to know what time it is for humans it's {{ time_now(\"%Y-%m-%dT%H:%M\") }}\nOr you could say {{ time_now(\"%A the %j day of %Y which is also the %d day of %B\") }}\n\n#### => Template Finish: {{ time_now(\"%M:%S.%f\") }}\n\n$ jinny -t template.txt\n#### => Template Start: 28:42.871426\n\nThe exact UTC time down to the microsecond is 2022-12-31T08:28:42.871447\nBut if you just wanted to know what time it is for humans it's 2022-12-31T08:28\nOr you could say Saturday the 365 day of 2022 which is also the 31 day of December\n\n#### => Template Finish: 28:42.871465\n\n\n```\n\n*prompt_envvar*\n\nprompt_envvar will prompt you for environment variables that are missing as jinny reaches them in your template(s). Once you provide a value it will set that environment value and continue on, meaning that all other calls for that environment variable will recieve the same value.\n\nThis is useful for one off values that don't need to be committed to code or for values that you want to ask for at run time such as passwords.\n\n```\n$ cat template.txt\n---\nI'm driving {{ prompt_envvar('destination') }} for {{ prompt_envvar('event')}}\nOh, I can't wait to see those faces\nI'm driving {{ prompt_envvar('destination') }} for {{ prompt_envvar('event')}}, yeah\nWell I'm moving down that line\nAnd it's been so long\nBut I will be there\nI sing this song\nTo pass the time away\nDriving in my car\nDriving {{ prompt_envvar('destination') }} for {{ prompt_envvar('event')}}%   \n\n$ jinny -t template.txt\nPlease set variable 'destination':\nhome\nPlease set variable 'event':\nChristmas\n---\nI'm driving home for Christmas\nOh, I can't wait to see those faces\nI'm driving home for Christmas, yeah\nWell I'm moving down that line\nAnd it's been so long\nBut I will be there\nI sing this song\nTo pass the time away\nDriving in my car\nDriving home for Christmas\n\n$ destination='to the bottlo' event='a big bag of cans' jinny -t template.txt\n---\nI'm driving to the bottlo for a big bag of cans\nOh, I can't wait to see those faces\nI'm driving to the bottlo for a big bag of cans, yeah\nWell I'm moving down that line\nAnd it's been so long\nBut I will be there\nI sing this song\nTo pass the time away\nDriving in my car\nDriving to the bottlo for a big bag of cans\n\n\n```\n\n*list_files*\n\nlist_files will take a directory path and will either recursively or not provide a list of all the files in that path.\n\nThis is intended to be used with the **for** keyword for looping through files. Original usecase was for implementing files as keys in a kubernetes configmap.\n\nNote that the below example also makes use of *path*, *file_content* and *basename*, all of which are jinny additions and not in jinja.\n\n```\n$ cat configmap.yml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: loadsofscripts\ndata:\n{% for f in list_files(path.templatedir + '/scripts') %}\n  {{ f | basename }}: |\n{{ f | file_content | indent(4, first=True) }}\n{% endfor %}\n\n\n$ cat scripts/script1.sh\n#!/bin/bash\necho \"This is script one\"\n\n$ cat scripts/script2.sh\n#!/bin/bash\necho \"This is script 2!\"\n\n$ jinny -t configmap.yml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: loadsofscripts\ndata:\n  script1.sh: |\n    #!/bin/bash\n    echo \"This is script one\"\n\n\n  script2.sh: |\n    #!/bin/bash\n    echo \"This is script 2!\"\n\n\n\n```\n\n\n*gen_uuid4*\n\nGenerates a new version 4 UUID via the python uuid library. There's absolutely no memory on this so don't expect idempotency in your resulting templates. However, this is *awesome* for generating a load of dummy data\n\n```\n$ cat template.txt\n{% for f in range(5) %}\n{{ gen_uuid4() }}\n{% endfor %}\n\n$ jinny -t template.txt\nb251f634-a912-4868-bd03-e2ccc3ae7356\n4e136ef8-b106-42c9-b98c-9d61a833c523\n08f9a05a-01a3-4731-a591-3e07d9876c36\n7cc40da8-de29-4e37-80b9-fa3ca60ac0f0\n0e044ca0-36b8-4835-ac7c-c7fa5215fdcf\n\n\n```\n\n## Packages used\nCheck out src/jinny/requirements.txt\n\nAs of December 2022 only PyYAML and Jinja2 are used outside the standard library\n\n## FAQs\n\n*Will jinny ever integrate with Kubernetes directly?*  \nNo. See above for an example of a workable approach.\n\n*What about Windows?*  \nMy Windows days are behind me and I'm not coming back to it. If you'll like to PR it in go for it, however I'm neither motivated nor tooled up to maintain support for Windows.\n\n*Can I donate or support?*  \nNah. I'm good. If jinny really helps and you want to right the balance then please donate to the Guide Dogs UK or Australia or Tassie. With some time, energy and some delicious dog treats they give people back their independence, it's the best ROI I know of.\n\nhttps://www.guidedogs.org.uk \\\nhttps://guidedogs.com.au \\\nhttps://guidedogstas.com.au/supportus/donate/\n\n*Can you offer support?*  \njinny is simple enough that your problem isn't likely to be jinny itself. If it is then open up an issue here on Gitlab or on Github.\n\n## Templating Languages\n\n*Go Templating*\nThe context loss on loops drives me mad and makes nested loops near unusable. Sure there's work arounds but a workaround you have to use every time is not something I want in my life.\n\n*Mustache*\nGreat until you need logic. I often hit this limitation.\n\n*Handlebars*\nGreat, although I do remember hitting some ugly limitations with it that I can't quite remember. Also it's js native and I find ops work to be procedural and therefore an async native runtime to be cumbersome.\n\n*Pug*\nIt's HTML specific and I need something that works with *everything*. I'm on the frontlines man, sometimes I'm in the tank, sometimes I'm on the missle turret, I need a single unified interface.\n\n*Jinja*\nExtensible. Simple syntax. Written in my most used procedural language. Low to no dependencies. Room for advancement. Documented. Battle hardened. 😙🤌",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "jinja,template,jinja2,kubernetes,cli",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jinny",
    "package_url": "https://pypi.org/project/jinny/",
    "platform": null,
    "project_url": "https://pypi.org/project/jinny/",
    "project_urls": {
      "Github": "https://github.com/smashthings/jinny",
      "Gitlab": "https://gitlab.com/scripteddog/jinny"
    },
    "release_url": "https://pypi.org/project/jinny/1.4.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A practical templating tool for Jinja templates",
    "version": "1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17356214,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bfd200df88b5f702bcd8d7bed46870a1445af34236fae63dc1591f7527336e9",
          "md5": "9df553c86b9f7bd89d7c9a07830c4270",
          "sha256": "3014d64a8b37140b866d66462205dbd6da7631007bf24c67da68dc49a9fcc3ff"
        },
        "downloads": -1,
        "filename": "jinny-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9df553c86b9f7bd89d7c9a07830c4270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9846,
        "upload_time": "2022-05-08T07:41:58",
        "upload_time_iso_8601": "2022-05-08T07:41:58.854729Z",
        "url": "https://files.pythonhosted.org/packages/1b/fd/200df88b5f702bcd8d7bed46870a1445af34236fae63dc1591f7527336e9/jinny-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ba0f7041d6a4139a547dfb75df57bdd7b3eb724feb06ecbfb0c5fc1d8286d4",
          "md5": "13953b2587619b1eddad164ec4b44e55",
          "sha256": "5315a44faf9c2cf0d3419f2eac387876d38ebd0450acb919a66913bfc3f835d4"
        },
        "downloads": -1,
        "filename": "jinny-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13953b2587619b1eddad164ec4b44e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10385,
        "upload_time": "2022-05-18T22:17:58",
        "upload_time_iso_8601": "2022-05-18T22:17:58.201043Z",
        "url": "https://files.pythonhosted.org/packages/79/ba/0f7041d6a4139a547dfb75df57bdd7b3eb724feb06ecbfb0c5fc1d8286d4/jinny-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e79a0476a8598d4244d89f3920e59424ea992a276a5545db092e4a400a82fae1",
          "md5": "93cc1e9a00d4999365c6d989a58a4f0d",
          "sha256": "5d2749b390d2c824f5ef10ec4045178afc775c157ed6738e4e14a94a63f91aed"
        },
        "downloads": -1,
        "filename": "jinny-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93cc1e9a00d4999365c6d989a58a4f0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11615,
        "upload_time": "2022-05-28T19:58:19",
        "upload_time_iso_8601": "2022-05-28T19:58:19.878960Z",
        "url": "https://files.pythonhosted.org/packages/e7/9a/0476a8598d4244d89f3920e59424ea992a276a5545db092e4a400a82fae1/jinny-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "988487f558a1b9354de5d3957f23217e42c79f57687f23c7149dd329576b9a87",
          "md5": "042304ea54c2583b9f360e4f62f3d67f",
          "sha256": "a2068caaa8c21377a3d2e4bd0209f64ca840e678979f1831f78d2a6b9ce475cf"
        },
        "downloads": -1,
        "filename": "jinny-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "042304ea54c2583b9f360e4f62f3d67f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11637,
        "upload_time": "2022-05-31T13:09:57",
        "upload_time_iso_8601": "2022-05-31T13:09:57.727804Z",
        "url": "https://files.pythonhosted.org/packages/98/84/87f558a1b9354de5d3957f23217e42c79f57687f23c7149dd329576b9a87/jinny-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43931683df7c5af5bbca159b6de9c1caeaf2a15467e51f267ac0a794fcc2cad2",
          "md5": "083a201d16106aa3bda277f2025a96df",
          "sha256": "235ec8bce87681244c940a8c2c966f8b14d2b32fb8b1d3dce52956efc860a9e0"
        },
        "downloads": -1,
        "filename": "jinny-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "083a201d16106aa3bda277f2025a96df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11828,
        "upload_time": "2022-07-19T09:22:20",
        "upload_time_iso_8601": "2022-07-19T09:22:20.085175Z",
        "url": "https://files.pythonhosted.org/packages/43/93/1683df7c5af5bbca159b6de9c1caeaf2a15467e51f267ac0a794fcc2cad2/jinny-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17b3dbf5da640d03caedd2f357975bd47c7a8e79d9a633fa0c7f492102970e3d",
          "md5": "baa255c6747400de090383188b61d5bf",
          "sha256": "11363c818a21e6a1f97736b278c4dbd73b90c331af804803c1f22c9d0615c23c"
        },
        "downloads": -1,
        "filename": "jinny-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "baa255c6747400de090383188b61d5bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11829,
        "upload_time": "2022-08-10T08:27:21",
        "upload_time_iso_8601": "2022-08-10T08:27:21.079433Z",
        "url": "https://files.pythonhosted.org/packages/17/b3/dbf5da640d03caedd2f357975bd47c7a8e79d9a633fa0c7f492102970e3d/jinny-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "536702163354f983338f8b1edd3d52b87208c9062849560f99a102812895ffa1",
          "md5": "564fb813c1dfab96be56b68161d054dd",
          "sha256": "e6ee249f1013aae2f91171ce4550b429311fd021ca6dc57d05b9039880471090"
        },
        "downloads": -1,
        "filename": "jinny-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "564fb813c1dfab96be56b68161d054dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11886,
        "upload_time": "2022-09-26T21:19:15",
        "upload_time_iso_8601": "2022-09-26T21:19:15.845162Z",
        "url": "https://files.pythonhosted.org/packages/53/67/02163354f983338f8b1edd3d52b87208c9062849560f99a102812895ffa1/jinny-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b1bda7adae0961dc0786013590a41c1476162bd750ee56b861a994d90cac368",
          "md5": "5404f98000fed5ecff26a21fa2edca70",
          "sha256": "4354c8be9196d11e9c3dcb312389e42f413b16d384ec2d0b2ce82afec1befab8"
        },
        "downloads": -1,
        "filename": "jinny-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5404f98000fed5ecff26a21fa2edca70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12797,
        "upload_time": "2022-12-10T08:54:38",
        "upload_time_iso_8601": "2022-12-10T08:54:38.003397Z",
        "url": "https://files.pythonhosted.org/packages/7b/1b/da7adae0961dc0786013590a41c1476162bd750ee56b861a994d90cac368/jinny-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03e082c77e240b33ff0c4a91edd994cb69bee8329f0da2aed86b3127908c4003",
          "md5": "6823530427948a89ed7414af823f782d",
          "sha256": "9364e879e51a42760c5c3d10068e608a9ce746c2c11fd9c1b4fdba0d67399496"
        },
        "downloads": -1,
        "filename": "jinny-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6823530427948a89ed7414af823f782d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15084,
        "upload_time": "2022-12-18T20:55:54",
        "upload_time_iso_8601": "2022-12-18T20:55:54.053911Z",
        "url": "https://files.pythonhosted.org/packages/03/e0/82c77e240b33ff0c4a91edd994cb69bee8329f0da2aed86b3127908c4003/jinny-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a29e7cd0838a81db43d5511fa83e847ce26507bf48d6e02d285fe4ec43cd99",
          "md5": "062c4241f4861377ebdbc69645781800",
          "sha256": "a2f6c1a14d9814312bdabcf173001bdbd7be81bc8fef76599f9bbb54244dd304"
        },
        "downloads": -1,
        "filename": "jinny-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "062c4241f4861377ebdbc69645781800",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15224,
        "upload_time": "2022-12-19T08:04:17",
        "upload_time_iso_8601": "2022-12-19T08:04:17.331086Z",
        "url": "https://files.pythonhosted.org/packages/c3/a2/9e7cd0838a81db43d5511fa83e847ce26507bf48d6e02d285fe4ec43cd99/jinny-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1981aa0a746492430ef60eb5fe11908bf54aa17e9e7b29775f7e344a1b7f1dc",
          "md5": "d9a5b5601750f03af1faa5ab010d6e7e",
          "sha256": "6600a203342d9b641afd456fe731765d0183e0599e7e0ff09a6a2ba0dfdc8faf"
        },
        "downloads": -1,
        "filename": "jinny-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9a5b5601750f03af1faa5ab010d6e7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15232,
        "upload_time": "2022-12-19T08:08:43",
        "upload_time_iso_8601": "2022-12-19T08:08:43.406133Z",
        "url": "https://files.pythonhosted.org/packages/f1/98/1aa0a746492430ef60eb5fe11908bf54aa17e9e7b29775f7e344a1b7f1dc/jinny-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15616552bc8897a7e4ea3859997b1223b19a29f4c8942e8d6d95b664c11ffb6f",
          "md5": "d64e75f8b55640247c587becb19763df",
          "sha256": "64471cbb1e6644019962b3247dc3a272979099f593e0de7ae11c03a5c5008463"
        },
        "downloads": -1,
        "filename": "jinny-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d64e75f8b55640247c587becb19763df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16045,
        "upload_time": "2022-12-31T08:31:50",
        "upload_time_iso_8601": "2022-12-31T08:31:50.203462Z",
        "url": "https://files.pythonhosted.org/packages/15/61/6552bc8897a7e4ea3859997b1223b19a29f4c8942e8d6d95b664c11ffb6f/jinny-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "386aa7f07e78dc02cdfb4124a9fe4d73dd8b8bc6932b48ef7e9a2ddf8e3930cc",
          "md5": "efc6e3225cdbad70304f54b843743bc5",
          "sha256": "17dcfb17ecef90d8390de44b774300e1287c9e4a12e4f92df6606ab09a45a81d"
        },
        "downloads": -1,
        "filename": "jinny-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efc6e3225cdbad70304f54b843743bc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16878,
        "upload_time": "2023-01-23T08:11:51",
        "upload_time_iso_8601": "2023-01-23T08:11:51.519968Z",
        "url": "https://files.pythonhosted.org/packages/38/6a/a7f07e78dc02cdfb4124a9fe4d73dd8b8bc6932b48ef7e9a2ddf8e3930cc/jinny-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f9b652efb735b8402c50006e387e9012ccdc8123d5e1766619505f95d89bf9f",
          "md5": "7eb14da31f5f634e848a83762f0a15dd",
          "sha256": "2d4d1fb69a26cfa3c2edb681754e5fd7309e2523fb3e028be37f244b7ff79b1e"
        },
        "downloads": -1,
        "filename": "jinny-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7eb14da31f5f634e848a83762f0a15dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17910,
        "upload_time": "2023-01-23T19:49:54",
        "upload_time_iso_8601": "2023-01-23T19:49:54.072903Z",
        "url": "https://files.pythonhosted.org/packages/7f/9b/652efb735b8402c50006e387e9012ccdc8123d5e1766619505f95d89bf9f/jinny-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0318abcb15f78562777388767ed6685b61d19f530d462bbf8f598a4dc5ea20b",
          "md5": "d4655a6b058819f888aafe0d174d3c3c",
          "sha256": "38a3d70319dd127fd625876785d6ed5e507d9d77a4c833f6148d05ecddc37c8c"
        },
        "downloads": -1,
        "filename": "jinny-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4655a6b058819f888aafe0d174d3c3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17984,
        "upload_time": "2023-01-31T11:40:29",
        "upload_time_iso_8601": "2023-01-31T11:40:29.865280Z",
        "url": "https://files.pythonhosted.org/packages/b0/31/8abcb15f78562777388767ed6685b61d19f530d462bbf8f598a4dc5ea20b/jinny-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a8ac9369c9324892cad9a34dfe9276ccbfe08f95f124473f40173b8cc77e58e",
          "md5": "289a76ec0b47fae953602c9f0fc26261",
          "sha256": "0119a28fa0e934300863afd1ed9a1f8b447c4d9658db921188871420a76ab116"
        },
        "downloads": -1,
        "filename": "jinny-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "289a76ec0b47fae953602c9f0fc26261",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19051,
        "upload_time": "2023-02-02T13:42:58",
        "upload_time_iso_8601": "2023-02-02T13:42:58.251094Z",
        "url": "https://files.pythonhosted.org/packages/6a/8a/c9369c9324892cad9a34dfe9276ccbfe08f95f124473f40173b8cc77e58e/jinny-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb4d40814ba642ad0067b497717385ce032988cc0ff27d406018b8525e582194",
          "md5": "1e7d0a74226dd69d93bcb52d0ff6a8f1",
          "sha256": "c7be309cbd92e4f541dc9dd0a4a97e99a3d4792b97d7062d2a6c2f6e349cbecf"
        },
        "downloads": -1,
        "filename": "jinny-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e7d0a74226dd69d93bcb52d0ff6a8f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20300,
        "upload_time": "2023-02-02T21:37:14",
        "upload_time_iso_8601": "2023-02-02T21:37:14.732834Z",
        "url": "https://files.pythonhosted.org/packages/cb/4d/40814ba642ad0067b497717385ce032988cc0ff27d406018b8525e582194/jinny-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51a16758b2899b5d0c4c1641d4900baf2f59182e7f3728ab3e43995ace23727e",
          "md5": "e7aaf317f2f7bc240772c673baeb6312",
          "sha256": "f6df1a88bd632b52059e7848addfb4b09214748ce121345f2298c56f88d6132b"
        },
        "downloads": -1,
        "filename": "jinny-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e7aaf317f2f7bc240772c673baeb6312",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20987,
        "upload_time": "2023-02-07T08:05:11",
        "upload_time_iso_8601": "2023-02-07T08:05:11.577592Z",
        "url": "https://files.pythonhosted.org/packages/51/a1/6758b2899b5d0c4c1641d4900baf2f59182e7f3728ab3e43995ace23727e/jinny-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41ccc20c3130f067d5c0736552ef9151a69194af6dafe0bc5f88b0b3dac8cc62",
          "md5": "7449f48bd2a9100c7cb7801e24318a23",
          "sha256": "7dca23d3e8906e612b620e3a5d5d4b3f1347ce9e4a41110823fc47696fdb6bd1"
        },
        "downloads": -1,
        "filename": "jinny-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7449f48bd2a9100c7cb7801e24318a23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21433,
        "upload_time": "2023-02-09T15:19:05",
        "upload_time_iso_8601": "2023-02-09T15:19:05.073022Z",
        "url": "https://files.pythonhosted.org/packages/41/cc/c20c3130f067d5c0736552ef9151a69194af6dafe0bc5f88b0b3dac8cc62/jinny-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41f36bf70120e7e04d4e9865514086e6c2ad805fc17f32696145bc64a1aeb881",
          "md5": "8c9c7a6bce2a3eb278b896618b6147c5",
          "sha256": "3d4800268d4d8921ba6c5f6034878011b62f00c6fb7291f5c162d6d42dbc894c"
        },
        "downloads": -1,
        "filename": "jinny-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8c9c7a6bce2a3eb278b896618b6147c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24712,
        "upload_time": "2023-03-19T20:30:08",
        "upload_time_iso_8601": "2023-03-19T20:30:08.414480Z",
        "url": "https://files.pythonhosted.org/packages/41/f3/6bf70120e7e04d4e9865514086e6c2ad805fc17f32696145bc64a1aeb881/jinny-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41f36bf70120e7e04d4e9865514086e6c2ad805fc17f32696145bc64a1aeb881",
        "md5": "8c9c7a6bce2a3eb278b896618b6147c5",
        "sha256": "3d4800268d4d8921ba6c5f6034878011b62f00c6fb7291f5c162d6d42dbc894c"
      },
      "downloads": -1,
      "filename": "jinny-1.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8c9c7a6bce2a3eb278b896618b6147c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24712,
      "upload_time": "2023-03-19T20:30:08",
      "upload_time_iso_8601": "2023-03-19T20:30:08.414480Z",
      "url": "https://files.pythonhosted.org/packages/41/f3/6bf70120e7e04d4e9865514086e6c2ad805fc17f32696145bc64a1aeb881/jinny-1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}