{
  "info": {
    "author": "Flywheel",
    "author_email": "support@flywheel.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "# dicom-send Gear\n\nA [Flywheel Gear](https://github.com/flywheel-io/gears/tree/master/spec) to use\n[`pynetdicom`](https://github.com/pydicom/pynetdicom) to send DICOM data from\na [Flywheel](flywheel.io) instance to a DICOM server.\n\n## Description\n\n[`pynetdicom`](https://github.com/pydicom/pynetdicom) is a library built on top of\n[`pydicom`](https://github.com/pydicom/pydicom). The dicom-send Gear uses `pynetdicom`\nas a DICOM SCU to connect from a [Flywheel](flywheel.io) instance to a specific\nDICOM server. The DICOM server must be reachable from the host of the\n[Flywheel](flywheel.io) instance. Before transmitting the DICOM file, a private tag\nindicating the DICOM file's source as Flywheel is added to each DICOM file to\navoid being re-ingested into a [Flywheel](flywheel.io) instance.\n\n## Gear Inputs\n\n### Regular inputs\n\n* **file**: Any DICOM file or an archive (zip or tar) containing DICOM file(s). Non\n  DICOM files are ignored. If no input is provided, all DICOM files in the session where\n  the Gear is executed are downloaded and used as input.\n\n> NOTE: The gear will run with a dedicated read-only API key with the same permissions\n> as the user whio created the job.\n\n### TLS related inputs\n\n* **key**: Private key used for TLS negotiation, required if the config option\n  `tls_enabled` is set to `enabled`\n* **cert**: Public certificate used for TLS negotiation, required if the config option\n  `tls_enabled` is set to `enabled`\n* **add_cert_file**: Optional TLS certificate to add to the default list of trusted\n  certificates. If your PACS server has a self-signed sert, you should supply the root\n  CA here, unless you have the config option `tls_require_peer_cert` set to `False`.\n\n## Configuration Settings\n\n### General configuration\n\n* **destination**: The IP address or hostname of the destination DICOM server. Note: The\n  server must be reachable from the host of the Flywheel instance.\n* **called_ae**: The Called AE title of the receiving DICOM server.\n* **calling_ae**: The Calling AE title. Default = flywheel.\n* **port**: Port number of the listening DICOM service. Default = 104.\n* **file_download_retry_time**: Max time (per file) to back-off download a file on a\n  server error (500, 501, 502, etc.)\n* **group**: Dicom group to apply dicom-send tag, default `0x0021`.\n* **identifier**: Private tag creator for dicom-send tag, default `Flywheel`.\n* **tag_value**: Dicom tag value for dicom-send tag, default `DICOM send`.\n\n### TLS configuration\n\n> Note: Whatever key/cert you pass in should have been signed by a root CA that is on\n> the list of trusted certs for your PACS server, if its not, the request will most\n> likely be rejected.\n\nA helpful resource is the [Orthanc docs on\ndicom-tls](https://book.orthanc-server.com/faq/dicom-tls.html)\n\n* **tls_enabled**: (boolean), if yes, the `cert` and `key` inputs must be passed in,\nand possibly the `add_cert_file`\n  need to pass in a `cert` and `key` input, and possibly an `add_cert_file` input if\n  your PACS server has a self-signed cert.\n* **tls_security_profile**: Security profile to use, default BCP 195.\n* **tls_require_peer_cert**: Require the peer server to have a valid/trusted cert.  This\n  defaults to `true`, but can be set to `false` if you trust the destination and don't\n  want to add your root CA to the `add_cert_file` input.\n\n## Gear outputs\n\nThe gear will generate a report listing each dicom file/archive that was exported.  The\nreport includes the following columns:\n\n* ***Acquisition ID:*** the FW Acquisition ID\n* ***FW Path:*** a human readable flywheel path to the file that was exported, in the\n  following format:\n  * `<group>/<proj.label>/<sub.label>/<ses.label>/<acq.label>/files/<file.name>`\n* ***Filename:*** Name of the file/archive that was sent\n* ***Images in Series:*** Number of images in the series to be sent\n* ***Images Sent:*** Number of images successfully sent\n* ***Status:*** “Complete” if images in series == Images Sent, “Incomplete” if Images\n  Sent < Images in Series, “Failed” if Images Sent == 0.\n\nThis report is printed at the end of the log file, and also saved as an attachment to\nthe session container that the gear was run from.  The output name of this report file\nfollows the following pattern:\n\n`dicom-send_report-<session label>_<acquisition label>_YYYY-MM-DD_HH:MM:SS.csv` where\n`<acquisition_label>` is only present if one specific acquisition was selected for\nexport.\n\nThe gear will present as successful only if all dicoms that were attempted, were sent\nsuccesfully.\n\n## Testing\n\nFor information on gear testing, see the [testing readme](TESTING.md).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send.git",
    "keywords": "Flywheel,Gears,DICOM,Python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fw-gear-dicom-send",
    "package_url": "https://pypi.org/project/fw-gear-dicom-send/",
    "platform": null,
    "project_url": "https://pypi.org/project/fw-gear-dicom-send/",
    "project_urls": {
      "Homepage": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send.git",
      "Repository": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send.git"
    },
    "release_url": "https://pypi.org/project/fw-gear-dicom-send/4.0.2/",
    "requires_dist": [
      "backoff (>=1.11.1,<2.0.0)",
      "flywheel-gear-toolkit (>=0.6.1,<0.7.0)",
      "fw-core-client (>=1.1.0,<2.0.0)",
      "fw-file[dicom] (>=1.3,<2.0)",
      "pathvalidate (>=2.5.0,<3.0.0)",
      "pynetdicom (>=2.0.2,<3.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "Send DICOMs from Flywheel to a remote DICOM server using pynetdicom",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15024193,
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11b70fa012a79f9d4fd7c0c78d51f810e0b86cdaf77be5df6f9342f97aee8acf",
          "md5": "36daa73c0bd659936718e27c17a3a410",
          "sha256": "7040129805b77093904ca5da0740657a128fb9b317d4aa18160f2cb620c2ddf2"
        },
        "downloads": -1,
        "filename": "fw_gear_dicom_send-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36daa73c0bd659936718e27c17a3a410",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 13367,
        "upload_time": "2022-07-21T02:26:29",
        "upload_time_iso_8601": "2022-07-21T02:26:29.045437Z",
        "url": "https://files.pythonhosted.org/packages/11/b7/0fa012a79f9d4fd7c0c78d51f810e0b86cdaf77be5df6f9342f97aee8acf/fw_gear_dicom_send-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "046e1329e99649d111a7a2e6bc4b666bfbba6e429d00a44e663d34f5e646c1b5",
          "md5": "39c22cf0fdb354f0c5d4ce21e77fd66f",
          "sha256": "8d8a635ae7eea8161c5ebf39d284a1ba3b473d5262bff6837e4c71e3bf7e7448"
        },
        "downloads": -1,
        "filename": "fw_gear_dicom_send-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39c22cf0fdb354f0c5d4ce21e77fd66f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 15411,
        "upload_time": "2022-07-21T02:54:53",
        "upload_time_iso_8601": "2022-07-21T02:54:53.637627Z",
        "url": "https://files.pythonhosted.org/packages/04/6e/1329e99649d111a7a2e6bc4b666bfbba6e429d00a44e663d34f5e646c1b5/fw_gear_dicom_send-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58226aa8dc14a956c47292091bee131a0e9c8aa523012c240dfd7abaa042e502",
          "md5": "d66f784e762f3f7e59a24ab494b4404b",
          "sha256": "4a67b8fbecbad2015d5962e4640b7a45ffbaa203d3ccefac5a10b557da4230e7"
        },
        "downloads": -1,
        "filename": "fw_gear_dicom_send-4.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d66f784e762f3f7e59a24ab494b4404b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 15419,
        "upload_time": "2022-09-07T21:51:37",
        "upload_time_iso_8601": "2022-09-07T21:51:37.691918Z",
        "url": "https://files.pythonhosted.org/packages/58/22/6aa8dc14a956c47292091bee131a0e9c8aa523012c240dfd7abaa042e502/fw_gear_dicom_send-4.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58226aa8dc14a956c47292091bee131a0e9c8aa523012c240dfd7abaa042e502",
        "md5": "d66f784e762f3f7e59a24ab494b4404b",
        "sha256": "4a67b8fbecbad2015d5962e4640b7a45ffbaa203d3ccefac5a10b557da4230e7"
      },
      "downloads": -1,
      "filename": "fw_gear_dicom_send-4.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d66f784e762f3f7e59a24ab494b4404b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 15419,
      "upload_time": "2022-09-07T21:51:37",
      "upload_time_iso_8601": "2022-09-07T21:51:37.691918Z",
      "url": "https://files.pythonhosted.org/packages/58/22/6aa8dc14a956c47292091bee131a0e9c8aa523012c240dfd7abaa042e502/fw_gear_dicom_send-4.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}