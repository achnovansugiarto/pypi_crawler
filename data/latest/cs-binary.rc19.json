{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Facilities associated with binary data parsing and transcription.\nThe classes in this module support easy parsing of binary data\nstructures,\nreturning instances with the binary data decoded into attributes\nand capable of transcribing themselves in binary form\n(trivially via `bytes(instance)` and also otherwise).\n\n*Latest release 20230212*:\n* BinaryMixin: new load(file) and save(file) methods.\n* BinaryMixin.scan: promote the bfr argument.\n\nNote: this module requires Python 3.6+ because various default\nbehaviours rely on `dict`s preserving their insert order.\n\nSee `cs.iso14496` for an ISO 14496 (eg MPEG4) parser\nbuilt using this module.\n\n**Deprecation**: the `Packet` and `PacketField` classes\nwere unnecessarily hard to use and are deprecated\nin favour of the `Binary`* suite of classes and factories.\nAll the *`Field` classes and other subclasses\nderived from `Packet` and `PacketField` are also deprecated.\n\nTerminology used below:\n* buffer:\n  an instance of `cs.buffer.CornuCopyBuffer`,\n  which presents an iterable of bytes-like values\n  via various useful methods;\n  it also has a few factory methods to make one from a variety of sources\n  such as bytes, iterables, binary files, `mmap`ped files,\n  TCP data streams, etc.\n* chunk:\n  a piece of binary data obeying the buffer protocol,\n  almost always a `bytes` instance or a `memoryview`,\n  but in principle also things like `bytearray`.\n\nThere are 5 main classes on which an implementor should base their data structures:\n* `BinarySingleStruct`: a factory for classes based\n  on a `struct.struct` format string with a single value;\n  this builds a `namedtuple` subclass\n* `BinaryMultiStruct`: a factory for classes based\n  on a `struct.struct` format string with multiple values;\n  this also builds a `namedtuple` subclass\n* `BinarySingleValue`: a base class for subclasses\n  parsing and transcribing a single value\n* `BinaryMultiValue`: a base class for subclasses\n  parsing and transcribing multiple values\n  with no variation\n* `SimpleBinary`: a base class for subclasses\n  with custom `.parse` and `.transcribe` methods,\n  for structures with variable fields\n\nAll the classes derived from the above inherit all the methods\nof `BinaryMixin`.\nAmongst other things, this means that the binary transcription\ncan be had simply from `bytes(instance)`,\nalthough there are more transcription methods provided\nfor when greater flexibility is desired.\nIt also means that all classes have `parse`* and `scan`* methods\nfor parsing binary data streams.\n\nYou can also instantiate objects directly;\nthere's no requirement for the source information to be binary.\n\nThere are several presupplied subclasses for common basic types\nsuch as `UInt32BE` (an unsigned 32 bit big endian integer).\n\n## Class `AbstractBinary(BinaryMixin)`\n\nAbstract class for all `Binary`* implementations,\nspecifying the `parse` and `transcribe` methods\nand providing the methods from `BinaryMixin`.\n\n## Class `BinaryByteses(AbstractBinary, BinaryMixin)`\n\nA list of `bytes` parsed directly from the native iteration of the buffer.\n\n## Function `BinaryFixedBytes(class_name, length: int)`\n\nFactory for an `AbstractBinary` subclass matching `length` bytes of data.\nThe bytes are saved as the attribute `.data`.\n\n## Class `BinaryListValues(AbstractBinary, BinaryMixin)`\n\nA list of values with a common parse specification,\nsuch as sample or Boxes in an ISO14496 Box structure.\n\n## Class `BinaryMixin`\n\nPresupplied helper methods for binary objects.\n\nNaming conventions:\n- `parse`* methods parse a single instance from a buffer\n- `scan`* methods are generators yielding successive instances from a buffer\n\n## Function `BinaryMultiStruct(class_name: str, struct_format: str, field_names: Union[str, List[str]])`\n\nA class factory for `AbstractBinary` `namedtuple` subclasses\nbuilt around complex `struct` formats.\n\nParameters:\n* `class_name`: name for the generated class\n* `struct_format`: the `struct` format string\n* `field_names`: field name list,\n  a space separated string or an interable of strings\n\n## Function `BinaryMultiValue(class_name, field_map, field_order=None)`\n\nConstruct a `SimpleBinary` subclass named `class_name`\nwhose fields are specified by the mapping `field_map`.\n\nThe `field_map` is a mapping of field name to buffer parsers and transcribers.\n\n*Note*:\nif `field_order` is not specified\nit is constructed by iterating over `field_map`.\nPrior to Python 3.6, `dict`s do not provide a reliable order\nand should be accompanied by an explicit `field_order`.\nFrom 3.6 onward a `dict` is enough and its insertion order\nwill dictate the default `field_order`.\n\nFor a fixed record structure\nthe default `.parse` and `.transcribe` methods will suffice;\nthey parse or transcribe each field in turn.\nSubclasses with variable records should override\nthe `.parse` and `.transcribe` methods\naccordingly.\n\nThe `field_map` is a mapping of field name\nto a class returned by the `pt_spec()` function.\n\nIf the class has both `parse_value` and `transcribe_value` methods\nthen the value itself will be directly stored.\nOtherwise the class it presumed to be more complex subclass\nof `AbstractBinary` and the instance is stored.\n\nHere is an example exhibiting various ways of defining each field:\n* `n1`: defined with the *`_value` methods of `UInt8`,\n  which return or transcribe the `int` from an unsigned 8 bit value;\n  this stores a `BinarySingleValue` whose `.value` is an `int`\n* `n2`: defined from the `UInt8` class,\n  which parses an unsigned 8 bit value;\n  this stores an `UInt8` instance\n  (also a `BinarySingleValue` whole `.value` is an `int`)\n* `n3`: like `n2`\n* `data1`: defined with the *`_value` methods of `BSData`,\n  which return or transcribe the data `bytes`\n  from a run length encoded data chunk;\n  this stores a `BinarySingleValue` whose `.value` is a `bytes`\n* `data2`: defined from the `BSData` class\n  which parses a run length encoded data chunk;\n  this is a `BinarySingleValue` so we store its `bytes` value directly.\n\n      >>> class BMV(BinaryMultiValue(\"BMV\", {\n      ...         'n1': (UInt8.parse_value, UInt8.transcribe_value),\n      ...         'n2': UInt8,\n      ...         'n3': UInt8,\n      ...         'nd': ('>H4s', 'short bs'),\n      ...         'data1': (\n      ...             BSData.parse_value,\n      ...             BSData.transcribe_value,\n      ...         ),\n      ...         'data2': BSData,\n      ... })):\n      ...     pass\n      >>> BMV.FIELD_ORDER\n      ['n1', 'n2', 'n3', 'nd', 'data1', 'data2']\n      >>> bmv = BMV.from_bytes(b'\\x11\\x22\\x77\\x81\\x82zyxw\\x02AB\\x04DEFG')\n      >>> bmv.n1  #doctest: +ELLIPSIS\n      17\n      >>> bmv.n2\n      34\n      >>> bmv  #doctest: +ELLIPSIS\n      BMV(n1=17, n2=34, n3=119, nd=nd_1_short__bs(short=33154, bs=b'zyxw'), data1=b'AB', data2=b'DEFG')\n      >>> bmv.nd  #doctest: +ELLIPSIS\n      nd_1_short__bs(short=33154, bs=b'zyxw')\n      >>> bmv.nd.bs\n      b'zyxw'\n      >>> bytes(bmv.nd)\n      b'zyxw'\n      >>> bmv.data1\n      b'AB'\n      >>> bmv.data2\n      b'DEFG'\n      >>> bytes(bmv)\n      b'\\x11\"w\\x81\\x82zyxw\\x02AB\\x04DEFG'\n      >>> list(bmv.transcribe_flat())\n      [b'\\x11', b'\"', b'w', b'\\x81\\x82zyxw', b'\\x02', b'AB', b'\\x04', b'DEFG']\n\n## Function `BinarySingleStruct(class_name, struct_format, field_name=None)`\n\nA convenience wrapper for `BinaryMultiStruct`\nfor `struct_format`s with a single field.\n\nParameters:\n* `class_name`: the class name for the generated class\n* `struct_format`: the struct format string, specifying a\n  single struct field\n* `field_name`: optional field name for the value,\n  default `'value'`\n\nExample:\n\n    >>> UInt16BE = BinarySingleStruct('UInt16BE', '>H')\n    >>> UInt16BE.__name__\n    'UInt16BE'\n    >>> UInt16BE.format\n    '>H'\n    >>> UInt16BE.struct   #doctest: +ELLIPSIS\n    <_struct.Struct object at ...>\n    >>> field = UInt16BE.from_bytes(bytes((2,3)))\n    >>> field\n    UInt16BE(value=515)\n    >>> field.value\n    515\n\n## Class `BinarySingleValue(AbstractBinary, BinaryMixin)`\n\nA representation of a single value as the attribute `.value`.\n\nSubclasses must implement:\n* `parse` or `parse_value`\n* `transcribe` or `transcribe_value`\n\n## Class `BinaryUTF16NUL(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA NUL terminated UTF-16 string.\n\n*Method `BinaryUTF16NUL.__init__(self, value, *, encoding)`*:\npylint: disable=super-init-not-called\n\n## Class `BinaryUTF8NUL(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA NUL terminated UTF-8 string.\n\n## Class `BSData(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA run length encoded data chunk, with the length encoded as a `BSUInt`.\n\n## Class `BSSFloat(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA float transcribed as a BSString of str(float).\n\n## Class `BSString(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA run length encoded string, with the length encoded as a BSUInt.\n\n## Class `BSUInt(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA binary serialised unsigned `int`.\n\nThis uses a big endian byte encoding where continuation octets\nhave their high bit set. The bits contributing to the value\nare in the low order 7 bits.\n\n## Class `BytesesField(PacketField)`\n\nA field containing a list of bytes chunks.\n\nThe following attributes are defined:\n* `value`: the gathered data as a list of bytes instances,\n  or None if the field was gathered with `discard_data` true.\n* `offset`: the starting offset of the data.\n* `end_offset`: the ending offset of the data.\n\nThe `offset` and `end_offset` values are recorded during the\nparse, and may become irrelevant if the field's contents are\nchanged.\n\n## Class `BytesField(BinarySingleValue, AbstractBinary, BinaryMixin)`\n\nA field of bytes.\n\n## Class `BytesRunField(PacketField)`\n\nA field containing a continuous run of a single bytes value.\n\nThe following attributes are defined:\n* `length`: the length of the run\n* `bytes_value`: the repeated bytes value\n\nThe property `value` is computed on the fly on every reference\nand returns a value obeying the buffer protocol: a bytes or\nmemoryview object.\n\n*Method `BytesRunField.__init__(self, length, bytes_value)`*:\npylint: disable=super-init-not-called\n\n## Function `deferred_field(from_buffer)`\n\nA decorator for a field property.\n\nUsage:\n\n    @deferred_field\n    def (self, bfr):\n        ... parse value from `bfr`, return value\n\n## `EmptyField = <cs.binary.EmptyPacketField object at 0x109e28a90>`\n\nAn empty data field, used as a placeholder for optional\nfields when they are not present.\n\nThe singleton `EmptyField` is a predefined instance.\n\n## Class `EmptyPacketField(PacketField)`\n\nAn empty data field, used as a placeholder for optional\nfields when they are not present.\n\nThe singleton `EmptyField` is a predefined instance.\n\n## Function `fixed_bytes_field(length, class_name=None)`\n\nFactory for `BytesField` subclasses built from fixed length byte strings.\n\n## Function `flatten(chunks)`\n\nFlatten `chunks` into an iterable of `bytes` instances.\n\nThis exists to allow subclass methods to easily return\ntranscribeable things (having a `.transcribe` method), ASCII\nstrings or bytes or iterables or even `None`, in turn allowing\nthem simply to return their superclass' chunks iterators\ndirectly instead of having to unpack them.\n\nAn example from the `cs.iso14496.METABoxBody` class:\n\n    def transcribe(self):\n        yield super().transcribe()\n        yield self.theHandler\n        yield self.boxes\n\nThe binary classes `flatten` the result of the `.transcribe`\nmethod to obtain `bytes` insteances for the object's bnary\ntranscription.\n\n## Class `Float64BE(Float64BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>d'` and presents the attributes ('value',).\n\n## Class `Float64LE(Float64LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<d'` and presents the attributes ('value',).\n\n## Class `Int16BE(Int16BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>h'` and presents the attributes ('value',).\n\n## Class `Int16LE(Int16LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<h'` and presents the attributes ('value',).\n\n## Class `Int32BE(Int32BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>l'` and presents the attributes ('value',).\n\n## Class `Int32LE(Int32LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<l'` and presents the attributes ('value',).\n\n## Class `ListField(PacketField)`\n\nA field which is itself a list of other `PacketField`s.\n\n## Function `multi_struct_field(struct_format, subvalue_names=None, class_name=None)`\n\nA class factory for `PacketField` subclasses built around complex `struct` formats.\n\n**Deprecated**: see the `BinaryMultiValue` factory instead.\n\nSee also the convenience class factory `structtuple`\nwhich is usually easier to work with.\n\nParameters:\n* `struct_format`: the `struct` format string\n* `subvalue_names`: an optional field name list;\n  if supplied then the field value will be a `namedtuple` with\n  these names\n* `class_name`: option name for the generated class\n\n## Class `Packet(PacketField)`\n\nBase class for compound objects derived from binary data.\n\n*DEPRECATED*:\nplease adopt one of the `BinaryMutli`* classes instead.\n\n*Method `Packet.__init__(self, **fields)`*:\nInitialise the `Packet`.\n\nA `Packet` is its own `.value`.\n\nIf any keyword arguments are provided, they are used as a\nmapping of `field_name` to `Field` instance, supporting\ndirect construction of simple `Packet`s.\nFrom Python 3.6 onwards keyword arguments preserve the calling order;\nin Python versions earlier than this the caller should\nadjust the `Packet.field_names` list to the correct order after\ninitialisation.\n\n## Class `PacketField`\n\nA record for an individual packet field.\n\n*DEPRECATED*:\nplease adopt one of the `BinarySingle`* classes instead.\n\nThis normally holds a single value,\nfor example an int of a particular size or a string.\n\nThere are 2 basic ways to implement a `PacketField` subclass:\n* simple: implement `value_from_buffer` and `transcribe_value`\n* complex: implement `from_buffer` and `transcribe`\n\nIn the simple case subclasses should implement two methods:\n* `value_from_buffer`:\n  parse the value from a `CornuCopyBuffer` and return the parsed value\n* `transcribe_value`:\n  transcribe the value as bytes\n\nIn the more complex case,\nsometimes a `PacketField` may not warrant (or perhaps fit)\nthe formality of a `Packet` with its multifield structure.\n\nOne example is the `cs.iso14496.UTF8or16Field` class.\n\n`UTF8or16Field` supports an ISO14496 UTF8 or UTF16 string field,\nas as such has 2 attributes:\n* `value`: the string itself\n* `bom`: a UTF16 byte order marker or `None`;\n  `None` indicates that the string should be encoded as UTF-8\n  and otherwise the BOM indicates UTF16 big endian or little endian.\n\nTo make this subclass it defines these methods:\n* `from_buffer`:\n  to read the optional BOM and then the following encoded string;\n  it then returns the new `UTF8or16Field`\n  initialised from these values via `cls(text, bom=bom)`.\n* `transcribe`:\n  to transcribe the optional BOM and suitably encoded string.\nThe instance method `transcribe` is required because the transcription\nrequires knowledge of the BOM, an attribute of an instance.\n\n*Method `PacketField.__init__(self, value=None)`*:\nInitialise the `PacketField`.\nIf omitted the inial field `value` will be `None`.\n\n## Function `pt_spec(pt, name=None)`\n\nConvert a parse/transcribe specification `pt`\ninto an `AbstractBinary` subclass.\n\nThis is largely used to provide flexibility\nin the specifications for the `BinaryMultiValue` factory\nbut can be used as a factory for other simple classes.\n\nIf the specification `pt` is a subclass of `AbstractBinary`\nthis is returned directly.\n\nIf `pt` is a 2-tuple of `str`\nthe values are presumed to be a format string for `struct.struct`\nand filed names separated by spaces;\na new `BinaryMultiStruct` class is created from these and returned.\n\nOtherwise two functions\n`f_parse_value(bfr)` and `f_transcribe_value(value)`\nare obtained and used to construct a new `BinarySingleValue` class\nas follows:\n\nIf `pt` has `.parse_value` and `.transcribe_value` callable attributes,\nuse those for `f_parse_value` and `f_transcribe_value` respectively.\n\nOtherwise, if `pt` is an `int`\ndefine `f_parse_value` to obtain exactly that many bytes from a buffer\nand `f_transcribe_value` to return those bytes directly.\n\nOtherwise presume `pt` is a 2-tuple of `(f_parse_value,f_transcribe_value)`.\n\n## Class `SimpleBinary(types.SimpleNamespace, AbstractBinary, BinaryMixin)`\n\nAbstract binary class based on a `SimpleNamespace`,\nthus providing a nice `__str__` and a keyword based `__init__`.\nImplementors must still define `.parse` and `.transcribe`.\n\nTo constrain the arguments passed to `__init__`,\ndefine an `__init__` which accepts specific keyword arguments\nand pass through to `super().__init__()`. Example:\n\n    def __init__(self, *, field1=None, field2):\n        \"\"\" Accept only `field1` (optional)\n            and `field2` (mandatory).\n        \"\"\"\n        super().__init__(field1=field1, field2=field2)\n\n## Function `structtuple(class_name, struct_format, subvalue_names)`\n\nConvenience wrapper for `multi_struct_field`.\n\nExample:\n\n    Enigma2Cut = structtuple('Enigma2Cut', '>QL', 'pts type')\n\nwhich is a record with big-endian unsigned 64 and 32 fields\nnamed `pts` and `type`.\n\n## Class `UInt16BE(UInt16BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>H'` and presents the attributes ('value',).\n\n## Class `UInt16LE(UInt16LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<H'` and presents the attributes ('value',).\n\n## Class `UInt32BE(UInt32BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>L'` and presents the attributes ('value',).\n\n## Class `UInt32LE(UInt32LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<L'` and presents the attributes ('value',).\n\n## Class `UInt64BE(UInt64BE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'>Q'` and presents the attributes ('value',).\n\n## Class `UInt64LE(UInt64LE, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'<Q'` and presents the attributes ('value',).\n\n## Class `UInt8(UInt8, builtins.tuple, AbstractBinary, BinaryMixin)`\n\nAn `AbstractBinary` `namedtuple` which parses and transcribes\nthe struct format `'B'` and presents the attributes ('value',).\n\n## Class `UTF16NULField(PacketField)`\n\nA NUL terminated UTF-16 string.\n\n*Method `UTF16NULField.__init__(self, value, *, encoding)`*:\nInitialise the `PacketField`.\nIf omitted the inial field `value` will be `None`.\n\n## Class `UTF8NULField(PacketField)`\n\nA NUL terminated UTF-8 string.\n\n# Release Log\n\n\n\n*Release 20230212*:\n* BinaryMixin: new load(file) and save(file) methods.\n* BinaryMixin.scan: promote the bfr argument.\n\n*Release 20221206*:\nDocumentation fix.\n\n*Release 20220605*:\nBinaryMixin: replace scan_file with scan_fspath, as the former left uncertainty about the amount of the file consumed.\n\n*Release 20210316*:\n* BSUInt: rename parse_bytes to decode_bytes, the former name conflicted with BinaryMixin.parse_bytes and broken the semantics.\n* Minor refactors.\n\n*Release 20210306*:\nMAJOR RELEASE: The PacketField classes and friends were hard to use; this release supplied a suite of easier to use and more consistent Binary* classes, and ports most of those things based on the old scheme to the new scheme.\n\n*Release 20200229*:\n* ListField: replace transcribe method with transcribe_value method, aids external use.\n* Add `.length` attribute to struct based packet classes providing the data length of the structure (struct.Struct.size).\n* Packet: new `add_deferred_field` method to consume the raw data for a field for parsing later (done automatically if the attribute is accessed).\n* New `@deferred_field` decorator for the parser for that stashed data.\n\n*Release 20191230.3*:\nDocstring tweak.\n\n*Release 20191230.2*:\nDocumentation updates.\n\n*Release 20191230.1*:\nDocstring updates. Semantic changes were in the previous release.\n\n*Release 20191230*:\n* ListField: new __iter__ method.\n* Packet: __str__: accept optional `skip_fields` parameter to omit some field names.\n* Packet: new .add_from_value method to add a named field with a presupplied value.\n* Packet: new remove_field(field_name) and pop_field() methods to remove fields.\n* BytesesField: __iter__ yields the bytes values, transcribe=__iter__.\n* PacketField: propagate keyword arguments through various methods, required for parameterised PacketFields.\n* New UTF16NULField, a NUL terminated UTF16 string.\n* PacketField: provide a default `.transcribe_value` method which makes a new instance and calls its `.transcribe` method.\n* Documentation update and several minor changes.\n\n*Release 20190220*:\n* Packet.self_check: fields without a sanity check cause a warning, not a ValueError.\n* New Float64BE, Float64LE and BSSFloat classes for IEEE floats and floats-as-strings.\n* Additional module docstringage on subclassing Packet and PacketField.\n* BSString: drop redundant from_buffer class method.\n* PacketField.__init__: default to value=None if omitted.\n\n*Release 20181231*:\nflatten: do not yield zero length bytelike objects, can be misread as EOF on some streams.\n\n*Release 20181108*:\n* New PacketField.transcribe_value_flat convenience method to return a flat iterable of bytes-like objects.\n* New PacketField.parse_buffer generator method to parse instances of the PacketField from a buffer until end of input.\n* New PacketField.parse_buffer_values generator method to parse instances of the PacketField from a buffer and yield the `.value` attribute until end of input.\n\n*Release 20180823*:\n* Some bugfixes.\n* Define PacketField.__eq__.\n* BSUInt, BSData and BSString classes implementing the serialisations from cs.serialise.\n* New PacketField.value_from_bytes class method.\n* New PacketField.value_from_buffer method.\n\n*Release 20180810.2*:\nDocumentation improvements.\n\n*Release 20180810.1*:\nImprove module description.\n\n*Release 20180810*:\nBytesesField.from_buffer: make use of the buffer's skipto method if discard_data is true.\n\n*Release 20180805*:\n* Packet: now an abstract class, new self_check method initially checking the\n* PACKET_FIELDS class attribute against the instance, new methods get_field\n* and set_field to fetch or replace existing fields, allow keyword arguments\n* to initialise the Packet fields and document the dependency on keyword\n* argument ordering.\n* PacketField: __len__ computed directory from a transcribe, drop other __len__\n* methods.\n* EmptyField singleton to use as a placeholder for missing optional fields.\n* BytesField: implement value_s and from_buffer.\n* multi_struct_field: implement __len__ for generated class.\n* flatten: treat memoryviews like bytes.\n* Assorted docstrings and fixes.\n\n*Release 20180801*:\nInitial PyPI release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.binary",
    "package_url": "https://pypi.org/project/cs.binary/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.binary/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.binary/20230212/",
    "requires_dist": [
      "cs.buffer (>=20230212.2)",
      "cs.gimmicks (>=20230212)",
      "cs.lex (>=20230210)",
      "cs.pfx (>=20221118)",
      "cs.seq (>=20221118)"
    ],
    "requires_python": "",
    "summary": "Facilities associated with binary data parsing and transcription. The classes in this module support easy parsing of binary data structures, returning instances with the binary data decoded into attributes and capable of transcribing themselves in binary form (trivially via `bytes(instance)` and also otherwise).",
    "version": "20230212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16817467,
  "releases": {
    "20180801": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac1f36cd473ce89ccee42719ba7ec9e3f80a42faa781438ef3004f3808ce5856",
          "md5": "4f7061791ca98c45e9cde6d484400a00",
          "sha256": "72ed8c091a5f260ddd43e942e5a1ee5123f020818bfadb175d0484eebbd9b671"
        },
        "downloads": -1,
        "filename": "cs.binary-20180801.tar.gz",
        "has_sig": false,
        "md5_digest": "4f7061791ca98c45e9cde6d484400a00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7010,
        "upload_time": "2018-08-01T01:08:43",
        "upload_time_iso_8601": "2018-08-01T01:08:43.205711Z",
        "url": "https://files.pythonhosted.org/packages/ac/1f/36cd473ce89ccee42719ba7ec9e3f80a42faa781438ef3004f3808ce5856/cs.binary-20180801.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180805": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8ae8258d2259d0cbcbedcadbc647ae8f672218cafd78349591e5650bd2a1ab8",
          "md5": "bb5d025ae3e4733619e0d85066cf57f5",
          "sha256": "fbce0f378ad5c25678d5033f5975309bb569a2c7c2480b00628faa053443ed92"
        },
        "downloads": -1,
        "filename": "cs.binary-20180805.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5d025ae3e4733619e0d85066cf57f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9304,
        "upload_time": "2018-08-05T11:02:38",
        "upload_time_iso_8601": "2018-08-05T11:02:38.487378Z",
        "url": "https://files.pythonhosted.org/packages/c8/ae/8258d2259d0cbcbedcadbc647ae8f672218cafd78349591e5650bd2a1ab8/cs.binary-20180805.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180810": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf570a4194bc76f74746504818cb189af7d37f2652383d0588bc9a7ae074bed0",
          "md5": "fd95a999da7a4931394e033b9594bc4c",
          "sha256": "91395927b8bd582d36f9338066aa982c9a0f23b452a628c36505e06784078db1"
        },
        "downloads": -1,
        "filename": "cs.binary-20180810.tar.gz",
        "has_sig": false,
        "md5_digest": "fd95a999da7a4931394e033b9594bc4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9429,
        "upload_time": "2018-08-09T23:09:48",
        "upload_time_iso_8601": "2018-08-09T23:09:48.843765Z",
        "url": "https://files.pythonhosted.org/packages/bf/57/0a4194bc76f74746504818cb189af7d37f2652383d0588bc9a7ae074bed0/cs.binary-20180810.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180810.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93fb65986c09d4c6121ce844eb4399b30bfe32a1aabb981f12660f6a60a215e3",
          "md5": "1561ed403b90a35d61809dcb5f1df0ef",
          "sha256": "8ef1bd098b39896c7c446befb2a905502acbcc359f3a5e3f0e28d8ffb66ea5a2"
        },
        "downloads": -1,
        "filename": "cs.binary-20180810.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1561ed403b90a35d61809dcb5f1df0ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10885,
        "upload_time": "2018-08-09T23:51:34",
        "upload_time_iso_8601": "2018-08-09T23:51:34.582805Z",
        "url": "https://files.pythonhosted.org/packages/93/fb/65986c09d4c6121ce844eb4399b30bfe32a1aabb981f12660f6a60a215e3/cs.binary-20180810.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180810.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffc0fcfb4ecb89ae720b701247dc8f449b4a5d091d44fdceb05e431ef38efbcf",
          "md5": "9f6aa643aaa16e89c2d6bd78585241c5",
          "sha256": "b8149c55d38e88d8896e0ca8a01604a69a0386932b47faa9883228fbc0178ce1"
        },
        "downloads": -1,
        "filename": "cs.binary-20180810.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f6aa643aaa16e89c2d6bd78585241c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11269,
        "upload_time": "2018-08-10T01:55:44",
        "upload_time_iso_8601": "2018-08-10T01:55:44.191888Z",
        "url": "https://files.pythonhosted.org/packages/ff/c0/fcfb4ecb89ae720b701247dc8f449b4a5d091d44fdceb05e431ef38efbcf/cs.binary-20180810.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180823": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6783181631b6a10945d8f3fb0097df1b04baa213de430f11ff83fdf475cec5e7",
          "md5": "2b924c2442739d8ead720fb48e3e0e2d",
          "sha256": "a423163137719148686548decd29dd023d4f284971183049aeef089d13e7068a"
        },
        "downloads": -1,
        "filename": "cs.binary-20180823.tar.gz",
        "has_sig": false,
        "md5_digest": "2b924c2442739d8ead720fb48e3e0e2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14126,
        "upload_time": "2018-08-23T02:19:25",
        "upload_time_iso_8601": "2018-08-23T02:19:25.182849Z",
        "url": "https://files.pythonhosted.org/packages/67/83/181631b6a10945d8f3fb0097df1b04baa213de430f11ff83fdf475cec5e7/cs.binary-20180823.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20181108": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9c3e95b0cf82d389d117659bd62a0f19831414e960e8ca59ae4439e0e8066d",
          "md5": "7085c1f8b8d3300c3fefd713f1d47b70",
          "sha256": "19391685a31b751e13a5bacfdc5e4c6ff859d5cf5ef0ccea94da4b9c05d200af"
        },
        "downloads": -1,
        "filename": "cs.binary-20181108.tar.gz",
        "has_sig": false,
        "md5_digest": "7085c1f8b8d3300c3fefd713f1d47b70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14217,
        "upload_time": "2018-11-08T03:55:01",
        "upload_time_iso_8601": "2018-11-08T03:55:01.128696Z",
        "url": "https://files.pythonhosted.org/packages/de/9c/3e95b0cf82d389d117659bd62a0f19831414e960e8ca59ae4439e0e8066d/cs.binary-20181108.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20181231": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c7bbf932ba9ebb7742f90be39f5040505698178b383a17a896018ecfe337df3",
          "md5": "1bc62cca3ea3b06d58c0e4c1f6d1aec4",
          "sha256": "f1b150dd903c3ea5fa880f0c421aac876e676122857eda5e1316757dd61d1858"
        },
        "downloads": -1,
        "filename": "cs.binary-20181231.tar.gz",
        "has_sig": false,
        "md5_digest": "1bc62cca3ea3b06d58c0e4c1f6d1aec4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14230,
        "upload_time": "2018-12-31T10:13:12",
        "upload_time_iso_8601": "2018-12-31T10:13:12.733923Z",
        "url": "https://files.pythonhosted.org/packages/7c/7b/bf932ba9ebb7742f90be39f5040505698178b383a17a896018ecfe337df3/cs.binary-20181231.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190220": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb88d00aa74118c8607e9a36875c785041ec1bf969217b7f81b00c802215f073",
          "md5": "9a7821ece70f07ee8b6daed884ddc696",
          "sha256": "9983df2636babdd2078ccfd590c9580b77f1564a9c813142c013980ac3158889"
        },
        "downloads": -1,
        "filename": "cs.binary-20190220.tar.gz",
        "has_sig": false,
        "md5_digest": "9a7821ece70f07ee8b6daed884ddc696",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15687,
        "upload_time": "2019-02-20T08:54:21",
        "upload_time_iso_8601": "2019-02-20T08:54:21.774160Z",
        "url": "https://files.pythonhosted.org/packages/bb/88/d00aa74118c8607e9a36875c785041ec1bf969217b7f81b00c802215f073/cs.binary-20190220.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191230": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848e2d3566df6423245e0a49333ec006fd01b4f497265c0569a17d8bd59c3ee8",
          "md5": "2b59951d24a391fa75a963e062f50c78",
          "sha256": "0d808523478261fbb66ce4d63d9570e391e70d28f74b9ed2ab6c214358d24bb4"
        },
        "downloads": -1,
        "filename": "cs.binary-20191230.tar.gz",
        "has_sig": false,
        "md5_digest": "2b59951d24a391fa75a963e062f50c78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23520,
        "upload_time": "2019-12-30T02:22:47",
        "upload_time_iso_8601": "2019-12-30T02:22:47.967575Z",
        "url": "https://files.pythonhosted.org/packages/84/8e/2d3566df6423245e0a49333ec006fd01b4f497265c0569a17d8bd59c3ee8/cs.binary-20191230.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191230.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "966a1fd1a5d577f9e141bcb031c284238eda920538b9d8bab6353318a7aea6f7",
          "md5": "fe0a9720993d47f96d06c4fcd8d49dae",
          "sha256": "06226e3fe7aa03733d7aca6f9f0412f5c360b97d61a8275d500b462d530738b9"
        },
        "downloads": -1,
        "filename": "cs.binary-20191230.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe0a9720993d47f96d06c4fcd8d49dae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23621,
        "upload_time": "2019-12-30T02:48:07",
        "upload_time_iso_8601": "2019-12-30T02:48:07.957161Z",
        "url": "https://files.pythonhosted.org/packages/96/6a/1fd1a5d577f9e141bcb031c284238eda920538b9d8bab6353318a7aea6f7/cs.binary-20191230.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191230.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "514f20703100a5cf11d02097008b281c9d39ae9ca8244a759ec730c77c355a2b",
          "md5": "968869f6c1b22de2e2a76939abb19452",
          "sha256": "fef56abbf6a065ca62d60c24d60765f1fac86334ff44ecc2203c2abbce2466e7"
        },
        "downloads": -1,
        "filename": "cs.binary-20191230.2.tar.gz",
        "has_sig": false,
        "md5_digest": "968869f6c1b22de2e2a76939abb19452",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23883,
        "upload_time": "2019-12-30T04:18:18",
        "upload_time_iso_8601": "2019-12-30T04:18:18.471415Z",
        "url": "https://files.pythonhosted.org/packages/51/4f/20703100a5cf11d02097008b281c9d39ae9ca8244a759ec730c77c355a2b/cs.binary-20191230.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20191230.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ddbefb104b26bffa7e729ab05d8275c50b3a48e9c9456cf9e34c90a2a7dd4dd",
          "md5": "078943b56298d1e63a2f4d751ce358d9",
          "sha256": "c44c4cad674db711bdbb0d0952c7cd1dffbdeb824661b3ffde8780009e979599"
        },
        "downloads": -1,
        "filename": "cs.binary-20191230.3.tar.gz",
        "has_sig": false,
        "md5_digest": "078943b56298d1e63a2f4d751ce358d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23910,
        "upload_time": "2019-12-30T04:21:00",
        "upload_time_iso_8601": "2019-12-30T04:21:00.280662Z",
        "url": "https://files.pythonhosted.org/packages/7d/db/efb104b26bffa7e729ab05d8275c50b3a48e9c9456cf9e34c90a2a7dd4dd/cs.binary-20191230.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200229": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf1dbd7ed9a41072fa2589a9b07e77133593faac3fd3a24c70845209a3285326",
          "md5": "41653df7a025d7739de4eaf9b97ee80c",
          "sha256": "3af805697f3c308e261056d4c806bb9a86eaafc85568cf4a9ef4f5748c85859d"
        },
        "downloads": -1,
        "filename": "cs.binary-20200229.tar.gz",
        "has_sig": false,
        "md5_digest": "41653df7a025d7739de4eaf9b97ee80c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25098,
        "upload_time": "2020-02-29T05:01:02",
        "upload_time_iso_8601": "2020-02-29T05:01:02.625320Z",
        "url": "https://files.pythonhosted.org/packages/bf/1d/bd7ed9a41072fa2589a9b07e77133593faac3fd3a24c70845209a3285326/cs.binary-20200229.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210306": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdb28124bc3ebd0996eedd13359692117c08becca8b9e059261f2ea1c263389c",
          "md5": "33aa1814f73f2a390551237584650ce9",
          "sha256": "c6145387d36dec16397d9016c10057ab2b861293e00442ddb342af0b16cf4c74"
        },
        "downloads": -1,
        "filename": "cs.binary-20210306.tar.gz",
        "has_sig": false,
        "md5_digest": "33aa1814f73f2a390551237584650ce9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 68944,
        "upload_time": "2021-03-05T22:51:59",
        "upload_time_iso_8601": "2021-03-05T22:51:59.227963Z",
        "url": "https://files.pythonhosted.org/packages/fd/b2/8124bc3ebd0996eedd13359692117c08becca8b9e059261f2ea1c263389c/cs.binary-20210306.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210316": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2522cc14853547b49fe27048a84b8357f3d6cf477c983c97772bd30d3fe85976",
          "md5": "5e6608ebcd52606225e64dbb5031ba8d",
          "sha256": "494b361bbc3bce93154ef05e809dc5cb907c29905f042f9e3b382a1217871507"
        },
        "downloads": -1,
        "filename": "cs.binary-20210316.tar.gz",
        "has_sig": false,
        "md5_digest": "5e6608ebcd52606225e64dbb5031ba8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 69843,
        "upload_time": "2021-03-15T23:17:56",
        "upload_time_iso_8601": "2021-03-15T23:17:56.211469Z",
        "url": "https://files.pythonhosted.org/packages/25/22/cc14853547b49fe27048a84b8357f3d6cf477c983c97772bd30d3fe85976/cs.binary-20210316.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220605": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6f97e2aa4f39dcc72254fcb6085a9f7965078cc991e2f2d1e336af8046d27ef",
          "md5": "49bbc53fe0d2ce0a6b318672970376ba",
          "sha256": "ea2135c0536a21894b8261bf6141022a016bc49221f1df91a00a0c79102821ee"
        },
        "downloads": -1,
        "filename": "cs.binary-20220605-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49bbc53fe0d2ce0a6b318672970376ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29853,
        "upload_time": "2022-06-05T11:19:30",
        "upload_time_iso_8601": "2022-06-05T11:19:30.494773Z",
        "url": "https://files.pythonhosted.org/packages/e6/f9/7e2aa4f39dcc72254fcb6085a9f7965078cc991e2f2d1e336af8046d27ef/cs.binary-20220605-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2a4675d09c522bbe769c2a832ad9efacb2ffa2ead79596a9f2ef2fb0eb6f5cb",
          "md5": "d37eba47638b1232a8b5c8abff4ba5ef",
          "sha256": "40c4a39c31dfebbeddb031f6474c6b1ba2109583a95c3576d667ec86472c9c8f"
        },
        "downloads": -1,
        "filename": "cs.binary-20220605.tar.gz",
        "has_sig": false,
        "md5_digest": "d37eba47638b1232a8b5c8abff4ba5ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50924,
        "upload_time": "2022-06-05T11:19:33",
        "upload_time_iso_8601": "2022-06-05T11:19:33.332181Z",
        "url": "https://files.pythonhosted.org/packages/e2/a4/675d09c522bbe769c2a832ad9efacb2ffa2ead79596a9f2ef2fb0eb6f5cb/cs.binary-20220605.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20221206": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3e51b6eeb20a7d66862c786fe3a2aeb7cd8fd112057b6ac5cef3c703ee2dedc",
          "md5": "9ba44fb413fda533886951d57d1196e3",
          "sha256": "51b1f454bd85eecfc465ca0936782bc2b9fbdd9c3e26bd67f27fcd8e5dc5222c"
        },
        "downloads": -1,
        "filename": "cs.binary-20221206-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ba44fb413fda533886951d57d1196e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30066,
        "upload_time": "2022-12-05T23:25:25",
        "upload_time_iso_8601": "2022-12-05T23:25:25.192939Z",
        "url": "https://files.pythonhosted.org/packages/f3/e5/1b6eeb20a7d66862c786fe3a2aeb7cd8fd112057b6ac5cef3c703ee2dedc/cs.binary-20221206-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "495c534fe257fef39bf0ae49e4a00245947235af992e63358cdfb298c86ed8dd",
          "md5": "0aba294fc391912d9e85fb3114080b35",
          "sha256": "22974cea86b157984f9a9529d228ca1223777d639166150126defdd33c8828b1"
        },
        "downloads": -1,
        "filename": "cs.binary-20221206.tar.gz",
        "has_sig": false,
        "md5_digest": "0aba294fc391912d9e85fb3114080b35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51692,
        "upload_time": "2022-12-05T23:25:27",
        "upload_time_iso_8601": "2022-12-05T23:25:27.361581Z",
        "url": "https://files.pythonhosted.org/packages/49/5c/534fe257fef39bf0ae49e4a00245947235af992e63358cdfb298c86ed8dd/cs.binary-20221206.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d269e649abf7b6772e6eaf1eca9a432d364491debdd80f41373be9ed8f59194",
          "md5": "8f054fde409bf1f557e659f68d436fcf",
          "sha256": "cea501b696e0c76ce91590d602c486fdcd75169b50ea6b75d32eb0df7d6178c1"
        },
        "downloads": -1,
        "filename": "cs.binary-20230212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f054fde409bf1f557e659f68d436fcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30353,
        "upload_time": "2023-02-12T03:35:52",
        "upload_time_iso_8601": "2023-02-12T03:35:52.042240Z",
        "url": "https://files.pythonhosted.org/packages/6d/26/9e649abf7b6772e6eaf1eca9a432d364491debdd80f41373be9ed8f59194/cs.binary-20230212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec929bbe884116d5160e4c8639cc3cc46be39d9c1e183c103d667295947e057f",
          "md5": "7567f74ee7347bbee460add83ff9d47f",
          "sha256": "f3c1b4f9ab7302fed69cde6a19b61376699c10d45fbdc7520410fb77e2c9de7f"
        },
        "downloads": -1,
        "filename": "cs.binary-20230212.tar.gz",
        "has_sig": false,
        "md5_digest": "7567f74ee7347bbee460add83ff9d47f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52322,
        "upload_time": "2023-02-12T03:35:53",
        "upload_time_iso_8601": "2023-02-12T03:35:53.791463Z",
        "url": "https://files.pythonhosted.org/packages/ec/92/9bbe884116d5160e4c8639cc3cc46be39d9c1e183c103d667295947e057f/cs.binary-20230212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d269e649abf7b6772e6eaf1eca9a432d364491debdd80f41373be9ed8f59194",
        "md5": "8f054fde409bf1f557e659f68d436fcf",
        "sha256": "cea501b696e0c76ce91590d602c486fdcd75169b50ea6b75d32eb0df7d6178c1"
      },
      "downloads": -1,
      "filename": "cs.binary-20230212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f054fde409bf1f557e659f68d436fcf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30353,
      "upload_time": "2023-02-12T03:35:52",
      "upload_time_iso_8601": "2023-02-12T03:35:52.042240Z",
      "url": "https://files.pythonhosted.org/packages/6d/26/9e649abf7b6772e6eaf1eca9a432d364491debdd80f41373be9ed8f59194/cs.binary-20230212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec929bbe884116d5160e4c8639cc3cc46be39d9c1e183c103d667295947e057f",
        "md5": "7567f74ee7347bbee460add83ff9d47f",
        "sha256": "f3c1b4f9ab7302fed69cde6a19b61376699c10d45fbdc7520410fb77e2c9de7f"
      },
      "downloads": -1,
      "filename": "cs.binary-20230212.tar.gz",
      "has_sig": false,
      "md5_digest": "7567f74ee7347bbee460add83ff9d47f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52322,
      "upload_time": "2023-02-12T03:35:53",
      "upload_time_iso_8601": "2023-02-12T03:35:53.791463Z",
      "url": "https://files.pythonhosted.org/packages/ec/92/9bbe884116d5160e4c8639cc3cc46be39d9c1e183c103d667295947e057f/cs.binary-20230212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}