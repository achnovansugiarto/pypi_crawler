{
  "info": {
    "author": "['Nicolas Renaud', 'Felipe Zapata']",
    "author_email": "n.renaud@esciencecenter.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "# Schrodinet\n\n![Build Status](https://travis-ci.com/NLESC-JCER/Schrodinet.svg?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/38b540ecc5464901a5a48a9be037c924)](https://app.codacy.com/gh/NLESC-JCER/Schrodinet?utm_source=github.com&utm_medium=referral&utm_content=NLESC-JCER/Schrodinet&utm_campaign=Badge_Grade_Dashboard)\n\nSolving the Schrodinger equations in 1, 2 or 3D  using quantum monte carlo and radial basis function neural network to encode the wavefunction.\n\n## Harmonic Oscillator in 1D\n\nThe script below illustrates how to optimize the wave function of the one-dimensional harmonic oscillator.\n\n```python\nimport torch\nfrom torch import optim\n\nfrom schrodinet.sampler.metropolis import Metropolis\nfrom schrodinet.wavefunction.wf_potential import Potential\nfrom schrodinet.solver.solver_potential import SolverPotential\nfrom schrodinet.solver.plot_potential import plot_results_1d, plotter1d\n\ndef pot_func(pos):\n    '''Potential function desired.'''\n    return 0.5*pos**2\n\n\ndef ho1d_sol(pos):\n    '''Analytical solution of the 1D harmonic oscillator.'''\n    return torch.exp(-0.5*pos**2)\n\n# Define the domain and the number of RBFs\ndomain, ncenter = {'min': -5., 'max': 5.}, 11\n\n# wavefunction\nwf = Potential(pot_func, domain, ncenter, fcinit='random', nelec=1, sigma=0.5)\n\n# sampler\nsampler = Metropolis(nwalkers=1000, nstep=2000,\n                     step_size=1., nelec=wf.nelec,\n                     ndim=wf.ndim, init={'min': -5, 'max': 5})\n\n# optimizer\nopt = optim.Adam(wf.parameters(), lr=0.05)\nscheduler = optim.lr_scheduler.StepLR(opt, step_size=100, gamma=0.75)\n\n# Solver\nsolver = SolverPotential(wf=wf, sampler=sampler,\n                         optimizer=opt, scheduler=scheduler)\n\n# Train the wave function\nplotter = plotter1d(wf, domain, 100, sol=ho1d_sol) \nsolver.run(300, loss='variance', plot=plotter, save='model.pth')\n\n# Plot the final wave function\nplot_results_1d(solver, domain, 100, ho1d_sol, e0=0.5, load='model.pth')\n```\n\nAfter otpimization the following trajectory can easily be generated :\n\n<p align=\"center\">\n<img src=\"./pics/ho1d.gif\" title=\"Optimization of the wave function\">\n</p>\n\nThe same procedure can be done on different potentials. The figure below shows the performace of the method on the harmonic oscillator and the morse potential.\n\n<p align=\"center\">\n<img src=\"./pics/rbf1d_summary.png\" title=\"Results of the optimization\">\n</p>\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NLESC-JCER/Schrodinet",
    "keywords": "schrodinet",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "schrodinet",
    "package_url": "https://pypi.org/project/schrodinet/",
    "platform": "",
    "project_url": "https://pypi.org/project/schrodinet/",
    "project_urls": {
      "Homepage": "https://github.com/NLESC-JCER/Schrodinet"
    },
    "release_url": "https://pypi.org/project/schrodinet/0.1.1/",
    "requires_dist": [
      "autograd",
      "cython",
      "matplotlib",
      "numpy",
      "pyyaml (>=5.1)",
      "schema",
      "scipy",
      "tqdm",
      "torch",
      "prospector[with_pyroma] ; extra == 'dev'",
      "yapf ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "recommonmark ; extra == 'doc'",
      "sphinx ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "coverage ; extra == 'test'",
      "pycodestyle ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-runner ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Solving the Schrodinger equation using RBF Neural Net",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6921058,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ce3c7985c4caa6ce5c9b1ac6a7c9f36a63ff93edc65835fee9878b07168ab2a",
          "md5": "3a64a29313b73104f300a6b04085873d",
          "sha256": "2d1e4fddf3185dbe92013be3fbb67e6e66bdbd06da167f6e8671ee665e9af65e"
        },
        "downloads": -1,
        "filename": "schrodinet-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a64a29313b73104f300a6b04085873d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28333,
        "upload_time": "2020-03-31T12:19:50",
        "upload_time_iso_8601": "2020-03-31T12:19:50.209828Z",
        "url": "https://files.pythonhosted.org/packages/9c/e3/c7985c4caa6ce5c9b1ac6a7c9f36a63ff93edc65835fee9878b07168ab2a/schrodinet-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baff06608bbf07584a620d686c8c06c22bc545c248b6d8209c2d2a7a2fd72f7c",
          "md5": "e77e488fe2c8766d83d3a4c3ea13ee45",
          "sha256": "5036d46606bbef3585f670ce031cca2803bc6e3f0766a4c7a27f9f8718fc67b6"
        },
        "downloads": -1,
        "filename": "schrodinet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e77e488fe2c8766d83d3a4c3ea13ee45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22539,
        "upload_time": "2020-03-31T12:19:53",
        "upload_time_iso_8601": "2020-03-31T12:19:53.007953Z",
        "url": "https://files.pythonhosted.org/packages/ba/ff/06608bbf07584a620d686c8c06c22bc545c248b6d8209c2d2a7a2fd72f7c/schrodinet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "427b7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087",
          "md5": "da3c02d85a9888dc398f15a598b61d29",
          "sha256": "55d018f20e838a60ee49ecfde0bfcff8a8cf88220543962eaeacbc13345b5bc6"
        },
        "downloads": -1,
        "filename": "schrodinet-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da3c02d85a9888dc398f15a598b61d29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28441,
        "upload_time": "2020-03-31T15:40:45",
        "upload_time_iso_8601": "2020-03-31T15:40:45.336528Z",
        "url": "https://files.pythonhosted.org/packages/42/7b/7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087/schrodinet-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa909f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee",
          "md5": "c8b196c438d1203be48b634be0410a80",
          "sha256": "e79e414619eda1060bfb2240203561245829c0867c57dc5210067065d7282950"
        },
        "downloads": -1,
        "filename": "schrodinet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c8b196c438d1203be48b634be0410a80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22630,
        "upload_time": "2020-03-31T15:40:47",
        "upload_time_iso_8601": "2020-03-31T15:40:47.197003Z",
        "url": "https://files.pythonhosted.org/packages/aa/90/9f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee/schrodinet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "427b7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087",
        "md5": "da3c02d85a9888dc398f15a598b61d29",
        "sha256": "55d018f20e838a60ee49ecfde0bfcff8a8cf88220543962eaeacbc13345b5bc6"
      },
      "downloads": -1,
      "filename": "schrodinet-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da3c02d85a9888dc398f15a598b61d29",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28441,
      "upload_time": "2020-03-31T15:40:45",
      "upload_time_iso_8601": "2020-03-31T15:40:45.336528Z",
      "url": "https://files.pythonhosted.org/packages/42/7b/7ba3a0f7711e54565a8e18038fd1cf6cf928d0dfd4c5a6a8655b6abf0087/schrodinet-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa909f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee",
        "md5": "c8b196c438d1203be48b634be0410a80",
        "sha256": "e79e414619eda1060bfb2240203561245829c0867c57dc5210067065d7282950"
      },
      "downloads": -1,
      "filename": "schrodinet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c8b196c438d1203be48b634be0410a80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22630,
      "upload_time": "2020-03-31T15:40:47",
      "upload_time_iso_8601": "2020-03-31T15:40:47.197003Z",
      "url": "https://files.pythonhosted.org/packages/aa/90/9f524e851f47917f6f007adadac35718cfaee3f4cbd9e5435c27e454fbee/schrodinet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}