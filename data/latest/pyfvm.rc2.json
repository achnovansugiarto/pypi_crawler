{
  "info": {
    "author": "",
    "author_email": "Nico Schl√∂mer <nico.schloemer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# pyfvm\n\n[![PyPi Version](https://img.shields.io/pypi/v/pyfvm.svg?style=flat-square)](https://pypi.org/project/pyfvm)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pyfvm.svg?style=flat-square)](https://pypi.org/pypi/pyfvm/)\n[![GitHub stars](https://img.shields.io/github/stars/meshpro/pyfvm.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/meshpro/pyfvm)\n[![PyPi downloads](https://img.shields.io/pypi/dm/pyfvm.svg?style=flat-square)](https://pypistats.org/packages/pyfvm)\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&logoColor=white&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/hnTJ5MRX2Y)\n\nCreating finite volume equation systems with ease.\n\npyfvm provides everything that is needed for setting up finite volume equation\nsystems. The user needs to specify the finite volume formulation in a\nconfiguration file, and pyfvm will create the matrix/right-hand side or the\nnonlinear system for it. This package is for everyone who wants to quickly\nconstruct FVM systems.\n\n### Examples\n\n#### Linear equation systems\n\npyfvm works by specifying the residuals, so for solving Poisson's equation with\nDirichlet boundary conditions, simply do\n\n```python\nimport meshplex\nimport meshzoo\nimport numpy as np\nfrom scipy.sparse import linalg\n\nimport pyfvm\nfrom pyfvm.form_language import Boundary, dS, dV, integrate, n_dot_grad\n\n\nclass Poisson:\n    def apply(self, u):\n        return integrate(lambda x: -n_dot_grad(u(x)), dS) - integrate(lambda x: 1.0, dV)\n\n    def dirichlet(self, u):\n        return [(lambda x: u(x) - 0.0, Boundary())]\n\n\n# Create mesh using meshzoo\nvertices, cells = meshzoo.rectangle_tri(\n    np.linspace(0.0, 2.0, 401), np.linspace(0.0, 1.0, 201)\n)\nmesh = meshplex.Mesh(vertices, cells)\n\nmatrix, rhs = pyfvm.discretize_linear(Poisson(), mesh)\n\nu = linalg.spsolve(matrix, rhs)\n\nmesh.write(\"out.vtk\", point_data={\"u\": u})\n```\n\nThis example uses [meshzoo](https://pypi.org/project/meshzoo) for creating a\nsimple mesh, but anything else that provides vertices and cells works as well.\nFor example, reading from a wide variety of mesh files is supported (via\n[meshio](https://pypi.org/project/meshio)):\n\n<!--pytest-codeblocks:skip-->\n\n```python\nmesh = meshplex.read(\"pacman.e\")\n```\n\nLikewise, [PyAMG](https://github.com/pyamg/pyamg) is a much faster solver for\nthis problem\n\n<!--pytest-codeblocks:skip-->\n\n```python\nimport pyamg\n\nml = pyamg.smoothed_aggregation_solver(matrix)\nu = ml.solve(rhs, tol=1e-10)\n```\n\nMore examples are contained in the [examples directory](examples/).\n\n#### Nonlinear equation systems\n\nNonlinear systems are treated almost equally; only the discretization and\nobviously the solver call is different. For Bratu's problem:\n\n```python\nimport pyfvm\nfrom pyfvm.form_language import *\nimport meshzoo\nimport numpy as np\nfrom sympy import exp\nimport meshplex\n\n\nclass Bratu:\n    def apply(self, u):\n        return integrate(lambda x: -n_dot_grad(u(x)), dS) - integrate(\n            lambda x: 2.0 * exp(u(x)), dV\n        )\n\n    def dirichlet(self, u):\n        return [(u, Boundary())]\n\n\nvertices, cells = meshzoo.rectangle_tri(\n    np.linspace(0.0, 2.0, 101), np.linspace(0.0, 1.0, 51)\n)\nmesh = meshplex.Mesh(vertices, cells)\n\nf, jacobian = pyfvm.discretize(Bratu(), mesh)\n\n\ndef jacobian_solver(u0, rhs):\n    from scipy.sparse import linalg\n\n    jac = jacobian.get_linear_operator(u0)\n    return linalg.spsolve(jac, rhs)\n\n\nu0 = np.zeros(len(vertices))\nu = pyfvm.newton(f.eval, jacobian_solver, u0)\n\nmesh.write(\"out.vtk\", point_data={\"u\": u})\n```\n\nNote that the Jacobian is computed symbolically from the `Bratu` class.\n\nInstead of `pyfvm.newton`, you can use any solver that accepts the residual\ncomputation `f.eval`, e.g.,\n\n<!--pytest-codeblocks:skip-->\n\n```python\nimport scipy.optimize\n\nu = scipy.optimize.newton_krylov(f.eval, u0)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfvm",
    "package_url": "https://pypi.org/project/pyfvm/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfvm/",
    "project_urls": {
      "Home": "https://github.com/meshpro/pyfvm",
      "Issues": "https://github.com/meshpro/pyfvm/issues"
    },
    "release_url": "https://pypi.org/project/pyfvm/0.4.3/",
    "requires_dist": [
      "x21 (>=0.4.1,<0.5.0)",
      "meshplex (<0.19.0,>=0.18.0)",
      "npx",
      "numpy",
      "scipy",
      "sphinxcontrib-bibtex",
      "sympy"
    ],
    "requires_python": ">=3.7",
    "summary": "Finite volume discretizations for Python",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16642286,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aa5812a3b808ac1cbb49f4456b8987314bac3b50f7d04bf52d92a7e1805ada5",
          "md5": "944a4f8b328cac655453be8e28e5bd26",
          "sha256": "73e0aeb1c2f66d87067177aeb519163315a0924f35b380014f9107e49551fe4f"
        },
        "downloads": -1,
        "filename": "pyfvm-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "944a4f8b328cac655453be8e28e5bd26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 109587,
        "upload_time": "2022-09-30T16:15:13",
        "upload_time_iso_8601": "2022-09-30T16:15:13.397878Z",
        "url": "https://files.pythonhosted.org/packages/8a/a5/812a3b808ac1cbb49f4456b8987314bac3b50f7d04bf52d92a7e1805ada5/pyfvm-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa239cc8d8c5a786b693c0cae1de39f9cd4f8838d974f01f1c20aeaf1ec37a3d",
          "md5": "37358571d273f1aed0f50dcfeaf6fef5",
          "sha256": "cbe0926cf247583321caba09e961bc3e770b5fa368af18ef72cdc7f6dc271f53"
        },
        "downloads": -1,
        "filename": "pyfvm-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37358571d273f1aed0f50dcfeaf6fef5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 38589,
        "upload_time": "2023-01-31T23:38:29",
        "upload_time_iso_8601": "2023-01-31T23:38:29.234063Z",
        "url": "https://files.pythonhosted.org/packages/aa/23/9cc8d8c5a786b693c0cae1de39f9cd4f8838d974f01f1c20aeaf1ec37a3d/pyfvm-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa239cc8d8c5a786b693c0cae1de39f9cd4f8838d974f01f1c20aeaf1ec37a3d",
        "md5": "37358571d273f1aed0f50dcfeaf6fef5",
        "sha256": "cbe0926cf247583321caba09e961bc3e770b5fa368af18ef72cdc7f6dc271f53"
      },
      "downloads": -1,
      "filename": "pyfvm-0.4.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37358571d273f1aed0f50dcfeaf6fef5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 38589,
      "upload_time": "2023-01-31T23:38:29",
      "upload_time_iso_8601": "2023-01-31T23:38:29.234063Z",
      "url": "https://files.pythonhosted.org/packages/aa/23/9cc8d8c5a786b693c0cae1de39f9cd4f8838d974f01f1c20aeaf1ec37a3d/pyfvm-0.4.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}