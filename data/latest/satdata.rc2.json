{
  "info": {
    "author": "Leif Denby",
    "author_email": "leifdenby@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# satdata\n\n![Python\napplication](https://github.com/leifdenby/satdata/workflows/Python%20application/badge.svg)\n\nSimplified access to GOES-16 data from python or the command line\n\n## Installation\n\nYou can install the most recent version of `satdata` from [pypi](https://pypi.org/project/satdata/) using pip:\n\n```bash\n$> python -m pip install satdata\n```\n\nor clone the repository and use pip to install the local copy\n\n```bash\n$> git clone https://github.com/leifdenby/satdata\n$> python -m pip install .\n```\n\n\n## Usage\n\nYou can use the command line interface to query and download files:\n\n    $> python -m satdata.cli --help\n```bash\nusage: cli.py [-h] [--dt_max DT_MAX] [--region {F,C,M1,M2}]\n              [--channel {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16} | --product {CMIP,TPW,RSR}]\n              [--fetch-files] [--debug]\n              time\n\npositional arguments:\n  time                  query for files around this time, an ISO8601 formatted\n                        time,for example 2020-01-20T16:20Z\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dt_max DT_MAX       query-window around `time`, an ISO8601 formatted\n                        duration for example P1D for one day or PT15M for 15\n                        minutes\n  --region {F,C,M1,M2}  F: full disk, C: continential US, M1: mesoscale region\n                        1 (west), M2: mesoscale region 2 (east)\n  --channel {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}\n                        Radiance channel, options: 1: Blue, 2: Red, 3: Veggie,\n                        4: Cirrus, 5: Snow/Ice, 6: Cloud Particle Size, 7:\n                        Shortwave Window, 8: Upper-Level tropispheric water\n                        vapour, 9: Mid-level tropospheric water vapour, 10:\n                        Lower-level water vapour, 11: Cloud-top phase, 12:\n                        Ozone, 13: 'Clean' IR longwave window, 14: 'Dirty' IR\n                        longwave window, 15: 'Dirty' longwave window, 16:\n                        'CO2' longwave infrared\n  --product {CMIP,TPW,RSR}\n                        Derived products, options: CMIP: Cloud and Moisture\n                        Imagery, TPW: Total Precipitable Water, RSR: Reflected\n                        Shortwave Radiation Top-Of-Atmosphere\n  --fetch-files         fetch all files that match query (default is just to\n                        print files that match query\n  --debug               show debug info\n```\n\nFor example, to query for full-disc data of the Total Precipitable Water\n(TPW) product near 30th January 2020 at 14:00 UTC run:\n\n```bash\n$> python -m satdata.cli --region F --product ACHA 2020-01-30T14:00\n```\n\n\nOr use the module directly from python:\n\n```python\nimport datetime\nimport satdata\n\n\nt = datetime.datetime(day=16, month=1, year=2020, hour=16, minute=0)\ndt_max = datetime.timedelta(minutes=20)\n\ncli = satdata.Goes16AWS()\nkeys = cli.query(time=t, region='F', debug=True, dt_max=dt_max)\nfn = cli.download(keys[0])[0]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leifdenby/satdata",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "satdata",
    "package_url": "https://pypi.org/project/satdata/",
    "platform": "",
    "project_url": "https://pypi.org/project/satdata/",
    "project_urls": {
      "Homepage": "https://github.com/leifdenby/satdata"
    },
    "release_url": "https://pypi.org/project/satdata/0.2.4/",
    "requires_dist": [
      "tqdm",
      "s3fs",
      "isodate",
      "pytest ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "ipdb ; extra == 'dev'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Satellite data access from Amazon S3 via python",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12962478,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f10c2062d1f2a7a5326d20b5789f9e4a808f160cff5d4da517178791b450c0ed",
          "md5": "8a2177c613b16adc5690398c1b96a91b",
          "sha256": "de45e96fa0a588c4ae214a61464465dce4db62ef2d5f6cb868e2e05534af216c"
        },
        "downloads": -1,
        "filename": "satdata-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a2177c613b16adc5690398c1b96a91b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6808,
        "upload_time": "2022-02-21T16:47:28",
        "upload_time_iso_8601": "2022-02-21T16:47:28.383794Z",
        "url": "https://files.pythonhosted.org/packages/f1/0c/2062d1f2a7a5326d20b5789f9e4a808f160cff5d4da517178791b450c0ed/satdata-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "483c890c08ec56bcb0da3953d583260fe8d9d46ef04a371b6aefee1d874d9ec2",
          "md5": "7a27aea76db86184574f9c8c2cc3f32d",
          "sha256": "f32b137bc706c467989c8901df1cad506aa61b94350924b0626cf6a59ca96d3a"
        },
        "downloads": -1,
        "filename": "satdata-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a27aea76db86184574f9c8c2cc3f32d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8168,
        "upload_time": "2022-02-21T17:35:05",
        "upload_time_iso_8601": "2022-02-21T17:35:05.669557Z",
        "url": "https://files.pythonhosted.org/packages/48/3c/890c08ec56bcb0da3953d583260fe8d9d46ef04a371b6aefee1d874d9ec2/satdata-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "483c890c08ec56bcb0da3953d583260fe8d9d46ef04a371b6aefee1d874d9ec2",
        "md5": "7a27aea76db86184574f9c8c2cc3f32d",
        "sha256": "f32b137bc706c467989c8901df1cad506aa61b94350924b0626cf6a59ca96d3a"
      },
      "downloads": -1,
      "filename": "satdata-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a27aea76db86184574f9c8c2cc3f32d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8168,
      "upload_time": "2022-02-21T17:35:05",
      "upload_time_iso_8601": "2022-02-21T17:35:05.669557Z",
      "url": "https://files.pythonhosted.org/packages/48/3c/890c08ec56bcb0da3953d583260fe8d9d46ef04a371b6aefee1d874d9ec2/satdata-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}