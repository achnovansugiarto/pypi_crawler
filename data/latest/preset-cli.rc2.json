{
  "info": {
    "author": "Beto Dealmeida",
    "author_email": "beto@preset.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: Other/Proprietary License",
      "Programming Language :: Python"
    ],
    "description": "==========\npreset-cli\n==========\n\n    A CLI to interact with Preset workspaces.\n\nThis tool is a command line interface (CLI) to interact with your Preset workspaces. Currently it can be used to sync resources (databases, datasets, charts, dashboards) from source control, either in native format or from a `dbt <https://www.getdbt.com/>`_ project. It can also be used to run SQL against any database in any workspace. In the future, the CLI will also allow you to manage your workspaces and users.\n\nInstallation\n============\n\nInstall the CLI with ``pip``:\n\n.. code-block:: bash\n\n    $ pip install -U setuptools setuptools_scm wheel  # for good measure\n    $ pip install preset-cli\n\nMake sure you're using Python 3.8 or newer.\n\nAuthentication\n==============\n\nThe CLI requires an API key for authentication, composed of token and an associated secret. Both can be defined in your environment as ``PRESET_API_TOKEN`` and ``PRESET_API_SECRET``, respectively, or can be stored in a configuration file. To store the credentials in a configuration file simply run ``preset-cli auth``. This should open https://manage.app.preset.io/app/user in your browser so you can generate a new token, and it will prompt you for the token and its secret:\n\n.. code-block:: bash\n\n    % preset-cli auth\n    Please generate a new token at https://manage.app.preset.io/app/user if you don't have one already\n    API token: 35dac901-c775-43ff-8eb4-816edc061487\n    API secret: [will not echo]\n    Credentials stored in /Users/beto/Library/Application Support/preset-cli/credentials.yaml\n\nThe credentials will be stored in a system-dependent location, in a file that's readable only by you.\n\nThis step is optional. If you try to run the CLI without the token/secret defined in your environment or stored in the expected location you will be prompted for them:\n\n.. code-block:: bash\n\n    % preset-cli superset sql\n    You need to specify a JWT token or an API key (name and secret)\n    API token: 35dac901-c775-43ff-8eb4-816edc061487\n    API secret: [will not echo]\n    Store the credentials in /Users/beto/Library/Application Support/preset-cli/credentials.yaml? [y/N]\n\nYou can also pass the token/secret (or even the JWT token) directly as an option:\n\n.. code-block:: bash\n\n    % preset-cli --api-token 35dac901-c775-43ff-8eb4-816edc061487 --api-secret XXX superset sql\n    % preset-cli --jwt-token XXX superset sql\n\nIn summary, there are 3 options for credentials:\n\n1. Stored in the environment as ``PRESET_API_TOKEN`` and ``PRESET_API_SECRET``.\n2. Stored in a user-readable file called ``credentials.yaml``, with system-dependent location.\n3. Passed directly to the CLI via ``--api-token`` and ``--api-secret`` (or ``--jwt-token``) options.\n\nWorkspaces\n==========\n\nThe CLI can run commands against one or more Preset workspaces (Apache Superset instances). When running a command you can specify the workspace(s) by passing a comma-separated list of URLs to the ``--workspaces`` option:\n\n.. code-block:: bash\n\n    % preset-cli \\\n    > --workspaces=https://abcdef12.us1a.app.preset.io/,https://34567890.us1a.app.preset.io/ \\\n    > superset sql\n\nIf you omit the ``--workspaces`` option you will be prompted interactively:\n\n.. code-block:: bash\n\n    % preset-cli superset sql\n    Choose one or more workspaces (eg: 1-3,5,8-):\n\n    # Team 1 #\n    ✅ (1) The Data Lab\n    🚧 (2) New workspace\n\n    # Dev #\n    ⤴️ (3) Test workspace\n\nEach workspace has an icon depicting its status:\n\n- ✅ ready\n- 📊 loading examples\n- 💾 creating/initializing metadata database\n- 🚧 migrating metadata database\n- 🕵️ migrating secrets\n- ⤴️ upgrading workspace\n- ❗️ error\n- ❓ unknown state\n\nYou can specify one or more workspaces by using a comma-separated list of numbers and/or ranges:\n\n- ``1``: workspace 1\n- ``1,3``: workspaces 1 and 3\n- ``1,3-5``: workspaces 1, 3, 4, and 5\n- ``-3``: workspaces 1, 2, and 3\n- ``1-``: all workspaces\n- ``-``: all workspaces\n\nCommands\n========\n\nThe following commands are currently available:\n\n- ``preset-cli auth``: store authentication credentials.\n- ``preset-cli superset sql``: run SQL interactively or programmatically against an analytical database.\n- ``preset-cli superset export-assets``: export resources (databases, datasets, charts, dashboards) into a directory as YAML files.\n- ``preset-cli superset export-ownership``: export resource ownership (UUID -> email) into a YAML file.\n- ``preset-cli superset export-rls``: export RLS rules into a YAML file.\n- ``preset-cli superset export-users``: export users (name, username, email, roles) into a YAML file.\n- ``preset-cli superset sync native``: synchronize the workspace from a directory of templated configuration files.\n- ``preset-cli superset sync dbt-core``: synchronize the workspace from a dbt Core project.\n- ``preset-cli superset sync dbt-cloud``: synchronize the workspace from a dbt Cloud project.\n\nAll the ``superset`` sub-commands can also be executed against a standalone Superset instance, using the ``superset-cli`` command. This means that if you are running an instance of Superset at https://superset.example.org/ you can export its resources with the command:\n\n.. code-block:: bash\n\n    % superset-cli https://superset.example.org/ export-assets /path/to/directory\n\nAnd then import everything to a Preset workspace with:\n\n.. code-block:: bash\n\n    % preset-cli superset sync native /path/to/directory\n\nRunning SQL\n-----------\n\nThe CLI offers an easy way to run SQL against an analytical database in a workspace. This can be done programmatically or interactively. For example, to run the query ``SELECT COUNT(*) AS revenue FROM sales`` given a workspace URL and a database ID you can run:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ superset sql \\\n    > --database-id=1 -e \"SELECT COUNT(*) AS revenue FROM sales\"\n\n    https://abcdef12.us1a.app.preset.io/\n      revenue\n    ---------\n           42\n\nIf you don't specify the database ID you will be shown a list of available databases in order to choose one. If you don't specify the SQL query via the ``-e`` option the CLI will start a simple REPL (read-eval-print loop) where you can run queries interactively.\n\nSynchronizing from exports\n--------------------------\n\nYou can use the CLI to manage workspaces resources — databases, datasets, charts, and dashboards — from source control. The configuration should be stored as YAML files, using the same format the Apache Superset uses for importing and exporting resources.\n\nThe easiest way to generate the configuration files is to build one or more dashboards in a Preset workspace, export them together, and unzip the generated file into a directory.\n\n.. image:: https://github.com/preset-io/preset-cli/raw/master/docs/images/export_dashboards.png\n\nAfter unzipping the directory should look like this:\n\n- ``charts/``\n- ``dashboards/``\n- ``databases/``\n- ``datasets/``\n- ``metadata.yaml``\n\nYou can see an example `here <https://github.com/preset-io/preset-cli/tree/master/examples/exports>`_.\n\nTo synchronize these files to a Preset workspace you only need to run:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync native /path/to/directory/\n\nIf any of the resources already exist you need to pass the ``--overwrite`` flag in order to replace them. The CLI will warn you of any resources that already exist if the flag is not passed:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync native /path/to/directory/\n    Error importing database\n    The following file(s) already exist. Pass --overwrite to replace them.\n    - databases/Google_Sheets.yaml\n    Error importing dataset\n    The following file(s) already exist. Pass --overwrite to replace them.\n    - datasets/Google_Sheets/country_cnt.yaml\n    Error importing chart\n    The following file(s) already exist. Pass --overwrite to replace them.\n    - charts/Total_count_134.yaml\n    Error importing dashboard\n    The following file(s) already exist. Pass --overwrite to replace them.\n    - dashboards/White_label_test.yaml\n\nSynchronized resources can be marked as \"externally managed\" by passing the ``--disallow-edits`` flag to the command. When the flag is passed users won't be able to edit the resources. It's also possible to provide a URL where the resource can be modified, eg, a link to a file in a Github repository. This can be done by passing the ``--external-url-prefix`` flag:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync native /path/to/directory/ --disallow-edits \\\n    > --external-url-prefix=https://github.com/org/project/blob/master/\n\nThis way, the file ``dashboards/White_label_test.yaml`` would have an external URL pointing to https://github.com/org/project/blob/master/dashboards/White_label_test.yaml. Currently the URL is not displayed anywhere, but in the near future we should have affordances pointing users to it from the instance UI.\n\nUsing templates\n~~~~~~~~~~~~~~~\n\nOne of the most powerful features of this command is that the YAML configuration files are treated as `Jinja2 <https://jinja.palletsprojects.com/en/3.0.x/>`_ templates, allowing you to parametrize the synchronized files. For example, imagine a simple chart like this:\n\n.. code-block:: yaml\n\n    slice_name: Total sales\n    viz_type: big_number_total\n    params:\n      metric: sum__sales\n      adhoc_filters: []\n\nThe chart shows the metric ``sum__sales``, representing the total (unfiltered) sales of a given product. We can change the chart configuration to look like this instead:\n\n.. code-block:: yaml\n\n    {% if country %}\n    slice_name: Sales in {{ country }}\n    {% else %}\n    slice_name: Total sales\n    {% endif %}\n    viz_type: big_number_total\n    params:\n      metric: sum__sales\n      {% if country %}\n      adhoc_filters:\n        - clause: WHERE\n          expressionType: SQL\n          sqlExpression: country = '{{ country }}'\n          subject: null\n          operator: null\n          comparator: null\n      {% else %}\n      adhoc_filters: []\n      {% endif %}\n\nNow, if the ``country`` parameter is set the chart will have a different title and an additional filter. Multiple parameters can be passed as optiona via the command line:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync native /path/to/directory/ -o country=BR\n\nTemplates also have access to the workspace name through the ``instance`` variable (a `URL object <https://pypi.org/project/yarl/>`_):\n\n.. code-block:: yaml\n\n    params:\n      metric: sum__sales\n      adhoc_filters:\n        - clause: WHERE\n          expressionType: SQL\n          {% if instance.host == '//abcdef12.us1a.app.preset.io/ %}\n          sqlExpression: warehouse_id = 1\n          {% elif instance.host == '//34567890.us1a.app.preset.io/ %}\n          sqlExpression: warehouse_id = 2\n          {% else %}\n          sqlExpression: warehouse_id = 3\n          {% endif %}\n\nYou can also load variables from the environment by passing the ``--load-env`` (or ``-e``) flag:\n\n.. code-block:: yaml\n\n    database_name: Postgres\n    sqlalchemy_uri: postgres://{{ env[\"POSTGRES_HOSTNAME\"] }}\n\n\nFinally, as shown in the next section, templates can leverage user-defined functions.\n\nUser defined functions\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can create your own functions to be used in the configuration templates. Simply create a sub-directory called ``functions/`` in the directory where the configuration files are stored, and add one or more Python files. As a simple example, imagine a file called ``functions/demo.py`` with the following content:\n\n.. code-block:: python\n\n    # functions/demo.py\n    def hello_world() -> str:\n        return \"Hello, world!\"\n\nThe function can then be called from any template the following way:\n\n.. code-block:: yaml\n\n    slice_name: {{ functions.demo.hello_world() }}\n    viz_type: big_number_total\n    params:\n      ...\n\nSynchronizing to and from dbt\n-----------------------------\n\nThe CLI also allows you to synchronize models, and metrics from a `dbt <https://www.getdbt.com/>`_ project.\n\nIf you're using dbt Core you can point the CLI to your compiled manifest and your profiles file, so that all the database is automatically created, together with all the models and metrics. The full command is:\n\n.. code-block:: bash\n\n   % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n   > superset sync dbt-core /path/to/dbt/my_project/target/manifest.json \\\n   > --project=my_project --target=dev --profile=${HOME}/.dbt/profiles.yml \\\n   > --exposures=/path/to/dbt/my_project/models/exposures.yaml \\\n   > --import-db \\\n   > --external-url-prefix=http://localhost:8080/\n\nRunning this command will:\n\n1. Read the dbt profile and create the ``$target`` database for the specified project in the Preset workspace.\n2. Every source in the project will be created as a dataset in the Preset workspace.\n3. Every model in the project will be created as a dataset in the Preset workspace.\n4. Any `metrics <https://docs.getdbt.com/docs/building-a-dbt-project/metrics>`_ will be added to the corresponding datasets.\n5. Every dashboard built on top of the dbt sources and/or models will be synchronized back to dbt as an `exposure <https://docs.getdbt.com/docs/building-a-dbt-project/exposures>`_.\n\nThe ``--external-url-prefix`` should point to your dbt docs, so that the resources in the workspace can point to the source of truth where they are being managed. Similar to the native sync, the dbt sync also supports the ``--disallow-edits`` flag.\n\nIf you're using dbt Cloud you can instead pass a job ID and a `service account access token <https://cloud.getdbt.com/#/accounts/72449/settings/service-tokens/new/>`_:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync dbt-cloud \\\n    > $TOKEN $JOB_ID \\\n    > --external-url-prefix=http://localhost:8080/\n\nThe token only needs access to the \"Metadata only\" permission set for your project. You can see the job ID by going to the project URL in dbt Cloud and looking at the last ID in the URL. For example, if the URL is https://cloud.getdbt.com/#/accounts/12345/projects/567890/jobs/ the job ID is 567890.\n\nBefore running the command you need to have a database already created in the Preset workspace, and the database should have the same name as the dbt Cloud database. You can run the command before creating the database to see what the name should be.\n\nSelecting models\n~~~~~~~~~~~~~~~~\n\nBy default all the models will be synchronized to the workspace. The CLI supports a subset of the syntax used by the ``dbt`` command line to select which models should be synchronized. Models that should be synchronized can be specified via the ``--select`` flag:\n\n.. code-block:: bash\n\n    % preset-cli ... --select my_model    # sync only \"my_model\"\n    % preset-cli ... --select my_model+   # sync \"my_model\" and its children\n    % preset-cli ... --select my_model+2  # sync \"my_model\" and its children up to 2 degrees\n    % preset-cli ... --select +my_model   # sync \"my_model\" and its parents\n    % preset-cli ... --select +my_model+  # sync \"my_model\" with parents and children\n\nMultiple selectors can be passed by repeating the ``--select`` flag (note that this is slightly different from dbt, which doesn't require repeating the flag):\n\n.. code-block:: bash\n\n    % preset-cli ... --select my_model --select my_other_model\n\nThe CLI also support the intersection operator:\n\n.. code-block:: bash\n\n    % preset-cli ... --select my_model+,tag:test\n\nThe command above will synchronize ``my_model`` and its children, as long as the models have the \"test\" tag.\n\nFinally, the CLI also supports the ``--exclude`` flag in a similar way:\n\n.. code-block:: bash\n\n    % preset-cli --select my_model+ --exclude tag:test\n\nThe command above synchronizes \"my_model\" and its children, as long as the models don't have the \"test\" tag.\n\nExporting resources\n-------------------\n\nThe CLI can also be used to export all resources (databases, datasets, charts, and dashboards) from a given Preset workspace (using ``preset-cli``) or Superset instance (using ``superset-cli``). This is useful for migrating resources between workspaces, from an existing Superset installation to Preset, or even from Preset to Superset (one of the advantages of Preset is no vendor lock in!).\n\nThe run the command on a self-hosted Superset instance:\n\n.. code-block:: bash\n\n    % superset-cli https://superset.example.org/ export /path/to/directory\n\nThis will create a nice directory structure in ``/path/to/directory``, ready to be imported using the ``sync native`` command.\n\nTo export resources from a Preset workspace:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset export /path/to/directory\n\nTo import the exported resources into a Preset workspace:\n\n.. code-block:: bash\n\n    % preset-cli --workspaces=https://abcdef12.us1a.app.preset.io/ \\\n    > superset sync native /path/to/directory\n\nFinally, to import in a standalone Superset instance:\n\n.. code-block:: bash\n\n    % superset-cli https://superset.example.org/ sync native /path/to/directory\n\nNote that any existing Jinja2 template markers present will be escaped. For example, if you have a virtual dataset defined as:\n\n.. code-block:: sql\n\n    SELECT action, count(*) as times\n    FROM logs\n    WHERE\n        action in {{ filter_values('action_type')|where_in }}\n    GROUP BY action\n\nThe resulting YAML file will have the query defined as:\n\n.. code-block:: sql\n\n    SELECT action, count(*) as times\n    FROM logs\n    WHERE\n        action in {{ '{{' }} filter_values('action_type')|where_in }} '}}' }}\n    GROUP BY action\n\nSo that when processed by ``preset-cli superset sync native`` the original Jinja2 is reconstructed correctly.\n\nExporting users\n~~~~~~~~~~~~~~~\n\nThe ``preset-cli superset export-users`` command can be used to export a list of users. Currently there's no way to import this into a workspace, but work is in progress.\n\nExporting RLS rules\n~~~~~~~~~~~~~~~~~~~\n\nThe ``preset-cli superset export-rls`` command can be used to export a list of RLS rules. Currently there's no way to import this into a workspace, but work is in progress.\n\nExporting ownership\n~~~~~~~~~~~~~~~~~~~\n\nThe ``preset-cli superset export-ownership`` command generates a YAML file with information about ownership of different resources. The file maps resource UUIDs to user email address, and in the future will be used to recreate ownership on a different instance of Superset.\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/preset-io/preset-cli",
    "keywords": "",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preset-cli",
    "package_url": "https://pypi.org/project/preset-cli/",
    "platform": "any",
    "project_url": "https://pypi.org/project/preset-cli/",
    "project_urls": {
      "Documentation": "https://github.com/preset-io/preset-cli/blob/master/README.rst",
      "Homepage": "https://github.com/preset-io/preset-cli"
    },
    "release_url": "https://pypi.org/project/preset-cli/0.1.1/",
    "requires_dist": [
      "Cython (>=0.29.26)",
      "PyYAML (>=6.0)",
      "appdirs (>=1.4.4)",
      "beautifulsoup4 (>=4.10.0)",
      "click (>=8.0.3)",
      "jinja2 (>=3.0.3)",
      "marshmallow (>=3.17.0)",
      "numpy (>=1.21.5)",
      "pandas (>=1.3.5)",
      "prison (>=0.2.1)",
      "prompt-toolkit (>=3.0.24)",
      "pygments (>=2.11.2)",
      "python-graphql-client (>=0.4.3)",
      "requests (>=2.26.0)",
      "rich (>=12.3.0)",
      "sqlalchemy (>=1.4)",
      "sqlparse (>=0.4.2)",
      "tabulate (>=0.8.9)",
      "typing-extensions (>=4.0.1)",
      "yarl (>=1.7.2)",
      "importlib-metadata ; python_version < \"3.8\"",
      "setuptools ; extra == 'testing'",
      "freezegun ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-mock ; extra == 'testing'",
      "pyfakefs ; extra == 'testing'",
      "requests-mock ; extra == 'testing'",
      "codespell ; extra == 'testing'",
      "pre-commit ; extra == 'testing'",
      "pip-tools (>=6.6.0) ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "A CLI to interact with Preset (https://preset.io/) workspaces.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15084653,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a22e6d3ef4a86d5f3e42612add8c7579cad1b5b9f9a5b6fce34b3f2764851b",
          "md5": "83eaf6ec0d55c034fdf93d359cf18d88",
          "sha256": "70a0ea3866e59c2232d63d04fe0582ed968dd2832ddf5963b0b09d9a6c133e6a"
        },
        "downloads": -1,
        "filename": "preset_cli-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83eaf6ec0d55c034fdf93d359cf18d88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46021,
        "upload_time": "2022-09-10T00:29:37",
        "upload_time_iso_8601": "2022-09-10T00:29:37.603057Z",
        "url": "https://files.pythonhosted.org/packages/c6/a2/2e6d3ef4a86d5f3e42612add8c7579cad1b5b9f9a5b6fce34b3f2764851b/preset_cli-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c0c00aebfb7da172b10dcdad7301035e838b8f9057be9fb0c81d036c202e31e",
          "md5": "1e3ea2e93e12c6e599c84550b4ebabc4",
          "sha256": "78963423bc7c76ae41aec7d12eebff71700c9ec357321134db5bbec1d4838454"
        },
        "downloads": -1,
        "filename": "preset-cli-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e3ea2e93e12c6e599c84550b4ebabc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 296265,
        "upload_time": "2022-09-10T00:29:39",
        "upload_time_iso_8601": "2022-09-10T00:29:39.902536Z",
        "url": "https://files.pythonhosted.org/packages/1c/0c/00aebfb7da172b10dcdad7301035e838b8f9057be9fb0c81d036c202e31e/preset-cli-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63c65eaebc2ed2aed572c1776db8cab6f741a7526215f56dcb249420b9fcb964",
          "md5": "05d1b905eb6bce2a6922de27cead32bf",
          "sha256": "52555e3fb18a9d2bf4a7399d571a462e5809b32afccb6b061baf6736c0574383"
        },
        "downloads": -1,
        "filename": "preset_cli-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05d1b905eb6bce2a6922de27cead32bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47625,
        "upload_time": "2022-09-13T23:39:24",
        "upload_time_iso_8601": "2022-09-13T23:39:24.692052Z",
        "url": "https://files.pythonhosted.org/packages/63/c6/5eaebc2ed2aed572c1776db8cab6f741a7526215f56dcb249420b9fcb964/preset_cli-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b2754d82191cdbff410826de0877009f7e5ed76b620dcd1d5ade6de787ed87",
          "md5": "6eead03270675fdc7dfb62898b749669",
          "sha256": "6031a4111f970ac4833d3202da5f72e7546f009456396996e4197d1a8af783dd"
        },
        "downloads": -1,
        "filename": "preset-cli-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6eead03270675fdc7dfb62898b749669",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 298646,
        "upload_time": "2022-09-13T23:39:27",
        "upload_time_iso_8601": "2022-09-13T23:39:27.040381Z",
        "url": "https://files.pythonhosted.org/packages/85/b2/754d82191cdbff410826de0877009f7e5ed76b620dcd1d5ade6de787ed87/preset-cli-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63c65eaebc2ed2aed572c1776db8cab6f741a7526215f56dcb249420b9fcb964",
        "md5": "05d1b905eb6bce2a6922de27cead32bf",
        "sha256": "52555e3fb18a9d2bf4a7399d571a462e5809b32afccb6b061baf6736c0574383"
      },
      "downloads": -1,
      "filename": "preset_cli-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05d1b905eb6bce2a6922de27cead32bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 47625,
      "upload_time": "2022-09-13T23:39:24",
      "upload_time_iso_8601": "2022-09-13T23:39:24.692052Z",
      "url": "https://files.pythonhosted.org/packages/63/c6/5eaebc2ed2aed572c1776db8cab6f741a7526215f56dcb249420b9fcb964/preset_cli-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85b2754d82191cdbff410826de0877009f7e5ed76b620dcd1d5ade6de787ed87",
        "md5": "6eead03270675fdc7dfb62898b749669",
        "sha256": "6031a4111f970ac4833d3202da5f72e7546f009456396996e4197d1a8af783dd"
      },
      "downloads": -1,
      "filename": "preset-cli-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6eead03270675fdc7dfb62898b749669",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 298646,
      "upload_time": "2022-09-13T23:39:27",
      "upload_time_iso_8601": "2022-09-13T23:39:27.040381Z",
      "url": "https://files.pythonhosted.org/packages/85/b2/754d82191cdbff410826de0877009f7e5ed76b620dcd1d5ade6de787ed87/preset-cli-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}