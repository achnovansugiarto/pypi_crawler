{
  "info": {
    "author": "Prefect Technologies, Inc.",
    "author_email": "help@prefect.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Coordinate and use AI in your dataflow with `prefect-openai`\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/15331990/213825004-eedb25b3-0520-4f55-95d3-3a3fc8b235ff.png\">\n    <br>\n    <a href=\"https://pypi.python.org/pypi/prefect-openai/\" alt=\"PyPI version\">\n        <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/prefect-openai?color=0052FF&labelColor=090422\"></a>\n    <a href=\"https://github.com/PrefectHQ/prefect-openai/\" alt=\"Stars\">\n        <img src=\"https://img.shields.io/github/stars/PrefectHQ/prefect-openai?color=0052FF&labelColor=090422\" /></a>\n    <a href=\"https://pepy.tech/badge/prefect-openai/\" alt=\"Downloads\">\n        <img src=\"https://img.shields.io/pypi/dm/prefect-openai?color=0052FF&labelColor=090422\" /></a>\n    <a href=\"https://github.com/PrefectHQ/prefect-openai/pulse\" alt=\"Activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/PrefectHQ/prefect-openai?color=0052FF&labelColor=090422\" /></a>\n    <br>\n    <a href=\"https://prefect-community.slack.com\" alt=\"Slack\">\n        <img src=\"https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&labelColor=090422&logo=slack\" /></a>\n    <a href=\"https://discourse.prefect.io/\" alt=\"Discourse\">\n        <img src=\"https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&labelColor=090422&logo=discourse\" /></a>\n</p>\n\nVisit the full docs [here](https://PrefectHQ.github.io/prefect-openai) to see additional examples and the API reference.\n\nThe `prefect-openai` collection makes it easy to leverage the capabilities of AI in your flows. Check out the examples below to get started!\n\n## Summarize tracebacks with GPT3\n\nTracebacks--it's quintessential in programming. They are a record of every line of code leading to the error, to help us, humans, determine what's wrong with the program and find a solution.\n\nHowever, tracebacks can be extraordinarily complex, especially for someone new to the codebase.\n\nTo streamline this process, we could add AI to the mix, to offer a more human-readable summary of the issue, so it's easier for the developer to understand what went wrong and implement a fix.\n\nAfter installing `prefect-openai` and [saving an OpenAI key](#saving-an-openai-key), you can easily incorporate OpenAI within your flows to help you achieve the aforementioned benefits!\n\n```python\nfrom prefect import flow, get_run_logger\nfrom prefect_openai import OpenAICredentials, CompletionModel\n\n\n@flow\ndef summarize_traceback(traceback: str) -> str:\n    logger = get_run_logger()\n    openai_credentials = OpenAICredentials.load(\"openai-credentials\")\n    completion_model = CompletionModel(\n        openai_credentials=openai_credentials,\n        model=\"text-curie-001\",\n        max_tokens=512,\n    )\n    prompt = f\"Summarize cause of error from this traceback: ```{traceback}```\"\n    summary = completion_model.submit_prompt(traceback).choices[0][\"text\"]\n    logger.info(f\"Summary of the traceback: {summary}\")\n    return summary\n\n\nif __name__ == \"__main__\":\n    traceback = \"\"\"\n        ParameterBindError: Error binding parameters for function 'summarize_traceback': missing a required argument: 'traceback'.\n        Function 'summarize_traceback' has signature 'traceback: str) -> str' but received args: () and kwargs: {}.\n    \"\"\"\n    summarize_traceback(traceback)\n```\n\n```bash hl_lines=\"4\"\n...\n12:29:32.085 | INFO    | Flow run 'analytic-starling' - Finished text completion using the 'text-curie-001' model with 113 tokens, creating 1 choice(s).\n12:29:32.089 | INFO    | Flow run 'analytic-starling' - Summary of the traceback:     \nThis error is caused by the missing argument traceback. The function expects a traceback object as its first argument, but received nothing.\n...\n```\nNotice how the original traceback was quite long and confusing.\n\nOn the flip side, the Curie GPT3 model was able to summarize the issue eloquently!\n\n!!! info \"Built-in decorator\"\n\n    No need to build this yourself, `prefect-openai` features a\n    [built-in decorator](completion/#prefect_openai.completion.interpret_exception)\n    to help you automatically catch and interpret exceptions in flows, tasks, and even\n    vanilla Python functions.\n\n    ```python\n    import httpx\n    from prefect_openai.completion import interpret_exception\n\n    @interpret_exception(\"COMPLETION_MODEL_BLOCK_NAME_PLACEHOLDER\")\n    def example_func():\n        resp = httpx.get(\"https://httpbin.org/status/403\")\n        resp.raise_for_status()\n\n    example_func()\n    ```\n\n## Create a story around a flow run name with GPT3 and DALL-E\n\nHave you marveled at all the AI-generated images and wondered how others did it?\n\nAfter installing `prefect-openai` and [saving an OpenAI key](#saving-an-openai-key), you, too, can create AI-generated art.\n\nHere's an example on how to create a story and an image based off a flow run name.\n\n```python\nfrom prefect import flow, task, get_run_logger\nfrom prefect.context import get_run_context\nfrom prefect_openai import OpenAICredentials, ImageModel, CompletionModel\n\n\n@task\ndef create_story_from_name(credentials: OpenAICredentials, flow_run_name: str) -> str:\n    \"\"\"\n    Create a fun story about the flow run name.\n    \"\"\"\n    text_model = CompletionModel(\n        openai_credentials=credentials, model=\"text-curie-001\", max_tokens=288\n    )\n    text_prompt = f\"Provide a fun story about a {flow_run_name}\"\n    story = text_model.submit_prompt(text_prompt).choices[0].text.strip()\n    return story\n\n\n@task\ndef create_image_from_story(credentials: OpenAICredentials, story: str) -> str:\n    \"\"\"\n    Create an image associated with the story.\n    \"\"\"\n    image_model = ImageModel(openai_credentials=credentials, size=\"512x512\")\n    image_result = image_model.submit_prompt(story)\n    image_url = image_result.data[0][\"url\"]\n    return image_url\n\n\n@flow\ndef create_story_and_image_from_flow_run_name() -> str:\n    \"\"\"\n    Get the flow run name and create a story and image associated with it.\n    \"\"\"\n    context = get_run_context()\n    flow_run_name = context.flow_run.name.replace(\"-\", \" \")\n\n    credentials = OpenAICredentials.load(\"openai-credentials\")\n    story = create_story_from_name(credentials=credentials, flow_run_name=flow_run_name)\n    image_url = create_image_from_story(credentials=credentials, story=story)\n\n    story_and_image = (\n        f\"The story about a {flow_run_name}: '{story}' \"\n        f\"And its image: {image_url}\"\n    )\n    print(story_and_image)\n    return story_and_image\n\n\ncreate_story_and_image_from_flow_run_name()\n```\n\nVisit [Flow Run Name Art](flow_run_name_art) to see some example output!\n\n## Resources\n\nFor more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!\n\n### Installation\n\nInstall `prefect-openai` with `pip`:\n\n```bash\npip install prefect-openai\n```\n\nRequires an installation of Python 3.7+.\n\nWe recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.\n\nThese tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).\n\n### Saving an OpenAI key\n\nIt's easy to set up an `OpenAICredentials` block!\n\n1. Head over to https://beta.openai.com/account/api-keys\n2. Login to your OpenAI account\n3. Click \"+ Create new secret key\"\n4. Copy the generated API key\n5. Create a short script, replacing the placeholders (or do so in the UI)\n\n```python\nfrom prefect_openai import OpenAICredentials`\nOpenAICredentials(api_key=\"API_KEY_PLACEHOLDER\").save(\"BLOCK_NAME_PLACEHOLDER\")\n```\n\nCongrats! You can now easily load the saved block, which holds your OpenAI API key:\n\n```python\nfrom prefect_openai import OpenAICredentials\nOpenAICredentials.load(\"BLOCK_NAME_PLACEHOLDER\")\n```\n\n### Feedback\n\nIf you encounter any bugs while using `prefect-openai`, feel free to open an issue in the [prefect-openai](https://github.com/PrefectHQ/prefect-openai) repository.\n\nIf you have any questions or issues while using `prefect-openai`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack).\n\nFeel free to star or watch [`prefect-openai`](https://github.com/PrefectHQ/prefect-openai) for updates too!\n\n### Contributing\n\nIf you'd like to help contribute to fix an issue or add a feature to `prefect-openai`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n\nHere are the steps:\n\n1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)\n2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)\n3. Install the repository and its dependencies:\n```\npip install -e \".[dev]\"\n```\n4. Make desired changes\n5. Add tests\n6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-openai/blob/main/CHANGELOG.md)\n7. Install `pre-commit` to perform quality checks prior to commit:\n```\npre-commit install\n```\n8. `git commit`, `git push`, and create a pull request\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PrefectHQ/prefect-openai",
    "keywords": "prefect",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prefect-openai",
    "package_url": "https://pypi.org/project/prefect-openai/",
    "platform": null,
    "project_url": "https://pypi.org/project/prefect-openai/",
    "project_urls": {
      "Homepage": "https://github.com/PrefectHQ/prefect-openai"
    },
    "release_url": "https://pypi.org/project/prefect-openai/0.1.1/",
    "requires_dist": [
      "prefect (>=2.0.0)",
      "openai (>=0.26.0)",
      "pytest ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "mkdocs ; extra == 'dev'",
      "mkdocs-material ; extra == 'dev'",
      "mkdocstrings[python] ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "pytest-asyncio ; extra == 'dev'",
      "mkdocs-gen-files ; extra == 'dev'",
      "interrogate ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "pillow ; extra == 'dev'",
      "respx ; extra == 'dev'",
      "mock ; (python_version < \"3.8\") and extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Prefect integrations for working with OpenAI.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16566903,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83c97a88b4ec78e9a8911d0b682c2beaeb2ed3c829190e523328aeb38e3b3155",
          "md5": "63653929d315fa39299cbf6c9aa117a3",
          "sha256": "c17ad2cc125443eb33baef5cb7ca5ec17b51eb4a83fcdcc41ca9177206c45d45"
        },
        "downloads": -1,
        "filename": "prefect_openai-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63653929d315fa39299cbf6c9aa117a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12826,
        "upload_time": "2023-01-18T16:12:53",
        "upload_time_iso_8601": "2023-01-18T16:12:53.677703Z",
        "url": "https://files.pythonhosted.org/packages/83/c9/7a88b4ec78e9a8911d0b682c2beaeb2ed3c829190e523328aeb38e3b3155/prefect_openai-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91b5d0bf10ccce5c2200d2ba8cfdc293fa75ee9008891ca1c0d3c54ffbee21be",
          "md5": "b8ca1af4e526c91894d13f45e1d90d31",
          "sha256": "c1e9be33b0d0a0384df82ebbf80615be0a36f109c83b7d86dca2349d32eafad9"
        },
        "downloads": -1,
        "filename": "prefect-openai-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8ca1af4e526c91894d13f45e1d90d31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27841,
        "upload_time": "2023-01-18T16:12:55",
        "upload_time_iso_8601": "2023-01-18T16:12:55.384387Z",
        "url": "https://files.pythonhosted.org/packages/91/b5/d0bf10ccce5c2200d2ba8cfdc293fa75ee9008891ca1c0d3c54ffbee21be/prefect-openai-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9b8b767763cf375dd9aaa666925436cb2353f0997f93a5b857e1ac529fab92f",
          "md5": "e22f450e381a2945bbec219d078753d2",
          "sha256": "485f2144f494409d822815121c1783856869edb62216c549c57c02e10069f32a"
        },
        "downloads": -1,
        "filename": "prefect_openai-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e22f450e381a2945bbec219d078753d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16389,
        "upload_time": "2023-01-25T20:56:40",
        "upload_time_iso_8601": "2023-01-25T20:56:40.206192Z",
        "url": "https://files.pythonhosted.org/packages/b9/b8/b767763cf375dd9aaa666925436cb2353f0997f93a5b857e1ac529fab92f/prefect_openai-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc5d5fab74bba6e010c9706f055a634469a8a4cee0dd747fe4bd9abbf21e0031",
          "md5": "fda3023fd70852d0eb1d11fac600ef7e",
          "sha256": "9911867f6224768961639d7642a3290d1adf35a34aaf12765933efddd9c9e8af"
        },
        "downloads": -1,
        "filename": "prefect-openai-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fda3023fd70852d0eb1d11fac600ef7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34083,
        "upload_time": "2023-01-25T20:56:41",
        "upload_time_iso_8601": "2023-01-25T20:56:41.986707Z",
        "url": "https://files.pythonhosted.org/packages/cc/5d/5fab74bba6e010c9706f055a634469a8a4cee0dd747fe4bd9abbf21e0031/prefect-openai-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9b8b767763cf375dd9aaa666925436cb2353f0997f93a5b857e1ac529fab92f",
        "md5": "e22f450e381a2945bbec219d078753d2",
        "sha256": "485f2144f494409d822815121c1783856869edb62216c549c57c02e10069f32a"
      },
      "downloads": -1,
      "filename": "prefect_openai-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e22f450e381a2945bbec219d078753d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16389,
      "upload_time": "2023-01-25T20:56:40",
      "upload_time_iso_8601": "2023-01-25T20:56:40.206192Z",
      "url": "https://files.pythonhosted.org/packages/b9/b8/b767763cf375dd9aaa666925436cb2353f0997f93a5b857e1ac529fab92f/prefect_openai-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc5d5fab74bba6e010c9706f055a634469a8a4cee0dd747fe4bd9abbf21e0031",
        "md5": "fda3023fd70852d0eb1d11fac600ef7e",
        "sha256": "9911867f6224768961639d7642a3290d1adf35a34aaf12765933efddd9c9e8af"
      },
      "downloads": -1,
      "filename": "prefect-openai-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fda3023fd70852d0eb1d11fac600ef7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 34083,
      "upload_time": "2023-01-25T20:56:41",
      "upload_time_iso_8601": "2023-01-25T20:56:41.986707Z",
      "url": "https://files.pythonhosted.org/packages/cc/5d/5fab74bba6e010c9706f055a634469a8a4cee0dd747fe4bd9abbf21e0031/prefect-openai-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}