{
  "info": {
    "author": "hx",
    "author_email": "huangsayn@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# 说明文档\n`iris.py`是鸢尾花预测模型  \n`cali_house.py`是加州房价预测模型  \n\n## 鸢尾花预测模型\n### 1、数据处理\n数据集包含150个数据集(其中120个是训练集`iris_training.csv`，30个是测试集`iris_test.csv`)，分为3类（Setosa，Versicolour，Virginica），每类50个数据，每个数据包含4个属性：花萼长度，花萼宽度，花瓣长度，花瓣宽度。\n\n    120,4,setosa,versicolor,virginica  \n    6.4,2.8,5.6,2.2,2  \n    5.0,2.3,3.3,1.0,1  \n    4.9,2.5,4.5,1.7,2  \n     .   .   .   .  . \n     .   .   .   .  . \n     .   .   .   .  . \n    4.4,2.9,1.4,0.2,0\n    4.8,3.0,1.4,0.1,0\n    5.5,2.4,3.7,1.0,1\n    \n由于标签是鸢尾花的类别，因此将标签转换成独热编码[1, 0, 0], [0, 1, 0], [0, 0, 1]  \n\n### 2、建立模型\n采用tensorflow建立一个简单的线性模型：\n\n    W = tf.Variable(tf.zeros([4, 3]))\n    b = tf.Variable(tf.zeros([3]) + 0.01)\n    output = tf.nn.softmax(tf.matmul(xs, W) + b)\n    \n输入通过一层网络后直接接入一个`softmax`函数后输出  \n损失函数为交叉熵：\n\n    loss = -tf.reduce_sum(ys * tf.log(output + 1e-10))\n    \n采用梯度下降法最小化`loss`，学习率设置为`0.001`：\n\n    train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\n    \n### 3、模型训练\n模型建立好后，通过`tf.global_variables_initializer()`对变量进行初始化  \n模型总共训练1000次，每100次输出`loss`查看训练过程\n\n    for i in range(1000):\n        sess.run(train_step, feed_dict={xs: x_train, ys: y_train})\n    if i % 100 == 0:\n        print('Loss（train set）:%.2f' % (sess.run(loss, feed_dict={xs: x_train, ys: y_train})))\n        \n\n        \n### 4、鸢尾花种类预测\n模型训练完毕之后，即可将测试集输入模型进行预测。由于预测结果是独热编码，所以准确率计算使用`tf.argmax()`函数来实现。返回值是预测结果中最大值的索引，由于独热编码的性质，返回的索引值即为类别。\n然后使用`tf.equal()`判断是否与实际类别一致（返回值为bool型）。所以需要通过一个`tf.cast()`函数来转换为[0, 1]值，最后取平均值求出准确率。\n\n    access = tf.equal(tf.argmax(output, 1), tf.argmax(ys, 1))\n    accuracy = tf.reduce_mean(tf.cast(access, \"float\"))\n    \n### 5、结果\n最后我们在训练集上以及测试集都得到一个较满意的结果\n\n    --------------------开始训练模型----------------\n    Loss（train set）:125.14\n    Loss（train set）:67.55\n    Loss（train set）:30.55\n    Loss（train set）:23.07\n    Loss（train set）:20.45\n    Loss（train set）:18.60\n    Loss（train set）:17.22\n    Loss（train set）:16.14\n    Loss（train set）:15.28\n    Loss（train set）:14.57\n    --------------------训练结束--------------------\n    \n    \n    ********************性能评价********************\n    训练集准确率： 0.975\n    测试集准确率： 0.96666664\n\n\n## 加州房价预测模型\n### 1、数据预处理\n加州房价的数据有20640个样本，特征值有9个，median_house_value作为输出结果。首先使用`describe()`来初步观察数据。\n\n    import pandas as pd\n\n    features = pd.read_csv('D:/tensorflow_exercise/data/housing.csv')\n    print(features.describe())\n\n    >>>\n             total_bedrooms    population    households  median_income  \n    count        20433           20640         20640        20640  \n    mean       537.870553   1425.476744    499.539680       3.870671   \n    std        421.385070   1132.462122    382.329753       1.899822   \n    min          1.000000      3.000000      1.000000       0.499900   \n    \n以上只展示了部分统计数据，不过可以看到`total_bedrooms`有一部分缺省值，因此我们删去有缺省值的数据。考虑到可能会有重复的数据，所以还需要去掉重复的样本。\n\n    nan = features.dropna(subset=['total_bedrooms'], axis=0)  # 去除缺省值\n    repeat = nan.drop_duplicates()  # 去掉重复值样本\n\n### 2、特征工程\n在`housing.csv`里面，前面两个特征是经度(longitude)和纬度(latitude)，属于数值型特征。离散的经度纬度对于房价预测似乎没什么重要信息，因此我们对经度纬度进行分箱并合并为独热编码。\n我们可以看看之前的统计信息：\n\n              longitude      latitude  \n    count        20640        20640 \n    mean    -119.569704     35.631861\n    std        2.003532      2.135952\n    min     -124.350000     32.540000\n    max     -114.310000     41.950000  \n    \n可以知道经度的范围大概在(-124.35, -114.31)之间，纬度的范围大概在(32.54, 41.95)之间。我们以1°为区间分别对经度和纬度进行分箱。\n    \n    pd.cut(longitude, range(-125, -112), right=False)\n    pd.cut(latitude, range(31, 43), right=False)\n然而单独考虑经度或是纬度都没有太大的意义，因此我们将这两个特征交叉组合成一个特征，这个特征仍采用独热编码，它的长度为132。\n\n在这些特征中，`ocean_proximity`是字符型特征：NEAR BAY, NEAR OCEAN, ISLAND, INLAND, <1H OCEAN。因此通过`get_dummies()`将其转换为独热编码。\n\n再者，对于`total_rooms`，`population`我们可以用人均房间数`rooms_per_person`来表达他们之间的关系，通过简单的运算即可求出：\n\n    def rooms_per_person(data):  # 合成新特征：人均房间数 = 总房间数 / 总人数\n        rooms_per_person = data.apply(lambda x: x['total_rooms'] / x['population'], axis=1)  # 计算特征值\n        rooms_per_person[np.abs(rooms_per_person) > 5] = 5  # 对异常值进行截断处理\n        rooms_per_person = rooms_per_person.rename('rooms_per_person')  # 特征名称\n        return rooms_per_person\n\n计算新特征之后我们重新进行统计，发现有些特征值不合常理，因此对于新特征做截断处理，把人均房间数限制在(0, 5)之间。\n\n\n### 3、特征值归一化\n再来观察数据情况：\n\n              households    median_income  \n    count       20640             20640 \n    mean      499.539680       3.870671   \n    std       382.329753       1.899822   \n    min         1.000000       0.499900   \n    25%       280.000000       2.563400   \n    50%       409.000000       3.534800   \n    75%       605.000000       4.743250   \n    max       6082.000000      15.000100 \n    \n可以看到对于不同特征，他们的值可能差别会非常大，如果直接建立模型，可能造成模型在数值大的特征上投入更多精力，会造成结果偏拟合。  \n因此需要对特征进行归一化：\n\n    normalized = （value - mean） / std\n    \n### 4、建立模型\n同样采用线性层：\n\n    W = tf.Variable(tf.zeros([142, 1]))\n    b = tf.Variable(tf.zeros([1]) + 0.01)\n    output = tf.matmul(xs, W) + b\n    \n损失函数用平方误差：\n\n    loss = tf.reduce_mean(tf.square(ys - output))\n   \n梯度下降法(learning rate = 0.003)最小化损失函数：\n\n     train_step = tf.train.GradientDescentOptimizer(0.003).minimize(loss)\n     \n### 5、训练模型\n进行特征工程之后，得到一个更为精炼的数据集，将数据集随机划分为训练集和测试集：\n\n    from sklearn.model_selection import train_test_split\n    \n    data = np.array(pd.read_csv('D:/tensorflow_exercise/data/housing_features.csv'))\n    x_train, x_test, y_train, y_test = train_test_split(data[:, :-1], data[:, -1], test_size=0.25, random_state=2018)\n    \n划分比例为3：1，得到的训练集有15325个样本，测试集有5108个样本。  \n训练次数20000次，每1000次输出误差：\n\n        for i in range(20000):\n            sess.run(train_step, feed_dict={xs: x_train, ys: y_train})\n            if i % 1000 == 0:\n                print('Loss（train set）:%.2f' % (sess.run(loss, feed_dict={xs: x_train, ys: y_train})))\n\n### 6、房价预测\n最终的训练结果：`Loss（train set）:0.32`\n将训练集输入模型，得到预测结果，通过真实-预测关系图来反应模型的性能，同时得到`Loss（test set）:0.31`\n![result](house_value_prediction.PNG)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/manage/projects/",
    "keywords": "test python package",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tensorflow-exercise-hx",
    "package_url": "https://pypi.org/project/tensorflow-exercise-hx/",
    "platform": "",
    "project_url": "https://pypi.org/project/tensorflow-exercise-hx/",
    "project_urls": {
      "Homepage": "https://pypi.org/manage/projects/"
    },
    "release_url": "https://pypi.org/project/tensorflow-exercise-hx/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "tensorflow练习：鸢尾花种类预测，加州房价预测",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4233624,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "048e6457a54e1ff771c066827629c477591a743795ebc7e3524e68279e1e03dc",
          "md5": "d8728aac188e152605c93b108d9e03ed",
          "sha256": "7c50b25464c0006c94f573a68007e5747b61f0f110d98380d336fcc0ba3f03ae"
        },
        "downloads": -1,
        "filename": "tensorflow-exercise-hx-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d8728aac188e152605c93b108d9e03ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 408077,
        "upload_time": "2018-09-03T08:14:56",
        "upload_time_iso_8601": "2018-09-03T08:14:56.997726Z",
        "url": "https://files.pythonhosted.org/packages/04/8e/6457a54e1ff771c066827629c477591a743795ebc7e3524e68279e1e03dc/tensorflow-exercise-hx-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "048e6457a54e1ff771c066827629c477591a743795ebc7e3524e68279e1e03dc",
        "md5": "d8728aac188e152605c93b108d9e03ed",
        "sha256": "7c50b25464c0006c94f573a68007e5747b61f0f110d98380d336fcc0ba3f03ae"
      },
      "downloads": -1,
      "filename": "tensorflow-exercise-hx-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d8728aac188e152605c93b108d9e03ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 408077,
      "upload_time": "2018-09-03T08:14:56",
      "upload_time_iso_8601": "2018-09-03T08:14:56.997726Z",
      "url": "https://files.pythonhosted.org/packages/04/8e/6457a54e1ff771c066827629c477591a743795ebc7e3524e68279e1e03dc/tensorflow-exercise-hx-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}