{
  "info": {
    "author": "Anna Sidwell",
    "author_email": "anna@takkaria.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# `plucker`\n\n[![Build Status](https://github.com/takkaria/plucker/workflows/test/badge.svg?branch=master&event=push)](https://github.com/takkaria/plucker/actions?query=workflow%3Atest)\n[![codecov](https://codecov.io/gh/takkaria/plucker/branch/master/graph/badge.svg)](https://codecov.io/gh/takkaria/plucker)\n[![Python Version](https://img.shields.io/pypi/pyversions/plucker.svg)](https://pypi.org/project/plucker/)\n\nValidate and extract JSON-sourced data into type-safe dataclasses\n\n\n## wut\n\n* Tired of relying on vendor-provided, untyped Python libraries to interface with external APIs?\n* Want to just make a few simple HTTP requests without the weight of extra dependencies?\n* Do you only use a small subset of the data you get from external sources, picking out five fields when you are given thirty?\n* Are you more than slightly worried that the API might change under you and you wouldn't know?\n* Want to avoid just reaching into dictionaries to get the data you want?\n* Do you want to parse the JSON you get into something type-safe so that mypy will complain when you do wrong things?\n* Is writing fakes a bit too heavyweight for the APIs you're calling?  Would producing an error on unexpected input work OK for now?\n\nEnter `plucker`.\n\n`plucker` is designed to validate, map and reduce regularly structured data into `dataclass`es.  That data would typically be JSON from APIs but could be anything that mostly consists of Python dicts and lists when parsed.\n\n`plucker` will either give you type-verified data, or it will fail with helpful error messages:\n\n```\nData not in expected format; expected fred to be 'list' but it was 'dict':\n.fred[].v\n ^^^^\n```\n\nJust pick the data you want using `jq`-style paths, map it so that it's the right type if you need to, and you have well-typed validated data to feed into the rest of your system.\n\n\n## Installation (soon...)\n\n```bash\npip install plucker\n```\n\n\n## Example\n\n\n\n```python\nfrom typing import List\nfrom dataclasses import dataclass\nfrom enum import Enum, auto\nfrom datetime import date\n\nfrom plucker import pluck, Path\n\n\nclass Status(Enum):\n    \"\"\"A cintact's status.\"\"\"\n    CURRENT = auto()\n    EXPIRED = auto()\n\n\n@dataclass\nclass Contact:\n    \"\"\"A contact record.\"\"\"\n    name: str\n    email: str\n\n\n@dataclass\nclass Struct:\n    \"\"\"The typed dataclass we want our data collected into.\"\"\"\n    date: date\n    id: int\n    state: Status\n    affected_records: List[int]\n    contacts: List[Contact]\n\n\nTO_STATUS = {\"CUR\": Status.CURRENT, \"EXP\": Status.EXPIRED}\n\ninput_ = {\n    \"date\": \"2021-01-01\",\n    \"id\": \"1242\",\n    \"payload\": {\n        \"from\": \"CURRENT\",\n        \"who\": [\n            {\"name\": \"DM\", \"id\": 1, \"email\": \"dangermouse@example.com\"},\n            {\"name\": \"Stiletto\", \"id\": 23, \"email\": \"baroni@example.com\"},\n        ]\n    }\n}\n\nplucked = pluck(\n    input_,\n    Struct,\n    date=Path(\".date\"),\n    id=Path(\".id\").map(int),\n    state=Path(\".payload.from\").map(TO_STATUS),\n    affected_records=Path(\".payload.who[].id\"),\n    people=Path(\".payload.who[]\").into(\n        Contact,\n        name=Path(\".name\"),\n        email=Path(\".email\"),\n    ),\n)\n\nexpected = Struct(\n    date=date(2021, 1, 1),\n    id=1242,\n    state=Status.CURRENT,\n    affected_records=[1, 23],\n    contacts=[\n        Contact(\"DM\", \"dangermouse@example.com\"),\n        Contact(\"Stiletto\", \"baroni@example.com\")\n    ]\n)\n\nassert plucked == expected\n# ^ it's True\n```\n\n\n## Prior art\n\n1. dataclasses_json -> require the same structure between JSON and serialization, which means you have to specify an intermediate structure\n2. DRF serializers -> heavyweight and not type safe, destructure into dictionaries\n3. Elm's JSON decoders -> this design isn't really based on anything in there but ever since using them I wanted similar functionality in Python\n4. `jq`, an amazing commandline tool for querying JSON data\n5. [Parse, don't validate](https://lexi-lambda.github.io/tags/functional-programming.html)\n6. Elm's error messages\n\n\n## License\n\n[MIT](https://github.com/takkaria/plucker/blob/master/LICENSE)\n\n\n## Credits\n\nA bunch of the tooling was taken from [`wemake-python-package`](https://github.com/wemake-services/wemake-python-package) but then heavily modified.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/takkaria/plucker",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plucker",
    "package_url": "https://pypi.org/project/plucker/",
    "platform": "",
    "project_url": "https://pypi.org/project/plucker/",
    "project_urls": {
      "Homepage": "https://github.com/takkaria/plucker",
      "Repository": "https://github.com/takkaria/plucker"
    },
    "release_url": "https://pypi.org/project/plucker/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Validate and extract JSON-sourced data into type-safe dataclasses",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9907800,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2c1f9c3085c7b5d12db0c66a8c3cff298178d1defa6349519c9d18e42fba8de",
          "md5": "f4c4bb8b93645bf901c703fab242cb6f",
          "sha256": "3272ac2e6601df8519c73261b8bb05eb11c9bc29e6f17c840743e1c3b74daf70"
        },
        "downloads": -1,
        "filename": "plucker-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4c4bb8b93645bf901c703fab242cb6f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9411,
        "upload_time": "2021-03-28T21:55:19",
        "upload_time_iso_8601": "2021-03-28T21:55:19.542608Z",
        "url": "https://files.pythonhosted.org/packages/c2/c1/f9c3085c7b5d12db0c66a8c3cff298178d1defa6349519c9d18e42fba8de/plucker-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4c06a00dff95acd59fcbb57350423984ccf969c48935aaf0f376bf0e178c92",
          "md5": "8ccda4effb1e8357e1f030b0ed1f05e8",
          "sha256": "5064cf08a333bf637706117516101f50819f410aa64d50856811446744330071"
        },
        "downloads": -1,
        "filename": "plucker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ccda4effb1e8357e1f030b0ed1f05e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10154,
        "upload_time": "2021-03-28T21:55:20",
        "upload_time_iso_8601": "2021-03-28T21:55:20.840302Z",
        "url": "https://files.pythonhosted.org/packages/3b/4c/06a00dff95acd59fcbb57350423984ccf969c48935aaf0f376bf0e178c92/plucker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2c1f9c3085c7b5d12db0c66a8c3cff298178d1defa6349519c9d18e42fba8de",
        "md5": "f4c4bb8b93645bf901c703fab242cb6f",
        "sha256": "3272ac2e6601df8519c73261b8bb05eb11c9bc29e6f17c840743e1c3b74daf70"
      },
      "downloads": -1,
      "filename": "plucker-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4c4bb8b93645bf901c703fab242cb6f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 9411,
      "upload_time": "2021-03-28T21:55:19",
      "upload_time_iso_8601": "2021-03-28T21:55:19.542608Z",
      "url": "https://files.pythonhosted.org/packages/c2/c1/f9c3085c7b5d12db0c66a8c3cff298178d1defa6349519c9d18e42fba8de/plucker-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b4c06a00dff95acd59fcbb57350423984ccf969c48935aaf0f376bf0e178c92",
        "md5": "8ccda4effb1e8357e1f030b0ed1f05e8",
        "sha256": "5064cf08a333bf637706117516101f50819f410aa64d50856811446744330071"
      },
      "downloads": -1,
      "filename": "plucker-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8ccda4effb1e8357e1f030b0ed1f05e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 10154,
      "upload_time": "2021-03-28T21:55:20",
      "upload_time_iso_8601": "2021-03-28T21:55:20.840302Z",
      "url": "https://files.pythonhosted.org/packages/3b/4c/06a00dff95acd59fcbb57350423984ccf969c48935aaf0f376bf0e178c92/plucker-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}