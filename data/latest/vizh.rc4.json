{
  "info": {
    "author": "Sy Brand",
    "author_email": "tartanllama@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# vizh\r\n\r\nAn esoteric visual language that takes image files as input based on a multi-tape turing machine, designed for compatibility with C.\r\n\r\n## Overview\r\n\r\nHere is an implementation of `memcpy`:\r\n\r\n![Implementation of memcpy in vizh](images/memcopy.png)\r\n\r\nYes, you literally pass an image file to the compiler.\r\n\r\nThe \"parser\" is based on computer vision and the backend produces C code.\r\n\r\nHere's how the parser understands the program (produced if you pass `--debug-parser` when compiling):\r\n\r\n![Image decorated with the instructions that are recognised](images/parser_output.png)\r\n\r\nHere's a C program which calls into the function:\r\n\r\n```c\r\n#include <stdio.h>\r\n// Supplied by linking with the vizh object file\r\nvoid memcopy(uint8_t*,uint8_t*,uint8_t*);\r\n\r\nint main() {\r\n    uint8_t str[] = \"Hello!\";\r\n    uint8_t size = sizeof(str);\r\n    uint8_t to[sizeof(str)];\r\n\r\n    memcopy(&size, str, to);\r\n    puts(to);\r\n}\r\n```\r\n\r\nWe can compile this into an executable in a single command:\r\n\r\n```console\r\n$ vizh memcopy.png main_memcopy.c -o memcopy\r\n```\r\n\r\nThen run it:\r\n\r\n```console\r\n$ ./memcopy\r\nHello!\r\n```\r\n\r\n### Errors\r\n\r\nBut what if you make an error, like this?\r\n\r\n![Version of the memcopy program with some instructions changed](images/bad_memcopy.png)\r\n\r\nWell you get the best compiler errors you'll ever see:\r\n\r\n![The errors highlighted and explained](images/compiler_error.png)\r\n\r\n## Implementation\r\n\r\nThe provided implementation is called `vizh` and compiles to C and can link executables.\r\n\r\n### Installation\r\n\r\nYou can install `vizh` directly from [PyPi](https://pypi.org/project/vizh/):\r\n\r\n```console\r\n$ pip install vizh\r\n```\r\n\r\n### Dependencies\r\n\r\n`vizh` depends on [OpenCV](https://opencv.org/), [cffi](https://pypi.org/project/cffi/), and [Tesseract OCR](https://tesseract-ocr.github.io/tessdoc/Home.html).\r\n\r\nYou can install OpenCV and cffi with `pip`:\r\n\r\n```console\r\n$ pip install opencv-python cffi\r\n```\r\n\r\nYou'll have to install Tesseract OCR separately. [See their documentation](https://tesseract-ocr.github.io/tessdoc/#tesseract-user-manual) for instructions.\r\n\r\n### Usage\r\n\r\n```\r\nUsage: vizh [OPTIONS] [INPUTS]...\r\n\r\nOptions:\r\n  --version               Show the version and exit.\r\n  -c, --compile-only      Only compile, don't link.\r\n  -o, --output-file PATH  Output file for executables or vizh object files.\r\n  -q, --quiet             Suppress output.\r\n  --debug-parser          Display how the parser understands your source file.\r\n  --help                  Show this message and exit.\r\n  ```\r\n\r\nThe compiler can take any combination of image files, C sources files, and object files.\r\n\r\nYou may need to set the `TESSDATA_PREFIX` environment variable to the folder containing Tesseract data. If you're on Linux this is likely `/usr/share/tesseract-ocr/<version>/tessdata`.\r\n\r\n## Language\r\n\r\n### Abstract Machine\r\n\r\nThe vizh abstract machine consists of:\r\n\r\n- Some number of *tapes* which are contiguous groups of 8-bit unsigned integers\r\n- A read/write head with storage for a single 8-bit unsigned integer\r\n\r\nThe initial state of the abstract machine is:\r\n\r\n- A single tape of size 4096 is allocated with all cells initialised to 0\r\n- The read/write head is initialised to the left-most cell of this tape\r\n\r\nSee [instructions](#instructions) for the valid operations on the abstract machine.\r\n\r\n### Program\r\n\r\nA vizh program consists of a number of functions, each in its own image file. (What image types are allowed? Ideally at least png and jpg)\r\n\r\nThe entry point to a vizh program is a function called `main`. (Note that the `main` function gets mangled as `vizh_main`. For all other functions the symbol name is the same as the vizh name).\r\n\r\n### Functions\r\n\r\nA vizh function is an image file containing:\r\n\r\n- The name of the function at the top left of the image\r\n- The number of arguments (tapes) it takes at the top right of the image\r\n- A sequnce of instructions in a horizontal lines\r\n\r\nFunction names are alphanumeric: `[a-zA-Z][a-zA-Z0-9]*`.\r\n\r\nThe tapes available to a vizh function consist of its tape arguments. On entry to the function the r/w head is initialised to the start of the first tape argument, if any.\r\n\r\nA function returns when control flow reaches the end of its instructions.\r\n\r\nAny tapes allocated by a function are automatically deallocated when the function exits.\r\n\r\n#### Function Calls\r\n\r\nWhen you call a function subsequent pointer arguments are taken from the currently active tape onwards.\r\n\r\nFor example, given the following state of the abstract machine where `^` is the last position of the r/w head on that tape and `$` is the active tape:\r\n\r\n```\r\n t1 01234\r\n     ^\r\n$t2 99999\r\n    ^\r\n t3 00000\r\n    ^\r\n```\r\n\r\nThen a call to a function that takes two tapes would supply the arguments `t2, t3`.\r\n\r\n### Instructions\r\n\r\nThe valid instructions in vizh and their encodings are:\r\n\r\n- Left arrow: move the r/w head left\r\n- Right arrow: move the r/w head right\r\n- Up arrow: move the r/w head to the tape above the current one\r\n- Down arrow: move the r/w head to the tape below the current one\r\n- Function name in a circle: call the given function **not yet implemented**\r\n- +: increment the value pointed to by the r/w head by `1`\r\n- -: decrement the value pointed to by the r/w head by `1`\r\n- Equilateral triangle with the point at the top: read the cell pointed to by the r/w head into the r/w head storage\r\n- Equilateral triangle with the point at the bottom: write the value stored in r/w head storage into the cell pointed to by the r/w head\r\n- [&lt;instructions&gt;]: loop over the instructions between the brackets until the value pointed to by the r/w head at the start of the loop is `0` \r\n\r\nWhen you move the r/w head up or down, the position it was last at for the previous tape is saved. E.g. given this state of the abstract where `^` is the last position of the r/w head on that tape and `$` is the active tape:\r\n\r\n```\r\n$t0 01234\r\n    ^  \r\n t1 01234\r\n    ^\r\n```\r\n\r\nThe sequence of instructions \"right right right down\" would result in this state:\r\n\r\n```\r\n t0 01234\r\n       ^  \r\n$t1 01234\r\n    ^\r\n```\r\n\r\n### Comments \r\n\r\nComments in vizh are anything enclosed in a rectangle. Stick what you want in there.\r\n\r\n## Standard Library\r\n\r\nThe vizh standard library is called `libv`. Much of it is implemented in vizh itself and it is built when you install `vizh`. It provides the following functions:\r\n\r\n### I/O\r\n\r\n- `readin`: read an ASCII character from stdin and write its integral representation into the cell pointed to by the r/w head\r\n- `print`: print the value of the cell pointed to by the r/w head to stout, interpreted as an ASCII character\r\n- `putstr`: write the null-terminated ASCII string starting at the position pointed to by the r/w head to stdout.\r\n\r\n### Strings\r\n\r\n- `geta`: puts the character `a` at the current position of the r/w head.\r\n- `getA`: puts the character `A` at the current position of the r/w head.\r\n\r\n### Arithmetic\r\n\r\n- `add` given tape cells `a,b` from the r/w head, results in `a+b,0`.\r\n- `mul` given tape cells `a,b,c` from the r/w head, results in `a*b,0,0`.\r\n- `zero` given tape cell `a` from the r/w head, results in `0`\r\n\r\n### Memory\r\n\r\n- `newtape`: allocate a new secondary tape underneath the last one currently allocated for this function (or the primary tape if there are no secondary tapes)\r\n- `freetape`: deallocate the bottom-most secondary tape for this function (no-op if there are not any)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tartanllama/vizh",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vizh",
    "package_url": "https://pypi.org/project/vizh/",
    "platform": "",
    "project_url": "https://pypi.org/project/vizh/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tartanllama/vizh/issues",
      "Homepage": "https://github.com/tartanllama/vizh"
    },
    "release_url": "https://pypi.org/project/vizh/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A visual esoteric language",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10625281,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c334c0b2a8909ab968e1ea76288661484b0104afef7673953107f9be8aab2e74",
          "md5": "1e174e533154eeed06c846b4bd028835",
          "sha256": "e791c5727ca47a7e315897e2898235b55d87d2e631d2b18b50ed9c7b24a041c9"
        },
        "downloads": -1,
        "filename": "vizh-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e174e533154eeed06c846b4bd028835",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22627,
        "upload_time": "2021-06-07T15:00:45",
        "upload_time_iso_8601": "2021-06-07T15:00:45.785963Z",
        "url": "https://files.pythonhosted.org/packages/c3/34/c0b2a8909ab968e1ea76288661484b0104afef7673953107f9be8aab2e74/vizh-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d4965881351267a81d07c729e31afd26f1366ec654bbe1d63abdafee8e508a",
          "md5": "f5f8b2d955baf1967295d4eb7a4db9f5",
          "sha256": "ea7def6e384ca20dbd7bc63810156d674a4a6a64a0fbfa440a0e9df225acc697"
        },
        "downloads": -1,
        "filename": "vizh-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5f8b2d955baf1967295d4eb7a4db9f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 673460,
        "upload_time": "2021-06-07T15:21:07",
        "upload_time_iso_8601": "2021-06-07T15:21:07.670185Z",
        "url": "https://files.pythonhosted.org/packages/20/d4/965881351267a81d07c729e31afd26f1366ec654bbe1d63abdafee8e508a/vizh-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f38fe49cf655c75f66d4f2b06fa436c005506778ec4d393f7c149b648cc1651c",
          "md5": "f435cfd6c64065bdbbe02f83693100ff",
          "sha256": "c5e0515bf722c4c63b09dfaa7b4fb904b345093541899b967b570f785d8d2fd4"
        },
        "downloads": -1,
        "filename": "vizh-0.1.2-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "f435cfd6c64065bdbbe02f83693100ff",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 49376,
        "upload_time": "2021-06-07T16:44:31",
        "upload_time_iso_8601": "2021-06-07T16:44:31.091775Z",
        "url": "https://files.pythonhosted.org/packages/f3/8f/e49cf655c75f66d4f2b06fa436c005506778ec4d393f7c149b648cc1651c/vizh-0.1.2-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b06ad869ed89e053e5b735e1be380de0933a1ff1e7ff3d37d54b7d2ef0a1d783",
          "md5": "328664a56828e5d4a4afce848508a72f",
          "sha256": "81241dccd0bfa873ab317daedec1c0e2c7b3a1ad1dc255dc878162a06d77b601"
        },
        "downloads": -1,
        "filename": "vizh-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "328664a56828e5d4a4afce848508a72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 673573,
        "upload_time": "2021-06-07T16:46:19",
        "upload_time_iso_8601": "2021-06-07T16:46:19.448861Z",
        "url": "https://files.pythonhosted.org/packages/b0/6a/d869ed89e053e5b735e1be380de0933a1ff1e7ff3d37d54b7d2ef0a1d783/vizh-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "378803c08a25971c25fcf5d4ade17f14ecd2c58b1cd5d84917b14b24acdc7f1c",
          "md5": "8c1c8ea74ea920734bb1df10c7888a2e",
          "sha256": "3382c6036e6e02a5afb22480b5802c5f92d47faa5161689ad89ced853a9701c5"
        },
        "downloads": -1,
        "filename": "vizh-0.1.3-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8c1c8ea74ea920734bb1df10c7888a2e",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 49380,
        "upload_time": "2021-06-11T17:46:43",
        "upload_time_iso_8601": "2021-06-11T17:46:43.706913Z",
        "url": "https://files.pythonhosted.org/packages/37/88/03c08a25971c25fcf5d4ade17f14ecd2c58b1cd5d84917b14b24acdc7f1c/vizh-0.1.3-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5392eb0ea0e159743a5814cc6b5172d9a112813c31a2a2be54e92d1907008b4c",
          "md5": "2a91b036fb54031a10755ea064b835a6",
          "sha256": "2ec87eff6ffa6927913f92493bdbb4f5fa96b0cd1032d252f67c2f3630018c5e"
        },
        "downloads": -1,
        "filename": "vizh-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2a91b036fb54031a10755ea064b835a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 673618,
        "upload_time": "2021-06-11T17:44:23",
        "upload_time_iso_8601": "2021-06-11T17:44:23.795722Z",
        "url": "https://files.pythonhosted.org/packages/53/92/eb0ea0e159743a5814cc6b5172d9a112813c31a2a2be54e92d1907008b4c/vizh-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "378803c08a25971c25fcf5d4ade17f14ecd2c58b1cd5d84917b14b24acdc7f1c",
        "md5": "8c1c8ea74ea920734bb1df10c7888a2e",
        "sha256": "3382c6036e6e02a5afb22480b5802c5f92d47faa5161689ad89ced853a9701c5"
      },
      "downloads": -1,
      "filename": "vizh-0.1.3-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8c1c8ea74ea920734bb1df10c7888a2e",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 49380,
      "upload_time": "2021-06-11T17:46:43",
      "upload_time_iso_8601": "2021-06-11T17:46:43.706913Z",
      "url": "https://files.pythonhosted.org/packages/37/88/03c08a25971c25fcf5d4ade17f14ecd2c58b1cd5d84917b14b24acdc7f1c/vizh-0.1.3-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5392eb0ea0e159743a5814cc6b5172d9a112813c31a2a2be54e92d1907008b4c",
        "md5": "2a91b036fb54031a10755ea064b835a6",
        "sha256": "2ec87eff6ffa6927913f92493bdbb4f5fa96b0cd1032d252f67c2f3630018c5e"
      },
      "downloads": -1,
      "filename": "vizh-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2a91b036fb54031a10755ea064b835a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 673618,
      "upload_time": "2021-06-11T17:44:23",
      "upload_time_iso_8601": "2021-06-11T17:44:23.795722Z",
      "url": "https://files.pythonhosted.org/packages/53/92/eb0ea0e159743a5814cc6b5172d9a112813c31a2a2be54e92d1907008b4c/vizh-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}