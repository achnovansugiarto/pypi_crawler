{
  "info": {
    "author": "Gustav GrÃ¤nsbo",
    "author_email": "gustav.gransbo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# gustavgrad\n[![Tests](https://github.com/gustavgransbo/gustavgrad/workflows/Tests/badge.svg)](https://github.com/gustavgransbo/gustavgrad/actions?workflow=Tests)\n[![codecov](https://codecov.io/gh/gustavgransbo/gustavgrad/branch/master/graph/badge.svg)](https://codecov.io/gh/gustavgransbo/gustavgrad)\n[![PyPI](https://img.shields.io/pypi/v/gustavgrad.svg)](https://pypi.org/project/gustavgrad)\n[![Python Version](https://img.shields.io/pypi/pyversions/gustavgrad.svg)](https://github.com/gustavgransbo/gustavgrad)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nAn autograd library built on NumPy, inspired by [Joel Grus's livecoding](https://github.com/joelgrus/autograd/tree/master).\n\n## Installation\n### With pip\n```bash\npip install gustavgrad\n```\n\n## How to use the library\n### `Tensor` operations\nThe `Tensor` class is the cornerstone of `gustavgrad`.\nIt behaves much like an ordinary `numpy.ndarray`.\n\n`Tensors` can be added together,\n```python\n>>> from gustavgrad import Tensor\n>>> x = Tensor([1, 2, 3])\n>>> x + x\nTensor(data=[2 4 6], requires_grad=False)\n```\n... subracted from each other,\n```python\n>>> x - x\nTensor(data=[0 0 0], requires_grad=False)\n```\n... their dot-product can calculated,\n```python\n>>> x * x\nTensor(data=[1 4 9], requires_grad=False)\n```\n... and they can be multiplied with each other.\n```python\n>>> y = Tensor([[1], [2], [3]])\n>>> x @ y\nTensor(data=[14], requires_grad=False)\n```\n`Tensor` operations also support broadcasting:\n```python\n>>> x * 3\nTensor(data=[3 6 9], requires_grad=False)\n>>> z = Tensor([[1, 2, 3], [4, 5, 6]])\n>>> x * z\nTensor(data=\n[[ 1  4  9]\n [ 4 10 18]], requires_grad=False)\n```\n### Automatic backpropagation\nBut a `Tensor` is not just an `ndarray`, they also keep track of their own gradient.\n```python\n>>> speed = Tensor(1, requires_grad=True)\n>>> time = Tensor(10, requires_grad=True)\n>>> distance = speed * time\n>>> distance\nTensor(data=10, requires_grad=True)\n```\nIf a `Tensor` is created as the result of a `Tensor` operation involving a `Tensor` with `requires_grad=True`,\nthe resulting `Tensor` will be able to backpropagate it's own gradient to it's ancestor.\n```python\n>>> distance.backward()\n>>> speed.grad\narray(10.)\n>>> time.grad\narray(1.)\n```\nBy calling the `backward` method on `distance` the gradient of `speed` and `time` is automatically updated.\nWe can see that increasing `speed` by 1 would result in an increase in `distance` by 10, while an increase\nin `time` by 1 would only increase `distance` by 1.\n\nThe `Tensor` class supports backpropagation over arbitrary compositions of `Tensor` operations.\n```python\n>>> t1 = Tensor([[1, 2, 3], [4, 5, 6]], requires_grad=True)\n>>> t2 = Tensor([[1], [2], [3]])\n>>> t3 = t1 @ t2 + 1\n>>> t4 = t3 * 7\n>>> t5 = t4.sum()\n>>> t5.backward()\n>>> t1.grad\narray([[ 7., 14., 21.],\n       [ 7., 14., 21.]])\n```\n### The `Module` API\n`gustavgrad` provides some tools to simplify setting up and training machine learning models.\nThe `Module` API makes it easier to manage multiple related `Tensors` by registering them as\n`Parameters`.\nA `Parameter` is just a randomly initialized `Tensor`.\n```python\nfrom gustavgrad.module import Module, Parameter\nfrom gustavgrad.function import tanh\nclass MultilayerPerceptron(Module):\n    def __init__(self, input_size: int, output_size: int, hidden_size: int = 100) -> None:\n        self.layer1 = Parameter(input_size, hidden_size)\n        self.bias1 = Parameter(hidden_size)\n        self.layer2 = Parameter(hidden_size, output_size)\n        self.bias2 = Parameter(output_size)\n        \n    def predict(self, x: Tensor) -> Tensor:\n        x = x @ self.layer1 + self.bias1\n        x = tanh(x)\n        x = x @ self.layer2 + self.bias2\n        return x\n```\nBy subclassing `Module` our `MultilayerPerceptron` class automatically gets some helper methods\nfor managing its `Parameters`.\nLet's create a `MultilayerPerceptron` that tries to learn the XOR function.\n```python\nxor_input = Tensor([[0, 0], [0, 1], [1, 0], [1, 1]])\nxor_targets = Tensor([[0], [1], [1], [0]])\nxor_mlp = MultilayerPerceptron(input_size=2, output_size=1, hidden_size=4)\n```\nWe can use the model to make predictions on the `xor_input` `Tensor`.\n```python\n>>> predictions = xor_mlp.predict(xor_input)\n>>> predictions\nTensor(data=\n[[-1.79888385]\n [-1.07965756]\n [ 0.34373135]\n [ 1.63366069]], requires_grad=True)\n```\nThe predictions of the randomly initialized model aren't right, but we can improve the model by\ncalculating the gradient of it's `Parameters` in respect to a loss function.\n```python\nfrom gustavgrad.loss import SquaredErrorLoss\nse_loss = SquaredErrorLoss()\nloss = se_loss.loss(xor_targets, predictions)\nloss.backward()\n```\n`loss` is a `Tensor`, so we can call its `backward` method to do backpropagation through our `xor_mlp`.\nWe can then adjust the weights of all `Parameters` in `xor_mlp` using gradient descent:\n```python\nfrom gustavgrad.optim import SGD\noptim = SGD(lr=0.01)\noptim.step(xor_mlp)\n```\nAfter updating the weights we can reset the gradients of all parameters and make new predictions:\n```python\n>>> xor_mlp.zero_grad()\n>>> predictions = xor_mlp.predict(xor_input)\n>>> predictions\nTensor(data=\n[[-1.51682686]\n [-0.78583272]\n [ 0.55994602]\n [ 1.67962174]], requires_grad=True)\n```\nSee [examples/xor.py](examples/xor.py) for a full example of how `gustavgrad` can be used to learn the XOR function.\nThe [examples](examples/) directory also contains some other basic examples of how the library can be used.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gustavgransbo/gustavgrad",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gustavgrad",
    "package_url": "https://pypi.org/project/gustavgrad/",
    "platform": "",
    "project_url": "https://pypi.org/project/gustavgrad/",
    "project_urls": {
      "Homepage": "https://github.com/gustavgransbo/gustavgrad",
      "Repository": "https://github.com/gustavgransbo/gustavgrad"
    },
    "release_url": "https://pypi.org/project/gustavgrad/0.2.0/",
    "requires_dist": [
      "numpy (>=1.19.0,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7744654,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5609fb364d3dee37911ccdb91cf3ec48054365f03efb489fb46cfa35e5714880",
          "md5": "45a5849d89ceda23b96601a919412c21",
          "sha256": "963bb35c189e505c25405b3488625d37d96da88c6c0011ddff3a7f359d12783d"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45a5849d89ceda23b96601a919412c21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7319,
        "upload_time": "2020-07-14T18:30:23",
        "upload_time_iso_8601": "2020-07-14T18:30:23.602790Z",
        "url": "https://files.pythonhosted.org/packages/56/09/fb364d3dee37911ccdb91cf3ec48054365f03efb489fb46cfa35e5714880/gustavgrad-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dac6583eeb280fb17ee7ca780c7694b27057c9784ada7479194951075ee103b",
          "md5": "8ba61d725e9a0e568e45b348fae32245",
          "sha256": "5f863e79250ead26168a4ac1a5961351bdd59bb47d568b15fcd3f5ed59fddd5f"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ba61d725e9a0e568e45b348fae32245",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6152,
        "upload_time": "2020-07-14T18:30:24",
        "upload_time_iso_8601": "2020-07-14T18:30:24.580901Z",
        "url": "https://files.pythonhosted.org/packages/4d/ac/6583eeb280fb17ee7ca780c7694b27057c9784ada7479194951075ee103b/gustavgrad-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce95c51a659d12a9d6774dbfbc23cf4330995f76b207768db72e758ddc714b91",
          "md5": "ea65a539ba87a88faac8243d9c2b54b9",
          "sha256": "c22c7da89835617b41ce26d8ca94c7f8e163476edb65cbf7a737a59157c7456d"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.1.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea65a539ba87a88faac8243d9c2b54b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7406,
        "upload_time": "2020-07-14T17:35:55",
        "upload_time_iso_8601": "2020-07-14T17:35:55.838028Z",
        "url": "https://files.pythonhosted.org/packages/ce/95/c51a659d12a9d6774dbfbc23cf4330995f76b207768db72e758ddc714b91/gustavgrad-0.1.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f962a00bb4cf0f1787a64be81f46852a95f8be2705e10f0fd0a69eb2a322c9c7",
          "md5": "fdb6b654328cde6f48eaad91d58d2679",
          "sha256": "720873110be341dfe686dac8f002a58f768804d53dc907a4723625fe6046fb1f"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.1.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "fdb6b654328cde6f48eaad91d58d2679",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 6344,
        "upload_time": "2020-07-14T17:35:58",
        "upload_time_iso_8601": "2020-07-14T17:35:58.197592Z",
        "url": "https://files.pythonhosted.org/packages/f9/62/a00bb4cf0f1787a64be81f46852a95f8be2705e10f0fd0a69eb2a322c9c7/gustavgrad-0.1.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37179c1780c37ae6c5607662b44542d4e598e4c5cb42f1eb9e8c5f1de99c4c21",
          "md5": "2867026c3732bce69938ad221827c0af",
          "sha256": "bac46c306601c0cb5de5f09c8a10e3437fce41f500fd65746f2937b31b63706e"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2867026c3732bce69938ad221827c0af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9177,
        "upload_time": "2020-07-20T22:23:35",
        "upload_time_iso_8601": "2020-07-20T22:23:35.046145Z",
        "url": "https://files.pythonhosted.org/packages/37/17/9c1780c37ae6c5607662b44542d4e598e4c5cb42f1eb9e8c5f1de99c4c21/gustavgrad-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85d20f55731f0453dc8e052f7d5bfa302bcb33f0af02069da38ebdbc95e22517",
          "md5": "7711243ad585b89ef5fad70140de5b89",
          "sha256": "69b135a8e0f26c1bb093b58333933d8c517e33d32dd414d64fdf68a911cfd672"
        },
        "downloads": -1,
        "filename": "gustavgrad-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7711243ad585b89ef5fad70140de5b89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10147,
        "upload_time": "2020-07-20T22:23:36",
        "upload_time_iso_8601": "2020-07-20T22:23:36.025739Z",
        "url": "https://files.pythonhosted.org/packages/85/d2/0f55731f0453dc8e052f7d5bfa302bcb33f0af02069da38ebdbc95e22517/gustavgrad-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37179c1780c37ae6c5607662b44542d4e598e4c5cb42f1eb9e8c5f1de99c4c21",
        "md5": "2867026c3732bce69938ad221827c0af",
        "sha256": "bac46c306601c0cb5de5f09c8a10e3437fce41f500fd65746f2937b31b63706e"
      },
      "downloads": -1,
      "filename": "gustavgrad-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2867026c3732bce69938ad221827c0af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 9177,
      "upload_time": "2020-07-20T22:23:35",
      "upload_time_iso_8601": "2020-07-20T22:23:35.046145Z",
      "url": "https://files.pythonhosted.org/packages/37/17/9c1780c37ae6c5607662b44542d4e598e4c5cb42f1eb9e8c5f1de99c4c21/gustavgrad-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85d20f55731f0453dc8e052f7d5bfa302bcb33f0af02069da38ebdbc95e22517",
        "md5": "7711243ad585b89ef5fad70140de5b89",
        "sha256": "69b135a8e0f26c1bb093b58333933d8c517e33d32dd414d64fdf68a911cfd672"
      },
      "downloads": -1,
      "filename": "gustavgrad-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7711243ad585b89ef5fad70140de5b89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 10147,
      "upload_time": "2020-07-20T22:23:36",
      "upload_time_iso_8601": "2020-07-20T22:23:36.025739Z",
      "url": "https://files.pythonhosted.org/packages/85/d2/0f55731f0453dc8e052f7d5bfa302bcb33f0af02069da38ebdbc95e22517/gustavgrad-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}