{
  "info": {
    "author": "Jonathan Vanasco",
    "author_email": "jonathan@findmeon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Python package](https://github.com/jvanasco/pyramid_formencode_classic/workflows/Python%20package/badge.svg)\n\n## Current Recommended Version\n\n`v 0.4.4 (2020.10.20)`\n\nPackaging fix\n\n`v 0.4.3 (2020.10.12)`\n\nPython3 via pypi formencode (no longer requires forks)\n\n`v 0.4.2 (2020.02.04)`\n\nNew Features:\n\n* simplified api\n* bug fixes, better integration\n* python3 support\n* pyramid debugtoolbar support\n* automatic handling of edge cases with ForEach validator errors\n\n\n### Backwards Compatible?\n\n### 0.4.0\n\n* `0.3.x` No\n\n### 0.3.0\n\n* `0.2.x` Yes.\n* `0.1.x` No. Some functionality switched between `0.1.10` and `0.2.0` and light editing is required.  See `CHANGES.txt` for full details.  Also see the migration guide below.\n\n\n## Installation\n\nThis requires the 2.0 branch of formencode, which has still been an alpha release since Aug 9, 2016\n\n\tpip install formencode==2.0.0a1\n\tpip install pyramid_formencode_classic\n\n\n## What is this package?\n\n`pyramid_formencode_classic` is a port of some classic `Pylons` form validation concepts onto the `Pyramid` framework.\n\nThrough the version `0.1.x` releases, thisÂ package sought to integrate the Pylons validation onto Pyramid so projects could be ported easier.\n\nStarting with version `0.2.0` strict backwards compatibility has been lost in favor of performance enhancements and streamlining the API. There were simply a handful of bugs and oddities which were not easily fixed.\n\n## How does this handle form validation?\n\nIn the example below, form validation is broken into 4 components:\n\n* A `formencode` form schema\n* a callable dispatcher (`login`)\n* a private printer (`_login_print`)\n* a private submit processor (`_login_submit`)\n\nThe formencode schema does not interact with the database. It is used only for \"lightweight\" validation and cheap operations (length, presence, etc).\n\nThe more involved operations, such as checking a database within a transaction, can occur in the submit step.  \n\nIn this pattern, if an error is encountered at any time, a `FormInvalid` error can be raised to trigger `form_reprint`.  That function will render the template using `Pyramid`'s mechanism and then run `formencode`'s `htmlfill` on it.\n\nIf you want to set a global \"oh noes!\" message for the form, set an error on a special non-existent field like `Error_Main`.\n\n\n## Pyramid Integration\n\nJust do this...\n\n\tconfig.include('pyramid_formencode_classic')\n\t\nWhich will invoke `Pyramid`'s `add_request_method` to add a new attribute to your request.\n\n`request.pyramid_formencode_classic` will be a per-request instance of `pyramid_formencode_classic.FormStashList`.\n\nParsing a form will manage the formdata in `request.pyramid_formencode_classic['_default']` the default form stash.\n\nIf you want to specify a particular stash, because you use multiple forms on a page or have other needs:\n\n* `request.pyramid_formencode_classic.get_form(...)` accepts a `form_stash` kwarg, which defaults to `_default`\n* `form_validate(...)` accepts a `form_stash` kwarg, which defaults to `_default`\n* `form_reprint(...)` accepts a `form_stash` kwarg, which defaults to `_default`\n\n\n## Caveats, Oddities, Etc\n\n### Custom Errors, Custom Error Displays and Missing Fields\n\n#### Where are errors placed?  What about missing fields?\n\n`formencode.htmlfill` prefers to upgrade a html form element with the error information.\n\nIf the html input for an error is missing, such as a custom `Error_Main` field, `formencode` will attempt to do two things:\n\n1. `formencode` will look for a custom `form:error` field, such as `<form:error name=\"Error_Main\"/>`.\n2. If no fields are available, `formencode` will *PREPEND* the error messages to the document.  This can create problems if you are running the reprint on a full (not partial) html page.\n\n#### How are errors styled?\n\n`formencode` styles errors using two commandline arguments.\n\n* `auto_error_formatter` is a function that formats the error messages for fields which do not appear on the document and are pre-pended.\n* `error_formatters` is a dict of error formatters that can be passed into `htmlfill`.  if provided, these will be merged into the htmlfill defaults.\n\n`htmlfill` allows a bit of customization by supporting a `format` attribute in `<form:error/>` declarations, which will invoke the respective entry in the `error_formatters` dict.\n\n#### How can a \"global\" form error be handled?\n\nHandling a custom error can be achieved by reserving a special `error_main` key. By default, `pyramid_formencode_classic` uses `Error_Main`.\n\nOnce you set that field as a form error,  `formencode.htmlfill` will replace this markup in your template\n\n    <form:error name=\"Error_Main\"/>\n\nwith the following html:\n\n    <!-- for: Error_Main -->\n\t<span class=\"error-message\">%(Error_Main)s</span><br/>\n\nIn which the `Error_main` text has been run through `error_formatters['default']`\n\nThere is a small caveat:\n\nIn order for the text to appear in the form where you wish, you must write `<form:error name=\"Error_Main\"/>` in the form.  Non-error views will contain that text in the html source, but not render it; error views will replace it with properly formatted errors.\n\nThis package offers a convenience method to conditionally render that text:\n\n\t<html><head></head><body><div>\n\t<form action=\"/\" method=\"POST\">\n\t\t<% form = request.pyramid_formencode_classic.get_form() %>\n\t\t${form.html_error_placeholder()|n}\n\t\t<input type=\"text\" name=\"email\" value=\"\" />\n\t\t<input type=\"text\" name=\"username\" value=\"\" />\n\t</form>\n\t</div></body></html>\n\n\nIf the marking is not in your template, it will be at the top of the document (before the html), after being run through the `auto_error_formatter`\n\n    <!-- for: Error_Main -->\n    <span class=\"error-message\">${error_main}</span>\n\n\n# Examples\n\n## Usage Overview\n\n\n### define your form\n\n    import formencode\n\n\n    class _Schema_Base(formencode.Schema):\n        allow_extra_fields = True\n        filter_extra_fields = False\n\n\n    class FormLogin(_Schema_Base):\n        email_address = formencode.validators.Email(not_empty=True)\n        password = formencode.validators.UnicodeString(not_empty=True)\n        remember_me = formencode.validators.Bool()\n\n\n### define your view/handler\n\n\n    import pyramid_formencode_classic as formhandling\n\n\n    class WebLogin(base):\n\n        def login(self):\n            if 'login' in self.request.POST:\n                return self._login_submit()\n            return self._login_print()\n\n        def _login_print(self):\n            return render_to_response(\"web/account/login.mako\", {}, self.request)\n\n        def _login_submit(self):\n\n            try:\n                (result,\n                 formStash\n                 ) = formhandling.form_validate(self.request,\n                \t\t\t\t\t\t\t\tschema=forms.FormLogin,\n                \t\t\t\t\t\t\t\terror_main=\"There was an error with your form.\",\n                \t\t\t\t\t\t\t\t)\n                if not result:\n                    # `formStash.fatal_form(message)` will raise `formhandling.FormInvalid(message)`\n                    formStash.fatal_form(\"Invalid Form\")\n\n                results = formStash.results\n\n                useraccount = model.find_user(results['email_address'])\n                if not useraccount:\n                \t# set a custom error and raise an exception to reprint\n                    # `formStash.fatal_field(` will raise `formhandling.FormInvalid(`\n                    formStash.fatal_field(field=\"email_address\",\n\t\t\t\t\t\t\t\t\t\t  message=\"Email not registered\",\n\t\t\t\t\t\t\t\t\t\t  )\n\n                if not useraccount.verify_submitted_password(results['password']):\n                \t# set a custom error and raise an exception to reprint\n                    # `formStash.fatal_field(` will raise `formhandling.FormInvalid(`\n                    formStash.fatal_field(field=\"email_address\",\n\t\t\t\t\t\t\t\t\t\t  message=\"Wrong password\",\n\t\t\t\t\t\t\t\t\t\t  )\n\n\t\t\t\tdo_login()\n\t\t\t\treturn HTTPFound(location='/account/home')\n\n            except formhandling.FormInvalid as exc:\n                # our reprint logic\n                return formhandling.form_reprint(self.request,\n                \t\t\t\t\t\t\t\t self._login_print\n                \t\t\t\t\t\t\t\t )\n\n\nTwitter Bootstrap Example\n=========================\n\n    To handle  twitter bootstrap style errors, it's a bit more manual work -- but doable\n\n        Mako:\n            <% form= request.pyramid_formencode_classic.get_form() %>\n            ${form.html_error_placeholder()|n}\n            <div class=\"control-group ${form.css_error('email_address')}\">\n                <label class=\"control-label\" for=\"email_address\">Email</label>\n                <input id=\"email_address\" name=\"email_address\" placeholder=\"Email Address\" size=\"30\" type=\"text\" />\n                ${form.html_error('email_address')|n}\n            </div>\n\n            you could also show an error with:\n                % if form.has_error('email_address'):\n                    <span class=\"help-inline\">${form.get_error('email_address')}</span>\n                % endif\n\n\n        Pyramid:\n            text = formhandling.form_reprint(self.request,\n            \t\t\t\t\t\t\t\t self._login_print,\n            \t\t\t\t\t\t\t\t auto_error_formatter=formhandling.formatter_none,\n            \t\t\t\t\t\t\t\t )\n\n    in the above example there are a few things to note:\n\n        1. in the mako template we use `get_form` to pull/create the default formStash object for the request.  You can specify a specific formStash object if you'd like.\n        2. a call is made to `form.css_error()` specifying the 'email_address' field.  this would result in the \"control-group error\" css mix if there is an error in 'email_address'.\n        3. We tell pyramid to use 'formhandling.formatter_none' as the error formatter.  This surpresses errors.  We need to do that instead of using custom error formatters, because FormEncode places errors BEFORE the fields, not AFTER.\n        4. I've included two methods of presenting field errors.  they are funtinoally the same.\n        5. I've used an ErrorMain to show that there are issues on the form - not just a specific field.\n\n\n\n## Example Renderings\n\nthere is a trivial attempt at multiple form handling - a \"form_stash\" argument can be used, which will store different \"FormStash\" wrapped structures in the names provided.\n\nCAVEATS\n\n1. it doesn't support using a \"render\" on the form object -- it expects forms to be manually coded, and errors to be regexed out via htmlfill. live with it.\n2. this REQUIRES one of the following two example scenarios \n\nNeedless to say: this is really nice and clean in the first scenario, and messy in the latter.\n\n\n### Example Rendering A - `render_to_response`\n\nThe form methods always render a response object via `pyramid.renderers.render_to_response`\n\n\tclass MyView(handler):\n\n\t\tdef test(self):\n\t\t\tif 'submit' in self.request.POST:\n\t\t\t\treturn self._test_submit()\n\t\t\treturn self._test_print()\n\n\t\tdef _test_print(self):\n\t\t\treturn render_to_response(\"/test_form.mako\", {}, self.request)\n\n\t\tdef _test_submit(self):\n\t\t\ttry:\n\t\t\t\t(result,\n\t\t\t\t formStash\n\t\t\t\t ) = formhandling.form_validate(self.request,\n\t\t\t\t\t\t\t\t\t\t\t\tschema=forms.FormLogin,\n\t\t\t\t\t\t\t\t\t\t\t\terror_main=\"Error\",\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tif not result:\n\t\t\t\t\traise formhandling.FormInvalid()\n\t\t\t\tuserAccount= query_for_useraccount(formStash.results['email'])\n\t\t\t\tif not userAccount:\n\t\t\t\t\tformStash.fatal_field(field='email',\n\t\t\t\t\t\t\t\t\t\t  message='Invalid Login',\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t...\n\t\t\texcept formhandling.FormInvalid:\n\t\t\t\t# you could set a field manually too\n\t\t\t\t#formhandling.formerrors_set(field=\"email\", message='missing this field')\n\t\t\t\treturn formhandling.form_reprint(self.request,\n\t\t\t\t\t\t\t\t\t\t\t\t self._login_print,\n\t\t\t\t\t\t\t\t\t\t\t\t )\n\n\n### Example Rendering B - `view_config`\n\nThe form methods use a pyramid renderer\n\n\tclass MyView(handler):\n\n\t\t@view_config(renderer='/test_form.mako')\n\t\tdef test(self):\n\t\t\tif 'submit' in self.request.POST:\n\t\t\t\treturn self._test_submit()\n\t\t\treturn self._test_print()\n\n\t\tdef _test_print(self):\n\t\t\treturn {\"project\":\"MyApp\"}\n\n\t\tdef _test_submit(self):\n\t\t\ttry:\n\t\t\t\t(result,\n\t\t\t\t formStash\n\t\t\t\t ) = formhandling.form_validate(self.request,\n\t\t\t\t\t\t\t\t\t\t\t\tschema=forms.FormLogin,\n\t\t\t\t\t\t\t\t\t\t\t\terror_main=\"Error\",\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tif not result:\n\t\t\t\t\traise formhandling.FormInvalid()\n\t\t\t\t...\n\t\t\texcept formhandling.FormInvalid as exc:\n\t\t\t\treturn formhandling.form_reprint(self.request\n\t\t\t\t\t\t\t\t\t\t\t\t None,\n\t\t\t\t\t\t\t\t\t\t\t\t render_view=self._test_print,\n\t\t\t\t\t\t\t\t\t\t\t\t render_view_template=\"/test_form.mako\"\n\t\t\t\t\t\t\t\t\t\t\t\t )\n\n\n## Using multiple forms on a page?\n\nIn order to handle multiple form reprints correctly you need:\n\n* pyramid_formencode_classic >= 0.2.0\n* formencode >= 2.0.0\n\nThis functionality is dependent upon a PR which the formencode team was nice enough to accept in their 2.0.0 release.\n\nThis can be done in earlier versions, but you must give them each field a unique 'name' and handle them independently.\n\nIn earlier versions, reprints of error forms will not work correctly otherwise.\n\nThe following example references a unit test for the new functionality which ships with this package\n\n### Multiple forms must be defined in html\n\nThe specific forms must be explicitly invoked in the thml\n\n1. note the explicit `form_stash` argument in `request.pyramid_formencode_classic.get_form(\"a\")`\n2. the main error placeholder must note the form. e.g. `form.html_error_placeholder(formencode_form=\"a\")`\n3. the formfields must specify `data-formencode-form` e.g. `<input type=\"text\" name=\"username\" value=\"\" data-formencode-form=\"a\"/>`\n\nfull html example\n\n\t<html><head></head><body><div>\n\t<form action=\"/a\" method=\"POST\">\n\t\t<% form = request.pyramid_formencode_classic.get_form(\"a\") %>\n\t\t${form.html_error_placeholder(formencode_form=\"a\")|n}\n\t\t<input type=\"text\" name=\"email\" value=\"\" data-formencode-form=\"a\"/>\n\t\t<input type=\"text\" name=\"username\" value=\"\" data-formencode-form=\"a\"/>\n\t</form>\n\t<form action=\"/b\" method=\"POST\">\n\t\t<% form = request.pyramid_formencode_classic.get_form(\"b\") %>\n\t\t${form.html_error_placeholder(formencode_form=\"b\")|n}\n\t\t<input type=\"text\" name=\"email\" value=\"\" data-formencode-form=\"b\"/>\n\t\t<input type=\"text\" name=\"username\" value=\"\" data-formencode-form=\"b\"/>\n\t</form>\n\t</div></body></html>\n\n### Multiple forms must be processed in Python\n\nthe call to `form_validate` must specify the desired `form_stash`\n\nthe call to `form_reprint` must specify *BOTH* the desired `form_stash` and `data_formencode_form` (which is used to handle the form attributes)\n\nfull python example:\n\n        try:\n            (result,\n             formStash\n             ) = pyramid_formencode_classic.form_validate(self.request,\n                                                          schema=Form_EmailUsername,\n                                                          form_stash='b',\n                                                          error_main=\"There was an error with your form.\",\n                                                          **_validate_kwargs\n                                                          )\n            if not result:\n                raise pyramid_formencode_classic.FormInvalid(\"Custom Main Error\")\n        except pyramid_formencode_classic.FormInvalid as exc:\n            rendered = pyramid_formencode_classic.form_reprint(self.request,\n                                                               _print_form_simple,\n                                                               form_stash='b',\n                                                               data_formencode_form='b',\n                                                               **_reprint_kwargs\n                                                               )\n            return rendered\n\n#### How does it work?\n\nThe `form_stash` argument represents the unique `FormStash` object on the `request` (when it is not explicitly provided, it defaults to `_default`)\n\nThe `data_formencode_form` argument is passed from `form_reprint` to `formencode.htmlfill`; when provided, `formencode` will ignore tags which don't match the active formencode form's elements.\n\nThe HTML form elements are associated with a form via the attribute `data-formencode-form`\n\n\n## Dealing with unicode markers in errors (Python2)\n\nThere is an issue with formencode under Python2, where an error message shows a unicode marker (see https://github.com/formencode/formencode/issues/132) and may appear like `Value must be one of: a; b (not u'c')` instead of `Value must be one of: a; b (not 'c')`.\n\nAfter much testing, the simplest way to handle this is to detect it in errors and replace it.  A better method would need to be implemented in formencode itself.\n\t\nA quick way to handle this is to define your own implementation of `form_validate` and just use that throughout your project.\n\nFor example:\n\n\timport pyramid_formencode_classic\n\tfrom six import PY2\n\n\tdef form_validate(request, **kwargs):\n\t\t\"\"\"\n\t\tkwargs\n\t\t\tthings of interest...\n\t\t\tis_unicode_params - webob 1.x+ transfers to unicode.\n\t\t\"\"\"\n\t\tif 'is_unicode_params' not in kwargs:\n\t\t\tkwargs['is_unicode_params'] = True\n\t\t(result,\n\t\t formStash\n\t\t ) = pyramid_formencode_classic.form_validate(\n\t\t\trequest,\n\t\t\t**kwargs\n\t\t)\n\t\tformStash.html_error_main_template = TEMPLATE_FORMSTASH_ERRORS\n\t\tformStash.html_error_placeholder_template = '<form:error name=\"%s\" format=\"main\"/>'\n\t\tformStash.html_error_placeholder_form_template = '<form:error name=\"%(field)s\" format=\"main\" data-formencode-form=\"%(form)s\"/>'\n\t\tif not result:\n\t\t\tif PY2:\n\t\t\t\t# there is an issue in formencode under Python2 \n\t\t\t\t# see: https://github.com/formencode/formencode/issues/132\n\t\t\t\tfor (k, v) in formStash.errors.items():\n\t\t\t\t\tif \" (not u'\" in v:\n\t\t\t\t\t\tformStash.errors[k] = v.replace( \" (not u'\",  \" (not '\")\n\t\treturn (result,\n\t\t\t\tformStash\n\t\t\t\t)\n\n\n\n# Misc\n\nif possible, use partial forms and not entire html documents.\n\n80% of this code is adapted from Pylons, 20% is outright copy/pasted.\n\nreleased under the BSD license, as it incorporates some Pylons code (which was BSD)\n\n\n## Debugtoolbar Support?\n\nYep. just add to your development.ini\n\n\tdebugtoolbar.includes = pyramid_formencode_classic_.debugtoolbar\n\nThe debugtoolbar will now have a `FormencodeClassic` panel.\n\nThe panel shows information such as:\n\n* which forms were processed/setup\n* form results (errors, defaults, actual results)\n* form schema\n* form parsing status\n* form configuration\n\n\n### Are there tests?\n\nYes. Starting with the `0.2.0` release, there is a full test suite to ensure forms render as expected.\n\n\n### Versioning Policy\n\nThis project using a Semantic Versioning Policy: `Major.Minor.Patch`.\n\n`Major`: significant API changes\n`Minor`: backwards incompatible API changes\n`Patch`: backwards compatible API changes and bugfixes\n\nThe recommended usage is to pin versioning within the `Major.Minor` range:\n\n\tpyramid_formencode_classic >=0.4.0, <0.5.0\n            \n\n### Why doesn't form_validate` raise an Exception by default?\n\nThis design choice was made to allow for scoping within Pyramid apps:\n\n\ttry:\n\t\t(result,\n\t\t formStash\n\t\t ) = form_validate(...)\n\t\tif not result:\n\t\t\traise FormInvalid()\n\t\t# do stuff\n\n\texcept FormInvalid as exc:\n\t\t# formStash is scoped here\n\nAn alternative would be something like this...\n\n\ttry:\n\t\tformStash = form_validate(..., form_stash='FormId')\n\t\t# do stuff\n\n\texcept FormInvalid as exc:\n\t\tformStash = request.pyramid_formencode_classic['FormId']\n\nThe latter situation can be easily accomplished by defining a custom `form_validate` function\n\t\t\n\n\n\n\n## Migration Guide\n\n### v0.1.x to v0.2.0\n\nThere are some slight changes:\n\n`formStash.html_error_main()` was implemented poorly and rendered the actual template.  a new, better, approach is to use `formStash.html_error_placeholder()`.  if you want the previous behavior, use `formStash.render_html_error_main()`\n\ninstead of manually adding a form object, you now can/should use `config.include('pyramid_formencode_classic')` in your app's initialization.\n\nseveral functions and kwargs were removed, CHANGES provides a full list but highlights include:\n\n* camelCase methods have been removed.\n* `section` no longer works as a kwarg. use `field` instead.\n* the kwarg `raise_field_invalid` is removed in favor of `raise_FieldInvalid`\n* the kwarg `raise_form_invalid` is removed in favor of `raise_FormInvalid`\n\nThe new setup makes invoking error formatters for htmlfill much easier.\n\n### v0.3.x to v0.4.x\n\n* `FormStash.set_error()` the `raise_FieldInvalid` kwarg was removed. instead, use `FormStash.fatal_field()`\n* `FormStash.set_error()` the `raise_FormInvalid` kwarg was removed. instead, use `FormStash.fatal_form()`\n* import formatters from `pyramid_formencode_classic.formatters` not the main namespace",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jvanasco/pyramid_formencode_classic",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid-formencode-classic",
    "package_url": "https://pypi.org/project/pyramid-formencode-classic/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyramid-formencode-classic/",
    "project_urls": {
      "Homepage": "https://github.com/jvanasco/pyramid_formencode_classic"
    },
    "release_url": "https://pypi.org/project/pyramid-formencode-classic/0.4.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "('An implementation of the classic Pylons formencode validation, for Pyramid',)",
    "version": "0.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9881851,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed08f438c3fd1c3d433cd1c2332e3ece5f767d3aa6a1970bb7839518553bdb01",
          "md5": "a4dfb7ec26ac4ac247fc424dd1a7b9a7",
          "sha256": "a8ef71abba85d10b3219f5cec4142033d1e7dae5a4a0f5879b1d37e66522be97"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "a4dfb7ec26ac4ac247fc424dd1a7b9a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8655,
        "upload_time": "2012-07-12T01:40:25",
        "upload_time_iso_8601": "2012-07-12T01:40:25.353864Z",
        "url": "https://files.pythonhosted.org/packages/ed/08/f438c3fd1c3d433cd1c2332e3ece5f767d3aa6a1970bb7839518553bdb01/pyramid_formencode_classic-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa27a3903c16664d239c593fad6276ae4cf0742c98dc43ec5aa4d2ae4fb09f76",
          "md5": "15a132d1a9fe55a0c5dc491aab244743",
          "sha256": "b7c2c95a8d2f97630958b511a6b24592619d812bbee2a9df72e15a481580ee34"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "15a132d1a9fe55a0c5dc491aab244743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8842,
        "upload_time": "2012-07-21T02:27:40",
        "upload_time_iso_8601": "2012-07-21T02:27:40.576345Z",
        "url": "https://files.pythonhosted.org/packages/fa/27/a3903c16664d239c593fad6276ae4cf0742c98dc43ec5aa4d2ae4fb09f76/pyramid_formencode_classic-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b811b2958e2e6d980b596508d64eb0571208725a176c4390d3a1dec5cd0cdb5",
          "md5": "556c0eaca5567bd77e08408393718d8f",
          "sha256": "6257c01f9321f6c7f3c32185764f54dfc4ab77366bc8ac632afa5706ec845c1b"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "556c0eaca5567bd77e08408393718d8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9051,
        "upload_time": "2012-08-17T15:22:30",
        "upload_time_iso_8601": "2012-08-17T15:22:30.753893Z",
        "url": "https://files.pythonhosted.org/packages/4b/81/1b2958e2e6d980b596508d64eb0571208725a176c4390d3a1dec5cd0cdb5/pyramid_formencode_classic-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b614eb132bb58a97c1736c1bcd06b9bf8008d7b063277b871d5b4d39213db06d",
          "md5": "87f95cf4485afccc9e68a8f0dac9690f",
          "sha256": "f3ad59ef0f6b3a08a08831eec25758e6df7e1faa15b2cf7af3e31e95bf61328b"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "87f95cf4485afccc9e68a8f0dac9690f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6562,
        "upload_time": "2012-02-08T02:15:55",
        "upload_time_iso_8601": "2012-02-08T02:15:55.758814Z",
        "url": "https://files.pythonhosted.org/packages/b6/14/eb132bb58a97c1736c1bcd06b9bf8008d7b063277b871d5b4d39213db06d/pyramid_formencode_classic-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "227c8b9390265752b805ffcd9d2b6169f2e629d03987aa1e7c8466b33b6ec175",
          "md5": "429053d067e2ee091a619b2539792567",
          "sha256": "a965f445ca93f054aa706791b9382be8980f88688c14c559c9ddf7e988fd8960"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "429053d067e2ee091a619b2539792567",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6870,
        "upload_time": "2012-03-08T05:10:33",
        "upload_time_iso_8601": "2012-03-08T05:10:33.627327Z",
        "url": "https://files.pythonhosted.org/packages/22/7c/8b9390265752b805ffcd9d2b6169f2e629d03987aa1e7c8466b33b6ec175/pyramid_formencode_classic-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "830fc4e21054eda7042ad5baeb721517e749b28857addce81b8e11962973444c",
          "md5": "b1e860a516f58473efaef484c326ba1b",
          "sha256": "22e31d199f00e75eddd021a5f93c3e1582092f60fead49f9daa1dbad2bf44860"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b1e860a516f58473efaef484c326ba1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7313,
        "upload_time": "2012-03-28T05:12:40",
        "upload_time_iso_8601": "2012-03-28T05:12:40.248908Z",
        "url": "https://files.pythonhosted.org/packages/83/0f/c4e21054eda7042ad5baeb721517e749b28857addce81b8e11962973444c/pyramid_formencode_classic-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "735233f7a81cacee2c49ab4c23ee4b6ec7e3d9d7ea1f66d1dc5f0dc83dca875f",
          "md5": "5b47d6e0e38b18308c5e3a8873766216",
          "sha256": "e293e7d1863f98e44cdd7b6378b987d4d9b83dc679399541936a43a150223476"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5b47d6e0e38b18308c5e3a8873766216",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8096,
        "upload_time": "2012-03-28T22:37:00",
        "upload_time_iso_8601": "2012-03-28T22:37:00.986900Z",
        "url": "https://files.pythonhosted.org/packages/73/52/33f7a81cacee2c49ab4c23ee4b6ec7e3d9d7ea1f66d1dc5f0dc83dca875f/pyramid_formencode_classic-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7edd620af408896bde3ea7d605aa908b5e814745a32da16fe6409db0ebf78056",
          "md5": "a9f3641e29de0b4ab246e032efb5d87c",
          "sha256": "b3f9ac09e7b83b6957bcc2016df81a3b66dad583e2098f50de6a1a7c4806b253"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a9f3641e29de0b4ab246e032efb5d87c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8453,
        "upload_time": "2012-06-07T17:36:40",
        "upload_time_iso_8601": "2012-06-07T17:36:40.337174Z",
        "url": "https://files.pythonhosted.org/packages/7e/dd/620af408896bde3ea7d605aa908b5e814745a32da16fe6409db0ebf78056/pyramid_formencode_classic-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89507615e4a11f6b711b5fe59c9286daf77692e6d3cb266e135c281039e381e",
          "md5": "651378f3a9552c3eac637aa61593d807",
          "sha256": "70f5929ba49bf1b61e776ccab1d9c8d3e6268ade462d503967c2780f65f477a4"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "651378f3a9552c3eac637aa61593d807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10660,
        "upload_time": "2018-05-17T00:56:52",
        "upload_time_iso_8601": "2018-05-17T00:56:52.969423Z",
        "url": "https://files.pythonhosted.org/packages/b8/95/07615e4a11f6b711b5fe59c9286daf77692e6d3cb266e135c281039e381e/pyramid_formencode_classic-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6014c904f42611a44e92d84ee6d76458f0ef0774ede5b6639ebc7f108c966be7",
          "md5": "ce68d509bc9ff0b8f3bdebf5eeaaeda2",
          "sha256": "2ece2ffd5d30292b7709b578cb8d03f0ab772e7f92933f3ad0a33d5757205c9c"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ce68d509bc9ff0b8f3bdebf5eeaaeda2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9222,
        "upload_time": "2014-10-13T18:26:53",
        "upload_time_iso_8601": "2014-10-13T18:26:53.238355Z",
        "url": "https://files.pythonhosted.org/packages/60/14/c904f42611a44e92d84ee6d76458f0ef0774ede5b6639ebc7f108c966be7/pyramid_formencode_classic-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01e9437431abb973ed5088ce314cc392a802aa36b553ef554c959f6aec2f8ea4",
          "md5": "7d00f2fe6a9b4708d9a2183baaf34946",
          "sha256": "0169b89b2d5f87ed6bfbfffb7bc33d1d3ad25ffe89041d54d0ba38052fa7f6df"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d00f2fe6a9b4708d9a2183baaf34946",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9841,
        "upload_time": "2015-03-04T18:33:23",
        "upload_time_iso_8601": "2015-03-04T18:33:23.089288Z",
        "url": "https://files.pythonhosted.org/packages/01/e9/437431abb973ed5088ce314cc392a802aa36b553ef554c959f6aec2f8ea4/pyramid_formencode_classic-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "006566eac120d916c621136f87d1b433d79effbd5d55528f97b1d26fc9215344",
          "md5": "3827bf6ced643e31a76bc1f9f8c33011",
          "sha256": "14d25ab220734e4fdae4d43d6a1d723c6bca942ca859edec188166e2b53db73a"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3827bf6ced643e31a76bc1f9f8c33011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9889,
        "upload_time": "2015-03-25T18:43:26",
        "upload_time_iso_8601": "2015-03-25T18:43:26.003750Z",
        "url": "https://files.pythonhosted.org/packages/00/65/66eac120d916c621136f87d1b433d79effbd5d55528f97b1d26fc9215344/pyramid_formencode_classic-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f433d9c1dd152531d1bc0a6c76bc4fbacacdeb654a3f769fa90c583e84b5b7d4",
          "md5": "edd31d330b3e70cf438d9882a0cf1962",
          "sha256": "d78cc71b1a7458b0d99ac5eaa175ff3a597d63811be182e4336359e5f28cc77f"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "edd31d330b3e70cf438d9882a0cf1962",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7350,
        "upload_time": "2015-08-28T00:28:49",
        "upload_time_iso_8601": "2015-08-28T00:28:49.889206Z",
        "url": "https://files.pythonhosted.org/packages/f4/33/d9c1dd152531d1bc0a6c76bc4fbacacdeb654a3f769fa90c583e84b5b7d4/pyramid_formencode_classic-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d1f24475613ec68bb77f3cea8f7ffcd8422a0aea9b5a2a2417825b36e39056f",
          "md5": "049597969d9a0acd98bd5a8b1eecc090",
          "sha256": "2db6d66bc7db471ac3bac8296810026bb111ccfe3e7a68c8646c695b68e58114"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "049597969d9a0acd98bd5a8b1eecc090",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7492,
        "upload_time": "2016-01-18T22:54:38",
        "upload_time_iso_8601": "2016-01-18T22:54:38.638392Z",
        "url": "https://files.pythonhosted.org/packages/3d/1f/24475613ec68bb77f3cea8f7ffcd8422a0aea9b5a2a2417825b36e39056f/pyramid_formencode_classic-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a47f99fb60ed11933902836d72843f2662de4a1065e94729f2bb3e41e873dc0",
          "md5": "8d22be17a998f96ccd4295aa77be308b",
          "sha256": "a0eb4497f8706c2ede5f67118058ff6c9c578b6e8d416fd4ddcc105cb54c4c20"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8d22be17a998f96ccd4295aa77be308b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7960,
        "upload_time": "2017-08-31T23:39:38",
        "upload_time_iso_8601": "2017-08-31T23:39:38.706473Z",
        "url": "https://files.pythonhosted.org/packages/3a/47/f99fb60ed11933902836d72843f2662de4a1065e94729f2bb3e41e873dc0/pyramid_formencode_classic-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd18607e25e3b1cd8db175c5a356d541674d4fb697f88cd83858f65674a4f301",
          "md5": "bdd5987e6fee55c1ca121309a454c674",
          "sha256": "ad7856ac27fb903ac431b0a1d121d178540d721f3faf514a744fec9451d5aa39"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd5987e6fee55c1ca121309a454c674",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22981,
        "upload_time": "2018-07-11T21:38:13",
        "upload_time_iso_8601": "2018-07-11T21:38:13.450239Z",
        "url": "https://files.pythonhosted.org/packages/dd/18/607e25e3b1cd8db175c5a356d541674d4fb697f88cd83858f65674a4f301/pyramid_formencode_classic-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "366b99a80e81953de326c1676eaef36180dd5b98bcc758b479a714210a7430f7",
          "md5": "eb98ed21953bb05bfddc8b0e7531d6f2",
          "sha256": "88b79cf78394f90b51588718e3cb337f9e5be9aab6172cec792cda10d0157069"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb98ed21953bb05bfddc8b0e7531d6f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22944,
        "upload_time": "2019-05-01T18:24:31",
        "upload_time_iso_8601": "2019-05-01T18:24:31.922308Z",
        "url": "https://files.pythonhosted.org/packages/36/6b/99a80e81953de326c1676eaef36180dd5b98bcc758b479a714210a7430f7/pyramid_formencode_classic-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a746889227bf12839ef4f90fef3db7b6eb46c55c5424b20ba432133ba4900a5",
          "md5": "6053caa457617306bf8fe0f59f725895",
          "sha256": "bc6d4fd811ecc93b8f3d64185a5a76812b18e76f197211f77486c539af9b7d60"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6053caa457617306bf8fe0f59f725895",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23073,
        "upload_time": "2019-09-03T19:29:11",
        "upload_time_iso_8601": "2019-09-03T19:29:11.559393Z",
        "url": "https://files.pythonhosted.org/packages/0a/74/6889227bf12839ef4f90fef3db7b6eb46c55c5424b20ba432133ba4900a5/pyramid_formencode_classic-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff9f6c89150caa102b24f006c1c1a8e8d31993baa01769b8138b0997c1362d4b",
          "md5": "22f5d835ceb742d9f0a79736e0c2bbbc",
          "sha256": "6793bcee98dde28cea7a316ba996cb8a9d76f3e382c42b759e6aaea00160fcf7"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22f5d835ceb742d9f0a79736e0c2bbbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26747,
        "upload_time": "2020-01-28T21:45:59",
        "upload_time_iso_8601": "2020-01-28T21:45:59.495338Z",
        "url": "https://files.pythonhosted.org/packages/ff/9f/6c89150caa102b24f006c1c1a8e8d31993baa01769b8138b0997c1362d4b/pyramid_formencode_classic-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9988abc3f5817c2f50358171b654b8b5c9ea7c99828c083017f71242e67e3540",
          "md5": "301f3d56d1e7a1fbc773534b555f5d31",
          "sha256": "97bfd0e80c5f2ded1ebd84b1200ff0f7dfe10c366bb304a4a53f3e2dc817f455"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "301f3d56d1e7a1fbc773534b555f5d31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27065,
        "upload_time": "2020-02-04T23:01:52",
        "upload_time_iso_8601": "2020-02-04T23:01:52.604329Z",
        "url": "https://files.pythonhosted.org/packages/99/88/abc3f5817c2f50358171b654b8b5c9ea7c99828c083017f71242e67e3540/pyramid_formencode_classic-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f4eb0b2acb123b8efe2cac673e4390d7f9859056c42ceb2f8ebca4b9e363678",
          "md5": "f3c1fc5beb2a48a251783ee2380d35e3",
          "sha256": "c209da7d7100198ceadff7c9a85f0c0ffe7990909e167c29ec7734a879fceb23"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f3c1fc5beb2a48a251783ee2380d35e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27777,
        "upload_time": "2020-10-13T00:28:36",
        "upload_time_iso_8601": "2020-10-13T00:28:36.031799Z",
        "url": "https://files.pythonhosted.org/packages/2f/4e/b0b2acb123b8efe2cac673e4390d7f9859056c42ceb2f8ebca4b9e363678/pyramid_formencode_classic-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c898c285bff879392077255d877dbdad0315ac1ba9431909a904cd68fe9cbdd",
          "md5": "a22ff32e069172ae2a6ae2ff9dd17878",
          "sha256": "34027d5662083c9f27155126db18f109daf987f3e18fbb7cf8f617f1c2b91eae"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a22ff32e069172ae2a6ae2ff9dd17878",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35653,
        "upload_time": "2020-10-20T23:53:35",
        "upload_time_iso_8601": "2020-10-20T23:53:35.986161Z",
        "url": "https://files.pythonhosted.org/packages/5c/89/8c285bff879392077255d877dbdad0315ac1ba9431909a904cd68fe9cbdd/pyramid_formencode_classic-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c6f3a8fa81e998f83d345ff42a3772fe82b186ad1fbdf1c360e97567df6967b",
          "md5": "1600edf31d1def29606059f8797998df",
          "sha256": "86047355e3b2a76942efb678cf0a6dddbfce35bf938e0d29f270fa80ab257c87"
        },
        "downloads": -1,
        "filename": "pyramid_formencode_classic-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1600edf31d1def29606059f8797998df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35078,
        "upload_time": "2021-03-25T20:41:57",
        "upload_time_iso_8601": "2021-03-25T20:41:57.530786Z",
        "url": "https://files.pythonhosted.org/packages/9c/6f/3a8fa81e998f83d345ff42a3772fe82b186ad1fbdf1c360e97567df6967b/pyramid_formencode_classic-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c6f3a8fa81e998f83d345ff42a3772fe82b186ad1fbdf1c360e97567df6967b",
        "md5": "1600edf31d1def29606059f8797998df",
        "sha256": "86047355e3b2a76942efb678cf0a6dddbfce35bf938e0d29f270fa80ab257c87"
      },
      "downloads": -1,
      "filename": "pyramid_formencode_classic-0.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1600edf31d1def29606059f8797998df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35078,
      "upload_time": "2021-03-25T20:41:57",
      "upload_time_iso_8601": "2021-03-25T20:41:57.530786Z",
      "url": "https://files.pythonhosted.org/packages/9c/6f/3a8fa81e998f83d345ff42a3772fe82b186ad1fbdf1c360e97567df6967b/pyramid_formencode_classic-0.4.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}