{
  "info": {
    "author": "Michel Albert",
    "author_email": "michel@albert.lu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Generic Colorizer\n=================\n\n.. note:: Inspired by http://kassiopeia.juls.savba.sk/~garabik/software/grc.html\n\n``strec`` allows you to colorize (even transform) shell output.\n\nAlternatives\n============\n\nThe original ``grc``\n--------------------\n\nAvailable at http://kassiopeia.juls.savba.sk/~garabik/software/grc.html\n\nWhile the original ``grc`` is a bit smarter with subprocesses, this rewrite\nfocuses on ease of use (including Installation, `Configuration`_ and\n`source-code access`_).\n\nInstallation should also honour the `Linux FHS`_\n\n``sed`` or ``awk``\n------------------\n\n``sed`` and ``awk`` are extremely powerful tools, and can certainly do what\n``strec`` does. They will certainly perform better on large streams. It's their\nintended use afterall. *However*, they both use an archaic and arcane syntax\nfor their scripts. Additionally, if you would like to colorize your output with\nthese, you need to work with ANSI escape sequences. ``strec`` aims to simplify\nthis by having a more readable `Configuration`_ syntax, and by hiding the ANSI\nescape sequences.\n\nSee the installation document for more information.\n\nUsage\n=====\n\nRead lines from ``stdin`` and emit modified/colorized lines on ``stdout``\n-------------------------------------------------------------------------\n\n.. note:: This is the best supported mode of operation.\n\nSynopsis\n~~~~~~~~\n\n::\n\n    <some_process> | strec -c <config>\n\nExample\n~~~~~~~\n\n::\n\n    tail -f /var/log/apache2/access.log | strec -c apache_access\n\n**Advantages**\n    * Only the stream you are sending to ``strec`` is affected.\n    * No known side-effects\n\n**Disadvantages**\n    * As ``strec`` only sees a stream, it cannot determine what application is\n      emitting the stream. You have to specify the config manually.\n\nSpawn a subprocess, capture it's output\n---------------------------------------\n\n.. note:: Use this if you don't care about the downsides, and are lazy to\n          type.\n\nSynopsis\n~~~~~~~~\n\n::\n\n    strec <some_procss>\n\nExample\n~~~~~~~\n\n::\n\n    strec aptitude search python\n\n**Advantages**\n    * Much less to type\n    * Can auto-detect the config by using the sub-process application name.\n\n**Disadvantages**\n    * Spawning a subprocess and interacting with it's IO is non-trivial on a\n      TTY/PTY. To simplify the code, ``strec`` uses ``pexpect`` to do the IO\n      magic.\n    * ``stdout`` and ``stderr`` of the subprocess are combined into one\n      stream, which is then emitten on strec's ``stdout``. [1]_\n    * The output may not use all of the available terminal width. [1]_\n\n\nConfiguration\n=============\n\n``strec`` searches three locations for configuration files in order:\n\n* ``~/.strec/conf.d/<confname>.yml``\n* ``/etc/strec/conf.d/<confname>.yml``\n* ``/usr/share/strec/conf.d/<confname>.yml``\n\nThe first matching config file wins. This means, you can override any\nsystem-wide configs with your own concoctions.\n\nSyntax\n------\n\n``strec`` uses YAML_ as config syntax. Comparing to ``.ini`` and ``json`` files\n(both included in the Python stdlib), this syntax lends itself much better to\nthe requirements of this application.\n\nBasic structure\n---------------\n\n* The config file is separated into sections (contexts). It has to have at least\n  the ``root`` context.\n* Each context has a list of rules. These rules fire if a line contains a\n  given regular expresssion. The first matching rule wins.\n* The line will then be replaced with the string contained in the ``replace``\n  value. You can use back-refs if you used capture groups in your regular\n  expressions. Colours can be insterted using ``${t.color_name}``. You should\n  always insert a ``${t.normal}`` after using a color, to reset to the terminal\n  default. The colors are provided by the package blessings_. The ``t``\n  variable is a reference to a ``blessings`` terminal instance so you should be\n  able to use it as it is documented on the ``blessings`` homepage.\n* Rules may define, that processing should *not* stop using the ``continue:\n  yes`` flag. In that case, the same line will be matched with the following\n  rule as well.\n* Additionally, rules may \"push\" another context onto the stack. If that's the\n  case, the rule will be processed, and all following lines will be matched\n  against rules contained in the context named by the ``push`` value.\n* If in a non-root context, a rule may \"pop\" the current context from the\n  stack using the ``pop: yes`` action.\n\n.. _blessings: https://github.com/erikrose/blessings\n\nSee `Config Reference`_ for more details.\n\nAnnotated Example\n-----------------\n\n::\n\n    # the primary context. This section must exist!\n    root:\n        - match: '^(running)(.*)'\n          # demonstrating replacements /and/ colorizing\n          replace: '*** ${t.green}\\1${t.normal}\\2'\n\n        - match: '^(writing)(.*)'\n          replace: '>>> ${t.yellow}\\1${t.normal}\\2'\n\n        - match: '^(reading)(.*)'\n          replace: '<<< ${t.blue}\\1${t.normal}\\2'\n\n        - match: '^(Processing dependencies for)(.*)'\n          replace: '${t.green}\\1${t.normal}\\2'\n          # switch to the \"dependencies\" context\n          push: dependencies\n\n        - match: '^(Installing.*)'\n          replace: '>>> ${t.green}\\1${t.normal}'\n\n    # the \"dependencies\" context\n    dependencies:\n        - match: '^(Finished processing dependencies for)(.*)'\n          replace: '${t.green}\\1${t.normal}\\2'\n          # Revert back to the \"root\" context\n          pop: yes\n\n        - match: '^(Searching for )(.*)$'\n          replace: '\\1${t.blue}\\2${t.normal}'\n          # switch to the \"dependency\" context\n          push: dependency\n\n    # the \"dependency\" context\n    dependency:\n        # Let's prepend all lines with a small indent and pipe.\n        # To do this, we specify a \"match-all\" regex, replace the line, and\n        # specify that we will continue with the next matching rule using\n        # \"continue\"\n        - match: '(.*)'\n          replace: ' | \\1'\n          continue: yes\n\n        # Note that after the above rule, all lines are prepended with\n        # additional text. We need to include this in the regex!\n        - match: '^ \\| (Installing.*)'\n          replace: ' | >>> ${t.green}\\1${t.normal}'\n\n        - match: '^ \\| (Running.*)'\n          replace: ' | ${t.green}\\1${t.normal}'\n\n        - match: '^ \\| (Best match.*)'\n          replace: ' | ${t.green}\\1${t.normal}'\n\n        - match: '^ \\| (WARNING|warning)'\n          replace: ' | ${t.yellow}\\1${t.normal}'\n\n        - match: '^ \\| Installed(.*)'\n          replace: ' | Installed\\1\\n'\n          pop: yes\n\nConfig Reference\n================\n\nMain Level\n----------\n\n**root**\n    Specifies the primary context\n\nAll other keys represent a context you ``pushed`` somewhere.\n\n\nContexts\n--------\n\nA context is simply a list of rules\n\nRules\n-----\n\n**match**\n    *Type*: ``string``\n\n    A `python regular expression`_. If this matches somewhere in the input\n    line, all occurrences will be replaced with the string specified in\n    ``replace``.\n\n    .. note:: While YAML does not enforce you to enclose strings in quotes, I\n              is strongly recommend you use **single** quotes for regexps to\n              avoid trouble with string escapes (backslashes).\n\n**replace**\n    *Type*: ``string``\n\n    If ``continue`` is false (the default), this string will be emitted to\n    ``stdout``. Otherwise, this string will be passed to the next matching\n    rule. Not that the following rule sees the *modified* string!\n\n    .. note:: While YAML does not enforce you to enclose strings in quotes, I\n              is recommend using **single** quotes if using backreferences\n              (backslashes).\n\n**continue**\n    *Type*: ``boolean``\n\n    If true, don't write the string yet to ``stdout``. Instead, pass it on to\n    the next matching rule.\n\n**push**\n    *Type*: ``string``\n\n    Pushes a new context onto the stack. All following lines from ``stdin``\n    will be matched agains rules in the new context.\n\n    .. note:: This may change in a future release to give you yet more control\n\n**pop**\n    *Type*: ``boolean``\n\n    If this is set to true, then return to the previous context after this\n    rule has been processed. If in the ``root`` context, this is a no-op.\n\n    .. note:: This may change in a future release to give you yet more control\n\nScreenshots\n===========\n\n================ ================\nA python setup session\n---------------------------------\nBefore           After\n================ ================\n|pysetup-shot-b| |pysetup-shot-a|\n================ ================\n\n================= =================\nSimple aptitude search\n-----------------------------------\nBefore            After\n================= =================\n|aptitude-shot-b| |aptitude-shot-a|\n================= =================\n\n====================== ======================\nApache access_log\n---------------------------------------------\nBefore                 After\n====================== ======================\n|apache_access-shot-b| |apache_access-shot-a|\n====================== ======================\n\nFootnotes\n=========\n\n.. [1] ``strec`` uses ``pyexpect`` to deal with TTY pecularities. This will\n       however have two side-effects. First, ``stdout`` will be combined with\n       ``stderr``. And second, terminal width may not be well respected.\n\n.. |pysetup-shot-b| image:: /screenshots/pysetup_before.png\n.. |pysetup-shot-a| image:: /screenshots/pysetup_after.png\n.. |aptitude-shot-b| image:: /screenshots/aptitude_before.png\n.. |aptitude-shot-a| image:: /screenshots/aptitude_after.png\n.. |apache_access-shot-b| image:: /screenshots/apache_access_before.png\n.. |apache_access-shot-a| image:: /screenshots/apache_access_after.png\n\n.. _Linux FHS: http://www.pathname.com/fhs/\n.. _source-code access: https://github.com/exhuma/grc\n.. _YAML: http://www.yaml.org\n.. _python regular expression: http://docs.python.org/library/re.html#regular-expression-syntax\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strec",
    "package_url": "https://pypi.org/project/strec/",
    "platform": "",
    "project_url": "https://pypi.org/project/strec/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/strec/1.0.0.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Generic Coloriser",
    "version": "1.0.0.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11732388,
  "releases": {
    "1.0.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8cd3798dc25ee14dc1fdf653edd264240145cf4664ef66773f70beeb6d9dd75",
          "md5": "39ade6a99ecfb0caf508d5b2f491fd47",
          "sha256": "e98cd3f148a8a9a68791f4984fed7e9595ccbb5186414d292ff822af5fe5d133"
        },
        "downloads": -1,
        "filename": "strec-1.0.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "39ade6a99ecfb0caf508d5b2f491fd47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 272834,
        "upload_time": "2021-10-15T05:25:26",
        "upload_time_iso_8601": "2021-10-15T05:25:26.903159Z",
        "url": "https://files.pythonhosted.org/packages/f8/cd/3798dc25ee14dc1fdf653edd264240145cf4664ef66773f70beeb6d9dd75/strec-1.0.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8cd3798dc25ee14dc1fdf653edd264240145cf4664ef66773f70beeb6d9dd75",
        "md5": "39ade6a99ecfb0caf508d5b2f491fd47",
        "sha256": "e98cd3f148a8a9a68791f4984fed7e9595ccbb5186414d292ff822af5fe5d133"
      },
      "downloads": -1,
      "filename": "strec-1.0.0.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "39ade6a99ecfb0caf508d5b2f491fd47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 272834,
      "upload_time": "2021-10-15T05:25:26",
      "upload_time_iso_8601": "2021-10-15T05:25:26.903159Z",
      "url": "https://files.pythonhosted.org/packages/f8/cd/3798dc25ee14dc1fdf653edd264240145cf4664ef66773f70beeb6d9dd75/strec-1.0.0.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}