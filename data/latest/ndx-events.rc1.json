{
  "info": {
    "author": "Ryan Ly",
    "author_email": "rly@lbl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research"
    ],
    "description": "# ndx-events Extension for NWB\n\nThis is an NWB extension for storing timestamped event data and TTL pulses.\n\nEvents can be:\n1. **Simple events**. These are stored in the `Events` type. The `Events` type consists of only a name, a description,\nand a 1D array of timestamps. This should be used instead of a `TimeSeries` when the time series has no data.\n2. **Labeled events**. These are stored in the `LabeledEvents` type. The `LabeledEvents` type expands on the `Events`\ntype by adding 1) a 1D array of integer values (data) with the same length as the timestamps and 2) a 1D array of\nlabels (labels) associated with each unique integer value in the data array. The data values are indices into the\narray of labels. The `LabeledEvents` type can be used to encode additional information about individual events,\nsuch as the reward values for each reward event.\n3. **TTL pulses**. These are stored in the `TTLs` type. The `TTLs` type is a subtype of the `LabeledEvents` type\nspecifically for TTL pulse data. A single instance should be used for all TTL pulse data. The pulse value (or channel)\nshould be stored in the 1D data array, and the labels associated with each pulse value (or channel)\nshould be stored in the 1D array of labels.\n4. **Annotated events**. These are stored in the `AnnotatedEventsTable` type. The `AnnotatedEventsTable` type is a\nsubtype of `DynamicTable`, where each row corresponds to a different event type. The table has a ragged\n(variable-length) 1D column of event times, such that each event type (row) is associated with an array of event times.\nUnlike for the other event types, users can add their own custom columns to annotate each event type or event time.\nThis can be useful for storing event metadata related to data preprocessing and analysis, such as marking bad events.\n\nThis extension was developed by Ryan Ly, Ben Dichter, Oliver RÃ¼bel, and Andrew Tritt. Information about the rationale,\nbackground, and alternative approaches to this extension can be found here:\nhttps://docs.google.com/document/d/1qcsjyFVX9oI_746RdMoDdmQPu940s0YtDjb1en1Xtdw\n\n## Installation\n\n```\npip install ndx-events\n```\n\n## Example usage\n\n```python\nfrom datetime import datetime\n\nfrom pynwb import NWBFile, NWBHDF5IO\nfrom ndx_events import LabeledEvents, AnnotatedEventsTable\n\n\nnwb = NWBFile(\n    session_description='session description',\n    identifier='cool_experiment_001',\n    session_start_time=datetime.now().astimezone()\n)\n\n# create a new LabeledEvents type to hold events recorded from the data acquisition system\nevents = LabeledEvents(\n    name='LabeledEvents',\n    description='events from my experiment',\n    timestamps=[0., 0.5, 0.6, 2., 2.05, 3., 3.5, 3.6, 4.],\n    resolution=1e-5,  # resolution of the timestamps, i.e., smallest possible difference between timestamps\n    data=[0, 1, 2, 3, 5, 0, 1, 2, 4],\n    labels=['trial_start', 'cue_onset', 'cue_offset', 'response_left', 'response_right', 'reward']\n)\n\n# add the LabeledEvents type to the acquisition group of the NWB file\nnwb.add_acquisition(events)\n\n# create a new AnnotatedEventsTable type to hold annotated events\nannotated_events = AnnotatedEventsTable(\n    name='AnnotatedEventsTable',\n    description='annotated events from my experiment',\n    resolution=1e-5  # resolution of the timestamps, i.e., smallest possible difference between timestamps\n)\n# add a custom indexed (ragged) column to represent whether each event time was a bad event\nannotated_events.add_column(\n    name='bad_event',\n    description='whether each event time should be excluded',\n    index=True\n)\n# add an event type (row) to the AnnotatedEventsTable instance\nannotated_events.add_event_type(\n    label='Reward',\n    event_description='Times when the subject received juice reward.',\n    event_times=[1., 2., 3.],\n    bad_event=[False, False, True],\n    id=3\n)\n\n# create a processing module in the NWB file to hold processed events data\nevents_module = nwb.create_processing_module(\n    name='events',\n    description='processed event data'\n)\n\n# add the AnnotatedEventsTable instance to the processing module\nevents_module.add(annotated_events)\n\n# write nwb file\nfilename = 'test.nwb'\nwith NWBHDF5IO(filename, 'w') as io:\n    io.write(nwb)\n\n# read nwb file and check its contents\nwith NWBHDF5IO(filename, 'r', load_namespaces=True) as io:\n    nwb = io.read()\n    print(nwb)\n```\n\nThis extension was created using [ndx-template](https://github.com/nwb-extensions/ndx-template).\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rly/ndx-events",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ndx-events",
    "package_url": "https://pypi.org/project/ndx-events/",
    "platform": "",
    "project_url": "https://pypi.org/project/ndx-events/",
    "project_urls": {
      "Homepage": "https://github.com/rly/ndx-events"
    },
    "release_url": "https://pypi.org/project/ndx-events/0.2.0/",
    "requires_dist": [
      "pynwb (>=1.1.2)"
    ],
    "requires_python": "",
    "summary": "NWB extension for storing timestamped event and TTL pulse data",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14758758,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9ca80b271590d381d958864936478a7c7807a7e7cb0a11a0b51e65c3fb3d84d",
          "md5": "e8840977416fc58e1c2bb317728e0e4f",
          "sha256": "9db80ab09b11979c1678d948f6a7cb7ee2833f3d743e660391b731f6c15320af"
        },
        "downloads": -1,
        "filename": "ndx_events-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8840977416fc58e1c2bb317728e0e4f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13860,
        "upload_time": "2020-10-20T23:32:37",
        "upload_time_iso_8601": "2020-10-20T23:32:37.890706Z",
        "url": "https://files.pythonhosted.org/packages/c9/ca/80b271590d381d958864936478a7c7807a7e7cb0a11a0b51e65c3fb3d84d/ndx_events-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc8efee05ba54096c7018a899a792c771f273350a88048cb279a99da58ffdbd5",
          "md5": "a02c00e9a6a398e7b21a534562aa1b98",
          "sha256": "25eceed121a9b889b35e7d32dba8c7c3d53ae22c28757942643ace970344c25b"
        },
        "downloads": -1,
        "filename": "ndx-events-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a02c00e9a6a398e7b21a534562aa1b98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46647,
        "upload_time": "2020-10-20T23:32:40",
        "upload_time_iso_8601": "2020-10-20T23:32:40.455305Z",
        "url": "https://files.pythonhosted.org/packages/cc/8e/fee05ba54096c7018a899a792c771f273350a88048cb279a99da58ffdbd5/ndx-events-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9ca80b271590d381d958864936478a7c7807a7e7cb0a11a0b51e65c3fb3d84d",
        "md5": "e8840977416fc58e1c2bb317728e0e4f",
        "sha256": "9db80ab09b11979c1678d948f6a7cb7ee2833f3d743e660391b731f6c15320af"
      },
      "downloads": -1,
      "filename": "ndx_events-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8840977416fc58e1c2bb317728e0e4f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13860,
      "upload_time": "2020-10-20T23:32:37",
      "upload_time_iso_8601": "2020-10-20T23:32:37.890706Z",
      "url": "https://files.pythonhosted.org/packages/c9/ca/80b271590d381d958864936478a7c7807a7e7cb0a11a0b51e65c3fb3d84d/ndx_events-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc8efee05ba54096c7018a899a792c771f273350a88048cb279a99da58ffdbd5",
        "md5": "a02c00e9a6a398e7b21a534562aa1b98",
        "sha256": "25eceed121a9b889b35e7d32dba8c7c3d53ae22c28757942643ace970344c25b"
      },
      "downloads": -1,
      "filename": "ndx-events-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a02c00e9a6a398e7b21a534562aa1b98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46647,
      "upload_time": "2020-10-20T23:32:40",
      "upload_time_iso_8601": "2020-10-20T23:32:40.455305Z",
      "url": "https://files.pythonhosted.org/packages/cc/8e/fee05ba54096c7018a899a792c771f273350a88048cb279a99da58ffdbd5/ndx-events-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}