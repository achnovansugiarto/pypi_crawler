{
  "info": {
    "author": "Michael Imelfort",
    "author_email": "mike@mikeimelfort.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# vitalHarshArm\n\n## Overview\n\nPython library for creating memory efficient C++ classes\n\n## Installation\n\nShould be as simple as\n\n    pip install vitalHarshArm\n\n## Example usage\n\n\tvitalHarshArm <template> [-f <folder>] [-t]\n\n\tWill create c++ code corresponding to the classes defined in the template file.\n\n\t-f specifies the folder to create the code in\n\t-t will make a Makefile and a test.cpp file to allow for quick testing\n\n### VHA template overview:\n\nYou should include all class templates in ONE template file. VHA will\nproduce a set of .cpp and .h files which you can copy into your project\ndirectory. You should NOT modify these files by hand. Instead they should\nbe wrapped and accessed via that wrapper.\n\n### Template fields:\n\nYou can specify any number of fields for each class and VHA will produce\nappropriate get and set routines. Routines automatically provided are:\n\nint      : signed integer             : Get Set Increment Decrement Clear\nuint     : unsigned integer           : Get Set Increment Decrement Clear\npointer  : pointer to tclass instance : Get Set Clear\nbdata    : blocked data container     : Get GetByIndex Set SetByIndex Clear\nflag     : boolean flag               : Is Set Clear\nfloat    : floating point number      : Get Set Clear\n\n###Template format:\n\nTemplates are written in modified JSON format that allows C-style comments.\nCompulsory words are prefixed with a '_'.\n\n    {\n        \"_size_of_int\"         : 32|64,\n        \"_size_of_idtype\"      : 32|64,\n        \"_classes\" : [\n            {\n                \"_className\"   : \"<string>\",                      // Name of the class (Must be unique)\n                \"_prefix\"      : \"<string>\",                      // Prefix associated with MACRO statements for this class\n                \"_description\" : \"<string>\",                      // Description of the class\n                \"_defines\"     : { \"KEY\" : \"VALUE\" } [,... ]},    // Macro definitons (#define KEY VALUE)\n                \"_deleteable\"  : \"True|False\",                    // Instances can be deleted*\n                \"_active\"      : \"True|False\",                    // Use this template\n                \"_realloc\"     : [integer [,integer,...] ]        // Determines how memory is reallocated**\n                \"_fields\"      : [                                // Class fields***\n                    {\n                        // for all ints the format is consistent\n                        \"_f0\"  : { \"_type\":\"int|uint\", \"_size\":integer, \"_name\":\"<string>\", \"_comment\":\"<string>\"},\n                        // pointer size is set (_size_of_idtype), however we need to know what 'type' we're pointing 'at'\n                        \"_f1\"  : { \"_type\":\"pointer\", \"_at\":\"className\", \"_name\":\"<string>\", \"_comment\":\"<string>\"},\n                        // flags are always one bit\n                        \"_f2\"  : { \"_type\":\"flag\", \"_name\":\"<string>\", \"_comment\":\"<string>\"}\n                        // the size of floats is decided by the compiler\n                        \"_f3\"  : { \"_type\":\"float\", \"_name\":\"<string>\", \"_comment\":\"<string>\"}\n                        // bdata is an array of integers. You can decide the 'blocksize' and 'size' of the array****\n                        \"_f4\"  : { \"_type\":\"bdata\", \"_size\":<integer>, \"_blocksize\":8|16|32|64, \"_name\":\"<string>\", \"_comment\":\"<string>\"}\n                        ...\n                    }\n                ]\n            }[,{..}]\n        ]\n    }\n\n*       If this flag is set to False then you can not delete instances. This speeds things up a bit.\n\n**      When you instantiate one of the classes you tell it how many spaces to pre-allocate. Ex: calling Foo(80) will pre-allocate space for 80 Foos.\n        When this space is used up the memory management will automatically allocate more space. The integers here specify how this will happen.\n        \"_realloc\" : [1]        --> keep reallocating the same number of spaces as originally allocated. ie. 80 Foos each time\n        \"_realloc\" : [1,2]      --> allocate the same as original on the first reallocation and then half as many spaces as the original for all subsequent allocations. 80 Foos then 40 Foos for all subsequent allocations.\n        \"_realloc\" : [1,2,4]    --> 80 Foos, then 40 Foos, then 20 Foos for all subsequent allocation.\n\n***     Fields are always identified as \"_f0\", \"_f1\", ... , \"_fn\". This isn't used the cpp, just when making it.\n\n****    _size indicates the length of the array, _blocksize is any int flavour from <stdint> (uint8_t, uint16_t, ...)\n\nSee the test folder for a working template example.\n\n\n## Help\n\nIf you experience any problems using vitalHarshArm, open an [issue](https://github.com/minillinim/vitalHarshArm/issues) on GitHub and tell us about it.\n\n## Licence and referencing\n\nProject home page, info on the source tree, documentation, issues and how to contribute, see http://github.com/minillinim/vitalHarshArm\n\nThis software is currently unpublished\n\n## Copyright\n\nCopyright (c) 2014 Michael Imelfort. See LICENSE.txt for further details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/vitalHarshArm/",
    "keywords": null,
    "license": "LGPLv2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "vitalHarshArm",
    "package_url": "https://pypi.org/project/vitalHarshArm/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/vitalHarshArm/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/vitalHarshArm/"
    },
    "release_url": "https://pypi.org/project/vitalHarshArm/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "vitalHarshArm",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 977889,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbfacd3fbea91f3976df93a4a862f5184996e01d38e67255fc95ec7806d5b3f3",
          "md5": "b6d2c6fb65ba7f5a5bb09204e31e92db",
          "sha256": "197f949a2cbbaf0087a1ecdf21e293ba7718c8ab3c454bbfaa57c835e45d502c"
        },
        "downloads": -1,
        "filename": "vitalHarshArm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6d2c6fb65ba7f5a5bb09204e31e92db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13036,
        "upload_time": "2013-05-24T02:17:57",
        "upload_time_iso_8601": "2013-05-24T02:17:57.102925Z",
        "url": "https://files.pythonhosted.org/packages/cb/fa/cd3fbea91f3976df93a4a862f5184996e01d38e67255fc95ec7806d5b3f3/vitalHarshArm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b78c72adadc6a359bcf0304bc297bb52cc245925774ad278a8dc19cfcded2baa",
          "md5": "2f7bef23f27ea18ba6adea4b614a89d9",
          "sha256": "2d95550d947fa22bb5a8860a4e7e673b2abb5d4094342cea308bd40e399ea28f"
        },
        "downloads": -1,
        "filename": "vitalHarshArm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f7bef23f27ea18ba6adea4b614a89d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16075,
        "upload_time": "2014-01-23T06:14:03",
        "upload_time_iso_8601": "2014-01-23T06:14:03.476488Z",
        "url": "https://files.pythonhosted.org/packages/b7/8c/72adadc6a359bcf0304bc297bb52cc245925774ad278a8dc19cfcded2baa/vitalHarshArm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b78c72adadc6a359bcf0304bc297bb52cc245925774ad278a8dc19cfcded2baa",
        "md5": "2f7bef23f27ea18ba6adea4b614a89d9",
        "sha256": "2d95550d947fa22bb5a8860a4e7e673b2abb5d4094342cea308bd40e399ea28f"
      },
      "downloads": -1,
      "filename": "vitalHarshArm-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2f7bef23f27ea18ba6adea4b614a89d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16075,
      "upload_time": "2014-01-23T06:14:03",
      "upload_time_iso_8601": "2014-01-23T06:14:03.476488Z",
      "url": "https://files.pythonhosted.org/packages/b7/8c/72adadc6a359bcf0304bc297bb52cc245925774ad278a8dc19cfcded2baa/vitalHarshArm-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}