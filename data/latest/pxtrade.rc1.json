{
  "info": {
    "author": "Simon Garisch",
    "author_email": "gatman946@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## pxtrade\n[![Build Status](https://travis-ci.org/simongarisch/pxtrade.svg?branch=master)](https://travis-ci.org/simongarisch/pxtrade)\n[![Coverage Status](https://coveralls.io/repos/github/simongarisch/pxtrade/badge.svg)](https://coveralls.io/github/simongarisch/pxtrade?branch=master)\n\nA multi currency, event driven backtester written in Python.\n\n\n### Installation\n```bash\npip install pxtrade\n```\n\n### Examples\n[Notebooks](https://github.com/simongarisch/pxtrade/tree/master/notes) are available to cover the main concepts and examples.\n-  [equities buy and hold](https://github.com/simongarisch/pxtrade/blob/master/notes/06%20Example%20-%20Buy%20And%20Hold.ipynb)\n-  [fx trading](https://github.com/simongarisch/pxtrade/blob/master/notes/08%20Example%20-%20FX.ipynb)\n-  [bitcoin](https://github.com/simongarisch/pxtrade/blob/master/notes/09%20Example%20-%20Bitcoin.ipynb)\n-  [Intraday trading](https://github.com/simongarisch/pxtrade/blob/master/notes/11%20Example%20-%20FX%20Intraday%20with%20Benchmark.ipynb)\n\n### Assets and Portfolios\nBefore we can run a backtest we need to define the assets and portfolios involved.\n```python\nfrom pxtrade.assets import reset, Cash, Stock, FxRate, Portfolio\n\n\nreset()\naud = Cash(\"AUD\")\nusd = Cash(\"USD\")\naudusd = FxRate(\"AUDUSD\")\nspy = Stock(\"SPY\")\nportfolio = Portfolio(\"USD\", code=\"Portfolio\")  # a portfolio denominated in USD\nbenchmark = Portfolio(\"USD\", code=\"Benchmark\")\n\nprint(portfolio)\n```\nPortfolio('USD')\n\n\n\n```python\nportfolio.transfer(usd, 1e6)  # start both with 1M USD\nbenchmark.transfer(usd, 1e6)\n\nprint(portfolio)\n```\nPortfolio('USD'):\nCash('USD', 1.0, currency_code='USD'): 1,000,000\n\n\n```python\nportfolio.value\n```\n1000000.0\n\n\n\n### Imposing portfolio constraints through compliance\nIdeally there will be risk limits in place when running a backtest. Some concrete compliance rules are provided, but you can also define your own by [inheriting from ComplianceRule](https://github.com/simongarisch/pxtrade/blob/master/notes/02%20The%20Trade%20Lifecycle.ipynb).\n\n```python\nfrom pxtrade.compliance import Compliance, UnitLimit\n\n\nfor port in [portfolio, benchmark]:\n    port.compliance = Compliance().add_rule(\n        UnitLimit(spy, 1000)\n    )\n```\n\n### Defining a portfolio broker\nDifferent portfolios / strategies are likely to vary materially in broker charges. All portfolios have a default broker that executes trades at the last price with no charge (or slippage). Brokers have separate execution and charges strategies. You can use the classes available or define custom strategies by inheriting from  [AbstractExecution](https://github.com/simongarisch/pxtrade/blob/master/pxtrade/broker/execution.py#L6) or [AbstractCharges](https://github.com/simongarisch/pxtrade/blob/master/pxtrade/broker/charges.py#L8). Note that backtesting supports multiple currencies. The portfolio could be denominated in USD, for example, but broker charges defined in AUD terms.\n\n\n```python\nfrom pxtrade.broker import (\n    Broker, \n    FillAtLastWithSlippage,\n    FixedRatePlusPercentage,\n)\n\n\nportfolio.broker = Broker(\n    execution_strategy=FillAtLastWithSlippage(0),  # no slippage, just fill at last\n    charges_strategy=FixedRatePlusPercentage(20, 0, currency_code=\"AUD\")  # fixed charge of AUD 20 per trade.\n)\n```\n\n### Defining a trading strategy\nAll strategy classes must inherit from pxtrade.Strategy and implement a generate_trades method. Note that the trades returned can either be None, a trade instance or list or trades.\n\n```python\nfrom pxtrade import Strategy, Trade \n\n\nclass ExampleStrategy(Strategy):\n    def generate_trades(self):\n        trades = list()\n\n        # get the portfolio trades first\n        if spy.price < 330:\n            trades.append(Trade(portfolio, spy, +100))\n\n        trades.append(Trade(benchmark, spy, +1000))\n\n        return trades\n```\n\n### The backtest instance and trade history\nA backtest takes a strategy instance as its argument. Any instances of History then record state through time as events are processed.\n\n```python\nfrom pxtrade import Backtest, History\n\n\nbacktest = Backtest(ExampleStrategy())\n\nhistory = History(\n    portfolios=[portfolio, benchmark],\n    backtest=backtest\n)\n```\n\n### [Loading event data](https://github.com/simongarisch/pxtrade/blob/master/notes/05%20Bulk%20Event%20Loads.ipynb)\nEvents can be loaded either from yahoo finance or from an existing data frame.\n\n```python\nfrom datetime import date\nfrom pxtrade.events.yahoo import load_yahoo_prices\n\n\nstart_date = date(2020, 6, 30)\nend_date = date(2020, 9, 30)\n\nload_yahoo_prices(\n    [spy, audusd], backtest,\n    start_date=start_date,\n    end_date=end_date,\n)\n```\n\n### Running the backtest and collecting history\n\n```python\nbacktest.run()\n\ndf = history.get()\n```\n\n```python\ndf.columns\n```\n    Index(['AUD', 'AUDUSD', 'Benchmark', 'Benchmark_AUD', 'Benchmark_SPY',\n           'Benchmark_USD', 'Portfolio', 'Portfolio_AUD', 'Portfolio_SPY',\n           'Portfolio_USD', 'SPY', 'USD'],\n          dtype='object')\n\n```python\nimport cufflinks as cf\n\n\ncolumns = [\"Portfolio_SPY\", \"Benchmark_SPY\", \"SPY\"]\ndf[columns].iplot(\n    secondary_y=\"SPY\",\n    title=\"Portfolio Holdings of SPY\",\n)\n```\n![holdings](https://github.com/simongarisch/pxtrade/blob/master/notes/portfolio_holdings_of_spy.png?raw=true)\n\n\n```python\ncolumns = [\"Portfolio\", \"Benchmark\"]\ndf[columns].iplot(\n    title=\"Portfolio Value\",\n)\n```\n![holdings](https://github.com/simongarisch/pxtrade/blob/master/notes/portfolio_value.png?raw=true)\n\n***\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simongarisch/pxtrade",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pxtrade",
    "package_url": "https://pypi.org/project/pxtrade/",
    "platform": "",
    "project_url": "https://pypi.org/project/pxtrade/",
    "project_urls": {
      "Homepage": "https://github.com/simongarisch/pxtrade"
    },
    "release_url": "https://pypi.org/project/pxtrade/0.2.0/",
    "requires_dist": [
      "pandas (>=1.1.1)",
      "pandas-datareader (>=0.9.0)",
      "ipython (==7.15.0)",
      "cufflinks (>=0.17.3)"
    ],
    "requires_python": "",
    "summary": "A multi currency, event driven backtester written in Python.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8443024,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a44e8758ef3cd649bf60791ce4bb424b34dc3e989201bf4536ed6612a09c2e68",
          "md5": "d53016d595cb28fb70c99c955666b186",
          "sha256": "7f6e553d22a9c20f9b899e2353120a383745550bcb4e7d4179c0a2a751c550cd"
        },
        "downloads": -1,
        "filename": "pxtrade-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d53016d595cb28fb70c99c955666b186",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25670,
        "upload_time": "2020-10-19T02:26:18",
        "upload_time_iso_8601": "2020-10-19T02:26:18.732832Z",
        "url": "https://files.pythonhosted.org/packages/a4/4e/8758ef3cd649bf60791ce4bb424b34dc3e989201bf4536ed6612a09c2e68/pxtrade-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a63f3e4c4d2296a82d8a225c67273f110130d8f9517717074e19212a0158f49e",
          "md5": "fdd1b3eabfa4b2e9d6edbc9d38ade838",
          "sha256": "53588b760df9e304ee39e1f146461bec84a62f589fa0842d645f98f60ac22af9"
        },
        "downloads": -1,
        "filename": "pxtrade-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fdd1b3eabfa4b2e9d6edbc9d38ade838",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18071,
        "upload_time": "2020-10-19T02:26:21",
        "upload_time_iso_8601": "2020-10-19T02:26:21.425186Z",
        "url": "https://files.pythonhosted.org/packages/a6/3f/3e4c4d2296a82d8a225c67273f110130d8f9517717074e19212a0158f49e/pxtrade-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a44e8758ef3cd649bf60791ce4bb424b34dc3e989201bf4536ed6612a09c2e68",
        "md5": "d53016d595cb28fb70c99c955666b186",
        "sha256": "7f6e553d22a9c20f9b899e2353120a383745550bcb4e7d4179c0a2a751c550cd"
      },
      "downloads": -1,
      "filename": "pxtrade-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d53016d595cb28fb70c99c955666b186",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25670,
      "upload_time": "2020-10-19T02:26:18",
      "upload_time_iso_8601": "2020-10-19T02:26:18.732832Z",
      "url": "https://files.pythonhosted.org/packages/a4/4e/8758ef3cd649bf60791ce4bb424b34dc3e989201bf4536ed6612a09c2e68/pxtrade-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a63f3e4c4d2296a82d8a225c67273f110130d8f9517717074e19212a0158f49e",
        "md5": "fdd1b3eabfa4b2e9d6edbc9d38ade838",
        "sha256": "53588b760df9e304ee39e1f146461bec84a62f589fa0842d645f98f60ac22af9"
      },
      "downloads": -1,
      "filename": "pxtrade-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fdd1b3eabfa4b2e9d6edbc9d38ade838",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18071,
      "upload_time": "2020-10-19T02:26:21",
      "upload_time_iso_8601": "2020-10-19T02:26:21.425186Z",
      "url": "https://files.pythonhosted.org/packages/a6/3f/3e4c4d2296a82d8a225c67273f110130d8f9517717074e19212a0158f49e/pxtrade-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}