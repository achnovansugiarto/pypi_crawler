{
  "info": {
    "author": "",
    "author_email": "Renato Lui Geh <renatogeh@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# PASP - Probabilistic Answer Set Programming\n\n[![Tests](https://github.com/RenatoGeh/pasp/actions/workflows/tests.yml/badge.svg)](https://github.com/RenatoGeh/pasp/actions/workflows/tests.yml)\n[![Docs](https://github.com/RenatoGeh/pasp/actions/workflows/docs.yml/badge.svg)](https://github.com/RenatoGeh/pasp/actions/workflows/docs.yml)\n[![](https://img.shields.io/badge/docs-master-blue.svg)](https://renatogeh.github.io/pasp)\n[![GitHub](https://img.shields.io/github/license/RenatoGeh/pasp?color=blue&label=License)](https://github.com/RenatoGeh/pasp/blob/master/LICENSE)\n\nImplementation of a neural-probabilistic ASP language [[1]](#ref-1)[[2]](#ref-2), with inference\nand learning. Example probabilistic logic programs may be found in [`examples/`](examples/). See\nfull API documentation [here](https://renatogeh.github.io/pasp/pasp.html). Let's take a look at\nsome examples to show how to do inference with this package.\n\n## Examples\n\nLet's first take a look at the popular `asia` Bayesian network, here encoded as the probabilistic\nlogic program [`examples/asia.lp`](examples/asia.lp).\n\n```pasp\n0.01::trip. 0.5::smoking.\n0.05::tuberculosis :- trip.\n0.01::tuberculosis :- not trip.\n0.1::cancer :- smoking.\n0.01::cancer :- not smoking.\nor :- tuberculosis. or :- cancer.\n0.98::test :- or.\n0.05::test :- not or.\n```\n\nThe code below specifies the probabilities and the rules of our domain. Any fact can be preceded by\na probability `p` followed by double colons `::` (e.g., `0.01::trip` and `0.5::smoking`), meaning\nthat this fact may appear in the logic program with probability `p` and not appear with probability\n`1-p`; we call these *probabilistic facts*. If no probability is given, then the fact must always\nappear.\n\nBesides facts, we also have rules. These are of the form `head :- body`, implications stating that\n`head` will be proven true if `body` is provably true. For now, `head` must either be empty (an\nintegrity constraint) or a single atom. On the other hand, `body` may contain multiple atoms,\ncalled *subgoals*. Similar to facts, we may have some probability coupled with rules, in which case\nwe call them *probabilistic rules*. Probabilistic rules follow the same syntax as probabilistic\nfacts; in fact, they are only syntax sugar, as the package unrolls them as a rule with a unique\nprobabilistic fact as one of its subgoals.\n\n```pasp\n% The following probabilistic rule\n0.05::tuberculosis :- trip.\n\n% is equivalent to\n0.05::a.\ntuberculosis :- trip, a.\n\n% where a is a unique atom.\n```\n\n`pasp` also supports probabilistic rules with variables (e.g. `0.3::f(X) :- g(X).`), although these\nare (for now) constrained to only normal rules. Internally, what `pasp` does is ground these rules\nand then apply the transformation mentioned above, adding a probabilistic fact to the body of the\ngrounded rule. For efficiency reasons, subgoals in first-order probabilistic rules are only\ngrounded following the non-probabilistic part of the program; otherwise, at every total choice a\nnew grounded program would have to be generated.\n\nLet's take a look at the remaining lines in [`examples/asia.lp`](examples/asia.lp). To query for\nprobabilities, we use a similar syntax to [PASOCS](https://arxiv.org/abs/2105.10908).\n\n```pasp\n#query(trip)\n#query(tuberculosis | trip)\n#query(cancer | smoking)\n#query(test | or)\n#query(smoking)\n#query(tuberculosis | not trip)\n#query(cancer | not smoking)\n#query(test | not or)\n```\n\nThe lines above ask for the probabilities of atoms. For instance, `#query(trip)` is asking for the\nprobability that `trip` is provably true $\\mathbb{P}(\\texttt{trip})$, while `#query(tuberculosis |\nnot trip)` is asking for the probability of `tuberculosis` being provably true given that we know\n`trip` not to be $\\mathbb{P}(\\texttt{tuberculosis}|\\neg\\texttt{trip})$. We may ask more complex\nqueries by aggregating atoms with a comma; for instance `#query(tuberculosis, not cancer | not\nsmoking, trip)` asks the probability\n$\\mathbb{P}(\\texttt{tuberculosis},\\neg\\texttt{cancer}|\\neg\\texttt{smoking},\\texttt{trip})$.\n\nIf we are working with the credal semantics (more on this later), then each one of these queries\nwill return a tuple of lower and upper probabilities. Let's ask the package to provide these\nprobabilities (for the command-line syntax of `pasp`, see [Usage](#command-line-usage). We first\ninspect our Probabilistic Logic Program (PLP).\n\n```python\n>>> import pasp\n>>> P = pasp.parse(\"examples/asia.lp\")\n>>> print(P)\n```\n```\n<Logic Program:\ntuberculosis :- trip, __unique_id_4.\ntuberculosis :- not trip, __unique_id_5.\ncancer :- smoking, __unique_id_6.\ncancer :- not smoking, __unique_id_7.\nor :- tuberculosis.\nor :- cancer.\ntest :- or, __unique_id_8.\ntest :- not or, __unique_id_9.,\nProbabilistic Facts:\n[0.01::trip, 0.5::smoking, 0.05::__unique_id_4, 0.01::__unique_id_5, 0.1::__unique_id_6, 0.01::__unique_id_7, 0.98::__unique_id_8, 0.05::__unique_id_9],\nCredal Facts:\n[]\nProbabilistic Rules:\n[0.05::tuberculosis :- trip, 0.01::tuberculosis :- not trip, 0.1::cancer :- smoking, 0.01::cancer :- not smoking, 0.98::test :- or, 0.05::test :- not or],\nQueries\n[ℙ(trip), ℙ(tuberculosis | trip), ℙ(cancer | smoking), ℙ(test | or), ℙ(smoking), ℙ(tuberculosis | not trip), ℙ(cancer | not smoking), ℙ(test | not or)]>\n```\n\nA PLP, here the Python object `P`, is a tuple $\\langle L,PF,CF,PR,Q \\rangle$, where $L$ is the\nlogic program composed solely of logic facts and rules, $PF$ are the probabilistic facts, $CF$ are\nthe credal facts (see [`examples/prisoners.lp`](examples/prisoners.lp)), $PR$ are probabilistic\nrules, $and $Q$ are the queries to be asked from the solver. We can see from the output above the\ngenerated rules and probabilistic facts produced by the unrolling of probabilistic rules as well as\nthe queries to be asked.\n\nLet's ask the solver to produce the exact probabilities we asked. We can do so by running the\n`exact` function. Note that running exact inference is costly. Approximate inference is planned for\nthis package.\n\n```python\n>>> R = pasp.exact(P)\n```\n```\nℙ(trip) = [0.010000, 0.010000]\nℙ(tuberculosis | trip) = [0.050000, 0.050000]\nℙ(cancer | smoking) = [0.100000, 0.100000]\nℙ(test | or) = [0.980000, 0.980000]\nℙ(smoking) = [0.500000, 0.500000]\nℙ(tuberculosis | not trip) = [0.010000, 0.010000]\nℙ(cancer | not smoking) = [0.010000, 0.010000]\nℙ(test | not or) = [0.050000, 0.050000]\n```\n\nFunction `pasp.exact` returns the results of the queries as a tuple of pairs of lower and upper\nprobabilities in the order the queries are asked for in the PLP code.\n\nSince [`examples/asia.lp`](examples/asia.lp) comes from a Bayesian network and therefore is an\nacyclic PLP, the probabilities returned are sharp. Let's take a look at another (very simple)\nexample where this is not the case: [`examples/insomnia.lp`](examples/insomnia.lp).\n\n```pasp\nsleep :- not work, not insomnia. work :- not sleep.\n0.3::insomnia.\n\n#query(insomnia)\n#query(work)\n#query(sleep)\n#query(not sleep)\n#query(not work)\n```\n\nNote that `sleep` and `work` produce an even loop when `insomnia` is set to false in the program,\nessentially resulting in two possible stable models: one where only `work` is set to true and the\nother where only `sleep` is true, each having different sets of probabilities. Let's query!\n\n```python\n>>> pasp.exact(pasp.parse(\"examples/insomnia.lp\"))\n```\n```\nℙ(insomnia) = [0.300000, 0.300000]\nℙ(work) = [0.300000, 1.000000]\nℙ(sleep) = [0.000000, 0.700000]\nℙ(not sleep) = [0.300000, 1.000000]\nℙ(not work) = [0.000000, 0.700000]\n```\n\nWe now have the right lower and upper probabilities taking into account all possible stable models\nof the PLP. This shows us that the probability of `sleep`, for instance, can take values low as\n`0.0` and high as `0.7`, while `work` has at least `0.3` mass.\n\n## Semantics\n\nProbabilities and models may change depending on the *semantics* of the language. The semantics of\nthe language can be defined around two dimensions: the *logic semantics* and the *probabilistic\nsemantics*. We allow different logic and probabilistic semantics, and their different combinations,\nin `pasp`. As of now, the following semantics are implemented:\n\n#### Logic semantics\n\n- Stable semantics;\n- Partial semantics;\n- L-Stable semantics.\n\n#### Probabilistic semantics\n\n- Credal semantics;\n- MaxEnt semantics.\n\n### Examples of logic semantics\n\nLet us first examine the Barber Paradox example (see [`examples/barber.lp`](examples/barber.lp)).\n\n```pasp\nshaves(X, Y) :- barber(X), villager(Y), not shaves(Y, Y).\nvillager(a). barber(b). 0.5::villager(b).\n```\n\nUnder the stable semantics, we find ourselves in a pickle. With probability half, `villager(b)` is\nchosen (or not) to appear in the program. Suppose it does not; then we know that when grounding the\nprogram we get\n\n```pasp\nshaves(b, a) :- barber(b), villager(a), not shaves(a, a).\n```\n\nwhich is fine, since `shaves(a, a)` is not in any model. Now suppose `villager(b)` is, in fact,\nadded to the program; then we have\n\n```pasp\nshaves(b, b) :- barber(b), villager(b), not shaves(b, b).\n```\n\nin addition to the previous rule. This presents a problem, since `shaves(b, b) :- ..., not\nshaves(b, b)` is a clear contradiction and so no stable model can be found in this total choice\nunder the stable model semantics. Since the credal semantics assumes the existence of a model for\nany given total choice, the computed probabilities will be garbage (for now, ignore the `undef`\nkeyword):\n\n```python\n>>> P = pasp.parse(\"examples/barber.lp\")\n>>> pasp.exact(P)\n```\n```\nℙ(shaves(b,a)) = [1.000000, 0.500000]\nℙ(not shaves(b,b)) = [1.000000, 0.500000]\nℙ(undef shaves(b,b)) = [0.500000, 0.000000]\n```\n\nInstead of using the stable semantics, however, we could use the *partial semantics*. The partial\nsemantics attributes to every atom three possible values: true, false or undefined (represented by\nthe `undef` keyword). Atoms are set to undefined when its value could not be proved either true or\nfalse, as is the case of contradictions.\n\nLet us, again, analyze the Barber Paradox program, this time under the partial semantics. When\n`villager(b).` is *not* in the program, then the partial semantics computes, in this case, the same\nminimal model as in the stable semantics. However, when `villager(b)` is present in the program,\nthen we cannot attribute neither truth nor falsity to `shaves(b, b)`, and thus `shaves(b, b)` must\nbe set to undefined. Now, if we compute the credal probabilities again, this time under partial\nsemantics, we get\n\n```python\n>>> P = pasp.parse(\"examples/barber.lp\", semantics = \"partial\")\n>>> pasp.exact(P)\n```\n```\nℙ(shaves(b,a)) = [1.000000, 1.000000]\nℙ(not shaves(b,b)) = [0.500000, 0.500000]\nℙ(undef shaves(b,b)) = [0.500000, 0.500000]\n```\n\nwhich are correct: in both total choices, there is only a single model; the one with `villager(b)`\nagrees with `not shaves(b, b)`, and the other (without `villager(b)`) sets it to undefined, meaning\nthat `shaves(b, b)` is either set to false or undefined with equal probability.\n\nAnother interesting semantic is the *L-stable semantics*, which in practice agrees with the stable\nmodel semantics when there exist stable models and with the partial semantics otherwise. Let us\ntake a look at the 3-coloring graph problem (see [`examples/3coloring.lp`](examples/3coloring.lp)).\n\n```pasp\n#const n = 5.\nv(1..n).\n0.5::e(X, Y) :- v(X), v(Y), X < Y.\ne(X, Y) :- e(Y, X).\nc(X, r) :- not c(X, g), not c(X, b), v(X).\nc(X, g) :- not c(X, r), not c(X, b), v(X).\nc(X, b) :- not c(X, r), not c(X, g), v(X).\nf :- not f, e(X, Y), c(X, Z), c(Y, Z).\n```\n\nThe program above models the 3-coloring problem of graphs with `n = 5` vertices. Each total choice\nmodels a different graph based on the presence (or not) of edges `e(X, Y)`. Here, the rule\n\n```pasp\nf :- not f, e(X, Y), c(X, Z), c(Y, Z).\n```\n\ndefines whether or not the graph is 3-colorable. Notice the presence of contradiction `f :- not f,\n...`. When no 3-coloring can be achieved, then `f` must be set to `undef`, as the subgoals would\nthen hold and thus cause the contradiction. Under the partial semantics, any minimal partial model\nis valid, and thus, even if we do find a 3-colorable graph under a total choice, other partial\nmodels with `undef` attributions would possibly appear as potential minimal models.\n\n```python\n>>> P = pasp.parse(\"examples/3coloring.lp\", semantics = \"partial\")\n>>> pasp.exact(P)\n```\n```\nℙ(c(1,r)) = [0.000000, 1.000000]\nℙ(e(1,2) | undef f) = [0.090747, 0.971537]\nℙ(undef f) = [0.064453, 0.999023]\n```\n\nNow, if we choose the L-stable semantics\n\n```python\n>>> P = pasp.parse(\"examples/3coloring.lp\", semantics = \"lstable\")\n>>> pasp.exact(P)\n```\n```\nℙ(c(1,r)) = [0.000000, 1.000000]\nℙ(e(1,2) | undef f) = [0.772727, 0.772727]\nℙ(undef f) = [0.064453, 0.064453]\n```\n\nwe find that the probability of getting non-3-colorable graphs drastically falls, as we discard\nminimal models with `undef` when stable models are found.\n\n### Examples of probabilistic semantics\n\nConsider the game example shown in [`examples/game.lp`](examples/game.lp).\n\n```pasp\nwins(X) :- move(X, Y), not wins(Y).\nmove(a, b). move(b, a). move(b, c). 0.3::move(c, d).\n```\n\nIf we were to use the credal semantic, we would find that `wins(b)` appears in two of the stable\nmodels (one when `move(c, d)` is in the program, and the other when it is not), and so by computing\nthe total choice probabilities, it either appears with probability 1.0-0.3 or 1.0, producing the\ncredal result `[0.7, 1.0]` below.\n\n```python\n>>> P = pasp.parse(\"examples/game.lp\")\n>>> pasp.exact(P)\n```\n```\nℙ(wins(b)) = [0.700000, 1.000000]\nℙ(wins(c)) = [0.300000, 0.300000]\n```\n\nWhen querying under the credal semantics, we account for the lower and upper probabilities of each\ntotal choice and evaluate the final credal probabilities accordingly. If we wish to, instead,\nuniformly consider models, we might do so by using the MaxEnt semantics [[3]](#ref-3).\n\n```python\n>>> P = pasp.parse(\"examples/game.lp\")\n>>> pasp.exact(P, psemantics = \"maxent\")\n```\n```\nℙ(wins(b)) = [0.850000, 0.850000]\nℙ(wins(c)) = [0.300000, 0.300000]\n```\n\n## Installation and requirements\n\n`pasp` requires Python version 3.10 or newer to work and needs access to\n[`clingo`](https://potassco.org/)'s C API. Some Linux distribution packages for `clingo` do not\nexpose headers or are outdated. Here are some packages we know work with `pasp`.\n\n### Ubuntu PPA\n\n`clingo` and `libclingo-dev`:\n\n```bash\nsudo add-apt-repository ppa:potassco/stable\nsudo apt update\nsudo apt-get install clingo libclingo-dev\n```\n\n### Mac OS X\n\n> **Disclaimer:** pasp is only tested in Linux machines, and does not fully support Mac OS X! There\n> are known bugs and issues when running pasp in Mac OS X, and so we do not guarantee correctness\n> in other systems. Support for other operating systems is not a priority for now.\n\nHomebrew `clingo`:\n\n```bash\nbrew install clingo\n```\n\nYou may need to append Homebrew to your paths if you have not done so yet:\n\n```bash\n# Assuming your brew dir is \"${HOME}/.brew\"\nexport LIBRARY_PATH=\"${LIBRARY_PATH}:$(brew --prefix)/lib\"\nexport LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:$(brew --prefix)/lib\"\nexport C_INCLUDE_PATH=\"${C_INCLUDE_PATH}:$(brew --prefix)/include\"\n```\n\n### Installation\n\n`pasp` is available from the PyPi repository as `pasp-plp`. For Arch Linux users, see the\n`python-pasp` package below.\n\n```bash\npip install pasp-plp\n```\n\nImport the package normally\n\n```python\n>>> import pasp\n```\n\nto have access to the exported symbols of the package.\n\n### Arch Linux AUR\n\nThe [`python-pasp`](https://aur.archlinux.org/packages/python-pasp) package is available for Arch\nLinux users (replace `yay` with your AUR helper or manually install with `makepkg`):\n\n```bash\nyay -S python-pasp\n```\n\nThis installs `pasp` and all its dependencies.\n\n### Manual installation\n\nAlternatively, you may locally build `pasp`. To do so, clone this repository to a directory of your\nchoice, say `pasp/`. The package is written in Python, with the more critical parts written as C\nextensions. The only dependency from the C-side of `pasp` is [clingo](https://potassco.org/), while\nthe only dependencies from the Python side are the [clingo](https://potassco.org/) Python API and\n[lark](https://github.com/lark-parser/lark). Change your working directory to `pasp/` and then\ncompile and install the C parts with the following command:\n\n```bash\npython setup.py build\npython setup.py install\n```\n\n## Command-line usage\n\n`pasp` is also available as a command:\n\n```bash\n% Prints the help message.\npasp --help\n\n% Runs the prisoners example with credal inference and stable semantics.\npasp examples/prisoners.lp\n\nℙ(e1 | u) = [0.290426, 0.379192]\nℙ(e1 | not b, u) = [0.450125, 0.549875]\nℙ(g | e1, u) = [0.000000, 1.000000]\nℙ(d) = [0.000000, 1.000000]\nℙ(e1 | g, u) = [0.000000, 0.549875]\nℙ(e1 | ga, u) = [0.279971, 0.390743]\n\n% Runs the 3-coloring example with credal inference and L-stable semantics.\npasp --sem=lstable examples/3coloring.lp\n\nℙ(c(1,r)) = [0.000000, 1.000000]\nℙ(e(1,2) | undef f) = [0.772727, 0.772727]\nℙ(undef f) = [0.064453, 0.064453]\n\n% Runs the insomnia example with Max-Entropy inference and stable semantics.\npasp --psem=maxent examples/insomnia.lp\n\nℙ(insomnia) = [0.300000, 0.300000]\nℙ(work) = [0.650000, 0.650000]\nℙ(sleep) = [0.350000, 0.350000]\nℙ(not sleep) = [0.650000, 0.650000]\nℙ(not work) = [0.350000, 0.350000]\n```\n\n## References\n\n<div id=\"ref-1\">[1] - The Joy of Probabilistic Answer Set Programming: Semantics, Complexity, Expressivity,\nInference. Fabio Gagliardi Cozman and Denis Deratani Mauá. In International Journal of Approximate\nReasoning 125. 2020.</div>\n<br>\n\n<div id=\"ref-2\">[2] - On the Semantics and Complexity of Probabilistic Logic Programs. Fabio Gagliardi Cozman and\nDenis Deratani Mauá. In Journal of Artificial Intelligence Research 60. 2017.</div>\n<br>\n\n<div id=\"ref-3\">[3] - Probabilistic Reasoning with Answer Sets. Chitta Baral, Michael Gelfond and\nNelson Rushton. In International Conference on Logic Programming and Nonmonotonic Reasoning. 2004.</div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pasp-plp",
    "package_url": "https://pypi.org/project/pasp-plp/",
    "platform": null,
    "project_url": "https://pypi.org/project/pasp-plp/",
    "project_urls": {
      "Issues": "https://github.com/RenatoGeh/pasp/issues",
      "Repository": "https://github.com/RenatoGeh/pasp"
    },
    "release_url": "https://pypi.org/project/pasp-plp/0.0.2.post5/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Probabilistic Answer Set Programming",
    "version": "0.0.2.post5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17175289,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9f51e4b46dfa577babc37c35d91b5a1b15dda3ec39621cfe0c3c0e67c8a6c70",
          "md5": "0388587b253d317f09268bdda3f9ab13",
          "sha256": "bacd57c82de59d0aeb487d2fa3701ff7fd811ed55a3f6f5c86aead402cb236b2"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0388587b253d317f09268bdda3f9ab13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6437613,
        "upload_time": "2022-10-03T22:39:37",
        "upload_time_iso_8601": "2022-10-03T22:39:37.418883Z",
        "url": "https://files.pythonhosted.org/packages/f9/f5/1e4b46dfa577babc37c35d91b5a1b15dda3ec39621cfe0c3c0e67c8a6c70/pasp-plp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91c3b24566312efeba98cf5f5f8521c4d9233645350706c01288700eb2dc9679",
          "md5": "a097358b8372e77d2d0d7d8fb9e6b344",
          "sha256": "de8e9b0da88c5d5f30ccdc903470783df7a6a5244883db24412a5fed81bf8e51"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a097358b8372e77d2d0d7d8fb9e6b344",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6437081,
        "upload_time": "2022-10-03T23:13:50",
        "upload_time_iso_8601": "2022-10-03T23:13:50.907183Z",
        "url": "https://files.pythonhosted.org/packages/91/c3/b24566312efeba98cf5f5f8521c4d9233645350706c01288700eb2dc9679/pasp-plp-0.0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df1e7cc5eaed87280a155490466edd43c11e4bf7d0adece5bacd5e48d34e97a9",
          "md5": "1845efff4db6db72ef676aca7d2886b3",
          "sha256": "a6ba4f59f0b0eab4c4c482b12201a521fc1a1539af2a96fa7016a03d467216cd"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.1.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "1845efff4db6db72ef676aca7d2886b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 230199,
        "upload_time": "2022-10-10T20:01:41",
        "upload_time_iso_8601": "2022-10-10T20:01:41.150936Z",
        "url": "https://files.pythonhosted.org/packages/df/1e/7cc5eaed87280a155490466edd43c11e4bf7d0adece5bacd5e48d34e97a9/pasp-plp-0.0.1.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd769d14644d25a45e9508f9b1f24b7a8d51598fb159b5875ffd97c1697b381e",
          "md5": "964c739f0beef04ba47e10ba6f48d5e4",
          "sha256": "c20d506be69dab67cd921d1b14e8b9fb7e6bca81ab7aab3333d232d5ab074490"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.1.post3.tar.gz",
        "has_sig": false,
        "md5_digest": "964c739f0beef04ba47e10ba6f48d5e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 230270,
        "upload_time": "2022-10-10T20:11:45",
        "upload_time_iso_8601": "2022-10-10T20:11:45.926049Z",
        "url": "https://files.pythonhosted.org/packages/fd/76/9d14644d25a45e9508f9b1f24b7a8d51598fb159b5875ffd97c1697b381e/pasp-plp-0.0.1.post3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f33aedd06fac35e86ba26fa3b69ef2f8b4a1033bb232dc2da17509c1d1cd206e",
          "md5": "1100ecba756587b96d61fea97ce6e2e4",
          "sha256": "c8b559f31e5d7aef1036eeb6e74919a8d1dbee8fa97d1e6c6dba63050ca4f56a"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.1.post4.tar.gz",
        "has_sig": false,
        "md5_digest": "1100ecba756587b96d61fea97ce6e2e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3493333,
        "upload_time": "2022-10-27T20:21:59",
        "upload_time_iso_8601": "2022-10-27T20:21:59.071469Z",
        "url": "https://files.pythonhosted.org/packages/f3/3a/edd06fac35e86ba26fa3b69ef2f8b4a1033bb232dc2da17509c1d1cd206e/pasp-plp-0.0.1.post4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73ef58045f8b4092feee16a97c4712c048d2ae1511dab0e55185abaf17d25ede",
          "md5": "97cfb7515228b575efa5913bfbc79edb",
          "sha256": "704877adb4db9b36b1ebe6e62702cadae599a9f88c05354661db5a423f66ad44"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "97cfb7515228b575efa5913bfbc79edb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 10564058,
        "upload_time": "2023-01-18T19:24:23",
        "upload_time_iso_8601": "2023-01-18T19:24:23.630342Z",
        "url": "https://files.pythonhosted.org/packages/73/ef/58045f8b4092feee16a97c4712c048d2ae1511dab0e55185abaf17d25ede/pasp-plp-0.0.2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b712c30613dbba0b261eb8cabf5dd48604db5257a0f96f487e023f93e20e4d76",
          "md5": "435d19e9367499362520b3157a895a57",
          "sha256": "9658853154847c1e886c193ceae61e8eee89de3e9f9d928c1ef68a462c082340"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.2.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "435d19e9367499362520b3157a895a57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 10564039,
        "upload_time": "2023-01-19T14:40:01",
        "upload_time_iso_8601": "2023-01-19T14:40:01.197272Z",
        "url": "https://files.pythonhosted.org/packages/b7/12/c30613dbba0b261eb8cabf5dd48604db5257a0f96f487e023f93e20e4d76/pasp-plp-0.0.2.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.post3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc32fd076f503c753705b80500063453897204476cb88b553f3394eaeee784b",
          "md5": "2f31800cffad309f06f1e3d589741b47",
          "sha256": "9ca6c451bb359215729c5272fd731e7f8d361da0561d266694171339134efc12"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.2.post3.tar.gz",
        "has_sig": false,
        "md5_digest": "2f31800cffad309f06f1e3d589741b47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 10564813,
        "upload_time": "2023-01-19T14:50:28",
        "upload_time_iso_8601": "2023-01-19T14:50:28.949936Z",
        "url": "https://files.pythonhosted.org/packages/4c/c3/2fd076f503c753705b80500063453897204476cb88b553f3394eaeee784b/pasp-plp-0.0.2.post3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.post4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "125203c5386c77276790a1485476ab5da5d4c32e72fc0c0e55cb03d431fa38dd",
          "md5": "c4472213e38257ade004f7a6733bfdac",
          "sha256": "495221ba0e66f84ede1676db549b822b7b1c7ec0dbdf4cdaf7b9c88dceb8d7f0"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.2.post4.tar.gz",
        "has_sig": false,
        "md5_digest": "c4472213e38257ade004f7a6733bfdac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 10562427,
        "upload_time": "2023-01-23T17:29:20",
        "upload_time_iso_8601": "2023-01-23T17:29:20.180029Z",
        "url": "https://files.pythonhosted.org/packages/12/52/03c5386c77276790a1485476ab5da5d4c32e72fc0c0e55cb03d431fa38dd/pasp-plp-0.0.2.post4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.post5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b11bb42e9ea39e2f7f9542389e8bac288e8ea9f8fcbe87f350c2b7701b9e5b4e",
          "md5": "23cd829a0287139d0987aee87c5779f4",
          "sha256": "82480a0f17f59e31044985d9511befcedb98585bd5d01768e970e1fc99e76328"
        },
        "downloads": -1,
        "filename": "pasp-plp-0.0.2.post5.tar.gz",
        "has_sig": false,
        "md5_digest": "23cd829a0287139d0987aee87c5779f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 79620,
        "upload_time": "2023-03-06T13:43:38",
        "upload_time_iso_8601": "2023-03-06T13:43:38.140939Z",
        "url": "https://files.pythonhosted.org/packages/b1/1b/b42e9ea39e2f7f9542389e8bac288e8ea9f8fcbe87f350c2b7701b9e5b4e/pasp-plp-0.0.2.post5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b11bb42e9ea39e2f7f9542389e8bac288e8ea9f8fcbe87f350c2b7701b9e5b4e",
        "md5": "23cd829a0287139d0987aee87c5779f4",
        "sha256": "82480a0f17f59e31044985d9511befcedb98585bd5d01768e970e1fc99e76328"
      },
      "downloads": -1,
      "filename": "pasp-plp-0.0.2.post5.tar.gz",
      "has_sig": false,
      "md5_digest": "23cd829a0287139d0987aee87c5779f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 79620,
      "upload_time": "2023-03-06T13:43:38",
      "upload_time_iso_8601": "2023-03-06T13:43:38.140939Z",
      "url": "https://files.pythonhosted.org/packages/b1/1b/b42e9ea39e2f7f9542389e8bac288e8ea9f8fcbe87f350c2b7701b9e5b4e/pasp-plp-0.0.2.post5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}