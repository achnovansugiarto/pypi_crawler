{
  "info": {
    "author": "Juan Schiavoni",
    "author_email": "juanschiavoni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "PyArduinoFlash\n====\n\n\nPyArduinoFlash is an open source library in Python for updating the firmware \nof Arduino boards that use the [ATmegaBOOT_168](https://github.com/arduino/ArduinoCore-avr/tree/master/bootloaders/atmega) or Arduino [Stk500V2](https://github.com/arduino/Arduino-stk500v2-bootloader) bootloader, for example [Arduino Nano](https://store.arduino.cc/usa/arduino-nano) or [Arduino Uno](https://store.arduino.cc/usa/arduino-uno-rev3) or [Arduino Mega 2560](https://store.arduino.cc/usa/mega-2560-r3) and many more.\n\nThe intention is to have a class that can be imported into any python project to update the Arduinos through the serial port.\n\nIt implements a subset of Atmel's STK-500V1 and STK500V2 protocol, using as reference the protocols implemented by [Avrdude](http://savannah.nongnu.org/projects/avrdude) in the ```arduino.c``` and ```wiring.c``` modules.\n\nFor Arduino's using Atmel AVR8 processors there are three versions of the bootoloader available. For boards that have less than 128 Kbytes of Flash memory, for example Nano or Uno using the Atmega328P, etc that are marked in the Arduino IDE as older you have to use STK500-V1 at 57600 baud. And for the new ones (they implement the Optiboot bootloader) you have to use STK500-V1 at 115200 baud. \nFor boards that have processors of more than 128 Kbytes, for example the Mega 2560, STK500-V2 must be used at 115200 baud.\n\n\nAs an example of use, there is an APP in [KivyMd](https://gitlab.com/kivymd/KivyMD) and [Kivy](http://kivy.org) that exposes through a GUI all the methods required to update and verify the firmware.\n\nThe first example shows the upgrade of a Nano board with a new bootolader. Select STK500-V1 at 115200 baud.\n\n![](images/arduino_kivy_stk500v1.gif)\n\nThe second example shows the upgrade of a Mega board with 2560 processor. STK500-V2 must be selected at 115200 baud.\n\n![](images/arduino_kivy_stk500v2.gif)\n\nInstallation\n------------\nInstall using pip or pip3 (recommended, no separate download required):\n\n``pip install arduinobootloader`` \n\nDocumentation and Examples\n----------------------------------------\n```python\n    from intelhex import IntelHex\n    from arduinobootloader import ArduinoBootloader\n\n    ih = IntelHex()\n    ab = ArduinoBootloader()\n    prg = ab.select_programmer(\"Stk500v1\")\n\n    if prg.open():\n        if not prg.board_request():\n            prg.close()\n            return \n\n        print(\"botloader name: {} version: {} hardware: {}\".format(ab.programmer_name, ab.sw_version, ab.hw_version))\n\n        if not prg.cpu_signature():\n            prg.close()\n            return\n\n        print(\"cpu name: {}\".format(ab.cpu_name) )\n\n        ih.fromfile(\"firmware_file.hex\", format='hex')\n\n        for address in range(0, ih.maxaddr(), ab.cpu_page_size):\n            buffer = ih.tobinarray(start=address, size=ab.cpu_page_size)\n            if not prg.write_memory(buffer, address):\n               print(\"Write error\") \n               prg.leave_bootloader()\n               prg.close()\n               return\n\n        for address in range(0, ih.maxaddr(), ab.cpu_page_size):\n            buffer = ih.tobinarray(start=address, size=ab.cpu_page_size)\n            read_buffer = prg.read_memory(address, ab.cpu_page_size)\n            if not len(read_buffer):\n               print(\"Read error\") \n               break\n\n            if buffer != read_buffer:\n               print(\"File not match\")\n               break\n\n        prg.leave_prg_mode()\n        prg.close()\n```\nThe parsing of the file in [Intel hexadecimal format](https://en.wikipedia.org/wiki/Intel_HEX) is done with the [IntelHex](https://github.com/python-intelhex/intelhex) library.\n\nTo have an instance of the class use ``ab = ArduinoBootloader()``\nThe next step is to select the programmer protocol ``prg = ab.select_protocol(\"Stk500v1\") ``. To establish the connection with the bootloader of the Arduino board use ``prg.open()`` that returns ``True`` when it is successful.\n\nAs the library needs the information of the CPU to know the size of the page, it is necessary to use the functions ``prg.board_request()`` and ``prg.cpu_signature()``\n\nIf the previous functions were executed successfully (they return ``True``), now you have to open the hexadecimal file with the ``ih.fromfile(\"firmware_file.hex\", format='hex')`` function. If there are errors in the format or the file path is invalid, exceptions are thrown.\n\nTo obtain the page that corresponds to the current address, use the  ``ih.tobinarray(start=address, size=ab.cpu_page_size)`` .\n\nFor the bootloader to write it, use the function ``prg.write_memory(buffer, address)`` which take the buffer and the current address as parameters. Returns ``True`` when completed successfully.\n\nThe reading to verify the recording is done in the same way, with the exception that the function returns the buffer read. If it is ``None`` it indicates that there were problems.\n\nThe bootloader begins the execution of the firmware after a period of time without receiving communication; nevertheless it is convenient to execute the function ``prg.leave_bootloader()``.\n\nFinally, to release the serial port, you have to execute the function ``prg.close()``.\n\nScripts\n-------\nThe Script folder contains arduinoflash.py file that allows update or read the firmware of Arduino boards.\n\nOne of the purposes is to show the use of the PyArduinoBootloader library in conjunction with the [IntelHex](https://github.com/python-intelhex/intelhex) library to process hexadecimal files.\n\nUse the [argparse](https://docs.python.org/3/library/argparse.html#module-argparse) library, to read the command line (file and options). \n\nAnd to indicate the progress the [progressbar2](https://pypi.org/project/progressbar2/) library.\n\n```shell script: usage: arduinoflash.py [-h] [--version] [-r | -u] filename\nusage: arduinoflash.py [-h] [--version] [-r | -u] filename\n\narduino flash utility\n\npositional arguments:\n  filename      filename in hexadecimal Intel format\n\noptional arguments:\n  -h, --help    show this help message and exit\n  --version     script version\n  -b BAUDRATE, --baudrate BAUDRATE\n                        old bootolader (57600) Optiboot (115200)\n  -p PROGRAMMER, --programmer PROGRAMMER\n                        programmer version - Nano (Stk500v1) Mega (Stk500v2)\n  -r, --read            read the cpu flash memory\n  -u, --update          update cpu flash memory\n\n```\nThe following capture shows the reading of the flash memory of an Arduino Nano board.\n\n![](images/arduinoflash_read_stk500v1.gif)\n\nAnd the next shows the firmware update of an Arduino Nano board.\n\n![](images/arduinoflash_update_stk500v1.gif)\n\nThe following capture shows the reading of the flash memory of an Arduino Mega 2560 board.\n\n![](images/arduinoflash_read_stk500v2.gif)\n\nAnd the next shows the firmware update of an Arduino Mega 2560 board.\n\n![](images/arduinoflash_update_stk500v2.gif)\n\nSupport\n-------\n\nIf you need assistance, contact me:\n\n* Email      : juanschiavoni@gmail.com\n\n\nContributing\n------------\n\n\nLicenses\n--------\n\n- PyArduinoFlash is released under the terms of the MIT License. Please refer to the\n  LICENSE file.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jjsch-dev/PyArduinoFlash",
    "keywords": "arduino,flash,bootloader,upgrade",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "arduinobootloader",
    "package_url": "https://pypi.org/project/arduinobootloader/",
    "platform": "",
    "project_url": "https://pypi.org/project/arduinobootloader/",
    "project_urls": {
      "Homepage": "https://github.com/jjsch-dev/PyArduinoFlash"
    },
    "release_url": "https://pypi.org/project/arduinobootloader/0.0.6/",
    "requires_dist": [
      "pyserial (>=3.4)"
    ],
    "requires_python": ">=3",
    "summary": "Update the firmware of Arduino boards based on Atmel AVR",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8334602,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aa9246f4110f4e88cd6d3cfc21a405f8c0aee4250af097075c98fedd0c8ec29",
          "md5": "35caf8396e42e628b8cf8e5efd42f022",
          "sha256": "ba66d938cbcac9a10e3c812c45a4695504bb4def2d2053b7286deaf3123fd540"
        },
        "downloads": -1,
        "filename": "arduinobootloader-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35caf8396e42e628b8cf8e5efd42f022",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 6622,
        "upload_time": "2020-09-30T16:19:32",
        "upload_time_iso_8601": "2020-09-30T16:19:32.619005Z",
        "url": "https://files.pythonhosted.org/packages/3a/a9/246f4110f4e88cd6d3cfc21a405f8c0aee4250af097075c98fedd0c8ec29/arduinobootloader-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ea78b54959ce75fd32f0e7e7c27fab0bc17d58096857ad990ddae922181187e",
          "md5": "88f95d83bf9e573f4ff7289c4bcb7a1f",
          "sha256": "06cca01401f97a827ef688187ccc30da46f9901f1c669aa39f0f85802e86a552"
        },
        "downloads": -1,
        "filename": "arduinobootloader-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88f95d83bf9e573f4ff7289c4bcb7a1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 6611,
        "upload_time": "2020-09-30T16:34:18",
        "upload_time_iso_8601": "2020-09-30T16:34:18.092221Z",
        "url": "https://files.pythonhosted.org/packages/3e/a7/8b54959ce75fd32f0e7e7c27fab0bc17d58096857ad990ddae922181187e/arduinobootloader-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76514c6a5e3b023da6480246c37bcad4d1ac1e393afa70d79becf27bf437cd09",
          "md5": "f88c62b939dd3eadb737702009a6ab85",
          "sha256": "24840cc1e2b5c2dda58737cffdf8f88356000591909a7314bff01590a0d1ddee"
        },
        "downloads": -1,
        "filename": "arduinobootloader-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f88c62b939dd3eadb737702009a6ab85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 6612,
        "upload_time": "2020-09-30T16:48:21",
        "upload_time_iso_8601": "2020-09-30T16:48:21.178780Z",
        "url": "https://files.pythonhosted.org/packages/76/51/4c6a5e3b023da6480246c37bcad4d1ac1e393afa70d79becf27bf437cd09/arduinobootloader-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ffed088f95ed468d4dba86e9af3e98ab5477a9a1c322a13d5d7bcbe0de8c189",
          "md5": "eb9035a38762c7e8cb9fd0fed1e4bdd7",
          "sha256": "4ebeee69fd39318dec79a77ca5c13791d953bbb0023d45d92a6c009e5e39ab53"
        },
        "downloads": -1,
        "filename": "arduinobootloader-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb9035a38762c7e8cb9fd0fed1e4bdd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10300,
        "upload_time": "2020-10-03T23:56:47",
        "upload_time_iso_8601": "2020-10-03T23:56:47.075325Z",
        "url": "https://files.pythonhosted.org/packages/6f/fe/d088f95ed468d4dba86e9af3e98ab5477a9a1c322a13d5d7bcbe0de8c189/arduinobootloader-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ffed088f95ed468d4dba86e9af3e98ab5477a9a1c322a13d5d7bcbe0de8c189",
        "md5": "eb9035a38762c7e8cb9fd0fed1e4bdd7",
        "sha256": "4ebeee69fd39318dec79a77ca5c13791d953bbb0023d45d92a6c009e5e39ab53"
      },
      "downloads": -1,
      "filename": "arduinobootloader-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb9035a38762c7e8cb9fd0fed1e4bdd7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 10300,
      "upload_time": "2020-10-03T23:56:47",
      "upload_time_iso_8601": "2020-10-03T23:56:47.075325Z",
      "url": "https://files.pythonhosted.org/packages/6f/fe/d088f95ed468d4dba86e9af3e98ab5477a9a1c322a13d5d7bcbe0de8c189/arduinobootloader-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}