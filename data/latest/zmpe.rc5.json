{
  "info": {
    "author": "Dmitry Bobrovsky",
    "author_email": "ministrbob777@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Monitoring"
    ],
    "description": "# zabbix-monitoring-programs-execution\r\nThe program controls the execution of any programs, scripts or commands OS and sends the execution result to zabbix, and in case of an execution error, it additionally can notify via telegram.  \r\n\r\n**NOTE**: Any programs, scripts or commands OS that is controlled by zm.py in the future, I will call - process.  \r\n\r\n## Work logic\r\nLogging is done in stdout.  \r\nAll zm.py settings are performed through environment variables.  \r\nTelegram notifications can be turned off with `ZM_TELEGRAM_NOTIF=False`. In this case, you will only receive alerts from Zabbix in which you can also set up Telegram alerts, but zm.py has more informative alerts.  \r\nSend data to can be turned off with Zabbix `ZM_ZABBIX_SEND=False`. In this case, you will only receive alerts to Telegram.\r\nSend process time execution to can be turned off with Zabbix `ZM_ZABBIX_SEND_TIME=False`.\r\nOnly error messages are sent to Telegram. Messages about the successful completion of the process are not sent to Telegram (so that there is no flood).  \r\nIn case of successful completion of the process, the process execution time and the successful result are sent to Zabbix. The value of successful result is set to ZM_ZABBIX_OK.    \r\nIn case of the process execution error, execution time = 0 and the unsuccessful result are sent to Zabbix. The value of unsuccessful result is set to ZM_ZABBIX_NOT_OK.\r\nYou can run zm.py in a Docker container.\r\n\r\n## Settings\r\n| ENV | Default | Description                                                                                                                                                                                                             |\r\n|----------|------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `ZM_DEBUG` | `False` | Enable DEBUG mode? (True or False).                                                                                                                                                                                     |\r\n| `HOSTNAME` | `Unknown` | For Telegram message to see which host this message is from. In Linux, such a variable is usually already set.                                                                                                          |\r\n| Zabbix settings |||\r\n| `ZM_ZABBIX_SEND` | `True` | Should app send data to Zabbix? (True or False).                                                                                                                                                                        |\r\n| `ZM_ZABBIX_SEND_TIME` | `True` | Should app send execution time to Zabbix? (True or False).                                                                                                                                                              |\r\n| `ZM_ZABBIX_OK` | `0` | OK value for Zabbix.                                                                                                                                                                                                    |\r\n| `ZM_ZABBIX_NOT_OK` | `1` | Not OK value for Zabbix.                                                                                                                                                                                                |\r\n| `ZM_ZABBIX_IP` | `None` | Zabbix server ip address.                                                                                                                                                                                               |\r\n| `ZM_ZABBIX_HOST_NAME` | `None` | Zabbix \"Host name\". How is the host named in Zabbix. (See picture after table).                                                                                                                                         |\r\n| `ZM_ZABBIX_ITEM_NAME` | `None` | How is the trapped item key named in Zabbix.                                                                                                                                                                            |\r\n| `ZM_ZABBIX_ITEM_TIME_NAME` | `None` | How is the trapped item for execution time key named in Zabbix.                                                                                                                                                         |\r\n| Telegram settings |||\r\n| `ZM_TELEGRAM_NOTIF` | `True` | Should app send telegram alerts? or log messages only to stdout. (True or False).                                                                                                                                       |\r\n| `ZM_TELEGRAM_TIMEOUT` | `10` | Telegram connection timeout.                                                                                                                                                                                            |\r\n| `ZM_TELEGRAM_BOT_TOKEN` | `None` | Telegram bot token. It usually looks like this `1470616475:AAHFSvznxxLTDedQBSiRVrYVP49ixkghpRT`. You need to create a bot in Telegram using [BotFather](https://t.me/BotFather) and you can also get a bot token there. |\r\n| `ZM_TELEGRAM_CHAT` | `None` | Telegram chat (ID) to which the bot will send messages. If this is a private chat, then usually the ID looks like a positive number. If it is a channel or group then ID is a negative number.                          |\r\n\r\n**NOTE**: Parameter `ZM_ZABBIX_HOST_NAME` you can see here  \r\n![zabbix trapped item](https://github.com/MinistrBob/zabbix-monitoring-programs-execution/blob/main/static/zabbix-host-name.png?raw=true)\r\n\r\n## Install and run\r\n### Install Python3\r\n[Python Download](https://www.python.org/downloads/)\r\n### Customize Zabbix\r\nIn this example, `ZM_ZABBIX_ITEM_NAME` will be called `docker-rmi-sh` and `ZM_ZABBIX_ITEM_TIME_NAME` - `docker-rmi-sh-time`. This name will be written in the `Key` field.  \r\nCreate trapped items `ZM_ZABBIX_ITEM_NAME` and if you need `ZM_ZABBIX_ITEM_TIME_NAME`.  \r\n![zabbix trapped item](https://github.com/MinistrBob/zabbix-monitoring-programs-execution/blob/main/static/zabbix-trapper-item.png?raw=true)\r\n![zabbix trapped item execution time](https://github.com/MinistrBob/zabbix-monitoring-programs-execution/blob/main/static/zabbix-trapper-item-time.png?raw=true)\r\nCreate trigger for `ZM_ZABBIX_ITEM_NAME` with that Expression:  \r\n`{172.26.12.168:docker-rmi-sh.last()}=1 or {172.26.12.168:docker-rmi-sh.nodata(25h)}<>0`  \r\nThe trigger fires when there was an error while executing the process or when the process has not run for more than 25 hours.  \r\n![zabbix trapped item](https://github.com/MinistrBob/zabbix-monitoring-programs-execution/blob/main/static/zabbix-trigger.png?raw=true)\r\nYou can see Graphs for items: menu **Monitoring** - **Latest data** - **Filter.Hosts** choose desired host - there is **Graph** in the item line.  \r\nOr you cat create your own graphs.  \r\n![zabbix trapped item](https://github.com/MinistrBob/zabbix-monitoring-programs-execution/blob/main/static/latest-data.png?raw=true)\r\n### Settings\r\nYou must set environment variables on the computer where the zm.py will run and under the account under which zm.py will run.   \r\nThere are many ways to define environment variables.  \r\n### Run\r\nIn this example, I write all the necessary variables in file `.bash_profile`.  \r\n```commandline\r\nexport ZM_ZABBIX_IP=\"172.26.12.86\"\r\nexport ZM_ZABBIX_HOST_NAME=\"172.26.12.168\"\r\nexport ZM_ZABBIX_ITEM_NAME=\"docker-rmi-sh\"\r\nexport ZM_ZABBIX_ITEM_TIME_NAME=\"docker-rmi-sh-time\"\r\nexport ZM_TELEGRAM_BOT_TOKEN=\"1470616475:AAHFSvznxxLTDedQBSiRVrYVP49ixkghpRT\"\r\nexport ZM_TELEGRAM_CHAT=\"123456789\"\r\n```\r\n#### 1) As script\r\n```commandline\r\nmkdir /usr/share/zabbix-monitoring-programs-execution\r\ncd /usr/share/zabbix-monitoring-programs-execution\r\ngit clone https://github.com/MinistrBob/zabbix-monitoring-programs-execution.git .\r\npip3 install -r requirements.txt\r\npython3 /usr/share/zabbix-monitoring-programs-execution/zm.py <process>\r\n``` \r\n#### 2) As cronjob (or if you use sudo -s or su)\r\nIf you use cronjob or if you use sudo -s or su you will need `source` command\r\n```commandline\r\nMAILTO=\"\"\r\n0 3 * * * source /home/user/.bash_profile; python3 /usr/share/zabbix-monitoring-programs-execution/zm.py /usr/share/local/docker-rmi.sh 2>&1\r\n```\r\n\r\n## For developers\r\n### Get and install requirements (requirements.txt)\r\n`c:\\MyGit\\zabbix-monitoring-programs-execution\\venv\\Scripts\\pip.exe freeze | Out-File -Encoding UTF8 c:\\MyGit\\zabbix-monitoring-programs-execution\\requirements.txt`  \r\n`pip install -r c:\\MyGit\\zabbix-monitoring-programs-execution\\requirements.txt`  \r\n\r\n### Publish the package on pypi.org\r\n```\r\npython setup.py sdist\r\ntwine upload dist/*\r\n```\r\n\r\n### Telegram\r\n[sendMessage](https://telegram-bot-sdk.readme.io/reference/sendmessage) `https://api.telegram.org/bot{token}/sendMessage`\r\nExample message (html):\r\n```html\r\nMESSAGE: вќЊ Test <b>bold</b>,\r\n<strong>bold</strong>\r\n<i>italic</i>, <em>italic</em>\r\n<a href=\"URL\">inline URL</a>\r\n<code>inline fixed-width code</code>\r\n<pre>pre-formatted fixed-width code block</pre>\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MinistrBob/zabbix-monitoring-programs-execution.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zmpe",
    "package_url": "https://pypi.org/project/zmpe/",
    "platform": null,
    "project_url": "https://pypi.org/project/zmpe/",
    "project_urls": {
      "Homepage": "https://github.com/MinistrBob/zabbix-monitoring-programs-execution.git"
    },
    "release_url": "https://pypi.org/project/zmpe/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The program controls the execution of any programs, scripts or commands OS and sends the execution result to zabbix, and in case of an execution error, it additionally can notify via telegram.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15189095,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e10aab10938815acfab381827e411786833ea77c7229200082d5b22813eb7662",
          "md5": "ce22aaca431ec2620a9d87cd62bf2b04",
          "sha256": "d1e5f264de1f50c489d8d500e86076ec74475ce25067ff32c2c417d317be4fad"
        },
        "downloads": -1,
        "filename": "zmpe-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce22aaca431ec2620a9d87cd62bf2b04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6365,
        "upload_time": "2022-09-19T08:06:32",
        "upload_time_iso_8601": "2022-09-19T08:06:32.335463Z",
        "url": "https://files.pythonhosted.org/packages/e1/0a/ab10938815acfab381827e411786833ea77c7229200082d5b22813eb7662/zmpe-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02261c002869b779212cd886976c5379b38b04bd95d4c121147c1869dcce30ed",
          "md5": "3ad41e6cdb5d2410c83013f8740a70e1",
          "sha256": "91579c956e2bee6ef37b725502e4fcafee64c45392fb6ceaf4ff006657f30064"
        },
        "downloads": -1,
        "filename": "zmpe-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ad41e6cdb5d2410c83013f8740a70e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6563,
        "upload_time": "2022-09-19T13:31:08",
        "upload_time_iso_8601": "2022-09-19T13:31:08.306683Z",
        "url": "https://files.pythonhosted.org/packages/02/26/1c002869b779212cd886976c5379b38b04bd95d4c121147c1869dcce30ed/zmpe-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e09249991ee722e0ceba7e0421430dcb2229041199b8f94541e0cff3b0782f5",
          "md5": "28e32462fc79eec999f0aefbcc0a97ca",
          "sha256": "ea22045246bd516570094ee2f8009e5899612b638d4c179d8065a0f5ed0ba40f"
        },
        "downloads": -1,
        "filename": "zmpe-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28e32462fc79eec999f0aefbcc0a97ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6588,
        "upload_time": "2022-09-22T10:35:31",
        "upload_time_iso_8601": "2022-09-22T10:35:31.406693Z",
        "url": "https://files.pythonhosted.org/packages/6e/09/249991ee722e0ceba7e0421430dcb2229041199b8f94541e0cff3b0782f5/zmpe-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd36f943fbcee39c20af36bfb498f856ef8952a5de17cdd24ab51fd33ec5caf9",
          "md5": "ba77e376dd737b8fcecfe980d919179e",
          "sha256": "4cdd30c074b551c36b59eeebbe2f339e78b87ca57e0212d045e4fb0d8f7b9a20"
        },
        "downloads": -1,
        "filename": "zmpe-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ba77e376dd737b8fcecfe980d919179e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9108,
        "upload_time": "2022-09-22T11:34:26",
        "upload_time_iso_8601": "2022-09-22T11:34:26.025842Z",
        "url": "https://files.pythonhosted.org/packages/cd/36/f943fbcee39c20af36bfb498f856ef8952a5de17cdd24ab51fd33ec5caf9/zmpe-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70e6702e1ea74706264b2b6fd7ed88f2a3e75f1657d4c4241296aeed521d8680",
          "md5": "f2ee85b86bccde47a1be1304bf217cc2",
          "sha256": "8cd463ca5b3f525792195f8c7a0ff9601d9d9dc470352d2e8355e613ba065781"
        },
        "downloads": -1,
        "filename": "zmpe-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f2ee85b86bccde47a1be1304bf217cc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9279,
        "upload_time": "2022-09-23T10:53:12",
        "upload_time_iso_8601": "2022-09-23T10:53:12.082485Z",
        "url": "https://files.pythonhosted.org/packages/70/e6/702e1ea74706264b2b6fd7ed88f2a3e75f1657d4c4241296aeed521d8680/zmpe-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70e6702e1ea74706264b2b6fd7ed88f2a3e75f1657d4c4241296aeed521d8680",
        "md5": "f2ee85b86bccde47a1be1304bf217cc2",
        "sha256": "8cd463ca5b3f525792195f8c7a0ff9601d9d9dc470352d2e8355e613ba065781"
      },
      "downloads": -1,
      "filename": "zmpe-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f2ee85b86bccde47a1be1304bf217cc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9279,
      "upload_time": "2022-09-23T10:53:12",
      "upload_time_iso_8601": "2022-09-23T10:53:12.082485Z",
      "url": "https://files.pythonhosted.org/packages/70/e6/702e1ea74706264b2b6fd7ed88f2a3e75f1657d4c4241296aeed521d8680/zmpe-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}