{
  "info": {
    "author": "Juha Vierinen",
    "author_email": "juha-pekka.vierinen@uit.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Chirp Sounder 2\n\nThis software can be used to detect chirp sounders and over-the-horizon radar transmissions over the air, and to calculate ionograms from them. The software relies on <a href=\"https://github.com/MITHaystack/digital_rf\">Digital RF</a> recordings of HF. \n\nThis is a new implementation of the <a href=\"https://github.com/jvierine/chirpsounder\">GNU Chirp Sounder</a>. This new version allows you to now automatically find chirps without knowledge of what the timing and chirp-rate is. You can still figure out the true distance if you have a GPSDO, as most sounders start at a full second. \n\nThe software consists of several parts:\n - detect_chirps.py  # this is used to find chirps using a chirp-rate matched filterbank\n - find_timings.py # this is used to cluster detections and determine what chirp timings and chirp rates exist\n - calc_ionograms.py # this is used to calculate ionograms based on parameters\n - plot_ionograms.py # plot calculated ionograms\n\n## Installation\nSee dependencies.txt for instructions on how to build the dependencies (tested on Ubuntu 18 & 20)\nYou need to compile the chirp downconversion library, which is written in C.\n```\nmake \n```\nThere is no packaging or other installation needed. You just run the scripts in place. \n\nPython packages that are required: pyfftw, numpy, scipy, matplotlib, digital_rf, mpi4py, h5py. Tested on Python 2.7.17 and Python 3.6.9. \n\n## Usage:\n1) Make a data capture with THOR (comes with <a href=\"https://github.com/MITHaystack/digital_rf\">DigitalRF</a>), a USRP N2x0, a GPSDO, and a broadband HF antenna in a quiet location. I recommend using a 12.5 MHz center frequency and a 25 MHz sampling rate. Here is an example command to kick off a recording: \n\n```\nthor.py -m 192.168.10.3 -d \"A:A\" -c cha -f 12.5e6 -r 25e6 /dev/shm/hf25 \n```\n\nTip: You can use a RAM disk ring buffer to avoid dropped packets on slower computers and hard disks. This is not necessary, as the chirp analysis will be okay with dropped packets. Here's an example of how you can use rsync to shovel a digital rf recording on the fly from a ram disk to a hard disk.\n\n```\n# copy digital rf from ram disk to permanent storage:\nwhile true; do rsync -av --remove-source-files --exclude=tmp*\n--progress /dev/shm/hf25/cha /data_out/hf25/ ; sleep 1 ; done\n```\n\n2) configure by copying the example1.ini to e.g., configuration.ini. Edit the file to make sure you have the right center frequency, sample-rate, data directory, and channel name. I've only tested 25 MHz sample-rate and 12.5 MHz center-frequency so far.\n```\n[config]\n\n# channel name for the digital rf recording\nchannel=\"cha\"\n\n# the sample rate of the digital rf recording\nsample_rate=25000000.0\n\n# the center frequency of the digital rf recording\ncenter_freq=12.5e6\n\n# the location of the digital_rf recording\ndata_dir=\"/data_out/hf25\"\n\n# detection\nthreshold_snr=13.0\n\n# how many chirps can we at most detect simultaneously\nmax_simultaneous_detections=5\n\n# how sparsely do we search for chirps (1 .. N) 1 is slowest, but the most sensitive\n# every Nth block is analyzed \nstep=10            \n\n# how many samples per block are coherently integrated on chirp detection\nn_samples_per_block=5000000\n\nminimum_frequency_spacing=0.2e6\n# what chirp rates do we look for\nchirp_rates=[50e3,100e3,125e3,500.0084e3]\n\n# this is where all the data files are produced in\noutput_dir=\"./chirp2\"\n\n# what is the range resolution of the ionograms\nrange_resolution=2e3\n\n# what is the frequency step of the ionogram\nfrequency_resolution=50e3\n\n# what is the range extent around the strongest echo that is stored\nmax_range_extent=2000e3\n\n# how many threads are used when chirp downconverting\nn_downconversion_threads=4\n```\n\n3) Detect chirps on the recording. can be parallelized with MPI to speed things up if you have lots of CPUs and a very fast disk. If you don't have a fast disk, using too many processes may actually reduce performance due to trashing. \n```\nmpirun -np 4 python detect_chirps.py configuration.ini\n```\n\n4) Run find_timings.py to cluster together multiple detections of the same chirp to create a database of chirp timings\n```\npython find_timings.py configuration.ini\n```\n\n5) Run calc_ionograms.py to generate ionograms based on the timings that were found. Can be paralellized with MPI. Keep in mind that adding a lot of processes may be detrimental to performance, due to the 100 MB/s read requirement. If you have a slow disk, don't use too many processes here! Each MPI process is additionally multi-threaded, with the number of threads configured in the configuration file\n```\npython calc_ionograms.py configuration.ini\n```\n\n6) run plot_ionograms.py to create plots\n```\npython plot_ionograms.py configuration.ini\n```\n\n\n## Examples\n\nAll of these are observed in Northern Norway (Skibotn). I typically see around 100 ionograms per hour in a recording.\n\nUS ROTHR (hard to tell which one, as I'm so far away)\n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example00.png\" width=\"60%\"/>\n\nSodankylä geophysical observatory vertical sounding ionosonde\n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example01.png\" width=\"60%\"/>\n\nUS ROTHR (hard to tell which one, as I'm so far away)\n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example02.png\" width=\"60%\"/>\n\nSodankylä geophysical observatory vertical sounding ionosonde\n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example03.png\" width=\"60%\"/>\n\nAustralian JORN. Very far away! I see many of these at the right time of day. \n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example04.png\" width=\"60%\"/>\n\nUS ROTHR (hard to tell which one, as I'm so far away)\n\n<img src=\"https://raw.githubusercontent.com/jvierine/chirpsounder2/python-packaging/examples//example05.png\" width=\"60%\"/>\n\n## Links\n\nYou can also use your sound card and HAM radio to detect chirps using the <a href=\"https://www.andrewsenior.me.uk/chirpview\">Chirpview</a> program.\n\nUniversity of Twente operates a WebSDR, which is capable of <a href=\"http://websdr.ewi.utwente.nl:8901/chirps/\">tracking known chirp sounders</a>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ChirpSounder",
    "package_url": "https://pypi.org/project/ChirpSounder/",
    "platform": "",
    "project_url": "https://pypi.org/project/ChirpSounder/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/ChirpSounder/2.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Detect chirp sounders and over the horizon transmissions",
    "version": "2.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10845506,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bef3f0e082c26ba06b76e46057b730bee952fe585fca8ad0c663576a7304a46",
          "md5": "b6a87c184683b290581a84a3aa4c2ce5",
          "sha256": "a3e678fe6513732e0e721d1e9bbac0adf594d0138c73d3b02c52af7cfd6036a0"
        },
        "downloads": -1,
        "filename": "ChirpSounder-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6a87c184683b290581a84a3aa4c2ce5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39034,
        "upload_time": "2021-06-23T10:03:25",
        "upload_time_iso_8601": "2021-06-23T10:03:25.368603Z",
        "url": "https://files.pythonhosted.org/packages/5b/ef/3f0e082c26ba06b76e46057b730bee952fe585fca8ad0c663576a7304a46/ChirpSounder-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "931aa8db47d2e3d49dc5431fc7102b1249ed79554e96bc83e9c500db640f6859",
          "md5": "f59e356f11e816199e6ec566d6915159",
          "sha256": "a64a534b4be5583b0a44dc4ba5cf9cf501b89ee12081ded0dffd65f8414d8c57"
        },
        "downloads": -1,
        "filename": "ChirpSounder-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f59e356f11e816199e6ec566d6915159",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39044,
        "upload_time": "2021-06-23T12:09:17",
        "upload_time_iso_8601": "2021-06-23T12:09:17.831598Z",
        "url": "https://files.pythonhosted.org/packages/93/1a/a8db47d2e3d49dc5431fc7102b1249ed79554e96bc83e9c500db640f6859/ChirpSounder-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b624aa91cc39aeb13f132838ad08df9365c223f6e31a4c3c3138e34308c6a839",
          "md5": "c63ae2de530c05a0ba6a9ffa5752752c",
          "sha256": "dd4826a9e6fc1a819fc221f3622129c963d302870abc4ecfa93f42d20991d433"
        },
        "downloads": -1,
        "filename": "ChirpSounder-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c63ae2de530c05a0ba6a9ffa5752752c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 166954,
        "upload_time": "2021-07-06T10:28:01",
        "upload_time_iso_8601": "2021-07-06T10:28:01.871047Z",
        "url": "https://files.pythonhosted.org/packages/b6/24/aa91cc39aeb13f132838ad08df9365c223f6e31a4c3c3138e34308c6a839/ChirpSounder-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e032cb37757ea765e943d737a10feab235ade38c8666c36f13e920343a1782e",
          "md5": "6c079cde5815c585d17be483fa2f1e10",
          "sha256": "5cf2c67e1fb615f1831946580c2a4692c1711137836839cd65d3fb0ce5e32898"
        },
        "downloads": -1,
        "filename": "ChirpSounder-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6c079cde5815c585d17be483fa2f1e10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 47472,
        "upload_time": "2021-07-07T13:21:58",
        "upload_time_iso_8601": "2021-07-07T13:21:58.708660Z",
        "url": "https://files.pythonhosted.org/packages/6e/03/2cb37757ea765e943d737a10feab235ade38c8666c36f13e920343a1782e/ChirpSounder-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e032cb37757ea765e943d737a10feab235ade38c8666c36f13e920343a1782e",
        "md5": "6c079cde5815c585d17be483fa2f1e10",
        "sha256": "5cf2c67e1fb615f1831946580c2a4692c1711137836839cd65d3fb0ce5e32898"
      },
      "downloads": -1,
      "filename": "ChirpSounder-2.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6c079cde5815c585d17be483fa2f1e10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47472,
      "upload_time": "2021-07-07T13:21:58",
      "upload_time_iso_8601": "2021-07-07T13:21:58.708660Z",
      "url": "https://files.pythonhosted.org/packages/6e/03/2cb37757ea765e943d737a10feab235ade38c8666c36f13e920343a1782e/ChirpSounder-2.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}