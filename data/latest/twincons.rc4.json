{
  "info": {
    "author": "Petar Penev",
    "author_email": "ppenev@gatech.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# TwinCons: analysis toolkit for two sequence groups within an MSA\n\nConservation score that highlights conserved, variable and diverging (signature) positions between two sequence groups within an alignment. The method mathematically determines a ‘cost’ of transforming one alignment group to the other. Includes automated parsing protocol for the detection of continuous stretches (segments) of high TwinCons scoring columns within protein alignments to query deep ancestry of short peptides.\n\n## Dependencies\nPrograms required to be present in the PATH:\n- MAFFT https://mafft.cbrc.jp/alignment/software/\n- DSSP https://swift.cmbi.umcn.nl/gv/dssp/ or in Linux just execute\n\t> apt-get install dssp\n\n## [TwinCons.py](./bin/TwinCons.py)\n\nGenerates data for subsequent scripts or can be used independently. Calculates TwinCons conservation for a given alignment.\n\n### Usage\n\n1. Input files\n- One fasta alignment file with two defined groups **(Required)**. If no groups are defined a phylogenetic tree can be built from the alignment, the groups are defined by the deepest branching point in the tree. Alternatively two alignment files can be provided, each defining a single group - mafft-merge will be used to merge them in a single alignment.\n- One or two structure files for each group to map data. The name of the file must include the sequence group name as defined in the alignment. (Optional)\n\nExample sequence group definitions in fasta format:\n```\n>GROUP1_TAXID1_SEQNAME1\nMTKF-EVPKEISDKVLQTLELAKNTG\n>GROUP1_TAXID2_SEQNAME2\nMTKF-EVPKEISDKVLQTLELAKNTG\n>GROUP2_TAXID3_SEQNAME3\nMTKF-EVPKEISDKVLQTLELAKNTG\n>GROUP2_TAXID4_SEQNAME4\nMTKF-EVPKEISDKVLQTLELAKNTG\n```\n\nExample structure file naming:\n```\nSEQNAME1_GROUP1.pdb\nSEQNAME3_GROUP2.pdb\n```\n\nTypical usage:\n```\nTwinCons.py -a ./data/ALNS/test_aln.fa -mx blosum62 -csv -o ./test_aln\nTwinCons.py -a ./data/ALNS/casp9-mcasp_struct.fa -pml unix -s ./data/PDB/HUMAN_CASP9.pdb ./data/PDB/YEAST_MCASP.pdb -ssbe -sy ./data/PDB/HUMAN_CASP9.pdb ./data/PDB/YEAST_MCASP.pdb -o ./twc_ssbe_HS-CASP9_SC-MCASP\n```\n\n2. Output files\n\t- **pml file** for all structures with residue colors defined by the score\n\t- **svg** with score trace for alignment position\n\t- **csv** output for [**RiboVision**](http://apollo.chemistry.gatech.edu/RiboVision2/) when provided with structure file\n\t- **csv** output with scores per alignment position\n\t- **optional data** if ran as a module within other python scripts **for multiple alignment analysis**\n\nUsage:\n```\nTwinCons.py [-h] [-o OUTPUT_PATH] (-a ALIGNMENT_PATHS [ALIGNMENT_PATHS ...] | -as ALIGNMENT_STRING) [-bn {uniform,bgfreq}] [-cg] [-gg] [-gt GAP_THRESHOLD] [-s STRUCTURE_PATHS [STRUCTURE_PATHS ...]] [-sy STRUCTURE_PYMOL [STRUCTURE_PYMOL ...]]\n                   [-phy] [-nc] [-w {pairwise,voronoi}] [-ca] (-p | -pml {unix,windows} | -r | -csv | -rv | -jv)\n                   [-mx {benner6,benner22,benner74,blosum100,blosum30,blosum35,blosum40,blosum45,blosum50,blosum55,blosum60,blosum62,blosum65,blosum70,blosum75,blosum80,blosum85,blosum90,blosum95,genetic,gonnet,ident,johnson,levin,miyata,nwsgappep,pam120,pam180,pam250,pam30,pam300,pam60,pam90,risler,structure,blastn,identity,trans} | -cm CUSTOM_MATRIX | -lg | -e | -rs]\n                   [-ss | -be | -ssbe]\n\nCalculate and visualize conservation between two groups of sequences from one alignment\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT_PATH, --output_path OUTPUT_PATH\n                        Output path\n  -a ALIGNMENT_PATHS [ALIGNMENT_PATHS ...], --alignment_paths ALIGNMENT_PATHS [ALIGNMENT_PATHS ...]\n                        Path to alignment files. If given two files it will use mafft --merge to merge them in single alignment.\n  -as ALIGNMENT_STRING, --alignment_string ALIGNMENT_STRING\n                        Alignment string\n  -bn {uniform,bgfreq}, --baseline {uniform,bgfreq}\n                        Whether to baseline the used matrix with the uniform vector or with the matrix background frequency.\n                                (Default: bgfreq)\n  -cg, --cut_gaps       Remove alignment positions with % gaps greater than the specified value with gap_threshold.\n  -gg, --calculate_group_gaps\n                        Calculate alignment position gaps in 3 groups using 2*gap threshold value:\n                                Ungapped - Aligned positions;\n                                GroupGap - Only one group has sequences;\n                                AllGap - Both groups are gapped.\n  -gt GAP_THRESHOLD, --gap_threshold GAP_THRESHOLD\n                        Specify % gaps per alignment position. (Default = the smaller between ((sequences of group1)/(all sequences) and (sequences of group2)/(all sequences)) minus 0.05)\n  -s STRUCTURE_PATHS [STRUCTURE_PATHS ...], --structure_paths STRUCTURE_PATHS [STRUCTURE_PATHS ...]\n                        Paths to structure files, for score calculation. Does not work with --nucleotide!\n  -sy STRUCTURE_PYMOL [STRUCTURE_PYMOL ...], --structure_pymol STRUCTURE_PYMOL [STRUCTURE_PYMOL ...]\n                        Paths to structure files, for plotting a pml.\n  -phy, --phylo_split   Split the alignment in two groups by constructing a tree instead of looking for _ separated strings.\n  -nc, --nucleotide     Input is nucleotide sequence. Specify nucleotide matrix for score calculation with -mx or entropy calculations with -e or -rs\n  -w {pairwise,voronoi}, --weigh_sequences {pairwise,voronoi}\n                        Weigh sequences within each alignment group.\n  -ca, --compositional_adjustment\n                        Adjust the substitution matrix with residue frequencies computed from the two alignment groups.\n                         Available only for BLOSUM matrices, using the methods decribed in doi.org/10.1073/pnas.2533904100 and doi.org/10.1093/bioinformatics/bti070.\n  -p, --plotit          Plots the calculated score as a bar graph for each alignment position.\n  -pml {unix,windows}, --write_pml_script {unix,windows}\n                        Writes out a PyMOL coloring script for any structure files that have been defined. Choose between unix or windows style paths for the pymol script.\n  -r, --return_within   To be used from within other python programs. Returns dictionary of alnpos->score.\n  -csv, --return_csv    Saves a csv with alignment position -> score.\n  -rv, --ribovision     Saves a csv formatted for RiboVision. Requires at least one structure defined with the -sy argument.\n  -jv, --jalview_output\n                        Saves an annotation file for Jalview.\n  -mx {benner6,benner22,benner74,blosum100,blosum30,blosum35,blosum40,blosum45,blosum50,blosum55,blosum60,blosum62,blosum65,blosum70,blosum75,blosum80,blosum85,blosum90,blosum95,genetic,gonnet,ident,johnson,levin,miyata,nwsgappep,pam120,pam180,pam250,pam30,pam300,pam60,pam90,risler,structure,blastn,identity,trans}, --substitution_matrix {benner6,benner22,benner74,blosum100,blosum30,blosum35,blosum40,blosum45,blosum50,blosum55,blosum60,blosum62,blosum65,blosum70,blosum75,blosum80,blosum85,blosum90,blosum95,genetic,gonnet,ident,johnson,levin,miyata,nwsgappep,pam120,pam180,pam250,pam30,pam300,pam60,pam90,risler,structure,blastn,identity,trans}\n                        Choose a substitution matrix for score calculation.\n  -cm CUSTOM_MATRIX, --custom_matrix CUSTOM_MATRIX\n                        Provide path to a custom PAML format matrix. For example format see the matrices folder.\n  -lg, --leegascuel     Use LG matrix for score calculation\n  -e, --shannon_entropy\n                        Use shannon entropy for conservation calculation.\n  -rs, --reflected_shannon\n                        Use shannon entropy for conservation calculation and reflect the result so that a fully random sequence will be scored as 0.\n  -ss, --secondary_structure\n                        Use substitution matrices derived from data dependent on the secondary structure assignment.\n  -be, --burried_exposed\n                        Use substitution matrices derived from data dependent on the solvent accessability of a residue.\n  -ssbe, --both         Use substitution matrices derived from data dependent on both the secondary structure and the solvent accessability of a residue.\n```\n\n# Multiple alignment analysis\n\n[CalculateSegments.py](./bin/CalculateSegments.py) executes the [TwinCons.py](./bin/TwinCons.py) script for a given folder with sequence alignments. Calculates length, weight, normalized lengths and positions of high scoring segments from the results of TwinCons.\n\nTries to guess the type of comparison and color code the included datasets. For lower number of alignments (up to 20) applies different color for each alignment. For greater number of alignments tagged in different groups (e.g. A_alignment-nameX.fas, B_alignment-nameY.fas and so on), uses the viridis colormap to color each group of alignments together. For exactly 10 alignments in a folder assumes they are ordered by similarity and colors them with a Purple Green gradient.\n\nCan pass all options for calculation already present in TwinCons with the option -co. <span style=\"color:red\">However, as of now it does not support structure mapping of scores or using structure defined matrices</span>. \n\nIt does support the options: **-gt**, **-cg**, **-phy**, [**-lg**, **-bl**, **-e**, **-c**]. Should be passed as separate arguments after the flag -co without the dashes and underscore for flags with parameters. -co should be the last argument passed to [CalculateSegments.py](./bin/CalculateSegments.py) since any argument following -co will be passed to [TwinCons.py](./bin/TwinCons.py). \n\nTypical usage:\n```\ntwcCalculateSegments.py ./folder_with_alignments/ ./output_file -c -cms 9 -co cg gt_0.9 phy bl\n```\nUsage:\n```\ntwcCalculateSegments.py [-h] (-a ALIGNMENT_PATH | -twc TWINCONS_PATH) [-t LENGTH_THRESHOLD] [-it INTENSITY_THRESHOLD] [-cms CUMULATIVE_SEGMENTS] [-avew] [-np] [-c] [-p] [-l] [-co CALCULATION_OPTIONS [CALCULATION_OPTIONS ...]] output_path\n\nCalculates segments for multiple or single alignments\n\npositional arguments:\n  output_path           Path to image for output.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ALIGNMENT_PATH, --alignment_path ALIGNMENT_PATH\n                        Path to folder with alignment files.\n  -twc TWINCONS_PATH, --twincons_path TWINCONS_PATH\n                        Path to folder with csv output files from TwinCons.py\n  -t LENGTH_THRESHOLD, --length_threshold LENGTH_THRESHOLD\n                        Threshold for consecutive low scores that split positive segments.                                                \n                        Default: 3\n  -it INTENSITY_THRESHOLD, --intensity_threshold INTENSITY_THRESHOLD\n                        Threshold for intensity over which a score is considered truly positive.                                                \n                        Default: 1\n  -cms CUMULATIVE_SEGMENTS, --cumulative_segments CUMULATIVE_SEGMENTS\n                        Delineate segments based on cumulative score and local minima/maxima, instead of specific thresholds.                                                \n                        Argument should provide window size for smoothing of the cumulative score.\n  -avew, --average_weight\n                        Use average weight for segments, instead of using their total weight.\n  -np, --treat_highly_negative_as_conserved\n                        Treat low scoring positions as conserved for segment calculation.                                                 \n                        Considers the absolute for negative positions when comparing with intensity threshold.\n  -c, --csv             Output length and weight distributions in a csv file.                                                 \n                        Uses the output file name specified by appending .csv\n  -p, --plot            Plot a scatter of the segments.\n  -l, --legend          Draw a legend.\n  -co CALCULATION_OPTIONS [CALCULATION_OPTIONS ...], --calculation_options CALCULATION_OPTIONS [CALCULATION_OPTIONS ...]\n                        Options for TwinCons calculation. See README for details.\n```\n\nSample output:\n\n<img src=\"./data/CSV/BBS_cg09_it1_lt3.png\">\n\n# Analyzing TWC results\n\n## Training a classifier\n\nMust include parameters used in TwinCons and CalculateSegments. Use the same format as -co from Calculate segments. For example:\n\n\ttwcSVMtrain.py output.csv output.pkl -pd output.png -ts 1 -tp 1 -twca mx_blosum62 gt_0.9 cg -csa lt_3 it_2\n\nUsage:\n```\ntwcSVMtrain.py [-h] [-twca TWINCONS_ARGS [TWINCONS_ARGS ...]] [-csa CALCSEGM_ARGS [CALCSEGM_ARGS ...]] [-pd PLOT_DF] [-tp PENALTY] [-k {linear,poly,rbf,sigmoid,precomputed}] [-g {auto,scale}]\n                      [-l {absolute,normalized,cms}] [-ts TOP_SEGMENTS]\n                      csv_path output_path\n\nGenerate SVM from alignment segments.\nComputes a decision function from csv generated with twcCalculateSegments\n\npositional arguments:\n  csv_path              Path to csv file storing alignment segment data\n  output_path           Output path\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -twca TWINCONS_ARGS [TWINCONS_ARGS ...], --twincons_args TWINCONS_ARGS [TWINCONS_ARGS ...]\n                        Arguments used with TwinCons.\n  -csa CALCSEGM_ARGS [CALCSEGM_ARGS ...], --calcsegm_args CALCSEGM_ARGS [CALCSEGM_ARGS ...]\n                        Arguments used with twcCalculateSegments.\n  -pd PLOT_DF, --plot_df PLOT_DF\n                        Path to output plot for the decision function.\n  -tp PENALTY, --penalty PENALTY\n                        Penalty for training algorithm. (Default = 1)\n  -k {linear,poly,rbf,sigmoid,precomputed}, --kernel {linear,poly,rbf,sigmoid,precomputed}\n                        Kernel for the training algorithm\n  -g {auto,scale}, --gamma {auto,scale}\n                        Gamma function for training algorithm\n  -l {absolute,normalized,cms}, --length_type_calculation {absolute,normalized,cms}\n                        Choose what type of segment calculation should be used.        \n                                 absolute:   absolute length of the segments.        \n                                 normalized: length of segments is normalized with the total alignment length.        \n                                 cms:        average position (center of mass) from all segments per alignment.\n  -ts TOP_SEGMENTS, --top_segments TOP_SEGMENTS\n                        Limit input for each alignment to the top segments that cover        \n                        this percentage of the total normalized length and weight. (Default = 0.5)\n```\n\nExample output of BaliBASE decision boundary:\n<img src=\"./data/outputs/SVM/BBS.png\">\n\n## Testing a classifier\nUsage:\n```\ntwcSVMtest.py [-h] [-pd PLOT_DF] [-ts TOP_SEGMENTS] [-l {absolute,normalized,cms}] (-tcp | -tqa) [-dt Start End Step] csv_path output_path pickle\n\nEvaluates alignment entries in csv generated from twcCalculateSegments.\nRequires a decision function and json features generated from SVM_train.\nTrain and test only with the same parameters!\nSuch parameters can be % cutting gaps, center mass segments, top segments.\n\npositional arguments:\n  csv_path              Path to csv file storing alignment segment data\n  output_path           Path to output significant segment results\n  pickle                Provide path to classifier pickle binary file. The script will also search for an identically                                    \n                        named file with extension \".json\" containing parameters used for training the classifier, for example:                                    \n                        pickle file:    random_test.pkl                                    \n                        maximal values: random_test.pkl.maxvals\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -pd PLOT_DF, --plot_df PLOT_DF\n                        Path to output plot for the decision function.\n  -ts TOP_SEGMENTS, --top_segments TOP_SEGMENTS\n                        Limit input for each alignment to the top segments that cover                                    \n                         this percentage of the total normalized length and weight. (Default = 0.5)\n  -l {absolute,normalized,cms}, --length_type_calculation {absolute,normalized,cms}\n                        Choose what type of segment calculation should be used.        \n                                 absolute:   absolute length of the segments.        \n                                 normalized: length of segments is normalized with the total alignment length.        \n                                 cms:        average position (center of mass) from all segments per alignment.\n  -tcp, --test_classifier_precision\n                        Provided csv is annotated for testing the classifier.\n  -tqa, --test_query_alignments\n                        Provided csv is a query and is not annotated for testing the classifier.\n  -dt Start End Step, --range_distance_thresholds Start End Step\n                        Range of distances from the decision boundary to evaluate.                                    \n                        Default for non evalue (-20, 20, 0.05).\n```\n\n\n### Average distance\nIn the case of large segments there will be few segments and they will be far away from the boundary => cost nearing 0. In the case of many small segments their distance to the boundary will be accumulated resulting in big negative number (larger than any segment can attain on it's own) => cost nearing infinity.\n\n### Identifying significant segments\n\n<img src=\"./data/outputs/SVM/BBS_vs_BBS.png\">\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/petaripenev/AlignmentScore",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TwinCons",
    "package_url": "https://pypi.org/project/TwinCons/",
    "platform": null,
    "project_url": "https://pypi.org/project/TwinCons/",
    "project_urls": {
      "Homepage": "https://github.com/petaripenev/AlignmentScore"
    },
    "release_url": "https://pypi.org/project/TwinCons/0.6.2.dev0/",
    "requires_dist": [
      "Bio (>=0.1.0)",
      "biopandas (>=0.2.5)",
      "matplotlib (>=3.1.1)",
      "numpy (>=1.17.2)",
      "pandas (>=0.25.1)",
      "plotly (>=4.7.0)",
      "scikit-learn (==0.23.2)",
      "scipy (>=1.3.1)",
      "seaborn (>=0.9.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "This projects provides several packages for analysis of MSAs comprised of two sequence groups.",
    "version": "0.6.2.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14457395,
  "releases": {
    "0.5.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a069586c2df9ad74bdce6299f84d1ab1ca612e19bd363e039898ee43e51fa58",
          "md5": "3da60798568e964171c5157fbfc9cd3f",
          "sha256": "4bac1478de99c2f80ac43d36d910060f1e32c0901dc11015d8a6e9dd756ba60f"
        },
        "downloads": -1,
        "filename": "TwinCons-0.5.2.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3da60798568e964171c5157fbfc9cd3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 134007,
        "upload_time": "2020-12-28T21:59:13",
        "upload_time_iso_8601": "2020-12-28T21:59:13.939774Z",
        "url": "https://files.pythonhosted.org/packages/3a/06/9586c2df9ad74bdce6299f84d1ab1ca612e19bd363e039898ee43e51fa58/TwinCons-0.5.2.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c2360494ed6a2d2126e90418f197bd602a7e3807ab0e346e9c9ece95a5163a1",
          "md5": "ddda17a9480bd8ef450cc669b78ff2d2",
          "sha256": "d409a1577eb6e243caef3d3bae7c896adb220f0ced51fa762c7f11973e476d78"
        },
        "downloads": -1,
        "filename": "TwinCons-0.5.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "ddda17a9480bd8ef450cc669b78ff2d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 94044,
        "upload_time": "2020-12-28T21:59:15",
        "upload_time_iso_8601": "2020-12-28T21:59:15.856897Z",
        "url": "https://files.pythonhosted.org/packages/6c/23/60494ed6a2d2126e90418f197bd602a7e3807ab0e346e9c9ece95a5163a1/TwinCons-0.5.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1819b8bc2e9c5ca32162d4351edfd2ce0e0e0adea02991631bd34567a39261e",
          "md5": "e68ef1a0ae956714e69d31067812346f",
          "sha256": "107be38e6066f544cecf6053444a89a7cda9c44734dd439ee4a4b285632e950a"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.0.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e68ef1a0ae956714e69d31067812346f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 245033,
        "upload_time": "2021-09-12T23:12:00",
        "upload_time_iso_8601": "2021-09-12T23:12:00.949098Z",
        "url": "https://files.pythonhosted.org/packages/e1/81/9b8bc2e9c5ca32162d4351edfd2ce0e0e0adea02991631bd34567a39261e/TwinCons-0.6.0.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e031a9ba7dc39a400cf5be780cb880500605ae8f796e39059a5990e11b62ea31",
          "md5": "0f8a0a1ed0542c9c0a158396191294b2",
          "sha256": "0d46cc7b5e83ef0e44c75f25c64bb3f97aef2a66e0f4f3a7778714aeee8c222a"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f8a0a1ed0542c9c0a158396191294b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 183299,
        "upload_time": "2021-09-12T23:12:02",
        "upload_time_iso_8601": "2021-09-12T23:12:02.164222Z",
        "url": "https://files.pythonhosted.org/packages/e0/31/a9ba7dc39a400cf5be780cb880500605ae8f796e39059a5990e11b62ea31/TwinCons-0.6.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02ae2f1272d16b4c5e23d35976871ada3871d1b63788046be6a72ee486091ad4",
          "md5": "fb1299c4fd06759b056f636563e7d134",
          "sha256": "0f02d249e30b8b00bc6656ef985b0edb9d32905a3a3bc8c6ddfc33093fd79fc2"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb1299c4fd06759b056f636563e7d134",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 245037,
        "upload_time": "2021-09-12T23:20:20",
        "upload_time_iso_8601": "2021-09-12T23:20:20.417036Z",
        "url": "https://files.pythonhosted.org/packages/02/ae/2f1272d16b4c5e23d35976871ada3871d1b63788046be6a72ee486091ad4/TwinCons-0.6.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dabab9e4482473aecae35e1d38ee5c627a329344b007182127d22e9bbea9603",
          "md5": "d0853cff7d70b671eef1af55afb8a99c",
          "sha256": "19ea68463245f242ab48e433366f6d9d9ccd8efbef6a78f980b48bca9c768a4e"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0853cff7d70b671eef1af55afb8a99c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 183309,
        "upload_time": "2021-09-12T23:20:21",
        "upload_time_iso_8601": "2021-09-12T23:20:21.855386Z",
        "url": "https://files.pythonhosted.org/packages/0d/ab/ab9e4482473aecae35e1d38ee5c627a329344b007182127d22e9bbea9603/TwinCons-0.6.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "426c88e426dc131f5c648c0127eed27bfdbedb0c4f75b1f1305aee018c4a166d",
          "md5": "d0fecde173e71d5b157dbf44ea7481c2",
          "sha256": "373a82fe6d53397101f96011883fcc4de22403dbe84011750db19ea34eafed6a"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.2.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0fecde173e71d5b157dbf44ea7481c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 245180,
        "upload_time": "2022-07-17T01:13:18",
        "upload_time_iso_8601": "2022-07-17T01:13:18.438685Z",
        "url": "https://files.pythonhosted.org/packages/42/6c/88e426dc131f5c648c0127eed27bfdbedb0c4f75b1f1305aee018c4a166d/TwinCons-0.6.2.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c922c6f03a9d240087b0ce8c668c8f31e35cf246c7b29320199200e102f0a60",
          "md5": "5d8aeddf12f45e758223ef605a65cb8e",
          "sha256": "6900d135f6537e4718060f01f7e3ae5037d84d48fe425d04c0c3219d00bd964f"
        },
        "downloads": -1,
        "filename": "TwinCons-0.6.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d8aeddf12f45e758223ef605a65cb8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 164928,
        "upload_time": "2022-07-17T01:13:21",
        "upload_time_iso_8601": "2022-07-17T01:13:21.080107Z",
        "url": "https://files.pythonhosted.org/packages/8c/92/2c6f03a9d240087b0ce8c668c8f31e35cf246c7b29320199200e102f0a60/TwinCons-0.6.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "426c88e426dc131f5c648c0127eed27bfdbedb0c4f75b1f1305aee018c4a166d",
        "md5": "d0fecde173e71d5b157dbf44ea7481c2",
        "sha256": "373a82fe6d53397101f96011883fcc4de22403dbe84011750db19ea34eafed6a"
      },
      "downloads": -1,
      "filename": "TwinCons-0.6.2.dev0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0fecde173e71d5b157dbf44ea7481c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 245180,
      "upload_time": "2022-07-17T01:13:18",
      "upload_time_iso_8601": "2022-07-17T01:13:18.438685Z",
      "url": "https://files.pythonhosted.org/packages/42/6c/88e426dc131f5c648c0127eed27bfdbedb0c4f75b1f1305aee018c4a166d/TwinCons-0.6.2.dev0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c922c6f03a9d240087b0ce8c668c8f31e35cf246c7b29320199200e102f0a60",
        "md5": "5d8aeddf12f45e758223ef605a65cb8e",
        "sha256": "6900d135f6537e4718060f01f7e3ae5037d84d48fe425d04c0c3219d00bd964f"
      },
      "downloads": -1,
      "filename": "TwinCons-0.6.2.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "5d8aeddf12f45e758223ef605a65cb8e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 164928,
      "upload_time": "2022-07-17T01:13:21",
      "upload_time_iso_8601": "2022-07-17T01:13:21.080107Z",
      "url": "https://files.pythonhosted.org/packages/8c/92/2c6f03a9d240087b0ce8c668c8f31e35cf246c7b29320199200e102f0a60/TwinCons-0.6.2.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}