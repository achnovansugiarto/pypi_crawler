{
  "info": {
    "author": "Abian Rodriguez",
    "author_email": "abiangrodriguez@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Logging"
    ],
    "description": "azure-storage-logging_updated\n=================================\n\n.. image:: http://img.shields.io/pypi/v/azure-storage-logging.svg?style=flat\n    :target: https://pypi.python.org/pypi/azure-storage-logging\n\n.. image:: http://img.shields.io/pypi/l/azure-storage-logging.svg?style=flat\n    :target: http://www.apache.org/licenses/LICENSE-2.0.html\n\n*azure-storage-logging_table* is a fork from *azure-storage-logging* out of the author's necesity to send output from the standard Python logging APIs to Microsoft Azure Storage Tables.\nDue to the original module by Michiya Takahashi being outdated, it modifies it to restore functionality to the TableStorageHandler for logging. \nIn the future, more functionalities may be restored. But on this current version only the TableStorageHandler is usable.\n\nDependencies\n------------\n\n* azure-data-tables 12.4.0\n\nInstallation\n------------\n\nInstall the package via pip: ::\n\n    pip install azure-storage-logging_table\n\nUsage\n-----\n\nThe module **azure_storage_logging.handlers** in the package contains\nthe following logging handler classes. Each of them uses a different\ntype of Microsoft Azure Storage to send its output to. They all are subclasses\nof the standard Python logging handler classes, so you can make use of them\nin the standard ways of Python logging configuration.\n\nIn addition to\n`the standard formats for logging <http://docs.python.org/2.7/library/logging.html#logrecord-attributes>`_,\nthe special format ``%(hostname)s`` is also available in your message formatter\nfor the handlers. The format is introduced for ease of identifying the source\nof log messages which come from many computers and go to the same storage.\n\nTableStorageHandler\n~~~~~~~~~~~~~~~~~~~\nThe **TableStorageHandler** class is a subclass of **logging.Handler** class,\nand it sends log messages to Azure table storage and store them\nas entities in the specified table.\n\nThe handler puts a formatted log message from applications in the *message*\nproperty of a table entity along with some system-defined properties\n(*PartitionKey*, *RowKey*, and *Timestamp*) like this:\n\n+--------------+-----------+----------------+-------------+\n| PartitionKey | RowKey    | Timestamp      | message     |\n+==============+===========+================+=============+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n| XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | log message |\n+--------------+-----------+----------------+-------------+\n\n* *class* azure_storage_logging.handlers.TableStorageHandler(*account_name=None, account_key=None, protocol='https', table='logs', batch_size=0, extra_properties=None, partition_key_formatter=None, row_key_formatter=None, is_emulated=False*)\n\n    Returns a new instance of the **TableStorageHandler** class.\n    The instance is initialized with the name and the key of your\n    Azure Storage account and some optional parameters.\n\n    The *table* specifies the name of the table that stores log messages.\n    A new table will be created if it doesn't exist. The table name must\n    conform to the naming convention for Azure Storage table, see\n    `the naming convention for tables <http://msdn.microsoft.com/library/azure/dd179338.aspx>`_\n    for more details.\n\n    The *protocol* specifies the protocol to transfer data between\n    Azure Storage and your application, ``http`` and ``https``\n    are supported.\n\n    You can specify the *batch_size* in an integer if you want to use\n    batch transaction when creating new log entities. If the *batch_size*\n    is greater than 1, all new log entities will be transferred to the\n    table at a time when the number of new log messages reaches the\n    *batch_size*. Otherwise, a new log entity will be transferred to\n    the table every time a logging is performed. The *batch_size* must be\n    up to 100 (maximum number of entities in a batch transaction for\n    Azure Storage table).\n\n    The *extra_properties* accepts a sequence of\n    `the formats for logging <http://docs.python.org/2.7/library/logging.html#logrecord-attributes>`_.\n    The handler-specific one ``%(hostname)s`` is also acceptable.\n    The handler assigns an entity property for every format specified in\n    *extra_properties*. Here is an example of using extra properties:\n\n    ::\n\n        import logging\n        from azure_storage_logging.handlers import TableStorageHandler\n\n        # configure the handler and add it to the logger\n        logger = logging.getLogger('example')\n        handler = TableStorageHandler(conn_str='myConnectionString', table='myTableName',\n                                      extra_properties=('%(hostname)s',\n                                                        '%(levelname)s'))\n        logger.addHandler(handler)\n\n        # output log messages\n        logger.info('info message')\n        logger.warning('warning message')\n        logger.error('error message')\n\n    And it will create the log entities, that have the extra properties\n    in addition to the regular property *message*, into the table like this:\n\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | PartitionKey | RowKey    | Timestamp      | hostname | levelname | message       |\n    +==============+===========+================+==========+===========+===============+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | INFO      | info message  |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | WARNING   | warn message  |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n    | XXXXX        | XXXXXXXXX | YYYY-MM-DD ... | myhost   | ERROR     | error message |\n    +--------------+-----------+----------------+----------+-----------+---------------+\n\n    You can specify an instance of your custom **logging.Formatters**\n    for the *partition_key_formatter* or the *row_key_formatter*\n    if you want to implement your own keys for the table.\n    The default formatters will be used for partition keys and row keys\n    if no custom formatter for them is given to the handler.\n    The default values for partition keys are provided by the format\n    ``%(asctime)s`` and the date format ``%Y%m%d%H%M`` (provides a unique\n    value per minute). The default values for row keys are provided by the\n    format ``%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d``\n    and the date format ``%Y%m%d%H%M%S``.\n\n    Note that the format ``%(rowno)d`` is a handler-specific one only\n    available for row keys. It would be formatted to a sequential and\n    unique number in a batch that starts from 0. The format is introduced\n    to avoid collision of row keys generated in a batch, and it would\n    always be formatted to 0 if you don't use batch transaction for logging\n    to the table.\n\n* setPartitionKeyFormatter(*fmt*)\n\n    Sets the handler's formatter for partition keys to *fmt*.\n\n* setRowKeyFormatter(*fmt*)\n\n    Sets the handler's formatter for row keys to *fmt*.\n\nExample\n-------\n\nHere is an example of the configurations and the logging that uses\nthree different types of storage from the logger:\n\n::\n\n    LOGGING = {\n        'version': 1,\n        'formatters': {\n            'simple': {\n                'format': '%(asctime)s %(message)s',\n            },\n            'verbose': {\n                'format': '%(asctime)s %(levelname)s %(hostname)s %(process)d %(message)s',\n            },\n            # this is the same as the default, so you can skip configuring it\n            'partition_key': {\n                'format': '%(asctime)s',\n                'datefmt': '%Y%m%d%H%M',\n            },\n            # this is the same as the default, so you can skip configuring it\n            'row_key': {\n                'format': '%(asctime)s%(msecs)03d-%(hostname)s-%(process)d-%(rowno)02d',\n                'datefmt': '%Y%m%d%H%M%S',\n            },\n        },\n        'handlers': {\n            'table': {\n                'conn_str': DefaultEndpointsProtocol=https;AccountName=test;AccountKey=akey==;EndpointSuffix=core.windows.net'\n                'protocol': 'https',\n                'table': 'logs',\n                'level': 'INFO',\n                'class': 'azure_storage_logging.handlers.TableStorageHandler',\n                'formatter': 'simple',\n                'extra_properties': ['%(hostname)s', '%(levelname)s'],\n                'partition_key_formatter': 'cfg://formatters.partition_key',\n                'row_key_formatter': 'cfg://formatters.row_key',\n            },\n        },\n        'loggers': {\n            'example': {\n                'handlers': ['table'],\n                'level': 'DEBUG',\n            },\n        }\n    }\n\n    import logging\n    from logging.config import dictConfig\n\n    dictConfig(LOGGING)\n    logger = logging.getLogger('example')\n    logger.debug('debug message')\n    logger.info('info message')\n    logger.warning('warning message')\n    logger.error('error message')\n    logger.critical('critical message')\n\nNotice\n------\n\n* Set *is_emulated* to ``True`` at initialization of the logging handlers\n  if you want to use this package with Azure storage emulator.\n\nLicense\n-------\n\nApache License 2.0\n\nCredits\n-------\n\n-  `Abian Rodriguez <http://github.com/AbianG>`__\n-  `Michiya Takahashi <http://github.com/michiya/>`__",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AbianG/azure-storage-logging_updated",
    "keywords": "azure logging",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-storage-logging-updated",
    "package_url": "https://pypi.org/project/azure-storage-logging-updated/",
    "platform": null,
    "project_url": "https://pypi.org/project/azure-storage-logging-updated/",
    "project_urls": {
      "Homepage": "https://github.com/AbianG/azure-storage-logging_updated"
    },
    "release_url": "https://pypi.org/project/azure-storage-logging-updated/0.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Logging handlers to send logs to Microsoft Azure Storage",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14339038,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6528df7232347cfaac54f2f20c2ac7e640e75dcbd69be5312a61c61cb73ef38",
          "md5": "55e93fb630561f0f8e67e8052314b063",
          "sha256": "bfba0b7c266416597f18f6f53c623e7a22b60d48afe8c5eefdba79c60ed53c01"
        },
        "downloads": -1,
        "filename": "azure-storage-logging_updated-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55e93fb630561f0f8e67e8052314b063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12203,
        "upload_time": "2022-07-05T10:50:26",
        "upload_time_iso_8601": "2022-07-05T10:50:26.723432Z",
        "url": "https://files.pythonhosted.org/packages/e6/52/8df7232347cfaac54f2f20c2ac7e640e75dcbd69be5312a61c61cb73ef38/azure-storage-logging_updated-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6528df7232347cfaac54f2f20c2ac7e640e75dcbd69be5312a61c61cb73ef38",
        "md5": "55e93fb630561f0f8e67e8052314b063",
        "sha256": "bfba0b7c266416597f18f6f53c623e7a22b60d48afe8c5eefdba79c60ed53c01"
      },
      "downloads": -1,
      "filename": "azure-storage-logging_updated-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "55e93fb630561f0f8e67e8052314b063",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12203,
      "upload_time": "2022-07-05T10:50:26",
      "upload_time_iso_8601": "2022-07-05T10:50:26.723432Z",
      "url": "https://files.pythonhosted.org/packages/e6/52/8df7232347cfaac54f2f20c2ac7e640e75dcbd69be5312a61c61cb73ef38/azure-storage-logging_updated-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}