{
  "info": {
    "author": "Peter Martigny",
    "author_email": "peter.martigny@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<img src=\"https://github.com/feedly/transfer-nlp/blob/v0.1/data/images/TransferNLP_Logo.jpg\" width=\"1000\">\n\nWelcome to the Transfer NLP library, a framework built on top of PyTorch to promote reproducible experimentation and Transfer Learning in NLP\n\nYou can have an overview of the high-level API on this [Colab Notebook](https://colab.research.google.com/drive/1DtC31eUejz1T0DsaEfHq_DOxEfanmrG1#scrollTo=Xzu3HPdGrnza), which shows how to use the framework on several examples.\nAll DL-based examples on these notebooks embed in-cell Tensorboard training monitoring!\n\nFor an example of pre-trained model finetuning, we provide a short executable tutorial on BertClassifier finetuning on this [Colab Notebook](https://colab.research.google.com/drive/10Toyi0V4fp0Sn33RSPCkoPrtf5FVpm3q#scrollTo=PXJFfulWkEl6)\n\n# Set up your environment\n\n```\nmkvirtualenv transfernlp\nworkon transfernlp\n\ngit clone https://github.com/feedly/transfer-nlp.git\ncd transfer-nlp\npip install -r requirements.txt\n```\n\nTo use Transfer NLP as a library:\n\n```\n# to install the experiment builder only\npip install transfernlp\n# to install Transfer NLP with PyTorch and Transfer Learning in NLP support\npip install transfernlp[torch]\n```\nor \n```\npip install git+https://github.com/feedly/transfer-nlp.git\n```\nto get the latest state before new releases.\n\nTo use Transfer NLP with associated examples:\n\n```\ngit clone https://github.com/feedly/transfer-nlp.git\npip install -r requirements.txt\n```\n\n# Documentation\nAPI documentation and an overview of the library can be found [here](https://transfer-nlp.readthedocs.io/en/latest/)\n\n# Reproducible Experiment Manager\nThe core of the library is made of an experiment builder: you define the different objects that your experiment needs, and the configuration loader builds them in a nice way. For reproducible research and easy ablation studies, the library then enforces the use of configuration files for experiments.\nAs people have different tastes for what constitutes a good experiment file, the library allows for experiments defined in several formats:\n\n- Python Dictionary\n- JSON\n- YAML\n- TOML\n\nIn Transfer-NLP, an experiment config file contains all the necessary information to define entirely the experiment.\nThis is where you will insert names of the different components your experiment will use, along with the hyperparameters you want to use.\nTransfer-NLP makes use of the Inversion of Control pattern, which allows you to define any class / method / function you could need, the `ExperimentConfig` class will create a dictionnary and instatiate your objects accordingly.\n\nTo use your own classes inside Transfer-NLP, you need to register them using the `@register_plugin` decorator. Instead of using a different registry for each kind of component (Models, Data loaders, Vectorizers, Optimizers, ...), only a single registry is used here, in order to enforce total customization.\n\nIf you use Transfer NLP as a dev dependency only, you might want to use it declaratively only, and call `register_plugin()` on objects you want to use at experiment running time. \n\nHere is an example of how you can define an experiment in a YAML file:\n\n```\ndata_loader:\n  _name: MyDataLoader\n  data_parameter: foo\n  data_vectorizer:\n    _name: MyVectorizer\n    vectorizer_parameter: bar\n\nmodel:\n  _name: MyModel\n  model_hyper_param: 100\n  data: $data_loader\n\ntrainer:\n  _name: MyTrainer\n  model: $model\n  data: $data_loader\n  loss:\n    _name: PyTorchLoss\n  tensorboard_logs: $HOME/path/to/tensorboard/logs\n  metrics:\n    accuracy:\n      _name: Accuracy\n```\n\nAny object can be defined through a class, method or function, given a `_name` parameters followed by its own parameters.\nExperiments are then loaded and instantiated using `ExperimentConfig(experiment=experiment_path_or_dict)`\n\nSome considerations:\n\n- Defaults parameters can be skipped in the experiment file.\n\n- If an object is used in different places, you can refer to it using the `$` symbol, for example here the `trainer` object uses the `data_loader` instantiated elsewhere. No ordering of objects is required.\n\n- For paths, you might want to use environment variables so that other machines can also run your experiments.\nIn the previous example, you would run e.g. `ExperimentConfig(experiment=yaml_path, HOME=Path.home())` to instantiate the experiment and replace `$HOME` by your machine home path.\n\n- The config instantiation allows for any complex settings with nested dict / list\n\nYou can have a look at the [tests](https://github.com/feedly/transfer-nlp/blob/master/tests/plugins/test_config.py) for examples of experiment settings the config loader can build.\nAdditionally we provide runnable experiments in [`experiments/`](https://github.com/feedly/transfer-nlp/tree/master/experiments).\n\n# Transfer Learning in NLP: flexible PyTorch Trainers\nFor deep learning experiments, we provide a `BaseIgniteTrainer` in [`transfer_nlp.plugins.trainers.py`](https://github.com/feedly/transfer-nlp/blob/master/transfer_nlp/plugins/trainers.py).\nThis basic trainer will take a model and some data as input, and run a whole training pipeline. We make use of the [PyTorch-Ignite](https://github.com/pytorch/ignite) library to monitor events during training (logging some metrics, manipulating learning rates, checkpointing models, etc...). Tensorboard logs are also included as an option, you will have to specify a `tensorboard_logs` simple parameters path in the config file. Then just run `tensorboard --logdir=path/to/logs` in a terminal and you can monitor your experiment while it's training!\nTensorboard comes with very nice utilities to keep track of the norms of your model weights, histograms, distributions, visualizing embeddings, etc so we really recommend using it.\n\n<img src=\"https://github.com/feedly/transfer-nlp/blob/v0.1/data/images/tensorboard.png\" width=\"1000\">\n\nWe provide a `SingleTaskTrainer` class which you can use for any supervised setting dealing with one task.\nWe are working on a `MultiTaskTrainer` class to deal with multi task settings, and a `SingleTaskFineTuner` for large models finetuning settings.\n\n# Use cases\nHere are a few use cases for Transfer NLP:\n\n- You have all your classes / methods / functions ready. Transfer NLP allows for a clean way to centralize loading and executing your experiments\n- You have all your classes but you would like to benchmark multiple configuration settings: the `ExperimentRunner` class allows for sequentially running your sets of experiments, and generates personalized reporting (you only need to implement your `report` method in a custom `ReporterABC` class)\n- You want to experiment with training deep learning models but you feel overwhelmed bby all the boilerplate code in SOTA models github projects. Transfer NLP encourages separation of important objects so that you can focus on the PyTorch `Module` implementation and let the trainers deal with the training part (while still controlling most of the training parameters through the experiment file)\n- You want to experiment with more advanced training strategies, but you are more interested in the ideas than the implementations details. We are working on improving the advanced trainers so that it will be easier to try new ideas for multi task settings, fine-tuning strategies or model adaptation schemes. \n\n\n# Slack integration\nWhile experimenting with your own models / data, the training might take some time. To get notified when your training finishes or crashes, you can use the simple library [knockknock](https://github.com/huggingface/knockknock) by folks at HuggingFace, which add a simple decorator to your running function to notify you via Slack, E-mail, etc.\n\n\n# Some objectives to reach:\n - Include examples using state of the art pre-trained models\n - Include linguistic properties to models\n - Experiment with RL for sequential tasks\n - Include probing tasks to try to understand the properties that are learned by the models\n\n# Acknowledgment\nThe library has been inspired by the reading of <cite>[\"Natural Language Processing with PyTorch\"](https://www.amazon.com/dp/1491978236/)<cite> by Delip Rao and Brian McMahan.\nExperiments in [`experiments`](https://github.com/feedly/transfer-nlp/tree/master/experiments/deep_learning_with_pytorch), the Vocabulary building block and embeddings nearest neighbors are taken or adapted from the code provided in the book.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/feedly/transfer-nlp/archive/v0.1.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/feedly/transfer-nlp",
    "keywords": "NLP,transfer learning,language models,NLU",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "transfer-nlp",
    "package_url": "https://pypi.org/project/transfer-nlp/",
    "platform": "",
    "project_url": "https://pypi.org/project/transfer-nlp/",
    "project_urls": {
      "Download": "https://github.com/feedly/transfer-nlp/archive/v0.1.6.tar.gz",
      "Homepage": "https://github.com/feedly/transfer-nlp"
    },
    "release_url": "https://pypi.org/project/transfer-nlp/0.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "NLP library designed for flexible research and development",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7346741,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e287db65dd78497fe511da96d184140b119768bd8689abe826eb05fc00bff7a5",
          "md5": "9050c1146f3a59e030b521acde676a26",
          "sha256": "207d949adea2ddbea79d20128cde42adfbd8104fc5e0db5503a3e8fd913a1df5"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9050c1146f3a59e030b521acde676a26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2256,
        "upload_time": "2019-04-06T06:19:52",
        "upload_time_iso_8601": "2019-04-06T06:19:52.895486Z",
        "url": "https://files.pythonhosted.org/packages/e2/87/db65dd78497fe511da96d184140b119768bd8689abe826eb05fc00bff7a5/transfer_nlp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d94bad2e47a0ed1edcf0079ef77bebf8bb6b4170fc70a4ae84935dea6ef863b",
          "md5": "33bcb0f1844f1c5ad0fb97d762372824",
          "sha256": "12feffaa371df82840c7d225c5ef0e42f3b7d124607f3450e286e554368aee90"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "33bcb0f1844f1c5ad0fb97d762372824",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4952,
        "upload_time": "2019-05-28T21:39:03",
        "upload_time_iso_8601": "2019-05-28T21:39:03.360071Z",
        "url": "https://files.pythonhosted.org/packages/8d/94/bad2e47a0ed1edcf0079ef77bebf8bb6b4170fc70a4ae84935dea6ef863b/transfer_nlp-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "100abd25c7ee411f1840c279f1fa920a2f72073f53a2e84f5162ca478f822f0f",
          "md5": "b50fcd09768f098e99fe883879878442",
          "sha256": "6bcd3e5efa9d62cf5b656c3d62e60d5282a65c1601648795f6c5f908be0b9b37"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b50fcd09768f098e99fe883879878442",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4950,
        "upload_time": "2019-05-28T21:52:31",
        "upload_time_iso_8601": "2019-05-28T21:52:31.260342Z",
        "url": "https://files.pythonhosted.org/packages/10/0a/bd25c7ee411f1840c279f1fa920a2f72073f53a2e84f5162ca478f822f0f/transfer_nlp-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2116128b96f55d7b38d424c88f449acba4540d3633323697d384d7d5bc947b03",
          "md5": "7d83062c49d1c7943d27e9a4e305e074",
          "sha256": "219d394fb5cea7d2ef84d3985f7b419a571641c112a6adc5cbf3b76cf677df48"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d83062c49d1c7943d27e9a4e305e074",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23892,
        "upload_time": "2019-05-28T23:46:42",
        "upload_time_iso_8601": "2019-05-28T23:46:42.415411Z",
        "url": "https://files.pythonhosted.org/packages/21/16/128b96f55d7b38d424c88f449acba4540d3633323697d384d7d5bc947b03/transfer_nlp-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c130b8e6c1a0e83cef742927ea7d5a37a0ebba65e72847c7c552fd39f4ed593",
          "md5": "4479eedc3caf53ab5aa90094299810f3",
          "sha256": "041808694bfc727f1c45b08afaebc30c0de0d4dd79f54ac08d142f1bd1671948"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4479eedc3caf53ab5aa90094299810f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23912,
        "upload_time": "2019-05-29T01:10:35",
        "upload_time_iso_8601": "2019-05-29T01:10:35.624803Z",
        "url": "https://files.pythonhosted.org/packages/0c/13/0b8e6c1a0e83cef742927ea7d5a37a0ebba65e72847c7c552fd39f4ed593/transfer_nlp-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84496db4a3594074ad51deefa7b72a58f189694e8298a4d0804e38bf08a59272",
          "md5": "44019fbf9b8843413cb3af5a46cbe800",
          "sha256": "093ca7bfd28ff29609eabff2fbdc4481655e85b680b28a8f0ce02b32560f313c"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "44019fbf9b8843413cb3af5a46cbe800",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23915,
        "upload_time": "2019-05-29T02:54:01",
        "upload_time_iso_8601": "2019-05-29T02:54:01.380898Z",
        "url": "https://files.pythonhosted.org/packages/84/49/6db4a3594074ad51deefa7b72a58f189694e8298a4d0804e38bf08a59272/transfer_nlp-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61e10521b59dd9f425139d4c4db093cda63ad85b1ef0ca35cfd7abdff573e8f7",
          "md5": "edbe233a3432add9ee3960e131e83a2b",
          "sha256": "4798bcc8814e749564f041c212be77e845bc3731795b0055825fad7171bd6f25"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "edbe233a3432add9ee3960e131e83a2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25519,
        "upload_time": "2019-06-25T17:34:12",
        "upload_time_iso_8601": "2019-06-25T17:34:12.072701Z",
        "url": "https://files.pythonhosted.org/packages/61/e1/0521b59dd9f425139d4c4db093cda63ad85b1ef0ca35cfd7abdff573e8f7/transfer_nlp-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa550a2d6a4d20ea05e06743e25048a492a4a73a9a1a24b5bd2d30c750778a53",
          "md5": "9482bf189ae767125d7e115c7e3e15a8",
          "sha256": "c370fc84a67485b9ee39ae0715e0ef2784d9d248a0d3752345ef88a968eef4cd"
        },
        "downloads": -1,
        "filename": "transfer_nlp-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9482bf189ae767125d7e115c7e3e15a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23796,
        "upload_time": "2020-05-28T19:00:02",
        "upload_time_iso_8601": "2020-05-28T19:00:02.577396Z",
        "url": "https://files.pythonhosted.org/packages/aa/55/0a2d6a4d20ea05e06743e25048a492a4a73a9a1a24b5bd2d30c750778a53/transfer_nlp-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa550a2d6a4d20ea05e06743e25048a492a4a73a9a1a24b5bd2d30c750778a53",
        "md5": "9482bf189ae767125d7e115c7e3e15a8",
        "sha256": "c370fc84a67485b9ee39ae0715e0ef2784d9d248a0d3752345ef88a968eef4cd"
      },
      "downloads": -1,
      "filename": "transfer_nlp-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "9482bf189ae767125d7e115c7e3e15a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23796,
      "upload_time": "2020-05-28T19:00:02",
      "upload_time_iso_8601": "2020-05-28T19:00:02.577396Z",
      "url": "https://files.pythonhosted.org/packages/aa/55/0a2d6a4d20ea05e06743e25048a492a4a73a9a1a24b5bd2d30c750778a53/transfer_nlp-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}