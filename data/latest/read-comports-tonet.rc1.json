{
  "info": {
    "author": "Yosia Lukumai",
    "author_email": "yosialukumai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "Easy Read data from com port and send them to the server Easier\n============\nProject Description Its hard to read data from the serial communication\nand send the data over your server, especially with us students, hence\nusing a python script we can read the data written over the\ncommunication port and manipulate them as we want Example: Read serial\ndata from proteus virtual terminal or your arduino project or raspberry\npi\n\nInstallation\n============\n\n``` {.bash}\npip install read_comports_tonet\n```\n\nRequirements || dependecies \n==========\n\nPyserial >=  2.20.0 \\\nrequests >= 3.0 \\\nschedule >= 1.0.0 \n\nNote\n====\n\nThe comport should be there if it\\'s for simulation one can use the\nvirtual ports emulators like Vspe\n\nUsage\n=====\n\nImport the module and inside there is the class named ReadFromComPorts\nthen instatiate it like below passing two parameter comportname example\nCOM1 and baudarate e.g 9600\n\n``` {.bash}\nfrom read_comports_tonet import ReadFromComPorts\nCOM1 = ReadFromComPorts(\"<comport name e.g COM1>\", baudrate)\n```\n\n## Testing if comport is open Use the COM object created  the method below\n\n``` {.bash}\nCOM1.checkifTheComportisOpen()\n```\n\nReading the line\n================\n\nThe method here return data that have been decoded ready and in list if\nyou have sent them and separated them for obtain various data from the\nsame string \\< parameters: optional but if you have written a string\nlike 33\\**667*\\*67 for separating your data then you can separate them\nto obtain the data using this method\n\n``` {.bash}\ndata = COM1.readLineOfData(splitter=\"<eg. ** its optional\")\n```\n\nReading the single character return the character\n============\n\n``` {.bash}\ncharObtained = COM1.readCharacterData()\n```\n\nPost data to the server Here the http post method is used hence one\n============ \nhave to provide the payload Parameter: Url \\|\\| payload should be a\ndictionary\n\n``` {.bash}\nCOM.postDataToServer(\"<url e.g thingspeak.com/post\" , payload:dict)\n```\n\n## Perform the GET request The methods perform the get request and also\nit can be used for pposting the data using the Route parameters\nParameters: url e.g Github routes RouteParameter: type dict e.g\n{\\'api\\_key\\' = \\\"shms24\\\" }\n\n``` {.bash}\nCOM.getRequest(\"<url e.g thingspeak.com/post\" , payload:dict)\n```\n\n## Schedule sending the data or fetching the data Scheduling the\nsending of data to the server is easier since the package under the hood\nuses the schedule module too, here both GET & POST methods can be\nautomated also setting the time your want to data to be sent Parameters:\ntime (type float)-\\> Seconds that will be taken before calling the same\nfunction for fetching the data or sending the data Method: here its http\nmethod it can be POST or GET Payload (type-Dict-Optional): the data to\nbe sent if its posting\n\n``` {.bash}\nCOM.scheduleSending(\"<url e.g thingspeak.com/post\", time, \"method e.g Post\"  payload:dict(optional))\n```\n\n## Scheduling sending of the data without passing payload, package will\nfetch the data from com port provided example Proteus The package was\ninspired by this feature since students struggle taking of the data from\nthe various softwares they are using to the server that they can be\nsaved to the database, the package will fetch data under the hood and be\nposting them basing on the time you have scheduled Parameters: method:\nPOST \\|\\| GET \\*keys: (\\\"e.g temp\\\" , \\\"hum\\\") // Should be tuple\n\n``` {.bash}\nCOM.scheduleSendingDataFromPorts(\"<url e.g thingspeak.com/post\", time, \"method e.g Post\", \"splitterstring e.g xx to separate data\", *keys)\n```\n\n## Powered By: Yosia Lukumai\n\nGithub Account: <https://github.com/yosiaLukumai>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yosiaLukumai/Reading-data-From-Ports",
    "keywords": "python,read com ports,read com ports data send to net,read com data and send to thingsspeak,proteus data to server,arduino to server,rasberrypi to server",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "read-comports-tonet",
    "package_url": "https://pypi.org/project/read-comports-tonet/",
    "platform": null,
    "project_url": "https://pypi.org/project/read-comports-tonet/",
    "project_urls": {
      "Homepage": "https://github.com/yosiaLukumai/Reading-data-From-Ports"
    },
    "release_url": "https://pypi.org/project/read-comports-tonet/0.0.1/",
    "requires_dist": [
      "requests (>=2.20.0)",
      "schedule (>=1.0.0)",
      "pyserial (>=3.0)"
    ],
    "requires_python": "",
    "summary": "Easy read data from COM ports and send them over the server(net) example in your arduino or raspberrypi project",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13870242,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b15b23a0b41d193eae315a47776009eb40f01b65f612c4b5eb57d801740f32ff",
          "md5": "bb8e75c242f390353ba414bd9e00066d",
          "sha256": "615ff873f77d48dc0d52c5864a8c69c83c9a5a717de7497037e1ba3362e6de35"
        },
        "downloads": -1,
        "filename": "read_comports_tonet-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb8e75c242f390353ba414bd9e00066d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6812,
        "upload_time": "2022-05-19T22:16:43",
        "upload_time_iso_8601": "2022-05-19T22:16:43.956553Z",
        "url": "https://files.pythonhosted.org/packages/b1/5b/23a0b41d193eae315a47776009eb40f01b65f612c4b5eb57d801740f32ff/read_comports_tonet-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c143574370f4e37b149dfa5a09b023dc03e968b2ba8c62b406ae64c849fa9c4a",
          "md5": "2c1438d77a52fbae1d4edb437bce8622",
          "sha256": "2d1af815f4fbcecc1675985f38057b37a80bc95d3d9aa06607e2c6a946d3762a"
        },
        "downloads": -1,
        "filename": "read_comports_tonet-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c1438d77a52fbae1d4edb437bce8622",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6265,
        "upload_time": "2022-05-19T22:16:46",
        "upload_time_iso_8601": "2022-05-19T22:16:46.250797Z",
        "url": "https://files.pythonhosted.org/packages/c1/43/574370f4e37b149dfa5a09b023dc03e968b2ba8c62b406ae64c849fa9c4a/read_comports_tonet-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b15b23a0b41d193eae315a47776009eb40f01b65f612c4b5eb57d801740f32ff",
        "md5": "bb8e75c242f390353ba414bd9e00066d",
        "sha256": "615ff873f77d48dc0d52c5864a8c69c83c9a5a717de7497037e1ba3362e6de35"
      },
      "downloads": -1,
      "filename": "read_comports_tonet-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb8e75c242f390353ba414bd9e00066d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6812,
      "upload_time": "2022-05-19T22:16:43",
      "upload_time_iso_8601": "2022-05-19T22:16:43.956553Z",
      "url": "https://files.pythonhosted.org/packages/b1/5b/23a0b41d193eae315a47776009eb40f01b65f612c4b5eb57d801740f32ff/read_comports_tonet-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c143574370f4e37b149dfa5a09b023dc03e968b2ba8c62b406ae64c849fa9c4a",
        "md5": "2c1438d77a52fbae1d4edb437bce8622",
        "sha256": "2d1af815f4fbcecc1675985f38057b37a80bc95d3d9aa06607e2c6a946d3762a"
      },
      "downloads": -1,
      "filename": "read_comports_tonet-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2c1438d77a52fbae1d4edb437bce8622",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6265,
      "upload_time": "2022-05-19T22:16:46",
      "upload_time_iso_8601": "2022-05-19T22:16:46.250797Z",
      "url": "https://files.pythonhosted.org/packages/c1/43/574370f4e37b149dfa5a09b023dc03e968b2ba8c62b406ae64c849fa9c4a/read_comports_tonet-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}