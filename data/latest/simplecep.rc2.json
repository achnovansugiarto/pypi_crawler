{
  "info": {
    "author": "Cauê Thenório",
    "author_email": "caue@thenorio.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# simpleCEP\n\n[![PyPI version](https://badge.fury.io/py/simplecep.svg)](https://badge.fury.io/py/simplecep)\n[![Tests Status](https://github.com/cauethenorio/simplecep/actions/workflows/tests.yml/badge.svg)](https://github.com/cauethenorio/simplecep/actions/workflows/tests.yml)\n[![Coverage Status](https://coveralls.io/repos/github/cauethenorio/simplecep/badge.svg?branch=main)](https://coveralls.io/github/cauethenorio/simplecep?branch=main)\n[![Compatible Python Versions](https://img.shields.io/pypi/pyversions/simplecep.svg)](https://pypi.python.org/pypi/simplecep)\n\nReliably resolve Brazilian CEP addresses using multiple APIs.\n\n\n## Why\n\nECT (Correios Company) doesn't open their CEP (Brazilian Zip Codes) data, requiring\nsystems to fetch CEP data individually through their API or buying the full\ndatabase from their website.\n\nCorreios API (SIGEPWeb) is known for its outages, which impacts systems which\nrelies on resolving CEPs as addresses, as e-commerces.\n\nThis library addresses the problem using alternative CEP data APIs as fallbacks\nwhen Correios API doesn't respond in time and caching all received results.\n\n\n## How it works\n\nThe library uses the configured CEP data providers to fetch the CEP address.\nEach installed provider is used until the data is successfully fetched.\n\nIt will try to get the CEP address using Correios official API and if\nit fails it will use third-party API as fallbacks.\n\nBy default, it uses the following CEP APIs:\n- https://www.republicavirtual.com.br\n- https://viacep.com.br/\n\nBoth APIs are queried concurrently using threads, and the first received result is used.\n\nAfter fetched, the retrieved address data is cached so any address-retrieval\nattempt for the same CEP is resolved immediately and won't use external\nproviders.\n\nThe used providers, their order, and the cache mechanism can be fully\ncustomized.\n\nIf the CEP data isn't cached and all providers fail to retrieve it,\nthe `CouldNotResolveCepError` exception is raised.\n\n## Usage\n\n\n### Installation\n\nInstall from PyPI\n\n```\npip install simplecep\n```\n\n\n### Using the default config\n\nThe package provides a ready-to-use `resolve_cep` function which will\ntry to, in order:\n\n1. Get the CEP address from the internal cache\n2. Get the CEP address from the official Correios API\n3. Get the CEP address, in parallel, from third-party CEP APIs:\n    - https://www.republicavirtual.com.br\n    - https://viacep.com.br/\n\nIt will stop on success, and the subsequent steps won't be executed.\nBy default, it will wait 2 seconds for each provider.\n\nExample:\n\n```python\n>> from simplecep import resolve_cep\n>> address = resolve_cep('59615350')\n\n>> address\n<CEPAddress 59615-350>\n\n>> address.to_dict()\n{\n    'cep': '59615-350',\n    'street': 'Rua João Simão do Nascimento',\n    'district': 'Santa Delmira',\n    'city': 'Mossoró',\n    'state': 'RN'\n}\n```\n\nThe `CEPAddress` class provides the address fields in both English and\nBrazilian Portuguese names:\n\n```python\n>> address\n<CEPAddress 59615-350>\n\n>> address.street\n'Rua João Simão do Nascimento'\n\n>> address.rua\n'Rua João Simão do Nascimento'\n\n>> address.city == address.cidade\nTrue\n\n>> address.to_dict(br_names=True)\n{\n    'cep': '59615-350',\n    'rua': 'Rua João Simão do Nascimento',\n    'bairro': 'Santa Delmira',\n    'cidade': 'Mossoró',\n    'estado': 'RN'\n}\n```\n\n\n### Customization\n\nIf you need to use the providers in a different order, a custom\nprovider, a different cache mechanism or change the timeout, a new\nresolver instance can be created using the `CEPResolver` class.\n\nHere's how the default `resolve_cep` function is created:\n\n```python\nfrom simplecep import (\n    CEPResolver,\n    correios_sigep_cep_provider,\n    republicavirtual_cep_provider,\n    viacep_cep_provider\n)\n\nresolve_cep = CEPResolver(\n    providers=[\n        # this resolver will first try to use the Correios API,\n        {correios_sigep_cep_provider},\n        # if it fails it will fall back to the RepublicaVirtual and ViaCEP APIs\n        # it will spawn two threads and will query both APIs at the same time\n        # the result from the first one to reply will be used\n        {republicavirtual_cep_provider, viacep_cep_provider},\n    ],\n    # by default it will wait for each provider for 1 second\n    timeout=2,\n    # all fetched CEP data will be stored in the\n    # cache object which is a dict but can be any dict-like object\n    cache={}\n)\n```\n\n\n#### Providers Order\n\nThe `providers` argument should be a list of sets specifying which\nproviders should be used, and the order they should be called.\n\nWhen called, the resolver iterate over the list calling all providers in\neach set concurrently using threads.\n\nWhen the CEP is successfully resolved by a provider, the iteration stops\nand the following provider sets are not executed.\n\nHere's an example of `providers` param which will query all APIs\nconcurrently and use the first received result:\n\n```python\nbrute_resolver = CEPResolver(\n    providers=[\n        {\n            correios_sigep_cep_provider,\n            republicavirtual_cep_provider,\n            viacep_cep_provider\n        }\n    ]\n)\n```\n\n\n#### Custom providers\n\nCustom providers can be used to fetch CEP data from different sources.\n\nThe provider should be a callable which accepts `cep` and `timeout` as\nparameters and returns a `CEPAddress` object when a CEP is found and\n`None` when the CEP doesn't exist:\n\n```python\ndef my_custom_provder(cep: str, timeout: float) -> Optional[CEPAdress]:\n    pass # my implementation here\n```\n\nCustom providers should raise the `CEPProviderUnavailableError` error\nwhen they fail to contact their data source or if the data source\ndoesn't reply before the specified `timeout` interval.\n\nProvider-auxiliary functions are available in the\n`simplecep.providers.commons` module.\n\n\n#### Custom cache\n\nBy default, a dict object is used as cache, it's good enough to avoid\nquerying for the same CEP twice in the same process, but it has limitations as:\n- Different processes can't share the cache (i.e. web-workers)\n- The cache is destroyed when the process is killed\n\nSo a custom object can be used as cache, it needs to be a dict-like object\n(i.e. implements `__getitem__` and `__setitem__`).\n\nA good example is the `redis-dict` project which creates a dict-like object\nwhich stores the values on Redis: https://pypi.org/project/redis-dict/\n\n\n# Testing\n\nTests are found in the ```tests``` folder. Install the requirements in\nthe `dev_requirements.txt` file and run `make test` to run the tests.\n\n# License\n\nSee [License](LICENSE).\n\n\n# History\n\n## 0.1.1 (2021-03-29)\n - CEPAddress now supports Brazilian address fields names (estado, cidade, bairro, rua)\n - Update `capture_real_responses.py` test-script to not double-request providers\n - Clean RepublicVirtual provider \"address\" field\n\n## 0.1.0 (2021-03-12)\n - First release on PyPI\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cauethenorio/simplecep",
    "keywords": "cep,correios,brasil,endereço",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplecep",
    "package_url": "https://pypi.org/project/simplecep/",
    "platform": "",
    "project_url": "https://pypi.org/project/simplecep/",
    "project_urls": {
      "Homepage": "https://github.com/cauethenorio/simplecep"
    },
    "release_url": "https://pypi.org/project/simplecep/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Fetch CEP addresses consistently using Correios API, third-party APIs as fallbacks and cache the results.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9909256,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a58dfc7c0bcf2f19f05bc4849c3dd2a74446797b1fafad5244c7beeead19e5d6",
          "md5": "16655374c86f69e69187a6286cf088bc",
          "sha256": "788222394c8de5236437ad3b794112f698d7de0765a29a65b51a056974c776e6"
        },
        "downloads": -1,
        "filename": "simplecep-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16655374c86f69e69187a6286cf088bc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 11607,
        "upload_time": "2021-03-24T04:03:42",
        "upload_time_iso_8601": "2021-03-24T04:03:42.342608Z",
        "url": "https://files.pythonhosted.org/packages/a5/8d/fc7c0bcf2f19f05bc4849c3dd2a74446797b1fafad5244c7beeead19e5d6/simplecep-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f7ab3d10293d0a55d200e79db93e98007e781207b4bd9965f37e6a5a980def6",
          "md5": "de945ae6ff1b92426abacc7cfbbd2bce",
          "sha256": "6507a03cb4aef0e2ba060f29ea838e780af77363304f79909cbc9a9ade79d442"
        },
        "downloads": -1,
        "filename": "simplecep-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de945ae6ff1b92426abacc7cfbbd2bce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21024,
        "upload_time": "2021-03-24T04:03:43",
        "upload_time_iso_8601": "2021-03-24T04:03:43.482630Z",
        "url": "https://files.pythonhosted.org/packages/0f/7a/b3d10293d0a55d200e79db93e98007e781207b4bd9965f37e6a5a980def6/simplecep-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "388f323be0c633a37cbcf822e94cc115716c8b0b7838294749d59e4178426c5e",
          "md5": "122fe210d7e4c50707c0b44cd41eae97",
          "sha256": "d922c090ceb11d39775c7ffa4798efe56642202aed1313523f741e316d911eaa"
        },
        "downloads": -1,
        "filename": "simplecep-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "122fe210d7e4c50707c0b44cd41eae97",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12324,
        "upload_time": "2021-03-29T04:37:30",
        "upload_time_iso_8601": "2021-03-29T04:37:30.374111Z",
        "url": "https://files.pythonhosted.org/packages/38/8f/323be0c633a37cbcf822e94cc115716c8b0b7838294749d59e4178426c5e/simplecep-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc28454227ee39b6fda813de5fa49fcb051fe40e47583acf644fee71b0f6056b",
          "md5": "621ce7b3450d5882bbcddeb171fd60d2",
          "sha256": "af5181bc3fe44dc5ede7a1ee2b2b807063641dce0c8d2db03064024b2bb4e828"
        },
        "downloads": -1,
        "filename": "simplecep-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "621ce7b3450d5882bbcddeb171fd60d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22778,
        "upload_time": "2021-03-29T04:37:31",
        "upload_time_iso_8601": "2021-03-29T04:37:31.542784Z",
        "url": "https://files.pythonhosted.org/packages/dc/28/454227ee39b6fda813de5fa49fcb051fe40e47583acf644fee71b0f6056b/simplecep-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "388f323be0c633a37cbcf822e94cc115716c8b0b7838294749d59e4178426c5e",
        "md5": "122fe210d7e4c50707c0b44cd41eae97",
        "sha256": "d922c090ceb11d39775c7ffa4798efe56642202aed1313523f741e316d911eaa"
      },
      "downloads": -1,
      "filename": "simplecep-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "122fe210d7e4c50707c0b44cd41eae97",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 12324,
      "upload_time": "2021-03-29T04:37:30",
      "upload_time_iso_8601": "2021-03-29T04:37:30.374111Z",
      "url": "https://files.pythonhosted.org/packages/38/8f/323be0c633a37cbcf822e94cc115716c8b0b7838294749d59e4178426c5e/simplecep-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc28454227ee39b6fda813de5fa49fcb051fe40e47583acf644fee71b0f6056b",
        "md5": "621ce7b3450d5882bbcddeb171fd60d2",
        "sha256": "af5181bc3fe44dc5ede7a1ee2b2b807063641dce0c8d2db03064024b2bb4e828"
      },
      "downloads": -1,
      "filename": "simplecep-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "621ce7b3450d5882bbcddeb171fd60d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22778,
      "upload_time": "2021-03-29T04:37:31",
      "upload_time_iso_8601": "2021-03-29T04:37:31.542784Z",
      "url": "https://files.pythonhosted.org/packages/dc/28/454227ee39b6fda813de5fa49fcb051fe40e47583acf644fee71b0f6056b/simplecep-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}