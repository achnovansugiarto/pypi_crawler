{
  "info": {
    "author": "Simon Shaw",
    "author_email": "SJShaw@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# brawn\nA python port of [MUSCLE](https://drive5.com/muscle/downloads_v3.htm)'s\nprofile-profile mode for aligning sequences.\n\nBrawn was specifically designed with repetitive insertions of query sequences\ninto reference alignments in mind.\n\nBrawn takes advantage of that repetitive nature by using cache files to remove\nthe calculations that would need to be repeated over and over for the reference\nalignments. This counters the speed loss of moving from C to python. Initially\nbuilding these cache files will take about 10 times longer than an equivalent\nsingle run.\n\nWhile results are often identical to those from MUSCLE, there will occasionally\nbe some minor variations. If an alignment would be very poor in the best case,\nthis variation will be more pronounced.\n\nOnly protein sequences are explicitly supported at the moment, full DNA/RNA\nsupport may follow later.\n\n## Installation\n### from PyPI\n```\npip install brawn\n```\n### from source\n```\npip install .\n```\n### for development\n```\npip install .[testing]\n```\n\n## Use\nFor speed, using a cache file is extremely important. They can be built and used\nboth programatically and the command line. They are also optional, if required.\n\n### Basic profile-profile mode\n\nTo load an alignment from a FASTA file, use:\n```\nfrom brawn import Alignment\n\nwith open(\"some.fasta\") as handle:\n    alignment = Alignment.from_file(handle)\n```\n\nOr, to build from an existing dictionary (even if it's just one element), use:\n```\nname_to_sequence = {\n    \"A\": \"GT-DVG\",\n    \"B\": \"GTK-VG\",\n}\nalignment = Alignment(name_to_sequence)\n```\n\nOr, to load cached calculations directly (this is the preferable option for large alignments):\n```\nwith open(\"reference.cache\") as handle:\n    alignment = Alignment.from_cache_file(handle)\n```\n\nAs a sidenote, to build a cache for the reference alignment:\n```\nwith open(\"reference.cache\", \"w\") as handle:\n    alignment.to_cache_file(handle)\n```\nThis will add any needed computational steps prior to writing.\n\nOnce two alignments have been created/loaded, they can be combined with:\n```\nfrom brawn import combine_alignments\n\nresult = combine_alignments(alignment1, alignment2)\n```\n\nAnd the resulting alignment can be output to file:\n```\nwith open(\"output.fasta\", \"w\") as handle:\n    result.to_file(handle=handle)\n\n# if handle is not supplied, the output will be sent to sys.stdout\nresults.to_file()\n```\n\n### Simpler insertion of a sequence into an alignment\n\nFor the use case that brawn was designed for, only a single sequence is being\ninserted into a reference alignment at a time. This is usually paired with\nfetching a single reference sequence, and finding the matching sites.\n\n```\n# note: this still aligns with the full reference alignment\n# only the reference sequence mentioned by name will be built\naligned_query, aligned_reference = get_aligned_pair(query_sequence, reference_name,\n                                                    reference_alignment)\n\n```\n\nOr, if you prefer to have the full set of newly aligned reference sequences as a dictionary:\n```\naligned_query, aligned_refs_by_name = insert_into_alignment(query_sequence, alignment)\n```\n\n### From the command line\nBrawn can function as a drop-in replacement for MUSCLE's `-profile` mode, complete\ncommand line argument conversion.\n\nTo take advantage of cached alignment calculations, first build a cache of your\nalignment, with:\n```\nbrawn input.fasta --build-cache desired_cache_path\n```\n\nFrom that point, you can use cached files and plain FASTA files interchangeably.\nE.g.\n```\nbrawn query.fasta --reference-alignment some_fasta_file\n```\nand\n```\nbrawn query.fasta --reference-alignment some_cache_file\n```\nwill both work as expected.\n\nFor the command line, the resulting FASTA output will to be stdout.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SJShaw/brawn",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brawn",
    "package_url": "https://pypi.org/project/brawn/",
    "platform": null,
    "project_url": "https://pypi.org/project/brawn/",
    "project_urls": {
      "Homepage": "https://github.com/SJShaw/brawn"
    },
    "release_url": "https://pypi.org/project/brawn/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "A tool for handling repetitive insertions into sequence alignments",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16009203,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b5bd225d0febb40c56e5866571e3c377d4406e6f71a28cbeab2583d22a82a6e",
          "md5": "07684e83fea09fde379d7b6d8ebff213",
          "sha256": "fca2c49c7cdae90dbacc5fcc21f6cc68c04da5545a31ce99c886f04a6a81042c"
        },
        "downloads": -1,
        "filename": "brawn-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07684e83fea09fde379d7b6d8ebff213",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 38405,
        "upload_time": "2022-12-01T14:48:32",
        "upload_time_iso_8601": "2022-12-01T14:48:32.901836Z",
        "url": "https://files.pythonhosted.org/packages/4b/5b/d225d0febb40c56e5866571e3c377d4406e6f71a28cbeab2583d22a82a6e/brawn-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a7dabd734ec8b452d87f501cb57da1cb55f4ab999e5fe2d570c1f51374c70b5",
          "md5": "4b1730a04941bb69a9ca7668ef799e8c",
          "sha256": "dd76831a9dee955692082f46209db645bceb2e48509cbe0eeb9d9e20f53cbb6c"
        },
        "downloads": -1,
        "filename": "brawn-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b1730a04941bb69a9ca7668ef799e8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 38410,
        "upload_time": "2022-12-06T14:59:09",
        "upload_time_iso_8601": "2022-12-06T14:59:09.114761Z",
        "url": "https://files.pythonhosted.org/packages/1a/7d/abd734ec8b452d87f501cb57da1cb55f4ab999e5fe2d570c1f51374c70b5/brawn-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a7dabd734ec8b452d87f501cb57da1cb55f4ab999e5fe2d570c1f51374c70b5",
        "md5": "4b1730a04941bb69a9ca7668ef799e8c",
        "sha256": "dd76831a9dee955692082f46209db645bceb2e48509cbe0eeb9d9e20f53cbb6c"
      },
      "downloads": -1,
      "filename": "brawn-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4b1730a04941bb69a9ca7668ef799e8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 38410,
      "upload_time": "2022-12-06T14:59:09",
      "upload_time_iso_8601": "2022-12-06T14:59:09.114761Z",
      "url": "https://files.pythonhosted.org/packages/1a/7d/abd734ec8b452d87f501cb57da1cb55f4ab999e5fe2d570c1f51374c70b5/brawn-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}