{
  "info": {
    "author": "Jeff Bass, Min Latt",
    "author_email": "jeff@yin-yang-ranch.com, minminlaxz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "====================================\nimagezmq: Transporting OpenCV images\n====================================\n\n**imagezmq** is a set of Python classes that transport OpenCV images from one\ncomputer to another using PyZMQ messaging. For example, here is a screen on a\nMac computer showing simultaneous video streams from 8 Raspberry Pi cameras:\n\n.. image:: https://raw.githubusercontent.com/jeffbass/imagezmq/master/docs/images/screenshottest.png\n\nUsing **imagezmq**, this is possible with 11 lines of Python on each Raspberry\nPi and with 8 lines of Python on the Mac.\n\nFirst, run this code on the Mac (or other display computer):\n\n.. code-block:: python\n  :number-lines:\n\n    # run this program on the Mac to display image streams from multiple RPis\n    import cv2\n    import imagezmq\n    image_hub = imagezmq.ImageHub()\n    while True:  # show streamed images until Ctrl-C\n        rpi_name, image = image_hub.recv_image()\n        cv2.imshow(rpi_name, image) # 1 window for each RPi\n        cv2.waitKey(1)\n        image_hub.send_reply(b'OK')\n\n\nThen, on each Raspberry Pi, run:\n\n.. code-block:: python\n  :number-lines:\n\n    # run this program on each RPi to send a labelled image stream\n    import socket\n    import time\n    from imutils.video import VideoStream\n    import imagezmq\n\n    sender = imagezmq.ImageSender(connect_to='tcp://jeff-macbook:5555')\n\n    rpi_name = socket.gethostname() # send RPi hostname with each image\n    picam = VideoStream(usePiCamera=True).start()\n    time.sleep(2.0)  # allow camera sensor to warm up\n    while True:  # send images as stream until Ctrl-C\n        image = picam.read()\n        sender.send_image(rpi_name, image)\n\n\nWow! A video surveillance system with 8 (or more!) Raspberry Pi cameras in\n19 lines of Python.\n\nWhy use imagezmq?\n=================\n\n**imagezmq** is an easy to use image transport mechanism for a distributed image\nprocessing network. For example, a network of a dozen Raspberry Pis with cameras\ncan send images to a more powerful central computer. The Raspberry Pis perform\nimage capture and simple image processing like flipping, blurring and motion\ndetection. Then the images are passed via **imagezmq** to the central computer for\nmore complex image processing like image tagging, text extraction, feature\nrecognition, etc.\n\nFeatures\n========\n\n- Sends OpenCV images from one computer to another using ZMQ.\n- Can send jpeg compressed OpenCV images, to lighten network loads.\n- Uses the powerful ZMQ messaging library through PyZMQ bindings.\n- Allows a choice of 2 different ZMQ messaging patterns (REQ/REP or PUB/SUB).\n- Enables the image hub to receive and process images from multiple image senders\n  simultaneously.\n\nWhy ZMQ? Why not some other messaging protocol?\n===============================================\n\nThere are a number of high quality and well maintained messaging protocols for\npassing messages between computers. I looked at MQTT, RabbitMQ, AMQP and ROS as\nalternatives. I chose ZMQ and its Python PyZMQ bindings for several reasons:\n\n- ZMQ does not require a message broker. It is a peer to peer protocol that does\n  not need to pass an image first to a message broker and then to the imagehub.\n  This means fewer running processes and less “double handling” of images.\n  OpenCV images are large compared to simple text messages, so the absence of a\n  message broker is important.\n- ZMQ is very fast for passing OpenCV images. It enables high throughput between\n  image senders and image hubs.\n- ZMQ and its PyZMQ bindings are easy to install.\n\n**imagezmq** has been transporting images from a dozen Raspberry Pi computers\nscattered around my farm to 2 linux image hub servers for over 2\nyears. The RPi's capture and send dozens to thousands of frames frames a day.\n**imagezmq** has worked very reliably and is very fast. You can learn more about\nmy \"science experiment urban permaculture farm\" project at\n`Yin Yang Ranch project overview <https://github.com/jeffbass/yin-yang-ranch>`_.\n\nMessaging Patterns: REQ/REP versus PUB/SUB\n==========================================\n\nZMQ allows many different messaging patterns. Two are implemented in **imagezmq**:\n\n- REQ/REP: Each RPi sends an image and waits for a REPLY from the central image\n  hub. The RPi sends a new image only when the REPLY is received. In the REQ/REP\n  messaging pattern, each image sender must await a REPLY before continuing. It is a\n  \"blocking\" pattern for the sender.\n- PUB/SUB: Each RPi sends an image, but does not expect a REPLY from the central\n  image hub. It can continue sending images without awaiting any acknowledgement\n  from the image hub. The image hub provides no REPLY. It is a \"non-blocking\"\n  pattern for the sender.\n\nThere are advantages and disadvantages for each pattern.\n**REQ/REP is the default.** See the documentation (link below) for more details.\n\nDependencies and Installation\n=============================\n\n**imagezmq** has been tested with:\n\n- Python 3.5, 3.6, 3.7 and 3.8\n- PyZMQ 16.0 and 17.1\n- Numpy 1.13 and 1.16\n- OpenCV 3.3 and 4.0\n- Raspbian Buster, Raspbian Stretch and Raspbian Jessie\n- picamera 1.13 (used to capture images for the tests)\n- imutils 0.4.6 and 0.5.2 (used to capture images from PiCamera)\n\nInstall OpenCV, including Numpy, into a Python Virtual Environment. Then be sure\nto install **imagezmq** into the **same** virtual environment. For example, if\nthe virtual environment is named **py3cv3**, you would install **imagezmq**\nusing pip like this:\n\n.. code-block:: bash\n\n    workon py3cv3  # use your virtual environment name\n    pip install imagezmq\n\n**imagezmq** has a directory of tests organized into sender and receiver pairs.\nYou will get all the source code for **imagezmq** including all the test\nprograms by cloning the GitHub repository:\n\n.. code-block:: bash\n\n    git clone https://github.com/jeffbass/imagezmq.git\n\nSource Code and Full Documentation\n==================================\n\n**imagezmq** is open source. The source code, tests and\ndocumentation are at `Imagezmq on GitHub <https://github.com/jeffbass/imagezmq>`_.\nThe documentation, including links to application examples,\nstarts from the table of contents in the README.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/minlaxz/imzmqx",
    "keywords": "opencv-python,pyzmq,raspberrypi,imzmqx",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imzmqx",
    "package_url": "https://pypi.org/project/imzmqx/",
    "platform": "",
    "project_url": "https://pypi.org/project/imzmqx/",
    "project_urls": {
      "Homepage": "https://github.com/minlaxz/imzmqx"
    },
    "release_url": "https://pypi.org/project/imzmqx/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Transporting OpenCV images via ZMQ - enhanced.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8189890,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b0850d463cfa8f57db8b617aa6132442cb5ed9b10b67deefa593d98db1cc45f",
          "md5": "01ddfb2d4464968d23bfd80607288200",
          "sha256": "c4058d629f9cbe3a052dafaa1aa57dabcb8322862a2eba308ac9b6536989b535"
        },
        "downloads": -1,
        "filename": "imzmqx-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "01ddfb2d4464968d23bfd80607288200",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15164,
        "upload_time": "2020-09-09T07:41:16",
        "upload_time_iso_8601": "2020-09-09T07:41:16.770221Z",
        "url": "https://files.pythonhosted.org/packages/7b/08/50d463cfa8f57db8b617aa6132442cb5ed9b10b67deefa593d98db1cc45f/imzmqx-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd97cb5493cd0065e3ad821294a7380edb7ba86d339fb0ad2c248544485e5e53",
          "md5": "9e9cc2da71ec63aea8bc1c238b2d4d5a",
          "sha256": "d51fe3ea377f57698dfbb8b7e58b776e082b01b3d4a77c70669d524dd6a50fd2"
        },
        "downloads": -1,
        "filename": "imzmqx-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e9cc2da71ec63aea8bc1c238b2d4d5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15144,
        "upload_time": "2020-09-15T09:47:35",
        "upload_time_iso_8601": "2020-09-15T09:47:35.573035Z",
        "url": "https://files.pythonhosted.org/packages/bd/97/cb5493cd0065e3ad821294a7380edb7ba86d339fb0ad2c248544485e5e53/imzmqx-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd97cb5493cd0065e3ad821294a7380edb7ba86d339fb0ad2c248544485e5e53",
        "md5": "9e9cc2da71ec63aea8bc1c238b2d4d5a",
        "sha256": "d51fe3ea377f57698dfbb8b7e58b776e082b01b3d4a77c70669d524dd6a50fd2"
      },
      "downloads": -1,
      "filename": "imzmqx-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9e9cc2da71ec63aea8bc1c238b2d4d5a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15144,
      "upload_time": "2020-09-15T09:47:35",
      "upload_time_iso_8601": "2020-09-15T09:47:35.573035Z",
      "url": "https://files.pythonhosted.org/packages/bd/97/cb5493cd0065e3ad821294a7380edb7ba86d339fb0ad2c248544485e5e53/imzmqx-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}