{
  "info": {
    "author": "Dr. Ramil Nugmanov",
    "author_email": "nougmanoff@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Plugins",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Chytorch RxnMap\n---------------\n\nSemisupervised Model trained on USPTO and Pistachio datasets.\n\n\nInstallation\n------------\n\nUse `pip install chytorch-rxnmap` to install release version.\n\nOr `pip install .` in source code directory to install DEV version.\n\nPerform Atom-to-atom mapping\n----------------------------\n\nAAM integrated into `chython` package and available as reaction object method. See `chython` documentation [here](https://chython.readthedocs.io).\n\n    from chython import smiles\n\n    r = smiles('OC(=O)C(=C)C=C.C=CC#N>>OC(=O)C1=CCCC(C1)C#N')\n    r.reset_mapping()\n    print(format(r, 'm'))\n    >> [C:2]([C:4](=[CH2:5])[CH:6]=[CH2:7])(=[O:3])[OH:1].[CH2:8]=[CH:9][C:10]#[N:11]>>[O:3]=[C:2]([OH:1])[C:4]=1[CH2:5][CH:9]([C:10]#[N:11])[CH2:8][CH2:7][CH:6]=1\n\n\nPretrained model\n----------------\n\n**To load pretrained model use:**\n\n    from chytorch.zoo.rxnmap import Model  \n    model = Model.pretrained()\n\n**To prepare data-loader use:**\n\n    from chython import SMILESRead\n\n    data = []\n    for r in SMILESRead('data.smi'):\n        r.canonicalize()  # fix aromaticity and functional groups\n        data.append(r.pack())  # store in compressed format\n\n    dl = model.prepare_dataloader(data, batch_size=20)\n\n**To get embeddings use:**\n\n    for b in dl:\n        e = model(b)\n\nNote: embeddings contain: `cls embedding, [unusable molecular embedding, list of atoms embeddings] * n`.\nWhere n is the number of molecules in reaction equation.\n\nTo extract aggregated embedding, use cls embedding `x = e[:, 0]`.\n\nTo extract atoms-only embeddings, use masking:\n* `x = e[b[3] > 1]` - for all atoms\n* `x = e[b[3] == 2]` - for reactants only\n* `x = e[b[3] == 3]` - for products only\n\n**To get all-to-all tokens attention matrix:**\n\n    for b in dl:\n        a = model(b, mapping_task=True)\n\n\nTraining new model\n------------------\n\n    from pytorch_lightning import Trainer\n    from pytorch_lightning.callbacks import ModelCheckpoint\n    from pytorch_lightning.plugins import DDPPlugin\n\n    callback = ModelCheckpoint(monitor='trn_loss_tot', save_weights_only=True, save_top_k=3, save_last=True,\n                               every_n_train_steps=10000)\n    trainer = Trainer(gpus=-1, precision=16, max_steps=1000000, callbacks=[callback],\n                      strategy=DDPPlugin(find_unused_parameters=False))\n\n    model = Model(lr_warmup=1e4, lr_period=5e5, lr_max=1e-4, lr_decrease_coef=.01, masking_rate=.15, **kwargs)\n    # lr_warmup=1e4, lr_period=5e5, lr_max=1e-4, lr_decrease_coef=.01 - see chytorch.optim.lr_scheduler.WarmUpCosine. \n    # kwargs - see chytorch.nn.ReactionEncoder.\n    # masking_rate - probability of token masking.\n    trainer.fit(model, dl)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chython/chytorch-rxnmap",
    "keywords": "",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chytorch-rxnmap",
    "package_url": "https://pypi.org/project/chytorch-rxnmap/",
    "platform": null,
    "project_url": "https://pypi.org/project/chytorch-rxnmap/",
    "project_urls": {
      "Homepage": "https://github.com/chython/chytorch-rxnmap"
    },
    "release_url": "https://pypi.org/project/chytorch-rxnmap/1.3/",
    "requires_dist": [
      "pytorch-lightning (>=1.5.6)",
      "chytorch (<2.0,>=1.13)"
    ],
    "requires_python": ">=3.8",
    "summary": "",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14730480,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff7fa5778ac2090e40602b3067770a5a38fe71f1e3da1d657c19556291461166",
          "md5": "7054eed6aeddb57b2df6738ac4e0d0c7",
          "sha256": "15f32b53d180756314ad5b8991d8c22576d4341ddb41bb2e2f0c3c285afb1dfe"
        },
        "downloads": -1,
        "filename": "chytorch_rxnmap-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7054eed6aeddb57b2df6738ac4e0d0c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79033731,
        "upload_time": "2022-04-23T09:51:43",
        "upload_time_iso_8601": "2022-04-23T09:51:43.656291Z",
        "url": "https://files.pythonhosted.org/packages/ff/7f/a5778ac2090e40602b3067770a5a38fe71f1e3da1d657c19556291461166/chytorch_rxnmap-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b46143834701c3663834d5a0059f2b4d67247d9d7ff4b38e3ec71875df600b",
          "md5": "77b710f83526dca76b249826ffa3ca3b",
          "sha256": "a478d340d9d87f60e0859177a5044e5382a40684590e1dd291dc0c9f7744b901"
        },
        "downloads": -1,
        "filename": "chytorch_rxnmap-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77b710f83526dca76b249826ffa3ca3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 79036720,
        "upload_time": "2022-08-11T15:07:37",
        "upload_time_iso_8601": "2022-08-11T15:07:37.000179Z",
        "url": "https://files.pythonhosted.org/packages/24/b4/6143834701c3663834d5a0059f2b4d67247d9d7ff4b38e3ec71875df600b/chytorch_rxnmap-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24b46143834701c3663834d5a0059f2b4d67247d9d7ff4b38e3ec71875df600b",
        "md5": "77b710f83526dca76b249826ffa3ca3b",
        "sha256": "a478d340d9d87f60e0859177a5044e5382a40684590e1dd291dc0c9f7744b901"
      },
      "downloads": -1,
      "filename": "chytorch_rxnmap-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77b710f83526dca76b249826ffa3ca3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 79036720,
      "upload_time": "2022-08-11T15:07:37",
      "upload_time_iso_8601": "2022-08-11T15:07:37.000179Z",
      "url": "https://files.pythonhosted.org/packages/24/b4/6143834701c3663834d5a0059f2b4d67247d9d7ff4b38e3ec71875df600b/chytorch_rxnmap-1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}