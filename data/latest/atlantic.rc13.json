{
  "info": {
    "author": "Lu√≠s Santos",
    "author_email": "luisf_ssantos@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Customer Service",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "<br>\r\n<p align=\"center\">\r\n  <h2 align=\"center\"> Atlantic - Automated Data Preprocessing Framework for Supervised Machine Learning\r\n  <br>\r\n  \r\n## Framework Contextualization <a name = \"ta\"></a>\r\n\r\nThe `Atlantic` project constitutes an comprehensive and objective approach to simplify and automate data processing through the integration and objectively validated application of various preprocessing mechanisms, ranging from feature engineering, automated feature selection, multiple encoding versions and null imputation methods. The optimization methodology of this framework follows a evaluation structured in tree based models ensembles.\r\n\r\nThis project aims at providing the following application capabilities:\r\n\r\n* General applicability on tabular datasets: The developed preprocessing procedures are applicable on any data table associated with Supervised Machine Learning scopes regardless of the properties or specifications of the Dataset features.\r\n\r\n* Automated treatment of tabular data associated with predictive analysis: It implements a global and carefully validated tested data treatment based on the characteristics of each Dataset input columns, assuming its identification with the associated target column.\r\n\r\n* Robustness and improvement of predictive results: The implementation of the `atlantic` automated data preprocessing function aims at improve predictive performance directly associated with the processing methods implemented based on the Dataset properties.  \r\n    \r\n   \r\n#### Main Development Tools <a name = \"pre1\"></a>\r\n\r\nMajor frameworks used to built this project: \r\n   \r\n* [H2O.ai](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html)\r\n* [Sklearn](https://scikit-learn.org/stable/)\r\n* [Pandas](https://pandas.pydata.org/)\r\n\r\n    \r\n## Framework Architecture <a name = \"ta\"></a>\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://i.ibb.co/BjmYGrz/ATL-Architecture.png\" align=\"center\" width=\"800\" height=\"650\" />\r\n</p>    \r\n\r\n## Where to get it <a name = \"ta\"></a>\r\n\r\nBinary installer for the latest released version is available at the Python Package Index [PyPI](https://pypi.org/project/atlantic/).  \r\n\r\nThe source code is currently hosted on GitHub at: https://github.com/TsLu1s/Atlantic\r\n\r\n## Installation  \r\n\r\nTo install this package from Pypi repository run the following command:\r\n\r\n```\r\npip install atlantic\r\n```\r\n\r\n# Usage Examples\r\n    \r\n## 1. Atlantic - Automated Data Preprocessing Pipeline\r\n\r\nIn order to be able to apply the automated preprocessing `atlantic` pipeline you need first to import the package. \r\nThe following needed step is to load a dataset and define your to be predicted target column name into the variable `Target` and define split ratio for your Train and Test subsets.\r\nYou can customize the main function (customizable option) by altering the following running pipeline parameters:\r\n* Split_Racio: Division ratio in which the preprocessing methods will be evaluated within the loaded Dataset.\r\n* total_vi: Minimal value of the total sum of relative variable\\feature importance percentage selected in the \"H2O AutoML feature selection\" step.\r\n* h2o_fs_models: Quantity of models generated for competition in step \"H2O AutoML feature selection\" to evaluate the relative importance of each feature (only leaderboard model will be selected for evaluation).\r\n* encoding_fs: You can choose if you want to encond your features in order to reduce loading time in \"H2O AutoML feature selection\" step. If in \"True\" mode label encoding is applied to categorical features.\r\n* vif_ratio: This value defines the minimal 'threshold' for Variance Inflation Factor filtering (default value=10).\r\n \r\nImportante Notes:\r\n    \r\n* Default predictive evaluation metric for regression contexts is MAE (Mean Absolute Error) and classification is AUC (Accuracy).\r\n* Although functional, `Atlantic` data processing is not optimized for big data purposes yet.\r\n* Major update is now available in **versions>=1.0.1**\r\n    \r\n```py\r\n    \r\nimport atlantic as atl\r\nimport pandas as pd   \r\n    \r\ndata = pd.read_csv('csv_directory_path', encoding='latin', delimiter=',') # Dataframe Loading Example\r\n\r\ntrain,test=atl.split_dataset(data,Split_Racio=0.8) \r\n\r\n### Fit Data Processing\r\n    \r\n# Simple Option\r\nfit_atl = atl.fit_processing(Dataset=train,           # Dataset:pd.DataFrame, target:str=\"Target_Column\"\r\n                             target=\"Target_Column\",  # Split_Racio:float=0.75 [0.5,0.95[ -> Recommended\r\n                             Split_Racio=0.75)\r\n    \r\n# Customizable Option\r\nfit_atl = atl.fit_processing(Dataset=train,                  # Dataset:pd.DataFrame, \r\n                             target=\"Target_Column\",         # target:str=\"Target_Column\"\r\n                             Split_Racio=0.75,               # Split_Racio:float=0.75, total_vi:float=0.98 [0.5,1]\r\n                             total_vi=0.98,                  # h2o_fs_models:int [1,50], encoding_fs:bool=True\\False\r\n                             h2o_fs_models=7,                # vif_ratio:float=10.0 [3,30]\r\n                             encoding_fs=True,\r\n                             vif_ratio=10.0)\r\n\r\n### Transform Data Processing\r\n    \r\ntrain=atl.data_processing(train,\r\n                          fit_atl)\r\ntest=atl.data_processing(test,\r\n                         fit_atl)\r\n    \r\n```  \r\n\r\n## 2. Atlantic - Preprocessing Data\r\n    \r\n### 2.1 Encoding Versions\r\n \r\nThere are multiple preprocessing functions available to direct use. This package provides upgrated encoding `LabelEncoder`, `OneHotEncoder` and [IDF](https://pypi.org/project/cane/) functions with an automatic multicolumn application. \r\n \r\n* Note : `n_distinct` costumizable parameter in `OneHotEncoder` function constitutes the max limiter of distinct elements in columns, this meaning, columns with higher distinct values then 'n_distinct' will not be encoded.    \r\n\r\n```py\r\nimport atlantic as atl\r\nimport pandas as pd \r\n\r\ntrain, test = atl.split_dataset(Dataset,Split_Racio=0.75) # Split Initial Dataframe\r\n                                                          # Dataset:pd.DataFrame, Split_Racio:float\r\ntarget = \"Target_Column\" # -> target feature name\r\n    \r\n## Encoders\r\n# MultiColumn LabelEncoder\r\n\r\nle_fit=atl.fit_Label_Encoding(train,target)  \r\ntrain=atl.transform_Label_Encoding(train,le_fit)\r\ntest=atl.transform_Label_Encoding(test,le_fit)\r\n    \r\n# MultiColumn OneHotEncoder\r\n\r\nohe_fit=atl.fit_OneHot_Encoding(train,target,n_distinct=10)\r\ntrain=atl.transform_OneHot_Encoding(train,ohe_fit)\r\ntest=atl.transform_OneHot_Encoding(test,ohe_fit)\r\n    \r\n# MultiColumn IDF\r\n\r\nidf_fit=atl.fit_IDF_Encoding(train,target)\r\ntrain=atl.transform_IDF_Encoding(train,idf_fit)\r\ntest=atl.transform_IDF_Encoding(test,idf_fit)\r\n            \r\n```    \r\n   \r\n### 2.2 Feature Selection Methods\r\n\r\nYou can get filter your most valuable features from the dataset via this 2 feature selection methods:\r\n    \r\n* [H2O AutoML Feature Selection](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/variable-importance.html) - This function is based of how variable importance is calculated for tree-based models in H2Os AutoML and it can be customized by use of the following parameters: \r\n  * total_vi: Minimal value of the total sum of relative variable\\feature importance percentage selected.\r\n  * h2o_fs_models: Quantity of models generated for competition to evaluate the relative importance of each feature (only leaderboard model will be selected for evaluation).\r\n  * encoding_fs: You can choose if you want to encond your features in order to reduce loading time in \"H2O AutoML feature selection\" step. If in \"True\" mode label encoding is applied to categorical features.\r\n    \r\n    \r\n* [VIF Feature Selection (Variance Inflation Factor)](https://www.investopedia.com/terms/v/variance-inflation-factor.asp) - Variance inflation factor aims at measuring the amount of multicollinearity in a set of multiple regression variables or features, therefore for this filtering function to be applied all input variables need to be of numeric type. It can be customized by changing the column selection treshold (VIF:float) designated with a default value of 10.\r\n    \r\n    \r\n```py    \r\n    \r\nselected_columns, h2o_importance = atl.feature_selection_h2o(Dataset, # Dataset:pd.DataFrame ,target:str=\"Target_Column\",\r\n                                                             target,      #  total_vi:float [0.5,1], h2o_fs_models:int [1,50], encoding_fs:bool=True/False\r\n                                                             total_vi=0.98,     \r\n                                                             h2o_fs_models =7,\r\n                                                             encoding_fs=True)\r\n\r\n\r\nselected_columns, vif_importance = atl.feature_selection_vif(Dataset, # Dataset:pd.DataFrame, target:str=\"Target_Column\",\r\n                                                             target,  # VIF:float [3,30]\r\n                                                             VIF=10.0)\r\n```\r\n    \r\n### 2.3 Datetime Feature Engineering\r\n\r\nThe engin_date function converts and transforms columns of Datetime type into additional columns (Year, Day of the Year, Season, Month, Day of the month, Day of the week, Weekend, Hour, Minute) which will be added by association to the input dataset and subsequently deletes the original column if parameter drop=True.\r\n    \r\n    \r\n```py   \r\n    \r\ndataset = atl.engin_date(Dataset,drop=False) # Dataset:pd.DataFrame, drop:bool\r\n    \r\n```\r\n\r\n### 2.4 Predictive Performance Metrics\r\n\r\nYou can analyse the obtained predictive performance results by using the given bellow functions witch contains the most used metrics for each supervised predictive context.\r\n    \r\n    \r\n```py  \r\n\r\nreg_performance = pd.DataFrame(atl.metrics_regression(y_true,y_pred),index=[0])    # y_true:list, y_pred:list\r\n    \r\nbinary_class_Performance = pd.DataFrame(atl.metrics_binary_classification(y_true,y_pred),index=[0])    # y_true:list, y_pred:list\r\n    \r\nmulticlass_performance = pd.DataFrame(atl.metrics_classification(y_true,y_pred),index=[0])    # y_true:list, y_pred:list\r\n    \r\n```\r\n\r\n### 2.5 Extra Auxiliar Functions\r\n    \r\nThe following functions were used in the development of this project.\r\n    \r\n```py  \r\n    \r\n#### Data Preprocessing \r\n\r\natl.num_cols(Dataset:pd.DataFrame,\r\n             target:str) # return list_num_cols\r\n    \r\natl.cat_cols(Dataset:pd.DataFrame,\r\n             target:str) # return list_cat_cols\r\n    \r\natl.remove_columns_by_nulls(Dataset:pd.DataFrame,\r\n                            percentage:int) # return dataset\r\n\r\n## Simplified Null Imputation (Only numeric features)\r\n\r\nimputer_knn=atl.fit_KnnImp(df:pd.DataFrame,\r\n                           target:str,\r\n                           neighbors:int=5)\r\ndf=atl.transform_KnnImp(df:pd.DataFrame,\r\n                        target:str,\r\n                        imputer=imputer_knn)\r\n\r\nimputer_simple=atl.fit_SimpleImp(df:pd.DataFrame,\r\n                                 target:str,\r\n                                 strat:str='mean')\r\ndf=atl.transform_SimpleImp(df:pd.DataFrame,\r\n                           target:str,\r\n                           imputer=imputer_simple)\r\n    \r\nimputer_iter=atl.fit_IterImp(df:pd.DataFrame, \r\n                             target:str, \r\n                             order:str='ascending')\r\ndf=atl.transform_IterImp(df:pd.DataFrame,\r\n                         target:str,\r\n                         imputer=imputer_iter)\r\n```   \r\n    \r\n## License\r\n\r\nDistributed under the MIT License. See [LICENSE](https://github.com/TsLu1s/Atlantic/blob/main/LICENSE) for more information.\r\n\r\n## Contact \r\n \r\n[Luis Santos - LinkedIn](https://www.linkedin.com/in/lu%C3%ADsfssantos/)   \r\n    \r\n\r\nFeel free to contact me and share your feedback.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TsLu1s/Atlantic",
    "keywords": "data science,machine learning,data processing,predictive modeling,data preprocessing,automated data preprocessing,automated machine learning,automl",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atlantic",
    "package_url": "https://pypi.org/project/atlantic/",
    "platform": null,
    "project_url": "https://pypi.org/project/atlantic/",
    "project_urls": {
      "Homepage": "https://github.com/TsLu1s/Atlantic"
    },
    "release_url": "https://pypi.org/project/atlantic/1.0.25/",
    "requires_dist": [
      "pandas (>=1.2.0)",
      "numpy (>=1.19.5)",
      "cane (>=2.3.1)",
      "scikit-learn (>=1.0.2)",
      "statsmodels (>=0.13.2)",
      "h2o (>=3.40.0.2)"
    ],
    "requires_python": "",
    "summary": "Atlantic is an automated preprocessing framework for supervised machine learning",
    "version": "1.0.25",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17261444,
  "releases": {
    "0.0.65": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba78cfb8d0934f33e1a9d7f175a74e72084d3ccb381b404da7e061a31d60454",
          "md5": "8c6d3225cd21916688c462d3137a8ff4",
          "sha256": "8353183cacdeb8c555a22bd2c0877e11f42c990ca7e6ba9cf901eb2abcfc099b"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.65-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c6d3225cd21916688c462d3137a8ff4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 19063,
        "upload_time": "2022-09-10T15:59:40",
        "upload_time_iso_8601": "2022-09-10T15:59:40.223648Z",
        "url": "https://files.pythonhosted.org/packages/1b/a7/8cfb8d0934f33e1a9d7f175a74e72084d3ccb381b404da7e061a31d60454/atlantic-0.0.65-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.75": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d82d42ed0c127af71ea6d85e3a9bb5065fd5f09981683a0de4c26a92f37753b6",
          "md5": "ab514ce3bf95dcdc06934e8f3a70f574",
          "sha256": "fc604f5b0d4ae66ac82309f6bb76d857510407acc69b2b08f0232b85c96a4904"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.75-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab514ce3bf95dcdc06934e8f3a70f574",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 19048,
        "upload_time": "2022-09-20T11:00:29",
        "upload_time_iso_8601": "2022-09-20T11:00:29.641988Z",
        "url": "https://files.pythonhosted.org/packages/d8/2d/42ed0c127af71ea6d85e3a9bb5065fd5f09981683a0de4c26a92f37753b6/atlantic-0.0.75-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.85": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3655600f52f3628ff71f9567e856e8ce7e88a5efdd283d768f781394acb68f5",
          "md5": "9e494ce53ed40d1f894d6d667ca8da45",
          "sha256": "4aac0ea43b2868f9646a78ec38e65a08ba8b09e20dd7acffeb9c7eca779f3284"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.85-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e494ce53ed40d1f894d6d667ca8da45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 19082,
        "upload_time": "2022-10-10T12:45:45",
        "upload_time_iso_8601": "2022-10-10T12:45:45.355093Z",
        "url": "https://files.pythonhosted.org/packages/d3/65/5600f52f3628ff71f9567e856e8ce7e88a5efdd283d768f781394acb68f5/atlantic-0.0.85-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.86": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc2d9e4d07e1eac8f8d2034b8f1bab661989d72c0f6d19cd536e7ff53d8e80de",
          "md5": "98b404a8833b6582e1c46164f624b311",
          "sha256": "1d705e6a3e31c6bcfe4ad03b29fbe9b688704a95bb142d94559c7384a1d45870"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.86-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98b404a8833b6582e1c46164f624b311",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 19077,
        "upload_time": "2022-12-01T17:58:50",
        "upload_time_iso_8601": "2022-12-01T17:58:50.866931Z",
        "url": "https://files.pythonhosted.org/packages/fc/2d/9e4d07e1eac8f8d2034b8f1bab661989d72c0f6d19cd536e7ff53d8e80de/atlantic-0.0.86-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.92": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fef5d889152b63950d4f9b31f914428ae2ffa32be0702df9b0275b52fe38f17",
          "md5": "15c2fcef5facdf105af68ea25205be5d",
          "sha256": "4c5fb22fb151cfb7c247ad1c938366591ae25c9699fc75a04f07db3b405c02ac"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.92-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15c2fcef5facdf105af68ea25205be5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 18332,
        "upload_time": "2022-12-12T23:51:51",
        "upload_time_iso_8601": "2022-12-12T23:51:51.339667Z",
        "url": "https://files.pythonhosted.org/packages/2f/ef/5d889152b63950d4f9b31f914428ae2ffa32be0702df9b0275b52fe38f17/atlantic-0.0.92-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.93": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e5b745ca8e53c3c625b3bf447e29497fac57530cc9332d776dfd210074ac07",
          "md5": "3adfddd1819b3280b499ea8676540284",
          "sha256": "e703cc9e59f7857739a6981170539c25a0da8fd87c1779b0c43dc7191d07f0c4"
        },
        "downloads": -1,
        "filename": "atlantic-0.0.93-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3adfddd1819b3280b499ea8676540284",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 18329,
        "upload_time": "2022-12-20T12:35:41",
        "upload_time_iso_8601": "2022-12-20T12:35:41.723805Z",
        "url": "https://files.pythonhosted.org/packages/06/e5/b745ca8e53c3c625b3bf447e29497fac57530cc9332d776dfd210074ac07/atlantic-0.0.93-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f10fe9fbc4ffe6623935f0f4699923332765b54fabd630e3f9dc0fe9e1a6d61",
          "md5": "ea01b587f9d4de7da195af57c11eed2b",
          "sha256": "a679f6f4b7c6a16172b523acc3a83ed1c974b2feda1a712871bbfcec59b852f2"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea01b587f9d4de7da195af57c11eed2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 16095,
        "upload_time": "2023-01-10T18:17:03",
        "upload_time_iso_8601": "2023-01-10T18:17:03.587644Z",
        "url": "https://files.pythonhosted.org/packages/8f/10/fe9fbc4ffe6623935f0f4699923332765b54fabd630e3f9dc0fe9e1a6d61/atlantic-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7024127d5815087206676167fbcfa3adc28479984b08b88083357e3513032263",
          "md5": "c5d0cae6b8c21e4a873533a1055912a1",
          "sha256": "16723a67cc2638093f5813d728b282104d3bf28d79360d8892276a912128b271"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5d0cae6b8c21e4a873533a1055912a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 16136,
        "upload_time": "2023-01-11T10:24:54",
        "upload_time_iso_8601": "2023-01-11T10:24:54.306782Z",
        "url": "https://files.pythonhosted.org/packages/70/24/127d5815087206676167fbcfa3adc28479984b08b88083357e3513032263/atlantic-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af88031d840ae2dbdef279e4ce7847927d923400a3ae8f7f84f926232239ca4",
          "md5": "e839a2cc5f390bddd9589688ca8bd7bd",
          "sha256": "150e154371061c7989c653fabb9cd2638975a908e42d9ab82c83b458f65f77b4"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e839a2cc5f390bddd9589688ca8bd7bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 16007,
        "upload_time": "2023-02-02T10:35:24",
        "upload_time_iso_8601": "2023-02-02T10:35:24.444783Z",
        "url": "https://files.pythonhosted.org/packages/2a/f8/8031d840ae2dbdef279e4ce7847927d923400a3ae8f7f84f926232239ca4/atlantic-1.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ccbbd39f323a7d3155df497fc87c34de7aa433a026f313d72adece02cc03f6c",
          "md5": "45e464ffb7372bbcb7f0da906823d85c",
          "sha256": "18ddac91d092df12562e33e465b78535c69dc4e225335970796491eb4a53938a"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45e464ffb7372bbcb7f0da906823d85c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 15994,
        "upload_time": "2023-02-09T15:18:23",
        "upload_time_iso_8601": "2023-02-09T15:18:23.199236Z",
        "url": "https://files.pythonhosted.org/packages/8c/cb/bd39f323a7d3155df497fc87c34de7aa433a026f313d72adece02cc03f6c/atlantic-1.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9cbb0b4d822dccf91fb1011189ead62299644414ec84c756034fde1873185c9",
          "md5": "ef34e95535690ed6aea5f95434e554f8",
          "sha256": "907a339dc099f9756859555d5248f56b1f6468b48e8f216105b6187805f372a5"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef34e95535690ed6aea5f95434e554f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 15861,
        "upload_time": "2023-02-13T15:26:25",
        "upload_time_iso_8601": "2023-02-13T15:26:25.875160Z",
        "url": "https://files.pythonhosted.org/packages/c9/cb/b0b4d822dccf91fb1011189ead62299644414ec84c756034fde1873185c9/atlantic-1.0.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "172a8043bc2c7f4f7b21393708cf010e1ae025ec5f6c7a945cdf6a6da3f3eb42",
          "md5": "420e45ee10ff75f96a9769413df39b36",
          "sha256": "380c846c26a00e5c73eedbf7803211e1f509a236289d75ba50a8886ad6ac7937"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "420e45ee10ff75f96a9769413df39b36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1",
        "size": 18840,
        "upload_time": "2023-02-21T18:48:48",
        "upload_time_iso_8601": "2023-02-21T18:48:48.701662Z",
        "url": "https://files.pythonhosted.org/packages/17/2a/8043bc2c7f4f7b21393708cf010e1ae025ec5f6c7a945cdf6a6da3f3eb42/atlantic-1.0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45cf641f0150b3e070926aaf098b65910584cccf6716a079dfe213fbdde84117",
          "md5": "0e19584b79da83ade84bb94e8f69577c",
          "sha256": "92baf95177d6eabc9f3f3d5199a2095a60df491803bc0802896ffe0ed4cc755b"
        },
        "downloads": -1,
        "filename": "atlantic-1.0.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e19584b79da83ade84bb94e8f69577c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19015,
        "upload_time": "2023-03-12T15:57:47",
        "upload_time_iso_8601": "2023-03-12T15:57:47.710303Z",
        "url": "https://files.pythonhosted.org/packages/45/cf/641f0150b3e070926aaf098b65910584cccf6716a079dfe213fbdde84117/atlantic-1.0.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45cf641f0150b3e070926aaf098b65910584cccf6716a079dfe213fbdde84117",
        "md5": "0e19584b79da83ade84bb94e8f69577c",
        "sha256": "92baf95177d6eabc9f3f3d5199a2095a60df491803bc0802896ffe0ed4cc755b"
      },
      "downloads": -1,
      "filename": "atlantic-1.0.25-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e19584b79da83ade84bb94e8f69577c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19015,
      "upload_time": "2023-03-12T15:57:47",
      "upload_time_iso_8601": "2023-03-12T15:57:47.710303Z",
      "url": "https://files.pythonhosted.org/packages/45/cf/641f0150b3e070926aaf098b65910584cccf6716a079dfe213fbdde84117/atlantic-1.0.25-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}