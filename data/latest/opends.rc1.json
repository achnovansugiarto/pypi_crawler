{
  "info": {
    "author": "bdp",
    "author_email": "huangwenda@haizhi.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SDK for Python\n\n\nA Python library for OpenAPI's HTTP-based Core APIs.\n\n------\n\n### 下载地址\n\n[opends-sdk-python](https://update.bdp.cn/opends-sdk-python.zip)\n\n### SDK安装\n\n在本项目路径下执行 `$ python setup.py install`\n\n### 注意事项\n1. python支持版本：2.6/2.7\n2. 字符编码使用UTF-8\n3. 支持的数据类型：number, string, date(建议使用 %Y-%m-%d %H:%M:%S 格式)\n4. 数据源名, 工作表名, 同一张表的不同字段名, title不可重复\n5. 当前的架构设计对于频繁的小量数据写入处理效率不高，所以建议还是尽量批量的更新数据， 但是大量的数据传输会提高等待时间，因此建议尽量将数据量控制在5万条左右\n6. ACCESS_TOKEN从BDP网站的开发者中心获取\n\n### SDK简介\n|   所属类  |         方法        |             说明             |\n|:---------:|:-------------------:|:----------------------------:|\n| BDPClient |      get_all_ds     |      获取所有数据源      |\n|           |        get_ds       |          获取数据源          |\n|           |      delete_ds      |          删除数据源          |\n|           |      create_ds      |          创建数据源          |\n|     DS    |    get_all_tables   | 获取该数据源的所有工作表 |\n|           |     create_table    |          创建工作表          |\n|           |     delete_table    |          删除工作表          |\n|           |      get_table      |          获取工作表          |\n|           |        update       |        更新相应工作表        |\n|           |      update_all     |        更新所有工作表        |\n|           |        get_id       |         获取数据源id         |\n|           |       get_name      |        获取数据源名称        |\n|   Table   | insert_data_by_name |           插入数据           |\n|           |  insert_data_by_id  |           插入数据           |\n|           |     bulk_delete     |         批量删除数据         |\n|           | delete_data_by_name |          删除数据行          |\n|           |  delete_data_by_id  |          删除数据行          |\n|           | update_data_by_name |          更新数据行          |\n|           |  update_data_by_id  |          更新数据行          |\n|           |        commit       |        提交原始工作表        |\n|           |        clean        |         清空该工作表         |\n|           |      get_fields     |         列出所有字段         |\n|           |      add_field      |         添加指定字段         |\n|           |     delete_field    |         删除指定字段         |\n|           |     modify_table    |         修改表的别名         |\n|           |       preview       |           预览数据           |\n|           |       get_info      |          获取表信息          |\n|           |        get_id       |           获取表id           |\n|           |       get_name      |          获取表名称          |\n|           |     modify_field    |         修改字段属性         |\n### SDK说明\n\n- #### BDPClient\n    用于初始化客户端，进行数据源增、删、查操作等等。\n\n  构造方法\n\n    - `BDPClient(ACCESS_TOKEN)`\n\n    - 使用:\n\n    ```python\n    from opends.sdk import BDPClient\n    client = BDPClient(ACCESS_TOKEN)\n    ```\n\n  实例方法\n\n    - `get_all_ds()` 获取所有数据源对象，返回键为名字，值为相应数据源对象的字典。\n\n        - 返回值: `{\"ds_name\": ds}`\n\n        -  使用:\n\n        ```python\n        all_ds = client.get_all_ds()\n        ```\n\n    - `get_ds(name)` 根据名字获取数据源，返回数据源对象\n        - 参数:\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n            </tr>\n          </table>\n\n        - 返回值: `ds(DS object)`\n\n        -  使用:\n\n        ```python\n        ds = client.get_ds(\"ds_name\")\n        ```\n\n    - `delete_ds(name)` 根据名字删除数据源\n\n        - 参数:\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n            </tr>\n          </table>\n\n        -  使用:\n\n        ```python\n        client.delete_ds(\"ds_name\")\n        ```\n\n    - `create_ds(name)` 根据名字创建数据源，返回创建的数据源对象\n\n        - 参数:\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n            </tr>\n          </table>\n\n        - 返回值: `ds(DS object)`\n\n        -  使用:\n\n        ```python\n        ds = client.create_ds(\"ds_name\")\n        ```\n\n- #### DS\n\n    数据源类，可以管理该数据源内的各种工作表，并对工作表进行增、删、改、查等操作。\n    >通过调用BDPClient类的create_ds方法来创建DS对象,不能通过直接实例化DS类来创建数据源.\n    >通过调用BDPClient类的get_ds方法来获取相应的DS对象.\n\n  构造方法\n\n    - `DS(name, token)`\n\n  实例方法\n\n    - `get_all_tables()` 获取该数据源的所有工作表对象，返回键为表名，值为工作表对象的字典\n\n        - 返回值: `{\"table_name\": table}`\n\n        -  使用:\n\n        ```python\n        all_tables = ds.get_all_tables()\n        ```\n\n    - `create_table(name, schema, uniq_key=None)` 在该数据源中创建工作表，返回该工作表, schema中的type只能是\"string\"/\"number\"/\"date\"其中一种。对于每个字段的设定，remark和title参数可以缺省。\n\n        - 参数:\n\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>schema</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>uniq_key</td>\n              <td>list</td>\n              <td>是</td>\n            </tr>\n            <tr>\n              <td>title</td>\n              <td>string</td>\n              <td>是</td>\n            </tr>\n          </table>\n\n        -  使用:\n\n        ```python\n        schema = [\n            {\n                \"remark\": \"\",\n                \"name\": \"id\",\n                \"type\": \"number\",\n                \"title\": \"ident\"\n            },\n            {\n                \"remark\": \"\",\n                \"name\": \"name\",\n                \"type\": \"string\"\n            },\n            {\n                \"remark\": \"\",\n                \"name\": \"height\",\n                \"type\": \"number\"\n            },\n            {\n                \"remark\": \"\",\n                \"name\": \"join_time\",\n                \"type\": \"date\"\n            },\n            {\n                \"remark\": \"\",\n                \"name\": \"mark\",\n                \"type\": \"string\",\n                \"title\": \"words\"\n            }\n        ]\n        table = ds.create(\"table_name\", schema=schema, uniq_key=[\"id\"], title=\"my_table\")\n        ```\n\n    - `delete_table(name)` 根据名字删除工作表\n\n        - 参数:\n\n            <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        ds.delete_table(\"table_name\")\n        ```\n\n    - `get_table(name)` 根据名字获取工作表\n\n        - 参数:\n\n            <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>name</td>\n              <td>string</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        table = ds.get_table(\"table_name\")\n        ```\n\n    - `update(tb_ids)` 根据工作表id列表更新相应工作表\n\n        - 参数:\n\n            <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n            </tr>\n            <tr>\n              <td>tb_ids</td>\n              <td>list</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb_ids = [\"tb_id1\", \"tb_id2\"]\n        ds.update(tb_ids)\n        ```\n\n    - `update_all()` 级联更新该数据源的下的所有工作表\n        - 使用:\n\n        ```python\n        ds.update_all()\n        ```\n\n    - `get_id()` 获取数据源id\n\n        - 返回值: `ds_dh83hd2hd23jd32bi`\n\n        - 使用:\n\n        ```python\n        ds_id = ds.get_id()\n        ```\n\n    - `get_name()` 获取数据源名称\n\n        - 返回值: `ds_name`\n\n        - 使用:\n\n        ```python\n        ds_name = ds.get_name()\n        ```\n\n- #### Table\n\n    工作表类，对工作表进行增、删、改的操作。\n    > 通过调用DS类的create_table方法而不是通过实例化Table类来创建新表。\n    > 通过调用DS类的get_table方法来获取相应表的Table实例。\n\n  构造方法\n\n    - `Table(ds, name, tb_id, schema=(), uniq_key=None)`\n\n  实例方法\n\n    - `insert_data_by_name(fields, data)` 向指定的字段插入数据，根据字段名\n\n        - 参数:\n\n        <table>\n          <tr>\n            <th>参数</th>\n            <th>类型</th>\n            <th>可缺省</th>\n          </tr>\n          <tr>\n            <td>fields</td>\n            <td>list</td>\n            <td>否</td>\n          </tr>\n          <tr>\n            <td>data</td>\n            <td>list</td>\n            <td>否</td>\n          </tr>\n        </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"id\", \"name\", \"age\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.insert_data_by_name(fields, data)\n        ```\n\n    - `insert_data_by_id(fields, data)` 向指定的字段插入数据，根据字段id\n\n        - 参数:\n\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>fields</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>data</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"fksada22\", \"fksae322\", \"fks832dh23\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.insert_data_by_id(fields, data)\n        ```\n\n    - `bulk_delete(where)` 根据where条件批量删除数据\n\n        - 参数:\n\n          <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>where</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        where = \"`id` > 3\"\n        tb.bulk_delete(where)\n        ```\n\n    - `delete_data_by_name(fields, data)` 根据fields列表中的字段名删除数据行\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>fields</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>data</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"id\", \"name\", \"age\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.delete_data_by_name(fields, data)\n        ```\n\n    - `delete_data_by_id(fields, data)` 根据fields列表中的字段id删除数据行\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>fields</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>data</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n          </table>\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"fksada22\", \"fksae322\", \"fks832dh23\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.delete_data_by_id(fields, data)\n        ```\n\n    - `update_data_by_name(fields, data)`  根据fields列表中的字段名更新数据行\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>fields</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>data</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"id\", \"name\", \"age\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.update_data_by_name(fields, data)\n        ```\n\n    - `update_data_by_id(fields, data)`  根据fields列表中的字段id更新数据行\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>fields</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>data</td>\n              <td>list</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = [\"fksada22\", \"fksae322\", \"fks832dh23\"]\n        data = [[1, \"user1\", 13], [2, \"user2\", 14]]\n        tb.update_data_by_id(fields, data)\n        ```\n\n    - `commit()` 提交原始工作表\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.commit()\n        ```\n\n    - `clean()` 清空该工作表\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.clean()\n        ```\n\n    - `get_fields()` 列出所有字段\n\n        - 返回值:\n\n        ```python\n        [\n            {\n                \"name\": \"xxx\",\n                \"uniq_index\": 0/1,\n                \"type\": \"number\"/\"string\"/\"date\",\n                \"field_id\": \"fksada32\",\n                \"remark\": \"\"\n            },\n            {...}\n        ]\n        ```\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        fields = tb.get_fields()\n        ```\n\n    - `add_field(field_name, field_type, uniq_index=0, title=None)` 添加指定字段, field_type只能是\"string\"/\"number\"/\"date\"其中一种。uniq_index为1表示该字段为主键，0为非主键, title为字段别名。\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>field_name</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>field_type</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>uniq_index</td>\n              <td>int</td>\n              <td>是</td>\n            </tr>\n            <tr>\n              <td>title</td>\n              <td>string</td>\n              <td>是</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.add_field(\"field_name\", \"string\", 0, \"alias_field\")\n        ```\n\n    - `delete_field(field_name)` 删除指定字段\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>field_name</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.delete_field(\"field_name\")\n        ```\n\n    - `modify_table(alias_name)` 修改表的别名（在web端显示的名称)\n        - `alias_name: alias_name (字符串)`\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>alias_name</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.modify_table(\"alias_name\")\n        ```\n\n    - `modify_field(field_name, field_type, uniq_index=0, title=None)` 修改字段属性,field_type只能是\"string\"/\"number\"/\"date\"其中一种。uniq_index为1表示该字段为主键，0为非主键， title为字段别名。\n\n        - 参数:\n\n           <table>\n            <tr>\n              <th>参数</th>\n              <th>类型</th>\n              <th>可缺省</th>\n            </tr>\n            <tr>\n              <td>field_name</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>field_type</td>\n              <td>string</td>\n              <td>否</td>\n            </tr>\n            <tr>\n              <td>uniq_index</td>\n              <td>int</td>\n              <td>是</td>\n            </tr>\n            <tr>\n              <td>title</td>\n              <td>string</td>\n              <td>是</td>\n            </tr>\n          </table>\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        tb.modify_field(\"field_name\", \"string\", 0, \"alias_field\")\n        ```\n\n    - `preview()` 预览数据\n\n        - 返回值:\n\n        ```python\n        {\n            \"schema\" [\n                {\n                    \"name\": \"id\",\n                    \"type\": \"string\",\n                    \"uniq_index\": 0,\n                    \"remark\": \"\"\n                },\n                {...}\n            ],\n            \"data\": [...],\n            \"data_count\": 3,\n            \"utime\": \"2015-03-24 18:02:36\"\n            \"status\": 0,\n            \"materialized\": 1,\n            \"can_partition\": False,\n            \"partition\": None\n        }\n        ```\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        result = tb.preview()\n        ```\n\n    - `get_info()` 获取表信息\n\n        - 返回值:\n\n        ```python\n        {\n            \"fields\": [\n                {\n                    \"name\": \"xxx\",\n                    \"field_id\": \"fdsa8783\",\n                    \"title\": \"\",\n                    \"type\": \"string\"\n                },\n                {...}\n            ],\n            \"tb_id\": \"tb_id\",\n            \"name\": \"name\",\n            \"data_count\": 100,\n            \"title\": \"date_test\"\n        }\n        ```\n\n        - 使用:\n\n        ```python\n        tb = ds.get_table(\"table_name\")\n        result = tb.get_info()\n        ```\n\n    - `get_id()` 获取表id\n\n        - 返回值: `tb_dh83hd2hd23jd32bi`\n\n        - 使用:\n\n        ```python\n        tb_id = tb.get_id()\n        ```\n\n    - `get_name()` 获取表名称\n\n        - 返回值: `tb_name`\n\n        - 使用:\n\n        ```python\n        tb_name = tb.get_name()\n        ```\n\n### 异常信息\n1. 所有的服务器端异常都将抛出包含错误码以及错误信息的OpenDSException，错误码可以参照API文档\n\n2. 本地的异常将直接抛出带错误信息的OpenDSException\n\n### 示例\n\n- 获取指定数据源对象并获取其中所有的工作表\n\n  ```python\n  from opends.sdk import BDPClient\n\n  c = BDPClient(ACCESS_TOKEN)\n\n  ds = c.get_ds(\"ds_example\")\n\n  all_tables = ds.get_all_tables()\n  ```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.bdp.cn/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opends",
    "package_url": "https://pypi.org/project/opends/",
    "platform": "",
    "project_url": "https://pypi.org/project/opends/",
    "project_urls": {
      "Homepage": "http://www.bdp.cn/"
    },
    "release_url": "https://pypi.org/project/opends/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Official OpenDS REST API Client",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2848187,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f7abcef1c1a49c3a4cb8a6aacaa64039390fb6e10f9e468fc2ab85dd22be8cb",
          "md5": "3689106bd41c95b7a1ea4a3379e47ca3",
          "sha256": "21436bbeb98193fe43bf308756bc3a737a224cfb02da6566e58c4ae81df7d78b"
        },
        "downloads": -1,
        "filename": "opends-0.0.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "3689106bd41c95b7a1ea4a3379e47ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16343,
        "upload_time": "2017-05-03T04:20:48",
        "upload_time_iso_8601": "2017-05-03T04:20:48.784473Z",
        "url": "https://files.pythonhosted.org/packages/1f/7a/bcef1c1a49c3a4cb8a6aacaa64039390fb6e10f9e468fc2ab85dd22be8cb/opends-0.0.1.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95b85c209161fe674b2903472605435feefc64a978c7d6ad3ddd456406b3af64",
          "md5": "227cd9ebfafe6e7ccc6b1c5962c69837",
          "sha256": "0f9a0ae77899862c27b52e6aa4539d0a40ae5361b092a11361fb3d80f778d40f"
        },
        "downloads": -1,
        "filename": "opends-0.0.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "227cd9ebfafe6e7ccc6b1c5962c69837",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "requires_python": null,
        "size": 18515,
        "upload_time": "2017-05-03T04:08:28",
        "upload_time_iso_8601": "2017-05-03T04:08:28.024389Z",
        "url": "https://files.pythonhosted.org/packages/95/b8/5c209161fe674b2903472605435feefc64a978c7d6ad3ddd456406b3af64/opends-0.0.1-py2.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f817fd8ab0b07c44563da1a30938fef0c22ec27e9f8b93a12a0083842e618a26",
          "md5": "0dbf8e9948ce2eedc6fce0ee474722c0",
          "sha256": "3db704b19b6b7ed48d006755a81c4903596569873b0e12b31d309402c8b984e3"
        },
        "downloads": -1,
        "filename": "opends-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dbf8e9948ce2eedc6fce0ee474722c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 13782,
        "upload_time": "2017-05-03T04:11:36",
        "upload_time_iso_8601": "2017-05-03T04:11:36.926388Z",
        "url": "https://files.pythonhosted.org/packages/f8/17/fd8ab0b07c44563da1a30938fef0c22ec27e9f8b93a12a0083842e618a26/opends-0.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f7abcef1c1a49c3a4cb8a6aacaa64039390fb6e10f9e468fc2ab85dd22be8cb",
        "md5": "3689106bd41c95b7a1ea4a3379e47ca3",
        "sha256": "21436bbeb98193fe43bf308756bc3a737a224cfb02da6566e58c4ae81df7d78b"
      },
      "downloads": -1,
      "filename": "opends-0.0.1.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "3689106bd41c95b7a1ea4a3379e47ca3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16343,
      "upload_time": "2017-05-03T04:20:48",
      "upload_time_iso_8601": "2017-05-03T04:20:48.784473Z",
      "url": "https://files.pythonhosted.org/packages/1f/7a/bcef1c1a49c3a4cb8a6aacaa64039390fb6e10f9e468fc2ab85dd22be8cb/opends-0.0.1.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95b85c209161fe674b2903472605435feefc64a978c7d6ad3ddd456406b3af64",
        "md5": "227cd9ebfafe6e7ccc6b1c5962c69837",
        "sha256": "0f9a0ae77899862c27b52e6aa4539d0a40ae5361b092a11361fb3d80f778d40f"
      },
      "downloads": -1,
      "filename": "opends-0.0.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "227cd9ebfafe6e7ccc6b1c5962c69837",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 18515,
      "upload_time": "2017-05-03T04:08:28",
      "upload_time_iso_8601": "2017-05-03T04:08:28.024389Z",
      "url": "https://files.pythonhosted.org/packages/95/b8/5c209161fe674b2903472605435feefc64a978c7d6ad3ddd456406b3af64/opends-0.0.1-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f817fd8ab0b07c44563da1a30938fef0c22ec27e9f8b93a12a0083842e618a26",
        "md5": "0dbf8e9948ce2eedc6fce0ee474722c0",
        "sha256": "3db704b19b6b7ed48d006755a81c4903596569873b0e12b31d309402c8b984e3"
      },
      "downloads": -1,
      "filename": "opends-0.0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "0dbf8e9948ce2eedc6fce0ee474722c0",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 13782,
      "upload_time": "2017-05-03T04:11:36",
      "upload_time_iso_8601": "2017-05-03T04:11:36.926388Z",
      "url": "https://files.pythonhosted.org/packages/f8/17/fd8ab0b07c44563da1a30938fef0c22ec27e9f8b93a12a0083842e618a26/opends-0.0.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}