{
  "info": {
    "author": "",
    "author_email": "Adrian Gonzalez <adriangonzalezsanchez1996@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# WINTRY INTEGRATION FOR SQLMODEL\n\nThese functionalities were originaly part of [wintry](https://github.com/adriangs1996/wintry), but\nwere moved to a separate package so it is an opt-in. [wintry](https://github.com/adriangs1996/wintry)\nis really extensible, so, more features like this will be added in the future.\n\n## What is this\n\nwintry-models is just a way of ease the use of SQLModel with wintry. It is exploiting wintry's\nDependency Injection System to provide Request Bound SqlAlchemy Session, so changes to entities\ncan be tracked across multiple functions, and dependencies got declared in a declarative way.\n\nIt is doable to acomplish the same with pure FastAPI, but is not trivial, besides, the integration\nwith \"Controllers\" is a real Nightmare. This way, we promote a separation of concerns and a way to\neasily integrate an ORM into a web framework (like happens .NET).\n\n## Usage\n\nRegister the DataContext service and wire up the engine creation\n\n```python\nfrom wintry import App, scoped\nfrom wintrymodels.dbcontext import DataContext, AsyncSQLEngineContext, add_data_context\nfrom sqlmodel.ext.asyncio.session import AsyncSession\n\n\n# Declare the AppDbContext\n@scoped\nclass AppDbContext(AsyncSession, DataContext):\n    def __init__(self):\n        super().__init__(AsyncSQLEngineContext.get_client(), expire_on_commit=False)\n\n\napp = App()\n\n# Register the Context engine\nadd_data_context(app, AsyncSQLEngineContext, \"sqlite:///file.db\")\n```\n\nWe can now access SQLModel funcionalities as usual and have dependency injection, so we can do as follows:\n\n```python\nfrom wintry import controller, get\nfrom sqlmodel import select, SQLModel\n\n\nclass User(SQLModel):\n    id: int | None = None\n    username: str\n\n\n@controller\nclass HeroController(object):\n    context: AppDbContext\n\n    @get(\"/users\")\n    async def get_users(self) -> list[User]:\n        return await self.context.exec(select(User))\n```\n\n## A simple UnitOfWork implementation\n\nAs we can register our `AppDbContext` as a scoped dependency, we can share it among some\nclasses, so we can implement a UnitOfWork as follows\n\n```python\nfrom wintry import scoped, controller, post, Path\nfrom wintrymodels.dbcontext import DataContext, AsyncSQLEngineContext\nfrom sqlmodel.ext.asyncio.session import AsyncSession\nfrom sqlmodel import SQLModel\nfrom contextlib import asynccontextmanager\n\n\n# Declare the AppDbContext\n@scoped\nclass AppDbContext(AsyncSession, DataContext):\n    def __init__(self):\n        super().__init__(AsyncSQLEngineContext.get_client(), expire_on_commit=False)\n\n\n# Create two models\nclass Hero(SQLModel):\n    id: int | None = None\n    name: str\n\nclass City(SQLModel):\n    id: int | None = None\n    city_name: str\n\n# Create Repositories for each Model\n@scoped\nclass HeroRepository(object):\n    def __init__(self, context: AppDbContext):\n        self.context = context\n    \n    async def save(self, hero: Hero):\n        self.context.add(hero)\n    \n    async def get_by_id(self, hero_id: int) -> Hero | None:\n        return await self.context.get(Hero, hero_id)\n\n@scoped\nclass CityRepository(object):\n    def __init__(self, context: AppDbContext):\n        self.context = context\n    \n    async def save(self, city: City):\n        self.context.add(city)\n    \n    async def get_by_id(self, city_id: int) -> City | None:\n        return await self.context.get(City, city_id)\n\n@scoped\nclass UnitOfWork(object):\n    def __init__(self, context: AppDbContext):\n        self.context = context\n\n    async def start(self):\n        await self.context.begin()\n\n    async def commit(self):\n        await self.context.commit()\n\n    async def rollback(self):\n        await self.context.rollback()\n\n    # alternatively run this block as a transaction\n    @asynccontextmanager\n    async def transaction(self):\n        try:\n            await self.start()\n            yield\n        except Exception as e:\n            await self.rollback()\n            raise e\n        finally:\n            await self.commit()\n\n# This can be part of our service layer, for example\n@scoped\nclass ChangeHeroNameService:\n    def __init__(self, repository: HeroRepository, uow: UnitOfWork):\n        self.repository = repository\n        self.uow = uow\n    \n    async def change_hero_name(self, hero_id: int):\n        async with self.uow.transaction:\n            hero = await self.repository.get_by_id(hero_id)\n            if hero is not None:\n                hero.name = \"New Hero Name\"\n        # As we run in a transaction, the changes to hero\n        # will be committed at block end\n\n\n# Now wire up in a controller\n@controller\nclass HeroController:\n    hero_service: ChangeHeroNameService\n\n    @post(\"/{hero_id}\")\n    async def change_hero_name(self, hero_id: int = Path()):\n        await self.hero_service.change_hero_name(hero_id)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "wintry,orm,sql",
    "license": "MIT License Copyright (c) 2022 Adrian Gonzalez Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wintrymodels",
    "package_url": "https://pypi.org/project/wintrymodels/",
    "platform": null,
    "project_url": "https://pypi.org/project/wintrymodels/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wintrymodels/1.0.0/",
    "requires_dist": [
      "sqlmodel",
      "wintry",
      "tomli ; python_version < \"3.11\""
    ],
    "requires_python": ">=3.10",
    "summary": "Integrates SQLModel with wintry framework",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15660286,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af2fdfb1e321eb60b31a34f556a09810125936c7c3b049c366117a532996d42",
          "md5": "f289b0993615a42b2b561ba28b6d7321",
          "sha256": "b3e01ec9a1cd12bc66b86a378cdb5ff907c16060b12d5ab2f516c6da5f3a941b"
        },
        "downloads": -1,
        "filename": "wintrymodels-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f289b0993615a42b2b561ba28b6d7321",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 6102,
        "upload_time": "2022-11-04T21:39:24",
        "upload_time_iso_8601": "2022-11-04T21:39:24.902483Z",
        "url": "https://files.pythonhosted.org/packages/2a/f2/fdfb1e321eb60b31a34f556a09810125936c7c3b049c366117a532996d42/wintrymodels-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e18bb491b1684f40a4ee2899562ed54edcfe1b0c60afcc8feb573e1ea06ef08e",
          "md5": "fcaa98c49f8e48cda0e88ce2f47e092c",
          "sha256": "c196de0804714730660e077c8e29f08eb3adec217318549ab9c4b495f5e0dfa5"
        },
        "downloads": -1,
        "filename": "wintrymodels-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcaa98c49f8e48cda0e88ce2f47e092c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 5723,
        "upload_time": "2022-11-04T21:39:27",
        "upload_time_iso_8601": "2022-11-04T21:39:27.784258Z",
        "url": "https://files.pythonhosted.org/packages/e1/8b/b491b1684f40a4ee2899562ed54edcfe1b0c60afcc8feb573e1ea06ef08e/wintrymodels-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2af2fdfb1e321eb60b31a34f556a09810125936c7c3b049c366117a532996d42",
        "md5": "f289b0993615a42b2b561ba28b6d7321",
        "sha256": "b3e01ec9a1cd12bc66b86a378cdb5ff907c16060b12d5ab2f516c6da5f3a941b"
      },
      "downloads": -1,
      "filename": "wintrymodels-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f289b0993615a42b2b561ba28b6d7321",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 6102,
      "upload_time": "2022-11-04T21:39:24",
      "upload_time_iso_8601": "2022-11-04T21:39:24.902483Z",
      "url": "https://files.pythonhosted.org/packages/2a/f2/fdfb1e321eb60b31a34f556a09810125936c7c3b049c366117a532996d42/wintrymodels-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e18bb491b1684f40a4ee2899562ed54edcfe1b0c60afcc8feb573e1ea06ef08e",
        "md5": "fcaa98c49f8e48cda0e88ce2f47e092c",
        "sha256": "c196de0804714730660e077c8e29f08eb3adec217318549ab9c4b495f5e0dfa5"
      },
      "downloads": -1,
      "filename": "wintrymodels-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fcaa98c49f8e48cda0e88ce2f47e092c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 5723,
      "upload_time": "2022-11-04T21:39:27",
      "upload_time_iso_8601": "2022-11-04T21:39:27.784258Z",
      "url": "https://files.pythonhosted.org/packages/e1/8b/b491b1684f40a4ee2899562ed54edcfe1b0c60afcc8feb573e1ea06ef08e/wintrymodels-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}