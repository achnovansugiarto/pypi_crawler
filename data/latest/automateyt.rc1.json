{
  "info": {
    "author": "Umutambyi Gad",
    "author_email": "umutambyig@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n## automateYT\n<a href=\"\" title=\"Python versions\"><img src=\"https://img.shields.io/pypi/pyversions/automateYT?style=flat\"></a>\n<a href=\"\" title=\"Pypi version\"><img src=\"https://img.shields.io/pypi/v/automateYT?style=flat\"></a>\n<a href=\"\" title=\"Contributions are welcome\"><img src=\"https://img.shields.io/badge/contributions-welcome-blue.svg?style=flat\"></a>\n<a href=\"\" title=\"Code size\"><img src=\"https://img.shields.io/github/languages/code-size/umutambyi-gad/automateYT?color=blue&style=flat\"></a>\n<a href=\"\" title=\"License\"><img src=\"https://img.shields.io/pypi/l/automateYT?color=blue&style=flat\"></a>\n\n\nautomateYT is lightweight library for automating to download youtube videos, subtitles (if available) and playlist.\n\n## Installation\nautomateYT requires an installation of python 3.6 or greater and [pytube](https://github.com/pytube/pytube.git), as well as pip. Pip is typically bundled with python installations, and you can find options\nfor how to install python at [`https://python.org`](https://python.org). <br>\n- To install from pypi with pip:\n```bash\npip install automateYT\n```\n- Clone GitHub repository\n```bash\ngit clone https://github.com/umutambyi-gad/automateYT\n```\n\n## Overview\n####  Classes:\n- **[`Timing`](#timing)**\n- **[`Automate`](#automate)**\n\n#### Methods:\n- **[`after()`](#after)**\n- **[`info()`](#info)**\n- **[`generate_watch_url_from_playlist()`](#generate_watch_url_from_playlist)**\n- **[`download()`](#download)**\n- **[`download_subtitle()`](#download_subtitle)**\n- **[`download_playlist()`](#download_playlist)**\n- **[`shutdown()`](#shutdown)**\n\n## Usage\nFirst of all import `Automate` class from `automateYT`\n\n```python\nfrom automateYT import Automate\n```\n**Quick demo:** let's say you want to download three videos and their subtitles after two hours and half and when it's done the computer shuts down itself\n```python\nfrom automateYT import Automate\nfrom automateYT import Timing\n\nTiming().after('2h-30m') # or Automate().after('2h-30m') since Automate extends Timing\nAutomate([\n\t'https://www.youtube.com/watch?v=XqZsoesa55w',\n\t'https://www.youtube.com/watch?v=F4tHL8reNCs',\n\t'https://www.youtube.com/watch?v=F4tHL8reNCs'\n]).download(subtitle=True, location='C:/Users/GentleMan/videos', shutdown=True)\n```\nThe above script will download all given videos and output them on `C:/Users/GentleMan/videos` but if you didn't specify `location` by default will in the `Downloads` and also script will pick the `highest resolution` available\nbut what if you want to customize the videos' resolution just see the following example.\n\n```python\nAutomate(url_with_res={\n\t'https://www.youtube.com/watch?v=XqZsoesa55w': '720p',\n\t'https://www.youtube.com/watch?v=F4tHL8reNCs': '1080p',\n\t'https://www.youtube.com/watch?v=F4tHL8reNCs': '144p'\n}).download(subtitle=True, shutdown=True)\n```\nWatch closely before passing `dict` where `keys` are valid watch urls and `values` are valid resolution I passed an argument called `url_with_res` it's an obligation to pass argument before the `dict` otherwise it will raise an error but cool thing is that you don't have to memorize this `url_with_res` you can simply rename it to whatever you want without any further configurations just like.\n```python\nAutomate(watchUrls_with_their_resolution={\n    'https://www.youtube.com/watch?v=XqZsoesa55w': '720p',\n    ...\n})...\n\n```\nNow you saw how to download them but we have passed watch url on in `Automate` class like `Automate('https://www.youtube.com/watch?v=XqZsoesa55w')` so what makes you think it's the true watch url\nhere is how you can view major information about the watch url.\n```python\ninfo = Automate(\n    'https://www.youtube.com/watch?v=XqZsoesa55w'\n).info()\nprint(info)\n```\nOutput will be something like - \n\n```json\n[\n    {\n        \"watch_url\": \"https://www.youtube.com/watch?v=XqZsoesa55w\",\n        \"video_id\": \"XqZsoesa55w\",\n        \"title\": \"Baby Shark Dance | #babyshark Most Viewed Video | Animal Songs | PINKFONG Songs for Children\",\n        \"thumbnail_url\": \"https://i.ytimg.com/vi/XqZsoesa55w/maxresdefault.jpg\",\n        \"author\": \"Pinkfong! Kids' Songs & Stories\",\n        \"publish_date\": \"2016-06-17\",\n        \"type\": \"video/mp4\",\n        \"filesize\": \"11.4MiB\",\n        \"available_resolution\": [\n            \"144p\",\n            \"240p\",\n            \"360p\",\n            \"480p\",\n            \"720p\",\n            \"1080p\"\n        ],\n        \"highest_resolution\": \"1080p\",\n        \"lowest_resolution\": \"360p\",\n        \"views\": \"8,350,191,773\",\n        \"rating\": 3.7,\n        \"age_restricted\": false\n    }\n]\n```\nAs you can see the output above is in `json` format but what if you prefer `yaml` format than `json` just pass keyword string `yaml` as an argument in the `info` like -\n\n```python\ninfo = Automate(\n    ('https://www.youtube.com/watch?v=XqZsoesa55w',)\n).info('yaml')\nprint(info)\n```\nOutput will be in `yaml` format -\n\n```yaml\n-   age_restricted: false\n    author: Pinkfong! Kids' Songs & Stories\n    available_resolution:\n    - 144p\n    - 240p\n    - 360p\n    - 480p\n    - 720p\n    - 1080p\n    filesize: 11.4MiB\n    highest_resolution: 1080p\n    lowest_resolution: 360p\n    publish_date: '2016-06-17'\n    rating: 3.7\n    thumbnail_url: https://i.ytimg.com/vi/XqZsoesa55w/maxresdefault.jpg\n    title: 'Baby Shark Dance | #babyshark Most Viewed Video | Animal Songs | PINKFONG\n        Songs for Children'\n    type: video/mp4\n    video_id: XqZsoesa55w\n    views: 8,350,191,773\n    watch_url: https://www.youtube.com/watch?v=XqZsoesa55w\n\n\n```\nAnd we all know that youtube can have playlist which contains couple of videos, the following is how you can generate watch urls of every single video from the playlist.\n\n```python\nfrom pprint import pprint\n\nwatchUrls = Automate(\n    \"https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n\"\n).generate_watch_url_from_playlist()\npprint(watchUrls)\n```\nAn output will be something like -\n```python\n[\n    'https://www.youtube.com/watch?v=F9TZb0XBow0',\n    'https://www.youtube.com/watch?v=26VtIlzEcmU',\n    'https://www.youtube.com/watch?v=41qgdwd3zAg',\n    ...\n]\n```\n\nSo not only you can generate watch urls from playlist url but also you can download them all or provide an integer `limit` argument to limit videos to be downloaded from the playlist.\n\n```python\nAutomate(\n    \"https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n\"\n).download_playlist(limit=10)\n```\nRemember if you don't specify `location` by default will be in `Downloads` don't worry about on what platform you are on. and also you can download their subtitles to by passing this `subtitle=True` argument.\n\n## Documentation\n\n### Timing\nclass for converting string time looks like (`2h:30m`, `2h30m`, or `2h-30m`) into seconds and delay time \n\n### Automate\nClass with methods for automating to download youtube videos as either videos or audios, subtitles (if available) and generating watch urls from youtube playlist.\n```python\nAutomate(*urls: tuple or list,**urls_with_res: dict)\n```\n`:param:` *list or tuple urls:*<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; valid list or tuple of YouTube watch URLs.\n\n`:param:` *dict urls_with_res:*<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dict where keys are valid YouTube watch URLs and values are valid video resolutions.\n\n### after\nMethod for delaying time which are in format of human readable time (`2h:30m`)\n```python\nTiming().after('20m:15s')\n```\n`:param:` *str time*<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string time for delaying which written in human readable format - ex.\n`2h:30m` or `2h-30m` or `30s` where `h` -> `hours`, `m` -> `minutes` and `s` -> `second`\n\n### info\nMethod for giving some useful information about the youtube videos in easy and readable format.\n```python\nAutomate('https://www.youtube.com/watch?v=XqZsoesa55w').info()\n```\n-- or --\n```python\nAutomate('https://www.youtube.com/watch?v=XqZsoesa55w').info('yaml')\n```\n`:param:` *str fmt*<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String ftm (format) controls the return type by default is `json` and other available format is `yaml`<br>\n`:rtype:` *yaml or json*\n\n### generate_watch_url_from_playlist\nMethod for generating valid youtube watch urls from the youtube playlist\n\n```python\nAutomate(\n    'https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n'\n).generate_watch_url_from_playlist()\n```\n`:rtype:` *list*\n### download\nMethod for downloading of custom resolution YouTube videos as videos or audio and also subtitles (if available) \n\n```python\nAutomate(\n    'https://www.youtube.com/watch?v=XqZsoesa55w',\n).download(\n    subtitle=True,\n    location='C:/Users/GentleMan/videos',\n    only_audio=True,\n    shutdown=True\n)\n```\n\n`:param:` str location <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location path on your computer to save the downloads, by default is in Downloads\n\n`:param:` bool highest_res <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if highest_res is True the script gets the highest resolution available\n\n`:param:` bool lowest_res <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if lowest_res is True the script gets the lowest resolution available\n\n`:param:` bool subtitle <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if subtitle is True english version or english auto generated subtitle is downloaded within its video\n\n`:param:` bool shutdown <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if shutdown is True the computer shuts down after downloads is completely done\n\n`:param:` bool only_audio <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if only_audio is True audio only is downloaded\n\n### download_subtitle\nMethod for downloading YouTube video's subtitles (if available) or auto generated one in whatever language\n\n```python\nAutomate(\n    'https://www.youtube.com/watch?v=XqZsoesa55w',\n).download(\n    location='C:/Users/GentleMan/videos',\n    lang_code='en',\n    auto_generated=False,\n    shutdown=True\n)\n```\n`:param:` str lang_code <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; language code of the subtitle to automate its downloading notice that the default is 'en' (English).\n\n`:param:` str auto_generated <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; by default True, this downloads auto generated version of the same language code in absence of offical one.\n\n`:param:` str location <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location on your computer to save the downloads, by default is in Downloads.\n\n`:param:` bool shutdown <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if shutdown is True the computer shuts down after downloads is completely done.\n\n### download_playlist\nMethod for downloading youtube playlist till the limit given is reached\n\n```python\nAutomate(\n    \"https://www.youtube.com/playlist?list=PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n\"\n).download_playlist(\n    limit=30\n)\n```\n`:param:` str location <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location on your computer to save the downloads, by default is in Downloads.\n\n`:param:` bool highest_res <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if highest_res is True the script gets the highest resolution available.\n\n`:param:` bool lowest_res <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if lowest_res is True the script gets the lowest resolution available.\n\n`:param:` int limit <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; integer limit limits the number of the videos to be downloaded.\n\n`:param:` bool subtitle <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if subtitle is True english version or english auto generated subtitle is downloaded within its video.\n\n`:param:` bool shutdown <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if shutdown is True the computer shuts down after downloads is completely done.\n## License\nThis project is under the [MIT](https://github.com/umutambyi-gad/automateYT/blob/master/LICENSE) license\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/umutambyi-gad/automateYT",
    "keywords": "automate,youtube,download,download_playlist,download_subtitle,generate_watch_url_from_playlist",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "automateYT",
    "package_url": "https://pypi.org/project/automateYT/",
    "platform": "",
    "project_url": "https://pypi.org/project/automateYT/",
    "project_urls": {
      "Homepage": "https://github.com/umutambyi-gad/automateYT"
    },
    "release_url": "https://pypi.org/project/automateYT/1.0.0/",
    "requires_dist": [
      "pytube"
    ],
    "requires_python": ">=3.6",
    "summary": "automateYT is lightweight library that automates downloading of youtube videos, subtitles (if available) and playlist.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10095328,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d7b61f033875d5f125a41be7bd221c280706302c11bd859db726d4b9c89dbed",
          "md5": "f6a4b4ca35e86744382e467a48387e89",
          "sha256": "bc8df554a06e1083e806287ee07c6887cb7e4c6c29013326d81be072d71e7909"
        },
        "downloads": -1,
        "filename": "automateYT-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6a4b4ca35e86744382e467a48387e89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9953,
        "upload_time": "2021-04-17T23:53:22",
        "upload_time_iso_8601": "2021-04-17T23:53:22.116155Z",
        "url": "https://files.pythonhosted.org/packages/9d/7b/61f033875d5f125a41be7bd221c280706302c11bd859db726d4b9c89dbed/automateYT-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9afe2bf9c2a6dead74bfe3037c3cae81f39dee20f08ce687203490885ac42f0",
          "md5": "27f07158734f7f8dfea3cb422034ca91",
          "sha256": "36b6f8f0e132d4947d6d3de8e784fcbda58617f9598d7b4a0be9e73dfc00ee94"
        },
        "downloads": -1,
        "filename": "automateYT-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27f07158734f7f8dfea3cb422034ca91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12580,
        "upload_time": "2021-04-17T23:53:27",
        "upload_time_iso_8601": "2021-04-17T23:53:27.069171Z",
        "url": "https://files.pythonhosted.org/packages/a9/af/e2bf9c2a6dead74bfe3037c3cae81f39dee20f08ce687203490885ac42f0/automateYT-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d7b61f033875d5f125a41be7bd221c280706302c11bd859db726d4b9c89dbed",
        "md5": "f6a4b4ca35e86744382e467a48387e89",
        "sha256": "bc8df554a06e1083e806287ee07c6887cb7e4c6c29013326d81be072d71e7909"
      },
      "downloads": -1,
      "filename": "automateYT-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6a4b4ca35e86744382e467a48387e89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9953,
      "upload_time": "2021-04-17T23:53:22",
      "upload_time_iso_8601": "2021-04-17T23:53:22.116155Z",
      "url": "https://files.pythonhosted.org/packages/9d/7b/61f033875d5f125a41be7bd221c280706302c11bd859db726d4b9c89dbed/automateYT-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9afe2bf9c2a6dead74bfe3037c3cae81f39dee20f08ce687203490885ac42f0",
        "md5": "27f07158734f7f8dfea3cb422034ca91",
        "sha256": "36b6f8f0e132d4947d6d3de8e784fcbda58617f9598d7b4a0be9e73dfc00ee94"
      },
      "downloads": -1,
      "filename": "automateYT-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "27f07158734f7f8dfea3cb422034ca91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12580,
      "upload_time": "2021-04-17T23:53:27",
      "upload_time_iso_8601": "2021-04-17T23:53:27.069171Z",
      "url": "https://files.pythonhosted.org/packages/a9/af/e2bf9c2a6dead74bfe3037c3cae81f39dee20f08ce687203490885ac42f0/automateYT-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}