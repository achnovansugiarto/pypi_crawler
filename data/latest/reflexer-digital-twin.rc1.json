{
  "info": {
    "author": "Danilo Lessa Bernardineli",
    "author_email": "danilo@block.science",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Reflexer Digital Twin\n\n## Introduction\n\nThe Reflexer Digital Twin is a comprehensive modular toolkit for performing automated routine tests and system predictions that are aware of the controller fundamentals as well as the available live data.\n\nThe goal is to be a decision-oriented and data-driven computational\nrepresentation of RAI, while retaining the properties of being easy-to-consume,\neasy-to-modify and provenance keeping.\n\nThe backtesting and extrapolation components are powered by cadCAD, a framework for generalized dynamical systems that allows for expressing the behavioural and logical mechanisms behind crypto-economic systems.\n\n![RAI Digital Twin Components Diagram](assets/dt-components.png)\n\nSpecifically, it accomplishes the following functions:\n\n- Data Interface: The DT has integration with the same live data that the RAI controller, as well as integrations with Data Lakes for exporting result sets.\n- Backtesting: The DT is able to verify the past controller behaviour to make sure that it is working as intended.\n- System Identification: The DT is able to identify and quantify past patterns for usage in extrapolation and scientific contexts.\n- Future State Extrapolation: The DT is able to make use of data-driven mechanisms in order to extrapolate and predict the system trajectory over the future.\n- Report Generation: The DT is able to generate diagnostics and rich visualizations that informs about the state of the system with a acessible focus.\n\n## Usage \n\n### Installation\n\nThe Reflexer Digital Twin requires **Python 3.9** and all the dependencies at `requirements.txt` installed. \n\nOn a linux machine, this is achievable by (thanks @bkellerman)\n\n```\n$ python -V\nPython 3.9.6\n\n$ python -m venv venv\n$ source venv/bin/activate\n$ python -m pip install -r requirements.txt \n```\n\nThe setup can be tested by making an restricted run of the digital twin:\n\n`python -m rai_digital_twin -l -e 5`\n\n### Execution\n\nThe standard execution flow can be invoked by passing `python -m rai_digital_twin`. Custom execution arguments are available, with an description given by the `--help` option.\n\nThe standard execution flow will retrieve, prepare, backtest, fit and extrapolate over the existing data.\n\nThis will retrieve, prepare, backtest, fit and extrapolate over the existing \ndata.\n\nAs of now, it is possible to configure the DT parameters by directly modified \nthe `rai_digital_twin/__main__.py` call on the `extrapolation_cycle()` call. \nOptions can include:\n\n- Number of Monte Carlo runs for the USD/ETH price\n- Interval for retrieving and backtesting data\n- Re-utilize existing past data rather than retrieving\n\n### Result Analysis\n\nThe generated data will be located at `data/runs`, while any reports will be \nlocated at `reports/`\n\n### Testing\n\nThe Reflexer Digital Twin uses `pytest` for unit and integration testing. \nIn order to make use of it, just pass:\n\n``python -m pytest``\n## Components\n\nThe RAI Digital Twin is made of several semi-independent components that act \ntogether for making a decision-oriented data-driven representation of RAI.\n\nEverything is glued together by the notion of an 'Extrapolation Cycle',\nwhich is encoded at `rai_digital_twin/execution_logic.py`, on which the\ncore interfaces and functions are executed while using the cadCAD model as a \nbasis for embedding the context-dependent knowledge for the controller and\nthe behavioural user actions.\n\n### Reports\n\nThe Digital Twin generates interactive HTML reports by using `nbconvert`\ntogether with parametrized notebooks which are located on the\n `rai_digital_twin/templates` folder. The default output path is located\n on the `reports` folder.\n\nThose are generated by invoking the command line on \n`rai_digital_twin/execution_logic.py` and it is possible to modify the existing\ntemplates and/or to add more execution points on the extrapolation cycle itself \ndepending on the use-cases.\n\n### Data interface\n\nThe data retrieval is handled by the `rai_digital_twin/retrieve_data`, on which\nhistorical series is collected from The Graph on the RAI Subgraph. \n\nCurrently, it works by retrieving all the available subgraph hourly statistics\nand using them as reference points for getting the system state and the\nSAFEs history on given block heights.\n\nAfter this is done, pre-processing is done at the \n`rai_digital_twin/prepare_data.py` file, where the tabular datasets are\ninstantiated into relevant objects as described in `rai_digital_twin/types.py`.\n\n### Backtesting\n\nBacktesting consists in providing the cadCAD model representation the same\ninformation that is available to the real controller so that the modelled\naction is computed and compared against the real action.\n\nThe goal is to be able to measure how descriptive the model is against the\nobjective reality. This is done numerically by using the controller outputs\nas validation metrics on which loss functions can be defined, aggregated\nand mixed. This is done on `rai_digital_twin/backtesting.py`\n### System Identification\n\nSystem Identification is to identify and generate required priors for performing\nextrapolation. Generically, this is done by estimating parameters associated\nwith behavioural models and by identifying stochastic processes that are \ndescriptive of exogenous signals, like the ETH / USD price.\n\nAs of the current implementation, this is done in two steps:\n\n1. Exogenous signals are statistically fitted and extrapolated before the \nFuture State Extrapolation, so that are used as a input.\n2. Behavioural models are fitted on-the-go during the simulation timesteps, as\nthe current behavioural models are auto-regressive in nature.\n### Future State Extrapolation\n\nFuture State Extrapolation is about making inferences and predictions over \nthe time evolution. This consists in using behavorial models and stochastic\nprocess for doing projections while using the encoded knowledge about RAI as\nconstraints.\n\nBy doing a range of parameter sweeps and Monte Carlo runs, it is possible to\nunderstand what are the expected future scenarios under a variety of conditions\nand probabilities.\n\n\n## Notebooks\n* [data_acquisition.ipynb](notebooks/data_acquisition.ipynb) shows how the data was obtained and from which sources\n* [Systems_Identification_Fitting.ipynb](notebooks/Systems_Identification_Fitting.ipynb) documents the iterative process of constructing the systems identification model at the heart of the Digital Twin\n* [VAR_vs_VARMAX_evaluation.ipynb](notebooks/VAR_vs_VARMAX_evaluation.ipynb)is an experimental notebook determining if VAR or VARMAX was a better fit for \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reflexer-labs/reflexer-digital-twin",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reflexer-digital-twin",
    "package_url": "https://pypi.org/project/reflexer-digital-twin/",
    "platform": "",
    "project_url": "https://pypi.org/project/reflexer-digital-twin/",
    "project_urls": {
      "Bug Tracker": "https://github.com/reflexer-labs/reflexer-digital-twin/issues",
      "Homepage": "https://github.com/reflexer-labs/reflexer-digital-twin"
    },
    "release_url": "https://pypi.org/project/reflexer-digital-twin/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Toolkit based on cadCAD for performing automated routine tests and future predictions for a GEB deployment",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11583118,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebeba025a82bc4db657f0918d8d492eff0c8607d098b5d72ba35767b4272adec",
          "md5": "fe958db73dd21855c7b6553fda3aa645",
          "sha256": "15a4197975a016e731bdfd8f2ed398f06274d562f1affbe5057466cd5d7ffad6"
        },
        "downloads": -1,
        "filename": "reflexer_digital_twin-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe958db73dd21855c7b6553fda3aa645",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 4827,
        "upload_time": "2021-09-29T14:39:22",
        "upload_time_iso_8601": "2021-09-29T14:39:22.953505Z",
        "url": "https://files.pythonhosted.org/packages/eb/eb/a025a82bc4db657f0918d8d492eff0c8607d098b5d72ba35767b4272adec/reflexer_digital_twin-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62ce078a2b2cab364a436c72046b3612a38ac1ec9502d847111dcacf871b4bdf",
          "md5": "971531b1a2946d19c1c6bf77adca6da9",
          "sha256": "5439d6f14f0826b89fda5db392832ceae01e3385a00299dd453191790bb467e9"
        },
        "downloads": -1,
        "filename": "reflexer-digital-twin-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "971531b1a2946d19c1c6bf77adca6da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 4950,
        "upload_time": "2021-09-29T14:39:24",
        "upload_time_iso_8601": "2021-09-29T14:39:24.761839Z",
        "url": "https://files.pythonhosted.org/packages/62/ce/078a2b2cab364a436c72046b3612a38ac1ec9502d847111dcacf871b4bdf/reflexer-digital-twin-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebeba025a82bc4db657f0918d8d492eff0c8607d098b5d72ba35767b4272adec",
        "md5": "fe958db73dd21855c7b6553fda3aa645",
        "sha256": "15a4197975a016e731bdfd8f2ed398f06274d562f1affbe5057466cd5d7ffad6"
      },
      "downloads": -1,
      "filename": "reflexer_digital_twin-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe958db73dd21855c7b6553fda3aa645",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 4827,
      "upload_time": "2021-09-29T14:39:22",
      "upload_time_iso_8601": "2021-09-29T14:39:22.953505Z",
      "url": "https://files.pythonhosted.org/packages/eb/eb/a025a82bc4db657f0918d8d492eff0c8607d098b5d72ba35767b4272adec/reflexer_digital_twin-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62ce078a2b2cab364a436c72046b3612a38ac1ec9502d847111dcacf871b4bdf",
        "md5": "971531b1a2946d19c1c6bf77adca6da9",
        "sha256": "5439d6f14f0826b89fda5db392832ceae01e3385a00299dd453191790bb467e9"
      },
      "downloads": -1,
      "filename": "reflexer-digital-twin-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "971531b1a2946d19c1c6bf77adca6da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 4950,
      "upload_time": "2021-09-29T14:39:24",
      "upload_time_iso_8601": "2021-09-29T14:39:24.761839Z",
      "url": "https://files.pythonhosted.org/packages/62/ce/078a2b2cab364a436c72046b3612a38ac1ec9502d847111dcacf871b4bdf/reflexer-digital-twin-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}