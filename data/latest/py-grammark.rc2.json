{
  "info": {
    "author": "Thomas Osterland",
    "author_email": "highway.ita07@web.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "This is a python port of Grammark. The grammar checker developed by Mark Fullmer.\nVisit https://github.com/markfullmer/grammark to learn more about Grammark.\nAll credit goes to markfullmer.\n\nThe contributions of this work can be summarized as follows:\n\n* Key words, that are used by the grammar rules are collected in JSON files. This makes it hopefully easier to manage expressions and the JSON files can be used in other projects.\n* The grammar rules are defined in (informal) logic. It is presented in the next section of this README. This makes the workings of grammark more transparent. However, I reverse engineered those rules from the angular app and it is absolutely possible that I made mistakes.\n* The different checks implemented by grammark, e.g., passive voice, wordiness, academic style..., are provided as functions in the Python package. The functions return the ratings, as proposed by grammark and offsets indicating the problematic positions.\n\n# Usage\n\nInstall package with pip:\n\n```\npip install py-grammark\n```\nThen import the different functions:\n\n```\nfrom grammark import check_wordiness, \\\n\t\t\t\tcheck_nominalizations, \\\n\t\t\t\tcheck_passive_voice, \\\n\t\t\t\tcheck_sentences, \\\n\t\t\t\tcheck_academic, \\\n\t\t\t\tcheck_transitions, \\\n\t\t\t\tcheck_grammar, \\\n\t\t\t\tcheck_eggcorns\n\ntext = \"This is some string.\"\n\ncheck_wordiness(text)\ncheck_normalizations(text)\n...\n```\nEvery function can be called with the text as parameter. Text must be of type string.\n\nThe return values look as follows:\n\n```\n{\n\t\"findings\": [\n\t\t{\"start_pos\": 10, \"end_pos\": 12, \"remark\": \"Some remark or None, if there is no\"},\n\t\t...\n\t],\n\t\"score\": 40\n}\n```\n\nIt returns a dictionary. The score is calculated as defined by Grammark (https://github.com/markfullmer/grammark).\nThe findings contain the offsets, where the found problem, resides in the provided text.\n\nThe remarks are provided by Grammark. Again all credits goes to https://github.com/markfullmer/grammark.\nThe remark can be `None` if there are no remarks for a certain check.\n\n# An (Informal) Definition of the Grammar Rules\n\nIn the following we define the workings of the different tools provided by grammark.\n\nThereby, $W$ represents the set of words, that is built by parsing the text provided by the user (see section *Parsing the Text* for a detailed discussion).\nFurthermore, $|w|$ represents the size of word $w \\in W$ and we use $w[a:b]$ for $a,b \\in \\mathbb{N}$ to represent substrings, where $a,b$ represent positions in the string, where the substring starts and ends, respectively.\n$pre(w) \\in W$ indicates the predecessing word, that occurs before $w$ in the original text provided by the user.\nWe write $upper(w)$ for $w \\in W$ to denote the word $w$ where the first letter is capitalized.\n\nNote that $w \\in W$ represents not necessarily a single word, but can be also a sequence of words if we try to match several consecutive words.\n\nWe use $s(w)$ to denote the sentence, that contains the word $w \\in W$ and $s(w)[i]$ to select words in the sentence by index $i \\in \\mathbb{N}$.\n\n## Passive voice\n\nLet $I$ be the set of irregulars and $H$ be the set of helpers with sets as defined in `src/resources/passive_voice.json`:\n\nThe passive voice check hits, if for a word $w \\in W$\n\n$(w[|w| - 1:|w|] = \"ed\" \\lor w \\in I) \\land pre(w) \\in H$\n\nIn text: Every word that ends with \"ed\" or is an irregular verb and the predecessing word is a helper word.\n\n## Wordiness\n\nLet $K$ be the set of keywords. It is constructed by the first elements of the set keywords in file `src/resources/wordiness.json`\n\nThe wordiness check hits, if for a word $w \\in W$\n\n$\\forall k \\in K: w = k \\lor w = upper(k)$\n\nIn text: We look if one of the elements in $K$ occurs in the text. We do this also for the situation, that it has a capitalized first letter.\n\n## Nominalizations\n\nLet $E$ be the set of postfixes taken from the file `src/resources/normalizations.json`\n\nThe nominalization check hits if for a word $w \\in W$\n\n$\\exists a,b \\in \\mathbb{N}: w[a:b] \\in E \\land |w| > 7$\n\nIn text: The rule checks if the word $w$ ends with a postfix contained in $E$ and if its length is greater than seven.\n\n## Sentences\n\nLet $K$ be the set of keywords as defined in file `src/resources/sentences.json`\n\nThe sentences check hits if for a word $w \\in W$\n\n$|s(w)| > 50 \\lor s(w)[0] \\in K$\n\nHere $|s(w)|$ denotes the number of words in the sentence.\n\n## Transitions\n\nLet $K$ be the set of keywords from the file `src/resources/transitions.json`\n\nThe transition check hits, if for a word $w \\in W$\n\n$\\forall k \\in K: w = k \\lor w = upper(k)$\n\nIn text: We look if one of the elements in $K$ occurs in the text. We do this also for the situation, that it has a capitalized first letter.\n\n## Academic\n\nLet $K$ be the set of keywords from the file `src/resources/academic.json`\n\nThe academic check hits, if for a word $w \\in W$\n\n$\\forall k \\in K: w = k \\lor w = upper(k)$\n\nIn text: We look if one of the elements in $K$ occurs in the text. We do this also for the situation, that it has a capitalized first letter.\n\n## Grammar\n\nLet $K$ be the set of keywords from the file `src/resources/grammar.json`\n\nThe grammar check hits, if for a word $w \\in W$\n\n$\\forall k \\in K: w = k \\lor w = upper(k)$\n\nIn text: We look if one of the elements in $K$ occurs in the text. We do this also for the situation, that it has a capitalized first letter.\n\n## Egcorns\n\nLet $K$ be the set of keywords from the file `src/resources/eggcorns.json`\n\nThe grammar check hits, if for a word $w \\in W$\n\n$\\forall k \\in K: w = k \\lor w = upper(k)$\n\nIn text: We look if one of the elements in $K$ occurs in the text. We do this also for the situation, that it has a capitalized first letter.\n\n## Parsing the Text\n\nBasically, we use two variants to work with the text. Either we check word-wise, thereby,\nthe text is split based on the following chars \" ,.!?:-\\n'\\\")({}\". That means word are\nlimited by these chars and will be identified as single words.\n\nThe other variant is based on regex in the hope that this is for certain operations more efficient.\n\n# Development\n\n# Build\n\n```\npython3 -m build\n```\n\n# Run tests\n\n```\npython3 -m unittest tests.test_grammark.TestGrammark\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/highkite/py-grammark",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-grammark",
    "package_url": "https://pypi.org/project/py-grammark/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-grammark/",
    "project_urls": {
      "Homepage": "https://github.com/highkite/py-grammark"
    },
    "release_url": "https://pypi.org/project/py-grammark/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Checks to improve scientific writing. See https://github.com/markfullmer/grammark for more information.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12332925,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0af7c5f62c69b2518b2f4cff66ce550bb05f4ed616e09f9cceeeecf702aaf8c4",
          "md5": "c120e7d03a2b9282423ce4462c1879c1",
          "sha256": "8a47e4acb5ba7691fd1c15803b05ffed810d927eca6902194083d9d0baf26b09"
        },
        "downloads": -1,
        "filename": "py_grammark-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c120e7d03a2b9282423ce4462c1879c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34341,
        "upload_time": "2021-12-14T18:23:32",
        "upload_time_iso_8601": "2021-12-14T18:23:32.679881Z",
        "url": "https://files.pythonhosted.org/packages/0a/f7/c5f62c69b2518b2f4cff66ce550bb05f4ed616e09f9cceeeecf702aaf8c4/py_grammark-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaeede4b16efe2b104c719f645c45678d9c972e9eb9e6c9c3aef0f6e1823baac",
          "md5": "d3689b4c0bb77f2c4d3c4726775b8805",
          "sha256": "aa4475209f911a9194dfc704bfa1f64d799194093160dd8c62b25dbd526c7904"
        },
        "downloads": -1,
        "filename": "py-grammark-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3689b4c0bb77f2c4d3c4726775b8805",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34951,
        "upload_time": "2021-12-14T18:23:34",
        "upload_time_iso_8601": "2021-12-14T18:23:34.770987Z",
        "url": "https://files.pythonhosted.org/packages/aa/ee/de4b16efe2b104c719f645c45678d9c972e9eb9e6c9c3aef0f6e1823baac/py-grammark-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4c73ecebb483fe4304613ce743b087b048c92b7bd238537527cc76e08487f7d",
          "md5": "94021b2085b0baeba645c3fdcf6711f1",
          "sha256": "8a7f791aa704c63e9636838b0361957e51f65a1374d0f4fd6cedc1fb5e910ad9"
        },
        "downloads": -1,
        "filename": "py_grammark-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94021b2085b0baeba645c3fdcf6711f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34336,
        "upload_time": "2021-12-16T20:57:11",
        "upload_time_iso_8601": "2021-12-16T20:57:11.400658Z",
        "url": "https://files.pythonhosted.org/packages/d4/c7/3ecebb483fe4304613ce743b087b048c92b7bd238537527cc76e08487f7d/py_grammark-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79f475e496538761d6e561e5ffb671e252f1ad71f9def9e5388cc71e5abb5a75",
          "md5": "deea634dc692f6730d14e6c8ced0952b",
          "sha256": "4f8be74b4b350ea61aced145abbe8f14173b190d917dd49c6cc001cfb8402092"
        },
        "downloads": -1,
        "filename": "py-grammark-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "deea634dc692f6730d14e6c8ced0952b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34937,
        "upload_time": "2021-12-16T20:57:13",
        "upload_time_iso_8601": "2021-12-16T20:57:13.707421Z",
        "url": "https://files.pythonhosted.org/packages/79/f4/75e496538761d6e561e5ffb671e252f1ad71f9def9e5388cc71e5abb5a75/py-grammark-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4c73ecebb483fe4304613ce743b087b048c92b7bd238537527cc76e08487f7d",
        "md5": "94021b2085b0baeba645c3fdcf6711f1",
        "sha256": "8a7f791aa704c63e9636838b0361957e51f65a1374d0f4fd6cedc1fb5e910ad9"
      },
      "downloads": -1,
      "filename": "py_grammark-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94021b2085b0baeba645c3fdcf6711f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34336,
      "upload_time": "2021-12-16T20:57:11",
      "upload_time_iso_8601": "2021-12-16T20:57:11.400658Z",
      "url": "https://files.pythonhosted.org/packages/d4/c7/3ecebb483fe4304613ce743b087b048c92b7bd238537527cc76e08487f7d/py_grammark-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79f475e496538761d6e561e5ffb671e252f1ad71f9def9e5388cc71e5abb5a75",
        "md5": "deea634dc692f6730d14e6c8ced0952b",
        "sha256": "4f8be74b4b350ea61aced145abbe8f14173b190d917dd49c6cc001cfb8402092"
      },
      "downloads": -1,
      "filename": "py-grammark-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "deea634dc692f6730d14e6c8ced0952b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34937,
      "upload_time": "2021-12-16T20:57:13",
      "upload_time_iso_8601": "2021-12-16T20:57:13.707421Z",
      "url": "https://files.pythonhosted.org/packages/79/f4/75e496538761d6e561e5ffb671e252f1ad71f9def9e5388cc71e5abb5a75/py-grammark-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}