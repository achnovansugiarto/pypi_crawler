{
  "info": {
    "author": "Vgbundo",
    "author_email": "vgbundo@disroot.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "======\n ppxxh\n======\n\nppxxh is a Pure Python implementation of the XXHASH family of hash\nalgorithms.\n\nThis pure python implementation of\n`Yann Collet's XXHASH <https://github.com/Cyan4973/xxHash>`_ family of\nnon-cryptographic hash algorithms with no dependencies outside of the\npython standard library is significantly slower than version 0.8.0 of\nthe `reference implementation`_ of these hash algorithms, but they\nproduce the same outputs given the same inputs. This equality of outputs\nis checked with tests that duplicate portions of `xsum_sanity_check.c`\nfrom the `reference implementation`_.\n\n``ppxxh`` is compatible with Python 3.0 and newer.\n\nThe interface and use of ``ppxxh`` is similar to the Python standard\nlibrary module ``hashlib``, while providing XXHASH hash algorithms.\nThus the various hash objects may be created using the **ppxxh.new()**\nfunction or directly instantiated from their classes.\n\nHash Methods\n------------\nThe hash objects have these common methods:\n\nupdate(data)\n    Update the state of the hash object. Data may be passed to the hash\n    object at initialization and/or by an arbitrary number of calls to\n    **update()**.\ndigest()\n    Return the hash digest as a bytes object.\nhexdigest()\n    Return the hash digest as a string of hexidecimal digits.\nintdigest()\n    Return the hash digest as an unsigned integer.\n\n    This method is not part of the ``hashlib`` interface but is the\n    typical output format of the `reference implementation`_ (except for\n    xxh3_128)\ncopy()\n    Return a copy (clone) of the hash object.\n\nThe ``xxh3_128`` hash objects also have a **intdigest2()** method that\nreturns the hash digest as a pair of 64-bit unsigned integers matching\nthe typical output format of the `reference implementation`_ for this\nhash algorithm\n\nAs listed in **ppxxh.algorithms_guaranteed** and\n**ppxxh.algorithms_guaranteed**, the hash algorithms provided are\n**xxh32**, **xxh64**, **xxh3_64**, and **xxh3_128**.\n\nThe **ppxxh.generate_secret()** function duplicates the\n``XXH3_generateSecret()`` function provided by the\n`reference implementation`_ to use a low entropy bytes like object\nof arbitrary length to generate a high entropy secret well suited to use\nas the `secret` parameter of ``xxh3_64`` and ``xxh3_128``.\n\nExample\n-------\nCalculate the digest in various forms for the bytes object,\n``b'This is a bytes object, not a string!'``.  Specify a `seed`\nvalue.  If this optional value were not provided, the hash object\nwould be initialized differently and the various resulting digest\nvalues would all be different.\n\n    >>> from ppxxh import xxh64\n    >>> m = xxh64(seed=14414669413082423462)  # seed is optional\n    >>> m.name\n    'xxh64'\n    >>> m.digest_size\n    8\n    >>> m.block_size\n    32\n    >>> m.update(b'This is a bytes')\n    >>> m.hexdigest()  # a digest may be requested at any time\n    '938907256708f46c'\n    >>> m.update(b' object, not a string!')\n    >>> m.digest()\n    b'!^>f7\\x84Ii'\n    >>> m.hexdigest()\n    '215e3e6637844969'\n    >>> m.intdigest()\n    2404427859801426281\n\nA more condensed way to get the same result.\n\n    >>> xxh64(b'This is a bytes object, not a string!',\n    ...       seed=14414669413082423462).hexdigest()\n    '215e3e6637844969'\n\n\n.. _`reference implementation`:\n\nThe reference implementation of the XXHASH family are available at\nhttps://github.com/Cyan4973/xxHash\n\n(Python code formatted by ``black -l 79``)\n\nLicensed under `MIT License <https://github.com/vgbundo/ppxxh/blob/main/LICENSE>`_\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vgbundo/ppxxh",
    "keywords": "pure python,hash,xxh,xxhash,xxh32,xxh64,xxh3_64,xxh3_128,secret generator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ppxxh",
    "package_url": "https://pypi.org/project/ppxxh/",
    "platform": "",
    "project_url": "https://pypi.org/project/ppxxh/",
    "project_urls": {
      "Homepage": "https://github.com/vgbundo/ppxxh"
    },
    "release_url": "https://pypi.org/project/ppxxh/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Pure python implementation xxhash algorithms",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11917650,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "124af6996785e0bd70b8d47405170ee68c7294be34d9a81614bf353a3dd1bd8f",
          "md5": "37d002d00ef6ba7335aa0cfa68f23add",
          "sha256": "e43a13456fadf5d80f7ff70c17a2087a846f924d4ee7be41478191a27252d3e4"
        },
        "downloads": -1,
        "filename": "ppxxh-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37d002d00ef6ba7335aa0cfa68f23add",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 21441,
        "upload_time": "2021-11-03T18:46:31",
        "upload_time_iso_8601": "2021-11-03T18:46:31.677534Z",
        "url": "https://files.pythonhosted.org/packages/12/4a/f6996785e0bd70b8d47405170ee68c7294be34d9a81614bf353a3dd1bd8f/ppxxh-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c33e3bc3a3734ac304ffa055e11c3c73f7ce9464d97af66d842ff4ba8faac50",
          "md5": "16f543f23d6d9de17f545a13c8c6d200",
          "sha256": "1c5b82b0ae1356f8fa32e3f1d45fd059eef6ecf491de2061f169d9998ce59f3e"
        },
        "downloads": -1,
        "filename": "ppxxh-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16f543f23d6d9de17f545a13c8c6d200",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16124,
        "upload_time": "2021-11-03T18:46:33",
        "upload_time_iso_8601": "2021-11-03T18:46:33.278297Z",
        "url": "https://files.pythonhosted.org/packages/5c/33/e3bc3a3734ac304ffa055e11c3c73f7ce9464d97af66d842ff4ba8faac50/ppxxh-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "124af6996785e0bd70b8d47405170ee68c7294be34d9a81614bf353a3dd1bd8f",
        "md5": "37d002d00ef6ba7335aa0cfa68f23add",
        "sha256": "e43a13456fadf5d80f7ff70c17a2087a846f924d4ee7be41478191a27252d3e4"
      },
      "downloads": -1,
      "filename": "ppxxh-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37d002d00ef6ba7335aa0cfa68f23add",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 21441,
      "upload_time": "2021-11-03T18:46:31",
      "upload_time_iso_8601": "2021-11-03T18:46:31.677534Z",
      "url": "https://files.pythonhosted.org/packages/12/4a/f6996785e0bd70b8d47405170ee68c7294be34d9a81614bf353a3dd1bd8f/ppxxh-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c33e3bc3a3734ac304ffa055e11c3c73f7ce9464d97af66d842ff4ba8faac50",
        "md5": "16f543f23d6d9de17f545a13c8c6d200",
        "sha256": "1c5b82b0ae1356f8fa32e3f1d45fd059eef6ecf491de2061f169d9998ce59f3e"
      },
      "downloads": -1,
      "filename": "ppxxh-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "16f543f23d6d9de17f545a13c8c6d200",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 16124,
      "upload_time": "2021-11-03T18:46:33",
      "upload_time_iso_8601": "2021-11-03T18:46:33.278297Z",
      "url": "https://files.pythonhosted.org/packages/5c/33/e3bc3a3734ac304ffa055e11c3c73f7ce9464d97af66d842ff4ba8faac50/ppxxh-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}