{
  "info": {
    "author": "Pgcli Core Team + The Materialize developers",
    "author_email": "bugs@materialize.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "A REPL for the Materialize Streaming Database Engine\n----------------------------------------------------\n\nSee https://materialize.io for an introduction to Materialize.\n\nQuick Start\n-----------\n\nThe easiest way to get started with ``mzcli`` with a remote materialized is to use docker::\n\n    docker run -it materialize/mzcli --help\n\nThis is a work-in-progress materialize client that does auto-completion and\nsyntax highlighting. It is a soft fork of `mzcli`, and will hopefully one day be\neven less of a fork from mzcli, but due to materialize's extra functionality\nthis will be a long-lived tool for interacting with ``materialized``.\n\n.. image:: screenshots/mzcli.gif\n.. image:: screenshots/image01.png\n\n.. _mzcli: https://www.mzcli.com/\n\nUsage\n-----\n\n::\n\n    $ mzcli [database_name]\n\n    or\n\n    $ mzcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]\n\nExamples:\n\n::\n\n    $ mzcli local_database\n\n    $ mzcli postgres://amjith:pa$$w0rd@example.com:5432/app_db?sslmode=verify-ca&sslrootcert=/myrootcert\n\nFor more details:\n\n::\n\n    $ mzcli --help\n\n    Usage: mzcli [OPTIONS] [DBNAME] [USERNAME]\n\n    Options:\n      -h, --host TEXT         Host address of the postgres database.\n      -p, --port INTEGER      Port number at which the postgres instance is\n                              listening.\n      -U, --username TEXT     Username to connect to the postgres database.\n      -u, --user TEXT         Username to connect to the postgres database.\n      -W, --password          Force password prompt.\n      -w, --no-password       Never prompt for password.\n      --single-connection     Do not use a separate connection for completions.\n      -v, --version           Version of mzcli.\n      -d, --dbname TEXT       database name to connect to.\n      --mzclirc PATH          Location of mzclirc file.\n      -D, --dsn TEXT          Use DSN configured into the [alias_dsn] section of\n                              mzclirc file.\n      --list-dsn              list of DSN configured into the [alias_dsn] section\n                              of mzclirc file.\n      --row-limit INTEGER     Set threshold for row limit prompt. Use 0 to disable\n                              prompt.\n      --less-chatty           Skip intro on startup and goodbye on exit.\n      --prompt TEXT           Prompt format (Default: \"\\u@\\h:\\d> \").\n      --prompt-dsn TEXT       Prompt format for connections using DSN aliases\n                              (Default: \"\\u@\\h:\\d> \").\n      -l, --list              list available databases, then exit.\n      --auto-vertical-output  Automatically switch to vertical output mode if the\n                              result is wider than the terminal width.\n      --warn / --no-warn      Warn before running a destructive query.\n      --help                  Show this message and exit.\n\n``mzcli`` also supports many of the same `environment variables`_ as ``psql`` for login options (e.g. ``PGHOST``, ``PGPORT``, ``PGUSER``, ``PGPASSWORD``, ``PGDATABASE``).\n\n.. _environment variables: https://www.postgresql.org/docs/current/libpq-envars.html\n\nFeatures\n--------\n\nThe ``mzcli`` is written using prompt_toolkit_.\n\n* Auto-completes as you type for SQL keywords as well as tables and\n  columns in the database.\n* Syntax highlighting using Pygments.\n* Smart-completion (enabled by default) will suggest context-sensitive\n  completion.\n\n    - ``SELECT * FROM <tab>`` will only show table names.\n    - ``SELECT * FROM users WHERE <tab>`` will only show column names.\n\n* Primitive support for ``psql`` back-slash commands.\n* Pretty prints tabular data.\n\n.. _prompt_toolkit: https://github.com/jonathanslenders/python-prompt-toolkit\n.. _tabulate: https://pypi.python.org/pypi/tabulate\n\nConfig\n------\n\nA config file is automatically created at ``~/.config/mzcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n--------------\n\nWhile we are not mzcli, the following documentation expresses our sentiments\nand still correctly represents the development workflow.\n\nIf you're interested in contributing to this project, first of all I would like\nto extend my heartfelt gratitude. I've written a small doc to describe how to\nget this running in a development setup.\n\nhttps://github.com/dbcli/mzcli/blob/master/DEVELOP.rst\n\nPlease feel free to file an issue if you need help, or jump in our `community\nslack`_.\n\n.. _community slack: https://join.slack.com/t/materializecommunity/shared_invite/zt-fpfvczj5-efOE_8qvM4fWpHSvMxpKbA\n\n\n..\n  Detailed Installation Instructions:\n  -----------------------------------\n\n  macOS:\n  ======\n\n  The easiest way to install mzcli is using Homebrew.\n\n  ::\n\n      $ brew install mzcli\n\n  Done!\n\n  Alternatively, you can install ``mzcli`` as a python package using a package\n  manager called called ``pip``. You will need postgres installed on your system\n  for this to work.\n\n  In depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installing.html.\n\n  ::\n\n      $ which pip\n\n  If it is installed then you can do:\n\n  ::\n\n      $ pip install mzcli\n\n  If that fails due to permission issues, you might need to run the command with\n  sudo permissions.\n\n  ::\n\n      $ sudo pip install mzcli\n\n  If pip is not installed check if easy_install is available on the system.\n\n  ::\n\n      $ which easy_install\n\n      $ sudo easy_install mzcli\n\n  Linux:\n  ======\n\n  In depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installing.html.\n\n  Check if pip is already available in your system.\n\n  ::\n\n      $ which pip\n\n  If it doesn't exist, use your linux package manager to install `pip`. This\n  might look something like:\n\n  ::\n\n      $ sudo apt-get install python-pip   # Debian, Ubuntu, Mint etc\n\n      or\n\n      $ sudo yum install python-pip  # RHEL, Centos, Fedora etc\n\n  ``mzcli`` requires python-dev, libpq-dev and libevent-dev packages. You can\n  install these via your operating system package manager.\n\n\n  ::\n\n      $ sudo apt-get install python-dev libpq-dev libevent-dev\n\n      or\n\n      $ sudo yum install python-devel postgresql-devel\n\n  Then you can install mzcli:\n\n  ::\n\n      $ sudo pip install mzcli\n\n  mzcli only runs on Python3.6+.\n\n\n  Docker\n  ======\n\n  Pgcli can be run from within Docker. This can be useful to try mzcli without\n  installing it, or any dependencies, system-wide.\n\n  To build the image:\n\n  ::\n\n      $ docker build -t mzcli .\n\n  To create a container from the image:\n\n  ::\n\n      $ docker run --rm -ti mzcli mzcli <ARGS>\n\n  To access postgresql databases listening on localhost, make sure to run the\n  docker in \"host net mode\". E.g. to access a database called \"foo\" on the\n  postgresql server running on localhost:5432 (the standard port):\n\n  ::\n\n      $ docker run --rm -ti --net host mzcli mzcli -h localhost foo\n\n  To connect to a locally running instance over a unix socket, bind the socket to\n  the docker container:\n\n  ::\n\n      $ docker run --rm -ti -v /var/run/postgres:/var/run/postgres mzcli mzcli foo\n\n\n  IPython\n  =======\n\n  Pgcli can be run from within `IPython <https://ipython.org>`_ console. When working on a query,\n  it may be useful to drop into a mzcli session without leaving the IPython console, iterate on a\n  query, then quit mzcli to find the query results in your IPython workspace.\n\n  Assuming you have IPython installed:\n\n  ::\n\n      $ pip install ipython-sql\n\n  After that, run ipython and load the ``mzcli.magic`` extension:\n\n  ::\n\n      $ ipython\n\n      In [1]: %load_ext mzcli.magic\n\n\n  Connect to a database and construct a query:\n\n  ::\n\n      In [2]: %mzcli postgres://someone@localhost:5432/world\n      Connected: someone@world\n      someone@localhost:world> select * from city c where countrycode = 'USA' and population > 1000000;\n      +------+--------------+---------------+--------------+--------------+\n      | id   | name         | countrycode   | district     | population   |\n      |------+--------------+---------------+--------------+--------------|\n      | 3793 | New York     | USA           | New York     | 8008278      |\n      | 3794 | Los Angeles  | USA           | California   | 3694820      |\n      | 3795 | Chicago      | USA           | Illinois     | 2896016      |\n      | 3796 | Houston      | USA           | Texas        | 1953631      |\n      | 3797 | Philadelphia | USA           | Pennsylvania | 1517550      |\n      | 3798 | Phoenix      | USA           | Arizona      | 1321045      |\n      | 3799 | San Diego    | USA           | California   | 1223400      |\n      | 3800 | Dallas       | USA           | Texas        | 1188580      |\n      | 3801 | San Antonio  | USA           | Texas        | 1144646      |\n      +------+--------------+---------------+--------------+--------------+\n      SELECT 9\n      Time: 0.003s\n\n\n  Exit out of mzcli session with ``Ctrl + D`` and find the query results:\n\n  ::\n\n      someone@localhost:world>\n      Goodbye!\n      9 rows affected.\n      Out[2]:\n      [(3793, u'New York', u'USA', u'New York', 8008278),\n       (3794, u'Los Angeles', u'USA', u'California', 3694820),\n       (3795, u'Chicago', u'USA', u'Illinois', 2896016),\n       (3796, u'Houston', u'USA', u'Texas', 1953631),\n       (3797, u'Philadelphia', u'USA', u'Pennsylvania', 1517550),\n       (3798, u'Phoenix', u'USA', u'Arizona', 1321045),\n       (3799, u'San Diego', u'USA', u'California', 1223400),\n       (3800, u'Dallas', u'USA', u'Texas', 1188580),\n       (3801, u'San Antonio', u'USA', u'Texas', 1144646)]\n\n  The results are available in special local variable ``_``, and can be assigned to a variable of your\n  choice:\n\n  ::\n\n      In [3]: my_result = _\n\n  Thanks:\n  -------\n\n  A special thanks to `Jonathan Slenders <https://twitter.com/jonathan_s>`_ for\n  creating `Python Prompt Toolkit <http://github.com/jonathanslenders/python-prompt-toolkit>`_,\n  which is quite literally the backbone library, that made this app possible.\n  Jonathan has also provided valuable feedback and support during the development\n  of this app.\n\n  `Click <http://click.pocoo.org/>`_ is used for command line option parsing\n  and printing error messages.\n\n  Thanks to `psycopg <http://initd.org/psycopg/>`_ for providing a rock solid\n  interface to Postgres database.\n\n  Thanks to all the beta testers and contributors for your time and patience. :)\n\n\n  .. |Build Status| image:: https://api.travis-ci.org/dbcli/mzcli.svg?branch=master\n      :target: https://travis-ci.org/dbcli/mzcli\n\n  .. |CodeCov| image:: https://codecov.io/gh/dbcli/mzcli/branch/master/graph/badge.svg\n     :target: https://codecov.io/gh/dbcli/mzcli\n     :alt: Code coverage report\n\n  .. |Landscape| image:: https://landscape.io/github/dbcli/mzcli/master/landscape.svg?style=flat\n     :target: https://landscape.io/github/dbcli/mzcli/master\n     :alt: Code Health\n\n  .. |PyPI| image:: https://img.shields.io/pypi/v/mzcli.svg\n      :target: https://pypi.python.org/pypi/mzcli/\n      :alt: Latest Version\n\n  .. |Gitter| image:: https://badges.gitter.im/Join%20Chat.svg\n      :target: https://gitter.im/dbcli/mzcli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n      :alt: Gitter Chat",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://materialize.io",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mzcli",
    "package_url": "https://pypi.org/project/mzcli/",
    "platform": "",
    "project_url": "https://pypi.org/project/mzcli/",
    "project_urls": {
      "Homepage": "https://materialize.io"
    },
    "release_url": "https://pypi.org/project/mzcli/3.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "CLI for the Materialize streaming database. With auto-completion and syntax highlighting.",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8014287,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aa835acb427e1e3e0c5e6b28bd6bea7b5e63e32f5d3b465371966cd44845f19",
          "md5": "5f84200d8cde1ce042874d143f1ee298",
          "sha256": "33cbc3d71e7de4efa7733bddf80a6a122e570cf455be3e8325a32d942a65ee1e"
        },
        "downloads": -1,
        "filename": "mzcli-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f84200d8cde1ce042874d143f1ee298",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 71879,
        "upload_time": "2020-08-21T19:03:38",
        "upload_time_iso_8601": "2020-08-21T19:03:38.169228Z",
        "url": "https://files.pythonhosted.org/packages/5a/a8/35acb427e1e3e0c5e6b28bd6bea7b5e63e32f5d3b465371966cd44845f19/mzcli-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecd9c9c2dd33180bc748d5d366ec761692a2e4d27c2de923415f2849a8d4dcf0",
          "md5": "944e76fb16a4a1d3a7e92d36f6556b62",
          "sha256": "2a890714a40c8b5f72ad47003bdd48f0a091a20be554909d273aeb4f06c2afd8"
        },
        "downloads": -1,
        "filename": "mzcli-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "944e76fb16a4a1d3a7e92d36f6556b62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 122526,
        "upload_time": "2020-08-21T19:03:17",
        "upload_time_iso_8601": "2020-08-21T19:03:17.953000Z",
        "url": "https://files.pythonhosted.org/packages/ec/d9/c9c2dd33180bc748d5d366ec761692a2e4d27c2de923415f2849a8d4dcf0/mzcli-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aa835acb427e1e3e0c5e6b28bd6bea7b5e63e32f5d3b465371966cd44845f19",
        "md5": "5f84200d8cde1ce042874d143f1ee298",
        "sha256": "33cbc3d71e7de4efa7733bddf80a6a122e570cf455be3e8325a32d942a65ee1e"
      },
      "downloads": -1,
      "filename": "mzcli-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f84200d8cde1ce042874d143f1ee298",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 71879,
      "upload_time": "2020-08-21T19:03:38",
      "upload_time_iso_8601": "2020-08-21T19:03:38.169228Z",
      "url": "https://files.pythonhosted.org/packages/5a/a8/35acb427e1e3e0c5e6b28bd6bea7b5e63e32f5d3b465371966cd44845f19/mzcli-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecd9c9c2dd33180bc748d5d366ec761692a2e4d27c2de923415f2849a8d4dcf0",
        "md5": "944e76fb16a4a1d3a7e92d36f6556b62",
        "sha256": "2a890714a40c8b5f72ad47003bdd48f0a091a20be554909d273aeb4f06c2afd8"
      },
      "downloads": -1,
      "filename": "mzcli-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "944e76fb16a4a1d3a7e92d36f6556b62",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 122526,
      "upload_time": "2020-08-21T19:03:17",
      "upload_time_iso_8601": "2020-08-21T19:03:17.953000Z",
      "url": "https://files.pythonhosted.org/packages/ec/d9/c9c2dd33180bc748d5d366ec761692a2e4d27c2de923415f2849a8d4dcf0/mzcli-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}