{
  "info": {
    "author": "Shinnng",
    "author_email": "Shinnng@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Platon Tester\n\n[![Join the chat at https://gitter.im/platonnetwork/platon-tester](https://badges.gitter.im/platonnetwork/platon-tester.svg)](https://gitter.im/platonnetwork/platon-tester)\n\n[![Build Status](https://travis-ci.org/platonnetwork/platon-tester.png)](https://travis-ci.org/platonnetwork/platon-tester)\n\n\nTools for testing platon based applications.\n\n\n## Installation\n\n```sh\npip install platon-tester\n```\n\n\n## Quick Start\n\n```python\n>>> from platon_tester import PlatonTester\n>>> t = PlatonTester()\n>>> t.get_accounts()\n('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n '0xDCEceAF3fc5C0a63d195d69b1A90011B7B19650D',\n '0x598443F1880Ef585B21f1d7585Bd0577402861E5',\n '0x13cBB8D99C6C4e0f2728C7d72606e78A29C4E224',\n '0x77dB2BEBBA79Db42a978F896968f4afCE746ea1F',\n '0x24143873e0E0815fdCBcfFDbe09C979CbF9Ad013',\n '0x10A1c1CB95c92EC31D3f22C66Eef1d9f3F258c6B',\n '0xe0FC04FA2d34a66B779fd5CEe748268032a146c0',\n '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n>>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1000000000000000000000000\n>>> t.send_transaction({'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1', 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e', 'gas': 21000, 'value': 1})\n'0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25'\n>>> t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'data': '0x',\n 'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'gas': 21000,\n 'gas_price': 1,\n 'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'nonce': 0,\n 'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n 's': 52192522150044217242428968890330558187037131043598164958282684822175843828481,\n 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n 'transaction_index': 0,\n 'v': 27,\n 'value': 1}\n\n>>> t.get_transaction_receipt('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'contract_address': None,\n 'cumulative_gas_used': 21000,\n 'gas_used': 21000,\n 'logs': (),\n 'transaction_hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'transaction_index': 0}\n```\n\n\n## Development\n\n```sh\npip install -e \".[dev]\"\n```\n\n\n### Running the tests\n\nYou can run the tests with:\n\n```sh\npy.test tests\n```\n\nOr you can install `tox` to run the full test suite.\n\n\n### Releasing\n\nPandoc is required for transforming the markdown README to the proper format to\nrender correctly on pypi.\n\nFor Debian-like systems:\n\n```\napt install pandoc\n```\n\nOr on OSX:\n\n```sh\nbrew install pandoc\n```\n\nTo release a new version:\n\n```sh\nbumpversion $$VERSION_PART_TO_BUMP$$\ngit push && git push --tags\nmake release\n```\n\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, use bumpversion and specify which part to bump,\nlike `bumpversion minor` or `bumpversion devnum`.\n\nIf you are in a beta version, `bumpversion stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `bumpversion --new-version 4.0.0-alpha.1 devnum`\n\n\n# Documentation\n\n## Input and output data formats\n\nThe platon tester library strictly enforces the following input formats and\ntypes.\n\n* Hexidecimal values **must** be text (not byte) strings.  The `0x` prefix is optional.\n* Any address which contains mixed-case alpha characters will be validated as a checksummed address as specified by [EIP-55](https://github.com/platonnetwork/EIPs/blob/master/EIPS/eip-55.md)\n* 32-byte hashes **must** be hexidecimal encoded.\n* Numeric values **must** be in their integer representation.\n\nSimilarly, platon tester ensures that return values conform to similar rules.\n\n* 32-byte hashes will be returned in their hexidecimal encoded representation.\n* Addresses will be returned in their hexidecimal representation and EIP55 checksummed.\n* Numeric values will be returned as integers.\n\n\n## Block Numbers\n<a id=\"block-numbers\"></a>\n\nAny `block_number` parameter will accept the following string values.\n\n* `'latest'`: for the latest mined block.\n* `'pending'`: for the current un-mined block.\n* `'earliest'`: for the genesis block.\n\n> Note: These **must** be text strings (not byte stringS)\n\n\n## `platon_tester.PlatonTester`\n\n### API\n\n### Instantiation\n\n* `platon_tester.PlatonTester(backend=None, validator=None, normalizer=None, auto_mine_transactions=True, fork_blocks=None)`\n\nThe `PlatonTester` object is the sole API entrypoint.  Instantiation of this\nobject accepts the following parameters.\n\n- `backend`: The chain backend being used.  See the [chain backends](#backends)\n- `validator`: The validator to used.  See the [validators](#validation)\n- `normalizer`: The normalizer to used.  See the [normalizers](#normalization)\n- `auto_mine_transactions`: If *truthy* transactions will be automatically mined at the time they are submitted.  See [`enable_auto_mine_transactions`](#api-enable_auto_mine_transactions) and [`disable_auto_mine_transactions`](#api-disable_auto_mine_transactions).\n- `fork_blocks`: configures which block numbers the various network hard fork rules will be activated.  See [fork-rules](#fork-rules)\n\n\n```python\n>>> from platon_tester import PlatonTester\n>>> t = PlatonTester()\n>>> t\n<platon_tester.main.PlatonTester at 0x102255710>\n```\n\n\n### Fork Rules\n<a id=\"fork-rules\"></a>\n\nPlaton tester uses the Byzantium rules, starting at block 0.\n\n### Time Travel\n<a id=\"time-travel\"></a>\n\nThe chain can only time travel forward in time.\n\n<a id=\"api-time_travel\"></a>\n\n#### `PlatonTester.time_travel(timestamp)`\n\nThe `timestamp` must be an integer, strictly greater than the current timestamp\nof the latest block.  \n\n> Note: Time traveling will result in a new block being mined.\n\n\n### Mining\n\nManually mining blocks can be done with the following API.  The `coinbase`\nparameter of these methods **must** be a hexidecimal encoded address.\n\n<a id=\"api-mine_blocks\"></a>\n\n#### `PlatonTester.mine_blocks(num_blocks=1, coinbase=None)`\n\nMines `num_blocks` new blocks, returning an iterable of the newly mined block hashes.\n\n\n<a id=\"api-mine_block\"></a>\n\n#### `PlatonTester.mine_block(coinbase=None)`\n\nMines a single new block, returning the mined block's hash.\n\n\n<a id=\"api-auto_mine_transactions\"></a>\n\n#### Auto-mining transactions\n\nBy default all transactions are mined immediately.  This means that each transaction you send will result in a new block being mined, and that all blocks will only ever have at most a single transaction.  This behavior can be controlled with the following methods.\n\n<a id=\"api-enable_auto_mine_transactions\"></a>\n\n#### `PlatonTester.enable_auto_mine_transactions()`\n\nTurns on auto-mining of transactions.\n\n<a id=\"api-disable_auto_mine_transactions\"></a>\n\n#### `PlatonTester.disable_auto_mine_transactions()`\n\nTurns **off** auto-mining of transactions.\n\n\n### Accounts\n\nThe following API can be used to interact with account data.  The `account`\nparameter in these methods **must** be a hexidecimal encode address.\n\n<a id=\"api-get_accounts\"></a>\n `PlatonTester.get_accounts()`\n\nReturns an iterable of the accounts that the tester knows about.  All accounts\nin this list will be EIP55 checksummed.\n\n```python\n>>> t.get_accounts()\n('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n ...\n '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n```\n\n\n<a id=\"api-add_account\"></a>\n\n#### `PlatonTester.add_account(private_key, password=None)`\n\nAdds a new account for the given private key.  Returns the hex encoded address\nof the added account.\n\n```python\n>>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d')\n'0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n```\n\nBy default, added accounts are unlocked and do not have a password.  If you\nwould like to add an account which has a password, you can supply the password\nas the second parameter.\n\n```python\n>>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d', 'my-secret')\n'0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n```\n\n\n<a id=\"api-unlock_account\"></a>\n\n#### `PlatonTester.unlock_account(account, password, unlock_seconds=None)`\n\nUnlocks the given account if the provided password matches.\n\nRaises a `ValidationError` if:\n\n* The account is not known.\n* The password does not match.\n* The account was created without a password.\n\n```python\n>>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret')\n```\n\nBy default, accounts will be unlocked indefinitely.  You can however unlock an\naccount for a specified amount of time by providing the desired duration in\nseconds.\n\n```python\n# unlock for 1 hour.\n>>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret', 60 * 60)\n```\n\n\n<a id=\"api-lock_account\"></a>\n\n#### `PlatonTester.lock_account(account)`\n\nLocks the provide account.  \n\nRaises a `ValidationError` if:\n\n* The account is not known\n* The account does not have a password.\n\n\n<a id=\"api-get_balance\"></a>\n\n#### `PlatonTester.get_balance(account) -> integer`\n\nReturns the balance, in wei, for the provided account.\n\n```python\n>>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1000004999999999999999999\n```\n\n\n<a id=\"api-get_nonce\"></a>\n\n#### `PlatonTester.get_nonce(account) -> integer`\n\nReturns the nonce for the provided account.\n\n```python\n>>> t.get_nonce('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1\n```\n\n<a id=\"api-get_code\"></a>\n\n#### `PlatonTester.get_code(account) -> hex string`\n\nReturns the code for the given account.\n\n```python\n>>> t.get_code('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n\"0x\"\n```\n\n\n### Blocks, Transactions, and Receipts\n\n<a id=\"api-get_transaction_by_hash\"></a>\n\n#### `PlatonTester.get_transaction_by_hash(transaction_hash) -> transaction-object`\n\nReturns the transaction for the given hash, raising a\n[`TransactionNotFound`](#errors-TransactionNotFound) exception if the\ntransaction cannot be found.\n\n```python\n>>> t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'transaction_index': 0,\n 'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n 'value': 1,\n 'gas': 21000,\n 'gas_price': 1,\n 'nonce': 0,\n 'data': '0x',\n 'v': 27,\n 'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n 's': 52192522150044217242428968890330558187037131043598164958282684822175843828481}\n```\n\n> Note: For unmined transaction, `transaction_index`, `block_number` and `block_hash` will all be `None`.\n\n\n<a id=\"api-get_block_by_number\"></a>\n\n#### `PlatonTester.get_block_by_number(block_number, full_transactions=False) -> block-object`\n\nReturns the block for the given `block_number`.  See [block\nnumbers](#block-numbers) for named block numbers you can use.  If\n`full_transactions` is truthy, then the transactions array will be populated\nwith full transaction objects as opposed to their hashes.\n\nRaises [`BlockNotFound`](#errors-BlockNotFound) if a block for the given number\ncannot be found.\n\n```python\n>>> t.get_block_by_number(1)\n{'difficulty': 131072,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 999023468,\n 'gas_used': 0,\n 'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n 'logs_bloom': 0,\n 'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'nonce': '0x0000000000000000',\n 'number': 1,\n 'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'size': 472,\n 'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n 'timestamp': 1410973360,\n 'total_difficulty': 262144,\n 'transactions': (),\n 'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n 'uncles': ()}\n```\n\n\n<a id=\"api-get_block_by_hash\"></a>\n\n#### `PlatonTester.get_block_by_hash(block_hash, full_transactions=True) -> block-object`\n\nReturns the block for the given `block_hash`.  The `full_transactions`\nparameter behaves the same as in\n[`get_block_by_number`](#api-get_block_by_number).\n\nRaises [`BlockNotFound`](#errors-BlockNotFound) if a block for the given hash\ncannot be found.\n\n```python\n>>> t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\n{'difficulty': 131072,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 999023468,\n 'gas_used': 0,\n 'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n 'logs_bloom': 0,\n 'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'nonce': '0x0000000000000000',\n 'number': 1,\n 'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'size': 472,\n 'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n 'timestamp': 1410973360,\n 'total_difficulty': 262144,\n 'transactions': (),\n 'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n 'uncles': ()}\n```\n\n<a id=\"api-get_transaction_receipt\"></a>\n\n#### `PlatonTester.get_transaction_receipt(transaction_hash)`\n\nReturns the receipt for the given `transaction_hash`, raising\n[`TransactionNotFound`](#errors-TransactionNotFound) if no transaction can be\nfound for the given hash.\n\n\n```python\n>>> t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\n {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n 'block_number': 2,\n 'contract_address': None,\n 'cumulative_gas_used': 23154,\n 'gas_used': 23154,\n 'logs': ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n   'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n   'block_number': 2,\n   'data': '0x',\n   'log_index': 0,\n   'topics': (\n    '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n    '0x0000000000000000000000000000000000000000000000000000000000003039'),\n   'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n   'transaction_index': 0,\n   'type': 'mined'},),\n 'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n 'transaction_index': 0}\n```\n\n- Receipts for unmined transactions will have all of `block_hash`, `block_number` and `transaction_index` set to `None`.  \n- Receipts for transactions which create a contract will have the created contract address in the `contract_address` field.\n\n\n### Transaction Sending\n\nA transaction is a formatted as a dictionary with the following keys and\nvalues.\n\n* `from`: The address of the account sending the transaction (hexidecimal string).\n* `to`: The address of the account the transaction is being sent to.  Empty string should be used to trigger contract creation (hexidecimal string).\n* `gas`: Sets the gas limit for transaction execution (integer).\n* `gas_price`: Sets the price per unit of gas in wei that will be paid for transaction execution (integer).\n* `value`: The amount of ether in wei that should be sent with the transaction (integer).\n* `data`: The data for the transaction (hexidecimal string).\n\n\n#### Methods\n\n<a id=\"api-send_transaction\"></a>\n\n#### `PlatonTester.send_transaction(transaction) -> transaction_hash`\n\nSends the provided `transaction` object, returning the `transaction_hash` for\nthe sent transaction.\n\n\n<a id=\"api-call\"></a>\n\n#### `PlatonTester.call(transaction, block_number='latest')`\n\nExecutes the provided `transaction` object at the evm state from the block\ndenoted by the `block_number` parameter, returning the resulting bytes return\nvalue from the evm.\n\n<a id=\"api-estimate_gas\"></a>\n\n#### `PlatonTester.estimate_gas(transaction)`\n\nExecutes the provided `transaction` object, measuring and returning the gas\nconsumption.\n\n\n### Logs and Filters\n\n<a id=\"api-create_block_filter\"></a>\n\n#### `PlatonTester.create_block_filter() -> integer`\n\nCreates a new filter for newly mined blocks.  Returns the `filter_id` which can\nbe used to retrieve the block hashes for the mined blocks.\n\n```python\n>>> filter_id = t.create_block_filter()\n>>> filter_id = t.create_block_filter()\n>>> t.mine_blocks(3)\n>>> t.get_only_filter_changes(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\n>>> t.mine_blocks(2)\n>>> t.get_only_filter_changes(filter_id)\n('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n>>> t.get_all_filter_logs(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\n '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n```\n\n<a id=\"api-create_pending_transaction_filter\"></a>\n\n#### `PlatonTester.create_pending_transaction_filter() -> integer`\n\nCreates a new filter for pending transactions.  Returns the `filter_id` which\ncan be used to retrieve the transaction hashes for the pending transactions.\n\n```python\n>>> filter_id = t.create_pending_transaction_filter()\n>>> t.send_transaction({...})\n'0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\n>>> t.send_transaction({...})\n'0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\n>>> t.get_only_filter_changes(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\n>>> t.send_transaction({...})\n'0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\n>>> t.get_only_filter_changes(filter_id)\n('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\n>>> t.get_all_filter_logs(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\n '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\n```\n\n<a id=\"api-create_log_filter\"></a>\n\n#### `PlatonTester.create_log_filter(from_block=None, to_block=None, address=None, topics=None) -> integer`\n\nCreates a new filter for logs produced by transactions.  The parameters for\nthis function can be used to filter the log entries.  \n\n```python\n>>> filter_id = t.create_log_filter()\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\n>>> t.get_only_filter_changes(filter_id)\n({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n  'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\n  'block_number': 11,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000003039'),\n  'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\n  'transaction_index': 0,\n  'type': 'mined'},\n {'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n  'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\n  'block_number': 12,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000010932'),\n  'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\n  'transaction_index': 0,\n  'type': 'mined'})\n```\n\nSee [the filtering guide](#guide-filtering) for detailed information on how to use filters.\n\n<a id=\"api-delete_filter\"></a>\n\n#### `PlatonTester.delete_filter(filter_id)`\n\nRemoves the filter for the provide `filter_id`.  If no filter is found for the\ngiven `filter_id`, raises [`FilterNotFound`](#errors-FilterNotFound).\n\n\n<a id=\"api-get_only_filter_changes\"></a>\n\n#### `PlatonTester.get_only_filter_changes(filter_id) -> transaction_hash or block_hash or log_entry`\n\nReturns all new values for the provided `filter_id` that have not previously\nbeen returned through this API.  Raises\n[`FilterNotFound`](#errors-FilterNotFound) if no filter is found for the given\n`filter_id`.\n\n<a id=\"api-get_only_filter_changes\"></a>\n\n#### `PlatonTester.get_all_filter_logs(filter_id) -> transaction_hash or block_hash or log_entry`\n\nReturns all values for the provided `filter_id`. Raises\n[`FilterNotFound`](#errors-FilterNotFound) if no filter is found for the given\n`filter_id`.\n\n\n### Snapshots and Resetting\n\n<a id=\"api-take_snapshot\"></a>\n\n#### `PlatonTester.take_snapshot() -> snapshot_id`\n\nTakes a snapshot of the current chain state and returns the snapshot id.\n\n\n<a id=\"api-revert_to_snapshot\"></a>\n\n#### `PlatonTester.revert_to_snapshot(snapshot_id)`\n\nReverts the chain to the chain state associated with the given `snapshot_id`.\nRaises [`SnapshotNotFound`](#errors-SnapshotNotFound) if no snapshot is know\nfor the given id.\n\n### Errors and Exceptions\n\n<a id=\"errors-TransactionNotFound\"></a>\n\n#### `platon_tester.exceptions.TransactionNotFound`\n\nRaised in cases where a transaction cannot be found for the provided transaction hash.\n\n\n<a id=\"errors-BlockNotFound\"></a>\n\n#### `platon_tester.exceptions.BlockNotFound`\n\nRaised in cases where a block cannot be found for either a provided number or\nhash.\n\n\n<a id=\"errors-FilterNotFound\"></a>\n\n#### `platon_tester.exceptions.FilterNotFound`\n\nRaised in cases where a filter cannot be found for the provided filter id.\n\n\n<a id=\"errors-SnapshotNotFound\"></a>\n\n#### `platon_tester.exceptions.SnapshotNotFound`\n\nRaised in cases where a snapshot cannot be found for the provided snapshot id.\n\n\n## Backends\n\nPlaton tester is written using a pluggable backend system.\n\n### Backend Dependencies\n\nPlaton tester does not install any of the dependencies needed to use the\nvarious backends by default.  You can however install platon tester with the\nnecessary dependencies using the following method.\n\n```bash\n$ pip install platon-tester[<backend-name>]\n```\n\nYou should replace `<backend-name>` with the name of the desired testing\nbackend.  Available backends are:\n\n* `py-evm`: [PyEVM (alpha)](https://pypi.python.org/pypi/py-evm) **(experimental)**\n\n### Selecting a Backend\n\nYou can select which backend in a few different ways.\n\nThe most direct way is to manually pass in the backend instance you wish to\nuse.\n\n```python\n>>> from platon_tester import PlatonTester, MockBackend\n>>> t = PlatonTester(backend=MockBackend())\n```\n\nPlaton tester also supports configuration using the environment variable\n`PLATON_TESTER_CHAIN_BACKEND`.  This should be set to the import path for the\nbackend class you wish to use.\n\n### Available Backends\n\nPlaton tester can be used with the following backends.\n\n* PyEVM (experimental)\n* MockBackend\n\n#### MockBackend\n\nThis backend has limited functionality.  It cannot perform any VM computations.\nIt mocks out all of the objects and interactions.\n\n```python\n>>> from platon_tester import PlatonTester, MockBackend\n>>> t = PlatonTester(MockBackend())\n```\n\n#### PyEVM (experimental)\n\n> **WARNING** Py-EVM is experimental and should not be relied on for mission critical testing at this stage.\n\nUses the experimental Py-EVM library.\n\n```python\n>>> from platon_tester import PlatonTester, PyEVMBackend\n>>> t = PlatonTester(PyEVMBackend())\n```\n\n\n#### PyEVM Genesis Parameters and State\n\nIf you need to specify custom genesis parameters and state, you can build your own parameters `dict` to use instead of the default\nwhen initializing a backend.  Only default values can be overridden or a `ValueError` will be raised.\n\n```\n# Default Genesis Parameters\n\ndefault_genesis_params = {\n    \"bloom\": 0,\n    \"coinbase\": GENESIS_COINBASE,\n    \"difficulty\": GENESIS_DIFFICULTY,\n    \"extra_data\": GENESIS_EXTRA_DATA,\n    \"gas_limit\": GENESIS_GAS_LIMIT,\n    \"gas_used\": 0,\n    \"mix_hash\": GENESIS_MIX_HASH,\n    \"nonce\": GENESIS_NONCE,\n    \"block_number\": GENESIS_BLOCK_NUMBER,\n    \"parent_hash\": GENESIS_PARENT_HASH,\n    \"receipt_root\": BLANK_ROOT_HASH,\n    \"timestamp\": int(time.time()),\n    \"transaction_root\": BLANK_ROOT_HASH,\n    \"uncles_hash\": EMPTY_RLP_LIST_HASH\n}\n```\n\nTo generate a genesis parameters `dict` with an overridden parameters, pass a `genesis_overrides` `dict` \\\nto `PyEVM.generate_genesis_params`.\n\n```python\n>>> from platon_tester import PyEVMBackend, PlatonTester\n\n>>> genesis_overrides = {'gas_limit': 4500000}\n>>> custom_genesis_params = PyEVMBackend._generate_genesis_params(overrides=genesis_overrides)\n\n# Generates the following `dict`:\n\n# custom_genesis_params = {\n#     \"bloom\": 0,\n#     \"coinbase\": GENESIS_COINBASE,\n#     \"difficulty\": GENESIS_DIFFICULTY,\n#     \"extra_data\": GENESIS_EXTRA_DATA,\n#     \"gas_limit\": 4500000    # <<< Overidden Value <<<\n#     \"gas_used\": 0,\n#     \"mix_hash\": GENESIS_MIX_HASH,\n#     \"nonce\": GENESIS_NONCE,\n#     \"block_number\": GENESIS_BLOCK_NUMBER,\n#     \"parent_hash\": GENESIS_PARENT_HASH,\n#     \"receipt_root\": BLANK_ROOT_HASH,\n#     \"timestamp\": int(time.time()),\n#     \"transaction_root\": BLANK_ROOT_HASH,\n#     \"uncles_hash\": EMPTY_RLP_LIST_HASH\n# }\n```\n\nThen pass the generated `custom_genesis_params` `dict` to the backend's `__init__`\n```python\n>>> from platon_tester import PyEVMBackend, PlatonTester\n>>> pyevm_backend = PyEVMBackend(genesis_parameters=custom_genesis_params)\n>>> t = PlatonTester(backend=pyevm_backend)\n```\n\nOverriding genesis state is similar to overriding genesis state, but requires the consideration of test accounts.\nTo override the genesis state of accounts, pass a `state_overrides` `dict` to `PyEVM.generate_genesis_state`,\nand optionally, the number of accounts to create.  \n\n*NOTE: The same state is applied to all generated test accounts.* \n\n```\n# Default Account Genesis State\n\ndefault_account_state = {\n    'balance': to_von(1000000, 'ether'),\n    'storage': {},\n    'code': b'',\n    'nonce': 0,\n}\n```\n\nFor Example, to create 3 test accounts, each with a balance of 100 ETH each: \n\n```python\n>>> from platon_tester import PlatonTester, PyEVMBackend\n>>>  from platon_utils import to_von\n\n>>> state_overrides = {'balance': to_von(100, 'ether')}\n>>> custom_genesis_state = PyEVMBackend._generate_genesis_state(overrides=state_overrides, num_accounts=3)\n\n# Then pass the generated `custom_genesis_state` `dict` to the backend's `__init__`\n\n>>> pyevm_backend = PyEVMBackend(genesis_state=custom_genesis_state)\n>>> t = PlatonTester(backend=pyevm_backend)\n```\n\n\n### Implementing Custom Backends\n\nThe base class `platon_tester.backends.base.BaseChainBackend` is the recommended\nbase class to begin with if you wish to write your own backend.  \n\nDetails on implementation are beyond the scope of this document.\n\n\n## Data Formats\n\nPlaton tester uses two formats for data.  \n\n* The *normal* format is the data format the is expected as input arguments to all `PlatonTester` methods as well as the return types from all method calls.\n* The *canonical* format is the data format that is used internally by the backend class.\n\nPlaton tester enforces strict validation rules on these formats.\n\n### Canonical Formats\n\nThe canonical format is intended for low level handling by backends.\n\n* 32 byte hashes: `bytes` of length 32\n* Arbitrary length strings: `bytes`\n* Addresses: `bytes` of length 20\n* Integers: `int`\n* Array Types: `tuple`\n\n### Normal Formats\n\nThe normal format is intended for use by end users.\n\n* 32 byte hashes: `0x` prefixed hexidecimal encoded text strings (not byte strings)\n* Arbitrary length strings: `0x` prefixed hexidecimal encoded text strings (not byte strings)\n* Addresses: `0x` prefixed and EIP55 checksummed hexidecimal encoded text strings (not byte strings)\n* Integers: `int`\n* Array Types: `tuple`\n\n\n## Normalization and Validation\n\n> Beware! Here there be dragons...  This section of the documentation is only\n> relevant if you intend to build tooling on top of this library.\n\nThe platon tester provides strong guarantees that backends can be swapped out\nseamlessly without effecting the data formats of both the input arguments and\nreturn values.  This is accomplished using a two step process of strict\n*normalization* and *validation*.\n\nAll inputs to the methods of the `PlatonTester` are first validated then\nnormalized to a *canonical* format.  Return values are put through this process\nas well, first validating the data returned by the backend, and then\nnormalizing it from the *canonical* format to the *normal* form before being\nreturned.\n\n\n<a id=\"normalization\"></a>\n### Normalization\n\nThe `PlatonTester` delegates normalization to whatever `normalizer` was\npassed in during instantiation.  If no value was provided, the default\nnormalizer will be used from\n`platon_tester.normalization.default.DefaultNormalizer`.\n\nThe specifics of this object are beyong the scope of this document.\n\n<a id=\"validation\"></a>\n### Validation\n\nThe `PlatonTester` delegates validation to whatever `validator` was\npassed in during instantiation.  If no value was provided, the default\nvalidator will be used from\n`platon_tester.validation.default.DefaultValidator`.\n\nThe specifics of this object are beyong the scope of this document.\n\n\n# Use with Web3.py\n\nSee the [web3.py documentation](http://web3py.readthedocs.io/en/latest/) for\ninformation on the `PlatonTester` provider which integrates with this\nlibrary.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/platonnetwork/platon-tester",
    "keywords": "platon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "platon-tester",
    "package_url": "https://pypi.org/project/platon-tester/",
    "platform": null,
    "project_url": "https://pypi.org/project/platon-tester/",
    "project_urls": {
      "Homepage": "https://github.com/platonnetwork/platon-tester"
    },
    "release_url": "https://pypi.org/project/platon-tester/1.2.0/",
    "requires_dist": [
      "platon-abi (>=1.2.0)",
      "platon-keys (>=1.2.0)",
      "platon-utils (>=1.2.0)",
      "rlp (<3,>=1.1.0)",
      "semantic-version (<3.0.0,>=2.6.0)",
      "bumpversion (<1.0.0,>=0.5.3) ; extra == 'dev'",
      "tox (<3.0.0,>=2.9.1) ; extra == 'dev'",
      "wheel (<1.0.0,>=0.30.0) ; extra == 'dev'",
      "pytest (<5.0.0,>=4.4.0) ; extra == 'dev'",
      "pytest-xdist (<2,>=1.22.2) ; extra == 'dev'",
      "platon-hash[pycryptodome] (>=1.2.0) ; extra == 'dev'",
      "py-evm (==0.4.0a4) ; extra == 'dev'",
      "flake8 (<4.0.0,>=3.5.0) ; extra == 'dev'",
      "platon-hash[pysha3] (<1.0.0,>=0.1.4) ; (implementation_name == \"cpython\") and extra == 'dev'",
      "platon-hash[pycryptodome] (<1.0.0,>=0.1.4) ; (implementation_name == \"pypy\") and extra == 'dev'",
      "flake8 (<4.0.0,>=3.5.0) ; extra == 'lint'",
      "py-evm (==0.4.0a4) ; extra == 'py-evm'",
      "platon-hash[pysha3] (<1.0.0,>=0.1.4) ; (implementation_name == \"cpython\") and extra == 'py-evm'",
      "platon-hash[pycryptodome] (<1.0.0,>=0.1.4) ; (implementation_name == \"pypy\") and extra == 'py-evm'",
      "py-evm (==0.4.0a4) ; extra == 'pyevm'",
      "platon-hash[pysha3] (<1.0.0,>=0.1.4) ; (implementation_name == \"cpython\") and extra == 'pyevm'",
      "platon-hash[pycryptodome] (<1.0.0,>=0.1.4) ; (implementation_name == \"pypy\") and extra == 'pyevm'",
      "pytest (<5.0.0,>=4.4.0) ; extra == 'test'",
      "pytest-xdist (<2,>=1.22.2) ; extra == 'test'",
      "platon-hash[pycryptodome] (>=1.2.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.6.8,<4",
    "summary": "Tools for testing Platon applications.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16440538,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfa51fbfa161aee945f318e9592d69327d05af0474fd73ab0c8c0fd76a32eef6",
          "md5": "0c5880cbf844c58417d39e1e1e33e6de",
          "sha256": "27b64638b82acca25c9cec7d02f84ba054f2bc58d11b95de1157e182d658d875"
        },
        "downloads": -1,
        "filename": "platon_tester-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c5880cbf844c58417d39e1e1e33e6de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8,<4",
        "size": 59849,
        "upload_time": "2022-06-01T06:49:07",
        "upload_time_iso_8601": "2022-06-01T06:49:07.000185Z",
        "url": "https://files.pythonhosted.org/packages/bf/a5/1fbfa161aee945f318e9592d69327d05af0474fd73ab0c8c0fd76a32eef6/platon_tester-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0fb8a5db939c68b140e30ca9e68d53fdad3ed87bcc0086bfc93930feb9e50f2",
          "md5": "75665ef4d71afc7e0d1c7691531c0ff1",
          "sha256": "da0308f9490aef9a44a9e1b0f9d7be778f31dd48c9588ea599059d2567a1b2c1"
        },
        "downloads": -1,
        "filename": "platon-tester-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75665ef4d71afc7e0d1c7691531c0ff1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8,<4",
        "size": 64062,
        "upload_time": "2022-06-01T06:49:09",
        "upload_time_iso_8601": "2022-06-01T06:49:09.507717Z",
        "url": "https://files.pythonhosted.org/packages/d0/fb/8a5db939c68b140e30ca9e68d53fdad3ed87bcc0086bfc93930feb9e50f2/platon-tester-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfa51fbfa161aee945f318e9592d69327d05af0474fd73ab0c8c0fd76a32eef6",
        "md5": "0c5880cbf844c58417d39e1e1e33e6de",
        "sha256": "27b64638b82acca25c9cec7d02f84ba054f2bc58d11b95de1157e182d658d875"
      },
      "downloads": -1,
      "filename": "platon_tester-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c5880cbf844c58417d39e1e1e33e6de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.8,<4",
      "size": 59849,
      "upload_time": "2022-06-01T06:49:07",
      "upload_time_iso_8601": "2022-06-01T06:49:07.000185Z",
      "url": "https://files.pythonhosted.org/packages/bf/a5/1fbfa161aee945f318e9592d69327d05af0474fd73ab0c8c0fd76a32eef6/platon_tester-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0fb8a5db939c68b140e30ca9e68d53fdad3ed87bcc0086bfc93930feb9e50f2",
        "md5": "75665ef4d71afc7e0d1c7691531c0ff1",
        "sha256": "da0308f9490aef9a44a9e1b0f9d7be778f31dd48c9588ea599059d2567a1b2c1"
      },
      "downloads": -1,
      "filename": "platon-tester-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75665ef4d71afc7e0d1c7691531c0ff1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.8,<4",
      "size": 64062,
      "upload_time": "2022-06-01T06:49:09",
      "upload_time_iso_8601": "2022-06-01T06:49:09.507717Z",
      "url": "https://files.pythonhosted.org/packages/d0/fb/8a5db939c68b140e30ca9e68d53fdad3ed87bcc0086bfc93930feb9e50f2/platon-tester-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}