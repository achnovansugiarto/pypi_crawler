{
  "info": {
    "author": "Jean O. Toilliez",
    "author_email": "jeantoilliez@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Hydrology"
    ],
    "description": "# Python Sea Level Rise (sealevelrise)\n`sealevelrise` is simple Python package designed to aggregate, load, and display sea level rise projectsion from multiple sources.\n\n## What SLR Does\n`sealevelrise` provides convenient classes and methods to perform routine tasks most commmonly\nencountered by practicioners in the civil industry:\n\n* Load sea-level rise projections for a specific location using builtin scenarios or from\nor a variety of APIs and methods\n* Display trajectories over time as plots or tables\n* Evaluate sea-level rise offset by a certain horizon date\n* Compare risk-based sea-level rise trajectories\n* Compare historical and future trajectories\n* Convert units and modify reference water levels\n* Combine projections with historical trends retrieved from NOAA API\n\n### Basic Structure\nSLR relies on three classes to organize SLR data:\n\n* `SLRProjections` contains a collection of `Scenario` items for a given location (e.g., a city or a state)\n* `Scenario` contains `Data` describing a specific SLR trajectory\n* `Data` contains the timeline, units, and values for that SLR trajectory\n\nThe class hierarchy is illustrated in the Class Diagram, below.\n\n```mermaid\nclassDiagram\n    class Data\n    Data : +np.array x\n    Data : +np.array y\n    Data : +str units\n    Data : +convert()\n\n    class Scenario\n    Scenario : +string description\n    Scenario : +string short_name\n    Scenario : +float baseline_year\n    Scenario : +Data data\n    Scenario : +str units\n    Scenario : +dataframe() DataFrame\n    Scenario : +by_horizon_year() float\n\n    class SLRProjections\n    SLRProjections : +tuple shape\n    SLRProjections : +str location_name\n    SLRProjections : +scenarios [Scenario]\n    SLRProjections : +str station_ID\n    SLRProjections : +str issuer\n    SLRProjections : +pd.DataFrame dataframe\n    SLRProjections : +from_location() SLRProjections\n    SLRProjections : +show_all_available_locations() list\n    SLRProjections : +by_horizon_year() array\n    SLRProjections : +convert() array\n    SLRProjections : +plot() Axes\n    \n\n    Data \"1\" --* \"1\" Scenario\n    Scenario \"*\" --* \"1\" SLRProjections\n```\n\n### Builtin Scenarios and Online Sources\nScenarios can be loaded from a variety of sources including:\n\n* use one of the many builtin scenarios (see under `\\data\\scenarios.json`)\n* invoke NOAA API for the latest set of projections\n\n### Extensibility\n\nAdd your own custom builtin scenarios by modifying and contributing to the `scenarios.json` file.\n\n## Installation\nThe preferred way is to pip install directly from GitHub.com into a virtual environment:\n\n```python\n>>> python -m pip install <absolute_cloned_repo_root_directory>\n```\n\n## Quickstart (Jupyter)\n\nSLR provides a very easy way to manipulate sea-level rise scenario datasets. The SLR package was built with convenience in mind and is designed to facilite operations commonly encountered when dealing with sea-level rise projections at specific locations. It is primarily designed to be used within Jupyter and is geared toward practitioners who need to publish their findings in reports.\n\n### Importing SLR\nAssuming you installed the package or appended to PYTHONPATH, all that remains to do is to import the package:\n\n```python\n>>> import sealevelrise\n```\n\n### Show All Builtin Scenarios\nFrom that point on, we can list all locations available in the `scenarios.json` file: these are as many `SLRProjections` items:\n```python\n>>> sealevelrise.SLRProjections.show_all_builtin_scenarios(format='list')\n```\n\nThe locations can be displayed as a `pandas.Dataframe` for further manipulation:\n```python\n>>> sealevelrise.SLRProjections.show_all_builtin_scenarios(format='dataframe')\n```\n\n### Manipulating SLR Scenarios\nLet's load a `SLRProjections` by invoking a builtin location:\n```python\n>>> sf = sealevelrise.SLRProjections.from_location_or_key(\n    location_or_key=\"San Francisco, CA\"\n)\n```\n\nWe could do the same using index notation:\n```python\n>>> sf = sealevelrise.SLRProjections.from_index(index=1)\n```\n\nOr we could do the same thing using a key from the `scenarios.json` file:\n```python\n>>> sf = sealevelrise.SLRProjections.from_key(key=\"cocat-2018-9414290\")\n```\n\nAll the SLR projections contained within the `SLRProjections` can be displayed in iPython and copy/pasted into a report\n```python\n>>> sf.dataframe\n```\n\n### Converting Units\nIn some cases, units may need to be converted. `SLR` offers on-the-fly capabilities for converting `Data` to any of the allowable units. For example:\n\n```python\n>>> sf.convert(to_units='in')\n```\n\nThe conversion takes place in-place. On-the-fly conversion is not (yet) supported.\n\n### Visualization\nWe can plot `Scenario` items within a `SLRProjections` right away: all Scenario items are\nplotted automatically by default.\n\n```python\n>>> sf.plot()\n```\n\nWe can also combine commands. In this case, let's convert to feet for easier \ninterpretation and let's add a target date to show on the plot.\n\n```python\n>>> sf.convert(to_units='ft')\n>>> sf.plot(horizon_year=2075)\n>>> plt.tight_layout()\n```\nHere is what this should look like:\n\n![projections](https://user-images.githubusercontent.com/46502166/143791203-32a194a6-169a-4bb7-81e0-087fb889ffcd.png)\n\nBy default, all `Scenario` items within a given `SLRProjections` will be plotted. \nTo select specific `Scenario` items see Section **Drilling Into Specific Scenarios** below.\n\n### Calculating Projections by a Certain Date\nWe can calculate the effective SLR projections by a certain date, e.g.:\n\n```python\nsf.by_horizon_year(2075, merge=False)\n```\n\nWe can also choose to merge that projection into the resultant dataframe, for presentation purposes. Note that the `SLRProjections` item is not affected by the merging operation, it is only for displaying purposes.\n\n```python\nsf.by_horizon_year(horizon_year=2075, merge=True)\n```\n\n### Drilling Into Specific Scenarios\nEach `SLRProjections` item contains one or more `Scenario` items which can be conveniently retrieved using index notation:\n\n```python\nsf_scenario = sf[1]\nsf_scenario\n```\n\nAnd here is what it should look like:\n\n```\nScenario 'Medium Risk', values are given in in and years range from 2030 to 2100\n```\n\nThis allows to \"drill down\" into the scenarios. Let's return to our prior example of visualization, and let's manipulate a specific scenario:\n\n```python\n# Display a base figure using the builtin method\nax = sf.plot(horizon_year=2075)\n# Highlight the specific Scenario item retained for design\nax.plot(sf_scenario.data.x, sf_scenario.data.y, c='yellow', label='Selected for design', lw=10, alpha=.65)\n# Use the builtin class method to estimate SLR by the horizon year\nax.axhline(y=sf_scenario.by_horizon_year(horizon_year=2075), c='k', ls='--', lw=1)\n# Update the legend\nplt.legend()\nplt.tight_layout()\n```\n\nHere is what this should now look like:\n\n![projections-plus](https://user-images.githubusercontent.com/46502166/143791670-ebfab835-3084-44e6-bcfb-a770f001c4ee.png)\n\n### Comparing with the Historical Rate **New**\nYou can attempt to retrieve the historical sea-level rise from NOAA servers. To do that, simply create a new `HistoricalSLR` instance:\n\n```python\n>>> HistoricalSLR.from_station(id=<your_NOAA_station_ID>)\n```\n\n## Customizing the `scenarios.json` File\n\nSLR works by loading a JSON file located under `.\\data\\scenarios.json`. The format of the file mimics the structure of `SLRProjections`, `Scenario`, and `Data` class items. An example is shown for San Francisco, CA. The data was extracted from the 2018 State of California Sea-level Rise Guidance document published by the Ocean Council. SLR is built upon that publication but can be used to handle other guidelines, as long as the same nomenclature is used.\n\n### Basic Structure\nThe structure of the JSON file mimics the classes used in SLR. An extract of the file is shown below:\n\n```json\n{\n    \"San Francisco\": {\n        \"description\": \"San Francisco, CA\",\n        \"station ID (CO-OPS)\": \"9414290\",\n        \"scenarios\": [\n            {\n                \"description\": \"High Emission, Low Risk (Likely Range)\",\n                \"short name\": \"Low Risk\",\n                \"units\": \"ft\",\n                \"probability (CDF)\": 0.83,\n                \"baseline year\": 2000,\n                \"data\": {\n                    \"x\": [\n                        2030,\n                        2040,\n                        2050,\n                        2060,\n                        2070,\n                        2080,\n                        2090,\n                        2100\n                    ],\n                    \"y\": [\n                        0.5,\n                        0.8,\n                        1.1,\n                        1.5,\n                        1.9,\n                        2.4,\n                        2.9,\n                        3.4\n                    ]\n                }\n            },\n            {\n                \"description\": \"High Emission, Medium-High Risk (1-in-200 Chance)\",\n                \"short name\": \"Medium Risk\",\n                \"units\": \"ft\",\n                \"probability (CDF)\": 0.995,\n                \"baseline year\": 2000,\n                \"data\": {\n                    \"x\": [\n                        2030,\n                        2040,\n                        2050,\n                        2060,\n                        2070,\n                        2080,\n                        2090,\n                        2100\n                    ],\n                    \"y\": [\n                        0.8,\n                        1.3,\n                        1.9,\n                        2.6,\n                        3.5,\n                        4.5,\n                        5.6,\n                        6.9\n                    ]\n                }\n            },\n            {\n                \"description\": \"High Emission, Extreme Risk (H++ Scenario)\",\n                \"short name\": \"Extreme Risk\",\n                \"units\": \"ft\",\n                \"probability (CDF)\": null,\n                \"baseline year\": 2000,\n                \"data\": {\n                    \"x\": [\n                        2030,\n                        2040,\n                        2050,\n                        2060,\n                        2070,\n                        2080,\n                        2090,\n                        2100\n                    ],\n                    \"y\": [\n                        1.0,\n                        1.8,\n                        2.7,\n                        3.9,\n                        5.2,\n                        6.6,\n                        8.3,\n                        10.2\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n### Adding New Locations and Projections\n\nNew locations can be added using the same nomenclature. Currently, the following fields are implemented:\n\n* \"ID\": a unique key for each `SLRProjections` item\n  - \"location name\": the location for these SLR scenarios, e.g., \"San Francisco, CA\"; a unique location defines a given `SLRProjections`\n  - \"station ID (CO-OPS)\": the NOAA or CO-OPS identification string for the location, if available, e.g, \"9414290\", a unique location defines a given `SLRProjections`\n  - \"scenarios\": an array of JSON items containing specific `Scenario` items\n\nEach `Scenario` item consists of the following:\n\n* description: describes the `Scenario`, e.g. \"Extreme High\"\n* short name: a short description of the Scenario, used in plots for example\n* units: can only be one of the allowable values (see below section)\n* probability: a number specifying the probability (CDF) of the `Scenario`, 0 to 1.\n* baseline year: the value for the baseline year for the `Scenario`\n* data: dict, a dictionary representing the `Data` item, itself comprising two elements:\n    - \"x\" : an array containing the years where projections are provided\n    - \"y\" : an array containing the values for sea-level rise at these years, in the units referenced above\n\n### Allowable Units\n\nSupported units are limited to the following:\n\n* 'ft' : feet (US)\n* 'm' : meters\n* 'cm' : centimeters\n* 'in' : inches\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jtoilliez/slr",
    "keywords": "sea level rise,climate,sustainability,NOAA,datums,water,risk,asset management,coastal,ocean,marine,environmental,engineering",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sealevelrise",
    "package_url": "https://pypi.org/project/sealevelrise/",
    "platform": null,
    "project_url": "https://pypi.org/project/sealevelrise/",
    "project_urls": {
      "GitHub": "https://github.com/jtoilliez/slr",
      "Homepage": "https://github.com/jtoilliez/slr",
      "PyPI": "https://pypi.org/project/sealevelrise/"
    },
    "release_url": "https://pypi.org/project/sealevelrise/0.1.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib",
      "pathlib",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "jupyter ; extra == 'dev'",
      "black ; extra == 'dev'",
      "wheel ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "Small utility for fetching, and manipulating Sea Level Rise Projections from various sources for engineering calculations",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13482656,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "238bf760dee3c9480a756cb36ff18986d983d8f6100fa56b42415d18cb6d7694",
          "md5": "41aa7e9d662bb9180e79fb06db08f0c4",
          "sha256": "217400258157490bd15a5bc36d5aa0718736b3f9322aa22bb119e3253a2bf7c5"
        },
        "downloads": -1,
        "filename": "sealevelrise-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41aa7e9d662bb9180e79fb06db08f0c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 20748,
        "upload_time": "2022-04-11T18:38:24",
        "upload_time_iso_8601": "2022-04-11T18:38:24.798259Z",
        "url": "https://files.pythonhosted.org/packages/23/8b/f760dee3c9480a756cb36ff18986d983d8f6100fa56b42415d18cb6d7694/sealevelrise-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00bf43a6b6f35a66259afca8d10670f7fe0980f22407e3c1ca2d2a0f5ef15301",
          "md5": "60e6d92b33221b0bb626a79d8f276177",
          "sha256": "3ea3853bf005fc10e5a02e75c3fe472ec360506210d14e77d7fe623449c3528f"
        },
        "downloads": -1,
        "filename": "sealevelrise-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60e6d92b33221b0bb626a79d8f276177",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21027,
        "upload_time": "2022-04-11T18:38:26",
        "upload_time_iso_8601": "2022-04-11T18:38:26.853873Z",
        "url": "https://files.pythonhosted.org/packages/00/bf/43a6b6f35a66259afca8d10670f7fe0980f22407e3c1ca2d2a0f5ef15301/sealevelrise-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c6cafee24eada678cd4b67eca2fcd140667dfbe29aad382f93d1802f4af0b7b",
          "md5": "fe3a727744a8dabefb262bc67e85f8b7",
          "sha256": "05fdc515c12bac0304b6fe07e9e0fa0933f2b5a2c2e65e5b978dc2f4dc306cb3"
        },
        "downloads": -1,
        "filename": "sealevelrise-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe3a727744a8dabefb262bc67e85f8b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 20993,
        "upload_time": "2022-04-11T19:03:14",
        "upload_time_iso_8601": "2022-04-11T19:03:14.882192Z",
        "url": "https://files.pythonhosted.org/packages/4c/6c/afee24eada678cd4b67eca2fcd140667dfbe29aad382f93d1802f4af0b7b/sealevelrise-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "308f3c1d3d778f78519cd50d41b961b8ba1e2edd697caeae6171d921ebff5047",
          "md5": "29580db03be986b8d03933e69206886b",
          "sha256": "6d6c484be4851ad1e86a7e4201595455395e3d8c126c17fd3bff91a84b4d4ac7"
        },
        "downloads": -1,
        "filename": "sealevelrise-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29580db03be986b8d03933e69206886b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21769,
        "upload_time": "2022-04-11T19:03:16",
        "upload_time_iso_8601": "2022-04-11T19:03:16.861870Z",
        "url": "https://files.pythonhosted.org/packages/30/8f/3c1d3d778f78519cd50d41b961b8ba1e2edd697caeae6171d921ebff5047/sealevelrise-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c6cafee24eada678cd4b67eca2fcd140667dfbe29aad382f93d1802f4af0b7b",
        "md5": "fe3a727744a8dabefb262bc67e85f8b7",
        "sha256": "05fdc515c12bac0304b6fe07e9e0fa0933f2b5a2c2e65e5b978dc2f4dc306cb3"
      },
      "downloads": -1,
      "filename": "sealevelrise-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe3a727744a8dabefb262bc67e85f8b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 20993,
      "upload_time": "2022-04-11T19:03:14",
      "upload_time_iso_8601": "2022-04-11T19:03:14.882192Z",
      "url": "https://files.pythonhosted.org/packages/4c/6c/afee24eada678cd4b67eca2fcd140667dfbe29aad382f93d1802f4af0b7b/sealevelrise-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "308f3c1d3d778f78519cd50d41b961b8ba1e2edd697caeae6171d921ebff5047",
        "md5": "29580db03be986b8d03933e69206886b",
        "sha256": "6d6c484be4851ad1e86a7e4201595455395e3d8c126c17fd3bff91a84b4d4ac7"
      },
      "downloads": -1,
      "filename": "sealevelrise-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "29580db03be986b8d03933e69206886b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 21769,
      "upload_time": "2022-04-11T19:03:16",
      "upload_time_iso_8601": "2022-04-11T19:03:16.861870Z",
      "url": "https://files.pythonhosted.org/packages/30/8f/3c1d3d778f78519cd50d41b961b8ba1e2edd697caeae6171d921ebff5047/sealevelrise-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}