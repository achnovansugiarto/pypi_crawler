{
  "info": {
    "author": "libcommon",
    "author_email": "libcommon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cache-py\n\n## Overview\n\nCaches are useful as temporary, fast-access datastores for API responses, data computed with complex calculations, and\nany other kind of data that's relatively expensive to retrieve/compute. `cache-py` is a Python library consisting of\na simple cache interface (base class), implementations of common caches using this interface, and a general purpose\nhashing function for Python objects. All implementations are currently local and in-memory, though one could easily use the interface\nto implement file or API-based caches.\n\n## Installation\n\n### Install from PyPi (preferred method)\n\n```bash\npip install lc-cache\n```\n\n### Install from GitHub with Pip\n\n```bash\npip install git+https://github.com/libcommon/cache-py.git@vx.x.x#egg=lc_cache\n```\n\nwhere `x.x.x` is the version you want to download.\n\n## Install by Manual Download\n\nTo download the source distribution and/or wheel files, navigate to\n`https://github.com/libcommon/cache-py/tree/releases/vx.x.x/dist`, where `x.x.x` is the version you want to install,\nand download either via the UI or with a tool like wget. Then to install run:\n\n```bash\npip install <downloaded file>\n```\n\nDo _not_ change the name of the file after downloading, as Pip requires a specific naming convention for installation files.\n\n## Dependencies\n\n`cache-py` does not have external dependencies. Only Python versions >= 3.6 are officially supported.\n\n## Getting Started\n\nIf you simply need to store values and later check for their presence, but don't necessarily care about retrieving the values themselves, use the `HashsetCache`.\n\n```python\nimport random\n\nfrom lc_cache import HashsetCache\n\ndef main() -> int:\n    # Create the cache\n    cache = HashsetCache()\n\n    # Insert some random values into the cache\n    for _ in range(10):\n        cache.insert(random.randrange(0, 10))\n\n    # Check for their presence\n    for i in range(10):\n        if cache.check(i):\n            print(\"Encountered value\", i)\n\n    return 0\n```\n\nIf you need to retrieve values later on, and have a key to associate them with, use the `HashmapCache`. Below is an implementation\nof `functools.lru_cache`, though it is simply a reference. Do not use this implementation as it is not thread-safe, and\nthe `functools` version has some optimizations that likely make it faster.\n\n```python\nfrom functools import wraps\nfrom typing import Any, Callable\n\nfrom lc_cache import HashmapCache, gen_python_hash\n\n_CACHE = HashmapCache()\n\ndef lru_cache(f: Callable[..., Any]) -> Callable[..., Any]:\n    @wraps(f)\n    def wrapper(*args, **kwargs) -> Any:\n        args_hash = hash((gen_python_hash(args), gen_python_hash(kwargs)))\n        # NOTE: Have to use check here because a cached value may be None\n        if _CACHE.check(args_hash):\n            return _CACHE.get(args_hash)\n        return f(*args, **kwargs)\n    return wrapper\n```\n\nThe `SizedHashmapCache` and `SizedLRUCache` classes may be useful in long-running processes where you want to cap the\nnumber of items in the cache.\n\n## Use Case\n\nThe cache interface class, `Cache`, defines a simple API for manipulating the underlying storage object(s):\n\n    * `check`: check if a value is present in the cache\n    * `insert`: add a value to the cache, or update an existing one\n    * `get`: get a value from the cache, if it exists\n    * `remove`: remove a value from the cache, if it exists\n    * `clear`: clear the cache\n    * `iter`: returns a [Generator](https://wiki.python.org/moin/Generators) over the values in the dictionary\n\nNote that the word \"value\" here is used loosely, and does not refer to a value in a Python dictionary.  That being said,\nPython dictionaries are commonly used to cache values. The `HashmapCache` has a regular Python dictionary as the underlying\nstorage object, and thus can be used just like a dictionary. Similarly, The `SizedHashmapCache` and `SizedLRUCache` cache\nclasses are also backed by dictionaries, but with some extra constraints on cache size and logic for removing items.\n\nIf your use case isn't complicated, and a simple dictionary will suffice, then there's no need to use classes from this library.\nHowever, if you need something like an LRU cache, or if you're developing an MVP but will need a more complex cache implementation\nlater on (and thus want a consistent API), this library can be helpful.\n\n## Contributing/Suggestions\n\nContributions and suggestions are welcome! To make a feature request, report a bug, or otherwise comment on existing\nfunctionality, please [file an issue](https://github.com/libcommon/cache-py/issues/new/choose). For contributions please\n[submit a PR](https://github.com/libcommon/cache-py/compare), but make sure to lint, type-check, and test your code\nbefore doing so. Thanks in advance!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/libcommon/cache-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc-cache",
    "package_url": "https://pypi.org/project/lc-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc-cache/",
    "project_urls": {
      "Homepage": "https://github.com/libcommon/cache-py",
      "Issue Tracker": "https://github.com/libcommon/cache-py/issues",
      "Releases": "https://github.com/libcommon/cache-py/releases"
    },
    "release_url": "https://pypi.org/project/lc-cache/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7221302,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f505deb9280c3ee9d7e85c4a9c74cae5ed631d4c45c28b7f57be311493cee45",
          "md5": "f45abae5c90b47147841dfc5b55eadd3",
          "sha256": "a1d707d060f5d4356fae3e805020d65898a0e08ae43f604e6372b72e0430ebde"
        },
        "downloads": -1,
        "filename": "lc_cache-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f45abae5c90b47147841dfc5b55eadd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6959,
        "upload_time": "2020-05-12T05:48:35",
        "upload_time_iso_8601": "2020-05-12T05:48:35.536262Z",
        "url": "https://files.pythonhosted.org/packages/5f/50/5deb9280c3ee9d7e85c4a9c74cae5ed631d4c45c28b7f57be311493cee45/lc_cache-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d83c8d6337f081d97f2cd0addf2946d0acbcd72da2c0e2be18e3f48ef71d50ac",
          "md5": "7edb2eb96c1bd7eb17e9c6b1a67e5efd",
          "sha256": "b78360953b26e92b7ea38a209f85c090d43e8b1ebe56abd16d0ac3ebc9516ae2"
        },
        "downloads": -1,
        "filename": "lc_cache-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7edb2eb96c1bd7eb17e9c6b1a67e5efd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5448,
        "upload_time": "2020-05-12T05:48:37",
        "upload_time_iso_8601": "2020-05-12T05:48:37.594545Z",
        "url": "https://files.pythonhosted.org/packages/d8/3c/8d6337f081d97f2cd0addf2946d0acbcd72da2c0e2be18e3f48ef71d50ac/lc_cache-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f505deb9280c3ee9d7e85c4a9c74cae5ed631d4c45c28b7f57be311493cee45",
        "md5": "f45abae5c90b47147841dfc5b55eadd3",
        "sha256": "a1d707d060f5d4356fae3e805020d65898a0e08ae43f604e6372b72e0430ebde"
      },
      "downloads": -1,
      "filename": "lc_cache-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f45abae5c90b47147841dfc5b55eadd3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6959,
      "upload_time": "2020-05-12T05:48:35",
      "upload_time_iso_8601": "2020-05-12T05:48:35.536262Z",
      "url": "https://files.pythonhosted.org/packages/5f/50/5deb9280c3ee9d7e85c4a9c74cae5ed631d4c45c28b7f57be311493cee45/lc_cache-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d83c8d6337f081d97f2cd0addf2946d0acbcd72da2c0e2be18e3f48ef71d50ac",
        "md5": "7edb2eb96c1bd7eb17e9c6b1a67e5efd",
        "sha256": "b78360953b26e92b7ea38a209f85c090d43e8b1ebe56abd16d0ac3ebc9516ae2"
      },
      "downloads": -1,
      "filename": "lc_cache-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7edb2eb96c1bd7eb17e9c6b1a67e5efd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5448,
      "upload_time": "2020-05-12T05:48:37",
      "upload_time_iso_8601": "2020-05-12T05:48:37.594545Z",
      "url": "https://files.pythonhosted.org/packages/d8/3c/8d6337f081d97f2cd0addf2946d0acbcd72da2c0e2be18e3f48ef71d50ac/lc_cache-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}