{
  "info": {
    "author": "Frank Guibert",
    "author_email": "frank.guibert.work@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![example workflow](https://github.com/colon3ltocard/pyindexedtar/actions/workflows/build.yml/badge.svg)\n# indexedtar\n\nAn indexed Tar for big data archives featuring fast random access with an index bundled inside the tarfile.\n\nThe use case is to retrieve members of a \"many members\" tar archive without seeking\nfrom one member to the next.\n\n* [Goals](https://github.com/colon3ltocard/pyindexedtar#goals)\n* [Installation](https://github.com/colon3ltocard/pyindexedtar#installation)\n* [Usage of the `itar` cli](https://github.com/colon3ltocard/pyindexedtar#usage-of-the-itar-cli)\n* [Usage of the `IndexedTar` class](https://github.com/colon3ltocard/pyindexedtar#usage-of-the-indexedtar-class)\n* [Benchmark](https://github.com/colon3ltocard/pyindexedtar#benchmark)\n* [Concept](https://github.com/colon3ltocard/pyindexedtar#concept)\n\n# Goals\n\nWe constrained this code as follows:\n\n* Produce archives fully compliant with the tar specification to\npreserve compatibility with existing tools\n\n* No additional index file, the archive should contain the index and be 'all inclusive'\n\n* Use only the python standard library\n\n# Installation\n\nUsing pypi.\n\n```\npip install indexedtar\n```\n\nFrom the sources after cloning this repo.\n\n```\npython setup.py install\n```\n\nNote: when using pyenv I needed to relaunch my shell and virtualenv post-install to have the **itar** cli available.\n\n# Launching unit tests\n\nLinting and unit tests require additional dependencies.\n\n```shell\n$ pip install -r requirements.txt\n$ flake8 --max-line-length 120 indexedtar\n$ black --check indexedtar\n$ export PYTHONPATH=\".\"; py.test --cov=indexedtar tests\n...                                                                                                                     [ 88%]\ntests/test_itar.py .                                                                                                                                                                      [100%]\n\n---------- coverage: platform linux, python 3.8.12-final-0 -----------\nName                     Stmts   Miss  Cover\n--------------------------------------------\nindexedtar/__init__.py     172      6    97%\nindexedtar/itar.py          37      4    89%\n--------------------------------------------\nTOTAL                      209     10    95%\n\n```\n\n# Usage of the `itar` cli\n\n```bash\nitar --help\nusage: itar [-h] [--target TARGET] [--fnmatch_filter FNMATCH_FILTER] [--output_dir OUTPUT_DIR] action archive\n\nIndexedTar build/extract utility.\n\npositional arguments:\n  action                action to perform: \"x\" for extract, \"l\" for listing, \"c\" for create, \"a\" for append\n  archive               path to archive file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --target TARGET       file or directory to add\n  --fnmatch_filter FNMATCH_FILTER\n                        fnmatch filter for listing/extracting archive members\n  --output_dir OUTPUT_DIR\n                        output directory for extraction\n```\n\nCreate an archive  with the files in the **tests/data** directory.\n\n```bash\nitar c test.tar --target tests/data\n```\n\nList archive members matching a fnmatch pattern.\n\n```bash\nitar l test.tar --fnmatch_filter \"*3h.grib2\"\n```\n\nExtract members matching a fnmatch pattern to output directory.\n\n```bash\nitar x test.tar --fnmatch_filter \"*arome*.grib2\" --output_dir out\n```\n\n# Usage of the `IndexedTar` class\n\nSee the [unit tests](https://github.com/colon3ltocard/pyindexedtar/blob/master/tests/test_indexedtar.py) for usage examples.\n\n## Create an archive.\n\n```python\nfrom indexedtar import IndexedTar\nDATA_DIR = pathlib.Path(\"/home/frank/dev/mf-models-on-s3-scraping\")\nwith IndexedTar(\"test.tar\", mode=\"x:\") as it:\n    it.add_dir(DATA_DIR)\n```\n## Get a tarmember by index\n\n```python\nwith IndexedTar(pathlib.Path(\"fat.tar\"), mode=\"r:\") as it:\n    tinfo = it.getmember_at_index(5) # get 5th member from the archive\n    print(tinfo.name)\n```\n\n## Get and extract members matching a regex or a fnmatch pattern\n\n```python\n    with IndexedTar(\"indexed.tar\", \"r:\") as it:\n\n        # find and extract members using fnmatch\n        it.extract_members(it.get_members_fnmatching(\"2021_01_26/*\"))\n\n        # find and extract members using regex\n        it.extract_members(it.get_members_re(\"^2021_02_01\"))\n\n        # extract to specific outputdir 'out'\n        it.extract_members(it.get_members_fnmatching(\"*.grib2\"), path=Path(\"out\"))\n```\n\n# Benchmark\n\n## HDD for a 2.1 GB tarfile with 6094 members\n\nWe extract the last member of the archive. See `benchmark.py`.\n\n```\n(indexenv) [frank@localhost pyindexedtar]$ python benchmark.py \n\npython IndexedTar average extraction time: 0.0156 seconds\npython Tar average extraction time: 1.5477 seconds\nGNU Tar average extraction time: 0.0476 seconds\n\n```\n## SSD NVMe with a 2.1 GB tarfile containing 6094 members\n\nReading 10 random members by name.\n\n```\npython IndexedTar average extraction time: 0.0033 seconds\npython Tar average extraction time: 0.3216 seconds\nGNU Tar average extraction time: 0.0188 seconds\n```\n\n\n## SSD NVMe with a 27 GB tarfile containing 76175 members\n\nReading 10 random members by name.\n\n```\npython IndexedTar average extraction time: 0.0442 seconds\npython Tar average extraction time: 3.9926 seconds\nGNU Tar average extraction time: 0.1675 seconds\n```\n\n# Concept\n\nThe trick here is to have a 'normal' binary file\nadded at the beginning of the tar that serves as a\npre-allocation of 3 unsigned long long to\nstore header and data offsets + the size of our index.\n\nWhen we close the archive we write the index\nas the last file in the tar and seek back to the\nlocation of the offset and size to write it.\n\nThe index itself is a json `_tar_index.json` listing\nall the files in the tar including duplicates. For each file we\nstore its tar header offset, its tar data offset and\nits tar data length.\n\n```json\n[[\"my_first_file\", 3072, 4608, 352392], [\"my_second_file\", 357376, 358912, 352392], [\"my_third_file\", 711680, 713216, 352392]]\n```\n\n```\n######\n_tar_offset.bin tar header\n-----\n_tar_offset.bin payload\nunsigned long long value1 => points to >>>>>------------------|\nunsigned long long value2 => points to index data\nunsigned long long  value3 => index len                       |\n######                                                        |\nFILE 1 - tar header                                           |\n-----                                                         |\nFILE 1 - data          <<<<<<oooooooooooooooooooooooo         |\n                                                    o         |\n....                                                o         |\n                                                    o         |\n######                                              o         |\nFILE N tar header                                   o         |\n-----                                               o         |\nFILE N data                                         o         |\n######                                              o         |\n_tar_index.json - tar header <<<<<<<<<--------------o---------|\n------                                              o\n_tar_index.json data                                o\n[[FILE_1_NAME, FILE_1_TINFO_OFFSET, FILE_1_DATA_OFFSET>, FILE_1_SIZE],\n...\n[FILE_N_NAME, FILE_N_TINFO_OFFSET, FILE_N_DATA_OFFSET, FILE_N_SIZE]]\n######\n```\n\nThis gives us the following workflow to retrieve a member 'A':\n```\nopen Indexedtar >>> read first member ( = index offset) >>> seek at index offset >>> read index >>> lookup 'A''s offset in index >>> read 'A'.\n```\n\n# Compatiblity checks\n\nOur archive stills open with the standard GNU tar cli tool or GUI 7zip client.\n\n![Archive in Ubuntu file explorer](docs/imgs/archive_in_file_explorer.png)\n\n```\n(indextarenv)$ tar -tvf fat.tar | most\n-rw-r--r-- 0/0              24 2021-09-29 23:50 _tar_offset.bin\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 0_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 1_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 2_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 3_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 4_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n-rw-r--r-- frank/frank  352392 2021-09-29 23:48 5_arpege-world_20210827_18_DLWRF_surface_acc_0-3h.grib2\n...\n```\n\n# Todo and ideas\n\n* add highwayhash (SIMD, should perform ! ) checksums for each file in the index\n* See if we could handle 'tar.gz' compressed archive using [\"IndexedGzip\"](\"https://github.com/pauldmccarthy/indexed_gzip\") ?\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/colon3ltocard/pyindexedtar",
    "keywords": "tar,indexed,archives",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "indexedtar",
    "package_url": "https://pypi.org/project/indexedtar/",
    "platform": "",
    "project_url": "https://pypi.org/project/indexedtar/",
    "project_urls": {
      "Homepage": "https://github.com/colon3ltocard/pyindexedtar"
    },
    "release_url": "https://pypi.org/project/indexedtar/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "build/search/extract_from uncompressed indexed tar archives for fast random access. The index is in the tar itself.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11604954,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "729f40037769e720a4c1503c9a1306cc27a901b42cd0342f08b74b714cfe93e1",
          "md5": "722ec87228de7aeb152075d90c71257c",
          "sha256": "644016e3afbf1c5a2353319c5a54af72500e4e57235ffb5d4fdc1edc0336ab83"
        },
        "downloads": -1,
        "filename": "indexedtar-1.0-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "722ec87228de7aeb152075d90c71257c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8890,
        "upload_time": "2021-09-28T16:33:43",
        "upload_time_iso_8601": "2021-09-28T16:33:43.142285Z",
        "url": "https://files.pythonhosted.org/packages/72/9f/40037769e720a4c1503c9a1306cc27a901b42cd0342f08b74b714cfe93e1/indexedtar-1.0-1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "I will do a proper release using semver. Apologies."
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e0e62d892ef8f7d9fbc7cb1bd8e3e4daf9b8b6cb8173fc8dd8aa8bc5fc1b1a9",
          "md5": "ec095280a9a80f38aefb28bb4d88f7f1",
          "sha256": "7cf8b93b6df3bdc7ab1603b69badfc451016b886397da9879ccb6ffd9443e979"
        },
        "downloads": -1,
        "filename": "indexedtar-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec095280a9a80f38aefb28bb4d88f7f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10159,
        "upload_time": "2021-10-01T15:02:50",
        "upload_time_iso_8601": "2021-10-01T15:02:50.482563Z",
        "url": "https://files.pythonhosted.org/packages/4e/0e/62d892ef8f7d9fbc7cb1bd8e3e4daf9b8b6cb8173fc8dd8aa8bc5fc1b1a9/indexedtar-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e0e62d892ef8f7d9fbc7cb1bd8e3e4daf9b8b6cb8173fc8dd8aa8bc5fc1b1a9",
        "md5": "ec095280a9a80f38aefb28bb4d88f7f1",
        "sha256": "7cf8b93b6df3bdc7ab1603b69badfc451016b886397da9879ccb6ffd9443e979"
      },
      "downloads": -1,
      "filename": "indexedtar-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec095280a9a80f38aefb28bb4d88f7f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10159,
      "upload_time": "2021-10-01T15:02:50",
      "upload_time_iso_8601": "2021-10-01T15:02:50.482563Z",
      "url": "https://files.pythonhosted.org/packages/4e/0e/62d892ef8f7d9fbc7cb1bd8e3e4daf9b8b6cb8173fc8dd8aa8bc5fc1b1a9/indexedtar-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}