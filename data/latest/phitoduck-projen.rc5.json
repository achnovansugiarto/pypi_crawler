{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# 📣 Welcome to `phito-projen`!\n\n------------\n\n> ⚠️ Warning\n>\n> This library is in rapid development. Expect breaking API changes.\n\nA library of Python-based `projen` components that can be used in `.projenrc.py`.\n\n## Philosophies\n\nThis project is working to implement the ideas proposed in [this RFC](https://github.com/phitoduck/project-generator-cli-poc).\n\nFor convenience, here are the philosophies laid out in the RFC:\n\n- #TemplatesAreEvil \n    - Templates get stale over time\n    - A process should exist so that projects are always up to date\n- ... but they are helpful:\n    - In the overwhelming space of Python software development, starting from an opinionated framework helps learn best practices with minimal cognitive load.\n- ... but they often lack desirable features, outside the scope of generating code:\n    - Writing/releasing production-worthy code requires infrastructure (i.e. GitHub account/repo). These\n    tools also have a non-trivial learning curve that should be automated where possible.\n- Automation eliminates avoidable errors caused by manual steps\n- The average use should not have to learn the entire Python ecosystem--thanks to abstractions.\n- The advanced user should be able to extend the abstractions; you should not need to \"grow out\" of the tool.\n- Where possible, we should avoid rebuilding what has already been built/standardized on by the community.\n- The iteration cycle should be fast:\n    - developers should be able to run builds locally\n    - processes that can be run in parallel should be run in parallel (both locally and in CI)\n- Released software and docs should be immutable. Once package `v0.0.0` is out there,\n  consumers of the software should be able to rely on the fact that it won't disappear and that the behavior\n  won't change.\n- The tool should be built with both open- and closed-source development in mind.\n- The trunk-based development branching model should have first-class support.\n- Multi-project repositories (mono-repos) have a place in modern software development, and should be supported to an extent (e.g. `frontend` and `backend` projects, or `src` and `iac` might reside in one repository)\n    - ... but the framework should encourage developers to modularize projects in separate repos as much as possible\n\n## Quick start\n\n1. `pip install phitoduck-projen`\n2. Create and execute a `.projenrc.py`\n\n### Example: Single-package Repository\n\n```python\n# .projenrc.py\n\nfrom phito_projen import PythonPackage\n\npackage = PythonPackage(\n    name=\"phitoduck-projen\",\n    module_name=\"phito_projen\",\n    install_requires=[\"projen\", \"jinja2\"],\n    version=\"0.1.0\",\n)\npackage.manifest_in.add_recursive_include(\"src/\", \"*template*\", comment=\"include template files for rendering components\")\n\npackage.synth()\n```\n\nRunning `python .projenrc.py` will yield a nicely organized Python project structured like this:\n\n```text\nphitoduck-projen/\n├── README.md\n├── pyproject.toml\n├── setup.cfg\n├── setup.py\n└── src/\n```\n\nIn this case, the `setup.cfg`, `setup.py` and `pyproject.toml` files are set to be read-only.\nThis is because these config files are meant to be an implementation detail, created by\nthe `PythonPackage` abstraction.\n\nThese read-only files can be modified by calling methods on the `PythonPackage` instance,\nor changing the parameters passed in. Calling `python .projenrc.py` again will re-generate\nthe latest `setup.cfg`, `setup.py` and `pyproject.toml` to reflect the changes.\n\nFuture (or alternative) versions of `PythonPackage` might use an entirely different package\nbuild system altogether. For example, we could generate only a `pyproject.toml` for use with `poetry` \nfor example, or a `Pipfile`, etc., and keep the build/release process the same.\n\nThis is where the power of projen for platform teams comes in!\n\nBecause developers can only modify the package via the `PythonPackage` API, we the platform team\ncan freely swap out the implementation of `PythonPackage` so long as we don't break existing\nfunctionality.\n\n### Example: Sample FastAPI Project\n\n`projen` has a concept of \"sample files\" and \"sample folders\". These are files and folders\nthat are created only if not present.\n\n`phitoduck-projen` provides a number of sample apps (and other components) that\ncan be used to create boiler projects with best practices. Here, we create\na Python package containing a sample FastAPI app.\n\n```python\n# .projenrc.py\n\nfrom python_package import PythonPackage\nfrom samples.fastapi_app import SampleFastAPIApp\n\npackage = PythonPackage(\n    name=\"phitoduck-projen\",\n    module_name=\"phito_projen\",\n    install_requires=[\"projen\", \"jinja2\"],\n    version=\"0.1.0\",\n)\n\nSampleFastAPIApp(project=package)\n\npackage.synth()\n```\n\nNow, running `python .projenrc.py` would yield something like this:\n\n```text\nphitoduck-projen\n├── pyproject.toml\n├── setup.cfg\n├── setup.py\n└── src\n    └── example_pkg\n        ├── __init__.py\n        ├── config.py\n        ├── default_constants.py\n        ├── errors.py\n        ├── main.py\n        ├── types.py\n        ├── utilities.py\n        └── web/\n```\n\n### Example: Multi-package Repository\n\nYou may have a use case that requires having multiple Python packages in a single repository.\n`projen` makes this easy:\n\n```python\n# .projenrc.py\n\nfrom projen import Project\nfrom phito_projen.python_package import PythonPackage\nfrom phito_projen.samples.fastapi_app import SampleFastAPIApp\n\nrepo = Project(name=\"demo-project\", outdir=\"demo-project\")\n\npkg = PythonPackage(\n    parent=repo,\n    name=\"example-python-package\",\n    module_name=\"example_pkg\",\n    install_requires=[\"pandas\", \"new-dependency\"],\n    additional_extras_require={\"test\": [\"pytest\"]},\n    version=\"0.0.0\",\n)\n\npkg_2 = PythonPackage(\n    parent=repo,\n    name=\"another_example-python-package\",\n    module_name=\"example_pkg_2\",\n    install_requires=[\"pandas\", \"new-dependency\"],\n    additional_extras_require={\"test\": [\"pytest\"]},\n    version=\"0.0.0\",\n)\n\nSampleFastAPIApp(project=pkg)\n\nrepo.synth()\n```\n\nRunning `python .projenrc.py` will yield this:\n\n```text\ndemo-project/\n├── another_example-python-package\n│   ├── pyproject.toml\n│   ├── setup.cfg\n│   ├── setup.py\n│   └── src/  # sample FastAPI files would be in here\n└── example-python-package\n    ├── pyproject.toml\n    ├── setup.cfg\n    ├── setup.py\n    └── src/\n```\n\nTa-da! 🎉\n\n## Roadmap\n\n- [ ] Reduce barrier to adoption by writing a CLI wizard that generates and invokes a `.projenrc.py`.\n- [ ] Create an abstract `CommentableObjectFile` base from which `YamlFile`, `IniFile`, `TomlFile` and `JsoncFile` derive.\n  These will support escape hatches like `projen`'s `ObjectFile`, but will allow for comments as well.\n- [ ] Add a `SampleSphinx` (or simply a `Sphinx`) component that can generate docs for multi-package repos.\n- [ ] Add a way to orchestrate builds and releases for multi-package repos.\n  - [ ] Make these build efficient by parallelizing anything than can be, and skipping any tasks\n    if their \"input files\" have not changed.\n- [ ] Use `projen`'s task runner system or write our own to provide a `Makefile`, `Justfile`, or other\n  task runner with useful commands for the project and any component add-ons.\n- [ ] Add more samples for items like Metaflow training DAGs with MLFlow, BentoML services, CLI tools with Typer, \n  infrastructure as code with AWS CDK/Pulumi etc.\n- [ ] Add components for the `pre-commit` framework\n- [ ] Add components for config files for code QA tools like `pylint`, `flake8`, `pytest`, `black`, etc.\n  - [ ] Add a component for `.vscode/settings.json` that promps you to fix errors from these tools as you code, rather than having to wait to run a linting task.\n- [ ] Investigate `commitizen` as a way of automatically bumping package versions and generating changelogs.\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "<Add keywords here>",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phitoduck-projen",
    "package_url": "https://pypi.org/project/phitoduck-projen/",
    "platform": null,
    "project_url": "https://pypi.org/project/phitoduck-projen/",
    "project_urls": {
      "Documentation": "https://docs.rootski.io",
      "Source": "https://github.com"
    },
    "release_url": "https://pypi.org/project/phitoduck-projen/0.1.1/",
    "requires_dist": [
      "projen",
      "jinja2",
      "importlib-metadata ; python_version < \"3.8\"",
      "pytest ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "pytest-xdist ; extra == 'all'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-xdist ; extra == 'test'"
    ],
    "requires_python": ">=3.6.*",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15310472,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8465720c68e04e1983770906f88f47486827b4c938528c2d7497160c36301da7",
          "md5": "30cd21e9d5fc9c5adf1a7a35ca34354b",
          "sha256": "ce1df7b046053ed3219a9bef2128f6d8d2a10d0e7a0e5efc0bdeaa9f909e88c1"
        },
        "downloads": -1,
        "filename": "phitoduck_projen-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30cd21e9d5fc9c5adf1a7a35ca34354b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.*",
        "size": 5513,
        "upload_time": "2022-09-30T19:18:11",
        "upload_time_iso_8601": "2022-09-30T19:18:11.873976Z",
        "url": "https://files.pythonhosted.org/packages/84/65/720c68e04e1983770906f88f47486827b4c938528c2d7497160c36301da7/phitoduck_projen-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9662023fb00a9f51ac1ef71491ef3b1159da966ce257245029bd9222d0c38d37",
          "md5": "aa31d55859b1557dbbec44253157319c",
          "sha256": "571ab4259b937bee413afb0cf0bf5f7142904e6c73be169cc940fe9434703746"
        },
        "downloads": -1,
        "filename": "phitoduck_projen-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa31d55859b1557dbbec44253157319c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.*",
        "size": 16748,
        "upload_time": "2022-09-30T21:33:53",
        "upload_time_iso_8601": "2022-09-30T21:33:53.432303Z",
        "url": "https://files.pythonhosted.org/packages/96/62/023fb00a9f51ac1ef71491ef3b1159da966ce257245029bd9222d0c38d37/phitoduck_projen-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f0596a948e4f16acfbb1150959c3fb87815b4c3955ef828a658afd26e4707d4",
          "md5": "7ae5aab8e2d60e1c68548672f74b0400",
          "sha256": "7ebc33024ba69e774b23f07387939d5ef4f74e06d11212fed3ad715a329edff3"
        },
        "downloads": -1,
        "filename": "phitoduck_projen-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ae5aab8e2d60e1c68548672f74b0400",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.*",
        "size": 19180,
        "upload_time": "2022-09-30T22:33:58",
        "upload_time_iso_8601": "2022-09-30T22:33:58.378683Z",
        "url": "https://files.pythonhosted.org/packages/6f/05/96a948e4f16acfbb1150959c3fb87815b4c3955ef828a658afd26e4707d4/phitoduck_projen-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ff2c9ec28730fc118fcda97a4330a5bbdb6b4526c8ca4804f4f3a455ea6b4d7",
          "md5": "fde3bfa5ba9026957e45decf4935c307",
          "sha256": "be4beed1ba990579f64749033a998ba202ddfb2fb41ee6a692f8118be2d43d36"
        },
        "downloads": -1,
        "filename": "phitoduck_projen-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fde3bfa5ba9026957e45decf4935c307",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.*",
        "size": 20067,
        "upload_time": "2022-10-05T08:37:30",
        "upload_time_iso_8601": "2022-10-05T08:37:30.127570Z",
        "url": "https://files.pythonhosted.org/packages/7f/f2/c9ec28730fc118fcda97a4330a5bbdb6b4526c8ca4804f4f3a455ea6b4d7/phitoduck_projen-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a60d37567cfd3de6d94d87824ebbea12f81e85f60192743817302c3bcf70151",
          "md5": "a9176a3b9cad14a505586a9aa1dfda0b",
          "sha256": "bc072a62f4f239583e188956eaafe41a94f14b1f9c441b4f17dabcbee6a5007e"
        },
        "downloads": -1,
        "filename": "phitoduck_projen-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9176a3b9cad14a505586a9aa1dfda0b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.*",
        "size": 23093,
        "upload_time": "2022-10-05T09:22:35",
        "upload_time_iso_8601": "2022-10-05T09:22:35.281718Z",
        "url": "https://files.pythonhosted.org/packages/3a/60/d37567cfd3de6d94d87824ebbea12f81e85f60192743817302c3bcf70151/phitoduck_projen-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a60d37567cfd3de6d94d87824ebbea12f81e85f60192743817302c3bcf70151",
        "md5": "a9176a3b9cad14a505586a9aa1dfda0b",
        "sha256": "bc072a62f4f239583e188956eaafe41a94f14b1f9c441b4f17dabcbee6a5007e"
      },
      "downloads": -1,
      "filename": "phitoduck_projen-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9176a3b9cad14a505586a9aa1dfda0b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.*",
      "size": 23093,
      "upload_time": "2022-10-05T09:22:35",
      "upload_time_iso_8601": "2022-10-05T09:22:35.281718Z",
      "url": "https://files.pythonhosted.org/packages/3a/60/d37567cfd3de6d94d87824ebbea12f81e85f60192743817302c3bcf70151/phitoduck_projen-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}