{
  "info": {
    "author": "Albert Feghaly, Eric Audemard, Patrick Gendron, Sebastien Lemieux",
    "author_email": "bioinformatique@iric.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\n===================================================================\nkm : a software for RNA-seq investigation using k-mer decomposition\n===================================================================\n\n+-------------------------------------------------------------+-----------------------------------------------------------------+-----------------------------------------------------------------------------+\n| .. image:: https://img.shields.io/badge/python-3.6-blue.svg | .. image:: https://travis-ci.org/iric-soft/km.svg?branch=master | .. image:: https://codecov.io/gh/iric-soft/km/branch/master/graph/badge.svg |\n|    :target: https://www.python.org/download/releases/3.6.0/ |    :target: https://travis-ci.org/iric-soft/km                  |    :target: https://codecov.io/gh/iric-soft/km/                             |\n+-------------------------------------------------------------+-----------------------------------------------------------------+-----------------------------------------------------------------------------+\n\n-------------\nIntroduction:\n-------------\n\nThis tool was developed to identify and quantify the occurence of single\nnucleotide variants, insertions, deletions and duplications in RNA-seq data.  Contrary to most tools that try to report all variants in a complete genome, here we instead propose to focus the analysis on small regions of interest.\n\nGiven a reference sequence (typically a few hundred base pairs) around a\nknown or suspected mutation in a gene of interest, all possible sequences\nthat can be be created between the two end k-mers according to the\nsequenced reads will be reported. A ratio of variant allele vs WT will be\ncomputed for each possible sequence constructed.\n\n-------\nCiting:\n-------\n* Targeted variant detection using unaligned RNA-Seq reads. Life science Alliance 2019 Aug 19;2(4); doi: https://doi.org/10.26508/lsa.201900336\n* Target variant detection in leukemia using unaligned RNA-Seq reads. bioRxiv 295808; doi: https://doi.org/10.1101/295808\n\n--------\nInstall:\n--------\n\nRecommended method - using pip:\n-------------------------------\n\n.. code:: shell\n\n  python3 -m venv $HOME/.virtualenvs/km\n  source $HOME/.virtualenvs/km/bin/activate\n  pip install --upgrade pip setuptools wheel\n  pip install km-walk\n\nAlternative method - easy install script:\n-----------------------------------------\n\n`easy_install.sh`_ will install jellyfish with python binding, km in a virtual\nenvironement, and test it. Without modification, all the code source will be\ndownloaded in your $HOME/software directory and all executable will be available\nin the virtual environement directory: $HOME/.virtualenvs/km.\n\nRequirements:\n*************\n* Python 3.6.0 or later with `pip`_ installed.\n\n.. _pip: https://pip.pypa.io/en/stable/installing/\n\nUsage:\n******\n\n* Copy/paste each line in a terminal.\n* The virtual environment needs to be loaded each time you open a new terminal, with this command:\n\n.. code:: shell\n\n  $ source $HOME/.virtualenvs/km/bin/activate\n\nTest:\n*****\n\n* 4bp insertion in NPM1\n\n.. code:: shell\n\n  $ cd [your_km_folder]\n  $ km find_mutation ./data/catalog/GRCh38/NPM1_4ins_exons_10-11utr.fa ./data/jf/02H025_NPM1.jf | km find_report -t ./data/catalog/GRCh38/NPM1_4ins_exons_10-11utr.fa\n  Sample\tRegion\tLocation\tType\tRemoved\tAdded\tAbnormal\tNormal\tRatio\tMin_coverage\tExclu_min_cov\tVariant\tTarget\tInfoVariant_sequence\tReference_sequence\n  ./data/jf/02H025_NPM1.jf\tchr5:171410540-171410543\tchr5:171410544\tITD\t0\t4 | 4\t2870.6\t3055.2\t0.484\t2428\t\t/TCTG\tNPM1_4ins_exons_10-11utr\tvs_ref\tAATTGCTTCCGGATGACTGACCAAGAGGCTATTCAAGATCTCTGTCTGGCAGTGGAGGAAGTCTCTTTAAGAAAATAGTTTAAA\tAATTGCTTCCGGATGACTGACCAAGAGGCTATTCAAGATCTCTGGCAGTGGAGGAAGTCTCTTTAAGAAAATAGTTTAAA\n  ./data/jf/02H025_NPM1.jf\t\t-\tReference\t0\t0\t0.0\t2379.0\t1.000\t2379\t\t-\tNPM1_4ins_exons_10-11utr\tvs_ref\n  # To display kmer coverage\n  $ km find_mutation ./data/catalog/GRCh38/NPM1_4ins_exons_10-11utr.fa ./data/jf/02H025_NPM1.jf -g\n\n* ITD of 75 bp\n\n.. code:: shell\n\n  $ cd [your_km_folder]\n  $ km find_mutation ./data/catalog/GRCh38/FLT3-ITD_exons_13-15.fa ./data/jf/03H116_ITD.jf | km find_report -t ./data/catalog/GRCh38/FLT3-ITD_exons_13-15.fa\n  Sample\tRegion\tLocation\tType\tRemoved\tAdded\tAbnormal\tNormal\tRatio\tMin_coverage\tExclu_min_cov\tVariant\tTarget\tInfo\tVariant_sequence\tReference_sequence\n  ./data/jf/03H116_ITD.jf\t\t-\tReference\t0\t0\t0.0\t443.0\t1.000\t912\t\t-\tFLT3-ITD_exons_13-15\tvs_ref\n  ./data/jf/03H116_ITD.jf\tchr13:28034105-28034179\tchr13:28034180\tITD\t0\t75 | 75\t417.6\t1096.7\t0.276\t443\t\t/AACTCCCATTTGAGATCATATTCATATTCTCTGAAATCAACGTAGAAGTACTCATTATCTGAGGAGCCGGTCACC\tFLT3-ITD_exons_13-15\tvs_ref\tCTTTCAGCATTTTGACGGCAACCTGGATTGAGACTCCTGTTTTGCTAATTCCATAAGCTGTTGCGTTCATCACTTTTCCAAAAGCACCTGATCCTAGTACCTTCCCAAACTCTAAATTTTCTCTTGGAAACTCCCATTTGAGATCATATTCATATTCTCTGAAATCAACGTAGAAGTACTCATTATCTGAGGAGCCGGTCACCAACTCCCATTTGAGATCATATTCATATTCTCTGAAATCAACGTAGAAGTACTCATTATCTGAGGAGCCGGTCACCTGTACCATCTGTAGCTGGCTTTCATACCTAAATTGCTTTTTGTACTTGTGACAAATTAGCAGGGTTAAAACGACAATGAAGAGGAGACAAACACCAATTGTTGCATAGAATGAGATGTTGTCTTGGATGAAAGGGAAGGGGC\tCTTTCAGCATTTTGACGGCAACCTGGATTGAGACTCCTGTTTTGCTAATTCCATAAGCTGTTGCGTTCATCACTTTTCCAAAAGCACCTGATCCTAGTACCTTCCCAAACTCTAAATTTTCTCTTGGAAACTCCCATTTGAGATCATATTCATATTCTCTGAAATCAACGTAGAAGTACTCATTATCTGAGGAGCCGGTCACCTGTACCATCTGTAGCTGGCTTTCATACCTAAATTGCTTTTTGTACTTGTGACAAATTAGCAGGGTTAAAACGACAATGAAGAGGAGACAAACACCAATTGTTGCATAGAATGAGATGTTGTCTTGGATGAAAGGGAAGGGGC\n\n.. _easy_install.sh: https://github.com/iric-soft/km/blob/master/easy_install.sh\n\nWithout install:\n----------------\nkm can be executed directly from source code.\n\nRequirements:\n*************\n* Python 3.6.0 or later\n* pyJellyfish python module or Jellyfish 2.2 or later **with** Python `bindings`_.\n\nUsage:\n******\n\n.. code:: shell\n\n  $ cd [your_km_folder]\n  $ python -m km find_mutation ./data/catalog/GRCh38/NPM1_4ins_exons_10-11utr.fa ./data/jf/02H025_NPM1.jf | km find_report -t ./data/catalog/GRCh38/NPM1_4ins_exons_10-11utr.fa\n\n.. _bindings: https://github.com/gmarcais/Jellyfish#binding-to-script-languages\n\n----------------------------\nDesign your target sequence:\n----------------------------\n\n* km is designed to make targeted analysis based on **target sequences**. These target sequences **need to be designed** and given to km as input.\n* A target sequence is a nucleotide sequence saved in a fasta file. Some target sequences are provided in `catalog <https://github.com/iric-soft/km/tree/master/km/data/catalog>`_.\n* To fit your specific needs, you will have to create your own target sequences.\n* On generic cases, you can follow some good practices described below:\n\n.. image:: https://github.com/iric-soft/km/blob/master/data/figure/doc_target_sequence.png\n\n* A web portal is available to assist you in the creation of your target sequences (for cases 1 and 2).\n\n  - km-target: https://bioinfo.iric.ca/km-target/\n\n* You could also extract nucleotide sequences from genome using severals methods, two of them are discribe below:\n\n  - Using `samtools <http://www.htslib.org/doc/samtools.html>`_: samtools faidx chr2:25234341-25234405 GRCh38/genome.fa\n  - Using get DNA from `ucsc <https://genome.ucsc.edu/cgi-bin/hgc?hgsid=730614743_K2u5W9UIMXrPzrUlC5KaXmWjzf4R&o=25234340&g=getDna&i=mixed&c=chr2&l=25234340&r=25234405&db=hg38&hgsid=730614743_K2u5W9UIMXrPzrUlC5KaXmWjzf4R>`_.\n\n\n-------------\nDisplay help:\n-------------\n\n.. code:: shell\n\n  $ km -h\n    usage: PROG [-h] {find_mutation,find_report,linear_kmin,min_cov} ...\n\n    positional arguments:\n      {find_mutation,find_report,linear_kmin,min_cov}\n                            sub-command help\n        find_mutation       Identify and quantify mutations from a target sequence\n                            and a k-mer database.\n        find_report         Parse find_mutation output to reformat it in tabulated\n                            file more user friendly.\n        linear_kmin         Find min k length to decompose a target sequence in a\n                            linear graph.\n        min_cov             Compute coverage of target sequences.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\n\n--------------------\nkm's tools overview:\n--------------------\n\nFor more detailed documentation click `here <https://github.com/iric-soft/km/tree/master/km/tools>`_.\n\nfind_mutation:\n--------------\n\nThis is the main tool of km, to identify and quantify mutations from\na target sequence and a k-mer jellyfish database.\n\n.. code:: shell\n\n  $ km find_mutation -h\n  $ km find_mutation [your_fasta_targetSeq] [your_jellyfish_count_table]\n  $ km find_mutation [your_catalog_directory] [your_jellyfish_count_table]\n\nfind_report:\n------------\n\nThis tool parse find_mutation output to reformat it in more user friendly\ntabulated file.\n\n.. code:: shell\n\n  $ km find_report -h\n  $ km find_report -t [your_fasta_targetSeq] [find_mutation_output]\n  $ km find_mutation [your_fasta_targetSeq] [your_jellyfish_count_table] | km find_report -t [your_fasta_targetSeq]\n\nmin_cov:\n--------\n\nThis tools display some k-mer's coverage stats of a target sequence and a list of jellyfish database.\n\n.. code:: shell\n\n  $ km min_cov -h\n  $ km min_cov [your_fasta_targetSeq] [[your_jellyfish_count_table]...]\n\nlinear_kmin:\n------------\n\nLength of k-mers is a central parameter:\n\n* To produce a linear directed graph from the target sequence.\n* To avoid false-positive. find_mutation shouldn't be use on jellyfish count table build with k<21 bp (we recommand k=31 bp, by default)\n\nlinear_kmin tool is design to give you the minimun k length to allow a\ndecomposition of a target sequence in a linear graph.\n\n.. code:: shell\n\n  $ km linear_kmin -h\n  $ km linear_kmin [your_catalog_directory]\n\n-------------------------------------------------\nRuning km on a real sample from downloaded fastq:\n-------------------------------------------------\nIn the `example`_ folder you can find a script to help you to\nrun a km analysis on one Leucegene sample.\n\n  .. _example: https://github.com/iric-soft/km/tree/master/example\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iric-soft/km",
    "keywords": "k-mer RNA-seq variant sequencing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "km-walk",
    "package_url": "https://pypi.org/project/km-walk/",
    "platform": null,
    "project_url": "https://pypi.org/project/km-walk/",
    "project_urls": {
      "Homepage": "https://github.com/iric-soft/km"
    },
    "release_url": "https://pypi.org/project/km-walk/2.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A software for RNA-seq investigation using k-mer decomposition",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15645345,
  "releases": {
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f3dd86e5b0289480267a9c007872203bdf6e55ec8a98025c5ca1be3ce8d92d",
          "md5": "a666b8dda6f23cb29bf577c410cafb4a",
          "sha256": "3003de6cae1eccf1bcc72a2f612e224d588d6af3a35d482797a380a1229a213b"
        },
        "downloads": -1,
        "filename": "km-walk-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a666b8dda6f23cb29bf577c410cafb4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1084950,
        "upload_time": "2021-11-17T21:59:28",
        "upload_time_iso_8601": "2021-11-17T21:59:28.515170Z",
        "url": "https://files.pythonhosted.org/packages/c0/f3/dd86e5b0289480267a9c007872203bdf6e55ec8a98025c5ca1be3ce8d92d/km-walk-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4168c009c531efdaa3755d03f10f3ad8a957abcf9c69fc6830a0a325560ca3ac",
          "md5": "7ddac435b958ae31d36944c1682bdac1",
          "sha256": "aa046097baeca88c16713a2d821c2955246cb31b0bcb99f3a9a63262a5a4789c"
        },
        "downloads": -1,
        "filename": "km-walk-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ddac435b958ae31d36944c1682bdac1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32410,
        "upload_time": "2022-11-03T18:59:51",
        "upload_time_iso_8601": "2022-11-03T18:59:51.218930Z",
        "url": "https://files.pythonhosted.org/packages/41/68/c009c531efdaa3755d03f10f3ad8a957abcf9c69fc6830a0a325560ca3ac/km-walk-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4168c009c531efdaa3755d03f10f3ad8a957abcf9c69fc6830a0a325560ca3ac",
        "md5": "7ddac435b958ae31d36944c1682bdac1",
        "sha256": "aa046097baeca88c16713a2d821c2955246cb31b0bcb99f3a9a63262a5a4789c"
      },
      "downloads": -1,
      "filename": "km-walk-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7ddac435b958ae31d36944c1682bdac1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32410,
      "upload_time": "2022-11-03T18:59:51",
      "upload_time_iso_8601": "2022-11-03T18:59:51.218930Z",
      "url": "https://files.pythonhosted.org/packages/41/68/c009c531efdaa3755d03f10f3ad8a957abcf9c69fc6830a0a325560ca3ac/km-walk-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}