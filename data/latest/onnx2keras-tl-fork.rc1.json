{
  "info": {
    "author": "Grigory Malivenko, Doron Har Noy",
    "author_email": "nerox8664@gmail.com, doron.harnoy@tensorleap.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Image Recognition"
    ],
    "description": "# Tensorleap fork of onnx2keras\n\nONNX to Keras deep neural network converter. \n\n[![GitHub License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/python-2.7%2C3.6-lightgrey.svg)](https://github.com/nerox8664/onnx2keras)\n[![Downloads](https://pepy.tech/badge/onnx2keras)](https://pepy.tech/project/onnx2keras)\n![PyPI](https://img.shields.io/pypi/v/onnx2keras.svg)\n\n## Requirements\n\nTensorFlow 2.0\n\n## API\n\n`onnx_to_keras(onnx_model, input_names, input_shapes=None, name_policy=None, verbose=True, change_ordering=False) -> {Keras model}`\n\n`onnx_model`: ONNX model to convert\n\n`input_names`: list with graph input names\n\n`input_shapes`: override input shapes (experimental)\n\n`name_policy`: ['renumerate', 'short', 'default'] override layer names (experimental)\n\n`verbose`: detailed output\n\n`change_ordering:` change ordering to HWC (experimental)\n\n\n## Getting started\n\n### ONNX model\n```python\nimport onnx\nfrom onnx2keras import onnx_to_keras\n\n# Load ONNX model\nonnx_model = onnx.load('resnet18.onnx')\n\n# Call the converter (input - is the main model input name, can be different for your model)\nk_model = onnx_to_keras(onnx_model, ['input'])\n```\n\nKeras model will be stored to the `k_model` variable. So simple, isn't it?\n\n\n### PyTorch model\n\nUsing ONNX as intermediate format, you can convert PyTorch model as well.\n\n```python\nimport numpy as np\nimport torch\nfrom torch.autograd import Variable\nfrom pytorch2keras.converter import pytorch_to_keras\nimport torchvision.models as models\n\nif __name__ == '__main__':\n    input_np = np.random.uniform(0, 1, (1, 3, 224, 224))\n    input_var = Variable(torch.FloatTensor(input_np))\n    model = models.resnet18()\n    model.eval()\n    k_model = \\\n        pytorch_to_keras(model, input_var, [(3, 224, 224,)], verbose=True, change_ordering=True)\n\n    for i in range(3):\n        input_np = np.random.uniform(0, 1, (1, 3, 224, 224))\n        input_var = Variable(torch.FloatTensor(input_np))\n        output = model(input_var)\n        pytorch_output = output.data.numpy()\n        keras_output = k_model.predict(np.transpose(input_np, [0, 2, 3, 1]))\n        error = np.max(pytorch_output - keras_output)\n        print('error -- ', error)  # Around zero :)\n```\n\n### Deplying model as frozen graph\n\nYou can try using the snippet below to convert your onnx / PyTorch model to frozen graph. It may be useful for deploy for Tensorflow.js / for Tensorflow for Android / for Tensorflow C-API.\n\n```python\nimport numpy as np\nimport torch\nfrom pytorch2keras.converter import pytorch_to_keras\nfrom torch.autograd import Variable\nimport tensorflow as tf\nfrom tensorflow.python.framework.convert_to_constants import convert_variables_to_constants_v2\n\n\n# Create and load model\nmodel = Model()\nmodel.load_state_dict(torch.load('model-checkpoint.pth'))\nmodel.eval()\n\n# Make dummy variables (and checking if the model works)\ninput_np = np.random.uniform(0, 1, (1, 3, 224, 224))\ninput_var = Variable(torch.FloatTensor(input_np))\noutput = model(input_var)\n\n# Convert the model!\nk_model = \\\n    pytorch_to_keras(model, input_var, (3, 224, 224), \n                     verbose=True, name_policy='short',\n                     change_ordering=True)\n\n# Save model to SavedModel format\ntf.saved_model.save(k_model, \"./models\")\n\n# Convert Keras model to ConcreteFunction\nfull_model = tf.function(lambda x: k_model(x))\nfull_model = full_model.get_concrete_function(\n    tf.TensorSpec(k_model.inputs[0].shape, k_model.inputs[0].dtype))\n\n# Get frozen ConcreteFunction\nfrozen_func = convert_variables_to_constants_v2(full_model)\nfrozen_func.graph.as_graph_def()\n\nprint(\"-\" * 50)\nprint(\"Frozen model layers: \")\nfor layer in [op.name for op in frozen_func.graph.get_operations()]:\n    print(layer)\n\nprint(\"-\" * 50)\nprint(\"Frozen model inputs: \")\nprint(frozen_func.inputs)\nprint(\"Frozen model outputs: \")\nprint(frozen_func.outputs)\n\n# Save frozen graph from frozen ConcreteFunction to hard drive\ntf.io.write_graph(graph_or_graph_def=frozen_func.graph,\n                  logdir=\"./frozen_models\",\n                  name=\"frozen_graph.pb\",\n                  as_text=False)\n```\n\n\n## License\nThis software is covered by MIT License.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/tensorleap/onnx2keras/archive/v0.0.26.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tensorleap/onnx2keras",
    "keywords": "machine-learning deep-learning pytorch keras neuralnetwork vgg resnet densenet drn dpn darknet squeezenet mobilenet onnx tensorleap",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "onnx2keras-tl-fork",
    "package_url": "https://pypi.org/project/onnx2keras-tl-fork/",
    "platform": "",
    "project_url": "https://pypi.org/project/onnx2keras-tl-fork/",
    "project_urls": {
      "Download": "https://github.com/tensorleap/onnx2keras/archive/v0.0.26.tar.gz",
      "Homepage": "https://github.com/tensorleap/onnx2keras"
    },
    "release_url": "https://pypi.org/project/onnx2keras-tl-fork/0.0.26/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The deep learning models converter",
    "version": "0.0.26",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14321219,
  "releases": {
    "0.0.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e13d4acab78f3f33ba50154eb2e819188cb3bae127739b6cac904b57df4987",
          "md5": "48445a53eea24b6d104f7034fa7b8e8d",
          "sha256": "7b23502d2a3204b53bf00f096417bbc309effcd0b9e453b93556401ceb6bf9b7"
        },
        "downloads": -1,
        "filename": "onnx2keras_tl_fork-0.0.26.tar.gz",
        "has_sig": false,
        "md5_digest": "48445a53eea24b6d104f7034fa7b8e8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25581,
        "upload_time": "2021-02-09T14:03:08",
        "upload_time_iso_8601": "2021-02-09T14:03:08.106285Z",
        "url": "https://files.pythonhosted.org/packages/a7/e1/3d4acab78f3f33ba50154eb2e819188cb3bae127739b6cac904b57df4987/onnx2keras_tl_fork-0.0.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7e13d4acab78f3f33ba50154eb2e819188cb3bae127739b6cac904b57df4987",
        "md5": "48445a53eea24b6d104f7034fa7b8e8d",
        "sha256": "7b23502d2a3204b53bf00f096417bbc309effcd0b9e453b93556401ceb6bf9b7"
      },
      "downloads": -1,
      "filename": "onnx2keras_tl_fork-0.0.26.tar.gz",
      "has_sig": false,
      "md5_digest": "48445a53eea24b6d104f7034fa7b8e8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25581,
      "upload_time": "2021-02-09T14:03:08",
      "upload_time_iso_8601": "2021-02-09T14:03:08.106285Z",
      "url": "https://files.pythonhosted.org/packages/a7/e1/3d4acab78f3f33ba50154eb2e819188cb3bae127739b6cac904b57df4987/onnx2keras_tl_fork-0.0.26.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}