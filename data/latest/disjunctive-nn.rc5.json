{
  "info": {
    "author": "Theodore Tsitsimis",
    "author_email": "th.tsitsimis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![PyPI version shields.io](https://img.shields.io/pypi/v/disjunctive-nn.svg)](https://pypi.python.org/pypi/disjunctive-nn)\n[![PyPI license](https://img.shields.io/pypi/l/disjunctive-nn.svg)](https://pypi.python.org/pypi/disjunctive-nn/)\n[![PyPI license](https://travis-ci.com/tsitsimis/disjunctive-normal-networks.svg?branch=master)](https://travis-ci.com/tsitsimis/disjunctive-normal-networks.svg?branch=master)\n\n\n# Disjunctive Normal Networks\nA Disjunctive Normal Network (DNN) is a special type of Neural Network used for binary classification. It uses intersected convex polytopes (hyperdimensional polygons) to cover the feature space of positive samples. This allows DNNs to find rules in the form of constraining inequalities in feature space that resemble the rules present in Decision Trees (DTs).\n\n In 2D it can be seen as multiple convex polygons spread on the plane enclosing all positive samples while leaving negative samples outside. \n\nBased on paper:\n> Mehdi Sajjadi, Mojtaba Seyedhosseini, Tolga Tasdizen (2014). Disjunctive Normal Networks. CoRR, abs/1412.8534.\n [\\[pdf\\]](https://arxiv.org/pdf/1412.8534.pdf)\n\n\n## How to use disjunctive-nn\nThe disjuntive-nn package inherits from scikit-learn classes, and thus drops in neatly next to other sklearn transformers with an identical calling API.\n\n```python\nfrom disjunctive_nn import DisjunctiveNormalNetwork\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX, y = make_moons(n_samples=1000, noise=0.2)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.33, random_state=42)\n\ndnn = DisjunctiveNormalNetwork(n_polytopes=2, m=4)\ndnn.fit(X_train, y_train)\n\ny_pred = dnn.predict(X_test)\nprint(accuracy_score(y_test, y_pred))\n```\n\n## Installing\nPyPI install:\n```\npip install disjunctive_nn\n```\n\nAlternatively download the package, install requirements, and manually run the installer:\n```\nwget https://github.com/tsitsimis/disjunctive-normal-networks/archive/master.zip\nunzip master.zip\nrm master.zip\ncd disjunctive-normal-networks-master\n\npip install -r requirements.txt\n\npython setup.py install\n```\n\n## Benefits of Disjunctive Normal Networks\nA Disjunctive Normal Network can be seen as an [Oblique Decision Tree](https://www.researchgate.net/publication/260972972_Oblique_Decision_Tree_Learning_Approaches_-_A_Critical_Review) (ODT) learned with backpropagation by minimizing an error function.\n\nOblique Decision Trees are a generalization of regular Decision Trees with rules that are multivariate resulting in dividing the feature space with boundaries non-parallel to the axes.\n\nThis allows DNNs to be much more interpretable (inequality rules on linear combination of features) than a vanilla Neural Network and to be trained with backpropagation.\n\nOverall the main advantages of a DNN over a DT are:\n- Uses polytopes instead of hyercubes\n- Is trained with backpropagation and can be thus incorporated in any neural network topology as final or intermediate step\n- Is less prone to overfitting (although this is a quick result shown by only some simple experiments)\n\n## Theoretical background\n### Disjunctive Normal Form\nA Decision Tree segments the space in hypercubes by drawing axis-aligned hyperplanes. Each hyperbox encloses the points of one class to form the final decision function of the tree\n\n<img src=\"./assets/decision-tree-boxes.jpg\" height=200/>\n\nIn the case of binary classification, the interior of the hypercubes enclosing the positive samples can be seen as the subspace where a boolean function becomes True (1) and ouside is False (0).\n\n<img src=\"./assets/decision-tree.png\" height=200/>\n\nFor the tree of the above picture the associated boolean function (1 for positive class <img src=\"https://render.githubusercontent.com/render/math?math=c_%2B\">, 0 for class <img src=\"https://render.githubusercontent.com/render/math?math=c_-\">) is\n\n<img src=\"https://render.githubusercontent.com/render/math?math=Y = ((x_1 < a_1) \\cap (x_2 < a_2)) \\cup ((x_1 < a_1) \\cap (x_2 < a_2)^\\prime \\cap (x_3 < a_4)^\\prime) \\cup ((x_1 < a_1)^\\prime \\cap (x_4 < a_4)^\\prime \\cap (x_5 < a_5))\">\n\nThis boolean function is written in [Disjunctive Normal Form](https://en.wikipedia.org/wiki/Disjunctive_normal_form) meaning that it is a union of intersections or an \"OR of ANDs\" (in terms of logic gates).\n\nHere is when Disjunctive Normal Networks come into play to represent such boolean functions.\n\n### Half-Spaces and Polytopes\nA polytope is the generalization of a polygon and polyhedron in higher dimensions. It can be seen as the intersection of M half-spaces, where a half-space <img src=\"https://render.githubusercontent.com/render/math?math=H_i\"> is defined as the sub-space where it holds <img src=\"https://render.githubusercontent.com/render/math?math=h_i(x) > 0\">\n\n<img src=\"./assets/polytope.png\" height=140/>\n\nMany such polytopes can be used as covers and optimized to enclose all positive samples in a binary classification problem:\n\n<img src=\"./assets/polytopes.png\" height=200/>\n\n### Decision Function\nA half-space can be expressed as a sigmoid function of a linear combination of the feature space\n<img src=\"https://render.githubusercontent.com/render/math?math=h(x) = \\sigma(w^Tx %2B a)\">. The intersection of M half-spaces is their product (boolean AND) and forms a polytope <img src=\"https://render.githubusercontent.com/render/math?math=P_i\">\n\n<img src=\"https://render.githubusercontent.com/render/math?math=P_i = \\displaystyle \\product_{j=1}^{M} h_{ij}(x)\">\n\nFinally, the union of N polytopes forms the decision function <img src=\"https://render.githubusercontent.com/render/math?math=f(x)\">. To calculate the union we could just add all the <img src=\"https://render.githubusercontent.com/render/math?math=P_i(x)\"> together but in overlapping areas the result would be greater than 1. To tackle this, using the [DeMorgan](https://en.wikipedia.org/wiki/De_Morgan%27s_laws) rule <img src=\"https://render.githubusercontent.com/render/math?math=A \\cup B = (A^\\prime \\cap B^\\prime)^\\prime\"> the sum can be transformed to the product\n\n<img src=\"https://render.githubusercontent.com/render/math?math=f(x) = 1 - \\displaystyle \\product_{i=1}^{N}(\\product_{j=1}^{M} 1 - h_{ij}(x))\">\n\nIn the above expression we replace boolean negation of a variable <img src=\"https://render.githubusercontent.com/render/math?math=A\"> with <img src=\"https://render.githubusercontent.com/render/math?math=1-A\"> and the boolean AND with a product. \n\nThe function <img src=\"https://render.githubusercontent.com/render/math?math=f(x)\"> is then optimized with gradient descent.\n\n\n## Examples and benchmarking\nDNNs were tested on 2D synthetic datasets and compared to Decision Trees which is the closest classifier in terms of complexity and shape of decision function. The point of this experiment is to illustrate the nature of decision boundaries of the 2 classifiers. This should be taken with a grain of salt, as the performance does not necessarily carry over to real datasets.\n\nThe accuracy corresponds to the test set after splitting the dataset in train and test set. DNN parameters (N: number of polytopes, M: number of half-spaces per polytope) are set through experimentation.\n\n<table>\n    <th>Dataset</th>\n    <th>DNN</th>\n    <th>DT</th>\n    <th>DNN Parameters</th>\n    <tr>\n        <td>Moons</td>\n        <td><b>0.98</b></td>\n        <td>0.96</td>\n        <td>N=2, M=4</td>\n    </tr>\n    <tr>\n        <td>Circles</td>\n        <td><b>0.98</b></td>\n        <td>0.96</td>\n        <td>N=1, M=4</td>\n    </tr>\n    <tr>\n        <td>Spirals</td>\n        <td><b>0.99</b></td>\n        <td>0.96</td>\n        <td>N=20, M=10</td>\n    </tr>\n</table>\n\nThe below plots show the 2 models' decision function when trained on the whole dataset. The purpose is to show how well the models memorize (overfit) the training set.\n\n### Moons\n<img src=\"./assets/moons-experiments.png\" width=\"100%\"/>\n\n### Circles\n<img src=\"./assets/circles-experiments.png\" width=\"100%\"/>\n\n### Spirals\n<img src=\"./assets/spirals-experiments.png\" width=\"100%\"/>\n\n\nThe overall observation is that DNNs provide much **smoother decision boundaries** and overfit less on training data.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tsitsimis/disjunctive-normal-networks",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "disjunctive-nn",
    "package_url": "https://pypi.org/project/disjunctive-nn/",
    "platform": "",
    "project_url": "https://pypi.org/project/disjunctive-nn/",
    "project_urls": {
      "Homepage": "https://github.com/tsitsimis/disjunctive-normal-networks"
    },
    "release_url": "https://pypi.org/project/disjunctive-nn/0.1.5/",
    "requires_dist": [
      "numpy (>=1.19.1)",
      "matplotlib (>=3.3.0)",
      "scikit-learn (>=0.23.2)",
      "torch (>=1.6.0+cpu)"
    ],
    "requires_python": "",
    "summary": "PyTorch implementation of Disjunctive Normal Networks",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8134639,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b601254572c535c3fc8d4598654872deab4d915f709b3a9ed73b97d5d824391",
          "md5": "3ee68272221dccbe29a8328e9ea50175",
          "sha256": "f96a0d997b98767c11a771f21e09d298f96340d211674feba67e12a878fc2ef9"
        },
        "downloads": -1,
        "filename": "disjunctive_nn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ee68272221dccbe29a8328e9ea50175",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6445,
        "upload_time": "2020-08-31T14:54:37",
        "upload_time_iso_8601": "2020-08-31T14:54:37.934924Z",
        "url": "https://files.pythonhosted.org/packages/2b/60/1254572c535c3fc8d4598654872deab4d915f709b3a9ed73b97d5d824391/disjunctive_nn-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "533571f8996816a58ba8eef5a0b9df3fc09a345bc361b2d56f56759eca248df2",
          "md5": "d0be8a55a365769b991a307217afbc45",
          "sha256": "de58e480e2a8c447fcb973ec0903ea0802924d01aeaf1515c6898eee10de2280"
        },
        "downloads": -1,
        "filename": "disjunctive-nn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0be8a55a365769b991a307217afbc45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5485,
        "upload_time": "2020-08-31T14:54:40",
        "upload_time_iso_8601": "2020-08-31T14:54:40.507398Z",
        "url": "https://files.pythonhosted.org/packages/53/35/71f8996816a58ba8eef5a0b9df3fc09a345bc361b2d56f56759eca248df2/disjunctive-nn-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c36690288565eb0a364e721d2c8caec469c541c6f6cecc575a390b57891dab9",
          "md5": "82231810560cbd3388e08a7419ff2eef",
          "sha256": "242e05d599304f7b3d7fa7c8849128079d94df50dac6f586035e3aa63d05f8d9"
        },
        "downloads": -1,
        "filename": "disjunctive_nn-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82231810560cbd3388e08a7419ff2eef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7071,
        "upload_time": "2020-09-01T08:12:21",
        "upload_time_iso_8601": "2020-09-01T08:12:21.410441Z",
        "url": "https://files.pythonhosted.org/packages/9c/36/690288565eb0a364e721d2c8caec469c541c6f6cecc575a390b57891dab9/disjunctive_nn-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a5b06202e2d48d89a1b0220e7dfe9a6f39e16c29065c5bac75e00c82386f01",
          "md5": "0c5f21498243ffe0a597b88eb0ffb2fe",
          "sha256": "44c04db73cd7eff2e5fa87a6583e129d2bac7a9dfb8bb476821e1b286a33cd1e"
        },
        "downloads": -1,
        "filename": "disjunctive-nn-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c5f21498243ffe0a597b88eb0ffb2fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6219,
        "upload_time": "2020-09-01T08:12:24",
        "upload_time_iso_8601": "2020-09-01T08:12:24.090784Z",
        "url": "https://files.pythonhosted.org/packages/c6/a5/b06202e2d48d89a1b0220e7dfe9a6f39e16c29065c5bac75e00c82386f01/disjunctive-nn-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e8702f70d29a6762451212b639b2aebb9596c210d76077e728a7a39cd4342e",
          "md5": "f4892aa4fb6b21f46bf5b993589b29f6",
          "sha256": "d8076aa676505824937c9f7fe7980f552ab557c09f00a50824c6b1d6cd7eb70c"
        },
        "downloads": -1,
        "filename": "disjunctive_nn-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4892aa4fb6b21f46bf5b993589b29f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7082,
        "upload_time": "2020-09-01T16:45:44",
        "upload_time_iso_8601": "2020-09-01T16:45:44.704760Z",
        "url": "https://files.pythonhosted.org/packages/75/e8/702f70d29a6762451212b639b2aebb9596c210d76077e728a7a39cd4342e/disjunctive_nn-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a243836e52b85dfa87ccc24cd30eab83b541a03cfc2bc97bc98ea504512eaa77",
          "md5": "9674a8b45369f7d2a20ca3a7a2a67365",
          "sha256": "0e2123d675f6a0883294e4fba15c57029920e5af7d51a74c8c4cc403fb9ea3db"
        },
        "downloads": -1,
        "filename": "disjunctive-nn-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9674a8b45369f7d2a20ca3a7a2a67365",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6223,
        "upload_time": "2020-09-01T16:45:48",
        "upload_time_iso_8601": "2020-09-01T16:45:48.325115Z",
        "url": "https://files.pythonhosted.org/packages/a2/43/836e52b85dfa87ccc24cd30eab83b541a03cfc2bc97bc98ea504512eaa77/disjunctive-nn-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c24d13d6779b470ed800261cda74edbe250a43611283660eea1be4a0e284868e",
          "md5": "e8ff1627beeeb75273fbea96e9e5a15b",
          "sha256": "06f107b071e79d4dcbfde88b7424ebc0654e1bc55c18f59dfad4d6c2952a58f4"
        },
        "downloads": -1,
        "filename": "disjunctive_nn-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8ff1627beeeb75273fbea96e9e5a15b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7240,
        "upload_time": "2020-09-08T06:54:07",
        "upload_time_iso_8601": "2020-09-08T06:54:07.746779Z",
        "url": "https://files.pythonhosted.org/packages/c2/4d/13d6779b470ed800261cda74edbe250a43611283660eea1be4a0e284868e/disjunctive_nn-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d1a5b6ea9f9cdeaa8e20d14b6c249d7febf8cae0f65ab08b99cbb9fdb6de9e5",
          "md5": "daad4a0328996dbca9b9e052ce9cc7c2",
          "sha256": "2e0af3b29c80a5d570f6d34093fb445dec3bb34a278fc6258c885fc6975d98a6"
        },
        "downloads": -1,
        "filename": "disjunctive-nn-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "daad4a0328996dbca9b9e052ce9cc7c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7058,
        "upload_time": "2020-09-08T06:54:12",
        "upload_time_iso_8601": "2020-09-08T06:54:12.458037Z",
        "url": "https://files.pythonhosted.org/packages/4d/1a/5b6ea9f9cdeaa8e20d14b6c249d7febf8cae0f65ab08b99cbb9fdb6de9e5/disjunctive-nn-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bf617a29fd3562c9e3931e3bca589f424498afcffd145cff6242d7a0d394178",
          "md5": "14a11e102ae845df9b511993cfe6b144",
          "sha256": "220f5b3cc5f4c867b1b86288ffeb44cf4c70fd6c6e602739851dbced2c4ed77c"
        },
        "downloads": -1,
        "filename": "disjunctive_nn-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14a11e102ae845df9b511993cfe6b144",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7252,
        "upload_time": "2020-09-08T08:21:32",
        "upload_time_iso_8601": "2020-09-08T08:21:32.474771Z",
        "url": "https://files.pythonhosted.org/packages/0b/f6/17a29fd3562c9e3931e3bca589f424498afcffd145cff6242d7a0d394178/disjunctive_nn-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7175dfb73b88adedc3363109480a356bf6a61a6e5c1bb6d817f63f3bedcad2d7",
          "md5": "a6dbae9e9b3fa3fbd67212331f63d437",
          "sha256": "a9895c0499d0d9f12de001aeced6da5b228fe9602f7aef89bc23fc686580eb2a"
        },
        "downloads": -1,
        "filename": "disjunctive-nn-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a6dbae9e9b3fa3fbd67212331f63d437",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7067,
        "upload_time": "2020-09-08T08:21:37",
        "upload_time_iso_8601": "2020-09-08T08:21:37.611035Z",
        "url": "https://files.pythonhosted.org/packages/71/75/dfb73b88adedc3363109480a356bf6a61a6e5c1bb6d817f63f3bedcad2d7/disjunctive-nn-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bf617a29fd3562c9e3931e3bca589f424498afcffd145cff6242d7a0d394178",
        "md5": "14a11e102ae845df9b511993cfe6b144",
        "sha256": "220f5b3cc5f4c867b1b86288ffeb44cf4c70fd6c6e602739851dbced2c4ed77c"
      },
      "downloads": -1,
      "filename": "disjunctive_nn-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14a11e102ae845df9b511993cfe6b144",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7252,
      "upload_time": "2020-09-08T08:21:32",
      "upload_time_iso_8601": "2020-09-08T08:21:32.474771Z",
      "url": "https://files.pythonhosted.org/packages/0b/f6/17a29fd3562c9e3931e3bca589f424498afcffd145cff6242d7a0d394178/disjunctive_nn-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7175dfb73b88adedc3363109480a356bf6a61a6e5c1bb6d817f63f3bedcad2d7",
        "md5": "a6dbae9e9b3fa3fbd67212331f63d437",
        "sha256": "a9895c0499d0d9f12de001aeced6da5b228fe9602f7aef89bc23fc686580eb2a"
      },
      "downloads": -1,
      "filename": "disjunctive-nn-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a6dbae9e9b3fa3fbd67212331f63d437",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7067,
      "upload_time": "2020-09-08T08:21:37",
      "upload_time_iso_8601": "2020-09-08T08:21:37.611035Z",
      "url": "https://files.pythonhosted.org/packages/71/75/dfb73b88adedc3363109480a356bf6a61a6e5c1bb6d817f63f3bedcad2d7/disjunctive-nn-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}