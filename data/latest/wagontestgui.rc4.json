{
  "info": {
    "author": "Garrett Schindler, Andrew Kirzeder, & Bryan Crossman",
    "author_email": "none@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n\n\n# WagonTestGUI\n\nThis repository contains the GUI used to run the quality control testing for all HGCAL LD Wagons.\n\n## Setup \n\n### GUI Setup\n\nRun these commands from your working area to pull the code in:\n```\n\tgit clone git@github.com:UMN-CMS/WagonTestGUI.git\n\n\tpip install WagonTestGUI\n``` \nWhen updating the code, you can use the following commands:\n``` \n    git add <your files>\n    git commit -m \"Message about what you are committing\"\n    git push origin <LocalBranchName>:<RemoteBranchName>\n``` \nYou can then open a pull request (PR) by going to the Github repo and then we can merge your code into the master branch. \n\n### Setting Up Server/Client/Backend\n\nYou will need to pull the repository for the testing station onto the testing station.\n\nYou will then need to run \"python utils/fetch\\_ip.py\" on the testing station.  \n\nYou will need to pull \"client\\_setup.py\" from the git@github.com:UMN-CMS/WagonTestHUI.git repository onto the GUI computer.\n\nThen run the command it tells you (./client\\_setup.py testing\\_station\\_ip\\_address).\n\nYou will also need to install and set up the database that you will be using at DATABASE GITHUB REPO LINK HERE\n\n## To run the program:\n\nTo run the program:\n\nYou will need to run \"python REPServer.py\" on the appropriate machine after pulling the server code from REPSERVER GITHUB REPO LINK HERE.\n\nThis program is built to be compatible with a Zebra (MODEL NUMBER GOES HERE) Scanner. Please connect it to the computer and do any required setup before running the program. \n\nWith those set up and running, open these files in VS Code (or any application that runs Python) and run the following commands in the terminal:\n\n```\n./run_WagonTestGUI\n```\n## Using the program\n\nWhen the GUI loads in there will be a loading screen, this will change to the login scene when the GUI is loaded.\n\nThe login scene will require you to choose a user to continue into the program further. If you wish to add a new user, you may click the \"Add User\" button. However, this will require admin privileges within the database.\n\nThe scan scene will require a board serial number to be scanned to progress forward. Simply scan the QR code on the board and then hit the \"Submit\" button. If you scan the wrong QR Code, you may push the \"Rescan\" button to scan another QR code.\n \nMost scenes in the GUI will contain the \"Change Boards\" and \"Logout\" buttons. This will allow you to return to scan scene and scan a new board in or return to login scene to choose a new user respectively.\n\nWhen using the GUI, the sidebar will allow you to navigate to any frame that is not greyed out simply by click on the respective named button. If a test has been completed, it cannot be selected from the navigator, but instead requires the user to use the respective \"Retest\" button found on the test summary scene.\n\nWhile a test is in progress, the GUI will disable sidebar navigation and prevent you from leaving the GUI. This can be overriden using CTRL + C, but it will not halt the test. That would require a similar override on the test station's computer.\n\nThe test summary scene contains a \"More Info\" button. This button will display the information found in the \"data\" portion of the test results in the python dictionary. This information is also viewable from the website. It also contain's a \"Next Test\" button. This functions identically to the \"Change Boards\" button found on other scenes.\n\nTo access the website, you simply need to type \"\" into the web browser of your choice (CHECK IF THIS NEEDS TO BE ON A CERTAIN COMPUTER)\n \n\n## Goals for this Framework:\n\nThe main goal for this framework is to have an efficient and easy-to-use user interface for running Wagon QC testing. The points of focus are:\n- Integration the GUI with the test results database to store information about which boards have been tested and what tests have been run\n- Easy to understand step-by-step instructions for QC testers to follow\n- Implementation of a barcode scanning functionality for registering new boards and uploading test results\n- Tracking of who is doing a tests, where it is taking place, and where the boards will be moved to after testing is finished\n\n## Background Information\n\n### What is a GUI?\n\nA GUI (or Graphical User Interface) is a program which allows users to interact with software via buttons, text entry boxes, and other module types. Most software that we are familiar with includes a user interface where we can modify data, navigate pages, and perform actions. An example of a GUI is the webpage you are currently on! You can choose to look at some of the code in this repository or perform actions to updated it with the click of a button. \n\nThe GUI we will be developing for testing wagon functionality will be python based. There are a few packages that can be used for developing python based GUIs. The example GUI ([here](gui/initial_test_gui.py)) uses [TKinter](https://docs.python.org/3/library/tkinter.html) to produce the user interface. You can try out this GUI by performing the following command line call: `python initial_test_gui.py`.\n\n### What is a Wagon?\n\nWagons are the motherboard connecting the active detector modules (what is measuring particle intractions) and the engines (the \"brains\" of the front-end electronics). Wagons are responsible for carrying clock, trigger, DAQ, and control infromation to between 2-4 modules simultaneously. They are completely passive boards and have no chips for communicating with the rest of the system. \n\nThe purpose of wagons in the front-end readout train is to tranasmit data and control information to and from modules. Thus, we would like to ensure that each wagon in the final version of the detector has been checked for good communication ability.\n\n### What tests are being run?\n\nThere are four tests that need to be run in order to verify a wagon is funcitioning properly:\n\n- Analog line connection check: measure the resistance of each of the analog lines on the wagon to ensure good connection\n- Measurement of ID resistor: each wagon has a precision resistor used for identification of wagon type that must be measured and compared to the nominal value\n- I2C read/write test: verify that the slow control communication along the wagon lines is working\n- Bit error rate measurement: check the quality of the data sent along the wagon elinks\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UMN-CMS/WagonTestGUI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "WagonTestGUI",
    "package_url": "https://pypi.org/project/WagonTestGUI/",
    "platform": null,
    "project_url": "https://pypi.org/project/WagonTestGUI/",
    "project_urls": {
      "Homepage": "https://github.com/UMN-CMS/WagonTestGUI"
    },
    "release_url": "https://pypi.org/project/WagonTestGUI/1.2.4/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "subprocess",
      "socket",
      "audioop",
      "logging",
      "json"
    ],
    "requires_python": "",
    "summary": "Python scripts to be located on the user interface computer.",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14644696,
  "releases": {
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e920c7e2cc677304e7e18089d440e3731679a283f96c06b652f235f547715b8",
          "md5": "2bbb8476fbdb8bc1e49c09b1e371d5d4",
          "sha256": "07a3af93c2d3dd16bfcdda75748750f93ebad7124391850954fbcf8151120772"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bbb8476fbdb8bc1e49c09b1e371d5d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 297030,
        "upload_time": "2022-08-03T14:15:40",
        "upload_time_iso_8601": "2022-08-03T14:15:40.488469Z",
        "url": "https://files.pythonhosted.org/packages/2e/92/0c7e2cc677304e7e18089d440e3731679a283f96c06b652f235f547715b8/WagonTestGUI-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acb986cb610d45845cb71ca3f2d729bf735dbb3b58174ad9d3acdd4251fe67c9",
          "md5": "bb47581e2535acf6a53f3ed053e02c8c",
          "sha256": "610398d1b5135cb0521aad297de49fb668b883ea300f6e1af751dcf2c32107d1"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb47581e2535acf6a53f3ed053e02c8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 283233,
        "upload_time": "2022-08-03T14:15:42",
        "upload_time_iso_8601": "2022-08-03T14:15:42.364253Z",
        "url": "https://files.pythonhosted.org/packages/ac/b9/86cb610d45845cb71ca3f2d729bf735dbb3b58174ad9d3acdd4251fe67c9/WagonTestGUI-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90be56cccccd56839e24b7f16b7f0c713b66eefdfb304debeda3dd0045c50abe",
          "md5": "e7702aa765fc9748f466f2e25409de8b",
          "sha256": "cfedb041da428ec3aea816d8e9d4a1a5c50bd9c05900da18ef0c3bfb5e6aeb52"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7702aa765fc9748f466f2e25409de8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 297017,
        "upload_time": "2022-08-03T14:31:12",
        "upload_time_iso_8601": "2022-08-03T14:31:12.373177Z",
        "url": "https://files.pythonhosted.org/packages/90/be/56cccccd56839e24b7f16b7f0c713b66eefdfb304debeda3dd0045c50abe/WagonTestGUI-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b176d78bf66f950c84265a816a505c13c3afb706466c277c4a28b2432d8a257",
          "md5": "57b4b36f36adc98ab5d4bf0f2e965139",
          "sha256": "cd7067a93fb5059201cfe74afa102669816c64a936ab40162c7f77d06f2d798e"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "57b4b36f36adc98ab5d4bf0f2e965139",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 283207,
        "upload_time": "2022-08-03T14:31:13",
        "upload_time_iso_8601": "2022-08-03T14:31:13.856873Z",
        "url": "https://files.pythonhosted.org/packages/3b/17/6d78bf66f950c84265a816a505c13c3afb706466c277c4a28b2432d8a257/WagonTestGUI-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "744938ae9c2dbfb4ad59dfde793ab9260f4361fe56ba27b5b9fa0cbb95a1078f",
          "md5": "29f5ffea4fd56076d211e996507632d3",
          "sha256": "ae64aac711e4a5b646351088f88fb377cc2319d27db41a99a5e3f704a6edaaea"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29f5ffea4fd56076d211e996507632d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 297060,
        "upload_time": "2022-08-03T18:49:28",
        "upload_time_iso_8601": "2022-08-03T18:49:28.474523Z",
        "url": "https://files.pythonhosted.org/packages/74/49/38ae9c2dbfb4ad59dfde793ab9260f4361fe56ba27b5b9fa0cbb95a1078f/WagonTestGUI-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82b44c15ad14ace65d44d403061ba0cdb505a4b528759e658bffd3fbfa7144ba",
          "md5": "ef7724bbe3332d73d3c6184a48465bee",
          "sha256": "d9a87dba9271c77ce5220896cbf973cdbd4b8d8220c4b5808c3bdaef21bfd16d"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ef7724bbe3332d73d3c6184a48465bee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 283258,
        "upload_time": "2022-08-03T18:49:30",
        "upload_time_iso_8601": "2022-08-03T18:49:30.398354Z",
        "url": "https://files.pythonhosted.org/packages/82/b4/4c15ad14ace65d44d403061ba0cdb505a4b528759e658bffd3fbfa7144ba/WagonTestGUI-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8725f31c52e2a46622134a1bf0b2f990c19c2cb073bb983204706538d24e34dd",
          "md5": "925769e695f9de9fb7e3fc1a3d8d921e",
          "sha256": "10020701c77e2dd9f3f0c76a695515e15aa038ef2f33ff25eb025f219388a374"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "925769e695f9de9fb7e3fc1a3d8d921e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 297051,
        "upload_time": "2022-08-03T18:57:45",
        "upload_time_iso_8601": "2022-08-03T18:57:45.576272Z",
        "url": "https://files.pythonhosted.org/packages/87/25/f31c52e2a46622134a1bf0b2f990c19c2cb073bb983204706538d24e34dd/WagonTestGUI-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "913db279da82c67976a7cf96e450e44fdf9575cfcec002dd5960898138ed1b3f",
          "md5": "ac7cb51a9dcf50bed67b40048f5d7417",
          "sha256": "aea1f2d41994f19517bfecd263a10d5f4dbcbe461464cf5b10075d1efe6e3e69"
        },
        "downloads": -1,
        "filename": "WagonTestGUI-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ac7cb51a9dcf50bed67b40048f5d7417",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 283245,
        "upload_time": "2022-08-03T18:57:47",
        "upload_time_iso_8601": "2022-08-03T18:57:47.485948Z",
        "url": "https://files.pythonhosted.org/packages/91/3d/b279da82c67976a7cf96e450e44fdf9575cfcec002dd5960898138ed1b3f/WagonTestGUI-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8725f31c52e2a46622134a1bf0b2f990c19c2cb073bb983204706538d24e34dd",
        "md5": "925769e695f9de9fb7e3fc1a3d8d921e",
        "sha256": "10020701c77e2dd9f3f0c76a695515e15aa038ef2f33ff25eb025f219388a374"
      },
      "downloads": -1,
      "filename": "WagonTestGUI-1.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "925769e695f9de9fb7e3fc1a3d8d921e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 297051,
      "upload_time": "2022-08-03T18:57:45",
      "upload_time_iso_8601": "2022-08-03T18:57:45.576272Z",
      "url": "https://files.pythonhosted.org/packages/87/25/f31c52e2a46622134a1bf0b2f990c19c2cb073bb983204706538d24e34dd/WagonTestGUI-1.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "913db279da82c67976a7cf96e450e44fdf9575cfcec002dd5960898138ed1b3f",
        "md5": "ac7cb51a9dcf50bed67b40048f5d7417",
        "sha256": "aea1f2d41994f19517bfecd263a10d5f4dbcbe461464cf5b10075d1efe6e3e69"
      },
      "downloads": -1,
      "filename": "WagonTestGUI-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ac7cb51a9dcf50bed67b40048f5d7417",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 283245,
      "upload_time": "2022-08-03T18:57:47",
      "upload_time_iso_8601": "2022-08-03T18:57:47.485948Z",
      "url": "https://files.pythonhosted.org/packages/91/3d/b279da82c67976a7cf96e450e44fdf9575cfcec002dd5960898138ed1b3f/WagonTestGUI-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}