{
  "info": {
    "author": "Jeremy Morgan",
    "author_email": "jsmorgan6@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# IKFlow\nNormalizing flows for Inverse Kinematics. Open source implementation to the paper [\"IKFlow: Generating Diverse Inverse Kinematics Solutions\"](https://ieeexplore.ieee.org/abstract/document/9793576)\n\n[![arxiv.org](https://img.shields.io/badge/cs.RO-%09arXiv%3A2111.08933-red)](https://arxiv.org/abs/2111.08933)\n\n\n## Setup, inference only\n\n``` bash\npip install git+https://github.com/jstmn/ikflow\n# or\ngit clone https://github.com/jstmn/ikflow.git && pip install ikflow/\n```\n\n\n## Setup - training, inference, and visualization\n\nThe following section outlines the setup procedures required to run the visualizer that this project uses. The only supported OS is Ubuntu. Visualization may work on Mac and Windows, I haven't tried it though. For Ubuntu, there are different system wide dependencies for `Ubuntu > 21` and `Ubuntu < 21`. For example, `qt5-default` is not in the apt repository for Ubuntu 21.0+ so can't be installed. See https://askubuntu.com/questions/1335184/qt5-default-not-in-ubuntu-21-04.\n\n<ins>Ubuntu >= 21.04</ins>\n```\nsudo apt-get install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libosmesa6 build-essential qtcreator\nexport PYOPENGL_PLATFORM=osmesa # this needs to be run every time you run a visualization script in a new terminal - annoying, I know\n```\n<ins>Ubuntu <= 20.x.y</ins>\n\n(This includes 20.04 LTS, 18.04 LTS, ...)\n```\nsudo apt-get install -y qt5-default build-essential qtcreator\n```\n\nLastly, install with pip:\n```\ngit clone https://github.com/jstmn/ikflow.git && cd ikflow\npip install -e \".[dev]\"\n```\n\n\n## Getting started\n\n**> Example 1: Use IKFlow to generate IK solutions for the Franka Panda arm**\n\nEvaluate the pretrained IKFlow model for the Franka Panda arm. Note that this was the same model whose performance was presented in the IKFlow paper. Note that the value for `model_name` - in this case `panda_tpm` should match an entry in `model_descriptions.yaml` \n```\npython scripts/evaluate.py --testset_size=500 --model_name=panda_full_tpm\n```\n\n**> Example 2: Visualize the solutions returned by the `panda_tpm` model**\n\nRun the following:\n```\npython scripts/visualize.py --model_name=panda_full_tpm --demo_name=oscillate_target\n```\n![ikflow solutions for oscillating target pose](../media/panda_tpm_oscillate_x-2022-08-26.gif?raw=true)\n\nRun an interactive notebook: `jupyter notebook notebooks/robot_visualizations.ipynb`\n\n**> Example 3: Run IKFlow yourself**\n\nExample code for how to run IKFlow is provided in `examples/example.py`. A sample excerpt:\n``` python\nik_solver, _ = get_ik_solver(args.model_name)\ntarget_pose = np.array([0.5, 0.5, 0.5, 1, 0, 0, 0])\nnumber_of_solutions = 5\nsolutions, l2_errors, angular_errors, joint_limits_exceeded, self_colliding, runtime = ik_solver.solve(\n  target_pose, number_of_solutions, refine_solutions=False, return_detailed=True\n)\n```\n\n\n## Notes\nThis project uses the `w,x,y,z` format for quaternions. That is all.\n\n\n## Training new models\n\nThe training code uses [Pytorch Lightning](https://www.pytorchlightning.ai/) to setup and perform the training and [Weights and Biases](https://wandb.ai/) ('wandb') to track training runs and experiments. WandB isn't required for training but it's what this project is designed around. Changing the code to use Tensorboard should be straightforward (so feel free to put in a pull request for this if you want it :)).\n\nFirst, create a dataset for the robot:\n```\npython scripts/build_dataset.py --robot_name=panda --training_set_size=25000000 --only_non_self_colliding\n```\n\nThen start a training run:\n```\n# Login to wandb account - Only needs to be run once\nwandb login\n\n# Set wandb project name and entity\nexport WANDB_PROJECT=ikflow \nexport WANDB_ENTITY=<your wandb entity name>\n\npython scripts/train.py \\\n    --robot_name=panda \\\n    --nb_nodes=12 \\\n    --batch_size=128 \\\n    --learning_rate=0.0005\n```\n\n## Common errors\n\n1. GLUT font retrieval function when running a visualizer. Run `export PYOPENGL_PLATFORM=osmesa` and then try again. See https://bytemeta.vip/repo/MPI-IS/mesh/issues/66\n\n```\nTraceback (most recent call last):\n  File \"visualize.py\", line 4, in <module>\n    from ikflow.visualizations import _3dDemo\n  File \"/home/jstm/Projects/ikflow/utils/visualizations.py\", line 10, in <module>\n    from klampt import vis\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/klampt/vis/__init__.py\", line 3, in <module>\n    from .glprogram import *\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/klampt/vis/glprogram.py\", line 11, in <module>\n    from .glviewport import GLViewport\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/klampt/vis/glviewport.py\", line 8, in <module>\n    from . import gldraw\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/klampt/vis/gldraw.py\", line 10, in <module>\n    from OpenGL import GLUT\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/OpenGL/GLUT/__init__.py\", line 5, in <module>\n    from OpenGL.GLUT.fonts import *\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/OpenGL/GLUT/fonts.py\", line 20, in <module>\n    p = platform.getGLUTFontPointer( name )\n  File \"/home/jstm/Projects/ikflow/venv/lib/python3.8/site-packages/OpenGL/platform/baseplatform.py\", line 350, in getGLUTFontPointer\n    raise NotImplementedError( \nNotImplementedError: Platform does not define a GLUT font retrieval function\n```\n\n2. If you get this error: `tkinter.TclError: no display name and no $DISPLAY environment variable`, add the lines below to the top of `ik_solvers.py` (anywhere before `import matplotlib.pyplot as plt` should work).\n``` python\nimport matplotlib\nmatplotlib.use(\"Agg\")\n```\n\n## TODO\n1. [ ] ~~Add CPU versions of pretrained model~~\n2. [ ] Add 'light' pretrained models. These are smaller networks for faster inference\n3. [ ] ~~Include a batched jacobian optimizer to enable parallelized solution refinement.~~ Note: This is in the works in a seperate repository\n\n\n## Citation\n```\n@ARTICLE{9793576,\n  author={Ames, Barrett and Morgan, Jeremy and Konidaris, George},\n  journal={IEEE Robotics and Automation Letters}, \n  title={IKFlow: Generating Diverse Inverse Kinematics Solutions}, \n  year={2022},\n  volume={7},\n  number={3},\n  pages={7177-7184},\n  doi={10.1109/LRA.2022.3181374}\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jstmn/ikflow",
    "keywords": "",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ikflow",
    "package_url": "https://pypi.org/project/ikflow/",
    "platform": null,
    "project_url": "https://pypi.org/project/ikflow/",
    "project_urls": {
      "Homepage": "https://github.com/jstmn/ikflow"
    },
    "release_url": "https://pypi.org/project/ikflow/0.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Open source implementation of the 'IKFlow' inverse kinematics solver",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16677781,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13deae9754fbbe61fd0843fc7d0f4e1cf7471ce76d0e18221e514406b4aaf51c",
          "md5": "8fb987fc2c0875f3df13c146d3c71216",
          "sha256": "ed370bb297b2575c2b3c419ae34f30e094eac774750efd0d6a6a396378f6ddeb"
        },
        "downloads": -1,
        "filename": "ikflow-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8fb987fc2c0875f3df13c146d3c71216",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 590951,
        "upload_time": "2023-02-03T05:49:16",
        "upload_time_iso_8601": "2023-02-03T05:49:16.870172Z",
        "url": "https://files.pythonhosted.org/packages/13/de/ae9754fbbe61fd0843fc7d0f4e1cf7471ce76d0e18221e514406b4aaf51c/ikflow-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3acc21cc8b39fd4248b36155c7f8144dd27757b0d2b6d9735eadc1d320d2aff8",
          "md5": "fc3f4d318277a3b1d2128c2ccbf0ed04",
          "sha256": "43d1c093a2d35ce2f166b7b0a938c9559eda348130d7bfa073628cded8880790"
        },
        "downloads": -1,
        "filename": "ikflow-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fc3f4d318277a3b1d2128c2ccbf0ed04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 590997,
        "upload_time": "2023-02-03T06:24:52",
        "upload_time_iso_8601": "2023-02-03T06:24:52.178618Z",
        "url": "https://files.pythonhosted.org/packages/3a/cc/21cc8b39fd4248b36155c7f8144dd27757b0d2b6d9735eadc1d320d2aff8/ikflow-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3acc21cc8b39fd4248b36155c7f8144dd27757b0d2b6d9735eadc1d320d2aff8",
        "md5": "fc3f4d318277a3b1d2128c2ccbf0ed04",
        "sha256": "43d1c093a2d35ce2f166b7b0a938c9559eda348130d7bfa073628cded8880790"
      },
      "downloads": -1,
      "filename": "ikflow-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "fc3f4d318277a3b1d2128c2ccbf0ed04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 590997,
      "upload_time": "2023-02-03T06:24:52",
      "upload_time_iso_8601": "2023-02-03T06:24:52.178618Z",
      "url": "https://files.pythonhosted.org/packages/3a/cc/21cc8b39fd4248b36155c7f8144dd27757b0d2b6d9735eadc1d320d2aff8/ikflow-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}