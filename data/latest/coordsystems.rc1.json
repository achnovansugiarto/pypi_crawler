{
  "info": {
    "author": "Heliton Martins",
    "author_email": "helitonmrf@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CoordSystems\n\nCoordSystems is a Python package to help working with different coordinate reference systems at the same time. The intention is to support annotated types for Cartesian, Polar and Spherical coordinates.\n\n## Usage\n\nThe Coordinate types carries out the conversion when needed. For example, when summing a `Cartesian` and a `Spherical`, the `Spherical` will be first converted to `Cartesian`, and then summed up.\n\n```python\nfrom coordsystems import Cartesian, Spherical\n\nc = Cartesian([1, 2, 3]) # x = 1, y = 2, z = 3\ns = Spherical([1, 0, 0]) # r = 1, θ = 0, φ = 0\nCartesian(s) # Cartesian([0, 0, 1])\nc + s # Cartesian([1, 2, 4])\nc.x # 1\ns.phi # 0\n```\n\n## Cartesian system\nIn a Cartesian System (here assuming 3D), each coordinate is written as a multiple of a unit basis vector ($\\vec i$, $\\vec j$ and $\\vec k$). Those unit vectors are in the direction usually known as $x$ (for $\\vec i$), $y$ (for $\\vec j$) and $z$ (for $\\vec k$).\n\nTo mark a point as a Cartesian point, just use the `Cartesian` constructor, passing a `list` or `numpy.ndarray` with each coordinate, or another `Coordinate` object.\n\nIn a Cartesian system, the vector sum is just the element-wise sum. So $(1,2,3) + (1,0,0) = (2,2,3)$.\n\n## Spherical system\nIn a Spherical System (necessarily 3D), each point is described also by three coordinates (because they are the same $\\mathbb{R}^3$ space), but now with $r$ (radius), $\\theta$ (polar angle) and $\\phi$ (azimuthal angle).\n\n![https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/3D_Spherical.svg/1280px-3D_Spherical.svg.png](https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/3D_Spherical.svg/1280px-3D_Spherical.svg.png)\n\nDifferent from Cartesian systems, here the vector sum isn't trivial. For example, $(2, \\frac{\\pi}{2}, \\pi) + (\\frac{1}{2}, \\frac{\\pi}{6}, 0) = (1.7321, \\frac{\\pi}{3}, \\pi)$. Actually, it's easier to convert them to Cartesian, perform the sum, and convert it back again. Luckily, a `Spherical` object do it for you:\n\n```python\n>>> import numpy as np\n>>> from coordsystems import Spherical\n>>> Spherical([2, np.pi/2, np.pi]) + Spherical([1, np.pi/6, 0])\nSpherical([1.7320508075688772, 1.0471975511965976, 3.141592653589793])\n```\n\n## Accessing coordinates\n\nIn a `p = Cartesian(...)`, you can access directly each coordinate (`p.x`, `p.y`, `p.z`) or use indexing (`p[0] == p['x'] == p.x`).\n\nIn a `q = Spherical(...)`, you can also access each coordinate independently (`q.r`, `q.theta` and `q.phi`). Indexing notation isn't implemented yet.\n\nIn any case, the implemented operations takes care of the system and try to do any operation in a Cartesian base, converting stuff when appropriate.\n\n## TODO\n\nWe still need to implement many things in this package before it gets ready for production.\n\n- [ ] `Number * Coordinate` multiplication\n- [ ] `Spherical` indexing access\n- [ ] Option to choose the symbol for polar and azimuthal angles (if θ = polar and φ = azimuthal or the opposite).\n- [ ] Cartesian custom basis (allow not only the canonical basis).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hellmrf/coordsystems",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coordsystems",
    "package_url": "https://pypi.org/project/coordsystems/",
    "platform": null,
    "project_url": "https://pypi.org/project/coordsystems/",
    "project_urls": {
      "Homepage": "https://github.com/hellmrf/coordsystems"
    },
    "release_url": "https://pypi.org/project/coordsystems/0.0.1/",
    "requires_dist": [
      "numpy (>=1.20.1)",
      "plum-dispatch"
    ],
    "requires_python": ">=3.7",
    "summary": "A package for dealing with different coordinate reference system.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16229198,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f00d9c4760c3c3ebb06034f3d7c642e94d1e1a6a465492b2f9af152656f9f60",
          "md5": "3fc8ea315c67c66b77283cf757c27bf8",
          "sha256": "9a10d09a04e7042b36d63c93cf80fc433f95a6b6f2f186d7df1b612cb2c5776e"
        },
        "downloads": -1,
        "filename": "coordsystems-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fc8ea315c67c66b77283cf757c27bf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16023,
        "upload_time": "2022-12-27T13:45:23",
        "upload_time_iso_8601": "2022-12-27T13:45:23.009088Z",
        "url": "https://files.pythonhosted.org/packages/6f/00/d9c4760c3c3ebb06034f3d7c642e94d1e1a6a465492b2f9af152656f9f60/coordsystems-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74bfe4cd425380cafa930881c6b2af66ef0e92459d4a34447512c780e209355e",
          "md5": "d262c63924a7c370fdbcc1fae20d32ef",
          "sha256": "617f7ebcd068721f4576462508fcd5378e754e6c2529314531d91a5effb766bd"
        },
        "downloads": -1,
        "filename": "coordsystems-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d262c63924a7c370fdbcc1fae20d32ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15988,
        "upload_time": "2022-12-27T13:45:24",
        "upload_time_iso_8601": "2022-12-27T13:45:24.717177Z",
        "url": "https://files.pythonhosted.org/packages/74/bf/e4cd425380cafa930881c6b2af66ef0e92459d4a34447512c780e209355e/coordsystems-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f00d9c4760c3c3ebb06034f3d7c642e94d1e1a6a465492b2f9af152656f9f60",
        "md5": "3fc8ea315c67c66b77283cf757c27bf8",
        "sha256": "9a10d09a04e7042b36d63c93cf80fc433f95a6b6f2f186d7df1b612cb2c5776e"
      },
      "downloads": -1,
      "filename": "coordsystems-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3fc8ea315c67c66b77283cf757c27bf8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16023,
      "upload_time": "2022-12-27T13:45:23",
      "upload_time_iso_8601": "2022-12-27T13:45:23.009088Z",
      "url": "https://files.pythonhosted.org/packages/6f/00/d9c4760c3c3ebb06034f3d7c642e94d1e1a6a465492b2f9af152656f9f60/coordsystems-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74bfe4cd425380cafa930881c6b2af66ef0e92459d4a34447512c780e209355e",
        "md5": "d262c63924a7c370fdbcc1fae20d32ef",
        "sha256": "617f7ebcd068721f4576462508fcd5378e754e6c2529314531d91a5effb766bd"
      },
      "downloads": -1,
      "filename": "coordsystems-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d262c63924a7c370fdbcc1fae20d32ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15988,
      "upload_time": "2022-12-27T13:45:24",
      "upload_time_iso_8601": "2022-12-27T13:45:24.717177Z",
      "url": "https://files.pythonhosted.org/packages/74/bf/e4cd425380cafa930881c6b2af66ef0e92459d4a34447512c780e209355e/coordsystems-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}