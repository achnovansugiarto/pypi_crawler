{
  "info": {
    "author": "Pierre Sassoulas",
    "author_email": "pierre.sassoulas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# WOW, sort this bag, this is a paralleled mess !\n\nBagnon is an add-on by Jaliborc for World of Warcraft (WOW), which has a sorting feature\nincluded. The goal of this challenge is to make this sorting faster. The winner gets to\nbe ported to Lua and gets to be proposed as a merge request in\n[WildPants the sorting library that Bagnon and Combductor rely on](https://github.com/tullamods/Wildpants/blob/29fbaf502b2780010b735f1af8af0ba5702afbbf/api/sorting.lua#L21).\nThis would affect a lot of WOW players. Please don't flood Jaliborc with an inferior\nalgorithm, the man is busy.\n\n- In WOW, there are up to 5 bags with each a number of slots. From 20 slots (just the\n  starting bag) to 164 slots (20 + 4 = 36 slot bags). There is also a 98 slots bag (the\n  reagent bank), and the bank itself which has between 28 (starting bank space), and a\n  maximum of 280 slots (28 + 7 = 36 slots bags).\n- Bags and items have types: There are special bags that can only contain one type of\n  object. For example, quivers can only contain arrows, but arrows can be stored\n  everywhere.\n- Items have a stack size: A stack of 200 arrows take a slot, but a sword takes a single\n  slot.\n- Item cannot be together in the same slot: One arrow alone takes the full slot.\n\nBagnon hides this from the user by creating a single bag that you can sort. Bank bags\nand reagent bags are sorted less often and independently to the player bags.\n\nIn order to sort the bag, you need to move the item. A move is done by calling the WOW\nAPI:\n\n- Moving something can fail if the slot does not accept this type of object.\n- Moving something to a slot where another item exists invert item position, and it can\n  fail if one of the slots does not accept these types of items.\n- Moving an item that can be stacked from a slot A to slot B where the same object\n  exists, makes the stack in slot B bigger, and every item that overflow goes into slot\n  A (slot A can become empty as a result).\n\nMoving an item requires a server call and is one of the two limiting factors. Let's call\nthis `serverDelayTime`. If you try to move an item again faster than the\n`serverDelayTime` it will fail.\n\nThe sorting can be parallelized: every `serverDelayTime` you can exchange the position\nof multiple items as long as no action occurred on any of them. Although some clients\nfreeze when you move too many objects this way at the same time. This can vary between\nclients with their PC performances. Let's call this second limiting factor\n`maxConcurrentMove` (Value is from 1 for two objects moved at a time to 140 for every\nobject in the biggest bank moved at the same time).\n\nInput: List of items with their id, their bag, slot, the number of item in the stack and\nthe type. Bags with their number, the type they accept and their size.\n\n```python\nitems = [\n    {\"id\": 1, \"bag\": 1, \"slot\": 4, \"stack\": 20, \"type\": 0},\n    {\"id\": 5, \"bag\": 1, \"slot\": 5, \"stack\": 200, \"itemCount\": 187, \"type\": 3},\n    {\"id\": 5, \"bag\": 1, \"slot\": 15, \"stack\": 200, \"itemCount\": 25, \"type\": 3},\n]\nbags = [\n    {\"bag\": 0, \"types\": [0, 1, 2, 3], \"size\": 20},\n    {\"bag\": 1, \"types\": [0, 1, 2, 3], \"size\": 16},\n    {\"bag\": 2, \"types\": [0, 1, 2, 3], \"size\": 14},\n    {\"bag\": 2, \"types\": [3], \"size\": 14},\n]\n```\n\nOutput: List of tick calls. Each tick is a list of move calls.\n\n```python\n[\n    [\n        \"b1 s4 => b0 s0\",\n        \"b1 s5 => b2 s0\",\n        \"b1 s15 => b2 s0\",  # This stack overflow, and 12 items will stay in b1 s15\n    ],\n    [\n        \"b1 s15 => b2 s1\",\n    ],\n]\n```\n\nApplying all the moves must return sorted bags. Ie: item's id are from smallest to\nbiggest.\n\nThis is a real-world algorithm, so of course, the theoretically faster algorithm wins !\nThe objective is to sort the bag in the less possible ticks of `serverDelayTime` while\nrespecting the `maxConcurrentMove` limit and without moving anything to a forbidden bag.\nFor the same number of ticks, the winner is the one with the least move call.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Pierre-Sassoulas/code-golf-bagnon-sort",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "code-golf-bagnon-sort",
    "package_url": "https://pypi.org/project/code-golf-bagnon-sort/",
    "platform": null,
    "project_url": "https://pypi.org/project/code-golf-bagnon-sort/",
    "project_urls": {
      "Homepage": "https://github.com/Pierre-Sassoulas/code-golf-bagnon-sort"
    },
    "release_url": "https://pypi.org/project/code-golf-bagnon-sort/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14604176,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d3da74568ecef3f58983a752278716584bbb403b78e9c13d1b0e914f538a42c",
          "md5": "b48396b22d3e9270fafc72489dc1971c",
          "sha256": "bce263a25a0815dc5d5ced70eabb4f3ba225cd142ea1a5769288afdb74f1fa52"
        },
        "downloads": -1,
        "filename": "code-golf-bagnon-sort-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b48396b22d3e9270fafc72489dc1971c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11305,
        "upload_time": "2022-07-31T13:03:52",
        "upload_time_iso_8601": "2022-07-31T13:03:52.344423Z",
        "url": "https://files.pythonhosted.org/packages/3d/3d/a74568ecef3f58983a752278716584bbb403b78e9c13d1b0e914f538a42c/code-golf-bagnon-sort-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d3da74568ecef3f58983a752278716584bbb403b78e9c13d1b0e914f538a42c",
        "md5": "b48396b22d3e9270fafc72489dc1971c",
        "sha256": "bce263a25a0815dc5d5ced70eabb4f3ba225cd142ea1a5769288afdb74f1fa52"
      },
      "downloads": -1,
      "filename": "code-golf-bagnon-sort-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b48396b22d3e9270fafc72489dc1971c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11305,
      "upload_time": "2022-07-31T13:03:52",
      "upload_time_iso_8601": "2022-07-31T13:03:52.344423Z",
      "url": "https://files.pythonhosted.org/packages/3d/3d/a74568ecef3f58983a752278716584bbb403b78e9c13d1b0e914f538a42c/code-golf-bagnon-sort-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}