{
  "info": {
    "author": "Daniel Boateng",
    "author_email": "dannboateng@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "**Python Package for Empirical Statistical Downscaling (v1.01) :sun_behind_rain_cloud: :cloud_with_snow: :cloud_with_rain: :fire: :thermometer:** \r\n\r\n**_PyESD_** is an open-source framework of the Perfect Prognosis approach of statistical downscaling of any climate-related variable such as precipitation, temperature, and wind speed using reanalysis products eg. ERA5 as predictors. The package features all the downscaling cycles including data preprocessing, predictor selection, constructions (eg. using transformers), model selection, training, validation and evaluation, and future prediction. The package serves as the means of downscaling General Circulation Models of future climate to high resolution relevant for climate impact assessment such as droughts, flooding, wildfire risk, and others. \r\nThe main specialties of the pyESD include:\r\n\r\n* Well designed in an OOP style that considers weather stations as individual objects and all the downscaling routines as attributes. This ensures fewer lines of code that cover the end-to-end downscaling of climate change variable products.\r\n* PyESD features many machine learning algorithms and predictor selection techniques that can be experimented with toward the selection and design of robust transfer functions that can be coupled with GCM to generate future estimates of climate change\r\n* And many other functionalities that are highlighted in the paper description of the package (to be submitted). \r\n\r\nThe main component and the work flow of the package are summarised in the modeling outline:\r\n\r\n![Model outline](./img/Model%20outline-model%20outline%20presentation.drawio.png)\r\n\r\n**Installation :hammer_and_wrench:**\r\n1. Install the standard version:\r\n   `pip install pyESD` from PyPI or git clone git@github.com:Dan-Boat/PyESD.git\r\n   `cd to the folder` | `pip install .`\r\n\r\n2. Install in editable mode:\r\n   `pip install -e pyESD` or `pip install -e .` in the package base folder clone from github\r\nThe installation might require some dependencies that must be installed if not successful from the distribution from PyPI: [cartopy](https://scitools.org.uk/cartopy/docs/latest/), [xarray](https://docs.xarray.dev/en/stable/), [sciki-learn](https://scikit-learn.org/stable/), [scipy](https://scipy.org/) and the other scientific frameworks such as NumPy, pandas, [Matplotlib](https://matplotlib.org/), and [seaborn](https://seaborn.pydata.org/)\r\n3. Alternatively, to ensure the installation in an isolated environment, virtual python environment using `conda` or `virtualenv` can be used to create a separate env for the package installation\r\n## Documentation :blue_book:\r\n\r\nThe package documentation is still in progress. The initial structure is accessible at [github-pages](https://dan-boat.github.io/PyESD/)\r\n\r\n## Examples\r\nThe package has been used for downscaling precipitation and temperature for a catchment located in southwestern Germnany. We have also used it for generating future rainfall products for all the synoptic weather stations in Ghana. Their respective control scripts are located in the [examples folder](./pyESD/examples/). Generally, the control scripts follow the modeling workflow as shown in:\r\n![Downscaling steps](./img/Model%20outline-Page-1.drawio.png). \r\nFor instance, the downscaling framework show below can be experimented with to select the robust predictor selection method and emprical transfer function for a specific location and predictand variable.\r\n![modeling framework](./img/Model%20outline-Page-2.drawio.png)\r\n\r\n**Workflow demonstration**: To use the PP-ESD model to downscale climate model, weather station and reanalysis datasets are required. The predictors are loaded in as netCDF files and the predictand as csv file. Let assume that the various predictor variables are stored locally in the `era5_datadir `directory ``/home/daniel/ERA5/`` and the predictand variable eg. precipitation is stored in `station_dir` The files should have the same timestamp as the interested predictand variable\r\n1. import all the required modules\r\n```\r\nfrom pyESD.Weatherstation import read_station_csv\r\nfrom pyESD.standardizer import MonthlyStandardizer, StandardScaling\r\nfrom pyESD.ESD_utils import store_pickle, store_csv\r\nfrom pyESD.splitter import KFold\r\nfrom pyESD.ESD_utils import Dataset\r\nfrom pyESD.Weatherstation import read_weatherstationnames\r\n\r\nimport pandas as pd \r\n```\r\n2. Read the datasets\r\n\r\n```\r\nERA5Data = Dataset('ERA5', {\r\n    't2m':os.path.join(era5_datadir, 't2m_monthly.nc'),\r\n    'msl':os.path.join(era5_datadir, 'msl_monthly.nc'),\r\n    'u10':os.path.join(era5_datadir, 'u10_monthly.nc'),\r\n    'v10':os.path.join(era5_datadir, 'v10_monthly.nc'),\r\n    'z250':os.path.join(era5_datadir, 'z250_monthly.nc'),\r\n```\r\n3. define potential predictors and radius of predictor construction, time range for model training and evaluation\r\n\r\n```\r\nradius = 100 #km\r\npredictors = [\"t2m\", \"tp\",\"msl\", \"v10\", \"u10\"]\r\n\r\nfrom1958to2010 = pd.date_range(start=\"1958-01-01\", end=\"2010-12-31\", freq=\"MS\") #training and validation\r\n\r\nfrom2011to2020 = pd.date_range(start=\"2011-01-01\", end=\"2020-12-31\", freq=\"MS\")  # testing trained data \r\n```\r\n\r\n4. Read weather stations as objects and apply the downscaling cycle attributes. Note that running the model the first time for a specific location extract the regional means using the define radius and location of the station. The extracted means are stored in a pickel files in the directory called `predictor_dir`\r\n\r\n```\r\nvariable = \"Precipitation\"\r\nSO = read_station_csv(filename=station_dir, varname=variable)\r\n        \r\n        \r\n# USING ERA5 DATA\r\n# ================\r\n\r\n\r\n#setting predictors \r\nSO.set_predictors(variable, predictors, predictordir, radius,)\r\n\r\n#setting standardardizer\r\nSO.set_standardizer(variable, standardizer=MonthlyStandardizer(detrending=False,\r\n                                                               scaling=False))\r\n\r\nscoring = [\"neg_root_mean_squared_error\",\r\n            \"r2\", \"neg_mean_absolute_error\"]\r\n\r\n#setting model\r\nregressor = \"RandomForest\"\r\nSO.set_model(variable, method=regressor, \r\n               daterange=from1958to2010,\r\n               predictor_dataset=ERA5Data, \r\n               cv=KFold(n_splits=10),\r\n               scoring = scoring)\r\n\r\n\r\n# MODEL TRAINING (1958-2000)\r\n# ==========================\r\n\r\n\r\nSO.fit(variable, from1958to2010, ERA5Data, fit_predictors=True, predictor_selector=True, \r\n            selector_method=\"Recursive\" , selector_regressor=\"ARD\",\r\n            cal_relative_importance=False)\r\n   \r\nscore_1958to2010, ypred_1958to2010 = SO.cross_validate_and_predict(variable, from1958to2010, ERA5Data)\r\n   \r\nscore_2011to2020 = SO.evaluate(variable, from2011to2020, ERA5Data)\r\n\r\nypred_1958to2010 = SO.predict(variable, from1958to2010, ERA5Data)\r\n   \r\nypred_2011to2020 = SO.predict(variable, from2011to2020, ERA5Data)\r\n\r\nypred_2011to2020.plot()\r\nplt.show()\r\n\r\n```\r\n\r\n## Package testing\r\nThe package is tested using the `unittest` framework with synthetic generated data. The testing scripts are located in the [test](./test) folder. Running  the various scripts with -v flag (higher level of verbose), would validate the modified version of the package. \r\n\r\n## Publications\r\nThe package description and application paper is currently under preparation (to be submitted to GMD)\r\nIts application for weather station in Ghana was presented at the AGU22 [Link](http://dx.doi.org/10.22541/essoar.167458059.91056213/v1) and the paper is under preparation\r\n\r\nCitation:\r\nUpload on zenodo: https://doi.org/10.5281/zenodo.7748769\r\n\r\n## Future versions\r\nThe pacakage is still in planing stage (v.0.0.1) (The stable version would be uploaded on pypi with the version number v.1.0.1)\r\n\r\n## *Collaborators are welcomed: interms of model application, model improvement, documentation and expansion of the package!*\r\n@ Daniel Boateng ([linkedin](https://www.linkedin.com/in/daniel-boateng-3892311b4/)) : **University of Tuebingen** :incoming_envelope: dannboateng@gmail.com\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dan-Boat/PyESD",
    "keywords": "PyESD",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyESD",
    "package_url": "https://pypi.org/project/PyESD/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyESD/",
    "project_urls": {
      "Homepage": "https://github.com/Dan-Boat/PyESD"
    },
    "release_url": "https://pypi.org/project/PyESD/1.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib",
      "xarray",
      "seaborn",
      "eofs",
      "statsmodels",
      "pandas",
      "sklearn",
      "tensorflow",
      "netCDF4",
      "scikit-optimize"
    ],
    "requires_python": ">=3.7",
    "summary": "Python Package for Empirical Statistical Downscaling. pyESD is under active development and all colaborators are welcomed. The purpose of the package is to downscale any climate variables e.g. precipitation and temperature using predictors from  reanalysis datasets (eg. ERA5) to point scale. pyESD adopts many ML and AL as the transfer function.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17432810,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4f26ac7b1c6943eb7fef872d6141ec571f8cdfff0fd3b77125a645c32bbe157",
          "md5": "2e9983761c67f73446e84dfd0ff3719d",
          "sha256": "70415ec48ee12fb33c4a87098f6c0a46f1aa9b0f163e2efa8606710fed59e05d"
        },
        "downloads": -1,
        "filename": "PyESD-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e9983761c67f73446e84dfd0ff3719d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 5988,
        "upload_time": "2023-03-24T15:24:48",
        "upload_time_iso_8601": "2023-03-24T15:24:48.293774Z",
        "url": "https://files.pythonhosted.org/packages/b4/f2/6ac7b1c6943eb7fef872d6141ec571f8cdfff0fd3b77125a645c32bbe157/PyESD-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a6b90b95b246a33bd86047da4a77d3fdd3d667d24132d6124cbd9cb7bb0603e",
          "md5": "2737eeec17748a85866e268a91021c6e",
          "sha256": "47c59189b2da8f0297bd7212db14c4c8b41d3db6a5059e69c9d63f1b36fbf4dd"
        },
        "downloads": -1,
        "filename": "PyESD-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2737eeec17748a85866e268a91021c6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6347,
        "upload_time": "2023-03-10T14:54:15",
        "upload_time_iso_8601": "2023-03-10T14:54:15.080976Z",
        "url": "https://files.pythonhosted.org/packages/5a/6b/90b95b246a33bd86047da4a77d3fdd3d667d24132d6124cbd9cb7bb0603e/PyESD-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e25cea9074cdee13f4c652b072059a87a39599693f54ff77f3af10ecf7413bc3",
          "md5": "0847ee111bb590bc938008089791756b",
          "sha256": "811281ce3ef75e10b14cc537df4713c021c8174ddefb27bee6e2988eaaa16f13"
        },
        "downloads": -1,
        "filename": "PyESD-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0847ee111bb590bc938008089791756b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 5995,
        "upload_time": "2023-03-24T15:24:50",
        "upload_time_iso_8601": "2023-03-24T15:24:50.158682Z",
        "url": "https://files.pythonhosted.org/packages/e2/5c/ea9074cdee13f4c652b072059a87a39599693f54ff77f3af10ecf7413bc3/PyESD-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e25cea9074cdee13f4c652b072059a87a39599693f54ff77f3af10ecf7413bc3",
        "md5": "0847ee111bb590bc938008089791756b",
        "sha256": "811281ce3ef75e10b14cc537df4713c021c8174ddefb27bee6e2988eaaa16f13"
      },
      "downloads": -1,
      "filename": "PyESD-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0847ee111bb590bc938008089791756b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 5995,
      "upload_time": "2023-03-24T15:24:50",
      "upload_time_iso_8601": "2023-03-24T15:24:50.158682Z",
      "url": "https://files.pythonhosted.org/packages/e2/5c/ea9074cdee13f4c652b072059a87a39599693f54ff77f3af10ecf7413bc3/PyESD-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}