{
  "info": {
    "author": "Youwei Zhen",
    "author_email": "anthony20151128@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "This is Project Encryption, which allows you to encrypt any strings using the Enigma Machine concepts.\nThis module can **only encrypt strings** as of now, encryption for numbers and symbols will come in the future updates.\n\n**Encryption**\n\n*Concept*\nIn order to Encrypt a string, you would need three rotor layouts.\nA rotor layout is a list consisting 26 numbers, ranging from 1-26, with each number representing a letter in the alphabet.\nFor example, in [1,2,3,4,5,...], 1 would equal A, and 2 would equal B and so on.\nYou can change the order of the numbers to enhance the description. For example: [1,26,3,9,11,20...]\n**If you do not** want to make your own list, there is an **autogenerate** option to generate a random rotor layout and random rotor position (will be explained later).\n\n*Example*\n```\nfrom EnigmaEncryption import *\n\nEnigmaMachine = EnigmaAssembly(autogenerate=True)\nencryptedText = EnigmaMachine.Encrypt(\"Example string getting encrypted\")\nprint(encryptedText)\n```\n**Output (Varies and is different each time you run it)**\nAn example of the output might be:\n```\nPadzkfj avugmg rgieasa mimknkrss\n```\n\n**Decryption**\n\n*Concept*\nIn order to Encrypt a string, you would need the three rotor layouts and the initial position for the rotors of the machine.\nThe starting position of the rotors can affect the encoding even with the same set of rotor layouts.\n\nYou can get the rotations and the rotor layouts using:\n```\nfrom EnigmaEncryption import *\n\nEnigmaMachine = EnigmaAssembly(autogenerate=True)\n\nRotations = EnigmaMachine.getRotations() //Gets the rotations of the three rotors in a dictionary. For example, Rotations[\"Rotor1\"] will get the rotation of Rotor 1, Rotations[\"Rotor2\"] will get rotations of Rotor 2.\n\nKeys = EnigmaMachine.getKeys() //Gets the rotor layouts in a dictionary. For example, Rotations[\"Rotor1\"] will get the layout of Rotor 1, Rotations[\"Rotor2\"] will get layout of Rotor 2.\n\n```\n\nTo decrypt the message, you have to input the encrypted text,  rotations and the layouts like the following code:\n\n```\nfrom EnigmaEncryption import *\n\nEnigmaMachine = EnigmaAssembly(autogenerate=True)\nRotations = EnigmaMachine.getRotations()\nKeys = EnigmaMachine.getKeys()\nRotor1 = Rotations[\"Rotor1\"] //get Rotation of rotor 1\nRotor2 = Rotations[\"Rotor2\"] //get Rotation of rotor 2\nRotor3 = Rotations[\"Rotor3\"] //get Rotation of rotor 3\nKey1 = Keys[\"Rotor1\"] //get Layout 1\nKey2 = Keys[\"Rotor2\"] //get Layout 2\nKey3 = Keys[\"Rotor3\"] //get Layout 3\n\nencryptedText = EnigmaMachine.Encrypt(\"Example string getting encrypted\")\nd = EnigmaMachine.Decrypt(encryptedText,rotation1=Rotor1,rotation2=Rotor2,rotation3=Rotor3,code1=Key1,code2=Key2,code3=Key3)\n\nprint(f\"Encrypted: {encryptedText}\")\nprint(f\"Decrypted: {d}\")\n```\n**Output (May vary)**\n```\nEncrypted: Reotmlc pvdxex mxkwpqp ekxafactt\nDecrypted: Example string getting encrypted\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "encryption",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EngimaEncryptionConcept",
    "package_url": "https://pypi.org/project/EngimaEncryptionConcept/",
    "platform": "",
    "project_url": "https://pypi.org/project/EngimaEncryptionConcept/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/EngimaEncryptionConcept/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Enigma Machine Encryption",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8491795,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b20096b620ec230fc0478a6505e3b6e872ed850c3b13556c6fcab65978919840",
          "md5": "aa7f62add19abbb24636b9486f41cf94",
          "sha256": "fddac2d1cf72ee8e4f0e5c36c19dfbcb3dd01c345e0ff375e15172c5da260c30"
        },
        "downloads": -1,
        "filename": "EngimaEncryptionConcept-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "aa7f62add19abbb24636b9486f41cf94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5028,
        "upload_time": "2020-10-24T16:30:40",
        "upload_time_iso_8601": "2020-10-24T16:30:40.521953Z",
        "url": "https://files.pythonhosted.org/packages/b2/00/96b620ec230fc0478a6505e3b6e872ed850c3b13556c6fcab65978919840/EngimaEncryptionConcept-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b20096b620ec230fc0478a6505e3b6e872ed850c3b13556c6fcab65978919840",
        "md5": "aa7f62add19abbb24636b9486f41cf94",
        "sha256": "fddac2d1cf72ee8e4f0e5c36c19dfbcb3dd01c345e0ff375e15172c5da260c30"
      },
      "downloads": -1,
      "filename": "EngimaEncryptionConcept-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "aa7f62add19abbb24636b9486f41cf94",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5028,
      "upload_time": "2020-10-24T16:30:40",
      "upload_time_iso_8601": "2020-10-24T16:30:40.521953Z",
      "url": "https://files.pythonhosted.org/packages/b2/00/96b620ec230fc0478a6505e3b6e872ed850c3b13556c6fcab65978919840/EngimaEncryptionConcept-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}