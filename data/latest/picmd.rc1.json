{
  "info": {
    "author": "ushiboy",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "picmd\n=====\n\npicmd is a framework for creating applications that request and respond to AT commands using serial communication.\n\nIts main purpose is for use with Raspberry PI.\n\n## Quick Sample\n\nCreate an instance of `PiCmd` with the `create` method and register the command handler with the `handler` decorator.\n\nStart the application with the `run` method and wait for a command request.\n\n```python\nfrom picmd import PiCmd\nimport time\n\napp = PiCmd.create('/dev/serial0')\n\n@app.handler(0x01)\ndef greeting_handler() -> str:\n    return 'hello world'\n\n@app.handler(0x02)\ndef file_receive_handler(data: bytes):\n    with open('./tmp/received-%s.bin' % int(time.time()), 'wb') as f:\n        f.write(data)\n\napp.run()\n```\n\n## AT Command Format\n\n### Command Request (Client -> Application)\n\nHexadecimal data starting with `AT*PIC=` and ending with `CRLF`.\n\nThe command type is specified by the first 8 bits.\n\nThe command parameter size is represented by the second 16 bits. Then there is the content of the command parameters.\n\nThe check parity is the XOR of the values from command type to command parameter.\n\n```\nAT*PIC=\\x01\\x04\\x00\\x01\\x00\\x00\\x00\\x04\\r\\n\n<-----><--><------><--------------><--><-->\n   \\     \\      \\     \\               \\  \\_ command end delimiter (CRLF)\n    \\     \\      \\     \\               \\_ check parity\n     \\     \\      \\     \\_ command data (The length changes depending on the value of \"command data size\")\n      \\     \\      \\_ command data size (max 0xffff)\n       \\     \\_ command (max 0xff)\n        \\_ command start prefix\n```\n\n### Command Response (Application -> Client)\n\nHexadecimal data starting with `*PIC:` and ending with `CRLF`.\n\nThe response status is specified by the first 8 bits.\n\nThe response data size is represented by the second 16 bits. Then there is the content of the response datas.\n\nThe check parity is the XOR of the values from response status to response data.\n\n#### OK\n\n```\n*PIC:\\x01\\x04\\x00\\x01\\x00\\x00\\x00\\x04\\r\\nOK\\r\\n\n<---><--><------><--------------><--><-------->\n  \\    \\      \\       \\             \\      \\_ response end delimiter\n   \\    \\      \\       \\             \\_ check parity\n    \\    \\      \\       \\_ response data (The length changes depending on the value of \"response data size\")\n     \\    \\      \\_ response data size (max 0xffff)\n      \\    \\_ response status (0x01)\n       \\_ response start prefix\n```\n\n#### ERROR\n\n```\n*PIC:\\x07\\x04\\x00\\x01\\x00\\x00\\x00\\x02\\r\\nERROR\\r\\n\n<---><--><------><--------------><--><----------->\n  \\    \\      \\       \\            \\       \\_ response end delimiter\n   \\    \\      \\       \\            \\_ check parity\n    \\    \\      \\       \\_ response data (The length changes depending on the value of \"response data size\")\n     \\    \\      \\_ response data size (max 0xffff)\n      \\    \\_ response status (values from 0x02 to 0xff)\n       \\_ response start prefix\n```\n\n#### Reserved value of response status\n\n| status | description |\n|---|---|\n| 0x01 | No error |\n| 0x02 | Invalid command format error |\n| 0x03 | Invalid parity error |\n| 0x04 | Command not found error |\n| 0x05 | Invalid data length error |\n| 0x06 | Command fail error |\n\n\n### How to confirm communication\n\nSends the following command.\n\n```\nAT\\r\\n\n```\n\nIf the next message is received in the response, the communication confirmation is successful.\n\n```\n\\r\\n\nOK\n\\r\\n\n```\n\n## Command Handler Interface\n\nThe command handler function receives the byte data of the command parameter in the first argument `data` and the size of the command parameter in the second argument `size`. It is also possible to omit either or both of these.\n\nYou can take a dependency set by the `provide` function (see later) as an argument.\n\n### Examples of handlers' arguments\n\nAn example of a case where you want to receive both data and size.\n\n```python\n@app.handler(0x01)\ndef handler(data: bytes, size: int):\n    ....\n```\n\nAn example of receiving data only.\n\n```python\n@app.handler(0x01)\ndef handler(data: bytes):\n    ....\n```\n\nExample of a case where both are not received.\n\n```python\n@app.handler(0x01)\ndef handler():\n    ....\n```\n\nAn example of receiving data and dependencies.\n\n```python\n@app.handler(0x01)\ndef handler(data: bytes, service1: Service1, service2: Service2):\n    ....\n```\n\n### When returning some kind of response\n\nReturns a value of type `bool`,` int`, `float`,`str`, or `bytes`.\n\n```python\n@app.handler(0x01)\ndef handler(data: bytes, size: int) -> Union[bool, int, float, str, bytes]:\n    ....\n    return response_data\n```\n\n### When returning no response\n\nReturns nothing.\n\n```python\n@app.handler(0x01)\ndef handler(data: bytes, size: int):\n    ....\n    # nothing return\n```\n\n### If you want to return your domain error status\n\nRaise an exception with the `status_code` attribute.\nIf you want to return error message etc. as response data, add `description` attribute.\n\n```python\nclass DomainException(Exception):\n    status_code = 0xff\n    description = 'any error message'\n\n@app.handler(0x01)\ndef handler(data: bytes, size: int):\n    ....\n    raise DomainException\n```\n\n## API\n\n### PiCmd\n\n#### `PiCmd.create(serial_port: str) -> PiCmd`\n\nTake the serial port path as an argument and create an instance.\n\n#### `@handler(command: int)`\n\nDecorator that takes a command type as an argument and registers it as a handler.\n\n#### `provide(provided: Dict[str, Any])`\n\nSpecifies the dependency to pass to the handler by dict.\nThe handler will receive the same arguments as the key name.\n\nfor example.\n\n```python\napp.provide({\n    'service1': service1,\n    'service2': service2\n})\n```\n\n#### `import_handler_register(handler_register: HandlerRegister)`\n\nImport the handlers registered in the HandlerRegister.\n\n#### `run()`\n\nStart accepting and responding to commands.\n\n### HandlerRegister\n\nIt is used to register handlers to be imported into PiCmd.\n\n#### `@handler(command: int)`\n\nDecorator that takes a command type as an argument and registers it as a handler.\n\n## Client library\n\nThe libraries for the client are as follows.\n\n* [node-picmd](https://github.com/ushiboy/node-picmd) (node.js)\n\n## Change Log\n\n### 0.7.0\n\nAdded HandlerRegister feature.\n\n### 0.6.1\n\nFixed a response bug of the PING command.\n\n### 0.6.0\n\nAdded a feature to confirm communication.\n\n### 0.5.0\n\nAdded the feature to provide dependency.\n\n### 0.4.0\n\nAdded support for omitting the arguments of the handler function.\n\n### 0.3.0\n\nChange the data format of the protocol.\n\n### 0.2.0\n\nChange request and resopnse prefix.\n\n### 0.1.0\n\nInitial release.\n\n## License\n\nMIT\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ushiboy/picmd",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "picmd",
    "package_url": "https://pypi.org/project/picmd/",
    "platform": "",
    "project_url": "https://pypi.org/project/picmd/",
    "project_urls": {
      "Homepage": "https://github.com/ushiboy/picmd"
    },
    "release_url": "https://pypi.org/project/picmd/0.7.0/",
    "requires_dist": [
      "pyserial (>=3.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "Serial Communication Framework for Raspberry PI",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7465855,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60c583f5ea6ad129d8c9e39e98fac82be759819e602bdf8898ac455e5ea8078d",
          "md5": "9f9ea6b6be44d40f652fa6509c0e488f",
          "sha256": "67a200b4112b43dda4f9b55ef31bbae20b21db2e808ff1defbd84fea8633c9e0"
        },
        "downloads": -1,
        "filename": "picmd-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f9ea6b6be44d40f652fa6509c0e488f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10413,
        "upload_time": "2020-06-13T01:13:51",
        "upload_time_iso_8601": "2020-06-13T01:13:51.228908Z",
        "url": "https://files.pythonhosted.org/packages/60/c5/83f5ea6ad129d8c9e39e98fac82be759819e602bdf8898ac455e5ea8078d/picmd-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ef3a81972a94ed0809a90a64d532c64de6c22b44d8108aaf4d663cd202b68d5",
          "md5": "d4281baff320d9699ea0fe515c1cdd8f",
          "sha256": "1c484bbc6dd940a0c8972f13327c7441ce45efa0b781525484945287f538deec"
        },
        "downloads": -1,
        "filename": "picmd-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4281baff320d9699ea0fe515c1cdd8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10153,
        "upload_time": "2020-06-13T01:13:53",
        "upload_time_iso_8601": "2020-06-13T01:13:53.561944Z",
        "url": "https://files.pythonhosted.org/packages/3e/f3/a81972a94ed0809a90a64d532c64de6c22b44d8108aaf4d663cd202b68d5/picmd-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60c583f5ea6ad129d8c9e39e98fac82be759819e602bdf8898ac455e5ea8078d",
        "md5": "9f9ea6b6be44d40f652fa6509c0e488f",
        "sha256": "67a200b4112b43dda4f9b55ef31bbae20b21db2e808ff1defbd84fea8633c9e0"
      },
      "downloads": -1,
      "filename": "picmd-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f9ea6b6be44d40f652fa6509c0e488f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10413,
      "upload_time": "2020-06-13T01:13:51",
      "upload_time_iso_8601": "2020-06-13T01:13:51.228908Z",
      "url": "https://files.pythonhosted.org/packages/60/c5/83f5ea6ad129d8c9e39e98fac82be759819e602bdf8898ac455e5ea8078d/picmd-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ef3a81972a94ed0809a90a64d532c64de6c22b44d8108aaf4d663cd202b68d5",
        "md5": "d4281baff320d9699ea0fe515c1cdd8f",
        "sha256": "1c484bbc6dd940a0c8972f13327c7441ce45efa0b781525484945287f538deec"
      },
      "downloads": -1,
      "filename": "picmd-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d4281baff320d9699ea0fe515c1cdd8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10153,
      "upload_time": "2020-06-13T01:13:53",
      "upload_time_iso_8601": "2020-06-13T01:13:53.561944Z",
      "url": "https://files.pythonhosted.org/packages/3e/f3/a81972a94ed0809a90a64d532c64de6c22b44d8108aaf4d663cd202b68d5/picmd-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}