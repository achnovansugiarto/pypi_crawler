{
  "info": {
    "author": "Ghiles Meddour",
    "author_email": "ghiles.meddour@munic.io",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Smahat Time Series Encoding\n\nSmahat allows to encode a sequence of integer values using a fixed (for all values) number of bits but minimal with regards to the data range. For example: for a series of boolean values only one bit is needed, for a series of integer percentages 7 bits are needed, etc.\n\nSmahat is useful when:\n- Time series is integer-valued. (It doesn't work with floats :))\n- The range of the data is known in advance (if not streaming, this is not necessary).\n- The data range is relatively small.\n- The data does not have properties that would make other compression algorithms useful, or these other algorithms have an unacceptable cost for the use case.\n\nSmahat can also be used as a baseline to calculate the true compression ratio of a compression algorithm on data of a certain nature.\n\n## Installation\n\nTo install the latest release:\n```\n$ pip install smahat\n```\n\nYou can also build a local package and install it:\n```\n$ make build\n$ pip install dist/*.whl\n```\n\n## Usage\n\nImport `smahat` module.\n\n```python\n>>> import smahat\n```\n\nData to encode.\n\n```python\n>>> values = [12, 0, 17, 15, 78, 10]\n```\n\n### Encoding\n\nYou can use `encode_next` to encode one value by one:\n\n```python\n>>> encoder = smahat.Encoder(min_value=0, max_value=100, strategy='saturate')\n>>> for v in values:\n...     encoder.encode_next(v)\n>>> content = encoder.get_encoded()\n>>> content\n{'encoded': b'\\x18\\x00\\x88\\xf9\\xc2\\x80', 'shift': 0, 'n_bits_per_value': 7, 'n_padding_bits': 6}\n```\n\nOr you can use `Encoder.encode_all` to encode all values (range min and max will be inferred from values if not provided):\n```python\n>>> content = smahat.Encoder.encode_all(values, min_value=0, max_value=100, strategy='saturate')\n>>> content\n{'encoded': b'\\x18\\x00\\x88\\xf9\\xc2\\x80', 'shift': 0, 'n_bits_per_value': 7, 'n_padding_bits': 6}\n```\n\n### Decoding\n\nTo decode use `Decoder.decode_all`.\n\n```python\n>>> smahat.Decoder.decode_all(content)\n[12, 0, 17, 15, 78, 10]\n```\n\n## Encoding result\n\nThe result of the encoding of a sequence of values using Smahat is a `SmahatContent` dictionary containing the `encoded` data, plus three fields : `shift` is used to bring the data range to start from zero (values are shifted and encoded in pure binary), `n_bits_per_value` indicates the number of bits used to encode each value, `n_padding_bits` (between 0 and 7) indicates the number of unused padding bits within the last byte.\n\n```python\nclass SmahatContent(TypedDict):\n    encoded: bytes\n    shift: int\n    n_bits_per_value: int\n    n_padding_bits: int\n```\n\nIf you want to use this library for message exchanges, you can serialize the result of the encoding as you like (JSON, protobuf, etc.)\n\n## Contribute\n\n```\n$ git clone https://github.com/ghilesmeddour/smahat-time-series-encoding.git\n$ cd smahat-time-series-compression\n```\n\n```\nmake format\nmake dead-code-check\nmake test\nmake type-check\nmake coverage\nmake build\n```\n\n### TODOs\n\n- [ ] Add unit tests.\n- [ ] Improve doc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ghilesmeddour/smahat-time-series-encoding",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smahat",
    "package_url": "https://pypi.org/project/smahat/",
    "platform": "",
    "project_url": "https://pypi.org/project/smahat/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ghilesmeddour/smahat-time-series-encoding/issues",
      "Homepage": "https://github.com/ghilesmeddour/smahat-time-series-encoding"
    },
    "release_url": "https://pypi.org/project/smahat/0.0.1/",
    "requires_dist": [
      "bitarray"
    ],
    "requires_python": ">=3.8",
    "summary": "Smahat Time Series Encoding",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11150463,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebf9ae5ee8eb12b020cc3db31a4a2f56e5bfda888ebb26b1abae8fd886de7f1",
          "md5": "feb44c264432bf9be73fb81e30a04eae",
          "sha256": "64c30db6a1fd969d5b9097cc56748add3d931f95df38e08e67e25216985d5109"
        },
        "downloads": -1,
        "filename": "smahat-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feb44c264432bf9be73fb81e30a04eae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5916,
        "upload_time": "2021-08-11T13:48:08",
        "upload_time_iso_8601": "2021-08-11T13:48:08.759252Z",
        "url": "https://files.pythonhosted.org/packages/1e/bf/9ae5ee8eb12b020cc3db31a4a2f56e5bfda888ebb26b1abae8fd886de7f1/smahat-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85a290ebe682dfd3cef0fc69b01f49324eca996325f55f198e7c80851692fbb4",
          "md5": "1227515d497baab257af58952b04729d",
          "sha256": "ef7382309e1692d8bb91bfcf373f54be989c6cd722ef63efc2a41c8b10e1f92e"
        },
        "downloads": -1,
        "filename": "smahat-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1227515d497baab257af58952b04729d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5402,
        "upload_time": "2021-08-11T13:48:09",
        "upload_time_iso_8601": "2021-08-11T13:48:09.949433Z",
        "url": "https://files.pythonhosted.org/packages/85/a2/90ebe682dfd3cef0fc69b01f49324eca996325f55f198e7c80851692fbb4/smahat-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ebf9ae5ee8eb12b020cc3db31a4a2f56e5bfda888ebb26b1abae8fd886de7f1",
        "md5": "feb44c264432bf9be73fb81e30a04eae",
        "sha256": "64c30db6a1fd969d5b9097cc56748add3d931f95df38e08e67e25216985d5109"
      },
      "downloads": -1,
      "filename": "smahat-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "feb44c264432bf9be73fb81e30a04eae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 5916,
      "upload_time": "2021-08-11T13:48:08",
      "upload_time_iso_8601": "2021-08-11T13:48:08.759252Z",
      "url": "https://files.pythonhosted.org/packages/1e/bf/9ae5ee8eb12b020cc3db31a4a2f56e5bfda888ebb26b1abae8fd886de7f1/smahat-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85a290ebe682dfd3cef0fc69b01f49324eca996325f55f198e7c80851692fbb4",
        "md5": "1227515d497baab257af58952b04729d",
        "sha256": "ef7382309e1692d8bb91bfcf373f54be989c6cd722ef63efc2a41c8b10e1f92e"
      },
      "downloads": -1,
      "filename": "smahat-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1227515d497baab257af58952b04729d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 5402,
      "upload_time": "2021-08-11T13:48:09",
      "upload_time_iso_8601": "2021-08-11T13:48:09.949433Z",
      "url": "https://files.pythonhosted.org/packages/85/a2/90ebe682dfd3cef0fc69b01f49324eca996325f55f198e7c80851692fbb4/smahat-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}