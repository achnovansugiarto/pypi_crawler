{
  "info": {
    "author": "Dmytro Mishkin",
    "author_email": "ducha.aiki@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# brown_phototour_revisited\n> The package for local patch descriptors evaluation, which takes into account image indexes  and second nearest neighbor ratio (SNN) filtering strategy. So, it evaluates descriptors in a similar way, how they are used in practice. It is in agreement with <a href='https://arxiv.org/abs/2003.01587'>IMC benchmark</a>, unlike the original protocol. The benchmark is not \"test benchmark\" by amy means. Rather it is intended to be used as validation/development set for local patch descriptor learning and/or crafting.\n\n\n## Install\n\n`pip install brown_phototour_revisited`\n\n## How to use\n\nThere is a single function, which does everything for you: `full_evaluation`. The original Brown benchmark consider evaluation, similar to cross-validation: train descriptor on one subset, evaluate on two others, repeat for all, so 6 evaluations are required. For the handcrafted descriptors, or those, that are trained on 3rd party datasets, only 3 evaluations are necessary.  We are following it here as well.\n\nHowever, if you need to run some tests separately, or reuse some functions -- we will cover the usage below.\nIn the following example we will show how to use `full_evaluation` to evaluate SIFT descriptor as implemented in kornia.\n\n```\n# !pip install kornia\n```\n\n```\nimport torch\nimport kornia\nfrom IPython.display import clear_output\nfrom brown_phototour_revisited.benchmarking import *\npatch_size = 65 \n\nmodel = kornia.feature.SIFTDescriptor(patch_size, rootsift=True).eval()\n\ndescs_out_dir = 'data/descriptors'\ndownload_dataset_to = 'data/dataset'\nresults_dir = 'data/mAP'\n\nresults_dict = {}\nresults_dict['Kornia RootSIFT'] = full_evaluation(model,\n                                'Kornia RootSIFT',\n                                path_to_save_dataset = download_dataset_to,\n                                path_to_save_descriptors = descs_out_dir,\n                                path_to_save_mAP = results_dir,\n                                patch_size = patch_size, \n                                device = torch.device('cuda:0'), \n                           distance='euclidean',\n                           backend='pytorch-cuda')\nclear_output()\nprint_results_table(results_dict)\n```\n\n    ------------------------------------------------------------------------------\n    Mean Average Precision wrt Lowe SNN ratio criterion on UBC Phototour Revisited\n    ------------------------------------------------------------------------------\n    trained on       liberty notredame  liberty yosemite  notredame yosemite\n    tested  on           yosemite           notredame            liberty\n    ------------------------------------------------------------------------------\n    Kornia RootSIFT        56.70              47.71               48.09 \n    ------------------------------------------------------------------------------\n\n\n## Precomputed benchmark results\n\nWe have pre-computed some results for you. The implementation is in the following notebooks in the [examples](examples/) dir:\n\n- [Deep descriptors](examples/evaluate_deep_descriptors.ipynb)\n- [Non-deep descriptors](examples/evaluate_non_deep_descriptors.ipynb)\n\nThe final tables are the following:\n\n\n    ------------------------------------------------------------------------------\n    Mean Average Precision wrt Lowe SNN ratio criterion on UBC Phototour Revisited\n    ------------------------------------------------------------------------------\n    trained on       liberty notredame  liberty yosemite  notredame yosemite\n    tested  on           yosemite           notredame            liberty\n    ------------------------------------------------------------------------------\n    Kornia RootSIFT 32px   58.24              49.07               49.65 \n    HardNet 32px       70.64  70.31        61.93  59.56        63.06  61.64\n    SOSNet 32px        70.03  70.19        62.09  59.68        63.16  61.65\n    TFeat 32px         65.45  65.77        54.99  54.69        56.55  56.24\n    SoftMargin 32px    69.29  69.20        61.82  58.61        62.37  60.63\n    HardNetPS 32px         55.56              49.70               49.12 \n    R2D2_center_grayscal   61.47              53.18               54.98 \n    R2D2_MeanCenter_gray   62.73              54.10               56.17 \n    ------------------------------------------------------------------------------\n\n    ------------------------------------------------------------------------------\n    Mean Average Precision wrt Lowe SNN ratio criterion on UBC Phototour Revisited\n    ------------------------------------------------------------------------------\n    trained on       liberty notredame  liberty yosemite  notredame yosemite\n    tested  on           yosemite           notredame            liberty\n    ------------------------------------------------------------------------------\n    Kornia SIFT 32px       58.47              47.76               48.70 \n    OpenCV_SIFT 32px       53.16              45.93               46.00 \n    Kornia RootSIFT 32px   58.24              49.07               49.65 \n    OpenCV_RootSIFT 32px   53.50              47.16               47.37 \n    OpenCV_LATCH 65px  -----  -----        -----  37.26        -----  39.08\n    OpenCV_LUCID 32px      20.37              23.08               27.24 \n    skimage_BRIEF 65px     52.68              44.82               46.56 \n    Kornia RootSIFTPCA 3 60.73  60.64        50.80  50.24        52.46  52.02\n    MKD-concat-lw-32 32p 72.27  71.95        60.88  58.78        60.68  59.10\n    ------------------------------------------------------------------------------\n\n\n\n### Disclaimer 1: don't trust this table fully\n\n\nI haven't (yet!) checked if all the deep descriptors models, trained on Brown, were trained with flip-rotation 90 degrees augmentation. In the code below I assume that they were, however, it might not be true -- and the comparison might not be completely fair. I will do my best to check it, but if you know that I have used wrong weights - please open an issue. Thank you. \n\n\n### Disclaimer 2: it is not \"benchmark\".\n\n\nThe intended usage of the package is not to test and report the numbers in the paper. Instead think about is as cross-validation tool, helping the development. Thus, one CAN tune hyperparameters based on the benchmark results  instead of doing so on [HPatches](https://github.com/hpatches/hpatches-benchmark). After you have finished tuning, please, evaluate your local descriptors on some downstream task like [IMC image matching benchmark](https://github.com/vcg-uvic/image-matching-benchmark) or [visual localization](https://www.visuallocalization.net/).\n\n\n**If you found any mistake, please open an issue**\n\n# Detailed examples of usage\n\nThere are 3 main modules of the package: `dataset`, `extraction` and `benchmarking`. \n\nTo run the benchmark manually one needs two things:\n - extract the descriptors with either `extract_pytorchinput_descriptors` or `extract_numpyinput_descriptors`\n - get the mean average precision (mAP) with `evaluate_mAP_snn_based`\n\nHere we will show how to evaluate several descriptors: Pytorch-based HardNet, OpenCV SIFT, skimage BRIEF.\n\nThe code below will download the HardNet, trained on Liberty dataset, download the Notredame subset and extracts the local patch descriptors into the dict. Note, that we should not evaluate descriptor on the same subset, as it was trained on.\n\n```\nimport torch\nimport kornia\n\nfrom brown_phototour_revisited.dataset import *\nfrom brown_phototour_revisited.extraction import *\nfrom brown_phototour_revisited.benchmarking import *\n\nmodel = kornia.feature.HardNet(True).eval()\n\ndescs_out_dir = 'data/descriptors'\ndownload_dataset_to = 'data/dataset'\npatch_size = 32 # HardNet expects 32x32 patches\n\ndesc_dict = extract_pytorchinput_descriptors(model,\n                                'HardNet+Liberty',\n                                subset= 'notredame', \n                                path_to_save_dataset = download_dataset_to,\n                                path_to_save_descriptors = descs_out_dir,\n                                patch_size = patch_size, \n                                device = torch.device('cuda:0'))\n```\n\n    # Found cached data data/dataset/notredame.pt\n    data/descriptors/HardNet+Liberty_32px_notredame.npy already exists, loading\n\n\n```\nprint (desc_dict.keys())\n```\n\n    dict_keys(['descriptors', 'labels', 'img_idxs'])\n\n\nFunction `extract_pytorchinput_descriptors` expects `torch.nn.Module`, which takes `(B, 1, patch_size, patch_size)` `torch.Tensor` input and outputs `(B, desc_dim)` `torch.Tensor`.\n\nNow we will calculate mAP.\n\n```\nmAP = evaluate_mAP_snn_based(desc_dict['descriptors'],\n                             desc_dict['labels'], \n                             desc_dict['img_idxs'],\n                             path_to_save_mAP = 'data/mAP/HardNet+Liberty_notredame.npy',\n                            backend='pytorch-cuda')\nprint (f'HardNetLib mAP on Notredame = {mAP:.5f}')\n```\n\n    Found saved results data/mAP/HardNet+Liberty_notredame.npy, loading\n    HardNetLib mAP on Notredame = 0.61901\n\n\nNow we will evaluate OpenCV SIFT descriptor. \nFunction `extract_numpyinput_descriptors` expects function or object, which takes (patch_size, patch_size) input and outputs (desc_dim) np.array.\n\nAs OpenCV doesn't provide such function, we will create it ourselves, or rather take already implemented from [HPatches benchmark repo](https://github.com/hpatches/hpatches-benchmark/blob/master/python/extract_opencv_sift.py#L43)\n\n```\nimport cv2\nimport numpy as np\npatch_size = 65\n\n# https://github.com/hpatches/hpatches-benchmark/blob/master/python/extract_opencv_sift.py#L43\ndef get_center_kp(PS=65.):\n    c = PS/2.0\n    center_kp = cv2.KeyPoint()\n    center_kp.pt = (c,c)\n    center_kp.size = PS/5.303\n    return center_kp\n\n\nsift = cv2.SIFT_create()\ncenter_kp = get_center_kp(patch_size)\n\ndef extract_opencv_sift(patch):\n    #Convert back to UINT8 and provide aux keypoint in the center of the patch\n    return sift.compute((255*patch).astype(np.uint8),[center_kp])[1][0].reshape(128)\n\ndescs_out_dir = 'data/descriptors'\ndownload_dataset_to = 'data/dataset'\n\n\ndesc_dict_sift = extract_numpyinput_descriptors(extract_opencv_sift,\n                                'OpenCV_SIFT',\n                                subset= 'notredame', \n                                path_to_save_dataset = download_dataset_to,\n                                path_to_save_descriptors = descs_out_dir,\n                                patch_size = patch_size)\n```\n\n    # Found cached data data/dataset/notredame.pt\n    data/descriptors/OpenCV_SIFT_65px_notredame.npy already exists, loading\n\n\n```\nmAP_SIFT = evaluate_mAP_snn_based(desc_dict_sift['descriptors'],\n                             desc_dict_sift['labels'], \n                             desc_dict_sift['img_idxs'],\n                            path_to_save_mAP = 'data/mAP/OpenCV_SIFT65_notredame.npy',\n                            backend='pytorch-cuda')\nprint (f'OpenCV SIFT PS = {patch_size}, mAP on Notredame = {mAP_SIFT:.5f}')\n```\n\n    Found saved results data/mAP/OpenCV_SIFT65_notredame.npy, loading\n    OpenCV SIFT PS = 65, mAP on Notredame = 0.45530\n\n\nNow, let's try some binary descriptor, like BRIEF. Evaluation so far supports two metrics: `\"euclidean\"` and\n`\"hamming\"`.\n\nFunction `extract_numpyinput_descriptors` expects function or object, which takes `(patch_size, patch_size)` input and outputs `(desc_dim)` `np.array`.\n\nAs skimage doesn't provide exactly such function, we will create it ourselves by placing \"detected\" keypoint in the center of the patch.\n\n```\nimport numpy as np\nfrom skimage.feature import BRIEF\npatch_size = 65\nBR = BRIEF(patch_size = patch_size)\ndef extract_skimage_BRIEF(patch):\n    BR.extract(patch.astype(np.float64), np.array([patch_size/2.0, patch_size/2.0]).reshape(1,2))\n    return BR.descriptors.astype(np.float32)\n\ndesc_dict_brief = extract_numpyinput_descriptors(extract_skimage_BRIEF,\n                                'skimage_BRIEF',\n                                subset= 'notredame', \n                                path_to_save_dataset = download_dataset_to,\n                                path_to_save_descriptors = descs_out_dir,\n                                patch_size = patch_size)\n```\n\n    # Found cached data data/dataset/notredame.pt\n    data/descriptors/skimage_BRIEF_65px_notredame.npy already exists, loading\n\n\nThat's will take a while. \n\n```\nmAP_BRIEF = evaluate_mAP_snn_based(desc_dict_brief['descriptors'].astype(np.bool),\n                             desc_dict_brief['labels'], \n                             desc_dict_brief['img_idxs'],\n                             path_to_save_mAP = 'data/mAP/skimageBRIEF_notredame.npy',\n                             backend='numpy',\n                             distance='hamming')\nprint (f'skimage BRIEF PS = {patch_size}, mAP on Notredame = {mAP_BRIEF:.5f}')\n```\n\n    Found saved results data/mAP/skimageBRIEF_notredame.npy, loading\n    skimage BRIEF PS = 65, mAP on Notredame = 0.44817\n\n\n### Loading cached results\n\nYou can also directly load already calculated results from cache without creating a model by using function `load_cached_results`\n\n```\nfrom brown_phototour_revisited.benchmarking import load_cached_results\ndesc_name = 'HardNet'\npatch_size = 32\ndesc_dict =  load_cached_results(desc_name,\n                    learned_on = ['liberty', 'notredame', 'yosemite'],\n                    path_to_save_dataset = download_dataset_to,\n                    path_to_save_descriptors = descs_out_dir,\n                    path_to_save_mAP = results_dir,\n                    patch_size = patch_size)\n\nresults_dict[f'{desc_name} {patch_size}px'] = desc_dict\nclear_output()\nprint_results_table(results_dict)\n```\n\n    ------------------------------------------------------------------------------\n    Mean Average Precision wrt Lowe SNN ratio criterion on UBC Phototour Revisited\n    ------------------------------------------------------------------------------\n    trained on       liberty notredame  liberty yosemite  notredame yosemite\n    tested  on           yosemite           notredame            liberty\n    ------------------------------------------------------------------------------\n    Kornia RootSIFT        56.70              47.71               48.09 \n    HardNet 32px       70.64  70.31        61.93  59.56        63.06  61.64\n    ------------------------------------------------------------------------------\n\n\nIf you use the benchmark, please cite it:\n\n    @misc{BrownRevisited2020,\n      title={UBC PhotoTour Revisied},\n      author={Mishkin, Dmytro},\n      year={2020},\n      url = {https://github.com/ducha-aiki/brown_phototour_revisited}\n    }\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ducha-aiki/brown_phototour_revisited/tree/master/",
    "keywords": "evaluation,local patches,local descriptors,SIFT,HardNet",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brown-phototour-revisited",
    "package_url": "https://pypi.org/project/brown-phototour-revisited/",
    "platform": "",
    "project_url": "https://pypi.org/project/brown-phototour-revisited/",
    "project_urls": {
      "Homepage": "https://github.com/ducha-aiki/brown_phototour_revisited/tree/master/"
    },
    "release_url": "https://pypi.org/project/brown-phototour-revisited/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "The package for local patch descriptors evaluation, which takes into account image indexes and second nearest neighbor ratio (SNN) filtering strategy. It is in agreement with IMC benchmark and practice, unlike the original protocol.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8262167,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c3168d93a88b92e1f2bee991954ee86a239603103cc29fdb4b861d997471975",
          "md5": "61cb83510ca065f4eb7f692b0ee1a564",
          "sha256": "bf50fb7b5b24ec81b8673337290b2cbe325174c2315d3900cc1d0f8c97f56b3f"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61cb83510ca065f4eb7f692b0ee1a564",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14014,
        "upload_time": "2020-09-11T17:05:25",
        "upload_time_iso_8601": "2020-09-11T17:05:25.770780Z",
        "url": "https://files.pythonhosted.org/packages/1c/31/68d93a88b92e1f2bee991954ee86a239603103cc29fdb4b861d997471975/brown_phototour_revisited-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8b49e293c1118bb1da897b04bb06bba06b0e9388d2fab8d372607fd579a446",
          "md5": "1ce7f20dff7de0cd6d9e28402b514fa1",
          "sha256": "3dd4ddd341bfe03ff8c972e3da7fb7c2570276b5ca259d160efd8677c1f0a378"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce7f20dff7de0cd6d9e28402b514fa1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16097,
        "upload_time": "2020-09-11T17:05:38",
        "upload_time_iso_8601": "2020-09-11T17:05:38.329989Z",
        "url": "https://files.pythonhosted.org/packages/bb/8b/49e293c1118bb1da897b04bb06bba06b0e9388d2fab8d372607fd579a446/brown_phototour_revisited-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a567bc137a1b096692c3f4b059f0a06d98ce437883b0cdb2ef78b423c051e74",
          "md5": "6a0485f67ae18cb64e655ba7c439a86e",
          "sha256": "445a97f986b060f4f8c8108408d970cb37d5faa6db0ce77ededdf603ec29945f"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a0485f67ae18cb64e655ba7c439a86e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14419,
        "upload_time": "2020-09-11T19:52:29",
        "upload_time_iso_8601": "2020-09-11T19:52:29.348749Z",
        "url": "https://files.pythonhosted.org/packages/2a/56/7bc137a1b096692c3f4b059f0a06d98ce437883b0cdb2ef78b423c051e74/brown_phototour_revisited-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2c48ee7abdf77e547111606061269ad726fbdee752d3ffa19bf7c99e8e708d1",
          "md5": "535fcae55509053d769d5bd324a0d91e",
          "sha256": "1d8b05fccfc6a5842a4efbec7458836c0438ed5e48512cc0ddc88eaa059a32b7"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "535fcae55509053d769d5bd324a0d91e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17371,
        "upload_time": "2020-09-11T19:52:30",
        "upload_time_iso_8601": "2020-09-11T19:52:30.887661Z",
        "url": "https://files.pythonhosted.org/packages/b2/c4/8ee7abdf77e547111606061269ad726fbdee752d3ffa19bf7c99e8e708d1/brown_phototour_revisited-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b47b0e9142e18ea6d41b37875bb9006d7fcd0d962b0e8f61c908ecf4d4623ae",
          "md5": "0026d739841753756f22e75a8cce3cf4",
          "sha256": "ae8ef3d53584c44e42380abe171bc7fcbba59fea54dcc30f8153ddb70c89e70d"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0026d739841753756f22e75a8cce3cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14421,
        "upload_time": "2020-09-11T20:01:53",
        "upload_time_iso_8601": "2020-09-11T20:01:53.034915Z",
        "url": "https://files.pythonhosted.org/packages/9b/47/b0e9142e18ea6d41b37875bb9006d7fcd0d962b0e8f61c908ecf4d4623ae/brown_phototour_revisited-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a6014c386304f96e0d1c4ac1781197b2300f35f6fade43c1093a7fc2dcf510a",
          "md5": "dd44fea8714c86d6e42b54a092641b30",
          "sha256": "fc1317849a33a80209d2f1cddf71a3182718941e99acb67a5dd05e79ce7843fb"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dd44fea8714c86d6e42b54a092641b30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17377,
        "upload_time": "2020-09-11T20:01:55",
        "upload_time_iso_8601": "2020-09-11T20:01:55.016834Z",
        "url": "https://files.pythonhosted.org/packages/2a/60/14c386304f96e0d1c4ac1781197b2300f35f6fade43c1093a7fc2dcf510a/brown_phototour_revisited-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2fde0161fc63c512bf95eee3c42d62ce2085f1d13aa5bd0362a00b98ad13dd9",
          "md5": "8e190e29df7d338271b0eebf8a9de768",
          "sha256": "9d845a63315d6789e8b9b2ba2df0fab0088c4a9c1e48688f49915964a6e4d8bf"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e190e29df7d338271b0eebf8a9de768",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16851,
        "upload_time": "2020-09-16T15:46:16",
        "upload_time_iso_8601": "2020-09-16T15:46:16.229290Z",
        "url": "https://files.pythonhosted.org/packages/d2/fd/e0161fc63c512bf95eee3c42d62ce2085f1d13aa5bd0362a00b98ad13dd9/brown_phototour_revisited-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee38532b66456f40f306fdf9b90b4d6aa73bd57e02c5a879fc39a7262cab00c",
          "md5": "153eb072ba2beb5a96e3192e555c579f",
          "sha256": "2b34cc743e4a247d8312ecb137dd3ee6edba73e0651203550a064a0c47c91e03"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "153eb072ba2beb5a96e3192e555c579f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21653,
        "upload_time": "2020-09-16T15:46:17",
        "upload_time_iso_8601": "2020-09-16T15:46:17.963069Z",
        "url": "https://files.pythonhosted.org/packages/6e/e3/8532b66456f40f306fdf9b90b4d6aa73bd57e02c5a879fc39a7262cab00c/brown_phototour_revisited-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f386a50c895a169002dc3e8f9edd0f3fff628966ece150eab9404033d20d61f",
          "md5": "979a6584b6bd31cd19cb397196e99515",
          "sha256": "4574f72f9c4fa0c5f3d4acc25a3743a95e16a46cd65483072cacad1202092ef8"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "979a6584b6bd31cd19cb397196e99515",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16823,
        "upload_time": "2020-09-24T13:49:37",
        "upload_time_iso_8601": "2020-09-24T13:49:37.826785Z",
        "url": "https://files.pythonhosted.org/packages/2f/38/6a50c895a169002dc3e8f9edd0f3fff628966ece150eab9404033d20d61f/brown_phototour_revisited-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "635f7363273a785da97da58e510c419261070c1e95d99ce732bb6a52292d3160",
          "md5": "c567da5917bb33faf17b9cb11319578d",
          "sha256": "b835cec20d8fc47c66e2496cd9549eb90d267979b155087c3b23067e813ab46f"
        },
        "downloads": -1,
        "filename": "brown_phototour_revisited-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c567da5917bb33faf17b9cb11319578d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21354,
        "upload_time": "2020-09-24T13:49:39",
        "upload_time_iso_8601": "2020-09-24T13:49:39.182473Z",
        "url": "https://files.pythonhosted.org/packages/63/5f/7363273a785da97da58e510c419261070c1e95d99ce732bb6a52292d3160/brown_phototour_revisited-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f386a50c895a169002dc3e8f9edd0f3fff628966ece150eab9404033d20d61f",
        "md5": "979a6584b6bd31cd19cb397196e99515",
        "sha256": "4574f72f9c4fa0c5f3d4acc25a3743a95e16a46cd65483072cacad1202092ef8"
      },
      "downloads": -1,
      "filename": "brown_phototour_revisited-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "979a6584b6bd31cd19cb397196e99515",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16823,
      "upload_time": "2020-09-24T13:49:37",
      "upload_time_iso_8601": "2020-09-24T13:49:37.826785Z",
      "url": "https://files.pythonhosted.org/packages/2f/38/6a50c895a169002dc3e8f9edd0f3fff628966ece150eab9404033d20d61f/brown_phototour_revisited-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "635f7363273a785da97da58e510c419261070c1e95d99ce732bb6a52292d3160",
        "md5": "c567da5917bb33faf17b9cb11319578d",
        "sha256": "b835cec20d8fc47c66e2496cd9549eb90d267979b155087c3b23067e813ab46f"
      },
      "downloads": -1,
      "filename": "brown_phototour_revisited-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c567da5917bb33faf17b9cb11319578d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21354,
      "upload_time": "2020-09-24T13:49:39",
      "upload_time_iso_8601": "2020-09-24T13:49:39.182473Z",
      "url": "https://files.pythonhosted.org/packages/63/5f/7363273a785da97da58e510c419261070c1e95d99ce732bb6a52292d3160/brown_phototour_revisited-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}