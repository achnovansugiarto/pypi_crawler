{
  "info": {
    "author": "Freemelt AB",
    "author_email": "opensource@freemelt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<!--\nSPDX-FileCopyrightText: 2022 Freemelt AB <opensource@freemelt.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# OBFlib-Python\n\nOBFlib-Python is a Python library for verifying, reading and manipulating OBF files. It also has an\naccompanying command-line utility, `obftool`.\n\nOBF (Open Build File) is a format that works as a blueprint and recipe for building objects in an\nelectron beam powder bed fusion (E-PBF) 3D printer.\n\n## Installation\n\n### Bullseye\n\nOBFlib-Python can be installed as a Debian package on Debian Bullseye. The package resides in the\npublic apt repository:\n\n```shell\necho \"deb http://apt.opensource.freemelt.com/debian bullseye main\" | sudo tee -a /etc/apt/sources.list.d/freemelt.list > /dev/null\ncurl http://apt.opensource.freemelt.com/debian/archive.gpg.key | sudo tee /etc/apt/trusted.gpg.d/freemelt-opensource.gpg > /dev/null\n\nsudo apt update\nsudo apt install python3-obflib\n```\n\n_NOTE: The above commands for installation on Debian Bullseye currently do not work since there is no\nworking pipeline for publishing to the Bullseye channel on the public apt repository. It should\nhowever work to just replace `bullseye` with `buster` in the first command, since the same OBFLib\npackage works on both Buster on Bullseye._\n\n### Debian Buster\n\nOBFlib-Python can also be installed as a Debian package on Debian Buster but requires extra steps.\n\n```shell\necho \"deb http://apt.opensource.freemelt.com/debian buster main\" | sudo tee -a /etc/apt/sources.list.d/freemelt.list > /dev/null\ncurl http://apt.opensource.freemelt.com/debian/archive.gpg.key | sudo tee /etc/apt/trusted.gpg.d/freemelt-opensource.gpg > /dev/null\n\necho 'deb http://deb.debian.org/debian buster-backports main' | sudo tee -a /etc/apt/sources.list > /dev/null\necho 'deb http://deb.debian.org/debian bullseye main' | sudo tee -a /etc/apt/sources.list > /dev/null\n\nsudo tee /etc/apt/preferences.d/buster-first.pref > /dev/null << EOF\nPackage: *\nPin: release n=bullseye\nPin-Priority: -1\n\nPackage: python3-jsonschema\nPin: release n=buster-backports\nPin-Priority: 500\n\nPackage: python3-semantic-version\nPin: release n=bullseye\nPin-Priority: 500\nEOF\n\nsudo apt update\nsudo apt install python3-obflib\n```\n\nObflib can also be installed through pip via\n[GitLab's internal package registry](https://docs.gitlab.com/ee/user/packages/pypi_repository/index.html#install-a-pypi-package).\n\n```shell\npip3 install --index-url https://gitlab.com/api/v4/projects/33702591/packages/pypi/simple obflib\n```\n\n## API Documentation\n\nOnce obflib is installed as a Debian package, its API documentation can be viewed with the following\ncommand:\n\n```shell\nobftool api-docs\n```\n\n## Usage\n\nObflib can be used as a Python library or with the command-line tool `obftool`.\n\n### Python example\n\n```\n>>> import obflib\n>>> messages = obflib.verify(\"openbuildfile/examples/standard.obf\")\n>>> messages.to_json()\n'{\"errors\": {}, \"warnings\": {}, \"isValid\": true}'\n>>> messages.is_valid()\nTrue\n>>> with obflib.OBF(\"openbuildfile/examples/standard.obf\") as obf:\n...     manifest = obf.manifest()\n...     build_info = obf.build_info()\n...\n>>> manifest['name']\n'Test Rod'\n>>> len(build_info['layers'])\n2\n```\n\n### Command-line examples\n\nVerify an OBF:\n\n```\n> obftool verify openbuildfile/examples/standard.obf\nThe file openbuildfile/examples/standard.obf appears to be a valid OBF file.\n> obftool verify openbuildfile/examples/invalid.obf\nERRORS in openbuildfile/examples/invalid.obf:\nmanifest.json/modules/defect-detector: 'modules/freemelt_defect_detector/modulez.json' does not exist in the OBF\nmanifest.json: 'version' is a required property\nbuildInfo.json/files/preHeat: 'nonexistent-file.obp' does not exist in the OBF\nbuildInfo.json/files/file7: 'obp/file7.obp' does not exist in the OBF\nbuildProcessors/buildProcessors.json/buildProcessors/simple/version: 'latest' is not a valid npm semver range. See https://github.com/npm/node-semver#ranges.\nbuildProcessors/buildProcessors.json/buildProcessors/complexer/entryPoint: 'buildProcessors/bob/bob-complex.lua' does not exist in the OBF\nbuildProcessors/buildProcessors.json/buildProcessors/complexer/args: '[amount=40]' is not of type 'array'\nmachineCapabilities.json/buildModule/platform: 760 is not of type 'object'\nmodules/freemelt_nir_thermometer/module.json: 'author' is a required property\n\nWarnings in openbuildfile/examples/invalid.obf:\nmanifest.json/author: This recommended property is missing\nmanifest.json/license: This recommended property is missing\nmodules/freemelt_nir_thermometer/module.json: An object in this file contains duplicates of the key 'license'\nmodules/freemelt_defect_detector/module.json: This file appears to be unused\n\nThe file openbuildfile/examples/invalid.obf is not a valid OBF file.\n```\n\nConverting a BOSS configuration to an OBF using the proof-of-concept converter:\n\n```\n> obftool convert path/to/BOSS_files/ converted.obf\nAdding obp: path/to/BOSS_files/TestBars11Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars13Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars7Layer1.obp\nAdding obp: path/to/BOSS_files/preheat.obp\nAdding obp: path/to/BOSS_files/plateheat.obp\nAdding obp: path/to/BOSS_files/TestBars0Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars3Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars6Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars15Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars1Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars14Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars10Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars9Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars4Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars2Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars12Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars5Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars8Layer1.obp\nAdding obp: path/to/BOSS_files/postheat.obp\nDone! Wrote OBF to 'converted.obf'.\n```\n\nConverting a BOSS configuration to an OBF using the proof-of-concept converter with a custom Lua\nscript and setting a custom name:\n\n```\n> obftool convert path/to/BOSS_files/ converted.obf --bob-script example=build.lua --name 'Custom Build'\nUsing name 'Custom Build'\nUsing build script 'build.lua' as 'example'\nAdding obp: path/to/BOSS_files/TestBars11Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars13Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars7Layer1.obp\nAdding obp: path/to/BOSS_files/preheat.obp\nAdding obp: path/to/BOSS_files/plateheat.obp\nAdding obp: path/to/BOSS_files/TestBars0Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars3Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars6Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars15Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars1Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars14Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars10Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars9Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars4Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars2Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars12Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars5Layer1.obp\nAdding obp: path/to/BOSS_files/TestBars8Layer1.obp\nAdding obp: path/to/BOSS_files/postheat.obp\nDone! Wrote OBF to 'converted.obf'.\n```\n\n## Contributing\n\nOBFlib-Python uses docker compose to set up a development environment. Follow the below steps\nfor getting started with contributing to OBFlib-Python.\n\n### Prerequisites\n\nFirst install Docker and Docker Compose. If you are on Ubuntu, the following steps should do it:\n\n```bash\nsudo apt remove docker docker-engine docker.io containerd runc\nsudo apt update\nsudo apt install ca-certificates curl gnupg lsb-release\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt update\nsudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin\nsudo usermod -aG docker $USER\n```\n\nThe last line above is needed in order to run the tests without password.\nTo get the added group working for your user, you can log out and in, or:\n\n```bash\nexec su -l $USER\n```\n\n### Set up the development environment\n\nSet up the basic development environment using the following command:\n\n```shell\nmake prepare-dev\n```\n\nNote: You might have to add pip's user site bin directory to `$PATH` for the above command to work.\nOn e.g. Ubuntu, this is done by adding the following line to `~/.bashrc` or equivalent:\n\n```\nexport PATH=~/.local/bin:$PATH\n```\n\nIn general, commands for running tests, linting, etc. should be run in the Docker container started\nby `make prepare-dev`. This can be accomplished in (at least) two ways: Either by entering a bash\nshell inside the container:\n\n```shell\nmake enter-docker\n```\n\nOr by running just the desired command inside the container:\n\n```shell\ndocker compose exec debian <command>\n```\n\n### Testing\n\nTest any changes by running the command:\n\n```commandline\nmake test\n```\n\n### Linting\n\nCheck code style and formatting with the following command:\n\n```commandline\nmake lint\n```\n\nThese checks will also be performed automatically on each commit with the pre-commit hooks that are\ninstalled with `make prepare-dev`.\n\n### Generating API documentation\n\nThe API documentation can be generated and previewed with\n\n```commandline\ndocker compose exec debian make api-docs\nxdg-open api-docs/index.html\n```\n\nThe API documentation is also built automatically for every CI pipeline. The above command therefore\ndoes not normally need to be run unless you need the documentation locally.\n\n### Releasing\n\nAll new commits are built and packaged to be published on the public Debian repository on the\nunstable \"branch\".\n\nTo publish a packaged stable version of the library, tag it (use `-a` for an annotated tag) and a\nDebian package will be published on the public Debian repository on the stable \"branch\". For this\nto trigger, the tag must start with `v`. Update `debian/changelog` using `dch` before releasing. For\nexample:\n\n```shell\ndch --newversion 0.5.0 -D stable -m\ngit commit ... # First, commit as usual\ngit tag -a v0.5.0\ngit push --follow-tags\n```\n\n### Dependencies\n\nWhen adding dependencies to the project, they are to be added both in setup.py as pip packages and\nin Dockerfile as debian packages. In the dockerfile they are to be added alongside the other debian\npackages.\n\nThe dh-python tool translates the dependencies in setup.py to debian package names when we build a\ndeb package. The duplication between setup.py and the Dockerfile is to ensure that the development\nenvironment is using the same versions as the actual machine.\n\n### CI\n\nThe CI environment currently has no mechanism for building the Docker image as part of the pipeline.\nThus, the image used in CI needs to be kept up-to-date manually.\n\nWhenever a change is made in the dockerfiles or related files, rebuild and push the Docker images\nwith\n\n```shell\nmake docker-push\n```\n\n### IDE setup\n\n#### VS Code\n\nMake sure that there is no venv folder in the directory and\ninstall [Remote - Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)\n\nTo open the directory through docker press ctrl+shift+p and write the\ncommand `Remote-Containers: Open Folder in Container...`.\n\nThis enables testing and debugging through VSCode in the docker container. Testing can be easily\nconfigured by following the steps in the testing panel.\n\n#### PyCharm\n\nFor proper integration with PyCharm, the Professional version is needed.\n\nYou also need to have the command `docker-compose` version installed, as opposed to the newer version which is invoked\nwith `docker compose` (notice the space). If you installed Docker through the official APT repository on Ubuntu, this\ncan be accomplished by just installing the package `docker-compose`. Both versions can coexist without any problems.\n\nTo set it up, **add a new interpreter** by going to  _Settings_ -> _Project: nir-temperature-sensor_ -> _Python Interpreter_\nand clicking at the settings icon and then `Add`. Then select `Docker Compose`. If necessary, add a Docker server (the default settings should be fine\nif you're not doing anything special). Set _Service_ to `debian` and _Python interpreter path_ to `python3`.\n\nNow you should be able to run scripts and tests, as well as debug them, from within PyCharm.\nNote that whenever you start a script (including any test), PyCharm restarts the Docker Compose service running the gRPC\nserver. This means that you will have to start it again afterwards if you want it to keep running.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/freemelt/openmelt/obflib-python",
    "keywords": "obf openbuildfile freemelt",
    "license": "apache-2.0",
    "maintainer": "Freemelt AB",
    "maintainer_email": "opensource@freemelt.com",
    "name": "obflib",
    "package_url": "https://pypi.org/project/obflib/",
    "platform": null,
    "project_url": "https://pypi.org/project/obflib/",
    "project_urls": {
      "Homepage": "https://gitlab.com/freemelt/openmelt/obflib-python"
    },
    "release_url": "https://pypi.org/project/obflib/0.3.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python library for verifying, reading and manipulating OBF files for use in metal 3D printers from Freemelt AB",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17127327,
  "releases": {
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47266909e6307f3168bf384b71652403829b3ec1e199e6c8ab6156b52ec0506c",
          "md5": "7a23103c3f9afeb00f4f73c0335e8eb7",
          "sha256": "21edcded91774a26a1284b74974fdd23b8d059514e269cef9870c81bf6f65497"
        },
        "downloads": -1,
        "filename": "obflib-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7a23103c3f9afeb00f4f73c0335e8eb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26135,
        "upload_time": "2023-03-02T13:21:45",
        "upload_time_iso_8601": "2023-03-02T13:21:45.659538Z",
        "url": "https://files.pythonhosted.org/packages/47/26/6909e6307f3168bf384b71652403829b3ec1e199e6c8ab6156b52ec0506c/obflib-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47266909e6307f3168bf384b71652403829b3ec1e199e6c8ab6156b52ec0506c",
        "md5": "7a23103c3f9afeb00f4f73c0335e8eb7",
        "sha256": "21edcded91774a26a1284b74974fdd23b8d059514e269cef9870c81bf6f65497"
      },
      "downloads": -1,
      "filename": "obflib-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7a23103c3f9afeb00f4f73c0335e8eb7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26135,
      "upload_time": "2023-03-02T13:21:45",
      "upload_time_iso_8601": "2023-03-02T13:21:45.659538Z",
      "url": "https://files.pythonhosted.org/packages/47/26/6909e6307f3168bf384b71652403829b3ec1e199e6c8ab6156b52ec0506c/obflib-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}