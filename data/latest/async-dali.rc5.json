{
  "info": {
    "author": "Bruce Cooper",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "This is a python package that facilitates reading from and control over a [DALI (IEC 62386)](https://www.dali-alliance.org/) protocol bus using a USB adapter such as the [Tridonic USB](https://www.tridonic.com/com/en/products/dali-usb.asp) adapter. \n\nThe intention for this package is that it will be used to add DALI support to [Home Assistant](https://www.home-assistant.io/)\n\n\n\n# Approach\nDALI uses a short addressing scheme, assigning every device on the bus a number between 0 and 63 inclusive.  But these addresses can change if a re-address operation is performed.  Instead, when a device is created by this library, it determines a unique identifier by concatenating three pieces of information:\n\n1. The Device [GTIN](https://www.gtin.info/)\n2. The device's serial number\n3. The logical enpoint number. A single device might house more than one gear endpoint. For example, a [Tridonic 4 channel relay](https://www.tridonic.com/com/en/products/DALI-RMS-4x10A.asp) advertises itself as 4 separate devices, but each one will have the same GTIN and serial number.\n\nAll of this information is loaded in from memory bank 0 of the device (see [this article](https://infosys.beckhoff.com/english.php?content=../content/1033/tcplclib_tc3_dali/6940982539.html&id=) for more details.).  The unique Id isn't particularly human readable, but it will remain static for the lifetime of that device.\n\nwhen dealing with devices, you should always use the `unique_id` property to refer to devices.  That way they'll still work if a re-address is done or the device is moved to another bus.\n\n\n# Usage\nAll useage starts with the Bus Transciever.  This is the component that interfaces to USB and will send/receive commands.  This class exclusively uses asyncio.\n\nDrivers can be explicitly opened using the constructor, or scanned for using ```scan_for_dali_transcievers()``` which will return a list of all auto-discovered drivers. \n\nThese drivers are also intended to pick up commands that are issued by other devices on the bus.  This is important to keep any visible state displayed to a user in sync with what has happened, without having to do a lot of polling (which will use up more power).  to listen to events on the bus, call `add_message_callback()` on the bus transciever.  However, if you just want to send commands and get responses back, you don't need to use the callback system. \n\n\n## Example\n\n```py\nfrom async_dali import TridonicDali\nimport asyncio\n\n\nasync def testit():\n    busses = TridonicDali.scan_for_transcievers()\n    if len(busses) == 0:\n        raise Exception(\"No DALI transciever found\")\n    \n    print(\"Opening first discovered bus\", busses[0])\n    async with busses[0] as bus:\n        print(\"Scanning for gear\")\n        gear = await bus.scan_for_gear()\n\n        if len(gear) == 0:\n            raise Exception(\"No gear found on the bus\")\n        g = gear[0]\n        print(\"Toggling\", g.unique_id)\n\n        # Toggle the light on then off again\n        await g.on()\n        await asyncio.sleep(2)\n        await g.off()\n    print(\"Done\")\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n\n    loop.run_until_complete(testit())\n    loop.close()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brucejcooper/py_async_dali",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-dali",
    "package_url": "https://pypi.org/project/async-dali/",
    "platform": null,
    "project_url": "https://pypi.org/project/async-dali/",
    "project_urls": {
      "Homepage": "https://github.com/brucejcooper/py_async_dali"
    },
    "release_url": "https://pypi.org/project/async-dali/0.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A module to discover devices and send commands to DALI enabled lights",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17008042,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cf03cfcb73cc49f2bb629ebea617783d28a8920f85557a6f06514261fdc7a39",
          "md5": "be138ce6cc1f0cb63f4ad9afe8b306e5",
          "sha256": "e003b1e4adfe9d1da0adac5a84d297db5091e00474dc07113dcce17bfb6cbffb"
        },
        "downloads": -1,
        "filename": "async_dali-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be138ce6cc1f0cb63f4ad9afe8b306e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15187,
        "upload_time": "2023-02-13T05:25:24",
        "upload_time_iso_8601": "2023-02-13T05:25:24.992943Z",
        "url": "https://files.pythonhosted.org/packages/5c/f0/3cfcb73cc49f2bb629ebea617783d28a8920f85557a6f06514261fdc7a39/async_dali-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b6a5dc7d1166b8f4f58f5e9b898b1a41f552c38d43cd148d8ebf6c80c09defe",
          "md5": "90a45b4034a3ee3bc98dbd31f7b1a2ea",
          "sha256": "c5eea2653274ce3b5fa4441498efd444d265a313dda5aa51ea4a7541d6ef9668"
        },
        "downloads": -1,
        "filename": "async_dali-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "90a45b4034a3ee3bc98dbd31f7b1a2ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14937,
        "upload_time": "2023-02-13T05:26:53",
        "upload_time_iso_8601": "2023-02-13T05:26:53.519361Z",
        "url": "https://files.pythonhosted.org/packages/3b/6a/5dc7d1166b8f4f58f5e9b898b1a41f552c38d43cd148d8ebf6c80c09defe/async_dali-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "768488bf600e94a3facaba5ab03b15e0a6b9e3ab29ce5044bbc48f0ffe24bff5",
          "md5": "10fa7b7724c348244a93fce440abd9ad",
          "sha256": "bef87a6228d299394c83f885b4f6288ae4e1eff1ee4a5572995823df0b841549"
        },
        "downloads": -1,
        "filename": "async_dali-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "10fa7b7724c348244a93fce440abd9ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14882,
        "upload_time": "2023-02-13T06:01:41",
        "upload_time_iso_8601": "2023-02-13T06:01:41.144386Z",
        "url": "https://files.pythonhosted.org/packages/76/84/88bf600e94a3facaba5ab03b15e0a6b9e3ab29ce5044bbc48f0ffe24bff5/async_dali-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62d839ed0c01b1295d9f922e01466d3afa431fda32911af57991919be7930ced",
          "md5": "368eb5f9968d868c673cf0a365e2ab5f",
          "sha256": "3485e6e4155f1b97379a92b10c7ff775f3489428515035e3ab9f8e4c27df995e"
        },
        "downloads": -1,
        "filename": "async_dali-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "368eb5f9968d868c673cf0a365e2ab5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15216,
        "upload_time": "2023-02-13T06:27:08",
        "upload_time_iso_8601": "2023-02-13T06:27:08.411973Z",
        "url": "https://files.pythonhosted.org/packages/62/d8/39ed0c01b1295d9f922e01466d3afa431fda32911af57991919be7930ced/async_dali-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28dc6568be8d20f5744a235c6993b15406c3013207b7eb625f2b53528c75dc46",
          "md5": "d1b3ec46a1452fe53df4bbe490873851",
          "sha256": "45afb64ef2e7ef0742263243619fae11b714da070755eb401e069b57166aea7c"
        },
        "downloads": -1,
        "filename": "async_dali-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d1b3ec46a1452fe53df4bbe490873851",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19594,
        "upload_time": "2023-02-24T08:56:17",
        "upload_time_iso_8601": "2023-02-24T08:56:17.169337Z",
        "url": "https://files.pythonhosted.org/packages/28/dc/6568be8d20f5744a235c6993b15406c3013207b7eb625f2b53528c75dc46/async_dali-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28dc6568be8d20f5744a235c6993b15406c3013207b7eb625f2b53528c75dc46",
        "md5": "d1b3ec46a1452fe53df4bbe490873851",
        "sha256": "45afb64ef2e7ef0742263243619fae11b714da070755eb401e069b57166aea7c"
      },
      "downloads": -1,
      "filename": "async_dali-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "d1b3ec46a1452fe53df4bbe490873851",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19594,
      "upload_time": "2023-02-24T08:56:17",
      "upload_time_iso_8601": "2023-02-24T08:56:17.169337Z",
      "url": "https://files.pythonhosted.org/packages/28/dc/6568be8d20f5744a235c6993b15406c3013207b7eb625f2b53528c75dc46/async_dali-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}