{
  "info": {
    "author": "Roberto Neves",
    "author_email": "robertonsilva@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Portuguese (Brazilian)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet",
      "Topic :: Office/Business",
      "Topic :: Utilities"
    ],
    "description": "\n\n\n# SDK Python3 para Integração com Juno\n\nEsta SDK foi desenvolvida para abstrair aos desenvolvedores os principais detalhes da comunicação com API v2 da Juno tanto em [produção](https://juno.com.br/#) quanto em ambiente [sandbox](https://sandbox.juno.com.br/#).\n\nVocê pode acessar a documentação base da api aqui: [Api V2 Juno](https://dev.juno.com.br/api/v2).\n\n![Licença](https://img.shields.io/github/license/robertons/junopy) ![image](https://img.shields.io/pypi/v/junopy) ![image](https://img.shields.io/pypi/status/junopy) ![image](https://img.shields.io/badge/python-v3.7-blue) ![image](https://img.shields.io/badge/build-passing-brightgreen) ![image](https://img.shields.io/badge/coverage-100%25-brightgreen) ![image](https://img.shields.io/github/last-commit/robertons/junopy)\n\n# Instalação\nInstalação utilizando Pip\n```bash\npip install junopy\n```\nGit/Clone\n```\ngit clone https://github.com/robertons/junopy\ncd junopy\npip install -r requirements.txt\npython setup.py install\n```\n# Objetos\n\nOs objetos neste SDK podem ser criados em 3 (três) formas distintas a critério do utilizador.\n\n## Criação\n\n**Método 1 - Construção**\n```python\nobjeto = Objeto(campo1 = 'valor', campo2 = 'valor 2', campo_datetime = datetime.now(), campo_float = 10.1)\n```\n**Método 2 - Construção com Dicionário**\n```python\nobjeto = Objeto(**{'campo1':'valor', 'campo2':'valor 2', 'campo_datetime':datetime.now(), 'campo_float' = 10.1})\n```\n**Método 3 - Pós-Construção**\n```python\nobjeto = Objeto()\nobjeto.campo1 = 'valor'\nobjeto.campo2 = 'valor 2'\nobjeto.campo_datetime = datetime.now()\nobjeto.campo_float = 10.1\n```\n##  Método toJSON\n\nMétodo toJSON() retorna os dados do Objeto em formato *diciciontario* não codificados.\n\n```python\nobjeto = Objeto(...)\nprint(objeto.toJSON())\n```\n\n\n## Configuração Inicial\n|posição  | campo |  obrigatório | padrão | descrição |\n|--|--|--|--|--|\n| 1 | private_token | **sim** |  | Token Privado Juno\n| 2 | clientId | **sim** |  | Id Cliente\n| 3 | clientSecret | **sim** |  | Chave Cliente\n| 4 | sandbox | **não** | **False** | Ambiente Produção/Sandbox\n| 5 | debug | **não** | **False** | Depuração Request Post, Get, Put, Patch e Delete\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET', sandbox=True)\n```\n### Obtenção de TOKEN\n\nCada token com permissão de acesso ao servidor de serviço tem validade de 1 hora, a recomendação da Juno é que um novo Token seja gerado apenas em caso de expiração. A instancia gerada administra isso automaticamente, contudo a função *GetToken* permite obter o token para que os dados sejam utilizado em outras instâncias.  Este processo **não é obrigatório, mas é recomendável** principalmente em sistemas onde serão **criadas novas instâncias junopy a cada transação**\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#section/Servidor-de-Autorizacao)**\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\njunopy.GetToken()\ntoken_valido_1h = junopy.TOKEN\n```\n\n### Definição Token de Acesso - Usando dados gerados anteriormente\n\nÉ possível definir manualmente os dados de acesso através da função *SetToken*\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\njunopy.SetToken('access_token', 'token_type', 'expires')\n```\n# Utilidades\n\n **Lista de Bancos**\n```python\nbancos = junopy.util.Banks()\n```\n**Lista de Tipos de Empresas**\n```python\ntipos_empresas = junopy.util.CompanyTypes()\n```\n**Tipos de Negócios**\n```python\ntipos_empresas = junopy.util.BusinessAreas()\n```\n**Chave Publica de Criptografia**\n```python\nchave_publica = junopy.util.PublicKey()\n```\n\n**Validação Webhook**\n\nTodo Webhook recebido da Juno traz consigo uma assinatura no header da `Requisição Post`. A assinatura é um hash para validar a autenticidade do conteúdo.  \n\nAo criar um Webhook é gerado uma chave que deve ser armazenada em segurança e utilizada neste processo.  \n\n**Leia atentamente como funciona o processo em [Criação e Assinatura de Webhook](https://dev.juno.com.br/api/v2#operation/createWebhook)**\n\n| campo | tipo | obrigatório |\n|--|--|--|\n| x_signature | string | **sim** |\n| body_content | bytes |**sim** |\n| secret | string |**sim** |\n\no retorno da função será `True` ou `False`\n```python\nwebhook_valido = junopy.util.IsValidWebhook(x_signature, body_content, secret)\n```\n\n# Conta Digital\n\nA seção compreende:\n-   Criação de contas digitais\n-   Consulta de contas digital\n-   Alteração de dados da conta digital\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Contas-Digitais)**\n\n### Criação\n\nNo exemplo abaixo foram utilizados os 3 métodos de criação de objeto de formas distintas:\n\n**Após o preenchimento do Objeto o comando Create, realiza o Post na ApiV2.**\n\n```python\n\tconta = junopy.DigitalAccount()\n    conta.name = \"Usuário Teste\"\n    conta.document = \"123.456.789-00\"\n    conta.email = \"usu.teste@email.com\"\n    conta.birthDate = \"1980-01-01\" #\n    conta.phone = \"9999999999\"\n    conta.businessArea = 2015\n    conta.linesOfBusiness = \"INDIVIDUAL\"\n\n    conta.address = junopy.Address(**{\n    \t\t'street': 'Nome da Rua',\n    \t\t'number': '01',\n    \t\t'complement': 'Casa',\n    \t\t'neighborhood': 'Bairro',\n    \t\t'city': 'Cidade',\n    \t\t'state': 'UF',\n    \t\t'postCode': '99999999'\n    })\n\n    conta_bancaria =  junopy.BankAccount()\n    conta_bancaria.bankNumber = \"000\"\n    conta_bancaria.agencyNumber = \"1111\"\n    conta_bancaria.accountNumber = \"22334455\"\n    conta_bancaria.accountComplementNumber = \"0\"\n    conta_bancaria.accountType = \"CHECKING\"\n    conta_bancaria.accountHolder = junopy.AccountHolder(name='Usuario Teste', document='00000000000')\n    conta.bankAccount = conta_bancaria\n\n    conta.Create()\n```\n\n### Consulta\n```python\n\tconta = junopy.DigitalAccount(id='dac_E6FECDB17EAC5992').Get()\n```\n\n** Consulta de conta digital criada a partir do token privado da conta digital**\n\n```python\n\tconta_digital_criada = junopy.DigitalAccount(id='dac_E6FECDB17EAC5992', resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').Get()\n```\n\n### Atualização\n```python\n\tconta = junopy.DigitalAccount()\n\tconta.id = \"dac_E6FECDB17EAC5992\"\n\tconta.resourceToken = '8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9'\n\tconta.address = junopy.Address(\n    \t\tstreet = 'Nome da Rua',\n    \t\tnumber = '01',\n    \t\tcomplement = 'Casa',\n    \t\tneighborhood = 'Bairro',\n    \t\tcity = 'Cidade',\n    \t\tstate = 'UF',\n    \t\tpostCode = '99999999'\n    })\n\tconta.Update()\n```\n\n##  Soluções Whitelabel\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Novo-Onboarding)**\n\n###   Novo Onboarding - Somente Envio de Documentos\n\n```python\nonboarding = junopy.onboarding.Documents(\n        returnUrl=\"https://www.website.com.br/documents\",\n        refreshUrl=\"https://www.website.com.br/invalid\")\n```\n\n###  Novo Onboarding - Solução Completa Conta e Envio de Documentos\n\n```python\nonboarding = junopy.onboarding.Account(\n        referenceId='id_proprio',\n        returnUrl=\"https://www.website.com.br/documents\",\n        refreshUrl=\"https://www.website.com.br/invalid\"\n    )\n```\n\n#  Documentos\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Documentos)**\n\n**Consulta**\n\n```python\ndocumentos_esperados = junopy.Document(id='dac_E6FECDB17EAC5993').Get()\n```\n**Consulta de outra Conta Digital (Resource)**\n\n```python\ndocumentos_esperados = junopy.Document(id='dac_E6FECDB17EAC5992', resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').Get()\n```\n\n**Lista Documentos**\n\n```python\ndocumentos_esperados = junopy.Document().Get()\n```\n\n**Lista Documentos de outra Conta Digital (Resource)**\n\n```python\ndocumentos_esperados = junopy.Document(resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').Get()\n```\n\n## Envio de Documentos/Arquivos\n\n**Método path do arquivo**\nUma array de string contendo o caminho local do arquivo\n\n```python\ndocumentos_esperados = junopy.Document(\n        id='doc_AD1E698AB61CF185',\n        resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').SendFiles(['arquivo_1.pdf', 'arquivo_2.pdf'])\n```\n\n**Método BufferedReader do arquivo**\nUma array com tuplas onde posição 0 é o nome do arquivo e posição 1 os BufferedReader\n\n```python\ndocumentos_esperados = junopy.Document(\n        id='doc_AD1E698AB61CF185', resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').SendFiles([('arquivo_1.pdf', file_buffered)])\n\n```\n\n**Método bytes do arquivo**\nUma array com tuplas onde posição 0 é o nome do arquivo e posição 1 os bytes\n\n```python\ndocumentos_esperados = junopy.Document(\n        id='doc_AD1E698AB61CF185', resourceToken='8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9').SendFiles([('arquivo_1.pdf', file_bytes)])\n\n```\n\n# Saldo\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Saldo)**\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\nsaldo = junopy.Balance()\n```\n> {'balance': 0.0, 'withheldBalance': 0.0, 'transferableBalance': 0.0}\n\n**ou de outra conta digital**\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\nsaldo = junopy.Balance(resourceToken = '8A596ED1DEB738091FDE8AF11CCD6E7730970A95503AB32CEA340FAB190139C9')\n```\n\n# Transferência\n\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Transferencias)**\n\n\n### Conta Bancária Padrão\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\ntransfer = junopy.transfers.Default(100.0)\n```\n### Transferência P2P\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\n#P2P(name:str, document:str, amount:float, accountNumber:str)\ntransfer = junopy.transfers.P2P('Nome', 'CPF/CNPJ', 100.0, 'NUMERO_CONTA_2P')\n```\n\n### Transferência Bancária\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\n#Bank(name:str, document:str, amount:float, bank:BankAccount)\n\nconta_bancaria =  junopy.BankAccount()\nconta_bancaria.bankNumber = \"000\"\nconta_bancaria.agencyNumber = \"1111\"\nconta_bancaria.accountNumber = \"22334455\"\nconta_bancaria.accountComplementNumber = \"0\"\nconta_bancaria.accountType = \"CHECKING\"\ntransfer = junopy.transfers.Bank('Nome', 'CPF/CNPJ', 100.0, conta_bancaria)\n```\n\n\n### Transferência PIX\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\n#Pix(name:str, document:str, amount:float, bank:BankAccount)\ntransfer = junopy.transfers.Pix('Nome', 'CPF/CNPJ', 100.0, junopy.BankAccount(\n\tispb='0000000',\n\tbankNumber=\"000\",\n\tagencyNumber=\"1111\",\n\taccountNumber=\"22334455\",\n\taccountComplementNumber=\"0\",\n\taccountType=\"SAVINGS\"\n}))\n```\n\n# Notificações\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Notificacoes)**\n\n\n### Listar Tipos de Eventos\n\nRetorna uma lista de objetos `EventType`\n\n| Tipo de Evento | Descrição |\n|--|--|\n| DIGITAL_ACCOUNT_STATUS_CHANGED | Mudanças de  _status_  de uma conta digital |\n| DIGITAL_ACCOUNT_CREATED | Confirmação de criação de uma conta digital -  **Válido somente para a solução Whitelabel** |\n| DOCUMENT_STATUS_CHANGED | Mudanças de  _status_  de um documento da conta digital |\n| TRANSFER_STATUS_CHANGED | Mudanças de  _status_  de uma transferência |\n| P2P_TRANSFER_STATUS_CHANGED | Mudanças de  _status_  de uma transferência P2P |\n| CHARGE_STATUS_CHANGED | Mudanças de  _status_  de uma cobrança emitida |\n| CHARGE_READ_CONFIRMATION | Confirmação de leitura/visualização de uma cobrança |\n| PAYMENT_NOTIFICATION | Pagamento de uma cobranças |\n\n```python\nimport junopy\nevents = junopy.EventTypes()\n```\n# Webhooks\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#operation/createWebhook)**\n\n### Criação\nCria e retorna um objeto `Webhook`\n\n```python\nimport junopy\n\njunopy.Juno('PRIVATE_TOKEN', 'CLIENT_ID', 'CLIENT_SECRET')\n#Webhook().Create(url:str, eventTypes:list)\nwebhook = junopy.Webhook().Create(\"https://url.segura_recebe_notificacao.com\", [\"DIGITAL_ACCOUNT_CREATED\", \"DIGITAL_ACCOUNT_STATUS_CHANGED\"])\n```\n\n### Listar webhooks\n\n```python\nwebhooks = junopy.Webhooks()\n```\n\n### Consultar Webhooks\n\n```python\nwebhooks = junopy.Webhook(id='wbh_6D7EF263A2755055').Get()\n```\n\n### Atualizar Webhooks\n\n```python\n#Webhook().Update(status:str, eventTypes:list)\nwebhook = junopy.Webhook(id='wbh_6D7EF263A2755055').Update(\"INACTIVE\", [\"DIGITAL_ACCOUNT_CREATED\", \"DIGITAL_ACCOUNT_STATUS_CHANGED\"])\n```\n\n### Excluir Webhooks\n\n```python\nwebhook = junopy.Webhook(id='wbh_6D7EF263A2755055').Delete()\n```\n\n# Cobranças\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#tag/Cobrancas)**\n\n## Criar Cobrança\n\n```python\ncobranca = junopy.charges.Create(\n            junopy.Charge(\n                description = 'Cobrança Teste',\n                amount = 10.0,\n                paymentTypes = ['BOLETO', 'CREDIT_CARD']\n            ),\n            junopy.Billing(\n                name = 'Nome do Usuário',\n                document = 'CPF',\n                email = 'email',\n                address = junopy.Address(\n                    street= 'Rua',\n            \t\tnumber='Numero',\n            \t\tcomplement='Complemento',\n            \t\tneighborhood='Bairro',\n            \t\tcity='Cidade',\n            \t\tstate='UF',\n            \t\tpostCode='99999999'\n                ),\n                phone = '99999199999',\n                notify = False\n            )\n        )\n```\n\nO Retorno será uma lista objeto `ChargeResource`\n\n\n## Listar Cobrança\n\nÉ possível realizar buscas  utilizando filtros, veja na documentação oficial: [(Documentação)](https://dev.juno.com.br/api/v2#operation/listCharges)\n\nDevolve 20 cobranças por páginas, podendo ser estendido até 100 páginas com `pageSize=100`.\n\n```python\nbusca = junopy.charges.Search()\n```\n**ou**\n```python\nbusca = junopy.charges.Search(pageSize=100)\n```\n**ou**\n\n```python\nbusca = junopy.charges.Search(createdOnStart='2021-07-10')\n```\nA partir da primeira busca é possível navegar pelas páginas superiores/inferiores através dos métodos `Next` e `Previous`\n\n**Para avançar:**\n```python\nproxima = junopy.charges.Next()\n```\n\n**Para voltar:**\n```python\nanterior = junopy.charges.Previous()\n```\n\n## Consultar Cobrança\n\n```python\ncobranca = junopy.charges.Get(id=\"chr_8C87D875719FE478195F5AE32309F77B\")\n```\n\n## Cancelar Cobrança\n\n```python\njunopy.charges.Cancel(id=\"chr_8C87D875719FE478195F5AE32309F77B\")\n```\n\n## Atualizar Split\n\n```python\njunopy.charges.SetSplit(id=\"chr_8C87D875719FE478195F5AE32309F77B\", split=[\n        junopy.Split(\n            recipientToken = \"Token\",\n            amount = 10.0,\n            amountRemainder = True,\n            chargeFee= True),\n        junopy.Split(\n            recipientToken = \"Token2\",\n            amount = 10.0,\n            amountRemainder = False,\n            chargeFee= True)\n        ])\n```\n\n# Checkout Transparente\n\n## Tokenizar Cartão\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#operation/tokenizeCreditCard)**\n\n```python\ncartao_credito = junopy.creditcard.Tokenize(hash=\"0210da66-6c54-4f3b-9e95-9e044be38d79\")\n```\n\n## Checkout Transparente\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#operation/createPayment)**\n\n```python\n\n    # CRIAÇÃO DE COBRANÇA\n    cobranca = junopy.charges.Create(\n            junopy.Charge(\n                description = 'Produto Exemplo',\n                amount = 340.0,\n                paymentTypes = ['CREDIT_CARD']\n            ),\n            junopy.Billing(\n                name = 'Usuario Teste',\n                document = 'cpf',\n                email = 'usuario@email.com.br',\n                address = junopy.Address(\n                    \t\tstreet = 'Endereco',\n                    \t\tnumber = 'Numero',\n                    \t\tcomplement = 'Complemento',\n                    \t\tneighborhood = 'Bairro',\n                    \t\tcity = 'Cidade',\n                    \t\tstate = 'UF',\n                    \t\tpostCode = '99999999'),\n                phone = '99999999999',\n                notify = False\n            )\n        )\n\n    # PROCESSAMENTO DE PAGAMENTO\n    if len(cobranca) > 0:\n        pagamento = junopy.payment.Create(\n            chargeId = cobranca[0].id,\n            creditcard =  junopy.CreditCard(\n                    creditCardId = '9a453d71-3ec1-44a5-b2f3-0596ced42a35'\n                ),\n            billing = junopy.Billing(\n                    name = 'Usuario Teste',\n                    email = 'usuario@email.com.br',\n                    address = junopy.Address(\n                    \t\tstreet = 'Endereco',\n                    \t\tnumber = 'Numero',\n                    \t\tcomplement = 'Complemento',\n                    \t\tneighborhood = 'Bairro',\n                    \t\tcity = 'Cidade',\n                    \t\tstate = 'UF',\n                    \t\tpostCode = '99999999'),\n                    delayed = False\n                )\n        )\n\n```\n\n\n## Estornar transações de cartão de crédito\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#operation/refundPaymenta)**\n\n### Integral\n```python\n estorno = junopy.payment.Refund(paymentId='pay_BDBBF5F40B8B94F23DB2117904EB4B08')\n```\n\n### Parcial\n```python\nestorno = junopy.payment.Refund(paymentId='pay_BDBBF5F40B8B94F23DB2117904EB4B08', amount=40.00)\n```\n\n### Split\n```python\nestorno = junopy.payment.Refund(paymentId='pay_BDBBF5F40B8B94F23DB2117904EB4B08', amount=40.00, split=[\n\t\tjunopy.Split(\n            recipientToken=\"Token\",\n            amount=10.0,\n            amountRemainder=True,\n            chargeFee=True),\n        junopy.Split(\n            recipientToken=\"Token2\",\n            amount=10.0,\n            amountRemainder=False,\n            chargeFee=True)])\n```\n\n## Capturar pagamento de cartão de crédito\n\n**Mais detalhes em [Documentação Oficial](https://dev.juno.com.br/api/v2#operation/capturePayment)**\n\n\n### Integral\n```python\n captura = junopy.payment.Capture(paymentId='pay_BDBBF5F40B8B94F23DB2117904EB4B08')\n```\n\n### Parcial\n```python\ncaptura = junopy.payment.Capture(paymentId='pay_BDBBF5F40B8B94F23DB2117904EB4B08', amount=100.00)\n```\n\n# Planos e Assinaturas\n\n## Planos\n\n### Criar Plano\n\n```python\nplano = junopy.Plan(name=\"Plano Teste\", amount=100.00).Create()\n```\n\n\n### Consultar Plano\n\n```python\nplano = junopy.Plan(id='pln_76A6AC4929EF068B').Get()\n```\n\n### Listar Plano\n\n```python\nplanos = junopy.Plan().Get()\n```\n\n\n### Desativar Plano\n\n```python\nplano = junopy.Plan(id='pln_76A6AC4929EF068B').Deactivate()\n```\n\n### Reativar Plano\n\n```python\nplano = junopy.Plan(id='pln_76A6AC4929EF068B').Reactivate()\n```\n\n## Assinaturas\n\n### Criar Assinatura\n\n```python\nassinatura = junopy.Subscription(\n        dueDay=10,\n        planId='pln_76A6AC4929EF068B',\n        chargeDescription='Assinatura Recorrente Plano de Teste',\n        creditCardDetails=junopy.CreditCard(\n            creditCardId='9a453d71-3ec1-44a5-b2f3-0596ced42a35'\n        ),\n        billing=junopy.Billing(\n            name='Usuario Teste',\n            document='cpf',\n            email='usuario@email.com.br',\n            address=junopy.Address(\n                street='Rua',\n                number='numero',\n                complement='completemento',\n                neighborhood='bairro',\n                city='cidade',\n                state='UF',\n                postCode='99999999')),\n            notify=False\n    ).Create()\n```\n\n\n### Consultar Assinatura\n\n```python\nassinatura = junopy.Subscription(id='sub_EDA3F6CA13DFEC4C').Get()\n```\n\n### Listar Assinaturas\n\n```python\nassinaturas = junopy.Subscription().Get()\n```\n\n### Desativar Assinatura\n\n```python\nassinatura = junopy.Subscription(id='sub_EDA3F6CA13DFEC4C').Deactivate()\n```\n\n### Reativar Assinatura\n\n```python\nassinatura = junopy.Subscription(id='sub_EDA3F6CA13DFEC4C').Reactivate()\n```\n\n### Cancelar Assinatura\n\n```python\nassinatura = junopy.Subscription(id='sub_EDA3F6CA13DFEC4C').Cancel()\n```\n\n### Completar Assinatura\n\n```python\nassinatura = junopy.Subscription(id='sub_EDA3F6CA13DFEC4C').Complete()\n```\n\n# Pagar Contas\n\n\n```python\npagamento_conta = junopy.Bill(\n        numericalBarCode=\"00190500954014481606906809350314337370000001000\",\n        paymentDescription=\"Boleto Bancário\",\n        beneficiaryDocument=\"CPF/CNPJ\",\n        dueDate=\"2021-07-12\",\n        paymentDate=\"yyyy-MM-dd\",\n        billAmount=10.00,\n        paidAmount=10.00,\n    ).Create()\n```\n\n# PIX\n\n### Gerar Chave  ( Pix Keys)\n\n```python\n# CHAVE GERADA UMA ÚNICA VEZ\nuudi = str(uuid.uuid4())\npix = junopy.pix.Keys(idempotency=uudi)\n```\n\n### OBTER QR CODE ESTÁTICO\n\n```python\npix = junopy.pix.StaticQRCode(\n        idempotency='d63313cd-d01a-4091-b352-182a0a96baca',\n        key='06c4e6fe-48cb-4263-89a3-c8bc342ce65e',\n        includeImage=True,\n        amount=100.00,\n        reference='Teste de Pix',\n        additionalData='Teste de Pix com Dados Adicionais')\n```\n\n# PicPay\n\nEM DESENVOLVIMENTO\n\n\n## Suporte Oficial da Juno\n\nEm caso de dúvidas, problemas ou sugestões:  [falecom@juno.com.br](mailto:falecom@juno.com.br)\n\n## Change log\n\nVeja em  [CHANGELOG](CHANGELOG.md) para maiores informações sobre as mudanças recentes\n\n## Contribuições\n\nAs contribuições  por meio de `Pull Requests` são bem-vindas e serão totalmente creditadas.\n\n## Segurança\n\nSe você descobrir qualquer problema relacionado à segurança, envie um e-mail para robertonsilva@gmail.com\n\n## Créditos\n\n- Autor [Roberto Neves](https://github.com/robertons)\n\n## Licença\nVeja em  [LICENÇA](LICENSE) para maiores informações sobre a licença de uso.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robertons/junopy",
    "keywords": "juno,pagamento,cartão de crédito,boleto,pix,pagamentos,transações,payment,payments,credit-card",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "junopy",
    "package_url": "https://pypi.org/project/junopy/",
    "platform": "",
    "project_url": "https://pypi.org/project/junopy/",
    "project_urls": {
      "Homepage": "https://github.com/robertons/junopy"
    },
    "release_url": "https://pypi.org/project/junopy/0.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SDK Python3 para Integração com Juno API V2",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11358745,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caea6fb72c7b39b90702d93efe5fe39ff4c561142e8756de72a43e8926ba4a10",
          "md5": "36b99157a3c7b0a33ef267697c51176c",
          "sha256": "7c1785bac328a9498bf53c5a1e84bef30b7774e25e8d46ce0a1ca1c096725cdf"
        },
        "downloads": -1,
        "filename": "junopy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36b99157a3c7b0a33ef267697c51176c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17877,
        "upload_time": "2021-07-06T20:02:58",
        "upload_time_iso_8601": "2021-07-06T20:02:58.635736Z",
        "url": "https://files.pythonhosted.org/packages/ca/ea/6fb72c7b39b90702d93efe5fe39ff4c561142e8756de72a43e8926ba4a10/junopy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6b53133e047075028eeda89adbf1116d1817e64ddd66640c862ec018e860669",
          "md5": "bef317060d05bab27df289c9d70012aa",
          "sha256": "60db87fb9fb5fd64dcbac5d810892933b8eba10761e67b0c054d7f2db5d8d753"
        },
        "downloads": -1,
        "filename": "junopy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bef317060d05bab27df289c9d70012aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28797,
        "upload_time": "2021-07-15T15:58:30",
        "upload_time_iso_8601": "2021-07-15T15:58:30.414773Z",
        "url": "https://files.pythonhosted.org/packages/c6/b5/3133e047075028eeda89adbf1116d1817e64ddd66640c862ec018e860669/junopy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6958c48db83ff7779ca6d445db1400a24df295b8025c0fcdf90f142d606b1981",
          "md5": "c3003c58b9cc63a3e444c17b27550f5a",
          "sha256": "430163eae63133a0aaa04ac3c6287b2471c04096c4e1256870c6fc49717dd567"
        },
        "downloads": -1,
        "filename": "junopy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c3003c58b9cc63a3e444c17b27550f5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27914,
        "upload_time": "2021-07-19T13:53:54",
        "upload_time_iso_8601": "2021-07-19T13:53:54.987983Z",
        "url": "https://files.pythonhosted.org/packages/69/58/c48db83ff7779ca6d445db1400a24df295b8025c0fcdf90f142d606b1981/junopy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28e273082cf7971372c7f23532b04a05b838f766bfa61677c4a8c5d9f9d875ea",
          "md5": "e919164487f6449ae22d281a34c32959",
          "sha256": "dea8909df6521b4319022dca9eefffe87fe74c8408fccdb29632b3a4288a8979"
        },
        "downloads": -1,
        "filename": "junopy-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e919164487f6449ae22d281a34c32959",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27846,
        "upload_time": "2021-07-20T14:07:07",
        "upload_time_iso_8601": "2021-07-20T14:07:07.978780Z",
        "url": "https://files.pythonhosted.org/packages/28/e2/73082cf7971372c7f23532b04a05b838f766bfa61677c4a8c5d9f9d875ea/junopy-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff9f8e36d9fcfcdc61470d1b6ef0b3dd5bee02035d4c9ea069de26d8618ddb8",
          "md5": "ab7881669d1dc3eaa1a103233d7119cd",
          "sha256": "1b023af7d25d464c6bae23256e7d42db1b3fbe12d9e6059536bf0c49328a137c"
        },
        "downloads": -1,
        "filename": "junopy-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ab7881669d1dc3eaa1a103233d7119cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27893,
        "upload_time": "2021-07-20T19:44:50",
        "upload_time_iso_8601": "2021-07-20T19:44:50.978784Z",
        "url": "https://files.pythonhosted.org/packages/6f/f9/f8e36d9fcfcdc61470d1b6ef0b3dd5bee02035d4c9ea069de26d8618ddb8/junopy-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62c7cdaced7f37ab6f8a3dfd69c45214ca6fe3d43a11c994445c0479d552f10d",
          "md5": "e75799e3dc7f8c49b3f23cb8f03c1c8c",
          "sha256": "312218806a2e7407199faecaaba356b29dd82a3b3b67fb4f446e7a18928c7527"
        },
        "downloads": -1,
        "filename": "junopy-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e75799e3dc7f8c49b3f23cb8f03c1c8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27905,
        "upload_time": "2021-08-03T17:41:26",
        "upload_time_iso_8601": "2021-08-03T17:41:26.141554Z",
        "url": "https://files.pythonhosted.org/packages/62/c7/cdaced7f37ab6f8a3dfd69c45214ca6fe3d43a11c994445c0479d552f10d/junopy-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "482a30b624636882f910a83b21e29c4d935cb6c2bfcd335b54b7bfe9bc7b14a2",
          "md5": "f14e0f966ee86bdb72eafa87e82599b2",
          "sha256": "59309917d90e16da31cdb24d47ae3cea6d56dd29bba15126ada954b08a098ce3"
        },
        "downloads": -1,
        "filename": "junopy-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f14e0f966ee86bdb72eafa87e82599b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28212,
        "upload_time": "2021-09-03T15:00:31",
        "upload_time_iso_8601": "2021-09-03T15:00:31.167884Z",
        "url": "https://files.pythonhosted.org/packages/48/2a/30b624636882f910a83b21e29c4d935cb6c2bfcd335b54b7bfe9bc7b14a2/junopy-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "482a30b624636882f910a83b21e29c4d935cb6c2bfcd335b54b7bfe9bc7b14a2",
        "md5": "f14e0f966ee86bdb72eafa87e82599b2",
        "sha256": "59309917d90e16da31cdb24d47ae3cea6d56dd29bba15126ada954b08a098ce3"
      },
      "downloads": -1,
      "filename": "junopy-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f14e0f966ee86bdb72eafa87e82599b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28212,
      "upload_time": "2021-09-03T15:00:31",
      "upload_time_iso_8601": "2021-09-03T15:00:31.167884Z",
      "url": "https://files.pythonhosted.org/packages/48/2a/30b624636882f910a83b21e29c4d935cb6c2bfcd335b54b7bfe9bc7b14a2/junopy-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}