{
  "info": {
    "author": "Anupam Hore",
    "author_email": "anupam.hore@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<strong>preprocessorAH</strong> is a Python module for data preprocessing purpose and is distributed under MIT license.\n\nThe project is started on 2021 by Anupam Hore as a creator.\n\nIt is currently maintained by Anupam Hore.\n\n<h1>Installation</h1>\n<hr>\n\n<h3>Dependencies</h3>\n\npreprocessorAH requires:\n\n <ul>\n    <li>Python(>=3.8)</li>\n    <li>statsmodels(0.12.0)</li>\n    <li>pandas(0.25.3)</li>\n    <li>scikit_learn(0.24.2)</li>\n</ul>\n<hr>\n\n<h3>User Installation</h3>\nThe easiest way to install <strong>preprocessorAH</strong> is using pip:\n\n<pre>pip install preprocessorAH</pre>\n\n<h3>IMPORT</h3>\n<pre>from preprocessorAH import preprocessor</pre>\n\n<h3>Development</h3>\n<hr>\nWe welcome new contributors of all experience levels.Our main aim is to build and enhance this library in best possible way.\n\n<h3>Contributing</h3>\nTo learn more about making a contribution, please drop an email at anupam.hore@yahoo.com\n\n<h3>Testing</h3>\nYou can test the package after installation using pytest\n\n<pre>pytest preprocessorAH</pre>\n\n<h1>Change Log</h1>\n<hr>\n0.0.1 (02/09/2021) - First Release\n<hr>\n\n<h1>Documentation</h1>\n<hr>\n<h3>getDescribe(data)</h3>\n\n    Method Name:getDescribe\n    Description: This method calls the DataFrame's describe() method\n    Input: Expected arguments are DataFrame, List, Series\n    Output: A dataframe with all statistical information about data distribution\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>getHead(df, num)</h3>\n\n    Method Name:getHead\n    Description: This method calls the DataFrame's head() method\n    Input: Expected arguments are the dataframe and the number of observations to be viewed\n    Output: A dataframe with first 'num' number of observations\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>getHeadforFirstFive(df)</h3>\n\n    Method Name:getHeadforFirstFive\n    Description: This method calls the DataFrame's head() method\n    Input: Expected arguments is the dataframe\n    Output: A dataframe with first 5 number of observations\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>loadcsv(file)</h3>\n\n    Method Name:loadcsv\n    Description: This method calls the DataFrame's read_csv() method\n    Input: Expected arguments is the file path\n    Output: A dataframe\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>getTailForLastFive(df)</h3>\n\n    Method Name:getTailForLastFive\n    Description: This method calls the DataFrame's tail() method\n    Input: Expected arguments is the dataframe\n    Output: A dataframe with last 5 number of observations\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>getTail(df, num)</h3>\n\n    Method Name:getTail\n    Description: This method calls the DataFrame's tail() method\n    Input: Expected arguments are the dataframe and the number of observations\n    Output: A dataframe with last 'num' number of observations\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>checkNull(df)</h3>\n\n    Method Name:checkNull\n    Description: This method calls the dataframe's isnull().sum() method\n    Input: Expected argument is the dataframe\n    Output: A Series with all of the columns from the dataframe and the sum of their null values\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>dropVariables(df,varlist,axis,inplace)</h3>\n\n    Method Name:dropColumns\n    Description: This method calls the dataframe's drop method\n    Input: Expected arguments are the dataframe, list of columns to drop, axis, inplace\n            axis => 1 - Columns, 0 - Row\n            inplace => 1 - Permanent Drop, 0 - Temporary Drop\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>createdummies(df)</h3>\n\n    Method Name:createdummies\n    Description: This method calls the dataframe's get_dummies method to create dummies for categorical variables\n    Input: Expected argument is the dataframe\n    Output: The dataframe with the dummies incorporated\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>findHighCorr_Vars(df,threshold = 10)</h3>\n\n    Method Name:findHighCorr_Vars\n    Description: This method calls the dataframe's corr() method to get the correlation and then based on the threshold value, create a list of all the variables with high correlation\n                 This method should be used to find correlation between independant variables (NOT TARGET Variable)\n                 Use \"separate_label_features\" from this package to separate dependant and independant variables\n    Input: Expected arguments are the dataframe(excluding the target variable) and the threshold value\n           Threshold -> till what value, correlation is ok between independant variables. Beyond this value, we should remove the variables from the dataframe\n    Output: Return a list of highly correlated variables\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>impute_missing_values(df,discrete=None)</h3>\n\n    Method Name:impute_missing_values\n    Description: This method calls the dataframe's fillna() method to fill the missing values with column's median,mode value depending on numerical or categorical data\n    Input: Expected argument is the dataframe and discrete(True or False)\n           DataFrame columns can contain continuous,discrete and categorical variables\n           If discrete is set to True then we will handle discrete variable\n    For Discrete: For detecting discrete variables, the criteria is the variable should have more than 0 unique values and less than 5. if more than 5 then we will consider it as continuous variable. Median value will be considered if continuous or else mode value\n    Output: The dataframe with the missing values removed\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>impute_outliers(df,cols,type)</h3>\n\n    Method Name:impute_outliers\n    Description: This method calls the dataframe's quantile method to calculate Inter Quantile Range of the variable, based on which the upper and lower bounds for the variables are calculated\n    Input: Expected argument are the dataframe, the columns which have outliers and type of distribution.\n           Type = It is a list of data distribution. Values excepted are \"Gaussian\", \"Skewed\", \"Highly Skewed\"\n           e.g., type = [\"Gaussian, \"Skewed\", \"Highly Skewed\"] for three variables.\n    Expected Criteria: The length of \"types\" list should be same as the length of \"cols\" list\n\n    Example:\n          impute_outliers(df, ['Age','Salary', 'Fare'],['Gaussian','Skewed','Highly Skewed']\n          impute_outliers(df, ['Age','Salary', 'Fare'],['Gaussian','Gaussian','Skewed']\n          etc.,\n\n          For Gaussian Distribution:\n               bound  = df[variable].mean() +- 3 * df[variable].std()\n          For Skewed Distribution:\n              bound = df[variable].quantile(0.25) +- 1.5 * IQR\n          For Highly Skewed Distribution:\n              bound = df[variable].quantile(0.25) +- 3.0 * IQR\n\n    Output: The dataframe with outliers handled\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>separate_label_features(df,labelName)</h3>\n\n    Method Name:separate_label_features\n    Description: This method separates the independant and dependant variables in the dataset\n    Input: Expected arguments are the dataframe and the target variable\n    Output: The independant and target(dependant) variables\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n<h3>getScalarDistribution(df)</h3>\n\n    Method Name:getScalarDistribution\n    Description: This method calls the sklearn.preprocessing StandardScaler() to get the scaled distribution\n    Input: Expected arguments is the dataframe (with ONLY Independant Variables. NO TARGET VARIABLES)\n           Use \"separate_label_features\" from the package to separate dependant and independant variables\n    Output: Array of scaled distribution\n    On Failure: Raise Exception\n    Written By: Anupam Hore\n    Version: 1.0\n    Revisions: None\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anupamhore/PythonDataPreprocessor.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preprocessorAH",
    "package_url": "https://pypi.org/project/preprocessorAH/",
    "platform": "",
    "project_url": "https://pypi.org/project/preprocessorAH/",
    "project_urls": {
      "Bug Tracker": "https://github.com/anupamhore/PythonDataPreprocessor/issues",
      "Homepage": "https://github.com/anupamhore/PythonDataPreprocessor.git"
    },
    "release_url": "https://pypi.org/project/preprocessorAH/0.0.1/",
    "requires_dist": [
      "statsmodels (>=0.12.0)",
      "pandas (>=0.25.3)",
      "scikit-learn (>=0.24.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "preprocessorAH  Package for data pre-processing in Python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11345931,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73df000eccf78539cd20037e46a22cda1a03cddf35804bc2cfeb75569266028a",
          "md5": "85bdf7ba279d0c1a7d0dec220fe76b78",
          "sha256": "95f96305b35efdc5f7da54ef86a08f52d60caffc8b224642d15241be143215b1"
        },
        "downloads": -1,
        "filename": "preprocessorAH-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85bdf7ba279d0c1a7d0dec220fe76b78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7817,
        "upload_time": "2021-09-02T11:16:29",
        "upload_time_iso_8601": "2021-09-02T11:16:29.334275Z",
        "url": "https://files.pythonhosted.org/packages/73/df/000eccf78539cd20037e46a22cda1a03cddf35804bc2cfeb75569266028a/preprocessorAH-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "769f1ba7e45e298b6641928fbf30226ef08cbe9feb56d8dde681c6d9090ff73e",
          "md5": "7db56ac6f63d513a7037fc08858e6060",
          "sha256": "501ef40536937561b86d883dc1a67857e3e9b7031b3ab3c8fbe2f710bf92ba05"
        },
        "downloads": -1,
        "filename": "preprocessorAH-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7db56ac6f63d513a7037fc08858e6060",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7689,
        "upload_time": "2021-09-02T11:16:31",
        "upload_time_iso_8601": "2021-09-02T11:16:31.285019Z",
        "url": "https://files.pythonhosted.org/packages/76/9f/1ba7e45e298b6641928fbf30226ef08cbe9feb56d8dde681c6d9090ff73e/preprocessorAH-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73df000eccf78539cd20037e46a22cda1a03cddf35804bc2cfeb75569266028a",
        "md5": "85bdf7ba279d0c1a7d0dec220fe76b78",
        "sha256": "95f96305b35efdc5f7da54ef86a08f52d60caffc8b224642d15241be143215b1"
      },
      "downloads": -1,
      "filename": "preprocessorAH-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85bdf7ba279d0c1a7d0dec220fe76b78",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7817,
      "upload_time": "2021-09-02T11:16:29",
      "upload_time_iso_8601": "2021-09-02T11:16:29.334275Z",
      "url": "https://files.pythonhosted.org/packages/73/df/000eccf78539cd20037e46a22cda1a03cddf35804bc2cfeb75569266028a/preprocessorAH-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "769f1ba7e45e298b6641928fbf30226ef08cbe9feb56d8dde681c6d9090ff73e",
        "md5": "7db56ac6f63d513a7037fc08858e6060",
        "sha256": "501ef40536937561b86d883dc1a67857e3e9b7031b3ab3c8fbe2f710bf92ba05"
      },
      "downloads": -1,
      "filename": "preprocessorAH-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7db56ac6f63d513a7037fc08858e6060",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7689,
      "upload_time": "2021-09-02T11:16:31",
      "upload_time_iso_8601": "2021-09-02T11:16:31.285019Z",
      "url": "https://files.pythonhosted.org/packages/76/9f/1ba7e45e298b6641928fbf30226ef08cbe9feb56d8dde681c6d9090ff73e/preprocessorAH-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}