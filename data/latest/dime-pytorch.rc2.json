{
  "info": {
    "author": "Rickard Sjoegren",
    "author_email": "rickard.sjoegren@sartorius.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Distance to Modelled Embedding (DIME)\r\n\r\nThis repo contains an implementation of DIME, which is a method to detect out-of-distribution (OOD) observations in deep \r\nlearning. DIME provides a flexible method to detect OOD-observations with minimal computational overhead and simply assumes\r\naccess to intermediate features from an ANN.\r\n\r\n![Schematic describing DIME](dime.png)\r\n\r\nThe workflow how DIME works is summarized in four steps.\r\n\r\n1. Given a trained ANN and training set observations, obtain intermediate feature representations of the\r\n   training set observations (here denoted embedding). If the embeddings are higher than 2-dimensional, \r\n   aggregate to a 2D-matrix NxP-matrix (for instance by global average pooling in the context of \r\n   NxCxHxW-representations from a CNN).\r\n3. Linearly approximate the training set embedding by a hyperplane found by truncated singular value decomposition.\r\n4. Given new observations, obtain the corresponding intermediate representation.\r\n5. In the embedding space, measure the distance to the hyperplane (modelled embedding) to determine whether \r\n   observations are OOD.\r\n\r\nIn an optional step following 2., you can calibrate the distances against a calibration set to obtain probabilities of \r\nobserving an observation with less than or equal distance to the observed distance.\r\n\r\n## Get started\r\nSimply install from pip:\r\n```\r\npip install dime-pytorch\r\n```\r\n\r\n## Examples\r\nGiven a 2D-tensor, fit the hyperplane.\r\n\r\n    from dime import DIME\r\n\r\n    x = torch.tensor(...) # N x P torch 2D float-tensor.\r\n    modelled_embedding = DIME().fit(x)\r\n\r\nTo obtain probabilities, calibrate percentiles. Preferably against\r\nseparate dataset. Chaining is fine.:\r\n\r\n\r\n    x_cal = torch.tensor(...)  # N_cal x P torch 2D float-tensor.\r\n    modelled_embedding = DIME().fit(x).calibrate(x_cal)\r\n\r\nGiven fitted hyperplane, you can calculate distances on new observations:\r\n\r\n    x_new = torch.tensor(...)  # N_new x P 2D float-tensor.\r\n    modelled_embedding.distance_to_hyperplane(x_new)  # -> 1D float-tensor, length N_new\r\n\r\nTo obtain probabilities of that the new observations have a distance\r\ncalibration set observations are equal or less than the new distance, \r\nyou need to have calibrated the percentiles as shown above. Then you\r\nreceive the probablities by passing `return_probablities`-keyword:\r\n\r\n    modelled_embedding.distance_to_hyperplane(x_new, return_probabilites=True) # -> 1D float-tensor, length N_new\r\n\r\nYou can also use the alternative formulation of distance within the hyperplane, optionally as probabilities:\r\n\r\n    modelled_embedding.distance_within_hyperplane(x_new)  # -> 1D float-tensor, length N_new\r\n\r\n## License\r\n\r\nDistributed under the MIT-license. See LICENSE for more information.\r\n\r\nÂ© 2021 Sartorius AG\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sartorius-research/dime.pytorch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dime-pytorch",
    "package_url": "https://pypi.org/project/dime-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/dime-pytorch/",
    "project_urls": {
      "Homepage": "https://github.com/sartorius-research/dime.pytorch"
    },
    "release_url": "https://pypi.org/project/dime-pytorch/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "PyTorch-implementation of the DIME method to detect out-of-distribution observations in deep learning.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11263002,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7411147ddcc32dab56fa77e8a63683c05d61f3f6673e398f5942b2dea7efe8b1",
          "md5": "1f9350ded091b08e811d7900b110c0f5",
          "sha256": "1a6e52710ea207770a2c9d9247f769048fac9e3dfa3b026e740754d68ad733ed"
        },
        "downloads": -1,
        "filename": "dime-pytorch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f9350ded091b08e811d7900b110c0f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5659,
        "upload_time": "2021-08-24T12:49:06",
        "upload_time_iso_8601": "2021-08-24T12:49:06.119163Z",
        "url": "https://files.pythonhosted.org/packages/74/11/147ddcc32dab56fa77e8a63683c05d61f3f6673e398f5942b2dea7efe8b1/dime-pytorch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a462f50a5c7c80c066c2c0411bb8801882ec627e4c66d8350b24fa9e2d81b6ec",
          "md5": "10549d5aca52749e168f0bf4f617f1a5",
          "sha256": "e622a1d99fcc4cad9523d1414c6b01b8cc4fb8fba031cac2d197bd223f6665fb"
        },
        "downloads": -1,
        "filename": "dime-pytorch-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "10549d5aca52749e168f0bf4f617f1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6077,
        "upload_time": "2021-08-24T14:41:43",
        "upload_time_iso_8601": "2021-08-24T14:41:43.454028Z",
        "url": "https://files.pythonhosted.org/packages/a4/62/f50a5c7c80c066c2c0411bb8801882ec627e4c66d8350b24fa9e2d81b6ec/dime-pytorch-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a462f50a5c7c80c066c2c0411bb8801882ec627e4c66d8350b24fa9e2d81b6ec",
        "md5": "10549d5aca52749e168f0bf4f617f1a5",
        "sha256": "e622a1d99fcc4cad9523d1414c6b01b8cc4fb8fba031cac2d197bd223f6665fb"
      },
      "downloads": -1,
      "filename": "dime-pytorch-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "10549d5aca52749e168f0bf4f617f1a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6077,
      "upload_time": "2021-08-24T14:41:43",
      "upload_time_iso_8601": "2021-08-24T14:41:43.454028Z",
      "url": "https://files.pythonhosted.org/packages/a4/62/f50a5c7c80c066c2c0411bb8801882ec627e4c66d8350b24fa9e2d81b6ec/dime-pytorch-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}