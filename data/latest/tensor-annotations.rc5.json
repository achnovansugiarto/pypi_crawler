{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TensorAnnotations\n\nTensorAnnotations is an experimental library enabling annotation of data-type\nand semantic shape information using type annotations - for example:\n```python\ndef calculate_loss(frames: Array4[uint8, Time, Batch, Height, Width]):\n  ...\n```\n\nThis annotation states that the data-type of `frames` is `uint8`, and that the\ndimensions are time-like, batch-like, etc. (while saying nothing about the\nactual _values_ - e.g. the actual batch size).\n\nWhy? Two reasons:\n\n*   Shape annotations can be checked _statically_. This can catch a range of\n    bugs caused by e.g. wrong selection or reduction of axes before you run your\n    code - even when the errors would not necessarily throw a runtime exception!\n*   Interface documentation (also enabling shape autocompletion in IDEs).\n\nTo do this, the library provides three things:\n\n*   A set of custom tensor types for TensorFlow and JAX, supporting the above\n    kinds of annotations\n*   A collection of common semantic labels (e.g. `Time`, `Batch`, etc.)\n*   Type stubs for common library functions that preserve semantic shape\n    information (e.g. `reduce_sum(Tensor[Time, Batch], axis=0) ->\n    Tensor[Batch]`)\n\nTensorAnnotations is being developed for JAX and TensorFlow.\n\n## Example\n\nHere is some code that takes advantage of static shape checking:\n\n```python\nimport tensorflow as tf\n\nfrom tensor_annotations import axes\nimport tensor_annotations.tensorflow as ttf\n\nuint8 = ttf.uint8\nBatch, Time = axes.Batch, axes.Time\n\ndef sample_batch() -> ttf.Tensor2[uint8, Time, Batch]:\n  return tf.zeros((3, 5))\n\ndef train_batch(batch: ttf.Tensor2[uint8, Batch, Time]):\n  m: ttf.Tensor1[uint8, Batch] = tf.reduce_max(batch, axis=1)\n  # Do something useful\n\ndef main():\n  batch1 = sample_batch()\n  batch2 = tf.transpose(batch1)\n  train_batch(batch2)\n```\n\nThis code contains shape annotations in the signatures of `sample_batch` and\n`train_batch`, and in the line calling `reduce_max`. It is otherwise the\nsame code you would have written in an unchecked program.\n\nYou can check these annotations for inconsistencies by running a static type\nchecker on your code (see 'General usage' below). For example, running\n`train_batch` directly on `batch1` will result in the following error from\npytype:\n\n```\nFile \"example.py\", line 10: Function train_batch was called with the wrong arguments [wrong-arg-types]\n         Expected: (batch: Tensor2[uint8, Batch, Time])\n  Actually passed: (batch: Tensor2[uint8, Time, Batch])\n```\n\nSimilarly, changing the the call to `reduce_max` from `axis=1` to `axis=0`\nresults in:\n\n```\nFile \"example.py\", line 15: Type annotation for m does not match type of assignment [annotation-type-mismatch]\n  Annotation: Tensor1[uint8, Batch]\n  Assignment: Tensor1[uint8, Time]\n```\n\n(These messages were shortened for readability. The actual errors will be more\nverbose because fully qualified type names will be displayed. We are looking\ninto improving this.)\n\nSee `examples/tf_time_batch.py` for a complete example.\n\n## Requirements\n\nTensorAnnotatations requires Python 3.8 or above, due to the use of\n`typing.Literal`.\n\n## Installation\n\n\n\nTo install custom tensor types:\n\n```bash\npip install tensor_annotations\n```\n\nThen, depending on whether you use JAX or TensorFlow:\n\n```bash\npip install tensor_annotations_jax_stubs\n# and/or\npip install tensor_annotations_tensorflow_stubs\n```\n\nIf you use pytype, you'll also need to take a few extra steps to let\nit take advantage of JAX/TensorFlow stubs (since it doesn't yet support\nPEP 561 stub packages). First, make a copy of typeshed in e.g. your home\ndirectory:\n\n```bash\ngit clone https://github.com/python/typeshed \"$HOME/typeshed\"\n```\n\nNext, symlink the stubs into your copy of typeshed:\n\n```bash\nsite_packages=$(python3 -m site --user-site)\n# Custom tensor classes\nmkdir -p \"$HOME\"/typeshed/stubs/{tensor_annotations/tensor_annotations,tensorflow,jax}\nln -s \"$site_packages/tensor_annotations/__init__.py\" \"$HOME/typeshed/stubs/tensor_annotations/tensor_annotations/__init__.pyi\"\nln -s \"$site_packages/tensor_annotations/jax.pyi\" \"$HOME/typeshed/stubs/tensor_annotations/tensor_annotations/jax.pyi\"\nln -s \"$site_packages/tensor_annotations/tensorflow.pyi\" \"$HOME/typeshed/stubs/tensor_annotations/tensor_annotations/tensorflow.pyi\"\nln -s \"$site_packages/tensor_annotations/axes.py\" \"$HOME/typeshed/stubs/tensor_annotations/tensor_annotations/axes.pyi\"\n# TensorFlow\nln -s \"$site_packages/tensorflow-stubs\" \"$HOME/typeshed/stubs/tensorflow/tensorflow\"\n# JAX\nln -s \"$site_packages/jax-stubs\" \"$HOME/typeshed/stubs/jax/jax\"\n```\n\n## General usage\n\nFirst, import `tensor_annotations` and start annotating function signatures\nand variable assignments. This can be done gradually.\n\nNext, run a static type checker on your code. If you use Mypy, it should just\nwork. If you use pytype, you need to invoke it in a special way in order to let\nit know about the custom typeshed installation:\n\n```\nTYPESHED_HOME=\"$HOME/typeshed\" pytype your_code.py\n```\n\n\n\nWe recommend you deliberately introduce a shape error and then confirm that\nyour type checker gives you an error to be sure you're set up correctly.\n\n### Annotated tensor classes\n\nTensorAnnotations provides tensor classes for JAX and TensorFlow:\n\n```python\n# JAX\nimport tensor_annotations.jax as tjax\ntjax.arrayN  # Where N is the rank of the tensor\n\n# TensorFlow\nimport tensor_annotations.tensorflow as ttf\nttf.TensorN  # Where N is the rank of the tensor\n```\n\nThese classes can be parameterized by semantic axis labels (below) using\ngenerics, similar to `List[int]`. (Different classes are needed for each rank\nbecause Python currently does not support variadic generics, but we're working\non it.)\n\n### Data types\n\nTensorAnnotations also provides its own data-type types:\n\n```python\n# JAX\nfrom tensor_annotations.jax import uint8, float32  # Etc\n\n# TensorFlow\nfrom tensor_annotations.tensorflow import uint8, float32  # Etc\n```\n\nThis is because, for various reasons, the native data-type types like\n`tf.uint8` and `jnp.uint8` are unsuitable for use in type annotations. See\n`tensorflow.py` and `jax.py` for more information.\n\n### Axis labels\n\nAxis labels are used to indicate the semantic meaning of each dimension in a\ntensor - whether the dimension is batch-like, features-like, etc. Note that no\nconnection is made between the symbol, e.g. `Batch`, and the actual _value_ of\nthat dimension (e.g. the batch size) - the symbol really does only describe the\nsemantic meaning of the dimension.\n\nSee `axes.py` for the list of axis labels we provide out of the box. To define a\ncustom axis label, simply subclass `tensor_annotations.axes.Axis`. You can also\nuse `typing.NewType` to do this using a single line:\n\n```python\nCustomAxis = typing.NewType('CustomAxis', axes.Axis)\n```\n\nIn the future we intend to support axis types that are tied to the actual size\nof that axis. Currently, however, we don't have a good way of doing this. If you\nnonetheless want to annotate certain dimensions with a literal size, e.g. for\ndocumentation of interfaces which are hardcoded for specific sizes, we recommend\nyou just use a custom axis for this purpose. (Just to be clear, though: these\nsizes will _not_ be checked - neither statically, nor at runtime!)\n\n```python\nL64 = typing.NewType('L64', axes.Axis)\n```\n\n### Stubs\n\nBy default, TensorFlow and JAX are not aware of our annotations. For example, if\nyou have a tensor `x: Array2[uint8, Time, Batch]` and you call\n`jnp.sum(x, axis=0)`, you won't get a `Array1[uint8, Batch]`, you'll just get an\n`Any`. We therefore provide a set of custom type annotations for TensorFlow and\nJAX packaged in 'stub' (`.pyi`) files.\n\nOur stubs currently cover the following parts of the API. All operations are\nsupported for rank 1, 2, 3 and 4 tensors, unless otherwise noted. Unary\noperators are also supported for rank 0 (scalar) tensors.\n\n#### TensorFlow\n\nSee [Coverage](docs/coverage.md).\n\n**Tensor unary operators**: For tensor `x`: `abs(x)`, `-x`, `+x`\n\n**Tensor binary operators**: For tensors `a` and `b`: `a + b`, `a / b`, `a //\nb`, `a ** b`, `a < b`, `a > b`, `a <= b`, `a >= b`, `a * b`. Yet to be typed:\n`a ? float`, `a ? int` for `Tensor0`, broadcasting where one axis is 1\n\n#### JAX\n\nSee [Coverage](docs/coverage.md).\n\n**Tensor unary operators**: For tensor `x`, `abs(x)`, `-x`, `+x`\n\n**Tensor binary operators**: For tensors `a` and `b`, `a + b`, `a / b`, `a //\nb`, `a ** b`, `a < b`, `a > b`, `a <= b`, `a >= b`, `a * b`. Yet to be typed:\n`a ? float`, `a ? int` for `Tensor0`, broadcasting where one axis is 1\n\n### Casting\n\nSome of your code might be already typed with existing library tensor types:\n\n```python\ndef sample_batch() -> jnp.array:\n ...\n```\n\nIf this is the case, and you don't want to change these types globally in your\ncode, you can cast to TensorAnnotations classes with `typing.cast`:\n\n```python\nfrom typing import cast\n\nx = cast(tjax.Array2[uint8, Batch, Time], x)\n```\n\nNote that this is only a hint to the type checker - at runtime, it's a no-op. An\nalternative syntax emphasising this fact is:\n\n```python\nx: tjax.Array2[uint8, Batch, Time] = x  # type: ignore\n```\n\n## Gotchas\n\n**Use tuples for shape/axis specifications**\n\nFor type inference with TensorFlow and JAX API functions we often have to match\nadditional arguments. I.e., the rank of a `tf.zeros(...)` tensor depends on the\nlength of the shape argument. This only works with tuples, and not with lists:\n\n```python\na = tf.zeros((10, 10))  # Correctly infers type Tensor2[Any, Any]\n\nb: ttf.Tensor2[uint8, Time, Batch] = get_batch()\nc = tf.transpose(b, perm=(0, 1))  # Tracks and infers the axes-types of b\n```\n\nwhile\n\n```python\na = tf.zeros([10, 10])  # Returns Any\n\nb: ttf.Tensor2[uint8, Time, Batch] = get_batch()\nc = tf.transpose(b, perm=[0, 1]))  # Does not track permutations and returns Any\n```\n\n**Runtime vs static checks**\n\nNote that we do not verify that the rank of a tensor at runtime matches the one\nspecified in the annotations. If you were in an evil mood, you could create an\nuntyped (Any) tensor, and statically type it as something completely wrong. This\nis in line with the rest of the python type-checking approach, which does not\n*enforce* consistency with the annotated types at runtime.\n\n**Value consistency**. Not only do we not verify the rank, we don't verify\nanything about the actual shape value either. The following will _not_ raise an\nerror:\n\n```python\nx: tjax.Array1[uint8, Batch] = jnp.zeros((3,))\ny: tjax.Array1[uint8, Batch] = jnp.zeros((5,))\n```\n\nNote that _this is by design_! Shape symbols such as `Batch` are _not_\nplaceholders for actual values like 3 or 5. Symbols only refer to the _semantic\nmeaning_ of a dimension. In the above example, say, `x` might be a train batch,\nand `y` might be a test batch, and therefore they have different sizes, even\nthough both of their dimensions are batch-like. This means that even\nelement-wise operations like `z = x + y` would in this case not raise a\ntype-check error.\n\n## FAQs\n\n**Why doesn't e.g. `tjax.ArrayN` subclass `jnp.DeviceArray`?**\n\nWe'd *like* this to be the case, but haven't figured out how to yet because\nof circular dependencies:\n\n* `ArrayN` is defined in `tensor_annotations.jax`, which would need to import\n  `jax.numpy` in order to subclass `jnp.DeviceArray`.\n* However, our `jax.numpy` stubs make use of `ArrayN`, so `jax.numpy` itself\n  needs to import `tensor_annotations.jax`.\n\nWe ultimate solution to this will hopefully be to upstream our `ArrayN` classes\nsuch that they can be defined in `jax.numpy` too. Until then, we'll just be\ntrying to make e.g. `tjax.ArrayN` look as close to `jnp.DeviceArray` as possible\nthrough dummy methods and dummy attributes so that autocomplete still works.\nIf there are particular methods/attributes you'd like added, please do let us\nknow.\n\n**Why are so many methods annotated as `Any` in the JAX stubs?**\n\nWe don't yet have a good way of automatically generating stubs in general.\nFor the methods where we *do* generate stubs automatically (all the ones\nnot annotated as `Any`), we've checked their signature manually and written\nstub generators for each method individually.\n\nIdeally we'd start from stubs generated by e.g. pytype and then customise\nthem to include shape information, but we haven't got around to setting\nthis up yet.\n\n## See also\n\nThis library is one approach of many to checking tensor shapes. We don't expect\nit to be the final solution; we create it to explore one point in the space of\npossibilities.\n\nOther tools for checking tensor shapes include:\n\n* [Pythia](https://yanniss.github.io/tensor-ecoop20.pdf), a static analyzer\n  designed specifically for detecting TensorFlow shape errors\n* [tsanley](https://github.com/ofnote/tsanley), which uses string annotations\n  combined with runtime verification\n* [PyContracts](https://github.com/AndreaCensi/contracts), a general-purpose\n  library for specifying constraints on function arguments that has special\n  support for NumPy\n* [Shape Guard](https://github.com/Qwlouse/shapeguard), another runtime\n  verification tool using concise helper methods\n* [swift-tfp](https://github.com/google-research/swift-tfp), a static analyzer\n  for tensor shapes in Swift\n  \nTo learn more about tensor shape checking in general, see:\n\n* Stephan Hoyer's\n  [Ideas for array shape typing in Python](https://docs.google.com/document/d/1vpMse4c6DrWH5rq2tQSx3qwP_m_0lyn-Ij4WHqQqRHY/edit)\n  document\n* The\n  [Typing for multi-dimensional arrays](https://github.com/python/typing/issues/513)\n  GitHub issue in `python/typing`\n* Our\n  [Shape annotation feature scoping](https://docs.google.com/document/d/1t-j1MJ9M0f0KMAnM22J97tCHSfVoFjAy9k4Lexi75c4/edit)\n  and our [Shape annotation syntax proposal](https://docs.google.com/document/d/1But-hjet8-djv519HEKvBN6Ik2lW3yu0ojZo6pG9osY/edit) documents (a synthesis of the most promising ideas\n  from the full doc)\n* The Python\n  [typing-sig](https://mail.python.org/archives/list/typing-sig@python.org/)\n  mailing list (in particular,\n  [this thread](https://mail.python.org/archives/list/typing-sig@python.org/thread/IOBJGI5SJCUHJAUE4BOULGFBBEO5DCVG/)\n  )\n* [Notes and recordings](https://docs.google.com/document/d/1oaG0V2ZE5BRDjd9N-Tr1N0IKGwZQcraIlZ0N8ayqVg8/edit)\n  from the Tensor Typing Open Design Meetings\n\n## Repository structure\n\nThe `tensor_annotations` package contains four types of things:\n\n* **Custom tensor classes**. We provide our own versions of e.g. TensorFlow's\n  `Tensor` class and JAX's `Array` class in order to support shape\n  parameterisation. These are stored in **`tensorflow.py`** and **`jax.py`**.\n  (Note that these are only used in the context of type annotations - they are\n  never instantiated - hence no implementation being present.)\n* **Type stubs for custom tensor classes**. We also need to provide type\n  annotations specifying what the shape of, say, `x: Tensor[A, B] + y:\n  Tensor[B]` is. These are **`tensorflow.pyi`** and **`jax.pyi`**.\n  * These are generated from `templates/tensors.pyi` using\n    `tools/render_tensor_template.py`.\n* **Type stubs for library functions**. Finally, we need to specify what the\n  shape of, say, `tf.reduce_sum(x: Tensor[A, B], axis=0)` is. This information\n  is stored in type stubs in **`library_stubs`**. (The `third_party/py`\n  directory structure is necessary to indicate to pytype exactly which packages\n  these stubs are for.) Ideally, these will eventually live in the libraries\n  themselves.\n  * JAX stubs are auto-generated from `templates/jax.pyi` using\n    `tools/render_jax_library_template.pyi`. Note that we currently specify the\n    signature of the library members we don't generate automatically as `Any`.\n    Ideally, we'd like to automatically generate complete type stubs and then\n    tweak them to include shape information, but we haven't gotten around to\n    this yet.\n  * For TensorFlow stubs, we start from stubs generated by a Google-internal\n    TensorFlow stub generator\n    and then hand-edit those stubs to include shape stubs. The edits we've made\n    are demarcated by `BEGIN/END tensor_annotations annotations for ...` blocks.\n    Again, we'll make this more automated in the future.\n* **Common axis types**. Finally, we also provide a canonical set of common axis\n  labels such as 'time' and 'batch'. These are stored in **`axes.py`**.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deepmind/tensor_annotations",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tensor-annotations",
    "package_url": "https://pypi.org/project/tensor-annotations/",
    "platform": null,
    "project_url": "https://pypi.org/project/tensor-annotations/",
    "project_urls": {
      "Homepage": "https://github.com/deepmind/tensor_annotations"
    },
    "release_url": "https://pypi.org/project/tensor-annotations/2.0.2/",
    "requires_dist": [
      "dm-tree",
      "absl-py ; extra == 'dev'",
      "pytype ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Enables annotations of tensor shapes in numerical computing libraries. Includes type stubs for TensorFlow and JAX describing how library functions change shapes.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15460381,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d26942f2ab02c19f8c9749fbdd2b39bc9361618effe90fbf894910bf8a69adf",
          "md5": "f004e56123a824f36d632a5180d7a355",
          "sha256": "c4b3e6a72a697bc1d4372a209148462503b6294b151c46ff48dc62431c06d659"
        },
        "downloads": -1,
        "filename": "tensor_annotations-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f004e56123a824f36d632a5180d7a355",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37261,
        "upload_time": "2021-08-08T18:55:29",
        "upload_time_iso_8601": "2021-08-08T18:55:29.078627Z",
        "url": "https://files.pythonhosted.org/packages/8d/26/942f2ab02c19f8c9749fbdd2b39bc9361618effe90fbf894910bf8a69adf/tensor_annotations-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c5df766660af22e017df262cea0e53379c99126bb09639292e2b3a8532ca172",
          "md5": "9f0b52695559f40c976e3757172a33fd",
          "sha256": "358def4e2caed4dc4cc9e84f944f8d37865f75ffafb3e49133897d7b296e6463"
        },
        "downloads": -1,
        "filename": "tensor_annotations-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f0b52695559f40c976e3757172a33fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37796,
        "upload_time": "2021-08-08T18:55:30",
        "upload_time_iso_8601": "2021-08-08T18:55:30.739101Z",
        "url": "https://files.pythonhosted.org/packages/1c/5d/f766660af22e017df262cea0e53379c99126bb09639292e2b3a8532ca172/tensor_annotations-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b69d2427664ae990222e732297429e6e123102f83374e0ec19dfc60e47b9d49",
          "md5": "562fd70a9ec0d43e0810d03388efac75",
          "sha256": "c59032be405589ce17302d18e82147d9897d96989162597057e3466c49acd295"
        },
        "downloads": -1,
        "filename": "tensor_annotations-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "562fd70a9ec0d43e0810d03388efac75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38577,
        "upload_time": "2021-10-13T08:52:32",
        "upload_time_iso_8601": "2021-10-13T08:52:32.829615Z",
        "url": "https://files.pythonhosted.org/packages/7b/69/d2427664ae990222e732297429e6e123102f83374e0ec19dfc60e47b9d49/tensor_annotations-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70a0fb07b271f98deb8ef52203e5f199e13847b387403a7cb8cba6928f47d6a",
          "md5": "33246b89a7681f1692f9497a45a445a9",
          "sha256": "dd942d877e90e59864325bf8bf2bb21d6a6c6d641cfb5af4720cd63775e4b4df"
        },
        "downloads": -1,
        "filename": "tensor_annotations-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "33246b89a7681f1692f9497a45a445a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38926,
        "upload_time": "2021-10-13T08:52:36",
        "upload_time_iso_8601": "2021-10-13T08:52:36.113076Z",
        "url": "https://files.pythonhosted.org/packages/c7/0a/0fb07b271f98deb8ef52203e5f199e13847b387403a7cb8cba6928f47d6a/tensor_annotations-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cadf6e8c52d4f3a26ca2899d916e8f99f717401c25f3095ddf7dc91f725e7055",
          "md5": "af64351d3da83ef33bda914f27dabe33",
          "sha256": "e26500bd40227f6d5320c15126925dfa1bbf399f67849313eb5e9e8e32721308"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af64351d3da83ef33bda914f27dabe33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42327,
        "upload_time": "2022-09-27T18:44:34",
        "upload_time_iso_8601": "2022-09-27T18:44:34.592732Z",
        "url": "https://files.pythonhosted.org/packages/ca/df/6e8c52d4f3a26ca2899d916e8f99f717401c25f3095ddf7dc91f725e7055/tensor_annotations-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de21375b570ad45b77b253de374268a10da25fdacc50bd7386e8cc9e1b0477f3",
          "md5": "932af58caf53959901855e0148c6e924",
          "sha256": "2550bc690c62d68a86edf8bb0c822bae9d62c078da02224a85863b6be9e3fb73"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "932af58caf53959901855e0148c6e924",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40581,
        "upload_time": "2022-09-27T18:44:36",
        "upload_time_iso_8601": "2022-09-27T18:44:36.325763Z",
        "url": "https://files.pythonhosted.org/packages/de/21/375b570ad45b77b253de374268a10da25fdacc50bd7386e8cc9e1b0477f3/tensor_annotations-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "597d5c77d44220f24436ec5c08fb4ec162b6efa6cd75f7d20640ad107617deba",
          "md5": "6054a5d883ec863bd2a450e63e8475dd",
          "sha256": "179659e9f7e3098f3c272eb6bb718dc785ac485179afc14e8d6780906d5ee7e9"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6054a5d883ec863bd2a450e63e8475dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42455,
        "upload_time": "2022-09-29T13:02:47",
        "upload_time_iso_8601": "2022-09-29T13:02:47.504293Z",
        "url": "https://files.pythonhosted.org/packages/59/7d/5c77d44220f24436ec5c08fb4ec162b6efa6cd75f7d20640ad107617deba/tensor_annotations-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f4a67ced1d0485a9eca50bdcfb1b4264000ad5e57b95ab1304bec4f4261cbad",
          "md5": "7dac7bf478f4ba4883f237e8de2f2e72",
          "sha256": "19a67cf68f2503ef3e4a96d22c44e5d3f106fe5f2e47fdee66687bb6eb8fd058"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7dac7bf478f4ba4883f237e8de2f2e72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40529,
        "upload_time": "2022-09-29T13:02:48",
        "upload_time_iso_8601": "2022-09-29T13:02:48.882067Z",
        "url": "https://files.pythonhosted.org/packages/8f/4a/67ced1d0485a9eca50bdcfb1b4264000ad5e57b95ab1304bec4f4261cbad/tensor_annotations-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4af80c59834e891b72221e1569c78caf11d6222e38b5f432bd64bf0ec202049e",
          "md5": "e9914dfb599474e76bfd77d7d52aad01",
          "sha256": "b81db78e3cf365b55f7747261b3e4d68de7d6446f6cf4c1513845d842edc368c"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9914dfb599474e76bfd77d7d52aad01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42848,
        "upload_time": "2022-10-19T11:39:21",
        "upload_time_iso_8601": "2022-10-19T11:39:21.665928Z",
        "url": "https://files.pythonhosted.org/packages/4a/f8/0c59834e891b72221e1569c78caf11d6222e38b5f432bd64bf0ec202049e/tensor_annotations-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b28f099b615fb8e980306246c8bb72a160cf9ab6d81bc5ba980732942d6f6792",
          "md5": "f33b96a95702e7476fd1a37882019a14",
          "sha256": "d1c76b47bd27bddff4e49deefb529d8b975bf9dcddd79384fd811c4c05793410"
        },
        "downloads": -1,
        "filename": "tensor_annotations-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f33b96a95702e7476fd1a37882019a14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40950,
        "upload_time": "2022-10-19T11:39:23",
        "upload_time_iso_8601": "2022-10-19T11:39:23.568231Z",
        "url": "https://files.pythonhosted.org/packages/b2/8f/099b615fb8e980306246c8bb72a160cf9ab6d81bc5ba980732942d6f6792/tensor_annotations-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4af80c59834e891b72221e1569c78caf11d6222e38b5f432bd64bf0ec202049e",
        "md5": "e9914dfb599474e76bfd77d7d52aad01",
        "sha256": "b81db78e3cf365b55f7747261b3e4d68de7d6446f6cf4c1513845d842edc368c"
      },
      "downloads": -1,
      "filename": "tensor_annotations-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9914dfb599474e76bfd77d7d52aad01",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42848,
      "upload_time": "2022-10-19T11:39:21",
      "upload_time_iso_8601": "2022-10-19T11:39:21.665928Z",
      "url": "https://files.pythonhosted.org/packages/4a/f8/0c59834e891b72221e1569c78caf11d6222e38b5f432bd64bf0ec202049e/tensor_annotations-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b28f099b615fb8e980306246c8bb72a160cf9ab6d81bc5ba980732942d6f6792",
        "md5": "f33b96a95702e7476fd1a37882019a14",
        "sha256": "d1c76b47bd27bddff4e49deefb529d8b975bf9dcddd79384fd811c4c05793410"
      },
      "downloads": -1,
      "filename": "tensor_annotations-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f33b96a95702e7476fd1a37882019a14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40950,
      "upload_time": "2022-10-19T11:39:23",
      "upload_time_iso_8601": "2022-10-19T11:39:23.568231Z",
      "url": "https://files.pythonhosted.org/packages/b2/8f/099b615fb8e980306246c8bb72a160cf9ab6d81bc5ba980732942d6f6792/tensor_annotations-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}