{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# reg-fusion\n\n<figure>\n<p align=\"center\">\n  <img src=\"imgs/example.png\" alt=\"logo\" width=\"500\"/>\n  <br>\n  <em>Projection of a central sulcus probability map using the RF-ANTs approach (right hemisphere shown).</em>\n</p>\n</figure>\n\nThis is a Python implementation of [Wu et al (2018)'s registration fusion methods](https://onlinelibrary.wiley.com/doi/full/10.1002/hbm.24213) to project MRI data from standard volumetric coordinates, either MNI152 or Colin27, to Freesurfer's fsaverage. This tool already [available in the original MATLAB-based version](https://github.com/ThomasYeoLab/CBIG/tree/master/stable_projects/registration/Wu2017_RegistrationFusion) provided by *Wu et al*, which works well out of the box. However, given Python's increasing stake in neuroimaging analysis, a pure Python version may be useful. \n\nA huge thank you to *Wu et al* for making their excellent tool openly available! If you use this package, **please cite the original**:\n\n>Wu J, Ngo GH, Greve DN, Li J, He T, Fischl B, Eickhoff SB, Yeo BTT. [**Accurate nonlinear mapping between MNI volumetric and FreeSurfer surface coordinate systems**](http://people.csail.mit.edu/ythomas/publications/2018VolSurfMapping-HBM.pdf), *Human Brain Mapping* 39:3793â€“3808, 2018.\n\n## Installation\n\nThis package requires Python 3. Installing `regfusion` is simple with `pip`:\n```\npip install regfusion\n```\n\nIf you want to build `regfusion` directly from source code, use the following code:\n```\ngit clone https://github.com/danjgale/reg-fusion\ncd reg-fusion\npython setup.py install\n```\n\n## Command-line interface\n\nRegistration fusion can be ran on the command-line using `regfusion`. The flags correspond to the original implemenation, with the exception of `-t`, which is specific to `regfusion` (see Notes).  \n\n```\nusage: regfusion [-h] [-s input_vol] [-o output_dir] [-p template_type] [-r RF_type] [-i interp] [-t out_type]\n\noptional arguments:\n  -h, --help        show this help message and exit\n  -s input_vol      Absolute path to input volume. Input should be in nifti format\n  -o output_dir     Absolute path to output directory\n  -p template_type  Type of volumetric template used in index files. Use MNI152_orig or Colin27_orig when -r is RF_ANTs. Use MNI152_norm or Colin27_norm when\n                    -r is RF_M3Z. Otherwise, an exception is raised. Ensure that the template matches the standard space of -i (i.e., use MNI152_* if -i is\n                    in MNI152-space). Default: MNI152_orig\n  -r RF_type        Type of Registration Fusion approaches used to generate the mappings (RF_M3Z or RF_ANTs). RF_M3Z is recommended if data was registered\n                    from subject's space to the volumetric atlas space using FreeSurfer. RF_ANTs is recommended if such registrations were carried out using\n                    other tools, especially ANTs. Default: RF_ANTs\n  -i interp         Interpolation (linear or nearest). If -g is label.gii, then interpolation is always set to nearest and a warning is raised. Default:\n                    linear\n  -t out_type       File type of surface files. nii.gz is true to the original Wu et al (2018) implementation. Note that gifti formats, either func.gii or\n                    label.gii, are often preferred. Default: nii.gz\n```\n\n## Python API\n\nThe CLI simply calls the main underlying function, `vol_to_fsaverage`. This function can imported directly in Python. In addition to saving the files to `out_dir`, the absolute file paths of the left and right surface files are returned. \n\n```\nvol_to_fsaverage(input_img, out_dir, template_type='MNI152_orig', \n                 rf_type='RF_ANTs', interp='linear', out_type='nii.gz'):\n\n    Project volumetric data in standard space (MNI152 or Colin27) to \n    fsaverage \n\n    Parameters\n    ----------\n    input_img : niimg-like\n        Input image in standard space (i.e. MNI152 or Colin27)\n    out_dir : str\n        Path to output directory (does not need to already exist)\n    template_type : {'MNI152_orig', 'Colin27_orig', 'MNI152_norm', 'Colin27_norm'}\n        Type of volumetric template used in index files. Use 'MNI152_orig' or \n        'Colin27_orig' when `rf_type` is 'RF_ANTs'. Use 'MNI152_norm' or \n        'Colin27_norm' when `rf_type` is 'RF_M3Z'. Otherwise, an exception is \n        raised. Ensure that the template matches the standard space of \n        `input_img` (i.e., use MNI152_* if `input_img` is in MNI152-space). By \n        default 'MNI152_orig'.\n    rf_type : {'RF_ANTs', 'RF_M3Z'}\n        Type of Registration Fusion approaches used to generate the mappings.\n        RF-M3Z is recommended if data was registered from subject's space to \n        the volumetric atlas space using FreeSurfer. RF-ANTs is recommended if \n        such registrations were carried out using other tools, especially \n        ANTs. By default 'RF_ANTs'\n    interp : {'linear', 'nearest'}, optional\n        Interpolation approach. If `out_type` is 'label.gii', then interpolation \n        is always set to 'nearest'. By default 'linear'\n    out_type : {'nii.gz, 'func.gii', 'label.gii'}, optional\n        File type of surface files. Default is 'nii.gz', which is true to the \n        original Wu et al (2018) implementation. Note that gifti \n        formats, either 'func.gii' or 'label.gii', are often preferred.\n\n    Returns\n    ----------\n    str, str\n        Absolute paths to left and right hemisphere output files, respectively\n```\n\n## Examples\n\n### 1. MNI to fsaverage (default)\nFor example, the default RF-ANTs implementation (preferred) with MNI data would be: \n```python\nCLI:\nregfusion -s mni_input.nii.gz -o output\n\nPython:\nfrom regfusion import vol_to_fsaverage\nlh, rh = vol_to_fsaverage('mni_input.nii.gz', 'output')\n```\nTrue to the original implementation, two surface files (one each hemisphere) are saved to the output directory with the RF method and template embedded in the file names:\n```\noutput/\n  lh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.nii.gz\n  rh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.nii.gz\n```\n\n### 2. MNI to fsaverage (GIfTI)\nIt may be preferred to generate GIfTI files instead of the default NIfTI:\n```python\nCLI:\nregfusion -s mni_input.nii.gz -o output -t func.gii\n\nPython:\nfrom regfusion import vol_to_fsaverage\nlh, rh = vol_to_fsaverage('mni_input.nii.gz', 'output', out_type='func.gii')\n```\nThe output, which will have the appropriate GIfTI file extensions:\n```\noutput/\n  lh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.func.gii\n  rh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.func.gii\n```\n\n### 3. Projecting to label.gii\nShould you wish to project a binary mask (e.g., to display a region of interest), you may consider setting the output type, `-t`, to `label.gii`. In this case, interpolation, `-i`, will always be set to `nearest` to retain the original voxel values/labels. If not explicitly set with `-i`, interpolation will be overwritten to `nearest` and warning is raised. \n\nFor example:\n```python\nCLI:\nregfusion -s mni_input.nii.gz -o output -i nearest -t label.gii\n\nPython:\nfrom regfusion import vol_to_fsaverage\nlh, rh = vol_to_fsaverage('mni_input.nii.gz', 'output', interp='nearest', out_type='label.gii')\n```\nThe output, which will have the appropriate GIfTI file extensions:\n```\noutput/\n  lh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.label.gii\n  rh.mni_input.allSub_RF_ANTs_MNI152_orig_to_fsaverage.label.gii\n```\n\n### 4. MNI to fsaverage with RF-M3Z\nAnd finally, the RF-M3Z method can be used if that is preferred:\n```python\nCLI:\nregfusion -i mni_input.nii.gz -o output -p MNI152_norm -r RF_M3Z\n\nPython:\nfrom regfusion import vol_to_fsaverage\nlh, rh = vol_to_fsaverage('mni_input.nii.gz', 'output', template_type='MNI152_norm', rf_type='RF_M3Z')\n```\nThe output, with different file names reflecting the method/template used:\n```\noutput/\n  lh.mni_input.allSub_RF_M3Z_MNI152_norm_to_fsaverage.nii.gz\n  rh.mni_input.allSub_RF_M3Z_MNI152_norm_to_fsaverage.nii.gz\n```\n\n## Notes\n\n`regfusion` implements the same two registration fusion approaches by *Wu et al*, and is validated against the original MATLAB version (see `tests/`). However, there are some differences in the API:\n- `regfusion` does not have the `-n` flag that determines the number of subjects used to create the average mapping. That is because the standalone scripts of the MATLAB versions only uses all 1490 subjects, and thus `regfusion` does too \n- `regfusion` does not have the `-m` flag because no MATLAB is required\n- `regfusion` does not have the `-f` flag because, technically, Freesurfer is not required. However, it is strongly recommended that you have a freely available Freesurfer license because we are ultimately projecting to Freesurfer's fsaverage\n- Unlike the original MATLAB version, `regfusion` has a `-t` flag (`out_type` in `vol_to_fsaverage`; see above for description). The original MATLAB version outputs NIfTI images (`regfusion` default), but this option lets `regfusion` output to GIfTIs, which are generally preferred for surface files. Users are encouraged to set `-t`/`out_type` to one of the GIfTI output types if they find that GIfTIs are more suitable for their needs\n\nSome useful things to know:\n- *Wu et al* show that RF-ANTs is generally the better approaches of the two, which is why it's the default in `regfusion`. RF-M3Z seems best-suited if the normalization was performed via Freesurfer.\n- As *Wu et al* emphasize, the *actual* best practice here avoid projecting standard volumetric coordinates (e.g., MNI) to fsaverage altogether. Alternatives include performing all you analyses in subject/native volumetric coordinates and projecting that data to fsaverage, based on Freesurfer's `recon-all`. Or, perform analyses directly in fsaverage after running `recon-all`. Projecting data from one standard coordinates space to another is loses precision at each step (see *Wu et al* for details). Neverthless, people do this all the time and these registration fusion approaches ensure that these projections are as accurate as possible.\n- Relating to the previous point: If you do project from MNI/Colin coordinates to fsaverage, it's probably a wise idea to find a way to still show your data in volume-space too (e.g., as supplementary figures/material).     \n\n## References\n\nWu J, Ngo GH, Greve DN, Li J, He T, Fischl B, Eickhoff SB, Yeo BTT. [**Accurate nonlinear mapping between MNI volumetric and FreeSurfer surface coordinate systems**](http://people.csail.mit.edu/ythomas/publications/2018VolSurfMapping-HBM.pdf), *Human Brain Mapping* 39:3793â€“3808, 2018.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danjgale/reg-fusion",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Dan Gale",
    "maintainer_email": "d.gale@queensu.ca",
    "name": "regfusion",
    "package_url": "https://pypi.org/project/regfusion/",
    "platform": "",
    "project_url": "https://pypi.org/project/regfusion/",
    "project_urls": {
      "Homepage": "https://github.com/danjgale/reg-fusion"
    },
    "release_url": "https://pypi.org/project/regfusion/0.1.0/",
    "requires_dist": [
      "numpy (>=1.11)",
      "scipy (>=0.19)",
      "nibabel (>=3.0.0)",
      "nilearn (>=0.6.2)"
    ],
    "requires_python": "",
    "summary": "Python implementation of registration fustion methods",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9399161,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c883983222d4f7d9b22f816b73320a8cc5f722fad8d16198d19e62ee6f197eb5",
          "md5": "4d4dd2803b2dedbe08429aca37e380cf",
          "sha256": "869b2ce4ad033dd5d86c17787c73502a9b33ec3b17ddc27a059cfbdea7710fbd"
        },
        "downloads": -1,
        "filename": "regfusion-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d4dd2803b2dedbe08429aca37e380cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41909081,
        "upload_time": "2021-02-12T16:09:26",
        "upload_time_iso_8601": "2021-02-12T16:09:26.906679Z",
        "url": "https://files.pythonhosted.org/packages/c8/83/983222d4f7d9b22f816b73320a8cc5f722fad8d16198d19e62ee6f197eb5/regfusion-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c883983222d4f7d9b22f816b73320a8cc5f722fad8d16198d19e62ee6f197eb5",
        "md5": "4d4dd2803b2dedbe08429aca37e380cf",
        "sha256": "869b2ce4ad033dd5d86c17787c73502a9b33ec3b17ddc27a059cfbdea7710fbd"
      },
      "downloads": -1,
      "filename": "regfusion-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d4dd2803b2dedbe08429aca37e380cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41909081,
      "upload_time": "2021-02-12T16:09:26",
      "upload_time_iso_8601": "2021-02-12T16:09:26.906679Z",
      "url": "https://files.pythonhosted.org/packages/c8/83/983222d4f7d9b22f816b73320a8cc5f722fad8d16198d19e62ee6f197eb5/regfusion-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}