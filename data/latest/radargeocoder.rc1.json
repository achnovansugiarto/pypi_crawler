{
  "info": {
    "author": "Adventist Virtual",
    "author_email": "<devsupport@adventistvirtual.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# Radar Geocoder\r\n\r\nPython function for geocoding addresses using the Radar API\r\n\r\nThis code demonstrates how to use the RadarClient class from the radar module to forward (reverse and ip to be added later on) geocode a list of addresses using the Radar API , extract all the values, and store them in a dataframe.\r\n\r\n# Prerequisites\r\nYou should have a Radar API secret key. If you don't have one, sign up on Radar's website.\r\n\r\n```\r\nhttps://radar.com/\r\n```\r\n\r\nInstall the ```pandas``` and ```radar``` modules in your Python environment.\r\n\r\n```\r\npip install pandas\r\npip install radar-python\r\n```\r\n\r\n# Function (Combined Code Below)\r\nImport the ```pandas``` library using its alias ```pd```.\r\n\r\n```\r\nimport pandas as pd\r\n```\r\n\r\nImport the ```RadarClient``` class from the ```radar``` module.\r\n\r\n```\r\nfrom radar import RadarClient\r\n```\r\n\r\nDefine a function called ```f_geocode_address_list``` that takes a list of addresses and the radar secret key as an arguments.\r\n\r\n```\r\ndef f_geocode_address_list(address_list, SECRET_KEY):\r\n```\r\n\r\nCreate a ```RadarClient``` instance named ```radar``` with the secret key stored in the ```SECRET_KEY``` variable.\r\n\r\n```\r\n    radar = RadarClient(SECRET_KEY)\r\n```\r\n\r\nInitialize an empty list called ```geocoded_data``` to store the geocoded address data.\r\n\r\n```\r\n    geocoded_data = []\r\n```\r\n\r\nLoop through each ```address``` in the input ```address_list``` using a ```for``` loop.\r\n\r\n```\r\n    for address in address_list:\r\n```\r\n\r\nQuery the Radar geocoding API for the latitude, longitude, and other relevant data of the current address using the forward method of the ```radar.geocode``` object. Store the result in the ```location``` variable.\r\n\r\n```\r\n        location = radar.geocode.forward(query=address)[0]\r\n```\r\n\r\nCreate a dictionary object called ```data``` that stores the relevant fields of the ```location``` information.\r\n\r\n```\r\ndata = {\r\n            \"addressLabel\": location.addressLabel,\r\n            \"city\": location.city,\r\n            \"confidence\": location.confidence,\r\n            \"country\": location.country,\r\n            \"countryCode\": location.countryCode,\r\n            \"countryFlag\": location.countryFlag,\r\n            \"county\": location.county,\r\n            \"distance\": location.distance,\r\n            \"formattedAddress\": location.formattedAddress,\r\n            \"geometryType\": location.geometry['type'],\r\n            \"layer\": location.layer,\r\n            \"latitude\": location.latitude,\r\n            \"longitude\": location.longitude,\r\n            \"number\": location.number,\r\n            \"postalCode\": location.postalCode,\r\n            \"state\": location.state,\r\n            \"stateCode\": location.stateCode,\r\n            \"street\": location.street\r\n        }\r\n```\r\n\r\nAppend the ```data``` dictionary to the ```geocoded_data``` list.\r\n\r\n```\r\n        geocoded_data.append(data)\r\n```\r\n\r\nCreate a pandas DataFrame called ```geocoded_df``` from the ```geocoded_data``` list using the ```pd.DataFrame()``` method.\r\n\r\n```\r\n    geocoded_df = pd.DataFrame(geocoded_data)\r\n```\r\n\r\nReturn the DataFrame.\r\n\r\n```\r\n    return geocoded_df\r\n```\r\n\r\n# Combined Code\r\n\r\nCode for ```f_geocode_address_list``` function.\r\n\r\n```\r\ndef geocode_address_list(address_list, SECRET_KEY):\r\n    radar = RadarClient(SECRET_KEY)\r\n    geocoded_data = []\r\n    for address in address_list:\r\n        location = radar.geocode.forward(query=address)[0]\r\n        data = {\r\n            \"addressLabel\": location.addressLabel,\r\n            \"city\": location.city,\r\n            \"confidence\": location.confidence,\r\n            \"country\": location.country,\r\n            \"countryCode\": location.countryCode,\r\n            \"countryFlag\": location.countryFlag,\r\n            \"county\": location.county,\r\n            \"distance\": location.distance,\r\n            \"formattedAddress\": location.formattedAddress,\r\n            \"geometryType\": location.geometry['type'],\r\n            \"layer\": location.layer,\r\n            \"latitude\": location.latitude,\r\n            \"longitude\": location.longitude,\r\n            \"number\": location.number,\r\n            \"postalCode\": location.postalCode,\r\n            \"state\": location.state,\r\n            \"stateCode\": location.stateCode,\r\n            \"street\": location.street\r\n        }\r\n        geocoded_data.append(data)\r\n    geocoded_df = pd.DataFrame(geocoded_data)\r\n    return geocoded_df\r\n```\r\n\r\n# Installing the ```RadarGeocoder``` Package\r\nInstall the package using ```pip```.\r\n\r\n```\r\npip install radargeocoder\r\n```\r\n\r\n# Calling The Function (Combined Code Below)\r\nSet a ```SECRET_KEY``` variable to a string containing the secret key needed to access the Radar API.\r\n\r\n```\r\nSECRET_KEY = \"Your_Key_Here\"\r\n```\r\n\r\nDefine a list of ```addresses``` called ```address_list```.\r\n\r\n```\r\naddress_list = [\"5 Verti Drive, Waterville, Maine, 04901\", \"123 Main St, Anytown, California, 12345\"]\r\n```\r\n\r\nCall the ```f_geocode_address_list``` function with the ```address_list``` and ```SECRET_KEY``` variable as arguments and store the returned DataFrame in a variable called ```geocoded_df```.\r\n\r\n```\r\ngeocoded_df = f_geocode_address_list(address_list, SECRET_KEY)\r\n```\r\n\r\nDisplay the DataFrame using the ```geocoded_df``` variable.\r\n\r\n```\r\ngeocoded_df\r\n```\r\n\r\n# Combined Code\r\n\r\nCombined code for calling the ```f_geocode_address_list``` function.\r\n\r\n```\r\nSECRET_KEY = \"Your_Key_Here\"\r\n\r\naddress_list = [\"5 Verti Drive, Waterville, Maine, 04901\", \"123 Main St, Anytown, California, 12345\"]\r\n\r\ngeocoded_df = f_geocode_address_list(address_list, SECRET_KEY)\r\n\r\ngeocoded_df\r\n```\r\n\r\nExample Output.\r\n\r\n```\r\naddressLabel\tcity\tconfidence\tcountry\tcountryCode\tcountryFlag\tcounty\tdistance\tformattedAddress\tgeometryType\tlayer\tlatitude\tlongitude\tnumber\tpostalCode\tstate\tstateCode\tstreet\r\n0\t5 Verti Drive\tWaterville\texact\tUnited States\tUS\tðŸ‡ºðŸ‡¸\tKennebec County\t0\t5 Verti Drive, Waterville, ME 04901 USA\tPoint\taddress\t44.513791\t-69.660212\t5\t04901\tMaine\tME\tVerti Drive\r\n1\t123 Main St\tSan Diego\texact\tUnited States\tUS\tðŸ‡ºðŸ‡¸\tSan Diego County\t0\t123 Main St, San Diego, CA 12345 USA\tPoint\taddress\t32.552745\t-117.043844\t123\t12345\tCalifornia\tCA\tMain St\r\n```\r\n\r\n# License\r\nThis code is licensed under the MIT License.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AdventistVirtual/radargeocoder",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "radargeocoder",
    "package_url": "https://pypi.org/project/radargeocoder/",
    "platform": null,
    "project_url": "https://pypi.org/project/radargeocoder/",
    "project_urls": {
      "Homepage": "https://github.com/AdventistVirtual/radargeocoder"
    },
    "release_url": "https://pypi.org/project/radargeocoder/0.0.10/",
    "requires_dist": [
      "pandas",
      "radar-python"
    ],
    "requires_python": ">=3.10",
    "summary": "Python functions for geocoding addresses using the Radar API",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17469271,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc8c9b996b6699615aa8be5ceefe137359b383a7938a845229fe8a4b13b14f39",
          "md5": "db243adb7fac66e35bb599a5a582fcb1",
          "sha256": "4d50cdc98f567833d221aa96f3c80267d252b43ada438817f5fa511e16d9529d"
        },
        "downloads": -1,
        "filename": "radargeocoder-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db243adb7fac66e35bb599a5a582fcb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 4752,
        "upload_time": "2023-03-27T23:01:17",
        "upload_time_iso_8601": "2023-03-27T23:01:17.166240Z",
        "url": "https://files.pythonhosted.org/packages/fc/8c/9b996b6699615aa8be5ceefe137359b383a7938a845229fe8a4b13b14f39/radargeocoder-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b0c549fcce9f565f56a6a36f489bd7bc4506bbecfab55916e3ca47e690f80a9",
          "md5": "14e8132affcbc2848efd16cefe896af7",
          "sha256": "094ec6b849f20fdd3e6e6d710f658608df9932d8a2a067b7f5fc7e3114a5642c"
        },
        "downloads": -1,
        "filename": "radargeocoder-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "14e8132affcbc2848efd16cefe896af7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3929,
        "upload_time": "2023-03-27T23:01:19",
        "upload_time_iso_8601": "2023-03-27T23:01:19.221175Z",
        "url": "https://files.pythonhosted.org/packages/0b/0c/549fcce9f565f56a6a36f489bd7bc4506bbecfab55916e3ca47e690f80a9/radargeocoder-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc8c9b996b6699615aa8be5ceefe137359b383a7938a845229fe8a4b13b14f39",
        "md5": "db243adb7fac66e35bb599a5a582fcb1",
        "sha256": "4d50cdc98f567833d221aa96f3c80267d252b43ada438817f5fa511e16d9529d"
      },
      "downloads": -1,
      "filename": "radargeocoder-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db243adb7fac66e35bb599a5a582fcb1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 4752,
      "upload_time": "2023-03-27T23:01:17",
      "upload_time_iso_8601": "2023-03-27T23:01:17.166240Z",
      "url": "https://files.pythonhosted.org/packages/fc/8c/9b996b6699615aa8be5ceefe137359b383a7938a845229fe8a4b13b14f39/radargeocoder-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b0c549fcce9f565f56a6a36f489bd7bc4506bbecfab55916e3ca47e690f80a9",
        "md5": "14e8132affcbc2848efd16cefe896af7",
        "sha256": "094ec6b849f20fdd3e6e6d710f658608df9932d8a2a067b7f5fc7e3114a5642c"
      },
      "downloads": -1,
      "filename": "radargeocoder-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "14e8132affcbc2848efd16cefe896af7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 3929,
      "upload_time": "2023-03-27T23:01:19",
      "upload_time_iso_8601": "2023-03-27T23:01:19.221175Z",
      "url": "https://files.pythonhosted.org/packages/0b/0c/549fcce9f565f56a6a36f489bd7bc4506bbecfab55916e3ca47e690f80a9/radargeocoder-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}