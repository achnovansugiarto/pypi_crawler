{
  "info": {
    "author": "Xin Yi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mdataio  \n\n## What it is\nIt is a software package that abstracts the representation of the raw CT patient data (e.g. dicom, mhd, niffty etc.), and provides  unified and clean approaches to  manipulate the image together with the corresponding segmentation mask, including data loading, saving and visualization.\n\n\n\n## What it contains\n- [Visualization](#visualization)\n- [Data](#data)\n- [Saver](#saver)\n- [Common](#common)\n\n\n\n## How to install\n```shell\n$ pip install mdataio\n```\n\n\n\n\n\n## Visualization\nThis module contains functions for interactive 2D/3D image visualization. It is useful for  1. overlaying mask onto image 2. comparing across a series of images 3. showing the difference of image pairs.\n\n### keyboard shortcuts\n```\n.: next slice\n,: last slice\nesc: quit\n```\n\n```python\n#to visualize prep study in /mnt/SSD_2/final_seg/leftheart_ct_ali_annotation2_cleaned_boundaries/0\n#volshow* is to visualize volumes with shape NxHxW\nfrom mdataio.visualization import volshow, volshowpair, volshowlist\nimg = np.load('0_img.npy')\nseg = np.load('0_seg.npy')\nvolshow(img)\nvolshowpair(img, seg)\nvolshowlist([img, img])\n```\n\n![](./imgs/volshowpair.gif)\n\n\n```\n#imshow is to visualize 2d images with shape HxW (gray scale image) or shape HxWx3 (RGB image)\nfrom mdataio.visualization import imshow\nimshow(img[0,:,:])\n```\n\n```\n#another 2 useful functions are overlay_image and diff_image, which reflect the 2 most common procedures in debugging:\n1. overlaying mask on top of image\n2. comparing the difference of two images\n\nfrom mdataio.visualization import overlay_image, diff_image\nimg_overlay = overlay_image(img[0,:,:], seg[0,:,:]) # can display the seg as mask (default) or contour (method='contour')\nimg_diff = diff_image(img[0,:,:], img[20,:,:])\nimshow(img_overlay)\nimshow(img_diff)\nimshowlist([img_overlay, img_diff], title_list=['overylay', 'difference']) \n#all 3 functions support landmarks \n```\n\n![](./imgs/image_diff.png)\n\n\n## Data\n- Load raw image data, currently only supports dicom, niffty, mdh and save to dicoms so that it can be loaded into any dicom image viewer\n```python\nfrom mdataio.data import PatientDicom, PatientNifty, PatientMhd\n#dicom\npfile = PatientDicom(\"parent folder path of your dicom images\")\n#niffty\npfile = PatientNifty(\"path of your .nii file\")\n#mdh\n#note that the file ending in .mhd is only the ASCII header information.\n#the file ended in .raw/.mha contains the actual voxel data and should be put together with the .mhd file\npfile = PatientMhd(\"path of your .mdh file\")\n\nimg, spacing = pd.get_data()\n\npfile.save_as_dicom(\"path where you want to save the converted dicoms\")\n\n```\n\n\n\n## Saver\nA class that wrapps up the video saving functionality\n```python\nform ss.saver import VideoSaver\nvs = VideoSaver([[img[i,:,:],img[i,:,:]] for i in range(img.shape[0])])\nvs.to_video('/home/xin/tmp/test.mp4')\n```\n\n\n## Common",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/xinario/mdataio/archive/refs/tags/0.1.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://xinario.github.io",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdataio",
    "package_url": "https://pypi.org/project/mdataio/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdataio/",
    "project_urls": {
      "Download": "https://github.com/xinario/mdataio/archive/refs/tags/0.1.4.tar.gz",
      "Homepage": "https://xinario.github.io"
    },
    "release_url": "https://pypi.org/project/mdataio/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "scripts used for meidcal data manipulation",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10158913,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffa2a5493977d03e84062124c35ef40bc26a45d6b7fdc2ecaf4e5ce84ab004f4",
          "md5": "59df49f55db54bac35a128b36453e53c",
          "sha256": "ff99833803e076cd38fe6b532de261f1f634f1e9dd8798e34e82d338f8527e4d"
        },
        "downloads": -1,
        "filename": "mdataio-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "59df49f55db54bac35a128b36453e53c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13817,
        "upload_time": "2021-04-24T10:03:01",
        "upload_time_iso_8601": "2021-04-24T10:03:01.553278Z",
        "url": "https://files.pythonhosted.org/packages/ff/a2/a5493977d03e84062124c35ef40bc26a45d6b7fdc2ecaf4e5ce84ab004f4/mdataio-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffa2a5493977d03e84062124c35ef40bc26a45d6b7fdc2ecaf4e5ce84ab004f4",
        "md5": "59df49f55db54bac35a128b36453e53c",
        "sha256": "ff99833803e076cd38fe6b532de261f1f634f1e9dd8798e34e82d338f8527e4d"
      },
      "downloads": -1,
      "filename": "mdataio-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "59df49f55db54bac35a128b36453e53c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13817,
      "upload_time": "2021-04-24T10:03:01",
      "upload_time_iso_8601": "2021-04-24T10:03:01.553278Z",
      "url": "https://files.pythonhosted.org/packages/ff/a2/a5493977d03e84062124c35ef40bc26a45d6b7fdc2ecaf4e5ce84ab004f4/mdataio-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}