{
  "info": {
    "author": "Yasser Qureshi",
    "author_email": "yasser.m.q01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# power-of-10: A UK Athletics API\n\nThis library intends to provide simplicity when accessing and parsing data from <a href=\"https://www.thepowerof10.info\">Power of 10</a>, a UK-based site that provides a comprehensive collection of athete performances and rankings.\n\n## Installation\n\nInstall the package:\n```\npip install setup.py\n```\n\nInstall dependencies:\n```\npip install -r requirements.txt\n```\n\n## Usage\n\nThe package has a variety of functions.\n\n### 1. Search Athletes\n```\nsearch_athletes(firstname=None, surname=None, club=None)\n```\nReturns a list of athletes given search criteria.\n\n*Parameters:*\n- `firstname` (str): Optional first name agrument\n- `surname` (str): Optional surname argument\n- `club` (str): Optional club agrument\n\n*Returns:*\n- `list_of_athletes` (arr): List of athlete data in dict\n    - `firstname` (str): First name of athlete\n    - `surname` (str): Surname of athlete\n    - `track` (str): Age group for athlete on track \n    - `road` (str): Age group for athlete on road\n    - `sex` (str): Gender of athlete\n    - `club` (str): Athletics club of althete\n    - `athlete_id` (int): Reference id of athlete (used by PowerOf10)\n\n\n### 2. Get Athlete\n```\nget_athlete(athlete_id)\n```\nReturns a dictionary of information relating to a specific athlete or coach.\n\n*Parameters:*\n- `athlete_id` (int): reference id of athlete (used by PowerOf10)\n\n*Returns:*\n- `athletes` (dict): Dictionary of athlete data\n    - `club` (str): Club of the athlete\n    - `gender` (str): Gender of athlete (M or F)\n    - `age_group` (str): Age group division of athlete\n    - `county` (str): County that athlete competes for\n    - `region` (Str): Region that athlete competes for\n    - `nation` (str): Nation that athlete competes for\n    - `lead coach` (str): Athlete coach (usually used for notable coaches)\n    - `about` (str): Description of athlete (usually used for notable athletes)\n    - `pb` (arr): List of personal bests\n        - `event` (str): Event name\n        - `value` (float): Personal best in given event\n        - `performances` (arr): List of athlete performances\n        - `event` (str): Event name\n        - `value` (float): Performance in given event\n        - `position` (arr): 2x1 list containing [position, race identifier]\n        - `venue` (str): Location of event\n        - `meeting` (str): Meeting title\n        - `date` (str): Date of event\n    - `rankings` (arr): List of notable ranks of athletes\n        - `event` (str): Event name\n        - `age_group` (str): Age group division at time of rank\n        - `year` (int): Year that rank was achieved\n        - `rank` (int): Rank of athlete\n    - `coaching` (arr): List of coaching experiences \n        - `name` (str): Nmae of athlete coached\n        - `club` (str): Club of athlete coached\n        - `age_group` (str): Age group division of athlete coached\n        - `sex` (str): Gender of athlete coached\n        - `best_event` (str): Best event of athlete coached\n        - `rank` (int): Rank of athlete coached for their best event\n        - `age_group_rank` (str): Age group that rank was achieved\n        - `year` (int): Year that rank was achieved\n        - `performance` (float): Performance that achieved rank\n\n### 3. Find Coaches\n```\nsearch_coaches(firstname=None, surname=None, club=None)\n```\nReturns a list of coaches with the inputted firstname, surname or club.\n\n*Parameters:*\n- `firstname` (str): Optional first name of coach argument\n- `surname` (str): Optiona surname of coach argument\n- `club` (str): Optional club of coach argument\n\n*Returns:*\n- `coaches` (arr): List of coach data in dict\n    - `firstname` (str): First name of coach\n    - `surname` (str): Surname of coach\n    - `sex` (str): Gender of coach\n    - `club` (str): Club of coach\n    - `athlete_id` (int): reference id of athlete (used by PowerOf10)\n\n### 4. Get Rankings\n```\nget_rankings()\n```\nReturns a list of ranks for given year, region, gender, age group and event.\n\n*Parameters:*\n- `year` (int): Year of event rankings \n- `region` (str): Region for event rankings (see below for available regions)\n- `gender` (str): Gender for event rankings\n- `age_group` (str): Optional age group of event rankings\n- `event` (str): Event for rankings\n\n*Returns:*\n- `rankings` (arr): list of ranks\n    - `rank` (int): Rank of athlete\n    - `performance` (float): Performance of athlete for given rank\n    - `pb` (float): Personal best of athlete at time of rank\n    - `name` (str): Full name of athlete\n    - `year` (int): Year that performance occurred\n    - `coach` (str): Name of coach of athlete\n    - `club` (str): Name of club of athlete\n    - `venue` (str): Name of venue that performance occurred\n    - `date` (str): Date that performance occurred\n    - `athlete_id` (int): Reference id of athlete (used by PowerOf10)\n    - `meeting_id` (int): Reference id of event (used by PowerOf10)\n\n**Table of Parameters:**\nRegion | Age Group \n-------|-----------\neast | Leave blank for any \neast midlands | U20 \nengland | U17 \nlondon | U15  \nnorth east | U13 \nnorth ireland | | \nnorth west | | \nscotland | | \nsouth east | | \nsouth west | | \nwales | | \nwest midlands | | \nyorkshire | | \n\n### 5. Search Event\n```\nsearch_event(event=None, meeting=None, venue=None, date_from=None, year=None, date_to=None, meeting_type=None, terrain=None)\n```\nReturns a dict of events that correspond to the query parameters\n\n*Parameters:*\n- `event` (str): Optional event name\n- `meeting` (str): Optional meeting name\n- `venue` (str): Optional venue name\n- `date_from` (str): Optional date to search from (to be used with `date_to`)\n- `date_to` (str): Optional date to search to (to be used with `date_from`)\n- `year` (int): Optional year to search within\n- `meeting_type` (str): Optional type of meeting (See below for available meeting types)\n- `terrain` (str): Optional type of terrain event was on\n\n*Returns:*\n- `results` (arr): List of results corresponding to event parameters\n    - `date` (str): Date of event\n    - `meeting` (str): Meeting name\n    - `venue` (str): Venue name of meeting\n    - `type` (str): Type of terrain it was held on\n    - `meeting_id` (int): Reference id of meeting (used by PowerOf10)\n\n**Table of Parameters:**\nTerrain Types | Meeting Types\n-------|-----------\nany | UK Calendar\nvirtual | World Calendar\ndisability | BMC\nwalks | NAL\nmountain | YDL \nfell | SAL\nroad/multi/xc | NEL\nroad/multi | MJL\n5k/10k/hm/mar | \nxc | \nmulti | \nindoor | \nroad | \ntrack | \ntrack/10k/hm/mar/xc |\n\n### 6. Get Results\n```\nget_results(meeting_id)\n```\nReturns a dict of information for a particular meeting \n\n*Parameters:*\n- `meeting_id` (int): Reference id of meeting (used by PowerOf10)\n\n*Returns:*\n- `meeting` (arr):\n    - `title` (str): Name of meeting\n    - `location` (str): Location of meeting\n    - `date` (str): Date of meeting\n    - `results` (arr): List of results for each event at meeting\n        - `event` (str): Event name\n        - `age_group` (str): Age group that for event\n        - `race` (int): Race number\n        - `results` (arr): List of results for event\n            - `pos` (int): Position of athlete\n            - `perf` (float): Performance of athlete\n            - `name` (str): Name of athlete\n            - `athlete_id` (int): Reference id of athlete (used by PowerOf10) \n            - `age_group` (str): Age group division of athlete\n            - `sex` (str): Gender of athlete \n            - `year` (str): Athlete year in age group\n            - `coach` (str): Name of coach\n            - `club` (str): Name of club\n            - `sb` (float): Seasons best\n            - `pb` (float): Personal best\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yasserqureshi1/power-of-10",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "power-of-10",
    "package_url": "https://pypi.org/project/power-of-10/",
    "platform": "",
    "project_url": "https://pypi.org/project/power-of-10/",
    "project_urls": {
      "Bug Tracker": "https://github.com/yasserqureshi1/power-of-10/issues",
      "Homepage": "https://github.com/yasserqureshi1/power-of-10"
    },
    "release_url": "https://pypi.org/project/power-of-10/0.0.1/",
    "requires_dist": [
      "beautifulsoup4 (==4.9.3)",
      "bs4 (==0.0.1)",
      "certifi (==2020.12.5)",
      "chardet (==4.0.0)",
      "idna (==2.10)",
      "numpy (==1.20.3)",
      "requests (==2.25.1)",
      "soupsieve (==2.2.1)",
      "urllib3 (==1.26.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "A UK athletics API",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10453385,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c66d8718ce04532ca83f10b4268d314649c6baab072f51f35850394a97245d8c",
          "md5": "35941eac036dd7cd171862bb0e3a4724",
          "sha256": "91f509b5725f46930d7744f1d90d3bff6e89da0787dba8565b4fe5d9c159ce1c"
        },
        "downloads": -1,
        "filename": "power_of_10-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35941eac036dd7cd171862bb0e3a4724",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11219,
        "upload_time": "2021-05-24T12:07:35",
        "upload_time_iso_8601": "2021-05-24T12:07:35.155332Z",
        "url": "https://files.pythonhosted.org/packages/c6/6d/8718ce04532ca83f10b4268d314649c6baab072f51f35850394a97245d8c/power_of_10-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6031f75feb4029532fb5f506c78994d4db7aa2ed1bfac1fc076e53af8d6dbdd3",
          "md5": "307b4bcc9b8b0cbfaf641735de8156cc",
          "sha256": "b68ce9c7fff6ca0d3c033455884f99bad06dacea5328dcd3f301903f8d64f3c3"
        },
        "downloads": -1,
        "filename": "power-of-10-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "307b4bcc9b8b0cbfaf641735de8156cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9976,
        "upload_time": "2021-05-24T12:07:36",
        "upload_time_iso_8601": "2021-05-24T12:07:36.791907Z",
        "url": "https://files.pythonhosted.org/packages/60/31/f75feb4029532fb5f506c78994d4db7aa2ed1bfac1fc076e53af8d6dbdd3/power-of-10-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c66d8718ce04532ca83f10b4268d314649c6baab072f51f35850394a97245d8c",
        "md5": "35941eac036dd7cd171862bb0e3a4724",
        "sha256": "91f509b5725f46930d7744f1d90d3bff6e89da0787dba8565b4fe5d9c159ce1c"
      },
      "downloads": -1,
      "filename": "power_of_10-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35941eac036dd7cd171862bb0e3a4724",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11219,
      "upload_time": "2021-05-24T12:07:35",
      "upload_time_iso_8601": "2021-05-24T12:07:35.155332Z",
      "url": "https://files.pythonhosted.org/packages/c6/6d/8718ce04532ca83f10b4268d314649c6baab072f51f35850394a97245d8c/power_of_10-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6031f75feb4029532fb5f506c78994d4db7aa2ed1bfac1fc076e53af8d6dbdd3",
        "md5": "307b4bcc9b8b0cbfaf641735de8156cc",
        "sha256": "b68ce9c7fff6ca0d3c033455884f99bad06dacea5328dcd3f301903f8d64f3c3"
      },
      "downloads": -1,
      "filename": "power-of-10-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "307b4bcc9b8b0cbfaf641735de8156cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9976,
      "upload_time": "2021-05-24T12:07:36",
      "upload_time_iso_8601": "2021-05-24T12:07:36.791907Z",
      "url": "https://files.pythonhosted.org/packages/60/31/f75feb4029532fb5f506c78994d4db7aa2ed1bfac1fc076e53af8d6dbdd3/power-of-10-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}