{
  "info": {
    "author": "cfp",
    "author_email": "954742660@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# 一、框架介绍\r\n\r\n此框架最主要是，是要对tornado进行一个封装的web框架，当然其中也包括了很多的常用的工具在根项目的utils下，以及一些\r\nlibs库项目。\r\n\r\n\r\n# 版本更新说明\r\n**0.1.17**\r\n\r\ncrypto加密模块新增私钥加密数据，公钥进行验证私钥签名，这种方式常常被用在区块链中。\r\n\r\n\r\n**0.1.16**\r\n\r\n新增openai chatgpt 程序位置nlecloud_framework\\libs\\chatgpt\\open_chat_gpt.py\r\n\r\n新增在windows的cmd下输出颜色文字\r\n\r\n新增时间模块帮助类\r\n\r\n\r\n\r\n\r\n# 二、配置文件介绍\r\n\r\n对于配置文件我们进行了单例模式，之后朋友你要使用框架，只要在根目录创建client_config.py作为你的配置文件。\r\n\r\n然后就可以在整个项目中使用from nlecloud_framework import config 去导入你的配置信息。放心这个配置只会被加载一次。\r\n\r\n![1677748677287](https://mang-he.oss-cn-zhangjiakou.aliyuncs.com/framework/c619276030ff45a7911d43cf18352104.png)\r\n\r\n其中client_config.py你可以这样写：\r\n\r\n```python\r\nimport threading\r\nimport time\r\nimport os\r\n\r\nclass OSS_config(object):\r\n    ak_id = \"FlRFRTaHhCbVJLQW9OSDR\"\r\n    ak_secret = \"FlRFRTaHhCbVJLQW9OSDRW9OSDRx\"\r\n    bucket_name = \"hezi-he\"\r\n    demain = \"https://hezi.oss-cn-zhangjiakou.aliyuncs.com/\"\r\n    end_point = \"oss-cn-hezi.aliyuncs.com\"\r\n\r\n\r\nclass client_config:\r\n    # 单例模式需要加锁判断\r\n    _instance = None\r\n    _lock = threading.RLock()\r\n\r\n    # 项目的跟目录\r\n    project_path = os.path.dirname(os.path.abspath(__file__))\r\n    # 加密秘钥，可以使用nlecloud_framework\\utils\\crypto.py 进行生成\r\n    crypto_key = \"QzFxS2FlRFRTaHhCbVJLQW9OSDRxcGxONWlneTRnZlA2VlpwSWRNR3p4VT0=\"\r\n    # 文件的临时位置\r\n    temp_path = os.path.join(project_path,\"temp_file\")\r\n    if not os.path.exists(temp_path):\r\n        os.mkdir(temp_path)\r\n    # oss的配置信息\r\n    oss_config = OSS_config()\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        \"\"\"\r\n        实现单例模式\r\n        :param args:\r\n        :param kwargs:\r\n        \"\"\"\r\n        if cls._instance:\r\n            return cls._instance\r\n\r\n        with cls._lock:\r\n            if cls._instance:\r\n                return cls._instance\r\n\r\n            cls._instance = object.__new__(cls)\r\n            return cls._instance\r\n\r\n```\r\n\r\n\r\n\r\n# 三、工具类介绍\r\n\r\n## 3.1：加密库\r\n\r\n```bash\r\nnlecloud_framework\\utils\\crypto.py\r\n```\r\n\r\n- 可以使用genRandomKey方法生成一个秘钥，后期可以使用plain_to_ciphert和cipher_to_plain进行数据加解密\r\n- 可以使用create_rsa_pair去创建一个2048位的非对称加密，后期使用encryption和decryption进行加解密\r\n\r\n```python\r\nif __name__ == '__main__':\r\n    # 1、获取加密秘钥\r\n    key = CryptoHelper.genRandomKey()\r\n    ciphertext = CryptoHelper.plain_to_ciphert(key,plaintext=\"明文信息\")\r\n    plaintext = CryptoHelper.cipher_to_plain(key,ciphertext=ciphertext)\r\n    print(\"密文：\",ciphertext)\r\n    print(\"明文：\",plaintext)\r\n\r\n    # 2、非对称加密\r\n    # 生成秘钥对\r\n    public_key, private_key = CryptoHelper.create_rsa_pair(is_save=False)\r\n    # 读取公钥信息\r\n    public_key = CryptoHelper.read_public_key(\"crypto_public_key.pem\")\r\n    # 加密\r\n    text = '123456'\r\n    text_encrypted_base64 = CryptoHelper.encryption(text, public_key)\r\n    print('密文：', text_encrypted_base64)\r\n\r\n    # 解密\r\n    text_decrypted = CryptoHelper.decryption(text_encrypted_base64, private_key)\r\n    print('明文：', text_decrypted)\r\n```\r\n\r\n## 3.2：nlecommon库\r\n\r\n- 可以将多行一大串字符，变成一个列表如下面这样格式\r\n\r\n```python\r\nif __name__ == '__main__':\r\n    a = \"\"\"\r\n    aliyun-python-sdk-core==2.13.36\r\naliyun-python-sdk-kms==2.16.0\r\n    \"\"\"\r\n    stringTextLine_to_list(a,is_print=True)\r\n    \r\n    # 输出信息，输出转换好的文本信息\r\n    # ['aliyun-python-sdk-core==2.13.36', 'aliyun-python-sdk-kms==2.16.0']\r\n```\r\n\r\n## 3.3：阿里云的OSS封装\r\n\r\n阿里官网：https://www.aliyun.com/product/oss\r\n\r\n当然了你要自己去购买服务，然后对client_config.py中OSS_config进行替换。\r\n ![1677748677287](https://mang-he.oss-cn-zhangjiakou.aliyuncs.com/framework/e6a337dd4bbe4da7b3d8263a5b8d3185.png)\r\n- 上传文件\r\n\r\n\r\n```python\r\nfrom nlecloud_framework.utils.oss import OSSHelper\r\nfrom nlecloud_framework import config\r\n\r\nif __name__ == '__main__':\r\n    file_name, resource_path = OSSHelper.oss_upload(r\"assets\\Snipaste_2023-03-03_08-59-48.png\", oss_config=config.oss_config,file_folder=\"framework\")\r\n    print(file_name, resource_path)\r\n    # 输出信息 \r\n    # file_name ：framework/e6b8d3185.png \r\n    # resource_path ：https://hezi.oss-cn-zhangjiakou.aliyuncs.com/framework/e6b8d3185.png\r\n    \r\n```\r\n\r\n## 3.4：自动试卷\r\n\r\n主要是将Excel的的题库，转化为word的格式的试卷比如像这样的转换：\r\n ![1677748677287](https://mang-he.oss-cn-zhangjiakou.aliyuncs.com/framework/91103ad24c8044aaa862defa3d3a4d1e.png)\r\n\r\n```python\r\nfrom nlecloud_framework.libs.exam.exam_paper import ExamPaperHelper\r\nfrom nlecloud_framework import config\r\n\r\nif __name__ == '__main__':\r\n    obj = ExamPaperHelper()\r\n    # 数据Excel文件名和要保存的试卷文件名\r\n    obj.run(excel_name=\"试题.xlsx\",word_name=\"新的试卷\")\r\n    # 输出程序如何使用\r\n    obj.usage()\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/daliyup0518/nlecloud_framework.git",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "dalyer",
    "maintainer_email": "954742660@qq.com",
    "name": "nlecloud-framework",
    "package_url": "https://pypi.org/project/nlecloud-framework/",
    "platform": "all",
    "project_url": "https://pypi.org/project/nlecloud-framework/",
    "project_urls": {
      "Homepage": "https://gitee.com/daliyup0518/nlecloud_framework.git"
    },
    "release_url": "https://pypi.org/project/nlecloud-framework/0.1.17/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "nlecloud_framework框架",
    "version": "0.1.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17265290,
  "releases": {
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58afb401e549161e8ff99e6f4aab61bbd6e33c7e037f2cdb1eb5533f8720cb2c",
          "md5": "608e7c2e343fb9ff32ecda5306069d04",
          "sha256": "71e695281d870c2372b6b02e2855d53274c61153e32185c8bfdf1f28fd07badd"
        },
        "downloads": -1,
        "filename": "nlecloud_framework-0.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "608e7c2e343fb9ff32ecda5306069d04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18404,
        "upload_time": "2023-03-06T07:48:17",
        "upload_time_iso_8601": "2023-03-06T07:48:17.517280Z",
        "url": "https://files.pythonhosted.org/packages/58/af/b401e549161e8ff99e6f4aab61bbd6e33c7e037f2cdb1eb5533f8720cb2c/nlecloud_framework-0.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c791ab30b9cd7562ad3cbd41d56844d14f265259ee4bf192b28f4635628016a",
          "md5": "c75a4db83e7c48eb80f195d3bd399501",
          "sha256": "5ee3648158ff07d28db3f301054fd65c98b117a8f0d14d81f96c14ace063cead"
        },
        "downloads": -1,
        "filename": "nlecloud_framework-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c75a4db83e7c48eb80f195d3bd399501",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19225,
        "upload_time": "2023-03-13T02:14:42",
        "upload_time_iso_8601": "2023-03-13T02:14:42.406380Z",
        "url": "https://files.pythonhosted.org/packages/2c/79/1ab30b9cd7562ad3cbd41d56844d14f265259ee4bf192b28f4635628016a/nlecloud_framework-0.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c791ab30b9cd7562ad3cbd41d56844d14f265259ee4bf192b28f4635628016a",
        "md5": "c75a4db83e7c48eb80f195d3bd399501",
        "sha256": "5ee3648158ff07d28db3f301054fd65c98b117a8f0d14d81f96c14ace063cead"
      },
      "downloads": -1,
      "filename": "nlecloud_framework-0.1.17.tar.gz",
      "has_sig": false,
      "md5_digest": "c75a4db83e7c48eb80f195d3bd399501",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19225,
      "upload_time": "2023-03-13T02:14:42",
      "upload_time_iso_8601": "2023-03-13T02:14:42.406380Z",
      "url": "https://files.pythonhosted.org/packages/2c/79/1ab30b9cd7562ad3cbd41d56844d14f265259ee4bf192b28f4635628016a/nlecloud_framework-0.1.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}