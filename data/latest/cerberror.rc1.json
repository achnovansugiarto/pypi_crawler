{
  "info": {
    "author": "Przemysław Bruś",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "# Cerberror\n![CI](https://github.com/pbrus/cerberror/workflows/CI/badge.svg?branch=master)\n[![Python](https://img.shields.io/badge/Python-3.6%20|%203.7%20|%203.8-blue.svg \"Python\")](https://www.python.org/)\n[![Style](https://img.shields.io/badge/code%20style-Black-black.svg \"Black\")](https://black.readthedocs.io/en/stable/)\n[![License](https://img.shields.io/badge/license-MIT-yellow.svg \"MIT license\")](https://github.com/pbrus/cerberror/blob/master/LICENSE)\n\n**Cerberror** was designed to customize and handle errors generated by the validator of [Cerberus](https://docs.python-cerberus.org/).\n\n## How it works?\n\nLet's start from checking errors generated by Cerberus:\n```python\n>>> v = Validator({'params': {'type': 'dict', 'schema': {'var1': {'type': 'integer'}, 'var2': {'allowed': [7, 8, 9]}}}})\n>>> v.validate({'params': {'var1': 'Hello World!', 'var2': 3.14}})\n>>> v.errors\n{'params': [{'var1': ['must be of integer type'], 'var2': ['unallowed value 3.14']}]}\n```\nAt least two problems occur when we want to inform a user what went wrong:\n - predetermined error messages,\n - unclear path to wrong variable.\n\n Let's define new messages in `msgs.txt` file:\n ```\n ('params', 'var1') 36 \"{{value}} is not an integer!\"\n ('params', 'var2') 68 \"{{value}} not found in {{constraint}}...\"\n ```\nwhere the columns contain:\n1. A path to the element defined by a tuple. Note that one-element tuple must be defined as `('some_param',)`, not `'some_param',`.\n2. An error code from the [API documentation](https://docs.python-cerberus.org/en/stable/api.html#error-codes). A particular path can have many rules which implies many records in `msgs.txt` for that path.\n3. A user-defined message. Optionally we can refer to [attributes](https://docs.python-cerberus.org/en/stable/api.html#cerberus.errors.ValidationError) of a particular error using `{{attr}}` expressions. Note that a message must be defined between two `\"`, not `'`.\n\nTo get new messages we use `Translator` object:\n```python\n>>> from cerberror import Translator\n\n>>> tr = Translator(v, 'msgs.txt')\n>>> tr.translate()\n{'params -> var2': ['3.14 not found in [7, 8, 9]...'], 'params -> var1': ['Hello World! is not an integer!']}\n```\n\n## Installation\n\nTo install the package please type from the command line:\n```bash\n$ pip3 install cerberror\n```\n\n## Features\n**Cerberror** has a few features which facilitate the usage of it.\n### Updates\nJust like the validator of Cerberus, `Translator` object can be updated at any time:\n```python\n>>> tr = Translator(validator, 'messages.txt')\n>>> tr.validator = another_validator\n>>> tr.path_to_file = 'another_messages.txt'\n```\nThis feature is particularly useful when we want to update files with messages on the fly. It could be used when we need to change language. Just define a proper file:\n```\n('params', 'var1') 36 \"{{value}} ist keine ganze Zahl!\"\n('params', 'var2') 68 \"{{value}} nicht unter {{constraint}} gefunden...\"\n```\n\n### Comments\nComments can be added to files with messages. These files are parsing with the usage of the regular expressions. Valid records are those defined in [How it works?](#how-it-works) section. This means that everything else is treated as a comment. However, I recommend to use `#` to mark where they start.\n ```\n # Comment.\n ('params', 'var1') 36 \"{{value}} is not an integer!\"  # Inline comment.\n ('params', 'var2') 68 \"{{value}} not found in {{constraint}}...\"\n ```\n\n### Paths\nThe returned paths are joined with usage of the default value `' -> '`. This behaviour can be changed easily:\n```python\n>>> tr = Translator(v, 'msgs.txt')\n>>> tr.translate('_')\n{'params_var2': ['3.14 not found in [7, 8, 9]...'], 'params_var1': ['Hello World! is not an integer!']}\n```\n\n### Returns\nIf the translation will finish successfully, the returned value will be a dictionary composed of `path:message(s)` pairs. Otherwise, `Translator` will return untouched errors generated by Cerberus. We can check the status of the translation using `any_error` property:\n```python\n>>> tr.any_error\nFalse\n>>> tr.errors\n{'params -> var2': ['3.14 not found in [7, 8, 9]...'], 'params -> var1': ['Hello World! is not an integer!']}\n...\n>>> tr.any_error\nTrue\n>>> tr.errors\n{'params': [{'var1': ['must be of integer type'], 'var2': ['unallowed value 3.14']}]}  # v.errors\n```\n\n### Internal errors\nInternal errors can be inspected to find out what went wrong. The assumption was that **Cerberror** must not interrupt the translation process. If internal errors occur, `any_error` property will return `True`. Internal errors are always store in `error_list` property. For example:\n```\n# foo and bar attributes don't exist\n('params', 'var1') 36 \"{{foo}} is not an integer!\"\n('params', 'var2') 68 \"{{value}} not found in {{bar}}...\"\n```\n```python\n>>> tr = Translator(v, 'msgs.txt')\n>>> tr.translate()\n{'params': [{'var1': ['must be of integer type'], 'var2': ['unallowed value 3.14']}]}\n>>> tr.any_error\nTrue\n>>> tr.error_list\n[\"Invalid expression '{{bar}}' in file 'msgs.txt'\", \"Invalid expression '{{foo}}' in file 'msgs.txt'\"]\n```\n\n## Contribution\n\nNew feature, bugs? Issues and pull requests are welcome.\n\n## License\n\n**Cerberror** is licensed under the [MIT license](http://opensource.org/licenses/MIT).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pbrus/cerberror",
    "keywords": "validation,customized,error,messages",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cerberror",
    "package_url": "https://pypi.org/project/cerberror/",
    "platform": "",
    "project_url": "https://pypi.org/project/cerberror/",
    "project_urls": {
      "Homepage": "https://github.com/pbrus/cerberror"
    },
    "release_url": "https://pypi.org/project/cerberror/0.1.0/",
    "requires_dist": [
      "setuptools",
      "Cerberus (==1.3.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package allowing to define own error messages for Cerberus",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8353637,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f24c16412a12ad19bb9c89b3796de9024854b8e5b3df4a754fc4db4af9e43b",
          "md5": "6e5fe71de91ece87b05f5b8936cc9d31",
          "sha256": "54c8b0863f44a02848bc4b39b0f05b1640586c650cf565a8dfdd4e439e5aa301"
        },
        "downloads": -1,
        "filename": "cerberror-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e5fe71de91ece87b05f5b8936cc9d31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8456,
        "upload_time": "2020-10-06T20:21:26",
        "upload_time_iso_8601": "2020-10-06T20:21:26.734856Z",
        "url": "https://files.pythonhosted.org/packages/12/f2/4c16412a12ad19bb9c89b3796de9024854b8e5b3df4a754fc4db4af9e43b/cerberror-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16c605315580daef5abea7f2773a906f27c4c20f8a6f4f6c3eed6ce018852d4f",
          "md5": "7cc36187ed6ffd0d75314a49d7d86c16",
          "sha256": "ccc01ce1026225e843fadcf65eb2dd6478d2e7a622f972c119ee6cb3e21c4895"
        },
        "downloads": -1,
        "filename": "cerberror-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cc36187ed6ffd0d75314a49d7d86c16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6570,
        "upload_time": "2020-10-06T20:21:32",
        "upload_time_iso_8601": "2020-10-06T20:21:32.034781Z",
        "url": "https://files.pythonhosted.org/packages/16/c6/05315580daef5abea7f2773a906f27c4c20f8a6f4f6c3eed6ce018852d4f/cerberror-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12f24c16412a12ad19bb9c89b3796de9024854b8e5b3df4a754fc4db4af9e43b",
        "md5": "6e5fe71de91ece87b05f5b8936cc9d31",
        "sha256": "54c8b0863f44a02848bc4b39b0f05b1640586c650cf565a8dfdd4e439e5aa301"
      },
      "downloads": -1,
      "filename": "cerberror-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e5fe71de91ece87b05f5b8936cc9d31",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8456,
      "upload_time": "2020-10-06T20:21:26",
      "upload_time_iso_8601": "2020-10-06T20:21:26.734856Z",
      "url": "https://files.pythonhosted.org/packages/12/f2/4c16412a12ad19bb9c89b3796de9024854b8e5b3df4a754fc4db4af9e43b/cerberror-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16c605315580daef5abea7f2773a906f27c4c20f8a6f4f6c3eed6ce018852d4f",
        "md5": "7cc36187ed6ffd0d75314a49d7d86c16",
        "sha256": "ccc01ce1026225e843fadcf65eb2dd6478d2e7a622f972c119ee6cb3e21c4895"
      },
      "downloads": -1,
      "filename": "cerberror-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7cc36187ed6ffd0d75314a49d7d86c16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6570,
      "upload_time": "2020-10-06T20:21:32",
      "upload_time_iso_8601": "2020-10-06T20:21:32.034781Z",
      "url": "https://files.pythonhosted.org/packages/16/c6/05315580daef5abea7f2773a906f27c4c20f8a6f4f6c3eed6ce018852d4f/cerberror-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}