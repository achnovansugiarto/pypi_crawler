{
  "info": {
    "author": "Jack0Chan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Introduction\r\n\r\n[![Documentation Status](https://readthedocs.org/projects/pyuppaal/badge/?version=latest)](https://pyuppaal.readthedocs.io/en/latest/?badge=latest)    [![Licence](https://img.shields.io/github/license/jack0chan/pyuppaal)](https://opensource.org/licenses/mit-license.php)    [![](https://img.shields.io/badge/github-Jack0Chan-blue)](https://github.com/Jack0Chan)    [![](https://img.shields.io/badge/group-HCPS-blue)](https://www.yuque.com/hcps) \r\n\r\n`pyuppaal` is a research tool that helps you do most things that you can do with UPPAAL GUI. Basic coding flow is:\r\n\r\n1. load a .xml model, just like you open a model in UPPAAL GUI;\r\n2. set the query, just like you edit the queries in UPPAAL GUI;\r\n3. verify a model with the query and options (e.g., shortest path), just like you click the \"Verify\" button in UPPAAL GUI.\r\n\r\nIn addition to the above functions, you can also\r\n\r\n- load a .xtr trace, and get the formatted trace data;\r\n- modify templates, declaration and systems;\r\n- add built-in templates such as Input, Observer, and Monitors; \r\n- find all patterns of the model with certain query.\r\n- [todo] analyze the *SMC* simulation results. \r\n\r\nA [MiniProject_PipeNet](https://github.com/Jack0Chan/pyuppaal/blob/main/src/tests/Doc_MiniProject_PipeNet.ipynb) is provided to help understand how `pauppaal` can contribute to scientific research.\r\n\r\n# Quickstart\r\n\r\n## Installation\r\nTo install `pyuppaal`, simply run this simple command:\r\n\r\n`pip install pyuppaal`\r\n\r\n## Before Coding\r\n\r\nRemember to set the `verifyta_path` in your first line of code.\r\n\r\n```python\r\n\r\npyuppaal.set_verifyta_path(\"your/path/to/verifyta.exe\")\r\n\r\n```\r\n\r\n\r\n## Verify a Model, and Get the Verifycation Result\r\n\r\nLets take the following model P1 with query `A[] not deadlock` as the example. You can download this file via [this_link].\r\n\r\n<img src=https://raw.githubusercontent.com/Jack0Chan/pyuppaal/main/src/tests/figs/demo.png width=250 />\r\n\r\n\r\n```python\r\nimport pyuppaal as pyu\r\n\r\nVERIFYTA_PATH = \"uppaal\\\\Win_Linux-uppaal64-4.1.26\\\\bin-Windows\\\\verifyta.exe\"\r\n# set verifyta path\r\npyu.set_verifyta_path(VERIFYTA_PATH)\r\n\r\ndemo_path = 'demo.xml'\r\n\r\n# verify and return the terminal result\r\nterminal_res = pyu.verify(demo_path)\r\nprint(terminal_res)\r\n\r\n# another method\r\numod = pyu.UModel(demo_path)\r\nassert terminal_res[0] == umod.verify()\r\n```\r\n\r\n    ['Options for the verification:\\n  Generating no trace\\n  Search order is breadth first\\n  Using conservative space optimisation\\n  Seed is 1668171327\\n  State space representation uses minimal constraint systems\\n\\x1b[2K\\nVerifying formula 1 at /nta/queries/query[1]/formula\\n\\x1b[2K -- Formula is NOT satisfied.\\n']\r\n\r\n\r\nYou can also edit the model and get all possible patterns that satisfy the query.\r\n\r\nThe red line is pattern1, and the green line is pattern2.\r\n\r\n<img src=https://raw.githubusercontent.com/Jack0Chan/pyuppaal/main/src/tests/figs/demo_patterns.png width=250 />\r\n\r\n\r\n```python\r\n# save as a new file because find_all_patterns will modify the file\r\numod = umod.save_as('demo_new.xml')\r\n# set the queries of the xml model.\r\numod.set_queries('E<> P1.pass')\r\n\r\nprint(\"broadcast channels: \", umod.broadcast_chan)\r\nprint(\"queries: \", umod.queries)\r\n# get one trace\r\nprint('\\n', umod.easy_verify())\r\n# find all patterns\r\nall_patterns = umod.find_all_patterns()\r\nfor i, pattern in enumerate(all_patterns):\r\n    print(f'pattern{i+1}: ', pattern.untime_pattern)\r\n```\r\n\r\n    broadcast channels:  ['a', 'd', 'b', 'c']\r\n    queries:  ['E<> P1.pass']\r\n    \r\n     State [0]: ['P1.start']\r\n    global_variables [0]: None\r\n    Clock_constraints [0]: [t(0) - P1.t ≤ 0; P1.t - t(0) ≤ 10; ]\r\n    transitions [0]: a: P1 -> []; P1.start -> P1._id2; \r\n    -----------------------------------\r\n    State [1]: ['P1._id2']\r\n    global_variables [1]: None\r\n    Clock_constraints [1]: [t(0) - P1.t ≤ -10; ]\r\n    transitions [1]: b: P1 -> []; P1._id2 -> P1.pass; \r\n    -----------------------------------\r\n    State [2]: ['P1.pass']\r\n    global_variables [2]: None\r\n    Clock_constraints [2]: [t(0) - P1.t ≤ -10; ]\r\n    \r\n    pattern1:  ['a', 'b']\r\n    pattern2:  ['c', 'd']\r\n\r\n\r\n## Verify Models with Multi-threads\r\n\r\n\r\n```python\r\nimport pyuppaal as pyu\r\nimport time\r\n\r\n# set verifyta path\r\npyu.set_verifyta_path(VERIFYTA_PATH)\r\n\r\nmodel_path_list = ['demo.xml', 'demo_new.xml'] * 100\r\ntrace_path_list = ['demo_trace.xtr', 'demo_new_grace.xtr'] * 100\r\n# for loop\r\nt0 = time.time()\r\nfor model, trace in zip(model_path_list, trace_path_list):\r\n    pyu.easy_verify(model_path=model, trace_path=trace)\r\nprint(f'Verify with for loop, time usage {time.time() - t0}')\r\n\r\n# multi-threads\r\nt0 = time.time()\r\npyu.easy_verify(model_path=model_path_list, trace_path=trace_path_list, num_threads=20)\r\nprint(f'Verify with multi-threads, time usage {time.time() - t0}')\r\n```\r\n\r\n    Verify with for loop, time usage 8.65420126914978\r\n    Verify with multi-threads, time usage 1.9333720207214355\r\n\r\n\r\n## Get Communication Graph\r\n\r\nFor models with multiple processes, you can use `pyuppaal.get_communication_graph(model_path)` or `umod.get_communication_graph()` method to visualize the sturcture of the model.\r\n\r\nAn example communication graph of a complex model in [MiniProject_PipeNet](https://github.com/Jack0Chan/pyuppaal/blob/main/src/tests/Doc_MiniProject_PipeNet.ipynb) is shown below:\r\n\r\n[![](https://mermaid.ink/img/pako:eNpVjs0KwjAQhF-l7Lk56DEHT714UUGPC7JttjaQpCHdiFL67kYo_pxmmG8GZoZuNAwaboniUF0aDCcb-cCCYR9iLnJsJ053TmuglH3LtSXnlNp92qtRih9WtoV8d39o84OgBs_JkzXlwYyhqhBkYM8IuljDPWUnCBiWUqUs4_kZOtCSMteQoyHhxlL57kH35CZeXq-ESg8?type=png)](https://mermaid.live/edit#pako:eNpVjs0KwjAQhF-l7Lk56DEHT714UUGPC7JttjaQpCHdiFL67kYo_pxmmG8GZoZuNAwaboniUF0aDCcb-cCCYR9iLnJsJ053TmuglH3LtSXnlNp92qtRih9WtoV8d39o84OgBs_JkzXlwYyhqhBkYM8IuljDPWUnCBiWUqUs4_kZOtCSMteQoyHhxlL57kH35CZeXq-ESg8)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jack0Chan/pyuppaal",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyuppaal",
    "package_url": "https://pypi.org/project/pyuppaal/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyuppaal/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Jack0Chan/pyuppaal/issues",
      "Homepage": "https://github.com/Jack0Chan/pyuppaal"
    },
    "release_url": "https://pypi.org/project/pyuppaal/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A research tool that can simulate, verify or modify UPPAAL models with python. It can also help to analyze counter-examples in .xml format",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15736271,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af97b476d2a2e08f12b012252139ab3815d77964e1bcf8fd9439a1477f4eb5b",
          "md5": "9cf3d897fdba74397e348178cdf5f359",
          "sha256": "7bf02beb8969b398df3ca4db3c71dc692630502f5b78dd0b791ecd1ac8126a2b"
        },
        "downloads": -1,
        "filename": "pyuppaal-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cf3d897fdba74397e348178cdf5f359",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24027,
        "upload_time": "2022-08-01T02:11:03",
        "upload_time_iso_8601": "2022-08-01T02:11:03.022617Z",
        "url": "https://files.pythonhosted.org/packages/2a/f9/7b476d2a2e08f12b012252139ab3815d77964e1bcf8fd9439a1477f4eb5b/pyuppaal-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "111570adee2c2d3a5214e352ca1ea2e7626ca16dc6473cf7fe5a90a1e9a5a255",
          "md5": "0bc0cf16c0c36083652439e7da1351ef",
          "sha256": "6411d12234747096d757d669d9eabd582ee2635b1054348d9838b56988adf9e7"
        },
        "downloads": -1,
        "filename": "pyuppaal-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0bc0cf16c0c36083652439e7da1351ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22280,
        "upload_time": "2022-08-01T02:11:05",
        "upload_time_iso_8601": "2022-08-01T02:11:05.208365Z",
        "url": "https://files.pythonhosted.org/packages/11/15/70adee2c2d3a5214e352ca1ea2e7626ca16dc6473cf7fe5a90a1e9a5a255/pyuppaal-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2680efe574ee4c0d4e43d5fc9cd853f34ce636651c0b2b68a54959906c7f33",
          "md5": "e11ec38bd39b0fdea631a34a3a2abd6b",
          "sha256": "6f6ab1bc617a3345f80502c3be737571cd4e16d4600151c72b43bb6e010f01ca"
        },
        "downloads": -1,
        "filename": "pyuppaal-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "e11ec38bd39b0fdea631a34a3a2abd6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2835850,
        "upload_time": "2022-09-05T13:51:37",
        "upload_time_iso_8601": "2022-09-05T13:51:37.827277Z",
        "url": "https://files.pythonhosted.org/packages/4a/26/80efe574ee4c0d4e43d5fc9cd853f34ce636651c0b2b68a54959906c7f33/pyuppaal-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70b20c884a69aa60c4b8d5201090680cecde60c37300783729cd239a1ad5bfe",
          "md5": "6d41d4443862e9706fa3e9b21d2e6c98",
          "sha256": "159022db95e616293de96da916ab070e7b4ed53ba163e4b498538e46f0ae6b24"
        },
        "downloads": -1,
        "filename": "pyuppaal-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "6d41d4443862e9706fa3e9b21d2e6c98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2050225,
        "upload_time": "2022-09-08T09:14:55",
        "upload_time_iso_8601": "2022-09-08T09:14:55.909591Z",
        "url": "https://files.pythonhosted.org/packages/a7/0b/20c884a69aa60c4b8d5201090680cecde60c37300783729cd239a1ad5bfe/pyuppaal-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ece6a01764420e602f1612d7c9b332597971c3632280f90dfdc060485b439b",
          "md5": "a8caffb169ff42ddaf8deafaf3c53b83",
          "sha256": "ab485320dd468ae9aac25f4722fd0e4f17f8a7bd09cae82e91545e8cba371c4e"
        },
        "downloads": -1,
        "filename": "pyuppaal-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "a8caffb169ff42ddaf8deafaf3c53b83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2050216,
        "upload_time": "2022-09-08T09:51:36",
        "upload_time_iso_8601": "2022-09-08T09:51:36.371088Z",
        "url": "https://files.pythonhosted.org/packages/a7/ec/e6a01764420e602f1612d7c9b332597971c3632280f90dfdc060485b439b/pyuppaal-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3906a9b165d2f23f7c0b351a51a99d805cfb5457eee26a2ff0e5ac91de9ef07b",
          "md5": "7f8936f3b83b20fa403ba06af7b20283",
          "sha256": "24fb9a38990aea247e7a14259f3da1f6d8dec1782a6d23c949ae33b78876a453"
        },
        "downloads": -1,
        "filename": "pyuppaal-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f8936f3b83b20fa403ba06af7b20283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 947068,
        "upload_time": "2022-11-11T14:37:22",
        "upload_time_iso_8601": "2022-11-11T14:37:22.358931Z",
        "url": "https://files.pythonhosted.org/packages/39/06/a9b165d2f23f7c0b351a51a99d805cfb5457eee26a2ff0e5ac91de9ef07b/pyuppaal-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3906a9b165d2f23f7c0b351a51a99d805cfb5457eee26a2ff0e5ac91de9ef07b",
        "md5": "7f8936f3b83b20fa403ba06af7b20283",
        "sha256": "24fb9a38990aea247e7a14259f3da1f6d8dec1782a6d23c949ae33b78876a453"
      },
      "downloads": -1,
      "filename": "pyuppaal-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f8936f3b83b20fa403ba06af7b20283",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 947068,
      "upload_time": "2022-11-11T14:37:22",
      "upload_time_iso_8601": "2022-11-11T14:37:22.358931Z",
      "url": "https://files.pythonhosted.org/packages/39/06/a9b165d2f23f7c0b351a51a99d805cfb5457eee26a2ff0e5ac91de9ef07b/pyuppaal-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}