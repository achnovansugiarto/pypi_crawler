{
  "info": {
    "author": "David Schaller",
    "author_email": "sdavid@bioinf.uni-leipzig.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# tralda\n\n[![license: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![pypi version](https://img.shields.io/badge/pypi-v1.0.1-blue.svg)](https://pypi.org/project/tralda/)\n\nA Python library for **tr**ee **al**gorithms and **da**ta structures.\n\n## Installation\n\nThe package requires Python 3.7 or higher.\n\n#### Easy installation with pip\n\nThe `tralda` package is available on [PyPI](https://pypi.org/project/tralda/):\n\n    pip install tralda\n\nFor details about how to install Python packages see [here](https://packaging.python.org/tutorials/installing-packages/).\n\n#### Installation with the setup file\n\nAlternatively, you can download or clone the repo, go to the root folder of package and install it using the command:\n\n    python setup.py install\n\n#### Dependencies\n\nThe package has several dependencies (which are installed automatically when using `pip`):\n* [NetworkX](https://networkx.github.io/)\n* [Numpy](https://numpy.org)\n\n## Usage and description\n\n### Tree data structure\n\nThe class `Tree` implements the tree data structure which is essential for most of the modules in the package and can be imported from the subpackage `tralda.datastructures`.\nIt provides methods for tree traversals and manipulation, output in Newick format, as well as the linear-time computation of last common ancestors by Bender & Farach-Colton (class `LCA` which is initialized with an instance of type `Tree`).\n`Tree` instances can be serialized in pickle or json format.\n\n<details>\n<summary>Overview of the functions of the class TreeNode: (Click to expand)</summary>\n\n| Function | Description |\n| --- | --- |\n| `attributes()` | generator for the node attributes |\n| `add_child(child_node)` | add `child_node` as a child |\n| `add_child_right_of(child_node, right_of)` | add `child_node` as a child to the right of `right_of` |\n| `remove_child(child_node)` | remove the child `child_node` |\n| `detach()` | remove the node from its parent's children |\n| `is_leaf()` | check if the node is a leaf |\n| `child_subsequence(left_node, right_node)` | list of children between `left_node` and `right_node`\n\n</details>\n\n<details>\n\n<summary>Overview of the functions of the class Tree: (Click to expand)</summary>\n\n| Function | Description |\n| --- | --- |\n| `leaves()` | generator for the leaf nodes |\n| `preorder()` | generator for preorder (=top-down) traversal |\n| `postorder()` | generator for postorder (=bottom-up) traversal |\n| `inner_vertices()` | generator for inner nodes |\n| `edges()` | generator for the edges of the tree |\n| `euler_generator()` | generator for an Euler tour |\n| `leaf_dict()` | compute the `list` of leaf nodes in the subtree of each node, and return them as a `dict` |\n| `contract(edges)` | contract all edges in the collection `edges` |\n| `get_triples()` | return a list of all triples that are displayed by the tree |\n| `delete_and_reconnect(node)` | delete `node` and reconnect its children to its parent |\n| `copy()` | construct a copy of the tree (node attributes are only copied as references, but mutable data types should be avoided as node attribute values) |\n| `to_newick()` | return a `str` representation of the tree in Newick format |\n| `random_tree(N, binary=False)` | return a random tree with `N` leaves that is optionally forced to be binary; new children are stepwise attached to randomly selected nodes until `N` are reached |\n| `to_nx()` | return a NetworkX `DiGraph` version of the tree (with the ids of the `TreeNode` instances as nodes) and its `root` (also represented by the id) |\n| `parse_nx(G, root)` | convert a tree encoded as a NetworkX `DiGraph` (together with the `root`) back into a `Tree` |\n| `serialize(filename, mode=None)` | serialize a tree in JSON or pickle format specified by `mode`; default is `None`, in which case the mode is inferred from the filename ending |\n| `load(filename, mode=None)` | load a tree from file in JSON or pickle format specified by `mode`; default is `None`, in which case the mode is inferred from the filename ending |\n| `is_binary()` | check if the tree is binary |\n| `is_phylogenetic()` | check if the tree is phylogenetic (all inner nodes have at least one child) |\n| `equal_topology(other)` | check whether this tree and `other` have the same topology based on the leaves' `label` attributes |\n| `is_refinement` | check whether this tree refines `other` based on the leaves' `label` attributes |\n\n</details>\n\n<details>\n\n<summary>Overview of the functions of the class LCA: (Click to expand)</summary>\n\n| Function | Description |\n| --- | --- |\n| `get(a, b)` | get the last common ancestor of nodes a and b |\n| `displays_triple(a, b, c)` | check whether the triple ab|c is displayed |\n| `are_comparable(u, v)` | check whether `u` and `v` are comparable in terms of the ancestor relation |\n| `ancestor_or_equal(u, v)` | check whether `u` is equal to or an ancestor of `v` |\n| `ancestor_not_equal(u, v)` | check whether `u` is a strict ancestor of `v` |\n| `descendant_or_equal(u, v)` | check whether `u` is equal to or a descendant of `v` |\n| `descendant_not_equal(u, v)` | check whether `u` is a strict descendant of `v` |\n| `consistent_triples(triples)` | `list` with the subset of `triples` that are displayed by the tree |\n| `consistent_triple_generator` | generator for the items in `triples` that are displayed |\n\n</details>\n\n<details>\n<summary>Example usage: (Click to expand)</summary>\n\n    from tralda.datastructures import Tree, LCA\n\n    # construct a random tree with 20 leaves\n    tree = Tree.random_tree(20)\n\n    # serialization, reload via Tree.load('path/to/file.json')\n    tree.serialize('path/to/file.json')\n\n    # linear-time processing of the tree for constant-time\n    # last common ancestor queries\n    lca_T = LCA(tree)\n\n    # l.c.a. queries via 'TreeNode' instances or labels (if the nodes\n    # in the tree have the label attribute set)\n    print( lca_T(4, 7) )\n\n    # triple queries (e.g. is 3 5 | 2 displayed?)\n    print( lca_T.displays_triple(3, 5, 2) )\n\n</details>\n\n### Supertree computation\n\nThe subpackage `tralda.supertree` implements a number of algorithms for the computation of supertrees:\n* BUILD (Aho et al. 1981), class `Build` or function `BUILD_supertree`\n* BuildST (Deng & FernÃ¡ndez-Baca 2016), class `BuildST` or function `build_st`\n* Loose_Cons_Tree (Jansson et al. 2016), class `LooseConsensusTree` or function `loose_consensus_tree`\n* LinCR (Schaller et al. 2021), class `LinCR` or function `linear_common_refinement`\n\nThe latter two algorithms compute the loose consensus tree and the common refinement, resp., for a sequence of trees on the same set of leaves in linear time.\n\n### Cographs and cotrees\n\nThe subpackage `tralda.cograph` contains an efficient algorithm for cograph recognition and heuristics for cograph editing:\n* function `to_cotree` recognizes cographs and returns a `Tree` representation in the positive case (Corneil et al. 1985)\n* function `edit_to_cograph` edits an arbitrary graph to a cograph (algorithm from Crespelle 2019) and returns a `Tree` representation\n\n### Other data structures\n\nThe following auxiliary data structures can be imported from the subpackage `tralda.datastructures`:\n* linked list: class `LinkedList`\n* doubly-linked list: class `DoublyLinkedList`\n* HDT dynamic graph data structure (Holm, de Lichtenberg & Thorup in 2001): class `HDTGraph`\n* AVL trees: classes `TreeSet` and `TreeDict` implement data structures for sorted sets and dictionaries, respectively\n\n## Citation and references\n\nIf you use `tralda` in your project or code from it, please consider citing:\n\n* **Schaller, D., Hellmuth, M., Stadler, P.F. (2021) A Simple Linear-Time Algorithm for the Common Refinement of Rooted Phylogenetic Trees on a Common Leaf Set.**\n\nAdditional references to algorithms that were implemented are given in the source code.\n\nPlease report any bugs and questions in the [Issues](https://github.com/david-schaller/tralda/issues) section.\nAlso, feel free to make suggestions for improvement and/or new functionalities.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/david-schaller/tralda",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tralda",
    "package_url": "https://pypi.org/project/tralda/",
    "platform": null,
    "project_url": "https://pypi.org/project/tralda/",
    "project_urls": {
      "Bug Tracker": "https://github.com/david-schaller/tralda/issues",
      "Homepage": "https://github.com/david-schaller/tralda"
    },
    "release_url": "https://pypi.org/project/tralda/1.0.1/",
    "requires_dist": [
      "numpy",
      "networkx"
    ],
    "requires_python": ">=3.7",
    "summary": "A library for tree data structures and algorithms",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13708060,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5547adb9a3348736a1b96aa78f61d76d2f7f5b77e33b87ac275ba156cb92414e",
          "md5": "57e4a0977638e15afcca0871ec14a57a",
          "sha256": "6967f295a6fcbc573b203d54f89fa84fe9d33482c5e8b3394d2740b14c0eecda"
        },
        "downloads": -1,
        "filename": "tralda-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "57e4a0977638e15afcca0871ec14a57a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43479,
        "upload_time": "2021-07-01T12:18:07",
        "upload_time_iso_8601": "2021-07-01T12:18:07.539844Z",
        "url": "https://files.pythonhosted.org/packages/55/47/adb9a3348736a1b96aa78f61d76d2f7f5b77e33b87ac275ba156cb92414e/tralda-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1cbd9b248f882a551ece6c293c4e8f55d0bd15f6f6dfd33388f2d510707e38e",
          "md5": "9498011cb423f643c645cce1ad0d5dee",
          "sha256": "8692e0f51bfb022bb13c231ade5a080a3a75c46d5248af8e75b3325fa12045de"
        },
        "downloads": -1,
        "filename": "tralda-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9498011cb423f643c645cce1ad0d5dee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 68846,
        "upload_time": "2021-09-28T15:48:12",
        "upload_time_iso_8601": "2021-09-28T15:48:12.192883Z",
        "url": "https://files.pythonhosted.org/packages/c1/cb/d9b248f882a551ece6c293c4e8f55d0bd15f6f6dfd33388f2d510707e38e/tralda-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a175f2182b7fda38969f18fe6fd7d5a6cecea73638a0a355d3628935b5a4ffd",
          "md5": "ec992ea994f7f95350f67ed03430bc7e",
          "sha256": "059de84dce8eb8406797be7a9d6d05ba84cf5edc42fa08b583a1b1e29eb0a3aa"
        },
        "downloads": -1,
        "filename": "tralda-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec992ea994f7f95350f67ed03430bc7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 63077,
        "upload_time": "2021-09-28T15:48:13",
        "upload_time_iso_8601": "2021-09-28T15:48:13.697099Z",
        "url": "https://files.pythonhosted.org/packages/9a/17/5f2182b7fda38969f18fe6fd7d5a6cecea73638a0a355d3628935b5a4ffd/tralda-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b12481a53988a68a2fc202a8791664a32f9499ff9ac77bd4d61ff9e865e2b7a2",
          "md5": "f7bbf22b922ee39028f7daf939b4baf6",
          "sha256": "24a6bf34f42b931e2427244c39351df18df349ad064fdfd361d47cf975b4cc91"
        },
        "downloads": -1,
        "filename": "tralda-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7bbf22b922ee39028f7daf939b4baf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 72175,
        "upload_time": "2022-05-04T09:35:19",
        "upload_time_iso_8601": "2022-05-04T09:35:19.029973Z",
        "url": "https://files.pythonhosted.org/packages/b1/24/81a53988a68a2fc202a8791664a32f9499ff9ac77bd4d61ff9e865e2b7a2/tralda-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d8ef4b1fbb5f06165f03d169b6222306bf2cf627267a747e74e91c232cc4cf",
          "md5": "e92a980f32148676453c2c45b99cf063",
          "sha256": "628edcf728bbb52889d8a7533ef67ec7d41e282af5092dbef671594e8967c063"
        },
        "downloads": -1,
        "filename": "tralda-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e92a980f32148676453c2c45b99cf063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 65732,
        "upload_time": "2022-05-04T09:35:20",
        "upload_time_iso_8601": "2022-05-04T09:35:20.701848Z",
        "url": "https://files.pythonhosted.org/packages/f9/d8/ef4b1fbb5f06165f03d169b6222306bf2cf627267a747e74e91c232cc4cf/tralda-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b12481a53988a68a2fc202a8791664a32f9499ff9ac77bd4d61ff9e865e2b7a2",
        "md5": "f7bbf22b922ee39028f7daf939b4baf6",
        "sha256": "24a6bf34f42b931e2427244c39351df18df349ad064fdfd361d47cf975b4cc91"
      },
      "downloads": -1,
      "filename": "tralda-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7bbf22b922ee39028f7daf939b4baf6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 72175,
      "upload_time": "2022-05-04T09:35:19",
      "upload_time_iso_8601": "2022-05-04T09:35:19.029973Z",
      "url": "https://files.pythonhosted.org/packages/b1/24/81a53988a68a2fc202a8791664a32f9499ff9ac77bd4d61ff9e865e2b7a2/tralda-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9d8ef4b1fbb5f06165f03d169b6222306bf2cf627267a747e74e91c232cc4cf",
        "md5": "e92a980f32148676453c2c45b99cf063",
        "sha256": "628edcf728bbb52889d8a7533ef67ec7d41e282af5092dbef671594e8967c063"
      },
      "downloads": -1,
      "filename": "tralda-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e92a980f32148676453c2c45b99cf063",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 65732,
      "upload_time": "2022-05-04T09:35:20",
      "upload_time_iso_8601": "2022-05-04T09:35:20.701848Z",
      "url": "https://files.pythonhosted.org/packages/f9/d8/ef4b1fbb5f06165f03d169b6222306bf2cf627267a747e74e91c232cc4cf/tralda-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}