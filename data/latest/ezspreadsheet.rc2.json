{
  "info": {
    "author": "Kieran Wood",
    "author_email": "kieran@canadiancoding.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![ezspreadsheet logo](https://raw.githubusercontent.com/Descent098/ezspreadsheet/master/.github/logo.png)\n\n# EZ Spreadsheet\n\n*A simple API to store/load python objects to/from spreadsheets*\n\n## Table of contents\n- [Goals](#goals)\n- [Features](#features)\n  - [Object Serialization](#object-serialization)\n  - [Object Deserialization](#object-deserialization)\n  - [Flexibility](#flexibility)\n  - [Readability](#readability)\n- [Installation](#installation)\n- [Quick-start](#quick-start)\n- [Additional Documentation](#additional-documentation)\n\n## Goals\nThis project has a few goals:\n1. Make OO projects easier to serialize\n2. Make interfacing with spreadsheet files simple\n3. Use as minimal syntax as possible to complete the above\n\n## Features\n\nBelow are a some of the features in ezspreadsheet.\n\n### Object serialization\n\nThe api lets you directly serialize object instances into spreadsheets:\n\n```python\nfrom ezspreadsheet import Spreadsheet\n\nclass Animal():\n    def __init__(self, name:str, conservation_status:str):\n        self.name = name\n        self.conservation_status = conservation_status\n\nleopard_gecko = Animal('Leopard Gecko', 'Least Concern')\n\nwith Spreadsheet('animals.xlsx', Animal) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(leopard_gecko)\n```\n\n### Object deserialization\n\nThe api lets you deserialize objects from spreadsheets back into instances (Note if you don't provide a class to build back into a dynamic [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple) is generated):\n\n```python\nfrom ezspreadsheet import Spreadsheet\n\nclass Animal():\n    def __init__(self, name:str, conservation_status:str):\n        self.name = name\n        self.conservation_status = conservation_status\n\nleopard_gecko = Animal('Leopard Gecko', 'Least Concern')\n\nphilippine_eagle = Animal('Philippine Eagle', 'Threatened')\n\n# Store Data\nwith Spreadsheet('animals.xlsx', Animal) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(leopard_gecko, philippine_eagle)\n\n# Retrieve data using the same class construtor\nwith Spreadsheet('animals.xlsx', Animal) as input_sheet: # to use .csv just change file extension\n    animals, instances = input_sheet.load(\"animals\")\n\nprint(instances) # prints: [<__main__.Animal object at 0x0000011BAB89A3A0>, <__main__.Animal object at 0x0000011BAD4289A0>]\n# Note the class constructor is the same\nprint(Animal == animals) # Prints: True\n\n# Retrieve namedtuple classes when no class constructor is available\nwith Spreadsheet('animals.xlsx') as input_sheet: # to use .csv just change file extension\n    animals, instances = input_sheet.load(\"animals\")\n\nprint(animals) # Prints: <class 'ezspreadsheet.animals'>\nprint(instances) # Prints: [animals(name='Leopard Gecko', conservation_status='Least Concern'), animals(name='Philippine Eagle', conservation_status='Threatened')]\n\n# Note the class constructor is now different\nprint(Animal == animals) # Prints: False\n```\n\n### Flexibility\n\nThere is syntactic flexibility to allow an arbitrary number of instance arguments, or simple Iterables (like lists and tuples):\n\n```python\nfrom ezspreadsheet import Spreadsheet\n\nclass Animal():\n    def __init__(self, name:str, conservation_status:str):\n        self.name = name\n        self.conservation_status = conservation_status\n\nleopard_gecko = Animal('Leopard Gecko', 'Least Concern')\n\nphilippine_eagle = Animal('Philippine Eagle', 'Threatened')\n\n# Direct instances\nwith Spreadsheet('animals.xlsx', Animal) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(leopard_gecko, philippine_eagle)\n\n# Iterables\ninstances = []\ninstances.append(leopard_gecko)\ninstances.append(philippine_eagle)\n\nwith Spreadsheet('animals.xlsx', Animal) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(instances)\n```\n\n### Readability\n\nYou can specify a ```readable``` variable in the ```Spreadsheet.store()``` method to allow Iterable instance attributes to be written in a readable format (note they will be deserialized as strings):\n\n```python\nfrom ezspreadsheet import Spreadsheet\nfrom dataclasses import dataclass\n\n@dataclass\nclass User():\n    Name:str\n    Age:int\n    Weight:int\n    Family: list # Note that Iterables will be flattened to a string with newline seperators\n\njd = User(\"John Doe\", 20, 75, [\"Abby\", \"Mike\", \"Janice\"])\n\n# Store Data as readable\nwith Spreadsheet('users.xlsx', User) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(jd, readable=True)\n\n# Retrieve namedtuple classes when no class constructor is available\nwith Spreadsheet('users.xlsx') as input_sheet: # to use .csv just change file extension\n    users, instances = input_sheet.load(\"users\")\n\nprint(instances[0].Family) # Prints: - Abby\\n- Mike\\n- Janice\n\n# Store Data as not readable\nwith Spreadsheet('users.xlsx', User) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(jd)\n\n# Retrieve namedtuple classes when no class constructor is available\nwith Spreadsheet('users.xlsx') as input_sheet: # to use .csv just change file extension\n    users, instances = input_sheet.load(\"users\")\n\nprint(instances[0].Family) # Prints: ['Abby', 'Mike', 'Janice']\n```\n\n## Installation\n\n### From PyPi\n\n1. Run ```pip install ezspreadsheet``` or ```sudo pip3 install ezspreadsheet```\n\n### From source\n\n1. Clone this repo: (https://github.com/Descent098/ezspreadsheet)\n2. Run ```pip install .``` or ```sudo pip3 install .```in the root directory\n\n\n## Quick-start\n\n**Note that syntax does not change between ```.xlsx``` and ```.csv``` files, you can replace ```.xlsx``` with ```.csv``` and below examples will work**\n\n### Store some animal instances in a spreadsheet called 'animals.xlsx', then read back the data\n```python\nfrom ezspreadsheet import Spreadsheet\n\nclass Animal():\n    def __init__(self, name:str, conservation_status:str):\n        self.name = name\n        self.conservation_status = conservation_status\n\nleopard_gecko = Animal('Leopard Gecko', 'Least Concern')\n\nphilippine_eagle = Animal('Philippine Eagle', 'Threatened')\n\n# Store\nwith Spreadsheet('animals.xlsx', Animal) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(leopard_gecko, philippine_eagle)\n\n# Load\nwith Spreadsheet('animals.xlsx', Animal) as input_sheet: # to use .csv just change file extension\n    _, instances = output_sheet.load(\"animals\")\n\nprint(instances) # prints: [<__main__.Animal object at 0x0000011BAB89A3A0>, <__main__.Animal object at 0x0000011BAD4289A0>]\n```\n\n### Store a list of instances into a spreadsheet called 'users.xlsx'\n```python\nfrom ezspreadsheet import Spreadsheet\n\nimport random\nimport string\nfrom dataclasses import dataclass\n\n@dataclass\nclass User():\n    Name:str\n    Age:int\n    Weight:int\n    Family: list # Note that Iterables will be flattened to a string with newline seperators\n\ninstances = []\nranstring = lambda: ''.join(random.choices(string.ascii_uppercase, k=10)) # Generates a random 10 character string\nfor i in range(1000):\n    instances.append(User(ranstring(), random.randint(12,100), random.randint(75,400), [ranstring(), ranstring(), ranstring()]))\n\nwith Spreadsheet('users.xlsx', User) as output_sheet: # to use .csv just change file extension\n    output_sheet.store(instances)\n```\n\n## Differences between xlsx and csv\n\nPlease note there are some differnces between ```.xlsx``` files and ```.csv``` files:\n1. ```.xlsx``` files are significantly faster because they isntantiate cell objects and are C-level optimized instead of just doing plain text generation. If you need to save thousands of objects, I would recommend using ```.xlsx``` files.\n2. When passing ```readable=True``` to ```Spreadsheet.store()``` the formatting for ```.xlsx``` files allows for newlines, so iterables are broken by newlines ```\\n```. CSV readers use newlines to read csv files (even when told not to), so they are broken by tabs ```\\t``` in ```.csv``` files instead.\n\n## Additional Documentation\n\nAdditional documentation can be found at https://kieranwood.ca/ezspreadsheet\n\nFor details on how contributing to the project, please see [CONTRIBUTING.md](https://github.com/Descent098/ezspreadsheet/blob/master/CONTRIBUTING.md), for details on upcoming changes see [our roadmap](https://github.com/Descent098/ezspreadsheet/projects).\n\nFor most recent changes see [CHANGELOG.md](https://github.com/Descent098/ezspreadsheet/blob/master/CHANGELOG.md).\n# Changelog\n\n## 0.2.2; November 24th 2020\n\n- Updated links to include docs and source code urls\n\n## 0.2.1; November 24th 2020\n\n- Updated description to match name change\n\n## 0.2.0; November 24th 2020\n\n- Added deserialization methods for xlsx files\n- Added serialization and deserialization methods for CSV files\n- Changed name from ezexcel to ezspreadsheet\n- Split Xlxs processing to internal class and converted Spreadsheet class to dispatching class\n\n## 0.1.1; September 25th 2020\n\nFixed logo loading on PyPi\n\n### Bug fixes\n\n- Fixed loading issue with logo on PyPi\n\n## 0.1.0; September 25th\n\nInitial release of EZ Excel\n\n### Features\n\n- Ability to provide a class to instantiate a Spreadsheet\n- Ability to pass instances in an iterable of class to Spreadsheet to be serialized\n- Automatically flatten Iterable attributes within instances to endline delimited strings\n- Added testing suite for all existing functionality\n\n### Documentation improvements\n\n- Wrote all existing documentation :)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezspreadsheet",
    "package_url": "https://pypi.org/project/ezspreadsheet/",
    "platform": "",
    "project_url": "https://pypi.org/project/ezspreadsheet/",
    "project_urls": {
      "API Docs": "https://kieranwood.ca/ezspreadsheet",
      "Bug Report": "https://github.com/Descent098/ezspreadsheet/issues/new?assignees=Descent098&labels=bug&template=bug_report.md&title=%5BBUG%5D",
      "Feature Request": "https://github.com/Descent098/ezspreadsheet/issues/new?assignees=Descent098&labels=enhancement&template=feature_request.md&title=%5BFeature%5D",
      "Roadmap": "https://github.com/Descent098/ezspreadsheet/projects",
      "Source": "https://github.com/Descent098/ezspreadsheet"
    },
    "release_url": "https://pypi.org/project/ezspreadsheet/0.2.2/",
    "requires_dist": [
      "openpyxl",
      "colored",
      "nox ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A simple API to store/load python objects to/from spreadsheets",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8740459,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5e21d9c94426ee9b732d5f6f94f4665f1272c1a46eb87a3535cc13e85a9fb67",
          "md5": "09105b8764da5eef33e567fcef7f7188",
          "sha256": "32d3cd64739e1778b1e299651ee4714e042dd295390901af43dde9f41fcd942b"
        },
        "downloads": -1,
        "filename": "ezspreadsheet-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09105b8764da5eef33e567fcef7f7188",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22875,
        "upload_time": "2020-11-24T20:36:28",
        "upload_time_iso_8601": "2020-11-24T20:36:28.807057Z",
        "url": "https://files.pythonhosted.org/packages/e5/e2/1d9c94426ee9b732d5f6f94f4665f1272c1a46eb87a3535cc13e85a9fb67/ezspreadsheet-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c415ca6cf0ce140a0fe65470513415628b6144ad210a84688ffeda91f0ab5e1",
          "md5": "ad65edc04df17630f9048f69241e5370",
          "sha256": "d797b73d758ba11a2b031161ec13de951313cd023f821e4f10deb4db8a923636"
        },
        "downloads": -1,
        "filename": "ezspreadsheet-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad65edc04df17630f9048f69241e5370",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22649,
        "upload_time": "2020-11-24T20:40:11",
        "upload_time_iso_8601": "2020-11-24T20:40:11.611874Z",
        "url": "https://files.pythonhosted.org/packages/4c/41/5ca6cf0ce140a0fe65470513415628b6144ad210a84688ffeda91f0ab5e1/ezspreadsheet-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7c14c5e083b19df171fc1449c385d8bddc893e96deaed2c3d895a5be2eec3eb",
          "md5": "249402390d4e64e8a85172911aa865e3",
          "sha256": "612915496051b5fa0c200294a26ec5e9c3fce98be37c56315284d1a9d6811176"
        },
        "downloads": -1,
        "filename": "ezspreadsheet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "249402390d4e64e8a85172911aa865e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10616,
        "upload_time": "2020-11-24T20:36:30",
        "upload_time_iso_8601": "2020-11-24T20:36:30.108926Z",
        "url": "https://files.pythonhosted.org/packages/c7/c1/4c5e083b19df171fc1449c385d8bddc893e96deaed2c3d895a5be2eec3eb/ezspreadsheet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5df1296833dd6a7e406534c2e1dcc0852d63402b6d2c0d25bf6c5a244f37777e",
          "md5": "79c9f3059303bd3026bbc6292b349648",
          "sha256": "50b18f99330b0afb2f601e4c4a301939f6cbf0d1a1fc13c8b4b3fa40badc2ac9"
        },
        "downloads": -1,
        "filename": "ezspreadsheet-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79c9f3059303bd3026bbc6292b349648",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22817,
        "upload_time": "2020-11-24T20:54:14",
        "upload_time_iso_8601": "2020-11-24T20:54:14.545142Z",
        "url": "https://files.pythonhosted.org/packages/5d/f1/296833dd6a7e406534c2e1dcc0852d63402b6d2c0d25bf6c5a244f37777e/ezspreadsheet-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "129549c2077367297e8471b090a5d3b5f81821b0b5a8a700295b396e8846c7fa",
          "md5": "24373ca9c5153eab463c26d8347184e9",
          "sha256": "09162120e9ba6d2ce4a59e547c67c03460f7a99b027abca6eeacd1316292e861"
        },
        "downloads": -1,
        "filename": "ezspreadsheet-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24373ca9c5153eab463c26d8347184e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10865,
        "upload_time": "2020-11-24T20:54:15",
        "upload_time_iso_8601": "2020-11-24T20:54:15.808270Z",
        "url": "https://files.pythonhosted.org/packages/12/95/49c2077367297e8471b090a5d3b5f81821b0b5a8a700295b396e8846c7fa/ezspreadsheet-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5df1296833dd6a7e406534c2e1dcc0852d63402b6d2c0d25bf6c5a244f37777e",
        "md5": "79c9f3059303bd3026bbc6292b349648",
        "sha256": "50b18f99330b0afb2f601e4c4a301939f6cbf0d1a1fc13c8b4b3fa40badc2ac9"
      },
      "downloads": -1,
      "filename": "ezspreadsheet-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79c9f3059303bd3026bbc6292b349648",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22817,
      "upload_time": "2020-11-24T20:54:14",
      "upload_time_iso_8601": "2020-11-24T20:54:14.545142Z",
      "url": "https://files.pythonhosted.org/packages/5d/f1/296833dd6a7e406534c2e1dcc0852d63402b6d2c0d25bf6c5a244f37777e/ezspreadsheet-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "129549c2077367297e8471b090a5d3b5f81821b0b5a8a700295b396e8846c7fa",
        "md5": "24373ca9c5153eab463c26d8347184e9",
        "sha256": "09162120e9ba6d2ce4a59e547c67c03460f7a99b027abca6eeacd1316292e861"
      },
      "downloads": -1,
      "filename": "ezspreadsheet-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "24373ca9c5153eab463c26d8347184e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10865,
      "upload_time": "2020-11-24T20:54:15",
      "upload_time_iso_8601": "2020-11-24T20:54:15.808270Z",
      "url": "https://files.pythonhosted.org/packages/12/95/49c2077367297e8471b090a5d3b5f81821b0b5a8a700295b396e8846c7fa/ezspreadsheet-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}