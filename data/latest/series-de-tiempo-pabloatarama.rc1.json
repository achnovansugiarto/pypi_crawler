{
  "info": {
    "author": "Pablo Atarama",
    "author_email": "contacto@pabloatarama.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Paquete Series De Tiempo\nVersión 1.0.1\n\nAutor: Pablo Atarama [https://pabloatarama.com/](https://pabloatarama.com/)\n\n© Derechos Reservados 2021\n\n## Importar libreria\nPara importar la librería utilizamos:\n\n```python\nimport SeriesDeTiempo as st\n```\n\nPasos para utilizar la librería:\n1. Crear un objeto del tipo **Serie**.\n2. Aplicar un modelo a un objeto del tipo Serie que nos devolverá un objeto del tipo **Modelo**.\n\n## Crear una serie\n\nPara crear un objeto de tipo **Serie** (Serie de tiempo) utilizamos:\n\n```python\nserie = st.Serie(DataFrame, columna=\"\")\n```\n\nDonde *DataFrame* es el DataFrame de la librería *pandas* donde se extraerá la data y *columna* la columna del DataFrame específica que se considerará como *yt*.\n\n## Aplicar un modelo\n\nPara usar un modelo se aplicara la respectiva función del modelo sobre el objeto de tipo **Serie**. Esto devolverá un objeto del tipo de modelo especificado. Cada función utiliza diferentes parámetros.\n\n### Modelos soportados\n\nConsiderando que se creó un objeto de tipo **Serie** llamado *serie*:\n\n#### Naive\n\n```python\nserieConModelo = serie.naive()\n```\n\n#### Media movil simple\n\n```python\nserieConModelo = serie.mediaMovilSimple(longitud=3, desfasada=False)\n```\n\n- longitud: longitud de la media móvil simple, por defecto es 3.\n- desfasada: Si es desfasada o no (True o False), por defecto es False.\n\n#### Media movil doble\n\n```python\nserieConModelo = serie.mediaMovilDoble(longitud=3, desfasada=False)\n```\n\n- longitud: longitud de ambas medias móviles, por defecto es 3.\n- desfasada: Si es desfasada o no (True o False).\n\n#### Media movil ponderada\n\n```python\nserieConModelo = serie.mediaMovilPonderada(longitud, ponderaciones)\n```\n\n- ponderaciones: lista con alfas a ponderar ej: ```[alfa1, alfa2, alfa3]``` donde alfa1 > alfa2 > alfa3, etc.\n\n#### Suavización exponencial simple\n\n```python\nserieConModelo = serie.suavizacionExponencialSimple(alfa=0.5)\n```\n\n- alfa: parámetro alfa del modelo, por defecto es *0.5*.\n\n#### Media movil doble con tendencia\n\n```python\nserieConModelo = serie.mediaMovilDobleConTendencia(longitud=3)\n```\n\n- longitud: longitud de ambas medias moviles, por defecto es 3.\n\n#### Brown o suavizacion exponencial doble\n\n```python\nserieNaive = serie.brown(alfa=0.5, M1=None, M2=None)\n```\n\n- alfa: parámetro alfa del modelo, por defecto es 0.5.\n- M1: Valor inicial de Mat, por defecto es yt para t = 1.\n- M2: Valor inicial de Maat, por defecto es yt para t = 1.\n\n#### Holt\n\n```python\nserieConModelo = serie.holt(alfa=0.5, beta=0.5, M=None, T=0)\n```\n\n- alfa: parámetro alfa del modelo, por defecto es 0.5.\n- beta: parámetro beta del modelo, por defecto es 0.5.\n- M: Valor inicial de Mt, por defecto es yt para t = 1.\n- T: Valor inicial de Tt, por defecto es 0.\n\n#### Holt y Winters\n\n```python\nserieConModelo = serie.holtYWinters(metodo, alfa=0.5, beta=0.5, gamma=0.5, L=4)\n```\n\n- metodo: El metodo a utilizar \"aditivo\" para el metodo aditivo y \"multiplicativo\" para el metodo multiplicativo.\n- alfa: parámetro alfa del modelo, por defecto es 0.5.\n- beta: parámetro beta del modelo, por defecto es 0.5.\n- gamma: parámetro gamma del modelo, por defecto es 0.5.\n- L: Longitud de la estacionalidad, por defecto es 4.\n\n#### Descomposición\n\n```python\nserieConModelo = serie.descomposicion(metodo, L=12)\n```\n\n- metodo: El metodo a utilizar \"aditivo\" para el metodo aditivo y \"multiplicativo\" para el metodo multiplicativo.\n- L: Longitud de la estacionalidad, por defecto es 12.\n\n## Graficar series y modelos\n\nPara graficar cualquier tipo de objeto de serie (sea del tipo **Serie** o del tipo **Modelo**) se utiliza la función *graficar()*\n\n```python\nserie.graficar(titulo=\"\", xlabel=\"\", ylabel=\"\")\n```\n\n- titulo: Título del gráfico.\n- xlabel: Título del eje x.\n- ylabel: Título del eje y.\n\n### Diagramas de cajas\n\nSe puede realizar digramas de cajas a los objetos de tipo **Serie** a lo largo del tiempo agrupando por cilos mediante:\n\n```python\nserie.cajasEstacionalidad(L=4, comienzo=1, titulo=\"\", xlabel=\"\", ylabel=\"\", grilla=True)\n```\n\n- ciclo: Ciclos en que se agrupará los datos, por defecto es 4.\n- titulo: Título de la gráfica.\n- xlabel: Título del eje x.\n- ylabel: Título del eje y.\n- grilla: Grilla de gráfica (True o False), por defecto True.\n\nTambién se puede realizar diagramas de cajas sobre la estacionalidad mediante:\n\n```python\nserie.cajas(ciclo=4, comienzo=1, titulo=\"\", xlabel=\"\", ylabel=\"\", grilla=True)\n```\n\n- ciclo: Ciclos en que se agrupará los datos, por defecto es 4.\n- titulo: Título de la gráfica.\n- xlabel: Título del eje x.\n- ylabel: Título del eje y.\n- grilla: Grilla de gráfica (True o False), por defecto True.\n\n### Residuales\n\nTambién es posible graficar el residual de los objetos de los modelos mediante:\n\n```python\nserieConModelo.residual.graficar(titulo=\"\", xlabel=\"\", ylabel=\"\")\n```\n\n### Gráficas extras del modelo de descomposición\n\nLos modelos de descomposición tienen la peculiaridad de poseer las propiedades: tendencia y estacionalidad siendo estas también graficables mediante *graficar()*\n\n```python\nserieDescomposicion.tendencia.graficar(titulo=\"\", xlabel=\"\", ylabel=\"\")\nserieDescomposicion.estacionalidad.graficar(titulo=\"\", xlabel=\"\", ylabel=\"\")\n```\n\nEn caso se requiera realizar una gráfica de otro tipo, todos los objetos de la librería contienen un DataFrame de pandas en su propiedad data:\n\n```python\nserie.data\nserieConModelo.data\n```\n\n## Errores de los Modelos\n\nPara consultar los errores de la aplicación de un determinado modelo que se encuentre en un objeto de ejemplo *serieConModelo* basaría con consultar su propiedad \"errores\":\n\n```python\nserieConModelo.errores\n```\n\nPodemos extraer el valor específico de algún error consultando las propiedades:\n\n```python\nserieConModelo.errores.mse\nserieConModelo.errores.rmse\nserieConModelo.errores.u_theil\n```\n\n## Pronósticos\n\nPara realizar un pronóstico se deberá llamar a la función *pronosticar()* y esta devolverá una copia del objeto del modelo pero con el pronóstico pedido agregado.\n\n```python\nserieConPronostico = serieConModelo.pronosticar(self, p=1, t=None)\n```\n\n- p: cantidad de periodos a pronosticar, por defecto es 1.\n- t: valor de t desde donde comenzará el pronóstico, por defecto comienza luego del último dato.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pabloatarama.com/SeriesDeTiempo/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "series-de-tiempo-pabloatarama",
    "package_url": "https://pypi.org/project/series-de-tiempo-pabloatarama/",
    "platform": "",
    "project_url": "https://pypi.org/project/series-de-tiempo-pabloatarama/",
    "project_urls": {
      "Homepage": "https://pabloatarama.com/SeriesDeTiempo/"
    },
    "release_url": "https://pypi.org/project/series-de-tiempo-pabloatarama/2021.12.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Modelos para el análisis de series de tiempo y proyecciones.",
    "version": "2021.12.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12207228,
  "releases": {
    "2021.12.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12495cdd48d45cc0f241993dbbba28b396439603a69ef319d124eeb937ef7fec",
          "md5": "f3ef6aa2bf52c4842acf18aa09da9344",
          "sha256": "541133741c603c604a68727f89696aa3ae32c6e8b61477b95a5c268e89c7a5b2"
        },
        "downloads": -1,
        "filename": "series_de_tiempo_pabloatarama-2021.12.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3ef6aa2bf52c4842acf18aa09da9344",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16375,
        "upload_time": "2021-12-02T06:45:36",
        "upload_time_iso_8601": "2021-12-02T06:45:36.251937Z",
        "url": "https://files.pythonhosted.org/packages/12/49/5cdd48d45cc0f241993dbbba28b396439603a69ef319d124eeb937ef7fec/series_de_tiempo_pabloatarama-2021.12.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "879ee1f79eae7bf2b6bf9b59ee98a9c47b04ca9b500cb352071fc1c540b2c6a6",
          "md5": "7da9d8ad5586f97b2d5b4259e1ef3ede",
          "sha256": "ed3d21177e75f0b30ab3167da5f7444747c80eac93e13665d44ce7e1e3491f6b"
        },
        "downloads": -1,
        "filename": "series-de-tiempo-pabloatarama-2021.12.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7da9d8ad5586f97b2d5b4259e1ef3ede",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11522,
        "upload_time": "2021-12-02T06:45:37",
        "upload_time_iso_8601": "2021-12-02T06:45:37.592827Z",
        "url": "https://files.pythonhosted.org/packages/87/9e/e1f79eae7bf2b6bf9b59ee98a9c47b04ca9b500cb352071fc1c540b2c6a6/series-de-tiempo-pabloatarama-2021.12.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12495cdd48d45cc0f241993dbbba28b396439603a69ef319d124eeb937ef7fec",
        "md5": "f3ef6aa2bf52c4842acf18aa09da9344",
        "sha256": "541133741c603c604a68727f89696aa3ae32c6e8b61477b95a5c268e89c7a5b2"
      },
      "downloads": -1,
      "filename": "series_de_tiempo_pabloatarama-2021.12.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f3ef6aa2bf52c4842acf18aa09da9344",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16375,
      "upload_time": "2021-12-02T06:45:36",
      "upload_time_iso_8601": "2021-12-02T06:45:36.251937Z",
      "url": "https://files.pythonhosted.org/packages/12/49/5cdd48d45cc0f241993dbbba28b396439603a69ef319d124eeb937ef7fec/series_de_tiempo_pabloatarama-2021.12.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "879ee1f79eae7bf2b6bf9b59ee98a9c47b04ca9b500cb352071fc1c540b2c6a6",
        "md5": "7da9d8ad5586f97b2d5b4259e1ef3ede",
        "sha256": "ed3d21177e75f0b30ab3167da5f7444747c80eac93e13665d44ce7e1e3491f6b"
      },
      "downloads": -1,
      "filename": "series-de-tiempo-pabloatarama-2021.12.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7da9d8ad5586f97b2d5b4259e1ef3ede",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11522,
      "upload_time": "2021-12-02T06:45:37",
      "upload_time_iso_8601": "2021-12-02T06:45:37.592827Z",
      "url": "https://files.pythonhosted.org/packages/87/9e/e1f79eae7bf2b6bf9b59ee98a9c47b04ca9b500cb352071fc1c540b2c6a6/series-de-tiempo-pabloatarama-2021.12.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}