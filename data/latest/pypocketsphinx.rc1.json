{
  "info": {
    "author": "Dmitry Prazdnichnov",
    "author_email": "dmitry@prazdnichnov.name",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Multimedia :: Sound/Audio :: Speech",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# PyPocketsphinx\n\nPyPocketsphinx is a fork of [Pocketsphinx Python](https://github.com/bambocher/pocketsphinx-python) with the following changes:\n\n* Fixes OSX installation issue described in [issue #28](https://github.com/bambocher/pocketsphinx-python/issues/28) using fix from [pull request #44](https://github.com/bambocher/pocketsphinx-python/pull/44)\n\n## Installation\n\n```shell\n# Make sure we have up-to-date versions of pip, setuptools and wheel\npython -m pip install --upgrade pip setuptools wheel\npip install --upgrade pypocketsphinx\n```\n\n## Usage\n\n### LiveSpeech\n\nIt's an iterator class for continuous recognition or keyword search from a microphone.\n\n```python\nfrom pypocketsphinx import LiveSpeech\nfor phrase in LiveSpeech(): print(phrase)\n```\n\nAn example of a keyword search:\n\n```python\nfrom pypocketsphinx import LiveSpeech\n\nspeech = LiveSpeech(lm=False, keyphrase='forward', kws_threshold=1e-20)\nfor phrase in speech:\n    print(phrase.segments(detailed=True))\n```\n\nWith your model and dictionary:\n\n```python\nimport os\nfrom pypocketsphinx import LiveSpeech, get_model_path\n\nmodel_path = get_model_path()\n\nspeech = LiveSpeech(\n    verbose=False,\n    sampling_rate=16000,\n    buffer_size=2048,\n    no_search=False,\n    full_utt=False,\n    hmm=os.path.join(model_path, 'en-us'),\n    lm=os.path.join(model_path, 'en-us.lm.bin'),\n    dic=os.path.join(model_path, 'cmudict-en-us.dict')\n)\n\nfor phrase in speech:\n    print(phrase)\n```\n\n### AudioFile\n\nIt's an iterator class for continuous recognition or keyword search from a file.\n\n```python\nfrom pypocketsphinx import AudioFile\nfor phrase in AudioFile(): print(phrase) # => \"go forward ten meters\"\n```\n\nAn example of a keyword search:\n\n```python\nfrom pypocketsphinx import AudioFile\n\naudio = AudioFile(lm=False, keyphrase='forward', kws_threshold=1e-20)\nfor phrase in audio:\n    print(phrase.segments(detailed=True)) # => \"[('forward', -617, 63, 121)]\"\n```\n\nWith your model and dictionary:\n\n```python\nimport os\nfrom pypocketsphinx import AudioFile, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\nconfig = {\n    'verbose': False,\n    'audio_file': os.path.join(data_path, 'goforward.raw'),\n    'buffer_size': 2048,\n    'no_search': False,\n    'full_utt': False,\n    'hmm': os.path.join(model_path, 'en-us'),\n    'lm': os.path.join(model_path, 'en-us.lm.bin'),\n    'dict': os.path.join(model_path, 'cmudict-en-us.dict')\n}\n\naudio = AudioFile(**config)\nfor phrase in audio:\n    print(phrase)\n```\n\nConvert frame into time coordinates:\n\n```python\nfrom pypocketsphinx import AudioFile\n\n# Frames per Second\nfps = 100\n\nfor phrase in AudioFile(frate=fps):  # frate (default=100)\n    print('-' * 28)\n    print('| %5s |  %3s  |   %4s   |' % ('start', 'end', 'word'))\n    print('-' * 28)\n    for s in phrase.seg():\n        print('| %4ss | %4ss | %8s |' % (s.start_frame / fps, s.end_frame / fps, s.word))\n    print('-' * 28)\n\n# ----------------------------\n# | start |  end  |   word   |\n# ----------------------------\n# |  0.0s | 0.24s | <s>      |\n# | 0.25s | 0.45s | <sil>    |\n# | 0.46s | 0.63s | go       |\n# | 0.64s | 1.16s | forward  |\n# | 1.17s | 1.52s | ten      |\n# | 1.53s | 2.11s | meters   |\n# | 2.12s |  2.6s | </s>     |\n# ----------------------------\n```\n\n### Pocketsphinx\n\nIt's a simple and flexible proxy class to `pocketsphinx.Decode`.\n\n```python\nfrom pypocketsphinx import Pocketsphinx\nprint(Pocketsphinx().decode()) # => \"go forward ten meters\"\n```\n\nA more comprehensive example:\n\n```python\nfrom __future__ import print_function\nimport os\nfrom pypocketsphinx import Pocketsphinx, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\nconfig = {\n    'hmm': os.path.join(model_path, 'en-us'),\n    'lm': os.path.join(model_path, 'en-us.lm.bin'),\n    'dict': os.path.join(model_path, 'cmudict-en-us.dict')\n}\n\nps = Pocketsphinx(**config)\nps.decode(\n    audio_file=os.path.join(data_path, 'goforward.raw'),\n    buffer_size=2048,\n    no_search=False,\n    full_utt=False\n)\n\nprint(ps.segments()) # => ['<s>', '<sil>', 'go', 'forward', 'ten', 'meters', '</s>']\nprint('Detailed segments:', *ps.segments(detailed=True), sep='\\n') # => [\n#     word, prob, start_frame, end_frame\n#     ('<s>', 0, 0, 24)\n#     ('<sil>', -3778, 25, 45)\n#     ('go', -27, 46, 63)\n#     ('forward', -38, 64, 116)\n#     ('ten', -14105, 117, 152)\n#     ('meters', -2152, 153, 211)\n#     ('</s>', 0, 212, 260)\n# ]\n\nprint(ps.hypothesis())  # => go forward ten meters\nprint(ps.probability()) # => -32079\nprint(ps.score())       # => -7066\nprint(ps.confidence())  # => 0.04042641466841839\n\nprint(*ps.best(count=10), sep='\\n') # => [\n#     ('go forward ten meters', -28034)\n#     ('go for word ten meters', -28570)\n#     ('go forward and majors', -28670)\n#     ('go forward and meters', -28681)\n#     ('go forward and readers', -28685)\n#     ('go forward ten readers', -28688)\n#     ('go forward ten leaders', -28695)\n#     ('go forward can meters', -28695)\n#     ('go forward and leaders', -28706)\n#     ('go for work ten meters', -28722)\n# ]\n```\n\n### Default config\n\nIf you don't pass any argument while creating an instance of the Pocketsphinx, AudioFile or LiveSpeech class, it will use next default values:\n\n```python\nverbose = False\nlogfn = /dev/null or nul\naudio_file = site-packages/pocketsphinx/data/goforward.raw\naudio_device = None\nsampling_rate = 16000\nbuffer_size = 2048\nno_search = False\nfull_utt = False\nhmm = site-packages/pocketsphinx/model/en-us\nlm = site-packages/pocketsphinx/model/en-us.lm.bin\ndict = site-packages/pocketsphinx/model/cmudict-en-us.dict\n```\n\nAny other option must be passed into the config as is, without using symbol `-`.\n\nIf you want to disable default language model or dictionary, you can change the value of the corresponding options to False:\n\n```python\nlm = False\ndict = False\n```\n\n### Verbose\n\nSend output to stdout:\n\n```python\nfrom pypocketsphinx import Pocketsphinx\n\nps = Pocketsphinx(verbose=True)\nps.decode()\n\nprint(ps.hypothesis())\n```\n\nSend output to file:\n\n```python\nfrom pypocketsphinx import Pocketsphinx\n\nps = Pocketsphinx(verbose=True, logfn='pypocketsphinx.log')\nps.decode()\n\nprint(ps.hypothesis())\n```\n\n### Compatibility\n\nParent classes are still available:\n\n```python\nimport os\nfrom pypocketsphinx import DefaultConfig, Decoder, get_model_path, get_data_path\n\nmodel_path = get_model_path()\ndata_path = get_data_path()\n\n# Create a decoder with a certain model\nconfig = DefaultConfig()\nconfig.set_string('-hmm', os.path.join(model_path, 'en-us'))\nconfig.set_string('-lm', os.path.join(model_path, 'en-us.lm.bin'))\nconfig.set_string('-dict', os.path.join(model_path, 'cmudict-en-us.dict'))\ndecoder = Decoder(config)\n\n# Decode streaming data\nbuf = bytearray(1024)\nwith open(os.path.join(data_path, 'goforward.raw'), 'rb') as f:\n    decoder.start_utt()\n    while f.readinto(buf):\n        decoder.process_raw(buf, False, False)\n    decoder.end_utt()\nprint('Best hypothesis segments:', [seg.word for seg in decoder.seg()])\n```\n\n### Install requirements\n\nWindows requirements:\n\n* [Python](https://www.python.org/downloads)\n* [Git](http://git-scm.com/downloads)\n* [Swig](http://www.swig.org/download.html)\n* [Visual Studio Community](https://www.visualstudio.com/ru-ru/downloads/download-visual-studio-vs.aspx)\n\nUbuntu requirements:\n\n```shell\nsudo apt-get install -qq python python-dev python-pip build-essential swig git libpulse-dev libasound2-dev\n```\n\nMac OS X requirements:\n\n```shell\nbrew reinstall swig python\n```\n\n## License\n\n[The BSD License](https://github.com/bambocher/pocketsphinx-python/blob/master/LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/oyeun/pocketsphinx-python/archive/v0.1.20.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oyeun/pocketsphinx-python",
    "keywords": "sphinxbase pocketsphinx",
    "license": "BSD",
    "maintainer": "Dmitry Prazdnichnov",
    "maintainer_email": "dmitry@prazdnichnov.name",
    "name": "PyPocketsphinx",
    "package_url": "https://pypi.org/project/PyPocketsphinx/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyPocketsphinx/",
    "project_urls": {
      "Download": "https://github.com/oyeun/pocketsphinx-python/archive/v0.1.20.tar.gz",
      "Homepage": "https://github.com/oyeun/pocketsphinx-python"
    },
    "release_url": "https://pypi.org/project/PyPocketsphinx/0.1.20/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python interface to CMU Sphinxbase and Pocketsphinx libraries. Forked from pocketsphinx 0.1.15.",
    "version": "0.1.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8010533,
  "releases": {
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d8a1c883a3f8ec5438a9341160156fde8d40b7220aaffd387db33438cdeabe4",
          "md5": "c35fec2e355c98a5c4c965e7cd3ab36b",
          "sha256": "d38d7f26ddcc2d70c4e7d2bd85dfaa7a8cb1fe9b06fa20e39ecf39397e5d1307"
        },
        "downloads": -1,
        "filename": "PyPocketsphinx-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "c35fec2e355c98a5c4c965e7cd3ab36b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29082333,
        "upload_time": "2020-08-21T07:23:28",
        "upload_time_iso_8601": "2020-08-21T07:23:28.239030Z",
        "url": "https://files.pythonhosted.org/packages/0d/8a/1c883a3f8ec5438a9341160156fde8d40b7220aaffd387db33438cdeabe4/PyPocketsphinx-0.1.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d8a1c883a3f8ec5438a9341160156fde8d40b7220aaffd387db33438cdeabe4",
        "md5": "c35fec2e355c98a5c4c965e7cd3ab36b",
        "sha256": "d38d7f26ddcc2d70c4e7d2bd85dfaa7a8cb1fe9b06fa20e39ecf39397e5d1307"
      },
      "downloads": -1,
      "filename": "PyPocketsphinx-0.1.20.tar.gz",
      "has_sig": false,
      "md5_digest": "c35fec2e355c98a5c4c965e7cd3ab36b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29082333,
      "upload_time": "2020-08-21T07:23:28",
      "upload_time_iso_8601": "2020-08-21T07:23:28.239030Z",
      "url": "https://files.pythonhosted.org/packages/0d/8a/1c883a3f8ec5438a9341160156fde8d40b7220aaffd387db33438cdeabe4/PyPocketsphinx-0.1.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}