{
  "info": {
    "author": "Levi van Es",
    "author_email": "<levi2234@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\r\n# GaiaClusterFit\r\n\r\n\r\n\r\nGaiaClusterFit is a Python library for optuimizing GAIA clustering\r\n\r\n\r\n\r\n## Installation\r\n\r\n\r\n\r\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install GaiaClusterFit.\r\n\r\n\r\n\r\n```bash\r\n\r\npip install GaiaClusterFit\r\n\r\n```\r\n\r\n\r\n\r\n## Basic Usage\r\n\r\n\r\n\r\nImport library\r\n\r\n```python\r\n\r\nfrom  GaiaClusterFit import GCA\r\n\r\nfrom  GaiaClusterFit import evalmetric\r\n\r\n```\r\n\r\nSpecify Gaia query\r\n\r\n```python\r\n\r\n#GAIA database query\r\n\r\nquery =\"\"\"SELECT TOP 1000  source_id, b, l, parallax,phot_g_mean_mag,pmra,pmdec, RUWE, bp_rp,phot_g_mean_mag+5*log10(parallax)-10 as mg\r\n\r\nFROM gaiadr3.gaia_source\r\n\r\nWHERE l < 275 AND l > 240 \r\n\r\nAND b < 5 AND b > -15\r\n\r\nAND phot_g_mean_mag < 18\r\n\r\nAND RUWE < 1.4\r\n\r\nAND parallax < 4 AND parallax > 1.8\r\n\r\nAND parallax_error/parallax < 0.02\"\"\" \r\n\r\n\r\n\r\n````\r\n\r\nCreate an instance and import data\r\n\r\n```python\r\n\r\n#Create instance\r\n\r\njob = GCA.GCAinstance(RegionName = \"Char\")\r\n\r\n\r\n\r\n#Login and fetch GAIA Data\r\n\r\njob.GaiaLogin(username='username', password='password')\r\n\r\njob.FetchQueryAsync(query)\r\n\r\n\r\n\r\n#Import known cluster\r\n\r\njob.ImportRegion(\"G:/path/known_cluster.fits\")\r\n\r\n\r\n\r\n```\r\n\r\nSetting up basic cluster fit function to clustered GAIA data to known clusters\r\n\r\n\r\n\r\n```python\r\n\r\n#Parameters to optimize Cluster function over (HDBscan by default)\r\n\r\nparameters = [{\"variable\": \"min_cluster_size\", \"min\":10, \"max\":100}]\r\n\r\n\r\n\r\n```\r\n\r\nRenaming cluster table columns to match GAIA column names\r\n\r\n```python\r\n\r\njob.RenameCol(job.regiondata, [[\"Source\", \"source_id\"],[\"Pop\", \"population\"]])\r\n\r\n\r\n\r\n```\r\n\r\nOptimizing cluster function(HDBscan) over GAIA data to match known clusters\r\n\r\n```python\r\n\r\noptimal = job.optimize_grid(fit_params=parameters, evalmetric.homogeneityscore)\r\n\r\n```\r\n\r\nScoring function returns a score for the fit based by default on homogeneity self-made score functions can be passed and recieve an astropy gaia table and an astropy region table. optimize_grid returns parameters for the highest score\r\n\r\n\r\n\r\n## Code Discriptions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### GCA.GCAinstance\r\n\r\n```python\r\n\r\nGCAinstance(data =None, regiondata =None, RegionName = \"No region Name\")\r\n\r\n```\r\n\r\nCreates an instance object class used for clusteringa and cluster match scoreing later on.\r\n\r\n`(data =None, regiondata =None, RegionName = \"No region Name\")`  are optional. \r\n\r\nLater `instance.Datatable` and `instance.Regiondata` can be populated by querying the GAIA database (`GCAinstance.GaiaLogin`  and `GCAinstance.FetchQueryAsync`) or by uploading a Gaia FITs table through `instance.ImportDataTable` and `instance.ImportRegion` \r\n\r\n\r\n\r\n* `data` : an astropy.table table containing star data \r\n\r\n* `regiondata`: an astropy.table table containing known cluster data\r\n\r\n\r\n\r\n### GCAinstance.ImportDataTable()\r\n\r\n```python\r\n\r\ndef ImportDataTable(self,path): #import a fits datatable comming from Gaia or whatever\r\n\r\n  self.datatable =Table(fits.open(path)[1].data)\r\n\r\n``` \r\n\r\nImports a GAIA table from the .fits format and stores it to self.datatable\r\n\r\n\r\n\r\n* `path`: a string specifying the path to the .fits table file containing star data \r\n\r\n\r\n\r\n### GCAinstance.ExportDataTable()\r\n\r\n```python\r\n\r\ndef ExportDataTable(self, path, **kwargs): #export the self.datatable to any format(for importing measures i would recommend .fits)\r\n\r\n     self.datatable.write(f'{path}',**kwargs)\r\n\r\n``` \r\n\r\nExports self.datatable to a .fits file at a specified path. Kwargs translate over from `astropy.io.ascii.write(**kwargs)` function \r\n\r\n* `path`: a string specifying the path where the .fits table file containing star data will be stored\r\n\r\n\r\n\r\n\r\n\r\n### GCAinstance.ImportRegion()\r\n\r\n```python\r\n\r\ndef ImportDataTable(self,path): #import a fits datatable comming from Gaia or whatever\r\n\r\n  self.regiondata =Table(fits.open(path)[1].data)\r\n\r\n``` \r\n\r\nImports a GAIA table from the .fits format and stores it to self.regiondata\r\n\r\n\r\n\r\n* `path`: a string specifying the path to the .fits table file containing cluster region data \r\n\r\n\r\n\r\n### GCAinstance.ExportRegion()\r\n\r\n```python\r\n\r\ndef ExportDataTable(self, path, **kwargs): #export the self.datatable to any format(for importing measures i would recommend .fits)\r\n\r\n     self.regiondata.write(f'{path}',**kwargs)\r\n\r\n``` \r\n\r\nExports self.regiondata to a .fits file at a specified path. Kwargs translate over from `astropy.io.ascii.write(**kwargs)` function \r\n\r\n* `path`: a string specifying the path where the .fits table file containing cluster region data will be stored\r\n\r\n\r\n\r\n### GCAinstance.GaiaLogin()\r\n\r\n\r\n\r\n```python\r\n\r\ndef GaiaLogin(self, username, password):\r\n\r\n  Gaia.login(user=str(username), password=str(password))\r\n\r\n```\r\n\r\nThe `GCAinstance.GaiaLogin()` initiates a GAIA database session based on personal credentials (`username=\"username\", password=\"password\"`). This allows for asynchronous data queries (`GCAinstance.FetchQueryAsync()`) from the GAIA database. This session is constrained within the instance allowing multiple instances to initiate different sessions.\r\n\r\n\r\n\r\n* `username`: a string specifying your GAIA username credential\r\n\r\n* `password`: a string specifying your GAIA password credential\r\n\r\n### GCAinstance.FetchQueryAsync()\r\n\r\n\r\n\r\n```python\r\n\r\ndef FetchQueryAsync(self, query, **kwargs):\r\n\r\n  job = Gaia.launch_job_async(query, **kwargs)\r\n\r\n  self.datatable = job.get_results()\r\n\r\n```\r\n\r\n\r\n\r\nThe `CAinstance.FetchQueryAsync(query, **kwargs)` function accepts a ADQL formatted query to fetch GAIA data. It writes this data to `GCAinstance.datatable` .\r\n\r\n* `query`: a string containing the to be queried ADQL query\r\n\r\n* `kwargs`: all keword arguments that the `Astroquery.Gaia.launch_job_async also accepts`\r\n\r\n\r\n\r\n### GCAinstance.Renamecol()\r\n\r\n\r\n\r\n```python\r\n\r\ndef RenameCol(self, table, newnames):\r\n\r\n    for i in newnames:\r\n\r\n      table.rename_column(i[0],i[1])\r\n\r\n``` \r\n\r\nThe Renamecol function converts the columnnames of an `astropy.table` object to a set of new names. Within GaiaClusterFit we require that the columns of the regions and GAIA data match column names. Therefore it is standard practice to convert the GCAinstance.regiondata columns to match that of the GAIA columns. I.E `GCAinstance.RenameCol(GCAinstance.regiondata, [[\"Source\",\"Source_id\"],[\"Pop\",population]])`. The default columnname for labeled clusterdata in GCAinstance.datatable is `\"population\"` \r\n\r\n\r\n\r\n* `table`: astropy.table table object \r\n\r\n* `newnames`: 2D python list as such [[\"old column name 1\",\"new column name 1\"],[\"old column name 2\",\"new column name 2\"]]\r\n\r\n\r\n\r\n### GCAinstance.Plot()\r\n\r\n\r\n\r\n```python\r\n\r\ndef Plot(self, xaxis = \"b\", yaxis = \"l\", **kwargs):\r\n\r\n    plt.title(f\"{self.regionname}\")\r\n\r\n    plt.scatter(self.datatable[xaxis],self.datatable[yaxis], **kwargs)\r\n\r\n    plt.ylabel(yaxis)\r\n\r\n    plt.xlabel(xaxis)\r\n\r\n    plt.xlim(max(self.datatable[xaxis]),min(self.datatable[yaxis]))\r\n\r\n    plt.show()\r\n\r\n``` \r\n\r\n`GCAinstance.Plot()` plots GCAinstance.datatable using matplotlib.pyplot. `x` and `y` dimensions of the plot can be controlled using `xaxis = \"GAIA parameter\" , yaxis = \"GAIA parameter\"'` where the GAIA parameter can be the string name of any column in GCAinstance.datatable. `**kwargs` takes any keywordargument `matplotlib.pyplot` accepts.\r\n\r\n\r\n\r\n* `xaxis`: column name of column in `GCAinstance.datatable` to display on the x-axis\r\n\r\n* `yaxis`: column name of column in `GCAinstance.datatable` to display on the y-axis\r\n\r\n* `kwargs`: general keyword arguments accepted by matplotlib.pyplot.plot()\r\n\r\n\r\n\r\n\r\n\r\n### GCAinstance.PlotCluster()\r\n\r\n```python\r\n\r\n  def PlotCluster(self, xaxis=\"b\", yaxis =\"l\", clusterer=\"HDBSCAN\", remove_outliers =False , **kwargs): #modified plot function with outlier filtration and Cluster selection\r\n\r\n    try:\r\n\r\n      fig, ax = plt.subplots(figsize=(10,10))\r\n\r\n\r\n\r\n      plotdata = (self.datatable[xaxis], self.datatable[yaxis])\r\n\r\n      labels = self.datatable[clusterer]\r\n\r\n\r\n\r\n      if remove_outliers == True : \r\n\r\n        plotdata = self.datatable[xaxis][self.datatable[f\"{remove_outliers}_outlier\"]],self.datatable[yaxis][self.datatable[f\"{remove_outliers}_outlier\"]]\r\n\r\n        labels = self.datatable[clusterer][self.datatable[f\"{remove_outliers}_outlier\"]]\r\n\r\n      ax.set_title(f\"{clusterer} clusters in \\n {self.regionname} \\n Outliers removed = {remove_outliers} \")\r\n\r\n      ax.scatter(*plotdata, c=labels, **kwargs)\r\n\r\n      ax.set_ylabel(yaxis)\r\n\r\n      ax.set_xlabel(xaxis)\r\n\r\n      plt.show()\r\n\r\n      return fig,ax\r\n\r\n    except:\r\n\r\n      if clusterer not in self.datatable.columns:\r\n\r\n        print(f\"Error: You did not perform the{clusterer} clustering yet. No {clusterer} column found in self.Datatable\")\r\n\r\n      return fig,ax\r\n\r\n```\r\n\r\nThe `GCAinstance.PlotCluster()`function plots the clusterdata alongside the `GCAinstance.datatable`  data. This requires GCAinstance.datatable` to be clustered before by GCAinstance.cluster()` function. The `GCAinstance.Plotcluster()` plots clusterlabels alongside GCAinstance.datatable using matplotlib.pyplot. `x` and `y` dimensions of the plot can be controlled using `xaxis = \"GAIA parameter\" , yaxis = \"GAIA parameter\"` where the GAIA parameter can be the string name of any column in GCAinstance.datatable. `**kwargs` takes any keywordargument `matplotlib.pyplot` accepts. \r\n\r\n\r\n\r\n* `xaxis`: column name of column in `GCAinstance.datatable` to display on the x-axis\r\n\r\n* `yaxis`: column name of column in `GCAinstance.datatable` to display on the y-axis\r\n\r\n* `clusterer`: cluster function name of which to display latest formed clusters\r\n\r\n\r\n\r\n### GCAinstance.cluster()\r\n\r\n```python\r\n\r\n  def cluster(self, clusterer = HDBSCAN, dimensions = [\"b\",\"l\",\"parallax\",\"pmdec\",\"pmra\"],**kwargs):\r\n\r\n        print(f\"Running {clusterer.__class__.__name__} on {self.regionname} over {dimensions}\\n\")\r\n\r\n        dataselection = [self.datatable[param] for param in dimensions] #N dimensional HDBscan\r\n\r\n        data =StandardScaler().fit_transform(np.array(dataselection).T)\r\n\r\n        clusterer = clusterer(**kwargs)\r\n\r\n        clusterer.fit(data)\r\n\r\n        clusterer.fit_predict(data) #in case of artificial of unknown stars we can use fit_predict to predict the cluster they would belong to\r\n\r\n        labels = clusterer.labels_ #list of all stars in which a number encodes to what cluster it is assigned\r\n\r\n        self.datatable[f\"{clusterer.__class__.__name__}\"] = labels #append all labels to the designated \"clustername \"self.datatable table\r\n\r\n        self.clusterer = clusterer  \r\n\r\n        return clusterer \r\n\r\n``` \r\n\r\nThe `cluster(self, clusterer = HDBSCAN, dimensions = [\"b\",\"l\",\"parallax\",\"pmdec\",\"pmra\"],**kwargs)` clusters the `GCAinstance.datatable` data based on a specified cluster algorithm. The funnction returns the clusterer instance. Resulting Cluster labels are written to `GCAinstance.datatable[\"cluster algorithm name\"]`\r\n\r\n\r\n\r\n* `dimensions = [\"GCAinstance.datatable column names\"]`  determines which columns of GCA.datatable are used to cluster the data over\r\n\r\n* `clusterer = cluster_algorithm` passes a clustering function that is used to cluster the data. By default this cluster function should only accept the to-be-clustered-data. i.e `clusterer = GCA.HDBSCAN` , `clusterer ='GCA.OPTICS', `clusterer = sklearn.cluster.DBSCAN`etc\r\n\r\n* `**kwargs` accepts keywords arguments that are passed on to the cluster algorithms(HDBSCAN,DBSCAN etc)\r\n\r\n\r\n\r\n\r\n\r\n### GCAinstance.optimize_grid()\r\n\r\n\r\n\r\n```python\r\n\r\ndef optimize_grid(self, dimensions= [\"b\",\"l\",\"parallax\",\"pmdec\",\"pmra\"], clusterer=HDBSCAN, fit_params=None, scoring_function=scoringfunction, **kwargs):     \r\n\r\n      dataselection = [self.datatable[param] for param in dimensions] #N dimensional HDBscan\r\n\r\n        \r\n\r\n      data = StandardScaler().fit_transform(np.array(dataselection).T)\r\n\r\n      scores= []\r\n\r\n      param_values = []\r\n\r\n      point_variable_names = [i[\"variable\"]for i in fit_params]\r\n\r\n      point_variable_list = [list(range(i[\"min\"], i[\"max\"])) for i in fit_params]\r\n\r\n      combination = [p for p in itertools.product(*point_variable_list)]\r\n\r\n      combination = [dict(zip(point_variable_names, i)) for i in combination]\r\n\r\n      for i in tqdm(combination):\r\n\r\n        cluster = clusterer(**i, **kwargs)\r\n\r\n        cluster.fit(data)\r\n\r\n        cluster.fit_predict(data) #in case of artificial of unknown stars we can use fit_predict to predict the cluster they would belong to\r\n\r\n        labels = cluster.labels_\r\n\r\n        self.datatable[\"population\"] = labels\r\n\r\n        scores.append(scoring_function(self.datatable, self.regiondata))\r\n\r\n        param_values.append(i)\r\n\r\n      max_score_index, max_score = np.argmax(scores) , np.max(scores)\r\n\r\n      return param_values[max_score_index]\r\n\r\n```\r\n\r\n`GCAinstance.optimize_grid(self, dimensions= [\"b\",\"l\",\"parallax\",\"pmdec\",\"pmra\"], clusterer=HDBSCAN, fit_params=None, scoring_function=scoringfunction, **kwargs)'  fits cluster function `clusterer` based on a given set of parameter intervals `fit_params` to optimize a `scoring_unction`. This scoring function compares the predicted clusters to the true clusters. The highest score results in the best fit (according to the scoring_function).\r\n\r\n\r\n\r\nThe function returns a list of dictionaries with the optimized parameter values\r\n\r\n\r\n\r\n* `dimensions` : the dimensions/datacolumns of GCAinstance.datatable we will cluster over\r\n\r\n* `clusterer` : a clustering function that is used to cluster the data. By default this cluster function should only accept the to-be-clustered-data. i.e `clusterer = GCA.HDBSCAN` , `clusterer ='GCA.OPTICS', `clusterer = sklearn.cluster.DBSCAN`etc\r\n\r\n* `fit_params`: Is a python-list containing dicts formatted as follows `[{\"variable\" :\"cluster argument\", \"min\":10, \"max\":20},{\"variable\" :\"cluster argument\", \"min\":5, \"max\":40}]`\r\n\r\n*  `scoring_function`scoring function accepts a different function that takes `GCAinstance.datatable and GCAinstance.regiondata` A set of properly out of the box formatted scoring functions is included in `GaiaClusterFit.evalmetric`. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Contributing\r\n\r\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\r\n\r\n\r\n\r\nPlease make sure to update tests as appropriate.\r\n\r\n\r\n\r\n## License\r\n\r\n[MIT](https://choosealicense.com/licenses/mit/)\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GaiaClusterFit",
    "package_url": "https://pypi.org/project/GaiaClusterFit/",
    "platform": null,
    "project_url": "https://pypi.org/project/GaiaClusterFit/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/GaiaClusterFit/0.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Matching gaia clustered stars to known clusters",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15866237,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3843206714ea7be1f51852524b5dea4d77a2cd32ed349925f296dc0b328423b",
          "md5": "1d1593f4ef068629f89d06cc4f2187ab",
          "sha256": "33f4f306fbeb36a52355bc458429aff55b6401e6d97d3ae53a3c82c5df79f9a3"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d1593f4ef068629f89d06cc4f2187ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4076,
        "upload_time": "2022-10-26T19:12:00",
        "upload_time_iso_8601": "2022-10-26T19:12:00.268026Z",
        "url": "https://files.pythonhosted.org/packages/f3/84/3206714ea7be1f51852524b5dea4d77a2cd32ed349925f296dc0b328423b/GaiaClusterFit-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "180469f16a4ee82a7328ab3bc9b6c086be550c01bcedbb004b865ce68e248d6b",
          "md5": "b9ecb6d57fa086b170f16ecbda371104",
          "sha256": "0fb2a1c91d402b3f006bc2dad5b9377d35fe6735e06209c6f152f0b5dca5375d"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ecb6d57fa086b170f16ecbda371104",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4821,
        "upload_time": "2022-10-26T19:12:02",
        "upload_time_iso_8601": "2022-10-26T19:12:02.095121Z",
        "url": "https://files.pythonhosted.org/packages/18/04/69f16a4ee82a7328ab3bc9b6c086be550c01bcedbb004b865ce68e248d6b/GaiaClusterFit-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d2a7872edee31ffec6bc730a11f4098fd1fd95d3c8c655e5ed96393281181f0",
          "md5": "cb5013c15a927bacc0abd4bbd1ea7ca6",
          "sha256": "a7de2f21f3a55db0f28792a0b980d428293ed35546e4554995b72104eb05cc28"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb5013c15a927bacc0abd4bbd1ea7ca6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5749,
        "upload_time": "2022-11-01T12:06:38",
        "upload_time_iso_8601": "2022-11-01T12:06:38.586217Z",
        "url": "https://files.pythonhosted.org/packages/5d/2a/7872edee31ffec6bc730a11f4098fd1fd95d3c8c655e5ed96393281181f0/GaiaClusterFit-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52dafb3d1a985910a1566e3f302d860f3cf1e77abb86b97746c2f87d67604a06",
          "md5": "6c8480bab48ba4b5e1c39503c30ad74a",
          "sha256": "888df0c9970554d714e77fa0a8d7ee00b2a8bbf3aa8d167263b5f61555e4b32c"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6c8480bab48ba4b5e1c39503c30ad74a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6061,
        "upload_time": "2022-11-01T12:06:41",
        "upload_time_iso_8601": "2022-11-01T12:06:41.036482Z",
        "url": "https://files.pythonhosted.org/packages/52/da/fb3d1a985910a1566e3f302d860f3cf1e77abb86b97746c2f87d67604a06/GaiaClusterFit-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b9fdefe0c72e635d3f28b7e65ba1202f392ac0eaf1d84936fa80aa93c096f2",
          "md5": "2f3b14343a1197cb9f0eb2ee3f8a11b6",
          "sha256": "354a069fcb5549f5fda1c1e2870954a673020b4c49894118b0e05d8eb602f004"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f3b14343a1197cb9f0eb2ee3f8a11b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9050,
        "upload_time": "2022-11-04T12:09:18",
        "upload_time_iso_8601": "2022-11-04T12:09:18.514274Z",
        "url": "https://files.pythonhosted.org/packages/61/b9/fdefe0c72e635d3f28b7e65ba1202f392ac0eaf1d84936fa80aa93c096f2/GaiaClusterFit-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aac77a8369ed19dd974aa8e241b6814c72a607e9a6c519ee46e0bc379a1934c",
          "md5": "8e0fef1abe47e171eb15b783e5e70a6c",
          "sha256": "c2d4f5fbdaf4f09311a45737e1b09b4a1e39f745ca46dac4d8fbb5ebdb30642e"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8e0fef1abe47e171eb15b783e5e70a6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9156,
        "upload_time": "2022-11-04T12:09:20",
        "upload_time_iso_8601": "2022-11-04T12:09:20.901502Z",
        "url": "https://files.pythonhosted.org/packages/6a/ac/77a8369ed19dd974aa8e241b6814c72a607e9a6c519ee46e0bc379a1934c/GaiaClusterFit-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2b6ffe314c73ab46fec1286e54ad15c43537ae2bc0161cf98dc8ce80adc196a",
          "md5": "b65d6f1266ea12a8b38600d497ba23b7",
          "sha256": "028f67a52d33832e17a181a74980cef577ac517bd9c53a9e542ff84d8436db44"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b65d6f1266ea12a8b38600d497ba23b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9382,
        "upload_time": "2022-11-23T11:46:55",
        "upload_time_iso_8601": "2022-11-23T11:46:55.384562Z",
        "url": "https://files.pythonhosted.org/packages/e2/b6/ffe314c73ab46fec1286e54ad15c43537ae2bc0161cf98dc8ce80adc196a/GaiaClusterFit-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86876bc9e9a458e538af94324fb069f75469da6453fadf36adf96db4c44eeb96",
          "md5": "4600425c62399c507abd5460abe8b526",
          "sha256": "fa088ea934867f65581e8b00b4917671e6101218dfc3dc428721199af52f0f17"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4600425c62399c507abd5460abe8b526",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9661,
        "upload_time": "2022-11-23T11:46:57",
        "upload_time_iso_8601": "2022-11-23T11:46:57.366717Z",
        "url": "https://files.pythonhosted.org/packages/86/87/6bc9e9a458e538af94324fb069f75469da6453fadf36adf96db4c44eeb96/GaiaClusterFit-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "755f9d3880b260ebcdfd783a73d582e68d384e705b7f83f37905af0d853d1449",
          "md5": "5bce379ef3a34fa09a282d46716ae010",
          "sha256": "fff30629b50728a8e941469bf4043d07420bbd53a8098cfbe985c39c8c5530cd"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bce379ef3a34fa09a282d46716ae010",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9286,
        "upload_time": "2022-11-23T12:01:32",
        "upload_time_iso_8601": "2022-11-23T12:01:32.287663Z",
        "url": "https://files.pythonhosted.org/packages/75/5f/9d3880b260ebcdfd783a73d582e68d384e705b7f83f37905af0d853d1449/GaiaClusterFit-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90998d4d49972480ed022c99ef4d820b75cd338ec4668f0836f3a59a3d19f2ae",
          "md5": "a3815275f0ad71d86905686f8be1ce3f",
          "sha256": "0985930a480e9b58cf5d945eafa4fe0426e12683e4d6fa71daccfbba46be3483"
        },
        "downloads": -1,
        "filename": "GaiaClusterFit-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a3815275f0ad71d86905686f8be1ce3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9425,
        "upload_time": "2022-11-23T12:01:35",
        "upload_time_iso_8601": "2022-11-23T12:01:35.512868Z",
        "url": "https://files.pythonhosted.org/packages/90/99/8d4d49972480ed022c99ef4d820b75cd338ec4668f0836f3a59a3d19f2ae/GaiaClusterFit-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "755f9d3880b260ebcdfd783a73d582e68d384e705b7f83f37905af0d853d1449",
        "md5": "5bce379ef3a34fa09a282d46716ae010",
        "sha256": "fff30629b50728a8e941469bf4043d07420bbd53a8098cfbe985c39c8c5530cd"
      },
      "downloads": -1,
      "filename": "GaiaClusterFit-0.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5bce379ef3a34fa09a282d46716ae010",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9286,
      "upload_time": "2022-11-23T12:01:32",
      "upload_time_iso_8601": "2022-11-23T12:01:32.287663Z",
      "url": "https://files.pythonhosted.org/packages/75/5f/9d3880b260ebcdfd783a73d582e68d384e705b7f83f37905af0d853d1449/GaiaClusterFit-0.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90998d4d49972480ed022c99ef4d820b75cd338ec4668f0836f3a59a3d19f2ae",
        "md5": "a3815275f0ad71d86905686f8be1ce3f",
        "sha256": "0985930a480e9b58cf5d945eafa4fe0426e12683e4d6fa71daccfbba46be3483"
      },
      "downloads": -1,
      "filename": "GaiaClusterFit-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "a3815275f0ad71d86905686f8be1ce3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9425,
      "upload_time": "2022-11-23T12:01:35",
      "upload_time_iso_8601": "2022-11-23T12:01:35.512868Z",
      "url": "https://files.pythonhosted.org/packages/90/99/8d4d49972480ed022c99ef4d820b75cd338ec4668f0836f3a59a3d19f2ae/GaiaClusterFit-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}