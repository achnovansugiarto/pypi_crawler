{
  "info": {
    "author": "Yameen Vinchu, Ashutosh Upadhyay",
    "author_email": "yameenvinchu38@gmail.com, ashutosh.aku.aau@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n#  Graphics With Python \n\n  [![AGPL License](https://img.shields.io/badge/python-3.6-yellowgreen)]() \n  [![AGPL License]( https://img.shields.io/badge/licence-Apache%202.0-orange)]() \n\n### A Computer Graphic Library for engineering in Python\n  \t\n\n## Overview\n > Graphic With Python (GWP) is a user-friendly and simpler way to practise and imply Computer Graphic Concept . It is better then graphics.h as GWP is faster & easy to implement. The Aim for this library is to make Computer Graphic Visualization easier and understandable by providing Fuction for each Method and support.\n\n  ![output of floodfill algorith](https://lh3.googleusercontent.com/AUTuh6XU-Ojo924X17CQoe467JMXD6GJ9R-wqdK0OfqC1tavQ71D2sz8GCm8sJQBW1V4GP7SwMLArfADKdrgu53bWP5KckgybXpgNVfIcG3ND3Z1rrEt36Le_OaNN40kxn5bwS8=w2400)\n  ![output of midpoint algorith](https://lh3.googleusercontent.com/zsKmDt1nJnVbC8tvw65MwTxFlETFHN1CjEipg1gP8rc8br_u7rZ-t4He-kQNOne6hr4e7M_co28XDiS1qBOHYkcm13nf4YMBSxa3vPYrKyNh2PM7D2De8_H3fQm9t4ySFC5xYtE=w2400)\n  ![output of bresenhams algorith](https://lh3.googleusercontent.com/oKS0O1HrHdMAOs2lrrmf8I2G-oofuaMXvV1rp1XwDdYTwHzaiascfGlyWkblxgqw_6OGq4X1yku6zd3QlbSgVWKtT05eo-St-pI4_eDfGMePVBiTCpDNdljGRXO7V5yNnea1njM=w2400)\n  ![output of boundaryfill algorith](https://lh3.googleusercontent.com/Rk1SjsMKObd2gHuwLosGbMpQS4sWGRBELAETM21RxvUWgZwQLJEEGSPLDHhs6vi_lrWdV6mzwW2_wFDeMfYJkHpFDvU3Z6rOQ48qrn_uVRW5pHTbNsylkFHekvFQDVgd2vkDVy4=w2400)\n  \n\n# Installation\n\n#### Prerequisite                                                              \n\n> [Python 3.6 +](https://www.python.org/downloads/)                     \n> IDE / [Replit](https://replit.com)\n\n\nIDE's like ([VScode](https://code.visualstudio.com/download) , [Pycharm](https://www.jetbrains.com/pycharm/download) , etc)\n\n## There are two methods to installation and using this library. \n\nFor Local Machine / IDE's\n### Step 1\n```python\n   # Check wheather the python and pip are installed\n   python --version\n   pip --version\n```\n### Step 2\n```python\n   pip install GraphicswithPython\n```\nFor Online IDE\n\n - Visit here  www.replit.com\n - Make an account \n - Create a new repl for python \n - Go to shell and enter\n```python\n    pip install GraphicswithPython\n```\n\n# Usage/Examples\n\n>GraphicswithPython library support `manual` function  as well as `pre-implemented` function for refrence.\n                                \n## Manual     \n\n\n- ### window()\n  > It create a window for where your output is displayed. Every program must have a window\n\n  ##### Parameter of Window \n       window(width: int, height: int)\n  ### Example\n  ```python\n  from GraphicswithPython import window \n  window(700,700)\n  ```\n- ### color()\n  > Graphicswithpython supports rgb color. So to make this easy just pass a string of color example `red` and it will return rgb tuple value\n\n  ##### Parameter \n      color(\"color\") supported color for now are black, grey, red, white, blue, green, yellow, orange, purple\n  ### Examples\n  ```python\n  from GraphicswithPython import color\n  color(\"red\") # return (255, 0, 0)\n  color(\"blue\") # return (0, 0, 255)\n  color(\"black\") # return (0,0,0)\n  color(\"green\") # return (0,255,0)\n  ```\n- ### putpixel()\n  > It put specific pixel at given x , y coordinate\n\n  ##### Parameter \n      putpixel(xcordinates: int, ycordinates: int, color: str, intensity: int) # intensity is optional parameter\t\n  ### Examples\n  ```python\n  from GraphicswithPython import putpixel,window\n  window(700,700)\n  putpixel(300,300,\"black\")\n  ```\n- ### getpixel()\n  >It returns RBG color data of specific pixel at provided x ,y co-ordinate\t\n  \n  ##### Parament\n      getpixel(xcordinates: int, ycordinates: int) -> return tuple color example (0,0,255)\n  ### Examples\n  ```python\n  from GraphicswithPython import putpixel,window\n  window(700,700)\n  putpixel(300,300,\"black\") # Its return tuple color (0,0,225)\n  print(getpixel(300,300))   # we printed getpixel to get output in terminal\n  ```\n- ### delay()\n  >It delay the programe so you can see the animation\n  \n  ##### Parament\n      delay(Milliseconds) \n  ### Examples\n  ```python\n  from GraphicswithPython import delay\n  delay(1000) # delay progaram for 1 sec\n  ```\n- ### circle()\n  >  It create a circle of given radius \n  ##### parameter\n      circle(xcordinates: int, ycordinates: int, radius: int, color: tuple)\t\n  ### Examples\n  ```python\n  from graphicswithpython import circle , display , delay , color\n  display(700, 700 )    \n  circle(300,300,40,color(\"green\"))\n  \n  delay(5000) # Used to make display visible for next 5 seconds after execution\n  ```\n  \n- ### rectangle()\n  > It create a Rectangle\t\n  ##### parameter\n      rectangle(left: int, top: int, width: int, height: int, color: tuple)\t\n  ### Examples\n  ```python\n  from graphicswithpython import rectangle , display , delay , color\n  display(700, 700 )\n  rectangle(300,300,100,100,color(\"green\"))\n  \n  delay(5000) # Used to make display visible for next 5 seconds after execution\n  ```\n- ### elipse()\n  > It create a Elipse\t\n  ##### parameter\n      elipse(left: int, top: int, width: int, height: int, color: tuple)\t\n  ### Examples\n  ```python\n  from graphicswithpython import elipse , display , delay , color\n  display(700, 700 )\n  ellipse(200,200,100,100,color(\"white\"))\n  \n  delay(5000) # Used to make display visible for next 5 seconds after execution  \n  \n  ```\n  \n- ### polygon()\n  > It create a Polygon\t\n  ##### parameter \n      polygon(points: tuple, color: tuple)\t\n  ### Examples\n  ```python\n  from graphicswithpython import polygon , window , delay ,color\n  \n  window(700,700)\n  \n  polygon(((300,300),(200,400),(300,500),(500,500),(300,400)),color(\"white\"))\n  \n  delay(5000)  # Used to make display visible for next 5 seconds after execution\n  ```\n- ### point_in_circle()\n  >It check wheater the point is in circle or not.\t\n  ##### parameter\n      point_in_circle(centerx: int, centery: int, radius: int, x: int, y: int)\t\n  ### Examples\n  ```python\n  from graphicswithpython import  window , delay ,color, pointInCircle ,circle\n  \n  window(700,700)\n  circle(300,300,40,color(\"red\"))\n  print(pointInCircle(300,300,40,500,500))  # it will return False , as point is outside circle\n  print(pointInCircle(300,300,40,320,320))  # It will return True , as point is inside circle\n  \n  \n  delay(5000)  # Used to make display visible for next 5 seconds after execution\n  ```\n  \n\n\n# PreImplemented \n>PreImplemented function are the `funtional Algorithm`  which are already implemented.\n\n- ## DDA   \n  > DDA stands for Digital Differential Analyzer. It is an incremental method of scan conversion of line\n  \n  | Parameter |                               Explaination                                |\n  | :-------: | :-----------------------------------------------------------------------: |\n  |    x1     |                      Integer varible of x-coordinate                      |\n  |    y1     |                   Interger variable for y-coordinate of                   |\n  |    x2     |          Integer variable for x-coordinate for 2nd point of line          |\n  |    y2     |          Integer variable for y-coordinate for 2nd point of line          |\n  | DDA type  | Any of  dda types required   =>     `Line` , `dash` ,`solid` , `dotted` . |\n  |   color   |      color() funtion is required to mention the color of dda needed       |\n  \n   #### Parameter for DDA is \n       dda(x1: int, y1: int, x2: int, y2: int, DDatype: str, color: tuple\n  \n   ### Examples\n  ```python\n  from graphicswithpython import dda, window, delay, color\n  \n  window(700, 700)  # first make window to get output there\n  \n  # Line\n  dda(100, 100, 200, 200, \"line\", color(\"blue\"))\n  \n  # line Dash\n  dda(200, 200, 300, 300, \"dash\", color(\"white\"))\n  \n  # line Solid\n  dda(300, 300,400,400, \"solid\", color(\"blue\"))\n  \n  # line dotted\n  dda(400,400,500,500, \"dotted\", color(\"blue\"))\n  \n  delay(5000)     # make window visible more 5 sec after execution completes\n  ```\n  <!-- ![output of bresenhams algorith](https://media.tenor.com/images/e49b7ff168026a1057c1c439fadea5be/tenor.gif) -->\n  ![DDA](https://lh3.googleusercontent.com/vY4fQxNnM2K7kUguXabht4_WVelgY_AUGt8YOCjXfDVN638zZlcsPTfLNPqDaX0YB3TF0NX8FB48AqD9yj64I2nUD-VIWxawzXr1saOj8deHnS0Jx7ihZ3M3jD7KnaZpdRSTy_o=w2400)\n\n- ## Breshham\n\n   >Bresenham's line algorithm is a line drawing algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points.\n   \n   |    Required    |                          Explanation                          |\n   | :------------: | :-----------------------------------------------------------: |\n   |       x1       |              x-coordinate for 1st point of line               |\n   |       y1       |              y-coordinate for 1st point of line               |\n   |       x2       |              x-coordinate for 2nd point of line               |\n   |       y2       |              y-coordinate for 2nd point of line               |\n   | bresenhamstype | Type of Bresenham needed =>  `line`,`dash`, `solid`, `dotted` |\n   |     color      |           color() funtion is required (rgb tuple )            |\n   \n   \n   ####  Parameter for Bresenham\n      \n       bresenham(x1: int, y1: int, x2: int, y2: int, bresenhamstype: str, color: tuple)\n   \n    ### Examples\n    ```python\n    from graphicswithpython import bresenhams, window,delay,color\n    window(700,700)         #first make window to get output there\n    \n    \n    # Breshham  Line  \n    bresenhams(200,200,300,300,\"line\",color(\"green\")) \n    \n    #Breshham  Line Dash\n    bresenhams(300,300,400,400,\"dash\",color(\"yellow\"))\n    \n    #Breshham  Line Solid\n    bresenhams(400,400,500,500,\"solid\",color(\"red\"))\n    \n    #Breshham  Line dotted \n    bresenhams(500,500,600,600,\"dotted\",color(\"white\"))\n    \n    \n    delay(5000)     # make window visible more 5 sec after execution completes\n    ```\n   <!-- ![output of bresenhams algorith](https://media.tenor.com/images/39fef84a82257c5772cf11ab47e9df03/tenor.gif)  -->\n   ![bresanhams](https://lh3.googleusercontent.com/oKS0O1HrHdMAOs2lrrmf8I2G-oofuaMXvV1rp1XwDdYTwHzaiascfGlyWkblxgqw_6OGq4X1yku6zd3QlbSgVWKtT05eo-St-pI4_eDfGMePVBiTCpDNdljGRXO7V5yNnea1njM=w2400)\n   \n\n   \n\n- ## Midpointcircle\n  > The midpoint circle algorithm is an algorithm used to determine the points needed for rasterizing a circle.\n  \n  |   Required   |                               Explaination                                |\n  | :----------: | :-----------------------------------------------------------------------: |\n  |    radius    |                             radius of circle                              |\n  |   xcenter    |                     x-coordinate for center of circle                     |\n  |   ycenter    |                     y-coordinate for center of circle                     |\n  | midpointtype | type of midpoint circle needed => LINE , Dash, solid, Dotted, DashandLine |\n  |    color     |                 color() function is required (rgb tuple )                 |\n  \n  #### Parament for Midpointcircle\n      midpoint(radius: int, xcenter: int, ycenter: int, midpointtype: str, color: tuple)\n  ### Examples\n    ```python\n  from graphicswithpython import  window, delay, color, midpointcircle\n  \n  window(700,700)         #first make window to get output there\n  \n  # Midpoint  Circle Line  \n  midpointcircle(70,200,200,\"line\",color(\"red\"))\n  \n  # Midpoint Circle Dash \t\n  midpointcircle(70,400,200,\"dash\",color(\"green\"))\n  \n  # Midpoint Circle Dotted \t\t   \n  midpointcircle(70,200,400,\"dotted\",color(\"white\"))\n  \n  # Midpoint Circle Solid\n  midpointcircle(70,400,400,\"solid\",color(\"blue\"))\n  \n  # Midpoint Circle Dash and Normal\n  midpointcircle(60,300,300,\"dottedandline\",color(\"yellow\"))\n  \n  delay(2000)     # make window visible more 5 sec after execution completes\n  \n  ```\n  <!-- ![output of bresenhams algorith](https://media.tenor.com/images/2538a6b276cb738599653ee964840486/tenor.gif) -->\n  <!-- ![midpoint](gif/midpoint2%20(1).gif) -->\n  ![midpoint](https://lh3.googleusercontent.com/zsKmDt1nJnVbC8tvw65MwTxFlETFHN1CjEipg1gP8rc8br_u7rZ-t4He-kQNOne6hr4e7M_co28XDiS1qBOHYkcm13nf4YMBSxa3vPYrKyNh2PM7D2De8_H3fQm9t4ySFC5xYtE=w2400)\n- ## FloodFill  \n  >Flood fill, also called seed fill, is an algorithm that determines and alters the area connected to a given node in a multi-dimensional array with some matching attribute.\n  \n  |    Required     |                     Explaination                      |\n  | :-------------: | :---------------------------------------------------: |\n  |     xcenter     |             x-coordinate of center point              |\n  |     ycenter     |             y-coordinate of center point              |\n  | backgroundcolor |          exisiting backgroundcolor of window          |\n  |    newcolor     |  color() funtion required for new color to be filled  |\n  |      seed       |         number of seed you need for FloodFill         |\n  |     radius      | radius of object in which doing floodfill. (optional) |\n  \n   > Note : Radius tuple is required for 8 seed floodfill\n  \n  #### Parameter of FloodFill\n        xcenter: int, ycenter: int, backgroundcolor: tuple, newcolor: tuple, seeds: int, radius: int | None = None\n  ### Examples (for 4  seed )\n  ```python\n  from graphicswithpython import floodfill, window,delay,color , circle ,rectangle,polygon \n  \n  window(700,700)         #first make window to get output there\n  \n  #  FloodFill 4 seed Circle\n  circle(100,100,40,color(\"red\"))       \n  floodfill(100,100,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=4)       #floodfill(xcenter,ycenter,backgroundcolor,newcolor,seed)\n    \n  # FloodFill 4 seed Square \n  rectangle(200,300,100,100,color(\"blue\"))\n  floodfill(210,310,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=4)\n    \n  # FloodFill 4 seed polygon\t\n  polygon(points=((500,100),(500,200),(600,200),(630,150),(600,100)),color=\"red\")\n  floodfill(530,150,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=4)\n     \n  # FloodFill 4 seed Rectangle\n  rectangle(350,550,140,100,color(\"red\"))   \n  floodfill(400,600,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=4)\n      \n  delay(5000)     # make window visible more 5 sec after execution completes\n      \n  ```\n   ### Examples (for 8 seed)\n  ```python\n  from graphicswithpython import floodfill, window, delay, color, circle, rectangle,triangle\n  \n  window(700,700)         #first make window to get output there\n  \n  #first draw object \n  circle(390,348,50,color(\"purple\"))      \n  triangle(325,410,270,500,380,500,color(\"yellow\"))\n  rectangle(200,300,100,100,color(\"red\"))\n  rectangle(250,350,140,100,color(\"white\")) \n  \n  #Flood Fill with 8 seed\n  floodfill(210,310,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=8)  # upper rectangle\n  floodfill(390,348,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=8,radius=49)    #circle  *(MUST SPECIFY RADIUS IN CIRCLE ONLY)\n  floodfill(315,380,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=4)   # middle Rectangle (Here 4 seed is done , as it consist of inner circle ) \n  floodfill(325,470,backgroundcolor=color(\"black\"),newcolor=color(\"green\"),seeds=8)   # triangle\n      \n  delay(5000)     # make window visible more 5 sec after execution completes\n  \n  ``` \n  <!-- ![output of bresenhams algorith](https://media.tenor.com/images/a37051dc07d5568d7aae2311f9d21264/tenor.gif) -->\n  ![floodfill](https://lh3.googleusercontent.com/AUTuh6XU-Ojo924X17CQoe467JMXD6GJ9R-wqdK0OfqC1tavQ71D2sz8GCm8sJQBW1V4GP7SwMLArfADKdrgu53bWP5KckgybXpgNVfIcG3ND3Z1rrEt36Le_OaNN40kxn5bwS8=w2400)\n\n- ## Boundary Fill \n  > Boundary fill is the algorithm used frequently in computer graphics to fill a desired color inside a closed polygon having the same boundary color for all of its sides.\n\n  |  Required   |                     Explaination                      |\n  | :---------: | :---------------------------------------------------: |\n  |   xcenter   |             x-coordinate of center point              |\n  |   ycenter   |             y-coordinate of center point              |\n  | bordercolor |               exisiting bordercolor of                |\n  |  newcolor   |  color() funtion required for new color to be filled  |\n  |    seed     |         number of seed you need for FloodFill         |\n  |   radius    | radius of object in which doing floodfill. (optional) |\n\n  #### Parameter for Boundary FIll \n    xcenter: int, ycenter: int, bordercolor: tuple, newcolor: tuple, seeds: int, radius: int | None = None\n\n\n  ### Examples ( for 4 seed )\n  ```python\n  from graphicswithpython import boundaryfill, window,delay,color , circle ,rectangle,polygon \n\n  window(700,700)         #first make window to get output there\n  # boundaryfill 4 seed Rectangle\n  rectangle(350,550,140,100,color(\"red\"))   \n  boundaryfill(400,600,bordercolor=color(\"red\"),newcolor=color(\"green\"),seeds=4)\n\n\n  #  boundaryfill 4 seed Circle\n  circle(100,100,40,color(\"red\"))       \n  boundaryfill(100,100,bordercolor=color(\"red\"),newcolor=color(\"green\"),seeds=4)       #boundaryfill(xcenter,ycenter,bordercolor,newcolor,seed)\n\n  # boundaryfill 4 seed Square \n  rectangle(200,300,100,100,color(\"blue\"))\n  boundaryfill(210,310,bordercolor=color(\"blue\"),newcolor=color(\"green\"),seeds=4)\n\n  # boundaryfill 4 seed polygon\t\n  polygon(points=((500,100),(500,200),(600,200),(630,150),(600,100)),color=\"red\")\n  boundaryfill(530,150,bordercolor=color(\"red\"),newcolor=color(\"green\"),seeds=4)\n\n\n  delay(5000)     # make window visible more 5 sec after execution completes\n  ```\n\n  ### Examples (for 8 seed)\n  ```python\n  from graphicswithpython import boundaryfill, window, delay, color, circle, rectangle,triangle\n  \n  window(700,700)         #first make window to get output there\n  \n  #first draw object \n  rectangle(250,350,140,100,color(\"white\"))\n  circle(390,348,50,color(\"purple\"))      \n  triangle(325,410,270,500,380,500,color(\"yellow\"))\n  rectangle(200,300,100,100,color(\"red\"))\n  # rectangle(250,350,140,100,color(\"white\")) \n  \n  #Flood Fill with 8 seed\n  boundaryfill(210,310,bordercolor=color(\"red\"),newcolor=color(\"green\"),seeds=8)  # upper rectangle\n  boundaryfill(390,348,bordercolor=color(\"purple\"),newcolor=color(\"green\"),seeds=8,radius=49)    #circle  *(MUST SPECIFY RADIUS IN CIRCLE ONLY)\n  # boundaryfill(315,380,bordercolor=color(\"white\"),newcolor=color(\"green\"),seeds=4)   # middle Rectangle (Here 4 seed is done , as it consist of inner circle ) \n  boundaryfill(325,470,bordercolor=color(\"yellow\"),newcolor=color(\"green\"),seeds=8)   # triangle\n      \n  delay(5000)     # make window visible more 5 sec after execution completes\n  ```\n  <!-- ![output of bresenhams algorith](https://media.tenor.com/images/34f3a3acc453b5e4cff7865be2c00372/tenor.gif) -->\n  ![borderfill](https://lh3.googleusercontent.com/Rk1SjsMKObd2gHuwLosGbMpQS4sWGRBELAETM21RxvUWgZwQLJEEGSPLDHhs6vi_lrWdV6mzwW2_wFDeMfYJkHpFDvU3Z6rOQ48qrn_uVRW5pHTbNsylkFHekvFQDVgd2vkDVy4=w2400)\n  \n\n\n# Summary\n- ### Manual Method \n  | Funtions          |                               Description                                |                                  Parameter                                   |                                           Examples |\n  | :---------------- | :----------------------------------------------------------------------: | :--------------------------------------------------------------------------: | -------------------------------------------------: |\n  | window()          |               It create a window for output visualization.               |                       window(width: int, height: int)                        |                                    window(700,700) |\n  | putpixel()        |             It put specific pixel at given x , y coordinate              |           putpixel(xcordinates: int, ycordinates: int, color: str)           |                          putpixel(300,300,\"black\") |\n  | getpixel()        | It returns RBG color data of specific pixel at provided x\t,y co-ordinate |                 getpixel(xcordinates: int, ycordinates: int)                 |                   xcordinates:int, ycordinates:int |\n  | circle()          |                            It create a circle                            |    circle(xcordinates: int, ycordinates: int, radius: int, color: tuple)     |                  circle(300,300,40,color(\"green\")) |\n  | rectangle()       |                          It create a Rectangle                           |    rectangle(left: int, top: int, width: int, height: int, color: tuple)     |          rectangle(300,300,100,100,color(\"green\")) |\n  | elipse()          |                            It create a Elipse                            |      elipse(left: int, top: int, width: int, height: int, color: tuple)      |            ellipse(200,200,100,100,color(\"white\")) |\n  | polygon()         |                           It create a Polygon                            |                     polygon(points: tuple, color: tuple)                     |                                            unknown |\n  | triangle()        |                           It create a Triangle                           | triangle(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, color: tuple) |     triangle(200,200,200,300,300,200,color(\"red\")) |\n  | frame_limiter()   |         Can specify number of frame per second (FPS) of window.          |                                                                              |                                                    |\n  | point_in_circle() |             It check wheater the point is in circle or not.              |   point_in_circle(centerx: int, centery: int, radius: int, x: int, y: int)   | centerx:int, centery:int, radius:int, x:int, y:int |\n  \n\n\n\n- ### PreImplemented Methods\n\n  | Funtions                        | Description                                                                                                           |\n  | :------------------------------ | :-------------------------------------------------------------------------------------------------------------------- |\n  | DDA Line                        | DDA stands for Digital Differential Analyzer. It is an incremental method of scan conversion of line                  |\n  | DDA Dash                        | Draws a dashed line using DDA Algorithm. Takes the line co-ordinates from the user to plot the desired dashed line.   |\n  | DDA Solid                       | Draws a Solid line using DDA Algorithm. Takes the line co-ordinates from the user to plot the desired Solid line.     |\n  | DDA Dotted                      | Draws a dashed & line using DDA Algorithm. Takes the line co-ordinates from the user to plot the desired line.        |\n  | Breshham  Line                  | This algorithm is used for scan converting a line.                                                                    |\n  | Breshham  Line Dotted           | This algorithm is used for scan converting a  line.                                                                   |\n  | Midpoint Circle                 | This algorithm is used to draw Circle using Center point co-ordinate                                                  |\n  | Midpoint Circle Dash            | This algorithm is used to draw Circle with dash border using Center point co-ordinate                                 |\n  | Midpoint Circle Solid           | This algorithm is used to draw Circle with solid Border using Center point co-ordinate                                |\n  | Midpoint Circle Dotted          | This algorithm is used to draw Circle with Dotted Borderusing Center point co-ordinate                                |\n  | Midpoint Circle Dash and Normal | This algorithm is used to draw Circle with Oppsosite side Dashed using Center point co-ordinate                       |\n  | FloodFill 4 seed                | It flood the fill pattern and fill color in area bounded by color border with 4 seed point.                           |\n  | FloodFill 4 seed polygon        | It flood the fill pattern and fill color in area of Polygon bounded by color border with 4 seed point.                |\n  | FloodFill 4 seed Circle         | It flood the fill pattern and fill color in area of Circle bounded by color border with 4 seed point.                 |\n  | FloodFill 8 seed                | It flood the fill pattern and fill color in area of polygon bounded by color border with 8 seed point.                |\n  | FloodFill 8 seed Square         | It flood the fill pattern and fill color in area of Square bounded by color border with 8 seed point.                 |\n  | FloodFill 8 seed Polygon        | It flood the fill pattern and fill color in area of Polygon bounded by color border with 8 seed point.                |\n  | FloodFill 8 seed Rectangle      | It flood the fill pattern and fill color in area of Rectangle bounded by color border with 8 seed point.              |\n  | FloodFill 8 seed Circle         | It flood the fill pattern and fill color in area of Circle bounded by color border with 8 seed point.                 |\n  | Boundary Fill 4 seed            | It fill a desired color inside a closed Polygon having the same boundary color for all of its sides using 4 seeds.    |\n  | Boundary Fill 4 seed Square     | It fill a desired color inside a closed Sqaure having the same boundary color for all of its sides using 4 seeds.     |\n  | Boundary Fill 4 seed Rectangle  | It fill a desired color inside a closed Reactangle having the same boundary color for all of its sides using 4 seeds. |\n  | Boundary Fill 4 seed Circle     | It fill a desired color inside a closed Circle having the same boundary color for all of its sides using 4 seeds.     |\n  | Boundary Fill 8 seed            | It fill a desired color inside a closed Polygon having the same boundary color for all of its sides using 8 seeds.    |\n  | Boundary Fill 8 seed Square     | It fill a desired color inside a closed Square having the same boundary color for all of its sides using 8 seeds.     |\n  | Boundary Fill 8 seed Polygon    | It fill a desired color inside a closed Polygon having the same boundary color for all of its sides using 8 seeds.    |\n  | Boundary Fill 8 seed Rectangle  | It fill a desired color inside a closed Rectangle having the same boundary color for all of its sides using 8 seeds.  |\n  | Boundary Fill 8 seed Circle     | It fill a desired color inside a closed Circle having the same boundary color for all of its sides using 8 seeds.     |\n  \t\t\n      \n- # Author \n  ## Maintainers :\n  - ## [`Yameen Vinchu`](https://www.github.com/YameenV)   \n    connect me at [Linkedin](https://www.linkedin.com/in/yameen-vinchu-584085221/)\n  \n  - ## [`Ashutosh Upadhyay`](https://www.github.com/Ashutosh-upadhya)\n    connect me at [Linkedin](https://www.linkedin.com/in/ashutoshupadhyay78) \n\n\n\n  ## Contributer :\n  [Yameen Vinchu](https://www.github.com/YameenV)  \n  [Ashutosh Upadhyay](https://www.github.com/Ashutosh-upadhya)\n\n<!-- ##### Get in touch -->\n<!-- - `Yameen Vinchu` \n- [Linkedin](https://www.linkedin.com/yameen-vinchu-58408522)\n- [github](www.github.com/YameenV)\n    \n- `Ashutosh Upadhyay`\n- [Linkedin](www.linkedin.com/ashutoshupadhyay78)\n- [github](www.github.com/Ashutosh-upadhya) -->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YameenV/graphicswithpython.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GraphicswithPython",
    "package_url": "https://pypi.org/project/GraphicswithPython/",
    "platform": "",
    "project_url": "https://pypi.org/project/GraphicswithPython/",
    "project_urls": {
      "Homepage": "https://github.com/YameenV/graphicswithpython.git"
    },
    "release_url": "https://pypi.org/project/GraphicswithPython/0.0.11/",
    "requires_dist": [
      "pygame (~=2.1.0)"
    ],
    "requires_python": "",
    "summary": "Graphic With Python (GWP) is a user-friendly and simpler way to practise and imply Computer Graphic Concept . It is better then graphics.h as GWP is faster & easy to implement. The Aim for this library is to make Computer Graphic Visualization easier and understandable by providing Fuction for each Method and support.",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12212458,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e07e987a9fef081989949e205d06aeb2ebc9592855fa89a9d61b4175af445c98",
          "md5": "f68295a562e71d89bb866381f6d0246a",
          "sha256": "d69cb6a4bf753a27d82e2d7285a3be4cddf063b34292a8b44fcd14f0e81505be"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f68295a562e71d89bb866381f6d0246a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7340,
        "upload_time": "2021-11-20T15:18:30",
        "upload_time_iso_8601": "2021-11-20T15:18:30.107132Z",
        "url": "https://files.pythonhosted.org/packages/e0/7e/987a9fef081989949e205d06aeb2ebc9592855fa89a9d61b4175af445c98/GraphicswithPython-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16a6722d1cd1103f64480b9b53dacc5c1232e069283a1814ad7c1bedd2209df6",
          "md5": "622005777cc366525c3dee13601f106e",
          "sha256": "d590a8913c2b5d4cb791a2aba0cc4b1d4ee1486e631a839baa7cc28498bbda4f"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "622005777cc366525c3dee13601f106e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6938,
        "upload_time": "2021-11-20T15:18:31",
        "upload_time_iso_8601": "2021-11-20T15:18:31.965090Z",
        "url": "https://files.pythonhosted.org/packages/16/a6/722d1cd1103f64480b9b53dacc5c1232e069283a1814ad7c1bedd2209df6/GraphicswithPython-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6371bd58054c092e03729fba375fc718b41e212813b476ee6d408eec56b29d5e",
          "md5": "2aa8f0d28af59670b998aa18933806ac",
          "sha256": "2731d6971b55a9abf03051662b62654cb9f00bf250a29cedeafaaf8aa9a8cc63"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2aa8f0d28af59670b998aa18933806ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12723,
        "upload_time": "2021-11-24T16:04:08",
        "upload_time_iso_8601": "2021-11-24T16:04:08.945933Z",
        "url": "https://files.pythonhosted.org/packages/63/71/bd58054c092e03729fba375fc718b41e212813b476ee6d408eec56b29d5e/GraphicswithPython-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "357805f836cfd4b229cf5ae97862676b4a9948ca80aeb3cfd57f456d322506e4",
          "md5": "09ecc39b6fb3960832cdedbcfcf65406",
          "sha256": "4d391afe19c42a25540a19024aacd86ef17196ac1e28f2f51c26cf3160066069"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "09ecc39b6fb3960832cdedbcfcf65406",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16935,
        "upload_time": "2021-11-24T16:04:11",
        "upload_time_iso_8601": "2021-11-24T16:04:11.233848Z",
        "url": "https://files.pythonhosted.org/packages/35/78/05f836cfd4b229cf5ae97862676b4a9948ca80aeb3cfd57f456d322506e4/GraphicswithPython-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1ddf545ba9afbb01872da94b09f4db5f7719e628f4ef03a6f8d67d4c948c9e5",
          "md5": "1a609ee23eb703d3caa7c3c86db824df",
          "sha256": "cde1614e3c47e29526310e927f1078d3dec7bcd819b12fd8c18e35f86fc590eb"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a609ee23eb703d3caa7c3c86db824df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13626,
        "upload_time": "2021-12-05T04:57:54",
        "upload_time_iso_8601": "2021-12-05T04:57:54.410950Z",
        "url": "https://files.pythonhosted.org/packages/c1/dd/f545ba9afbb01872da94b09f4db5f7719e628f4ef03a6f8d67d4c948c9e5/GraphicswithPython-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf829ee8904914f22573c836aef63cd4b4f2ab5e0b5043e1c07fb76ea44a9c32",
          "md5": "436cfab297b756d6f96660ed7fb51418",
          "sha256": "bee802112926d8dd6369a68811d5ba2012783a8edc0d7f3925bf77f0bd4ee43e"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "436cfab297b756d6f96660ed7fb51418",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18361,
        "upload_time": "2021-12-05T04:57:57",
        "upload_time_iso_8601": "2021-12-05T04:57:57.025587Z",
        "url": "https://files.pythonhosted.org/packages/bf/82/9ee8904914f22573c836aef63cd4b4f2ab5e0b5043e1c07fb76ea44a9c32/GraphicswithPython-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5f0c5aa8dff0fd9b1210d1e10e2527f3909cdab86d8c1d81e80117570e04afc",
          "md5": "ffed4a22d3402c10329ccb514ed8000e",
          "sha256": "029348ea7d24dadc8ef2d2396c36e5eda3d90061154ebb67b83da3cd5183c04c"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffed4a22d3402c10329ccb514ed8000e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7504,
        "upload_time": "2021-11-21T10:39:55",
        "upload_time_iso_8601": "2021-11-21T10:39:55.767339Z",
        "url": "https://files.pythonhosted.org/packages/b5/f0/c5aa8dff0fd9b1210d1e10e2527f3909cdab86d8c1d81e80117570e04afc/GraphicswithPython-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e54e335a3d4345dab1e2826dfb4e3b6a114f1bf8aee1c85e4d363cd7c8869433",
          "md5": "c873d9eeb233ac71a037f3e8f2fae890",
          "sha256": "cfb8ce9fe6716ff323777c0fb282163c91d3f25ab39ca6c42ef01aa98e4670a4"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c873d9eeb233ac71a037f3e8f2fae890",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7074,
        "upload_time": "2021-11-21T10:39:57",
        "upload_time_iso_8601": "2021-11-21T10:39:57.253530Z",
        "url": "https://files.pythonhosted.org/packages/e5/4e/335a3d4345dab1e2826dfb4e3b6a114f1bf8aee1c85e4d363cd7c8869433/GraphicswithPython-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ce66fbdcad3acdaed0ab84d37672ab3b4a95c6ae9a8b1372ef7c8f9723e265d",
          "md5": "796ecaa5de1c730f2912cdbbb626375a",
          "sha256": "189fe78daa67905bc3975daabead744806d08e71f1e8538e0fd42c9816746e91"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "796ecaa5de1c730f2912cdbbb626375a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7587,
        "upload_time": "2021-11-21T11:12:02",
        "upload_time_iso_8601": "2021-11-21T11:12:02.961578Z",
        "url": "https://files.pythonhosted.org/packages/4c/e6/6fbdcad3acdaed0ab84d37672ab3b4a95c6ae9a8b1372ef7c8f9723e265d/GraphicswithPython-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bc48f0b85c7bfcbe7643658dbd81e3e55ae7f74f0406ccfa493fc7292744a99",
          "md5": "344c5c20863f6d02af271cbd7ef192c2",
          "sha256": "43ad4a896394da68177f9e302a4955292c782472092d5c1bc033582b60d2d72f"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "344c5c20863f6d02af271cbd7ef192c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7150,
        "upload_time": "2021-11-21T11:12:04",
        "upload_time_iso_8601": "2021-11-21T11:12:04.307877Z",
        "url": "https://files.pythonhosted.org/packages/7b/c4/8f0b85c7bfcbe7643658dbd81e3e55ae7f74f0406ccfa493fc7292744a99/GraphicswithPython-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdebe797b7dccdd265fa8642b9c76725fc73b74903b98ddf63864050c9443379",
          "md5": "8a206013a4f7122f56b3f3d062978c66",
          "sha256": "f31cc40173384e8e5bef2a0ba1d7e1dac0df7a43f38d76e21b2dfcc823cd9f28"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a206013a4f7122f56b3f3d062978c66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7576,
        "upload_time": "2021-11-21T14:23:11",
        "upload_time_iso_8601": "2021-11-21T14:23:11.120982Z",
        "url": "https://files.pythonhosted.org/packages/bd/eb/e797b7dccdd265fa8642b9c76725fc73b74903b98ddf63864050c9443379/GraphicswithPython-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f27ece399f23b709346fde629daa9d664444f6aa63e085ef5675c0c1fb2717",
          "md5": "93848646228185bdbb111a13eb53d246",
          "sha256": "142a09cf125aa0702a3d01e663a621baa2fff978cc98437bf2a621f358d77db8"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "93848646228185bdbb111a13eb53d246",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7138,
        "upload_time": "2021-11-21T14:23:12",
        "upload_time_iso_8601": "2021-11-21T14:23:12.560548Z",
        "url": "https://files.pythonhosted.org/packages/34/f2/7ece399f23b709346fde629daa9d664444f6aa63e085ef5675c0c1fb2717/GraphicswithPython-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9022d024034ee553c484ff1df92ab04690da59b45ce61a05aba1d1abc7c8feb4",
          "md5": "07831d49c929d7ef90cda149f88d5ee8",
          "sha256": "606c19d29923dfd1b168b32fbb62257efd506b8da06f6f45f98fa267b3d67091"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07831d49c929d7ef90cda149f88d5ee8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7597,
        "upload_time": "2021-11-21T14:37:46",
        "upload_time_iso_8601": "2021-11-21T14:37:46.748192Z",
        "url": "https://files.pythonhosted.org/packages/90/22/d024034ee553c484ff1df92ab04690da59b45ce61a05aba1d1abc7c8feb4/GraphicswithPython-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd6c55603310a5913d315e49ed42908d9f2b56a856c3a5bbd6a706c79cca3738",
          "md5": "e48bd42e8d927e26a5300c15d1850625",
          "sha256": "3763291f3960e76f18f8e1ccd8adbf4b8278baa04a6a5e0c864e7a73bd839c6c"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e48bd42e8d927e26a5300c15d1850625",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7152,
        "upload_time": "2021-11-21T14:37:48",
        "upload_time_iso_8601": "2021-11-21T14:37:48.157594Z",
        "url": "https://files.pythonhosted.org/packages/dd/6c/55603310a5913d315e49ed42908d9f2b56a856c3a5bbd6a706c79cca3738/GraphicswithPython-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25bbe6f141176006b62c25133770e2b50091a7ebed63af32adcd477788cb4045",
          "md5": "5c27fb6a4a24e2d72db8c87d5a9d1d27",
          "sha256": "645c13a7b54d375dcfba568445c3fe3c70c1752d8d41ec7866e74c48c57808ec"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c27fb6a4a24e2d72db8c87d5a9d1d27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12139,
        "upload_time": "2021-11-22T06:22:19",
        "upload_time_iso_8601": "2021-11-22T06:22:19.355106Z",
        "url": "https://files.pythonhosted.org/packages/25/bb/e6f141176006b62c25133770e2b50091a7ebed63af32adcd477788cb4045/GraphicswithPython-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0510c7a26881e930b6a7841f4f8ea7eb8285263ee50872a402428205582a9a8",
          "md5": "372b023cbe590e291268fddfb4356b12",
          "sha256": "bd2542f6186c65d8f990570d2ccfb93a5ff2a64c1eeced21fcfc16d898a0265e"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "372b023cbe590e291268fddfb4356b12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15702,
        "upload_time": "2021-11-22T06:22:21",
        "upload_time_iso_8601": "2021-11-22T06:22:21.942960Z",
        "url": "https://files.pythonhosted.org/packages/b0/51/0c7a26881e930b6a7841f4f8ea7eb8285263ee50872a402428205582a9a8/GraphicswithPython-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be9176c0c14051c1e498e8680bb4f20dcb40b809126735f3d38a0f36269aedcd",
          "md5": "c2844102efbf5d3884ed9d74f3e3f3d9",
          "sha256": "2c0ba988d7b938e8fbf6630cfd08311c611ffd3437a0376592f5c3c5efbd8937"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2844102efbf5d3884ed9d74f3e3f3d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12253,
        "upload_time": "2021-11-22T07:02:05",
        "upload_time_iso_8601": "2021-11-22T07:02:05.836546Z",
        "url": "https://files.pythonhosted.org/packages/be/91/76c0c14051c1e498e8680bb4f20dcb40b809126735f3d38a0f36269aedcd/GraphicswithPython-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3450ebc166085123e27b39b860adff0387ba84644935c3f9e9207c0195100c8",
          "md5": "844da4a2ce30a3d029d38a5364bde2a0",
          "sha256": "aabd0b5225abd7276ef7f7a32d6815a5bad63bb2a66ab9fbdf51c2e586ea4eaf"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "844da4a2ce30a3d029d38a5364bde2a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15902,
        "upload_time": "2021-11-22T07:02:08",
        "upload_time_iso_8601": "2021-11-22T07:02:08.554936Z",
        "url": "https://files.pythonhosted.org/packages/a3/45/0ebc166085123e27b39b860adff0387ba84644935c3f9e9207c0195100c8/GraphicswithPython-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46891e31817c751979ba1831274215897386994520cf8b649e4522abb43193cb",
          "md5": "5e88379c4fb115e2a5fad9d6755b8e5d",
          "sha256": "dc6e2910669d757846f35af1ace49269118da41fe7ea1ca22bd673cded0c9554"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e88379c4fb115e2a5fad9d6755b8e5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12277,
        "upload_time": "2021-11-22T10:02:41",
        "upload_time_iso_8601": "2021-11-22T10:02:41.904733Z",
        "url": "https://files.pythonhosted.org/packages/46/89/1e31817c751979ba1831274215897386994520cf8b649e4522abb43193cb/GraphicswithPython-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0cdf124dfb1a5a72cbe8f2128ef91b4cdf18df483904ada980a17a265200193",
          "md5": "e926737a8a2f80fc42ba3260823a7e36",
          "sha256": "7936c77c31674dad27639f37ad72250412a009618087837c8f8ade96c847018f"
        },
        "downloads": -1,
        "filename": "GraphicswithPython-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e926737a8a2f80fc42ba3260823a7e36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15916,
        "upload_time": "2021-11-22T10:02:46",
        "upload_time_iso_8601": "2021-11-22T10:02:46.530013Z",
        "url": "https://files.pythonhosted.org/packages/c0/cd/f124dfb1a5a72cbe8f2128ef91b4cdf18df483904ada980a17a265200193/GraphicswithPython-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1ddf545ba9afbb01872da94b09f4db5f7719e628f4ef03a6f8d67d4c948c9e5",
        "md5": "1a609ee23eb703d3caa7c3c86db824df",
        "sha256": "cde1614e3c47e29526310e927f1078d3dec7bcd819b12fd8c18e35f86fc590eb"
      },
      "downloads": -1,
      "filename": "GraphicswithPython-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1a609ee23eb703d3caa7c3c86db824df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13626,
      "upload_time": "2021-12-05T04:57:54",
      "upload_time_iso_8601": "2021-12-05T04:57:54.410950Z",
      "url": "https://files.pythonhosted.org/packages/c1/dd/f545ba9afbb01872da94b09f4db5f7719e628f4ef03a6f8d67d4c948c9e5/GraphicswithPython-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf829ee8904914f22573c836aef63cd4b4f2ab5e0b5043e1c07fb76ea44a9c32",
        "md5": "436cfab297b756d6f96660ed7fb51418",
        "sha256": "bee802112926d8dd6369a68811d5ba2012783a8edc0d7f3925bf77f0bd4ee43e"
      },
      "downloads": -1,
      "filename": "GraphicswithPython-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "436cfab297b756d6f96660ed7fb51418",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18361,
      "upload_time": "2021-12-05T04:57:57",
      "upload_time_iso_8601": "2021-12-05T04:57:57.025587Z",
      "url": "https://files.pythonhosted.org/packages/bf/82/9ee8904914f22573c836aef63cd4b4f2ab5e0b5043e1c07fb76ea44a9c32/GraphicswithPython-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}