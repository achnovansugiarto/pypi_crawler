{
  "info": {
    "author": "Flaviu Vadan",
    "author_email": "flaviu.vadan@dynotx.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Hera\n\n```text\nThe Argo was constructed by the shipwright Argus,\nand its crew were specially protected by the goddess Hera.\n```\n\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/argoproj-labs/hera-workflows)\n\n[![Build](https://github.com/argoproj-labs/hera-workflows/actions/workflows/cicd.yaml/badge.svg)](./.github/workflows/cicd.yaml)\n[![Docs](https://readthedocs.org/projects/hera-workflows/badge/?version=stable)](https://hera-workflows.readthedocs.io/en/stable/?badge=stable)\n[![codecov](https://codecov.io/gh/argoproj-labs/hera-workflows/branch/main/graph/badge.svg?token=x4tvsQRKXP)](https://codecov.io/gh/argoproj-labs/hera-workflows)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[![Pypi](https://img.shields.io/pypi/v/hera-workflows.svg)](https://pypi.python.org/pypi/hera-workflows)\n[![CondaForge](https://anaconda.org/conda-forge/hera-workflows/badges/version.svg)](https://anaconda.org/conda-forge/hera-workflows)\n[![Versions](https://img.shields.io/pypi/pyversions/hera-workflows.svg)](https://github.com/argoproj-labs/hera-workflows)\n\n[![Downloads](https://pepy.tech/badge/hera-workflows)](https://pepy.tech/project/hera-workflows)\n[![Downloads/month](https://pepy.tech/badge/hera-workflows/month)](https://pepy.tech/project/hera-workflows)\n[![Downloads/week](https://pepy.tech/badge/hera-workflows/week)](https://pepy.tech/project/hera-workflows)\n\n\nHera is a Python framework for constructing and submitting Argo Workflows. The main goal of Hera is to make the Argo ecosystem accessible by simplifying workflow construction and submission.\n\nYou can watch the introductory Hera presentation at the \"Argo Workflows and Events Community Meeting 20 Oct 2021\" [here](https://www.youtube.com/watch?v=QETfzfVV-GY&t=181s)!\n\n# Table of content\n\n- [Hera](#hera)\n- [Table of content](#table-of-content)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Examples](#examples)\n- [Contributing](#contributing)\n- [Comparison](#comparison)\n\n# Requirements\n\nHera requires an Argo server to be deployed to a Kubernetes cluster. Currently, Hera assumes that the Argo server sits behind an authentication layer that can authenticate workflow submission requests by using the Bearer token on the request. To learn how to deploy Argo to your own Kubernetes cluster you can follow the [Argo Workflows](https://argoproj.github.io/argo-workflows/quick-start/) guide!\n\nAnother option for workflow submission without the authentication layer is using port forwarding to your Argo server deployment and submitting workflows to `localhost:2746` (2746 is the default, but you are free to use yours). Please refer to the documentation of [Argo Workflows](https://argoproj.github.io/argo-workflows/quick-start/) to see the command for port forward!\n\n> **Note**\n> Since the deprecation of tokens being automatically created for ServiceAccounts and Argo using Bearer tokens in place,\n> it is necessary to use `--auth=server` and/or `--auth=client` when setting up Argo Workflows on Kubernetes v1.24+ \n> in order for hera-workflows to communicate to the Argo Server.\n\n# Installation\n\n| Source                                                         | Command                                                                                                        |\n|----------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|\n| [PyPi](https://pypi.org/project/hera-workflows/)               | `pip install hera-workflows`                                                                                   |\n| [Conda](https://anaconda.org/conda-forge/hera-workflows)       | `conda install -c conda-forge hera-workflows`                                                                  |\n| [GitHub repo](https://github.com/argoproj-labs/hera-workflows) | `python -m pip install git+https://github.com/argoproj-labs/hera-workflows --ignore-installed`/`pip install .` |\n\n# Examples\n\n### Single step script\n\n```python\nfrom hera.workflows import Steps, Workflow, script\n\n\n@script()\ndef echo(message: str):\n    print(message)\n\n\nwith Workflow(\n    generate_name=\"single-script-\",\n    entrypoint=\"steps\",\n) as w:\n    with Steps(name=\"steps\"):\n        echo(arguments={\"message\": \"A\"})\n\nw.create()\n\n```\n\n### DAG diamond\n\n```python\nfrom hera.workflows import DAG, Workflow, script\n\n\n@script()\ndef echo(message: str):\n    print(message)\n\n\nwith Workflow(\n    generate_name=\"dag-diamond-\",\n    entrypoint=\"diamond\",\n) as w:\n    with DAG(name=\"diamond\"):\n        A = echo(name=\"A\", arguments={\"message\": \"A\"})\n        B = echo(name=\"B\", arguments={\"message\": \"B\"})\n        C = echo(name=\"C\", arguments={\"message\": \"C\"})\n        D = echo(name=\"D\", arguments={\"message\": \"D\"})\n        A >> [B, C] >> D\n\nw.create()\n```\n\nSee the [examples](./examples/) directory for a collection of Argo workflow construction and submission via Hera!\n\n# Contributing\n\nIf you plan to submit contributions to Hera you can install Hera in a virtual environment managed by `poetry`:\n\n```shell\npoetry install\n```\n\nOnce the dependencies are installed, you can use the various `make` targets to replicate the `CI` jobs.\n\n```\nmake help\ncheck-codegen                  Check if the code is up to date\nci                             Run all the CI checks\ncodegen                        Generate all the code\nevents-models                  Generate the Events models portion of Argo Workflows\nevents-service                 Generate the events service option of Hera\nexamples                       Generate all the examples\nformat                         Format and sort imports for source, tests, examples, etc.\nhelp                           Showcase the help instructions for all the available `make` commands\nlint                           Run a `lint` process on Hera and report problems\nmodels                         Generate all the Argo Workflows models\nservices                       Generate the services of Hera\ntest                           Run tests for Hera\nworkflows-models               Generate the Workflows models portion of Argo Workflows\nworkflows-service              Generate the Workflows service option of Hera\n```\n\nAlso, see the [contributing guide](./CONTRIBUTING.md)!\n\n# Comparison\n\nThere have been other libraries available for structuring and submitting Argo Workflows:\n\n- [Couler](https://github.com/couler-proj/couler), which aimed to provide a unified interface for constructing and managing workflows on different workflow engines. It has now been unmaintained since its last commit in April 2022.\n- [Argo Python DSL](https://github.com/argoproj-labs/argo-python-dsl), which allows you to programmatically define Argo worfklows using Python. It was archived in October 2021.\n\nWhile the aforementioned libraries provided amazing functionality for Argo workflow construction and submission, they required an advanced understanding of Argo concepts. When [Dyno Therapeutics](https://dynotx.com) started using Argo Workflows, it was challenging to construct and submit experimental machine learning workflows. Scientists and engineers at [Dyno Therapeutics](https://dynotx.com) used a lot of time for workflow definition rather than the implementation of the atomic unit of execution - the Python function - that performed, for instance, model training.\n\nHera presents an intuitive Python interface to the underlying API of Argo, with custom classes making use of context managers and callables, empowering users to focus on their own executable payloads rather than workflow setup.\n\n<details><summary>Here's a side by side comparison of Hera, Couler, and Argo Python DSL</summary>\n\n\nYou will see how Hera has focused on reducing the complexity of Argo concepts while also reducing the total lines of code required to construct the `diamond` example, which can be <a href=\"https://github.com/argoproj/argo-workflows/blob/2a9bd6c83601990259fd5162edeb425741757484/examples/dag-diamond.yaml\">found in the upstream Argo repository</a>.\n\n\n<table>\n<tr><th>Hera</th><th>Couler</th><th>Argo Python DSL</th></tr>\n<tr>\n\n<td valign=\"top\"><p>\n\n```python\nfrom hera.workflows import DAG, Container, Parameter, Workflow\n\nwith Workflow(\n    generate_name=\"dag-diamond-\",\n    entrypoint=\"diamond\",\n) as w:\n    echo = Container(\n        name=\"echo\",\n        image=\"alpine:3.7\",\n        command=[\"echo\", \"{{inputs.parameters.message}}\"],\n        inputs=[Parameter(name=\"message\")],\n    )\n    with DAG(name=\"diamond\"):\n        A = echo(name=\"A\", arguments={\"message\": \"A\"})\n        B = echo(name=\"B\", arguments={\"message\": \"B\"})\n        C = echo(name=\"C\", arguments={\"message\": \"C\"})\n        D = echo(name=\"D\", arguments={\"message\": \"D\"})\n        A >> [B, C] >> D\n\nw.create()\n```\n\n</p></td>\n\n<td valign=\"top\"><p>\n\n```python\nimport couler.argo as couler\nfrom couler.argo_submitter import ArgoSubmitter\n\n\ndef job(name):\n    couler.run_container(\n        image=\"docker/whalesay:latest\",\n        command=[\"cowsay\"],\n        args=[name],\n        step_name=name,\n    )\n\n\ndef diamond():\n    couler.dag(\n        [\n            [lambda: job(name=\"A\")],\n            [lambda: job(name=\"A\"), lambda: job(name=\"B\")],  # A -> B\n            [lambda: job(name=\"A\"), lambda: job(name=\"C\")],  # A -> C\n            [lambda: job(name=\"B\"), lambda: job(name=\"D\")],  # B -> D\n            [lambda: job(name=\"C\"), lambda: job(name=\"D\")],  # C -> D\n        ]\n    )\n\n\ndiamond()\nsubmitter = ArgoSubmitter()\ncouler.run(submitter=submitter)\n```\n\n</p></td>\n\n<td valign=\"top\"><p>\n\n```python\nfrom argo.workflows.dsl import Workflow\n\nfrom argo.workflows.dsl.tasks import *\nfrom argo.workflows.dsl.templates import *\n\n\nclass DagDiamond(Workflow):\n\n    @task\n    @parameter(name=\"message\", value=\"A\")\n    def A(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"B\")\n    @dependencies([\"A\"])\n    def B(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"C\")\n    @dependencies([\"A\"])\n    def C(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"D\")\n    @dependencies([\"B\", \"C\"])\n    def D(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @template\n    @inputs.parameter(name=\"message\")\n    def echo(self, message: V1alpha1Parameter) -> V1Container:\n        container = V1Container(\n            image=\"alpine:3.7\",\n            name=\"echo\",\n            command=[\"echo\", \"{{inputs.parameters.message}}\"],\n        )\n\n        return container\n```\n\n</p></td>\n</tr>\n</table>\n</details>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/argoproj-labs/hera-workflows",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hera",
    "package_url": "https://pypi.org/project/hera/",
    "platform": null,
    "project_url": "https://pypi.org/project/hera/",
    "project_urls": {
      "Bug Tracker": "https://github.com/argoproj-labs/hera-workflows/issues",
      "Documentation": "https://github.com/argoproj-labs/hera-workflows/README.md",
      "Homepage": "https://github.com/argoproj-labs/hera-workflows",
      "Repository": "https://github.com/argoproj-labs/hera-workflows"
    },
    "release_url": "https://pypi.org/project/hera/5.0.0rc6/",
    "requires_dist": [
      "pydantic[email] (>=1.7,<2.0)",
      "pyyaml (>=6.0) ; extra == \"yaml\"",
      "requests"
    ],
    "requires_python": ">=3.8,<4",
    "summary": "Hera is a Python framework for constructing and submitting Argo Workflows. The main goal of Hera is to make Argo Workflows more accessible by abstracting away some setup that is typically necessary for constructing Argo workflows.",
    "version": "5.0.0rc6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17496583,
  "releases": {
    "5.0.0rc5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aac6f14b5f43060921565398bceef869f04c67f1a880453df0feade828ac6bd7",
          "md5": "7c6125f58ee77500a46eff6d132c0f6c",
          "sha256": "47a556bf0c0661f068fcaf5baf84c788ed814c670566a14f90244b255bfca0ef"
        },
        "downloads": -1,
        "filename": "hera-5.0.0rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c6125f58ee77500a46eff6d132c0f6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4",
        "size": 267182,
        "upload_time": "2023-03-27T17:44:30",
        "upload_time_iso_8601": "2023-03-27T17:44:30.399610Z",
        "url": "https://files.pythonhosted.org/packages/aa/c6/f14b5f43060921565398bceef869f04c67f1a880453df0feade828ac6bd7/hera-5.0.0rc5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f74260c0536e95c2bc7763459c9e6a7a28fe38850aeb21c37daaa6556d681556",
          "md5": "a301e60ada88da73d8b37f9d418b1288",
          "sha256": "0b8e98611334d0c5baae8d4193aeef3ffa960c6bebec6a04e6815fb9a54b3f8d"
        },
        "downloads": -1,
        "filename": "hera-5.0.0rc5.tar.gz",
        "has_sig": false,
        "md5_digest": "a301e60ada88da73d8b37f9d418b1288",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4",
        "size": 229484,
        "upload_time": "2023-03-27T17:44:32",
        "upload_time_iso_8601": "2023-03-27T17:44:32.423232Z",
        "url": "https://files.pythonhosted.org/packages/f7/42/60c0536e95c2bc7763459c9e6a7a28fe38850aeb21c37daaa6556d681556/hera-5.0.0rc5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.0rc6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4a3e526e4a0562445547d715a2f5f5641ef1a04844e0c98627a11b58d0607cc",
          "md5": "00052d152f038206edbaf30c1e3542bf",
          "sha256": "af9ab830ff64639116cf443c8028c549aeaa2d72bc193fd55d4bebfad2f3afdb"
        },
        "downloads": -1,
        "filename": "hera-5.0.0rc6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00052d152f038206edbaf30c1e3542bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4",
        "size": 268617,
        "upload_time": "2023-03-29T17:06:28",
        "upload_time_iso_8601": "2023-03-29T17:06:28.919128Z",
        "url": "https://files.pythonhosted.org/packages/e4/a3/e526e4a0562445547d715a2f5f5641ef1a04844e0c98627a11b58d0607cc/hera-5.0.0rc6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d52987c8c31d48147735be91ab4aa323aa023324fef1ec144499c268630e681",
          "md5": "afc84faaeb38556b7835dea9a3d18e43",
          "sha256": "822bc31547a2e4d0f68625cafdd2b92804c2baafd4c6f1c7549c2c6e4cefa76b"
        },
        "downloads": -1,
        "filename": "hera-5.0.0rc6.tar.gz",
        "has_sig": false,
        "md5_digest": "afc84faaeb38556b7835dea9a3d18e43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4",
        "size": 228979,
        "upload_time": "2023-03-29T17:06:30",
        "upload_time_iso_8601": "2023-03-29T17:06:30.548216Z",
        "url": "https://files.pythonhosted.org/packages/7d/52/987c8c31d48147735be91ab4aa323aa023324fef1ec144499c268630e681/hera-5.0.0rc6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4a3e526e4a0562445547d715a2f5f5641ef1a04844e0c98627a11b58d0607cc",
        "md5": "00052d152f038206edbaf30c1e3542bf",
        "sha256": "af9ab830ff64639116cf443c8028c549aeaa2d72bc193fd55d4bebfad2f3afdb"
      },
      "downloads": -1,
      "filename": "hera-5.0.0rc6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "00052d152f038206edbaf30c1e3542bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4",
      "size": 268617,
      "upload_time": "2023-03-29T17:06:28",
      "upload_time_iso_8601": "2023-03-29T17:06:28.919128Z",
      "url": "https://files.pythonhosted.org/packages/e4/a3/e526e4a0562445547d715a2f5f5641ef1a04844e0c98627a11b58d0607cc/hera-5.0.0rc6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d52987c8c31d48147735be91ab4aa323aa023324fef1ec144499c268630e681",
        "md5": "afc84faaeb38556b7835dea9a3d18e43",
        "sha256": "822bc31547a2e4d0f68625cafdd2b92804c2baafd4c6f1c7549c2c6e4cefa76b"
      },
      "downloads": -1,
      "filename": "hera-5.0.0rc6.tar.gz",
      "has_sig": false,
      "md5_digest": "afc84faaeb38556b7835dea9a3d18e43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4",
      "size": 228979,
      "upload_time": "2023-03-29T17:06:30",
      "upload_time_iso_8601": "2023-03-29T17:06:30.548216Z",
      "url": "https://files.pythonhosted.org/packages/7d/52/987c8c31d48147735be91ab4aa323aa023324fef1ec144499c268630e681/hera-5.0.0rc6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}