{
  "info": {
    "author": "Justin Engel",
    "author_email": "jtengel08@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "=================\npydantic_property\n=================\n\nAdded a field_property which gives property like functionality to pydantic models.\n\nNote:\n\n    Due to the way pydantic is written the field_property will be slow and inefficient.\n    Pydantic heavily uses and modifies the __dict__ attribute while overloading __setattr__.\n    Additionally, Pydantic's metaclass modifies the class __dict__ before class creation removing all\n    property objects from the class definition.\n    These changes prevent property objects and normal descriptors from working.\n\n    To work around this setting the field_property value must run the normal pydantic __setattr__,\n    run the object __setattr__ to call the property setter, and must update the __dict__ with all field_property values.\n    The Pydantic model __dict__ is only updated on __setattr__ and does not dynamically retrieve values.\n\n\nSimple Example\n==============\n\n.. code-block:: python\n\n    from pydantic import PrivateAttr\n    from pydantic_property import PropertyModel, field_property\n\n    class Props(PropertyModel):\n        x: int = field_property('_x', default=0)  # getter is created with '_x'\n\n        @x.setter\n        def x(self, value):\n            self._x = value  # Note: matches field_property('_x')\n\n        y: int = field_property('_y', default=0)  # Need to define '_y' for __private_attribute__\n\n        @y.getter\n        def y(self) -> int:\n            return getattr(self, '_y', 0)\n\n        @y.setter\n        def y(self, value):\n            if isinstance(value, float):\n                self._x = int((value % 1) * 10)  # Must update all field_property with __dict__ for _x to be seen\n            self._y = int(value)\n\n        # Does not have a __private_attribute__ so '_z' will fail. we hack this later for testing\n        @field_property(default=0)\n        def z(self):\n            return getattr(self, '_z', 0)\n\n        @z.setter\n        def z(self, value):\n            self._z = value\n\n        # Have to add private attribute to allow _z to work.\n        # z.private_name = '_z'\n        # or\n        _z = PrivateAttr(default=0)  # field_property.PrivateAttr\n\n    p = Props()\n    print(p)\n    p.x = 2\n    p.y = 1.5\n    print(p)\n\n    assert p.x == 5, '{} != {}'.format(p.x, 5)\n    assert p.y == 1, '{} != {}'.format(p.y, 1)\n\n    msg = p.dict()\n    assert p.x == msg['x'], '{} != {}'.format(p.x, msg['x'])\n    assert p.y == msg['y'], '{} != {}'.format(p.y, msg['y'])\n    assert p.z == msg['z'], '{} != {}'.format(p.z, msg['z'])\n\n\nPydantic Notes Example\n======================\n\nPydantic __dict__ Example below does not work, but shows what pydantic is doing in the background.\n\n.. code-block:: python\n\n    from pydantic import BaseModel, PrivateAttr\n\n    class MyModel(BaseModel):\n        x: int = 1\n\n        # Property doesn't really work. This is to show what pydantic does.\n        _y: int = PrivateAttr(default=1)\n\n        @property\n        def y(self):\n            return self._y\n\n        @y.setter\n        def y(self, value):\n            self._y = value\n\n        def set_point(self, x, y):\n            self.x = x\n            self._y = y\n\n    m = MyModel()\n    m.x = 2  # This actually sets self.__dict__['x'] = 2\n    assert m.dict() == {'x': 2}\n\n    m.y = 3  # Essentially this would change self.__dict__['y'] = 2\n    assert m.dict() == {'x': 2, 'y': 3}\n    assert m.__dict__ == {'x': 2, 'y': 3}\n\n    # This sets self.__dict__['x'] = 4 and the instance value m._y to 5, but does not change self.__dict__['y']\n    m.set_point(4, 5)\n    m.dict() == {'x': 4, 'y': 3}  # y is not updated ._y is 5. self.__dict__['y'] still == 3\n\n    # This is why field_property must update __dict__ for all field_property values.\n    # This makes the field_property inefficient.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/justengel/pydantic_property/archive/v0.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justengel/pydantic_property",
    "keywords": "pydantic property descriptor",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydantic-property",
    "package_url": "https://pypi.org/project/pydantic-property/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pydantic-property/",
    "project_urls": {
      "Download": "https://github.com/justengel/pydantic_property/archive/v0.0.1.tar.gz",
      "Homepage": "https://github.com/justengel/pydantic_property"
    },
    "release_url": "https://pypi.org/project/pydantic-property/0.0.1/",
    "requires_dist": [
      "pydantic (>=1.5.1)"
    ],
    "requires_python": "",
    "summary": "Property descriptors for Pydantic",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12008360,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35112051e76d04f39c3d255e6dd68dbe69d27936986edaa49866c4e19d2fb98f",
          "md5": "fdcff1d7c86f8cb9d74934d124bc1809",
          "sha256": "724d17dcae2c34a2b6c2d9f1d3eea93262234833a53ab878e05ee4e38b00808c"
        },
        "downloads": -1,
        "filename": "pydantic_property-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdcff1d7c86f8cb9d74934d124bc1809",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10016,
        "upload_time": "2021-11-12T19:11:12",
        "upload_time_iso_8601": "2021-11-12T19:11:12.951154Z",
        "url": "https://files.pythonhosted.org/packages/35/11/2051e76d04f39c3d255e6dd68dbe69d27936986edaa49866c4e19d2fb98f/pydantic_property-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "615dd36d2f43df3bb47fdd45a612aa71b3dea7c583975fa8df7256c72f066126",
          "md5": "f46d31f44db1bd5ac5fd868675bfc7ac",
          "sha256": "a91aa6554c8a96a21e807076c8710aeeccc065298cdb6bc63b1ae413c029498d"
        },
        "downloads": -1,
        "filename": "pydantic_property-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f46d31f44db1bd5ac5fd868675bfc7ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6775,
        "upload_time": "2021-11-12T19:11:14",
        "upload_time_iso_8601": "2021-11-12T19:11:14.590349Z",
        "url": "https://files.pythonhosted.org/packages/61/5d/d36d2f43df3bb47fdd45a612aa71b3dea7c583975fa8df7256c72f066126/pydantic_property-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35112051e76d04f39c3d255e6dd68dbe69d27936986edaa49866c4e19d2fb98f",
        "md5": "fdcff1d7c86f8cb9d74934d124bc1809",
        "sha256": "724d17dcae2c34a2b6c2d9f1d3eea93262234833a53ab878e05ee4e38b00808c"
      },
      "downloads": -1,
      "filename": "pydantic_property-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fdcff1d7c86f8cb9d74934d124bc1809",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10016,
      "upload_time": "2021-11-12T19:11:12",
      "upload_time_iso_8601": "2021-11-12T19:11:12.951154Z",
      "url": "https://files.pythonhosted.org/packages/35/11/2051e76d04f39c3d255e6dd68dbe69d27936986edaa49866c4e19d2fb98f/pydantic_property-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "615dd36d2f43df3bb47fdd45a612aa71b3dea7c583975fa8df7256c72f066126",
        "md5": "f46d31f44db1bd5ac5fd868675bfc7ac",
        "sha256": "a91aa6554c8a96a21e807076c8710aeeccc065298cdb6bc63b1ae413c029498d"
      },
      "downloads": -1,
      "filename": "pydantic_property-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f46d31f44db1bd5ac5fd868675bfc7ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6775,
      "upload_time": "2021-11-12T19:11:14",
      "upload_time_iso_8601": "2021-11-12T19:11:14.590349Z",
      "url": "https://files.pythonhosted.org/packages/61/5d/d36d2f43df3bb47fdd45a612aa71b3dea7c583975fa8df7256c72f066126/pydantic_property-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}