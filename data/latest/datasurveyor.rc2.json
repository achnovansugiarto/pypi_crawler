{
  "info": {
    "author": "Nick Buker",
    "author_email": "nickbuker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Datasurveyor\n\n## Author:\nNick Buker\n\n## Introduction:\nDatasurveyor is a small collection of tools for exploratory data analysis. It leverages Pandas, but the tools are able to ingest either DataFrames or Series. The output is a tidy DataFrame for easy viewing of results. Currently, datasurveyor focuses on rapidly identifying data quality issues, but the scope will likely expand as the package becomes \"battle tested\".\n\n## Table of contents:\n\n### Installing datasurveyor:\n[Datasurveyor installation instructions](#pip-installing-datasurveyor)\n\n### Using datasurveyor:\n[Datasurveyor use instructions](#using-datasurveyor)\n- [Binary features](#binary-features)\n    - [Importing BinaryFeatures](#binary-features-import)\n    - [Checking if all values the same](#binary-features-all-same)\n    - [Checking if values are mostly the same](#binary-features-mostly-same)\n    - [Checking the range](#binary-features-range)\n- [Categorical features](#categorical-features)\n    - [Importing CategoricalFeatures](#categorical-features-import)\n    - [Checking if values are mostly the same](#categorical-features-import)\n    - [Checking number of categories](#categorical-features-n-categories)\n- [General features](#general-features)\n    - [Importing GeneralFeatures](#general-features-import)\n    - [Checking for nulls](#general-features-nulls)\n    - [Checking for fuzzy nulls](#general-features-fuzzy-nulls)\n- [Unique features](#unique-features)\n    - [Importing UniqueFeatures](#unique-features-import)\n    - [Checking uniqueness](#unique-features-uniqueness)\n\n### Contributing and Testing:\n- [Contributing to datasurveyor](#survey-contrib)\n- [Testing datasurveyor](#datasurveyor-test)\n\n\n<a name=\"pip-installing-datasurveyor\"></a>\n\n## Installing datasurveyor:\nDatasurveyor can be install via pip. As always, use of a project-level virtual environment is recommended. **Note: Datasurveyor requires Python >= 3.6.**\n\n```bash\n$ pip install datasurveyor\n```\n\n\n<a name=\"using-datasurveyor\"></a>\n\n## Using Datasurveyor\n\nTo demonstrate the tools available in datasurveyor, let's use a Pandas DataFrame named `df`.\n\n|    |   id | name    | state   | platform   | app_inst   |   lylty |   spend |\n|---:|-----:|:--------|:--------|:-----------|:-----------|--------:|--------:|\n|  0 |    1 | Nick    | WA      | ios        | True       |       0 |       0 |\n|  1 |    2 | Gina    | OR      | android    | True       |       1 |     nan |\n|  2 |    3 | Rob     | WA      | ios        | False      |       0 |      10 |\n|  3 |    4 | Adam    | ID      | web        | True       |       1 |     150 |\n|  4 |    5 | Hanna   | WA      | ios        | True       |       1 |      12 |\n|  5 |    6 | Susan   | Null    | android    | False      |       0 |       0 |\n|  6 |    7 | Quentin | WA      | ios        | True       |       1 |     nan |\n|  7 |    8 | Caitlyn | unknown | web        | True       |       0 |       8 |\n|  8 |    9 | Matt    | WA      | web        | True       |       1 |      50 |\n|  9 |   10 | Nick    | WA      | ios        | True       |       0 |     -10 |\n\n\nA data dictionary for `df` is below.\n\n| column   | dtype   | description                |\n|:---------|:--------|:---------------------------|\n| id       | int64   | unique customer identifier |\n| name     | object  | customer name              |\n| state    | object  | state of residence         |\n| platform | object  | system platform            |\n| app_inst | bool    | app installation flag      |\n| lylty    | int64   | loyalty program flag       |\n| spend    | float64 | total customer spend       |\n\n\n<a name=\"binary-features\"></a>\n\n## Binary features\n\n### Description\nThe methods within `BinaryFeatures` are intended for use with binary data (data with two possible values). Datasurveyor expects binary features to be stored as bools or integers (with values of 0 or 1). In the example data, `app_inst` and `lylty` are binary features.\n\n\n<a name=\"binary-features-import\"></a>\n\n### Importing BinaryFeatures\nThe binary feature tools can be imported with the command below.\n\n```python\nfrom datasurveyor import BinaryFeatures as BF\n```\n\n\n<a name=\"binary-features-all-same\"></a>\n\n### Checking if all values the same\nThe `check_all_same` method can be used to check if binary features contain exclusively the same value. This method can be applied to a single binary feature or a collection of binary features.\n\n```python\nBF.check_all_same(df['app_inst'])\n```\n\n|    |   all_same |\n|---:|:-----------|\n|  0 | False      |\n\n```python\nBF.check_all_same(df[['app_inst', 'lylty']])\n```\n\n|    | column   | all_same   |\n|---:|:---------|:-----------|\n|  0 | app_inst | False      |\n|  1 | lylty    | False      |\n\n\n<a name=\"binary-features-mostly-same\"></a>\n\n### Checking if values are mostly the same\nThe `check_mostly_same` method can be used to check if binary features contain mostly the same value (default threshold 95%). This method can be applied to a single binary feature or a collection of binary features.\n\n```python\nBF.check_mostly_same(df['app_inst'])\n```\n\n|    | mostly_same   |   thresh |   mean |\n|---:|:--------------|---------:|-------:|\n|  0 | False         |     0.95 |    0.8 |\n\n```python\nBF.check_mostly_same(df[['app_inst', 'lylty']])\n```\n\n|    | column   | mostly_same   |   thresh |   mean |\n|---:|:---------|:--------------|---------:|-------:|\n|  0 | app_inst | False         |     0.95 |    0.8 |\n|  1 | lylty    | False         |     0.95 |    0.5 |\n\nThe user can specify whatever threshold is appropriate for their usecase. If `thresh=0.7` is applied, the method will flag features with at least 70% the same value.\n\n```python\nBF.check_mostly_same(df['app_inst'], thresh=0.7)\n```\n\n|    | mostly_same   |   thresh |   mean |\n|---:|:--------------|---------:|-------:|\n|  0 | True          |      0.7 |    0.8 |\n\n```python\nBF.check_mostly_same(df[['app_inst', 'lylty']], thresh=0.7)\n```\n\n|    | column   | mostly_same   |   thresh |   mean |\n|---:|:---------|:--------------|---------:|-------:|\n|  0 | app_inst | True          |      0.7 |    0.8 |\n|  1 | lylty    | False         |      0.7 |    0.5 |\n\n\n<a name=\"binary-features-range\"></a>\n\n### Checking the range\nThe `check_outside_range` method can be used to detect features with data outside the expected range of 0 and 1. Note that the outside of range condition is only possible for binary features encoded as integer data type.\n\n```python\nBF.check_outside_range(df['app_inst'])\n```\n\n|    |   outside_range |\n|---:|:----------------|\n|  0 | False           |\n\n```python\nBF.check_outside_range(df[['app_inst', 'lylty']])\n```\n\n|    | column   | outside_range   |\n|---:|:---------|:----------------|\n|  0 | app_inst | False           |\n|  1 | lylty    | False           |\n\n\n<a name=\"categorical-features\"></a>\n\n## Categorical features\n\n### Description\nThe methods within `CategoricalFeatures` are intended for use with categorical data (data denoting categories). Datasurveyor expects categorical features to be stored as object (string) or integer type. In the example data, `state` and `platform` are categorical features.\n\n<a name=\"categorical-features-import\"></a>\n\n### Importing CategoricalFeatures\nThe categorical feature tools can be imported with the command below.\n```python\nfrom datasurveyor import CategoricalFeatures as CF\n```\n\n<a name=\"categorical-features-mostly-same\"></a>\n\n### Checking if values are mostly the same\nThe `check_mostly_same` method can be used to check if categorical features contain mostly the same value (default threshold 95%). This method can be applied to a single categorical feature or a collection of categorical features.\n\n```python\nCF.check_mostly_same(df['state'])\n```\n\n|    | mostly_same   |   thresh | most_common   |   count |   prop |\n|---:|:--------------|---------:|:--------------|--------:|-------:|\n|  0 | False         |     0.95 | WA            |       6 |    0.6 |\n\n```python\nCF.check_mostly_same(df[['state', 'platform']])\n```\n\n|    | column   | mostly_same   |   thresh | most_common   |   count |   prop |\n|---:|:---------|:--------------|---------:|:--------------|--------:|-------:|\n|  0 | state    | False         |     0.95 | WA            |       6 |    0.6 |\n|  1 | platform | False         |     0.95 | ios           |       5 |    0.5 |\n\nThe user can specify whatever threshold is appropriate for their usecase. If `thresh=0.6` is applied, the method will flag features with at least 60% the same value.\n\n```python\nCF.check_mostly_same(df['state'], thresh=0.6)\n```\n\n|    | mostly_same   |   thresh | most_common   |   count |   prop |\n|---:|:--------------|---------:|:--------------|--------:|-------:|\n|  0 | True          |      0.6 | WA            |       6 |    0.6 |\n\n```python\nCF.check_mostly_same(df[['state', 'platform']], thresh=0.6)\n```\n\n|    | column   | mostly_same   |   thresh | most_common   |   count |   prop |\n|---:|:---------|:--------------|---------:|:--------------|--------:|-------:|\n|  0 | state    | True          |      0.6 | WA            |       6 |    0.6 |\n|  1 | platform | False         |      0.6 | ios           |       5 |    0.5 |\n\n\n<a name=\"categorical-features-n-categories\"></a>\n\n### Checking number of categories\nThe `n_categories` method can be used to count the number of categories. This method can be applied to a single categorical feature or a collection of categorical features.\n\n```python\nCF.check_n_categories(df['state'])\n```\n\n|    |   n_categories |\n|---:|---------------:|\n|  0 |              4 |\n\n```python\nCF.check_n_categories(df[['state', 'platform']])\n```\n\n|    | column   |   n_categories |\n|---:|:---------|---------------:|\n|  0 | state    |              4 |\n|  1 | platform |              3 |\n\n\n<a name=\"general-features\"></a>\n\n## General features\n\n### Description\nThe methods within `GeneralFeatures` are intended for use with any data. Datasurveyor expects inputs to be of type Pandas Series or DataFrame, but has no type expectations for the data within those structures.\n\n\n<a name=\"general-features-import\"></a>\n\n### Importing GeneralFeatures\nThe general feature tools can be imported with the command below.\n\n```python\nfrom datasurveyor import GeneralFeatures as GF\n```\n\n<a name=\"general-features-nulls\"></a>\n\n### Checking for nulls\nThe `check_nulls` method can be used to check for nulls. This method can be applied to a single feature or a collection of features.\n\n```python\nGF.check_nulls(df['spend'])\n```\n\n|    | nulls_present   |   null_count |   prop_null |\n|---:|:----------------|-------------:|------------:|\n|  0 | True            |            2 |         0.2 |\n\n```python\nGF.check_nulls(df)\n```\n\n|    | column   | nulls_present   |   null_count |   prop_null |\n|---:|:---------|:----------------|-------------:|------------:|\n|  0 | id       | False           |            0 |         0   |\n|  1 | name     | False           |            0 |         0   |\n|  2 | state    | False           |            0 |         0   |\n|  3 | platform | False           |            0 |         0   |\n|  4 | app_inst | False           |            0 |         0   |\n|  5 | lylty    | False           |            0 |         0   |\n|  6 | spend    | True            |            2 |         0.2 |\n\n\n<a name=\"general-features-fuzzy-nulls\"></a>\n\n### Checking for nulls\nThe `check_fuzzy_nulls` method can be used to check for values that commonly denote nulls. This method can be applied to a single feature or a collection of features.\n\n```python\nGF.check_fuzzy_nulls(df['state'])\n```\n\n|    | fuzzy_nulls_present   |   fuzzy_null_count |   prop_fuzzy_null |\n|---:|:----------------------|-------------------:|------------------:|\n|  0 | True                  |                  1 |               0.1 |\n\n```python\nGF.check_fuzzy_nulls(df)\n```\n\n|    | column   | fuzzy_nulls_present   |   fuzzy_null_count |   prop_fuzzy_null |\n|---:|:---------|:----------------------|-------------------:|------------------:|\n|  0 | id       | False                 |                  0 |               0   |\n|  1 | name     | False                 |                  0 |               0   |\n|  2 | state    | True                  |                  1 |               0.1 |\n|  3 | platform | False                 |                  0 |               0   |\n|  4 | app_inst | False                 |                  0 |               0   |\n|  5 | lylty    | False                 |                  0 |               0   |\n|  6 | spend    | False                 |                  0 |               0   |\n\nThe defaults items checked for are: 'null', 'Null', 'NULL', '' (empty string), and ' ' (single space). The user can specify additional items to check for using the `add_fuzzy_nulls` argument.\n\n```python\nGF.check_fuzzy_nulls(df['state'], add_fuzzy_nulls=['unknown'])\n```\n|    | fuzzy_nulls_present   |   fuzzy_null_count |   prop_fuzzy_null |\n|---:|:----------------------|-------------------:|------------------:|\n|  0 | True                  |                  2 |               0.2 |\n\n```python\nGF.check_fuzzy_nulls(df, add_fuzzy_nulls=['unknown'])\n```\n\n|    | column   | fuzzy_nulls_present   |   fuzzy_null_count |   prop_fuzzy_null |\n|---:|:---------|:----------------------|-------------------:|------------------:|\n|  0 | id       | False                 |                  0 |               0   |\n|  1 | name     | False                 |                  0 |               0   |\n|  2 | state    | True                  |                  2 |               0.2 |\n|  3 | platform | False                 |                  0 |               0   |\n|  4 | app_inst | False                 |                  0 |               0   |\n|  5 | lylty    | False                 |                  0 |               0   |\n|  6 | spend    | False                 |                  0 |               0   |\n\n\n<a name=\"unique-features\"></a>\n\n## Unique features\n\n### Description\nThe methods within `UniqueFeatures` are intended for use with data where each observation has a unique value. Datasurveyor expects unique features to be stored as datetime, object (string), or integer type. In the example data, `id` is a unique feature.\n\n\n<a name=\"unique-features-import\"></a>\n\n### Importing UniqueFeatures\nThe unique feature tools can be imported with the command below.\n\n```python\nfrom datasurveyor import UniqueFeatures as UF\n```\n\n\n<a name=\"unique-features-uniqueness\"></a>\n\n### Checking uniqueness\nThe `check_uniqueness` method can be used to check if potentially unique features contain unique values. This method can be applied to a single unique feature or a collection of unique features.\n\n```python\nUF.check_uniqueness(sample_df['id'])\n```\n\n|    | dupes_present   |   dupe_count |   prop_dupe |\n|---:|:----------------|-------------:|------------:|\n|  0 | False           |            0 |           0 |\n\n\n```python\nUF.check_uniqueness(df[['id', 'name']])\n```\n\n|    | column   | dupes_present   |   dupe_count |   prop_dupe |\n|---:|:---------|:----------------|-------------:|------------:|\n|  0 | id       | False           |            0 |         0   |\n|  1 | name     | True            |            1 |         0.1 |\n\n\n<a name=\"datasurveyor-contrib\"></a>\n\n## Contributing to datasurveyor\nIf you are interested in contributing to this project:\n1. Fork the [datasurveyor repo](https://github.com/nickbuker/datasurveyor).\n1. Clone the forked repository to your machine.\n1. Create a git branch.\n1. Make changes and push them to GitHub.\n1. Submit your changes for review by creating a pull request. In order to be approved changes should include:\n    - Appropriate updates to the `README.md`\n    - Google style docstrings\n    - Tests providing proper coverage of new code\n\n\n<a name=\"datasurveyor-test\"></a>\n\n## Testing\nFor those interested in contributing to datasurveyor forking and editing the project, pytest is the testing framework used. To run the tests, create a virtual environment, install the contents of `dev_requirements.txt`, and run the following command from the root directory of the project. The testing scripts can be found in the `tests/` directory.\n\n```bash\n$ pytest\n```\n\nTo run tests and view coverage, use the below command:\n\n```bash\n$ pytest --cov=datasurveyor\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nickbuker/datasurveyor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datasurveyor",
    "package_url": "https://pypi.org/project/datasurveyor/",
    "platform": "",
    "project_url": "https://pypi.org/project/datasurveyor/",
    "project_urls": {
      "Homepage": "https://github.com/nickbuker/datasurveyor"
    },
    "release_url": "https://pypi.org/project/datasurveyor/0.0.1/",
    "requires_dist": [
      "pandas >=1.0.4",
      "pytest >=5.4.3 ; extra == \"test\"",
      "pytest-cov >=2.10.0 ; extra == \"test\""
    ],
    "requires_python": "~=3.6,<4",
    "summary": "Data exploration tools.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7691951,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76fa141d1ec9415eecfb2a76fb55b1082dcf7f8f33a39789f1d82a2458d1eefb",
          "md5": "23ad6fd64979aecd3d94d8d7deee472a",
          "sha256": "2b2d0f08d2ceb854e61e2eda79314bb2b5cdfe7db65da95c17f88eda94c6d1ed"
        },
        "downloads": -1,
        "filename": "datasurveyor-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23ad6fd64979aecd3d94d8d7deee472a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.6,<4",
        "size": 9786,
        "upload_time": "2020-07-13T16:48:06",
        "upload_time_iso_8601": "2020-07-13T16:48:06.517122Z",
        "url": "https://files.pythonhosted.org/packages/76/fa/141d1ec9415eecfb2a76fb55b1082dcf7f8f33a39789f1d82a2458d1eefb/datasurveyor-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96a968327fab7bea67130e5e974cf7c0ecccefcd9df86988b2f90189bed3401",
          "md5": "e3239d4b7ac55e7db522af88acf0c41f",
          "sha256": "d18094825ed0618d4c9f929b23cb718e9f8751e1affbfbc9459654ed0f17d428"
        },
        "downloads": -1,
        "filename": "datasurveyor-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3239d4b7ac55e7db522af88acf0c41f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6,<4",
        "size": 13284,
        "upload_time": "2020-07-13T16:48:09",
        "upload_time_iso_8601": "2020-07-13T16:48:09.150530Z",
        "url": "https://files.pythonhosted.org/packages/d9/6a/968327fab7bea67130e5e974cf7c0ecccefcd9df86988b2f90189bed3401/datasurveyor-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84e11156f8ae4460d80dd9319508f714e9937761769e733ce0b8ba70a0ed6ce9",
          "md5": "bc5603b2f6b3cc4914afef743c964b93",
          "sha256": "70c0038396a3d362889f9bdce605b4751599afaa2ba65f61832beca7f0158cc0"
        },
        "downloads": -1,
        "filename": "datasurveyor-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc5603b2f6b3cc4914afef743c964b93",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.6,<4",
        "size": 9793,
        "upload_time": "2020-07-13T17:03:38",
        "upload_time_iso_8601": "2020-07-13T17:03:38.653863Z",
        "url": "https://files.pythonhosted.org/packages/84/e1/1156f8ae4460d80dd9319508f714e9937761769e733ce0b8ba70a0ed6ce9/datasurveyor-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af00de0c1960a789ed6310b04be461ba5aaa165f52198f274d21d91cdb78b162",
          "md5": "a300e7c16947e790386e129723d4edc8",
          "sha256": "0fa234a49569e9985ab8a1123728c50bb8e029873dace72dfbf5888a780f0c73"
        },
        "downloads": -1,
        "filename": "datasurveyor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a300e7c16947e790386e129723d4edc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6,<4",
        "size": 13287,
        "upload_time": "2020-07-13T17:03:40",
        "upload_time_iso_8601": "2020-07-13T17:03:40.400648Z",
        "url": "https://files.pythonhosted.org/packages/af/00/de0c1960a789ed6310b04be461ba5aaa165f52198f274d21d91cdb78b162/datasurveyor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84e11156f8ae4460d80dd9319508f714e9937761769e733ce0b8ba70a0ed6ce9",
        "md5": "bc5603b2f6b3cc4914afef743c964b93",
        "sha256": "70c0038396a3d362889f9bdce605b4751599afaa2ba65f61832beca7f0158cc0"
      },
      "downloads": -1,
      "filename": "datasurveyor-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc5603b2f6b3cc4914afef743c964b93",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.6,<4",
      "size": 9793,
      "upload_time": "2020-07-13T17:03:38",
      "upload_time_iso_8601": "2020-07-13T17:03:38.653863Z",
      "url": "https://files.pythonhosted.org/packages/84/e1/1156f8ae4460d80dd9319508f714e9937761769e733ce0b8ba70a0ed6ce9/datasurveyor-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af00de0c1960a789ed6310b04be461ba5aaa165f52198f274d21d91cdb78b162",
        "md5": "a300e7c16947e790386e129723d4edc8",
        "sha256": "0fa234a49569e9985ab8a1123728c50bb8e029873dace72dfbf5888a780f0c73"
      },
      "downloads": -1,
      "filename": "datasurveyor-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a300e7c16947e790386e129723d4edc8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6,<4",
      "size": 13287,
      "upload_time": "2020-07-13T17:03:40",
      "upload_time_iso_8601": "2020-07-13T17:03:40.400648Z",
      "url": "https://files.pythonhosted.org/packages/af/00/de0c1960a789ed6310b04be461ba5aaa165f52198f274d21d91cdb78b162/datasurveyor-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}