{
  "info": {
    "author": "",
    "author_email": "Ju Lin <soasme@example.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# peg.py\n\nPeg.py is a Parsing Expression Grammar (PEG) parser written in pure Python.\n\n## Install\n\nYou can install peg.py by running:\n\n```bash\n$ pip install peg.py\n```\n\n## Example Usage\n\nYou can build a `Grammar` and call its `parse` method to get the parse tree.\n\n```python\nfrom peg import Grammar\n\ngreeter = Grammar(\"\"\"\n    greet   <- \"Hello, \" someone\n    someone <- [a-zA-Z0-9]\n\"\"\")\n\ninput = \"Hello, world\"\ntree = greeter.parse(input)\n```\n\nPeg.py provides a tree visitor `NodeVisitor`. You an inherit this class and define your own `visit_` methods to handle your parse tree. Each `visit_` method handles a rule, such as `visit_greet`, `visit_someone`.\n\n```python\nclass GreeterVisitor(NodeVisitor):\n\n    def visit_greet(self, node, children):\n    \treturn ('Hello', children[0])\n\n    def visit_someone(self, node, _):\n        return node.text\n\nvisitor = GreeterVisitor(greeter)\nresult = visitor.visit(tree)\n\nprint(result)\n```\n\nThe program should produce such a result:\n\n```\n('Hello', 'world')\n```\n\n## Syntax\n\nA **grammar** consists of a set of rules.\n\nA **rule** consists of a name, a left arrow, and a pattern.\n\n```\nname <- pattern\n```\n\nA **name** starts with alphabets or underscore, followed by alphabets or digits or underscore.\n\n```\nvalid\nValid\n_valid\n0nay \t// invalid\n```\n\nA **pattern** contains one or more of the elements mentioned below.\n\n\nA **literal** is a string enclosed in double quotes or single quotes. For example, `\"hello\"`, `'hello'`. Peg.py matches the input as-is.\n\nA **set** is a set of characters enclosed in square brackets. Any pairs of characters having dash (`-`) in-between represents all characters from the first to the second (inclusive). For example, `[a-z]`, `[a-zA-Z0-9]`, `[a-zA-Z$_]`.\n\nA **dot** (`.`) is for any character, except end-of-text.\n\n`( pattern )` groups pattern with parentheses.\n\n`< pattern >` captures input text associating with an unnamed rule.\n\n`pattern?` means `pattern` is optional.\n\n`pattern+` means `pattern` occuring one or more times.\n\n`pattern*` means `pattern` occuring zero or more times.\n\n`&pattern` checks if pattern matches the input. If so, consume no input. Otherwise, the parse is failed.\n\n`!pattern` checks if pattern does not match the input. If so, consume no input. Otherwise, the parse is failed.\n\nSeveral patterns can be written one after another, like `pattern1 pattern2 pattern3`. The sequence matches only when each underlying pattern matches.\n\nSeveral patterns joined by slash (`/`), like `pattern1 / pattern2 / pattern3`, is ordered choices of patterns. The choices matches when any one of the underlying pattern matches.\n\n`# ignored. ` is a comment.\n\n### PEG Grammar For PEG Grammars\n\n```\nGrammar         <- Spacing Definition+ EndOfFile\n\nDefinition      <- Identifier LEFTARROW Expression\nExpression      <- Sequence ( SLASH Sequence )*\nSequence        <- Prefix*\nPrefix          <- ( AND / NOT )? Suffix\nSuffix          <- Primary ( QUERY / STAR / PLUS )?\nPrimary         <- Identifier !LEFTARROW\n                 / OPEN Expression CLOSE\n                 / Literal\n                 / Class\n                 / DOT\n                 / Action\n                 / BEGIN\n                 / END\n\nIdentifier      <- < IdentStart IdentCont* > Spacing\nIdentStart      <- [a-zA-Z_]\nIdentCont       <- IdentStart / [0-9]\nLiteral         <- ['] < ( !['] Char  )* > ['] Spacing\n                 / [\"] < ( ![\"] Char  )* > [\"] Spacing\nClass           <- '[' < ( !']' Range )* > ']' Spacing\nRange           <- Char '-' Char / Char\nChar            <- '\\\\' [abefnrtv'\"\\[\\]\\\\]\n                 / '\\\\' [0-3][0-7][0-7]\n                 / '\\\\' [0-7][0-7]?\n                 / '\\\\' '-'\n                 / !'\\\\' .\nLEFTARROW       <- '<-' Spacing\nSLASH           <- '/' Spacing\nAND             <- '&' Spacing\nNOT             <- '!' Spacing\nQUERY           <- '?' Spacing\nSTAR            <- '*' Spacing\nPLUS            <- '+' Spacing\nOPEN            <- '(' Spacing\nCLOSE           <- ')' Spacing\nDOT             <- '.' Spacing\nSpacing         <- ( Space / Comment )*\nComment         <- '#' ( !EndOfLine . )* EndOfLine\nSpace           <- ' ' / '\\t' / EndOfLine\nEndOfLine       <- '\\r\\n' / '\\n' / '\\r'\nEndOfFile       <- !.\nBEGIN           <- '<' Spacing\nEND             <- '>' Spacing\n```\n\n## References\n\n* Peg.py provides identical PEG syntax as described in [Bryan Ford's PEG Paper](https://bford.info/pub/lang/peg.pdf).\n* Peg.py implements a simplied VM similar to [lpeg](http://www.inf.puc-rio.br/~roberto/lpeg/).\n* Peg.py provides a similar API (`Grammar`, `Grammar.parse()`, `NodeVisitor`, etc) with [parsimonious](https://github.com/erikrose/parsimonious).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peg.py",
    "package_url": "https://pypi.org/project/peg.py/",
    "platform": null,
    "project_url": "https://pypi.org/project/peg.py/",
    "project_urls": {
      "Bug Tracker": "https://github.com/soasme/peg.py/issues",
      "Homepage": "https://github.com/soasme/peg.py"
    },
    "release_url": "https://pypi.org/project/peg.py/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A Parsing Expression Grammar (PEG) Parser Written in Pure Python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15829898,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68fbd468f3e568b175014cda94af159f4b9c333e05c5da122e2f6b5b379827f8",
          "md5": "4f28f7e60a0f2ebe47a14f561331a6d5",
          "sha256": "c63e9c390491872a07c0314cf0bbb830b75b875af2f9e39145efcd110e982849"
        },
        "downloads": -1,
        "filename": "peg.py-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f28f7e60a0f2ebe47a14f561331a6d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3639,
        "upload_time": "2022-11-19T09:52:05",
        "upload_time_iso_8601": "2022-11-19T09:52:05.388500Z",
        "url": "https://files.pythonhosted.org/packages/68/fb/d468f3e568b175014cda94af159f4b9c333e05c5da122e2f6b5b379827f8/peg.py-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a873c8d737da88376e8dbc4db6b400ab5134b9b11b416c17cf679fed7174071",
          "md5": "b71cfef95e03812aba0e2ab9cf981a44",
          "sha256": "0e4d4e8942d7bc64d753ec8783c70ff9dbbb53375f9890993612d8a6560343ce"
        },
        "downloads": -1,
        "filename": "peg.py-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b71cfef95e03812aba0e2ab9cf981a44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3826,
        "upload_time": "2022-11-20T10:03:09",
        "upload_time_iso_8601": "2022-11-20T10:03:09.098372Z",
        "url": "https://files.pythonhosted.org/packages/0a/87/3c8d737da88376e8dbc4db6b400ab5134b9b11b416c17cf679fed7174071/peg.py-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a873c8d737da88376e8dbc4db6b400ab5134b9b11b416c17cf679fed7174071",
        "md5": "b71cfef95e03812aba0e2ab9cf981a44",
        "sha256": "0e4d4e8942d7bc64d753ec8783c70ff9dbbb53375f9890993612d8a6560343ce"
      },
      "downloads": -1,
      "filename": "peg.py-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b71cfef95e03812aba0e2ab9cf981a44",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 3826,
      "upload_time": "2022-11-20T10:03:09",
      "upload_time_iso_8601": "2022-11-20T10:03:09.098372Z",
      "url": "https://files.pythonhosted.org/packages/0a/87/3c8d737da88376e8dbc4db6b400ab5134b9b11b416c17cf679fed7174071/peg.py-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}