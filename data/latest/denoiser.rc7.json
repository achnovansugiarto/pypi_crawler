{
  "info": {
    "author": "Alexandre DÃ©fossez",
    "author_email": "alexandre.defossez@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Multimedia :: Sound/Audio :: Speech",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Real Time Speech Enhancement in the Waveform Domain (Interspeech 2020)\n\n![tests badge](https://github.com/facebookresearch/denoiser/workflows/tests/badge.svg)\n\nWe provide a [PyTorch][pytorch] implementation of the paper: [Real Time Speech Enhancement in the Waveform Domain][arxiv].\nIn which, we present a causal speech enhancement model working on the raw waveform that runs in real-time on a laptop CPU.\nThe proposed model is based on an encoder-decoder architecture with skip-connections. It is optimized on both time and frequency domains, using multiple loss functions.\nEmpirical evidence shows that it is capable of removing various kinds of background noise including stationary and non-stationary noises, as well as room reverb.\nAdditionally, we suggest a set of data augmentation techniques applied directly on the raw waveform which further improve model performance and its generalization abilities.\n\nAudio samples can be found here: [Samples][web]\n\n<p align=\"center\">\n<img src=\"./img/demucs.png\" alt=\"Schema representing the structure of Demucs,\n    with a convolutional encoder, an LSTM, and a decoder based on transposed convolutions.\"\nwidth=\"50%\"></p>\n\n\nThe proposed model is based on the Demucs architecture, originally proposed for music source-separation: ([Paper][demucs-ppr], [Code][demucs-code]).\n\n## Installation\n\nFirst, install Python 3.7 (recommended with Anaconda).\n\n#### Through pip (you just want to use pre-trained model out of the box)\n\nJust run\n```bash\npip install denoiser\n```\n\n#### Development (if you want to train or hack around)\n\nClone this repository and install the dependencies. We recommend using\na fresh virtualenv or Conda environment.\n\n```bash\ngit clone https://github.com/facebookresearch/denoiser\ncd denoiser\npip install -r requirements.txt  # If you don't have cuda\npip install -r requirements_cuda.txt  # If you have cuda\n```\n\n## Live Speech Enhancement\n\nIf you want to use `denoiser` live (for a Skype call for instance), you will\nneed a specific loopback audio interface.\n\n### Mac OS X\n\nOn Mac OS X, this is provided by [Soundflower][soundflower].\nFirst install Soundflower, and then you can just run\n\n```bash\npython -m denoiser.live\n```\n\nIn your favorite video conference call application, just select \"Soundflower (2ch)\"\nas input to enjoy your denoised speech.\n\nWatch our live demo presentation in the following link: [Demo][demo].\n\n### Linux (tested on Ubuntu 20.04)\n\nYou can use the `pacmd` command and the `pavucontrol` tool:\n- run the following commands:\n```bash\npacmd load-module module-null-sink sink_name=denoiser\npacmd update-sink-proplist denoiser device.description=denoiser\n```\nThis will add a `Monitor of Null Output` to the list of microphones to use. Select it as input in your software. \n- Launch the `pavucontrol` tool. In the _Playback_ tab, after launching \n`python -m denoiser.live --out INDEX_OR_NAME_OF_LOOPBACK_IFACE` and the software you want to denoise for (here an in-browser call), you should see both applications. For *denoiser* interface as Playback destination which will output the processed audio stream on the sink we previously created.\n<p align=\"center\">\n<img src=\"./img/pavucontrol.png\" alt=\"pavucontrol window and parameters to use.\"\nwidth=\"50%\"></p>\n\n\n### Other platforms\n\nAt the moment, we do not provide official support for other OSes. However, if you\nhave a a soundcard that supports loopback (for instance Steinberg products), you can try\nto make it work. You can list the available audio interfaces with `python -m sounddevice`.\nThen once you have spotted your loopback interface, just run\n```bash\npython -m denoiser.live --out INDEX_OR_NAME_OF_LOOPBACK_IFACE\n```\nBy default, `denoiser` will use the default audio input. You can change that with the `--in` flag.\n\nNote that on Windows you will need to replace `python` by `python.exe`.\n\n\n### Troubleshooting bad quality in separation\n\n`denoiser` can introduce distortions for very high level of noises.\nAudio can become crunchy if your computer is not fast enough to process audio in real time.\nIn that case, you will see an error message in your terminal warning you that `denoiser`\nis not processing audio fast enough. You can try exiting all non required applications.\n\n`denoiser` was tested on a Mac Book Pro with an 2GHz quadcore Intel i5 with DDR4 memory.\nYou might experience issues with DDR3 memory. In that case you can trade overall latency for speed by processing multiple frames at once. To do so, run\n```\npython -m denoiser.live -f 2\n```\nYou can increase to `-f 3` or more if needed, but each increase will add 16ms of extra latency.\n\n\n### Denoising received speech\n\nYou can also denoise received speech, but you won't be able to both denoise your own speech\nand the received speech (unless you have a really beefy computer and enough loopback\naudio interfaces). This can be achieved by selecting the loopback interface as\nthe audio output of your VC software and then running\n```bash\npython -m denoiser.live --in \"Soundflower (2ch)\" --out \"NAME OF OUT IFACE\"\n```\n\n## Training and evaluation\n\n### Quick Start with Toy Example\n\n1. Run `sh make_debug.sh` to generate json files for the toy dataset.\n2. Run `python train.py`\n\n### Configuration\n\nWe use [Hydra][hydra] to control all the training configurations. If you are not familiar with Hydra\nwe recommend visiting the Hydra [website][hydra-web].\nGenerally, Hydra is an open-source framework that simplifies the development of research applications\nby providing the ability to create a hierarchical configuration dynamically.\n\nThe config file with all relevant arguments for training our model can be found under the `conf` folder.\nNotice, under the `conf` folder, the `dset` folder contains the configuration files for\nthe different datasets. You should see a file named `debug.yaml` with the relevant configuration for the debug sample set.\n\nYou can pass options through the\ncommand line, for instance `./train.py demucs.hidden=32`.\nPlease refer to [conf/config.yaml](conf/config.yaml) for a reference of the possible options.\nYou can also directly edit the `config.yaml` file, although this is not recommended\ndue to the way experiments are automatically named, as explained hereafter.\n\n### Checkpointing\n\nEach experiment will get a unique name based on the command line options you passed.\nRestarting the same command will reuse the existing folder and automatically\nstart from a previous checkpoint if possible. In order to ignore previous checkpoints,\nyou must pass the `restart=1` option.\nNote that options like `device`, `num_workers`, etc. have no influence on the experiment name.\n\n\n### Setting up a new dataset\n\nIf you want to train using a new dataset, you can:\n1. Create a separate config file for it.\n2. Place the new config files under the `dset` folder. Check [conf/dset/debug.yaml](conf/dset/debug.yaml)\nfor more details on configuring your dataset.\n3. Point to it either in the general config file or via the command line, e.g. `./train.py dset=name_of_dset`.\n\nYou also need to generate the relevant `.json`files in the `egs/`folder.\nFor that purpose you can use the `python -m denoiser.audio` command that will\nscan the given folders and output the required metadata as json.\nFor instance, if your noisy files are located in `$noisy` and the clean files in `$clean`, you can do\n\n```bash\nout=egs/mydataset/tr\nmkdir -p $out\npython -m denoiser.audio $noisy > $out/noisy.json\npython -m denoiser.audio $clean > $out/clean.json\n```\n\n## Usage\n\n### 1. Data Structure\nThe data loader reads both clean and noisy json files named: `clean.json` and `noisy.json`. These files should contain all the paths to the wav files to be used to optimize and test the model along with their size (in frames).\nYou can use `python -m denoiser.audio FOLDER_WITH_WAV1 [FOLDER_WITH_WAV2 ...] > OUTPUT.json` to generate those files.\nYou should generate the above files for both training and test sets (and validation set if provided). Once this is done, you should create a yaml (similarly to `conf/dset/debug.yaml`) with the dataset folders' updated paths.\nPlease check [conf/dset/debug.yaml](conf/dset/debug.yaml) for more details.\n\n\n### 2. Training\nTraining is simply done by launching the `train.py` script:\n\n```\n./train.py\n```\n\nThis scripts read all the configurations from the `conf/config.yaml` file.\n\n#### Distributed Training\n\nTo launch distributed training you should turn on the distributed training flag. This can be done as follows:\n\n```\n./train.py ddp=1\n```\n\n#### Logs\n\nLogs are stored by default in the `outputs` folder. Look for the matching experiment name.\nIn the experiment folder you will find the `best.th` serialized model, the training checkpoint `checkpoint.th`,\nand well as the log with the metrics `trainer.log`. All metrics are also extracted to the `history.json`\nfile for easier parsing. Enhancements samples are stored in the `samples` folder (if `noisy_dir` or `noisy_json`\nis set in the dataset).\n\n#### Fine tuning\n\nYou can fine-tune one of the 3 pre-trained models `dns48`, `dns64` and `master64`. To do so:\n```\n./train.py continue_pretrained=dns48\n./train.py continue_pretrained=dns64 demucs.hidden=64\n./train.py continue_pretrained=master64 demucs.hidden=64\n```\n\n### 3. Evaluating\n\nEvaluating the models can be done by:\n\n```\npython -m denoiser.evaluate --model_path=<path to the model> --data_dir=<path to folder containing noisy.json and clean.json>\n```\nNote that the path given to `--model_path` should be obtained from one of the `best.th` file, not `checkpoint.th`.\nIt is also possible to use pre-trained model, using either `--dns48`, `--dns64`or `--master64`.\nFor more details regarding possible arguments, please see:\n\n```\nusage: denoiser.evaluate [-h] [-m MODEL_PATH | --dns48 | --dns64 | --master64]\n                         [--device DEVICE] [--dry DRY]\n                         [--num_workers NUM_WORKERS] [--streaming]\n                         [--data_dir DATA_DIR] [--matching MATCHING]\n                         [--no_pesq] [-v]\n\nSpeech enhancement using Demucs - Evaluate model performance\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODEL_PATH, --model_path MODEL_PATH\n                        Path to local trained model.\n  --dns48               Use pre-trained real time H=48 model trained on DNS.\n  --dns64               Use pre-trained real time H=64 model trained on DNS.\n  --master64            Use pre-trained real time H=64 model trained on DNS\n                        and Valentini.\n  --device DEVICE\n  --dry DRY             dry/wet knob coefficient. 0 is only input signal, 1\n                        only denoised.\n  --num_workers NUM_WORKERS\n  --streaming           true streaming evaluation for Demucs\n  --data_dir DATA_DIR   directory including noisy.json and clean.json files\n  --matching MATCHING   set this to dns for the dns dataset.\n  --no_pesq             Don't compute PESQ.\n  -v, --verbose         More loggging\n```\n\n### 4. Denoising\n\nGenerating the enhanced files can be done by:\n\n```\npython -m denoiser.enhance --model_path=<path to the model> --noisy_dir=<path to the dir with the noisy files> --out_dir=<path to store enhanced files>\n```\nNotice, you can either provide `noisy_dir` or `noisy_json` for the test data.\nNote that the path given to `--model_path` should be obtained from one of the `best.th` file, not `checkpoint.th`.\nIt is also possible to use pre-trained model, using either `--dns48`, `--dns64`or `--master64`.\n For more details regarding possible arguments, please see:\n```\nusage: denoiser.enhance [-h] [-m MODEL_PATH | --dns48 | --dns64 | --master64]\n                        [--device DEVICE] [--dry DRY]\n                        [--num_workers NUM_WORKERS] [--streaming]\n                        [--out_dir OUT_DIR] [--batch_size BATCH_SIZE] [-v]\n                        [--noisy_dir NOISY_DIR | --noisy_json NOISY_JSON]\n\nSpeech enhancement using Demucs - Generate enhanced files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODEL_PATH, --model_path MODEL_PATH\n                        Path to local trained model.\n  --dns48               Use pre-trained real time H=48 model trained on DNS.\n  --dns64               Use pre-trained real time H=64 model trained on DNS.\n  --master64            Use pre-trained real time H=64 model trained on DNS\n                        and Valentini.\n  --device DEVICE\n  --dry DRY             dry/wet knob coefficient. 0 is only input signal, 1\n                        only denoised.\n  --num_workers NUM_WORKERS\n  --streaming           true streaming evaluation for Demucs\n  --out_dir OUT_DIR     directory putting enhanced wav files\n  --batch_size BATCH_SIZE\n                        batch size\n  -v, --verbose         more loggging\n  --noisy_dir NOISY_DIR\n                        directory including noisy wav files\n  --noisy_json NOISY_JSON\n                        json file including noisy wav files\n```\n\n### 5. Reproduce Results\n\nHere we provide a detailed description of how to reproduce the results from the paper:\n#### Valentini dataset\n1. Download [Valentini dataset][valentini].\n2. Adapt the Valentini config file and run the processing script.\n3. Generate the egs/ files as explained here after.\n4. Launch the training using the `launch_valentini.sh` (or `launch_valentini_nc.sh` for non causal) script.\n\n\n**Important:** unlike what we stated in the paper, the causal models were trained with a weight of 0.1\nfor the STFT loss, not 0.5.\n\nTo create the egs/ file, adapt and run the following code\n```bash\nnoisy_train=path to valentini\nclean_train=path to valentini\nnoisy_test=path to valentini\nclean_test=path to valentini\nnoisy_dev=path to valentini\nclean_dev=path to valentini\n\nmkdir -p egs/val/tr\nmkdir -p egs/val/cv\nmkdir -p egs/val/tt\n\npython -m denoiser.audio $noisy_train > egs/val/tr/noisy.json\npython -m denoiser.audio $clean_train > egs/val/tr/clean.json\n\npython -m denoiser.audio $noisy_test > egs/val/tt/noisy.json\npython -m denoiser.audio $clean_test > egs/val/tt/clean.json\n\npython -m denoiser.audio $noisy_dev > egs/val/cv/noisy.json\npython -m denoiser.audio $clean_dev > egs/val/cv/clean.json\n```\n\n#### DNS dataset\n1. Download both [DNS dataset][dns], be sure to use the interspeech2020 branch.\n2. Setup the paths in the DNS config file to suit your setup and run the processing script.\n3. Generate the egs/ files as explained here after.\n4. Launch the training using the `launch_dns.sh` script.\n\nTo create the egs/ file, adapt and run the following code\n```bash\ndns=path to dns\nnoisy=path to processed noisy\nclean=path to processed clean\ntestset=$dns/datasets/test_set\nmkdir -p egs/dns/tr\npython -m denoiser.audio $noisy > egs/dns/tr/noisy.json\npython -m denoiser.audio $clean > egs/dns/tr/clean.json\n\nmkdir -p egs/dns/tt\npython -m denoiser.audio $testset/synthetic/no_reverb/noisy $testset/synthetic/with_reverb/noisy > egs/dns/tt/noisy.json\npython -m denoiser.audio $testset/synthetic/no_reverb/clean $testset/synthetic/with_reverb/clean > egs/dns/tt/clean.json\n```\n\n## Online Evaluation\nOur online implementation is based on pure python code with some optimization of the streaming convolutions and transposed convolutions.\nWe benchmark this implementation on a quad-core Intel i5 CPU at 2 GHz.\nThe Real-Time Factor (RTF) of the proposed models are:\n\n| Model | Threads | RTF  |\n|-------|---------|------|\n| H=48  | 1       | 0.8  |\n| H=64  | 1       | 1.2  |\n| H=48  | 4       | 0.6  |\n| H=64  | 4       | 1.0  |\n\n\nIn order to compute the RTF on your own CPU launch the following command:\n```\npython -m denoiser.demucs --hidden=48 --num_threads=1\n```\nThe output should be something like this:\n```\ntotal lag: 41.3ms, stride: 16.0ms, time per frame: 12.2ms, delta: 0.21%, RTF: 0.8\n```\nFeel free to explore different settings, i.e. bigger models and more CPU-cores.\n\n\n## Citation\nIf you use the code in your paper, then please cite it as:\n```\n@inproceedings{defossez2020real,\n  title={Real Time Speech Enhancement in the Waveform Domain},\n  author={Defossez, Alexandre and Synnaeve, Gabriel and Adi, Yossi},\n  booktitle={Interspeech},\n  year={2020}\n}\n```\n\n## License\nThis repository is released under the CC-BY-NC 4.0. license as found in the [LICENSE](LICENSE) file.\n\nThe file `denoiser/stft_loss.py` was adapted from the [kan-bayashi/ParallelWaveGAN][wavegan] repository. It is an unofficial implementation of the [ParallelWaveGAN][wavegan-paper] paper, released under the MIT License.\nThe file `scripts/matlab_eval.py` was adapted from the [santi-pdp/segan_pytorch][segan] repository. It is an unofficial implementation of the [SEGAN][segan-paper] paper, released under the MIT License.\n\n[arxiv]: https://arxiv.org/abs/2006.12847\n[web]: https://facebookresearch.github.io/denoiser/\n[pytorch]: https://pytorch.org/\n[valentini]: https://datashare.is.ed.ac.uk/handle/10283/2791\n[dns]:https://github.com/microsoft/DNS-Challenge/blob/interspeech2020/master/\n[hydra]: https://github.com/facebookresearch/hydra\n[hydra-web]: https://hydra.cc/\n[soundflower]: https://github.com/mattingalls/Soundflower\n[wavegan]: https://github.com/kan-bayashi/ParallelWaveGAN\n[segan]: https://github.com/santi-pdp/segan_pytorch\n[wavegan-paper]: https://arxiv.org/pdf/1910.11480.pdf\n[segan-paper]: https://arxiv.org/pdf/1703.09452.pdf\n[demucs-code]: https://github.com/facebookresearch/demucs\n[demucs-ppr]: https://hal.archives-ouvertes.fr/hal-02379796/document\n[demo]: https://www.youtube.com/watch?v=77cm_MVtLfk",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/facebookresearch/denoiser",
    "keywords": "",
    "license": "Creative Commons Attribution-NonCommercial 4.0 International",
    "maintainer": "",
    "maintainer_email": "",
    "name": "denoiser",
    "package_url": "https://pypi.org/project/denoiser/",
    "platform": null,
    "project_url": "https://pypi.org/project/denoiser/",
    "project_urls": {
      "Homepage": "https://github.com/facebookresearch/denoiser"
    },
    "release_url": "https://pypi.org/project/denoiser/0.1.5/",
    "requires_dist": null,
    "requires_python": ">=3.7.0",
    "summary": "Speech enhancement in the waveform domain. Supports offline and streaming evaluation. Implementation for https://arxiv.org/abs/2006.12847. For training, please directly clone the github repository.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14273749,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d96c0b721b7d3d659d7432bfe6f371a2ee50a71ed69c01e99498092790ea26",
          "md5": "f38b555cc4464fc11f565fcaba09af2f",
          "sha256": "0ff07e8104de20caf10418a03846959127745019e7a6996ebb237cf32bd8695c"
        },
        "downloads": -1,
        "filename": "denoiser-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f38b555cc4464fc11f565fcaba09af2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 2360,
        "upload_time": "2020-08-05T13:41:04",
        "upload_time_iso_8601": "2020-08-05T13:41:04.634781Z",
        "url": "https://files.pythonhosted.org/packages/82/d9/6c0b721b7d3d659d7432bfe6f371a2ee50a71ed69c01e99498092790ea26/denoiser-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09b31ab92b437c3065280a9c87efbf837300b0a7389e4727a69b8ffb813b5f2e",
          "md5": "f8c60dba93330195d12b353d69f74be2",
          "sha256": "f2494726666c3530e04053aef309e85f9edf6c2cdcee0f92f8ad531effcc6910"
        },
        "downloads": -1,
        "filename": "denoiser-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f8c60dba93330195d12b353d69f74be2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 1702,
        "upload_time": "2020-08-05T13:41:07",
        "upload_time_iso_8601": "2020-08-05T13:41:07.707749Z",
        "url": "https://files.pythonhosted.org/packages/09/b3/1ab92b437c3065280a9c87efbf837300b0a7389e4727a69b8ffb813b5f2e/denoiser-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f85dd5cd652b184cf77157a8a83761657854cd3c9eab8724d4898c5672cd2ef1",
          "md5": "235c759d713599ac445ff89c267bf54d",
          "sha256": "40fcfba65b815e0d5fbebddbf62bf8ca155bca9144eb644f6c5a434fb7a97cba"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "235c759d713599ac445ff89c267bf54d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 40875,
        "upload_time": "2020-09-01T08:40:34",
        "upload_time_iso_8601": "2020-09-01T08:40:34.830628Z",
        "url": "https://files.pythonhosted.org/packages/f8/5d/d5cd652b184cf77157a8a83761657854cd3c9eab8724d4898c5672cd2ef1/denoiser-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e297176441fb8d253436e0ab72d3c7dcead658016d17b698d5b7f52251c0d5f",
          "md5": "907165315661ba36b189b0b9bc434b9f",
          "sha256": "03b76bd3c83cba1fce5b380027978c879042c167cd77827e8bfc61b791b58459"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "907165315661ba36b189b0b9bc434b9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 45232,
        "upload_time": "2020-09-01T08:40:36",
        "upload_time_iso_8601": "2020-09-01T08:40:36.339967Z",
        "url": "https://files.pythonhosted.org/packages/1e/29/7176441fb8d253436e0ab72d3c7dcead658016d17b698d5b7f52251c0d5f/denoiser-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d23977dd13ede8d239f9275b2f7c3b0d3265e758dff3fad8a4f7dea8deea14a2",
          "md5": "4d55d9ec9468a7d49a0f730af201f32d",
          "sha256": "e0a30910d05ca3b61afb164ff957ebfb0bc8a5d1e2aff582ed0a492a03970bfc"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d55d9ec9468a7d49a0f730af201f32d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 41146,
        "upload_time": "2020-09-01T12:09:20",
        "upload_time_iso_8601": "2020-09-01T12:09:20.146153Z",
        "url": "https://files.pythonhosted.org/packages/d2/39/77dd13ede8d239f9275b2f7c3b0d3265e758dff3fad8a4f7dea8deea14a2/denoiser-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4b8f7a3175740502682b19e3f7a22175b75136cf796ffe7f581092ca1eb6e2c",
          "md5": "256fbdcfa2eb0d5ce095dc380c6d4e3e",
          "sha256": "0a00054e7e7ca7b205824b51fa1c7a5bc6481a068937dea2bce2762d283ce025"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "256fbdcfa2eb0d5ce095dc380c6d4e3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 45439,
        "upload_time": "2020-09-01T12:09:21",
        "upload_time_iso_8601": "2020-09-01T12:09:21.556276Z",
        "url": "https://files.pythonhosted.org/packages/d4/b8/f7a3175740502682b19e3f7a22175b75136cf796ffe7f581092ca1eb6e2c/denoiser-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "470e8b8def28eb0de1673267f957478e48a480f2d88972c6ecbd3857284fb3e9",
          "md5": "677bbb6a870a1cb82a876160aefa2d93",
          "sha256": "4de402482e03e75585cb8c04a87313816acb9b180174194bacd07f63c190f5c6"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "677bbb6a870a1cb82a876160aefa2d93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 41024,
        "upload_time": "2020-09-03T18:09:08",
        "upload_time_iso_8601": "2020-09-03T18:09:08.055190Z",
        "url": "https://files.pythonhosted.org/packages/47/0e/8b8def28eb0de1673267f957478e48a480f2d88972c6ecbd3857284fb3e9/denoiser-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a35f6beefa0b1cf424c268ff956ab8a96d8f7eaeae48b42ea2e508d6826673e2",
          "md5": "a5fca22e41e5546f224b8fef50a3bc63",
          "sha256": "bcec376357cc4c30752bf81891d84930d528dbc45dbac4dae2f1b0ceb63fc49e"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a5fca22e41e5546f224b8fef50a3bc63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 44853,
        "upload_time": "2020-09-03T18:09:10",
        "upload_time_iso_8601": "2020-09-03T18:09:10.034785Z",
        "url": "https://files.pythonhosted.org/packages/a3/5f/6beefa0b1cf424c268ff956ab8a96d8f7eaeae48b42ea2e508d6826673e2/denoiser-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "818d51aaf0058d2da921f88e535cc2afa301ee99891928d45d863c0b5e4596d7",
          "md5": "d8fd6023fb3c22b645462eb2d2d0217b",
          "sha256": "9efcf1fe6dee45deac40bf5df8d17042eaa842eacbb8af10ac6df3b8f7b92daf"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d8fd6023fb3c22b645462eb2d2d0217b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 47043,
        "upload_time": "2020-10-22T10:16:51",
        "upload_time_iso_8601": "2020-10-22T10:16:51.420400Z",
        "url": "https://files.pythonhosted.org/packages/81/8d/51aaf0058d2da921f88e535cc2afa301ee99891928d45d863c0b5e4596d7/denoiser-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "847cd4aaec0b3b933ab17913d9f1da2f05c965a1b814aef7e3a9fc92d5463b7d",
          "md5": "fc1c8db5a445023c8cc9d37b461bac5b",
          "sha256": "013f4c111dd699a3677496d19b4e8dd49d4130726e76c1daebc6b70655774800"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fc1c8db5a445023c8cc9d37b461bac5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 48603,
        "upload_time": "2021-04-06T09:13:06",
        "upload_time_iso_8601": "2021-04-06T09:13:06.382134Z",
        "url": "https://files.pythonhosted.org/packages/84/7c/d4aaec0b3b933ab17913d9f1da2f05c965a1b814aef7e3a9fc92d5463b7d/denoiser-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bad13bfc4d0f4e9af97950deec31a018ddf7b09fd56a4cabeebf22d7450e175",
          "md5": "fe21cf801fd5427c398087cb6aadc169",
          "sha256": "f8a6a67838872d9c374a3565eb9bf04b6212a60b37f00b14cbd1e2441124cccd"
        },
        "downloads": -1,
        "filename": "denoiser-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fe21cf801fd5427c398087cb6aadc169",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 49764,
        "upload_time": "2022-06-28T14:17:12",
        "upload_time_iso_8601": "2022-06-28T14:17:12.395717Z",
        "url": "https://files.pythonhosted.org/packages/5b/ad/13bfc4d0f4e9af97950deec31a018ddf7b09fd56a4cabeebf22d7450e175/denoiser-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bad13bfc4d0f4e9af97950deec31a018ddf7b09fd56a4cabeebf22d7450e175",
        "md5": "fe21cf801fd5427c398087cb6aadc169",
        "sha256": "f8a6a67838872d9c374a3565eb9bf04b6212a60b37f00b14cbd1e2441124cccd"
      },
      "downloads": -1,
      "filename": "denoiser-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "fe21cf801fd5427c398087cb6aadc169",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 49764,
      "upload_time": "2022-06-28T14:17:12",
      "upload_time_iso_8601": "2022-06-28T14:17:12.395717Z",
      "url": "https://files.pythonhosted.org/packages/5b/ad/13bfc4d0f4e9af97950deec31a018ddf7b09fd56a4cabeebf22d7450e175/denoiser-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}