{
  "info": {
    "author": "Gergo Szabo (aka) hunasdf",
    "author_email": "szager88@hmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Hardware :: Hardware Drivers",
      "Topic :: System :: Monitoring"
    ],
    "description": "PyADL\n=====\n\nA simple Python Wrapper for the AMD/ATI ADL lib.\n\nLibrary usage\n=============\n\nFirst, import:\n\n.. code-block:: python\n\n    from pyadl import *\n\nTo get the supported devices list\n\nReturn: Array of ADLDevice\n\n.. code-block:: python\n\n    ADLManager.getInstance().getDevices()\n\nFor the following methods, device is an instance of ADLDevice.\n\nGet the current core voltage in mV\n\nReturn: Float\n\n.. code-block:: python\n\n    device.getCurrentCoreVoltage()\n\nGet the current engine frequency in MHz\n\nReturn: Float\n\n.. code-block:: python\n\n    device.getCurrentEngineClock()\n\nGet the current fan speed in a specified unit\n\nParameters:\n\n* speedType: ADL_DEVICE_FAN_SPEED_TYPE_PERCENTAGE or ADL_DEVICE_FAN_SPEED_TYPE_RPM\n\nReturn: Integer\n\n.. code-block:: python\n\n    device.getCurrentFanSpeed(speedType):\n\nGet the current memory frequency in MHz\n\nReturn: Float\n\n.. code-block:: python\n\n    device.getCurrentMemoryClock()\n\nGet the current temperature in Celsius\n\nReturn: Float\n\n.. code-block:: python\n\n    device.getCurrentTemperature()\n\nGet the current load in percentage\n\nReturn: Integer\n\n.. code-block:: python\n\n    device.getCurrentUsage():\n\nGet the core voltage range\n\nParameters:\n\n* reload: Force reload the cached data. Default: False\n\nReturn: (Min: Float, Max: Float)\n\n.. code-block:: python\n\n    device.getCoreVoltageRange(reload):\n\nGet the engine clock frequency range\n\nParameters:\n\n* reload: Force reload the cached data. Default: False\n\nReturn: (Min: Float, Max: Float)\n\n.. code-block:: python\n\n    device.getEngineClockRange(reload):\n\nGet the fan speed range in the specified unit\n\nParameters:\n\n* speedType: ADL_DEVICE_FAN_SPEED_TYPE_PERCENTAGE or ADL_DEVICE_FAN_SPEED_TYPE_RPM\n* reload: Force reload the cached data. Default: False\n\nReturn: (Min: Integer, Max: Integer)\n\n.. code-block:: python\n\n    device.getFanSpeedRange(speedType, reload):\n\nGet the memory clock frequency range (Min, Max)\n\nParameters:\n\n* reload: Force reload the cached data. Default: False\n\nReturn: (Min: Float, Max: Float)\n\n.. code-block:: python\n\n    device.getMemoryClockRange(reload):\n\nFor testing\n===========\n\n.. code-block:: console\n\n    $ python test.py\n    Options:\n      -h, --help           show this help message and exit\n      -l, --list-adapters  Lists all detected and supported display adapters.\n      -s, --status         Shows current clock speeds, core voltage, utilization\n                           and performance level.\n\nOn a single card machine:\n\n.. code-block:: console\n\n    $ python test.py -s\n    0. AMD Radeon (TM) R9 380 Series\n          Engine core voltage: -2076327552 mV (0.0 mV - 0.0 mV)\n          Engine clock: 975.54 MHz (150.0 MHz - 1200.0 MHz)\n          Memory clock: 1400.0 MHz (75.0 MHz - 1750.0 MHz)\n          Fan speed: 65 % (0 % - 100 %)\n          Fan speed: 2958 RPM (0 RPM - 6000 RPM)\n          Temperature: 77.0 Celsius\n          Usage: 100 %\n\nOn a miner rig with 5 RX 460:\n\n.. code-block:: python\n\n    python test.py -s\n    0. b'Radeon(TM) RX 460 Graphics'\n        Engine core voltage: 1230037376 mV (0.0 mV - 0.0 mV)\n        Engine clock: 1168.0 MHz (110.0 MHz - 1800.0 MHz)\n        Memory clock: 1750.0 MHz (150.0 MHz - 2000.0 MHz)\n        Fan speed: 35 % (0 % - 100 %)\n        Fan speed: 1042 RPM (0 RPM - 4600 RPM)\n        Temperature: 69.0 Celsius\n        Usage: 100 %\n    16. b'Radeon(TM) RX 460 Graphics'\n        Engine core voltage: 757416320 mV (0.0 mV - 0.0 mV)\n        Engine clock: 1142.11 MHz (110.0 MHz - 1800.0 MHz)\n        Memory clock: 1750.0 MHz (150.0 MHz - 2000.0 MHz)\n        Fan speed: 34 % (0 % - 100 %)\n        Fan speed: 984 RPM (0 RPM - 4600 RPM)\n        Temperature: 69.0 Celsius\n        Usage: 100 %\n    32. b'Radeon(TM) RX 460 Graphics'\n        Engine core voltage: 1230037376 mV (0.0 mV - 0.0 mV)\n        Engine clock: 1153.96 MHz (110.0 MHz - 1800.0 MHz)\n        Memory clock: 1750.0 MHz (150.0 MHz - 2000.0 MHz)\n        Fan speed: 33 % (0 % - 100 %)\n        Fan speed: 989 RPM (0 RPM - 4600 RPM)\n        Temperature: 70.0 Celsius\n        Usage: 100 %\n    48. b'Radeon(TM) RX 460 Graphics'\n        Engine core voltage: 1230037376 mV (0.0 mV - 0.0 mV)\n        Engine clock: 1098.78 MHz (110.0 MHz - 1800.0 MHz)\n        Memory clock: 1750.0 MHz (150.0 MHz - 2000.0 MHz)\n        Fan speed: 33 % (0 % - 100 %)\n        Fan speed: 851 RPM (0 RPM - 4600 RPM)\n        Temperature: 72.0 Celsius\n        Usage: 100 %\n    64. b'Radeon(TM) RX 460 Graphics'\n        Engine core voltage: 1230037376 mV (0.0 mV - 0.0 mV)\n        Engine clock: 1162.41 MHz (110.0 MHz - 1800.0 MHz)\n        Memory clock: 1750.0 MHz (150.0 MHz - 2000.0 MHz)\n        Fan speed: 33 % (0 % - 100 %)\n        Fan speed: 858 RPM (0 RPM - 4600 RPM)\n        Temperature: 67.0 Celsius\n        Usage: 100 %\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicolargo/pyadl",
    "keywords": "amd ati driver wrapper monitoring gpu",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyadl",
    "package_url": "https://pypi.org/project/pyadl/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyadl/",
    "project_urls": {
      "Homepage": "https://github.com/nicolargo/pyadl"
    },
    "release_url": "https://pypi.org/project/pyadl/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Python Wrapper for the AMD/ATI ADL lib.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3449564,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46b2f0181e334dd97949f7112467d4b16d346aa759dcf3da793c8eb58f0ce0b",
          "md5": "0b249f82a515e8be41f19af917782401",
          "sha256": "8c76c809cfdcb1c40eb2af1dfb3fbb5c265d0431fa3c1645cb65709e353f9d87"
        },
        "downloads": -1,
        "filename": "pyadl-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b249f82a515e8be41f19af917782401",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24648,
        "upload_time": "2017-12-29T09:16:10",
        "upload_time_iso_8601": "2017-12-29T09:16:10.851333Z",
        "url": "https://files.pythonhosted.org/packages/d4/6b/2f0181e334dd97949f7112467d4b16d346aa759dcf3da793c8eb58f0ce0b/pyadl-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d46b2f0181e334dd97949f7112467d4b16d346aa759dcf3da793c8eb58f0ce0b",
        "md5": "0b249f82a515e8be41f19af917782401",
        "sha256": "8c76c809cfdcb1c40eb2af1dfb3fbb5c265d0431fa3c1645cb65709e353f9d87"
      },
      "downloads": -1,
      "filename": "pyadl-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0b249f82a515e8be41f19af917782401",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24648,
      "upload_time": "2017-12-29T09:16:10",
      "upload_time_iso_8601": "2017-12-29T09:16:10.851333Z",
      "url": "https://files.pythonhosted.org/packages/d4/6b/2f0181e334dd97949f7112467d4b16d346aa759dcf3da793c8eb58f0ce0b/pyadl-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}