{
  "info": {
    "author": "",
    "author_email": "Qujamlee <qujamlee@126.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# 1 安装SDK\r\n\r\n1. **版本说明**\r\n\r\n   > - 在安装SDK之前，请确认已经正确安装**3.7.0**及以上版本Python环境，下载地址[www.python.org](https://www.python.org/ftp/python/)，推荐参考[Python3安装教程](https://www.runoob.com/python3/python3-install.html)\r\n   > - 当前SDK版本：**`1.0.2`**\r\n\r\n2. **安装指令**\r\n\r\n   > 以Windows为例，打开可调用Python3的命令行终端，键入以下命令安装或更新SDK：\r\n   >\r\n   > ```bash\r\n   > pip install AztClient  # 安装指令\r\n   > pip install --upgrade AztClient # 更新指令\r\n   > \r\n   > # MacOS和Linux环境下可能需要使用\"pip3\"代替\"pip\"进行安装\r\n   > ```\r\n\r\n3. **指定安装源**\r\n\r\n   > SDK所有的更新都会提交到[PyPI](https://pypi.org/)（Python官方源），项目地址：[AztClient · PyPI](https://pypi.org/project/AztClient/)\r\n   >\r\n   > 若使用[http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) 等国内镜像源时，可能会延迟收到最新版本，因此建议使用官方源下载和更新SDK：\r\n   >\r\n   > ```bash\r\n   > # 只有在默认使用国内镜像源时才需要指定pypi镜像源\r\n   > pip install AztClient -i https://pypi.org/simple\r\n   > pip install --upgrade AztClient -i https://pypi.org/simple\r\n   > ```\r\n   >\r\n   > - 如何判断是否默认使用国内镜像源\r\n   >\r\n   >   ```bash\r\n   >   pip config list\r\n   >   # 如果命令执行后没有出现任何内容则说明默认使用pypi官方源\r\n   >   # 反之则会显示当前正在使用的镜像源\r\n   >   ```\r\n\r\n4. **手动安装**\r\n\r\n   > 若无法通过`pip`命令安装最新版本SDK，也可以直接从开源地址中下载安装\r\n   >\r\n   > SDK开源地址：[https://gitee.com/Qujamlee/azt-client](https://gitee.com/Qujamlee/azt-client)\r\n   >\r\n   > - 方法1 - 直接拷贝源文件（需要安装`git`工具，推荐参考[Git安装教程](https://www.runoob.com/git/git-install-setup.html)）\r\n   >\r\n   >   ```bash\r\n   >   git clone https://gitee.com/Qujamlee/azt-client.git\r\n   >   cd azt-client\r\n   >   # 拷贝AztClient到需要使用的目录即可\r\n   >   ```\r\n   >\r\n   > - 方法2 - 安装发行版（[发行版下载](https://gitee.com/Qujamlee/azt-client/releases/download/v1.0.0/AztClient-1.0.0-py3-none-any.whl)）\r\n   >\r\n   >   ```bash\r\n   >   # 首先要下载发行版（比如其名称为AztClient-1.0.0-py3-none-any.whl）\r\n   >   # 下载完成后在发行版文件目录中打开终端，输入：\r\n   >   pip install ./AztClient-1.0.0-py3-none-any.whl  # 安装\r\n   >   ```\r\n\r\n\r\n\r\n---\r\n\r\n\r\n\r\n# 2 数据结构\r\n\r\n## 2.1 TradeSpi响应数据类\r\n\r\n### 2.1.1 AccDepositAck - 账户入金响应\r\n\r\n| 属性       | 类型            | 说明                                                        |\r\n| ---------- | --------------- | ----------------------------------------------------------- |\r\n| acc_margin | AccMargin       | 账户资产信息                                                |\r\n| error_code | EDepositRetCode | 入金错误返回码，具体含义与取值参见枚举常量`EDepositRetCode` |\r\n\r\n### 2.1.2 AccMargin - 账户资产信息\r\n\r\n| 属性                   | 类型  | 说明         |\r\n| ---------------------- | ----- | ------------ |\r\n| account                | str   | 账户ID       |\r\n| total_amount           | float | 账户总资金   |\r\n| available_amount       | float | 账户可用资金 |\r\n| deposit                | float | 账户入金总额 |\r\n| open_balance           | float | 期初结存     |\r\n| trade_frozen_margin    | float | 交易冻结金额 |\r\n| position_market_amount | float | 持仓市值     |\r\n| total_buy_amount       | float | 买入总金额   |\r\n| total_buy_fee          | float | 买入总手续费 |\r\n| total_sell_amount      | float | 卖出总金额   |\r\n| total_sell_fee         | float | 卖出总手续费 |\r\n\r\n### 2.1.3 CancelOrder - 撤单信息\r\n\r\n| 属性         | 类型              | 说明                           |\r\n| ------------ | ----------------- | ------------------------------ |\r\n| client_ref   | str               | 本地订单编号，由客户端自动生成 |\r\n| sender_user  | str               | 账户标识，由系统自动生成       |\r\n| account      | str               | 账户ID                         |\r\n| org_order_id | str               | 需要撤销的委托订单编号         |\r\n| send_time    | datetime.datetime | 发送时间，由系统自动生成       |\r\n\r\n### 2.1.4 CancelOrderReject - 撤单拒绝回报信息\r\n\r\n| 属性          | 类型              | 说明                                                       |\r\n| ------------- | ----------------- | ---------------------------------------------------------- |\r\n| client_ref    | str               | 本地订单编号，由客户端自动生成                             |\r\n| org_order_id  | str               | 撤单交易平台委托订单编号                                   |\r\n| reject_reason | ECxRejReasonType  | 撤单拒绝原因，具体含义与取值参见枚举常量`ECxRejReasonType` |\r\n| report_time   | datetime.datetime | 回报时间，由系统自动生成                                   |\r\n\r\n### 2.1.5 HisDeposit - 历史入金信息\r\n\r\n| 属性            | 类型              | 说明                               |\r\n| --------------- | ----------------- | ---------------------------------- |\r\n| settlement_date | datetime.datetime | 结算日期                           |\r\n| account         | str               | 账户ID                             |\r\n| client_ref      | str               | 本地入金请求编号，由客户端自动生成 |\r\n| deposit         | float             | 入金金额                           |\r\n\r\n### 2.1.6 OrdReport - 委托回报信息\r\n\r\n| 属性        | 类型         | 说明             |\r\n| ----------- | ------------ | ---------------- |\r\n| place_order | PlaceOrder   | 委托订单信息     |\r\n| status_msg  | OrdStatusMsg | 委托订单状态信息 |\r\n\r\n### 2.1.7 OrdStatusMsg - 委托订单状态信息\r\n\r\n| 属性          | 类型               | 说明                                                     |\r\n| ------------- | ------------------ | -------------------------------------------------------- |\r\n| order_status  | EOrderStatus       | 委托订单执行状态，具体含义与取值见枚举常量`EOrderStatus` |\r\n| traded_qty    | int                | 订单交易数量，以股等基础单位为单位                       |\r\n| traded_amount | float              | 订单交易金额                                             |\r\n| total_fee     | float              | 订单交易手续费                                           |\r\n| frozen_margin | float              | 订单对账户冻结金额                                       |\r\n| frozen_price  | float              | 订单对账户冻结价格                                       |\r\n| reject_reason | EOrderRejectReason | 拒单原因，具体含义与取值参见枚举常量`EOrderRejectReason` |\r\n| report_time   | datetime.datetime  | 回报时间，由系统自动生成                                 |\r\n\r\n### 2.1.8 PlaceOrder - 委托订单信息\r\n\r\n| 属性             | 类型              | 说明                                                         |\r\n| ---------------- | ----------------- | ------------------------------------------------------------ |\r\n| client_ref       | str               | 本地订单编号，由客户端自动生成                               |\r\n| sender_user      | str               | 账户标识，由系统自动生成                                     |\r\n| account          | str               | 账户ID                                                       |\r\n| market           | str               | 交易所代码                                                   |\r\n| code             | str               | 标的代码                                                     |\r\n| order_type       | EOrderType        | 委托类型，具体含义与取值参见枚举常量`EOrderType`             |\r\n| business_type    | EBusinessType     | 业务类型，具体含义与取值参见枚举常量`EBusinessType`          |\r\n| order_side       | EOrderSide        | 买入卖出委托方向，具体含义与取值参见枚举常量`EOrderSide`     |\r\n| effect           | EPositionEffect   | 开仓平仓委托方向，具体含义与取值参见枚举常量`EPositionEffect` |\r\n| order_price      | float             | 委托价格，适用于限价单                                       |\r\n| order_qty        | int               | 委托数量                                                     |\r\n| order_id         | str               | 订单编号，由服务端自动生成                                   |\r\n| discretion_price | float             | 市价委托转限价委托时采用的限价                               |\r\n| send_time        | datetime.datetime | 发送时间，由系统自动生成                                     |\r\n\r\n### 2.1.9 QryHisAccAck - 历史资产信息查询\r\n\r\n| 属性        | 类型            | 说明                 |\r\n| ----------- | --------------- | -------------------- |\r\n| acc_margins | list[AccMargin] | 账户历史资产信息列表 |\r\n\r\n### 2.1.10 QryHisDepositAck - 历史入金信息查询\r\n\r\n| 属性         | 类型             | 说明                 |\r\n| ------------ | ---------------- | -------------------- |\r\n| his_deposits | list[HisDeposit] | 账户历史入金信息列表 |\r\n\r\n### 2.1.11 QueryOrdersAck - 委托查询响应\r\n\r\n| 属性          | 类型            | 说明             |\r\n| ------------- | --------------- | ---------------- |\r\n| order_reports | list[OrdReport] | 委托回报信息列表 |\r\n\r\n### 2.1.12 QueryPositionsAck - 持仓查询响应\r\n\r\n| 属性      | 类型                | 说明         |\r\n| --------- | ------------------- | ------------ |\r\n| positions | list[StockPosition] | 持仓信息列表 |\r\n\r\n### 2.1.13 QueryTradesAck - 交易明细查询响应\r\n\r\n| 属性          | 类型              | 说明             |\r\n| ------------- | ----------------- | ---------------- |\r\n| trade_reports | list[TradeReport] | 成交回报信息列表 |\r\n\r\n### 2.1.14 StockPosition - 持仓信息\r\n\r\n| 属性              | 类型  | 说明             |\r\n| ----------------- | ----- | ---------------- |\r\n| account           | str   | 账户ID           |\r\n| market            | str   | 交易所代码       |\r\n| code              | str   | 标的             |\r\n| total_qty         | int   | 持有总数量       |\r\n| today_qty         | int   | 今日新增持有数量 |\r\n| open_avg_price    | float | 成本价格         |\r\n| surplus_close_qty | int   | 可平仓数量       |\r\n| frozen_qty        | int   | 冻结数量         |\r\n\r\n### 2.1.15 TradeLoginAck - 模拟柜台登录响应\r\n\r\n| 属性       | 类型           | 说明                                                         |\r\n| ---------- | -------------- | ------------------------------------------------------------ |\r\n| login_info | TradeLoginInfo | 登录信息                                                     |\r\n| ret_code   | ELoginRetCode  | 登录成功情况返回码，具体含义与取值参见枚举常量`ELoginRetCode` |\r\n\r\n### 2.1.16 TradeLoginInfo - 模拟柜台登录信息\r\n\r\n| 属性          | 类型              | 说明         |\r\n| ------------- | ----------------- | ------------ |\r\n| account       | str               | 账户ID       |\r\n| trading_day   | str               | 当前交易日   |\r\n| exchange_name | str               | 交易所名称   |\r\n| exchange_time | datetime.datetime | 当前交易时间 |\r\n\r\n### 2.1.17 TradeReport - 成交回报信息\r\n\r\n| 属性          | 类型              | 说明                                                |\r\n| ------------- | ----------------- | --------------------------------------------------- |\r\n| order_id      | str               | 对应的委托订单编号                                  |\r\n| client_ref    | str               | 对应的本地订单编号                                  |\r\n| account       | str               | 账户ID                                              |\r\n| market        | str               | 交易所代码                                          |\r\n| code          | str               | 标的                                                |\r\n| traded_id     | str               | 成交编号                                            |\r\n| traded_index  | int               | 对应委托的成交序号，从0递增                         |\r\n| exec_type     | EExecType         | 成交回报类型，具体含义与取值参见枚举常量`EExecType` |\r\n| traded_qty    | int               | 成交数量                                            |\r\n| traded_price  | float             | 成交价格                                            |\r\n| fee           | float             | 成交费用                                            |\r\n| transact_time | datetime.datetime | 执行报送时间                                        |\r\n\r\n### 2.1.18 TradeRegisterInfo - 模拟柜台账户信息\r\n\r\n| 属性        | 类型         | 说明                                                 |\r\n| ----------- | ------------ | ---------------------------------------------------- |\r\n| strategy_id | str          | 策略ID                                               |\r\n| account     | str          | 账户ID                                               |\r\n| passwd      | str          | 账户密码                                             |\r\n| acc_status  | ERegisterRet | 账户状态码，具体含义与取值参见枚举常量`ERegisterRet` |\r\n\r\n\r\n\r\n## 2.2 QuoteSpi响应数据类\r\n\r\n### 2.2.1 QuoteBaseMsg - 基本行情数据\r\n\r\n| 属性          | 类型              | 说明                                                |\r\n| ------------- | ----------------- | --------------------------------------------------- |\r\n| market        | str               | 标的所属交易所                                      |\r\n| code          | str               | 合约/标的代码                                       |\r\n| security_type | ESecurityType     | 合约类型，具体含义与取值参见枚举常量`ESecurityType` |\r\n| open          | float             | 开盘价                                              |\r\n| high          | float             | 最高价                                              |\r\n| low           | float             | 最低价                                              |\r\n| last          | float             | 最新价                                              |\r\n| pre_close     | float             | 昨收盘价                                            |\r\n| close         | float             | 今收盘价                                            |\r\n| upper_limit   | float             | 涨停价                                              |\r\n| lower_limit   | float             | 跌停价                                              |\r\n| total_amount  | float             | 总成交金额（单位元，与交易所一致）                  |\r\n| total_volume  | float             | 总成交量  （单位股，与交易所一致）                  |\r\n| avg_price     | float             | 当日均价                                            |\r\n| bid_price     | dict[int,float]   | 申买价队列（五档），key为0-4，对应第1至5档          |\r\n| ask_price     | dict[int,float]   | 申卖价队列（五档），key为0-4，对应第1至5档          |\r\n| bid_volume    | dict[int,int]     | 申买量队列（五档），key为0-4，对应第1至5档          |\r\n| ask_volume    | dict[int,int]     | 申卖量队列（五档），key为0-4，对应第1至5档          |\r\n| data_time     | datetime.datetime | 时间                                                |\r\n\r\n### 2.2.2 QuoteMsg - 实时行情数据\r\n\r\n| 属性             | 类型            | 说明                                                  |\r\n| ---------------- | --------------- | ----------------------------------------------------- |\r\n| data_type        | EMarketDataType | 行情类型，具体含义与取值参见枚举常量`EMarketDataType` |\r\n| quote_base_msg   | QuoteBaseMsg    | 基本信息                                              |\r\n| stock_extra_data | Any             | 额外信息，具体类型由`data_type`决定                   |\r\n\r\n### 2.2.3 QuoteRegisterAck - 订阅/取消成败回报\r\n\r\n| 属性         | 类型          | 说明                                                         |\r\n| ------------ | ------------- | ------------------------------------------------------------ |\r\n| market_codes | str           | 订阅/取消订阅标的                                            |\r\n| ret_code     | EQuoteRetCode | 订阅/取消订阅成功/失败，具体含义与取值参见枚举常量`EQuoteRetCode` |\r\n\r\n### 2.2.4 QuoteStockExtra - 股票行情额外信息\r\n\r\n| 属性                   | 类型  | 说明                     |\r\n| ---------------------- | ----- | ------------------------ |\r\n| total_bid_qty          | int   | 委托买入总量             |\r\n| total_ask_qty          | int   | 委托卖出总量             |\r\n| ma_bid_price           | float | 加权平均委买价格         |\r\n| ma_ask_price           | float | 加权平均委卖价格         |\r\n| ma_bond_bid_price      | float | 债券加权平均委买价格     |\r\n| ma_bond_ask_price      | float | 债券加权平均委卖价格     |\r\n| yield_to_maturity      | float | 债券到期收益率           |\r\n| iopv                   | float | 基金实时参考净值         |\r\n| etf_buy_count          | int   | ETF申购笔数              |\r\n| etf_sell_count         | int   | ETF赎回笔数              |\r\n| etf_buy_qty            | int   | ETF申购数量              |\r\n| etf_buy_money          | float | ETF申购金额              |\r\n| etf_sell_qty           | int   | ETF赎回数量              |\r\n| etf_sell_money         | float | ETF赎回金额              |\r\n| total_warrant_exec_qty | int   | 权证执行的总数量         |\r\n| warrant_lower_price    | float | 权证跌停价格             |\r\n| warrant_upper_price    | float | 权证涨停价格             |\r\n| cancel_buy_count       | int   | 买入撤单笔数             |\r\n| cancel_sell_count      | int   | 卖出撤单笔数             |\r\n| cancel_buy_qty         | int   | 买入撤单数量             |\r\n| cancel_sell_qty        | int   | 卖出撤单数量             |\r\n| cancel_buy_money       | float | 买入撤单金额             |\r\n| cancel_sell_money      | float | 卖出撤单金额             |\r\n| total_buy_count        | int   | 买入总笔数               |\r\n| total_sell_count       | int   | 卖出总笔数               |\r\n| duration_after_buy     | int   | 买入委托成交最大等待时间 |\r\n| duration_after_sell    | int   | 卖出委托成交最大等待时间 |\r\n| num_bid_orders         | int   | 买方委托价位数           |\r\n| num_ask_orders         | int   | 卖方委托价位数           |\r\n| pre_iopv               | float | 基金上日参考净值         |\r\n\r\n### 2.2.5 SecurityInfoRsp - 标的信息\r\n\r\n| 属性                 | 类型                     | 说明         |\r\n| -------------------- | ------------------------ | ------------ |\r\n| security_static_info | list[SecurityStaticInfo] | 标的信息列表 |\r\n\r\n### 2.2.6 SecurityStaticInfo - 标的信息\r\n\r\n| 属性          | 类型          | 说明                                                |\r\n| ------------- | ------------- | --------------------------------------------------- |\r\n| market        | str           | 交易所代码                                          |\r\n| code          | str           | 标的                                                |\r\n| security_name | str           | 标的名称                                            |\r\n| security_type | ESecurityType | 标的类型，具体含义与取值参见枚举常量`ESecurityType` |\r\n| price_tick    | float         | 标的价格变化单位                                    |\r\n| buy_qty_unit  | int           | 标的买入基本单位                                    |\r\n| sell_qty_unit | int           | 标的卖出基本单位                                    |\r\n\r\n\r\n\r\n## 2.3 HisQuoteSpi响应数据类\r\n\r\n### 2.3.1 Calendar - 交易日历\r\n\r\n| 属性     | 类型                    | 说明         |\r\n| -------- | ----------------------- | ------------ |\r\n| market   | str                     | 交易所       |\r\n| calendar | list[datetime.datetime] | 日历时间列表 |\r\n\r\n### 2.3.2 FundamentalsDatas - 基本面数据\r\n\r\n| 属性              | 类型              | 说明                                                         |\r\n| ----------------- | ----------------- | ------------------------------------------------------------ |\r\n| fundamentals_type | EFundamentalsType | 基本面数据类型，具体含义与取值参见枚举常量`EFundamentalsType` |\r\n| market            | str               | 交易所代码                                                   |\r\n| code              | str               | 标的代码                                                     |\r\n| datas             | pd.DataFrame      | 数据表格                                                     |\r\n\r\n### 2.3.3 HisQuoteBar - 历史Bar行情信息\r\n\r\n| 属性          | 类型              | 说明                                        |\r\n| ------------- | ----------------- | ------------------------------------------- |\r\n| bob           | datetime.datetime | 起始时间                                    |\r\n| eob           | datetime.datetime | 结束时间                                    |\r\n| market        | str               | 交易所代码                                  |\r\n| code          | str               | 标的代码                                    |\r\n| period        | EPeriod           | 行情粒度，具体含义与取值见枚举常量`EPeriod` |\r\n| open          | float             | 开盘价/起始价                               |\r\n| close         | float             | 收盘价/结尾价                               |\r\n| high          | float             | 最高价                                      |\r\n| low           | float             | 最低价                                      |\r\n| settle        | float             | 结算价                                      |\r\n| total_amount  | float             | 总交易金额                                  |\r\n| total_volume  | int               | 总交易量                                    |\r\n| total_positon | int               | 总持仓量                                    |\r\n\r\n### 2.3.4 HisQuoteBarsMsg - 历史Bar行情信息\r\n\r\n| 属性           | 类型              | 说明            |\r\n| -------------- | ----------------- | --------------- |\r\n| his_quote_bars | list[HisQuoteBar] | 历史Bar行情列表 |\r\n\r\n### 2.3.5 HisQuoteLoginRsp - 历史服务登录响应\r\n\r\n| 属性       | 类型             | 说明                                                     |\r\n| ---------- | ---------------- | -------------------------------------------------------- |\r\n| error_code | EHisQuoteErrCode | 登录错误码，具体含义与取值参见枚举常量`EHisQuoteErrCode` |\r\n| error_msg  | str              | 登录错误消息                                             |\r\n\r\n### 2.3.6 HisQuoteTicksMsg - 历史Tick行情信息\r\n\r\n| 属性            | 类型                | 说明             |\r\n| --------------- | ------------------- | ---------------- |\r\n| his_quote_ticks | list[QuoteStockMsg] | 历史Tick行情列表 |\r\n\r\n\r\n\r\n### 2.3.7 TradingCalendar - 交易日历信息\r\n\r\n| 属性      | 类型           | 说明         |\r\n| --------- | -------------- | ------------ |\r\n| calendars | list[Calendar] | 交易日历信息 |\r\n\r\n### 2.3.8 TradingDate - 交易日\r\n\r\n| 属性         | 类型              | 说明   |\r\n| ------------ | ----------------- | ------ |\r\n| market       | str               | 交易所 |\r\n| trading_date | datetime.datetime | 交易日 |\r\n\r\n\r\n\r\n## 2.4 枚举常量类\r\n\r\n### 2.4.1 EAccStatus - 账户状态码\r\n```python\r\nKAccStatus_Unknown    = 0  # 未知状态\r\nKAccStatus_Normal     = 1  # 正常\r\nKAccStatus_WrittenOff = 2  # 已注销\r\nKAccStatus_Disable    = 3  # 已禁用\r\n```\r\n### 2.4.2 EAdjust - 复权方式\r\n\r\n```python\r\nKAdjust_NONE  =  0  # 不复权\r\nKAdjust_PREV  =  1  # 前复权\r\nKAdjust_POST  =  2  # 后复权\r\n```\r\n\r\n### 2.4.3 EBusinessType - 业务类型\r\n\r\n```python\r\nKBusinessType_Unknown  =  0  # 未知类型\r\nKBusinessType_NORMAL   =  1  # 普通交易\r\n```\r\n### 2.4.4 ECxRejReasonType - 撤单拒绝原因类型\r\n```python\r\n  KCxRejReasonType_TooLateCancel   =  0  # 撤单太晚（Too late to cancel）\r\n  KCxRejReasonType_UnknowOrder     =  1  # 未知订单（Unknown order）\r\n  KCxRejReasonType_Broker          =  2  # 自选原因（Broker / Exchange Option）\r\n  KCxRejReasonType_PendingCancel   =  3  # 正在撤消（Order already in Pending Cancel or Pending Replace status）\r\n  KCxRejReasonType_Duplicate       =  6  # 收到重复单（Duplicate ClOrdID received）\r\n  KCxRejReasonType_Other           = 99  # 其他（other）\r\n```\r\n### 2.4.5 EDepositRetCode - 入金错误返回码\r\n```python\r\nKDepositReCode_Unknown        = 0  # 未知错误\r\nKDepositReCode_NoError        = 1  # 无错误\r\nKDepositReCode_NoEnoughCash   = 2  # 资金不足\r\nKDepositReCode_CapitalOverrun = 3  # 资金超限9*10^17(added 20170410)\r\nKDepositReCode_IllegalAccount = 4  # 非法交易账号(added 20170518)\r\nKDepositReCode_IllegalPara    = 5  # 请求参数错误(amount==0, type is unknow)\r\n```\r\n### 2.4.6 EExecType - 成交回报类型\r\n```python\r\nKExecType_Unknown        =  0  # 未知类型\r\nKExecType_New            =  1  # 已报\r\nKExecType_DoneForDay     =  3  # 当日已完成\r\nKExecType_Canceled       =  4  # 已撤销\r\nKExecType_Replaced       =  5  # 已修改\r\nKExecType_PendingCancel  =  6  # 待撤销\r\nKExecType_Stopped        =  7  # 已停止(已终止)\r\nKExecType_Rejected       =  8  # 已拒绝\r\nKExecType_Suspended      =  9  # 挂起(已延缓)\r\nKExecType_PendingNew     = 65  #  'A' 待报\r\nKExecType_Calculated     = 66  #  'B' 已计算\r\nKExecType_Expired        = 67  #  'C' 过期\r\nKExecType_Restated       = 68  #  'D' 重置(主动发送)\r\nKExecType_PendingReplace = 69  #  'E' 待修改\r\nKExecType_Trade          = 70  #  'F' 成交或部分成交\r\nKExecType_TradeCorrect   = 71  #  'G' 成交更正\r\nKExecType_TradeCancel    = 72  #  'H' 成交撤销\r\nKExecType_OrderStatus    = 73  #  'I' 委托状态\r\n```\r\n### 2.4.7 EFundamentalsType - 财务数据类型\r\n\r\n```python\r\nKFundamentalsType_Unknown            =  0  #\r\nKFundamentalsType_TradingDerivative  =  1  # 股票交易衍生\r\nKFundamentalsType_BalanceSheet       =  2  # 资产负债\r\nKFundamentalsType_Cashflow           =  3  # 现金流量\r\nKFundamentalsType_Income             =  4  # 利润表\r\nKFundamentalsType_Prim               =  5  # 主要财务指标\r\nKFundamentalsType_Deriv              =  6  # 衍生财务指标\r\n```\r\n\r\n### 2.4.8 EHisQuoteErrCode - 历史行情服务错误码\r\n\r\n```python\r\nKHisQuoteErrCode_Unknown                =  0       # 未知\r\nKHisQuoteErrCode_LoginSucc              =  1       # 登录成功\r\nKHisQuoteErrCode_SystemError            =  201100  # 系统错误\r\nKHisQuoteErrCode_ReqTypeUnknown         =  201101  # 未知请求类型\r\nKHisQuoteErrCode_DoNotLogin             =  201102  # 没有登录\r\nKHisQuoteErrCode_NotTradeDay            =  201103  # 非交易日\r\nKHisQuoteErrCode_NotTradeTime           =  201104  # 非交易时间\r\nKHisQuoteErrCode_StaffNotExist          =  201111  # 机构员工不存在\r\nKHisQuoteErrCode_ErrStaffLoginPasswd    =  201112  # 机构员工登录密码错误\r\nKHisQuoteErrCode_ErrStaffLoginSkey      =  201113  # 机构员工skey校验失败\r\nKHisQuoteErrCode_StaffLogOutFailed      =  201114  # 机构员工登出失败\r\nKHisQuoteErrCode_NoPrivilegeAdmin       =  201115  # 机构员工没有对应的管理权限\r\nKHisQuoteErrCode_StaffAccountForbidden  =  201116  # 机构员工帐户被禁用\r\n```\r\n\r\n### 2.4.9 ELoginRetCode - 登录成功情况返回码\r\n\r\n```python\r\nKLoginReCode_Unknown       = 0  # 未知错误\r\nKLoginReCode_LoginSucc     = 1  # 登录成功\r\nKLoginReCode_UnknownAcc    = 2  # 未知账号 或 密码错误\r\nKLoginReCode_AccUnNormal   = 3  # 非正常状态的账号(已注销/已禁用)\r\n```\r\n### 2.4.10 EMarketDataType - 行情类型\r\n\r\n```python\r\nKMarketDataType_Unknown  =  0  # 未知\r\nKMarketDataType_Actual   =  1  # 现货\r\nKMarketDataType_SOption  =  2  # 现货期权\r\nKMarketDataType_Future   =  3  # 期货|期货期权\r\n```\r\n\r\n### 2.4.11 ESecurityType - 标的类型\r\n\r\n```python\r\nKSecurityType_Unknown       =  0  # 未知\r\nKSecurityType_Stock         =  1  # 普通股票\r\nKSecurityType_Option        =  2  # 期权(股票)\r\nKSecurityType_Fund          =  3  # 基金\r\nKSecurityType_Index         =  4  # 指数(股票)\r\nKSecurityType_Bond          =  5  # 债券\r\nKSecurityType_Future        =  6  # 期货\r\nKSecurityType_FutureOption  =  7  # 期权(期货)\r\nKSecurityType_IndexFuture   =  8  # 指数(期货)\r\n```\r\n\r\n### 2.4.12 EOrderRejectReason - 委托拒绝原因\r\n\r\n```python\r\nKOrderRejectReason_NoError             =   0   # 无错误\r\nKOrdRejReason_UnknownSymbol            =   1   # 证券代码非法（Unknown symbol）\r\nKOrdRejReason_ExchangeClosed           =   2   # 交易关闭（Exchange closed）\r\nKOrdRejReason_OrdExceedsLimit          =   3   # 订单超过限价（Order exceeds limit）\r\nKOrdRejReason_TooLateEnter             =   4   # 订单太迟（Too late to enter）\r\nKOrdRejReason_UnknowOrd                =   5   # 未知订单（Unknown Order）\r\nKOrdRejReason_DuplicateOrd             =   6   # 重复订单（ Duplicate Order (e.g. dupe ClOrdID)）\r\nKOrdRejReason_StaleOrd                 =   8   # 失效订单（Stale Order）\r\nKOrdRejReason_InvalidAcc               =  10   # 无效账户（Invalid Investor ID）\r\nKOrdRejReason_UnsupportedOrdChara      =  11   # 不支持的订单特征（Unsupported order characteristic）\r\nKOrdRejReason_IncorrectQty             =  13   # 数量错误（Incorrect quantity）\r\nKOrdRejReason_UnknownAcc               =  15   # 未知账号（Unknown account(s)）\r\nKOrdRejReason_NotEnoughPosition        =  16   # 持仓不足\r\nKOrdRejReason_SecuritiesTrading        =  102  # 证券停牌(获取行情失败)\r\nKOrdRejReason_QtyNonMultipleBuyUnit    =  103  # 买订单数量不是SJSXX.XXBLDW 的整数倍；或\r\nKOrdRejReason_PriceNonMultipleTick     =  106  # 委托价格不是SJSXX.XXJGDW 的整数倍\r\nKOrdRejReason_IllegalEntrustedBusiness =  108  # 非法的委托业务\r\nKOrdRejReason_LackDeposit              =  117  # 参与者业务单元资金可用量不足\r\nKOrdRejReason_PriceError               =  125  # 价格错误\r\nKOrdRejReason_InvalidBusinessCategory  =  148  # 无效业务类别(order_type)\r\nKOrdRejReason_NonTradingTime           =  204  # 非交易时间（This stock is not in tradinghours）\r\nKOrdRejReason_PriceZero                =  219  # 申报价不能为零（Price may not be 0 fora limit order）\r\n```\r\n### 2.4.13 EOrderSide - 买卖方向\r\n```python\r\nKOrderDirection_Unknown         =  0  # 未知方向\r\nKOrderDirection_Buy             = 49  # 买入\r\nKOrderDirection_Sell            = 50  # 卖出\r\nKOrderDirection_Call            = 68  # 认购\r\nKOrderDirection_Callable        = 69  # 赎回\r\nKOrderDirection_FinancingToBuy  = 70  # 融资买入\r\nKOrderDirection_FinancingToSell = 71  # 融资卖出\r\n```\r\n### 2.4.14 EOrderStatus - 委托状态\r\n```python\r\nKOrderStatus_Unknown            =  0  # 未知状态\r\nKOrderStatus_New                =  1  # 已报\r\nKOrderStatus_PartiallyFilled    =  2  # 部成\r\nKOrderStatus_Filled             =  3  # 已成\r\nKOrderStatus_DoneForDay         =  4  # 当日已完成\r\nKOrderStatus_Canceled           =  5  # 已撤\r\nKOrderStatus_PendingCancel      =  6  # 待撤\r\nKOrderStatus_Stopped            =  7  # 停止\r\nKOrderStatus_Rejected           =  8  # 拒绝\r\nKOrderStatus_Suspended          =  9  # 挂起\r\nKOrderStatus_PendingNew         = 65  # 'A'待报\r\nKOrderStatus_Calculated         = 66  # 'B'计算\r\nKOrderStatus_Expired            = 67  # 'C'已过期\r\nKOrderStatus_AcceptedForBidding = 68  # 'D'接受竞价\r\nKOrderStatus_PendingReplace     = 69  # 'E'待修改\r\n```\r\n### 2.4.15 EOrderType - 委托类型\r\n```python\r\nKOrderType_Unknown               =  0  # 未知类型\r\nKOrderType_Market                =  1  # 市价委托\r\nKOrderType_Limit                 =  2  # 限价委托\r\nKOrderType_Stop                  =  4  # 止损委托\r\nKOrderType_Best_5_Then_Cancel    =  7  # 市价最优五档剩余撤销\r\nKOrderType_Best_5_Then_Limit     =  8  # 市价最优五档剩余转限价\r\nKOrderType_Immediately_Or_Cancel =  9  # 市价即时成交剩余撤销\r\nKOrderType_All_Or_Cancel         = 10  # 市价即时全部成交或撤销\r\nKOrderType_Market_Then_Limit     = 75  # 市价剩余转限价\r\nKOrderType_Best_Of_Party         = 85  # 本方最优价格\r\nKOrderType_Best_Of_Conterparty   = 86  # 对方最优价格\r\n```\r\n### 2.4.16 EQuoteRetCode - 行情订阅成败返回码\r\n\r\n```python\r\nKQuoteRetCode_Unknown   =  0  # 未知\r\nKQuoteRetCode_Sucess    =  1  # 订阅/取消订阅成功\r\nKQuoteRetCode_HasError  =  2  # 订阅/取消订阅出错\r\n```\r\n\r\n### 2.4.17 EPeriod - 历史数据周期\r\n\r\n```python\r\nKPeriod_Unknown       =  0  # 未知\r\nKPeriod_ONE_MIN       =  1  # 一分钟\r\nKPeriod_FIVE_MIN      =  2  # 五分钟\r\nKPeriod_FIFTEEN_NMIN  =  3  # 十五分钟\r\nKPeriod_HALF_HOUR     =  4  # 半小时\r\nKPeriod_ONE_HOUR      =  5  # 一小时\r\nKPeriod_DAILY         =  6  # 一天\r\n```\r\n\r\n### 2.4.18 EPositionEffect - 开平方向\r\n\r\n```python\r\nKPositionEffect_Unknown         =  0  # 未知方向\r\nKPositionEffect_Open            = 48  # '0';开仓\r\nKPositionEffect_Close           = 49  # '1';平仓\r\nKPositionEffect_ForceClose      = 50  # '2';强平\r\nKPositionEffect_CloseToday      = 51  # '3';平今\r\nKPositionEffect_CloseYesterday  = 52  # '4';平昨\r\n```\r\n### 2.4.19 ERegisterRet - 注册完成情况返回码\r\n```python\r\nKRegisterRet_Unknown         = 0  # 未知错误\r\nKRegisterRet_Success         = 1  # 注册成功\r\nKRegisterRet_ReRegister      = 2  # 重复注册\r\nKRegisterRet_InvalidStrategy = 3  # 无效或非法 strategy_id\r\n```\r\n\r\n### 2.4.20 ESecurityType - 标的类型\r\n\r\n```python\r\nKSecurityType_Unknown       =  0  # 未知\r\nKSecurityType_Stock         =  1  # 普通股票\r\nKSecurityType_Option        =  2  # 期权(股票)\r\nKSecurityType_Fund          =  3  # 基金\r\nKSecurityType_Index         =  4  # 指数(股票)\r\nKSecurityType_Bond          =  5  # 债券\r\nKSecurityType_Future        =  6  # 期货\r\nKSecurityType_FutureOption  =  7  # 期权(期货)\r\nKSecurityType_IndexFuture   =  8  # 指数(期货)\r\n```\r\n\r\n\r\n\r\n---\r\n\r\n\r\n\r\n# 3 使用须知\r\n\r\n## 3.1 日志记录功能\r\n\r\nSDK基于logging模块实现了全局日志记录功能。\r\n\r\n### 3.1.1 set_root_logger - 设置全局Root日志\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def set_root_logger(name=None, filename=None, level=AztClient.INFO, level_name=AztClient.LEVEL_NAME_CN, fmt=None, datefmt=None, msec=ac.MILLSECOND, log_colors=None, hint_left='[', hint_right=']', hint_separator=' ', farewell=True, farewell_text=None, disable=False)  # 设置全局Root日志\r\n  > \r\n  > def debug(*msgs)  # 记录测试信息\r\n  > def log(*msgs)  # 记录正常信息\r\n  > def warning(*msgs)  # 记录警告信息\r\n  > def error(*msgs)  # 记录错误信息\r\n  > def critical(*msgs) # 记录严重错误信息\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数           | 类型 | 默认值           | 说明                                                         |\r\n  > | -------------- | ---- | ---------------- | ------------------------------------------------------------ |\r\n  > | name           | str  | None             | Root日志名称，默认为`\"Root\"`                                 |\r\n  > | filename       | str  | None             | 日志输出存储文件路径，若未设置则直接打印输出日志             |\r\n  > | level          | int  | ac.INFO          | 日志记录等级，默认记录`INFO`级别及以上日志，低于`INFO`级别的日志会被忽略。可选日志级别有（日志级别从小到大）：`NOTSET`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL` |\r\n  > | level_name     | dict | ac.LEVEL_NAME_CN | 日志级别名称，默认显示日志的中文名。可选值有：`LEVEL_NAME_CN`（中文）、`LEVEL_NAME_EN`（英文）、`None`（不显示日志级别名称）或`自定义dict`（如`{NOTSET: \"缺省\", DEBUG: \"测试\", INFO: \"日志\", WARNING: \"警告\", ERROR: \"错误\", CRITICAL: \"致命\", }`） |\r\n  > | fmt            | str  | None             | 日志输出格式，具体格式参见`logging`库                        |\r\n  > | datefmt        | str  | None             | 时间输出格式，仅当日志输出格式中需要输出时间时生效，具体格式参见`logging`库 |\r\n  > | msec           | int  | MILLSECOND       | 微秒保留部分，仅当`datefmt`生效时有效，默认保留至毫秒。可选值有：`NOMICROSECOND`（不保留微秒部分），`MICROSECOND`（保留至微秒），`MILLSECOND`（保留至毫秒） |\r\n  > | log_colors     | dict | None             | 日志输出颜色。默认使用颜色方案为：`{'DEBUG': 'green', 'INFO': 'white',  'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red'}`，具体参见`colorlog`库 |\r\n  > | hint_left      | str  | '['              | 模块提示符左部分                                             |\r\n  > | hint_right     | str  | ']'              | 模块提示符右部分                                             |\r\n  > | hint_separator | str  | ' '              | 模块间分割符                                                 |\r\n  > | farewell       | bool | True             | 是否在退出程序时输出告别语                                   |\r\n  > | farewell_text  | str  | None             | 退出程序时输出的告别语，仅当`farewell=True`时生效，`farewell_text=None`时表示使用默认告别语 |\r\n  > | disable        | bool | False            | 是否禁用Root日志                                             |\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac\r\n  > \r\n  > ac.set_root_logger(level=ac.DEBUG, level_name=ac.LEVEL_NAME_CN)\r\n  > ac.debug(\"hello debug\")\r\n  > ac.info(\"hello info\")\r\n  > ac.warning(\"hello warning\")\r\n  > ac.error(\"hello error\")\r\n  > ac.critical(\"hello critical\")\r\n  > \r\n  > ac.set_root_logger(name=\"NewRoot\", level=ac.WARNING, level_name=ac.LEVEL_NAME_EN)\r\n  > ac.debug(\"hello debug\")\r\n  > ac.info(\"hello info\")\r\n  > ac.warning(\"hello warning\")\r\n  > ac.error(\"hello error\")\r\n  > ac.critical(\"hello critical\")\r\n  > \r\n  > new_level_name = {\r\n  >     ac.DEBUG: \"new测试\",\r\n  >     ac.INFO: \"new日志\",\r\n  >     ac.WARNING: \"new警告\",\r\n  >     ac.ERROR: \"new错误\",\r\n  >     ac.CRITICAL: \"new致命\",\r\n  > }\r\n  > ac.set_root_logger(name=None, level_name=new_level_name, farewell_text=\"bye bye~\")\r\n  > ac.info(\"hello info\")\r\n  > ac.warning(\"hello warning\")\r\n  > ac.error(\"hello error\")\r\n  > ac.critical(\"hello critical\")\r\n  > ```\r\n\r\n### 3.1.2 get_logger - 获取logger对象\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def get_logger(name=None, filename=None, level=INFO, level_name=LEVEL_NAME_CN, fmt=None, datefmt=None, msec=MILLSECOND, log_colors=None, hint_left='[', hint_right=']', hint_separator=' ', new=False)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数           | 类型 | 默认值           | 说明                                                         |\r\n  > | -------------- | ---- | ---------------- | ------------------------------------------------------------ |\r\n  > | name           | str  | None             | 日志名称，默认获取全局Root日志对象；如果日志不存在则自动新建一个日志对象，若存在则直接获取已创建日志对象 |\r\n  > | filename       | str  | None             | 日志输出存储文件路径，若未设置则直接打印输出日志             |\r\n  > | level          | int  | ac.INFO          | 日志记录等级，默认记录`INFO`级别及以上日志，低于`INFO`级别的日志会被忽略。可选日志级别有（日志级别从小到大）：`NOTSET`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL` |\r\n  > | level_name     | dict | ac.LEVEL_NAME_CN | 日志级别名称，默认显示日志的中文名。可选值有：`LEVEL_NAME_CN`（中文）、`LEVEL_NAME_EN`（英文）、`None`（不显示日志级别名称）或`自定义dict`（如`{NOTSET: \"缺省\", DEBUG: \"测试\", INFO: \"日志\", WARNING: \"警告\", ERROR: \"错误\", CRITICAL: \"致命\", }`） |\r\n  > | fmt            | str  | None             | 日志输出格式，具体格式参见`logging`库                        |\r\n  > | datefmt        | str  | None             | 时间输出格式，仅当日志输出格式中需要输出时间时生效，具体格式参见`logging`库 |\r\n  > | msec           | int  | MILLSECOND       | 微秒保留部分，仅当`datefmt`生效时有效，默认保留至毫秒。可选值有：`NOMICROSECOND`（不保留微秒部分），`MICROSECOND`（保留至微秒），`MILLSECOND`（保留至毫秒） |\r\n  > | log_colors     | dict | None             | 日志输出颜色。默认使用颜色方案为：`{'DEBUG': 'green', 'INFO': 'white',  'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red'}`，具体参见`colorlog`库 |\r\n  > | hint_left      | str  | '['              | 模块提示符左部分                                             |\r\n  > | hint_right     | str  | ']'              | 模块提示符右部分                                             |\r\n  > | hint_separator | str  | ' '              | 模块间分割符                                                 |\r\n  > | new            | bool | False            | 是否创建一个新的logger。当new=False时，若日志名称已存在，则直接获取已存在日志，其他参数即使发生修改也不会生效；当new=True时，若日志已存在，则删除已存在日志对象，生成新的日志对象 |\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac\r\n  > \r\n  > logger = ac.get_logger(name=\"test\", level=ac.DEBUG, level_name=ac.LEVEL_NAME_CN)\r\n  > logger.debug(\"hello debug\")\r\n  > logger.info(\"hello info\")\r\n  > logger.warning(\"hello warning\")\r\n  > logger.error(\"hello error\")\r\n  > logger.critical(\"hello critical\")\r\n  > \r\n  > logger = ac.get_logger(name=\"test\", level=ac.WARNING, level_name=ac.LEVEL_NAME_EN)  # 修改一下参数，但不会生效\r\n  > logger.debug(\"hello debug\")\r\n  > logger.info(\"hello info\")\r\n  > logger.warning(\"hello warning\")\r\n  > logger.error(\"hello error\")\r\n  > logger.critical(\"hello critical\")\r\n  > \r\n  > logger = ac.get_logger(name=\"test\", level=ac.WARNING, level_name=ac.LEVEL_NAME_EN, new=True)  # 覆盖原来的logger，修改参数可以生效\r\n  > logger.debug(\"hello debug\")\r\n  > logger.info(\"hello info\")\r\n  > logger.warning(\"hello warning\")\r\n  > logger.error(\"hello error\")\r\n  > logger.critical(\"hello critical\")\r\n  > ```\r\n\r\n\r\n\r\n## 3.2 概念 - 同步异步模式\r\n\r\n### 3.2.1 定义\r\n\r\n**同步模式**：客户端向服务端发送请求后，阻塞等待请求的响应\r\n\r\n**异步模式**：客户端向服务器发送请求后，不阻塞等待，客户端可以马上处理其他任务；服务端对客户端的请求将通过调用指定的spi函数响应（故亦可称**回调模式**）\r\n\r\n### 3.2.2 应用\r\n\r\n- 凡是接受**`sync`**参数的接口，都同时支持同步模式和异步模式。\r\n\r\n  > - 当`sync=True`时，接口会阻塞，直至超时或收到响应消息时，返回响应消息；若用户同时实现了接口的spi，消息也会再通过调用spi函数返回\r\n  > - 当`sync=False`时，接口函数会直接退出，如果有响应消息，则消息会通过调用已实现的spi函数返回\r\n\r\n- 若不接受sync参数，则需要查看是否存在对应的spi函数\r\n\r\n  > - 若存在可实现的spi函数，则表明默认使用异步模式\r\n  >\r\n  > - 若不存在，则需要观察是否接受timeout参数\r\n  >\r\n  >   > - 若接受timeout参数，表明默认使用同步模式\r\n  >   > - 若不接受timeout参数，表明该接口不会获得服务端的响应\r\n\r\n\r\n\r\n## 3.3 Api基本方法\r\n\r\n所有Api都有一个共同的基类，因此都会有相同的基本方法，其调用逻辑与功能都相同。\r\n\r\n### 3.3.1 Start - 启动Api\r\n\r\n用于初始化Api实例对象、连接服务端、注册回调Spi（用于异步接收服务器的响应消息）等，在使用Api的各种接口前必须先调用该函数。\r\n\r\n不同Api的`Start`函数接受的参数可能不同，因此应参照指定Api的文档说明进行使用。\r\n\r\n### 3.3.2 Stop - 停止Api\r\n\r\n用于主动断开与服务端的连接，停止Api；同时如果没有错误，该函数的调用不会终止程序，用户还可以使用Start函数重新重新连接服务端。\r\n\r\n- **函数签名**\r\n\r\n  >  ```python\r\n  >  def Stop(self)\r\n  >  ```\r\n\r\n### 3.3.3 Join - 加入Api\r\n\r\n用于阻塞程序运行，直至超时或Api停止。该函数仅在Api成功`Start`之后、`Stop`之前有效，效果与`time.sleep`函数相当。\r\n\r\n- **函数签名**\r\n\r\n  >  ```python\r\n  >  def Join(self, wait: float=None)\r\n  >  ```\r\n\r\n- **参数**\r\n\r\n  > | 参数 | 类型  | 默认值 | 说明                                       |\r\n  > | ---- | ----- | ------ | ------------------------------------------ |\r\n  > | wait | float | None   | 阻塞等待时间，`None`表示一直阻塞，单位：秒 |\r\n\r\n- 提示\r\n\r\n  > - 由于客户端将会启动子线程用于接收服务器异步响应信息，当用户通过注册Spi接收消息时，如果主线程过早退出，客户端将无法正确接收响应信息，因此需要用户维持程序的运行。当用户没有其他途径维持程序的运行时，则可以考虑调用该函数。\r\n\r\n### 3.3.4 SetLogger - 设置Api日志对象\r\n\r\n每个Api都内置了日志记录功能，并且默认使用Root日志，当然用户也可以设置指定的日志对象\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def SetLogger(self, logger=None, title=None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数   | 类型        | 默认值 | 说明                                                         |\r\n  > | ------ | ----------- | ------ | ------------------------------------------------------------ |\r\n  > | logger | QujamLogger | None   | 必须是通过`ac.get_logger`方法获取的日志对象，默认使用全局`Root`日志对象 |\r\n  > | title  | str         | None   | 在消息前面新增一个模块，如命名为`\"Trade\"`，表明当前消息由`AztTradeApi`发出；当`title=None`时表示不设置 |\r\n\r\n- 提示\r\n\r\n  > 1. 该方法建议在Api的`Start`方法前调用\r\n  > 2. 如果`logger=None`，则默认使用Root日志对象\r\n  > 3. 如果Root对象被禁用，则无法使用Api的日志记录功能，除非指定`logger`\r\n\r\n### 3.3.5 日志记录函数\r\n\r\nApi中内置了日志记录方法，用户可以直接调用这些方法记录日志，默认使用全局Root日志对象进行记录\r\n\r\n- 记录测试日志\r\n\r\n  > ```python\r\n  > def debug(self, *msgs)\r\n  > ```\r\n\r\n- 记录普通日志\r\n\r\n  > ```python\r\n  > def info(self, *msgs)\r\n  > ```\r\n\r\n- 记录警告日志\r\n\r\n  > ```python\r\n  > def warning(self, *msgs)\r\n  > ```\r\n\r\n- 记录错误日志\r\n\r\n  > ```python\r\n  > def error(self, *msgs)\r\n  > ```\r\n\r\n- 记录严重错误日志\r\n\r\n  > ```python\r\n  > def critical(self, *msgs)\r\n  > ```\r\n\r\n### 3.3.6 Api状态函数\r\n\r\nApi中还有一些函数可供用户使用，以判断当前Api的状态\r\n\r\n- 是否已停止\r\n\r\n  > ```python\r\n  > def isStopped(self):\r\n  > ```\r\n\r\n- 是否已登录\r\n\r\n  > ```python\r\n  > def isLogined(self):\r\n  > ```\r\n\r\n- 是否为初次登录\r\n\r\n  > ```python\r\n  > def isFirstLogined(self):\r\n  > ```\r\n  >\r\n  > - 在首次调用`Start`函数前，`isFirstLogined`返回`True`，之后都是`False`\r\n  \r\n  \r\n\r\n------\r\n\r\n\r\n\r\n# 4 AztTradeApi - 模拟柜台Api\r\n\r\n## 4.1 Start - 启动函数\r\n\r\n- **函数签名**\r\n\r\n  >  ```python\r\n  > def Start(self, ip: str, port: int, spi=None, timeout: float = None, reconnect: int = None, reconnect_ivl: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数          | 类型        | 默认值   | 说明                                                         |\r\n  > | ------------- | ----------- | -------- | ------------------------------------------------------------ |\r\n  > | ip            | str         | 无，必填 | 模拟柜台服务地址，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | port          | int         | 无，必填 | 模拟柜台服务端口，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | spi           | AztTradeSpi | None     | 回调Spi类或实例，用于异步接收服务器的响应消息                |\r\n  > | timeout       | int         | None     | 连接超时时间(单位：秒)，若超时后仍未成功连接服务，则返回可`raise`的`error`；若未设置超时时间，则`Start`函数将会阻塞直至连接成功 |\r\n  > | reconnect     | int         | None     | 重连次数，None或0表示断线不自动重连，-1表示无限重连；重连一定次数后仍未连接成功，返回可raise的错误 |\r\n  > | reconnect_ivl | float       | None     | 重连间隔时间，单位：秒                                       |\r\n  \r\n- **返回**\r\n\r\n  > 如果初始化成功，返回`None`；如果初始化失败，返回可`raise`的`error`\r\n\r\n- **提示**\r\n\r\n  > - 用户只有在实现了`AztTradeSpi`回调类时才需要设置spi参数，反之则不需要关注\r\n  > - 参数spi既可以填入`AztTradeSpi`类，也可以填入`AztTradeSpi()`类实例\r\n\r\n\r\n\r\n## 4.2 Login - 登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Login(self, account: str, passwd: str, timeout: float = None):\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                                         |\r\n  > | ------- | ----- | -------- | -------------------------------------------- |\r\n  > | account | str   | 无，必填 | 账户ID                                       |\r\n  > | passwd  | str   | 无，必填 | 账户密码                                     |\r\n  > | timeout | float | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n  \r\n- **返回**\r\n\r\n  > 返回`TradeLoginAck`信息；若超时无响应则返回`None`\r\n  \r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztTradeApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5.0)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > ac.info(\"登录结果：\", ret_login)\r\n  > ```\r\n\r\n\r\n\r\n## 4.3 Logout - 退出登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Logout(self)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 只有在登录之后才需要退出登录，在尚未登录时调用效果与Stop函数相同\r\n  > - 程序正常终止时，若账户已登录但尚未退出登录，程序会自动退出登录\r\n\r\n\r\n\r\n## 4.4 QueryAccountInfo - 查询账户信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryAccountInfo(self, strategy_id: str = None, strategy_check_code: str = None, account: str = None, passwd: str = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数                | 类型 | 默认值 | 说明                                         |\r\n  > | ------------------- | ---- | ------ | -------------------------------------------- |\r\n  > | strategy_id         | str  | None   | 策略ID                                       |\r\n  > | strategy_check_code | str  | None   | 策略校验码                                   |\r\n  > | account             | str  | None   | 账户ID                                       |\r\n  > | passwd              | str  | None   | 账户密码                                     |\r\n  > | sync                | bool | False  | 是否直接返回结果（启用同步模式）             |\r\n  > | timeout             | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`TradeRegisterInfo`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 获取策略ID和策略校验码并填入 ------------------------------------------------\r\n  > strategy_id = \"xxxx\"  # 策略ID\r\n  > strategy_check_code = \"xxxx\"  # 策略校验码\r\n  > \r\n  > # 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztTradeApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 查询账户,并直接返回结果 -----------------------------------------------------\r\n  > ret_userinfo = myapi.QueryAccountInfo(strategy_id, strategy_check_code, sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"账户查询结果：\", ret_userinfo)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 用户既可以填写`strategy_id`和`strategy_check_code`查询，也可以填写`account`和`passwd`来查询\r\n  > - 查询账户信息不需要先登录\r\n\r\n\r\n\r\n##  4.5 QueryAsset - 查询账户资产信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryAsset(self, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型 | 默认值 | 说明                                         |\r\n  > | ------- | ---- | ------ | -------------------------------------------- |\r\n  > | sync    | bool | False  | 是否直接返回结果（启用同步模式）             |\r\n  > | timeout | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`AccMargin`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询账户资产信息,并直接返回结果 ---------------------------------------------\r\n  >    ret_asset = myapi.QueryAsset(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"账户资产信息查询结果：\", ret_asset)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 查询账户资产信息必须先登录\r\n\r\n\r\n\r\n## 4.6 QueryHistoryAsset - 查询账户历史资产信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryHistoryAsset(self, date: datetime.datetime = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型              | 默认值 | 说明                                                     |\r\n  > | ------- | ----------------- | ------ | -------------------------------------------------------- |\r\n  > | date    | datetime.datetime | None   | 指定查询的历史日期，若无指定则查询账户所有的历史资产信息 |\r\n  > | sync    | bool              | False  | 是否直接返回结果（启用同步模式）                         |\r\n  > | timeout | int               | None   | 同步模式时超时时间，超时返回`None`，单位：秒             |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QryHisAccAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询账户历史资产信息,并直接返回结果 -----------------------------------------\r\n  >    ret_asset = myapi.QueryHistoryAsset(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"账户历史资产信息查询结果：\", ret_asset)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > 查询账户历史资产信息必须先登录\r\n\r\n\r\n\r\n## 4.7 QueryHistoryDeposit - 查询历史入金信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryHistoryDeposit(self, date: datetime.datetime = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型              | 默认值 | 说明                                                     |\r\n  > | ------- | ----------------- | ------ | -------------------------------------------------------- |\r\n  > | date    | datetime.datetime | None   | 指定查询的历史日期，若无指定则查询账户所有的历史入金信息 |\r\n  > | sync    | bool              | False  | 是否直接返回结果（启用同步模式）                         |\r\n  > | timeout | int               | None   | 同步模式时超时时间，超时返回`None`，单位：秒             |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QryHisDepositAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询账户历史入金信息,并直接返回结果 -----------------------------------------\r\n  >    ret_deposit = myapi.QueryHistoryDeposit(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"账户历史入金信息查询结果：\", ret_deposit)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > 查询账户历史入金信息必须先登录\r\n\r\n\r\n\r\n## 4.8 QueryOrders - 查询委托订单信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryOrders(self, market: str = None, code: str = None, client_ref: str = None, order_id: str = None, unfinished: bool = False, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数       | 类型 | 默认值 | 说明                                         |\r\n  > | ---------- | ---- | ------ | -------------------------------------------- |\r\n  > | market     | str  | None   | 交易所代码                                   |\r\n  > | code       | str  | None   | 标的代码                                     |\r\n  > | client_ref | str  | None   | 订单编号（客户端生成）                       |\r\n  > | order_id   | str  | None   | 订单编号（服务端生成）                       |\r\n  > | unfinished | bool | False  | 是否只查询未结委托                           |\r\n  > | sync       | bool | False  | 是否开启同步模式                             |\r\n  > | timeout    | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QueryOrdersAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询委托订单信息,并直接返回结果 --------------------------------------------\r\n  > ret_orders = myapi.QueryOrders(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"委托订单信息查询结果：\", ret_orders)\r\n  > ```\r\n\r\n\r\n\r\n## 4.9 QueryTrades - 查询成交信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > QueryTrades(self, market: str = None, code: str = None, order_id: str = None, trade_id: str = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数     | 类型 | 默认值 | 说明                                         |\r\n  > | -------- | ---- | ------ | -------------------------------------------- |\r\n  > | market   | str  | None   | 交易所代码                                   |\r\n  > | code     | str  | None   | 标的代码                                     |\r\n  > | order_id | str  | None   | 订单编号                                     |\r\n  > | trade_id | str  | None   | 成交编号                                     |\r\n  > | sync     | bool | False  | 是否开启同步模式                             |\r\n  > | timeout  | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QueryTradesAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询成交信息,并直接返回结果 -------------------------------------------------\r\n  >    ret_trades = myapi.QueryTrades(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"成交信息查询结果：\", ret_trades)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 查询成交信息必须先登录\r\n  > - 只填写`market`参数，则查询指定交易所相关的成交信息\r\n  > - 只填写`market`和`code`参数，则查询指定标的代码相关的成交信息\r\n  > - 只填写`order_id`参数，则查询指定委托订单的成交信息，此时不需要填写其他参数\r\n  > - 只填写`trade_id`参数，则查询指定成交编号的成交信息，此时不需要填写其他参数\r\n  > - 不填写以上参数时，则默认查询当前登录账户当日所有的成交信息\r\n\r\n\r\n\r\n## 4.10 QueryPositions - 查询持仓信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryPositions(self, market: str = None, code: str = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型 | 默认值 | 说明                                         |\r\n  > | ------- | ---- | ------ | -------------------------------------------- |\r\n  > | market  | str  | None   | 交易所代码                                   |\r\n  > | code    | str  | None   | 标的代码                                     |\r\n  > | sync    | bool | False  | 是否开启同步模式                             |\r\n  > | timeout | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应，返回`QueryPositionsAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询持仓信息,并直接返回结果 -------------------------------------------------\r\n  >    ret_positions = myapi.QueryPositions(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"持仓信息查询结果：\", ret_positions)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 查询持仓信息必须先登录\r\n  > - 填写`market`和`code`参数时，查询指定标的相关的持仓信息\r\n  > - 不填写以上参数时，查询当前登录账户所有的持仓信息\r\n\r\n## 4.10.1 QueryPositions - 查询历史持仓信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryHisPositions(self, market: str = None, code: str = None,start_time: datetime.datetime = None, end_time: datetime.datetime = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数      | 类型 | 默认值 | 说明                        |\r\n  > | ------- | ---- |---------------------------| -------------------------------------------- |\r\n  > | market  | str  | None   | 交易所代码                     |\r\n  > | code    | str  | None   | 标的代码                      |\r\n  > | start_time | datetime  | None   | 开始时间                      |\r\n  > | end_time    | datetime  | None   | 结束代码                      |\r\n  > | sync    | bool | False  | 是否开启同步模式                  |\r\n  > | timeout | int  | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应，返回`QueryHisPositionsAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询持仓信息,并直接返回结果 -------------------------------------------------\r\n  >    ret_positions = myapi.QueryPositions(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"持仓信息查询结果：\", ret_positions)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 查询历史持仓信息必须先登录\r\n  > - 填写`market`和`code`参数时，查询指定标的相关的持仓信息\r\n  > - 不填写以上参数时，查询当前登录账户所有的持仓信息\r\n\r\n\r\n\r\n## 4.11 QueryHistoryOrders - 查询历史委托信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryHistoryOrders(self, market: str = None, code: str = None, start_time: datetime.datetime = None, end_time: datetime.datetime = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数       | 类型              | 默认值 | 说明                                         |\r\n  > | ---------- | ----------------- | ------ | -------------------------------------------- |\r\n  > | market     | str               | None   | 交易所代码                                   |\r\n  > | code       | str               | None   | 标的代码                                     |\r\n  > | start_time | datetime.datetime | None   | 查询起始时间                                 |\r\n  > | end_time   | datetime.datetime | None   | 查询结束时间                                 |\r\n  > | sync       | bool              | False  | 是否开启同步模式                             |\r\n  > | timeout    | int               | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QueryOrdersAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询历史委托订单信息,并直接返回结果 -----------------------------------------\r\n  >    ret_historyorders = myapi.QueryHistoryOrders(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"历史委托订单信息查询结果：\", ret_historyorders)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 查询历史委托订单信息必须先登录\r\n  > - 填写`market`和`code`参数时，查询指定标的相关的历史委托订单信息\r\n  > - 填写`start_time`和`end_time`时，查询指定时间段内的历史委托订单信息，与`market`和`code`参数兼容\r\n  > - 不填写以上参数时，默认查询当前登录账户所有的历史委托订单信息\r\n\r\n\r\n\r\n## 4.12 QueryHistoryTrades - 查询历史成交信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryHistoryTrades(self, market: str = None, code: str = None, start_time: datetime.datetime = None, end_time: datetime.datetime = None, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数       | 类型              | 默认值 | 说明                                         |\r\n  > | ---------- | ----------------- | ------ | -------------------------------------------- |\r\n  > | market     | str               | None   | 交易所代码                                   |\r\n  > | code       | str               | None   | 标的代码                                     |\r\n  > | start_time | datetime.datetime | None   | 查询起始时间                                 |\r\n  > | end_time   | datetime.datetime | None   | 查询结束时间                                 |\r\n  > | sync       | bool              | False  | 是否开启同步模式                             |\r\n  > | timeout    | int               | None   | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QueryTradesAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询历史成交信息,并直接返回结果 ---------------------------------------------\r\n  >    ret_historytrades = myapi.QueryHistoryTrades(sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"历史成交信息查询结果：\", ret_historytrades)\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 查询历史成交信息必须先登录\r\n  > - 填写`market`和`code`参数时，查询指定标的相关的历史成交信息\r\n  > - 填写`start_time`和`end_time`时，查询指定时间段内的历史成交信息，与`market`和`code`参数兼容\r\n  > - 不填写以上参数时，默认查询当前登录账户所有的历史成交信息\r\n\r\n\r\n\r\n## 4.13 QuerySecurityInfo - 查询标的信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QuerySecurityInfo(self, market, code: str = None, timeout: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                                         |\r\n  > | ------- | ----- | -------- | -------------------------------------------- |\r\n  > | market  | str   | 无，必填 | 交易所代码                                   |\r\n  > | code    | str   | None     | 标的代码                                     |\r\n  > | timeout | float | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 在超时前得到响应时，返回`SecurityInfoRsp`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztTradeApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >     raise start_error\r\n  > \r\n  > # 查询指定标的信息,设置5秒超时 ------------------------------------------------\r\n  > ret_query_security_info = myapi.QuerySecurityInfo(timeout=5, market=\"SZSE\", code=\"000001\")\r\n  > ac.info(\"标的信息查询结果:\", ret_query_security_info)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 如果只填写`market`参数，则为查询整个交易所的标的信息\r\n  > - 填写`market`和`code`参数时，查询指定标的信息\r\n\r\n## 4.14 DepositAsset - 账户入金\r\n\r\n每个模拟柜台账户在刚创建时都会有两亿总资金，在使用过程中如果资金不足，用户也可以自行通过入金的方式追加总资金；但要注意入金前必须先登录。\r\n\r\n- **函数签名**\r\n\r\n  > ```\r\n  > def DepositAsset(self, amount: float, sync: bool = False, timeout: int = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                               |\r\n  > | ------- | ----- | -------- | ---------------------------------- |\r\n  > | amount  | float | 无，必填 | 入金总额                           |\r\n  > | sync    | bool  | False    | 是否阻塞等待响应                   |\r\n  > | timeout | int   | None     | 超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`AccDepositAck`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 3 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5.0)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 4 账户入金20w,并直接返回结果 --------------------------------------------------\r\n  > ret_accdeposit = myapi.DepositAsset(amount=200_000, sync=True, timeout=5.0)  # 设置5秒超时\r\n  > ac.info(\"入金结果：\", ret_accdeposit)\r\n  > ```\r\n\r\n\r\n\r\n## 4.15 Buy - 买入委托\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Buy(self, market: str, code: str, order_qty: int = 100, order_type: int = KOrderType_Market, effect: int = KPositionEffect_Open, order_price: float = None, discretion_price: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数             | 类型  | 默认值               | 说明                                                    |\r\n  > | ---------------- | ----- | -------------------- | ------------------------------------------------------- |\r\n  > | market           | str   | 无，必填             | 交易所代码                                              |\r\n  > | code             | str   | 无，必填             | 标的代码                                                |\r\n  > | order_qty        | int   | 100                  | 委托数量，单位：股（以股票为例）                        |\r\n  > | order_type       | int   | KOrderType_Market    | 委托类型，默认市价委托，具体取值与含义参见`EOrderType`  |\r\n  > | effect           | int   | KPositionEffect_Open | 多空方向，默认多头，具体取值与含义参见`EPositionEffect` |\r\n  > | order_price      | float | None                 | 委托限价，适用于限价委托，保留两位小数                  |\r\n  > | discretion_price | float | None                 | 市价转限价后委托限价，适用于市转限委托，保留两位小数    |\r\n\r\n- **返回**\r\n\r\n  > 调用函数后返回生成的委托订单，为`PlaceOrder`实例\r\n  \r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 1 获取账户ID和密码并填入 -----------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 2 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztTradeSpi):\r\n  >        # 委托执行回报信息回调\r\n  >        def onOrderReport(self, msg):\r\n  >            ac.info(\"收到委托执行回报信息：\", msg)\r\n  >        # 成交回报信息回调\r\n  >        def onTradeReport(self, msg):\r\n  >            ac.info(\"收到成交回报信息：\", msg)\r\n  >    \r\n  >    # 3 初始化Api ------------------------------------------------------------------\r\n  >    myapi = ac.AztTradeApi()  # 实例化Api\r\n  >    # 初始化Api，注册Spi\r\n  >    start_error = myapi.Start(ip=\"127.0.0.1\", port=1234, spi=MySpi)\r\n  >    if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 4 登录账户 -------------------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if not ret_login:\r\n  >        raise Exception(\"登录失败！\")\r\n  >    myapi.Join(1)  # 阻塞1秒\r\n  >     # 买入1手SHSE.600259\r\n  > order = myapi.Buy(market=\"SHSE\", code=\"600259\", order_qty=100)\r\n  > # order为PlaceOrder实例\r\n  > \r\n  >    # 5 阻塞主线程等待结果返回 -----------------------------------------------------\r\n  > myapi.Join()\r\n  > ```\r\n  \r\n- **提示**\r\n\r\n  > - 买入委托前必须先登录\r\n  > - 服务器对委托订单的处理时间无法保证，因此无法启用同步模式，只能采用异步模式；因此用户必须实现相关的回调函数才能收取到委托订单相关的执行消息和成交消息\r\n\r\n\r\n\r\n## 4.16 Sell - 卖出委托\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Sell(self, market: str, code: str, order_qty: int = 100, order_type: int = KOrderType_Market, effect: int = KPositionEffect_Close, order_price: float = None, discretion_price: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数             | 类型  | 默认值                | 说明                                                    |\r\n  > | ---------------- | ----- | --------------------- | ------------------------------------------------------- |\r\n  > | market           | str   | 无，必填              | 交易所代码                                              |\r\n  > | code             | str   | 无，必填              | 标的代码                                                |\r\n  > | order_qty        | int   | 100                   | 委托数量，单位：股（以股票为例）                        |\r\n  > | order_type       | int   | KOrderType_Market     | 委托类型，默认市价委托，具体取值与含义参见`EOrderType`  |\r\n  > | effect           | int   | KPositionEffect_Close | 多空方向，默认空头，具体取值与含义参见`EPositionEffect` |\r\n  > | order_price      | float | None                  | 委托限价，适用于限价委托，保留两位小数                  |\r\n  > | discretion_price | float | None                  | 市价转限价后委托限价，适用于市转限委托，保留两位小数    |\r\n\r\n- **返回**\r\n\r\n  > 调用函数后返回生成的委托订单，为`PlaceOrder`实例\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 1 获取账户ID和密码并填入 -----------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 2 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztTradeSpi):\r\n  >        # 委托执行回报信息回调\r\n  >        def onOrderReport(self, msg):\r\n  >            ac.info(\"收到委托执行回报信息：\", msg)\r\n  >    \r\n  >        # 成交回报信息回调\r\n  >        def onTradeReport(self, msg):\r\n  >         ac.info(\"收到成交回报信息：\", msg)\r\n  >    \r\n  >    # 3 初始化Api ------------------------------------------------------------------\r\n  >    myapi = ac.AztTradeApi()  # 实例化Api\r\n  > # 初始化Api，注册Spi\r\n  >    start_error = myapi.Start(ip=\"127.0.0.1\", port=1234, spi=MySpi)\r\n  >    if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 4 登录账户 -------------------------------------------------------------------\r\n  > if not myapi.Login(account, passwd, timeout=5):\r\n  >        raise Exception(\"登录失败！\")\r\n  > myapi.Join(1)  # 阻塞1秒\r\n  > # 卖出1手SHSE.600259\r\n  >    order = myapi.Sell(market=\"SHSE\", code=\"600259\", order_qty=100)\r\n  > # order为PlaceOrder实例\r\n  > \r\n  > # 5 阻塞主线程等待结果返回 -----------------------------------------------------\r\n  > myapi.Join()\r\n  >    ```\r\n  \r\n- **提示**\r\n\r\n  > - 卖出委托前必须先登录\r\n  > - 服务器对委托订单的处理时间无法保证，因此无法启用同步模式，只能采用异步模式；因此用户必须实现相关的回调函数才能收取到委托订单相关的执行消息和成交消息\r\n\r\n\r\n\r\n## 4.17 Cancel - 撤单委托\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Cancel(self, order_id: str)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数     | 类型 | 默认值   | 说明                                                     |\r\n  > | -------- | ---- | -------- | -------------------------------------------------------- |\r\n  > | order_id | str  | 无，必填 | 需要撤销的委托订单编号，见`PlaceOrder`中的`order_id`属性 |\r\n\r\n- **返回**\r\n\r\n  > 调用函数后返回生成的撤单委托请求，为`CancelOrder`实例\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 1 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 2 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztTradeSpi):\r\n  >        # 2.2 实现委托执行回报信息回调\r\n  >        def onOrderReport(self, msg):\r\n  >            ac.info(\"收到委托执行回报信息：\", msg)\r\n  >     \r\n  >        def onCancelOrderReject(self, msg):\r\n  >            ac.info(\"撤单失败：\", msg)\r\n  > \r\n  > # 3 初始化Api ------------------------------------------------------------------\r\n  > myapi = ac.AztTradeApi()  # 实例化Api\r\n  > # 初始化Api，注册Spi\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234, spi=MySpi)\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 4 登录账户 -------------------------------------------------------------------\r\n  > if not myapi.Login(account, passwd, timeout=5):\r\n  >        raise Exception(\"登录失败！\")\r\n  >    \r\n  > # 5 取消订单 -------------------------------------------------------------------\r\n  > order_id = \"xxxx\"  # PlaceOrder中的order_id属性\r\n  > cancel_req = myapi.Cancel(order_id) # cancel_req为CancelOrder实例\r\n  > \r\n  >     # 6 阻塞主线程等待结果返回 -----------------------------------------------------\r\n  > myapi.Join()\r\n  > ```\r\n  \r\n  \r\n\r\n------\r\n\r\n\r\n\r\n# 5 AztQuoteApi - 实时行情服务Api\r\n\r\n## 5.1 Start - 启动函数\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Start(self, ip: str, port: int, spi=None, timeout=None reconnect: int = None, reconnect_ivl: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数          | 类型        | 默认值   | 说明                                                         |\r\n  > | ------------- | ----------- | -------- | ------------------------------------------------------------ |\r\n  > | ip            | str         | 无，必填 | 行情服务地址，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | port          | int         | 无，必填 | 行情服务端口，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | spi           | AztQuoteSpi | None     | 回调Spi类或实例，用于异步接收服务器的响应消息                |\r\n  > | timeout       | float       | None     | 连接超时时间(单位：秒)，若超时后仍未成功连接服务，则返回可`raise`的`error`；若未设置超时时间，则`Start`函数将会阻塞直至连接成功 |\r\n  > | reconnect     | int         | None     | 重连次数，None或0表示断线不自动重连，-1表示无限重连；重连一定次数后仍未连接成功，返回可raise的错误 |\r\n  > | reconnect_ivl | float       | None     | 重连间隔时间，单位：秒                                       |\r\n\r\n- **返回**\r\n\r\n  > 如果初始化成功，返回`None`；如果初始化失败，返回可`raise`的`error`\r\n\r\n- **提示**\r\n\r\n  > - 用户需要自行实现`AztQuoteSpi`回调类时才需要设置spi参数，反之则不需要关注\r\n  > - 参数spi既可以填入`AztQuoteSpi`类，也可以填入`AztQuoteSpi()`类实例\r\n\r\n\r\n\r\n## 5.2 Login - 登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Login(self, account: str, passwd: str, timeout: float = None):\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                                         |\r\n  > | ------- | ----- | -------- | -------------------------------------------- |\r\n  > | account | str   | 无，必填 | 账户ID                                       |\r\n  > | passwd  | str   | 无，必填 | 账户密码                                     |\r\n  > | timeout | float | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > 返回`LoginAck`信息；若超时无响应则返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztQuoteApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >     raise start_error\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5.0)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >     raise Exception(\"服务器未响应！\")\r\n  > ac.info(\"登录结果：\", ret_login)\r\n  > ```\r\n\r\n\r\n\r\n## 5.3 Logout - 退出登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Logout(self)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 只有在登录之后才需要退出登录，在尚未登录时调用效果与Stop函数相同\r\n  > - 程序正常终止时，若账户已登录但尚未退出登录，程序会自动退出登录\r\n\r\n\r\n\r\n## 5.4 Subscribe - 订阅实时行情\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Subscribe(self, codes, sync=False, timeout=None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型           | 默认值   | 说明                                                         |\r\n  > | ------- | -------------- | -------- | ------------------------------------------------------------ |\r\n  > | codes   | str或list[str] | 无，必填 | 订阅标的，标的格式为`Market.Code`(如`SHSE.600000`)；如果需要订阅多个标的，既可以使用列表形式(如`[\"SHSE.600000\",\"SZSE.000001\"]`)，也可以使用英文逗号`,`拼接(如`\"SHSE.600000,SZSE.000001\"`) |\r\n  > | sync    | bool           | False    | 是否直接返回订阅成败情况（启用同步模式）                     |\r\n  > | timeout | float          | None     | 同步模式时超时时间，超时返回`None`，单位：秒                 |\r\n  \r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QuoteRegisterAck`信息，其余情况返回`None`\r\n  \r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztQuoteSpi):\r\n  >     def onSubscribe(self, msg):\r\n  >         self.api.info(\"收到订阅回报(spi):\", msg)\r\n  >     def onQuoteData(self, msg):\r\n  >         self.api.info(\"收到行情推送:\", msg)\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >     raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 订阅标的,订阅成败通过spi返回（异步模式） -----------------------------------\r\n  > myapi.Subscribe([\"SHSE.600000\", \"SHSE.600123\"])\r\n  > # 或者同步模式(设置5秒超时)\r\n  > ret_sub = myapi.Subscribe(\"SHSE.600130,SHSE.600004\", sync=True, timeout=5.0)\r\n  >     if not ret_sub:\r\n  >         raise Exception(\"服务器未响应！\")\r\n  >     myapi.info(\"收到订阅回报：\", ret_sub)\r\n  > \r\n  > # 5 阻塞主线程等待结果返回 ------------------------------------------------------\r\n  > myapi.Join()\r\n  > ```\r\n  \r\n\r\n\r\n## 5.5 Unsubscribe - 取消订阅实时行情\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Unsubscribe(self, codes, sync=False, timeout=None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型           | 默认值   | 说明                                                         |\r\n  > | ------- | -------------- | -------- | ------------------------------------------------------------ |\r\n  > | codes   | str或list[str] | 无，必填 | 取消订阅标的，标的格式为`Market.Code`(如`SHSE.600000`)；如果需要取消订阅多个标的，既可以使用列表形式(如`[\"SHSE.600000\",\"SZSE.000001\"]`)，也可以使用英文逗号`,`拼接(如`\"SHSE.600000,SZSE.000001\"`) |\r\n  > | sync    | bool           | False    | 是否直接返回取消订阅成败情况（启用同步模式）                 |\r\n  > | timeout | float          | None     | 同步模式时超时时间，超时返回`None`，单位：秒                 |\r\n  \r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QuoteRegisterAck`信息，其余情况返回`None`\r\n  \r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztQuoteSpi):\r\n  >        def onUnsubscribe(self, msg):\r\n  >            self.api.info(\"收到取消订阅回报(spi):\", msg)\r\n  >        def onQuoteData(self, msg):\r\n  >            self.api.info(\"收到行情推送:\", msg)\r\n  >    \r\n  >    ......\r\n  >    \r\n  >    # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  >         ret_login = myapi.Login(account, passwd, timeout=5)\r\n  >    if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  >    \r\n  >    # 订阅标的,直接返回订阅成败情况（同步模式） ----------------------------------\r\n  >    ret_sub = myapi.Subscribe(\"SHSE.600130,SHSE.600004\", sync=True, timeout=5.0)\r\n  >        if not ret_sub:\r\n  >                     raise Exception(\"服务器未响应！\")\r\n  >        myapi.info(\"收到订阅回报：\", ret_sub)\r\n  >        \r\n  >    # 在30秒后取消订阅 -----------------------------------------------------------\r\n  > \tmyapi.Join(30)\r\n  >    myapi.Unsubscribe(\"SHSE.600130\")\r\n  >    \r\n  >    # 阻塞主线程30秒后停止程序 ---------------------------------------------------\r\n  >     myapi.Join(30)\r\n  > myapi.Stop()\r\n  > ```\r\n  \r\n  \r\n\r\n## 5.6 QueryQuote - 查询实时行情\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QueryQuote(self, codes, sync=False, timeout=None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型           | 默认值   | 说明                                                         |\r\n  > | ------- | -------------- | -------- | ------------------------------------------------------------ |\r\n  > | codes   | str或list[str] | 无，必填 | 查询标的，标的格式为`Market.Code`(如`SHSE.600000`)；如果需要取消订阅多个标的，既可以使用列表形式(如`[\"SHSE.600000\",\"SZSE.000001\"]`)，也可以使用英文逗号`,`拼接(如`\"SHSE.600000,SZSE.000001\"`) |\r\n  > | sync    | bool           | False    | 是否直接返回查询到的实时行情（启用同步模式）                 |\r\n  > | timeout | float          | None     | 同步模式时超时时间，超时返回`None`，单位：秒                 |\r\n\r\n- **返回**\r\n\r\n  > - 当`sync=True`且在超时前得到响应时，返回`QuoteMsg`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 实现回调Spi ----------------------------------------------------------------\r\n  > class MySpi(ac.AztQuoteSpi):\r\n  >     # 实现异步模式，同步模式下也会触发spi回调\r\n  >     def onQueryQuote(self, msg):\r\n  >         self.api.info(\"收到行情查询回报(spi):\", msg)\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >     raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询标的,直接返回查询的实时行情（同步模式） ----------------------------------\r\n  > ret_query = myapi.QueryQuote(\"SHSE.600000,SHSE.600004,SHSE.600129,SHSE.600159\", sync=True, timeout=5)\r\n  > if not ret_query:\r\n  >     raise Exception(\"服务器未响应！\")\r\n  > myapi.info(\"收到行情查询回报:\", ret_query)\r\n  > ```\r\n\r\n  \r\n\r\n## 5.7 QuerySecurityInfo - 查询标的信息\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def QuerySecurityInfo(self, codes, timeout: float = None)\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型           | 默认值   | 说明                                                         |\r\n  > | ------- | -------------- | -------- | ------------------------------------------------------------ |\r\n  > | codes   | str或list[str] | 无，必填 | 查询标的，标的格式为`Market.Code`(如`SHSE.600000`)；如果需要取消订阅多个标的，既可以使用列表形式(如`[\"SHSE.600000\",\"SZSE.000001\"]`)，也可以使用英文逗号`,`拼接(如`\"SHSE.600000,SZSE.000001\"`) |\r\n  > | timeout | float          | None     | 查询超时时间，超时返回`None`，单位：秒                       |\r\n  \r\n- **返回**\r\n\r\n  > - 在超时前得到响应时，返回`SecurityInfoRsp`信息，其余情况返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztQuoteApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >     raise start_error\r\n  > \r\n  > # 查询指定标的信息,设置5秒超时 ------------------------------------------------\r\n  > ret_query_security_info = myapi.QuerySecurityInfo(code=\"000001\", timeout=5.0)\r\n  > ac.info(\"标的信息查询结果:\", ret_query_security_info)\r\n  > ```\r\n\r\n\r\n\r\n------\r\n\r\n\r\n\r\n# 6 AztHisQuoteApi - 历史行情服务Api\r\n\r\n## 6.1 Start - 启动函数\r\n\r\n- **函数签名**\r\n\r\n  >  ```python\r\n  >  def Start(self, ip: str, port: int, spi=None, timeout=None reconnect: int = None, reconnect_ivl: float = None)\r\n  >  ```\r\n\r\n- **参数**\r\n\r\n  > | 参数          | 类型           | 默认值   | 说明                                                         |\r\n  > | ------------- | -------------- | -------- | ------------------------------------------------------------ |\r\n  > | ip            | str            | 无，必填 | 历史行情服务地址，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | port          | int            | 无，必填 | 历史行情服务端口，由[aztquant.com](https://www.aztquant.com)提供 |\r\n  > | spi           | AztHisQuoteSpi | None     | 回调Spi类或实例，用于异步接收服务器的响应消息                |\r\n  > | timeout       | int            | None     | 连接超时时间(单位：秒)，若超时后仍未成功连接服务，则返回可`raise`的`error`；若未设置超时时间，则`Start`函数将会阻塞直至连接成功 |\r\n  > | reconnect     | int            | None     | 重连次数，None或0表示断线不自动重连，-1表示无限重连；重连一定次数后仍未连接成功，返回可raise的错误 |\r\n  > | reconnect_ivl | float          | None     | 重连间隔时间，单位：秒                                       |\r\n\r\n- **返回**\r\n\r\n  > 如果初始化成功，返回`None`；如果初始化失败，返回可`raise`的`error`\r\n\r\n- **提示**\r\n\r\n  > - 参数spi既可以填入`AztHisQuoteSpi`类，也可以填入`AztHisQuoteSpi()`类实例\r\n\r\n\r\n\r\n## 6.2  Login - 登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Login(self, account: str, passwd: str, timeout: float = None):\r\n  > ```\r\n\r\n- **参数**\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                                         |\r\n  > | ------- | ----- | -------- | -------------------------------------------- |\r\n  > | account | str   | 无，必填 | 账户ID                                       |\r\n  > | passwd  | str   | 无，必填 | 账户密码                                     |\r\n  > | timeout | float | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > 返回`HisQuoteLoginRsp`信息；若超时无响应则返回`None`\r\n\r\n- **示例**\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > # 1 获取账户ID和密码并填入 ------------------------------------------------------\r\n  > account = \"xxxx\"  # 账户ID\r\n  > passwd = \"xxxx\"  # 账户密码\r\n  > \r\n  > # 2 初始化Api -------------------------------------------------------------------\r\n  > myapi = ac.AztHisQuoteApi()  # 实例化Api\r\n  > start_error = myapi.Start(ip=\"127.0.0.1\", port=1234)  # 初始化Api\r\n  > if start_error:  # 如果初始化失败，报错\r\n  >        raise start_error\r\n  > \r\n  > # 3 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >        raise Exception(\"服务器未响应！\")\r\n  > myapi.info(\"登录结果：\", ret_login)\r\n  > ```\r\n\r\n\r\n\r\n## 6.3 Logout - 退出登录\r\n\r\n- **函数签名**\r\n\r\n  > ```python\r\n  > def Logout(self)\r\n  > ```\r\n\r\n- **提示**\r\n\r\n  > - 只有在登录之后才需要也才能退出登录\r\n\r\n\r\n\r\n## 6.4 GetTradingCalendar - 查询交易日历\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def GetTradingCalendar(self, market: str, year: int = None, sync: bool = False, timeout: float = None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数    | 类型  | 默认值   | 说明                                         |\r\n  > | ------- | ----- | -------- | -------------------------------------------- |\r\n  > | market  | str   | 无，必填 | 市场代码                                     |\r\n  > | year    | int   | None     | 年份                                         |\r\n  > | sync    | bool  | False    | 是否开启同步模式                             |\r\n  > | timeout | float | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > 当`sync=True`且在超时前得到响应时，返回`TradingCalendar`信息，其余情况返回`None`\r\n  \r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询交易日历,设置5秒超时 ----------------------------------------------------\r\n  > ret_trading_calendar = myapi.GetTradingCalendar(\"SHSE\", sync=True, timeout=5)\r\n  > if ret_trading_calendar is None: # 如果失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > myapi.info(\"查询回复：\", ret_trading_calendar)\r\n  > ```\r\n  >\r\n  \r\n  \r\n\r\n## 6.5 GetNextTradingDate - 查询下一个交易日\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def GetNextTradingDate(self, market: str, trading_date: datetime.datetime, direction: bool = True, sync: bool = False, timeout: float = None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数         | 类型              | 默认值   | 说明                                                      |\r\n  > | ------------ | ----------------- | -------- | --------------------------------------------------------- |\r\n  > | market       | str               | 无，必填 | 市场代码                                                  |\r\n  > | trading_date | datetime.datetime | 无，必填 | 当前交易日历                                              |\r\n  > | direction    | bool              | True     | 方向，`True`为查询下一个交易日，`False`为查询上一个交易日 |\r\n  > | sync         | bool              | False    | 是否开启同步模式                                          |\r\n  > | timeout      | float             | None     | 同步模式时超时时间，超时返回`None`，单位：秒              |\r\n\r\n- **返回**\r\n\r\n  > 当`sync=True`且在超时前得到响应时，返回`TradingDate`信息，其余情况返回`None`\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询下个交易日,设置5秒超时 ----------------------------------------------------\r\n  > ret_trading_date = myapi.GetNextTradingDate(\"SHSE\", datetime.datetime(2022, 9, 18), sync=True, timeout=5)\r\n  > \r\n  > if ret_trading_date is None: # 如果失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > myapi.info(\"查询回复：\", ret_trading_date)\r\n  > ```\r\n\r\n\r\n\r\n## 6.6 QueryHisTicks - 查询历史Tick行情\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > QueryHisTicks(self, market: str, code: str, start_time: datetime.datetime, end_time: datetime.datetime, num: int = None, adjust: int = None, adjust_time: datetime.datetime = None, sync: bool = False, timeout: float = None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数        | 类型              | 默认值   | 说明                                         |\r\n  > | ----------- | ----------------- | -------- | -------------------------------------------- |\r\n  > | market      | str               | 无，必填 | 交易所代码                                   |\r\n  > | code        | str               | 无，必填 | 标的代码                                     |\r\n  > | start_time  | datetime.datetime | 无，必填 | 开始时间                                     |\r\n  > | end_time    | datetime.datetime | 无，必填 | 结束时间                                     |\r\n  > | num         | int               | None     | 查询限制数量，取值范围`(0,24000)`            |\r\n  > | adjust      | int               | None     | 复权方式，具体含义与取值参见`EAdjust`        |\r\n  > | adjust_time | datetime.datetime | None     | 复权基点时间，默认当前时间                   |\r\n  > | sync        | bool              | False    | 是否开启同步模式                             |\r\n  > | timeout     | float             | None     | 同步模式时超时时间，超时返回`None`，单位：秒 |\r\n\r\n- **返回**\r\n\r\n  > 当`sync=True`且在超时前得到响应时，返回`HisQuoteTicksMsg`信息，其余情况返回`None`\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询Tick行情,设置5秒超时 ----------------------------------------------------\r\n  >    ret_ticks = myapi.QueryHisTicks(\"SHSE\", \"600000\", start_time=datetime.datetime(2022, 9, 20, 9, 30, 0), end_time=datetime.datetime(2022, 9, 20, 9, 30, 0), sync=True, timeout=5)\r\n  > \r\n  > if ret_ticks is None: # 如果失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > myapi.info(\"查询回复：\", ret_ticks)\r\n  > ```\r\n\r\n\r\n\r\n## 6.7 QueryHisBars - 查询历史Bar行情\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > QueryHisBars(self, market: str, code: str, period: int, start_time: datetime.datetime, end_time: datetime.datetime, num: int = None, adjust: int = None, adjust_time: datetime.datetime = None, sync: bool = False, timeout: float = None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数        | 类型              | 默认值   | 说明                                          |\r\n  > | ----------- | ----------------- | -------- | --------------------------------------------- |\r\n  > | market      | str               | 无，必填 | 交易所代码                                    |\r\n  > | code        | str               | 无，必填 | 标的代码                                      |\r\n  > | period      | int               | 无，必填 | 行情粒度，具体含义与取值参见枚举常量`EPeriod` |\r\n  > | start_time  | datetime.datetime | 无，必填 | 开始时间                                      |\r\n  > | end_time    | datetime.datetime | 无，必填 | 结束时间                                      |\r\n  > | num         | int               | None     | 查询限制数量，取值范围`(0,24000)`             |\r\n  > | adjust      | int               | None     | 复权方式，具体含义与取值参见`EAdjust`         |\r\n  > | adjust_time | datetime.datetime | None     | 复权基点时间，默认当前时间                    |\r\n  > | sync        | bool              | False    | 是否开启同步模式                              |\r\n  > | timeout     | float             | None     | 同步模式时超时时间，超时返回`None`，单位：秒  |\r\n\r\n- **返回**\r\n\r\n  > 当`sync=True`且在超时前得到响应时，返回`HisQuoteBarsMsg`信息，其余情况返回`None`\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询Bar行情,设置5秒超时 ----------------------------------------------------\r\n  >    ret_bars = myapi.QueryHisBars(\"SHSE\", \"600000\", ac.KPeriod_DAILY, start_time=datetime.datetime(2022, 1, 1), end_time=datetime.datetime(2022, 9, 20), sync=True, timeout=5)\r\n  > \r\n  > if ret_bars is None: # 如果失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > myapi.info(\"查询回复：\", ret_bars)\r\n  > ```\r\n\r\n\r\n\r\n## 6.8 QueryFundamentalData - 查询基本面历史数据\r\n\r\n- 函数签名\r\n\r\n  > ```python\r\n  > def GetFundamentals(self, fundamentals_type: int, market: str, code: str, start_date: datetime.datetime = None, end_date: datetime.datetime = None, fileds: str = None, sync: bool = False, timeout: float = None)\r\n  > ```\r\n\r\n- 参数\r\n\r\n  > | 参数              | 类型              | 默认值   | 说明                                                         |\r\n  > | ----------------- | ----------------- | -------- | ------------------------------------------------------------ |\r\n  > | fundamentals_type | int               | 无，必填 | 基本面数据类型，具体含义与取值参见枚举常量`EFundamentalsType` |\r\n  > | market            | str               | 无，必填 | 交易所代码                                                   |\r\n  > | code              | str               | 无，必填 | 标的代码                                                     |\r\n  > | start_date        | datetime.datetime | None     | 开始时间                                                     |\r\n  > | end_date          | datetime.datetime | None     | 结束时间                                                     |\r\n  > | fileds            | list[str]或str    | None     | 查询字段列表，类型为列表，或为以`\",\"`分隔的字符串。默认查询所有字段，可查询字段参见`附录2` |\r\n  > | sync              | bool              | False    | 是否开启同步模式                                             |\r\n  > | timeout           | float             | None     | 同步模式时超时时间，超时返回`None`，单位：秒                 |\r\n\r\n- 返回\r\n\r\n  > 当`sync=True`且在超时前得到响应时，返回`FundamentalsDatas`信息，其余情况返回`None`\r\n\r\n- 示例\r\n\r\n  > ```python\r\n  > import AztClient as ac  # 导入客户端库\r\n  > \r\n  > ......\r\n  > \r\n  > # 登录Api,设置5秒超时 ---------------------------------------------------------\r\n  > ret_login = myapi.Login(account, passwd, timeout=5)\r\n  > if ret_login is None: # 如果登陆失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > # 查询基本面数据,设置5秒超时 --------------------------------------------------\r\n  >     ret_fundamentals = myapi.GetFundamentals(ac.KFundamentalsType_TradingDerivative, \"SHSE\", \"600000\", sync=True, timeout=5, start_date=datetime.datetime(2016, 1, 1), end_date=datetime.datetime(2022, 11, 8))\r\n  > \r\n  > if ret_fundamentals is None: # 如果失败,直接报错终止程序\r\n  >      raise Exception(\"服务器未响应！\")\r\n  > \r\n  > myapi.info(\"查询回复：\", ret_fundamentals)\r\n  > ```\r\n\r\n\r\n\r\n------\r\n\r\n\r\n\r\n# 7 附录\r\n\r\n## 7.1 附录1 - Spi介绍\r\n\r\n### 7.1.1 Spi使用说明\r\n\r\n用户可以根据需要有选择地实现Spi中的函数，但用户须知：\r\n\r\n1. Spi专为异步模式设计\r\n\r\n   > 当Api设置`sync=False`时，用户必须继承实现Spi中相应的响应函数，否则无法接收服务端返回的消息和数据\r\n\r\n2. 同步模式同样可用\r\n\r\n   > 当Api设置同步模式（即当`sync=True`）时，响应结果在直接通过Api函数返回的同时也会通过已实现的Spi函数返回。因此如果用户在使用同步模式时同时实现了相应的Spi函数，响应消息会返回两次\r\n\r\n3. 自动引用Api\r\n\r\n   > Spi实例对象都会自动引用所属的Api对象，用户可以通过Spi的`api`属性来访问Api对象\r\n\r\n4. 处理Api错误\r\n\r\n   > 用户可以通过实现Spi中的`onError`函数接收Api在运行过程中的所有错误，如连接中断错误等，用户也可以在连接中断后再次调用`Start`函数尝试重新连接服务端\r\n\r\n5. 自动重连成功回报\r\n\r\n   > 如果用户在调用`Start`函数时设置了自动重连，当客户端与服务端连接中断但自动重连成功后（若用户已登录，则同时自动重新登录），Spi的onReconnected函数会被调用，用户可以在此函数中重新执行一些如行情订阅等需要服务端异步返回消息的操作\r\n\r\n### 7.1.2 AztTradeSpi\r\n\r\n```python\r\nclass AztTradeSpi:\r\n    # 账户入金回报，msg为AccDepositAck实例\r\n    def onDepositAsset(self, msg):\r\n        pass\r\n\r\n    # 查询账户信息回报，msg为TradeRegisterInfo实例\r\n    def onQueryAccountInfo(self, msg):\r\n        pass\r\n\r\n    # 查询账户资产信息回报，msg为AccMargin实例\r\n    def onQueryAsset(self, msg):\r\n        pass\r\n\r\n    # 查询委托订单信息回报，msg为QueryOrdersAck实例\r\n    def onQueryOrders(self, msg):\r\n        pass\r\n\r\n    # 查询成交信息回报，msg为QueryTradesAck实例\r\n    def onQueryTrades(self, msg):\r\n        pass\r\n\r\n    # 查询持仓信息回报，msg为QueryPositionsAck实例\r\n    def onQueryPositions(self, msg):\r\n        pass\r\n\r\n    # 查询历史委托信息回报，msg为QueryOrdersAck实例\r\n    def onQueryHistoryOrders(self, msg):\r\n        pass\r\n\r\n    # 查询历史成交信息回报，msg为QueryTradesAck实例\r\n    def onQueryHistoryTrades(self, msg):\r\n        pass\r\n\r\n    # 委托执行回报，msg为OrdReport实例\r\n    def onOrderReport(self, msg):\r\n        pass\r\n\r\n    # 委托成交回报，msg为TradeReport实例\r\n    def onTradeReport(self, msg):\r\n        pass\r\n\r\n    # 撤单失败回报，msg为CancelOrderReject实例\r\n    def onCancelOrderReject(self, msg):\r\n        pass\r\n\r\n    # 查询账户历史资产信息回报，msg为QryHisAccAck实例\r\n    def onQueryHistoryAsset(self, msg):\r\n        pass\r\n\r\n    # 查询历史入金信息回报，msg为QryHisDepositAck实例\r\n    def onQueryHistoryDeposit(self, msg):\r\n        pass\r\n    \r\n    # 连接中断回报，一旦被调用，则说明客户端与服务端的连接中断了\r\n    def onError(self, err):\r\n        pass\r\n    \r\n    # 断线自动重连成功\r\n    def onReconnected(self):\r\n        pass\r\n```\r\n\r\n### 7.1.3 AztQuoteSpi\r\n\r\n```python\r\nclass AztQuoteSpi:\r\n    # 订阅行情回报，msg为QuoteRegisterRsp实例\r\n    def onSubscribe(self, msg):\r\n        pass\r\n\r\n    # 取消订阅行情回报，msg为QuoteRegisterRsp实例\r\n    def onUnsubscribe(self, msg):\r\n        pass\r\n\r\n    # 查询行情回报，msg为QuoteMsg实例\r\n    def onQueryQuote(self, msg):\r\n        pass\r\n\r\n    # 行情推送，msg为QuoteMsg实例\r\n    def onQuoteData(self, msg):\r\n        pass\r\n\r\n    # 错误回报，err为可rasie的Exception错误\r\n    def onError(self, err):\r\n        pass\r\n    \r\n    # 断线自动重连成功\r\n    def onReconnected(self):\r\n        pass\r\n```\r\n\r\n### 7.1.4 AztHisQuoteSpi\r\n\r\n```python\r\nclass AztHisQuoteSpi:\r\n    # 查询Tick行情回报,msg为HisQuoteTicksMsg实例\r\n    def onQueryHisTicks(self, msg):\r\n        pass\r\n\r\n    # 查询Bar行情回报,msg为HisQuoteBarsMsg实例\r\n    def onQueryHisBars(self, msg):\r\n        pass\r\n\r\n    # 查询交易日历回报,msg为TradingCalendar实例\r\n    def onGetTradingCalendar(self, msg):\r\n        pass\r\n\r\n    # 查询下个交易日回报,msg为TradingDate实例\r\n    def onGetNextTradingDate(self, msg):\r\n        pass\r\n\r\n    # 查询基本面数据回报,msg为FundamentalsDatas实例\r\n    def onGetFundamentals(self, msg):\r\n        pass\r\n    \r\n    # 连接中断回报,err为可raise的Exception错误\r\n    def onError(self, err):\r\n        pass\r\n    \r\n    # 断线自动重连成功\r\n    def onReconnected(self):\r\n        pass\r\n```\r\n\r\n\r\n\r\n## 7.2 附录2 - 基本面数据参考字段\r\n\r\n### 7.2.1 股票交易衍生表\r\n\r\n- 枚举类型：`KFundamentalsType_TradingDerivative`\r\n\r\n- 字段\r\n\r\n  > | 字段         | 意义                            | 单位 |\r\n  > | ------------ | ------------------------------- | ---- |\r\n  > | dy           | 股息率(滚动12月-按证监会口径)   | %    |\r\n  > | ev           | 企业价值EV(=股权价值＋债权价值) | 元   |\r\n  > | evebitda     | 企业价值／税息折旧摊销前利润    | 倍   |\r\n  > | evps         | 每股企业价值                    | 元   |\r\n  > | flow_share   | 流通股本                        | 股   |\r\n  > | lydy         | 股息率(滚动12月-财汇口径)       | %    |\r\n  > | negotiablemv | 流通市值                        | 元   |\r\n  > | pb           | 市净率(PB)                      | 倍   |\r\n  > | pclfy        | 市现率LFY                       | 倍   |\r\n  > | pcttm        | 市现率TTM                       | 倍   |\r\n  > | pelfy        | 市盈率LFY                       | 倍   |\r\n  > | pelfynpaaei  | 市盈率LFY扣除非经常性损益       | 倍   |\r\n  > | pemrq        | 市盈率MRQ                       | 倍   |\r\n  > | pemrqnpaaei  | 市盈率MRQ扣除非经常性损益       | 倍   |\r\n  > | pettm        | 市盈率TTM                       | 倍   |\r\n  > | pettmnpaaei  | 市盈率TTM扣除非经常性损益       | 倍   |\r\n  > | pslfy        | 市销率LFY                       | 倍   |\r\n  > | psmrq        | 市销率MRQ                       | 倍   |\r\n  > | psttm        | 市销率TTM                       | 倍   |\r\n  > | tclose       | 收盘价                          | 元   |\r\n  > | total_share  | 总股本                          | 股   |\r\n  > | totmktcap    | 总市值                          | 元   |\r\n  > | turnrate     | 当日换手率                      | %    |\r\n\r\n### 7.2.2 资产负债表\r\n\r\n- 枚举类型：`KFundamentalsType_BalanceSheet`\r\n\r\n- 字段\r\n\r\n  > | 字段                   | 意义                             | 单位 |\r\n  > | ---------------------- | -------------------------------- | ---- |\r\n  > | accheldfors            | 划分为持有待售的资产             | 元   |\r\n  > | accopaya               | 应付账款                         | 元   |\r\n  > | accorece               | 应收账款                         | 元   |\r\n  > | accrexpe               | 预提费用                         | 元   |\r\n  > | accudepr               | 累计折旧                         | 元   |\r\n  > | actitradsecu           | 代理买卖证券款                   | 元   |\r\n  > | actiundesecu           | 代理承销证券款                   | 元   |\r\n  > | advapaym               | 预收款项                         | 元   |\r\n  > | avaisellasse           | 可供出售金融资产                 | 元   |\r\n  > | bdspaya                | 应付债券                         | 元   |\r\n  > | bdspayaperbond         | 应付债券:永续债                  | 元   |\r\n  > | bdspayaprest           | 应付债券:优先股                  | 元   |\r\n  > | capisurp               | 资本公积                         | 元   |\r\n  > | cenbankborr            | 向中央银行借款                   | 元   |\r\n  > | comasse                | 公益性生物资产                   | 元   |\r\n  > | consprog               | 在建工程                         | 元   |\r\n  > | copepoun               | 应付手续费及佣金                 | 元   |\r\n  > | copewithreinrece       | 应付分保账款                     | 元   |\r\n  > | copeworkersal          | 应付职工薪酬                     | 元   |\r\n  > | curfds                 | 货币资金                         | 元   |\r\n  > | curtrandiff            | 外币报表折算差额                 | 元   |\r\n  > | defeincotaxliab        | 递延所得税负债                   | 元   |\r\n  > | defereve               | 一年内的递延收益                 | 元   |\r\n  > | defetaxasset           | 递延所得税资产                   | 元   |\r\n  > | deposit                | 吸收存款及同业存放               | 元   |\r\n  > | derifinaasset          | 衍生金融资产                     | 元   |\r\n  > | deriliab               | 衍生金融负债                     | 元   |\r\n  > | deveexpe               | 开发支出                         | 元   |\r\n  > | dividrece              | 应收股利                         | 元   |\r\n  > | divipaya               | 应付股利                         | 元   |\r\n  > | dometicksett           | 国内票证结算                     | 元   |\r\n  > | duenoncliab            | 一年内到期的非流动负债           | 元   |\r\n  > | engimate               | 工程物资                         | 元   |\r\n  > | equiinve               | 长期股权投资                     | 元   |\r\n  > | expecurrliab           | 预计流动负债                     | 元   |\r\n  > | expenoncliab           | 预计非流动负债                   | 元   |\r\n  > | expinoncurrasset       | 一年内到期的非流动资产           | 元   |\r\n  > | expotaxrebarece        | 应收出口退税                     | 元   |\r\n  > | fdsborr                | 拆入资金                         | 元   |\r\n  > | fixedasseclea          | 固定资产清理                     | 元   |\r\n  > | fixedasseimmo          | 固定资产原值                     | 元   |\r\n  > | fixedasseimpa          | 固定资产减值准备                 | 元   |\r\n  > | fixedassenet           | 固定资产净额                     | 元   |\r\n  > | fixedassenetw          | 固定资产净值                     | 元   |\r\n  > | generiskrese           | 一般风险准备                     | 元   |\r\n  > | goodwill               | 商誉                             | 元   |\r\n  > | holdinvedue            | 持有至到期投资                   | 元   |\r\n  > | hydrasset              | 油气资产                         | 元   |\r\n  > | insucontrese           | 保险合同准备金                   | 元   |\r\n  > | intaasset              | 无形资产                         | 元   |\r\n  > | intelpay               | 内部应付款                       | 元   |\r\n  > | intelrece              | 内部应收款                       | 元   |\r\n  > | intepaya               | 应付利息                         | 元   |\r\n  > | interece               | 应收利息                         | 元   |\r\n  > | inteticksett           | 国际票证结算                     | 元   |\r\n  > | inve                   | 存货                             | 元   |\r\n  > | inveprop               | 投资性房地产                     | 元   |\r\n  > | lcopeworkersal         | 长期应付职工薪酬                 | 元   |\r\n  > | lendandloan            | 发放贷款及垫款                   | 元   |\r\n  > | liabheldfors           | 划分为持有待售的负债             | 元   |\r\n  > | logprepexpe            | 长期待摊费用                     | 元   |\r\n  > | longborr               | 长期借款                         | 元   |\r\n  > | longdefeinco           | 长期递延收益                     | 元   |\r\n  > | longpaya               | 长期应付款                       | 元   |\r\n  > | longrece               | 长期应收款                       | 元   |\r\n  > | margrece               | 应收保证金                       | 元   |\r\n  > | margrequ               | 应付保证金                       | 元   |\r\n  > | minysharrigh           | 少数股东权益                     | 元   |\r\n  > | notespaya              | 应付票据                         | 元   |\r\n  > | notesrece              | 应收票据                         | 元   |\r\n  > | ocl                    | 其他综合收益                     | 元   |\r\n  > | othequin               | 其他权益工具                     | 元   |\r\n  > | othercurrasse          | 其他流动资产                     | 元   |\r\n  > | othercurreliabi        | 其他流动负债                     | 元   |\r\n  > | otherfeepaya           | 其他应交款                       | 元   |\r\n  > | otherlonginve          | 其他长期投资                     | 元   |\r\n  > | othernoncasse          | 其他非流动资产                   | 元   |\r\n  > | othernoncliabi         | 其他非流动负债                   | 元   |\r\n  > | otherpay               | 其他应付款                       | 元   |\r\n  > | otherrece              | 其他应收款                       | 元   |\r\n  > | paidincapi             | 实收资本(或股本)                 | 元   |\r\n  > | paresharrigh           | 归属于母公司股东权益合计         | 元   |\r\n  > | perbond                | 永续债                           | 元   |\r\n  > | plac                   | 拆出资金                         | 元   |\r\n  > | premrece               | 应收保费                         | 元   |\r\n  > | prep                   | 预付款项                         | 元   |\r\n  > | prepexpe               | 待摊费用                         | 元   |\r\n  > | prest                  | 优先股                           | 元   |\r\n  > | prodasse               | 生产性生物资产                   | 元   |\r\n  > | purcresaasset          | 买入返售金融资产                 | 元   |\r\n  > | reincontrese           | 应收分保合同准备金               | 元   |\r\n  > | reinrece               | 应收分保账款                     | 元   |\r\n  > | rese                   | 盈余公积                         | 元   |\r\n  > | righaggr               | 所有者权益(或股东权益)合计       | 元   |\r\n  > | sellrepasse            | 卖出回购金融资产款               | 元   |\r\n  > | settresedepo           | 结算备付金                       | 元   |\r\n  > | sformatcurrasse        | 特殊格式_流动资产                | 元   |\r\n  > | sformatcurreliabi      | 特殊格式_流动负债                | 元   |\r\n  > | sformatnoncasse        | 特殊格式_非流动资产              | 元   |\r\n  > | sformatnoncliab        | 特殊格式_长期负债                | 元   |\r\n  > | sformatparesharrigh    | 特殊格式_归属母公司股东权益      | 元   |\r\n  > | sformatrighaggr        | 特殊格式_含少数股权股东权益      | 元   |\r\n  > | sformattotasset        | 特殊格式_总资产                  | 元   |\r\n  > | sformattotliab         | 特殊格式_负债合计                | 元   |\r\n  > | sformattotliabsharequi | 特殊格式_负债及权益              | 元   |\r\n  > | shorttermbdspaya       | 应付短期债券                     | 元   |\r\n  > | shorttermborr          | 短期借款                         | 元   |\r\n  > | smergercurrasse        | 特殊归并_流动资产                | 元   |\r\n  > | smergercurreliabi      | 特殊归并_流动负债                | 元   |\r\n  > | smergernoncasse        | 特殊归并_非流动资产              | 元   |\r\n  > | smergernoncliab        | 特殊归并_长期负债                | 元   |\r\n  > | smergerparesharrigh    | 特殊归并_归属母公司股东权益      | 元   |\r\n  > | smergerrighaggr        | 特殊归并_含少数股权股东权益      | 元   |\r\n  > | smergertotasset        | 特殊归并_总资产                  | 元   |\r\n  > | smergertotliab         | 特殊归并_负债合计                | 元   |\r\n  > | smergertotliabsharequi | 特殊归并_负债及权益              | 元   |\r\n  > | specpaya               | 专项应付款                       | 元   |\r\n  > | specrese               | 专项储备                         | 元   |\r\n  > | subsrece               | 应收补贴款                       | 元   |\r\n  > | sunevenassetliabeuqi   | 特殊不平_资产与负债权益          | 元   |\r\n  > | sunevencurrasse        | 特殊不平_流动资产                | 元   |\r\n  > | sunevencurreliabi      | 特殊不平_流动负债                | 元   |\r\n  > | sunevennoncasse        | 特殊不平_非流动资产              | 元   |\r\n  > | sunevennoncliab        | 特殊不平_长期负债                | 元   |\r\n  > | sunevenparesharrigh    | 特殊不平_归属母公司股东权益      | 元   |\r\n  > | sunevenrighaggr        | 特殊不平_含少数股权股东权益      | 元   |\r\n  > | suneventotasset        | 特殊不平_总资产                  | 元   |\r\n  > | suneventotliab         | 特殊不平_负债合计                | 元   |\r\n  > | suneventotliabsharequi | 特殊不平_负债及权益              | 元   |\r\n  > | taxespaya              | 应交税费                         | 元   |\r\n  > | topaycashdivi          | 拟分配现金股利                   | 元   |\r\n  > | totalcurrliab          | 流动负债合计                     | 元   |\r\n  > | totalnoncassets        | 非流动资产合计                   | 元   |\r\n  > | totalnoncliab          | 非流动负债合计                   | 元   |\r\n  > | totasset               | 资产总计                         | 元   |\r\n  > | totcurrasset           | 流动资产合计                     | 元   |\r\n  > | totliab                | 负债合计                         | 元   |\r\n  > | totliabsharequi        | 负债和所有者权益(或股东权益)总计 | 元   |\r\n  > | tradfinasset           | 交易性金融资产                   | 元   |\r\n  > | tradfinliab            | 交易性金融负债                   | 元   |\r\n  > | tradshartrad           | 股权分置流通权                   | 元   |\r\n  > | treastk                | 减:库存股                        | 元   |\r\n  > | undiprof               | 未分配利润                       | 元   |\r\n  > | unreinveloss           | 未确定的投资损失                 | 元   |\r\n  > | unseg                  | 待处理流动资产损益               | 元   |\r\n  > | warliabrese            | 担保责任赔偿准备金               | 元   |\r\n\r\n### 7.2.3 现金流量表\r\n\r\n- 枚举类型：`KFundamentalsType_Cashflow`\r\n\r\n- 字段\r\n\r\n  > | 字段                  | 意义                                                | 单位 |\r\n  > | --------------------- | --------------------------------------------------- | ---- |\r\n  > | accrexpeincr          | 预提费用的增加                                      | 元   |\r\n  > | acquassetcash         | 购建固定资产,无形资产和其他长期资产所支付的现金     | 元   |\r\n  > | assedepr              | 固定资产折旧,油气资产折耗,生产性物资折旧            | 元   |\r\n  > | asseimpa              | 资产减值准备                                        | 元   |\r\n  > | bankloannetincr       | 向中央银行借款净增加额                              | 元   |\r\n  > | bizcashinfl           | 经营活动现金流入小计                                | 元   |\r\n  > | bizcashoutf           | 经营活动现金流出小计                                | 元   |\r\n  > | biznetcflow           | 经营活动产生现金流量净额                            | 元   |\r\n  > | cashfinalbala         | 现金的期末余额                                      | 元   |\r\n  > | cashneti              | 现金及现金等价物的净增加额                          | 元   |\r\n  > | cashnetr              | 五,现金及现金等价物净增加额                         | 元   |\r\n  > | cashopenbala          | 现金的期初余额                                      | 元   |\r\n  > | charintecash          | 收取利息,手续费及佣金的现金                         | 元   |\r\n  > | chgexchgchgs          | 四,汇率变动对现金及现金等价物的影响                 | 元   |\r\n  > | debtintocapi          | 债务转为资本                                        | 元   |\r\n  > | debtpaycash           | 偿还债务支付的现金                                  | 元   |\r\n  > | defeincoincr          | 递延收益增加(减:减少)                               | 元   |\r\n  > | defetaxassetdecr      | 递延所得税资产减少                                  | 元   |\r\n  > | defetaxliabincr       | 递延所得税负债增加                                  | 元   |\r\n  > | deponetr              | 客户存款和同业存放款项净增加额                      | 元   |\r\n  > | dispfixedassetloss    | 处置固定资产,无形资产和其他长期资产的损失           | 元   |\r\n  > | disptradnetincr       | 处置交易性金融资产净增加额                          | 元   |\r\n  > | diviprofpaycash       | 分配股利,利润或偿付利息所支付的现金                 | 元   |\r\n  > | equfinalbala          | 现金等价物的期末余额                                | 元   |\r\n  > | equopenbala           | 现金等价物的期初余额                                | 元   |\r\n  > | estidebts             | 预计负债                                            | 元   |\r\n  > | expiconvbd            | 一年内到期的可转换公司债券                          | 元   |\r\n  > | fdsborrnetr           | 拆入资金净增加额                                    | 元   |\r\n  > | finalcashbala         | 六,期末现金及现金等价物余额                         | 元   |\r\n  > | fincashinfl           | 筹资活动现金流入小计                                | 元   |\r\n  > | fincashoutf           | 筹资活动现金流出小计                                | 元   |\r\n  > | finexpe               | 财务费用                                            | 元   |\r\n  > | finfixedasset         | 融资租入固定资产                                    | 元   |\r\n  > | fininstnetr           | 向其他金融机构拆入资金净增加额                      | 元   |\r\n  > | finnetcflow           | 三,筹资活动产生的现金流量净额                       | 元   |\r\n  > | finrelacash           | 支付其他与筹资活动有关的现金                        | 元   |\r\n  > | fixedassescraloss     | 固定资产报废损失                                    | 元   |\r\n  > | fixedassetnetc        | 处置固定资产,无形资产和其他长期资产所收回的现金净额 | 元   |\r\n  > | incrcashpled          | 增加质押和定期存款所支付的现金                      | 元   |\r\n  > | inicashbala           | 期初现金及现金等价物余额                            | 元   |\r\n  > | insnetc               | 收到再保险业务现金净额                              | 元   |\r\n  > | inspremcash           | 收到原保险合同保费取得的现金                        | 元   |\r\n  > | intaasseamor          | 无形资产摊销                                        | 元   |\r\n  > | invcashinfl           | 投资活动现金流入小计                                | 元   |\r\n  > | invcashoutf           | 投资活动现金流出小计                                | 元   |\r\n  > | inveloss              | 投资损失                                            | 元   |\r\n  > | inveredu              | 存货的减少                                          | 元   |\r\n  > | inveretugetcash       | 取得投资收益收到的现金                              | 元   |\r\n  > | invnetcashflow        | 二,投资活动产生的现金流量净额                       | 元   |\r\n  > | invpayc               | 投资所支付的现金                                    | 元   |\r\n  > | invrececash           | 吸收投资收到的现金                                  | 元   |\r\n  > | issbdrececash         | 发行债券收到的现金                                  | 元   |\r\n  > | labopayc              | 购买商品,接受劳务支付的现金                         | 元   |\r\n  > | laborgetcash          | 销售商品,提供劳务收到的现金                         | 元   |\r\n  > | loannetr              | 质押贷款净增加额                                    | 元   |\r\n  > | loansnetr             | 客户贷款及垫款净增加额                              | 元   |\r\n  > | longdefeexpenamor     | 长期待摊费用摊销                                    | 元   |\r\n  > | mananetr              | 一,经营活动产生的现金流量净额                       | 元   |\r\n  > | minysharrigh          | 少数股东权益                                        | 元   |\r\n  > | netprofit             | 净利润                                              | 元   |\r\n  > | other                 | 其他                                                | 元   |\r\n  > | payacticash           | 支付的其他与经营活动有关的现金                      | 元   |\r\n  > | payaincr              | 经营性应付项目的增加                                | 元   |\r\n  > | paycompgold           | 支付原保险合同赔付款项的现金                        | 元   |\r\n  > | paydivicash           | 支付保单红利的现金                                  | 元   |\r\n  > | payintecash           | 支付利息,手续费及佣金的现金                         | 元   |\r\n  > | payinvecash           | 支付的其他与投资活动有关的现金                      | 元   |\r\n  > | paytax                | 支付的各项税费                                      | 元   |\r\n  > | payworkcash           | 支付给职工以及为职工支付的现金                      | 元   |\r\n  > | prepexpedecr          | 待摊费用的减少                                      | 元   |\r\n  > | realestadep           | 投资性房地产折旧,摊销                               | 元   |\r\n  > | recefincash           | 收到其他与筹资活动有关的现金                        | 元   |\r\n  > | recefromloan          | 取得借款收到的现金                                  | 元   |\r\n  > | receinvcash           | 收到的其他与投资活动有关的现金                      | 元   |\r\n  > | receotherbizcash      | 收到的其他与经营活动有关的现金                      | 元   |\r\n  > | receredu              | 经营性应收项目的减少                                | 元   |\r\n  > | reducashpled          | 减少质押和定期存款所收到的现金                      | 元   |\r\n  > | repnetincr            | 回购业务资金净增加额                                | 元   |\r\n  > | savinetr              | 保户储金及投资款净增加额                            | 元   |\r\n  > | sformatbizcashinfl    | 特殊格式_经营流入                                   | 元   |\r\n  > | sformatbizcashoutf    | 特殊格式_经营流出                                   | 元   |\r\n  > | sformatbiznetcflow    | 特殊格式_经营净额附表                               | 元   |\r\n  > | sformatcashneti       | 特殊格式_现金净额附表                               | 元   |\r\n  > | sformatcashnetr       | 特殊格式_现金净额                                   | 元   |\r\n  > | sformatfinalcashbala  | 特殊格式_现金期末                                   | 元   |\r\n  > | sformatfincashinfl    | 特殊格式_筹资流入                                   | 元   |\r\n  > | sformatfincashoutf    | 特殊格式_筹资流出                                   | 元   |\r\n  > | sformatinvcashinfl    | 特殊格式_投资流入                                   | 元   |\r\n  > | sformatinvcashoutf    | 特殊格式_投资流出                                   | 元   |\r\n  > | sformatmananetr       | 特殊格式_经营净额                                   | 元   |\r\n  > | smergerbizcashinfl    | 特殊归并_经营流入                                   | 元   |\r\n  > | smergerbizcashoutf    | 特殊归并_经营流出                                   | 元   |\r\n  > | smergerbiznetcflow    | 特殊归并_经营净额附表                               | 元   |\r\n  > | smergercashneti       | 特殊归并_现金净额附表                               | 元   |\r\n  > | smergercashnetr       | 特殊归并_现金净额                                   | 元   |\r\n  > | smergerfinalcashbala  | 特殊归并_现金期末                                   | 元   |\r\n  > | smergerfincashinfl    | 特殊归并_筹资流入                                   | 元   |\r\n  > | smergerfincashoutf    | 特殊归并_筹资流出                                   | 元   |\r\n  > | smergerfinnetcflow    | 特殊归并_筹资净额                                   | 元   |\r\n  > | smergerinvcashinfl    | 特殊归并_投资流入                                   | 元   |\r\n  > | smergerinvcashoutf    | 特殊归并_投资流出                                   | 元   |\r\n  > | smergerinvnetcashflow | 特殊归并_投资净额                                   | 元   |\r\n  > | smergermananetr       | 特殊归并_经营净额                                   | 元   |\r\n  > | subsnetc              | 处置子公司及其他营业单位收到的现金净额              | 元   |\r\n  > | subspaydivid          | 其中:子公司支付给少数股东的股利,利润                | 元   |\r\n  > | subspaynetcash        | 取得子公司及其他营业单位支付的现金净额              | 元   |\r\n  > | subsrececash          | 其中:子公司吸收少数股东投资收到的现金               | 元   |\r\n  > | sunevenbizcashinfl    | 特殊不平_经营流入                                   | 元   |\r\n  > | sunevenbizcashoutf    | 特殊不平_经营流出                                   | 元   |\r\n  > | sunevenbiznetcflow    | 特殊不平_经营净额附表                               | 元   |\r\n  > | sunevencashneti       | 特殊不平_现金净额附表                               | 元   |\r\n  > | sunevencashnetims     | 特殊不平_现金净额主附表                             | 元   |\r\n  > | sunevencashnetr       | 特殊不平_现金净额                                   | 元   |\r\n  > | sunevenfinalcashbala  | 特殊不平_现金期末                                   | 元   |\r\n  > | sunevenfincashinfl    | 特殊不平_筹资流入                                   | 元   |\r\n  > | sunevenfincashoutf    | 特殊不平_筹资流出                                   | 元   |\r\n  > | sunevenfinnetcflow    | 特殊不平_筹资净额                                   | 元   |\r\n  > | suneveninvcashinfl    | 特殊不平_投资流入                                   | 元   |\r\n  > | suneveninvcashoutf    | 特殊不平_投资流出                                   | 元   |\r\n  > | suneveninvnetcashflow | 特殊不平_投资净额                                   | 元   |\r\n  > | sunevenmananetr       | 特殊不平_经营净额                                   | 元   |\r\n  > | sunevenmananetrms     | 特殊不平_经营净额主附表                             | 元   |\r\n  > | taxrefd               | 收到的税费返还                                      | 元   |\r\n  > | tradepaymnetr         | 存放中央银行和同业款项净增加额                      | 元   |\r\n  > | unfiparachg           | 已结算尚未完工款的增加(减:减少)                     | 元   |\r\n  > | unreinveloss          | 未确认的投资损失                                    | 元   |\r\n  > | unseparachg           | 已完工尚未结算款的减少(减:增加)                     | 元   |\r\n  > | valuechgloss          | 公允价值变动损失                                    | 元   |\r\n  > | withinvgetcash        | 收回投资所收到的现金                                | 元   |\r\n\r\n### 7.2.4 利润表\r\n\r\n- 枚举类型：`KFundamentalsType_Income`\r\n\r\n- 字段\r\n\r\n  > | 字段                     | 意义                                         | 单位 |\r\n  > | ------------------------ | -------------------------------------------- | ---- |\r\n  > | asseimpaloss             | 资产减值损失                                 | 元   |\r\n  > | assoinveprof             | 其中:对联营企业和合营企业的投资收益          | 元   |\r\n  > | avaidistprof             | 可供分配的利润                               | 元   |\r\n  > | avaidistshareprof        | 可供股东分配的利润                           | 元   |\r\n  > | basiceps                 | 基本每股收益                                 | 元   |\r\n  > | bizcost                  | 营业成本                                     | 元   |\r\n  > | bizinco                  | 营业收入                                     | 元   |\r\n  > | biztax                   | 营业税金及附加                               | 元   |\r\n  > | biztotcost               | 营业总成本                                   | 元   |\r\n  > | biztotinco               | 营业总收入                                   | 元   |\r\n  > | cinaforsfv               | 可供出售金融资产公允价值变动损益             | 元   |\r\n  > | cinalibofrbp             | 重新计量设定受益计划净负债或净资产的变动     | 元   |\r\n  > | comdivpaybable           | 应付普通股股利                               | 元   |\r\n  > | compincoamt              | 综合收益总额                                 | 元   |\r\n  > | compnetexpe              | 赔付支出净额                                 | 元   |\r\n  > | contress                 | 提取保险合同准备金净额                       | 元   |\r\n  > | cpltohinco               | 以后将重分类进损益的其他综合收益             | 元   |\r\n  > | custinco                 | 托管收益                                     | 元   |\r\n  > | deveexpe                 | 研发费用                                     | 元   |\r\n  > | dilutedeps               | 稀释每股收益                                 | 元   |\r\n  > | earlyundiprof            | 年初未分配利润                               | 元   |\r\n  > | earnprem                 | 已赚保费                                     | 元   |\r\n  > | epocfhgl                 | 现金流量套期损益的有效部分                   | 元   |\r\n  > | equmcpothinco            | 权益法下在被投资单位不能重分类进损益的其他综 | 元   |\r\n  > | euqmicolothinco          | 权益法下在被投资单位以后将重分类进损益的其他 | 元   |\r\n  > | exchggain                | 汇兑收益                                     | 元   |\r\n  > | extrarbirese             | 提取任意盈余公积                             | 元   |\r\n  > | extstafffund             | 提取职工奖福基金                             | 元   |\r\n  > | finexpe                  | 财务费用                                     | 元   |\r\n  > | futuloss                 | 期货损益                                     | 元   |\r\n  > | htmccinaforsfv           | 持有至到期投资重分类为可供出售金融资产损益   | 元   |\r\n  > | incotaxexpe              | 所得税费用                                   | 元   |\r\n  > | inteexpe                 | 利息支出                                     | 元   |\r\n  > | inteinco                 | 利息收入                                     | 元   |\r\n  > | inveinco                 | 投资收益                                     | 元   |\r\n  > | legalsurp                | 提取法定盈余公积                             | 元   |\r\n  > | mainbizcost              | 主营业务成本                                 | 元   |\r\n  > | mainbizinco              | 主营业务收入                                 | 元   |\r\n  > | manaexpe                 | 管理费用                                     | 元   |\r\n  > | mergeformnetprof         | 被合并方在合并前实现净利润                   | 元   |\r\n  > | minysharinco             | 归属于少数股东的其他综合收益                 | 元   |\r\n  > | minysharincoamt          | 归属于少数股东的综合收益总额                 | 元   |\r\n  > | minysharrigh             | 少数股东损益                                 | 元   |\r\n  > | ncpothinco               | 以后不能重分类进损益的其他综合收益           | 元   |\r\n  > | netprofit                | 净利润                                       | 元   |\r\n  > | noncassetsdisi           | 非流动资产处置利得                           | 元   |\r\n  > | noncassetsdisl           | 非流动资产处置损失                           | 元   |\r\n  > | nonoexpe                 | 营业外支出                                   | 元   |\r\n  > | nonoreve                 | 营业外收入                                   | 元   |\r\n  > | otherbizcost             | 其他业务成本                                 | 元   |\r\n  > | otherbizinco             | 其他业务收入                                 | 元   |\r\n  > | otherbizprof             | 其他业务利润                                 | 元   |\r\n  > | othercompinco            | 其他综合收益                                 | 元   |\r\n  > | otherreasadju            | 其他因素调整                                 | 元   |\r\n  > | parecompinco             | 归属于母公司所有者的其他综合收益             | 元   |\r\n  > | parecompincoamt          | 归属于母公司所有者的综合收益总额             | 元   |\r\n  > | parenetp                 | 归属于母公司所有者的净利润                   | 元   |\r\n  > | perprofit                | 营业利润                                     | 元   |\r\n  > | pextccapifd              | 提取资本公积金                               | 元   |\r\n  > | pextcdevefd              | 提取企业发展基金                             | 元   |\r\n  > | polidiviexpe             | 保单红利支出                                 | 元   |\r\n  > | pounexpe                 | 手续费及佣金支出                             | 元   |\r\n  > | pouninco                 | 手续费及佣金收入                             | 元   |\r\n  > | pprofretuinve            | 利润归还投资                                 | 元   |\r\n  > | prefstockdivi            | 应付优先股股利                               | 元   |\r\n  > | psuppflowcapi            | 补充流动资本                                 | 元   |\r\n  > | realsale                 | 房地产销售收入                               | 元   |\r\n  > | realsalecost             | 房地产销售成本                               | 元   |\r\n  > | reinexpe                 | 分保费用                                     | 元   |\r\n  > | rundisprobyrregcap       | 减少注册资本减少的未分配利润                 | 元   |\r\n  > | salesexpe                | 销售费用                                     | 元   |\r\n  > | sformatavaidistprof      | 特殊格式_可分配利润                          | 元   |\r\n  > | sformatavaidistshareprof | 特殊格式_可供股东分配利润                    | 元   |\r\n  > | sformatbiztotcost        | 特殊格式_营业总成本                          | 元   |\r\n  > | sformatbiztotinco        | 特殊格式_营业总收入                          | 元   |\r\n  > | sformatnetprofit         | 特殊格式_税后净利润                          | 元   |\r\n  > | sformatnetprofitsub      | 特殊格式_净利润子项                          | 元   |\r\n  > | sformatperprofit         | 特殊格式_营业利润                            | 元   |\r\n  > | sformattotprofit         | 特殊格式_利润总额                            | 元   |\r\n  > | sformatundiprof          | 特殊格式_未分配利润                          | 元   |\r\n  > | smergeravaidistprof      | 特殊归并_可分配利润                          | 元   |\r\n  > | smergeravaidistshareprof | 特殊归并_可供股东分配利润                    | 元   |\r\n  > | smergerbiztotcost        | 特殊归并_营业总成本                          | 元   |\r\n  > | smergerbiztotinco        | 特殊归并_营业总收入                          | 元   |\r\n  > | smergercompincoamtsub    | 特殊归并_综合收益总额子项                    | 元   |\r\n  > | smergernetprofit         | 特殊归并_税后净利润                          | 元   |\r\n  > | smergernetprofitsub      | 特殊归并_净利润子项                          | 元   |\r\n  > | smergerperprofit         | 特殊归并_营业利润                            | 元   |\r\n  > | smergertotprofit         | 特殊归并_利润总额                            | 元   |\r\n  > | smergerundiprof          | 特殊归并_未分配利润                          | 元   |\r\n  > | statextrundi             | 提取法定公益金                               | 元   |\r\n  > | subsidyincome            | 补贴收入                                     | 元   |\r\n  > | sunevenavaidistprof      | 特殊不平_可分配利润                          | 元   |\r\n  > | sunevenavaidistshareprof | 特殊不平_可供股东分配利润                    | 元   |\r\n  > | sunevenbiztotcost        | 特殊不平_营业总成本                          | 元   |\r\n  > | sunevenbiztotinco        | 特殊不平_营业总收入                          | 元   |\r\n  > | sunevencompincoamt       | 特殊不平_综合收益总额                        | 元   |\r\n  > | sunevencompincoamtsub    | 特殊不平_综合收益总额子项                    | 元   |\r\n  > | sunevennetprofit         | 特殊不平_税后净利润                          | 元   |\r\n  > | sunevennetprofitsub      | 特殊不平_净利润子项                          | 元   |\r\n  > | sunevenothcompincoamt    | 特殊不平_其他综合收益                        | 元   |\r\n  > | sunevenperprofit         | 特殊不平_营业利润                            | 元   |\r\n  > | suneventotprofit         | 特殊不平_利润总额                            | 元   |\r\n  > | sunevenundiprof          | 特殊不平_未分配利润                          | 元   |\r\n  > | surrgold                 | 退保金                                       | 元   |\r\n  > | tdiffforcur              | 外币财务报表折算差额                         | 元   |\r\n  > | totprofit                | 利润总额                                     | 元   |\r\n  > | trustloss                | 提取储备基金                                 | 元   |\r\n  > | turncapsdivi             | 转作资本股本的普通股股利                     | 元   |\r\n  > | undiprof                 | 未分配利润                                   | 元   |\r\n  > | unreinveloss             | 未确认投资损失                               | 元   |\r\n  > | valuechgloss             | 公允价值变动收益                             | 元   |\r\n  > | othercpltohinco          | 其他                                         | 元   |\r\n\r\n### 7.2.5 主要财务指标\r\n\r\n- 枚举类型：`KFundamentalsType_Prim`\r\n\r\n- 字段\r\n\r\n  > | 字段              | 意义                             | 单位 |\r\n  > | ----------------- | -------------------------------- | ---- |\r\n  > | ebit              | ebit                             | 元   |\r\n  > | ebitda            | ebitda                           | 元   |\r\n  > | ebitdascover      | ebitda利息保障倍数               | 倍   |\r\n  > | ebitscover        | ebit利息保障倍数                 | 倍   |\r\n  > | epsbasic          | (一)基本每股收益                 | 元   |\r\n  > | epsbasicepscut    | 扣除非经常性损益后的基本每股收益 | 元   |\r\n  > | epsdiluted        | 每股收益_摊薄                    | 元   |\r\n  > | epsdilutedcut     | 每股收益_扣除摊薄                | 元   |\r\n  > | epsfulldiluted    | (二)稀释每股收益                 | 元   |\r\n  > | epsfulldilutedcut | 扣除非经常性损益后的稀释每股收益 | 元   |\r\n  > | epsweighted       | 每股收益_加权                    | 元   |\r\n  > | epsweightedcut    | 每股收益_扣除加权                | 元   |\r\n  > | npcut             | 扣除非经常性损益的净利润         | 元   |\r\n  > | opncfps           | 每股经营活动产生的现金流量净额   | 元   |\r\n  > | roediluted        | 净资产收益率_摊薄                | %    |\r\n  > | roedilutedcut     | 净资产收益率_扣除摊薄            | %    |\r\n  > | roeweighted       | 净资产收益率_加权                | %    |\r\n  > | roeweightedcut    | 净资产收益率_扣除加权            | %    |\r\n\r\n### 7.2.6 衍生财务指标\r\n\r\n- 枚举类型：`KFundamentalsType_Deriv`\r\n\r\n- 字段\r\n\r\n  > | 字段                  | 意义                                          | 单位 |\r\n  > | --------------------- | --------------------------------------------- | ---- |\r\n  > | accdeprt              | 累计折旧率                                    | %    |\r\n  > | accpayrt              | 应付账款周转率                                | 次   |\r\n  > | accpaytdays           | 应付账款周转天数                              | 天   |\r\n  > | accrecgturndays       | 应收账款周转天数                              | 天   |\r\n  > | accrecgturnrt         | 应收账款周转率                                | 次   |\r\n  > | assliabrt             | 资产负债率                                    | %    |\r\n  > | capextodepandamor     | 资本性支出/折旧与摊销                         | 倍   |\r\n  > | capimortconms         | 资本固定化比率(含少数股权的净资产)            | %    |\r\n  > | capprort              | 资本金利润率                                  | %    |\r\n  > | cashconvcycle         | 现金周期                                      | 天   |\r\n  > | cashopindex           | 现金运营指数                                  | 倍   |\r\n  > | cashrt                | 现金比率                                      | %    |\r\n  > | compdeprt             | 综合折旧率                                    | %    |\r\n  > | consvatquickrt        | 保守速动比率                                  | %    |\r\n  > | crps                  | 每股资本公积金                                | 元   |\r\n  > | curassturndays        | 流动资产周转天数                              | 天   |\r\n  > | curassturnrt          | 流动资产周转率                                | 次   |\r\n  > | curliabtoltmliabrt    | 负债结构比率                                  | %    |\r\n  > | currentrt             | 流动比率                                      | 倍   |\r\n  > | dps                   | 每股普通股股利                                | 元   |\r\n  > | ebit                  | 息税前利润                                    | 元   |\r\n  > | ebitda                | 息税折旧摊销前利润                            | 元   |\r\n  > | ebitdamargin          | 息税折旧摊销前利润率                          | %    |\r\n  > | ebitdaps              | 每股息税折旧摊销前利润_期末股数               | 元   |\r\n  > | ebitdascover          | ebitda利息保障倍数                            | 倍   |\r\n  > | ebitdatotdebt         | 息税折旧摊销前利润/负债合计                   | 倍   |\r\n  > | ebitmargin            | 息税前利润率                                  | %    |\r\n  > | ebitps                | 每股息税前利润                                | 元   |\r\n  > | ebitscover            | 已获利息倍数                                  | 倍   |\r\n  > | ebittotopi            | 息税前利润/营业总收入                         | 倍   |\r\n  > | em                    | 权益乘数                                      | 倍   |\r\n  > | emconms               | 权益乘数(含少数股权的净资产)                  | 倍   |\r\n  > | epsdiluted            | 摊薄每股收益_期末股数                         | 元   |\r\n  > | epsdilutedcut         | 摊薄每股收益期末股数扣除非经常损益            | 元   |\r\n  > | epsdilutednewp        | 摊薄每股收益_最新股数                         | 元   |\r\n  > | epsdilutedop          | 摊薄每股收益(营业利润)                        | 元   |\r\n  > | equconms              | 含少数股权的净资产                            | 元   |\r\n  > | equrt                 | 产权比率                                      | %    |\r\n  > | equtofa               | 归属母公司的净资产/固定资产                   | 倍   |\r\n  > | equtoic               | 归属母公司净的资产/归属母公司的投入资本       | 倍   |\r\n  > | equtoicconms          | 归属母公司的净资产/含少数股权的投入资本       | 倍   |\r\n  > | equtotdebt            | 归属母公司的净资产/总债务                     | 倍   |\r\n  > | equtotliab            | 归属母公司的净资产/负债合计                   | 倍   |\r\n  > | equturnrt             | 股东权益周转率                                | 次   |\r\n  > | equturnrtconms        | 股东权益周转率(含少数股权权益)                | 次   |\r\n  > | faproportion          | 固定资产比重                                  | %    |\r\n  > | faprort               | 固定资产利润率                                | %    |\r\n  > | faturndays            | 固定资产周转天数                              | 天   |\r\n  > | faturnrt              | 固定资产周转率                                | 次   |\r\n  > | fcfe                  | 股东自由现金流量                              | 元   |\r\n  > | fcfeps                | 每股股东自由现金流量                          | 元   |\r\n  > | fcff                  | 企业自由现金流量                              | 元   |\r\n  > | fcffps                | 每股企业自由现金流量                          | 元   |\r\n  > | finlexprt             | 财务费用率                                    | %    |\r\n  > | incotaxtotp           | 所得税/利润总额                               | 倍   |\r\n  > | intcashrevrt          | 投资收益收现率                                | %    |\r\n  > | intexpconcapint       | 利息支出_包含资本化利息                       | 元   |\r\n  > | intexpcutcapint       | 利息支出_扣除资本化利息                       | 元   |\r\n  > | invtocurassrt         | 存货资产构成率                                | %    |\r\n  > | invturndays           | 存货周转天数                                  | 天   |\r\n  > | invturnrt             | 存货周转率                                    | 次   |\r\n  > | liqdvaluert           | 清算价值比率1                                 | %    |\r\n  > | loanlossrestotloanrt  | 贷款损失准备金/贷款总额                       | %    |\r\n  > | ltmassrt              | 长期资产适合率                                | %    |\r\n  > | ltmdebt               | 长期债务                                      | 元   |\r\n  > | ltmdebttoworkcap      | 长期债务/营运资金                             | 倍   |\r\n  > | ltmliabtoequ          | 长期负债/归属母公司的净资产                   | 倍   |\r\n  > | ltmliabtoopcap        | 长期负债与营运资本比率                        | %    |\r\n  > | ltmliabtota           | 长期负债/总资产                               | 倍   |\r\n  > | ltmliabtotaconms      | 资本化比率_含少数股权的净资产                 | %    |\r\n  > | mgtexprt              | 管理费用率                                    | %    |\r\n  > | naps                  | 摊薄每股净资产_期末股数                       | 元   |\r\n  > | napsadj               | 调整后每股净资产_期末股数                     | 元   |\r\n  > | napsnewp              | 每股净资产_最新股数                           | 元   |\r\n  > | ncfps                 | 每股现金流量净额                              | 元   |\r\n  > | ndebt                 | 净债务                                        | 元   |\r\n  > | ndebttoequ            | 净债务/归属母公司的净资产                     | 倍   |\r\n  > | nfart                 | 固定资产净值率                                | %    |\r\n  > | nitocurass            | 流动资产利润率                                | %    |\r\n  > | nnonopitotp           | 营业外收支净额/利润总额                       | 倍   |\r\n  > | nonintcurliabs        | 无息流动负债                                  | 元   |\r\n  > | nonintnoncurliab      | 无息非流动负债                                | 元   |\r\n  > | nopcapturnrt          | 净营运资本周转率                              | 次   |\r\n  > | nopi                  | 经营活动净收益                                | 元   |\r\n  > | npconmstoavgta        | 总资产净利率_平均(含少数股东损益的净利润)     | %    |\r\n  > | npconmstotp           | 含少数股东损益的净利润/利润总额               | 倍   |\r\n  > | npcut                 | 扣除非经常性损益后的净利润                    | 元   |\r\n  > | npcuttonp             | 扣除非经常性损益后的净利润/归属母公司的净利润 | 倍   |\r\n  > | npgrt                 | 归属母公司净利润增长率                        | %    |\r\n  > | nptoavgta             | 总资产净利率_平均                             | %    |\r\n  > | nptonoconms           | 归属母公司股东的净利润/含少数股东损益的净利润 | 倍   |\r\n  > | nptotp                | 归属母公司的净利润/利润总额                   | 倍   |\r\n  > | ntanga                | 有形资产净值                                  | 元   |\r\n  > | ntangasstondebt       | 有形资产净值/净债务                           | 倍   |\r\n  > | ntangasstotdebt       | 有形资产净值/总债务                           | 倍   |\r\n  > | ntangasstotliab       | 有形资产净值/负债合计                         | 倍   |\r\n  > | nvalchgit             | 价值变动净收益                                | 元   |\r\n  > | nvalchgitotp          | 价值变动净收益/利润总额                       | 倍   |\r\n  > | opancftoopni          | 经营活动产生的现金流量净额/经营活动净收益     | 倍   |\r\n  > | opanitotp             | 经营活动净收益/利润总额                       | %    |\r\n  > | opcaptotart           | 营运资本对总资产比率                          | %    |\r\n  > | opcycle               | 营业周期                                      | 天   |\r\n  > | opexprt               | 营业费用率                                    | %    |\r\n  > | opgpmargin            | 营业毛利润                                    | 元   |\r\n  > | opicftoticf           | 经营活动现金流入占现金流入总量比率            | %    |\r\n  > | opncfps               | 每股经营活动产生的现金流量净额                | 元   |\r\n  > | opncfshtinvetoshtdebt | (经营活动净现金＋短期投资)/短期债务           | 倍   |\r\n  > | opncftocapex          | 经营性现金流量对资本性支出比率                | %    |\r\n  > | opncftodepandamor     | 经营活动净现金/折旧与摊销                     | 倍   |\r\n  > | opncftointexp         | 经营活动净现金/利息支出                       | 倍   |\r\n  > | opncftoltmliab        | 经营活动净现金/长期负债                       | 倍   |\r\n  > | opncftondabt          | 经营活动净现金/净债务                         | 倍   |\r\n  > | opncftonp             | 经营活动净现金/归属母公司的净利润             | 倍   |\r\n  > | opncftonpconms        | 经营活动净现金/含少数股东损益的净利润         | 倍   |\r\n  > | opncftooppro          | 经营活动净现金/营业利润                       | 倍   |\r\n  > | opncftoopti           | 经营性现金净流量/营业总收入                   | 倍   |\r\n  > | opncftoshtdebt        | 经营活动净现金/短期债务                       | 倍   |\r\n  > | opncftosi             | 经营活动净现金/销售收入                       | 倍   |\r\n  > | opncftota             | 经营活动净现金/总资产                         | 倍   |\r\n  > | opncftotdebt          | 经营活动净现金/总债务                         | 倍   |\r\n  > | opncftotliab          | 经营活动净现金/总负债                         | 倍   |\r\n  > | opncftotncf           | 经营活动净现金/总净现金流量                   | 倍   |\r\n  > | opprort               | 营业利润率                                    | %    |\r\n  > | opprototcrt           | 成本费用营业利润率                            | %    |\r\n  > | opptotp               | 营业利润/利润总额                             | 倍   |\r\n  > | oprevps               | 每股营业收入                                  | 元   |\r\n  > | oprevtocurass         | 流动资产营业利润率                            | %    |\r\n  > | prototcrt             | 成本费用利润率                                | %    |\r\n  > | quickrt               | 速动比率                                      | 倍   |\r\n  > | reps                  | 每股留存收益                                  | 元   |\r\n  > | roa                   | 总资产报酬率                                  | %    |\r\n  > | roaaannual            | 年化总资产净利率                              | %    |\r\n  > | roaannual             | 年化总资产报酬率                              | %    |\r\n  > | roeannual             | 年化净资产收益率                              | %    |\r\n  > | roeavg                | 净资产收益率_平均                             | %    |\r\n  > | roeavgcut             | 净资产收益率_平均(扣除非经常损益)             | %    |\r\n  > | roebyminnpornpcut     | 净资产收益率扣除前后净利润孰低归属母公司      | %    |\r\n  > | roediluted            | 摊薄净资产收益率                              | %    |\r\n  > | roedilutedcut         | 摊薄净资产收益率_扣除非经常损益               | %    |\r\n  > | roic                  | 投入资本回报率                                | %    |\r\n  > | rota                  | 总资本回报率                                  | %    |\r\n  > | scashrevtoopirt       | 销售商品提供劳务收到的现金/营业收入           | 倍   |\r\n  > | scostrt               | 销售成本率                                    | %    |\r\n  > | sgpmargin             | 销售毛利率                                    | %    |\r\n  > | shtdebt               | 短期债务                                      | 元   |\r\n  > | shtliabtotliabrt      | 短期负债/负债总额                             | 倍   |\r\n  > | snpmarginconms        | 销售净利率(含少数股权权益)                    | %    |\r\n  > | srps                  | 每股盈余公积金                                | 元   |\r\n  > | taavg                 | 平均资产总额                                  | 元   |\r\n  > | tagrt                 | 营业总收入增长率                              | %    |\r\n  > | tangasstota           | 有形资产/总资产                               | 倍   |\r\n  > | taturndays            | 总资产周转天数                                | 天   |\r\n  > | taturnrt              | 总资产周转率                                  | %    |\r\n  > | tc                    | 成本费用总额                                  | 元   |\r\n  > | tcap                  | 总资本                                        | 元   |\r\n  > | tcexprt               | 成本费用率                                    | %    |\r\n  > | tdebt                 | 总债务                                        | 元   |\r\n  > | tdebttofart           | 有形净值债务率                                | %    |\r\n  > | tdebttoic             | 总债务/归属母公司的投入资本                   | 倍   |\r\n  > | tdebttoicconms        | 总债务/含少数股权的投入资本                   | 倍   |\r\n  > | tdtoebitda            | 总债务/ebitda                                 | 倍   |\r\n  > | toprevps              | 每股营业总收入                                | 元   |\r\n  > | totic                 | 投入资本                                      | 元   |\r\n  > | tptoebit              | 利润总额/息税前利润                           | 倍   |\r\n  > | triexp                | 三项费用                                      | 元   |\r\n  > | triexprt              | 三项费用比重                                  | %    |\r\n  > | triexptotopi          | 三项费用占营业总收入比率                      | %    |\r\n  > | upps                  | 每股未分配利润                                | 元   |\r\n  > | workcap               | 营运资金                                      | 元   |\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "azt,aztve,aztquant,quant",
    "license": "GNU Lesser General Public License (LGPL)  Copyright (c) 2022 Qujamlee from www.aztquant.com  This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.",
    "maintainer": "",
    "maintainer_email": "Qujamlee <qujamlee@126.com>",
    "name": "AztClient",
    "package_url": "https://pypi.org/project/AztClient/",
    "platform": null,
    "project_url": "https://pypi.org/project/AztClient/",
    "project_urls": {
      "documentation": "https://www.aztquant.com",
      "homepage": "https://www.aztquant.com",
      "repository": "https://gitee.com/Qujamlee/azt-client.git"
    },
    "release_url": "https://pypi.org/project/AztClient/1.0.4/",
    "requires_dist": [
      "pandas",
      "colorlog (>=6.6.0)",
      "pyzmq (>=23.2.0)",
      "grpcio (>=1.47.0)",
      "protobuf (>=3.19.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "AztQuant Server Python Client",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17428342,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d928d08b90d007433d56b199ba2f58c9398b15f5feaacfadbeb09252d92216e7",
          "md5": "7d9253b9dacbe0ad52c2fa47b04c8c4d",
          "sha256": "ff5025c60872418bcdcc602fdec7f38b74587a5d659c9b35fee2164df90310b1"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d9253b9dacbe0ad52c2fa47b04c8c4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 159408,
        "upload_time": "2022-12-23T10:04:07",
        "upload_time_iso_8601": "2022-12-23T10:04:07.647694Z",
        "url": "https://files.pythonhosted.org/packages/d9/28/d08b90d007433d56b199ba2f58c9398b15f5feaacfadbeb09252d92216e7/AztClient-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "615a21aedae4229e827d38f18af86b09d535b9605fce748ff202e1f379ee5d86",
          "md5": "6dbe375296a805a1f50fdf570c8b44b0",
          "sha256": "53eaa61c67a1f0db2b5eeb51d82ed5b3d406ffa4acda9856b30e7f2971a1589b"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6dbe375296a805a1f50fdf570c8b44b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 159143,
        "upload_time": "2023-02-02T09:50:46",
        "upload_time_iso_8601": "2023-02-02T09:50:46.886173Z",
        "url": "https://files.pythonhosted.org/packages/61/5a/21aedae4229e827d38f18af86b09d535b9605fce748ff202e1f379ee5d86/AztClient-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "204aa93f2878ef6528836b99aa4bd96197c717c2475a1161acfc500e1f8e1ad8",
          "md5": "809022a1d886cdcb4f2e148016d91beb",
          "sha256": "6a6c39c53192b371e785b48d90a1b99870fd67521b8d8f05916f147c6a08aab2"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "809022a1d886cdcb4f2e148016d91beb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 162160,
        "upload_time": "2023-03-24T06:33:13",
        "upload_time_iso_8601": "2023-03-24T06:33:13.835574Z",
        "url": "https://files.pythonhosted.org/packages/20/4a/a93f2878ef6528836b99aa4bd96197c717c2475a1161acfc500e1f8e1ad8/AztClient-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f512c5916c2e23b52be54a2079561fd6c1791ad0b799d9010628987d97eb05a3",
          "md5": "0ca566187bafb492cb2ac755458cd382",
          "sha256": "d281bf39a9e372387d435ff278d220a0aef4f3d5814f94fddc262fbb5d575426"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ca566187bafb492cb2ac755458cd382",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 159774,
        "upload_time": "2023-02-10T11:28:35",
        "upload_time_iso_8601": "2023-02-10T11:28:35.296682Z",
        "url": "https://files.pythonhosted.org/packages/f5/12/c5916c2e23b52be54a2079561fd6c1791ad0b799d9010628987d97eb05a3/AztClient-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90e8c2a709610cda94fa264ac5a033f08cfa65e504cc3bc347d70cd3939e8b8a",
          "md5": "96927033c172ce2b32568b4a938604fd",
          "sha256": "8ec40a5b5404f000a4a2a2bc14485c1f22f2e8a6541c986f34bc11be34fed2f4"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96927033c172ce2b32568b4a938604fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 162160,
        "upload_time": "2023-03-24T06:36:42",
        "upload_time_iso_8601": "2023-03-24T06:36:42.816227Z",
        "url": "https://files.pythonhosted.org/packages/90/e8/c2a709610cda94fa264ac5a033f08cfa65e504cc3bc347d70cd3939e8b8a/AztClient-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "214296bbe8a9a3dcdc99fd41a30337f8a5178c43d2a734cdb36802b3924a29d0",
          "md5": "20b6cc3fe104f4b696deee947ccaf4b3",
          "sha256": "5d905c472451601ff61ccb371102a1fa7054dc319903827bcc95275f2f53c324"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "20b6cc3fe104f4b696deee947ccaf4b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 170462,
        "upload_time": "2023-03-24T06:36:46",
        "upload_time_iso_8601": "2023-03-24T06:36:46.736505Z",
        "url": "https://files.pythonhosted.org/packages/21/42/96bbe8a9a3dcdc99fd41a30337f8a5178c43d2a734cdb36802b3924a29d0/AztClient-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fef9d7cf8d2373c17fc11e2346fd34e792d7005e253c0b06b8477fcb6a27185",
          "md5": "11fcf7de380a9b3e91e43c3670d320d1",
          "sha256": "42865000a4d56af6e08a2c570f03fbc028e40a9b23e68334a12e5d8cc5e838fb"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11fcf7de380a9b3e91e43c3670d320d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 162169,
        "upload_time": "2023-03-24T08:07:39",
        "upload_time_iso_8601": "2023-03-24T08:07:39.203505Z",
        "url": "https://files.pythonhosted.org/packages/7f/ef/9d7cf8d2373c17fc11e2346fd34e792d7005e253c0b06b8477fcb6a27185/AztClient-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee6392c612f3318ac27c01ec21fc4cef154eaa3923e586b37977c508facf294a",
          "md5": "fbdc8aea1207087e96c278e85915033a",
          "sha256": "7fd5e51bf3e27a57a0d6e3dece07d80b7ee9b05e5d8ca70947f3bccccb8178f7"
        },
        "downloads": -1,
        "filename": "AztClient-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fbdc8aea1207087e96c278e85915033a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 170494,
        "upload_time": "2023-03-24T08:07:44",
        "upload_time_iso_8601": "2023-03-24T08:07:44.025808Z",
        "url": "https://files.pythonhosted.org/packages/ee/63/92c612f3318ac27c01ec21fc4cef154eaa3923e586b37977c508facf294a/AztClient-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fef9d7cf8d2373c17fc11e2346fd34e792d7005e253c0b06b8477fcb6a27185",
        "md5": "11fcf7de380a9b3e91e43c3670d320d1",
        "sha256": "42865000a4d56af6e08a2c570f03fbc028e40a9b23e68334a12e5d8cc5e838fb"
      },
      "downloads": -1,
      "filename": "AztClient-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11fcf7de380a9b3e91e43c3670d320d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 162169,
      "upload_time": "2023-03-24T08:07:39",
      "upload_time_iso_8601": "2023-03-24T08:07:39.203505Z",
      "url": "https://files.pythonhosted.org/packages/7f/ef/9d7cf8d2373c17fc11e2346fd34e792d7005e253c0b06b8477fcb6a27185/AztClient-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee6392c612f3318ac27c01ec21fc4cef154eaa3923e586b37977c508facf294a",
        "md5": "fbdc8aea1207087e96c278e85915033a",
        "sha256": "7fd5e51bf3e27a57a0d6e3dece07d80b7ee9b05e5d8ca70947f3bccccb8178f7"
      },
      "downloads": -1,
      "filename": "AztClient-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fbdc8aea1207087e96c278e85915033a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 170494,
      "upload_time": "2023-03-24T08:07:44",
      "upload_time_iso_8601": "2023-03-24T08:07:44.025808Z",
      "url": "https://files.pythonhosted.org/packages/ee/63/92c612f3318ac27c01ec21fc4cef154eaa3923e586b37977c508facf294a/AztClient-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}