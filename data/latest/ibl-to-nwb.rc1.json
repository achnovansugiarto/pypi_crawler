{
  "info": {
    "author": "Saksham Sharda, Ben Dichter",
    "author_email": "saksham20.sharda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# IBL-to-nwb\nThis repository houses the modules used to convert IBL specific neurophysiology data in the open source [ONE](https://docs.internationalbrainlab.org/en/stable/03_tutorial.html) format (Alyx + ALF) into NWB data standard.\n\n- __Alyx__: a data base that contains all the metadata associated with an experiment: session details, subject details, probe information etc. This data has a one-to-one mapping to supported metadata of NWB. \n- __ALF__: format for storage of all the experimental data: electrophysiology time series (raw + processed), trials data, sorted spikes data, behavior (raw + processed), stimulus.\nThe figure below shows the mapping from ALF/ALyx to NWB: \n![](https://github.com/catalystneuro/IBL-to-nwb/blob/documentation/images/ibl_nwb_map.jpg)\n\n## Usage:\n1. **IBL to NWB conversion (using API):**  \n \n    1. Installation: \n    \n       ```shell\n       cd desired-path\n       git clone https://github.com/catalystneuro/IBL-to-nwb.git\n       cd IBL-to-nwb\n       ```\n       create virtual environment and install dependencies from requirements.txt: \n       \n       ```shell\n       conda env create -f conda_environment.yaml\n       conda activate IBL2NWB\n       ```\n    2. Retrive the id of the experiment of interest using [ONE](https://docs.internationalbrainlab.org/en/stable/03_tutorial.html) api:\n    \n       ```python\n       from oneibl.one import ONE\n       one=ONE()\n       # use the ONE doc to use correct search terms to retrieve the eid\n       eid = one.search(date_range=['2020-03-23', '2020-03-24'],subject='CSH_ZAD_011')[0]\n       # example eid:\n       eid = 'da188f2c-553c-4e04-879b-c9ea2d1b9a93'\n       ```\n     3. Using the eid, generate a json file containing all the collected data/metadata from the servers (Example output [file](https://github.com/catalystneuro/IBL-to-nwb/blob/master/AlyxToNWB/schema/example_metadata_output_file.json)):\n     \n        ```python\n        from .ibl_nwb import Alyx2NWBMetadata\n        metadata_object = Alyx2NWBMetadata(eid=eid,one_obj=one)\n        # alternatively, you can also provide one search **kwargs directly:\n        metadata_obj = Alyx2NWBMetadata(date_range=['2020-03-23', '2020-03-24'],subject='CSH_ZAD_011')\n        json_save_loc = r'path-to-save-json-file.json'\n        metadata_obj.write_metadata(json_save_loc)\n        ```\n     4. Generate nwb file using the saved json file:\n      \n        ```python\n        from .ibl_nwb import Alyx2NWBConverter\n        nwb_saveloc = r'nwb-save-path.nwb'\n        save_raw = False # keep as true if you want to add raw (ephysData.raw.* , camera.raw*) files, these are large files and will take time to download and create the nwbfile!!\n        converter=Alyx2NWBConverter(nwb_metadata_file=json_save_loc, saveloc=nwb_saveloc, save_raw=save_raw)\n        # alternatively you can also provide the metadata object:\n        converter=Alyx2NWBConverter(metadata_obj=metadata_obj, saveloc=nwb_saveloc)\n        # create nwb file: \n        converter.run_conversion()\n        converter.write_nwb()\n        ```\n        \n     This should create an nwb file. [Example file](https://drive.google.com/file/d/1BEQ0z-qby6tO_QtA_FJ-Up51Thh6jYGu/view?usp=sharing). \n       \n\n2. **IBL to NWB conversion (using GUI):** \n\n    ```python\n    from .ibl_nwb import Alyx2NWBGui\n    Alyx2NWBGui(eid=eid, nwbfile_saveloc=nwb_saveloc, metadata_fileloc=json_save_loc)\n    #alternatively provide the one search kwargs:\n    Alyx2NWBGui(nwbfile_saveloc=nwb_saveloc, metadata_fileloc=json_save_loc, dataset_types=['_iblmic_audioSpectrogram.frequencies''])\n    ```\n    This opens up a gui which will allow you to edit nwbfile/ibl session related metadata and also convert to nwb using `run_conversion` button. Check the animation       below on how to navigate this gui:\n    \n    ![](https://github.com/catalystneuro/IBL-to-nwb/blob/documentation/images/gui_gif.gif)\n    \n3. **Visualization of nwbfile using [nwbwigets](https://github.com/NeurodataWithoutBorders/nwb-jupyter-widgets) in a __Jupyter notebook__**:\n \n    ```python\n    from pynwb import NWBHDF5IO\n    from nwbwidgets import nwb2widget\n    from IPython.display import display\n    io = NWBHDF5IO(r\"path-to-saved-nwb-file.nwb\", mode='r', load_namespaces=True)\n    nwb = io.read()\n    a=nwb2widget(nwb)\n    display(a)\n    ```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/catalystneuro/IBL-to-nwb",
    "keywords": "nwb,ibl",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ibl-to-nwb",
    "package_url": "https://pypi.org/project/ibl-to-nwb/",
    "platform": "",
    "project_url": "https://pypi.org/project/ibl-to-nwb/",
    "project_urls": {
      "Homepage": "https://github.com/catalystneuro/IBL-to-nwb"
    },
    "release_url": "https://pypi.org/project/ibl-to-nwb/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tools to convert IBL data to NWB format",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8501395,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed094d2137cb83a643d79a1b6c9f6481d698459d47aadc713b63a6e3e4bdc7d",
          "md5": "125f5b45d94c73064caced355a34302e",
          "sha256": "3453c7209b250c86c89045900c88286872ae3ff8d5d5e3d87cee9787363d34d5"
        },
        "downloads": -1,
        "filename": "ibl_to_nwb-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "125f5b45d94c73064caced355a34302e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3875,
        "upload_time": "2020-10-26T10:56:47",
        "upload_time_iso_8601": "2020-10-26T10:56:47.096696Z",
        "url": "https://files.pythonhosted.org/packages/fe/d0/94d2137cb83a643d79a1b6c9f6481d698459d47aadc713b63a6e3e4bdc7d/ibl_to_nwb-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fed094d2137cb83a643d79a1b6c9f6481d698459d47aadc713b63a6e3e4bdc7d",
        "md5": "125f5b45d94c73064caced355a34302e",
        "sha256": "3453c7209b250c86c89045900c88286872ae3ff8d5d5e3d87cee9787363d34d5"
      },
      "downloads": -1,
      "filename": "ibl_to_nwb-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "125f5b45d94c73064caced355a34302e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3875,
      "upload_time": "2020-10-26T10:56:47",
      "upload_time_iso_8601": "2020-10-26T10:56:47.096696Z",
      "url": "https://files.pythonhosted.org/packages/fe/d0/94d2137cb83a643d79a1b6c9f6481d698459d47aadc713b63a6e3e4bdc7d/ibl_to_nwb-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}