{
  "info": {
    "author": "runvnc (Jason Livesay)",
    "author_email": "runvnc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# genpyteal\n\nConverts Python to PyTeal. Your mileage will vary depending on how much you deviate from the examples.\nIts quite easy to get an error by doing something not supported.  However, it often still outputs useful PyTeal that you can then\nfix up.\n\nIf you appreciate this tool, you are welcome to send ALGOs to `RMONE54GR6CYOJREKZQNFCZAUGJHSPBUJNFRBTXS4NKNQL3NJQIHVCS53M`.\n## Installation\n\n`pip3 install genpyteal` or `pip install genpyteal`\n\n### ABI \n\n\nAs of this writing, if you use any ABI stuff, you will need to uninstall regular pyteal and do this:\n`pip install -e git+https://github.com/algorand/pyteal@abi-types#egg=pyteal`\n\n`b67a71a224eb1b8c477ae32b5c4d0ab01a680edb`\n\n*Warning*: The scripts have `python3` in them because that is what works on my system. It only works with Python 3. \nThere might be some system where it needs to say `python` instead.  If so, maybe just pull the code from the github repo to change it?\n\n## Usage\n\nTo generate PyTeal:\n\n`genpyteal thescript.py`\n\nTo generate PyTeal and do syntax highlighting (requires `pygmentize` and `boxes` to be installed):\n\n`genpyteal thescript.py | niceout`\n\nTo generate PyTeal and then TEAL:\n\n`genteal thescript.py`\n\nTo show the AST (FST) of a Python program (uses RedBaron .help(), and requires `ipython` installed):\n\n`showast thescript.py`\n\n## Supported constructs\n\n`statement list` (= Seq), `integer const` ( = Int(n)), `if/else`, `while`, `print` (= `Log`), `+` ( = Concat(str1, str2) ), \n`True/False` (= 1/0), `and/or/not` ...\n(maybe something I am forgetting).\n\n## Details\n\nYou can use a subset of Python. For scratch variables, you will need to initialize them at the beginning of a function, such as `x = 0` or `s = \"tom\"`. It uses \nthat to determine the type. Sometimes you may need to specify Bytes or Int still. Integer/string literals get Int/Bytes added automatically. You can use `print` instead of Log. \n\nName the main function `app` to indicate a stateful application contract, or `sig` for a LogicSig contract.\n\nFor transaction fields, you can leave off the parenthesis, e.g. `Txn.sender` instead of `Txn.sender()`.\n\nIt will assume functions return `uint64` unless you specify `@bytes` or there is no return, which will automatically insert `@Subroutine(TealType.none)`\n\nIf you want to print a number in the log, you can use the numtostr function I made:\n\n```python\nfrom lib import util\n\ndef app():\n  print(\"Your number is \" + util.numtostr(100))\n\n```\n\nThe best explanation is just to show the examples.\n\n## Examples\n\n## examples/abiadv.py \n\n```python\nfrom lib.util import *\n\nJUNK_ASSET = 575753250\n\nfgGreen = \"\\033[38;5;2m\"\nfgYellow = \"\\033[38;5;11m\"\nfgPurple = \"\\033[38;5;35m\"\nfgWhite = \"\\033[38;5;15m\"\nfgRed = '\\033[38;5;31m'\nbgWhite = '\\033[48;2;250;250;250m'\nbgRed = '\\033[48;2;250;0;0m'\nresetColor = \"\\033[0m\\033[48;2;0;0;0m\"\n\nyard = \"Front Yard\\nYou are standing in front of a house. It is white, with green trim.\"\nyard_connects = \"NL\"\nyard_conn_descr = \"To the north is the front door.\"\n\nliving_room = \"\"\"Living Room\nThis is a small living room with a carpet that should have been replaced 15 years ago. There is a beat-up couch to sit on.\"\"\"\nliving_room_connects = \"ESSYWD\"\nliving_room_conn_descr = \"\"\"From here you can enter the study to the east, the dining room (west), or go back outside (south).\"\"\"\n\nstudy = \"\"\"Study\nThere is an Ohio Scientific computer here from the late 1970s. A rickety bookshelf contains some old Dungeons & Dragons books.\"\"\"\nstudy_connects = \"WL\"\nstudy_conn_descr = \"To the west is the living room.\"  \n\ndining = \"\"\"Dining Room\nThis is a small area with an old wooden table taking up most of the space. The layers of stains on the carpet are truly breathtaking.\nThere is a merchant here. He has his goods spread out on the table.\"\"\"\ndining_connects = \"EL\"\ndining_conn_descr = \"To the east is the living room.\"\n\ncomputer = \"\"\"The screen shows the following:\n\\033[38;2;138;226;52m\\033[48;2;0;21;0m\nA>dir                             \nA: MOVCPM   COM  \nA: ASMAVM   COM  \nA: CHIP8    COM  \n\\033[0m\n\"\"\"\n\nnote = \"\"\"\nWelcome to 'Mini-Adventure'. For a list of commands, type /menu.\nYou probably already knew that though, or you would not have got to this point.\n\"\"\"\n\nsign = \"\"\"\n\\033[38;5;2mSale!\nOnly 0.02 ALGO per item\\033[0m\n\nTo buy an item (if using the 'avmloop' client), enter the following command:\n\\033[38;2;138;226;52m\\033[48;2;0;21;0m\n> /optin 23423423,/pay 0.02,buy junk\\033[0m\n\"\"\"\n\n@bytes\ndef get_connects(l):\n  if l == 'Y': return yard_connects\n  if l == 'L': return living_room_connects\n  if l == 'S': return study_connects\n  if l == 'D': return dining_connects\n  return ''\n\ndef move_(location, direction):\n  connects = \"\"\n  connects = get_connects(location)\n  i = 0\n  l = 0\n  d = 0\n  print(\"Trying to move \" + direction)\n  while i < Len(connects):\n    if Extract(connects, i, 1) == direction:\n      lput('location', Extract(connects, i + 1, 1))\n      d = show(lgets('location'))\n      return True\n    i = i + 2\n      \n  return False\n\ndef printloc(descr, conn_descr, connects):\n  print(fgWhite)\n  print(descr)\n  \n  print(fgYellow)\n  print(conn_descr)\n\n  show_at_location_()\n  \n  print(fgGreen)\n  print(connects)\n\n  print(resetColor)\n\ndef show(l):\n  if l == 'Y': printloc(yard, yard_conn_descr, yard_connects)    \n  if l == 'L': printloc(living_room, living_room_conn_descr, living_room_connects)\n  if l == 'S': printloc(study, study_conn_descr, study_connects)\n  if l == 'D': printloc(dining, dining_conn_descr, dining_connects)\n  return 1\n\ndef show_inventory_():\n  inv = StringArray(lgets('inventory'))\n  print(\"You are carrying:\")\n  print(fgYellow)\n\n  if lgeti('junk_count') > 0:\n    print(numtostr(lgeti('junk_count')) + ' Garage Sale Junk')\n  \n  inv.init()\n  i = 0 \n  while i < inv.size:\n    print(abi.String(inv[i]).value)\n    i = i + 1\n  print(resetColor)\n  return 1\n\ndef show_junk():    \n  print(numtostr( asset_bal(app_address, 0)) + \" Garage Sale Junk\")\n\ndef show_at_location_():\n  items = StringArray(ggets(lgets('location') + '_items'))\n  items.init()\n  if items.size == 0:\n    n = 0\n  else:\n    print('You see the following items here:')\n    print(fgPurple)\n    \n    i = 0 \n    while i < items.size:\n      print(abi.String(items[i]).value)\n      i = i + 1\n    \n  print(resetColor)\n\ndef printitem(i):\n  print(fgWhite)\n  if i == 'computer': print(computer)\n  if i == 'note': print(note)\n  if i == 'sign': print(sign)\n  print(resetColor)\n\ndef exists_item(item, loc):\n  if loc == 'S' and (item == 'computer' or item == 'books'):\n    return True\n  if loc == 'D' and item == 'sign':\n    return True\n  if item == 'note':\n    return True\n  return False\n\ndef rolld20():\n  return rnd(1, 20)\n\ndef examine_(i):\n  if exists_item(i, lgets('location')):    \n    printitem(i)\n  else:\n    s = \"\"\n    s = i\n    s = \"There is no \" + s\n    s = s + \" here.\"\n    print(s)\n  return 1\n\ndef encounter():\n  print('A')\n  print(Concat(fgRed, clr('Bitcoin Maximalist ', bgWhite), fgRed, resetColor))\n  print('suddenly appears. He attacks you with')\n  print(Concat(clr('Nonsense', fgRed), resetColor))\n  print('and runs away.')\n  print(Concat(clr('You lose [10] hit points', bgRed), fgWhite, resetColor)) \n  return 1\n\ndef buy_(asset, what):  \n  if find_payment(20000):\n    Begin()\n    SetFields({\n      TxnField.type_enum: TxnType.AssetTransfer,\n      TxnField.sender: app_address,\n      TxnField.asset_amount: 1,\n      TxnField.asset_receiver: Txn.sender,\n      TxnField.xfer_asset: Txn.assets[Btoi(asset)]\n    })\n    Submit()\n    print(\"You bought it.\")\n    lput('junk_count', asset_bal(Txn.sender, 0))\n    return 1\n  return 0\n\ndef find_payment(amount):\n  i = 0\n  found = 0\n  while i < Global.group_size:\n    if (Gtxn[i].sender == Txn.sender and \n        Gtxn[i].receiver == Global.current_application_address and \n        Gtxn[i].amount == amount):\n      found = True\n    i = i + 1\n      \n  return found\n\ndef find_axfer(assetid):\n  i = 0\n  found = 0\n  while i < Global.group_size:\n    if (Gtxn[i].asset_id == assetid and \n        Gtxn[i].asset_receiver == Global.current_application_address and \n        Gtxn[i].asset_amount == 1):\n      found = True\n    i = i + 1\n      \n  return found\n  \ndef offer_(asset, what):\n  if what == \"junk\":\n    Begin()\n    SetFields({\n      TxnField.type_enum: TxnType.AssetTransfer,\n      TxnField.sender: Global.current_application_address,\n      TxnField.asset_amount: 0,\n      TxnField.asset_receiver: Global.current_application_address,\n      TxnField.xfer_asset: Txn.assets[asset]\n    })\n    Submit()   \n    print(\"The merchant will take your junk.\")\n    return 1\n  return 0\n\ndef use_(item:bytes):\n  if arr_find(lgets('inventory'), item) == NOT_FOUND:\n    print('You are not carrying that.')\n    return 1\n\n  if item == 'die' or item == 'dice' or item == 'd20':\n    print(\"Rolling d20...\")\n    print(fgYellow)\n    roll = 0\n    roll = rolld20()\n    print(\"[ \" + numtostr(roll) + \" ]\")\n    print(resetColor)\n    if roll < 10:\n      return encounter()\n  else:\n    print(\"You can't use that.\")\n  return 1\n  \ndef take_(what:TealType.bytes):\n  inv = StringArray(lgets('inventory'))\n  ind = 0\n  ind =  arr_find(ggets(lgets('location')+'_items'), what)\n  if ind == NOT_FOUND:\n    print('You do not see that here, or it is not something you can take.')\n  else:  \n    inv.init()\n    inv.append(abi.String.encode(what))\n    lput('inventory', inv.serialize())\n    gput(lgets('location')+'_items', arr_del(ggets(lgets('location')+'_items'), ind))\n    \n    print('You take the ' + what)\n  return 1\n\ndef drop_(what:TealType.bytes):\n  items = StringArray(ggets(lgets('location') + '_items'))\n  ind = 0\n  ind = arr_find(lgets('inventory'), what) \n  if ind == NOT_FOUND:\n    print('You are not carrying that.')\n  else:\n    lput('inventory', arr_del(lgets('inventory'), ind))\n    items.init()\n    items.append(abi.String.encode(what))\n    print('You dropped the ' + what)\n    gput(lgets('location')+'_items', items.serialize())    \n  return 1\n  \ndef init_local_array(name):\n  strarr = StringArray(\"\")\n  strarr.init()\n  if name == 'inventory':\n    strarr.append(abi.String.encode('note'))\n  \n  lput(name, strarr.serialize())\n\ndef init_global_array(name, df):\n  strarr = StringArray(\"\")\n  strarr.init()\n  if df != '':\n    strarr.append(abi.String.encode(df))\n  #if name == 'S_items':\n  #  strarr.append(abi.String.encode('d20'))\n  #if name == 'D_items':\n  #  strarr.append(abi.String.encode('sign'))\n\n  gput(name, strarr.serialize())\n\n\ndef setup_():\n  lput('location', 'Y')\n  lput('junk_count', 0)\n  init_local_array('inventory')\n  init_global_array('Y_items', '')\n  init_global_array('L_items', '')\n  init_global_array('S_items', 'd20')  \n  init_global_array('D_items', 'sign')\n  \n  return 1\n\ndef look() -> abi.Uint32:\n  return show(lgets('location'))\n\ndef setup() -> abi.Uint32:\n  return setup_()\n\ndef move(dir: String) -> abi.Uint32:\n  return move_(lgets('location'), abi.String(dir).value)\n\ndef take(what: String) -> abi.Uint32:\n  return take_(abi.String(what).value)\n\ndef drop(what: String) -> abi.Uint32:\n  return drop_(abi.String(what).value)\n\ndef inventory() -> StringArray:\n  return lgets('inventory')\n\ndef examine(what: String) -> abi.Uint32:\n  return examine_(abi.String(what).value)\n\ndef use(item: String) -> abi.Uint32:\n  return use_(abi.String(item).value)\n\ndef buy(optin, pay, asset, item: String ) -> abi.Uint32:\n  return buy_(asset, abi.String(item).value)    \n\ndef offer(asset, item: String) -> abi.Uint32:\n  return offer_(asset, abi.String(item).value)    \n```\n## examples/bool.py \n\n```python\ndef app():\n  amt = 15\n  return amt > 10 and amt < 20 or amt == 0\n```\n## examples/callscratch.py \n\n```python\ndef g(x):\n    return 3\n\ndef f(n):\n    return g(n)\n\ndef app():\n    x = f(30)\n    name = \"Bob\"\n    print(name)\n    return 100\n```\n## examples/checkgroup.py \n\n```python\nPAYTO = Addr('6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY')\nFEE = 10 * 1000000\nZERO = Global.zero_address()\n\ndef no_close_to(i):\n  Assert( Gtxn[i].close_remainder_to == ZERO )\n\ndef no_rekey(i):\n  Assert( Gtxn[i].rekey_to == ZERO )\n\ndef verify_payment(i):\n  Assert( Gtxn[i].receiver == PAYTO and\n          Gtxn[i].amount == Int(FEE) and\n          Gtxn[i].type_enum == TxnType.Payment )\n         \ndef app():\n  Assert( Global.group_size == 2 )\n  \n  no_close_to(1)\n  no_rekey(1)\n\n  verify_payment(1)\n\n  App.globalPut('lastPaymentFrom', Gtxn[1].sender)\n  Approve()\n```\n## examples/ifseq.py \n\n```python\n\ndef foo(b):\n  x = b\n\ndef app():\n  foo(10)\n  if 1 == 1:\n    return 1\n  else:\n    return 0\n```\n## examples/inner.py \n\n```python\n\ndef pay(amount: uint64, receiver: bytes):\n    Begin()\n    SetFields({\n        TxnField.type_enum: TxnType.Payment,\n        TxnField.sender: Global.current_application_address,\n        TxnField.amount: amount,\n        TxnField.receiver: receiver\n        })\n    Submit()\n\ndef app():\n    pay(10, Addr('6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY'))\n    result = 0\n    if Txn.first_valid > 1000000:\n        result = 1\n    return result\n\n```\n## examples/strargs.py \n\n```python\ndef app():\n  name = \"\"\n  name = Txn.application_args[0]\n  age = Btoi(Txn.application_args[1])\n  if age > 65:\n    print(\"User \" + name + \" is at retirement age.\")\n    return 1\n  else:\n    print(\"User \" + name + \" is still young.\")\n    return 0\n```\n## examples/swap.py \n\n```python\n\"\"\"Atomic Swap\"\"\"\n\nalice = Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\")\nbob = Addr(\"7Z5PWO2C6LFNQFGHWKSK5H47IQP5OJW2M3HA2QPXTY3WTNP5NU2MHBW27M\")\nsecret = Bytes(\"base32\", \"2323232323232323\")\ntimeout = 3000\nZERO_ADDR = Global.zero_address()\n\ndef sig(\n    tmpl_seller=alice,\n    tmpl_buyer=bob,\n    tmpl_fee=1000,\n    tmpl_secret=secret,\n    tmpl_hash_fn=Sha256,\n    tmpl_timeout=timeout,\n):\n    fee_cond = Txn.fee < Int(tmpl_fee)\n    is_payment = Txn.type_enum == TxnType.Payment\n    no_closeto = Txn.close_remainder_to == ZERO_ADDR\n    no_rekeyto = Txn.rekey_to == ZERO_ADDR\n    safety_cond = is_payment and no_rekeyto and no_closeto\n    \n    recv_cond = (Txn.receiver == tmpl_seller) and (tmpl_hash_fn(Arg(0)) == tmpl_secret)\n    esc_cond = (Txn.receiver == tmpl_buyer) and (Txn.first_valid > Int(tmpl_timeout))\n\n    return (fee_cond and safety_cond) and (recv_cond or esc_cond)\n```\n## examples/usenumtostr.py \n\n```python\nfrom lib import util\n\ndef app():\n  print(\"The best number is \" + util.numtostr(42))\n  return True\n```\n## examples/usestrarr.py \n\n```python\nfrom lib.util import *\n\ndef show_inventory_():\n  inv = StringArray(lgets('inventory'))\n  inv.init()\n  i = 0  \n  while i < inv.size:\n    print(abi.String(inv[i]).value)\n    i = i + 1\n  return 1\n\ndef pickup_(item):\n  inv = StringArray(lgets('inventory'))\n  inv.init()\n  inv.append(item)\n  lput('inventory', inv.serialize())\n  return show_inventory_()\n\ndef init_():\n  inv = StringArray(\"\")\n  inv.init()\n  lput('inventory', inv.serialize())\n  return 1\n  \ndef init() -> abi.Uint32:\n  return init_()\n\ndef get_inventory() -> StringArray:\n  return lgets('inventory')\n\ndef pickup(item: String) -> abi.Uint32:\n  return pickup_(item)\n\ndef show_inventory() -> abi.Uint32:\n  return show_inventory_()\n\n```\n## examples/whilecallif.py \n\n```python\nfrom lib.util import *\n\ndef proc(n):\n  return n * 2\n\ndef acceptable(n, target):\n  if n >= target:\n    print(\"Acceptable. Diff is \" + numtostr(n - target))\n    return True\n  else:\n    return False\n\n\ndef app():\n  total = 1\n  i = 0\n  while not acceptable(total, Btoi(Txn.application_args[0])):\n    total = proc(total)\n    i += 1\n  return i\n```\n## examples/whilesum.py \n\n```python\ndef app():  \n  totalFees = 0\n  i = 0\n  while i < Global.group_size:\n    totalFees = totalFees + Gtxn[i].fee\n    i = i + 1\n  return 1\n```\n\n## lib/util.py\n```python\nfrom typing import Tuple\n\nfrom pyteal import *\n\nfrom pytealutils import abi\n\nfrom .libex import *\n\nStringArray = abi.DynamicArray[abi.String]\n\nNOT_FOUND = Int(999)\n\nasset = abi.Uint8\naccount = abi.Uint8\napplication = abi.Uint8\n\n@bytes\ndef clr(s, ansi):\n  return Concat(ansi, s)\n\ndef arr_find(str_arr_bytes:bytes, item:bytes):\n  str_arr = StringArray(str_arr_bytes)\n  str_arr.init()\n  i = 0\n  while i < str_arr.size.load():\n    if str_arr[i] == abi.String.encode(item):\n      return i\n    i = i +1\n  return NOT_FOUND\n\n@bytes\ndef arr_del(str_arr_bytes, index_to_remove):\n  str_arr = StringArray(str_arr_bytes)\n  new_arr = StringArray(\"\")\n  new_arr.init()\n  str_arr.init()\n  i = 0\n  while i < index_to_remove:\n    new_arr.append(str_arr[i])\n    i = i + 1\n  i = i + 1\n  while i < str_arr.size.load():\n    new_arr.append(str_arr[i])\n    i = i + 1\n  return new_arr.serialize()\n\ndef rnd(min_, max_):\n  hash_ = \"\"\n  rndcnt = 0\n  rndcnt = App.globalGet('rndcnt')\n  hash_ = Sha256(Concat(Txn.tx_id, Itob(Global.latest_timestamp)))  \n  bigRand = Btoi(Extract(hash_ ,rndcnt, 7)) + Global.latest_timestamp % 100000\n  rndcnt = rndcnt + 1\n  App.globalPut('rndcnt', rndcnt)\n  return min_ + bigRand % (max_ - min_ + 1)\n\n@bytes\ndef numtostr(num):\n  out = \"             \"\n  i = 0\n  digit = 0\n  n = num\n  done = False\n  while not done:\n    digit = n % 10\n    out = SetByte(out, 12-i, digit+48)\n    n = n / 10\t\t\n    if n == 0: done = True\n    i = i + 1\n  return Extract(out, 12 - i + Int(1), i)\n\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/runvnc/genpyteal",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genpyteal",
    "package_url": "https://pypi.org/project/genpyteal/",
    "platform": null,
    "project_url": "https://pypi.org/project/genpyteal/",
    "project_urls": {
      "Homepage": "https://github.com/runvnc/genpyteal"
    },
    "release_url": "https://pypi.org/project/genpyteal/5.0.0/",
    "requires_dist": [
      "redbaron",
      "pyteal-utils"
    ],
    "requires_python": "",
    "summary": "Generate PyTeal with normal Python",
    "version": "5.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15000977,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9654cef0fc6c4299d7dad38dc0bdc794f7d13617cb3ce4a961ff813a43c78b4f",
          "md5": "75d834e29be5c6c97f55c026e4a2d4b4",
          "sha256": "da831475a5e34470c19ea736ebefca6071863a1facd45ae154024f4e37e3f8a2"
        },
        "downloads": -1,
        "filename": "genpyteal-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75d834e29be5c6c97f55c026e4a2d4b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8585,
        "upload_time": "2022-01-15T23:50:40",
        "upload_time_iso_8601": "2022-01-15T23:50:40.184034Z",
        "url": "https://files.pythonhosted.org/packages/96/54/cef0fc6c4299d7dad38dc0bdc794f7d13617cb3ce4a961ff813a43c78b4f/genpyteal-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c634f835b21f571092dd455de66baaafa04e438e58b96182e96d693f22ad4292",
          "md5": "529e6e467b45bf7a8442cee6ec00df1a",
          "sha256": "9e123eee70a6f2dec58107b16f24749cf62dbd21d496d1ef6b96a6faed09e31b"
        },
        "downloads": -1,
        "filename": "genpyteal-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "529e6e467b45bf7a8442cee6ec00df1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7698,
        "upload_time": "2022-01-15T23:50:41",
        "upload_time_iso_8601": "2022-01-15T23:50:41.977559Z",
        "url": "https://files.pythonhosted.org/packages/c6/34/f835b21f571092dd455de66baaafa04e438e58b96182e96d693f22ad4292/genpyteal-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a37a23aff521a14dbc980a11b8b38daaf8d118c0dc510f23425d4c68318cc3",
          "md5": "1f931a9dee2ed69bc92e63d77268a374",
          "sha256": "6661df38eeaac6afda288c3faa0195268804893fac17ea4036093a6d997579fd"
        },
        "downloads": -1,
        "filename": "genpyteal-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f931a9dee2ed69bc92e63d77268a374",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8584,
        "upload_time": "2022-01-20T03:03:38",
        "upload_time_iso_8601": "2022-01-20T03:03:38.847231Z",
        "url": "https://files.pythonhosted.org/packages/c6/a3/7a23aff521a14dbc980a11b8b38daaf8d118c0dc510f23425d4c68318cc3/genpyteal-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03aac8e3de298eb1edfd4df21b6335dc66d74361af2a9d55f4cab71b02b506db",
          "md5": "824f358f7c8c55063ce2af6df713ab41",
          "sha256": "6f481b1a958df681cbbba79bfc26eb4fe84de266243d7e79c458c346f9cb8e58"
        },
        "downloads": -1,
        "filename": "genpyteal-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "824f358f7c8c55063ce2af6df713ab41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7702,
        "upload_time": "2022-01-20T03:03:43",
        "upload_time_iso_8601": "2022-01-20T03:03:43.209024Z",
        "url": "https://files.pythonhosted.org/packages/03/aa/c8e3de298eb1edfd4df21b6335dc66d74361af2a9d55f4cab71b02b506db/genpyteal-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a4e8eee19a2c6a929746a86358f1f373a6102433b7b52e8df34929804670c8",
          "md5": "6a6e11e4026347445ca25a604bc95555",
          "sha256": "f442ebacaf0e93d89afd40915a31616a143d48b9eae4a92d70a14cb8620e21b4"
        },
        "downloads": -1,
        "filename": "genpyteal-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a6e11e4026347445ca25a604bc95555",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8980,
        "upload_time": "2022-01-20T03:03:40",
        "upload_time_iso_8601": "2022-01-20T03:03:40.249865Z",
        "url": "https://files.pythonhosted.org/packages/c6/a4/e8eee19a2c6a929746a86358f1f373a6102433b7b52e8df34929804670c8/genpyteal-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "138d481bb1e50b7d78cf8580c7e4d8b5e570eade47e927d69b210d34cc373522",
          "md5": "ec103936f231dec64ced06bfb27007ba",
          "sha256": "7467df51fd9c8f2d5fa6fd9ed216281c21145fa0f30de648038ad0ac7417341c"
        },
        "downloads": -1,
        "filename": "genpyteal-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ec103936f231dec64ced06bfb27007ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8774,
        "upload_time": "2022-01-20T03:03:44",
        "upload_time_iso_8601": "2022-01-20T03:03:44.585816Z",
        "url": "https://files.pythonhosted.org/packages/13/8d/481bb1e50b7d78cf8580c7e4d8b5e570eade47e927d69b210d34cc373522/genpyteal-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2d1cb60a34abab0e90cbd9ae1f65f28cc1eba986e54b8e7f66f5ad807cd1216",
          "md5": "93442a1280cf5dc0aff5bc856753590d",
          "sha256": "cec181a7deed9ffa80f1ad356fd5590178f4b2c253c0d6c3404ac9fd49f1ad8f"
        },
        "downloads": -1,
        "filename": "genpyteal-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93442a1280cf5dc0aff5bc856753590d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8994,
        "upload_time": "2022-01-20T16:56:12",
        "upload_time_iso_8601": "2022-01-20T16:56:12.758856Z",
        "url": "https://files.pythonhosted.org/packages/c2/d1/cb60a34abab0e90cbd9ae1f65f28cc1eba986e54b8e7f66f5ad807cd1216/genpyteal-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28547ab3be3cac78b46b0afca7595aaa0f136bbf5c511fa890d1627a262929eb",
          "md5": "812fd6a6d49640797a8d2e139304beb6",
          "sha256": "59fa4fd74132d7392727162e04f4e82369d99638c7653402439555874ab0cadf"
        },
        "downloads": -1,
        "filename": "genpyteal-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "812fd6a6d49640797a8d2e139304beb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9731,
        "upload_time": "2022-01-20T16:56:16",
        "upload_time_iso_8601": "2022-01-20T16:56:16.690528Z",
        "url": "https://files.pythonhosted.org/packages/28/54/7ab3be3cac78b46b0afca7595aaa0f136bbf5c511fa890d1627a262929eb/genpyteal-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e50148386f94c9393960a469347971566f664b1292efa265fd6833ce32b1927b",
          "md5": "ef06237e49dab05ccbbaa8bc4c0ae208",
          "sha256": "ff9a126af248c87c0a10424dc6b600161f436ee70d6683c44e7b27eb53472834"
        },
        "downloads": -1,
        "filename": "genpyteal-2.2.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "ef06237e49dab05ccbbaa8bc4c0ae208",
        "packagetype": "bdist_egg",
        "python_version": "2.2.0",
        "requires_python": null,
        "size": 7935,
        "upload_time": "2022-02-01T08:15:07",
        "upload_time_iso_8601": "2022-02-01T08:15:07.786856Z",
        "url": "https://files.pythonhosted.org/packages/e5/01/48386f94c9393960a469347971566f664b1292efa265fd6833ce32b1927b/genpyteal-2.2.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe49a1a0dfee5846614b621005d950d348753deb93295ff630366e5cf4cc1105",
          "md5": "d640851f4b0603f7ecb8e960e89fabe7",
          "sha256": "eb947ef60c1b93544a3aad664c32b2e4a142dced0ccae1ff91b1b9b470d03b8f"
        },
        "downloads": -1,
        "filename": "genpyteal-2.2.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "d640851f4b0603f7ecb8e960e89fabe7",
        "packagetype": "bdist_egg",
        "python_version": "2.2.0",
        "requires_python": null,
        "size": 10050,
        "upload_time": "2022-02-01T08:15:08",
        "upload_time_iso_8601": "2022-02-01T08:15:08.959244Z",
        "url": "https://files.pythonhosted.org/packages/fe/49/a1a0dfee5846614b621005d950d348753deb93295ff630366e5cf4cc1105/genpyteal-2.2.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1c2d1b6846cdd9df263ad0f4b7df9d2bf5fdbf2a2b226704a3c73258604ef8b",
          "md5": "56020a8eb7793fce36cd9e6605a26076",
          "sha256": "0e099ba96379db5727b88b4e71a173883951baf067d64c0794947152daeeb83b"
        },
        "downloads": -1,
        "filename": "genpyteal-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56020a8eb7793fce36cd9e6605a26076",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8997,
        "upload_time": "2022-01-20T16:59:47",
        "upload_time_iso_8601": "2022-01-20T16:59:47.161804Z",
        "url": "https://files.pythonhosted.org/packages/d1/c2/d1b6846cdd9df263ad0f4b7df9d2bf5fdbf2a2b226704a3c73258604ef8b/genpyteal-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b54e779cd7292faee5bc0e1f0f76ea36c964bfca7ca5f6f763d67289498a874",
          "md5": "51caeba3385e2c4f3cf432759da20dca",
          "sha256": "d7a1c90b84f335e0057b3e937e76f530012669cacdb4f628211a18114f5c39ef"
        },
        "downloads": -1,
        "filename": "genpyteal-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51caeba3385e2c4f3cf432759da20dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9734,
        "upload_time": "2022-01-20T16:59:52",
        "upload_time_iso_8601": "2022-01-20T16:59:52.215443Z",
        "url": "https://files.pythonhosted.org/packages/5b/54/e779cd7292faee5bc0e1f0f76ea36c964bfca7ca5f6f763d67289498a874/genpyteal-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2abb978fb17a8dd1c0485edfe3501dbbbc3d62f031100df8c2eeff9357562fe8",
          "md5": "99316bfe268a4bd90d089b5f47cf0047",
          "sha256": "9228773f48c4aaa57c44c220f286b940c8eff865ef0e7e7cd34d2878af8415bb"
        },
        "downloads": -1,
        "filename": "genpyteal-3.0.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "99316bfe268a4bd90d089b5f47cf0047",
        "packagetype": "bdist_egg",
        "python_version": "3.0.0",
        "requires_python": null,
        "size": 13514,
        "upload_time": "2022-02-24T02:35:32",
        "upload_time_iso_8601": "2022-02-24T02:35:32.006062Z",
        "url": "https://files.pythonhosted.org/packages/2a/bb/978fb17a8dd1c0485edfe3501dbbbc3d62f031100df8c2eeff9357562fe8/genpyteal-3.0.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cdb4ae92b491a058db8d0074403bfabad74260a7b1d5c27ed3835cc5f4f198e",
          "md5": "373b1ade218469aa597f39c28703f8c2",
          "sha256": "3eab6cfab6dbce55ee64f6b4a74d388a9defe945e10d8dd194f6175aef082ac5"
        },
        "downloads": -1,
        "filename": "genpyteal-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "373b1ade218469aa597f39c28703f8c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20708,
        "upload_time": "2022-02-01T08:15:10",
        "upload_time_iso_8601": "2022-02-01T08:15:10.618613Z",
        "url": "https://files.pythonhosted.org/packages/8c/db/4ae92b491a058db8d0074403bfabad74260a7b1d5c27ed3835cc5f4f198e/genpyteal-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3dcde4801a2efcdc2ce5d528a1793be886a0444a96883f301fda274f38907ec",
          "md5": "c989554a99f41d3cb3e372e182b695ff",
          "sha256": "8bc74355fea606f278b5c4d98a4b3c9d3cc622c56cea5a2b9aa31b03b96e8a70"
        },
        "downloads": -1,
        "filename": "genpyteal-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c989554a99f41d3cb3e372e182b695ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14415,
        "upload_time": "2022-02-24T02:35:21",
        "upload_time_iso_8601": "2022-02-24T02:35:21.685069Z",
        "url": "https://files.pythonhosted.org/packages/b3/dc/de4801a2efcdc2ce5d528a1793be886a0444a96883f301fda274f38907ec/genpyteal-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbbce9a0a2914828da6812ac92cebd331b8b01b31c1708c23630d63a69b66855",
          "md5": "0605513363b4cff0d2d95c1fba691522",
          "sha256": "5b1a39cf8bcf2aba17eb990c1b68974f2778d162bfa6e9eef15c51b2e35a0064"
        },
        "downloads": -1,
        "filename": "genpyteal-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0605513363b4cff0d2d95c1fba691522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21378,
        "upload_time": "2022-02-24T02:35:34",
        "upload_time_iso_8601": "2022-02-24T02:35:34.148623Z",
        "url": "https://files.pythonhosted.org/packages/cb/bc/e9a0a2914828da6812ac92cebd331b8b01b31c1708c23630d63a69b66855/genpyteal-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5014909a2b25c8c38dea0e68991c90aac2fd1e0eb5a831647fa07da89e87591",
          "md5": "d7280da7bba771d0968f253523c51888",
          "sha256": "b942b909e605677e8d39b5ddadd67abfb4315ccdd93fda39cfa39d5aca7414de"
        },
        "downloads": -1,
        "filename": "genpyteal-5.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7280da7bba771d0968f253523c51888",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15332,
        "upload_time": "2022-09-05T23:37:48",
        "upload_time_iso_8601": "2022-09-05T23:37:48.817821Z",
        "url": "https://files.pythonhosted.org/packages/d5/01/4909a2b25c8c38dea0e68991c90aac2fd1e0eb5a831647fa07da89e87591/genpyteal-5.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe83647d384dc85bd01432341e55e428d78b77f0ceb39fc3788036e205afba9b",
          "md5": "beed13c83f9e6a9748303ec07fca15ee",
          "sha256": "81971a3ebd07aa8fc4e9a75a8f381576f5e94e135d66829fe8d19ec546fdcc86"
        },
        "downloads": -1,
        "filename": "genpyteal-5.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "beed13c83f9e6a9748303ec07fca15ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20372,
        "upload_time": "2022-09-05T23:37:50",
        "upload_time_iso_8601": "2022-09-05T23:37:50.757713Z",
        "url": "https://files.pythonhosted.org/packages/fe/83/647d384dc85bd01432341e55e428d78b77f0ceb39fc3788036e205afba9b/genpyteal-5.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5014909a2b25c8c38dea0e68991c90aac2fd1e0eb5a831647fa07da89e87591",
        "md5": "d7280da7bba771d0968f253523c51888",
        "sha256": "b942b909e605677e8d39b5ddadd67abfb4315ccdd93fda39cfa39d5aca7414de"
      },
      "downloads": -1,
      "filename": "genpyteal-5.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d7280da7bba771d0968f253523c51888",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15332,
      "upload_time": "2022-09-05T23:37:48",
      "upload_time_iso_8601": "2022-09-05T23:37:48.817821Z",
      "url": "https://files.pythonhosted.org/packages/d5/01/4909a2b25c8c38dea0e68991c90aac2fd1e0eb5a831647fa07da89e87591/genpyteal-5.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe83647d384dc85bd01432341e55e428d78b77f0ceb39fc3788036e205afba9b",
        "md5": "beed13c83f9e6a9748303ec07fca15ee",
        "sha256": "81971a3ebd07aa8fc4e9a75a8f381576f5e94e135d66829fe8d19ec546fdcc86"
      },
      "downloads": -1,
      "filename": "genpyteal-5.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "beed13c83f9e6a9748303ec07fca15ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20372,
      "upload_time": "2022-09-05T23:37:50",
      "upload_time_iso_8601": "2022-09-05T23:37:50.757713Z",
      "url": "https://files.pythonhosted.org/packages/fe/83/647d384dc85bd01432341e55e428d78b77f0ceb39fc3788036e205afba9b/genpyteal-5.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}