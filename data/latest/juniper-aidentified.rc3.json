{
  "info": {
    "author": "Aidentified LLC",
    "author_email": "dgilman@aidentified.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Juniper: Package lambda functions\n=================================\n\n|circle| |pypi version| |apache license|\n\nJuniper is a packaging tool to stream and standardize the creation of a zip\nartifact for a set of AWS Lambda functions.\n\nThe zip artifacts generated include the source code of the dependencies defined\nin a given requirements.txt file as well as any shared libraries the function\ndepends on. With the generated artifact, a developer can deploy a lambda function\neither manually, through the awscli or using a cloudformation/sam template.\n\nQuickstart\n**********\n\nWith Python==3.6 and Docker installed, install juniper:\n\n.. code-block:: text\n\n    > pip install juniper\n\nIn order to package your lambda functions with juniper, you need to create a\nmanifest file.\n\n.. code-block:: yaml\n\n    functions:\n      # Name the zip file you want juni to create\n      router:\n        # The dependencies of the router function.\n        requirements: ./src/requirements.txt\n        # Include this file in the generated zip artifact.\n        include:\n        - ./src/lambda_function.py\n\nThe folder structure this manifest refers to looks like:\n\n::\n\n    .\n    â”œâ”€â”€ manifest.yml\n    â”œâ”€â”€ src\n    â”‚Â Â  â”œâ”€â”€ requirements.txt\n    â”‚Â Â  â”œâ”€â”€ lambda_function.py\n\nBuild it!\n\n.. code-block:: text\n\n    > juni build\n\nJuniper creates the following artifact `./dist/router.zip`  ðŸŽ‰\n\nFor a more comprehensive example, please take a look at our `tutorial`_.\n\nThe juni build command will generate the lambda artifact for all the functions and\nlayers defined in the manifest file. However, during the development process, it may be\ndesired to only build the lambda functions that a developer is actively working on.\n\nTo build only a subset of the resources defined in the manifest use the following\ncommand:\n\n.. code-block:: text\n\n    > juni build --skip-clean -f <target_fn_name>\n\nThis command will build all the functions that partially match the given target_fn_name.\nWhen using a naming convention a developer has the ability to build a subset of\nthe lambdas defined in the manifest.\n\nThe skip-clean flag will prevent the previously built artifacts from being deleted\nbefore the build is executed.\n\n.. _`tutorial`: https://eabglobal.github.io/juniper/tutorial.html\n\nPython3.7 and Beyond\n********************\nBy default juniper uses docker containers to package your lambda functions. Behind\nthe scenes, juniper creates a docker-compose file from your manifest. This file is\nused by the `build` command to spawn a build container per function definition.\n\nSince the AWS Lambda service supports multiple python runtimes, it makes sense for\njuniper to give you the ability to specify a docker image. With the following\nmanifest file, you can package the router lambda using a python3.7 image.\n\n.. code-block:: yaml\n\n    functions:\n      router:\n        # Use this docker image\n        image: lambci/lambda:build-python3.7\n        requirements: ./src/router/requirements.txt\n        # Include these local modules in the artifact\n        include:\n        - ./src/commonlib/mylib\n        - ./src/router_function/router\n\nKeep in mind that not every single docker image works, for more information on\nthe type of images supported read `juniper and docker`_.\n\n.. _`juniper and docker`: https://eabglobal.github.io/juniper/features.html\n\nLambda Layers\n*************\nAWS Lambda layers is a recent service that gives a developer the ability to\npre-package a set of dependencies. A lambda function can be built on top of multiple\nlayers, either packaged by the developer, by AWS or by a third party.\n\nTo build a layer, the juniper manifest uses a new block:\n\n.. code-block:: yaml\n\n  layers:\n    base:\n      requirements: ./src/requirements/base.txt\n    pg:\n      requirements: ./src/requirements/postgres.txt\n\nWith this manifest, running **juni build** creates two layer artifacts: one with the\nname base and another one named pg. Lambda layers are packaged along the lambda\nfunctions defined in the manifest and the zip files are stored in the artifacts directory.\n\nThe generated artifact includes the dependencies defined in the requirements file\nof the lambda layer.\n\nEach individual section supports the definition of a custom docker image. With this\nfeature, a layer can be built using python3.7 and another one can be built using the\ndefault python interpreter; python3.6.\n\n.. code-block:: yaml\n\n  layers:\n    base:\n      image: lambci/lambda:build-python3.7\n      requirements: ./src/requirements/base.txt\n\n\nJuniper builds the artifact for you, you can either use the `layers aws cli`_ to\nupload it to AWS or you can use a SAM template definition. While using a SAM template,\nmake sure you use the `AWS::Serverless::LayerVersion` resource.\n\nTo see an example on how to package lambda functions with layers, juniper includes\nan example in the codebase called `ridge`_.\n\n.. _`layers aws cli`: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-manage\n.. _`ridge`: https://github.com/eabglobal/juniper/tree/master/examples/ridge\n\nConfiguration\n*************\nTo update the default configuration of juniper, can use the the global section\nof the manifest. A sample configuration looks like:\n\n.. code-block:: yaml\n\n    global:\n      image: lambci/lambda:build-python3.7\n      output: ./build\n\n    functions:\n      router:\n        requirements: ./src/router/requirements.txt\n        include:\n        - ./src/router_function/router/lambda_function.py\n\nSetting a docker image at a global level tells juniper to package every\nlambda function using that image. In this example, the zip artifacts will be stored in\nthe ./build folder instead of the ./dist; which is the default.\n\nInclude Binaries\n****************\nUsing the lambci build images to create the zip artifacts for a given set of lambda\nfunctions is sufficient for most use cases. However, there are times when the base container\ndoes not have all the build libraries necessary to install a python package. In this cases\nrunning `juni build` fails while trying to pip install the dependencies of the function.\nIn addition, once the libraries are installed in the container some packages require a set of\nbinaries to work properly at runtime.\n\nThe recommended procedure to install OS libraries and include missing dependencies\nis to use a dockerfile to build a local docker image. The strategy is illustrated as follows:\n\n* Create a dockerfile using one of the lambci images as a starting point\n* Build a local docker image from the docker file\n* Use the local image in the juniper manifest\n\nWith this startegy, the juniper manifest will look like this:\n\n.. code-block:: yaml\n\n    functions:\n      router:\n        image: custom/local_docker_image\n        requirements: ./src/router/requirements.txt\n        include:\n        - ./src/router_function/router/lambda_function.py\n\nIn this case, a developer needs to build the docker image before executing the\njuni build command.\n\nAt this point, the developer can push the docker image to the docker hub and use\nthe hosted version instead of the local one. This strategy separates the build of\na custom image from the build of the artifacts.\n\nIf you need binaries in the final artifact, you can place these files either in the\n**/var/task/lambda_lib/** or the **/var/task/lambda_bin/** depending on your use case.\nFiles added to the bin folder are included in the PATH, files added to the lib,\nare included in the LD_LIBRARY_PATH. For more information view `aws layer config`_.\n\nJuniper is in charge of putting the files in the lambda_bin and lambda_lib in\nthe right place when building an artifact.\n\nA concrete example of the configuration is outlined in the `advanced`_ section\nof our documentation.\n\n.. _`advanced`: https://eabglobal.github.io/juniper/advanced.html\n.. _`aws layer config`: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path\n\nPIP Configuration\n*****************\nTo set any pip configuration parameters, create a pip.conf file and add the path\nto the manifest. The **pipconf** setting is only available at a global level and\nit will apply to the packaging of all the functions defined in the manifest.\n\n.. code-block:: yaml\n\n  global:\n    pipconf: ./pip.conf\n\n  functions:\n    sample:\n      requirements: ./requirements.txt\n      include:\n        - ./lambda_function.py\n\nA sample pip.conf file can be seen bellow, to see the entire list of parameters\nvisit the official `pip documentation`_.\n\n.. code-block:: yaml\n\n  [global]\n  timeout = 5\n  index-url = https://download.zope.org/ppix\n\n.. _`pip documentation`: https://pip.pypa.io/en/stable/user_guide/#config-file\n\nFeatures\n********\n\nThis list defines the entire scope of Juniper. Nothing more, nothing else.\n\n* Minimal manifest file to define packaging\n* Using docker containers as a way to install dependencies and generate the artifacts\n* Ability to tailor the requirements.txt per lambda\n* Create an individual zip artifact for multiple lambda functions\n* Ability to include shared dependencies (python modules relative to the function\n  being packaged)\n* Specify docker image to package lamdba functions using different python runtimes\n* Define pip command line arguments using a pip.conf file\n* Packaging of lambda layers\n* Support for building arm64 layers and lambdas (Graviton2) via specifying the platform\n\nContributing\n************\n\nFor guidance on setting up a development environment and how to make a\ncontribution to Juniper, see the `contributing guidelines`_.\n\n.. _contributing guidelines: https://github.com/eabglobal/juniper/blob/master/CONTRIBUTING.rst\n\nLinks\n*****\n\n* Documentation: https://eabglobal.github.io/juniper/\n* License: `Apache Software License`_\n\n* Code: https://github.com/eabglobal/juniper\n* Issue tracker: https://github.com/eabglobal/juniper/issues\n* Test status:\n\n  * Linux, Mac: https://circleci.com/gh/eabglobal/juniper\n\n.. _Apache Software License: https://github.com/eabglobal/juniper/blob/master/LICENSE\n\n\n.. |circle| image:: https://circleci.com/gh/eabglobal/juniper/tree/master.svg?style=shield\n    :target: https://circleci.com/gh/eabglobal/juniper/tree/master\n\n.. |pypi version| image:: https://img.shields.io/pypi/v/juniper.svg\n    :target: https://pypi.org/project/juniper/\n\n.. |apache license| image:: https://img.shields.io/github/license/eabglobal/juniper.svg\n    :target: https://github.com/eabglobal/juniper/blob/master/LICENSE\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "juniper-aidentified",
    "package_url": "https://pypi.org/project/juniper-aidentified/",
    "platform": null,
    "project_url": "https://pypi.org/project/juniper-aidentified/",
    "project_urls": {
      "Code": "https://github.com/dgilmanAIDENTIFIED/juniper"
    },
    "release_url": "https://pypi.org/project/juniper-aidentified/0.8.0/",
    "requires_dist": [
      "click (>=8.0)",
      "click-log",
      "PyYAML (>=6.0)",
      "Jinja2 (>=3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Tool to streamline the build of python lambda functions. (fork of juniper)",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16049857,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "346c72438251f3bacd68ec89436f7b2b4fd54284c265c38227d78e018235c55b",
          "md5": "23863a70f23edb0923852b945ae10f0a",
          "sha256": "5561091eb3d26c178deddbc6c25e8f247d63693e69bc241b16fd3b84dcb27282"
        },
        "downloads": -1,
        "filename": "juniper_aidentified-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23863a70f23edb0923852b945ae10f0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18828,
        "upload_time": "2022-01-14T20:44:30",
        "upload_time_iso_8601": "2022-01-14T20:44:30.055581Z",
        "url": "https://files.pythonhosted.org/packages/34/6c/72438251f3bacd68ec89436f7b2b4fd54284c265c38227d78e018235c55b/juniper_aidentified-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a7aaf9a1ff5cdf91834ebd1eaeed562908199c2ac9da9fd0647dcff8c90bdc0",
          "md5": "2ec45da1733267da4d0d0911ab8c6567",
          "sha256": "3a21a633bfb8cfd444494e1f830bef704a151219963627b4b4dc527179e47d41"
        },
        "downloads": -1,
        "filename": "juniper-aidentified-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ec45da1733267da4d0d0911ab8c6567",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19709,
        "upload_time": "2022-01-14T20:44:31",
        "upload_time_iso_8601": "2022-01-14T20:44:31.730561Z",
        "url": "https://files.pythonhosted.org/packages/1a/7a/af9a1ff5cdf91834ebd1eaeed562908199c2ac9da9fd0647dcff8c90bdc0/juniper-aidentified-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b62cadbc1cd8dd27e9bedee7f428a5da675476d912e606cde87952fc7f0b692",
          "md5": "ec387adbd3c7d90ea3c9e289237209cf",
          "sha256": "627876d938b26f0244e9fb595d6c0124c646af162611b7461e06f76d79fa389c"
        },
        "downloads": -1,
        "filename": "juniper_aidentified-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec387adbd3c7d90ea3c9e289237209cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18852,
        "upload_time": "2022-04-12T22:18:20",
        "upload_time_iso_8601": "2022-04-12T22:18:20.383571Z",
        "url": "https://files.pythonhosted.org/packages/3b/62/cadbc1cd8dd27e9bedee7f428a5da675476d912e606cde87952fc7f0b692/juniper_aidentified-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4026107c19494ce5996ab8514404c7d650545e99e3fb95c97269d4caa3b26fe",
          "md5": "2208835c91822383596e7dbb9667eba8",
          "sha256": "f2e11a2683180e263ba095cf9fe4abc13723ea3ec153b32219c11080809283f4"
        },
        "downloads": -1,
        "filename": "juniper-aidentified-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2208835c91822383596e7dbb9667eba8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19934,
        "upload_time": "2022-04-12T22:18:22",
        "upload_time_iso_8601": "2022-04-12T22:18:22.152804Z",
        "url": "https://files.pythonhosted.org/packages/a4/02/6107c19494ce5996ab8514404c7d650545e99e3fb95c97269d4caa3b26fe/juniper-aidentified-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f160493c5adda0155017f1a79296a4030154e72dd02565fc8d8564782184594",
          "md5": "150a503bde54e381532b608dc5630d07",
          "sha256": "d1a2e99c638d9626767dd247916424deddf44cbe0a2e223fc479faaf76383e9f"
        },
        "downloads": -1,
        "filename": "juniper_aidentified-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "150a503bde54e381532b608dc5630d07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19018,
        "upload_time": "2022-12-09T15:34:24",
        "upload_time_iso_8601": "2022-12-09T15:34:24.339449Z",
        "url": "https://files.pythonhosted.org/packages/7f/16/0493c5adda0155017f1a79296a4030154e72dd02565fc8d8564782184594/juniper_aidentified-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e05a3e4233161ec600d4d1222187dd644037519af073a4e83618afe403b2c2",
          "md5": "013c92d5ec7375e7f1ee3693e0320660",
          "sha256": "73ee4c524c38c8ec490626af423b0e31022fb500880870d7f3d7284cd3dd6973"
        },
        "downloads": -1,
        "filename": "juniper-aidentified-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "013c92d5ec7375e7f1ee3693e0320660",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20116,
        "upload_time": "2022-12-09T15:34:26",
        "upload_time_iso_8601": "2022-12-09T15:34:26.036493Z",
        "url": "https://files.pythonhosted.org/packages/20/e0/5a3e4233161ec600d4d1222187dd644037519af073a4e83618afe403b2c2/juniper-aidentified-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f160493c5adda0155017f1a79296a4030154e72dd02565fc8d8564782184594",
        "md5": "150a503bde54e381532b608dc5630d07",
        "sha256": "d1a2e99c638d9626767dd247916424deddf44cbe0a2e223fc479faaf76383e9f"
      },
      "downloads": -1,
      "filename": "juniper_aidentified-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "150a503bde54e381532b608dc5630d07",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19018,
      "upload_time": "2022-12-09T15:34:24",
      "upload_time_iso_8601": "2022-12-09T15:34:24.339449Z",
      "url": "https://files.pythonhosted.org/packages/7f/16/0493c5adda0155017f1a79296a4030154e72dd02565fc8d8564782184594/juniper_aidentified-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20e05a3e4233161ec600d4d1222187dd644037519af073a4e83618afe403b2c2",
        "md5": "013c92d5ec7375e7f1ee3693e0320660",
        "sha256": "73ee4c524c38c8ec490626af423b0e31022fb500880870d7f3d7284cd3dd6973"
      },
      "downloads": -1,
      "filename": "juniper-aidentified-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "013c92d5ec7375e7f1ee3693e0320660",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20116,
      "upload_time": "2022-12-09T15:34:26",
      "upload_time_iso_8601": "2022-12-09T15:34:26.036493Z",
      "url": "https://files.pythonhosted.org/packages/20/e0/5a3e4233161ec600d4d1222187dd644037519af073a4e83618afe403b2c2/juniper-aidentified-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}