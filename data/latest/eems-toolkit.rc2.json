{
  "info": {
    "author": "HHhyJJ",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# **EEMs-toolkit**\r\n\r\nEEMs-toolkit是一个可以在Python上对三维荧光（EEM）进行平行因子分析（PARAFAC）的工具包，功能大致类似于MATLAB的drEEM toolbox。\r\n\r\n[TOC]\r\n\r\n\r\n\r\n## 开发环境\r\n\r\nPython版本3.9.6，采用的额外的包及版本见下表：\r\n\r\n|     包     |  版本  |\r\n| :--------: | :----: |\r\n|   numpy    | 1.24.1 |\r\n|   pandas   | 1.5.2  |\r\n| matplotlib | 3.6.2  |\r\n|   scipy    | 1.9.3  |\r\n|  tensorly  | 0.7.0  |\r\n|   tlviz    | 0.1.6  |\r\n|   joblib   | 1.2.0  |\r\n\r\n------\r\n## 安装EEMs-toolkit\r\n```python\r\npip install EEMs-toolkit\r\n```\r\n\r\n\r\n## 功能简介\r\n\r\n1. 数据导入\r\n\r\n   - 样本日志导入\r\n   - 样本导入\r\n   - 空白导入\r\n   - 紫外光谱导入\r\n\r\n2. 预处理\r\n\r\n   - 扣除空白\r\n\r\n     原始数据：\r\n\r\n     ![image-20230119210013034](/Example/pictures/image-20230119210013034.png)\r\n\r\n     去除空白：\r\n\r\n     ![image-20230119210117607](/Example/pictures/image-20230119210117607.png)\r\n\r\n   - 去除不需要的波长部分\r\n\r\n     ![image-20230119210214514](/Example/pictures/image-20230119210214514.png)\r\n\r\n   - 拉曼单位化\r\n\r\n     ![image-20230119210258801](/Example/pictures/image-20230119210258801.png)\r\n\r\n   - 稀释因子校正\r\n\r\n   - 内滤效应校正\r\n\r\n     ![image-20230119210344367](/Example/pictures/image-20230119210344367.png)\r\n\r\n   - 去除瑞丽（Rayleigh）散射和拉曼（Raman）散射\r\n\r\n     ![image-20230119210434896](/Example/pictures/image-20230119210434896.png)\r\n\r\n   - 缺失值插值\r\n\r\n     ![image-20230119210529378](/Example/pictures/image-20230119210529378.png)\r\n\r\n   - 荧光矩阵平滑（高斯核）\r\n\r\n3. PARAFAC分析\r\n\r\n   - 采用非负约束计算不同组分数的模型\r\n\r\n   - 绘制异常样本测试图\r\n\r\n     ![image-20230119210653963](/Example/pictures/image-20230119210653963.png)\r\n\r\n   - 去除异常样本\r\n\r\n   - 重新计算模型，运行分半分析（S4C4T2）\r\n\r\n   - 确认组分数（核一致性图，因子相似度图）\r\n\r\n     ![image-20230119210738168](/Example/pictures/image-20230119210738168.png)\r\n\r\n     ![image-20230119210756988](/Example/pictures/image-20230119210756988.png)\r\n\r\n4. 结果展示\r\n\r\n   - 核一致性和方差解释率\r\n\r\n   - 因子相似度\r\n\r\n     ![image-20230119210858476](/Example/pictures/image-20230119210858476.png)\r\n\r\n   - 分半分析结果\r\n\r\n     ![image-20230119211156840](/Example/pictures/image-20230119211156840.png)\r\n\r\n   - 组分图绘制\r\n\r\n     ![image-20230119211432900](/Example/pictures/image-20230119211432900.png)\r\n\r\n   - 载荷图绘制\r\n\r\n     ![image-20230119211450807](/Example/pictures/image-20230119211450807.png)\r\n\r\n   - 模型结果导出，包括FMax，Em loadings，Ex loadings，组分图数据\r\n\r\n5. 其他功能\r\n\r\n   - 预处理后样本数据导出\r\n\r\n   - OpenFluor文件导出，可上传对比数据库\r\n\r\n   - 区域积分（FRI）计算，结果导出\r\n   - 荧光指数（Fluorescence index、Freshness index、Humification index，Biological index）计算，结果导出\r\n   - 光谱斜率SR计算，结果导出\r\n\r\n------\r\n\r\n\r\n\r\n## 测试示例\r\n\r\n使用drEEM toolbox中demofiles.zip里的**EEMs、Abs1cm、BlankEEMs**进行演示。**不同代码块代表不同的Python文件**。\r\n\r\n1. 数据导入&预处理\r\n\r\n   ```python\r\n   # -*- coding = utf-8 -*-\r\n   from EEM_toolkit import EEMs_Dataset, read_sample_log, read_eems, read_abs, read_blank\r\n   import pickle\r\n   \r\n   \"\"\"\r\n   读取的目录到时候根据自己文件保存的地方进行修改\r\n   此例文件太多，读取文件耗时，为了不重复读取，将数据读取再预处理后保存到本地\r\n   预处理中内滤效应校正和拉曼单位化可以不用做，取决于自己的需要\r\n   去除散射再插值是为了能够进行PARAFAC，这里不支持包含nan的计算，而不去除散射则会影响计算结果\r\n   建议分别在去除散射和插值之后浏览所有EEM，观察设置去除的散射宽度是否合适\r\n   \"\"\"\r\n   sample_log = read_sample_log(r'd:\\Documents\\PycharmProjects\\parafac\\Example\\SampleLog.xlsx')\r\n   Abs, Abs_wave = read_abs(sample_log, r'd:\\Documents\\PycharmProjects\\parafac\\Example\\abs')\r\n   blank = read_blank(sample_log, r'd:\\Documents\\PycharmProjects\\parafac\\Example\\blank')\r\n   c, fl = read_eems(d, r'd:\\Documents\\PycharmProjects\\parafac\\Example\\eem')\r\n   \r\n   x, ex, em = c\r\n   Data = EEMs_Dataset(x, ex, em, file_list=fl)\r\n   Data.plot_eem_by1()\r\n   Data.minus_the_blank(blank)\r\n   # Data.plot_eem_by1()\r\n   Data.raman_areal(blank)\r\n   Data.sub_dataset([], Data.ex < 250, Data.em > 600)\r\n   # Data.plot_eem_by1()\r\n   Data.inner_effect_correct(Abs_wave, Abs)\r\n   # Data.plot_eem_by1()\r\n   Data.cut_ray_scatter([15, 15], [20, 15])\r\n   Data.cut_ram_scatter([15, 15], [10, 10])\r\n   # Data.plot_eem_by1()\r\n   Data.miss_value_interpolation()\r\n   # Data.plot_eem_by1()\r\n   with open('eem_data.pickle', 'wb') as f:\r\n       pickle.dump(Data, f)\r\n   \r\n   ```\r\n\r\n2. 开始分析\r\n\r\n   ```python\r\n   import pickle\r\n   \r\n   \"\"\"\r\n   1. 导入刚才预处理好并保存的数据，加载变量\r\n   \"\"\"\r\n   with open('eem_data.pickle', 'rb') as f:\r\n       data = pickle.load(f)\r\n   \"\"\"\r\n   2. （浏览所有样本，记录明显存在异常，即与其他样本显著不同或存在测试问题的样本编号）\r\n   \"\"\"\r\n   # data.plot_eem_by1()\r\n   \"\"\"\r\n   3. 进行不同组分数的PARAFAC计算\r\n   \"\"\"\r\n   data.multi_non_parafac_cal([2, 6])\r\n   \"\"\"\r\n   4. 查看异常样本测试图，尝试不同的组分数，观察其异常样本\r\n   （即位于图右方和上方的样本，冒号前为样本编号），记录其样本编号\r\n   \"\"\"\r\n   for i in range(2, 6 + 1):\r\n       data.plot_outlier_test(i)\r\n   \r\n   ```\r\n   \r\n   ```python\r\n   import pickle\r\n   \r\n   \"\"\"\r\n   5. 去除异常样本后，重新进行不同组分数的PARAFAC计算，此处为简化过程，只去除了部分\r\n   异常样本，主要为看起来显著不同的样本。实际进行操作时建议去除异常样本后重新建立模\r\n   型查看异常样本测试图，反复记录异常样本编号再去除，直到其leverage基本不大于0.3，\r\n   这样后续分析成功率更高，无论去除了多少样本，冒号前面的样本编号不会发生变化，每次\r\n   记录后添加到最开始去除异常样本的位置即可\r\n   \"\"\"\r\n   with open('eem_data.pickle', 'rb') as f:\r\n       data = pickle.load(f)\r\n   data.sub_dataset([90, 110, 111, 112, 113, 114, 186, 187, 188, 189])\r\n   data.multi_non_parafac_cal([2, 6])\r\n   # for i in range(2, 6 + 1):\r\n   #     data.plot_outlier_test(i)\r\n   \"\"\"\r\n   6. 后续步骤只有一个目的，确定组分数。首先进行分半分析，这会在窗口中打印出每个组\r\n   分的因子相似度及是否经过相似度检验。也可以画图查看不同组分数的因子相似度，在0.95\r\n   之上可认为是一致的。再综合考虑核一致性（不总是可靠）、不同组分数的模型残差，选择\r\n   相对较好的组分数（因子相似度高、核一致性高、残差为随机分布，不存在明显的峰），\r\n   事实上在这一步一般就会选择满足相似度的最大组分数，而在drEEM中，满足此条件的模型\r\n   可认为是经过验证的，可以结束此过程得到结果了\r\n   \"\"\"\r\n   data.split_analysis([2, 6])\r\n   data.plot_factor_similarity()\r\n   data.plot_core_consistency_and_explanation()\r\n   for i in range(2, 6 + 1):\r\n       data.plot_residual_error(i)\r\n   \"\"\"\r\n   因为要分析完前面的结果才能确定组分数，重复跑模型还是很花时间的，所以将跑完的模型\r\n   先保存\r\n   \"\"\"\r\n   with open('result.pickle', 'wb') as f:\r\n       pickle.dump(data, f)\r\n   \r\n   ```\r\n   \r\n   ```python\r\n   \"\"\"\r\n   导入已经跑完的模型，下面开始生成结果\r\n   \"\"\"\r\n   with open('result.pickle', 'rb') as f:\r\n       data = pickle.load(f)\r\n   \"\"\"\r\n   7. 确定组分数，后面的步骤只剩出图和数据导出（如果需要）：分半分析图、组分图、\r\n   载荷图、（FMax图）\r\n   \"\"\"\r\n   fac = 6\r\n   #  出图\r\n   data.plot_split_result(fac)\r\n   data.plot_fingers(fac)\r\n   data.plot_loadings(fac)\r\n   # data.plot_fmax(fac)\r\n   #  导出数据\r\n   data.parafac_result_output(fac)\r\n   # data.eems_output()\r\n   # data.open_fluor(fac)\r\n   \r\n   ```\r\n   \r\n   \r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HHhyJJ/EEMs-toolkit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EEMs-toolkit",
    "package_url": "https://pypi.org/project/EEMs-toolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/EEMs-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/HHhyJJ/EEMs-toolkit"
    },
    "release_url": "https://pypi.org/project/EEMs-toolkit/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.9.0",
    "summary": "EEMs-toolkit是一个可以在Python上对三维荧光（EEM）进行平行因子分析（PARAFAC）的工具包，功能大致类似于MATLAB的drEEM toolbox。",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17460554,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77766465ea5dfe963ec63f2c9a4eb87e887069986eeb922b1de61cc478208b07",
          "md5": "c123c296539d46825704fc2a2fbf19c3",
          "sha256": "2aa1e477bd4d73aaf4782050555881ccf85f3e24095efa792dca26c31039933b"
        },
        "downloads": -1,
        "filename": "EEMs_toolkit-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c123c296539d46825704fc2a2fbf19c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.9.0",
        "size": 15832,
        "upload_time": "2023-01-19T16:27:41",
        "upload_time_iso_8601": "2023-01-19T16:27:41.815392Z",
        "url": "https://files.pythonhosted.org/packages/77/76/6465ea5dfe963ec63f2c9a4eb87e887069986eeb922b1de61cc478208b07/EEMs_toolkit-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b69af036739d0c478553bf6bcddbed241e206eeba1b3d4b62838260a283461e2",
          "md5": "50291bb131aa31735a96d5142a992a52",
          "sha256": "056a467aa7eb3fd05e9ef5f791ba4d41a6079e808b284c7013f2faff89c5f63c"
        },
        "downloads": -1,
        "filename": "EEMs-toolkit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50291bb131aa31735a96d5142a992a52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 19917,
        "upload_time": "2023-01-19T16:27:44",
        "upload_time_iso_8601": "2023-01-19T16:27:44.392993Z",
        "url": "https://files.pythonhosted.org/packages/b6/9a/f036739d0c478553bf6bcddbed241e206eeba1b3d4b62838260a283461e2/EEMs-toolkit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd2cb438ece71e0495118c6e4bff8768a4b8215d16211556194770575b5962f9",
          "md5": "2bd730795f6a454509a1b150ea874829",
          "sha256": "7a789d52006a8ba027f5023ae33b74524fc0300139813d4db0115b53ef75e8f9"
        },
        "downloads": -1,
        "filename": "EEMs-toolkit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2bd730795f6a454509a1b150ea874829",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 20271,
        "upload_time": "2023-03-27T12:04:24",
        "upload_time_iso_8601": "2023-03-27T12:04:24.642346Z",
        "url": "https://files.pythonhosted.org/packages/fd/2c/b438ece71e0495118c6e4bff8768a4b8215d16211556194770575b5962f9/EEMs-toolkit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd2cb438ece71e0495118c6e4bff8768a4b8215d16211556194770575b5962f9",
        "md5": "2bd730795f6a454509a1b150ea874829",
        "sha256": "7a789d52006a8ba027f5023ae33b74524fc0300139813d4db0115b53ef75e8f9"
      },
      "downloads": -1,
      "filename": "EEMs-toolkit-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2bd730795f6a454509a1b150ea874829",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 20271,
      "upload_time": "2023-03-27T12:04:24",
      "upload_time_iso_8601": "2023-03-27T12:04:24.642346Z",
      "url": "https://files.pythonhosted.org/packages/fd/2c/b438ece71e0495118c6e4bff8768a4b8215d16211556194770575b5962f9/EEMs-toolkit-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}