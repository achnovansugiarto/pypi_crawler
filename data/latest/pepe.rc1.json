{
  "info": {
    "author": "Yesudeep Mangalapilly",
    "author_email": "yesudeep@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters"
    ],
    "description": "pepeâ€”a portable multi-language file preprocessor\n        ================================================\n        \n        There are tons of template systems. This is just a basic preprocessor.\n        \n        Pepe is usable both as a command line app and as a Python module.\n        Pepe syntax is hidden within comments (whatever the syntax for comments\n        in the target file type), so that the file can still have valid syntax.\n        Pepe syntax mimics that of the C preprocessor, but its behavior differs.\n        \n        Who is it for?\n        --------------\n        Pepe is targeted at **build systems** that deal with many types of files.\n        Languages for which it works include:\n        \n        * C++\n        * Python,\n        * Perl\n        * Tcl\n        * XML\n        * JavaScript\n        * CSS\n        * IDL\n        * TeX\n        * Fortran\n        * PHP\n        * Java\n        * Shell scripts (Bash, CSH, etc.)\n        * C#\n        \n        History\n        -------\n        Pepe began as a fork of Trent Mick's preprocess_ which has been used for\n        build-time code differentiation in the Komodo_ build system, which\n        includes source code in Python, JavaScript, XML, CSS, Perl, and C/C++.\n        \n        How it works\n        ------------\n        All preprocessor statements are on their own line. A preprocessor statement\n        is a comment (as appropriate for the language of the file being preprocessed).\n        This way the preprocessor statements do not make an unpreprocessed file\n        syntactically incorrect.\n        \n        For example::\n        \n            pepe -D FEATURES=macros,scc code.py\n        \n        will yield this transformation::\n        \n            ...                                     ...\n            # #if \"macros\" in FEATURES\n            def do_work_with_macros():              def do_work_with_macros():\n                pass                                    pass\n            # #else\n            def do_work_without_macros():\n                pass\n            # #endif\n            ...                                     ...\n        \n        or, with a JavaScript file::\n        \n            ...                                     ...\n            // #if \"macros\" in FEATURES\n            function do_work_with_macros() {        function do_work_with_macros() {\n            }                                       }\n            // #else\n            function do_work_without_macros() {\n            }\n            // #endif\n            ...                                     ...\n        \n        The ``#if`` expression (``\"macros\" in FEATURES`` in the example) is Python\n        code, so it has Python's full comparison richness.  A number of\n        preprocessor statements are implemented::\n        \n            #define VAR [VALUE]\n            #undef VAR\n            #ifdef VAR\n            #ifndef VAR\n            #if EXPRESSION\n            #elif EXPRESSION\n            #else\n            #endif\n            #error ERROR_STRING\n            #include \"FILE\"\n        \n        As well, pepe will do inline substitution of defined variables.\n        Although, this is currently turned off by default because substitution occurs\n        in program strings, which is not ideal. When a future version of\n        pepe can lex languages being preprocessed it will NOT substitute\n        into program strings and substitution will be turned ON by default.\n        \n        Install Notes\n        -------------\n        Installing Pepe is easy::\n        \n            $ pip install pepe\n        \n        Getting Started\n        ---------------\n        \n        Using as a shell command::\n        \n            $ pepe --help\n        \n        Pepe can also be used as a module. Please see the documentation_\n        for more information.\n        \n        .. _preprocess: http://code.google.com/p/preprocess/\n        .. _Komodo: http://www.activestate.com/Komodo\n        .. _documentation: http://packages.python.org/pepe/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gorakhargosh/pepe",
    "keywords": "python preprocessor pepe preprocess portable",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pepe",
    "package_url": "https://pypi.org/project/pepe/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pepe/",
    "project_urls": {
      "Homepage": "http://github.com/gorakhargosh/pepe"
    },
    "release_url": "https://pypi.org/project/pepe/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Portable multi-language file preprocessor",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 253311,
  "releases": {
    "1.1.0": []
  },
  "urls": [],
  "vulnerabilities": []
}