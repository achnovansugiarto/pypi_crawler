{
  "info": {
    "author": "TxGNN Team",
    "author_email": "kexinh@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TxGNN: Zero-shot prediction of therapeutic use with geometric deep learning and human centered design\n\nThis repository hosts the official implementation of TxGNN, a method that can predict drug efficacy to disease with limited molecular underpinnings and few/zero treatments by applying geomtric learning on multi-scale disease knowledge graph. \n\n### Installation \n\n```bash\nconda create --name txgnn_env python=3.8\nconda activate txgnn_env\n# Install PyTorch via https://pytorch.org/ with your CUDA versions\nconda install -c dglteam dgl-cuda{$CUDA_VERSION}==0.5.2 # checkout https://www.dgl.ai/pages/start.html for more info, as long as it is DGL 0.5.2\npip install TxGNN\n```\n\nNote that if you want to use disease-area split, you should also install PyG following [this instruction](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html) since some legacy data processing code uses PyG utility functions.\n\n### Core API Interface\nUsing the API, you can (1) reproduce the results in our paper and (2) train TxGNN on your own drug repurposing dataset using a few lines of code, and also generate graph explanations. \n\n```python\nfrom txgnn import TxData, TxGNN, TxEval\n\n# Download/load knowledge graph dataset\nTxData = TxData(data_folder_path = './data')\nTxData.prepare_split(split = 'complex_disease', seed = 42)\nTxGNN = TxGNN(data = TxData, \n              weight_bias_track = False,\n              proj_name = 'TxGNN',\n              exp_name = 'TxGNN'\n              )\n\n# Initialize a new model\nTxGNN.model_initialize(n_hid = 100, \n                      n_inp = 100, \n                      n_out = 100, \n                      proto = True,\n                      proto_num = 3,\n                      attention = False,\n                      sim_measure = 'all_nodes_profile',\n                      agg_measure = 'rarity',\n                      num_walks = 200,\n                      walk_mode = 'bit',\n                      path_length = 2)\n\n```\n\nInstead of initializing a new model, you can also load a saved model:\n\n```python\nTxGNN.load_pretrained('./model_ckpt')\n```\n\nTo do pre-training using link prediction for all edge types, you can type:\n\n```python\nTxGNN.pretrain(n_epoch = 2, \n               learning_rate = 1e-3,\n               batch_size = 1024, \n               train_print_per_n = 20)\n```\n\nLastly, to do finetuning on drug-disease relation with metric learning, you can type:\n\n```python\nTxGNN.finetune(n_epoch = 500, \n               learning_rate = 5e-4,\n               train_print_per_n = 5,\n               valid_per_n = 20,\n               save_name = finetune_result_path)\n```\n\nTo save the trained model, you can type:\n\n```python\nTxGNN.save_model('./model_ckpt')\n```\n\nTo evaluate the model on the entire test set using disease-centric evaluation, you can type:\n\n```python\nresult = TxEval.eval_disease_centric(disease_idxs = 'test_set', \n                                     show_plot = False, \n                                     verbose = True, \n                                     save_result = True,\n                                     return_raw = False,\n                                     save_name = 'SAVE_PATH')\n\n```\n\nIf you want to look at specific disease, you can also do:\n\n```python\nresult = TxEval.eval_disease_centric(disease_idxs = [9907.0, 12787.0], \n                                     relation = 'indication', \n                                     save_result = False)\n```\n\n\nAfter training a satisfying link prediction model, we can also train graph XAI model by:\n\n```python\nTxGNN.train_graphmask(relation = 'indication',\n                      learning_rate = 3e-4,\n                      allowance = 0.005,\n                      epochs_per_layer = 3,\n                      penalty_scaling = 1,\n                      valid_per_n = 20)\n```\n\nYou can retrieve and save the graph XAI gates (whether or not an edge is important) into a pkl file located as `SAVED_PATH/'graphmask_output_RELATION.pkl'`:\n\n```python\ngates = TxGNN.retrieve_save_gates('SAVED_PATH')\n```\n\nOf course, you can save and load graphmask model as well via:\n\n```python\nTxGNN.save_graphmask_model('./graphmask_model_ckpt')\nTxGNN.load_pretrained_graphmask('./graphmask_model_ckpt')\n\n```\n\n### Splits\n\nThere are numerous splits prepared in TxGNN. You can switch among them in the `TxData.prepare_split(split = 'XXX', seed = 42)` function.\n\n- `complex_disease` is the systematic split in the paper, where we first sample a set of diseases and then move all of their treatments to test set such that these diseases have zero treatments in training.\n- Disease area split first obtains a set of diseases in a disease area using disease ontology and move all of their treatments to the test set and then further removes a fraction of local neighborhood around these diseases to simulate the lack of molecular mechanism characterization of these diseases. There are five disease areas: `cell_proliferation`, `mental_health`, `cardiovascular`, `anemia`, `adrenal_gland`\n- `random` is namely random splits which it randomly shuffles across drug-disease pairs. In the end, most of diseases have seen some treatments in the training set.\n\nDuring deployment, when evaluate a specific disease, you may want to just mask this disease and use all of the other diseases. In this case, you can use `TxData.prepare_split(split = 'disease_eval', disease_eval_idx = 'XX')` where `disease_eval_idx` is the index of the disease of interest. \n\nAnother setting is to train the entire network without any disease masking. You can do that via `split = 'full_graph'`. This will automatically use 95% of data for training and 5% for validation set calculation to do early stopping. No test set is used. \n\n\n### Cite Us\n\n```\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mims-harvard/TxGNN",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TxGNN",
    "package_url": "https://pypi.org/project/TxGNN/",
    "platform": null,
    "project_url": "https://pypi.org/project/TxGNN/",
    "project_urls": {
      "Homepage": "https://github.com/mims-harvard/TxGNN"
    },
    "release_url": "https://pypi.org/project/TxGNN/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "TxGNN",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16391550,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9aa198077a78a3cd7a618a77a8b17020242309f404296647c83bbccf145a13",
          "md5": "1536864cd4088c05a8d73d55c5b4342b",
          "sha256": "5dcd7458fb129fbd5e057f0f76212ac589c59adb73d0331bc5ce1923c956e090"
        },
        "downloads": -1,
        "filename": "TxGNN-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1536864cd4088c05a8d73d55c5b4342b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37180,
        "upload_time": "2022-08-24T05:39:31",
        "upload_time_iso_8601": "2022-08-24T05:39:31.019276Z",
        "url": "https://files.pythonhosted.org/packages/de/9a/a198077a78a3cd7a618a77a8b17020242309f404296647c83bbccf145a13/TxGNN-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "226d2d821b01e133484e5f4f928de93aab3ff5c5fadd4fade005a1f2fba7bd8f",
          "md5": "3f02f4f226fcc6afc9d4b0f66612abee",
          "sha256": "ad994b5c46d2584d05dbc69e2daceeba245cfb86ad882e9602ab3de19b4f7d7a"
        },
        "downloads": -1,
        "filename": "TxGNN-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3f02f4f226fcc6afc9d4b0f66612abee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39550,
        "upload_time": "2023-01-04T21:21:58",
        "upload_time_iso_8601": "2023-01-04T21:21:58.767265Z",
        "url": "https://files.pythonhosted.org/packages/22/6d/2d821b01e133484e5f4f928de93aab3ff5c5fadd4fade005a1f2fba7bd8f/TxGNN-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da0f02774a71d7fd35354feae21faaa0bf1c8dea7f182b5be7b1dec65cb9fa3f",
          "md5": "44905f65d51fdabacd6c5557034eb87e",
          "sha256": "353ef228398ec0132cf0ef7a3b214b2f7ae3866c9a18e10e12f5b410cd975ad9"
        },
        "downloads": -1,
        "filename": "TxGNN-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "44905f65d51fdabacd6c5557034eb87e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39765,
        "upload_time": "2023-01-11T16:17:28",
        "upload_time_iso_8601": "2023-01-11T16:17:28.494206Z",
        "url": "https://files.pythonhosted.org/packages/da/0f/02774a71d7fd35354feae21faaa0bf1c8dea7f182b5be7b1dec65cb9fa3f/TxGNN-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da0f02774a71d7fd35354feae21faaa0bf1c8dea7f182b5be7b1dec65cb9fa3f",
        "md5": "44905f65d51fdabacd6c5557034eb87e",
        "sha256": "353ef228398ec0132cf0ef7a3b214b2f7ae3866c9a18e10e12f5b410cd975ad9"
      },
      "downloads": -1,
      "filename": "TxGNN-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "44905f65d51fdabacd6c5557034eb87e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39765,
      "upload_time": "2023-01-11T16:17:28",
      "upload_time_iso_8601": "2023-01-11T16:17:28.494206Z",
      "url": "https://files.pythonhosted.org/packages/da/0f/02774a71d7fd35354feae21faaa0bf1c8dea7f182b5be7b1dec65cb9fa3f/TxGNN-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}