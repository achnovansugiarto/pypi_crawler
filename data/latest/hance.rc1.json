{
  "info": {
    "author": "HANCE",
    "author_email": "HANCE <mail@hance.ai>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Audio Enhancement in Python with HANCE\n\nHANCE is an audio enhancement engine that delivers impressive performance. With its Python wrapper, you can easily integrate HANCE into your Python projects to improve the quality of audio signals.\n\nTo learn more about HANCE, visit [Hance.ai](https://hance.ai).\n\n## Installation\n\nTo install the Python wrapper for HANCE, use 'pip':\n\n    python -m pip install hance\n\nHANCE is compatible with Python 3 and later.\n\n## How to Use\nThe HANCE Python API is a wrapper around the C++ library. Here are a few ways you can use it.\n\nTo use the API, import it and list the available models:\n\n    import hance\n    models = hance.list_models()\n    print(models)\n\n## Process a file\nTo process a file with HANCE, you can use the process_file function as follows:\n\n    import hance\n    models = hance.list_models()\n    hance.process_file(models[0], input_file_path, output_file_path)\n\nThis will apply the enhancement model specified by models[0] to the input file located at input_file_path, and save the enhanced audio to the output file at output_file_path. Please note that in this example, we are using PySoundFile to read and write audio files. While PySoundFile is not a requirement for using HANCE, it is a convenient library for handling audio files in Python. If you wish to use the process_file function as shown here, you will need to install PySoundFile.\n\n## Process a stream\nIn addition to processing audio files, HANCE can also be used on audio streams in real-time. Here is an example using pyaudio to record the microphone, process it in real time, and output it to headphones.\n\n    import pyaudio\n    engine = hance.HanceEngine()\n    p = pyaudio.PyAudio()\n\n    FORMAT = pyaudio.paFloat32\n    CHANNELS = 1\n    RATE = 44100\n    CHUNK = 512\n    \n    \n    print(\"\\nRecord audio from a microphone and process it in realtime with HANCE.\")\n    print(\"To prevent feedback, make sure you are wearing headphones.\")\n    print(\"PyAudio will induce some latency with the roundtrip to the soundcard,\\nbut the HANCE engine runs in realtime.\")\n    print(\"\")\n\n    # Get a list of available input devices\n    input_devices = []\n    for i in range(p.get_device_count()):\n        device_info = p.get_device_info_by_index(i)\n        if device_info[\"maxInputChannels\"] > 0:\n            input_devices.append(device_info)\n\n    # Print the list of available input devices and ask the user to select one\n    print(\"Available input devices:\")\n    for i, device in enumerate(input_devices):\n        print(f\"{i}: {device['name']}\")\n    input_device_index = int(input(\"\\nSelect an input device by entering its number: \"))\n    input_device_info = input_devices[input_device_index]\n\n    # Get a list of available output devices\n    output_devices = []\n    for i in range(p.get_device_count()):\n        device_info = p.get_device_info_by_index(i)\n        if device_info[\"maxOutputChannels\"] > 0:\n            output_devices.append(device_info)\n\n    # Print the list of available output devices and ask the user to select one\n    print(\"\\nAvailable output devices:\")\n    for i, device in enumerate(output_devices):\n        print(f\"{i}: {device['name']}\")\n    output_device_index = int(input(\"\\nSelect an output device by entering its number: \"))\n    output_device_info = output_devices[output_device_index]\n\n    models = hance.list_models()\n    processor = engine.create_processor(models[0], CHANNELS, RATE)\n    \n    stop_thread = False\n    processor_active = True\n    def record_and_playback_thread():\n        stream_record = p.open(format=FORMAT, channels=CHANNELS,\n                    rate=RATE, input=True,\n                    input_device_index=input_device_info['index'],\n                    frames_per_buffer=CHUNK)\n    \n        stream_play = p.open(format=pyaudio.paFloat32,\n                    channels=1,\n                    rate=RATE,\n                    frames_per_buffer=CHUNK,\n                    output=True,\n                    output_device_index=output_device_info['index']\n                    )\n        while not stop_thread:\n            data = stream_record.read(CHUNK, exception_on_overflow = False)\n            audio_buffer = np.frombuffer(data, dtype=np.float32)\n            if processor_active:\n                audio_buffer = processor.process(audio_buffer)\n            stream_play.write(audio_buffer.astype(np.float32).tobytes())\n            \n        # stop Recording\n        stream_record.stop_stream()\n        stream_record.close()\n        \n        stream_play.stop_stream()\n        stream_play.close()\n        \n        \n    \n    t = threading.Thread(target=record_and_playback_thread)\n    t.start()\n    \n    print(\"\\nThe microphone and processing is active\")\n    while True:\n        user_input = input(\"Enter 'p' to toggle processing on and off or 'x' to exit the thread: \")\n        if user_input.lower() == \"p\":\n            # Bypass processing and continue the loop\n            if processor_active:\n                processor_active = False\n                print(\"The processing is bypassed\")\n            else:\n                processor_active = True\n                print(\"The processing is active\")\n        elif user_input.lower() == \"x\":\n            # Stop the thread\n            stop_thread = True\n            break\n    \n    t.join()\n    p.terminate()\n\nFor more information and examples on using HANCE, see the HANCE documentation.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://hance.ai",
    "keywords": "hance,audio enhancement,noise reduction",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hance",
    "package_url": "https://pypi.org/project/hance/",
    "platform": null,
    "project_url": "https://pypi.org/project/hance/",
    "project_urls": {
      "Homepage": "https://hance.ai"
    },
    "release_url": "https://pypi.org/project/hance/1.0.4/",
    "requires_dist": [
      "setuptools",
      "numpy"
    ],
    "requires_python": "!=2.*,>=3.0",
    "summary": "The Python API to the HANCE engine, which offers realtime audio enhancement.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17098139,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f482c4506d8fd8792be313143d24c0a2e7bd4121a1ece3ba0c9d8ba38033e9c",
          "md5": "c6c13407c1267fdae231469687ccfa86",
          "sha256": "aae707df0e336777579900db1f676b251e3b91dfcd4327c590446e28602d3990"
        },
        "downloads": -1,
        "filename": "hance-1.0.4-py3-none-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c6c13407c1267fdae231469687ccfa86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=2.*,>=3.0",
        "size": 7994398,
        "upload_time": "2023-02-28T16:42:04",
        "upload_time_iso_8601": "2023-02-28T16:42:04.110167Z",
        "url": "https://files.pythonhosted.org/packages/7f/48/2c4506d8fd8792be313143d24c0a2e7bd4121a1ece3ba0c9d8ba38033e9c/hance-1.0.4-py3-none-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07cac26271651e56b217671ab7f2e08a44070b1c15246aae9c990598ba0aa01",
          "md5": "ed74c344aea0d7a0f3e43fc63f1d4b53",
          "sha256": "f341b051c0bc0a0b907c5f7b22ab0fa44ed295f524d6900100916fd77a480c86"
        },
        "downloads": -1,
        "filename": "hance-1.0.4-py3-none-macosx_11_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "ed74c344aea0d7a0f3e43fc63f1d4b53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=2.*,>=3.0",
        "size": 7994397,
        "upload_time": "2023-02-28T16:42:07",
        "upload_time_iso_8601": "2023-02-28T16:42:07.022434Z",
        "url": "https://files.pythonhosted.org/packages/f0/7c/ac26271651e56b217671ab7f2e08a44070b1c15246aae9c990598ba0aa01/hance-1.0.4-py3-none-macosx_11_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "387f17cad044618a98129a59bf17e07d16f8c68abfe12bd816468f231cf9917e",
          "md5": "27eecba65bba12ad5c1a943892dbafdc",
          "sha256": "2b1236780e67583638eed10d8010701ca0a1b6d73335f1d4ea2ac4f76404879f"
        },
        "downloads": -1,
        "filename": "hance-1.0.4-py3-none-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "27eecba65bba12ad5c1a943892dbafdc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=2.*,>=3.0",
        "size": 11521432,
        "upload_time": "2023-02-28T16:42:10",
        "upload_time_iso_8601": "2023-02-28T16:42:10.285335Z",
        "url": "https://files.pythonhosted.org/packages/38/7f/17cad044618a98129a59bf17e07d16f8c68abfe12bd816468f231cf9917e/hance-1.0.4-py3-none-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bf92e62a51b779c67fffbd6966dc03bad275f3756fc7a730b9e0651b43ac396",
          "md5": "79f537f41a6af7724117341e2c8b5acb",
          "sha256": "0c936f27d51eb658dcfd69e1dc01bafcfd4619fcc9421006b976aa45097bdd27"
        },
        "downloads": -1,
        "filename": "hance-1.0.4-py3-none-win32.whl",
        "has_sig": false,
        "md5_digest": "79f537f41a6af7724117341e2c8b5acb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=2.*,>=3.0",
        "size": 5217312,
        "upload_time": "2023-02-28T16:42:13",
        "upload_time_iso_8601": "2023-02-28T16:42:13.127571Z",
        "url": "https://files.pythonhosted.org/packages/9b/f9/2e62a51b779c67fffbd6966dc03bad275f3756fc7a730b9e0651b43ac396/hance-1.0.4-py3-none-win32.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15f80979963cfeed1f1ee6329923c48262d04ccc1583bca0c1eeed57ff1fb2f3",
          "md5": "949cce971206e16533a025db87f03066",
          "sha256": "026732bb91765617ee97d4a6d4d54feb2198c7932b9ca8b2698eaaebd43981bf"
        },
        "downloads": -1,
        "filename": "hance-1.0.4-py3-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "949cce971206e16533a025db87f03066",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=2.*,>=3.0",
        "size": 7153952,
        "upload_time": "2023-02-28T16:42:15",
        "upload_time_iso_8601": "2023-02-28T16:42:15.616912Z",
        "url": "https://files.pythonhosted.org/packages/15/f8/0979963cfeed1f1ee6329923c48262d04ccc1583bca0c1eeed57ff1fb2f3/hance-1.0.4-py3-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f482c4506d8fd8792be313143d24c0a2e7bd4121a1ece3ba0c9d8ba38033e9c",
        "md5": "c6c13407c1267fdae231469687ccfa86",
        "sha256": "aae707df0e336777579900db1f676b251e3b91dfcd4327c590446e28602d3990"
      },
      "downloads": -1,
      "filename": "hance-1.0.4-py3-none-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c6c13407c1267fdae231469687ccfa86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=2.*,>=3.0",
      "size": 7994398,
      "upload_time": "2023-02-28T16:42:04",
      "upload_time_iso_8601": "2023-02-28T16:42:04.110167Z",
      "url": "https://files.pythonhosted.org/packages/7f/48/2c4506d8fd8792be313143d24c0a2e7bd4121a1ece3ba0c9d8ba38033e9c/hance-1.0.4-py3-none-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f07cac26271651e56b217671ab7f2e08a44070b1c15246aae9c990598ba0aa01",
        "md5": "ed74c344aea0d7a0f3e43fc63f1d4b53",
        "sha256": "f341b051c0bc0a0b907c5f7b22ab0fa44ed295f524d6900100916fd77a480c86"
      },
      "downloads": -1,
      "filename": "hance-1.0.4-py3-none-macosx_11_0_arm64.whl",
      "has_sig": false,
      "md5_digest": "ed74c344aea0d7a0f3e43fc63f1d4b53",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=2.*,>=3.0",
      "size": 7994397,
      "upload_time": "2023-02-28T16:42:07",
      "upload_time_iso_8601": "2023-02-28T16:42:07.022434Z",
      "url": "https://files.pythonhosted.org/packages/f0/7c/ac26271651e56b217671ab7f2e08a44070b1c15246aae9c990598ba0aa01/hance-1.0.4-py3-none-macosx_11_0_arm64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "387f17cad044618a98129a59bf17e07d16f8c68abfe12bd816468f231cf9917e",
        "md5": "27eecba65bba12ad5c1a943892dbafdc",
        "sha256": "2b1236780e67583638eed10d8010701ca0a1b6d73335f1d4ea2ac4f76404879f"
      },
      "downloads": -1,
      "filename": "hance-1.0.4-py3-none-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "27eecba65bba12ad5c1a943892dbafdc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=2.*,>=3.0",
      "size": 11521432,
      "upload_time": "2023-02-28T16:42:10",
      "upload_time_iso_8601": "2023-02-28T16:42:10.285335Z",
      "url": "https://files.pythonhosted.org/packages/38/7f/17cad044618a98129a59bf17e07d16f8c68abfe12bd816468f231cf9917e/hance-1.0.4-py3-none-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bf92e62a51b779c67fffbd6966dc03bad275f3756fc7a730b9e0651b43ac396",
        "md5": "79f537f41a6af7724117341e2c8b5acb",
        "sha256": "0c936f27d51eb658dcfd69e1dc01bafcfd4619fcc9421006b976aa45097bdd27"
      },
      "downloads": -1,
      "filename": "hance-1.0.4-py3-none-win32.whl",
      "has_sig": false,
      "md5_digest": "79f537f41a6af7724117341e2c8b5acb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=2.*,>=3.0",
      "size": 5217312,
      "upload_time": "2023-02-28T16:42:13",
      "upload_time_iso_8601": "2023-02-28T16:42:13.127571Z",
      "url": "https://files.pythonhosted.org/packages/9b/f9/2e62a51b779c67fffbd6966dc03bad275f3756fc7a730b9e0651b43ac396/hance-1.0.4-py3-none-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15f80979963cfeed1f1ee6329923c48262d04ccc1583bca0c1eeed57ff1fb2f3",
        "md5": "949cce971206e16533a025db87f03066",
        "sha256": "026732bb91765617ee97d4a6d4d54feb2198c7932b9ca8b2698eaaebd43981bf"
      },
      "downloads": -1,
      "filename": "hance-1.0.4-py3-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "949cce971206e16533a025db87f03066",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=2.*,>=3.0",
      "size": 7153952,
      "upload_time": "2023-02-28T16:42:15",
      "upload_time_iso_8601": "2023-02-28T16:42:15.616912Z",
      "url": "https://files.pythonhosted.org/packages/15/f8/0979963cfeed1f1ee6329923c48262d04ccc1583bca0c1eeed57ff1fb2f3/hance-1.0.4-py3-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}