{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Database"
    ],
    "description": "Assorted utility functions to support working with SQLAlchemy.\n\n*Latest release 20230212*:\nORM.__init__: drop case_sensitive, no longer supported?\n\n## Function `auto_session(function)`\n\nDecorator to run a function in a session if one is not presupplied.\nThe function `function` runs within a transaction,\nnested if the session already exists.\n\nSee `with_session` for details.\n\n## Class `BasicTableMixin`\n\nUseful methods for most tables.\n\n## Function `find_json_field(column_value, field_name, *, infill=False)`\n\nDescend a JSONable Python object `column_value`\nto `field_name`.\nReturn `column_value` (possibly infilled), `final_field`, `final_field_name`.\n\nThis supports database row columns which are JSON columns.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `infill`: optional keyword parameter, default `False`.\n  If true,\n  `column_value` and its innards will be filled in as `dict`s\n  to allow deferencing the `field_name`.\n\nThe `field_name` is a `str`\nconsisting of a period (`'.'`) separated sequence of field parts.\nEach field part becomes a key to index the column mapping.\nThese keys are split into the leading field parts\nand the final field part,\nwhich is returned as `final_field_name` above.\n\nThe `final_field` return value above\nis the mapping within which `final_field_value` may lie\nand where `final_field_value` may be set.\nNote: it may not be present.\n\nIf a leading key is missing and `infill` is true\nthe corresponding part of the `column_value` is set to an empty dictionary\nin order to allow deferencing the leading key.\nThis includes the case when `column_value` itself is `None`,\nwhich is why the `column_value` is part of the return.\n\nIf a leading key is missing and `infill` is false\nthis function will raise a `KeyError`\nfor the portion of the `field_name` which failed.\n\nExamples:\n\n    >>> find_json_field({'a':{'b':{}}}, 'a.b')\n    ({'a': {'b': {}}}, {'b': {}}, 'b')\n    >>> find_json_field({'a':{}}, 'a.b')\n    ({'a': {}}, {}, 'b')\n    >>> find_json_field({'a':{'b':{}}}, 'a.b.c.d')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'a.b.c'\n    >>> find_json_field({'a':{'b':{}}}, 'a.b.c.d', infill=True)\n    ({'a': {'b': {'c': {}}}}, {}, 'd')\n    >>> find_json_field(None, 'a.b.c.d')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'a'\n    >>> find_json_field(None, 'a.b.c.d', infill=True)\n    ({'a': {'b': {'c': {}}}}, {}, 'd')\n\n## Function `get_json_field(column_value, field_name, *, default=None)`\n\nReturn the value of `field_name` from `column_value`\nor a defaault if the field is not present.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `default`: default value to return if the field is not present,\n  default: `None`\n\nExamples:\n\n    >>> get_json_field({'a': 1}, 'a')\n    1\n    >>> get_json_field({'b': 1}, 'a')\n    >>> get_json_field({'a': {}}, 'a.b')\n    >>> get_json_field({'a': {'b': 2}}, 'a.b')\n    2\n\n## Class `HasIdMixin`\n\nInclude an \"id\" `Column` as the primary key.\n\n## Function `json_column(*da, **dkw)`\n\nClass decorator to declare a virtual column name on a table\nwhere the value resides inside a JSON column of the table.\n\nParameters:\n* `cls`: the class to annotate\n* `attr`: the virtual column name to present as a row attribute\n* `json_field_name`: the field within the JSON column\n  used to store this value,\n  default the same as `attr`\n* `json_column_name`: the name of the associated JSON column,\n  default `'info'`\n* `default`: the default value returned by the getter\n  if the field is not present,\n  default `None`\n\nExample use:\n\n    Base = declarative_base()\n    ...\n    @json_column('virtual_name', 'json.field.name')\n    class TableClass(Base):\n      ...\n\nThis annotates the class with a `.virtual_name` property\nwhich can be accessed or set,\naccessing or modifying the associated JSON column\n(in this instance, the column `info`,\naccessing `info['json']['field']['name']`).\n\n## Function `log_level(func, a, kw, level=None)`\n\nTemporarily set the level of the default SQLAlchemy logger to `level`.\nYields the logger.\n\n*NOTE*: this is not MT safe - competing Threads can mix log levels up.\n\n## Class `ORM(cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin)`\n\nA convenience base class for an ORM class.\n\nThis defines a `.Base` attribute which is a new `DeclarativeBase`\nand provides various Session related convenience methods.\nIt is also a `MultiOpenMixin` subclass\nsupporting nested open/close sequences and use as a context manager.\n\n*Method `ORM.__init__(self, db_url, serial_sessions=None)`*:\nInitialise the ORM.\n\nIf `serial_sessions` is true (default `False`)\nthen allocate a lock to serialise session allocation.\nThis might be chosen with SQL backends which do not support\nconcurrent sessions such as SQLite.\n\nIn the case of SQLite there's a small inbuilt timeout in\nan attempt to serialise transactions but it is possible to\nexceed it easily and recovery is usually infeasible.\nInstead we use the `serial_sessions` option to obtain a\nmutex before allocating a session.\n\n## Function `orm_auto_session(method)`\n\nDecorator to run a method in a session derived from `self.orm`\nif a session is not presupplied.\nIntended to assist classes with a `.orm` attribute.\n\nSee `with_session` for details.\n\n## Function `proxy_on_demand_field(*da, **dkw)`\n\nA decorator to provide a field value on demand\nvia a function `field_func(self,db_row,session=session)`.\n\nExample:\n\n    @property\n    @proxy_on_demand_field\n    def formats(self,db_row,*,session):\n        \"\"\" A mapping of Calibre format keys to format paths\n            computed on demand.\n        \"\"\"\n        return {\n            fmt.format:\n            joinpath(db_row.path, f'{fmt.name}.{fmt.format.lower()}')\n            for fmt in db_row.formats\n        }\n\n## Function `RelationProxy(relation, columns: Union[str, Tuple[str], List[str]], *, id_column: Optional[str] = None, orm=None)`\n\nConstruct a proxy for a row from a relation.\n\nParameters:\n* `relation`: an ORM relation for which this will be a proxy\n* `columns`: a list of the column names to cache,\n  or a space separated string of the column names\n* `id_column`: options primary key column name,\n  default from `BasicTableMixin.DEFAULT_ID_COLUMN`: `'id'`\n* `orm`: the ORM, default from `relation.orm`\n\nThis is something of a workaround for applications which dip\nbriefly into the database to obtain information instead of\ndoing single long running transactions or sessions.\nInstead of keeping the row instance around, which might want\nto load related data on demand after its source session is\nexpired, we keep a proxy for the row with cached values\nand refetch the row at need if further information is required.\n\nTypical use is to construct this proxy class as part\nof the `__init__` of a larger class which accesses the database\nas part of its operation.\nThe example below is based on `cs.ebooks.calibre.CalibreTree`:\n\n    def __init__(self, calibrepath):\n      super().__init__(calibrepath)\n      # define the proxy classes\n      class CalibreBook(RelationProxy(self.db.books, [\n          'author',\n          'title',\n      ])):\n        \"\"\" A reference to a book in a Calibre library.\n        \"\"\"\n        @typechecked\n        def __init__(self, tree: CalibreTree, dbid: int, db_book=None):\n          self.tree = tree\n          self.dbid = dbid\n        ... various other CalibreBook methods ...\n      self.CalibreBook = CalibreBook\n\n    def __getitem__(self, dbid):\n      return self.CalibreBook(self, dbid, db_book=db_book)\n\n## Function `set_json_field(column_value, field_name, value, *, infill=False)`\n\nSet a new `value` for `field_name` of `column_value`.\nReturn the new `column_value`.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `value`: the value to store as `field_name`\n* `infill`: optional keyword parameter, default `False`.\n  If true,\n  `column_value` and its innards will be filled in as `dict`s\n  to allow deferencing the `field_name`.\n\nAs with `find_json_field`,\na true `infill` may modify `column_value` to provide `field_name`\nwhich is why this function returns the new `column_value`.\n\nExamples:\n\n    >>> set_json_field({'a': 2}, 'a', 3)\n    {'a': 3}\n    >>> set_json_field({'a': 2, 'b': {'c': 5}}, 'b.c', 4)\n    {'a': 2, 'b': {'c': 4}}\n    >>> set_json_field({'a': 2}, 'b.c', 4)\n    Traceback (most recent call last):\n        ...\n    KeyError: 'b'\n    >>> set_json_field({'a': 2}, 'b.c', 4, infill=True)\n    {'a': 2, 'b': {'c': 4}}\n    >>> set_json_field(None, 'b.c', 4, infill=True)\n    {'b': {'c': 4}}\n\n## Class `SQLAState(cs.threads.State, _thread._local)`\n\nThread local state for SQLAlchemy ORM and session.\n\n## Function `using_session(orm=None, session=None)`\n\nA context manager to prepare an SQLAlchemy session\nfor use by a suite.\n\nParameters:\n* `orm`: optional reference ORM,\n  an object with a `.session()` method for creating a new session.\n  Default: if needed, obtained from the global `state.orm`.\n* `session`: optional existing session.\n  Default: the global `state.session` if not `None`,\n  otherwise created by `orm.session()`.\n\nIf a new session is created, the new session and reference ORM\nare pushed onto the globals `state.session` and `state.orm`\nrespectively.\n\nIf an existing session is reused,\nthe suite runs within a savepoint from `session.begin_nested()`.\n\n## Function `with_orm(function, *a, orm=None, **kw)`\n\nCall `function` with the supplied `orm` in the shared state.\n\n## Function `with_session(function, *a, orm=None, session=None, **kw)`\n\nCall `function(*a,session=session,**kw)`, creating a session if required.\nThe function `function` runs within a transaction,\nnested if the session already exists.\nIf a new session is created\nit is set as the default session in the shared state.\n\nThis is the inner mechanism of `@auto_session` and\n`ORM.auto_session`.\n\nParameters:\n* `function`: the function to call\n* `a`: the positional parameters\n* `orm`: optional ORM class with a `.session()` context manager method\n  such as the `ORM` base class supplied by this module.\n* `session`: optional existing ORM session\n* `kw`: other keyword arguments, passed to `function`\n\nOne of `orm` or `session` must be not `None`; if `session`\nis `None` then one is made from `orm.session()` and used as\na context manager.\n\nThe `session` is also passed to `function` as\nthe keyword parameter `session` to support nested calls.\n\n# Release Log\n\n\n\n*Release 20230212*:\nORM.__init__: drop case_sensitive, no longer supported?\n\n*Release 20220606*:\n* BasicTableMixin: provide DEFAULT_ID_COLUMN='id', by_id() has new optional id_column parameter.\n* RelationProxy factory to make base classes which proxy a relation, for circumstances where you want to minimise access to the db itself.\n* ORM.engine_keywords: turn on echo mode only if \"SQL\" in $DEBUG.\n\n*Release 20220311*:\nMany updates and small fixes.\n\n*Release 20210420*:\n* ORM: drop .Session from docstring, no longer used.\n* Rename ORM.sessionmaker to ORM._sessionmaker, not for public use.\n* ORM: replace session with arranged_session, which allocates a session in conformance with ORM.serial_sessions (serial sessions are used with SQLite).\n* Drop @ORM.auto_session and @ORM.orm_method decorators, no longer used.\n* SQLAState.new_session: use orm.arranged_session(), use begin_nested(); SQLAState.auto_session: use begin_nested().\n\n*Release 20210322*:\nDelete escaped debug code which issued a RuntimeError.\n\n*Release 20210321*:\n* Default session support, particularly though an ORM's .sqla_state per-Thread state object - this allows removal of a lot of plumbing and @auto_session decoration.\n* Support for serialised sessions, for db backend where only one session may be active at a time; this brings easy support for multithreaded SQLite access.\n\n*Release 20210306*:\n* Rename _state to state, making it public.\n* Some other internal changes.\n\n*Release 20201025*:\n* New BasicTableMixin and HasIdMixin classes with useful methods and a typical `id` Column respectively.\n* Assorted fixes and improvements.\n\n*Release 20190830.1*:\nHave the decorators set .__module__.\n\n*Release 20190830*:\n@json_column: small docstring improvement.\n\n*Release 20190829*:\n* Bugfix @json_column setter: mark the column as modified for the ORM.\n* New push_log_level context manager and @log_level decorator to temporarily change the SQLAlchemy logging handler level.\n\n*Release 20190812*:\n* Make ORM a MultiOpenMixin.\n* get_json_field: use forgotten `default` parameter.\n* Other minor changes.\n\n*Release 20190526*:\n* Support for virtual columns mapped to a JSON column interior value:\n* New functions find_json_field, get_json_field, set_json_field.\n* New decorator @json_column for declaritive_base tables.\n\n*Release 20190517*:\n* Make ORM._Session private session factory the public ORM.Session factory for external use.\n* with_session: preexisting sessions still trigger a session.begin_nested, removes flush/commit tension elsewhere.\n\n*Release 20190403*:\n* Rename @ORM.orm_auto_session to @ORM.auto_session.\n* New @orm_auto_session decorator for methods of objects with a .orm attribute.\n\n*Release 20190319.1*:\nInitial release. ORM base class, @auto_session decorator.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python2,python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.sqlalchemy-utils",
    "package_url": "https://pypi.org/project/cs.sqlalchemy-utils/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.sqlalchemy-utils/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.sqlalchemy-utils/20230212/",
    "requires_dist": [
      "cs.deco (>=20230210)",
      "cs.fileutils (>=20221118)",
      "cs.lex (>=20230210)",
      "cs.logutils (>=20220531)",
      "cs.pfx (>=20221118)",
      "cs.py.func (>=20230210)",
      "cs.resources (>=20230125)",
      "cs.threads (>=20230125)",
      "icontract",
      "sqlalchemy",
      "typeguard"
    ],
    "requires_python": "",
    "summary": "Assorted utility functions to support working with SQLAlchemy.",
    "version": "20230212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16814869,
  "releases": {
    "20190319.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f68bb95de4cec9f8d040dcdfb692a7136e6f9d0636d19df1f7bdf4e2e84e7bd",
          "md5": "36ebb8abbcb858e673c89ea2bde6c54f",
          "sha256": "5d5a2fde75397ff9fa26d78721f156eda4327f92802722d8d66e7fb0678858e9"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190319.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36ebb8abbcb858e673c89ea2bde6c54f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2810,
        "upload_time": "2019-03-19T03:46:10",
        "upload_time_iso_8601": "2019-03-19T03:46:10.973718Z",
        "url": "https://files.pythonhosted.org/packages/0f/68/bb95de4cec9f8d040dcdfb692a7136e6f9d0636d19df1f7bdf4e2e84e7bd/cs.sqlalchemy_utils-20190319.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190403": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e63bfd3e774dfb7bed4075104d2650f9a545898a14fec45f1fbe4d56a8a5a18",
          "md5": "2cb1f1ab684a1ecd06ff8a157f018271",
          "sha256": "8ccd3b7e1652254d76005af747f520cf7ba2a94427206950b73bd54b01f146bc"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190403.tar.gz",
        "has_sig": false,
        "md5_digest": "2cb1f1ab684a1ecd06ff8a157f018271",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2968,
        "upload_time": "2019-04-03T03:24:49",
        "upload_time_iso_8601": "2019-04-03T03:24:49.921986Z",
        "url": "https://files.pythonhosted.org/packages/2e/63/bfd3e774dfb7bed4075104d2650f9a545898a14fec45f1fbe4d56a8a5a18/cs.sqlalchemy_utils-20190403.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190517": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6befe7645c8cdeda875a50c80edd2039d5174fcf405a4a14a87112bd2171d0ae",
          "md5": "52341c2de44426dcd1dd74e423331bd9",
          "sha256": "63ebffdca03bec39276bbad80545afc48f480440491413ca35fb9a7ee4626e14"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190517.tar.gz",
        "has_sig": false,
        "md5_digest": "52341c2de44426dcd1dd74e423331bd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2990,
        "upload_time": "2019-05-17T03:07:07",
        "upload_time_iso_8601": "2019-05-17T03:07:07.884432Z",
        "url": "https://files.pythonhosted.org/packages/6b/ef/e7645c8cdeda875a50c80edd2039d5174fcf405a4a14a87112bd2171d0ae/cs.sqlalchemy_utils-20190517.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190526": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83b660ede2525dff5835587e9fa33e9fc202d24a82c6d40093414db454d8908f",
          "md5": "4788629a15163e5babc461ba5acdbac6",
          "sha256": "995d9b648fb884edd75b4e0563a75fe5e08ff844911bff26e137482595aa5a45"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190526.tar.gz",
        "has_sig": false,
        "md5_digest": "4788629a15163e5babc461ba5acdbac6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5690,
        "upload_time": "2019-05-26T10:17:54",
        "upload_time_iso_8601": "2019-05-26T10:17:54.727984Z",
        "url": "https://files.pythonhosted.org/packages/83/b6/60ede2525dff5835587e9fa33e9fc202d24a82c6d40093414db454d8908f/cs.sqlalchemy_utils-20190526.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190812": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0fea78fba33493e9ef763d94fdf9ac5911924f66615d84a1bb424d9b407e8f8",
          "md5": "d2de45850e7cd1989cb89dd6387c951f",
          "sha256": "2012b790b505c111f01de81059ff5c8aeedd5afe0c5ae63378860449e800c326"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190812.tar.gz",
        "has_sig": false,
        "md5_digest": "d2de45850e7cd1989cb89dd6387c951f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6542,
        "upload_time": "2019-08-11T23:31:19",
        "upload_time_iso_8601": "2019-08-11T23:31:19.477753Z",
        "url": "https://files.pythonhosted.org/packages/e0/fe/a78fba33493e9ef763d94fdf9ac5911924f66615d84a1bb424d9b407e8f8/cs.sqlalchemy_utils-20190812.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190830": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bca25d45cc1db917c4343ab3792e993010165c259e1570c0167b046597fc6b2",
          "md5": "144da6d3d582c9615a5f0844f038f10e",
          "sha256": "0eb8ac36a0284962a00aa2fc760d19e6036a2606121f5875551775c1d7ff8e76"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190830.tar.gz",
        "has_sig": false,
        "md5_digest": "144da6d3d582c9615a5f0844f038f10e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8241,
        "upload_time": "2019-08-29T22:08:06",
        "upload_time_iso_8601": "2019-08-29T22:08:06.205543Z",
        "url": "https://files.pythonhosted.org/packages/5b/ca/25d45cc1db917c4343ab3792e993010165c259e1570c0167b046597fc6b2/cs.sqlalchemy_utils-20190830.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190830.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3cfc20e01814211597bf95bf43b78d5ab21aed0c51aec7f77063882a772b4f8",
          "md5": "9927a0343effb2043bc31f5ca59ac82e",
          "sha256": "469423e73b1d7395ac1b5c016ec041fc1975076ab8c9b39a8578e6236098a3f2"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20190830.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9927a0343effb2043bc31f5ca59ac82e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8366,
        "upload_time": "2019-08-29T22:21:10",
        "upload_time_iso_8601": "2019-08-29T22:21:10.900847Z",
        "url": "https://files.pythonhosted.org/packages/a3/cf/c20e01814211597bf95bf43b78d5ab21aed0c51aec7f77063882a772b4f8/cs.sqlalchemy_utils-20190830.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201025": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25fad74b5606a40cab27d5d40ffabcdeae9df14930769dc35f39903d92af81fe",
          "md5": "1d31ba67ea507ad324a3fe496b3d3186",
          "sha256": "c654261a5d5a66a21800c713513ea46781744047cb35d3ddc4696fc60f2bf7e0"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20201025.tar.gz",
        "has_sig": false,
        "md5_digest": "1d31ba67ea507ad324a3fe496b3d3186",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11101,
        "upload_time": "2020-10-25T04:34:31",
        "upload_time_iso_8601": "2020-10-25T04:34:31.559509Z",
        "url": "https://files.pythonhosted.org/packages/25/fa/d74b5606a40cab27d5d40ffabcdeae9df14930769dc35f39903d92af81fe/cs.sqlalchemy_utils-20201025.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210306": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d20eb251553a6d2f3d71e5d522e911446e21f62db6dc3c25ebda6f3dda57629",
          "md5": "82eac17db0f8a50b862c62931c4d5813",
          "sha256": "2e7ee848776a5b1bd3a6fd2a6949d68d4a868efa177805147b462e09655f1b8e"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20210306.tar.gz",
        "has_sig": false,
        "md5_digest": "82eac17db0f8a50b862c62931c4d5813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11613,
        "upload_time": "2021-03-06T00:21:10",
        "upload_time_iso_8601": "2021-03-06T00:21:10.478918Z",
        "url": "https://files.pythonhosted.org/packages/1d/20/eb251553a6d2f3d71e5d522e911446e21f62db6dc3c25ebda6f3dda57629/cs.sqlalchemy_utils-20210306.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210321": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "109730232f8753008d58fa4f44fb90adb74caf208cba204845bfbbb9c0a9d8e6",
          "md5": "6144f700a8e8cbf1c950181d29b6c83e",
          "sha256": "cc131c8116e489f4e2daee721ec74c13e299704ae2f5086fe6d5b9c766f95688"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20210321.tar.gz",
        "has_sig": false,
        "md5_digest": "6144f700a8e8cbf1c950181d29b6c83e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15821,
        "upload_time": "2021-03-21T04:59:31",
        "upload_time_iso_8601": "2021-03-21T04:59:31.912615Z",
        "url": "https://files.pythonhosted.org/packages/10/97/30232f8753008d58fa4f44fb90adb74caf208cba204845bfbbb9c0a9d8e6/cs.sqlalchemy_utils-20210321.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210322": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7069c1c235a018b8718076ee954b832f6d7451a956bf2585523f9e1121a8c1d8",
          "md5": "32dd1d01669c741214fe998756e0f181",
          "sha256": "8ca7acf496865e3565827ca14fe0456b158998ffffb62749e6a6d89b939ee3c9"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20210322.tar.gz",
        "has_sig": false,
        "md5_digest": "32dd1d01669c741214fe998756e0f181",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15891,
        "upload_time": "2021-03-21T22:52:40",
        "upload_time_iso_8601": "2021-03-21T22:52:40.240649Z",
        "url": "https://files.pythonhosted.org/packages/70/69/c1c235a018b8718076ee954b832f6d7451a956bf2585523f9e1121a8c1d8/cs.sqlalchemy_utils-20210322.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210420": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfc766840d152db5fe0312468099d20e3b7fed916a7737fdacdc8c531fa85094",
          "md5": "00dba7269bd3fb1ee750c5bf6a829e61",
          "sha256": "45d96d6cc84e40ecc80eaa041bfd69ac2383b59cf234dfe20559b9c03d0a30e2"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20210420.tar.gz",
        "has_sig": false,
        "md5_digest": "00dba7269bd3fb1ee750c5bf6a829e61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15243,
        "upload_time": "2021-04-20T02:08:06",
        "upload_time_iso_8601": "2021-04-20T02:08:06.458264Z",
        "url": "https://files.pythonhosted.org/packages/cf/c7/66840d152db5fe0312468099d20e3b7fed916a7737fdacdc8c531fa85094/cs.sqlalchemy_utils-20210420.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220311": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c8a813c15660ad9ae49003710f0c69ec1e00af4589d421eaad5646dd835034f",
          "md5": "7e01881e651f239b9c8982e8d61cdd3c",
          "sha256": "3d520a5e7796ce01f02ef241e1d027a7ceb70c8ccffd01bc3270262ade3617d6"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20220311.tar.gz",
        "has_sig": false,
        "md5_digest": "7e01881e651f239b9c8982e8d61cdd3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14428,
        "upload_time": "2022-03-11T00:53:58",
        "upload_time_iso_8601": "2022-03-11T00:53:58.457239Z",
        "url": "https://files.pythonhosted.org/packages/3c/8a/813c15660ad9ae49003710f0c69ec1e00af4589d421eaad5646dd835034f/cs.sqlalchemy_utils-20220311.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220606": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18cf96267d76d98a09a6c968d683cdaad5b97f9f29544eae802ab540fd70b999",
          "md5": "2f32fad351e183b7cc82ad0044768622",
          "sha256": "9794a85ccc72b85e75a6ab8ae56cd4ef1671d6719dea76527fb0551f01cf3e09"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20220606-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f32fad351e183b7cc82ad0044768622",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14172,
        "upload_time": "2022-06-06T08:03:23",
        "upload_time_iso_8601": "2022-06-06T08:03:23.140607Z",
        "url": "https://files.pythonhosted.org/packages/18/cf/96267d76d98a09a6c968d683cdaad5b97f9f29544eae802ab540fd70b999/cs.sqlalchemy_utils-20220606-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b2b1cf4ccd3703bd28ca0f26e234dd5a0077d6251b4a7b60f197f7ea5c57b9",
          "md5": "c3488768854d9741248fec177664c293",
          "sha256": "bb88021615f8fdbef262eba5f17497ca47044d8f696cd791dadfb5f5067aea8a"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20220606.tar.gz",
        "has_sig": false,
        "md5_digest": "c3488768854d9741248fec177664c293",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16605,
        "upload_time": "2022-06-06T08:03:26",
        "upload_time_iso_8601": "2022-06-06T08:03:26.335236Z",
        "url": "https://files.pythonhosted.org/packages/28/b2/b1cf4ccd3703bd28ca0f26e234dd5a0077d6251b4a7b60f197f7ea5c57b9/cs.sqlalchemy_utils-20220606.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85254ef5143ab88480e0da7ded8984480706c9c033d99fede1c49e63eb7f2577",
          "md5": "68d19d0f72aa7ef5ed15513427b86867",
          "sha256": "5869225c913db7530122aad2ff2352154052491de039678040ba672ca4de2947"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20230212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68d19d0f72aa7ef5ed15513427b86867",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14230,
        "upload_time": "2023-02-11T21:17:50",
        "upload_time_iso_8601": "2023-02-11T21:17:50.558430Z",
        "url": "https://files.pythonhosted.org/packages/85/25/4ef5143ab88480e0da7ded8984480706c9c033d99fede1c49e63eb7f2577/cs.sqlalchemy_utils-20230212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aae51f50bd3f2e9dcb9bb1d756ee1b400db64bfe8d191dac495d529116042b8e",
          "md5": "fcc0ee33224f9846d02774972fa88196",
          "sha256": "a8b99066f8a04be314d2d19f34e7dc5352526ee0c39774df210f13385eb2bda3"
        },
        "downloads": -1,
        "filename": "cs.sqlalchemy_utils-20230212.tar.gz",
        "has_sig": false,
        "md5_digest": "fcc0ee33224f9846d02774972fa88196",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16574,
        "upload_time": "2023-02-11T21:17:52",
        "upload_time_iso_8601": "2023-02-11T21:17:52.518518Z",
        "url": "https://files.pythonhosted.org/packages/aa/e5/1f50bd3f2e9dcb9bb1d756ee1b400db64bfe8d191dac495d529116042b8e/cs.sqlalchemy_utils-20230212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85254ef5143ab88480e0da7ded8984480706c9c033d99fede1c49e63eb7f2577",
        "md5": "68d19d0f72aa7ef5ed15513427b86867",
        "sha256": "5869225c913db7530122aad2ff2352154052491de039678040ba672ca4de2947"
      },
      "downloads": -1,
      "filename": "cs.sqlalchemy_utils-20230212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68d19d0f72aa7ef5ed15513427b86867",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14230,
      "upload_time": "2023-02-11T21:17:50",
      "upload_time_iso_8601": "2023-02-11T21:17:50.558430Z",
      "url": "https://files.pythonhosted.org/packages/85/25/4ef5143ab88480e0da7ded8984480706c9c033d99fede1c49e63eb7f2577/cs.sqlalchemy_utils-20230212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aae51f50bd3f2e9dcb9bb1d756ee1b400db64bfe8d191dac495d529116042b8e",
        "md5": "fcc0ee33224f9846d02774972fa88196",
        "sha256": "a8b99066f8a04be314d2d19f34e7dc5352526ee0c39774df210f13385eb2bda3"
      },
      "downloads": -1,
      "filename": "cs.sqlalchemy_utils-20230212.tar.gz",
      "has_sig": false,
      "md5_digest": "fcc0ee33224f9846d02774972fa88196",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16574,
      "upload_time": "2023-02-11T21:17:52",
      "upload_time_iso_8601": "2023-02-11T21:17:52.518518Z",
      "url": "https://files.pythonhosted.org/packages/aa/e5/1f50bd3f2e9dcb9bb1d756ee1b400db64bfe8d191dac495d529116042b8e/cs.sqlalchemy_utils-20230212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}