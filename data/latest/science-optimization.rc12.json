{
  "info": {
    "author": "Matheus Mendon√ßa",
    "author_email": "matheus.mendonca@enacom.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Optimization Framework \n\nThis is a framework for linear and non-linear optimization developed by ENACOM Group.\n\nIt solves a problem in the form:\n\n```\nmin  f(x)\n\ns.t. g(x) <= 0\n     h(x)  = 0\n     x_min <= x <= x_max\n```\n\nwhere `x` is an n-dimensional vector, `f(x)` maps the n-dimensional space to the o-dimensional space,\nwith `o` being the number of objectives. \n## Prerequisites\n\nWhat you need to be able to run:\n\n* Python 3.6 +\n\nAll requirements are in the file `requirements.txt`.\nTo install all packages at once: \n```shell\n$ pip install -r requirements.txt\n```\n\n## Installing science-optimization\n\nBuilding science-optimization requires the following software installed:\n\n1. Python 3\n    - Make sure that distutils is installed before continuing. For example in Debian GNU/Linux, disutils is included in the python3-dev package.\n2. PyBind11\n    - Note  that this is PyBind11, not PyBind.\n3. GNU C Compiler version >= 5.0\n\nTo install the package in any environment:\n\n- clone this repo\n- `$ pip install ./science-optimization`\n\n## Conventions\n\n### Development\n\n- In Python programming, it is a common practice to initialize \"private\" methods/attributes with an underscore \n(e.g. _private_method(), _private_attribute). This framework follows this convention\n\n- Attributes sets and gets are implemented using the native \n[`@property`](https://www.programiz.com/python-programming/property) decorator\n\n- An abstract base class inherits from `abc.ABCMeta`\n\n- Google is the default Docstring format\n\n- A package must contain an `__init__.py` file with the package initialization\n\n- PyCharm 2017+ is highly recommended\n\nA detailed explanation of code development can be found [here](https://github.com/LucasSubli/EnacomPythonExample) and \n[here](https://sourcemaking.com/design_patterns).\n\nTutorials on Python programming can be found \n[here](https://www.digitalocean.com/community/tutorial_series/object-oriented-programming-in-python-3).\n\n### Optimization\n\nGiven that `n` is the problem dimension and `m` is the number of points:\n\n- A single point is a `nx1` matrix\n\n- Multiple points are a `nxm` matrix\n\n- Gradient is a `nxm` matrix\n\n- Hessian is a `nxnxm` matrix\n\n## Packages\n\n### Builder\n\nThis package is responsible for building an optimization problem. It was built based on the \n[Builder Design Pattern](https://sourcemaking.com/design_patterns/builder) and it has the following classes.\n\n1. `OptimizationProblem()`: the base class of every optimization problem.\n\n    - Attributes:\n\n        * `objective`: `Objective()` instance\n    \n        * `constraints`: `Contraints()` instance\n    \n        * `variables`: `Variables()` instance\n    \n    - Methods:\n\n        * `_build_problem(builder)`: receives a `BuilderOptimizationProblem()` instance, checks problem\n    consistency and sets attributes\n    \n        * `_check_consistency(variables, objectives, constraints)`: receives attributes and check problem\n    consistency\n    \n        * `info()`: prints to user the assembled problem\n        \n        * `__call__()`: overloaded method that turns an `OptimizationProblem` instance a callable function, that\n        evaluates `f, g, h, df, dg, dh, hf, hg, hh` for a given point `x`\n\n2. `BuilderOptimizationProblem()`: abstract class responsible for defining the builder's methods of the \noptimization problem.\n\n    - Abstract methods:\n    \n        * `build_objectives()`: abstract method responsible for building the problem's objectives\n        \n        * `build_constraints()`: abstract method responsible for building the problem's constraints\n        \n        * `build_variables()`: abstract method responsible for building the problem's variables\n\n3. `Objective()`: container class of objectives functions.\n\n    - Attributes:\n    \n        * `objective_functions`: a list with all functions of the problem. Each function\n        is a `FunctionComposite()` instance.\n        \n    - Methods:\n    \n        * `C()`: return the matrix C of linear objectives coefficients\n        \n        * `d()`: return the vector d of linear objectives constants\n\n4. `Contraints()`: container class of constraints functions.\n\n    - Attributes:\n    \n        * `equality_contraints`: a list with equality constraints functions. Each function\n        is a `FunctionComposite()` instance.\n        \n        * `inequality_contraints`: a list with inequality constraints functions. Each function\n        is a `FunctionComposite()` instance.\n        \n    - Methods:\n    \n        * `equality_contraints_feasibility(x)`: evaluates the feasibility of `x` on these constraints\n        \n        * `inequality_contraints_feasibility(x)`: evaluates the feasibility of `x` on these constraints\n        \n        * `A()`: returns the matrix `A` of linear inequality constraints coefficients\n        \n        * `b()`: returns the vector `b` of linear inequality constraints bounds\n        \n        * `Aeq()`: returns the matrix `Aeq` of linear equality constraints coefficients\n        \n        * `beq()`: returns the vector `beq` of linear equality constraints bounds\n\n5. `Variables()`: container class of the problem variables.\n\n    - Attributes:\n        \n        * `x_min`: variables' lower bounds\n        \n        * `x_max`: variables' upper bounds\n        \n        * `x_type`: list with variables' type ('c': continuous or 'd': discrete)\n        \n\n### Function\n\nThis package has the definitions of a function. Is was base on the \n[Composite](https://sourcemaking.com/design_patterns/composite) design pattern and \ncontains the following classes:\n\n1. `BaseFunction()`: base class of every other class inside this package.\n\n    - Attributes:\n    \n        * `parameters`: abstract attribute for functions parameters (e.g. coefficients)\n        \n        * `eps`: precision for numerical calculations\n        \n    - Methods:\n    \n        * `eval(x)`: abstract method for the evaluation of `x`\n        \n        * `gradient(x)`: numerical calculation of the Gradient of `x`\n        \n        * `hessian(x)`: numerical calculation of the Hessian of `x`\n        \n        * `dimension()`: function dimension `n`\n\n2. `FunctionsComposite()`: container class of `BaseFunction()`'s children.\n\n    - Attributes:\n    \n        * `functions`: a list of functions\n        \n    - Methods:\n    \n        * `eval(x)`: abstract method for the evaluation of `x` in `functions`\n        \n        * `gradient(x)`: numerical calculation of the Gradient of `x` in `functions`\n        \n        * `hessian(x)`: numerical calculation of the Hessian of `x` in `functions`\n        \n        * `add(f)`: adds function `f` to `functions`\n        \n        * `remove(idx)`: removes element `functions[idx]`\n        \n        * `clear()`: removes all functions from list\n        \n         \n3. `LinearFunction()`: implements a function in the form `f(x) = c'x + d`\n\n    - Attributes:\n    \n        * `parameters`: dictionary with `c` and `d` keys\n        \n    - Methods:\n        \n        * `eval(x)`: method for the evaluation of `x`\n        \n        * `gradient(x)`: analytical calculation of the Gradient of `x`\n        \n        * `hessian(x)`: analytical calculation of the Hessian of `x`    \n\n4. `QuadraticFunction()`: implements a function in the form `f(x) = x'Qx + c'x + d`\n\n    - Attributes:\n    \n        * `parameters`: dictionary with `Q`, `c` and `d` keys\n        \n    - Methods:\n        \n        * `eval(x)`: method for the evaluation of `x`\n        \n        * `gradient(x)`: analytical calculation of the Gradient of `x`\n        \n        * `hessian(x)`: analytical calculation of the Hessian of `x`\n\n5. `PolynomialFunction()`: implements a polynomial function\n\n    - Attributes:\n    \n        * `parameters`: dictionary with exponents `e` and `c` coefficients\n        \n    - Methods:\n        \n        * `eval(x)`: method for the evaluation of `x`\n        \n        * `gradient(x)`: analytical calculation of the Gradient of `x`\n        \n        * `hessian(x)`: analytical calculation of the Hessian of `x`\n\n### Problems\n\nThis package is responsible for creating the interface of `BuilderOptimizationProblem()` for each optimization problem\ninstance. The classes must follow the format:\n\n1. `Problem(BuilderOptimizationProblem)`: inherits from BuilderOptimizationProblem\n\n    - Attributes: necessary problem attributes\n    \n    - Methods:\n    \n        * `build_objectives()`: concrete method responsible for building the problem's objectives\n        \n        * `build_constraints()`: concrete method responsible for building the problem's constraints\n        \n        * `build_variables()`: concrete method responsible for building the problem's variables\n\nThe class `Generic(BuilderOptimizationProblem)` builds a generic optimization problem in the canonical\nformat defined at the beginning of this document. However, it also possible to implement customized \noptimization problems inheriting from `BuilderOptimizationProblem` class, such as `Diet` and `KleeMinty`.\n\nFor linear programming, the problem `MIP` is a straightforward abstraction of a problem in the format:\n\n```\n    min  c'  @ x\n    s.t. A   @ x <= b\n         Aeq @ x == beq\n         x_min  <= x <=  x_max\n```\n\n### Algorithms\n\nThis package contains the implementations of the optimization algorithms. It is organized in sub-packages according\nto algorithm's families. Each sub-package contains one abstract implementation of the algorithm's family, it is named\n`BaseAlgorithmFamily()`\n\n1. `BaseAlgorithms()`: base class for every `BaseAlgorithmFamily()`\n\n    - Attributes:\n    \n        * `eps`: algorithms' numerical precision\n        \n    - Methods:\n    \n        * `optimize()`: abstract method for the implementation core\n        \nThis framework currently supports the following optimization algorithms:\n\n* Cutting-plane family:\n    * Ellipsoidal (Multiobjective)\n\n* Decomposition :\n    * Nonlinear dual decomposition\n    \n* Derivative-free :\n    * Nelder-Mead simplex (constrained)\n\n* Lagrange (constrained):\n    * Augmented lagrangian method (using Quasi Newton)\n\n* Linear programming:\n    * Scipy simplex and interior-point\n    * GLOP for LP\n    * CBC for MIP\n\n* Unidimensional search:\n    * Enhanced golden section\n    * Multimodal golden section\n\n* Search direction family (unconstrained):\n    * Gradient method\n    * Modified Newton method\n    * Quasi Newton method\n    \n\n### Solvers\n\nThis package contains the interface to optimization solvers implemented in the framework.\n\n1. `Optimizer()`: optimization for built-in methods, i.e. `algorithms`.\n\n    - Attributes\n    \n        * `optimization_problem`: `OptimizationProblem()` instance\n        \n        * `algorithm`: a concrete algorithm implementation instance (e.g. `GradientAlgorithm()`)\n        \n    - Methods\n    \n        * `solve`: implements `algorithm.optimize()`\n\n2. `OptimizationResults()`: container for optimization results\n\n    - Attributes\n    \n        * `x`: the solution of the optimization\n        \n        * `fx`: function value at solution point\n        \n        * `sucess`: whether or not the solvers exited successfully\n        \n        * `message`: description of the cause of termination\n        \n        * `n_iterations`: number of iterations\n        \n        * `n_function_evaluations`: number of function evaluations\n    \n    - Methods\n    \n        * `info()`: displays optimization results info.\n\n3. `pareto_samplers package`: used to find the pareto border of a multiobjective problem, the implemented\n                              sampling strategies are:\n\n    - Lambda sampler\n    - Epsilon sampler\n    - Nondominated sampler\n    - Mu sampler\n\n### Examples\n\nThis package contains modules implementing examples of building and solving an optimization problem. It can also\nbe used for profiling via `@profiling` decorator.\n\n### Profiling\n\nImplementation of the `@profiling` decorator.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "science-optimization",
    "package_url": "https://pypi.org/project/science-optimization/",
    "platform": null,
    "project_url": "https://pypi.org/project/science-optimization/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/science-optimization/8.0.1/",
    "requires_dist": [
      "cycler (>=0.11,<1.0)",
      "decorator (>=5.1,<6.0)",
      "joblib (>=1.1,<2.0)",
      "kiwisolver (>=1.3,<2.0)",
      "matplotlib (>=3.4,<4.0)",
      "networkx (>=2.6,<3.0)",
      "numpy (>=1.21,<2.0)",
      "ortools (>=9.1,<10.0)",
      "pandas (>=1.3,<2.0)",
      "pillow (>=8.4,<9.0)",
      "protobuf (>=3.19,<4.0)",
      "pyparsing (>=3.0,<4.0)",
      "python-dateutil (>=2.8,<3.0)",
      "pytz (>=2021.3,<2022.0)",
      "pywavelets (>=1.1,<2.0)",
      "scipy (>=1.7,<2.0)",
      "six (>=1.16,<2.0)",
      "xlrd (>=2.0,<3.0)",
      "pybind11 (>=2.10.3,<3.0.0)"
    ],
    "requires_python": ">=3.8,<4",
    "summary": "A framework for optimization.",
    "version": "8.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17433471,
  "releases": {
    "0.7.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef16d74ef4ea5bc1f1da241288513bf06f6a21a4b0494bd99498fd4030303520",
          "md5": "a550e482c1616f9209a90196a60c79d6",
          "sha256": "f6a797f8d3811bc2ea9c2b79213f42960b6d7826e419e1415b540560c1046b99"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.10.tar.gz",
        "has_sig": false,
        "md5_digest": "a550e482c1616f9209a90196a60c79d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 239573,
        "upload_time": "2022-11-08T14:11:12",
        "upload_time_iso_8601": "2022-11-08T14:11:12.201652Z",
        "url": "https://files.pythonhosted.org/packages/ef/16/d74ef4ea5bc1f1da241288513bf06f6a21a4b0494bd99498fd4030303520/science_optimization-0.7.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1becea28966448b1d951c287788bda619f5ab5efd151dfd9b20b64b545ac9a0a",
          "md5": "8cf373f2da90cee7a167bc5520c5d127",
          "sha256": "0fb2a3a88746d75ffdc9855402094d0943c13f96e25e77c1d1ca9b522f9f2b8c"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.11.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf373f2da90cee7a167bc5520c5d127",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 215912,
        "upload_time": "2022-11-08T14:48:26",
        "upload_time_iso_8601": "2022-11-08T14:48:26.492228Z",
        "url": "https://files.pythonhosted.org/packages/1b/ec/ea28966448b1d951c287788bda619f5ab5efd151dfd9b20b64b545ac9a0a/science_optimization-0.7.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10b2ed2166705467d80d74c3bef8dd7cf13c7d49eb1d85578e592d7509c61c99",
          "md5": "d15a0ac526d5d849c7944b69f20d3fd8",
          "sha256": "ba4eceb603dffbae5f4366daad01bebf157d25dc1039a736ce15257865853da0"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d15a0ac526d5d849c7944b69f20d3fd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 65638,
        "upload_time": "2022-12-27T12:49:05",
        "upload_time_iso_8601": "2022-12-27T12:49:05.055497Z",
        "url": "https://files.pythonhosted.org/packages/10/b2/ed2166705467d80d74c3bef8dd7cf13c7d49eb1d85578e592d7509c61c99/science_optimization-0.7.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "511be9f87367e4d8d1964ca199e4894f29a1e068cd569d2ca86bc37ba7a029ea",
          "md5": "709a7042d5621caf0d1df17b94476bfa",
          "sha256": "2ef7f0c3a05edaceaef26b23d8a448c53ae05e846f2cf245244b038f66c86eb5"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.12.tar.gz",
        "has_sig": false,
        "md5_digest": "709a7042d5621caf0d1df17b94476bfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 213240,
        "upload_time": "2022-12-27T12:49:07",
        "upload_time_iso_8601": "2022-12-27T12:49:07.111488Z",
        "url": "https://files.pythonhosted.org/packages/51/1b/e9f87367e4d8d1964ca199e4894f29a1e068cd569d2ca86bc37ba7a029ea/science_optimization-0.7.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8444e8c2c88538aa9610a977252a26c2bae3d2842615b42f7de5895e5f0b7a4",
          "md5": "c32955d07f2fc99dfc455ee5015b5dd2",
          "sha256": "051711dda5acf73e2306f499691d5d672010ab4700ca683e5c9639c08042ec42"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c32955d07f2fc99dfc455ee5015b5dd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 65785,
        "upload_time": "2022-12-29T12:36:32",
        "upload_time_iso_8601": "2022-12-29T12:36:32.486343Z",
        "url": "https://files.pythonhosted.org/packages/d8/44/4e8c2c88538aa9610a977252a26c2bae3d2842615b42f7de5895e5f0b7a4/science_optimization-0.7.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "284513c215afd9ff747895ccfdc1b2893c01ebb32b1ec129f7c274565d317b9e",
          "md5": "e5bf874da6b77a45c6053873cd9d9f91",
          "sha256": "57af390d84162baa57766d09a43c8ce0fa130fe98090458472a19d56db7c4304"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.13.tar.gz",
        "has_sig": false,
        "md5_digest": "e5bf874da6b77a45c6053873cd9d9f91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 213446,
        "upload_time": "2022-12-29T12:36:34",
        "upload_time_iso_8601": "2022-12-29T12:36:34.756914Z",
        "url": "https://files.pythonhosted.org/packages/28/45/13c215afd9ff747895ccfdc1b2893c01ebb32b1ec129f7c274565d317b9e/science_optimization-0.7.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee7d1751bb43b8c8fc734a677b1e7bd11b510229812c83d8249cbd77853b346a",
          "md5": "1fff8b7528a11879b3807f5c4f884ac7",
          "sha256": "0fe63e7e9aeddbfbfacb2e6b4d2860b17d9ce384f71bbc93de654a53db455124"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1fff8b7528a11879b3807f5c4f884ac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82562,
        "upload_time": "2022-01-04T12:46:05",
        "upload_time_iso_8601": "2022-01-04T12:46:05.456615Z",
        "url": "https://files.pythonhosted.org/packages/ee/7d/1751bb43b8c8fc734a677b1e7bd11b510229812c83d8249cbd77853b346a/science_optimization-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "574aab02a2c3217314926c9e5ffc37b7326e5ca66b17a61b0e397c2c10de6373",
          "md5": "d4fce6535691f3061c06d6170765d238",
          "sha256": "09913bb1824b06c261684537dbadc777cf3d3991957c2aac438541c683587575"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d4fce6535691f3061c06d6170765d238",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74575,
        "upload_time": "2022-01-04T12:52:50",
        "upload_time_iso_8601": "2022-01-04T12:52:50.654308Z",
        "url": "https://files.pythonhosted.org/packages/57/4a/ab02a2c3217314926c9e5ffc37b7326e5ca66b17a61b0e397c2c10de6373/science_optimization-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2a821fe2f7434597ac6c881e023d09d56b5ce050ed1a261a1ba9daa5bcd458",
          "md5": "52738d27c69e03927b0affcaa6673ff7",
          "sha256": "7facc674d064a3afae55474d4fbd4149f7809f6ff715f3fd7a82b39adacf3a21"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "52738d27c69e03927b0affcaa6673ff7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74554,
        "upload_time": "2022-01-04T13:28:03",
        "upload_time_iso_8601": "2022-01-04T13:28:03.143573Z",
        "url": "https://files.pythonhosted.org/packages/ff/2a/821fe2f7434597ac6c881e023d09d56b5ce050ed1a261a1ba9daa5bcd458/science_optimization-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f8c6ed9305c59b7087ff33fb65d986a0208f2efb50424483f0004977ca56572",
          "md5": "1d73d45dbf7c0af0c5e28ca7719c87c0",
          "sha256": "3135013aa08dd87b06957a982a6e1b89aab46fd602201cd9a38ea8094d32ad27"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1d73d45dbf7c0af0c5e28ca7719c87c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74572,
        "upload_time": "2022-01-04T13:43:57",
        "upload_time_iso_8601": "2022-01-04T13:43:57.407324Z",
        "url": "https://files.pythonhosted.org/packages/9f/8c/6ed9305c59b7087ff33fb65d986a0208f2efb50424483f0004977ca56572/science_optimization-0.7.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7abc7cb989d85fd0ee5a7eff61bfcebeb5de3be2b453d78c1fd741d950fbfbf9",
          "md5": "3ed46de1d708c5c904e21779c3d6fe7b",
          "sha256": "b77eb4a842bf94e5cb86cd3f1646befad4ca98e42001799039cf98fcd7a3a473"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3ed46de1d708c5c904e21779c3d6fe7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 74558,
        "upload_time": "2022-01-04T13:48:26",
        "upload_time_iso_8601": "2022-01-04T13:48:26.726303Z",
        "url": "https://files.pythonhosted.org/packages/7a/bc/7cb989d85fd0ee5a7eff61bfcebeb5de3be2b453d78c1fd741d950fbfbf9/science_optimization-0.7.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b86f0422fc6c00df9c7c6cb3117c33b9f3e32c4a8478af27fa0f295bd00bdbd",
          "md5": "4486c44f3c2189906a8f02c986e04fc5",
          "sha256": "947e44f0f30dba02b9b7ca8f289593e8031dfff0268b6210bb4630a39241ef58"
        },
        "downloads": -1,
        "filename": "science_optimization-0.7.9.tar.gz",
        "has_sig": false,
        "md5_digest": "4486c44f3c2189906a8f02c986e04fc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 239434,
        "upload_time": "2022-01-04T13:51:34",
        "upload_time_iso_8601": "2022-01-04T13:51:34.372490Z",
        "url": "https://files.pythonhosted.org/packages/9b/86/f0422fc6c00df9c7c6cb3117c33b9f3e32c4a8478af27fa0f295bd00bdbd/science_optimization-0.7.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f671e07154b2ac7d075ea93088f239f00e8411334c9e7a7156f37211f248a9c",
          "md5": "2982265494a1954bb1bde64f064b23cd",
          "sha256": "ec722828f19222016eef664186337863dca7d4dba66a32a30e10078da487c111"
        },
        "downloads": -1,
        "filename": "science_optimization-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2982265494a1954bb1bde64f064b23cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 239652,
        "upload_time": "2022-05-25T13:41:13",
        "upload_time_iso_8601": "2022-05-25T13:41:13.382865Z",
        "url": "https://files.pythonhosted.org/packages/4f/67/1e07154b2ac7d075ea93088f239f00e8411334c9e7a7156f37211f248a9c/science_optimization-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "8.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78054848168918824dd130da130e3f1394e56c063da937812f992db5ff83ac2b",
          "md5": "fa575857f3836c2319b08dc3857ee4ea",
          "sha256": "b1a5cc34fb59abc7bc72499ba85ae6468a579bc67ff84182774b7d3d10f09172"
        },
        "downloads": -1,
        "filename": "science_optimization-8.0.1-cp38-cp38-manylinux_2_31_x86_64.whl",
        "has_sig": false,
        "md5_digest": "fa575857f3836c2319b08dc3857ee4ea",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8,<4",
        "size": 1583510,
        "upload_time": "2023-03-24T16:26:03",
        "upload_time_iso_8601": "2023-03-24T16:26:03.480290Z",
        "url": "https://files.pythonhosted.org/packages/78/05/4848168918824dd130da130e3f1394e56c063da937812f992db5ff83ac2b/science_optimization-8.0.1-cp38-cp38-manylinux_2_31_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7ed7908601cfa0cd9885ce9f716dd99a2491d74646f1bf53baaced712aa8186",
          "md5": "81ebd76e2ad866620009f85814a9e140",
          "sha256": "499069e600fc282901cb00ff6e15b485045069def59e6ac4a47f7d3f534b30e0"
        },
        "downloads": -1,
        "filename": "science_optimization-8.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "81ebd76e2ad866620009f85814a9e140",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4",
        "size": 256117,
        "upload_time": "2023-03-24T16:26:06",
        "upload_time_iso_8601": "2023-03-24T16:26:06.220367Z",
        "url": "https://files.pythonhosted.org/packages/f7/ed/7908601cfa0cd9885ce9f716dd99a2491d74646f1bf53baaced712aa8186/science_optimization-8.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78054848168918824dd130da130e3f1394e56c063da937812f992db5ff83ac2b",
        "md5": "fa575857f3836c2319b08dc3857ee4ea",
        "sha256": "b1a5cc34fb59abc7bc72499ba85ae6468a579bc67ff84182774b7d3d10f09172"
      },
      "downloads": -1,
      "filename": "science_optimization-8.0.1-cp38-cp38-manylinux_2_31_x86_64.whl",
      "has_sig": false,
      "md5_digest": "fa575857f3836c2319b08dc3857ee4ea",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.8,<4",
      "size": 1583510,
      "upload_time": "2023-03-24T16:26:03",
      "upload_time_iso_8601": "2023-03-24T16:26:03.480290Z",
      "url": "https://files.pythonhosted.org/packages/78/05/4848168918824dd130da130e3f1394e56c063da937812f992db5ff83ac2b/science_optimization-8.0.1-cp38-cp38-manylinux_2_31_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7ed7908601cfa0cd9885ce9f716dd99a2491d74646f1bf53baaced712aa8186",
        "md5": "81ebd76e2ad866620009f85814a9e140",
        "sha256": "499069e600fc282901cb00ff6e15b485045069def59e6ac4a47f7d3f534b30e0"
      },
      "downloads": -1,
      "filename": "science_optimization-8.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "81ebd76e2ad866620009f85814a9e140",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4",
      "size": 256117,
      "upload_time": "2023-03-24T16:26:06",
      "upload_time_iso_8601": "2023-03-24T16:26:06.220367Z",
      "url": "https://files.pythonhosted.org/packages/f7/ed/7908601cfa0cd9885ce9f716dd99a2491d74646f1bf53baaced712aa8186/science_optimization-8.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}