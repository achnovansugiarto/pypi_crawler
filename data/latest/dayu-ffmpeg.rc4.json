{
  "info": {
    "author": "andyguo",
    "author_email": "andyguo@phenom-films.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation"
    ],
    "description": "dayu_ffmpeg\n===========\n\n|pypi| |python| |build status| |github license|\n\ndayu_ffmpeg 是针对ffmpeg 命令行的python 封装。 ffmpeg\n的功能相当强大，但是复杂的终端指令往往让人无法使用。dayu_ffmpeg\n正好解决了这个问题。 用户可以使用简单的 “流”\n的概念搭建自己的处理方式，同时具有下面的特点：\n\n-  通过 >> 运算符，表示stream 的操作\n-  拥有ad-hoc 和network 两种操作模式\n-  支持ffmpeg complex filter\n-  如果用户需要使用的filter 不在默认的filter class 中，可以自行扩展\n-  可以将Root Node 保存为ffscipt 的json\n   格式，方便保存硬盘文件或者是网络通信\n\nad-hoc 模式\n===========\n\n在ad-hoc 模式下，用户可以直接使用节点进行串行操作。\n例如，用户希望对一个mov 素材进行下面的操作：\n\n-  绘制2.39 的遮幅\n-  缩放到1920x1080 的尺寸\n-  写入内嵌reel\n-  写入内嵌timecode\n-  渲染输出到prores 422 的mov\n\n如果直接使用ffmpeg，那么终端指令会是：\n\n.. code:: shell\n\n   \"ffmpeg\" -y -i \"/some/input/file.mov\" -filter_complex \"[0]drawbox=x=-t:y=0:w=iw+t*2:h=ih:c=black:t=(ih-(iw/2.39))/2[v0],[v0]scale=w=1920:h=1080[v1]\" -map [v1] -metadata:s:v:0 reel_name=reelname -timecode 11:22:11:22 -codec:v prores_ks \"/some/output/file.mov\"\n\n如果使用了dayu_ffmpeg，就会非常的直观。用户将自己的需要的操作一一写入皆可：\n\n.. code:: python\n\n   from dayu_ffmpeg input *\n\n   result = Input('/some/input/file.mov') >> \\\n            Drawmask(2.39) >> \\\n            Scale(1920, 1080) >> \\\n            Writereel('reelname') >> \\\n            Writetimecode('11:22:11:22') >> \\\n            Codec(video='prores_ks') >> \\\n            Output('/some/output/file.mov')\n\n需要注意的是，在ad-hoc 模式下，只能够支持串行的操作。\n也就是说所有的节点都只能拥有一个输入和一个输出。\n如果想要使用更加复杂的转码，请使用network 模式\n\nnetwork 模式\n============\n\nnetowrk 模式会比ad-hoc\n复杂一点，但是可以实现更加复杂的转码结构。并且一旦TD 写好了一个network，\n那么后续的用户在使用上就非常的简单，相当于提供了一个 “转码模板”。\n\n.. code:: python\n\n   from dayu_ffmpeg import *\n\n   class TranscodeTemplate(RootNode):\n       def prepare(self):\n           # 用户只需要重载prepare() 函数，在这里组织好网络结构\n           # 留好InputHolder 或者OutputHolder 作为 \"接口\"\n           ih1 = self.create_node(InputHolder)\n           i2 = self.create_node(Input('some_logo.png'))\n\n           cf = self.create_node(ComplexFilterGroup)\n           ih2 = cf.create_node(InputHolder)\n           ih3 = cf.create_node(InputHolder)\n           cf.set_input(ih1, 0)\n           cf.set_input(i2, 1)\n           over = cf.create_node(Overlay)\n           over.set_input(ih2, 0)\n           over.set_input(ih3, 1)\n           fit = cf.create_node(Fit())\n           fit.set_input(over)\n           oh1 = cf.create_node(OutputHolder)\n           oh1.set_input(fit)\n\n           oh2 = self.create_node(OutputHolder)\n           oh2.set_input(cf)\n\n\n   if __name__ == '__main__':\n       # 实例化转码的网络\n       template_root = TranscodeTemplate(name='overlay logo, then fit in HD, finally export to mov')\n\n       # 创建输入、输出\n       input1 = Input('some_input_file.mov')\n       output1 = Output('some_output_file.mov')\n\n       # 用户直接调用，就完成了整个转码，相当于调用\"模板\"\n       network_mode_cmd = template_root(input_list=[input1], output_list=[output1])\n       print network_mode_cmd.cmd()\n\n使用自定义filter\n================\n\n如果默认的filter\n中不存在需要使用的filter。用户可以有下面的几种方法自行扩展:\n\n-  调用GeneralUnaryFilter\n-  继承BaseFilterNode class，自行实现\n-  继承BasePackedFilterNode, 将多种filter 进行打包，形成新的一个filter\n\n调用GeneralUnaryFilter：\n\n.. code:: python\n\n   command = Input('/some/input/file.mov') >> \\\n             GeneralUnaryFilter('drawgrid', x=0, y=0, w=100, h=50) >> \\\n             Output('/custom/filter/output.mov')\n\n继承BaseFilterNode class，自行实现：\n\n.. code:: python\n\n   class Null(BaseFilterNode):\n       # 设置特定的type，要保证唯一性\n       type = 'some_ffmpeg_filter_name'\n\n       # 重载init，实现自己的参数\n       def __init__(self, **kwargs):\n           super(Null, self).__init__(**kwargs)\n\n       # 重载 simple_cmd_string，返回对应的ffmpeg 指令string\n       def simple_cmd_string(self):\n           self._cmd = u'null'\n           return self._cmd\n\n继承BasePackedFilterNode, 将多种filter 进行打包，形成新的一个filter。\n可以参看 Fit 这个class 的实现方式。\n\n查看shell 指令 以及运行\n=======================\n\n用户可以查看生成的shell 指令，或者直接运行：\n\n.. code:: python\n\n   # 查看将要运行的终端指令\n   print command.cmd()\n\n   # 组装filter 之后，即可运行命令\n   for progress in command.run():\n       try:\n           print progress      # 通过yield 返回渲染进度的dict，用户可以自行实现非阻塞进度条\n       except Exception as e:\n           raise               # 如果指令错误，会抛出异常\n\nffscript 的保存和读取\n=====================\n\nffscript 是dayu_ffmpeg 对于network 结构的一种json\n表现形式，可以认为是“工程文件”。 如果想要把组成的network\n保存到硬盘上，或是通过网络通信进行传递，就会使用到。\n\n保存ffscript：\n\n.. code:: python\n\n   from dayu_ffmpeg.ffscript import save_script, open_script\n\n   # 保存\n   save_script(netowrk_node_instance, '/some/script/path.json')\n\n   # 读取\n   transcode_template = open_script('/some/script/path.json')\n\n.. |pypi| image:: https://img.shields.io/badge/pypi-0.5-blue.svg\n   :target: https://pypi.org/project/dayu-ffmpeg/\n.. |python| image:: https://img.shields.io/badge/python-2.7-blue.svg\n   :target: \n.. |build status| image:: https://travis-ci.org/phenom-films/dayu_ffmpeg.svg?branch=master\n   :target: https://travis-ci.org/phenom-films/dayu_ffmpeg\n.. |github license| image:: https://img.shields.io/github/license/mashape/apistatus.svg\n   :target: https://github.com/phenom-films/dayu_ffmpeg/blob/master/license",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phenom-films/dayu_ffmpeg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dayu-ffmpeg",
    "package_url": "https://pypi.org/project/dayu-ffmpeg/",
    "platform": "",
    "project_url": "https://pypi.org/project/dayu-ffmpeg/",
    "project_urls": {
      "Homepage": "https://github.com/phenom-films/dayu_ffmpeg"
    },
    "release_url": "https://pypi.org/project/dayu-ffmpeg/0.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "FFmpeg python wrapper for human, with common filters built in.",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4980754,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "597fa732c8d656126ea2f0cc8defd8a05d85f9565d10a6e119d5c893bd8c404a",
          "md5": "73b74182ac2332e7935ab4f826d71efe",
          "sha256": "7c2c9f2a8dbf9ab56a131e3e40049a9d9c672677a51c517d1f71ee9b3126f51f"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73b74182ac2332e7935ab4f826d71efe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12418,
        "upload_time": "2018-09-24T12:00:04",
        "upload_time_iso_8601": "2018-09-24T12:00:04.839695Z",
        "url": "https://files.pythonhosted.org/packages/59/7f/a732c8d656126ea2f0cc8defd8a05d85f9565d10a6e119d5c893bd8c404a/dayu_ffmpeg-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8bb3f5240ef7962329a33f7d32f23588923929828736c541c5f3d575cf3200c",
          "md5": "53dc95750e732f0471c15740ac97a0e0",
          "sha256": "f61b160fe1c3dfcdce4e9bc4044487cdc57c007aa128abd08f155ba6d28e176b"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "53dc95750e732f0471c15740ac97a0e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12894,
        "upload_time": "2018-09-24T12:00:06",
        "upload_time_iso_8601": "2018-09-24T12:00:06.584222Z",
        "url": "https://files.pythonhosted.org/packages/d8/bb/3f5240ef7962329a33f7d32f23588923929828736c541c5f3d575cf3200c/dayu_ffmpeg-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e398ede6ad35136e819bd098d7a3f6deb53bb66f9c652436d248fb36a5afe14",
          "md5": "e3edee9d34308c507118fc75fd026109",
          "sha256": "c8a691d102c24eae9f26c97a4bc8727afa49c448385b1786161d00117994ee4b"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3edee9d34308c507118fc75fd026109",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13252,
        "upload_time": "2018-09-25T03:43:17",
        "upload_time_iso_8601": "2018-09-25T03:43:17.783384Z",
        "url": "https://files.pythonhosted.org/packages/6e/39/8ede6ad35136e819bd098d7a3f6deb53bb66f9c652436d248fb36a5afe14/dayu_ffmpeg-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ad4ae2c04b3ce4150d19c1ece78fe665db5c2b1e9da5d15523a1c9dc94b322",
          "md5": "99e4fef999201b735fb74528bbe68a61",
          "sha256": "e55387bdbb01424804e70d1216eb325e06b52dfb28cd5ee6ba00bc43107fafc9"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "99e4fef999201b735fb74528bbe68a61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13512,
        "upload_time": "2018-09-25T03:43:19",
        "upload_time_iso_8601": "2018-09-25T03:43:19.177874Z",
        "url": "https://files.pythonhosted.org/packages/69/ad/4ae2c04b3ce4150d19c1ece78fe665db5c2b1e9da5d15523a1c9dc94b322/dayu_ffmpeg-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ca2fb354f8a24e97d6dace4d124417c61f04b16e1e34c8a05f908c2b2b27f57",
          "md5": "e4a83887a34ed774d1e4663eb77730ed",
          "sha256": "8de6d1420453071c9c5e42b69814f2d4c69cb69a3a4573734975d37e7d0c860f"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4a83887a34ed774d1e4663eb77730ed",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15492,
        "upload_time": "2019-01-08T04:51:38",
        "upload_time_iso_8601": "2019-01-08T04:51:38.105051Z",
        "url": "https://files.pythonhosted.org/packages/6c/a2/fb354f8a24e97d6dace4d124417c61f04b16e1e34c8a05f908c2b2b27f57/dayu_ffmpeg-0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77d90b840fcbd7aaf78eb7175646efa74758adfeee0e48f3e1e26460e12806f3",
          "md5": "e1541a0753aa7d0aa0a987b1faca7265",
          "sha256": "4643891375f24bac1e222183d79a492a74cab522e66eb677b2289eefe7d7979b"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e1541a0753aa7d0aa0a987b1faca7265",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16246,
        "upload_time": "2019-01-08T04:51:40",
        "upload_time_iso_8601": "2019-01-08T04:51:40.750776Z",
        "url": "https://files.pythonhosted.org/packages/77/d9/0b840fcbd7aaf78eb7175646efa74758adfeee0e48f3e1e26460e12806f3/dayu_ffmpeg-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d1abef6867bd29a9c542381b65234a9955bb68fc5c0135d5cbc84146f43319e",
          "md5": "c1011cfa2c0cf92c5858ed755bdea18c",
          "sha256": "46cbf299e851f869349290febcd06091210ad5dc368010274d1f080f9d5f92c7"
        },
        "downloads": -1,
        "filename": "dayu_ffmpeg-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1011cfa2c0cf92c5858ed755bdea18c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60794715,
        "upload_time": "2019-03-25T04:08:33",
        "upload_time_iso_8601": "2019-03-25T04:08:33.436712Z",
        "url": "https://files.pythonhosted.org/packages/2d/1a/bef6867bd29a9c542381b65234a9955bb68fc5c0135d5cbc84146f43319e/dayu_ffmpeg-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d1abef6867bd29a9c542381b65234a9955bb68fc5c0135d5cbc84146f43319e",
        "md5": "c1011cfa2c0cf92c5858ed755bdea18c",
        "sha256": "46cbf299e851f869349290febcd06091210ad5dc368010274d1f080f9d5f92c7"
      },
      "downloads": -1,
      "filename": "dayu_ffmpeg-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c1011cfa2c0cf92c5858ed755bdea18c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60794715,
      "upload_time": "2019-03-25T04:08:33",
      "upload_time_iso_8601": "2019-03-25T04:08:33.436712Z",
      "url": "https://files.pythonhosted.org/packages/2d/1a/bef6867bd29a9c542381b65234a9955bb68fc5c0135d5cbc84146f43319e/dayu_ffmpeg-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}