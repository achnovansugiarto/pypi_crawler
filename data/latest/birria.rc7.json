{
  "info": {
    "author": "1Karus",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Birria: simple cli argument parsing\n\nDeclare your \"Recipe\" with type annotations like `dataclass`, then \"serve\"\nthe arguments. For more information about type annotations:\n\n- [PEP484](https://www.python.org/dev/peps/pep-0484/)\n- [PEP544](https://www.python.org/dev/peps/pep-0544/)\n\n## Quickstart\n\nInstall using pip:\n```bash\npip install birria\n```\n\nIn your source code.\n\n```python\nfrom birria import cook, serve\n\n@cook\nclass Recipe:\n    first: int\n    second: float\n    third: str\n    fourth: str = None\n    fifth: List[int] = None\n    sixth: bool\n\ndish = serve(Recipe)\n\nprint(f\"First: {dish.first}\")\nprint(f\"Second: {dish.second}\")\nprint(f\"Third: {dish.third}\")\nprint(f\"Fourth: {dish.fourth}\")\nprint(f\"Fifth: {dish.fifth}\")\nprint(f\"Sixth: {dish.sixth})\n```\n\nThen, from the shell:\n\n```bash\n> python myprog.py 1 2.0 three -fourth four -fifth 1 2 3 4 5 -sixth\n> First: 1\n> Second: 2.0\n> Third: three\n> Fourth: four\n> Fifth: [1, 2, 3, 4, 5]\n> Sixth: True\n```\n\n## Why?\n\nBecause i was making some birria simultaneously, and I'm a hunger-driven creature. \n\n## Why for real?\nTake the example from quickstart, to do that with `argparse`,\n```python\nimport argparse\n\nparser = ArgumentParser()\nparser.add_argument(\"first\", type=int)\nparser.add_argument(\"second\", type=float)\nparser.add_argument(\"third\", type=str)\nparser.add_argument(\"-fourth\", type=str, default=None)\nparser.add_argument(\"-fifth\", type=int, nargs=\"*\", default=None)\nparser.add_argument(\"-sixth\", action=\"store_true\")\n\nargs = parser.parse_args()\n\n# print out the parsed values\n...\n```\nWhy is this worse? Well it's not really worse, but it's  more verbose,\nand one of the main motivations for `birria` was to simplify things. Admittedly,\nthat means less power and complicated features than those supported by `argparse`,\n(all those fancy actions like \"store_true\", \"append_const\", etc.), but IMO, most\nof the time, those things are overkill, and simplicity is generally better.\n\nIn addition, another example: say you want to reuse a group of arguments across multiple\nprograms, with `argparse`, this is what you generally do:\n\n```python\nparent_parser = argparse.ArgumentParser(add_help=False)\n# add your common arguments down here\nparent_parser.add_argument(\"-base\", action=\"store_true\")\n\n...\n\napp_parser = argparse.ArgumentParser(parents=[parent_parser])\n# again, add your arguments\n...\n\nanother_parser = argparse.ArgumentParser(parents=[parent_parser])\n# again, add your arguments\n...\n```\n\n\nWith `birria`, you can just write a base recipe and extend it\n\n```python\n@cook\nclass BaseRecipe:\n    # common arguments here\n    base: bool\n    ...\n\n@cook\nclass FancyRecipe(BaseRecipe):\n    # specific arguments here\n    # you can also override\n    # the arguments in the base\n    # class\n\n    # this overrides the default\n    # value of base (False)\n    # base: bool = True\n    extra: List[int]\n```\n\n\n## More use cases\n\nHere are some more common use cases (more will probably will be added).\n\n### Declare required and optional arguments in arbitrary order\n\n```python\n@cook\nclass Recipe:\n    first_opt: int = 0\n    first_req: str\n    second_req: float\n    second_opt: str = \"some lame string\"\n    third_opt: List[float] = None\n    fourth_opt: bool\n```\nNote that a bool field/ingredient is always optional (like a flag).\n\n\n### Reverse bool flag\n```python\n@cook\nclass Recipe:\n    b1: bool\n    b2: bool = True\n\n# print out parsed arguments\n```\n```bash\n> python myprog.py -b1 -b2 \n> b1: True, b2: False\n```\n\nThis is useful to mimic the \"store_true\" and \"store_false\" behaviours from `argparse`. The\nparser essentially reverses the default boolean value of the field it finds a corresponding\nflag. If the default value is anything else than a boolean,\nwhen the corresponding flag is found, the parsed value is `True`.\n\n### Lists\n```python\nfrom birria import cook, ingredient, serve\n\n@cook\nclass Recipe:\n    l1: List[float] = None\n    l2: List[int] = ingredient(default_factory: lambda: [1, 2, 3])\n\n# print out parsed arguments\n```\n```bash\n> python myprog.py -l1 0.5 0.121 3.142 -l2 4 5 6\n> l1: [0.5, 0.121, 3.142]\n> l2: [1, 2, 3, 4, 5, 6]\n```\nNote that you have to call `ingredient()` with the `default_factory` parameter to specify\na list as the default value. This is because Python stores default member attributes\nas class attributes, so multiple instances of the same class will share the same variable,\nlike in this example:\n\n```python\nclass A:\n    def_list = []\n    def append(self, elem):\n        self.def_list.append(elem)\n\na1 = A()\na2 = A()\na2.append(1)\na2.append(2)\n\nassert a1.def_list == [1, 2]        # true\nassert a2.def_list == [1, 2]        # also true\nassert a1.def_list is a2.def_list   # big true true\n```\n\nThis is not desirable for our use case as we want each instances to have its own list\nattributes. Using a factory to initialize a default list solves this problem. This is\nbasically what `dataclass` does.\n\nAnother thing to note is this appending behaviour is only applied if the field/ingredient\nis annotated as a list type (see limitations for more details), AND the default\nvalue is a list. If the default value is not a list, the resulting value will be a\nnew list containing the parsed corrsponding items.\n\nYou can have as many list type ingredients as you want if you declare them as optional.\nIf a non-optional ingredient is annotated as a list, then only one non optional ingredient\nis allowed, and the ordering of the arguments on the cli becomes \"strict\": items for the\nnon-optional ingredient must come first, then followed by any optional items. Otherwise,\nthe parser can't tell which item belongs to which ingredient.\n\n```python\n@cook\nclass Recipe:\n    req_list: List[int]\n    flag: bool\n    opt_list: List[str]\n```\n```bash\n> python myprog.py 1 2 3 -flag -opt-list some more strings         # good\n> python myprog.py -flag -opt-list some more strings 1 2 3         # bad\n```\n\n### Long names\nFor longer ingredient names, snake-casing is recommended, as the parser accepts\nboth the snake-cased names and dash-separated names\n\n```bash\npython myprog.py -some-very-long-name-for-a-flag    # good\npython myprog.py -some_very_long_name_for_a_flag    # also good  \n```\n\n## Limitations\nHere are current limitations of `birria`. Some of them are by design and therefore\nwill likely never be \"fixed\".\n\n### Optional and non-optional argument mixing\nBy design, `birria` doesn't allow mixed ordering of optional and non-optional\narguments on the cli. However, ordering of the optional argument can be arbitrary.\n\n\n```bash\n> python myprog.py 1 2 3 -p 1 -b -c some lame string    # good\n> python -b -p 1 -c some lame string 1 2 3              # good\n> python myprog.py -b 1 2 3 -p 1 -c some lame string    # bad\n```\n\n### Supported types\n`birria` currently only supports these types:\n\n`int, float, str, bool, list, List, List[str], List[int], List[float]`\n\nNote that `list` and `List` will be treated as `List[str]`.\n\n### Prefixes\n\nBy default, `birria` only accepts `-` as the prefix for option strings, other supported\ncharacters are: `['+', '/']` . More will likely be added in the future.\n\nYou can specify what option string to accept through the parameters `prefixes` and `extra_prefixes`\nof `serve`\n\n```python\ndish = serve(Recipe, prefixes=['+'], extra_prefixes=['/'])\n```\n\nThe resulting prefix list will be all the characters in `prefixes` and `extra_prefixes`.\n\n## Details\n\n### cook decorator\n\nThe `cook` decorator is heavily inspired by `dataclass` (I basically stole the code), but it\nis a very simplified and limited version of a dataclass, and not meant to be used in the same way.\nIt's also written to be easy way to declare required and optional arguments in arbitrary\norder, even with inheritence, so its behaviour in that aspect is not at all like a dataclass.\nConsider this example.\n\n```python\n@cook\nclass BaseRecipe:\n    req_int: int\n    opt_int: int = None\n\n\n@cook\nclass FancyRecipe:\n    req_float: float\n    opt_list: list = None\n\n    # this is the generated __init__\n    def __init__(self, req_int: int, req_float: float, opt_int: int = None, opt_list: list = None):\n        ...\n\n    # __repr__ and __eq__ are also generated for\n    # easy printing and debugging\n\n# FancyRecipe will have\n# req_int:      int =>      no default value\n# req_float:    float =>    no default value\n# opt_int:      int =>      defaults to None\n# opt_list:     list =>     defaults to None \n```\n\nUsing `dataclass`, this would fail, for very good reasons that I won't get into here. However,\nbecause `cook` is only meant to turn a class into a list of declarations, and the resulting\nclass instances are only meant to be used as dumb containers, this behaviour is fine. Behind\nthe scenes, just like `dataclass`, `cook` looks through all the class's base classes in\nreverse MRO, and remembers the fields of those decorated by `cook`. Finally, it looks\nthrough the fields of the current class, and sorts all the fields into \"optional\" and\n\"required\" buckets. Then `__init__` is generated with \"correct\" argument ordering. In\naddition, fields with the same names from the base classes will still be overridden by\nthe derived class.\n\n### Parser behaviour\n\nThe parser is basically just the function `serve`. The first step is to validate the \"recipe\".\n\n```python\n@cook\nclass GoodRecipe1:\n    a: int\n    b: float\n    c: str\n    d: List[int] = None\n\n@cook\nclass BadRecipe1:\n    a: int\n    b: SomeUnsupportType    # will raise TypeError\n\n\n# if a required ingredient is a list,\n# only one required ingredient is allowed\n# so this is bad\n@cook\nclass BadRecipe2:\n    a: List[int]\n    b: str                  \n\n# but this is good\n@cook\nclass GoodRecipe2:\n    a: List[int]\n    b: List[int] = None\n    c: str = None\n```\n\nThe next phase is the actual parsing. Values from the cli is passed to the parser through\n`sys.argv` as a list. Regardless of whether there are optional ingredients in the recipe,\nthe parser parses the required items first. Because intermixing of optional and required\nitems are not allowed, in all cases except when the required ingredient is a list, the\nparser can always figure out where the required values are. The \"algorithm\" for parsing is:\n\n1. If the recipe doesn't define any optional ingredient, parse the whole argument list for\nrequired items.\n    - Likewise, if there are no required ingredient, parse the whole list for optional items.\n2. If there are optional ingredients, build regex to scan where option strings are in the list.\n    - If the first option string is the first item, required items are at the end of the list.\n    - Otherwise, the required items start at the beginning of the list.\n    - If no option string is found in the list, just parse the whole list for required items.\n3. Parse the required items.\n4. Parse the remaining list for optional items.\n\n\n```bash\n# from GoodRecipe1\n# 3 required scalar items\n# 1 optional list items\n\n# no option string found, parse whole list for required items\n> python myprog.py 1 2.0 three\n\n# option string first item, parse the last 3 items of the list\n# for required items, then the remaning list\n> python myprog.py -d 0 1 2 3 4 5 1 2.0 three\n\n# option string not first item, parse the first 3 items of the list\n# for required items, then the remaining list \n> python myprog.py 1 2.0 three -d 0 1 2 3 4 5\n\n# d = [0, 1, 2, 3, 4, 5]\n# a = 1\n# b = 2.0\n# c = \"three\"\n\n# from GoodRecipe2\n# arbitrary order of optional values\n> python 1 2 3 -c hello -b 0 -1 -2\n# or\n> python 1 2 3 -b 0 -1 -2 -c hello\n```\n\nIn the case where there's a required ingredient that's a list, the parser assumes that\nthe first items are items belonging to that required ingredient. Items will be gathered\ninto that list until an option string is matched. So if you're using a list as a required\ningredient, make sure that values for it come before all the optional items.\n\n```python\n@cook\nclass Recipe:\n    a: List[str]\n    b: bool\n    c: List[int] = None\n```\n\n```bash\n\n# gather items into list for a until \"-b\" or \"-c\",\n# whichever comes first\n> python myprog.py some lame string -b -c 1 2 3\n# a = [\"some\", \"lame\", \"string]\n# b = True\n# c = [1, 2, 3]\n\n# sees -b and stops immediately,\n# so empty list for a, but a is required\n# so prints out error and exits\n> python myprog.py -b -c 1 2 3 some lame string\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ntn9995/birria",
    "keywords": "cli,library",
    "license": "MIT",
    "maintainer": "1Karus",
    "maintainer_email": "",
    "name": "birria",
    "package_url": "https://pypi.org/project/birria/",
    "platform": "",
    "project_url": "https://pypi.org/project/birria/",
    "project_urls": {
      "Homepage": "https://github.com/ntn9995/birria"
    },
    "release_url": "https://pypi.org/project/birria/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple declarative cli argument parsing",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10808282,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4292ff6404cee12c4cd1228f26de9c9de2ad0aeadd4a70d6a92936c84b0feeee",
          "md5": "70b46a44cc193950be03dedc0fc7441b",
          "sha256": "21a71b59b432deca11afb6e4d63563b18df1b740b3478376c7c1d01d5eed7570"
        },
        "downloads": -1,
        "filename": "birria-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70b46a44cc193950be03dedc0fc7441b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10546,
        "upload_time": "2021-06-21T02:34:25",
        "upload_time_iso_8601": "2021-06-21T02:34:25.485377Z",
        "url": "https://files.pythonhosted.org/packages/42/92/ff6404cee12c4cd1228f26de9c9de2ad0aeadd4a70d6a92936c84b0feeee/birria-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cdd5d9634e8dbad0d7e74c4b7e0b99cac0e782a3c188efd60208b2fa57708e",
          "md5": "8b34bba790701c925c93567781fa42b8",
          "sha256": "bb0e14f5a5f5c812e54c6759c71be8ad35a491c6fb302efaf7a12d30b1d2eeea"
        },
        "downloads": -1,
        "filename": "birria-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b34bba790701c925c93567781fa42b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21205,
        "upload_time": "2021-06-21T02:34:26",
        "upload_time_iso_8601": "2021-06-21T02:34:26.902789Z",
        "url": "https://files.pythonhosted.org/packages/d5/cd/d5d9634e8dbad0d7e74c4b7e0b99cac0e782a3c188efd60208b2fa57708e/birria-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c97b66e5393aa91ce0bbe80dc43817187e7a536fc815f4ab6c8511a43f5175f",
          "md5": "f85789388f5b88572e44529d76524cdf",
          "sha256": "c54c675bffd8ce2ae5c923f927adb25c10c7677dba51b5c2063eb9d15f583364"
        },
        "downloads": -1,
        "filename": "birria-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f85789388f5b88572e44529d76524cdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15563,
        "upload_time": "2021-07-01T01:58:57",
        "upload_time_iso_8601": "2021-07-01T01:58:57.751794Z",
        "url": "https://files.pythonhosted.org/packages/0c/97/b66e5393aa91ce0bbe80dc43817187e7a536fc815f4ab6c8511a43f5175f/birria-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ebe7405f96c8174b3dd05eb776ca073e84e36dad089dcc472ffd0f15a7673ed",
          "md5": "1385ae35e38d561c5c73146e998b7a74",
          "sha256": "0865286c97a05572602c489755a7c6f6c7cd4ccae7b72d7058df5f242d4279ee"
        },
        "downloads": -1,
        "filename": "birria-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1385ae35e38d561c5c73146e998b7a74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26065,
        "upload_time": "2021-07-01T01:58:59",
        "upload_time_iso_8601": "2021-07-01T01:58:59.501617Z",
        "url": "https://files.pythonhosted.org/packages/5e/be/7405f96c8174b3dd05eb776ca073e84e36dad089dcc472ffd0f15a7673ed/birria-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1e9f72888dfbd4780698d1d5d689aee927d800fa1dfc693b197de5aca7ff159",
          "md5": "8c71751accb6eb3988e479e28b687343",
          "sha256": "609ed318537a6947cdeba85a0618d49a14a3926ca0298d788bbdc79d34f4e906"
        },
        "downloads": -1,
        "filename": "birria-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c71751accb6eb3988e479e28b687343",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15586,
        "upload_time": "2021-07-01T19:13:18",
        "upload_time_iso_8601": "2021-07-01T19:13:18.699744Z",
        "url": "https://files.pythonhosted.org/packages/b1/e9/f72888dfbd4780698d1d5d689aee927d800fa1dfc693b197de5aca7ff159/birria-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1319713cd5a9c7e38809337162d58f7f4f27315db575cd00ef41f385d07409d",
          "md5": "995af27323a57d69edf5fc0723b7129c",
          "sha256": "f1102f45534c0342b03e4d03fcc4875483f8961318865805779f4bb21c4fcdd7"
        },
        "downloads": -1,
        "filename": "birria-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "995af27323a57d69edf5fc0723b7129c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26089,
        "upload_time": "2021-07-01T19:13:20",
        "upload_time_iso_8601": "2021-07-01T19:13:20.066792Z",
        "url": "https://files.pythonhosted.org/packages/d1/31/9713cd5a9c7e38809337162d58f7f4f27315db575cd00ef41f385d07409d/birria-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aa9603f52309e6e6253bc9c842d3baecdb5929351a3d1a9ca81de0ef53ca32e",
          "md5": "bb3d1b01e250abb1d7dea0a01c2b3dd2",
          "sha256": "37ea83fd6849737608ae5af324d8b66df628ed47256adcf3e3b3dc9e3b924c62"
        },
        "downloads": -1,
        "filename": "birria-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb3d1b01e250abb1d7dea0a01c2b3dd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15763,
        "upload_time": "2021-07-02T04:32:06",
        "upload_time_iso_8601": "2021-07-02T04:32:06.948030Z",
        "url": "https://files.pythonhosted.org/packages/6a/a9/603f52309e6e6253bc9c842d3baecdb5929351a3d1a9ca81de0ef53ca32e/birria-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5fad6bb6cafa02a026b5b9395a786ff2599d6225a436f8f943259f769984f1c",
          "md5": "0a6c3dfce0c16c7811bec4af10eb601d",
          "sha256": "c5f0c36e49244d323114a4073d21b1a6208c0243b80ad0f8d51b7ac47af019bc"
        },
        "downloads": -1,
        "filename": "birria-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a6c3dfce0c16c7811bec4af10eb601d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26457,
        "upload_time": "2021-07-02T04:32:08",
        "upload_time_iso_8601": "2021-07-02T04:32:08.231975Z",
        "url": "https://files.pythonhosted.org/packages/e5/fa/d6bb6cafa02a026b5b9395a786ff2599d6225a436f8f943259f769984f1c/birria-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bde436984e53b58a401ccbdf9a5a035d30a9bc23e7bec12bcefd42617abd909",
          "md5": "9cb7023a989483489e93cd348f859d50",
          "sha256": "78019748fcdb2b955ac179947dea0c493888faa28ae603d7665b8bd9be5a6701"
        },
        "downloads": -1,
        "filename": "birria-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cb7023a989483489e93cd348f859d50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15753,
        "upload_time": "2021-07-02T04:51:43",
        "upload_time_iso_8601": "2021-07-02T04:51:43.145798Z",
        "url": "https://files.pythonhosted.org/packages/8b/de/436984e53b58a401ccbdf9a5a035d30a9bc23e7bec12bcefd42617abd909/birria-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a815f1e9c5247eabe2c74f18e6eddb0eb710630211730015895518cbde511809",
          "md5": "c2d0a7e848da931c472e8e7314aed5f5",
          "sha256": "688780f697b07b9e2eb6221b73aebe2e5efb33f41abe52b2072e55440be75510"
        },
        "downloads": -1,
        "filename": "birria-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2d0a7e848da931c472e8e7314aed5f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26452,
        "upload_time": "2021-07-02T04:51:44",
        "upload_time_iso_8601": "2021-07-02T04:51:44.679400Z",
        "url": "https://files.pythonhosted.org/packages/a8/15/f1e9c5247eabe2c74f18e6eddb0eb710630211730015895518cbde511809/birria-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec16a0cad8f78113f3c127f22418217fcdaf37bba380ff351e00de956ac22fa9",
          "md5": "7da7348f9f5f5ec39478f3a5abfa28d5",
          "sha256": "eb9ed1cf1fc35a025c7ba44417a8f21d007a23257597a73a419144235191fdd1"
        },
        "downloads": -1,
        "filename": "birria-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7da7348f9f5f5ec39478f3a5abfa28d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15757,
        "upload_time": "2021-07-02T05:18:11",
        "upload_time_iso_8601": "2021-07-02T05:18:11.053555Z",
        "url": "https://files.pythonhosted.org/packages/ec/16/a0cad8f78113f3c127f22418217fcdaf37bba380ff351e00de956ac22fa9/birria-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8b7cb5b4c5b9af9d9858facaab44c3ed4715d1ea7c9db3d28b56c96842e5bee",
          "md5": "2537af7d5f4e0d1ec3db243c7eda7f8f",
          "sha256": "9e6456d0cbe2b05876900e31e7cc307bf2f5198e8485b5f326921742a4da5153"
        },
        "downloads": -1,
        "filename": "birria-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2537af7d5f4e0d1ec3db243c7eda7f8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26454,
        "upload_time": "2021-07-02T05:18:11",
        "upload_time_iso_8601": "2021-07-02T05:18:11.983377Z",
        "url": "https://files.pythonhosted.org/packages/f8/b7/cb5b4c5b9af9d9858facaab44c3ed4715d1ea7c9db3d28b56c96842e5bee/birria-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb00530883dcba61600bdee29e2d5a18e982d12dd276d39165fd9799af81b852",
          "md5": "81fbec51caee54c06e0c55d648c034da",
          "sha256": "6fc72176684966d2b998e3595a9f90d3f5388860ca78b88694db914865206c43"
        },
        "downloads": -1,
        "filename": "birria-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81fbec51caee54c06e0c55d648c034da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15766,
        "upload_time": "2021-07-02T14:58:55",
        "upload_time_iso_8601": "2021-07-02T14:58:55.770800Z",
        "url": "https://files.pythonhosted.org/packages/cb/00/530883dcba61600bdee29e2d5a18e982d12dd276d39165fd9799af81b852/birria-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b512a2098e0d8a1bec4efe9ed024a63ee3febdf1dea63c14e7348dace0a0364c",
          "md5": "afadbbd164f661261afe914b1bac9172",
          "sha256": "7ae464cf5f3cb3f732f5cb84dd3f1f24916cd254c080be3f6131885b8e2209aa"
        },
        "downloads": -1,
        "filename": "birria-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "afadbbd164f661261afe914b1bac9172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26467,
        "upload_time": "2021-07-02T14:58:58",
        "upload_time_iso_8601": "2021-07-02T14:58:58.093100Z",
        "url": "https://files.pythonhosted.org/packages/b5/12/a2098e0d8a1bec4efe9ed024a63ee3febdf1dea63c14e7348dace0a0364c/birria-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb00530883dcba61600bdee29e2d5a18e982d12dd276d39165fd9799af81b852",
        "md5": "81fbec51caee54c06e0c55d648c034da",
        "sha256": "6fc72176684966d2b998e3595a9f90d3f5388860ca78b88694db914865206c43"
      },
      "downloads": -1,
      "filename": "birria-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81fbec51caee54c06e0c55d648c034da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15766,
      "upload_time": "2021-07-02T14:58:55",
      "upload_time_iso_8601": "2021-07-02T14:58:55.770800Z",
      "url": "https://files.pythonhosted.org/packages/cb/00/530883dcba61600bdee29e2d5a18e982d12dd276d39165fd9799af81b852/birria-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b512a2098e0d8a1bec4efe9ed024a63ee3febdf1dea63c14e7348dace0a0364c",
        "md5": "afadbbd164f661261afe914b1bac9172",
        "sha256": "7ae464cf5f3cb3f732f5cb84dd3f1f24916cd254c080be3f6131885b8e2209aa"
      },
      "downloads": -1,
      "filename": "birria-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "afadbbd164f661261afe914b1bac9172",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26467,
      "upload_time": "2021-07-02T14:58:58",
      "upload_time_iso_8601": "2021-07-02T14:58:58.093100Z",
      "url": "https://files.pythonhosted.org/packages/b5/12/a2098e0d8a1bec4efe9ed024a63ee3febdf1dea63c14e7348dace0a0364c/birria-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}