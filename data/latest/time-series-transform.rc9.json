{
  "info": {
    "author": "Kuan-Lun Chiang; Kuan-Yu Chiang",
    "author_email": "kuanlun.chiang@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Time Series Transformer\n\nDocumentation\nhttps://allen-chiang.github.io/Time-Series-Transformer/\n\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n![Build](https://github.com/allen-chiang/Time-Series-Transformer/workflows/Build/badge.svg)\n[![Build Status](https://dev.azure.com/kuanlunchiang/Time%20Series%20Transformer/_apis/build/status/allen-chiang.Time-Series-Transformer?branchName=master)](https://dev.azure.com/kuanlunchiang/Time%20Series%20Transformer/_build/latest?definitionId=3&branchName=master)\n[![Board Status](https://dev.azure.com/kuanlunchiang/4514fff7-ad24-4603-9373-c28efeaada71/b19741c8-3782-44ee-8a92-2805fbeb49f9/_apis/work/boardbadge/e0f238c1-381a-4686-a599-43174bf8237f)](https://dev.azure.com/kuanlunchiang/4514fff7-ad24-4603-9373-c28efeaada71/_boards/board/t/b19741c8-3782-44ee-8a92-2805fbeb49f9/Microsoft.RequirementCategory)\n[![CodeFactor](https://www.codefactor.io/repository/github/allen-chiang/time-series-transformer/badge)](https://www.codefactor.io/repository/github/allen-chiang/time-series-transformer)\n\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom time_series_transform.sklearn import *\nimport time_series_transform as tst\n```\n\n# Introduction\n\nThis package provides tools for time series data preprocessing. There are two main components inside the package: Time_Series_Transformer and Stock_Transformer. Time_Series_Transformer is a general class for all type of time series data, while Stock_Transformer is a sub-class of Time_Series_Transformer. Time_Series_Transformer has different functions for data manipulation, io transformation, and making simple plots. This tutorial will take a quick look at the functions for data manipulation and basic io. For the plot functions, there will be other tutorial to explain. \n\n# Time_Series_Transformer\n\nSince all the time series data having time data, Time_Series_Transformer is required to specify time index. The basic time series data is time series data with no special category. However, there a lot of cases that a time series data is associating with categories. For example, inventory data is usually associate with product name or stores, or stock data is having different ticker names or brokers. To address this question, Time_Series_Transformer can specify the main category index. Given the main category index, the data can be manipulated in parallel corresponding to its category.\n\nHere is a simple example to create a Time_Series_Transformer without specifying its category.\n\n\n```python\ndata = {\n    'time':[1,2,3,4,5],\n    'data1':[1,2,3,4,5],\n    'data2':[6,7,8,9,10]\n}\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans\n```\n\n\n\n\n    data column\n    -----------\n    time\n    data1\n    data2\n    time length: 5\n    category: None\n    \n\n\n\nThere are two ways to manipulate the data. The first way is use the pre-made functions, and the second way is to use the transform function and provide your custom function. There are six pre-made functions including make_lag, make_lead, make_lag_sequence, make_lead_sequence, and make_stack_sequence. In the following demonstration, we will show each of the pre-made functions.\n\n### Pre-made functions\nmake_lag and make_lead functions are going to create lag/lead data for input columns. This type of manipulation could be useful for machine learning.\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.make_lag(\n    inputLabels = ['data1','data2'],\n    lagNum = 1,\n    suffix = '_lag_',\n    fillMissing = np.nan\n            )\nprint(trans.to_pandas())\n```\n\n       time  data1  data2  data1_lag_1  data2_lag_1\n    0     1      1      6          NaN          NaN\n    1     2      2      7          1.0          6.0\n    2     3      3      8          2.0          7.0\n    3     4      4      9          3.0          8.0\n    4     5      5     10          4.0          9.0\n    \n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.make_lead(\n    inputLabels = ['data1','data2'],\n    leadNum = 1,\n    suffix = '_lead_',\n    fillMissing = np.nan\n            )\nprint(trans.to_pandas())\n```\n\n       time  data1  data2  data1_lead_1  data2_lead_1\n    0     1      1      6           2.0           7.0\n    1     2      2      7           3.0           8.0\n    2     3      3      8           4.0           9.0\n    3     4      4      9           5.0          10.0\n    4     5      5     10           NaN           NaN\n    \n\nmake_lag_sequence and make_lead_sequence is to create a sequence for a given window length and lag or lead number. This manipulation could be useful for Deep learning.\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.make_lag_sequence(\n    inputLabels = ['data1','data2'],\n    windowSize = 2,\n    lagNum =1,\n    suffix = '_lag_seq_'\n)\nprint(trans.to_pandas())\n```\n\n       time  data1  data2 data1_lag_seq_2 data2_lag_seq_2\n    0     1      1      6      [nan, nan]      [nan, nan]\n    1     2      2      7      [nan, 1.0]      [nan, 6.0]\n    2     3      3      8      [1.0, 2.0]      [6.0, 7.0]\n    3     4      4      9      [2.0, 3.0]      [7.0, 8.0]\n    4     5      5     10      [3.0, 4.0]      [8.0, 9.0]\n    \n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.make_lead_sequence(\n    inputLabels = ['data1','data2'],\n    windowSize = 2,\n    leadNum =1,\n    suffix = '_lead_seq_'\n)\nprint(trans.to_pandas())\n```\n\n       time  data1  data2 data1_lead_seq_2 data2_lead_seq_2\n    0     1      1      6       [2.0, 3.0]       [7.0, 8.0]\n    1     2      2      7       [3.0, 4.0]       [8.0, 9.0]\n    2     3      3      8       [4.0, 5.0]      [9.0, 10.0]\n    3     4      4      9       [nan, nan]       [nan, nan]\n    4     5      5     10       [nan, nan]       [nan, nan]\n    \n\n### Custom Functions\n\nTo use the transform function, you have to create your custom functions. The input data will be passed as dict of list, and the output data should be either pandas DataFrame, pandas Series, numpy ndArray or list. Note, the output length should be in consist with the orignal data length.\n\nFor exmaple, this function takes input dictionary data and sum them up. The final output is a list.\n\n\n```python\nimport copy\ndef list_output (dataDict):\n    res = []\n    for i in dataDict:\n        if len(res) == 0:\n            res = copy.deepcopy(dataDict[i])\n            continue\n        for ix,v in enumerate(dataDict[i]):\n            res[ix] += v\n    return res\n```\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.transform(\n    inputLabels = ['data1','data2'],\n    newName = 'sumCol',\n    func = list_output\n)\nprint(trans.to_pandas())\n```\n\n       time  data1  data2  sumCol\n    0     1      1      6       7\n    1     2      2      7       9\n    2     3      3      8      11\n    3     4      4      9      13\n    4     5      5     10      15\n    \n\nThe following example will output as pandas DataFrame and also takes additional parameters. Note: since pandas already has column name, the new name will automatically beocme suffix.\n\n\n```python\ndef pandas_output(dataDict, pandasColName):\n    res = []\n    for i in dataDict:\n        if len(res) == 0:\n            res = copy.deepcopy(dataDict[i])\n            continue\n        for ix,v in enumerate(dataDict[i]):\n            res[ix] += v\n    return pd.DataFrame({pandasColName:res})\n```\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,timeSeriesCol='time')\ntrans = trans.transform(\n    inputLabels = ['data1','data2'],\n    newName = 'sumCol',\n    func = pandas_output,\n    pandasColName = \"pandasName\"\n)\nprint(trans.to_pandas())\n```\n\n       time  data1  data2  sumCol_pandasName\n    0     1      1      6                  7\n    1     2      2      7                  9\n    2     3      3      8                 11\n    3     4      4      9                 13\n    4     5      5     10                 15\n    \n\n### Data with Category\n\nSince time series data could be associated with different category, Time_Series_Transformer can specify the mainCategoryCol parameter to point out the main category. This class only provide one columns for main category because multiple dimensions can be aggregated into a new column as main category.\n\nThe following example has one category with two type a and b. Each of them has some overlaped and different timestamp.\n\n\n```python\ndata = {\n    \"time\":[1,2,3,4,5,1,3,4,5],\n    'data':[1,2,3,4,5,1,2,3,4],\n    \"category\":['a','a','a','a','a','b','b','b','b']\n}\n```\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,'time','category')\ntrans\n```\n\n\n\n\n    data column\n    -----------\n    time\n    data\n    time length: 5\n    category: a\n    \n    data column\n    -----------\n    time\n    data\n    time length: 4\n    category: b\n    \n    main category column: category\n\n\n\nSince we specify the main category column, data manipulation functions can use n_jobs to execute the function in parallel. The parallel execution is with joblib implmentation (https://joblib.readthedocs.io/en/latest/). \n\n\n```python\ntrans = trans.make_lag(\n    inputLabels = ['data'],\n    lagNum = 1,\n    suffix = '_lag_',\n    fillMissing = np.nan,\n    n_jobs = 2,\n    verbose = 10        \n)\nprint(trans.to_pandas())\n```\n\n    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.\n    \n\n       time  data  data_lag_1 category\n    0     1     1         NaN        a\n    1     2     2         1.0        a\n    2     3     3         2.0        a\n    3     4     4         3.0        a\n    4     5     5         4.0        a\n    5     1     1         NaN        b\n    6     3     2         1.0        b\n    7     4     3         2.0        b\n    8     5     4         3.0        b\n    \n\n    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    3.6s remaining:    0.0s\n    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    3.6s finished\n    \n\nTo further support the category, there are two functions to deal with different time length data: pad_different_category_time and remove_different_category_time. The first function is padding the different length into same length, while the other is remove different timestamp.\n\n\n```python\ntrans = tst.Time_Series_Transformer(data,'time','category')\ntrans = trans.pad_different_category_time(fillMissing = np.nan\n)\nprint(trans.to_pandas())\n```\n\n       time  data category\n    0     1   1.0        a\n    1     2   2.0        a\n    2     3   3.0        a\n    3     4   4.0        a\n    4     5   5.0        a\n    5     1   1.0        b\n    6     2   NaN        b\n    7     3   2.0        b\n    8     4   3.0        b\n    9     5   4.0        b\n    \n\n\n```python\ntrans = tst.Time_Series_Transformer(data,'time','category')\ntrans = trans.remove_different_category_time()\nprint(trans.to_pandas())\n```\n\n       time  data category\n    0     1     1        a\n    1     3     3        a\n    2     4     4        a\n    3     5     5        a\n    4     1     1        b\n    5     3     2        b\n    6     4     3        b\n    7     5     4        b\n    \n\n## IO\n\nIO is a huge component for this package. The current version support pandas DataFrame, numpy ndArray, Apache Arrow Table, Apache Feather, and Apache Parquet. All those io can specify whether to expand category or time for the export format. In this demo, we will show numpy and pandas. Also, Transformer can combine make_label function and sepLabel parameter inside of export to seperate data and label.\n\n### pandas\n\n\n```python\ndata = {\n    \"time\":[1,2,3,4,5,1,3,4,5],\n    'data':[1,2,3,4,5,1,2,3,4],\n    \"category\":['a','a','a','a','a','b','b','b','b']\n}\ndf = pd.DataFrame(data)\n```\n\n\n```python\ntrans = tst.Time_Series_Transformer.from_pandas(\n    pandasFrame = df,\n    timeSeriesCol = 'time',\n    mainCategoryCol= 'category'\n)\ntrans\n```\n\n\n\n\n    data column\n    -----------\n    time\n    data\n    time length: 5\n    category: a\n    \n    data column\n    -----------\n    time\n    data\n    time length: 4\n    category: b\n    \n    main category column: category\n\n\n\nTo expand the data, all category should be in consist. Besides the pad and remove function, we can use preprocessType parameter to achive that.\n\n\n```python\nprint(trans.to_pandas(\n    expandCategory = True,\n    expandTime = False,\n    preprocessType = 'pad'\n))\n```\n\n       time  data_a  data_b\n    0     1       1     1.0\n    1     2       2     NaN\n    2     3       3     2.0\n    3     4       4     3.0\n    4     5       5     4.0\n    \n\n\n```python\nprint(trans.to_pandas(\n    expandCategory = False,\n    expandTime = True,\n    preprocessType = 'pad'\n))\n```\n\n       data_1  data_2  data_3  data_4  data_5 category\n    0       1     2.0       3       4       5        a\n    1       1     NaN       2       3       4        b\n    \n\n\n```python\nprint(trans.to_pandas(\n    expandCategory = True,\n    expandTime = True,\n    preprocessType = 'pad'\n))\n```\n\n       data_a_1  data_b_1  data_a_2  data_b_2  data_a_3  data_b_3  data_a_4  \\\n    0         1       1.0         2       NaN         3       2.0         4   \n    \n       data_b_4  data_a_5  data_b_5  \n    0       3.0         5       4.0  \n    \n\nmake_label function can be used with sepLabel parameter. This function can be used for seperating X and y for machine learning cases.\n\n\n```python\ntrans = trans.make_lead('data',leadNum = 1,suffix = '_lead_')\ntrans = trans.make_label(\"data_lead_1\")\n```\n\n\n```python\ndata, label = trans.to_pandas(\n    expandCategory = False,\n    expandTime = False,\n    preprocessType = 'pad',\n    sepLabel = True\n)\n```\n\n\n```python\nprint(data)\n```\n\n       time  data category\n    0     1   1.0        a\n    1     2   2.0        a\n    2     3   3.0        a\n    3     4   4.0        a\n    4     5   5.0        a\n    5     1   1.0        b\n    6     2   NaN        b\n    7     3   2.0        b\n    8     4   3.0        b\n    9     5   4.0        b\n    \n\n\n```python\nprint(label)\n```\n\n       data_lead_1\n    0          2.0\n    1          3.0\n    2          4.0\n    3          5.0\n    4          NaN\n    5          2.0\n    6          NaN\n    7          3.0\n    8          4.0\n    9          NaN\n    \n\n### numpy\nSince numpy has no column name, it has to use index number to specify column.\n\n\n```python\ndata = {\n    \"time\":[1,2,3,4,5,1,3,4,5],\n    'data':[1,2,3,4,5,1,2,3,4],\n    \"category\":['a','a','a','a','a','b','b','b','b']\n}\nnpArray = pd.DataFrame(data).values\n```\n\n\n```python\ntrans = tst.Time_Series_Transformer.from_numpy(\n    numpyData= npArray,\n    timeSeriesCol = 0,\n    mainCategoryCol = 2)\ntrans\n```\n\n\n\n\n    data column\n    -----------\n    0\n    1\n    time length: 5\n    category: a\n    \n    data column\n    -----------\n    0\n    1\n    time length: 4\n    category: b\n    \n    main category column: 2\n\n\n\n\n```python\ntrans = trans.make_lead(1,leadNum = 1,suffix = '_lead_')\ntrans = trans.make_label(\"1_lead_1\")\n```\n\n\n```python\nX,y = trans.to_pandas(\n    expandCategory = False,\n    expandTime = False,\n    preprocessType = 'pad',\n    sepLabel = True\n)\n```\n\n\n```python\nprint(X)\n```\n\n       0    1  2\n    0  1  1.0  a\n    1  2  2.0  a\n    2  3  3.0  a\n    3  4  4.0  a\n    4  5  5.0  a\n    5  1  1.0  b\n    6  2  NaN  b\n    7  3  2.0  b\n    8  4  3.0  b\n    9  5  4.0  b\n    \n\n\n```python\nprint(y)\n```\n\n       1_lead_1\n    0       2.0\n    1       3.0\n    2       4.0\n    3       5.0\n    4       NaN\n    5       2.0\n    6       NaN\n    7       3.0\n    8       4.0\n    9       NaN\n    \n\n# Stock_Transformer\n\nStock_Transformer is a subclass of Time_Series_Transformer. Hence, all the function demonstrated in Time_Series_Transformer canbe used in Stock_Transformer. The differences for Stock_Transformer is that it is required to specify High, Low, Open, Close, Volume columns. Besides these information, it has pandas-ta strategy implmentation to create technical indicator (https://github.com/twopirllc/pandas-ta). Moreover, the io class for Stock_Transformer support yfinance and investpy. We can directly extract data from these api.\n\n### create technical indicator\n\n\n```python\nstock = tst.Stock_Transformer.from_stock_engine_period(\n    symbols = 'GOOGL',period ='1y', engine = 'yahoo'\n)\nstock\n```\n\n\n\n\n    data column\n    -----------\n    Date\n    Open\n    High\n    Low\n    Close\n    Volume\n    Dividends\n    Stock Splits\n    time length: 253\n    category: None\n    \n\n\n\n\n```python\nimport pandas_ta as ta\nMyStrategy = ta.Strategy(\n    name=\"DCSMA10\",\n    ta=[\n        {\"kind\": \"ohlc4\"},\n        {\"kind\": \"sma\", \"length\": 10},\n        {\"kind\": \"donchian\", \"lower_length\": 10, \"upper_length\": 15},\n        {\"kind\": \"ema\", \"close\": \"OHLC4\", \"length\": 10, \"suffix\": \"OHLC4\"},\n    ]\n)\n```\n\n\n```python\nstock = stock.get_technial_indicator(MyStrategy)\nprint(stock.to_pandas().head())\n```\n\n             Date         Open         High          Low        Close   Volume  \\\n    0  2020-01-06  1351.630005  1398.319946  1351.000000  1397.810059  2338400   \n    1  2020-01-07  1400.459961  1403.500000  1391.560059  1395.109985  1716500   \n    2  2020-01-08  1394.819946  1411.849976  1392.630005  1405.040039  1765700   \n    3  2020-01-09  1421.930054  1428.680054  1410.209961  1419.790039  1660000   \n    4  2020-01-10  1429.469971  1434.939941  1419.599976  1428.959961  1312900   \n    \n       Dividends  Stock Splits        OHLC4  SMA_10  DCL_10_15  DCM_10_15  \\\n    0          0             0  1374.690002     NaN        NaN        NaN   \n    1          0             0  1397.657501     NaN        NaN        NaN   \n    2          0             0  1401.084991     NaN        NaN        NaN   \n    3          0             0  1420.152527     NaN        NaN        NaN   \n    4          0             0  1428.242462     NaN        NaN        NaN   \n    \n       DCU_10_15  EMA_10_OHLC4  \n    0        NaN           NaN  \n    1        NaN           NaN  \n    2        NaN           NaN  \n    3        NaN           NaN  \n    4        NaN           NaN  \n    \n\nFor more usage please visit our gallery",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/allen-chiang/Time-Series-Transformer/archive/1.1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/allen-chiang/Time-Series-Transformer",
    "keywords": "time series,stock,machine learning,deep learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "time-series-transform",
    "package_url": "https://pypi.org/project/time-series-transform/",
    "platform": "",
    "project_url": "https://pypi.org/project/time-series-transform/",
    "project_urls": {
      "Documentation": "https://allen-chiang.github.io/Time-Series-Transformer/",
      "Download": "https://github.com/allen-chiang/Time-Series-Transformer/archive/1.1.2.tar.gz",
      "Homepage": "https://github.com/allen-chiang/Time-Series-Transformer",
      "Source Code": "https://github.com/allen-chiang/Time-Series-Transformer"
    },
    "release_url": "https://pypi.org/project/time-series-transform/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A data preprocessing package for time series data. It provides tools for machine learing and deep learning.It also has subsection specialized in stock.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9106904,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c167e2fc3d668144d7e3eec6f9fd77fa3abb772a2fc85a967cbec6dc2dc2f87",
          "md5": "381c2dbb01f0c3634a68fd4c0bac30a1",
          "sha256": "e4e62544546cba27f860fa028d0bfa8df66f3c9950874b94c051432e5c23d6db"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "381c2dbb01f0c3634a68fd4c0bac30a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20903,
        "upload_time": "2020-08-14T17:31:18",
        "upload_time_iso_8601": "2020-08-14T17:31:18.930330Z",
        "url": "https://files.pythonhosted.org/packages/8c/16/7e2fc3d668144d7e3eec6f9fd77fa3abb772a2fc85a967cbec6dc2dc2f87/time_series_transform-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a540a74ba1fc03c2771c0879a30c9a1c56920ffe6156e827a8ffbb05687d3d5",
          "md5": "35cbc3d10c7d05aa38763a5208759886",
          "sha256": "dedf597924f83a68cdfd6e3aab92cb395e6b0d46d9284a97641c9a75201687b1"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "35cbc3d10c7d05aa38763a5208759886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26321,
        "upload_time": "2020-08-16T00:02:24",
        "upload_time_iso_8601": "2020-08-16T00:02:24.229173Z",
        "url": "https://files.pythonhosted.org/packages/0a/54/0a74ba1fc03c2771c0879a30c9a1c56920ffe6156e827a8ffbb05687d3d5/time_series_transform-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9126b4a31ae379def3284e0a27cbe38753977758545c910e551a2abd4281704",
          "md5": "9d1bc3d60d0adf546bcfa303619bb472",
          "sha256": "924306d47d8847730df1e2fab0ff62d9e0ec70867c4d7f35898041fa4f34896e"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9d1bc3d60d0adf546bcfa303619bb472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26629,
        "upload_time": "2020-08-18T10:18:40",
        "upload_time_iso_8601": "2020-08-18T10:18:40.470540Z",
        "url": "https://files.pythonhosted.org/packages/d9/12/6b4a31ae379def3284e0a27cbe38753977758545c910e551a2abd4281704/time_series_transform-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00ce1607917a60f0c8e1893fbaa92e9700ab8bec0113f7fa62cd88a90452117c",
          "md5": "b85f6282700748c6d3b0d8cbe2dd9783",
          "sha256": "be37c11a725447d055fc28fbee347cd231dbaa73a1dc15db696450d207f7dd2a"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b85f6282700748c6d3b0d8cbe2dd9783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25493,
        "upload_time": "2020-08-18T11:16:03",
        "upload_time_iso_8601": "2020-08-18T11:16:03.765526Z",
        "url": "https://files.pythonhosted.org/packages/00/ce/1607917a60f0c8e1893fbaa92e9700ab8bec0113f7fa62cd88a90452117c/time_series_transform-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "330c9410c164eaf12e74f432b79d9ea057efe5d13ea329e54f549ebf6e4decf8",
          "md5": "f787f115a92f00e3607cd0728b881653",
          "sha256": "fda9e6324b5d911c67d8c1b95ff32c3d8691e60cbfc0958f2b652a44bf7ae98e"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f787f115a92f00e3607cd0728b881653",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25451,
        "upload_time": "2020-08-18T15:36:12",
        "upload_time_iso_8601": "2020-08-18T15:36:12.378920Z",
        "url": "https://files.pythonhosted.org/packages/33/0c/9410c164eaf12e74f432b79d9ea057efe5d13ea329e54f549ebf6e4decf8/time_series_transform-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63669464928b9f82accfc1863873d816d44ca1b955979d5fa59fb150ccc3a75d",
          "md5": "ffab0b8081ac5eff32915035d0bafab4",
          "sha256": "45699d55a5c28aca12f66c2e69abc40c6a7bfe3023f0b75450909c179830a031"
        },
        "downloads": -1,
        "filename": "time_series_transform-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ffab0b8081ac5eff32915035d0bafab4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26168,
        "upload_time": "2020-08-18T16:12:26",
        "upload_time_iso_8601": "2020-08-18T16:12:26.130782Z",
        "url": "https://files.pythonhosted.org/packages/63/66/9464928b9f82accfc1863873d816d44ca1b955979d5fa59fb150ccc3a75d/time_series_transform-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e66528ffdbd5042e6fa99fe816f395399e1e217b3b9669788053e48713e12f1",
          "md5": "02614a42a8f66c35380a50b8e69f484a",
          "sha256": "b7cf1349189b08bd2da63c42fb84463f5c1241504fdb0378e57e552766c90bbf"
        },
        "downloads": -1,
        "filename": "time_series_transform-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02614a42a8f66c35380a50b8e69f484a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63059,
        "upload_time": "2021-01-05T16:14:32",
        "upload_time_iso_8601": "2021-01-05T16:14:32.315064Z",
        "url": "https://files.pythonhosted.org/packages/9e/66/528ffdbd5042e6fa99fe816f395399e1e217b3b9669788053e48713e12f1/time_series_transform-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f85af3de1a5122cde36abdac32ac4938c76b143fb3f1d6cefd9e6987af22be66",
          "md5": "ecb4b221c48c356ccb93e09ecd6a178c",
          "sha256": "72a844d8fe68f7cbd015f5fa21a61ecc55248e1b33511719e00d06fcf0803015"
        },
        "downloads": -1,
        "filename": "time_series_transform-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ecb4b221c48c356ccb93e09ecd6a178c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66361,
        "upload_time": "2021-01-05T16:31:54",
        "upload_time_iso_8601": "2021-01-05T16:31:54.506769Z",
        "url": "https://files.pythonhosted.org/packages/f8/5a/f3de1a5122cde36abdac32ac4938c76b143fb3f1d6cefd9e6987af22be66/time_series_transform-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7613b793aa132eff655d319fdba50578c7457a943f619bb98a39965663ecae97",
          "md5": "cf879654c43cc43749741a8363e082ef",
          "sha256": "b96f6998aff7b5757137792b04379873d8e7e96cc16ecfea840728cf08bd2f4d"
        },
        "downloads": -1,
        "filename": "time_series_transform-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cf879654c43cc43749741a8363e082ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66355,
        "upload_time": "2021-01-11T17:43:02",
        "upload_time_iso_8601": "2021-01-11T17:43:02.267183Z",
        "url": "https://files.pythonhosted.org/packages/76/13/b793aa132eff655d319fdba50578c7457a943f619bb98a39965663ecae97/time_series_transform-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7613b793aa132eff655d319fdba50578c7457a943f619bb98a39965663ecae97",
        "md5": "cf879654c43cc43749741a8363e082ef",
        "sha256": "b96f6998aff7b5757137792b04379873d8e7e96cc16ecfea840728cf08bd2f4d"
      },
      "downloads": -1,
      "filename": "time_series_transform-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "cf879654c43cc43749741a8363e082ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 66355,
      "upload_time": "2021-01-11T17:43:02",
      "upload_time_iso_8601": "2021-01-11T17:43:02.267183Z",
      "url": "https://files.pythonhosted.org/packages/76/13/b793aa132eff655d319fdba50578c7457a943f619bb98a39965663ecae97/time_series_transform-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}