{
  "info": {
    "author": "Ashley R. Thomas",
    "author_email": "ashley.r.thomas.701@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python Multiprocessing Pipeline\n## Overview\nThe atbu.mp_pipeline package uses Python multiprocessing capabilities to support multi-stage pipeline capabilities, including support for dual-stage parallel execution of a producer and consumer stages, automatically providing each of those stages with pipe connection, allowing them share what is being produced/consumed.\n\nThe atbu.mp_pipeline package is currently used by the following project for supporting a backup compression pipeline stage:\n- [ATBU Backup & Persistent File Information](https://github.com/AshleyT3/atbu) utility package (atbu-pkg).\n\nDocumentation: https://atbu-mp-pipeline.readthedocs.io/en/latest/\n\n## Setup\nTo install atbu-common-pkg:\n\n```\npip install atbu-mp-pipeline-pkg\n```\n\nSee below for a few examples. See source code for other packages mentioned above and for additional details and usage information.\n\n## Examples\n\n### Basic/Simple Pipeline Example\n\n```\nimport os\nfrom multiprocessing import freeze_support\nfrom atbu.mp_pipeline.mp_pipeline import (\n    MultiprocessingPipeline,\n    SubprocessPipelineStage,\n    PipelineWorkItem,\n)\n\ndef queue_worker_func(parm_top_secret, parent_pid):\n    assert parent_pid != os.getpid()\n    return (\n        parent_pid,\n        os.getpid(),\n        parm_top_secret,\n    )\n\ndef int_stage0(wi: PipelineWorkItem):\n    wi.user_obj[0] = 100\n    return wi\n\n\ndef int_stage1(wi: PipelineWorkItem):\n    wi.user_obj[0] = wi.user_obj[0] * 2\n    wi.user_obj[1] = \"stage1\"\n    return wi\n\n\ndef int_stage2(wi: PipelineWorkItem):\n    wi.user_obj[0] = wi.user_obj[0] * 2\n    wi.user_obj[2] = f\"stage2: got this from parent: {wi.user_obj['parent']}\"\n    return wi\n\n\ndef always_yes(wi: PipelineWorkItem):\n    return True\n\ndef main():\n    sp = MultiprocessingPipeline(\n        name=\"test_mp_pipeline_basic\",\n        stages=[\n            SubprocessPipelineStage(\n                fn_determiner=always_yes,\n                fn_worker=int_stage0,\n            ),\n            SubprocessPipelineStage(\n                fn_determiner=always_yes,\n                fn_worker=int_stage1,\n            ),\n            SubprocessPipelineStage(\n                fn_determiner=always_yes,\n                fn_worker=int_stage2,\n            ),\n        ],\n    )\n\n    d = {}\n    d[\"parent\"] = \"This is from parent\"\n    wi = PipelineWorkItem(d.copy())\n    f = sp.submit(wi)\n    r_wi: PipelineWorkItem = f.result()\n    if not wi.is_failed:\n        assert wi == r_wi # On success, should be equal.\n        assert wi.user_obj[\"parent\"] == d[\"parent\"] # Should not change.\n        # Should have values as set by stages...\n        assert wi.user_obj[0] == 400\n        assert wi.user_obj[1] == \"stage1\"\n        assert wi.user_obj[2] == \"stage2: got this from parent: This is from parent\"\n        print(f\"Work item completed successfully:\")\n        print(f\"  wi.user_obj[0]={wi.user_obj[0]}\")\n        print(f\"  wi.user_obj[1]={wi.user_obj[1]}\")\n        print(f\"  wi.user_obj[2]={wi.user_obj[2]}\")\n    else:\n        print(f\"Something did not go as planned:\")\n        for ex in r_wi.exceptions:\n            print(f\" ex={ex}\")\n    sp.shutdown()\n    assert sp.was_graceful_shutdown\n\nif __name__ == '__main__':\n    freeze_support()\n    main()\n```\n\n**Output:**\n```\nWork item completed successfully:\n  wi.user_obj[0]=400\n  wi.user_obj[1]=stage1\n  wi.user_obj[2]=stage2: got this from parent: This is from parent\n```\n\n### Large Pipeline Example\n\n```\nimport os\nfrom multiprocessing import freeze_support\nfrom atbu.mp_pipeline.mp_pipeline import (\n    MultiprocessingPipeline,\n    SubprocessPipelineStage,\n    PipelineWorkItem,\n)\n\nclass LargePipelineWorkItem(PipelineWorkItem):\n    def __init__(self) -> None:\n        super().__init__(user_obj=self)\n        self.is_ok = True\n        self.num = 0\n        self.pid = os.getpid()\n\n\nclass LargePipelineStage(SubprocessPipelineStage):\n    def __init__(self) -> None:\n        super().__init__()\n\n    def is_for_stage(self, pwi: LargePipelineWorkItem) -> bool:\n        # Example of stage rejecting its chance to run the work item.\n        # Say \"no\" to every other request.\n        pwi.is_ok = not pwi.is_ok\n        return not pwi.is_ok\n\n    def perform_stage_work(\n        self,\n        pwi: LargePipelineWorkItem,\n        **kwargs,\n    ):\n        pwi.num += 1\n        return pwi\n\ndef main():\n    stages = 100\n    mpp = MultiprocessingPipeline(\n        max_simultaneous_work_items=min(os.cpu_count(), 15),\n        name=\"test_mp_pipeline_large\",\n    )\n    for _ in range(stages):\n        mpp.add_stage(stage=LargePipelineStage())\n    print(f\"Pipeline has {mpp.num_stages} stages.\")\n    wi = LargePipelineWorkItem()\n    f = mpp.submit(wi)\n    r_wi: PipelineWorkItem = f.result()\n    if not r_wi.is_failed:\n        assert wi == r_wi\n        assert r_wi.is_ok\n        assert r_wi.num == 50\n        print(f\"Work item completed successfully:\")\n        print(f\"  r_wi.is_ok={r_wi.is_ok}\")\n        print(f\"  r_wi.pid={r_wi.pid}\")\n    else:\n        if r_wi.exceptions is not None:\n            print(f\"Something did not go as planned:\")\n            for ex in r_wi.exceptions:\n                print(f\" ex={ex}\")\n    mpp.shutdown()\n    assert mpp.was_graceful_shutdown\n\nif __name__ == '__main__':\n    freeze_support()\n    main()\n```\n\n**Output:**\n\n```\nPipeline has 100 stages.\nWork item completed successfully:\n  r_wi.is_ok=True\n  r_wi.pid=8204\n  r_wi.num=50\n```\n\n### Mixed Pipeline Example\n\n```\nimport os\nfrom multiprocessing import freeze_support\nfrom atbu.mp_pipeline.mp_pipeline import (\n    MultiprocessingPipeline,\n    PipelineStage,\n    SubprocessPipelineStage,\n    ThreadPipelineStage,\n    PipelineWorkItem,\n)\n\nclass LargePipelineWorkItem(PipelineWorkItem):\n    def __init__(self) -> None:\n        super().__init__(user_obj=self)\n        self.is_ok = True\n        self.num = 0\n        self.pid = os.getpid()\n\n\nclass MixedPipelineSubprocessStage(PipelineStage):\n    def __init__(self) -> None:\n        super().__init__()\n\n    @property\n    def is_subprocess(self):\n        return True\n\n    def is_for_stage(self, pwi: LargePipelineWorkItem) -> bool:\n        return True # Yes, this stage wants all work items.\n\n    def perform_stage_work(\n        self,\n        pwi: LargePipelineWorkItem,\n        **kwargs,\n    ):\n        # Run the work item.\n        assert pwi.pid != os.getpid() # Subprocess should have different pid.\n        pwi.num += 1\n        return pwi\n\n\ndef perform_thread_stage_work(\n    pwi: LargePipelineWorkItem,\n    **kwargs,\n):\n    assert pwi.pid == os.getpid() # Thread should have same process.\n    pwi.num += 1\n    return pwi\n\ndef main():\n    mpp = MultiprocessingPipeline(\n        name=\"mp_pipeline_large_mixed\",\n        max_simultaneous_work_items=min(os.cpu_count(), 15),\n    )\n    for _ in range(10):\n        # Add a stage using our derived-class pipeline stage.\n        mpp.add_stage(stage=MixedPipelineSubprocessStage())\n        # Add a stage using the library's thread pipeline stage,\n        # where we specify the callable to call for both asking\n        # the pipeline if it wants to run a given work item, and\n        # and other to actually do the work.\n        mpp.add_stage(\n            stage=ThreadPipelineStage(\n                fn_determiner=lambda pwi: True, # Run all work items.\n                fn_worker=perform_thread_stage_work, # Call this to run them.\n            )\n        )\n    print(f\"Pipeline has {mpp.num_stages} stages.\")\n    wi = LargePipelineWorkItem()\n    f = mpp.submit(wi)\n    r_wi: PipelineWorkItem = f.result()\n    if not r_wi.is_failed:\n        assert wi == r_wi\n        assert not r_wi.is_failed\n        assert r_wi.is_ok\n        assert r_wi.num == 20\n        assert r_wi.pid == os.getpid()\n        print(f\"Work item completed successfully:\")\n        print(f\"  r_wi.num={r_wi.num}\")\n        print(f\"  r_wi.pid={r_wi.pid}\")\n    else:\n        if r_wi.exceptions is not None:\n            print(f\"Something did not go as planned:\")\n            for ex in r_wi.exceptions:\n                print(f\" ex={ex}\")\n    mpp.shutdown()\n    assert mpp.was_graceful_shutdown\n\nif __name__ == '__main__':\n    freeze_support()\n    main()\n```\n\n**Output:**\n\n```\nPipeline has 20 stages.\nWork item completed successfully:\n  r_wi.num=20\n  r_wi.pid=18068\n```\n\n### Dual-stage Producer/Consumer Example\n\n```\nimport os\nfrom multiprocessing import freeze_support\nimport concurrent.futures\nfrom atbu.mp_pipeline.mp_pipeline import (\n    MultiprocessingPipeline,\n    SubprocessPipelineStage,\n    PipelineWorkItem,\n    PipeConnectionIO,\n)\n\nclass ProducerConsumerWorkItem(PipelineWorkItem):\n    def __init__(self, demo_pipe_io_wrapper) -> None:\n        super().__init__(auto_copy_attr=False)\n        self.demo_pipe_io_wrapper = demo_pipe_io_wrapper\n        self.producer_data = None # What producer sent.\n        self.producer_bytes_written = None\n        self.consumer_data = None # What consumer received\n\n    def stage_complete(\n        self,\n        stage_num: int,  # pylint: disable=unused-argument\n        wi: \"PipelineWorkItem\",  # pylint: disable=unused-argument\n        ex: Exception,\n    ):\n        super().stage_complete(\n            stage_num=stage_num,\n            wi=wi,\n            ex=ex,\n        )\n        if not wi.is_failed:\n            if stage_num == 0:\n                self.producer_data = wi.producer_data\n                self.producer_bytes_written = wi.producer_bytes_written\n            elif stage_num == 1:\n                self.consumer_data = wi.consumer_data\n\n\nclass ProducerPipelineSubprocessStage(SubprocessPipelineStage):\n    def __init__(self) -> None:\n        super().__init__()\n\n    def is_for_stage(self, pwi: ProducerConsumerWorkItem) -> bool:\n        return True # Yes, we want to see all work items in this stage.\n\n    @property\n    def is_pipe_with_next_stage(self):\n        \"\"\"Return True to indicate we want this stage and the next one\n        to run in parallel, where this stage is the producer feeding a\n        pipeline-supplied pipe, and the next stage is consuming from that\n        same pipe (on the reader side).\n        \"\"\"\n        return True\n\n    def perform_stage_work(\n        self,\n        pwi: ProducerConsumerWorkItem,\n        **kwargs,\n    ):\n        try:\n            if not isinstance(pwi, ProducerConsumerWorkItem):\n                raise ValueError(\n                    f\"Producer: Pipeline gave us unexpected work item.\"\n                )\n            pwi.producer_data = os.urandom(10)\n            if pwi.demo_pipe_io_wrapper:\n                # PipeConnectionIO wraps the multiprocessing Pipe, providing\n                # an io.RawIOBase interface (with limitations... i.e., seek is\n                # not supported).\n                with PipeConnectionIO(pwi.pipe_conn, is_write=True) as pipe_io:\n                    pwi.producer_bytes_written = pipe_io.write(pwi.producer_data)\n            else:\n                # Just use the pipe connection directly.\n                pwi.pipe_conn.send_bytes(pwi.producer_data)\n                pwi.producer_bytes_written = len(pwi.producer_data)\n            return pwi\n        except Exception:\n            if not pwi.pipe_conn.closed:\n                pwi.pipe_conn.close()\n            raise\n\n\nclass ConsumerPipelineSubprocessStage(SubprocessPipelineStage):\n    def __init__(self) -> None:\n        super().__init__()\n\n    def is_for_stage(self, pwi: ProducerConsumerWorkItem) -> bool:\n        return True # Yes, we want to see all work items in this stage.\n\n    def perform_stage_work(\n        self,\n        pwi: ProducerConsumerWorkItem,\n        **kwargs,\n    ):\n        try:\n            if not isinstance(pwi, ProducerConsumerWorkItem):\n                raise ValueError(\n                    f\"Consumer: Pipeline gave us unexpected work item.\"\n                )\n            if pwi.demo_pipe_io_wrapper:\n                # PipeConnectionIO wraps the multiprocessing Pipe, providing\n                # an io.RawIOBase interface (with limitations... i.e., seek is\n                # not supported).\n                with PipeConnectionIO(pwi.pipe_conn, is_write=False) as pipe_io:\n                    pwi.consumer_data = pipe_io.read()\n            else:\n                # Just use the pipe connection directly.\n                pwi.consumer_data = pwi.pipe_conn.recv_bytes()\n            return pwi\n        except Exception:\n            if not pwi.pipe_conn.closed:\n                pwi.pipe_conn.close()\n            raise\n\ndef main():\n    mpp = MultiprocessingPipeline(\n        name=\"test_mp_producer_oncsoler\",\n        stages=[\n            ProducerPipelineSubprocessStage(),\n            ConsumerPipelineSubprocessStage()\n        ]\n    )\n    wil = [\n        ProducerConsumerWorkItem(demo_pipe_io_wrapper=True),\n        ProducerConsumerWorkItem(demo_pipe_io_wrapper=False)\n    ]\n    fut = [mpp.submit(wi) for wi in wil]\n    done, _ = concurrent.futures.wait(\n        fs=fut,\n        return_when=concurrent.futures.ALL_COMPLETED\n    )\n    assert len(done) == 2\n    for i, f in enumerate(done):\n        r_wi: ProducerConsumerWorkItem = f.result()\n        if not r_wi.is_failed:\n            assert r_wi.producer_bytes_written == 10\n            assert r_wi.producer_data == r_wi.consumer_data\n            print(f\"Success for #{i}:\")\n            print(f\"  {i}: num_bytes={r_wi.producer_bytes_written}\")\n            print(f\"  {i}: p_bytes={r_wi.producer_data.hex(' ')}\")\n            print(f\"  {i}: c_bytes={r_wi.consumer_data.hex(' ')}\")\n        else:\n            if r_wi.exceptions is not None:\n                print(f\"Something did not go as planned for #{i}:\")\n                for ex in r_wi.exceptions:\n                    print(f\"  {i}: Bad thing happened: {ex}\")\n    mpp.shutdown()\n    assert mpp.was_graceful_shutdown\n\nif __name__ == '__main__':\n    freeze_support()\n    main()\n```\n\n**Output:**\n\n```\nSuccess for #0:\n  0: num_bytes=10\n  0: p_bytes=76 d4 32 f0 4f 3f 31 30 19 00\n  0: c_bytes=76 d4 32 f0 4f 3f 31 30 19 00\nSuccess for #1:\n  1: num_bytes=10\n  1: p_bytes=34 d6 5c d0 be 82 62 c3 5d 61\n  1: c_bytes=34 d6 5c d0 be 82 62 c3 5d 61\n  ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AshleyT3/atbu-mp-pipeline",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atbu-mp-pipeline-pkg",
    "package_url": "https://pypi.org/project/atbu-mp-pipeline-pkg/",
    "platform": null,
    "project_url": "https://pypi.org/project/atbu-mp-pipeline-pkg/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AshleyT3/atbu-mp-pipeline/issues",
      "Homepage": "https://github.com/AshleyT3/atbu-mp-pipeline"
    },
    "release_url": "https://pypi.org/project/atbu-mp-pipeline-pkg/0.0.8/",
    "requires_dist": [
      "atbu-common-pkg (>=0.0.3)"
    ],
    "requires_python": ">=3.9",
    "summary": "ATBU atbu.mp_pipeline package, a multiprocessing work item pipeline.",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14594962,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "862cf5941387806053066a89f44f7a0c1b4adbed72cdecc10fe0c86d437b1568",
          "md5": "0dbd60f05ccc57e7f968e96e33aee63d",
          "sha256": "16c1a3393e36edf23700c3949c932b86af099a1eb0d794dfd81d0379aae03a63"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dbd60f05ccc57e7f968e96e33aee63d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 5899,
        "upload_time": "2022-06-09T04:48:34",
        "upload_time_iso_8601": "2022-06-09T04:48:34.821465Z",
        "url": "https://files.pythonhosted.org/packages/86/2c/f5941387806053066a89f44f7a0c1b4adbed72cdecc10fe0c86d437b1568/atbu_mp_pipeline_pkg-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05992a9df6ebeb8fc4c7b4cc80445f2eb1c514dadb0987d809497649b8368df6",
          "md5": "0683a3ce0a1f82e3a063d05812eb5c29",
          "sha256": "91b80298976c8d448532111cd536dc21ffd947f0e40595033155c88844361c10"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0683a3ce0a1f82e3a063d05812eb5c29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6025,
        "upload_time": "2022-06-09T04:48:37",
        "upload_time_iso_8601": "2022-06-09T04:48:37.204978Z",
        "url": "https://files.pythonhosted.org/packages/05/99/2a9df6ebeb8fc4c7b4cc80445f2eb1c514dadb0987d809497649b8368df6/atbu-mp-pipeline-pkg-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d01ce6592e2ad9e61a3afa86b2374a0ee8e75db341bdf745b49bc9873e08ad91",
          "md5": "4acf34d6164768450174cda9d3cb5bcf",
          "sha256": "29e4158194f426318560a39fed353657a2a0afe09e22f9eb6839ec2366d60303"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4acf34d6164768450174cda9d3cb5bcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19071,
        "upload_time": "2022-06-09T05:15:48",
        "upload_time_iso_8601": "2022-06-09T05:15:48.912810Z",
        "url": "https://files.pythonhosted.org/packages/d0/1c/e6592e2ad9e61a3afa86b2374a0ee8e75db341bdf745b49bc9873e08ad91/atbu_mp_pipeline_pkg-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff66f80da157a4730b5eae4bd142febe3c03c9e428717946c31cb48e9012e9fb",
          "md5": "3d5cce22ff5b84bf34518d6505ce9089",
          "sha256": "31352d86180a9873c26d17cdc33b71d726b469b2ad7846a3795ed692b1b0d986"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d5cce22ff5b84bf34518d6505ce9089",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 17950,
        "upload_time": "2022-06-09T05:15:50",
        "upload_time_iso_8601": "2022-06-09T05:15:50.905345Z",
        "url": "https://files.pythonhosted.org/packages/ff/66/f80da157a4730b5eae4bd142febe3c03c9e428717946c31cb48e9012e9fb/atbu-mp-pipeline-pkg-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56dc328fd535859eb3cad08c32b451c037c13ec7a3d98169b9125c1f350fef64",
          "md5": "818dc89a752ec49a6c2e2dfb7474eff5",
          "sha256": "40eb706c19e677bb62e5da78e270165e00e6cfef8b7c02c8d3b1f99465379545"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "818dc89a752ec49a6c2e2dfb7474eff5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19085,
        "upload_time": "2022-06-10T00:04:21",
        "upload_time_iso_8601": "2022-06-10T00:04:21.579388Z",
        "url": "https://files.pythonhosted.org/packages/56/dc/328fd535859eb3cad08c32b451c037c13ec7a3d98169b9125c1f350fef64/atbu_mp_pipeline_pkg-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd108602259ae20381306903394d86d78496470d78454766879463cccbd6826",
          "md5": "a88713ac147af0d9f55556a841bd4f1a",
          "sha256": "73af45b533d87967a5a69fd6ae2afb9a7c9980eba981752491dee03bc61abf43"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a88713ac147af0d9f55556a841bd4f1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 17950,
        "upload_time": "2022-06-10T00:04:22",
        "upload_time_iso_8601": "2022-06-10T00:04:22.685341Z",
        "url": "https://files.pythonhosted.org/packages/3f/d1/08602259ae20381306903394d86d78496470d78454766879463cccbd6826/atbu-mp-pipeline-pkg-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cee9bca04acf325bcae720779636ad5bd86067021d16ed52f42271921fed1ef",
          "md5": "53c8fbecce427247854746092432e1f9",
          "sha256": "94b7a6e0daac903f705d272ade4554593a80b56b5234e03602c33e7fe47a0567"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53c8fbecce427247854746092432e1f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 27330,
        "upload_time": "2022-06-12T00:46:02",
        "upload_time_iso_8601": "2022-06-12T00:46:02.385156Z",
        "url": "https://files.pythonhosted.org/packages/9c/ee/9bca04acf325bcae720779636ad5bd86067021d16ed52f42271921fed1ef/atbu_mp_pipeline_pkg-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdb0883204e294073e91b83002c7cec45d7e025303eb1cee7d53e1dc0332fd02",
          "md5": "e1808586484dbf8717a351bbc06d916f",
          "sha256": "e56269946a596da0af20fc1d93daf5e65ebd139a9b78690cbfe9e26c9168afc5"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e1808586484dbf8717a351bbc06d916f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 28647,
        "upload_time": "2022-06-12T00:46:04",
        "upload_time_iso_8601": "2022-06-12T00:46:04.817234Z",
        "url": "https://files.pythonhosted.org/packages/fd/b0/883204e294073e91b83002c7cec45d7e025303eb1cee7d53e1dc0332fd02/atbu-mp-pipeline-pkg-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b95a08025ea542af15f851717c0fc0a722d233c8cb8494a3e1c322a6bb14b73",
          "md5": "36a59ddf63ab604f7e803e02dbf1c52a",
          "sha256": "9900b92bbaf44322b3b10f09a600f70415493c31a80a245cbfaed12f3b184613"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36a59ddf63ab604f7e803e02dbf1c52a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 28098,
        "upload_time": "2022-06-13T09:58:58",
        "upload_time_iso_8601": "2022-06-13T09:58:58.692921Z",
        "url": "https://files.pythonhosted.org/packages/0b/95/a08025ea542af15f851717c0fc0a722d233c8cb8494a3e1c322a6bb14b73/atbu_mp_pipeline_pkg-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e20cea23e6b38c145ff38ed1dde00a70b8a42a8653059cfb6a0058ae44d2f782",
          "md5": "5fc328eec5ec1a69f92fd4234fa054aa",
          "sha256": "cfd5a9959dbd53f115673030f02c10aa60438727e1be7bf7c8d0f169b0232eef"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5fc328eec5ec1a69f92fd4234fa054aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29468,
        "upload_time": "2022-06-13T09:59:00",
        "upload_time_iso_8601": "2022-06-13T09:59:00.286962Z",
        "url": "https://files.pythonhosted.org/packages/e2/0c/ea23e6b38c145ff38ed1dde00a70b8a42a8653059cfb6a0058ae44d2f782/atbu-mp-pipeline-pkg-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe5e759be78ce24eef77d9ea1d44085d5d67228631771ac813db35fcc1ba0c13",
          "md5": "70419d500ae31cf5b7dd224211f0f943",
          "sha256": "f44fc82e9fbe60411b9bc7c6197ea3df11ad71046c93f72b273542057b45bf0d"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70419d500ae31cf5b7dd224211f0f943",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 28084,
        "upload_time": "2022-06-13T10:34:53",
        "upload_time_iso_8601": "2022-06-13T10:34:53.840434Z",
        "url": "https://files.pythonhosted.org/packages/fe/5e/759be78ce24eef77d9ea1d44085d5d67228631771ac813db35fcc1ba0c13/atbu_mp_pipeline_pkg-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3d7ecaa7a36010ae6c8b0699c3e9d697f699fde24adef806ea332463c982df0",
          "md5": "30efa6ce6e2fd5ba9666dfceeb59eb90",
          "sha256": "5838aa9d4d75e25647d6ae14994565d98cc56aacf6639031df8a38bfb54c6cb6"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "30efa6ce6e2fd5ba9666dfceeb59eb90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29456,
        "upload_time": "2022-06-13T10:34:55",
        "upload_time_iso_8601": "2022-06-13T10:34:55.635739Z",
        "url": "https://files.pythonhosted.org/packages/b3/d7/ecaa7a36010ae6c8b0699c3e9d697f699fde24adef806ea332463c982df0/atbu-mp-pipeline-pkg-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b689eb73fca3869d824f521ceda32886e5459de63c8149b2ad564fb4c8aa03e5",
          "md5": "18c2d9427c4eb6081f4b57745688416b",
          "sha256": "adda0db1525507955f7fd2d467898aa6019f79fbbe431b206f1dfc49b678d7ef"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18c2d9427c4eb6081f4b57745688416b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 28960,
        "upload_time": "2022-06-21T03:12:21",
        "upload_time_iso_8601": "2022-06-21T03:12:21.552495Z",
        "url": "https://files.pythonhosted.org/packages/b6/89/eb73fca3869d824f521ceda32886e5459de63c8149b2ad564fb4c8aa03e5/atbu_mp_pipeline_pkg-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a832c18be297e51a8cdae2aadc762066ec52372e339f4cdb507e0804423406a9",
          "md5": "6b0ef6e34ae719f072bb0eb02625b68d",
          "sha256": "9ed64997abd337adac5d03e94b59721b78355cac7d294fd157345b9087b2a1cb"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6b0ef6e34ae719f072bb0eb02625b68d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29808,
        "upload_time": "2022-06-21T03:12:23",
        "upload_time_iso_8601": "2022-06-21T03:12:23.218959Z",
        "url": "https://files.pythonhosted.org/packages/a8/32/c18be297e51a8cdae2aadc762066ec52372e339f4cdb507e0804423406a9/atbu-mp-pipeline-pkg-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cde277ed1400e95a561bf18d6a75198a7817a79ad1e70820b3145afd277c7e16",
          "md5": "b56c00d23b39345706f2fb8c6e74aea4",
          "sha256": "0714d148f8f5daff9dc8cdb08015ce75ce418262bd0afcc267914c85ef3fab8d"
        },
        "downloads": -1,
        "filename": "atbu_mp_pipeline_pkg-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b56c00d23b39345706f2fb8c6e74aea4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 28985,
        "upload_time": "2022-07-29T22:07:44",
        "upload_time_iso_8601": "2022-07-29T22:07:44.181803Z",
        "url": "https://files.pythonhosted.org/packages/cd/e2/77ed1400e95a561bf18d6a75198a7817a79ad1e70820b3145afd277c7e16/atbu_mp_pipeline_pkg-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4216c73506ece809ee38ba44535770057a48a57fd613c2db04aab0210d5ac2e",
          "md5": "e7db984d40e9854fce086e9b7b4d7a54",
          "sha256": "9338a14c3f552de4ba6f9ae14340b7b6afd38a5a33fffb0efe17b3dd11f9ad24"
        },
        "downloads": -1,
        "filename": "atbu-mp-pipeline-pkg-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e7db984d40e9854fce086e9b7b4d7a54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29829,
        "upload_time": "2022-07-29T22:07:45",
        "upload_time_iso_8601": "2022-07-29T22:07:45.586543Z",
        "url": "https://files.pythonhosted.org/packages/c4/21/6c73506ece809ee38ba44535770057a48a57fd613c2db04aab0210d5ac2e/atbu-mp-pipeline-pkg-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cde277ed1400e95a561bf18d6a75198a7817a79ad1e70820b3145afd277c7e16",
        "md5": "b56c00d23b39345706f2fb8c6e74aea4",
        "sha256": "0714d148f8f5daff9dc8cdb08015ce75ce418262bd0afcc267914c85ef3fab8d"
      },
      "downloads": -1,
      "filename": "atbu_mp_pipeline_pkg-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b56c00d23b39345706f2fb8c6e74aea4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 28985,
      "upload_time": "2022-07-29T22:07:44",
      "upload_time_iso_8601": "2022-07-29T22:07:44.181803Z",
      "url": "https://files.pythonhosted.org/packages/cd/e2/77ed1400e95a561bf18d6a75198a7817a79ad1e70820b3145afd277c7e16/atbu_mp_pipeline_pkg-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4216c73506ece809ee38ba44535770057a48a57fd613c2db04aab0210d5ac2e",
        "md5": "e7db984d40e9854fce086e9b7b4d7a54",
        "sha256": "9338a14c3f552de4ba6f9ae14340b7b6afd38a5a33fffb0efe17b3dd11f9ad24"
      },
      "downloads": -1,
      "filename": "atbu-mp-pipeline-pkg-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "e7db984d40e9854fce086e9b7b4d7a54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 29829,
      "upload_time": "2022-07-29T22:07:45",
      "upload_time_iso_8601": "2022-07-29T22:07:45.586543Z",
      "url": "https://files.pythonhosted.org/packages/c4/21/6c73506ece809ee38ba44535770057a48a57fd613c2db04aab0210d5ac2e/atbu-mp-pipeline-pkg-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}