{
  "info": {
    "author": "LMNT, Inc.",
    "author_email": "haste@lmnt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<div align=\"center\">\n  <img src=\"https://lmnt.com/assets/haste-logo_social_media.png\">\n</div>\n\n--------------------------------------------------------------------------------\n[![GitHub release (latest SemVer including pre-releases)](https://img.shields.io/github/v/release/lmnt-com/haste?include_prereleases)](https://github.com/lmnt-com/haste/releases) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1hzYhcyvbXYMAUwa3515BszSkhx1UUFSt) [![GitHub](https://img.shields.io/github/license/lmnt-com/haste)](LICENSE)\n\nHaste is a CUDA implementation of fused RNN layers with built-in [DropConnect](http://proceedings.mlr.press/v28/wan13.html) and [Zoneout](https://arxiv.org/abs/1606.01305) regularization. These layers are exposed through C++ and Python APIs for easy integration into your own projects or machine learning frameworks.\n\nWhich RNN types are supported?\n- [GRU](https://en.wikipedia.org/wiki/Gated_recurrent_unit)\n- [IndRNN](http://arxiv.org/abs/1803.04831)\n- [LSTM](https://en.wikipedia.org/wiki/Long_short-term_memory)\n- [Layer Normalized GRU](https://arxiv.org/abs/1607.06450)\n- [Layer Normalized LSTM](https://arxiv.org/abs/1607.06450)\n\nWhat's included in this project?\n- a standalone C++ API (`libhaste`)\n- a TensorFlow Python API (`haste_tf`)\n- a PyTorch API (`haste_pytorch`)\n- examples for writing your own custom C++ inference / training code using `libhaste`\n- benchmarking programs to evaluate the performance of RNN implementations\n\nFor questions or feedback about Haste, please open an issue on GitHub or send us an email at [haste@lmnt.com](mailto:haste@lmnt.com).\n\n## Install\nHere's what you'll need to get started:\n- a [CUDA Compute Capability](https://developer.nvidia.com/cuda-gpus) 3.7+ GPU (required)\n- [CUDA Toolkit](https://developer.nvidia.com/cuda-toolkit) 10.0+ (required)\n- [TensorFlow GPU](https://www.tensorflow.org/install/gpu) 1.14+ or 2.0+ for TensorFlow integration (optional)\n- [PyTorch](https://pytorch.org) 1.3+ for PyTorch integration (optional)\n- [Eigen 3](http://eigen.tuxfamily.org/) to build the C++ examples (optional)\n- [cuDNN Developer Library](https://developer.nvidia.com/rdp/cudnn-archive) to build benchmarking programs (optional)\n\nOnce you have the prerequisites, you can install with pip or by building the source code.\n\n### Using pip\n```\npip install haste_pytorch\npip install haste_tf\n```\n\n### Building from source\n```\nmake               # Build everything\nmake haste         # ;) Build C++ API\nmake haste_tf      # Build TensorFlow API\nmake haste_pytorch # Build PyTorch API\nmake examples\nmake benchmarks\n```\n\nIf you built the TensorFlow or PyTorch API, install it with `pip`:\n```\npip install haste_tf-*.whl\npip install haste_pytorch-*.whl\n```\n\nIf the CUDA Toolkit that you're building against is not in `/usr/local/cuda`, you must specify the\n`$CUDA_HOME` environment variable before running make:\n```\nCUDA_HOME=/usr/local/cuda-10.2 make\n```\n\n## Performance\nOur LSTM and GRU benchmarks indicate that Haste has the fastest publicly available implementation for nearly all problem sizes. The following charts show our LSTM results, but the GRU results are qualitatively similar.\n<table>\n  <tr><td><img src=\"https://lmnt.com/assets/haste/benchmark/report_n=16_c=128.png\"></td><td><img src=\"https://lmnt.com/assets/haste/benchmark/report_n=32_c=256.png\"></td></tr>\n  <tr></tr>\n  <tr><td><img src=\"https://lmnt.com/assets/haste/benchmark/report_n=64_c=128.png\"></td><td><img src=\"https://lmnt.com/assets/haste/benchmark/report_n=128_c=256.png\"></td></tr>\n</table>\n\nHere is our complete LSTM benchmark result grid:\n<br>\n[`N=1 C=64`](https://lmnt.com/assets/haste/benchmark/report_n=1_c=64.png)\n[`N=1 C=128`](https://lmnt.com/assets/haste/benchmark/report_n=1_c=128.png)\n[`N=1 C=256`](https://lmnt.com/assets/haste/benchmark/report_n=1_c=256.png)\n[`N=1 C=512`](https://lmnt.com/assets/haste/benchmark/report_n=1_c=512.png)\n<br>\n[`N=32 C=64`](https://lmnt.com/assets/haste/benchmark/report_n=32_c=64.png)\n[`N=32 C=128`](https://lmnt.com/assets/haste/benchmark/report_n=32_c=128.png)\n[`N=32 C=256`](https://lmnt.com/assets/haste/benchmark/report_n=32_c=256.png)\n[`N=32 C=512`](https://lmnt.com/assets/haste/benchmark/report_n=32_c=512.png)\n<br>\n[`N=64 C=64`](https://lmnt.com/assets/haste/benchmark/report_n=64_c=64.png)\n[`N=64 C=128`](https://lmnt.com/assets/haste/benchmark/report_n=64_c=128.png)\n[`N=64 C=256`](https://lmnt.com/assets/haste/benchmark/report_n=64_c=256.png)\n[`N=64 C=512`](https://lmnt.com/assets/haste/benchmark/report_n=64_c=512.png)\n<br>\n[`N=128 C=64`](https://lmnt.com/assets/haste/benchmark/report_n=128_c=64.png)\n[`N=128 C=128`](https://lmnt.com/assets/haste/benchmark/report_n=128_c=128.png)\n[`N=128 C=256`](https://lmnt.com/assets/haste/benchmark/report_n=128_c=256.png)\n[`N=128 C=512`](https://lmnt.com/assets/haste/benchmark/report_n=128_c=512.png)\n\n## Documentation\n### TensorFlow API\n```python\nimport haste_tf as haste\n\ngru_layer = haste.GRU(num_units=256, direction='bidirectional', zoneout=0.1, dropout=0.05)\nindrnn_layer = haste.IndRNN(num_units=256, direction='bidirectional', zoneout=0.1)\nlstm_layer = haste.LSTM(num_units=256, direction='bidirectional', zoneout=0.1, dropout=0.05)\nnorm_gru_layer = haste.LayerNormGRU(num_units=256, direction='bidirectional', zoneout=0.1, dropout=0.05)\nnorm_lstm_layer = haste.LayerNormLSTM(num_units=256, direction='bidirectional', zoneout=0.1, dropout=0.05)\n\n# `x` is a tensor with shape [N,T,C]\nx = tf.random.normal([5, 25, 128])\n\ny, state = gru_layer(x, training=True)\ny, state = indrnn_layer(x, training=True)\ny, state = lstm_layer(x, training=True)\ny, state = norm_gru_layer(x, training=True)\ny, state = norm_lstm_layer(x, training=True)\n```\n\nThe TensorFlow Python API is documented in [`docs/tf/haste_tf.md`](docs/tf/haste_tf.md).\n\n### PyTorch API\n```python\nimport torch\nimport haste_pytorch as haste\n\ngru_layer = haste.GRU(input_size=128, hidden_size=256, zoneout=0.1, dropout=0.05)\nindrnn_layer = haste.IndRNN(input_size=128, hidden_size=256, zoneout=0.1)\nlstm_layer = haste.LSTM(input_size=128, hidden_size=256, zoneout=0.1, dropout=0.05)\nnorm_gru_layer = haste.LayerNormGRU(input_size=128, hidden_size=256, zoneout=0.1, dropout=0.05)\nnorm_lstm_layer = haste.LayerNormLSTM(input_size=128, hidden_size=256, zoneout=0.1, dropout=0.05)\n\ngru_layer.cuda()\nindrnn_layer.cuda()\nlstm_layer.cuda()\nnorm_gru_layer.cuda()\nnorm_lstm_layer.cuda()\n\n# `x` is a CUDA tensor with shape [T,N,C]\nx = torch.rand([25, 5, 128]).cuda()\n\ny, state = gru_layer(x)\ny, state = indrnn_layer(x)\ny, state = lstm_layer(x)\ny, state = norm_gru_layer(x)\ny, state = norm_lstm_layer(x)\n```\n\nThe PyTorch API is documented in [`docs/pytorch/haste_pytorch.md`](docs/pytorch/haste_pytorch.md).\n\n### C++ API\nThe C++ API is documented in [`lib/haste/*.h`](lib/haste/) and there are code samples in [`examples/`](examples/).\n\n## Code layout\n- [`benchmarks/`](benchmarks): programs to evaluate performance of RNN implementations\n- [`docs/tf/`](docs/tf): API reference documentation for `haste_tf`\n- [`docs/pytorch/`](docs/pytorch): API reference documentation for `haste_pytorch`\n- [`examples/`](examples): examples for writing your own C++ inference / training code using `libhaste`\n- [`frameworks/tf/`](frameworks/tf): TensorFlow Python API and custom op code\n- [`frameworks/pytorch/`](frameworks/pytorch): PyTorch API and custom op code\n- [`lib/`](lib): CUDA kernels and C++ API\n- [`validation/`](validation): scripts to validate output and gradients of RNN layers\n\n## Implementation notes\n- the GRU implementation is based on `1406.1078v1` (same as cuDNN) rather than `1406.1078v3`\n- Zoneout on LSTM cells is applied to the hidden state only, and not the cell state\n- the layer normalized LSTM implementation uses [these equations](https://github.com/lmnt-com/haste/issues/1)\n\n## References\n1. Hochreiter, S., & Schmidhuber, J. (1997). Long Short-Term Memory. _Neural Computation_, _9_(8), 1735â€“1780. https://doi.org/10.1162/neco.1997.9.8.1735\n1. Cho, K., van Merrienboer, B., Gulcehre, C., Bahdanau, D., Bougares, F., Schwenk, H., & Bengio, Y. (2014). Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation. _arXiv:1406.1078 [cs, stat]_. http://arxiv.org/abs/1406.1078.\n1. Wan, L., Zeiler, M., Zhang, S., Cun, Y. L., & Fergus, R. (2013). Regularization of Neural Networks using DropConnect. In _International Conference on Machine Learning_ (pp. 1058â€“1066). Presented at the International Conference on Machine Learning. http://proceedings.mlr.press/v28/wan13.html.\n1. Krueger, D., Maharaj, T., KramÃ¡r, J., Pezeshki, M., Ballas, N., Ke, N. R., et al. (2017). Zoneout: Regularizing RNNs by Randomly Preserving Hidden Activations. _arXiv:1606.01305 [cs]_. http://arxiv.org/abs/1606.01305.\n1. Ba, J., Kiros, J.R., & Hinton, G.E. (2016). Layer Normalization. _arXiv:1607.06450 [cs, stat]_. https://arxiv.org/abs/1607.06450.\n1. Li, S., Li, W., Cook, C., Zhu, C., & Gao, Y. (2018). Independently Recurrent Neural Network (IndRNN): Building A Longer and Deeper RNN. _arXiv:1803.04831 [cs]_. http://arxiv.org/abs/1803.04831.\n\n## Citing this work\nTo cite this work, please use the following BibTeX entry:\n```\n@misc{haste2020,\n  title  = {Haste: a fast, simple, and open RNN library},\n  author = {Sharvil Nanavati},\n  year   = 2020,\n  month  = \"Jan\",\n  howpublished = {\\url{https://github.com/lmnt-com/haste/}},\n}\n```\n\n## License\n[Apache 2.0](LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://haste.lmnt.com",
    "keywords": "pytorch machine learning rnn lstm gru custom op",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "haste-pytorch-cpu",
    "package_url": "https://pypi.org/project/haste-pytorch-cpu/",
    "platform": "",
    "project_url": "https://pypi.org/project/haste-pytorch-cpu/",
    "project_urls": {
      "Homepage": "https://haste.lmnt.com"
    },
    "release_url": "https://pypi.org/project/haste-pytorch-cpu/0.5.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Haste: a fast, simple, and open RNN library. Version that install without cuda",
    "version": "0.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8368511,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3de821ed4f154537cd5b70db98b8ff5b4ddb6db727c4edff402d1901989d7477",
          "md5": "a6288648df27e9453be615a0064c3712",
          "sha256": "98ac79ef71c0b1e77e3418eac5c167f59fb61820bd6b8130cfc762032d026d57"
        },
        "downloads": -1,
        "filename": "haste_pytorch_cpu-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6288648df27e9453be615a0064c3712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48251,
        "upload_time": "2020-10-08T02:33:13",
        "upload_time_iso_8601": "2020-10-08T02:33:13.520702Z",
        "url": "https://files.pythonhosted.org/packages/3d/e8/21ed4f154537cd5b70db98b8ff5b4ddb6db727c4edff402d1901989d7477/haste_pytorch_cpu-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee5d21959e2bf705e2a5dca54a9174e60db6b467a71ce66da14fd95b4a2a917c",
          "md5": "009f55145aad1060dc3b553541465d1d",
          "sha256": "a112009d10f1e88c1d15f7b373e532c43268b1072f156075c4f6c1419d94abe3"
        },
        "downloads": -1,
        "filename": "haste_pytorch_cpu-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "009f55145aad1060dc3b553541465d1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48305,
        "upload_time": "2020-10-08T02:40:08",
        "upload_time_iso_8601": "2020-10-08T02:40:08.377807Z",
        "url": "https://files.pythonhosted.org/packages/ee/5d/21959e2bf705e2a5dca54a9174e60db6b467a71ce66da14fd95b4a2a917c/haste_pytorch_cpu-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4dd55a116bac0f686272cab02c2e995027335612a8fadd57ec91b0faeabba99",
          "md5": "8a952b0e4d89506f2d5e2e5a2f31dc18",
          "sha256": "c44181b74f69aec8ad42d60f589793ac27c398494797ed899da6cfc0dff54978"
        },
        "downloads": -1,
        "filename": "haste_pytorch_cpu-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a952b0e4d89506f2d5e2e5a2f31dc18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48267,
        "upload_time": "2020-10-08T02:41:48",
        "upload_time_iso_8601": "2020-10-08T02:41:48.862307Z",
        "url": "https://files.pythonhosted.org/packages/d4/dd/55a116bac0f686272cab02c2e995027335612a8fadd57ec91b0faeabba99/haste_pytorch_cpu-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dae7d30eca3f6c974f58b86f88d755d28d269210f00412b8cb7eb1d71316cba2",
          "md5": "ce3f6c9218501ec197fffbd40a899f0c",
          "sha256": "8d4ecc4c67605f45fcd83bd46d80dbfad35744f5582c8801c4234b65d3c08e24"
        },
        "downloads": -1,
        "filename": "haste_pytorch_cpu-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ce3f6c9218501ec197fffbd40a899f0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48297,
        "upload_time": "2020-10-08T15:02:39",
        "upload_time_iso_8601": "2020-10-08T15:02:39.831113Z",
        "url": "https://files.pythonhosted.org/packages/da/e7/d30eca3f6c974f58b86f88d755d28d269210f00412b8cb7eb1d71316cba2/haste_pytorch_cpu-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dae7d30eca3f6c974f58b86f88d755d28d269210f00412b8cb7eb1d71316cba2",
        "md5": "ce3f6c9218501ec197fffbd40a899f0c",
        "sha256": "8d4ecc4c67605f45fcd83bd46d80dbfad35744f5582c8801c4234b65d3c08e24"
      },
      "downloads": -1,
      "filename": "haste_pytorch_cpu-0.5.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ce3f6c9218501ec197fffbd40a899f0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48297,
      "upload_time": "2020-10-08T15:02:39",
      "upload_time_iso_8601": "2020-10-08T15:02:39.831113Z",
      "url": "https://files.pythonhosted.org/packages/da/e7/d30eca3f6c974f58b86f88d755d28d269210f00412b8cb7eb1d71316cba2/haste_pytorch_cpu-0.5.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}