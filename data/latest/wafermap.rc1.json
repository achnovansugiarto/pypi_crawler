{
  "info": {
    "author": "Sotiris Thomas",
    "author_email": "sothomas88@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Wafermap\n\n\n<p align=\"center\">\n<a href=\"https://pypi.python.org/pypi/wafermap\">\n    <img src=\"https://img.shields.io/pypi/v/wafermap.svg\"\n        alt = \"Release Status\">\n</a>\n\n<a href=\"https://github.com/cap1tan/wafermap/actions\">\n    <img src=\"https://github.com/cap1tan/wafermap/actions/workflows/release.yml/badge.svg?branch=release\" alt=\"CI Status\">\n</a>\n\n<!-- <a href=\"https://wafermap.readthedocs.io/en/latest/?badge=latest\">\n    <img src=\"https://readthedocs.org/projects/wafermap/badge/?version=latest\" alt=\"Documentation Status\">\n</a> -->\n\n</p>\n\n\nA python package to plot maps of semiconductor wafers.\n\n\n* Free software: MIT\n\n\n## Features\n\n* Circular wafers with arbitrary notch orientations.\n* Edge-exclusion and grids with optional margin.\n* Hover-able points, vectors and images.\n* Tooltips with embeddable images.\n* Export zoom-able maps to HTML.\n* Toggle layers on/off individually.\n* Export to png with selenium, geckodriver and Mozilla\n\n\n## Examples\n\nSave the [demo html](examples/test_wafermap_example.html) file and open in a browser for the scrollable/zoomable version.\n\nStatic png image:\n\n![Example_wafermap](examples/test_wafermap_example.png)\n\n\n## Installation\n\nTo install Wafermap, run this command in your\nterminal:\n\n``` console\n$ pip install wafermap\n```\n\nThis is the preferred method to install Wafermap, as it will always install the most recent stable release.\n\nIf you don't have [pip][] installed, this [Python installation guide][]\ncan guide you through the process.\n\n### From source\n\nThe source for Wafermap can be downloaded from\nthe [Github repo][].\n\nYou can clone the public repository:\n\n``` console\n$ git clone git://github.com/cap1tan/wafermap\n```\n\n\n  [pip]: https://pip.pypa.io\n  [Python installation guide]: http://docs.python-guide.org/en/latest/starting/installation/\n  [Github repo]: https://github.com/%7B%7B%20cookiecutter.github_username%20%7D%7D/%7B%7B%20cookiecutter.project_slug%20%7D%7D\n\n\n## Usage\n\nTo use Wafermap in a project\n\n```python\n    import wafermap\n```\n\nFirst let's define a Wafermap:\n```python\nwm = wafermap.WaferMap(wafer_radius=100e-3,             # all length dimensions in meters\n                       cell_size=(10e-3, 20e-3),        # (sizeX, sizeY)\n                       cell_margin=(8e-3, 15e-3),       # distance between cell borders (x, y)\n                       grid_offset=(-2.05e-3, -4.1e-3), # grid offset in (x, y)\n                       edge_exclusion=2.2e-3,           # margin from the wafer edge where a red edge exclusion ring is drawn\n                       coverage='full',                 # 'full': will cover wafer with cells, partial cells allowed\n                                                        # 'inner': only full cells allowed\n                       notch_orientation=270)           # angle of notch in degrees. 270 corresponds to a notch at the bottom\n```\n\nTo add an image at a specific cell/relative cell coordinates simply:\n```python\nwm.add_image(image_source_file=\"inspection1.jpg\",\n             cell=(1, 0),                               # (cell_index_x, cell_index_y)\n             offset=(2.0e-3, 2.0e-3))                   # relative coordinate of the image within the cell\n```\n\nAdding vectors is just as easy. Just define cell and \\[(start_rel_coordinates), (end_rel_coordinates)\\]:\n```python\nvectors = [\n            ((3, 0), [(0, 0), (1e-3, 1e-3)]),\n            ((3, 0), [(1e-3, 0), (-5e-3, 5e-3)]),\n            ((3, 0), [(0, 1e-3), (10e-3, -10e-3)]),\n            ((3, 0), [(1e-3, 1e-3), (-20e-3, -20e-3)]),\n            ]\ncolors = ['green', 'red', 'blue', 'black']\nfor color, (cell, vector) in zip(colors, vectors):\n    wm.add_vector(vector_points=vector, cell=cell, vector_style={'color': color}, root_style={'radius': 1, 'color': color})\n```\n\nLet's throw in some points in a normal distribution for good measure too:\n```python\n# add 50 points per cell, in a random distribution\nimport random as rnd\ncell_size = (10e-3, 20e-3)\ncell_points = [(cell, [(rnd.gauss(cell_size[1]/2, cell_size[1]/6), rnd.gauss(cell_size[0]/2, cell_size[0]/6)) for _ in range(50)]) for cell in wm.cell_map.keys()]\nfor cell, cell_points_ in cell_points:\n    for cell_point in cell_points_:\n        wm.add_point(cell=cell, offset=cell_point)\n```\n\nFinally, nothing would matter if we couldn't see the result:\n```python\n# save to html\nwm.save_html(f\"wafermap.html\")\n\n# save to png (Mozilla must be installed)\nwm.save_png(f\"wafermap.png\")\n```\n\n\n## Dependencies\n\n- Folium\n- branca\n- Pillow\n- Optional for exporting to .png images: selenium, geckodriver and Mozilla browser installed.\n\n\n## Contributing\n\nContributions are welcome, and they are greatly appreciated! Every little bit\nhelps, and credit will always be given.\n\nYou can contribute in many ways:\n\n### Types of Contributions\n\n#### Report Bugs\n\nReport bugs at https://github.com/cap1tan/wafermap/issues.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting.\n* Detailed steps to reproduce the bug.\n\n#### Fix Bugs\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help\nwanted\" is open to whoever wants to implement it.\n\n#### Implement Features\n\nLook through the GitHub issues for features. Anything tagged with \"enhancement\"\nand \"help wanted\" is open to whoever wants to implement it.\n\n#### Write Documentation\n\nWafermap could always use more documentation, whether as part of the\nofficial Wafermap docs, in docstrings, or even on the web in blog posts,\narticles, and such.\n\n#### Submit Feedback\n\nThe best way to send feedback is to file an issue at https://github.com/cap1tan/wafermap/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions\n  are welcome :)\n\n### Get Started!\n\nReady to contribute? Here's how to set up `wafermap` for local development.\n\n1. Fork the `wafermap` repo on GitHub.\n2. Clone your fork locally\n\n```\n    $ git clone git@github.com:your_name_here/wafermap.git\n```\n\n3. Ensure [poetry](https://python-poetry.org/docs/) is installed.\n4. Install dependencies and start your virtualenv:\n\n```\n    $ poetry install -E test -E doc -E dev\n```\n\n5. Create a branch for local development:\n\n```\n    $ git checkout -b name-of-your-bugfix-or-feature\n```\n\n   Now you can make your changes locally.\n\n6. When you're done making changes, check that your changes pass the\n   tests, including testing other Python versions, with tox:\n\n```\n    $ tox\n```\n\n7. Commit your changes and push your branch to GitHub:\n\n```\n    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n```\n\n8. Submit a pull request through the GitHub website.\n\n### Pull Request Guidelines\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n1. The pull request should include tests.\n2. If the pull request adds functionality, the docs should be updated. Put\n   your new functionality into a function with a docstring, and add the\n   feature to the list in README.md.\n3. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check\n   https://github.com/cap1tan/wafermap/actions\n   and make sure that the tests pass for all supported Python versions.\n\n### Tips\n```\n    $ python -m unittest tests.test_wafermap\n```\nTo run a subset of tests.\n\n\n### Deploying\n\nA reminder for the maintainers on how to deploy.\nMake sure all your changes are committed (including an entry in HISTORY.md).\nThen run:\n\n```\n$ poetry patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n```\n\nGithub Actions will then deploy to PyPI if tests pass.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cap1tan/wafermap",
    "keywords": "wafer,semiconductor,plot,overlay,IC",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wafermap",
    "package_url": "https://pypi.org/project/wafermap/",
    "platform": "",
    "project_url": "https://pypi.org/project/wafermap/",
    "project_urls": {
      "Homepage": "https://github.com/cap1tan/wafermap"
    },
    "release_url": "https://pypi.org/project/wafermap/0.1.0/",
    "requires_dist": [
      "Pillow (>=8.4.0,<9.0.0)",
      "black (>=20.8b1,<21.0); extra == \"test\"",
      "branca (>=0.4.2,<0.5.0)",
      "flake8 (>=3.8.4,<4.0.0); extra == \"test\"",
      "flake8-docstrings (>=1.6.0,<2.0.0); extra == \"test\"",
      "folium (>=0.12.1,<0.13.0)",
      "isort (>=5.6.4,<6.0.0); extra == \"test\"",
      "numpy (>=1.21.3,<2.0.0)",
      "pip (>=20.3.1,<21.0.0); extra == \"dev\"",
      "pre-commit (>=2.12.0,<3.0.0); extra == \"dev\"",
      "pytest (>=6.1.2,<7.0.0); extra == \"test\"",
      "pytest-cov (>=2.10.1,<3.0.0); extra == \"test\"",
      "selenium (==4.0.0); extra == \"test\" or extra == \"with_png\"",
      "toml (>=0.10.2,<0.11.0); extra == \"dev\"",
      "tox (>=3.20.1,<4.0.0); extra == \"dev\"",
      "twine (>=3.3.0,<4.0.0); extra == \"dev\"",
      "virtualenv (>=20.2.2,<21.0.0); extra == \"dev\""
    ],
    "requires_python": ">=3.7,<3.11",
    "summary": "A python package to plot maps of semiconductor wafers..",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11920297,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa7a2fa1b8f25e229c1ae27a2920ed29364a80025c5797bc4b6db4e7cfc95ee0",
          "md5": "7288fe82286771b49c1cffa0d98f24b7",
          "sha256": "b9b3f54a7803680768ab3a7a3c5bbd798272901e77c3f5042de04516c9376811"
        },
        "downloads": -1,
        "filename": "wafermap-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7288fe82286771b49c1cffa0d98f24b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 12875,
        "upload_time": "2021-11-04T00:37:01",
        "upload_time_iso_8601": "2021-11-04T00:37:01.133636Z",
        "url": "https://files.pythonhosted.org/packages/aa/7a/2fa1b8f25e229c1ae27a2920ed29364a80025c5797bc4b6db4e7cfc95ee0/wafermap-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "543f9448b292d3d27a3a217231f91665f36560aafdea08eb8f7a41633f600ca7",
          "md5": "63c6ab55b0f6c40d155ef981d3c617b7",
          "sha256": "827c2abdb75facad7fa6ab1b54c29866cd832651309e2a33645414a598037929"
        },
        "downloads": -1,
        "filename": "wafermap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63c6ab55b0f6c40d155ef981d3c617b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 709582,
        "upload_time": "2021-11-04T00:37:03",
        "upload_time_iso_8601": "2021-11-04T00:37:03.247973Z",
        "url": "https://files.pythonhosted.org/packages/54/3f/9448b292d3d27a3a217231f91665f36560aafdea08eb8f7a41633f600ca7/wafermap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa7a2fa1b8f25e229c1ae27a2920ed29364a80025c5797bc4b6db4e7cfc95ee0",
        "md5": "7288fe82286771b49c1cffa0d98f24b7",
        "sha256": "b9b3f54a7803680768ab3a7a3c5bbd798272901e77c3f5042de04516c9376811"
      },
      "downloads": -1,
      "filename": "wafermap-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7288fe82286771b49c1cffa0d98f24b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<3.11",
      "size": 12875,
      "upload_time": "2021-11-04T00:37:01",
      "upload_time_iso_8601": "2021-11-04T00:37:01.133636Z",
      "url": "https://files.pythonhosted.org/packages/aa/7a/2fa1b8f25e229c1ae27a2920ed29364a80025c5797bc4b6db4e7cfc95ee0/wafermap-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "543f9448b292d3d27a3a217231f91665f36560aafdea08eb8f7a41633f600ca7",
        "md5": "63c6ab55b0f6c40d155ef981d3c617b7",
        "sha256": "827c2abdb75facad7fa6ab1b54c29866cd832651309e2a33645414a598037929"
      },
      "downloads": -1,
      "filename": "wafermap-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "63c6ab55b0f6c40d155ef981d3c617b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<3.11",
      "size": 709582,
      "upload_time": "2021-11-04T00:37:03",
      "upload_time_iso_8601": "2021-11-04T00:37:03.247973Z",
      "url": "https://files.pythonhosted.org/packages/54/3f/9448b292d3d27a3a217231f91665f36560aafdea08eb8f7a41633f600ca7/wafermap-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}