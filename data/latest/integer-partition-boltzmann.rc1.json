{
  "info": {
    "author": "Dániel Juhász",
    "author_email": "juhdanad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Integer Partition Boltzmann calculator\n\n## Goal\n\nThis package contains functions to calculate statistical properties of integer partitions, when the distribution of the partitions follows the Boltzmann distribution. You will need numpy to use it. It optionally works with sympy (for symbolic results) and numba (for faster calculation). This package aims to be efficient, with each method being az most quadratic in running time and linear in memory consumption (calculated with the input array length).\n\n## Theory\n\nAn [integer partition](https://en.wikipedia.org/wiki/Partition_(number_theory)) is a way to write a positive integer as a sum of positive integers. In an other sense, it is a way we can partiton a set if the elements are indistinguishable.\n\nFor a given positive integer N we are able to list all of its partitions. For example, the partitions of 4 are:\n * 1 + 1 + 1 + 1\n * 1 + 1 + 2\n * 2 + 2\n * 1 + 3\n * 4\n\nThis package treats integer partitions as set partitions, so for example the integer partition 4=2+2 means that we had an input set of size 4, and we took a partition of that: two subsets, each having size 2.\n\nThe [Boltzmann distribution](https://en.wikipedia.org/wiki/Boltzmann_distribution) is a probability distribution used in statistical physics. It assigns a probability to each state based on its energy. This package assumes that the energy of a partition is the sum of the subsets' energies, and that a subset's energy only depends on its size. Then we have some `E_i` energy values, where i is the subset size. In the Boltzmann distribution we also have a temperature parameter `beta`. The probability of a partition is then proportional to `exp(-beta*E)`, where `E` is the energy of the partition.\n\n## Weights\n\nWe can unify the `E_i` and `beta` constants. To do that, we introduce the weights: `w_i=exp(-beta*E_i)`. Then the probability of a partition is proportional to the product of the weights of its addends.\n\n`w_1` should always be positive, to avoid division by zero.\n\n## Usage\n\nFirst you have to create a calculator object.\n`import integer_partition_boltzmann`\n * `integer_partition_boltzmann.calculator.for_sympy()` returns a calculator object that you can use for symbolic calculations.\n * `integer_partition_boltzmann.calculator.for_numba()` returns a calculator object that contains functions compiled by the numba library.\n\nNow suppose that you have a calculator object `calc` for sympy.\nAlso, suppose that you executed `w0,w1,w2,w3=sympy.symbols(\"w0 w1 w2 w3\")` to get the weights. `w0` will remain unused.\n\n### Partition function\n\nOne important aspect of the Boltzmann distribution is the partition function.\n\n```\n>>> calc.get_partition_functions(numpy.array([w0,w1,w2,w3]))\narray([1, w1, w1**2 + w2, w1**3 + w1*w2 + w3], dtype=object)\n```\n\n * We can ignore the 0th element.\n * The first element is the partition function for input array size 1. It is just `w1`, as the only partition is 1.\n * The second element is for the set with two elements. The corresponding partitions are 2=1+1 and 2=2. These give the partition functiion `w1**2 + w2`.\n * The partitions of 3 are 3=1+1+1, 3=1+2, 3=3. These correspond to `w1**3 + w1*w2 + w3`.\n\n### Expected number of subsets with given size\n\nWe can ask: if we take a random partition and count the number of subsets which have exactly i elements, what will be the expected value of the result?\n\nSuppose that the input set has always two elements. Then the probability mass function for the input set size is `[0,0,1]` (the 0th element is the probability that the set has no elements).\n\n```\n>>> calc.get_subset_quantity_expectation_values(numpy.array([w0,w1,w2]),numpy.array([0,0,1]))\narray([0, 2*w1**2/(w1**2 + w2), w2/(w1**2 + w2)], dtype=object)\n```\n\nThe probability that we will get the 2=1+1 partition is proportional to `w1**2`. The other partition (2=2) has probability proportional to `w2`. Then the probability of the first case (since the sum of probabilities must be 1) is `w1**2/(w1**2 + w2)`. This case yields two singleton sets, and the other case yields none, therefore the expected value of singleton sets is `2*w1**2/(w1**2 + w2)`. Similarly, the last element of the result array is the expected number of subsets having two elements.\n\n### Probability mass function of number of subsets having given size\n\nWe now have the expected number of subsets with a fixed size. We might also need the probability mass function of the number of such subsets. Suppose again that the input has two elements. We are interested in the distribution of singletons.\n\n```\n>>> calc.get_subset_number_pmf_for_size(numpy.array([w0,w1,w2]),numpy.array([0,0,1]),1)\narray([w2/(w1**2 + w2), 0, w1**2/(w1**2 + w2)], dtype=object)\n```\n\nWe can use the last subsection to explain the result. The 2=1+1 case yields two singleton sets and has probability `w1**2/(w1**2 + w2)`, this explains the 2nd (last) element of the result array. There is no output that has only one singleton set, this explains the middle element. Finally, the case 2=2 has probability `w2/(w1**2 + w2)` and produces no singletons, therefore this is the 0th element of the result.\n\n## Numba support\n\nYou can use the same functions on the numba calculator. The only caveat is that the functions only accept float64 arrays in this case. For example:\n\n```\n>>> calc.get_subset_quantity_expectation_values(numpy.array([1.,1.,1.]),numpy.array([1.,1.,1.]))\narray([0. , 2. , 0.5])\n```\n\n## Numerical stability\n\nI did not check the calculations for numerical instabilities. However, if you multiply each weight with a corresponding power, for example: `w_i=w_i*(1.1**i)`, the resulting probabilities should not change (partition functions should change). You can use this fact to get an idea of the instability, or find a magnitude range which works for you.\n\n## Supported by\n\nSupported by the ÚNKP-20-2-SZTE-411 New National Excellence Program of the Ministry for Innovation and Technology from the source of the National Research, Development and Innovation Fund.\n\n![Project logo](https://drive.google.com/uc?export=view&id=18E1JWPujcyyvmyUSCFIZjUuIKohy54Zr)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/juhdanad/integer-partition-boltzmann",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "integer-partition-boltzmann",
    "package_url": "https://pypi.org/project/integer-partition-boltzmann/",
    "platform": "",
    "project_url": "https://pypi.org/project/integer-partition-boltzmann/",
    "project_urls": {
      "Bug Tracker": "https://github.com/juhdanad/integer-partition-boltzmann/issues",
      "Homepage": "https://github.com/juhdanad/integer-partition-boltzmann"
    },
    "release_url": "https://pypi.org/project/integer-partition-boltzmann/0.0.1/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python package for calculating Boltzmann distributions over integer partitions.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10880889,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a74f40ed4890cc5198465ddbbd95d3de1cbd7c4969f7e07f0e346859d41aeed7",
          "md5": "c3210f84699ae9553a3d00d230cdf3b2",
          "sha256": "72b2032669140a81a4db1b3a3ac8ab64a4dbe3bc16d39d40885514ea6997725d"
        },
        "downloads": -1,
        "filename": "integer_partition_boltzmann-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3210f84699ae9553a3d00d230cdf3b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6847,
        "upload_time": "2021-07-12T00:41:32",
        "upload_time_iso_8601": "2021-07-12T00:41:32.016069Z",
        "url": "https://files.pythonhosted.org/packages/a7/4f/40ed4890cc5198465ddbbd95d3de1cbd7c4969f7e07f0e346859d41aeed7/integer_partition_boltzmann-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb4eab517692029f9ee300248b09b6fc626803e95b6f9acd8e6f3edc78dcdea2",
          "md5": "21dfaf6591f478a896e0028e258c1d86",
          "sha256": "3da1b43a98127cb0584053bbdb0791e2ab9abf87a6c549dffa8dff70d76b1baa"
        },
        "downloads": -1,
        "filename": "integer_partition_boltzmann-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "21dfaf6591f478a896e0028e258c1d86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6374,
        "upload_time": "2021-07-12T00:41:33",
        "upload_time_iso_8601": "2021-07-12T00:41:33.449090Z",
        "url": "https://files.pythonhosted.org/packages/eb/4e/ab517692029f9ee300248b09b6fc626803e95b6f9acd8e6f3edc78dcdea2/integer_partition_boltzmann-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a74f40ed4890cc5198465ddbbd95d3de1cbd7c4969f7e07f0e346859d41aeed7",
        "md5": "c3210f84699ae9553a3d00d230cdf3b2",
        "sha256": "72b2032669140a81a4db1b3a3ac8ab64a4dbe3bc16d39d40885514ea6997725d"
      },
      "downloads": -1,
      "filename": "integer_partition_boltzmann-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3210f84699ae9553a3d00d230cdf3b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6847,
      "upload_time": "2021-07-12T00:41:32",
      "upload_time_iso_8601": "2021-07-12T00:41:32.016069Z",
      "url": "https://files.pythonhosted.org/packages/a7/4f/40ed4890cc5198465ddbbd95d3de1cbd7c4969f7e07f0e346859d41aeed7/integer_partition_boltzmann-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb4eab517692029f9ee300248b09b6fc626803e95b6f9acd8e6f3edc78dcdea2",
        "md5": "21dfaf6591f478a896e0028e258c1d86",
        "sha256": "3da1b43a98127cb0584053bbdb0791e2ab9abf87a6c549dffa8dff70d76b1baa"
      },
      "downloads": -1,
      "filename": "integer_partition_boltzmann-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "21dfaf6591f478a896e0028e258c1d86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6374,
      "upload_time": "2021-07-12T00:41:33",
      "upload_time_iso_8601": "2021-07-12T00:41:33.449090Z",
      "url": "https://files.pythonhosted.org/packages/eb/4e/ab517692029f9ee300248b09b6fc626803e95b6f9acd8e6f3edc78dcdea2/integer_partition_boltzmann-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}