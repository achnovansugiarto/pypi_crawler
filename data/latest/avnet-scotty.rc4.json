{
  "info": {
    "author": "Avnet Embedded GmbH",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "***************\nThe Scotty tool\n***************\n\nScotty\n======\n\n``SimpleCore open technology tool for you`` or short ``Scotty`` is a tool used to\noperate with the SimpleCore BSP, helping to download sources and build BSP images. It\nrelies on docker to provide a reproducible build environment.\n\n``Scotty`` can either be used as a single command to build a full image or as a\nhelper to setup Yocto sources and open a shell with a Yocto environment.\n\nGetting started\n---------------\n\nThe scotty tool relies on a docker container to embed as much as possible the\nsoftware dependencies it relies on. As a consequence, you will need to make sure\nto install `Docker<https://www.docker.com/>` on your system and make sure your\nuser has rights to use docker.\nThe scotty tool also needs `OpenSSL<https://www.openssl.org/>` to function properly.\n\nOn Ubuntu 20.04 platforms, they can be installed with following commands::\n\n    $ sudo apt install docker.io openssl\n    $ sudo gpasswd -a ${USER} docker\n\nIn addition, if you plan to use QEMU images, it is advised to make sure the\ncurrent user is able to use `KVM <https://www.linux-kvm.org/page/Main_Page>`_,\nhaving write permissions to ``/dev/kvm``. On Ubuntu 20.04, this can be done by\nadding your user to the ``kvm`` group, with the following command::\n\n    $ sudo gpasswd -a ${USER} kvm\n\n.. note::\n    After adding your user to the docker or kvm group with the ``gpasswd``\n    command, you will need to open a new session to apply your new privileges.\n\nInstalling the scotty tool can be easily done with ``pip``\n\n.. code:: shell\n\n  pip install --user avnet-scotty\n\nupgrading an existing installation can be done with\n\n.. code:: shell\n\n  pip install --user --upgrade avnet-scotty\n\n\nAlternatively, the current development version can be obtained by cloning\n`<https://github.com/avnet-embedded/simplecore-tools>`_.\n\n.. note:: Remove the following paragraph once the BSP is open-sourced.\n\nTo allow ``scotty`` to download the associated docker image, you will need to run\na docker login command, as documented on\n`<https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry>`_\n\n\nScotty subcommands\n------------------\n\nSeveral commands are supported by Scotty, with different goals:\n  - ``update``: download or update the Yocto sources. Will be triggered\n    implicitly with default parameters if no sources are found.\n  - ``setup``: Setup the build directory. Will be triggered implicitly with\n    default parameters if the build directory has not been setup.\n  - ``bitbake``: Build a Yocto target.\n  - ``shell``: Run a shell in the Yocto build environment.\n  - ``command``: Run a command in the Yocto build environment.\n  - ``docker-update``: Update Scotty build container.\n  - ``info``: Print out information.\n\nBuilding a full image\n---------------------\n\nA single command is enough to download the sources and build an image:\n\n.. code-block:: bash\n\n   $ scotty bitbake core-image-minimal\n\nBuilt images can then be found in ``build/build/tmp/deploy/images/``.\n\nThe build target can be customized:\n\n.. code-block:: bash\n\n   $ scotty bitbake core-image-minimal\n   $ scotty bitbake -- core-image-minimal -c populate_sdk\n\nUsing Scotty as a helper\n------------------------\n\n``Scotty`` can be used to open a shell with a sourced Yocto environment:\n\n.. code-block:: bash\n\n   $ scotty shell\n\nIt can also be used to run a single command without opening a shell:\n\n.. code-block:: bash\n\n   # This is equivalent to scotty bitbake core-image-minimal\n   $ scotty command bitbake core-image-minimal\n\n   $ scotty command bitbake-layers show-appends\n\nUpdating sources\n----------------\n\nScotty will not modify downloaded sources by itself after the initial setup.\nBuilding an image with up-to-date sources can be done using following commands:\n\n.. code-block:: bash\n\n   $ scotty update\n   $ scotty bitbake core-image-minimal\n\nAdvanced configuration\n----------------------\n\nScotty can be used to download extra sources, add additional layers or tweak the\nconfiguration.\n\nSupported update arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n- ``--manifest-branch``: Set repo branch used for repo init.\n- ``--manifest-url``: Set repo url used for repo init.\n- ``--manifest-name``: Set repo manifest used for repo init.\n- ``--extra-download``: Add an extra git to download. If this is a layer, it can\n  then be used in setup with ``--extra-layer``.\n\nSupported setup arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- ``--build-dir``: Set build subdirectory, subdirectory of ``build``. Can be\n  used to have different builds in the same ``build`` folder.\n- ``--machine-dir``: specify the directories where scotty should look for\n  supported machines.\n- ``--extra-layer``: Add an extra local layer.\n- ``--extra-conf``: Add an extra configuration entry in local.conf.\n- ``--extra-env``: Pass on additional environment variables.\n- ``--sstate-mirrors``: Do use any sstate mirror (default = false).\n- ``--features-layers-set``: The set of Avnet Embedded extra layers to use.\n  Supported values are:\n  - ``bsp``: Only BSP related layers.\n  - ``distro``: BSP and distro related layers.\n  - ``examples``: All above layers and example layers.\n  - ``simpleswitch``: BSP, distro and simpleswitch related layers.\n  - ``simpleswitch_examples``: All above layers and example layers.\n- ``--machine-dir``: specify the directories where scotty should look for\n  supported machines.\n\nSupported bitbake, shell and command arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- ``--build-dir``: Set build subdirectory, subdirectory of ``build``. Can be\n  used to have different builds in the same ``build`` folder.\n\nScripting configuration\n-----------------------\n\nIt might be useful to skip the configuration menu, so Scotty can be used in a\nscripted way. To help with this, most configuration can be set either through\narguments or environment variables.\n\nSupported arguments\n^^^^^^^^^^^^^^^^^^^\n\nThe ``--features-layers-set`` of the ``setup`` subcommand can be used to bypass\nlayer sets selection.\n\n\nSupported environment variables\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- ``DISTRO``: Can be used to select the Yocto distro and skip selection menu.\n- ``MACHINE``: Can be used to select the Yocto machine and skip selection menu.\n- ``ACCEPT_FSL_EULA``: Can be used to set the Freescale/NXP EULA status and skip\n  selection menu if applicable).\n- ``LICENSE_FLAGS_ACCEPTED``: Can be use to allow e.g. commercial licenses in the resulting images.\n- ``UBOOT_ENV_VARS``: Can be use to prepopulate the used u-boot environment (expects a key value list, separated by new lines). To disable pass \" \"\n- ``SCOTTY_FEATURE_LAYERS``: A space separated list of feature layers (alternative to ``scotty setup --features-layers-set`` - CLI flags have always precedence)\n\nExample\n^^^^^^^\n\n.. code-block:: bash\n\n   $ export ACCEPT_FSL_EULA=1\n   $ export LICENSE_FLAGS_ACCEPTED=commercial\n   $ DISTRO=simplecore-distro MACHINE=sm2s-imx8plus scotty setup --features-layers-set distro\n   $ scotty bitbake core-image-minimal\n\nIn addition, it is possible to tweak Scotty behaviour using the environment:\n\n- ``SCOTTY_WHITELIST``: The list of host environment variables exposed in Yocto\n  environment.\n- ``DOCKER_EXTRA_ARGS``: Additional parameters for docker.\n\nExample\n\n.. code-block:: bash\n\n   $ export DOCKER_EXTRA_ARGS=\"-v /home/downloads:/home/scotty/build/downloads -v /home/sstate-cache:/home/scotty/build/sstate-cache\"\n   $ scotty bitbake core-image-minimal\n\n\nUsing Scotty on Windows\n-----------------------\n\nScotty has been tested on Windows with WSL2 and `Docker Desktop`_.  It is not\npossible to build in a Windows NTFS partition, and you need to build it in an\nEXT partition (for example, in your WSL2 home directory).\n\nBuilding on Windows WSL2+Docker is as fast as building on Linux.  However,\nWindows can become quite unresponsive:\n\n* The task manager can stop refreshing,\n* The terminal may not refresh often,\n* Shortcuts like ``Win+R`` and ``Ctrl+Alt+Del`` can trigger several seconds\n  late.\n\n.. _Docker Desktop: https://docs.docker.com/docker-for-windows/install/\n\nUsing Scotty without Docker\n---------------------------\n\nIf needed, Scotty can be used without docker. In this case, you are in charge of\nproviding a fully configured environment. This can be done by setting the\n``SCOTTY_USE_DOCKER`` environment variable::\n\n    $ SCOTTY_USE_DOCKER=0 scotty bitbake core-image-minimal\n\nScotty Runqemu\n==============\n\n``Scotty Runqemu`` is an additional tool allowing to start QEMU to run a QEMU targeted build.\n\nRunqemu Example\n---------------\n\n.. code-block:: bash\n\n   $ export DISTRO=simplecore-distro MACHINE=qemux86-64\n   $ scotty setup --features-layers-set examples\n   $ scotty bitbake simplecore-weston-demo-image\n   $ scotty-runqemu simplecore-weston-demo-image\n\nscotty-layers.yaml\n==================\n\nAll the information ``scotty`` uses is defined in ``scotty-layers.yaml`` in the ``manifest`` repository.\nThis file is a ``yaml`` file containing the following sections\n\nbase section\n------------\n\nAllowed number of sections in the ``yaml``: 1\n\nThis section defines the layers that are **always** used in any setup.\n\n+-------------+--------+----------------------------+--------------------------------------+\n| Key         | Type   | Description                | Example                              |\n+=============+========+============================+======================================+\n| description | string | Human readable description | description: \"My base layers\"        |\n+-------------+--------+----------------------------+--------------------------------------+\n| layers      | list   | Paths to layers to be used | layers:                              |\n|             |        |                            |    ? \"meta-openembedded/meta-oe\"     | \n+-------------+--------+----------------------------+--------------------------------------+\n\ndistro_* section\n----------------\n\nAllowed number of sections in the ``yaml``: 1..n\n\nThese sections define the possible selections for Yocto’s ``DISTRO`` setting.\n\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| Key               | Type   | Description                                    | Example                                         |\n+===================+========+================================================+=================================================+\n| description       | string | Human readable description                     | description: \"Super Distro\"                     |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| menu_priority     | int    | Defines the order in the menu                  | menu_priority: 100                              |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| layers            | list   | Paths to layers to be used                     | layers:                                         |\n|                   |        |                                                |    ? \"poky/meta\"                                | \n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| supported_distros | dict   | key/value table of DISTRO name and description | supported_distros: &distros_poky                |\n|                   |        |                                                |    poky: \"poky: Yocto Project Reference Distro\" |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n\nmachines_* section\n------------------\n\nAllowed number of sections in the ``yaml``: 1..n\n\nThese sections define the needed layer set for the selected ``MACHINE`` entry.\n\n+-------------------+--------+-----------------------------------------+----------------------------------+\n| Key               | Type   | Description                             | Example                          |\n+===================+========+=========================================+==================================+\n| description       | string | Human readable description              | description: \"My machine layers\" |\n+-------------------+--------+-----------------------------------------+----------------------------------+\n| layers            | list   | Paths to layers to be used              | layers:                          |\n|                   |        |                                         |    ? \"meta-intel\"                | \n+-------------------+--------+-----------------------------------------+----------------------------------+\n| machine_pattern   | string | Regular expression matching ``MACHINE`` | machine_pattern: \"sm2s-.l\"       |\n+-------------------+--------+-----------------------------------------+----------------------------------+\n\noverlays_* section\n------------------\n\nAllowed number of sections in the ``yaml``: 0..n\n\nThese sections define the available device tree overlays to be selectable by ``scotty``\n\n+-------------------+--------+-----------------------------------------+----------------------------------+\n| Key               | Type   | Description                             | Example                          |\n+===================+========+=========================================+==================================+\n| description       | string | Human readable description              | description: \"My overlays\"       |\n+-------------------+--------+-----------------------------------------+----------------------------------+\n| overlays          | dict   | key/value table                         | overlays:                        |\n|                   |        |       overlay-filename/description      |   test.dtb: \"my DTB\"             | \n+-------------------+--------+-----------------------------------------+----------------------------------+\n| machine_pattern   | string | Regular expression matching ``MACHINE`` | machine_pattern: \"sm2s-.l\"       |\n+-------------------+--------+-----------------------------------------+----------------------------------+\n\nfeature_* section\n-----------------\n\nAllowed number of sections in the ``yaml``: 0..n\n\nThese sections define the possible selections for additional features.\nFeatures can reference each other by using yaml anchors.\n\nThe following example\n\n.. code:: yaml\n\n  feature_myfeature:\n    menu_priority: 200\n    description: \"My feature layer\"\n    layers: &layers_myfeature\n      <<: [*layers_poky]\n      ? \"meta-myfeature\"\n    supported_distros: &distros_myfeature\n      <<: [*distros_poky]\n\ndefines a feature that is called ``My feature layer``. It will add ``meta-myfeature`` to the layer set, and is only applicable\nif ``poky`` is selected as a DISTRO. By selecting this feature all layers defined by the ``poky`` DISTRO will be setup as well.\n\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| Key               | Type   | Description                                    | Example                                         |\n+===================+========+================================================+=================================================+\n| description       | string | Human readable description                     | description: \"My feature\"                       |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| menu_priority     | int    | Defines the order in the menu                  | menu_priority: 100                              |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| layers            | list   | Paths to layers to be used                     | layers:                                         |\n|                   |        |                                                |    ? \"meta-myfeature\"                           | \n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| supported_distros | dict   | key/value table of DISTRO name and description | supported_distros: &distros_myfeature           |\n|                   |        |                                                |    <<: [\\*distros_poky]                         |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n| add-overlays      | object | Additional selectable overlays of the feature  | add-overlays:                                   |\n|                   |        |   see `overlays section` for details           |    overlays:                                    |\n+-------------------+--------+------------------------------------------------+-------------------------------------------------+\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avnet-embedded/simplecore-tools",
    "keywords": "",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avnet-scotty",
    "package_url": "https://pypi.org/project/avnet-scotty/",
    "platform": null,
    "project_url": "https://pypi.org/project/avnet-scotty/",
    "project_urls": {
      "Homepage": "https://github.com/avnet-embedded/simplecore-tools"
    },
    "release_url": "https://pypi.org/project/avnet-scotty/2023.2.1/",
    "requires_dist": [
      "GitPython (<4.0,>=3.1)"
    ],
    "requires_python": "",
    "summary": "scotty: S(imple)C(ore) O(pen) T(echnology) T(ool for) Y(ou)",
    "version": "2023.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17177439,
  "releases": {
    "2022.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "058f90630e8f4ed3a91949bd9fdcc5b88c316598285372412527ae6a654b54d8",
          "md5": "351a887be1e40549f5ff8bdd4613dbd5",
          "sha256": "fbaef27f7c1133751d92510b56ec81d4cb81cfebe2303e96b4436d079f4df65f"
        },
        "downloads": -1,
        "filename": "avnet_scotty-2022.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "351a887be1e40549f5ff8bdd4613dbd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22676,
        "upload_time": "2022-12-05T10:35:01",
        "upload_time_iso_8601": "2022-12-05T10:35:01.938334Z",
        "url": "https://files.pythonhosted.org/packages/05/8f/90630e8f4ed3a91949bd9fdcc5b88c316598285372412527ae6a654b54d8/avnet_scotty-2022.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04f54d1c544d13ac1429de58b9a82d40d17e7194f7eb5f9e2fc524afde4439ee",
          "md5": "d1419a62f70b6a5d45c63a85f9506dcb",
          "sha256": "4c5aba97b6719ce74ee8753721040b0033b02c8dd0df3ef5ab7c85be2f24b665"
        },
        "downloads": -1,
        "filename": "avnet-scotty-2022.12.tar.gz",
        "has_sig": false,
        "md5_digest": "d1419a62f70b6a5d45c63a85f9506dcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20768,
        "upload_time": "2022-12-05T10:35:03",
        "upload_time_iso_8601": "2022-12-05T10:35:03.871304Z",
        "url": "https://files.pythonhosted.org/packages/04/f5/4d1c544d13ac1429de58b9a82d40d17e7194f7eb5f9e2fc524afde4439ee/avnet-scotty-2022.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6c65a90fb9e71de323eb0b0c1f5640a4ad1ecebb9f714431ef40ffe246093a3",
          "md5": "0c65267fd6e9e4d4ee76d58a67551d7a",
          "sha256": "cb1feb1ed57a4b459b59056b317098c222e90ef49e8e1664a091146157319236"
        },
        "downloads": -1,
        "filename": "avnet_scotty-2023.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c65267fd6e9e4d4ee76d58a67551d7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22900,
        "upload_time": "2023-01-18T18:48:48",
        "upload_time_iso_8601": "2023-01-18T18:48:48.504331Z",
        "url": "https://files.pythonhosted.org/packages/f6/c6/5a90fb9e71de323eb0b0c1f5640a4ad1ecebb9f714431ef40ffe246093a3/avnet_scotty-2023.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27cd938e5647c2e5e56c507ef98de4f5d459cf9432f80a58121afa2efefaa850",
          "md5": "247bebd419fc58d0a01ce46339a5d623",
          "sha256": "da1c8ecb465dbbecb80f064ac3c673a8c61616514c92c9bfbe8f3da3d9d51f50"
        },
        "downloads": -1,
        "filename": "avnet-scotty-2023.1.tar.gz",
        "has_sig": false,
        "md5_digest": "247bebd419fc58d0a01ce46339a5d623",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21029,
        "upload_time": "2023-01-18T18:48:50",
        "upload_time_iso_8601": "2023-01-18T18:48:50.718433Z",
        "url": "https://files.pythonhosted.org/packages/27/cd/938e5647c2e5e56c507ef98de4f5d459cf9432f80a58121afa2efefaa850/avnet-scotty-2023.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a21b75d93ca3893b2a7c9f7a26dbd76bba84f56ba1f00d1c898481b90390582c",
          "md5": "a51cf8998a9d5e0ae96a629e1f4b481a",
          "sha256": "5f8291f1e1664354680c924ee7cf25d7f5cca5d9f10a519b32ade9ba9d03032f"
        },
        "downloads": -1,
        "filename": "avnet_scotty-2023.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a51cf8998a9d5e0ae96a629e1f4b481a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24164,
        "upload_time": "2023-03-01T22:17:09",
        "upload_time_iso_8601": "2023-03-01T22:17:09.333772Z",
        "url": "https://files.pythonhosted.org/packages/a2/1b/75d93ca3893b2a7c9f7a26dbd76bba84f56ba1f00d1c898481b90390582c/avnet_scotty-2023.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b31d034ea56f0c4ac9be1720b73249d29b120613e2b56c76fd71abd35a87f05",
          "md5": "0b879c285134d7d979ae22b30c279b80",
          "sha256": "713c03b5810592c17bd639c623cb4b1686a5163a992cc4180104b8d8181bf022"
        },
        "downloads": -1,
        "filename": "avnet-scotty-2023.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b879c285134d7d979ae22b30c279b80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22658,
        "upload_time": "2023-03-01T22:17:11",
        "upload_time_iso_8601": "2023-03-01T22:17:11.222167Z",
        "url": "https://files.pythonhosted.org/packages/7b/31/d034ea56f0c4ac9be1720b73249d29b120613e2b56c76fd71abd35a87f05/avnet-scotty-2023.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "971cbf8f0de0a87412e573562c5c19052cdd468edd0372936aef43aa0db5e4dc",
          "md5": "cd65d9e36db21e175db5cbf332dd106c",
          "sha256": "873a10184dc3c8f09c1a9c43fb292e3d51493f568ff4ed681ac52bc2d0f16b7c"
        },
        "downloads": -1,
        "filename": "avnet_scotty-2023.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd65d9e36db21e175db5cbf332dd106c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24202,
        "upload_time": "2023-03-06T16:13:09",
        "upload_time_iso_8601": "2023-03-06T16:13:09.390601Z",
        "url": "https://files.pythonhosted.org/packages/97/1c/bf8f0de0a87412e573562c5c19052cdd468edd0372936aef43aa0db5e4dc/avnet_scotty-2023.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85f674b5a0fe5ee08516ceb2ea605b3d44f3a02944713ad6236c9b8a9394a272",
          "md5": "cd00057ada71e10d2a58711de681556c",
          "sha256": "dd8290729f0f4a01e277eb6eadcbc42c9da809af19fbfc4e833497629ae6e54d"
        },
        "downloads": -1,
        "filename": "avnet-scotty-2023.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd00057ada71e10d2a58711de681556c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22650,
        "upload_time": "2023-03-06T16:13:10",
        "upload_time_iso_8601": "2023-03-06T16:13:10.950393Z",
        "url": "https://files.pythonhosted.org/packages/85/f6/74b5a0fe5ee08516ceb2ea605b3d44f3a02944713ad6236c9b8a9394a272/avnet-scotty-2023.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "971cbf8f0de0a87412e573562c5c19052cdd468edd0372936aef43aa0db5e4dc",
        "md5": "cd65d9e36db21e175db5cbf332dd106c",
        "sha256": "873a10184dc3c8f09c1a9c43fb292e3d51493f568ff4ed681ac52bc2d0f16b7c"
      },
      "downloads": -1,
      "filename": "avnet_scotty-2023.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd65d9e36db21e175db5cbf332dd106c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24202,
      "upload_time": "2023-03-06T16:13:09",
      "upload_time_iso_8601": "2023-03-06T16:13:09.390601Z",
      "url": "https://files.pythonhosted.org/packages/97/1c/bf8f0de0a87412e573562c5c19052cdd468edd0372936aef43aa0db5e4dc/avnet_scotty-2023.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85f674b5a0fe5ee08516ceb2ea605b3d44f3a02944713ad6236c9b8a9394a272",
        "md5": "cd00057ada71e10d2a58711de681556c",
        "sha256": "dd8290729f0f4a01e277eb6eadcbc42c9da809af19fbfc4e833497629ae6e54d"
      },
      "downloads": -1,
      "filename": "avnet-scotty-2023.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd00057ada71e10d2a58711de681556c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22650,
      "upload_time": "2023-03-06T16:13:10",
      "upload_time_iso_8601": "2023-03-06T16:13:10.950393Z",
      "url": "https://files.pythonhosted.org/packages/85/f6/74b5a0fe5ee08516ceb2ea605b3d44f3a02944713ad6236c9b8a9394a272/avnet-scotty-2023.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}