{
  "info": {
    "author": "Tilmann Bartsch",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# rportion - data structure and operations for rectilinear polygons\n\n\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pytest-codeblocks.svg?branch=master)](https://test.pypi.org/project/rportion/)\n[![Tests](https://github.com/tilmann-bartsch/rportion/actions/workflows/test.yaml/badge.svg?branch=master)](https://github.com/tilmann-bartsch/portion/actions/workflows/test.yaml)\n[![Coverage Status](https://coveralls.io/repos/github/tilmann-bartsch/rportion/badge.svg?branch=master)](https://coveralls.io/github/tilmann-bartsch/rportion?branch=master)\n[![LGTM](https://img.shields.io/lgtm/grade/python/github/tilmann-bartsch/rportion.svg?branch=master)](https://lgtm.com/projects/g/tilmann-bartsch/rportion)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Commits](https://img.shields.io/github/last-commit/tilmann-bartsch/rportion/master)](https://github.com/tilmann-bartsch/rportion/commits/master)\n\nThe `rportion` library provides data structure to represent \n2D [rectilinear polygons](https://en.wikipedia.org/wiki/Rectilinear_polygon) (unions of 2D-intervals) in Python 3.7+.\nIt is built upon the library [`portion`](https://github.com/AlexandreDecan/portion) and follows its concepts.\nThe following features are provided:\n\n - 2D-Intervals (rectangles) which can be open/closed and finite/infinite at every boundary\n - intersection, union, complement and difference of rectilinear polygons\n - iterator over all maximum rectangles inside and outside a given polygon\n\nIn the case of integers/floats it can be used to keep track of the area resulting \nfrom the union/difference of rectangles:\n\n<p align=\"center\">\n  <img width=\"65%\" src=\"https://github.com/tilmann-bartsch/rportion/raw/master/docu/simple-example_solid.gif\">\n</p>\n\nInternally the library uses an [interval tree](https://en.wikipedia.org/wiki/Interval_tree) to represent a polygon.\n\n## Table of contents\n\n  * [Installation](#installation)\n  * [Documentation & usage](#documentation--usage)\n      * [Polygon creation](#polygon-creation)\n      * [Polygon bounds & attributes](#polygon-bounds--attributes)\n      * [Polygon operations](#polygon-operations)\n      * [Rectangle partitioning iterator](#rectangle-partitioning-iterator)\n      * [Maximum rectangle iterator](#maximum-rectangle-iterators)\n      * [Boundary](#boundary)\n      * [Internal data structure](#internal-data-structure)\n  * [Changelog](#changelog)\n  * [Contributions](#contributions)\n  * [License](#license)\n\n## Installation\n\nInstall `rportion` from [PyPi-test](https://test.pypi.org/project/rportion/) with `pip` using \n`pip install -i https://test.pypi.org/simple/ rportion`.\n\nInstall `rportion` with the development environment using `pip install -e \".[test]\"`.\n\n## Documentation & usage\n\n### Polygon creation\n\nAtomic polygons (rectangles) can be created by one of the following:\n```python\n>>> import rportion as rp\n>>> rp.ropen(0, 2, 0, 1)\n(x=(0,2), y=(0,1))\n>>> rp.rclosed(0, 2, 0, 1)\n(x=[0,2], y=[0,1])\n>>> rp.ropenclosed(0, 2, 0, 1)\n(x=(0,2], y=(0,1])\n>>> rp.rclosedopen(0, 2, 0, 1)\n(x=[0,2), y=[0,1))\n>>> rp.rsingleton(0, 1)\n(x=[0], y=[1])\n>>> rp.rempty()\n(x=(), y=())\n```\n\nPolygons can also be created by using two intervals of the underlying library \n[`portion`](https://github.com/AlexandreDecan/portion):\n```python\n>>> import portion as P\n>>> import rportion as rp\n>>> rp.RPolygon.from_interval_product(P.openclosed(0, 2), P.closedopen(0, 1))\n(x=(0,2], y=[0,1))\n```\n\n[&uparrow; back to top](#table-of-contents)\n### Polygon bounds & attributes\n\nAn `RPolygon` defines the following properties\n - `empty` is true if the polygon is empty.\n   ```python\n   >>> rp.rclosed(0, 2, 1, 2).empty\n   False\n   >>> rp.rempty().empty\n   True\n   ```\n - `atomic` is true if the polygon can be expressed by a single rectangle.\n   ```python\n   >>> rp.rempty().atomic\n   True\n   >>> rp.rclosedopen(0, 2, 1, 2).atomic\n   True\n   >>> (rp.rclosed(0, 2, 1, 2) | rp.rclosed(0, 2, 1, 3)).atomic\n   True\n   >>> (rp.rclosed(0, 2, 1, 2) | rp.rclosed(1, 2, 1, 3)).atomic\n   False\n   ```\n - `enclosure` is the smallest rectangle containing the polygon.\n   ```python\n   >>> (rp.rclosed(0, 2, 0, 2) | rp.rclosed(1, 3, 0, 1)).enclosure\n   (x=[0,3], y=[0,2])\n   >>> (rp.rclosed(0, 1, -3, 3) | rp.rclosed(-P.inf, P.inf, -1, 1)).enclosure\n   (x=(-inf,+inf), y=[-3,3])\n   ```\n - `enclosure_x_interval` is the smallest rectangle containing the polygon's extension in x-dimension.\n   ```python\n   >>> (rp.rclosed(0, 2, 0, 2) | rp.rclosed(1, 3, 0, 1)).x_enclosure_interval\n   x=[0,3]\n   >>> (rp.rclosed(0, 1, -3, 3) | rp.rclosed(-P.inf, P.inf, -1, 1)).x_enclosure_interval\n   (-inf,+inf)\n   ```\n - `enclosure_y_interval` is the smallest interval containing the polygon's extension in y-dimension.\n   ```python\n   >>> (rp.rclosed(0, 2, 0, 2) | rp.rclosed(1, 3, 0, 1)).y_enclosure_interval\n   [0,2]\n   >>> (rp.rclosed(0, 1, -3, 3) | rp.rclosed(-P.inf, P.inf, -1, 1)).y_enclosure_interval\n   [-3,3]\n   ```\n - `x_lower`, `x_upper`, `y_lower` and `y_upper` yield the boundaries of the rectangle enclosing\n   the polygon.\n   ```python\n   >>> p = rp.rclosedopen(0, 2, 1, 3)\n   >>> p.x_lower, p.x_upper, p.y_lower, p.y_upper\n   (0, 2, 1, 3)\n   ```\n - `x_left`, `x_right`, `y_left` and `y_right` yield the type of the boundaries of the rectangle enclosing\n    the polygon.\n    ```python\n    >>> p = rp.rclosedopen(0, 2, 1, 3)\n    >>> p.x_left, p.x_right, p.y_left, p.y_right\n    (CLOSED, OPEN, CLOSED, OPEN)\n    ```\n\n### Polygon operations\n\n`RPolygon` instances support the following operations:\n - `p.intersection(other)` and `p & other` return the intersection of two rectilinear polygons.\n   ```python\n   >>> rp.rclosed(0, 2, 0, 2) & rp.rclosed(1, 3, 0, 1)\n   (x=[1,2], y=[0,1])\n   ```\n - `p.union(other)` and `p | other` return the union of two rectilinear polygons.\n   ```python\n   >>> rp.rclosed(0, 2, 0, 2) | rp.rclosed(1, 3, 0, 1)\n   (x=[0,3], y=[0,1]) | (x=[0,2], y=[0,2])\n   ```\n   Note that the resulting polygon is represented by the union of all maximal rectangles contained in\n   in the polygon, see [Maximum rectangle iterators](#maximum-rectangle-iterators).\n - `p.complement()` and `~p` return the complement of the rectilinear polygon.\n   ```python\n   >>> ~rp.ropen(-P.inf, 0, -P.inf, P.inf)\n   ((x=[0,+inf), y=(-inf,+inf))\n   ```\n - `p.difference(other)` and `p - other` return the difference of two rectilinear polygons.\n   ```python\n   rp.rclosed(0, 3, 0, 2) - rp.ropen(2, 4, 1, 3)\n   (x=[0,3], y=[0,1]) | (x=[0,2], y=[0,2])\n   ```\n   Note that the resulting polygon is represented by the union of all maximal rectangles contained in\n   in the polygon, see [Maximum rectangle iterators](#maximum-rectangle-iterators).\n\n[&uparrow; back to top](#table-of-contents)\n### Rectangle partitioning iterator\n\nThe method `rectangle_partitioning` of a `RPolygon` instance returns an iterator\nover rectangles contained in the rectilinear polygon which disjunctively cover it. I.e.\n\n```python\n>>> poly = rp.rclosedopen(2, 5, 1, 4) | rp.rclosedopen(1, 8, 2, 3) | rp.rclosedopen(6, 8, 1, 3)\n>>> poly = poly - rp.rclosedopen(4, 7, 2, 4)\n>>> list(poly.rectangle_partitioning())\n[(x=[1,4), y=[2,3)), (x=[2,5), y=[1,2)), (x=[6,8), y=[1,2)), (x=[2,4), y=[3,4)), (x=[7,8), y=[2,3))]\n```\n\nwhich can be visualized as follows:\n<p align=\"center\">\n  <img width=\"95%\" src=\"https://github.com/tilmann-bartsch/rportion/raw/master/docu/simple-example_partitioning.png\">\n</p>\n\n**Left:** Simple Rectilinear polygon. The red areas are part of the polygon.<br>\n**Right:** Rectangles in the portion are shown with black borderlines. As it is visible \n           `rectangle_partitioning` prefers rectangles with long x-interval over \n           rectangles with long y-interval.\n           \n\n\n[&uparrow; back to top](#table-of-contents)\n### Maximum rectangle iterator\n\nThe method `maximal_rectangles` of a `RPolygon` instance returns an iterator over all maximal rectangles contained\nin the rectilinear polygon.\n\nA maximal rectangle is rectangle in the polygon which is not a real subset of any other rectangle contained in\nthe rectilinear polygon. I.e. \n\n```python\n>>> poly = rp.rclosedopen(2, 5, 1, 4) | rp.rclosedopen(1, 8, 2, 3) | rp.rclosedopen(6, 8, 1, 3)\n>>> poly = poly - rp.rclosedopen(4, 7, 2, 4)\n>>> list(poly.maximal_rectangles())\n[(x=[1, 4), y = [2, 3)), (x=[2, 5), y = [1, 2)), (x=[6, 8), y = [1, 2)), (x=[2, 4), y = [1, 4)), (x=[7, 8), y = [1, 3))]\n```\nwhich can be visualized as follows:\n<p align=\"center\">\n  <img width=\"95%\" src=\"https://github.com/tilmann-bartsch/rportion/raw/master/docu/simple-example_max-rectangles.png\">\n</p>\n\n**Left:** Simple Rectilinear polygon. The red areas are part of the polygon.<br>\n**Right:** Maximal contained rectangles are drawn above each other transparently.\n\n[&uparrow; back to top](#table-of-contents)\n## Boundary\n\nThe method `boundary` of a `RPolygon` instance returns another `RPolygon` instance representing the boundary of\nthe polygon. I.e.\n\n```python\n>>> poly = rp.closed(0, 1, 2, 3)\n>>> poly.boundary()\n(x=[1,2], y=[3]) | (x=[1,2], y=[4]) | (x=[1], y=[3,4]) | (x=[2], y=[3,4])\n```\n\n[&uparrow; back to top](#table-of-contents)\n## Internal data structure\n\nThe polygon is internally stored using an [interval tree](https://en.wikipedia.org/wiki/Interval_tree). Every\nnode of the tree corresponds to an interval in x-dimension which is representable by boundaries (in x-dimension) \npresent in the polygon. Each node contains an 1D-interval (by using the library\n[`portion`](https://github.com/AlexandreDecan/portion)) in y-dimension. Combining those 1D-intervals\nyields a rectangle contained in the polygon.\n\nI.e. for the rectangle `(x=[0, 2), y=[1, 3))` this can be visualized as follows.\n```\n  interval tree with      x-interval corresponding       y-interval stored in\n a lattice-like shape             to each node                each node\n       ┌─x─┐                      ┌─(-∞,+∞)─┐                  ┌─()──┐\n       │   │                      │         │                  │     │\n     ┌─x─┬─x─┐               ┌─(-∞,2)──┬──[0,+∞)─┐          ┌─()──┬──()─┐\n     │   │   │               │         │         │          │     │     │\n     x   x   x            (-∞,0]     [0,2)     [2,+∞)      ()   [1,3)   ()\n```\nThe class `RPolygon` used this model by holding three data structures.\n  - `_x_boundaries`: Sorted list of necessary boundaries in x-dimension with type (`OPEN` or `CLOSED`)\n  - `_used_y_ranges`: List of lists in a triangular shape representing the interval tree for the\n                      space occupied by the rectilinear polygon.\n  - `_free_y_ranges`: List of list in a triangular shape representing the interval tree of\n                      for the space not occupied by the rectilinear polygon.\n\nNote that a separate data structure for the area outside the polygon is kept.\nThis is done in order to be able to obtain the complement of a polygon efficiently.\n\nFor the example shown above this is:\n```python\n>>> poly = rp.rclosedopen(0, 2, 1, 3)\n>>> poly._x_boundaries\nSortedList([(-inf, OPEN), (0, OPEN), (2, OPEN), (+inf, OPEN)])\n>>> poly._used_y_ranges\n[[(), (), ()], \n [(), [1,3)], \n [()]]\n>>> poly._free_y_ranges\n[[(-inf,1) | [3,+inf), (-inf,1) | [3,+inf), (-inf,+inf)], \n [(-inf,1) | [3,+inf), (-inf,1) | [3,+inf)], \n [(-inf,+inf)]]\n```\n\nYou can use the function `data_tree_to_string` as noted below to print the internal data structure in a tabular format:\n\n```python\n>>> poly = rp.rclosedopen(0, 2, 1, 3)\n>>> print(data_tree_to_string(poly._x_boundaries, poly._used_y_ranges, 6))\n                |  +inf     2     0\n----------------+------------------\n     -inf (OPEN)|    ()    ()    ()\n      0 (CLOSED)|    () [1,3)\n      2 (CLOSED)|    ()\n```\n\n```python\n>>> poly = rp.rclosedopen(2, 5, 1, 4) | rp.rclosedopen(1, 8, 2, 3) | rp.rclosedopen(6, 8, 1, 3)\n>>> poly = poly - rp.rclosedopen(4, 7, 2, 4)\n>>> print(data_tree_to_string(poly._x_boundaries, poly._used_y_ranges, 6))\n                |  +inf     8     7     6     5     4     2     1\n----------------+------------------------------------------------\n     -inf (OPEN)|    ()    ()    ()    ()    ()    ()    ()    ()\n      1 (CLOSED)|    ()    ()    ()    ()    () [2,3) [2,3)\n      2 (CLOSED)|    ()    ()    ()    () [1,2) [1,4)\n      4 (CLOSED)|    ()    ()    ()    () [1,2)\n      5 (CLOSED)|    ()    ()    ()    ()\n      6 (CLOSED)|    () [1,2) [1,2)\n      7 (CLOSED)|    () [1,3)\n```\n\n```python\ndef data_tree_to_string(x_boundaries,\n                        y_intervals,\n                        spacing: int):\n    col_space = 10\n    n = len(y_intervals)\n    msg = \" \" * (spacing + col_space) + \"|\"\n    for x_b in x_boundaries[-1:0:-1]:\n        msg += f\"{str(x_b.val):>{spacing}}\"\n    msg += \"\\n\" + f\"-\" * (spacing+col_space) + \"+\"\n    for i in range(n):\n        msg += f\"-\" * spacing\n    msg += \"\\n\"\n    for i, row in enumerate(y_intervals):\n        x_b = x_boundaries[i]\n        msg += f\"{str((~x_b).val) + ' (' + str((~x_b).btype) + ')':>{spacing+ col_space}}|\"\n        for val in row:\n            msg += f\"{str(val):>{spacing}}\"\n        msg += \"\\n\"\n    return msg\n```\n\n[&uparrow; back to top](#table-of-contents)\n## Changelog\nThis library adheres to a [semantic versioning](https://semver.org/) scheme.\nSee [CHANGELOG.md](https://github.com/tilmann-bartsch/rportion/blob/master/CHANGELOG.md) for the list of changes.\n\n## Contributions\nContributions are very welcome! Feel free to report bugs or suggest new features using GitHub issues and/or pull requests.\n\n## License\nDistributed under [MIT License](https://github.com/tilmann-bartsch/rportion/blob/master/LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tilmann-bartsch/rportion",
    "keywords": "rectangle polygon interval-tree",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rportion",
    "package_url": "https://pypi.org/project/rportion/",
    "platform": null,
    "project_url": "https://pypi.org/project/rportion/",
    "project_urls": {
      "Homepage": "https://github.com/tilmann-bartsch/rportion"
    },
    "release_url": "https://pypi.org/project/rportion/0.1.0/",
    "requires_dist": [
      "sortedcontainers (~=2.2)",
      "portion (~=2.2.0)",
      "numpy (~=1.21.6) ; extra == 'docu'",
      "matplotlib (~=3.5.2) ; extra == 'docu'",
      "imageio (~=2.19.5) ; extra == 'docu'",
      "pillow (~=9.2.0) ; extra == 'docu'",
      "tqdm (~=4.64.0) ; extra == 'docu'",
      "pytest (~=7.0) ; extra == 'test'",
      "coverage (~=6.0) ; extra == 'test'",
      "numpy (~=1.21.6) ; extra == 'test'"
    ],
    "requires_python": "~= 3.7",
    "summary": "Python data structure and operations for 2-dimensional rectilinear polygons",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14781014,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51092a6ae69c4b1b2447e0e4440e03a5c0a5a32fc1a1c9940c8dec88706908ea",
          "md5": "56fa23709fd0edfae85fc4ba2ea731c2",
          "sha256": "70dc9d8a68a50a5aa13ae7bc719932e1b96b88d7f356c1a38f0499c0b44019bb"
        },
        "downloads": -1,
        "filename": "rportion-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56fa23709fd0edfae85fc4ba2ea731c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~= 3.7",
        "size": 12017,
        "upload_time": "2022-08-16T20:37:33",
        "upload_time_iso_8601": "2022-08-16T20:37:33.228863Z",
        "url": "https://files.pythonhosted.org/packages/51/09/2a6ae69c4b1b2447e0e4440e03a5c0a5a32fc1a1c9940c8dec88706908ea/rportion-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55899d93b166d5c9a9857e5919a74982b6f3d7aff30f4f577f8996b156e5e344",
          "md5": "41a2bbb482d314f46396a9e1544e6f14",
          "sha256": "84519057870b7bf27c23e1ed7449041fc73adcfa4aa4b10f79e9ff868434eda0"
        },
        "downloads": -1,
        "filename": "rportion-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "41a2bbb482d314f46396a9e1544e6f14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~= 3.7",
        "size": 15727,
        "upload_time": "2022-08-16T20:37:35",
        "upload_time_iso_8601": "2022-08-16T20:37:35.955444Z",
        "url": "https://files.pythonhosted.org/packages/55/89/9d93b166d5c9a9857e5919a74982b6f3d7aff30f4f577f8996b156e5e344/rportion-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51092a6ae69c4b1b2447e0e4440e03a5c0a5a32fc1a1c9940c8dec88706908ea",
        "md5": "56fa23709fd0edfae85fc4ba2ea731c2",
        "sha256": "70dc9d8a68a50a5aa13ae7bc719932e1b96b88d7f356c1a38f0499c0b44019bb"
      },
      "downloads": -1,
      "filename": "rportion-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56fa23709fd0edfae85fc4ba2ea731c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~= 3.7",
      "size": 12017,
      "upload_time": "2022-08-16T20:37:33",
      "upload_time_iso_8601": "2022-08-16T20:37:33.228863Z",
      "url": "https://files.pythonhosted.org/packages/51/09/2a6ae69c4b1b2447e0e4440e03a5c0a5a32fc1a1c9940c8dec88706908ea/rportion-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55899d93b166d5c9a9857e5919a74982b6f3d7aff30f4f577f8996b156e5e344",
        "md5": "41a2bbb482d314f46396a9e1544e6f14",
        "sha256": "84519057870b7bf27c23e1ed7449041fc73adcfa4aa4b10f79e9ff868434eda0"
      },
      "downloads": -1,
      "filename": "rportion-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "41a2bbb482d314f46396a9e1544e6f14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~= 3.7",
      "size": 15727,
      "upload_time": "2022-08-16T20:37:35",
      "upload_time_iso_8601": "2022-08-16T20:37:35.955444Z",
      "url": "https://files.pythonhosted.org/packages/55/89/9d93b166d5c9a9857e5919a74982b6f3d7aff30f4f577f8996b156e5e344/rportion-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}