{
  "info": {
    "author": "Matthias Urlichs",
    "author_email": "matthias@urlichs.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Networking"
    ],
    "description": "# AsyncPing\n![GitHub release](https://img.shields.io/github/release/M-o-a-T/asyncping.svg)\n[![GitHub license](https://img.shields.io/github/license/M-o-a-T/asyncping.svg)](https://github.com/M-o-a-T/asyncping/blob/master/LICENSE)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/asyncping3.svg)\n\nAsyncPing is an async-friendly pure python3 version of ICMP ping implementation using raw sockets.\\\n(Note that on Linux and Windows, ICMP messages can only be sent from processes running as root.)\n\n> The Python2 version originally from [here](http://github.com/samuel/python-ping).\\\n> The Python3 version originally from [here](http://github.com/kyan001/ping3).\\\n> This version maintained at [this github repo](https://github.com/M-o-a-T/asyncping).\n\n## Get Started\n\n* If you met \"permission denied\", you may need to run this as root.\n\n```sh\npip install asyncping3\n```\n\n```python\n>>> from asyncping3 import ping, verbose_ping\n>>> anyio.run(ping,'example.com')  # Returns delay in seconds.\n0.215697261510079666\n\n>>> anyio.run(verbose_ping,'example.com')  # Ping 4 times in a row.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n```\n\n```sh\n$ pping example.com  # Verbose ping.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n```\n\n## Installation\n\n```sh\npip install asyncping3  # install asyncping3\npip install --upgrade asyncping3  # upgrade asyncping3\npip uninstall asyncping3  # uninstall asyncping3\n```\n\n## Functions\n\n```python\n>>> ping('example.com')  # Returns delay in seconds.\n0.215697261510079666\n\n>>> ping('not.exist.com')  # if host unknown (cannot resolve), returns False\nFalse\n\n>>> ping(\"224.0.0.0\")  # If timed out (no reply), returns None\nNone\n\n>>> ping('example.com', timeout=10)  # Set timeout to 10 seconds. Default timeout=4 for 4 seconds.\n0.215697261510079666\n\n>>> ping('example.com', unit='ms')  # Returns delay in milliseconds. Default unit='s' for seconds.\n215.9627876281738\n\n>>> ping('example.com', src_addr='192.168.1.15')  # WINDOWS ONLY. Set source ip address for multiple interfaces. Default src_addr=None for no binding.\n0.215697261510079666\n\n>>> ping('example.com', interface='eth0')  # LINUX ONLY. Set source interface for multiple network interfaces. Default interface=None for no binding.\n0.215697261510079666\n\n>>> ping('example.com', ttl=5)  # Set packet Time-To-Live to 5. The packet is discarded if it does not reach the target host after 5 jumps. Default ttl=64.\nNone\n\n>>> ping('example.com', size=56)  # Set ICMP packet payload to 56 bytes. The total ICMP packet size is 8 (header) + 56 (payload) = 64 bytes. Default size=56.\n0.215697261510079666\n\n>>> verbose_ping('example.com')  # Ping 4 times in a row.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n\n>>> verbose_ping('example.com', timeout=10)  # Set timeout to 10 seconds. Default timeout=4 for 4 seconds.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n\n>>> verbose_ping('example.com', count=6)  # Ping 6 times. Default count=4.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\n\n>>> verbose_ping('example.com', count=0)  # Ping endlessly (0 means infinite loops). Using `ctrl + c` to stop manully.\nping 'example.com' ... 215ms\n...\n\n>>> verbose_ping('example.com', src_addr='192.168.1.15')  # WINDOWS ONLY. Ping from source IP address. Default src_addr=None\nping 'example.com' from '192.168.1.15' ... 215ms\nping 'example.com' from '192.168.1.15' ... 216ms\nping 'example.com' from '192.168.1.15' ... 219ms\nping 'example.com' from '192.168.1.15' ... 217ms\n\n>>> verbose_ping('example.com', interface='wifi0')  # LINUX ONLY. Ping from network interface 'wifi0'. Default interface=None\nping 'example.com' from '192.168.1.15' ... 215ms\nping 'example.com' from '192.168.1.15' ... 216ms\nping 'example.com' from '192.168.1.15' ... 219ms\nping 'example.com' from '192.168.1.15' ... 217ms\n\n>>> verbose_ping('example.com', unit='s')  # Displays delay in seconds. Default unit=\"ms\" for milliseconds.\nping 'example.com' ... 1s\nping 'example.com' ... 2s\nping 'example.com' ... 1s\nping 'example.com' ... 1s\n\n>>> verbose_ping('example.com', ttl=5)  # Set TTL to 5. Default is 64.\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\n\n>>> verbose_ping('example.com', interval=5)  # Wait 5 seconds between each packet. Default is 0.\nping 'example.com' ... 215ms  # wait 5 secs\nping 'example.com' ... 216ms  # wait 5 secs\nping 'example.com' ... 219ms  # wait 5 secs\nping 'example.com' ... 217ms\n\n>>> verbose_ping('example.com', size=56)  # Set ICMP payload to 56 bytes. Default size=56.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n```\n\n### DEBUG mode\n\nShow more info for developers.\n\n```python\n>>> import asyncping3\n>>> asyncping3.DEBUG = True  # Default is False.\n\n>>> asyncping3.ping(\"example.com\")  # \"ping()\" prints received IP header and ICMP header.\n[DEBUG] IP HEADER: {'version': 69, 'tos': 0, 'len': 14336, 'id': 8620, 'flags': 0, 'ttl': 51, 'protocol': 1, 'checksum': *, 'src_addr': *, 'dest_addr': *}\n[DEBUG] ICMP HEADER: {'type': 0, 'code': 0, 'checksum': 8890, 'id': 21952, 'seq': 0}\n0.215697261510079666\n\n>>> asyncping3.ping(\"example.com\", timeout=0.0001)\n[DEBUG] Request timeout for ICMP packet. (Timeout = 0.0001s)\nNone\n\n>>> asyncping3.ping(\"not.exist.com\")\n[DEBUG] Cannot resolve: Unknown host. (Host = not.exist.com)\nFalse\n\n>>> asyncping3.ping(\"example.com\", ttl=1)\n[DEBUG] Time exceeded: Time To Live expired.\nNone\n```\n\n### EXCEPTIONS mode\n\nRaise exceptions when there are errors instead of return None\n\n```python\n>>> import asyncping3\n>>> asyncping3.EXCEPTIONS = True  # Default is False.\n\n>>> asyncping3.ping(\"example.com\", timeout=0.0001)  # All Exceptions are subclasses of PingError\n[... Traceback ...]\nerror.Timeout: Request timeout for ICMP packet. (Timeout = 0.0001s)\n\n>>> asyncping3.ping(\"not.exist.com\")\n[... Traceback ...]\nerror.HostUnknown: Cannot resolve: Unknown host. (Host = not.exist.com)\n\n>>> asyncping3.ping(\"example.com\", ttl=1)\n[... Traceback ...]\nerror.TimeToLiveExpired: Time exceeded: Time To Live expired.\n```\n\n## Command Line Execution\n\nExecute `pping` from command-line.\nNote: `pping` needs `root` privilege to send/receive packets. You may want to use `sudo pping`.\n\n```sh\n$ pping --help  # -h/--help. Command-line help message.\n\n$ pping -v  # -v/--version. Show asyncping3 version number.\n3.0.0\n\n$ pping example.com  # Verbose ping.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n\n$ pping example.com 8.8.8.8  # Verbose ping all the addresses in parallel.\nping 'example.com' ... 215ms\nping 'example.com' ... 217ms\nping '8.8.8.8' ... 5ms\nping 'example.com' ... 216ms\nping '8.8.8.8' ... 2ms\nping '8.8.8.8' ... 6ms\nping 'example.com' ... 219ms\nping '8.8.8.8' ... 5ms\n\n$ pping -c 1 example.com  # -c/--count. How many pings should be sent.  Default is 4.\nping 'example.com' ... 215ms\n\n$ pping -c 0 example.com  # Ping endlessly (0 means infinite loops). Using `ctrl + c` to stop manully.\nping 'example.com' ... 215ms\n...\n\n$ pping -w 10 example.com  # -w/--wait. Set timeout to 10 seconds. Default is 4.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n\n$ pping -t 5 example.com  # -t/--ttl. # Set TTL to 5. Default is 64.\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\nping 'example.com' ... Timeout\n\n$ pping -l 56 example.com  # -l/--load. Set ICMP packet payload to 56 bytes. Default is 56.\nping 'example.com' ... 215ms\nping 'example.com' ... 216ms\nping 'example.com' ... 219ms\nping 'example.com' ... 217ms\n\n$ pping -i 5 example.com  # -i/--interval. Wait 5 seconds between each packet. Default is 0.\nping 'example.com' ... 215ms  # wait 5 secs\nping 'example.com' ... 216ms  # wait 5 secs\nping 'example.com' ... 219ms  # wait 5 secs\nping 'example.com' ... 217ms\n\n$ pping --exceptions --wait 0.001 example.com  # EXCPETIONS mode is on when --exceptions shows up.\n[... Traceback ...]\nerror.Timeout: Request timeout for ICMP packet. (Timeout = 0.0001s)\n\n$ pping --debug --wait 0.001 example.com  # DEBUG mode is on when --debug shows up.\n[DEBUG] Request timeout for ICMP packet. (Timeout = 0.001s)\nping 'example.com' ... Timeout > 0.001s\n[DEBUG] Request timeout for ICMP packet. (Timeout = 0.001s)\nping 'example.com' ... Timeout > 0.001s\n[DEBUG] Request timeout for ICMP packet. (Timeout = 0.001s)\nping 'example.com' ... Timeout > 0.001s\n[DEBUG] Request timeout for ICMP packet. (Timeout = 0.001s)\nping 'example.com' ... Timeout > 0.001s\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M-o-a-T/asyncping3",
    "keywords": "python3 ping icmp socket tool",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncping3",
    "package_url": "https://pypi.org/project/asyncping3/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncping3/",
    "project_urls": {
      "Homepage": "https://github.com/M-o-a-T/asyncping3"
    },
    "release_url": "https://pypi.org/project/asyncping3/3.0.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A pure python3 version of ICMP ping implementation using raw socket.",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10959228,
  "releases": {
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0abe32f5a891ddd68ad952376695032699356963bc37e1cf839d425a7a9efc0",
          "md5": "8d5156f62bc90a4aac625e161833c541",
          "sha256": "87ccbdbca6b2641524d0de98a38734a1180bdd4b647ff65196e3d2fcbe1582f8"
        },
        "downloads": -1,
        "filename": "asyncping3-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d5156f62bc90a4aac625e161833c541",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 17819,
        "upload_time": "2021-07-20T19:23:37",
        "upload_time_iso_8601": "2021-07-20T19:23:37.481258Z",
        "url": "https://files.pythonhosted.org/packages/f0/ab/e32f5a891ddd68ad952376695032699356963bc37e1cf839d425a7a9efc0/asyncping3-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0abe32f5a891ddd68ad952376695032699356963bc37e1cf839d425a7a9efc0",
        "md5": "8d5156f62bc90a4aac625e161833c541",
        "sha256": "87ccbdbca6b2641524d0de98a38734a1180bdd4b647ff65196e3d2fcbe1582f8"
      },
      "downloads": -1,
      "filename": "asyncping3-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8d5156f62bc90a4aac625e161833c541",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 17819,
      "upload_time": "2021-07-20T19:23:37",
      "upload_time_iso_8601": "2021-07-20T19:23:37.481258Z",
      "url": "https://files.pythonhosted.org/packages/f0/ab/e32f5a891ddd68ad952376695032699356963bc37e1cf839d425a7a9efc0/asyncping3-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}