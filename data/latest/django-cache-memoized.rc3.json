{
  "info": {
    "author": "Bernd Wechner",
    "author_email": "bwechner@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 3.2",
      "Intended Audience :: System Administrators",
      "License :: Freely Distributable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django Cache Memoized\n\n[Django](https://www.djangoproject.com/) is one of the most popular Python web frameworks today. Importantly it provides an [ORM](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) permitting us to define models as Python classes that Django maps to a database representation for us. \n\nit supports a [configurable Caching system](https://docs.djangoproject.com/en/4.0/topics/cache/) as well to boost performance significantly (rendering pages from cache rather than rebuilding them from database queries).\n\nAlas it does not provide easy access to the arbitrary [memoization](https://en.wikipedia.org/wiki/Memoization) of functions and methods using that cache. And while it does provide a [cached_property](https://docs.djangoproject.com/en/4.0/ref/utils/#django.utils.functional.cached_property) decorator, it implements that using a dictionary which has the lifetime of a request typically and it only applies to methods.\n\nHere we provide a new decorator which will decorate an arbitrary function or method, and with which you can specify a caching key.\n\n## Memoization and Cache keys\nA brief introduction is warranted. To memoize a function  means to cache the result that it returns and on subsequent calls to that function with the same arguments, rather than *recalculate*, the result, return the previously cached result.\n\nThese results are stored in a cache with an key that can be used to retied the result later from the same cache. The key must identify the function and its arguments uniquely, and be unique to this function and the arguments it was called with, for the cached result to be of any use. \n\nWhile keys can be generated automatically to try and achieve that,  Django Cache Memoized aloows you to define one flexibly as well.\n\n## How to use\n\nFirstly, configure [Django caching](https://docs.djangoproject.com/en/4.0/topics/cache/). Without caching configured it makes no sense to memoize function to the cache.\n\nOnce configured you can memoize any function or method as follows. Three styles are supported:\n\n```python\nfrom django_cache_memoized import memoized\n\n@memoized\ndef my_function(arg1, arg2 ...)\n    ...\n    return result\n```\n\nThis will cache `result` against a default key, which is generated from the name of the function,  the class (if it is a method) and the arguments it was called with.\n\n```python\nfrom django_cache_memoized import memoized\n\n@memoized()\ndef my_function(arg1, arg2 ...)\n    ...\n    return result\n```\n\nThe same deal really. Just has optional and meaningless parentheses is all.\n\n```\nfrom django-cache-memoized import memoized\n\n@memoized(\"a key pattern\")\ndef my_function(arg1, arg2 ...)\n    ...\n    return result\n```\n\nThat is with a key pattern specified. The pattern is simply an [f-string](https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals), crucially without the **f** prefix. It can reference any of the arguments of the to-be-memoized function. For example a sample key pattern for the sample function above might be `\"my_function({arg1}, {arg2})\"`.\n\nThe f-string will be evaluated inside the decorated function when with the actually values of arg1 and arg2 etc that the function was called with.\n\nFinally, if the first argument is named 'self' then the function assumed to be a class method. If it has an attribute 'pk' (for primary key) it is further assumed to be a method on a Django model instance. \n\nBut you can force it to treat the function as a method with one optional argument:\n\n```\nfrom django_cache_memoized import memoized\n\n@memoized(\"a key pattern\", method=True)\ndef my_function(arg1, arg2 ...)\n    ...\n    return result\n```\n\nTo be honest all that does, is impact the default key generator used. That is all really.\n\n## Performance boost\n\nI wrote this because of particular need. A Django view that presented summary data to which I added drill down using a [`<details>`](https://www.w3schools.com/TAGS/tag_details.asp) tag. The details though were easiest to generate by querying the relevant models. Doing that in the template once per row in a table had a fairly hefty impact on load time. My one page was generating 4000 queries on load. One hefty table!\n\nSo I was faced with some serious head scratching query generation, joining a pile of tables and aggregating lists somehow (some of which I did do) and/or memoizing ... And many of those 4000 queries were repeats, certainly on revisits tot he page but even within the page. \n\nAnd I simply could not find a flexible memoizer of any kind let alone one that used the configured Django cache. So I wrote one.\n\nThat one page had a load time of about 7 seconds (and about 3000 queries) before memoization and with first cut memoization (i.e. just one one bottle-necked template tag I have) it dropped to under 0.7 seconds (and 7 queries). Still too many but I wanted to illustrate just how eye-opening the first `@memoized` decoration's impact was. It only gets better.\n\n## The catch\n\nThere's a catch of course. And one you will have to be aware of and manage. But this is true of all memoization. That is you need to be aware of the life cycle of the Django cache - it's different with different configurations but essentially cached items only live for so long, they typically expire at some point. That's not generally an issue unless it's too short and you're not getting a lot of benefit across requests and visits from the cache. The bigger problem to be aware of is the validity of the cached result. For example if you're caching model instance properties at all (and why not?! if it makes sense to) then if that model instance is edited and saved that might invalidate some of the cached results. Meaning you need to be aware when saving data to the data base that invalidating some cache entries is important. Failing to do so means pages using memoized results won't see the edits saved to the database.\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bernd-wechner/django-cache-memoized",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cache-memoized",
    "package_url": "https://pypi.org/project/django-cache-memoized/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cache-memoized/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bernd-wechner/django-cache-memoized/issues",
      "Homepage": "https://github.com/bernd-wechner/django-cache-memoized"
    },
    "release_url": "https://pypi.org/project/django-cache-memoized/0.3/",
    "requires_dist": [
      "django (>=3.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Django decorator that can memoize any function or method to the configured Django cache",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13053638,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8efa1993d35f88e295662fd044354573a87ab8bdb19a19d72fb3e033b03b3753",
          "md5": "dfbdae82c76712b02e97ed7e1edf4676",
          "sha256": "e03c2c185897fca393cf064cdf5e12ea5a463243c7eacf3cf7839ebc06437e45"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfbdae82c76712b02e97ed7e1edf4676",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12652,
        "upload_time": "2022-02-26T11:56:45",
        "upload_time_iso_8601": "2022-02-26T11:56:45.207195Z",
        "url": "https://files.pythonhosted.org/packages/8e/fa/1993d35f88e295662fd044354573a87ab8bdb19a19d72fb3e033b03b3753/django_cache_memoized-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6939d8fb6524ca12b677365a7adbfcda38c8003dec5c947586b68473a1bc3d5a",
          "md5": "d968fe139e56b5a943aa0e7d3236888b",
          "sha256": "1009b767b61c80792d60fd1b2850954a145819c40589cefd818f6370fad31e2d"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d968fe139e56b5a943aa0e7d3236888b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12359,
        "upload_time": "2022-02-26T11:56:47",
        "upload_time_iso_8601": "2022-02-26T11:56:47.581146Z",
        "url": "https://files.pythonhosted.org/packages/69/39/d8fb6524ca12b677365a7adbfcda38c8003dec5c947586b68473a1bc3d5a/django_cache_memoized-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d7d9461b1adc74d12c931076026dcb642ebb40158c114cd15b9a129aaa631b3",
          "md5": "3b70d8c649d8da66090eb60d2e3666e4",
          "sha256": "89108780a55e30a498f6142114fcd5687d4e6118e61c68094dfba6fcdb2e352c"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b70d8c649d8da66090eb60d2e3666e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12670,
        "upload_time": "2022-02-26T12:00:14",
        "upload_time_iso_8601": "2022-02-26T12:00:14.181414Z",
        "url": "https://files.pythonhosted.org/packages/9d/7d/9461b1adc74d12c931076026dcb642ebb40158c114cd15b9a129aaa631b3/django_cache_memoized-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99dd07f26526339a7f0325e357d8b56903b82504356eca155df75dccc0f5fa3f",
          "md5": "c7213d969d49f1cb6600486b81a92a2f",
          "sha256": "e882a3531f8d30220bfa3c3ff1891f2996b6af1fc01c4a2a396c79629766a4c5"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c7213d969d49f1cb6600486b81a92a2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12370,
        "upload_time": "2022-02-26T12:00:16",
        "upload_time_iso_8601": "2022-02-26T12:00:16.286925Z",
        "url": "https://files.pythonhosted.org/packages/99/dd/07f26526339a7f0325e357d8b56903b82504356eca155df75dccc0f5fa3f/django_cache_memoized-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b97d6004b02027f7445baef24c56f7658c733e166b011c8d395f85b562f20f6e",
          "md5": "5c4af30dd2afb19d081963d636b7deb1",
          "sha256": "e9cfc908d86db0d220bf5a4661dd77680a89c56d5b5f856b5e37f93f9c4eb10c"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c4af30dd2afb19d081963d636b7deb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12670,
        "upload_time": "2022-03-02T03:52:11",
        "upload_time_iso_8601": "2022-03-02T03:52:11.504432Z",
        "url": "https://files.pythonhosted.org/packages/b9/7d/6004b02027f7445baef24c56f7658c733e166b011c8d395f85b562f20f6e/django_cache_memoized-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "205c7ebfec35bd5115bd36a1fe4ec66a71c07d5cc190efdd4bdec34a4367ab43",
          "md5": "8da85c65a8f1146485e5eafa4207cb36",
          "sha256": "802c6ba2f333292e0cb7a392abf06178dd64b542681f2bb6af757056539123a5"
        },
        "downloads": -1,
        "filename": "django_cache_memoized-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8da85c65a8f1146485e5eafa4207cb36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12379,
        "upload_time": "2022-03-02T03:52:13",
        "upload_time_iso_8601": "2022-03-02T03:52:13.205937Z",
        "url": "https://files.pythonhosted.org/packages/20/5c/7ebfec35bd5115bd36a1fe4ec66a71c07d5cc190efdd4bdec34a4367ab43/django_cache_memoized-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b97d6004b02027f7445baef24c56f7658c733e166b011c8d395f85b562f20f6e",
        "md5": "5c4af30dd2afb19d081963d636b7deb1",
        "sha256": "e9cfc908d86db0d220bf5a4661dd77680a89c56d5b5f856b5e37f93f9c4eb10c"
      },
      "downloads": -1,
      "filename": "django_cache_memoized-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c4af30dd2afb19d081963d636b7deb1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12670,
      "upload_time": "2022-03-02T03:52:11",
      "upload_time_iso_8601": "2022-03-02T03:52:11.504432Z",
      "url": "https://files.pythonhosted.org/packages/b9/7d/6004b02027f7445baef24c56f7658c733e166b011c8d395f85b562f20f6e/django_cache_memoized-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "205c7ebfec35bd5115bd36a1fe4ec66a71c07d5cc190efdd4bdec34a4367ab43",
        "md5": "8da85c65a8f1146485e5eafa4207cb36",
        "sha256": "802c6ba2f333292e0cb7a392abf06178dd64b542681f2bb6af757056539123a5"
      },
      "downloads": -1,
      "filename": "django_cache_memoized-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8da85c65a8f1146485e5eafa4207cb36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12379,
      "upload_time": "2022-03-02T03:52:13",
      "upload_time_iso_8601": "2022-03-02T03:52:13.205937Z",
      "url": "https://files.pythonhosted.org/packages/20/5c/7ebfec35bd5115bd36a1fe4ec66a71c07d5cc190efdd4bdec34a4367ab43/django_cache_memoized-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}