{
  "info": {
    "author": "Andrei Lapets",
    "author_email": "a@lapets.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "======\nblooms\n======\n\nLightweight Bloom filter data structure derived from the built-in bytearray type.\n\n|pypi| |readthedocs| |actions| |coveralls|\n\n.. |pypi| image:: https://badge.fury.io/py/blooms.svg\n   :target: https://badge.fury.io/py/blooms\n   :alt: PyPI version and link.\n\n.. |readthedocs| image:: https://readthedocs.org/projects/blooms/badge/?version=latest\n   :target: https://blooms.readthedocs.io/en/latest/?badge=latest\n   :alt: Read the Docs documentation status.\n\n.. |actions| image:: https://github.com/nthparty/blooms/workflows/lint-test-cover-docs/badge.svg\n   :target: https://github.com/nthparty/blooms/actions/workflows/lint-test-cover-docs.yml\n   :alt: GitHub Actions status.\n\n.. |coveralls| image:: https://coveralls.io/repos/github/nthparty/blooms/badge.svg?branch=main\n   :target: https://coveralls.io/github/nthparty/blooms?branch=main\n   :alt: Coveralls test coverage summary.\n\nPurpose\n-------\n\n.. |bytearray| replace:: ``bytearray``\n.. _bytearray: https://docs.python.org/3/library/stdtypes.html#bytearray\n\nThis library provides a simple and lightweight data structure for representing `Bloom filters <https://en.wikipedia.org/wiki/Bloom_filter>`__ that is derived from the built-in |bytearray|_ type. The data structure has methods for the insertion, membership, union, and subset operations. In addition, methods for estimating capacity and for converting to and from Base64 strings are available.\n\nInstallation and Usage\n----------------------\nThis library is available as a `package on PyPI <https://pypi.org/project/blooms>`__::\n\n    python -m pip install blooms\n\nThe library can be imported in the usual ways::\n\n    import blooms\n    from blooms import blooms\n\nExamples\n^^^^^^^^\nThis library makes it possible to concisely create, populate, and query simple `Bloom filters <https://en.wikipedia.org/wiki/Bloom_filter>`__. The example below constructs a Bloom filter that is 32 bits (*i.e.*, four bytes) in size::\n\n    >>> from blooms import blooms\n    >>> b = blooms(4)\n\n.. |insertion_operator| replace:: insertion operator ``@=``\n.. _insertion_operator: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.__imatmul__\n\nA bytes-like object can be inserted into an instance using the |insertion_operator|_. It is the responsibility of the user of the library to hash and truncate the bytes-like object being inserted. Only the bytes that remain after truncation contribute to the membership of the bytes-like object within the Bloom filter::\n\n    >>> from hashlib import sha256\n    >>> x = 'abc' # Value to insert.\n    >>> h = sha256(x.encode()).digest() # Hash of value.\n    >>> t = h[:2] # Truncated hash.\n    >>> b @= t # Insert the value into the Bloom filter.\n    >>> b.hex()\n    '00000004'\n\n.. |membership_operator| replace:: membership operator ``@``\n.. _membership_operator: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.__rmatmul__\n\nWhen testing whether a bytes-like object is a member using the |membership_operator|_ of an instance, the same hashing and truncation operations should be applied::\n\n    >>> sha256('abc'.encode()).digest()[:2] @ b\n    True\n    >>> sha256('xyz'.encode()).digest()[:2] @ b\n    False\n\n\nThe |insertion_operator|_ also accepts iterable containers::\n\n    >>> x = sha256('x'.encode()).digest()[:2]\n    >>> y = sha256('y'.encode()).digest()[:2]\n    >>> z = sha256('z'.encode()).digest()[:2]\n    >>> b @= [x, y, z]\n    >>> b.hex()\n    '02200006'\n\n.. |union_operator| replace:: built-in ``|`` operator\n.. _union_operator: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.__or__\n\nThe union of two Bloom filters (both having the same size) can be computed via the |union_operator|_::\n\n    >>> c = blooms(4)\n    >>> c @= sha256('xyz'.encode()).digest()[:2]\n    >>> d = c | b\n    >>> sha256('abc'.encode()).digest()[:2] @ d\n    True\n    >>> sha256('xyz'.encode()).digest()[:2] @ d\n    True\n\nIt is also possible to check whether the members of one Bloom filter `are a subset <https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.issubset>`__ of the members of another Bloom filter::\n\n    >>> b.issubset(c)\n    False\n    >>> b.issubset(d)\n    True\n\n.. |saturation| replace:: ``saturation``\n.. _saturation: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.saturation\n\n.. |float| replace:: ``float``\n.. _float: https://docs.python.org/3/library/functions.html#float\n\nThe |saturation|_ method calculates the saturation of a Bloom filter. The *saturation* is a |float|_ value (between ``0.0`` and ``1.0``) that represents an upper bound on the rate with which false positives will occur when testing bytes-like objects (of a specific length) for membership within the Bloom filter::\n\n    >>> b = blooms(32)\n    >>> from secrets import token_bytes\n    >>> for _ in range(8):\n    ...     b @= token_bytes(4)\n    >>> b.saturation(4)\n    0.03125\n\n.. |capacity| replace:: ``capacity``\n.. _capacity: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.capacity\n\nIt is also possible to determine the approximate maximum capacity of a Bloom filter for a given saturation limit using the |capacity|_ method. For example, the output below indicates that a saturation of ``0.05`` will likely be reached after more than ``28`` insertions of bytes-like objects of length ``8``::\n\n    >>> b = blooms(32)\n    >>> b.capacity(8, 0.05)\n    28\n\nIn addition, conversion methods to and from Base64 strings are included to support concise encoding and decoding::\n\n    >>> b.to_base64()\n    'AiAABg=='\n    >>> sha256('abc'.encode()).digest()[:2] @ blooms.from_base64('AiAABg==')\n    True\n\n.. |specialize| replace:: ``specialize``\n.. _specialize: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.specialize\n\nIf it is preferable to have a Bloom filter data structure that encapsulates a particular serialization, hashing, and truncation scheme, the recommended approach is to define a derived class. The |specialize|_ method makes it possible to do so in a concise way::\n\n    >>> encode = lambda x: sha256(x).digest()[:2]\n    >>> blooms_custom = blooms.specialize(name='blooms_custom', encode=encode)\n    >>> b = blooms_custom(4)\n    >>> b @= bytes([1, 2, 3])\n    >>> bytes([1, 2, 3]) @ b\n    True\n\n.. |from_base64| replace:: ``from_base64``\n.. _from_base64: https://blooms.readthedocs.io/en/1.1.0/_source/blooms.html#blooms.blooms.blooms.from_base64\n\nThe user of the library is responsible for ensuring that Base64-encoded Bloom filters are converted back into an an instance of the appropriate derived class by using the |from_base64|_ method that belongs to that derived class::\n\n    >>> isinstance(blooms_custom.from_base64(b.to_base64()), blooms_custom)\n    True\n\nDevelopment\n-----------\nAll installation and development dependencies are fully specified in ``pyproject.toml``. The ``project.optional-dependencies`` object is used to `specify optional requirements <https://peps.python.org/pep-0621>`__ for various development tasks. This makes it possible to specify additional options (such as ``docs``, ``lint``, and so on) when performing installation using `pip <https://pypi.org/project/pip>`__::\n\n    python -m pip install .[docs,lint]\n\nDocumentation\n^^^^^^^^^^^^^\nThe documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org>`__::\n\n    python -m pip install .[docs]\n    cd docs\n    sphinx-apidoc -f -E --templatedir=_templates -o _source .. && make html\n\nTesting and Conventions\n^^^^^^^^^^^^^^^^^^^^^^^\nAll unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org>`__ (see the ``pyproject.toml`` file for configuration details)::\n\n    python -m pip install .[test]\n    python -m pytest\n\nThe subset of the unit tests included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`__::\n\n    python src/blooms/blooms.py -v\n\nStyle conventions are enforced using `Pylint <https://pylint.pycqa.org>`__::\n\n    python -m pip install .[lint]\n    python -m pylint src/blooms test/test_blooms.py\n\nContributions\n^^^^^^^^^^^^^\nIn order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <https://github.com/nthparty/blooms>`__ for this library.\n\nVersioning\n^^^^^^^^^^\nThe version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`__.\n\nPublishing\n^^^^^^^^^^\nThis library can be published as a `package on PyPI <https://pypi.org/project/blooms>`__ by a package maintainer. First, install the dependencies required for packaging and publishing::\n\n    python -m pip install .[publish]\n\nEnsure that the correct version number appears in ``pyproject.toml``, and that any links in this README document to the Read the Docs documentation of this package (or its dependencies) have appropriate version numbers. Also ensure that the Read the Docs project for this library has an `automation rule <https://docs.readthedocs.io/en/stable/automation-rules.html>`__ that activates and sets as the default all tagged versions. Create and push a tag for this version (replacing ``?.?.?`` with the version number)::\n\n    git tag ?.?.?\n    git push origin ?.?.?\n\nRemove any old build/distribution files. Then, package the source into a distribution archive::\n\n    rm -rf build dist src/*.egg-info\n    python -m build --sdist --wheel .\n\nFinally, upload the package distribution archive to `PyPI <https://pypi.org>`__::\n\n    python -m twine upload dist/*\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blooms",
    "package_url": "https://pypi.org/project/blooms/",
    "platform": null,
    "project_url": "https://pypi.org/project/blooms/",
    "project_urls": {
      "Documentation": "https://blooms.readthedocs.io",
      "Repository": "https://github.com/nthparty/blooms"
    },
    "release_url": "https://pypi.org/project/blooms/1.1.0/",
    "requires_dist": [
      "coveralls (~=3.3.1) ; extra == 'coveralls'",
      "toml (~=0.10.2) ; extra == 'docs'",
      "sphinx (~=4.2.0) ; extra == 'docs'",
      "sphinx-rtd-theme (~=1.0.0) ; extra == 'docs'",
      "pylint (~=2.14.0) ; extra == 'lint'",
      "build (~=0.8) ; extra == 'publish'",
      "twine (~=4.0) ; extra == 'publish'",
      "pytest (~=7.0) ; extra == 'test'",
      "pytest-cov (~=3.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Lightweight Bloom filter data structure derived from the built-in bytearray type.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14684864,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd2f978a71f09f4e6a0388fc332fa5138e349a5d706f85a7d90f51cc0c48d76f",
          "md5": "3dde4a050f907a6e1d70c4d38ef1b9cf",
          "sha256": "cef587cc5f1b5bcbd46be7c0b25dacbac23412ab16b22b13d60229996098996a"
        },
        "downloads": -1,
        "filename": "blooms-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3dde4a050f907a6e1d70c4d38ef1b9cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3637,
        "upload_time": "2021-04-20T16:29:13",
        "upload_time_iso_8601": "2021-04-20T16:29:13.266648Z",
        "url": "https://files.pythonhosted.org/packages/dd/2f/978a71f09f4e6a0388fc332fa5138e349a5d706f85a7d90f51cc0c48d76f/blooms-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17be4b9418271f5a7ca0b9b66e3983d54c7aeee00115ed7d1be2ada43e63b8b6",
          "md5": "95dab4fcd942a5c49b98ab3aeeef2fc1",
          "sha256": "a74692edc822bf5a4d8827bce58cd5166cb9b7252c7156780d5e7c45d2e09ac2"
        },
        "downloads": -1,
        "filename": "blooms-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95dab4fcd942a5c49b98ab3aeeef2fc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2754,
        "upload_time": "2021-04-20T16:29:14",
        "upload_time_iso_8601": "2021-04-20T16:29:14.768241Z",
        "url": "https://files.pythonhosted.org/packages/17/be/4b9418271f5a7ca0b9b66e3983d54c7aeee00115ed7d1be2ada43e63b8b6/blooms-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18e6aa27102971e53c1e5569ea257a5e30126645ab3675c5d04b21157cdc58b8",
          "md5": "2b1c8fe3405968c5240ae2309f0a0ac5",
          "sha256": "3f590a2ec4efc9c75d7e6eb7fd4fa8ae58625bfadc44a78fee721a4ef4f960cc"
        },
        "downloads": -1,
        "filename": "blooms-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b1c8fe3405968c5240ae2309f0a0ac5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3808,
        "upload_time": "2021-05-18T01:05:48",
        "upload_time_iso_8601": "2021-05-18T01:05:48.747537Z",
        "url": "https://files.pythonhosted.org/packages/18/e6/aa27102971e53c1e5569ea257a5e30126645ab3675c5d04b21157cdc58b8/blooms-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "094c36076b91396c2724611614daebb2aee25682f3773735607de40f9ddc0361",
          "md5": "fab877b91138badc746f83aaa24bc0be",
          "sha256": "27e95e663adbe776822f31e7cc78bb98aa5ed48550246fa25912acfbdce7fdf0"
        },
        "downloads": -1,
        "filename": "blooms-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fab877b91138badc746f83aaa24bc0be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2936,
        "upload_time": "2021-05-18T01:05:50",
        "upload_time_iso_8601": "2021-05-18T01:05:50.361382Z",
        "url": "https://files.pythonhosted.org/packages/09/4c/36076b91396c2724611614daebb2aee25682f3773735607de40f9ddc0361/blooms-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c0f175871803c7365df38c5ff71a1c56f899c21042a94629ac562bce63f4ebc",
          "md5": "d71b9a80f18bc92c37a9e56a3e5a3151",
          "sha256": "fa88450a8cfa803ef26d26762f6918f6130822257cd795fbc9ab8e42be74d0a3"
        },
        "downloads": -1,
        "filename": "blooms-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d71b9a80f18bc92c37a9e56a3e5a3151",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3992,
        "upload_time": "2021-07-12T03:50:05",
        "upload_time_iso_8601": "2021-07-12T03:50:05.874897Z",
        "url": "https://files.pythonhosted.org/packages/2c/0f/175871803c7365df38c5ff71a1c56f899c21042a94629ac562bce63f4ebc/blooms-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd2f127e3fb1d622d189a29f44808f0b06f1cf1ce22653e02b18dcb954fac630",
          "md5": "967c10c57bb4f281bf6e3fdab1ae9ec1",
          "sha256": "5e2d62b6248e2ed1d63bbca1c7a8072d7b53ecbc5ca08dcb6839bcf6bad03835"
        },
        "downloads": -1,
        "filename": "blooms-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "967c10c57bb4f281bf6e3fdab1ae9ec1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3101,
        "upload_time": "2021-07-12T03:50:07",
        "upload_time_iso_8601": "2021-07-12T03:50:07.306395Z",
        "url": "https://files.pythonhosted.org/packages/dd/2f/127e3fb1d622d189a29f44808f0b06f1cf1ce22653e02b18dcb954fac630/blooms-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c5b009f340a50aa5f474ab20e25220aede092c87b6c0afb6690a46d76effeaa",
          "md5": "6c04c36d276a075e92b0c9b404f27e7f",
          "sha256": "6c22d86b76777a191eb0768d3432932c8fa6bbd06a30e776be6f2d656923920e"
        },
        "downloads": -1,
        "filename": "blooms-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c04c36d276a075e92b0c9b404f27e7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8851,
        "upload_time": "2022-03-26T03:19:39",
        "upload_time_iso_8601": "2022-03-26T03:19:39.284247Z",
        "url": "https://files.pythonhosted.org/packages/6c/5b/009f340a50aa5f474ab20e25220aede092c87b6c0afb6690a46d76effeaa/blooms-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cd809d1deac0c56a90fccfe4fdc5f1555fe84359945e488c111361695563fa9",
          "md5": "005dc25973d9484f23ec8a69de5c8877",
          "sha256": "0f28fc316c99f9ace26b9906fc209d645a831b952def3a833b88b346b9e31e87"
        },
        "downloads": -1,
        "filename": "blooms-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "005dc25973d9484f23ec8a69de5c8877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9756,
        "upload_time": "2022-03-26T03:19:40",
        "upload_time_iso_8601": "2022-03-26T03:19:40.651035Z",
        "url": "https://files.pythonhosted.org/packages/5c/d8/09d1deac0c56a90fccfe4fdc5f1555fe84359945e488c111361695563fa9/blooms-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ed1ca516247278f33e8894b589aa0d301197df903a98bf1f623cd5cfc3b224",
          "md5": "c090851f448b3b1ca6458db0c1fe2366",
          "sha256": "20a4cb0256f1a2559e453960d45c141b13b82c74340ee059546c199815cdee72"
        },
        "downloads": -1,
        "filename": "blooms-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c090851f448b3b1ca6458db0c1fe2366",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9694,
        "upload_time": "2022-08-08T05:35:13",
        "upload_time_iso_8601": "2022-08-08T05:35:13.129550Z",
        "url": "https://files.pythonhosted.org/packages/60/ed/1ca516247278f33e8894b589aa0d301197df903a98bf1f623cd5cfc3b224/blooms-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c15a5041b02d123b261e93c8f6a44b35b5588e281833327e4ac19a73dc8a4285",
          "md5": "373a9292d554fcc5312a8d4e0738a4a1",
          "sha256": "c09c3931e059261ee472e125bea2147d40a1adda44e9fbd29305b23f9bf87747"
        },
        "downloads": -1,
        "filename": "blooms-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "373a9292d554fcc5312a8d4e0738a4a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13081,
        "upload_time": "2022-08-08T05:35:14",
        "upload_time_iso_8601": "2022-08-08T05:35:14.619442Z",
        "url": "https://files.pythonhosted.org/packages/c1/5a/5041b02d123b261e93c8f6a44b35b5588e281833327e4ac19a73dc8a4285/blooms-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60ed1ca516247278f33e8894b589aa0d301197df903a98bf1f623cd5cfc3b224",
        "md5": "c090851f448b3b1ca6458db0c1fe2366",
        "sha256": "20a4cb0256f1a2559e453960d45c141b13b82c74340ee059546c199815cdee72"
      },
      "downloads": -1,
      "filename": "blooms-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c090851f448b3b1ca6458db0c1fe2366",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9694,
      "upload_time": "2022-08-08T05:35:13",
      "upload_time_iso_8601": "2022-08-08T05:35:13.129550Z",
      "url": "https://files.pythonhosted.org/packages/60/ed/1ca516247278f33e8894b589aa0d301197df903a98bf1f623cd5cfc3b224/blooms-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c15a5041b02d123b261e93c8f6a44b35b5588e281833327e4ac19a73dc8a4285",
        "md5": "373a9292d554fcc5312a8d4e0738a4a1",
        "sha256": "c09c3931e059261ee472e125bea2147d40a1adda44e9fbd29305b23f9bf87747"
      },
      "downloads": -1,
      "filename": "blooms-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "373a9292d554fcc5312a8d4e0738a4a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13081,
      "upload_time": "2022-08-08T05:35:14",
      "upload_time_iso_8601": "2022-08-08T05:35:14.619442Z",
      "url": "https://files.pythonhosted.org/packages/c1/5a/5041b02d123b261e93c8f6a44b35b5588e281833327e4ac19a73dc8a4285/blooms-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}