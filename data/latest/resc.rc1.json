{
  "info": {
    "author": "tatsuya.s",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![build](https://github.com/tatsuya4649/resc/actions/workflows/build.yml/badge.svg)](https://github.com/tatsuya4649/resc/actions/workflows/build.yml)\n![issues](https://img.shields.io/github/issues/tatsuya4649/resc)\n![forks](https://img.shields.io/github/forks/tatsuya4649/resc)\n![starts](https://img.shields.io/github/stars/tatsuya4649/resc)\n![license](https://img.shields.io/github/license/tatsuya4649/resc)\n![python](https://img.shields.io/badge/python-3.6%7C3.7%7C3.8%7C3.9-blue)\n[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/tatsuya4649/resc.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/tatsuya4649/resc/context:javascript)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/tatsuya4649/resc.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/tatsuya4649/resc/context:python)\n[![codecov](https://codecov.io/gh/tatsuya4649/resc/branch/master/graph/badge.svg?token=G0DYPGWLKA)](https://codecov.io/gh/tatsuya4649/resc)\n\n# Resource checker\n\nResc check resources(CPU,memory,disk) of target host(local or remote) and execute script.\n\n# Install\n\n```\npip install git+https://github.com/tatsuya4649/resc\n\n```\n\n# Usage\n\nexample Python code.\n\n```kkkkkkkkkkkkkkk\nfrom resc import Resc\n\nresc = Resc(\n\tcpu={\"threshold\": 80.0,\"interval\": 10},\n\tmemory={\"threshold\": 90.0},\n\tdisk={\"threshold\":75,\"path\":\"/\"},\n)\n\n@resc.register(\n\ttrigger=\"* * * * *\",\t# crontab job time\n\trescdir=\"rescs\",\t# output directory of compiled python script file\n\toutputfile=\"output\",\t# output file of crontab if it is fired when resource threshold is exceeded.(directory: ~/.resc/log/ + outputfile)\n\tip=\"13.231.122.182\",\t# if check remote host,specify IP address\n\tusername=\"ubuntu\",\t# if check remote host,remote host username\n\tcall_first=True,\t\t\t# call just now?\n\tkey_path=\"~/.aws/ExampleSSH.pem\", # if check remote host, key file path to connect remote host with SSH.\n)\ndef hello():\n\tprint(\"OVER RESOURCE!!!\")\n\nhello()\n```\n\n# How does that work?\n\n![overview](docs/assets/resc_overview.png)\n\n1. Register decorator is a decorator to prepare for resource check using given threshold of resources,host information,etc.\n2. Decorated function(above def hello()) is called function when resource threshold is exceeded.\n3. Make new python script for crontab.(~/.resc/ + rescdir)\n4. Register crontab with 3.python script and interval info(trigger argument of register decorator).\n\nIf call_first argument is False(default False), decorated function is not called until resource threshold are exceeded.\n\nWARNING: Because decorated function will be compiled, it must be coded as an independent scope.\n\n## bad example.\n\n```\nimport math\nclass Bad:\n\t@classmethod\n\tdef example(self):\n\t\treturn \"hello world\"\n\ndef bad():\n\t# NameError: name 'math' is not defined\n\tmath.floor(10.9)\n\tBad.example()\n```\n\n## good example.\n\n```\ndef good():\n\timport math\n\tclass Bad:\n\t\t@classmethod\n\t\tdef example(self):\n\t\t\treturn \"hello world\"\n\tmath.floor(10.9)\n```\n\n# Command Line\n\n```\n\nCPU or Memory or Disk must be not empty.\nusage: resc [-h] [-c CPU_T] [--cpu_mode CPU_MODE] [-i CPU_INTERVAL] [-m MEM_T] [--mem_mode MEM_MODE] [-d DISK_T] [-p DISK_PATH]\n            [--disk_mode DISK_MODE] [--log LOG] [-s] [-q] [--not_found NOT_FOUND]\n\nResouce Checker.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CPU_T, --cpu_t CPU_T\n                        CPU threshold value\n  --cpu_mode CPU_MODE   CPU mode\n  -i CPU_INTERVAL, --cpu_interval CPU_INTERVAL\n                        Time to confirm CPU threshold\n  -m MEM_T, --mem_t MEM_T\n                        Memory threshold value\n  --mem_mode MEM_MODE   Memory mode\n  -d DISK_T, --disk_t DISK_T\n                        Disk threshold value\n  -p DISK_PATH, --disk_path DISK_PATH\n                        Disk path\n  --disk_mode DISK_MODE\n                        Disk mode\n  --log LOG             Analize log file.receive path.\n  -s, --log_server      Analize log file on GUI.\n  -q                    Quiet output\n  --not_found NOT_FOUND\n                        for crontab. If not found script, write to log\n\n```\n\n# Term\n\n**threshold**(cpu):  threshold that is system-wide CPU utilization as a percentage.int or float type.\n\n**interval**(cpu): interval is check interval time(s).int or float type.\n\n**threshold**(memory): threshold that is system memory utilization as a percentage.int or float type.\n\n**path**(disk): check the capacity of the partition according to the given path.\n\n**threshold**(disk): threshold that is partition utilization which containes given path.\n\n\n# Log Analyze Server\n\nYou can use the server to analyze the RescLog file.\n\n**in python code**\n\n```\nfrom resc import start_server\n\n# log server must be in main module.\nif __name__ == \"__main__\":\n    start_server()\n```\n\n**command line**\n\n```\nresc --log-serkver\n```\n\nDefualt bind host is 127.0.0.1, bind port is 55555.\n\nIf you want to change them, set environment variebales. host is RESCLOGSERVER_IP, port is RESCLOGSERVER_PORT.\n\n**command line(custom port version)**\n\n```\nRESCLOGSERVER_PORT=44444 resc --log-serkver\n```\n\nThen, start log server to analyze your Resc log file.\n\n```\nINFO:     Uvicorn running on http://127.0.0.1:55555 (Press CTRL+C to quit)\nINFO:     Started reloader process [262092] using statreload\nINFO:     Started server process [262094]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n![loganalyzer](docs/assets/loganalyzer.png)\n\nIf you accessed this url with web browser, display like this image.\n\nSelect log file, display result of analyzing.\n\n![logresult](docs/assets/logresult.png)\n\n* Failure/Success: Whether a error has occured or not.\n* date: Logggine date. the date when the registered function was called.\n* over: Whether the threshold of the registered resource has been exceeded or not.\n* script file: Called python script(compiled script).\n* trigger function name: Registered function name.\n* remote host: Remote host that registered resources are checked.\n* source: 'trigger' function code.\n* stdout: Stdout of trigger function.\n* stderr: Stderr of trigger function.\n\n# Crontab\n\nCrontab is a important element of this library.So, show 'man crontab or crontab -e' for detail of crontab\n\n# Required\n\nPython3(>=3.6),Crontab,and python library in requirements.txt.\n\n# LICENCE\n\nThis project is licensed under the terms of the MIT license.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tatsuya4649/resc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "resc",
    "package_url": "https://pypi.org/project/resc/",
    "platform": "",
    "project_url": "https://pypi.org/project/resc/",
    "project_urls": {
      "Homepage": "https://github.com/tatsuya4649/resc"
    },
    "release_url": "https://pypi.org/project/resc/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "RESC(RESource Checker)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11069578,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87f559cb15808b8c438c6fd997597433a26f478cf54d73755ad687c7da1bd02c",
          "md5": "309fdfc6571701c9c6cb98b7f4272615",
          "sha256": "83b87fe81ec381e0556982eda47391d5375b82f59ad559e904335e0398a2fbaa"
        },
        "downloads": -1,
        "filename": "resc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "309fdfc6571701c9c6cb98b7f4272615",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 342801,
        "upload_time": "2021-08-02T13:46:31",
        "upload_time_iso_8601": "2021-08-02T13:46:31.327995Z",
        "url": "https://files.pythonhosted.org/packages/87/f5/59cb15808b8c438c6fd997597433a26f478cf54d73755ad687c7da1bd02c/resc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87f559cb15808b8c438c6fd997597433a26f478cf54d73755ad687c7da1bd02c",
        "md5": "309fdfc6571701c9c6cb98b7f4272615",
        "sha256": "83b87fe81ec381e0556982eda47391d5375b82f59ad559e904335e0398a2fbaa"
      },
      "downloads": -1,
      "filename": "resc-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "309fdfc6571701c9c6cb98b7f4272615",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 342801,
      "upload_time": "2021-08-02T13:46:31",
      "upload_time_iso_8601": "2021-08-02T13:46:31.327995Z",
      "url": "https://files.pythonhosted.org/packages/87/f5/59cb15808b8c438c6fd997597433a26f478cf54d73755ad687c7da1bd02c/resc-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}