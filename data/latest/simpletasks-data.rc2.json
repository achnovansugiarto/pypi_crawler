{
  "info": {
    "author": "Thomas Muguet",
    "author_email": "thomas.muguet@upowa.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Utilities"
    ],
    "description": "# simpletasks-data\n\nAdditional tasks for [simpletasks](https://github.com/upOwa/simpletasks) to handle data.\n\nProvides an `ImportTask` to import data into a [Flask-SQLAlchemy](https://flask-sqlalchemy.palletsprojects.com/) model, from any source of data.\n\nData sources provided are:\n* CSV (`ImportCsv`)\n* SQLAlchemy query (`ImportTable`)\nCustom data sources can easily be implemented via inheriting `ImportSource`.\n\nOther data sources are provided by other libraries:\n* [gapi-helper](https://github.com/upOwa/gapi-helper) provides Google Sheets as source.\n\n\nSample:\n```python\nimport contextlib\nfrom typing import Iterable, Iterator, List, Optional, Sequence\n\nimport click\n\nfrom simpletasks import Cli, CliParams\nfrom simpletasks_data import ImportSource, ImportTask, Mapping\n\nfrom myapp import db\n\n@click.group()\ndef cli():\n    pass\n\n\nclass Asset(db.Model):\n    \"\"\"Model to import to\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    serialnumber = db.Column(db.String(128), index=True)\n    warehouse = db.Column(db.String(128))\n    status = db.Column(db.String(128))\n    product = db.Column(db.String(128))\n    guid = db.Column(db.String(36))\n\n\nclass AssetHistory(db.Model):\n    \"\"\"Model to keep track of changes\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.DateTime)\n    asset_id = db.Column(db.Integer, db.ForeignKey(\"asset.id\"), nullable=False, index=True)\n    asset = db.relationship(\"Asset\", foreign_keys=asset_id)\n\n    old_warehouse = db.Column(db.String(128))\n    new_warehouse = db.Column(db.String(128))\n    old_status = db.Column(db.String(128))\n    new_status = db.Column(db.String(128))\n\n\n@Cli(cli, params=[CliParams.progress(), CliParams.dryrun()])\nclass ImportAssetsTask(ImportTask):\n    class _AssetsSource(ImportSource):\n        class _AssetMapping(Mapping):\n            def __init__(self) -> None:\n                super().__init__()\n\n                # Defines mapping between the input data and the fields from the model\n                # self.<name of the field in the model> = self.auto() -- in the order of the input data\n                self.serialnumber = self.auto()\n                self.status = self.auto(keep_history=True)\n                self.warehouse = self.auto(keep_history=True)\n                self.product = self.auto()\n                self.guid = self.auto()\n\n                # If there are gaps in the input data (i.e. fields not being used in the model), you can either:\n                # - use `self.foobar = self.col()` instead of `self.foobar = self.auto()` to specify the column name after the gap\n                # - use `foobar = self.auto()` to still register the gap/column, but not use it in the model\n\n            def get_key_column_name(self) -> str:\n                # By default, we use the \"id\" field - this overrides it\n                return \"serialnumber\"\n\n            def get_header_line_number(self) -> int:\n                # By default we skip the first (0-index) line (header) - setting to -1 includes all lines\n                return -1\n\n        @contextlib.contextmanager\n        def getGeneratorData(self) -> Iterator[Iterable[Sequence[str]]]:\n            # Custom data generator\n            output: List[Sequence[str]] = []\n\n            for x in o:\n                output.append([serialnumber, status, warehouse, product, guid])\n\n            yield output\n\n        def __init__(self) -> None:\n            super().__init__(self._AssetMapping())\n\n    def createModel(self) -> Asset:\n        return Asset()\n\n    def createHistoryModel(self, base: Asset) -> Optional[AssetHistory]:\n        o = AssetHistory()\n        o.asset_id = base.id\n        return o\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(model=Asset(), keep_history=True, *args, **kwargs)\n\n    def get_sources(self) -> Iterable[ImportSource]:\n        # Here we can have multiple sources if we wish\n        return [self._AssetsSource()]\n```\n\n## Contributing\n\nTo initialize the environment:\n```\npoetry install --no-root\npoetry install -E geoalchemy\n```\n\nTo run tests (including linting and code formatting checks), please run:\n```\npoetry run pytest --mypy --flake8 && poetry run black --check .\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/upOwa/simpletasks-data",
    "keywords": "",
    "license": "LGPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simpletasks-data",
    "package_url": "https://pypi.org/project/simpletasks-data/",
    "platform": "",
    "project_url": "https://pypi.org/project/simpletasks-data/",
    "project_urls": {
      "Homepage": "https://github.com/upOwa/simpletasks-data",
      "Repository": "https://github.com/upOwa/simpletasks-data"
    },
    "release_url": "https://pypi.org/project/simpletasks-data/0.2.0/",
    "requires_dist": [
      "simpletasks (>=0.1.1,<0.2.0)",
      "Flask (>=1.1.2,<2.0.0)",
      "Flask-SQLAlchemy (>=2.4.4,<3.0.0)",
      "GeoAlchemy2 (>=0.8.4,<0.9.0); extra == \"geoalchemy\""
    ],
    "requires_python": ">=3.6.1,<4.0.0",
    "summary": "A simple library to import data into a database from different sources (extensible)",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9297046,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf7d0b027af658b660b34c0e6c79a1faf29d4e64235dad91313bb5ca646f4408",
          "md5": "561def9aaae87f544ffbe0845914b585",
          "sha256": "a087ade2364e3b57a2f1398f72772d21563e65a7b5e398e5f5ae1d8e2ec33d7c"
        },
        "downloads": -1,
        "filename": "simpletasks_data-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "561def9aaae87f544ffbe0845914b585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 20766,
        "upload_time": "2020-12-29T15:58:03",
        "upload_time_iso_8601": "2020-12-29T15:58:03.950425Z",
        "url": "https://files.pythonhosted.org/packages/bf/7d/0b027af658b660b34c0e6c79a1faf29d4e64235dad91313bb5ca646f4408/simpletasks_data-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea57ac5834e6233a8b097503b0fb3d54cf40eda20f1e1c007476b4d65f8313fa",
          "md5": "d5aa9c2df7e0c28552d019c6cd486100",
          "sha256": "547558669ad9414a5389f897f96207d88cc0d84af47e94353c3efc57e7c9588c"
        },
        "downloads": -1,
        "filename": "simpletasks-data-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5aa9c2df7e0c28552d019c6cd486100",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 19237,
        "upload_time": "2020-12-29T15:58:02",
        "upload_time_iso_8601": "2020-12-29T15:58:02.862900Z",
        "url": "https://files.pythonhosted.org/packages/ea/57/ac5834e6233a8b097503b0fb3d54cf40eda20f1e1c007476b4d65f8313fa/simpletasks-data-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fad8ab31f2682f7d5f55d2a04326f734b232faa3e1796516feef5fa03e83b31e",
          "md5": "8236f41b94dd3c25d0eb75374a13aad5",
          "sha256": "7c2b3dd3d4576653daedf05fbf19365efd22cdf0d54b42bd32cf2ee214d18bb1"
        },
        "downloads": -1,
        "filename": "simpletasks_data-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8236f41b94dd3c25d0eb75374a13aad5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 20298,
        "upload_time": "2021-02-02T16:35:04",
        "upload_time_iso_8601": "2021-02-02T16:35:04.924682Z",
        "url": "https://files.pythonhosted.org/packages/fa/d8/ab31f2682f7d5f55d2a04326f734b232faa3e1796516feef5fa03e83b31e/simpletasks_data-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f66daa1eee5c70f63d0312b1b74925459ddfd1a84ada0da5b6fc73e969e27d",
          "md5": "6cb13c985c1e4b44567cbfe11316857c",
          "sha256": "d23dd57f826ff7e8080a818dc11bc7a77ce1d1e3c464112db300fae70177d60d"
        },
        "downloads": -1,
        "filename": "simpletasks-data-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6cb13c985c1e4b44567cbfe11316857c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 19645,
        "upload_time": "2021-02-02T16:35:03",
        "upload_time_iso_8601": "2021-02-02T16:35:03.732875Z",
        "url": "https://files.pythonhosted.org/packages/12/f6/6daa1eee5c70f63d0312b1b74925459ddfd1a84ada0da5b6fc73e969e27d/simpletasks-data-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fad8ab31f2682f7d5f55d2a04326f734b232faa3e1796516feef5fa03e83b31e",
        "md5": "8236f41b94dd3c25d0eb75374a13aad5",
        "sha256": "7c2b3dd3d4576653daedf05fbf19365efd22cdf0d54b42bd32cf2ee214d18bb1"
      },
      "downloads": -1,
      "filename": "simpletasks_data-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8236f41b94dd3c25d0eb75374a13aad5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 20298,
      "upload_time": "2021-02-02T16:35:04",
      "upload_time_iso_8601": "2021-02-02T16:35:04.924682Z",
      "url": "https://files.pythonhosted.org/packages/fa/d8/ab31f2682f7d5f55d2a04326f734b232faa3e1796516feef5fa03e83b31e/simpletasks_data-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12f66daa1eee5c70f63d0312b1b74925459ddfd1a84ada0da5b6fc73e969e27d",
        "md5": "6cb13c985c1e4b44567cbfe11316857c",
        "sha256": "d23dd57f826ff7e8080a818dc11bc7a77ce1d1e3c464112db300fae70177d60d"
      },
      "downloads": -1,
      "filename": "simpletasks-data-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6cb13c985c1e4b44567cbfe11316857c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 19645,
      "upload_time": "2021-02-02T16:35:03",
      "upload_time_iso_8601": "2021-02-02T16:35:03.732875Z",
      "url": "https://files.pythonhosted.org/packages/12/f6/6daa1eee5c70f63d0312b1b74925459ddfd1a84ada0da5b6fc73e969e27d/simpletasks-data-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}