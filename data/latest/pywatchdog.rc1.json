{
  "info": {
    "author": "AT0myks",
    "author_email": "at0myks.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Monitoring"
    ],
    "description": "# pywatchdog\n\n<p align=\"left\">\n<a><img alt=\"Python versions\" src=\"https://img.shields.io/pypi/pyversions/pywatchdog\"></a>\n<a href=\"https://pypi.org/project/pywatchdog/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/pywatchdog\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a><img alt=\"License\" src=\"https://img.shields.io/pypi/l/pywatchdog\"></a>\n</p>\n\n* [What's a watchdog?](#whats-a-watchdog)\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [API](#api)\n  * [CLI](#cli)\n    * [`find-module`](#find-module)\n    * [`test-reboot`](#test-reboot)\n* [Example](#example)\n* [Do I have a watchdog?](#do-i-have-a-watchdog)\n* [Contributing](#contributing)\n* [Based on](#based-on)\n\n## What's a watchdog?\n\nA watchdog (or watchdog timer, WDT) is a hardware component that reboots your system\nif it is not notified regularly from the user space, usually by a daemon.\nIf user space fails for any reason, the watchdog will stop being notified and when the timeout occurs,\nit will reboot the system.\n\nIt is useful when you have for example a remote system that you don't have physical access to,\nand you want to ensure that it will not freeze and become unavailable indefinitely until you get physical access again.\n\n## Requirements\n\n* Linux with root privileges\n* a watchdog (see [Do I have a watchdog?](#do-i-have-a-watchdog) for basic help)\n* Python 3.7+\n\n## Installation\n\nUsing `pip`:\n\n```\nsudo -H pip install pywatchdog\n```\n\nFor a specific Python version if you have multiple:\n\n```\nsudo -H python3.x -m pip install pywatchdog\n```\n\nDirectly from the repository for the latest changes:\n\n```\nsudo -H pip install git+https://github.com/AT0myks/pywatchdog\nsudo -H python3.x -m pip install git+https://github.com/AT0myks/pywatchdog\n```\n\n## Usage\n\n### API\n\nThe recommended usage is with a context manager:\n\n```python\nfrom pywatchdog import Watchdog\nwith Watchdog() as wdt:\n    ...\n```\n\n`Watchdog` takes a single argument defaulting to `/dev/watchdog`, which should work in most cases.\n\nYou can also manually `open` and `close` the file:\n\n```python\nwdt = Watchdog()\nwdt.open()\n...\nwdt.close()\n```\n\nOnce the file is open, if the watchdog is not pinged before the timeout occurs, the computer will reboot.\n\nTo ping the watchdog use the `keep_alive` method:\n\n```python\nwdt.keep_alive()\n```\n\nThe timeout can be queried, and for some drivers it can also be modified on the fly:\n\n```python\nprint(\"The timeout is\", wdt.timeout, \"seconds\")\nwdt.timeout = 45  # Has no effect if unsupported.\nprint(\"The timeout is now\", wdt.timeout, \"seconds\")\n```\n\nNote that some devices have a granularity of minutes for their timeout.\nIn this case the example above will print `The timeout is now 60 seconds`.\n\nSome watchdog drivers have the ability to report the remaining time before the system will reboot:\n\n```python\nprint(\"Time left before reboot:\", wdt.time_left, \"seconds\")  # Prints None if unsupported.\n```\n\nHere's the rest of properties. The only one you can set is `pretimeout`:\n\n```python\nprint(wdt.identity)  # A string identifying the watchdog driver. Example: 'iTCO_wdt'.\nprint(wdt.firmware_version)  # Shortcut for wdt.support.firmware_version.\nprint(wdt.options)  # A list of flags describing what the device supports.\nprint(wdt.pretimeout)  # Returns the pretimeout in seconds.\nwdt.pretimeout = 15  # Seconds. Set to 0 to disable. Unsettable for some drivers.\nprint(wdt.support)  # Returns an instance of watchdog_info.\nprint(wdt.status)  # Current status, not always supported.\nprint(wdt.boot_status)  # Status at the last reboot, not always supported.\nprint(wdt.temperature)  # In Fahrenheit, not always supported.\n```\n\nIf a property is not supported by a driver, `None` is returned.\n\nSome watchdogs can be enabled and disabled:\n\n```python\nwdt.enable()  # Turn on the watchdog timer.\nwdt.disable()  # Turn off the watchdog timer.\n```\n\nAnd a few drivers have the ability to cause a kernel panic when the system overheats:\n\n```python\nwdt.temp_panic()\n```\n\nOnce this option is enabled, it cannot be disabled without removing the kernel module and readding it.\nAlso, its status cannot be queried.\n\nSee the docstrings for more information on the properties and methods.\n\n### CLI\n\nThis package also provides a `pywatchdog` command. It has two subcommands:\n\n#### `find-module`\n\nGet a list of potential kernel watchdog drivers for your system.\n\n```\nusage: pywatchdog find-module [-a]\n\noptional arguments:\n  -a, --all   only look for the presence of /dev/watchdog\n```\n\nThis is done by trying every module in `/lib/modules/$(uname -r)/kernel/drivers/watchdog` and testing which ones,\nwhen inserted, result in the availability of both `/dev/watchdog` and `/dev/watchdog0`.\nWhen the `--all` option is specified, it only looks for `/dev/watchdog`.\n\nSince I don't know the difference between having just `/dev/watchdog` and having both,\nthe `--all` option is provided just in case.\n\nThe `softdog` module is always ignored because it is a software watchdog and should work for all systems anyway.\nYou should always use a hardware watchdog when possible.\n\n#### `test-reboot`\n\nTest if a watchdog correctly reboots your computer.\n\n```\nusage: pywatchdog test-reboot [-t TIMEOUT] [-d DEVICE]\n\noptional arguments:\n  -t TIMEOUT, --timeout TIMEOUT    the timeout that will be set for the test\n  -d DEVICE, --device DEVICE       default: /dev/watchdog\n```\n\nThis will open the device file without notifying the watchdog,\nwhich means that when the timeout occurs, the computer should reboot.\n\nA countdown before reboot will be shown.\nMake sure to save your work before using this command.\n\n## Example\n\nThis example assumes you are on a distribution with `systemd`.\n\nTwo files are provided to create an example daemon:\na [script](https://github.com/AT0myks/pywatchdog/blob/main/example.py)\nand a [systemd service file](https://github.com/AT0myks/pywatchdog/blob/main/example.service).\nThe script is a simple infinite loop that pings the watchdog every second.\nThe service file runs the script as root and makes sure it is restarted in case it fails,\nand it can also be used to load the watchdog module at boot.\n\nIn this example we are in the home directory of user `ben` and the watchdog module is `iTCO_wdt`.\n\nDownload the two files:\n\n```\nwget https://github.com/AT0myks/pywatchdog/blob/main/example.py\nwget https://github.com/AT0myks/pywatchdog/blob/main/example.service\n```\n\nLet's rename them to something more meaningful:\n\n```\nmv example.py pywatchdog.py\nmv example.service pywatchdog.service\n```\n\nMake the script executable:\n\n```\nchmod +x pywatchdog.py\n```\n\nMove the service file to `/etc/systemd/system/`:\n\n```\nsudo mv -i pywatchdog.service /etc/systemd/system/\n```\n\nEdit the `[Service]` section of the service file with\n\n```\nsudo systemctl edit --full pywatchdog\n```\n\nand specify the correct path to the script:\n\n```\nExecStart=/home/ben/pywatchdog.py\n```\n\nIf the watchdog module is not loaded at boot (should not be the case for a Raspberry Pi),\nyou can use the service file to do it (please see the note at the bottom of this section)\nby adding these two lines under `[Service]`:\n\n```\nExecStartPre=/usr/sbin/modprobe iTCO_wdt\nExecStopPost=/usr/sbin/modprobe -r iTCO_wdt\n```\n\nYou can find the absolute path of `modprobe` with `which modprobe`.\n\nNow enable (start automatically at boot) and start the watchdog daemon:\n\n```\nsudo systemctl enable pywatchdog\nsudo systemctl start pywatchdog\n```\n\nYou can now see the status of the daemon:\n\n```\nsystemctl status pywatchdog\n```\n\nAnd its logs:\n\n```\njournalctl -u pywatchdog\n```\n\nNote: because of the hard blacklisting of watchdog modules (at least on Ubuntu),\nwe use the service file to load a module at boot instead of the regular ways (like `/etc/modules`).\nSee for example [here](https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1535840)\nand [here](https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1767172).\n\n<!-- For a more advanced daemon, see [pywatchdogd](https://github.com/AT0myks/pywatchdogd). -->\n\n## Do I have a watchdog?\n\nIf you have a `/dev/watchdog` file, then yes.\nThis should already be the case if for example you are working with a Raspberry Pi.\nYou can also check by typing the command `sudo wdctl`.\nIf you get `wdctl: cannot open /dev/watchdog: No such file or directory`, keep reading.\n\nIf you don't have a `/dev/watchdog` file,\nchances are you have a watchdog but need to find the appropriate kernel module to load for your specific hardware.\nThe modules that work in my case are `sp5100_tco` for a computer with (pretty recent, if it matters) AMD hardware\nand `iTCO_wdt` for another with Intel hardware.\nOnce you've found the module, load it with `sudo modprobe <module>`.\n\nYou can also use the [`pywatchdog find-module`](#find-module) command.\n\nYou should avoid loading a watchdog module if you don't have a daemon feeding it, to prevent unexpected reboots.\n\n## Contributing\n\nYou are welcome to contribute to this project.\nFeel free to open an issue or a pull request if you encounter any bug or want to add/fix something.\n\n## Based on\n\n* [The Linux Watchdog driver API](https://github.com/torvalds/linux/blob/master/Documentation/watchdog/watchdog-api.rst)\n* [ioctl.h](https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/ioctl.h)\n* [watchdog.h](https://github.com/torvalds/linux/blob/master/include/uapi/linux/watchdog.h)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AT0myks/pywatchdog",
    "keywords": "watchdog",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pywatchdog",
    "package_url": "https://pypi.org/project/pywatchdog/",
    "platform": null,
    "project_url": "https://pypi.org/project/pywatchdog/",
    "project_urls": {
      "Bug Reports": "https://github.com/AT0myks/pywatchdog/issues",
      "Homepage": "https://github.com/AT0myks/pywatchdog",
      "Source": "https://github.com/AT0myks/pywatchdog"
    },
    "release_url": "https://pypi.org/project/pywatchdog/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Interact with a Linux watchdog driver using Python.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13509138,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8764cb43e85aa6e2a76cb5e950dea6146fe30d8fe2d67022f0d9bd4c8bf932c",
          "md5": "7f329154a74d4fdfaef80714c86a5c03",
          "sha256": "d32717fdd216122ca8882052b007280958005cb72d8e8848d4c3a6cc8f78ad51"
        },
        "downloads": -1,
        "filename": "pywatchdog-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f329154a74d4fdfaef80714c86a5c03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17335,
        "upload_time": "2022-04-14T01:32:41",
        "upload_time_iso_8601": "2022-04-14T01:32:41.930588Z",
        "url": "https://files.pythonhosted.org/packages/b8/76/4cb43e85aa6e2a76cb5e950dea6146fe30d8fe2d67022f0d9bd4c8bf932c/pywatchdog-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bee0b716b24294e7517d615cd9bd2fb0d038e12eccf44ad332c91b9f5e2e714d",
          "md5": "93d3f8a67ec5deea53643656a0fa9da9",
          "sha256": "94bb6bd52faba69e0e278e5c5f8e68560961cddae8640cf9af4680de3dda52dd"
        },
        "downloads": -1,
        "filename": "pywatchdog-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93d3f8a67ec5deea53643656a0fa9da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19336,
        "upload_time": "2022-04-14T01:32:43",
        "upload_time_iso_8601": "2022-04-14T01:32:43.380040Z",
        "url": "https://files.pythonhosted.org/packages/be/e0/b716b24294e7517d615cd9bd2fb0d038e12eccf44ad332c91b9f5e2e714d/pywatchdog-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8764cb43e85aa6e2a76cb5e950dea6146fe30d8fe2d67022f0d9bd4c8bf932c",
        "md5": "7f329154a74d4fdfaef80714c86a5c03",
        "sha256": "d32717fdd216122ca8882052b007280958005cb72d8e8848d4c3a6cc8f78ad51"
      },
      "downloads": -1,
      "filename": "pywatchdog-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f329154a74d4fdfaef80714c86a5c03",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17335,
      "upload_time": "2022-04-14T01:32:41",
      "upload_time_iso_8601": "2022-04-14T01:32:41.930588Z",
      "url": "https://files.pythonhosted.org/packages/b8/76/4cb43e85aa6e2a76cb5e950dea6146fe30d8fe2d67022f0d9bd4c8bf932c/pywatchdog-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bee0b716b24294e7517d615cd9bd2fb0d038e12eccf44ad332c91b9f5e2e714d",
        "md5": "93d3f8a67ec5deea53643656a0fa9da9",
        "sha256": "94bb6bd52faba69e0e278e5c5f8e68560961cddae8640cf9af4680de3dda52dd"
      },
      "downloads": -1,
      "filename": "pywatchdog-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93d3f8a67ec5deea53643656a0fa9da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19336,
      "upload_time": "2022-04-14T01:32:43",
      "upload_time_iso_8601": "2022-04-14T01:32:43.380040Z",
      "url": "https://files.pythonhosted.org/packages/be/e0/b716b24294e7517d615cd9bd2fb0d038e12eccf44ad332c91b9f5e2e714d/pywatchdog-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}