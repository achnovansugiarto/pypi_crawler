{
  "info": {
    "author": "Liu Changyu",
    "author_email": "liuchangyu1111@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\n# AlexNet-PyTorch\n\n### Update (Feb 16, 2020)\n\nNow you can install this library directly using pip!\n\n```text\npip3 install --upgrade alexnet_pytorch\n```\n\n### Update (Feb 13, 2020)\n\nThe update is for ease of use and deployment.\n\n * [Example: Export to ONNX](#example-export-to-onnx)\n * [Example: Extract features](#example-feature-extraction)\n * [Example: Visual](#example-visual)\n\nIt is also now incredibly simple to load a pretrained model with a new number of classes for transfer learning:\n\n```python\nfrom alexnet_pytorch import AlexNet\nmodel = AlexNet.from_pretrained('alexnet', num_classes=10)\n```\n\n### Update (January 15, 2020)\n\nThis update allows you to use NVIDIA's Apex tool for accelerated training. By default choice `hybrid training precision` + `dynamic loss amplified` version, if you need to learn more and details about `apex` tools, please visit https://github.com/NVIDIA/apex.\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [AlexNet](http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf).\n\nThe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.  \n\nAt the moment, you can easily:  \n * Load pretrained AlexNet models \n * Use AlexNet models for classification or feature extraction \n\n_Upcoming features_: In the next few days, you will be able to:\n * Quickly finetune an AlexNet on your own dataset\n * Export AlexNet models for production\n\n### Table of contents\n1. [About AlexNet](#about-alexnet)\n2. [Model Description](#model-description)\n3. [Installation](#installation)\n4. [Usage](#usage)\n    * [Load pretrained models](#loading-pretrained-models)\n    * [Example: Classify](#example-classification)\n    * [Example: Extract features](#example-feature-extraction)\n    * [Example: Export to ONNX](#example-export-to-onnx)\n    * [Example: Visual](#example-visual)\n5. [Contributing](#contributing) \n\n### About AlexNet\n\nIf you're new to AlexNets, here is an explanation straight from the official PyTorch implementation: \n\nCurrent approaches to object recognition make essential use of machine learning methods. To improve their performance, we can collect larger datasets, learn more powerful models, and use better techniques for preventing overfitting. Until recently, datasets of labeled images were relatively\nsmall — on the order of tens of thousands of images (e.g., NORB [16], Caltech-101/256 [8, 9], and\nCIFAR-10/100 [12]). Simple recognition tasks can be solved quite well with datasets of this size,\nespecially if they are augmented with label-preserving transformations. For example, the currentbest error rate on the MNIST digit-recognition task (<0.3%) approaches human performance [4].\nBut objects in realistic settings exhibit considerable variability, so to learn to recognize them it is\nnecessary to use much larger training sets. And indeed, the shortcomings of small image datasets\nhave been widely recognized (e.g., Pinto et al. [21]), but it has only recently become possible to collect labeled datasets with millions of images. The new larger datasets include LabelMe [23], which\nconsists of hundreds of thousands of fully-segmented images, and ImageNet [6], which consists of\nover 15 million labeled high-resolution images in over 22,000 categories. \n\n### Model Description\n\nAlexNet competed in the ImageNet Large Scale Visual Recognition Challenge on September 30, 2012. The network achieved a top-5 error of 15.3%, more than 10.8 percentage points lower than that of the runner up. The original paper's primary result was that the depth of the model was essential for its high performance, which was computationally expensive, but made feasible due to the utilization of graphics processing units (GPUs) during training.\n\nThe 1-crop error rates on the imagenet dataset with the pretrained model are listed below.\n\n|Model structure|*Top-1 error*|*Top-5 error*|\n|:-------------:|:-----------:|:-----------:|\n|    alexnet    |    43.48    |    20.93    |\n\n### Installation\n\nInstall from pypi:\n```bash\npip install alexnet_pytorch\n```\n\nInstall from source:\n```bash\ngit clone https://github.com/lornatang/AlexNet-PyTorch.git\ncd AlexNet-PyTorch\npip install -e .\n```\n\n### Usage\n\n#### Loading pretrained models\n\nLoad an AlexNet:  \n```python\nfrom alexnet_pytorch import AlexNet\nmodel = AlexNet.from_name('alexnet')\n```\n\nLoad a pretrained AlexNet: \n```python\nfrom alexnet_pytorch import AlexNet\nmodel = AlexNet.from_pretrained('alexnet')\n```\n\n#### Example: Classification\n\nWe assume that in your current directory, there is a `img.jpg` file and a `labels_map.txt` file (ImageNet class names). These are both included in `examples/simple`. \n\nAll pre-trained models expect input images normalized in the same way,\ni.e. mini-batches of 3-channel RGB images of shape `(3 x H x W)`, where `H` and `W` are expected to be at least `224`.\nThe images have to be loaded in to a range of `[0, 1]` and then normalized using `mean = [0.485, 0.456, 0.406]`\nand `std = [0.229, 0.224, 0.225]`.\n\nHere's a sample execution.\n\n```python\nimport json\n\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\n\nfrom alexnet_pytorch import AlexNet\n\n# Open image\ninput_image = Image.open(\"img.jpg\")\n\n# Preprocess image\npreprocess = transforms.Compose([\n  transforms.Resize(256),\n  transforms.CenterCrop(224),\n  transforms.ToTensor(),\n  transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])\ninput_tensor = preprocess(input_image)\ninput_batch = input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model\n\n# Load class names\nlabels_map = json.load(open(\"labels_map.txt\"))\nlabels_map = [labels_map[str(i)] for i in range(1000)]\n\n# Classify with AlexNet\nmodel = AlexNet.from_pretrained(\"alexnet\")\nmodel.eval()\n\n# move the input and model to GPU for speed if available\nif torch.cuda.is_available():\n  input_batch = input_batch.to(\"cuda\")\n  model.to(\"cuda\")\n\nwith torch.no_grad():\n  logits = model(input_batch)\npreds = torch.topk(logits, k=5).indices.squeeze(0).tolist()\n\nprint(\"-----\")\nfor idx in preds:\n  label = labels_map[idx]\n  prob = torch.softmax(logits, dim=1)[0, idx].item()\n  print(f\"{label:<75} ({prob * 100:.2f}%)\")\n```\n\n#### Example: Feature Extraction \n\nYou can easily extract features with `model.extract_features`:\n```python\nimport torch\nfrom alexnet_pytorch import AlexNet\nmodel = AlexNet.from_pretrained('alexnet')\n\n# ... image preprocessing as in the classification example ...\ninputs = torch.randn(1, 3, 224, 224)\nprint(inputs.shape) # torch.Size([1, 3, 224, 224])\n\nfeatures = model.extract_features(inputs)\nprint(features.shape) # torch.Size([1, 256, 6, 6])\n```\n\n#### Example: Export to ONNX  \n\nExporting to ONNX for deploying to production is now simple: \n```python\nimport torch \nfrom alexnet_pytorch import AlexNet\n\nmodel = AlexNet.from_pretrained('alexnet')\ndummy_input = torch.randn(16, 3, 224, 224)\n\ntorch.onnx.export(model, dummy_input, \"demo.onnx\", verbose=True)\n```\n\n#### Example: Visual\n\n```text\ncd $REPO$/framework\nsh start.sh\n```\n\nThen open the browser and type in the browser address [http://127.0.0.1:20000/](http://127.0.0.1:20000/).\n\nEnjoy it.\n\n#### ImageNet\n\nSee `examples/imagenet` for details about evaluating on ImageNet.\n\nFor more datasets result. Please see `research/README.md`.\n\n### Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.   \n\nI look forward to seeing what the community does with these models! \n\n\n### Credit\n\n#### ImageNet Classification with Deep Convolutional Neural Networks\n\n*Alex Krizhevsky,Ilya Sutskever,Geoffrey E. Hinton*\n\n##### Abstract\n\nWe trained a large, deep convolutional neural network to classify the 1.2 million\nhigh-resolution images in the ImageNet LSVRC-2010 contest into the 1000 different classes. On the test data, we achieved top-1 and top-5 error rates of 37.5%\nand 17.0% which is considerably better than the previous state-of-the-art. The\nneural network, which has 60 million parameters and 650,000 neurons, consists\nof five convolutional layers, some of which are followed by max-pooling layers,\nand three fully-connected layers with a final 1000-way softmax. To make training faster, we used non-saturating neurons and a very efficient GPU implementation of the convolution operation. To reduce overfitting in the fully-connected\nlayers we employed a recently-developed regularization method called “dropout”\nthat proved to be very effective. We also entered a variant of this model in the\nILSVRC-2012 competition and achieved a winning top-5 test error rate of 15.3%,\ncompared to 26.2% achieved by the second-best entry.\n\n[paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)\n\n```text\n@article{AlexNet,\ntitle:{ImageNet Classification with Deep Convolutional Neural Networks},\nauthor:{Alex Krizhevsky,Ilya Sutskever,Geoffrey E. Hinton},\njournal={nips},\nyear={2012}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lornatang/AlexNet-PyTorch",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alexnet-pytorch",
    "package_url": "https://pypi.org/project/alexnet-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/alexnet-pytorch/",
    "project_urls": {
      "Homepage": "https://github.com/Lornatang/AlexNet-PyTorch"
    },
    "release_url": "https://pypi.org/project/alexnet-pytorch/0.2.0/",
    "requires_dist": [
      "torch"
    ],
    "requires_python": ">=3.6.0",
    "summary": "An improved version of the AlexNet model, adding parameter initialization from ResNet.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6815305,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "324e6a6efd6edb78c578ef5bf1421b7f7c8fbce2b3882ded988c2fb37939a382",
          "md5": "6cf54c0f3a33e855ea8994d89e15a28a",
          "sha256": "4e26c5fdcdd2cc626d17550b102697e47da99c16a6c76d9b2245393c0ff789a8"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cf54c0f3a33e855ea8994d89e15a28a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 12224,
        "upload_time": "2020-02-16T06:53:04",
        "upload_time_iso_8601": "2020-02-16T06:53:04.091848Z",
        "url": "https://files.pythonhosted.org/packages/32/4e/6a6efd6edb78c578ef5bf1421b7f7c8fbce2b3882ded988c2fb37939a382/alexnet_pytorch-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4af190cdd09b167ce97df677f427f7bed6a0fe0229808663872dfe3be7199732",
          "md5": "d0a2b814bc126fbb7a2e37b777dd4fff",
          "sha256": "19909d580225269f69afe2aa8f1b59067fd030b1faa4272481ea8814a39d30b1"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0a2b814bc126fbb7a2e37b777dd4fff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 8438,
        "upload_time": "2020-02-16T06:53:07",
        "upload_time_iso_8601": "2020-02-16T06:53:07.054074Z",
        "url": "https://files.pythonhosted.org/packages/4a/f1/90cdd09b167ce97df677f427f7bed6a0fe0229808663872dfe3be7199732/alexnet_pytorch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b77d038e821a63a9e8bc593a5d14cb5ce35c92582fb00c1cd10313709a07c8e8",
          "md5": "92ddd172a2e6d656807b31236ef8734c",
          "sha256": "1628f75f15005793410ee630046684dae1d37afc2b9133568920231cced9ac40"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92ddd172a2e6d656807b31236ef8734c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 12420,
        "upload_time": "2020-02-16T08:01:18",
        "upload_time_iso_8601": "2020-02-16T08:01:18.893744Z",
        "url": "https://files.pythonhosted.org/packages/b7/7d/038e821a63a9e8bc593a5d14cb5ce35c92582fb00c1cd10313709a07c8e8/alexnet_pytorch-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fca542b6b0b2165b27224cab90c87216ad8ea648b1c61eedd1bcb11cf7ba30d3",
          "md5": "e9dbcf0cda655b0be3fbdb022734632e",
          "sha256": "3da701415c1bb4df5098287cb6e46f330453c214a2eafbc8286629ea6f0d1882"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9dbcf0cda655b0be3fbdb022734632e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 8664,
        "upload_time": "2020-02-16T08:01:20",
        "upload_time_iso_8601": "2020-02-16T08:01:20.943535Z",
        "url": "https://files.pythonhosted.org/packages/fc/a5/42b6b0b2165b27224cab90c87216ad8ea648b1c61eedd1bcb11cf7ba30d3/alexnet_pytorch-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "927494f7b3f68f9279bde8e45dc911bb3fd4e57b5373f8e381b42b8cbcfd7be4",
          "md5": "d2a1362c09caf16836924cfdc17c8e94",
          "sha256": "55b021d564c9d15f6fe05b4aa7bbe8424f6a6cf3e83367eae3d733a4064d08fe"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2a1362c09caf16836924cfdc17c8e94",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 12427,
        "upload_time": "2020-02-17T05:03:01",
        "upload_time_iso_8601": "2020-02-17T05:03:01.195348Z",
        "url": "https://files.pythonhosted.org/packages/92/74/94f7b3f68f9279bde8e45dc911bb3fd4e57b5373f8e381b42b8cbcfd7be4/alexnet_pytorch-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "207e6558f0e4bb02f4e8d6d5ae39fd03edf2c8b3dbf21cce6d818902b70477e0",
          "md5": "414a8059d52c0ff4bff195f1118e6d1c",
          "sha256": "8359e2a7b9d2a53c4fbe41ea6d60b683274c6634dccbef2bcbc4c3ee8b26b3bd"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "414a8059d52c0ff4bff195f1118e6d1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 8687,
        "upload_time": "2020-02-17T05:03:04",
        "upload_time_iso_8601": "2020-02-17T05:03:04.012369Z",
        "url": "https://files.pythonhosted.org/packages/20/7e/6558f0e4bb02f4e8d6d5ae39fd03edf2c8b3dbf21cce6d818902b70477e0/alexnet_pytorch-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05887f8dd42a963dd2c209844b82b8e56f39fe99516581ec94f5ee1dfd52a0c5",
          "md5": "6864492aecb807e825171a62d38ec820",
          "sha256": "a5a63fd773b9d3e3535daafda8530751ac0cda5de1e9d85ea232286ef3330288"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6864492aecb807e825171a62d38ec820",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 12435,
        "upload_time": "2020-02-19T12:13:08",
        "upload_time_iso_8601": "2020-02-19T12:13:08.492271Z",
        "url": "https://files.pythonhosted.org/packages/05/88/7f8dd42a963dd2c209844b82b8e56f39fe99516581ec94f5ee1dfd52a0c5/alexnet_pytorch-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a822d8ca2dd4cd21c222eb3be26e0e704c83bc2568249c9e185de135cd1ec0b6",
          "md5": "1de73f6d7b96e7fe7f348b2bec8461e7",
          "sha256": "14be61d8b6253fc352c63822cc13d186397b1178d423ddd6e8019a979334b7f7"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1de73f6d7b96e7fe7f348b2bec8461e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 8714,
        "upload_time": "2020-02-19T12:13:11",
        "upload_time_iso_8601": "2020-02-19T12:13:11.184143Z",
        "url": "https://files.pythonhosted.org/packages/a8/22/d8ca2dd4cd21c222eb3be26e0e704c83bc2568249c9e185de135cd1ec0b6/alexnet_pytorch-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b32f90df0f49aec1cf9aca611f391ff4dcb8d24123bdc71d0ecef164ef4fa6fd",
          "md5": "96a73eb8c8d39c727def195c4ac1939f",
          "sha256": "72f634b8a8601360dfdbd100bc1675afab5baaa3fd9a0395a93a25402a259337"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96a73eb8c8d39c727def195c4ac1939f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 13043,
        "upload_time": "2020-03-15T12:04:29",
        "upload_time_iso_8601": "2020-03-15T12:04:29.476844Z",
        "url": "https://files.pythonhosted.org/packages/b3/2f/90df0f49aec1cf9aca611f391ff4dcb8d24123bdc71d0ecef164ef4fa6fd/alexnet_pytorch-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3cb89ca9d4a7928ca4c52c98ec789d2efa93b3bfd6cd991b0d0c71fd634683e",
          "md5": "07d11d1831e9839bf248df9a1c4d453c",
          "sha256": "eca9070090b4033f0593bd5237b6d3b2aeee28d776dbe72cdc756dbd13390eb2"
        },
        "downloads": -1,
        "filename": "alexnet_pytorch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07d11d1831e9839bf248df9a1c4d453c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 9247,
        "upload_time": "2020-03-15T12:04:31",
        "upload_time_iso_8601": "2020-03-15T12:04:31.089766Z",
        "url": "https://files.pythonhosted.org/packages/d3/cb/89ca9d4a7928ca4c52c98ec789d2efa93b3bfd6cd991b0d0c71fd634683e/alexnet_pytorch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b32f90df0f49aec1cf9aca611f391ff4dcb8d24123bdc71d0ecef164ef4fa6fd",
        "md5": "96a73eb8c8d39c727def195c4ac1939f",
        "sha256": "72f634b8a8601360dfdbd100bc1675afab5baaa3fd9a0395a93a25402a259337"
      },
      "downloads": -1,
      "filename": "alexnet_pytorch-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96a73eb8c8d39c727def195c4ac1939f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 13043,
      "upload_time": "2020-03-15T12:04:29",
      "upload_time_iso_8601": "2020-03-15T12:04:29.476844Z",
      "url": "https://files.pythonhosted.org/packages/b3/2f/90df0f49aec1cf9aca611f391ff4dcb8d24123bdc71d0ecef164ef4fa6fd/alexnet_pytorch-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3cb89ca9d4a7928ca4c52c98ec789d2efa93b3bfd6cd991b0d0c71fd634683e",
        "md5": "07d11d1831e9839bf248df9a1c4d453c",
        "sha256": "eca9070090b4033f0593bd5237b6d3b2aeee28d776dbe72cdc756dbd13390eb2"
      },
      "downloads": -1,
      "filename": "alexnet_pytorch-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "07d11d1831e9839bf248df9a1c4d453c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 9247,
      "upload_time": "2020-03-15T12:04:31",
      "upload_time_iso_8601": "2020-03-15T12:04:31.089766Z",
      "url": "https://files.pythonhosted.org/packages/d3/cb/89ca9d4a7928ca4c52c98ec789d2efa93b3bfd6cd991b0d0c71fd634683e/alexnet_pytorch-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}