{
  "info": {
    "author": "0xdomyz",
    "author_email": "septemberwhyms@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "DWOPT - Datawarehouse Operator\n==============================\n\nGetting summary statistics out of database tables is often an unstreamlined process.\nDoes one read in millions of rows before doing any work on Python,\nor run sql elsewhere and use intermediate CSVs,\nor write sql strings in python scripts?\n\nThe Python package **dwopt**\nprovides Excel-pivot-table-like and dataframe-summary-methods-like API,\ndriven by sql templates, under a flexible summary query building framework.\n\nSee the Features and the Walk Through section for examples.\n\n.. end-of-readme-intro\n\n\nInstallation\n------------\n\n.. code-block:: console\n\n    pip install dwopt\n\n\nFeatures\n--------\n\n* `Run sql frictionlessly using saved credentials`_\n* `Run sql script with text replacement`_\n* `Programatically make simple sql query`_\n* `Templates: Excel-pivot-table-like API`_\n* `Templates: Dataframe-summary-methods-like API`_\n* `Templates: DDL/DML statements, metadata queries`_\n* `Standard logging with reproducible sql`_\n\n\nWalk Through\n------------\n\nRun sql frictionlessly using saved credentials\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. _database operator objects: https://dwopt.readthedocs.io/en/stable/dbo.html#dwopt.dbo._Db\n.. |dwopt.db| replace:: ``dwopt.db``\n.. _dwopt.db: https://dwopt.readthedocs.io/en/stable/set_up.html#dwopt.db\n.. |dwopt.save_url| replace:: ``dwopt.save_url``\n.. _dwopt.save_url: https://dwopt.readthedocs.io/en/stable/set_up.html#dwopt.save_url\n\nOn import, the package gives ready-to-be-used `database operator objects`_\nwith default credentials, which could be saved prior by user to\nthe system keyring using the |dwopt.save_url|_ function.\n\n.. code-block:: python\n\n    from dwopt import lt\n    lt.iris()\n    lt.run('select count(1) from iris')\n       count\n    0    150\n\nThis enable quick analysis from any Python/Console window:\n\n.. code-block:: python\n\n    from dwopt import pg\n    pg.iris()\n    pg.qry('iris').valc('species', 'avg(petal_length)')\n       species   n  avg(petal_length)\n    0  sicolor  50              4.260\n    1   setosa  50              1.462\n    2  rginica  50              5.552\n\nAlternatively, use the database operator object factory function |dwopt.db|_\nand the database engine url to access database.\n\n.. code-block:: python\n\n    from dwopt import db\n    d = db(\"postgresql://dwopt_tester:1234@localhost/dwopt_test\")\n    d.mtcars()\n    d.run('select count(1) n from mtcars')\n        n\n    0  32\n\nSupports:\n\n* Python 3.9, 3.10, 3.11.\n* Windows 10: Sqlite, Postgre, Oracle.\n* Linux: Sqlite, Postgre.\n\nSee `Testing`_ section for package version tested.\n\nRun sql script with text replacement\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. |run| replace:: ``run``\n.. _run: https://dwopt.readthedocs.io/en/stable/dbo.html#dwopt.dbo._Db.run\n\nUse the database operator object's\n|run|_ method to run sql script file.\nOne could then replace ``:`` marked parameters via mappings supplied to the method.\n\n.. code-block:: python\n\n    from dwopt import pg, make_test_tbl\n    _ = make_test_tbl(pg)\n    pg.run(pth = \"E:/projects/my_sql_script.sql\",\n        my_run_dte = '2022-03-03',\n        my_label = '20220303',\n        threshold = 5)\n       count\n    0    137\n\nAbove runs the sql stored on ``E:/projects/my_sql_script.sql`` as below:\n\n.. code-block:: sql\n\n    drop table if exists monthly_extract_:my_label;\n\n    create table monthly_extract_:my_label as\n    select * from test\n    where\n        dte = to_date(':my_run_dte','YYYY-MM-DD')\n        and score > :threshold;\n\n    select count(1) from monthly_extract_:my_label;\n\n\nProgramatically make simple sql query\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. _list of clause methods: https://dwopt.readthedocs.io/en/stable/api.html#clause-methods\n.. |qry| replace:: ``qry``\n.. _qry: https://dwopt.readthedocs.io/en/stable/dbo.html#dwopt.db._Db.qry\n.. _summary query building framework: https://dwopt.readthedocs.io/en/stable/qry.html#the-summary-query-building-framework\n.. _query object: https://dwopt.readthedocs.io/en/stable/qry.html#dwopt._qry._Qry\n\nThe database operator object's |qry|_ method returns the `query object`_.\nUse it's `list of clause methods`_ to make a simple sql query.\n\nThis is not faster than just writing the sql,\nmain usage is to provide flexibility to the `summary query building framework`_.\n\n.. code-block:: python\n\n    from dwopt import lt\n    lt.mtcars()\n    sql = \"select cyl from mtcars group by cyl having count(1) > 10\"\n    q = (\n        lt.qry('mtcars a')\n        .select('a.cyl, count(1) n, avg(a.mpg)')\n        .case('cat', \"a.cyl = 8 then 1\", els=0)\n        .join(f'({sql}) b', 'a.cyl = b.cyl', how='inner')\n        .group_by('a.cyl')\n        .having('count(1) > 10')\n        .order_by('n desc')\n    )\n    q.run()\n       cyl   n  avg(a.mpg)  cat\n    0    8  14   15.100000    1\n    1    4  11   26.663636    0\n\n.. code-block:: sql\n\n    q.print()\n    select a.cyl, count(1) n, avg(a.mpg)\n        ,case when a.cyl = 8 then 1 else 0 end as cat\n    from mtcars a\n    inner join (select cyl from mtcars group by cyl having count(1) > 10) b\n        on a.cyl = b.cyl\n    group by a.cyl\n    having count(1) > 10\n    order by n desc\n\n\nTemplates: Excel-pivot-table-like API\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. |valc| replace:: ``valc``\n.. _valc: https://dwopt.readthedocs.io/en/stable/qry.html#dwopt._qry._Qry.valc\n\n.. |pivot| replace:: ``pivot``\n.. _pivot: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html\n\nUse the `query object`_ and it's |valc|_ method to make and run\na value counts summary query with custom groups and calcs,\non top of arbituary sub-query, as part of the `summary query building framework`_.\n\nThen call the result dataframe's |pivot|_ method to finalize the pivot table.\n\n.. code-block:: python\n\n    from dwopt import lt, make_test_tbl\n    _ = make_test_tbl(lt)\n    (\n        lt.qry('test')\n        .where('score>0.5', 'dte is not null', 'cat is not null')\n        .valc('dte,cat', 'avg(score) avgscore, round(sum(amt)/1e3,2) total')\n        .pivot('dte', 'cat')\n    )\n\nResult:\n\n==========  =====  =====  ========  ========  ======  ======\ncat           n           avgscore             total\n----------  -----  -----  --------  --------  ------  ------\ndte         test   train    test     train     test   train \n==========  =====  =====  ========  ========  ======  ======\n2022-01-01  1140   1051   2.736275  2.800106  565.67  530.09\n2022-02-02  1077   1100   2.759061  2.748898  536.68  544.10\n2022-03-03  1037   1072   2.728527  2.743825  521.54  528.85\n==========  =====  =====  ========  ========  ======  ======\n\nThe final query used can be invoked by the |valc|_ method, or logged via standard\nlogging.\n\n.. code-block:: sql\n\n    with x as (\n        select * from test\n        where score>0.5\n            and dte is not null\n            and cat is not null\n    )\n    select\n        dte,cat\n        ,count(1) n\n        ,avg(score) avgscore, round(sum(amt)/1e3,2) total\n    from x\n    group by dte,cat\n    order by n desc\n\n\nTemplates: Dataframe-summary-methods-like API\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. _list of summary methods: https://dwopt.readthedocs.io/en/stable/api.html#summary-methods\n\nUse the `query object`_ and it's `list of summary methods`_ to make and run\nsummary queries on top of arbituary sub-query,\nas part of the `summary query building framework`_:\n\n.. code-block:: python\n\n    from dwopt import pg\n    pg.iris()\n    q = pg.qry('iris a').select('a.*').case('cat',\n        \"petal_length > 5             then '5+'\",\n        \"petal_length between 2 and 5 then '2-5'\",\n        \"petal_length < 2             then '-2'\",\n    )\n\n    #Column names:\n    q.cols()\n    ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species', 'cat']\n\n    #Number of distinct combination:\n    q.dist(['species', 'petal_length'])\n    count    48\n    Name: 0, dtype: int64\n\n    #Head:\n    q.head()\n       sepal_length  sepal_width  petal_length  petal_width species cat\n    0           5.1          3.5           1.4          0.2  setosa  -2\n    1           4.9          3.0           1.4          0.2  setosa  -2\n    2           4.7          3.2           1.3          0.2  setosa  -2\n    3           4.6          3.1           1.5          0.2  setosa  -2\n    4           5.0          3.6           1.4          0.2  setosa  -2\n\n    #Length:\n    q.len()\n    150\n\n    #Min and max value:\n    q.mimx('petal_length')\n    max    6.9\n    min    1.0\n    Name: 0, dtype: float64\n\n    #Top record:\n    q.top()\n    sepal_length       5.1\n    sepal_width        3.5\n    petal_length       1.4\n    petal_width        0.2\n    species         setosa\n    cat                 -2\n    Name: 0, dtype: object\n\n    #Value count followed by pivot:\n    q.valc('species, cat').pivot('species','cat','n')\n    cat        -2   2-5    5+\n    species\n    rginica   NaN   9.0  41.0\n    setosa   50.0   NaN   NaN\n    sicolor   NaN  49.0   1.0\n\n.. code-block:: sql\n\n    #--All summary methods support output by printing or str:\n    q.valc('species, cat', out=1)\n    with x as (\n        select a.*\n            ,case\n                when petal_length > 5             then '5+'\n                when petal_length between 2 and 5 then '2-5'\n                when petal_length < 2             then '-2'\n                else NULL\n            end as cat\n        from iris a\n    )\n    select\n        species, cat\n        ,count(1) n\n    from x\n    group by species, cat\n    order by n desc\n\nTemplates: DDL/DML statements, metadata queries\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. _list of metadata methods: https://dwopt.readthedocs.io/en/stable/api.html#metadata-methods\n.. _list of operation methods: https://dwopt.readthedocs.io/en/stable/api.html#operation-methods\n\nUse the `list of operation methods`_ to make and run some\nDDL/DML statements with convenient or enhanced functionalities:\n\n.. code-block:: python\n\n    import pandas as pd\n    from dwopt import lt\n    tbl = pd.DataFrame({'col1': [1, 2], 'col2': ['a', 'b']})\n    tbl2 = pd.DataFrame({'col1': [1, 3], 'col2': ['a', 'c']})\n    lt.drop('test')\n    lt.create('test', col1='int', col2='text')\n    lt.write(tbl, 'test')\n    lt.write_nodup(tbl2, 'test', ['col1'], \"col1 < 4\")\n    lt.run(\"select * from test\")\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    c\n\n.. code-block:: python\n\n    lt.drop('test')\n    lt.cwrite(tbl, 'test')\n    lt.qry('test').run()\n       col1 col2\n    0     1    a\n    1     2    b\n\n\nUse the `list of metadata methods`_ to make and run some useful metadata queries:\n\n.. code-block:: python\n\n    from dwopt import pg\n    pg.iris()\n    pg.table_cols('public.iris')\n        column_name          data_type\n    0  sepal_length               real\n    1   sepal_width               real\n    2  petal_length               real\n    3   petal_width               real\n    4       species  character varying\n\n.. code-block:: python\n\n    from dwopt import lt\n    lt.iris()\n    lt.mtcars()\n    lt.list_tables().iloc[:,:-1]\n        type    name tbl_name  rootpage\n    0  table    iris     iris         2\n    1  table  mtcars   mtcars         5\n\n\nStandard logging with reproducible sql\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. |INFO| replace:: ``INFO``\n.. _INFO: https://docs.python.org/3/howto/logging.html#when-to-use-logging\n\nMany of the package's methods are wired through the standard\n`logging <https://docs.python.org/3/library/logging.html#module-logging>`_\npackage. In particular, the |run|_ method emits sql used as |INFO|_ level message.\nThe relevant logger object has standard naming and is called ``dwopt.dbo``.\n\nExample configuration to show logs in console:\n\n.. code-block:: python\n\n    import logging\n    logging.basicConfig(level = logging.INFO)\n\n    from dwopt import lt\n    lt.iris(q=1).valc('species', 'avg(petal_length)')\n\n.. code-block:: text\n\n    INFO:dwopt.dbo:dropping table via sqlalchemy: iris\n    INFO:dwopt.dbo:done\n    INFO:dwopt.dbo:creating table via sqlalchemy:\n    INFO:dwopt.dbo:('sepal_length', Column('sepal_length', REAL(), table=<iris>))\n    INFO:dwopt.dbo:('sepal_width', Column('sepal_width', REAL(), table=<iris>))\n    INFO:dwopt.dbo:('petal_length', Column('petal_length', REAL(), table=<iris>))\n    INFO:dwopt.dbo:('petal_width', Column('petal_width', REAL(), table=<iris>))\n    INFO:dwopt.dbo:('species', Column('species', String(), table=<iris>))\n    INFO:dwopt.dbo:done\n    INFO:dwopt.dbo:running:\n    INSERT INTO iris (sepal_length, sepal_width, petal_length, petal_width, species) VALUES (:sepal_length, :sepal_width, :petal_length, :petal_width, :species)\n    INFO:dwopt.dbo:args len=150, e.g.\n    {'sepal_length': 5.1, 'sepal_width': 3.5, 'petal_length': 1.4, 'petal_width': 0.2, 'species': 'setosa'}\n    INFO:dwopt.dbo:done\n    INFO:dwopt.dbo:running:\n    with x as (\n        select * from iris\n    )\n    select\n        species\n        ,count(1) n\n        ,avg(petal_length)\n    from x\n    group by species\n    order by n desc\n    INFO:dwopt.dbo:done\n       species   n  avg(petal_length)\n    0  sicolor  50              4.260\n    1   setosa  50              1.462\n    2  rginica  50              5.552\n\nAlternatively, to avoid logging info messages from other packages:\n\n.. code-block:: python\n\n    import logging\n    logging.basicConfig()\n    logging.getLogger('dwopt.dbo').setLevel(logging.INFO)\n\nExample configuration to print on console and store on file with timestamps:\n\n.. code-block:: python\n\n    import logging\n    logging.basicConfig(\n        format = \"%(asctime)s [%(levelname)s] %(message)s\"\n        ,handlers=[\n            logging.FileHandler(\"E:/projects/logs.log\"),\n            logging.StreamHandler()\n        ]\n    )\n    logging.getLogger('dwopt.dbo').setLevel(logging.INFO)\n\nSqlalchemy logger can also be used to obtain even more details:\n\n.. code-block:: python\n\n    import logging\n    logging.basicConfig()\n    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\n\nDevelopment\n---------------\n\nInstallation\n^^^^^^^^^^^^^^^\n\nTesting, documentation building package:\n\n.. code-block:: console\n\n    #testing\n    python -m pip install pytest black flake8 tox\n    \n    #doco and packaging\n    python -m pip install sphinx sphinx_rtd_theme build twine\n    \n    #depend\n    python -m pip install -U sqlalchemy psycopg2 cx_Oracle pandas keyring\n    \n    #package\n    python -m pip install -e .\n\nTesting\n^^^^^^^^^^^^\n\nTest:\n\n.. code-block:: console\n\n    python -m tox\n\n.. |dwopt.make_test_tbl| replace:: ``dwopt.make_test_tbl``\n.. _dwopt.make_test_tbl: https://dwopt.readthedocs.io/en/stable/set_up.html#dwopt.make_test_tbl\n\nTesting for specific databases.\nSet up environment based on |dwopt.make_test_tbl|_ function notes.\n\n.. code-block:: console\n\n    python -m pytest\n    python -m pytest --db=pg\n    python -m pytest --db=oc\n\nTest code styles:\n\n.. code-block:: console\n\n    flake8 src/dwopt\n\nPackage versions tested are::\n\n    Name: SQLAlchemy\n    Version: 2.0.7\n    ---\n    Name: psycopg2\n    Version: 2.9.5\n    ---\n    Name: cx-Oracle\n    Version: 8.3.0\n    ---\n    Name: pandas\n    Version: 1.5.3\n    ---\n    Name: keyring\n    Version: 23.13.1\n\nDocumentation\n^^^^^^^^^^^^^^^^^\n\nBuild document:\n\n.. code-block:: console\n\n    cd docs\n    make html\n\nTest examples across docs:\n\n.. code-block:: console\n\n    cd docs\n    make doctest\n\nFuture\n^^^^^^^^^\n\n* For text replacement directives, use\n  `jinja2 <https://jinja2docs.readthedocs.io/en/stable/>`_ syntax.\n* Add more summary, DML/DDL, metadata templates.\n\n.. end-of-readme-usage\n\n\nDocumentation\n-------------\n\n* `API <https://dwopt.readthedocs.io/en/stable/api.html>`_\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/0xdomyz/dwopt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dwopt",
    "package_url": "https://pypi.org/project/dwopt/",
    "platform": null,
    "project_url": "https://pypi.org/project/dwopt/",
    "project_urls": {
      "Bug Tracker": "https://github.com/0xdomyz/dwopt/issues",
      "Homepage": "https://github.com/0xdomyz/dwopt"
    },
    "release_url": "https://pypi.org/project/dwopt/0.0.7/",
    "requires_dist": [
      "sqlalchemy",
      "psycopg2",
      "cx-Oracle",
      "pandas",
      "keyring"
    ],
    "requires_python": "",
    "summary": "Datawarehouse operator",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17378727,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba080188d31e3241899d8192b81819cfa6d181c3aca49b7ba5d18b53b96f1b1",
          "md5": "b8300e3795d455f757b95ab9cd27bf34",
          "sha256": "5f9f46bad5c6e0c35051cf0cc9e667f54cd64599d77587d2e07f3f686e73272b"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8300e3795d455f757b95ab9cd27bf34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 20426,
        "upload_time": "2022-02-10T07:27:38",
        "upload_time_iso_8601": "2022-02-10T07:27:38.892645Z",
        "url": "https://files.pythonhosted.org/packages/eb/a0/80188d31e3241899d8192b81819cfa6d181c3aca49b7ba5d18b53b96f1b1/dwopt-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe8ac55dd23b1c86596dfa91bd4bfa812fe519cbf357938786134a0b8ac9a504",
          "md5": "660d1b9b2efbf6a720856b2ec9c071af",
          "sha256": "4e04ac73817aaeb74cf626a713715bc75c7191090d6a8540b3a13aa56c67d967"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "660d1b9b2efbf6a720856b2ec9c071af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21590,
        "upload_time": "2022-02-10T07:27:40",
        "upload_time_iso_8601": "2022-02-10T07:27:40.797607Z",
        "url": "https://files.pythonhosted.org/packages/fe/8a/c55dd23b1c86596dfa91bd4bfa812fe519cbf357938786134a0b8ac9a504/dwopt-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1901670ff941a599630547088949987a61e866c09ff4b333ac698b0793e7931a",
          "md5": "292d80ecfe4a7e69702df98f89c97c75",
          "sha256": "5f3cf2b0c2b2d78836424fcc4b32628e85db174605b2200faf6b6039b16e3c57"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "292d80ecfe4a7e69702df98f89c97c75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.9",
        "size": 32261,
        "upload_time": "2022-03-20T14:23:19",
        "upload_time_iso_8601": "2022-03-20T14:23:19.802282Z",
        "url": "https://files.pythonhosted.org/packages/19/01/670ff941a599630547088949987a61e866c09ff4b333ac698b0793e7931a/dwopt-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775ed471cdec0c0c6690840386166a3ec7a3ca14de9c4a7557c62f0b5d689f35",
          "md5": "f84ef1b46819ca0cc44e033ba7d12350",
          "sha256": "6aa28dd70d8e5394965ae25e319e849ca13c3524b4ff7282c39d3cea31e095d2"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f84ef1b46819ca0cc44e033ba7d12350",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.9",
        "size": 34726,
        "upload_time": "2022-03-20T14:23:23",
        "upload_time_iso_8601": "2022-03-20T14:23:23.219553Z",
        "url": "https://files.pythonhosted.org/packages/77/5e/d471cdec0c0c6690840386166a3ec7a3ca14de9c4a7557c62f0b5d689f35/dwopt-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "961fb44626a6cd55a91bb4269a1b60e68c6962a30fa67bc59d600bfe05765dd8",
          "md5": "1baf8eae42262b46bc5c64817444c510",
          "sha256": "6b512121fa867910b409d1c6e1c97f2ac0a4fce1153dd95030c3633f7a068910"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1baf8eae42262b46bc5c64817444c510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.9",
        "size": 32414,
        "upload_time": "2022-03-25T16:47:54",
        "upload_time_iso_8601": "2022-03-25T16:47:54.125146Z",
        "url": "https://files.pythonhosted.org/packages/96/1f/b44626a6cd55a91bb4269a1b60e68c6962a30fa67bc59d600bfe05765dd8/dwopt-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db5d3094c469ccd2ea033cfa04a7fd1c17e5d1f2e26574b875bff415f578b2fa",
          "md5": "cff023733571834316c171489e2d8e7b",
          "sha256": "405dc093b6f075c40f5c24d7f41dbbc1f1ff4a9db56aedc88d3f14072782e0ff"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cff023733571834316c171489e2d8e7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.9",
        "size": 34925,
        "upload_time": "2022-03-25T16:47:57",
        "upload_time_iso_8601": "2022-03-25T16:47:57.552614Z",
        "url": "https://files.pythonhosted.org/packages/db/5d/3094c469ccd2ea033cfa04a7fd1c17e5d1f2e26574b875bff415f578b2fa/dwopt-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21fcab180c87e9438a6921dea23daa6eb45dd7075fd3f0ceb3df2f5cac7c7d79",
          "md5": "a408bb1eee35d010e5e21271739de6c4",
          "sha256": "ef62ba0f92f1a92d7de2b54eb7d3bba285d65270cd11951d9a33a7e05f2defa7"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a408bb1eee35d010e5e21271739de6c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32554,
        "upload_time": "2022-04-04T10:57:44",
        "upload_time_iso_8601": "2022-04-04T10:57:44.108731Z",
        "url": "https://files.pythonhosted.org/packages/21/fc/ab180c87e9438a6921dea23daa6eb45dd7075fd3f0ceb3df2f5cac7c7d79/dwopt-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a841c66b8f08ecfbc816912a31d4f64a34ac03dbcc4720d906ff2c41e4c9ce24",
          "md5": "fd0cf6e9e26f7438903becc5dcabb1dc",
          "sha256": "bb0d8a052dca2d5190ffb27438a6e1e25ed69ca765ea95c792383f32389deca7"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fd0cf6e9e26f7438903becc5dcabb1dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35097,
        "upload_time": "2022-04-04T10:57:45",
        "upload_time_iso_8601": "2022-04-04T10:57:45.949347Z",
        "url": "https://files.pythonhosted.org/packages/a8/41/c66b8f08ecfbc816912a31d4f64a34ac03dbcc4720d906ff2c41e4c9ce24/dwopt-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7440f6ac4e4162851024f69fc52c5e5b6138b04146f97a528af05cc501e66934",
          "md5": "777d3fc9ad0bb2c2a2d092ae61a6c100",
          "sha256": "d58c10c3ff19edab492993e0fc564a5b11644bb685a5ca7d956bb6c5f3bc0444"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "777d3fc9ad0bb2c2a2d092ae61a6c100",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32692,
        "upload_time": "2023-03-20T10:36:41",
        "upload_time_iso_8601": "2023-03-20T10:36:41.381456Z",
        "url": "https://files.pythonhosted.org/packages/74/40/f6ac4e4162851024f69fc52c5e5b6138b04146f97a528af05cc501e66934/dwopt-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df2aebf8b5a6a7685ac86c61093a239b12ff6878c257787a7ded4aabadfd4cad",
          "md5": "39b644540d9f077e956309263eb2f2b6",
          "sha256": "ba807ca34480d1adb5646f597f8493daf28f47a7241174815762e4271f47a003"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "39b644540d9f077e956309263eb2f2b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38308,
        "upload_time": "2023-03-20T10:36:43",
        "upload_time_iso_8601": "2023-03-20T10:36:43.622265Z",
        "url": "https://files.pythonhosted.org/packages/df/2a/ebf8b5a6a7685ac86c61093a239b12ff6878c257787a7ded4aabadfd4cad/dwopt-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5fa02676772594e33333afb2a57f34036932e50d3861fad32e49c31318e62f",
          "md5": "60978861932bc77e0ccd87f6cd7c7854",
          "sha256": "de23b42d04b36a8e0c9fce4f121883fd00db1b5e7a57d27b8477f2b6d252900a"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60978861932bc77e0ccd87f6cd7c7854",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32602,
        "upload_time": "2023-03-21T12:28:45",
        "upload_time_iso_8601": "2023-03-21T12:28:45.207520Z",
        "url": "https://files.pythonhosted.org/packages/ca/5f/a02676772594e33333afb2a57f34036932e50d3861fad32e49c31318e62f/dwopt-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ac43d9aa6230632c7490250a319278447704aaad59fe0d22cecfd290a21a5af",
          "md5": "e0e6981b11ec28ced60547ab3d67831f",
          "sha256": "d36d2d5eb35e445d42eb6d0bb1bfbcccb412410cc5f79b20915f6c370afb072c"
        },
        "downloads": -1,
        "filename": "dwopt-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e0e6981b11ec28ced60547ab3d67831f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38132,
        "upload_time": "2023-03-21T12:28:48",
        "upload_time_iso_8601": "2023-03-21T12:28:48.623471Z",
        "url": "https://files.pythonhosted.org/packages/2a/c4/3d9aa6230632c7490250a319278447704aaad59fe0d22cecfd290a21a5af/dwopt-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca5fa02676772594e33333afb2a57f34036932e50d3861fad32e49c31318e62f",
        "md5": "60978861932bc77e0ccd87f6cd7c7854",
        "sha256": "de23b42d04b36a8e0c9fce4f121883fd00db1b5e7a57d27b8477f2b6d252900a"
      },
      "downloads": -1,
      "filename": "dwopt-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60978861932bc77e0ccd87f6cd7c7854",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32602,
      "upload_time": "2023-03-21T12:28:45",
      "upload_time_iso_8601": "2023-03-21T12:28:45.207520Z",
      "url": "https://files.pythonhosted.org/packages/ca/5f/a02676772594e33333afb2a57f34036932e50d3861fad32e49c31318e62f/dwopt-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ac43d9aa6230632c7490250a319278447704aaad59fe0d22cecfd290a21a5af",
        "md5": "e0e6981b11ec28ced60547ab3d67831f",
        "sha256": "d36d2d5eb35e445d42eb6d0bb1bfbcccb412410cc5f79b20915f6c370afb072c"
      },
      "downloads": -1,
      "filename": "dwopt-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "e0e6981b11ec28ced60547ab3d67831f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38132,
      "upload_time": "2023-03-21T12:28:48",
      "upload_time_iso_8601": "2023-03-21T12:28:48.623471Z",
      "url": "https://files.pythonhosted.org/packages/2a/c4/3d9aa6230632c7490250a319278447704aaad59fe0d22cecfd290a21a5af/dwopt-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}