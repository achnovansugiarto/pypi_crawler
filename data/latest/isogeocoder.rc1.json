{
  "info": {
    "author": "David Moinina Sengeh, Mohamed James,Mosses TF Vibbe",
    "author_email": "dsengeh@gmail.com, mohamedjames21@gmail.com, vbmo2007@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## **About isogeocoder**\nisogeocoder is a tool that generates and assigns standardized iso compliant unique identification numbers or codes for entities based on location information. It can create and assign codes based on a country's administrative division (geo-location) or any administrative level depending on the use case. Examples include:\n\n* Unique school identity for an education management information system.\n* Unique health facility identity for a health management information system. \n* Standard administrative level geocode for country planning.\n* Administrative level identity generation in digital addressing system.\n\n## Dependencies\n   Dependencies\nisogeocoder is built on the pandas framework; so all pandas operations can work on isogeocoder. Dataframes generated from each administrative level are saved as CSV files.\n\nWe also recommended using the Jupyter notebook.\n\n##  Installation\nInstall isogeocoder with pip3\n\n```python\npip3 install isogeocoder\n```\n      \n##   Usage/Examples\nisogeocoder is a combination of two libraries, one is the iso library, a standard country dataset manipulation; and the geo library which generates administrative level code on your dataset and generates a unique id using the index of your entity dataset. In the examples, we use the Sierra Leone school list provided by the MInistry of Basic and Senior Secondary Education, dataset [Sierra Leone School List](https://raw.githubusercontent.com/MBSSE-SL/isogeocoder/main/sl_school_list.csv)\n   \n\n   **GEO Examples**:\n   \n   Generating a unique school identity for an EMIS system\n      \n```python\nfrom  isogeocoder import geo\n```\n```python\nschools_df = geo.data('sl_school_list.csv')\n```\n```python\n#columns\nschools_df.columns \n#output\nIndex(['idregion', 'iddistrict', 'idchiefdom', 'idsection', 'sch_type',\n       'idschool_name'],\n      dtype='object')\nRegion = geo.level1(schools_df,'idregion')\nRegion\nDistrict = geo.level2(schools_df,Region,'iddistrict')\nDistrict\nChiefdom = geo.level3(schools_df,District,'idchiefdom')\nChiefdom\nSection = geo.level4(schools_df,Chiefdom,'idsection')\nSection\n<<<<<<< HEAD\nSchools = geo.uniqueid(schools_df,Section,'idschool_name')\nSchools\n=======\n>>>>>>> 1bbc060061aa62acd289c8d1934f713be29d7028\nSchool_Type = geo.categorical(schools_df,'sch_type',encoding_type='integer')\nSchool_Type\nschool_masterlist = geo.gencode(Section,Schools,cat_df=School_Type,level_column='idchiefdom',uniqueid_column='idschool_name_edited_code',title='emis_code',sep='-')\nschool_masterlist\n```\n\nGenerating administrative level coding in digital addressing system\n\n\n```python\nfrom  isogeocoder import geo\n```\n```python\nschools_df = geo.data('sl_school_list.csv')\n```\n```python\n#columns\nschools_df.columns \n#output\nIndex(['idregion', 'iddistrict', 'idchiefdom', 'idsection', 'sch_type',\n       'idschool_name'],\n      dtype='object')\nRegion = geo.level1(schools_df,'idregion')\nRegion\nDistrict = geo.level2(schools_df,Region,'iddistrict')\nDistrict\nChiefdom = geo.level3(schools_df,District,'idchiefdom')\nChiefdom\nSection = geo.level4(schools_df,Chiefdom,'idsection')\nSection\nRegion_Alpha = geo.alpha_coder(Region,column='idregion',clen=2)\nDistrict_alpha = geo.alpha_coder(District,column='iddistrict',clen=3,add_char='D')\nAlpha_df = geo.alpha_merger(region_alpha,district_alpha,'idregion',sufixs=['Reg','Dis'],level=1,sep='-')\nChiefdom_level = Chiefdom[['iddistrict_code','idchiefdom','idchiefdom_code']]\nChiefdom_Alpha= geo.alpha_merger_l3(alpha_df,Chiefdom_level,'idchiefdom_code','iddistrict_code',2,sep='-')\nSection_level =   Section[['idchiefdom_code','idsection','idsection_code']]\ndigital_addressing = geo.alpha_merger_l4(l3,Section_level,'idsection_code','idchiefdom_code',4,sep='-')\ndigital_addressing\n```\n\n**ISO Example**:\n\n```python\nimport pandas as pd\nfrom  isogeocoder import iso\ncontinents_df = pd.read_csv(iso.countries_data())\nsubdivision_df = pd.read_csv(iso.subdiv_data())\niso.continents(continents_df)\ndataframe of subregions in a continent\niso.subregions(continents_df,'Africa',level=1,sep='-')\niso.countries(continents_df,'Africa',level=2,sep='-')\niso.country(subdivision_df,'Sierra Leone')\n\n```\n\n## Documentation \n\nDocumentation is available  [here](https://github.com/MBSSE-SL/isogeocoder/blob/gh-pages/documentation.md) \n\n## Contributing\n\nPR requests are highly welcome, fork and commit your changes \n\n## Authors\n\n- [moinina](https://github.com/moinina)\n- [mjames21](https://github.com/mjames21)\n- [Mosesvb](https://github.com/Mosesvb)\n\n \n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)  \n       \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MBSSE-SL/isogeocoder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "isogeocoder",
    "package_url": "https://pypi.org/project/isogeocoder/",
    "platform": null,
    "project_url": "https://pypi.org/project/isogeocoder/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MBSSE-SL/isogeocoder/issues",
      "Homepage": "https://github.com/MBSSE-SL/isogeocoder"
    },
    "release_url": "https://pypi.org/project/isogeocoder/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "isogeocoder is a tool that generates and assigns standardized iso compliant unique identification numbers or codes for entities based on location information. It can create and assign codes based on a country's administrative division (geo-location) or any administrative level depending on the use case.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16913658,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad229ed1ebbc894427eed39f3d313f16aed6d58ca732b448990c707bb59b9a73",
          "md5": "aaea5f54f5c15424fc13e2b0af4ce8d7",
          "sha256": "38537093edebf250f6be0b84c936c26bfc3b6ba718d9ed918fda1df6c5d30cbc"
        },
        "downloads": -1,
        "filename": "isogeocoder-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aaea5f54f5c15424fc13e2b0af4ce8d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9508,
        "upload_time": "2023-02-18T09:26:00",
        "upload_time_iso_8601": "2023-02-18T09:26:00.094757Z",
        "url": "https://files.pythonhosted.org/packages/ad/22/9ed1ebbc894427eed39f3d313f16aed6d58ca732b448990c707bb59b9a73/isogeocoder-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "206778f900a8f8f6f54019dc760e876e8cad17ceba3e408afb2424ee3686730e",
          "md5": "b87951382ad26872c12d0b3bd4738e1b",
          "sha256": "a79924e3ec24a50dc770f0de23179708d30ce5727db7894b8e6691bb87c5fc55"
        },
        "downloads": -1,
        "filename": "isogeocoder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b87951382ad26872c12d0b3bd4738e1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9655,
        "upload_time": "2023-02-18T09:26:02",
        "upload_time_iso_8601": "2023-02-18T09:26:02.126914Z",
        "url": "https://files.pythonhosted.org/packages/20/67/78f900a8f8f6f54019dc760e876e8cad17ceba3e408afb2424ee3686730e/isogeocoder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad229ed1ebbc894427eed39f3d313f16aed6d58ca732b448990c707bb59b9a73",
        "md5": "aaea5f54f5c15424fc13e2b0af4ce8d7",
        "sha256": "38537093edebf250f6be0b84c936c26bfc3b6ba718d9ed918fda1df6c5d30cbc"
      },
      "downloads": -1,
      "filename": "isogeocoder-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aaea5f54f5c15424fc13e2b0af4ce8d7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9508,
      "upload_time": "2023-02-18T09:26:00",
      "upload_time_iso_8601": "2023-02-18T09:26:00.094757Z",
      "url": "https://files.pythonhosted.org/packages/ad/22/9ed1ebbc894427eed39f3d313f16aed6d58ca732b448990c707bb59b9a73/isogeocoder-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "206778f900a8f8f6f54019dc760e876e8cad17ceba3e408afb2424ee3686730e",
        "md5": "b87951382ad26872c12d0b3bd4738e1b",
        "sha256": "a79924e3ec24a50dc770f0de23179708d30ce5727db7894b8e6691bb87c5fc55"
      },
      "downloads": -1,
      "filename": "isogeocoder-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b87951382ad26872c12d0b3bd4738e1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9655,
      "upload_time": "2023-02-18T09:26:02",
      "upload_time_iso_8601": "2023-02-18T09:26:02.126914Z",
      "url": "https://files.pythonhosted.org/packages/20/67/78f900a8f8f6f54019dc760e876e8cad17ceba3e408afb2424ee3686730e/isogeocoder-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}