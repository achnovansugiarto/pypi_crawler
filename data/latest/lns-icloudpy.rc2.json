{
  "info": {
    "author": "leafnsand",
    "author_email": "xavier.jiang@leafnsand.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# iCloudPy\n\n[![CI - Main](https://github.com/mandarons/icloudpy/actions/workflows/ci-main-test-coverage.yml/badge.svg)](https://github.com/mandarons/icloudpy/actions/workflows/ci-main-test-coverage.yml)\n[![Tests](https://mandarons.github.io/icloudpy/badges/tests.svg)](https://mandarons.github.io/icloudpy/test-results/)\n[![Coverage](https://mandarons.github.io/icloudpy/badges/coverage.svg)](https://mandarons.github.io/icloudpy/test-coverage/index.html)\n[![Discord](https://img.shields.io/discord/871555550444408883?style=for-the-badge)](https://discord.gg/HfAXY2ykhp)\n<a href=\"https://www.buymeacoffee.com/mandarons\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 30px !important;width: 150px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n\n:love*you_gesture: \\*\\*\\_Please star this repository if you end up using this project. If it has improved your life in any way, consider donating for my effort using 'Buy Me a Coffee' button above. It will help me continue supporting this product.*\\*\\* :pray:\n\niCloudPy is a simple iCloud webservices wrapper library written in Python. It is a major reuse of [pyiCloud](https://github.com/picklepete/pyicloud) python library.\n\niCloudPy connects to iCloud using your `username` and `password`, stores the session locally and then performs various queries to iCloud server.\n\n## Authentication\n\nAuthentication without using a saved password is as simple as passing your username and password to the `ICloudPyService` class:\n\n```python\nfrom icloudpy import ICloudPyService\napi = ICloudPyService('jappleseed@apple.com', 'password')\n# For China region\napi = ICloudPyService('jappleseed@apple.com', 'password' auth_endpoint=\"https://www.icloud.com.cn\",setup_endpoint=\"https://setup.icloud.com.cn/setup/ws/1\",)\n```\n\nIn the event that the username/password combination is invalid, a `ICloudPyFailedLoginException` exception is thrown.\n\nYou can also store your password in the system keyring using the command-line tool:\n\n```bash\n> icloud --username=jappleseed@apple.com\nICloud Password for jappleseed@apple.com:\nSave password in keyring? (y/N)\n# For China region\n> icloud --username=jappleseed@apple.com --region=china\nICloud Password for jappleseed@apple.com:\nSave password in keyring? (y/N)\n```\n\nIf you have stored a password in the keyring, you will not be required to provide a password when interacting with the command-line tool or instantiating the `ICloudPyService` class for the username you stored the password for.\n\n```python\napi = ICloudPyService('jappleseed@apple.com')\n```\n\nIf you would like to delete a password stored in your system keyring, you can clear a stored password using the `--delete-from-keyring` command-line option:\n\n```bash\n> icloud --username=jappleseed@apple.com --delete-from-keyring\n```\n\n**_Note: Authentication will expire after an interval set by Apple, at which point you will have to re-authenticate. This interval is currently two months._**\n\n## Two-step and two-factor authentication (2SA/2FA)\n\nIf you have enabled [two-factor authentications (2FA) or two-step authentication (2SA)](https://support.apple.com/en-us/HT204152) for the account you will have to do some extra work:\n\n```python\n\n    if api.requires_2fa:\n        print \"Two-factor authentication required.\"\n        code = input(\"Enter the code you received of one of your approved devices: \")\n        result = api.validate_2fa_code(code)\n        print(\"Code validation result: %s\" % result)\n\n        if not result:\n            print(\"Failed to verify security code\")\n            sys.exit(1)\n\n        if not api.is_trusted_session:\n            print(\"Session is not trusted. Requesting trust...\")\n            result = api.trust_session()\n            print(\"Session trust result %s\" % result)\n\n            if not result:\n                print(\"Failed to request trust. You will likely be prompted for the code again in the coming weeks\")\n    elif api.requires_2sa:\n        import click\n        print \"Two-step authentication required. Your trusted devices are:\"\n\n        devices = api.trusted_devices\n        for i, device in enumerate(devices):\n            print \"  %s: %s\" % (i, device.get('deviceName',\n                \"SMS to %s\" % device.get('phoneNumber')))\n\n        device = click.prompt('Which device would you like to use?', default=0)\n        device = devices[device]\n        if not api.send_verification_code(device):\n            print \"Failed to send verification code\"\n            sys.exit(1)\n\n        code = click.prompt('Please enter validation code')\n        if not api.validate_verification_code(device, code):\n            print \"Failed to verify verification code\"\n            sys.exit(1)\n```\n\n## Devices\n\nYou can list which devices associated with your account by using the `devices` property:\n\n```bash\n>>> api.devices\n{\nu'i9vbKRGIcLYqJnXMd1b257kUWnoyEBcEh6yM+IfmiMLh7BmOpALS+w==': <AppleDevice(iPhone 4S: Johnny Appleseed's iPhone)>,\nu'reGYDh9XwqNWTGIhNBuEwP1ds0F/Lg5t/fxNbI4V939hhXawByErk+HYVNSUzmWV': <AppleDevice(MacBook Air 11\": Johnny Appleseed's MacBook Air)>\n}\n```\n\nand you can access individual devices by either their index, or their ID:\n\n```bash\n>>> api.devices[0]\n<AppleDevice(iPhone 4S: Johnny Appleseed's iPhone)>\n>>> api.devices['i9vbKRGIcLYqJnXMd1b257kUWnoyEBcEh6yM+IfmiMLh7BmOpALS+w==']\n<AppleDevice(iPhone 4S: Johnny Appleseed's iPhone)>\n```\n\nor, as a shorthand if you have only one associated apple device, you can simply use the `iphone` property to access the first device associated with your account:\n\n```bash\n>>> api.iphone\n<AppleDevice(iPhone 4S: Johnny Appleseed's iPhone)>\n```\n\n**_Note: the first device associated with your account may not necessarily be your iPhone._**\n\n## Find My iPhone\n\nOnce you have successfully authenticated, you can start querying your data!\n\n### Location\n\nReturns the device's last known location. The Find My iPhone app must have been installed and initialized.\n\n```bash\n>>> api.iphone.location()\n{u'timeStamp': 1357753796553, u'locationFinished': True, u'longitude': -0.14189, u'positionType': u'GPS', u'locationType': None, u'latitude': 51.501364, u'isOld': False, u'horizontalAccuracy': 5.0}\n```\n\n### Status\n\nThe Find My iPhone response is quite bloated, so for simplicity's sake this method will return a subset of the properties.\n\n```bash\n>>> api.iphone.status()\n{'deviceDisplayName': u'iPhone 5', 'deviceStatus': u'200', 'batteryLevel': 0.6166913, 'name': u\"Peter's iPhone\"}\n```\n\nIf you wish to request further properties, you may do so by passing in a list of property names.\n\n### Play Sound\n\nSends a request to the device to play a sound, if you wish pass a custom message you can do so by changing the subject arg.\n\n```bash\n>>> api.iphone.play_sound()\n```\n\nA few moments later, the device will play a ringtone, display the default notification (\"Find My iPhone Alert\") and a confirmation email will be sent to you.\n\n### Lost Mode\n\nLost mode is slightly different to the \"Play Sound\" functionality in that it allows the person who picks up the phone to call a specific phone number _without having to enter the passcode_. Just like \"Play Sound\" you may pass a custom message which the device will display, if it's not overridden the custom message of \"This iPhone has been lost. Please call me.\" is used.\n\n```bash\n>>> phone_number = '555-373-383'\n>>> message = 'Thief! Return my phone immediately.'\n>>> api.iphone.lost_device(phone_number, message)\n```\n\n## Calendar\n\nThe calendar webservice currently only supports fetching events.\n\n### Events\n\nReturns this month's events:\n\n```bash\n>>> api.calendar.events()\n```\n\nOr, between a specific date range:\n\n```bash\n>>> from_dt = datetime(2012, 1, 1)\n>>> to_dt = datetime(2012, 1, 31)\n>>> api.calendar.events(from_dt, to_dt)\n```\n\nAlternatively, you may fetch a single event's details, like so:\n\n```bash\n>>> api.calendar.get_event_detail('CALENDAR', 'EVENT_ID')\n```\n\n## Contacts\n\nYou can access your iCloud contacts/address book through the `contacts` property:\n\n```bash\n>>> for c in api.contacts.all():\n>>> print c.get('firstName'), c.get('phones')\nJohn [{u'field': u'+1 555-55-5555-5', u'label': u'MOBILE'}]\n```\n\n**_Note: These contacts do not include contacts federated from e.g. Facebook, only the ones stored in iCloud._**\n\n## File Storage (Ubiquity)\n\nYou can access documents stored in your iCloud account by using the `files` property's `dir` method:\n\n```bash\n>>> api.files.dir()\n[u'.do-not-delete',\n u'.localized',\n u'com~apple~Notes',\n u'com~apple~Preview',\n u'com~apple~mail',\n u'com~apple~shoebox',\n u'com~apple~system~spotlight'\n]\n```\n\nYou can access children and their children's children using the filename as an index:\n\n```bash\n>>> api.files['com~apple~Notes']\n<Folder: u'com~apple~Notes'>\n>>> api.files['com~apple~Notes'].type\nu'folder'\n>>> api.files['com~apple~Notes'].dir()\n[u'Documents']\n>>> api.files['com~apple~Notes']['Documents'].dir()\n[u'Some Document']\n>>> api.files['com~apple~Notes']['Documents']['Some Document'].name\nu'Some Document'\n>>> api.files['com~apple~Notes']['Documents']['Some Document'].modified\ndatetime.datetime(2012, 9, 13, 2, 26, 17)\n>>> api.files['com~apple~Notes']['Documents']['Some Document'].size\n1308134\n>>> api.files['com~apple~Notes']['Documents']['Some Document'].type\nu'file'\n```\n\nAnd when you have a file that you'd like to download, the `open` method will return a response object from which you can read the `content`.\n\n```bash\n>>> api.files['com~apple~Notes']['Documents']['Some Document'].open().content\n'Hello, these are the file contents'\n```\n\nThe object returned from the above `open` method is a [response object](http://www.python-requests.org/en/latest/api/#classes) and the `open` method can accept any parameters you might normally use in a request using [requests](https://github.com/kennethreitz/requests).\n\nFor example, if you know that the file you're opening has JSON content:\n\n```bash\n>>> api.files['com~apple~Notes']['Documents']['information.json'].open().json()\n{'How much we love you': 'lots'}\n>>> api.files['com~apple~Notes']['Documents']['information.json'].open().json()['How much we love you']\n'lots'\n```\n\nOr, if you're downloading a particularly large file, you may want to use the `stream` keyword argument, and read directly from the raw response object:\n\n```bash\n>>> download = api.files['com~apple~Notes']['Documents']['big_file.zip'].open(stream=True)\n>>> with open('downloaded_file.zip', 'wb') as opened_file:\n        opened_file.write(download.raw.read())\n```\n\n## File Storage (iCloud Drive)\n\nYou can access your iCloud Drive using an API identical to the Ubiquity one described in the previous section, except that it is rooted at `api.drive`:\n\n```bash\n>>> api.drive.dir()\n['Holiday Photos', 'Work Files']\n>>> api.drive['Holiday Photos']['2013']['Sicily'].dir()\n['DSC08116.JPG', 'DSC08117.JPG']\n\n>>> drive_file = api.drive['Holiday Photos']['2013']['Sicily']['DSC08116.JPG']\n>>> drive_file.name\nu'DSC08116.JPG'\n>>> drive_file.date_modified\ndatetime.datetime(2013, 3, 21, 12, 28, 12) # NB this is UTC\n>>> drive_file.size\n2021698\n>>> drive_file.type\nu'file'\n```\n\nThe `open` method will return a response object from which you can read the file's contents:\n\n```bash\n>>> from shutil import copyfileobj\n>>> with drive_file.open(stream=True) as response:\n>>>     with open(drive_file.name, 'wb') as file_out:\n>>>         copyfileobj(response.raw, file_out)\n```\n\nTo interact with files and directions the `mkdir`, `rename` and `delete` functions are available\nfor a file or folder:\n\n```bash\n>>> api.drive['Holiday Photos'].mkdir('2020')\n>>> api.drive['Holiday Photos']['2020'].rename('2020_copy')\n>>> api.drive['Holiday Photos']['2020_copy'].delete()\n```\n\nThe `upload` method can be used to send a file-like object to the iCloud Drive:\n\n```bash\n>>> with open('Vacation.jpeg', 'rb') as file_in:\n>>>>    api.drive['Holiday Photos'].upload(file_in)\n```\n\nIt is strongly suggested to open file handles as binary rather than text to prevent decoding errors\nfurther down the line.\n\n## Photo Library\n\nYou can access the iCloud Photo Library through the `photos` property.\n\n```bash\n>>> api.photos.all\n<PhotoAlbum: 'All Photos'>\n```\n\nIndividual albums are available through the `albums` property:\n\n```bash\n>>> api.photos.albums['Screenshots']\n<PhotoAlbum: 'Screenshots'>\n```\n\nWhich you can iterate to access the photo assets. The 'All Photos' album is sorted by `added_date` so the most recently added photos are returned first. All other albums are sorted by `asset_date` (which represents the exif date) :\n\n```bash\n>>> for photo in api.photos.albums['Screenshots']:\n        print photo, photo.filename\n<PhotoAsset: id=AVbLPCGkp798nTb9KZozCXtO7jds> IMG_6045.JPG\n```\n\nTo download a photo use the `download` method, which will return a [response object](http://www.python-requests.org/en/latest/api/#classes), initialized with `stream` set to `True`, so you can read from the raw response object:\n\n```bash\n>>> photo = next(iter(api.photos.albums['Screenshots']), None)\n>>> download = photo.download()\n>>> with open(photo.filename, 'wb') as opened_file:\n        opened_file.write(download.raw.read())\n```\n\n**_Note: Consider using `shutil.copyfile` or another buffered strategy for downloading the file so that the whole file isn't read into memory before writing._**\n\nInformation about each version can be accessed through the `versions` property:\n\n```bash\n>>> photo.versions.keys()\n[u'medium', u'original', u'thumb']\n```\n\nTo download a specific version of the photo asset, pass the version to `download()`:\n\n```bash\n>>> download = photo.download('thumb')\n>>> with open(photo.versions['thumb']['filename'], 'wb') as thumb_file:\n        thumb_file.write(download.raw.read())\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leafnsand/icloudpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lns-icloudpy",
    "package_url": "https://pypi.org/project/lns-icloudpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/lns-icloudpy/",
    "project_urls": {
      "Homepage": "https://github.com/leafnsand/icloudpy"
    },
    "release_url": "https://pypi.org/project/lns-icloudpy/0.0.2/",
    "requires_dist": [
      "requests (==2.28.1)",
      "keyring (==23.11.0)",
      "keyrings.alt (==4.2.0)",
      "click (==8.1.3)",
      "six (==1.16.0)",
      "tzlocal (==4.2)",
      "pytz (==2022.6)",
      "certifi (==2022.12.7)",
      "future (==0.18.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "Python library to interact with iCloud web service",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16817001,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bb50ae0ededbdc3726f1e50b70184bc681c38666b1e5ce7fda082c84e4efc8b",
          "md5": "6a4c048ec7df9fd62e5cecae17f6050b",
          "sha256": "fd33fdbb9fa1b72fcd6e4e4f9939b3f37e89f300379715a7e1d235c557f602c5"
        },
        "downloads": -1,
        "filename": "lns_icloudpy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a4c048ec7df9fd62e5cecae17f6050b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 34246,
        "upload_time": "2023-01-28T10:12:13",
        "upload_time_iso_8601": "2023-01-28T10:12:13.692970Z",
        "url": "https://files.pythonhosted.org/packages/7b/b5/0ae0ededbdc3726f1e50b70184bc681c38666b1e5ce7fda082c84e4efc8b/lns_icloudpy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19df196411d4dc02ecc4199561e6f5e155f4f5830cd46f73ff4e284d493758e8",
          "md5": "146eaa913c7eb0991a837456d7a492b1",
          "sha256": "f9b3f189009d458fdc4d514530e08656c8bb1e7fe61e39c8630e858a42b6aefd"
        },
        "downloads": -1,
        "filename": "lns-icloudpy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "146eaa913c7eb0991a837456d7a492b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34320,
        "upload_time": "2023-01-28T10:12:15",
        "upload_time_iso_8601": "2023-01-28T10:12:15.527836Z",
        "url": "https://files.pythonhosted.org/packages/19/df/196411d4dc02ecc4199561e6f5e155f4f5830cd46f73ff4e284d493758e8/lns-icloudpy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c712021bf32d969aeaca3c503601695d27727596596b2a0748a75aa8c08a15e6",
          "md5": "39b7e7ec54d088ba8a6f8dd8114496e6",
          "sha256": "92a66b5ecd04d5e349031ef473c933162fa04da80c5f3935f304b0b5c645fa89"
        },
        "downloads": -1,
        "filename": "lns_icloudpy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39b7e7ec54d088ba8a6f8dd8114496e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 34293,
        "upload_time": "2023-02-12T02:23:45",
        "upload_time_iso_8601": "2023-02-12T02:23:45.438477Z",
        "url": "https://files.pythonhosted.org/packages/c7/12/021bf32d969aeaca3c503601695d27727596596b2a0748a75aa8c08a15e6/lns_icloudpy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf3a8456137443befe019cca6b43aeafc5eb6c52e4ce3707ac14962ae8c6b276",
          "md5": "0652fc9835fc6835b98298006ad8e755",
          "sha256": "a25010d249a55526d545feae88537f7b556308462ab47fcdd8581fb3688f45f2"
        },
        "downloads": -1,
        "filename": "lns-icloudpy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0652fc9835fc6835b98298006ad8e755",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34384,
        "upload_time": "2023-02-12T02:23:47",
        "upload_time_iso_8601": "2023-02-12T02:23:47.076797Z",
        "url": "https://files.pythonhosted.org/packages/cf/3a/8456137443befe019cca6b43aeafc5eb6c52e4ce3707ac14962ae8c6b276/lns-icloudpy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c712021bf32d969aeaca3c503601695d27727596596b2a0748a75aa8c08a15e6",
        "md5": "39b7e7ec54d088ba8a6f8dd8114496e6",
        "sha256": "92a66b5ecd04d5e349031ef473c933162fa04da80c5f3935f304b0b5c645fa89"
      },
      "downloads": -1,
      "filename": "lns_icloudpy-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39b7e7ec54d088ba8a6f8dd8114496e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 34293,
      "upload_time": "2023-02-12T02:23:45",
      "upload_time_iso_8601": "2023-02-12T02:23:45.438477Z",
      "url": "https://files.pythonhosted.org/packages/c7/12/021bf32d969aeaca3c503601695d27727596596b2a0748a75aa8c08a15e6/lns_icloudpy-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf3a8456137443befe019cca6b43aeafc5eb6c52e4ce3707ac14962ae8c6b276",
        "md5": "0652fc9835fc6835b98298006ad8e755",
        "sha256": "a25010d249a55526d545feae88537f7b556308462ab47fcdd8581fb3688f45f2"
      },
      "downloads": -1,
      "filename": "lns-icloudpy-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0652fc9835fc6835b98298006ad8e755",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 34384,
      "upload_time": "2023-02-12T02:23:47",
      "upload_time_iso_8601": "2023-02-12T02:23:47.076797Z",
      "url": "https://files.pythonhosted.org/packages/cf/3a/8456137443befe019cca6b43aeafc5eb6c52e4ce3707ac14962ae8c6b276/lns-icloudpy-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}