{
  "info": {
    "author": "noga mudrik",
    "author_email": "<nmudrik1@jhmi.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**The discrete model described in:** _Noga Mudrik*, Yenho Chen*, Eva Yezerets, Christopher Rozell, Adam Charles. \"Decomposed Linear Dynamical Systems (dLDS) for learning the latent components of neural dynamics\". 2022_\n\n\nLearning interpretable representations of neural dynamics at a population level is\na crucial first step to understanding how neural activity patterns over time relate\nto perception and behavior. Models of neural dynamics often focus on either\nlow-dimensional projections of neural activity, or on learning dynamical systems\nthat explicitly relate to the neural state over time. We discuss how these two\napproaches are interrelated by considering dynamical systems as representative of\nflows on a low-dimensional manifold. Building on this concept, we propose a new\ndecomposed dynamical system model that represents complex nonstationary and\nnonlinear dynamics of time-series data as a sparse combination of simpler, more\ninterpretable components. The decomposed nature of the dynamics generalizes\nover previous switched approaches and enables modeling of overlapping and\nnon-stationary drifts in the dynamics. We further present a dictionary learning-\ndriven approach to model fitting, where we leverage recent results in tracking sparse\nvectors over time. We demonstrate that our model can learn efficient representations\nand smoothly transition between dynamical modes in both continuous-time and\ndiscrete-time examples. We show results on low-dimensional linear and nonlinear\nattractors to demonstrate that decomposed systems can well approximate nonlinear\ndynamics. Additionally, we apply our model to C. elegans data, illustrating a\ndiversity of dynamics that is obscured when classified into discrete states.\n\n# Installation Instructions:\n      1. (if itertools not installed): sudo pip3 install more-itertools [in the cmd]\n      2. (if pickle not installed):    pip install pickle-mixin         [in the cmd]\n      3. !pip install dLDS-discrete                                     [in the cmd]\n      4. from dlds_discrete import main_functions                       [in Python console]\n      5. from dlds_discrete.main_functions import *                     [in Python console]\n      6. Use any function from the ones described below\n      \n      \n\n## Main Useful Functions:\n\n### 1. create_dynamics:\n_create sample dynamics_\n\n\n\n**create_dynamics**_(type_dyn = 'cyl', max_time = 1000, dt = 0.01, params_ex = {'radius':1, 'num_cyls': 5, 'bias':0,'exp_power':0.2})_\n\n#### Detailed Description:\n      Create ground truth dynamics. \n      Inputs:\n          type_dyn          = Can be 'cyl', 'lorenz','FHN', 'multi_cyl', 'torus', 'circ2d', 'spiral'\n          max_time          = integer. Number of time points for the dynamics. Relevant only if data is empty;\n          dt                = time interval for the dynamics.\n          params_ex         = dictionary of parameters for the dynamics.  {'radius':1, 'num_cyls': 5, 'bias':0,'exp_power':0.2}):\n    \n      \n      Outputs:\n          dynamics: k X T matrix of the dynamics \n\n\n\n\n### 2. train_model_include_D:\n_main function to train the model._\n\n**train_model_include_D**_(max_time = 500, dt = 0.1, dynamics_type = 'cyl',num_subdyns = 3, \n                          error_reco = np.inf,  data = [], step_f = 30, GD_decay = 0.85, max_error = 1e-3, \n                          max_iter = 3000, F = [], coefficients = [], params= {'update_c_type':'inv','reg_term':0,'smooth_term':0}, \n                          epsilon_error_change = 10**(-5), D = [], x_former =[], latent_dim = None, include_D  = False,step_D = 30, reg1=0,reg_f =0 , \n                          max_data_reco = 1e-3,  sigma_mix_f = 0.1,  action_along_time = 'median', to_print = True, seed = 0, seed_f = 0, \n                          normalize_eig  = True,  params_ex = {'radius':1, 'num_cyls': 5, 'bias':0,'exp_power':0.2}, \n                          init_distant_F = False,max_corr = 0.1, decaying_reg = 1, other_params_c={}, include_last_up = False)_\n\n#### Detailed Description:\n      max_time         = Number of time points for the dynamics. Relevant only if data is empty;\n      dt               =  time interval for the dynamics\n      dynamics_type    = type of the dynamics. Can be 'cyl', 'lorenz','FHN', 'multi_cyl', 'torus', 'circ2d', 'spiral'\n      num_subdyns      = number of sub-dynamics\n      error_reco       = intial error for the reconstruction (do not touch)\n      data             = if one wants to use a pre define groud-truth dynamics. If not empty - it overwrites max_time, dt, and dynamics_type\n      step_f           = initial step size for GD on the sub-dynamics\n      GD_decay         = Gradient descent decay rate\n      max_error        = Threshold for the model error. If the model arrives at a lower reconstruction error - the training ends.\n      max_iter         = # of max. iterations for training the model\n      F                = pre-defined sub-dynamics. Keep empty if random.\n      coefficients     = pre-defined coefficients. Keep empty if random.\n      params           = dictionary that includes info about the regularization and coefficients solver. e.g. {'update_c_type':'inv','reg_term':0,'smooth_term':0}\n      epsilon_error_change = check if the sub-dynamics do not change by at least epsilon_error_change, for at least 5 last iterations. Otherwise - add noise to f\n      D                = pre-defined D matrix (keep empty if D = I)\n      latent_dim       =  If D != I, it is the pre-defined latent dynamics.\n      include_D        = If True -> D !=I; If False -> D = I\n      step_D           = GD step for updating D, only if include_D is true\n      reg1             = if include_D is true -> L1 regularization on D\n      reg_f            = if include_D is true ->  Frobenius norm regularization on D\n      max_data_reco    = if include_D is true -> threshold for the error on the reconstruction of the data (continue training if the error (y - Dx)^2 > max_data_reco)\n      sigma_mix_f            = std of noise added to mix f\n      action_along_time      = the function to take on the error over time. Can be 'median' or 'mean'\n      to_print               = to print error value while training? (boolean)\n      seed                   = random seed\n      seed_f                 = random seed for initializing f\n      normalize_eig          = whether to normalize each sub-dynamic by dividing by the highest abs eval\n      params_ex              = parameters related to the creation of the ground truth dynamics. e.g. {'radius':1, 'num_cyls': 5, 'bias':0,'exp_power':0.2}\n      init_distant_F         = when initializing F -> make sure that the correlation between each pair of {f}_i does not exeed a threshold\n      max_corr               = max correlation between each pair of initial sub-dyns (relevant only if init_distant_F is True)\n      decaying_reg           = decaying factor for the l1 regularization on the coefficients. If 1 - there is no decay. (should be a scalar in (0,1])\n      other_params_c         = additional parameters for the update step of c\n      include_last_up        = add another update step of the coefficients at the end\n      \n* example call (for Lorenz, w. 3 operators):       train_model_include_D(10, 0.01, 'lorenz', 3, GD_decay = 0.99)\n\n\n\n### 3. create_reco: \n_create the dynamics reconstruction using the operators and coefficients obtained by dLDS (F, c)._\n\n\n**create_reco**_(latent_dyn,coefficients, F, type_find = 'median',min_far =10, smooth_coeffs = False,\n          smoothing_params = {'wind':5})_\n#### Detailed Description:                \n                  This function creates the reconstruction \n                  Inputs:\n                      latent_dyn   = the ground truth latent dynamics\n                      coefficients = the operators coefficients ({$c(t)_i})\n                      F            = a list of transport operators (a list with M transport operators, \n                                                                    each is a square matrix, kXk, where k is the latent dynamics\n                                                                    dimension )\n                      type_find    = 'median'\n                      min_far      = 10\n                      smooth_coeffs= False\n                      smoothing_params = {'wind':5}\n\n                  Outputs:\n                      cur_reco    = dLDS reconstruction of the latent dynamics\n                      \n\n\n### 4. visualize_dyn:\n_visualization of a dynamics, with various coloring options_ \n     \n\n**visualize_dyn**_(dyn,ax = [], params_plot = {},turn_off_back = False, marker_size = 10, include_line = False, \n            color_sig = [],cmap = 'cool', return_fig = False, color_by_dominant = False, coefficients =[],\n            figsize = (5,5),colorbar = False, colors = [],vmin = None,vmax = None, color_mix = False, alpha = 0.4,\n            colors_dyns = np.array(['r','g','b','yellow']), add_text = 't ', text_points = [],fontsize_times = 18, \n            marker = \"o\",delta_text = 0.5, color_for_0 =None, legend = [],fig = [],return_mappable = False)_\n#### Detailed Description:                \n              Inputs:\n                   dyn          = dynamics to plot. Should be a np.array with size k X T\n                   ax           = the subplot to plot in. (optional). If empty list -> the function will create a subplot\n                   params_plot  = additional parameters for the plotting (optional). Can include plotting-related keys like xlabel, ylabel, title, etc.\n                   turn_off_back= disable backgroud of the plot? (optional). Boolean\n                   marker_size  = marker size of the plot (optional). Integer\n                   include_line = add a curve to the plot (in addition to the scatter plot). Boolean\n                   color_sig    = the color signal. \n                                      If empty and color_by_dominant is true - color by the dominant dynamics. \n                                      If empty and not color_by_dominant - color by time.\n                   cmap         = color map\n                   colors       = if not empty -> pre-defined colors for the different sub-dynamics. \n                                  If empty -> colors are according to the cmap.\n                   color_mix    = relevant only if  color_by_dominant is True. In this case the colors need to be in the form of [r,g,b]\n               Output:   \n                   h (only if return_fig) -> returns the figure   \n                \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dLDS-discrete-2022",
    "package_url": "https://pypi.org/project/dLDS-discrete-2022/",
    "platform": null,
    "project_url": "https://pypi.org/project/dLDS-discrete-2022/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dLDS-discrete-2022/0.1.1/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "scipy",
      "pandas",
      "webcolors",
      "seaborn",
      "colormap",
      "sklearn",
      "pylops",
      "dill",
      "mat73",
      "easydev"
    ],
    "requires_python": ">=3.8",
    "summary": "dLDS discrete model package",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13993842,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a1d4ee2ac1e863339aacbee087c88736063303c85583be8250bf239d7c9d8e2",
          "md5": "308e1adb1169a998bd42d1ce11fa170a",
          "sha256": "dc5c2012f485bda3603896b29c568ed1d280026f38d3ed76555d933726c6d355"
        },
        "downloads": -1,
        "filename": "dLDS_discrete_2022-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "308e1adb1169a998bd42d1ce11fa170a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 51976,
        "upload_time": "2022-05-31T22:12:12",
        "upload_time_iso_8601": "2022-05-31T22:12:12.129155Z",
        "url": "https://files.pythonhosted.org/packages/7a/1d/4ee2ac1e863339aacbee087c88736063303c85583be8250bf239d7c9d8e2/dLDS_discrete_2022-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7f6a7a95968911fb7ef31428a7b0e4ebb91c6a28cd40e4649650761a8914fc9",
          "md5": "1e4d7bd5ebf7d058bcbe2012b737c38d",
          "sha256": "896e3eb42d421409ad22fbe17e7279c1268e2706cbce7a4670224fe1f49a0bf4"
        },
        "downloads": -1,
        "filename": "dLDS_discrete_2022-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e4d7bd5ebf7d058bcbe2012b737c38d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 49482,
        "upload_time": "2022-05-31T22:12:14",
        "upload_time_iso_8601": "2022-05-31T22:12:14.153957Z",
        "url": "https://files.pythonhosted.org/packages/c7/f6/a7a95968911fb7ef31428a7b0e4ebb91c6a28cd40e4649650761a8914fc9/dLDS_discrete_2022-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a1d4ee2ac1e863339aacbee087c88736063303c85583be8250bf239d7c9d8e2",
        "md5": "308e1adb1169a998bd42d1ce11fa170a",
        "sha256": "dc5c2012f485bda3603896b29c568ed1d280026f38d3ed76555d933726c6d355"
      },
      "downloads": -1,
      "filename": "dLDS_discrete_2022-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "308e1adb1169a998bd42d1ce11fa170a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 51976,
      "upload_time": "2022-05-31T22:12:12",
      "upload_time_iso_8601": "2022-05-31T22:12:12.129155Z",
      "url": "https://files.pythonhosted.org/packages/7a/1d/4ee2ac1e863339aacbee087c88736063303c85583be8250bf239d7c9d8e2/dLDS_discrete_2022-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7f6a7a95968911fb7ef31428a7b0e4ebb91c6a28cd40e4649650761a8914fc9",
        "md5": "1e4d7bd5ebf7d058bcbe2012b737c38d",
        "sha256": "896e3eb42d421409ad22fbe17e7279c1268e2706cbce7a4670224fe1f49a0bf4"
      },
      "downloads": -1,
      "filename": "dLDS_discrete_2022-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1e4d7bd5ebf7d058bcbe2012b737c38d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 49482,
      "upload_time": "2022-05-31T22:12:14",
      "upload_time_iso_8601": "2022-05-31T22:12:14.153957Z",
      "url": "https://files.pythonhosted.org/packages/c7/f6/a7a95968911fb7ef31428a7b0e4ebb91c6a28cd40e4649650761a8914fc9/dLDS_discrete_2022-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}