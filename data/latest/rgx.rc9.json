{
  "info": {
    "author": "Dmitry Gritsenko",
    "author_email": "rgx@evtn.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Many people complain about unreadable and complex syntax of regular expressions.    \nMany others complain about how they can't remember all constructs and features.\n\n`rgx` solves those problems: it is a straightforward regexp builder. It also places non-capturing groups where needed to respect intended operator priority.   \nIt tries to produce a clean  \nIt can produce a regular expression string to use in `re.compile` or any other regex library of your choice.    \n\nIn other words, with `rgx` you can build a regular expression from parts, using straightforward and simple expressions.\n\n## Installation\n\n`pip install rgx`\n\nThat's it.\n\n## Basic usage\n\n### Hello, regex world\n\n```python\nfrom rgx import pattern, meta\nimport re\n\nseparator = meta.WHITESPACE.some() + (meta.WHITESPACE | \",\") + meta.WHITESPACE.some()\n\n# matches \"hello world\", \"hello, world\", \"hello            world\", \"hello,world\", \"hello ,  world\"\nhello_world = pattern((\n    \"hello\",\n    separator,\n    \"world\"\n)) # (?:hello(?:\\s)*(?:\\s|,)(?:\\s)*world)\n\nre.compile(\n    hello_world.render_str(\"i\") # global flag (case-insensitive)\n)\n\n```\n\n### Match some integers\n\nthis regex will match valid Python integer literals:\n\n```python\nfrom rgx import pattern\nimport re\n\nnonzero = pattern(\"1\").to(\"9\") # [1-9]\nzero = \"0\"\ndigit = zero | nonzero # [0-9]\ninteger = zero | (nonzero + digit.some()) # 0|[1-9][0-9]*\n\nint_regex = re.compile(str(integer))\n\n```\n\n...or this one:\n\n```python\nfrom rgx import pattern, meta\nimport re\n\nnonzero = pattern(\"1\").to(\"9\") # [1-9]\ndigit = meta.DIGIT # \\d\ninteger = digit | (nonzero + digit.some()) # \\d|[1-9]\\d*\n\nint_regex = re.compile(str(integer))\n\n```\n\n## Quickstart\n\n*in this readme, `x` means some pattern object. Occasionaly, `y` is introduced to mean some other pattern object (or literal)*\n\n### Literals and pattern objects\n\n`rgx` operates mostly on so-called \"pattern objects\" — `rgx.entities.RegexPattern` istances.    \nYour starting point would be `rgx.pattern` — it creates pattern objects from literals (and from pattern objects, which doesn't make a lot of sense).\n\n- `rgx.pattern(str, escape: bool = True)` creates a literal pattern — one that exactly matches given string. If you want to disable escaping, pass `escape=False`\n- `rgx.pattern(tuple[AnyRegexPattern])` creates a non-capturing group of patterns (nested literals will be converted too)\n- `rgx.pattern(list[str])` creates a character class (for example, `rgx.pattern([\"a\", \"b\", \"c\"])` creates pattern `[abc]`, that matches any character of those in brackets)\n    - Same can be achieved by `rgx.pattern(\"a\").to(\"c\")` or `rgx.pattern(\"a\") | \"b\" | \"c\"`\n\nMost operations with pattern objects support using Python literals on one side, for example: `rgx.pattern(\"a\") | b` would produce `[ab]` pattern object (specifically, `rgx.entities.Chars`)    \n\n### Rendering patterns\n\n```python\n\nfrom rgx import pattern\n\nx = pattern(\"one\")\ny = pattern(\"two\")\np = x | y\n\nrendered_with_str = str(p) # \"one|two\"\nrendered_with_method = p.render_str() # \"one|two\"\nrendered_with_method_flags = p.render_str(\"im\") # (?im)one|two\n```    \n\n### Capturing Groups\n\n```python\nfrom rgx import pattern, reference, named\n\nx = pattern(\"x\")\n\nprint(x.capture()) # (x)\n\nprint(reference(1)) # \\1\n\n\nnamed_x = x.named(\"some_x\") # x.named(name: str)\n\nprint(named_x) # (?P<some_x>x)\n\nnamed_x_reference = named(\"some_x\")\n\nprint(named_x_reference) # (?P=x)\n\n```\n\nTo create a capturing group, use `x.capture()`, or `rgx.reference(group: int)` for a reference.    \nTo create a named capturing group, use `rgx.named(name: str, x)`, or `rgx.named(name: str)` for a named reference.    \n\n### Character classes\n\n```python\nfrom rgx import pattern, meta\n\n\naz = pattern(\"a\").to(\"z\") # rgx.Chars.to(other: str | Literal | Chars)\nprint(az) # [a-z]\n\ndigits_or_space = pattern([\"1\", \"2\", \"3\", meta.WHITESPACE]) \nprint(digits_or_space) # [123\\s]\n\nprint(az | digits_or_space) # [a-z123\\s]\n\n\nprint( # rgx.Chars.reverse(self)\n    (az | digits_or_space).reverse() # [^a-z123\\s]\n)\n\n```\n\n#### Excluding characters\n\nIf you have two instances of Chars (or compatible literals), you can exclude one from another:\n\n```python\nfrom rgx import pattern\n\nletters = pattern(\"a\").to(\"z\") | pattern(\"A\").to(\"Z\") # [A-Za-z]\nvowels = pattern(list(\"aAeEiIoOuU\")) # [AEIOUaeiou]\nconsonants = letters.exclude(vowels) # [BCDFGHJ-NP-TV-Zbcdfghj-np-tv-z]\n```\n\n### Conditional pattern\n\n```python\nfrom rgx import pattern, conditional\n\nx = pattern(\"x\")\ny = pattern(\"y\")\nz = pattern(\"z\")\n\ncapture = x.capture()\n\n# (x)(?(1)y|z)\nprint(\n    capture + conditional(1, y, z)\n)\n``` \n\n### Repeating patterns\n\nIf you need to match a repeating pattern, you can use `pattern.repeat(count, lazy)`:\n\n```python\na = pattern(\"a\")\n\na.repeat(5)                      # a{5}\n# or\na * 5                            # a{5}, multiplication is an alias for .repeat\n\na.repeat(5).or_more()            # a{5,}\na.repeat(5).or_less()            # a{,5}\n\na.repeat_from(4).to(5)           # a{4, 5}, .repeat_from is just an alias for .repeat\n# or\na.repeat(4) >> 5                 # a{4, 5}\n\na.repeat(1).or_less()            # a?\n# or\n-a.repeat(1)                     # a?\n# or\na.maybe()                        # a?\n\na.repeat(1).or_more()            # a+\n# or\n+a.repeat(1)                     # a+\n# or\n+a                               # a+\n# or\na.many()                         # a+\n\na.repeat(0).or_more()            # a*\n# or\n+a.repeat(0)                     # a*\n# or\na.some()                         # a*\n# or (what)\n+-(a * 38)                       # a*\n```\nHere's what's going on:    \n`pattern.repeat(count, lazy)` returns a `{count, count}` `Range` object    \n`pattern * count` is the same as `pattern.repeat(count, False)`\n\n`Range` implements `or_more`, `or_less` and `to` methods:\n\n- `Range.or_more()` [or `+Range`] moves (on a copy) upper bound of range to infinity (actually `None`)\n- `Range.or_less()` [or `-Range`] moves (on a copy) lower bound of range to 0\n- `Range.to(count)` [or `Range >> count` (right shift)] replaces upper bound with given number\n\nAlso, RegexPattern implements unary plus (`+pattern`) as an alias for `pattern.many()`\n\n## Docs\n\n### Pattern methods\n\n#### `pattern.render_str(flags: str = '') -> str`\n\nRenders given pattern into a string with specified global flags.\n\n---\n\n#### `pattern.set_flags(flags: str) -> LocalFlags`\n\nThis method adds local flags to given pattern\n\n```python\nx.flags(\"y\") # \"(?y:x)\"\n```\n\n---\n\n#### `pattern.concat(other: AnyRegexPattern) -> Concat`\n\nUse to match one pattern and then another.\n\n`A.concat(B)` is equivalent to `A + B` (works if either A or B is a RegexPart object, not a Python literal)\n\n```python\nx.concat(y) # \"xy\"\nx + y # \"xy\"\n```\n\n---\n\n#### `pattern.option(other: AnyRegexPattern) -> Chars | ReversedChars | Option`\n\nUse to match either one pattern or another.\n\n`A.option(B)` is equivalent to `A | B` (if either A or B is a RegexPart object, not a Python literal)\n\n```python\nx.option(y) # \"x|y\"\nx | y # \"x|y\"\n```\n\n---\n\n#### `pattern.many(lazy: bool = False) -> Range`\n\nUse this for repeating patterns (one or more times)\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.many() # \"x+\"\nx.many(True) # \"x+?\"\n```\n\n---\n\n#### `pattern.some(lazy: bool = False) -> Range`\n\nUse this for repeating optional patterns (zero or more times)\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.some() # \"x*\"\nx.some(True) # \"x*?\"\n```\n\n---\n\n#### `pattern.maybe(lazy: bool = False) -> Range`\n\nUse this for optional patterns (zero or one times)\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.maybe() # \"x?\"\nx.maybe(True) # \"x??\"\n```\n\n---\n\n#### `pattern.x_or_less_times(count: int, lazy: bool = False) -> Range`\n\nUse this to match pattern x or less times (hence the name).\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.x_or_less_times(5) # \"x{,5}\"\nx.x_or_less_times(5, True) # \"x{,5}?\"\n```\n\n---\n\n#### `pattern.x_or_more_times(count: int, lazy: bool = False) -> Range`\n\nUse this to match pattern x or more times (hence the name).\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.x_or_more_times(5) # \"x{5,}\"\nx.x_or_more_times(5, True) # \"x{5,}?\"\n```\n\n---\n\n#### `pattern.x_times(count: int, lazy: bool = False) -> Range`\n\nUse this to match pattern exactly x times (hence the name).\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.x_times(5) # \"x{5}\"\nx.x_times(5, True) # \"x{5}?\"\nx.repeat(5) # x{5}\n```\n\n---\n\n#### `pattern.between_x_y_times(min_count: int, max_count: int, lazy: bool = False) -> Range`\n\nUse this to match pattern between x and y times, inclusive (hence the name).\n\nWhen not lazy, matches as many times as possible, otherwise matches as few times as possible.\n\n```python\nx.between_x_y_times(5, 6) # \"x{5,6}\"\nx.between_x_y_times(5, 6, True) # \"x{5,6}?\"\n```\n\n---\n\n#### `pattern.lookahead(other: RegexPattern) -> Concat`\n\nUse this to indicate that given pattern occurs before some another pattern (lookahead).\n\nIn other words, `x.lookahead(y)` matches a pattern `x` only if there is `y` after it\n\nLookahead pattern won't be captured.\n\n```python\nx.lookahead(y) # x(?=y)\nx.before(y) # x(?=y)\n```\n\n---\n\n#### `pattern.negative_lookahead(other) -> Concat`\n\nUse this to indicate that given pattern doesn't occur before some another pattern (negative lookahead).\n\nIn other words, `x.negative_lookahead(y)` matches a pattern `x` only if there is no `y` after it\n\nLookahead pattern won't be captured.\n\n```python\nx.negative_lookahead(y) # x(?!y)\nx.not_before(y) # x(?!y)\n```\n\n---\n\n#### `pattern.lookbehind(other: RegexPattern) -> Concat`\n\nUse this to indicate that given pattern occurs after some another pattern (lookbehind).\n\nIn other words, `x.lookbehind(y)` matches a pattern `x` only if there is `y` before it\n\nLookbehind pattern won't be captured.\n\n```python\nx.lookbehind(y) # (?<=y)x\nx.after(y) # (?<=y)x\n```\n\n---\n\n#### `pattern.negative_lookbehind(other) -> Concat`\n\nUse this to indicate that given pattern goes before some another pattern (negative lookbehind).\n\nIn other words, `x.negative_lookbehind(y)` matches a pattern `x` only if there is NO `y` before it\n\nLookbehind pattern won't be captured.\n\n```python\nx.negative_lookbehind(y) # (?<!y)x\nx.not_after(y) # (?<!y)x\n```\n\n---\n\n#### `pattern.capture() -> Group`\n\nUse this to make a capturing group out of pattern.\n\n```python\nx.capture() # (x)\n```\n\n### Meta\n\n`rgx.meta` is a collection of different meta-sequences and anchors:\n\n```python\nmeta.WORD_CHAR = UnescapedLiteral(r\"\\w\")\nmeta.NON_WORD_CHAR = UnescapedLiteral(r\"\\W\")\nmeta.DIGIT = UnescapedLiteral(r\"\\d\")\nmeta.NON_DIGIT = UnescapedLiteral(r\"\\D\")\nmeta.WHITESPACE = UnescapedLiteral(r\"\\s\")\nmeta.NON_WHITESPACE = UnescapedLiteral(r\"\\S\")\nmeta.WORD_BOUNDARY = UnescapedLiteral(r\"\\b\")\nmeta.NON_WORD_BOUNDARY = UnescapedLiteral(r\"\\B\")\nmeta.ANY = UnescapedLiteral(\".\")\nmeta.NEWLINE = UnescapedLiteral(r\"\\n\")\nmeta.CARRIAGE_RETURN = UnescapedLiteral(r\"\\r\")\nmeta.TAB = UnescapedLiteral(r\"\\t\")\nmeta.NULL_CHAR = UnescapedLiteral(r\"\\0\")\nmeta.STRING_START = UnescapedLiteral(\"^\")\nmeta.STRING_END = UnescapedLiteral(\"$\")\n```\n\nAlso `rgx.meta.CHAR_ESCAPE(char_number: int)` is available:\n\n```python\nfrom rgx import meta\n\nprint(meta.CHAR_ESCAPE(32)) # \\x20\nprint(meta.CHAR_ESCAPE(320)) # \\u0140\nprint(meta.CHAR_ESCAPE(320000)) # \\U0004e200\n\n```\n\n### Unicode meta\n\n`rgx.unicode_meta` is a collection of functions and constants, mostly for `\\p` and `\\P` usage:\n\nFunctions:    \n```python\nunicode_meta.PROPERTY(value: str) # renders into `\\p{value}` (any character with property specified by value, e.g. `PROPERTY(\"Ll\") -> \\p{Ll}`)\nunicode_meta.PROPERTY_INVERSE(value: str) # matches all characters *not* matched by corresponding `PROPERTY` (`\\P{value}`)\n\nunicode_meta.NAMED_PROPERTY(name: str, value: str) # renders into `\\p{name=value}` and matches any character which property `name` equals `value`\nunicode_meta.NAMED_PROPERTY_INVERSE(name: str, value: str) # same, but inverted (`\\P{name=value}`)\n```\nConstants:    \n```python\nunicode_meta.LETTER = PROPERTY(\"L\")\nunicode_meta.NON_LETTER = PROPERTY_INVERSE(\"L\")\n\nunicode_meta.WHITESPACE = PROPERTY(\"Z\")\nunicode_meta.NON_WHITESPACE = PROPERTY_INVERSE(\"Z\")\n\nunicode_meta.DIGIT = PROPERTY(\"Nd\")\nunicode_meta.NON_DIGIT = PROPERTY(\"Nd\")\n```\n## Extending\n\nYou can extend generation by subclassing one of the classes of `rgx.entities` module.    \nThe one neccessary method to provide is `.render(self)`. It should return an iterable of strings (e.g. `[\"something\"]`).    \nBuilt-in components (and this section) are using generators for that purpose, but you're free to choose whatever works for you.\nFor example, if you want to render a PCRE accept control verb - `(*ACCEPT)`, you can do it like this:\n\n\n```python\nfrom rgx.entities import RegexPattern, Concat\nfrom rgx import pattern\nfrom typing import Iterable\n\n\nclass Accept(RegexPattern):\n    def render(self) -> Iterable[str]:\n        yield \"(*ACCEPT)\"\n\n\ndef accept(self) -> Concat:\n    return self + Accept()\n\n\nRegexPattern.accept = accept\n\nx = pattern(\"something\").accept() \nprint(x) # something(*ACCEPT)\n```\n\nOr like this:\n\n```python\nfrom rgx.entities import RegexPattern, Concat\nfrom rgx import pattern\nfrom typing import Iterable\n\n\nclass Accept(RegexPattern):\n    def __init__(self, accepted_pattern: RegexPattern):\n        self.accepted_pattern = accepted_pattern\n\n    def render(self) -> Iterable[str]:\n        yield from accepted_pattern.render()\n        yield \"(*ACCEPT)\"\n\n\ndef accept(self) -> Concat:\n    return Accept(self)\n\nRegexPattern.accept = accept\n\nx = pattern(\"something\").accept() # something(*ACCEPT)\n```\n\n### Priority\n\nIf your extension has to rely on some priority, you can use `respect_priority` function.    \nLet's say you want to add a `x/y` operation, which does something (wow) and has prority between `a|b` and `ab` — so `a|b/cd` is the same as `a|(?:b/(?:cd))`.    \n\n```python\nfrom rgx.entities import RegexPattern, Concat, Option, AnyRegexPattern, respect_priority, pattern\nfrom typing import Iterable\n\nclass MagicSlash(RegexPattern):\n    priority = (Concat.priority + Option.priority) // 2 # let's take something in the middle\n\n    def __init__(self, left: RegexPattern, right: RegexPattern):\n        self.left = respect_priority(left, self.priority) # you need to wrap all parts of your expression in respect_priority() \n        self.right = respect_priority(right, self.priority) # ...and pass your expression priority as a second argument\n\n    def render(self) -> Iterable[str]:\n        yield from self.left.render()\n        yield \"/\"\n        yield from self.right.render()\n\n\ndef slash(self, other: AnyRegexPattern) -> MagicSlash: # AnyRegexPattern is either a RegexPattern instance or a Python literal\n    return MagicSlash(self, other) # respect_priority already takes literals in consideration, so no extra actions needed\n\ndef rslash(self, other: AnyRegexPattern) -> MagicSlash: # other/self\n    other = pattern(other)\n    return other / self\n\n\nRegexPattern.slash = slash\nRegexPattern.__truediv__ = slash # / operator\nRegexPattern.__rtruediv__ = rslash\n\n\na = pattern(\"a\")\nb = pattern(\"b\")\nc = pattern(\"c\")\nd = pattern(\"d\")\n\nprint(\n    (a | b) / (c + d) # [ab]/cd\n)\n\nprint(\n    ((a | b) / c) + d # (?:[ab]/c)d\n)\n\nprint(\n    a | (b / c) + d   # a|(?:b/c)d\n)\n\n```\n\n\n## Common questions\n\n### Difference between `(x, y)` and `x + y`\n\nPrevious examples used `()` and `+`, and the difference might not be so obvious.    \n\n- `x + y` creates a concatenation of patterns (`rgx.entities.Concat`), with no extra characters apart from those of patterns\n- `x + y` can be used only if at least one of the operands is a pattern object (that is, created with one of `rgx` functions or is one of `rgx` constants)\n- `x + y` produces a pattern object itself, so you won't need to call `pattern` on it to call pattern methods\n\n- `pattern((x, y))` creates a non-capturing group (`rgx.entities.NonCapturingGroup`): `pattern((x, y)).render_str()` -> `(?:xy)`\n- `(x, y)` can be used with any pattern-like literals or pattern objects\n- `(x, y)` is a tuple literal, so you can't use pattern methods on it directly or convert it into a complete expression (you need to use `rgx.pattern` on it first)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evtn/rgx",
    "keywords": "regex,regexp,regular expressions",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rgx",
    "package_url": "https://pypi.org/project/rgx/",
    "platform": null,
    "project_url": "https://pypi.org/project/rgx/",
    "project_urls": {
      "Homepage": "https://github.com/evtn/rgx",
      "Repository": "https://github.com/evtn/rgx"
    },
    "release_url": "https://pypi.org/project/rgx/1.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Typed, simple and readable regexp generation",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15577895,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "708525c3437972c71eaede1bb762cb9ac431c65b63697a803ed9c31e5ecd70de",
          "md5": "273536611f3ee0f970a3b71eba485b30",
          "sha256": "e3c25162f326c243320e1609bd3128a0fab2f4f4dcfcea5401fe67728c1c3a15"
        },
        "downloads": -1,
        "filename": "rgx-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "273536611f3ee0f970a3b71eba485b30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 8795,
        "upload_time": "2022-08-07T19:56:52",
        "upload_time_iso_8601": "2022-08-07T19:56:52.574435Z",
        "url": "https://files.pythonhosted.org/packages/70/85/25c3437972c71eaede1bb762cb9ac431c65b63697a803ed9c31e5ecd70de/rgx-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65ee4421a4cd547f0d0fcfdde75431afb12aaf078f207868cc283de2f568e881",
          "md5": "ab35dd660b42d1f14adf04f9d557e899",
          "sha256": "27ad964b50effb6b37fba4e823a88139602187d822bc3a2d597d18af2a0386fb"
        },
        "downloads": -1,
        "filename": "rgx-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab35dd660b42d1f14adf04f9d557e899",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10656,
        "upload_time": "2022-08-07T19:56:53",
        "upload_time_iso_8601": "2022-08-07T19:56:53.737281Z",
        "url": "https://files.pythonhosted.org/packages/65/ee/4421a4cd547f0d0fcfdde75431afb12aaf078f207868cc283de2f568e881/rgx-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e6ea18045ee9b51f6e6ef2dec89ae88fb1d1dd6fa4ca914d78a775ae1272e45",
          "md5": "22cfa3b52dc5c9337cff7fe6a27ed822",
          "sha256": "4834ef7f6c12939649575c9cd0506f3c327ca2ff461a7e2018c9e9ab9009d9f3"
        },
        "downloads": -1,
        "filename": "rgx-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22cfa3b52dc5c9337cff7fe6a27ed822",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 8903,
        "upload_time": "2022-08-07T20:14:58",
        "upload_time_iso_8601": "2022-08-07T20:14:58.046510Z",
        "url": "https://files.pythonhosted.org/packages/6e/6e/a18045ee9b51f6e6ef2dec89ae88fb1d1dd6fa4ca914d78a775ae1272e45/rgx-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39780365c0de93ea70a6333aa3d9bd3067da3a04277159044fe9627803297d56",
          "md5": "193a4c3ca0b70a9de1b9cbfc0b1452af",
          "sha256": "98ea4624f05655305b317393c7c1b4d12de78299caeb28b1fa67b46f29a576ce"
        },
        "downloads": -1,
        "filename": "rgx-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "193a4c3ca0b70a9de1b9cbfc0b1452af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 10972,
        "upload_time": "2022-08-07T20:14:59",
        "upload_time_iso_8601": "2022-08-07T20:14:59.691611Z",
        "url": "https://files.pythonhosted.org/packages/39/78/0365c0de93ea70a6333aa3d9bd3067da3a04277159044fe9627803297d56/rgx-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6f6599c14ed685bd59385b6a4d626a71cc5d78b4f5396d178278c12a9825b6d",
          "md5": "78b601d78a14f5f8d35ea0b506cce5cb",
          "sha256": "5737bd8d8e3b9ecd73d27653bf9d0155f2172b0e412b561baf4fca77ca08d7e1"
        },
        "downloads": -1,
        "filename": "rgx-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78b601d78a14f5f8d35ea0b506cce5cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9167,
        "upload_time": "2022-08-19T11:38:45",
        "upload_time_iso_8601": "2022-08-19T11:38:45.401637Z",
        "url": "https://files.pythonhosted.org/packages/d6/f6/599c14ed685bd59385b6a4d626a71cc5d78b4f5396d178278c12a9825b6d/rgx-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "210d6d2fb766287da42c611e8eef5032cd335501e95ed79601bf96cf3ee9d34c",
          "md5": "04f8e8e6cf8efa101e2a735f28c5c68e",
          "sha256": "01d15da76c1fb6fead339f4d04470ac4ee476a03924c7da507de9be6be991b9f"
        },
        "downloads": -1,
        "filename": "rgx-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "04f8e8e6cf8efa101e2a735f28c5c68e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11401,
        "upload_time": "2022-08-19T11:38:46",
        "upload_time_iso_8601": "2022-08-19T11:38:46.891154Z",
        "url": "https://files.pythonhosted.org/packages/21/0d/6d2fb766287da42c611e8eef5032cd335501e95ed79601bf96cf3ee9d34c/rgx-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b79f0b367ebba526633b0fd6189c03e8c5a209b793c21549718eee20520c583",
          "md5": "d6bdbdfe0053efddd2b86cd837aab033",
          "sha256": "029689070b5719012b31725d3f0d0ec28ec32eac00df328f3b791ac259685ff0"
        },
        "downloads": -1,
        "filename": "rgx-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6bdbdfe0053efddd2b86cd837aab033",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9214,
        "upload_time": "2022-08-24T12:56:42",
        "upload_time_iso_8601": "2022-08-24T12:56:42.450033Z",
        "url": "https://files.pythonhosted.org/packages/7b/79/f0b367ebba526633b0fd6189c03e8c5a209b793c21549718eee20520c583/rgx-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8b63df656374918998c16ddba219ca30b216d2910ed5c025a0b0180b53e4ae9",
          "md5": "eb4baf3d80f493c09703d996d38376f1",
          "sha256": "0239e4ddc16455a0a02d1a103792862ed498494305fe211dfce15dbb6e8bd9e8"
        },
        "downloads": -1,
        "filename": "rgx-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb4baf3d80f493c09703d996d38376f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11505,
        "upload_time": "2022-08-24T12:56:43",
        "upload_time_iso_8601": "2022-08-24T12:56:43.619475Z",
        "url": "https://files.pythonhosted.org/packages/e8/b6/3df656374918998c16ddba219ca30b216d2910ed5c025a0b0180b53e4ae9/rgx-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "393abf1fb98bdb33265e5aeb8a6e3149ac0865dae83a3154a252449356ebd3e0",
          "md5": "7606d48b2e5c776acebe71cc20731f97",
          "sha256": "37ab1886f63806195da15c48b78da018f118ee0e65337e253cce6b193e4c02af"
        },
        "downloads": -1,
        "filename": "rgx-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7606d48b2e5c776acebe71cc20731f97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9214,
        "upload_time": "2022-08-25T17:15:03",
        "upload_time_iso_8601": "2022-08-25T17:15:03.324897Z",
        "url": "https://files.pythonhosted.org/packages/39/3a/bf1fb98bdb33265e5aeb8a6e3149ac0865dae83a3154a252449356ebd3e0/rgx-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d62fc81d2d0aed2447879a5a3e285554e27d1b7ffeb8c91ca62e6a58dcf1fa20",
          "md5": "2a941f236b9d986dbd176962a211be38",
          "sha256": "63d48606c618861afb0bac3ddc49fe6fb949afc0ebb36cfd60b7831d3a0197aa"
        },
        "downloads": -1,
        "filename": "rgx-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2a941f236b9d986dbd176962a211be38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11488,
        "upload_time": "2022-08-25T17:15:04",
        "upload_time_iso_8601": "2022-08-25T17:15:04.566535Z",
        "url": "https://files.pythonhosted.org/packages/d6/2f/c81d2d0aed2447879a5a3e285554e27d1b7ffeb8c91ca62e6a58dcf1fa20/rgx-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "491bf6910ac29da80c551e50d03f334b6e6d241ea47d6b8a425888c6b8a50ec6",
          "md5": "b9d4fc6196d625d56e39a98aa9c7a340",
          "sha256": "663f48c127158c01b63f456ef2d5b7b22d2000b68c400fcbb7dd079ee2e26582"
        },
        "downloads": -1,
        "filename": "rgx-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9d4fc6196d625d56e39a98aa9c7a340",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9228,
        "upload_time": "2022-08-25T18:43:31",
        "upload_time_iso_8601": "2022-08-25T18:43:31.805058Z",
        "url": "https://files.pythonhosted.org/packages/49/1b/f6910ac29da80c551e50d03f334b6e6d241ea47d6b8a425888c6b8a50ec6/rgx-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c021c9e11f5fd8e46881fb47aca637b37e6b1bf1cae7cb54efca9478d949d9e5",
          "md5": "0759f612435bc5c7876d3a4c408b7ee8",
          "sha256": "865e1dd836b30c41e2a784ea2ef8cf3304b6c686403b3911938ebdc47f425741"
        },
        "downloads": -1,
        "filename": "rgx-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0759f612435bc5c7876d3a4c408b7ee8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11523,
        "upload_time": "2022-08-25T18:43:32",
        "upload_time_iso_8601": "2022-08-25T18:43:32.936914Z",
        "url": "https://files.pythonhosted.org/packages/c0/21/c9e11f5fd8e46881fb47aca637b37e6b1bf1cae7cb54efca9478d949d9e5/rgx-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cee01faee87ebf4cff02e3f543cc22d0c8e8aebd8f0e1ebccd35b96b57562226",
          "md5": "7d1bd2c0fcd277553f9d0cd0bde55bb0",
          "sha256": "11bab2349663f63e38c2d673e26549ff126380ae508b80b96ae05c3de6a7ad6b"
        },
        "downloads": -1,
        "filename": "rgx-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d1bd2c0fcd277553f9d0cd0bde55bb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13086,
        "upload_time": "2022-10-22T04:49:23",
        "upload_time_iso_8601": "2022-10-22T04:49:23.758853Z",
        "url": "https://files.pythonhosted.org/packages/ce/e0/1faee87ebf4cff02e3f543cc22d0c8e8aebd8f0e1ebccd35b96b57562226/rgx-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67d4f3fe16e58f03ec85a89a085cb698e24347530a6d052f2d64dca1cb715e02",
          "md5": "755c6fc68d5a6398f845a8371e049755",
          "sha256": "132f6b4594652f73dcc02d2b6464860fd97785328ee5cc344b576d237e5b5ef6"
        },
        "downloads": -1,
        "filename": "rgx-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "755c6fc68d5a6398f845a8371e049755",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17537,
        "upload_time": "2022-10-22T04:49:25",
        "upload_time_iso_8601": "2022-10-22T04:49:25.632371Z",
        "url": "https://files.pythonhosted.org/packages/67/d4/f3fe16e58f03ec85a89a085cb698e24347530a6d052f2d64dca1cb715e02/rgx-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d2f5956c3bda034dc55f2e3406ba5324e4c77b6b39e2b2ba30500089cef62e",
          "md5": "75270700e3014b4a27715489fc2e9f1e",
          "sha256": "a96ccb1c2f93cb314deb61b702fe8dd3d48cc9f79412f423b44086775db2fc68"
        },
        "downloads": -1,
        "filename": "rgx-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75270700e3014b4a27715489fc2e9f1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13085,
        "upload_time": "2022-10-22T05:29:02",
        "upload_time_iso_8601": "2022-10-22T05:29:02.654714Z",
        "url": "https://files.pythonhosted.org/packages/82/d2/f5956c3bda034dc55f2e3406ba5324e4c77b6b39e2b2ba30500089cef62e/rgx-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "616b024f538ddd130344b0693cfb8c99739a0f5c44933f022a00a581deee9bca",
          "md5": "6e5d77292b70a3139ca61776b7ecac91",
          "sha256": "ddaf0eb344734eb1bf1b1ffd9eb05b0ad6c6d7270f321cab46f2d47c90bc17bc"
        },
        "downloads": -1,
        "filename": "rgx-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e5d77292b70a3139ca61776b7ecac91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17526,
        "upload_time": "2022-10-22T05:29:04",
        "upload_time_iso_8601": "2022-10-22T05:29:04.843638Z",
        "url": "https://files.pythonhosted.org/packages/61/6b/024f538ddd130344b0693cfb8c99739a0f5c44933f022a00a581deee9bca/rgx-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92dcb4c97b650f1975615f6066466c817448b2608176e6cc8facd66e19d4af81",
          "md5": "56e412b206adcb53bdc052bf1227a6fb",
          "sha256": "9d6d300446c9940c7be40222861567748e1679683674e13a300b849495c97d1d"
        },
        "downloads": -1,
        "filename": "rgx-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56e412b206adcb53bdc052bf1227a6fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13682,
        "upload_time": "2022-10-29T13:49:29",
        "upload_time_iso_8601": "2022-10-29T13:49:29.535076Z",
        "url": "https://files.pythonhosted.org/packages/92/dc/b4c97b650f1975615f6066466c817448b2608176e6cc8facd66e19d4af81/rgx-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8d221a4a9738a0984fdbbbb96b3829495e0cd49684c8a4b7096fac5768c11c",
          "md5": "b0463c4b03cca3ae7cb61688490c7df9",
          "sha256": "43cca1a802beb5538320bfa2b2a216f3734de5cfb4308bd08af0707d4ac1b99d"
        },
        "downloads": -1,
        "filename": "rgx-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b0463c4b03cca3ae7cb61688490c7df9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 18363,
        "upload_time": "2022-10-29T13:49:30",
        "upload_time_iso_8601": "2022-10-29T13:49:30.917015Z",
        "url": "https://files.pythonhosted.org/packages/bb/8d/221a4a9738a0984fdbbbb96b3829495e0cd49684c8a4b7096fac5768c11c/rgx-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92dcb4c97b650f1975615f6066466c817448b2608176e6cc8facd66e19d4af81",
        "md5": "56e412b206adcb53bdc052bf1227a6fb",
        "sha256": "9d6d300446c9940c7be40222861567748e1679683674e13a300b849495c97d1d"
      },
      "downloads": -1,
      "filename": "rgx-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56e412b206adcb53bdc052bf1227a6fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 13682,
      "upload_time": "2022-10-29T13:49:29",
      "upload_time_iso_8601": "2022-10-29T13:49:29.535076Z",
      "url": "https://files.pythonhosted.org/packages/92/dc/b4c97b650f1975615f6066466c817448b2608176e6cc8facd66e19d4af81/rgx-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb8d221a4a9738a0984fdbbbb96b3829495e0cd49684c8a4b7096fac5768c11c",
        "md5": "b0463c4b03cca3ae7cb61688490c7df9",
        "sha256": "43cca1a802beb5538320bfa2b2a216f3734de5cfb4308bd08af0707d4ac1b99d"
      },
      "downloads": -1,
      "filename": "rgx-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b0463c4b03cca3ae7cb61688490c7df9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 18363,
      "upload_time": "2022-10-29T13:49:30",
      "upload_time_iso_8601": "2022-10-29T13:49:30.917015Z",
      "url": "https://files.pythonhosted.org/packages/bb/8d/221a4a9738a0984fdbbbb96b3829495e0cd49684c8a4b7096fac5768c11c/rgx-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}