{
  "info": {
    "author": "Zac Witte",
    "author_email": "zacwitte@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# HyperLogLogDB\n\nA disk-backed in-memory database of HyperLogLog data structures for estimating\ncardinality of many distinct sets. It uses memory mapped files to keep\nrecently used data in memory and let's the OS layer sync data between disk\nand memory as space allows. A\n[HyperLogLog](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.142.9475)\nis a near-optimal cardinality estimation algorithm. I built this key-value\nstyle database to facilitate a need we have at [pubnub](http://pubnub.com)\nfor tracking continuously growing sets for each customer for each granular\nperiod of time. HyperLogLog's ability to add values and estimate in\ncardinality in constant time and memory is essential. Sparse data sets also\ncompress quite well.\n\nThis library contains a modified version of the HyperLogLog implementation\nby Vasiliy Evseenko: <https://github.com/svpcom/hyperloglog>\n\nThe original description of the HyperLogLog data structure can be found here:\n<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.76.4286>\n\n## Install\n\n\nEither:\n\n    sudo pip install hyperloglogdb\n\nOr:\n\n    sudo python setup.py install\n\n## Dependencies\n\n * [numpy](http://www.numpy.org/) is used for efficient merging of sets\n\n## Examples\n\n```pycon\n>>> import hyperloglogdb\n>>>\n>>> my_hlldb = hyperloglogdb.HyperLogLogDB(file_path='my_hlldb.db', error_rate=0.01)\n>>>\n>>> # or:\n>>> f = open('my_hlldb.db', 'r+b')\n>>> my_hlldb = hyperloglogdb.HyperLogLogDB(fileobj=f, error_rate=0.01)\n>>>\n>>> # Add 'test_val' to the set stored at key 'test_key'\n>>> my_hlldb.add('test_key', 'test_val')\n>>> print my_hlldb.count('test_key')\n1\n>>> print len(my_hlldb.get_hll('test_key'))\n1\n>>> my_hlldb.flush()\n>>> # you can now copy or compress my_hlldb.db and open it at a later time\n>>>\n>>> my_hlldb2 = hyperloglogdb.HyperLogLogDB(file_path='my_hlldb2.db', error_rate=0.01)\n>>> my_hlldb2.add('test_key', 'test_val2')\n>>> my_hlldb.merge(my_hlldb2)\n>>> print my_hlldb.count('test_key')\n2\n```\n\n## Documentation\n\n### _class_ `hyperloglogdb.MmapSlice`( _mmap_file_, _length_, _offset=0_ )\n\nA module abstracting a slice of a larger memory mapped file (python `mmap`)\n\n * **mmap_file** - the `mmap` file object\n * **length** - length in bytes of this slice\n * **offset** - offset in bytes from the start of the _mmap_file_\n\n> #### count( _val_ )\n> Returns the number of occurrences of val in the slice\n>\n> * **val** - a byte to search for\n\n### _class_ `hyperloglogdb.HyperLogLog`( _error_rate_, _data_, _bitcount_arr=None_ )\n\nA single instance of a HyperLogLog data structure\n\n * **error_rate** - ( _float_ ) the approx. percentage error rate. This determines the size of the data.\n * **data** - ( _MmapSlice_ ) the data slice where this hyper log log should be stored\n * **bitcount_arr** - ( _list_ ) optionally include a pre-generated bitcount array so it doesn't need to be regenerated for each HLL in the DB.\n\n> #### add( _val_ )\n> Adds a single value to the set\n>\n> * **val** - ( _string_ ) to add to the set\n\n\n> #### update( _others_ )\n> Merges either a single `HyperLogLog` or a list of `HyperLogLog`s into the current data structure\n>\n> * **others** - ( _HyperLogLog_ or _list of HyperLogLogs_ ) to merge into the set\n\n> #### length()\n>\n> Returns the estimated cardinality of the set\n\n\n### _class_ `hyperloglogdb.HyperLogLogDB`( _file_path=None_, _fileobj=None_, _error_rate=0.01_ )\n\nA disk-backed key-value stores of `HyperLogLog` data structures\n\n * **file_path** - ( _string_ ) a relative path to the location of the file storing the data. If the file does not exist it will be created. Either _file_path_ or _fileobj_ must be provided.\n * **fileobj** - ( _file_ object ) a file object containing the file for storing data. Either _file_path_ or _fileobj_ must be provided.\n * **error_rate** - ( _float_ ) the approx. percentage error rate. This determines the size of each `HyperLogLog`.\n\n> #### flush()\n> Syncs any in-memory updates to disk\n\n> #### create( _key_ )\n> Creates an empty `HyperLogLog` data structure and returns it.\n>\n> * **key** - ( _string_ ) the key that the HyperLogLog is associated with\n\n> #### get_hll( _key_ )\n> Returns the `HyperLogLog` associated with _key_ or `None` if the key does not exist\n>\n> * **key** - ( _string_ ) the key that the HyperLogLog is associated with\n\n> #### merge( _others_ )\n> Merges either a single `HyperLogLogDB` or a list of `HyperLogLogDB`s into the current database. If a key in _others_ does not exist in the current structure it will be created.\n>\n> * **others** - ( _HyperLogLogDB_ or list of _HyperLogLogDBs_ ) to merge into the database\n\n> #### update( _key_, _others_ )\n> Merges either a single `HyperLogLog` or a list of `HyperLogLog`s into the HLL associated with _key_. If _key_  does not exist in the current structure it will be created.\n>\n> * **key** - ( _string_ ) the key that the HyperLogLog is associated with\n> * **others** - ( _HyperLogLog_ or list of _HyperLogLogs_ ) to merge into the HLL associated with _key_\n\n> #### copy_hll( _from_hll_, _to_hll_ )\n> Copies the data from _from_hll_ over the data in _to_hll_\n>\n> * **from_hll** - ( _HyperLogLog_ ) the HyperLogLog instance to copy data from\n> * **to_hll** - ( _HyperLogLog_ ) the HyperLogLog instance to copy data to\n\n> #### add( _key_, _val_ )\n> Add a value to the `HyperLogLog` associated with _key_ and create _key_ if it does not exist.\n>\n> * **key** - ( _string_ ) the key that the HyperLogLog is associated with\n> * **val** - ( _string_ ) the value to add to the set\n\n> #### count( _key_ )\n> Returns the estimated cardinality of the `HyperLogLog` associated with _key_ or 0 if _key_ does not exist\n>\n> * **key** - ( _string_ ) the key that the HyperLogLog is associated with",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zacwitte/HyperLogLogDB",
    "keywords": null,
    "license": "LGPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "hyperloglogdb",
    "package_url": "https://pypi.org/project/hyperloglogdb/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/hyperloglogdb/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/zacwitte/HyperLogLogDB"
    },
    "release_url": "https://pypi.org/project/hyperloglogdb/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A disk-based database of HyperLogLog data structures for estimating cardinality of many distinct sets",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 793156,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc02c490658dbccda6389934a750e98d4baae21b8d71bc59a0b101a3e005656c",
          "md5": "6b2f4745d7f0557e2a02d8b6ea73f2c3",
          "sha256": "c4720775cb7413093636ba14608990e5a0d6b2b5abe84a0c0403dae60b506dfe"
        },
        "downloads": -1,
        "filename": "hyperloglogdb-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b2f4745d7f0557e2a02d8b6ea73f2c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7795,
        "upload_time": "2013-04-30T23:28:56",
        "upload_time_iso_8601": "2013-04-30T23:28:56.881278Z",
        "url": "https://files.pythonhosted.org/packages/bc/02/c490658dbccda6389934a750e98d4baae21b8d71bc59a0b101a3e005656c/hyperloglogdb-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc02c490658dbccda6389934a750e98d4baae21b8d71bc59a0b101a3e005656c",
        "md5": "6b2f4745d7f0557e2a02d8b6ea73f2c3",
        "sha256": "c4720775cb7413093636ba14608990e5a0d6b2b5abe84a0c0403dae60b506dfe"
      },
      "downloads": -1,
      "filename": "hyperloglogdb-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6b2f4745d7f0557e2a02d8b6ea73f2c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7795,
      "upload_time": "2013-04-30T23:28:56",
      "upload_time_iso_8601": "2013-04-30T23:28:56.881278Z",
      "url": "https://files.pythonhosted.org/packages/bc/02/c490658dbccda6389934a750e98d4baae21b8d71bc59a0b101a3e005656c/hyperloglogdb-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}