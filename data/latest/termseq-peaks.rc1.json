{
  "info": {
    "author": "Ryan Dale",
    "author_email": "dalerr@nih.gov",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Term-seq peak-caller\n====================\n\n**Homepage: https://github.com/nichd-bspc/termseq-peaks**\n\nThis tool was designed to call 3'-end peaks from term-seq data in bacteria,\nhandling replicates in a statistically robust manner.\n\nInstallation\n------------\n\nWith pip::\n\n   pip install termseq-peaks\n\nWith conda::\n\n   conda install termseq-peaks --channel conda-forge --channel bioconda\n\nFrom source::\n\n   git clone <repo>\n   cd <repo>\n   python setup.py install\n\nUsage::\n\n    termseq_peaks <bedgraphs> --peaks out.bed [additional options]\n\nBackground\n----------\n\nThis tool takes two novel approaches that together yield good results for\ncalling precise peaks in term-seq data with biological replicates. These\napproaches are 1) a signal processing approach and 2) an implementation of\nmulti-way IDR to handle >2 replicates.\n\nFor peak-calling, the venerable macs2 peak-caller [0] is the go-to method.\nHowever, macs2 is designed for ChIP-seq data and all the assumptions that go\nalong with that (modeling peaks based on fragment size, controlling for open\nchromatin, comparing IP against a background input, etc). We found that naively\napplying macs2 to term-seq data resulted in suboptimal peak calls. Term-seq\nsignal is composed of single-bp positions of read ends and has a very high\ndynamic range since it is coming from trancribed RNA that can have very high\ncopy numbers per cell (in contrast to ChIP-seq which we have just 1 copy per\nhaploid cell).\n\nFurthermore, many peak-callers have limited support for multiple replicates.\nOne general solution to this is to apply the Irreproducible Discovery Rate\nmethod (IDR), originally developed for the ENCODE project. By design, the IDR\nmethod only takes two replicates at a time.\n\n\nUsage\n-----\n\nPrepare input\n+++++++++++++\nRequired input is normalized signal bedGraphs for each replicate. If data are\nstranded, there should be separate files for each strand. Gzipped bedGraphs are\nsupported automatically if the filename ends in ``.gz``.\n\nOne way of doing this might be with deepTools bamCoverage. This example makes\na bedGraph file out of unique reads on the minus strand (``--samFlagInclude\n16``), uses 1-bp resolution (``--binSize 1``), only considers unique reads\n(``--minMappingQuality 20``), and uses only the first base of each read to\nbuild the signal (``--Offset 1``, as appropriate for a Term-seq library, for\nexample).\n\n::\n\n   bamCoverage \\\n     --bam rep1.bam \\\n     -o rep1_minus.bedgraph \\\n     --outFileFormat bedgraph \\\n     --binSize 1 \\\n     --Offset 1 \\\n     --minMappingQuality 20 \\\n     --samFlagInclude 16 \\\n\nRun\n+++\nIf we do this for each replicate's minus-strand reads, these bedGraphs can then\nbe provided to termseq-peaks::\n\n   termseq-peaks rep1_minus.bedgraph rep2_minus.bedgraph peaks_minus --strand -\n\nBy default the output ``peaks_minus.bed`` will contain peaks falling below an\nIDR threshold of 0.05. The full oracle file (the leniently-called peaks on\na bedgraph that merges all provided bedgraphs) will be output as\n``peaks_minus.bed.oracle.narrowPeak``.\n\nThese files can be used with IGV or other genome browsers to inspect the peaks\nalongside the input signals to assess the peak-calling performance.\n\nFor more help, run::\n\n   termseq-peaks -h\n\n\nAlgorithm\n---------\n\nThis tool takes multiple normalized bedGraph files representing the normalized\nsignal for each replicate, and calls a set of consistent peaks at a provided\nIDR [1] cutoff.\n\n\n- Peaks are called using scipy.signal.find_peaks [2] with very lenient\n  parameters to intentionally include both real peaks and noise. These peaks\n  are called on each replicate.\n\n- The score for the peaks is the \"prominence\" value for each peak; see [2] for\n  details.\n\n- For each unique pairwise combination of replicates, IDR routines from [1] are\n  run, resulting in an output file containing merged peaks from those two files\n  along with IDR values for each. In practice the tool stores these as temp\n  files. The number of peaks falling below the IDR threshold is counted for\n  each pairwise comparison. The minimum such number, N, across all pairwise\n  combinations of replicates is used as the final number of peaks to select.\n\n- All bedGraphs are additionally merged together and peaks are similarly called\n  on that merged signal to get the \"oracle\" peaks.\n\n- The oracle peaks are then ranked by their score and the top N peaks are\n  selected as the final peaks. The scores in the final peaks are the scores\n  from the oracle peaks, that is, the peak prominences from calling peaks on\n  the merged bedGraphs.\n\nOutput\n------\nThe ``find_peaks`` function returns various metrics. Here, we retrieve the\nprominence and the width. The prominence is the vertical distance between the\npeak and the lowest contour line, and the width is measured at half the\nprominence. See these documentation pages for a visualization of these metrics:\n`prominences\n<https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_prominences.html>`_\nand `widths\n<https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_widths.html>`_.\n\nOutput files are in the `narrowPeak\n<https://genome.ucsc.edu/FAQ/FAQformat.html#format12>`_ format, which shows the\npeak width as well as the position of the summit. We report the prominence as\nthe score as well as the signal value. The position of the peak is the 1-bp\nposition of the prominence.\n\nCaveats\n-------\nThe find_peaks function operates on 1-dimensional vectors, and so returns peak\npositions in terms of indexes into the input vectors. Internally, we\ninterpolate to back-calculate the corresponding genomic coordinates and round\nto integers. This may potentially have issues where two peaks that are\ngenomically far away have adjacent indexes (for example, if the intervening\nregion has zero reads anywhere). Empirically we do not observe this to be an\nissue, but a solution would be to pad out the vector to include zeros at every\nposition in the chromosome/plasmid (and increase RAM usage as a result).\n\nThe biggest downside currently is speed and RAM. This is not an issue for the\nsmall bacterial genomes the tool was designed for; it takes about 30s to run\nfor E. coli data, and pandas DataFrames are used to store the signal. For\nlarger eukaryotic genomes, parallelization across chromosomes may be required\nand substantial RAM may be required. This tool remains untested on larger\ngenomes, but has worked quite well for term-seq in several bacterial genomes.\nFurthermore, since we need to perform IDR between all pairwise combinations of\nreplicates, the running time scales as O(nreplicates^2).\n\nReferences\n----------\n\n- [0] https://github.com/macs3-project/MACS/wiki/Advanced%3A-Call-peaks-using-MACS2-subcommands\n- [1] https://github.com/nboley/idr\n- [2] https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nichd-bspc/termseq-peaks",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "termseq-peaks",
    "package_url": "https://pypi.org/project/termseq-peaks/",
    "platform": "",
    "project_url": "https://pypi.org/project/termseq-peaks/",
    "project_urls": {
      "Homepage": "https://github.com/nichd-bspc/termseq-peaks"
    },
    "release_url": "https://pypi.org/project/termseq-peaks/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8711579,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "082e374eb50f4b8946ad92568e7e6b4629089b915d6f983cce67e28c71ba3e66",
          "md5": "b1909627ee7f4837dc66eb411dc36810",
          "sha256": "bc944fd70bf127a35c4b99ec0316e6730eb5ed97537da0eda21b75c3c5681424"
        },
        "downloads": -1,
        "filename": "termseq_peaks-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b1909627ee7f4837dc66eb411dc36810",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9975,
        "upload_time": "2020-11-20T20:58:46",
        "upload_time_iso_8601": "2020-11-20T20:58:46.264176Z",
        "url": "https://files.pythonhosted.org/packages/08/2e/374eb50f4b8946ad92568e7e6b4629089b915d6f983cce67e28c71ba3e66/termseq_peaks-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "082e374eb50f4b8946ad92568e7e6b4629089b915d6f983cce67e28c71ba3e66",
        "md5": "b1909627ee7f4837dc66eb411dc36810",
        "sha256": "bc944fd70bf127a35c4b99ec0316e6730eb5ed97537da0eda21b75c3c5681424"
      },
      "downloads": -1,
      "filename": "termseq_peaks-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b1909627ee7f4837dc66eb411dc36810",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9975,
      "upload_time": "2020-11-20T20:58:46",
      "upload_time_iso_8601": "2020-11-20T20:58:46.264176Z",
      "url": "https://files.pythonhosted.org/packages/08/2e/374eb50f4b8946ad92568e7e6b4629089b915d6f983cce67e28c71ba3e66/termseq_peaks-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}