{
  "info": {
    "author": "",
    "author_email": "James Prior <jamesgr.prior@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Python JSONPath\n\n[![PyPI - Version](https://img.shields.io/pypi/v/python-jsonpath.svg?style=flat-square)](https://pypi.org/project/python-jsonpath)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/jg-rp/python-jsonpath/tests.yaml?branch=main&label=tests&style=flat-square)](https://github.com/jg-rp/python-jsonpath/actions)\n[![PyPI - License](https://img.shields.io/pypi/l/python-jsonpath?style=flat-square)](https://github.com/jg-rp/python-jsonpath/blob/main/LICENSE.txt)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/python-jsonpath.svg?style=flat-square)](https://pypi.org/project/python-jsonpath)\n\n---\n\n**Table of Contents**\n\n- [Install](#install)\n- [API](#api)\n- [Syntax](#syntax)\n- [License](#license)\n\nA flexible JSONPath engine for Python.\n\nJSONPath is a mini language for extracting objects from data formatted in JavaScript Object Notation, or equivalent Python objects, like dictionaries and lists.\n\n```python\nimport jsonpath\n\ndata = {\n    \"categories\": [\n        {\n            \"name\": \"footwear\",\n            \"products\": [\n                {\n                    \"title\": \"Trainers\",\n                    \"description\": \"Fashionable trainers.\",\n                    \"price\": 89.99,\n                },\n                {\n                    \"title\": \"Barefoot Trainers\",\n                    \"description\": \"Running trainers.\",\n                    \"price\": 130.00,\n                },\n            ],\n        },\n        {\n            \"name\": \"headwear\",\n            \"products\": [\n                {\n                    \"title\": \"Cap\",\n                    \"description\": \"Baseball cap\",\n                    \"price\": 15.00,\n                },\n                {\n                    \"title\": \"Beanie\",\n                    \"description\": \"Winter running hat.\",\n                    \"price\": 9.00,\n                },\n            ],\n        },\n    ],\n    \"price_cap\": 10,\n}\n\nproducts = jsonpath.findall(\"$..products.*\", data)\nprint(products)\n```\n\n## Install\n\nInstall Python Liquid using [Pipenv](https://pipenv.pypa.io/en/latest/):\n\n```console\npipenv install -u python-jsonpath\n```\n\nor [pip](https://pip.pypa.io/en/stable/getting-started/):\n\n```console\npip install python-jsonpath\n```\n\nor [pipx](https://pypa.github.io/pipx/)\n\n```console\npipx install python-jsonpath\n```\n\n## API\n\n### jsonpath.findall\n\n`findall(path: str, data: Sequence | Mapping) -> list[object]`\n\nFind all objects in `data` matching the given JSONPath `path`. If data is a string, it will be loaded using `json.loads()` and the default `JSONDecoder`.\n\nReturns a list of matched objects, or an empty list if there were no matches.\n\n### jsonpath.finditer\n\n`finditer(path: str, data: Sequence | Mapping) -> iterable[JSONPathMatch]`\n\nReturn an iterator yielding a `JSONPathMatch` instance for each match of the `path` in the given `data`. If data is a string, it will be loaded using `json.loads()` and the default `JSONDecoder`.\n\n### jsonpath.compile\n\n`compile(path: str) -> JSONPath | CompoundJSONPath`\n\nPrepare a path for repeated matching against different data. `jsonpath.findall()` and `jsonpath.finditer()` are convenience functions that call `compile()` for you.\n\n`JSONPath` and `CompoundJSONPath` both have `findall()` and `finditer()` methods that behave the same as `jsonpath.findall()` and `jsonpath.finditer()`, just without the path argument.\n\n### async\n\n`findall_async()` and `finditer_async()` are async equivalents of `findall()` and `finditer()`. They are used when integrating Python JSONPath with [Python Liquid](https://github.com/jg-rp/liquid) and use Python Liquid's [async protocol](https://jg-rp.github.io/liquid/introduction/async-support).\n\n### Extra filter context\n\n`findall()` and `finditer()` take an optional `filter_context` argument, being a mapping of strings to arbitrary data that can be referenced from a [filter expression](#filters-expression).\n\nUse `#` to query extra filter data, similar to how one might use `@` or `$`.\n\n## Syntax\n\nPython JSONPath's default syntax is an opinionated combination of JSONPath features from existing, popular implementations, and much of the [IETF JSONPath draft](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-11). If you're already familiar with JSONPath syntax, skip to [notable differences](#notable-differences).\n\nTODO: tree analogy / target document  \nTODO: use \"node\" terminology  \nTODO: mention JSON and Python equivalency\n\n### Root (`$`)\n\n`$` refers to the first node in the target document, be it an object or an array. Unless referencing the root node from inside a filter expression, `$` is optional. The following two examples are equivalent.\n\n```text\n$.categories.*.name\n```\n\n```text\ncategories.*.name\n```\n\n### Properties (`.thing`, `[thing]` or `['thing']`)\n\nSelect nodes by property/key name using dot notation (`.something`) or bracket notation (`[something]`). If a target property/key contains reserved characters, it must use bracket notation and be enclosed in quotes (`['thing']`).\n\nA dot in front of bracket notation is OK, but unnecessary. The following examples are equivalent.\n\n```text\n$.categories[0].name\n```\n\n```text\n$.categories[0][name]\n```\n\n```text\n$.categories[0]['name']\n```\n\n### Array indices (`.0`, `[0]` or `[-1]`)\n\nSelect an item from an array by its index. Indices are zero-based and enclosed in brackets. If the index is negative, items are selected from the end of the array. Considering example data from the top of this page, the following examples are equivalent.\n\n```text\n$.categories[0]\n```\n\n```text\n$.categories.0\n```\n\n```text\n$.categories[-1]\n```\n\n### Wildcard (`.*` or `[*]`)\n\nSelect all elements from an array or all values from an object using `*`. These two examples are equivalent.\n\n```text\n$.categories[0].products.*\n```\n\n```text\n$.categories[0].products[*]\n```\n\n### Slices (`[0:-1]` or `[-1:0:-1]`)\n\nSelect a range of elements from an array using slice notation. The start index, stop index and step are all optional. These examples are equivalent.\n\n```text\n$.categories[0:]\n```\n\n```text\n$.categories[0:-1:]\n```\n\n```text\n$.categories[0:-1:1]\n```\n\n```text\n$.categories[::]\n```\n\n### Lists (`[1, 2, 10:20]`)\n\nSelect multiple indices, slices or properties using list notation (sometimes known as a \"union\" or \"segment\", we use \"union\" to mean something else).\n\n```text\n$..products.*.[title, price]\n```\n\n### Recursive descent (`..`)\n\nThe `..` selector visits every node beneath the current selection. If a property selector, using dot notation, follows `..`, the dot is optional. These two examples are equivalent.\n\n```text\n$..title\n```\n\n```text\n$...title\n```\n\n### Filters (`[?(EXPRESSION)]`)\n\nFilters allow you to remove nodes from a selection using a Boolean expression. Within a filter, `@` refers to the current node and `$` refers to the root node in the target document. `@` and `$` can be used to select nodes as part of the expression.\n\n```text\n$..products.*[?(@.price < $.price_cap)]\n```\n\nComparison operators include `==`, `!=`, `<`, `>`, `<=` and `>=`. Plus `<>` as an alias for `!=`.\n\n`in` and `contains` are membership operators. `left in right` is equivalent to `right contains left`.\n\n`&&` and `||` are logical operators, `and` and `or` work too.\n\n`=~` matches the left value with a regular expression literal. Regular expressions use a syntax similar to that found in JavaScript, where the pattern to match is surrounded by slashes, optionally followed by flags.\n\n```text\n$..products.*[?(@.description =~ /.*trainers/i)]\n```\n\n### Union (`|`) and intersection (`&`)\n\nTODO:\n\n## Notable differences\n\nThis is a list of things that you might find in other JSONPath implementation that we don't support (yet).\n\n- We don't support extension functions of the form `selector.func()`.\n- We always return a list of matches from `jsonpath.findall()`, never a scalar value.\n- We do not support arithmetic in filter expression.\n- Python JSONPath is strictly read only. There are no update \"selectors\".\n\nAnd this is a list of areas where we deviate from the [IETF JSONPath draft](https://datatracker.ietf.org/doc/html/draft-ietf-jsonpath-base-11).\n\n- We don't support extension functions of the form `func(path, ..)`.\n- Whitespace is mostly insignificant unless inside quotes.\n- The root token (default `$`) is optional.\n- Paths starting with a dot (`.`) are OK. `.thing` is the same as `$.thing`, as is `thing`, `$[thing]` and `$[\"thing\"]`.\n- Nested filters are not supported.\n- When a filter is applied to an object (mapping) value, we do not silently apply that filter to the object's values. See the \"Existence of non-singular queries\" example in the IETF JSONPath draft.\n- `|` is a union operator, where matches from two or more JSONPaths are combined.\n- `&` is an intersection operator, where we exclude matches that don't exist in both left and right paths.\n\n## License\n\n`python-jsonpath` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-jsonpath",
    "package_url": "https://pypi.org/project/python-jsonpath/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-jsonpath/",
    "project_urls": {
      "Documentation": "https://github.com/jg-rp/python-jsonpath#readme",
      "Issues": "https://github.com/jg-rp/python-jsonpath/issues",
      "Source": "https://github.com/jg-rp/python-jsonpath"
    },
    "release_url": "https://pypi.org/project/python-jsonpath/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Another JSONPath implementation for Python.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17507951,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78c6279c27bc3afb9e45c7d9c6c52e75c9a50c290aeba67f739a34005855e31c",
          "md5": "e7e3768ac3aad8e7bd15cb6c9b4d1419",
          "sha256": "83a8478a36aa20f9a2839aed2857d9fd58192374a65eabd5fce115f174eb92b2"
        },
        "downloads": -1,
        "filename": "python_jsonpath-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7e3768ac3aad8e7bd15cb6c9b4d1419",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25118,
        "upload_time": "2023-03-28T20:32:52",
        "upload_time_iso_8601": "2023-03-28T20:32:52.257700Z",
        "url": "https://files.pythonhosted.org/packages/78/c6/279c27bc3afb9e45c7d9c6c52e75c9a50c290aeba67f739a34005855e31c/python_jsonpath-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf5f9e8930148e7a181139a58a5ef934a4adc1f4d14043e040818519d2aecb68",
          "md5": "0d7a12a646d0df818eec20fb3d7c2b0a",
          "sha256": "fedcd99077a5a7393e86aba8f9e7dbd27324adbeb29cc9488c3d07f2eda131c3"
        },
        "downloads": -1,
        "filename": "python_jsonpath-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d7a12a646d0df818eec20fb3d7c2b0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 924709,
        "upload_time": "2023-03-28T20:32:55",
        "upload_time_iso_8601": "2023-03-28T20:32:55.411461Z",
        "url": "https://files.pythonhosted.org/packages/cf/5f/9e8930148e7a181139a58a5ef934a4adc1f4d14043e040818519d2aecb68/python_jsonpath-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4958009233fc1355de75f02a92f06c0241447775fe4e683d30316cbe5d04c615",
          "md5": "f24306d5bec83f742d5204238c9b455e",
          "sha256": "90f7d7d6254108387d392f91138780b09ad4b15fc99ec8e74265880bc2cc567f"
        },
        "downloads": -1,
        "filename": "python_jsonpath-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f24306d5bec83f742d5204238c9b455e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22470,
        "upload_time": "2023-03-30T09:35:32",
        "upload_time_iso_8601": "2023-03-30T09:35:32.978932Z",
        "url": "https://files.pythonhosted.org/packages/49/58/009233fc1355de75f02a92f06c0241447775fe4e683d30316cbe5d04c615/python_jsonpath-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "301e1579985b1b48db4bf085b7a28ce5ce7222ca97e1840837edf37aa8e6a97d",
          "md5": "6fc6f8bddb7f403d932f44346ce655c3",
          "sha256": "40f4e8b8460166611460315794ec22a07012518cd8ac4092e56e7769343aadff"
        },
        "downloads": -1,
        "filename": "python_jsonpath-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6fc6f8bddb7f403d932f44346ce655c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 958812,
        "upload_time": "2023-03-30T09:35:36",
        "upload_time_iso_8601": "2023-03-30T09:35:36.497170Z",
        "url": "https://files.pythonhosted.org/packages/30/1e/1579985b1b48db4bf085b7a28ce5ce7222ca97e1840837edf37aa8e6a97d/python_jsonpath-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4958009233fc1355de75f02a92f06c0241447775fe4e683d30316cbe5d04c615",
        "md5": "f24306d5bec83f742d5204238c9b455e",
        "sha256": "90f7d7d6254108387d392f91138780b09ad4b15fc99ec8e74265880bc2cc567f"
      },
      "downloads": -1,
      "filename": "python_jsonpath-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f24306d5bec83f742d5204238c9b455e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22470,
      "upload_time": "2023-03-30T09:35:32",
      "upload_time_iso_8601": "2023-03-30T09:35:32.978932Z",
      "url": "https://files.pythonhosted.org/packages/49/58/009233fc1355de75f02a92f06c0241447775fe4e683d30316cbe5d04c615/python_jsonpath-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "301e1579985b1b48db4bf085b7a28ce5ce7222ca97e1840837edf37aa8e6a97d",
        "md5": "6fc6f8bddb7f403d932f44346ce655c3",
        "sha256": "40f4e8b8460166611460315794ec22a07012518cd8ac4092e56e7769343aadff"
      },
      "downloads": -1,
      "filename": "python_jsonpath-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6fc6f8bddb7f403d932f44346ce655c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 958812,
      "upload_time": "2023-03-30T09:35:36",
      "upload_time_iso_8601": "2023-03-30T09:35:36.497170Z",
      "url": "https://files.pythonhosted.org/packages/30/1e/1579985b1b48db4bf085b7a28ce5ce7222ca97e1840837edf37aa8e6a97d/python_jsonpath-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}