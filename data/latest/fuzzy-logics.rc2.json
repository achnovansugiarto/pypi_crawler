{
  "info": {
    "author": "Shubhankar Mohan",
    "author_email": "mohanshubhankar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Fuzzy Logic\n\nThe library provides functions for fuzzy string matching, fuzzy round-off of floats and a fuzzy function for dividing an integer into an integer distribution according to given percentage. \n\n\n\n## Requirements\n\n- Python 3.5 or higher\n\n- difflib\n\n- numpy\n\n\n\n## Installation\n\nUsing PIP via PyPI\n\n```\npip install fuzzy_logics\n```\n\nUsing PIP via Github\n\n```\npip install git+git://github.com/shubhankar-mohan/fuzzy_logic.git\n```\n\nManually via GIT\n\n```xx\ngit clone git://github.com/shubhankar-mohan/fuzzy_logic.git\ncd fuzzy_logic\npython setup.py install\n```\n\n\n\n## Examples\n\n#### Fuzzy Numeric Functions \n\n-  **Fuzzy Round** - Performs a Rounding off an an float to an integer, based on decimal part.\n\n  ```\n  Args:\n      x: float value which needs to be rounded\n      break_point: (Default: 0.5) threshold for deciding if ceil or floor needs to be returned\n\n  Returns: ceil(x) if x-int(x) >= break_point else floor(x)\n  ```\n\n  ```python\n  >>> from fuzzy_logic import fuzzynumeric\n  >>> fuzzynumeric.fuzzy_round(1.6)\n  >>> 2\n  >>> fuzzynumeric.fuzzy_round(1.6, break_point=0.8)\n  >>> 1\n  ```\n\n\n- **Fuzzy Distribution** - The function divides a given integer into different percentages which are integer.\n\n  ```\n  Args:\n      x: Integer which needs to be divided\n      multiplier: Percentages in which integer needs to be divided\n      round_type: (Default: fuzzy) ['floor', 'ceil', 'fuzzy'], Primary Round Type to be used while getting\n                  base distribution.\n      break_point: (Default: 0.8) It is needed if round_type is fuzzy. See fuzzy_round for details.\n      guider_type: (Default: multiplier) ['multiplier', 'deficit_decimal', 'guider'] It defines how the left out\n                    value after Primary Round off needs to be distributed. Multiplier used multiplier argument to\n                    distribute, giving preference to highest. deficit_decimal uses decimal_part left after floor,\n                    giving preference to highest. guider uses a given distribution for the same.\n      guider: Needs is guider_type is guider. It is used to give preference to allocate left out\n                    value after Primary Round off.\n\n  Returns: A list of integer values, which are closest representation of percentage distribution of x according\n          to multiplier.\n  ```\n\n  ```python\n  >>> from fuzzy_logic import fuzzynumeric\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.2, .3, .5])\n  >>> [1, 1, 3]\n\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.2, .3, .5], round_type='ceil')\n  >>> [1, 2, 2]\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.2, .3, .5], round_type='floor')\n  >>> [1, 1, 3]\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.2, .3, .5], round_type='fuzzy', break_point=0.3)\n  >>> [1, 2, 2]\n\n\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.2, .3, .5], guider_type='deficit_decimal')\n  >>> [1, 1, 3]\n  >>> fuzzynumeric.fuzzy_integer_distribution(5, [.333, .333, .333], guider_type='deficit_decimal')\n  >>> [1, 2, 2]\n  >>> fuzzynumeric.fuzzy_integer_distribution(7, [.2, .3, .5], guider_type='deficit_decimal')\n  >>> [1, 2, 4]\n  >>> fuzzynumeric.fuzzy_integer_distribution(7, [.2, .3, .5])\n  >>> [1, 2, 4]\n\n  >>> fuzzynumeric.fuzzy_integer_distribution(7, [.2, .3, .5], round_type='floor', guider_type='deficit_decimal')\n  >>> [1, 2, 4]\n  >>> fuzzynumeric.fuzzy_integer_distribution(8, [.2, .3, .5], round_type='floor', guider_type='deficit_decimal')\n  >>> [2, 2, 4]\n  >>> fuzzynumeric.fuzzy_integer_distribution(8, [.2, .3, .5], round_type='floor')\n  >>> [1, 2, 5]\n  >>> fuzzynumeric.fuzzy_integer_distribution(8, [.2, .3, .5], round_type='floor', guider=[1, 5, 2])\n  >>> [1, 3, 4]\n  ```\n\n\n\n#### Fuzzy String Functions \n\n- **String Similarity** - Calculates Similarity between two strings.\n\n  ```\n  Args:\n      string1: string 1\n      string2: string 2\n      method: (Default: 0) [0, 1] 0 is for Cosine Distance and 1 is for Levenshtein Distance\n              rearrange_allowed: [True, False] Is rearrange allowed while calculating similarity. If set to true, sequence\n              of words will be ignored while calculating similarity.\n      drop_duplicates: [True, False] Weather to drop duplicates from a sentence. If set to true, all duplicates will\n              be removed.\n      clean_string: [True, False] If set to true, remove all non alpha-numeric characters including whitespaces\n              and make all characters to lower case.\n      filter_ascii: [True, False] If set to true, all characters other than ASCII will be removed.\n\n  Returns: A float, representing similarity between string1 and string2.\n  ```\n\n  ```python\n  >>> from fuzzy_logic import fuzzystring\n\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of computer\", method=0)\n  >>> 100.0\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of computer.\", method=0)\n  >>> 100.0\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of the computer\", method=0)\n  >>> 92.58\n\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of computer\", method=1)\n  >>> 100.0\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of computer.\", method=1)\n  >>> 98.59\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"mouse keyboard are part of the computer\", method=1)\n  >>> 94.59\n\n\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"keyboard mouse are part of computer\", method=1)\n  >>> 82.86\n  >>> fuzzystring.string_similarity(\"mouse keyboard are part of computer\", \"keyboard mouse are part of computer\", method=1, rearrange_allowed=True)\n  >>> 100.0\n\n\n  >>> fuzzystring.string_similarity(\"mouse mouse keyboard are part of computer\", \"mouse keyboard are part of computer\", method=1)\n  >>> 92.11\n  >>> fuzzystring.string_similarity(\"mouse mouse keyboard are part of computer\", \"mouse keyboard are part of computer\", method=1, drop_duplicates=True)\n  >>> 100.0\n\n\n  ```\n\n\n\n- **Sub String Similarity** - Returns maximum similarity between all possible sub-strings combinations of two strings based on levenshtein\n          similarity.\n\n  ```\n  Args:\n      string1: string 1\n      string2: string 2\n      clean_string: [True, False] If set to true, remove all non alpha-numeric characters including whitespaces\n      \t\t\tand make all characters to lower case.\n      filter_ascii: [True, False] If set to true, all characters other than ASCII will be removed.\n\n  Returns: A float, representing similarity between string1 and string2.\n  ```\n\n\n  ```python\n  >>> from fuzzy_logic import fuzzystring\n\n  >>> fuzzystring.string_similarity(\"mouse mouse keyboard are part of computer\", \"mouse keyboard are part of computer\")\n  >>> 95.26\n  >>> fuzzystring.substring_similarity(\"mouse mouse keyboard are part of computer\", \"mouse keyboard are part of computer\")\n  >>> 100.0\n  ```\n\n\n\nâ€‹\t\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shubhankar-mohan/fuzzy_logic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fuzzy-logics",
    "package_url": "https://pypi.org/project/fuzzy-logics/",
    "platform": "",
    "project_url": "https://pypi.org/project/fuzzy-logics/",
    "project_urls": {
      "Homepage": "https://github.com/shubhankar-mohan/fuzzy_logic"
    },
    "release_url": "https://pypi.org/project/fuzzy-logics/0.1.2/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.5",
    "summary": "The library provides functions for fuzzy string matching, fuzzy round-off for floats and a fuzzy function of dividing a integer into a integer distribution according to given percentage.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8589294,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44896ddf930677675703a351b33bc6735cb97030b0068d3709154ec8a3f32d57",
          "md5": "dfe5926172bb580b3ffc0c65ea3c849b",
          "sha256": "19a2ec9d1bec7952e6cd33e3135037d93aa288e99249251ef75bf0271ee5fcda"
        },
        "downloads": -1,
        "filename": "fuzzy_logics-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfe5926172bb580b3ffc0c65ea3c849b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6253,
        "upload_time": "2020-11-05T16:52:16",
        "upload_time_iso_8601": "2020-11-05T16:52:16.937286Z",
        "url": "https://files.pythonhosted.org/packages/44/89/6ddf930677675703a351b33bc6735cb97030b0068d3709154ec8a3f32d57/fuzzy_logics-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697081125dbbe055728ed95b5afd4d87d6cb72230309809c3e1f8a54c8c44621",
          "md5": "a4f647116fde211f8d313e56dfd8cd15",
          "sha256": "322d237fb4775636f45cc7ba5ea1387fdffa3d423b061058f87ff76096ba20b1"
        },
        "downloads": -1,
        "filename": "fuzzy_logics-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a4f647116fde211f8d313e56dfd8cd15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 4544,
        "upload_time": "2020-11-05T16:52:22",
        "upload_time_iso_8601": "2020-11-05T16:52:22.258087Z",
        "url": "https://files.pythonhosted.org/packages/69/70/81125dbbe055728ed95b5afd4d87d6cb72230309809c3e1f8a54c8c44621/fuzzy_logics-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f45bc42ef9ff1cd1de7f8d9f76b676f3d4cd610d4e40585db29c4ca575d0df2",
          "md5": "103665258360614170d2351bbfb2829c",
          "sha256": "e70995565be15b203d9f0c14f4ca1aea20c11fef7aa8f0c9eec26e29df7cc83a"
        },
        "downloads": -1,
        "filename": "fuzzy_logics-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "103665258360614170d2351bbfb2829c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6255,
        "upload_time": "2020-11-05T17:05:22",
        "upload_time_iso_8601": "2020-11-05T17:05:22.778782Z",
        "url": "https://files.pythonhosted.org/packages/7f/45/bc42ef9ff1cd1de7f8d9f76b676f3d4cd610d4e40585db29c4ca575d0df2/fuzzy_logics-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282ab6510b001ae09acded16cdcb82bc7aaba95961016801d066caa11e4fed95",
          "md5": "5bbb61785a72e787fee5657c9a68dd39",
          "sha256": "0403b73daa2d8d8fb73f6775bedf9874db2e05d0810f3e1603cdadbdfb0823ae"
        },
        "downloads": -1,
        "filename": "fuzzy_logics-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5bbb61785a72e787fee5657c9a68dd39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 4546,
        "upload_time": "2020-11-05T17:05:25",
        "upload_time_iso_8601": "2020-11-05T17:05:25.442949Z",
        "url": "https://files.pythonhosted.org/packages/28/2a/b6510b001ae09acded16cdcb82bc7aaba95961016801d066caa11e4fed95/fuzzy_logics-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f45bc42ef9ff1cd1de7f8d9f76b676f3d4cd610d4e40585db29c4ca575d0df2",
        "md5": "103665258360614170d2351bbfb2829c",
        "sha256": "e70995565be15b203d9f0c14f4ca1aea20c11fef7aa8f0c9eec26e29df7cc83a"
      },
      "downloads": -1,
      "filename": "fuzzy_logics-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "103665258360614170d2351bbfb2829c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 6255,
      "upload_time": "2020-11-05T17:05:22",
      "upload_time_iso_8601": "2020-11-05T17:05:22.778782Z",
      "url": "https://files.pythonhosted.org/packages/7f/45/bc42ef9ff1cd1de7f8d9f76b676f3d4cd610d4e40585db29c4ca575d0df2/fuzzy_logics-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "282ab6510b001ae09acded16cdcb82bc7aaba95961016801d066caa11e4fed95",
        "md5": "5bbb61785a72e787fee5657c9a68dd39",
        "sha256": "0403b73daa2d8d8fb73f6775bedf9874db2e05d0810f3e1603cdadbdfb0823ae"
      },
      "downloads": -1,
      "filename": "fuzzy_logics-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5bbb61785a72e787fee5657c9a68dd39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 4546,
      "upload_time": "2020-11-05T17:05:25",
      "upload_time_iso_8601": "2020-11-05T17:05:25.442949Z",
      "url": "https://files.pythonhosted.org/packages/28/2a/b6510b001ae09acded16cdcb82bc7aaba95961016801d066caa11e4fed95/fuzzy_logics-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}