{
  "info": {
    "author": "Shreyas P J",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n## DESCRIPTION\n\nA sample python package deployment utility for NINAPRO dataset.\nThis library aims at easing the preprocessing, amd training of the EMG signals from the NinaPro database.\n\n## QUICK START\n\n### Dependencies\nThis pipeline requires the dependencies which can be installed by running `pip install -r requirements.txt`\n\n\n### Functions\n*  _**get_data(path, file)**_\n\nDownload the data from the NinaPro official website and save the data in a folder. \nThe get_data() requires the folder path and the file name as the input arguments.\nFor example:\n\n`data = get_data('DB2_s1/DB2_s1','S1_E1_A1.mat')`\n\n<p>&nbsp;</p>\n\n*  **_normalise(data, train_reps)_**\n\nnormalise() scales the data using the normalise() which uses the StandardScaler() from scikit-learn to normalize the data. It fits on training reps only and then transforms the whole data (excluding stimulus and repetition ofcourse).\n\n`data = normalise(data, train_reps)`\n\ntrain_reps are the reps required in training set and test_reps are reps\nrequired in the test/validation set. According to the recent research, this permutation of numbers proved to give better results.\n\n`train_reps = [1,3,4,6]`\n`test_reps = [2,5]`\n\n<p>&nbsp;</p>\n\n\n*  **_filter_data(data, f, butterworth_order=4, btype='bandpass')_**\n\nSometimes, it is required that the signal is filtered with low noise or high noise frequencies. filter_data uses Butterworth filter to filter the data. It requires the cutoff frequency, the butterworth order, and the type of filter (btype is one of lowpass, highpass, bandpass).\nThe bandpass filter requires the f value to be a tuple or a list containing lower cutoff frequency and higher cutoff frequency.\n\n`emg_low = filter_data(data=data, f=20, butterworth_order=4, btype='lowpass')`\n\n`emg_band = filter_data(data=data, f=(20,40), butterworth_order=4, btype='bandpass')`\n\n`emg_high = filter_data(data=data, f=20, butterworth_order=4, btype='high')`\n\n<p>&nbsp;</p>\n\n*  **_notch_filter(data, f0, Q, fs=2000)_**\n\nA Notch Filter is a bandstop filter with a very narrow stopband and two passbands, it actually highly attenuates/eliminates a particular frequency component from the input signal while leaving the amplitude of the other frequencies more or less unchanged.\n\nf0 is the notch_frequency, Q is the quality factor and fs is the sampling frequency.\n\n`emg_notch = notch_filter(data=emg_band,f0=60,Q=30,fs=2000)`\n\n<p>&nbsp;</p>\n\n*  **_windowing(data, reps, gestures, win_len, win_stride)_**\n\nwindowing() is used to augment the data. The function requires the following arguments : data, reps, gestures, win_len, win_stride.\n\ndata = Pandas dataframe just like returned by any of the above functions.\n\nreps = Repetitions that you want to use for windowing.\n\ngestures = The gesture movements that you wish to classify.\n\nwin_len = (Length of window in milli-second) x 2. For example, for a window of 300ms, use 600 as the win_len since the sampling frequency of signal is 2000Hz.\n\nwin_stride = (Length of stride in milli-second) x 2. For example, for a stride of 10ms, use 20 as the win_stride since the sampling frequency of signal is 2000Hz.\n\n`X_train, y_train, r_train = windowing(emg_notch, train_reps, gestures, win_len, win_stride)`\n\n`\nX_test, y_test, r_test = windowing(emg_notch, test_reps, gestures, win_len, win_stride)`\n\n<p>&nbsp;</p>\n\n*  **_get_categorical(y)_**\n\nFor multiclass classification, we need the labels to be represented in one-hot representation.\nget_categorical() helps in converting the integer labels to one-hot representation.\n\n`y_train = get_categorical(y_train)`\n\n`y_test = get_categorical(y_test)`\n\n<p>&nbsp;</p>\n\n*  **_feature_extractor(features, shape, data)_**\n\nHand crafting features could be time-consuming and expensive. We extract important features:\n\nTime Domain (rms,hist,entropy,kurtosis,zero_cross,min,max,mean,median)\n\nFrequency Domain (fft,psd)\n\nThe extractor function will take care of extracting features for each channel of input data and append it columnwise.\nThe output dataframe would include all required features of all channels.\n\n`features = [rms,min,max,median]` Change this list according to features required.\n\n`feature_matrix = feature_extractor(features,(X_train.shape[0],-1),X_train)`\n\n`test_feature_matrix = feature_extractor(features,(X_test.shape[0],-1),X_test)`\n\n<p>&nbsp;</p>\n\n*  **_pca(data, comp)_**\n\nPCA is a dimensionality-reduction method that is often used to reduce the dimensionality of large data sets, by transforming a large set of variables into a smaller one that still contains most of the information in the large set.\nThe function returns the reduced feature matrix with the mentioned number of components(columns).\n\n`reduced_feature_matrix = pca(feature_matrix,30)`. This returns 30 columns in the final matrix.\n\n`reduced_test_feature_matrix = pca(test_feature_matrix,30)`\n\n<p>&nbsp;</p>\n\n*  **_rectify(data)_**\n\nThis function rectifies the signals and converts all the negative values to positive values by simply using the absolute value.\n\n`emg_rectified = rectify(emg_notch)`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nina-funcs",
    "package_url": "https://pypi.org/project/nina-funcs/",
    "platform": "",
    "project_url": "https://pypi.org/project/nina-funcs/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nina-funcs/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Test Package for NINAPRO",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11161488,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1cd5267e4f55187ec0fa32558ac5a7752d24a9107ce1a27a426325762bb7fb4",
          "md5": "249d7392e13c79a5a4f0b58dcb21e323",
          "sha256": "a607f26e5ee02526cfc99ca9376a2a8a41cd9ee86a023e19aee0463bb997fc42"
        },
        "downloads": -1,
        "filename": "nina_funcs-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "249d7392e13c79a5a4f0b58dcb21e323",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8109,
        "upload_time": "2021-08-12T14:14:37",
        "upload_time_iso_8601": "2021-08-12T14:14:37.945355Z",
        "url": "https://files.pythonhosted.org/packages/a1/cd/5267e4f55187ec0fa32558ac5a7752d24a9107ce1a27a426325762bb7fb4/nina_funcs-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee48f1e55717384e278a25337e5431f5b044d603aa28eabd54995b4634e9a42",
          "md5": "5d84ab9ff16f6050ec15fc416ce8cbd0",
          "sha256": "93f8fc7b62da44e970bc45967074044edee4e959032a20b4358376878f1a8bcc"
        },
        "downloads": -1,
        "filename": "nina_funcs-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d84ab9ff16f6050ec15fc416ce8cbd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8050,
        "upload_time": "2021-08-12T14:14:39",
        "upload_time_iso_8601": "2021-08-12T14:14:39.298789Z",
        "url": "https://files.pythonhosted.org/packages/0e/e4/8f1e55717384e278a25337e5431f5b044d603aa28eabd54995b4634e9a42/nina_funcs-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1cd5267e4f55187ec0fa32558ac5a7752d24a9107ce1a27a426325762bb7fb4",
        "md5": "249d7392e13c79a5a4f0b58dcb21e323",
        "sha256": "a607f26e5ee02526cfc99ca9376a2a8a41cd9ee86a023e19aee0463bb997fc42"
      },
      "downloads": -1,
      "filename": "nina_funcs-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "249d7392e13c79a5a4f0b58dcb21e323",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8109,
      "upload_time": "2021-08-12T14:14:37",
      "upload_time_iso_8601": "2021-08-12T14:14:37.945355Z",
      "url": "https://files.pythonhosted.org/packages/a1/cd/5267e4f55187ec0fa32558ac5a7752d24a9107ce1a27a426325762bb7fb4/nina_funcs-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ee48f1e55717384e278a25337e5431f5b044d603aa28eabd54995b4634e9a42",
        "md5": "5d84ab9ff16f6050ec15fc416ce8cbd0",
        "sha256": "93f8fc7b62da44e970bc45967074044edee4e959032a20b4358376878f1a8bcc"
      },
      "downloads": -1,
      "filename": "nina_funcs-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5d84ab9ff16f6050ec15fc416ce8cbd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8050,
      "upload_time": "2021-08-12T14:14:39",
      "upload_time_iso_8601": "2021-08-12T14:14:39.298789Z",
      "url": "https://files.pythonhosted.org/packages/0e/e4/8f1e55717384e278a25337e5431f5b044d603aa28eabd54995b4634e9a42/nina_funcs-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}