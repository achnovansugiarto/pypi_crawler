{
  "info": {
    "author": "Joseandres Hinojoza",
    "author_email": "jhinojoza@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Education"
    ],
    "description": "self_balancing_binary_search_tree\n---------------------------------\nA Python implementation of a self balancing binary search tree (AVL Tree). Useful to practice, study and see how a SBBST works. (There is a shorter version here_).\n\n.. _here: https://pypi.python.org/pypi/sbbst\n\nIntroduction\n============\n\nA **self-balancing binary search tree** is a data structure, a kind advanced one I would say, that optimizes the times for insertion, deletion and serching. Even though there a few types of SBBSTs (2â€“3 tree, AA tree, AVL tree, B-tree, Redâ€“black tree, ...), in this library I decided to implement the AVL Tree because I consider it as the easiest one.\n\nIt has *O(N)* space in memory and its respectives times and functions are:\n\n=============== ===================== =====================\nTime complexity Function in the class Action             \n=============== ===================== =====================\n*O(1)*          SBBT.getSize()        Size of the tree \n*O(1)*          SBBT.getHeightTree()  Height of the tree\n*O(logN)*       SBBT.search(x)        Search value\n*O(logN)*       SBBT.insert(x)        Insert value\n*O(logN)*       SBBT.delete(x)        Delete value\n*O(logN)*       SBBT.getMinVal()      Minimum value\n*O(logN)*       SBBT.getMaxVal()      Maximum value\n*O(K+logN)*     SBBT.kthsmallest(k)   Kth Minimum value\n*O(K+logN)*     SBBT.kthlargest(k)    Kth Maximum value\n*O(N)*          str(SBBT)             Visualize the tree\n=============== ===================== =====================\n\nI made the library **self_balancing_binary_search_tree** (sorry for the long name, though there is a shorter implementation here_) with the intention that you can use it easily for your own projects, learning or coding competitions (in which case I would suggest to compile your program with Pypy instead of Python3 and download the code directly from my Github and modify it as your necessities). I used this structure (with a few changes so it can work out with intervals instead of numbers) in the Facebook Hacker Cup 2020 and it was fast enough to pass the time complexity, though I would suggest to migrate to C++ (thing that I have not done properly yet [sept 2020]).\n\n.. _here: https://pypi.python.org/pypi/sbbst\n\nRequirements\n============\n\n- Python 2.7+ or 3.4+\n\nInstallation\n============\n\nTo install a stable version from PyPi_:\n\n.. code-block:: bash\n\n    ~$ pip install self_balancing_binary_search_tree\n\nOr just\n\n.. code-block:: bash\n\n    ~$ pip install sbbst\n\nOr download the *__init__.py* file directly from my GitHub_ and worh with it.\n    \n.. _PyPi: https://pypi.python.org/pypi/self_balancing_binary_search_tree\n.. _GitHub: https://github.com/Ualabi/self_balancing_binary_search_tree\n\nThe library works with the tree nodes defined as:\n\n.. code-block:: python\n\n    class TreeNode():\n        def __init__ (self, val):\n            self.val = val\n            self.place = 0  # helps in the print process\n            self.height = 1 # mandatory in the AVL Trees\n            self.left = None\n            self.right = None\n\nGetting Started\n===============\n\nTo start working with the library, you will only need 2 lines:\n\n.. code-block:: python\n\n    >>> from self_balancing_binary_search_tree import SBBST\n    >>> ST = SBBST()\n    \nAnd that will be enough to start working with it. Take the following script as an example\n\n.. code-block:: python\n    \n    from self_balancing_binary_search_tree import SBBST\n    ST = SBBST()\n    nums = [128, 131, 4, 134, 135, 10, 1, 3, 140, 14, 142, 145, 146, 147, 149] # random numbers\n    for num in nums:\n        ST.insert(num)\n    # It also works out: ST = SBBST(nums)\n    print(ST)\n    print(\"Number of elements:\",ST.getSize())\n    print(\"Height:\",ST.getHeightTree())\n    print(\"Min val:\",ST.getMinVal())\n    print(\"Max val:\",ST.getMaxVal())\n    print(\"3rd smallest val:\",ST.kthsmallest(3))\n    print(\"2nd largest val:\",ST.kthlargest(2))\n    print(\"Pre Order:\",ST.inOrder())\n    print(\"In Order:\",ST.preOrder())\n    print(\"Post Order:\",ST.postOrder())\n    ST.delete(128)\n    ST.delete(140)\n    print(ST)\n    ST.insert(55)\n    print(ST)\n    print(\"Number of elements:\",ST.getSize())\n    \n\nThis would be the output you will see in the terminal:\n\n::\n\n        ____128_________\n       /                \\\n      _4             ___140___\n     /  \\           /         \\\n     1  10        134         145___\n      \\   \\      /   \\       /      \\\n      3   14   131   135   142      147\n                                   /   \\\n                                 146   149\n    \n    Number of elements: 15\n    Height: 5\n    Min val: 1\n    Max val: 149\n    3rd smallest val: 4\n    2nd lasrgets val: 145\n    Pre Order: [1, 3, 4, 10, 14, 128, 131, 134, 135, 140, 142, 145, 146, 147, 149]\n    In Order: [128, 4, 1, 3, 10, 14, 140, 134, 131, 135, 145, 142, 147, 146, 149]\n    Post Order: [3, 1, 14, 10, 4, 131, 135, 134, 142, 146, 149, 147, 145, 140, 128]\n    \n        ________131______\n       /                 \\\n      _4__            ___142\n     /    \\          /      \\\n     1    14       134      145\n      \\  /  \\         \\        \\\n      3 10  21        135      149\n              \\\n              50\n    \n    \n        __________131______\n       /                   \\\n      _4__              ___142\n     /    \\            /      \\\n     1    14__       134      145\n      \\  /    \\         \\        \\\n      3 10    50        135      149\n             /  \\\n            21  55\n    \n    Number of elements: 14\n\n\nAdditionally, I added 3 extra functios (the 3 of them works in *O(N)* time) in case you want to use it along you practice coding in platforms such as LeetCode_ or Interviewbit_. (At the beginning I had troubles to visualize what was happening in the Trees and the DFSs, swaps or insertions, so thats why I worked on in this library as sketch and then improved as it is today.) In those pages the *input* of the trees will be like:\n\n::\n    s = \"1 2 3 -1 4 -1 5 -1 -1 6 -1 -1 -1\"\n    s = \"1,2,3,null,4,null,5,null,null,6,null,null,null\"\n    s = [ 1, 2, 3, None, 4, None, 5, None, None, 6, None, None, None ]\n    \n.. _LeetCode: https://leetcode.com/\n.. _Interviewbit: https://www.interviewbit.com/courses/programming/\n\nSome functions you can use are the following:\n\n.. code-block:: python\n\n    from self_balancing_binary_search_tree import *\n    # Any of the following s works out\n    # s = \"1 2 3 -1 4 -1 5 -1 -1 6 -1 -1 -1\"\n    # s = \"1 2 3 None 4 None 5 None None 6 None None None\"\n    # s = \"1,2,3,null,4,null,5,null,null,6,null,null,null\"\n    s = [ 1, 2, 3, None, 4, None, 5, None, None, 6, None, None, None ]\n    head = getTree(s)\n    print(getStr(head))\n    print(\"The list of the Tree is:\",getList(head))\n    \nThe output in the terminal will be the following:\n\n::\n\n      _1\n     /  \\\n     2  3_\n      \\   \\\n      4   5\n         /\n         6\n\n    The list of the Tree is: [1, 2, None, 4, None, None, 3, None, 5, 6, None, None, None]\n\nContributing\n============\n\nThe best way to learn is to copy the code and edit it with your own necessities. You can also find other useful data structures in my GitHub https://github.com/Ualabi/Useful_Data_Structures.\n\nIf you want to contribute to this library, please take a look at this page_ before submitting a pull request. Thanks!\n\n.. _page: http://binarytree.readthedocs.io/en/latest/contributing.html\n\nChange Log\n==========\n\n- 0.1.4 (09/09/2020)\n    - First tries and fails",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ualabi/self_balancing_binary_search_tree",
    "keywords": "Self Balancing Binary Search Tree,AVL Tree,Binary Tree,Binary Search Tree,BST,BBST,SBBST",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "self-balancing-binary-search-tree",
    "package_url": "https://pypi.org/project/self-balancing-binary-search-tree/",
    "platform": "",
    "project_url": "https://pypi.org/project/self-balancing-binary-search-tree/",
    "project_urls": {
      "Homepage": "https://github.com/Ualabi/self_balancing_binary_search_tree"
    },
    "release_url": "https://pypi.org/project/self-balancing-binary-search-tree/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python implementation of a self balancing binary search tree (AVL Tree). Useful to practice, study and see how a SBBST works.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8148122,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d7c48e0b5ba5e57aac695bcdc33834ac6ae5b856d326b1d229aa93c3264056",
          "md5": "73895a7000a88530bca417e2df7ab738",
          "sha256": "3b0f45bbfc26b36c710abd43c2ff888d4c6896a049145aeb13ce0313401afa38"
        },
        "downloads": -1,
        "filename": "self_balancing_binary_search_tree-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "73895a7000a88530bca417e2df7ab738",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9995,
        "upload_time": "2020-09-09T20:02:25",
        "upload_time_iso_8601": "2020-09-09T20:02:25.445886Z",
        "url": "https://files.pythonhosted.org/packages/20/d7/c48e0b5ba5e57aac695bcdc33834ac6ae5b856d326b1d229aa93c3264056/self_balancing_binary_search_tree-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20d7c48e0b5ba5e57aac695bcdc33834ac6ae5b856d326b1d229aa93c3264056",
        "md5": "73895a7000a88530bca417e2df7ab738",
        "sha256": "3b0f45bbfc26b36c710abd43c2ff888d4c6896a049145aeb13ce0313401afa38"
      },
      "downloads": -1,
      "filename": "self_balancing_binary_search_tree-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "73895a7000a88530bca417e2df7ab738",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9995,
      "upload_time": "2020-09-09T20:02:25",
      "upload_time_iso_8601": "2020-09-09T20:02:25.445886Z",
      "url": "https://files.pythonhosted.org/packages/20/d7/c48e0b5ba5e57aac695bcdc33834ac6ae5b856d326b1d229aa93c3264056/self_balancing_binary_search_tree-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}