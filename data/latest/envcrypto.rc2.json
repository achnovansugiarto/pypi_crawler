{
  "info": {
    "author": "Fufu",
    "author_email": "fufuokok@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python-Envcrypto\n\nPython-Envcrypto allows you to safely store your environment variables in your code repository.\n\nenvcrypto~=v0.1.0:\n\n- After `bytes` encryption and decryption, return `bytes`.\n  - `<In: bytes, Out: bytes>`\n- After other data types are encrypted and decrypted, return `str`: `str(raw_data)`. \n  - `<In: other, Out: str>`\n- After encryption and decryption fails, return `None`.\n- Additional AES-CBC function: `example.py`\n\nenvcrypto~=v0.2.0:\n\n- Environment variable encryption result uses `base58`. (Double-click to copy)\n- Additional BASE58 function: \n  - `b58encode_int` `b58decode_int` `b58encode` `b58decode` `b58encode_check` `b58decode_check` \n  - `b58ec` `b58dc`\n\n## Installation\n\n```bash\npip3 install envcrypto\n```\n\n## Usage\n\nReferences used in the project: https://github.com/fufuok/FF.PyAdmin/blob/dev/app/conf/secret_settings.py\n\n\n```python\n# Recommended usage\napi_secret = 'AABB.Fufu@TEST001'\nenv_name = 'APP_API_SECRET'\nmy_key = b'\\02S\\n\\t@k\\x02'  # Any type and any length\nset_res = set_environ(env_name, api_secret, my_key)\nget_res = get_environ(env_name, key=my_key)\nprint('''Raw data[{0}]: {1!r}\nSet environment variable in your OS:\n    export {2}={3}\nIn your code (result is string):\n    result = get_environ(env_name, key=my_key)\n    result[{4}] == api_secret == {5!r}\n'''.format(type(api_secret), api_secret, env_name, set_res, type(get_res), get_res))\n\n# if key is None\nset_res = set_environ(env_name, api_secret)\nget_res = get_environ(env_name)\nprint('''Raw data[{0}]: {1!r}\nSet environment variable in your OS (if key is None):\n    export {2}={3}\nIn your code (result is string):\n    result = get_environ(env_name)\n    result[{4}] == api_secret == {5!r}\n'''.format(type(api_secret), api_secret, env_name, set_res, type(get_res), get_res))\n\n# if raw data is bytes\nsecret_bytes = b'a random bytes \\xff&\\xd2...'\nset_res = set_environ(env_name, secret_bytes, my_key)\nget_res = get_environ(env_name, key=my_key)\nprint('''Raw data[{0}]: {1!r}\nSet environment variable in your OS:\n    export {2}={3}\nIn your code (result is bytes):\n    result = get_environ(env_name, key=my_key)\n    result[{4}] == secret_bytes == {5!r}\n'''.format(type(secret_bytes), secret_bytes, env_name, set_res, type(get_res), get_res))\n\nprint('No default value:', get_environ('NOT_EXIST'))\nprint('Has a default value:', get_environ('NOT_EXIST', default='default.value'))\n```\n\nOutput:\n\n```shell\nRaw data[<class 'str'>]: 'AABB.Fufu@TEST001'\nSet environment variable in your OS:\n    export APP_API_SECRET=bbF37r6194K1YArmpVEirPYtxd349t7YX4v61CNksY8bEb\nIn your code (result is string):\n    result = get_environ(env_name, key=my_key)\n    result[<class 'str'>] == api_secret == 'AABB.Fufu@TEST001'\n\nRaw data[<class 'str'>]: 'AABB.Fufu@TEST001'\nSet environment variable in your OS (if key is None):\n    export APP_API_SECRET=AABB.Fufu@TEST001\nIn your code (result is string):\n    result = get_environ(env_name)\n    result[<class 'str'>] == api_secret == 'AABB.Fufu@TEST001'\n\nRaw data[<class 'bytes'>]: b'a random bytes \\xff&\\xd2...'\nSet environment variable in your OS:\n    export APP_API_SECRET=bWGBohWk2oadgaoXTdVmouzyzW6b4jDVg2ngwpLe1m4HFU\nIn your code (result is bytes):\n    result = get_environ(env_name, key=my_key)\n    result[<class 'bytes'>] == secret_bytes == b'a random bytes \\xff&\\xd2...'\n\nNo default value: None\nHas a default value: default.value\n```\n\n## Extension methods\n\n```python\n# Some additional extension methods\nbytes_data = b'Hello bytes'\nany_key = False\nen_res = encrypt(bytes_data, any_key)\nde_res = decrypt(en_res, any_key)\n# en_res[<class 'str'>] = 'bvdCUph2WUHfeFCqRBcbYeTk'\n# de_res[<class 'bytes'>] == bytes_data[<class 'bytes'>] == b'Hello bytes'\nprint('en_res[{0}] = {1!r}\\n'\n      'de_res[{2}] == bytes_data[{3}] == {4!r}\\n'.format(type(en_res), en_res,\n                                                         type(de_res), type(bytes_data), de_res))\n\n# Not bytes, the result will be string\nany_data = 123.45\n\n# use key: b'False\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\n# \\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b'\n# use iv: b'False\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b\\x1b'\n# encrypted: b's\\xd5\\xd4\\x91\\xa6olv\\x8b\\x0e0,\\xa3/\\x83\\xa2_'\n# encrypted: b's\\xd5\\xd4\\x91\\xa6olv\\x8b\\x0e0,\\xa3/\\x83\\xa2_'\n# decrypted: 123.45\n# decrypted: 123.45\nprint('use key:', AESCipher(any_key).key)\nprint('use iv:', AESCipher(any_key).iv)\nprint('encrypted:', AESCipher(any_key).encrypt_aes_cbc(any_data))\nprint('encrypted:', encrypt_aes_cbc(any_data, any_key))\nprint('decrypted:', AESCipher(any_key).decrypt_aes_cbc(b's\\xd5\\xd4\\x91\\xa6olv\\x8b\\x0e0,\\xa3/\\x83\\xa2_'))\nprint('decrypted:', decrypt_aes_cbc(b's\\xd5\\xd4\\x91\\xa6olv\\x8b\\x0e0,\\xa3/\\x83\\xa2_', any_key))\n\n# res[<class 'str'>] = '123.45'\nres = decrypt_aes_cbc(b's\\xd5\\xd4\\x91\\xa6olv\\x8b\\x0e0,\\xa3/\\x83\\xa2_', any_key)\nprint('res[{0}] = {1!r}'.format(type(res), res))\nprint()\n\n# Standard AES-CBC-128 pkcs7\nmy_data = b'Fufu'\nmy_key = b'0123456789012345'\nmy_iv = b'1234567890123456'\n# GUV0s3zVssASrOsESlepWA==\nprint(b64encode(encrypt_aes_cbc(my_data, my_key, my_iv, 128)[1:]).decode('utf-8'))\nprint(AESCipher(my_key, my_iv, 128, 'pkcs7', with_type=False).encrypt_aes_cbc_b64(my_data))\n# b47zjL73vzAeHovwRkt3KVR\nprint(AESCipher(my_key, my_iv, 128, 'pkcs7', with_type=False).encrypt_aes_cbc_b58(my_data))\n# 194574b37cd5b2c012aceb044a57a958\nprint(AESCipher(my_key, my_iv, 128, 'pkcs7', with_type=False).encrypt_aes_cbc_hex(my_data))\n\n# In: string, Out: string\nmy_data = 'Fufu .$\\x0f\\r\\ni^★地99'\nmy_key = b'ff\\xf4YF7777777\\x024\\x66~\\xa7\\xb6\\x5c12356'\n\n# Custom encryption and decryption scheme\na = encrypt(my_data, my_key)\nb = decrypt(a, my_key)\n# a:'bbMW5hBQegvcGSr3X6sZ1YrPcTMc3dqwFgYSS8sZN8iFEs'\n# b:'Fufu .$\\x0f\\r\\ni^★地99'\n# b==my_data:True\nprint('\\na:{0!r}\\nb:{1!r}\\nb==my_data:{2!r}'.format(a, b, b == my_data))\n\n# AES encryption helper\nciphertext_bytes = encrypt_aes_cbc(my_data, my_key)\nciphertext_hex = encrypt_aes_cbc_hex(my_data, my_key)\nciphertext_b58 = encrypt_aes_cbc_b58(my_data, my_key)\nciphertext_b64 = encrypt_aes_cbc_b64(my_data, my_key)\nciphertext_urlsafeb64 = encrypt_aes_cbc_urlsafe_b64(my_data, my_key)\n# bytes:b's\\xbb\\xff#z\\x95\\xcb7*\\x8d\\xca\\x00\\x1e\\xb7\\xcaN\\xf8S\\x05\\xe5\\x80\\xcb\\x9d#dr\\xb6vp\\xf6\\xe0\\x9c\\x96'\n# hex:73bbff237a95cb372a8dca001eb7ca4ef85305e580cb9d236472b67670f6e09c96\n# b58:bbP4HWS1WRcUDsdoEt8LNJvsZCdoerJiaA28JCdm7ibReu\n# b64:c7v/I3qVyzcqjcoAHrfKTvhTBeWAy50jZHK2dnD24JyW\n# urlsafeb64:c7v_I3qVyzcqjcoAHrfKTvhTBeWAy50jZHK2dnD24JyW\nprint('\\nbytes:{}\\nhex:{}\\nb58:{}\\nb64:{}\\nurlsafeb64:{}'.format(\n    ciphertext_bytes, ciphertext_hex, ciphertext_b58, ciphertext_b64, ciphertext_urlsafeb64))\n\n# AES decryption helper\nplaintext_1 = decrypt_aes_cbc(ciphertext_bytes, my_key)\nplaintext_2 = decrypt_aes_cbc_hex(ciphertext_hex, my_key)\nplaintext_3 = decrypt_aes_cbc_b58(ciphertext_b58, my_key)\nplaintext_4 = decrypt_aes_cbc_b64(ciphertext_b64, my_key)\nplaintext_5 = decrypt_aes_cbc_urlsafe_b64(ciphertext_urlsafeb64, my_key)\n# 'Fufu .$\\x0f\\r\\ni^★地99'\n# 'Fufu .$\\x0f\\r\\ni^★地99'\n# 'Fufu .$\\x0f\\r\\ni^★地99'\n# 'Fufu .$\\x0f\\r\\ni^★地99'\n# 'Fufu .$\\x0f\\r\\ni^★地99'\n# True\nprint('\\n{0!r}\\n{1!r}\\n{2!r}\\n{3!r}\\n{4!r}\\n{5}\\n'.format(\n    plaintext_1, plaintext_2, plaintext_3, plaintext_4, plaintext_5, plaintext_5 == my_data))\n\n# Generate a random key\nrandom_key = get_random_bytes(16)\n# 16 b'...'\nprint(len(random_key), random_key)\n\nrandom_key = os.urandom(16)\n# 16 b'...'\nprint(len(random_key), random_key)\n\nrandom_key = AESCipher(bits=128).key\n# 16 b'...'\nprint(len(random_key), random_key)\n\n# Any value generate key (32 bytes)\nkey = get_key_32([None, 1])\n# 32 b'2756ec2a79b9ea8b75c92ee33ad14c3f'\nprint(len(key), key)\n```\n\n\n\n\n\n\n\n*ff*\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fufuok/envcrypto",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "envcrypto",
    "package_url": "https://pypi.org/project/envcrypto/",
    "platform": "",
    "project_url": "https://pypi.org/project/envcrypto/",
    "project_urls": {
      "Homepage": "https://github.com/fufuok/envcrypto"
    },
    "release_url": "https://pypi.org/project/envcrypto/0.2.0/",
    "requires_dist": [
      "pycryptodome (>=3.9.8)"
    ],
    "requires_python": ">=3.6",
    "summary": "A safe way to store environmental variables.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10298011,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6d3bbcbd500854d7cb4bf6879008539cae266a0076b673f223f8b6b64df3daa",
          "md5": "b27da99d49b62ec9f3ce25a46f437eb6",
          "sha256": "f50977022b69fb959402812bf8ac9bfacbcb3cbb0f5486f32e28304a73065163"
        },
        "downloads": -1,
        "filename": "envcrypto-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b27da99d49b62ec9f3ce25a46f437eb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5936,
        "upload_time": "2021-05-06T05:49:57",
        "upload_time_iso_8601": "2021-05-06T05:49:57.170783Z",
        "url": "https://files.pythonhosted.org/packages/c6/d3/bbcbd500854d7cb4bf6879008539cae266a0076b673f223f8b6b64df3daa/envcrypto-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab328c7fe3adb324ebf76ae6e5bf67f4044c82b16f1b7d1c6ddf92237050071b",
          "md5": "def3c11071e5ac33763f0a1c895407cb",
          "sha256": "bb7e7f2c3127dc69cb17c341996f867a2f25d4aab3b68674b56ae172b024f029"
        },
        "downloads": -1,
        "filename": "envcrypto-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "def3c11071e5ac33763f0a1c895407cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6197,
        "upload_time": "2021-05-06T05:50:00",
        "upload_time_iso_8601": "2021-05-06T05:50:00.374876Z",
        "url": "https://files.pythonhosted.org/packages/ab/32/8c7fe3adb324ebf76ae6e5bf67f4044c82b16f1b7d1c6ddf92237050071b/envcrypto-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "930ee848c3126633a0cc68bbb5169eb16800dc148557debb1d2230a4851aec7b",
          "md5": "6e91a8a400bdaf46fc1363152da4362e",
          "sha256": "40a127d1e34c78c9f7c61ef4f922cd24c4b49fb5bc8b72b9752888ee8274d516"
        },
        "downloads": -1,
        "filename": "envcrypto-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e91a8a400bdaf46fc1363152da4362e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8298,
        "upload_time": "2021-05-09T03:51:03",
        "upload_time_iso_8601": "2021-05-09T03:51:03.028032Z",
        "url": "https://files.pythonhosted.org/packages/93/0e/e848c3126633a0cc68bbb5169eb16800dc148557debb1d2230a4851aec7b/envcrypto-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9f659c14cf21b56fd6234b989a3bf2de41d6c012d9819c722996db7decdaac5",
          "md5": "70aec659147a9fc8ab0a914107d52bb3",
          "sha256": "fb1c5db37d6d2f19c11976b03c4d17a4b3b49cb62d5c985842b180fabd5161a2"
        },
        "downloads": -1,
        "filename": "envcrypto-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70aec659147a9fc8ab0a914107d52bb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9383,
        "upload_time": "2021-05-09T03:51:05",
        "upload_time_iso_8601": "2021-05-09T03:51:05.702884Z",
        "url": "https://files.pythonhosted.org/packages/b9/f6/59c14cf21b56fd6234b989a3bf2de41d6c012d9819c722996db7decdaac5/envcrypto-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "930ee848c3126633a0cc68bbb5169eb16800dc148557debb1d2230a4851aec7b",
        "md5": "6e91a8a400bdaf46fc1363152da4362e",
        "sha256": "40a127d1e34c78c9f7c61ef4f922cd24c4b49fb5bc8b72b9752888ee8274d516"
      },
      "downloads": -1,
      "filename": "envcrypto-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e91a8a400bdaf46fc1363152da4362e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8298,
      "upload_time": "2021-05-09T03:51:03",
      "upload_time_iso_8601": "2021-05-09T03:51:03.028032Z",
      "url": "https://files.pythonhosted.org/packages/93/0e/e848c3126633a0cc68bbb5169eb16800dc148557debb1d2230a4851aec7b/envcrypto-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9f659c14cf21b56fd6234b989a3bf2de41d6c012d9819c722996db7decdaac5",
        "md5": "70aec659147a9fc8ab0a914107d52bb3",
        "sha256": "fb1c5db37d6d2f19c11976b03c4d17a4b3b49cb62d5c985842b180fabd5161a2"
      },
      "downloads": -1,
      "filename": "envcrypto-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "70aec659147a9fc8ab0a914107d52bb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9383,
      "upload_time": "2021-05-09T03:51:05",
      "upload_time_iso_8601": "2021-05-09T03:51:05.702884Z",
      "url": "https://files.pythonhosted.org/packages/b9/f6/59c14cf21b56fd6234b989a3bf2de41d6c012d9819c722996db7decdaac5/envcrypto-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}