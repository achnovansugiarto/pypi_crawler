{
  "info": {
    "author": "Kadeem Hassam",
    "author_email": "kadeem.hassam@peckypanda.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "By default, configparser only loads values from 'vars', 'section', and then 'default_section'. This extension allows for nested sections by use of a section splitter (default '.') and attempts to find values from 'vars', then 'section', then its logical parents, and finally 'default_section'.\n\nFor example, given the configuration below::\n\n  [DEFAULT]\n  alpha=first level\n\n  [section]\n  beta=second level\n\n  [section.subsection]\n  gamma=third level\n\nthe default configparser would behave like::\n\n  >>> settings = configparser.ConfigParser()\n  >>> settings.read('config.ini')\n  ['config.ini']\n  >>> settings.get('section.subsection', 'alpha')\n  first level\n  >>> settings.get('section.subsection', 'beta')\n  None\n  >>> settings.get('section.subsection', 'gamma')\n  third level\n\nInstead, in this extension, the behaviour would be::\n\n  >>> settings = nestedconfigparser.NestedConfigParser()\n  >>> settings.read('config.ini')\n  ['config.ini']\n  >>> settings.get('section.subsection', 'alpha')\n  first level\n  >>> settings.get('section.subsection', 'beta')\n  second level\n  >>> settings.get('section.subsection', 'gamma')\n  third level\n\nThis extensions supports theoretically unlimited levels of nesting. It also does not require each level of the subsection to exist for the case where a section has no additional configurations.\n\nNote: this extension intentionally does not raise a NoSectionError if a section does not exist when using 'nestedconfigparser.NestedConfigParser().get(section, option)'. This is because it will attempt to fallback to higher sections and avoids potentially empty sections that don't have any added configurations at the highest subsection.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kazzer/nestedconfigparser",
    "keywords": "configparser Nested Recursive",
    "license": "WTFPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "allya.nestedconfigparser",
    "package_url": "https://pypi.org/project/allya.nestedconfigparser/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/allya.nestedconfigparser/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/Kazzer/nestedconfigparser"
    },
    "release_url": "https://pypi.org/project/allya.nestedconfigparser/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple extension to configparser that allows nested fallback configurations",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2287293,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8349029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414",
          "md5": "0491f4034f601cb16bb03d6d14fda9a8",
          "sha256": "2ff13cae92f453ebdb98471398394ad8418fbc2b97d3a24defc3ed76a84b06d1"
        },
        "downloads": -1,
        "filename": "allya.nestedconfigparser-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0491f4034f601cb16bb03d6d14fda9a8",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "requires_python": null,
        "size": 4653,
        "upload_time": "2016-08-17T22:57:06",
        "upload_time_iso_8601": "2016-08-17T22:57:06.429666Z",
        "url": "https://files.pythonhosted.org/packages/83/49/029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414/allya.nestedconfigparser-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8349029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414",
        "md5": "0491f4034f601cb16bb03d6d14fda9a8",
        "sha256": "2ff13cae92f453ebdb98471398394ad8418fbc2b97d3a24defc3ed76a84b06d1"
      },
      "downloads": -1,
      "filename": "allya.nestedconfigparser-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0491f4034f601cb16bb03d6d14fda9a8",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 4653,
      "upload_time": "2016-08-17T22:57:06",
      "upload_time_iso_8601": "2016-08-17T22:57:06.429666Z",
      "url": "https://files.pythonhosted.org/packages/83/49/029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414/allya.nestedconfigparser-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}