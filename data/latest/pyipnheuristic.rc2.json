{
  "info": {
    "author": "Nicolas Ortiz",
    "author_email": "nortizv2100@alumno.ipn.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# PyIpnHeuristic\n\npyIpnHeuristic is a pure Python implementation of some heuristic algorithms for the National\nPolytechnic Institute of Mexico. For more information on pyIpnHeuristic, visit the GitHub project page\n[pyIpnHeuristic](https://github.com/niortizva/pyIpnHeuristic)\n\n## Pip Install\n\n```\npip install pyIpnHeuristic\n```\n\n## Benchmark \n\nBenchmark problems were taken from [Liang et al. 2006](https://www.researchgate.net/publication/216301032_Problem_definitions_and_evaluation_criteria_for_the_CEC_2006_special_session_on_constrained_real-parameter_optimization).\nCheck out the benchmark [doc](BENCHMARK.md) for a deatiled description.\n\nImport benchmark problems as follows:\n\n```python\n# Import the benchmark problem methods\n# get_pg01, get_pg02, get_pg03, get_pg04, get_pg05,\n# get_pg06, get_pg07, get_pg08, get_pg09, get_pg10,\n# get_pg11, get_pg12, get_pg13, get_pg14, get_pg15,\n# get_pg16, get_pg17, get_pg18, get_pg19, get_pg20,\n# get_pg21, get_pg22, get_pg23, get_pg24\nfrom pyIpnHeuristic.benchmark import get_pg01\n\n# get_pg[*problem]() returns problem parameters as:\n#    {\n#        objective_function\": <class 'function'>,\n#        \"gx\": [<class 'function'>, <class 'function'>, ...], # Soft Restrictions\n#        \"hx\": [<class 'function'>, <class 'function'>, ...], # Hard Restrictions\n#        \"ranges\": [[inf(x1), sup(x1)], ..., [inf(xd), sup(xd)]], # List of Ranges for each variable\n#        \"markdown\": \"PROBLEM X\", # Markdown Problem description \n#        \"x\": x_best, # Best values\n#        \"fx\": fx_best # Best solution value\n#    }\nproblem = get_pg01()\n\nobjective_function = problem.get(\"objective_function\")\ngx = problem.get(\"gx\")\nhx = problem.get(\"hx\")\nranges = problem.get(\"ranges\")\nmarkdown = problem.get(\"markdown\")\nx_best = problem.get(\"x\")\nfx_best = problem.get(\"fx\")\n```\n\n## Released Algorithms\n\n- Harmony Search\n\n```python\nfrom pyIpnHeuristic.harmonySearch import HarmonySearch\n    \nharmonySearch = HarmonySearch(\n    objective_function, # e.g, def f(*x): return x[0]**2 + x[1] **2\n    soft_constrains=g, # e.g, [def g(*x): return x[0], def g(*x): return x[0]**2]\n    hard_constrains=h, # e.g, [def h(*x): return x[1], def h(*x): return x[1]**2]\n    ranges=ranges, # e.g, [[0, 1], [0, 1]]\n    population_size=population_size, # e.g, 4\n    smooth=False, # If True, hard restrictions will be treated as soft restrictions\n    epsilon=10**-4, # If smmooth is True, then h(x) = 0 --> |h(x)| - epsilon <= 0\n    # Harmony Search Parameters\n    hcmr=hcmr,\n    par=par,\n    alpha=alpha\n)\n\nharmonySearch.search(\n    iterations=T, # Number of iterations to be made\n    save_history=True # Save the results for each iteration. Default False\n)\n```\n- Modified Harmony Search\n\n```python\nfrom pyIpnHeuristic.modifiedHarmonySearch import ModifiedHarmonySearch\n    \nharmonySearch = ModifiedHarmonySearch(\n    objective_function, # e.g, def f(*x): return x[0]**2 + x[1] **2\n    soft_constrains=g, # e.g, [def g(*x): return x[0], def g(*x): return x[0]**2]\n    hard_constrains=h, # e.g, [def h(*x): return x[1], def h(*x): return x[1]**2]\n    ranges=ranges, # e.g, [[0, 1], [0, 1]]\n    population_size=population_size, # e.g, 4\n    smooth=False, # If True, hard restrictions will be treated as soft restrictions\n    epsilon=10**-4, # If smmooth is True, then h(x) = 0 --> |h(x)| - epsilon <= 0\n    # Harmony Search Parameters\n    hcmr=hcmr,\n    par=par,\n    alpha=alpha\n)\n\nharmonySearch.search(\n    iterations=T, # Number of iterations to be made\n    save_history=True # Save the results for each iteration. Default False\n)\n```\n- Differential Evolution:\n    - DE/rand/1/ bin\n    - DE/best/1\n    - DE/current-to-best/1\n    - DE/best/2\n    - DE/rand/2\n    \n```python\nfrom pyIpnHeuristic.differentialEvolution import DifferentialEvolution\n\ndifferentialEvolution = DifferentialEvolution(\n    objective_function, # e.g, def f(*x): return x[0]**2 + x[1] **2\n    soft_constrains=g, # e.g, [def g(*x): return x[0], def g(*x): return x[0]**2]\n    hard_constrains=h, # e.g, [def h(*x): return x[1], def h(*x): return x[1]**2]\n    ranges=ranges, # e.g, [[0, 1], [0, 1]]\n    population_size=population_size, # e.g, 4\n    smooth=False, # If True, hard restrictions will be treated as soft restrictions\n    epsilon=10**-4, # If smooth is True, then h(x) = 0 --> |h(x)| - epsilon <= 0\n    # Differential Evolution Parameters\n    type=de_type, # Types: \"rand-1\", \"best-1\", \"current-to-best-1\", \"best-2, \"rand-2\", default: \"rand-1\"\n    f=0.9,\n    cr=0.05,\n)\n\ndifferentialEvolution.search(\n    iterations=T, # Number of iterations to be made\n    save_history=True # Save the results for each iteration. Default False\n)\n```\n- Particle Swarm Optimization\n\n```python\nfrom pyIpnHeuristic.particleSwarmOptimization import ParticleSwarmOptimization\n\nparticleSwarmOptimization = ParticleSwarmOptimization(\n    objective_function, # e.g, def f(*x): return x[0]**2 + x[1] **2\n    soft_constrains=g, # e.g, [def g(*x): return x[0], def g(*x): return x[0]**2]\n    hard_constrains=h, # e.g, [def h(*x): return x[1], def h(*x): return x[1]**2]\n    ranges=ranges, # e.g, [[0, 1], [0, 1]]\n    population_size=population_size, # e.g, 4\n    smooth=False, # If True, hard restrictions will be treated as soft restrictions\n    epsilon=10**-4, # If smmooth is True, then h(x) = 0 --> |h(x)| - epsilon <= 0\n    # Particle Swarm Parameters\n    w=0.3,\n    c1=0.1,\n    c2=1.9\n)\n\nparticleSwarmOptimization.search(\n    iterations=T, # Number of iterations to be made\n    save_history=True # Save the results for each iteration. Default False\n)\n```\n- Artificial Bee Colony\n\n```python\nfrom pyIpnHeuristic.artificialBeeColony import ArtificialBeeColony\n\nartificialBeeColony = ArtificialBeeColony(\n    objective_function, # e.g, def f(*x): return x[0]**2 + x[1] **2\n    soft_constrains=g, # e.g, [def g(*x): return x[0], def g(*x): return x[0]**2]\n    hard_constrains=h, # e.g, [def h(*x): return x[1], def h(*x): return x[1]**2]\n    ranges=ranges, # e.g, [[0, 1], [0, 1]]\n    population_size=population_size, # e.g, 4\n    smooth=False, # If True, hard restrictions will be treated as soft restrictions\n    epsilon=10**-4, # If smmooth is True, then h(x) = 0 --> |h(x)| - epsilon <= 0\n    # Artificial Bee Colony Parameters\n    mr=0.3,\n    max_trials=3,\n)\n\nartificialBeeColony.search(\n    iterations=T, # Number of iterations to be made\n    save_history=True # Save the results for each iteration. Default False\n)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/niortizva/pyIpnHeuristic",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Nicolas Ortiz",
    "maintainer_email": "nortizv2100@alumno.ipn.com",
    "name": "pyIpnHeuristic",
    "package_url": "https://pypi.org/project/pyIpnHeuristic/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyIpnHeuristic/",
    "project_urls": {
      "Homepage": "https://github.com/niortizva/pyIpnHeuristic"
    },
    "release_url": "https://pypi.org/project/pyIpnHeuristic/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "pyIpnHeuristic is a pure Python implementation of some heuristic algorithms",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15442178,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c3681dce924235581a1995df61ad133ba0ecf80438cf5c11b46a770cbb10d40",
          "md5": "65bda28e42700a0c3d7da78fcddd1314",
          "sha256": "0cf85df78597341798a44704030e04c2a61c5c4e402db69ae86728ee4cc86d24"
        },
        "downloads": -1,
        "filename": "pyIpnHeuristic-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65bda28e42700a0c3d7da78fcddd1314",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22017,
        "upload_time": "2022-10-09T22:54:07",
        "upload_time_iso_8601": "2022-10-09T22:54:07.798104Z",
        "url": "https://files.pythonhosted.org/packages/6c/36/81dce924235581a1995df61ad133ba0ecf80438cf5c11b46a770cbb10d40/pyIpnHeuristic-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03bc94f85652362461e161f10fc213b83a30c3ad7b1c6d4bee5086d900a53aee",
          "md5": "1a02ae7d2434691de891070821103760",
          "sha256": "c0f289c4326bc5294a710e69ba132b2e750d5d9453dd17a123a56848f7d92ba5"
        },
        "downloads": -1,
        "filename": "pyIpnHeuristic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a02ae7d2434691de891070821103760",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22242,
        "upload_time": "2022-10-09T22:54:09",
        "upload_time_iso_8601": "2022-10-09T22:54:09.139799Z",
        "url": "https://files.pythonhosted.org/packages/03/bc/94f85652362461e161f10fc213b83a30c3ad7b1c6d4bee5086d900a53aee/pyIpnHeuristic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84914d4282dd1e0aee3d8eb47153371118e69bcc98e332c5ee732ce63107a62d",
          "md5": "934cf86e472ea0b07ef803217d973ac9",
          "sha256": "f591fabc1e7cf02702e5cb9acca765c43b3d8ae6dc8123a888fd0e1e07d90255"
        },
        "downloads": -1,
        "filename": "pyIpnHeuristic-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "934cf86e472ea0b07ef803217d973ac9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24702,
        "upload_time": "2022-10-17T22:57:08",
        "upload_time_iso_8601": "2022-10-17T22:57:08.194226Z",
        "url": "https://files.pythonhosted.org/packages/84/91/4d4282dd1e0aee3d8eb47153371118e69bcc98e332c5ee732ce63107a62d/pyIpnHeuristic-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d165748bc8e989817ef0155356f6ce6c5d03c65c925a44d7ce3c8e13fecff1e",
          "md5": "9978183ca7282f570b5a54993bca3217",
          "sha256": "670a8eff904823f7223710cf1509fba0509adf6e8655e4fc6f58ec2b2403eedf"
        },
        "downloads": -1,
        "filename": "pyIpnHeuristic-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9978183ca7282f570b5a54993bca3217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24096,
        "upload_time": "2022-10-17T22:57:10",
        "upload_time_iso_8601": "2022-10-17T22:57:10.883643Z",
        "url": "https://files.pythonhosted.org/packages/9d/16/5748bc8e989817ef0155356f6ce6c5d03c65c925a44d7ce3c8e13fecff1e/pyIpnHeuristic-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84914d4282dd1e0aee3d8eb47153371118e69bcc98e332c5ee732ce63107a62d",
        "md5": "934cf86e472ea0b07ef803217d973ac9",
        "sha256": "f591fabc1e7cf02702e5cb9acca765c43b3d8ae6dc8123a888fd0e1e07d90255"
      },
      "downloads": -1,
      "filename": "pyIpnHeuristic-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "934cf86e472ea0b07ef803217d973ac9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24702,
      "upload_time": "2022-10-17T22:57:08",
      "upload_time_iso_8601": "2022-10-17T22:57:08.194226Z",
      "url": "https://files.pythonhosted.org/packages/84/91/4d4282dd1e0aee3d8eb47153371118e69bcc98e332c5ee732ce63107a62d/pyIpnHeuristic-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d165748bc8e989817ef0155356f6ce6c5d03c65c925a44d7ce3c8e13fecff1e",
        "md5": "9978183ca7282f570b5a54993bca3217",
        "sha256": "670a8eff904823f7223710cf1509fba0509adf6e8655e4fc6f58ec2b2403eedf"
      },
      "downloads": -1,
      "filename": "pyIpnHeuristic-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9978183ca7282f570b5a54993bca3217",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24096,
      "upload_time": "2022-10-17T22:57:10",
      "upload_time_iso_8601": "2022-10-17T22:57:10.883643Z",
      "url": "https://files.pythonhosted.org/packages/9d/16/5748bc8e989817ef0155356f6ce6c5d03c65c925a44d7ce3c8e13fecff1e/pyIpnHeuristic-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}