{
  "info": {
    "author": "Daniel Bochen Tan",
    "author_email": "bctan@cs.ucla.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![iccad](https://img.shields.io/badge/Published-ICCAD'20-brightgreen.svg?style=for-the-badge)](https://ieeexplore.ieee.org/document/9256696)\n[![arXiv](https://img.shields.io/badge/arXiv-2007.15671-brightgreen.svg?style=for-the-badge)](https://arxiv.org/abs/2007.15671)\n[![Unitary Fund](https://img.shields.io/badge/Supported%20By-UNITARY%20FUND-brightgreen.svg?style=for-the-badge)](http://unitary.fund)\n\n# OLSQ: Optimal Layout Synthesis for Quantum Computing\n\nMany quantum computers have constraints on the connections between qubits.\nHowever, a quantum program may not conform to these constraints.\nThus, it is necessary to perform 'layout synthesis for quantum computing', LSQC, which transforms quantum programs prior to execution so that the connectivity issues are resolved.\n\nOLSQ can solve LSQC optimally with respect to depth, number of SWAP gates, or fidelity.\nThere is also a transition-based mode (TB) to speed it up with little loss of optimality.\nTB-OLSQ can reduce SWAP count by 70% and increase fidelity by 1.30x compared to leading previous works at the time of publication.\n\nFor more details on the theory and the experiments, please refer to [the paper](https://doi.org/10.1145/3400302.3415620).\nFor more details on the software implementation, please refer to the [API documentation](https://olsq.readthedocs.io/en/latest/).\nBelow is a brief tutorial on how to use the package.\n\n## Installation\n\n```\npip install -U olsq\n```\nPlease make sure that you have `networkx` version `>=2.5` and `z3-solver` version `>=4.8.9.0` in your Python environment.\n\n## Initialization\n\n```\nfrom olsq import OLSQ\n\n# initiate olsq with depth as objective, in normal mode\nlsqc_solver = OLSQ(\"depth\", \"normal\")\n```\n\nThere are two argument in the constructor of OLSQ: `objective_name` and `mode`.\n- `objective_name`: `\"depth\"`, `\"swap\"`, or `\"fidelity\"`.\n- `mode`:  `\"normal\"` or `\"transition\"`.\nThe latter stands for TB-OLSQ in the paper, which is usually much faster with little loss of optimality.\n\n## Setting the device\n\nTo perform LSQC, we need to know the connections between the qubits, which is information about the physical device.\nWe are going to use the `setdevice` method.\nIn general, there are three ways: \n1. Directly construct a device with some properties.\n2. Use one of the hard-coded devices (including all the devices appeared in the paper).\n3. Use device defined in other packages: refer to later parts of this tutorial on [Cirq](#cirq-interface) and [Qiskit](#qiskit-interface).\n\n```\nfrom olsq.device import qcdevice\n\n# directly construct a device from properties needed by olsq\nlsqc_solver.setdevice( qcdevice(name=\"dev\", nqubits=5, \n     connection=[(0, 1), (1, 2), (1, 3), (3, 4)], swap_duration=3) )\n```\n\nWe use a minimalist class `qcdevice` to store the properties of the device that we need, which can be constructed with these arguments.\n(The last three are only for fidelity optimization.)\n- `name`\n- `nqubits`: the number of physical qubits\n- `connection`: a list of physical qubit pairs corresponding to edges in the coupling graph\n- `swap_duration`: number of cycles a SWAP gate takes.\n   Usually it is either one, or three meaning three CX gates.\n- `fmeas`: a list of measurement fidelity\n- `fsingle`: a list of single-qubit gate fidelity\n- `ftwo`: a list of two-qubit gate fidelity, indices aligned with `connection`\n\nIf `name` starts with `\"default_\"`, a hard-coded device stored in `olsq/devices/` would be loaded.\nOther arguments can still be specified, in which case the original device properties would be replaced by the input.\n```\n# use a hard-coded device in olsq/devices/ called ourense\n# which actually has the same properties as the device we constructed above\nlsqc_solver.setdevice( qcdevice(\"default_ourense\") )\n```\n\n## Setting the Input Program\n\nApart from the device, we need the quantum program/circuit to execute, which can be set with the `setprogram` method.\n_To be safe, always set the device first and then the program._\n\nOLSQ has an intermediate representation (IR) of quantum programs. (For details, refer to [a later part](#olsq-ir) of this tutorial.)\nIn general, there are four ways to set the program: \n1. Use OLSQ IR\n2. Use a string in QASM format\n3. Use an QASM file, e.g., one of programs used in the paper in `olsq/benchmarks/`.\n4. Use programs defined in other packages: refer to later parts of this tutorial on [Cirq](#cirq-interface) and [Qiskit](#qiskit-interface).\n\n```\ncircuit_str = \"OPENQASM 2.0;\\ninclude \\\"qelib1.inc\\\";\\nqreg q[3];\\nh q[2];\\n\" \\\n              \"cx q[1], q[2];\\ntdg q[2];\\ncx q[0], q[2];\\nt q[2];\\n\" \\\n              \"cx q[1], q[2];\\ntdg q[2];\\ncx q[0], q[2];\\nt q[1];\\nt q[2];\\n\" \\\n              \"cx q[0], q[1];\\nh q[2];\\nt q[0];\\ntdg q[1];\\ncx q[0], q[1];\\n\"\n\n# input the quantum program as a QASM string\nlsqc_solver.setprogram(circuit_str)\n```\n\nThe example above is a Toffoli gate.\nWe can also load an QASM file of it.\n```\n# load one of the QASM files from olsq/benchmarks\nlsqc_solver.setprogram(\"toffoli\", input_mode=\"benchmark\")\n\n# load your own QASM file\n# circuit_file = open(\"my-qasm-file\", \"r\").read()\n\nlsqc_solver.setprogram(circuit_file)\n\n# Toffoli Gate:\n#                                                        ┌───┐      \n# q_0: ───────────────────■─────────────────────■────■───┤ T ├───■──\n#                         │             ┌───┐   │  ┌─┴─┐┌┴───┴┐┌─┴─┐\n# q_1: ───────■───────────┼─────────■───┤ T ├───┼──┤ X ├┤ TDG ├┤ X ├\n#      ┌───┐┌─┴─┐┌─────┐┌─┴─┐┌───┐┌─┴─┐┌┴───┴┐┌─┴─┐├───┤└┬───┬┘└───┘\n# q_2: ┤ H ├┤ X ├┤ TDG ├┤ X ├┤ T ├┤ X ├┤ TDG ├┤ X ├┤ T ├─┤ H ├──────\n#      └───┘└───┘└─────┘└───┘└───┘└───┘└─────┘└───┘└───┘ └───┘      \n\"\"\"\n```\n\n## Solving and Output\n\nIt can be seen that in the Toffoli gate above, there are two-qubit gates on pair `(q_0,q_1)`, `(q_1,q_2)`, and `(q_2,q_0)`.\nHowever, there are no such triangles on device `ourense`.\nThis means that no matter how the qubits in the program are mapped to physical qubits, we need to insert SWAP gates.\n\n```\n# solve LSQC\nresult = lsqc_solver.solve()\n```\n\nThe `solve` method can take two optional arguemnts\n- `output_mode`: can be `\"IR\"`. Refer [here](#olsq-ir) on what would be returned in this case.\n- `output_file_name`\n\nIf `output_mode` is default, the return is a tuple of three things:\n- A string representing the output quantum program in QASM format.\nIf `output_file_name` is provided, then the QASM string would be written to that file.\n- final_mapping: from each program qubit to the corresponding physical qubit at the end of execution.\n- objective_value\n\nThe result of the Toffoli example is shown below.\nNote that a SWAP gate, decomposed into three CX gates, has been inserted.\n```\n# a LSQC solution to the Toffoli gate on device 'ourense'\n#                                                  ┌───┐     ┌───┐┌───┐ ┌───┐      ┌─┐      \n# q_0: ───────────────────■─────────────────────■──┤ X ├──■──┤ X ├┤ T ├─┤ H ├──────┤M├──────\n#      ┌───┐┌───┐┌─────┐┌─┴─┐┌───┐┌───┐┌─────┐┌─┴─┐└─┬─┘┌─┴─┐└─┬─┘└───┘ ├───┤      └╥┘┌─┐   \n# q_1: ┤ H ├┤ X ├┤ TDG ├┤ X ├┤ T ├┤ X ├┤ TDG ├┤ X ├──■──┤ X ├──■────■───┤ T ├───■───╫─┤M├───\n#      └───┘└─┬─┘└─────┘└───┘└───┘└─┬─┘└┬───┬┘└───┘     └───┘     ┌─┴─┐┌┴───┴┐┌─┴─┐ ║ └╥┘┌─┐\n# q_2: ───────■─────────────────────■───┤ T ├─────────────────────┤ X ├┤ TDG ├┤ X ├─╫──╫─┤M├\n#                                       └───┘                     └───┘└─────┘└───┘ ║  ║ └╥┘\n# q_3: ─────────────────────────────────────────────────────────────────────────────╫──╫──╫─\n#                                                                                   ║  ║  ║\n# q_4: ─────────────────────────────────────────────────────────────────────────────╫──╫──╫─\n#                                                                                   ║  ║  ║\n# c: 5/═════════════════════════════════════════════════════════════════════════════╩══╩══╩═\n#                                                                                   2  0  1\n```\n\n## Cirq Interface\n\nWe can input a `networkx.Graph` object representing the devie to `setdevicegraph`.\nNote that the method name is different from `setdevice`.\n(Such a representation is used in some components in Cirq, e.g.,`device_graph` on [this line](https://github.com/quantumlib/Cirq/blob/8f9d8597364b8bd0d29833cbbd014ebf1c62f3db/cirq/contrib/quantum_volume/quantum_volume.py#L215).)\n\nWe can input a `cirq.Circuit` object as program in `setprogram`.\n```\nfrom olsq.olsq_cirq import OLSQ_cirq\n\nlsqc_solver = OLSQ_cirq(\"depth\", \"normal\")\n\n# use a cirq.Circuit object as program\nlsqc_solver.setprogram(circuit)\n\n# use a networkx.Graph object representing the device\nlsqc_solver.setdevicegraph(device_graph)\n\n# result_circuit is a cirq.Circuit object\nresult_circuit, final_mapping, objective_value = lsqc_solver.solve()\n```\n## Qiskit Interface\n\nA `backend` from `IBMQ` can be input to the `setdevice` method with the second argument set to `\"ibm\"`.\n\nThere are two arguments for the `setprogram` method of `OLSQ_qiskit`: if the second is `\"qasm\"`, input a QASM string representing the quantum program as the first argument; if the second is none, then input a `QuantumCircuit` object in Qiskit as the first argument.\n\n```\nfrom qiskit import IBMQ\nfrom olsq.olsq_qiskit import OLSQ_qiskit\n\nlsqc_solver = OLSQ_qiskit(\"depth\", \"normal\")\n\n# use a qiskit.QuantumCircuit object as program\nlsqc_solver.setprogram(circuit)\n\nprovider = IBMQ.load_account()\nbackend = provider.get_backend(\"ibmq_lima\") # change to your backend of choice\n# use an IBMQ backend as the device\nlsqc_solver.setdevice(backend, \"ibm\")\n\n# result_circuit is a qiskit.QuantumCircuit object\nresult_circuit, final_mapping, objective_value = lsqc_solver.solve()\n```\n\n## TB-OLSQ\n\nThe transition-based mode is enabled if chosen at the initiation of `OLSQ`.\nRoughly speaking, we only use a kind of coarse-grain time in this mode, so the runtime is much shorter.\nFor theoretical details, please refer to [the paper](https://doi.org/10.1145/3400302.3415620).\nThe returned QASM string and `final_mapping` should be similar to what they were before.\nOnly if the objective is `\"depth\"`, the objective value would be very different from the normal mode.\nThere is only one SWAP inserted, so there are only two coarse-grain time steps, separated by the SWAP, whereas there are 14 time steps if using exact time.\n\n## OLSQ IR\n\nOLSQ IR contains three things:\n1. `count_program_qubit`: the number of qubits in the program.\n2. `gates`: a list of tuples representing qubit(s) acted on by a gate, each tuple has one index if it is a single-qubit gate, two indices if it is a two-qubit gate.\n3. `gate_spec`: list of type/name of each gate, which is not important to OLSQ, and only needed when generating output.\n\n```\n# For the following circuit\n# q_0: ───────────────────■───\n#                         │  \n# q_1: ───────■───────────┼───\n#      ┌───┐┌─┴─┐┌─────┐┌─┴─┐\n# q_2: ┤ H ├┤ X ├┤ TDG ├┤ X ├─\n#      └───┘└───┘└─────┘└───┘ \n\n# count_program_qubit = 3\n# gates = ((2,), (1,2), (2,), (0,1))\n# gate_spec = (\"h\", \"cx\", \"tdg\", \"cx\")\n```\n\nIf in the `solve` method, `output_mode` is set to `\"IR\"`, the return is a tuple of five things\n1. `result_depth`: depth of the resulting quantum program\n2. `list_scheduled_gate_name`: similar to `gate_spec` in the IR\n3. `list_scheduled_gate_qubits`: similar to `gates` in the IR\n4. `final_mapping`\n5. `objective_value`\n\n## BibTeX Citation\n```\n@InProceedings{iccad20-tan-cong-optimal-layout-synthesis,\n  author          = {Tan, Bochen and Cong, Jason},\n  booktitle       = {Proceedings of the 39th International Conference on Computer-Aided Design},\n  title           = {Optimal Layout Synthesis for Quantum Computing},\n  year            = {2020},\n  address         = {New York, NY, USA},\n  publisher       = {Association for Computing Machinery},\n  series          = {ICCAD '20},\n  archiveprefix   = {arXiv},\n  eprint          = {2007.15671},\n  primaryclass    = {quant-ph},\n  articleno       = {137},\n  doi             = {10.1145/3400302.3415620},\n  isbn            = {9781450380263},\n  keywords        = {quantum computing, scheduling, allocation, mapping, placement, layout synthesis},\n  location        = {Virtual Event, USA},\n  numpages        = {9},\n  url             = {https://doi.org/10.1145/3400302.3415620},\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tbcdebug/OLSQ",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "olsq",
    "package_url": "https://pypi.org/project/olsq/",
    "platform": null,
    "project_url": "https://pypi.org/project/olsq/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tbcdebug/OLSQ/issues",
      "Homepage": "https://github.com/tbcdebug/OLSQ"
    },
    "release_url": "https://pypi.org/project/olsq/0.0.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Optimal Layout Synthesis for Quantum Computing (OLSQ) for mapping and scheduling quantum circuits",
    "version": "0.0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13693309,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdf5baa3f28d9378d7b5a39f2a19db58caa92d08af34c6c55aac171cdb36b3a9",
          "md5": "77f8f8a8a9b510996d01ef540d42b717",
          "sha256": "46d42225bba4c41e2de2b643ae0ab9e6c9b6dd1b7bf12f60eabf5a4fb2487be2"
        },
        "downloads": -1,
        "filename": "olsq-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77f8f8a8a9b510996d01ef540d42b717",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8711,
        "upload_time": "2021-03-30T06:52:18",
        "upload_time_iso_8601": "2021-03-30T06:52:18.359589Z",
        "url": "https://files.pythonhosted.org/packages/fd/f5/baa3f28d9378d7b5a39f2a19db58caa92d08af34c6c55aac171cdb36b3a9/olsq-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd6b588f2857be8d620760241cc7bbc02876c3ffc00690368ae3aa7ca3beb54a",
          "md5": "06229631e3f384776e05f34a497b3f26",
          "sha256": "daaf70d38931813055cac4f8548f6698165f861971ba00a3def2f4a7d646ba7b"
        },
        "downloads": -1,
        "filename": "olsq-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06229631e3f384776e05f34a497b3f26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7184,
        "upload_time": "2021-03-30T06:52:19",
        "upload_time_iso_8601": "2021-03-30T06:52:19.549926Z",
        "url": "https://files.pythonhosted.org/packages/fd/6b/588f2857be8d620760241cc7bbc02876c3ffc00690368ae3aa7ca3beb54a/olsq-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e42bf1c0bd40dd60ffc0425999d24f7bfd027671fc0f9591280f54e4f32d4d12",
          "md5": "7f89a17ce241c660ac0c20a5d08083a3",
          "sha256": "acf0f2650d8cabbf1dc7cc28c5a09e640cf855e015c2ff01db7baf08f13b6147"
        },
        "downloads": -1,
        "filename": "olsq-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f89a17ce241c660ac0c20a5d08083a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23702,
        "upload_time": "2021-03-30T20:36:47",
        "upload_time_iso_8601": "2021-03-30T20:36:47.323205Z",
        "url": "https://files.pythonhosted.org/packages/e4/2b/f1c0bd40dd60ffc0425999d24f7bfd027671fc0f9591280f54e4f32d4d12/olsq-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb5a2bdd56afdd0fc74c5f3b783303874b84b934392c83bc07cfbca3f29e63f9",
          "md5": "117e7d4f34c4755e367ae3ba84f1efb8",
          "sha256": "4f53080626f8fc8c02753c013a8eec8ffd3993a7eca437e6c79319e0ea4126ca"
        },
        "downloads": -1,
        "filename": "olsq-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "117e7d4f34c4755e367ae3ba84f1efb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21102,
        "upload_time": "2021-03-30T20:36:48",
        "upload_time_iso_8601": "2021-03-30T20:36:48.829398Z",
        "url": "https://files.pythonhosted.org/packages/bb/5a/2bdd56afdd0fc74c5f3b783303874b84b934392c83bc07cfbca3f29e63f9/olsq-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f157f6ccd87b8f903d4dee6d61097a333f7f6fa37ac2b3c0807484df6579544",
          "md5": "134577236bc7e33af0c0619ce21394f3",
          "sha256": "3697759396cb5e178a74e9427e217041ecb8f0faf9c3efbdba6ca4c03a1d2fc4"
        },
        "downloads": -1,
        "filename": "olsq-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "134577236bc7e33af0c0619ce21394f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35708,
        "upload_time": "2021-03-30T20:57:23",
        "upload_time_iso_8601": "2021-03-30T20:57:23.175602Z",
        "url": "https://files.pythonhosted.org/packages/1f/15/7f6ccd87b8f903d4dee6d61097a333f7f6fa37ac2b3c0807484df6579544/olsq-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bb35552d19ca8036a7f974be9648ba17bf486c3c70fe204a5ae6cad58832e59",
          "md5": "40c5a3e67a9f14c06ab18af7f5e711bf",
          "sha256": "e53cd7cfedd58bec071dfd77eb8dabc61247c4c382fcb47f096e30e99cf9ffc0"
        },
        "downloads": -1,
        "filename": "olsq-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "40c5a3e67a9f14c06ab18af7f5e711bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26603,
        "upload_time": "2021-03-30T20:57:24",
        "upload_time_iso_8601": "2021-03-30T20:57:24.266919Z",
        "url": "https://files.pythonhosted.org/packages/2b/b3/5552d19ca8036a7f974be9648ba17bf486c3c70fe204a5ae6cad58832e59/olsq-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dc7211d8acfaf4503bfb3e7e362d17e749a8da0133dc137d0a5c7584bf93412",
          "md5": "35f0bf706ca6a7ece96e3314c4a3b79d",
          "sha256": "8845cea439bb4fc4284fa6946a39f08bca11516f45e75dae5da21f2e62ad0448"
        },
        "downloads": -1,
        "filename": "olsq-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35f0bf706ca6a7ece96e3314c4a3b79d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36228,
        "upload_time": "2021-04-09T18:03:02",
        "upload_time_iso_8601": "2021-04-09T18:03:02.222048Z",
        "url": "https://files.pythonhosted.org/packages/1d/c7/211d8acfaf4503bfb3e7e362d17e749a8da0133dc137d0a5c7584bf93412/olsq-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa1482f59fc02b0f51c71d88b9bb19def0e4d9b739d7b211f6eb1b60cca9e6fa",
          "md5": "8fc7c8a96d131de5d50999cf95d35299",
          "sha256": "fb02a403c38b98e72b714c2d7a06822b161ee91dc22f63e9144cf842827244a7"
        },
        "downloads": -1,
        "filename": "olsq-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8fc7c8a96d131de5d50999cf95d35299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28060,
        "upload_time": "2021-04-09T18:03:03",
        "upload_time_iso_8601": "2021-04-09T18:03:03.575274Z",
        "url": "https://files.pythonhosted.org/packages/aa/14/82f59fc02b0f51c71d88b9bb19def0e4d9b739d7b211f6eb1b60cca9e6fa/olsq-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f75b1b22bdf0883259f7b522b0fef6b6bc239d0071bb1db21b0c755eeca3bfc0",
          "md5": "00205c7695e2df9b842d0eb8974e6b18",
          "sha256": "0c2908a49fd12900e36d39270e628391f613fa289a2eba098f28481a63bfcc1f"
        },
        "downloads": -1,
        "filename": "olsq-0.0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00205c7695e2df9b842d0eb8974e6b18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27055,
        "upload_time": "2022-05-02T22:14:05",
        "upload_time_iso_8601": "2022-05-02T22:14:05.347071Z",
        "url": "https://files.pythonhosted.org/packages/f7/5b/1b22bdf0883259f7b522b0fef6b6bc239d0071bb1db21b0c755eeca3bfc0/olsq-0.0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f75b1b22bdf0883259f7b522b0fef6b6bc239d0071bb1db21b0c755eeca3bfc0",
        "md5": "00205c7695e2df9b842d0eb8974e6b18",
        "sha256": "0c2908a49fd12900e36d39270e628391f613fa289a2eba098f28481a63bfcc1f"
      },
      "downloads": -1,
      "filename": "olsq-0.0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "00205c7695e2df9b842d0eb8974e6b18",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27055,
      "upload_time": "2022-05-02T22:14:05",
      "upload_time_iso_8601": "2022-05-02T22:14:05.347071Z",
      "url": "https://files.pythonhosted.org/packages/f7/5b/1b22bdf0883259f7b522b0fef6b6bc239d0071bb1db21b0c755eeca3bfc0/olsq-0.0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}