{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "## Project description\n This is pypi package for outlier detection\n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/package-outlier)\n![PyPI - Wheel](https://img.shields.io/pypi/wheel/package-outlier)\n![PyPI](https://img.shields.io/pypi/v/package-outlier?style=flat-square)\n[![GitHub issues](https://img.shields.io/github/issues/amit22666/package-outlier)](https://github.com/amit22666/package-outlier/issues)\n[![GitHub forks](https://img.shields.io/github/forks/amit22666/package-outlier?style=social)](https://github.com/amit22666/package-outlier/network)\n[![GitHub stars](https://img.shields.io/github/stars/amit22666/package-outlier)](https://github.com/amit22666/package-outlier/stargazers)\n[![GitHub license](https://img.shields.io/github/license/amit22666/package-outlier?style=flat-square)](https://github.com/amit22666/package-outlier/blob/main/LICENSE)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/package-outlier)\n\n\n\n\n\n\n\n## Install\nRead the online Installation instructions.\n\nThis software depends on NumPy and Scipy, Python packages for scientific computing. You must have them installed prior to installing package-outlier.\n\nInstall the latest version of package-outlier\n\n```$ pip install package-outlier```\n\nThis will display a message and download if the module is not already installed. It will then install package-outlier and all its dependencies.\n\n## Dependencies\n```\n     Python\n     NumPy\n     SciPy\n     scikit-learn\n     pandas\n```\n\n\n## How to call a function\n```\n      import package_outlier as po\n      result = po.ZscoreOutlier(data)\n      result = po.ModifiedZscoreOutlier(data)\n      result = po.LocalOutlierFactorOutlier(data)\n      result = po.DepthOutlier(data)\n      result = po.KmeansOutlier(data)\n      result = po.OdinOutlier(data)\n      result = po.RegressionOutlier(data)\n      result = po.SvmOutlier(data)\n      result = po.PcaOutlier(data)\n      result = po.KnnOutlier(data)\n      result = po.AngleOutlier(data)\n```\n## NOTE: In all implementations we have used interquartile range based method to define the threshold value.\n      The formula used for evaluation is as follows:\n      lower_range = q1 - (1.5 * iqr)\n      upper_range = q3 + (1.5 * iqr)\n      lower_range = lower_range - margin\n      upper_range = upper_range + margin\n\n## Zscore based outlier detection\nZscore is a common method to detect anomaly in 1-D.\nFor a given data point zscore is calculated by:\\\nzscore = data_point - mean / std_dev\n\nThe function take data and threshold value as required argument and returns data points that are outliers.\n\n## Modified zscore based outlier detection\nMean and standard deviation are themselves prone to outliers that's why we use median instead of mean and median absolute deviation instead of mean absolute deviation.\\\nFor more info on median absolute deviation refer to https://en.wikipedia.org/wiki/Median_absolute_deviation.\n\n\n## Angle based outlier detection\nFor a normal point the angle it makes with any other two data points varies a lot as you choose\ndifferent data points.\nFor an anomaly the angle\nit makes with any other two data\npoints doesn’t vary much as you\nchoose different data points\nHere we used cosθ to calculate angle between 2 vectors.\n\n## Depth based outlier detection\n Outliers lie at the edge of the data space. According to this concept we organize the data in layers\nin which each layer is labeled by its depth. The outermost layer is depth = 1, the next is\ndepth = 2 and so on. Finally outliers are those points with a depth below a predetermined threshold.\nThis implementation uses a convex hull to implement this depth based method. Convex hull is defined as the smallest convex set that contains the data.\nThis method is typically efficient only for two and three dimensional data. Outliers are points with a depth ≤ n.\n\n## Linear regression based outlier detection\nYou should be familiar with linear regression in order to understand this method. In this vertical distance from straight line fit is used to score points.\nOutliers are far from line i.e, the distance between regression fitted line and data point is far. A threshold value is calculated using these scores in order to label data point as outlier.\nNOTE that linear regression in itself is sensitive to outliers\n\n## PCA based outlier detection\n\nYou should be familiar with PCA in order to understand this method.\nThe principal components are linear combinations of the original features.\nUsually few principal components matter since they accompanies most of the variance of the data and hence most of the data aligns along a lower-dimensional feature space.\nOutliers are those points that don’t align with this subspace. Distance of the anomaly from the aligned data can be used as an anomaly score. Outlier itself can affect the modelling\nhence it should be modelled on normal data point and then should be used to detect outliers.\n\n## SVM based outlier detection\nIn this one class SVM is used for outlier detection. Basically the idea is data points lieing to one side of hyperplane is considered as normal\nand other side as data points is labelled as outliers. Two key assumptions while applying it are:\n1. Data provided all belong to normal class\n   Since data may contain anomalies this results in a noisy model\n2. The origin belongs to the anomaly class\n   Rarely use data as is. Origin is that of kernel-based transformed data\nNOTE:\n1. The shape of the decision boundary is sensitive to the choice of kernel and\nother tuning parameters of SVMs\n2. Without deep knowledge of both the data and SVMs, it is easy to get poor\nresults\n3. To address this issue, sampling of subsets of the data and averaging of scores\nis recommended.\n\n\n## KNN based outlier detection\nThe basic idea is anomalies are far away from neighboring points. In this for each point, distance is calculated to k nearest neighbors.\nNow we can take either take arithematic mean or harmonic mean of the obtained KNN distances to set the threshold value and values\nexceeding this limit is considered as outlier.\nNOTE:\n1. The value of k and scoring process affect the results\n2. Choosing k requires judgment hence a range of values is used\n3. It is a good idea to check the scoring process, if results vary wildly with the choice of distance metric and scoring threshold,\nfurther examination of the data is recommended.\n\n## ODIN based outlier detection\nThis method is considered to be the reverse of KNN. For each point it's KNN are considered which is called the indegree number of that data point.\nLarge indegree number means that instance is the neighbor of many points hence it is labelled as normal points and small indegree number means that instance is relatively isolated\nhence it is termed as outlier.\n\n## K means based outlier detection\nWe should be familiar with the working of k-means while diving to this method.\nThe basic idea is outliers are far away clusters (dense collections of points).\nNow usually there are 3 types of distances to be considered like distance from cluster centroid,\ndistance from cluster edge and Mahalanobis distances to each cluster.\nNOTE:\n1. Choice of k affects the results\n2. Initial choice of centroids can also affect results\n\n## LOF based outlier detection\nIt is a density based method in which outliers are located in sparse regions. It defines outliers with respect to local region, Compares local density of query point with local density of neighbors\n and if the local density of the query point is much lower then it is labelled as outlier.\nThe process is as followed-\n1. Define local region around query point by its k nearest neighbors (“query\nneighbors”)\n2. For far away query neighbors, use distance between query neighbor and\nquery point\n– For close neighbors, use distance to the kth nearest neighbor of the query neighbor\n3.  Average distances over all query neighbors is known as “average reachability distance”\n    Local density = reciprocal of average reachability distance\n    LOF = average local density of neighbors / local density of query point\n   – LOF ≈ 1 similar density as neighbors\n   – LOF < 1 higher density than neighbors (normal point)\n   – LOF > 1 lower density than neighbors (outlier)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jainyk/package-outlier",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "package-outlier",
    "package_url": "https://pypi.org/project/package-outlier/",
    "platform": "",
    "project_url": "https://pypi.org/project/package-outlier/",
    "project_urls": {
      "Homepage": "https://github.com/jainyk/package-outlier"
    },
    "release_url": "https://pypi.org/project/package-outlier/0.9/",
    "requires_dist": [
      "scipy",
      "numpy",
      "pandas",
      "scikit-learn",
      "statistics",
      "datetime"
    ],
    "requires_python": "",
    "summary": "This is an outlier detection package",
    "version": "0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9000584,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d4b78fe3a5aee2d46cfce98a2272af73ac05faad7a44eb81a66bf61a75d42d1",
          "md5": "fd72f658c664de37dbdc04875330f197",
          "sha256": "e3ded4031f442d917a177c706bb21079c1ed696756412710dcc4da6acfe6b05a"
        },
        "downloads": -1,
        "filename": "package_outlier-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd72f658c664de37dbdc04875330f197",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12703,
        "upload_time": "2020-12-28T18:02:19",
        "upload_time_iso_8601": "2020-12-28T18:02:19.502467Z",
        "url": "https://files.pythonhosted.org/packages/1d/4b/78fe3a5aee2d46cfce98a2272af73ac05faad7a44eb81a66bf61a75d42d1/package_outlier-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "404c57d8ac96da42a493108d0022787c7fb71b4d2e5a89b9476c142a2a856d2c",
          "md5": "a3240b0c984dc459fc1de5dc2ee4de41",
          "sha256": "0937dab88e65d397adf8073d0a67e5afadf7ad443bb6d39f2ed9f14dcbf38b5f"
        },
        "downloads": -1,
        "filename": "package_outlier-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a3240b0c984dc459fc1de5dc2ee4de41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15519,
        "upload_time": "2020-12-28T18:02:21",
        "upload_time_iso_8601": "2020-12-28T18:02:21.557869Z",
        "url": "https://files.pythonhosted.org/packages/40/4c/57d8ac96da42a493108d0022787c7fb71b4d2e5a89b9476c142a2a856d2c/package_outlier-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d4b78fe3a5aee2d46cfce98a2272af73ac05faad7a44eb81a66bf61a75d42d1",
        "md5": "fd72f658c664de37dbdc04875330f197",
        "sha256": "e3ded4031f442d917a177c706bb21079c1ed696756412710dcc4da6acfe6b05a"
      },
      "downloads": -1,
      "filename": "package_outlier-0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd72f658c664de37dbdc04875330f197",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12703,
      "upload_time": "2020-12-28T18:02:19",
      "upload_time_iso_8601": "2020-12-28T18:02:19.502467Z",
      "url": "https://files.pythonhosted.org/packages/1d/4b/78fe3a5aee2d46cfce98a2272af73ac05faad7a44eb81a66bf61a75d42d1/package_outlier-0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "404c57d8ac96da42a493108d0022787c7fb71b4d2e5a89b9476c142a2a856d2c",
        "md5": "a3240b0c984dc459fc1de5dc2ee4de41",
        "sha256": "0937dab88e65d397adf8073d0a67e5afadf7ad443bb6d39f2ed9f14dcbf38b5f"
      },
      "downloads": -1,
      "filename": "package_outlier-0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "a3240b0c984dc459fc1de5dc2ee4de41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15519,
      "upload_time": "2020-12-28T18:02:21",
      "upload_time_iso_8601": "2020-12-28T18:02:21.557869Z",
      "url": "https://files.pythonhosted.org/packages/40/4c/57d8ac96da42a493108d0022787c7fb71b4d2e5a89b9476c142a2a856d2c/package_outlier-0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}