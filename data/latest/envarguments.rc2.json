{
  "info": {
    "author": "",
    "author_email": "Måns Thörnvik <thornvik.mans@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# envargs\n[![codecov](https://codecov.io/gh/maansthoernvik/envargs/branch/master/graph/badge.svg?token=HXYFRI3THX)](https://codecov.io/gh/maansthoernvik/envargs)\n[![PyPI version](https://badge.fury.io/py/envarguments.svg)](https://badge.fury.io/py/envarguments)\n\n`envargs` gives you an easy way of specifying which environment variables to\nlook for as program arguments/config. This library aims at providing an as \nsimilar as possible experience to that of using Python's `argparse` package.\n\n## Why envargs?\nAs most containerized applications take most or at least part of their \nruntime config from environment variables I always seemed to reimplement the \nsame parsing utilities for new projects. `envargs.EnvParser` gives you a \nno-dependencies quick way of specifying which variables your program needs \nto run, which are mandatory and which are not, and their data types. A \nsingle call to `parse_env` and your registered environment variables are \ndecoded, ready to be used.\n\n## Usage\nRegistering interesting variables and getting a hold of them in your running\nprogram is very straight forward:\n```python\nimport envargs\n\nNUM_WORKERS = \"NUM_WORKERS\"\nRETENTION_POLICY = \"RETENTION_POLICY\"\nRETENTION_POLICY_DEFAULT = \"keep-alive\"\n\nparser = envargs.EnvParser()\nparser.add_variable(NUM_WORKERS, type=int, default=1)\nparser.add_variable(RETENTION_POLICY, default=RETENTION_POLICY_DEFAULT)\nnamespace = parser.parse_env()\n\nnum_workers = namespace.num_workers\nretention_policy = namespace.retention_policy\n...\n```\nRegister interesting variables with `add_variable` and call `parse_env()` to \nobtain a populated namespace. The namespace will have one property per found \n*registered* variable, named the same as the environment variable in lower \ncase. Variable `NUM_WORKERS` thus gets the field name `namespace.num_workers`.\n\n### Generating a description text\nIn addition, to further clarify how your \napplication uses environment variables, an `envargs.EnvParser` provides a \nhelpful description property that can help determine if you have set up your \nvariables as expected. After calling `add_variables` on your `EnvParser` \ninstance for each interesting variable, the parsers `description` field will \ncontain a helpful text which describes all added variables, if they're \nrequired, their types, and their default values (if any).\n\n```python\nimport envargs\nimport logging\n\nLOGGER = logging.getLogger(__name__)\n\nenv_parser = envargs.EnvParser()\nenv_parser.add_variable(\"NUM_WORKERS\", type=int)\nenv_parser.add_variable(\"RETRY_COUNTER\", required=False, type=int)\nenv_parser.add_variable(\"OVERLOAD_LIMIT\", default=\"high\")\n\nLOGGER.debug(env_parser.description)\n```\nThis text can be added to an `argparse.ArgumentParser` description to show \nthe text easily from the commandline. Note the use of the raw formatter \nclass to avoid stripping line breaks.\n```python\nimport argparse\nimport envargs\n\nenv_parser = envargs.EnvParser()\nenv_parser.add_variable(\"WORK_DIST_STRATEGY\", default=\"round-robin\")\nenv_parser.add_variable(\"CPU_OVERLOAD_LIMIT_PERCENT\", type=int, default=80)\n\narg_parser = argparse.ArgumentParser(\n   formatter_class=argparse.RawDescriptionHelpFormatter,\n   description=\"\"\"\nThis is the best program, ever written, clearly.\n\nBelow, some info on environment variables used \\/\n\"\"\" + env_parser.description)\n...\n```\n\n### Variable properties\nAn environment variable, when registered, can be given a set of properties, \nall available as keyword arguments given to `EnvParser.add_variable(...)`. \nIf no keyword arguments are given, just the name of the environment variable \nitself, it will be assumed that:\n1. The variable is required (raising a `RequiredError` in case it's missing)\n2. The variable is a string (meaning no special decoding of the string \n   gotten from `os.getenv(...)`) is done\n3. There is no default value\n\nRead the docstring on `EnvParser.add_variable` to see all available options. \nBelow is an example of a non-required boolean variable with a default value:\n\n```python\nimport envargs\n\ndef do_throttling(acceptor_throttling: bool):\n    ...\n\nenv_parser = envargs.EnvParser()\nenv_parser.add_variable(\"ACCEPTOR_THROTTLING\", type=bool, required=False, \n                        default=False)\nns = env_parser.parse_env()\n\ndo_throttling(ns.acceptor_throttling)\n```\nThe above will attempt to find the environment variable \n`ACCEPTOR_THROTTLING` and if it doesn't exist, fall back on `False` as a \ndefault value. The namespace returned by `parse_env` will therefore always \nbe populated with the `acceptor_throttling` property.\n\nAn optional environment variable that isn't present at the time of calling \n`parse_env` will still yield an attribute in the returmed namespace, set to \n`None`.\n\n```python\nimport envargs\n\nenv_parser = envargs.EnvParser()\nenv_parser.add_variable(\"OPTIONAL_SETTING\", required=False)\nnamespace = env_parser.parse_env()\n\n# Will not raise an assertion error\nassert namespace.optional_setting is None\n```\n\n### Parsing booleans\nTo simplify things for this library, booleans can be expressed in only a few \nselected ways:\n```python\nTRUTH_SET = {\"true\", \"True\", \"1\"}\nFALSE_SET = {\"false\", \"False\", \"0\"}\n```\nThese definitions are available at `envargs.envargs.TRUTH_SET/FALSE_SET`. \nDeviating from these values for a boolean variable will result in a \n`ParseError`:\n\n```python\nimport envargs\nimport os\n\nfrom envargs.errors import ParseError\n\nSYSTEM_ONLINE = \"SYSTEM_ONLINE\"\n\n# Set the env var to something other than what's defined in the \n# TRUTH_SET/FALSE_SET\nos.environ[SYSTEM_ONLINE] = \"YES\"\n\nenv_parser = envargs.EnvParser()\nenv_parser.add_variable(SYSTEM_ONLINE, type=bool)\n\n# This statement raises a ParseError\ntry:\n    env_parser.parse_env()\nexcept ParseError as e:\n    print(e)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "envarguments",
    "package_url": "https://pypi.org/project/envarguments/",
    "platform": null,
    "project_url": "https://pypi.org/project/envarguments/",
    "project_urls": {
      "Bug Tracker": "https://github.com/maansthoernvik/envargs/issues",
      "Homepage": "https://github.com/maansthoernvik/envargs"
    },
    "release_url": "https://pypi.org/project/envarguments/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Utility to specify which environment variable shall be used as arguments for a program.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16364441,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "163621e40c313e08b66d78d442d46fe0b624afccddd480897398ee2e00b9a2e7",
          "md5": "5093e93e108a02a8468ad2c7019e9b24",
          "sha256": "c3a31a4dd3f3892817e987e4c8cb572f7276ac74f43c4e89c9fd45a421c3d839"
        },
        "downloads": -1,
        "filename": "envarguments-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5093e93e108a02a8468ad2c7019e9b24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6152,
        "upload_time": "2023-01-09T19:15:40",
        "upload_time_iso_8601": "2023-01-09T19:15:40.328454Z",
        "url": "https://files.pythonhosted.org/packages/16/36/21e40c313e08b66d78d442d46fe0b624afccddd480897398ee2e00b9a2e7/envarguments-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c230343332a973fe826fdb33972f48d646688ae4f11d609a904cec44ef43ea",
          "md5": "0d8f5afaa605461b6f39a2e25f853263",
          "sha256": "38c1184f8764e78e5f21879f35a89268d3d30e2ad2f5311e2fe7621857b8e5bb"
        },
        "downloads": -1,
        "filename": "envarguments-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d8f5afaa605461b6f39a2e25f853263",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6501,
        "upload_time": "2023-01-09T19:15:41",
        "upload_time_iso_8601": "2023-01-09T19:15:41.965650Z",
        "url": "https://files.pythonhosted.org/packages/43/c2/30343332a973fe826fdb33972f48d646688ae4f11d609a904cec44ef43ea/envarguments-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18d2dfe46e710173fd464b89ff31cb4fb111ed380d183024340cbb2232317c20",
          "md5": "eee9ff75268214aa2e084f11091a66e5",
          "sha256": "c0423d6e15a8b1ebf802b40f34bddf6e93fa89799f3f4e905fb08c178331f3ce"
        },
        "downloads": -1,
        "filename": "envarguments-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eee9ff75268214aa2e084f11091a66e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7273,
        "upload_time": "2023-01-09T19:35:08",
        "upload_time_iso_8601": "2023-01-09T19:35:08.034157Z",
        "url": "https://files.pythonhosted.org/packages/18/d2/dfe46e710173fd464b89ff31cb4fb111ed380d183024340cbb2232317c20/envarguments-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62d91b4fd35f8d053691ee8b9d26d0ccc2e53682afeab806263216543a0ba955",
          "md5": "f587a6ec1dfedcb0775dcd6670adcc6b",
          "sha256": "3b7629e8a4bc12630777472444445509e7b4b4080602668681fecfa20bca85fd"
        },
        "downloads": -1,
        "filename": "envarguments-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f587a6ec1dfedcb0775dcd6670adcc6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7633,
        "upload_time": "2023-01-09T19:35:09",
        "upload_time_iso_8601": "2023-01-09T19:35:09.363903Z",
        "url": "https://files.pythonhosted.org/packages/62/d9/1b4fd35f8d053691ee8b9d26d0ccc2e53682afeab806263216543a0ba955/envarguments-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18d2dfe46e710173fd464b89ff31cb4fb111ed380d183024340cbb2232317c20",
        "md5": "eee9ff75268214aa2e084f11091a66e5",
        "sha256": "c0423d6e15a8b1ebf802b40f34bddf6e93fa89799f3f4e905fb08c178331f3ce"
      },
      "downloads": -1,
      "filename": "envarguments-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eee9ff75268214aa2e084f11091a66e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7273,
      "upload_time": "2023-01-09T19:35:08",
      "upload_time_iso_8601": "2023-01-09T19:35:08.034157Z",
      "url": "https://files.pythonhosted.org/packages/18/d2/dfe46e710173fd464b89ff31cb4fb111ed380d183024340cbb2232317c20/envarguments-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62d91b4fd35f8d053691ee8b9d26d0ccc2e53682afeab806263216543a0ba955",
        "md5": "f587a6ec1dfedcb0775dcd6670adcc6b",
        "sha256": "3b7629e8a4bc12630777472444445509e7b4b4080602668681fecfa20bca85fd"
      },
      "downloads": -1,
      "filename": "envarguments-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f587a6ec1dfedcb0775dcd6670adcc6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7633,
      "upload_time": "2023-01-09T19:35:09",
      "upload_time_iso_8601": "2023-01-09T19:35:09.363903Z",
      "url": "https://files.pythonhosted.org/packages/62/d9/1b4fd35f8d053691ee8b9d26d0ccc2e53682afeab806263216543a0ba955/envarguments-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}