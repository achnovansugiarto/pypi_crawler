{
  "info": {
    "author": "James Bonifield",
    "author_email": "bonifield.tools@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# RequestInjector\nscan a URL using one or more given wordlists with optional URL transformations\n\n### What is RequestInjector?\nThis tool scans a single URL at a time, using wordlists to try various path combinations and key/value query pairs. RequestInjector is a single standalone script that can be kept in a tools folder until needed, or installed directly via pip and accessed directly from $PATH.\n- in `path` mode (`-m path`), try all words against a URL path, with optional mutations\n\t- given the URL \"http://example.com/somepath/a/b/c\", a wordlist to pull terms from, and -m/--mutate specified, worker threads will try each mutation of the URL and the current term (WORD):\n\t\t- \"http://example.com/WORD\", \"http://example.com/somepath/WORD\", \"http://example.com/somepath/a/WORD\", \"http://example.com/somepath/a/b/WORD\", \"http://example.com/somepath/a/b/c/WORD\"\n- in `arg` mode (`-m arg`), try all words against a specified set of keys\n\t- using the `shotgun` attacktype (`-T shotgun`), provide a single wordlist against one or more keys (similar to Burp Suite's Intruder modes Sniper and Battering Ram)\n\t- using the `trident` attacktype (`-T trident`), provide one wordlist per key, and terminate upon reaching either the end of the shortest wordlist (default) or the longest (`--longest --fillvalue VALUE`) (similar to Burp Suite's Intruder mode Pitchfork)\n- in `body` mode (`-m body`), use a template to submit dynamic body content to a given target, utilizing either the `shotgun` or `trident` attacktype (also supports URL-based modes above)\n\t- `body` is not yet implemented\n\n\n### Installation [GitHub](https://github.com/bonifield/RequestInjector) [PyPi](https://pypi.org/project/requestinjector/)\n```\npip install requestinjector\n# will become available directly from $PATH as either \"requestinjector\" or \"ri\"\n```\n\n### Usage (Command Line Tool or Standalone Script Somewhere in $PATH)\n```\nv0.9.4\nLast Updated: 2021-09-21\n\npath mode (-M path):\n\t# NOTE - although -w accepts a comma-separated list of wordlists as a string, only the first one will be used for this mode\n\t\trequestinjector -u \"http://example.com/somepath/a/b/c\" \\\n\t\t-M path \\\n\t\t-w \"/path/to/wordlist.txt\" \\\n\t\t-t 10 \\\n\t\t-r 2 \\\n\t\t-m \\\n\t\t-p '{\"http\": \"http://127.0.0.1:8080\", \"https\": \"https://127.0.0.1:8080\"}' \\\n\t\t-H '{\"Content-Type\": \"text/plain\"}' \\\n\t\t--color\n\narg mode (-M arg) using shotgun attacktype (-T shotgun):\n\t# NOTE - shotgun is similar to Burp Suite's sniper and battering ram modes; provide one or more keys, and a single wordlist\n\t# NOTE - although -w accepts a comma-separated list of wordlists as a string, only the first one will be used for this attacktype\n\t# NOTE - mutations (-m) not yet available for arg mode\n\t\trequestinjector -u \"http://example.com/somepath/a/b/c\" \\\n\t\t-M arg \\\n\t\t-T shotgun \\\n\t\t-K key1,key2,key3,key4 \\\n\t\t-w \"/path/to/wordlist.txt\" \\\n\t\t-S statickey1=staticval1,statickey2=staticval2 \\\n\t\t-t 10 \\\n\t\t-r 2 \\\n\t\t-p '{\"http\": \"http://127.0.0.1:8080\", \"https\": \"https://127.0.0.1:8080\"}' \\\n\t\t-H '{\"Content-Type\": \"text/plain\"}' \\\n\t\t--color\n\narg mode (-M arg) using trident attacktype (-T trident), and optional static arguments (-S):\n\t# NOTE - trident is similar to Burp Suite's pitchfork mode; for each key specified, provided a wordlist (-w WORDLIST1,WORDLIST2,etc); specify the same wordlist multiple times if using this attacktype and you want the same wordlist in multiple positions\n\t# NOTE - this type will run through to the end of the shortest provided wordlist; use --longest and --fillvalue VALUE to run through the longest provided wordlist instead\n\t# NOTE - mutations (-m) not yet available for arg mode\n\t\trequestinjector -u \"http://example.com/somepath/a/b/c\" \\\n\t\t-M arg \\\n\t\t-T trident \\\n\t\t-K key1,key2,key3,key4 \\\n\t\t-w /path/to/wordlist1.txt,/path/to/wordlist2.txt,/path/to/wordlist3.txt,/path/to/wordlist4.txt \\\n\t\t-S statickey1=staticval1,statickey2=staticval2 \\\n\t\t-t 10 \\\n\t\t-r 2 \\\n\t\t-p '{\"http\": \"http://127.0.0.1:8080\", \"https\": \"https://127.0.0.1:8080\"}' \\\n\t\t-H '{\"Content-Type\": \"text/plain\"}' \\\n\t\t--color\n\narg mode (-M arg) using trident attacktype (-T trident), optional static arguments (-S), and  --longest and --fillvalue VALUE (itertools.zip_longest())\n\t# NOTE - trident is similar to Burp Suite's pitchfork mode; for each key specified, provided a wordlist (-w WORDLIST1,WORDLIST2,etc); specify the same wordlist multiple times if using this attacktype and you want the same wordlist in multiple positions\n\t# NOTE - --longest and --fillvalue VALUE will run through to the end of the longest provided wordlist, filling empty values with the provided fillvalue\n\t# NOTE - mutations (-m) not yet available for arg mode\n\t\trequestinjector -u \"http://example.com/somepath/a/b/c\" \\\n\t\t-M arg \\\n\t\t-T trident \\\n\t\t-K key1,key2,key3,key4 \\\n\t\t-w /path/to/wordlist1.txt,/path/to/wordlist2.txt,/path/to/wordlist3.txt,/path/to/wordlist4.txt \\\n\t\t-S statickey1=staticval1,statickey2=staticval2 \\\n\t\t--longest \\\n\t\t--fillvalue \"AAAA\" \\\n\t\t-t 10 \\\n\t\t-r 2 \\\n\t\t-p '{\"http\": \"http://127.0.0.1:8080\", \"https\": \"https://127.0.0.1:8080\"}' \\\n\t\t-H '{\"Content-Type\": \"text/plain\"}' \\\n\t\t--color\n\noutput modes: full (default), --simple_output (just status code and full url), --color (same as simple_output but the status code is colorized)\n\nadditional options:\n\t-d/--delay [FLOAT] = add a delay, per thread, as a float (default 0.0)\n\nor import as a module (from requestinjector import RequestInjector)\n```\n\n### Usage (Importable Module)\n```\nfrom requestinjector import RequestInjector\n\nproxy = {'http': 'http://127.0.0.1:8080', 'https': 'https://127.0.0.1:8080'}\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0', 'Accept': 'text/html'}\nurl = \"http://example.com/somepath/a/b/c\"\nwordlist = [\"/path/to/wordlist.txt\"]\n\nx = RequestInjector(url=url, wordlist=wordlist, threads=10, mutate_path=True, headers=headers, proxy=proxy, retries=1, staticargs=\"\", injectkeys=\"\", longest=None, fillvalue=None, simple_output=True)\nx.run()\n```\n\n### Options (-h)\n```\nusage: requestinjector.py [-h] -u URL [-w WORDLIST] [-M MODE] [-H HEADERS]\n                          [-p PROXY] [-r RETRIES] [-t THREADS] [-d DELAY] [-m]\n                          [-T ATTACKTYPE] [--longest] [-F FILLVALUE]\n                          [-S STATICARGS] [-K INJECTKEYS] [--color]\n                          [--simple_output]\n\nRequestInjector: scan a URL using a given wordlist with optional URL\ntransformations\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  -u URL, --url URL     provide a URL to check\n\ngeneral arguments:\n  -w WORDLIST, --wordlist WORDLIST\n                        provide a wordlist (file) location, or multiple comma-\n                        separated files in a string, ex. -w\n                        /home/user/words1.txt or -w\n                        /home/user/words1.txt,/home/user/words2.txt, etc\n  -M MODE, --mode MODE  provide a mode (path|arg|body(NYI)) (default path)\n  -H HEADERS, --headers HEADERS\n                        provide a dictionary of headers to include, with\n                        single-quotes wrapping the dictionary and double-\n                        quotes wrapping the keys and values, ex. '{\"Content-\n                        Type\": \"application/json\"}' (defaults to a Firefox\n                        User-Agent and Accept: text/html) *note default is set\n                        inside PathWorker class*\n  -p PROXY, --proxy PROXY\n                        provide a dictionary of proxies to use, with single-\n                        quotes wrapping the dictionary and double-quotes\n                        wrapping the keys and values, ex. '{\"http\":\n                        \"http://127.0.0.1:8080\", \"https\":\n                        \"https://127.0.0.1:8080\"}'\n  -r RETRIES, --retries RETRIES\n                        provide the number of times to retry a connection\n                        (default 1)\n  -t THREADS, --threads THREADS\n                        provide the number of threads for making requests\n                        (default 10)\n  -d DELAY, --delay DELAY\n                        provide a delay between requests, per thread, as a\n                        float (default 0.0); use fewer threads and longer\n                        delays if the goal is to be less noisy, although the\n                        amount of requests will remain the same\n  -m, --mutate          provide if mutations should be applied to the checked\n                        URL+word (currently only supports path mode, arg mode\n                        support nyi)\n\narg mode-specific arguments:\n  -T ATTACKTYPE, --attacktype ATTACKTYPE\n                        provide an attack type (shotgun|trident); shotgun is\n                        similar to Burp Suite's sniper and battering ram\n                        modes, and trident is similar to pitchfork (default\n                        shotgun)\n  --longest             provide if you wish to fully exhaust the longest\n                        wordlist using the trident attacktype, and not stop\n                        when the end of shortest wordlist has been reached\n                        (zip() vis itertools.zip_longest()\n  -F FILLVALUE, --fillvalue FILLVALUE\n                        provide a string to use in null values when using\n                        --longest with the trident attacktype (such as when\n                        using two wordlists of differing lengths; the\n                        fillvalue will be used when the shortest wordlist has\n                        finished, but terms are still being used from the\n                        longest wordlist)\n  -S STATICARGS, --staticargs STATICARGS\n                        provide a string of static key=value pairs to include\n                        in each request, appended to the end of the query, as\n                        a comma-separated string, ex. key1=val1,key2=val2 etc\n  -K INJECTKEYS, --injectkeys INJECTKEYS\n                        provide a string of keys to be used; using the shotgun\n                        attacktype, each key will receive values from only the\n                        first wordlist; using the trident attacktype, each key\n                        must have a specifc wordlist specified in the matching\n                        position with the -w WORDLIST option; ex. '-T trident\n                        -K user,account,sid -w\n                        userwords.txt,accountids.txt,sids.txt'\n\noutput arguments:\n  --color               provide if stdout should have colorized status codes\n                        (will force simple_output format)\n  --simple_output       provide for simplified output, just status code and\n                        URL, ex. 200 http://example.com\n```\n\n### Example Output\n```\n# Standard Format\n# Provided URL: http://example.com/somepath/exists\n# Note the IP and port reflect the proxy being used; without a proxy, this will reflect the external address being scanned\nstatus_code:404 bytes:12 word:contactus ip:127.0.0.1 port:8080 url:http://example.com/contactus\nstatus_code:404 bytes:12 word:contactus ip:127.0.0.1 port:8080 url:http://example.com/somepath/contactus\nstatus_code:200 bytes:411 word:contactus ip:127.0.0.1 port:8080 url:http://example.com/somepath/exists/contactus\nstatus_code:404 bytes:12 word:admin ip:127.0.0.1 port:8080 url:http://example.com/admin\nstatus_code:200 bytes:556 word:admin ip:127.0.0.1 port:8080 url:http://example.com/somepath/admin\nstatus_code:200 bytes:556 word:admin ip:127.0.0.1 port:8080 url:http://example.com/somepath/exists/admin\n\n# Simplified Format (simple_output)\n404 http://example.com/contactus\n404 http://example.com/somepath/contactus\n200 http://example.com/somepath/exists/contactus\n404 http://example.com/admin\n200 http://example.com/somepath/admin\n200 http://example.com/somepath/exists/admin\n```\n\n### TODO\n- preview mode\n- body mode, recursive grep, method select/switching\n- logfile dump for every execution\n- redirect history handling\n- body POST/PUT objects using a config\n- optional encodings and obfuscation of words/terms\n- better output handling to support response body content, headers sent/received, etc\n- move more logic out of Worker classes and into pre-processing/Filler and post-processing/Drainer classes\n- jitter, rotating user agents, arg mode mutations (duplicate keys, re-order, null bytes, etc)\n- \"real timeout\" (-R) to use with requests\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bonifield/RequestInjector",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "requestinjector",
    "package_url": "https://pypi.org/project/requestinjector/",
    "platform": "",
    "project_url": "https://pypi.org/project/requestinjector/",
    "project_urls": {
      "Homepage": "https://github.com/bonifield/RequestInjector"
    },
    "release_url": "https://pypi.org/project/requestinjector/0.9.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "scan a URL using one or more given wordlists with optional URL transformations",
    "version": "0.9.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11511435,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f149aed29d361e1f62b953643c5a41661188675f97baa5e80fcdb873ca27688",
          "md5": "7ba8f1a3ef4431302b90dfcd60914696",
          "sha256": "7d3329024ff46ee046640b8210c2f925d12c903a4bb0881298e7da8b8bd4aeae"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ba8f1a3ef4431302b90dfcd60914696",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8197,
        "upload_time": "2021-08-17T21:35:33",
        "upload_time_iso_8601": "2021-08-17T21:35:33.664840Z",
        "url": "https://files.pythonhosted.org/packages/6f/14/9aed29d361e1f62b953643c5a41661188675f97baa5e80fcdb873ca27688/requestinjector-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50b09d1cb0d8c16c28845fe5cb6635b5ef307bf2f9f8418fb107ac11586544b7",
          "md5": "9bfdc8170cf716eaa7a7fc48922e826e",
          "sha256": "f882bbf36da7641f5dbd148af40994c3c2671f51f05275e969fdec58f4bf5ded"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bfdc8170cf716eaa7a7fc48922e826e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7432,
        "upload_time": "2021-08-17T21:35:34",
        "upload_time_iso_8601": "2021-08-17T21:35:34.944269Z",
        "url": "https://files.pythonhosted.org/packages/50/b0/9d1cb0d8c16c28845fe5cb6635b5ef307bf2f9f8418fb107ac11586544b7/requestinjector-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1308c214e9780146ffaa26ad876447f4752ee532e442fce3c6137f052e7585a",
          "md5": "8ad2a247c5c3b3930f21663f8769d72a",
          "sha256": "bde5ef3ae8ee3a4424fda3888930d72a28f05ef88b0c16838d5264c8b535a33e"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ad2a247c5c3b3930f21663f8769d72a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8802,
        "upload_time": "2021-08-18T18:07:27",
        "upload_time_iso_8601": "2021-08-18T18:07:27.111280Z",
        "url": "https://files.pythonhosted.org/packages/e1/30/8c214e9780146ffaa26ad876447f4752ee532e442fce3c6137f052e7585a/requestinjector-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed01d270fb47f416d3b33b9bdcc47e1348c9d09de23e2066af35c8eca9f50149",
          "md5": "8a51e67d67980fd7ee74feb7e7ad278e",
          "sha256": "c419de4ba1227ce38719d09ba08f27e2d11e20b059181773136733d9b66f828c"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a51e67d67980fd7ee74feb7e7ad278e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7848,
        "upload_time": "2021-08-18T18:07:27",
        "upload_time_iso_8601": "2021-08-18T18:07:27.965596Z",
        "url": "https://files.pythonhosted.org/packages/ed/01/d270fb47f416d3b33b9bdcc47e1348c9d09de23e2066af35c8eca9f50149/requestinjector-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94eb6c0a419309f13c1121ef2ef78a0ba04e2e56cf75efa48ca32bd3d635b7a8",
          "md5": "25e2790d74b68747ef10d37f22aa0d29",
          "sha256": "cebc5626bc75178059253147747feb6d41d30295cfb6687f20351793e810b951"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25e2790d74b68747ef10d37f22aa0d29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8822,
        "upload_time": "2021-09-08T17:10:17",
        "upload_time_iso_8601": "2021-09-08T17:10:17.522786Z",
        "url": "https://files.pythonhosted.org/packages/94/eb/6c0a419309f13c1121ef2ef78a0ba04e2e56cf75efa48ca32bd3d635b7a8/requestinjector-0.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daa461814a61cff779c43e90d8c1d2d19b9b61676f76ac88b4448ec039aa691f",
          "md5": "260c2577f21940f3211e4797f517ced3",
          "sha256": "b80bc84205cd91546fdaaa558dbc0474a10c180ebbc78b9bee6f6870ca871f06"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "260c2577f21940f3211e4797f517ced3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7878,
        "upload_time": "2021-09-08T17:10:18",
        "upload_time_iso_8601": "2021-09-08T17:10:18.681676Z",
        "url": "https://files.pythonhosted.org/packages/da/a4/61814a61cff779c43e90d8c1d2d19b9b61676f76ac88b4448ec039aa691f/requestinjector-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff23a3fc5fd002e94cbdecca3b67e9b2594585e455d37f24b78bb86ee7895526",
          "md5": "63a2b8058d4f8a5329e2cc9fc2bcdc18",
          "sha256": "4dc3b1f44cd7aa03a54580fc0eeb5fe11956b156ed1d0ca14cd81ffd4ab43624"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63a2b8058d4f8a5329e2cc9fc2bcdc18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14270,
        "upload_time": "2021-09-21T20:58:25",
        "upload_time_iso_8601": "2021-09-21T20:58:25.495319Z",
        "url": "https://files.pythonhosted.org/packages/ff/23/a3fc5fd002e94cbdecca3b67e9b2594585e455d37f24b78bb86ee7895526/requestinjector-0.9.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dd74bd59df7281bb8e0fd8ec2a981247d42399f94ba84676c7102e702b75e08",
          "md5": "f51ac053c121b3d4c94f74c0d40263f2",
          "sha256": "010dee66e210f3deae27a51a8dbf9276e17f49ac8876a13374d62749b7f8219c"
        },
        "downloads": -1,
        "filename": "requestinjector-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f51ac053c121b3d4c94f74c0d40263f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12796,
        "upload_time": "2021-09-21T20:58:26",
        "upload_time_iso_8601": "2021-09-21T20:58:26.986788Z",
        "url": "https://files.pythonhosted.org/packages/3d/d7/4bd59df7281bb8e0fd8ec2a981247d42399f94ba84676c7102e702b75e08/requestinjector-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff23a3fc5fd002e94cbdecca3b67e9b2594585e455d37f24b78bb86ee7895526",
        "md5": "63a2b8058d4f8a5329e2cc9fc2bcdc18",
        "sha256": "4dc3b1f44cd7aa03a54580fc0eeb5fe11956b156ed1d0ca14cd81ffd4ab43624"
      },
      "downloads": -1,
      "filename": "requestinjector-0.9.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63a2b8058d4f8a5329e2cc9fc2bcdc18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14270,
      "upload_time": "2021-09-21T20:58:25",
      "upload_time_iso_8601": "2021-09-21T20:58:25.495319Z",
      "url": "https://files.pythonhosted.org/packages/ff/23/a3fc5fd002e94cbdecca3b67e9b2594585e455d37f24b78bb86ee7895526/requestinjector-0.9.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3dd74bd59df7281bb8e0fd8ec2a981247d42399f94ba84676c7102e702b75e08",
        "md5": "f51ac053c121b3d4c94f74c0d40263f2",
        "sha256": "010dee66e210f3deae27a51a8dbf9276e17f49ac8876a13374d62749b7f8219c"
      },
      "downloads": -1,
      "filename": "requestinjector-0.9.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f51ac053c121b3d4c94f74c0d40263f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12796,
      "upload_time": "2021-09-21T20:58:26",
      "upload_time_iso_8601": "2021-09-21T20:58:26.986788Z",
      "url": "https://files.pythonhosted.org/packages/3d/d7/4bd59df7281bb8e0fd8ec2a981247d42399f94ba84676c7102e702b75e08/requestinjector-0.9.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}