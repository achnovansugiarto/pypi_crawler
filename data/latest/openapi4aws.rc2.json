{
  "info": {
    "author": "coderazzi (LuisM Pena)",
    "author_email": "coderazzi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Utilities"
    ],
    "description": "Openapi 4 AWS\n=============\n\n-  Website: https://coderazzi.net/python/openapi4aws\n-  Github: https://github.com/coderazzi/openapi4aws-python\n-  Pypi: https://pypi.org/project/openapi4aws\n-  License: MIT license\n\nThis is utility to enrich an openapi integration with information\nspecific for the AWS API Gateway. It allows defining route integrations\nand authorizers to do automatic (re-)imports in API Gateway.\n\nThe openapi integration is extended on two parts: - security:\noptionally, adding one or more authorizers. - paths: extending each\nmethod with the associated authorizer and defining an endpoint.\n\nThe input to this utility is passed as parameters.\n\nSecurity / Authorizers\n----------------------\n\nTo specify an authorizer, use the following mandatory parameters:\n\n-**authorizer.name**: name of the authorizer\n\n-**authorizer.identity-source**: header containing the authorization,\nlike: $request.header.Authorization\n\n-**authorizer.audience**: comma separated list of audiences for\nthis authorizer.\n\n-**authorizer.issuer**\n\nThe following two parameters are currently optional:\n\n-*authorizer.authorization-type* = **oauth2**: currently, it can be\nonly defined as “oauth2”.\n\n-*authorizer.authorizer-type* = **jwt**:\ncurrently, it can be only defined as “jwt”.\n\nMultiple authorizers can be defined using a comma separated list in\n**authorizer.name**, i.e.:\n\n::\n\n   authorizer.name=authorizer1, authorizer2\n\nIt is possible then to specify a different parameter for each authorizer\nusing the syntax:\n\n-  **authorizer.audience.\\ AUTHORIZER_NAME**\\ =audience\n-  **authorizer.issuer.\\ AUTHORIZER_NAME**\\ =issuer\n\nPaths / Integrations\n--------------------\n\nTo define routes, the syntax is:\n\n-  **path.\\ PATH**\\ =full_uri[,authorizer_name,scopes]\\*\n\nFor example:\n\n::\n\n   path.user.post=http://3.64.241.104:12121/user/post\n\nThis will define an endpoint for the route /user/post, using no\nauthorizers. Alternatively, authorizer plus scopes can be specified:\n\n::\n\n   path.user.post=http://3.64.241.104:12121/user/post,authorizer1,user.email,user.id\n\nIn this case, it uses the authorizer with name “authorizer1”, with\nscopes “user.email” and “user.id”\n\nDefining input / output\n-----------------------\n\nThree parameters manage the input / output tasks:\n\n-**filename**: allows\nto specify the input files to process, and it is possible to repeat this\nparameter multiple times. It is an error if the designed filename does\nnot exist.\n\n-**glob**: which supports specifying the input using\nfilename patterns. It is not an error if this pattern matches no names\nin the file system.\n\n-**output-folder**: optional, defines the output\nfolder. If not specified, the input files will be overwritten.\n\nDefining the configuration in a separate file\n---------------------------------------------\n\nIt is possible to specify any configuration parameters in a separate\nfile, using the argument:\n\n::\n\n   configuration=filename\n\nThis file should define the parameters in separate lines, using the same\nsyntax. Empty lines and starting with the character **#** are discarded.\n\nIt is possible to specify multiple external configuration files. An\nexample of a single file would be:\n\n::\n\n   # a comment\n   authorizer.name=DubaixCognito,Other\n   authorizer.identity-source=$request.header.Authorization\n   authorizer.audience=2f0m9fcoiejij4316u574aq259,7ac34sujrb8gmvj2b6blpi7ruu\n   authorizer.issuer=https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_1T9bfKHNp\n\n   tag.Frontend=http://3.64.241.104:12121/tmp/,DubaixCognito,user.email,user.id\n   path.user.scope2=http://OTHER_PATH:12122/path,Other,user.email",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://coderazzi.net/python/openapi4aws",
    "keywords": "openapi,aws,api-gateway",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openapi4aws",
    "package_url": "https://pypi.org/project/openapi4aws/",
    "platform": "",
    "project_url": "https://pypi.org/project/openapi4aws/",
    "project_urls": {
      "Homepage": "https://coderazzi.net/python/openapi4aws"
    },
    "release_url": "https://pypi.org/project/openapi4aws/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "utility to enrich an openapi specification with information specific for the AWS API Gateway",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12479296,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c37a297b5112090551127a95b9857aa26f726c64ecaf929a30d7b9f8e25174d9",
          "md5": "0df1b4f2568fc058ee60a76165c3b431",
          "sha256": "b2a42d345bcfb754043316e08f5c25848a340675b82055e005f0080644201c5a"
        },
        "downloads": -1,
        "filename": "openapi4aws-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0df1b4f2568fc058ee60a76165c3b431",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7017,
        "upload_time": "2022-01-04T15:38:23",
        "upload_time_iso_8601": "2022-01-04T15:38:23.341978Z",
        "url": "https://files.pythonhosted.org/packages/c3/7a/297b5112090551127a95b9857aa26f726c64ecaf929a30d7b9f8e25174d9/openapi4aws-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "927f8279ea5da4a8c00ab39c79e6ec426bba3e9d171a640be29a3ec14243b20b",
          "md5": "3e0e8f3e8384d13088d682c35b2f20e1",
          "sha256": "ac2a3e42750fccd34b543a840d23212032d9d927547a1ba9da2163ec118567d9"
        },
        "downloads": -1,
        "filename": "openapi4aws-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e0e8f3e8384d13088d682c35b2f20e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7153,
        "upload_time": "2022-01-05T00:18:47",
        "upload_time_iso_8601": "2022-01-05T00:18:47.793147Z",
        "url": "https://files.pythonhosted.org/packages/92/7f/8279ea5da4a8c00ab39c79e6ec426bba3e9d171a640be29a3ec14243b20b/openapi4aws-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "927f8279ea5da4a8c00ab39c79e6ec426bba3e9d171a640be29a3ec14243b20b",
        "md5": "3e0e8f3e8384d13088d682c35b2f20e1",
        "sha256": "ac2a3e42750fccd34b543a840d23212032d9d927547a1ba9da2163ec118567d9"
      },
      "downloads": -1,
      "filename": "openapi4aws-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3e0e8f3e8384d13088d682c35b2f20e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7153,
      "upload_time": "2022-01-05T00:18:47",
      "upload_time_iso_8601": "2022-01-05T00:18:47.793147Z",
      "url": "https://files.pythonhosted.org/packages/92/7f/8279ea5da4a8c00ab39c79e6ec426bba3e9d171a640be29a3ec14243b20b/openapi4aws-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}