{
  "info": {
    "author": "Willaim J. Pearson",
    "author_email": "willjamespearson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Tensorflow 2.x FITS\n===================\nThis repo contains python scripts to load data from [FITS (Flexible Image \nTransfer System)](https://en.wikipedia.org/wiki/FITS) into Tensorflow 2.x's \n`tf.data.Dataset`. It currently will load images, binary tables or ascii tables \nfrom a specified HDU (i.e. your fits file can have multiple extensions). My \nplan was to have it work like Tensorflow's built in functions to read images.\n\nThe functions require a byte string of your FITS file, which can be generated \nfrom Tensorflow's `tf.io.read_file(file_path)` function.\n\nThe returned image shape will be the same as the image in the FITS (i.e. 2D \nif the FITS HDU is 2D or 3D if it is 3D and so on).\n\nThe returned binary table will have the same number of rows and columns as the \nbinary table in the FITS. HOWEVER, data types will not always be conserved. \nCharacter strings ('A'), complex numbers ('C' and 'M'), array descriptors ('P' \nand 'Q') and bits ('X') will be converted into float32 due to the way \nTensorflow seems to want to work. Arrays of any data type (e.g. '5E') will be\nreturned as the first value in the array. For example, columns of data type \n'5E' will become columns of data type 'E' by taking the first value in the \narray. Non-single-precision floating point values will also be converted to\nsingle-precision floating points.\n\nThe returned ascii table will have the same number of rows and columns as the \nascii table in the FITS. HOWEVER, data types will not always be conserved. \nCharacter strings ('A') will be converted into float32 due to the way \nTensorflow seems to want to work.\n\nAs Tensorflow requires these functions to have a known return type, the data\nreturned from this script will be tf.float32. If you have double-precision \nvalues, there may be loss of data. There will also be loss of data for \nnon-real numbers in tables (see above).\n\nINSTALLING\n==========\nInstall with pip: `pip install tf-fits`\n\nOf if you prefer to install from source:\nClone this repo: `git clone https://github.com/wjpearson/tensorflow_fits.git`  \ncd into the folder: `cd tensorflow_fits`  \ninstall with pip (reccomended): `pip install .`  \nor install with python: `python3 setup.py install`\n\n**Testing Installation**\nIf you cloned the repo and have `pytest` installed, you can run `pytest` from \nthe tensorflow_fits folder. If you do not, you can run:\n\n```bash\npython -c \"from tf_fits.test.test_tf_fits import runall; runall()\"\n```\n\nUsage\n=====\nFITS images:\n```python\nimport tensorflow as tf\nfrom tf_fits.image import image_decode_fits\n\nfits_file = '/path/to/fits/file.fits'\nheader = 0\n\nimg = tf.io.read_file(fits_file)\nimg = image_decode_fits(img, header)\n```\n\nFITS binary tables:\n```python\nimport tensorflow as tf\nfrom tf_fits.bintable import bintable_decode_fits\n\nfits_file = '/path/to/fits/file.fits'\nheader = 1\n\ntbl = tf.io.read_file(fits_file)\ntbl = bintable_decode_fits(tbl, header)\n```\n\nFITS ascii tables:\n```python\nimport tensorflow as tf\nfrom tf_fits.asciitable import asciitable_decode_fits\n\nfits_file = '/path/to/fits/file.fits'\nheader = 1\n\ntbl = tf.io.read_file(fits_file)\ntbl = asciitable_decode_fits(tbl, header)\n```\n\nIf you use this code in a publication, shoot me a message (but don't feel \nobliged). I'm curious what people may use it for.\n\n(Potential) Issues\n==================\nData types in binary tables may be lost. Only bools ('L') and real numbers \n(unsigned bytes 'B', 16-bit integers 'I', 32-bit integers 'J', 64-bit integers \n'K', single-precision floating point 'E' and double-precision floating point \n'D') will be processed properly. Other data types (bit 'X', character 'A', \nsingle-precision complex 'C', double-precision complex 'M', 32-bit array \ndescriptor 'P' and 64-bit array descriptor 'Q') will not be returned properly \nalong with arrays of bools or real numbers (which will return the first value \nin the array). This is due to Tensorflow wanting arrays of a single data type \nand my assumption that people will use bools, real numbers or split complex \nnumbers into separate real and imaginary parts inside Tensorflow.\n\nData types in ascii tables may be lost. Characters 'A' are not processed \nproperly. It will convert these data into integers. This is due to Tensorflow \nwanting arrays of a single data type and my assumption that people will not \nbe using characters (or strings) inside Tensorflow.\n\nReading tables is slow...\n\nDoes not check the HDU actually contains the requested XTENSION type (IMAGE, \nBINTABLE or TABLE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wjpearson/tensorflow_fits",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tf-fits",
    "package_url": "https://pypi.org/project/tf-fits/",
    "platform": "",
    "project_url": "https://pypi.org/project/tf-fits/",
    "project_urls": {
      "Homepage": "https://github.com/wjpearson/tensorflow_fits"
    },
    "release_url": "https://pypi.org/project/tf-fits/1.0.0/",
    "requires_dist": [
      "tensorflow (>=2.0.0a0)"
    ],
    "requires_python": ">=3.5",
    "summary": "Load FITS files into tf.data.Dataset",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8349858,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "202ebf172f48096b281acfba7de753a5d1fd929b9bf451d5c57a47edf14862c4",
          "md5": "2ef2ef1c4aac7afbdfc298d02e0940c8",
          "sha256": "cd92bcb143c8240b2b3dcad787b5cc0239f23922d9ffb4ec4a3ad4b477ab56b6"
        },
        "downloads": -1,
        "filename": "tf_fits-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ef2ef1c4aac7afbdfc298d02e0940c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20159,
        "upload_time": "2020-10-06T10:43:47",
        "upload_time_iso_8601": "2020-10-06T10:43:47.705746Z",
        "url": "https://files.pythonhosted.org/packages/20/2e/bf172f48096b281acfba7de753a5d1fd929b9bf451d5c57a47edf14862c4/tf_fits-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "868edf92ffb01d118aabf37df0cc1fa15a43ad9b2a99ffa546382f3aa5cef186",
          "md5": "aaeb6f7975b470b9105d09ed9b8eb903",
          "sha256": "576c48d2e1f23e77729f713d3172afa7f36bebb83600f9c9460a0617138269ec"
        },
        "downloads": -1,
        "filename": "tf-fits-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaeb6f7975b470b9105d09ed9b8eb903",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 20429,
        "upload_time": "2020-10-06T10:43:49",
        "upload_time_iso_8601": "2020-10-06T10:43:49.928319Z",
        "url": "https://files.pythonhosted.org/packages/86/8e/df92ffb01d118aabf37df0cc1fa15a43ad9b2a99ffa546382f3aa5cef186/tf-fits-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "202ebf172f48096b281acfba7de753a5d1fd929b9bf451d5c57a47edf14862c4",
        "md5": "2ef2ef1c4aac7afbdfc298d02e0940c8",
        "sha256": "cd92bcb143c8240b2b3dcad787b5cc0239f23922d9ffb4ec4a3ad4b477ab56b6"
      },
      "downloads": -1,
      "filename": "tf_fits-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ef2ef1c4aac7afbdfc298d02e0940c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 20159,
      "upload_time": "2020-10-06T10:43:47",
      "upload_time_iso_8601": "2020-10-06T10:43:47.705746Z",
      "url": "https://files.pythonhosted.org/packages/20/2e/bf172f48096b281acfba7de753a5d1fd929b9bf451d5c57a47edf14862c4/tf_fits-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "868edf92ffb01d118aabf37df0cc1fa15a43ad9b2a99ffa546382f3aa5cef186",
        "md5": "aaeb6f7975b470b9105d09ed9b8eb903",
        "sha256": "576c48d2e1f23e77729f713d3172afa7f36bebb83600f9c9460a0617138269ec"
      },
      "downloads": -1,
      "filename": "tf-fits-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aaeb6f7975b470b9105d09ed9b8eb903",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 20429,
      "upload_time": "2020-10-06T10:43:49",
      "upload_time_iso_8601": "2020-10-06T10:43:49.928319Z",
      "url": "https://files.pythonhosted.org/packages/86/8e/df92ffb01d118aabf37df0cc1fa15a43ad9b2a99ffa546382f3aa5cef186/tf-fits-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}