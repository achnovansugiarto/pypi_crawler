{
  "info": {
    "author": "neuko.io",
    "author_email": "hello@neuko.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# Device SDK for Python\n\nThis document provides information about the Neuko SDK that can be installed as a dependency in an IoT device.\n\n## Pre-requisites\n\n1. Neuko account (sign up [here](https://auth.neuko.io/signup?client_id=30qirvopvpabg1njrdp4mt54tl&response_type=code&scope=email+openid+profile&redirect_uri=https://app.neuko.io/oauth))\n2. Defined device type schema (refer [documentation](https://neuko.io/docs/schema/))\n3. Bootstrap certificates that can downloaded after define a device type schema (step 2)\n\n\n## Device State\n\nDevice state is the condition of the hardware at any moment. Typically, the state will be watched, executed and updated under certain circumstances. You can imagine the state of a digital board as below:\n\n```json\n{\n    \"digital_input\": {\n        \"pin_0\": true,\n        \"pin_1\": false\n    },\n    \"digital_output\": {\n        \"pin_0\": true,\n        \"pin_1\": true\n    }\n}\n```\n\nThe above example tells us that the digital board has 2 states:\n1. digital input\n2. digital output\n\nAlso, each state has 2 attributes - pin 0 and pin 1.\n\nThe Neuko Python SDK works by managing the state's attributes of the device between actual physical and its virtual representation in cloud. \n\nPrior to that, the SDK supports provisioning of a new device during 1st time connection.\n\n\n## Installation\n\n### Checking minimum requirement\nThe SDK requires Python 3.6 and above.\n\n```python\npython --version\n```\n\n### Installation\n\n```python\npip install neuko-device-sdk\n```\n\n## Usage\n\n### Import package\n\n```python\nfrom neuko.device.device import Device\nfrom neuko.iot.bootstrap import BootstrapClient\nfrom neuko.iot.neuko import NeukoClient\n```\n\n### Extend DeviceIdentifierStore class\n\n```python\nclass DeviceIdentifierStoreObject(DeviceIdentifierStore):\n    def getAccountId(self) -> str:\n        return \"<Neuko Account Id>\"\n\n    def getProjectId(self) -> str:\n        return \"<Neuko Project Id>\"\n\n    def getDeviceSchemaId(self) -> str:\n        return \"<Device Serial Number / Id>\"\n\n    def getDeviceId(self) -> str:\n        return \"<Neuko Device Type Schema Id>\"\n```\n\n### Extend ConnectionStore class\n\n```python\nclass ConnectionStoreObject(ConnectionStore):\n    async def getPerpetualConnectionSettings(self, deviceIdentifier: DeviceIdentifier) -> str:\n        fd = open(\"./my-secure-directory/neuko-device-connection-settings.json\", mode=\"r\")\n        raw = json.load(fd)\n        fd.close()\n        return raw\n\n    async def savePerpetualConnectionSettings(self, deviceIdentifier: DeviceIdentifier, settings: str) -> bool:\n        fd = open(\"./my-secure-directory/neuko-device-connection-settings.json\", mode=\"w\")\n        json.dump(settings, fd)\n        fd.close()\n        return True\n\n    async def deletePerpetualConnectionSettings(self, deviceIdentifier: DeviceIdentifier) -> bool:\n        return True\n\n    async def isPerpetualConnectionSettingsExists(self, deviceIdentifier: DeviceIdentifier) -> bool:\n        return False\n}\n```\n\n### Extend CertificateStore class\n\n```python\nclass CertificateStoreObject(CertificateStore):\n\n    async def getBootstrapCertificateAuthority(self, deviceIdentifier: DeviceIdentifier) -> str:\n        return \"./my-secure-directory/certificates/cert.ca.pem\"\n\n    async def getBootstrapChainCertificate(self, deviceIdentifier: DeviceIdentifier) -> str:\n        return \"./my-secure-directory/certificates/bootstrap-certificate.pem.crt\"\n\n    async def getBootstrapPrivateKey(self, deviceIdentifier: DeviceIdentifier) -> str:\n        return \"./my-secure-directory/certificates/bootstrap-private.pem.key\"\n\n    async def getPerpetualCertificateAuthority(self, deviceIdentifier: DeviceIdentifier) -> str:\n        fd = open(\"./my-secure-directory/certificates/cert.ca.pem\", mode=\"r\")\n        raw = fd.read()\n        fd.close()\n        return raw\n\n    async def getPerpetualChainCertificate(self, deviceIdentifier: DeviceIdentifier) -> str:\n        fd = open(\"./my-secure-directory/certificates/certificate.pem.crt\", mode=\"r\")\n        raw = fd.read()\n        fd.close()\n        return raw\n\n    async def getPerpetualPrivateKey(self, deviceIdentifier: DeviceIdentifier) -> str:\n        fd = open(\"./my-secure-directory/certificates/cert.ca.pem\", mode=\"r\")\n        raw = fd.read()\n        fd.close()\n        return raw\n\n    async def savePerpetualCertificateAuthority(self, deviceIdentifier: DeviceIdentifier, certificate: str) -> None:\n        fd = open(\"./my-secure-directory/certificates/cert.ca.pem\", mode=\"w\")\n        fd.write(certificate)\n        fd.close()\n\n    async def savePerpetualChainCertificate(self, deviceIdentifier: DeviceIdentifier, certificate: str) -> None:\n        fd = open(\"./my-secure-directory/certificates/certificate.pem.crt\"\", mode=\"w\")\n        fd.write(certificate)\n        fd.close()\n\n    async def savePerpetualPrivateKey(self, deviceIdentifier: DeviceIdentifier, certificate: str) -> None:\n        fd = open(\"./my-secure-directory/certificates/cert.ca.pem\", mode=\"w\")\n        fd.write(certificate)\n        fd.close()\n```\n\n### Create Device class instance\n\n```python\ndevice = Device(DeviceIdentifierStoreObject(), ConnectionStoreObject(), CertificateStoreObject())\ndevice.start_threadsafe()\n```\n\n## Methods\n\n### start()\nThis function start the SDK or in other words starts the virtual/twin of the device. The function also provisions the device with Neuko registry if it is yet to be registered.\nA provisioned device will stay in its perpetual state.\n\n**Important**\nOnly called this function after you have registered (by useEffect method) the handler to be invoked when any of the telemetric state has any changed request.\n\n### useEffect(context, listener, stateName: str, attributeTree: str = \"*\")\nUse effect attaches a listener or function handler to any state's attributes. The parameters details are as below:\n\n1. context - Class or any object of context. (eg. this)\n\n2. Function that will be invoked when the value of interest attribute changed. The function must return true if the process success. Otherwise return false.\n\n3. stateName - the name of the state.\n\n4. attributeTree - Dot notation representing state attribute. For example, if you have state as below\n\n```json\n{\n    \"state_name_1\": {\n        \"attr_0\": true,\n        \"attr_1\": {\n            \"deep_attr_0\": false\n        }\n    }\n}\n```\n\nThe *deep_attr_0* tree is **attr_1.deep_attr_0**\n\n\nExample\n\n```python\ndef callback(data: TelemetricStateChangeParameter):\n    logging.debug(f'data: {data}')\n    return True\n\ndevice.useEffect(self, callback, \"digital_input\", \"pin_0\")\ndevice.useEffect(self, callback, \"digital_input\", \"pin_1\")\n\n// or use wildcard to invoke the listener for any attribute\ndevice.useEffect(self, callback, \"digital_input\", \"*\");\n```\n\n### updateTelemetricState(stateName: string, value: object)\nCall this function when the state of actual device changed. The function will synchronize with its virtual/twin on cloud.\n\nExample\n\n```python\ndevice.updateTelemetricState(\"digital_output\", {\n    \"pin_0\": false,\n    \"pin_1\": false,\n})\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "iot,device,thing,cloud,mqtt,development,neuko",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neuko-device-sdk",
    "package_url": "https://pypi.org/project/neuko-device-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/neuko-device-sdk/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/neuko-device-sdk/1.1.0/",
    "requires_dist": [
      "aiodns",
      "aiohttp",
      "cchardet",
      "paho-mqtt",
      "pydash",
      "python-dotenv",
      "transitions"
    ],
    "requires_python": "",
    "summary": "Neuko device SDK for Python hardware",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15911818,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98cd2c30ab514f178498d594be0ee9f02033808b2e171626cd0da32df0b4a51b",
          "md5": "d5e3ebc0e8259786166f853ecee5904c",
          "sha256": "5691d6f7a1551e7f177115e54913784f8a516a3bebb2217dcf97578025c386cc"
        },
        "downloads": -1,
        "filename": "neuko_device_sdk-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5e3ebc0e8259786166f853ecee5904c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31891,
        "upload_time": "2022-03-14T04:20:33",
        "upload_time_iso_8601": "2022-03-14T04:20:33.356890Z",
        "url": "https://files.pythonhosted.org/packages/98/cd/2c30ab514f178498d594be0ee9f02033808b2e171626cd0da32df0b4a51b/neuko_device_sdk-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3931dd49238b316ffa1e598d0779b513ecb49d6f20fc79210b7a817ee01705e",
          "md5": "63130759024fd8ceb168dccedeafd4e0",
          "sha256": "dc382ab3bd155baefdd5f74c0dd27e090539dd98e70e48a6e856500b6106f41b"
        },
        "downloads": -1,
        "filename": "neuko-device-sdk-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "63130759024fd8ceb168dccedeafd4e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26858,
        "upload_time": "2022-03-14T04:20:35",
        "upload_time_iso_8601": "2022-03-14T04:20:35.706668Z",
        "url": "https://files.pythonhosted.org/packages/d3/93/1dd49238b316ffa1e598d0779b513ecb49d6f20fc79210b7a817ee01705e/neuko-device-sdk-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da64fb892437bb190f6b3d1d5d159700e200187b161a0675a254a885d5b84e07",
          "md5": "2665f61f5fcfb88291148344c0f0784a",
          "sha256": "d641a7ab98d19c446e1e353c82918146bef0a2822da4d80572f725f4625bae3c"
        },
        "downloads": -1,
        "filename": "neuko_device_sdk-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2665f61f5fcfb88291148344c0f0784a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34292,
        "upload_time": "2022-11-28T09:21:39",
        "upload_time_iso_8601": "2022-11-28T09:21:39.560028Z",
        "url": "https://files.pythonhosted.org/packages/da/64/fb892437bb190f6b3d1d5d159700e200187b161a0675a254a885d5b84e07/neuko_device_sdk-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca631b915fedaafcbbe697af62123b6e7ee4efe3eea2ae046dcf262d6f95d6c9",
          "md5": "783378713bb83aee88e4a762caf5f016",
          "sha256": "fdcdabcc1d48eaeba07d488dee81a02ad6c3d56fc83ae38af8b8fe940df551e3"
        },
        "downloads": -1,
        "filename": "neuko-device-sdk-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "783378713bb83aee88e4a762caf5f016",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28748,
        "upload_time": "2022-11-28T09:21:44",
        "upload_time_iso_8601": "2022-11-28T09:21:44.017007Z",
        "url": "https://files.pythonhosted.org/packages/ca/63/1b915fedaafcbbe697af62123b6e7ee4efe3eea2ae046dcf262d6f95d6c9/neuko-device-sdk-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da64fb892437bb190f6b3d1d5d159700e200187b161a0675a254a885d5b84e07",
        "md5": "2665f61f5fcfb88291148344c0f0784a",
        "sha256": "d641a7ab98d19c446e1e353c82918146bef0a2822da4d80572f725f4625bae3c"
      },
      "downloads": -1,
      "filename": "neuko_device_sdk-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2665f61f5fcfb88291148344c0f0784a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34292,
      "upload_time": "2022-11-28T09:21:39",
      "upload_time_iso_8601": "2022-11-28T09:21:39.560028Z",
      "url": "https://files.pythonhosted.org/packages/da/64/fb892437bb190f6b3d1d5d159700e200187b161a0675a254a885d5b84e07/neuko_device_sdk-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca631b915fedaafcbbe697af62123b6e7ee4efe3eea2ae046dcf262d6f95d6c9",
        "md5": "783378713bb83aee88e4a762caf5f016",
        "sha256": "fdcdabcc1d48eaeba07d488dee81a02ad6c3d56fc83ae38af8b8fe940df551e3"
      },
      "downloads": -1,
      "filename": "neuko-device-sdk-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "783378713bb83aee88e4a762caf5f016",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28748,
      "upload_time": "2022-11-28T09:21:44",
      "upload_time_iso_8601": "2022-11-28T09:21:44.017007Z",
      "url": "https://files.pythonhosted.org/packages/ca/63/1b915fedaafcbbe697af62123b6e7ee4efe3eea2ae046dcf262d6f95d6c9/neuko-device-sdk-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}