{
  "info": {
    "author": "Job Veldhuis",
    "author_email": "job@baukefrederik.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# python-qr-code-generator-api\nA simple Python wrapper for the API of qr-code-generator.com, which is used to generate QR codes with certain design elements.\n\n## Why this API wrapper?\nFirst of all, because I needed it and also because this API is not really [well documented](https://www.qr-code-generator.com/qr-code-api/). This wrapper provides a quick and easy way to connect to the API and request images, with a minimal amount of coding or effort. Just import the module, write a couple lines of easily understandable code and start generating these amazing QR codes.\n\n## Table of Contents\n  * [Features](#features)\n    + [Configure to fit your own needs](#configure-to-fit-your-own-needs)\n    + [Change all possible QR code options](#change-all-possible-qr-code-options)\n    + [Automatically save QR codes](#automatically-save-qr-codes)\n  * [Usage](#usage)\n    + [Command Line Interface](#command-line-interface)\n      - [CLI Example](#cli-example)\n    + [Use it in your own code](#use-it-in-your-own-code)\n      - [Example of using it in your own code](#example-of-using-it-in-your-own-code)\n  * [Authentication](#authentication)\n    + [Environment variables](#environment-variables)\n    + [Hardcoded in your own code](#hardcoded-in-your-own-code)\n  * [Presets](#presets)\n    + [The easiest code](#the-easiest-code)\n  * [Limitations](#limitations)\n  \n## Features\n### Configure to fit your own needs\nWhile we have the wrapper set up in a way that allows for quick usage of the API, we understand that sometimes you just need it to test an absurd scenario or that you want to change output folders. With the configuration file, you are the boss. Even better: you don't necessarily have to change the configuration file to work for you. If you want, you can just use code to update configuration variables and run a request. This way, your configuration is limited to your own code.\n\n### Change all possible QR code options\nThis wrapper provides an easy way to update QR options. Just set the dictionary variable to a new value, and it will automatically be taken into account when generating a code.\n\n### Automatically save QR codes\nThe wrapper takes the API response and automatically turns it into a saved image in the desired output location. Do we need to say more?\n\n## Usage\nThe wrapper was developed with ease of use in mind. This means that one can either, directly call the module to perform a request, or code their own Python scripts and import the module.\n\n### Command Line Interface\nTo perform a request via the command line, simply ```$ python3 qr_code_generator``` with flags to specify your needs. The following flags are supported: \n* --token {api access token here} (short: -t)\n* --load {path to yaml file to load settings from} (short: -l)\n* --output {name for output file} (short: -o)\n* --bulk {amount to bulk generate} (short: -b)\n* --verbose (short -v)\n\n#### CLI Example\nThe following code will request 5 QR-codes for token ```apijob```, with name: ```test-qr-<number>``` and load a configuration file called ```config.yaml```. It will also log all events:\n```\n$ python3 qr_code_generator --token apijob --output test-qr --bulk 5 --load config.yaml --verbose\n```\n\n### Use it in your own code\nTo use the api and its settings in your code, import it with:\n```from qr_code_generator import QrGenerator```\nThen create an instance of QrGenerator:\n```api = QrGenerator()```\nAdjust settings as you like by altering ```api.settings``` and ```api.options```, and call ```api.request()``` to request a QR code be generated by api.\n\n#### Example of using it in your own code\nThe following code will request a QR-code for token ```apijob```, with name: ```test-qr```, but before that it will load a configuration file called ```config.yaml```. It will also make sure to log all events:\n```python\nfrom qr_code_generator import QrGenerator\n\napi = QrGenerator('apijob')\napi.load('config.yaml')\napi.config['VERBOSE'] = True\napi.output_filename = 'test-qr'\napi.request()\n```\n\n## Authentication\nThere are three possible ways to authenticate with the API. Authentication is done on a token basis. A token can be generated [on this webpage](https://app.qr-code-generator.com/api/). The three ways are (based from most safe to least safe, and thus least preferred):\n\n### Environment variables\nThe safest way to authenticate, is by using environment variables. This starts by exporting your access key to an environment variable with ```$ export ACCESS_TOKEN=<your token here>```. After this, feel free to create an instance of QrGenerator by just calling the class as ```api = QrGenerator()```. The token will automatically be fetched from the environment.\n\n### Hardcoded in your own code\nA little bit less safe, because what if you accidentally commit your code with the token in it, or what if someone finds a readable portion of your code? If you choose to go down this route, understand that there are certain risks involved, but it can be done. There are two ways to put the token in your own code.\n1. Either make sure you call the QrGenerator class with a token parameter, as such: ```api = QrGenerator(<your token here>)```. This will fetch the token from your code and add it to the query.\n2. Or set it later in your code, by using the set function: ```QrGenerator.set('access-token', <your token here>)```.\n\nWhen ```QrGenerator.request()``` is called and the API token has not been set and the configuration file has not been altered, a custom Exception will be thrown: ```MissingRequiredParameterError```. This is because the API will directly return an InvalidCredentialsError regardless. If the configuration file has been changed, you might encounter a ```InvalidCredentialsError```. Either way, it will not work.\n\n## Presets\nNot everyone loves coding. We are currently moving more and more to a world in which nocode is the standard for big groups of people, there is a way to load settings from a yaml file to the api, without you having to do any coding. Copy the settings-template.yaml template in /templates/ to your main directory and make the necessary changes. You can change both values for options and config. They will be automatically loaded and generation will take place.\n> You can load with the load flag (described above), but you can also call api.load(filename.yaml) to load it in your own code. This will even further reduce the amount of Python necessary to generate a QR code.\n\n### The easiest code\n```python\nfrom qr_code_generator import QrGenerator\n\napi = QrGenerator()\napi.load(file.yaml)\napi.request()\n```\n\n## Limitations\nIt is currently not possible to generate bulk qr-codes in your own code, without creating your own loop. This is by design, since we want to give all users the opportunity to do with bulk generation what they wish to do. The simplest way to request 5 codes would be:\n```python\nfrom qr_code_generator import QrGenerator\n\napi = QrGenerator()\nfile = 'output-filename'\nfor i in range(1, 6):\n    api.output_filename = f'{file}-{i}'\n    api.request()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jobveldhuis/python-qr-code-generator-api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qr-code-generator-api",
    "package_url": "https://pypi.org/project/qr-code-generator-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/qr-code-generator-api/",
    "project_urls": {
      "Homepage": "https://github.com/jobveldhuis/python-qr-code-generator-api"
    },
    "release_url": "https://pypi.org/project/qr-code-generator-api/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python wrapper for qr-code-generator.com API",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7868456,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0511eab206606975355233978fa711f366c9142554ab6094e6016a936a4f0aa1",
          "md5": "616266d1be98ce9c5d24eee9c252c3fc",
          "sha256": "7be7f1d465333a93324749fe6a560b715525f59ad79bf822ec85c24bbf501110"
        },
        "downloads": -1,
        "filename": "qr_code_generator_api-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "616266d1be98ce9c5d24eee9c252c3fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12311,
        "upload_time": "2020-07-31T11:09:22",
        "upload_time_iso_8601": "2020-07-31T11:09:22.583772Z",
        "url": "https://files.pythonhosted.org/packages/05/11/eab206606975355233978fa711f366c9142554ab6094e6016a936a4f0aa1/qr_code_generator_api-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad23241a5f1c448ad2cdd568b53b5e4e32db751554cf678de7120af5f6533c63",
          "md5": "794161263bb0363b264e17e1bd3e8a80",
          "sha256": "f7394df92b2eda05dd65ea27bbda74f7e3e42e9735a652667528106f9a457d3c"
        },
        "downloads": -1,
        "filename": "qr_code_generator_api-0.1.1.macosx-10.14-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "794161263bb0363b264e17e1bd3e8a80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15566,
        "upload_time": "2020-07-31T11:21:39",
        "upload_time_iso_8601": "2020-07-31T11:21:39.024837Z",
        "url": "https://files.pythonhosted.org/packages/ad/23/241a5f1c448ad2cdd568b53b5e4e32db751554cf678de7120af5f6533c63/qr_code_generator_api-0.1.1.macosx-10.14-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a4270ecf04e050c5f02f6ad274013381e70f67c78cd24ec11df2305c83cbeb1",
          "md5": "245c9e248ed60adcc11435575459fd48",
          "sha256": "62ca213720317f4c6f3c4629009597d747bb631ec62ff4744aa07fa289dfbfcb"
        },
        "downloads": -1,
        "filename": "qr_code_generator_api-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "245c9e248ed60adcc11435575459fd48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12451,
        "upload_time": "2020-08-02T22:12:47",
        "upload_time_iso_8601": "2020-08-02T22:12:47.793335Z",
        "url": "https://files.pythonhosted.org/packages/2a/42/70ecf04e050c5f02f6ad274013381e70f67c78cd24ec11df2305c83cbeb1/qr_code_generator_api-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a4270ecf04e050c5f02f6ad274013381e70f67c78cd24ec11df2305c83cbeb1",
        "md5": "245c9e248ed60adcc11435575459fd48",
        "sha256": "62ca213720317f4c6f3c4629009597d747bb631ec62ff4744aa07fa289dfbfcb"
      },
      "downloads": -1,
      "filename": "qr_code_generator_api-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "245c9e248ed60adcc11435575459fd48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12451,
      "upload_time": "2020-08-02T22:12:47",
      "upload_time_iso_8601": "2020-08-02T22:12:47.793335Z",
      "url": "https://files.pythonhosted.org/packages/2a/42/70ecf04e050c5f02f6ad274013381e70f67c78cd24ec11df2305c83cbeb1/qr_code_generator_api-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}