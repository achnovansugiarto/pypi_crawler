{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Installation\n```\npip install json-converter\n```\n# Usage\n```\nfrom json_converter.json_mapper import JsonMapper\n```\n\n# JSON Mapping\n\nThe `JsonMapper` class is a tool for translating/converting a JSON document into another JSON document with a \ndifferent structure. The mapping process follows a dictionary-based specification of how fields map to the new \nJSON format. The main function in the `JsonMapper` is `map` that takes a structured specification:\n\n        JsonMapper(json_document).map(specification)\n\n\n## Mapping Specification\n\nThe general idea is that the specification describes the resulting structure of the converted JSON document. The\ndictionary-based specification will closely resemble the schema of the resulting JSON.\n\n### Field Specification\n\nA field specification is defined by a list of parameters, the first of which is a name that refers to a field in \nthe current JSON to be converted. This is the only required field.\n\n        <converted_field>: [<original_field>]\n\nFor example, given the sample JSON document,\n\n        {\n            \"person_name\": \"Juan dela Cruz\"\n            \"person_age\": 37 \n        }\n\nthe simplest mapping that can be done is to translate to a different field name. For example, to map \n`person_name` to `name` in the resulting JSON, the following specification is used:\n\n        {\n            'name': ['person_name']\n        }\n\n#### Field Chaining\n\nJSON mapping also supports chaining of fields on either or both side of the specification. For example, using the\nfollowing specification to the JSON above,\n\n        {\n            'person.name': ['person_name'],\n            'person.age': ['person_age']\n        }\n\n will result in the conversion:\n\n        {\n            \"person\": {\n                \"name\": \"Juan dela Cruz\",\n                \"age\": 37\n            }\n        }\n\n To convert back to the original JSON in the example, just reverse the field specification, for example, \n`'person_name': ['person.name']`. Field chaining can be done on multiple levels. However, at the time of writing, \n`JsonMapper` does not support direct field chaining for JSON array types. Processing such fields can be expressed \nthrough [anchoring](#anchoring) and [nesting](#nested-specification).\n\n#### Post-Processing Using Generic Functions\n\nThe JSON mapper allows post processing of field values for more complex translation rules. This is done by \nspecifying a generic Python function that takes an arbitrary list of arguments (`*args`). The post-processing \nfunction is specified after the original field name in the field specification:\n\n        <converted_field>: [<original_field>, <post_processor>{, <args>}*]\n\n`JsonMapper` will pass the value of the specified field as the first argument to the post-processor. Taking the \nsame example in the previous section, a boolean field `adult` can be added using this feature. The following spec\ndemonstrates how this can be done:\n\n        {\n            'name': ['person_name'],\n            'age': ['person_age'],\n            'adult': ['person_age', is_adult]\n        }\n\nwith the post-processor defined as:\n\n        def is_adult(*args):\n            age = args[0]\n            return age >= 18\n\nAt the time of writing, there are a few built-in post-processors that can be applied to some common use-cases like\ndefaulting values (`default_to`), concatenating lists (`concatenate_list`), etc. These can be found in \n`post_process.py` module.\n\n### Anchoring\n\nWhile the `JsonMapper` has support for field chaining, for complex JSON with several levels of nesting, \ncombined with long field names and field list, repetitively providing full field chain can be tedious. To be able\nto express this more concisely, anchoring can be used. Anchoring specifies the root of the JSON structure to \nmap to a new JSON format, relative to the actual root of the original JSON document.\n\n#### The `on` Parameter\n\nThe `map` function in the `JsonMapper` takes a parameter named `on` that can be used to specify the root of the\nJSON on which to start mapping. For example, given the following JSON,\n\n        {\n            \"user\": {\n                \"settings\": {\n                    \"basic\": {...},\n                    \"advanced\": {\n                        \"security\": {\n                            \"javascript_enabled\": true,\n                            \"allow_trackers\": false\n                        }\n                    }\n                }\n            }\n        }\n\n the processing can be anchored on `user.settings.advanced.security` to translate the security settings. The\n following specification,\n\n        {\n            'javascript': ['javascript_enabled'],\n            'trackers': ['allow_trackers']\n        }\n\napplied to the JSON above using `map(specification, on='user.settings.advanced.security')`, will result in,\n\n        {\n            \"javascript\": true,\n            \"trackers\": false\n        }\n\nWithout the anchor, it's necessary to always include `user.settings.advanced.security` in the field specification,\nso the `javascript` mapping would look like `'javascript': ['user.settings.advanced.security.javascript_enabled']`.\n\n#### The `$on` Specification\n\nAnother way of specifying the anchoring field is by directly adding it to the specification using the `$on`\nkeyword. Unlike field specifications, the `$on` keyword takes a plain string and *not* a list/vector. For \nexample, the previous sample specification can be alternatively expressed as,\n\n        {\n            '$on': 'user.settings.advanced.security',\n            \"javascript\": ['javascript_enabled'],\n            \"trackers\": ['allow_trackers']\n        } \n\nUsing this specification, the mapping can be invoked without the `on` parameter. Keywords in specifications are, \nat the time of writing, case-sensitive, so `$On`, `$ON`, etc. are *not* recognised.\n\n#### Chaining `on` and `$on`\n\nThe `on` parameter and the `$on` keyword do **not** override, but instead are chained together. The existence\nof both during a mapping call results in the `$on` field chain being concatenated to the value provided in \nthrough the `on` parameter. For example, the following invocation is equivalent to the previous two above:\n\n        map({\n            '$on': 'advanced.security',\n            \"javascript\": true,\n            \"trackers\": false\n        }, on='user.settings')\n\nThe `user.settings` field supplied through `on` parameter will be treated as a prefix to the `advanced.security`\nfield specified through the `$on` keyword.\n\n### Nested Specification\n\nAside from field specifications, nested dictionary-like specification can be provided to any recognised fields in\nthe root specification. Nesting is useful for expressing nesting on single objects, or for applying conversion\nto a list of JSON objects defined in an array.\n\n#### Single Object Nesting\n\nFor single objects, nested specs can be defined to look like the resulting JSON object. Nesting specification this\nway is a more expressive alternative to [field chaining that was demonstrated above](#field-chaining). For example, \nthe following JSON, similar to the previous sections,\n\n        {\n            \"person_name\": \"Jane Eyre\",\n            \"person_age\": 30\n        }\n\ncan be mapped using nested specification defined with a nested `person` object:\n\n        {\n            'person': {\n                'name': ['person_name'],\n                'age': ['person_age']\n            }\n        }\n\n[Anchoring](#anchoring) in nested specifications is also supported. However, unlike anchors in the main specification\nthat can be expressed through the `on` parameter, nested anchors can only be specified using the `$on` keyword. It is \nalso important to note that nested anchors are defined relative to the parent specification. For example, the following\nJSON,\n\n        {\n            \"product_info\" {\n                \"manufacturing\": {\n                    \"location\": \"Cambridge, UK\", \n                    \"manufacturing_date\": \"2020-03-05\",\n                    \"best_by_date\": \"2020-09-05\"\n                }\n            }\n        }\n\ncan be mapped using the following nested specification,\n\n        {\n            '$on': 'product_info',\n            'production': {\n                '$on': 'manufacturing',\n                'date': ['manufacturing_date']\n            }\n        }\n\nThis mapping will result in the following JSON:\n\n        {\n            \"production\": {\n                \"date\": \"2020-03-05\"\n            }\n        }\n\n### Applying Specification to JSON Arrays\n\nThe JSON mapping utility can distinguish between JSON object nodes and JSON array, and applies specification \naccordingly. When it determines that a field referred to by the specification is a collection of JSON objects, it\napplies the rules to each one of them iteratively. Note, however, that, as earlier mentioned in this document, using \nfield chaining to refer to nested JSON array is *not* supported at this time. To apply specifications to JSON arrays, \nthey need to be explicitly [anchored](#anchoring) if they are nested within the original JSON document.\n\nTo illustrate, the following JSON object,\n\n        {\n            \"books\": [\n                {\n                    \"title\": \"A Python Book\",\n                    \"price\": 23.75\n                },\n                {\n                    \"title\": \"A Novel\",\n                    \"price\": 7.99\n                },\n                {\n                    \"title\": \"Compilation of Fun Stuff\",\n                    \"price\": 10.10\n                }\n            ]\n        }\n\ncan be translated using the following specification (assume `translate` and `convert` are defined; see \n[post-processing](#post-processing-using-generic-functions) for more information on this),\n\n        {\n            '$on': 'books',\n            'titulo': ['title', translate, 'es'],\n            'precio': ['price', convert, 'eur']\n        }\n\nNotice that, since the specification is anchored to the `books` node, only the list of field specifications are \ndefined. Specifications applied to multiple objects this way are expressed as if it applies to a single object. This \nsample translation will return an array of JSON objects and *not* a JSON object containing an array. If a nested array \nis desired, the specification above can be nested instead:\n\n        {\n            'libros': {\n                '$on': 'books',\n                'titulo': ['title', translate, 'es'],\n                'precio': ['price', convert, 'eur']\n            }\n        }\n\n#### Filtering\n\nWhen working on collections of data, it is sometimes required to only process some based on some criteria. For \n`JsonMapper`, this is done by using filtering in the specification. Filters take the form of a field specification\nwith the second argument being a boolean function, also called a predicate.\n\n        '$filter': [<original_field>, <predicate_function>{, args}*]\n\nJust like in generic functions for [post-processing](#post-processing-using-generic-functions), `JsonMapper` will pass\nthe value of found in the `original_field` as the first parameter along with the rest of `args` if they exist.\n\nFor example, to process only books whose prices are above 10.00 from the sample books JSON above, the following spec \ncan be used:\n\n        {\n            'expensive_books': {\n                '$on': 'books',\n                '$filter': ['price', greater_than, 10],\n                'book_title': ['title'],\n                'book_price': ['price']\n            }\n        }\n\nwith the predicate `greater_than` defined as,\n\n        def greater_than(*args):\n            number = args[0]\n            other_number = args[1]\n            return number > other_number\n\nWhile filtering can be applied to single JSON nodes, the application can be limited. Any JSON object filtered out, will\nappear as an empty JSON object in the resulting document.\n\n### JSON Literals\n\nThere are situations when the resulting JSON need to contain fields and values outside the scope of the source JSON\ndocument. In such cases, it's possible to define a post-processor that plugs-in a pre-defined dictionary-like or list\nstructure. However, `JsonMapper` also provides support for including literals in the specification.\n\n#### Using Keywords\n\nAs mentioned above, there are 2 types of node that can be used for adding predefined values into the specification, \nwhich are object, and array. To specify a JSON object literal as field value in the resulting JSON document, the\n`$object` keyword is used with a dictionary-like structure:\n\n        <field_name>: ['$object', <object_value>]\n\nFor example:\n\n        'metadata': ['$object', {\n            'date_created': '2020-03-13',\n            'author': 'Jane Doe'\n        }]\n\nFor collections or list of JSON objects, the `'$array'` is used instead:\n\n        <field_name>: ['$array': <list>]\n\nFor example:\n\n        'authors': ['$array', [\n            {\n                'name': 'Peter Z',\n                'institution': 'Some University'\n            },\n            {\n                'name': 'Mary Q',\n                'institution': 'Some Research Institute'\n            }\n        ]]\n\n\n#### Convenience Methods\n```\nfrom json_converter.json_mapper import json_object, json_array\n```\nFor convenience, the `json_mapper` module makes available 2 helper methods that allow easy inclusion of JSON \npredefined JSON nodes into the specification. These are `json_object` for JSON objects, and `json_array` for \nJSON arrays. `json_object` expects a dictionary-like structure as an input. \n\nFor example, the previous example can be expressed as the following:\n\n        'metadata': json_object({\n            'date_created': '2020-03-13',\n            'author': 'Jane Doe'\n        })\n\nThe `json_array` method treats argument list as a list of JSON objects. For example:\n\n        'authors': json_array(\n            {\n                'name': 'Peter Z',\n                'institution': 'Some University'\n            },\n            {\n                'name': 'Mary Q',\n                'institution': 'Some Research Institute'\n            }\n        )\n\n Note that any list literal provided within the `json_array` method is treated as a single object. For instance, the\n call `json_array([{'object_id': 123}, {'object_id': 456}])` has *one* item in the resulting list of list.\n\n\n#### More complex objects inside $array and $object\n\nThe object inside the $array or $object spec can now have values which can be sourced from the source object if the third boolean parameter boolean (`contains_spec`) is set to True\n\nGiven the following source object:\n```\nsource_object = {\n                    'name': 'Peter Z',\n                    'institution': 'Some University',\n                    'address': 'Some place'\n                }\n```\n\nUsing the mapping:\n\n```\nfrom json_converter.json_mapper import JsonMapper\nfrom json_converter.post_process import default_to\n\njson_mapper = JsonMapper(source_object)\n\nvalues = [\n            {\n                'key': ['', default_to, 'name'],\n                'value': ['name']\n\n            },\n            {\n                'key': ['', default_to, 'institution'],\n                'value': ['institution']\n\n            },\n            {\n                'key': ['', default_to, 'address'],\n                'value': ['address']\n\n            },\n        ]\n\nresult = json_mapper.map({\n            'attributes': ['$array', values, True]\n        })\n\n```\n\n\n```\n# result contains\n{\n    'attributes':[\n        {\n            'key': 'name',\n            'value': 'Peter Z'\n        },\n        {\n            'key': 'institution',\n            'value': 'Some University'\n        },\n        {\n            'key': 'address',\n            'value': 'Some place'\n        }\n    ]\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ebi-ait/json-converter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "json-converter",
    "package_url": "https://pypi.org/project/json-converter/",
    "platform": "",
    "project_url": "https://pypi.org/project/json-converter/",
    "project_urls": {
      "Homepage": "https://github.com/ebi-ait/json-converter"
    },
    "release_url": "https://pypi.org/project/json-converter/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "json-converter is a tool for translating/converting a JSON document into another JSON document with a different structure.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14799739,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12aa6041678bf39656b05b7f02942e9c0d8cba6faaf1e923f02537671d17e8e9",
          "md5": "51061feb4dfdee3f551a787b24a28d83",
          "sha256": "228d005ac4ef494deaa927dfef064388473dd6274806a05a2a7cba33fd8d75ee"
        },
        "downloads": -1,
        "filename": "json_converter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51061feb4dfdee3f551a787b24a28d83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8175,
        "upload_time": "2021-01-12T12:29:20",
        "upload_time_iso_8601": "2021-01-12T12:29:20.339832Z",
        "url": "https://files.pythonhosted.org/packages/12/aa/6041678bf39656b05b7f02942e9c0d8cba6faaf1e923f02537671d17e8e9/json_converter-0.1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "043fbc3e41c5bbe78acac62c1c02aee6265b307bcfe63e14d90a5001bfad93dd",
          "md5": "1a553cd229a9732fa41fcb2293968f2c",
          "sha256": "95055e6c70bd7ae6e77c730b5795deb9ea857bca8f5bbced423b22ee026b34d3"
        },
        "downloads": -1,
        "filename": "json-converter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a553cd229a9732fa41fcb2293968f2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9903,
        "upload_time": "2021-01-12T12:29:21",
        "upload_time_iso_8601": "2021-01-12T12:29:21.506414Z",
        "url": "https://files.pythonhosted.org/packages/04/3f/bc3e41c5bbe78acac62c1c02aee6265b307bcfe63e14d90a5001bfad93dd/json-converter-0.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "pre-release"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a859876ef3c9cce3e07f19f01f199fec1f69ab74ee4aead60cb0e6c475e15086",
          "md5": "6e963a0db3f40f85b5e8c8d1f445a9ed",
          "sha256": "40e97406719164f820aa5080ea07ab01e833b6dfacd96eb64192b799e76463ad"
        },
        "downloads": -1,
        "filename": "json_converter-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e963a0db3f40f85b5e8c8d1f445a9ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10739,
        "upload_time": "2021-01-22T09:45:37",
        "upload_time_iso_8601": "2021-01-22T09:45:37.433777Z",
        "url": "https://files.pythonhosted.org/packages/a8/59/876ef3c9cce3e07f19f01f199fec1f69ab74ee4aead60cb0e6c475e15086/json_converter-0.2.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "998a410e5f40d4d6e56f3e3df3236067ced1410b67baa65aea4926b05dc4bae4",
          "md5": "45699b37d5c272322bcac9c502d16ede",
          "sha256": "82bba0a70e1171c283310da7eada7e14cf5acff6b89431c139176653bcbf928c"
        },
        "downloads": -1,
        "filename": "json-converter-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45699b37d5c272322bcac9c502d16ede",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12871,
        "upload_time": "2021-01-22T09:45:38",
        "upload_time_iso_8601": "2021-01-22T09:45:38.268550Z",
        "url": "https://files.pythonhosted.org/packages/99/8a/410e5f40d4d6e56f3e3df3236067ced1410b67baa65aea4926b05dc4bae4/json-converter-0.2.0.tar.gz",
        "yanked": true,
        "yanked_reason": "pre-release"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66996cf24da7c663c33972e92c11a81758c0e066c4008764855f0bb99b0122b1",
          "md5": "f7b54b1a0d23a4da2f6115351b2f6ce2",
          "sha256": "77a81176048f9f4343bdffa431fa5ba8639864e2f5b6e3c10d3be6bd5dca6c7b"
        },
        "downloads": -1,
        "filename": "json_converter-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b54b1a0d23a4da2f6115351b2f6ce2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10725,
        "upload_time": "2021-01-26T09:48:44",
        "upload_time_iso_8601": "2021-01-26T09:48:44.479068Z",
        "url": "https://files.pythonhosted.org/packages/66/99/6cf24da7c663c33972e92c11a81758c0e066c4008764855f0bb99b0122b1/json_converter-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a542bb702171c5ce11347add238ba5cc47e32d4ea15d7796c7e2eeca1a905fc1",
          "md5": "d3785f9a4daec78d70bce43af53a3b8b",
          "sha256": "8e4c1f7839d10748a0751c2fa3268f77533647f0531da2afccee9d26c9f53e4a"
        },
        "downloads": -1,
        "filename": "json-converter-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d3785f9a4daec78d70bce43af53a3b8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12869,
        "upload_time": "2021-01-26T09:48:45",
        "upload_time_iso_8601": "2021-01-26T09:48:45.766905Z",
        "url": "https://files.pythonhosted.org/packages/a5/42/bb702171c5ce11347add238ba5cc47e32d4ea15d7796c7e2eeca1a905fc1/json-converter-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "966ef2d7ccf7aa81b66e431ce99673e52dd31b8e4df94805fb7b94ccfc68a328",
          "md5": "2c941fc1dd34208e29c87c87827b108f",
          "sha256": "6a8d22c2913c67c694e35a71b170bac22966f60445237f13766fc82ac762c10c"
        },
        "downloads": -1,
        "filename": "json_converter-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c941fc1dd34208e29c87c87827b108f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11161,
        "upload_time": "2021-02-16T16:03:24",
        "upload_time_iso_8601": "2021-02-16T16:03:24.803722Z",
        "url": "https://files.pythonhosted.org/packages/96/6e/f2d7ccf7aa81b66e431ce99673e52dd31b8e4df94805fb7b94ccfc68a328/json_converter-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d67c7b4379c8c80c311dd59447dc974e4dda07020218f7b0ffaf4abb48881b5c",
          "md5": "95f40ad37de1808bea16b81cd443cf49",
          "sha256": "0586a23fa61be395b121962c1854e5d0bbc77b622c7e03238858ec3e21bfa554"
        },
        "downloads": -1,
        "filename": "json-converter-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95f40ad37de1808bea16b81cd443cf49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13715,
        "upload_time": "2021-02-16T16:03:25",
        "upload_time_iso_8601": "2021-02-16T16:03:25.972486Z",
        "url": "https://files.pythonhosted.org/packages/d6/7c/7b4379c8c80c311dd59447dc974e4dda07020218f7b0ffaf4abb48881b5c/json-converter-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "077255650badacea0c21da10a23949f695af4d034987c2c3ca85fb675a7c9707",
          "md5": "93d29815eb05411006342ee08bfcbabf",
          "sha256": "e832e3ce9c3f6e3b566edc24085246637f21aec1ee09cdffb7592f9d33ebefb3"
        },
        "downloads": -1,
        "filename": "json_converter-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93d29815eb05411006342ee08bfcbabf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8742,
        "upload_time": "2021-05-13T13:41:46",
        "upload_time_iso_8601": "2021-05-13T13:41:46.455282Z",
        "url": "https://files.pythonhosted.org/packages/07/72/55650badacea0c21da10a23949f695af4d034987c2c3ca85fb675a7c9707/json_converter-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b49bda960db8b5c7c2dbdb79a77b4b1d380d3d7d680e37cef9ce3442409a34f",
          "md5": "b8178ba4104db37ca3d51b2c88158281",
          "sha256": "e2898c590c01ebba3d0c69f7ea6f5fa2f09b66b0703a59311b7ad4553acfda66"
        },
        "downloads": -1,
        "filename": "json-converter-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8178ba4104db37ca3d51b2c88158281",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13814,
        "upload_time": "2021-05-13T13:41:48",
        "upload_time_iso_8601": "2021-05-13T13:41:48.046361Z",
        "url": "https://files.pythonhosted.org/packages/6b/49/bda960db8b5c7c2dbdb79a77b4b1d380d3d7d680e37cef9ce3442409a34f/json-converter-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "077255650badacea0c21da10a23949f695af4d034987c2c3ca85fb675a7c9707",
        "md5": "93d29815eb05411006342ee08bfcbabf",
        "sha256": "e832e3ce9c3f6e3b566edc24085246637f21aec1ee09cdffb7592f9d33ebefb3"
      },
      "downloads": -1,
      "filename": "json_converter-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93d29815eb05411006342ee08bfcbabf",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8742,
      "upload_time": "2021-05-13T13:41:46",
      "upload_time_iso_8601": "2021-05-13T13:41:46.455282Z",
      "url": "https://files.pythonhosted.org/packages/07/72/55650badacea0c21da10a23949f695af4d034987c2c3ca85fb675a7c9707/json_converter-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b49bda960db8b5c7c2dbdb79a77b4b1d380d3d7d680e37cef9ce3442409a34f",
        "md5": "b8178ba4104db37ca3d51b2c88158281",
        "sha256": "e2898c590c01ebba3d0c69f7ea6f5fa2f09b66b0703a59311b7ad4553acfda66"
      },
      "downloads": -1,
      "filename": "json-converter-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b8178ba4104db37ca3d51b2c88158281",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13814,
      "upload_time": "2021-05-13T13:41:48",
      "upload_time_iso_8601": "2021-05-13T13:41:48.046361Z",
      "url": "https://files.pythonhosted.org/packages/6b/49/bda960db8b5c7c2dbdb79a77b4b1d380d3d7d680e37cef9ce3442409a34f/json-converter-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}