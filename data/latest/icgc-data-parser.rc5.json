{
  "info": {
    "author": "Ad115",
    "author_email": "a.garcia230395@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Artificial Life",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "\nWhat is the ICGC-data-parser?\n=============================\n\n|Documentation Status|\n\n.. |Documentation Status| image:: https://readthedocs.org/projects/icgc-data-parser/badge/?version=develop\n   :target: http://icgc-data-parser.readthedocs.io/en/develop/?badge=develop\n\nA library to ease the parsing of data from the International Cancer Genome \nConsortium data releases, in particular, the simple somatic mutation \naggregates.\n\n\nTutorial\n========   \n\nInstallation\n------------\n\nInstall via `PyPI <https://pypi.org/project/ICGC-data-parser/>`__:\n\n::\n\n    $ pip install ICGC_data_parser\n\n\nData download\n-------------\n\nThe base data for the scripts is the ICGC's aggregated of the simple\nsomatic mutation data. Which can be downloded using\n\n::\n\n    wget https://dcc.icgc.org/api/v1/download?fn=/current/Summary/simple_somatic_mutation.aggregated.vcf.gz\n\nTo know more about this file, please read `About the ICGC's simple\nsomatic mutations\nfile <https://icgc-data-parser.readthedocs.io/en/master/icgc-ssm-file.html>`__\n\n**WARNING**: The current release of the data contains a malformed\nheader that causes the library to crash with an ``IndexError``::\n\n    ---------------------------------------------------------------------------\n    ValueError                                Traceback (most recent call last)\n    ~/.local/lib/python3.6/site-packages/vcf/parser.py in _parse_info(self, info_str)\n        389                 try:\n    ...\n    ...\n    ...\n    362     def _parse_info(self, info_str):\n\n    ValueError: could not convert string to float: 'PCAWG'\n\nThis is caused by a bad type specification in the header of the \nVCF file. To solve it, use the lollowing line after creating the \n``SSM_Reader`` object (asuming the reader is in the ``reader`` \nvariable)\n\n.. code-block:: python\n\n    # Fix weird bug due to malformed description headers\n    reader.infos['studies'] = reader.infos['studies']._replace(type='String')\n\nIn the future this will be solved in a more elegant way, but for \nnow this is what we've got.\n\n\nUsage\n-----\n\nThe main class in the project is the `SSM_Reader \n<https://icgc-data-parser.readthedocs.io/en/master/api-documentation.html#ICGC_data_parser.SSM_Reader>`__. \nIt allows to read easily the ICGC mutations file:\n\n.. code:: python\n\n\n    >>> from ICGC_data_parser import SSM_Reader\n\n    # Reads also compressed files!\n    >>> reader = SSM_Reader(open('data/simple_somatic_mutations.aggregated.vcf.gz'))\n\n    # or...\n    >>> reader = SSM_Reader(filename='data/simple_somatic_mutations.aggregated.vcf.gz')\n    #                       ^^^^^^^^\n    # The filename keyord argument is important, else we get an IndexError\n\n\nThe `SSM_Reader.parse \n<https://icgc-data-parser.readthedocs.io/en/master/api-documentation.html#ICGC_data_parser.SSM_Reader.parse>`__ \nmethod allows to iterate through the records of the file and access the parts \nof the record. You can also specify regular expressions to filter only the \nlines you want:\n\n.. code:: python\n\n\n    # Print only the mutations that are in the\n    # European Union Breast Cancer project (BRCA-EU).\n\n    >>> for record in reader.parse(filters=['BRCA-EU']):\n    ...    print(record.ID, record.CHROM, record.POS)\n\n    MU66865518 1 100141201\n    MU65487875 1 100160548\n    MU66281118 1 100638179\n    MU66254120 1 101352655\n    ...\n\nThe INFO field is special in the sense that it contains several\nsubfields, AND those subfields may be list-like entries with more\nsubfields themselves (in particular the CONSEQUENCE and OCCURRENCE\nsubfields):\n\n.. code:: python\n\n\n    # The subfields of the INFO field:\n    >>> next(reader).INFO\n\n    {'CONSEQUENCE': [\n        '||||||intergenic_region||', \n        'CD1A|ENSG00000158477|+|CD1A-001|ENST00000289429||upstream_gene_variant||'\n        ], \n     'OCCURRENCE': [\n         'ESAD-UK|1|301|0.00332', \n         'EOPC-DE|1|202|0.00495', \n         'BRCA-EU|1|569|0.00176'\n        ],\n     'affected_donors': 3, \n     'mutation': 'T>A', \n     'project_count': 3, \n     'studies': None, \n     'tested_donors': 12068}\n\n.. code:: python\n\n\n    # The description of the CONSEQUENCE subfield\n    >>> print(reader.infos['CONSEQUENCE'].desc)\n\n    Mutation consequence predictions annotated by SnpEff \n    (subfields: gene_symbol|gene_affected|gene_strand|transcript_name|transcript_affected|protein_affected|consequence_type|cds_mutation|aa_mutation)\n\n\n.. code:: python\n\n\n    # The description of the OCCURRENCE subfield\n    >>> print(reader.infos['OCCURRENCE'].desc)\n\n    Mutation occurrence counts broken down by project \n    (subfields: project_code|affected_donors|tested_donors|frequency)\n\n\nSometimes we want to also parse the information in those subfields. For\nthis purpose, the ``SSM_Reader.subfield_parser`` factory method is\nuseful. This method creates a parser of the specified subfield that\nallows easy access to the data:\n\n.. code:: python\n\n\n    # Create the subfield parser for the CONSEQUENCE subfield\n    >>> consequences = reader.subfield_parser('CONSEQUENCE')\n\n\n    >>> for record in reader.parse():\n    ...    # Which genes are affected?\n    ...    genes_affected = {c.gene_symbol \n    ...                          for c in consequences(record)\n    ...                          if c.gene_affected}\n    ...\n    ...    print(f'Mutation: {record.ID}')\n    ...    print('\\t', \", \".join(genes_affected))\n\n    Mutation: MU93246178\n         TPM3\n    Mutation: MU66962994\n         RP11-350G8.9, SHE\n    Mutation: MU93246498\n         DCST1, ADAM15, RP11-307C12.11\n    Mutation: MU66377106\n         EFNA3, ADAM15, EFNA4\n    ...\n\nThe library also contains some helper scripts to manipulate VCF files\n(like the ICGC mutations file): \n\n- ``vcf_map_assembly.py``: Creates a new VCF with the positions mapped to \n  another genome assembly. This is useful because currently the positions \n  reported by ICGC are in the human genome assembly GRCh37, while the most recent\n  (and the one the rest of the world uses) is the GRCh38 assembly. \n\n- ``vcf_sample.py``: Creates a new VCF with a fraction of the mutations in the\n  original. The mutations are randomly sampled but maintain the order they had in\n  the original file. This is useful when one wants to make small test analysis on\n  the data, but still wants the results to be representative of all the \n  mutations. \n\n- ``vcf_split.py``: Splits the input VCF into several (also valid VCFs),\n  this is useful in case one wants to split the analyses into processes\n  that receive one file each.\n\nThe specific documentation of the scripts can be obtained by executing:\n\n::\n\n    $ python3 <script name>.py --help\n\nAlso, the library is shipped with some Jupyter Notebooks that elaborate\non the examples. Besides, in the notebooks are demonstrated ways\nto manage common parsing errors that have to do with malformed input\nfiles.\n\nMeta\n----\n\n**Author**: \n`Ad115 <https://agargar.wordpress.com/>`__ -\n`Github <https://github.com/Ad115/>`__ â€“ \na.garcia230395@gmail.com\n\n\n**Project pages**: \n`Docs <https://icgc-data-parser.readthedocs.io>`__ - `@GitHub <https://github.com/Ad115/ICGC-data-parser/>`__ - `@PyPI <https://pypi.org/project/ICGC-data-parser/>`__\n\nDistributed under the MIT license. See\n`LICENSE <https://github.com/Ad115/ICGC_data_parser/blob/master/LICENSE>`__ for\nmore information.\n\nContributing\n------------\n\n1. Check for open issues or open a fresh issue to start a discussion\n   around a feature idea or a bug.\n2. Fork `the repository <https://github.com/Ad115/ICGC-data-parser/>`__\n   on GitHub to start making your changes to a feature branch, derived\n   from the **master** branch.\n3. Write a test which shows that the bug was fixed or that the feature\n   works as expected.\n4. Send a pull request and bug the maintainer until it gets merged and\n   published.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ad115/ICGC-data-parser",
    "keywords": "vcf data mutations icgc parsing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ICGC-data-parser",
    "package_url": "https://pypi.org/project/ICGC-data-parser/",
    "platform": "",
    "project_url": "https://pypi.org/project/ICGC-data-parser/",
    "project_urls": {
      "Author": "https://agargar.wordpress.com/",
      "Documentation": "https://icgc-data-parser.readthedocs.io",
      "Homepage": "https://github.com/Ad115/ICGC-data-parser",
      "Say Thanks!": "https://saythanks.io/to/Ad115",
      "Source": "https://github.com/Ad115/ICGC-data-parser/"
    },
    "release_url": "https://pypi.org/project/ICGC-data-parser/0.2.2/",
    "requires_dist": [
      "pyvcf",
      "jupyter; extra == 'dev'",
      "matplotlib; extra == 'dev'",
      "numpy; extra == 'dev'",
      "seaborn; extra == 'dev'",
      "scipy; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Tools to facilitate the parsing of SSM data from the International Cancer Genome Consortium data releases, in particular, the simple somatic mutation aggregates.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4235257,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "664eac497d6fafbbdb3afd8a34f5b14fa5baf887bab7b03b11d1b37415f1b908",
          "md5": "bdaa08aab729b07871daa914a02299db",
          "sha256": "8bb13cc92a3bac40afa5f40d7c665006a26d0142c0ed141efb46254db254c4f4"
        },
        "downloads": -1,
        "filename": "ICGC-data-parser-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdaa08aab729b07871daa914a02299db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 259774,
        "upload_time": "2018-04-20T06:38:06",
        "upload_time_iso_8601": "2018-04-20T06:38:06.579887Z",
        "url": "https://files.pythonhosted.org/packages/66/4e/ac497d6fafbbdb3afd8a34f5b14fa5baf887bab7b03b11d1b37415f1b908/ICGC-data-parser-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31961de7dacf24f68076f5fba1966b0d61d7f0245efd582dbbff52eda8943ca4",
          "md5": "e85d57f855911dc7ba260b95283ef7f2",
          "sha256": "ae6dbfdc6e38094c6883716479b9a3caa1d81bb0211d06458a99ab2511bf8b3b"
        },
        "downloads": -1,
        "filename": "ICGC-data-parser-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e85d57f855911dc7ba260b95283ef7f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 259210,
        "upload_time": "2018-04-20T07:18:33",
        "upload_time_iso_8601": "2018-04-20T07:18:33.785770Z",
        "url": "https://files.pythonhosted.org/packages/31/96/1de7dacf24f68076f5fba1966b0d61d7f0245efd582dbbff52eda8943ca4/ICGC-data-parser-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c10cb015ffdccd4da66f61279aff6e17109defd2e8fb6bf54bab1129fdd43e8",
          "md5": "b8413c6c053cc9a9e2cbf13bc24e9801",
          "sha256": "9f7c1a8cf6415d1792d2fcb1c9f64d03407f9753263612649aecf4143bbf421f"
        },
        "downloads": -1,
        "filename": "ICGC_data_parser-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8413c6c053cc9a9e2cbf13bc24e9801",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10730,
        "upload_time": "2018-09-03T07:56:57",
        "upload_time_iso_8601": "2018-09-03T07:56:57.912217Z",
        "url": "https://files.pythonhosted.org/packages/0c/10/cb015ffdccd4da66f61279aff6e17109defd2e8fb6bf54bab1129fdd43e8/ICGC_data_parser-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed96b90b0b8a28680faf9b16b837f1445c2437d06a5e53dd357f0434c30b628b",
          "md5": "18cb835b82d50e8f5f84fcb88b8dbdf4",
          "sha256": "c25ac8b90f33cf359abb4c7d89f02508a762174cf6dd1629b4d0ac6052d3c0ef"
        },
        "downloads": -1,
        "filename": "ICGC_data_parser-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18cb835b82d50e8f5f84fcb88b8dbdf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10767,
        "upload_time": "2018-09-03T09:22:53",
        "upload_time_iso_8601": "2018-09-03T09:22:53.613940Z",
        "url": "https://files.pythonhosted.org/packages/ed/96/b90b0b8a28680faf9b16b837f1445c2437d06a5e53dd357f0434c30b628b/ICGC_data_parser-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94978169f98b0f61e40809dc519893831d37772d313a598f137bee8328dce869",
          "md5": "7e3b0b000cf886e851f08d1f66218b9c",
          "sha256": "c32ccc793eff1ef249cd3f2ffc0863aa5b7f5653e21e78e7677cf84d26948ef6"
        },
        "downloads": -1,
        "filename": "ICGC_data_parser-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e3b0b000cf886e851f08d1f66218b9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10861,
        "upload_time": "2018-09-03T19:06:15",
        "upload_time_iso_8601": "2018-09-03T19:06:15.468709Z",
        "url": "https://files.pythonhosted.org/packages/94/97/8169f98b0f61e40809dc519893831d37772d313a598f137bee8328dce869/ICGC_data_parser-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94978169f98b0f61e40809dc519893831d37772d313a598f137bee8328dce869",
        "md5": "7e3b0b000cf886e851f08d1f66218b9c",
        "sha256": "c32ccc793eff1ef249cd3f2ffc0863aa5b7f5653e21e78e7677cf84d26948ef6"
      },
      "downloads": -1,
      "filename": "ICGC_data_parser-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e3b0b000cf886e851f08d1f66218b9c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10861,
      "upload_time": "2018-09-03T19:06:15",
      "upload_time_iso_8601": "2018-09-03T19:06:15.468709Z",
      "url": "https://files.pythonhosted.org/packages/94/97/8169f98b0f61e40809dc519893831d37772d313a598f137bee8328dce869/ICGC_data_parser-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}