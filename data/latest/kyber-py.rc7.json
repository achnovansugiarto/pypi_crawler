{
  "info": {
    "author": "Marc Partensky",
    "author_email": "marc.partensky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# CRYSTALS-Kyber Python Implementation\n\nThis repository contains a pure python implementation of CRYSTALS-Kyber \nfollowing (at the time of writing) the most recent \n[specification](https://pq-crystals.org/kyber/data/kyber-specification-round3-20210804.pdf)\n(v3.02)\n\n## Disclaimer\n\n:warning: **Under no circumstances should this be used for a cryptographic application.** :warning:\n\nI have written `kyber-py` as a way to learn about the way Kyber works, and to\ntry and create a clean, well commented implementation which people can learn \nfrom.\n\nThis code is not constant time, or written to be performant. Rather, it was \nwritten so that reading though Algorithms 1-9 in the \n[specification](https://pq-crystals.org/kyber/data/kyber-specification-round3-20210804.pdf)\nclosely matches the code which is seen in `kyber.py`.\n\n### KATs\n\nThis implementation currently passes all KAT tests from the reference implementation. \nFor more information, see the unit tests in [`test_kyber.py`](test_kyber.py).\n\n**Note**: there is a discrepancy between the specification and reference implementation.\nTo ensure all KATs pass, I have to generate the public key **before** the random\nbytes $z = \\mathcal{B}^{32}$ in algorithm 7 of the \n[specification](https://pq-crystals.org/kyber/data/kyber-specification-round3-20210804.pdf)\n(v3.02).\n\n### Dependencies\n\nOriginally this was planned to have zero dependencies, however to make this work\npass the KATs, I needed a deterministic CSRNG. The reference implementation uses\nAES256 CTR DRBG. I have implemented this in [`aes256_ctr_drbg.py`](aes256_ctr_drbg.py). \nHowever, I have not implemented AES itself, instead I import this from `pycryptodome`.\n\nTo install dependencies, run `pip -r install requirements`.\n\nIf you're happy to use system randomness (`os.urandom`) then you don't need\nthis dependency.\n\n## Using kyber-py\n\nThere are three functions exposed on the `Kyber` class which are intended\nfor use:\n\n- `Kyber.keygen()`: generate a keypair `(pk, sk)`\n- `Kyber.enc(pk)`: generate a challenge and a shared key `(c, K)`\n- `Kyber.dec(sk, c)`: generate the shared key `K`\n\nTo use `Kyber()` it must be initialised with a dictionary of the \nprotocol parameters. An example can be seen in `DEFAULT_PARAMETERS`.\n\nAdditionally, the class has been initialised with these default parameters, \nso you can simply import the NIST level you want to play with:\n\n#### Example\n\n```python\n>>> from kyber import Kyber512\n>>> pk, sk = Kyber512.keygen()\n>>> c, key = Kyber512.enc(pk)\n>>> _key = Kyber512.dec(c, sk)\n>>> assert key == _key\n```\n\nThe above example would also work with `Kyber768` and `Kyber1024`.\n\n### Benchmarks\n\n**TODO**: Better benchmarks? Although this was never about speed haha.\n\nFor now, here are some approximate benchmarks:\n\n|  1000 Iterations         | Kyber512 | Kyber768 | Kyber1024 |\n|--------------------------|----------|----------|-----------|\n| `KeyGen()`               |  6.868s  | 10.820s  | 16.172s   |\n| `Enc()`                  | 10.677s  | 16.094s  | 22.341s   |\n| `Dec()`                  | 16.822s  | 25.979s  | 33.524s   |\n\nAll times recorded using a Intel Core i7-9750H CPU. \n\n## Future Plans\n\n* Add documentation on `NTT` transform for polynomials\n* Add documentation for working with DRBG and setting the seed\n\n### Include Dilithium\n\nUsing [`polynomials.py`](polynomials.py) and [`modules.py`](modules.py) \nthis work could be extended to\nhave a pure python implementation of CRYSTALS-Dilithium too.\n\nI suppose then this repo should be called `crystals-py` but I wont\nget ahead of myself.\n\n## Discussion of Implementation\n\n### Kyber\n\n```\nTODO:\n\nAdd some more information about how working with Kyber works with this\nlibrary...\n```\n\n### Polynomials\n\nThe file [`polynomials.py`](polynomials.py) contains the classes \n`PolynomialRing` and \n`Polynomial`. This implements the univariate polynomial ring\n\n$$\nR_q = \\mathbb{F}_q[X] /(X^n + 1) \n$$\n\nThe implementation is inspired by `SageMath` and you can create the\nring $R_{11} = \\mathbb{F}_{11}[X] /(X^8 + 1)$ in the following way:\n\n#### Example\n\n```python\n>>> R = PolynomialRing(11, 8)\n>>> x = R.gen()\n>>> f = 3*x**3 + 4*x**7\n>>> g = R.random_element(); g\n5 + x^2 + 5*x^3 + 4*x^4 + x^5 + 3*x^6 + 8*x^7\n>>> f*g\n8 + 9*x + 10*x^3 + 7*x^4 + 2*x^5 + 5*x^6 + 10*x^7\n>>> f + f\n6*x^3 + 8*x^7\n>>> g - g\n0\n```\n\nWe additionally include functions for `PolynomialRing` and `Polynomial`\nto move from bytes to polynomials (and back again). \n\n- `PolynomialRing`\n  - `parse(bytes)` takes $3n$ bytes and produces a random polynomial in $R_q$\n  - `decode(bytes, l)` takes $\\ell n$ bits and produces a polynomial in $R_q$\n  - `cbd(beta, eta)` takes $\\eta \\cdot n / 4$ bytes and produces a polynomial in $R_q$ with coefficents taken from a centered binomial distribution\n- `Polynomial`\n  - `self.encode(l)` takes the polynomial and returns a length $\\ell n / 8$ bytearray\n  \n#### Example\n\n```python\n>>> R = PolynomialRing(11, 8)\n>>> f = R.random_element()\n>>> # If we do not specify `l` then it is computed for us (minimal value)\n>>> f_bytes = f.encode()\n>>> f_bytes.hex()\n'06258910'\n>>> R.decode(f_bytes) == f\nTrue\n>>> # We can also set `l` ourselves\n>>> f_bytes = f.encode(l=10)\n>>> f_bytes.hex()\n'00180201408024010000'\n>>> R.decode(f_bytes, l=10) == f\nTrue\n```\n\nLastly, we define a `self.compress(d)` and `self.decompress(d)` method for\npolynomials following page 2 of the \n[specification](https://pq-crystals.org/kyber/data/kyber-specification-round3-20210804.pdf)\n\n$$\n\\textsf{compress}_q(x, d) = \\lceil (2^d / q) \\cdot x \\rfloor \\textrm{mod}^+ 2^d,\n$$\n\n$$\n\\textsf{decompress}_q(x, d) = \\lceil (q / 2^d) \\cdot x \\rfloor.\n$$\n\nThe functions `compress` and `decompress` are defined for the coefficients \nof a polynomial and a polynomial is (de)compressed by acting the function\non every coefficient. \nSimilarly, an element of a module is (de)compressed by acting the\nfunction on every polynomial.\n\n#### Example\n\n```python\n>>> R = PolynomialRing(11, 8)\n>>> f = R.random_element()\n>>> f\n9 + 3*x + 5*x^2 + 2*x^3 + 9*x^4 + 10*x^5 + 6*x^6 + x^7\n>>> f.compress(1)\nx + x^2 + x^6\n>>> f.decompress(1)\n6*x + 6*x^2 + 6*x^6\n```\n\n**Note**: compression is lossy! We do not get the same polynomial back \nby computing `f.compress(d).decompress(d)`. They are however *close*.\nSee the specification for more information.\n\n### Number Theoretic Transform\n\n```\nTODO:\n\nThis is now handled by `NTTHelper` which is passed to `PolynomialRing`\nand has functions which are accessed by `Polynomial`.\n\nTalk about what is available, and how they are used.\n```\n\n### Modules\n\nThe file [`modules.py`](modules.py) contains the classes `Module` and `Matrix`.\nA module is a generalisation of a vector space, where the field\nof scalars is replaced with a ring. In the case of Kyber, we \nneed the module with the ring $R_q$ as described above. \n\n`Matrix` allows elements of the module to be of size $m \\times n$\nbut for Kyber, we only need vectors of length $k$ and square\nmatricies of size $k \\times k$.\n\nAs an example of the operations we can perform with out `Module`\nlets revisit the ring from the previous example:\n\n#### Example\n\n```python\n>>> R = PolynomialRing(11, 8)\n>>> x = R.gen()\n>>>\n>>> M = Module(R)\n>>> # We create a matrix by feeding the coefficients to M\n>>> A = M([[x + 3*x**2, 4 + 3*x**7], [3*x**3 + 9*x**7, x**4]])\n>>> A\n[    x + 3*x^2, 4 + 3*x^7]\n[3*x^3 + 9*x^7,       x^4]\n>>> # We can add and subtract matricies of the same size\n>>> A + A\n[  2*x + 6*x^2, 8 + 6*x^7]\n[6*x^3 + 7*x^7,     2*x^4]\n>>> A - A\n[0, 0]\n[0, 0]\n>>> # A vector can be constructed by a list of coefficents\n>>> v = M([3*x**5, x])\n>>> v\n[3*x^5, x]\n>>> # We can compute the transpose\n>>> v.transpose()\n[3*x^5]\n[    x]\n>>> v + v\n[6*x^5, 2*x]\n>>> # We can also compute the transpose in place\n>>> v.transpose_self()\n[3*x^5]\n[    x]\n>>> v + v\n[6*x^5]\n[  2*x]\n>>> # Matrix multiplication follows python standards and is denoted by @\n>>> A @ v\n[8 + 4*x + 3*x^6 + 9*x^7]\n[        2 + 6*x^4 + x^5]\n```\n\nWe also carry through `Matrix.encode()` and \n`Module.decode(bytes, n_rows, n_cols)` \nwhich simply use the above functions defined for polynomials and run for each\nelement.\n\n#### Example\n\nWe can see how encoding / decoding a vector works in the following example.\nNote that we can swap the rows/columns to decode bytes into the transpose\nwhen working with a vector.\n\n```python\n>>> R = PolynomialRing(11, 8)\n>>> M = Module(R)\n>>> v = M([R.random_element() for _ in range(2)])\n>>> v_bytes = v.encode()\n>>> v_bytes.hex()\n'd'\n>>> M.decode(v_bytes, 1, 2) == v\nTrue\n>>> v_bytes = v.encode(l=10)\n>>> v_bytes.hex()\n'a014020100103004000040240a03009030080200'\n>>> M.decode(v_bytes, 1, 2, l=10) == v\nTrue\n>>> M.decode(v_bytes, 2, 1, l=10) == v.transpose()\nTrue\n>>> # We can also compress and decompress elements of the module\n>>> v\n[5 + 10*x + 4*x^2 + 2*x^3 + 8*x^4 + 3*x^5 + 2*x^6, 2 + 9*x + 5*x^2 + 3*x^3 + 9*x^4 + 3*x^5 + x^6 + x^7]\n>>> v.compress(1)\n[1 + x^2 + x^4 + x^5, x^2 + x^3 + x^5]\n>>> v.decompress(1)\n[6 + 6*x^2 + 6*x^4 + 6*x^5, 6*x^2 + 6*x^3 + 6*x^5]\n```\n\n## Baby Kyber\n\nA great resource for learning Kyber is available at\n[Approachable Cryptography](https://cryptopedia.dev/posts/kyber/).\n\nWe include code corresponding to their example in `baby_kyber.py`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kyber-py",
    "package_url": "https://pypi.org/project/kyber-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/kyber-py/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kyber-py/0.2.2/",
    "requires_dist": [
      "pycryptodome (==3.14.1)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Implementation of the kyber crystal algorithm made by https://github.com/jack4818/kyber-py",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17503735,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e2aa78ea98f18eb7322995fce82947bb8216060a742f837a067b4a8a8c9f2f",
          "md5": "7a94de7c969a5a87756633c8c118b966",
          "sha256": "aaf89c88d9422a920595d6174251244c0885be7d2d1c09c3e8dc4ce13ec2750d"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a94de7c969a5a87756633c8c118b966",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21100,
        "upload_time": "2023-03-30T00:41:59",
        "upload_time_iso_8601": "2023-03-30T00:41:59.152542Z",
        "url": "https://files.pythonhosted.org/packages/20/e2/aa78ea98f18eb7322995fce82947bb8216060a742f837a067b4a8a8c9f2f/kyber_py-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2698a33ab87d5181a1d13c96e24cdaa89d36798d58b9a69d609f8d29470f3ed",
          "md5": "a9c477a4d73f56c725a668c42dd879ac",
          "sha256": "fe69e07602c14fbbdd14c9b3edcd8b3e0f5b3f1b5588072c926be913cc08b6f8"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9c477a4d73f56c725a668c42dd879ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22315,
        "upload_time": "2023-03-30T00:42:01",
        "upload_time_iso_8601": "2023-03-30T00:42:01.545917Z",
        "url": "https://files.pythonhosted.org/packages/c2/69/8a33ab87d5181a1d13c96e24cdaa89d36798d58b9a69d609f8d29470f3ed/kyber_py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e9a31cc3beb17f0e42b41abb69e0be054bcacc4765e91cab5b5471914456c9",
          "md5": "2c3eb2ff81c46e8941e29155c7fae081",
          "sha256": "fa8e1c3a3f37f6539b88cb90abc5983fcfccd911e8bf4cd6e56fe59c0df93e1f"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c3eb2ff81c46e8941e29155c7fae081",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21297,
        "upload_time": "2023-03-30T00:45:19",
        "upload_time_iso_8601": "2023-03-30T00:45:19.392048Z",
        "url": "https://files.pythonhosted.org/packages/38/e9/a31cc3beb17f0e42b41abb69e0be054bcacc4765e91cab5b5471914456c9/kyber_py-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da58db6161087f95174532e7b23eb3df814e712f33f8854f0929d033cbc3d037",
          "md5": "d9ac268551405c62aafc124fef85521a",
          "sha256": "b03075091e99e2ab20768ececd3b3ee489af9196a16f7691fe8a72e2f6eab0df"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9ac268551405c62aafc124fef85521a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22380,
        "upload_time": "2023-03-30T00:45:21",
        "upload_time_iso_8601": "2023-03-30T00:45:21.993622Z",
        "url": "https://files.pythonhosted.org/packages/da/58/db6161087f95174532e7b23eb3df814e712f33f8854f0929d033cbc3d037/kyber_py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "786b88172782b39b8ba0038c9d26487f983693ed5a68f83575c73b17a57b9966",
          "md5": "edd10d7631fcec6e97cc0f7e5e171e0c",
          "sha256": "29aaa344253e1e2e89beb9a489f67cf47162af2f637557db4b32223361dae394"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edd10d7631fcec6e97cc0f7e5e171e0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21302,
        "upload_time": "2023-03-30T00:46:59",
        "upload_time_iso_8601": "2023-03-30T00:46:59.689720Z",
        "url": "https://files.pythonhosted.org/packages/78/6b/88172782b39b8ba0038c9d26487f983693ed5a68f83575c73b17a57b9966/kyber_py-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c4a067dbeef46e81da3e0a7df9ca0bb260a69ef56232944ab02d841fc78ef9f",
          "md5": "ea38a2bc94169469a3c17818f0274a62",
          "sha256": "9330e4d6949f206545d26d587af83ebcbe8701effbc4641145f112c7a8047a16"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ea38a2bc94169469a3c17818f0274a62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22392,
        "upload_time": "2023-03-30T00:47:02",
        "upload_time_iso_8601": "2023-03-30T00:47:02.587545Z",
        "url": "https://files.pythonhosted.org/packages/9c/4a/067dbeef46e81da3e0a7df9ca0bb260a69ef56232944ab02d841fc78ef9f/kyber_py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "704cf8ac46e3ff0c6c9552db0fe5d4bbbdff12e03f7c629b9b258e31f2967ae0",
          "md5": "285eb03714139b8c4588c56bf800ba5f",
          "sha256": "d5c0e41f4a86dd3a4135bce1e200660e539821f9b1f891c188ef2bc69376221e"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "285eb03714139b8c4588c56bf800ba5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21324,
        "upload_time": "2023-03-30T00:49:27",
        "upload_time_iso_8601": "2023-03-30T00:49:27.157475Z",
        "url": "https://files.pythonhosted.org/packages/70/4c/f8ac46e3ff0c6c9552db0fe5d4bbbdff12e03f7c629b9b258e31f2967ae0/kyber_py-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f13991e62a8a25749c6c87b2333133803326ac24528a5da737645445fa0596b6",
          "md5": "1d2601a88dd95e1caca78f99ea983d06",
          "sha256": "dfb41e40daa6f496091eebbdf1903366f8be47ad9ef3077faf25b0227124c181"
        },
        "downloads": -1,
        "filename": "kyber_py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1d2601a88dd95e1caca78f99ea983d06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22419,
        "upload_time": "2023-03-30T00:49:29",
        "upload_time_iso_8601": "2023-03-30T00:49:29.633529Z",
        "url": "https://files.pythonhosted.org/packages/f1/39/91e62a8a25749c6c87b2333133803326ac24528a5da737645445fa0596b6/kyber_py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369fbb7bf1c2b590cdc0b2315308f520b87f97418c971c354e74e74ec085705b",
          "md5": "4a549360c5310593635f0f128bbbaf1c",
          "sha256": "9b30be5ba4dc0e52bbec17c261d43e8e7bb2ecf95e4e0c08eca18ff7c5699ad6"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a549360c5310593635f0f128bbbaf1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21329,
        "upload_time": "2023-03-30T00:56:55",
        "upload_time_iso_8601": "2023-03-30T00:56:55.480576Z",
        "url": "https://files.pythonhosted.org/packages/36/9f/bb7bf1c2b590cdc0b2315308f520b87f97418c971c354e74e74ec085705b/kyber_py-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23efa0a0845f80f1c6a1fb33c5e8274a8700f7abd713d56816d5316ec02228fd",
          "md5": "9598d8178049ac48542d2e1a8b30038e",
          "sha256": "6650037933803a034507d92704bed757099199df741d4cfb41e006ff105d0254"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9598d8178049ac48542d2e1a8b30038e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22460,
        "upload_time": "2023-03-30T00:56:57",
        "upload_time_iso_8601": "2023-03-30T00:56:57.919824Z",
        "url": "https://files.pythonhosted.org/packages/23/ef/a0a0845f80f1c6a1fb33c5e8274a8700f7abd713d56816d5316ec02228fd/kyber_py-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b9d3c2c10e9053367e9c6525fc0193e0c53e07cd3d4a5e102a5837d672db918",
          "md5": "8b1763cb07ca8657cd16c70047c188c4",
          "sha256": "b33ab4a82635d1dce63f0e90b25dd96128c940a1d97ba53014e75ccbe9da92a9"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b1763cb07ca8657cd16c70047c188c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21267,
        "upload_time": "2023-03-30T01:09:54",
        "upload_time_iso_8601": "2023-03-30T01:09:54.700578Z",
        "url": "https://files.pythonhosted.org/packages/8b/9d/3c2c10e9053367e9c6525fc0193e0c53e07cd3d4a5e102a5837d672db918/kyber_py-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8a0d9474e0e6809c7b0792389b905ada0025f3bb709c32446b2713b3107f94c",
          "md5": "4e83061b2a59eb5cacc419da1ba37aa4",
          "sha256": "23d751f9e0bb5dbcc5a8c14492e5c0eb050aa20a4521ac16489b6292c59c57d0"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e83061b2a59eb5cacc419da1ba37aa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22455,
        "upload_time": "2023-03-30T01:09:57",
        "upload_time_iso_8601": "2023-03-30T01:09:57.747483Z",
        "url": "https://files.pythonhosted.org/packages/a8/a0/d9474e0e6809c7b0792389b905ada0025f3bb709c32446b2713b3107f94c/kyber_py-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e8ac24438a10e1853bdd18a32ae48b2f85035c635695463c51accbc0161852a",
          "md5": "cb09d24e8b48947fa0edfca01a7fd9d5",
          "sha256": "1ff4aa92db49aa88a8d54a7ccaf0052ab036b01a18413ec5619cda95a24035c1"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb09d24e8b48947fa0edfca01a7fd9d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21288,
        "upload_time": "2023-03-30T01:40:25",
        "upload_time_iso_8601": "2023-03-30T01:40:25.556169Z",
        "url": "https://files.pythonhosted.org/packages/2e/8a/c24438a10e1853bdd18a32ae48b2f85035c635695463c51accbc0161852a/kyber_py-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f956eb7811e65f6d1baad9a9ed330bd305f501c0e8e8beaa4c81a018de35dec",
          "md5": "60a5452c720ae085db32dd3016738d62",
          "sha256": "9c435a68dbbec76c42871554a2315c9b3dcd508b5c28daf4a9e443f7768c23e5"
        },
        "downloads": -1,
        "filename": "kyber_py-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "60a5452c720ae085db32dd3016738d62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 22472,
        "upload_time": "2023-03-30T01:40:27",
        "upload_time_iso_8601": "2023-03-30T01:40:27.871885Z",
        "url": "https://files.pythonhosted.org/packages/0f/95/6eb7811e65f6d1baad9a9ed330bd305f501c0e8e8beaa4c81a018de35dec/kyber_py-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e8ac24438a10e1853bdd18a32ae48b2f85035c635695463c51accbc0161852a",
        "md5": "cb09d24e8b48947fa0edfca01a7fd9d5",
        "sha256": "1ff4aa92db49aa88a8d54a7ccaf0052ab036b01a18413ec5619cda95a24035c1"
      },
      "downloads": -1,
      "filename": "kyber_py-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb09d24e8b48947fa0edfca01a7fd9d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 21288,
      "upload_time": "2023-03-30T01:40:25",
      "upload_time_iso_8601": "2023-03-30T01:40:25.556169Z",
      "url": "https://files.pythonhosted.org/packages/2e/8a/c24438a10e1853bdd18a32ae48b2f85035c635695463c51accbc0161852a/kyber_py-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f956eb7811e65f6d1baad9a9ed330bd305f501c0e8e8beaa4c81a018de35dec",
        "md5": "60a5452c720ae085db32dd3016738d62",
        "sha256": "9c435a68dbbec76c42871554a2315c9b3dcd508b5c28daf4a9e443f7768c23e5"
      },
      "downloads": -1,
      "filename": "kyber_py-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "60a5452c720ae085db32dd3016738d62",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 22472,
      "upload_time": "2023-03-30T01:40:27",
      "upload_time_iso_8601": "2023-03-30T01:40:27.871885Z",
      "url": "https://files.pythonhosted.org/packages/0f/95/6eb7811e65f6d1baad9a9ed330bd305f501c0e8e8beaa4c81a018de35dec/kyber_py-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}