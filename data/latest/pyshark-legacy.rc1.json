{
  "info": {
    "author": "KimiNewt",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "pyshark\n=======\n\nPython wrapper for tshark, allowing python packet parsing using wireshark dissectors.\n\nThere are quite a few python packet parsing modules, this one is different because it doesn't actually parse any packets, it simply uses tshark's (wireshark command-line utility) ability to export XMLs to use its parsing.\n\nThis package allows parsing from a capture file or a live capture, using all wireshark dissectors you have installed.\nTested on windows/linux.\n\nUsage\n=====\n\nReading from a capture file:\n----------------------------\n\n::\n\n    import pyshark\n    cap = pyshark.FileCapture('/tmp/mycapture.cap')\n    cap\n    >>> <FileCapture /tmp/mycapture.cap (589 packets)>\n    print cap[0]\n    Packet (Length: 698)\n    Layer ETH:\n            Destination: BLANKED\n            Source: BLANKED\n            Type: IP (0x0800)\n    Layer IP:\n            Version: 4\n            Header Length: 20 bytes\n            Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))\n            Total Length: 684s\n            Identification: 0x254f (9551)\n            Flags: 0x00\n            Fragment offset: 0\n            Time to live: 1\n            Protocol: UDP (17)\n            Header checksum: 0xe148 [correct]\n            Source: BLANKED\n            Destination: BLANKED\n      ...\n\n  \nReading from a live interface:\n------------------------------\n\n::\n\n    capture = pyshark.LiveCapture(interface='eth0')\n    capture.sniff(timeout=50)\n    capture\n    >>> <LiveCapture (5 packets)>\n    capture[3]\n    <UDP/HTTP Packet>\n\n    for packet in capture.sniff_continuously(packet_count=5):\n        print 'Just arrived:', packet\n\nInfinite reading from a live interface with capture filter:\n------------------------------\n\n::\n\n    def packet_captured(packet):\n      print 'Just arrived:', packet\n\n    capture = pyshark.LiveCapture(interface='eth0', capture_filter='tcp')\n    capture.apply_on_packets(packet_captured)\n\nAccessing packet data:\n----------------------\n\nData can be accessed in multiple ways. \nPackets are divided into layers, first you have to reach the appropriate layer and then you can select your field.\n\nAll of the following work::\n\n    packet['ip'].dst\n    >>> 192.168.0.1\n    packet.ip.src\n    >>> 192.168.0.100\n    packet[2].src\n    >>> 192.168.0.100\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KimiNewt/pyshark",
    "keywords": "wireshark capture packets parsing packet",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyshark-legacy",
    "package_url": "https://pypi.org/project/pyshark-legacy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyshark-legacy/",
    "project_urls": {
      "Homepage": "https://github.com/KimiNewt/pyshark"
    },
    "release_url": "https://pypi.org/project/pyshark-legacy/0.3.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for tshark, allowing python packet parsing using wireshark dissectors",
    "version": "0.3.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4002830,
  "releases": {
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45fd048873d79182cdea0278826a54b29ff67877ffb1d2499f4f41db3a57af98",
          "md5": "78c07131a1e45637cfacdc921433d01d",
          "sha256": "c8db1e331608b52d5debb410e9f6078174b26a9f2296fb7ac92c34ad1475ac63"
        },
        "downloads": -1,
        "filename": "pyshark-legacy-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "78c07131a1e45637cfacdc921433d01d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21514,
        "upload_time": "2018-06-26T08:01:25",
        "upload_time_iso_8601": "2018-06-26T08:01:25.736296Z",
        "url": "https://files.pythonhosted.org/packages/45/fd/048873d79182cdea0278826a54b29ff67877ffb1d2499f4f41db3a57af98/pyshark-legacy-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45fd048873d79182cdea0278826a54b29ff67877ffb1d2499f4f41db3a57af98",
        "md5": "78c07131a1e45637cfacdc921433d01d",
        "sha256": "c8db1e331608b52d5debb410e9f6078174b26a9f2296fb7ac92c34ad1475ac63"
      },
      "downloads": -1,
      "filename": "pyshark-legacy-0.3.8.tar.gz",
      "has_sig": false,
      "md5_digest": "78c07131a1e45637cfacdc921433d01d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21514,
      "upload_time": "2018-06-26T08:01:25",
      "upload_time_iso_8601": "2018-06-26T08:01:25.736296Z",
      "url": "https://files.pythonhosted.org/packages/45/fd/048873d79182cdea0278826a54b29ff67877ffb1d2499f4f41db3a57af98/pyshark-legacy-0.3.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}