{
  "info": {
    "author": "Pablo V. Parellada",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# QubitApproximant\n\n[![GitHub release](https://img.shields.io/github/release/pablovegan/qubitapproximant.svg)](https://github.com/pablovegan/qubitapproximant/releases/latest)\n[![documentation](https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat)](https://pablovegan.github.io/QubitApproximant/)\n[![pypi version](https://img.shields.io/pypi/v/qubit-approximant.svg)](https://pypi.org/project/qubit-approximant/)\n[![black](https://img.shields.io/badge/code%20style-black-black)](https://github.com/psf/black)\n[![Tests](https://github.com/pablovegan/QubitApproximant/actions/workflows/tests.yml/badge.svg)](https://github.com/pablovegan/QubitApproximant/actions/workflows/tests.yml)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nA `python` package for approximating quantum circuits with a single qubit.\n\n\n![alt text](/examples/gaussian.png)\n\n## Documentation and examples\nDocumentation created with `mkdocs` can be found in https://pablovegan.github.io/QubitApproximant/.\n\n## Installation\n\nWith `pip`:\n```bash\npip install qubit-approximant\n```\n\n## Quick usage\n\n### Importing a function\n\nIn the submodule benchmarking.functions there are multiple test functions to choose from\n\n```python\nimport numpy as np\nfrom qubit_approximant.benchmarking.functions import gaussian\n\nx = np.linspace(-2.5, 2.5, 1000)\nfn_kwargs = {'mean': 0.0, 'std': 0.5, 'coef': 1}\nfn = gaussian(x, **fn_kwargs)\n```\n\n### Creating a circuit\nTo create a circuit just choose the ansaz (``CircuitRxRyRz``, ``CircuitRxRy`` or ``CircuitRy``) and the encoding (``'prob'`` or ``\"'amp'``).\n\n```python\nfrom qubit_approximant.core import CircuitRxRyRz\n\ncircuit = CircuitRxRyRz(x, encoding='prob')\n```\n\n### Cost function\nTo find the optimum parameters of the circuit, we need to choose a cost function. This can be done with the ``Cost`` class, where we input the function to approximate, the circuit ansatz and a metric to quantify the error in the approximation (options are ``'mse'``, ``'rmse'``, )\n\n```python\nfrom qubit_approximant.core import Cost\n\ncost = Cost(fn, circuit, metric='mse')\n```\n\n### Optimizer\n\nChoose an optimizer (``BlackBoxOptimizer``, ``GDOptimizer`` or ``AdamOptimizer``)\n\n```python\nfrom qubit_approximant.core import BlackBoxOptimizer\n\noptimizer = BlackBoxOptimizer(method=\"L-BFGS-B\")\n```\nand find the optimum parameters for the chosen circuit\n\n```python\nlayers = 6\ninit_params = np.random.randn(4 * layers)\nopt_params = optimizer(cost, cost.grad, init_params)\n```\n\n### Multilayer optimizer\nWe may also optimize an ansatz for multiple layers using the ``LayerwiseOptimizer```, which uses the optimum parameters for a circuit with $L$ layers as initial parameters for the optimization of a circuit with $L+1$ layers. A list with the optimum parameters for each layer is returned.\n\n```python\nfrom qubit_approximant.core import LayerwiseOptimizer\n\nlayerwise_opt = LayerwiseOptimizer(\n    optimizer,\n    min_layer=3,\n    max_layer=7, \n    new_layer_coef=0.3,\n    new_layer_position='random'\n    )\nparams_list = layerwise_opt(cost, cost.grad, init_params)\n```\n\nNote: a ``MultilayerOptimizer`` which doesn't reuse the optimized parameters from previous layers is also available.\n\n### Error metrics\nTo benchmark the optimization we can use some common metrics, like the $L^1$ norm, $L^2$ norm, $L^\\infty$ norm or infidelity $1-F$, to compare the function encoded in the circuit with the desired function. Following our example, ``fn`` is a ``gaussian``:\n\n```python\nl1_list, l2_list, inf_list, infidelity_list = metric_results(\n    params_list,\n    circuit,\n    fn = gaussian,\n    fn_kwargs = {'mean': 0.0, 'std': 0.5, 'coef': 1}\n    )\n```\n\n### Wrapping up\nTest the library yourself!\n\n```python\nimport numpy as np\n\nfrom qubit_approximant.benchmarking.functions import gaussian\nfrom qubit_approximant.core import CircuitRxRyRz, Cost, BlackBoxOptimizer, LayerwiseOptimizer\nfrom qubit_approximant.benchmarking import metric_results\n\nx = np.linspace(-2.5, 2.5, 1000)\nfn_kwargs = {'mean': 0.0, 'std': 0.5, 'coef': 1}\nfn = gaussian(x, **fn_kwargs)\n\ncircuit = CircuitRxRyRz(x, encoding='prob')\ncost = Cost(fn, circuit, metric='mse')\noptimizer = BlackBoxOptimizer(method=\"L-BFGS-B\")\n\nmin_layer = 3\ninit_params = np.random.randn(4 * min_layer)\nlayerwise_opt = LayerwiseOptimizer(\n    optimizer,\n    min_layer=min_layer,\n    max_layer=7,\n    new_layer_coef=0.3,\n    new_layer_position='random'\n    )\nparams_list = layerwise_opt(cost, cost.grad, init_params)\n\nl1_list, l2_list, inf_list, infidelity_list = metric_results(\n    fn=gaussian,\n    fn_kwargs={'mean': 0.0, 'std': 0.5, 'coef': 1},\n    circuit=circuit,\n    params_list=params_list\n    )\n```\n\n### Bonus: benchmarking multiple initial parameters\n\nThe initial paramenters for the optimizer are generated at random with a ``seed`` of our choice. We can benchmark the optimizer against multiple seeds (since it is a time consuming task it is parallelized using ``mpi``).\n\n```python\nbenchmark_seeds(\n    num_seeds = 4,\n    fn = gaussian,\n    fn_kwargs = fn_kwargs,\n    circuit = circuit,\n    cost = cost,\n    optimizer = multilayer_opt,\n    filename = \"results\",\n)\n```\n\n\n## References\n\nThis library is based on Adrian PÃ©rez Salinas article [Data re-uploading for a universal quantum classifier](https://quantum-journal.org/papers/q-2020-02-06-226/).\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first\nto discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n\nThis software is under the [GNU General Public License v3.0](https://choosealicense.com/licenses/gpl-3.0/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pablovegan/QubitApproximant",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qubit-approximant",
    "package_url": "https://pypi.org/project/qubit-approximant/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/qubit-approximant/",
    "project_urls": {
      "Homepage": "https://github.com/pablovegan/QubitApproximant"
    },
    "release_url": "https://pypi.org/project/qubit-approximant/0.2.0/",
    "requires_dist": [
      "build (==0.10.0)",
      "packaging (==23.0)",
      "pyproject-hooks (==1.0.0)",
      "tomli (==2.0.1)",
      "pytest ; extra == 'testing'",
      "codecov ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pre-commit ; extra == 'testing'",
      "tox ; extra == 'testing'",
      "pylint ; extra == 'testing'",
      "flake8 ; extra == 'testing'",
      "mypy ; extra == 'testing'",
      "isort ; extra == 'testing'",
      "black ; extra == 'testing'",
      "autopep8 ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "Approximate a function using a single qubit.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17021057,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "140816aaa0fb63b376862b5a237429a3f5e3fbfe54154f6e9603464e5a39fdf4",
          "md5": "aba7f501748e060e69cde179081a9ea0",
          "sha256": "ecd415f01b9a65d46efb0fcaf138d573c6e014856798b09a906d75d3a06f8347"
        },
        "downloads": -1,
        "filename": "qubit_approximant-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aba7f501748e060e69cde179081a9ea0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14904,
        "upload_time": "2023-02-22T21:32:36",
        "upload_time_iso_8601": "2023-02-22T21:32:36.101380Z",
        "url": "https://files.pythonhosted.org/packages/14/08/16aaa0fb63b376862b5a237429a3f5e3fbfe54154f6e9603464e5a39fdf4/qubit_approximant-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47d234ace9c4e35faeb48f7c66ce2f5b029304157b3fdc19cec47ae8b6642040",
          "md5": "da1d040b4085d841e945b84c53c88fb3",
          "sha256": "c578c27c85533322e6cbea273ce0257401e5d2d78be349348f721d4f858f4df1"
        },
        "downloads": -1,
        "filename": "qubit_approximant-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "da1d040b4085d841e945b84c53c88fb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 207740,
        "upload_time": "2023-02-22T21:32:38",
        "upload_time_iso_8601": "2023-02-22T21:32:38.759464Z",
        "url": "https://files.pythonhosted.org/packages/47/d2/34ace9c4e35faeb48f7c66ce2f5b029304157b3fdc19cec47ae8b6642040/qubit_approximant-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26e9b5442ba3916346d5af9d8ad0fe1164092f0cca52868892020b013c1c4159",
          "md5": "ecfb49318aa15185987cd0afc0a874ce",
          "sha256": "9d79b9c5a8ee8e0a51ec5e78ff8339c917a7a409c4b445d7d3900a0ad44fc47c"
        },
        "downloads": -1,
        "filename": "qubit_approximant-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecfb49318aa15185987cd0afc0a874ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16370,
        "upload_time": "2023-02-25T00:50:49",
        "upload_time_iso_8601": "2023-02-25T00:50:49.409941Z",
        "url": "https://files.pythonhosted.org/packages/26/e9/b5442ba3916346d5af9d8ad0fe1164092f0cca52868892020b013c1c4159/qubit_approximant-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0f3160d0c6bc5615c0a399e172d45252f85966a630eafcb587ccd828acbac9a",
          "md5": "699e2820a3c8677a8c6eea1b6847d45c",
          "sha256": "37a40130b80d66b474231b51467ace835a8aaa961913852c88a50fd08f5bc344"
        },
        "downloads": -1,
        "filename": "qubit_approximant-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "699e2820a3c8677a8c6eea1b6847d45c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 54567,
        "upload_time": "2023-02-25T00:50:51",
        "upload_time_iso_8601": "2023-02-25T00:50:51.399379Z",
        "url": "https://files.pythonhosted.org/packages/a0/f3/160d0c6bc5615c0a399e172d45252f85966a630eafcb587ccd828acbac9a/qubit_approximant-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26e9b5442ba3916346d5af9d8ad0fe1164092f0cca52868892020b013c1c4159",
        "md5": "ecfb49318aa15185987cd0afc0a874ce",
        "sha256": "9d79b9c5a8ee8e0a51ec5e78ff8339c917a7a409c4b445d7d3900a0ad44fc47c"
      },
      "downloads": -1,
      "filename": "qubit_approximant-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ecfb49318aa15185987cd0afc0a874ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16370,
      "upload_time": "2023-02-25T00:50:49",
      "upload_time_iso_8601": "2023-02-25T00:50:49.409941Z",
      "url": "https://files.pythonhosted.org/packages/26/e9/b5442ba3916346d5af9d8ad0fe1164092f0cca52868892020b013c1c4159/qubit_approximant-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0f3160d0c6bc5615c0a399e172d45252f85966a630eafcb587ccd828acbac9a",
        "md5": "699e2820a3c8677a8c6eea1b6847d45c",
        "sha256": "37a40130b80d66b474231b51467ace835a8aaa961913852c88a50fd08f5bc344"
      },
      "downloads": -1,
      "filename": "qubit_approximant-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "699e2820a3c8677a8c6eea1b6847d45c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 54567,
      "upload_time": "2023-02-25T00:50:51",
      "upload_time_iso_8601": "2023-02-25T00:50:51.399379Z",
      "url": "https://files.pythonhosted.org/packages/a0/f3/160d0c6bc5615c0a399e172d45252f85966a630eafcb587ccd828acbac9a/qubit_approximant-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}