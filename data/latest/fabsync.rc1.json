{
  "info": {
    "author": null,
    "author_email": "Peter Sagerson <psagers@ignorare.net>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "<!-- vim: set tw=80 lbr: -->\n# fabsync\n\n- Homepage: https://sr.ht/~psagers/fabsync/\n- Source code: https://hg.sr.ht/~psagers/fabsync\n- Documentation: https://fabsync.ignorare.net/\n\n## Overview\n\nThis is a file-syncing tool for [Fabric][]. It's almost as straightforward to\nuse as rsync, but with some of the features that will be familiar from\ndeployment automation tools like Ansible.\n\nKey points:\n\n- Source files are kept in a simple directory tree, as if you were going to\n  rsync them.\n- Metadata—such as ownership and permissions—is configured in TOML files\n  throughout the tree.\n- Rendering functions can be configured to transform file contents. You can hook\n  these up to template engines or anything else.\n- Paths and tags can be used to sync a subset of the file tree.\n\nThe most important thing to note is that this is a library, not a framework. It\ndoes one simple thing, which you're welcome to integrate into your own\ndeployment scheme any way you like. For illustration purposes, here's a fragment\nof a hypothetical `fabfile.py` that you might write:\n\n```python\nimport io\nfrom pathlib import Path\nfrom typing import Any, Mapping\n\nfrom fabric import Connection, task\nimport fabsync\nimport pystache\nimport tomli\n\n\ndef _mustache_renderer(conn: Connection) -> fabsync.Renderer:\n    try:\n        result = conn.get('/usr/local/etc/fabsync.toml', io.BytesIO())\n    except FileNotFoundError:\n        host = {}\n    else:\n        host = tomli.loads(result.local.getvalue().decode())\n\n    renderer = pystache.Renderer(escape=lambda s: s)\n\n    def render(path: Path, vars: Mapping[str, Any]) -> str:\n        with path.open('rt') as f:\n            return renderer.render(f.read(), host | vars)\n\n    return render\n\n\n@task(iterable=['tag'], incrementable=['verbose'])\ndef sync(conn, subpath=None, tag=None, verbose=0):\n    root = fabsync.load('files', '/')\n    selector = fabsync.ItemSelector.new(subpath=subpath, tags=tag)\n    renderers = {'mustache': _mustache_renderer(conn)}\n\n    dry_run = conn['run']['dry']\n\n    for result in fabsync.isync(conn, root, selector, renderers, dry_run=dry_run):\n        print(f\"{result.path}{' [modified]' if result.modified else ''}\")\n        if verbose > 0 and result.diff:\n            print(result.diff.decode())\n```\n\nOf course you may also wish to save the results and use them to decide what\nother actions to perform (e.g. restarting services).\n\nBecause we're just dealing with files, fabsync can offer a few other convenience\nfunctions, including one that renders the source tree into human-readable rows.\nIf you rendered this with PrettyTable, it might look like this:\n\n```\n+-----------------------------------+------+-------+------------+----------+-------+--------+\n| Path                              | User | Group | Mode       | Renderer | Diff? | Tags   |\n+-----------------------------------+------+-------+------------+----------+-------+--------+\n| /usr/                             |      |       |            |          |       |        |\n| /usr/local/                       |      |       |            |          |       |        |\n| /usr/local/etc/                   |      |       |            |          |       |        |\n| /usr/local/etc/mail/              |      |       |            |          |       | mail   |\n| /usr/local/etc/mail/smtpd.conf    |      |       |            |          |       | mail   |\n| /usr/local/etc/rc.d/              | root | wheel |            |          |       |        |\n| /usr/local/etc/rc.d/restic-server | root | wheel | -rwxr-xr-x |          |       | restic |\n| /usr/local/etc/smb4.conf          |      |       |            |          |       |        |\n| /usr/local/etc/wireguard/         |      |       | drwx------ |          |       | wg     |\n| /usr/local/etc/wireguard/wg0.conf |      |       | -rw------- | mustache |       | wg     |\n| /usr/local/utils/                 |      |       |            |          |       |        |\n+-----------------------------------+------+-------+------------+----------+-------+--------+\n```\n\nRefer to the [documentation][] for more details and a step-by-step guide.\n\n## Contributing\n\nI wrote this for my own purposes and published it primarily to enforce the\ndiscipline of comprehensive documentation and tests. It's deliberately narrow in\nscope. New features are not out of the question, but mostly only those that\nwould be considerably more effort to implement externally.\n\nFeel free to reach out with bug reports or suggestions. And note the Unlicense,\nwhich means you can also just take the code and do what you like with it.\n\n## License\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n\n[Fabric]: https://www.fabfile.org/\n[documentation]: https://fabsync.ignorare.net/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "fabric",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "fabsync",
    "package_url": "https://pypi.org/project/fabsync/",
    "platform": null,
    "project_url": "https://pypi.org/project/fabsync/",
    "project_urls": {
      "Documentation": "https://fabsync.ignorare.net/",
      "Homepage": "https://sr.ht/~psagers/fabsync/",
      "Source code": "https://hg.sr.ht/~psagers/fabsync"
    },
    "release_url": "https://pypi.org/project/fabsync/1.0.0/",
    "requires_dist": [
      "fabric~=2.7",
      "jsonschema~=4.5",
      "tomli~=2.0"
    ],
    "requires_python": ">=3.8",
    "summary": "File syncing via Fabric.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15514375,
  "releases": {
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "dffd94e5fecae17920761f0de3880609c7a1b1190665f04f433709ef77193163",
          "md5": "4b23e36248bf682494f4178d7140d2ee",
          "sha256": "e3f34e74a08179cd033d6eb242a4e3df7357535995946146154b636ccc3ac1bb"
        },
        "downloads": -1,
        "filename": "fabsync-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b23e36248bf682494f4178d7140d2ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17809,
        "upload_time": "2022-10-24T22:16:18",
        "upload_time_iso_8601": "2022-10-24T22:16:18.026373Z",
        "url": "https://files.pythonhosted.org/packages/df/fd/94e5fecae17920761f0de3880609c7a1b1190665f04f433709ef77193163/fabsync-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d4305a8fe2647b5a06a3ace2b537f8798693c32d72041cc3416f1275db1dd536",
          "md5": "f0316a9ef476402f4d2711f1cb0d9e5d",
          "sha256": "0f8e154d4e91e94204e556be5076be61d3a0d0394b4e81fef99796a88aa90138"
        },
        "downloads": -1,
        "filename": "fabsync-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0316a9ef476402f4d2711f1cb0d9e5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 28667,
        "upload_time": "2022-10-24T22:16:16",
        "upload_time_iso_8601": "2022-10-24T22:16:16.381210Z",
        "url": "https://files.pythonhosted.org/packages/d4/30/5a8fe2647b5a06a3ace2b537f8798693c32d72041cc3416f1275db1dd536/fabsync-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "dffd94e5fecae17920761f0de3880609c7a1b1190665f04f433709ef77193163",
        "md5": "4b23e36248bf682494f4178d7140d2ee",
        "sha256": "e3f34e74a08179cd033d6eb242a4e3df7357535995946146154b636ccc3ac1bb"
      },
      "downloads": -1,
      "filename": "fabsync-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b23e36248bf682494f4178d7140d2ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17809,
      "upload_time": "2022-10-24T22:16:18",
      "upload_time_iso_8601": "2022-10-24T22:16:18.026373Z",
      "url": "https://files.pythonhosted.org/packages/df/fd/94e5fecae17920761f0de3880609c7a1b1190665f04f433709ef77193163/fabsync-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d4305a8fe2647b5a06a3ace2b537f8798693c32d72041cc3416f1275db1dd536",
        "md5": "f0316a9ef476402f4d2711f1cb0d9e5d",
        "sha256": "0f8e154d4e91e94204e556be5076be61d3a0d0394b4e81fef99796a88aa90138"
      },
      "downloads": -1,
      "filename": "fabsync-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f0316a9ef476402f4d2711f1cb0d9e5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 28667,
      "upload_time": "2022-10-24T22:16:16",
      "upload_time_iso_8601": "2022-10-24T22:16:16.381210Z",
      "url": "https://files.pythonhosted.org/packages/d4/30/5a8fe2647b5a06a3ace2b537f8798693c32d72041cc3416f1275db1dd536/fabsync-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}