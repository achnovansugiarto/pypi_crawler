{
  "info": {
    "author": "Jim Ratliff",
    "author_email": "jim@jim-ratliff.name",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Introduction\n## Goals of this project\nThis project doesn’t do anything useful. It exists only as a vehicle to demonstrate:\n*  how to prepare a Python project that can be uploaded to the\n[Python Package Index (PyPI)](https://pypi.org/) as a release, from which it can then be installed on user systems using\nthe [pip](https://pypi.org/project/pip/) package installer—using *static* metadata (`setup.cfg`) rather than dynamic\nmetadata (`setup.py`)\n*  how static text files (for example, templates, sample data, etc.) can be packaged and then—using\n`importlib.resources`—referenced and read from their host package or any other package, even if these files don’t\nactually reside on the file system (e.g., if they reside in a .zip archive). This is relevant because:\n    * [“[T]he PyPA recommends that any data files you wish to be accessible at run time be included **inside the package**.”](https://setuptools.pypa.io/en/latest/userguide/datafiles.html#non-package-data-files)\n    * [PEP 302](https://peps.python.org/pep-0302/) added hooks to import from .zip files and Python Eggs.\n* use of a `src/` directory intermediate between the project directory and the outermost package directory—with multiple\nbenefits\n* how to provide a single source for the version number, in this case by supplying a `__version__.py` file in the import\nmodule that is (a) imported by `__init__.py` and (b) referenced by `setup.cfg`\n* how to specify third-party dependencies that are available on [PyPI](https://pypi.org/) so that `pip` will install\nthem as well, if necessary, when `pip` installs  this project\n* how to tell the `build` mechanism to identify a specific version of Python, e.g., `py39`, in the “Python Tag” in\nthe file name of the resulting “wheel” (`.whl`) distribution file, so that users will be better informed of the\nPython-version requirement before attempting to install the package\n* how to use a `__main__.py` file as an entry point, which will execute when the import package is invoked on\nthe command line with the `-m` flag (e.g., `python -m my_package`)\n* how to define a console-script entry point, e.g., `my-command`, so that the user can simply and directly invoke\n`my-command` on the command line, rather than `python -m my_package`\n* how to provide for, and process, an optional argument on the command line\n* how to reference, from outside the package, modules, methods, function, etc. that are within the package, in order to, \nfor example, to test them\n*  how to install the project in “editable”/“development” mode during development so that you can test the\nfunctionalities that access resources in packages—without having to rebuild and reinstall the package after every change.\n\nIn addition to reading this README, it will probably be useful to complement this README with inspection of the files \nthemselves. You can examine the configurations and code directly for a given file by accessing it at  the\n[file list](https://github.com/jimratliff/python-demo-package-sample-data-with-code/find/main) for the\n[GitHub repository](https://github.com/jimratliff/python-demo-package-sample-data-with-code). You could also download or clone the repository and use it as a template for a new project.\n\nAll citations/quotations to documentation and other sources were valid as of May 1, 2022.\n\n## Dependencies\n***NOTE: This package requires Python 3.9+.*** This package has been tested only on Python 3.9.12, with pip 22.1.1,\non a Mac (macOS 12.3.1). \n\nThis package also requires [yachalk](https://pypi.org/project/yachalk/). If you install this project (demo-package-sample-data-with-code) as explained later, `pip` should automatically install `yachalk` if it is not \nalready installed on your system. `yachalk` allows console output to be rendered in specified colors. Here, I use it to\nmake error messages red. I incorporated `yachalk` into the code largely to provide an excuse to illustrate how to\ndisclose in the metadata the existence of a third-party dependency that also may need to be installed by `pip`.\n\n## Terminology\nFor my use of “project” and “package” (including “import package” and “distribution package”) see Jim Ratliff,\n“[Unpacking ‘package’ terminology in Python](https://gist.github.com/jimratliff/fc799e74e8104e6b05e6894ce8555144),”\nGitHub Gist.\n\nIn particular, I very deliberately choose:\n* to use hyphens to separate the words in the *project* name: `demo-package-sample-data-with-code`\n  * I also use hyphens in the console-scripts entry-point command: `my-command` that the user can type on the command\n  line in lieu of the [runpy](https://docs.python.org/3/library/runpy.html) syntax:\n  `python -m demo_package_sample_data_with_code`\n* to use underscores to separate the words in the import package name: `demo_package_sample_data_with_code` as well as\nevery other directory below that level.\n\nThis isn’t a gratuitous attempt to confuse the reader but rather in the spirit of\n“[Explicit is better than implicit.](https://peps.python.org/pep-0020/)” In practice, the project name and import\npackage name are often chosen to be the same. It then is ambiguous in many discussion whether that common name is\ninvoked in any particular case (a) because it is the project name or (b) because it is the import package name. My\ndistinguishing the two is meant to help clarify what drives various behaviors. (See also § [Considerations regarding the inter-word delimiter character in a multiword project name](#considerations-regarding-the-inter-word-delimiter-character-in-a-multiword-project-name).)\n\n## Resources for topics not well covered here\nI will not go into a detailed explanation of many aspects of packaging more generally that are well covered\nelsewhere, e.g., the `LICENSE`,  `README`, `pyproject.toml`, and `setup.cfg` files (or why I’m\nusing `setup.cfg` rather than `setup.py`). For these and other such topics, see for example:\n* “[Python Packaging User Guide](https://packaging.python.org/en/latest/),” by the\n[Python Packaging Authority](https://www.pypa.io/en/latest/), and in particular\n    * the tutorial\n“[Packaging Python Projects](https://packaging.python.org/en/latest/tutorials/packaging-projects/)”\n    * § [Configuring metadata](https://packaging.python.org/en/latest/tutorials/packaging-projects#configuring-metadata).\n    (“Static metadata (`setup.cfg`) should be preferred. Dynamic metadata (`setup.py`) should be used only as an escape\n    hatch when absolutely necessary.”)\n    * § “[Including files in source distributions with `MANIFEST.in`](https://packaging.python.org/en/latest/guides/using-manifest-in/#)”\n* § “[Configuring setuptools using `setup.cfg` files](https://setuptools.pypa.io/en/latest/userguide/declarative_config.html)”\nof the [Setuptools User Guide](https://setuptools.pypa.io/en/latest/userguide/index.html).\n* Mark Smith’s presentation at EuroPython 2019: “Publishing (Perfect) Python Packages on PyPi”\n([YouTube](https://www.youtube.com/watch?v=GIF3LaRqgXo),\n[GitHub](https://github.com/judy2k/publishing_python_packages_talk))\n* Vytautas Bielinskas,\n“[Build a Python Module and Share it with Pip Install](https://www.youtube.com/watch?v=FkmtmYFTlYE),” YouTube » Data\nScience Garage, April 11, 2021.\n\nI’m also not going to address here any issues about testing, as important as they are.\n\n## Problem considered: Reliably accessing resources included in the package\nInstead, I focus here on the particular problem, as\n[explained by Barry Warsaw at PyCon US 2018](https://www.youtube.com/watch?v=ZsGFU2qh73E):\n> Resources are files that live within Python packages. Think test data files, certificates, templates, translation\ncatalogs, and other static files you want to access from Python code. Sometimes you put these static files in a package\ndirectory within your source tree, and then locate them by importing the package and using its `__file__` attribute. But\nthis doesn’t work for zip files! \n\nThe previous standard method, `pkg_resources`, is not a great solution:\n> You could use `pkg_resources`, an API that comes with `setuptools` and hides the differences between files on the file\nsystem and files in a zip file. This is great because you don't have to use` __file__`, but it’s not so great because\n`pkg_resources` is a big library and can have potentially severe performance problems, even at import time. … \n\n>The biggest problem with `pkg_resources` is that it has import-time side effects. Even if you’re never going to access\nyour sample data, you’re paying the cost of it because as soon as you import `pkg_resources` you pay this penalty. …\n`pkg_resources` crawls over every entry in your `sys.path` and it builds up these working sets and does all this runtime \nwork. … If you have a lot of things on your `sys.path`, this can be very, very slow. … \n\nThe better solution is:\n> Welcome to `importlib.resources`, a new module and API in Python 3.7 that is also available as a standalone library\nfor older versions of Python. `importlib.resources` is built on top of Python’s existing import system, so it is very\nefficient. \n\nSee also §§ [Accessing Data Files at Runtime](https://setuptools.pypa.io/en/latest/userguide/datafiles.html#accessing-data-files-at-runtime)\nof § [Data Files Support](https://setuptools.pypa.io/en/latest/userguide/datafiles.html) of\n[Building and Distributing Packages with Setuptools](https://setuptools.pypa.io/en/latest/userguide/index.html) by PyPA:\n>Typically, existing programs manipulate a package’s `__file__` attribute in order to find the location of data files.\nHowever, this manipulation isn’t compatible with PEP 302-based import hooks, including importing from zip files and\nPython Eggs. It is strongly recommended that, if you are using data files, you should use `importlib.resources` to\naccess them. \n\nThe following sources explicitly discuss using `importlib.resources` to access resources integrated within a package:\n* Barry Warsaw, “Get your resources faster, with `importlib.resources`,”  PyCon US 2018.\n([YouTube](https://www.youtube.com/watch?v=ZsGFU2qh73E), [slides](https://speakerdeck.com/pycon2018/barry-warsaw-get-your-resources-faster-with-importlib-dot-resources))\n* James Briggs, “How to Build Python Packages for Pip,” YouTube » James Briggs, April 2, 2021.\n([GitHub](https://github.com/jamescalam/aesthetic_ascii)) \n* Damien Martin, “[Making a Python Package](https://kiwidamien.github.io/making-a-python-package.html),”\nGitHub » kiwidamien. See especially\n“[Making a Python Package VI: including data files](https://kiwidamien.github.io/making-a-python-package.html).”\n\nIf the advent of `importlib.resources` in Python 3.7 weren’t enough, an additional function, viz., `files()`, was added\nin Python 3.9. I rely upon the `files()` function in this package, and for that reason this package requires\nPython 3.9.\n\n## Road map for the remainder of this README document\n\n* [`importlib.resources`: Selected basics](#importlibresources-selected-basics)\n* [File and directory structure; rationale for `src/` directory](#file-and-directory-structure-rationale-for-src-directory)\n* [Noncomprehensive comments on selected elements of the project metadata and structure](#Noncomprehensive-comments-on-selected-elements-of-the-project-metadata-and-structure)\n    * Here I address those aspects of the project’s metadata that are particularly relevant to the particular goals of\n    this package.\n* [Finish development and upload to PyPI](#finish-development-and-upload-to-pypi)\n    * Here I walk through—stage by stage, and command by command—the process of:\n        * creating a virtual environment,\n        * finishing your development in a local “editable” or “development” install,\n        * building your project and turning it into a distribution package that can be uploaded to PyPI,\n        * uploading it to TestPyPI, \n        * testing your distribution by created a new virtual environment and installing your project from TestPyPI.\n\n# `importlib.resources`: Selected basics\n## Background\n[`importlib`](https://docs.python.org/3/library/importlib.html), a Python built-in library, appeared in Python 3.1 and\nprovides the Python 3 implementation of the `import` statement.\n\nWithin `importlib`, the module\n[`importlib.resources`](https://docs.python.org/3/library/importlib.html#module-importlib.resources) was added in\nPython 3.7:\n> This module leverages Python’s import system to provide access to resources within packages. If you can import a\npackage, you can access resources within that package. Resources can be opened or read, in either binary or text mode.\n>\n>Resources are roughly akin to files inside directories, though it’s important to keep in mind that this is just a\nmetaphor. Resources and packages do not have to exist as physical files and directories on the file system.\n\n(Note that the\n[documentation for `importlib.resources`](https://docs.python.org/3/library/importlib.html#module-importlib.resources)\nactually refers readers to the\n[documentation for `importlib_resources`](https://importlib-resources.readthedocs.io/en/latest/using.html), which is the\nstandalone backport of `importlib.resources` for earlier versions of Python, for more information on using\n`importlib.resources`.)\n## The `files()` function\nThis demo package calls the\n[function `importlib.resources.files(`*`package`*`)`](https://docs.python.org/3/library/importlib.html#importlib.resources.files),\nwhere *`package`* can be either a name or a module object that conforms to the `Package` requirements. The function\nreturns an instance of abstract base class `importlib.abc.Traversable`. This object has available a subset of\n`pathlib.Path` methods suitable for traversing directories and opening files:\n* `joinpath(`*child*`)`\n* `__truediv__(`*child*`)`\n* `name()`\n* `is_dir()`\n* `is_file()`\n* `iterdir()`\n* `open(`*mode*`='r',`*\\*args*`,`*\\*\\*kwargs*`)`\n* `read_bytes()`\n* `read_text(`*encoding=None*`)`\n\nYou can specify the location of a resource from (a) the name of the package immediately enclosing the resource and\n(b) the name of the resource  by either:\n\n```my_resource_location_as_string = importlib.resources.files('mypackage').joinpath('resource_name')```\n\nor\n\n```my_resource_location_as_string = importlib.resources.files('mypackage') / 'resource_name'```\n\nwhere the latter corresponds to `__truediv__(`*child*`)` method.\n\nTo read the text into a variable:\n\n```text_in_file = my_resource_location_as_string.read_text()```\n\n# This project\n## File and directory structure; rationale for `src/` directory\nThis project has the following initial directory/file structure:\n```\n├── LICENSE\n├── MANIFEST.in\n├── README.md\n├── pyproject.toml\n├── setup.cfg\n├── docs\n├── src\n│   ├── demo_package_and_read_data_files\n│   │   ├── sample_data\n│   │   │   ├── __init__.py\n│   │   │   └── sample_data_e.txt\n│   │   └── sample_data_pi.txt\n│   │   ├── __init__.py\n│   │   ├── __main__.py\n│   │   ├── __version__.py\n│   │   ├── constants.py\n│   │   ├── my_module.py\n└── tests\n    └── test_my_module.py\n```\nBy “initial directory/file structure,” I acknowledge that additional directories will be generated as a result of\n(a) creating a virtual environment, which adds a `venv/` directory, (b) installing the project in an\n“editable”/“development” mode, which adds a `src/demo_package_sample_data_with_code.egg-info` directory, and\n(c) the `build` process, which adds a `dist/` directory. \n\n### Key user-facing names\n| Name | Meaning |\n|------|---------|\n|demo-package-sample-data-with-code | The *project* name, as it appears on PyPI and in a `pip install` |\n|python-demo-package-sample-data-with-code | Name of [GitHub repository](https://github.com/jimratliff/python-demo-package-sample-data-with-code). Independent of any other name|\n|demo_package_sample_data_with_code | Name of the import package |\n|my_module.py | Name of the primary module of Python code|\n\n### The `src/` directory structure\nNote the presence of the `src/` directory at the root level of the project directory and which contains the import \npackage `demo_package_and_read_data_files`. This structure—the presence of this `src/` directory—is certainly not yet a\nstandard but is gaining mindshare. I won’t attempt to justify it myself here, but instead I’ll point you to the\nfollowing resources:\n* § “[A simple project](https://packaging.python.org/en/latest/tutorials/packaging-projects/#a-simple-project)” in\nPyPA’s tutorial “[Packaging Python Projects](https://packaging.python.org/en/latest/tutorials/packaging-projects)”\n* From [Building and Distributing Packages with Setuptools](https://setuptools.pypa.io/en/latest/userguide/index.html),\nPyPA\n  * §§ “[Using a `src/` layout](https://setuptools.pypa.io/en/latest/userguide/declarative_config.html#using-a-src-layout)\nin\n§ “[Configuring setuptools using `setup.cfg` files](https://setuptools.pypa.io/en/latest/userguide/declarative_config.html#configuring-setuptools-using-setup-cfg-files)\n  * §§ “[src-layout](https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#src-layout)” of\n  § “[Automatic discovery](https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#automatic-discovery)”\n> This layout is very handy when you wish to use automatic discovery, since you don’t have to worry about other Python\nfiles or folders in your project root being distributed by mistake. In some circumstances it can be also less\nerror-prone for testing or when using PEP 420-style packages. On the other hand you cannot rely on the implicit\nPYTHONPATH=. to fire up the Python REPL and play with your package (you will need an editable install to be able to do\nthat).\n\n* § “[The structure](https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure)” in Ionel Cristian Mărieș,\n“[Packaging a python library](https://blog.ionelmc.ro/2014/05/25/python-packaging),” ionel’s codelog, September 30,\n2019.\n    * E.g., the `src/` structure (a) ensures that you test your code from the same working directory that your users\n    will see when they install your package, (b) allows simpler packaging code and a simpler `MANIFEST.in`, and\n    (c) results in a much cleaner editable install.\n* Mark Smith’s presentation at EuroPython 2019: “Publishing (Perfect) Python Packages on PyPi”\n([YouTube](https://www.youtube.com/watch?v=GIF3LaRqgXo) at\n[26:00](https://youtube.com/clip/UgkxfbdPcyxLVokUw4w9ug1bhAAqCIeLSA8v),\n[GitHub](https://github.com/judy2k/publishing_python_packages_talk)):\n    * “Here’s why we use the `src/` directory. Our root directory is the directory we’ve been working in. If our code\n    was inthis directory—if we import `helloworld` while running the tests—it would run the code in our current\n    directory. But we don’t want it to do that. We want it to test installing the package and using the code from there.\n    By having the `src/` directory, you’re forcing it to use the version you’ve just installed into the versioned\n    environment.”\n\n## Noncomprehensive comments on selected elements of the project metadata and structure\n### The directory that immediately encloses each resource must be a package and thus must have an `__init__.py` file\n`importlib.resources` considers a file a resource only if the file is in the root directory of a package. A directory\ncannot be a package unless it includes a `__init__.py` file. (It’s fine if this `__init__.py` file is empty. It’s its\nfilename that counts.)\n\nHere the relevant resources are two text files:\n* \"sample_data_pi.txt\"\n    * located at the root of the import package, i.e.,\n    * src/demo_package_and_read_data_files/sample_data_pi.txt\n* \"sample_data_e.txt\"\n    * located within a subfolder, \"sample_data\", of the import package, i.e.,\n    * src/demo_package_and_read_data_files/sample_data/sample_data_e.txt\n\n(Soley to demonstrate throwing a `FileNotFoundError` exception, `my_module.py` also attempts to open\n`meaning_of_life.txt`, but, unsurprisingly, it does not exist.)\n\nIn our case the requirement that each data file be in the root directory of a package  means that the following\ndirectories each must have an `__init__.py` file:\n*  `src/demo_package_and_read_data_files`\n    * This directory would have been a package (and thus would have had an `__init__.py` file) even if we had no data\n    files to worry about, so no additional `__init__.py` file is created for this directory on account of the data\n    files.\n*  `src/demo_package_and_read_data_files/sample_data`\n    * This directory is *not* a directory of Python files, so it would not normally have an `__init__.py` file. Thus,\n    in order to read the data file from inside, we need to artificially add an `__init__.py` file inside.\n### Telling `setuptools` about data files that need to be included in the package\n`setuptools` will not by default incorporate arbitrary non-Python text files into the package when it builds it. Thus,\nyou must tell `setuptools` which such files you want it to include.\n\nIn the methodology I use here, this requires:\n* telling the configuration file `setup.cfg` that you *do* have such files to be included, but not there saying which\nones\n* creating a `MANIFEST.in` file that specifies the data files (including their paths) to be included.\n\n(If you’re using a different methodology, like using `setup.py` rather than `setup.cfg`, see the corresponding\ndiscussion at § [Data File Support](https://setuptools.pypa.io/en/latest/userguide/datafiles.html#) of the\n[Setuptools User Guide](https://setuptools.pypa.io/en/latest/userguide/index.html).)\n\n#### `setup.cfg`: `include_package_data`\nIn the configuration file `setup.cfg`, in its `[options]` section, specify:\n`include_package_data = True`\n#### Create `MANIFEST.in` and itemize the data files\nSee, generally:\n§ “[Including files in source distributions with `MANIFEST.in`](https://packaging.python.org/en/latest/guides/using-manifest-in/#)”\nof “[Python Packaging User Guide](https://packaging.python.org/en/latest/).” \n\nIn the present case, the `MANIFEST.in` file contains the following and only the following:\n```\ninclude src/demo_package_sample_data_with_code/sample_data_pi.txt\ngraft src/demo_package_sample_data_with_code/sample_data\n```\nwhere `graft` ensures, without itemizing them, that all data files in `/sample_data` are included. (See\n§ [`MANIFEST.in` commands](https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands) in the\nPython Packaging User Guide.)\n\nThanks to the structure adopted here, where the `src/` directory separates all the project metadata from the project\ncode/data, the  `MANIFEST.in` perhaps could be made even simpler:\n```\ngraft src\n```\nwhich would ensure that all files within `src/` are included in the distribution.\n(See [Ionel Cristian Mărieș](https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure): “Without `src`\nwritting a `MANIFEST.in` is tricky. … It’s much easier with a `src` directory: just add `graft src` in `MANIFEST.in`.)\n### Establishing a single source for the version number ###\nThis project defines its version number consistent with a frequently expressed desideratum referred to as\n“[single-sourcing the package version](https://packaging.python.org/en/latest/guides/single-sourcing-package-version/)”.\n\nThis requires coordination between three files: (a) `setup.cfg`, (b) `__init__.py`, and (c) `__version__.py`, as\ndescribed below.\n\nFor further discussion on this topic, see the answers to “[Set `__version__` of module from a file when configuring\nsetuptools using `setup.cfg` without `setup.py`](https://stackoverflow.com/questions/72357031/set-version-of-module-from-a-file-when-configuring-setuptools-using-setup),” Stack Overflow, May 23, 2022.\n\n#### Specify the version number in the `__version__.py` file ####\nThe version number is defined in the `__version__.py` file within the root of import package, i.e., at path:\n```\n/path/to/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/__version__.py\n```\nwith the syntax:\n```\n__version__ = '1.0.0'\n```\nThis must be coupled with both an `import` in the `__init__.py` file and the appropriate directive in the `setup.cfg`\nfile.\n#### The `__init__.py` file must import the `__version__` attribute ####\nThe `__init__.py` file, also within the root of the import package, i.e., at path:\n```\n/path/to/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/__init__.py\n```\nmust include the following `import` command:\n```\nfrom . __version__ import __version__\n```\nThis import statement is discussed in detail at https://stackoverflow.com/a/72357032/8401379\n#### The `setup.cfg` file’s `version` declaration  must be properly defined to use the `attr:` special directive\nThe `setup.cfg` file, in the root of the project directory, i.e., at the path\n```\n/path/to/demo-package-sample-data-with-code/setup.cfg\n```\nmust include the following snippet:\n```\n[metadata]\n  …\nversion = attr: demo_package_sample_data_with_code.__version__\n```\n### Disclose any third-party dependencies that are available on PyPI so that they will also be installed if needed\nIn the `[options]` section of `setup.cfg`, I disclose the dependency on `yachalk` with the following snippet:\n```\ninstall_requires = \n    yachalk\n```\nSee “[Configuring setuptools using setup.cfg files](https://setuptools.pypa.io/en/stable/userguide/declarative_config.html)”\nof the SetupTools User Guide for more detail.\n### `setup.cfg`: Add a `python-tag` tag to force file name of resulting “wheel” distribution file to reflect partticular minimum version of Python\nThis discussion will make more sense after you get to the later section § “[The wheel file](#the-wheel-file),” but this\ndiscussion nevertheless logically belongs here.\n\nThis package requires Python 3.9. My `setup.cfg` file originally contained the following excerpt:\n```\nclassifiers =\n    Programming Language :: Python :: 3\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n\n[options]\npackage_dir =\n    = src\npackages = find:\npython_requires = >=3.9\ninclude_package_data = True\n```\nHowever, notwithstanding the `python_requires = >=3.9`, the resulting wheel file’s filename contained a “Python Tag” \nthat was simply `py3` rather than `py39` (which would have indicated a minimum Python version of 3.9).\n\nSo I next changed the `Python` tag in the `Classifiers` section to explicitly state version 3.9. However, that did not\naffect the Python Tag in the file name of the resulting wheel file.\n\nI finally—inspired by [this answer on Stack Overflow](https://stackoverflow.com/a/52613394/8401379)—solved the problem\nby adding the following section to `setup.cfg`:\n```\n[bdist_wheel]\npython-tag = py39\n```\nAfter this change, the file name of the resulting wheel file including the Python Tag string `py39` as I desired.\n\n### Considerations regarding the inter-word delimiter character in a multiword project name\nThe `name` field in `setup.cfg` (or `setup.py`) defines the name of your *project* as it will appear on PyPI. ([Examples\nwill often misleadingly suggest](https://setuptools.pypa.io/en/latest/userguide/declarative_config.html) that this is\nthe *package* name, in some incompletely specified notion of “package,” but the only effect of this field is to\ndetermine the *project* name on PyPI.)\n\nWhen, for better readability, you want your project name to have multiple words, you need to have a nonspace delimiter\nbetween these words. However, no matter what delimiter you prefer, e.g., underscore (`_`), hyphen (`-`), or dot (`.`),\nPyPI will ignore your expressed intention and “[normalize](https://peps.python.org/pep-0503/#normalized-names)” the name\nso that each such delimiter (or even runs of delimiters) is replaced with a single hyphen. So, to avoid confusion, I\nsuggest that, when the project name has two or more words joined by delimiters, you specify hyphens for the delimiter\nfrom the get go, since that’s the form it will ultimately take.\n\nOf course, you might want the *import package* of your project to have the same name as your project; that’s common.\nBut if your project has multiple words separted by delimiters, this won’t be exactly possible. The best you could do is\nname your import package the same as the project, but substituting an underscore for each delimiter. E.g.,\n* Project name: `my-cool-thing`\n* Import package name: `my_cool_thing`\n\n### `__main__.py` is executed when package invoked from command line with `-m` flag; allows for a CLI\nAlthough not appropriate in all cases, including a `__main__.py` file establishes an entry point for the case where\nthe package name is invoked directly (using [runpy](https://docs.python.org/3/library/runpy.html)) from the command line\nwith the `-m` flag, e.g.,:\n```\npython -m demo_package_and_read_data_files\n```\n(Note that the import package name, `demo_package_and_read_data_files` must use underscores as the inter-word delimiter,\neven though the project name uses hyphens for the delimiter.)\n\n(In general, the `-m` flag\n[tells Python to search `sys.path` for the named module and execute its contents as the `__main__` module](https://docs.python.org/3/using/cmdline.html#cmdoption-m). Since the argument is a module name, you must not give a file extension (.py). What’s\ncrucial for us here is that package names (including namespace packages) are also permitted. When a package name is\nsupplied instead of a normal module, the interpreter will execute `<pkg>.__main__` as the main module.)\n\nThus the user can simply reference the package rather than a particular module within the package.\n\nThis can also be combined with reading additional arguments entered on the command line.\n\nSee § “[`__main__.py` in Python Packages](https://docs.python.org/3/library/__main__.html#main-py-in-python-packages)”\nin “[`__main__` — Top-level code environment](https://docs.python.org/3/library/__main__.html),” docs.python.org.\n\nNote that\n[the contents of `__main__.py` typically aren’t fenced with `if __name__ == '__main__'` blocks](https://docs.python.org/3/library/__main__.html#id1).\n\nLoosely, `__main__.py` is to a package what a `main()` function is to a console script. (E.g.,\n“[main functions are often used to create command-line tools by specifying them as entry points for console scripts](https://docs.python.org/3/library/__main__.html#packaging-considerations).”)\n\n## Establish a console-script entry-point command for a user to execute the program\nAdding a console script entry point allows the package to define a user-friendly name for installers of the package to\nexecute. See § “[Entry Points](https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points)” of\n[Building and Distributing Packages with Setuptools](https://setuptools.pypa.io/en/latest/userguide/index.html), PyPA.\n\nTo implement such a user-friendly command name, here `my-command`, we need to make modifications to (a) `setup.cfg` and\n(b) `__init__.py`.\n### In `setup.cfg`\n```\n[options.entry_points]\nconsole_scripts =\n    my-command = demo_package_sample_data_with_code.__main__:main\n```\n### In `__init__.py`\n```\n# The following import was apparently required to get the  console script\n# entry point to work. Without this import, I got errors at run time (when\n# issuing the command `demo-command` on the command line, but not when using\n# `runpy`, i.e., `python -m`):\n#    AttributeError: module 'demo_package_sample_data_with_code' has no attribute 'main'\n# Thus by importing main() in __init__.py, `main` was in the proper namespace.\n\nfrom . __main__ import main\n```\n\n## Allow for the user to optionally enter an argument on the command line\nAs an illustration of the functionality, the code uses the built-in\n[argparse](https://docs.python.org/3/library/argparse.html) module allows the user to (optionally) enter an argument on\nthe command line on the same line as the command to run the program. (Also see Tshepang Lekhonkhobe’s\n[excellent `argparse` tutorial](https://docs.python.org/3/howto/argparse.html).)\n\nYou can see how this functionality is implemented in this project in the `check_CLI_for_user_input()` function, which is\ncalled from `main()`, both in `my_module.py`.\n\n## Accessing the package’s modules, functions, etc. from outside the package\nIn the file and directory structure diagram above, you’ll see in the root of the project directory the module\n`tests/test_my_module.py`. This is outside the scope of the code that will be installed by `pip`, which is limited to\nthe `src/` directory. The `tests` directory is in the standard location for the “`src`” directory/file structure that \nis adopted here (though there is also a popular train of thought that tests should be distributed within the source\ndirectory). (See, e.g., “[Where to Put Tests?](http://pythonchb.github.io/PythonTopics/where_to_put_tests.html)”: “In Python packaging, there is no consensus on where you should put your\ntest suite.”)\n\nThe module `test_my_module.py` is included to illustrate how a module in this location outside of the installed \npackage can reference entities within the installed package. This can be seen in the two `import` statements in\n`test_my_module.py`:\n```\nfrom demo_package_sample_data_with_code.my_module import print_value_from_resource\nimport demo_package_sample_data_with_code.constants as source\n```\n# Finish development and upload to PyPI\nHere I walk through—stage by stage, and command by command—the process of:\n* creating a virtual environment,\n* finishing your development in a local “editable” or “development” install,\n* building your project and turning it into a distribution package that can be uploaded to PyPI,\n* uploading it to TestPyPI, \n* testing your distribution by created a new virtual environment and installing your project from TestPyPI.\n\n\nA full transcript (where only some of the output is condensed) of this process is available at:\n[docs/Transcript_of_installation_and_testing.txt](https://github.com/jimratliff/python-demo-package-sample-data-with-code/blob/main/docs/Transcript_of_installation_and_testing.txt).\n\n## Create a virtual environment\nFrom here on, I’m assuming that you’re using a virtual environment. I use\n[venv](https://docs.python.org/3/library/venv.html), noting that, per the Python Packaging User Guide\n(§ “[Installing packages using pip and virtual environments](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment)”):\n“If you are using Python 3.3 or newer, the `venv` module is the preferred way to create and manage virtual\nenvironments.”\n\nGenerally, see:\n* [§ 12. Virtual Environments and Packages](https://docs.python.org/3/tutorial/venv.html) of Python Docs.\n* Brett Cannon, “[A quick-and-dirty guide on how to install packages for Python](https://snarky.ca/a-quick-and-dirty-guide-on-how-to-install-packages-for-python/),” *Tall, Snarky Canadian*, January 21, 2020. Though not\nsignaled by its title, there is substantial discussion of the why and how of using a virtual environment.\n\n## Install the project in “editable mode”/“development mode” in order to test and further develop it\nWhen still developing the package, and before ever publishing it to PyPI (or even TestPyPI), we want to install the\npackage from the local source (and therefore *not* from PyPI). Moreover, we do so in “editable mode,” which is\nessentially “[setuptools develop mode](https://setuptools.pypa.io/en/latest/userguide/development_mode.html).” In this\nmode, you continue to work on the code without needing to rebuild and reinstall the project every time you make a\nchange.\n\n(See generally § “[Local project installs](https://pip.pypa.io/en/latest/topics/local-project-installs/)” in the\n[`pip` documentation](https://pip.pypa.io/en/latest/), and in particular\n§§ “[Editable installs](https://pip.pypa.io/en/latest/topics/local-project-installs/#editable-installs).”)\n\nTo install this package in “editable mode”/“development mode,” we use `pip install` with the `-e` option:\n```\npython -m pip install -e path/to/SomeProject\n```\n(See “[‘Editable’ Installs](https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs)” in the\n[`pip` » commands » `install` documentation](https://pip.pypa.io/en/stable/cli/pip_install/#).) (Also, here’s\n[an argument by Brett Cannon for using `python -m pip install -e .` instead of ` pip install -e .`](https://snarky.ca/why-you-should-use-python-m-pip/).)\n\nAs the [documentation](https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs) well explains:\n> Editable installs allow you to install your project without copying any files. Instead, the files in the development\ndirectory are added to Python’s import path. This approach is well suited for development and is also known as a\n“development installation”.\n>\n> With an editable install, you only need to perform a re-installation if you change the project metadata (eg: version,\nwhat scripts need to be generated etc). You will still need to run build commands when you need to perform a compilation\nfor non-Python code in the project (eg: C extensions).\n\nFor example, to navigate to the project directory, create and activate a virtual environment, and install the project\nin editable mode:\n```\n% cd path/to/demo_package_and_read_data_files\n% python3 -m venv venv\n% source venv/bin/activate\n% python -m pip install --upgrade pip\n% python -m pip install -e .\n```\n(In the `pip` command the “.” in `pip install -e .` represents the path to the project.) \n\nInstalling in editable mode allows you to edit the code and immediately see the changes without having to rebuild and\nreinstall the package.\n\n## Build the distribution package to upload to PyPI\nWhen development matures to the point of having a version of the project you want to distribute via PyPI, the next step\nis to generate a [distribution package](https://packaging.python.org/en/latest/glossary/#term-Distribution-Package) for\nthe project.\n\n### Install `build`\nThe first step is to install [`build`](https://pypa-build.readthedocs.io/en/stable/index.html) into your virtual\nenvironment (or upgrade if it already exists there) with\n```\n% python -m pip install --upgrade build\n```\n\n### Build the distribution\nSee\n§ “[Generating distribution archives](https://packaging.python.org/en/latest/tutorials/packaging-projects/#generating-distribution-archives)\nof “[Packaging Python Projects](https://packaging.python.org/en/latest/tutorials/packaging-projects/),” Python\nPackaging User Guide » Tutorials.\n```\n% cd path/to/demo_package_and_read_data_files\n```\n\nIf this is your first time building distribution files for this project, continue immediately with the next step.\nHowever, if you’ve already built distribution files for earlier versions of this project, you might already have a\n`dist` directory at `path/to/my-project/dist`. In that case, move any of those earlier distribution files out of that\ndirectory. Otherwise, later steps will cause you to re-upload them to TestPyPI/PyPI, which you don’t want.\n```\n% python -m build\n```\n\nThis generates a fair amount of output and creates a `dist` directory at the project root, which now contains the \nfollowing two files:\n```\ndemo_package_sample_data_with_code-0.0.1-py39-none-any.whl\ndemo-package-sample-data-with-code-0.0.1.tar.gz\n```\n(If you didn’t already, be sure to remove older versions of the distribution files from this directory. Otherwise, later\nsteps will cause you to re-upload those obsolete files to TestPyPI/PyPI, which can cause an error.)\n#### The wheel file\nThe first of these, with the `.whl` extension is a “wheel” file, or\n“[built distribution](https://packaging.python.org/en/latest/glossary/#term-Built-Distribution).” It contains files\nand metadata that need only to be moved to an appropriate location on the target system in order to be installed.\n\nTo better understand the file name of the wheel file (and in particular the\n[platform compatibility tags](https://packaging.python.org/en/latest/specifications/platform-compatibility-tags/) after\nthe version number), see\n§ “[File name convention](https://peps.python.org/pep-0427/#file-name-convention)” of\n[PEP 427 – The Wheel Binary Package Format 1.0](https://peps.python.org/pep-0427/#file-name-convention), supplemented\nby [PEP 425 – Compatibility Tags for Built Distributions](https://peps.python.org/pep-0425/). See also Brett Cannon,\n“[The challenges in designing a library for PEP 425 (aka wheel tags)](https://snarky.ca/the-challenges-in-designing-a-library-for-pep-425/),” *Tall, Snarky Canadian*, June 1, 2019.\n\nIn the present case:\n* `py39`: (“Python Tag”) Iindicates that the package requires Python 3.9.\n* `none`: (“ABI Tag,” referring to\n[Application Binary Interface](https://en.wikipedia.org/wiki/Application_binary_interface)) Indicates which Python ABI\nis required by any included extension modules. `none`\n“[represent[s] the case of not caring. This is typically seen with py interpreter tags since you shouldn't care about what ABI an interpreter supports if you're targeting just the Python language and not a specific interpreter](https://snarky.ca/the-challenges-in-designing-a-library-for-pep-425/).”\n* `any`: (“Platform Tag”) \n#### The source archive\nThe second of these, with the `tar.gz` extension, is a\n“[source archive](https://packaging.python.org/en/latest/glossary/#term-Source-Archive),” that contains raw source code.\n\nYou should always upload a source archive and provide built archives for the platforms your project is compatible with.\nIn this case, our example package is compatible with Python on any platform so only one built distribution is needed.\n\n## Upload the distribution and then install it from scratch to test it\n### Install `twine`\nTwine ([project on PyPI](https://pypi.org/project/twine/), [docs](https://twine.readthedocs.io/en/stable/)) is a utility\nfor publishing Python packages to PyPI and other repositories. Twine is the method adopted here to upload the\nbuilt distribution files to both TestPyPI and PyPI. (See also [Uploading the distribution archives](https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives) in the Python Packaging User Guide.)\n\nTo install `twine`:\n```\n% pip install --upgrade twine\n```\n### `check` your `dist/*` with `twine`\n```\n% twine check dist/*\nChecking dist/demo_package_and_read_data_files-0.0.1-py39-none-any.whl: PASSED\nChecking dist/demo_package_and_read_data_files-0.0.1.tar.gz: PASSED\n```\n### Test your entire distribution work flow with TestPyPI\n[TestPyPI](https://test.pypi.org/) is a separate Python package index that allows you to “dry run” your packaging\nprocedures to make sure everything works before uploading it to the main PyPI. See [Using TestPyPI](https://packaging.python.org/en/latest/guides/using-testpypi/) in the Python Packaging User Guide.\n#### Upload to test.pypi.org\nSee “[Using TestPyPI](https://packaging.python.org/en/latest/guides/using-testpypi/#using-test-pypi),” of the Python\nPackaging User Guide, PyPA.\n\n```\n% twine upload --repository testpypi dist/*\nUploading distributions to https://test.pypi.org/legacy/\nEnter your username: myusername\nEnter your password: ••••••••\nUploading demo_package_and_read_data_files-0.0.1-py39-none-any.whl\nUploading demo_package_and_read_data_files-0.0.1.tar.gz\nView at:\nhttps://test.pypi.org/project/demo-package-and-read-data-files/0.0.1/\n```\n\n#### Test install the package locally from TestPyPI\nWhen visiting the above link, the page displays a command for installing the package:\n```\npip install -i https://test.pypi.org/simple/ demo-package-and-read-data-files==0.0.1\n```\n\n##### Create a new directory and corresponding new virtual environment\n\n```\n% cd GitHub_repos \n% mkdir test_package\n% python3 -m venv venv\n% source venv/bin/activate\n% python -m pip install --upgrade pip\n```\n##### Install package from TestPyPI\n###### When there are no third-party dependencies that must be installed from PyPI\nWhen your project has no third-party dependencies (or all of the third-party are on TestPyPI, an unlikely occurrence\nbecause TestPyPI regularly prunes itself) \n\n```\n% pip install -i https://test.pypi.org/simple/ demo-package-and-read-data-files==0.0.1\n```\n###### When there *are* third-party dependencies that must be installed from PyPI\nWhen there are third-party dependencies that are not available on TestPyPI but are available on\nPyPI, you need to tell `pip` to also look on PyPI. (See “[Using TestPyPI](https://packaging.python.org/en/latest/guides/using-testpypi/#using-test-pypi),” of the Python\nPackaging User Guide, PyPA.)\n\n```\npip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ my-project\n```\nNote that here you aren’t disclosing which dependency to get where but rather: if `pip` can’t find a dependency on\nTestPyPI, `pip` should then look on PyPI.\n\n\n# Running the program from the command line\n## Running the program with no CLI argument\nWhen the user does not supply a CLI argument, a default message is printed:\n\n> The user declined to share any knowledge. 🙁\n\n```\n% python -m demo_package_and_read_data_files\nI am here, in __main__.py.\n\n# # # # # # # # # # # # # # #\n\nThe user declined to share any knowledge. 🙁\n\nπ: 3.14159265358979323846\ne: 2.71828182845904523536\n\nPlease don’t be concerned when you see the following error message. It’s expected.\n\nOops! The data file «meaning_of_life.txt» wasn’t found at this location:\n»» /Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt.\n[Errno 2] No such file or directory: '/Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt'\nMeaning of life: I have no clue 🤪\n\n* * * * * * * * * * * * * * *\n```\n\n## Running the program with CLI argument a sequence of words\nAfter installing, you can run the program from the command line with either of the following two syntaxes:\n```\npython -m demo_package_sample_data_with_code <OPTIONAL_ARGUMENT>\n```\nor\n```\nmy-command <OPTIONAL_ARGUMENT>\n```\n\nThe user is meant to enter text at the command line. If the user does not quote the string, it will be reported as a\nlist of words, which will be `.join()`ed into a single string of space-separated words.\n```\npython -m demo_package_sample_data_with_code Wu Zetian was the only female emperor in China’s history\nI am here, in __main__.py.\n\n# # # # # # # # # # # # # # #\n\nThe user chose to share: Wu Zetian was the only female emperor in China’s history\n\nπ: 3.14159265358979323846\ne: 2.71828182845904523536\n\nPlease don’t be concerned when you see the following error message. It’s expected.\n\nOops! The data file «meaning_of_life.txt» wasn’t found at this location:\n»» /Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt.\n[Errno 2] No such file or directory: '/Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt'\nMeaning of life: I have no clue 🤪\n\n* * * * * * * * * * * * * * *\n```\n## Running the program with CLI argument a quoted string of a sequence of words\n\n```\npython -m demo_package_sample_data_with_code \"Wu Zetian was the only female emperor in China’s history\"\nI am here, in __main__.py.\n\n# # # # # # # # # # # # # # #\n\nThe user chose to share: Wu Zetian was the only female emperor in China’s history\n\nπ: 3.14159265358979323846\ne: 2.71828182845904523536\n\nPlease don’t be concerned when you see the following error message. It’s expected.\n\nOops! The data file «meaning_of_life.txt» wasn’t found at this location:\n»» /Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt.\n[Errno 2] No such file or directory: '/Volumes/Avocado/Users/ada/Documents/GitHub_repos/demo-package-sample-data-with-code/src/demo_package_sample_data_with_code/sample_data/meaning_of_life.txt'\nMeaning of life: I have no clue 🤪\n\n* * * * * * * * * * * * * * *\n```\n## Running the program with CLI argument a call for help: `--help`\n```\npython -m demo_package_sample_data_with_code --help\nI am here, in __main__.py.\n\n# # # # # # # # # # # # # # #\n\nusage: __main__.py [-h] [user_wisdom ...]\n\npositional arguments:\n  user_wisdom  Please share some wisdom\n\noptional arguments:\n  -h, --help   show this help message and exit\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jimratliff/python-demo-package-sample-data-with-code",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "demo-package-sample-data-with-code",
    "package_url": "https://pypi.org/project/demo-package-sample-data-with-code/",
    "platform": null,
    "project_url": "https://pypi.org/project/demo-package-sample-data-with-code/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jimratliff/python-demo-package-sample-data-with-code/issues",
      "Homepage": "https://github.com/jimratliff/python-demo-package-sample-data-with-code"
    },
    "release_url": "https://pypi.org/project/demo-package-sample-data-with-code/1.0.3/",
    "requires_dist": [
      "yachalk"
    ],
    "requires_python": ">=3.9",
    "summary": "Example of PyPI-submittable project that properly reads packaged static text files",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13964713,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4efe25624c3c27b9299036d434bf7a283308f7d01af52105111631ce9e3332a",
          "md5": "9d8b8a9ef541da49ce46d38e15976a96",
          "sha256": "f86ea2c803dea2ab76cb081c2d46322f70135b73640412a895891e0198fdc12c"
        },
        "downloads": -1,
        "filename": "demo_package_sample_data_with_code-1.0.0-py39-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d8b8a9ef541da49ce46d38e15976a96",
        "packagetype": "bdist_wheel",
        "python_version": "py39",
        "requires_python": ">=3.9",
        "size": 22198,
        "upload_time": "2022-05-26T03:08:28",
        "upload_time_iso_8601": "2022-05-26T03:08:28.797206Z",
        "url": "https://files.pythonhosted.org/packages/e4/ef/e25624c3c27b9299036d434bf7a283308f7d01af52105111631ce9e3332a/demo_package_sample_data_with_code-1.0.0-py39-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db42160329c4936138812e6aeb16ea80cfcb036056556422ccc1b2ce50d5b4d3",
          "md5": "20b6683212cd97d8fa91c1288af4ccee",
          "sha256": "5220c02c45fad20fff5d847c9e11b912ccd1218838aab938fc4c9df14bc7c19b"
        },
        "downloads": -1,
        "filename": "demo-package-sample-data-with-code-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20b6683212cd97d8fa91c1288af4ccee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 44721,
        "upload_time": "2022-05-26T03:08:32",
        "upload_time_iso_8601": "2022-05-26T03:08:32.782907Z",
        "url": "https://files.pythonhosted.org/packages/db/42/160329c4936138812e6aeb16ea80cfcb036056556422ccc1b2ce50d5b4d3/demo-package-sample-data-with-code-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aeb011de0e790757e6a766796c6cc8ef27531e36223267b0f683bcee83a1fe1",
          "md5": "f48e99a7a258fbcff57de5923254aa2b",
          "sha256": "0f0253fb37952740159df414c090d7e2fab95150b77fb4504c2a9948e4772e1a"
        },
        "downloads": -1,
        "filename": "demo_package_sample_data_with_code-1.0.3-py39-none-any.whl",
        "has_sig": false,
        "md5_digest": "f48e99a7a258fbcff57de5923254aa2b",
        "packagetype": "bdist_wheel",
        "python_version": "py39",
        "requires_python": ">=3.9",
        "size": 23931,
        "upload_time": "2022-05-28T17:49:49",
        "upload_time_iso_8601": "2022-05-28T17:49:49.976444Z",
        "url": "https://files.pythonhosted.org/packages/4a/eb/011de0e790757e6a766796c6cc8ef27531e36223267b0f683bcee83a1fe1/demo_package_sample_data_with_code-1.0.3-py39-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c7365b93aae2bfa4f8042f47738759c9228dc553ca2a8a0b390aeaf3c84fb8d",
          "md5": "d836ff31502be52b57c8da391f2dff51",
          "sha256": "9e764e0c17bc982fd1e9b07a2f16b684921d4f4c9077bf3e39ac32beb71ea02b"
        },
        "downloads": -1,
        "filename": "demo-package-sample-data-with-code-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d836ff31502be52b57c8da391f2dff51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 50429,
        "upload_time": "2022-05-28T17:49:52",
        "upload_time_iso_8601": "2022-05-28T17:49:52.145755Z",
        "url": "https://files.pythonhosted.org/packages/8c/73/65b93aae2bfa4f8042f47738759c9228dc553ca2a8a0b390aeaf3c84fb8d/demo-package-sample-data-with-code-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4aeb011de0e790757e6a766796c6cc8ef27531e36223267b0f683bcee83a1fe1",
        "md5": "f48e99a7a258fbcff57de5923254aa2b",
        "sha256": "0f0253fb37952740159df414c090d7e2fab95150b77fb4504c2a9948e4772e1a"
      },
      "downloads": -1,
      "filename": "demo_package_sample_data_with_code-1.0.3-py39-none-any.whl",
      "has_sig": false,
      "md5_digest": "f48e99a7a258fbcff57de5923254aa2b",
      "packagetype": "bdist_wheel",
      "python_version": "py39",
      "requires_python": ">=3.9",
      "size": 23931,
      "upload_time": "2022-05-28T17:49:49",
      "upload_time_iso_8601": "2022-05-28T17:49:49.976444Z",
      "url": "https://files.pythonhosted.org/packages/4a/eb/011de0e790757e6a766796c6cc8ef27531e36223267b0f683bcee83a1fe1/demo_package_sample_data_with_code-1.0.3-py39-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c7365b93aae2bfa4f8042f47738759c9228dc553ca2a8a0b390aeaf3c84fb8d",
        "md5": "d836ff31502be52b57c8da391f2dff51",
        "sha256": "9e764e0c17bc982fd1e9b07a2f16b684921d4f4c9077bf3e39ac32beb71ea02b"
      },
      "downloads": -1,
      "filename": "demo-package-sample-data-with-code-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d836ff31502be52b57c8da391f2dff51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 50429,
      "upload_time": "2022-05-28T17:49:52",
      "upload_time_iso_8601": "2022-05-28T17:49:52.145755Z",
      "url": "https://files.pythonhosted.org/packages/8c/73/65b93aae2bfa4f8042f47738759c9228dc553ca2a8a0b390aeaf3c84fb8d/demo-package-sample-data-with-code-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}