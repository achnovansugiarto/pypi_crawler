{
  "info": {
    "author": "ostis-ai",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# py-sc-client\n\n![Tests badge](https://github.com/ostis-ai/py-sc-client/actions/workflows/tests.yml/badge.svg?branch=main)\n![Push badge](https://github.com/ostis-ai/py-sc-client/actions/workflows/push.yml/badge.svg?branch=main)\n\nThe python implementation of the client for communication with\n[the OSTIS Technology web-oriented platform](https://github.com/ostis-ai/ostis-web-platform/blob/develop/docs/main.pdf).\nThis library is compatible with `0.7.0` version of [sc-machine](https://github.com/ostis-ai/sc-machine).\n\nLow-level functionality implemented in **[py-sc-client](https://github.com/ostis-ai/py-sc-client)**:\n\n- ScAddr\n- ScType\n- ScStructure\n- ScTemplate.\n\nHigh-level functionality implemented in **[py-sc-kpm](https://github.com/ostis-ai/py-sc-kpm)**:\n\n- ScKeynodes\n- ScAgent\n- ScModule\n- ScServer\n\n*Warning: there are some of these classes in **py-sc-client** (deprecated)*\n\n## Installation py-sc-client\n\npy-sc-client is available on [PyPI](https://pypi.org/project/py-sc-client/):\n\n```sh\n$ pip install py-sc-client\n```\n\npy-sc-client officially supports Python 3.8+.\n\n## Connection to the sc-server\n\nFirst you need connect to the sc-server.\nIt's implemented using web-socket in another thread.\nDo not forget to disconnect after all operations.\n\n- *sc_client.client*.**connect**(url: str)\n\nConnect to the sc-server by *url*.\n\n```python\nfrom sc_client.client import connect\n\nurl = \"ws://localhost:8090/ws_json\"\nconnect(url)\n```\n\n- *sc_client.client*.**disconnect**()\n\nClose the connection with the sc-server.\n\n```python\nfrom sc_client.client import disconnect\n\ndisconnect()\n```\n\n- *sc_client.client*.**is_connected**()\n\nReturns boolean state of the connection with the sc-server.\n\n```python\nfrom sc_client.client import is_connected\n\nif is_connected():\n    ...\n```\n\n## Base classes\n\n### ScAddr\n\nMinimum element of sc is ScAddr.\nIt contains address of some element in sc-memory.\nKnowing it, you can find related elements, connect edges, check the type, and so on:\n\n- *sc_client.models*.**ScAddr**\n\nClass with int address and usable methods.\nIf value is zero (0), ScAddr is invalid (doesn't exist or there is an error).\n\n```python\nfrom sc_client.models import ScAddr\n\naddr = ScAddr(0)\n# You can initialize ScAddr, but it's not recommended.\n# Usually you will receive valid ones from special functions.\n\nis_valid = addr.is_valid()  # you can check if explicitly\nif addr:  # Or implicitly using magic method __bool__()\n    ...\n\nassert addr == addr  # You can compare ScAddr with ScAddr if they are equal\nassert addr.is_equal(addr)  # Alternative variant\nassert addr == 0  # InvalidTypeError\n```\n\n### ScType\n\nEvery valid sc-element has some type.\nSc-type represents a bit mask. But you don't need to know it.\nThere is the ScType class that contains all methods to check type.\nAll common ScTypes like node const are already defined.\n\n- *sc_client.constants*.**ScType**\n\nClass with type of sc-element.\nIt uses when new elements are created or if it's need to check right type.\nIt contains methods to check if it is node, edge or link, const or var, and so on.\n\nIf you paid attention, the class is in constants submodule.\nThey are already defined, and you can import them from file `sc_client.constants.sc_types`.\nIf you need bitmasks, they are in `sc_client.constants.sc_types.bitmasks`.\n\n```python\nfrom sc_client.constants import sc_types\n\nsc_type_struct = sc_types.NODE_CONST_STRUCT\n\nassert sc_type_struct.is_valid()\n\nassert sc_type_struct.is_node()\nassert not sc_type_struct.is_edge()\nassert not sc_type_struct.is_link()\n\nassert sc_type_struct.is_const()\nassert not sc_type_struct.is_var()\n\nassert sc_type_struct.is_struct()\nassert not sc_type_struct.is_tuple()\n# And many more\n```\n\n## Structure classes\n\nStructure classes are using to work with set of sc-elements.\nScConstruction uses individual elements like nodes and edges,\nScTemplate - triplets\n\n### ScConstruction\n\n- *sc_client.models*.**ScConstruction**\n\nClass that allow to create single nodes, edges and links.\nYou can use aliases to name nodes, and use one element several times in construction.\n\nMethods:\n\n1. *ScConstruction*.**create_node**(sc_type: ScType, alias: str = None)\n2. *ScConstruction*.**create_edge**(sc_type: ScType, src: str | ScAddr, trg: str | ScAddr, alias: str = None)\n3. *ScConstruction*.**create_link**(sc_type: ScType, content: ScLinkContent, alias: str = None)\n\nScConstruction doesn't create elements. To do it use function:\n\n- *sc_client.client*.**create_elements**(constr: ScConstruction)\n\nIt returns list of all elements by ScConstruction *constr*.\n\n```python\nfrom sc_client.client import create_elements\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScConstruction\nfrom sc_client.models import ScLinkContent, ScLinkContentType\n\nconstruction = ScConstruction()  # First you need initialize\n\nconstruction.create_node(sc_types.NODE_CONST, 'node')  # Create node const\n\nlink_content = ScLinkContent(\"Hello!\", ScLinkContentType.STRING)  # Create link content\nconstruction.create_link(sc_types.LINK_CONST, link_content, 'link')  # Create link with that content\n\nconstruction.create_edge(sc_types.EDGE_ACCESS_CONST_POS_PERM, 'node', 'link')\n# Create unaliased edge between previous node\n\naddrs = create_elements(construction)  # List of elements\nassert len(addrs) == 3  # Assert that there is 3 elements as in the construction\nassert all(addrs)  # Assert that they are all valid\n```\n\nAlso, you can generate a construction by template address or its system identifier or scs-template as well as search\nconstructions.\n\n### ScTemplate\n\n- *sc_client.models*.**ScTemplate**\n\nClass that allow to create and search triplets.\nYou can also use aliases to name nodes, and use one element several times in template.\n\nMethods:\n\n1. *ScTemplate*.**triple**(src, edge, trg)\n\n   Template `src-edge-trg`\n2. *ScTemplate*.**triple_with_relation**(src, edge, trg, edge2, src2)\n\n   Two triplets `src-edge-trg` and `src2-edge2-edge`\n\nTo set aliases use syntax:\n\n- `element >> alias` Recommended\n- `(element, alias)`\n- `[element, alias]` Deprecated in version 0.3.0\n\nAfter setting alias you use it without element\n\n#### Search template\n\n- *sc_client.client*.**template_search**(template: ScTemplate, params: ScTemplateParams = None)\n\nReturns list of ScTemplateResult by *template*.\n\n```python\nfrom sc_client.client import template_search\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScTemplate, ScAddr\n\naction_node: ScAddr\nquestion_node: ScAddr\nrrel_1: ScAddr\n# Some ScAddrs for example\n\ntemplate = ScTemplate()\ntemplate.triple(question_node, sc_types.EDGE_ACCESS_VAR_POS_PERM, action_node >> \"_action_node\")\n# Triple `question_node-(*new)edge_access-(*aliased with \"_action_node\")action_node`\ntemplate.triple_with_relation(\n    \"_action_node\",\n    sc_types.EDGE_ACCESS_VAR_POS_TEMP,\n    sc_types.NODE_VAR >> \"_arg_node\",\n    sc_types.EDGE_ACCESS_VAR_POS_TEMP,\n    rrel_1,\n)\n\nsearch_results = template_search(template)\n```\n\nSearch by sc-template address.\n\n```python\nfrom sc_client.client import template_search\nfrom sc_client.models import ScAddr\n\ntemplate: ScAddr  # Template from sc-memory\nsearch_results = template_search(template)\nsearch_result = search_results[0]\n```\n\nYou can also use ScAddr templates:\n\nSearch by sc-template system identifier.\n\n```python\nfrom sc_client.client import template_search\nfrom sc_client.models import ScAddr\n\nlink_node: ScAddr\nsearch_params = {'_link': link_node, '_var_node': 'node_idtf'}\nsearch_results = template_search('my_template', search_params)\nsearch_result = search_results[0]\n\n```\n\nSearch by scs sc-template.\n\n```python\nfrom sc_client.client import template_search\n\nsearch_results = template_search('class _-> _node;;')\nsearch_result = search_results[0]\n```\n\n#### Generate template\n\n- *sc_client.client*.**template_generate**(template: ScTemplate, params: ScTemplateParams = None)\n\nReturns ScTemplateResult by *template*.\n\n```python\nfrom sc_client.client import template_generate\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScTemplate, ScAddr\n\nmain_node: ScAddr\nrelation_node: ScAddr\nlink_node: ScAddr\n# Some ScAddrs for example\n\ntemplate = ScTemplate()\ntemplate.triple_with_relation(\n    main_node >> '_main_node',\n    sc_types.EDGE_D_COMMON_VAR,\n    sc_types.LINK_VAR >> '_link',\n    sc_types.EDGE_ACCESS_VAR_POS_PERM,\n    relation_node,\n)\ntemplate.triple(\n    '_main_node',\n    sc_types.EDGE_ACCESS_VAR_POS_TEMP,\n    (sc_types.NODE_VAR, '_var_node')\n)\ngen_params = {'_link': link_node, '_var_node': 'node_idtf'}\ngen_result = template_generate(template, gen_params)\n```\n\nAlso, you can generate a construction by template address or its system identifier or scs-template as well as search\nconstructions.\n\n#### ScTemplateResult\n\nAfter operations with template you'll receive ScTemplateResult:\n\n- *sc_client.models*.**ScTemplateResult**\n\nIt has all ScAddr and aliases. You can get addrs or iterate.\n\nMethods:\n\n- **len**(*ScTemplateResult*)\n\n  Get count of elements\n- *ScTemplateResult*.**size**()\n\n  The same, deprecated in version 0.3.0\n- *ScTemplateResult*[i: int]\n\n  Get ScAddr by index\n- *ScTemplateResult*.**get**(alias_or_index: str | int)\n\n  Get ScAddr by alias or index\n- **iter**(*ScTemplateResult*), **next**(*ScTemplateResult*)\n\n  Iterate by triplets using `for`\n- *ScTemplateResult*.**for_each_triple**(func: Callable[[ScAddr, ScAddr, ScAddr], Enum])\n\n  Run function with each triple. Deprecated in version 0.3.0\n\n```python\nfrom enum import Enum\n\nfrom sc_client.models import ScTemplateResult, ScAddr\n\ntemplate_result: ScTemplateResult\nlength = len(template_result)  # in the resulting construction\ntemplate_result.size()  # deprecated count of elements, will be removed in version 0.3.0\nfirst_element = template_result[0]  # get an element from the result by index (recommended)\ntemplate_result.get(0)  # get an element from the result by index\narg_node = template_result.get(\"_arg_node\")  # get an element from the result by alias\n\nfor src, edge, trg in template_result:\n    ...\n    # do smth with each triple in the result\n\n\ndef triplets_function(src: ScAddr, edge: ScAddr, trg: ScAddr) -> Enum:\n    ...\n\n\ntemplate_result.for_each_triple(triplets_function)  # to use function to each triple. Deprecated in 0.3.0\n```\n\n## Common functions\n\n### Check element types\n\n- *sc_client.client*.**check_elements**(*addrs: ScAddr)\n\nReturns list of ScTypes for given elements.\n\n```python\nfrom sc_client.client import check_elements\n\nfrom sc_client.client import create_elements\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScConstruction\n\nconstruction = ScConstruction()  # Create elements for example\nconstruction.create_node(sc_types.NODE_CONST)\nconstruction.create_node(sc_types.NODE_VAR)\nelements = create_elements(construction)\n\nelements_types = check_elements(*elements)\nassert elements_types[0].is_node()\nassert not elements_types[1].is_edge()\nassert elements_types[1].is_var()\n```\n\n### Create elements by SCS\n\n- *sc_client.client*.**create_elements_by_scs**(texts: List[Union[str, SCs]])\n\nCreate elements by scs texts in the KB memory,\nput them in structure and returns boolean statuses.\n\n```python\nfrom sc_client.client import create_elements_by_scs\n\nresults = create_elements_by_scs([\"concept1 -> node1;;\", \"concept1 -> ;;\"])\nassert results == [True, False]  # Warning: it doesn't return False, it raised error\n```\n\n```python\nfrom sc_client.client import create_elements_by_scs, create_elements\nfrom sc_client.constants import sc_types\nfrom sc_client.models import SCs, ScConstruction\n\nconstruction = ScConstruction()  # Create output_struct for example\nconstruction.create_node(sc_types.NODE_CONST)\noutput_struct = create_elements(construction)[0]\n\nresults = create_elements_by_scs([SCs(\"concept1 -> node1;;\", output_struct), \"concept1 -> node2;;\"])\nassert results == [True, True]\n```\n\n### Delete elements\n\n- *sc_client.client*.**delete_elements**(*addrs: ScAddr)\n\nDelete *addrs* from the KB memory and returns boolean status.\n\n```python\nfrom sc_client.client import create_elements, set_link_contents\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScConstruction, ScLinkContent, ScLinkContentType\n\nconstruction = ScConstruction()  # Create link for example\nconstruction.create_link(sc_types.LINK_CONST, ScLinkContent(\"One\", ScLinkContentType.STRING))\nlink = create_elements(construction)[0]\n\nlink_content = ScLinkContent(\"Two\", ScLinkContentType.STRING, link)\nstatus = set_link_contents(link_content)\nassert status\n```\n\n### Resolve keynodes\n\n- *sc_client.client*.**resolve_keynodes**(*params: ScIdtfResolveParams)\n\nResolve keynodes from the KB memory by ScIdtfResolveParams and return list of ScAddrs. If it doesn't exist, then create\na new one.\n\n- *sc_client.models*.**ScIdtfResolveParams**\n\nTyped-dict class that contains *idtf* and optional *type*\n\n***Advice: better to use ScKeynodes from py-sc-kpm***\n\n```python\nfrom sc_client.client import resolve_keynodes\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScIdtfResolveParams\n\nparams = ScIdtfResolveParams(idtf='new_keynode_that_doesnt_exist', type=sc_types.NODE_CONST)\naddrs = resolve_keynodes(params)  # list with 1 new keynode addr\n\nparams = ScIdtfResolveParams(idtf='keynode_that_have_to_exist_but_doesnt', type=None)\naddrs = resolve_keynodes(params)  # list with 1 invalid addr\n\nparams = ScIdtfResolveParams(idtf='keynode_that_exists', type=None)\naddrs = resolve_keynodes(params)  # list with 1 keynode addr\n```\n\n## Link content functions\n\n### ScLinkContent class\n\n- *sc_client.models*.**ScLinkContent**\n\nClass that describes content, its type (enum *sc_client.models*.**ScLinkContentType**).\n\nIt uses to create and change links.\n\n```python\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScAddr\n\nstr_content = ScLinkContent(\"str content\", ScLinkContentType.STRING)\nint_content = ScLinkContent(12, ScLinkContentType.INT)\nfloat_content = ScLinkContent(3.14, ScLinkContentType.FLOAT)\n\nlink_addr: ScAddr  # ScAddr of existed link\nlink_content = ScLinkContent(12, ScLinkContentType.INT, link_addr)\n\ndeprecated_type = ScLinkContent(\"use enum without .value\", ScLinkContentType.STRING.value)\n# Value type is deprecated and will be removed in version 0.3.0\n```\n\n### Set links content\n\n- *sc_client.client*.**set_link_contents**(*contents: ScLinkContent)\n\nSet the new content to corresponding links and return boolean status.\n\n```python\nfrom sc_client.client import set_link_contents, create_elements\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstruction\n\nconstruction = ScConstruction()  # Create link for example\nlink_content1 = ScLinkContent(\"One\", ScLinkContentType.STRING)\nconstruction.create_link(sc_types.LINK_CONST, link_content1)\nlink = create_elements(construction)[0]\n\nlink_content2 = ScLinkContent(\"Two\", ScLinkContentType.STRING, link)\nstatus = set_link_contents(link_content2)\nassert status\n```\n\n### Get links content\n\n- *sc_client.client*.**get_link_contents**(*addr: ScAddr)\n\nGet list of contents of the given links.\n\n```python\nfrom sc_client.client import create_elements, get_link_content\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstruction\n\nconstruction = ScConstruction()  # Create link for example\nlink_content1 = ScLinkContent(\"One\", ScLinkContentType.STRING)\nconstruction.create_link(sc_types.LINK_CONST, link_content1)\nlink = create_elements(construction)[0]\n\nlink_content = get_link_content(link)[0]\nassert link_content.data == link_content1.data\n```\n\n### Get links by content\n\n- *sc_client.client*.**get_links_by_content**(*contents: ScLinkContent | str | int)\n\nGet list of lists of links for every content.\n\n```python\nfrom sc_client.client import create_elements, get_links_by_content\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstruction\n\nsearch_string = \"search string\"\n\nconstruction = ScConstruction()  # Create link with search string\nlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)\nconstruction.create_link(sc_types.LINK_CONST, link_content1)\nlink = create_elements(construction)[0]\n\nlinks = get_links_by_content(search_string)[0]\nassert link in links\n```\n\n### Get links by content substring\n\n- *sc_client.client*.**get_links_by_content_substring**(*contents: ScLinkContent | str | int)\n\nGet list of lists of links for every content substring.\n\n```python\nfrom sc_client.client import create_elements, get_links_by_content_substring\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstruction\n\nsearch_string = \"substring1 substring2\"\n\nconstruction = ScConstruction()  # Create link with search string\nlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)\nconstruction.create_link(sc_types.LINK_CONST, link_content1)\nlink = create_elements(construction)[0]\n\nlinks_list = get_links_by_content_substring(*search_string.split(\" \"))\nassert all(link in links for links in links_list)\n```\n\n### Get links contents by content substring\n\n- *sc_client.client*.**get_links_contents_by_content_substring**(*contents: ScLinkContent | str | int)\n\nGet list of lists of contents of the given content substrings.\n***Warning: it returns int addrs***\n\n```python\nfrom sc_client.client import create_elements, get_links_contents_by_content_substring\nfrom sc_client.constants import sc_types\nfrom sc_client.models import ScLinkContent, ScLinkContentType, ScConstruction\n\nsearch_string = \"substring1 substring2\"\n\nconstruction = ScConstruction()  # Create link with search string\nlink_content1 = ScLinkContent(search_string, ScLinkContentType.STRING)\nconstruction.create_link(sc_types.LINK_CONST, link_content1)\nlink_addr = create_elements(construction)[0]\n\nlinks_list = get_links_contents_by_content_substring(*search_string.split(\" \"))\nassert all(link_addr.value in links for links in links_list)\n```\n\n## Events functions\n\n### Create events\n\n- *sc_client.client*.**events_create**(*events: ScEventParams)\n\nCreate an event in the KB memory by ScEventParams and return list of ScEvents.\n\n```python\nfrom sc_client.client import events_create\nfrom sc_client.constants.common import ScEventType\nfrom sc_client.models import ScEventParams, ScAddr\n\n\ndef event_callback(src: ScAddr, edge: ScAddr, trg: ScAddr):\n    ...\n\n\nbounded_elem_addr: ScAddr\nevent_type = ScEventType.ADD_OUTGOING_EDGE\nevent_params = ScEventParams(bounded_elem_addr, event_type, event_callback)\nsc_event = events_create(event_params)\n```\n\n### Check event validity\n\n- *sc_client.client*.**is_event_valid**(event: ScEvent)\n\nReturn boolean status if *event* is active and or not.\n\n*Parameters*: An ScEvent class object.\n*Returns*: The boolean value (true if an event is valid).\n\n```python\nfrom sc_client.client import is_event_valid\nfrom sc_client.models import ScEvent\n\nsc_event: ScEvent\nstatus = is_event_valid(sc_event)\n```\n\n### Destroy events\n\n- *sc_client.client*.**events_destroy**(*events: ScEvent)\n\nDestroy *events* in the KB memory and return boolean status.\n\n```python\nfrom sc_client.client import events_destroy\nfrom sc_client.models import ScEvent\n\nsc_event: ScEvent\nstatus = events_destroy(sc_event)\n```\n\n## Classes\n\n***Warning: these classes are deprecated because they are realized in py-sc-kpm.***\n\nThe library contains the python implementation of useful classes and functions to work with the sc-memory.\n\nThere is a list of classes:\n\n- ScKeynodes\n- ScAgent\n- ScModule\n\n### ScKeynodes\n\nA singleton dictionary object which provides the ability to cache the identifier and ScAddr of keynodes stored in the\nKB.\nCreate an instance of the ScKeynodes class to get access to the cache:\n\n```py\nkeynodes = ScKeynodes()\n```\n\nGet the provided identifier:\n\n```py\nkeynodes[\"identifier_of_keynode\"]  # returns an ScAddr of the given identifier\nkeynodes[\"not_stored_in_kb\"]  # returns an invalid ScAddr if an identifier does not exist in the memory\n```\n\nUse _resolve_identifiers()_ to upload identifiers from _Enum_ classes:\n\n```py\nclass CommonIdentifiers(Enum):\n    RREL_ONE = \"rrel_1\"\n    RREL_TWO = \"rrel_2\"\n\n\nclass QuestionStatus(Enum):\n    QUESTION_INITIATED = \"question_initiated\"\n    QUESTION_FINISHED = \"question_finished\"\n    QUESTION_FINISHED_SUCCESSFULLY = \"question_finished_successfully\"\n    QUESTION_FINISHED_UNSUCCESSFULLY = \"question_finished_unsuccessfully\"\n\n\nkeynodes.resolve_identifiers([QuestionStatus, CommonIdentifiers])\n```\n\n### ScAgent\n\nA class for handling a single ScEvent. Define your agents like this:\n\n```py\nclass MyAgent(ScAgent):\n    action = \"Identifier_of_action_class\"\n\n    def register(self) -> ScEvent:\n        # override method, must return an ScEvent instance\n        params = [\n            MyAgent.keynodes[\"action_initiated\"],\n            common.ScEventType.ADD_OUTGOING_EDGE,\n            MyAgent.run_impl\n        ]\n        event_params = ScEventParams(*params)\n        sc_event = client.events_create(event_params)\n        return sc_event[0]\n\n    @staticmethod\n    def run_impl(action_class: ScAddr, edge: ScAddr, action_node: ScAddr) -> None:\n        # override method, must have 3 args and be static\n        ...\n\n```\n\n### ScModule\n\nA class for handling a multiple ScAgent. Define your modules like this:\n\n```py\nclass MyModule(ScModule):\n    def __init__(self) -> None:\n        agents_to_register = [MyAgent1, MyAgent2]  # list of agent classes\n        super().__init__(agents_to_register)\n```\n\n## Logging\n\nSometimes you might be in a situation where you deal with data that should be correct, but actually is not.\nYou may still want to log that something fishy happened. This is where loggers come in handy.\nDefault logger is preconfigured for you to use.\n\nThere is an example for logs review using root logger:\n\n```py\nimport logging\n\nfrom sc_client import client\n\nroot_logger = logging.getLogger()\nroot_logger.level = logging.DEBUG\nroot_logger.addHandler(logging.StreamHandler())\n\nclient.connect(\"ws://localhost:8090/ws_json\")\n# Connected\nresult = client.create_elements_by_scs([])\n# Send: {\"id\": 2, \"type\": \"create_elements_by_scs\", \"payload\": []}\n# Receive: {\"errors\":[],\"event\":0,\"id\":2,\"payload\":[],\"status\":1}\nclient.disconnect()\n# Disconnected\n```\n\nSee [logging documentation](https://docs.python.org/3/library/logging.html#module-logging) for more information.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ostis-ai/py-sc-client",
    "keywords": "sc-client,sc client",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-sc-client",
    "package_url": "https://pypi.org/project/py-sc-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-sc-client/",
    "project_urls": {
      "Bug Reports": "https://github.com/ostis-ai/py-sc-client/issues",
      "Homepage": "https://github.com/ostis-ai/py-sc-client",
      "Source": "https://github.com/ostis-ai/py-sc-client"
    },
    "release_url": "https://pypi.org/project/py-sc-client/0.2.6/",
    "requires_dist": [
      "websocket-client (>=1.0.1)"
    ],
    "requires_python": ">=3.8, <4",
    "summary": "The Python implementation of the client for communication with the sc-server",
    "version": "0.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17462191,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44f478d2ea6eccc2173ad6ecbea76e3caf33768173481cd0991a694a418de3da",
          "md5": "1bce60e41c504ef5d6d1ea7b37152247",
          "sha256": "792d9585fc90c18c5c93b120187cfe9ed4121ea085fd7132ee5208d1d672a7a0"
        },
        "downloads": -1,
        "filename": "Py_sc_client-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bce60e41c504ef5d6d1ea7b37152247",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 20475,
        "upload_time": "2022-05-17T16:19:55",
        "upload_time_iso_8601": "2022-05-17T16:19:55.704904Z",
        "url": "https://files.pythonhosted.org/packages/44/f4/78d2ea6eccc2173ad6ecbea76e3caf33768173481cd0991a694a418de3da/Py_sc_client-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991b9d6fe124af2db79c070ccfeb30292b6704cd184f53602dc2e059d648f4c0",
          "md5": "17e1fea78227f611f7b3e3fb671ffc5d",
          "sha256": "0f684acc0965c370ddcf3c7aadec7bac3d5e2541c2db565ef301abf36b9a202f"
        },
        "downloads": -1,
        "filename": "Py-sc-client-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "17e1fea78227f611f7b3e3fb671ffc5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 14448,
        "upload_time": "2022-05-17T16:19:57",
        "upload_time_iso_8601": "2022-05-17T16:19:57.379796Z",
        "url": "https://files.pythonhosted.org/packages/99/1b/9d6fe124af2db79c070ccfeb30292b6704cd184f53602dc2e059d648f4c0/Py-sc-client-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a722d08ca5d46490051111e21a6755806439a7bb88b192dcf23d9d23bd12dad",
          "md5": "71c490c073dd074ca0b6cab5ea9f68d0",
          "sha256": "06594412dceecf7c5999d909c7abb9dd67f1dd58f8511e694d611e6d529613b0"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71c490c073dd074ca0b6cab5ea9f68d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 20474,
        "upload_time": "2022-05-17T18:51:53",
        "upload_time_iso_8601": "2022-05-17T18:51:53.202149Z",
        "url": "https://files.pythonhosted.org/packages/2a/72/2d08ca5d46490051111e21a6755806439a7bb88b192dcf23d9d23bd12dad/py_sc_client-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01e95f517a036b4963aabbbc6fc820677b98370720a0c9d7123d954c91aeb6de",
          "md5": "7ffa625b6cc981ffcc52cd82f02d3c58",
          "sha256": "b5c80341ea67df6df68edf6c49f24bf2c239d015329951d57735b3c7ef2f4258"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ffa625b6cc981ffcc52cd82f02d3c58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 14443,
        "upload_time": "2022-05-17T18:51:54",
        "upload_time_iso_8601": "2022-05-17T18:51:54.818603Z",
        "url": "https://files.pythonhosted.org/packages/01/e9/5f517a036b4963aabbbc6fc820677b98370720a0c9d7123d954c91aeb6de/py-sc-client-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8619ab3504ece4788f784a8ea22f4457b1d9defaa1413c1a435c9d76149fa247",
          "md5": "9e22940961581f672de8e36d5bfa9447",
          "sha256": "143b205acfefcbccc393baeef6e173c3d6828407bc070bd86f98117265494933"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e22940961581f672de8e36d5bfa9447",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 20459,
        "upload_time": "2022-05-17T20:19:34",
        "upload_time_iso_8601": "2022-05-17T20:19:34.979916Z",
        "url": "https://files.pythonhosted.org/packages/86/19/ab3504ece4788f784a8ea22f4457b1d9defaa1413c1a435c9d76149fa247/py_sc_client-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d062cf574c1ab02f502663f5a6cf3d99cc2233a28d492599e30105f12095a7",
          "md5": "bfdbb7ba4f5af3390c4c47fa1624b601",
          "sha256": "561fd4416501803c77d02efeb0aeda5c26e1904b4fe83b96b234ceabef8f910a"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bfdbb7ba4f5af3390c4c47fa1624b601",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 14410,
        "upload_time": "2022-05-17T20:19:36",
        "upload_time_iso_8601": "2022-05-17T20:19:36.302118Z",
        "url": "https://files.pythonhosted.org/packages/b4/d0/62cf574c1ab02f502663f5a6cf3d99cc2233a28d492599e30105f12095a7/py-sc-client-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2573fb4d57f2394058e5691a6e42e47795d5e62a851ef43ba731cbdbb843b554",
          "md5": "f043a9f62b092359423879e209926f3c",
          "sha256": "96c469fc5e7103a742f45e52366a9341a03f7adc5dbc8f972e25da1250305ecc"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f043a9f62b092359423879e209926f3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 20957,
        "upload_time": "2022-07-22T16:00:43",
        "upload_time_iso_8601": "2022-07-22T16:00:43.111903Z",
        "url": "https://files.pythonhosted.org/packages/25/73/fb4d57f2394058e5691a6e42e47795d5e62a851ef43ba731cbdbb843b554/py_sc_client-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "868e3b373984eb0d13259ba9bd5e1d2310d6e099bf6ee4ac706032f7fbefb3cd",
          "md5": "06e02afb3b2a7d88a5a7d12fd6b82e7f",
          "sha256": "b3a48c92a4f0cf03221d6d3816532ffdcf10ef76c3b22bc86b147b67e7a0fad9"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06e02afb3b2a7d88a5a7d12fd6b82e7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 15070,
        "upload_time": "2022-07-22T16:00:44",
        "upload_time_iso_8601": "2022-07-22T16:00:44.710269Z",
        "url": "https://files.pythonhosted.org/packages/86/8e/3b373984eb0d13259ba9bd5e1d2310d6e099bf6ee4ac706032f7fbefb3cd/py-sc-client-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddb6a9b13c6fad686f333d1e048e3bca50ed2d32c4fd3987e9a138a79aebdc13",
          "md5": "a1a1cd6ca8f87bd2e268ff45bb57a668",
          "sha256": "f3c0159851d939706b35f3fd2dedde2d37a3090ac3ac9bf653f7e6d70df649bc"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1a1cd6ca8f87bd2e268ff45bb57a668",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 21479,
        "upload_time": "2022-08-23T14:29:37",
        "upload_time_iso_8601": "2022-08-23T14:29:37.070206Z",
        "url": "https://files.pythonhosted.org/packages/dd/b6/a9b13c6fad686f333d1e048e3bca50ed2d32c4fd3987e9a138a79aebdc13/py_sc_client-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77ab0e6b58a8e973485d88a1da22e31602e25c5b6118ba15a9c5b2cef93fe531",
          "md5": "03cf7797af79d9aff05574cdab815fb6",
          "sha256": "3f4bc17b388c39a86f75e2a5424f381ff0b97f8710e2402b7e4a458eaf903e3f"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03cf7797af79d9aff05574cdab815fb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 15468,
        "upload_time": "2022-08-23T14:29:38",
        "upload_time_iso_8601": "2022-08-23T14:29:38.796038Z",
        "url": "https://files.pythonhosted.org/packages/77/ab/0e6b58a8e973485d88a1da22e31602e25c5b6118ba15a9c5b2cef93fe531/py-sc-client-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7f3d39fd86c7443a00224e57af099821b547018c14bab435da2c77c598435e8",
          "md5": "538b0174611730a4fdaf7a7b428e224a",
          "sha256": "9a9bcde34e922b23c74874db13ad986d854e9b44175becdebd5c6be65eb9c0f8"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "538b0174611730a4fdaf7a7b428e224a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 21505,
        "upload_time": "2022-08-25T11:57:41",
        "upload_time_iso_8601": "2022-08-25T11:57:41.689337Z",
        "url": "https://files.pythonhosted.org/packages/b7/f3/d39fd86c7443a00224e57af099821b547018c14bab435da2c77c598435e8/py_sc_client-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85f743add1ee93a3f9290671c788e451e9fbcb69a903351337c25eefee777e1b",
          "md5": "3ae8b714b23f5499ec0e4cc3a92f65ac",
          "sha256": "5b985b4904003c2988a0a33467704bdbaf2bb82ba2f22e5302134f86bb608c9b"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ae8b714b23f5499ec0e4cc3a92f65ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 15499,
        "upload_time": "2022-08-25T11:57:43",
        "upload_time_iso_8601": "2022-08-25T11:57:43.020739Z",
        "url": "https://files.pythonhosted.org/packages/85/f7/43add1ee93a3f9290671c788e451e9fbcb69a903351337c25eefee777e1b/py-sc-client-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c68e7c84ebd7c678bd84be56a7e43da4c2733c61a90f72416f42dcd937dfdfc9",
          "md5": "247d89cb9777c7f2c4cd4cebba73ec0a",
          "sha256": "8184b6a6109d0a1c512dac224a3197f5bb5dcf8eb660ad809a9cc2f9957c39bc"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "247d89cb9777c7f2c4cd4cebba73ec0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 22640,
        "upload_time": "2022-09-16T09:33:22",
        "upload_time_iso_8601": "2022-09-16T09:33:22.465507Z",
        "url": "https://files.pythonhosted.org/packages/c6/8e/7c84ebd7c678bd84be56a7e43da4c2733c61a90f72416f42dcd937dfdfc9/py_sc_client-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c806e816836180d9e01c0a17efa74c360ed0234ae265ff424b38b77f9ae13f0e",
          "md5": "38f97f4c9da71f30e48bae16f5196eea",
          "sha256": "f62115ef7edb77ba2168a2de66e41406c61e45a4455a893acc44703373dba8a6"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "38f97f4c9da71f30e48bae16f5196eea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 16473,
        "upload_time": "2022-09-16T09:33:23",
        "upload_time_iso_8601": "2022-09-16T09:33:23.991467Z",
        "url": "https://files.pythonhosted.org/packages/c8/06/e816836180d9e01c0a17efa74c360ed0234ae265ff424b38b77f9ae13f0e/py-sc-client-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e94e171edeb72e5490615c5d3fdce5972329a26265cebf31223be3ad68ac8fa9",
          "md5": "313d58a53e2634a606d439fce33f6eb1",
          "sha256": "1c6766ffc1d518bc8f2eb69fea41f4536a8ca649a76a9083dcc4d4fb98c9c67f"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "313d58a53e2634a606d439fce33f6eb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 22784,
        "upload_time": "2022-10-06T19:45:26",
        "upload_time_iso_8601": "2022-10-06T19:45:26.153559Z",
        "url": "https://files.pythonhosted.org/packages/e9/4e/171edeb72e5490615c5d3fdce5972329a26265cebf31223be3ad68ac8fa9/py_sc_client-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ba5f73627428c206d029cd538d69bfcec6fee147b1813c9f3aa28872422449e",
          "md5": "75d36295a8beb93978c36e58b850b5e6",
          "sha256": "66271badf621cf54fc2ef1f56ac4f419d72917a94bbdcf112fa48b5b3eac282d"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "75d36295a8beb93978c36e58b850b5e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 16772,
        "upload_time": "2022-10-06T19:45:28",
        "upload_time_iso_8601": "2022-10-06T19:45:28.086686Z",
        "url": "https://files.pythonhosted.org/packages/5b/a5/f73627428c206d029cd538d69bfcec6fee147b1813c9f3aa28872422449e/py-sc-client-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2415d22139cd8467a8e233c04c1cf0592c34ed89c13eed5e5e646f097c479d5",
          "md5": "cc787a1c24a5d5cb5100498f108c3ba6",
          "sha256": "f364a48ee372479b69d09eb1f0149f60a623b383cef6321bfc1f74045ef0cd50"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc787a1c24a5d5cb5100498f108c3ba6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 27550,
        "upload_time": "2023-03-16T10:16:57",
        "upload_time_iso_8601": "2023-03-16T10:16:57.995469Z",
        "url": "https://files.pythonhosted.org/packages/b2/41/5d22139cd8467a8e233c04c1cf0592c34ed89c13eed5e5e646f097c479d5/py_sc_client-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f6bfaef42f0c7e6a7b7bb5d9f8fb95c7ae17a13a28b988ef6d6de6358797efd",
          "md5": "e693fc29a98be1eba9f3ba5a3e6aa48e",
          "sha256": "70a7be866b4b15fb867a3ad4c107f223d7cdf135959444936fa4ddf5bc28744f"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e693fc29a98be1eba9f3ba5a3e6aa48e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 25101,
        "upload_time": "2023-03-16T10:16:59",
        "upload_time_iso_8601": "2023-03-16T10:16:59.895809Z",
        "url": "https://files.pythonhosted.org/packages/2f/6b/faef42f0c7e6a7b7bb5d9f8fb95c7ae17a13a28b988ef6d6de6358797efd/py-sc-client-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd254575528789bfeb41babf5f0c9cb6d67a9c1ca4c94655e8f6059f1ba52921",
          "md5": "20dbab88a1b325c3d0adf210e9b0edbe",
          "sha256": "ac907e262cf92d29df224e1de9fee5397e27bbdb17edb49245c77c56278ce75f"
        },
        "downloads": -1,
        "filename": "py_sc_client-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20dbab88a1b325c3d0adf210e9b0edbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 28120,
        "upload_time": "2023-03-27T14:40:24",
        "upload_time_iso_8601": "2023-03-27T14:40:24.461998Z",
        "url": "https://files.pythonhosted.org/packages/fd/25/4575528789bfeb41babf5f0c9cb6d67a9c1ca4c94655e8f6059f1ba52921/py_sc_client-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a1af28f021c6e7d258c20ff8b34de668b38401ffd02dc122af020a3427ddb05",
          "md5": "5bd50f680ef72dcfbe9484a8f79a71b7",
          "sha256": "4df3ace12f41a0ca53f560de70245f54bae6206309987a881d72f4472c96852d"
        },
        "downloads": -1,
        "filename": "py-sc-client-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5bd50f680ef72dcfbe9484a8f79a71b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 25574,
        "upload_time": "2023-03-27T14:40:26",
        "upload_time_iso_8601": "2023-03-27T14:40:26.351473Z",
        "url": "https://files.pythonhosted.org/packages/2a/1a/f28f021c6e7d258c20ff8b34de668b38401ffd02dc122af020a3427ddb05/py-sc-client-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd254575528789bfeb41babf5f0c9cb6d67a9c1ca4c94655e8f6059f1ba52921",
        "md5": "20dbab88a1b325c3d0adf210e9b0edbe",
        "sha256": "ac907e262cf92d29df224e1de9fee5397e27bbdb17edb49245c77c56278ce75f"
      },
      "downloads": -1,
      "filename": "py_sc_client-0.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20dbab88a1b325c3d0adf210e9b0edbe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8, <4",
      "size": 28120,
      "upload_time": "2023-03-27T14:40:24",
      "upload_time_iso_8601": "2023-03-27T14:40:24.461998Z",
      "url": "https://files.pythonhosted.org/packages/fd/25/4575528789bfeb41babf5f0c9cb6d67a9c1ca4c94655e8f6059f1ba52921/py_sc_client-0.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a1af28f021c6e7d258c20ff8b34de668b38401ffd02dc122af020a3427ddb05",
        "md5": "5bd50f680ef72dcfbe9484a8f79a71b7",
        "sha256": "4df3ace12f41a0ca53f560de70245f54bae6206309987a881d72f4472c96852d"
      },
      "downloads": -1,
      "filename": "py-sc-client-0.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5bd50f680ef72dcfbe9484a8f79a71b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8, <4",
      "size": 25574,
      "upload_time": "2023-03-27T14:40:26",
      "upload_time_iso_8601": "2023-03-27T14:40:26.351473Z",
      "url": "https://files.pythonhosted.org/packages/2a/1a/f28f021c6e7d258c20ff8b34de668b38401ffd02dc122af020a3427ddb05/py-sc-client-0.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}