{
  "info": {
    "author": "Kreusada",
    "author_email": "kreusadaprojects@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Ordinary\n\nEncoding tools for a largely compatible encryption system based on\nthe interpolation of character and ordinal values.\n\nThis library was designed for reverse compatible encryption of characters,\nmeaning you can encrypt or shelter information using this encoder.\n\nOrdinary gets it's name from \"ordinal\", the name given to the numeric equivalent\nof a single character. In Ordinary, ordinals are joined together with a hyphen delimeter to\ngenerate numeric strings otherwise referred to as \"Ordinary strings\".\n\n### Methods\n\n- `encode()`\n    \n    Use the encode method to encode standard text into ordinary.\n\n    ```py\n    encode(\"Hello world!\")\n    >>> 72-101-108-108-111-32-119-111-114-108-100-33\n    ```\n\n    For pretty formatting, encode may take the ``cutoff`` kwarg,\n    which specifies the number of ordinal files per line. This\n    is handy when writing to files. It defaults to None, meaning\n    it will just remain a continuous line. This is fine for shorter encodings.\n\n    ```py\n    encode(\"Hello world!\", cutoff=5)\n    >>> 72-101-108-108-111\n        32-119-111-114-108\n        100-33\n    ```\n\n- `decode()`\n\n    The reverse of `encode()`. Self-explanatory, really.\n\n    ```py\n    decode(\"72-101-108-108-111-32-119-111-114-108-100-33\")\n    >>> \"Hello world!\"\n\n- `parse()`\n\n    Parses the given Ordinary to make sure that it is valid.\n    This function is always used by `decode()`. If there is a syntactical\n    error with the provided Ordinary, OrdinalError will be raised. Otherwise,\n    nothing will be returned.\n\n    ```py\n    parse(\"72-101-108-108-111-32-119-111-114-108-100-33\")\n    >>> None\n    parse(\"72-101-108-108-111-32-AAAAAA-111-114-108-100-33\")\n    >>> OrdinalError: value 'AAAAAA' at position 6 is not a digit\n    ```\n\n- `safeparse()`\n\n    Implements `parse()`, but returns bool instead of raising, or returning\n    None. This may be more useful if you're not wanting to raise exceptions\n    in your program.\n\n    ```py\n    safeparse(\"72-101-108-108-111-32-119-111-114-108-100-33\")\n    >>> True\n    safeparse(\"72-101-BOO-108-111-32-119-111-114-108-100-33\")\n    >>> False\n    ```\n\n- `set_delimiter()`\n\n    Sets the module's delimiter to use when encoding and decoding. The delimiter\n    must meet the following criteria:\n\n    * Must be a string\n    * Must be a single character\n    * Must not be a digit\n\n    You can pass no argument to this function to reset it to the standard (`-`).\n\n    ```py\n    set_delimiter(\"C\")\n    >>> None\n    encode(\"Hello world!\")\n    >>> \"72C101C108C108C111C32C119C111C114C108C100C33\"\n    set_delimiter()\n    encode(\"Hello world!\")\n    >>> \"72-101-108-108-111-32-119-111-114-108-100-33\"\n    ```\n\n- `get_delimiter()`\n\n    Gets the modules current delimiter.\n\n    ```py\n    get_delimiter()\n    >>> \"-\"\n    set_delimiter(\"C\")\n    get_delimiter()\n    >>> \"C\"\n    ```\n\n- `temporary_delimiter()`\n\n    This function is to be used as a context manager. It sets the delimiter whilst\n    the context manager is open.\n\n    ```py\n    with temporary_delimiter(\"C\"):\n        encode(\"Hello world!\")\n        >>> \"72C101C108C108C111C32C119C111C114C108C100C33\"\n    encode(\"Hello world!\")\n    >>> \"72-101-108-108-111-32-119-111-114-108-100-33\"\n    ```\n\n    You can also use the `after` kwarg, used to define the delimiter that is set\n    once the context manager has exited. It defaults to None, meaning it will remember\n    the previously set delimiter and will instead set it to such delimiter.\n\n    ```py\n    get_delimiter()\n    >>> \"-\"\n    with temporary_delimiter(\"C\", after=\"D\"):\n        ...\n    get_delimiter()\n    >>> \"D\"\n    with temporary_delimiter(\"C\"):\n        ...\n    get_delimiter()\n    >>> \"D\"\n    ```\n\n- `load()`\n\n    Loads text from a file and converts, returning a string.\n\n    `fp` is a file-like object to extract from.\n\n    `mode` must be 'd' or 'e', 'e' standing for encode, 'd' standing for encode. These \n    modes decide whether encode() or decode() is used on the string that is returned.\n\n    When using the mode 'e', add 'cutoff' as a keyword argument to be parsed into the\n    encode function.\n\n    Here's an example where loading the text would automatically encode:\n\n    ```py\n    with open(\"file\", \"r\") as fp:\n        load(fp, mode=\"e\")\n    ```\n\n    Same for decoding, just replace the `\"e\"` with `\"d\"`.\n\n- `dump()`\n\n    Convert and write ordinary/text to a file-like object (.write()).\n\n    This function works like `load()`, but there's also a positional argument\n    `text` which comes first, which is the text to write to the file. This argument\n    comes first.\n\n    ```py\n    with open(\"file\", \"r\") as fp:\n        dump(\"Hello world!\", fp, mode=\"e\")\n    ```\n\n    The above example would write `72-101-108-108-111-32-119-111-114-108-100-33`\n    to the file object.\n\n### Installation\n\nInstall using the recommended installer, Pip.\n\n```sh\npip install ordinary\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kreusada/Ordinary",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ordinary",
    "package_url": "https://pypi.org/project/ordinary/",
    "platform": "",
    "project_url": "https://pypi.org/project/ordinary/",
    "project_urls": {
      "Homepage": "https://github.com/Kreusada/Ordinary"
    },
    "release_url": "https://pypi.org/project/ordinary/2.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Encoding tools for a largely compatible encryption system based on the interpolation of character and ordinal values.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12182528,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b90389d3c01784679e9351b3cd6285f2fa6cb119dc6bdb3331e4b18ca6612739",
          "md5": "cc910632a486da982b9b6f8c698cbcdf",
          "sha256": "6a5f022ab9bca06617e5e684a62a4dff1e026ae7353ecd9d4db5a76624b891c3"
        },
        "downloads": -1,
        "filename": "ordinary-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc910632a486da982b9b6f8c698cbcdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4230,
        "upload_time": "2021-11-13T17:07:48",
        "upload_time_iso_8601": "2021-11-13T17:07:48.285900Z",
        "url": "https://files.pythonhosted.org/packages/b9/03/89d3c01784679e9351b3cd6285f2fa6cb119dc6bdb3331e4b18ca6612739/ordinary-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "631ba18795820757f57901b8b7a529a12d705d6f23226cf0490ae3890afd61bf",
          "md5": "78c44daba716b13a486995aab1b6c81f",
          "sha256": "9dc5f56d2c0d1bd656af393494456b5fc195bd5ab7b95b4b8e4c322eb8cf1cf2"
        },
        "downloads": -1,
        "filename": "ordinary-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78c44daba716b13a486995aab1b6c81f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3896,
        "upload_time": "2021-11-13T17:07:49",
        "upload_time_iso_8601": "2021-11-13T17:07:49.611635Z",
        "url": "https://files.pythonhosted.org/packages/63/1b/a18795820757f57901b8b7a529a12d705d6f23226cf0490ae3890afd61bf/ordinary-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a43d5af21984e79838fbc7cc17fec53da6dafefbd0fe2320bfe7e7a5960fbbf",
          "md5": "d8c9a0fdd521ff2e36a2571142a1fdc8",
          "sha256": "ed9039b966688737970d57abebf83fa30578925235d2a53f8748905dbe952c75"
        },
        "downloads": -1,
        "filename": "ordinary-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8c9a0fdd521ff2e36a2571142a1fdc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4245,
        "upload_time": "2021-11-13T20:19:03",
        "upload_time_iso_8601": "2021-11-13T20:19:03.049818Z",
        "url": "https://files.pythonhosted.org/packages/7a/43/d5af21984e79838fbc7cc17fec53da6dafefbd0fe2320bfe7e7a5960fbbf/ordinary-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12bd94de1cae884c802be55355d6d4e118faec5410c6ddddb534b4892dd3589a",
          "md5": "425c441484635571338231de0190072d",
          "sha256": "5fbc2443d4e959b54a71542ee563c42fa5c217198302ed264f134e9a72c34c30"
        },
        "downloads": -1,
        "filename": "ordinary-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "425c441484635571338231de0190072d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3902,
        "upload_time": "2021-11-13T20:19:04",
        "upload_time_iso_8601": "2021-11-13T20:19:04.691182Z",
        "url": "https://files.pythonhosted.org/packages/12/bd/94de1cae884c802be55355d6d4e118faec5410c6ddddb534b4892dd3589a/ordinary-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33204a499499f5a89a0eb402cc74b654743582e315fde9d7f8079d46eda45eac",
          "md5": "57447066d6cad6b0fc682c58046d9a7a",
          "sha256": "50b19995c61b38d05763f6c5639e5cba4fc579ff8dad90755eb5f0977b1f06fd"
        },
        "downloads": -1,
        "filename": "ordinary-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57447066d6cad6b0fc682c58046d9a7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4367,
        "upload_time": "2021-11-27T22:26:07",
        "upload_time_iso_8601": "2021-11-27T22:26:07.087139Z",
        "url": "https://files.pythonhosted.org/packages/33/20/4a499499f5a89a0eb402cc74b654743582e315fde9d7f8079d46eda45eac/ordinary-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c388f1ddac05e8e09b65e6f49001c5e5f046cfc30a972dafaea10a99fae57e82",
          "md5": "81ac42dbad1bce620f9968f0e1dbc8a4",
          "sha256": "1d630e9469c4fc1c131b4be2c9c5e365df7a90c642e6c27f57a3fc7fca5f2058"
        },
        "downloads": -1,
        "filename": "ordinary-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81ac42dbad1bce620f9968f0e1dbc8a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4025,
        "upload_time": "2021-11-27T22:26:08",
        "upload_time_iso_8601": "2021-11-27T22:26:08.663023Z",
        "url": "https://files.pythonhosted.org/packages/c3/88/f1ddac05e8e09b65e6f49001c5e5f046cfc30a972dafaea10a99fae57e82/ordinary-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a5bde8e7d49497054edd2bdd41876674f620f56e6691684f8c22283f480b76a",
          "md5": "1ae9f5fb5f192f44e788a56e6ca38ccc",
          "sha256": "b67f9cf498bb259662ec456c7eb05b4c16d75336c264ef0fa70e276d2dab2a4d"
        },
        "downloads": -1,
        "filename": "ordinary-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ae9f5fb5f192f44e788a56e6ca38ccc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4858,
        "upload_time": "2021-11-28T00:31:46",
        "upload_time_iso_8601": "2021-11-28T00:31:46.537634Z",
        "url": "https://files.pythonhosted.org/packages/5a/5b/de8e7d49497054edd2bdd41876674f620f56e6691684f8c22283f480b76a/ordinary-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ed7234353e35917892edc9307cd8430db9cec584be8e502fc367cd57757169d",
          "md5": "fb9ea54a254d0f85c48f0cc16e7e77a4",
          "sha256": "0aa709eac409b81f517c4ea49ce6a08306412551c48932899ebe18d09f650d94"
        },
        "downloads": -1,
        "filename": "ordinary-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fb9ea54a254d0f85c48f0cc16e7e77a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4507,
        "upload_time": "2021-11-28T00:31:48",
        "upload_time_iso_8601": "2021-11-28T00:31:48.359818Z",
        "url": "https://files.pythonhosted.org/packages/6e/d7/234353e35917892edc9307cd8430db9cec584be8e502fc367cd57757169d/ordinary-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b561448ed684bb278fff5c0205706fd92112863c22696e860d2901b16925bdd2",
          "md5": "d8009a9a31578995b6512e7ed82800ae",
          "sha256": "84e52d53a2517a8541c90132b8e0b1668f7ebcfe801746b6dd78c982364bf4ca"
        },
        "downloads": -1,
        "filename": "ordinary-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8009a9a31578995b6512e7ed82800ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5835,
        "upload_time": "2021-12-01T23:05:22",
        "upload_time_iso_8601": "2021-12-01T23:05:22.192810Z",
        "url": "https://files.pythonhosted.org/packages/b5/61/448ed684bb278fff5c0205706fd92112863c22696e860d2901b16925bdd2/ordinary-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e8b47057b591845264196cfd2943d87b8261940e3406ae5709ab02afd749372",
          "md5": "c4f1df5381d75d5eab8f1c5ea7eff00b",
          "sha256": "f70c53549f195123f0bb65eca5fe4ba4cdf2109a12988d3c34e9870ad7ef696c"
        },
        "downloads": -1,
        "filename": "ordinary-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4f1df5381d75d5eab8f1c5ea7eff00b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5319,
        "upload_time": "2021-12-01T23:05:23",
        "upload_time_iso_8601": "2021-12-01T23:05:23.528881Z",
        "url": "https://files.pythonhosted.org/packages/2e/8b/47057b591845264196cfd2943d87b8261940e3406ae5709ab02afd749372/ordinary-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b561448ed684bb278fff5c0205706fd92112863c22696e860d2901b16925bdd2",
        "md5": "d8009a9a31578995b6512e7ed82800ae",
        "sha256": "84e52d53a2517a8541c90132b8e0b1668f7ebcfe801746b6dd78c982364bf4ca"
      },
      "downloads": -1,
      "filename": "ordinary-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8009a9a31578995b6512e7ed82800ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5835,
      "upload_time": "2021-12-01T23:05:22",
      "upload_time_iso_8601": "2021-12-01T23:05:22.192810Z",
      "url": "https://files.pythonhosted.org/packages/b5/61/448ed684bb278fff5c0205706fd92112863c22696e860d2901b16925bdd2/ordinary-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e8b47057b591845264196cfd2943d87b8261940e3406ae5709ab02afd749372",
        "md5": "c4f1df5381d75d5eab8f1c5ea7eff00b",
        "sha256": "f70c53549f195123f0bb65eca5fe4ba4cdf2109a12988d3c34e9870ad7ef696c"
      },
      "downloads": -1,
      "filename": "ordinary-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c4f1df5381d75d5eab8f1c5ea7eff00b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5319,
      "upload_time": "2021-12-01T23:05:23",
      "upload_time_iso_8601": "2021-12-01T23:05:23.528881Z",
      "url": "https://files.pythonhosted.org/packages/2e/8b/47057b591845264196cfd2943d87b8261940e3406ae5709ab02afd749372/ordinary-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}