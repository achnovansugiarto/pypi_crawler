{
  "info": {
    "author": "Yashpal Ramakrishnaiah <ryashpal.ramakrishnaiah1@monash.edu>, Sonika Tyagi <sonika.tyagi@monash.edu>",
    "author_email": "ryashpal.ramakrishnaiah1@monash.edu, sonika.tyagi@monash.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# EHRQC\n\n## Introduction\nThe performance of the Machine Learning (ML) models is primarily dependent on the underlying data on which it is trained on. Therefore, it is very essential to ensure that the training data is of the highest quality possible. It is a standard practice to perform operations related to handling of the missing values, and outliers before feeding it to machine learning algorithms, for which there are well established procedures and dedicated libraries currently. However, they are generic in nature and do not cover the domain specific nuances. For instance, non standard data sanity checks are to be performed in addition, to remove further errors in the Electronic Health Records (EHRs) that are specific to the medical domain. This utility is aimed at providing functions that can summarize the errors that are specific to the healthcare domain in the data through various visualizations.\n\n## System architecture\n\n![image](https://user-images.githubusercontent.com/56529301/133012627-875f2643-2d43-4e9e-b97b-8f0424cfa94e.png)\n\n## Example Output\n\nRefer [demographics.html](https://github.com/ryashpal/EHRQC/blob/master/demographics.html), [vitals.html](https://github.com/ryashpal/EHRQC/blob/master/vitals.html), [lab_measurements.html](https://github.com/ryashpal/EHRQC/blob/master/lab_measurements.html), [vitals_anomalies.html](https://github.com/ryashpal/EHRQC/blob/master/vitals_anomalies.html), and [lab_measurements_anomalies.html](https://github.com/ryashpal/EHRQC/blob/master/lab_measurements_anomalies.html)\n\n## Installation Guide\n\nInstall the following libraries\n\n    pip install numpy\n    pip install matplotlib\n    pip install yattag\n    pip install scipy\n    pip install sklearn\n    pip install pandas\n\nThen install EHRQC\n\n    pip install EHRQC\n\n## User Guide\n\n### Extract Demographic data from OMOP schema\n\n    from qc.extract import extractOmopDemographics as extractOmopDemographics\n\n    omopDemographicsDf = extractOmopDemographics()\n    omopDemographicsDf.head()\n\n### Extract Vitals data from OMOP schema\n\n    from qc.extract import extractMimicOmopVitals as extractMimicOmopVitals\n\n    mimicOmopVitalsDf = extractMimicOmopVitals()\n    mimicOmopVitalsDf.head()\n\n### Extract Lab Measurements data from OMOP schema\n\n    from qc.extract import extractOmopLabMeasurements as extractOmopLabMeasurements\n\n    omopLabMeasurementsDf = extractOmopLabMeasurements()\n    omopLabMeasurementsDf.head()\n\n### Extract Demographic data from MIMIC schema\n\n    from qc.extract import extractMimicDemographics as extractMimicDemographics\n\n    mimicDemographicsDf = extractMimicDemographics()\n    mimicDemographicsDf.head()\n\n### Extract Vitals data from MIMIC schema\n\n    from qc.extract import extractMimicVitals as extractMimicVitals\n\n    mimicVitalsDf = extractMimicVitals()\n    mimicVitalsDf.head()\n\n### Extract Lab Measurements data from MIMIC schema\n\n    from qc.extract import extractMimicLabMeasurements as extractMimicLabMeasurements\n\n    mimicLabMeasurementsDf = extractMimicLabMeasurements()\n    mimicLabMeasurementsDf.head()\n\n### Demographics Graphs Example 1\n\n    import qc.demographicsGraphs as demographicsGraphs\n\n    data = [\n        [0, 1, 2, 'male', 'white', date.fromisoformat('2020-09-13'), date.fromisoformat('2021-09-13')], \n        [2, 3, 4, np.nan, 'white', date.fromisoformat('2020-09-14'), date.fromisoformat('2021-09-13')], \n        [4, 5, 6, 'female', 'black', date.fromisoformat('2020-09-15'), date.fromisoformat('2021-09-13')], \n        [6, 7, 8, np.nan, 'asian', date.fromisoformat('2020-09-14'), date.fromisoformat('2021-09-13')]]\n    demographicsGraphs.plot(pd.DataFrame(data, columns=['age', 'weight', 'height', 'gender', 'ethnicity', 'dob', 'dod']))\n\n### Demographics Graphs Example 2\n\n    import qc.demographicsGraphs as demographicsGraphs\n\n    df = dbUtils._getDemographics()\n    demographicsGraphs.plot(df)\n\n### Vitals Graphs Example 1\n\n    import qc.vitalsGraphs as vitalsGraphs\n\n    data = [\n        [0, 1, 2], \n        [2, np.nan, 4], \n        [4, 5, np.nan], \n        [0, 1, 2], \n        [2, 3, 4], \n        [4, 5, np.nan], \n        [0, 1, 2], \n        [2, 3, 4], \n        [4, 5, 6], \n        [6, 7, np.nan]]\n    vitalsGraphs.plot(pd.DataFrame(data, columns=['heartrate', 'sysbp', 'diabp']))\n\n### Vitals Graphs Example 2\n\n    import qc.vitalsGraphs as vitalsGraphs\n\n    df = dbUtils._getVitals()\n    vitalsGraphs.plot(df)\n\n### Lab Measurements Graphs Example 1\n\n    import qc.labMeasurementsGraphs as labMeasurementsGraphs\n\n    data = [\n        [0, 1, 2], \n        [2, np.nan, 4], \n        [4, 5, np.nan], \n        [0, 1, 2], \n        [2, 3, 4], \n        [4, 5, np.nan], \n        [0, 1, 2], \n        [2, 3, 4], \n        [4, 5, 6], \n        [6, 7, np.nan]]\n    labMeasurementsGraphs.plot(pd.DataFrame(data, columns=['glucose', 'hemoglobin', 'anion_gap']))\n\n### Lab Measurements Graphs Example 2\n\n    import qc.labMeasurementsGraphs as labMeasurementsGraphs\n\n    df = dbUtils._getLabMeasurements()\n    labMeasurementsGraphs.plot(df)\n\n### Missing Data Imputation Method Comparison Example 1\n\n    import qc.missingDataImputation as missingDataImputation\n\n    df = dbUtils._getVitals()\n    df = df.dropna()\n    meanR2, medianR2, knnR2, mfR2, emR2, miR2 = missingDataImputation.compare()\n    print(meanR2, medianR2, knnR2, mfR2, emR2, miR2)\n\n### Missing Data Imputation Method Comparison Example 2\n\n    import qc.missingDataImputation as missingDataImputation\n\n    df = dbUtils._getLabMeasurements()\n    df = df.dropna()\n    meanR2, medianR2, knnR2, mfR2, emR2, miR2 = missingDataImputation.compare()\n    print(meanR2, medianR2, knnR2, mfR2, emR2, miR2)\n\n### Missing Data Imputation Example 1\n\n    import qc.missingDataImputation as missingDataImputation\n\n    df = dbUtils._getVitals()\n    imputedDf = missingDataImputation.impute(df, 'miss_forest')\n\n### Vitals Anomaly Graphs Example\n\n    import qc.vitalsAnomalies as vitalsAnomalies\n\n    df = dbUtils._getVitals()\n    vitalsAnomalies.plot(df)\n\n### Lab Measurements Anomaly Graphs Example\n\n    import qc.labMeasurementsAnomalies as labMeasurementsAnomalies\n\n    df = dbUtils._getVitals()\n    labMeasurementsAnomalies.plot(df)\n\n### Running the Pipeline Example\n\n    from qc.pipeline import run\n\n    data = run(source='mimic', type='demographics', graph=True, impute_missing=True)\n    print(data.head())\n\n    ## source -> Can be one of 'mimic' or 'omop'  \n    ## type -> Can be one of 'demographics', 'vitals', 'lab_measurements'  \n    ## graph -> If true, the EDA graph will be generated  \n    ## impute_missing -> If true, missing values will be imputed based on the best imputation method for the given data\n\n## Acknowledgements\n\n<img src=\"https://user-images.githubusercontent.com/56529301/155898403-c453ab3f-df17-45c8-ac0a-b314461f5e8f.png\" alt=\"the-alfred-hospital-logo\" width=\"100\"/>\n<img src=\"https://user-images.githubusercontent.com/56529301/155898442-ba8dcbb1-14dd-4c8b-96e6-e02c6a632c0e.png\" alt=\"the-alfred-hospital-logo\" width=\"150\"/>\n<img src=\"https://user-images.githubusercontent.com/56529301/155898475-a5244ab5-e16e-4e5d-b562-6a89a7c2b7b7.png\" alt=\"Superbug_AI_Branding_FINAL\" width=\"150\"/>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ryashpal/EHRQC",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EHRQC",
    "package_url": "https://pypi.org/project/EHRQC/",
    "platform": "",
    "project_url": "https://pypi.org/project/EHRQC/",
    "project_urls": {
      "Homepage": "https://github.com/ryashpal/EHRQC"
    },
    "release_url": "https://pypi.org/project/EHRQC/0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package for performing QC on Electronic Health Record (EHR) data",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13031748,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f23501dd3ee20627143861277ef1756884ea8ca1d1eaa0fd5cbc3237cfd0f270",
          "md5": "e7911cd5d7d04cfb29e14d22ff606adb",
          "sha256": "29fbaa4269f2795575936320376d98b77601a9fa15c8701b0492c3a985be57c5"
        },
        "downloads": -1,
        "filename": "EHRQC-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7911cd5d7d04cfb29e14d22ff606adb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25473,
        "upload_time": "2022-02-22T22:12:02",
        "upload_time_iso_8601": "2022-02-22T22:12:02.721690Z",
        "url": "https://files.pythonhosted.org/packages/f2/35/01dd3ee20627143861277ef1756884ea8ca1d1eaa0fd5cbc3237cfd0f270/EHRQC-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8ce818381f89eeac7d4c0f676ca2936c081d116d64f63270d3b2763447f9c27",
          "md5": "1226e5234124526537792da0c08ba2d6",
          "sha256": "1258b6a72c446b1c6d9c0973caf2b39f0ddc45f496b7c17b5e76951261ac1532"
        },
        "downloads": -1,
        "filename": "EHRQC-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1226e5234124526537792da0c08ba2d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19157,
        "upload_time": "2022-02-22T22:12:04",
        "upload_time_iso_8601": "2022-02-22T22:12:04.722297Z",
        "url": "https://files.pythonhosted.org/packages/f8/ce/818381f89eeac7d4c0f676ca2936c081d116d64f63270d3b2763447f9c27/EHRQC-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "472a58cfc1ccd1e9abaa72364de5dbbc10e79ef3280586ef769e467d6a6c4ed2",
          "md5": "bffce4ffd09fb062b1be03e3c1ae5bd2",
          "sha256": "f3e8066556f208298639170a21642dfbf33f51ffc8899e1b9362766efd9fd894"
        },
        "downloads": -1,
        "filename": "EHRQC-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bffce4ffd09fb062b1be03e3c1ae5bd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26340,
        "upload_time": "2022-02-27T20:04:39",
        "upload_time_iso_8601": "2022-02-27T20:04:39.420249Z",
        "url": "https://files.pythonhosted.org/packages/47/2a/58cfc1ccd1e9abaa72364de5dbbc10e79ef3280586ef769e467d6a6c4ed2/EHRQC-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d634820b1d72ff9fef46e6759b024815986b5ddba2ab317a79e9fff62276cc25",
          "md5": "fdf063e5d1e2c7ce46736eb75143e7ad",
          "sha256": "51eb08c9a055d3ed5be8a28002adc3779b65dbaf3248339d06b1d197a2bedc5f"
        },
        "downloads": -1,
        "filename": "EHRQC-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fdf063e5d1e2c7ce46736eb75143e7ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20247,
        "upload_time": "2022-02-27T20:04:41",
        "upload_time_iso_8601": "2022-02-27T20:04:41.196690Z",
        "url": "https://files.pythonhosted.org/packages/d6/34/820b1d72ff9fef46e6759b024815986b5ddba2ab317a79e9fff62276cc25/EHRQC-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cef82eedcdd561b1311f47d748f473e2d686eaa93671fb72170a30d7cafe0fb1",
          "md5": "7bf0d05d273a824eb0228897974c34af",
          "sha256": "6f17fb91293d3e5ad1fffa378508bf3ffb94ef827c30b70e64cbf656c33757f7"
        },
        "downloads": -1,
        "filename": "EHRQC-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bf0d05d273a824eb0228897974c34af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27577,
        "upload_time": "2022-02-28T09:23:28",
        "upload_time_iso_8601": "2022-02-28T09:23:28.308198Z",
        "url": "https://files.pythonhosted.org/packages/ce/f8/2eedcdd561b1311f47d748f473e2d686eaa93671fb72170a30d7cafe0fb1/EHRQC-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfa5143b8ebcf7053b6575de535bda0ecfcaf8deb58309d7808beae0827c68b8",
          "md5": "a8650ee3fb77a2c58f3115510397debd",
          "sha256": "bfecbfbd5c087187770f67b65719919003513d20e26abdf33a1198297c98e5ea"
        },
        "downloads": -1,
        "filename": "EHRQC-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a8650ee3fb77a2c58f3115510397debd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21446,
        "upload_time": "2022-02-28T09:23:30",
        "upload_time_iso_8601": "2022-02-28T09:23:30.350407Z",
        "url": "https://files.pythonhosted.org/packages/df/a5/143b8ebcf7053b6575de535bda0ecfcaf8deb58309d7808beae0827c68b8/EHRQC-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc479eec9a21a731e4f35e861154cac13f9bcb5b325e570d3b7aa293ce2203af",
          "md5": "f4cb169e23c6e9aed698dee35c2ac198",
          "sha256": "56cc4e923403be02e595bffbb4aae866edf74a0878011661b6510374b079030e"
        },
        "downloads": -1,
        "filename": "EHRQC-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4cb169e23c6e9aed698dee35c2ac198",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27760,
        "upload_time": "2022-02-28T09:35:27",
        "upload_time_iso_8601": "2022-02-28T09:35:27.778870Z",
        "url": "https://files.pythonhosted.org/packages/fc/47/9eec9a21a731e4f35e861154cac13f9bcb5b325e570d3b7aa293ce2203af/EHRQC-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fea91c3ab0ebe8bdb9209303f2a3ed046355e6ed666fa109adfaad9ef9bc65af",
          "md5": "a28eef9c2c3037baf97634c0f29215bc",
          "sha256": "bf562c6e7d3d64e7f13cc706158bb4ba768ec46479cceed7fd64b9e80bef0467"
        },
        "downloads": -1,
        "filename": "EHRQC-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a28eef9c2c3037baf97634c0f29215bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21653,
        "upload_time": "2022-02-28T09:35:29",
        "upload_time_iso_8601": "2022-02-28T09:35:29.473020Z",
        "url": "https://files.pythonhosted.org/packages/fe/a9/1c3ab0ebe8bdb9209303f2a3ed046355e6ed666fa109adfaad9ef9bc65af/EHRQC-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc479eec9a21a731e4f35e861154cac13f9bcb5b325e570d3b7aa293ce2203af",
        "md5": "f4cb169e23c6e9aed698dee35c2ac198",
        "sha256": "56cc4e923403be02e595bffbb4aae866edf74a0878011661b6510374b079030e"
      },
      "downloads": -1,
      "filename": "EHRQC-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4cb169e23c6e9aed698dee35c2ac198",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27760,
      "upload_time": "2022-02-28T09:35:27",
      "upload_time_iso_8601": "2022-02-28T09:35:27.778870Z",
      "url": "https://files.pythonhosted.org/packages/fc/47/9eec9a21a731e4f35e861154cac13f9bcb5b325e570d3b7aa293ce2203af/EHRQC-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fea91c3ab0ebe8bdb9209303f2a3ed046355e6ed666fa109adfaad9ef9bc65af",
        "md5": "a28eef9c2c3037baf97634c0f29215bc",
        "sha256": "bf562c6e7d3d64e7f13cc706158bb4ba768ec46479cceed7fd64b9e80bef0467"
      },
      "downloads": -1,
      "filename": "EHRQC-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a28eef9c2c3037baf97634c0f29215bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21653,
      "upload_time": "2022-02-28T09:35:29",
      "upload_time_iso_8601": "2022-02-28T09:35:29.473020Z",
      "url": "https://files.pythonhosted.org/packages/fe/a9/1c3ab0ebe8bdb9209303f2a3ed046355e6ed666fa109adfaad9ef9bc65af/EHRQC-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}