{
  "info": {
    "author": "Manuel Cabral",
    "author_email": "cabral.manuel@yandex.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# algepy\n<details>\n  <summary>English readme version, click to spand.</summary>\n\n## What is Algepy?\nAlgepy is a Python Package that allows you to manipulate vectors, points and planes. It can be useful to calculate or verify the results of your operations.\n\nThis project is still under development and is not fully developed, it may have some bugs or failures.\n\n- [Installation](#i-en)\n- [Vector](#v-en)\n  - [Basic operations](#v-en-ob)\n  - [Opposite](#v-en-o)\n  - [Magnitude](#v-en-mag)\n  - [Direction Cosine](#v-en-dc)\n  - [Angle between two vectors](#v-en-ang)\n  - [Dot product](#v-en-dot)\n  - [Perpendicular](#v-en-per)\n  - [Proyection](#v-en-proy)\n  - [Cross product](#v-en-cross)\n  - [Triple product](#v-en-triple)\n- [Point](#p-en)\n  - [Basic operations](#p-en-ob)\n  - [Midpoint](#p-en-pm)\n  - [Find the vector between two points](#p-en-v)\n- [Plane](#pl-en)\n  - [General equation](#pl-en-eg)\n  - [Symmetric equation](#pl-en-es)\n- [Plot](#g-en)\n  - [Vector](#g-en-v)\n  - [Point](#g-en-p)\n  - [Plane](#g-en-pl)\n- [Contributions](#c-en)\n\n<a name=\"i-en\"></a>\n## Installation\n> Using [Python Package Index (PyPI)](https://pypi.org/project/algepy/)\n```bash\npip install algepy\n```\n> Manually\n```bash\ngit clone https://github.com/manucabral/algepy.git\ncd algepy\n```\n\n<a name=\"v-en\"></a>\n## Vector\nTo create a vector you simply need to instantiate the Vector class with its components (x, y, z)\n\nBy default it will have 3 dimensions but you can specify the dimension as in the following example.\n```py\nfrom algepy import Vector\nv = Vector(x=1, y=1, z=1)\nu = Vector(x=1, y=1, z=1, dimension=2)\n```\n\n<a name=\"v-en-ob\"></a>\n### Basic operations\nTo add and subtract you just have to use the + and - operator, both operations returns a vector.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> v = Vector(x=0, y=2, z=5)\n>>> u + v\n(1,4,8)\n>>> u - v\n(1,0,-2)\n```\n\n<a name=\"v-en-o\"></a>\n### Opposite\nTo get the opposite of a vector you have to use its `opposite` method, this method returns a new vector.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> u.opposite()\n(-1,-2,-3)\n```\n\n<a name=\"v-en-mag\"></a>\n### Magnitude\nTo get magnitude of the vector, you have to use `magnitude` method, this method returns a decimal number.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> u.magnitude()\n3.7416573867739413\n```\n\n<a name=\"v-en-dc\"></a>\n### Direction Cosine\nTo get the direction angles of a vector you have to use the `direction_cosine` method, this method requires that you specify the axis (x, z, y).\n\nThe method returns radians by default but you can change it to degrees using the `degrees` parameter, the same applies with the `decimals` parameter.\n```py\n>>> from algepy import Vector\n>>> a = Vector(x=2, y=0, z=-2)\n>>> a.direction_cosine(axis='x', degrees=True)\n45.0\n>>> a.direction_cosine(axis='y', degrees=True)\n90.0\n>>> a.direction_cosine(axis='z', degrees=True)\n135.0\n```\n\n<a name=\"v-en-ang\"></a>\n### Angle between two vectors\nTo get the angle between two vectors, use the commutative method `angle`.\n\nThe method returns radians by default but you can change it to degrees using the `degrees` parameter, the same applies with the `decimals` parameter.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=1, z=3)\n>>> v = Vector(x=-1, y=0, z=4)\n>>> u.angle(v, degrees=True, decimals=3)\n36.448\n>>> u.angle(v) # resultado en radianes\n0.6361\n```\n\n<a name=\"v-en-dot\"></a>\n### Dot product\nTo get the dot product between two vectors, use the * operator (do not confuse this operator with the cross product), this operation returns a scalar number.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=-3, y=5, z=8)\n>>> v = Vector(x=1, y=1, z=1)\n>>> u * v\n10\n```\n\n<a name=\"v-en-per\"></a>\n### Perpendicular\nTo know if a vector is perpendicular to another you have to use the `perpendicular` method, this method returns a boolean value (True or False)\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=1, z=3)\n>>> v = Vector(x=-1, y=0, z=4)\n>>> u.perpendicular(v)\nFalse\n```\n<a name=\"v-en-proy\"></a>\n### Proyection\nTo get the projection of one vector in the direction of another you have to use the `projection` method, this method returns a list with two vectors.\n\n`w:` main vector (u) projected on another vector (v)\n\n`n:` other vector (v) projected on main vector (u)\n\nThe main vector is the vector to which we apply the `projection` method.\n\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=1)\n>>> v = Vector(x=0, y=1, z=-1)\n>>> w, n = u.proyection(v)\n>>> w\n(0.0,0.4999999999999999,-0.4999999999999999) # u on v\n>>> n\n(1.0,1.5,1.5) # v on u\n```\n\n<a name=\"v-en-cross\"></a>\n### Cross product\nTo get the cross product between two vectors, you must use the `cross` method, this returns the vector resulting from the cross product.\n\nBear in mind that the vector product is not commutative, since if we change the order of the vectors, the direction and the magnitude of the vector product are preserved, but the sense is reversed.\n```py\n>>> from algepy import Vector\n>>> a = Vector(x=1, y=2, z=3)\n>>> b = Vector(x=0, y=2, z=5)\n>>> v = a.cross(b)\n>>> v\n(4,-5,2) # cross product\n>>> v.perpendicular(a), v.perpendicular(b)\nTrue, True\n```\n\n<a name=\"v-en-triple\"></a>\n### Triple product\nTo get the triple product you have to use the `triple` method, this returns a number and isn't commutative.\n\nDefined `u`, `v` and `w`\nWhen using the method on `u`.triple(`v`, `w`) the cross product between `v` and `w` will be applied and then the dot product between `u`(`v`x` w`)\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> v = Vector(x=0, y=2, z=5)\n>>> w = Vector(x=0, y=0, z=2)\n>>> u.triple(v, w)\n4\n>>> u * v.cross(w) # equivalent\n```\n\n<a name=\"p-en\"></a>\n## Point\nTo create a point you simply need to instantiate the Point class with its (x,y,z) components.\n\nYou can only use 3-dimensional points.\n```py\nfrom algepy import Point\n>>> R = Point(x=1, y=1, z=4)\n>>> S = Point(x=3, y=0, z=2)\n```\n<a name=\"p-en-ob\"></a>\n### Basic operations\nTo add and subtract you just have to use the + and - operator, both operations return a point.\n\n<a name=\"p-en-pm\"></a>\n### Midpoint\nTo get the midpoint between two points, use the `midpoint` method, it returns a vector with the components of the midpoint.\n```py\nfrom algepy import Point\n>>> r = Point(x=1, y=2, z=3)\n>>> s = Point(x=3, y=-1, z=2)\n>>> r.midpoint(s)\n(2.0,0.5,2.5)\n```\n\n<a name=\"p-en-v\"></a>\n### Find the vector between two points\nTo get a vector from two points you have to use the `find_vector` method, this returns a vector formed from the two points.\n\n```py\nfrom algepy import Point\n>>> r = Point(x=1, y=1, z=4)\n>>> s = Point(x=3, y=0, z=2)\n>>> r.find_vector(s)\n(2,-1,-2)\n```\n<a name=\"pl-en\"></a>\n## Plane\nTo create a plane we need the normal vector (vector perpendicular to the plane) and some point that belongs to the plane.\n\n```py\n>>> from algepy import Vector, Point, Plane\n>>> n = Vector(x=2, y=-3, z=1)\n>>> p = Point(x=1, y=3, z=1)\n>>> plane = Plane(normal=n, point=p)\n>>> plane\nπ: 2x -3y 1z 6 = 0\n```\n  \nIf we do not pass the normal vector and the default point so these will be null vectors, we can also manually assign the components of the plane by accessing the properties a, b, c and d.\n  \n```py\n>>> from algepy import Vector, Point, Plane\n>>> plane = Plane()\n>>> plane\nπ: 0x 0y 0z 0 = 0\n>>> plane.a = 5\nπ: 5x 0y 0z 0 = 0\n```\n\n<a name=\"pl-en-eg\"></a>\n## General equation\nTo get the implicit or general equation of the plane, we simply access the plane object created previously.\n```py\n>>> plane\nπ: 2x -3y 1z 6 = 0\n```\n\n<a name=\"pl-en-es\"></a>\n## Symmetric equation\nTo get the segmental equation of the plane we must use the `symmetric_equation` method, for this we need at least to have defined the components of the plane (a, b, c and d).\n\nWe can indicate to the method if we want the result as a fraction or by decimals through the `fraction` parameter\n```py\n>>> from algepy import Vector, Point, Plane\n>>> n = Vector(x=2, y=-3, z=1)\n>>> plane = Plane(normal=n)\n>>> plane.d = 6\n>>> plane.symmetric_equation(fraction=True)\n2x/-6 -3y/-6 1z/-6 = 1\n>>> plane.symmetric_equation(decimals=3)\nx/0.333 y/-0.5 z/0.167 = 1\n```\n\n<a name=\"g-en\"></a>\n## Plot\nAlgepy uses pyplot from matplotlib so for this module to work, you need to have this package installed.\n\nFor now the plot only supports 3 dimensions, you can try others dimensions but you will have errors.\n```py\nplot = Plot(name='Example', projection='3d')\nplot.show()\n```\n\n<a name=\"g-en-v\"></a>\n### Plot a vector\nTo add a vector to our plot we need to use the `add_vector` method and also have an origin point for the vector.\n\nOnce this is done we can show the graph with the `show` method.\n```py\n  from algepy import Vector, Point, Plot\n  \n  origin = Point(x=0, y=0, z=0)\n  a = Vector(x=1, y=2, z=3)\n  plot = Plot(name='Vector', projection='3d')\n  plot.add_vector(origin=origin, vector=a)\n  plot.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/testplot.png?raw=true\" title=\"testplot\">\n\n<a name=\"g-en-p\"></a>\n### Plot a point\nTo add a point to our plot we need to use the `add_point` method.\n\nOnce this is done we can show the graph with the `show` method.\n```py\n  from algepy import Point, Plot\n  \n  p = Point(x=1, y=2, z=3)\n  plot = Plot(name='Point', projection='3d')\n  plot.add_point(point=p, color='red')\n  plot.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/testplotpoint.png?raw=true\" title=\"testplotpoint\">\n\n<a name=\"g-en-pl\"></a>\n## Plot a plane\nTo add a plane to our plot we need to use the `add_plane` method.\n\nOnce this is done we can show the graph with the `show` method.\n```py\n  from algepy import Vector, Point, Plane\n \n  n = Vector(x=2, y=-3, z=1)\n  p = Point(x=1, y=3, z=1)\n  plane = Plane(normal=n, point=p)\n  plot = Plot(projection='3d', range=[-5, 5])\n  plot.add_plane(plane=plane, color='red')\n  plot.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/plane.png?raw=true\" title=\"testplotplane\">\n\n<a name=\"c-en\"></a>\n## Contributions\nAll contributions, reports or bug fixes and ideas are welcome. You can go to the issues section and provide your help.\n\n</details>\n\n<details>\n  <summary>Versión español, click para expander.</summary>\n\n## ¿Qué es algepy?\nAlgepy es una libreria de python que te permite manipular vectores de hasta 3 dimensiones, te puede ser útil para calcular o verificar los resultados de tus operaciones.\n\nEste proyecto todavía se encuentra en desarrollo y no está completamente desarrollado, puede tener algunos bugs o fallos.\n\n- [Instalación](#i-es)\n- [Vector](#v-es)\n  - [Operaciones básicas](#v-es-ob)\n  - [Opuesto](#v-es-o)\n  - [Módulo o norma](#v-es-mag)\n  - [Ángulos directores](#v-es-dc)\n  - [Ángulo entre dos vectores](#v-es-ang)\n  - [Producto escalar](#v-es-dot)\n  - [Perpendicularidad](#v-es-per)\n  - [Proyección de vectores](#v-es-proy)\n  - [Producto vectorial](#v-es-cross)\n  - [Producto mixto](#v-es-triple)\n- [Punto](#p-es)\n  - [Operaciones básicas](#p-es-ob)\n  - [Punto medio](#p-es-pm)\n  - [Vector a partir de dos puntos](#p-es-v)\n- [Plano](#pl-es)\n  - [Ecuación general](#pl-es-eg)\n  - [Ecuación segmentaria](#pl-es-es)\n- [Gráfico](#g-es)\n  - [Vector](#g-es-v)\n  - [Punto](#g-es-p)\n  - [Plano](#g-es-pl)\n- [Contribuciones](#c-es)\n\n<a name=\"i-es\"></a>\n## Instalación\n> Utilizando [Python Package Index (PyPI)](https://pypi.org/project/algepy/)\n```bash\npip install algepy\n```\n> Manualmente\n```bash\ngit clone https://github.com/manucabral/algepy.git\ncd algepy\n```\n\n<a name=\"v-es\"></a>\n## Vector\nPara definir un vector simplemente necesitas instanciar la clase Vector con sus componentes (x, y, z)\n\nPor defecto tendrá 3 dimensiones pero puedes especificarle la dimensión como en el siguiente ejemplo.\n```py\nfrom algepy import Vector\nv = Vector(x=1, y=1, z=1)\nu = Vector(x=1, y=1, z=1, dimension=2) # ignorará el eje z\n```\n\n<a name=\"v-es-ob\"></a>\n### Operaciones básica\nPara sumar y restar solamente tienes que utilizar el operador + y -, las dos operaciones devuelve un vector.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> v = Vector(x=0, y=2, z=5)\n>>> u + v\n(1,4,8)\n>>> u - v\n(1,0,-2)\n```\n\n<a name=\"v-es-o\"></a>\n### Opuesto\nPara obtener el opuesto de un vector hay que utilizar su método `opposite`, este método devuelve un nuevo vector.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> u.opposite()\n(-1,-2,-3)\n```\n\n<a name=\"v-es-mag\"></a>\n### Módulo o norma\nPara obtener el módulo o la norma del vector hay que utilizar su método `magnitude`, este método devuelve un número decimal.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> u.magnitude()\n3.7416573867739413\n```\n\n<a name=\"v-es-dc\"></a>\n### Ángulos directores\nPara obtener los ángulos directores de un vector hay que utilizar el método `direction_cosine`, este método requiere que le especifiques el eje obligatoriamente (x, z,  y).\n\nEl método devuelve por defecto en radianes pero lo puedes cambiar a grados mediante el parámetro `degrees`, aplica lo mismo con el parámetro `decimals`.\n```py\n>>> from algepy import Vector\n>>> a = Vector(x=2, y=0, z=-2)\n>>> a.direction_cosine(axis='x', degrees=True) # ángulo director respecto al eje x\n45.0\n>>> a.direction_cosine(axis='y', degrees=True) # ángulo director respecto al eje y\n90.0\n>>> a.direction_cosine(axis='z', degrees=True) # ángulo director respecto al eje z\n135.0\n```\n\n<a name=\"v-es-ang\"></a>\n### Ángulo entre dos vectores\nPara obtener el ángulo que se forma entre dos vectores hay que utilizar el método conmutativo `angle`.\n\nEl método devuelve por defecto en radianes pero lo puedes cambiar a grados mediante el parámetro `degrees`, aplica lo mismo con el parámetro `decimals`.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=1, z=3)\n>>> v = Vector(x=-1, y=0, z=4)\n>>> u.angle(v, degrees=True, decimals=3) # resultado en grados con 3 decimales\n36.448\n>>> u.angle(v) # resultado en radianes\n0.6361\n```\n\n<a name=\"v-es-dot\"></a>\n### Producto escalar\nPara obtener el producto escalar entre dos vectores hay que utilizar el operador * (no confundir este operador con el producto vectorial) esta operación devuelve un número escalar.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=-3, y=5, z=8)\n>>> v = Vector(x=1, y=1, z=1)\n>>> u * v\n10\n```\n\n<a name=\"v-es-per\"></a>\n### Perpendicularidad\nPara saber si un vector es perpendicular a otro hay que utilizar el método `perpendicular`, este método devuelve un valor booleano (True o False)\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=1, z=3)\n>>> v = Vector(x=-1, y=0, z=4)\n>>> u.perpendicular(v)\nFalse\n```\n<a name=\"v-es-proy\"></a>\n### Proyección de vectores\nPara obtener la proyección de un vector en la dirección de otro hay que utilizar el método `projection`, este método devuelve una lista con dos vectores.\n\n`w:` vector principal (u) proyectado en otro vector (v)\n\n`n:` otro vector (v) proyectado en el vector principal (u)\n\nEl vector principal es el vector al que le aplicamos el método `projection`.\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=1)\n>>> v = Vector(x=0, y=1, z=-1)\n>>> w, n = u.proyection(v)\n>>> w\n(0.0,0.4999999999999999,-0.4999999999999999) # vector u proyectado en v\n>>> n\n(1.0,1.5,1.5) # vector v proyectado en u\n```\n\n<a name=\"v-es-cross\"></a>\n### Producto vectorial\nPara obtener el producto vectorial entre dos vectores hay que utilizar el método `cross`, este método devuelve el vector resultado del producto vectorial.\n\nTener en cuenta que el producto vectorial no es conmutativo, ya que si cambiamos el orden de los vectores se conservan la dirección y el módulo del producto vectorial pero se invierte el sentido.\n```py\n>>> from algepy import Vector\n>>> a = Vector(x=1, y=2, z=3)\n>>> b = Vector(x=0, y=2, z=5)\n>>> v = a.cross(b)\n>>> v\n(4,-5,2) # producto vectorial\n>>> v.perpendicular(a), v.perpendicular(b)\nTrue, True\n```\n\n<a name=\"v-es-triple\"></a>\n### Producto mixto\nPara obtener el producto mixto hay que utilizar el método `triple`, este método devuelve un escalar y no es conmutativo así que hay que tener en cuenta lo siguiente.\n\nDefinidos `u`, `v` y `w`\nCuando se utiliza el método en `u`.triple(`v`,`w`) se aplicará primero el producto vectorial entre `v` y `w` para después calcular el producto escalar `u`(`v`x` w`)\n\n```py\n>>> from algepy import Vector\n>>> u = Vector(x=1, y=2, z=3)\n>>> v = Vector(x=0, y=2, z=5)\n>>> w = Vector(x=0, y=0, z=2)\n>>> u.triple(v, w)\n4\n>>> u * v.cross(w) # equivalente\n```\n\n<a name=\"p-es\"></a>\n## Punto\nPara definir un punto simplemente necesitas instanciar la clase Point con sus componentes (x, y, z).\n\nPor ahora solamente puedes utilizar puntos de 3 dimensiones.\n```py\nfrom algepy import Point\n>>> R = Point(x=1, y=1, z=4)\n>>> S = Point(x=3, y=0, z=2)\n```\n<a name=\"p-es-ob\"></a>\n### Operaciones básicas\nPara sumar y restar solamente tienes que utilizar el operador + y -, las dos operaciones devuelve un punto.\n\n<a name=\"p-es-pm\"></a>\n### Punto medio\nPara obtener el punto medio entre dos puntos hay que utilizar el método `midpoint`, este devuelve un vector con los componentes del punto medio.\n```py\nfrom algepy import Point\n>>> r = Point(x=1, y=2, z=3)\n>>> s = Point(x=3, y=-1, z=2)\n>>> r.midpoint(s)\n(2.0,0.5,2.5)\n```\n\n<a name=\"p-es-v\"></a>\n### Vector a partir de dos puntos\nPara obtener un vector a partir de dos puntos hay que utilizar el método `find_vector`, este devuelve un vector formado a partir de los dos puntos.\n\n```py\n>>> from algepy import Point\n>>> r = Point(x=1, y=1, z=4)\n>>> s = Point(x=3, y=0, z=2)\n>>> r.find_vector(s)\n(2,-1,-2)\n```\n  \n<a name=\"pl-es\"></a>\n## Plano\nPara crear un plano necesitamos el vector normal (vector perpendicular al plano) y algún punto que pertenezca al plano.\n\n```py\n>>> from algepy import Vector, Point, Plane\n>>> n = Vector(x=2, y=-3, z=1)\n>>> p = Point(x=1, y=3, z=1)\n>>> plano = Plane(normal=n, point=p)\n>>> plano\nπ: 2x -3y 1z 6 = 0\n```\n  \nSi no le pasamos el vector normal y el punto por defecto estos serán vectores nulos, también podemos asignarle manualmente los componentes del plano accediendo a las propiedades a, b, c y d.\n  \n```py\n>>> from algepy import Vector, Point, Plane\n>>> plano = Plane()\n>>> plano\nπ: 0x 0y 0z 0 = 0\n>>> plano.a = 5\nπ: 5x 0y 0z 0 = 0\n```\n\n<a name=\"pl-es-eg\"></a>\n## Ecuación general\nPara obtener la ecucación implícita o general del plano simplemente accedemos al objeto plano creado anteriormente.\n```py\n>>> plano\nπ: 2x -3y 1z 6 = 0\n```\n\n<a name=\"pl-es-es\"></a>\n## Ecuación segmentaria\nPara obtener la ecucación segmentaria del plano hay que utilizar el método `symmetric_equation`, para esto necesitamos al menos tener definido los componentes del plano (a, b, c y d).\n\nAl método le podemos indicar si el resultado lo queremos como fracción o por decimales mediante el parámetro `fraction`\n```py\n>>> from algepy import Vector, Point, Plane\n>>> n = Vector(x=2, y=-3, z=1)\n>>> plano = Plane(normal=n)\n>>> plano.d = 6\n>>> plano.symmetric_equation(fraction=True)\n2x/-6 -3y/-6 1z/-6 = 1\n>>> plano.symmetric_equation(decimals=3)\nx/0.333 y/-0.5 z/0.167 = 1\n```\n \n<a name=\"g-es\"></a>\n## Gráfico\nAlgepy utiliza pyplot de matplotlib así que para que este módulo te funcione necesitas tener instalado este paquete.\n\nPor ahora el gráfico solamente soporta 3 dimensiones, puedes intentar con otras pero corres el riesgo de obtener varios errores.\n```py\ngrafico = Plot(name='Ejemplo', projection='3d')\ngrafico.show()\n```\n<a name=\"g-es-v\"></a>\n### Gráfico de un vector\nPara agregar un vector a nuestro gráfico necesitamos utilizar el método `add_vector` y además tener un punto de origen para el vector.\n\nUna vez realizado esto podemos mostrar el gráfico con el método `show`\n\n```py\nfrom algepy import Vector, Point, Plot\n  \n  origen = Point(x=0, y=0, z=0)\n  a = Vector(x=1, y=2, z=3)\n  grafico = Plot(name='Vector', projection='3d')\n  grafico.add_vector(origin=origen, vector=a)\n  grafico.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/testplot.png?raw=true\" title=\"testplot\">\n\n<a name=\"g-es-p\"></a>\n### Gráfico de un punto\nPara agregar un punto a nuestro gráfico necesitamos utilizar el método `add_point`\n\nUna vez realizado esto podemos mostrar el gráfico con el método `show`\n```py\n  from algepy import Point, Plot\n  p = Point(x=1, y=2, z=3)\n  grafico = Plot(name='Punto', projection='3d')\n  grafico.add_point(point=p, color='red')\n  grafico.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/testplotpoint.png?raw=true\" title=\"testplotpoint\">\n\n<a name=\"g-es-pl\"></a>\n## Gráfico de un plano\nPara agregar un plano a nuestro gráfico necesitamos utilizar el método `add_plane`\n\nUna vez realizado esto podemos mostrar el gráfico con el método `show`\n```py\n  from algepy import Vector, Point, Plane\n \n  n = Vector(x=2, y=-3, z=1)\n  p = Point(x=1, y=3, z=1)\n  plano = Plane(normal=n, point=p)\n  grafico = Plot(projection='3d', range=[-5, 5])\n  grafico.add_plane(plane=plano, color='red')\n  grafico.show()\n```\n<img src=\"https://github.com/manucabral/algepy/blob/main/assets/plane.png?raw=true\" title=\"testplotplane\">\n\n<a name=\"c-es\"></a>\n## Contribución\nTodas las contribuciones, reportes o arreglos de bugs e ideas es bienvenido. Para esto puedes dirigirte al apartado de issues y aportar tu ayuda.\n</details>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manucabral/algepy",
    "keywords": "python,algebra,math,geometry,vector,algepy",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "algepy",
    "package_url": "https://pypi.org/project/algepy/",
    "platform": null,
    "project_url": "https://pypi.org/project/algepy/",
    "project_urls": {
      "Homepage": "https://github.com/manucabral/algepy"
    },
    "release_url": "https://pypi.org/project/algepy/0.0.3/",
    "requires_dist": null,
    "requires_python": ">= 3.9",
    "summary": "Algebra and Analytic Geometry in Python",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13608908,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd7e37785e014379fa7335102cc4ccb22ec23c43160e94235a8e023722512e75",
          "md5": "80c4bcebb2b4689a9e6c46ed2d80a628",
          "sha256": "788b8ff9eca554480617f5e26555ecd622befd4d52706c06f86b11d1a63e3247"
        },
        "downloads": -1,
        "filename": "algepy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80c4bcebb2b4689a9e6c46ed2d80a628",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 9938,
        "upload_time": "2022-04-19T14:49:49",
        "upload_time_iso_8601": "2022-04-19T14:49:49.076394Z",
        "url": "https://files.pythonhosted.org/packages/dd/7e/37785e014379fa7335102cc4ccb22ec23c43160e94235a8e023722512e75/algepy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a61e0988f19279e1e22678b3cbcad07ae53034c6443993d24a950514eb1bbd5",
          "md5": "c02fd55a3a7e52f78d8787954149e7a8",
          "sha256": "e82aa15f301887e097d2110dc551a9693ac8b034ac903d4d03d4fdf47f6344e5"
        },
        "downloads": -1,
        "filename": "algepy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c02fd55a3a7e52f78d8787954149e7a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 5274,
        "upload_time": "2022-04-19T15:00:47",
        "upload_time_iso_8601": "2022-04-19T15:00:47.883222Z",
        "url": "https://files.pythonhosted.org/packages/8a/61/e0988f19279e1e22678b3cbcad07ae53034c6443993d24a950514eb1bbd5/algepy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d409751d39b1ba22ad45ea5745b0648ee50a0cd359697ffa16066ad88f0def",
          "md5": "be81f0369ddb155c324c18b7cf719d0b",
          "sha256": "bdd440140eaa82787ed928476b0e6ce4ab63b55bba343c8391bc511d5cfb0e78"
        },
        "downloads": -1,
        "filename": "algepy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "be81f0369ddb155c324c18b7cf719d0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 18132,
        "upload_time": "2022-04-25T00:01:56",
        "upload_time_iso_8601": "2022-04-25T00:01:56.186376Z",
        "url": "https://files.pythonhosted.org/packages/82/d4/09751d39b1ba22ad45ea5745b0648ee50a0cd359697ffa16066ad88f0def/algepy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82d409751d39b1ba22ad45ea5745b0648ee50a0cd359697ffa16066ad88f0def",
        "md5": "be81f0369ddb155c324c18b7cf719d0b",
        "sha256": "bdd440140eaa82787ed928476b0e6ce4ab63b55bba343c8391bc511d5cfb0e78"
      },
      "downloads": -1,
      "filename": "algepy-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "be81f0369ddb155c324c18b7cf719d0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.9",
      "size": 18132,
      "upload_time": "2022-04-25T00:01:56",
      "upload_time_iso_8601": "2022-04-25T00:01:56.186376Z",
      "url": "https://files.pythonhosted.org/packages/82/d4/09751d39b1ba22ad45ea5745b0648ee50a0cd359697ffa16066ad88f0def/algepy-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}