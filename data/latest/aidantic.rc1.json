{
  "info": {
    "author": "AivanF.",
    "author_email": "projects@aivanf.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: Freely Distributable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Text Processing"
    ],
    "description": "# Aidantic\n\nAidantic is a tiny library inspired by Pydantic,\nmade to be more suitable for:\n- Data parsing.\n- Subclasses lookup (like `OneOf` in JSON-Schema).\n- Input data validation:\n  - Exceptions store precise path.\n  - Plain types values validation, see `PlainWrapper`.\n  - Custom complex objects validation, see `ModelVisitorBase`.\n\nThe library isn't aimed to become a full replacement of Pydantic\n(e.g, there is no planned support of JSON Schema, OpenAPI),\nbut in some cases it's worth using `:)`\n\nToDo List:\n- 1: optional strict value type check\n- 2: field name aliases\n- 3: OneOf typing: pass inner class methods\n- 4: probably some default types are missed and not supported \n\nLicense: GPL 3\n\n\n# Usage\n\nInstall with pip: `pip install Aidantic`  \nOr simply obtain a single source file from the repo.\n\n## 1. Basics\n\n```py\nfrom typing import List\nfrom aidantic import BaseModel\n\nclass Model(BaseModel):\n    name: str\n    data: List[int]\n\nobj = Model(name=\"Foo\", data=[61, 80, 33, 98])\nassert obj.data[2] == 33\n```\nSimple yet boring, let's dive deeper!\n\n## 2. OneOf\nSometimes an object may contain instance(s)\nof plenty subclasses, and you, or your auxiliary lib,\nhave to decide which class to use during parsing process.\nFor this aim, Aidantic provides built-in support of\nOne-Of logic: all you need is to specify a key,\nwhich should be used to subclass picking,\nand declare its values for the subclasses.\nNo `Union` with boring enumeration is needed!\n```py\nfrom typing import List, Literal\nfrom aidantic import BaseModel, OneOf\n\nclass RandomModel(BaseModel):\n    _discriminator = \"key\"\n    key: int\n\nclass EuropeModel(RandomModel):\n    key: Literal[271]\n    value: str\n\nclass PieModel(RandomModel):\n    key: Literal[314]\n    value: int\n\nclass PackageModel(BaseModel):\n    title: str\n    content: List[OneOf[RandomModel]]\n\ndata = dict(title=\"Bar42\", content=[\n    dict(key=314, value=15926535),\n    dict(key=271, value=\"lol\"),\n])\npackage = PackageModel(**data)\npackage.validate()\nassert package.content[1].value == \"lol\"\nprint(package)\n```\n\nResult:\n```py\nPackageModel(\n  title='Bar42',\n  content=[\n    PieModel(key=314, value=15926535),\n    EuropeModel(key=271, value='lol')\n])\n```\n\nBTW, `_discriminator` may be a tuple of field names.\n\n## 3. PlainWrapper\nIf you need to validate a set of values of plain types\n(like str, int), you can utilise `PlainWrapper` class,\nwhich can be used as a simple replacement of any plain type.\nHowever, you should note that a wrapped value has\nsome limitations: typical `isinstance` usage won't work.\nBut comparison to plain values works well,\nand you can easily access wrapper's `value` property.\n\nThere are a couple of use-cases:\n\n### 3.1. Creation time validation\n```py\nfrom aidantic import PlainWrapper, BaseModel, CreationError, PathType\n\nclass StatusCode(PlainWrapper[\"str\"]):\n    _allowed = {\"foo\", \"bar\", \"lol\"}\n\n    def __init__(self, code, path: PathType):\n        if code not in self._allowed:\n            raise CreationError(f\"Unknown code '{code}'\", path)\n        super().__init__(code, path)\n\nclass SomeModel(BaseModel):\n    code: StatusCode\n\nobj = SomeModel(code=\"bar\")\nassert obj.code == \"bar\"\n```\n\nThe same could be also written as a Union of Literals,\nbut this would be too verbose.\n\n### 3.2. Validator class\nIf you have to perform more complex logic,\ne.g load allowed values later, or compare values\nfrom different objects, you can use a separate validator\nthat will traverse your data models:\n```py\nfrom typing import List\nfrom aidantic import PlainWrapper, BaseModel, ModelVisitorBase, ValidationError\n\nclass StatusCode(PlainWrapper[\"str\"]):\n    pass\n\nclass SomeModel(BaseModel):\n    codes: List[StatusCode]\n\nclass CrossValidator(ModelVisitorBase):\n    _label = \"Cross\"\n    _allowed = {\"foo\", \"bar\", \"lol\"}\n\n    def __init__(self,):\n        super().__init__()\n        self.collected_codes = set()\n\n    def visit(self, obj):\n        super().visit(obj)\n        unknown_codes = self.collected_codes - self._allowed\n        if unknown_codes:\n            raise ValidationError(f\"Got {len(unknown_codes)} unknown codes\", ())\n\n    def visit_wrapper(self, obj, _type, path):\n        if issubclass(_type, StatusCode):\n            self.collected_codes.add(str(obj))\n\nobj = SomeModel(codes=[\"foo\", \"bar\", \"lol\"])\nCrossValidator().visit(obj)\n```\n\n## 4. Plain values parsing\nThanks to `from_plain` method,\nit's pretty simple to write a parser that will translate\nplain values like strings into objects:\n```py\nfrom aidantic import BaseModel\nfrom expr import AnyExpr\nclass Message(BaseModel):\n    title: str\n    formula: AnyExpr\n\nmsg = Message(\n    title=\"Please calculate the attached expression\",\n    formula=\"log(pi, 2.7182)\",\n)\nprint(msg)\n```\n```py\nMessage(\n  title=\"Please calculate the attached expression\",\n  formula=ExprFunction(operator='FUNCTION', name='log', arguments=[\n    ExprField(operator='FIELD', name='pi'), ExprLiteral(operator='LITERAL', value=2.7182)\n  ])\n)\n```\n\nSee `tests/test_expr.py` for implementation details!\n\n# Historical intro\n\nWhile I was developing CI and scenario scripts for\nmy GameDev pet-project [Destiny Garden](https://www.aivanf.com/destiny-garden-1),\nI've met a need to parse and validate large scripts\nwritten in custom YAML-based format.\nI tried to use my beloved Pydantic for this problem,\nbut found it too focused on networking, ORM logic and too\nrigid for game scenario scripting, so quickly I've\ndeveloped this library which is small yet powerful\nfor dealing with such specialised problems.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AivanF/Aidantic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Aidantic",
    "package_url": "https://pypi.org/project/Aidantic/",
    "platform": null,
    "project_url": "https://pypi.org/project/Aidantic/",
    "project_urls": {
      "Homepage": "https://github.com/AivanF/Aidantic"
    },
    "release_url": "https://pypi.org/project/Aidantic/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data parsing and validation with OneOf using Python type hints",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13560837,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e58e41640473bac53d131e409a3475d5d135ba8602ee39568508fac6de8a64b",
          "md5": "9389e9d51d2dd473255dcd9aee1dbfd0",
          "sha256": "02f40b46b6fd671189a5eb9cccef3bc41190d16a27824bdcb1baa64863c5ecd0"
        },
        "downloads": -1,
        "filename": "Aidantic-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9389e9d51d2dd473255dcd9aee1dbfd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7665,
        "upload_time": "2022-04-19T20:22:53",
        "upload_time_iso_8601": "2022-04-19T20:22:53.961167Z",
        "url": "https://files.pythonhosted.org/packages/9e/58/e41640473bac53d131e409a3475d5d135ba8602ee39568508fac6de8a64b/Aidantic-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be579932b18311fa86e013233ab4df2765fa912b6bfe4b06d47ea5d8843131b7",
          "md5": "afca53f153b7779f4d84c0f32a688351",
          "sha256": "011fd00116b6795e2b8925cd6d7dda3d9158cb362e0f7bbd7471e7164acc734d"
        },
        "downloads": -1,
        "filename": "Aidantic-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "afca53f153b7779f4d84c0f32a688351",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7371,
        "upload_time": "2022-04-19T20:22:55",
        "upload_time_iso_8601": "2022-04-19T20:22:55.774300Z",
        "url": "https://files.pythonhosted.org/packages/be/57/9932b18311fa86e013233ab4df2765fa912b6bfe4b06d47ea5d8843131b7/Aidantic-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e58e41640473bac53d131e409a3475d5d135ba8602ee39568508fac6de8a64b",
        "md5": "9389e9d51d2dd473255dcd9aee1dbfd0",
        "sha256": "02f40b46b6fd671189a5eb9cccef3bc41190d16a27824bdcb1baa64863c5ecd0"
      },
      "downloads": -1,
      "filename": "Aidantic-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9389e9d51d2dd473255dcd9aee1dbfd0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7665,
      "upload_time": "2022-04-19T20:22:53",
      "upload_time_iso_8601": "2022-04-19T20:22:53.961167Z",
      "url": "https://files.pythonhosted.org/packages/9e/58/e41640473bac53d131e409a3475d5d135ba8602ee39568508fac6de8a64b/Aidantic-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be579932b18311fa86e013233ab4df2765fa912b6bfe4b06d47ea5d8843131b7",
        "md5": "afca53f153b7779f4d84c0f32a688351",
        "sha256": "011fd00116b6795e2b8925cd6d7dda3d9158cb362e0f7bbd7471e7164acc734d"
      },
      "downloads": -1,
      "filename": "Aidantic-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "afca53f153b7779f4d84c0f32a688351",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7371,
      "upload_time": "2022-04-19T20:22:55",
      "upload_time_iso_8601": "2022-04-19T20:22:55.774300Z",
      "url": "https://files.pythonhosted.org/packages/be/57/9932b18311fa86e013233ab4df2765fa912b6bfe4b06d47ea5d8843131b7/Aidantic-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}