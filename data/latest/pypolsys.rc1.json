{
  "info": {
    "author": "B. Nennig",
    "author_email": "benoit.nennig@supmeca.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "PYPOLSYS\n========\n![CI-Ubuntu](https://github.com/nennigb/pypolsys/workflows/CI-Ubuntu/badge.svg) ![CI-Windows](https://github.com/nennigb/pypolsys/workflows/CI-Windows/badge.svg)\n\nThis package provides a python wrapper to `POLSYS_PLP` fortran90 package from Layne T. Watson, Steven M. Wise, Andrew J. Sommese, August, 1998.\n\n`POLSYS_PLP` is a solver for N complex coefficients polynomial systems of equations in N unknowns by a probability-one, globally convergent homotopy method.\n\nFor a quick survey on [homotopy continuation](https://en.wikipedia.org/wiki/Numerical_algebraic_geometry#Homotopy_continuation) see the very clear practical presentation available on [HomotopyContinuation.jl](https://www.juliahomotopycontinuation.org/guides) website or this nice [tutorial](http://homepages.math.uic.edu/~jan/tutorial.pdf).\n\nThere are several other homotopy softwares (more recent, also with python interface, ...) allowing more advanced applications. See for instance:\n  - [PHCpack](https://github.com/janverschelde/PHCpack)\n  - [Bertini](https://github.com/bertiniteam/b2)\n  - [Hom4PSpy](http://www.hom4ps3.org) and the wrapper on [pypi](https://pypi.org/project/Hom4PSpy/)\n  - [HomotopyContinuation.jl](https://www.juliahomotopycontinuation.org)\n\nThe advantage of `POLSYS_PLP` is to be an open-source self-content single f90 file (it requires few `blas` and `lapack` functions that are shipped with `POLSYS_PLP` sources or that may be linked to optimized libraries). The idea of `pypolsys` project is to create an **easy to install and to deploy python package to start with Homotopy method**.\n\nThis wrapper has been developped to tackle polynomial systems obtained by high order perturbation of multi-parametric eigenvalue problems obtained with [`EasterEig`](https://github.com/nennigb/EasterEig). This yields to dense polynomial system. In this context, multivariate Horner algorithm has been added to quickly evaluate simultaneously the polynomial and its Jacobian matrix.\n\n## POLSYS_PLP\n`POLSYS_PLP` use a probability-one globally convergent homotopy method,\nto find all finite **isolated complex solutions** to a system\nF(X) = 0 of N polynomial equations in N unknowns with complex\ncoefficients.  A partitioned linear product (PLP) formulation is used\nfor the start system of the homotopy map.\n\nThe whole algorithm and its fortran90 implementation is described in\n> Wise, Steven M., Andrew J. Sommese, and Layne T. Watson. \"Algorithm 801: POLSYS_PLP: A partitioned linear product homotopy code for solving polynomial systems of equations.\" ACM Transactions on Mathematical Software (TOMS) 26.1 (2000): 176-200.\n\n  - The sources are available on [netlib](http://www.netlib.org/opt/polsysplp.tgz).\n  - The theoretical part of `POLSYS_PLP` is available [here](https://vtechworks.lib.vt.edu/bitstream/handle/10919/36933/thesis.pdf)\n  - `POLSYS_PLP` is based on [`HOMPACK`](https://vtechworks.lib.vt.edu/bitstream/handle/10919/19612/TR-90-36.pdf)\n\nTo facilitate the build of this module, a copy of `POLSYS_PLP` *original* sources is included in the `pypolsys/801` folder.\n\n## Installation\n\nYou'll need :\n  * python (tested for v >= 3.5);\n  * pip (optional);\n  * fortran compiler (tested with `gfortran` and with `m2w64-toolchain` on windows)\n  * lapack and blas installation, but the useful routines are also shipped with `POLSYS_PLP` sources. On debian based distribution it can be done with `sudo apt install libopenblas-dev`.\n\nIf needed, please see the steps given in the continuous integration script [workflows](.github/workflows/ci-ubuntu.yml).\n\n### Using pip (preferred)\nYou can install `pypolsys` from pip:\n```\npip install pypolsys [--user]\n```\nYou can also install `pypolsys` after a download from github:\n```\npip install path/to/pypolsys-version.tar.gz [--user]\n```\nor in _editable_ mode if you want to modify the sources\n```\npip install -e path/to/pypolsys\n```\nafter cloning the repos.\n\n`pip` will install `numpy` (mandatory) and `sympy` and `scipy` (optional, required only for tests).\n\nNote that on ubuntu, you will need to use `pip3` instead of `pip` and `python3` instead of `python`.\n\nOn linux, if you want to force the building with `POLSYS_PLP` lapack sources, you can tell it to pip with\n```\npip install --no-use-pep517 --install-option=\"--buildLapack\" path/to/pypolsys\n```\nThe flag `--no-use-pep517` avoids side effect of `install-option` that disable wheels.\nUsing `POLSYS_PLP` lapack sources is the standard behavior on windows.\n\n### Troubleshooting\nWith old `gfortran` version present on ubuntu 16.04 (see [here](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84276)) the building may failed. To avoid this, `intent(in, out)` statement has to be removed from the original `pypolsys/801/polsys_plp.f90`. It seems to work out of the box with `gfortan-8`.\n\n### Running tests\n\nTo execute the full test suite, run :\n```\npython -m pypolsys.test\n```\n\n## Usage\nNote that this projet is a work in progress and the API may change.\n\n### Get started\nLet us consider the following example\n```\nx**2 + y + z - 1 = 0\nx + y**2 + z - 1 = 0\nx + y + z**2 - 1 = 0\n```\n> Cox, David, John Little, and Donal O'Shea. Ideals, varieties, and algorithms: an introduction to computational algebraic geometry and commutative algebra. Springer Science & Business Media, 2013, From page 122.\n\nWith 5 distinct solutions in C : (1,0,0) (0,1,0), (0,0,1), (-1+√2, -1+√2, -1+√2), (-1 -√2, -1-√2, -1-√2). The main steps of `pypolsys`'s workflow are:\n```python\nimport numpy as np\nimport pypolsys\n# Declare the number of equation of the polynomial system\nN = 3\n# and the number of monoms of each equation (here 4 monoms for each equation).\nn_coef_per_eq = np.array([4, 4, 4], dtype=np.int32)\n# Provide the coefficients as 1D array\nall_coef = np.array([1, 1,  1, -1,\n                     1, 1,  1, -1,\n                     1, 1,  1, -1], dtype=np.complex)\n# then the degree of each monom\nall_deg = np.zeros((np.sum(n_coef_per_eq), N), dtype=np.int32)\nall_deg[0, 0] = 2\nall_deg[1, 1] = 1\nall_deg[2, 2] = 1\nall_deg[4, 0] = 1\nall_deg[5, 1] = 2\nall_deg[6, 2] = 1\nall_deg[8, 0] = 1\nall_deg[9, 1] = 1\nall_deg[10, 2] = 2\n# Pass it to POLSYS_PLP\npypolsys.polsys.init_poly(N, n_coef_per_eq, all_coef, all_deg)\n# Create homogeneous partition\n# (N.B. Partitions are important to limit the number of paths\n# to track associated to solutions at infinity)\npart = pypolsys.utils.make_h_part(3)\n# Pass it to POLSYS_PLP\npypolsys.polsys.init_partition(*part)\n# Show coef\npypolsys.polsys.show_coef()\n# Found 8 solutions, and track 8 paths; some solutions appear twice\nbplp = pypolsys.polsys.solve(1e-8, 1e-14, 0.0)\n# Get the roots, array of size (N+1) x bplp\nr = pypolsys.polsys.myroots\n# Get status of the solving process\npypolsys.polsys.report()\n```\nNote that due to projective transformation, the `r[N, :]` is the homogeneous variable. All results are returned ready to used (unscaled and untransformed). \n\nAnother way, sometimes more convenient, is to setup the polynomial with function `pypolsys.utils.fromSympy`,\n\n```python\nimport numpy as np\nimport pypolsys\nimport sympy as sym\n\nx, y, z = sym.symbols('x, y, z')\npol = pypolsys.utils.fromSympy([sym.poly(x**2 + y + z - 1, (x, y, z)),\n                                sym.poly(x + y**2 + z - 1, (x, y, z)),\n                                sym.poly(x + y + z**2 - 1, (x, y, z))])\n# Pass it to POLSYS_PLP\npypolsys.polsys.init_poly(*pol)\n# Create homogeneous partition\npart = pypolsys.utils.make_h_part(3)\n# Pass it to POLSYS_PLP\npypolsys.polsys.init_partition(*part)\n# Solve\nbplp = pypolsys.polsys.solve(1e-8, 1e-14, 0.0)\n# Get the roots, array of size (N+1) x bplp\nr = pypolsys.polsys.myroots\n# Get status of the solving process\npypolsys.polsys.report()\n```\nMore examples are available in the [`pypolsys/test.py`](./pypolsys/test.py) file. For dense polynomial system, `dense` flag can be passed to the `solve` method to speed up evaluation.\n\n\n### Organisation\nThis python package is divided into two parts\n  - `pypolsys.polsys` corresponds to the interface to `POLSYS_PLP` and maps the following fortran subroutines (more doc is emmbedded in the f90 files) :\n      * `init_poly`, initialize the polynomials monomials,\n      * `init_partition`, initialize the variables partition,\n      * `solve`, solve the polynomial system,\n      * `refine`, refine the given paths,\n      * `bezout`, compute the Bezout PLP number corresponding to the variable partition, usefull to test partition without solving,\n      * `report`, show a report on the homotopy solving process\n      * `show_partition` and `show_coef`, show the variables partitions and the monomials respectively.\n\n      some attributs are also available :\n      * `myroots`, containing the roots,\n      * `path_status` and `solve_status`, containing the status of each tracked path and of the global solving process,\n      * `num_jac_eval`, containing the number of evaluation of the Jacobian matrix.\n  - `pypolsys.utils` contains utilities to facilitate the creation of the partition, polynomial or the estimation of the number of path (full python).\n\n## Limitation\nDue to shared variables in modules, only one polynomial instance can be handled. Concurrent calls to the `.so` file may create unexpected behavior.\nTo solve several polynomials, you can use `concurrent.futures`.\n\n## How to contribute\nThis project started because we need some easy to deploy Homotopy solver. We are users but not experts on these methods.\n\nIf you want to contribute to `pypolsys`, your are welcomed! Don't hesitate to\n  - report bugs, installation problems or ask questions on [issues](https://github.com/nennigb/pypolsys/issues);\n  - propose some enhancements in the code or in documentation through **pull requests** (PR);\n  - add or enhance support to other plateforms\n\nTo ensure code homogeneity among contributors, we use a source-code analyzer (eg. pylint).\nBefore submitting a PR, run the tests suite ;-)\n\n## Developpement\nIf you need to modify `wrapper.f90` fortran source file. You will need to re-build the Fortran extension. This should be done into 2 steps\n  1. The pyf file that avoid trouble with user_defined fortran type should be updated with `f2py` utilities :\n\n    ```\n    f2py -m polsys -h polsys.pyf wrapper.f90 --overwrite-signature\n    ```\n  2. Re run the install\n\n\n## License\nThis file is part of pypolsys, a simple python wrapper to fortran package polsys_plp.\npypolsys is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\npypolsys is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with amc2moodle.  If not, see <https://www.gnu.org/licenses/>.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nennigb/pypolsys",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypolsys",
    "package_url": "https://pypi.org/project/pypolsys/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypolsys/",
    "project_urls": {
      "Homepage": "https://github.com/nennigb/pypolsys"
    },
    "release_url": "https://pypi.org/project/pypolsys/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A python wrapper to `POLSYS_PLP` fortran90 package from Layne T. Watson,\\ Steven M. Wise, Andrew J. Sommese, August, 1998.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17187206,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6451de50a73b211fd6f8230ace93122639365144047469d01290f04360f03c0d",
          "md5": "81778bef1b0b4523834411ae185a4dba",
          "sha256": "c6d2f427715d9837899a879f84d536ba9bddb3b9e4d9981fb306b195d7ce3d64"
        },
        "downloads": -1,
        "filename": "pypolsys-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81778bef1b0b4523834411ae185a4dba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 139444,
        "upload_time": "2021-09-22T14:46:07",
        "upload_time_iso_8601": "2021-09-22T14:46:07.108587Z",
        "url": "https://files.pythonhosted.org/packages/64/51/de50a73b211fd6f8230ace93122639365144047469d01290f04360f03c0d/pypolsys-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6451de50a73b211fd6f8230ace93122639365144047469d01290f04360f03c0d",
        "md5": "81778bef1b0b4523834411ae185a4dba",
        "sha256": "c6d2f427715d9837899a879f84d536ba9bddb3b9e4d9981fb306b195d7ce3d64"
      },
      "downloads": -1,
      "filename": "pypolsys-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "81778bef1b0b4523834411ae185a4dba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 139444,
      "upload_time": "2021-09-22T14:46:07",
      "upload_time_iso_8601": "2021-09-22T14:46:07.108587Z",
      "url": "https://files.pythonhosted.org/packages/64/51/de50a73b211fd6f8230ace93122639365144047469d01290f04360f03c0d/pypolsys-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}