{
  "info": {
    "author": "['Edward Smith']",
    "author_email": "edward.smith@brunel.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# pyDataView\n\n\"A graphical user interface for people who hate graphical user interfaces\"\n\nIf you know how to read your data by writing Python code, PyDataView simply provides a way to quickly explore the data with a slider/file viewer. Once you see something you like, click Save Script to generate a starting point for further analysis.\n\n## Introduction\n\nA Data Viewer GUI written in python, wxpython and matplotlib.\n\nThis is a lightweight interface for quick insight into scientific data.\nData can be explored as a matplotlib lineplot or contour using sliders to traverse the range of existing records and bins.\nFor more detailed analysis, a figure can be saved, the data output as a csv file or a minimal python script generated.\nThe emphasis of this project is the provision of a simple reader to get data into python, a minimal GUI to get quick insight into that data and generation of python scripts for more detailed analysis.\n\n## Quickstart\n\nOn linux, you need Python3, numpy, wxpython and matplotlib installed. You can then clone the repository and run pyDataView from the command line,\n\n     python3 pyDataView.py -d ./path/to/dir \n     \nChoosing the path to point it at directory which contains the data. \n     \nIf you use Windows, a pre-compiled executable using pyinstaller is available \n\n - Action Autobuild (latest version) [here](https://nightly.link/edwardsmith999/pyDataView/workflows/main/master/pyDataView.exe.zip)\n - Stable download [here](https://e1.pcloud.link/publink/show?code=XZng4FZRzqlM9Xu9m5rjfsHqeWmYYcaWnj7) (Built 23/12/21)\n\npyDataView uses fields of five dimensional data: three spatial, one temporal and one for dimensionality of data.\nCurrently, support is provided for field data written by a number of binary format MPI/Fortran codes, OpenFOAM, Channelflow (h5 format) and LAMMPS. \n    \nor you can run `pyDataView.py` and choosing the directory.\nAny files which can be converted to fields are displayed on the left hand side.\n\n![alt tag](https://raw.githubusercontent.com/edwardsmith999/pyDataView/master/pyDataView_screenshot.png)\n\nAs well as the raw data fields, derived fields are also supported, for example, dividing momentum by density to get velocity.\n\nIf the code/datatype is already supported, all available data should be displayed.\nIn order to add new datatypes, the user must create a raw data reader in `newreader.py`,\n\n```python\n\nfrom rawdata import RawData\n\nclass SomeNewReader(RawData):\n\n    def __init__(self,fdir,fname,dtype,nperbin):\n        if (fdir[-1] != '/'): fdir += '/' \n        self.fdir = fdir\n        self.fname = fname\n        self.dtype = dtype\n        self.nperbin = nperbin\n        self.filepath = self.fdir + self.fname + '/'\n        self.header = self.read_header(fdir)  #The user should write these\n        self.grid = self.get_gridtopology()   #The user should write these\n        self.maxrec = self.get_maxrec()\n\n    def read(self, startrec, endrec):\n\n        # Read a 5D array [nx, ny, nz, nperbin, nrecs]\n        # where nrecs=endrec-startrec+1 and nperbin is 1 for scalar field\n        # and 3 for vector field, etc\n        \n        return bindata\n    \n ```\nTo use this raw data, a field datatype can then be added to `newfield.py`,\n\n```python\n\nfrom field import Field\nfrom newreader import SomeNewReader\n\nclass SomeNewVectorField(Field):\n    \n    dtype = 'd'\n    nperbin = 3\n    \n    def __init__(self,fdir):\n        Raw = SomeNewReader(fdir, self.fname, self.dtype, \n                         self.nperbin)\n        Field.__init__(self,Raw)\n        self.header = self.Raw.header\n        self.axislabels = ['x','y','z']\n\n````\nThis field type can now be called in any python script, allowing 5D data fields to be read as well as data preparation for plots, including profiles, contours, fft, etc. To add these new fields to the GUI, they should be added to `newpostproc.py`\n\n```python\n\nfrom postproc import PostProc\nfrom newfield import SomeNewVectorField\n\nclass New_PostProc(PostProc):\n\n    def __init__(self,resultsdir,**kwargs):\n        self.resultsdir = resultsdir\n        self.plotlist = {} \n\n        possibles = {'New Field': SomeNewVectorField}\n\n        self.plotlist = {}\n        for key, field in possibles.items(): \n            try:\n                self.plotlist[key] = field(self.resultsdir)\n            except AssertionError:\n                pass \n```\nwhich must be instantiated in `allpostproc.py` allowing pyDataView to find and display the new field format.\n\nThere are many examples of different data formats in the postproclib file which can be used as a template.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edwardsmith999/pyDataView",
    "keywords": "visualisation scientific data",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyDataView",
    "package_url": "https://pypi.org/project/pyDataView/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyDataView/",
    "project_urls": {
      "Homepage": "https://github.com/edwardsmith999/pyDataView"
    },
    "release_url": "https://pypi.org/project/pyDataView/2.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data Viewer GUI written in python, wxpython and matplotlib",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17205589,
  "releases": {
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1760c9513e7db04edc72618b210c2fa765c8045d5bd42c3c8d69500970c4f4d",
          "md5": "8383236d35a73488f352580200cc073c",
          "sha256": "7e7a56a050194bbedae9b594a306f3f3defed54d292ab74589acabc287cacc85"
        },
        "downloads": -1,
        "filename": "pyDataView-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8383236d35a73488f352580200cc073c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 94501,
        "upload_time": "2023-03-08T11:08:05",
        "upload_time_iso_8601": "2023-03-08T11:08:05.486828Z",
        "url": "https://files.pythonhosted.org/packages/d1/76/0c9513e7db04edc72618b210c2fa765c8045d5bd42c3c8d69500970c4f4d/pyDataView-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1760c9513e7db04edc72618b210c2fa765c8045d5bd42c3c8d69500970c4f4d",
        "md5": "8383236d35a73488f352580200cc073c",
        "sha256": "7e7a56a050194bbedae9b594a306f3f3defed54d292ab74589acabc287cacc85"
      },
      "downloads": -1,
      "filename": "pyDataView-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8383236d35a73488f352580200cc073c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 94501,
      "upload_time": "2023-03-08T11:08:05",
      "upload_time_iso_8601": "2023-03-08T11:08:05.486828Z",
      "url": "https://files.pythonhosted.org/packages/d1/76/0c9513e7db04edc72618b210c2fa765c8045d5bd42c3c8d69500970c4f4d/pyDataView-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}