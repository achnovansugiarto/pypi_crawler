{
  "info": {
    "author": "v-hill",
    "author_email": "67915924+v-hill@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# delaunay-triangulation\nThis library is used for computing the [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation) of 2D point sets.\n\nAn example Delaunay triangulation output for 32 points is shown below.\n<img src=\"./images/Figure 2021-02-24 110617.png\" alt=\"drawing\" width=\"500\"/>\n\n**Why is this library special?**\n\nSpeed! This is a pure python implementation of the Guibas &amp; Stolfi's divide and conquer algorithm. The divide and conquer algorithm has been shown to be the [fastest](https://people.eecs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf) DT generation technique, with O(*n* log *n*) running time. Furthermore, this code has been parallelised using the MPI for Python ([mpi4py](https://github.com/mpi4py/mpi4py)) library to utilise multiple CPU cores. This allows the algorithm to be efficiently scaled for distributed computing across supercomputer nodes.\n\n# Setup\n1. Install anaconda or miniconda\n2. Install git, then clone repository: `git clone https://github.com/v-hill/delaunay-triangulation`\n3. Create environment: `conda create -n deltri python=3.9`\n4. Activate environment: `conda activate deltri`\n5. Install dependencies: `conda env update -f conda_env.yml --prune`\n6. Run test: `python src/triangulation_test.py`\n\n# Benchmarking\n\n### Single core results\n\nAs seen in the graph below, this Delaunay triangulation implementation scales just as efficiently as the SciPy implementation. The SciPy library is written in C and wrapped in Python for ease of use. As a result, the SciPy DT algorithm is consistently around 40x faster for a given number of points. However, the benefit of my library is that it can take advantage of multiple CPU cores, offering a performance advantage unavailable to SciPy users. By utilising the multiple cores available in modern computers, the run time can be reduced linearly by a factor approximately equal to the number of available threads.\n\n<img src=\"./images/Figure 2021-07-02 210145.png\" alt=\"drawing\" width=\"700\"/>\n\nThis graph can be reproduced by running `python src/triangulation_benchmarks.py`.\n\n## Structure\nThis repository is currently structured as follows.\n\n    ├── src\n        ├── triangulation_core\n            ├── points_tools\n                ├── generate_values.py\n                └── split_list.py\n            ├── edge_topology.py\n            ├── linear_algebra.py\n            ├── triangulation.py\n            └── triangulation_primitives.py\n        ├── utilities\n            └── settings.py\n        ├── triangulation_benchmarks.py\n        ├── triangulation_cli.py\n        ├── triangulation_mpi_test.py\n        └── triangulation_test.py\n\n## References\n<a id=\"1\">[1]</a>\nGuibas, Leonidas and Stolfi, Jorge\n'Primitives for the Manipulation of General Subdivisions and the Computation of Voronoi'\nIn: ACM Trans. Graph.4.2  (Apr.1985),  pp.  74–123.\nissn:  0730-0301\ndoi:10.1145/282918.282923\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parallel-delaunay",
    "package_url": "https://pypi.org/project/parallel-delaunay/",
    "platform": null,
    "project_url": "https://pypi.org/project/parallel-delaunay/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/parallel-delaunay/0.1.0/",
    "requires_dist": [
      "matplotlib (>=3.6.2,<4.0.0)",
      "mpi4py (>=3.1.4,<4.0.0)",
      "numpy (>=1.23.5,<2.0.0)",
      "scipy (>=1.10.0,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Parallel implementation of Guibas & Stolfi's divide-and-conquer algorithm for Delaunay triangulation, using MPI in Python.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17467396,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13d111702924984e7d8e4cbd6e9846426639f8c4b3d77cdb152b0c25f18fe486",
          "md5": "0625e3602d4e107a71894dbecb688f5d",
          "sha256": "c99ddbf3dbfb6f325c92e87c81df6fba5c8def1f49f94f82f7267430ecdfc47e"
        },
        "downloads": -1,
        "filename": "parallel_delaunay-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0625e3602d4e107a71894dbecb688f5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 19925,
        "upload_time": "2023-03-27T20:18:05",
        "upload_time_iso_8601": "2023-03-27T20:18:05.516586Z",
        "url": "https://files.pythonhosted.org/packages/13/d1/11702924984e7d8e4cbd6e9846426639f8c4b3d77cdb152b0c25f18fe486/parallel_delaunay-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc9467a7100f6db741ae441921dc62b385c123f23b96eea8c6f778cddd22629",
          "md5": "c89c741970507aea80f823a8a75ae1f1",
          "sha256": "113ebdc1689d4e68140cf1ec3e7db3eb45aaef6a8873141fe07dca4fdd1b9f2a"
        },
        "downloads": -1,
        "filename": "parallel_delaunay-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c89c741970507aea80f823a8a75ae1f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 15545,
        "upload_time": "2023-03-27T20:18:06",
        "upload_time_iso_8601": "2023-03-27T20:18:06.832953Z",
        "url": "https://files.pythonhosted.org/packages/bd/c9/467a7100f6db741ae441921dc62b385c123f23b96eea8c6f778cddd22629/parallel_delaunay-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13d111702924984e7d8e4cbd6e9846426639f8c4b3d77cdb152b0c25f18fe486",
        "md5": "0625e3602d4e107a71894dbecb688f5d",
        "sha256": "c99ddbf3dbfb6f325c92e87c81df6fba5c8def1f49f94f82f7267430ecdfc47e"
      },
      "downloads": -1,
      "filename": "parallel_delaunay-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0625e3602d4e107a71894dbecb688f5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 19925,
      "upload_time": "2023-03-27T20:18:05",
      "upload_time_iso_8601": "2023-03-27T20:18:05.516586Z",
      "url": "https://files.pythonhosted.org/packages/13/d1/11702924984e7d8e4cbd6e9846426639f8c4b3d77cdb152b0c25f18fe486/parallel_delaunay-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bdc9467a7100f6db741ae441921dc62b385c123f23b96eea8c6f778cddd22629",
        "md5": "c89c741970507aea80f823a8a75ae1f1",
        "sha256": "113ebdc1689d4e68140cf1ec3e7db3eb45aaef6a8873141fe07dca4fdd1b9f2a"
      },
      "downloads": -1,
      "filename": "parallel_delaunay-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c89c741970507aea80f823a8a75ae1f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 15545,
      "upload_time": "2023-03-27T20:18:06",
      "upload_time_iso_8601": "2023-03-27T20:18:06.832953Z",
      "url": "https://files.pythonhosted.org/packages/bd/c9/467a7100f6db741ae441921dc62b385c123f23b96eea8c6f778cddd22629/parallel_delaunay-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}