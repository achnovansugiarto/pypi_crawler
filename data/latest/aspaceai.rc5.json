{
  "info": {
    "author": "Salil Shekharan",
    "author_email": "salilshekharan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# ASpace AI API: Python SDK & Sample\n\n\nThis repo contains the Python SDK for the ASpace AI cognitive services, an offering within [ASpace AI Cognitive Services](https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai)\n\n* [Learn about EY ASpace AI Platform](https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai)\n\n\n## Getting started\n\nInstall the module using [pip](https://pypi.python.org/pypi/pip/):\n\n```bash\npip install aspaceai\n```\n\nUse it:\n\n```python\n'''-------------------------------------------------- OCR ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage_url = 'https://i.ibb.co/3RHzMqB/eurotext.png'\n\nresult = aspaceai.vision.ocr(image=image_url,image_format='url',language='eng')\noperation_status = json.loads(result)['status']\n\nif operation_status.lower() == 'success':\n    print (json.loads(result)['result'])\n\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- PART OF SPEECH ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nresult = aspaceai.nlp.part_of_speech(text)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    print (json.loads(result)['result'])\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- NAMED ENTITY RECOGNITION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext = \"European authorities fined Google a record $5.1 billion on Wednesday for abusing its power in the mobile phone market and ordered the company to alter its practices\"\nresult = aspaceai.nlp.named_entity_recognition(text)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    print (json.loads(result)['result'])\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- DEPENDENCY PARSER------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext = \"European authorities fined Google a record $5.1 billion on Wednesday for abusing its power in the mobile phone market and ordered the company to alter its practices\"\nresult = aspaceai.nlp.dependency_parser(text)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    print (json.loads(result)['result'])\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- TAGS EXTRACTION------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext = \"European authorities fined Google a record $5.1 billion on Wednesday for abusing its power in the mobile phone market and ordered the company to alter its practices\"\nresult = aspaceai.nlp.tags_extraction(text)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    print (json.loads(result)['result'])\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- FACE DETECTION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage = \"https://www.thestatesman.com/wp-content/uploads/2017/08/1493458748-beauty-face-517.jpg\"\nimage_format = \"url\"\nresult = aspaceai.vision.face_detection_image(image,image_format)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    base64_image_string = json.loads(result)['result']['image']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\",img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print (json.loads(result)['message'])\n\n\n'''-------------------------------------------------- EYE DETECTION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage = \"https://www.thestatesman.com/wp-content/uploads/2017/08/1493458748-beauty-face-517.jpg\"\nimage_format = \"url\"\nresult = aspaceai.vision.eye_detection(image,image_format)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    base64_image_string = json.loads(result)['result']['image']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\",img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print (json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- SMILE DETECTION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage = \"https://st.depositphotos.com/1008939/3024/i/950/depositphotos_30248143-stock-photo-beautiful-woman-smiling.jpg\"\nimage_format = \"url\"\nresult = aspaceai.vision.smile_detection(image,image_format)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    base64_image_string = json.loads(result)['result']['image']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\",img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print (json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- OBJECT DETECTION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage = \"https://i.pinimg.com/564x/0d/b6/10/0db610089c3e8bfef6c33c3059f70903.jpg\"\nimage_format = \"url\"\nresult = aspaceai.vision.object_detection(image, image_format)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n\n    objects = json.loads(result)['result']['objects']\n    print(objects)\n\n    base64_image_string = json.loads(result)['result']['image']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\", img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- IMAGE CLASSIFICATION ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nimage = \"https://i.pinimg.com/564x/0d/b6/10/0db610089c3e8bfef6c33c3059f70903.jpg\"\nimage_format = \"url\"\nresult = aspaceai.vision.image_classification(image,image_format)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    objects_identified = json.loads(result)['result']\n    print(objects_identified)\n\nelse:\n    print (json.loads(result)['message'])\n\n\n\n\n'''-------------------------------------------------- SENTIMENT ANALYSIS ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext=\"Hello ASpace World, its a great day !!!\"\nresult = aspaceai.sense.sentiment_analysis(text)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    objects_identified = json.loads(result)['result']\n    print(objects_identified)\n\nelse:\n    print (json.loads(result)['message'])\n\n\n\n\n'''-------------------------------------------------- TRANSLATE ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext=\"Hello ASpace World, its a great day !!!\"\nresult = aspaceai.nlp.translate(text,\"en\",\"hi\")\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    objects_identified = json.loads(result)['result']\n    print(objects_identified)\n\nelse:\n    print (json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- QR CREATOR ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext_to_encode = \"Hello ASpace World !!!\"\nresult = aspaceai.vision.qr_creator(text_to_encode)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n\n    base64_image_string = json.loads(result)['result']['QRCodeImage']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\", img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- BARCODE CREATOR ------------------------------------------------------'''\n\nimport aspaceai\nimport json\nimport cv2\nimport numpy as np\nimport base64\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext_to_encode = \"Hello ASpace World !!!\"\nresult = aspaceai.vision.barcode_creator(text_to_encode)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n\n    base64_image_string = json.loads(result)['result']['BarCodeImage(base64)']\n    jpg_original = base64.b64decode(base64_image_string)\n    jpg_as_np = np.frombuffer(jpg_original, dtype=np.uint8)\n    img = cv2.imdecode(jpg_as_np, flags=1)\n    cv2.imshow(\"Output From ASpaceAI\", img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows();\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- QR CODE READER ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nqr_code_image_path = r\"C:\\Users\\<>\\Downloads\\qr.jpg\"\n\nresult = aspaceai.vision.qr_reader(qr_code_image_path)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    data = json.loads(result)['result']['data']\n    print(data)\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n'''-------------------------------------------------- BARCODE READER ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nbarcode_image_path = r\"C:\\Users\\<>\\Downloads\\bar.jpg\"\n\nresult = aspaceai.vision.barcode_reader(barcode_image_path)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    data = json.loads(result)['result']['data']\n    print(data)\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n\n\n'''-------------------------------------------------- SPEECH TO TEXT ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\nwav_audio_file_path = r\"C:\\Users\\<>\\Downloads\\audio_sample.wav\"\naudio_language = \"en-IN\"\n\nresult = aspaceai.speech.speech_to_text(wav_audio_file_path,audio_language)\n\noperation_status = json.loads(result)['status']\nif operation_status.lower() == 'success':\n    data = json.loads(result)['result']['text']\n    print(data)\n\nelse:\n    print(json.loads(result)['message'])\n\n\n\n\n'''-------------------------------------------------- TEXT TO SPEECH  ------------------------------------------------------'''\n\nimport aspaceai\nimport json\n\naspaceai.ASPACE_API_URL = '< ASpace AI API endpoint URL >'  # Replace with your aspace endpoint URL\naspaceai.ASPACE_API_KEY = '< ASpace AI API KEY >'  # Replace with a valid Subscription Key here.\n\ntext = \"Hello ASpace World !!!\"\ntext_lang = \"en-US-AriaNeural\"\n\noperation_status , result = aspaceai.speech.text_to_speech(text,text_lang)\n\nif operation_status.lower() == 'success':\n    with open('text_to_speech.wav', 'wb') as f:\n        f.write(result.content)\n\n    # Retrieve HTTP meta-data\n    print(result.status_code)\n    print(result.headers['content-type'])\n    print(result.encoding)\n\n\n\nelse:\n    print(result)\n\n\n```\n\n### Installing from the source code\n\n```bash\npython setup.py install\n```\n![ASpace AI Themes](https://assets.ey.com/content/dam/ey-sites/ey-com/en_in/topics/consulting/2020/07/aspace/vison-sense.png.rendition.3840.2560.png)\n## Contributing\n\nWe welcome contributions. Feel free to file issues and pull requests on the repo and we'll address them as we can. Learn more about how you can help on our [Contribution Rules & Guidelines](/CONTRIBUTING.md).\n\nYou can reach out to us anytime with questions and suggestions using our communities below:\n - **Support questions:** [StackOverflow](https://stackoverflow.com/questions/tagged/aspaceai)\n\n## Updates\n* [ASpace.ai Platform Release Notes](https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai)\n\n## License\nAll ASpace Cognitive Services SDKs and samples are licensed with the MIT License. For more details, see\n[LICENSE](/LICENSE.txt).\n\n\n\n## Developer Code of Conduct\nDevelopers using Cognitive Services, including this sample, are expected to follow the “Developer Code of Conduct for ASpace AI”, found at [https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai](https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aspaceai",
    "package_url": "https://pypi.org/project/aspaceai/",
    "platform": "",
    "project_url": "https://pypi.org/project/aspaceai/",
    "project_urls": {
      "Homepage": "https://www.ey.com/en_in/consulting/accelerating-digital-transformation-with-ai"
    },
    "release_url": "https://pypi.org/project/aspaceai/1.0.13/",
    "requires_dist": null,
    "requires_python": ">=3.7.9",
    "summary": "Python SDK for the ASpace AI cognitive services",
    "version": "1.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9023408,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "503a581a99f19a88fa24263eae1d2c25f1bdeb47c5c96f36bef9db665010a94d",
          "md5": "8381205cbae8d6750f6c31aec8ba555a",
          "sha256": "fa16eded44f1b7b1a6a029a8707822fac7e8f5dfa48335c4c5d79a7ba4602cab"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8381205cbae8d6750f6c31aec8ba555a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3792,
        "upload_time": "2020-12-14T20:02:09",
        "upload_time_iso_8601": "2020-12-14T20:02:09.837746Z",
        "url": "https://files.pythonhosted.org/packages/50/3a/581a99f19a88fa24263eae1d2c25f1bdeb47c5c96f36bef9db665010a94d/aspaceai-1.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "188f993d3cc1708a3ddbac56a7769fbee52037f44394d6084eb0a4ee93073f1c",
          "md5": "895be04b35f4de5c223218cdddde7ee4",
          "sha256": "75038e652d7f61f233657e24800174dad3786ce1c7a0a136d70686f9db1b606e"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "895be04b35f4de5c223218cdddde7ee4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2548,
        "upload_time": "2020-12-14T20:02:11",
        "upload_time_iso_8601": "2020-12-14T20:02:11.155952Z",
        "url": "https://files.pythonhosted.org/packages/18/8f/993d3cc1708a3ddbac56a7769fbee52037f44394d6084eb0a4ee93073f1c/aspaceai-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6fa4a6ab60a1b5cd5ea3df8503f2a65a204f903ee70b57fe053068b7aed8857",
          "md5": "3fc5f9b43d7a82cc8cdda482a35f6979",
          "sha256": "01eaf4691ba115f4d046e7a21c90c9ad821842d7150a7a0f512e51c329656370"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fc5f9b43d7a82cc8cdda482a35f6979",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 6397,
        "upload_time": "2020-12-15T22:20:23",
        "upload_time_iso_8601": "2020-12-15T22:20:23.308265Z",
        "url": "https://files.pythonhosted.org/packages/a6/fa/4a6ab60a1b5cd5ea3df8503f2a65a204f903ee70b57fe053068b7aed8857/aspaceai-1.0.11-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3babb07cc61f333bee60ace09190f97c227977611bc19f35e122a08bb95a423",
          "md5": "38615527a614f08c5905f60926e8ebea",
          "sha256": "387a5f5ca7628acc3909c1241493ee2a2913d9c28a84f2ff8ef51d445080d8a9"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "38615527a614f08c5905f60926e8ebea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.9",
        "size": 3689,
        "upload_time": "2020-12-15T22:20:24",
        "upload_time_iso_8601": "2020-12-15T22:20:24.588913Z",
        "url": "https://files.pythonhosted.org/packages/d3/ba/bb07cc61f333bee60ace09190f97c227977611bc19f35e122a08bb95a423/aspaceai-1.0.11.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4fb1b175420094de3d80bf44e520584a7b3ef527bbae9da30f5236b3f4aac08",
          "md5": "0e301f52668b3346f6797a3cebf57dd5",
          "sha256": "f0c37428917aef12654a3aaf3c269103067b8bcea0a85585c2eadc2054ad3944"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e301f52668b3346f6797a3cebf57dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 6812,
        "upload_time": "2020-12-15T22:44:45",
        "upload_time_iso_8601": "2020-12-15T22:44:45.405495Z",
        "url": "https://files.pythonhosted.org/packages/c4/fb/1b175420094de3d80bf44e520584a7b3ef527bbae9da30f5236b3f4aac08/aspaceai-1.0.12-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46cc9dc86f052dc9511580866307e3fd3a28e8f604f02b822a3dfe43be96b93",
          "md5": "3d1a682bbbe6d248d5994c0d4ba7596f",
          "sha256": "7184c0a662de26f24ce0af2fa0c52176839e510ec2d543ca704e122f801a92a3"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "3d1a682bbbe6d248d5994c0d4ba7596f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.9",
        "size": 3860,
        "upload_time": "2020-12-15T22:44:46",
        "upload_time_iso_8601": "2020-12-15T22:44:46.998250Z",
        "url": "https://files.pythonhosted.org/packages/d4/6c/c9dc86f052dc9511580866307e3fd3a28e8f604f02b822a3dfe43be96b93/aspaceai-1.0.12.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc4b973a7c8e95e3824d75c6e68be069b3be2613a57daf4b7fdad3bff9c63a4",
          "md5": "a27e5fd6bac001d809ce61a1875b87ec",
          "sha256": "c0955de4a5bc2759db83b80c8801fc2aa0219a456d21876297aeb98b6704642b"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a27e5fd6bac001d809ce61a1875b87ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 13038,
        "upload_time": "2020-12-31T05:54:03",
        "upload_time_iso_8601": "2020-12-31T05:54:03.460833Z",
        "url": "https://files.pythonhosted.org/packages/0c/c4/b973a7c8e95e3824d75c6e68be069b3be2613a57daf4b7fdad3bff9c63a4/aspaceai-1.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcdfe6128fb70a22c872fb30a7668bd0e9938d07908b5012dd07bf09cbfdbaaf",
          "md5": "c9cb94ad6487ce0cafff55bdd28bc4d9",
          "sha256": "cbe88bb71d8464c3582b617948bfbec3440ffb1d2efaa2ebd73391961ed88382"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "c9cb94ad6487ce0cafff55bdd28bc4d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.9",
        "size": 12433,
        "upload_time": "2020-12-31T05:54:05",
        "upload_time_iso_8601": "2020-12-31T05:54:05.081961Z",
        "url": "https://files.pythonhosted.org/packages/fc/df/e6128fb70a22c872fb30a7668bd0e9938d07908b5012dd07bf09cbfdbaaf/aspaceai-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26f80a247571ac7d798206fc6524e35355a7adeef76fed508e6aae798af7241d",
          "md5": "b4eb047559d0974f58c8ed7038e602cf",
          "sha256": "849ce1f3fde479c11750fd6eda32368e8d28840ddff8346767c3cd20fda02b68"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4eb047559d0974f58c8ed7038e602cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3797,
        "upload_time": "2020-12-14T20:28:49",
        "upload_time_iso_8601": "2020-12-14T20:28:49.778981Z",
        "url": "https://files.pythonhosted.org/packages/26/f8/0a247571ac7d798206fc6524e35355a7adeef76fed508e6aae798af7241d/aspaceai-1.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26f95feb349c3552e92fe2741f2a4fdb1c13388ef710ee70654bfb17e41853ba",
          "md5": "de87fa929bb792f3eb4474fc8d5e79e1",
          "sha256": "344dc1410d53c93af7087b25e4e4e9fc343425d7cb13427874aff631ead4239b"
        },
        "downloads": -1,
        "filename": "aspaceai-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de87fa929bb792f3eb4474fc8d5e79e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2552,
        "upload_time": "2020-12-14T20:28:51",
        "upload_time_iso_8601": "2020-12-14T20:28:51.252118Z",
        "url": "https://files.pythonhosted.org/packages/26/f9/5feb349c3552e92fe2741f2a4fdb1c13388ef710ee70654bfb17e41853ba/aspaceai-1.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cc4b973a7c8e95e3824d75c6e68be069b3be2613a57daf4b7fdad3bff9c63a4",
        "md5": "a27e5fd6bac001d809ce61a1875b87ec",
        "sha256": "c0955de4a5bc2759db83b80c8801fc2aa0219a456d21876297aeb98b6704642b"
      },
      "downloads": -1,
      "filename": "aspaceai-1.0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a27e5fd6bac001d809ce61a1875b87ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.9",
      "size": 13038,
      "upload_time": "2020-12-31T05:54:03",
      "upload_time_iso_8601": "2020-12-31T05:54:03.460833Z",
      "url": "https://files.pythonhosted.org/packages/0c/c4/b973a7c8e95e3824d75c6e68be069b3be2613a57daf4b7fdad3bff9c63a4/aspaceai-1.0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcdfe6128fb70a22c872fb30a7668bd0e9938d07908b5012dd07bf09cbfdbaaf",
        "md5": "c9cb94ad6487ce0cafff55bdd28bc4d9",
        "sha256": "cbe88bb71d8464c3582b617948bfbec3440ffb1d2efaa2ebd73391961ed88382"
      },
      "downloads": -1,
      "filename": "aspaceai-1.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "c9cb94ad6487ce0cafff55bdd28bc4d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.9",
      "size": 12433,
      "upload_time": "2020-12-31T05:54:05",
      "upload_time_iso_8601": "2020-12-31T05:54:05.081961Z",
      "url": "https://files.pythonhosted.org/packages/fc/df/e6128fb70a22c872fb30a7668bd0e9938d07908b5012dd07bf09cbfdbaaf/aspaceai-1.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}