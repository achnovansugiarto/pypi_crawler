{
  "info": {
    "author": "Aidan Houlihan",
    "author_email": "aidandhoulihan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=================================\nDjango Elasticsearch Model Binder\n=================================\n\n.. image:: https://travis-ci.com/cr0mbly/django-elasticsearch-model-builder.svg?token=WSHb2ssbuqzAyoqCvdCs&branch=master\n    :target: https://travis-ci.com/cr0mbly/django-elasticsearch-model-builder\n\n.. image:: https://img.shields.io/pypi/v/django-elasticsearch-model-binder.svg\n    :target: https://pypi.org/project/django-elasticsearch-model-binder\n\n.. image:: https://img.shields.io/pypi/l/django-elasticsearch-model-binder.svg\n    :target: https://pypi.org/project/django-elasticsearch-model-binder\n\n\nPlugin for a Django/Elasticsearch paired environment that aligns CRUD\noperations within Django with the related indexes that are tied to the models\nthat they build.\n\n\n**Setup**\n\nThis intro assumes you have an installed version of both Django and\nElasticsearch on your machine. The expected configuration for setup within\ndjango-elasticsearch-model-builder is within your settings for example:\n\n*setup.py*\n\n.. code-block:: python\n\n    DJANGO_ES_MODEL_CONFIG = {\n        'hosts': [{'host': 'localhost', 'port': 9200}]\n    }\n\nThis example is fairly basic but follows the expected format for configuration\nof the Elasticsearch client built into this plugin  so anything you place in\nthis settings dictionary will be fed straight in, this helps with more\ncomplicated Elasticsearch setups with encryption and multiple clusters\nrunning off different hosts.\n\nIF your wanting the index to be automatically generated during first model \ngeneration you can add the following to your app to setup all of the indexes\nand alises so your model can start emitting cached fields to Elasticsearch\n\nfrom django.apps import AppConfig\n\n.. code-block:: python\n\n    class TestAppConfig(AppConfig):\n        name = 'tests.testapp'\n        verbose_name = 'TestApp'\n\n        def ready(self):\n            from tests.test_app.models import Author\n            from django_elasticsearch_model_binder.utils import (\n                initialize_es_model_index\n            )\n            initialize_es_model_index(Author)\n\n\n**Tieing models to indexes.**\n\nTieing a model to an elasticsearch index can be done on the fly by adding\nthe base ES model\n\n.. code-block:: python\n\n    class Author(ESBoundModel):\n        user = models.ForeignKey(\n            User, on_delete=models.CASCADE\n        )\n        publishing_name = models.CharField(\n            max_length=25, blank=True, null=True\n        )\n\n        # Fields to be picked up and cached in model\n        es_cached_model_fields = ['publishing_name', 'user']\n\n\n**Casting db model fields into Elasticsearch format**\n\nThis plugin works with a principle that fields should be ready to be serialized\ninto Elasticsearch data structures like `sets` for instance will fail if you\ntry to index them into Elasticsearch. By default this plugin casts\nthe following base types to Elasticsearch compatible values.\n\n- models.Model -> integer containing the models pk\n- datetime.datetime ->  string in the format 'YYYY-MM-DD HH:MM:SS'\n- all other values -> str(value) (attempt to cast all other values)\n\n\nIf this mapping doesn't suit you or you wish to extend it you can do so\nby overriding the `convert_to_indexable_format` method on the model.\n\n.. code-block:: python\n\n    class Author(ESBoundModel):\n\n        def convert_to_indexable_format(self, value):\n            if isinstance(value, float):\n                # Round value for uniform integer value\n                return round(value)\n\n            # ... any further field rules\n\n\n**Setting non model fields on index**\n\nBy default `es_cached_model_fields` will only support database fields for\nindexing this is for performance reasons where often you might want to index a\ncomplex piece of data that may take a while to generate over larger database\ntables. To get around this this plugin supports a different approach for any\nfields that aren't stored directly on this model. To this end we make use of\nthe `ExtraModelFieldBase` class to define a resolver for a custom field that\nwill work over larger data-sets in way that can be made more efficient as your\ndata-set grows and requirements change. For example:\n\n\n.. code-block:: python\n\n    from django_elasticsearch_model_binder import ExtraModelFieldBase\n\n\n    class UniqueIdentiferField(ExtraModelFieldBase):\n        # Name of the custom field we want indexed for the model.\n        field_name = 'total_number_of_duplicate_names'\n\n        @classmethod\n        def custom_model_field_map(cls, model_pks):\n            \"\"\"\n            Generate map of number of duplicate first names per model.\n            \"\"\"\n            values = (\n                cls.objects\n                .filter(pk__in=model_pks)\n                .values_list('pk', 'first_name')\n            )\n\n            name_count_map = defaultdict(int)\n            for _, name in values:\n                name_count_map[name] += 1\n\n            # Return map of model pk to value we want\n            # indexed into Elasticsearch\n            return {\n                pk: name_count_map[name]\n                for pk, name in values\n            }\n\n    class User(ESBoundModel):\n        first_name = model.CharField()\n        es_cached_extra_fields = (UniqueIdentiferField,)\n\n\nThis will result in an index being created for the user model with a single\ncustom field per model document set too:\n\n.. code-block:: python\n\n    {total_number_of_duplicate_names: <int>}\n\n\n**Setting index name**\n\nThis example is fairly basic it will create an Elasticsearch index generated\nwith an index name comprised of the model class name and\nits module path directory. this can be overridden by setting the\n`index_name` field in the model:\n\n.. code-block:: python\n\n    class Author(ESBoundModel):\n        index_name ='my-custom-index-name'\n\nor overriding the `get_index_base_name` method, by default the index will be\ngenerated with a name reflecting the modules path and model name e.g.\n\n.. code-block:: python\n\n  <module-path>-<model-name>-<unique-uuid>\n\n\n**Default Aliases**\n\nBy default this plugin generates the index on first start of the app if it\nhasn't been defined. It also generates a default read/write alias that\nallows indexes to be rebuilt on the fly with no downtime for your app.\n\nAliases utilise the same index name as their parent but are postfixed by\ndefault with a `-read`/`-write` to help differentiate from the main index. you\ncan override this on the model by defining your own postfix, e.g.\n\n.. code-block:: python\n\n    class Author(ESBoundModel):\n        index_name ='my-custom-index-name'\n\n        es_index_alias_read_postfix = 'read-only-access'\n        es_index_alias_write_postfix = 'write-only-access'\n\n\nWill generate aliases in the format of:\n\n- my-custom-index-name-read-only-access\n- my-custom-index-name-write-only-access\n\nOr define your own way by overriding the default\n`get_read_alias_name`/`get_write_alias_name`\n\n\n**Saving/Removing db model in Elasticsearch**\n\nSaving and removing a model in ElasticSearch happens automatically on\n`.save`/ `.delete` operations. This should be noted as any\n`bulk_create`/`bulk_update` will ignore this and you'll need to manage these\ncases within your business logic of the app. See below for how to do these\noperations in bulk where this is a requirement of the business case.\n\n\n**Preforming bulk operations**\n\nThis plugin also supports a handy set of calls that can be tied into a\nquery manager to bulk create/update/delete these models in Elasticsearch.\n\nTo enable this you'll need to add the plugins query manager mixin to your\nmodel, for example.\n\n.. code-block:: python\n\n    from django.db.models import QuerySet\n\n    from django_elasticsearch_model_binder.mixins import ESQuerySetMixin\n\n\n    class ESEnabledQuerySet(ESQuerySetMixin, QuerySet):\n        pass\n\n    class Author(ESBoundModel):\n        index_name ='my-custom-index-name'\n\n        es_index_alias_read_postfix = 'read-only-access'\n        es_index_alias_write_postfix = 'write-only-access'\n\n        objects = ESEnabledQuerySet.as_manager()\n\n\nYou can then define a query via the manager targeting the models you want\nto update, delete from Elasticsearch e.g.\n\n\n.. code-block:: python\n\n    # Re-save models with selected fields into Elasticsearch\n    Author.objects.filter(pk__lt=100).reindex_into_es()\n\n    # Delete models with selected fields into Elasticsearch\n    Author.objects.filter(pk__lt=100).delete_from_es()\n\n\n**QuerySet filtering**\n\nAs noted above theres a number of operations that can be made off of the\nQueryset mixin. As expected this supports filtering of Queryset results by\nsome defined ElasticSearch query. Say we wanted to filter a table by the\nprefix of a Charfield indexed in ElasticSearch we can go:\n\n.. code-block:: python\n\n    query = {\n        'match': {\n            'publishing_name': 'Bobby*'\n        }\n    }\n\n    queryset = Author.objects.filter_by_es_search(query=query)\n\n    >> queryset.values_list('publishing_name', flat=True)\n    >> ['Bobby Fakington', 'Bobby not-realington']\n\nSupported by the `sort_query` kwarg you can also specify a queryset\nreturn ordering for the `filter_by_es_search`.\n\n.. code-block:: python\n\n    queryset = Author.objects.filter_by_es_search(\n        query={'prefix': {'publishing_name.keyword': 'Bill'}},\n        sort_query=[{\n            'publishing_name.keyword': {\n                'order': 'asc', 'missing': '_last'\n            }\n        }]\n    )\n\nThis is useful in cases where ES backed field sorting trumps\nany model defined `order_by`.\n\n**Retrieving ES fields**\n\nPulling cached fields back from Elasticsearch can be preformed both on the\nmodel and related manager if the `ESQuerySetMixin` is used.\n\nFrom the model:\n\n.. code-block:: python\n\n    >>> author = Author.objects.first()\n    >>> author.retrive_es_fields()\n\nFrom the QuerySet:\n\n.. code-block:: python\n\n    >>> Author.objects.filter(pk__lt=100).retrieve_es_docs()\n\n\nYou can also retrieve the verbose output of the query by using\nthe `only_include_fields=False` on both the above calls.\n\n**Rebuilding an entire table in Elasticsearch**\n\nAt times you may want to throw away your current index and replace\nit with a new one. For larger data-sets this can be problematic as downtime\nwhile this rebuilds is unacceptable. This plugin exposes a simple method to\npreform a complete refresh of the index from either the entire models table or\nfrom a slice of the table defined by a queryset. This will automatically create\na new index and point the write alias to it while allowing the old index to be\nused with the read alias for your app until the rebuild is finished,\nresulting in no index downtime.\n\nThis can be run from shell or any kind of automated task by running:\n\n.. code-block:: python\n\n    # Full table rebuild of the Author model.\n    >>> Author.rebuild_es_index()\n\n    # Full table rebuild of the Author model.\n    >>> sliced_queryset = Author.objects.filter(pk__lt=100)\n    >>> Author.rebuild_es_index(queryset=sliced_queryset)\n\n\n**Setting indexable format**\n\nIndexes are only rebuilt sharding accoring to configuration on a full index\nrebuild `rebuild_es_index`. To alter how the index is searched with\nElasticsearch you'll need to override the `get_index_mapping`. By default this\nis set to an empty implementation e.g.\n\n.. code-block:: python\n\n    @classmethod\n    def get_index_mapping(cls):\n        return {'settings': {}, 'mappings': {}}\n\nBut you can extend this with any mapping you'd like for the\nfields being indexed.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cr0mbly/django-elasticsearch-model-binder",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-elasticsearch-model-binder",
    "package_url": "https://pypi.org/project/django-elasticsearch-model-binder/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-elasticsearch-model-binder/",
    "project_urls": {
      "Homepage": "https://github.com/cr0mbly/django-elasticsearch-model-binder"
    },
    "release_url": "https://pypi.org/project/django-elasticsearch-model-binder/0.1.1/",
    "requires_dist": [
      "django",
      "elasticsearch"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6592551,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "439c5e4e2fb1b907360668c3a16682abe848a44dac4a88564c428e4b57e1aa05",
          "md5": "0580d8881af711453eca80b300f77b47",
          "sha256": "e4b0e9f537eb6f37c435a290049b0fd6ff78fa98481fb2d9601f2a715f33ae95"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_model_binder-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0580d8881af711453eca80b300f77b47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11356,
        "upload_time": "2020-01-17T20:26:08",
        "upload_time_iso_8601": "2020-01-17T20:26:08.340638Z",
        "url": "https://files.pythonhosted.org/packages/43/9c/5e4e2fb1b907360668c3a16682abe848a44dac4a88564c428e4b57e1aa05/django_elasticsearch_model_binder-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c637fd2af62402da07b4fedf637f062f9b0f0e85b3d2d1b0aac97f712e821971",
          "md5": "c0999ef486f369e26e795032f618b10c",
          "sha256": "463d50db5e9cedbb6bea314b2b9b29e4c950b41f53791d0e861e35fbefc177ab"
        },
        "downloads": -1,
        "filename": "django-elasticsearch-model-binder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0999ef486f369e26e795032f618b10c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10489,
        "upload_time": "2020-01-17T20:26:11",
        "upload_time_iso_8601": "2020-01-17T20:26:11.405040Z",
        "url": "https://files.pythonhosted.org/packages/c6/37/fd2af62402da07b4fedf637f062f9b0f0e85b3d2d1b0aac97f712e821971/django-elasticsearch-model-binder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e19de2dfd50e025964e63ec56f2152568bdb6a45044695f87f76f16e4829ef5",
          "md5": "93b163679c35bfc11c949cc138088083",
          "sha256": "49a9bfd035d99351c97bd89e094c9f3ed317decd429c1b33f9c4ef28d018d655"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_model_binder-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93b163679c35bfc11c949cc138088083",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13294,
        "upload_time": "2020-02-08T05:20:11",
        "upload_time_iso_8601": "2020-02-08T05:20:11.274764Z",
        "url": "https://files.pythonhosted.org/packages/4e/19/de2dfd50e025964e63ec56f2152568bdb6a45044695f87f76f16e4829ef5/django_elasticsearch_model_binder-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f33ff5a468feac544b258bf78e0fc7ecd412b95705b8dadc2d927d7e89dca6a",
          "md5": "110fd19e5a86d968b316cdf40479f1f2",
          "sha256": "222da2b587822ba9025160289a1437dfc5708665ce85d3417d18c3b643d248f4"
        },
        "downloads": -1,
        "filename": "django-elasticsearch-model-binder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "110fd19e5a86d968b316cdf40479f1f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14672,
        "upload_time": "2020-02-08T05:20:13",
        "upload_time_iso_8601": "2020-02-08T05:20:13.434095Z",
        "url": "https://files.pythonhosted.org/packages/5f/33/ff5a468feac544b258bf78e0fc7ecd412b95705b8dadc2d927d7e89dca6a/django-elasticsearch-model-binder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e19de2dfd50e025964e63ec56f2152568bdb6a45044695f87f76f16e4829ef5",
        "md5": "93b163679c35bfc11c949cc138088083",
        "sha256": "49a9bfd035d99351c97bd89e094c9f3ed317decd429c1b33f9c4ef28d018d655"
      },
      "downloads": -1,
      "filename": "django_elasticsearch_model_binder-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93b163679c35bfc11c949cc138088083",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13294,
      "upload_time": "2020-02-08T05:20:11",
      "upload_time_iso_8601": "2020-02-08T05:20:11.274764Z",
      "url": "https://files.pythonhosted.org/packages/4e/19/de2dfd50e025964e63ec56f2152568bdb6a45044695f87f76f16e4829ef5/django_elasticsearch_model_binder-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f33ff5a468feac544b258bf78e0fc7ecd412b95705b8dadc2d927d7e89dca6a",
        "md5": "110fd19e5a86d968b316cdf40479f1f2",
        "sha256": "222da2b587822ba9025160289a1437dfc5708665ce85d3417d18c3b643d248f4"
      },
      "downloads": -1,
      "filename": "django-elasticsearch-model-binder-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "110fd19e5a86d968b316cdf40479f1f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14672,
      "upload_time": "2020-02-08T05:20:13",
      "upload_time_iso_8601": "2020-02-08T05:20:13.434095Z",
      "url": "https://files.pythonhosted.org/packages/5f/33/ff5a468feac544b258bf78e0fc7ecd412b95705b8dadc2d927d7e89dca6a/django-elasticsearch-model-binder-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}