{
  "info": {
    "author": "Allen Barker",
    "author_email": "Allen.L.Barker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "camel-snake-pep8\n================\n\nA refactoring tool to help convert camel case to snake case and vice versa in a\nPython program, in conformity with the PEP-8 style guide.  It uses/abuses\nPython-Rope to find and perform the changes.  The program interactively\ndisplays proposed changes and the code diffs that would result from the change.\nIt queries the user as to whether or not to accept the changes.\n\nThe program does not do all the changes for full PEP-8 naming compliance, but\nit does most of them.  It currently does not recognize unpacked assignments to\ntuples very well, and it does not try to modify any names in the context of\nimport statements (though Rope will indirectly change some names in import\nstatements if they are renamed elsewhere).\n\nNote that a formatting program such as autopep8 (which is pip installable) can\nbe used to automatically fix many syntactical and spacing issues, but those\nprograms do not rename variables.  If such a program is also used it should be\ndone as a separate step, and some testing should be done between running the\ntwo programs to help isolate any problems which might be introduced.\n\n* **Use this software at your own risk.** This program has various features to\n  try to avoid introducing errors in renaming, but correctness cannot be\n  guaranteed.  Always make a backup copy of any project before running this\n  program on it.  The program has been used a few times with good results, but\n  does not currently have formal tests.\n\n  Rope is not perfect, so check your results and look at the warnings issued.\n  Rope can have problems with changing names which are imported from different\n  modules, especially with \"import ... as\", so it might be a good idea to\n  change all names which appear in such statements by hand.\n\n* Mostly tested on Ubuntu Linux but should also work on Windows.\n\nInstalling and using\n--------------------\n\nTo install using pip, run::\n\n   pip install camel-snake-pep8 --upgrade\n\nA recent version of Rope is recommended for Python 3 compatibility.\n\nThe program is a single module, and can also be downloaded and run directly as\n``python camel_snake_pep8.py``, provided the dependencies (colorama and rope)\nare installed.\n\nUsage::\n\n      camel-snake-pep8 <projectDir> <moduleToModify> [<moduleToModify> ...]\n\nIf the module arguments are omitted the program will gather all the ``.py``\nfiles in the ``<projectDir>`` directory, and recursively for any subpackages\nif the directory has an ``__init__.py`` file.  If all arguments are omitted\nthen the current directory is assumed to be the main project directory.\n\nThe program can be used to refactor either Python 2 or Python 3 code.  **Run\nthe program installed in the same version of Python as the code that is being\nmodified.** That is, if the code being refactored is Python 2 code then run the\nprogram installed in Python 2, and similarly for Python 3.\n\nNote that Rope currently only has limited support for Python 3 type hinting.\n\nAs an example, to change all the Python files in a package with one subpackage\ngo to the package root directory and type::\n\n    camel-snake-pep8\n\nor, equivalently::\n\n    camel-snake-pep8 . *.py */*.py\n\nIf individual modules to modify are listed be sure to also include the paths to\nany subpackage modules, subsubpackage modules, etc., which are to be modified\non the same line.  Note that any faulty code in the same directory as the files\nto be modified may cause Rope to fail, since Rope looks at those also (and may\nmodify them secondary to a change in a selected file).\n\nThe program can be stopped at any time with ``^C``.  But note that it is better\nto make all the changes in one run of the program. That is because the program\ncollects and saves all the names in modules to change, before any changes are\nmade, in order to give warnings about possible name collisions.\n\nIf you want to quickly convert a (copy of a) full project at once to see what\nthe results would be, two command-line options are provided.  The option\n``--yes-to-all`` runs the program as if the user had entered \"y\" to all queries.\nThe option ``--yes-no-default`` runs the program as if the user just hit return,\ngiving the default action (which is to accept changes without warnings and\nreject others).  The latter is safer, but in either case running without\nreviewing the changes may result in some changes that are unintended.\n\nHow it works\n------------\n\nThis program goes through each file character by character, keeping the\ncharacter offset value.  This offset is passed to Python-Rope to detect\nvariables to possibly rename.  The program queries the user about proposed\nchanges and makes any user-approved changes.  Python-Rope is also used to do\nthe renaming.\n\nThe names and offsets from a module file are all re-calculated after each\nchange, since offsets can change with each modification.  The running time is\nnevertheless not bad for interactive use.  Variable names for rejected name\nchanges --- which keep the original variable name --- are temporarily renamed\nto have a magic string appended to them.  This is so the program knows the name\nhas been reviewed and should be retained.  This magic string is then globally\nremoved from all the files after all the possible changes are processed.  If\nthe program halts abnormally (such that the ``finally`` of a ``try`` is not\nexecuted) some of those magic strings may still be present.\n\nWarnings and theory\n-------------------\n\nThe program tries to make the refactoring as safe as possible, since bugs\nintroduced by bad renaming can be difficult to find.  One of the main dangers\nwith renaming operations is name collisions.\n\nOne type of name collision occurs because Rope will happily rename a variable\nto a name that is already in use in the same scope.  For example, a function\nparameter could be renamed to collide with a preexisting local variable inside\nthe function.  Here is an example:\n\n.. code:: python\n\n   def f(camelArg):\n       camelArg = 555\n       camel_arg = 444\n       return camelArg\n\nIf the change of the parameter ``camelArg`` to ``camel_arg`` is accepted\n(despite the warning that will be issued) the new function will return 444\ninstead of the previous value 555.  The camel-snake-pep8 program will issue a\nwarning since the new name previously existed in the module before any changes\nwere made (i.e, before any changes by the current run of the program).\n\nAnother type of name collision is when the renaming itself causes two distinct\nnames like ``myVar`` and ``myVAR`` to map to a common new name ``my_var``.  In\nthis case, a warning is given if a name change that was accepted (on the\ncurrent run of the program) already mapped a different name to that same new\nname.\n\nWarnings are issued for possible situations which may lead to a collision -- or\nmay not, since scoping is not taken into account in the analysis.  The default\nquery reply, such as when the user just hits \"enter\" each time, is to accept\nthe change when no warning is given and reject the change when a warning is\ngiven.  Many of the changes with warnings will actually be safe, but before\naccepting one the displayed diffs for the change (and possibly the files\nthemselves) should be carefully inspected to be sure.  As an alternative, a\ndifferent name entirely can be tried by hitting ``c`` in response to the query.\n\nAfter all the changes are made the program does an analysis looking for\npotential problems, and warnings are issued for any that are found.  No scoping\nis taken into account so many of these warnings are probably false alarms.  To\nbe cautious, though, the warnings should still be checked to see what is\ncausing them.\n\nAnother problem comes when Rope changes the name of a variable assigned in a\nmodule, but then fails to also change an import statement from another module\nwhich imports that variable from the first module.  Similarly, Rope cannot\nresolve some attribute assignments.  Both of these kinds of problems will\ngenerate warnings after all the changes have been made.\n\nTo summarize: all names per module are saved before any changes, and all names\nper module are saved after all the changes.  The name mappings are all saved.\nA warning is given on mapping a name into a name that pre-existed in a module.\nA warning is also given for a mapping that collides with a previous mapping\n(i.e., is not one-to-one).  After all the changes, the places where preimages\nof accepted-change mappings still exist are warned about.  Similarly, places\nwhere the images of rejected-change mappings still exist are warned about.\n\n    Rough \"proof\" of reasonable safety for changes without warnings, assuming\n    that Python-Rope does the name replacements correctly (which it doesn't\n    always do, e.g., class attributes it cannot resolve).\n\n    1.  The camel case strings that this program would change to snake case strings\n    without issuing a warning (and vice versa) are disjoint sets of names.\n\n    2.  If no occurrences of the new, proposed name exist in any file where changes\n    are made then no warning will be given and all the instances of the old\n    name will be converted to the new one.  No name collisions can occur\n    because the new name did not exist in any of those files in the first\n    place.  Any variables which end up with the same name already had the same\n    name in the first place.\n\n    Of course since Python is dynamic and has introspection there will always\n    be cases where the rename substitutions fail (such as modifying the globals\n    dict).  Rope is also not perfect, and fails to make some changes which it\n    should make for semantic equivalence.  Most of these latter errors will at\n    least cause a warning to be generated after all the changes have been\n    applied.\n\nLicense\n=======\n\nCopyright (c) 2017 by Allen Barker.  MIT license, see the file LICENSE for more\ndetails.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abarker/camel-snake-pep8",
    "keywords": "pep-8",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "camel-snake-pep8",
    "package_url": "https://pypi.org/project/camel-snake-pep8/",
    "platform": "",
    "project_url": "https://pypi.org/project/camel-snake-pep8/",
    "project_urls": {
      "Homepage": "https://github.com/abarker/camel-snake-pep8"
    },
    "release_url": "https://pypi.org/project/camel-snake-pep8/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Use Python-Rope to convert names in a Python project to conform with PEP-8.",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8563874,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5440602d2bd3ef5c441ec61c163429f0ab3d5e59f10625354518046d37b594e1",
          "md5": "12041f44ca8adab4c91693737d65c297",
          "sha256": "0e0cd8f28d94a9af260c15a1d8f64c7efda8c4cbf5d361cfa1177afceb95e2c0"
        },
        "downloads": -1,
        "filename": "camel-snake-pep8-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12041f44ca8adab4c91693737d65c297",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7359,
        "upload_time": "2020-10-02T04:22:14",
        "upload_time_iso_8601": "2020-10-02T04:22:14.035024Z",
        "url": "https://files.pythonhosted.org/packages/54/40/602d2bd3ef5c441ec61c163429f0ab3d5e59f10625354518046d37b594e1/camel-snake-pep8-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d327cfbdb2b15a9d0ca499e886989d7d11b7f0112b296447c44c1749aacf0fe0",
          "md5": "b31811c1ba5a13630bc5f7f689bb8e0d",
          "sha256": "b5da1f06c17da37420de0f7dde9229a54f1494e88c964026e770f8181a2d5bd6"
        },
        "downloads": -1,
        "filename": "camel-snake-pep8-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b31811c1ba5a13630bc5f7f689bb8e0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17982,
        "upload_time": "2020-10-02T04:57:36",
        "upload_time_iso_8601": "2020-10-02T04:57:36.038037Z",
        "url": "https://files.pythonhosted.org/packages/d3/27/cfbdb2b15a9d0ca499e886989d7d11b7f0112b296447c44c1749aacf0fe0/camel-snake-pep8-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537ad6f2b23abe76a61b203813e6dbeea0de53d026469ff3e919a1d7e3960349",
          "md5": "05b9852449ce7de9aa08c9fda5d323c3",
          "sha256": "e7fcfcf4ee9ce8682127eedfe5f9662090a66895e5219934cb8b668b148ff7e9"
        },
        "downloads": -1,
        "filename": "camel-snake-pep8-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "05b9852449ce7de9aa08c9fda5d323c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17977,
        "upload_time": "2020-10-02T05:13:27",
        "upload_time_iso_8601": "2020-10-02T05:13:27.685185Z",
        "url": "https://files.pythonhosted.org/packages/53/7a/d6f2b23abe76a61b203813e6dbeea0de53d026469ff3e919a1d7e3960349/camel-snake-pep8-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c1ff27473d2874b7fd014825767d0a131a452203e168d637451a026ea7579e",
          "md5": "134b65796c308a9eb2dfe4c02215e981",
          "sha256": "3d949520beb753d92474d106c371d0b76e7e2e4feab9f3897bcc522bdd301a04"
        },
        "downloads": -1,
        "filename": "camel-snake-pep8-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "134b65796c308a9eb2dfe4c02215e981",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19175,
        "upload_time": "2020-11-02T20:20:12",
        "upload_time_iso_8601": "2020-11-02T20:20:12.206652Z",
        "url": "https://files.pythonhosted.org/packages/a8/c1/ff27473d2874b7fd014825767d0a131a452203e168d637451a026ea7579e/camel-snake-pep8-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8c1ff27473d2874b7fd014825767d0a131a452203e168d637451a026ea7579e",
        "md5": "134b65796c308a9eb2dfe4c02215e981",
        "sha256": "3d949520beb753d92474d106c371d0b76e7e2e4feab9f3897bcc522bdd301a04"
      },
      "downloads": -1,
      "filename": "camel-snake-pep8-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "134b65796c308a9eb2dfe4c02215e981",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19175,
      "upload_time": "2020-11-02T20:20:12",
      "upload_time_iso_8601": "2020-11-02T20:20:12.206652Z",
      "url": "https://files.pythonhosted.org/packages/a8/c1/ff27473d2874b7fd014825767d0a131a452203e168d637451a026ea7579e/camel-snake-pep8-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}