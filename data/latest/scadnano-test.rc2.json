{
  "info": {
    "author": "David Doty",
    "author_email": "doty@ucdavis.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# scadnano Python package\n\n![Python package](https://github.com/UC-Davis-molecular-computing/scadnano-python-package/workflows/Python%20package/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/scadnano-python-package/badge/?version=latest)](https://scadnano-python-package.readthedocs.io/en/latest/?badge=latest)\n\n[scadnano](http://scadnano.org) (\"scriptable-cadnano\") is a program for designing synthetic DNA structures such as DNA origami. \nThe scadnano Python package \n([source code repository here](https://github.com/UC-Davis-molecular-computing/scadnano-python-package)) \nis a library for programmatically creating and editing these nanostructures.\nThe scadnano project is developed and maintained by the UC Davis Molecular Computing group.\nNote that [cadnano](https://cadnano.org) is a separate project, developed and maintained by the [Douglas lab](https://bionano.ucsf.edu/) at UCSF.\n\nIf you find scadnano useful in a scientific project, please cite its associated paper:\n\n> scadnano: A browser-based, scriptable tool for designing DNA nanostructures.  \n  David Doty, Benjamin L Lee, and Tristan StÃ©rin.  \n  DNA 2020: *Proceedings of the 26th International Conference on DNA Computing and Molecular Programming*  \n  [ [paper](https://doi.org/10.4230/LIPIcs.DNA.2020.9) | [BibTeX](https://web.cs.ucdavis.edu/~doty/papers/scadnano.bib) ]\n\n*Note:* If you are reading this on the PyPI website, some of the links below won't work. Many are relative links intended to be read on the [GitHub README page](https://github.com/UC-Davis-molecular-computing/scadnano-python-package#readme).\n\n\n## Table of contents\n\n* [Overview](#overview)\n* [Reporting issues](#reporting-issues)\n* [Installation](#installation)\n* [Example](#example)\n* [Abbreviated syntax with chained methods](#abbreviated-syntax-with-chained-methods)\n* [Tutorial](#tutorial)\n* [API documentation](#api-documentation)\n* [Other examples](#other-examples)\n* [Contributing](#contributing)\n\n## Overview\n\nThis package is used to write Python scripts outputting `.sc` files readable by [scadnano](https://scadnano.org), a web application useful for displaying and manually editing these structures. The purpose of this module is to help automate some of the task of creating DNA designs, as well as making large-scale changes to them that are easier to describe programmatically than to do by hand in the scadnano web interface.\n\nEarly versions of this project didn't have well-defined versions. However, we will try to announce breaking changes (and possibly new features) under the [GitHub releases page](https://github.com/UC-Davis-molecular-computing/scadnano-python-package/releases). The version numbers in this Python library repo and the [web interface repo](https://github.com/UC-Davis-molecular-computing/scadnano/releases) won't always advance at the same time. \n\nFollowing [semantic versioning](https://semver.org/), version numbers are major.minor.patch, i.e., version 0.9.2 has minor version number 9. Prior to version 1.0.0, when a breaking change is made, this will increment the minor version (for example, going from 0.9.4 to 0.10.0). After version 1.0.0, breaking changes will increment the major version.\n\n\n\n\n\n## Reporting issues\n\nPlease report issues in the web interface at the [scadnano web interface GitHub repository](https://github.com/UC-Davis-molecular-computing/scadnano/issues), and report issues in the Python scripting library at the [scadnano Python package GitHub repository](https://github.com/UC-Davis-molecular-computing/scadnano-python-package/issues).\n\n\n\n\n\n\n## Installation\n\nShort version: type this at the command line:\n\n```console\npip install scadnano\n```\n\nRead below for troubleshooting suggestions if that didn't work.\n\n### Getting Python\nThe scadnano Python package requires Python version 3.7 or later (with a workaround available for version 3.6, but not for any lower version). \n\nTo check your current version of Python, open a command line and type\n\n```\npython --version\n```\n\nIf it is version 2.7 or below, type\n\n```\npython3 --version\n```\n\nIf that fails, or reports Python version 3.5 or below, you will have to install a later version of Python (recommended at least 3.7). Follow [this link](https://www.python.org/downloads/) to install Python. You may also use an alternative Python distribution, such as [Anaconda](https://www.anaconda.com/products/individual#Downloads).\n\nIf you are using Python 3.6 and do not wish to upgrade, you can install a package providing the required features: the [dataclasses backport](https://pypi.org/project/dataclasses/); see `pip` instructions below to see how to install it.\nPython 3.7 provides the\n[dataclasses module](https://docs.python.org/3/library/dataclasses.html) automatically.\n\n\n\n### Installing the scadnano Python package\n\nOnce Python is installed (and the dataclasses backport if you have Python version 3.6), there are two ways you can install the scadnano Python package:\n\n1. pip (recommended)\n\n    Use [pip](https://pypi.org/project/pip/) to install the package by executing the following at the command line:\n    ```console\n    pip install scadnano\n    ```\n\n    If it worked, you should be able to open a Python interpreter and import the scadnano module:\n\n    ```console\n    Python 3.7.9 (default, Aug 31 2020, 17:10:11) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import scadnano as sc\n    >>> print(sc.Domain(helix=1, forward=True, start=0, end=8))\n    Domain(, helix=1, forward=True, start=0, end=8)\n    >>>\n    ```\n\n    ### Troubleshooting\n    If the above does not work for you, here are some things to try.\n\n    If your Python installation does not already have pip installed, you may have to install it. \n    Executing [this Python script](https://bootstrap.pypa.io/get-pip.py) should work; \n    see also \n    https://docs.python.org/3/installing/index.html \n    or \n    https://www.liquidweb.com/kb/install-pip-windows/.\n\n    Once pip is installed, or if you believe it is already installed, check your version of `pip` by typing \n    ```\n    pip --version\n    ```\n    It should say something like \n    ```\n    pip 19.3.1 from ...lib\\site-packages\\pip (python 3.8)\n    ```\n    If the version of Python at the end is Python 3.7 or higher, you are good. If it is version 2.7 or lower, type\n    ```\n    pip3 --version\n    ```\n    If that works and shows Python 3.7 or higher, you are good, but you should type `pip3` in the subsequent instructions instead of `pip`.\n    \n    If it shows Python 3.6, install the [dataclasses backport module](https://pypi.org/project/dataclasses/) via\n    ```\n    pip install dataclasses\n    ```\n    If it shows Python 3.5 or lower, then you will need to upgrade your Python version (recommended Python 3.7 or higher).\n\n    \n2. download\n\n    As a simple alternative (in case you run into trouble using pip), you can download and place the following files in your [PYTHONPATH](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH) (e.g., in the same directory as the scripts you are running). **Note:** If you are reading this on the PyPI website or anywhere other than GitHub, the links below won't work. They are relative links intended to be read on the [GitHub README page](https://github.com/UC-Davis-molecular-computing/scadnano-python-package#readme).\n\n    * *required*: [scadnano.py](scadnano/scadnano.py) \n    * *optional*: [modifications.py](scadnano/modifications.py); This contains some common DNA modifications such as biotin and Cy3. \n    * *optional*: [origami_rectangle.py](scadnano/origami_rectangle.py); This can help create origami rectangles, but it is not necessary to use scadnano.\n    \n    To download them, right-click on \"Raw\" near the top and select (in Chrome or Firefox) \"Save link as...\":\n    ![](images/download_raw_screenshot.png)\n    \n    The scadnano package uses the Python package [xlwt](https://pypi.org/project/xlwt/) to write Excel files, so xlwt must be installed in order to call the method [`Design.write_idt_plate_excel_file()`](https://scadnano-python-package.readthedocs.io/#scadnano.Design.write_idt_plate_excel_file) to export an Excel file with DNA sequences. To install xlwt, type `pip install xlwt` at the command line. (If you instead use pip to install the scadnano package, xlwt will be automatically installed.)\n\n\n\n\n\n\n\n## Example\n\nConsider the following design:\n\n![](https://raw.githubusercontent.com/UC-Davis-molecular-computing/scadnano/master/doc-images/screenshot-initial.png)\n\nThe following Python script produces this design.\n\n```python\nimport scadnano as sc\nimport modifications as mod\n\n\ndef create_design():\n    # helices\n    helices = [sc.Helix(max_offset=48), sc.Helix(max_offset=48)]\n\n    # left staple\n    stap_left_domain1 = sc.Domain(helix=1, forward=True, start=8, end=24)\n    stap_left_domain0 = sc.Domain(helix=0, forward=False, start=8, end=24)\n    stap_left = sc.Strand(domains=[stap_left_domain1, stap_left_domain0])\n\n    # right staple\n    stap_right_domain0 = sc.Domain(helix=0, forward=False, start=24, end=40)\n    stap_right_domain1 = sc.Domain(helix=1, forward=True, start=24, end=40)\n    stap_right = sc.Strand(domains=[stap_right_domain0, stap_right_domain1])\n    stap_right.set_modification_5p(mod.biotin_5p)\n\n    # scaffold\n    scaf_domain1_left = sc.Domain(helix=1, forward=False, start=8, end=24)\n    scaf_domain0 = sc.Domain(helix=0, forward=True, start=8, end=40)\n    loopout = sc.Loopout(length=3)\n    scaf_domain1_right = sc.Domain(helix=1, forward=False, start=24, end=40)\n    scaf = sc.Strand(domains=[scaf_domain1_left, scaf_domain0, loopout, scaf_domain1_right], is_scaffold=True)\n\n    # whole design\n    design = sc.Design(helices=helices, strands=[scaf, stap_left, stap_right], grid=sc.square)\n\n    # deletions and insertions added to design are added to both strands on a helix\n    design.add_deletion(helix=1, offset=20)\n    design.add_insertion(helix=0, offset=14, length=1)\n    design.add_insertion(helix=0, offset=26, length=2)\n\n    # also assigns complement to strands other than scaf bound to it\n    design.assign_dna(scaf, 'AACGT' * 18)\n\n    return design\n\n\nif __name__ == '__main__':\n    design = create_design()\n    design.write_scadnano_file(directory='output_designs')\n```\n\nRunning the code above produces a `.sc` file that, if loaded into scadnano, should appear as in the screenshot above. The [web interface README](https://github.com/UC-Davis-molecular-computing/scadnano/blob/master/README.md#terminology) explains many of the terms used in the code (domain, helix, loopout, insertion, etc.).\n\n\n## Abbreviated syntax with chained methods\nInstead of explicitly creating variables and objects representing each domain in each strand, there is a shorter syntax using chained method calls. Instead of the above, create only the helices first, then create the Design. Then strands can be added using a shorter syntax, to describe how to draw the strand starting at the 5' end and moving to the 3' end. The following is a modified version of the above script using these chained methods\n\n```python\nimport scadnano as sc\nimport modifications as mod\n\n\ndef create_design():\n    # helices\n    helices = [sc.Helix(max_offset=48), sc.Helix(max_offset=48)]\n\n    # whole design\n    design = sc.Design(helices=helices, grid=sc.square)\n\n    # for absolute offsets, call method \"to\"\n    # left staple\n    design.strand(1, 8).to(24).cross(0).to(8)\n\n    # for relative offsets, call method \"move\"\n    # right staple\n    design.strand(0, 40).move(-16).cross(1).move(16).with_modification_5p(mod.biotin_5p)\n\n    # scaffold\n    design.strand(1, 24).move(-16).cross(0).move(32).loopout(1, 3).move(-16).as_scaffold()\n\n    # deletions and insertions added to design are added to both strands on a helix\n    design.add_deletion(helix=1, offset=20)\n    design.add_insertion(helix=0, offset=14, length=1)\n    design.add_insertion(helix=0, offset=26, length=2)\n\n    # also assigns complement to strands other than scaf bound to it\n    design.assign_dna(design.scaffold, 'AACGT' * 18)\n\n    return design\n\n\nif __name__ == '__main__':\n    design = create_design()\n    design.write_scadnano_file(directory='output_designs')\n```\n\nDocumentation is available in the [API docs](https://scadnano-python-package.readthedocs.io/en/latest/#scadnano.Design.strand).\n\n\n\n\n\n\n\n## API Documentation\n\nOnline documentation of the package API (which classes, methods, functions, and constants are provided by the package) is located here:\nhttps://scadnano-python-package.readthedocs.io\n\n\n\n\n\n## Tutorial\n\nA [tutorial](https://github.com/UC-Davis-molecular-computing/scadnano-python-package/blob/master/tutorial/tutorial.md) shows how to create a \"standard\" 24-helix DNA origami rectangle using the scadnano Python package.\n\n\n\n\n\n## Other examples\n\n*Note:* If you are reading this on the PyPI website, the links below won't work. They are relative links intended to be read on the [GitHub README page](https://github.com/UC-Davis-molecular-computing/scadnano-python-package#readme).\n\nSeveral example scripts are located in the \n[examples/](examples) subfolder. \nTheir output is contained in the \n[examples/output_designs/](examples/output_designs) subfolder.\n\n\n\n## Contributing\nIf you wish to contribute to scadnano, please see the [CONTRIBUTING document](CONTRIBUTING.md) to contribute to the scadnano Python package. There is also a [CONTRIBUTING document](https://github.com/UC-Davis-molecular-computing/scadnano/blob/master/CONTRIBUTING.md) for the web interface.\n\n",
    "description_content_type": "text/markdown; variant=GFM",
    "docs_url": null,
    "download_url": "https://github.com/UC-Davis-molecular-computing/scadnano-python-package/archive/v0.17.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UC-Davis-molecular-computing/scadnano-python-package",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scadnano-test",
    "package_url": "https://pypi.org/project/scadnano-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/scadnano-test/",
    "project_urls": {
      "Download": "https://github.com/UC-Davis-molecular-computing/scadnano-python-package/archive/v0.17.0.zip",
      "Homepage": "https://github.com/UC-Davis-molecular-computing/scadnano-python-package"
    },
    "release_url": "https://pypi.org/project/scadnano-test/0.17.1/",
    "requires_dist": [
      "xlwt",
      "dataclasses (>=0.6) ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "Python scripting library for generating designs readable by scadnano.",
    "version": "0.17.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12188738,
  "releases": {
    "0.17.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9edfb837bad94d8b632b3855887f39e0433bbf0f5b27b4af096f291cb73463f",
          "md5": "41c90343f67d2ef936b3f53a4ec6ed0c",
          "sha256": "7f4a2033edb50a7ad21a0fd59499d5898942b56d789d73a5714031c0a7d42cec"
        },
        "downloads": -1,
        "filename": "scadnano_test-0.17.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41c90343f67d2ef936b3f53a4ec6ed0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88259,
        "upload_time": "2021-12-02T10:56:45",
        "upload_time_iso_8601": "2021-12-02T10:56:45.799009Z",
        "url": "https://files.pythonhosted.org/packages/b9/ed/fb837bad94d8b632b3855887f39e0433bbf0f5b27b4af096f291cb73463f/scadnano_test-0.17.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17cff5878d58480187988bfafe43979d68d1689f37888938570ecbf6381f4786",
          "md5": "50ca6be96e642e4ac587293ecabf8a41",
          "sha256": "8fbd8d4a6601cd0b71a953e1304d9bd0113f86429553916b8b09d07b11668bc0"
        },
        "downloads": -1,
        "filename": "scadnano_test-0.17.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50ca6be96e642e4ac587293ecabf8a41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 91296,
        "upload_time": "2021-12-02T10:56:48",
        "upload_time_iso_8601": "2021-12-02T10:56:48.068697Z",
        "url": "https://files.pythonhosted.org/packages/17/cf/f5878d58480187988bfafe43979d68d1689f37888938570ecbf6381f4786/scadnano_test-0.17.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.17.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90150b97da158f146ec49d4e2c6c5869327a170e24f82c6129bcf9b41b72ea71",
          "md5": "626af04b37fc29c57b9d846bf0238feb",
          "sha256": "47631ba03df4a975310eb812b8ff5c6b0b11f7f7187fb40418da938367f1e084"
        },
        "downloads": -1,
        "filename": "scadnano_test-0.17.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "626af04b37fc29c57b9d846bf0238feb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88260,
        "upload_time": "2021-12-02T11:08:42",
        "upload_time_iso_8601": "2021-12-02T11:08:42.001189Z",
        "url": "https://files.pythonhosted.org/packages/90/15/0b97da158f146ec49d4e2c6c5869327a170e24f82c6129bcf9b41b72ea71/scadnano_test-0.17.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eb4e024f0a60035eb6bffcc767c91bb6daba1afb86e17c65fb46b9731c1cbf3",
          "md5": "3b69253ca7c212b27241f31f8f2b69d2",
          "sha256": "9fe6a80b0ee4e1f74a40e624ed70fcaea01eafb06c3523ae02342bee7cb8ecdb"
        },
        "downloads": -1,
        "filename": "scadnano_test-0.17.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b69253ca7c212b27241f31f8f2b69d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 91280,
        "upload_time": "2021-12-02T11:08:43",
        "upload_time_iso_8601": "2021-12-02T11:08:43.770830Z",
        "url": "https://files.pythonhosted.org/packages/1e/b4/e024f0a60035eb6bffcc767c91bb6daba1afb86e17c65fb46b9731c1cbf3/scadnano_test-0.17.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90150b97da158f146ec49d4e2c6c5869327a170e24f82c6129bcf9b41b72ea71",
        "md5": "626af04b37fc29c57b9d846bf0238feb",
        "sha256": "47631ba03df4a975310eb812b8ff5c6b0b11f7f7187fb40418da938367f1e084"
      },
      "downloads": -1,
      "filename": "scadnano_test-0.17.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "626af04b37fc29c57b9d846bf0238feb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 88260,
      "upload_time": "2021-12-02T11:08:42",
      "upload_time_iso_8601": "2021-12-02T11:08:42.001189Z",
      "url": "https://files.pythonhosted.org/packages/90/15/0b97da158f146ec49d4e2c6c5869327a170e24f82c6129bcf9b41b72ea71/scadnano_test-0.17.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eb4e024f0a60035eb6bffcc767c91bb6daba1afb86e17c65fb46b9731c1cbf3",
        "md5": "3b69253ca7c212b27241f31f8f2b69d2",
        "sha256": "9fe6a80b0ee4e1f74a40e624ed70fcaea01eafb06c3523ae02342bee7cb8ecdb"
      },
      "downloads": -1,
      "filename": "scadnano_test-0.17.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3b69253ca7c212b27241f31f8f2b69d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 91280,
      "upload_time": "2021-12-02T11:08:43",
      "upload_time_iso_8601": "2021-12-02T11:08:43.770830Z",
      "url": "https://files.pythonhosted.org/packages/1e/b4/e024f0a60035eb6bffcc767c91bb6daba1afb86e17c65fb46b9731c1cbf3/scadnano_test-0.17.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}