{
  "info": {
    "author": "Readul Hasan Chayan [Heemayl]",
    "author_email": "me@heemayl.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# DRF Ext (Django REST Framework Extensions)\n\n## Extensions for the DRF\n\n# Installation:\n\n\tpip install drf-ext\n\n---\n\n# Features/Extensions:\n\n- Nested model serializer saving (`create`/`update`)\n- Declaration of non-required fields\n- Add multiple common parameters to a set of fields\n- Check fields' existence on de-serialization (`create`/`update`)\n- Check any field's existence among a set of fields on de-serialization (`create`/`update`)\n- Several frequently used utilities\n\n---\n\n# Available objects:\n\n### Metaclasses:\n\n- `NestedCreateUpdateMetaclass`: provides nested serializer writes on `create` and `update`.\n- `FieldOptionsMetaclass`: provides various field declaration options for different scenarios.\n- `ExtendedSerializerMetaclass`: contains both `NestedCreateUpdateMetaclass` and `FieldOptionsMetaclass`.\n- `InheritableExtendedSerializerMetaclass`: `ExtendedSerializerMetaclass` with inheritance support.\n\n### Mixins:\n\n- `NestedCreateUpdateMixin`: provides nested serializer writes on `create` and `update` (used by `NestedCreateUpdateMetaclass`), see example below.\n\n\n### Utilities:\n\n- `update_error_dict`: allows updating a `ValidationError` error dict with provided key/value.\n- `exc_dict_has_keys`: tests whether given key(s) are in the exception error dict (e.g. `ValidationError`).\n- `get_request_user_on_serializer`: gets the current user object from inside the serializer.\n\n---\n\n**NOTE:** All of the above are `import`-able from `drf_ext` e.g.:\n\n```python\n\nfrom drf_ext import NestedCreateUpdateMetaclass, update_error_dict\n\n```\n\n---\n\n# Examples:\n\nAssuming the following `models.py`:\n\n```python\n\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Tag(models.Model):\n\n\tname = models.CharField(max_length=12)\n\n\nclass Address(models.Model):\n\n\tuser = models.OneToOneField(\n\t\tUser,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name=\"address\",\n\t\tnull=True,\n\t\tblank=True,\n\t)\n\ttags = models.ManyToManyField(Tag, related_name=\"addresses\", blank=True)\n\n\tstate = models.CharField(max_length=2)\n\tzip_code = models.CharField(max_length=12)\n\n\nclass Client(models.Model):\n\n\tuser = models.OneToOneField(\n\t\tUser,\n\t\ton_delete=models.CASCADE,\n\t\trelated_name=\"client\",\n\t\tnull=False,\n\t\tblank=False,\n\t)\n\n\n```\n\n## Metaclasses/mixins:\n\n### `NestedCreateUpdateMetaclass`/`NestedCreateUpdateMixin`:\n\n`serializers.py`:\n\n```python\n\nfrom rest_framework import serializers\n\nfrom drf_ext import NestedCreateUpdateMetaclass\n\n\nclass AddressSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = \"__all__\"\n\n\nclass UserSerializer(\n\tserializers.ModelSerializer, metaclass=NestedCreateUpdateMetaclass\n):\n\taddress = AddressSerializer()\n\n\tclass Meta:\n\t\tmodel = User\n\t\tfields = \"__all__\"\n\n```\n\nSample *POST* request:\n\n```python\n\ndata = {\n\t\"username\": \"my_username\",\n\t\"password\": \"my_password\",\n\t\"address\": {\n\t\t\"state\": \"CA\",\n\t\t\"zip_code\": \"12345\",\n\t\t\"tags\": [1, 3, 7]  # `pk` of `Tag` objects\n\t}\n}\n\nclient.post(\"/users/\", data=data)\n\n```\n\nSample *PUT/PATCH* request:\n\n```python\n\ndata = {\n\t\"address\": {\n\t\t\"_pk\": 2,  # `pk` of the related `address`\n\t\t\"state\": \"CA\",\n\t\t\"zip_code\": \"12345\",\n\t\t\"tags\": [9, 24, 56]\n\t}\n}\n\nclient.patch(\"/users/1/\", data=data)\n\n```\n\n**NOTE:** `drf_ext` uses the existence of `_pk` field to track\nwhether it's a new nested object creation or an update. So if\n`_pk` is omitted it would taken as new nested object creation\nrequest.\n\nThis `_pk` **write-only** field is automatically\ninjected to all nested serializers by the metaclass. But if\none is using the `NestedCreateUpdateMixin`, they need to\nexplicitly define the field on the nested serializer e.g.:\n\n```python\n\nclass AddressSerializer(serializers.ModelSerializer):\n\n\t_pk = serializers.IntegerField(write_only=True, required=False)  # here\n\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = (\"pk\", \"_pk\", \"state\", \"zip_code\")\n\t\tread_only_fields = (\"pk\",)\n\n\nclass UserSerializer(NestedCreateUpdateMixin, serializers.ModelSerializer):\n\n\taddress = AddressSerializer()\n\n\tclass Meta:\n\t\tmodel = User\n\t\tfields = \"__all__\"\n\n```\n\nEverything else remains the same as `NestedCreateUpdateMetaclass`.\n\n\n### `FieldOptionsMetaclass`:\n\n#### `required_fields_on_create`, `required_fields_on_update`, `required_fields_on_create_any`, `required_fields_on_update_any`:\n\n```python\n\nclass AddressSerializer(serializers.ModelSerializer, metaclass=FieldOptionsMetaclass):\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = (\"pk\", \"state\", \"zip_code\")\n\t\tread_only_fields = (\"pk\",)\n\n\t\t# These fields are required on POST request i.e. on creation of object\n\t\trequired_fields_on_create = (\"state\", \"zip_code\")\n\n\t\t# These fields are required on PUT/PATCH request i.e. on update of object\n\t\trequired_fields_on_update = (\"zip_code\",)\n\n\nclass UserSerializer(\n\tserializers.ModelSerializer, metaclass=FieldOptionsMetaclass\n):\n\taddress = AddressSerializer()\n\n\tclass Meta:\n\t\tmodel = User\n\t\tfields = (\n\t\t\t\"pk\", \"address\", \"username\", \"email\",\n\t\t\t\"password\", \"first_name\", \"last_name\",\n\t\t)\n\t\tread_only_fields = (\"pk\",)\n\n\t\t# At least one of these fields are required on POST request\n\t\trequired_fields_on_create_any = (\"first_name\", \"last_name\")\n\n\t\t# At least one of these fields are required on PUT/PATCH request\n\t\trequired_fields_on_update_any = (\"address\", \"username\", \"email\")\n\n```\n\n#### `non_required_fields`:\n\n```python\n\nclass AddressSerializer(serializers.ModelSerializer, metaclass=FieldOptionsMetaclass):\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = (\"pk\", \"state\", \"zip_code\")\n\t\tread_only_fields = (\"pk\",)\n\n\t\t# The mentioned fields are made *non-required*, like providing\n\t\t# the `required=False` parameter on them. All fields are taken\n\t\t# as required, unless model has `blank=True` on the field, or\n\t\t# explicitly mentioned with `required=False`. This will allow\n\t\t# to control that from a single place. Also, this would make\n\t\t# working with `required_fields_on_create` and related options\n\t\t# (see above) easier to follow as users can decide to make a\n\t\t# field mandatory in POST but not in PUT/PATCH and vice versa,\n\t\t# which allows for a finer control over fields.\n\t\tnon_required_fields = (\"state\", \"zip_code\")\n\n```\n\n**NOTE:** If `non_required_fields` is not provided, all fields mentioned\nin `fields` (without `exclude`-ed ones) are made *non-required*. To use\nthe default option of DRF, one can set `non_required_fields` to an empty\niterable e.g.:\n\n```python\n\nclass AddressSerializer(serializers.ModelSerializer, metaclass=FieldOptionsMetaclass):\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = (\"pk\", \"state\", \"zip_code\")\n\n\t\tnon_required_fields = ()\n\n```\n---\n\n#### `common_field_params`:\n\n```python\nclass AddressSerializer(serializers.ModelSerializer, metaclass=FieldOptionsMetaclass):\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = (\"pk\", \"state\", \"zip_code\")\n\t\tread_only_fields = (\"pk\",)\n\n\t\t# `common_field_params` allows to add some common parameters\n\t\t# to a set of fields. This must be a `dict` with the keys\n\t\t# being an (hashable) iterable e.g. `tuple` and values being\n\t\t# a `dict` of parameter-values.\n\t\tcommon_field_params = {\n\t\t\t(\"state\", zip_code\"): {\n\t\t\t\t\"allow_blank\": False,\n\t\t\t\t\"trim_whitespace\": True,\n\t\t\t},\n\n\t\t\t# Using a single field is also fine (this works similar\n\t\t\t# to the default `extra_kwargs` in that case).\n\t\t\t(\"state\",): {\n\t\t\t\t\"max_length\": 2,\n\t\t\t},\n\t\t}\n\n```\n\n---\n\n### `ExtendedSerializerMetaclass`:\n\nIf you want to use all features from `NestedCreateUpdateMetaclass` and\n`FieldOptionsMetaclass` mentioned above, use this metaclass:\n\n```python\n\nclass UserSerializer(serializers.ModelSerializer, metaclass=ExtendedSerializerMetaclass):\n\n\taddress = AddressSerializer()\n\n\tclass Meta:\n\t\tmodel = Address\n\t\tfields = \"__all__\"\n\n\t\trequired_fields_on_create = (\"username, \"password\",)\n\t\trequired_fields_on_update_any = (\"first_name\", \"last_name\", \"email\")\n\n```\n\nSample *POST* request:\n\n```python\n\ndata = {\n\t\"username\": \"my_username\",\n\t\"password\": \"my_password\",\n\t\"address\": {\n\t\t\"state\": \"CA\",\n\t\t\"zip_code\": \"12345\"\n\t}\n}\n\nclient.post(\"/users/\", data=data)\n\n```\n---\n\n### `InheritableExtendedSerializerMetaclass`:\n\nWorks exactly like `ExtendedSerializerMetaclass`. This one should be\nused to include all the attributes defined in superclasses (ignoring\nthe dunder and `Meta` attributes, and callables).\n\nThis is designed to be used instead of `ExtendedSerializerMetaclass`\nwhen e.g. a (common) base class contains field definitions that are\nto be inherited by all child classes. For example:\n\n```python\n\n\tclass Common:\n\t\tfield = serializers.IntegerField()\n\n\tclass Serializer(\n\t\tserializers.ModelSerializer,\n\t\tmetaclass=InheritableExtendedSerializerMetaclass\n\t):\n\t\t# `field` will be injected here like it were defined\n\t\t# on this class body.\n\t\t...\n\n```\n\n---\n\n## Utilities:\n\n### `update_error_dict`:\n\n```python\n\nerrors = {}\n\nif ...:\n\t# Following will result in `errors` being:\n\t# `{\"field\": [\"Error message\"]}`\n\tupdate_error_dict(errors, \"field\", \"Error message\")\n\nif ...:\n\t# Following will result in `errors` being:\n\t# `{\"field\": [\"Error message\", \"New error message\"]}`\n\tupdate_error_dict(errors, \"field\", \"New error message\")\n\nif errors:\n\traise ValidationError(errors)\n\n```\n\n---\n\n### `exc_dict_has_keys`:\n\n```python\n\nexc = ValidationError({\n\t\"field_1\": [\"msg\", \"new msg\"],\n\t\"field_2\": [\"msg\"],\n})\n\nexc_dict_has_keys(exc, (\"field_1\", \"field_2\"))  # returns `True`\nexc_dict_has_keys(exc, \"field_1\")  # returns `True`\n\nexc_dict_has_keys(exc, (\"field_1\", \"field_2\", \"field_3\"))  # returns `False`\nexc_dict_has_keys(exc, \"field_3\")  # returns `False`\n\n```\n\n---\n\n### `get_request_user_on_serializer`:\n\n```python\n\nclass MySerializer(serializers.Serializer):\n\t...\n\t...\n\n\tdef create(self, validated_data):\n\t\t# Get the user sending this request\n\t\tuser = get_request_user_on_serializer(self)\n\n```\n\n---\n\n# Development:\n\n- Install `dev` dependencies:\n\n\t\tpip install drf-ext[dev]\n\n- Run tests:\n\n\t\tdrf_ext/tests$ PYTHONPATH=.. pytest\n\n---\n\n## License:\n\n#### MIT\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/heemayl/drf-ext",
    "keywords": "django django-rest django_rest rest development",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-ext",
    "package_url": "https://pypi.org/project/drf-ext/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-ext/",
    "project_urls": {
      "Bug Reports": "https://github.com/heemayl/drf-ext/issues",
      "Homepage": "https://github.com/heemayl/drf-ext",
      "Source": "https://github.com/heemayl/drf-ext"
    },
    "release_url": "https://pypi.org/project/drf-ext/0.1.1/",
    "requires_dist": [
      "djangorestframework",
      "pytest-django ; extra == 'dev'",
      "factory-boy ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Extensions for the DRF",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6919662,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b831195e8dac64235bde67be2d88dfed24475422a9fcf98ef0df1611f2710f5d",
          "md5": "a2527c4352c655f6cee8ac21769c9a39",
          "sha256": "f3da9e2d6a75beca9f4e90930ebdd3a08abbe09ece2a73c88ea4989828570127"
        },
        "downloads": -1,
        "filename": "drf_ext-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2527c4352c655f6cee8ac21769c9a39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10169,
        "upload_time": "2020-03-20T21:09:20",
        "upload_time_iso_8601": "2020-03-20T21:09:20.282966Z",
        "url": "https://files.pythonhosted.org/packages/b8/31/195e8dac64235bde67be2d88dfed24475422a9fcf98ef0df1611f2710f5d/drf_ext-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d424b8b78f6e8c664dc1dfb6287d68d55893bb692420305fc6fa992c85f6469b",
          "md5": "f6f16082e8c1ada5213f0f3355c9bc48",
          "sha256": "7504815caedb6d40f6389acb57166367b3d66dd98a7f927674ed2cb15c848437"
        },
        "downloads": -1,
        "filename": "drf-ext-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6f16082e8c1ada5213f0f3355c9bc48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1054,
        "upload_time": "2020-03-20T21:09:22",
        "upload_time_iso_8601": "2020-03-20T21:09:22.628344Z",
        "url": "https://files.pythonhosted.org/packages/d4/24/b8b78f6e8c664dc1dfb6287d68d55893bb692420305fc6fa992c85f6469b/drf-ext-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "397186bb9d2d117fedb17dcd014a89563308bde33ab61c4aaa5f518988e331fe",
          "md5": "75b2e61c714df8a099414d67e925aad6",
          "sha256": "11a36b8b8fa74ae513b3d13157b12ce5d7be3c35d872f342d9481a49ad3f8827"
        },
        "downloads": -1,
        "filename": "drf_ext-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75b2e61c714df8a099414d67e925aad6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11363,
        "upload_time": "2020-03-24T22:26:04",
        "upload_time_iso_8601": "2020-03-24T22:26:04.607840Z",
        "url": "https://files.pythonhosted.org/packages/39/71/86bb9d2d117fedb17dcd014a89563308bde33ab61c4aaa5f518988e331fe/drf_ext-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c11f3b4f99f31c67c878cc1f51afa119459823b437eb1c1060523ed08e3fba37",
          "md5": "fb0a0e78175680ea2579eb0fc1318e5d",
          "sha256": "070f1d2bff7ecc2a3d348a2e7426f55302b4b5c7fa99f7627722ae90ac924b76"
        },
        "downloads": -1,
        "filename": "drf-ext-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fb0a0e78175680ea2579eb0fc1318e5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1132,
        "upload_time": "2020-03-24T22:26:05",
        "upload_time_iso_8601": "2020-03-24T22:26:05.983075Z",
        "url": "https://files.pythonhosted.org/packages/c1/1f/3b4f99f31c67c878cc1f51afa119459823b437eb1c1060523ed08e3fba37/drf-ext-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5322b626cbc9f687c2286f7a2b16babd727aac90ec0205152f0ee49588854e7",
          "md5": "540adf3d93310e83a3c814584e81468f",
          "sha256": "1a605dd0a9175821eb0e258f3053795396b29d894c1eb963fa9e659be2a04cc4"
        },
        "downloads": -1,
        "filename": "drf_ext-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "540adf3d93310e83a3c814584e81468f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13870,
        "upload_time": "2020-03-25T20:46:49",
        "upload_time_iso_8601": "2020-03-25T20:46:49.498091Z",
        "url": "https://files.pythonhosted.org/packages/a5/32/2b626cbc9f687c2286f7a2b16babd727aac90ec0205152f0ee49588854e7/drf_ext-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ef9e1c180bd412e6295d0ddacc0beb130285a95ec6962001f6b1717eb68452",
          "md5": "63da5f906a9d065bee9fd115c0d5871c",
          "sha256": "4e558d72e223b73ea80b8247892ab5886e76f1229f2e6205e690b87e9a130d9f"
        },
        "downloads": -1,
        "filename": "drf-ext-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "63da5f906a9d065bee9fd115c0d5871c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3779,
        "upload_time": "2020-03-25T20:46:51",
        "upload_time_iso_8601": "2020-03-25T20:46:51.479421Z",
        "url": "https://files.pythonhosted.org/packages/d8/ef/9e1c180bd412e6295d0ddacc0beb130285a95ec6962001f6b1717eb68452/drf-ext-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d39e5ee961c6710b57f43a30443119a689d33f793bc50184089463328dea798a",
          "md5": "aca3c6d2f8309cd5dd15dc95bdf40d2f",
          "sha256": "bcfc2bb0dc7e377f03bca40e4de3b31b7cb6fa454489b67f80e7407a8c3f0c3e"
        },
        "downloads": -1,
        "filename": "drf_ext-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aca3c6d2f8309cd5dd15dc95bdf40d2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14325,
        "upload_time": "2020-03-28T21:26:07",
        "upload_time_iso_8601": "2020-03-28T21:26:07.444811Z",
        "url": "https://files.pythonhosted.org/packages/d3/9e/5ee961c6710b57f43a30443119a689d33f793bc50184089463328dea798a/drf_ext-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77edcc8130475a9162f38ad2178bed1c6177f157212eef81ef3af1a18a5781f1",
          "md5": "df7696c56fd86c078700d5505f4eb6cf",
          "sha256": "c262a0d4a7ab5e3788ff795d49c41f3203fa1cbb137bf7982474db688b5764a7"
        },
        "downloads": -1,
        "filename": "drf-ext-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df7696c56fd86c078700d5505f4eb6cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3856,
        "upload_time": "2020-03-28T21:26:09",
        "upload_time_iso_8601": "2020-03-28T21:26:09.276289Z",
        "url": "https://files.pythonhosted.org/packages/77/ed/cc8130475a9162f38ad2178bed1c6177f157212eef81ef3af1a18a5781f1/drf-ext-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f7230200af1bd7e3cc1d36e39f02d40631082522dd1b34a15e1e7144a3be84",
          "md5": "6984bf08b1ef9df595571ae8db0a539f",
          "sha256": "1190b8dbeb5efeffe046201ce5f65f855dfad54cab01acb56d1e6d8d870f8f8f"
        },
        "downloads": -1,
        "filename": "drf_ext-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6984bf08b1ef9df595571ae8db0a539f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18066,
        "upload_time": "2020-03-31T11:48:37",
        "upload_time_iso_8601": "2020-03-31T11:48:37.200865Z",
        "url": "https://files.pythonhosted.org/packages/21/f7/230200af1bd7e3cc1d36e39f02d40631082522dd1b34a15e1e7144a3be84/drf_ext-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "111bef4d4dab8aea13d39eef3a3fc6e3fd1dc3cbd170b549171e500f08475d48",
          "md5": "0e0b0468bfc09731683df3918e2ccde0",
          "sha256": "d71fad8810c88171e2d94a4aec8ef672277f96f85d3d31498e5b1d4b95017ea9"
        },
        "downloads": -1,
        "filename": "drf-ext-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e0b0468bfc09731683df3918e2ccde0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3851,
        "upload_time": "2020-03-31T11:48:38",
        "upload_time_iso_8601": "2020-03-31T11:48:38.424485Z",
        "url": "https://files.pythonhosted.org/packages/11/1b/ef4d4dab8aea13d39eef3a3fc6e3fd1dc3cbd170b549171e500f08475d48/drf-ext-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21f7230200af1bd7e3cc1d36e39f02d40631082522dd1b34a15e1e7144a3be84",
        "md5": "6984bf08b1ef9df595571ae8db0a539f",
        "sha256": "1190b8dbeb5efeffe046201ce5f65f855dfad54cab01acb56d1e6d8d870f8f8f"
      },
      "downloads": -1,
      "filename": "drf_ext-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6984bf08b1ef9df595571ae8db0a539f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18066,
      "upload_time": "2020-03-31T11:48:37",
      "upload_time_iso_8601": "2020-03-31T11:48:37.200865Z",
      "url": "https://files.pythonhosted.org/packages/21/f7/230200af1bd7e3cc1d36e39f02d40631082522dd1b34a15e1e7144a3be84/drf_ext-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "111bef4d4dab8aea13d39eef3a3fc6e3fd1dc3cbd170b549171e500f08475d48",
        "md5": "0e0b0468bfc09731683df3918e2ccde0",
        "sha256": "d71fad8810c88171e2d94a4aec8ef672277f96f85d3d31498e5b1d4b95017ea9"
      },
      "downloads": -1,
      "filename": "drf-ext-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e0b0468bfc09731683df3918e2ccde0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3851,
      "upload_time": "2020-03-31T11:48:38",
      "upload_time_iso_8601": "2020-03-31T11:48:38.424485Z",
      "url": "https://files.pythonhosted.org/packages/11/1b/ef4d4dab8aea13d39eef3a3fc6e3fd1dc3cbd170b549171e500f08475d48/drf-ext-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}