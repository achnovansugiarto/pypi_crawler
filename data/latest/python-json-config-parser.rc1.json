{
  "info": {
    "author": "Bruno Silva de Andrade",
    "author_email": "brunojf.andrade@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# python-json-config-parser\nThis project was created to give you the possibility of creating json config files dynamicaly using OOP\n\nHOW TO INSTALL\n---------------------------\nUse pip to install it.\n\n```\npip install python-json-config-parser\n```\n\n\nHOW TO USE\n---------------------------\nThe Class Config takes two arguments, the first is a Schema(https://github.com/keleshev/schema) to ensure the model of config, the second is the str path of json config file.\n\nIf you don't specify the path, the default value('config.json') will be used if one exists in the same dir where the script is running.\n\nFor example:\n\nThe model file.\n```\nfrom schema import Use, And\n\nSCHEMA_CONFIG = {\n    \"core\":{\n        \"logging\":{\n            \"format\": And(Use(str), lambda string: len(string) > 0),\n            \"datefmt\": And(Use(str), lambda string: len(string) > 0)\n        },\n        \"allowed_clients\":[\n            {\n                \"ip\":str, # <- Here you can use regex to validate the ip format\n                \"timeout\":int\n            }\n        ]\n    }\n}\n\n```\n\nThe config.json file\n```\n{\n    \"core\":{\n        \"logging\":{\n            \"format\":\"[%(asctime)s][%(levelname)s]: %(message)s\",\n            \"datefmt\": \"%d-%b-%y %H:%M:%S\"\n        },\n        \"allowed_clients\":[\n            {\n                \"ip\":\"192.168.0.10\",\n                \"timeout\":60\n            },\n            {\n                \"ip\":\"192.168.0.11\",\n                \"timeout\":100\n            }\n        ]\n    }\n}\n```\n\nThe istance of Config Class:\n```\nfrom jsonconfigparser import Config, ConfigException\nimport logging\n\ntry:\n    config = Config(SCHEMA_CONFIG) # <- Here I'm using that SCHEMA_CONFIG we had declared, and the dir file default value is being used\nexcept ConfigException as e:\n    print(e)\n    exit()\n\n#to access your config you need just:\n\n\nfmt = config.core.logging.format #look this, at this point I'm already using the config variable\ndtfmt = config.core.logging.datefmt #here again\n\nlogging.getLogger(__name__)\n\nlogging.basicConfig(\n    format=fmt,\n    datefmt=dtfmt\n    level=20\n)\n\n#the list of object example:\n\nfor client in config.core.allowed_clients:\n    print(client.ip)\n    print(client.timeout)\n\n```\n\nInstanced the first obj, you can instance Config in other files of your project\njust calling the Config without args like that:\n\n```\nfrom jsonconfigparser import Config, ConfigException\n\nconfig = Config() #At this point you already have the configuration properties in your config object\n```\n\n\nCONTRIBUTE\n----------\n\nFork https://github.com/BrunoSilvaAndrade/python-json-config-parser/ , create commit and pull request to ``develop``.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BrunoSilvaAndrade/python-json-config-parser",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-json-config-parser",
    "package_url": "https://pypi.org/project/python-json-config-parser/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-json-config-parser/",
    "project_urls": {
      "Homepage": "https://github.com/BrunoSilvaAndrade/python-json-config-parser"
    },
    "release_url": "https://pypi.org/project/python-json-config-parser/1.0.9/",
    "requires_dist": [
      "schema (>=0.7.1)"
    ],
    "requires_python": "",
    "summary": "Project created to given the possibility of create dynamics Json config files",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12748812,
  "releases": {
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d63a7c79fb91c6ed31fd114d99c413f8df680cb47ac628979f7a984a59b745fd",
          "md5": "3865293fc55e93470babac2ebf6a267c",
          "sha256": "f25536a377fb6aa9b0dfb849aa477db7f302d3dcdaf4d1dd802f7a2a5c272248"
        },
        "downloads": -1,
        "filename": "python_json_config_parser-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3865293fc55e93470babac2ebf6a267c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4262,
        "upload_time": "2022-01-31T20:41:10",
        "upload_time_iso_8601": "2022-01-31T20:41:10.080874Z",
        "url": "https://files.pythonhosted.org/packages/d6/3a/7c79fb91c6ed31fd114d99c413f8df680cb47ac628979f7a984a59b745fd/python_json_config_parser-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d63a7c79fb91c6ed31fd114d99c413f8df680cb47ac628979f7a984a59b745fd",
        "md5": "3865293fc55e93470babac2ebf6a267c",
        "sha256": "f25536a377fb6aa9b0dfb849aa477db7f302d3dcdaf4d1dd802f7a2a5c272248"
      },
      "downloads": -1,
      "filename": "python_json_config_parser-1.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3865293fc55e93470babac2ebf6a267c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4262,
      "upload_time": "2022-01-31T20:41:10",
      "upload_time_iso_8601": "2022-01-31T20:41:10.080874Z",
      "url": "https://files.pythonhosted.org/packages/d6/3a/7c79fb91c6ed31fd114d99c413f8df680cb47ac628979f7a984a59b745fd/python_json_config_parser-1.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}