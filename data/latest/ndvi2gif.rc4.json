{
  "info": {
    "author": "Diego Garcia Diaz",
    "author_email": "digd.geografo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "==========================\nMulti Seasonal NDVI to GIF\n==========================\n\nndvi2gif is a python script for creating seasonal NDVI compositions\ngifs. This is just a small python class that uses `Google Earth Engine\nAPI <https://github.com/google/earthengine-api>`_ and the amazing\n`Geemap package <https://github.com/giswqs/geemap>`_, to create yearly\ncompositions based on the maximum\n`NDVI <https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index>`__\nvalue reached in every seasons. Maximum NDVI is used as season reducer, in order to avoid clouds and\ncloud shadows. However, we have added 'perc_90' (percentile 90) and 'median' as others available statistic choice\nwhen instantiating the class. Max remains the default, but sometimes median gives a\nbetter visual result, specially with Landsat 4 and 5 that sometimes has band errors\nthat can affect NDVI results. Percentile 90 is a good compromise between max and median. \n\nSo, this process generates a raster with 4 bands (Winter, Spring, Summer and\nAutumn) for every year in the chosen time period.  \n\nSatellite collections available are:\n\n* Sentinel 1-C-band Synthetic Aperture Radar 10 m pixel VH cross-polarization ('sar') | 2014-10-03 - Present\n* Sentinel 2-MSI 10 m pixel NDVI ('Sentinel') | 2015-06-23 - Present\n* Landsat 4-TM, 5-TM, 7-ETM+ and 8-OLI 30 m pixel NDVI ('Landsat') | 1982 - Present \n* MODIS MOD09Q1 v006 250 m pixel NDVI ('MODIS') | 2000-03-05 - Present\n\nLandsat collections datasets and MODIS, are Surface Reflectance (SR) data, while\nSentinel 2 is Top of Atmosphere Reflectance (TOA) dataset. This is\nbecause Surface Reflectance for Sentinel 2 data, is only available since\n2017. \n\nIf everything runs well, you should get a GIF similar to those ones that\nyou can find in the pics folder of this repo. Actually, you will get 2\ngifs, one of them named \"mygif_texted.gif\", which add year as text to\nthe gif. Here you can see an example close to Seville, where you can\ntell the blue colours (blue band in this example is summer) showing paddy\nfields over a marsh area (summer crops). Outside the marshes, the colours\ngreen and yellow predominate,showing winter crops such as cereals. You\ncan also realize the intermediate colours for different crops.\n\n.. image:: https://i.imgur.com/UZDptan.gif\n\n\nBeyond the nice gif, a lot of information can be obtained with this kind of multi seasonal NDVI approach. Knowing the pair NDVI season-Raster band that you chose for your gif, and having colour formation in mind (graphic below), you could tell which is the phenology, and therfore the crop or every parcel, and even how it changes through the years.  White colours means high NDVI values for the three chosen seasons (perennial vegetation), black colour means low NDVI values, such as permanent water bodies, sand, impervious surfaces, etc...\n\nSince we have added SAR data, maybe is no longer correct saying this is an NDVI tool, but with SAR the meaning s very similar to the NDVI approach, in this case we get higher return values when plants are bigger, and very low values for baresoil. So, at the end is another way to have a multi-temporal look at crop growth. \n\n.. image:: https://i.imgur.com/tq4aMBv.jpg\n\nLast, you have the choice to download the yearly ndvi composites as tiff files into your computer, in case you want the data for further analysis. Also, it have been noticed that Google Earth Engine reducers are really nice to create gorgeous multi-year composties, even for very large areas with MODIS, e.g. median seasonal NDVI for whole Africa between 2001 and 2020. So, besides the automatic export for each year, you also have the chance to export your favourite multi-year compostion in a single file. \n\n\n\nInstallation\n============\n\n\nThis tiny and humble python class depends on geemap, so geemap will be installed for you. Also it could be a good idea install first geemap in a python environment (you can see the details here: `geemap install) <https://github.com/giswqs/geemap#installation>`_ and later install ndvi2gif in that environment via pip:\n\n.. code:: python\n\n  pip install ndvi2gif\n \n\n\nUsage\n=====\n\n\nThis is intend to be executed in a notebook and in tandem with a geemap Map object, so you could travel around the map and pick up your region of interest just by drawing a shape, and visualizing different dates and band combinations directly on the map. However, you could just run it in a command line and pass it a shapefile or a geojson as roi, and ask for the gif or for the geotiff rasters.\n\n\nPlease, see the `example notebook <https://github.com/Digdgeo/Ndvi2Gif/blob/master/ndvi2gif/ndvi2gif_notebook_example.ipynb>`_ \n\n.. code:: python\n\n    import geemap\n    from ndvi2gif import NdviSeasonality\n    \n    #You could need a first login to sart with python Earth Enginelogin \n    ee.Initialize()\n    \n    #Create the Map Object to choose he rois\n    Map = geemap.Map()\n    Map.add_basemap('Google Satellite')\n    Map\n    \n    #Set the roi to last drawn feature\n    roi = Map.draw_last_feature\n    \n    #Instance ndvi2gif\n    #Three different examples here to instantiate the class\n    myclass = NdviSeasonality(roi)\n    myclass2 = NdviSeasonality(roi, 2014, 2020, 'Landsat')\n    myclass3 = NdviSeasonality(roi, 2010, 2015, 'MODIS', key='median')\n    \n    #Maybe you feel like playing with the Map and see different colour/season combination efore generate the gif\n    vizParams = {'bands': ['summer', 'autumn', 'winter'], 'min': 0, 'max': 0.7, 'gamma': [0.95, 1.1, 1]}\n    Map.addLayer(show, vizParams, 'mycropsfirstviz')\n    \n    #Notice that you also can use the Earh Engine amazing analysis capabilities\n    wintermax = myclass.get_year_composite().select('winter').max()\n    median = myclass.get_year_composite().median()\n    Map.addLayer(wintermax, {'min': 0, 'max': 0.75}, 'winterMax')\n    Map.addLayer(median, {'min': 0.1, 'max': 0.8}, 'median')\n    \n    #To get the gif, ust use the method. \n    myclass.get_gif()\n    \n    #Last, you can export your yearly seasonal NDVI composites to your computer\n    myclass.get_export() \n\n\n\nToDo list\n=========\n\n\n* Add masking capablities based on NDVI values to show real color composite in the background. Is it that possible?\n* Add seasons dates as parameters that can be easily modified\n* Add a method to easily export multi-yearly composites\n\n\n\nContributions\n=============\n\n\nYes, please! git pulls will be welcome, even those related to my english grammar...\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Digdgeo/Ndvi2Gif",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ndvi2gif",
    "package_url": "https://pypi.org/project/ndvi2gif/",
    "platform": "",
    "project_url": "https://pypi.org/project/ndvi2gif/",
    "project_urls": {
      "Homepage": "https://github.com/Digdgeo/Ndvi2Gif"
    },
    "release_url": "https://pypi.org/project/ndvi2gif/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python package to create ndvi seasonal composites, and download them as gif and geotiff",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7204735,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7afe103a9f1a525a69881ebd4bcfff2fa2f4121584b2c3073a5f170c3156116f",
          "md5": "15cc21413d5977cea1dde94eae5b8f7d",
          "sha256": "9f2ce91ff2479c7abc54c25f4ae2f786c978f70fc8afdc95f2daff4ab74dac1f"
        },
        "downloads": -1,
        "filename": "ndvi2gif-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15cc21413d5977cea1dde94eae5b8f7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6650,
        "upload_time": "2020-05-02T17:32:57",
        "upload_time_iso_8601": "2020-05-02T17:32:57.236819Z",
        "url": "https://files.pythonhosted.org/packages/7a/fe/103a9f1a525a69881ebd4bcfff2fa2f4121584b2c3073a5f170c3156116f/ndvi2gif-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c8d090058a4256ac995ae50cf8913e19d9ca151065306922fced3a91cc954ed",
          "md5": "17686f07b84e4894cfcb8e850ff11a91",
          "sha256": "5464a4f326f95b1dcd987641dffeac221ad9bc4bb9f762e39f890ad7aa8ad58a"
        },
        "downloads": -1,
        "filename": "ndvi2gif-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "17686f07b84e4894cfcb8e850ff11a91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6989,
        "upload_time": "2020-05-03T00:09:56",
        "upload_time_iso_8601": "2020-05-03T00:09:56.720662Z",
        "url": "https://files.pythonhosted.org/packages/3c/8d/090058a4256ac995ae50cf8913e19d9ca151065306922fced3a91cc954ed/ndvi2gif-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "521d36c611dec2cd1d745dba4418b089d8a64bc2bb0c2c27b390788cae67252c",
          "md5": "a0e3992492028c1c6981642375bf1ea8",
          "sha256": "cf16593d7ea291d1e8af23d8938929487cf148708068495cf305ef401cf5f9b7"
        },
        "downloads": -1,
        "filename": "ndvi2gif-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a0e3992492028c1c6981642375bf1ea8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8215,
        "upload_time": "2020-05-06T01:38:34",
        "upload_time_iso_8601": "2020-05-06T01:38:34.113559Z",
        "url": "https://files.pythonhosted.org/packages/52/1d/36c611dec2cd1d745dba4418b089d8a64bc2bb0c2c27b390788cae67252c/ndvi2gif-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "922cd9d5a4ed0e73b4a290124d74e6e0083e938a8577c0ecd17255bfa6a8a8dd",
          "md5": "dc0ac11e9d98b0a6764e793f2e8802f2",
          "sha256": "b906c702f1e0e9c05b0ca8182b4781c9cb468da95517c7892eec60cc60484474"
        },
        "downloads": -1,
        "filename": "ndvi2gif-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc0ac11e9d98b0a6764e793f2e8802f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11593,
        "upload_time": "2020-05-09T17:43:02",
        "upload_time_iso_8601": "2020-05-09T17:43:02.011865Z",
        "url": "https://files.pythonhosted.org/packages/92/2c/d9d5a4ed0e73b4a290124d74e6e0083e938a8577c0ecd17255bfa6a8a8dd/ndvi2gif-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "922cd9d5a4ed0e73b4a290124d74e6e0083e938a8577c0ecd17255bfa6a8a8dd",
        "md5": "dc0ac11e9d98b0a6764e793f2e8802f2",
        "sha256": "b906c702f1e0e9c05b0ca8182b4781c9cb468da95517c7892eec60cc60484474"
      },
      "downloads": -1,
      "filename": "ndvi2gif-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "dc0ac11e9d98b0a6764e793f2e8802f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11593,
      "upload_time": "2020-05-09T17:43:02",
      "upload_time_iso_8601": "2020-05-09T17:43:02.011865Z",
      "url": "https://files.pythonhosted.org/packages/92/2c/d9d5a4ed0e73b4a290124d74e6e0083e938a8577c0ecd17255bfa6a8a8dd/ndvi2gif-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}