{
  "info": {
    "author": "Melissa Lopez",
    "author_email": "m.lopez@uu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# gengli\n\n`gengli` (generating glitches) is a package to provide an handy an easy to use interface to CTGAN, a generative adversarial neural network to generate glitches. A \"glitch\" is a non stationary noise transient recorded in Gravitational Waves (GW) interferometer. As it resembles some GW signals, their appearece hinders the searches for such signal, downgrading the instrument sensitivity.\nA nice characterization of glitches can enable lots of exciting GW science!\n\nThis network is trained with real (although heavily preprocessed) glitch and when given some random noise, it outputs a whithened glitch. `gengli` offers a simple API to access the network, enabling some post-processing of the generated glitch that can be useful for downstream analysis. In more, details it allow the user to:\n\n- Resample the glitch\n- Colour the glitch with user-defined PSD, as well as with one of the analytical PSDs available in `lalsuite`\n- Scale it to achieve a target SNR\n- Select among random glitches only those within a given percentile w.r.t. to some anomaly score (more on the paper). This enables the user to get only \"normal\" glitches and/or \"atypical\" glitches.\n\nYou can read the full documentation [here](https://gengli.readthedocs.io/en/latest/)!\n\n## How to install\n\nTo install the latest released version of gengli, available on PyPI:\n\n```Bash\npip install gengli\n```\n\n### From the repo\n\nIf you want to install the code from this repo, you can use the `Makefile` provided:\n\n```Bash\ngit clone https://git.ligo.org/melissa.lopez/gengli.git\ncd gengli\nmake install\n```\n\nIf you want to build a local version of the documention, just type `make docs`. This will create the folder `docs/__build/` where all the relevant html docs will be located.\n\n### With a fresh new conda environment\n\nIf you don't want to mess up with your existing conda installations, this will create a fresh new conda environment that only contains gengli and its dependencies:\n\n```Bash\nconda create --name gengli_test python=3.9\nconda activate gengli_test\ngit clone https://git.ligo.org/melissa.lopez/gengli.git\ncd gengli\npython setup.py sdist\npip install dist/gengli-0.1.0.tar.gz \n```\n\n## How to generate a glitch\n\nTo generate a glitch, you will need to instantiate a `glitch_generator` object:\n\n```Python\nimport gengli\ng = gengli.glitch_generator('L1')\n```\n\nYou should provide the generator the weights of the generator network. Some default (and reviewed) weights are relaesed with this package: if you want to use them, you should just pass the string `L1` or `H1` to specify which interferometer you want to consider and the weights will be loaded authomatically.\n\nTo generate the raw glitch (as output by the network):\n```Python\ng_raw = g.get_raw_glitch()\n```\n\nThe glitch is whithened and evaluted on a default time grid sampled at 4096Hz. It has a characteristic shape:\n\n![raw_glitch](https://git.ligo.org/melissa.lopez/gengli/-/raw/main/docs/img/raw_glitch.png)\n\n\nThe function `get_glitch` provides an easy to use API to the post-processing operations described above. For instance, to generate 4 glitches, coloured with the Einstein Telescope analytical PSD with an SNR of 10 and evaluate at a high sampling rate, you can just type:\n\n```Python\ng_coloured = g.get_glitch(4,\n\tsrate = 16384,\n\tpsd = 'EinsteinTelescopeP1600143',\n\tSNR = 10)\n```\n\nThe generated glitches will look quite different from before:\n\n![ET_glitches](https://git.ligo.org/melissa.lopez/gengli/-/raw/main/docs/img/ET_glitches.png)\n\nIf you want to use your favourite PSD, you can load it from a csv or xml file with:\n\n```Python\nfrom gengli.noise import read_psd\nsrate = 4096.\npsd = read_psd('my_favourite_psd.xml', srate, g.get_len_glitch(srate),\n\tasd = False, ifo = 'H1', flow = 20.)\n```\n\nOnce this is loaded you can pass it to the `psd` argument of `get_glitch`.\nRemember that the sampling rate should match that of the required glitches!\n\nIf you want to get an anomalous glitch, you can play with the `confidence_interval` parameter. For instance:\n\n```Python\ng_anomalous = g.get_glitch(10,\n\tconfidence_interval = (90,100),\n\tSNR = 20 )\n```\n\nThis will take a while to run as it will call internally (only once) `glitch_generator.initialize_benchmark_set`, which creates a set of benchmark glitches to compute the \"anomaly score\" against.\nTo have more controls of the parameters of `initialize_benchmark_set`, you can call it from your script: you will note that, once such initialization is done, `get_glitch` will run much faster!\n\nYou can take a look at some [examples](https://git.ligo.org/melissa.lopez/gengli/-/tree/main/examples) in a dedicated folder.\n\nFor more information, you can read the [docs](https://gengli.readthedocs.io/en/latest/).\n\n\n## About\n\nThis project is developed in the GW group at Utrecht Univerisity. Many people were involved in this project:\n\n- Vincent Boudart\n- Kerwin Buijsman\n- Sarah Caudill\n- Melissa Lopez (corresponding author: [m.lopez@uu.nl](mailto:m.lopez@uu.nl))\n- Amit Reza\n- Stefano Schmidt (package maintener: [s.schmidt@uu.nl](mailto:s.schmidt@uu.nl))\n\nIf you want to have more information, or just to say hello, please feel free to contact any of us!\n\n## Publications\n\nIf you find our work useful, please consider reading and citing our publications. Here there are the bibtex entries...\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.ligo.org/melissa.lopez/gengli",
    "keywords": "",
    "license": "GNU GENERAL PUBLIC LICENSE v3",
    "maintainer": "Stefano Schmidt",
    "maintainer_email": "s.schmidt@uu.nl",
    "name": "gengli",
    "package_url": "https://pypi.org/project/gengli/",
    "platform": null,
    "project_url": "https://pypi.org/project/gengli/",
    "project_urls": {
      "Homepage": "https://git.ligo.org/melissa.lopez/gengli"
    },
    "release_url": "https://pypi.org/project/gengli/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Glitch generation with Generative Adversarial Network",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14138494,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fba4d6c9ad70f578544d88545f5274817ab141466154250c6ed15125126e3087",
          "md5": "7e026ca161398aadaeb383ba1cf51e7f",
          "sha256": "b373470fb0e4fcfc03b756a700624d71207980350ab39e328c3d6e44862cb1e6"
        },
        "downloads": -1,
        "filename": "gengli-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7e026ca161398aadaeb383ba1cf51e7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25950595,
        "upload_time": "2022-05-11T13:48:49",
        "upload_time_iso_8601": "2022-05-11T13:48:49.596551Z",
        "url": "https://files.pythonhosted.org/packages/fb/a4/d6c9ad70f578544d88545f5274817ab141466154250c6ed15125126e3087/gengli-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "028aea1ce3bd6da02ac5c995867293444e5effe0ffc53b695b5771a57c2f07d2",
          "md5": "0f4023e48011e53ac1a3114c0b6432fa",
          "sha256": "f48952f33231d395a92e223b0fb4b7a81653674cc7f16f87fff95aea5432f664"
        },
        "downloads": -1,
        "filename": "gengli-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f4023e48011e53ac1a3114c0b6432fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25950981,
        "upload_time": "2022-06-15T11:11:43",
        "upload_time_iso_8601": "2022-06-15T11:11:43.421374Z",
        "url": "https://files.pythonhosted.org/packages/02/8a/ea1ce3bd6da02ac5c995867293444e5effe0ffc53b695b5771a57c2f07d2/gengli-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "028aea1ce3bd6da02ac5c995867293444e5effe0ffc53b695b5771a57c2f07d2",
        "md5": "0f4023e48011e53ac1a3114c0b6432fa",
        "sha256": "f48952f33231d395a92e223b0fb4b7a81653674cc7f16f87fff95aea5432f664"
      },
      "downloads": -1,
      "filename": "gengli-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f4023e48011e53ac1a3114c0b6432fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 25950981,
      "upload_time": "2022-06-15T11:11:43",
      "upload_time_iso_8601": "2022-06-15T11:11:43.421374Z",
      "url": "https://files.pythonhosted.org/packages/02/8a/ea1ce3bd6da02ac5c995867293444e5effe0ffc53b695b5771a57c2f07d2/gengli-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}