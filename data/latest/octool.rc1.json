{
  "info": {
    "author": "Paul Morgan",
    "author_email": "jumanjiman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "# OCTool\n\n<!--TOC-->\n\n- [Overview](#overview)\n- [How-to](#how-to)\n  - [Get started with an example](#get-started-with-an-example)\n    - [The easy way](#the-easy-way)\n      - [Pull an already-built Docker image](#pull-an-already-built-docker-image)\n      - [Generate an SSP from the example data with Docker](#generate-an-ssp-from-the-example-data-with-docker)\n    - [Roll-your-own deployment](#roll-your-own-deployment)\n      - [Prereqs](#prereqs)\n      - [Install OCTool](#install-octool)\n      - [Generate an SSP from the example data with your own deployment](#generate-an-ssp-from-the-example-data-with-your-own-deployment)\n  - [Write your own data files](#write-your-own-data-files)\n  - [Pandoc filters](#pandoc-filters)\n  - [Build and test](#build-and-test)\n- [Concepts](#concepts)\n  - [Entities](#entities)\n  - [System vs component](#system-vs-component)\n  - [Benefits](#benefits)\n- [Administrivia](#administrivia)\n  - [Goals](#goals)\n\n<!--TOC-->\n\n## Overview\n\nOCTool aspires to be an open compliance tool and library.\n\nIt uses Pandoc, TeXLive, LuaTeX, and an open data schema to\nproduce compliance documents, such as System Security Plans (SSPs).\n\nThis repo provides:\n\n- Ruby gem: https://rubygems.org/gems/octool\n- Docker image: https://hub.docker.com/repository/docker/jumanjiman/octool\n\n\n## How-to\n\n### Get started with an example\n\nThis repo provides an example tree at `example-inputs/minimal`.\n\n\n#### The easy way\n\n##### Pull an already-built Docker image\n\n```bash\ndocker pull jumanjiman/octool\n```\n\n##### Generate an SSP from the example data with Docker\n\n```bash\ndocker run --rm -it -v /tmp:/data jumanjiman/octool ssp /example-inputs/minimal\n```\n\nThe above command builds the SSP and\nsaves it at `/tmp/ssp.pdf` on your Docker host.\n\n\n#### Roll-your-own deployment\n\n##### Prereqs\n\nYour host needs these packages:\n\n- Ruby 2.4+\n- Pandoc 2.9+\n- Python 3.6+\n- TexLive full distribution, including LuaTeX and XeLaTeX\n\n\n##### Install OCTool\n\n```bash\ngem install --user-install octool\n```\n\n##### Generate an SSP from the example data with your own deployment\n\n1. Confirm the example data is valid\n\n    ```bash\n    octool validate example-inputs/minimal/config.yaml\n    ```\n\n1. Build a PDF\n\n    ```bash\n    octool ssp example-inputs/minimal/config.yaml\n    ```\n\n1. The result should look like the example output at\n   [example-outputs/minimal/ssp.pdf](example-outputs/minimal/ssp.pdf).\n\n\n### Write your own data files\n\nThe schemas are at [src/schemas/](src/schemas).<br/>\nThings to know:\n\n- All text strings are interpreted as markdown.<br/>\n  You can use markdown in your data anywhere a string is required.<br/>\n  See [example-inputs/minimal](example-inputs/minimal) for demo data.\n\n  :bulb: Pandoc has its own flavor of markdown.<br/>\n  See https://pandoc.org/MANUAL.html#pandocs-markdown<br/>\n  for differences from other flavors.\n\n  :bulb: When you reference paths to images within your markdown, the<br/>\n  path is relative to the directory in which `config.yaml` is stored.<br/>\n  See the example-inputs files for clarity.\n\n- You can run `octool validate path/to/inputs`<br/>\n  to confirm your data structure.\n\n- Do you want to run `octool` in a read-only container?<br/>\n  TeX needs to write to at least one directory.<br/>\n  Make at least one of these a volume in your container:\n\n  - `${HOME}` (inconvenient for unprivileged user with read-only homedir)\n  - `/usr/share/texmf-var` (writable only by root)\n\n  The Docker image in this repo works around the issue to<br/>\n  enable read-only containers.\n\n\n### Pandoc filters\n\nOCTool builds in support for these Pandoc filters via the schema:\n\n- https://gitlab.com/mirkoboehm/pandoc-acronyms\n\n\n### Build and test\n\nThis repo builds, tests, and publishes a Docker image that includes the\nfull TeXLive distribution and OCTool. The test harness runs the container\nwith a **read-only** root filesystem and **reduced privileges** to demonstrate\ngood security practices for containerized applications.\n\n```bash\n# Setup your dev environment.\nsdlc/bootstrap\n\n# Build and test.\nsdlc/build && sdlc/test\n```\n\n\n## Concepts\n\n### Entities\n\nThis diagram helps to illustrate the definitions that follow.<br/>\nIt reads top-down and left-to-right.\n\n![](assets/er.png)\n\n- **System**: A potentially-complex technology architecture that\n  includes one or more components.\n\n- **ConfigFile**: An OCTool configuration file.\n\n- **Component**: A list of components within the system along with\n  attestations to satisfy one or more controls.\n\n- **Standard**: A list that defines one or more security controls.\n\n    An example of a standard is NIST 800-53 or Payment\n    Card Industry Data Security Standards (PCI DSS).\n\n- **Control**: A specific requirement or process to describe and mitigate risk.\n\n- **Certification**: A list that requires one or more controls.\n\n    A certification requires all or a subset of controls\n    from one or more standards.<br/>\n    A hypothetical certification could include\n    all of NIST 800-53 _plus_ a specific subset of PCI DSS.\n\n    An Authority to Operate (ATO) is one example of a certification.\n    A request list from an auditor is another example.\n\n\n### System vs component\n\nA component and a system can be identical from a compliance perspective\nin the simplest cases. It is common, however, that a complex system\ndelegates compliance to multiple responsible parties\nalong organizational boundaries in a _shared services_ model.\n\nConsider, for example, an organization that owns its datacenter and\nassigns responsibility for physical access to a dedicated team.\n\n- The organization can describe the datacenter as a component and\n  describe its compliance to physical access controls\n  within a shareable component called _datacenter_.\n\n- Teams that operate software within the datacenter can then\n  include the _datacenter_ component\n  within their own compliance documentation.\n\nWith the shared services model, the _system_ compliance documentation\n_includes_ various components. Its compliance documentation is\nassembled from various components.\n\nThus some systems are described by multiple components;\nsmaller systems, by a single component.\n\n\n### Benefits\n\n- If an application owner requests an exception to a control from a\n  shared component, the InfoSec team can run an impact assessment\n  to see which other applications (systems) and/or certifications\n  would be impacted by the exception.\n\n- The organization can use the system to ask what-if questions.\n\n- Compliance and regulatory teams have a central source of truth\n  from which to answer questions.\n\n- Git provides an audit log of changes to the compliance docs.\n\n- The intermediate output (SQL database, CSV, etc.) is available\n  so teams can choose whatever analytical tools they prefer.\n\n\n## Administrivia\n\n### Goals\n\n- [X] Read input configuration in multiple formats\n- [X] Generate output documentation for governance and compliance\n  - [ ] Excel\n  - [X] Markdown\n  - [X] PDF\n  - [X] Word\n- [X] Convert inputs to a well-defined data structure\n  - Intermediate output\n    - [X] CSV\n    - [ ] Excel\n    - [ ] SQLite\n  - Facilitate gap analysis\n  - Facilitate impact analysis for exceptions\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jumanjihouse/octool",
    "keywords": "compliance documentation",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "octool",
    "package_url": "https://pypi.org/project/octool/",
    "platform": "",
    "project_url": "https://pypi.org/project/octool/",
    "project_urls": {
      "Homepage": "https://github.com/jumanjihouse/octool"
    },
    "release_url": "https://pypi.org/project/octool/0.0.11/",
    "requires_dist": null,
    "requires_python": ">=3.5, <4",
    "summary": "Open Compliance Tool",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7398347,
  "releases": {
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d465d4f3d87e15e58ecfd13e87aef2943b6e54021116a78068071a637083c18c",
          "md5": "01e65752a75ee6e44b919fdc91f4e651",
          "sha256": "6a94bcee6a1176dbd8fe9aa1e37fd190c21ddad9ea8dbf407aec89c1fefda8fd"
        },
        "downloads": -1,
        "filename": "octool-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01e65752a75ee6e44b919fdc91f4e651",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 10392,
        "upload_time": "2020-06-04T17:43:10",
        "upload_time_iso_8601": "2020-06-04T17:43:10.515733Z",
        "url": "https://files.pythonhosted.org/packages/d4/65/d4f3d87e15e58ecfd13e87aef2943b6e54021116a78068071a637083c18c/octool-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e840dbdaa1de3f53768d33107ba8b6226c3b3feb7b12fc6ddb583b432ad46fe9",
          "md5": "3d725fda4fb3054158a07391fcd45980",
          "sha256": "b2f8c22bab593155d51ed90830455cec2e48d8ace567c1d7d12a929ff8aab28c"
        },
        "downloads": -1,
        "filename": "octool-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "3d725fda4fb3054158a07391fcd45980",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 7628,
        "upload_time": "2020-06-04T17:43:12",
        "upload_time_iso_8601": "2020-06-04T17:43:12.295662Z",
        "url": "https://files.pythonhosted.org/packages/e8/40/dbdaa1de3f53768d33107ba8b6226c3b3feb7b12fc6ddb583b432ad46fe9/octool-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d465d4f3d87e15e58ecfd13e87aef2943b6e54021116a78068071a637083c18c",
        "md5": "01e65752a75ee6e44b919fdc91f4e651",
        "sha256": "6a94bcee6a1176dbd8fe9aa1e37fd190c21ddad9ea8dbf407aec89c1fefda8fd"
      },
      "downloads": -1,
      "filename": "octool-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01e65752a75ee6e44b919fdc91f4e651",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <4",
      "size": 10392,
      "upload_time": "2020-06-04T17:43:10",
      "upload_time_iso_8601": "2020-06-04T17:43:10.515733Z",
      "url": "https://files.pythonhosted.org/packages/d4/65/d4f3d87e15e58ecfd13e87aef2943b6e54021116a78068071a637083c18c/octool-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e840dbdaa1de3f53768d33107ba8b6226c3b3feb7b12fc6ddb583b432ad46fe9",
        "md5": "3d725fda4fb3054158a07391fcd45980",
        "sha256": "b2f8c22bab593155d51ed90830455cec2e48d8ace567c1d7d12a929ff8aab28c"
      },
      "downloads": -1,
      "filename": "octool-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "3d725fda4fb3054158a07391fcd45980",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5, <4",
      "size": 7628,
      "upload_time": "2020-06-04T17:43:12",
      "upload_time_iso_8601": "2020-06-04T17:43:12.295662Z",
      "url": "https://files.pythonhosted.org/packages/e8/40/dbdaa1de3f53768d33107ba8b6226c3b3feb7b12fc6ddb583b432ad46fe9/octool-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}