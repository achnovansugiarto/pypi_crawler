{
  "info": {
    "author": "Wallisson Moreira de Carvalho",
    "author_email": "cmwallisson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# HydroBr [![DOI](https://zenodo.org/badge/276715050.svg)](https://zenodo.org/badge/latestdoi/276715050) [![PythonVersion](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue)](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue)\n\nHydroBr is an open-source package to work with Brazilian hydrometeorological time series.\n\nIntroduction\n------------\nHydroBr is an open-source package for work with Brazilian hydrometeorological time series in Python. This package\nprovides a connection with the Brazilian  National Water Agency (Agência Nacional de Águas - ANA), the Brazilian\nNational Institute of Meteorology (Instituto Nacional de Meteorologia - INMET), and the National Electric System\nOperator (Operador Nacional do Sistema Elétrico - ONS) databases in order to help users to select, download,\npreprocess, and plot hydrometeorological data. \n\nInstallation\n------------\nThe released version of HydroBr is 0.1.1.\n\nTo install the released version, use ``pip install hydrobr``.\n\nYou may install the latest development version by cloning the\n`GitHub` repository and using the setup script::\n\n    git clone https://github.com/wallissoncarvalho/hydrobr.git\n    cd hydrobr\n    python setup.py install\n\nModules - Documentation\n------------\nCurrently, the *HydroBr* package has four modules:\n\n* get_data - Functions that provide a connection with the Brazilian National Water Agency\n(Agência Nacional de Águas - ANA), the Brazilian National Institute of Meteorology\n(Instituto Nacional de Meteorologia - INMET), and the National Electric System Operator\n(Operador Nacional do Sistema Elétrico - ONS) databases.\n\n* Plot - You will have some data plot options, such as the Gantt (temporal data availability) graphic, Flow Duration\nCuve, and plot for spatial station availability.\n\n* PreProcessing - Presents a function to filter your data by dates, number of years with data, and missing percentage.\nFurther, there is a function to convert your data.\n\n* SaveAs - Provides functions to save your data into a \".txt\" file in the ASCII standard.\n\nThe modules will be updated with new functions/methods as soon as possible. Contributions are welcome!\n\n### Import HydroBr\n```python\nimport hydrobr\n```\n### Data from ANA\n```python\nhelp(hydrobr.get_data.ANA)\n```\n\n    Help on class ANA in module hydrobr.get_data:\n    \n    class ANA(builtins.object)\n     |  It provides a connection with the Brazilian National Water Agency (Agência Nacional de Águas - ANA) database\n     |  \n     |  Static methods defined here:\n     |  \n     |  flow_data(list_station, only_consisted=False)\n     |      Get the flow station data series from a list of stations code of the Brazilian National Water Agency\n     |      (ANA) database.\n     |      \n     |      Parameters\n     |      ----------\n     |      list_station : list of strings\n     |          A list of with the stations code as strings.\n     |      only_consisted : boolean, default False\n     |          If True, returns only the data classified as consistent by the provider.\n     |      \n     |      Returns\n     |      -------\n     |      data_stations : pandas DataFrame\n     |          The data os each station as a column in a pandas DataFrame\n     |  \n     |  list_flow_stations(state='', city='', source='ANAF')\n     |      Searches for flow/stage stations registered at the Brazilian National Agency of Water inventory.\n     |      \n     |      Parameters\n     |      ----------\n     |      state : string\n     |          Brazilian state name where the stations are located (e.g., Rio de Janeiro)\n     |      city : string\n     |          Brazilian city name where the stations are located (e.g., Rio de Itaperuna)\n     |      source: string, default 'ANAF'\n     |          The source to look for the data. 'ANA' to get the list of stations from the Brazilian National Water\n     |          Agency (ANA) database, or 'ANAF' to get the filtered list of stations that contain only the stations\n     |          from ANA with registered data.\n     |          More information about ANAF: https://doi.org/10.5281/zenodo.3755065\n     |      \n     |      Returns\n     |      -------\n     |      list_stations : pandas DataFrame\n     |          The selected list of stations as a pandas DataFrame\n     |  \n     |  list_prec_stations(state='', city='', source='ANAF')\n     |      Searches for precipitation stations registered at the Brazilian National Agency of Water (ANA)\n     |      \n     |      Parameters\n     |      ----------\n     |      state : string\n     |          Brazilian state name where the stations are located (e.g., Rio de Janeiro)\n     |      city : string\n     |          Brazilian city name where the stations are located (e.g., Rio de Itaperuna)\n     |      source: string, default 'ANA'\n     |          The source to look for the data. 'ANA' to get the list of stations from the Brazilian National Water\n     |          Agency (ANA) database, or 'ANAF' to get the filtered list of stations that contain only the stations\n     |          from ANA with registered data.\n     |          More information about ANAF: https://doi.org/10.5281/zenodo.3755065\n     |      \n     |      Returns\n     |      -------\n     |      list_stations : pandas DataFrame\n     |          The selected list of stations as a pandas DataFrame\n     |  \n     |  prec_data(list_station, only_consisted=False)\n     |      Get the precipitation station data series from a list of stations code.\n     |      \n     |      Parameters\n     |      ----------\n     |      list_station : list of strings\n     |          A list of with the stations code as strings.\n     |      only_consisted : boolean, default False\n     |          If True, returns only the data classified as consistent by the provider.\n     |      \n     |      Returns\n     |      -------\n     |      data_stations : pandas DataFrame\n     |          The data os each station as a column in a pandas DataFrame\n     |  \n     |  stage_data(list_station, only_consisted=False)\n     |      Get the stage station data series from a list of stations code of the Brazilian National Water Agency\n     |      (ANA) database.\n     |      \n     |      Parameters\n     |      ----------\n     |      list_station : list of strings\n     |          A list of with the stations code as strings.\n     |      only_consisted : boolean, default False\n     |          If True, returns only the data classified as consistent by the provider.\n     |      \n     |      Returns\n     |      -------\n     |      data_stations : pandas DataFrame\n     |          The data os each station as a column in a pandas DataFrame\n     |  \n     |  ----------------------------------------------------------------------    \n### Data from INMET\n```python\nhelp(hydrobr.get_data.INMET)\n```\n\n    Help on class INMET in module hydrobr.get_data:\n    \n    class INMET(builtins.object)\n     |  It provides a connection with the  Brazilian National Institute of Meteorology (Instituto Nacional de\n     |  Meteorologia - INMET) database.\n     |  \n     |  Static methods defined here:\n     |  \n     |  daily_data(station_code, filter=True)\n     |      Searches for all the data of a station registered at the Brazilian National Institute of Meteorology\n     |      (Instituto Nacional de Meteorologia - INMET) database.\n     |      \n     |      Returns a pandas daily DataFrame with six variables for each day:\n     |          - Prec - Precipitation (mm)\n     |          - Tmean - Daily mean Temperature (ºC)\n     |          - Tmax - Maximum Temperature (ºC)\n     |          - Tmin - Minimum Temperature (ºC)\n     |          - RH - Relative Humidity (%)\n     |          - SD - Sunshine Duration (hours)\n     |      \n     |      Parameters\n     |      ----------\n     |      station_code : string\n     |          Code of the station as a string\n     |      filter: boolean, default True\n     |          There is stations with repeated registered data. If 'True' the function returns a panda DataFrame\n     |          with the first occurrence of the date. If 'False' return a pandas DataFrame with, in some cases,\n     |          repeated datetime index.\n     |      \n     |      Returns\n     |      -------\n     |      data : pandas DataFrame\n     |          The data of the selected station as a pandas DataFrame\n     |  \n     |  hourly_data(station_code)\n     |      Searches for all the data of a station registered at the Brazilian National Institute of Meteorology\n     |      (Instituto Nacional de Meteorologia - INMET) database.\n     |      \n     |      Only works for Automatic Stations.\n     |      \n     |      Returns a pandas hourly DataFrame with 17 variables for each day:\n     |          - Tins - Instant Temperature (ºC)\n     |          - Tmax - Maximum Temperature (ºC)\n     |          - Tmin - Minimum Temperature (ºC)\n     |          - RHins - Instant Relative Humidity (%)\n     |          - RHmax - Maximum Relative Humidity (%)\n     |          - RHmin - Minimum Relative Humidity (%)\n     |          - DPins - Instant Dew Point Temperature (ºC)\n     |          - DPmax - Maximum Dew Point Temperature (ºC)\n     |          - DPmin - Minimum Dew Point Temperature (ºC)\n     |          - Pins - Instant Pressure (hPa)\n     |          - Pmax - Maximum Pressure (hPa)\n     |          - Pmin - Minimum Pressure (hPa)\n     |          - Wspeed - Wind Speed (m/s)\n     |          - Wdir - Wind direction (º)\n     |          - Wgust - Wind gust (m/s)\n     |          - Rad - Global Radiation (kJ/m²)\n     |          - Prec - Precipitation (mm)\n     |      \n     |      Parameters\n     |      ----------\n     |      station_code : string\n     |          Code of the station as a string.\n     |      \n     |      Returns\n     |      -------\n     |      data : pandas DataFrame\n     |          The data of the selected station as a pandas DataFrame.\n     |  \n     |  list_stations(station_type='both')\n     |      Searches for precipitation stations registered at the Brazilian National Agency of Water (ANA) or the INMET\n     |      inventory.\n     |      \n     |      Parameters\n     |      ----------\n     |      station_type : string, default 'both'\n     |          The type of station. 'both' to get the list of automatic and manual gauge stations, 'automatic' to get only\n     |          the automatic gauge stations, and 'conventional' to get only the conventional gauge stations.\n     |      Returns\n     |      -------\n     |      list_stations : pandas DataFrame\n     |          The selected list of stations as a pandas DataFrame\n     |  \n     |  ----------------------------------------------------------------------    \n### Data from ONS\n```python\nhelp(hydrobr.get_data.ONS)\n```\n\n    Help on class ONS in module hydrobr.get_data:\n    \n    class ONS(builtins.object)\n     |  Provide data from the National Electric System Operator (Operador Nacional do Sistema Elétrico - ONS) database.\n     |  \n     |  Static methods defined here:\n     |  \n     |  daily_data()\n     |       Returns all the naturalized daily flow data of different reservoirs from the National Electric System\n     |       Operator (Operador Nacional do Sistema Elétrico - ONS) database.\n     |      \n     |      Parameters\n     |      ----------\n     |      \n     |      Returns\n     |      -------\n     |      data : pandas DataFrame\n     |          All the naturalized daily flow data as a pandas DataFrame, where each column refers to a specific\n     |          reservoir.  \n     |  ----------------------------------------------------------------------    \n### PreProcessing methods\n```python\nhelp(hydrobr.PreProcessing)\n```\n\n    Help on class PreProcessing in module hydrobr.preprocessing:\n    \n    class PreProcessing(builtins.object)\n     |  Static methods defined here:\n     |  \n     |  daily_to_monthly(data, method='sum')\n     |      Transform a time series of daily data into a time series monthly data.\n     |      \n     |      In the conversion process a month with a day missing data is considered as a missing month.\n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station.\n     |      method: str, default sum\n     |          The method used to convert. If 'sum', the monthly data will be the sum of the daily data. If 'mean', the\n     |          monthly data will be the mean of the daily data.\n     |      \n     |      Returns\n     |      -------\n     |      monthly_data : pandas DataFrame\n     |          The  monthly pandas DataFrame\n     |  \n     |  stations_filter(data, n_years=10, missing_percentage=5, start_date=False, end_date=False)\n     |      A composed method to filter stations. \n     |      \n     |      First, the method filters the stations data by the Start Date and the End Date, it its passed. After that,\n     |      the is selected only the stations with at least a defined number of years between the first date and the\n     |      last date of the station. At the end is selected the stations that contains at least one window of data with\n     |      the number of years and a maximum missing data percentage. \n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station.\n     |      n_years: int, default 10\n     |          The minimum number of years of registered data for the station between the first date and the end date.\n     |      missing_percentage: int, default 5\n     |           The maximum missing data percentage in a window with n_years.\n     |           A number between 0 and 100\n     |      start_date : int, float, str, default False\n     |          The desired start date for the output DataFrame.\n     |          See: pandas.to_datetime documentation if have doubts about the date format\n     |      end_date: int, float, str, default False\n     |          The desired end date for the output DataFrame.\n     |          See: pandas.to_datetime documentation if have doubts about the date format\n     |      \n     |      Returns\n     |      -------\n     |      data : pandas DataFrame\n     |          A pandas DataFrame with only the filtered stations\n     |  \n     |  ---------------------------------------------------------------------- \n### Plot methods\n```python\nhelp(hydrobr.Plot)\n```\n\n    Help on class Plot in module hydrobr.graphics:\n    \n    class Plot(builtins.object)\n     |  Static methods defined here:\n     |  \n     |  fdc(data, y_log_scale=True)\n     |      Make a flow duration curve plot.\n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station..\n     |      y_log_scale : boolean, default True\n     |          Defines if the the plotting y-axis will be in the logarithmic scale.\n     |      \n     |      Returns\n     |      -------\n     |      fig : plotly Figure\n     |  \n     |  gantt(data, monthly=True)\n     |      Make a Gantt plot, which shows the temporal data availability for each station.\n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station..\n     |      monthly : boolean, default True\n     |          Defines if the availability count of the data will be monthly to obtain a more fluid graph.\n     |      \n     |      Returns\n     |      -------\n     |      fig : plotly Figure\n     |  \n     |  spatial_stations(list_stations, mapbox_access_token)\n     |      Make a spatial plot of the stations.\n     |      \n     |      Parameters\n     |      ----------\n     |      list_stations : pandas DataFrame\n     |          A Pandas DataFrame that must contain Latitude, Longitude, Name, and Code columns.\n     |      mapbox_access_token : str\n     |          Mapbox access toke, which can be obtained at https://account.mapbox.com/access-tokens/\n     |      \n     |      Returns\n     |      -------\n     |      fig : plotly Figure\n     |  \n     |  ----------------------------------------------------------------------\n### SaveAs methods\n```python\nhelp(hydrobr.SaveAs)\n```\n    Help on class SaveAs in module hydrobr.save:\n    \n    class SaveAs(builtins.object)\n     |  Static methods defined here:\n     |  \n     |  asc_daily_flow(data, path_save)\n     |      Save each column of the flow stations DataFrame into a \".txt\" file in the ASCII standard.\n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station.\n     |      path_save: string\n     |          The computer location where the \".txt\" files will be saved.\n     |      \n     |      Returns\n     |      -------\n     |      Saved data in the path_save\n     |\n     |  asc_daily_prec(data, path_save)\n     |      Save each column of the precipitation stations DataFrame into a \".txt\" file in the ASCII standard.\n     |      \n     |      Parameters\n     |      ----------\n     |      data : pandas DataFrame\n     |          A Pandas daily DataFrame with DatetimeIndex where each column corresponds to a station.\n     |      path_save: string\n     |          The computer location where the \".txt\" files will be saved.\n     |      \n     |      Returns\n     |      -------\n     |      Saved data in the path_save\n     |  ----------------------------------------------------------------------\n\n\nModules\n------------\nExamples of usage are available at [HydroBr](https://wallissoncarvalho.github.io/HydroBr) 's page on my blog.\n\n\nDependencies\n------------\n- [NumPy](https://numpy.org/)\n- [Pandas](https://pandas.pydata.org/)\n- [Plotly](https://plotly.com/python/)\n- [Requests](https://requests.readthedocs.io/en/master/)\n- [tqdm](https://github.com/tqdm/tqdm)\n\nLicense\n------------\n[BSD 3-Clause License](https://github.com/wallissoncarvalho/hydrobr/blob/master/LICENSE)\n\nHow to cite\n------------\nWallisson Moreira de Carvalho. (2020, July 5). HydroBr: A Python package to work with Brazilian hydrometeorological time\nseries. (Version 0.1.1). Zenodo. http://doi.org/10.5281/zenodo.3931027",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/wallissoncarvalho/hydrobr/archive/0.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wallissoncarvalho/hydrobr",
    "keywords": "timeseries flow precipitation stages",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hydrobr",
    "package_url": "https://pypi.org/project/hydrobr/",
    "platform": "",
    "project_url": "https://pypi.org/project/hydrobr/",
    "project_urls": {
      "Download": "https://github.com/wallissoncarvalho/hydrobr/archive/0.1.1.tar.gz",
      "Homepage": "https://github.com/wallissoncarvalho/hydrobr"
    },
    "release_url": "https://pypi.org/project/hydrobr/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "HydroBr is an open-source package to work with Brazilian hydrometeorological time series.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7677210,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1a66559d782ff489907ce113a8288829b5df7eff7b350fa45cfefa41a97b302",
          "md5": "06aefc46a7d55fe90d16dbd4dbb502d4",
          "sha256": "d2d4b0f59be2ba666e18e178cfb58391910f71c517f223814e22ea8680b8786d"
        },
        "downloads": -1,
        "filename": "hydrobr-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06aefc46a7d55fe90d16dbd4dbb502d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16846,
        "upload_time": "2020-07-05T22:19:32",
        "upload_time_iso_8601": "2020-07-05T22:19:32.648901Z",
        "url": "https://files.pythonhosted.org/packages/e1/a6/6559d782ff489907ce113a8288829b5df7eff7b350fa45cfefa41a97b302/hydrobr-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1a66559d782ff489907ce113a8288829b5df7eff7b350fa45cfefa41a97b302",
        "md5": "06aefc46a7d55fe90d16dbd4dbb502d4",
        "sha256": "d2d4b0f59be2ba666e18e178cfb58391910f71c517f223814e22ea8680b8786d"
      },
      "downloads": -1,
      "filename": "hydrobr-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "06aefc46a7d55fe90d16dbd4dbb502d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16846,
      "upload_time": "2020-07-05T22:19:32",
      "upload_time_iso_8601": "2020-07-05T22:19:32.648901Z",
      "url": "https://files.pythonhosted.org/packages/e1/a6/6559d782ff489907ce113a8288829b5df7eff7b350fa45cfefa41a97b302/hydrobr-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}