{
  "info": {
    "author": "Hubert \"Koshmaar\" Rutkowski",
    "author_email": "do.not@email.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Nake\n\nNake project is tool for running project scripts in easy and shell-compatible way.\nIt is not intended as replacement for Make when it comes to compiling (and it has no support\nfor that kind of work).\n\n## Quick start:\n\n`pip install nake`\n\n`vim Nakefile`\n\nWrite there:\n```\nsetup:\n\tpython3 -m venv foo_venv\n \tsource foo_venv/bin/activate\n \tpip install -r requirements.txt\n```\n\nThat's it, complete Nakefile which can be run as `nake setup` :)\n\nMakefile would  need to have &\\ at end of lines, for the changes made by source to not be lost. \nNakefile by default checks if command in line returned 0, before proceeding to\nnext one. It can be changed to ignore errors by prefixing line with - (like in Makefile).\n\nIndentation is up to you: you can use tab, 4 spaces, 1 space or no space at all. \nNakefile is case sensitive.\nLine comments are supported through `# line comment`, and multi line comments\nthrough `/*` and `*/` (like in C++).\n\n## Aims of this project\n\n- to replace make for cases when resolving file dependencies doesn't matter, but user want\n  to have scripts for running various project tasks\n- allow perfect integration with shell variables and other utilities\n- compatibility with all popular shells and platforms\n- simple to use, flexible, modern feeling to it\n- better autocompletion support (instead of only first words, also middle words ie.\n  setup-api-server could be invoked by typing nake api<tab> and all commands with api would appear) \n- perhaps be make-compatible, in that Nakefile can store make compatible syntax in case\n  you need the dependency resolving and other magic. Then running it like `nake make stuff`\n  would run it as `make stuff` (using make from system, with dynamically created makefile). \n  That way one file could store all building logic for using make, and in the same file have \n  handy nake scripts (need to think more on this if it makes sense).\n- other reasons why Make is troublesome tool: https://github.com/SCons/scons/wiki/FromMakeToScons\n\n## Problems with make \n\n... from the point of view of person who wants to run shell scripts:\n\n- every instruction is run in separate shell, which doesn't allow to set env \n  variables in one line and use in next\n- syntax used by variables is different from shell, often impossible to use the same \n  command as in shell, adaptation is sometimes difficult and time consuming\n- single targets can't have individual parameters\n- need to repeat every command on top of file with .PHONY\n- tab is required before every command, without it make won't work and error message\n  will be cryptic \n- by default doesn't use any shell extension (needs to be specifically instructed\n  using `SHELL := /bin/bash`)\n- focused on resolving dependencies in C/C++ and other compilled languages\n- a lot of historic baggage, built originally in 70's and 80's which is visible\n\n\n## Design\n\nNote: all below are louse design ramblings, and can change at any step. \n\n### Constants\n\n```\nFOOBAR_PORT='1337'\nFOOBAR_ADDRESS='localhost:' + {FOOBAR_PORT}\n\napi-add-some(baz: str):\n  echo \"Calling my amazing service\"\n  curl {FOOBAR_ADDRESS}/api/v1/baz/{baz} -X POST > results.txt \n_ cat results.txt | grep \"top-secret\"\n```\nNakefile constants are using different syntax than shell variables, so it's harder to mix them and they're \nuniversal. Syntax is similiar to python. Constants are interpreted once before command is run.\nNakefile targets (api-add-some) can have parameters with types, and are automatically checked at runtime.\nForgetting to provide parameter shows friendly error:\n\n```\n$ nake api-add-some\nNake error: target 'api-add-some' called without param 'baz: str'\n\n$ nake api-add-some \"99_beers\"\n  Calling my amazing service\n  curl localhost:1337/api/v1/baz/99_beers -X POST\n  (here goes grep results)\n```\nLines are echoed (except for `echo` command itself!). Echoing can be disabled by\nprefixing line with `@` or `_` and space. \nCombining `_` and `-` gives `=` - line that is not echoed and return result is ignored\n(will see if that makes sense :) )\nPrefixing with + echoes line, if it was disabled for target.\nPrefixing target with one of above modifiers applies this logic automatically to all lines.\n\n### Targets\n\nNakefiles can also be simply included for composition (#1). \nTargets can call each other in any place (#2):\n```Makefile\ninclude foobar.nake   # 1\n\napi-add-even-more(baz: str, buzz: int):    # 2\n  api-add-some(baz)\n  curl {FOOBAR_ADDRESS}/api/v1/buzz/{buzz} -X POST\n```\nNake tries to detect target calls inside targets, but if it fails because ie. some\nother symbol has the same name, it can be forced by prefixing with !\n\nNake doesn't support the dependencies syntax as in Make, ie. \n\n```Makefile\nmake-rule: dep1 dep2\n\techo \"doing sth here after dependencies\"\n```\n\n### Default parameters:\n\n```\n\nbuild-api(tag: str = 'latest'):\n\tcd api/\n\tdocker build -t api:{tag}\n\nrun-api(tag: str = 'latest'):\n\techo \"Running api:{tag}\"\n\tdocker run --rm -p 8080 api:{tag}\n\n```\nString parameters are \"replaced\" inplace without quotes, inside strings or commands.\nNake doesn't try interpret the context. No special rules to remember.\n\nAs usual in languages with default params, you need to provide default value to\nall further params once one gets default param. And you can't \n\n\n### Default target and aliases\n\nIf nothing is passed - `nake` - a `all` target is run, if it's defined and has\nall default variables.\nOtherwise Nake just displays list of targets.\n\nNote that you can provide aliases for commands by prepending them before:\n\n```\nall:\nsetup:\nspam(what: str='):\n\tpython3 -m spam {what}\n```\n\nSo with above you can run `nake`, `nake setup` and `nake spam 'eggs'` and it \nwill have the same effect.\n\n\n### Environment variables\n\nThey can be declared in targets using :\n\n```\nsome-rule:\n\tVARIABLE='foobar'\n\techo $(VARIABLE)\n```\n\nYou can also include env files with definitions, ie. `.env`:\n\n```\nFOOBAR_VER=1.0.2\nexport base_image=alpine:12\n```\n\nNotice that it supports both `export` and base variable definitions. Now after include in top level they will be\navailable to all targets:\n\n```\ninclude .env\n```\nOr you can include them in target:\n\n```\nsome-rule:\n\tinclude .env\n\techo $(FOOBAR_VER)\n```\n(Or maybe the include should create only nake constants, that are available like\n`echo {FOOBAR_VER}` ? This avoids mixing envs and nake machinery).\n\n\nNote, in many cases a typical bash `source` will work the same, and it might support more cases. \n\n### Configuration\n\nInside `nake` target:\n\n```\nnake:\n  shell = sh  # by default is bash\n\n```\n\nShould nake support `nake.conf` file store in `~/.nake` for having user specific\nsettings?\n\n\n## Alternatives:\n\n* https://github.com/tj/robo - golang, modern, nice extensions\n\n* https://github.com/ruby/rake - format of ruby\n\n* frontend - https://medium.com/finn-no/makefiles-for-frontend-1779be46461b\n\n* bash scripts :) just defining functions in .sh file. However you need additional layer of choosing which function should be run. \nOther method is to have functions in separate files, but it makes running them harder, code reuse is much harder, and \nmaintaing lot of separate scripts is diffucult.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nake",
    "package_url": "https://pypi.org/project/nake/",
    "platform": null,
    "project_url": "https://pypi.org/project/nake/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nake/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.5.0",
    "summary": "nifty nool for nunning scripts",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13608411,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30bc33dbb1d6083a3e7c23a5ded01b2de0a303aa43285ad032da905e6a12d712",
          "md5": "86687efb4d7afbf332c36dc540d3b4a8",
          "sha256": "2f99eecc054231e133ae59ee60cc65b9f8fb568166d2b3f1ca879e7b4aac9b1b"
        },
        "downloads": -1,
        "filename": "nake-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86687efb4d7afbf332c36dc540d3b4a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 5492,
        "upload_time": "2022-04-24T20:29:13",
        "upload_time_iso_8601": "2022-04-24T20:29:13.098555Z",
        "url": "https://files.pythonhosted.org/packages/30/bc/33dbb1d6083a3e7c23a5ded01b2de0a303aa43285ad032da905e6a12d712/nake-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77c4eaeeac0a7cc69ccd4ef6097dd20cd9ba8ab4d798965e9cce1da5c8b75b32",
          "md5": "47f1639cb9068a1a227bb823f75ba115",
          "sha256": "957cfb5cd2c2706f52b1a437f89912df588ad6a8c53e778dc3f8eccf44de75bd"
        },
        "downloads": -1,
        "filename": "nake-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "47f1639cb9068a1a227bb823f75ba115",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 5399,
        "upload_time": "2022-04-24T20:29:15",
        "upload_time_iso_8601": "2022-04-24T20:29:15.043305Z",
        "url": "https://files.pythonhosted.org/packages/77/c4/eaeeac0a7cc69ccd4ef6097dd20cd9ba8ab4d798965e9cce1da5c8b75b32/nake-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c58efa86a91c05a5f3171a944b41ad67991fd9aeb308d0d33d42582e3e9ab7c",
          "md5": "7fdcd35c8c9b58a918414b8df0989b8a",
          "sha256": "00b7e408f2ce07a3a99ee294ce587efca971196512b2c4520e262518ff9af4ed"
        },
        "downloads": -1,
        "filename": "nake-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fdcd35c8c9b58a918414b8df0989b8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 6576,
        "upload_time": "2022-04-24T22:04:12",
        "upload_time_iso_8601": "2022-04-24T22:04:12.803160Z",
        "url": "https://files.pythonhosted.org/packages/1c/58/efa86a91c05a5f3171a944b41ad67991fd9aeb308d0d33d42582e3e9ab7c/nake-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b554825da34fe2f3fff0dd96a81ef749465be9cfb2a55a8ab69c8c5ddebdf88",
          "md5": "16d7048aedc57f7c43c40f48df9b7189",
          "sha256": "9cacc2b211f013b4558eefe91348740710c958b85174331eb30a42168c3d0221"
        },
        "downloads": -1,
        "filename": "nake-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "16d7048aedc57f7c43c40f48df9b7189",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 6933,
        "upload_time": "2022-04-24T22:04:14",
        "upload_time_iso_8601": "2022-04-24T22:04:14.651650Z",
        "url": "https://files.pythonhosted.org/packages/9b/55/4825da34fe2f3fff0dd96a81ef749465be9cfb2a55a8ab69c8c5ddebdf88/nake-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c58efa86a91c05a5f3171a944b41ad67991fd9aeb308d0d33d42582e3e9ab7c",
        "md5": "7fdcd35c8c9b58a918414b8df0989b8a",
        "sha256": "00b7e408f2ce07a3a99ee294ce587efca971196512b2c4520e262518ff9af4ed"
      },
      "downloads": -1,
      "filename": "nake-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7fdcd35c8c9b58a918414b8df0989b8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.0",
      "size": 6576,
      "upload_time": "2022-04-24T22:04:12",
      "upload_time_iso_8601": "2022-04-24T22:04:12.803160Z",
      "url": "https://files.pythonhosted.org/packages/1c/58/efa86a91c05a5f3171a944b41ad67991fd9aeb308d0d33d42582e3e9ab7c/nake-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b554825da34fe2f3fff0dd96a81ef749465be9cfb2a55a8ab69c8c5ddebdf88",
        "md5": "16d7048aedc57f7c43c40f48df9b7189",
        "sha256": "9cacc2b211f013b4558eefe91348740710c958b85174331eb30a42168c3d0221"
      },
      "downloads": -1,
      "filename": "nake-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "16d7048aedc57f7c43c40f48df9b7189",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 6933,
      "upload_time": "2022-04-24T22:04:14",
      "upload_time_iso_8601": "2022-04-24T22:04:14.651650Z",
      "url": "https://files.pythonhosted.org/packages/9b/55/4825da34fe2f3fff0dd96a81ef749465be9cfb2a55a8ab69c8c5ddebdf88/nake-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}