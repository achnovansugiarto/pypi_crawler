{
  "info": {
    "author": "Poupou",
    "author_email": "Poupou <poupou-web3@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sybil-scorer\r\n\r\nSybil scorer is a python package that provides useful classes and methods to analyze the behavior of addresses.\r\n\r\n## Installation\r\n\r\n- Python 3.10\r\n- ```pip install sybil-scorer```\r\n\r\n## What is inside?\r\n\r\nThe package has two main sub-packages.\r\n\r\n- **sbdata** is a package to easily retrieve a large amount of data from the flipside API.\r\n- **sblegos** a package to perform on-chain transactions analysis to detect potential Sybil behavior.\r\n- **sbutils** is a package that makes it easy to load the data extracted with sbdata and use it in sblegos.\r\n\r\nMore details on the packages and examples are provided below.\r\n\r\n### sbdata\r\n\r\nAn example script to retrieve data from the flipside API is provided in the script folder:\r\nscript/demo_extract_eth_txs_oss.py\r\n\r\nIt could also be used to retrieve transactional data from an address with some simple calls:\r\n\r\n``` python\r\nimport os\r\nfrom sbdata.FlipsideApi import FlipsideApi\r\n\r\napi_key = os.environ['FLIPSIDE_API_KEY']\r\nflipside_api = FlipsideApi(api_key, max_address=1000)\r\naddress = ['0x06cd8288dc001024ce0a1cf39caaedc0e2db9c82']\r\ntx_add_eth = flipside_api.get_transactions(address, chain='ethereum')\r\n```\r\n\r\nIt walks you through the process of retrieving data from the flipside API and saving it in a folder.\r\n\r\nTo use this package you will need an API key from flipside that you can get\r\nhere: https://sdk.flipsidecrypto.xyz/shroomdk/apikeys\r\n\r\n### sblegos and sbutils\r\n\r\nsblegos provides the following analysis of legos:\r\n\r\n- **has_same_seed** : true if the address has the same seed as any other address in the grants contributors\r\n- **has_same_seed_naive** : true if the address has the same seed as any other address in the grants contributors with a\r\n  naive approach: address of the from_address of the first transaction.\r\n- **has_suspicious_seed_behavior** : true if has_same_seed is different from has_same_seed_naive. It means the user\r\n  performed some actions before funding his wallet.\r\n- **has_interacted_with_other_contributor** : true if the user has interacted with any other contributor to the grant\r\n- **has_less_than_n_transactions** : true if the user has less than n transactions.\r\n- **has_transaction_similitude** : true if the user has a transaction history that is similar to any other contributor\r\n  to the grant.\r\n- **has_transaction_similitude_opti** : an optimized version of has_transaction_similitude, when used across multiple\r\n  addresses.\r\n\r\nA jupyter notebook using both packages is available as a jupyter notebook\r\nhere https://github.com/poupou-web3/grant-exploration/blob/main/gr-oss-exploration-application.ipynb\r\n\r\nThe following snippet of code will check if any address has the same seed as any other contributor to the climate grant\r\n\r\n``` python\r\nimport os\r\nimport sys\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom legos import TransactionAnalyser\r\nfrom utils import LoadData\r\n\r\ncurrent_dir = Path(os.getcwd())\r\n\r\n# Load the addresses we want to study here all contributors to the climate grant\r\npath_to_grants = \"data/grants\"\r\npath_to_contributor_address = os.path.join(path_to_grants, \"address\")\r\nfull_path_add = os.path.join(current_dir, path_to_contributor_address)\r\ndf_address = pd.read_csv(os.path.join(full_path_add, \"df_contribution_address_CLIMATE.csv\"))\r\nlist_address = df_address[\"address\"].tolist()\r\n\r\n# Load the transactions of the addresses\r\npath_to_parent = Path(current_dir).parent\r\npath_to_tx = os.path.join(path_to_parent, 'transactions_full')\r\ndata_loader = LoadData.LoadData(path_to_tx)\r\n\r\n# Load the transactions of the addresses in a dataframe\r\ndf_tx = data_loader.create_df_tx('ethereum', list_address)\r\n\r\n# Initialise the TransactionAnalyser class\r\ntx_analyser = TransactionAnalyser.TransactionAnalyser(df_tx, df_address=df_address)\r\ndf_matching_address = pd.DataFrame(df_tx.EOA.unique(), columns=[\"address\"])\r\n\r\n# Check if the address has the same seed as any address in the grant returns a df with a boolean column 'seed_same_naive'\r\ndf_matching_address['seed_same_naive'] = df_matching_address.loc[:, 'address'].apply(lambda x : tx_analyser.has_same_seed_naive(x))\r\n\r\n```\r\n\r\n## Documentation\r\n\r\nThe documentation of the package is available at https://sybil-scorer.readthedocs.io/en/latest/py-modindex.html.\r\nFor a local version of the documentation, you can build it using sphinx. with the following commands:\r\n\r\n```\r\ncd docs\r\nsphinx-apidoc -o ./source ../sbscorer\r\nmake html\r\n```\r\n\r\nThen open the file docs/build/html/index.html in your browser.\r\nThe local version of the documentation is prettier than the one hosted on readthedocs.\r\n![doc.png](img/doc.png)\r\n\r\n## Additional Data\r\n\r\nSome data for easier use of the package in the context of Gitcoin grants are made available on Ocean market.\r\n\r\n### Ethereum Transaction Data\r\n\r\nEthereum Transaction data are available for download on Ocean here:\r\nhttps://market.oceanprotocol.com/asset/did:op:826780ac16a444d65a0699e0e7629e67688c7b6a31ba2d1e672e3a2b398cab08\r\n\r\nThese are all the transactions performed by users who contributed to the grant as of 20th of January 2022.\r\nIt is organized with one CSV file for each address to facilitate the loading of only the necessary data transactions\r\nwhen performing analysis on a specific grant or project.\r\n\r\nThe data was produced using the sbdata package and the FlipsideApi class.\r\n\r\n### Standardised Grant Data and Addresses\r\n\r\nThe data provided by Gitcoin was standardized in the same format for all grants to make it easier to manipulate. For\r\nexample to find all the wallet addresses of contributors to a specific project or grant.\r\n\r\nThese can be recreated by using the files provided by ODC/Gitcoin. The files provided should be put with the\r\narchitecture below. Each Grant is in a folder and inside there are the applications CSV and the votes CSV.\r\n\r\nThen run the jupyter notebook jupyter/normalize_contribution_data.ipynb\r\nthis will create files in the root of the grant folder as shown below.\r\n\r\nYou can also download the standardized data from Ocean market place here:\r\n\r\n- Standardized grant\r\n  contributions : https://market.oceanprotocol.com/asset/did:op:eac43d546ba84e5b82ddf4d2fbf4db9290711e8d2c2a167bce148b7209d41623\r\n- standardized grant\r\n  applications : https://market.oceanprotocol.com/asset/did:op:1d319077f7879e48b01aad52e4a69fc0ea06594c908575df4bd5cd015338b8cf\r\n\r\n```commandline\r\ndata/grants\r\n│   df_application_normalized.csv\r\n│   df_contribution_address_CLIMATE.csv\r\n│   df_contribution_address_ETHEREUM.csv\r\n│   df_contribution_address_FANTOM.csv\r\n│   df_contribution_address_GR15.csv\r\n│   df_contribution_address_OSS.csv\r\n│   df_contribution_address_UNICEF.csv\r\n│   df_contribution_normalized.csv\r\n│   df_new_grant_contributor_address.csv\r\n│   df_new_round_address.csv\r\n│   unique_ctbt_address.csv\r\n│\r\n├───Climate\r\n│       climate_grant_applications.csv\r\n│       climate_grant_votes.csv\r\n│\r\n├───Ethereum\r\n│       ethereum_grant_applications.csv\r\n│       ethereum_grant_votes.csv\r\n│\r\n├───Fantom\r\n│       fantom_grant_applications.csv\r\n│       fantom_grant_votes.csv\r\n│\r\n├───GR15\r\n│       GR15_contributions.csv\r\n│       GR15_grants_applications.json\r\n│\r\n├───oss\r\n│       oss_grant_applications.csv\r\n│       oss_grant_votes.csv\r\n│\r\n└───UNICEF\r\n        unicef_grant_applications.csv\r\n        unicef_grant_votes.csv\r\n```\r\n\r\n## Future works\r\n\r\nFuture works include:\r\n\r\n- Improving the similarity algorithm performance.\r\n- Adding more transactional analysis lego.\r\n- Adding temporal features to a clustering algorithm as researched in the first\r\n  hackathon [submission](https://github.com/poupou-web3/GC-ODS-Sybil).\r\n- Adding legos using tags and labels of flipsidde API for example to filter similar seed wallet addresses.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/poupou-web3/cluster-scorer",
    "keywords": "Sybil,OSS,Gitcoin,Quadratic",
    "license": "MIT License  Copyright (c) 2023 Poupou  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sybil-scorer",
    "package_url": "https://pypi.org/project/sybil-scorer/",
    "platform": null,
    "project_url": "https://pypi.org/project/sybil-scorer/",
    "project_urls": {
      "Documentation": "https://sybil-scorer.readthedocs.io/en/latest/py-modindex.html",
      "Homepage": "https://github.com/poupou-web3/cluster-scorer"
    },
    "release_url": "https://pypi.org/project/sybil-scorer/0.0.0/",
    "requires_dist": [
      "pandas (==1.5.2)",
      "shroomdk (==1.0.2)",
      "tomli ; python_version < \"3.11\"",
      "black ; extra == 'dev'",
      "jupyterlab (==3.5.2) ; extra == 'dev'",
      "ipykernel (==6.20.2) ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "pytest (==7.2.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "A sybil scoring tool",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16647120,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f164e462cd21fffeb92f6437d6788c419605ecb6265e87c3e1b8def59dc04dc",
          "md5": "38adb8ffd4419d659053ac218f123a38",
          "sha256": "898c24d3be97cdbe8e5eb5f024dc2ea00f41e98c59e20e83fbe347913696933f"
        },
        "downloads": -1,
        "filename": "sybil_scorer-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38adb8ffd4419d659053ac218f123a38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15919,
        "upload_time": "2023-02-01T06:27:13",
        "upload_time_iso_8601": "2023-02-01T06:27:13.544977Z",
        "url": "https://files.pythonhosted.org/packages/8f/16/4e462cd21fffeb92f6437d6788c419605ecb6265e87c3e1b8def59dc04dc/sybil_scorer-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62ff10febdb8c44e8665ec3e3b970f2c7c8200fb2f21fde2ed7e57225e0e06e4",
          "md5": "fcf97f0d739f497c9118ad65f2f5af1b",
          "sha256": "740bc339ac94ced06a4fc716c23f7f5d466989193d85810da1b05d78b139dc99"
        },
        "downloads": -1,
        "filename": "sybil-scorer-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcf97f0d739f497c9118ad65f2f5af1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 18321,
        "upload_time": "2023-02-01T06:27:17",
        "upload_time_iso_8601": "2023-02-01T06:27:17.029071Z",
        "url": "https://files.pythonhosted.org/packages/62/ff/10febdb8c44e8665ec3e3b970f2c7c8200fb2f21fde2ed7e57225e0e06e4/sybil-scorer-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0rc6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "244936f92ccfea51e0b46ad261a633eba8bc252843a71edab0fb9375653a1c73",
          "md5": "8cc899570959c7ce90b90d54aba70b22",
          "sha256": "2ea0567b7cf432deca73d9494d9e762da84198fa30565974e27ac290ee9733fa"
        },
        "downloads": -1,
        "filename": "sybil_scorer-0.0.0rc6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cc899570959c7ce90b90d54aba70b22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15793,
        "upload_time": "2023-01-31T18:43:44",
        "upload_time_iso_8601": "2023-01-31T18:43:44.523602Z",
        "url": "https://files.pythonhosted.org/packages/24/49/36f92ccfea51e0b46ad261a633eba8bc252843a71edab0fb9375653a1c73/sybil_scorer-0.0.0rc6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "new official release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0fb8689c7b6a1d81ed8157ab1d33dc84b56dc375b7c6a7652d7023c9d3463d4",
          "md5": "0f35e8e4da4e47488abd9fb88c3fdd7c",
          "sha256": "c270255037ea5b528f0c5d9844bc184ccb87c327aa2670b7ddd54dedee88369a"
        },
        "downloads": -1,
        "filename": "sybil-scorer-0.0.0rc6.tar.gz",
        "has_sig": false,
        "md5_digest": "0f35e8e4da4e47488abd9fb88c3fdd7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 17963,
        "upload_time": "2023-01-31T18:43:46",
        "upload_time_iso_8601": "2023-01-31T18:43:46.718427Z",
        "url": "https://files.pythonhosted.org/packages/e0/fb/8689c7b6a1d81ed8157ab1d33dc84b56dc375b7c6a7652d7023c9d3463d4/sybil-scorer-0.0.0rc6.tar.gz",
        "yanked": true,
        "yanked_reason": "new official release"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f164e462cd21fffeb92f6437d6788c419605ecb6265e87c3e1b8def59dc04dc",
        "md5": "38adb8ffd4419d659053ac218f123a38",
        "sha256": "898c24d3be97cdbe8e5eb5f024dc2ea00f41e98c59e20e83fbe347913696933f"
      },
      "downloads": -1,
      "filename": "sybil_scorer-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38adb8ffd4419d659053ac218f123a38",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 15919,
      "upload_time": "2023-02-01T06:27:13",
      "upload_time_iso_8601": "2023-02-01T06:27:13.544977Z",
      "url": "https://files.pythonhosted.org/packages/8f/16/4e462cd21fffeb92f6437d6788c419605ecb6265e87c3e1b8def59dc04dc/sybil_scorer-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62ff10febdb8c44e8665ec3e3b970f2c7c8200fb2f21fde2ed7e57225e0e06e4",
        "md5": "fcf97f0d739f497c9118ad65f2f5af1b",
        "sha256": "740bc339ac94ced06a4fc716c23f7f5d466989193d85810da1b05d78b139dc99"
      },
      "downloads": -1,
      "filename": "sybil-scorer-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fcf97f0d739f497c9118ad65f2f5af1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 18321,
      "upload_time": "2023-02-01T06:27:17",
      "upload_time_iso_8601": "2023-02-01T06:27:17.029071Z",
      "url": "https://files.pythonhosted.org/packages/62/ff/10febdb8c44e8665ec3e3b970f2c7c8200fb2f21fde2ed7e57225e0e06e4/sybil-scorer-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}