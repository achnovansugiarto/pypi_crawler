{
  "info": {
    "author": "Alex Tkachenko",
    "author_email": "preusx.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Snowball\n\nLibrary with several utilities for merging \"n+1\" amount function calls into one.\n\nThis utilities might be helpful for tasks/functions that should run not very frequently, but there could be a lot of initiating calls to that functions.\n\n## Installation\n\n```sh\npip install px-snowball\n```\n\n## Usage\n\nSimple usage:\n\n```python\nfrom px_snowball import thread_throttle, thread_debounce\n# Or shortcuts:\n# from px_snowball import throttle, debounce\n\ncontext = {}\n\n# We're delaying function execution after each call:\n@thread_debounce(0.2)\ndef debouncer(values):\n  # `values` will be a list of all arguments and key arguments it was called.\n  for args, kwargs in values:\n    # do some stuff\n    print(args)\n\ndebouncer(1)\ndebouncer(2)\ndebouncer(3)\ntime.sleep(0.1)\ndebouncer(4)\ntime.sleep(0.2)\n\n# And only now `debouncer` function will be called.\n# The same is for throttle function.\n```\n\nMore practical example.\n\nLet's assume we need to write messages to file. But system calls for every message - is too expensive:\n\n```python\nfrom px_snowball import thread_throttle, thread_debounce\n\n# At most every 1 second messages will be written to log file:\n@thread_throttle(1)\ndef log(values: List[Tuple[Tuple[str], dict]):\n  messages = (message for (message, *args), kwargs in values)\n  data_to_write = '\\n'.join(messages)\n\n  with open('/tmp/log.log', 'a+') as f:\n    f.write(data_to_write)\n\n\nlog('First')\nlog('Second')\n# Will be empty:\n# > cat /tmp/log.log\ntime.sleep(0.5)\nlog('Third')\n# Still empty:\n# > cat /tmp/log.log\n\ntime.sleep(0.5)\n# Now, after 1 second has passed all logs are in file.\n# Write operation was executed only once, instead of 3 times as would be if func\n# was executed as usual.\n# > cat /tmp/log.log\n# > First\n# > Second\n# > Third\n```\n\nYes, the resulting function is a bit ugly, but the main profit is that we could perform our operations once in \"bulk\"(with possible optimizations) even if we call functions 10k times.\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.0]\nInitial version.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "px-snowball",
    "package_url": "https://pypi.org/project/px-snowball/",
    "platform": null,
    "project_url": "https://pypi.org/project/px-snowball/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/px-snowball/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Snowball(or n+1) function call prevention utilities.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14778830,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75380645eb064e4fc7909e147c8a9578dead6c42e9fb7fccb0779c32ab80f118",
          "md5": "bff2734955d7359767c9b7197f70b2fa",
          "sha256": "175f3f9cc8b466712199afa384923405f028d8b808a9c9fb0d2b569ede3679c9"
        },
        "downloads": -1,
        "filename": "px-snowball-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bff2734955d7359767c9b7197f70b2fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5488,
        "upload_time": "2022-08-16T16:43:49",
        "upload_time_iso_8601": "2022-08-16T16:43:49.151060Z",
        "url": "https://files.pythonhosted.org/packages/75/38/0645eb064e4fc7909e147c8a9578dead6c42e9fb7fccb0779c32ab80f118/px-snowball-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75380645eb064e4fc7909e147c8a9578dead6c42e9fb7fccb0779c32ab80f118",
        "md5": "bff2734955d7359767c9b7197f70b2fa",
        "sha256": "175f3f9cc8b466712199afa384923405f028d8b808a9c9fb0d2b569ede3679c9"
      },
      "downloads": -1,
      "filename": "px-snowball-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bff2734955d7359767c9b7197f70b2fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5488,
      "upload_time": "2022-08-16T16:43:49",
      "upload_time_iso_8601": "2022-08-16T16:43:49.151060Z",
      "url": "https://files.pythonhosted.org/packages/75/38/0645eb064e4fc7909e147c8a9578dead6c42e9fb7fccb0779c32ab80f118/px-snowball-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}