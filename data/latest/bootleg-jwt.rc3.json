{
  "info": {
    "author": "Freyja Odinthrir",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Topic :: Internet :: WWW/HTTP :: Session",
      "Topic :: Security",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# bootleg-jwt <!-- omit in toc -->\n\n`bootleg-jwt` aims to mimic JSON Web Tokens in a simple, `pydantic` way.\n\nThis module provides two main functions:\n\n- [Generate a token](#generate-a-token)\n- [Validate a token](#validate-a-token)\n\nThese are designed to be very simple to use. See below:\n\n## Generate a token\n\n```python\nfrom bootleg_jwt import BootlegJWT, Payload, header, body\nfrom pydantic import BaseModel\nfrom os import environ              # An environment variable is required.\n\n\nSECRET = \"some-secret-key\"\n\n\nDURATION = 60 * 60                  # Token expires after this many seconds\n\n\nTYPE = \"Testing Token\"              # An arbitrary name\n\n\nenviron['SECRET'] = SECRET          # This module depends upon an environment\n                                    # variable `SECRET`. You may also set this\n                                    # secret in a `.env` file in your project's root,\n                                    # or by using `export SECRET=\"secret\"`\n\n\n\n## These two pydantic models are simple examples. They may have arbitrary names and data. They must only map to Token.body.user and Token.body.data\nclass UserData(BaseModel):\n    id: int\n    username: str\n\n\nclass BodyData(BaseModel):\n    info: str\n    value: bool\n\n\npayload_user = UserData(id=69,username=\"nice\")\npayload_body = BodyData(info=\"Some Information\", value=True)\n\n\npayload = Payload(\n    header=header(duration=DURATION,type=TYPE),\n    body=body(user=payload_user,data=payload_body)\n)\n\n\ngenerate = BootlegJWT(payload=payload)\ntoken = generate.TOKEN\nencoded = generate.ENCODED\njson = generate.JSON\nvalidate = generate.VALID\ndivider = \"\\n------------------------------\\n\"\n\n\n\nprint(token,divider,encoded,divider,json,divider,validate)\n```\n\n<details>\n<summary>Output (click to expand):</summary>\n<br>\n\n```json\nheader=Header(type='Testing Token', duration=Duration(unit=Unit(type='time', name='seconds', shorthand='s'), value=3600), created=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677382369), expires=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677385969)) body=Body(user=UserData(id=69, username='nice'), data=BodyData(info='Some Information', value=True)) signature=Hash(value=b'e0b99c4eca2811bd9d164185219a283a4fddc2129ec0d2b3e5ba7b22596e4c7b8ac6d7b7c81812b50ace0a5b6d0be3ce5f977f753069d951bf15d13f179014df', algorithm='blake2b', keyed=True, salt=b'', person=b'')\n------------------------------\n b'eyJoZWFkZXIiOiB7InR5cGUiOiAiVGVzdGluZyBUb2tlbiIsICJkdXJhdGlvbiI6IHsidW5pdCI6IHsidHlwZSI6ICJ0aW1lIiwgIm5hbWUiOiAic2Vjb25kcyIsICJzaG9ydGhhbmQiOiAicyJ9LCAidmFsdWUiOiAzNjAwfSwgImNyZWF0ZWQiOiB7InVuaXQiOiB7InR5cGUiOiAidGltZSIsICJuYW1lIjogInNlY29uZHMgc2luY2UgZXBvY2giLCAic2hvcnRoYW5kIjogInMrZXBvY2gifSwgInZhbHVlIjogMTY3NzM4MjM2OX0sICJleHBpcmVzIjogeyJ1bml0IjogeyJ0eXBlIjogInRpbWUiLCAibmFtZSI6ICJzZWNvbmRzIHNpbmNlIGVwb2NoIiwgInNob3J0aGFuZCI6ICJzK2Vwb2NoIn0sICJ2YWx1ZSI6IDE2NzczODU5Njl9fSwgImJvZHkiOiB7InVzZXIiOiB7ImlkIjogNjksICJ1c2VybmFtZSI6ICJuaWNlIn0sICJkYXRhIjogeyJpbmZvIjogIlNvbWUgSW5mb3JtYXRpb24iLCAidmFsdWUiOiB0cnVlfX0sICJzaWduYXR1cmUiOiB7InZhbHVlIjogImUwYjk5YzRlY2EyODExYmQ5ZDE2NDE4NTIxOWEyODNhNGZkZGMyMTI5ZWMwZDJiM2U1YmE3YjIyNTk2ZTRjN2I4YWM2ZDdiN2M4MTgxMmI1MGFjZTBhNWI2ZDBiZTNjZTVmOTc3Zjc1MzA2OWQ5NTFiZjE1ZDEzZjE3OTAxNGRmIiwgImFsZ29yaXRobSI6ICJibGFrZTJiIiwgImtleWVkIjogdHJ1ZSwgInNhbHQiOiAiIiwgInBlcnNvbiI6ICIifX0='\n------------------------------\n {\n    \"header\": {\n        \"type\": \"Testing Token\",\n        \"duration\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds\",\n                \"shorthand\": \"s\"\n            },\n            \"value\": 3600\n        },\n        \"created\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677382369\n        },\n        \"expires\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677385969\n        }\n    },\n    \"body\": {\n        \"user\": {\n            \"id\": 69,\n            \"username\": \"nice\"\n        },\n        \"data\": {\n            \"info\": \"Some Information\",\n            \"value\": true\n        }\n    },\n    \"signature\": {\n        \"value\": \"e0b99c4eca2811bd9d164185219a283a4fddc2129ec0d2b3e5ba7b22596e4c7b8ac6d7b7c81812b50ace0a5b6d0be3ce5f977f753069d951bf15d13f179014df\",\n        \"algorithm\": \"blake2b\",\n        \"keyed\": true,\n        \"salt\": \"\",\n        \"person\": \"\"\n    }\n}\n------------------------------\n True\n```\n\n</details>\n<br>\n\n## Validate a token\n\n```python\nfrom bootleg_jwt import BootlegJWT, Payload, header, body\nfrom pydantic import BaseModel\nfrom os import environ              # An environment variable is required.\n\n\nSECRET = \"some-secret-key\"\n\n\nDURATION = 60 * 60                  # Token expires after this many seconds\n\n\nTYPE = \"Testing Token\"              # An arbitrary name\n\n\nenviron['SECRET'] = SECRET          # This module depends upon an environment\n                                    # variable `SECRET`. You may also set this\n                                    # secret in a `.env` file in your project's root,\n                                    # or by using `export SECRET=\"secret\"`\n\n\n\n## These two pydantic models are simple examples. They may have arbitrary names and data. They must only map to Token.body.user and Token.body.data\nclass UserData(BaseModel):\n    id: int\n    username: str\n\n\nclass BodyData(BaseModel):\n    info: str\n    value: bool\n\n\npayload_user = UserData(id=69,username=\"nice\")\npayload_body = BodyData(info=\"Some Information\", value=True)\n\n\npayload = Payload(\n    header=header(duration=DURATION,type=TYPE),\n    body=body(user=payload_user,data=payload_body)\n)\n\n\ndivider = \"\\n------------------------------\\n\"\n\n\ndef generate(payload):\n    generate = BootlegJWT(payload=payload)\n    decoded = generate.DECODED\n    encoded = generate.ENCODED\n    json = generate.JSON\n    validate = generate.VALID\n    print(decoded,divider,encoded,divider,json,divider,validate)\n    return encoded\n\n\ndef validate_token(token):\n    validate_token = BootlegJWT(token=token)\n    v_decoded = validate_token.DECODED\n    v_json = validate_token.JSON\n    v_valid = validate_token.VALID\n    print(v_decoded,divider,v_json,divider,v_valid)\n\n\nvalidate_token(generate(payload))\n```\n\n<details>\n<summary>Output (click to expand):</summary>\n<br>\n\n```json\nheader=Header(type='Testing Token', duration=Duration(unit=Unit(type='time', name='seconds', shorthand='s'), value=3600), created=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677383225), expires=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677386825)) body=Body(user=UserData(id=69, username='nice'), data=BodyData(info='Some Information', value=True)) signature=Hash(value=b'9a6a3fc5c866442ee886c1d20f44fe49da29be4e56fd6f40a1c3e23f672d801c0d787f9f239265477da1339fffc41754f16a0899f5955aa0ed7602693919071d', algorithm='blake2b', keyed=True, salt=b'', person=b'')\n------------------------------\n b'eyJoZWFkZXIiOiB7InR5cGUiOiAiVGVzdGluZyBUb2tlbiIsICJkdXJhdGlvbiI6IHsidW5pdCI6IHsidHlwZSI6ICJ0aW1lIiwgIm5hbWUiOiAic2Vjb25kcyIsICJzaG9ydGhhbmQiOiAicyJ9LCAidmFsdWUiOiAzNjAwfSwgImNyZWF0ZWQiOiB7InVuaXQiOiB7InR5cGUiOiAidGltZSIsICJuYW1lIjogInNlY29uZHMgc2luY2UgZXBvY2giLCAic2hvcnRoYW5kIjogInMrZXBvY2gifSwgInZhbHVlIjogMTY3NzM4MzIyNX0sICJleHBpcmVzIjogeyJ1bml0IjogeyJ0eXBlIjogInRpbWUiLCAibmFtZSI6ICJzZWNvbmRzIHNpbmNlIGVwb2NoIiwgInNob3J0aGFuZCI6ICJzK2Vwb2NoIn0sICJ2YWx1ZSI6IDE2NzczODY4MjV9fSwgImJvZHkiOiB7InVzZXIiOiB7ImlkIjogNjksICJ1c2VybmFtZSI6ICJuaWNlIn0sICJkYXRhIjogeyJpbmZvIjogIlNvbWUgSW5mb3JtYXRpb24iLCAidmFsdWUiOiB0cnVlfX0sICJzaWduYXR1cmUiOiB7InZhbHVlIjogIjlhNmEzZmM1Yzg2NjQ0MmVlODg2YzFkMjBmNDRmZTQ5ZGEyOWJlNGU1NmZkNmY0MGExYzNlMjNmNjcyZDgwMWMwZDc4N2Y5ZjIzOTI2NTQ3N2RhMTMzOWZmZmM0MTc1NGYxNmEwODk5ZjU5NTVhYTBlZDc2MDI2OTM5MTkwNzFkIiwgImFsZ29yaXRobSI6ICJibGFrZTJiIiwgImtleWVkIjogdHJ1ZSwgInNhbHQiOiAiIiwgInBlcnNvbiI6ICIifX0='\n------------------------------\n {\n    \"header\": {\n        \"type\": \"Testing Token\",\n        \"duration\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds\",\n                \"shorthand\": \"s\"\n            },\n            \"value\": 3600\n        },\n        \"created\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677383225\n        },\n        \"expires\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677386825\n        }\n    },\n    \"body\": {\n        \"user\": {\n            \"id\": 69,\n            \"username\": \"nice\"\n        },\n        \"data\": {\n            \"info\": \"Some Information\",\n            \"value\": true\n        }\n    },\n    \"signature\": {\n        \"value\": \"9a6a3fc5c866442ee886c1d20f44fe49da29be4e56fd6f40a1c3e23f672d801c0d787f9f239265477da1339fffc41754f16a0899f5955aa0ed7602693919071d\",\n        \"algorithm\": \"blake2b\",\n        \"keyed\": true,\n        \"salt\": \"\",\n        \"person\": \"\"\n    }\n}\n------------------------------\n True\nheader=Header(type='Testing Token', duration=Duration(unit=Unit(type='time', name='seconds', shorthand='s'), value=3600), created=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677383225), expires=Timestamp(unit=Unit(type='time', name='seconds since epoch', shorthand='s+epoch'), value=1677386825)) body=Body(user={'id': 69, 'username': 'nice'}, data={'info': 'Some Information', 'value': True}) signature=Hash(value=b'9a6a3fc5c866442ee886c1d20f44fe49da29be4e56fd6f40a1c3e23f672d801c0d787f9f239265477da1339fffc41754f16a0899f5955aa0ed7602693919071d', algorithm='blake2b', keyed=True, salt=b'', person=b'')\n------------------------------\n {\n    \"header\": {\n        \"type\": \"Testing Token\",\n        \"duration\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds\",\n                \"shorthand\": \"s\"\n            },\n            \"value\": 3600\n        },\n        \"created\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677383225\n        },\n        \"expires\": {\n            \"unit\": {\n                \"type\": \"time\",\n                \"name\": \"seconds since epoch\",\n                \"shorthand\": \"s+epoch\"\n            },\n            \"value\": 1677386825\n        }\n    },\n    \"body\": {\n        \"user\": {\n            \"id\": 69,\n            \"username\": \"nice\"\n        },\n        \"data\": {\n            \"info\": \"Some Information\",\n            \"value\": true\n        }\n    },\n    \"signature\": {\n        \"value\": \"9a6a3fc5c866442ee886c1d20f44fe49da29be4e56fd6f40a1c3e23f672d801c0d787f9f239265477da1339fffc41754f16a0899f5955aa0ed7602693919071d\",\n        \"algorithm\": \"blake2b\",\n        \"keyed\": true,\n        \"salt\": \"\",\n        \"person\": \"\"\n    }\n}\n------------------------------\n True\n\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/freyjagp/bootleg-jwt",
    "keywords": "cryptography,tokens,hashing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bootleg-jwt",
    "package_url": "https://pypi.org/project/bootleg-jwt/",
    "platform": null,
    "project_url": "https://pypi.org/project/bootleg-jwt/",
    "project_urls": {
      "Bug Reports": "https://github.com/freyjagp/bootleg-jwt/issues",
      "Homepage": "https://github.com/freyjagp/bootleg-jwt",
      "Source": "https://github.com/freyjagp/bootleg-jwt/"
    },
    "release_url": "https://pypi.org/project/bootleg-jwt/0.2.3/",
    "requires_dist": [
      "pydantic",
      "python-decouple",
      "cryptography"
    ],
    "requires_python": ">=3.10, <4",
    "summary": "Sign tokens with blake2b, then verify them.",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17109889,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9049b034fcc65cb84f0f8534f8fa107890f5b5c0a38dfa3e1639f8bb7fa29b87",
          "md5": "2ffc809e7bc21fddbd003031b4df6da0",
          "sha256": "852920a7483a5693306adb1d58a2e4e27a932f1dd6cf703167945d7fd5106c6c"
        },
        "downloads": -1,
        "filename": "bootleg_jwt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ffc809e7bc21fddbd003031b4df6da0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10, <4",
        "size": 7479,
        "upload_time": "2023-02-26T03:52:35",
        "upload_time_iso_8601": "2023-02-26T03:52:35.552886Z",
        "url": "https://files.pythonhosted.org/packages/90/49/b034fcc65cb84f0f8534f8fa107890f5b5c0a38dfa3e1639f8bb7fa29b87/bootleg_jwt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7f969006dea4779c9e5dd51d161d49064c4f29ab754b404094feb8eb921d7c2",
          "md5": "289f815d30f7defef7cca2bc7ff1c2ee",
          "sha256": "d34f9d8f208827932afc345f04d96ad545ceb578c5632d045eca201b6432f588"
        },
        "downloads": -1,
        "filename": "bootleg-jwt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "289f815d30f7defef7cca2bc7ff1c2ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10, <4",
        "size": 7044,
        "upload_time": "2023-02-26T03:52:37",
        "upload_time_iso_8601": "2023-02-26T03:52:37.758162Z",
        "url": "https://files.pythonhosted.org/packages/f7/f9/69006dea4779c9e5dd51d161d49064c4f29ab754b404094feb8eb921d7c2/bootleg-jwt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3586cdb7adf7b255c64963d8fbd039e819f524a5d336efc20f79c5a82500679a",
          "md5": "d63811ec3fd8c747a889a6020bbc4f31",
          "sha256": "f501ccdb32692ce4e6c1c25dd1a1c9a116470ed1010ee6cb8aba47938bf33985"
        },
        "downloads": -1,
        "filename": "bootleg_jwt-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d63811ec3fd8c747a889a6020bbc4f31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10, <4",
        "size": 7490,
        "upload_time": "2023-03-01T10:25:23",
        "upload_time_iso_8601": "2023-03-01T10:25:23.165938Z",
        "url": "https://files.pythonhosted.org/packages/35/86/cdb7adf7b255c64963d8fbd039e819f524a5d336efc20f79c5a82500679a/bootleg_jwt-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbe32745d20738ec58aa6895b353d27538ac2524d73cf7212fb7f31f8c7bfde5",
          "md5": "a88f23132f811f4ff1f919d194504976",
          "sha256": "f92efd53f1ac0527697a25aee69fb36e3c660e6000db3845615f20d53990a2fe"
        },
        "downloads": -1,
        "filename": "bootleg-jwt-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a88f23132f811f4ff1f919d194504976",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10, <4",
        "size": 7032,
        "upload_time": "2023-03-01T10:25:24",
        "upload_time_iso_8601": "2023-03-01T10:25:24.591505Z",
        "url": "https://files.pythonhosted.org/packages/db/e3/2745d20738ec58aa6895b353d27538ac2524d73cf7212fb7f31f8c7bfde5/bootleg-jwt-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8773f4bb77ddb0ce3507f75e8b337f8979cd12017d7b717a3abafc92f388fb4",
          "md5": "3a8db5d1eb732020bc8c887a66ef86bf",
          "sha256": "586d59db7c08b3dc3e3ce0291b6f18cf398036612ce9346037e272f223d77d39"
        },
        "downloads": -1,
        "filename": "bootleg_jwt-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a8db5d1eb732020bc8c887a66ef86bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10, <4",
        "size": 7494,
        "upload_time": "2023-03-01T10:32:25",
        "upload_time_iso_8601": "2023-03-01T10:32:25.822987Z",
        "url": "https://files.pythonhosted.org/packages/d8/77/3f4bb77ddb0ce3507f75e8b337f8979cd12017d7b717a3abafc92f388fb4/bootleg_jwt-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "874c7ccfbef3ed78a363b760881d0e22d1c3ee28673ba1c6c894d0121af230f8",
          "md5": "ccb8928cc61b9682ce23cf010082666f",
          "sha256": "4d5dee91805e7cd25279bfd37754755012fb70cae9e1b2cfa655315df531296a"
        },
        "downloads": -1,
        "filename": "bootleg-jwt-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ccb8928cc61b9682ce23cf010082666f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10, <4",
        "size": 7015,
        "upload_time": "2023-03-01T10:32:27",
        "upload_time_iso_8601": "2023-03-01T10:32:27.593757Z",
        "url": "https://files.pythonhosted.org/packages/87/4c/7ccfbef3ed78a363b760881d0e22d1c3ee28673ba1c6c894d0121af230f8/bootleg-jwt-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8773f4bb77ddb0ce3507f75e8b337f8979cd12017d7b717a3abafc92f388fb4",
        "md5": "3a8db5d1eb732020bc8c887a66ef86bf",
        "sha256": "586d59db7c08b3dc3e3ce0291b6f18cf398036612ce9346037e272f223d77d39"
      },
      "downloads": -1,
      "filename": "bootleg_jwt-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a8db5d1eb732020bc8c887a66ef86bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10, <4",
      "size": 7494,
      "upload_time": "2023-03-01T10:32:25",
      "upload_time_iso_8601": "2023-03-01T10:32:25.822987Z",
      "url": "https://files.pythonhosted.org/packages/d8/77/3f4bb77ddb0ce3507f75e8b337f8979cd12017d7b717a3abafc92f388fb4/bootleg_jwt-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "874c7ccfbef3ed78a363b760881d0e22d1c3ee28673ba1c6c894d0121af230f8",
        "md5": "ccb8928cc61b9682ce23cf010082666f",
        "sha256": "4d5dee91805e7cd25279bfd37754755012fb70cae9e1b2cfa655315df531296a"
      },
      "downloads": -1,
      "filename": "bootleg-jwt-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ccb8928cc61b9682ce23cf010082666f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10, <4",
      "size": 7015,
      "upload_time": "2023-03-01T10:32:27",
      "upload_time_iso_8601": "2023-03-01T10:32:27.593757Z",
      "url": "https://files.pythonhosted.org/packages/87/4c/7ccfbef3ed78a363b760881d0e22d1c3ee28673ba1c6c894d0121af230f8/bootleg-jwt-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}