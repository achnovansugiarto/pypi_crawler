{
  "info": {
    "author": "Richard Darst",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# ffmpeg editlist utility\n\nOften, one wants to reprocess a video file using some basic\noperations, such as removing certain segments.  Rather than opening a\nvideo editor, it is nice to be able to define a text file (the\n**editlist**) with processing instructions, and then run it.  This\nallows collaboration in the processing, for example sharing the\neditlist file via git.\n\nThis utility takes a YAML definition of an editlist (segments to cut\nout and re-assemble into a file), and does the re-assembling using the\nffmpeg command line utility.\n\nThis is currently an alpha-level utility: it works, but expect it may\nnot exactly fit your use case without a bit of work.  Documentation is\nminimal but still needs improvement.  However, it has been used for\nseveral large events.\n\nFeatures include:\n\n* YAML edit list definition.\n* Select segments to stitch together in the final video file.\n  Segments are either copied raw or re-encoded (`--reencode`).\n* Give Table of Contents times (for example, '16:45: Lesson 2 begins')\n  relative to the source video, output mapped to times in\n  the output video automatically.\n* Cover certain areas of video (for example, when an audience member\n  appears).\n* Everything scripted and non-interactive.\n\n\n\n## Installation and dependencies\n\nThis is on PyPI, may be installed with `pip install ffmpeg-editlist`.\nThe only dependency is PyYAML so it might be reasonable to install\nwith `pip install --user`.  This creates a `ffmpeg-editlist` command\nin your environment.\n\nFor usage without installing, `ffmpeg_editlist.py` works as\nstand-alone with only `pyyaml`.\n\nIt depends on the `ffmpeg` command line utility, which must be\ninstalled through the operating system.  Version requirements of\n`ffmpeg` are currently unknown.\n\n\n\n## Usage\n\nStart with a directory of your videos (example: `day1-raw.mkv`).\n\nCreate an edit list file (described in next section).  A minimal\nexample is:\n\n```yaml\n- input: day1-raw.mkv\n\n- output: part1.mkv\n  title: This is the title of part1\n  description: >-\n    This is the multi-line description\n    of part 1.\n  editlist:\n    - start: 00:00   # These are time segments to include\n    - 4:00: Begin exercise 1\n    - stop: 5:00\n    - start: 6:13\n    - -: Going over the exercises  # '-' means \"latest start time\".\n    - stop: 99:00\n```\n\nThe general usage is then:\n\n```\npython ffmpeg-editlist.py EDITLIST.yaml INPUT-DIR [-o OUTPUT-DIR]\n```\n\nWhere `INPUT-DIR` is the search path for input files and `OUTPUT-DIR`\n(default `.`) is the output path for files.  You can use the `--limit\nPATTERN` option to reprocess only a few videos (example: `--limit\npart1`).\n\nBecause of the way keyframes work, there may be missing segments\naround the transition points.  After you have tested that your timings\nseem reasonable, re-run with ``--reencode`` and it will do a full\nre-encoding and make a seamless videos.  The default encoding settings\nare designed to be slow but good enough for all practical purposes:\n\n```\npython ffmpeg-editlist.py EDITLIST.yaml --reencode INPUT-DIR [-o OUTPUT-DIR]\n```\n\n`OUTPUT-DIR` will get the encoded files, and `.txt` files with the\nvideo descriptions ready to upload to your video hosting site.\n\n\n\n## Editlist definition\n\n\n### Minimal example: single file\n\n```yaml\n# Input is taken from command line argument `input`.\n- output: output.mp4\n  title: This is the title\n  description: >-\n    This is the multi-line description.\n  editlist:\n    - start: 00:00   # These are time segments to include\n    - stop: 5:00\n    - start: 6:13\n    - stop: 99:00\n```\n\nRun with `python ffmpeg-editlist.py editlist.yaml input.mkv`.\n\n\n### Minimal example with multiple files\n\n```yaml\n\n- input: raw-day1.mkv\n  output: day1-part1.mkv\n  editlist:\n    - start: 1:12\n    - stop: 55:30\n\n# Previous input file is used if no new input is defined\n- output: day1-part2.mkv\n  editlist:\n    - start: 1:00:12\n    - stop: 1:54:00\n```\n\nRun with `python ffmpeg-editlist.py editlist.yaml $input_directory`.\n\n\n### Multi-file with video descriptions\n\nThis is a full example that demonstrates all features.\n\n```yaml\n\n- workshop_description: >\n    If this exists, it will be appended to the bottom of every video\n    description.  For example, it can be general information about the\n    overall workshop.\n\n# This input will be used for all segments until redefined\n# Input relative to the input-dir command line argument.\n# If not given, use the raw input-dir argument as a filename.\n- input: cr-2021may-day1-obs.mov\n\n# A basic example\n# Output is relative to the output-dir command line argument.\n- output: day1-welcome.mp4\n  # If given, do not reencode this segment even if --reencode is given\n  # (useful for segments that start at 00:00).  'reencode: true' does\n  # nothing, this is the default and --reencode must still be\n  # specified on the command line.\n  #reencode: false\n  editlist:\n    - start: 12:20\n    - stop: 31:14\n\n# Git-intro day 1\n- output: day1-git-intro-1.mp4    # Output filename\n  title: YouTube Video Title\n  description: >\n    Description of the video.\n  editlist:\n    # These pairs are times to *include*\n    - start: 31:14\n    - stop: 38:13\n    - start: 41:28\n    - stop: 1:04:45\n\n# A sample including table of contents entries.\n# You need to map times from the raw file, to the output file, in\n# order to make a clickable YouTube table of contents.\n# They are times in the\n# original video, and they are converted to the equivalent times in\n# the processed videos. They must be within the ranges above (and\n# you get a unhandled error if they aren't):\n#   segment_start <= toc_time < segment_stop.\n# These can be interspersed with the segment definitions.\n# Example:\n- output: day2-git-intro-2.mp4\n  editlist:\n    - start: 31:14\n    # TOC entry:\n    - 31:14: Overview of the day\n    - 33:25: Motivation to version control\n    - stop: 38:13\n    - start: 41:28\n    - -: Basics of version control        # '-' is an alias for \"last start\"\n    - 48:35: \"Exercise: record changes\"   # has a ':', so must be quoted\n    - stop: 1:04:45\n    #- 1:18:22: This will fail, timestamp after the end\n\nThis syntax is used to cover a segment of the video:\n- output: day3-has-audience-visible.mp4\n  editlist:\n  - start: 00:00\n  # Cover an area.  begin/end are clear.  w and h are width and\n  # height.  x and y are offset (left, down) from the top-left corner\n  - cover: {begin: \"1:15:29\", end: \"1:51:34\", w: 840, h: 300, x: 360}\n  - stop: 5:00\n\n\n```\n\nAlongside the `.mp4` output file, a `.mp4.info.txt` file is created\nwith these contents.  This is designed for easy copying and pasting\ninto hosting sites:\n\n```\nTitle of Video\n\nVideo description.\n\n01:53 Table of contents entry 1\n15:45 Table of contents entry 2\n...\n\n\nWorkshop description.\n```\n\n\n### Multiple inputs\n\nMultiple inputs in one segment might be useful when you are attaching\nan introduction to the main video.  Note that things might go wrong if\nthe video sizes and codecs do not align perfectly.  (TODO: does this\nwork as expected?)\n\n```yaml\n- output: output.mp4\n  editlist:\n    - input: intro.mkv\n    - start: 00:00\n    - stop: 99:00\n    - input: main.mkv\n    - start: 0:00\n    - stop: 99:00\n    - input: outro.mkv\n    - start: 0:00\n    - stop: 99:00\n\n```\n\n\n\n## See also\n\n* https://trac.ffmpeg.org/wiki/Concatenate\n* https://stackoverflow.com/q/7333232\n* Inspired by https://github.com/mvdoc/budapest-fmri-data/blob/master/scripts/preprocessing-stimulus/split_movie.sh\n* script for the [mpv](https://mpv.io) video player, which can copy\n  the time when you push a button.  Might need some modification:\n  https://github.com/Kr4is/mpv-copy-time\n\n\n## Status / Contributing\n\nAlpha/beta, under development, it is starting to become reusable but\nstill development is for a few use cases.  In order to use this you\nprobably have to read some code / work around some bugs since it isn't\nwell tested yet.\n\nBug reports or improvements welcome, but it is kind of a mess now.\nTest with ``pytest ffmpeg-editlist.py``, but note that main\nfunctionality is not tested right now.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "ffmpeg-editlist",
    "package_url": "https://pypi.org/project/ffmpeg-editlist/",
    "platform": null,
    "project_url": "https://pypi.org/project/ffmpeg-editlist/",
    "project_urls": {
      "Home": "https://github.com/coderefinery/ffmpeg-editlist"
    },
    "release_url": "https://pypi.org/project/ffmpeg-editlist/0.5.2/",
    "requires_dist": [
      "pyyaml",
      "pytest ; extra == \"test\""
    ],
    "requires_python": null,
    "summary": "Cut and splice video files using a YAML definition file and ffmpeg",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15154014,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33691ebf0bf77af428a82b36a6b3656cc0c6b987edb024e7868e920f09ba8059",
          "md5": "dd86b01e73223a790c1b042ba9179149",
          "sha256": "f369fa02b21a09c4168c57c1560ad04fdd301e3cf4e68c25f52bde025c658494"
        },
        "downloads": -1,
        "filename": "ffmpeg_editlist-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd86b01e73223a790c1b042ba9179149",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9513,
        "upload_time": "2022-03-23T11:52:39",
        "upload_time_iso_8601": "2022-03-23T11:52:39.080091Z",
        "url": "https://files.pythonhosted.org/packages/33/69/1ebf0bf77af428a82b36a6b3656cc0c6b987edb024e7868e920f09ba8059/ffmpeg_editlist-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "80087ef205939c8410c14ccb9ea5817003e09774fb783b7e5e42e67cde061f02",
          "md5": "3947fa6b047564f262d67f574f05f047",
          "sha256": "772b5a41cb72294b8fd4f65da741e454a349eab0a03086fa0df16c2947d952ad"
        },
        "downloads": -1,
        "filename": "ffmpeg_editlist-0.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3947fa6b047564f262d67f574f05f047",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9660,
        "upload_time": "2022-06-20T23:07:20",
        "upload_time_iso_8601": "2022-06-20T23:07:20.879908Z",
        "url": "https://files.pythonhosted.org/packages/80/08/7ef205939c8410c14ccb9ea5817003e09774fb783b7e5e42e67cde061f02/ffmpeg_editlist-0.5.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "307226c26e4ba4fedb26fc3e507c84530a9fdf22938060aecf79a50f4fdc3905",
          "md5": "58526cb7dbaa924741af2a7b6ce3b809",
          "sha256": "8db801d9451c83bf67f2032d8f8ae5a2ae971b414179e0f5130a5c037f977aea"
        },
        "downloads": -1,
        "filename": "ffmpeg-editlist-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58526cb7dbaa924741af2a7b6ce3b809",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9284,
        "upload_time": "2022-06-20T23:07:28",
        "upload_time_iso_8601": "2022-06-20T23:07:28.913055Z",
        "url": "https://files.pythonhosted.org/packages/30/72/26c26e4ba4fedb26fc3e507c84530a9fdf22938060aecf79a50f4fdc3905/ffmpeg-editlist-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "44c54713c56a6b4d3d65c1bd1c6b1a5653fc46c96253cbfd030cc64e5582af1f",
          "md5": "f26e241cb8742aa7adaa9b7f7d609a2d",
          "sha256": "9294897fbc2e3fbb7a61e2381124b93344ffe543fcb9af838af60c9838747aaf"
        },
        "downloads": -1,
        "filename": "ffmpeg_editlist-0.5.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f26e241cb8742aa7adaa9b7f7d609a2d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10386,
        "upload_time": "2022-09-20T12:05:34",
        "upload_time_iso_8601": "2022-09-20T12:05:34.675977Z",
        "url": "https://files.pythonhosted.org/packages/44/c5/4713c56a6b4d3d65c1bd1c6b1a5653fc46c96253cbfd030cc64e5582af1f/ffmpeg_editlist-0.5.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d548248dc8ed7e0b756a5690afc4d255044db587282c67d775495494ec2a78b5",
          "md5": "7f905a82bf83f5ed1abe909d20c5107d",
          "sha256": "db26b53b06d119bb7eb313df9210ebab827ec3df149a28d413bc3da817eeb4d8"
        },
        "downloads": -1,
        "filename": "ffmpeg-editlist-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f905a82bf83f5ed1abe909d20c5107d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9972,
        "upload_time": "2022-09-20T12:05:43",
        "upload_time_iso_8601": "2022-09-20T12:05:43.089781Z",
        "url": "https://files.pythonhosted.org/packages/d5/48/248dc8ed7e0b756a5690afc4d255044db587282c67d775495494ec2a78b5/ffmpeg-editlist-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "44c54713c56a6b4d3d65c1bd1c6b1a5653fc46c96253cbfd030cc64e5582af1f",
        "md5": "f26e241cb8742aa7adaa9b7f7d609a2d",
        "sha256": "9294897fbc2e3fbb7a61e2381124b93344ffe543fcb9af838af60c9838747aaf"
      },
      "downloads": -1,
      "filename": "ffmpeg_editlist-0.5.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f26e241cb8742aa7adaa9b7f7d609a2d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10386,
      "upload_time": "2022-09-20T12:05:34",
      "upload_time_iso_8601": "2022-09-20T12:05:34.675977Z",
      "url": "https://files.pythonhosted.org/packages/44/c5/4713c56a6b4d3d65c1bd1c6b1a5653fc46c96253cbfd030cc64e5582af1f/ffmpeg_editlist-0.5.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d548248dc8ed7e0b756a5690afc4d255044db587282c67d775495494ec2a78b5",
        "md5": "7f905a82bf83f5ed1abe909d20c5107d",
        "sha256": "db26b53b06d119bb7eb313df9210ebab827ec3df149a28d413bc3da817eeb4d8"
      },
      "downloads": -1,
      "filename": "ffmpeg-editlist-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7f905a82bf83f5ed1abe909d20c5107d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9972,
      "upload_time": "2022-09-20T12:05:43",
      "upload_time_iso_8601": "2022-09-20T12:05:43.089781Z",
      "url": "https://files.pythonhosted.org/packages/d5/48/248dc8ed7e0b756a5690afc4d255044db587282c67d775495494ec2a78b5/ffmpeg-editlist-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}