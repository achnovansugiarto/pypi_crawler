{
  "info": {
    "author": "Mahmoud Asem",
    "author_email": "asem00@kaist.ac.kr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\n<div align=\"center\">\n<img width=\"350px\" src=\"assets/serketLogo.svg\"></div>\n\n<h2 align=\"center\">The ‚ú®Magical‚ú® JAX Scientific ML Library.</h2>\n<h5 align = \"center\"> *Serket is the goddess of magic in Egyptian mythology \n\n[**Installation**](#Installation)\n|[**Description**](#Description)\n|[**Quick Example**](#QuickExample)\n|[**Freezing/Fine tuning**](#Freezing)\n|[**Filtering**](#Filtering)\n\n\n![Tests](https://github.com/ASEM000/serket/actions/workflows/tests.yml/badge.svg)\n![pyver](https://img.shields.io/badge/python-3.7%203.8%203.9%203.10-red)\n![codestyle](https://img.shields.io/badge/codestyle-black-lightgrey)\n[![Downloads](https://pepy.tech/badge/serket)](https://pepy.tech/project/serket)\n[![codecov](https://codecov.io/gh/ASEM000/serket/branch/main/graph/badge.svg?token=C6NXOK9EVS)](https://codecov.io/gh/ASEM000/serket)\n[![DOI](https://zenodo.org/badge/526985786.svg)](https://zenodo.org/badge/latestdoi/526985786)\n![PyPI](https://img.shields.io/pypi/v/serket)\n\n</h5>\n\n\n## üõ†Ô∏è Installation<a id=\"Installation\"></a>\n\n```python\npip install serket\n```\n**Install development version**\n```python\npip install git+https://github.com/ASEM000/serket\n```\n\n\n## üìñ Description<a id=\"Description\"></a>\n- `serket` aims to be the most intuitive and easy-to-use physics-based Neural network library in JAX.\n- `serket` is built on top of [`pytreeclass`](https://github.com/ASEM000/pytreeclass)\n- `serket` is fully transparent to `jax` transformation (e.g. `vmap`,`grad`,`jit`,...)\n\n<div align=\"center\">\n\n### ‚ûñ‚ûïFinite difference package: `serket.fd`‚ûï‚ûñ\n\n| Group| Function/Layer|\n| ------------- | ------------- |\n|Finite difference layer| - `Difference`: apply finite difference to input array to any derivative order and accuracy|\n|Finite difference functions| - `difference`: finite difference of array with any accuracy and derivative order  <br> - `generate_finitediff_coeffs` : generate coeffs using sample points and derivative order <br> - `fgrad`: differentiate _functions_ (similar to `jax.grad`) with custom accuracy and derivative order|\n|Vector operator layers|- `Curl`, `Divergence`, `Gradient`, `Laplacian`, `Jacobian`, `Hessian`|\n|Vector operator function| - `curl`, `divergence`, `gradient`, `laplacian`, `jacobian`, `hessian`|\n\n### üß† Neural network package: `serket.nn` üß†\n| Group | Layers |\n| ------------- | ------------- |\n| Linear  | - `Linear`, `Bilinear`, `Multilinear`, `GeneralLinear`, `Identity`  |\n|Densely connected| - `FNN` (Fully connected network), <br> - `PFNN` (Parallel fully connected network)|\n| Convolution | - `Conv1D`, `Conv2D`, `Conv3D`, <br> - `Conv1DTranspose` , `Conv2DTranspose`, `Conv3DTranspose`,<br> - `DepthwiseConv1D`, `DepthwiseConv2D`, `DepthwiseConv3D`,  <br> - `SeparableConv1D`, `SeparableConv2D`, `SeparableConv3D`, <br> - `Conv1DLocal`, `Conv2DLocal`, `Conv3DLocal` <br> - `FFTConv1D`, `FFTConv2D`, `FFTConv3D`, <br> - `FFTConv1DTranspose` , `FFTConv2DTranspose`, `FFTConv3DTranspose`,<br> - `DepthwiseFFTConv1D`, `DepthwiseFFTConv2D`, `DepthwiseFFTConv3D`,  <br> - `SeparableFFTConv1D`, `SeparableFFTConv2D`, `SeparableFFTConv3D`|\n| Containers| - `Sequential`, `Lambda` |\n|Pooling <br> (`kernex` backend)|- `MaxPool1D`, `MaxPool2D`, `MaxPool3D`, <br> - `AvgPool1D`, `AvgPool2D`, `AvgPool3D` <br> - `GlobalMaxPool1D`, `GlobalMaxPool2D`, `GlobalMaxPool3D`, <br> - `GlobalAvgPool1D`, `GlobalAvgPool2D`, `GlobalAvgPool3D` <br> - `LPPool1D`, `LPPool2D`,`LPPool3D` , <br> - `AdaptiveAvgPool1D`, `AdaptiveAvgPool2D`, `AdaptiveAvgPool3D`,<br> - `AdaptiveMaxPool1D`, `AdaptiveMaxPool2D`, `AdaptiveMaxPool3D` <br> - `AdaptiveConcatPool1D`,`AdaptiveConcatPool2D`,`AdaptiveConcatPool3D` |\n|Reshaping|- `Flatten`, `Unflatten`, <br> - `FlipLeftRight2D`, `FlipUpDown2D`, <br> - `Repeat1D`, `Repeat2D`, `Repeat3D`, <br> - `Resize1D`, `Resize2D`, `Resize3D`, <br> - `Upsample1D`, `Upsample2D`, `Upsample3D`,<br> - `Pad1D`, `Pad2D`, `Pad3D` |\n|Crop| - `Crop1D`, `Crop2D`, |\n|Normalization|- `LayerNorm`, `InstanceNorm`, `GroupNorm`|\n|Blurring| - `AvgBlur2D`, `GaussianBlur2D`|\n|Dropout|- `Dropout`, ,<br> - `Dropout1D`, `Dropout2D`, `Dropout3D`, |\n|Random transforms| - `RandomCrop1D`, `RandomCrop2D`, <br> - `RandomApply`, <br> - `RandomCutout1D`, `RandomCutout2D`,<br> - `RandomZoom2D`, <br> - `RandomContrast2D` |\n|Misc| - `HistogramEqualization2D`, `AdjustContrast2D`, `Filter2D`, `PixelShuffle2D`|\n|Activations|- `AdaptiveLeakyReLU`,`AdaptiveReLU`,`AdaptiveSigmoid`,`AdaptiveTanh`,<br> - `CeLU`,`ELU`,`GELU`,`GLU`<br>- `HardSILU`,`HardShrink`,`HardSigmoid`,`HardSwish`,`HardTanh`,<br> - `LeakyReLU`,`LogSigmoid`,`LogSoftmax`,`Mish`,`PReLU`,<br> - `ReLU`,`ReLU6`,`SILU`,`SeLU`,`Sigmoid`,`SoftPlus`,`SoftShrink`,<br> - `SoftSign`,`Swish`,`Tanh`,`TanhShrink`, `ThresholdedReLU`, `Snake`|\n|Recurrent cells| - `SimpleRNNCell`, `LSTMCell`, `GRUCell`, <br> - `ConvLSTM1D`, `ConvLSTM2D`, `ConvLSTM3D`, <br> - `SeparableConvLSTM1DCell`, `SeparableConvLSTM2DCell`, `SeparableConvLSTM3DCell`   <br> - `ConvGRU1DCell`,`ConvGRU2DCell`,`ConvGRU3DCell`,<br> - `SeparableConvGRU1DCell`,`SeparableConvGRU2DCell`,`SeparableConvGRU3DCell` <br> - `FFTConvLSTM1D`, `FFTConvLSTM2D`, `FFTConvLSTM3D`, <br> - `SeparableFFTConvLSTM1DCell`, `SeparableFFTConvLSTM2DCell`, `SeparableFFTConvLSTM3DCell`   <br> - `FFTConvGRU1DCell`,`FFTConvGRU2DCell`,`FFTConvGRU3DCell`,<br> - `SeparableFFTConvGRU1DCell`,`SeparableFFTConvGRU2DCell`,`SeparableFFTConvGRU3DCell`|\n|Blocks|- `VGG16Block`, `VGG19Block`, `UNetBlock`|\n\n\n\n\n</div>\n\n## ‚è© Examples: <a id=\"QuickExample\">\n\n\n<details>\n<summary> Linear layers examples</summary>\n\n```python\nimport jax.numpy as jnp\n\nimport serket as sk\n\n# Linear\nx = jnp.ones([1, 2, 3, 4])\nl1 = sk.nn.Linear(4, 5)  # last dim is 4, output dim is 5\nprint(l1(x).shape)  # (1, 2, 3, 5)\n\n# Bilinear\nx1, x2 = jnp.ones([1, 2, 3, 4]), jnp.ones([1, 2, 3, 5])\nl2 = sk.nn.Bilinear(4, 5, 6)  # last dim is 4,5, output dim is 6\nprint(l2(x1, x2).shape)  # (1, 2, 3, 6)\n\n# Multilinear\nx1, x2, x3 = jnp.ones([1, 2, 3, 4]), jnp.ones([1, 2, 3, 5]), jnp.ones([1, 2, 3, 6])\nl3 = sk.nn.Multilinear((4, 5, 6), 7)  # last dim is 4,5,6, output dim is 7\nprint(l3(x1, x2, x3).shape)  # (1, 2, 3, 7)\n\n# GeneralLinear\nx = jnp.ones([4, 5, 6, 7])\n# apply a linear layer to axis 1,2,3, and output dim is 5\n# in_features = (4, 5, 6)\nl4 = sk.nn.GeneralLinear((5, 6, 7), 5, in_axes=(1, 2, 3))\nprint(l4(x).shape)  # (4, 5)\n```\n</details>\n\n<details>\n\n<summary> Finite difference examples </summary>\n\n```python\nimport jax\n\njax.config.update(\"jax_enable_x64\", True)\nimport jax.numpy as jnp\nimport numpy.testing as npt\n\nimport serket as sk\n\n\n# lets first define a vector valued function F: R^3 -> R^3\n# F = F1, F2\n# F1 = x^2 + y^3\n# F2 = x^4 + y^3\n# F3 = 0\n# F = [x**2 + y**3, x**4 + y**3, 0]\n\nx, y, z = [jnp.linspace(0, 1, 100)] * 3\ndx, dy, dz = x[1] - x[0], y[1] - y[0], z[1] - z[0]\nX, Y, Z = jnp.meshgrid(x, y, z, indexing=\"ij\")\nF1 = X**2 + Y**3\nF2 = X**4 + Y**3\nF3 = jnp.zeros_like(F1)\nF = jnp.stack([F1, F2, F3], axis=0)\n\n# ‚àÇF1/‚àÇx : differentiate F1 with respect to x (i.e axis=0)\ndF1dx = sk.fd.difference(F1, axis=0, step_size=dx, accuracy=6)\ndF1dx_exact = 2 * X\nnpt.assert_allclose(dF1dx, dF1dx_exact, atol=1e-7)\n\n# ‚àÇF2/‚àÇy : differentiate F2 with respect to y (i.e axis=1)\ndF2dy = sk.fd.difference(F2, axis=1, step_size=dy, accuracy=6)\ndF2dy_exact = 3 * Y**2\nnpt.assert_allclose(dF2dy, dF2dy_exact, atol=1e-7)\n\n# ‚àá.F : the divergence of F\ndivF = sk.fd.divergence(F, step_size=(dx, dy, dz), keepdims=False, accuracy=6)\ndivF_exact = 2 * X + 3 * Y**2\nnpt.assert_allclose(divF, divF_exact, atol=1e-7)\n\n# ‚àáF1 : the gradient of F1\ngradF1 = sk.fd.gradient(F1, step_size=(dx, dy, dz), accuracy=6)\ngradF1_exact = jnp.stack([2 * X, 3 * Y**2, 0 * X], axis=0)\nnpt.assert_allclose(gradF1, gradF1_exact, atol=1e-7)\n\n# ŒîF1 : laplacian of F1\nlapF1 = sk.fd.laplacian(F1, step_size=(dx, dy, dz), accuracy=6)\nlapF1_exact = 2 + 6 * Y\nnpt.assert_allclose(lapF1, lapF1_exact, atol=1e-7)\n\n# ‚àáxF : the curl of F\ncurlF = sk.fd.curl(F, step_size=(dx, dy, dz), accuracy=6)\ncurlF_exact = jnp.stack([F1 * 0, F1 * 0, 4 * X**3 - 3 * Y**2], axis=0)\nnpt.assert_allclose(curlF, curlF_exact, atol=1e-7)\n\n# Jacobian of F\nJF = sk.fd.jacobian(F, accuracy=4, step_size=(dx, dy, dz))\nJF_exact = jnp.array(\n    [\n        [2 * X, 3 * Y**2, jnp.zeros_like(X)],\n        [4 * X**3, 3 * Y**2, jnp.zeros_like(X)],\n        [jnp.zeros_like(X), jnp.zeros_like(X), jnp.zeros_like(X)],\n    ]\n)\nnpt.assert_allclose(JF, JF_exact, atol=1e-7)\n\n# Hessian of F1\nHF1 = sk.fd.hessian(F1, accuracy=4, step_size=(dx, dy, dz))\nHF1_exact = jnp.array(\n    [\n        [\n            2 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇx2\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇxy\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇxz\n        ],\n        [\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇyx\n            6 * Y**2,              # ‚àÇ2F1/‚àÇy2\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇyz\n        ],\n        [\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇzx\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇzy\n            0 * jnp.ones_like(X),  # ‚àÇ2F1/‚àÇz2\n        ],\n    ]\n)\nnpt.assert_allclose(JF, JF_exact, atol=1e-7)\n\n```\n\n</details>\n\n\n<details>\n<summary>\nTrain Bidirectional-LSTM\n</summary>\n\n```python\nimport jax\nimport jax.numpy as jnp\nimport jax.random as jr\nimport matplotlib.pyplot as plt\nimport optax  # for gradient optimization\n\nimport serket as sk\n\nx = jnp.linspace(0, 1, 101).reshape(-1, 1)  # 101 samples of 1D data\ny = jnp.sin(2 * jnp.pi * x)\ny += 0.1 * jr.normal(jr.PRNGKey(0), y.shape)\n\n# we will use 2 time steps to predict the next time step\nx_batched = jnp.stack([x[:-1], x[1:]], axis=1)\nx_batched = jnp.reshape(x_batched, (100, 1, 2, 1))  # 100 minibatches x 1 sample x 2 time steps x 1D data\ny_batched = jnp.reshape(y[1:], (100, 1, 1))  # 100 minibatches x 1 samples x 1D data\n\nmodel = sk.nn.Sequential(\n    [\n        # first cell is the forward cell, second cell is the backward cell for bidirectional RNN\n        # we return the full sequence of outputs for each cell by setting return_sequences=True\n        # we use None in place of `in_features` to infer the input shape from the input\n        sk.nn.ScanRNN(\n            sk.nn.LSTMCell(None, 64),\n            backward_cell=sk.nn.LSTMCell(None, 64),\n            return_sequences=True,\n        ),\n        # here the in_features is inferred from the previous layer by setting it to None\n        # or simply we can set it to 64*2 (64 for each cell from previous layer)\n        # we set return_sequences=False to return only the last output of the sequence\n        sk.nn.ScanRNN(sk.nn.LSTMCell(None, 1), return_sequences=False),\n    ]\n)\n\n\n@jax.value_and_grad\ndef loss_func(NN, batched_x, batched_y):\n    # use jax.vmap to apply the model to each minibatch\n    # in our case single x minibatch has shape (1, 2, 1)\n    # and single y minibatch has shape (1, 1)\n    # then vmap will be applied to the leading axis\n    batched_preds = jax.vmap(NN)(batched_x)\n    return jnp.mean((batched_preds - batched_y) ** 2)\n\n\n@jax.jit\ndef batch_step(NN, batched_x, batched_y, opt_state):\n    loss, grads = loss_func(NN, batched_x, batched_y)\n    updates, optim_state = optim.update(grads, opt_state)\n    NN = optax.apply_updates(NN, updates)\n    return NN, optim_state, loss\n\n\n# dry run to infer the in_features (i.e. replace None with in_features)\n# if you want restrict the model to a specific input shape or to avoid\n# confusion you can manually specify the in_features as a consequence\n# dry run is not necessary in this case\nmodel(x_batched[0, 0])\n\noptim = optax.adam(1e-3)\nopt_state = optim.init(model)\n\nepochs = 100\n\nfor i in range(1, epochs + 1):\n    epoch_loss = []\n    for x_b, y_b in zip(x_batched, y_batched):\n        model, opt_state, loss = batch_step(model, x_b, y_b, opt_state)\n        epoch_loss.append(loss)\n\n    epoch_loss = jnp.mean(jnp.array(epoch_loss))\n\n    if i % 10 == 0:\n        print(f\"Epoch {i:3d} Loss {epoch_loss:.4f}\")\n\n# Epoch  10 Loss 0.0880\n# Epoch  20 Loss 0.0796\n# Epoch  30 Loss 0.0620\n# Epoch  40 Loss 0.0285\n# Epoch  50 Loss 0.0205\n# Epoch  60 Loss 0.0187\n# Epoch  70 Loss 0.0182\n# Epoch  80 Loss 0.0176\n# Epoch  90 Loss 0.0171\n# Epoch 100 Loss 0.0166\n\ny_pred = jax.vmap(model)(x_batched.reshape(-1, 2, 1))\nplt.plot(x[1:], y[1:], \"--k\", label=\"data\")\nplt.plot(x[1:], y_pred, label=\"prediction\")\nplt.legend()\n```\n\n![image](assets/rnn.svg)\n\n</details>\n\n\n<details>\n\n<summary>Lazy initialization</summary>\n\nIn cases where `in_features` needs to be inferred from input, use `None` instead of `in_features` to infer the value at runtime. \nHowever, since the lazy module initialize it's state after the first call (i.e. mutate it's state)  `jax` transformation ex: `vmap, grad ...` is not allowed before initialization. Using any `jax` transformation before initialization will throw a `ValueError`.\n\n\n```python\nimport serket as sk \nimport jax\nimport jax.numpy as jnp \n\nmodel = sk.nn.Sequential(\n    [\n        sk.nn.Conv2D(None, 128, 3),\n        sk.nn.ReLU(),\n        sk.nn.MaxPool2D(2, 2),\n        sk.nn.Conv2D(128, 64, 3),\n        sk.nn.ReLU(),\n        sk.nn.MaxPool2D(2, 2),\n        sk.nn.Flatten(),\n        sk.nn.Linear(None, 128),\n        sk.nn.ReLU(),\n        sk.nn.Linear(128, 1),\n    ]\n)\n\n# print the first `Conv2D` layer before initialization\nprint(model[0].__repr__())\n# Conv2D(\n#   weight=None,\n#   bias=None,\n#   *in_features=None,\n#   *out_features=None,\n#   *kernel_size=None,\n#   *strides=None,\n#   *padding=None,\n#   *input_dilation=None,\n#   *kernel_dilation=None,\n#   weight_init_func=None,\n#   bias_init_func=None,\n#   *groups=None\n# )\n\ntry :\n    jax.vmap(model)(jnp.ones((10, 1,28, 28)))\nexcept ValueError:\n    print(\"***** Not initialized *****\")\n# ***** Not initialized *****\n\n# dry run to initialize the model\nmodel(jnp.empty([3,128,128]))\n\nprint(model[0].__repr__())\n# Conv2D(\n#   weight=f32[128,3,3,3],\n#   bias=f32[128,1,1],\n#   *in_features=3,\n#   *out_features=128,\n#   *kernel_size=(3,3),\n#   *strides=(1,1),\n#   *padding=((1,1),(1,1)),\n#   *input_dilation=(1,1),\n#   *kernel_dilation=(1,1),\n#   weight_init_func=Partial(glorot_uniform(key,shape,dtype)),\n#   bias_init_func=Partial(zeros(key,shape,dtype)),\n#   *groups=1\n# )\n```\n\n</details>\n\n\n<details>\n\n<summary>Train MNIST</summary>\n\nWe will use `tensorflow` datasets for dataloading. for more on interface of jax/tensorflow dataset see [here](https://jax.readthedocs.io/en/latest/notebooks/neural_network_with_tfds_data.html)\n\n```python\n# imports\nimport tensorflow as tf\n# Ensure TF does not see GPU and grab all GPU memory.\ntf.config.set_visible_devices([], device_type=\"GPU\")\nimport tensorflow_datasets as tfds\nimport tensorflow.experimental.numpy as tnp\nimport jax\nimport jax.numpy as jnp\nimport jax.random as jr \nimport optax  # for gradient optimization\nimport serket as sk\nimport matplotlib.pyplot as plt\nimport functools as ft\n```\n\n```python\n# Construct a tf.data.Dataset\nbatch_size = 128\n\n# convert the samples from integers to floating-point numbers\n# and channel first format\ndef preprocess_data(x):\n    # convert to channel first format\n    image = tnp.moveaxis(x[\"image\"], -1, 0)\n    # normalize to [0, 1]\n    image = tf.cast(image, tf.float32) / 255.0\n\n    # one-hot encode the labels\n    label = tf.one_hot(x[\"label\"], 10) / 1.0\n    return {\"image\": image, \"label\": label}\n\n\nds_train, ds_test = tfds.load(\"mnist\", split=[\"train\", \"test\"], shuffle_files=True)\n# (batches, batch_size, 1, 28, 28)\nds_train = ds_train.shuffle(1024).map(preprocess_data).batch(batch_size).prefetch(tf.data.AUTOTUNE)\n\n# (batches, 1, 28, 28)\nds_test = ds_test.map(preprocess_data).prefetch(tf.data.AUTOTUNE)\n```\n\n### üèóÔ∏è Model definition\n\nWe will use `jax.vmap(model)` to apply `model` on batches.\n    \n```python\n@sk.treeclass\nclass CNN:\n    def __init__(self):\n        self.conv1 = sk.nn.Conv2D(1, 32, (3, 3), padding=\"valid\")\n        self.relu1 = sk.nn.ReLU()\n        self.pool1 = sk.nn.MaxPool2D((2, 2), strides=(2, 2))\n        self.conv2 = sk.nn.Conv2D(32, 64, (3, 3), padding=\"valid\")\n        self.relu2 = sk.nn.ReLU()\n        self.pool2 = sk.nn.MaxPool2D((2, 2), strides=(2, 2))\n        self.flatten = sk.nn.Flatten(start_dim=0)\n        self.dropout = sk.nn.Dropout(0.5)\n        self.linear = sk.nn.Linear(5*5*64, 10)\n\n    def __call__(self, x):\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.pool1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.pool2(x)\n        x = self.flatten(x)\n        x = self.dropout(x)\n        x = self.linear(x)\n        return x\n\nmodel = CNN()\n```\n\n### üé® Visualize model\n    \n<details><summary>Model summary</summary>\n    \n```python\nprint(model.summary(show_config=False, array=jnp.empty((1, 28, 28))))  \n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇName   ‚îÇType     ‚îÇParam #  ‚îÇSize          ‚îÇInput        ‚îÇOutput       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇconv1  ‚îÇConv2D   ‚îÇ320(0)   ‚îÇ1.25KB(0.00B) ‚îÇf32[1,28,28] ‚îÇf32[32,26,26]‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇrelu1  ‚îÇReLU     ‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[32,26,26]‚îÇf32[32,26,26]‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇpool1  ‚îÇMaxPool2D‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[32,26,26]‚îÇf32[32,13,13]‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇconv2  ‚îÇConv2D   ‚îÇ18,496(0)‚îÇ72.25KB(0.00B)‚îÇf32[32,13,13]‚îÇf32[64,11,11]‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇrelu2  ‚îÇReLU     ‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[64,11,11]‚îÇf32[64,11,11]‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇpool2  ‚îÇMaxPool2D‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[64,11,11]‚îÇf32[64,5,5]  ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇflatten‚îÇFlatten  ‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[64,5,5]  ‚îÇf32[1600]    ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇdropout‚îÇDropout  ‚îÇ0(0)     ‚îÇ0.00B(0.00B)  ‚îÇf32[1600]    ‚îÇf32[1600]    ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇlinear ‚îÇLinear   ‚îÇ16,010(0)‚îÇ62.54KB(0.00B)‚îÇf32[1600]    ‚îÇf32[10]      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\nTotal count :\t34,826(0)\nDynamic count :\t34,826(0)\nFrozen count :\t0(0)\n------------------------------------------------------------------------\nTotal size :\t136.04KB(0.00B)\nDynamic size :\t136.04KB(0.00B)\nFrozen size :\t0.00B(0.00B)\n========================================================================\n```\n        \n</details>\n\n<details><summary>tree diagram </summary>\n    \n```python\nprint(model.tree_diagram())\nCNN\n    ‚îú‚îÄ‚îÄ conv1=Conv2D\n    ‚îÇ   ‚îú‚îÄ‚îÄ weight=f32[32,1,3,3]\n    ‚îÇ   ‚îú‚îÄ‚îÄ bias=f32[32,1,1]\n    ‚îÇ   ‚îú*‚îÄ in_features=1\n    ‚îÇ   ‚îú*‚îÄ out_features=32\n    ‚îÇ   ‚îú*‚îÄ kernel_size=(3, 3)\n    ‚îÇ   ‚îú*‚îÄ strides=(1, 1)\n    ‚îÇ   ‚îú*‚îÄ padding=((0, 0), (0, 0))\n    ‚îÇ   ‚îú*‚îÄ input_dilation=(1, 1)\n    ‚îÇ   ‚îú*‚îÄ kernel_dilation=(1, 1)\n    ‚îÇ   ‚îú‚îÄ‚îÄ weight_init_func=Partial(init(key,shape,dtype))\n    ‚îÇ   ‚îú‚îÄ‚îÄ bias_init_func=Partial(zeros(key,shape,dtype))\n    ‚îÇ   ‚îî*‚îÄ groups=1    \n    ‚îú‚îÄ‚îÄ relu1=ReLU  \n    ‚îú*‚îÄ pool1=MaxPool2D\n    ‚îÇ   ‚îú*‚îÄ kernel_size=(2, 2)\n    ‚îÇ   ‚îú*‚îÄ strides=(2, 2)\n    ‚îÇ   ‚îî*‚îÄ padding='valid' \n    ‚îú‚îÄ‚îÄ conv2=Conv2D\n    ‚îÇ   ‚îú‚îÄ‚îÄ weight=f32[64,32,3,3]\n    ‚îÇ   ‚îú‚îÄ‚îÄ bias=f32[64,1,1]\n    ‚îÇ   ‚îú*‚îÄ in_features=32\n    ‚îÇ   ‚îú*‚îÄ out_features=64\n    ‚îÇ   ‚îú*‚îÄ kernel_size=(3, 3)\n    ‚îÇ   ‚îú*‚îÄ strides=(1, 1)\n    ‚îÇ   ‚îú*‚îÄ padding=((0, 0), (0, 0))\n    ‚îÇ   ‚îú*‚îÄ input_dilation=(1, 1)\n    ‚îÇ   ‚îú*‚îÄ kernel_dilation=(1, 1)\n    ‚îÇ   ‚îú‚îÄ‚îÄ weight_init_func=Partial(init(key,shape,dtype))\n    ‚îÇ   ‚îú‚îÄ‚îÄ bias_init_func=Partial(zeros(key,shape,dtype))\n    ‚îÇ   ‚îî*‚îÄ groups=1    \n    ‚îú‚îÄ‚îÄ relu2=ReLU  \n    ‚îú*‚îÄ pool2=MaxPool2D\n    ‚îÇ   ‚îú*‚îÄ kernel_size=(2, 2)\n    ‚îÇ   ‚îú*‚îÄ strides=(2, 2)\n    ‚îÇ   ‚îî*‚îÄ padding='valid' \n    ‚îú*‚îÄ flatten=Flatten\n    ‚îÇ   ‚îú*‚îÄ start_dim=0\n    ‚îÇ   ‚îî*‚îÄ end_dim=-1  \n    ‚îú‚îÄ‚îÄ dropout=Dropout\n    ‚îÇ   ‚îú*‚îÄ p=0.5\n    ‚îÇ   ‚îî‚îÄ‚îÄ eval=None   \n    ‚îî‚îÄ‚îÄ linear=Linear\n        ‚îú‚îÄ‚îÄ weight=f32[1600,10]\n        ‚îú‚îÄ‚îÄ bias=f32[10]\n        ‚îú*‚îÄ in_features=1600\n        ‚îî*‚îÄ out_features=10  \n    \n ```\n    \n</details>\n    \n<details><summary>Plot sample predictions before training</summary>\n    \n```python\n \n# set all dropout off\ntest_model = model.at[model == \"eval\"].set(True, is_leaf=lambda x: x is None)\n\ndef show_images_with_predictions(model, images, one_hot_labels):\n    logits = jax.vmap(model)(images)\n    predictions = jnp.argmax(logits, axis=-1)\n    fig, axes = plt.subplots(5, 5, figsize=(10, 10))\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(images[i].reshape(28, 28), cmap=\"binary\")\n        ax.set(title=f\"Prediction: {predictions[i]}\\nLabel: {jnp.argmax(one_hot_labels[i], axis=-1)}\")\n        ax.set_xticks([])\n        ax.set_yticks([])\n    plt.show()\n\nexample = ds_test.take(25).as_numpy_iterator()\nexample = list(example)\nsample_test_images = jnp.stack([x[\"image\"] for x in example])\nsample_test_labels = jnp.stack([x[\"label\"] for x in example])\n\nshow_images_with_predictions(test_model, sample_test_images, sample_test_labels)\n```\n![image](assets/before_training.svg)\n \n</details>\n    \n### üèÉ Train the model\n\n```python\n@ft.partial(jax.value_and_grad, has_aux=True)\ndef loss_func(model, batched_images, batched_one_hot_labels):\n    logits = jax.vmap(model)(batched_images)\n    loss = jnp.mean(optax.softmax_cross_entropy(logits=logits, labels=batched_one_hot_labels))\n    return loss, logits\n\n\n# using optax for gradient updates\noptim = optax.adam(1e-3)\noptim_state = optim.init(model)\n\n\n@jax.jit\ndef batch_step(model, batched_images, batched_one_hot_labels, optim_state):\n    (loss, logits), grads = loss_func(model, batched_images, batched_one_hot_labels)\n    updates, optim_state = optim.update(grads, optim_state)\n    model = optax.apply_updates(model, updates)\n    accuracy = jnp.mean(jnp.argmax(logits, axis=-1) == jnp.argmax(batched_one_hot_labels, axis=-1))\n    return model, optim_state, loss, accuracy\n\n\nepochs = 5\n\nfor i in range(epochs):\n    epoch_accuracy = []\n    epoch_loss = []\n\n    for example in ds_train.as_numpy_iterator():\n        image, label = example[\"image\"], example[\"label\"]\n        model, optim_state, loss, accuracy = batch_step(model, image, label, optim_state)\n        epoch_accuracy.append(accuracy)\n        epoch_loss.append(loss)\n\n    epoch_loss = jnp.mean(jnp.array(epoch_loss))\n    epoch_accuracy = jnp.mean(jnp.array(epoch_accuracy))\n\n    print(f\"epoch:{i+1:00d}\\tloss:{epoch_loss:.4f}\\taccuracy:{epoch_accuracy:.4f}\")\n    \n# epoch:1\tloss:0.2706\taccuracy:0.9268\n# epoch:2\tloss:0.0725\taccuracy:0.9784\n# epoch:3\tloss:0.0533\taccuracy:0.9836\n# epoch:4\tloss:0.0442\taccuracy:0.9868\n# epoch:5\tloss:0.0368\taccuracy:0.9889\n```\n    \n    \n### üé® Visualize After training\n\n```python\ntest_model = model.at[model == \"eval\"].set(True, is_leaf=lambda x: x is None)\nshow_images_with_predictions(test_model, sample_test_images, sample_test_labels)\n```\n\n<details> \n    \n![image](assets/after_training.svg)\n\n</details>\n\n</details>\n\n\n<details> \n<summary> \nPINN with Finite difference\n</summary>\n\nWe will try to estimate NN(x)~f(x), where df(x)/dx = cos(x) and df(x)/dx will be represented with finite difference scheme\n\n```python\nimport copy\n\nimport jax\nimport jax.numpy as jnp\nimport matplotlib.pyplot as plt\nimport optax\n\nimport serket as sk\n\nx = jnp.linspace(-jnp.pi, jnp.pi, 1000)[:, None]\ny = jnp.sin(x)\ndx = x[1] - x[0]\ndydx = jnp.cos(x)\n\nNN_fd = sk.nn.Sequential(\n    [\n        sk.nn.Linear(1, 128),\n        sk.nn.ReLU(),\n        sk.nn.Linear(128, 128),\n        sk.nn.ReLU(),\n        sk.nn.Linear(128, 1),\n    ]\n)\n\nNN_ad = copy.copy(NN_fd)\noptim = optax.adam(1e-3)\n\n\n@jax.value_and_grad\ndef loss_func_fd(NN, x):\n    y = NN(x)\n    dydx = sk.fd.difference(y, axis=0, accuracy=5, step_size=dx)\n    loss = jnp.mean((dydx - jnp.cos(x)) ** 2)\n    loss += jnp.mean((NN(jnp.zeros_like(x))) ** 2)  # initial condition\n    return loss\n\n\n@jax.value_and_grad\ndef loss_func_ad(NN, x):\n    loss = jnp.mean((sk.diff(NN)(x) - jnp.cos(x)) ** 2)\n    loss += jnp.mean(NN(jnp.zeros_like(x)) ** 2)  # initial condition\n    return loss\n\n\n@jax.jit\ndef step_fd(NN, x, optim_state):\n    loss, grads = loss_func_fd(NN, x)\n    updates, optim_state = optim.update(grads, optim_state)\n    NN = optax.apply_updates(NN, updates)\n    return NN, optim_state, loss\n\n\ndef train_fd(NN_fd, optim_state_fd, epochs):\n    for i in range(1, epochs + 1):\n        NN_fd, optim_state_fd, loss_fd = step_fd(NN_fd, x, optim_state_fd)\n    return NN_fd, optim_state_fd, loss_fd\n\n\n@jax.jit\ndef step_ad(NN, x, optim_state):\n    loss, grads = loss_func_ad(NN, x)\n    updates, optim_state = optim.update(grads, optim_state)\n    NN = optax.apply_updates(NN, updates)\n    return NN, optim_state, loss\n\n\ndef train_ad(NN_ad, optim_state_ad, epochs):\n    for i in range(1, epochs + 1):\n        NN_ad, optim_state_ad, loss_ad = step_ad(NN_ad, x, optim_state_ad)\n    return NN_ad, optim_state_ad, loss_ad\n\n\nepochs = 1000\n\n\noptim_state_fd = optim.init(NN_fd)\noptim_state_ad = optim.init(NN_ad)\n\n\nNN_fd, optim_state_fd, loss_fd = train_fd(NN_fd, optim_state_fd, epochs)\nNN_ad, optim_state_ad, loss_ad = train_ad(NN_ad, optim_state_ad, epochs)\nprint(f\"Loss_fd {loss_fd:.4f} \\nLoss_ad {loss_ad:.4f}\")\ny_fd = NN_fd(x)\ny_ad = NN_ad(x)\nplt.plot(x, y, \"--k\", label=\"true\")\nplt.plot(x, y_fd, label=\"fd pred\")\nplt.plot(x, y_ad, label=\"ad pred\")\nplt.legend()\n\n# Loss_fd 0.0012 \n# Loss_ad 0.0235\n```\n![image](assets/fd_vs_ad.png)\n\n\n</details>\n\n\n<details>\n<summary> \nReconstructing a vector field F using ‚àá.F = 0 and ‚àáxF=2k condition\n</summary>\n\n```python\nimport jax\nimport jax.numpy as jnp\nimport matplotlib.pyplot as plt\nimport optax\n\nimport serket as sk\n\nx, y = [jnp.linspace(-1, 1,50)] * 2\ndx, dy = [x[1] - x[0]] * 2\nX, Y = jnp.meshgrid(x, y, indexing=\"ij\")\n\nF1 = -Y\nF2 = +X\nF = jnp.stack([F1, F2], axis=0)\n\nNN = sk.nn.Sequential(\n    [\n        sk.nn.Conv2D(2, 32, kernel_size=3, padding=\"same\"),\n        sk.nn.ReLU(),\n        sk.nn.Conv2D(32, 32, kernel_size=3, padding=\"same\"),\n        sk.nn.ReLU(),\n        sk.nn.Conv2D(32, 2, kernel_size=3, padding=\"same\"),\n    ]\n)\n\noptim = optax.adam(1e-3)\n\n\n@jax.value_and_grad\ndef loss_func(NN, F):\n    F_pred = NN(F)\n    div = sk.fd.divergence(F_pred, accuracy=5, step_size=(dx, dy))  \n    loss = jnp.mean(div**2)  # divergence free condition\n    curl = sk.fd.curl(F_pred, accuracy=2, step_size=(dx, dy))\n    loss += jnp.mean((curl-jnp.ones_like(curl)*2)**2)  # curl condition \n    return loss\n\n\n@jax.jit\ndef step(NN, F, optim_state):\n    loss, grads = loss_func(NN, F)\n    updates, optim_state = optim.update(grads, optim_state)\n    NN = optax.apply_updates(NN, updates)\n    return NN, optim_state, loss\n\n\ndef train(NN, Z, optim_state, epochs):\n    for i in range(1, epochs + 1):\n        NN, optim_state, loss = step(NN, Z, optim_state)\n    return NN, optim_state, loss\n\n\nZ = jnp.stack([X, Y], axis=0)  # collocation points\noptim_state = optim.init(NN)  # initialise optimiser\nepochs = 1_000\nNN, _, loss = train(NN, Z, optim_state, epochs)\n\nFpred = NN(Z)  # predicted field\n\nplt.figure(figsize=(10, 10))\nplt.quiver(X, Y, Fpred[0], Fpred[1], color=\"r\", label=\"pred\")\nplt.quiver(X, Y, F1, F2, color=\"k\", alpha=0.5, label=\"true\")\nplt.legend()\n\n```\n\n![image](assets/nn_div_free.svg)\n\n\n</details>\n\n## ü•∂ Freezing parameters /Fine tuning<a id=\"Freezing\" >\n\n‚ú®[See here for more about freezing](https://github.com/ASEM000/PyTreeClass#%EF%B8%8F-model-surgery)‚ú®\n\n## üîò Filtering by masking<a id=\"Filtering\" >\n‚ú®[See here for more about filterning ](https://github.com/ASEM000/PyTreeClass#%EF%B8%8F-filtering-with-at-)‚ú®\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ASEM000/serket",
    "keywords": "python machine-learning pytorch jax",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serket",
    "package_url": "https://pypi.org/project/serket/",
    "platform": null,
    "project_url": "https://pypi.org/project/serket/",
    "project_urls": {
      "Homepage": "https://github.com/ASEM000/serket"
    },
    "release_url": "https://pypi.org/project/serket/0.0.11/",
    "requires_dist": [
      "jax (>=0.3.5)",
      "pytreeclass (>=0.1.13)",
      "kernex (>=0.0.7)"
    ],
    "requires_python": ">=3.7",
    "summary": "JAX NN library.",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15586078,
  "releases": {
    "0.0.0rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "896f629ff8e2d32658d5ff7402d96603a2b2dfbf7bcf9bc2ca3905326e8c92f9",
          "md5": "e789c7104cc749db0bacd4579cc88fb1",
          "sha256": "ab8859296a07ed25b4281071d8d1fb0eeb3860f67242c7f1a7abe3d55517f1c1"
        },
        "downloads": -1,
        "filename": "serket-0.0.0rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e789c7104cc749db0bacd4579cc88fb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6721,
        "upload_time": "2022-08-21T06:35:37",
        "upload_time_iso_8601": "2022-08-21T06:35:37.610846Z",
        "url": "https://files.pythonhosted.org/packages/89/6f/629ff8e2d32658d5ff7402d96603a2b2dfbf7bcf9bc2ca3905326e8c92f9/serket-0.0.0rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ec2ce68d17368db8bb48080e89fe02821d9415be5e3af80cab2d3a247c97652",
          "md5": "d5e458729d3d9d90cf174ca5d7dd2620",
          "sha256": "0aa2a09aa247626e00b7a9f44684d774c50061bcd7f3a4c00b87faa8d24628a8"
        },
        "downloads": -1,
        "filename": "serket-0.0.0rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5e458729d3d9d90cf174ca5d7dd2620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5398,
        "upload_time": "2022-08-21T06:35:39",
        "upload_time_iso_8601": "2022-08-21T06:35:39.498618Z",
        "url": "https://files.pythonhosted.org/packages/2e/c2/ce68d17368db8bb48080e89fe02821d9415be5e3af80cab2d3a247c97652/serket-0.0.0rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d6661cfba4fb5ac97c397d7a7768035e58cd0968cb5dab61419ad8416fb14d4",
          "md5": "9af208a121b5e8543e68013377d18e55",
          "sha256": "a9931f3278e2764af4178915f8b9eb256f8991339b286460b9aef0d307b83e4e"
        },
        "downloads": -1,
        "filename": "serket-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9af208a121b5e8543e68013377d18e55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7552,
        "upload_time": "2022-08-22T07:25:43",
        "upload_time_iso_8601": "2022-08-22T07:25:43.433932Z",
        "url": "https://files.pythonhosted.org/packages/5d/66/61cfba4fb5ac97c397d7a7768035e58cd0968cb5dab61419ad8416fb14d4/serket-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d06b76dc0b3e76bdbaa8dde89e4d5932232a4250d44a9844971e896bd3b821d9",
          "md5": "feb0e39cf37982702ebecaef337b27be",
          "sha256": "9a3c99e99deb2a954b46a4e17fe3adda00bdc5d5ef444786a917e677f79c1948"
        },
        "downloads": -1,
        "filename": "serket-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "feb0e39cf37982702ebecaef337b27be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6729,
        "upload_time": "2022-08-22T07:25:45",
        "upload_time_iso_8601": "2022-08-22T07:25:45.276694Z",
        "url": "https://files.pythonhosted.org/packages/d0/6b/76dc0b3e76bdbaa8dde89e4d5932232a4250d44a9844971e896bd3b821d9/serket-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d1a20b2f11e5ff35e87c1161ee33cf0ae83961cde5cb0a07e3c96041118ee90",
          "md5": "fb0b5708b0c2cf0bf2450ded7f7eee74",
          "sha256": "1d57f19216dd12cbf39e1ac1653907d6d3098da6cd79d250e6d93d8ce7068a5f"
        },
        "downloads": -1,
        "filename": "serket-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb0b5708b0c2cf0bf2450ded7f7eee74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 92042,
        "upload_time": "2022-10-27T13:05:08",
        "upload_time_iso_8601": "2022-10-27T13:05:08.449910Z",
        "url": "https://files.pythonhosted.org/packages/7d/1a/20b2f11e5ff35e87c1161ee33cf0ae83961cde5cb0a07e3c96041118ee90/serket-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36ec9611c1ee4abbcce6290497ee6b6888d16732dbe0a9c09e64edcec11d3e26",
          "md5": "ebad91eacfab64d5a57e75619f667053",
          "sha256": "1a27ee91562948f4bd35ac3a51bccb5b77981a34f30a0fd549550cd20cd74a7b"
        },
        "downloads": -1,
        "filename": "serket-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "ebad91eacfab64d5a57e75619f667053",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 82480,
        "upload_time": "2022-10-27T13:05:11",
        "upload_time_iso_8601": "2022-10-27T13:05:11.976514Z",
        "url": "https://files.pythonhosted.org/packages/36/ec/9611c1ee4abbcce6290497ee6b6888d16732dbe0a9c09e64edcec11d3e26/serket-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b83bf8557b8c64b717aff67bebb7f8bdbdb5b642b9f4276d0c96595aadd39503",
          "md5": "f02d6ef4a93879ade4a2c64c20a74754",
          "sha256": "6e0731918e72f0762f6c0d6f30b4a9d64c1299f2d05d317f9ebdf71267077199"
        },
        "downloads": -1,
        "filename": "serket-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f02d6ef4a93879ade4a2c64c20a74754",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 101036,
        "upload_time": "2022-10-30T11:33:48",
        "upload_time_iso_8601": "2022-10-30T11:33:48.735692Z",
        "url": "https://files.pythonhosted.org/packages/b8/3b/f8557b8c64b717aff67bebb7f8bdbdb5b642b9f4276d0c96595aadd39503/serket-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffcdc1b1256555df175de1425d2ab1841addc65169b2a402ad6cc90a2da3ec2a",
          "md5": "0900b97ba64a6029d43137ccf11b98f2",
          "sha256": "595545cd16a7163e28fc1775526c5c8a9571ae220e99b502ccaa0df34d82e1aa"
        },
        "downloads": -1,
        "filename": "serket-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "0900b97ba64a6029d43137ccf11b98f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 89943,
        "upload_time": "2022-10-30T11:33:51",
        "upload_time_iso_8601": "2022-10-30T11:33:51.338625Z",
        "url": "https://files.pythonhosted.org/packages/ff/cd/c1b1256555df175de1425d2ab1841addc65169b2a402ad6cc90a2da3ec2a/serket-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93345a68f8f466a9aae2852c284b81ac926349fbf14dfe9e5677578befb5de2d",
          "md5": "5faa04a61b4728cdd7e489babf567a20",
          "sha256": "e01f2f6055ebf7b2feba701e1470f88210cdcf7847e845116167c2f90b671df5"
        },
        "downloads": -1,
        "filename": "serket-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5faa04a61b4728cdd7e489babf567a20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13653,
        "upload_time": "2022-08-24T02:31:35",
        "upload_time_iso_8601": "2022-08-24T02:31:35.188246Z",
        "url": "https://files.pythonhosted.org/packages/93/34/5a68f8f466a9aae2852c284b81ac926349fbf14dfe9e5677578befb5de2d/serket-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46c1231885f78ddf241c777d38dd8d61328d383441df586092aca80256172a69",
          "md5": "385499becddc82acaff6fdc0ff1df4f9",
          "sha256": "f52475e0420212c02fdedd86bae6f522423af18f7b641f2673b96a5a95753bf2"
        },
        "downloads": -1,
        "filename": "serket-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "385499becddc82acaff6fdc0ff1df4f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16492,
        "upload_time": "2022-08-24T02:31:37",
        "upload_time_iso_8601": "2022-08-24T02:31:37.621072Z",
        "url": "https://files.pythonhosted.org/packages/46/c1/231885f78ddf241c777d38dd8d61328d383441df586092aca80256172a69/serket-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da60ddeb010cbed9320ce564a60824055a1c8c67d780bad25e296c8b82afff36",
          "md5": "56ee3c651b46cf71a23b449577a87fc8",
          "sha256": "ab593de312ba3ec51457753a0d3e4a7f04b8208b4b2795252d75ce4d4b2541b4"
        },
        "downloads": -1,
        "filename": "serket-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56ee3c651b46cf71a23b449577a87fc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20790,
        "upload_time": "2022-09-19T05:56:47",
        "upload_time_iso_8601": "2022-09-19T05:56:47.871503Z",
        "url": "https://files.pythonhosted.org/packages/da/60/ddeb010cbed9320ce564a60824055a1c8c67d780bad25e296c8b82afff36/serket-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "937eb4382cf96c4e24140013bdb2377a9168713b20ec695d032998bf2fb3ee4c",
          "md5": "a22d56a6762c01743a33dcd3c6cbb5f2",
          "sha256": "d3c89908fb77c659c85b461849526a21cad6a13e84f4651f40d55e38c3add850"
        },
        "downloads": -1,
        "filename": "serket-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a22d56a6762c01743a33dcd3c6cbb5f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21425,
        "upload_time": "2022-09-19T05:56:49",
        "upload_time_iso_8601": "2022-09-19T05:56:49.857311Z",
        "url": "https://files.pythonhosted.org/packages/93/7e/b4382cf96c4e24140013bdb2377a9168713b20ec695d032998bf2fb3ee4c/serket-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39cd7cc81cff562bcdbb029d666f27551377d17177dcc1009675099921e952e2",
          "md5": "0b2fbf24cf6b6197df9a099048ea4286",
          "sha256": "02af02f9ab7e22809e666f0d7259c67dc4de804212d3fe73fcf0c733c3781ea0"
        },
        "downloads": -1,
        "filename": "serket-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b2fbf24cf6b6197df9a099048ea4286",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 34862,
        "upload_time": "2022-09-29T16:02:20",
        "upload_time_iso_8601": "2022-09-29T16:02:20.916346Z",
        "url": "https://files.pythonhosted.org/packages/39/cd/7cc81cff562bcdbb029d666f27551377d17177dcc1009675099921e952e2/serket-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4354dd212585b8c98040688802467aa9b309d7fea2d94370fa9c7381df6e32d",
          "md5": "54dd854476bfdba9064144c952ce68bc",
          "sha256": "c6897b9dd8e88f843ce58343c593f8620355917a3b9674a51fe9e6899e39eb11"
        },
        "downloads": -1,
        "filename": "serket-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "54dd854476bfdba9064144c952ce68bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31942,
        "upload_time": "2022-09-29T16:02:23",
        "upload_time_iso_8601": "2022-09-29T16:02:23.177105Z",
        "url": "https://files.pythonhosted.org/packages/f4/35/4dd212585b8c98040688802467aa9b309d7fea2d94370fa9c7381df6e32d/serket-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f49a6e08f7e05864f46cecdcc6ea55c45f36d7b43bba89beb14e20f32bb1d403",
          "md5": "8f94896d534df3a1a804f19683dcf50b",
          "sha256": "6681be02ae126dec25d3877419f783edf0c6a0c8e02e9da44775f0eeedaba071"
        },
        "downloads": -1,
        "filename": "serket-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f94896d534df3a1a804f19683dcf50b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39007,
        "upload_time": "2022-10-02T11:11:55",
        "upload_time_iso_8601": "2022-10-02T11:11:55.161797Z",
        "url": "https://files.pythonhosted.org/packages/f4/9a/6e08f7e05864f46cecdcc6ea55c45f36d7b43bba89beb14e20f32bb1d403/serket-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfa70123991ca5376727765294155dfb86822832dcd5a326b21bc57dc9daf183",
          "md5": "120a5f22de956d97c1dc35ad9f84491a",
          "sha256": "7cc0ffa8651d924dc62bad9a2ec738c1c4c1ac1c41ed9c0042962c606afb0b76"
        },
        "downloads": -1,
        "filename": "serket-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "120a5f22de956d97c1dc35ad9f84491a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 35203,
        "upload_time": "2022-10-02T11:11:57",
        "upload_time_iso_8601": "2022-10-02T11:11:57.485789Z",
        "url": "https://files.pythonhosted.org/packages/df/a7/0123991ca5376727765294155dfb86822832dcd5a326b21bc57dc9daf183/serket-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "724a104607cfab0d84ba4d5764103d3ea020aab9895ed3be5643744149315ba8",
          "md5": "bb8f7e7a9b1a0130bbb8bdcac847715f",
          "sha256": "8352755bdd221fe5e9fe4394603ea685d5bac5e545d21f23b23a58f007c739ee"
        },
        "downloads": -1,
        "filename": "serket-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb8f7e7a9b1a0130bbb8bdcac847715f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 59597,
        "upload_time": "2022-10-11T19:06:56",
        "upload_time_iso_8601": "2022-10-11T19:06:56.449032Z",
        "url": "https://files.pythonhosted.org/packages/72/4a/104607cfab0d84ba4d5764103d3ea020aab9895ed3be5643744149315ba8/serket-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7a62186412b84e30fcd188e08dff10c794c249ad19769ab0c88df5b9afb3469",
          "md5": "c65b92c6475ca87bcbc1e960313e055c",
          "sha256": "dfdefd3b0b56f30c7229cfe99c76c67d6dd6b687dda2b18952e92a54bdae28d8"
        },
        "downloads": -1,
        "filename": "serket-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c65b92c6475ca87bcbc1e960313e055c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 50243,
        "upload_time": "2022-10-11T19:06:58",
        "upload_time_iso_8601": "2022-10-11T19:06:58.631906Z",
        "url": "https://files.pythonhosted.org/packages/a7/a6/2186412b84e30fcd188e08dff10c794c249ad19769ab0c88df5b9afb3469/serket-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64b279ab9baaf111496f352346bdf847c5623e520496c7bcb26fe4c31d2f1617",
          "md5": "574e79b8da960835a08c7be49d322f2c",
          "sha256": "3bb881c044d41bd6340eba53ce6166efae5ef78a6a260d9a06e02562c4c33556"
        },
        "downloads": -1,
        "filename": "serket-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "574e79b8da960835a08c7be49d322f2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 72522,
        "upload_time": "2022-10-19T12:15:10",
        "upload_time_iso_8601": "2022-10-19T12:15:10.197789Z",
        "url": "https://files.pythonhosted.org/packages/64/b2/79ab9baaf111496f352346bdf847c5623e520496c7bcb26fe4c31d2f1617/serket-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93556d6fe7770b433d8dc344ee312819e17c7711d6f46cb0eb08d208ff45bc79",
          "md5": "561ee09759f4cda9c995d115a3178889",
          "sha256": "1ea034a8b13cd0b9ea5fd8d9b29fd5be908fee9524ef06cc3ca334b6979f0eae"
        },
        "downloads": -1,
        "filename": "serket-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "561ee09759f4cda9c995d115a3178889",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 61444,
        "upload_time": "2022-10-19T12:15:13",
        "upload_time_iso_8601": "2022-10-19T12:15:13.013740Z",
        "url": "https://files.pythonhosted.org/packages/93/55/6d6fe7770b433d8dc344ee312819e17c7711d6f46cb0eb08d208ff45bc79/serket-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e390f1e2f384c7fc01d00cde84052ecedf526d1b848efe46df79d0c0fe78ef4f",
          "md5": "43ba8b46997b269b28e6091f04cb968a",
          "sha256": "f43564014a23d76ff57d749c0f23302c22a0d60ff4fb07ef98f69c8c5c44eb0b"
        },
        "downloads": -1,
        "filename": "serket-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43ba8b46997b269b28e6091f04cb968a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 87811,
        "upload_time": "2022-10-24T06:57:24",
        "upload_time_iso_8601": "2022-10-24T06:57:24.819451Z",
        "url": "https://files.pythonhosted.org/packages/e3/90/f1e2f384c7fc01d00cde84052ecedf526d1b848efe46df79d0c0fe78ef4f/serket-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c8e0f17f39e4487b4c3acfac13e0461d76340666d0ebb15db25885b5d2f3704",
          "md5": "c56c0266f3486b9cf20e95ac713bbc91",
          "sha256": "0ab2dc0ee3bf2c1d4ac42c1cde7b635110a73bf8e9b98fe2f8b59b4d0547d24b"
        },
        "downloads": -1,
        "filename": "serket-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c56c0266f3486b9cf20e95ac713bbc91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 76663,
        "upload_time": "2022-10-24T06:57:27",
        "upload_time_iso_8601": "2022-10-24T06:57:27.689011Z",
        "url": "https://files.pythonhosted.org/packages/6c/8e/0f17f39e4487b4c3acfac13e0461d76340666d0ebb15db25885b5d2f3704/serket-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77f1c76ceeec075dde094395a1426600050b53731b3171ed326d3749658847f4",
          "md5": "d28404eb2eee2141be07fa58a7e92523",
          "sha256": "42bf3da92f796b8b63c7082e2c988945a82103d48ddbb74f0eac9e684cb12c16"
        },
        "downloads": -1,
        "filename": "serket-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d28404eb2eee2141be07fa58a7e92523",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 91321,
        "upload_time": "2022-10-26T06:30:49",
        "upload_time_iso_8601": "2022-10-26T06:30:49.009850Z",
        "url": "https://files.pythonhosted.org/packages/77/f1/c76ceeec075dde094395a1426600050b53731b3171ed326d3749658847f4/serket-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d82e164f88794bb9ba7f6b1adcf75388d5ca9182092314a99b71312fb7fbf7f9",
          "md5": "ea51bc05487f27ada48588f6a6a47abb",
          "sha256": "63c66b05dd7ad8cdabb02b74c67a14b2b850c67e23b3d114cb8fc1580c436055"
        },
        "downloads": -1,
        "filename": "serket-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ea51bc05487f27ada48588f6a6a47abb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 81325,
        "upload_time": "2022-10-26T06:30:52",
        "upload_time_iso_8601": "2022-10-26T06:30:52.823461Z",
        "url": "https://files.pythonhosted.org/packages/d8/2e/164f88794bb9ba7f6b1adcf75388d5ca9182092314a99b71312fb7fbf7f9/serket-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b83bf8557b8c64b717aff67bebb7f8bdbdb5b642b9f4276d0c96595aadd39503",
        "md5": "f02d6ef4a93879ade4a2c64c20a74754",
        "sha256": "6e0731918e72f0762f6c0d6f30b4a9d64c1299f2d05d317f9ebdf71267077199"
      },
      "downloads": -1,
      "filename": "serket-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f02d6ef4a93879ade4a2c64c20a74754",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 101036,
      "upload_time": "2022-10-30T11:33:48",
      "upload_time_iso_8601": "2022-10-30T11:33:48.735692Z",
      "url": "https://files.pythonhosted.org/packages/b8/3b/f8557b8c64b717aff67bebb7f8bdbdb5b642b9f4276d0c96595aadd39503/serket-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffcdc1b1256555df175de1425d2ab1841addc65169b2a402ad6cc90a2da3ec2a",
        "md5": "0900b97ba64a6029d43137ccf11b98f2",
        "sha256": "595545cd16a7163e28fc1775526c5c8a9571ae220e99b502ccaa0df34d82e1aa"
      },
      "downloads": -1,
      "filename": "serket-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "0900b97ba64a6029d43137ccf11b98f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 89943,
      "upload_time": "2022-10-30T11:33:51",
      "upload_time_iso_8601": "2022-10-30T11:33:51.338625Z",
      "url": "https://files.pythonhosted.org/packages/ff/cd/c1b1256555df175de1425d2ab1841addc65169b2a402ad6cc90a2da3ec2a/serket-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}