{
  "info": {
    "author": "James Addison",
    "author_email": "addi00@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: FastAPI",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers"
    ],
    "description": "# fastapi-uuidbase62\n\n`fastapi-uuidbase62` is intended to provide Pydantic and FastAPI functionality that exposes UUID values as\nnicely-formatted Stripe-like string values, with validated prefixing. For example, a User UUID identifier of\n`\"f8711c37-c1d1-4961-ba3c-98cdc5b4fda8\"` with a `\"user\"` prefix becomes `\"user_7yNMTpVy8ddRxYKGJqtk7e\"`.\n\n## Benefits\n\nWhy take this approach?\n\n- users: easy text selection of Stripe-like formatted values (fast double-click or keyboard-based) compared to UUIDs (\n  try double clicking the samples above!)\n- database: using UUIDs in your database is likely much more efficient storage-wise as well as more performant\n- prefixing:\n    - allows for programmatic routing within a microservice architecture\n    - easier to reason about debug output, logging messages (lower cognitive load/overhead)\n\n## Installation\n\n`fastapi-uuidbase62` installation is much the same as any other Python package.\n\n```commandline\npip install fastapi-uuidbase62\n```\n\n### Python Support\nPython 3.7, 3.8, 3.9, 3.10, 3.11 are supported and covered by the `tox` test configuration described below. \n\n## Usage\n\nThis package provides the ability to define a field on a Pydantic model that auto-serializes a UUID value to \nbase62 and auto-prefixes a defined label. This serializes a UUID to a prefixed string when rendering a FastAPI \nresponse, and does the reverse when processing an incoming FastAPI request.\n\nIn the following example, take note of the following:\n- `UUIDBase62ModelMixin` adds a `to_uuidbase62` method to Model to easily convert a UUID or valid base62 prefixed value to a `UUIDBase62` value \n- the `con_uuidbase62` function, which defines the autoprefixing and serializing UUID <-> str field\n- the `get_validated_uuidbase62_by_model` dependency injection function providing validation/serialization on incoming base62-encoded parameters (path, header, query)\n  - there is a similar `get_validated_uuidbase62` function that does not rely on a Model class/field\n- `UUIDBase62` instance properties\n  - `uuidbase62_value.uuid`: UUID matching the base62 encoded str\n  - `uuidbase62_value.base62_str`: non-prefixed base62 string value\n  - `uuidbase62_value.value`: prefixed base62 string value, same as `str(uuidbase62_value)`\n  - `uuidbase62_value.prefix`: the prefix used for this `UUIDBase62` instance\n\n```Python\nimport uuid\n\nfrom fastapi import FastAPI, Depends\nfrom pydantic import BaseModel\n\nfrom uuidbase62 import con_uuidbase62, UUIDBase62, UUIDBase62ModelMixin, get_validated_uuidbase62_by_model\n\napp = FastAPI()\n\n\nclass Book(UUIDBase62ModelMixin, BaseModel):\n    id: con_uuidbase62(prefix=\"book\")\n    title: str\n\n\n@app.get(\"/\", response_model=list[Book])\nasync def get_item_list():\n    # fake fetching a list of books from the DB, yielding book IDs and titles\n    return [{\n        \"id\": uuid.uuid4(),\n        \"title\": \"Red Mars\",\n    }]\n\n\n@app.get(\"/{item_id}\", response_model=Book)\nasync def get_item(item_id: UUIDBase62 = Depends(get_validated_uuidbase62_by_model(Book, 'id', 'item_id'))):\n    # fake fetching from the DB based on `item_id`, yielding a book ID and title\n    return {\n        \"id\": uuid.uuid4(),\n        \"title\": \"Green Mars\",\n    }\n\n\n@app.post(\"/\", response_model=Book)\nasync def create_item(item: Book):\n    book_id = item.id  # UUIDBase62 value\n    book_id.uuid  # uuid value\n    book_id.base62_str  # non-prefixed base62 string value\n    book_id.value  # prefixed base62 string value, same as str(book_id)\n    book_id.prefix  # 'book'\n\n    return item.dict()\n```\n\n## Development\nTo set up a development environment, it is recommended to create a Python virtual environment, and then install \ndevelopment requirements. You should probably be using \n[`pyenv` to manage your local Python versions](https://github.com/pyenv/pyenv):\n\n```commandline\n# do this for each supported Python version, all are needed to run complete tests via tox\npyenv install 3.x.x \n\n# in the project directory, make supported Python versions available; first one listed is the default Python\npyenv local 3.10.x 3.7.x 3.8.x 3.9.x 3.11.x \n\n# create Python virtual environment\npython -m venv venv\n\n# install development dependencies\n./venv/bin/pip install -r requirements.txt\n```\n\n### Testing\n`fastapi-uuidbase62` is easily tested via the [configuration set up with `tox`](./tox.ini), which configures the `tox` \ncommand line tool:\n\n```commandline\n# run tox, parallel mode\n./venv/bin/tox -p\n```\n\n## Contributing\nLeverage [Github issues](https://github.com/jaddison/fastapi-uuidbase62/issues), and do consider submitting fixes/improvements via pull requests on Github.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaddison/fastapi-uuidbase62",
    "keywords": "stripe uuid base62 fastapi pydantic serialize",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastapi-uuidbase62",
    "package_url": "https://pypi.org/project/fastapi-uuidbase62/",
    "platform": null,
    "project_url": "https://pypi.org/project/fastapi-uuidbase62/",
    "project_urls": {
      "Documentation": "https://github.com/jaddison/fastapi-uuidbase62",
      "Homepage": "https://github.com/jaddison/fastapi-uuidbase62",
      "Say Thanks!": "https://github.com/jaddison/fastapi-uuidbase62/issues",
      "Source": "https://github.com/jaddison/fastapi-uuidbase62",
      "Tracker": "https://github.com/jaddison/fastapi-uuidbase62/issues"
    },
    "release_url": "https://pypi.org/project/fastapi-uuidbase62/0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "Leverage Stripe-formatted IDs for internal UUID values in your Pydantic models and FastAPI views; automatically validates prefixes, and converts to/from UUID values.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13227072,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d6b70dded4128f205511c68f90e745e4a88425eace9957cca1826e3baabf38e",
          "md5": "61bb3a62b3aff6749acf916cc64745fc",
          "sha256": "89737ec314e8f56735fdd2b03d137de75f33cfb556fc80bf594da6691ba6ebab"
        },
        "downloads": -1,
        "filename": "fastapi-uuidbase62-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "61bb3a62b3aff6749acf916cc64745fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3073,
        "upload_time": "2022-03-19T23:05:35",
        "upload_time_iso_8601": "2022-03-19T23:05:35.859730Z",
        "url": "https://files.pythonhosted.org/packages/9d/6b/70dded4128f205511c68f90e745e4a88425eace9957cca1826e3baabf38e/fastapi-uuidbase62-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55cf30e56b656082b95bcdc2b7ebeb1e6006bd798dc6159b2d1e7dd6bbf7b4a8",
          "md5": "abd3d862cc0747512f815d1c50290de0",
          "sha256": "907d3f2c7edf8acb80787ee4a8143af81e6530b39f986633e882cee721982940"
        },
        "downloads": -1,
        "filename": "fastapi-uuidbase62-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "abd3d862cc0747512f815d1c50290de0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 6731,
        "upload_time": "2022-03-20T01:13:29",
        "upload_time_iso_8601": "2022-03-20T01:13:29.534673Z",
        "url": "https://files.pythonhosted.org/packages/55/cf/30e56b656082b95bcdc2b7ebeb1e6006bd798dc6159b2d1e7dd6bbf7b4a8/fastapi-uuidbase62-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55cf30e56b656082b95bcdc2b7ebeb1e6006bd798dc6159b2d1e7dd6bbf7b4a8",
        "md5": "abd3d862cc0747512f815d1c50290de0",
        "sha256": "907d3f2c7edf8acb80787ee4a8143af81e6530b39f986633e882cee721982940"
      },
      "downloads": -1,
      "filename": "fastapi-uuidbase62-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "abd3d862cc0747512f815d1c50290de0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 6731,
      "upload_time": "2022-03-20T01:13:29",
      "upload_time_iso_8601": "2022-03-20T01:13:29.534673Z",
      "url": "https://files.pythonhosted.org/packages/55/cf/30e56b656082b95bcdc2b7ebeb1e6006bd798dc6159b2d1e7dd6bbf7b4a8/fastapi-uuidbase62-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}