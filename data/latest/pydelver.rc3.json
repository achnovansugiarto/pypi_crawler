{
  "info": {
    "author": "Alex Sippel",
    "author_email": "asippel@narrativescience.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Delver\n\n[![CircleCI](https://circleci.com/gh/NarrativeScience/delver/tree/master.svg?style=shield)](https://circleci.com/gh/NarrativeScience/delver/tree/master) [![](https://img.shields.io/pypi/v/pydelver.svg)](https://pypi.org/pypi/pydelver/) [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nThe Delver tool allows for the visual exploration of nested objects, which can\nbe useful for coming to grips with unfamiliar data or learning the structure of\na new codebase. In particular, this package exposes a command line tool `delve`\nas well as a Python library which can be used to understand JSON structures\nand arbitrary Python objects.\n\nFeatures:\n\n- Command line tool for exploring JSON data\n- Support for interactive exploration of Python objects within debugger\n\nTable of Contents:\n\n- [Installation](#getting-started)\n- [Guide](#guide)\n- [Development](#development)\n\n# Getting Started\n\n## Requirements\n\nThe `delve` tool requires that Python is installed as well as the `six` package (taken\ncare of via the installation method below), which allows for compatibility between Python 2\nand Python 3.\n\nSpecifically, `delve` has been tested with Python versions 2.7.8 and 3.7.2.\n\n## Installation\n\nSimply install via `pip`:\n\n```\n$  pip install pydelver\n```\n\nThis exposes the `delve` command line script (which corresponds to the\n`delver.delve:main` function).\n\nNote that any transform functions should be either installed in the current\npython interpreter's site-packages or should be available in local scope.\n\n\n# Guide\n\n## Command Line Tool\n\nThe `delve` command allows for the exploration of JSON data from the\ncommand line, with the ability to see the types of data within as well as your\ncurrent location:\n\n```\n$  delve test_delver.json\n-------------------------------------------------------------------------------\nDict (length 3)\n+-----+--------+------------------------+\n| Idx | Key    | Data                   |\n+-----+--------+------------------------+\n| 0   | league | MidwestDataAwesomeness |\n| 1   | sport  | Data Innovation        |\n| 2   | teams  | <list, length 2>       |\n+-----+--------+------------------------+\n[<key index>, u, q] -->\n```\n\nThis displays the top level keys as well as a description of their values for the\n*test_delver.json* file. A number of input options are printed at the bottom which\nindicate that a user can either:\n\n* Select a *key index* from the available `Idx` values in the column on the left\n* Select *u*\n* Select *q*\n\nSelecting a *key index* will navigate into that value and display information\nabout any keys and/or values at that level. For example, selecting 2 would navigate\ninto the *teams* object, which we can now see is a list of dictionaries:\n\n```\n-------------------------------------------------------------------------------\nAt path teams\nList (length 2)\n+-----+------------------+\n| Idx | Data             |\n+-----+------------------+\n| 0   | <dict, length 4> |\n| 1   | <dict, length 4> |\n+-----+------------------+\n[<int>, u, q] --> 0\n```\n\nFrom this point, the user can select *u* to go back **up** one level to the top, or they can\nfurther delve by selecting an index. For example if the user selects 0:\n\n```\n-------------------------------------------------------------------------------\nAt path teams->0\nDict (length 4)\n+-----+-------------+------------------+\n| Idx | Key         | Data             |\n+-----+-------------+------------------+\n| 0   | mascot      | TRex             |\n| 1   | players     | <list, length 6> |\n| 2   | team symbol | â˜ƒ                |\n| 3   | teamname    | editors          |\n+-----+-------------+------------------+\n[<key index>, u, q] -->\n```\n\nAt this point, the user can continue navigating using the indices, return to a higher\nlevel using *u*, or enter *q* to exit.\n\n## Python Library\n\nThe `Delver` class, which powers the `delve` tool above, can be used\ndirectly when working in a python interpreter:\n\n```ipython\nIn [1]: import delver\n\nIn [2]: test_object = {'foo': 200, 'bar': False, 'baz': [1, 2, 3]}\n\nIn [3]: delver.run(test_object)\n-------------------------------------------------------------------------------\nAt path: root\nDict (length 3)\n+-----+-----+------------------+\n| Idx | Key | Data             |\n+-----+-----+------------------+\n| 0   | bar | False            |\n| 1   | baz | <list, length 3> |\n| 2   | foo | 200              |\n+-----+-----+------------------+\n[<key index>, u, q] -->\n```\n\nThis can be useful when debugging software (it works the same in\n[`pdb`](https://docs.python.org/2/library/pdb.html) or\n[`ipdb`](https://github.com/gotcha/ipdb)), as well as when working in a new or\nunfamiliar codebase. For example, it's very easy to see what public methods\nand classes are defined in a package:\n\n```ipython\nIn [1]: import delver\n\nIn [2]: import unittest\n\nIn [3]: delver.run(unittest)\n-------------------------------------------------------------------------------\nAt path: root\n+-----+-------------------+---------------------------------------------------+\n| Idx | Attribute         | Data                                              |\n+-----+-------------------+---------------------------------------------------+\n| 0   | BaseTestSuite     | <class 'unittest.suite.BaseTestSuite'>            |\n| 1   | FunctionTestCase  | <class 'unittest.case.FunctionTestCase'>          |\n| 2   | SkipTest          | <class 'unittest.case.SkipTest'>                  |\n| 3   | TestCase          | <class 'unittest.case.TestCase'>                  |\n| 4   | TestLoader        | <class 'unittest.loader.TestLoader'>              |\n| 5   | TestProgram       | <class 'unittest.main.TestProgram'>               |\n| 6   | TestResult        | <class 'unittest.result.TestResult'>              |\n| 7   | TestSuite         | <class 'unittest.suite.TestSuite'>                |\n| 8   | TextTestResult    | <class 'unittest.runner.TextTestResult'>          |\n| 9   | TextTestRunner    | <class 'unittest.runner.TextTestRunner'>          |\n| 10  | case              | <module 'unittest.case' from                      |\n|     |                   | '/Users/nscience/python2.7/unittest/case.pyc'>    |\n| 11  | defaultTestLoader | <unittest.loader.TestLoader object at 0x10eeb0d10>|\n| 12  | expectedFailure   | <function expectedFailure at 0x10eeab8c0>         |\n| 13  | findTestCases     | <function findTestCases at 0x10eeb59b0>           |\n| 14  | getTestCaseNames  | <function getTestCaseNames at 0x10eeb58c0>        |\n| 15  | installHandler    | <function installHandler at 0x10eeb5f50>          |\n| 16  | loader            | <module 'unittest.loader' from                    |\n|     |                   | '/Users/nscience/python2.7/unittest/loader.pyc'>  |\n| 17  | main              | <class 'unittest.main.TestProgram'>               |\n| 18  | makeSuite         | <function makeSuite at 0x10eeb5938>               |\n| 19  | registerResult    | <function registerResult at 0x10eeb5e60>          |\n| 20  | removeHandler     | <function removeHandler at 0x10eec2050>           |\n| 21  | removeResult      | <function removeResult at 0x10eeb5ed8>            |\n| 22  | result            | <module 'unittest.result' from                    |\n|     |                   | '/Users/nscience/python2.7/unittest/result.pyc'>  |\n| 23  | runner            | <module 'unittest.runner' from                    |\n|     |                   | '/Users/nscience/python2.7/unittest/runner.pyc'>  |\n| 24  | signals           | <module 'unittest.signals' from                   |\n|     |                   | '/Users/nscience/python2.7/unittest/signals.pyc'> |\n| 25  | skip              | <function skip at 0x10eeab758>                    |\n| 26  | skipIf            | <function skipIf at 0x10eeab7d0>                  |\n| 27  | skipUnless        | <function skipUnless at 0x10eeab848>              |\n| 28  | suite             | <module 'unittest.suite' from                     |\n|     |                   | '/Users/nscience/python2.7/unittest/suite.pyc'>   |\n| 29  | util              | <module 'unittest.util' from                      |\n|     |                   | '/Users/nscience/python2.7/unittest/util.pyc'>    |\n+-----+-------------------+---------------------------------------------------+\n[<attr index>, u, q] -->\n```\n\nMoving through the hierarchy, then, enables quickly understanding all the parts\nthat make up the unfamiliar library.\n\n## Advanced Features\n\nThis tool is typically used to look through large JSON payloads where seeing\nthe entirety of the file in a text editor or on a web page is\nunwieldy/inconvenient. The advanced features allow for simplifying payloads or making\nthem easier to navigate and explore.\n\n### Specifying a Data Transform from the Command Line\n\nThe ``delve`` script allows for the ability to specify a 'transform' step to\nbe applied before the data is actually explored. This might be used in the case\nwhere unwanted fields in the JSON should be ignored. For example, consider the\nfollowing dataset:\n\n```javascript\n{\n   \"company_name\": \"MegaCorp\",\n   \"company_location\": \"Gotham\",\n   \"company_description\": \"Innovator in the corporate activity space\",\n   \"subsidiary_companies\": [\n     {\n       \"company_name\": \"tinycorp\",\n       \"company_location\": \"Gotham\",\n       \"company_id\": \"2391235091875091348523472634782352354981723409128734019283471203941239085\"\n    },\n    {\n      \"company_name\": \"smallcompany\",\n      \"company_location\": \"Podunk\",\n      \"company_id\": \"3912750918273410928347120938751098234712034981250917123049817234091283471\"\n    }\n  ]\n}\n```\n\nWhen viewing/exploring the data, it may not be necessary to see the large\n`company_id` field on each of the `subsidiary_companies`. If we defined the\nfollowing transform function in a module called `transform.py` which is within\nthe current directories scope (i.e. is listed in the `PYTHONPATH` or is\nwithin the current directory), then we can appropriately ignore that field when\nexploring.\n\n```python\ndef remove_company_ids(payload):\n    \"\"\"Given a company payload, remove all of the 'company_id' fields\n    within the company dictionaries listed under 'subsidiary_companies'.\n\n    :param payload: dictionary containing company information with company\n        id fields to remove\n    :type payload: ``dict``\n\n    :return: a modified *payload* without any 'company_id' fields\n    :rtype: ``dict``\n    \"\"\"\n    for company in payload.get('subsidiary_companies', []):\n        del company['company_id']\n    return payload\n```\n\nTo run the `delve` command with the transform, just specify the `transform-func`\nparameter:\n\n```\n$  delve company_info.json --transform-func transform:remove_company_ids\n-------------------------------------------------------------------------------\nDict (length 4)\n+-----+----------------------+-------------------------------------------+\n| Idx | Key                  | Data                                      |\n+-----+----------------------+-------------------------------------------+\n| 0   | company_description  | Innovator in the corporate activity space |\n| 1   | company_location     | Gotham                                    |\n| 2   | company_name         | MegaCorp                                  |\n| 3   | subsidiary_companies | <list, length 2>                          |\n+-----+----------------------+-------------------------------------------+\n[<key index>, u, q] --> 3\n-------------------------------------------------------------------------------\nAt path subsidiary_companies\nList (length 2)\n+-----+------------------+\n| Idx | Data             |\n+-----+------------------+\n| 0   | <dict, length 2> |\n| 1   | <dict, length 2> |\n+-----+------------------+\n[<int>, u, q] --> 0\n-------------------------------------------------------------------------------\nAt path subsidiary_companies->0\nDict (length 2)\n+-----+------------------+----------+\n| Idx | Key              | Data     |\n+-----+------------------+----------+\n| 0   | company_location | Gotham   |\n| 1   | company_name     | tinycorp |\n+-----+------------------+----------+\n[<key index>, u, q] -->\n```\n\nAnd now we don't have to see those annoying company ids when exploring our data!\n\n# Development\n\nSetting up the development environment does not vary between python versions. See the\ninstructions below for more details on how to get up and running. We welcome pull\nrequests on new features or fixes (especially if they involve new\n[handlers](src/delver/handlers.py))!\n\nNote that these instructions assume the repo has been cloned locally and that\nthe user is in the top-level directory:\n\n```\n$ git clone https://github.com/NarrativeScience/delver.git\n$ cd delver\n```\n\n## Running Tests\n\nWhen doing development, the tests can be executed by using\n[tox](https://tox.readthedocs.io/en/latest/).\n\nFirst install the package requirements as well as the test-specific requirements:\n\n```bash\npip install pre-commit tox\npre-commit install\n```\n\nThen executing the tests just involves running:\n\n```bash\ntox\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NarrativeScience/delver",
    "keywords": "data,command line tools,json",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydelver",
    "package_url": "https://pypi.org/project/pydelver/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydelver/",
    "project_urls": {
      "Homepage": "https://github.com/NarrativeScience/delver"
    },
    "release_url": "https://pypi.org/project/pydelver/0.0.6/",
    "requires_dist": [
      "colorful>=0.4.0",
      "six>=1.10.0",
      "terminaltables>=3.1.0"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Helpful tool for stepping through nested objects",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6657058,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "468eb53b2b36a1eaceaf31a4419a8e0aa8873d57bd7469c19f6dd17933ea6ec2",
          "md5": "0fe93d9c6dd03f222250aacb442bf3be",
          "sha256": "c3e7c0af579e6c3c7dbd269f5b50cda488c702408edc108192bd269cf8c3ca16"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fe93d9c6dd03f222250aacb442bf3be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15925,
        "upload_time": "2020-02-14T23:07:40",
        "upload_time_iso_8601": "2020-02-14T23:07:40.669533Z",
        "url": "https://files.pythonhosted.org/packages/46/8e/b53b2b36a1eaceaf31a4419a8e0aa8873d57bd7469c19f6dd17933ea6ec2/pydelver-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cee54a4868368ee4d2c0d6e8327338e85d23a0b96a7c4e2221a4e3435b221d7",
          "md5": "04ff7460c7a189c0804a2570e16cf7d6",
          "sha256": "638c1ed277d487e2829800699225a390674e4469f8ef52fd687a3e7281dff2dd"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "04ff7460c7a189c0804a2570e16cf7d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13988,
        "upload_time": "2019-12-16T20:02:03",
        "upload_time_iso_8601": "2019-12-16T20:02:03.703231Z",
        "url": "https://files.pythonhosted.org/packages/8c/ee/54a4868368ee4d2c0d6e8327338e85d23a0b96a7c4e2221a4e3435b221d7/pydelver-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c05dc309f67fd63362f9e9a6c0db0a71af9b91ca355fc6f01cbe8d6eb725aa75",
          "md5": "f88fc0a155035f15d25f94c0433e3101",
          "sha256": "3ddfc509549496b5c47890810d1cd685d86d3dc925457c39a23a7a6feae6bf96"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f88fc0a155035f15d25f94c0433e3101",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 15968,
        "upload_time": "2020-02-18T23:03:41",
        "upload_time_iso_8601": "2020-02-18T23:03:41.532866Z",
        "url": "https://files.pythonhosted.org/packages/c0/5d/c309f67fd63362f9e9a6c0db0a71af9b91ca355fc6f01cbe8d6eb725aa75/pydelver-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a9bbc93037538b6cc75d447dc5395867171deeb82d4922c039970aaa2bb14e9",
          "md5": "100e988b79cce5926cbbc2312f6b61ad",
          "sha256": "e61bec885e8d96ccbfc47c4b87cadfecad149c5f7b60fd36c8b3a3d08721aa70"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "100e988b79cce5926cbbc2312f6b61ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 16163,
        "upload_time": "2020-02-18T23:03:43",
        "upload_time_iso_8601": "2020-02-18T23:03:43.492795Z",
        "url": "https://files.pythonhosted.org/packages/9a/9b/bc93037538b6cc75d447dc5395867171deeb82d4922c039970aaa2bb14e9/pydelver-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc30f42713db696473385999b0217cb48811e72fbb3ed272426d12f6c6158685",
          "md5": "a709d8acfa5cba2933c03bcb83fb3740",
          "sha256": "3ff8bf105ab5a124fe228ee3ef643806c113345ad9fc53cb7b2ec594bdcfebbd"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a709d8acfa5cba2933c03bcb83fb3740",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 15969,
        "upload_time": "2020-02-18T23:13:36",
        "upload_time_iso_8601": "2020-02-18T23:13:36.365933Z",
        "url": "https://files.pythonhosted.org/packages/dc/30/f42713db696473385999b0217cb48811e72fbb3ed272426d12f6c6158685/pydelver-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f2f29c9901f4c6f4d1851ab900e36eaa61a0897e2012f607c7f485de4be749c",
          "md5": "8a7f396681d4628a779f85655cc49469",
          "sha256": "983378fd12e47cf67bfc42b028cf25c14cef640f7d00e92e2322d2fdd1ad088a"
        },
        "downloads": -1,
        "filename": "pydelver-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8a7f396681d4628a779f85655cc49469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 15991,
        "upload_time": "2020-02-18T23:13:37",
        "upload_time_iso_8601": "2020-02-18T23:13:37.468688Z",
        "url": "https://files.pythonhosted.org/packages/9f/2f/29c9901f4c6f4d1851ab900e36eaa61a0897e2012f607c7f485de4be749c/pydelver-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc30f42713db696473385999b0217cb48811e72fbb3ed272426d12f6c6158685",
        "md5": "a709d8acfa5cba2933c03bcb83fb3740",
        "sha256": "3ff8bf105ab5a124fe228ee3ef643806c113345ad9fc53cb7b2ec594bdcfebbd"
      },
      "downloads": -1,
      "filename": "pydelver-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a709d8acfa5cba2933c03bcb83fb3740",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 15969,
      "upload_time": "2020-02-18T23:13:36",
      "upload_time_iso_8601": "2020-02-18T23:13:36.365933Z",
      "url": "https://files.pythonhosted.org/packages/dc/30/f42713db696473385999b0217cb48811e72fbb3ed272426d12f6c6158685/pydelver-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f2f29c9901f4c6f4d1851ab900e36eaa61a0897e2012f607c7f485de4be749c",
        "md5": "8a7f396681d4628a779f85655cc49469",
        "sha256": "983378fd12e47cf67bfc42b028cf25c14cef640f7d00e92e2322d2fdd1ad088a"
      },
      "downloads": -1,
      "filename": "pydelver-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "8a7f396681d4628a779f85655cc49469",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 15991,
      "upload_time": "2020-02-18T23:13:37",
      "upload_time_iso_8601": "2020-02-18T23:13:37.468688Z",
      "url": "https://files.pythonhosted.org/packages/9f/2f/29c9901f4c6f4d1851ab900e36eaa61a0897e2012f607c7f485de4be749c/pydelver-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}