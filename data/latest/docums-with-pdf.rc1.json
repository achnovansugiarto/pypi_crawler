{
  "info": {
    "author": "NKDuy",
    "author_email": "kn145660@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PDF Generate Plugin for Docums\n\nThis plugin will generate a single PDF file from your Docums repository.\nThis plugin is inspired by [Docums PDF Export Plugin][docums-pdf-export-plugin].\n\n## Features\n\n* Cover and Table of Contents integrated in the PDF\n* Automatically numbers on heading(h1-h3).\n* Shift down sub-page headings level.\n* using [WeasyPrint][weasyprint].\n\n## Requirements\n\n1. This package requires Docums version 1.0.0.0 or higher\n1. Python 3.6 or higher\n1. WeasyPrint depends on cairo, Pango and GDK-PixBuf which need to be installed separately. Please follow the installation instructions for your platform carefully:\n    * [Linux][weasyprint-linux]\n    * [MacOS][weasyprint-macos]\n    * [Windows][weasyprint-windows]\n\n## How to use\n\n### Installation\n\n1. Install the package with pip:\n\n    ```bash\n    pip install docums-with-pdf\n    ```\n\n2. Enable the plugin in your `docums.yml`:\n\n    ```yaml\n    plugins:\n        - with-pdf\n    ```\n\n    More information about plugins in the [Docums documentation][docums-plugins].\n\n#### Testing\n\nWhen building your repository with `docums build`, you should now see the following message at the end of your build output:\n\n> Converting 10 articles to PDF took 7.1s\n\n### Configuration\n\nYou may customize the plugin by passing options in `docums.yml`:\n\n```yaml\nplugins:\n    - with-pdf:\n        #author: WHO\n        #copyright: ANY TEXT\n        #\n        #cover: false\n        #back_cover: true\n        #cover_title: TITLE TEXT\n        #cover_subtitle: SUBTITLE TEXT\n        #custom_template_path: TEMPLATES PATH\n        #\n        #toc_title: TOC TITLE TEXT\n        #heading_shift: false\n        #toc_level: 3\n        #ordered_chapter_level: 2\n        #excludes_children:\n        #    - 'release-notes/:upgrading'\n        #    - 'release-notes/:changelog'\n        #\n        #exclude_pages:\n        #    - 'bugs/'\n        #    - 'appendix/contribute/'\n        #convert_iframe:\n        #    - src: IFRAME SRC\n        #      img: POSTER IMAGE URL\n        #      text: ALTERNATE TEXT\n        #    - src: ...\n        #two_columns_level: 3\n        #\n        #render_js: true\n        #headless_chrome_path: headless-chromium\n        #\n        #output_path: any-place/document.pdf\n        #enabled_if_env: ENABLE_PDF_EXPORT\n        #\n        #debug_html: true\n        #show_anchors: true\n        #verbose: true\n```\n\n#### Options\n\n##### for Properties\n\n* `author`\n\n    Set the author text.  \n    **default**: use `site_author` in your project `docums.yml`\n\n* `copyright`\n\n    Set the author text.  \n    **default**: use `copyright` in your project `docums.yml`\n\n> `author` and `copyright` values are drawn in Cover, and you can use '@page' content.  \n>\n> ```css \"e.g.\"\n> @page {\n>   @bottom-left {\n>     content: string(author) !important;\n>   }\n>   @bottom-right {\n>     content: string(copyright) !important;\n>   }\n> }\n> ```\n\n##### for Cover\n\n* `cover`\n\n    Set the value to `false` if you don't need a cover page.  \n    **default**: `true`\n\n* `back_cover`\n\n    Set the value to `true` if you need a back cover page.  \n    **default**: `false`  \n    _**since**: `v0.8.0`_\n\n    You would be better to install the `qrcode` package:\n\n    ```sh\n    pip install qrcode\n    ```\n\n* `cover_title`\n\n    Set the title text in cover page.  \n    **default**: use `site_name` in your project `docums.yml`\n\n* `cover_subtitle`\n\n    Set the subtitle text in cover page.  \n    **default**: `None`\n\n* `cover_logo`\n\n    Set the logo image in cover page. This value is URL or simply specify the relative path to the docs directory.  \n    **default**: `None`  \n    _**since**: `v0.8.0`_\n\n##### for Heading and TOC\n\n* `toc_title`\n\n    Set the title text of _Table of Content_.  \n    **default**: `Table of Content`  \n    _**since**: `v0.4.0`_\n\n* `heading_shift`\n\n    Set this value to `false`, disable shift heading in child page.  \n    **default**: `true`\n\n    In this flags enable, heading move down one level in child page.\n\n* `toc_level`\n\n    Set the level of _Table of Content_. This value is enabled in the range of from `1` to `3`.  \n    **default**: `3`\n\n* `ordered_chapter_level`\n\n    Set the level of heading number addition. This value is enabled in the range of from `1` to `3`.  \n    **default**: `3`\n\n* `excludes_children`\n\n    Set the page `id` of `nav` url. If the `id` matches in this list, it will be excluded from the heading number addition and table of contents.  \n    **default**: `[]`\n\n##### for Page\n\n* `exclude_pages`\n\n    Set the page `id` of `nav` url. If the `id` matches in this list, it will be excluded page contents.  \n    **default**: `[]`  \n    _**since**: `v0.3.0`_\n\n* `convert_iframe`\n\n    List of `iframe` to `a` conversions. Every `iframe` that matches a `src` in this list will be replace to `a` contains each `img` and/or `text`. it's using for such as embedded VIDEO.  \n    **default**: `[]`  \n    _**since**: `v0.6.0`_\n\n* `two_columns_level` (Experimental)\n\n    Set the heading level of **_Two Column Layout_**. Currently only `0`(disable) or `3` is valid for this value. So slow processing, but a little nice.  \n\n    **default**: `0`  \n    _**since**: `v0.7.0`_\n\n##### Renderer for JavaScript\n\n* `render_js`\n\n    Set the value to `true` if you're using '[MathJax](https://www.mathjax.org/)', '[Twemoji](https://twemoji.twitter.com/)' or any more.  \n    Require \"Chrome\" which has \"headless\" mode.  \n\n    **default**: `false`  \n    _**since**: `v0.7.0`_\n\n* `headless_chrome_path`\n\n    Set the \"Headless Chrome\" program path.  \n    If `render_js` is _`false`_, this value will be ignored.  \n\n    **default**: `chromium-browser`\n\n> Check on your system:\n>\n> ```\n> $ <PROGRAM_PATH> --headless \\\n>    --disable-gpu \\\n>    --dump-dom \\\n>    <ANY_SITE_URL(eg. 'https://google.com')>\n> ```\n\n##### ... and more\n\n* `output_path`\n\n    This option allows you to use a different destination for the PDF file.  \n    **default**: `pdf/document.pdf`\n\n* `custom_template_path`\n\n    The path where your custom `cover.html` and/or `styles.scss` are located.\n    **default**: `templates`  \n    _**since**: `v0.8.0`_\n\n* `enabled_if_env`\n\n    Setting this option will enable the build only if there is an environment variable set to 1. This is useful to disable building the PDF files during development, since it can take a long time to export all files.  \n    **default**: `None`\n\n    PDF generation can take significantly longer than HTML generation which can slow down docums's built-in dev-server.\n\n    Adding `enabled_if_env: ENABLE_PDF_EXPORT` under `- with-pdf:` disables PDF generation during development.  Run the dev-server normally:\n\n    ```sh\n    $ docums serve\n    INFO    -  Browser Connected: http://127.0.0.1:8000/\n    INFO    -  Running task: builder (delay: None)\n    INFO    -  Building documentation...\n    WARNING -  without generate PDF(set environment variable ENABLE_PDF_EXPORT to 1 to enable)\n    ... 2 seconds later ...\n    INFO    -  Reload 1 waiters: /.../index.md\n    ```\n\n    and to build files to deploy specify `ENABLE_PDF_EXPORT=1` at the command line:\n\n    ```sh\n    $ ENABLE_PDF_EXPORT=1 docums build\n    ...\n    INFO    -  Converting 10 articles to PDF took 7.1s\n    INFO    -  Documentation built in 8.29 seconds\n    ```\n\n* `debug_html`\n\n    Setting this to `true` will out HTML to `stdout` on build time.  \n    **default**: `false`\n\n    You can try this:\n\n    ```bash\n    docums build > for_pdf_print.html\n    ```\n\n    ...and browse output with Google Chrome. [Chrome DevTools Into Print Preview Mode](https://developers.google.com/web/tools/chrome-devtools/css/print-preview) will you help.\n\n    Note: WeasyPrint and Google Chrome are not fully compatible.\n\n* `show_anchors`\n\n    Setting this to `true` will list out of anchor points provided during the build as info message.  \n    **default**: `false`  \n    _**since**: `v0.7.4`_\n\n* `verbose`\n\n    Setting this to `true` will show all WeasyPrint debug messages during the build.  \n    **default**: `false`\n\n## Custom cover page and document style\n\nIt is possible to create a custom cover page for the document.\nYou can also add a custom style sheet to modify the whole document.\n\nTo do so, add a `templates` folder at the root level of your `docums` project and place a `cover.html` and/or a `styles.scss` inside.\nAlternatively, you can specify a different location with the `custom_template_path` option.\n\n### Custom cover page\n\nUsing [jinja2](https://jinja.palletsprojects.com/en/2.11.x/templates/) syntax, you can access all data from your `docums.yml`.\nTo make template creation easier, you can use `plugin_some_plugin` to access variables from plugins.\nE.g. use `{{ author }}` to get the author from your `docums.yml` that looks like:\n\n```yaml\nplugins:\n    - with-pdf:\n        author: WHO\n```\n\nYou can use custom variables [`extra:` in your `docums.yml`](https://khanhduy1407.github.io/docums/user-guide/configuration/#extra)\nAnd, you can check it in the log if run with `verbose` or `debug_html` options.\n\n### Custom stylesheet\n\nSince your stylesheet is appended to the default ones, you can override every setting from them.\n\nTip: setting the `debug_html` option to `true` to get the generated html that is passed to `weasyprint` can help you determine the html tags, classes or identifiers you want to modify in your stylesheet.\n\n### Advanced Rendering Hooks (Experimental)\n\nYou can hook the PDF rendering process by creating a `pdf_event_hook.py`(or `pdf_event_hook/__init__.py`) in your working directory _(usually the same directory as` docums.yml`)_.  \n_**since**: `v0.8.2`_\n\n#### Sample `pdf_event_hook.py` (or `pdf_event_hook/__init__.py`)\n\n```python\nimport logging\n\nfrom bs4 import BeautifulSoup\nfrom docums.structure.pages import Page\n\n\ndef inject_link(html: str, href: str,\n                page: Page, logger: logging) -> str:\n    \"\"\"Adding PDF View button on navigation bar(using material theme)\"\"\"\n\n    def _pdf_icon():\n        _ICON = '''\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n<path d=\"M128,0c-17.6,0-32,14.4-32,32v448c0,17.6,14.4,32,32,32h320c17.6,0,32-14.4,32-32V128L352,0H128z\" fill=\"#E2E5E7\"/>\n<path d=\"m384 128h96l-128-128v96c0 17.6 14.4 32 32 32z\" fill=\"#B0B7BD\"/>\n<polygon points=\"480 224 384 128 480 128\" fill=\"#CAD1D8\"/>\n<path d=\"M416,416c0,8.8-7.2,16-16,16H48c-8.8,0-16-7.2-16-16V256c0-8.8,7.2-16,16-16h352c8.8,0,16,7.2,16,16  V416z\" fill=\"#F15642\"/>\n<g fill=\"#fff\">\n<path d=\"m101.74 303.15c0-4.224 3.328-8.832 8.688-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.688-3.184-8.688-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36z\"/>\n<path d=\"m196.66 384c-4.224 0-8.832-2.304-8.832-7.92v-72.672c0-4.592 4.608-7.936 8.832-7.936h29.296c58.464 0 57.184 88.528 1.152 88.528h-30.448zm8.064-72.912v57.312h21.232c34.544 0 36.08-57.312 0-57.312h-21.232z\"/>\n<path d=\"m303.87 312.11v20.336h32.624c4.608 0 9.216 4.608 9.216 9.072 0 4.224-4.608 7.68-9.216 7.68h-32.624v26.864c0 4.48-3.184 7.92-7.664 7.92-5.632 0-9.072-3.44-9.072-7.92v-72.672c0-4.592 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.344 8.96 7.936 0 4.096-3.328 8.704-8.96 8.704h-37.248v0.016z\"/>\n</g>\n<path d=\"m400 432h-304v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z\" fill=\"#CAD1D8\"/>\n</svg>\n'''  # noqa: E501\n        return BeautifulSoup(_ICON, 'html.parser')\n\n    logger.info(f'(hook on inject_link: {page.title})')\n    soup = BeautifulSoup(html, 'html.parser')\n\n    nav = soup.find(class_='md-header-nav')\n    if not nav:\n        # after 7.x\n        nav = soup.find('nav', class_='md-header__inner')\n    if nav:\n        a = soup.new_tag('a', href=href, title='PDF',\n                         **{'class': 'md-header__button md-header-nav__button md-icon'})\n        a.append(_pdf_icon())\n        nav.append(a)\n        return str(soup)\n\n    return html\n\n\n# def pre_js_render(soup: BeautifulSoup, logger: logging) -> BeautifulSoup:\n#     logger.info('(hook on pre_js_render)')\n#     return soup\n\n\n# def pre_pdf_render(soup: BeautifulSoup, logger: logging) -> BeautifulSoup:\n#     logger.info('(hook on pre_pdf_render)')\n#     tag = soup.find(lambda tag: tag.name ==\n#                     'body' and 'data-md-color-scheme' in tag.attrs)\n#     if tag:\n#         tag['data-md-color-scheme'] = 'print'\n#     return soup\n```\n\n... and check log:\n\n```sh\n$ docums build\nINFO    -  Found PDF rendering event hook module.\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: /tmp/sample/site\nINFO    -  (hook on inject_link: Home)\n   ...\n```\n\n[docums-pdf-export-plugin]: https://github.com/khanhduy1407/docums-pdf-export-plugin\n[khanhduy1407]:  https://github.com/khanhduy1407\n\n[weasyprint]: http://weasyprint.org/\n[weasyprint-linux]: https://weasyprint.readthedocs.io/en/latest/install.html#linux\n[weasyprint-macos]: https://weasyprint.readthedocs.io/en/latest/install.html#os-x\n[weasyprint-windows]: https://weasyprint.readthedocs.io/en/latest/install.html#windows\n\n[docums-plugins]: http://khanhduy1407.github.io/docums/user-guide/plugins/\n[docurial]: https://github.com/khanhduy1407/docurial",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/khanhduy1407/docums-with-pdf",
    "keywords": "docums pdf weasyprint",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docums-with-pdf",
    "package_url": "https://pypi.org/project/docums-with-pdf/",
    "platform": "",
    "project_url": "https://pypi.org/project/docums-with-pdf/",
    "project_urls": {
      "Homepage": "https://github.com/khanhduy1407/docums-with-pdf"
    },
    "release_url": "https://pypi.org/project/docums-with-pdf/0.9.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Generate a single PDF file from Docums repository",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12811313,
  "releases": {
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d53d3c6c686302514486cdc09912f1cc2144693b1c038043fe60347cea7a3a",
          "md5": "dd21bbdd951abb3e9d24dcaedbaadaea",
          "sha256": "394168c9398d7d6763e974c35635a05f9f0040e2eaa69ab34d64dedb2247a36b"
        },
        "downloads": -1,
        "filename": "docums-with-pdf-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dd21bbdd951abb3e9d24dcaedbaadaea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25780,
        "upload_time": "2022-02-07T10:47:19",
        "upload_time_iso_8601": "2022-02-07T10:47:19.449489Z",
        "url": "https://files.pythonhosted.org/packages/81/d5/3d3c6c686302514486cdc09912f1cc2144693b1c038043fe60347cea7a3a/docums-with-pdf-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81d53d3c6c686302514486cdc09912f1cc2144693b1c038043fe60347cea7a3a",
        "md5": "dd21bbdd951abb3e9d24dcaedbaadaea",
        "sha256": "394168c9398d7d6763e974c35635a05f9f0040e2eaa69ab34d64dedb2247a36b"
      },
      "downloads": -1,
      "filename": "docums-with-pdf-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "dd21bbdd951abb3e9d24dcaedbaadaea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25780,
      "upload_time": "2022-02-07T10:47:19",
      "upload_time_iso_8601": "2022-02-07T10:47:19.449489Z",
      "url": "https://files.pythonhosted.org/packages/81/d5/3d3c6c686302514486cdc09912f1cc2144693b1c038043fe60347cea7a3a/docums-with-pdf-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}