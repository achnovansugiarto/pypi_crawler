{
  "info": {
    "author": "Erik Linder-Noren",
    "author_email": "eriklindernoren@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PyTorch-YOLOv3\nA minimal PyTorch implementation of YOLOv3, with support for training, inference and evaluation.\n\n[![Build Status](https://travis-ci.org/Borda/PyTorch-YOLOv3.svg?branch=master)](https://travis-ci.org/Borda/PyTorch-YOLOv3)\n[![codecov](https://codecov.io/gh/Borda/PyTorch-YOLOv3/branch/master/graph/badge.svg)](https://codecov.io/gh/Borda/PyTorch-YOLOv3)\n[![CodeFactor](https://www.codefactor.io/repository/github/borda/pytorch-yolov3/badge)](https://www.codefactor.io/repository/github/borda/pytorch-yolov3)\n\n---\n\n## Installation\n\nClone and install requirements\n```bash\ngit clone {this-repository}\ncd PyTorch-YOLOv3/\npip3 install -r requirements.txt --user\n```\n\nDownload pre-trained weights\n```bash\ncd weights\nbash download_weights.sh\n```\n\nDownload COCO\n```bash\ncd data\nbash get_coco_dataset.sh\n```\n\n## Test\nEvaluates the model on COCO test.\n\n```bash\npython3 scripts/run_eval.py --weights_path weights/yolov3.weights\n```\n\n| Model                   | mAP (min. 50 IoU) |\n| ----------------------- |:-----------------:|\n| YOLOv3 608 (paper)      | 57.9              |\n| YOLOv3 608 (this impl.) | 57.3              |\n| YOLOv3 416 (paper)      | 55.3              |\n| YOLOv3 416 (this impl.) | 55.5              |\n\n## Inference\nUses pretrained weights to make predictions on images. Below table displays the inference times when using as inputs images scaled to 256x256. The ResNet backbone measurements are taken from the YOLOv3 paper. The Darknet-53 measurement marked shows the inference time of this implementation on my 1080ti card.\n\n| Backbone                | GPU      | FPS      |\n| ----------------------- |:--------:|:--------:|\n| ResNet-101              | Titan X  | 53       |\n| ResNet-152              | Titan X  | 37       |\n| Darknet-53 (paper)      | Titan X  | 76       |\n| Darknet-53 (this impl.) | 1080ti   | 74       |\n\n```bash\npython3 scripts/run_detect.py --image_folder data/samples\n```\n\n![](assets/giraffe.jpg)\n![](assets/dog.jpg)\n![](assets/traffic.jpg)\n![](assets/messi.jpg)\n\n## Train\n```\ntrain.py [-h] [--epochs EPOCHS] [--batch_size BATCH_SIZE]\n              [--gradient_accumulations GRADIENT_ACCUMULATIONS]\n              [--model_def MODEL_DEF] [--data_config DATA_CONFIG]\n              [--pretrained_weights PRETRAINED_WEIGHTS] [--nb_cpu NB_CPU]\n              [--img_size IMG_SIZE]\n              [--checkpoint_interval CHECKPOINT_INTERVAL]\n              [--evaluation_interval EVALUATION_INTERVAL]\n              [--compute_map COMPUTE_MAP]\n              [--multiscale_training MULTISCALE_TRAINING]\n```\n\n#### Example (COCO)\nTo train on COCO using a Darknet-53 backend pretrained on ImageNet run: \n```bash\npython3 scripts/run_train.py --data_config config/coco.data  --pretrained_weights weights/darknet53.conv.74\n```\n\n#### Training log\n```\n---- [Epoch 7/100, Batch 7300/14658] ----\n+------------+--------------+--------------+--------------+\n| Metrics    | YOLO Layer 0 | YOLO Layer 1 | YOLO Layer 2 |\n+------------+--------------+--------------+--------------+\n| grid_size  | 16           | 32           | 64           |\n| loss       | 1.554926     | 1.446884     | 1.427585     |\n| x          | 0.028157     | 0.044483     | 0.051159     |\n| y          | 0.040524     | 0.035687     | 0.046307     |\n| w          | 0.078980     | 0.066310     | 0.027984     |\n| h          | 0.133414     | 0.094540     | 0.037121     |\n| conf       | 1.234448     | 1.165665     | 1.223495     |\n| cls        | 0.039402     | 0.040198     | 0.041520     |\n| cls_acc    | 44.44%       | 43.59%       | 32.50%       |\n| recall50   | 0.361111     | 0.384615     | 0.300000     |\n| recall75   | 0.222222     | 0.282051     | 0.300000     |\n| precision  | 0.520000     | 0.300000     | 0.070175     |\n| conf_obj   | 0.599058     | 0.622685     | 0.651472     |\n| conf_noobj | 0.003778     | 0.004039     | 0.004044     |\n+------------+--------------+--------------+--------------+\nTotal Loss 4.429395\n---- ETA 0:35:48.821929\n```\n\n#### Tensorboard\n\nTrack training progress in Tensorboard:\n* Initialize training\n* Run the command below\n* Go to http://localhost:6006/\n\n```bash\ntensorboard --logdir='logs' --port=6006\n```\n\n## Train on Custom Dataset\n\n#### Custom model\nRun the commands below to create a custom model definition, replacing `<num-classes>` with the number of classes in your dataset.\n\n```bash\ncd config                                  # Navigate to config dir\nbash create_custom_model.sh <num-classes>  # Will create custom model 'yolov3-custom.cfg'\n```\n\n#### Classes\nAdd class names to `data/custom/classes.names`. This file should have one row per class name.\n\n#### Image Folder\nMove the images of your dataset to `data/custom/images/`.\n\n#### Annotation Folder\nMove your annotations to `data/custom/labels/`. The dataloader expects that the annotation file corresponding to the image `data/custom/images/train.jpg` has the path `data/custom/labels/train.txt`. Each row in the annotation file should define one bounding box, using the syntax `label_idx x_center y_center width height`. The coordinates should be scaled `[0, 1]`, and the `label_idx` should be zero-indexed and correspond to the row number of the class name in `data/custom/classes.names`.\n\n#### Define Train and Validation Sets\nIn `data/custom/train.txt` and `data/custom/valid.txt`, add paths to images that will be used as train and validation data respectively.\n\n#### Train\nTo train on the custom dataset run:\n\n```bash\npython3 scripts/run_train.py --model_def config/yolov3-custom.cfg --data_config config/custom.data\n```\n\nAdd `--pretrained_weights weights/darknet53.conv.74` to train using a backend pretrained on ImageNet.\n\n\n## Credit\n\n### YOLOv3: An Incremental Improvement\n_Joseph Redmon, Ali Farhadi_ <br>\n\nWe present some updates to YOLO! We made a bunch of little design changes to make it better. We also trained this new network that’s pretty swell. It’s a little bigger than last time but more accurate. It’s still fast hough, don’t worry. At 320 × 320 YOLOv3 runs in 22 ms at 28.2 mAP, as accurate as SSD but three times faster. When we look at the old .5 IOU mAP detection metric YOLOv3 is quite good. It achieves 57.9 AP50 in 51 ms on a Titan X, compared to 57.5 AP50 in 198 ms by RetinaNet, similar performance but 3.8× faster. As always, all the code is online at https://pjreddie.com/yolo/.\n\n[[Paper]](https://pjreddie.com/media/files/papers/YOLOv3.pdf) [[Project Webpage]](https://pjreddie.com/darknet/yolo/) [[Authors' Implementation]](https://github.com/pjreddie/darknet)\n\n```\n@article{yolov3,\n  title={YOLOv3: An Incremental Improvement},\n  author={Redmon, Joseph and Farhadi, Ali},\n  journal = {arXiv},\n  year={2018}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Borda/PyTorch-YOLOv3",
    "keywords": "Yolo CNN object-detector pytorch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-yolo3",
    "package_url": "https://pypi.org/project/torch-yolo3/",
    "platform": "",
    "project_url": "https://pypi.org/project/torch-yolo3/",
    "project_urls": {
      "Homepage": "https://github.com/Borda/PyTorch-YOLOv3"
    },
    "release_url": "https://pypi.org/project/torch-yolo3/0.1.1/",
    "requires_dist": [
      "numpy",
      "torch (>=1.6)",
      "torchvision",
      "matplotlib",
      "tensorboard",
      "terminaltables",
      "tqdm",
      "pathos",
      "PyYAML",
      "torch-optimizer"
    ],
    "requires_python": "",
    "summary": "YOLO v3 in PyTorch",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8086390,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d7d893fc623ebecb1501d841406631b1da945acefea55abec360f2ff96d3c76",
          "md5": "e57f63d67c3a6d0c43effab90d23cfb7",
          "sha256": "120f7b4076ab490288b4f08086a54a626a5519676215d0939b4f312ae17f18d9"
        },
        "downloads": -1,
        "filename": "torch_yolo3-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e57f63d67c3a6d0c43effab90d23cfb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31224,
        "upload_time": "2020-09-01T14:27:58",
        "upload_time_iso_8601": "2020-09-01T14:27:58.930197Z",
        "url": "https://files.pythonhosted.org/packages/7d/7d/893fc623ebecb1501d841406631b1da945acefea55abec360f2ff96d3c76/torch_yolo3-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "418105bc70d0b2703d2823285c7996e1a614cd24accd32ac0391a97448e2a53b",
          "md5": "777763dae359961d2d1ba34a44820c84",
          "sha256": "166a68025855b7ed5b5bd98bc2151f99b2e60efb5a472828fd47e77fba2f4f91"
        },
        "downloads": -1,
        "filename": "torch_yolo3-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "777763dae359961d2d1ba34a44820c84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 218923,
        "upload_time": "2020-09-01T14:28:02",
        "upload_time_iso_8601": "2020-09-01T14:28:02.118779Z",
        "url": "https://files.pythonhosted.org/packages/41/81/05bc70d0b2703d2823285c7996e1a614cd24accd32ac0391a97448e2a53b/torch_yolo3-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22942aa845eca81b8d6c6579c459e9eca434bc67ad6efc95665f80805cd89bed",
          "md5": "dcd7fb04c6227b2d2b238754afe524e3",
          "sha256": "4c56da74df52e7cd6e4193ebcda66da9691d5d6ea9d69b10fe00d63fe092c418"
        },
        "downloads": -1,
        "filename": "torch_yolo3-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcd7fb04c6227b2d2b238754afe524e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31722,
        "upload_time": "2020-09-01T14:28:00",
        "upload_time_iso_8601": "2020-09-01T14:28:00.274924Z",
        "url": "https://files.pythonhosted.org/packages/22/94/2aa845eca81b8d6c6579c459e9eca434bc67ad6efc95665f80805cd89bed/torch_yolo3-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbac44316b5ffafbc16840deb9bc583fd817570919079732350c1bd9bae75bf4",
          "md5": "2e0f5611bbb1f0e75a5e20e9592d4b0b",
          "sha256": "97a4444c02048c2ca5c00e4ff941a6177be012affbfcae0b281a040d7898bbde"
        },
        "downloads": -1,
        "filename": "torch_yolo3-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2e0f5611bbb1f0e75a5e20e9592d4b0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 219950,
        "upload_time": "2020-09-01T14:28:03",
        "upload_time_iso_8601": "2020-09-01T14:28:03.652987Z",
        "url": "https://files.pythonhosted.org/packages/fb/ac/44316b5ffafbc16840deb9bc583fd817570919079732350c1bd9bae75bf4/torch_yolo3-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22942aa845eca81b8d6c6579c459e9eca434bc67ad6efc95665f80805cd89bed",
        "md5": "dcd7fb04c6227b2d2b238754afe524e3",
        "sha256": "4c56da74df52e7cd6e4193ebcda66da9691d5d6ea9d69b10fe00d63fe092c418"
      },
      "downloads": -1,
      "filename": "torch_yolo3-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dcd7fb04c6227b2d2b238754afe524e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31722,
      "upload_time": "2020-09-01T14:28:00",
      "upload_time_iso_8601": "2020-09-01T14:28:00.274924Z",
      "url": "https://files.pythonhosted.org/packages/22/94/2aa845eca81b8d6c6579c459e9eca434bc67ad6efc95665f80805cd89bed/torch_yolo3-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbac44316b5ffafbc16840deb9bc583fd817570919079732350c1bd9bae75bf4",
        "md5": "2e0f5611bbb1f0e75a5e20e9592d4b0b",
        "sha256": "97a4444c02048c2ca5c00e4ff941a6177be012affbfcae0b281a040d7898bbde"
      },
      "downloads": -1,
      "filename": "torch_yolo3-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2e0f5611bbb1f0e75a5e20e9592d4b0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 219950,
      "upload_time": "2020-09-01T14:28:03",
      "upload_time_iso_8601": "2020-09-01T14:28:03.652987Z",
      "url": "https://files.pythonhosted.org/packages/fb/ac/44316b5ffafbc16840deb9bc583fd817570919079732350c1bd9bae75bf4/torch_yolo3-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}