{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\ndjango-ajax-datatable\n=====================\n\n**django-ajax-datatable** is a Django app (previously named *morlandi/django-datatables-view*) which provides advanced  integration for a Django project with the jQuery Javascript library DataTables.net,\nwhen used in server-side processing mode.\n\nIn this context, the rendering of the table is the result of a serie of Ajax\nrequests to the server following user interactions (i.e. when paging, ordering, searching, etc.).\n\nWith django-ajax-datatable, basically you have to provide a AjaxDatatableView-derived view\nto describe the desired table content and behaviour, and the app manages the interaction\nwith DataTables.net by reacting to the ajax requests with suitable responses.\n\nNotes:\n\n   Since someone asked ...\n\n   - I use this app for my own projects, and improve it from time to time as new needs arises.\n\n   - I received so much from the Django community, so I'm more than happy to share something hopefully useful for others.\n     The app is intended to be opensource; feel free to use it we no restrictions at all.\n     I added a MIT Licence file to the github repo, to make this more explicit.\n\n   - Since v4.0.0, the package has been renamed from `django-datatables-view` to `django-ajax-datatable`\n     to avoid a conflict on PyPI\n\n   - Unfortunately I only have a few unit tests, and didn't bother (yet) to add a TOX procedure to run then with\n     different Python/Django versions.\n     Having said this, I can confirm that I do happen to use it with no problems in projects based on Django 2.x.\n     However, most recent improvements have been tested mainly with Django 3.\n     As far as I know, no Django3-specific features have been applied.\n     In case, please open an issue, and I will fix it.\n\n   - I'm not willing to support Python 2.x and Django 1.x any more; in case, use a previous release (tagged as v2.x.x);\n     old releases will be in place in the repo forever\n\nFeatures:\n\n- Pagination\n- Column ordering\n- Global generic search\n- Global date-range search over \"get_latest_by\" column\n- Column specific filtering\n- Foreign key fields can be used, using the \"model1__model2__field\" notation\n- Customizable rendering of table rows\n- and more ...\n\nInspired from:\n\nhttps://github.com/monnierj/django-datatables-server-side\n\n.. contents::\n\n.. sectnum::\n\nDemo site and examples\n----------------------\n\nA very minimal working Django project which uses `django-ajax-datatable` can be found in the folder `example_minimal`.\n\nA more realistic solution, with a frontend based on Bootstrap4, can be found in `example`,\nand is published as a demo site at the address: http://django-ajax-datatable-demo.brainstorm.it/.\n\n.. image:: screenshots/examples.png\n\nInstallation\n------------\n\nInstall the package by running:\n\n.. code:: bash\n\n    pip install django-ajax-datatable\n\nor:\n\n.. code:: bash\n\n    pip install git+https://github.com/morlandi/django-ajax-datatable@v4.0.0\n\nthen add 'ajax_datatable' to your INSTALLED_APPS:\n\n.. code:: bash\n\n    INSTALLED_APPS = [\n        ...\n        'ajax_datatable',\n    ]\n\nOptional dependencies (for better debug tracing):\n\n    - sqlparse\n    - termcolor\n    - pygments\n\n\nPre-requisites\n--------------\n\nYour base template should include what required by `datatables.net`, plus:\n\n- /static/ajax_datatable/css/style.css\n- /static/ajax_datatable/js/utils.js\n\nExample (plain jQuery from CDN):\n\n.. code:: html\n\n    {% block extrastyle %}\n\n        <link href=\"{% static 'ajax_datatable/css/style.css' %}\" rel=\"stylesheet\" />\n        <link href=\"//cdn.datatables.net/1.10.22/css/jquery.dataTables.min.css\" />\n\n    {% endblock extrastyle %}\n\n    {% block extrajs %}\n\n        <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n        <script type=\"text/javascript\" src=\"{% static 'ajax_datatable/js/utils.js' %}\"></script>\n        <script src=\"//cdn.datatables.net/1.10.22/js/jquery.dataTables.min.js\"></script>\n\n    {% endcompress %}\n\n\nExample (with Bootstrap4 support):\n\n.. code:: html\n\n    {% block extrastyle %}\n\n        <link href=\"{% static 'ajax_datatable/css/style.css' %}\" rel=\"stylesheet\" />\n        <!-- link rel='stylesheet' href=\"{% static 'datatables.net-bs/css/dataTables.bootstrap.min.css' %}\" -->\n        <link rel='stylesheet' href=\"{% static 'datatables.net-bs4/css/dataTables.bootstrap4.min.css' %}\">\n        <link rel='stylesheet' href=\"{% static 'datatables.net-buttons-bs/css/buttons.bootstrap.min.css' %}\">\n\n    {% endblock extrastyle %}\n\n    {% block extrajs %}\n\n        <script type=\"text/javascript\" src=\"{% static 'ajax_datatable/js/utils.js' %}\"></script>\n\n        <script src=\"{% static 'datatables.net/js/jquery.dataTables.min.js' %}\"></script>\n        <!-- script src=\"{% static 'datatables.net-bs/js/dataTables.bootstrap.min.js' %}\"></script -->\n        <script src=\"{% static 'datatables.net-bs4/js/dataTables.bootstrap4.min.js' %}\"></script>\n        <script src=\"{% static 'datatables.net-buttons/js/dataTables.buttons.min.js' %}\"></script>\n        <script src=\"{% static 'datatables.net-buttons/js/buttons.print.min.js' %}\"></script>\n        <script src=\"{% static 'datatables.net-buttons/js/buttons.html5.min.js' %}\"></script>\n        <script src=\"{% static 'datatables.net-buttons-bs/js/buttons.bootstrap.min.js' %}\"></script>\n        <script src=\"{% static 'jszip/dist/jszip.min.js' %}\"></script>\n        <script src=\"{% static 'pdfmake/build/pdfmake.min.js' %}\"></script>\n        <script src=\"{% static 'pdfmake/build/vfs_fonts.js' %}\"></script>\n\n    {% endcompress %}\n\n\nBasic AjaxDatatableView\n-----------------------\n\nTo provide server-side rendering of a Django Model, you will need:\n\n1. an ordinary view which will render an HTML page containing:\n\n    - an empty HTML <table> element\n    - a javascript code which links this HTML table to the (AjaxDatatableView-derived) second view\n\n2. a specific view derived from AjaxDatatableView() which will be called multiple times\n   via Ajax during data navigation; this second view has two duties:\n\n   - render the initial table layout based on specified columns\n   - respond to datatables.net requests, as a consequence of the user interaction with the table\n\n**Example**:\n\nWe start by rendering an HTML page from this template:\n\nfile `permissions_list.html`\n\n.. code:: python\n\n    <table id=\"datatable_permissions\">\n    </table>\n\n    or:\n\n    <div class=\"table-responsive\">\n        <table id=\"datatable_permissions\" width=\"100%\" class=\"table table-striped table-bordered dt-responsive compact nowrap\">\n        </table>\n    </div>\n\n    ...\n\n    <script language=\"javascript\">\n\n        $(document).ready(function() {\n            AjaxDatatableViewUtils.initialize_table(\n                $('#datatable_permissions'),\n                \"{% url 'ajax_datatable_permissions' %}\",\n                {\n                    // extra_options (example)\n                    processing: false,\n                    autoWidth: false,\n                    full_row_select: true,\n                    scrollX: false\n                }, {\n                    // extra_data\n                    // ...\n                },\n            );\n        });\n\n    </script>\n\nHere, \"{% url 'ajax_datatable_permissions' %}\" is the endpoint to the specialized view:\n\nfile `urls.py`\n\n.. code:: python\n\n    from django.urls import path\n    from . import ajax_datatable_views\n\n    app_name = 'frontend'\n\n    urlpatterns = [\n        ...\n        path('ajax_datatable/permissions/', ajax_datatable_views.PermissionAjaxDatatableView.as_view(), name=\"ajax_datatable_permissions\"),\n    ]\n\n\n\nThe javascript helper **AjaxDatatableViewUtils.initialize_table(element, url, extra_options={}, extra_data={})**\nconnects the HTML table element to the \"server-size table rendering\" machinery, and performs\na first call (identified by the `action=initialize` parameter) to the AjaxDatatableView-derived\nview.\n\nThis in turn populates the HTML empty table with a suitable layout,\nwhile subsequent calls to the view will be performed to populate the table with real data.\n\nThis strategy allows the placement of one or more dynamic tables in the same page.\n\n\nI often keep all AjaxDatatableView-derived views in a separate \"ajax_datatable_views.py\" source file,\nto make it crystal clear that you should never call them directly:\n\nfile `ajax_datatable_views.py`\n\n.. code:: python\n\n    from ajax_datatable.views import AjaxDatatableView\n    from django.contrib.auth.models import Permission\n\n\n    class PermissionAjaxDatatableView(AjaxDatatableView):\n\n        model = Permission\n        title = 'Permissions'\n        initial_order = [[\"app_label\", \"asc\"], ]\n        length_menu = [[10, 20, 50, 100, -1], [10, 20, 50, 100, 'all']]\n        search_values_separator = '+'\n\n        column_defs = [\n            AjaxDatatableView.render_row_tools_column_def(),\n            {'name': 'id', 'visible': False, },\n            {'name': 'codename', 'visible': True, },\n            {'name': 'name', 'visible': True, },\n            {'name': 'app_label', 'foreign_field': 'content_type__app_label', 'visible': True, },\n            {'name': 'model', 'foreign_field': 'content_type__model', 'visible': True, },\n        ]\n\nIn the previous example, row id is included in the first column of the table,\nbut hidden to the user.\n\nAjaxDatatableView will serialize the required data during table navigation.\n\n\nThis is the resulting table:\n\n.. image:: screenshots/001a.png\n\nYou can use common CSS style to customize the final rendering:\n\n.. image:: screenshots/001.png\n\n\nAjaxDatatableViewUtils.initialize_table() parameters are:\n\n    element\n        table element\n\n    url\n        action (remote url to be called via Ajax)\n\n    extra_options={}\n        custom options for dataTable()\n\n    extra_data={}\n        extra parameters to be sent via ajax for global \"initial queryset\" filtering;\n        see: `Provide \"extra data\" to narrow down the initial queryset`_\n\n\nAjaxDatatableView Class attributes\n----------------------------------\n\nRequired:\n\n- model\n- column_defs\n\nOptional:\n\n- initial_order = [[1, \"asc\"], [5, \"desc\"]]   # positions can also be expressed as column names: [['surname', 'asc'], ]\n- length_menu = [[10, 20, 50, 100], [10, 20, 50, 100]]\n- latest_by = None\n- show_date_filters = None\n- show_column_filters = None\n- disable_queryset_optimization = False\n- disable_queryset_optimization_only = False\n- disable_queryset_optimization_select_related = False\n- disable_queryset_optimization_prefetch_related = False\n- table_row_id_prefix = 'row-'\n- table_row_id_fieldname = 'id'\n- render_row_details_template_name = \"render_row_details.html\"\n- search_values_separator = ''\n- sort_field: None\n\nor override the following methods to provide attribute values at run-time,\nbased on request:\n\n.. code:: python\n\n    def get_column_defs(self):\n        return self.column_defs\n\n    def get_initial_order(self):\n        return self.initial_order\n\n    def get_length_menu(self):\n        return self.length_menu\n\n    def get_latest_by(self, request):\n        \"\"\"\n        Override to customize based on request.\n\n        Provides the name of the column to be used for global date range filtering.\n        Return either '', a fieldname or None.\n\n        When None is returned, in model's Meta 'get_latest_by' attributed will be used.\n        \"\"\"\n        return self.latest_by\n\n    def get_show_date_filters(self, request):\n        \"\"\"\n        Override to customize based on request.\n\n        Defines whether to use the global date range filter.\n        Return either True, False or None.\n\n        When None is returned, will'll check whether 'latest_by' is defined\n        \"\"\"\n        return self.show_date_filters\n\n    def get_show_column_filters(self, request):\n        \"\"\"\n        Override to customize based on request.\n\n        Defines whether to use the column filters.\n        Return either True, False or None.\n\n        When None is returned, check if at least one visible column in searchable.\n        \"\"\"\n        return self.show_column_filters\n\n    def get_table_row_id(self, request, obj):\n        \"\"\"\n        Provides a specific ID for the table row; default: \"row-ID\"\n        Override to customize as required.\n        \"\"\"\n        result = ''\n        if self.table_row_id_fieldname:\n            try:\n                result = self.table_row_id_prefix + str(getattr(obj, self.table_row_id_fieldname))\n            except:\n                result = ''\n        return result\n\ncolumn_defs customizations\n--------------------------\n\nExample::\n\n    column_defs = [{\n        'name': 'currency',                 # required\n        'data': None,\n        'title': 'Currency',                # optional: default = field verbose_name or column name\n        'visible': True,                    # optional: default = True\n        'searchable': True,                 # optional: default = True if visible, False otherwise\n        'orderable': True,                  # optional: default = True if visible, False otherwise\n        'foreign_field': 'manager__name',   # optional: follow relation\n        'm2m_foreign_field': 'manager__name',   # optional: follow m2m relation\n        'placeholder': False,               # ???\n        'className': 'css-class-currency',  # optional class name for cell\n        'defaultContent': '<h1>test</h1>',  # ???\n        'width': 300,                       # optional: controls the minimum with of each single column\n        'choices': None,                    # see `Filtering single columns` below\n        'initialSearchValue': None,         # see `Filtering single columns` below\n        'autofilter': False,                # see `Filtering single columns` below\n        'boolean': False,                   # treat calculated column as BooleanField\n        'max_length': 0,                    # if > 0, clip result longer then max_length\n        'lookup_field': '__icontains',      # used for searches; default: '__iexact' for columns with choices, '__icontains' in all other cases\n    }, {\n        ...\n\nNotes:\n\n    - **title**: if not supplied, the verbose name of the model column (when available)\n      or **name** will be used\n    - **width**: for this to be effective, you need to add **table-layout: fixed;** style\n      to the HTML table, but in some situations this causes problems in the computation\n      of the table columns' widths (at least in the current version 1.10.19 of Datatables.net)\n\nProvide \"extra data\" to narrow down the initial queryset\n--------------------------------------------------------\n\nSometimes you might need to restrict the initial queryset based on the context.\n\nTo that purpose, you can provide a dictionary of additional filters during table initialization;\nthis dictionary will be sent to the View, where you can use it for queryset filtering.\n\nProvide as many key as required; assign either constant values or callables.\nThe special keys 'date_from' and 'date_to' may be used to override values collected\nby the optional global date range filter (format: 'YYYY-MM-DD').\n\nExample:\n\n.. code:: javascript\n\n        AjaxDatatableViewUtils.initialize_table(\n            element,\n            url,\n            {\n                // extra_options (example)\n                processing: false,\n                autoWidth: false,\n                full_row_select: false,\n                scrollX: true,\n                bFilter: false\n            }, {\n                // extra_data\n                client_id: '{{client.id}}',\n                date_from: function() { return date_input_to_isoformat('#date_from'); },\n                date_to: function() { return date_input_to_isoformat('#date_to'); }\n            }\n        );\n\nthen:\n\n.. code:: python\n\n    class SampleAjaxDatatableView(AjaxDatatableView):\n\n        ...\n\n        def get_initial_queryset(self, request=None):\n\n            if not request.user.is_authenticated:\n                raise PermissionDenied\n\n            # We accept either GET or POST\n            if not getattr(request, 'REQUEST', None):\n                request.REQUEST = request.GET if request.method=='GET' else request.POST\n\n            queryset = self.model.objects.all()\n\n            if 'client_id' in request.REQUEST:\n                client_id = int(request.REQUEST.get('client_id'))\n                queryset = queryset.filter(client_id=client_id)\n\n            return queryset\n\n\nAdd a sidebar with custom filters\n---------------------------------\n\nSometimes you need to provide complex or very specific filters to let the user control\nthe content of the table in an advanced manner.\n\nIn those cases, the global or column filters provided by AjaxDatatableView,\nwhich are based on simple <input> and <select> widgets, may not be enought.\n\nStill, you can easily add a sidebar with custom filters, and apply to them\nthe concepts explained in the previous paragraph (`Provide \"extra data\" to narrow down the initial queryset`_).\n\nAn example of this technique has been added to the Example project; the result\nand a detailed explanation is presented here:\n\nhttp://django-ajax-datatable-demo.brainstorm.it/side_filters/\n\n.. image:: screenshots/side_filters.png\n\n\nAutomatic addition of table row ID\n----------------------------------\n\nStarting from v3.2.0, each table row is characterized with a specific ID on each row\n(tipically, the primary key value from the queryset)\n\n.. image:: screenshots/table_row_id.png\n\nThe default behaviour is to provide the string \"row-ID\", where:\n\n- \"row-\" is retrieved from self.table_row_id_prefix\n- \"ID\" is retrieved from the row object, using the field with name self.table_row_id_fieldname (default: \"id\")\n\nNote that, for this to work, you are required to list the field \"id\" in the column list (maybe hidden).\n\nThis default behaviour can be customized by either:\n\n- replacing the values for `table_row_id_fieldname` and/or `table_row_id_prefix`, or\n- overriding `def get_table_row_id(self, request, obj)`\n\nSorting columns\n---------------\n\nSorting is managed the by the overridable method `sort_queryset()`, and fully\ndelegated to the database for better performances.\n\nFor each `orderable` column, the column `name` will be used, unless a `sort_field`\nhas been specified; in which case, the latter will be used instead.\n\nFiltering single columns\n------------------------\n\n**DatatableView.show_column_filters** (or **DatatableView.get_show_column_filters(request)**)\ndefines whether to show specific filters for searchable columns as follows:\n\n    - None (default): show if at least one visible column in searchable\n    - True: always show\n    - False: always hide\n\nBy default, a column filter for a searchable column is rendered as a **text input** box;\nyou can instead provide a **select** box using the following attributes:\n\nchoices\n    - None (default) or False: no choices (use text input box)\n    - True: use Model's field choices;\n        + failing that, we might use \"autofilter\"; that is: collect the list of distinct values from db table\n        + or, for **BooleanField** columns, provide (None)/Yes/No choice sequence\n        + calculated columns with attribute 'boolean'=True are treated as BooleanFields\n    - ((key1, value1), (key2, values), ...) : use supplied sequence of choices\n\nautofilter\n    - default = False\n    - when set: if choices == True and no Model's field choices are available,\n      collects distinct values from db table (much like Excel \"autofilter\" feature)\n\nFor the first rendering of the table:\n\ninitialSearchValue\n    - optional initial value for column filter\n\nNote that `initialSearchValue` can be a value or a callable object.\nIf callable it will be called every time a new object is created.\n\nFor example:\n\n.. code:: python\n\n    class MyAjaxDatatableView(AjaxDatatableView):\n\n        def today():\n            return datetime.datetime.now().date()\n\n        ...\n\n        column_defs = [\n            ...\n            {\n                'name': 'created',\n                'choices': True,\n                'autofilter': True,\n                'initialSearchValue': today\n            },\n            ...\n        ]\n\n.. image:: screenshots/column_filtering.png\n\n\nFiltering multiple values\n-------------------------\n\nSearching on multiple values can be obtained by assigning a \"search value separator\"\nas in the following example::\n\n    search_values_separator = '+'\n\nIn this case, if the user inputs \"aaa + bbb\", the following search will be issued::\n\n    Q(\"aaa\") | Q(\"bbb\")\n\nThis works for text search on both global and columns filters.\n\nTODO: test with dates, choices and autofilter.\n\n\nComputed (placeholder) columns\n------------------------------\n\nYou can insert placeholder columns in the table, and feed their content with\narbitrary HTML.\n\nExample:\n\n.. code:: python\n\n    @method_decorator(login_required, name='dispatch')\n    class RegisterAjaxDatatableView(AjaxDatatableView):\n\n        model = Register\n        title = _('Registers')\n\n        column_defs = [\n            {\n                'name': 'id',\n                'visible': False,\n            }, {\n                'name': 'created',\n            }, {\n                'name': 'dow',\n                'title': 'Day of week',\n                'placeholder': True,\n                'searchable': False,\n                'orderable': False,\n                'className': 'highlighted',\n            }, {\n                ...\n            }\n        ]\n\n        def customize_row(self, row, obj):\n            days = ['monday', 'tuesday', 'wednesday', 'thyrsday', 'friday', 'saturday', 'sunday']\n            if obj.created is not None:\n                row['dow'] = '<b>%s</b>' % days[obj.created.weekday()]\n            else:\n                row['dow'] = ''\n            return\n\n.. image:: screenshots/003.png\n\nClipping results\n----------------\n\nSometimes you might want to clip results up to a given maximum length, to control the column width.\n\nThis can be obtained by specifying a positive value for the `max_length` column_spec attribute.\n\nResults will be clipped in both the column cells and in the column filter.\n\n.. image:: screenshots/clipping_results.png\n\nClipped results are rendered as html text as follows:\n\n.. code:: python\n\n    def render_clip_value_as_html(self, long_text, short_text, is_clipped):\n        \"\"\"\n        Given long and shor version of text, the following html representation:\n            <span title=\"long_text\">short_text[ellipsis]</span>\n\n        To be overridden for further customisations.\n        \"\"\"\n        return '<span title=\"{long_text}\">{short_text}{ellipsis}</span>'.format(\n            long_text=long_text,\n            short_text=short_text,\n            ellipsis='&hellip;' if is_clipped else ''\n        )\n\nYou can customise the rendering by overriding `render_clip_value_as_html()`\n\nReceiving table events\n----------------------\n\nThe following table events are broadcasted to your custom handlers, provided\nyou subscribe them:\n\n- initComplete(table)\n- drawCallback(table, settings)\n- rowCallback(table, row, data)\n- footerCallback(table, row, data, start, end, display)\n\nPlease note the the first parameter of the callback is always the event,\nand next parameters are additional data::\n\n    .trigger('foo', [1, 2]);\n\n    .on('foo', function(event, one, two) { ... });\n\n\nMore events triggers sent directly by DataTables.net are listed here:\n\n    https://datatables.net/reference/event/\n\nExample:\n\n.. code :: html\n\n    <div class=\"table-responsive\">\n        <table id=\"datatable\" width=\"100%\" class=\"table table-striped table-bordered dataTables-log\">\n        </table>\n    </div>\n\n    <script language=\"javascript\">\n        $(document).ready(function() {\n\n            // Subscribe \"rowCallback\" event\n            $('#datatable').on('rowCallback', function(event, table, row, data ) {\n                //$(e.target).show();\n                console.log('rowCallback(): table=%o', table);\n                console.log('rowCallback(): row=%o', row);\n                console.log('rowCallback(): data=%o', data);\n            });\n\n            // Initialize table\n            AjaxDatatableViewUtils.initialize_table(\n                $('#datatable'),\n                \"{% url 'frontend:object-datatable' model|app_label model|model_name %}\",\n                extra_option={},\n                extra_data={}\n            );\n        });\n    </script>\n\n\nOverridable AjaxDatatableView methods\n-------------------------------------\n\nget_initial_queryset()\n......................\n\nProvides the queryset to work with; defaults to **self.model.objects.all()**\n\nExample:\n\n.. code:: python\n\n    def get_initial_queryset(self, request=None):\n        if not request.user.view_all_clients:\n            queryset = request.user.related_clients.all()\n        else:\n            queryset = super().get_initial_queryset(request)\n        return queryset\n\nget_foreign_queryset()\n......................\n\nWhen collecting data for autofiltering in a \"foreign_field\" column, we need some data\nsource for doing the lookup.\n\nThe default implementation is as follows:\n\n.. code:: python\n\n    def get_foreign_queryset(self, request, field):\n        queryset = field.model.objects.all()\n        return queryset\n\nYou can override it for further reducing the resulting list.\n\ncustomize_row()\n...............\n\nCalled every time a new data row is required by the client, to let you further\ncustomize cell content\n\nExample:\n\n.. code:: python\n\n    def customize_row(self, row, obj):\n        # 'row' is a dictionary representing the current row, and 'obj' is the current object.\n        row['code'] = '<a class=\"client-status client-status-%s\" href=\"%s\">%s</a>' % (\n            obj.status,\n            reverse('frontend:client-detail', args=(obj.id,)),\n            obj.code\n        )\n        if obj.recipe is not None:\n            row['recipe'] = obj.recipe.display_as_tile() + ' ' + str(obj.recipe)\n        return\n\nrender_row_details()\n....................\n\nRenders an HTML fragment to show table row content in \"detailed view\" fashion,\nas previously explained later in the **Add row tools as first column** section.\nHaving `\"pk\"` in your column_defs list is needed to have the script get the object to render.\n\nSee also: `row details customization`_\n\nExample:\n\n.. code:: python\n\n    def render_row_details(self, pk, request=None):\n        client = self.model.objects.get(pk=pk)\n        ...\n        return render_to_string('frontend/pages/includes/client_row_details.html', {\n            'client': client,\n            ...\n        })\n\nOR you can have your own callback called instead (thanks to `PetrDlouhy <https://github.com/PetrDlouhy>`_):\n\n.. code:: html\n\n    AjaxDatatableViewUtils.initialize_table(\n        element,\n        url,\n        {\n            // extra_options\n            ...\n            detail_callback: function(data, tr) {\n                console.log('tr: %o', tr);\n                console.log('data: %o', data);\n\n                // for example: open a Bootstrap3 modal\n                $('.modal-body').html(data, 'details');\n                $('.modal').modal();\n            }\n        }, {\n            // extra_data\n            ...\n        },\n    );\n\nfooter_message()\n................\n\nYou can annotate the table footer with a custom message by overridding the\nfollowing View method.\n\n.. code:: python\n\n    def footer_message(self, qs, params):\n        \"\"\"\n        Overriden to append a message to the bottom of the table\n        \"\"\"\n        return None\n\nExample:\n\n.. code:: python\n\n    def footer_message(self, qs, params):\n        return 'Selected rows: %d' % qs.count()\n\n.. code:: html\n\n    <style>\n        .dataTables_wrapper .dataTables_extraFooter {\n            border: 1px solid blue;\n            color: blue;\n            padding: 8px;\n            margin-top: 8px;\n            text-align: center;\n        }\n    </style>\n\n.. image:: screenshots/005.png\n\ntoolbar_message()\n.................\n\nSame as footer_message() but appends message to toolbar:\n\n.. code:: python\n\n    def footer_message(self, qs, params):\n        return 'Selected rows: %d' % qs.count()\n\nrender_clip_value_as_html()\n...........................\n\nRenders clipped results as html span tag, providing the non-clipped value as title:\n\n.. code:: python\n\n    def render_clip_value_as_html(self, long_text, short_text, is_clipped):\n        \"\"\"\n        Given long and shor version of text, the following html representation:\n            <span title=\"long_text\">short_text[ellipsis]</span>\n\n        To be overridden for further customisations.\n        \"\"\"\n        return '<span title=\"{long_text}\">{short_text}{ellipsis}</span>'.format(\n            long_text=long_text,\n            short_text=short_text,\n            ellipsis='&hellip;' if is_clipped else ''\n        )\n\nOverride to customise the rendering of clipped cells.\n\nQueryset optimization\n=====================\n\nAs the purpose of this module is all about querysets rendering, any chance to optimize\ndata extractions from the database is more then appropriate.\n\nStarting with v2.3.0, AjaxDatatableView tries to burst performances in two ways:\n\n1) by using `only <https://docs.djangoproject.com/en/2.2/ref/models/querysets/#only>`_ to limit the number of columns in the result set\n\n2) by using `select_related <https://docs.djangoproject.com/en/2.2/ref/models/querysets/#only>`_ to minimize the number of queries involved\n\nThe parameters passed to only() and select_related() are inferred from `column_defs`.\n\nShould this cause any problem, you can disable queryset optimization in two ways:\n\n- globally: by activating the `AJAX_DATATABLE_DISABLE_QUERYSET_OPTIMIZATION` setting\n- per table: by setting to True the value of the `disable_queryset_optimization` attribute\n\nAlternatively, you can selectively disable the `only` or `select_related` optimization with the following flags:\n\n- self.disable_queryset_optimization_only\n- self.disable_queryset_optimization_select_related\n\nA real use case\n---------------\n\n(1) Plain queryset::\n\n       SELECT \"tasks_devicetesttask\".\"id\",\n              \"tasks_devicetesttask\".\"description\",\n              \"tasks_devicetesttask\".\"created_on\",\n              \"tasks_devicetesttask\".\"created_by_id\",\n              \"tasks_devicetesttask\".\"started_on\",\n              \"tasks_devicetesttask\".\"completed_on\",\n              \"tasks_devicetesttask\".\"job_id\",\n              \"tasks_devicetesttask\".\"status\",\n              \"tasks_devicetesttask\".\"mode\",\n              \"tasks_devicetesttask\".\"failure_reason\",\n              \"tasks_devicetesttask\".\"progress\",\n              \"tasks_devicetesttask\".\"log_text\",\n              \"tasks_devicetesttask\".\"author\",\n              \"tasks_devicetesttask\".\"order\",\n              \"tasks_devicetesttask\".\"appliance_id\",\n              \"tasks_devicetesttask\".\"serial_number\",\n              \"tasks_devicetesttask\".\"program_id\",\n              \"tasks_devicetesttask\".\"position\",\n              \"tasks_devicetesttask\".\"hidden\",\n              \"tasks_devicetesttask\".\"is_duplicate\",\n              \"tasks_devicetesttask\".\"notes\"\n       FROM \"tasks_devicetesttask\"\n       WHERE \"tasks_devicetesttask\".\"hidden\" = FALSE\n       ORDER BY \"tasks_devicetesttask\".\"created_on\" DESC\n\n    **[sql] (233ms) 203 queries with 182 duplicates**\n\n\n(2) With select_related()::\n\n       SELECT \"tasks_devicetesttask\".\"id\",\n              \"tasks_devicetesttask\".\"description\",\n              \"tasks_devicetesttask\".\"created_on\",\n              \"tasks_devicetesttask\".\"created_by_id\",\n              \"tasks_devicetesttask\".\"started_on\",\n              \"tasks_devicetesttask\".\"completed_on\",\n              \"tasks_devicetesttask\".\"job_id\",\n              \"tasks_devicetesttask\".\"status\",\n              \"tasks_devicetesttask\".\"mode\",\n              \"tasks_devicetesttask\".\"failure_reason\",\n              \"tasks_devicetesttask\".\"progress\",\n              \"tasks_devicetesttask\".\"log_text\",\n              \"tasks_devicetesttask\".\"author\",\n              \"tasks_devicetesttask\".\"order\",\n              \"tasks_devicetesttask\".\"appliance_id\",\n              \"tasks_devicetesttask\".\"serial_number\",\n              \"tasks_devicetesttask\".\"program_id\",\n              \"tasks_devicetesttask\".\"position\",\n              \"tasks_devicetesttask\".\"hidden\",\n              \"tasks_devicetesttask\".\"is_duplicate\",\n              \"tasks_devicetesttask\".\"notes\",\n              \"backend_appliance\".\"id\",\n              \"backend_appliance\".\"description\",\n              \"backend_appliance\".\"hidden\",\n              \"backend_appliance\".\"created\",\n              \"backend_appliance\".\"created_by_id\",\n              \"backend_appliance\".\"updated\",\n              \"backend_appliance\".\"updated_by_id\",\n              \"backend_appliance\".\"type\",\n              \"backend_appliance\".\"rotation\",\n              \"backend_appliance\".\"code\",\n              \"backend_appliance\".\"barcode\",\n              \"backend_appliance\".\"mechanical_efficiency_min\",\n              \"backend_appliance\".\"mechanical_efficiency_max\",\n              \"backend_appliance\".\"volumetric_efficiency_min\",\n              \"backend_appliance\".\"volumetric_efficiency_max\",\n              \"backend_appliance\".\"displacement\",\n              \"backend_appliance\".\"speed_min\",\n              \"backend_appliance\".\"speed_max\",\n              \"backend_appliance\".\"pressure_min\",\n              \"backend_appliance\".\"pressure_max\",\n              \"backend_appliance\".\"oil_temperature_min\",\n              \"backend_appliance\".\"oil_temperature_max\",\n              \"backend_program\".\"id\",\n              \"backend_program\".\"description\",\n              \"backend_program\".\"hidden\",\n              \"backend_program\".\"created\",\n              \"backend_program\".\"created_by_id\",\n              \"backend_program\".\"updated\",\n              \"backend_program\".\"updated_by_id\",\n              \"backend_program\".\"code\",\n              \"backend_program\".\"start_datetime\",\n              \"backend_program\".\"end_datetime\",\n              \"backend_program\".\"favourite\"\n       FROM \"tasks_devicetesttask\"\n       LEFT OUTER JOIN \"backend_appliance\" ON (\"tasks_devicetesttask\".\"appliance_id\" = \"backend_appliance\".\"id\")\n       LEFT OUTER JOIN \"backend_program\" ON (\"tasks_devicetesttask\".\"program_id\" = \"backend_program\".\"id\")\n       WHERE \"tasks_devicetesttask\".\"hidden\" = FALSE\n       ORDER BY \"tasks_devicetesttask\".\"created_on\" DESC\n\n    **[sql] (38ms) 3 queries with 0 duplicates**\n\n\n(3) With select_related() and only()::\n\n       SELECT \"tasks_devicetesttask\".\"id\",\n              \"tasks_devicetesttask\".\"started_on\",\n              \"tasks_devicetesttask\".\"completed_on\",\n              \"tasks_devicetesttask\".\"status\",\n              \"tasks_devicetesttask\".\"failure_reason\",\n              \"tasks_devicetesttask\".\"author\",\n              \"tasks_devicetesttask\".\"order\",\n              \"tasks_devicetesttask\".\"appliance_id\",\n              \"tasks_devicetesttask\".\"serial_number\",\n              \"tasks_devicetesttask\".\"program_id\",\n              \"tasks_devicetesttask\".\"position\",\n              \"backend_appliance\".\"id\",\n              \"backend_appliance\".\"code\",\n              \"backend_program\".\"id\",\n              \"backend_program\".\"code\"\n       FROM \"tasks_devicetesttask\"\n       LEFT OUTER JOIN \"backend_appliance\" ON (\"tasks_devicetesttask\".\"appliance_id\" = \"backend_appliance\".\"id\")\n       LEFT OUTER JOIN \"backend_program\" ON (\"tasks_devicetesttask\".\"program_id\" = \"backend_program\".\"id\")\n       WHERE \"tasks_devicetesttask\".\"hidden\" = FALSE\n       ORDER BY \"tasks_devicetesttask\".\"created_on\" DESC\n\n    **[sql] (19ms) 3 queries with 0 duplicates**\n\n\nApp settings\n============\n\n::\n\n    AJAX_DATATABLE_MAX_COLUMNS = 30\n    AJAX_DATATABLE_TRACE_COLUMNDEFS = False               #  enables debug tracing of applied column defs\n    AJAX_DATATABLE_TRACE_QUERYDICT = False                #  enables debug tracing of datatables requests\n    AJAX_DATATABLE_TRACE_QUERYSET = False                 #  enables debug tracing of applied query\n    AJAX_DATATABLE_TEST_FILTERS = False                   # trace results for each individual filter, for debugging purposes\n    AJAX_DATATABLE_DISABLE_QUERYSET_OPTIMIZATION = False  # all queryset optimizations are disabled\n    AJAX_DATATABLE_STRIP_HTML_TAGS = True                 # string HTML tags when rendering the table\n\nMore details\n============\n\nAdd row tools as first column\n-----------------------------\n\nYou can insert **AjaxDatatableView.render_row_tools_column_def()** as the first element\nin `column_defs` to obtain some tools at the beginning of each table row.\n\nIf `full_row_select=true` is specified as extra-option during table initialization,\nrow details can be toggled by clicking anywhere in the row.\n\n`datatables_views.py`\n\n.. code:: python\n\n    from django.contrib.auth.decorators import login_required\n    from django.utils.decorators import method_decorator\n\n    from ajax_datatable.views import AjaxDatatableView\n    from backend.models import Register\n\n\n    @method_decorator(login_required, name='dispatch')\n    class RegisterAjaxDatatableView(AjaxDatatableView):\n\n        model = Register\n        title = 'Registers'\n\n        column_defs = [\n            AjaxDatatableView.render_row_tools_column_def(),\n            {\n                'name': 'id',\n                'visible': False,\n            }, {\n            ...\n\nBy default, these tools will provide an icon to show and hide a detailed view\nbelow each table row.\n\nThe tools are rendered according to the template **ajax_datatable/row_tools.html**,\nwhich can be overridden.\n\nRow details are automatically collected via Ajax by calling again the views\nwith a specific **?action=details** parameters, and will be rendered by the\nmethod::\n\n    def render_row_details(self, pk, request=None)\n\nwhich you can further customize when needed.\n\nThe default behaviour provided by the base class if shown below:\n\n.. image:: screenshots/002.png\n\nrow details customization\n-------------------------\n\nThe default implementation of render_row_details() tries to load a template\nin the following order:\n\n- ajax_datatable/<app_label>/<model_name>/<render_row_details_template_name>\n- ajax_datatable/<app_label>/<render_row_details_template_name>\n- ajax_datatable/<render_row_details_template_name>\n\n(where the default value for <render_row_details_template_name> is \"render_row_details.html\")\n\nand, when found, uses it for rendering.\n\nThe template receives the following context::\n\n    html = template.render({\n        'model': self.model,\n        'model_admin': self.get_model_admin(),\n        'object': obj,\n        'extra_data': [extra_data dict retrieved from request]\n    }, request)\n\n`model_admin`, when available, can be used to navigate fieldsets (if defined)\nin the template, much like django's `admin/change_form.html` does.\n\nIf no template is available, a simple HTML table with all field values\nis built instead.\n\nIn all cases, the resulting HTML will be wrapped in the following structure:\n\n.. code :: html\n\n    <tr class=\"details\">\n        <td class=\"details\">\n            <div class=\"row-details-wrapper\" data-parent-row-id=\"PARENT-ROW-ID\">\n                ...\n\nFilter by global date range\n---------------------------\n\nWhen a `latest_by` column has been specified and `show_date_filter` is active,\na global date range filtering widget is provided, based on `jquery-ui.datepicker`:\n\n.. image:: screenshots/004a.png\n\nThe header of the column used for date filtering is decorated with the class\n\"latest_by\"; you can use it to customize it's rendering.\n\nYou can fully replace the widget with your own by providing a custom **fn_daterange_widget_initialize()**\ncallback at Module's initialization, as in the following example, where we\nuse `bootstrap.datepicker`:\n\n.. code:: html\n\n    AjaxDatatableViewUtils.init({\n        search_icon_html: '<i class=\"fa fa-search\"></i>',\n        language: {\n        },\n        fn_daterange_widget_initialize: function(table, data) {\n            var wrapper = table.closest('.dataTables_wrapper');\n            var toolbar = wrapper.find(\".toolbar\");\n            toolbar.html(\n                '<div class=\"daterange\" style=\"float: left; margin-right: 6px;\">' +\n                '{% trans \"From\" %}: <input type=\"text\" class=\"date_from\" autocomplete=\"off\">' +\n                '&nbsp;&nbsp;' +\n                '{% trans \"To\" %}: <input type=\"text\" class=\"date_to\" autocomplete=\"off\">' +\n                '</div>'\n            );\n            var date_pickers = toolbar.find('.date_from, .date_to');\n            date_pickers.datepicker();\n            date_pickers.on('change', function(event) {\n                // Annotate table with values retrieved from date widgets\n                var dt_from = toolbar.find('.date_from').data(\"datepicker\");\n                var dt_to = toolbar.find('.date_to').data(\"datepicker\");\n                table.data('date_from', dt_from ? dt_from.getFormattedDate(\"yyyy-mm-dd\") : '');\n                table.data('date_to', dt_to ? dt_to.getFormattedDate(\"yyyy-mm-dd\") : '');\n                // Redraw table\n                table.api().draw();\n            });\n        }\n    });\n\n.. image:: screenshots/004b.png\n\nDebugging\n---------\n\nIn case of errors, Datatables.net shows an alert popup:\n\n.. image:: screenshots/006.png\n\nYou can change it to trace the error in the browser console, insted:\n\n.. code:: javascript\n\n    // change DataTables' error reporting mechanism to throw a Javascript\n    // error to the browser's console, rather than alerting it.\n    $.fn.dataTable.ext.errMode = 'throw';\n\nAll details of Datatables.net requests can be logged to the console by activating\nthese setting::\n\n    AJAX_DATATABLE_TRACE_COLUMNDEFS = True\n    AJAX_DATATABLE_TRACE_QUERYDICT = True\n\nThe resulting query (before pagination) can be traced as well with::\n\n    AJAX_DATATABLE_TRACE_QUERYSET = True\n\nDebugging traces for date range filtering, column filtering or global filtering can be displayed\nby activating this setting::\n\n    AJAX_DATATABLE_TEST_FILTERS\n\n.. image:: screenshots/007.png\n\n\nGeneric tables (advanced topic)\n===============================\n\nChances are you might want to supply a standard user interface for listing\nseveral models.\n\nIn this case, it is possible to use a generic approach and avoid code duplications,\nas detailed below.\n\nFirst, we supply a generic view which receives a model as parameter,\nand passes it to the template used for rendering the page:\n\nfile `frontend/datatables_views.py`:\n\n.. code:: python\n\n    @login_required\n    def object_list_view(request, model, template_name=\"frontend/pages/object_list.html\"):\n        \"\"\"\n        Render the page which contains the table.\n        That will in turn invoke (via Ajax) object_datatable_view(), to fill the table content\n        \"\"\"\n        return render(request, template_name, {\n            'model': model,\n        })\n\nIn the urlconf, link to specific models as in the example below:\n\nfile `frontend/urls.py`:\n\n.. code:: python\n\n    path('channel/', datatables_views.object_list_view, {'model': backend.models.Channel, }, name=\"channel-list\"),\n\nThe template uses the `model` received in the context to display appropriate `verbose_name`\nand `verbose_name_plural` attributes, and to extract `app_label` and `model_name`\nas needed; unfortunately, we also had to supply some very basic helper templatetags,\nas the `_meta` attribute of the model is not directly visible in this context.\n\n.. code:: html\n\n    {% extends 'frontend/base.html' %}\n    {% load static datatables_view_tags i18n %}\n\n    {% block breadcrumbs %}\n        <li>\n            <a href=\"{% url 'frontend:index' %}\">{% trans 'Home' %}</a>\n        </li>\n        <li class=\"active\">\n            <strong>{{model|model_verbose_name_plural}}</strong>\n        </li>\n    {% endblock breadcrumbs %}\n\n    {% block content %}\n\n        {% testhasperm model 'view' as can_view_objects %}\n        {% if not can_view_objects %}\n            <h2>{% trans \"Sorry, you don't have the permission to view these objects\" %}</h2>\n        {% else %}\n\n            <div>\n                <h5>{% trans 'All' %} {{ model|model_verbose_name_plural }}</h5>\n                {% ifhasperm model 'add' %}\n                    <a href=\"#\">{% trans 'Add ...' %}</a>\n                {% endifhasperm %}\n            </div>\n            <div class=\"table-responsive\">\n                <table id=\"datatable\" width=\"100%\" class=\"table table-striped table-bordered table-hover dataTables-example\">\n                </table>\n            </div>\n\n            {% ifhasperm model 'add' %}\n                <a href=\"#\">{% trans 'Add ...' %}</a>\n            {% endifhasperm %}\n\n        {% endif %}\n\n    {% endblock content %}\n\n\n    {% block extrajs %}\n        <script language=\"javascript\">\n\n            $(document).ready(function() {\n                AjaxDatatableViewUtils.initialize_table(\n                    $('#datatable'),\n                    \"{% url 'frontend:object-datatable' model|app_label model|model_name %}\",\n                    extra_option={},\n                    extra_data={}\n                );\n            });\n\n        </script>\n    {% endblock %}\n\n\napp_label and model_name are just strings, and as such can be specified in an url.\n\nThe connection with the Django backend uses the following generic url::\n\n    {% url 'frontend:object-datatable' model|app_label model|model_name %}\n\nfrom `urls.py`::\n\n    # List any Model\n    path('datatable/<str:app_label>/<str:model_name>/', datatables_views.object_datatable_view, name=\"object-datatable\"),\n\nobject_datatable_view() is a lookup helper which navigates all AjaxDatatableView-derived\nclasses in the module and selects the view appropriate for the specific model\nin use:\n\nfile `frontend/datatables_views.py`:\n\n.. code:: python\n\n    import inspect\n\n    def object_datatable_view(request, app_label, model_name):\n\n        # List all AjaxDatatableView in this module\n        datatable_views = [\n            klass\n            for name, klass in inspect.getmembers(sys.modules[__name__])\n            if inspect.isclass(klass) and issubclass(klass, AjaxDatatableView)\n        ]\n\n        # Scan AjaxDatatableView until we find the right one\n        for datatable_view in datatable_views:\n            model = datatable_view.model\n            if (model is not None and (model._meta.app_label, model._meta.model_name) == (app_label, model_name)):\n                view = datatable_view\n                break\n\n        return view.as_view()(request)\n\nwhich for this example happens to be:\n\n.. code:: python\n\n    @method_decorator(login_required, name='dispatch')\n    class ChannelAjaxDatatableView(BaseAjaxDatatableView):\n\n        model = Channel\n        title = 'Channels'\n\n        column_defs = [\n            AjaxDatatableView.render_row_tools_column_def(),\n            {\n                'name': 'id',\n                'visible': False,\n            }, {\n                'name': 'description',\n            }, {\n                'name': 'code',\n            }\n        ]\n\nJavascript Code Snippets\n========================\n\nWorkaround: Adjust the column widths of all visible tables\n----------------------------------------------------------\n\n.. code:: javascript\n\n    setTimeout(function () {\n        AjaxDatatableViewUtils.adjust_table_columns();\n    }, 200);\n\nor maybe better:\n\n.. code:: javascript\n\n    var table = element.DataTable({\n        ...\n        \"initComplete\": function(settings) {\n            setTimeout(function () {\n                AjaxDatatableViewUtils.adjust_table_columns();\n            }, 200);\n        }\n\nwhere:\n\n.. code:: javascript\n\n    function adjust_table_columns() {\n        // Adjust the column widths of all visible tables\n        // https://datatables.net/reference/api/%24.fn.dataTable.tables()\n        $.fn.dataTable\n            .tables({\n                visible: true,\n                api: true\n            })\n            .columns.adjust();\n    }\n\n\nRedraw all tables\n-----------------\n\n.. code:: javascript\n\n    $.fn.dataTable.tables({\n        api: true\n    }).draw();\n\nRedraw table holding the current paging position\n------------------------------------------------\n\n.. code:: javascript\n\n    table = $(element).closest('table.dataTable');\n    $.ajax({\n        type: 'GET',\n        url: ...\n    }).done(function(data, textStatus, jqXHR) {\n        table.DataTable().ajax.reload(null, false);\n    });\n\nRedraw a single table row\n-------------------------\n\nTODO: THIS DOESN'T SEEM TO WORK PROPERLY 😭\n\n.. code:: javascript\n\n    table.DataTable().row(tr).invalidate().draw();\n\nExample:\n\n.. code:: javascript\n\n    var table = $(element).closest('table.dataTable');\n    var table_row_id = table.find('tr.shown').attr('id');\n    $.ajax({\n        type: 'POST',\n        url: ...\n    }).done(function(data, textStatus, jqXHR) {\n        table.DataTable().ajax.reload(null, false);\n\n        // Since we've update the record via Ajax, we need to redraw this table row\n        var tr = table.find('#' + table_row_id);\n        var row = table.DataTable().row(tr)\n        row.invalidate().draw();\n\n        // Hack: here we would like to enhance the updated row, by adding the 'updated' class;\n        // Since a callback is not available upon draw completion,\n        // let's use a timer to try later, and cross fingers\n        setTimeout(function() {\n            table.find('#' + table_row_id).addClass('updated');\n        }, 200);\n        setTimeout(function() {\n            table.find('#' + table_row_id).addClass('updated');\n        }, 1000);\n\n    });\n\nchange DataTables' error reporting mechanism\n--------------------------------------------\n\n.. code:: javascript\n\n    // change DataTables' error reporting mechanism to throw a Javascript\n    // error to the browser's console, rather than alerting it.\n    $.fn.dataTable.ext.errMode = 'throw';\n\n\nJS Utilities\n============\n\n- AjaxDatatableViewUtils.init(options)\n- AjaxDatatableViewUtils.initialize_table(element, url, extra_options={}, extra_data={})\n- AjaxDatatableViewUtils.after_table_initialization(table, data, url)\n- AjaxDatatableViewUtils.adjust_table_columns()\n- AjaxDatatableViewUtils.redraw_all_tables()\n- AjaxDatatableViewUtils.redraw_table(element)\n\nInternationalization\n--------------------\n\nYou can provide localized messages by initializing the AjaxDatatableViewUtils JS module\nas follow (example in italian):\n\n.. code:: javascript\n\n    AjaxDatatableViewUtils.init({\n        search_icon_html: '<i class=\"fa fa-search\" style=\"font-size: 16px\"></i>',\n        language: {\n            \"decimal\":        \"\",\n            \"emptyTable\":     \"Nessun dato disponibile\",\n            \"info\":           \"Visualizzate da _START_ a _END_ di _TOTAL_ righe\",\n            \"infoEmpty\":      \"\",\n            \"infoFiltered\":   \"(filtered from _MAX_ total entries)\",\n            \"infoPostFix\":    \"\",\n            \"thousands\":      \",\",\n            \"lengthMenu\":     \"Visualizza _MENU_ righe per pagina\",\n            \"loadingRecords\": \"Caricamento in corso ...\",\n            \"processing\":     \"Elaborazione in corso ...\",\n            \"search\":         \"Cerca:\",\n            \"zeroRecords\":    \"Nessun record trovato\",\n            \"paginate\": {\n                \"first\":      \"Prima\",\n                \"last\":       \"Ultima\",\n                \"next\":       \">>\",\n                \"previous\":   \"<<\"\n            },\n            \"aria\": {\n                \"sortAscending\":  \": activate to sort column ascending\",\n                \"sortDescending\": \": activate to sort column descending\"\n            }\n        }\n    });\n\n\nYou can do this, for example, in your \"base.html\" template, and it will be in effect\nfor all subsequent instantiations:\n\n.. code:: html\n\n    <script language=\"javascript\">\n        $(document).ready(function() {\n            AjaxDatatableViewUtils.init({\n                ...\n            });\n        });\n    </script>\n\n\nApplication examples\n====================\n\nAdding a button for editing\n---------------------------\n\nSince the list of table columns is controlled by the library, based on column_defs list\nspecified in the AjaxDatatableView class, you can't insert a custom column \"javascript-side\".\n\nHowever, you can easily do it \"python-side\":\n\n.. code:: python\n\n    class ArtistAjaxDatatableView(AjaxDatatableView):\n\n        ...\n\n        column_defs = [\n            ...\n            {'name': 'edit', 'title': 'Edit', 'placeholder': True, 'searchable': False, 'orderable': False, },\n            ...\n        ]\n\n        def customize_row(self, row, obj):\n            row['edit'] = \"\"\"\n                <a href=\"#\" class=\"btn btn-info btn-edit\"\n                   onclick=\"var id=this.closest('tr').id.substr(4); alert('Editing Artist: ' + id); return false;\">\n                   Edit\n                </a>\n            \"\"\"\n            ...\n\n.. image:: screenshots/custom-row-button.png\n\nIn the snippet above, we added an 'edit' column, customizing it's content via customize_row().\n\nNote how we retrieved the object id from the \"row-NNN\" table row attribute in the \"onclick\" handler.\n\nCustomize row details by rendering prettified json fields\n---------------------------------------------------------\n\n.. image:: screenshots/009.png\n\n.. code:: python\n\n    import jsonfield\n    from ajax_datatable.views import AjaxDatatableView\n    from .utils import json_prettify\n\n\n    class MyAjaxDatatableView(AjaxDatatableView):\n\n        ...\n\n        def render_row_details(self, pk, request=None):\n\n            obj = self.model.objects.get(pk=pk)\n            fields = [f for f in self.model._meta.get_fields() if f.concrete]\n            html = '<table class=\"row-details\">'\n            for field in fields:\n                value = getattr(obj, field.name)\n                if isinstance(field, jsonfield.JSONField):\n                    value = json_prettify(value)\n                html += '<tr><td>%s</td><td>%s</td></tr>' % (field.name, value)\n            html += '</table>'\n            return html\n\nwhere:\n\n.. code:: python\n\n    import json\n    from pygments import highlight\n    from pygments.lexers import JsonLexer\n    from pygments.formatters import HtmlFormatter\n    from django.utils.safestring import mark_safe\n\n\n    def json_prettify_styles():\n        \"\"\"\n        Used to generate Pygment styles (to be included in a .CSS file) as follows:\n            print(json_prettify_styles())\n        \"\"\"\n        formatter = HtmlFormatter(style='colorful')\n        return formatter.get_style_defs()\n\n\n    def json_prettify(json_data):\n        \"\"\"\n        Adapted from:\n        https://www.pydanny.com/pretty-formatting-json-django-admin.html\n        \"\"\"\n\n        # Get the Pygments formatter\n        formatter = HtmlFormatter(style='colorful')\n\n        # Highlight the data\n        json_text = highlight(\n            json.dumps(json_data, indent=2),\n            JsonLexer(),\n            formatter\n        )\n\n        # # remove leading and trailing brances\n        # json_text = json_text \\\n        #     .replace('<span class=\"p\">{</span>\\n', '') \\\n        #     .replace('<span class=\"p\">}</span>\\n', '')\n\n        # Get the stylesheet\n        #style = \"<style>\" + formatter.get_style_defs() + \"</style>\"\n        style = ''\n\n        # Safe the output\n        return mark_safe(style + json_text)\n\n\nChange row color based on row content\n-------------------------------------\n\n.. image:: screenshots/010.png\n\nFirst, we mark the relevant info with a specific CSS class, so we can search\nfor it later\n\n.. code:: html\n\n    column_defs = [\n        ...\n        }, {\n            'name': 'error_counter',\n            'title': 'errors',\n            'className': 'error_counter',\n        }, {\n        ...\n    ]\n\nHave a callback called after each table redraw\n\n.. code:: javascript\n\n    var table = element.DataTable({\n        ...\n    });\n\n    table.on('draw.dt', function(event) {\n        onTableDraw(event);\n    });\n\nthen change the rendered table as needed\n\n.. code:: javascript\n\n    var onTableDraw = function (event) {\n\n        var html_table = $(event.target);\n        html_table.find('tr').each(function(index, item) {\n\n            try {\n                var row = $(item);\n                text = row.children('td.error_counter').first().text();\n                var error_counter = isNaN(text) ? 0 : parseInt(text);\n\n                if (error_counter > 0) {\n                    row.addClass('bold');\n                }\n                else {\n                    row.addClass('grayed');\n                }\n            }\n                catch(err) {\n            }\n\n        });\n    }\n\n**or use a rowCallback as follows:**\n\n.. code:: html\n\n    // Subscribe \"rowCallback\" event\n    $('#datatable').on('rowCallback', function(event, table, row, data ) {\n        $(row).addClass(data.read ? 'read' : 'unread');\n    }\n\nThis works even if the 'read' column we're interested in is actually not visible.\n\n\nModify table content on the fly (via ajax)\n------------------------------------------\n\n.. image:: screenshots/008.png\n\nRow details customization:\n\n.. code:: javascript\n\n    def render_row_details(self, pk, request=None):\n\n        obj = self.model.objects.get(pk=pk)\n        html = '<table class=\"row-details\">'\n        html += \"<tr><td>alarm status:</td><td>\"\n        for choice in BaseTask.ALARM_STATUS_CHOICES:\n            # Lo stato corrente lo visualizziamo in grassetto\n            if choice[0] == obj.alarm:\n                html += '<b>%s</b>&nbsp;' % (choice[1])\n            else:\n                # Se non \"unalarmed\", mostriamo i link per cambiare lo stato\n                # (tutti tranne \"unalarmed\")\n                if obj.alarm != BaseTask.ALARM_STATUS_UNALARMED and choice[0] != BaseTask.ALARM_STATUS_UNALARMED:\n                    html += '<a class=\"set-alarm\" href=\"#\" onclick=\"set_row_alarm(this, \\'%s\\', %d); return false\">%s</a>&nbsp;' % (\n                        str(obj.pk),\n                        choice[0],\n                        choice[1]\n                    )\n        html += '</td></tr>'\n\nClient-side code:\n\n.. code:: javascript\n\n    <script language=\"javascript\">\n\n        function set_row_alarm(element, task_id, value) {\n            $(\"body\").css(\"cursor\", \"wait\");\n            //console.log('set_row_alarm: %o %o %o', element, task_id, value);\n            table = $(element).closest('table.dataTable');\n            //console.log('table id: %o', table.attr('id'));\n\n            $.ajax({\n                type: 'GET',\n                url: sprintf('/set_alarm/%s/%s/%d/', table.attr('id'), task_id, value),\n                dataType: 'html'\n            }).done(function(data, textStatus, jqXHR) {\n                table.DataTable().ajax.reload(null, false);\n            }).always(function( data, textStatus, jqXHR) {\n                $(\"body\").css(\"cursor\", \"default\");\n            });\n        }\n\nServer-side code:\n\n.. code:: javascript\n\n    urlpatterns = [\n        ...\n        path('set_alarm/<str:table_id>/<uuid:task_id>/<int:new_status>/',\n            views.set_alarm,\n            name=\"set_alarm\"),\n    ]\n\n    @login_required\n    def set_alarm(request, table_id, task_id, new_status):\n\n        # Retrieve model from table id\n        # Example table_id:\n        #   'datatable_walletreceivetransactionstask'\n        #   'datatable_walletcheckstatustask_summary'\n        model_name = table_id.split('_')[1]\n        model = apps.get_model('tasks', model_name)\n\n        # Retrieve task\n        task = get_object_by_uuid_or_404(model, task_id)\n\n        # Set alarm value\n        task.set_alarm(request, new_status)\n\n        return HttpResponse('ok')\n\nPossible future improvements\n============================\n\nCheck these extensions:\n-----------------------\n\n- `Table row selection <https://datatables.net/extensions/select/>`_\n- `Export table data to excel of pdf <https://datatables.net/extensions/buttons/>`_\n- `Responsive table <https://datatables.net/extensions/responsive/>`_\n\nColumn rendering\n----------------\n\n- specific rendering for boolean columns\n\n\nColumn filtering\n----------------\n\nadd a specific widget for dates\n...............................\n\nCurrently, an exact match is applied; a date-range selection would be better;\nreferences:\n\n- https://datatables.net/plug-ins/filtering/row-based/range_dates\n- https://datatables.net/extensions/select/\n- https://github.com/RobinDev/jquery.dataTables.columnFilter.js?files=1\n\nsupport for optional autocompletion widget\n..........................................\n\n- https://github.com/yourlabs/django-autocomplete-light\n- https://github.com/crucialfelix/django-ajax-selects\n\nadd a specific widget for boolean fields\n........................................\n\nA checkbox or a select\n\n\n\n\n\nHistory\n=======\n\nv4.4.5\n------\n* Remove pytz since it's deprecated in Django 4.0 and will be removed in Django 5.0\n\nv4.4.4\n------\n* few changes to allow the initialization of a DatatableView offline (for example, to export a filtered queryset from a background process)\n\nv4.4.3\n------\n* assign '__iexact', instead of '__icontains', as default 'lookup_field' value for columns with choices\n* added toolbar_message(): same as footer_message(), but appends message to toolbar\n\nv4.4.2\n------\n* fix: searching on a date/datetime field: when the value entered is not a valid date, we clear the table content to give a feedback to the user\n\nv4.4.1\n------\n* fix: when STRIP_HTML_TAGS is active, None was rendered as 'None' instead of ''\n\nv4.4.0\n------\n* Prepare for Django 4.0\n* Support choice lookup for m2m_foreign_field (many thanks to Martin Schwier and Etienne Pouliot)\n* Fix Multiple search values when you set search_values_separator = '+' and try to search for term with + in it (many thanks to Petr Dlouhý)\n* POSSIBLE INCOMPATIBLE CHANGE: for security reason, HTML tags are now stripped by default in the rendered table; you can disable this setting AJAX_DATATABLE_STRIP_HTML_TAGS = False (thus restoring the previous behaviour); many thanks to Mich \"Mike3285\"\n\nv4.3.1\n------\n* Add custom lookup field; thanks to Javier Clavero Álvarez <jclaveroalvarez@gmail.com>\n\nv4.3.0\n------\n* Add support for ManyToMany field (many thanks to Etienne Pouliot); REQUIRES PYTHON 3.6\n* POSSIBLE INCOMPATIBLE CHANGE: PYTHON >= 3.6 REQUIRED\n* Fix #35: prevent ZeroDivisionError\n\nv4.2.1\n------\n* Example project cleanup\n* Added \"side filters\" sample\n* Readme updated\n\nv4.2.0\n------\n* deliver extra_data to render_row_details()\n* Allow to set detail callback, i.e. to display it in modal (thanks to `PetrDlouhy <https://github.com/PetrDlouhy>`_)\n* Fetch 'csrfmiddlewaretoken' when csrftoken cookie is set to HttpOnly (thanks to `shuki25 <https://github.com/shuki25>`_)\n\nv4.1.7\n------\n* Allow to set order field for column (thanks Petr Dlouhý)\n\nv4.1.6\n------\n\n* Unused template 'datatable.html' removed.\n* Fix issues #2 and #8\n* Fix issue #9\n* Raise an exception when searching over a ManyToManyField (not supported yet)\n\nv4.1.5\n------\n* Edit button example\n* Better row-tools style (fix for Firefox)\n\nv4.1.4\n------\n* foreign_fields: render with __str__() if no attribute has been specified by 'foreign_field'\n* [fix] added missing csrftoken header in first POST call (initialize_table())\n* selectively disable the `only` or `select_related` queryset optimization\n\nv4.1.3\n------\n* Filters: proper lookup choices for foreign columns\n* search_in_choices(): match substring instead of startswith()\n* Filter tracing: serialize with DjangoJSONEncoder\n\nv4.1.2\n------\n* pass \"extra_data\" during table initialization\n\nv4.1.1\n------\n* [fix] Restore capability to use both global and column filtering at the same time\n* improved tracing (optionally uses sqlparse, termcolor and pygments)\n\nv4.1.0\n------\n* Avoid duplicate column names\n* Add a border to \"plus\" and \"minus\" icons\n* Readme: added an example on how to use extra_data for initial queryset filtering\n* Improved layout of global date filters for easier style customization\n* Explicitly check field existence when initial order is expressed with fieldnames\n* Cleanup full_row_select option\n* [fix] Treat DateTimeField properly in filter_queryset_by_date_range()\n* App settings for debug tracing renamed\n\nv4.0.8\n------\n* Recover missing commits from develp\n\nv4.0.7\n------\n* [TODO] check for unwanted side-effects here: ...\n* ... Prevent click to move the HTML page to the top\n* Improved example project\n\nv4.0.6\n------\n* Accept the more generic \"pk\" column name instead of \"id\"; \"id\" still supported for backward compatibility\n* In the example project: a new page has been added to play with a model with a custom PK column name\n\nv4.0.5\n------\n* classifiers added to setup.py\n\nv4.0.4\n------\n* fix Readme\n\nv4.0.3\n------\n* [fix] accept anonymous POSTs\n* Another (this time really minimal) example working project\n\nv4.0.2\n------\n* overridable `render_row_details_template_name` attribute added\n* support to search multiple values (see `search_values_separator`)\n\nv4.0.1\n------\n* A few typo fixes here and there\n\nv4.0.0\n------\n* package renamed from `django-datatables-view` to `django-ajax-datatable`\n* published on PyPI\n* example project added\n* setup of demo site `http://django-ajax-datatable-demo.brainstorm.it`\n\nv3.2.3\n------\n* \"data-parent-row-id\" attribute added to details row\n\nv3.2.2\n------\n* accept positions expressed as column names in initial_order[]\n\nv3.2.1\n------\n* add className to filters\n* improved filtering with choices by including foreign_fields\n* optional \"boolean\" column attribute to treat calculated column as booleans on explicit request\n* optional \"max_length\" column attribute to clip results\n\nv3.2.0\n------\n* Automatic addition of table row ID (see `get_table_row_id()`)\n* `request` parameter added to `prepare_results()` and `get_response_dict()`\n\nv3.1.4\n------\n* fix checkbox and radio buttons not working in a form embedded in the details row when full_row_select is active\n\nv3.1.3\n------\n* Better behaviour for full_row_select\n\nv3.1.2\n------\n* `initialSearchValue` can now be a value or a callable object\n\nv3.1.1\n------\n* Silly JS fix\n\nv3.1.0\n------\n* choices / autofilter support for column filters\n* optional *initialSearchValue* for column filters\n* **Backward incompatible change**: any unrecognized column_defs attribute will raises an exception\n\nv3.0.4\n------\n* Support length_menu = -1 (which means: \"all\")\n\nv3.0.3\n------\n* Use `full_row_select=true` to toggled row details by clicking anywhere in the row\n\nv3.0.2\n------\n* Sanity check for initial_order[]\n\nv3.0.1\n------\n* js fix (same as v2.3.5)\n\nv3.0.0\n------\n* Bump major version to welcome Django 3\n\nv2.3.5\n------\n* js fix\n\nv2.3.4\n------\n* Add support for Django 3.0, drop Python 2\n\nv.2.3.3\n-------\n* Some JS utilities added\n\nv2.3.2\n------\n* improved queryset optimization\n\nv2.3.1\n------\n* fix queryset optimization\n\nv2.3.0\n------\n* queryset optimization\n\nv2.2.9\n------\n* optional extra_data dictionary accepted by initialize_table()\n\nv2.2.8\n------\n* Remove `table-layout: fixed;` style from HTML table, as this causes problems in the columns' widths computation\n\nv2.2.7\n------\n* Explicitly set width of \"row tools\" column\n* Localize \"search\" prompt in column filters\n\nv2.2.6\n------\n* Experimental: Optionally control the (minimum) width of each single column\n\nv2.2.5\n------\n* cleanup\n\nv2.2.4\n------\n* optionally specified extra options to initialize_table()\n\nv2.2.3\n------\n* accept language options\n\nv2.2.2\n------\n* fix default footer\n\nv2.2.1\n------\n* README revised\n\nv2.2.0\n------\n* Merge into master\n\nv2.1.3\n------\n* Remove initialize_datatable() from main project and replace with DatatablesViewUtils.initialize_table() to share common behaviour\n* Notify Datatable subscribers with various events\n* Cleanup global filtering on dates range\n* Derived view class can now specify 'latest_by' when different from model.get_latest_by\n* Documentation revised\n\nv2.1.2\n------\n* basic support for DateField and DateTimeField filtering (exact date match)\n\nv2.1.1\n------\n* choices lookup revised\n\nv2.1.0\n------\n* `static/datatables_view/js/datatables_utils.js` renamed as `static/datatables_view/js/utils.js`\n* js helper encapsulated in DatatablesViewUtils module\n* First \"almost\" working column filtering - good enought for text search\n\nv2.0.6\n------\n* Accept either GET or POST requests\n\nv2.0.5\n------\n* Global \"get_latest_by\" filtering improved\n\nv2.0.4\n------\n* Filter tracing (for debugging)\n\nv2.0.0\n------\n* DatatablesView refactoring: columns_specs[] used as a substitute for columns[],searchable_columns[] and foreign_fields[]\n\nv1.2.4\n------\n* recognize datatime.date column type\n\nv1.2.3\n------\n* render_row_details() passes model_admin to the context, to permit fieldsets navigation\n\nv1.2.2\n------\n* generic tables explained\n* render_row_details customizable via templates\n\nv1.2.1\n------\n* merged PR #1 from Thierry BOULOGNE\n\nv1.2.0\n------\n* Incompatible change: postpone column initialization and pass the request to get_column_defs() for runtime table layout customization\n\nv1.0.1\n------\n* fix choices lookup\n\nv1.0.0\n------\n* fix search\n* better distribution (make sure templates and statics are included)\n\nv0.0.2\n------\n* Package version added\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/morlandi/django-ajax-datatable",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ajax-datatable",
    "package_url": "https://pypi.org/project/django-ajax-datatable/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-ajax-datatable/",
    "project_urls": {
      "Homepage": "http://github.com/morlandi/django-ajax-datatable"
    },
    "release_url": "https://pypi.org/project/django-ajax-datatable/4.4.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Helper class to integrate Django with datatables",
    "version": "4.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16843576,
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cccd7291cf7a67d3dee2546f9a1c1c5f214c682411fe930eccef7e8b019792df",
          "md5": "029b215002a4ac6ea45e22821eb71148",
          "sha256": "4d41df9c1fd15d28266d508040801c9515eb205188946785c2be315e36be360c"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "029b215002a4ac6ea45e22821eb71148",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56490,
        "upload_time": "2020-09-22T10:10:49",
        "upload_time_iso_8601": "2020-09-22T10:10:49.302247Z",
        "url": "https://files.pythonhosted.org/packages/cc/cd/7291cf7a67d3dee2546f9a1c1c5f214c682411fe930eccef7e8b019792df/django_ajax_datatable-4.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eebd847dd63c7fac92e38f1cdd4c68bea9a0fe0802e138a09c03f83a99fbd2bb",
          "md5": "1510d7cebd27c7a4bd212840e7f26f99",
          "sha256": "2ab76d8e627a731282aeaeb05507c07a6f146ff289102b8f3ea81f645aededce"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1510d7cebd27c7a4bd212840e7f26f99",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56467,
        "upload_time": "2020-09-22T10:47:46",
        "upload_time_iso_8601": "2020-09-22T10:47:46.475776Z",
        "url": "https://files.pythonhosted.org/packages/ee/bd/847dd63c7fac92e38f1cdd4c68bea9a0fe0802e138a09c03f83a99fbd2bb/django_ajax_datatable-4.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05fe2fd912a082317d5f1f49358943af860530eae8241e61ff1d6341b478588e",
          "md5": "412a4c2131406620208e5b489b05847c",
          "sha256": "87ee427a601538e578ad8d5a4d93aa3ee264a969a856d185477ade81a43f2bfe"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "412a4c2131406620208e5b489b05847c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57175,
        "upload_time": "2020-09-23T13:46:03",
        "upload_time_iso_8601": "2020-09-23T13:46:03.755726Z",
        "url": "https://files.pythonhosted.org/packages/05/fe/2fd912a082317d5f1f49358943af860530eae8241e61ff1d6341b478588e/django_ajax_datatable-4.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f78047e84e4acd51734c688b645e99207067ca4a5dcf0406952a97a279ede9d9",
          "md5": "99f40911a772440273347555c92985ca",
          "sha256": "c33458cbaf98a5066f620ca0e990c0195ff8b8e95a18f2cd4f4fbed7cf4f27cc"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99f40911a772440273347555c92985ca",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57458,
        "upload_time": "2020-09-24T15:49:38",
        "upload_time_iso_8601": "2020-09-24T15:49:38.392525Z",
        "url": "https://files.pythonhosted.org/packages/f7/80/47e84e4acd51734c688b645e99207067ca4a5dcf0406952a97a279ede9d9/django_ajax_datatable-4.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e3779de0641e2f68e56e2c793c34caf31f617f276242d164d605b61a2d4707",
          "md5": "51ddf16250971c3830a5ae21c4935a85",
          "sha256": "851b79eba13ec67f30881a2871bad90ab369432526b50978f8abd56e23a6747b"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51ddf16250971c3830a5ae21c4935a85",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57719,
        "upload_time": "2020-09-24T17:28:34",
        "upload_time_iso_8601": "2020-09-24T17:28:34.769557Z",
        "url": "https://files.pythonhosted.org/packages/e6/e3/779de0641e2f68e56e2c793c34caf31f617f276242d164d605b61a2d4707/django_ajax_datatable-4.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5e4153b5f52639960e07170281a14dfce27446be065a041ae3f1bec6529dc23",
          "md5": "84fcfb600e1d8cc95ac5b36b7e16e1b9",
          "sha256": "d0c18fd953056e30c89102dd8f400437c9f744ddc5934dc06a2bb791c88f8265"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84fcfb600e1d8cc95ac5b36b7e16e1b9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55726,
        "upload_time": "2020-09-25T08:35:00",
        "upload_time_iso_8601": "2020-09-25T08:35:00.479421Z",
        "url": "https://files.pythonhosted.org/packages/c5/e4/153b5f52639960e07170281a14dfce27446be065a041ae3f1bec6529dc23/django_ajax_datatable-4.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc58c01bbd878a220f278c914f862ee1bfce9c880da68efacb6bdd4889fc847",
          "md5": "ef5297c407696517eab9d9ea7d37d005",
          "sha256": "753320e13245105b295f62f2b78fa28ea059495dd811fd61870ff09838b508e1"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef5297c407696517eab9d9ea7d37d005",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55725,
        "upload_time": "2020-10-20T16:04:05",
        "upload_time_iso_8601": "2020-10-20T16:04:05.674780Z",
        "url": "https://files.pythonhosted.org/packages/3b/c5/8c01bbd878a220f278c914f862ee1bfce9c880da68efacb6bdd4889fc847/django_ajax_datatable-4.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18bdbb7d965709d9e1b998f9c20315636466f136de111cf7f0b202cd7c2edc3",
          "md5": "3a5a307b76d733ef5625dbc6e98f85b6",
          "sha256": "f5ebbffbbf63fc0e2649c2c7f4e8c7851ef290994a93acf66a03430a77e9e6bb"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.0.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a5a307b76d733ef5625dbc6e98f85b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55806,
        "upload_time": "2020-10-20T16:10:27",
        "upload_time_iso_8601": "2020-10-20T16:10:27.786788Z",
        "url": "https://files.pythonhosted.org/packages/b1/8b/dbb7d965709d9e1b998f9c20315636466f136de111cf7f0b202cd7c2edc3/django_ajax_datatable-4.0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "674c9357fe450806ea1b5e28a4367657e443cffc35f0bf265d74e654449e92a2",
          "md5": "4f479d0eee4f9d0074ca26e95d287e6e",
          "sha256": "2c9da5546891f71607e54c7884c67977f818853ece6c0d25af658833298a8886"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f479d0eee4f9d0074ca26e95d287e6e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56970,
        "upload_time": "2020-10-22T15:09:37",
        "upload_time_iso_8601": "2020-10-22T15:09:37.026779Z",
        "url": "https://files.pythonhosted.org/packages/67/4c/9357fe450806ea1b5e28a4367657e443cffc35f0bf265d74e654449e92a2/django_ajax_datatable-4.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64c07be3adc08270f20eee44ca36c0fc9c9181c0119d285507c3119017e965f8",
          "md5": "4b59eee1e5c6e1646d059a4528b6f5a3",
          "sha256": "96c68e81a83333a72ba1546e8331a6778d3b942d44fe153b952f562d9c48ef1d"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b59eee1e5c6e1646d059a4528b6f5a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57608,
        "upload_time": "2020-10-24T07:08:37",
        "upload_time_iso_8601": "2020-10-24T07:08:37.082969Z",
        "url": "https://files.pythonhosted.org/packages/64/c0/7be3adc08270f20eee44ca36c0fc9c9181c0119d285507c3119017e965f8/django_ajax_datatable-4.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f528c0d74ec3c29ae8838b9fcccdf3e2f87b57556e678b872ffdf8aa07c1b806",
          "md5": "4868090c12a4b736afb9f36b3d8cb54e",
          "sha256": "b1bd1a64838e7c3f2b706b48ec3baf90cbf558b3a6b359c2d66f12215dcd76fa"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4868090c12a4b736afb9f36b3d8cb54e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57649,
        "upload_time": "2020-10-26T08:26:52",
        "upload_time_iso_8601": "2020-10-26T08:26:52.802421Z",
        "url": "https://files.pythonhosted.org/packages/f5/28/c0d74ec3c29ae8838b9fcccdf3e2f87b57556e678b872ffdf8aa07c1b806/django_ajax_datatable-4.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6415cee5cfd0297ba0894138032ba01a5ee6f00df12ca1b2aeb8ba6091cc503",
          "md5": "d6acbca814aee47b4f5301628095b309",
          "sha256": "e4499866ce13a802cd9d404d86ac316f2da5a59322ac74a1f7c0e23e84bacb76"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6acbca814aee47b4f5301628095b309",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60007,
        "upload_time": "2020-10-27T16:26:32",
        "upload_time_iso_8601": "2020-10-27T16:26:32.638777Z",
        "url": "https://files.pythonhosted.org/packages/e6/41/5cee5cfd0297ba0894138032ba01a5ee6f00df12ca1b2aeb8ba6091cc503/django_ajax_datatable-4.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c21c3cf555cf8d21528a9014d712c92d74fce7d1022ef8d2e029758be9bebf6",
          "md5": "19fc7dd78112481bbd5d328cc3b68b8c",
          "sha256": "399a8e4ac05f4f6496bf6f2428e7da65893c3092988a72980ba02c6cec047af3"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19fc7dd78112481bbd5d328cc3b68b8c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58074,
        "upload_time": "2020-11-15T08:54:28",
        "upload_time_iso_8601": "2020-11-15T08:54:28.841372Z",
        "url": "https://files.pythonhosted.org/packages/5c/21/c3cf555cf8d21528a9014d712c92d74fce7d1022ef8d2e029758be9bebf6/django_ajax_datatable-4.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f72e26b4cfe9a3e041ab91973b33895e3ab6d5f1c389aec922d33eafc0a571a",
          "md5": "72616edf8557df3b6905b5278253fd74",
          "sha256": "cfcd95ba42346552ea3afbb3febf47f69cb39ea21d5a4d68a754d8a29125fe13"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72616edf8557df3b6905b5278253fd74",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60670,
        "upload_time": "2021-01-07T17:00:43",
        "upload_time_iso_8601": "2021-01-07T17:00:43.765022Z",
        "url": "https://files.pythonhosted.org/packages/3f/72/e26b4cfe9a3e041ab91973b33895e3ab6d5f1c389aec922d33eafc0a571a/django_ajax_datatable-4.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f629c8ab50319b21c28602322a4f02f225f80bd479a93abd6fe13daf5e7644ff",
          "md5": "d0a4ec47ed381985487443863442cfba",
          "sha256": "6dc8eed9af9c5a23c2dcfc887241ff9e2d516f3563e5984e22b74629ead4effc"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0a4ec47ed381985487443863442cfba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56809,
        "upload_time": "2021-03-30T09:05:22",
        "upload_time_iso_8601": "2021-03-30T09:05:22.956674Z",
        "url": "https://files.pythonhosted.org/packages/f6/29/c8ab50319b21c28602322a4f02f225f80bd479a93abd6fe13daf5e7644ff/django_ajax_datatable-4.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e8a574209bb2e9f82641449f6aafa4e1e6b60b837b3c91710711cc2ee4cf9ac",
          "md5": "ee2fe4adc25eb997c0b2e89532f9e97f",
          "sha256": "87b780abe812b48d3f4771a7658b749ab47a1d6cd03a5cd1b32f3e08760b6ae9"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee2fe4adc25eb997c0b2e89532f9e97f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58835,
        "upload_time": "2021-04-15T07:34:16",
        "upload_time_iso_8601": "2021-04-15T07:34:16.203054Z",
        "url": "https://files.pythonhosted.org/packages/0e/8a/574209bb2e9f82641449f6aafa4e1e6b60b837b3c91710711cc2ee4cf9ac/django_ajax_datatable-4.1.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd036a1de4dd3a4660fc0b3c880565a030d2db20e1b6b91c3dca0aaa27ffa43",
          "md5": "94e3e6e0482dd4611fabc47b6c07c3de",
          "sha256": "b7bfdd1caf1636e3357ab4796015bddd023ef6c39379354839d008ddbbbc146a"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94e3e6e0482dd4611fabc47b6c07c3de",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58534,
        "upload_time": "2021-05-28T16:16:10",
        "upload_time_iso_8601": "2021-05-28T16:16:10.549842Z",
        "url": "https://files.pythonhosted.org/packages/bf/d0/36a1de4dd3a4660fc0b3c880565a030d2db20e1b6b91c3dca0aaa27ffa43/django_ajax_datatable-4.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e210308b679e45160c0e94fc31df03c4df874fbe0d8f6c27aad392f373c17fe",
          "md5": "495d2511eba34b147b5a93b10ab3f7a7",
          "sha256": "5ce26b00a128dd19ce6fae067f65518311db6904f13cc577471415827150f46e"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "495d2511eba34b147b5a93b10ab3f7a7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57761,
        "upload_time": "2021-06-06T15:23:53",
        "upload_time_iso_8601": "2021-06-06T15:23:53.871842Z",
        "url": "https://files.pythonhosted.org/packages/8e/21/0308b679e45160c0e94fc31df03c4df874fbe0d8f6c27aad392f373c17fe/django_ajax_datatable-4.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2293771b14c96875a116552cd8bc46db1ad4e883e89db145d2816ece4f14180",
          "md5": "c5760e55d0dad5e610fd2631b608aa76",
          "sha256": "10cb6a8147f7b73e5db213f976d7b4c242be898702ed2d2c0a6a45faca3cc657"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5760e55d0dad5e610fd2631b608aa76",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58516,
        "upload_time": "2021-08-28T08:26:38",
        "upload_time_iso_8601": "2021-08-28T08:26:38.867741Z",
        "url": "https://files.pythonhosted.org/packages/b2/29/3771b14c96875a116552cd8bc46db1ad4e883e89db145d2816ece4f14180/django_ajax_datatable-4.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d0aca14b3beaa6677dd86ac77bdee17fe09eb8c2872fcec2feddb7e78b00210",
          "md5": "26cbaf278e441d39056e4cf42a384d11",
          "sha256": "167bcbf579c800d1852127184a6e10746ecff2edad0acb557db7770a6682217a"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26cbaf278e441d39056e4cf42a384d11",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 58607,
        "upload_time": "2021-09-26T08:01:07",
        "upload_time_iso_8601": "2021-09-26T08:01:07.922688Z",
        "url": "https://files.pythonhosted.org/packages/3d/0a/ca14b3beaa6677dd86ac77bdee17fe09eb8c2872fcec2feddb7e78b00210/django_ajax_datatable-4.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "625ee11ffb5f82a4bf6d4c1c6cd4e973c847a0c8acdbe874eb79130375af269c",
          "md5": "8154a6cfe35079a56f83e7995fa60f04",
          "sha256": "c962a87055023f5136ef64b292bb6e55cf1235d2f9401482c8ac250f1d6e57d0"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8154a6cfe35079a56f83e7995fa60f04",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63221,
        "upload_time": "2021-12-27T18:58:03",
        "upload_time_iso_8601": "2021-12-27T18:58:03.104970Z",
        "url": "https://files.pythonhosted.org/packages/62/5e/e11ffb5f82a4bf6d4c1c6cd4e973c847a0c8acdbe874eb79130375af269c/django_ajax_datatable-4.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90efc1a589e1b5135063a2a3f039e2286df9c0cdd61cff73e38db37ed5aae5af",
          "md5": "7554365f7071e09b95b6682dd67bf1ba",
          "sha256": "b0921c3cc751157fe947ef4335179602e03bb8d0d3cdcca1b20c062215d230ff"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7554365f7071e09b95b6682dd67bf1ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 62221,
        "upload_time": "2022-01-31T09:38:26",
        "upload_time_iso_8601": "2022-01-31T09:38:26.727445Z",
        "url": "https://files.pythonhosted.org/packages/90/ef/c1a589e1b5135063a2a3f039e2286df9c0cdd61cff73e38db37ed5aae5af/django_ajax_datatable-4.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "782c7d315d96fb868f08304517abf08b44e8bf511036e15eadd3fd95ef72d725",
          "md5": "a1f06337424786824d7a4a40e1c05841",
          "sha256": "7cad1656bd65325a92a9079befe1875cc664e0fe49424cc366d20a0a0d1c3bb9"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1f06337424786824d7a4a40e1c05841",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 62440,
        "upload_time": "2022-01-31T12:54:22",
        "upload_time_iso_8601": "2022-01-31T12:54:22.267672Z",
        "url": "https://files.pythonhosted.org/packages/78/2c/7d315d96fb868f08304517abf08b44e8bf511036e15eadd3fd95ef72d725/django_ajax_datatable-4.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c80c932931174c941e94b62e2df83e74784a8751083000b583b1ea23ec15c35",
          "md5": "4dd473f0f34419b1cb691092f3267ede",
          "sha256": "b19e56c67aa903d7720236443691e92d552a759b59a345bafda2ca6605e9b462"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4dd473f0f34419b1cb691092f3267ede",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63805,
        "upload_time": "2022-03-08T14:58:13",
        "upload_time_iso_8601": "2022-03-08T14:58:13.277723Z",
        "url": "https://files.pythonhosted.org/packages/1c/80/c932931174c941e94b62e2df83e74784a8751083000b583b1ea23ec15c35/django_ajax_datatable-4.4.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d923bb225c644002ac24ae138644cca0eedd0c63a5f56119e8e3eff59ad4de50",
          "md5": "d6efc8caba9e679aa29d7ce690f4da9c",
          "sha256": "cc55cec628b5b8c33a2c35e1c6d747908ea96bfe2e78902540ecddcbfc89a3dc"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6efc8caba9e679aa29d7ce690f4da9c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 63935,
        "upload_time": "2022-03-31T10:53:32",
        "upload_time_iso_8601": "2022-03-31T10:53:32.317860Z",
        "url": "https://files.pythonhosted.org/packages/d9/23/bb225c644002ac24ae138644cca0eedd0c63a5f56119e8e3eff59ad4de50/django_ajax_datatable-4.4.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bdbc6ead14cc5eb1ebf32f148bab04323dee23405da7f7297b4f566d045947c",
          "md5": "1b7a9833a26492472e1bdc184f54de6c",
          "sha256": "f7f58cc0efb7e20821953c321158ad9bc1833f7c9b7e11b0bfefda78e42f57ed"
        },
        "downloads": -1,
        "filename": "django_ajax_datatable-4.4.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b7a9833a26492472e1bdc184f54de6c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64043,
        "upload_time": "2023-02-13T18:20:01",
        "upload_time_iso_8601": "2023-02-13T18:20:01.355474Z",
        "url": "https://files.pythonhosted.org/packages/8b/db/c6ead14cc5eb1ebf32f148bab04323dee23405da7f7297b4f566d045947c/django_ajax_datatable-4.4.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bdbc6ead14cc5eb1ebf32f148bab04323dee23405da7f7297b4f566d045947c",
        "md5": "1b7a9833a26492472e1bdc184f54de6c",
        "sha256": "f7f58cc0efb7e20821953c321158ad9bc1833f7c9b7e11b0bfefda78e42f57ed"
      },
      "downloads": -1,
      "filename": "django_ajax_datatable-4.4.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b7a9833a26492472e1bdc184f54de6c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 64043,
      "upload_time": "2023-02-13T18:20:01",
      "upload_time_iso_8601": "2023-02-13T18:20:01.355474Z",
      "url": "https://files.pythonhosted.org/packages/8b/db/c6ead14cc5eb1ebf32f148bab04323dee23405da7f7297b4f566d045947c/django_ajax_datatable-4.4.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}