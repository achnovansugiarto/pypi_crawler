{
  "info": {
    "author": "Peter Jansen",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TextWorldExpress\nTextWorldExpress is a highly optimized reimplementation of three text game benchmarks focusing on instruction following, commonsense reasoning, and object identification.  TextWorldExpress is intended for natural language processing research, and a system description can be found in the Arxiv preprint [TextWorldExpress: Simulating Text Games at One Million Steps Per Second (PDF)](https://arxiv.org/abs/2208.01174).\n\n#### Watch the system demonstration video on Youtube\n[![Watch the video](https://user-images.githubusercontent.com/660004/182846595-f5379a83-0749-4bbc-91c9-a406ed1a2043.png)](https://youtu.be/MG6Ac4Xo6Ds)\n\n\n# Quickstart\n**Before running:** You will have to have `Java 1.8+` installed on your system (shipped with most linux distributions).\n\nInstall with pip:\n\n    conda create --name textworld-express python=3.8\n    conda activate textworld-express\n    pip install textworld-express\n\nRun an example random agent, on the Coin Collector game...:\n\n    python examples/random_agent.py --game-name=coin\n\nRun a user console where you can interact with the environment, on CookingWorld...:\n\n    python examples/human.py --game-name=cookingworld\n\n\n# Web Server Demo\n\nA web server demo is also available, that allows running a TextWorldExpress user console that can be interacted with in a web browser.\n\nTo run the web server demo:\n\n    conda create --name textworld-express python=3.8\n    conda activate textworld-express\n    pip install textworld-express[webserver]\n\n\nRun the web server:\n\n    python examples/textworldexpress-web-server.py\n\nPoint your web browser to [localhost:8080](https://localhost:8080).\n\n\n# TextWorldExpress Design\nTextWorldExpress is written in Scala (2.12.9), and compiles using `sbt` into a JAR file that is run with `java`. For convenience, a `python` API is provided, which interfaces using the `py4j` package.\n\n## Environments\n\nTextWorldExpress includes high-speed versions of three popular benchmark environments for text-game research. Additionally, it also includes 4 exclusive environments to study arithmetic, navigation, and neurosymbolic reasoning.\n\n### CookingWorld (\"cookingworld\")\nThe CookingWorld environment tasks agents with preparing meals by following the instructions in a recipe that is provided in the environment. Agents must first collect required food ingredients (e.g., milk, bell pepper, flour, salt) that can be found in the environment in canonical locations (e.g., kitchen, pantry, supermarket, garden) and containers (e.g., fridge, cupboard). Randomly generated recipes require agents to first use a knife to prepare food by *slicing*, *dicing*, or *chopping* a subset of ingredients, then additionally using an appropriate heating appliance to *fry*, *roast*, or *grill* the ingredients. If all ingredients are prepared according to the recipe, the agent can use an action to *prepare the meal*, and finally *eat the meal* to complete the task successfully. Task complexity can be controlled by varying the number of locations in the environment, the number of ingredients required for the recipe, and the number of distractor ingredients randomly placed in the environment that are not required for the recipe. The recipes and environments are parametrically generated, with subsets of ingredients and specific preparations held out between training, development, and test sets to prevent overfitting. CookingWorld was originally created for the [First TextWorld Problems competition](https://aka.ms/ftwp) and later named by [[Madotto etal., 2020]](https://www.ijcai.org/proceedings/2020/207).\n\n### TextWorld Commonsense (\"twc\")\nText game agents frequently learn the dynamics of environment -- such as the need to open a door before one can move through it -- from interacting with the environment itself, rather than using a pre-existing knowledge base of common sense facts or object affordances that would speed task learning. [TextWorld Commonsense](https://github.com/IBM/commonsense-rl) [[Murugesan etal., 2021]](https://arxiv.org/abs/2010.03790) aims to evaluate agents on common sense knowledge that can not be directly learned from the environment by providing agents a clean-up task where the agent must place common household objects (e.g., *a dirty dish*) in their canonical locations (e.g., *the dishwasher*) that can be found in knowledge bases such as ConceptNet. Separate lists of objects are used in the training, development, and test sets, meaning the agent can not learn object locations from the training set alone, and must rely on an external common sense knowledge base to perform well on the development and test sets. TextWorld Commonsense benchmark has three task difficulty levels, with the easiest including a single location and object to put away, while the hard setting includes up to p to 11 locations and any number of task-relevant and distractor objects.\n\n### Coin Collector (\"coin\")\nAgents frequently find tasks such as object search, environment navigation, or pick-and-place tasks challenging. The [Coin Collector](https://github.com/xingdi-eric-yuan/TextWorld-Coin-Collector) distills these into a single benchmark where an agent must explore a series of rooms to locate and pick up a single coin. In the original implementation, the game map typically takes the form of a connected loop or chain, such that continually moving to new locations means the agent will eventually discover the coin -- while including medium and hard modes that add in one or more \"dead-end\" paths.  To control for environment difficulty across games, the TextWorldExpress reimplementation uses the same map generator across environments, and generates arbitrary home environments rather than connected loops. The user maintains control of other measures of difficulty, including the total number of rooms, and the number of distractor objects placed in the environment.\n\n### Map Reader (\"mapreader\")\nThe Map Reader environment requires agents to retrieve a coin from a particular location, and put it into the box found in the starting location. In contrast to Coin Collector, this environment provides a map of the environment that can be used by the agent to more efficiently navigate. The score is 0.5 for retrieving the coin, and 1.0 for placing the coin in the box at the start location. Task complexity can be controlled by varying the number of locations in the environment, the distance from the starting location and where the coin is located, and the number of distractor objects randomly placed in the environment that are not required for the task.\n\n### Arithmetic (\"arithmetic\")\nThe Arithmetic environment requires agents to first solve a math problem, then to pick up the item with the same quantity as the math problem answer, and place it in the box. For example, the agent may read the math problem (“Take the bundle of objects that is equal to 3 multiplied by 6, and place\nthem in the box”), and must then perform the arithmetic then take 18 apples and place them in the answer box. Distractor objects are populated corresponding to performing the arithmetic incorrectly (for example, including 3 oranges, corresponding to subtracting 3 from 6, and 2 pears, corresponding to 6 divided by 3), with the constraint that results have to be positive integer values. The score is 0.5 for picking up the correct object, and 1.0 for completing the task successfully. At the moment, task complexity cannot be controlled yet.\n\n### Sorting (\"sorting\")\nThe Sorting environment requires agents to pick objects and place them in an answer box one at a time based on order of increasing quantity. To add complexity to the game, quantities optionally include units (e.g. 5kg of copper, 8mg of steel, 2g of iron) across measures of volume, mass, or length. The score is the normalized proportion of objects sorted in the correct order, where perfect sorts receive a score of 1.0, and errors cause the score to revert to zero and the game to end. The number of objects to sort is between 3 and 5. At the moment, task complexity cannot be controlled yet.\n\n\n# Usage\n\n### Typical Usage, and Valid Action Generation\nTypical usage involves first initializing a game generator, then repeatedly generating and stepping through games.  Examples are provided in the /examples/ folder, with an example agent that chooses a random action at each step described below:\n\n```python\nimport random\nfrom textworld_express import TextWorldExpressEnv\n\n# Initialize game generator\nenv = TextWorldExpressEnv(envStepLimit=100)\n\n# Set the game generator to generate a particular game (cookingworld, twc, or coin)\nenv.load(gameName=\"twc\", gameParams=\"numLocations=3,includeDoors=1\")\n\n# Then, randomly generate and play 10 games within the defined parameters\nfor episode_id in range(10):\n  # First step\n  obs, infos = env.reset(seed=episode_id, gameFold=\"train\", generateGoldPath=True)\n\n  # Display the observations from the environment.\n  print(obs)\n\n  for step_id in range(0, 50):\n    # Select a random valid action\n    validActions = sorted(infos['validActions'])\n    randomAction = random.choice(validActions)\n\n    # Take that action\n    obs, reward, done, infos = env.step(randomAction)\n\n    # Display action and the game's feedback.\n    print(\">\", randomAction)\n    print(obs)\n\n```\n\n### Setting Game Parameters\nEnvironments initialize with default parameters.  To change the parameters, supply a comma-delimited string into `gameParams` when calling `env.load()`.  An example of a valid parameter configuration string for CookingWorld might be `numLocations=5, numIngredients=3, numDistractorItems=0, includeDoors=0, limitInventorySize=0`. Valid parameters are different for each environment, and include:\n\n**CookingWorld:**\n| Parameter      | Description | Valid range |\n| ----------- | ----------- |  ----------- |\n| numLocations        | The number of locations in the environment  | 1-11 |\n| numIngredients   | The number of ingredients to use in generating the random recipe         | 1-5 |\n| numDistractorItems   | The number of distractor ingredients (not used in the recipe) in the environment    | 0-10 |\n| includeDoors        | Whether rooms have doors that need to be opened    | 0 or 1 |\n| limitInventorySize  | Whether the size of the inventory is limited       | 0 or 1 |\n\n**TextWorld Common Sense:**\n| Parameter      | Description | Valid range |\n| ----------- | ----------- |  ----------- |\n| numLocations        | The number of locations in the environment  | 1-3 |\n| numItemsToPutAway   | The number of items to put away             | 1-10 |\n| includeDoors        | Whether rooms have doors that need to be opened    | 0 or 1 |\n| limitInventorySize  | Whether the size of the inventory is limited       | 0 or 1 |\n\n**Coin Collector:**\n| Parameter      | Description | Valid range |\n| ----------- | ----------- |  ----------- |\n| numLocations        | The number of locations in the environment  | 1-11 |\n| numDistractorItems   | The number of distractor (i.e. non-coin) items in the environment    | 0-10 |\n| includeDoors        | Whether rooms have doors that need to be opened    | 0 or 1 |\n| limitInventorySize  | Whether the size of the inventory is limited       | 0 or 1 |\n\n**Map Reader:**\n| Parameter      | Description | Valid range |\n| ----------- | ----------- |  ----------- |\n| numLocations        | The number of locations in the environment  | 1-50 |\n| maxDistanceApart   | The number of locations to go through before finding the coin    | 1-8 |\n| maxDistractorItemsPerLocation   | The maximum number of distractor (i.e. non-coin) items per location  | 0-3 |\n| includeDoors        | Whether rooms have doors that need to be opened    | 0 or 1 |\n| limitInventorySize  | Whether the size of the inventory is limited       | 0 or 1 |\n\n**Arithmetic:**\nThis environment has no tweakable parameters yet.\n\n**Sorting:**\nThis environment has no tweakable parameters yet.\n\n**Querying current game parameters:** Sometimes you may want to know what parameters the current game is generated with.  These can be queried using the `getGenerationProperties()` method:\n```python\nprint(\"Generation properties: \" + str(env.getGenerationProperties()))\n```\n\n\n### Gold paths\n\nGold paths can be generated by setting the `generateGoldPath` flag to be `true` when using `reset()`.  The path itself can be retrieved using the `env.getGoldActionSequence()` method:\n\n```python\nprint(\"Gold path: \" + str(env.getGoldActionSequence()))\n```\n\nNote that the gold paths are generated by agents that generally perform random walks in the environment, so while they lead to successful task completion, they may not be the shortest/most efficient paths.  For example, this path for Text World Common Sense wanders the environment until it either sees an object to pick up (e.g. take white coat), or an appropiate container to put an object in (e.g. put white coat in wardrobe):\n\n> Gold path: ['look around', 'move west', 'take white coat', 'take brush', 'open wardrobe', 'put white coat in wardrobe', 'move east', 'move west', 'move east', 'move west', 'move east', 'move west', 'move east', 'move north', 'take eyeliner', 'take plaid blanket', 'put eyeliner in dressing table', 'open bathroom cabinet', 'put brush in bathroom cabinet', 'move south', 'move north', 'move south', 'move west', 'open chest of drawers', 'put plaid blanket in chest of drawers', 'move east']\n\n### Generating Pre-crawled Paths\n\nOne of the unique features of `TextWorldExpress` is that its performance is so fast, that it becomes possible to precrawl all possible actions that a hypothetical agent might take for a given game, out to some number of steps.  This has several main benefits and drawbacks:\n- Positive: Game speed increases dramatically -- generally, as fast as traversing a tree using pointers.  In Scala, the single-thread performance for traversal has been benchmarked at 4-5 million steps per second.\n- Negative: It takes some initial time to precrawl the paths (one-time investment; generally minutes-to-hours)\n- Negative: It takes time to load the paths at the start of each run (generally on the older of seconds-to-minutes)\n- Negative: It can take a lot of space to store precrawled paths (generally up to 1GB per game/seed, for trees of approximately 10-12 steps, depending on the game)\n- Negative: There is a limited step horizon -- once the agent goes past the number of steps precrawled, there is no more information to provide.  For this reason it's important to precrawl only games that are small enough to solve within the number of steps that you precrawl.\n\nGenerally, if you are using less than a few dozen game variations during training, and you are using games that can be solved in under 10-12 steps, then path precrawling might be a way to gain dramatic benefits in performance.\n\nTo precrawl paths, use the path precrawling tool, `PathCrawler`:\n\n    java -Xmx8g -cp textworld_express/textworld-express-1.0.0.jar textworldexpress.pathcrawler.PathPrecrawler twc train 0 8 numLocations=1,includeDoors=0,numItemsToPutAway=2\n\n(Note that you may need to supply more than `8g` of memory, depending on the size of the path being crawled.)\n\nThe arguments (in order) are the `gameName`, `gameFold`, `seed`, `maximum depth to crawl the game state tree`, and `game generation properties string`.  The path crawler will export a large JSON file as output.  To load these precrawled paths in Python, please check the `precrawledPathReader.py` example.  For Java/Scala, please see `textworldexpress.benchmark.BenchmarkPrecrawledPath` as an end-to-end example, where `textworldexpress.pathcrawler.PrecrawledPath` provides a storage class for loading/saving precrawled paths (as well as quickly finding winning paths).  Path nodes are stored internally as string-hashed storage classes (`PrecrawledNode` and `StepResultHashed`) for speed/storage efficiency, where `StepResultHashed` can be quickly converted into the normal, human-readable, unhashed version using the `StepResultHashed.toStepResult()` method.  Several example precrawled paths (which are used for the benchmarking scripts) are provided in `precrawledpaths.zip`.\n\nPath crawling can generate large files.  Before path crawling, you'll likely want to make sure that the game is sized appropriately so that it can be solved within the number of steps given.  Usually, this means limiting the number of locations, number of task items, etc.  Below are example times and crawl sizes for a Text World Common Sense game generated with the following parameters (`numItemsToPutAway=2, numLocations=3, includeDoors=0, limitInventorySize=0`) on a 16-core machine:\n| Depth      | Crawl Time | Number of Nodes |\n| ----------- | ----------- |  ----------- |\n7 | 2 sec | 198k |\n8 | 23 sec | 1.6M |\n9 | 209 sec | 13.5M |\n\n# Benchmarks\n\n### Python Benchmarks\nFor online generation mode:\n\n    python examples/random_agent_speed_test.py --game-name=cookingworld --max-steps=50 --num-episodes=10000\n\nFor precrawled path mode (note this demo uses precrawled paths provided for benchmarking in the repository):\n\n    unzip precrawledpaths.zip\n    python examples/precrawledPathReader.py\n\n### Scala Benchmarks\nFor online generation mode (argument should be one of cookingworld, twc, or coin):\n\n    java -Xmx4g -cp textworld_express/textworld-express-1.0.0.jar textworldexpress.benchmark.BenchmarkOnline coin\n\nFor precrawled path mode (single-threaded, note thishis demo uses precrawled paths provided for benchmarking in the repository.\n\n    java -Xmx4g -cp textworld_express/textworld-express-1.0.0.jar textworldexpress.benchmark.BenchmarkPrecrawledPath\n\nFor extra speed, a threaded precrawled path benchmark (where here, change `32` to the desired number of threads):\n\n    java -Xmx4g -cp textworld_express/textworld-express-1.0.0.jar textworldexpress.benchmark.BenchmarkPrecrawledPathThreaded 32\n\n\n# Frequently Asked Questions\n**Q: Why is the Python version 10x slower than the Java/Scala version?**\nA: This partially due to the `py4j` binders, that allow interfacing Python to Java/Scala code through sockets.  We will look for faster solutions in the future, though the Python interface to `TextWorldExpress` is still about 100 times faster than the original TextWorld, so it is still a big win.\n\n**Q: Will there be more benchmark games added/I want to add my own benchmark game to TextWorldExpress**\nA: One of the main ways that TextWorldExpress gets its speed is through essentially hardcoding the games, mechanics, and (particularly) the valid action generation.  To implement your own games, please use the existing games as templates, and open a github issue if you run into any issues.  If you would like to recommend a new game to add to TextWorldExpress, please make a feature request in the github issues.\n\n**Q: What is the fastest TextWorldExpress can run?**\nA: The fastest we have clocked `TextWorldExpress` using the random agent benchmark is 4-5 million steps/sec per thread using precrawled games and the Scala native API, with multi-threaded performance at approximately 34 million steps/sec using an AMD 3950X 16-core CPU with 32 threads.  This is equivalent to about 2 billion steps per minute.  2 billion steps would take a single thread of the original TextWorld about 77 days to run.\n\n\n# Citation\nIf you use `TextWorldExpress`, please provide the following citation:\n```\n@article{jansen2022textworldexpress,\n  url = {https://arxiv.org/abs/2208.01174},\n  author = {Jansen, Peter A. and Côté, Marc-Alexandre},\n  title = {TextWorldExpress: Simulating Text Games at One Million Steps Per Second},\n  journal = {arXiv},\n  year = {2022},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cognitiveailab/TextWorldExpress",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "textworld-express",
    "package_url": "https://pypi.org/project/textworld-express/",
    "platform": null,
    "project_url": "https://pypi.org/project/textworld-express/",
    "project_urls": {
      "Homepage": "https://github.com/cognitiveailab/TextWorldExpress"
    },
    "release_url": "https://pypi.org/project/textworld-express/1.0.4/",
    "requires_dist": [
      "py4j",
      "orjson",
      "prompt-toolkit",
      "py4j ; extra == 'webserver'",
      "orjson ; extra == 'webserver'",
      "prompt-toolkit ; extra == 'webserver'",
      "pywebio ; extra == 'webserver'"
    ],
    "requires_python": "",
    "summary": "TextWorldExpress: a highly optimized reimplementation of three text game benchmarks focusing on instruction following, commonsense reasoning, and object identification.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17025529,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e053198fc91a47a9e37fce9e7a1bb7d126abd13675e6c92333c170e8b9db871",
          "md5": "26e01cf117bd816f5b9ec15044903f6e",
          "sha256": "a8c05ee39e6b9b864abde9770626e8751a215766a67416ecc5562de8e45cdf53"
        },
        "downloads": -1,
        "filename": "textworld_express-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26e01cf117bd816f5b9ec15044903f6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18316,
        "upload_time": "2022-07-28T20:43:43",
        "upload_time_iso_8601": "2022-07-28T20:43:43.344717Z",
        "url": "https://files.pythonhosted.org/packages/9e/05/3198fc91a47a9e37fce9e7a1bb7d126abd13675e6c92333c170e8b9db871/textworld_express-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ec360a352a755b81d1fa3141b88fb90027197835b7407bcb6febd15a71ca909",
          "md5": "eb1d334e307eca8567f7ef8d0680244e",
          "sha256": "fc2ee843a851634d234f25e2dcc75ad60b1680bb53f02a0ce050c664531373a2"
        },
        "downloads": -1,
        "filename": "textworld-express-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb1d334e307eca8567f7ef8d0680244e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20740,
        "upload_time": "2022-07-28T20:41:22",
        "upload_time_iso_8601": "2022-07-28T20:41:22.353147Z",
        "url": "https://files.pythonhosted.org/packages/2e/c3/60a352a755b81d1fa3141b88fb90027197835b7407bcb6febd15a71ca909/textworld-express-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15dd5e6dcaa87aca993c60497da276dce62e282b1e8641b237d58a825725cefd",
          "md5": "e5d21b1eac23d1779b4de6f830b26db4",
          "sha256": "4ead818e3a267fee32c66978a2b3a81046497d1df7125182c896d45aa3f44416"
        },
        "downloads": -1,
        "filename": "textworld_express-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5d21b1eac23d1779b4de6f830b26db4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18317,
        "upload_time": "2022-07-28T20:48:40",
        "upload_time_iso_8601": "2022-07-28T20:48:40.147205Z",
        "url": "https://files.pythonhosted.org/packages/15/dd/5e6dcaa87aca993c60497da276dce62e282b1e8641b237d58a825725cefd/textworld_express-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "616d2c685e3c107a20ac635e21bd7bd615d018c01bc8c0400b4f1d39f2b8277d",
          "md5": "0c3618920f4c09af07fd0a9735b29def",
          "sha256": "cb6f251c8c191e74dbbb173fddc3c1cbb5de8fb0cc52568cb5b246574bdb692b"
        },
        "downloads": -1,
        "filename": "textworld_express-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0c3618920f4c09af07fd0a9735b29def",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20732,
        "upload_time": "2022-07-28T20:48:42",
        "upload_time_iso_8601": "2022-07-28T20:48:42.066854Z",
        "url": "https://files.pythonhosted.org/packages/61/6d/2c685e3c107a20ac635e21bd7bd615d018c01bc8c0400b4f1d39f2b8277d/textworld_express-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380fc6df719548befc718a68d8533dcf8b5c797d5cebb85d653c6c1078d5b2bf",
          "md5": "05b52e6dd731646bf7512aea56e97ff3",
          "sha256": "dc7000e3b51d55d18a09ebed17d9764a60fc0cb88d246f08d60eb582eb84ef7d"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05b52e6dd731646bf7512aea56e97ff3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4157794,
        "upload_time": "2022-08-04T11:58:09",
        "upload_time_iso_8601": "2022-08-04T11:58:09.595777Z",
        "url": "https://files.pythonhosted.org/packages/38/0f/c6df719548befc718a68d8533dcf8b5c797d5cebb85d653c6c1078d5b2bf/textworld_express-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba47234e2a16f21a7f1c69e56f7a37c4dfae85aeb707655fe73b50bf8e06edbc",
          "md5": "f3821d222f79302e5938b650f97544b6",
          "sha256": "6ea87807a0f6b799f534aaab6c8e6efcdbcf1086255bf246f1fe836ba1c09c39"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f3821d222f79302e5938b650f97544b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4166560,
        "upload_time": "2022-08-04T11:58:11",
        "upload_time_iso_8601": "2022-08-04T11:58:11.414670Z",
        "url": "https://files.pythonhosted.org/packages/ba/47/234e2a16f21a7f1c69e56f7a37c4dfae85aeb707655fe73b50bf8e06edbc/textworld_express-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60365b8f8cd869695207a7d95a4487977390248358ac6ed5ce7af4fe6d54eb8",
          "md5": "34d42c7fbc7224365f0cf3ad5385096b",
          "sha256": "38e9c93733415e5afafcdd27dde090e18d38290e5bc2728d03f886f9d652fbb1"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34d42c7fbc7224365f0cf3ad5385096b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40982169,
        "upload_time": "2022-08-02T01:57:01",
        "upload_time_iso_8601": "2022-08-02T01:57:01.778349Z",
        "url": "https://files.pythonhosted.org/packages/b6/03/65b8f8cd869695207a7d95a4487977390248358ac6ed5ce7af4fe6d54eb8/textworld_express-1.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c3f01b6682feb53d14a93d4dbc9181e124ad3542b389f37fe13a28fe563978d",
          "md5": "8345372a7e714bfb3e414aa66bfe6125",
          "sha256": "c26660b73eb5a901cd7362b3e1cb62540da54b78b3f164b69b5190a08ae75c53"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "8345372a7e714bfb3e414aa66bfe6125",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40981448,
        "upload_time": "2022-08-02T01:57:34",
        "upload_time_iso_8601": "2022-08-02T01:57:34.898020Z",
        "url": "https://files.pythonhosted.org/packages/2c/3f/01b6682feb53d14a93d4dbc9181e124ad3542b389f37fe13a28fe563978d/textworld_express-1.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44b8de56b5e72339d8124b498f350bb0e3ac8f48cceaeece0f996abf5c27da07",
          "md5": "4a85a824bc2c1db4a89bbd3cb5c9605b",
          "sha256": "f24aa5b7655fb58f08eea2a316232c6637102f7ebf11ece532cf1d4e9ee4296e"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a85a824bc2c1db4a89bbd3cb5c9605b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4157833,
        "upload_time": "2022-08-03T20:16:37",
        "upload_time_iso_8601": "2022-08-03T20:16:37.137290Z",
        "url": "https://files.pythonhosted.org/packages/44/b8/de56b5e72339d8124b498f350bb0e3ac8f48cceaeece0f996abf5c27da07/textworld_express-1.0.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a844b8ee2cd1208bbae8ee6d5a0226496332850d9153c2630eb58b9d6f698745",
          "md5": "8b6a39ace7dbf752258d7c7b8ce92a96",
          "sha256": "d00753302f4ff69a6cfecd2f3211241696c9bf12de247b178e58ea85dfce1fe8"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "8b6a39ace7dbf752258d7c7b8ce92a96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4166579,
        "upload_time": "2022-08-03T20:16:42",
        "upload_time_iso_8601": "2022-08-03T20:16:42.505894Z",
        "url": "https://files.pythonhosted.org/packages/a8/44/b8ee2cd1208bbae8ee6d5a0226496332850d9153c2630eb58b9d6f698745/textworld_express-1.0.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd1dc94244b00a57c4c191cbaf9d2f8c9293391b8ffa7d6db2f7a1d2d1bf2492",
          "md5": "9c9b61854031cf5e1d9dae0fcca5aadf",
          "sha256": "193bd9e0db209ed9ebc5501c23e97a8a73093b66bd7304b1fba8cc1dafd33729"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c9b61854031cf5e1d9dae0fcca5aadf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1458236,
        "upload_time": "2022-08-05T21:01:10",
        "upload_time_iso_8601": "2022-08-05T21:01:10.131001Z",
        "url": "https://files.pythonhosted.org/packages/dd/1d/c94244b00a57c4c191cbaf9d2f8c9293391b8ffa7d6db2f7a1d2d1bf2492/textworld_express-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6bf819b26e6c354ad51fb8d7f10a575a18e441767cad3f958806a82e5f0cb8c",
          "md5": "94f5f9fea6a84cd4235e5679f99e86eb",
          "sha256": "8c2e42bf6a6cc11ec6ad0294fe7478d2bbc5546a52c09dfb3887554c213169c0"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "94f5f9fea6a84cd4235e5679f99e86eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1466407,
        "upload_time": "2022-08-05T21:01:12",
        "upload_time_iso_8601": "2022-08-05T21:01:12.841367Z",
        "url": "https://files.pythonhosted.org/packages/c6/bf/819b26e6c354ad51fb8d7f10a575a18e441767cad3f958806a82e5f0cb8c/textworld_express-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a96c61f810da7aa8dd71c13dc992df95e4f880bdb0d54d52d9aa9dd231df9b8d",
          "md5": "4e97c6c4eeed035c286cc40e76f22dd2",
          "sha256": "238658577bba31557d8c67f7ebfc7e5a2e2635668c25090f04602845498938ed"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e97c6c4eeed035c286cc40e76f22dd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1492736,
        "upload_time": "2022-08-09T11:43:03",
        "upload_time_iso_8601": "2022-08-09T11:43:03.419271Z",
        "url": "https://files.pythonhosted.org/packages/a9/6c/61f810da7aa8dd71c13dc992df95e4f880bdb0d54d52d9aa9dd231df9b8d/textworld_express-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acc008932868006de6b37feb6d401e066e848f3147d89eefa37adf0804a8d9a0",
          "md5": "c224ca9d4ff5f6db47e011435cc1ee0d",
          "sha256": "6d52ce3a47446d4e73c55f864f6e919c4e88d76f6bdbce8501aa13d57d69c7c7"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c224ca9d4ff5f6db47e011435cc1ee0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1501151,
        "upload_time": "2022-08-09T11:43:05",
        "upload_time_iso_8601": "2022-08-09T11:43:05.110017Z",
        "url": "https://files.pythonhosted.org/packages/ac/c0/08932868006de6b37feb6d401e066e848f3147d89eefa37adf0804a8d9a0/textworld_express-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8229656720ef30220585d779e514cb3d9d5a0a891d95a734ec8a1b760d0d5bc8",
          "md5": "b4d6df1fe98134c02f39554330580e07",
          "sha256": "22e646a7345fd6ec0e7b24c89eba749c4e92a6866b59e38c5b1c22f0c9599aad"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4d6df1fe98134c02f39554330580e07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1495490,
        "upload_time": "2022-12-02T03:05:25",
        "upload_time_iso_8601": "2022-12-02T03:05:25.614041Z",
        "url": "https://files.pythonhosted.org/packages/82/29/656720ef30220585d779e514cb3d9d5a0a891d95a734ec8a1b760d0d5bc8/textworld_express-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb3da35150d6ccea0ee8c858561111de4c32900f3192f190a91e1bd74722e5f6",
          "md5": "2d084a072d5e04fd92dc7bbead7a5e2e",
          "sha256": "629687e04034bf4bd81e4b93eb46d25670addb2b2d15b20cd47bb40a43250f32"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2d084a072d5e04fd92dc7bbead7a5e2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1504036,
        "upload_time": "2022-12-02T03:05:28",
        "upload_time_iso_8601": "2022-12-02T03:05:28.347731Z",
        "url": "https://files.pythonhosted.org/packages/eb/3d/a35150d6ccea0ee8c858561111de4c32900f3192f190a91e1bd74722e5f6/textworld_express-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8b6d0db6af3245dae1c0daf8e0ddfd2ecf59f609f43e885eed56e92a4d8901f",
          "md5": "7478f5272e67dd9a4113ae7d12249ee1",
          "sha256": "6d7a5f6b20caa6d1ae86101f55128073fb30afa9efd1619c5e9bce48658673a3"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7478f5272e67dd9a4113ae7d12249ee1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1540061,
        "upload_time": "2023-02-25T11:57:31",
        "upload_time_iso_8601": "2023-02-25T11:57:31.472951Z",
        "url": "https://files.pythonhosted.org/packages/a8/b6/d0db6af3245dae1c0daf8e0ddfd2ecf59f609f43e885eed56e92a4d8901f/textworld_express-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "804bb5172cdc2595470bd9951e95cc17e9224aab96a35a234d141b5326c9fad5",
          "md5": "18e21cf0508a4d014edfe800e762f586",
          "sha256": "41a3492b166fdf8684cd8dc88d6406a4e22eead54c1a84a108237c8474ff087c"
        },
        "downloads": -1,
        "filename": "textworld_express-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "18e21cf0508a4d014edfe800e762f586",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1549094,
        "upload_time": "2023-02-25T11:57:34",
        "upload_time_iso_8601": "2023-02-25T11:57:34.467249Z",
        "url": "https://files.pythonhosted.org/packages/80/4b/b5172cdc2595470bd9951e95cc17e9224aab96a35a234d141b5326c9fad5/textworld_express-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8b6d0db6af3245dae1c0daf8e0ddfd2ecf59f609f43e885eed56e92a4d8901f",
        "md5": "7478f5272e67dd9a4113ae7d12249ee1",
        "sha256": "6d7a5f6b20caa6d1ae86101f55128073fb30afa9efd1619c5e9bce48658673a3"
      },
      "downloads": -1,
      "filename": "textworld_express-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7478f5272e67dd9a4113ae7d12249ee1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1540061,
      "upload_time": "2023-02-25T11:57:31",
      "upload_time_iso_8601": "2023-02-25T11:57:31.472951Z",
      "url": "https://files.pythonhosted.org/packages/a8/b6/d0db6af3245dae1c0daf8e0ddfd2ecf59f609f43e885eed56e92a4d8901f/textworld_express-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "804bb5172cdc2595470bd9951e95cc17e9224aab96a35a234d141b5326c9fad5",
        "md5": "18e21cf0508a4d014edfe800e762f586",
        "sha256": "41a3492b166fdf8684cd8dc88d6406a4e22eead54c1a84a108237c8474ff087c"
      },
      "downloads": -1,
      "filename": "textworld_express-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "18e21cf0508a4d014edfe800e762f586",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1549094,
      "upload_time": "2023-02-25T11:57:34",
      "upload_time_iso_8601": "2023-02-25T11:57:34.467249Z",
      "url": "https://files.pythonhosted.org/packages/80/4b/b5172cdc2595470bd9951e95cc17e9224aab96a35a234d141b5326c9fad5/textworld_express-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}