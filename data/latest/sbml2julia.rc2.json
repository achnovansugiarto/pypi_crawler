{
  "info": {
    "author": "paulflang",
    "author_email": "paul.lang@wolfson.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/sbml2julia/badge/?version=latest)](https://sbml2julia.readthedocs.io/en/latest/?badge=latest)\n[![Test results](https://circleci.com/gh/paulflang/SBML2Julia.svg?style=shield)](https://app.circleci.com/pipelines/github/paulflang/SBML2Julia)\n[![License](https://img.shields.io/github/license/paulflang/sbml2julia.svg)](LICENSE)\n\n# `SBML2Julia`\n\n`SBML2Julia` is a tool to for optimizing parameters of ordinary differential equation (ODE) models. `SBML2Julia` translates a model from SBML/[PEtab](https://petab.readthedocs.io/en/stable/) format into Julia for Mathematical Programming ([JuMP](https://jump.dev/JuMP.jl/stable/)), performes the optimization task and returns the results.\n\n## Optimization method\n\n`SBML2Julia` uses the optimization method presented in [Scalable nonlinear programming framework for parameter estimation in dynamic biological system models](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006828). In brief, contrary to typical parameter optimization methods for ODE systems, `SBML2Julia` does not rely on simulation of the ODE system. Instead `SBML2Julia` uses an implicit Euler scheme to time-discretize an ODE system of n equations into m time steps. This transforms the ODE system into a system of n * (m - 1) algebraic equations with n * m variables. These n * m variables (or a subset thereof) can then be cast into an objective function. `SBML2Julia` then uses interior-point optimization implemented in the Julia language to minimize the objective function constraint to the n * (m - 1) algebraic equations.\n\n## Installation\n\n`SBML2Julia` depends on several Python and Julia packages. If you have Docker installed on your machine, the easiest way of installing these dependencies is to pull the latest [SBML2Julia docker image](https://hub.docker.com/repository/docker/paulflang/sbml2julia) from Docker Hub and build a container.\n  ```\n  user@bash:/$ docker pull paulflang/sbml2julia:latest\n  user@bash:/$ docker run -it paulflang/sbml2julia:latest\n  ```\nTo install the latest `SBML2Julia` version in the Docker container, run:\n  ```\n  user@bash:/$ git clone https://github.com/paulflang/sbml2julia.git\n  user@bash:/$ python3 -m pip install -e sbml2julia\n  ```\nTo check if the installation was succesful, run:\n  ```\n  user@bash:/$ sbml2julia -h\n  ```\n\nAlternatively, the `SBML2Julia` dependencies can be installed as indicated in the [Dockerfile](https://github.com/paulflang/sbml2julia/blob/master/Dockerfile) in the `SBML2Julia` GitHub repository. Once these dependencie are installed, `SBML2Julia` can be installed as above:\n  ```\n  user@bash:/$ git clone https://github.com/paulflang/sbml2julia.git\n  user@bash:/$ python3 -m pip install -e sbml2julia\n  user@bash:/$ sbml2julia -h\n  ```\n\n## Interfaces\n\nOptimization tasks can be performed from a Python API or a command line interface.\n\n## Tutorial, and documentation\nPlease see the [documentation](https://sbml2julia.readthedocs.io/en/latest/index.html) for a description of how to use `SBML2Julia`. \n\n## License\nThe package is released under the [MIT license](LICENSE).\n\n## Development team\nThis package was developed by [Paul F. Lang](https://www.linkedin.com/in/paul-lang-7b54a81a3/) at the University of Oxford, UK and [Sungho Shin](https://www.sunghoshin.com/) at the University of Wisconsin-Madison, USA..\n\n\n## Questions and comments\nPlease contact [Paul F. Lang](mailto:paul.lang@wolfson.ox.ac.uk) with any questions or comments.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/paulflang/sbml2julia",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paulflang/sbml2julia",
    "keywords": "Parameter fitting,ODE discretization,Julia,JuMP",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sbml2julia",
    "package_url": "https://pypi.org/project/sbml2julia/",
    "platform": "",
    "project_url": "https://pypi.org/project/sbml2julia/",
    "project_urls": {
      "Download": "https://github.com/paulflang/sbml2julia",
      "Homepage": "https://github.com/paulflang/sbml2julia"
    },
    "release_url": "https://pypi.org/project/sbml2julia/0.1.1/",
    "requires_dist": [
      "cement (>=3.0.0)",
      "julia",
      "matplotlib",
      "numpy",
      "openpyxl",
      "pandas",
      "petab",
      "python-libsbml",
      "scipy",
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Optimization tool based on ODE discretisation.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8571551,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcea50c8341e270dba25703b273e8e88015859385b3e49c828c2729aebcc7d74",
          "md5": "22f0542c9ea0a0d344dba69ea23e51ec",
          "sha256": "27bdb35e3da456f8e5fe10dd49f67b64bb4f9f640a2d0b6eaf05fd1cf29f95dc"
        },
        "downloads": -1,
        "filename": "sbml2julia-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22f0542c9ea0a0d344dba69ea23e51ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20626,
        "upload_time": "2020-11-02T22:01:29",
        "upload_time_iso_8601": "2020-11-02T22:01:29.860843Z",
        "url": "https://files.pythonhosted.org/packages/bc/ea/50c8341e270dba25703b273e8e88015859385b3e49c828c2729aebcc7d74/sbml2julia-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da6cd35a575c714055c58e7a2e3d567830de85975563949a35acab9ae3a7cb98",
          "md5": "d30c0563a78d20dada0f9db5e7898948",
          "sha256": "a10e3406dfbfeab4f231b4225075e9ca6e51857abbae07f32bfb0a148a54af71"
        },
        "downloads": -1,
        "filename": "sbml2julia-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d30c0563a78d20dada0f9db5e7898948",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20646,
        "upload_time": "2020-11-03T15:13:06",
        "upload_time_iso_8601": "2020-11-03T15:13:06.115346Z",
        "url": "https://files.pythonhosted.org/packages/da/6c/d35a575c714055c58e7a2e3d567830de85975563949a35acab9ae3a7cb98/sbml2julia-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2ba5ca578c3523b2a0a61054034b9869133abf9ab8088eafc0f93af20efb07",
          "md5": "9c2abd28ed3717c8b90797adcae19858",
          "sha256": "fd989a6cabf4b67f22dfcd1a5940168a585025420c102045d932e885c3c395aa"
        },
        "downloads": -1,
        "filename": "sbml2julia-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c2abd28ed3717c8b90797adcae19858",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21911,
        "upload_time": "2020-11-03T15:13:07",
        "upload_time_iso_8601": "2020-11-03T15:13:07.823115Z",
        "url": "https://files.pythonhosted.org/packages/ff/2b/a5ca578c3523b2a0a61054034b9869133abf9ab8088eafc0f93af20efb07/sbml2julia-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da6cd35a575c714055c58e7a2e3d567830de85975563949a35acab9ae3a7cb98",
        "md5": "d30c0563a78d20dada0f9db5e7898948",
        "sha256": "a10e3406dfbfeab4f231b4225075e9ca6e51857abbae07f32bfb0a148a54af71"
      },
      "downloads": -1,
      "filename": "sbml2julia-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d30c0563a78d20dada0f9db5e7898948",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20646,
      "upload_time": "2020-11-03T15:13:06",
      "upload_time_iso_8601": "2020-11-03T15:13:06.115346Z",
      "url": "https://files.pythonhosted.org/packages/da/6c/d35a575c714055c58e7a2e3d567830de85975563949a35acab9ae3a7cb98/sbml2julia-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff2ba5ca578c3523b2a0a61054034b9869133abf9ab8088eafc0f93af20efb07",
        "md5": "9c2abd28ed3717c8b90797adcae19858",
        "sha256": "fd989a6cabf4b67f22dfcd1a5940168a585025420c102045d932e885c3c395aa"
      },
      "downloads": -1,
      "filename": "sbml2julia-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9c2abd28ed3717c8b90797adcae19858",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21911,
      "upload_time": "2020-11-03T15:13:07",
      "upload_time_iso_8601": "2020-11-03T15:13:07.823115Z",
      "url": "https://files.pythonhosted.org/packages/ff/2b/a5ca578c3523b2a0a61054034b9869133abf9ab8088eafc0f93af20efb07/sbml2julia-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}