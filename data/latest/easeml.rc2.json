{
  "info": {
    "author": "Bojan Karlas, Leonel Aguilar",
    "author_email": "bojan.karlas@gmail.com, leonel.aguilar.m@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Ease.ml Client\n\nThis is the Python implementation of the ease.ml client.\n\n## Installation\n\nThis package is available on PyPI.\n\n```bash\npip install easeml\n```\n\n## Example usage\n\n### Establishing a connection\n\nTo use the client API we first need to create a connection object that we will be using to target the running easeml instance. The connection must be inialized with a host name (here we use localhost) and either the API key or a username and password.\n\n```python\nfrom easeml.model import Connection\n\nconnection = Connection(host=\"localhost:8080\", api_key=\"some-api-key\")\n```\n\n### Querying Collections\n\nThen we can query all the running jobs. To do that we need to create a `JobQuery` instance which we use to specify the parameters of our query. For example, we can query all completed jobs. To get the result we call the `run()` method of the query object and pass the connection instance.\n\n```python\nfrom easeml.model import JobQuery\n\nquery = JobQuery(status=\"completed\")\nresult, next_query = query.run(connection)\n```\n\nThe result will contain a list of `Job` objects taht satisfy our query. Results are paginated to limit the size of each request. If there are more pages to be loaded, then the `next_query` variable will contain a `JobQuery` instance that we can run and return the next page. The full pattern for loading all jobs is the following:\n\n```python\nfrom easeml.model import JobQuery\n\nresult, query = [], JobQuery(status=\"completed\")\n\nnext_result, next_query = [], query\nwhile next_query is not None:\n    next_result, next_query = query.run(connection)\n    result.extend(next_result)\n```\n\nWe can take the first completed job and get a list of its tasks.\n\n```python\njob = result[0]\ntasks = job.tasks\n```\n\nThe `tasks` list actually contains \"shallow\" instances of the `Task` class. This means that each instance contains only the task's `id` field and no other fields. This is normal because the `Job` object has only references to tasks, not entire tasks. To get a full version of a task given a \"shallow\" instance, we use the `get()` method.\n\n```python\ntask = tasks[0].get(connection)\n```\n\n### Querying Specific Objects\n\nThe `Task` object can also be used to query tasks by their ID. We simply create a new \"shallow\" instance using a task ID and call the `get()` method.\n\n```python\nfrom easeml.model import Task\n\ntask = Task(id=\"some-task-id\").get(connection)\n```\n\n### Creating Objects\n\nWe have the ability to create certain objects, such as `Dataset`, `Module` and `Job`. We do this by initializing an instance of that object, assigning values to relevant fields and calling the `post()` method. Here is an example of creating a dataset object along with uploading of a dataset.\n\n```python\n\nfrom easeml.model import Dataset, DatasetSource, DatasetStatus\n\ndataset = Dataset.create(id=\"test_dataset_1\", source=DatasetSource.UPLOAD, name=\"Test Dataset 1\").post(connection)\n\nwith open(\"test_dataset_1.tar\", \"rb\") as f:\n    dataset.upload(connection=connection, data=f)\n\n# Once the dataset upload finishes, we need to update the status of the dataset to \"transferred\".\ndataset.status = DatasetStatus.TRANSFERRED\n\n# Once we assign values to fields, we use the patch command\n# to apply updates to the dataset object on the server.\ndataset.patch(connection)\n```\n\n### Starting a new training Job and monitoring it\n\nHere we show a slightly more complex example that demonstrates how to start a model selection and tuning job given a previously uploaded dataset.\n\nWe will first fetch the dataset object in order to be able to access its schema.\n\n```python\nfrom easeml.model import Dataset\n\ndataset = Dataset(id=\"test_dataset_1\").get(connection)\n```\n\nThen we query all models that are applicable to the given dataset. We use the `ModuleQuery` class for this.\n\n```python\n\nfrom easeml.model import ModuleQuery, ModuleType\n\nquery = ModuleQuery(type=ModuleType.MODEL, status=ModuleStatus.ACTIVE,\n                    schema_in=dataset.schema_in, schema_out=dataset.schema_out)\n\n# We assume that the result does not contain more than one page.\nmodels, _ = query.run(connection)\n```\n\nWe do the same for objectives.\n\n```python\n\nfrom easeml.model import ModuleQuery, ModuleType\n\nquery = ModuleQuery(type=ModuleType.OBJECTIVE, status=ModuleStatus.ACTIVE,\n                    schema_in=dataset.schema_in, schema_out=dataset.schema_out)\nobjectives, _ = query.run(connection)\n\n# We will simply pick the first objective here.\nobjective = objectives[0]\n```\n\nThen we are ready to create a job.\n\n```python\nfrom easeml.model import Job\n\njob = Job(dataset=dataset, objective=objective, models=models, max_tasks=20).post(connection)\n```\n\nWith `max_tasks` we specify the number of tasks to run before a job's status will become `completed`. We can keep querying the job to check the status.\n\n```python\nfrom time import sleep\nfrom easeml.model import JobStatus\n\nwhile job.get(connection).status != JobStatus.COMPLETED:\n    time.sleep(10)\n```\n\nOnce the job is completed, we can get the task with the best result.\n\n```python\nfrom easeml.model import TaskQuery, ApiQueryOrder\n\ntasks, _ = TaskQuery(job=job, order_by=\"quality\", order=ApiQueryOrder.DESC).run(connection)\n\nbest_task = tasks[0].get(connection)\n```\n\nFinally, we can download the Docker image of the best task and save it as a tar file.\n\n```python\nimage = best_task.get_image(connection)\nopen(\"/output/path/to/image.tar\", \"wb\").write(image)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DS3Lab/easeml",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easeml",
    "package_url": "https://pypi.org/project/easeml/",
    "platform": "",
    "project_url": "https://pypi.org/project/easeml/",
    "project_urls": {
      "Homepage": "https://github.com/DS3Lab/easeml"
    },
    "release_url": "https://pypi.org/project/easeml/0.0.1.dev3/",
    "requires_dist": [
      "docker (>=4.0.1)",
      "pluggy (<1.0,>=0.3)",
      "PyYAML (>=5.3.1)",
      "requests (>=2.22.0)",
      "pyrfc3339 (>=1.1)",
      "tuspy (>=0.2.4)"
    ],
    "requires_python": "",
    "summary": "Client library used to communicate with the ease.ml service.",
    "version": "0.0.1.dev3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8649633,
  "releases": {
    "0.0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df3a53e800937bfd4bac790e2d1ce6e898ad4990c170045413f0ccb5738fbd5",
          "md5": "530c3cb07043310d5cd29f57622c7305",
          "sha256": "e482cf5a091a50b2c18dddd08a3ab08910493e579e45eb038fdfb7beb0425737"
        },
        "downloads": -1,
        "filename": "easeml-0.0.1.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "530c3cb07043310d5cd29f57622c7305",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32583,
        "upload_time": "2020-11-13T10:16:12",
        "upload_time_iso_8601": "2020-11-13T10:16:12.913140Z",
        "url": "https://files.pythonhosted.org/packages/7d/f3/a53e800937bfd4bac790e2d1ce6e898ad4990c170045413f0ccb5738fbd5/easeml-0.0.1.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "623b8c5b55216b056ff56fa22728b9b99110d736c89cb0f5a636d57e780095bd",
          "md5": "7cd6fd0488eb35a9fb2762d51c60dd80",
          "sha256": "c17c0a93f0654e681a417b23d5184caf7098d6470a38471638201781f2fcc2fd"
        },
        "downloads": -1,
        "filename": "easeml-0.0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "7cd6fd0488eb35a9fb2762d51c60dd80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24538,
        "upload_time": "2020-11-13T10:16:14",
        "upload_time_iso_8601": "2020-11-13T10:16:14.617155Z",
        "url": "https://files.pythonhosted.org/packages/62/3b/8c5b55216b056ff56fa22728b9b99110d736c89cb0f5a636d57e780095bd/easeml-0.0.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9de74821b9c70a551ae0f3abd2f3fe6cdc126372e5b6c1eacebc6db9eb1e87b1",
          "md5": "548d6068da8a1c99debbed6bbb82e15a",
          "sha256": "ef8019f0f078672079d59071bc8199019ca592f419dca7263bf7922b31b9f4d6"
        },
        "downloads": -1,
        "filename": "easeml-0.0.1.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "548d6068da8a1c99debbed6bbb82e15a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32563,
        "upload_time": "2020-11-13T10:29:16",
        "upload_time_iso_8601": "2020-11-13T10:29:16.117673Z",
        "url": "https://files.pythonhosted.org/packages/9d/e7/4821b9c70a551ae0f3abd2f3fe6cdc126372e5b6c1eacebc6db9eb1e87b1/easeml-0.0.1.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f10ddd1a847ece266457434cabe8c302e17f49b679b3fc6948369a44e444dcf",
          "md5": "94e4fdd7c14575a9af6520ecfbf82c9e",
          "sha256": "f5774aeea64fc6bacc7f1d05153a6cd91ad0e0fc81546144a88c4bfe91464be2"
        },
        "downloads": -1,
        "filename": "easeml-0.0.1.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "94e4fdd7c14575a9af6520ecfbf82c9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24546,
        "upload_time": "2020-11-13T10:29:17",
        "upload_time_iso_8601": "2020-11-13T10:29:17.877003Z",
        "url": "https://files.pythonhosted.org/packages/2f/10/ddd1a847ece266457434cabe8c302e17f49b679b3fc6948369a44e444dcf/easeml-0.0.1.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9de74821b9c70a551ae0f3abd2f3fe6cdc126372e5b6c1eacebc6db9eb1e87b1",
        "md5": "548d6068da8a1c99debbed6bbb82e15a",
        "sha256": "ef8019f0f078672079d59071bc8199019ca592f419dca7263bf7922b31b9f4d6"
      },
      "downloads": -1,
      "filename": "easeml-0.0.1.dev3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "548d6068da8a1c99debbed6bbb82e15a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32563,
      "upload_time": "2020-11-13T10:29:16",
      "upload_time_iso_8601": "2020-11-13T10:29:16.117673Z",
      "url": "https://files.pythonhosted.org/packages/9d/e7/4821b9c70a551ae0f3abd2f3fe6cdc126372e5b6c1eacebc6db9eb1e87b1/easeml-0.0.1.dev3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f10ddd1a847ece266457434cabe8c302e17f49b679b3fc6948369a44e444dcf",
        "md5": "94e4fdd7c14575a9af6520ecfbf82c9e",
        "sha256": "f5774aeea64fc6bacc7f1d05153a6cd91ad0e0fc81546144a88c4bfe91464be2"
      },
      "downloads": -1,
      "filename": "easeml-0.0.1.dev3.tar.gz",
      "has_sig": false,
      "md5_digest": "94e4fdd7c14575a9af6520ecfbf82c9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24546,
      "upload_time": "2020-11-13T10:29:17",
      "upload_time_iso_8601": "2020-11-13T10:29:17.877003Z",
      "url": "https://files.pythonhosted.org/packages/2f/10/ddd1a847ece266457434cabe8c302e17f49b679b3fc6948369a44e444dcf/easeml-0.0.1.dev3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}