{
  "info": {
    "author": "Gaozj",
    "author_email": "3193346402@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# OpenAnnotate\n\n#### A python package for efficiently annotating the chromatin accessibility of genomic regions\n\nChromatin accessibility is a measure of the ability of nuclear macromolecules to physically contact DNA, and is essential for understanding regulatory mechanisms.\n\nOpenAnnotate facilitates the chromatin accessibility annotation for massive genomic regions by allowing ultra-efficient annotation across various biosample types based on chromatin accessibility profiles accumulated in public repositories (1236 samples from ENCODE and 1493 samples from ATACdb).\n\nFor more information, please refer to the web: http://health.tsinghua.edu.cn/openannotate/\n\n### Install OpenAnnotate via Pypi\nAnaconda users can first create a new Python environment and activate it via(this is unnecessary if your Python environment is managed in other ways)\n\n```Python\nconda create python=3.6 -n OpenAnnotate\nconda activate OpenAnnotate\n```\n\nOpenAnnotate is available on pypi here and can be installed via\n```Python\npip install OpenAnnotate\n```\n\n\n### Usage  \n\n**Import**\n\nThe package inclues a class named `OpenAnnotate`, All functions are implemented by instantiating objects of this class.\n```Python\nfrom OpenAnnotate import OpenAnnotateApi\n```\n\n**Instantiate object**\n\nInstantiate an object with the data path.\n\n```Python\noaa=OpenAnnotateApi.Annotate()\n```\n\n\n**Help**\n\nGet a list of the various functions and arguments that the package contains.\n```Python\noaa.help()\n'''\ngetParams() : get params list\ngetCelltypeList(protocol,species) : get cell type list\nsearchCelltype(protocol, species, keyword) : search for cell types that contain keyword\nsetParams(assay,species,cell_type,perbase) : set params list\nrunAnnotate(file_path) : Upload file to server\ngetProgress(task_id)\ngetAnnoResult(result_type,save_path,task_id)\ngetInputFile(save_path, task_id) : get your input file from server\nviewParams(task_id) : view parameters\nexampleTaskID() : get example task id\nexampleInputFile(save_path) : get example input file to the save_path\n'''\n```\n\n**Get parameters**\n\nGet the parameters to be set.\n```python\n# get basic parameters you need to set\noaa.getParams()\n\n# get the corresponding cell type list\noaa.getCelltypeList(protocol, species)\n\n# search cell type\noaa.searchCelltype(protocol, species, keyword)\n```\n- `getParams()`: Return the parameter list of `species`,`protocol` and `Annotate method`.\n- `getCelltypeList(protocol,species)` : Return the cell type list of the corresponding `protocol` and `species`.\n- `species` : \n  - 11 : GRCh37/hg19 \n  - 12 : GRCh38/hg38 \n  - 21 : GRCm37/mm9 \n  - 22 : GRCm38/mm10\n- `protocol`: \n  - 1 : DNase-seq(ENCODE)\n  - 2 : ATAC-seq(ENCODE) \n  - 3 : ATAC-seq(ATACdb)\n- `keyword`: Key word for search. Such as `K562`.\n\n\n**Set parameters**\n\nSet parameters for your object.\n\n```python\noaa.setParams(species, protocol, cell_type, perbase)\n```\n- `species` : \n  - 11 : GRCh37/hg19 \n  - 12 : GRCh38/hg38 \n  - 21 : GRCm37/mm9 \n  - 22 : GRCm38/mm10\n- `protocol`: \n  - 1 : DNase-seq(ENCODE)\n  - 2 : ATAC-seq(ENCODE) \n  - 3 : ATAC-seq(ATACdb)\n- `cell_type`: refer to the function `getCelltypeList()`.\n- `perbase`: 0 : Region based,1 : Per-base based.\n\n\n**Example file**\n\nExample `task_id` and `EXAMPLE.bed` file.\n```python\noaa.exampleInputFile(save_path)\n\ntask_id=oaa.exampleTaskID()\n```\n- `task_id`: The 16-bit identity of the submitted task.\n\n\n**Submit**\n\nSubmit your file to server and return a `task_id` for query progress and download results.\n\n```python\ntask_id=oaa.runAnnotate(file_path)\n```\n\n- `file_path`: The path of the '.bed' or '.bed.gz' file to be uploaded, such as `'/Users/example/example.bed'`.\n\n**Get Result**\n\nGet the current progress according to the `task_id`, download the result file to the local path.\n```python\n# You can view the annotation progress\noaa.getProgress(task_id)\n\n# You can view the parameters you set before\noaa.viewParams(task_id)\n\noaa.getResultType()\n'''\n1 - head\n2 - readopen\n3 - peakopen\n4 - spotopen\n5 - foreread\n'''\n\n# download the annotate result\noaa.getAnnoResult(result_type, save_path, task_id)\n\n# download the bed file from web server\noaa.getInputFile(save_path, task_id)\n```\n\n- `result_type`: The file type of the result, 1 - head, 2 - readopen, 3 - peakopen, 4 - spotopen, 5 - foreread.\n- `save_path`: Path to save download file.\n- `task_id`: The 16-bit identity of the submitted task.\n\n\n\n### Example\n\n```python\n# initial and get parameters\nfrom OpenAnnotate import OpenAnnotateApi\noaa=OpenAnnotateApi.Annotate()\noaa.help()\noaa.getParams()\n```\noutput:\n```\nSpecies list :\n11 - GRCh37/hg19\n12 - GRCh38/hg38\n21 - GRCm37/mm9\n22 - GRCm38/mm10\nProtocol list :\n1 - DNase-seq(ENCODE)\n2 - ATAC-seq(ENCODE)\n3 - ATAC-seq(ATACdb)\nAnnotate mode :\n0 - Region based\n1 - Per-base based\n```\n```python\n# get example bed and task id.\n# download bed file from server\ntask_id=oaa.exampleTaskID()\n\noaa.exampleInputFile(save_path='.')\n\noaa.getInputFile(save_path='.', task_id=2021061544690865)\n```\noutput:\n```\nExample task id: 2020121013091517\nget the result to ./EXAMPLE.bed.gz\nget the result to ./2021061544690865.bed\n```\n\n\n```python\noaa.getCelltypeList(protocol=1, species=11)\n\noaa.searchCelltype(protocol=1, species=11, keyword='K562')\n\noaa.setParams(species=11, protocol=1, cell_type=1, perbase=1)\n\ntask_id=oaa.runAnnotate(file_path='./EXAMPLE.bed.gz')\n\n# view parameters\noaa.viewParams(task_id=2021061817196919)\n```\noutput (Omit cell type):\n```\nYour task id is: 2021061915336302\nYou can get the progress of your task through getProgress(task_id=2021061915336302)\n\nYour task's parameters:\nProtocol: DNase-seq(ENCODE)\nSpecies: GRCh37/hg19\nCell type: All biosample types\nAnnotate mode: perbase based\n```\n\n\n```python\n# download the result\noaa.getProgress(task_id=2021061817196919)\noaa.getAnnoResult(result_type=1, save_path='.', task_id=2021061817196919)\n```\noutputï¼š\n```\nYour task has been completed!\nYou can get the result file type first through getResultType()\nYou can download result file through getAnnoResult(result_type, save_path, 2021061817196919)\n\nget the result to ./head.txt.gz\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZjGaothu/OpenAnnotate",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OpenAnnotate",
    "package_url": "https://pypi.org/project/OpenAnnotate/",
    "platform": "",
    "project_url": "https://pypi.org/project/OpenAnnotate/",
    "project_urls": {
      "Homepage": "https://github.com/ZjGaothu/OpenAnnotate",
      "Web": "http://health.tsinghua.edu.cn/openness/anno/"
    },
    "release_url": "https://pypi.org/project/OpenAnnotate/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python package for efficiently annotating the chromatin accessibility of genomic regions.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14136341,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7994de90e78449c90f0d9faabd2bdcb01067ed7bd5f7000065f25e629686695c",
          "md5": "c7a5cc6eeeafcd6416e43f6ec12639e9",
          "sha256": "bfa1cb605069275962ee5f21a6760ad45949d775b97b32a2a25bf078f17d12f4"
        },
        "downloads": -1,
        "filename": "OpenAnnotate-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c7a5cc6eeeafcd6416e43f6ec12639e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6134,
        "upload_time": "2021-06-19T08:18:34",
        "upload_time_iso_8601": "2021-06-19T08:18:34.255606Z",
        "url": "https://files.pythonhosted.org/packages/79/94/de90e78449c90f0d9faabd2bdcb01067ed7bd5f7000065f25e629686695c/OpenAnnotate-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7994de90e78449c90f0d9faabd2bdcb01067ed7bd5f7000065f25e629686695c",
        "md5": "c7a5cc6eeeafcd6416e43f6ec12639e9",
        "sha256": "bfa1cb605069275962ee5f21a6760ad45949d775b97b32a2a25bf078f17d12f4"
      },
      "downloads": -1,
      "filename": "OpenAnnotate-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c7a5cc6eeeafcd6416e43f6ec12639e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6134,
      "upload_time": "2021-06-19T08:18:34",
      "upload_time_iso_8601": "2021-06-19T08:18:34.255606Z",
      "url": "https://files.pythonhosted.org/packages/79/94/de90e78449c90f0d9faabd2bdcb01067ed7bd5f7000065f25e629686695c/OpenAnnotate-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}