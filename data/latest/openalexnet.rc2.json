{
  "info": {
    "author": "Filipi N. Silva",
    "author_email": "filipinascimento@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<a target=\"_blank\" href=\"https://colab.research.google.com/github/filipinascimento/openalexnet\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n</a>\n\n# OpenAlex Networks (openalexnet)\nOpenAlex Networks is a helper library and standalone command-line application to process and obtain data from the [OpenAlex](https://openalex.org) dataset via API. It also provides functionality to generate citation and coauthorship networks from queries.\n\n<img width=\"1054\" alt=\"image\" src=\"https://user-images.githubusercontent.com/600989/214225803-86be86b6-e1fe-4c4a-babf-1fce518bcb9a.png\">\n\n\n\n## [Installation](#installation)\n\nInstall using pip\n\n```bash\npip install openalexnet\n```\n\nor from source:\n```bash\npip git+https://github.com/filipinascimento/openalexnet.git\n```\n\n## [Usage as command-line application](#usage-as-command-line-application)\nAfter installing openalexnet, you can use the command:\n```bash\npython -m openalexnet\n```\nor simply \n```bash\nopenalexnet\n```\nThis should print a help message with the available commands and options.\n\nYou can make your first query by using:\n```bash\nopenalexnet -t works -f \"author.id:A2420755856,is_paratext:false,type:journal-article\" -s \"complex\" -r \"cited_by_count:desc\" -o works.jsonl -c citation_network.gml -a coauthorship_network.gml\n```\nThis will get all the journal articles from H. Eugene Stanley (A2420755856) with the word \"complex\" and sorted by the number of citations (in descending order).\n\nFor more details about the interface, check the following sections.\n\n### [Querying the OpenAlex API](#querying-the-openalex-api)\nThe queries have four main parameters:\n - `entitytype` (`-t`): Type of entity to be retrieved from the OpenAlex API. Can be one of the following: `works`, `institutions`, `authors`, `concepts` or `venues`\n - `filter` (`-f`): Comma-separated filter entries formatted as `<key>:<value>` to be used in the OpenAlex API call. Only results passing the filter will be retrieved. See https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/filter-entity-lists for more information. Defaults to `\"\"` (or no filter). Example: `-f \"type:journal-article,author.id:A2420755856\"`.\n - `search` (`-s`): Search string to be used in the OpenAlex API call. Only results matching the search string (in the title, abstract, or fulltext) will be retrieved. See https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/search-entities for more information. Defaults to `\"\"` (or no search). Example: `-s \"complex networks\"`.\n - `sort` (`-r`): Comma-separated sort entries formatted as `<key>[:desc]` to be used in the OpenAlex API call. See https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/sort-entity-lists for more information. Defaults to `\"\"` (or no sort). Example: `-r \"cited_by_count:desc\"`.\n\nIn addition to the query parameters, the user can provide the maximum number of entities to be retrieved by using the parameter `maxentities` (`-m`), set to 10000 by default. Use -1 to retrieve all entities. Example: `-m 100` or `-m -1`.\n\nNote that OpenAlex API recommends downloading and processing the snapshots of the dataset instead of using the API if you plan to download a large chunk of the complete dataset.\n\n### [JSON Lines output](#json-lines-output)\nThe output can be saved to a JSON Lines file (each line containing a JSON entry) by passing the argument `--outputfile` (`-o`). Example: `-o works.jsonl`.\n\n### [Aggregating queries](#aggregating-queries)\nIt is also possible to combine several queries by providing a `.csv` or `.tsv` file with the queries. The file should have the following columns: `filter`, `search`, `sort` and `maxentities`. Missing columns will be filled with the default values. The output will have all the aggregated queries. Example: `openalexnet -i queries.csv` for a file `queries.csv` with the following content:\n```csv\nfilter,search,sort,maximum_entities\n\"type:journal-article\",\"\"\"complex networks\"\"\",\"cited_by_count:desc\",10000\n\"type:journal-article\",\"\"\"network science\"\"\",\"cited_by_count:desc\",10000\n```\nThis should retrieve the 10000 most cited works with the terms \"complex networks\" or \"network science\" using two different queries. The folder `Examples/query_files/` provides more examples of query files.\n\n### [Generating networks](#generating-networks)\nThe command-line application can also generate citation and coauthorship networks from the retrieved entities. The networks can be saved in 3 different formats: `.edgelist`, `.gml`, or `.xnet`.\nThe citation network can be generated by providing the argument `--citationfile` (`-c`), with the parameter being the file path where the network should be saved. The extension of the file will determine the format. Example: `-c citation_network.gml`. Similarly, the coauthorship network can be generated by providing the argument `--coauthorfile` (`-a`). Example: `-c citation_network.gml -a coauthorship_network.gml`.\n\nAttributes of works can be selected to be exported in the network by providing the argument `--keptattributes` (`-k`). The attributes should be comma-separated. Example: `-n \"id,title,doi\"`.\n\nBy default the following properties are exported in the network:\n```\nid, doi, title, display_name, publication_year, publication_date, type, authorships, concepts, host_venue\n```\n\nThe parameter --ignoreattributes (`-g`) can be used to ignore some of the default attributes. Example: `-i \"authorships,concepts,host_venue\"`.\n\nFor the case of coauthorship networks, the user can provide two extra parameters:\n - `--no_simplenetworks` (`-n`): If enabled, the coauthorship network edges will not be aggregated, resulting in multiple edges. The default is disabled.\n - `--countweights` (`-w`) If enabled the coauthorship network will have non-normalized weights, i.e., the contribution of a paper to a connection weight is 1.0, otherwise the contribution is the inverse of the number of authors in the paper. The default is disabled.\n\n if `.edgelist` format is used, extra `csv` files with the nodes and edges attributes will be generated with the same name as the network file, but with the extension `_nodes.csv` and `_edges.csv`.\n\n### [Loading from saved JSON Lines files](#loading-from-saved-json-lines-files)\nThe command-line application can also load the JSON Lines files generated by the API and generate the networks. This can be done by providing the argument `--inputfile` (`-i`). Example: `-i works.jsonl -c citation_network.gml -a coauthorship_network.gml`.\n\n### [Polite mode](#polite-mode)\nFinally, users can use the polite mode by providing an email address using `--email` (`-e`). See https://docs.openalex.org/how-to-use-the-api/ for more information.\n\n### [Example usage](#example-usage)\nTo obtain the works with the term`\"complex networks\"` (in abstracts, titles or fulltexts) sorted by the number of citations. This also generates gml files for the citation and coauthorship networks.\n```bash\nopenalexnet -t works -f \"type:journal-article\" -s \"complex networks\" -r \"cited_by_count:desc\" -o works.jsonl -c citation_network.gml -a coauthorship_network.gml\n```\nNote that because `maxentities` is not provided, only the 10000 most cited works will be obtained.\n\nTo load the saved works.jsonl file and generate the networks:\n```bash\nopenalexnet -t works -i works.jsonl -c citation_network.edgelist -a coauthorship_network.edgelist\n```\n\nUse a query file to retrieve works and save them to a JSON Lines file:\n```bash\nopenalexnet -t works -q query.csv -o works.jsonl\n```\n\n## [Python Library Usage](#python-library-usage)\n\nObtaining works from a specific author:\n\n```python\n    filterData = {\n        \"author.id\": \"A2420755856\", # Eugene H. Stanley\n        \"is_paratext\": \"false\",  # Only works, no paratexts (https://en.wikipedia.org/wiki/Paratext)\n        \"type\": \"journal-article\", # Only journal articles\n        \"from_publication_date\": \"2000-01-01\" # Published after 2000\n    }\n\n    entityType = \"works\"\n\n    openalex = oanet.OpenAlexAPI() # add your email to accelerate the API calls. See https://openalex.org/api\n\n    entities = openalex.getEntities(entityType, filter=filterData)\n\n    entitiesList = []\n    for entity in tqdm(entities,desc=\"Retrieving entries\"):\n        entitiesList.append(entity)\n\n    # Saving data as json lines (each line is a json object)\n    oanet.saveJSONLines(entitiesList,\"works_filtered.jsonl\")\n```\n\nCheck `Examples` folder for more examples.\n\n## [Coming soon](#coming-soon)\n - Full API documentation\n    - More examples\n - Unit tests\n - Group count\n\n## Google Colaboratory Demo/Tutorial\nYou can access a Google Colab demo and tutorial by using the following link.\n<a target=\"_blank\" href=\"https://colab.research.google.com/github/filipinascimento/openalexnet\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n</a>\n\n## [Thanks](#thanks)\nRemember to cite the OpenAlex work:\n```bib\n@article{priem2022openalex,\n  title={OpenAlex: A fully-open index of scholarly works, authors, venues, institutions, and concepts},\n  author={Priem, Jason and Piwowar, Heather and Orr, Richard},\n  journal={arXiv preprint arXiv:2205.01833},\n  year={2022}\n}\n```\nIf you use this code, please give it a star and share with your coleagues. Also stay tuned as I plan to develop a web-based interface for dynamic visualization of openalex networks. Check out [Helios-Web](http://github.com/filipinascimento/helios-web) to see the development progress of our network visualization tools.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/filipinascimento/openalexnet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openalexnet",
    "package_url": "https://pypi.org/project/openalexnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/openalexnet/",
    "project_urls": {
      "Homepage": "https://github.com/filipinascimento/openalexnet"
    },
    "release_url": "https://pypi.org/project/openalexnet/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python library to load get networks from the OpenAlex API",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17436647,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba6b855491dd3492d7ee40eb6f5cb7ac584f0fcf49b223593a1fa0d713891b3",
          "md5": "152d27fd1aa57644112ea9efd8a4576e",
          "sha256": "d40a4f5fb9ada7697b610f61de3614336c4a36fcf5b77e985b0785a3dde8938d"
        },
        "downloads": -1,
        "filename": "openalexnet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "152d27fd1aa57644112ea9efd8a4576e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16716,
        "upload_time": "2023-01-24T05:13:39",
        "upload_time_iso_8601": "2023-01-24T05:13:39.252176Z",
        "url": "https://files.pythonhosted.org/packages/0b/a6/b855491dd3492d7ee40eb6f5cb7ac584f0fcf49b223593a1fa0d713891b3/openalexnet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55bff1a0db347a3afcd3ed97b38eea2a94951f82c36b2e88e184106878eae0f0",
          "md5": "9afcfbdc992dcc64ba42aa06c1881c7d",
          "sha256": "c8574b55bcb87612221625934679606e54a8dd7a1b56ef8ff0015bece420cf42"
        },
        "downloads": -1,
        "filename": "openalexnet-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9afcfbdc992dcc64ba42aa06c1881c7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18459,
        "upload_time": "2023-03-24T23:00:13",
        "upload_time_iso_8601": "2023-03-24T23:00:13.122534Z",
        "url": "https://files.pythonhosted.org/packages/55/bf/f1a0db347a3afcd3ed97b38eea2a94951f82c36b2e88e184106878eae0f0/openalexnet-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55bff1a0db347a3afcd3ed97b38eea2a94951f82c36b2e88e184106878eae0f0",
        "md5": "9afcfbdc992dcc64ba42aa06c1881c7d",
        "sha256": "c8574b55bcb87612221625934679606e54a8dd7a1b56ef8ff0015bece420cf42"
      },
      "downloads": -1,
      "filename": "openalexnet-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9afcfbdc992dcc64ba42aa06c1881c7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18459,
      "upload_time": "2023-03-24T23:00:13",
      "upload_time_iso_8601": "2023-03-24T23:00:13.122534Z",
      "url": "https://files.pythonhosted.org/packages/55/bf/f1a0db347a3afcd3ed97b38eea2a94951f82c36b2e88e184106878eae0f0/openalexnet-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}