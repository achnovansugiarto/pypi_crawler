{
  "info": {
    "author": "Daniel Kiermeier",
    "author_email": "d.kiermeier@layers-of-life.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<img src=\"https://user-images.githubusercontent.com/52833906/149335767-4caee5aa-7362-4f52-ab90-0772a9fc1507.png\" alt=\"It's Mr. Tcheasy!\" style=\"width:90%;\">\n<p style=\"color:gray\"><em><a href='https://de.freepik.com/vektoren/design'>Checkout - freepik - </a> the photographer of Mr. Tcheasy & Sorpa!</em></p>\n\n<br>\n<br>\n<br>\n\n\n# tcheasy\n\n**tcheasy** is a python decorator that makes type checking (at runtime) easy! <br>\nJust import the decorator and start **to check your function inputs** from the get-go. <br>\nYou want to define **input restrictions** as well? Then your are in the right place! <br>\n\n<p style=\"color:gray\"> <em> Python >= 3.8 needed. Tested ver. { 3.8.5, 3.9.9 } </em> <p>\n\n<br>\n<br>\n\n## <a name=\"top\"></a> CONTENT\n1. [why?](#whats-it)\n2. [how?](#how)\n4. [install?](#install)\n4. [where is Sorpa?](#sorpa)\n5. [examples?](#examples)\n \n\n<br>\n\n# <a name='whats-it'></a> WHY? <sub><sub>[Back to top](#top)</sub></sub> \n\nFor one of my projects I needed a way to check user inputs at runtime. <br>\nThere were already packages that do type-checking, but they only use the - relatively simplistic - python type hints. <br>\nThe problem, however, was that I needed not only type checking but also the option to restrict some parameter inputs. <br>\n\n<br>\n\nEnter **tcheasy**! <br>\n\n<br>\n\nOut of the need to have a tool for other projects, this python decorator was born. <br>\nThis little kritter is able to use a predefined `dict` or the `python type hinting`. Please refere to the [how?](#how) & [example?](examples) section for more infos about the usage. <br>\n\n<br>\n\n**tcheasy** ships also with his neat little friend **sorpa**: <br>\nThe function `sorpa()` is able to extract and sort your passed function parameters at runtime.<br>\n\n<br>\n\nIf you are sololy looking for a type checking tool (and some handy utility-tools) you should also check out:\n- [beartype](https://github.com/beartype/beartype)\n- [typeguard](https://typeguard.readthedocs.io/en/latest/)\n- [mypy](http://mypy-lang.org/)\n\n<br>\n\nElse feel free to use and modify **tcheasy** as you please.\n\n<br>\n\n# <a name='how'></a>  HOW? <sub><sub>[Back to top](#top)</sub></sub> \n\nJust import the package \n\n<br>\n\n```python\nfrom tcheasy import tcheasy\n```\n\n<br>\n\nand add the decorator `@tcheasy()` to your to-be-checked function. <br>\nIf you are already using `python type hinting` **tcheasy** is ready out of the box. <br>\n\nIn the current version, the following types (hints) are supported:\n- **NoneType(s)**: None\n- **number types**: int, float, complex, bool\n- **sequence types**: str, list, tuple\n- **mapping types**: dict\n- **set types**: sets\n- **callable types**: object\n- **`typing`-module types**: typing.Any, typing.Union\n\n<br>\n\nBut the true might comes from using *declarative dicts*. <br>\nBy passing a dict to `@tcheasy()` you can specify the parameter types, add rudimentary input restrictions & default values. <br>\nThe structure of these dictionaries (and their used keywords) is always the same (`type`, `restriction` (optional) & `default` (optional)):\n\n<br>\n\n```python\n# define the dict!\n\nto_check = {\n    'positional':{\n        'parameter-name':{\n            'type': type,\n            'restriction': \"(optional) in the form: value condition\",\n            'default': \"(optional) default value\"\n        },\n        'next-parameter-name':{\n            ...\n        },\n        ...\n    },\n    'args':[ {'type':type, 'restriction':str, 'default': \"value\" }, {...}, ...],\n    'kwargs': {\n        'parameter-name':{...},\n        ...\n    }\n}\n\n```\n\n<br>\n\nAs you can see, you have the complete control over potential `*args` and `**kwargs`.\nThe definition structure of 'kwargs' is also the same as for the `positional`s. <br>\nKeep in mind that you do not have to define `restriction` and/or `default`. These two keywords are completely optional.\n\n<br>\n\nAfter you have defined the `dict` you can pass it to `@tcheasy()` and it will start to monitor the function at runtime (e.g. if your `dict` is called **to_check**, then you pass it like this: `@tcheasy(to_check)`).\n\n<br>\n\n> *Note:* <br>\n> *The separation of `positional`, `args` & `kwargs` is derived of the python parameter types. There are 5 distinct types, which can be boiled down to basically 3 'blocks':*\n> - *positional:*\n>   - *keyword parameters (your typical `def test(a)`, while the call was `test(a='some-value')`)*\n>   - *(positional) parameters (again your typical `def test(a)` but this time calling just `test('some-value')`)*\n> - *\\*args:*\n>   - *arbitrary positional arguments (`def test(a, *args)`, while calling `test('value-a', 'value-args')`)*\n> - *\\**kwargs:*\n>   - *arbitrary keyword arguments (`def test(a, **kwargs)`, while calling `test('value-a', add_kwargs=\"some-value\"`))*\n\n<br>\n\nThe structure of the `default` keyword is  - as mentioned - always the same. For example consider the following:\n\n<br>\n\n```python\n\n...\n    'parameter-name': {\n        'type': int,\n        'restriction':\"value > 1\"\n    },\n...\n\n```\n\n<br>\n\nIn this example, the passed `int` parameter gets evaluated and has to be be greater than one.\nThe word `value` is the placeholder for your function parameter. <br>\nTo give you another example, you can use `\"value in ['yes', 'no', 'maybe']\"` to evaluate if the passed string parameter is one of the elements in the list. <br>\nWith this technique you are able to do some pretty awsome stuff! <br>\n\n<br>\n\nIf you want further examples, please refere to the [examples?](#examples) section. <br>\n\n<br>\n\n# <a name='install'></a> INSTALL? <sub><sub>[Back to top](#top)</sub></sub> \n\nThere are two ways to install **tcheasy**.<br>\nThe easy way is to use pip: <br>\n\n<br>\n\n```terminal\n$ pip install tcheasy\n```\n\n<br>\n\nThe other option is to `git clone` the project and then run: \n\n<br>\n\n```terminal\n$ pip install 'path-to-your-clone'\n```\n\n<br>\n\nIf you want to tinker with your code, run the pip install with `-e`. <br>\n\n\n<br>\n\n# <a name='sorpa'></a> WHERE IS SORPA? <sub><sub>[Back to top](#top)</sub></sub> \n\n**Mr. Tcheasy** comes packed with his friend **Sorpa**!\n\n<img src=\"https://user-images.githubusercontent.com/52833906/149335771-cf8fd80b-aacb-49a9-9776-e16874cc016f.png\" alt=\"Sorpa ~\" style=\"width:60%;\">\n\n<br>\n\n`sorpa()` is a python function which shows you the passed parameters, names, declartions and hints of your targeted python function at runtime. <br>\n\n<br>\n\nThe import is as easy as the import for **tcheasy**. Just:\n\n<br>\n\n```python\nfrom tcheasy import sorpa\n```\n\n<br>\n\nThis function takes as input the function (`func`) you want to analyse and the locals (`loc`). <br>\nAs soon as you passed those two arguments, you get a handy dict which sorted the passed parameters, your declared parameter (during function definition) & python hints. <br>\nFor example, lets consider the following test function:\n\n<br>\n\n```python\n# we define our test function (called 'test_function') with the parameters a, b & c\n# also we add some type hinting\ndef test_function(a:int, b:str, c:float = .1) -> dict:\n    \"\"\"Our test function. Proper docstring skipped \"\"\"\n\n    # get our local variables\n    loc = locals()\n\n    # lets consider we already imported 'sorpa'\n    # we set decorated to 'False' to tell the algorithmn\n    # that we are not within a decorator scope.\n    sortedParameters = sorpa(\n        func = test_function, \n        loc = loc,\n        decorated = False\n        )\n\n    return sortedParameters\n```\n\n<br>\n\nNow we can call the function with some arguments (e.g. `test_function(5, b=\"some-string\")`) and get as a return the following:\n\n<br>\n\n```python\n>> {\n        'positional': {'a': 5, 'b': 'some-string', 'c': 0.1},\n        'args':[],\n        'kwargs':{},\n        'hinting':{'a': <class 'int'>, 'b': <class 'str'>, 'c': <class 'float'>},\n        'declared': ['a', 'b', 'c'],\n        'self':{'available':False, 'value':None}\n   }\n```\n\n<br>\n\n# <a name='examples'></a> EXAMPLES? <sub><sub>[Back to top](#top)</sub></sub> \n\nTo get some examples, please check out the **[examples](https://github.com/No9005/tcheasy/tree/main/examples)** directory (on github). <br>\nThere you will find examples for **Mr. Tcheasy's** & and his friend **Sorpa's** usecases.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/No9005/tcheasy/archive/refs/tags/v.1.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/No9005/tcheasy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tcheasy",
    "package_url": "https://pypi.org/project/tcheasy/",
    "platform": "",
    "project_url": "https://pypi.org/project/tcheasy/",
    "project_urls": {
      "Download": "https://github.com/No9005/tcheasy/archive/refs/tags/v.1.1.0.tar.gz",
      "Homepage": "https://github.com/No9005/tcheasy"
    },
    "release_url": "https://pypi.org/project/tcheasy/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python decorator which checks types & restrictions for user inputs",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12917279,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e27601e1f8f68c6851c0e4f2612640dd2686b767c5f6b15cb91caa110f64f053",
          "md5": "fa29e9e92de223477b1e0a374e6a2c1d",
          "sha256": "887c6c6282a11357c78aac542d06c5e286b95b89ac7f395d82619bcbe030d4d1"
        },
        "downloads": -1,
        "filename": "tcheasy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa29e9e92de223477b1e0a374e6a2c1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14123,
        "upload_time": "2022-01-13T17:21:16",
        "upload_time_iso_8601": "2022-01-13T17:21:16.123026Z",
        "url": "https://files.pythonhosted.org/packages/e2/76/01e1f8f68c6851c0e4f2612640dd2686b767c5f6b15cb91caa110f64f053/tcheasy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32309c3cabdca0a8b516bea3d95e5848841337ad260df8925e98dad6333c5b00",
          "md5": "016ace925555b5178ec4c446185cd836",
          "sha256": "c113b47d08ad01f78b8af2e9bc54df93fe639c3de027e43fb9a90cfcf0faa4c1"
        },
        "downloads": -1,
        "filename": "tcheasy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "016ace925555b5178ec4c446185cd836",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16295,
        "upload_time": "2022-01-13T17:21:17",
        "upload_time_iso_8601": "2022-01-13T17:21:17.700066Z",
        "url": "https://files.pythonhosted.org/packages/32/30/9c3cabdca0a8b516bea3d95e5848841337ad260df8925e98dad6333c5b00/tcheasy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a14658d957c75dfaa8df20d939daed9a73591177c36c43439352286e3090ddb",
          "md5": "a890738cf2c20b97617933f0c58053ab",
          "sha256": "f0e1e59dff62c29ecd3e163f64ed2e3432fda79dbf749ea7286fe6b083c5c99c"
        },
        "downloads": -1,
        "filename": "tcheasy-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a890738cf2c20b97617933f0c58053ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14527,
        "upload_time": "2022-02-17T06:36:12",
        "upload_time_iso_8601": "2022-02-17T06:36:12.675138Z",
        "url": "https://files.pythonhosted.org/packages/4a/14/658d957c75dfaa8df20d939daed9a73591177c36c43439352286e3090ddb/tcheasy-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fac3acd138cbf97e51dc70c553a93c586da5076fe4c1882b6c892d16b108c781",
          "md5": "93c22fcf43157e3263faad816050762b",
          "sha256": "5c05c0f9168951b21f66fef60c1413906ade54848aa26808f29af6bd692f1030"
        },
        "downloads": -1,
        "filename": "tcheasy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93c22fcf43157e3263faad816050762b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16654,
        "upload_time": "2022-02-17T06:36:14",
        "upload_time_iso_8601": "2022-02-17T06:36:14.406882Z",
        "url": "https://files.pythonhosted.org/packages/fa/c3/acd138cbf97e51dc70c553a93c586da5076fe4c1882b6c892d16b108c781/tcheasy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a14658d957c75dfaa8df20d939daed9a73591177c36c43439352286e3090ddb",
        "md5": "a890738cf2c20b97617933f0c58053ab",
        "sha256": "f0e1e59dff62c29ecd3e163f64ed2e3432fda79dbf749ea7286fe6b083c5c99c"
      },
      "downloads": -1,
      "filename": "tcheasy-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a890738cf2c20b97617933f0c58053ab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14527,
      "upload_time": "2022-02-17T06:36:12",
      "upload_time_iso_8601": "2022-02-17T06:36:12.675138Z",
      "url": "https://files.pythonhosted.org/packages/4a/14/658d957c75dfaa8df20d939daed9a73591177c36c43439352286e3090ddb/tcheasy-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fac3acd138cbf97e51dc70c553a93c586da5076fe4c1882b6c892d16b108c781",
        "md5": "93c22fcf43157e3263faad816050762b",
        "sha256": "5c05c0f9168951b21f66fef60c1413906ade54848aa26808f29af6bd692f1030"
      },
      "downloads": -1,
      "filename": "tcheasy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93c22fcf43157e3263faad816050762b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16654,
      "upload_time": "2022-02-17T06:36:14",
      "upload_time_iso_8601": "2022-02-17T06:36:14.406882Z",
      "url": "https://files.pythonhosted.org/packages/fa/c3/acd138cbf97e51dc70c553a93c586da5076fe4c1882b6c892d16b108c781/tcheasy-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}