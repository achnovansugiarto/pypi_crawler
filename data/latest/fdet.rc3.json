{
  "info": {
    "author": "Antonio C. Nazare Jr.",
    "author_email": "antonio.nazare@dcc.ufmg.br",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Other Audience",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Operating System :: Microsoft :: Windows :: Windows 8",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# FDet - Deep Learning Face Detection\n\n[![Build](https://github.com/acnazarejr/fdet/workflows/Build/badge.svg)](https://github.com/acnazarejr/fdet/actions)\n[![CodeFactor](https://www.codefactor.io/repository/github/acnazarejr/fdet/badge)](https://www.codefactor.io/repository/github/acnazarejr/fdet)\n[![codecov](https://codecov.io/gh/acnazarejr/fdet/branch/master/graph/badge.svg)](https://codecov.io/gh/acnazarejr/fdet)\n[![Platform](https://img.shields.io/badge/os-linux%20%7C%20win%20%7C%20mac-blue)](https://pypi.org/project/fdet/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fdet)](https://pypi.org/project/fdet/)\n[![PyPI](https://img.shields.io/pypi/v/fdet)](https://pypi.org/project/fdet/)\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/acnazarejr/fdet)](https://github.com/acnazarejr/fdet/releases)\n[![GitHub](https://img.shields.io/github/license/acnazarejr/fdet)](https://github.com/acnazarejr/fdet/blob/master/LICENSE)\n\nThe `fdet` is a ready-to-use implementation of deep learning face detectors using PyTorch.\n\n![Example](https://github.com/acnazarejr/fdet/raw/master/assets/example.jpg)\n\nYou can use it directly in your code, as a [python library](#python-library-usage):\n\n```python\n>>> from fdet import io, RetinaFace\n\n>>> detector = RetinaFace(backbone='RESNET50')\n>>> detector.detect(io.read_as_rgb('path_to_image.jpg'))\n[{'box': [511, 47, 35, 45], 'confidence': 0.9999996423721313,\n  'keypoints': {'left_eye': [517, 70], 'right_eye': [530, 65], 'nose': [520, 77],\n                'mouth_left': [522, 87], 'mouth_right': [531, 83]}}]\n```\n\nOr through [command-line](#command-line-usage) application:\n\n```bash\nfdet retinaface -b RESNET50 -i path_to_image.jpg -o detections.json\n```\n\n## **Features**\n\nCurrently, there are two different detectors available on FDet:\n\n- **MTCNN** - Joint face detection and alignment using multitask cascaded convolutional networks [[zhang:2016]](#references)\n- **RetinaFace** - Single-stage dense face localisation in the wild. [[deng:2019]](#references). You can use it with two different backbones:\n  - *MobileNet*: Fast and light-weighted model (achieves high FPS)\n  - *Resnet50*: A medium-size model for better results, but slower.\n\nDespite the availability of different implementations of these algorithms, there are some disadvantages we found when using them. So we create this project to offer the following features, in one package:\n\n- :star: Real-time face detection;\n- :star: Support for batch detection (useful for fast detection in multiple images and videos);\n- :star: Ease of use through python library or command-line app;\n- :star: Provide a unified interface to assign 'CPU' or 'GPU' devices;\n- :star: Multiple GPU's support;\n- :star: Automatic on-demand model weights download;\n- :star: Compatible with Windows, Linux, and macOS systems.\n\n## **Installation**\n\n1. You need to [install PyTorch](https://pytorch.org/get-started/locally/) first (if you have a GPU, install PyTorch with CUDA support).\n\n2. Then `fdet` can be installed through pip:\n\n```bash\npip install fdet\n```\n\n## **Python Library Usage**\n\nIf you want to use `fdet` from python, just import it,\n\n```python\nfrom  fdet import MTCNN, RetinaFace\n```\n\nand instantiate your desired detector, with its respective parameters:\n\n- **`MTCNN(thresholds, nms_thresholds, min_face_size, cuda_enable, cuda_devices)`**\n  - `thresholds` (tuple, optional): The thresholds fo each MTCNN step [default: (0.6, 0.7, 0.8)]\n  - `nms_thresholds` (tuple, optional): The NMS thresholds fo each MTCNN step [default: (0.7, 0.7, 0.7)]\n  - `min_face_size` (float, optional): The minimum size of the face to detect, in pixels [default: 20.0].\n  - `cuda_enable` (bool, optional): Indicates wheter CUDA, if available, should be used or not. If False, uses only CPU processing [default: True].\n  - `cuda_devices` (list, optional): List of CUDA GPUs to be used. If None, uses all avaliable GPUs [default: None]. If `cuda_enable` is False, this parameter is ignored.\n\n- **`RetinaFace(backbone, threshold, nms_threshold, max_face_size, cuda_enable, cuda_devices)`**\n  - `backbone` (str): The backbone model [`'RESNET50'` or `'MOBILENET'`].\n  - `threshold` (tuple, optional): The detection threshold [default: 0.8]\n  - `nms_threshold` (tuple, optional): The NMS threshold [default: 0.4]\n  - `max_face_size` (int, optional): The maximum size of the face to detect, in pixels [default: 1000].\n  - `cuda_enable` (bool, optional): Indicates wheter CUDA, if available, should be used or not. If False, uses only CPU processing. [default: True].\n  - `cuda_devices` (list, optional): List of CUDA GPUs to be used. If None, uses all avaliable GPUs. [default: None]. If `cuda_enable` is False, this parameter is ignored.\n\nThe detector classes listed above have two methods to perform the face detection:\n\n### **Singe-Image Detection Example**\n\nThe following example illustrates the ease of use of this library to detect faces in a single-image using MTCNN and to create an output image with all detected faces drawn.\n\n```python\n>>> from fdet import io, MTCNN\n>>>\n>>> detector = MTCNN()\n>>> image = io.read_as_rgb('example.jpg')\n>>>\n>>> detections = detector.detect(image)\n>>> print(detections)\n[{'box': [511, 47, 35, 45], 'confidence': 0.9999996423721313,\n  'keypoints': {'left_eye': [517, 70], 'right_eye': [530, 65], 'nose': [520, 77],\n                'mouth_left': [522, 87], 'mouth_right': [531, 83]}}]\n>>>\n>>> output_image = io.draw_detections(image, detections, color='white', thickness=5)\n>>> io.save('output.jpg', output_image)\n```\n\nThe detector returns a list of `dict` objects. Each `dict` contains three main keys:\n\n- `'box'`: The bounding box formatted as a list `[x, y, width, height]`;\n- `'confidence'`: The probability for a bounding box to be matching a face;\n- `'keypoints'`:\nThe five landmarks formatted into a `dict` with the keys `'left_eye'`, `'right_eye'`, `'nose'`, `'mouth_left'`, `'mouth_right'`. Each keypoint is identified by a pixel position `[x, y]`.\n\nThe `io.read_as_rgb()` is a wrapper for opencv `cv2.imread()` to ensure an RGB image and can be replaced by:\n\n```python\nimage = cv2.imread('example.jpg', cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n```\n\n### **Batch Detection Example**\n\nThe library is also capable of performing face detection on image batches, typically providing considerable speed-up. A batch should be structured as list of images (`numpy` arrays)  of equal dimension. The returned detections list will have an additional first dimension corresponding to the batch size. Each image in the batch may have one or more faces detected.\n\nIn the following example, we detect faces in every frame of a video using batchs of 10 images.\n\n```python\n>>> import cv2\n>>> from fdet import io, RetinaFace\n>>>\n>>> BATCH_SIZE = 10\n>>>\n>>> detector = RetinaFace(backbone='MOBILENET', cuda_devices=[0,1])\n>>> vid_cap = cv2.VideoCapture('path_to_video.mp4')\n>>>\n>>> video_face_detections = [] # list to store all video face detections\n>>> image_buffer = [] # buffer to store the batch\n>>>\n>>> while True:\n>>>\n>>>     success, frame = vid_cap.read() # read the frame from video capture\n>>>     if not success:\n>>>         break # end of video\n>>>\n>>>     frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # convert to RGB\n>>>     image_buffer.append(frame) # add frame to buffer\n>>>\n>>>     if len(image_buffer) == BATCH_SIZE: # if buffer is full, detect the batch\n>>>         batch_detections = detector.batch_detect(image_buffer)\n>>>         video_face_detections.extend(batch_detections)\n>>>         image_buffer.clear() # clear the buffer\n>>>\n>>> if image_buffer: # checks if images remain in the buffer and detect it\n>>>     batch_detections = detector.batch_detect(image_buffer)\n>>>     video_face_detections.extend(batch_detections)\n```\n\n## **Command-line Usage**\n\n![Terminal](https://github.com/acnazarejr/fdet/raw/master/assets/terminal.gif)\n\n## Credits\n\nThe FDet was written heavily inspired by the other available implementations ([see credits](#credits)).\n\n- [TropComplique/mtcnn-pytorch](https://github.com/TropComplique/mtcnn-pytorch/)\n- [biubug6/Pytorch_Retinaface](https://github.com/biubug6/Pytorch_Retinaface)\n- [ipazc/mtcnn](https://github.com/ipazc/mtcnn)\n\nThe current MTCNN version was implemented with the help of [Davi Beltr√£o](@Davibeltrao).\n\n## References\n\n- **[zhang:2016]**: Zhang, K., Zhang, Z., Li, Z. and Qiao, Y. (2016). *Joint face detection and alignment using multitask cascaded convolutional networks*. IEEE Signal Processing Letters, 23(10), 1499-1503. [(link to paper)](https://ieeexplore.ieee.org/abstract/document/7553523)\n\n- **[deng:2019]**: Deng, J., Guo, J., Zhou, Y., Yu, J., Kotsia, I. and Zafeiriou, S. (2019). *Retinaface: Single-stage dense face localisation in the wild*. arXiv preprint arXiv:1905.00641. [(link to paper)](https://arxiv.org/abs/1905.00641)\n\n## License\n\n[MIT license](https://github.com/acnazarejr/fdet/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "http://github.com/acnazarejr/fdet",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/acnazarejr/fdet",
    "keywords": "face recognition detection biometry",
    "license": "",
    "maintainer": "Antonio C. Nazare Jr.",
    "maintainer_email": "antonio.nazare@dcc.ufmg.br",
    "name": "fdet",
    "package_url": "https://pypi.org/project/fdet/",
    "platform": "",
    "project_url": "https://pypi.org/project/fdet/",
    "project_urls": {
      "Download": "http://github.com/acnazarejr/fdet",
      "Homepage": "http://github.com/acnazarejr/fdet"
    },
    "release_url": "https://pypi.org/project/fdet/0.2.1/",
    "requires_dist": [
      "ttictoc",
      "opencv-python",
      "click",
      "tqdm",
      "colour",
      "colorama"
    ],
    "requires_python": ">=3.5",
    "summary": "An easy to use face detection module based on MTCNN and RetinaFace algorithms.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7244054,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "080790bbd8c24adb2db3a8d2a6ab4880c594b73ed7e010dd57195115318f0591",
          "md5": "a255539ff90de9226194a3b82629dced",
          "sha256": "b44e3eb6f31bb70ff2d234ee2ec78e11de215717f26ac444494c746a4165804b"
        },
        "downloads": -1,
        "filename": "fdet-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a255539ff90de9226194a3b82629dced",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17992,
        "upload_time": "2020-05-11T01:12:38",
        "upload_time_iso_8601": "2020-05-11T01:12:38.619170Z",
        "url": "https://files.pythonhosted.org/packages/08/07/90bbd8c24adb2db3a8d2a6ab4880c594b73ed7e010dd57195115318f0591/fdet-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df2f0c74401ddf418faa97f0ceee4ab7ba4c92182c33d2276dc28f8515505679",
          "md5": "384ae39548beb16913522829012141dd",
          "sha256": "6d6ff131e6342aabed132acdfe519d96daa88c661ad528c3b17ec6cad6b66ad5"
        },
        "downloads": -1,
        "filename": "fdet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "384ae39548beb16913522829012141dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15150,
        "upload_time": "2020-05-11T01:12:41",
        "upload_time_iso_8601": "2020-05-11T01:12:41.482780Z",
        "url": "https://files.pythonhosted.org/packages/df/2f/0c74401ddf418faa97f0ceee4ab7ba4c92182c33d2276dc28f8515505679/fdet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a245bee4d326f98912f4369ff6f0e6c855466b511df02a19a06be94e1227a78a",
          "md5": "24cb5358242cd72b439d141efb22106f",
          "sha256": "5b14283bead6e910c3debe5c1e12896e54e719283e76c259b976d6e6aa02f7a5"
        },
        "downloads": -1,
        "filename": "fdet-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24cb5358242cd72b439d141efb22106f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18677,
        "upload_time": "2020-05-14T00:48:51",
        "upload_time_iso_8601": "2020-05-14T00:48:51.469997Z",
        "url": "https://files.pythonhosted.org/packages/a2/45/bee4d326f98912f4369ff6f0e6c855466b511df02a19a06be94e1227a78a/fdet-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac2040abcfd83a57e276836ffdd0000903a9991bfb9d7a7ef8e3634e2bc05ec9",
          "md5": "67e3a43344e18e254724d68aaa5216a3",
          "sha256": "a72088313a76d851bb3e73abb2033b1690e3c08d82905f9675df8efb069954a9"
        },
        "downloads": -1,
        "filename": "fdet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67e3a43344e18e254724d68aaa5216a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18864,
        "upload_time": "2020-05-14T00:48:52",
        "upload_time_iso_8601": "2020-05-14T00:48:52.445904Z",
        "url": "https://files.pythonhosted.org/packages/ac/20/40abcfd83a57e276836ffdd0000903a9991bfb9d7a7ef8e3634e2bc05ec9/fdet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "108dff18917a2ef1c3d8f0596f18a6f81a451b23541ad9c436dd366e7e857ffa",
          "md5": "e112f9e0a4dbfde27df86e807413c117",
          "sha256": "dcd04e2658a0aafc52c61c289f354a20002e3ee48b33efcf4a8c86b59a917977"
        },
        "downloads": -1,
        "filename": "fdet-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e112f9e0a4dbfde27df86e807413c117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 25449,
        "upload_time": "2020-05-14T21:42:20",
        "upload_time_iso_8601": "2020-05-14T21:42:20.981055Z",
        "url": "https://files.pythonhosted.org/packages/10/8d/ff18917a2ef1c3d8f0596f18a6f81a451b23541ad9c436dd366e7e857ffa/fdet-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf5f0a55d882ca91724c8ec83c725c73f0cb45fcef0235b97b1cbbc1050bfce0",
          "md5": "225b30657323e16b03454af896261157",
          "sha256": "fc8645eff7b90661f16187da12a9ff24a73ce1fdb103ed500254dad9ce9aca11"
        },
        "downloads": -1,
        "filename": "fdet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "225b30657323e16b03454af896261157",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 26471,
        "upload_time": "2020-05-14T21:42:22",
        "upload_time_iso_8601": "2020-05-14T21:42:22.091801Z",
        "url": "https://files.pythonhosted.org/packages/cf/5f/0a55d882ca91724c8ec83c725c73f0cb45fcef0235b97b1cbbc1050bfce0/fdet-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "108dff18917a2ef1c3d8f0596f18a6f81a451b23541ad9c436dd366e7e857ffa",
        "md5": "e112f9e0a4dbfde27df86e807413c117",
        "sha256": "dcd04e2658a0aafc52c61c289f354a20002e3ee48b33efcf4a8c86b59a917977"
      },
      "downloads": -1,
      "filename": "fdet-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e112f9e0a4dbfde27df86e807413c117",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 25449,
      "upload_time": "2020-05-14T21:42:20",
      "upload_time_iso_8601": "2020-05-14T21:42:20.981055Z",
      "url": "https://files.pythonhosted.org/packages/10/8d/ff18917a2ef1c3d8f0596f18a6f81a451b23541ad9c436dd366e7e857ffa/fdet-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf5f0a55d882ca91724c8ec83c725c73f0cb45fcef0235b97b1cbbc1050bfce0",
        "md5": "225b30657323e16b03454af896261157",
        "sha256": "fc8645eff7b90661f16187da12a9ff24a73ce1fdb103ed500254dad9ce9aca11"
      },
      "downloads": -1,
      "filename": "fdet-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "225b30657323e16b03454af896261157",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 26471,
      "upload_time": "2020-05-14T21:42:22",
      "upload_time_iso_8601": "2020-05-14T21:42:22.091801Z",
      "url": "https://files.pythonhosted.org/packages/cf/5f/0a55d882ca91724c8ec83c725c73f0cb45fcef0235b97b1cbbc1050bfce0/fdet-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}