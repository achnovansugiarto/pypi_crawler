{
  "info": {
    "author": "Eralp Bayraktar",
    "author_email": "imeralpb@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================================\nDjango Function Caching\n================================\n\nA function wrapper that helps with caching techniques which have been battle-tested with millions of users. 2 main features are as following:\n\n1) Utilizing redis locks to limit cache recalculation to a single thread\n2) Allow serving somewhat stale data to keep the server going\n\nTo understand the design decisions you can read the following blog posts where I justify the need for these cases.\n\nhttps://eralpbayraktar.com/blog/django/2020/caching-with-django\n\nhttps://eralpbayraktar.com/blog/django/2020/caching-with-django-part-II\n\n\n1) Cache calculation mutex\n==========================\nIf you have a cold cache and 1000 requests hit the endpoint, you don't want all your gunicorn workers to calculate this exact same function. With this functionality, 1 worker will calculate and the other 999 have basically 2 options. They can either error out and release worker resources, which is healthy for the remaining endpoints, or they can serve somewhat old value if it's available. This brings us to the next point.\n\n2) Allow serving kind of old data\n=================================\nThis is not ideal but sometimes it's better to serve old cache values instead of erroring out or block all your workers. With django-function-caching you can set 2 timeout values for a given function. One is the grand **timeout**, that's nothing new, after this many seconds the cache will be invalidated, and the other is **freshness_timeout**. This is the interesting one. One example is setting the **timeout** to 24 hours and **freshness_timeout** to 1 hour. This means workers will try to serve a cache value fresher than 1 hour, but if they cannot, then they are allowed to serve a value that's maximum 24 hours old. This flexibility or relaxation gives us the chance to keep the server healthy. You can set the maximum even to 1 month, in ideal conditions **freshness_timeout** should decide the behavior. **timeout** is only used in extreme cases, and you should be glad when it's used because that means it has saved you from something worse or catastrophic. If only 1 request comes and the cache value is older than **freshness_timeout** that worker will recalculate and update the cache.\n\nGetting It\n============\n::\n\n    $ pip install django-function-caching\n\nSettings\n============\n**django-function-caching** will use \"default\" cache backend and it should be redis. Check out how to setup **django-redis** (our dependency)\n\nUsage\n=====\n\n::\n\n    from functioncaching import cached_function\n\n    @cached_function(timeout=24*60*60, freshness_timeout=60*60)\n    def _get_top_book_ids(self):\n        time.sleep(5)  # make the calculation slower for the sake of argument\n        return list(Book.objects.order_by('-purchase_count').values_list('id', flat=True)[:10])\n\n    # or\n\n    @cached_function(timeout=24*60*60, freshness_timeout=60*60, prefix='Author')\n    def _get_top_book_ids(self):\n        time.sleep(5)  # make the calculation slower for the sake of argument\n        return list(Book.objects.order_by('-purchase_count').values_list('id', flat=True)[:10])\n\n\"prefix\" is used to prefix the cache key.\n\nHow is the cache key calculated?\n==================================\nThe cache_key is calculated based on the function name + string representation of all the arguments and keyword arguments. This means if you pass classes/complex objects to the function, it might not behave correctly. So I'd advise you to pass simple parameters (like making functions class methods or static methods and passing object IDs, instead of using self), the same idea when you schedule celery tasks, the simpler the parameters the better, and no unnecessary parameters since they will create additional cache keys. Because the library cannot know if they change the behavior or not.\nPrefix is good when you have the same function names in multiple places/classes/modules, it is optional.\n\nThings to keep in mind\n======================\n\n    AttributeError: 'LocMemCache' object has no attribute 'ttl'\n\nThis means your default cache is not redis, check django-redis installation and configurations.\n\n\n    I'm getting ColdCacheException\n\nGood! The library saved you from worker clogging. This means multiple requests came to the endpoint yet you don't even have an old/stale cache value in your cache database to serve as a back-up. Increase your **timeout** parameter to protect against this.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EralpB/django-function-caching/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-function-caching",
    "package_url": "https://pypi.org/project/django-function-caching/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-function-caching/",
    "project_urls": {
      "Homepage": "https://github.com/EralpB/django-function-caching/"
    },
    "release_url": "https://pypi.org/project/django-function-caching/0.2/",
    "requires_dist": [
      "Django (>=1.6)",
      "django-redis (>=4.11.0)"
    ],
    "requires_python": "",
    "summary": "Advanced function caching",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7318215,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58de21ae37645b948e1a351e553f203cce9a5b4deef4be4a8d9cb615c550d41a",
          "md5": "f5097ff6417b1f70462b7cdeb535a2fd",
          "sha256": "073319a297307b85f497518403f56adf461bbfd0831d9f004efd46a05a90c3e7"
        },
        "downloads": -1,
        "filename": "django_function_caching-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5097ff6417b1f70462b7cdeb535a2fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6544,
        "upload_time": "2020-05-25T09:35:02",
        "upload_time_iso_8601": "2020-05-25T09:35:02.387931Z",
        "url": "https://files.pythonhosted.org/packages/58/de/21ae37645b948e1a351e553f203cce9a5b4deef4be4a8d9cb615c550d41a/django_function_caching-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c00a9d7121750fad8692afce2f18f09352e92605ee20d89d6e8a43eda3e6c17c",
          "md5": "c970d2b468bb631399b7232db6d0ee4d",
          "sha256": "1e0157d1643b5dee7dc841ca7ef046488d789ee50eba86334f1f82b3534a2aa0"
        },
        "downloads": -1,
        "filename": "django-function-caching-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c970d2b468bb631399b7232db6d0ee4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3928,
        "upload_time": "2020-05-25T09:35:04",
        "upload_time_iso_8601": "2020-05-25T09:35:04.701736Z",
        "url": "https://files.pythonhosted.org/packages/c0/0a/9d7121750fad8692afce2f18f09352e92605ee20d89d6e8a43eda3e6c17c/django-function-caching-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58de21ae37645b948e1a351e553f203cce9a5b4deef4be4a8d9cb615c550d41a",
        "md5": "f5097ff6417b1f70462b7cdeb535a2fd",
        "sha256": "073319a297307b85f497518403f56adf461bbfd0831d9f004efd46a05a90c3e7"
      },
      "downloads": -1,
      "filename": "django_function_caching-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5097ff6417b1f70462b7cdeb535a2fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6544,
      "upload_time": "2020-05-25T09:35:02",
      "upload_time_iso_8601": "2020-05-25T09:35:02.387931Z",
      "url": "https://files.pythonhosted.org/packages/58/de/21ae37645b948e1a351e553f203cce9a5b4deef4be4a8d9cb615c550d41a/django_function_caching-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c00a9d7121750fad8692afce2f18f09352e92605ee20d89d6e8a43eda3e6c17c",
        "md5": "c970d2b468bb631399b7232db6d0ee4d",
        "sha256": "1e0157d1643b5dee7dc841ca7ef046488d789ee50eba86334f1f82b3534a2aa0"
      },
      "downloads": -1,
      "filename": "django-function-caching-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c970d2b468bb631399b7232db6d0ee4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3928,
      "upload_time": "2020-05-25T09:35:04",
      "upload_time_iso_8601": "2020-05-25T09:35:04.701736Z",
      "url": "https://files.pythonhosted.org/packages/c0/0a/9d7121750fad8692afce2f18f09352e92605ee20d89d6e8a43eda3e6c17c/django-function-caching-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}