{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "Timewarrior Balance\n###################\n\n.. contents::\n\n.. sectnum::\n\nIntroduction\n============\n\nThis is a timewarrior_ extension for generating a report providing a balance\nbetween hours your worked and hours you have planned to work. This primarily\nis intended for users that have a flexible work hours regime and want to keep\ntrack of the balance between allotted time (hours to worked) and time actually\nspent (worked hours).\n\nBelow is an example of a call to the extension::\n\n  $ timew bal :week\n  Start: Mon Oct  4 00:00:00 2021\n    End: Mon Oct 11 00:00:00 2021\n\n    Tag  Spent  Allotted  Balance\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   work  36:57     40:00    -4:03\n  study  11:00     10:00    +1:00\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n  TOTAL  47:58     50:00    -3:02\n\n\nAnd below is the content of the configuration file for such example::\n\n  # Hours for the \"work\" tag\n  work {\n    # Periodic configuration\n    from 2021-10-01 {\n      mon  11:00\n      tue   9:00\n      wed   5:30\n      thu   6:30\n      fri   8:00\n    }\n\n    # Individual entries for adjustment\n    2021-10-01  8:00 \"Adjustment\"\n    2021-10-12 -8:00 \"National holiday\"\n  }\n\n  # Hours for the \"study\" tag\n  study {\n    from 2021-10-01 {\n      mon 2:00\n      tue 2:00\n      wed 2:00\n      thu 2:00\n      fri 2:00\n    }\n  }\n\n\nInstall\n=======\n\nUsing the source directly\n-------------------------\n\nThere are no extra dependencies besides Python 3 for running this extension.\nAs such, you can just add a script in your timewarrior extensions directory\n(usually ``~/.timewarrior/extensions/``) that just runs\n`<timewarrior_balance/balance.py>`_.\n\nIf you are on a regular Unix machine, we provide a wrapper script\n(`<balance.sh>`_) that can be simply be symlinked::\n\n  $ ln -s $(realpath balance.sh) ~/.timewarrior/extensions/balance\n\nUsing pip\n---------\n\nYou can also install the package with ``pip`` and add a script in the\nextensions directory to call ``python -m timewarrior_balance``::\n\n  $ pip install --user timewarrior-balance\n  $ echo \"python -m timewarrior_balance\" > ~/.timewarrior/extensions/balance\n  $ chmod a+x ~/.timewarrior/extensions/balance\n\n\nUsage\n=====\n\nCalling the extension\n---------------------\n\nConsidering that the extension is installed in timewarrior's extension\ndirectory as a script named ``balance`` and that you have already provided a\n`configuration file`_, it is possible to call the\nextension to generate the report by calling ``timew balance``. It is also\nconvenient to use the abbreviated form ``timew bal`` for cases when there are\nno conflict with other installed extensions::\n\n  $ timew bal\n  Start: Tue Jan  2 00:00:00 0001\n    End: Mon Oct 12 00:00:00 2021\n\n    Tag  Spent  Allotted  Balance\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   work  48:30     56:00    -8:30\n  study  11:00     12:00    -1:00\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n  TOTAL  59:30     68:00    -9:30\n\nBellow is an example of a report for the current week::\n\n  $ timew bal :week\n  Start: Mon Oct 11 00:00:00 2021\n    End: Mon Oct 18 00:00:00 2021\n\n    Tag  Spent  Allotted  Balance\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   work   4:30     32:00   -27:30\n  study   1:00     10:00    -9:00\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n  TOTAL   5:30     42:00   -36:30\n\nIt shows that I still have to spend 27.5 hours and 9 hours on work and\nstudies, respectively (let's hope this is the beginning of the week ðŸ˜›).\n\nWe can also use dates explicitly. Below is the same report using dates::\n\n  $ timew bal 2021-10-11 to 2021-10-17\n  Start: Mon Oct 11 00:00:00 2021\n    End: Mon Oct 18 00:00:00 2021\n\n    Tag  Spent  Allotted  Balance\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   work   4:30     32:00   -27:30\n  study   1:00     10:00    -9:00\n  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n  TOTAL   5:30     42:00   -36:30\n\nThe interval used by the report is parsed by timewarrior, so\nyou can use anything that is recognized by timewarrior.\n\n\nDetails about interpretation of intervals\n-----------------------------------------\n\nThe report will count how much time is allotted and how much has been spent\nfor each configured tag in the interval of the report. The extension uses the\ninterval the user provided to the ``timew`` command (which is parsed directly\nby ``timewarrior`` itself). If none is passed, like in the case above, then it\nwill default to be from ``0001-01-02`` until the date-time for when the report\nwas called.\n\nThe interval is closed at the beginning and open (i.e. exclusive) at the end.\nThe amount of **spent** time is done inside that interval by summing up each\ntrack record filtered by Timewarrior. Note that time that is still being\ntracked is also taken into account.\n\nBy default, ``timewarrior-balance`` uses a rounded interval for calculating the\n**allotted** time: the start date-time is rounded down to midnight of its\nprevious day and the end date-time is rounded up to midnight of its next day.\nIf that is not desired, you can set ``round_interval = no`` in the\nconfiguration file.\n\n\nConfiguration file\n------------------\n.. _`configuration file`:\n\nIn order to use this extension, you need to create a configuration file named\n``balance.conf`` and place it under your timewarrior data directory (usually\n``~/.timewarrior/``). This configuration file is were you declare the hours\nyou need to spend on your activities.\n\nThe configuration file is composed by a series of blocks or variable\nassignments.\n\n- Each block is a configuration for a tag you want to track. It will be\n  explained in detail later.\n\n- A variable assignment is a line in the format ``<varname> = <value>``.\n  Currently, the only variable interpreted by ``timewarrior-balance`` is\n  ``round_interval``, but others might be added in the future.\n\nThe example below shows the content a configuration file with two empty\nblocks::\n\n  # Everything from the \"#\" to the end of line is considered to be a comment\n\n  work {\n    # This is an example of a configuration block to tracking hours for the\n    # \"work\" tag\n  }\n\n  \"tag with multiple words\" {\n    # You can use double quotes for tags with multiple words\n  }\n\nA block has the form ``<tag> { <content> }``, that is, it is defined with the\nname of the tag you want to track followed by the content embraced by a pair\nof opening and closing braces.\n\n- ``<tag>`` can be a single word as the tag name or a string enclosed by\n  double-quotes, which is useful when the tag name contains spaces or is one\n  of the reserved keywords of balance's configuration file. You can also use\n  the token ``__untagged__`` in order to provide configuration for untagged\n  timewarrior records.\n\n- ``<content>`` contains the configuration for the referred tag and may have\n  two types of things:\n\n  1. **Pediodic blocks**, where you can define the time allotted for each\n     day of the week;\n\n  2. Individual **date entries**, which specify allotted times for a specific\n     day.\n\n\nPeriodic Blocks\n'''''''''''''''\n\nBelow are some examples of periodic blocks::\n\n  \"study music\" {\n    from 2021-10-02 {\n      # I'll dedicate 1 and 2Â½ hours to study music on Mondays and\n      # Wednesdays, respectively\n      mon 1:00\n      wed 2:30\n    }\n\n    # I will dedicate a little more time to the activity in December\n    from 2021-12-01 to 2022-01-01 {\n      mon 1:00\n      wed 2:30\n      fri 2:00\n    }\n  }\n\n  work {\n    # Part-time job\n    from 2021-01-01 {\n      mon 5:00\n      tue 4:00\n      wed 6:00\n      thu 5:00\n    }\n\n    # Got a full-time job in April\n    from 2021-04-15 {\n      mon 8:00\n      tue 8:00\n      wed 8:00\n      thu 8:00\n      fri 8:00\n    }\n  }\n\nWhen calculating the amount of allotted time for each tag, based on the\nreport's start and end date, the extension calculates the number of matches\npossible for each rule and adds the expected time.\n\nBelow is a more formal-like description of the format.\n\n- A periodic block has the form ``from <start-date> [to <end-date>] {\n  <rules> }``.\n\n- ``<start-date>`` and ``<end-date>`` define the time interval for which\n  the rules defined in ``<rules>`` have effect. The format of a date is\n  ``YYYY-MM-DD``, defining the year, month and day, respectively.  Note\n  that the interval is inclusive on ``<start-date>`` and exclusive on\n  ``<end-date>``.\n\n  The end date is optional. If omitted, it defaults to *(i)* the start date\n  of the next periodic block or *(ii)* the end date of the report if this\n  is the last periodic block of the tag block. You can use ``end of time``\n  in order to explicitly have the effect of the latter (useful when the\n  periodic block is not the last one).\n\n- ``<rules>`` is a list of pairs in the format ``<weekday> <hours>``,\n  representing the amount of time allotted for days of the week.\n\n  - ``<weekday>`` must be one of: ``mon``, ``tue``, ``wed``, ``thu``,\n    ``fri``, ``sat`` and ``sun``.\n\n  - ``<hours>`` is defined by a number of hours optionally followed by\n    ``:`` and a number of minutes. Examples: ``5``, ``2:15``, ``7:00``.\n\n\nDate entries\n''''''''''''\n\nBesides describing periodic rules for allotted time, it is also possible\nto specify allotted time for specific date via **date entries**. This is\nspecially useful to make exceptions to the rules (e.g. holidays).\n\nA date entry have a very simple format: ``<date> <hours> [<note>]``:\n\n- ``<date>`` is a date in the format ``YYYY-MM-DD``.\n\n- ``<hours>`` is in the same format as for hours in the rules of periodic\n  blocks. The value of ``<hours>`` does not replace the allotted time for the\n  day. Instead, it might be a positive or negative value, adding to or\n  subtracting from the time for the day.\n\n- ``<note>`` is an optional string enclosed by double-quotes that describes\n  the entry.\n\nBelow are some examples of uses of date entries::\n\n  work {\n    from 2021-10-01 {\n      mon  11:00\n      tue   9:00\n      wed   5:30\n      thu   6:30\n      fri   8:00\n    }\n\n    2021-10-12 -8:00 \"National holiday\"\n    2021-12-15 +2:00 \"Extra hours for this specific day\"\n\n    # Note that the plus char is optional\n    2021-12-24  2:00\n  }\n\n\nLicense\n=======\n\nThis extension is released under `Mozilla Public License 2.0`_. A copy of the\nlicense is provided in `<LICENSE.txt>`_.\n\n\n.. Links\n.. _`Mozilla Public License 2.0`: https://www.mozilla.org/en-US/MPL/2.0/\n.. _timewarrior: https://timewarrior.net/\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/guludo/timewarrior-balance",
    "keywords": "timewarrior",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timewarrior-balance",
    "package_url": "https://pypi.org/project/timewarrior-balance/",
    "platform": null,
    "project_url": "https://pypi.org/project/timewarrior-balance/",
    "project_urls": {
      "Homepage": "https://github.com/guludo/timewarrior-balance"
    },
    "release_url": "https://pypi.org/project/timewarrior-balance/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Get a balance of your timewarrior hours",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13828861,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9333263161c1a7b9aca1540138386ee9460837aa61acb99878f1df28dafe3ce5",
          "md5": "23c8a112680610655af86d050e2e262d",
          "sha256": "0a5ef5f21f84ed7718bbcfe5e1cbd29b32cdfebd7d19ea98e543e069a5ace293"
        },
        "downloads": -1,
        "filename": "timewarrior_balance-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23c8a112680610655af86d050e2e262d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14485,
        "upload_time": "2021-10-11T11:02:46",
        "upload_time_iso_8601": "2021-10-11T11:02:46.961004Z",
        "url": "https://files.pythonhosted.org/packages/93/33/263161c1a7b9aca1540138386ee9460837aa61acb99878f1df28dafe3ce5/timewarrior_balance-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55687ea2e331746ba2df283af2ff5c06603056bd6452eefcbcc5b18c7fc80881",
          "md5": "bdbe6d431eb4bd09cc3d25fbc651a241",
          "sha256": "8384b6da74a2009fa96b2558e3507edaa417f0adccee265d027cc6f999f9e2e2"
        },
        "downloads": -1,
        "filename": "timewarrior-balance-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdbe6d431eb4bd09cc3d25fbc651a241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17080,
        "upload_time": "2021-10-11T11:02:48",
        "upload_time_iso_8601": "2021-10-11T11:02:48.615372Z",
        "url": "https://files.pythonhosted.org/packages/55/68/7ea2e331746ba2df283af2ff5c06603056bd6452eefcbcc5b18c7fc80881/timewarrior-balance-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cfe0b3c843bac2aafcb550d7ceafe8447a1eae054411710c24ff1ccfd86bc76",
          "md5": "33db5d5f234323bf53cbf9263e97fefd",
          "sha256": "5209c455ad92309f2718836827932dc97acc7927a2b1440e72ae668b048ffd4c"
        },
        "downloads": -1,
        "filename": "timewarrior_balance-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33db5d5f234323bf53cbf9263e97fefd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14499,
        "upload_time": "2021-10-22T12:21:43",
        "upload_time_iso_8601": "2021-10-22T12:21:43.784883Z",
        "url": "https://files.pythonhosted.org/packages/7c/fe/0b3c843bac2aafcb550d7ceafe8447a1eae054411710c24ff1ccfd86bc76/timewarrior_balance-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1997e450a02690727036389fb8020de852a45973fa15e6dd85b2d1e3394bcc7",
          "md5": "186b9ad68dc83bb315bff03275e22225",
          "sha256": "9b7109590d53660fa264061f0d745c0821b0b18a2a1dee83653ad8f475323175"
        },
        "downloads": -1,
        "filename": "timewarrior-balance-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "186b9ad68dc83bb315bff03275e22225",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17188,
        "upload_time": "2021-10-22T12:21:46",
        "upload_time_iso_8601": "2021-10-22T12:21:46.139405Z",
        "url": "https://files.pythonhosted.org/packages/b1/99/7e450a02690727036389fb8020de852a45973fa15e6dd85b2d1e3394bcc7/timewarrior-balance-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84370d1092826d370404b477e812e50e3fd4cce3c087b8c51914bff33544bc74",
          "md5": "babbf6ef85596e6acb1ef3f121ab3153",
          "sha256": "221a1c1e1deca5435d20cab6dd0dfbd58f3b0910920468dd995d43ce8c91cbe2"
        },
        "downloads": -1,
        "filename": "timewarrior_balance-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "babbf6ef85596e6acb1ef3f121ab3153",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15267,
        "upload_time": "2022-05-14T07:42:53",
        "upload_time_iso_8601": "2022-05-14T07:42:53.450588Z",
        "url": "https://files.pythonhosted.org/packages/84/37/0d1092826d370404b477e812e50e3fd4cce3c087b8c51914bff33544bc74/timewarrior_balance-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90ba5eb630b976720fd5ddace01966e87270209ca7a956b48880a33925609053",
          "md5": "38610ddc41bd05f4d7b7cc373257736d",
          "sha256": "a8b968d2ef230a2ec6dd66d9046004b1f0981c58f9a40a2c3ad7fe5a09f89c7e"
        },
        "downloads": -1,
        "filename": "timewarrior-balance-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38610ddc41bd05f4d7b7cc373257736d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18241,
        "upload_time": "2022-05-14T07:42:55",
        "upload_time_iso_8601": "2022-05-14T07:42:55.090833Z",
        "url": "https://files.pythonhosted.org/packages/90/ba/5eb630b976720fd5ddace01966e87270209ca7a956b48880a33925609053/timewarrior-balance-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aae0af8a551c7b2dd3270a751af4ef85bd5d42aeb49a39a784e6afa918d40bca",
          "md5": "d5063285e59d4d361a77c1da6007a138",
          "sha256": "b05f061806cc65c027028be72b6ab17af76d780a8d6d82640576d0c54f26c915"
        },
        "downloads": -1,
        "filename": "timewarrior_balance-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5063285e59d4d361a77c1da6007a138",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15235,
        "upload_time": "2022-05-16T11:32:45",
        "upload_time_iso_8601": "2022-05-16T11:32:45.621397Z",
        "url": "https://files.pythonhosted.org/packages/aa/e0/af8a551c7b2dd3270a751af4ef85bd5d42aeb49a39a784e6afa918d40bca/timewarrior_balance-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ff6116e66f06e32c8921e73c703c9ed05ad76157fd41ada998d3e08c0a03609",
          "md5": "eced8d999fadd3f2471fea3dd44dbf32",
          "sha256": "a2ba28ee40e820293a7fe313f653f34ffe8bbdc4ff5c4f1d0fcb9eafe3b7c942"
        },
        "downloads": -1,
        "filename": "timewarrior-balance-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eced8d999fadd3f2471fea3dd44dbf32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18254,
        "upload_time": "2022-05-16T11:32:47",
        "upload_time_iso_8601": "2022-05-16T11:32:47.171243Z",
        "url": "https://files.pythonhosted.org/packages/4f/f6/116e66f06e32c8921e73c703c9ed05ad76157fd41ada998d3e08c0a03609/timewarrior-balance-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aae0af8a551c7b2dd3270a751af4ef85bd5d42aeb49a39a784e6afa918d40bca",
        "md5": "d5063285e59d4d361a77c1da6007a138",
        "sha256": "b05f061806cc65c027028be72b6ab17af76d780a8d6d82640576d0c54f26c915"
      },
      "downloads": -1,
      "filename": "timewarrior_balance-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5063285e59d4d361a77c1da6007a138",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15235,
      "upload_time": "2022-05-16T11:32:45",
      "upload_time_iso_8601": "2022-05-16T11:32:45.621397Z",
      "url": "https://files.pythonhosted.org/packages/aa/e0/af8a551c7b2dd3270a751af4ef85bd5d42aeb49a39a784e6afa918d40bca/timewarrior_balance-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ff6116e66f06e32c8921e73c703c9ed05ad76157fd41ada998d3e08c0a03609",
        "md5": "eced8d999fadd3f2471fea3dd44dbf32",
        "sha256": "a2ba28ee40e820293a7fe313f653f34ffe8bbdc4ff5c4f1d0fcb9eafe3b7c942"
      },
      "downloads": -1,
      "filename": "timewarrior-balance-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "eced8d999fadd3f2471fea3dd44dbf32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18254,
      "upload_time": "2022-05-16T11:32:47",
      "upload_time_iso_8601": "2022-05-16T11:32:47.171243Z",
      "url": "https://files.pythonhosted.org/packages/4f/f6/116e66f06e32c8921e73c703c9ed05ad76157fd41ada998d3e08c0a03609/timewarrior-balance-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}