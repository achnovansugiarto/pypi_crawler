{
  "info": {
    "author": "Matheus Vilano",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Simplevent\r\n\r\n## Summary\r\n\r\nSimplevent is a simple Event framework for Python, loosely based on the Observer design pattern. The package is minimal:\r\nit defines the `Event` base class and the `SignedEvent` and `NamedEvent` subclasses. An instance of either encapsulates\r\na `list` but **will also itself behave somewhat like a `list`**; this is essentially an _indirection_.\r\n\r\n## Observer Pattern\r\n\r\nSimplevent's tiny framework can be seen as a variation on the [Observer Pattern](https://en.wikipedia.org/wiki/Observer_pattern):\r\n\r\n- When you instantiate an `Event`, that instance's context (scope) is the `subject`.\r\n- When you subscribe an object to an `Event`, that object is an `observer`.\r\n- When you `invoke` an `Event` instance, you're notifying all `observers` that the `subject` has executed an important action.\r\n\r\n## Motivation\r\n\r\nSimplevent was a creation inspired by C# and its event framework that's already built into the language. The lack of a \r\nsimilar system in Python can hinder event-driven designs. Designing a framework - even one as simple as Simplevent - \r\ncan be time-consuming. This package provides an easy, small-scale solution for event-driven programming.\r\n\r\n## Event Types\r\n\r\nThere are two types of `Event` in Simplevent: `StrEvent` and `RefEvent`. Both share a few similarities:\r\n\r\n- Subscribers are encapsulated in a `list`, which is encapsulated by the `Event`.\r\n- Subscribing the same object twice is not allowed by default (but this can be changed).\r\n- Some sugar syntax is available: `+=` (subscribe), `-=` (unsubscribe), and `()` (invoke).\r\n- Some magic method compatibility is available: `len` (currently the only one).\r\n\r\nEach type can be customized/configured via their respective constructor. Refer to `docstrings` for more information.\r\n\r\n### Str Event\r\n\r\nAn `StrEvent` is an `Event` that stores a \"callback name\" as a `string`. Once invoked, it will go through all of its \r\n`subscribers`, looking for a method name that matches the stored `string`. \r\n\r\nHere's an example where a video-game Character \r\nis supposed to stop moving after a Timer has reached zero, with simplified code:\r\n\r\n#### Example\r\n```python\r\nfrom simplevent import StrEvent\r\n\r\nclass Timer:\r\n    \r\n    def __init__(self, init_time: float = 60):\r\n        \"\"\"\r\n        Initialized the timer.\r\n        :param init_time: The initial time, in seconds.\r\n        \"\"\"\r\n        self._time_left = init_time\r\n        self.time_is_up = StrEvent(\"on_time_is_up\")  # The event is defined here.\r\n    \r\n    def start_timer(self):\r\n        \"\"\"Starts the timer.\"\"\"\r\n        coroutine.start(self.decrease_time, loop_time=1, delay_time=0)\r\n        \r\n    def stop_timer(self):\r\n        \"\"\"Stops the timer.\"\"\"\r\n        coroutine.stop(self.decrease_time)\r\n    \r\n    def decrease_time(self):\r\n        \"\"\"Decreases the time by 1.\"\"\"\r\n        self._time_left -= 1\r\n        if self._time_left <= 0:\r\n            self.stop_timer()\r\n            self.time_is_up()  # Sugar syntax; same as `self._time_is_up.invoke()`\r\n\r\nclass PlayerCharacter(ControllableGameObject):\r\n    \r\n    def __init__(self):\r\n        self._is_input_enabled = True\r\n        GameMode.get_global_timer().time_is_up += self  # Sugar syntax; same as `self._time_is_up.add(self)`\r\n        # Other code ...\r\n        # ...\r\n        \r\n    def enable_input(self):\r\n        \"\"\"Enabled user input (e.g. movement, etc).\"\"\"\r\n        self._is_input_enabled = True\r\n\r\n    def disable_input(self):\r\n        \"\"\"Disables user input (e.g. movement, etc).\"\"\"\r\n        self._is_input_enabled = False\r\n        \r\n    def on_time_is_up(self):\r\n        \"\"\"Called automatically when the global timer has reached zero.\"\"\"\r\n        self.disable_input()\r\n\r\n    # Other code ...\r\n    # ...\r\n```\r\n\r\n### Ref Event\r\n\r\n`Subscribers` of a `RefEvent` **must be `Callable` objects**. In other words, the `Subscriber` has to be a `function`, a `method`, \r\nor a \"functor-like\" `object` (an `object` with the`__call__`magic method overloaded). That's because a `RefEvent` - unlike \r\nan `StrEvent`- will call its `Subscribers` directly **instead** of looking for a `method` of a certain name.\r\n\r\nHere's the same example as in `StrEvent` - a video-game Character that is supposed to stop moving after a Timer has reached \r\nzero - but using `RefEvent` instead, again with simplified code:\r\n\r\n#### Example\r\n```python\r\nfrom simplevent import RefEvent\r\n\r\nclass Timer:\r\n    \r\n    def __init__(self, init_time: float = 60):\r\n        \"\"\"\r\n        Initialized the timer.\r\n        :param init_time: The initial time, in seconds.\r\n        \"\"\"\r\n        self._time_left = init_time\r\n        self.time_is_up = RefEvent()  # The event is defined here.\r\n    \r\n    def start_timer(self):\r\n        \"\"\"Starts the timer.\"\"\"\r\n        coroutine.start(self.decrease_time, loop_time=1, delay_time=0)\r\n        \r\n    def stop_timer(self):\r\n        \"\"\"Stops the timer.\"\"\"\r\n        coroutine.stop(self.decrease_time)\r\n    \r\n    def decrease_time(self):\r\n        \"\"\"Decreases the time by 1.\"\"\"\r\n        self._time_left -= 1\r\n        if self._time_left <= 0:\r\n            self.stop_timer()\r\n            self.time_is_up()  # Sugar syntax; same as `self._time_is_up.invoke()`\r\n\r\nclass PlayerCharacter(ControllableGameObject):\r\n    \r\n    def __init__(self):\r\n        self._is_input_enabled = True\r\n        GameMode.get_global_timer().time_is_up += self.disable_input  # Sugar syntax; same as `self._time_is_up.add(self.disable_input)`\r\n        # Other code ...\r\n        # ...\r\n        \r\n    def enable_input(self):\r\n        \"\"\"Enabled user input (e.g. movement, etc).\"\"\"\r\n        self._is_input_enabled = True\r\n\r\n    def disable_input(self):\r\n        \"\"\"Disables user input (e.g. movement, etc).\"\"\"\r\n        self._is_input_enabled = False\r\n\r\n    # Other code ...\r\n    # ...\r\n```\r\n\r\n## Important Notes\r\n\r\n### No Reference Management\r\n\r\nSimplevent's `Event` instances do not automatically manage references to their `Subscribers`. That means it is up to the \r\ndeveloper to manage references. Here are a couple of examples:\r\n\r\n#### Null Subscribers\r\n- `o` (an `object`) becomes a `Subscriber` of `e` (an `Event`).\r\n- `o` is destroyed via `del` before being unsubscribed from `e`.\r\n\r\nThe above is a problem because `e` will still attempt to call `o` when invoked, which will result in an `Error` (likely \r\na `TypeError`,`AttributeError`, or similar).\r\n\r\n#### Persistent Subscribers\r\n- `o` (an `object`) becomes a `Subscriber` of `e` (an `Event`).\r\n- `o` is unreferenced everywhere in code, except in `e` (as a `subscriber`).\r\n\r\n`o` exists inside `e` as a reference. Python's garbage collection will **not destroy `o`** until all references to it  \r\ncease to exist - **including the one inside `e`, which represents `o` as a `Subscriber`**. The developer must be very \r\ncareful and ensure that `o` is unsubscribed from `e` whenever needed.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matheusvilano/simplevent.git",
    "keywords": "event observer listener subscription subscriber subject design pattern callback",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simplevent",
    "package_url": "https://pypi.org/project/simplevent/",
    "platform": null,
    "project_url": "https://pypi.org/project/simplevent/",
    "project_urls": {
      "Author Website": "https://www.matheusvilano.com/",
      "Git Repository": "https://github.com/matheusvilano/simplevent",
      "Homepage": "https://github.com/matheusvilano/simplevent.git"
    },
    "release_url": "https://pypi.org/project/simplevent/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple framework for event-driven programming, based on the Observer design pattern.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17264368,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "716d5742a191ed21d12a6ae7fb890452a9ba476e9dc70d775b0c9bc2486b428c",
          "md5": "932480f7d5c063e589b3f03ea2adeaa3",
          "sha256": "d1268477a66afe551b1ffa414250ec3293d18c0a3283c7402d55c41c5e9ee66f"
        },
        "downloads": -1,
        "filename": "simplevent-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "932480f7d5c063e589b3f03ea2adeaa3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7128,
        "upload_time": "2023-03-12T23:50:06",
        "upload_time_iso_8601": "2023-03-12T23:50:06.293087Z",
        "url": "https://files.pythonhosted.org/packages/71/6d/5742a191ed21d12a6ae7fb890452a9ba476e9dc70d775b0c9bc2486b428c/simplevent-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "716d5742a191ed21d12a6ae7fb890452a9ba476e9dc70d775b0c9bc2486b428c",
        "md5": "932480f7d5c063e589b3f03ea2adeaa3",
        "sha256": "d1268477a66afe551b1ffa414250ec3293d18c0a3283c7402d55c41c5e9ee66f"
      },
      "downloads": -1,
      "filename": "simplevent-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "932480f7d5c063e589b3f03ea2adeaa3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7128,
      "upload_time": "2023-03-12T23:50:06",
      "upload_time_iso_8601": "2023-03-12T23:50:06.293087Z",
      "url": "https://files.pythonhosted.org/packages/71/6d/5742a191ed21d12a6ae7fb890452a9ba476e9dc70d775b0c9bc2486b428c/simplevent-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}