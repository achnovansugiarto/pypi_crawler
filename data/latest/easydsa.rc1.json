{
  "info": {
    "author": "Deep Awasthi",
    "author_email": "da.madskull@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python EasyDSA\nA Data structure collection package written in Python which helps developers in implementing fast and efficient algorithms.\n\n\n## Package\nThe Pypi [EasyDSA](https://github.com/mad-skull/EasyDSA.git) package can be found [here](https://github.com/mad-skull/EasyDSA.git)\n\n## Getting Started (More Will Be Added Soon)\nThe datastructure_collection has three data structure classes :\n\n* 1. [BinarySearchTree](https://github.com/mad-skull/EasyDSA.git)\n\n* 2. [HashMap](https://github.com/mad-skull/EasyDSA.git)\n\n* 3. [LinkedList](https://github.com/mad-skull/EasyDSA.git)\n\nI Look forward to add more datastructures and algorithms in the future.\n\n## Installation\n\nRun the following to install package :\n\n```bash\npip install EasyDSA\n```\n## Usage\n\n[Example](https://github.com/mad-skull/EasyDSA/blob/master/tests/datastructure_example.py)\n\nTo use this package :\n\n```python\nfrom EasyDSA import BinarySearchTree\n\nfrom EasyDSA import HashMap\n\nfrom EasyDSA import LinkedList\n```\n\n## Binary Search Tree\nThe Binary Search Tree operations and the time complexities are shown in the table below:\n\n| Operation                 | Best Case     |  Worst Case   |  \n| -------------             |:-------------:|:-------------:|\n| tree = BinarySearchTree() | O(1)          | O(1)          |\n|                           |               |               |\n| tree.add(key, value)      | O(logN)       | O(N)          | \n| tree.remove(key)          | O(logN)       | O(N)          |\n| tree.valueOf(key)         | O(logN)       | O(N)          |\n| tree.isEmpty()            | O(1)          | O(1)          |\n| tree.minValue()           | O(logN)       | O(N)          |\n| tree.maxValue()           | O(logN)       | O(N)          |\n| n = len(tree)             | O(1)          | O(1)          |\n| x in tree                 | O(logN)       | O(N)          |\n| traversal                 | O(N)          | O(N)          |\n\nAs seen from the table above the Binary Search Tree has an advantage over a Linear List in terms of its searching mechanism the tree will be to somewhat sorted where the left elements of a node are less that the elements of a right node, thus giving it a Best case runtime of O(logN) as compared to a List search of O(N).\nThe Worst Case of a Binary Search Tree O(N) occurs when the elements of the tree are ordered linearly ie (elements are inserted with increasing order)\n* **NB** The add,remove,minValue,maxValue and __contains__ ie \"in\", valueOf operators uses the search mechanism to locate the target.\n\nThe Worst Case of a BinarySearchTree can however be improved by implementing a **Balanced Search Tree** with datastructures like **(AVL trees, splay trees, and red-black trees)**  which i however shall add in the future.\n\n### Example BinarySearchTree\n```python\n\n#import the BinarySearchTree Class\nfrom EasyDSA import BinarySearchTree\n\n#Instantiate BinarySearchTree object\ntree = BinarySearchTree()\n\ntree.add(1,\"Orange\")\ntree.add(4,\"Banana\")\ntree.add(7,\"Apple\")\ntree.add(2,\"Tomato\")\n\n\nfor i in tree:\n    print(i) #Prints the sorted List of tuples contaiing the key, value pairs\n\ntree.remove(4) #this removes the Banana node from the tree\nprint(len(tree)) #this returns a length of 3 since the Banana node was removed\n\n```\n## Hash Map\nThe [HashMap](https://pypi.org/project/EasyDSA/) is the most commonly used data structure in solving  big data and maping problems. In most datastructure collection ,searching is the most important operation, and as such we need to do it fast and efficiently. Unilike most datastructures like Lists, Trees which are based on on key comparison when searching for a target, the [Hashmap]() uses a concept of **hashing** the keys upon searching which run in constant time O(1) to locate an index of a specific key.\nI have used the concept of **double hashing** in implemnenting the hashing algorithm and **closed hashing/open addressing** for **Probing** . The hashing algorithm is as follows:\n```python\n'''\n    def _double_hashing(self,k):\n        double hashing reduces clusters primary and secondary thus reducing collisions\n        Find the next slot by probing\n        slot = (position + i ) % M  whrere i = 1,2,3 .. M-1 ; position = index position index to which the key was originally mapped by the hash\n        function DOUBLE HASHING IS AS FOLLOWS:\n        slot = (position + i âˆ— hp(key)) % M\n        hp(key) = 1 + key % P         P = constant  < M\n        pass\n    '''\n\n```\nDouble hashing reduces primary and secondary clusture thus reducing collisions.\n\nThe table below shows the operations and time complexities of a [HashMap](https://pypi.org/project/EasyDSA/)\n\n| Operation                | Best Case     |  Worst Case   |  \n| -------------            |:-------------:|:-------------:|\n| map = HashMap()          | O(1)          | O(1)          |\n|                          |               |               |\n| map.add(key, value)      | O(1)          | O(N)          | \n| map.remove(key)          | O(1)          | O(N)          |\n| map[key] = value         | O(1)          | O(N)          |\n| map.get(key)             | O(1)          | O(N)          |\n| map.isEmpty()            | O(1)          | O(1)          |\n| n = len(map)             | O(1)          | O(1)          |\n| x in map                 | O(1)          | O(N)          |\n| traversal                | O(N)          | O(N)          |\n\nAs noted from the table above a [HashMap](https://pypi.org/project/EasyDSA/) one one of the strongest data structure in implementing a map, as the fundamental core oprations ie **__getitem__**,\n**__setitem__**,**__deltitem__**, runs at constant time at Best Case. The Hash Map worst case run-time can always be enhanced by implementing **SortedTableMap** which improves the Worst Case O(N) to O(logN), which i hope to add the datastructure in the future.\n\n\n### Example HashMap\n```python\nhash = HashMap()\n\nhash.add('man',34)\nhash.add('person',23)\nhash.add('women',674)\nhash.add('camera',5)\nhash.add('tv',89)\n\nfor i in hash:\n    print('{}: {}'.format(i.key,i.value)) #prints the key value paris\n\nprint(len(hash)) #returns length 5\n\nprint(hash.remove('tv'))\nprint(hash.remove('women'))\nprint(hash.remove('man'))\nhash['women'] = 566\n\nfor i in hash:\n    print('{}: {}'.format(i.key,i.value))\nprint(len(hash)) #returns lenth 3 \nprint(hash.get('women')) # returns 566\n\n```\n\n## Linked List\nOne might ask why implement a  [LinkedList](https://pypi.org/project/EasyDSA/) datastructure if we already have a list in Python. Insertions and Deletions operation in a List requires items to be shifted to make a room or close the gap. This howver can be time consuming especially for large data. The add operator in a Linked List requires O(1) time where as the Pyhton List requires O(N)\n\nThe table below shows the operations and time complexities of a [LinkedList](https://pypi.org/project/EasyDSA/)\n\n| Operation                | Pyhton List   |  Linked List  |  \n| -------------            |:-------------:|:-------------:|\n| linked = LinkedList()    | O(1)          | O(1)          |\n|                          |               |               |\n| linked.add(value)        | NA            | O(1)          |\n| linked.append(value)     | O(N)          | O(N)          |  \n| linked.remove(value)     | O(1)          | O(N)          |\n| linked.isEmpty()         | O(1)          | O(1)          |\n| n = len(map)             | O(1)          | O(1)          |\n| x in linked              | O(N)          | O(N)          |\n| traversal                | O(N)          | O(N)          |\n\n### Example Linked List\n\n```python\nlinked  = LinkedList()\n\nfor _ in range(10):\n    linked.add(_)\nlinked.add(5)\nlinked.remove(5)\nlinked.append(55)\nlinked.append(56)\nlinked.append(7)\nlinked.add(59)\nlinked.append(79)\nprint('List Length: ',len(linked))\nlinked.remove(0)\nprint(linked)\nprint('List Length: ',len(linked))\n\nfor i in linked:\n    print(i) #Prints the values in the Linked List\n\nprint(77 in linked) #Returns False 77 is not in Linked\n\n```\n\n### Pull Requests\nI Welcome and i encourage all Pull Requests. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## Created and Maintained by\n* Author: [Deep Awasthi](https://github.com/mad-skull) :\n* Email:  [da.madskull@gmail.com]\n\n### License\n```\nMIT License\n\nCopyright (c) 2021 Deep Awasthi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mad-skull/EasyDSA.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EasyDSA",
    "package_url": "https://pypi.org/project/EasyDSA/",
    "platform": "",
    "project_url": "https://pypi.org/project/EasyDSA/",
    "project_urls": {
      "Homepage": "https://github.com/mad-skull/EasyDSA.git"
    },
    "release_url": "https://pypi.org/project/EasyDSA/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A Data Structures and Algorithms collection written in Pyhton which helps developers in implementing fast and efficient algorithms",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11005407,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a29602d9972b36001559fb6d35cc5fa53109701c1fc93aafba76c563aeb5c017",
          "md5": "514de44e71c6e9ea7aa179742619d7fc",
          "sha256": "aabe8a588d4d395268d32ee2983872dc189c751b00042c33294d57f39eef6128"
        },
        "downloads": -1,
        "filename": "EasyDSA-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "514de44e71c6e9ea7aa179742619d7fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 12721,
        "upload_time": "2021-07-26T13:10:10",
        "upload_time_iso_8601": "2021-07-26T13:10:10.559779Z",
        "url": "https://files.pythonhosted.org/packages/a2/96/02d9972b36001559fb6d35cc5fa53109701c1fc93aafba76c563aeb5c017/EasyDSA-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95f283c18b71e97faf2acedec2506e36ad02d44a47fad4e57b70f1613e37fc0",
          "md5": "57d42bbd2e90f216da32e680f5677e8f",
          "sha256": "225d025c25a1de3a90e2a6ac82d455982ce61973f9972f682a3731d13d59f5d5"
        },
        "downloads": -1,
        "filename": "EasyDSA-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "57d42bbd2e90f216da32e680f5677e8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10486,
        "upload_time": "2021-07-26T13:10:11",
        "upload_time_iso_8601": "2021-07-26T13:10:11.968867Z",
        "url": "https://files.pythonhosted.org/packages/c9/5f/283c18b71e97faf2acedec2506e36ad02d44a47fad4e57b70f1613e37fc0/EasyDSA-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a29602d9972b36001559fb6d35cc5fa53109701c1fc93aafba76c563aeb5c017",
        "md5": "514de44e71c6e9ea7aa179742619d7fc",
        "sha256": "aabe8a588d4d395268d32ee2983872dc189c751b00042c33294d57f39eef6128"
      },
      "downloads": -1,
      "filename": "EasyDSA-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "514de44e71c6e9ea7aa179742619d7fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 12721,
      "upload_time": "2021-07-26T13:10:10",
      "upload_time_iso_8601": "2021-07-26T13:10:10.559779Z",
      "url": "https://files.pythonhosted.org/packages/a2/96/02d9972b36001559fb6d35cc5fa53109701c1fc93aafba76c563aeb5c017/EasyDSA-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c95f283c18b71e97faf2acedec2506e36ad02d44a47fad4e57b70f1613e37fc0",
        "md5": "57d42bbd2e90f216da32e680f5677e8f",
        "sha256": "225d025c25a1de3a90e2a6ac82d455982ce61973f9972f682a3731d13d59f5d5"
      },
      "downloads": -1,
      "filename": "EasyDSA-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "57d42bbd2e90f216da32e680f5677e8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10486,
      "upload_time": "2021-07-26T13:10:11",
      "upload_time_iso_8601": "2021-07-26T13:10:11.968867Z",
      "url": "https://files.pythonhosted.org/packages/c9/5f/283c18b71e97faf2acedec2506e36ad02d44a47fad4e57b70f1613e37fc0/EasyDSA-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}