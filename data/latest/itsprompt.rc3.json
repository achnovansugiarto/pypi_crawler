{
  "info": {
    "author": "ItsNameless",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/ItsPrompt.svg)](https://badge.fury.io/py/ItsPrompt)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/ItsPrompt)](https://pypi.org/project/ItsPrompt/)\n[![GitHub issues](https://img.shields.io/github/issues/TheItsProjects/ItsPrompt)](https://github.com/TheItsProjects/ItsPrompt/issues)\n[![GitHub Repo stars](https://img.shields.io/github/stars/TheItsProjects/ItsPrompt)](https://github.com/TheItsProjects/ItsPrompt/stargazers)\n[![GitHub](https://img.shields.io/github/license/TheitsProjects/ItsPrompt)](https://github.com/TheItsProjects/ItsPrompt/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1082381448624996514)](https://discord.gg/rP9Qke2jDs)\n\n![Demonstration](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/ItsPrompt.gif)\n\n# ItsPrompt\n\nDo you ever feel the need to ask a user of your code for an input?\n\nUsing `input()` is easy, but is it great? \n\nDo you want to give the user a selection list, a yes-or-no question, or maybe a multiline input field?\n\nAnd do you think all of this should be done easily, without caring to much how it all works?\n\nThen you are right here! **ItsPrompt** gives you the ability to ask the user for input, the *fancy* way.\n\n**ItsPrompt** tries to be an easy-to-use module for managing prompts for the user. You task is to create a great program, not how to ask the user for input. That is why **ItsPrompt** is there to take care of this problem, so you can focus on the important things!\n\n---\n\n### A small, thankful note\n\nThis project is not the first to accomplish the above mentioned tasks. There is another package, `PyInquirer`, which inspired me to build **ItsPrompt**.\n\nOn my way to create a small program I came to a point were I needed a simple GUI, and I tried `PyInquirer`. Unfortunately, at the current time it is not actively maintained and a bit outdated. I thought of updating it, but then I thought \"*Isn't it easier to just create my own version?*\" - And so I did!\n\n**ItsPrompt** is not a copy or a fork of `PyInquirer`. I built this module from the ground up, without every looking deep into the source code of `PyInquirer`.\n\nOn my way to build this package, I learned a lot about `prompt-toolkit`, and all of this just because of `PyInquirer`! Thanks!\n\n---\n\n## Features\n\n- many prompt types (more details below):\n    - select\n    - raw_select\n    - expand\n    - checkbox\n    - confirm\n    - input\n- big feature set\n- simple, pythonic syntax\n- a helpful toolbar with error messages\n- customizable style with `prompt-toolkit`\n\n---\n\n## Installation\n\nThis package is hosted on pypi, so the installation is as simple as it can get:\n\n```\npython3 -m pip install ItsPrompt\n```\n\n---\n\n## Usage\n\nImport the `Prompt` class:\n\n```py\nfrom ItsPrompt.prompt import Prompt\n```\n\nNow you can ask the user any type of prompt by calling the specific function from the `Prompt` class, e.g.:\n\n```py\nresult = Prompt.input('What is your name?')\nprint(result)\n```\n\nYou see how easy it is?\n\n---\n\n## Prompt types\n\nAs mentioned above, **ItsPrompt** has multiple prompt types. All of them can be accessed via the `Prompt` class.\n\n### `select`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/select.png)\n\n```py\nPrompt.select(\n    question='question',\n    options=('option1', ('option2', 'opt2')),\n    default='option1',\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n\n### `raw_select`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/raw_select.png)\n\n```py\nPrompt.raw_select(\n    question='question',\n    options=('option1', ('option2', 'opt2')),\n    default='opt2',\n    allow_keyboard=True,\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n### `expand`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/expand.png)\n\n```py\nPrompt.expand(\n    question='question',\n    options=('option1', ('2', 'option2', 'opt2')),\n    default='opt2',\n    allow_keyboard=True,\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n### `checkbox`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/checkbox.png)\n\n```py\nPrompt.checkbox(\n    question='question',\n    options=('option1', ('option2', 'opt2')),\n    pointer_at=1,\n    default_checked='option1',\n    min_selections=1,\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n### `confirm`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/confirm.png)\n\n```py\nPrompt.confirm(\n    question='question',\n    default=False,\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n### `input`\n\n![](https://raw.githubusercontent.com/TheItsProjects/ItsPrompt/main/media/input.png)\n\n```py\nPrompt.input(\n    question='question',\n    default='something',\n    multiline=False,\n    show_symbol='*', # not compatible with complete, completer\n    validate=validation_function,\n    complete=['completion1', 'completion2'], # either use complete\n    completer=my_completer,                  # or completer\n    completion_show_multicolumn=True,\n    style=my_style,\n)\n```\n\n*additional information on the function arguments can be found in the docstring*\n\n---\n\n## Additional Features and Tips\n\n### Options\n\nThe `options` is always a `tuple` containing `str` and `tuple` objects. \n\nIf an option is given as a `str`, this will be used as the options display name and the id, which will be returned when selecting this option.\n\n*In case of `expand`, the first character of the `str` will be used as its key.*\n\nIf an option is given as a `tuple`, the first value will be the options name, the second value the options id to return.\n\n*In case of `expand`, the first value will be the key, the second value the name and the third value the id.*\n\n---\n\n### Styling\n\n**ItsPrompt** uses `prompt-toolkit` for its prompts. This module not only provides an easy way to interact with the command line, but also a full set of styling features.\n\nYou can learn more about the available styling features in the documentation of `prompt-toolkit`: [Styling](https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html#formatted-text).\n\nTo create your own style, there are two ways:\n\n***Changing the default style***\n\nTo change the default style, you need to import the `default_style` and change its values:\n\n```py\nfrom ItsPrompt.data.style import default_style\n\ndefault_style.error = 'fg:ansired bg:ansiwhite'\n```\n\nThis will automatically change the style of all prompts, which do not have an own style defined.\n\n***Creating your own style***\n\nTo define your own style for a specific prompt, import `PromptStyle` and create an object. Then assign it to the `style` argument of a prompt.\n\n```py\nfrom ItsPrompt.data.style import PromptStyle\n\nmy_style = PromptStyle(\n    question_mark='fg:ansiblue',\n    error='fg:ansired bg:ansiwhite',\n)\n```\n\nAll styles which are not given, **will not** be the same as the default style. If you want this to be the case, then copy the `default_style` and change your values, instead of directly creating your own style:\n\n```py\nfrom ItsPrompt.data.style import create_from_default\n\nmy_style = create_from_default()\n\nmy_style.error = 'fg:ansired bg:ansiwhite'\n```\n\n> Warning! Not copying the default style and changing it instead will result in all prompts using your changes, as a variable is by default not a copy, but a reference to the same object!\n\n---\n\n### Prompt Validation\n\nThe `input` allows you to validate the input before submitting it. For every character the user types, the validation will be run and a friendly error will be shown in the toolbar.\n\nTo use the validation feature, create a function which takes a `str` as an argument and returns either a `str` or `None`.\n\n```py\ndef input_not_empty(input: str) -> str | None:\n    if len(input) == 0:\n        return 'Address can not be empty!'\n\nPrompt.input(\n    ...\n    validate=input_not_empty,\n    ...\n)\n```\n\nThe `str` argument will be the current user input, which can then be checked, but not changed!\n\nIf you want to show that the validation succeeded, return `None` (or nothing). This will not trigger any errors.\n\nIf you want to show an error, return a `str` with the errors text. Your text will be shown in the toolbar. As long as the validation returns a `str`, the user may not submit the input.\n\n---\n\n### Prompt Completion\n\nThe `input` prompt type supports auto completion as well. \n\n> If you use a completer, you are unable to use `show_symbol`!\n\nTo give auto completion options, there are three ways:\n\n***Creating a simple list of possible completions***\n\n`Input` takes a `list[str]` to use as simple word completions. Each `str` in the list is a possible value to complete.\n\n```py\nprompt.input(\n    ...\n    completions=['Mainstreet 4', 'Fifth way'],\n    ...\n)\n```\n\n***Creating a nested dictionary of possible completions***\n\nYou can use a dictionary for nested completions. Each \"layer\" will be a completion, after the first was accepted. For example:\n\n```py\ncompletions = {\n    '1' : {\n        '1.1' : None,\n        '1.2' : {\n            '1.2.1', '1.2.2'\n        }\n    },\n    '2' : {\n        '2.1' : { '2.1.1' }\n    }\n}\n\nprompt.input(\n    ...\n    completions=completions,\n    ...\n)\n```\n\nThe key of each entry is the completion that will be shown. The key is either None if there are no further completions or a new dict, where the key is the completion and the value is the next \"layer\", and so on...\n\n> For more information, the type signature of `CompletionDict` is:  \n> `dict[str, \"CompletionDict | None\"]`\n\n***Using a given Completer by `prompt-toolkit` or creating your own***\n\nIn the background your completions will be mapped to a `Completer`, provided by `prompt-toolkit`.\n\nIf you need more customization, you can use a `Completer` given by `prompt-toolkit` or create your own completer. For more information on this process, read here: [Completions in prompt-toolkit](https://python-prompt-toolkit.readthedocs.io/en/stable/pages/asking_for_input.html#autocompletion).\n\nThere are a number of completers available, for example:\n\n- `PathCompleter`\n    - automatically complete file system paths\n- `ExecutableCompleter`\n    - automatically complete executables in file system\n- `WordCompleter`\n    - As simple as it can get. Just completes the letters of the word, that are actually present (the `FuzzyCompleter` which `completions` uses in background completes based on a probability, and may show matches which are not exact).\n- ...\n\n\nTo add your own completer to an input field, you can use the `completer` argument:\n\n```py\nprompt.input(\n    ...\n    completer=my_completer,\n    ...\n)\n```\n\n> `completions` and `completer` are **mutually exclusive**! You may not use both!\n\n---\n\n### Further Information\n\nIf you need some easy examples, refer to [example.py](example.py)!\n\nIf you want to contribute, check out the projects repository: [ItsPrompt](https://github.com/TheItsProjects/ItsPrompt)!\n\nIf you got any other questions, or want to give an idea on how to improve **ItsPrompt**, join our discord: [TheItsProjects](https://discord.gg/rP9Qke2jDs)!\n\n---\n\nPuh, that was so much to read... But now, lets have fun with **ItsPrompt**!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2023-present ItsNameless  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ItsPrompt",
    "package_url": "https://pypi.org/project/ItsPrompt/",
    "platform": null,
    "project_url": "https://pypi.org/project/ItsPrompt/",
    "project_urls": {
      "Homepage": "https://github.com/TheItsProjects/ItsPrompt",
      "Issue Tracker": "https://github.com/TheItsProjects/ItsPrompt/issues",
      "Repository": "https://github.com/TheItsProjects/ItsPrompt"
    },
    "release_url": "https://pypi.org/project/ItsPrompt/1.1/",
    "requires_dist": [
      "prompt-toolkit (<4.0,>=3.0.37)"
    ],
    "requires_python": ">=3.8",
    "summary": "Prompting - the fancy way",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17211307,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a9a5927d7c5f649f61d403eef36162fce7156aa409f5a5bfc77a90198c2ab3c",
          "md5": "728911db2de0bc7f3efa75af27b8a8d5",
          "sha256": "82726c83e7e0a56dd063fabe847dc006704d9498f8a3e13044e677086de51783"
        },
        "downloads": -1,
        "filename": "ItsPrompt-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "728911db2de0bc7f3efa75af27b8a8d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19502,
        "upload_time": "2023-03-06T20:59:58",
        "upload_time_iso_8601": "2023-03-06T20:59:58.612275Z",
        "url": "https://files.pythonhosted.org/packages/4a/9a/5927d7c5f649f61d403eef36162fce7156aa409f5a5bfc77a90198c2ab3c/ItsPrompt-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02729781414e6049061fd69d935596f16b1ba53ef5663fba7fb40c50ce20c25e",
          "md5": "0c5629a9e8f6ab22f5b14baa8167d3e6",
          "sha256": "d061a9112dbcf8897e151233539343e9085e583d408ed7ed05f2f08f4c3fade6"
        },
        "downloads": -1,
        "filename": "ItsPrompt-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c5629a9e8f6ab22f5b14baa8167d3e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12829,
        "upload_time": "2023-03-06T21:00:00",
        "upload_time_iso_8601": "2023-03-06T21:00:00.021249Z",
        "url": "https://files.pythonhosted.org/packages/02/72/9781414e6049061fd69d935596f16b1ba53ef5663fba7fb40c50ce20c25e/ItsPrompt-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "908d12aae60db237322e2a8d23a1f83bb66ec7c1ab8bf46c20d336c3dc003723",
          "md5": "552b7dee2942f4b41a9ecc963228b596",
          "sha256": "56ead09b87bce51a7efec06e5f3c281ee23452a0e214a9f0ba68c647c8b6b5fe"
        },
        "downloads": -1,
        "filename": "ItsPrompt-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "552b7dee2942f4b41a9ecc963228b596",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19557,
        "upload_time": "2023-03-06T21:13:00",
        "upload_time_iso_8601": "2023-03-06T21:13:00.351361Z",
        "url": "https://files.pythonhosted.org/packages/90/8d/12aae60db237322e2a8d23a1f83bb66ec7c1ab8bf46c20d336c3dc003723/ItsPrompt-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab69cc5a1cfe4ff6da7048bed15adaff2a1a609b11ca583b24bdb98ded618a1",
          "md5": "8c0bd46dceecf18916896bf2f7d606d3",
          "sha256": "f4c199a8b36dcd2dbd16ec95e57019a5de731f9c2540bcad2b3344a396226ee9"
        },
        "downloads": -1,
        "filename": "ItsPrompt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c0bd46dceecf18916896bf2f7d606d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12841,
        "upload_time": "2023-03-06T21:13:01",
        "upload_time_iso_8601": "2023-03-06T21:13:01.929747Z",
        "url": "https://files.pythonhosted.org/packages/3a/b6/9cc5a1cfe4ff6da7048bed15adaff2a1a609b11ca583b24bdb98ded618a1/ItsPrompt-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed1cda0e88a4c44d1e77a56ecc62f939a29eaed1a3918af9245da72377cbf59e",
          "md5": "a17d5d65bb5678d42dd8e066412033f1",
          "sha256": "9f7ca0e92f9d3ce3bede2518161643fdcabf01cb51df29c481f5e2f5eb2a0454"
        },
        "downloads": -1,
        "filename": "ItsPrompt-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a17d5d65bb5678d42dd8e066412033f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21705,
        "upload_time": "2023-03-08T19:00:18",
        "upload_time_iso_8601": "2023-03-08T19:00:18.628231Z",
        "url": "https://files.pythonhosted.org/packages/ed/1c/da0e88a4c44d1e77a56ecc62f939a29eaed1a3918af9245da72377cbf59e/ItsPrompt-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f988557b7c262a3dc2094f2a8c156178af582be5627173a512a9d819a196d06",
          "md5": "89a57d5bb6eaae823640708edf43bfda",
          "sha256": "07debb58af3cdd538a9c38ad79a59acd3ded4505f291bb391b709f59c200796a"
        },
        "downloads": -1,
        "filename": "ItsPrompt-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "89a57d5bb6eaae823640708edf43bfda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14847,
        "upload_time": "2023-03-08T19:00:20",
        "upload_time_iso_8601": "2023-03-08T19:00:20.237975Z",
        "url": "https://files.pythonhosted.org/packages/0f/98/8557b7c262a3dc2094f2a8c156178af582be5627173a512a9d819a196d06/ItsPrompt-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed1cda0e88a4c44d1e77a56ecc62f939a29eaed1a3918af9245da72377cbf59e",
        "md5": "a17d5d65bb5678d42dd8e066412033f1",
        "sha256": "9f7ca0e92f9d3ce3bede2518161643fdcabf01cb51df29c481f5e2f5eb2a0454"
      },
      "downloads": -1,
      "filename": "ItsPrompt-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a17d5d65bb5678d42dd8e066412033f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 21705,
      "upload_time": "2023-03-08T19:00:18",
      "upload_time_iso_8601": "2023-03-08T19:00:18.628231Z",
      "url": "https://files.pythonhosted.org/packages/ed/1c/da0e88a4c44d1e77a56ecc62f939a29eaed1a3918af9245da72377cbf59e/ItsPrompt-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f988557b7c262a3dc2094f2a8c156178af582be5627173a512a9d819a196d06",
        "md5": "89a57d5bb6eaae823640708edf43bfda",
        "sha256": "07debb58af3cdd538a9c38ad79a59acd3ded4505f291bb391b709f59c200796a"
      },
      "downloads": -1,
      "filename": "ItsPrompt-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "89a57d5bb6eaae823640708edf43bfda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14847,
      "upload_time": "2023-03-08T19:00:20",
      "upload_time_iso_8601": "2023-03-08T19:00:20.237975Z",
      "url": "https://files.pythonhosted.org/packages/0f/98/8557b7c262a3dc2094f2a8c156178af582be5627173a512a9d819a196d06/ItsPrompt-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}