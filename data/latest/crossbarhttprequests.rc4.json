{
  "info": {
    "author": "Yomi Daniels",
    "author_email": "yomid4all@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Utilities"
    ],
    "description": "Crossbar HTTP\n=============\n\n|PyPi version| |PyPi downloads| |Codecov| |PyPi license|\n\nModule that provides methods for accessing Crossbar.io HTTP Bridge\nServices using python-requests and requests-futures for async support\n\nFork of the original package by ``Eric Chapman at The HQ``, only\nsupporting Python 3+ versions using python-requests and requests-futures\nmodule. Which means you can pass params like proxies, auth, certificate\nverify etc. to the Client. Check python-requests for extra args you can\nuse.\n\nRevision History\n----------------\n\n-  v0.1.4:\n\n   -  Added requests-futures module to support async mode calls can now\n      return Futures instead of Response obj\n\n-  v0.1.3:\n\n   -  Switched to python-requests module to support more params passing\n      to the client\n\n-  v0.1.2:\n\n   -  Added \"ClientCallRuntimeError\" exception for general errors\n\n-  v0.1.1:\n\n   -  Added class defined Exceptions for specific events\n   -  Added key/secret handling\n\n-  v0.1:\n\n   -  Initial version\n\nInstallation\n------------\n\n::\n\n    pip install crossbarhttprequests\n\nUsage\n-----\n\nCall\n~~~~\n\nTo call a Crossbar HTTP bridge, do the following\n\n::\n\n    client = Client(\"https://127.0.0.1/call\", verify=False) # https url with extra param verify going to requests.request\n    result = client.call(\"com.example.add\", 2, 3, offset=10)\n    #Asnyc mode\n    client = Client(\"http://127.0.0.1/\", do_async=True) # Run in async mode\n    future = client.call(\"com.example.add\", 2, 3, offset=10)\n    #Do other work here \n    result = future.result() #Get result when ready\n\nThis will call the following method\n\n::\n\n    def onJoin(self, details):\n        \n        def add_something(x, y, offset=0):\n            print \"Add was called\"\n            return x+y+offset\n\n        self.register(add_something, \"com.example.add\")\n        \n\nPublish\n~~~~~~~\n\nTo publish to a Crossbar HTTP bridge, do the following\n\n::\n\n    client = Client(\"http://127.0.0.1/\", headers={'X-Custom-Headers': 'X-Value'}) # Extra params goes to requests.request\n    result = client.publish(\"com.example.event\", event=\"new event\")\n    #In async mode\n    client = Client(\"http://127.0.0.1/publish\", do_async=True, max_workers=8, session=None, response_hook=None) # Extra params for requests-futures\n    result = client.publish(\"com.example.event\", event=\"new event\", response_hook=_method_to_handle_response).result()\n\nThe receiving subscription would look like\n\n::\n\n    def onJoin(self, details):\n        \n        def subscribe_something(event=None, **kwargs):\n            print \"Publish was called with event %s\" % event\n\n        self.subscribe(subscribe_something, \"com.example.event\") \n\nKey/Secret\n~~~~~~~~~~\n\nFor bridge services that have a key and secret defined, simply include\nthe key and secret in the instantiation of the client.\n\n::\n\n    client = Client(\"http://127.0.0.1/publish\", key=\"key\", secret=\"secret\")\n\nExceptions\n~~~~~~~~~~\n\nThe library will throw the following exceptions. Note that all\nexceptions subclass from \"ClientBaseException\" so you can just catch\nthat if you don't want the granularity.\n\n-  ClientBadUrl - The specified URL is not a HTTP bridge service\n-  ClientBadHost - The specified host name is rejecting the connection\n-  ClientMissingParams - The call was missing parameters\n-  ClientSignatureError - The signature did not match\n-  ClientNoCalleeRegistered - Callee was not registered on the router\n   for the specified procedure\n-  ClientCallRuntimeError - Procedure triggered an exception\n\nContributing\n------------\n\nTo contribute, fork the repo and submit a pull request.\n\nTesting\n-------\n\nThe test can be run by using Docker Compose. Connect to a docker host\nand type\n\n::\n\n    %> docker-compose build\n    %> docker-compose up\n\nThe Docker Compose file creates a generic router with an example service\nconnected to it and runs the tests.\n\nThe service \"crossbarhttp\\_test\\_1\" will return a 0 value if the tests\nwere successful and non zero otherwise. To get the pass/fail results\nfrom a command line, do the following\n\n::\n\n    #!/usr/bin/env bash\n\n    docker-compose build\n    docker-compose up\n\n    exit $(docker-compose ps -q | xargs docker inspect -f '{{ .Name }} exited with status {{ .State.ExitCode }}' | grep test_1 | cut -f5 -d ' ')\n\nThis is a little hacky (and hopefully Docker will fix it) but it will do\nthe trick for now.\n\nLicense\n-------\n\nMIT\n\n.. |PyPi version| image:: https://img.shields.io/pypi/v/crossbarhttprequests.svg\n   :target: https://pypi.python.org/pypi/crossbarhttprequests\n.. |PyPi downloads| image:: https://img.shields.io/pypi/dm/crossbarhttprequests.svg\n   :target: https://pypi.python.org/pypi/crossbarhttprequests\n.. |Codecov| image:: https://img.shields.io/codecov/c/github/thehq/python-crossbarhttp/master.svg\n   :target: https://codecov.io/github/thehq/python-crossbarhttp\n.. |PyPi license| image:: https://img.shields.io/pypi/l/crossbarhttprequests.svg\n   :target: https://pypi.python.org/pypi/crossbarhttprequests",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ydaniels/crossbarhttprequests",
    "keywords": "wamp,crossbar,requests",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crossbarhttprequests",
    "package_url": "https://pypi.org/project/crossbarhttprequests/",
    "platform": "",
    "project_url": "https://pypi.org/project/crossbarhttprequests/",
    "project_urls": {
      "Homepage": "https://github.com/ydaniels/crossbarhttprequests"
    },
    "release_url": "https://pypi.org/project/crossbarhttprequests/0.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a library for connecting to Crossbar.io HTTP Bridge Services using python-requests.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10034531,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca5ff4e6d58e13b60b474687e87ba1cf4eccd3451e98cccf31e4221306fac15",
          "md5": "7f139f53c79a87bd247cfb115a4a4f05",
          "sha256": "7698570d87facbf2a0192c0b731fc35765d634b6e0cb38b2f760f639274e0ca2"
        },
        "downloads": -1,
        "filename": "crossbarhttprequests-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7f139f53c79a87bd247cfb115a4a4f05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6151,
        "upload_time": "2021-04-11T19:53:05",
        "upload_time_iso_8601": "2021-04-11T19:53:05.891150Z",
        "url": "https://files.pythonhosted.org/packages/9c/a5/ff4e6d58e13b60b474687e87ba1cf4eccd3451e98cccf31e4221306fac15/crossbarhttprequests-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8547908f9b3283c0bf6d4adfc49d1d903984e0881ce1d253f29056560eaf1e4",
          "md5": "3401bae1e1f75cb49d6cab8eff0da744",
          "sha256": "80b76086383c7ef22eaec4f619a2282f62893a524a8b7c11d7c4f5be27234ab7"
        },
        "downloads": -1,
        "filename": "crossbarhttprequests-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3401bae1e1f75cb49d6cab8eff0da744",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6280,
        "upload_time": "2021-04-11T23:13:30",
        "upload_time_iso_8601": "2021-04-11T23:13:30.214629Z",
        "url": "https://files.pythonhosted.org/packages/c8/54/7908f9b3283c0bf6d4adfc49d1d903984e0881ce1d253f29056560eaf1e4/crossbarhttprequests-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c5d3e257e1ce06ffd86e3bf2a8ce4a9cc3a5467cd0d3b1fb0a4791b9d05e812",
          "md5": "b989d73d8e39037f19381cb54c852ec7",
          "sha256": "e5df8fcc6fd0f8e0ff282482583dd8963a69a1c59b686452d1c639d9a8b45234"
        },
        "downloads": -1,
        "filename": "crossbarhttprequests-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b989d73d8e39037f19381cb54c852ec7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6314,
        "upload_time": "2021-04-11T23:35:59",
        "upload_time_iso_8601": "2021-04-11T23:35:59.131320Z",
        "url": "https://files.pythonhosted.org/packages/3c/5d/3e257e1ce06ffd86e3bf2a8ce4a9cc3a5467cd0d3b1fb0a4791b9d05e812/crossbarhttprequests-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60a8c5510263139a6c1c345e0436ec42f2cb7e017638ecd7ee3aa8016ed7cc0",
          "md5": "51a7c658f05eef25032bb56369d49e0a",
          "sha256": "e8194b95a066675c5351d4bfef541e5cfdc3b0b11867e5bf8575f5daf983e837"
        },
        "downloads": -1,
        "filename": "crossbarhttprequests-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "51a7c658f05eef25032bb56369d49e0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6318,
        "upload_time": "2021-04-11T23:58:18",
        "upload_time_iso_8601": "2021-04-11T23:58:18.175478Z",
        "url": "https://files.pythonhosted.org/packages/c6/0a/8c5510263139a6c1c345e0436ec42f2cb7e017638ecd7ee3aa8016ed7cc0/crossbarhttprequests-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c60a8c5510263139a6c1c345e0436ec42f2cb7e017638ecd7ee3aa8016ed7cc0",
        "md5": "51a7c658f05eef25032bb56369d49e0a",
        "sha256": "e8194b95a066675c5351d4bfef541e5cfdc3b0b11867e5bf8575f5daf983e837"
      },
      "downloads": -1,
      "filename": "crossbarhttprequests-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "51a7c658f05eef25032bb56369d49e0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6318,
      "upload_time": "2021-04-11T23:58:18",
      "upload_time_iso_8601": "2021-04-11T23:58:18.175478Z",
      "url": "https://files.pythonhosted.org/packages/c6/0a/8c5510263139a6c1c345e0436ec42f2cb7e017638ecd7ee3aa8016ed7cc0/crossbarhttprequests-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}