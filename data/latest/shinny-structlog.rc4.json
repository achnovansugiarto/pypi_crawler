{
  "info": {
    "author": "TianQin",
    "author_email": "tianqincn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# structlog-python\n\n根据 [日志规范](https://shinnytech.atlassian.net/wiki/spaces/TWG/pages/161153315)，实现的 python 版本的日志库。\n\n基于 python 自带 logging 模块的简单封装。\n\n# 目录\n\n* [logging 模块处理流程](#logging-模块处理流程)\n* [本库遵循的日志规范](#本库遵循的日志规范)\n* [安装](#安装)\n* [结构化](#结构化)\n* [上下文](#上下文)\n    * [1. 打印日志，使用 extra 字段表示上下文信息。](#1-打印日志使用-extra-字段表示上下文信息)\n    * [2. 使用 ShinnyLoggerAdapter 维护 context 信息](#2-使用-shinnyloggeradapter-维护-context-信息)\n* [日志源头及优先级](#日志源头及优先级)\n    * [1. context 信息](#1-context-信息)\n    * [2. logger.debug 时提供的字段](#2-loggerdebug-时提供的字段)\n    * [3. shinny_structlog.JSONFormatter 自动生成的字段](#3-shinny_structlogjsonformatter-自动生成的字段)\n* [使用示例及注意事项](#使用示例及注意事项)\n    * [不使用本日志库](#不使用本日志库)\n    * [结构化日志](#结构化日志)\n    * [日志添加额外字段](#日志添加额外字段)\n    * [LogRecord 本身带有的属性](#logrecord-本身带有的属性)\n    * [上下文表示](#上下文表示)\n    * [上下文继承](#上下文继承)\n\n## logging 模块处理流程\n\n1. logger = logging.getLogger(name=\"x\")   获取一个指定 name 的 logger 实例，name 与 logger 的关系是一一对应的，相同 name 调用两次，得到的是同一个 logger 实例。\n2. logger.debug(msg=\"debug msg\")  调用 logger 下的接口打印日志。\n3. 在判断当前级别可以生成日志后，接下来会生成 LogRecord 实例 record， record 代表了当前打印这一行日志的对象，record 中除了记录了日志 msg 信息，还带有很多其他信息，比如 thread 线程号、threadName 线程名等等。\n4. 接下来由当前 logger 下添加过的 handlers 依次处理 record，`handler.handle(record)` 真正将每条日志输出到指定的位置，每个 handler 都可以设置对应的 **日志级别** 和 **格式**。\n\n本库在此流程上，主要增强了两部分功能：\n1. 提供 shinny_structlog.JSONFormatter，可以设置为任意 handler 的 formatter 类。\n2. logger.debug()、logger.info()、logger.warning()、logger.error()、logger.fatal()、logger.panic() 可以接受处理更多的参数\n\n\n## 本库遵循的日志规范\n\n* 每条日志都是一个 `json object` 且遵循 `json` 标准的 `utf-8` 编码，【不能】使用 `gb2312/gbk` 等其他编码格式。\n* 日志中的字段名【必须】使用小写英文字母，数字及下划线，对应的正则表达式描述为 `[a-z0-9_]`。\n* 每一条日志，默认包括的字段：\n    + msg - 事件描述，其唯一性【必须】可枚举，且【应】由一个或多个全小写英文单词组成（缩写除外：例如 \"decode STEP\"），并使用空格分隔。\n    + time - 时间，从 record.create 转为 RFC3339Nano 格式，例如 \"2020-04-28T11:27:27.039781461+08:00\"\n    + level - 日志级别分别为\n        - debug\n        - info\n        - warning\n        - error\n        - fatal\n        - panic\n    + name - logger 的 name 字段，为 getLogger 填入的参数\n\n\n## 安装 \n\n```\npip install shinny-structlog\n```\n\n## 结构化\n\n所有日志输出都是 json 结构，在打印日志时，第一个参数为 msg （事件的唯一性描述），后面可以添加任意的键值对参数。\n\n`logger.debug('send_data', url=\"xxx\", pack={}, ip=\"127.0.0.1\", port=8080)`\n\n\n## 上下文\n\n有两种方式来表示 context 信息\n\n### 1. 打印日志，使用 extra 字段表示上下文信息。\n\n直接在 extra 关键字下填入一个 dict 对象，由用户自己管理 context 继承关系。自己的 context 需要先 copy，再调用 update 方法。\n\n```python\napi_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\ntqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n```\n\n```python\n# 使用 extra 关键字参数表示 context 信息\napi_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\ntqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n# 继承 context 信息，需要先 copy 父级的 context 信息，再添加子级需要的信息，使用 extra 关键字参数表示 context 信息\nmd1_context = api_context.copy()\nmd1_context[\"url\"] = \"wss://a.shinnytech.com\"\ntqsdk_logger.info(\"received\", extra=md1_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n```\n\n### 2. 使用 ShinnyLoggerAdapter 维护 context 信息\n\n* ShinnyLoggerAdapter 构造方法\n\n```\nlogger = logging.getLogger(\"tqsdk\")\n# 第一个参数为 logger ，后面可以接任意多个关键字参数\nadapter = ShinnyLoggerAdapter(logger, strategy_id=2, strategy_name=\"ma\")\n```\n\n* ShinnyLoggerAdapter 之间的继承\n\n```\nlogger = logging.getLogger(\"tqsdk\")\n# 第一个参数为 logger ，后面可以接任意多个关键字参数\nadapter = ShinnyLoggerAdapter(logger, strategy_id=2, strategy_name=\"ma\")\n# 调用 bind 方法，接任意多个关键字参数，返回一个新的 adapter, 其携带 context 信息包括父级 context 信息和 bind 添加的参数\nchild_adapter = adapter.bind(user_name=\"tianqin\", user_id=\"1009\")\n```\n\n**注意**：\n+ 如果子级 bind 的参数和父级参数同名，子级会覆盖父级同名的参数\n+ 如果调用 `adapter.debug()/info()/warning()/error()/fatal()/panic()` 同时传入 extra 参数，那么 extra 会覆盖 adapter 中的相同关键字的 context 信息。\n\n\n## 日志源头及优先级\n\n使用本库，打印的每一条日志都是一个 `json object`，其内容有 4 个源头，按优先级从低到高依次是：\n\n#### 1. 使用 ShinnyLoggerAdapter 类添加的 context 信息。\n\n推荐使用 ShinnyLoggerAdapter, context 信息更明确，避免用户在使用 dict 时忘记 copy 或者 update 等简单错误。\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", init_balance=100000000.0)\n\n# output:\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:19:33.115011+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n#### 2. extra 字段来表示的 context 信息\n\n使用本库时，可以使用 extra 字段来表示的 context 信息，\n\n分别参考：`examples/log_with_context.py` `examples/log_with_context_adapter.py`\n\n推荐使用 ShinnyLoggerAdapter, context 信息更明确，避免用户在使用 dict 时忘记 copy 或者 update 等简单错误。\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", extra={\"strategy_name\": \"ma5\"}, init_balance=100000000.0)\n\n# output:\n# {\"strategy_id\": 2, \"strategy_name\": \"ma5\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:19:33.115011+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n#### 3. logger.debug 时提供的字段\n\n`logger.debug()`、`logger.info()`、`logger.warning()`、`logger.error()`、`logger.fatal()`、`logger.panic()` 可以接受任意关键字参数。\n\n但是，有 4 个参数是 logging 模块本身就支持的，有特别含义：\n\n+ extra: dict 类型，用来表示 context 信息。\n+ exc_info: bool 或者 exception 类型，默认值 None。如果是 Exception 实例，则打印该异常信息；如果是 True，则调用 `sys.exc_info()` 获取异常信息后打印。\n+ stack_info：bool 类型，默认值 False，输出调用栈信息。\n+ stacklevel: int 类型，在 3.8 版新增，默认为 1。如果大于 1，则在为日志记录时，将跳过相应数量的调用栈。\n\n示例 - 优先级：\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", extra={\"md_url\": \"wss://aaa.shinnytech.com\"}, md_url=\"wss://bbb.shinnytech.com\")  # 这里的 md_url 会覆盖 extra.md_url\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://bbb.shinnytech.com\", \"msg\": \"init\", \"time\": \"2020-09-01T17:32:15.628907+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n示例 - 打印调用栈或者异常信息：\n\n```python\nimport logging\nimport shinny_structlog\n\ndef subscribe_quote(symbols):\n    try:\n        symbols = symbols - [\"DCE.a\"]  # TypeError: unsupported operand type(s) for -: 'list' and 'list'\"\n        pack = {\n            \"aid\": \"subscribe_quote\",\n            \"ins_list\": \",\".join(symbols)\n        }\n        # api.send_pack(pack)  # 发送数据包\n        tqsdk_logger.debug(\"send data\", extra=api_context, stack_info=1, pack=pack)  # 记录日志，同时会打印出调用栈信息\n    except Exception as e:\n        tqsdk_logger.debug(\"send data\", extra=api_context, exc_info=e)  # 记录日志，打印出 Exception\n        # tqsdk_logger.debug(\"send data\", extra=api_context, exc_info=True)  # 记录日志，也会打印出和上一行一样的信息\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://aaa.shinnytech.com\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)  # 每次打印日志，都将 context 信息用 extra 传给 logger\n\n    subscribe_quote([\"SHFE.cu2002\", \"SHFE.au2002\"])\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://aaa.shinnytech.com\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:17:26.627757+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"msg\": \"send data\", \"time\": \"2020-09-01T17:17:26.627924+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\", \"exc_info\": \"Traceback (most recent call last):\\n  File \\\"/Users/yanqiongma/Documents/WorkSpace/structlog-python/examples/log_with_context.py\\\", line 7, in subscribe_quote\\n    symbols = symbols - [\\\"DCE.a\\\"]\\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\"}```\n```\n\n\n#### 4. shinny_structlog.JSONFormatter 自动生成的字段\n\nshinny_structlog.JSONFormatter 会为每条 json 日志添加 `msg`、`time`、`level`、`name` 这几个字段。\n\n+ msg - 事件描述，其唯一性【必须】可枚举。为 logger.debug() 中第一个参数\n+ time - 从 record.create 转为 RFC3339Nano 格式，例如 \"2020-04-28T11:27:27.039781461+08:00\"\n+ level - debug、info、warning、error、fatal、panic 其中之一\n+ name - logger 的 name 字段，为 getLogger 填入的参数\n\n**注意**：\ntime 字段默认使用机器本地时区，如何主动设置时区信息？设置环境变量 TZ，datetime 模块就会采用设置的 TZ 来输出时间的时区信息。\n\n环境变量 TZ 设置的格式，可以参考文档 `https://docs.python.org/3/library/time.html#time.tzset`\n\n比如：东八区可以设置为 `CST-08`\n\n\n另外在 JSONFormatter 初始化时，还可以接受一个列表参数，来添加由 LogRecord 生成的属性信息。 \n\n可以添加的属性值有：\n\n+ created - LogRecord 被创建的时间（即 time.time() 的返回值）\n+ filename - pathname 的文件名部分\n+ func_name - 调用 logger 的函数名\n+ levelno - 日志级别的数字表示\n+ lineno - 发出日志记录调用所在的源行号（如果可用）\n+ module - 模块名 (filename 的名称部分)\n+ msecs - LogRecord 被创建的时间的毫秒部分\n+ pathname - 发出日志记录调用的源文件的完整路径名（如果可用）\n+ process - 进程ID（如果可用）\n+ process_name - 进程名（如果可用）\n+ relative_created - 以毫秒数表示的 LogRecord 被创建的时间，即相对于 logging 模块被加载时间的差值。\n+ thread - 线程ID（如果可用）\n+ thread_name - 线程名（如果可用）\n\n示例 - 优先级：\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter([\"module\"]))  # 这里 module 的优先级最高\n    tqsdk_logger.addHandler(sh)\n\n    api_context = {\"module\":\"api\", \"md_url\": \"wss://aaa.shinnytech.com\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, md_url=\"wss://bbb.shinnytech.com\", module=\"tqsdk\")  # 这里的 module 会被 formatter 中 record 自动生成的 module 覆盖\n\n# output\n# {\"module\": \"log_params_priority\", \"md_url\": \"wss://bbb.shinnytech.com\", \"msg\": \"init\", \"time\": \"2020-09-01T17:51:32.781189+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n## 使用示例及注意事项\n\n### 不使用本日志库\n\n默认日志输出到控制台，python 默认输出的 logging.WARNING 级别的日志, 只输出 msg 字符串\n\n```python\nimport logging\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    logger.info(\"info\")  # 看不到此行输出信息\n    logger.warning(\"warning\")\n    logger.error(\"error\")\n    logger.error(\"error %s %s\", 'xxx', 'yyy')\n\n# 输出\n# warning\n# error\n# error xxx yyy\n```\n\n### 结构化日志\n\n`shinny_structlog.JSONFormatter` 可以将输出的日志格式化为 json 格式。\n\n```python\n\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()  # 输出到控制台前端\n    sh.setLevel(logging.INFO)  # logging.INFO 级别\n\n    fmt = shinny_structlog.JSONFormatter\n    sh.setFormatter(fmt())\n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.info(\"connected\")\n    tqsdk_logger.warning(\"connected\")\n    tqsdk_logger.error(\"connected\")\n    tqsdk_logger.fatal(\"connected\")\n    tqsdk_logger.panic(\"connected\")\n\n    tqsdk_logger.log(27, \"connected\")\n\n# output\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304480+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304681+08:00\", \"level\": \"warning\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304787+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304879+08:00\", \"level\": \"fatal\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304971+08:00\", \"level\": \"panic\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.305065+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n```\n\n\n设置日志为 json 格式，输出到日志文件\n```python\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    fh = logging.FileHandler(filename=\"testprint.log\")\n    fh.setLevel(logging.DEBUG)\n    fmt = shinny_structlog.JSONFormatter\n    fh.setFormatter(fmt())\n    tqsdk_logger.addHandler(fh)\n\n    tqsdk_logger.error(\"connected error\", url=\"xxx.com\", user=\"abc\")\n\n# 输出到 testprint.log\n# {\"url\": \"xxx.com\", \"user\": \"abc\", \"msg\": \"connected error\", \"time\": \"2020-08-31T12:15:31.519445+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n```\n\n\n### 日志添加额外字段\n\n打印每条日志，都可以添加任意个的健值对参数。每个参数名都必须符合日志规范，【必须】使用小写英文字母，数字及下划线，对应的正则表达式描述为 `[a-z0-9_]`。\n\n```python\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.error(\"connected error\", url=\"xxx.com\", user=\"abc\")\n\n# output\n# {\"url\": \"xxx.com\", \"user\": \"abc\", \"msg\": \"connected error\", \"time\": \"2020-08-31T12:15:31.519445+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n```\n\n\n### LogRecord 本身带有的属性\n\n在 JSONFormatter 初始化，可以提供一个 list 类型的参数，表示在生成 json 字符串中添加 LogRecord 对应的字段。\n\n注意：logging 模块属性名采用驼峰标识，shinny_structlog 的日志规范采用小写字母加下划线，此处将 LogRecord 中驼峰标识的属性，转为小写字母加下划线。\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    fmt = shinny_structlog.JSONFormatter\n    # 打印的每条日志都会至少包含 \"msg\" \"time\" \"level\" \"name\" 以及 \"module\" \"line_no\" \"thread_name\" 这7个字段\n    sh.setFormatter(fmt([\"module\", \"line_no\", \"thread_name\"])) \n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.debug(\"xxx\")\n\n# output\n# {\"msg\": \"xxx\", \"time\": \"2020-08-31T18:44:34.087702+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\", \"module\": \"example\", \"line_no\": 15, \"thread_name\": \"MainThread\"}\n```\n\n\n## 上下文表示\n\n1. 打印日志时，使用 extra 字段表示上下文信息。\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:55:47.532228+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n2. 使用 ShinnyLoggerAdapter 维护 context 信息\n\n```python\nimport logging\nfrom shinny_structlog import ShinnyLoggerAdapter, JSONFormatter\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n    tqsdk_logger_adapter = ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    tqsdk_logger_adapter.debug(\"init\", init_balance=100000000.0)\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:51:28.124017+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n## 上下文继承\n\n有两种方式来表示 context 的继承关系：\n\n1. 直接使用 dict 对象，由用户自己管理 context 继承关系\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n    # 继承 context 信息，需要先 copy 父级的 context 信息，再添加子级需要的信息，使用 extra 关键字参数表示 context 信息\n    md1_context = api_context.copy()\n    md1_context[\"url\"] = \"wss://a.shinnytech.com\"\n    tqsdk_logger.info(\"received\", extra=md1_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n\n    md2_context = api_context.copy()\n    md2_context[\"url\"] = \"wss://b.shinnytech.com\"\n    tqsdk_logger.info(\"received\", extra=md2_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2012\": {}}}]})\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:55:47.532228+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://a.shinnytech.com\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-01T17:55:47.532424+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://b.shinnytech.com\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2012\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-01T17:55:47.532507+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}```\n```\n\n2. 使用 ShinnyLoggerAdapter 维护 context 继承关系\n\n```python\nimport logging\nfrom shinny_structlog import ShinnyLoggerAdapter, JSONFormatter\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # 使用 extra 关键字参数表示 context 信息\n    tqsdk_logger_adapter = ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    tqsdk_logger_adapter.debug(\"init\", init_balance=100000000.0)\n    tqsdk_logger_adapter.debug(\"init\", extra={\"strategy_name\": \"tqsdk_ma\"}, init_balance=100000000.0)  # debug 中 extra 会覆盖 ShinnyLoggerAdapter 中同名的参数\n\n    # 继承 context 信息，调用 tqsdk_logger.bind\n    # 继承 tqsdk_logger_adapter 中的 context, 并且再添加两个字段\n    md1_logger_adapter = tqsdk_logger_adapter.bind(url=\"wss://a.shinnytech.com\", ip=\"127.0.0.1\")\n    md1_logger_adapter.info(\"received\", pack={\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n\n    md2_logger_adapter = tqsdk_logger_adapter.bind(url=\"wss://b.shinnytech.com\", ip=\"127.0.0.1\")\n    md2_logger_adapter.info(\"received\", pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2012\": {}}}]})\n\n# ouput\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:52:12.825100+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_name\": \"tqsdk_ma\", \"strategy_id\": 2, \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:52:12.825390+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://a.shinnytech.com\", \"ip\": \"127.0.0.1\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-07T16:52:12.825478+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://b.shinnytech.com\", \"ip\": \"127.0.0.1\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2012\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-07T16:52:12.825558+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shinnytech/structlog-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shinny-structlog",
    "package_url": "https://pypi.org/project/shinny-structlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/shinny-structlog/",
    "project_urls": {
      "Homepage": "https://github.com/shinnytech/structlog-python"
    },
    "release_url": "https://pypi.org/project/shinny-structlog/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Shinny StructLog",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8557716,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3176b7821f20f5ea14a861dbfd8de50be9b3d881066dbb8a8dfccbc9dda9e301",
          "md5": "32e2e00fd4369974561cb0974ed0b2e4",
          "sha256": "6e03eb8ed1cdcac646369f8d9c725b3154be03d4c913bb885c753afca1123509"
        },
        "downloads": -1,
        "filename": "shinny_structlog-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "32e2e00fd4369974561cb0974ed0b2e4",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.6",
        "size": 7316,
        "upload_time": "2020-09-02T05:49:09",
        "upload_time_iso_8601": "2020-09-02T05:49:09.932433Z",
        "url": "https://files.pythonhosted.org/packages/31/76/b7821f20f5ea14a861dbfd8de50be9b3d881066dbb8a8dfccbc9dda9e301/shinny_structlog-0.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a8715948b396b38aee5b04f753dbdd7a30414361f1d907a7abcb08c422f4139",
          "md5": "1712475afcf47dced597a094c055bc4e",
          "sha256": "de78b09e0eefa477870fb6d4f2cc73de752445a7444f64e46acb8193621dc244"
        },
        "downloads": -1,
        "filename": "shinny-structlog-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1712475afcf47dced597a094c055bc4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8044,
        "upload_time": "2020-09-02T05:49:12",
        "upload_time_iso_8601": "2020-09-02T05:49:12.366783Z",
        "url": "https://files.pythonhosted.org/packages/7a/87/15948b396b38aee5b04f753dbdd7a30414361f1d907a7abcb08c422f4139/shinny-structlog-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feda168ac7effa7bbfc1af9de0cf55c0b876ac2f12ac50abeac43ceffaf372b4",
          "md5": "ad823c4426670b261ce1c96473dcef9c",
          "sha256": "6cf631062a95edbc623e0b1f26bad7ffd1b0604b1271917f4e28de27760cfbf4"
        },
        "downloads": -1,
        "filename": "shinny_structlog-0.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad823c4426670b261ce1c96473dcef9c",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=3.6",
        "size": 7288,
        "upload_time": "2020-09-04T07:06:39",
        "upload_time_iso_8601": "2020-09-04T07:06:39.965821Z",
        "url": "https://files.pythonhosted.org/packages/fe/da/168ac7effa7bbfc1af9de0cf55c0b876ac2f12ac50abeac43ceffaf372b4/shinny_structlog-0.0.2-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105e30b67db47f013b6d7398240cd219d554595c28359d66366f8ced44b30e54",
          "md5": "48a1acaf4d957b783c2965918d384d10",
          "sha256": "32edaa96170385ab58cb09592d9f2fbb96e5d08ba016e39eaea262902d65d63f"
        },
        "downloads": -1,
        "filename": "shinny-structlog-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "48a1acaf4d957b783c2965918d384d10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8006,
        "upload_time": "2020-09-04T07:06:41",
        "upload_time_iso_8601": "2020-09-04T07:06:41.102864Z",
        "url": "https://files.pythonhosted.org/packages/10/5e/30b67db47f013b6d7398240cd219d554595c28359d66366f8ced44b30e54/shinny-structlog-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "509d9da9aea0cc0c1727e7ee5e9c18ec4559dddd99b05aea04ced6b6581e1ab4",
          "md5": "6e654a64a19f8e668e7073773f17f3b7",
          "sha256": "7fe80eab019cf9255a6e0998ad72598b0f15ef8562ae3c366d9ba1dd6e74de8c"
        },
        "downloads": -1,
        "filename": "shinny_structlog-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e654a64a19f8e668e7073773f17f3b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7288,
        "upload_time": "2020-09-04T09:19:35",
        "upload_time_iso_8601": "2020-09-04T09:19:35.725250Z",
        "url": "https://files.pythonhosted.org/packages/50/9d/9da9aea0cc0c1727e7ee5e9c18ec4559dddd99b05aea04ced6b6581e1ab4/shinny_structlog-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7ff884fc21f6c46a17e198f478a7e8c919ee3f63ebef9686514669d675a1725",
          "md5": "63c599b1698c3368c2510d969ed4fe4c",
          "sha256": "2fb4fda457efdde1a97803909178564a6ed5a1e2c93425c1ac03cc711c41401c"
        },
        "downloads": -1,
        "filename": "shinny-structlog-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "63c599b1698c3368c2510d969ed4fe4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10693,
        "upload_time": "2020-09-04T09:19:37",
        "upload_time_iso_8601": "2020-09-04T09:19:37.892776Z",
        "url": "https://files.pythonhosted.org/packages/f7/ff/884fc21f6c46a17e198f478a7e8c919ee3f63ebef9686514669d675a1725/shinny-structlog-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "617ee9289e6b2c677318b44e48eb8cd5bb7dc9fe786df640e78947cda7a325ae",
          "md5": "fa2aba5639f22edfee346a9abdfc555f",
          "sha256": "989f96f484eeefae2a37a80fd262a3d3c92d14e3fe8346c218f45dff0a3412c8"
        },
        "downloads": -1,
        "filename": "shinny_structlog-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa2aba5639f22edfee346a9abdfc555f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8783,
        "upload_time": "2020-11-02T07:17:09",
        "upload_time_iso_8601": "2020-11-02T07:17:09.413905Z",
        "url": "https://files.pythonhosted.org/packages/61/7e/e9289e6b2c677318b44e48eb8cd5bb7dc9fe786df640e78947cda7a325ae/shinny_structlog-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a48f66169d65384be6ab15e146db5f1b384a74ce202aa7bdc311f3a088187fb5",
          "md5": "14a9cce5eea69f647068867c92fa66c1",
          "sha256": "e30db15314ce81f15af025b0f49715dcfdcb932e539bfbc7d462b8b61c3afeb3"
        },
        "downloads": -1,
        "filename": "shinny-structlog-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "14a9cce5eea69f647068867c92fa66c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14834,
        "upload_time": "2020-11-02T07:17:10",
        "upload_time_iso_8601": "2020-11-02T07:17:10.654283Z",
        "url": "https://files.pythonhosted.org/packages/a4/8f/66169d65384be6ab15e146db5f1b384a74ce202aa7bdc311f3a088187fb5/shinny-structlog-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "617ee9289e6b2c677318b44e48eb8cd5bb7dc9fe786df640e78947cda7a325ae",
        "md5": "fa2aba5639f22edfee346a9abdfc555f",
        "sha256": "989f96f484eeefae2a37a80fd262a3d3c92d14e3fe8346c218f45dff0a3412c8"
      },
      "downloads": -1,
      "filename": "shinny_structlog-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa2aba5639f22edfee346a9abdfc555f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8783,
      "upload_time": "2020-11-02T07:17:09",
      "upload_time_iso_8601": "2020-11-02T07:17:09.413905Z",
      "url": "https://files.pythonhosted.org/packages/61/7e/e9289e6b2c677318b44e48eb8cd5bb7dc9fe786df640e78947cda7a325ae/shinny_structlog-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a48f66169d65384be6ab15e146db5f1b384a74ce202aa7bdc311f3a088187fb5",
        "md5": "14a9cce5eea69f647068867c92fa66c1",
        "sha256": "e30db15314ce81f15af025b0f49715dcfdcb932e539bfbc7d462b8b61c3afeb3"
      },
      "downloads": -1,
      "filename": "shinny-structlog-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "14a9cce5eea69f647068867c92fa66c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14834,
      "upload_time": "2020-11-02T07:17:10",
      "upload_time_iso_8601": "2020-11-02T07:17:10.654283Z",
      "url": "https://files.pythonhosted.org/packages/a4/8f/66169d65384be6ab15e146db5f1b384a74ce202aa7bdc311f3a088187fb5/shinny-structlog-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}