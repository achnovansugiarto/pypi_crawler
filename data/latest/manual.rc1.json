{
  "info": {
    "author": "Thor Whalen",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# manual\nPython interfaces to system calls\n\nTo install:\t```pip install manual```\n\n\n# Examples\n\nWrite some \"instructions\" for someone with some placeholders like so:\n\n```python\ntemplate = \"\"\"\ngit checkout {main_branch}\ngit pull\ngit checkout {to_merge_branch}\ngit merge {main_branch}\ngit push\n\"\"\"\n```\n\nThen just make a function like this:\n\n```python\nri = mk_command_runner(template)\n```\n\nThen `ri` is a function with a nice signature with arguments to control the \nplaceholders. \n\n```python\nfrom inspect import signature\nassert str(signature(ri)) == '(main_branch, to_merge_branch, *, _dry_run=False)'\n```\n\nIf you call the function, it will run the commands one by one, printing \nthe command it's about the run and then the output of the run.\nThe `_dry_run` allows one to just do the command prints without actually running \nthe commands:\n\n```python\nprint(ri('master', 'fixing_something', _dry_run=True))\n```\n\n```\n(1/5)$ git checkout master\n\n(2/5)$ git pull\n\n(3/5)$ git checkout fixing_something\n\n(4/5)$ git merge master\n\n(5/5)$ git push\n```\n\nNote that you can also specify your commands as a list, \nand also ask that the commands be run one by one, asking the user to \ntype any key to continue at every step:\n\n```python\npwd_and_ls = mk_command_runner([\"pwd\", \"ls -l\"], step_by_step=True)\npwd_and_ls()\n```\n\n```\n(1/2)$ pwd\n/Users/Thor.Whalen/Dropbox/dev/p3/proj/t/manual\n\nTYPE ANY KEY TO CONTINUE\n\n(2/2)$ ls -l\ntotal 48\n-rw-r--r--@ 1 Thor.Whalen  staff  11357 Jun 15 21:00 LICENSE\n-rw-r--r--@ 1 Thor.Whalen  staff   1040 Jun 15 21:13 README.md\ndrwxr-xr-x@ 9 Thor.Whalen  staff    288 Jun 15 21:00 docsrc\ndrwxr-xr-x@ 5 Thor.Whalen  staff    160 Jun 15 21:04 manual\n-rw-r--r--@ 1 Thor.Whalen  staff    422 Jun 15 21:04 setup.cfg\n-rw-r--r--@ 1 Thor.Whalen  staff     91 Jun 15 21:00 setup.py\n```\n\n# Where this is going\n\nHow many times do we write instructions for others, or ask others for us.\nOr perhaps we're even organized enough to have a little file where \nwe put our little how-to recipes, commenting them with natural language\nso we can understand what the steps are, and simply be able to \nfind those instructions when the time comes.\n\nAnd then we go through those commands one by one, making sure we replace the \nright part of the instructions with the right values for our context,\nmaybe trying to read the comments, so we know what we're doing. \n\nReally though, we no extra effort but following some convention to \nmake our instructions parsable, \nwe can make our instructions, well, executable.\n\nSo instead of this:\n\n```\ngit checkout {your_main_branch}\ngit pull\ngit checkout {your_branch}\ngit merge {your_main_branch}\n# Now resolve conflics and press any key when ready for the next step\ngit commit -m {your_commit_message}\ngit push\n```\n\njust being that, we can take it as a DSL that will also give us:\n- A function that does it all\n- A function that will actually guide the user through the steps, \nexplaining what's happening etc. (so also educational)\n\nThis means that we can then REUSE something like a markdown document \nthat explains recipes, installation instructions, etc. \nalso as boilerplate-less utils.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thorwhalen/manual",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "manual",
    "package_url": "https://pypi.org/project/manual/",
    "platform": "any",
    "project_url": "https://pypi.org/project/manual/",
    "project_urls": {
      "Homepage": "https://github.com/thorwhalen/manual"
    },
    "release_url": "https://pypi.org/project/manual/0.0.2/",
    "requires_dist": [
      "i2"
    ],
    "requires_python": "",
    "summary": "Python interfaces to system calls",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14147446,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a877a5cee695878eabd3ec19356ba008d6a326f8979510b36316c6d36c6c0c2",
          "md5": "3a024dd0a8f4435bd81c10957205192d",
          "sha256": "7396f6494286de45dcd53a7b27e67be0b03a00bb936e6a5e51127358879fdd20"
        },
        "downloads": -1,
        "filename": "manual-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a024dd0a8f4435bd81c10957205192d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8205,
        "upload_time": "2022-06-16T04:48:35",
        "upload_time_iso_8601": "2022-06-16T04:48:35.797783Z",
        "url": "https://files.pythonhosted.org/packages/8a/87/7a5cee695878eabd3ec19356ba008d6a326f8979510b36316c6d36c6c0c2/manual-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22fa79a0d4d068db9333a22b715aa72d481f398d293c6d7379a916085c551720",
          "md5": "188815da16a32e466d3ff1c8e69f7d71",
          "sha256": "cef8e1281c350a6060e176e2e3a046e3854f8a228a9d8634559ad82b88d5ecf7"
        },
        "downloads": -1,
        "filename": "manual-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "188815da16a32e466d3ff1c8e69f7d71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7637,
        "upload_time": "2022-06-16T04:48:37",
        "upload_time_iso_8601": "2022-06-16T04:48:37.635819Z",
        "url": "https://files.pythonhosted.org/packages/22/fa/79a0d4d068db9333a22b715aa72d481f398d293c6d7379a916085c551720/manual-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a877a5cee695878eabd3ec19356ba008d6a326f8979510b36316c6d36c6c0c2",
        "md5": "3a024dd0a8f4435bd81c10957205192d",
        "sha256": "7396f6494286de45dcd53a7b27e67be0b03a00bb936e6a5e51127358879fdd20"
      },
      "downloads": -1,
      "filename": "manual-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a024dd0a8f4435bd81c10957205192d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8205,
      "upload_time": "2022-06-16T04:48:35",
      "upload_time_iso_8601": "2022-06-16T04:48:35.797783Z",
      "url": "https://files.pythonhosted.org/packages/8a/87/7a5cee695878eabd3ec19356ba008d6a326f8979510b36316c6d36c6c0c2/manual-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22fa79a0d4d068db9333a22b715aa72d481f398d293c6d7379a916085c551720",
        "md5": "188815da16a32e466d3ff1c8e69f7d71",
        "sha256": "cef8e1281c350a6060e176e2e3a046e3854f8a228a9d8634559ad82b88d5ecf7"
      },
      "downloads": -1,
      "filename": "manual-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "188815da16a32e466d3ff1c8e69f7d71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7637,
      "upload_time": "2022-06-16T04:48:37",
      "upload_time_iso_8601": "2022-06-16T04:48:37.635819Z",
      "url": "https://files.pythonhosted.org/packages/22/fa/79a0d4d068db9333a22b715aa72d481f398d293c6d7379a916085c551720/manual-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}