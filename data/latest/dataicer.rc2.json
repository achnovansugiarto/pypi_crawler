{
  "info": {
    "author": "",
    "author_email": "trhallam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# dataicer - [![latest-version](https://img.shields.io/pypi/v/dataicer?color=006dad&label=pypi_version&logo=Python&logoColor=white)](https://pypi.org/project/dataicer)\n\n<p align=\"left\">\n    <a href=\"https://github.com/trhallam/digirock/actions\"\n       alt=\"Python Tests\">\n        <img src=\"https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/trhallam/0da415ee1bf30b0fc37a2fc4ddafbdee/raw/dataicer_test.json\" />\n    </a>\n    <a href=\"https://github.com/trhallam/digirock/actions\"\n       alt=\"Python Test Coverage\">\n        <img src=\"https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/trhallam/0da415ee1bf30b0fc37a2fc4ddafbdee/raw/dataicer_coverage.json\" />\n    </a>\n    <a href=\"https://github.com/psf/black\"\n       alt=\"black\">\n        <img src=\"https://img.shields.io/badge/code_style-black-000000.svg\" />\n    </a>\n    </a>\n        <a href=\"https://github.com/trhallam/digirock/blob/main/LICENSE\"\n       alt=\"License\">\n        <img src=\"https://img.shields.io/badge/license-MIT-brightgreen\" />\n    </a>\n</p>\n\nIce (save) your data and high level objects for use later.\n\nDo you have complex classes or objects that you want to save to disk and reinstate\nlater? Do you want to use a data structures natural save methods? Do you want it\nto be easy and manageable, capturing key information so you can come back and load\nyour data again later if you need to?\n\n`dataicer` can help you with all this. Build on top of `jsonpickle`, `dataicer`\nallows you to create a central handler (just for a directory at the moment) where\nPython objects can be saved in `json` format. However, while `json` format might\nbe ok for small objects or simple types it is not great for `numpy.ndarray` or\n`pandas.DataFrame` or `xarray.Dataset` complex structures. Complex structures also\ncome with their own way of saving information and `dataicer` leverages this on top\nof `jsonpickle` to create portable and recreatable saved Python state.\n\n## Installation\n\nInstallation using `pip` via the source directory.\n\n```\npip install .\n```\n\nor install from PyPi\n\n```\npip install digirock\n```\n\n## Usage\n\nFirst, create a new `DirectoryHandler` class. This points at the archive folder\nyou want to use.\n\nIf you have speical classes you need to pickle they need a special handler. Dataicer includes handlers for `numpy.ndarray`, `xarray.Dataarray` and `xarray.Dataset` and `pandas.DataFrame`. Handlers are unique to the `DirectoryHandler` instance.\n\n```\nfrom dataicer import DirectoryHandler, get_numpy_handlers, get_pandas_handlers, get_xarray_handlers\n\nhandlers = get_pandas_handlers()\nhandlers.update(get_xarray_handlers())\n\ndh = DirectoryHandler(\"my_archive\", handlers, mode=\"w\")\n```\n\nNumpy arrays can be saved in single column `\"txt\"`, `\"npy\"` binary, or `\"npz\"` compressed.\nXarray structures can only be saved as `\"nc\"` netcdf.\nPandas DataFrames can be saved as `\"h5\"` hdf5 or `\"csv\"` text files.\n\nObjects are then passed to the `ice` function of the `DirectoryHandler` as keyword arguments.\n\n```\nimport numpy as np\nimport xarry as xr\nimport pandas as pd\n\ndh.ice(nparr=np.zeros(10), df=pd.DataFrame(data={\"a\":[1, 2, 3]}), xarrds=xr.tutorial.scatter_example_dataset())\n```\n\n`dataicer` will create the directory `my_archive` and place three files identified via a uuid\nin the directory for each object. There is also a JSON file with the key name containing all\nthe meta information for the object saved and a `meta.json` file which contains information\nabout the system state at the time the archive was created.\n\nThe `deice` command can be used to reload all of the arguments into a dictionary.\n\n```\nstate = dh.deice()\nstate[\"nparr\"]\n\n    array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trhallam/dataicer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataicer",
    "package_url": "https://pypi.org/project/dataicer/",
    "platform": "",
    "project_url": "https://pypi.org/project/dataicer/",
    "project_urls": {
      "Homepage": "https://github.com/trhallam/dataicer"
    },
    "release_url": "https://pypi.org/project/dataicer/0.2.1/",
    "requires_dist": [
      "jsonpickle",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pandas ; extra == 'test'",
      "numpy ; extra == 'test'",
      "xarray ; extra == 'test'",
      "h5netcdf ; extra == 'test'",
      "tables ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "Ice (save) your data and high level objects for use later.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13071150,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e8eed58343b4ea810ac8364db659b1e4454b358807c2db1e1152ddd0016952d",
          "md5": "5fc06693ac86021e6f9bf14bef720ca6",
          "sha256": "b33a9e4af3e46eb317dcd8639d0f27840c61d35f45673a92e58ccd017c3433e2"
        },
        "downloads": -1,
        "filename": "dataicer-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fc06693ac86021e6f9bf14bef720ca6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11996,
        "upload_time": "2022-01-25T14:13:53",
        "upload_time_iso_8601": "2022-01-25T14:13:53.707605Z",
        "url": "https://files.pythonhosted.org/packages/4e/8e/ed58343b4ea810ac8364db659b1e4454b358807c2db1e1152ddd0016952d/dataicer-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8c0e9bca3010b720e02bd7250715d64d3504c92924d4d8e04729bada3abfea1",
          "md5": "c4f477e12413b8c800a71e6789eb79e0",
          "sha256": "bae887ddec59780a6195fe46624141151b0663b53719a6489085f5f0d49b7ce0"
        },
        "downloads": -1,
        "filename": "dataicer-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4f477e12413b8c800a71e6789eb79e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12366,
        "upload_time": "2022-03-03T17:19:33",
        "upload_time_iso_8601": "2022-03-03T17:19:33.241118Z",
        "url": "https://files.pythonhosted.org/packages/f8/c0/e9bca3010b720e02bd7250715d64d3504c92924d4d8e04729bada3abfea1/dataicer-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8c0e9bca3010b720e02bd7250715d64d3504c92924d4d8e04729bada3abfea1",
        "md5": "c4f477e12413b8c800a71e6789eb79e0",
        "sha256": "bae887ddec59780a6195fe46624141151b0663b53719a6489085f5f0d49b7ce0"
      },
      "downloads": -1,
      "filename": "dataicer-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4f477e12413b8c800a71e6789eb79e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12366,
      "upload_time": "2022-03-03T17:19:33",
      "upload_time_iso_8601": "2022-03-03T17:19:33.241118Z",
      "url": "https://files.pythonhosted.org/packages/f8/c0/e9bca3010b720e02bd7250715d64d3504c92924d4d8e04729bada3abfea1/dataicer-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}