{
  "info": {
    "author": "at7h",
    "author_email": "g@at7h.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "====\nhelo\n====\n\n🌎  [`English </README.rst>`_] ∙ [`简体中文 </README.CN.rst>`_]\n\n.. image:: https://img.shields.io/pypi/v/helo.svg\n        :target: https://pypi.python.org/pypi/helo\n\n.. image:: https://travis-ci.org/at7h/helo.svg?branch=master\n        :target: https://travis-ci.org/at7h/helo\n\n.. image:: https://coveralls.io/repos/github/at7h/helo/badge.svg?branch=master\n        :target: https://coveralls.io/github/at7h/helo?branch=master\n\n.. image:: https://app.codacy.com/project/badge/Grade/c68578653eb546488fadddd95f19939c\n        :target: https://www.codacy.com/manual/at7h_/helo?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=at7h/helo&amp;utm_campaign=Badge_Grade\n\n.. image:: https://img.shields.io/pypi/pyversions/helo\n        :target: https://img.shields.io/pypi/pyversions/helo\n        :alt: PyPI - Python Version\n\n**Helo** is a simple and small low-level asynchronous ORM using Python asyncio_.\nIt is very intuitive and easy to use.\n\nHelo can help you easily build expressive common SQL statements in your asynchronous applications.\nYou only need to use friendly object-oriented APIs to manipulate data without caring about the details of SQL statement writing and data processing.\n\n* Requires: Python 3.7+\n* Now only supports MySQL, and the version is 5.7+\n* Integration with web Framework:\n\n  - quart_, see `with quart <#with-quart>`_\n\n* Not supports table relationship\n\n\nQuickstart\n----------\n\nSee the wiki_ page for more information and quickstart_ documentation.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install helo\n\nSee the installation_ wiki page for more options.\n\n\nBasic Examples\n--------------\n\nFirst, you should to import ``helo`` and instantiate a global variable with ``helo.G``\n\n.. code-block:: python\n\n    import helo\n\n    db = helo.G()\n\n\nDefining models is simple:\n\n.. code-block:: python\n\n    class Author(helo.Model):\n        id = helo.BigAuto()\n        name = helo.VarChar(length=45, null=False)\n        email = helo.Email(default='')\n        password = helo.VarChar(length=100, null=False)\n        create_at = helo.Timestamp(default=helo.ON_CREATE)\n\n\n    class Post(helo.Model):\n        id = helo.Auto()\n        title = helo.VarChar(length=100)\n        author = helo.Int(default=0)\n        content = helo.Text(encoding=helo.ENCODING.UTF8MB4)\n        create_at = helo.Timestamp(default=helo.ON_CREATE)\n        update_at = helo.Timestamp(default=helo.ON_UPDATE)\n\n\nShow some basic examples:\n\n.. code-block:: python\n\n    import asyncio\n    import datetime\n\n\n    async def show_case():\n        # Binding the database(creating a connection pool)\n        await db.bind('mysql://user:password@host:port/db')\n        # Creating tables\n        await db.create_tables([Author, Post])\n\n        # Inserting few rows:\n\n        author = Author(name='at7h', password='1111')\n        author_id = await author.save()\n        print(author_id)  # 1\n\n        authors = await Author.get(author_id)\n        print(author.id, author.name)  # 1, at7h\n\n        await Author.update(email='g@gmail.com').where(Author.id == author_id).do()\n\n        ret = await Author.insert(name='pope', password='2222').do()\n        posts = [\n            {'title': 'Python', 'author': 1},\n            {'title': 'Golang', 'author': 2},\n        ]\n        ret = await Post.minsert(posts).do()\n        print(ret)  # (2, 1)\n\n        # Supports expressive and composable queries:\n\n        count = await Author.select().count()\n        print(count) # 2\n\n        # Last gmail author\n        author = await Author.select().where(\n            Author.email.endswith('gmail.com')\n        ).order_by(\n            Author.create_at.desc()\n        ).first()\n        print(author) # [<Author object at 1>]\n\n        # Using `helo.adict`\n        authors = await Author.select(\n            Author.id, Author.name\n        ).where(\n            Author.id < 2\n        ).all(wrap=False)\n        print(author)  # [{'id': 1, 'name': 'at7h'}]\n\n        # Paginate get authors who wrote Python posts this year\n        authors = await Author.select().where(\n            Author.id.in_(\n                Post.select(Post.author).where(\n                    Post.update_at > datetime.datetime(2019, 1, 1),\n                    Post.title.contains('Python')\n                ).order_by(\n                    Post.update_at.desc()\n                )\n            )\n        ).paginate(1, 10)\n        print(authors) # [<Author object at 1>]\n\n        # How many posts each author wrote?\n        author_posts = await Author.select(\n            Author.name, helo.F.COUNT(helo.SQL('1')).as_('posts')\n        ).join(\n            Post, helo.JOINTYPE.LEFT, on=(Author.id == Post.author)\n        ).group_by(\n            Author.name\n        ).rows(100)\n\n    asyncio.run(show_case())\n\n\nWith Quart\n----------\n\nIf you're using quart_ , a minimum application example should be:\n\n.. code-block:: python\n\n    import quart\n    import helo\n\n    app = quart.Quart(__name__)\n    app.config[\"HELO_DATABASE_URL\"] = \"mysql://user:password@127.0.0.1:3306/db\"\n\n    db = helo.G(app)\n\n\n    @app.route('/api/authors')\n    async def authors():\n        await Author.insert(\n            name='at7h', email='g@test.com', password='xxxx'\n        ).do()\n        author_list = await Author.select().all(False)\n        return quart.jsonify(author_list)\n\n\n    app.run()\n\nStart it:\n\n.. code-block:: bash\n\n    $ curl http://127.0.0.1:5000/api/authors\n    [{\"email\":\"g@test.com\",\"id\":1,\"name\":\"at7h\",\"password\":\"xxxx\"}]\n\n👉 See `more examples </examples>`_\n\n\nContributing 👏\n---------------\n\nI hope those who are interested can join in and work together.\n\nAny kind of contribution is expected:\nreport a bug 🐞, give a advice or create a pull request 🙋‍♂️.\n\n\nThanks 🤝\n---------\n\n* Special thanks to projects aiomysql_ and peewee_, helo uses aiomysql_ (as the MySQL connection driver),\n  and referenced peewee_ in program design.\n* Please feel free to ⭐️ this repository if this project helped you 😉 !\n\n.. _wiki: https://github.com/at7h/helo/wiki\n.. _quart: https://github.com/pgjones/quart\n.. _quickstart: https://github.com/at7h/helo/wiki#quickstart\n.. _installation: https://github.com/at7h/helo/wiki#installation\n.. _asyncio: https://docs.python.org/3.7/library/asyncio.html\n.. _aiomysql: https://github.com/aio-libs/aiomysql\n.. _peewee: https://github.com/coleifer/peewee",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/at7h/helo",
    "keywords": "orm asyncio mysql aiomysql pymysql python python3 async/await web",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "helo",
    "package_url": "https://pypi.org/project/helo/",
    "platform": "any",
    "project_url": "https://pypi.org/project/helo/",
    "project_urls": {
      "Homepage": "https://github.com/at7h/helo"
    },
    "release_url": "https://pypi.org/project/helo/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Helo is a simple and small low-level asynchronous ORM using Python asyncio.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7559568,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a846ac00d31ed4e5e4baa4a0deb803154f5c4d5444285d94f69004ed90c836f",
          "md5": "7c3180b582924eb321b8f2591313dc11",
          "sha256": "e819f8b1ee607975fbc58fe9ffae1fae1c7a3c38f9a8df61f21cab9fbdb36af5"
        },
        "downloads": -1,
        "filename": "helo-0.0.6-py3.7.egg",
        "has_sig": false,
        "md5_digest": "7c3180b582924eb321b8f2591313dc11",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.7",
        "size": 150465,
        "upload_time": "2020-06-25T10:21:12",
        "upload_time_iso_8601": "2020-06-25T10:21:12.535476Z",
        "url": "https://files.pythonhosted.org/packages/6a/84/6ac00d31ed4e5e4baa4a0deb803154f5c4d5444285d94f69004ed90c836f/helo-0.0.6-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a846ac00d31ed4e5e4baa4a0deb803154f5c4d5444285d94f69004ed90c836f",
        "md5": "7c3180b582924eb321b8f2591313dc11",
        "sha256": "e819f8b1ee607975fbc58fe9ffae1fae1c7a3c38f9a8df61f21cab9fbdb36af5"
      },
      "downloads": -1,
      "filename": "helo-0.0.6-py3.7.egg",
      "has_sig": false,
      "md5_digest": "7c3180b582924eb321b8f2591313dc11",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": ">=3.7",
      "size": 150465,
      "upload_time": "2020-06-25T10:21:12",
      "upload_time_iso_8601": "2020-06-25T10:21:12.535476Z",
      "url": "https://files.pythonhosted.org/packages/6a/84/6ac00d31ed4e5e4baa4a0deb803154f5c4d5444285d94f69004ed90c836f/helo-0.0.6-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}