{
  "info": {
    "author": "Nils Barlaug",
    "author_email": "nils.barlaug@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# LEMON: Explainable Entity Matching\n\n![Illustration of LEMON](images/LEMON.png)\n\nLEMON is an explainability method that addresses the unique challenges of explaining entity matching models.\n\n\n## Installation\n\n```shell\npip install lemon-explain\n```\nor\n```shell\npip install lemon-explain[storage]  # Save and load explanations\npip install lemon-explain[matchers] # To run matchers in lemon.utils\npip install lemon-explain[all]      # All dependencies\n```\n\n## Usage\n\n```python\nimport lemon\n\n\n# You need a matcher that follows this api:\ndef predict_proba(records_a, records_b, record_id_pairs):\n    ... # predict probabilities / confidence scores\n    return proba\n\nexp = lemon.explain(records_a, records_b, record_id_pairs, predict_proba)\n\n# exp can be visualized in a Jupyter notebook or saved to a json file\nexp.save(\"explanation.json\")\n\n```\n[See the example notebook](https://nbviewer.jupyter.org/github/NilsBarlaug/lemon/blob/main/Example.ipynb)\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/NilsBarlaug/lemon/blob/main/Example.ipynb)\n\n![Example of explanation from LEMON](images/explanation.png)\n\n## Documentation\n\n### lemon.explain()\n\n```\nlemon.explain(\n    records_a: pd.DataFrame,\n    records_b: pd.DataFrame,\n    record_id_pairs: pd.DataFrame,\n    predict_proba: Callable,\n    *,\n    num_features: int = 5,\n    dual_explanation: bool = True,\n    estimate_potential: bool = True,\n    granularity: str = \"counterfactual\",\n    num_samples: int = None,\n    token_representation: str = \"record-bow\",\n    token_patterns: Union[str, List[str], Dict] = \"[^ ]+\",\n    explain_attrs: bool = False,\n    attribution_method: str = \"lime\",\n    show_progress: bool = True,\n    random_state: Union[int, np.random.Generator, None] = 0,\n    return_dict: bool = None,\n) -> Union[MatchingAttributionExplanation, Dict[any, MatchingAttributionExplanation]]:\n```\n\n#### Parameters\n- **records_a** : pd.DataFrame\n  - Records from data source a.\n- **records_b** : pd.DataFrame\n    - Records from data source b.\n- **record_id_pairs** : pd.DataFrame\n    - Which record pairs to explain.\n      Must be a pd.DataFrame with columns `\"a.rid\"` and `\"b.rid\"` that reference the index of `records_a` and `records_b` respectively.\n- **predict_proba** : Callable\n  - Matcher function that predicts the probability of match.\n    Must accept three arguments: `records_a`, `records_b`, and `record_id_pairs`.\n    Should return array-like (list, np.ndarray, pd.Series, ...) of floats between 0 and 1 - the predicted probability that a record pair is a match - for all record pairs described by `record_id_pairs` in the same order.\n- **num_features** : int, default = 5\n  - The number of features to select for the explanation.\n- **dual_explanation** : bool, default = True\n  - Whether to use dual explanations or not.\n- **estimate_potential** : bool, default = True\n  - Whether to estimate potential or not.\n- **granularity** : {\"tokens\", \"attributes\", \"counterfactual\"}, default = \"counterfactual\"\n  - The granularity of the explanation.\n    For more info on `\"counterfactual\"` granularity see our paper.\n- **num_samples** : int, default = None\n  - The number of neighborhood samples to use.\n    If None a heuristic will automatically pick the number of samples.\n- **token_representation** : {\"independent\", \"shared-bow\", \"record-bow\"}, default = \"record-bow\"\n  - Which token representation to use.\n    - independent: All tokens are unique.\n    - shared-bow: Bag-of-words representation shared across both records\n    - record-bow: Bag-of-words representation per individual record\n- **token_patterns** : str, List[str], or Dict, default = `\"[^ ]+\"`\n  - Regex patterns for valid tokens in strings.\n    A single string will be interpreted as a regex pattern and all strings will be tokenized into non-overlapping matches of this pattern.\n    You can specify a list of patterns to tokenize into non-overlapping matches of any pattern.\n    For fine-grained control of how different parts of records are tokenized you can provide a dictionary with keys on the format `(\"a\" or \"b\", attribute_name, \"attr\" or \"val\")` and values that are lists of token regex patterns.\n- **explain_attrs** : bool, default = False\n  - Whether to explain attribution names or not.\n    If True, `predict_proba` should accept the keyword argument `attr_strings` - a list that specifies what strings to use as attributes for each prediction.\n    Each list element is on the format {(\"a\" or \"b\", record_column_name): attr_string}.\n- **attribution_method** : {\"lime\", \"shap\"}, default = False\n  - Which underlying method to use contribution estimation.\n    Note that in order to use shap `estimate_potential` must be False and the shap package must be installed.\n- **show_progress** : bool, default = True\n  - Whether to show progress or not. This is passed to `predict_proba` if it accepts this parameter.\n- **return_dict** : bool, default = None\n  - If True a dictionary of explanations will be returned where the keys are labels from the index of `record_id_pairs`.\n    If False a single explanation will be returned (an exception is raised if `len(record_id_pairs) > 1`).\n    If None it will return a single explanation if `len(record_id_pairs)` and a dictionary otherwise.\n\n#### Returns\n`lemon.MatchingAttributionExplanation` isntance or an `Dict[any, lemon.MatchingAttributionExplanation]`,\ndepending on the input to the `return_dict` parameter.\n\n\n### lemon.MatchingAttributionExplanation\n\n#### Attributes\n- **record_pair** : pd.DataFrame\n- **string_representation** : Dict[Tuple, Union[None, str, TokenizedString]],\n- **attributions** : List[Attribution],\n- **prediction_score** : float\n- **dual** : bool\n- **metadata** : Dict[str, any]\n\n#### Methods\n- **save(path: str = None) -> Optional[Dict]**\n  - Save the explanation to a json file.\n    If path is not specified a json-serializable dictionary will be returned.\n    Requires pyarrow to be installed (`pip install lemon-explain[storage]`).\n- **static load(path: Union[str, Dict]) -> MatchingAttributionExplanation**\n  - Load an explanation from a json file.\n    Instead of a path, one can instead provide a json-serializable dictionary.\n    Requires pyarrow to be installed (`pip install lemon-explain[storage]`).\n\n### lemon.Attribution\n\n#### Attributes\n- **weight**: float\n- **potential**: Optional[float]\n- **positions**: List[Union[Tuple[str, str, str, Optional[int]]]]\n- **name**: Optional[str]\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NilsBarlaug/lemon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lemon-explain",
    "package_url": "https://pypi.org/project/lemon-explain/",
    "platform": null,
    "project_url": "https://pypi.org/project/lemon-explain/",
    "project_urls": {
      "Documentation": "https://github.com/NilsBarlaug/lemon",
      "Homepage": "https://github.com/NilsBarlaug/lemon",
      "Repository": "https://github.com/NilsBarlaug/lemon"
    },
    "release_url": "https://pypi.org/project/lemon-explain/0.1.1/",
    "requires_dist": [
      "pandas (>=1,<2)",
      "scikit-learn (>=1.0,<2.0)",
      "transformers (>=4.10.3,<5.0.0); extra == \"matchers\" or extra == \"all\"",
      "torch (>=1.9.1,<2.0.0); extra == \"matchers\" or extra == \"all\"",
      "py-entitymatching (>=0.4.0,<0.5.0); extra == \"matchers\" or extra == \"all\"",
      "pyarrow (>=5.0.0,<6.0.0); extra == \"storage\" or extra == \"all\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "LEMON: Explainable Entity Matching",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13430234,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "390fce3d5f08700f678bc2bb30e51f733419446696ad3c1485fc3d3527c550ea",
          "md5": "0d35e7a17342884a264b18af7060f197",
          "sha256": "97b6ecaedeafd485131027d9c113e6e09e738eb442b8cc7be6fdb03915e0fe6d"
        },
        "downloads": -1,
        "filename": "lemon_explain-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d35e7a17342884a264b18af7060f197",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 26343,
        "upload_time": "2021-10-01T08:31:06",
        "upload_time_iso_8601": "2021-10-01T08:31:06.398336Z",
        "url": "https://files.pythonhosted.org/packages/39/0f/ce3d5f08700f678bc2bb30e51f733419446696ad3c1485fc3d3527c550ea/lemon_explain-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b6bc0783c38c4f9ec7f9115f3d4d5ec22489c1395238499156407c1b5be7976",
          "md5": "c95ca9ca95bd7b67ec6e24e316e0fe96",
          "sha256": "66f5e58cd04420ca68cd8751ccc3f0b79ba81000181b3ce1f0a7a3f49f09094d"
        },
        "downloads": -1,
        "filename": "lemon-explain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c95ca9ca95bd7b67ec6e24e316e0fe96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25512,
        "upload_time": "2021-10-01T08:31:04",
        "upload_time_iso_8601": "2021-10-01T08:31:04.152693Z",
        "url": "https://files.pythonhosted.org/packages/3b/6b/c0783c38c4f9ec7f9115f3d4d5ec22489c1395238499156407c1b5be7976/lemon-explain-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "631431361a8f784e071aabbfd13515d828f2dab4a64c4a87d3459b3ebd327931",
          "md5": "1f59f2087742998e1f338f2a67eccb0e",
          "sha256": "2cf4a0425b572fd9a71b27670b1bd58aa0a0df21afb6bef1a3382193b96b5775"
        },
        "downloads": -1,
        "filename": "lemon_explain-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f59f2087742998e1f338f2a67eccb0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 26356,
        "upload_time": "2022-04-06T15:40:42",
        "upload_time_iso_8601": "2022-04-06T15:40:42.030547Z",
        "url": "https://files.pythonhosted.org/packages/63/14/31361a8f784e071aabbfd13515d828f2dab4a64c4a87d3459b3ebd327931/lemon_explain-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "926014a8ba32b18d7e8769a3e2b0fb887bf037fde3010a97445bd19943bc6f69",
          "md5": "4ca1c931b15b66cb5ce254426ea5c155",
          "sha256": "d5f61d4b8c1f405f976e99915b1fc14a555e2160ebedc1722e2993cf47407079"
        },
        "downloads": -1,
        "filename": "lemon-explain-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ca1c931b15b66cb5ce254426ea5c155",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25533,
        "upload_time": "2022-04-06T15:40:39",
        "upload_time_iso_8601": "2022-04-06T15:40:39.577966Z",
        "url": "https://files.pythonhosted.org/packages/92/60/14a8ba32b18d7e8769a3e2b0fb887bf037fde3010a97445bd19943bc6f69/lemon-explain-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "631431361a8f784e071aabbfd13515d828f2dab4a64c4a87d3459b3ebd327931",
        "md5": "1f59f2087742998e1f338f2a67eccb0e",
        "sha256": "2cf4a0425b572fd9a71b27670b1bd58aa0a0df21afb6bef1a3382193b96b5775"
      },
      "downloads": -1,
      "filename": "lemon_explain-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1f59f2087742998e1f338f2a67eccb0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 26356,
      "upload_time": "2022-04-06T15:40:42",
      "upload_time_iso_8601": "2022-04-06T15:40:42.030547Z",
      "url": "https://files.pythonhosted.org/packages/63/14/31361a8f784e071aabbfd13515d828f2dab4a64c4a87d3459b3ebd327931/lemon_explain-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "926014a8ba32b18d7e8769a3e2b0fb887bf037fde3010a97445bd19943bc6f69",
        "md5": "4ca1c931b15b66cb5ce254426ea5c155",
        "sha256": "d5f61d4b8c1f405f976e99915b1fc14a555e2160ebedc1722e2993cf47407079"
      },
      "downloads": -1,
      "filename": "lemon-explain-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4ca1c931b15b66cb5ce254426ea5c155",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 25533,
      "upload_time": "2022-04-06T15:40:39",
      "upload_time_iso_8601": "2022-04-06T15:40:39.577966Z",
      "url": "https://files.pythonhosted.org/packages/92/60/14a8ba32b18d7e8769a3e2b0fb887bf037fde3010a97445bd19943bc6f69/lemon-explain-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}