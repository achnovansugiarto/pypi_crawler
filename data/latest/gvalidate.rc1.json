{
  "info": {
    "author": "D Reschner",
    "author_email": "git@simphotonics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Generic Validation For Python\n[![Python](https://github.com/simphotonics/gvalidate/actions/workflows/python.yml/badge.svg)](https://github.com/simphotonics/gvalidate/actions/workflows/python.yml)\n[![docs](https://raw.githubusercontent.com/simphotonics/gvalidate/main/images/docs-badge.svg)](https://gvalidate.simphotonics.com)\n\nChecking the input arguments of a function is a common task.\nIt allows the software designer to stop the flow of execution if\nan error occured and to display information detailing the error.\n\nPython provides *decorators* that can be used to add extra\nfunctionality to a function. The package [`gvalidate`][gvalidate]\nprovides the function [`validate`][validate] that\ncan be used to easily create argument validating decorators\nwhile avoiding most of the\nrequired boilerplate.\n\n## Installation\n\nTo install the package [`gvalidate`][gvalidate] use the command:\n```Console\n$ pip install gvalidate\n```\n\n## Usage\n\nThis section demonstrates how to use the function [`validate`][validate]\nto define validation decorators.\n\n### 1. Generic Validation Decorators\n\nThe example below shows how to define a decorator that will validate\nthe arguments of the decorated function and\nraise an exception of type `ValueError` if any argument does not pass validation.\n\nThe most important ingredient is the function provided as `validator`.\nThis function must accept one argument (the one\nbeing validated) and return a boolean.\nIf it returns `False` validation fails.\nThe function [`validate`][validate] is generic in the sense that we\ncan pass any function with the required signature as a validator.\n\nIn the example shown below all arguments of the function `box_dimensions`\nare validated using a lambda function.\n``` python\nfrom gvalidate.generic_validators import validate\n\n@validate(validator = lambda x: x > 0,\n          message='Dimensions must be positive.' # Optional, default: ''\n          error_type=ValueError,                 # Optional, default: ValueError\n          enable_warnings=True,                  # Optional, default: True\n          )\ndef box_dimensions(length, height, width):\n  pass\n```\n\nTo validate only `certain` function arguments these must\nbe passed as a tuple via the parameter `argument_names`.\nIn the example below only the arguments `length` and `height` are\nvalidated.\n``` python\nfrom gvalidate.generic_validators import validate\n\n@validate(validator = lambda x: x > 0,\n          argument_names = ('length', 'height'),\n          message='Dimensions must be positive.' # Optional, default: ''\n          error_type=ValueError,                 # Optional, default: ValueError\n          enable_warnings=True,                  # Optional, default: True\n          )\ndef box_dimensions_2(length, height, width):\n  pass\n```\nNote: To validate a *single* argument one a string containing the argument name may\nspecified via the parameter `argument_names`.\n\nCalling the function `box_dimensions` with negative arguments\ncauses an exception to be raised:\n``` python\nbox_dimensions(-1, 10, 20)\n# ... stack trace will be printed here\nValueError: ('Invalid argument in function box_dimensions: length = -10.'\n             'Dimensions must be positive.')\n\n```\nThe argument `message` passed to the decorator is appended to the\nmessage attached to the exception. In the example above `message` was:\n'Dimensions must be positive'.\n\n### 2. Concrete Validation Decorators\n\nIn the example above, we defined a validating decorator on the spot\nusing the generic method [`validate`][validate].\nTo reuse a validating decorator one may define a separate function.\n\nIn the example below the decorator `validate_callable` checks if the\nspecified arguments are callable.\n```Python\ndef validate_callable(argument_names: tuple = (), enable_warnings=True):\n    '''\n    Raises an exception if any argument in `argument_names` is not callable.\n    '''\n    return validate(\n        validator=lambda input: callable(input),\n        argument_names = (),\n        message='Must be callable.',\n        enable_warnings=enable_warnings,\n        )\n\n# Using the decorator defined above.\n@validate_callable('callback')\ndef function_with_a_callback(id: int, callback: callable):\n    pass\n\n```\n\nReady made validation decorators can be found in the modules:\n\n- `function_validators`\n- `numerical_validators`\n- `string_validators`\n\n### 3. Disabling Warnings\n\nAny invalid argument name listed in the tuple `argument_names`\nwill be silently ignored if `enable_warnings` is explicitly set to `False`.\nConsider the function below:\n``` python\nfrom gvalidate.generic_validators import validate\n\n@validate(argument_names = ('aeg',),\n             validator = lambda x: x > 0,\n             message='Age must be positive.',\n             enable_warnings=False\n             )\ndef person_data(age, name):\n  pass\n```\nCalling the function with the arguments: `person_data(age = -10, name = 'Anna')`\nwill *pass* validation since the argument name `aeg` specified\nin the decorator does not exist.\n\n## Nested Validators\n\nSeveral decorators performing validation\nmay be applied to the same function.\nIn that case, validation starts with the top-most decorator.\nStacking decorators allows fine grained validation.\n\nIn the example below, we check that `length` is positive and `callback` is callable:\n```Python\n@gv.validate_positive('length')\n@gv.validate_callable('callback')\ndef g(length, callback):\n    '''\n    Used to test nested validation decorators.\n    '''\n    pass\n```\n\nNote: Stacked decorators are in fact nested decorators. To allow\naccess to the signature of the decorated\nfunction from within nested decorators\n[`functools.wraps`](https://docs.python.org/3/library/functools.html#functools.wraps)\nwas used. For more details check out the implementation of [`validate`][validate].\n\n## Testing\n\nTo run the tests clone the project source code available at\n[`gvalidate`](https://github.com/simphotonics/gvalidate)\nusing the command:\n```\n$ git clone https://github.com/simphotonics/gvalidate.git\n```\nThe command above will create a directory called `gvalidate`.\nIt is recommended to create a separate environment before proceeding.\n\nThen navigate to the directory `gvalidate` and use the commands:\n```Console\n$ make init\n$ make test\n```\nThe first command will install [`pytest`][pytest] and the local package\n`gvalidate`. The second command\nwill run the unit tests located in the directory `tests`.\n\n## Contributing\n\nContributions are welcome. To add validators that are useful to you\nor other users please create a pull request or request to be added\nas a collaborator.\n\nThe following steps should be considered when creating a pull request:\n\n1. Add validators to existing modules for example `string_validators` or\n   alternatively create a new module.\n\n2. Document the added functions. Add a doc entry to the top of the module.\n   Add a doc entry to `__init__.py` if a new module was added.\n   Consider adding documentation to `README.md`.\n\n3. Add tests to unit test the added functions.\n\n\n## Features and bugs\n\nPlease file feature requests and bugs at the [issue tracker].\n\n\n[issue tracker]: https://github.com/simphotonics/gvalidate/issues\n\n[gvalidate]: https://github.com/simphotonics/gvalidate\n\n[pytest]: https://pypi.org/project/pytest/\n\n[validate]: https://gvalidate.simphotonics.com/reference/gvalidate/generic/#validate\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simphotonics/gvalidate",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gvalidate",
    "package_url": "https://pypi.org/project/gvalidate/",
    "platform": "",
    "project_url": "https://pypi.org/project/gvalidate/",
    "project_urls": {
      "Bug Tracker": "https://github.com/simphotonics/gvalidate/issues",
      "Homepage": "https://github.com/simphotonics/gvalidate"
    },
    "release_url": "https://pypi.org/project/gvalidate/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Generic validation decorators.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12210890,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5df019c0432bc3b11efa5c515bf6f6756bc5aba8945936d50d80a66aae55ff65",
          "md5": "0caca2e534986e1710a9b46a4943d3e0",
          "sha256": "1ddfcfae93fd819b3c9f8e3ac1d09b908891de47fef3cf4ef606947369b93a29"
        },
        "downloads": -1,
        "filename": "gvalidate-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0caca2e534986e1710a9b46a4943d3e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8716,
        "upload_time": "2021-12-04T21:42:06",
        "upload_time_iso_8601": "2021-12-04T21:42:06.546320Z",
        "url": "https://files.pythonhosted.org/packages/5d/f0/19c0432bc3b11efa5c515bf6f6756bc5aba8945936d50d80a66aae55ff65/gvalidate-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ef0c2ba9b87a94af41950bc1a86e2a2d209295658535d7a965578fa4dc6ea37",
          "md5": "c8dc9d054bc4ca3abae9e0b81d193bba",
          "sha256": "bf13306627952c2d99dec67a35fcf247fdbd3180d3d75dd76e9f2fb17be849cd"
        },
        "downloads": -1,
        "filename": "gvalidate-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c8dc9d054bc4ca3abae9e0b81d193bba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9833,
        "upload_time": "2021-12-04T21:42:07",
        "upload_time_iso_8601": "2021-12-04T21:42:07.980585Z",
        "url": "https://files.pythonhosted.org/packages/7e/f0/c2ba9b87a94af41950bc1a86e2a2d209295658535d7a965578fa4dc6ea37/gvalidate-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5df019c0432bc3b11efa5c515bf6f6756bc5aba8945936d50d80a66aae55ff65",
        "md5": "0caca2e534986e1710a9b46a4943d3e0",
        "sha256": "1ddfcfae93fd819b3c9f8e3ac1d09b908891de47fef3cf4ef606947369b93a29"
      },
      "downloads": -1,
      "filename": "gvalidate-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0caca2e534986e1710a9b46a4943d3e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8716,
      "upload_time": "2021-12-04T21:42:06",
      "upload_time_iso_8601": "2021-12-04T21:42:06.546320Z",
      "url": "https://files.pythonhosted.org/packages/5d/f0/19c0432bc3b11efa5c515bf6f6756bc5aba8945936d50d80a66aae55ff65/gvalidate-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ef0c2ba9b87a94af41950bc1a86e2a2d209295658535d7a965578fa4dc6ea37",
        "md5": "c8dc9d054bc4ca3abae9e0b81d193bba",
        "sha256": "bf13306627952c2d99dec67a35fcf247fdbd3180d3d75dd76e9f2fb17be849cd"
      },
      "downloads": -1,
      "filename": "gvalidate-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c8dc9d054bc4ca3abae9e0b81d193bba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9833,
      "upload_time": "2021-12-04T21:42:07",
      "upload_time_iso_8601": "2021-12-04T21:42:07.980585Z",
      "url": "https://files.pythonhosted.org/packages/7e/f0/c2ba9b87a94af41950bc1a86e2a2d209295658535d7a965578fa4dc6ea37/gvalidate-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}