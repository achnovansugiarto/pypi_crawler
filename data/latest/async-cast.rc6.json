{
  "info": {
    "author": "Joaquin Duo",
    "author_email": "joaduo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "async_cast\n==========\n\n|Codeship Status for joaduo/async_cast|\n\nCast async function to blocking and viceversa. (works on python 3.7 and\nup) Also run functions in threads, whether async or blocking.\n\nWhy ``async_cast``?\n-------------------\n\nI found the current ``asyncio`` tools frustrating when migrating from\nblocking code. If you want to profit IO operations to *“run something\nelse”* you need to rewrite all code to use asyncio. When you start form\nscratch that’s acceptable, but not with legacy code.\n\nSo with this small self-contained library you can easily convert legacy\ncode into async code. The best way is running several blocking function\nin different threads. But **be aware** that threads also bring race\nconditions, so make sure concurrent functions are thread-safe.\n\nInstalling\n----------\n\nhttps://pypi.org/project/async-cast/\n\n::\n\n   pip install -U async-cast\n\nThe package is a single module that you can easily audit.\n\nDecorator: casting ``async`` function to a blocking function\n------------------------------------------------------------\n\n.. code:: python\n\n   from async_cast import also_blocking\n\n   @also_blocking\n   async def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   if __name__ == '__main__':\n       print(request_url.blocking('https://github.com'))\n\nDecorator: casting a blocking function to ``async`` function\n------------------------------------------------------------\n\n.. code:: python\n\n   from async_cast import also_async\n   import asyncio\n\n   @also_async\n   def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   async def main():\n       print(await request_url.async_('https://github.com'))\n\n   if __name__ == '__main__':\n       asyncio.run(main())\n\nRunning tasks in a ThreadPool\n-----------------------------\n\nI wrapped existing ``ThreadPoolExecutor`` to make it easier to run tasks\ninside it. Tasks are automatically registered in the pool declared by\nthe ``with thread_pool(...):`` context.\n\nRunning ``async`` function in threadpool\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from async_cast import also_blocking, thread_pool\n   import asyncio\n\n   @also_blocking\n   async def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   async def main():\n       with thread_pool(3):\n           t1 = request_url.async_thread('https://github.com')\n           t2 = request_url.async_thread('https://google.com')\n           t3 = request_url.async_thread('https://facebook.com')\n           results = await asyncio.gather(t1,t2,t3)\n           print(results)\n\n   if __name__ == '__main__':\n       asyncio.run(main())\n\nRunning blocking function in threadpool\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from async_cast import also_async, thread_pool\n   import asyncio\n\n   @also_async\n   def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   async def main():\n       with thread_pool(3):\n           t1 = request_url.async_thread('https://github.com')\n           t2 = request_url.async_thread('https://google.com')\n           t3 = request_url.async_thread('https://facebook.com')\n           results = await asyncio.gather(t1,t2,t3)\n           print(results)\n\n   if __name__ == '__main__':\n       asyncio.run(main())\n\nNon decorators alternatives\n---------------------------\n\nCasting ``async`` function to a blocking function with ``to_blocking``\n----------------------------------------------------------------------\n\n.. code:: python\n\n   from async_cast import to_blocking\n\n   async def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   if __name__ == '__main__':\n       print(to_blocking(request_url)('https://github.com'))\n\nCasting a blocking function to ``async`` function with ``to_async``\n-------------------------------------------------------------------\n\n.. code:: python\n\n   from async_cast import to_async\n   import asyncio\n\n   def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   async def main():\n       print(await to_async(request_url)('https://github.com'))\n\n   if __name__ == '__main__':\n       asyncio.run(main())\n\nRunning ``async`` or blocking function in threadpool with ``to_async_thread``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from async_cast import to_async_thread, thread_pool\n   import asyncio\n\n   async def request_url(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   def request_url_blocking(url, **kwargs):\n       print(f'Requesting {url} with options {kwargs}')\n       ...\n       result = f'<h1>{url}</h1>'\n       return result\n\n   async def main():\n       with thread_pool(3):\n           t1 = to_async_thread(request_url)('https://github.com')\n           t2 = to_async_thread(request_url)('https://google.com')\n           t3 = to_async_thread(request_url)('https://facebook.com')\n           t4 = to_async_thread(request_url_blocking)('https://duckduckgo.com')\n           results = await asyncio.gather(t1,t2,t3,t4)\n           print(results)\n\n   if __name__ == '__main__':\n       asyncio.run(main())\n\n.. |Codeship Status for joaduo/async_cast| image:: https://app.codeship.com/projects/30c11a6e-2132-4298-8dbb-2b01e8cf3bac/status?branch=main\n   :target: https://app.codeship.com/projects/450075",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joaduo/async_cast",
    "keywords": "asyncio,async,sync,blocking,casting,threads",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-cast",
    "package_url": "https://pypi.org/project/async-cast/",
    "platform": "",
    "project_url": "https://pypi.org/project/async-cast/",
    "project_urls": {
      "Homepage": "https://github.com/joaduo/async_cast"
    },
    "release_url": "https://pypi.org/project/async-cast/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cast an async function to blocking function and viceversa. Also use threads pools if needed.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11116552,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7844609d517780f5d4a9f2b10acb56ea91bf2ee53bc1a1880808c1b2b181c7e",
          "md5": "c6a5a14f222e92b20187ce721f188a32",
          "sha256": "10f2997d89b05b3026e500770235891430c2a3588ded37763cd5cfdf522cbc31"
        },
        "downloads": -1,
        "filename": "async_cast-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6a5a14f222e92b20187ce721f188a32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2125,
        "upload_time": "2021-07-13T00:08:19",
        "upload_time_iso_8601": "2021-07-13T00:08:19.092925Z",
        "url": "https://files.pythonhosted.org/packages/c7/84/4609d517780f5d4a9f2b10acb56ea91bf2ee53bc1a1880808c1b2b181c7e/async_cast-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ce17678beb64d799385ec72aa47f70503bad79bed1653f66f38d34c92529041",
          "md5": "f5e39073da1a4c818fd4cfa9a73125c0",
          "sha256": "4cfd66dd30687eb2d28173ec853fb3aa91fe05da0df8454c599e5b1dd328c2de"
        },
        "downloads": -1,
        "filename": "async_cast-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f5e39073da1a4c818fd4cfa9a73125c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3013,
        "upload_time": "2021-08-01T22:32:00",
        "upload_time_iso_8601": "2021-08-01T22:32:00.129065Z",
        "url": "https://files.pythonhosted.org/packages/6c/e1/7678beb64d799385ec72aa47f70503bad79bed1653f66f38d34c92529041/async_cast-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c79a071664cff0b140863b3613570408c237012464815aaf55ee973b25a966a",
          "md5": "77db0475d6f75fb3477dd3edae221b15",
          "sha256": "84d1ecc384fb5cb5a74e2ef0a10eaff4eda2a42ea334ba1eec845795c2287e1d"
        },
        "downloads": -1,
        "filename": "async_cast-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77db0475d6f75fb3477dd3edae221b15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3258,
        "upload_time": "2021-08-06T22:40:16",
        "upload_time_iso_8601": "2021-08-06T22:40:16.513106Z",
        "url": "https://files.pythonhosted.org/packages/7c/79/a071664cff0b140863b3613570408c237012464815aaf55ee973b25a966a/async_cast-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "627014b554c36b02a1294fa81b1bd98ffcd2d38efe38cd701caf9542e6ee88aa",
          "md5": "ef05309f4d9ee2dc8837a5968da223c2",
          "sha256": "ddd8eeea5a6866c8ce964f22a5ba571bc9aeb6ee7fe7a77fcd3e111d4e6a97e8"
        },
        "downloads": -1,
        "filename": "async_cast-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef05309f4d9ee2dc8837a5968da223c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3427,
        "upload_time": "2021-08-06T22:50:19",
        "upload_time_iso_8601": "2021-08-06T22:50:19.742780Z",
        "url": "https://files.pythonhosted.org/packages/62/70/14b554c36b02a1294fa81b1bd98ffcd2d38efe38cd701caf9542e6ee88aa/async_cast-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14386d6e55c64206c46cb8674cdef80096fec2e0607907045e34f96e6613329f",
          "md5": "d4e8dac31aee9ed6ce9de26b954a06e2",
          "sha256": "e17814d81311f4965f9c23ed7a01c6310dca6714bd36cae476cc420d4711c1c7"
        },
        "downloads": -1,
        "filename": "async_cast-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4e8dac31aee9ed6ce9de26b954a06e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3423,
        "upload_time": "2021-08-06T22:55:52",
        "upload_time_iso_8601": "2021-08-06T22:55:52.122339Z",
        "url": "https://files.pythonhosted.org/packages/14/38/6d6e55c64206c46cb8674cdef80096fec2e0607907045e34f96e6613329f/async_cast-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e66d86c0fe3df059b483ced45fc1422ff2a658584fb8de6ebed00aa5e2901ed2",
          "md5": "445948751ec6139ac86d87ccfd424503",
          "sha256": "7ca2125fa6d7d27acc941b5ef47d68aee4de95805f6e814340d718dc195698de"
        },
        "downloads": -1,
        "filename": "async_cast-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "445948751ec6139ac86d87ccfd424503",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4046,
        "upload_time": "2021-08-07T06:48:29",
        "upload_time_iso_8601": "2021-08-07T06:48:29.605727Z",
        "url": "https://files.pythonhosted.org/packages/e6/6d/86c0fe3df059b483ced45fc1422ff2a658584fb8de6ebed00aa5e2901ed2/async_cast-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e66d86c0fe3df059b483ced45fc1422ff2a658584fb8de6ebed00aa5e2901ed2",
        "md5": "445948751ec6139ac86d87ccfd424503",
        "sha256": "7ca2125fa6d7d27acc941b5ef47d68aee4de95805f6e814340d718dc195698de"
      },
      "downloads": -1,
      "filename": "async_cast-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "445948751ec6139ac86d87ccfd424503",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4046,
      "upload_time": "2021-08-07T06:48:29",
      "upload_time_iso_8601": "2021-08-07T06:48:29.605727Z",
      "url": "https://files.pythonhosted.org/packages/e6/6d/86c0fe3df059b483ced45fc1422ff2a658584fb8de6ebed00aa5e2901ed2/async_cast-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}