{
  "info": {
    "author": "Eric Hutton",
    "author_email": "mcflugen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "sequence: Sequence-stratigraphic modeling with Python\n=====================================================\n\n.. image:: https://github.com/sequence-dev/sequence/workflows/Build/Test%20CI/badge.svg\n\n.. image:: https://github.com/sequence-dev/sequence/workflows/Flake8/badge.svg\n\n.. image:: https://github.com/sequence-dev/sequence/workflows/Black/badge.svg\n\n.. image:: https://github.com/sequence-dev/sequence/workflows/Documentation/badge.svg\n\n.. image:: https://readthedocs.org/projects/sequence/badge/?version=develop\n  :target: https://sequence.readthedocs.io/en/develop/?badge=develop\n  :alt: Documentation Status\n\n\nAbout\n-----\n\n*Sequence* is a modular 2D (i.e., profile) sequence stratigraphic model\nthat is written in Python and implemented within the Landlab framework.\nSequence represents time-averaged fluvial and marine sediment transport\nvia differential equations. The modular code includes components to deal\nwith sea level changes, sediment compaction, local or flexural isostasy,\nand tectonic subsidence and uplift.\n\nRequirements\n------------\n\n*Sequence* requires Python 3.\n\nApart from Python, *Sequence* has a number of other requirements, all of which\ncan be obtained through either *pip* or *conda*, that will be automatically\ninstalled when you install *Sequence*.\n\nTo see a full listing of the requirements, have a look at the project's\n*requirements.txt* file.\n\nIf you are a developer of *Sequence* you will also want to install\nadditional dependencies for running *Sequence*'s tests to make sure\nthat things are working as they should. These dependencies are listed\nin *requirements-testing.txt*.\n\nInstallation\n------------\n\nTo install *Sequence*, first create a new environment in\nwhich *Sequence* will be installed. This, although not necessary, will\nisolate the installation so that there won't be conflicts with your\nbase *Python* installation. This can be done with *conda* as::\n\n  $ conda create -n sequence python=3\n  $ conda activate sequence\n\nStable Release\n``````````````\n\n*Sequence*, and its dependencies, can be installed either with *pip*\nor *conda*. Using *pip*::\n\n    $ pip install sequence-model\n\nUsing *conda*::\n\n    $ conda install sequence-model -c conda-forge\n\nFrom Source\n```````````\n\nAfter downloading the *Sequence* source code, run the following from\n*Sequence*'s top-level folder (the one that contains *setup.py*) to\ninstall *Sequence* into the current environment::\n\n  $ pip install -e .\n\n\nUsage\n-----\n\n*Sequence* is both a command-line program and a Python package that provides an\napplication programming interface.\n\nThe command-line program, *sequence*, provides several sub-commands for setting\nup *sequence* input files, running *sequence*, and plotting output (you can use\nthe ``--help`` option to get help for the available subcommands). The four\nsubcommands are the following:\n\n* `generate`: Generate example input files.\n* `setup`: Setup a folder of input files for a simulation.\n* `run`: Run a simulation.\n* `plot`: Plot a sequence output file.\n\nExample\n```````\n\nThe following commands create an example set of input files, runs *sesquence*,\nand then plots the output.\n\n.. code:: bash\n\n  $ mkdir example && cd example\n  $ sequence setup\n  $ sequence run\n  $ sequence plot\n\n.. image:: https://github.com/sequence-dev/sequence/raw/develop/docs/_static/sequence.png\n\nThe above can also be run through Python,\n\n.. code:: python\n\n  >>> from sequence import Sequence, SequenceModelGrid\n  >>> grid = SequenceModelGrid(100, spacing=1000.0)\n  >>> grid.at_node[\"topographic__elevation\"] = -0.001 * grid.x_of_node + 20.0\n  \n  >>> sequence = Sequence()\n  >>> sequence.run()\n  >>> sequence.plot()\n\nThe ``Sequence`` class provides functionality not available to the command-line\nprogram. For example, you are able to run a simulation through time while dynamically\nchanging parameters.\n\n  >>> from sequence import Sequence, SequenceModelGrid  \n  >>> grid = SequenceModelGrid(100, spacing=1000.0)\n  >>> grid.at_node[\"topographic__elevation\"] = -0.001 * grid.x_of_node + 20.0\n  \n  >>> process = default_process_queue()\n  >>> sequence = Sequence(\n  ...   grid,\n  ...   components=[\n  ...     process[\"sea_level\"],\n  ...     process[\"compaction\"],\n  ...     process[\"submarine_diffusion\"],\n  ...     process[\"fluvial\"],\n  ...     process[\"flexure\"],\n  ...     process[\"shoreline\"],\n  ...   ]\n  ... )  \n  \n  >>> sequence.run(until=300000.0, dt=100.0)\n  >>> sequence.submarine_diffusion.sediment_load *= 2.0\n  >>> sequence.run(until=600000.0, dt=100.0)\n  >>> sequence.plot()\n\n\nInput Files\n-----------\n\nSequence Parameter File\n```````````````````````\n\nThe main *Sequence* input file is a *toml*-formatted (or, optionally, *yaml*)\ntext file that lists parameter values for the various components. Running\nthe following will print a sample *Sequence* parameter file::\n\n  $ sequence generate sequence.toml\n\nFollowing is the generated input file,\n\n.. code:: toml\n\n    [sequence]\n    _time = 0.0\n\n    [sequence.grid]\n    shape = [3, 100]\n    xy_spacing = 100.0\n    xy_of_lower_left = [0.0, 0.0]\n\n    [sequence.grid.bc]\n    top = \"closed\"\n    bottom = \"closed\"\n\n    [sequence.clock]\n    start = 0.0\n    stop = 20000.0\n    step = 100.0\n\n    [sequence.output]\n    interval = 10\n    filepath = \"sequence.nc\"\n    clobber = true\n    rows = [1]\n    fields = [\"sediment_deposit__thickness\"]\n\n    [sequence.submarine_diffusion]\n    plain_slope = 0.0008\n    wave_base = 60.0\n    shoreface_height = 15.0\n    alpha = 0.0005\n    shelf_slope = 0.001\n    sediment_load = 3.0\n    load_sealevel = 0.0\n    basin_width = 500000.0\n\n    [sequence.sea_level]\n    amplitude = 10.0\n    wave_length = 1000.0\n    phase = 0.0\n    linear = 0.0\n\n    [sequence.subsidence]\n    filepath = \"subsidence.csv\"\n\n    [sequence.flexure]\n    method = \"flexure\"\n    rho_mantle = 3300.0\n    isostasytime = 0\n\n    [sequence.sediments]\n    layers = 2\n    sand = 1.0\n    mud = 0.006\n    sand_density = 2650.0\n    mud_density = 2720.0\n    sand_frac = 0.5\n    hemipelagic = 0.0\n\n    [sequence.bathymetry]\n    filepath = \"bathymetry.csv\"\n    kind = \"linear\"\n\n    [sequence.compaction]\n    c = 5e-08\n    porosity_max = 0.5\n    porosity_min = 0.01\n    rho_grain = 2650.0\n    rho_void = 1000.0\n\n\n.. _The grid section:\n\n\nThe grid section\n~~~~~~~~~~~~~~~~\n\nYou define the grid on which *Sequence* will run in the `sequence.grid` section.\nAn example gid section looks like,\n\n.. code::\n\n    [sequence.grid]\n    shape = [3, 500]\n    xy_spacing = 100.0\n    xy_of_lower_left = [0.0, 0.0]\n\nIn this case we have a grid that, if we are looking down on it from above, consists\nof three rows and 500 columns (the *shape* parameter). *Sequence* is a 1D model and\nuses only the middle row of nodes so you will never want to change the number of\nrows from a value of 3. You can play with the number of columns thoughâ€”this is the\nnumber of stacks of sediment you have along your profile.\n\nThe *xy_spacing* parameter is the width of each of your sediment stacks in meters.\nThus, the length of you domain is the product of the number of columns with\nthe spacing (that is, for this example, 500 * 100 m or 50 km).\n\nThe *xy_of_lower_left* parameter gives the position of the lower-left node of\nyou grid. In *Sequence*, this parameter is not used.\n\nThe output section\n~~~~~~~~~~~~~~~~~~\n\nYou can define when and what *Sequence* will save to a NetCDF file while it is running.\nHere is an example output section,\n\n.. code::\n\n    [sequence.output]\n    interval = 10\n    filepath = \"sequence.nc\"\n    clobber = true\n    rows = [1]\n    fields = [\"sediment_deposit__thickness\"]\n\nThe *interval* parameter is the interval, in time steps (**not** years), that\n*Sequence* will write data to a file. Other parameters, which you will\nprobably not want to change, are:\n\n* *filepath*: the name of the output NetCDF file to which output is written.\n* *clobber*: what *Sequence* should do if the output file exists. If `true`,\n  an existing file will be overwritten, otherwise *Sequence* will raise an\n  error.\n* *rows*: as described in `The grid section`_ a *Sequence* grid consists\n  of three rows. The *rows* parameter specifies which of these rows to\n  write to the output file.\n* *fields*: a list of names of quantities you would like *Sequence* to include\n  in the NetCDF file. *Sequence* keeps track of many quantities, most of which\n  you probably aren't interested in and so this parameter limits the number\n  of quantities written as output.\n\n.. _Time-varying parameters:\n\nTime-varying parameters\n~~~~~~~~~~~~~~~~~~~~~~~\n\nSome parameters in the *sequence.toml* are able to vary with time. In the above\nexample all of the variables are help constant. To have a parameter change\nat some time during the model simulation, you can add a new section, which will\nbe read at the given time. For example, if the following section is added\nafter the section from the previous example,\n\n.. code:: toml\n\n    [sequence]\n    _time = 100\n\n    [sequence.subsidence]\n    filepath = \"subsidence-100.csv\"\n\nat time 100, a new subsidence file will be read and used until the end of the\nsimulation.\n\n\nBathymetry File\n```````````````\n\nThe *Sequence* bathymetry file defines initial sea-floor elevations in\na two-column CSV file. A sample bathymetry file can be obtained with::\n\n  $ sequence generate bathymetry.csv\n  # X [m], Elevation [m]\n  0.0,20.0\n  100000.0,-80.0\n\nElevations are linearly interpolated between the points given in the file\nas necessary.\n\nSea-Level File\n``````````````\n\nThe *Sequence* sea-level file defines sea-level elevations with simulation\ntime. It consists of two (comma separated) columns of time and sea-level\nelevation, respectively. For a sample sea-level file::\n\n  $ sequence generate sealevel.csv\n  # Time [y], Sea-Level Elevation [m]\n  0.0,0.0\n  200000.0,-10.0\n\nSubsidence File\n```````````````\n\nThe *Sequence* subsidence file defines the subsidence rates of points along\nthe profile. It consists of two (comma separated) columns that give position\nalong the profile and subsidence rate, respectively. For a sample subsidence\nfile::\n\n  $ sequence generate subsidence.csv\n  # X [y], Subsidence Rate [m / y]\n  0.0,0.0\n  30000.0,0.0\n  35000.0,0.0\n  50000.0,0.0\n  100000.0,0.0\n\n.. note::\n\n  Positive rates represent **uplift**.\n\nIf you would like your subsidence profile to change with time, see the\nsection above, `Time-varying parameters`_.\n\nOutput File\n-----------\n\nThe output file of *Sequence* is a netcdf-formatted file that records the\ngenerated stratigraphy. Output parameters are controlled through the\n*output* section of the parameter file.\n\nExamples\n--------\n\nTo run a simulation using the sample input files described above, you first\nneed to create a set of sample files::\n\n  $ mkdir example\n  $ cd example && sequence setup\n  example\n\nYou can now run the simulation (from within the *example* folder)::\n\n  $ sequence run\n\nPlotting output\n---------------\n\nThe *Sequence* program provides a command-line utility for generating a quick\nplot of *Sequence* output from a NetCDF file named *sequence.nc*. As an\nexample,\n\n.. code::\n\n    $ sequence plot\n\nIf you would like to change some aspects of the generated plot, you can add\na *sequence.plot* section to your *sequence.toml* file. For example, here\nis a *sequence.plot* section,\n\n.. code:: toml\n\n    [sequence.plot]\n    color_water = [0.8, 1.0, 1.0]\n    color_land = [0.8, 1.0, 0.8]\n    color_shoreface = [0.8, 0.8, 0.0]\n    color_shelf = [0.75, 0.5, 0.5]\n    layer_line_color = \"k\"\n    layer_line_width = 0.5\n    title = \"{filename}\"\n    x_label = \"Distance (m)\"\n    y_label = \"Elevation (m)\"\n    legend_location = \"upper right\"\n    layer_start=0\n    layer_stop = -1\n    n_layers = 5\n\nThe *color_* parameters give colors of various pieces of the plot as\nfractions of [*red*, *green*, *blue*]. Some other parameters, which may\nnot be obvious,\n\n* *layer_start*: the first layer to plot\n* *layer_stop*: the last layer to plot (a value of -1 means stop at the last layer)\n* *n_layers*: the number of layers to plot.\n\n\nCredits\n=======\n\nDevelopment Lead\n----------------\n\n* Mike Steckler\n* Eric Hutton (@mcflugen)\n\nContributors\n------------\n\nNone yet. Why not be the first?\n\nChangelog for Sequence\n======================\n\n.. towncrier release notes start\n\n0.5.1 (2022-06-30)\n------------------\n\nBug Fixes\n`````````\n\n- Fixed a bug where x_of_shore and x_of_shelf_edge were being incorrectly\n  recorded (but correctly calculated). (`#57 <https://github.com/sequence-dev/sequence/issues/57>`_)\n\n\n0.5.0 (2022-06-29)\n------------------\n\nNew Tutorial Notebooks\n``````````````````````\n\n- Added a tutorial notebook that demonstrates the use of the new ``Sequence``\n  class and how one can build, run and dynamically modify a new *sequence*\n  model from a series of process components. (`#51 <https://github.com/sequence-dev/sequence/issues/51>`_)\n\n\nNew Features\n````````````\n\n- Added several new setters to ``SedimentFlexure`` that allows a user to\n  dynamically change paramters while the model is running. These include:\n  sediment densities (sand and mud), and water density. (`#45 <https://github.com/sequence-dev/sequence/issues/45>`_)\n- Added *water_density* as an input parameter to ``SedimentFlexure``. (`#45 <https://github.com/sequence-dev/sequence/issues/45>`_)\n- Added a new function, ``plot_grid``, that plots the output of a *sequence*\n  model from Python. This serves as the programmatic equivalent of the\n  ``sequence plot`` command-line program. (`#50 <https://github.com/sequence-dev/sequence/issues/50>`_)\n- Added a new module ``sequence.processes`` that holds all processes that can\n  be used to construct a new *sequence* model. (`#50 <https://github.com/sequence-dev/sequence/issues/50>`_)\n- Added ``Sequence`` class that allows a user to construct and run *sequence*\n  models within a Python environment and dynamically change input variables. (`#50 <https://github.com/sequence-dev/sequence/issues/50>`_)\n- Added a ``SequenceModelGrid`` class, based on a *landlab* ``RasterModelGrid``,\n  that creates a grid that can be used for creating new *sequence* models. (`#50 <https://github.com/sequence-dev/sequence/issues/50>`_)\n- Added a new method, *run*, to *Sequence* that allows a user to run the model\n  until a given time and with a given time step. (`#54 <https://github.com/sequence-dev/sequence/issues/54>`_)\n\n\nBug Fixes\n`````````\n\n- Fixed a bug where the sea floor was not plotted in some situations. (`#46 <https://github.com/sequence-dev/sequence/issues/46>`_)\n- Fixed a bug where the ``Compact`` component would fail to run because\n  porosity was not being tracked within layers. (`#51 <https://github.com/sequence-dev/sequence/issues/51>`_)\n\n\nOther Changes and Additions\n```````````````````````````\n\n- Updated the ``SedimentFlexure`` component to be compatible with the latest\n  version of *landlab*. (`#45 <https://github.com/sequence-dev/sequence/issues/45>`_)\n- Added unit tests for the ``SedimentFlexure`` component. (`#45 <https://github.com/sequence-dev/sequence/issues/45>`_)\n- Upgraded Python syntax to 3.8 and above. (`#47 <https://github.com/sequence-dev/sequence/issues/47>`_)\n- Setup of pre-commit for the project that runs *black*, *flake8*, and\n  *pyupgrade* (for Python 3.8+). (`#48 <https://github.com/sequence-dev/sequence/issues/48>`_)\n- Added GitHub Actions workflows for releasing Sequence to PyPI and TestPyPI\n  (for pre-releases). This allows users to run ``pip install sequence`` to get\n  the latest release. (`#49 <https://github.com/sequence-dev/sequence/issues/49>`_)\n- Updated the pre-commit hooks to ensure notebooks are clean and styled\n  correctly. (`#51 <https://github.com/sequence-dev/sequence/issues/51>`_)\n- Added a GitHub Actions workflow that tests the *sequence* notebooks. The\n  notebooks are simply executed to ensure they run, not to validate any output. (`#52 <https://github.com/sequence-dev/sequence/issues/52>`_)\n- Added a citation file that users of *sequence* can use to cite the software. (`#53 <https://github.com/sequence-dev/sequence/issues/53>`_)\n\n\n0.4.1 (2022-04-12)\n------------------\n\nNew Features\n````````````\n\n- Added ``--silent`` option to supress status messages and the progress bar. (`#30 <https://github.com/sequence-dev/sequence/issues/30>`_)\n\n\nBug Fixes\n`````````\n\n- Fixed a bug where, instead of writing the current model time, *Sequence* was\n  writing the model time step number to the output file as the *time* variable. (`#34 <https://github.com/sequence-dev/sequence/issues/34>`_)\n- Fixed a bug that incorrectly determined the shore and shelf edge at startigraphic layers\n  when writing *netCDF* output. This was only an issue when *Sequence* had averaged buried layers. (`#37 <https://github.com/sequence-dev/sequence/issues/37>`_)\n- Changed the defaults generated by ``sequence setup`` to create a set of input\n  files that generate output that can be plotted by ``sequence plot``. (`#39 <https://github.com/sequence-dev/sequence/issues/39>`_)\n- Fixed a bug that caused the ``sequence plot`` command to fail if the entire profile\n  was above sea level. (`#40 <https://github.com/sequence-dev/sequence/issues/40>`_)\n\n\nOther Changes and Additions\n```````````````````````````\n\n- Fixed continuous integration tests by removing lint, limit numpy version. (`#30 <https://github.com/sequence-dev/sequence/issues/30>`_)\n- Modified requirements file to exclude numpy versions that caused a core dump when running Sequence with the compaction component. (`#31 <https://github.com/sequence-dev/sequence/issues/31>`_)\n- Setup Sequence to use towncrier to manage the changelog. (`#32 <https://github.com/sequence-dev/sequence/issues/32>`_)\n- Setup `towncrier <https://github.com/twisted/towncrier>`_ to manage the chagnelog. (`#33 <https://github.com/sequence-dev/sequence/issues/33>`_)\n- The ``sequence plot`` command now prints a better error message if the\n  *netCDF* output file being plotted is missing a required variable. (`#39 <https://github.com/sequence-dev/sequence/issues/39>`_)\n- Added Python 3.10 to the continuous integration tests. (`#42 <https://github.com/sequence-dev/sequence/issues/42>`_)\n\n\n0.4.0 (2021-07-26)\n------------------\n\nNew Features\n````````````\n\n- Added \"plot\" subcommand to sequence for plotting stratigraphic output\n  from a netcdf file. (`#25 <https://github.com/sequence-dev/sequence/issues/25>`_)\n\n\nBug Fixes\n`````````\n\n- Fixed layer interpolation when plotting. (`#28 <https://github.com/sequence-dev/sequence/issues/28>`_)\n\n\nDocumentation Enhancements\n``````````````````````````\n\n- Updated README documentation. Added descriptions of the\n  sequence.grid and sequence.output sections for the\n  sequence.toml file, and added documentation for the plot\n  subcommand (`#27 <https://github.com/sequence-dev/sequence/issues/27>`_)\n\n\nOther Changes and Additions\n```````````````````````````\n\n- Changed to use GitHub Actions for continuous integration. (`#26 <https://github.com/sequence-dev/sequence/issues/26>`_)\n\n\n0.3.0 (2020-08-11)\n------------------\n\nNew Features\n````````````\n\n- Added more time-varying parameters to SubmarineDiffuser. (`#24 <https://github.com/sequence-dev/sequence/issues/24>`_)\n\n\nDocumentation Enhancements\n``````````````````````````\n\n- Improved documentation for time-varying parameters. (`#23 <https://github.com/sequence-dev/sequence/issues/23>`_)\n\n\n0.2.0 (2020-07-30)\n------------------\n\nNew Features\n````````````\n\n- Added support for toml-formatted input files and is now the default. (`#1 <https://github.com/sequence-dev/sequence/issues/1>`_)\n- Added time varying parameters. (`#18 <https://github.com/sequence-dev/sequence/issues/18>`_)\n- Allow subsidence to vary with time. (`#21 <https://github.com/sequence-dev/sequence/issues/21>`_)\n\n\nOther Changes and Additions\n```````````````````````````\n\n- Fixed CI on Travis and AppVeyor. (`#18 <https://github.com/sequence-dev/sequence/issues/18>`_)\n- Use readthedocs file to configure documentation building. (`#19 <https://github.com/sequence-dev/sequence/issues/19>`_)\n- Changed to use landlab version 2 components. (`#20 <https://github.com/sequence-dev/sequence/issues/20>`_)\n- Added lots of new tests, particularly for reading/writing configuration files. (`#21 <https://github.com/sequence-dev/sequence/issues/21>`_)\n\n\n0.1.2 (2020-03-04)\n------------------ \n\n- Added sediment compaction\n\n- Updated installation docs (#17)\n\n- Update sequence documentation (#16)\n\n- Added AppVeyor CI for Windows testing (#15)\n\n- Fixed failing shelf edge tests (#14)\n\n- Added examples to sequence cli help message\n\n- Added Python 3.8 support and testing; remove Python 2.7\n\n- Add setup/show/run subcommands to the sequence CLI\n\n- Updated for landlab v2 pre-release version\n\n- Added hemipelagic parameter to sediments section of configuration file\n\n- Bug fixes\n\n- Added ability to read a user-supplied sea level file\n\n- Enhance CI testing\n\n- Added ability to write output at intervals (#11)\n\n- Write a subset of variable fields to netcdf output files\n\n\n0.1.1 (2018-08-24)\n------------------ \n- Added versioneer for version management\n\n\n0.1.0 (2018-08-24)\n------------------ \n\n- Initial release\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "sequence,stratigraphy,landlab",
    "license": "The MIT License (MIT) =====================  Copyright (c) `2020` `Eric Hutton`  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "Eric Hutton",
    "maintainer_email": "mcflugen@gmail.com",
    "name": "sequence-model",
    "package_url": "https://pypi.org/project/sequence-model/",
    "platform": null,
    "project_url": "https://pypi.org/project/sequence-model/",
    "project_urls": {
      "changelog": "https://github.com/sequence-dev/sequence/blob/develop/CHANGES.rst",
      "documentation": "https://sequence.readthedocs.io",
      "homepage": "https://github.com/sequence-dev/sequence",
      "repository": "https://github.com/sequence-dev/sequence"
    },
    "release_url": "https://pypi.org/project/sequence-model/0.5.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python version of the Steckler Sequence model built with landlab",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14292577,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1224ca34b238ad7a1852d3d8be740fe4917c89a95eb3eea3a659c1d9d88c278",
          "md5": "3f97ec1a4b561816d2ff3cbf913161d0",
          "sha256": "47c72cb2314c51f7ea43b0fb7b393e4ef093094452eb8e45c1052047c7b57d8d"
        },
        "downloads": -1,
        "filename": "sequence-model-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f97ec1a4b561816d2ff3cbf913161d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44989,
        "upload_time": "2022-06-29T22:50:26",
        "upload_time_iso_8601": "2022-06-29T22:50:26.418384Z",
        "url": "https://files.pythonhosted.org/packages/c1/22/4ca34b238ad7a1852d3d8be740fe4917c89a95eb3eea3a659c1d9d88c278/sequence-model-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cce19bedc14f544b9c76a201b3f020512143895630417c1ce57117c31d6d37a9",
          "md5": "c02d65e62b457c4e13439b0aa6ca3d2a",
          "sha256": "b501e0d5d3209bb23241d86376866709c920d6032cc9fe78110f69ea75ac3e66"
        },
        "downloads": -1,
        "filename": "sequence-model-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c02d65e62b457c4e13439b0aa6ca3d2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44867,
        "upload_time": "2022-06-30T06:26:03",
        "upload_time_iso_8601": "2022-06-30T06:26:03.233661Z",
        "url": "https://files.pythonhosted.org/packages/cc/e1/9bedc14f544b9c76a201b3f020512143895630417c1ce57117c31d6d37a9/sequence-model-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cce19bedc14f544b9c76a201b3f020512143895630417c1ce57117c31d6d37a9",
        "md5": "c02d65e62b457c4e13439b0aa6ca3d2a",
        "sha256": "b501e0d5d3209bb23241d86376866709c920d6032cc9fe78110f69ea75ac3e66"
      },
      "downloads": -1,
      "filename": "sequence-model-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c02d65e62b457c4e13439b0aa6ca3d2a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 44867,
      "upload_time": "2022-06-30T06:26:03",
      "upload_time_iso_8601": "2022-06-30T06:26:03.233661Z",
      "url": "https://files.pythonhosted.org/packages/cc/e1/9bedc14f544b9c76a201b3f020512143895630417c1ce57117c31d6d37a9/sequence-model-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}