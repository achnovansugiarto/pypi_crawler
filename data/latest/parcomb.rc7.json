{
  "info": {
    "author": null,
    "author_email": "Tobias Wennergren <wennergr@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Typing :: Typed"
    ],
    "description": "# Parcomb - Perser combinator library\n[![Build Status](https://github.com/wennergr/parcomb/actions/workflows/tests.yml/badge.svg)](https://github.com/wennergr/parcomb/actions/workflows/tests.yml)\n[![PyPI version](https://badge.fury.io/py/parcomb.svg)](https://badge.fury.io/py/parcomb)\n[![Coverage](https://codecov.io/gh/wennergr/parcomb/branch/main/graph/badge.svg)](https://app.codecov.io/gh/wennergr/parcomb/tree/main)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python Versions](https://img.shields.io/pypi/pyversions/parcomb.svg?style=flat-square)](https://pypi.org/project/parcomb/)\n\nParcomb is a library for writing arbitrary text parsers and interpreters using regular python code. Technically, it's a top down back-tracing parser using [parser combinators](https://en.wikipedia.org/wiki/Parser_combinator). It's heavily influences by the [Parsec](https://hackage.haskell.org/package/parsec) library\n\n## Installation\n`pip install parcomb`\n\n## Usage\n\n```python\nfrom typing import Tuple\nfrom parcomb.char import char, trim\nfrom parcomb.combinator import many, choice, between\nfrom parcomb.number import integer\nfrom parcomb.parsing import future\n\ninput1 = \"(1 + 4 * 6) + 5 + (6 + (10 + 11)) + 5\"\n\ndef eval(x: int, xs: list[Tuple[str, int]]) -> int:\n    if not xs:\n        return x\n\n    current = xs[0]\n    next = xs[1:]\n\n    fdict = {\n        \"+\": lambda a, b: eval(x + a, next),\n        \"-\": lambda a, b: eval(x - a, next),\n        \"*\": lambda a, b: eval(x * a, next),\n        \"/\": lambda a, b: eval(x / a, next),\n    }\n\n    return fdict[current[0]](current[1], next)\n\nop_prio1 = [trim(char(x)) for x in [\"*\", \"/\"]]\nop_prio2 = [trim(char(x)) for x in [\"+\", \"-\"]]\n\nexpr = future()\nfactor = trim(integer()) | between(char(\"(\"), expr, char(\")\"))\nterm = (factor * many(choice(*op_prio1) * factor)).map_u(eval)\nexpr <<= (term * many(choice(*op_prio2) * term)).map_u(eval)\n\nexpr.run(input1)  # Success(value=62, next='')\n```\n\n\n```python\nfrom parcomb.number import integer\nfrom parcomb.char import char, trim\nfrom parcomb.string import literal\nfrom parcomb.combinator import sep_by1\n\ninput1  = \"\"\"\\\n498,4 -> 498,6 -> 496,6\n503,4 -> 502,4 -> 502,9 -> 494,9\n100,5\"\"\"\n\nposition = (integer() >> char(\",\")) * integer()\nsep = trim(literal(\"->\"))\nline = sep_by1(position, sep)\nlines = sep_by1(line, char(\"\\n\"))\n\nlines.run(input1).get_or_raise()  # [[(498, 4), (498, 6), (496, 6)], [(503, 4), (502, 4), (502, 9), (494, 9)], [(100, 5)]]\n```\n\n### More examples\n\n * [JSON Parser](https://github.com/wennergr/parcomb/blob/main/tests/test_example_json.py)\n * [CSV Parser](https://github.com/wennergr/parcomb/blob/main/tests/test_example_csv.py)\n * [INI Parser](https://github.com/wennergr/parcomb/blob/main/tests/test_example_ini.py)\n * [Using regex](https://github.com/wennergr/parcomb/blob/main/tests/test_example_regex.py)\n\n## Foundation\nA [parser](https://github.com/wennergr/parcomb/blob/6afd2a723b841582f43a198f98eb0536badc7828/parcomb/parsing.py#L40) is\na function `string -> (A, string)` that reads zero or more characters from a string. It then optionally transforms what \nit read and return it as a [tuple](https://github.com/wennergr/parcomb/blob/6afd2a723b841582f43a198f98eb0536badc7828/parcomb/parsing.py#L23) together with the part it didn't read. \n\n * Example 1: The string \"abc\" are applied to the `any` parser. It reads the \"a\" character and returns (\"a\", \"bc\")\n * Example 2: The string \"12ab\" are applied to the `integer` parser. It reads \"12\", transforms it to an integer, and returns (12, \"ab\")\n\nThe parser can also return a failure.\n\nMultiple parsers can be combined to create new, more complex, parsers. Finally, a parser is evaluated by calling the \nrun method on it\n\n## Value parsers\nA value parser reads character(s) (input) and produces values (output). These parsers are the building blocks for \nmore complex parsers. Parcomb contain many built in value parsers. They are located in \nsubmodules that corresponding to the type they produce. Character parsers are in `parcomb.char`, number parsers \nin `parcomb.number`, string parsers in `parcomb.string`, and so forth.\n\n```python\nfrom parcomb.char import any, char, none_of\n\ninput = \"test string\"\n\n# Reads (consumes) first character in the input text and sets it as output\nany().run(input) # Success(value='t', next='est string')\n\n# Attempts to read an \"a\" from input text but fails. Does not consume any characters\nchar(\"a\").run(input)  # Failure(message='#char: Failed to find [a]. value: [t], ...', next='test string')\n\n# Reads (consumes) any character as long as it is not a \" \" or a \"a\". \nnone_of([\" \", \"a\"]).run(input)  # Success(value='t', next='est string')\n```\n\nFor more information, see implementation of the [any](https://github.com/wennergr/parcomb/blob/6afd2a723b841582f43a198f98eb0536badc7828/parcomb/char.py#L9) and [char](https://github.com/wennergr/parcomb/blob/6afd2a723b841582f43a198f98eb0536badc7828/parcomb/char.py#L29) parsers\n\n## Combinator parsers\n\nValue parsers reads single values out of a text, but they are rarely useful by themselves. Instead, they serves\nas building blocks for combinator parsers. These parsers combine multiple parsers into more complex once. \n\n```python\nfrom parcomb.number import integer\nfrom parcomb.char import char, any, none_of\nfrom parcomb.combinator import sep_by, combine, combine_f, many, product3\n\ninput1 = \"2,3,5,7,11 Prime numbers\"\ninput2 = \"123,456\"\n\n# Parse zero or more integers, separated by \",\"\nsep_by(integer(), char(\",\")).run(input1)  # Success(value=[2, 3, 5, 7, 11], next=' # Prime numbers')\n\n# Combine any two characters using the build in \"+\" operator or custom function\ncombine(any(), any()).run(input1)  # Success(value='2,', next='3,5,7,11 # Prime numbers')\ncombine_f(any(), any(), lambda a, b: b + a).run(input1)  # Success(value=',2', next='3,5,7,11 # Prime numbers')\n\n# Consume many non \" \" characters. The many parser continues to parse until its first failure\nmany(none_of([\" \"])).run(input1)  # Success(value=['2', ',', '3', ',', '5', .. ], next=' # Prime numbers')\n\n# ProductN combines n parsers into a tuple\nproduct3(integer(), char(\",\"), integer()).run(input2)  # Success(value=(123, ',', 456), next='')\n```\n\nThe library contains many useful parser combinators such as `many`, `many1`, `choice`, `end_by`, `peek`, and `product`\n\n## Ignoring data\n\nParsers often reads characters that should not be in the final output structure. Examples of this is:\n * Whitespace, such as new line characters or spaces\n * Characters that are used to define structure (such as \",\" in a csv document)\n * Comments to humans that have no impact on the data\n\nThe library provides two methods for ignoring data `skip_left` and `skip_right`. They are both parser combinators\nthat takes two parsers as arguments and ignores one of them.\n\n```python\nfrom parcomb.number import integer\nfrom parcomb.char import char, spaces\nfrom parcomb.combinator import sep_by, many, skip_left\n\ninput1 = \"   2, 3,  5, 7,   11\"\n\n# Ignores 0 or more spaces in front of a number\nnr = skip_left(spaces(), integer())\nsep_by(nr, char(\",\")).run(input1)  # Success(value=[2, 3, 5, 7, 11], next='')\n```\n\n## Transforming data\n\nEvery parser contains a transformation function called `map` and a sister function called `map_u`. The purpose of\nthese functions are to convert a `Parser[A]` to a `Parser[B]` given a function `A -> B`. Very similar to how\nthe `map` function converts a `List[A]` to a `List[B]`. The difference is that the `map_u` function first unpacks \na tuple before applying it to the transformation function. This simplifies the usage with the product parser\n\n```python\nfrom parcomb.number import integer\nfrom parcomb.char import char, eof\nfrom parcomb.combinator import product3, sep_by, end_by, choice\n\ninput1 = \"2,3,5,7,11\"\ninput2 = \"This is a text; Comment\"\n\n# Create a tuple of \"2\", \",\", 3 and then multiple the numbers\nproduct3(integer(), char(\",\"), integer()) \\\n    .map(lambda x: x[0] * x[2]).run(input1)  # Success(value=6, next=',5,7,11')\n    # .map_u(lambda l, _, r: l * r).run(input)  # map_u unpacks a tuple to function parameters\n\n# Create a list of the first 5 prime numbers and then sum them together\nsep_by(integer(), char(\",\")).map(sum).run(input1)  # Success(value=28, next='')\n\n# Read input, character by character, until we either get a ';' char or end of file. \n# transformation 1: Join the list of character into a string\n# transformation 2: Convert all characters to upper case\nend_by(any(), choice([char(\";\"), eof()])) \\\n    .map(lambda x: \"\".join(x)) \\\n    .map(lambda x: x.upper()) \\\n    .run(input2)  # Success(value='THIS IS A TEXT', next=' Comment')\n```\n\n## Recursive parser\n\nRecursive parsing allows parsing of infinitely nested structures such as JSON, JAML, or lists of lists. Parcomb has\na special parser called \"future\" that allows us to define a parser, refer it, but define it at a later stage.\n\n```python\nfrom parcomb.char import char\nfrom parcomb.number import integer\nfrom parcomb.parsing import future\nfrom parcomb.combinator import between, sep_by, choice\n\ninput1 = \"[1,[4,5],453,[4,[]]]\"\n\n# We create a future parser \"elem\" but we can't define it yet as it depend # on the \"lst\" parser, \n# that depends on the \"elem\" parser. E.g. we have a parser that depends on itself\nelem = future()\nlst = between(char(\"[\"), elem, char(\"]\"))\nelem.rebind(sep_by(choice([integer(), lst]), char(\",\")))\n\nlst.run(input1)  # Success(value=[1, [4, 5], 453, [4, []]], next='')\n```\n\n## Syntax DSL\n\nThe library contains an optional syntax that can make large expressions easier to read\n\n```python\nfrom parcomb.char import any, char, spaces\nfrom parcomb.number import integer\nfrom parcomb.parsing import future\n\nany() + any()  # Same as: combine(any(), any())\n\nany() * any()  # Same as: product(any(), any())\nany() * 5  # Same as: count(any(), 5)\n\ninteger() | char(\"a\")  # Same choice([integer(), char(\"a\")])\n\nspaces() << integer() >> spaces()  # Same as skip_right(skip_left(spaces(), integer()),.spaces())\n\nelem = future() \nelem <<= any()  # Same as elem.rebind(any())\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "parser,parser-combinators",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "parcomb",
    "package_url": "https://pypi.org/project/parcomb/",
    "platform": null,
    "project_url": "https://pypi.org/project/parcomb/",
    "project_urls": {
      "Homepage": "https://github.com/wennergr/parcomb"
    },
    "release_url": "https://pypi.org/project/parcomb/0.13.0/",
    "requires_dist": [
      "pytest ; extra == \"dev\"",
      "pip-tools ; extra == \"dev\""
    ],
    "requires_python": ">=3.10",
    "summary": "Parser combinators library",
    "version": "0.13.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16716573,
  "releases": {
    "0.10.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ccdf63f448adeaa326ecc23a43a8931f9a8607f4a733fe907f76dd1d81010088",
          "md5": "90d9bdefb1d3b27d73c34201f149cb46",
          "sha256": "038b45d6e4942981c48fc5c87ed959721f6b845d76a42715efd3901ade6a1aa3"
        },
        "downloads": -1,
        "filename": "parcomb-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90d9bdefb1d3b27d73c34201f149cb46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9638,
        "upload_time": "2023-01-13T01:51:33",
        "upload_time_iso_8601": "2023-01-13T01:51:33.731468Z",
        "url": "https://files.pythonhosted.org/packages/cc/df/63f448adeaa326ecc23a43a8931f9a8607f4a733fe907f76dd1d81010088/parcomb-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7f491215246a05aeed300916de149f96e80cc04902c7b2e0f612ec57834276fa",
          "md5": "568562bde1b7487a4b115be2d1f3f941",
          "sha256": "b4cc6608ab91c7f4993955dbee0000d1783a6d557644323d1101c0a623cd494d"
        },
        "downloads": -1,
        "filename": "parcomb-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "568562bde1b7487a4b115be2d1f3f941",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 16509,
        "upload_time": "2023-01-13T01:51:35",
        "upload_time_iso_8601": "2023-01-13T01:51:35.111474Z",
        "url": "https://files.pythonhosted.org/packages/7f/49/1215246a05aeed300916de149f96e80cc04902c7b2e0f612ec57834276fa/parcomb-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f49f5441a16625f93fd616dfaf66e986717fad95e57798c776d5399f88fcfa4e",
          "md5": "1f2c64b965d5a122bbe43e5ecda15cb9",
          "sha256": "83d8589d79b2f78e19b1cbd5409d8e93c651a4c9c92164d857c54bd0d26f5f4c"
        },
        "downloads": -1,
        "filename": "parcomb-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f2c64b965d5a122bbe43e5ecda15cb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10048,
        "upload_time": "2023-02-01T19:25:08",
        "upload_time_iso_8601": "2023-02-01T19:25:08.584264Z",
        "url": "https://files.pythonhosted.org/packages/f4/9f/5441a16625f93fd616dfaf66e986717fad95e57798c776d5399f88fcfa4e/parcomb-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ec98715eb7895abb0e4009b71ca1ef60b28c0e8e6f6d78596cdf93400dd1ff4f",
          "md5": "10ffc72c938abf52a358727d5b0e488e",
          "sha256": "182b912052293cb9c52c4f4f845ee07f3ad3d16d3395007b5a78f4a7e8000822"
        },
        "downloads": -1,
        "filename": "parcomb-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10ffc72c938abf52a358727d5b0e488e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 17478,
        "upload_time": "2023-02-01T19:25:11",
        "upload_time_iso_8601": "2023-02-01T19:25:11.057842Z",
        "url": "https://files.pythonhosted.org/packages/ec/98/715eb7895abb0e4009b71ca1ef60b28c0e8e6f6d78596cdf93400dd1ff4f/parcomb-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "668b1077fe3cd2ac19f800e9c203b08e842d83f4ee6eee88550eed188fe59d77",
          "md5": "61ab779e9473456dcc0affaad59c8585",
          "sha256": "f87cd1c0f641f6efc7d69923ebb4a989b5d37d2aa492bad85edb7284f56f44ee"
        },
        "downloads": -1,
        "filename": "parcomb-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61ab779e9473456dcc0affaad59c8585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 10766,
        "upload_time": "2023-02-03T18:54:12",
        "upload_time_iso_8601": "2023-02-03T18:54:12.143382Z",
        "url": "https://files.pythonhosted.org/packages/66/8b/1077fe3cd2ac19f800e9c203b08e842d83f4ee6eee88550eed188fe59d77/parcomb-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c07bc59b3b80fadae385ed449bbd0e6b70a8f6aeb88184d9b418119b6d064606",
          "md5": "96f5b56a47c504f3645a926db7d5ef0b",
          "sha256": "306c47af2b2ccbce1e2fd3b79e65eb6cbc812a3c1446f4a40bb945994cf7506d"
        },
        "downloads": -1,
        "filename": "parcomb-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96f5b56a47c504f3645a926db7d5ef0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 18055,
        "upload_time": "2023-02-03T18:54:14",
        "upload_time_iso_8601": "2023-02-03T18:54:14.112650Z",
        "url": "https://files.pythonhosted.org/packages/c0/7b/c59b3b80fadae385ed449bbd0e6b70a8f6aeb88184d9b418119b6d064606/parcomb-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "177d074c0230836c697162bfecb25677e6f827aa41dd3a70b63b87a966744586",
          "md5": "584551ec9573a16796544b1cfe0eb6b3",
          "sha256": "cf80c052c00c3f6359e86f14b598f0bf5bed0a72b99aa02c5b9f4a3041a9e0e7"
        },
        "downloads": -1,
        "filename": "parcomb-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "584551ec9573a16796544b1cfe0eb6b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 11502,
        "upload_time": "2023-02-06T20:01:27",
        "upload_time_iso_8601": "2023-02-06T20:01:27.140384Z",
        "url": "https://files.pythonhosted.org/packages/17/7d/074c0230836c697162bfecb25677e6f827aa41dd3a70b63b87a966744586/parcomb-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d1eff460755d34891728f3fdf2b928c3cea3246e962cdf26ecc9ba8bbaf3da7d",
          "md5": "70718fac76ce299e9c8cf6728c4d5993",
          "sha256": "f84315ef34ca2bdece634137abd5c3154135adb73f04a4604ac5e8a18aa61ca2"
        },
        "downloads": -1,
        "filename": "parcomb-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70718fac76ce299e9c8cf6728c4d5993",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 19880,
        "upload_time": "2023-02-06T20:01:29",
        "upload_time_iso_8601": "2023-02-06T20:01:29.162387Z",
        "url": "https://files.pythonhosted.org/packages/d1/ef/f460755d34891728f3fdf2b928c3cea3246e962cdf26ecc9ba8bbaf3da7d/parcomb-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "bc1693dd1ff8b4d985e2c84daa3192eac402ea649a5c6fb3bd1e696d472c5b29",
          "md5": "e662b1a30ae966741b4a0e41f4c1ef9a",
          "sha256": "48984c6dc3a0921376631b646ee073261ec245cf9ddf44568560b4a4c239825c"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e662b1a30ae966741b4a0e41f4c1ef9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 5862,
        "upload_time": "2023-01-08T22:09:55",
        "upload_time_iso_8601": "2023-01-08T22:09:55.364115Z",
        "url": "https://files.pythonhosted.org/packages/bc/16/93dd1ff8b4d985e2c84daa3192eac402ea649a5c6fb3bd1e696d472c5b29/parcomb-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "770585046182589635c011816e9bee9f2c6e484ba99cab742a521d6ace739162",
          "md5": "fbd6970d8f7d4558ef2a0e5088b35168",
          "sha256": "6a0614d7956f44aa1bd61358f5b82a7c127ca1a595883ac1c59f2ccd79eafc47"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fbd6970d8f7d4558ef2a0e5088b35168",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9256,
        "upload_time": "2023-01-08T22:09:57",
        "upload_time_iso_8601": "2023-01-08T22:09:57.144146Z",
        "url": "https://files.pythonhosted.org/packages/77/05/85046182589635c011816e9bee9f2c6e484ba99cab742a521d6ace739162/parcomb-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "89ca46f36f7dd3efa2dff81227aef1e655bbb759833c005b26df44fe6170f26e",
          "md5": "e6a570a9d3b669ce733ad12300060383",
          "sha256": "d3a30750102ec6d412bceae493964a8c998850f3643d3d26c114b7847af4304d"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6a570a9d3b669ce733ad12300060383",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 5861,
        "upload_time": "2023-01-08T23:22:53",
        "upload_time_iso_8601": "2023-01-08T23:22:53.033100Z",
        "url": "https://files.pythonhosted.org/packages/89/ca/46f36f7dd3efa2dff81227aef1e655bbb759833c005b26df44fe6170f26e/parcomb-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0f5b21739db9305b2242a9fd301c6175cc1e857e4f7230fcc3536c7752590fff",
          "md5": "cfcdcea7196dcf77c522523d6b08c8f5",
          "sha256": "fd1cb2d9373b49d0e193e8c799803a2a68382c01a24a05c9e07404b439844af8"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cfcdcea7196dcf77c522523d6b08c8f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9110,
        "upload_time": "2023-01-08T23:22:54",
        "upload_time_iso_8601": "2023-01-08T23:22:54.253511Z",
        "url": "https://files.pythonhosted.org/packages/0f/5b/21739db9305b2242a9fd301c6175cc1e857e4f7230fcc3536c7752590fff/parcomb-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "fbf081fbef1143ecced5476e1f6b2e22832d395d5e5a15c53632681f70785d4e",
          "md5": "134d9f91a6b96aa04551d2ca6742c282",
          "sha256": "050f579457036a353e7dbbbf16e9923d864f66de37984929b43541cce0e7218f"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "134d9f91a6b96aa04551d2ca6742c282",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 8647,
        "upload_time": "2023-01-10T03:00:31",
        "upload_time_iso_8601": "2023-01-10T03:00:31.498787Z",
        "url": "https://files.pythonhosted.org/packages/fb/f0/81fbef1143ecced5476e1f6b2e22832d395d5e5a15c53632681f70785d4e/parcomb-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "db0a99504ba944de3f7aafb2d0d3b45719387852a6d5b8fb279209933921bca5",
          "md5": "60c1bac3fb9502cf7eda5a77096e9a78",
          "sha256": "28dc366e3f7592137576de223bec27a57873a9bea30e1ee055c2b62319674cd2"
        },
        "downloads": -1,
        "filename": "parcomb-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "60c1bac3fb9502cf7eda5a77096e9a78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14399,
        "upload_time": "2023-01-10T03:00:32",
        "upload_time_iso_8601": "2023-01-10T03:00:32.926774Z",
        "url": "https://files.pythonhosted.org/packages/db/0a/99504ba944de3f7aafb2d0d3b45719387852a6d5b8fb279209933921bca5/parcomb-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "177d074c0230836c697162bfecb25677e6f827aa41dd3a70b63b87a966744586",
        "md5": "584551ec9573a16796544b1cfe0eb6b3",
        "sha256": "cf80c052c00c3f6359e86f14b598f0bf5bed0a72b99aa02c5b9f4a3041a9e0e7"
      },
      "downloads": -1,
      "filename": "parcomb-0.13.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "584551ec9573a16796544b1cfe0eb6b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 11502,
      "upload_time": "2023-02-06T20:01:27",
      "upload_time_iso_8601": "2023-02-06T20:01:27.140384Z",
      "url": "https://files.pythonhosted.org/packages/17/7d/074c0230836c697162bfecb25677e6f827aa41dd3a70b63b87a966744586/parcomb-0.13.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d1eff460755d34891728f3fdf2b928c3cea3246e962cdf26ecc9ba8bbaf3da7d",
        "md5": "70718fac76ce299e9c8cf6728c4d5993",
        "sha256": "f84315ef34ca2bdece634137abd5c3154135adb73f04a4604ac5e8a18aa61ca2"
      },
      "downloads": -1,
      "filename": "parcomb-0.13.0.tar.gz",
      "has_sig": false,
      "md5_digest": "70718fac76ce299e9c8cf6728c4d5993",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 19880,
      "upload_time": "2023-02-06T20:01:29",
      "upload_time_iso_8601": "2023-02-06T20:01:29.162387Z",
      "url": "https://files.pythonhosted.org/packages/d1/ef/f460755d34891728f3fdf2b928c3cea3246e962cdf26ecc9ba8bbaf3da7d/parcomb-0.13.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}