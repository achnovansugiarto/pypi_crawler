{
  "info": {
    "author": "A. Sonrel",
    "author_email": "anthony.sonrel@uzh.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# omniSPARQL\n\n`omniSparql` is a python module to query triples from the OMNIBENCHMARK triplestore. Its main usage is to retrieve lineage information in an OMNIBENCHMARK (see the [lineage query file](https://github.com/ansonrel/contributed-project-templates/blob/dev/metric_summary/src/generate_json_from_res_files.py) of summary metric projects).\n\n## Usage\n\n### Minimal usage\n\nThe typical use of `omniSparql` consists in forming a SPARQL based on your need and running it on your triplestore URL: \n\n```python\nimport omniSparql as omni\n## get a query\nquery = omni.getSparqlQuery.CLASS_METHOD\n## run the query \nout = omni.query_from_sparql(query, URL = TRIPLESTORE_URL)\n```\n### Detailled usage\n\nLet's start by getting a query. Several SPARQL queries are available in the **`getSparqlQuery`** class, which you can explore with the `help` page of the page; \n\n```python\nimport omniSparql as omni\nhelp(omni.getSparqlQuery)\n```\n\n```\nHelp on class getSparqlQuery in module omniSparql.sparql:\n\nclass getSparqlQuery(builtins.object)\n |  Available SPARQL queries. One or multiple input to define when called. \n |  \n |  Returns: \n |      A string which contains a SPARQL command to use with `query_from_sparql`.\n |  \n |  Methods defined here:\n\n [...]\n |  imported_datasets_from_project(project_name)\n |      Retrieves all datasets imported by a project.\n |      \n |      Args: \n |          project_name (str): abbreviated name of the project, e.g. 'omni_batch_processed'\n |      Returns: \n |          `query`: the query, `project_name`\n |          `full_name`: project full name\n |          `short_name`: project short name\n |          `keyword`: keyword associated to the dataset\n |          `creator`: the mail of the author of the dataset\n |          `dateCreated`\n |          `descr`: decription of the dataset\n |          `originID`: ID of dataset\n [...]\n\n```\n\nAs an example, we can select the query showed above; `imported_datasets_from_project` and store it for the next step. As explained in the class method documentation, this function helps to identify which renku datasets were imported by a project, only by providing its name. Let's use it to query all datasets imported by one of the `iris` omnibenchmark; [`iris_accuracy`](https://renkulab.io/gitlab/omnibenchmark/iris_example/iris-accuracy) metric project.\n\nPrepare the query: \n\n```python\nq = omni.getSparqlQuery.imported_datasets_from_project(project_name='iris_accuracy')\nq\n```\n```\n\"\\n        PREFIX ns1:<http://www.w3.org/ns/prov#>\\n        PREFIX ns2:<https://swissdatasciencecenter.github.io/renku-ontology#>\\n        PREFIX ns3 [...]\"\n```\n\nThe output of any SPARQL query from `getSparqlQuery` can be used to query a specified triplestore with the **`query_from_sparql`** function (you can ask the URL of your benchmark by contacting the dev team)- \n\n```python\nout = omni.query_from_sparql(q, URL = \"http://imlspenticton.uzh.ch/omni_iris_sparql\")\n\n```\nAll queries typically return a dictionary or a list of dictionaries with fields describing your output. In this case, the function retrieves the following information about the datasets imported by the specified project: \n\n```\nout[0].keys()\n> dict_keys(['query', 'full_name', 'short_name', 'keyword', 'creator', 'dateCreated', 'descr', 'originID'])\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/omnibenchmark/omniSparql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "omniSparql",
    "package_url": "https://pypi.org/project/omniSparql/",
    "platform": null,
    "project_url": "https://pypi.org/project/omniSparql/",
    "project_urls": {
      "Homepage": "https://github.com/omnibenchmark/omniSparql"
    },
    "release_url": "https://pypi.org/project/omniSparql/0.0.3/",
    "requires_dist": [
      "SPARQLWrapper (>=1.8.5)",
      "pytest (>=7.1.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Python module to query triples from the OMNIBENCHMARK triplestore.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16870525,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0734380f71377c6e312fff3cba527e3873314afb9e9d29c7c48190462bdd550f",
          "md5": "e9e37ddad745617fae9b586d54934ee0",
          "sha256": "38cb2be9b3de1ebb0609f43f7e254be83ef9e0c3f4423de6d5f9cf0a39302d2c"
        },
        "downloads": -1,
        "filename": "omniSparql-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9e37ddad745617fae9b586d54934ee0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11335,
        "upload_time": "2023-02-15T06:50:52",
        "upload_time_iso_8601": "2023-02-15T06:50:52.852169Z",
        "url": "https://files.pythonhosted.org/packages/07/34/380f71377c6e312fff3cba527e3873314afb9e9d29c7c48190462bdd550f/omniSparql-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e4ec7149cfabc52a0eaec205dd977f4bf2189d373cf4f228bc04c8d9cd8b1a6",
          "md5": "255d622d7fa09eb3a7a6873349aa34a8",
          "sha256": "bc4a4d37494e8460c0546c14c138a39657af02129fdc166f90e066145c478aa6"
        },
        "downloads": -1,
        "filename": "omniSparql-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "255d622d7fa09eb3a7a6873349aa34a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15676,
        "upload_time": "2023-02-15T06:50:55",
        "upload_time_iso_8601": "2023-02-15T06:50:55.247491Z",
        "url": "https://files.pythonhosted.org/packages/4e/4e/c7149cfabc52a0eaec205dd977f4bf2189d373cf4f228bc04c8d9cd8b1a6/omniSparql-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f543b3b67d2f7988cd4ee17178d2845a70a51861bda2b95811c643f04a3fb33",
          "md5": "72e53284ba4ac63baf131fed31a1dae0",
          "sha256": "297e75c171399bb650cb32028ae7bb6c6c333af6d924ac5b9dd10ccbb3984127"
        },
        "downloads": -1,
        "filename": "omniSparql-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72e53284ba4ac63baf131fed31a1dae0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12687,
        "upload_time": "2023-02-15T12:27:39",
        "upload_time_iso_8601": "2023-02-15T12:27:39.663460Z",
        "url": "https://files.pythonhosted.org/packages/2f/54/3b3b67d2f7988cd4ee17178d2845a70a51861bda2b95811c643f04a3fb33/omniSparql-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70255ee1057a1302ec9574ca961fde68183e2bd15dd2c71b9d000437db31f33e",
          "md5": "8523caee644cd6a15fe7f1d31c32c321",
          "sha256": "26e3887b8d55329a78127491664a8ec728ebdafdbb0aa24101115ed8815c053b"
        },
        "downloads": -1,
        "filename": "omniSparql-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8523caee644cd6a15fe7f1d31c32c321",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16692,
        "upload_time": "2023-02-15T12:27:41",
        "upload_time_iso_8601": "2023-02-15T12:27:41.508967Z",
        "url": "https://files.pythonhosted.org/packages/70/25/5ee1057a1302ec9574ca961fde68183e2bd15dd2c71b9d000437db31f33e/omniSparql-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f543b3b67d2f7988cd4ee17178d2845a70a51861bda2b95811c643f04a3fb33",
        "md5": "72e53284ba4ac63baf131fed31a1dae0",
        "sha256": "297e75c171399bb650cb32028ae7bb6c6c333af6d924ac5b9dd10ccbb3984127"
      },
      "downloads": -1,
      "filename": "omniSparql-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72e53284ba4ac63baf131fed31a1dae0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12687,
      "upload_time": "2023-02-15T12:27:39",
      "upload_time_iso_8601": "2023-02-15T12:27:39.663460Z",
      "url": "https://files.pythonhosted.org/packages/2f/54/3b3b67d2f7988cd4ee17178d2845a70a51861bda2b95811c643f04a3fb33/omniSparql-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70255ee1057a1302ec9574ca961fde68183e2bd15dd2c71b9d000437db31f33e",
        "md5": "8523caee644cd6a15fe7f1d31c32c321",
        "sha256": "26e3887b8d55329a78127491664a8ec728ebdafdbb0aa24101115ed8815c053b"
      },
      "downloads": -1,
      "filename": "omniSparql-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8523caee644cd6a15fe7f1d31c32c321",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16692,
      "upload_time": "2023-02-15T12:27:41",
      "upload_time_iso_8601": "2023-02-15T12:27:41.508967Z",
      "url": "https://files.pythonhosted.org/packages/70/25/5ee1057a1302ec9574ca961fde68183e2bd15dd2c71b9d000437db31f33e/omniSparql-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}