{
  "info": {
    "author": "Brian Carlsen",
    "author_email": "carlsen.bri@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Parse Binary File\n\n> Install with `python -m pip install parse_binary_file`\n\nParse binary files by describing their structure.\n\n## Description file\nThe `parse_binary_file` package is based on the idea that binary file formats\nshould be parsed from a description of their format.\n\nIf the description file is a list, `pbf` assumes that the elemnts are fields.\nOne can also pass a dictionary, though, to describe more details about the file\nformat.\n\nThere are three top-level items that can be specified:\n+ **`info`:** Describes information about the file as a whole (e.g. endianess).\n+ **`default_options`:** Describes defaults options for each field type.\n+ **`fields`:** Fields of the file format.\n\n### Info\nDescribes information about the file.\n\n#### Properties\n+ **`byte_order`:** Byte order of the file. \n    Valid values: ['little', 'big', 'native']\n    `native` byte ordering uses the byte ordering of the current machine.\n    [Default: 'native']\n\n+ **`encoding`:** File encoding.\n    Used to encode the description file's values to bytes when matching against\n    the file being parsed.\n    See Python's [standard encodings](https://docs.python.org/3/library/codecs.html#standard-encodings)\n    for valid values.\n    [Default: 'utf-8']\n\n+ **`word_size`:** Bytes per word of the file. [Default: 4 bytes]\n    [Inactive]\n\n### Default Options\nDescribes parsing information for each type of field.\nAll types can specify default values for a particular field property (discussed below).\nTo specify a default field property first specify the type of the field, then the property.\n\ne.g.\nTo specify strings are null terminated (`\\x00`) by default \n```yaml\ndefault_options:\n    str:\n        terminator: \"\\x00\"\n```\n\n### Fields\nDescribes the fields of the file format.\nEach field must one and only one termination condition.\nTermination conditions are determined by the `size`, `value`, and `terminator` fields.\nfor some types these can be interpreted. For instance, an `int` is assumed to\nhave a size of 4, so a termination condition does not need to be explicitly stated.\n\nAll fields can have the properties:\n+ **`type`:** Data type of the field.\n    If a type is enclosed in brackets (`[]`) it marks the field as an array-like field.\n    Array like fields are assumed to contain multiple instances of the specified\n    type. For more information see the **Array Fields** section.\n+ **`size`:** Sets the size of the field in bytes. This may be inferred\n    depending on the field's `type`.\n    A size of `-1` indicated the field extends until the end of the file.\n    Only the final field may have a length of `-1`.\n+ **`value`:** Sets the size of the fiel based on the expected value.\n+ **`format`:** How to format the field. This is type dependent.\n    For `str` fields, this represents the encoding of the string and defaults to\n    the file's encoding provided in the `info` section.\n    For other types this represents how Python's [struct.unpack](https://docs.python.org/3/library/struct.html#struct-format-strings) should\n    interpret the field.\n+ **`terminator`:** Termination string.\n+ **`is_null`:** Used for `bytes` data type to indicate all bytes should be null.\n    Should be used in conjunction with the `size` property to indicate the\n    termination condition.\n+ **`name`:** Name of the field. Used for accessing the data by name.\n+ **`description`:** Description of the field.\n+ **`fields`:** Describes the subfields of the field.\n    If a field is made up of subfields, its type must be `bytes` or `[bytes]`.\n+ **`exec`:** Execution hooks for logical processing. [Inactive]\n\n#### Type\nIf a field is not provided a type it defaults to `bytes`.\n\nValid types are:\n+ **`bytes`:** Interpret the field as raw bytes. [Default]\n+ **`char`:** Single character. (1 byte)\n+ **`str`:** String data.\n+ **`bool`:** Boolean. (1 byte)\n+ **`short`:** Short integer. (2 bytes)\n+ **`u_short`:** Unsigned short integer. (2 bytes)\n+ **`int`:** Integer.(4 bytes)\n+ **`u_int`:** Unisigned integer. (4 bytes)\n+ **`long`:** Long integer. (1 word)\n+ **`u_long`:** Unsigned long integer. (1 word)\n+ **`long_long`:** Double long integer. (2 words)\n+ **`u_long_long`:** Unsigned double long integer. (2 words)\n+ **`float`:** Floating point number. (4 bytes)\n+ **`double`:** Double precision floating point number. (2 words)\n+ Any type may be wrapped in brackets `[]` to indicate the field is an array\n    of that value type. Details of the elements are set using the `elements` property.\n \nFor more information read about Python [`struct`'s formatting strings](https://docs.python.org/3/library/struct.html#struct-format-strings). \n\n#### Termination condition\nThe termination condition of a field tells the parser how far to read.\nThere are three explicit and one implit termination condition.\n\n##### Explicit\n+ **`size`:** Sets the size of the field in bytes.\n       This may be inferred depending on the field's `type`.\n+ **`terminator`:** Termination string as bytes.\n+ **`value`:** Sets the size of the field based on the expected value.\n\n##### Implicit\n+ **`subfields`:** [Inactive] The parent field can be terminated when the last child field is terminated.\n\n#### Subfields\nEach field can be made up of subfields. Each subfield follows the same pattern\nas top-level fields. This is a recursive concept, so fields can be nested as\ndeeply as needed.\n\nFields that are made up of subfields must have their type set to `bytes` or\n`[bytes]`.\nIf the type is `[bytes]` it is assumed that the subfields repeat in a array-like\nmanner with all sufields being repeated an equal number of times.\ni.e. If the data for the parent field ends before all subfields have been read\nan exception is raised.\n\n#### Array Fields\nA field may consist of multiple elements. This is where array fields come into\nplay. For instance, imagine a field that consists of a list of floats. To\nindicate a field is array-like, enclose its type in square brackets ('[]')\n(e.g. `[bytes]`, `[float]`).\n\n#### Execution Hooks\n> :warning: These fields allow arbitrary Python code to be executed.\n\nIt may be necessary to add some basic logic to your description.\nFor instance, if a field named `data` may have a variable length offset buffer\nspecified by a field named `data_offset`.\nThe `exec` field allows you to specify code before (`pre`) or after (`post`)\ndata for the field has been loaded and has access to all previous fields.\nEach of these fields should contain a lambda function with signature\n`(data, fields)` where `data` is byte string of the current field and \n`fields` is a `parse_binary_file.Data` object representing the file with\nall previous fields loaded.\n\n\n## Components\n\n### FieldDescription\nDescribes a field.\n\n#### Properties\n+ **type:** The type of the field being described.\n    When loading data into the field it will be parsed based on the type.\n    +    [Default: 'bytes']\n\n+ **name:** Name of the field.\n    This is used to label the field.\n\n+ **value:** The expected value of the field.\n    This can be usedto indicate a specific value is expected for the field.\n\n+ **size:** Number of bytes in the field.\n    The last field can have a size of -1 which indicates the field continues to\n    the end of the file.\n\n+ **terminator:** Sequence of values indicating the end of the field.\n\n+ **is_null:** Indicates the field only contains null bytes.\n    Settings to true is equivalent to setting `value` equal to all null bytes.\n    Must set `size` if `True`.\n\n+ **description:** Description of the field.\n\n+ **fields:** Used to specifiy the structure of the elements of an array.\n\n#### Methods\n+ **FieldDescription(\\*\\*properties):** Initializes a new `FieldDescription` with\n  the provided properties.\n\n\n### FileFormat\nContainer for `FieldDescription`s to describe the structure of a file.\n\n#### Properties\n+ **fields:** List of `FieldDescription`s.\n\n+ **info:** Dictionary of information on the file.\n\n+ Fields can be accessed by name or index using brackets (`[]`)\n\n#### Methods\n+ **from_dicts(desc, info, defaults):** `@staticmethod` Converts a list of dictionaries into a `FileFormat`.\n\n+ **keys():** Returns a list of the keys of named fields.\n\n### Parser\nUsed for parsing files in a given format.\n\n#### Properties\n+ **format:** A `FileFormat` used to parse files.\n\n#### Methods\n+ **parse(stream):** Returns a `Data` object representing the data from `stream`.\n\n### Field\nContains information about a field, including its description and loaded value.\n\n#### Properties\n+ **desc:** `FieldDescription` that was used to create the `Field`.\n\n+ **value:** Parsed value.\n\n+ **expected_value:** `self.desc.value`. Provided for convenience.\n\n+ **fields:** Tuple of children `Field`s.\n\n+ **size:** If the `Field`'s value is set, returns its size.\n    If the `Field`'s value has not yet been set return the `Field`'s expected size if available.\n\n+ **data:** Original data as bytes.\n\n+ **value_is_valid:** Whether the parsed value matches the expected value. If a specific `value` was not specified by the `FieldDescription` this will always return `True`.\n\n+ Values of the `Field`'s `FieldDescription` are accessible as properties, as well. \n\n#### Methods\n+ **Field(desc: FieldDescription, fields: tuple[Field]):** Initializes a new `Field`.\n    `desc` should describe the field, and `fields` are the children `Field`s.\n\n+ **from_data(data: bytes, desc: FieldDescription):** Creates a new `Field` using `desc` as its description to parse `data`.\n\n+ **parse_data(val: bytes, \\*\\*options):** Sets the value of the `Field` based on its description and the provided value.\n\n\n### Data\nRepresents data from a file.\n\n#### Properties\n+ **fields:** `Field`s containing the parsed data.\n\n+ **is_loaded:** If data has been loaded yet.\n\n+ **value:** Values of the parsed data.\n   \n+ **named_field_values:** Returns a dictionary of name-value pairs for named `Field`s.\n    If multiple fields have the same name a tuple is returned with the values in\n    order.\n\n+ `Field`s are accessible by name and index using brackets (`[]`). If multiple `Field`s have the same name, they are returned as a tuple in order.\n\n\n## Use\nThis library is intended to be used by describing the struture of a binary file\nformat in a configuration file. That file is then loaded and used to create a\n`Data` instance. The `Data` instance can then `load()` data from a file and\nassort it into the correct fields.\n\n## Example\nWe would like to describe a new binary file format of `.msg`.\n| Offset | Size | Name     | Description                                          |\n| ------ | ---- | -------- | ---------------------------------------------------- |\n| 0x00   | 0x02 | head     | `0xff 0x00` Indicates the file is a `.msg` file.     |\n| 0x02   | 0x04 | size     | Total size of the file.                              |\n| 0x06   | 0x04 |  --      | Null bytes to separate header from body.             |\n| 0x0a   |  --  | greeting | Message greeting, null terminated.                   |\n|  --    |  --  | message  | Message content.                                     |\n\n\nWe can describe this structure in a YAML file.\n`msg.yaml`\n```yaml\ninfo:\n    byte_order: 'little'\n\nfields:\n    - name: 'head'\n      value: \"\\xff\\x00\"\n\n    - type: 'int'\n      name: 'file_size'\n      description: 'Size of file in bytes'\n\n    - size: 4\n      is_null: true\n\n    - type: 'str'\n      terminator: \"\\x00\"\n      name: 'greeting'\n\n    - type: 'str'\n      size: -1\n      name: 'message'\n```\n\nTo read a `.msg` file we can use the description of it.\n```python\nimport os\nimport yaml  # use pyyaml to load `msg.yaml`\nimport parse_binary_file as pbf\n\n\n# load description\nwith open('msg.yaml') as f:\n    msg_desc = yaml.safe_load(f)\n    \n# create file format\nmsg_format = pbf.FieldFormat.from_dicts(msg_desc['fields'], info = msg_desc['info'])\n\n# create parser\nparser = pbf.Parser(msg_format)\n\n# create data\nwith open('my_message.msg', 'rb') as f:\n    data = parser.parse(f)\n\nis_corrupt = (data['file_size'] != os.path.getsize('my_message.msg'))\ngreeting = data['greeting'].value\nmessage = data[-1].value\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bicarlsen/parse_binary_file.git",
    "keywords": "parse,binary,file",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parse-binary-file",
    "package_url": "https://pypi.org/project/parse-binary-file/",
    "platform": null,
    "project_url": "https://pypi.org/project/parse-binary-file/",
    "project_urls": {
      "Homepage": "https://github.com/bicarlsen/parse_binary_file.git"
    },
    "release_url": "https://pypi.org/project/parse-binary-file/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parse binary files by describing their structure.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14070355,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c30666a3d90ac57fd005e60735e0b4396ebbadbed1daa437ecff5fb3394d3f03",
          "md5": "9a28bee5bcd918d8d7fa47753293a6c9",
          "sha256": "21188f5f7a72279543837223921e4f5fc7d77a272f0434d7f74e6e561de814af"
        },
        "downloads": -1,
        "filename": "parse_binary_file-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a28bee5bcd918d8d7fa47753293a6c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8307,
        "upload_time": "2022-06-04T00:10:21",
        "upload_time_iso_8601": "2022-06-04T00:10:21.091680Z",
        "url": "https://files.pythonhosted.org/packages/c3/06/66a3d90ac57fd005e60735e0b4396ebbadbed1daa437ecff5fb3394d3f03/parse_binary_file-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7151a3c708093de69a3c35e06b4c0dcdd981134c98e4dda09e88bb61f6ce61e8",
          "md5": "126ffa5c430ecc66a381ce3b79c28c3a",
          "sha256": "de97ca08bc098f0a4a89b844c9cc020f0a431a89cad45dea452b02c188cf343e"
        },
        "downloads": -1,
        "filename": "parse_binary_file-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "126ffa5c430ecc66a381ce3b79c28c3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7270,
        "upload_time": "2022-06-04T00:10:24",
        "upload_time_iso_8601": "2022-06-04T00:10:24.088265Z",
        "url": "https://files.pythonhosted.org/packages/71/51/a3c708093de69a3c35e06b4c0dcdd981134c98e4dda09e88bb61f6ce61e8/parse_binary_file-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67fa2a98abe7ceb83f1b4d6d0c0024b17b2531ab9a242ff84cbb7415af97d44c",
          "md5": "9ea06c6b0111474df167a85712e4d9e7",
          "sha256": "ff3f116b02a38feeecbb253aa9e2479216f1ffdcb021edb0016f2aa324a3241a"
        },
        "downloads": -1,
        "filename": "parse_binary_file-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ea06c6b0111474df167a85712e4d9e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19087,
        "upload_time": "2022-06-08T14:21:08",
        "upload_time_iso_8601": "2022-06-08T14:21:08.407356Z",
        "url": "https://files.pythonhosted.org/packages/67/fa/2a98abe7ceb83f1b4d6d0c0024b17b2531ab9a242ff84cbb7415af97d44c/parse_binary_file-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d50bc933eefe5379b17e1362e688771aa22e22c878f0ef4e60c6a8dc6e3fa6",
          "md5": "c91cc9ac51253cc17c6de45c430e4728",
          "sha256": "4c658d294980d4182f834c2b8dd568d0b5ee66c78405e488a5bcca352fce115a"
        },
        "downloads": -1,
        "filename": "parse_binary_file-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c91cc9ac51253cc17c6de45c430e4728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18811,
        "upload_time": "2022-06-08T14:21:10",
        "upload_time_iso_8601": "2022-06-08T14:21:10.547185Z",
        "url": "https://files.pythonhosted.org/packages/e2/d5/0bc933eefe5379b17e1362e688771aa22e22c878f0ef4e60c6a8dc6e3fa6/parse_binary_file-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67fa2a98abe7ceb83f1b4d6d0c0024b17b2531ab9a242ff84cbb7415af97d44c",
        "md5": "9ea06c6b0111474df167a85712e4d9e7",
        "sha256": "ff3f116b02a38feeecbb253aa9e2479216f1ffdcb021edb0016f2aa324a3241a"
      },
      "downloads": -1,
      "filename": "parse_binary_file-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ea06c6b0111474df167a85712e4d9e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19087,
      "upload_time": "2022-06-08T14:21:08",
      "upload_time_iso_8601": "2022-06-08T14:21:08.407356Z",
      "url": "https://files.pythonhosted.org/packages/67/fa/2a98abe7ceb83f1b4d6d0c0024b17b2531ab9a242ff84cbb7415af97d44c/parse_binary_file-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2d50bc933eefe5379b17e1362e688771aa22e22c878f0ef4e60c6a8dc6e3fa6",
        "md5": "c91cc9ac51253cc17c6de45c430e4728",
        "sha256": "4c658d294980d4182f834c2b8dd568d0b5ee66c78405e488a5bcca352fce115a"
      },
      "downloads": -1,
      "filename": "parse_binary_file-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c91cc9ac51253cc17c6de45c430e4728",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18811,
      "upload_time": "2022-06-08T14:21:10",
      "upload_time_iso_8601": "2022-06-08T14:21:10.547185Z",
      "url": "https://files.pythonhosted.org/packages/e2/d5/0bc933eefe5379b17e1362e688771aa22e22c878f0ef4e60c6a8dc6e3fa6/parse_binary_file-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}