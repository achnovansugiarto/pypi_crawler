{
  "info": {
    "author": "Raoul Heese",
    "author_email": "raoul.heese@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "***********************************************************************\nadasamp-pareto: adaptive bayes-sampling for multi-criteria optimization\n***********************************************************************\n\n.. image:: https://github.com/RaoulHeese/adasamp-pareto/actions/workflows/tests.yml/badge.svg \n    :target: https://github.com/RaoulHeese/adasamp-pareto/actions/workflows/tests.yml\n    :alt: GitHub Actions\n\t\n.. image:: https://readthedocs.org/projects/adasamp-pareto/badge/?version=latest\n    :target: https://adasamp-pareto.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\t\n\t\n.. image:: https://img.shields.io/badge/license-MIT-lightgrey\n    :target: https://github.com/RaoulHeese/adasamp-pareto/blob/main/LICENSE\n    :alt: MIT License\t\n\nAdaptive optimization algorithm for black-box multi-objective optimization problems with binary constraints on the foundation of Bayes optimization. The algorithm aims to find the Pareto-optimal solution of\n\n.. math::\n\n   max [ y(x) ] s.t. f(x) = feasible\n   \nin an iterative procedure. Here, :math:`y(x)` denotes the multi-dimensional goals and :math:`f(x)` the binary feasibility of the problem (in the sense that certain design variables :math:`x` lead to invalid goals). All technical details can be found in the paper \"Adaptive Sampling of Pareto Frontiers with Binary Constraints Using Regression and Classification\" (`<https://arxiv.org/abs/2008.12005>`_).\n\n**Installation**\n\nInstall via ``pip`` or clone this repository. In order to use ``pip``, type:\n\n.. code-block:: sh\n\n    $ pip install adasamp-pareto\n\t\n**Usage**\n\nThe class ``AdaptiveSampler`` is used to define and solve a problem instance. Simple example:\n\n.. code-block:: python\n\n  from adasamp import AdaptiveSampler\n\n  # Create instance\n  sampler = AdaptiveSampler(func,       # Problem definition: function returns (goals Y, feasibility f)\n                            X_limits,   # Design variable limits to search solution in\n                            Y_ref,      # Reference point, has to be dominated by any goal Y\n                            iterations, # Number of solver iterations\n                            Y_model,    # Regression model to predict goals Y\n                            f_model)    # Classification model to predict feasibility f\n\n  # Return the sampling suggestions X, the corresponding goals Y, and the corresponding feasibilities f.\n  X, Y, f = sampler.sample()\n  \nDemo notebooks can be found in the `examples/` directory.\n  \n**Documentation**\n\nComplete documentation is available: `<https://adasamp-pareto.readthedocs.io/en/latest>`_.\n\nðŸ“– **Citation**\n\nIf you find this code useful in your research, please consider citing:\n\n.. code-block::\n\n    @misc{heesebortzCITE2020,\n\t\t  title={Adaptive Sampling of Pareto Frontiers with Binary Constraints Using Regression and Classification}, \n\t\t  author={Raoul Heese and Michael Bortz},\n\t\t  year={2020},\n\t\t  eprint={2008.12005},\n\t\t  archivePrefix={arXiv},\n\t\t  primaryClass={stat.ML}\n         }\n\t\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/RaoulHeese/adasamp-pareto/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RaoulHeese/adasamp-pareto",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Raoul Heese",
    "maintainer_email": "raoul.heese@gmail.com",
    "name": "adasamp-pareto",
    "package_url": "https://pypi.org/project/adasamp-pareto/",
    "platform": null,
    "project_url": "https://pypi.org/project/adasamp-pareto/",
    "project_urls": {
      "Download": "https://github.com/RaoulHeese/adasamp-pareto/releases",
      "Homepage": "https://github.com/RaoulHeese/adasamp-pareto",
      "Source Code": "https://github.com/RaoulHeese/cadasamp-pareto"
    },
    "release_url": "https://pypi.org/project/adasamp-pareto/1.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "scikit-learn",
      "dill",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "Adaptive bayes-sampling for multi-criteria optimization",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15007368,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ad991dd29de640a7dd1fb11e242d9be157dfddb670b5d41615ee19bc475087",
          "md5": "3518a1784d1764e8b48ff7ba23fa2520",
          "sha256": "59062617df65e6e2d4c3b42ff09674ac2a4c1a83cd86c515d796bf595fec53f4"
        },
        "downloads": -1,
        "filename": "adasamp_pareto-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3518a1784d1764e8b48ff7ba23fa2520",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19517,
        "upload_time": "2022-09-06T13:21:10",
        "upload_time_iso_8601": "2022-09-06T13:21:10.235507Z",
        "url": "https://files.pythonhosted.org/packages/d9/ad/991dd29de640a7dd1fb11e242d9be157dfddb670b5d41615ee19bc475087/adasamp_pareto-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6db40ba052e21ed44ed8b469ce3a4fa0053adcf0912ee9bb50ffcd4d048a4e5a",
          "md5": "b18455aba75e309fdcb3aeae18b60592",
          "sha256": "4e3e62b6b5cc3be2de358c7ba684575dfe0a7dd260a339cea93794b45d909850"
        },
        "downloads": -1,
        "filename": "adasamp-pareto-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b18455aba75e309fdcb3aeae18b60592",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19664,
        "upload_time": "2022-09-06T13:21:11",
        "upload_time_iso_8601": "2022-09-06T13:21:11.965552Z",
        "url": "https://files.pythonhosted.org/packages/6d/b4/0ba052e21ed44ed8b469ce3a4fa0053adcf0912ee9bb50ffcd4d048a4e5a/adasamp-pareto-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9ad991dd29de640a7dd1fb11e242d9be157dfddb670b5d41615ee19bc475087",
        "md5": "3518a1784d1764e8b48ff7ba23fa2520",
        "sha256": "59062617df65e6e2d4c3b42ff09674ac2a4c1a83cd86c515d796bf595fec53f4"
      },
      "downloads": -1,
      "filename": "adasamp_pareto-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3518a1784d1764e8b48ff7ba23fa2520",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19517,
      "upload_time": "2022-09-06T13:21:10",
      "upload_time_iso_8601": "2022-09-06T13:21:10.235507Z",
      "url": "https://files.pythonhosted.org/packages/d9/ad/991dd29de640a7dd1fb11e242d9be157dfddb670b5d41615ee19bc475087/adasamp_pareto-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6db40ba052e21ed44ed8b469ce3a4fa0053adcf0912ee9bb50ffcd4d048a4e5a",
        "md5": "b18455aba75e309fdcb3aeae18b60592",
        "sha256": "4e3e62b6b5cc3be2de358c7ba684575dfe0a7dd260a339cea93794b45d909850"
      },
      "downloads": -1,
      "filename": "adasamp-pareto-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b18455aba75e309fdcb3aeae18b60592",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19664,
      "upload_time": "2022-09-06T13:21:11",
      "upload_time_iso_8601": "2022-09-06T13:21:11.965552Z",
      "url": "https://files.pythonhosted.org/packages/6d/b4/0ba052e21ed44ed8b469ce3a4fa0053adcf0912ee9bb50ffcd4d048a4e5a/adasamp-pareto-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}