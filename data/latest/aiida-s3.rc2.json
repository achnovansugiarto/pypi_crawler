{
  "info": {
    "author": null,
    "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AiiDA",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# `aiida-s3`\n\nAiiDA plugin that provides various storage backends that allow using cloud data storage services, such as AWS S3 and Azure Blob Storage.\n\nCurrently, the following storage backends are available:\n\n* `s3.psql_s3`: Database provided by PostgreSQL and file repository provided by any service implementing the S3 protocol, for example [minIO](https://min.io).\n* `s3.psql_aws_s3`: Database provided by PostgreSQL and file repository provided by [AWS S3](https://aws.amazon.com/s3/).\n* `s3.psql_azure_blob`: Database provided by PostgreSQL and file repository provided by [Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs/).\n\n\n## Installation\n\nThe recommended method of installation is through the [`pip`](https://pip.pypa.io/en/stable/) package installer for Python:\n\n    pip install aiida-s3\n\n## Setup\n\nTo use one of the storage backends provided by `aiida-s3` with AiiDA, you need to create a profile for it:\n\n1.  List the available storage backends:\n    ```bash\n    aiida-s3 profile setup --help\n    ```\n\n1.  Create a profile using one of the available storage backends by passing it as an argument to `aiida-s3 profile setup`, for example:\n    ```bash\n    aiida-s3 profile setup s3.psql_s3\n    ```\n    The command will prompt for the information required to setup the storage backend.\n    After all information is entered, the storage backend is initialized, such as creating the database schema and creating file containers.\n\n1.  Create a default user for the profile:\n    ```bash\n    verdi -p profile-name user configure --set-default\n    ```\n\n1.  The profile is now ready to be used with AiiDA.\n    Optionally, you can set it as the new default profile:\n    ```bash\n    verdi profile setdefault profile-name\n    ```\n\n1.  Optionally, to test that everything is working as intended, launch a test calculation:\n    ```bash\n    verdi -p profile-name devel launch-add\n    ```\n\n## Testing\n\nThe unit tests are implemented and run with [`pytest`](https://docs.pytest.org/).\nTo run them, install the package with the `tests` extra dependencies:\n\n    pip install aiida-s3[tests]\n\nThe plugin provides interfaces to various services that require credentials, such as AWS S3 and Azure Blob Storage.\nTo run the test suite, one has to provide these credentials or the services have to be mocked.\nInstructions for each service that is supported are provided below.\n\n### S3\n\nThe base S3 implementation is interfaced with through the [`boto3`](https://pypi.org/project/boto3/) Python SDK.\nThe [`moto`](https://pypi.org/project/moto/) library allows to mock this interface.\nThis makes it possible to run the test suite without any credentials.\nTo run the tests, simply execute `pytest`:\n\n    pytest\n\nBy default, the interactions with S3 are mocked through `moto` and no actual credentials are required.\nTo run the tests against an actual S3 server, the endpoint URL and credentials need to be specified through environment variables:\n\n    export AIIDA_S3_MOCK_S3=False\n    export AIIDA_S3_ENDPOINT_URL='http://localhost:9000'\n    export AIIDA_S3_BUCKET_NAME='some-bucket'\n    export AIIDA_S3_ACCESS_KEY_ID='access-key'\n    export AIIDA_S3_SECRET_ACCESS_KEY='secret-access-key'\n    pytest\n\nOne example of an open source implementation of a S3-compatible object store is [minIO](https://min.io/).\nAn instance can easily be created locally using Docker and `docker-compose`.\nSimply write the following to `docker-compose.yml`:\n\n    version: '2'\n\n    services:\n      minio:\n        container_name: Minio\n        command: server /data --console-address \":9001\"\n        environment:\n          - MINIO_ROOT_USER=admin\n          - MINIO_ROOT_PASSWORD=supersecret\n        image: quay.io/minio/minio:latest\n        ports:\n          - '9000:9000'\n          - '9001:9001'\n        volumes:\n          - /tmp/minio:/data\n        restart: unless-stopped\n\nand then launch the container with:\n\n    docker-compose up -d\n\nThe tests can then be run against the server using environment variables as described above.\n\n\n### AWS S3\n\nThe [AWS S3](https://aws.amazon.com/s3/) service is interfaced with through the [`boto3`](https://pypi.org/project/boto3/) Python SDK.\nThe [`moto`](https://pypi.org/project/moto/) library allows to mock this interface.\nThis makes it possible to run the test suite without any credentials.\nTo run the tests, simply execute `pytest`:\n\n    pytest\n\nBy default, the interactions with AWS S3 are mocked through `moto` and no actual credentials are required.\nTo run the tests against an actual AWS S3 container, the credentials need to be specified through environment variables:\n\n    export AIIDA_S3_MOCK_AWS_S3=False\n    export AIIDA_S3_AWS_BUCKET_NAME='some-bucket'\n    export AIIDA_S3_AWS_ACCESS_KEY_ID='access-key'\n    export AIIDA_S3_AWS_SECRET_ACCESS_KEY='secret-access-key'\n    pytest\n\n\n### Azure Blob Storage\n\nThe [Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs/) is communicated with through the [`azure-blob-storage`](https://pypi.org/project/azure-storage-blob/) Python SDK.\nCurrently, there is no good way to mock the clients of this library.\nTherefore, when the tests are run without credentials, and so the Azure Blob Storage client needs to be mocked, the tests are skipped.\nTo run the tests against an actual AWS S3 container, the credentials need to be specified through environment variables:\n\n    export AIIDA_S3_MOCK_AZURE_BLOB=False\n    export AIIDA_S3_AZURE_BLOB_CONTAINER_NAME='some-container'\n    export AIIDA_S3_AZURE_BLOB_CONNECTION_STRING='DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net'\n    pytest\n\nThe specified container does not have to exist yet, it will be created automatically.\nThe connection string can be obtained through the Azure portal.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "aiida,workflows,s3",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "aiida-s3",
    "package_url": "https://pypi.org/project/aiida-s3/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiida-s3/",
    "project_urls": {
      "changelog": "https://github.com/sphuber/aiida-s3/blob/master/CHANGELOG.md",
      "documentation": "https://github.com/sphuber/aiida-s3/blob/master/README.md",
      "source": "https://github.com/sphuber/aiida-s3",
      "tracker": "https://github.com/sphuber/aiida-s3/issues"
    },
    "release_url": "https://pypi.org/project/aiida-s3/0.2.0/",
    "requires_dist": [
      "aiida-core~=2.2",
      "azure-storage-blob",
      "boto3",
      "mypy==0.981 ; extra == \"pre-commit\"",
      "pre-commit~=2.17 ; extra == \"pre-commit\"",
      "pylint~=2.12.2 ; extra == \"pre-commit\"",
      "pylint-aiida~=0.1.1 ; extra == \"pre-commit\"",
      "types-pyyaml ; extra == \"pre-commit\"",
      "moto[s3] ; extra == \"tests\"",
      "pgtest~=1.3,>=1.3.1 ; extra == \"tests\"",
      "pytest~=7.2 ; extra == \"tests\""
    ],
    "requires_python": ">=3.8",
    "summary": "AiiDA plugin that provides a storage backend using an S3 object store as the file repository.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17068930,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "046603958471717eb11ec4718818fe2b93c71cd9fb5597eda6940f39b1d8839a",
          "md5": "55540b4ae0750090a7e461adea402117",
          "sha256": "df65f53bea5979718dac459b1dafc58ef4bf0d16f33c5a5917a7ee10b456bfe8"
        },
        "downloads": -1,
        "filename": "aiida_s3-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55540b4ae0750090a7e461adea402117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14262,
        "upload_time": "2022-12-13T08:58:22",
        "upload_time_iso_8601": "2022-12-13T08:58:22.928870Z",
        "url": "https://files.pythonhosted.org/packages/04/66/03958471717eb11ec4718818fe2b93c71cd9fb5597eda6940f39b1d8839a/aiida_s3-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "630294d3da7bde22d0a7e888c9208720255a35102c4ab1fe3e349d7ab5faac44",
          "md5": "5944fc8567763254d110968cf688edaf",
          "sha256": "c46cd919518c5c42421d55340cd19828601441945ec7cab6c54336407ed3b37f"
        },
        "downloads": -1,
        "filename": "aiida-s3-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5944fc8567763254d110968cf688edaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11239,
        "upload_time": "2022-12-13T08:58:25",
        "upload_time_iso_8601": "2022-12-13T08:58:25.653565Z",
        "url": "https://files.pythonhosted.org/packages/63/02/94d3da7bde22d0a7e888c9208720255a35102c4ab1fe3e349d7ab5faac44/aiida-s3-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6d2c7128d9f7b49cb7c63dd8804381fd2536bd5e052b1b4b8ede9ab6d175a3ba",
          "md5": "082f211bb73aaa64ce1f85b4de2ec0e9",
          "sha256": "5d5024a07b186454274c3fb4d7695f1c75aaa8e0cfa2525b424800f7caf9832c"
        },
        "downloads": -1,
        "filename": "aiida_s3-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "082f211bb73aaa64ce1f85b4de2ec0e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16487,
        "upload_time": "2023-02-27T15:47:08",
        "upload_time_iso_8601": "2023-02-27T15:47:08.306193Z",
        "url": "https://files.pythonhosted.org/packages/6d/2c/7128d9f7b49cb7c63dd8804381fd2536bd5e052b1b4b8ede9ab6d175a3ba/aiida_s3-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3d371ed263a07274d2c3bf5ef597e3eb434ec44833430b4066ded3bc639580b0",
          "md5": "4c2c6dbb6c3e8e7a594e639f17814f08",
          "sha256": "45de90b938a05715f151fa60c187252b310d497a64e8fb2b1ec2d86a5857a415"
        },
        "downloads": -1,
        "filename": "aiida-s3-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c2c6dbb6c3e8e7a594e639f17814f08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12805,
        "upload_time": "2023-02-27T15:47:09",
        "upload_time_iso_8601": "2023-02-27T15:47:09.772706Z",
        "url": "https://files.pythonhosted.org/packages/3d/37/1ed263a07274d2c3bf5ef597e3eb434ec44833430b4066ded3bc639580b0/aiida-s3-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "6d2c7128d9f7b49cb7c63dd8804381fd2536bd5e052b1b4b8ede9ab6d175a3ba",
        "md5": "082f211bb73aaa64ce1f85b4de2ec0e9",
        "sha256": "5d5024a07b186454274c3fb4d7695f1c75aaa8e0cfa2525b424800f7caf9832c"
      },
      "downloads": -1,
      "filename": "aiida_s3-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "082f211bb73aaa64ce1f85b4de2ec0e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16487,
      "upload_time": "2023-02-27T15:47:08",
      "upload_time_iso_8601": "2023-02-27T15:47:08.306193Z",
      "url": "https://files.pythonhosted.org/packages/6d/2c/7128d9f7b49cb7c63dd8804381fd2536bd5e052b1b4b8ede9ab6d175a3ba/aiida_s3-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "3d371ed263a07274d2c3bf5ef597e3eb434ec44833430b4066ded3bc639580b0",
        "md5": "4c2c6dbb6c3e8e7a594e639f17814f08",
        "sha256": "45de90b938a05715f151fa60c187252b310d497a64e8fb2b1ec2d86a5857a415"
      },
      "downloads": -1,
      "filename": "aiida-s3-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4c2c6dbb6c3e8e7a594e639f17814f08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 12805,
      "upload_time": "2023-02-27T15:47:09",
      "upload_time_iso_8601": "2023-02-27T15:47:09.772706Z",
      "url": "https://files.pythonhosted.org/packages/3d/37/1ed263a07274d2c3bf5ef597e3eb434ec44833430b4066ded3bc639580b0/aiida-s3-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}