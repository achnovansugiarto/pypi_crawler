{
  "info": {
    "author": "austinjp",
    "author_email": "austin.plunkett+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: Free for non-commercial use",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Flask JWT Trivial\n\n*Pre-alpha, do not use!* Use [Flask JWT Extended](https://github.com/vimalloc/flask-jwt-extended) instead.\n\n\n## About\n\nOnly bearer tokens are supported, no other methods.\n\nThe only valid algorithms for `create_access_token()` are `HS256`, `HS384`, or `HS512`. The default is `HS256`.\n\n\n## Installation\n\nInstall into a virtual environment:\n\n```\nvirtualenv --python python3 venv\nsource venv/bin/activate\npip install flask-jwt-trivial\n```\n\n\n## Example usage\n\nFirst, generate a token and send it to the user. For them to access private routes, they must present that token as a bearer token, using the `Authorization` header, which will look something like this:\n\n```\nAuthorization: Bearer <token-here>\n```\n\nSimple example follows. Note, it is up to you to manage the tokens, revoking them, checking expiry, etc.\n\n\n```python\nfrom flask import Flask, jsonify, abort\nfrom flask_jwt_trivial import Flask_JWT_Trivial\n\n\napp = Flask(__name__)\n\n# Don't actually put this in your source code.\n# Maybe read it from an environment variable.\npassphrase = \"VERY-SECRET-PASSPHRASE\"\n\n# Initialise your Flask app like so:\nflask_jwt_trivial = Flask_JWT_Trivial()\nflask_jwt_trivial.init_app(\n    app,\n    passphrase=passphrase\n)\n\n@app.route(\"/private\")\n@flask_jwt_trivial.jwt_required\ndef private():\n    return \"Your token worked.\"\n\ndef authorised_to_receive_a_token():\n    # Put your logic here, e.g. check the Flask\n    # request and look up details in a database.\n    if ok:\n        return True\n    else:\n        return False\n\n@app.route(\"/get_token\")\ndef get_token():\n    if not authorised_to_receive_a_token():\n        abort(401) # Unauthorized\n\n    token = flask_jwt_trivial.create_access_token()\n\n    return jsonify(\n        \"data\": {\n            \"type\": \"tokens\",\n            \"attributes\": {\n                \"token\": token,\n                \"category\": \"Bearer\",\n            }\n        }\n    )\n```\n\nOptions for `flask_jwt_trivial.init_app()` are:\n\n  - `app`: Compulsory first arg, the Flask app.\n  - `algorithm`: Optional. String. Algorithm used to encode/decode. Defaults to `\"HS256\"`.\n  - `algorithms`: Optional. List. Valid algorithms. Defaults to `[\"HS256\",\"HS384\",\"HS512\"]`.\n  - `audience`: Optional. String. JWT `aud` parameter.\n  - `issuer`: Optional. String. JWT `iss` parameter, e.g. your organisation.\n  - `retfunc`: Optional. A function that will be called on return. Useful if you want to capture the returned data and do something with it first.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/subsect/flask_jwt_trivial/",
    "keywords": "",
    "license": "CC BY-NC-SA 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-jwt-trivial",
    "package_url": "https://pypi.org/project/flask-jwt-trivial/",
    "platform": "any",
    "project_url": "https://pypi.org/project/flask-jwt-trivial/",
    "project_urls": {
      "Homepage": "http://github.com/subsect/flask_jwt_trivial/"
    },
    "release_url": "https://pypi.org/project/flask-jwt-trivial/0.0.3/",
    "requires_dist": [
      "cryptography (>=2.9.2)",
      "Flask (>=1.0.2)",
      "python-jose[cryptography] (>=3.1.0)",
      "Werkzeug (>=0.15.3)"
    ],
    "requires_python": "~=3.6",
    "summary": "Pre-alpha, do not use. Provides Flask with *very basic* JavaScript Web Tokens",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7629991,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ad8f4f73156f5bd28b88996ec22ffe943b4024612766421618221cc684954e9",
          "md5": "8a918d9b6f7266f86f7c72a0bb5ee266",
          "sha256": "7b603acee8954a4361603e2bf9e339756252ada79ca9488626431b63e9004c74"
        },
        "downloads": -1,
        "filename": "flask_jwt_trivial-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a918d9b6f7266f86f7c72a0bb5ee266",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 10691,
        "upload_time": "2020-07-04T17:40:34",
        "upload_time_iso_8601": "2020-07-04T17:40:34.250132Z",
        "url": "https://files.pythonhosted.org/packages/5a/d8/f4f73156f5bd28b88996ec22ffe943b4024612766421618221cc684954e9/flask_jwt_trivial-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "190a056525261dddd8daafbcf51f68285844f7d08619bbd06201fe07e3f989cd",
          "md5": "f5f2d95eda503fd116fbc9151295da6b",
          "sha256": "8fb98bc671f004ddb1ebecb98f10034ee2c440d100066c09916fa4cf502e4532"
        },
        "downloads": -1,
        "filename": "flask_jwt_trivial-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f5f2d95eda503fd116fbc9151295da6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 3959,
        "upload_time": "2020-07-04T17:40:36",
        "upload_time_iso_8601": "2020-07-04T17:40:36.379437Z",
        "url": "https://files.pythonhosted.org/packages/19/0a/056525261dddd8daafbcf51f68285844f7d08619bbd06201fe07e3f989cd/flask_jwt_trivial-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ad8f4f73156f5bd28b88996ec22ffe943b4024612766421618221cc684954e9",
        "md5": "8a918d9b6f7266f86f7c72a0bb5ee266",
        "sha256": "7b603acee8954a4361603e2bf9e339756252ada79ca9488626431b63e9004c74"
      },
      "downloads": -1,
      "filename": "flask_jwt_trivial-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a918d9b6f7266f86f7c72a0bb5ee266",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 10691,
      "upload_time": "2020-07-04T17:40:34",
      "upload_time_iso_8601": "2020-07-04T17:40:34.250132Z",
      "url": "https://files.pythonhosted.org/packages/5a/d8/f4f73156f5bd28b88996ec22ffe943b4024612766421618221cc684954e9/flask_jwt_trivial-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "190a056525261dddd8daafbcf51f68285844f7d08619bbd06201fe07e3f989cd",
        "md5": "f5f2d95eda503fd116fbc9151295da6b",
        "sha256": "8fb98bc671f004ddb1ebecb98f10034ee2c440d100066c09916fa4cf502e4532"
      },
      "downloads": -1,
      "filename": "flask_jwt_trivial-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f5f2d95eda503fd116fbc9151295da6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 3959,
      "upload_time": "2020-07-04T17:40:36",
      "upload_time_iso_8601": "2020-07-04T17:40:36.379437Z",
      "url": "https://files.pythonhosted.org/packages/19/0a/056525261dddd8daafbcf51f68285844f7d08619bbd06201fe07e3f989cd/flask_jwt_trivial-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}