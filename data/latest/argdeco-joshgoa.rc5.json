{
  "info": {
    "author": "JoshGoA",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Basque",
      "Natural Language :: English",
      "Natural Language :: Spanish",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Documentation",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# argdeco\n\n> Unopinionated argparse wrapper\n\n**NOTE**: The *EXACT* same decorating order as regular argparse *MUST* be respected\n\n## Why **argdeco**?\n\nThere are so many libraries out there for writing command line utilities; why does **argdeco** exist?\n\nThis question is easy to answer: because there is not a single command line utility for Python out there which ticks the following boxes: ([sound familiar?](https://click.palletsprojects.com/en/7.x/why/))\n\n* supports class callback method decoration and method instance binding with class instance forwarding (thank you [Graham Dumpleton](https://github.com/GrahamDumpleton) for [wrapt](https://github.com/GrahamDumpleton/wrapt)!)\n\n* supports callback callable instance binding with **argparse** context or parser instance forwarding\n\n* shares the *EXACT* same API as **argparse** using decorators\n\n## Installation\n\nYou can get the library directly from PyPI:\n\n```sh\n$ pip install argdeco-JoshGoA\n```\n\nThe installation into a [virtualenv](https://github.com/pypa/virtualenv) (or [pipenv](https://github.com/pypa/pipenv)) is heavily recommended.\n\n## API reference\n\n* **argdeco.argument_parser**(wrapped=None, parser_class=argparse.ArgumentParser, ctx=False, prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=\"-\", fromfile_prefix_chars=None, argument_default=None, conflict_handler=\"error\", add_help=True, allow_abbrev=True)\n\n  * Create a new ArgumentParser object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:\n\n      * wrapped - The callback callable (default: None)\n\n      * parser_class - The class to instantiate the parser (default: argparse.ArgumentParser)\n\n      * ctx - Pass the **argparse** context or parser instance to the callback callable (default: False)\n\n      * prog - The name of the program (default: sys.argv[0])\n\n      * usage - The string describing the program usage (default: generated from arguments added to parser)\n\n      * description - Text to display before the argument help (default: __doc__)\n\n      * epilog - Text to display after the argument help (default: none)\n\n      * parents - A list of ArgumentParser objects whose arguments should also be included\n\n      * formatter_class - A class for customizing the help output\n\n      * prefix_chars - The set of characters that prefix optional arguments (default: \"-\")\n\n      * fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None)\n\n      * argument_default - The global default value for arguments (default: None)\n\n      * conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary)\n\n      * add_help - Add a -h/--help option to the parser (default: True)\n\n      * allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)\n\n```py\n>>> import argdeco\n>>> @argdeco.add_argument(\"--foo\", help=\"foo help\")\n... @argdeco.argument_parser\n... def parser(foo):\n...     pass\n...\n```\n\n```py\n>>> parser([\"--help\"])\nusage: myprogram.py [-h] [--foo FOO]\n\noptional arguments:\n -h, --help  show this help message and exit\n --foo FOO   foo help\n```\n\n* **argdeco.add_argument**(name or flags..., group=None, [, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])\n\n  * Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:\n\n    * name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.\n\n    * group - The group to add the argument. (default: None)\n\n    * action - The basic type of action to be taken when this argument is encountered at the command line.\n\n    * nargs - The number of command-line arguments that should be consumed.\n\n    * const - A constant value required by some action and nargs selections.\n\n    * default - The value produced if the argument is absent from the command line.\n\n    * type - The type to which the command-line argument should be converted.\n\n    * choices - A container of the allowable values for the argument.\n\n    * required - Whether or not the command-line option may be omitted (optionals only).\n\n    * help - A brief description of what the argument does.\n\n    * metavar - A name for the argument in usage messages.\n\n    * dest - The name of the attribute to be added to the object returned by parse_args().\n\n* **argdeco.add_subparsers**(wrapped=None, [title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])\n\n  * Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit. Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such sub-commands with the add_subparsers() method. The add_subparsers() method is normally called with no arguments and returns a special action object. This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.\n\n  * Description of parameters:\n\n    * wrapped - The callback callable (default: None)\n\n    * title - title for the sub-parser group in help output; by default “subcommands” if description is provided, otherwise uses title for positional arguments\n\n    * description - description for the sub-parser group in help output, by default None\n\n    * prog - usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument\n\n    * parser_class - class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)\n\n    * action - the basic type of action to be taken when this argument is encountered at the command line\n\n    * dest - name of the attribute under which sub-command name will be stored; by default None and no value is stored\n\n    * required - Whether or not a subcommand must be provided, by default False (added in 3.7)\n\n    * help - help for sub-parser group in help output, by default None\n\n    * metavar - string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}\n\n```py\n>>> # create the top-level parser\n...\n>>> @argdeco.add_subparsers(help=\"sub-command help\")\n... @argdeco.add_argument(\"--foo\", action=\"store_true\", help=\"foo help\")\n... @argdeco.argument_parser(prog=\"PROG\")\n... def parser(**kwargs):\n...     print(\"parser\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # create the parser for the \"a\" command\n...\n>>> @argdeco.add_argument(\"bar\", type=int, help=\"bar help\")\n... @argdeco.add_parser(parser, \"a\", help=\"a help\")\n... def parser_a(**kwargs):\n...     print(\"parser_a\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # create the parser for the \"a\" command\n...\n>>> @argdeco.add_argument(\"--baz\", choices=\"XYZ\", help=\"baz help\")\n... @argdeco.add_parser(parser, \"b\", help=\"b help\")\n... def parser_b(**kwargs):\n...     print(\"parser_b\")\n...     print(kwargs)\n...\n```\n\n```py\n>>> # parse some argument lists\n...\n>>> parser([\"a\", \"12\"])\nparser_a\n{\"foo\": False, \"bar\": 12}\n>>> parser([\"--foo\", \"b\", \"--baz\", \"Z\"])\nparser_b\n{\"foo\": True, \"baz\": \"Z\"}\n```\n\n* **argdeco.add_argument_group**(title=None, description=None)\n\n  * By default, ArgumentParser groups command-line arguments into “positional arguments” and “optional arguments” when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method:\n\n```py\n>>> @argdeco.add_argument(\"bar\", group=\"group\", help=\"bar help\")\n... @argdeco.add_argument(\"--foo\", group=\"group\", help=\"foo help\")\n... @argdeco.add_argument_group(\"group\")\n... @argdeco.argument_parser(prog=\"PROG\", add_help=False)\n... def parser(**kwargs):\n...     pass\n...\n>>> parser.print_help()\nusage: PROG [--foo FOO] bar\n\ngroup:\n  bar    bar help\n  --foo FOO  foo help\n```\n\n* **ardeco.add_mutually_exclusive_group**(required=False)\n\n```py\n>>> @argdeco.add_argument(\"--bar\", group=\"group\", action=\"store_false\")\n... @argdeco.add_argument(\"--foo\", group=\"group\", action=\"store_true\")\n... @argdeco.add_mutually_exclusive_group(\"group\")\n... @argdeco.argument_parser(prog=\"PROG\")\n... def parser(**kwargs):\n...     print(kwargs)\n...\n>>> parser([\"--foo\"])\n{\"foo\": True, \"bar\": True}\n>>> parser([\"--bar\"])\n{\"foo\": False, \"bar\": False}\n>>> parser([\"--foo\", \"--bar\"])\nusage: PROG [-h] [--foo | --bar]\nPROG: error: argument --bar: not allowed with argument --foo\n```\n\n## Advanced usage\n\n### Accessing attributes\n\n**argdeco** does *NOT* override decorated functions so that they can be accessed by the user easily if needed. In order to access the **argparse** context or parser instance, it is recommended to use context forwarding.\n\n```py\n>>> @argdeco.argument_parser\n... def prog(self):\n...     pass\n...\n>>> prog.__wrapped__\n<function prog at 0x0000029BCBFABF70>\n>>> prog.parser\nArgumentParser(prog=\"argdeco.py\", usage=None, description=None, formatter_class=<class \"argparse.HelpFormatter\">, conflict_handler=\"error\", add_help=True)\n```\n\n### Class method decoration\n\n**argdeco** supports class callback method decoration, unlike the big majority of CLI decorator libraries, without any difference as regular callback callable decoration.\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser\n...     def parser(self):\n...         pass\n...\n```\n\nDecorating a class will forward the arguments to the *\\_\\_init__* method (usually not the desired behaviour), as decorated callbacks will *ALWAYS* be treated as callables.\n\n```py\n>>> @argdeco.argument_parser\n... class Prog:\n...     pass\n...\n```\n\nDecorating the *\\_\\_call__* method will forward the arguments to the class itself, following standard decorator usage as specified by [wrapt](https://wrapt.readthedocs.io/en/latest/decorators.html#decorating-class-methods).\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser\n...     def __call__(self):\n...         pass\n...\n```\n\n### Context forwarding\n\nDecorated callback callables can get access to the **argparse** context or parser instance.\n\n```py\n>>> @argdeco.argument_parser(ctx=True, prog=\"PROG\")\n... def parser(ctx):\n...     ctx.print_help()\n...\n>>> parser([])\nusage: PROG [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nClass callback method context or parser instance forwarding is still respected on decorated class methods.\n\n```py\n>>> class Prog:\n...\n...     @argdeco.argument_parser(ctx=True, prog=\"PROG\")\n...     def __call__(self, ctx):\n...         ctx.print_help()\n...\n>>> prog = Prog()\n>>> prog([])\nusage: PROG [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JoshGoA/argdeco",
    "keywords": "argparse wrapt",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argdeco-JoshGoA",
    "package_url": "https://pypi.org/project/argdeco-JoshGoA/",
    "platform": "",
    "project_url": "https://pypi.org/project/argdeco-JoshGoA/",
    "project_urls": {
      "Homepage": "https://github.com/JoshGoA/argdeco",
      "Source": "https://github.com/pypa/argdeco"
    },
    "release_url": "https://pypi.org/project/argdeco-JoshGoA/1.2.1/",
    "requires_dist": [
      "wrapt"
    ],
    "requires_python": ">=3.8",
    "summary": "Unopinionated argparse wrapper",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8017165,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "393887af96b92d2ceeb324dc119d4ee55de09b0421a923f330753225eb1b317b",
          "md5": "ac2dcaef776b2f67eac8287020e4bb85",
          "sha256": "e4ce71743c0d3162fa65cd2f272a47b0b59fa89829f45c7a59a6995771302ad7"
        },
        "downloads": -1,
        "filename": "argdeco_JoshGoA-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac2dcaef776b2f67eac8287020e4bb85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6524,
        "upload_time": "2020-08-21T11:48:38",
        "upload_time_iso_8601": "2020-08-21T11:48:38.469291Z",
        "url": "https://files.pythonhosted.org/packages/39/38/87af96b92d2ceeb324dc119d4ee55de09b0421a923f330753225eb1b317b/argdeco_JoshGoA-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbb199560b95548abf02095a0481f5e1ac18289b266c0b25a4b6eb4f028e3c9c",
          "md5": "7cba38143022e308e56f422e96bd20ed",
          "sha256": "a57a05a9b0f92a24d1233c548a776bbc903b1516e9ca611508aad37e9e4aac8b"
        },
        "downloads": -1,
        "filename": "argdeco-JoshGoA-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cba38143022e308e56f422e96bd20ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7542,
        "upload_time": "2020-08-21T11:48:41",
        "upload_time_iso_8601": "2020-08-21T11:48:41.272864Z",
        "url": "https://files.pythonhosted.org/packages/db/b1/99560b95548abf02095a0481f5e1ac18289b266c0b25a4b6eb4f028e3c9c/argdeco-JoshGoA-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b0f89396fce2e8c02b9c8c704df124a9dfda83eef289d0d4d747f7102123a91",
          "md5": "90ed2e381ac6f8cb853007f4c79691f4",
          "sha256": "274b261140f96beb5d9c8cd20e3488f3df90c5b5e05646d4499880667fd6d249"
        },
        "downloads": -1,
        "filename": "argdeco_JoshGoA-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90ed2e381ac6f8cb853007f4c79691f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6627,
        "upload_time": "2020-08-21T11:56:41",
        "upload_time_iso_8601": "2020-08-21T11:56:41.672792Z",
        "url": "https://files.pythonhosted.org/packages/1b/0f/89396fce2e8c02b9c8c704df124a9dfda83eef289d0d4d747f7102123a91/argdeco_JoshGoA-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7127895d11656beac1079c3414f98838ecc7a46d9b244984d042b448a6d31c04",
          "md5": "e6c0afeafe86ebe7b2ff9ce2f588c995",
          "sha256": "df3df7abec22b326b551081dc0168d725ebf3bc0ab9575000b07db00d7c27ad4"
        },
        "downloads": -1,
        "filename": "argdeco-JoshGoA-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6c0afeafe86ebe7b2ff9ce2f588c995",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7681,
        "upload_time": "2020-08-21T11:56:43",
        "upload_time_iso_8601": "2020-08-21T11:56:43.350989Z",
        "url": "https://files.pythonhosted.org/packages/71/27/895d11656beac1079c3414f98838ecc7a46d9b244984d042b448a6d31c04/argdeco-JoshGoA-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eb8e2ac5b406612b2ad235ce99c74e33db01e41c5a6dc56b186210ef1cbc75f",
          "md5": "4185fcf947d0a57647c8c7858a4cc38d",
          "sha256": "7d328f36f4382124306d7fdd25cb8b84976fbbaf0a28b2fb466637c7d83fa498"
        },
        "downloads": -1,
        "filename": "argdeco_JoshGoA-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4185fcf947d0a57647c8c7858a4cc38d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6631,
        "upload_time": "2020-08-21T11:59:52",
        "upload_time_iso_8601": "2020-08-21T11:59:52.732424Z",
        "url": "https://files.pythonhosted.org/packages/5e/b8/e2ac5b406612b2ad235ce99c74e33db01e41c5a6dc56b186210ef1cbc75f/argdeco_JoshGoA-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca9a464e8900c1b61ff2ed91c224de3defd337d7213e3a7df0787c453485b97c",
          "md5": "e9497605bfabe27b9018a32504d2e194",
          "sha256": "744f14b298bace452bc91929c9137cabb5e7a03d8a0ab2b5d4a84c5f1eef6a03"
        },
        "downloads": -1,
        "filename": "argdeco-JoshGoA-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e9497605bfabe27b9018a32504d2e194",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7687,
        "upload_time": "2020-08-21T11:59:54",
        "upload_time_iso_8601": "2020-08-21T11:59:54.558391Z",
        "url": "https://files.pythonhosted.org/packages/ca/9a/464e8900c1b61ff2ed91c224de3defd337d7213e3a7df0787c453485b97c/argdeco-JoshGoA-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2ef0c43f98556d511ef1a59f5629a3d6c5b54c362e89143244f1f3749a9ebfd",
          "md5": "f7291619bd6e055f61e7fac0adfba4fd",
          "sha256": "97895fe6456c867d830baddf24fa329378109136bae2c98b0391c8e80be1176b"
        },
        "downloads": -1,
        "filename": "argdeco_JoshGoA-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7291619bd6e055f61e7fac0adfba4fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6685,
        "upload_time": "2020-08-22T10:35:24",
        "upload_time_iso_8601": "2020-08-22T10:35:24.641086Z",
        "url": "https://files.pythonhosted.org/packages/b2/ef/0c43f98556d511ef1a59f5629a3d6c5b54c362e89143244f1f3749a9ebfd/argdeco_JoshGoA-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd4ce39cc29e401996bbc0c8e14dcd9fa72614f4a61bdf838dbcd5e8fd313e4b",
          "md5": "b9b8ba9d731cd0569fea146b36c31976",
          "sha256": "e9e2918556bda91c3606753f0f5e9369b935b3c65138bc45f1cd8535cc35703a"
        },
        "downloads": -1,
        "filename": "argdeco-JoshGoA-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9b8ba9d731cd0569fea146b36c31976",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7817,
        "upload_time": "2020-08-22T10:35:26",
        "upload_time_iso_8601": "2020-08-22T10:35:26.795481Z",
        "url": "https://files.pythonhosted.org/packages/fd/4c/e39cc29e401996bbc0c8e14dcd9fa72614f4a61bdf838dbcd5e8fd313e4b/argdeco-JoshGoA-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6f00e329f1f32829d789fa7375ce1d166cb5b2b0f175f1208ee20076fad63b4",
          "md5": "a7053e8572686b73dd3d9e04fe0737f5",
          "sha256": "2824f21e8532a5295a6efa6de2f09cbb85d9112be7f30cad646986b12392cc27"
        },
        "downloads": -1,
        "filename": "argdeco_JoshGoA-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7053e8572686b73dd3d9e04fe0737f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6684,
        "upload_time": "2020-08-22T10:37:27",
        "upload_time_iso_8601": "2020-08-22T10:37:27.292773Z",
        "url": "https://files.pythonhosted.org/packages/e6/f0/0e329f1f32829d789fa7375ce1d166cb5b2b0f175f1208ee20076fad63b4/argdeco_JoshGoA-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bebc6fae91c0041c782244537a9da3a382d27aa696d8b96e72e25179cb55392c",
          "md5": "d2ee7de5c428e9aa49d2b077b0faeaff",
          "sha256": "5829355fbe25829b119b22f0abc642ed95c17a4c63840fac3970877bbad9626e"
        },
        "downloads": -1,
        "filename": "argdeco-JoshGoA-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2ee7de5c428e9aa49d2b077b0faeaff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7816,
        "upload_time": "2020-08-22T10:37:29",
        "upload_time_iso_8601": "2020-08-22T10:37:29.305182Z",
        "url": "https://files.pythonhosted.org/packages/be/bc/6fae91c0041c782244537a9da3a382d27aa696d8b96e72e25179cb55392c/argdeco-JoshGoA-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6f00e329f1f32829d789fa7375ce1d166cb5b2b0f175f1208ee20076fad63b4",
        "md5": "a7053e8572686b73dd3d9e04fe0737f5",
        "sha256": "2824f21e8532a5295a6efa6de2f09cbb85d9112be7f30cad646986b12392cc27"
      },
      "downloads": -1,
      "filename": "argdeco_JoshGoA-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7053e8572686b73dd3d9e04fe0737f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6684,
      "upload_time": "2020-08-22T10:37:27",
      "upload_time_iso_8601": "2020-08-22T10:37:27.292773Z",
      "url": "https://files.pythonhosted.org/packages/e6/f0/0e329f1f32829d789fa7375ce1d166cb5b2b0f175f1208ee20076fad63b4/argdeco_JoshGoA-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bebc6fae91c0041c782244537a9da3a382d27aa696d8b96e72e25179cb55392c",
        "md5": "d2ee7de5c428e9aa49d2b077b0faeaff",
        "sha256": "5829355fbe25829b119b22f0abc642ed95c17a4c63840fac3970877bbad9626e"
      },
      "downloads": -1,
      "filename": "argdeco-JoshGoA-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d2ee7de5c428e9aa49d2b077b0faeaff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7816,
      "upload_time": "2020-08-22T10:37:29",
      "upload_time_iso_8601": "2020-08-22T10:37:29.305182Z",
      "url": "https://files.pythonhosted.org/packages/be/bc/6fae91c0041c782244537a9da3a382d27aa696d8b96e72e25179cb55392c/argdeco-JoshGoA-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}