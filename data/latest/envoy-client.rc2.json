{
  "info": {
    "author": "BSGIP",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Envoy client\n\nA DER client for a 2030.5 server. Currently this is only a simple implementation of\ndevice registration as an aggregator. This will later be expanded to cover more complex\nexamples of both Aggregator Client and DER Client models.\n\n# Usage\n\nThis library is a very bare implementation, but can be used in two modes:\n- mock requests: in this mode, the client prints out requests that would be made\nfor a given registration process. This is useful if implementing the client in a different\nlanguage\n- real requests: use client certificate authentication to interact with a real server.\n\nA simple example making mock requests for an example system can be found in \n`scripts/generate_examples.py`. The usage examples below are based on this script.\n\n\n## Authorisation\n\nEvery request must use TLS client-side certificates to authenticate/authorise with the \nutility server. For interacting with the server, the simplest usage of this library is:\n\n```python\nfrom envoy_client.client import AggregatorClient\nfrom envoy_client.transport import RequestsTransport\nfrom envoy_client.auth import ClientCerticateAuth\n\ncert_path = '/path/to/client.cert'\n# The aggregator LFDI (long-form device identifier) is derived\n# from the client certificate and will be supplied to the aggregator/client\naggregator_lfdi = '0x21352135135'  \n\nclient = AggregatorClient(\n    transport=RequestsTransport(\n        'https://server-location', \n        auth=ClientCertificateAuth(\n            cert=cert_path\n        )),\n    lfdi=aggregator_lfdi\n)\n```\n\n## Registration\n\nUnder the 2030.5 server model, registration of a device requires a non-neglible number of \nrequests. The registration process requires all or most of these:\n- create `EndDevice`\n- add `DeviceInformation` to the `EndDevice`\n- add associated `DER` containers to the `EndDevice`\n- populate `DERCapability` for each associated `DER`\n- register the `EndDevice` to an associated `ConnectionPoint`\n\nThese steps are explained in more detail below.\n\n### POST EndDevice\n\nThis registers the `EndDevice` with the server, which corresponds (essentially) to the site\ncontroller. Note that under the aggregator model, the aggregator is also an `EndDevice`.\n\n> Note: The long-form device identifier (LFDI) is a 160-bit unique identifier that is normally \ndisplayed as a hexadecimal string. For `EndDevice`s that use a TLS certificate to communicate\nwith the server (e.g. the aggregator itself), this is derived from the certificate fingerprint.\nFor `EndDevice`s that do not have a certificate issued, (e.g. aggregator-managed controllers),\nthis should correspond to a globally unique identifier that the aggregator already uses, \nappropriately padded or truncated. (Note that, since the short-form device identifier (SFDI) \nis based on the left-truncated 36 bits of the LFDI, the LFDI should not be left-padded).\n\n> When using the models in this library, the SFDI is automatically calculated from the supplied\nLFDI. If implemented separately, use the following information:\n\n> The SFDI SHALL be the certificate fingerprint left-truncated to 36 bits. For display purposes, this SHALL be expressed as 11 decimal (base 10) digits, with an additional sum-of-digits checksum digit right- concatenated. For example:\nLFDI left truncated to 36 bits: 0x3E4F45AB3\nExpressed as a decimal: 16726121139\nChecksum added: 167261211391\n\n\n#### Example\n```\nPOST https://server-location/edev\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<EndDevice>\n        <deviceCategory>262144</deviceCategory>\n        <lFDI>0x21352135135</lFDI>\n        <sFDI>356563223726</sFDI>\n        <changedTime>0</changedTime>\n        <postRate>0</postRate>\n        <enabled>true</enabled>\n</EndDevice>\n\n```\n\nThe server responds with a `201: CREATED` response and a header `location: /edev/3`\nto indicate the location of the created resource. This value is then used in the subsequent \nrequests and is referenced in these examples as {edevID}\n\n\n### PUT DeviceInformation\n\n`DeviceInformation` contains identification and other information about the device that changes very infrequently, typically only when updates are applied, if ever.\n\n#### Example\n\n```\nPUT https://server-location/edev/1/di\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<DeviceInformation>\n        <functionsImplemented>524288</functionsImplemented>\n        <gpsLocation>\n                <lat>-35.0</lat>\n                <lon>144.0</lon>\n        </gpsLocation>\n        <lFDI>1172794507551</lFDI>\n        <mfDate>0</mfDate>\n        <mfHwVer>foo</mfHwVer>\n        <mfID>1234567</mfID>\n        <mfInfo>Acme Corp</mfInfo>\n        <mfModel>Acme 2000 Pro+</mfModel>\n        <mfSerNum>ACME1234</mfSerNum>\n        <primaryPower>0</primaryPower>\n        <secondaryPower>0</secondaryPower>\n        <swActTime>0</swActTime>\n        <swVer>NA</swVer>\n</DeviceInformation>\n```\n\n### POST DER\nAn `EndDevice` can have multiple `DER` resources linked to it. For the purposes of this \nexample, it is assumed that there is only a single `DER` resource under each `EndDevice`.\n\n```\nPOST https://server-location/edev/{edevID}/der\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<DER></DER>\n```\n\nThe server responds with a `201: CREATED` response and a header `location: /edev/{edevID}/der/5`\nto indicate the location of the resource. For the following examples, this is referenced by\n{derID}.\n\n\n### PUT DER Capability\nWhile a `DER` resource can contain information about `DERSettings`, `DERStatus`, `DERCapability` \nand `DERAvailability`, we are only interested in `DERCapability`, which exposes the nameplate\nratings of the DER.\n\n\n#### Example\n\n\n\n```\nPUT https://server-location/edev/{edevID}/der/{derID}/dercap\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<DERCapability>\n        <modesSupported>1</modesSupported>\n        <rtgMaxW>\n                <value>5000</value>\n                <multiplier>0</multiplier>\n        </rtgMaxW>\n        <type>83</type>\n</DERCapability>\n```\n\n\n### PUT ConnectionPoint\n\nThis is an extension to the standard that allows the aggregator or DER client to provide\nadditional information about the identification of the connection point to which the\ndevice is connected (generally for metering purposes).\n\n#### Example\n\nThe client PUTs a `ConnectionPoint` object containing the site NMI (as `meterID`).\n\n```\nPUT https://server-location/edev/1/cp\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ConnectionPoint>\n        <connectionPointID></connectionPointID>\n        <meterID>NMI123</meterID>\n</ConnectionPoint>\n```\n\nServer responds with `200: OK`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bsgip/envoy-client",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "envoy-client",
    "package_url": "https://pypi.org/project/envoy-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/envoy-client/",
    "project_urls": {
      "Homepage": "https://github.com/bsgip/envoy-client"
    },
    "release_url": "https://pypi.org/project/envoy-client/0.1.1/",
    "requires_dist": [
      "requests (>=2.20)",
      "xmltodict (>=0.12)",
      "pydantic (>=1.8)"
    ],
    "requires_python": ">=3.6",
    "summary": "2030.5 DER Client",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11259006,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17acfa836157240d9323ea0c1bdcd2660a3b9bef8dd1603a231ec1caf741311e",
          "md5": "8772b707fb695b2199b6ffd2b70e1cdc",
          "sha256": "e6b2bd66b94b1851925d48b6272ecf167231a2bc38316c02b6872b577feeba82"
        },
        "downloads": -1,
        "filename": "envoy_client-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8772b707fb695b2199b6ffd2b70e1cdc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4424,
        "upload_time": "2021-08-24T03:18:18",
        "upload_time_iso_8601": "2021-08-24T03:18:18.717983Z",
        "url": "https://files.pythonhosted.org/packages/17/ac/fa836157240d9323ea0c1bdcd2660a3b9bef8dd1603a231ec1caf741311e/envoy_client-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85d6365243d13b00bb06934331a0e33f8f96c2388c5e367776fbe6848376c9b4",
          "md5": "8f665eb1343bd6cc8b4f4ddc3abec0a8",
          "sha256": "8f9378a8daab48c983228f6438d8238d3f927232524aadcdbda26104b1e9df9d"
        },
        "downloads": -1,
        "filename": "envoy-client-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f665eb1343bd6cc8b4f4ddc3abec0a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4558,
        "upload_time": "2021-08-24T03:18:19",
        "upload_time_iso_8601": "2021-08-24T03:18:19.937278Z",
        "url": "https://files.pythonhosted.org/packages/85/d6/365243d13b00bb06934331a0e33f8f96c2388c5e367776fbe6848376c9b4/envoy-client-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e24aee18a2cdbaae613f484751586b571ee25109f520957769bfdfebe8792fb",
          "md5": "9b32a274325d2fe42595912a0feb9371",
          "sha256": "9efb2881d5cac513c07956ba8ad093df91e9b6f8608eba98d5d52695dd1df367"
        },
        "downloads": -1,
        "filename": "envoy_client-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b32a274325d2fe42595912a0feb9371",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14687,
        "upload_time": "2021-08-24T04:23:47",
        "upload_time_iso_8601": "2021-08-24T04:23:47.725274Z",
        "url": "https://files.pythonhosted.org/packages/1e/24/aee18a2cdbaae613f484751586b571ee25109f520957769bfdfebe8792fb/envoy_client-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89b09ee1b93042e33baa3db633f172bac6ec604872350ea842d1776dc59da15",
          "md5": "dd9afd00e5219e64bd9ba910b1b837db",
          "sha256": "c2d5f0948ef925f032332305909bf974c42750c622a613ff8c4e77d3d69c956b"
        },
        "downloads": -1,
        "filename": "envoy-client-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd9afd00e5219e64bd9ba910b1b837db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15191,
        "upload_time": "2021-08-24T04:23:49",
        "upload_time_iso_8601": "2021-08-24T04:23:49.290076Z",
        "url": "https://files.pythonhosted.org/packages/b8/9b/09ee1b93042e33baa3db633f172bac6ec604872350ea842d1776dc59da15/envoy-client-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e24aee18a2cdbaae613f484751586b571ee25109f520957769bfdfebe8792fb",
        "md5": "9b32a274325d2fe42595912a0feb9371",
        "sha256": "9efb2881d5cac513c07956ba8ad093df91e9b6f8608eba98d5d52695dd1df367"
      },
      "downloads": -1,
      "filename": "envoy_client-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b32a274325d2fe42595912a0feb9371",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14687,
      "upload_time": "2021-08-24T04:23:47",
      "upload_time_iso_8601": "2021-08-24T04:23:47.725274Z",
      "url": "https://files.pythonhosted.org/packages/1e/24/aee18a2cdbaae613f484751586b571ee25109f520957769bfdfebe8792fb/envoy_client-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b89b09ee1b93042e33baa3db633f172bac6ec604872350ea842d1776dc59da15",
        "md5": "dd9afd00e5219e64bd9ba910b1b837db",
        "sha256": "c2d5f0948ef925f032332305909bf974c42750c622a613ff8c4e77d3d69c956b"
      },
      "downloads": -1,
      "filename": "envoy-client-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dd9afd00e5219e64bd9ba910b1b837db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15191,
      "upload_time": "2021-08-24T04:23:49",
      "upload_time_iso_8601": "2021-08-24T04:23:49.290076Z",
      "url": "https://files.pythonhosted.org/packages/b8/9b/09ee1b93042e33baa3db633f172bac6ec604872350ea842d1776dc59da15/envoy-client-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}