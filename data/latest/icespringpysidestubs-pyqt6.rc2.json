{
  "info": {
    "author": "BaiJiFeiLong",
    "author_email": "baijifeilong@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# IceSpringPySideStubs\n\nPySide/PyQt stubs with Qt signals and Qt documents and more.\n\nSupported Qt bindings now: PySide2, PySide6, PyQt5, PyQt6.\n\n## Official sites\n\n- Home: [https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html](https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html)\n- Github: [https://github.com/baijifeilong/IceSpringPySideStubs](https://github.com/baijifeilong/IceSpringPySideStubs)\n- PyPI(PySide2): [https://pypi.org/project/IceSpringPySideStubs-PySide2](https://pypi.org/project/IceSpringPySideStubs-PySide2)\n- PyPI(PySide6): [https://pypi.org/project/IceSpringPySideStubs-PySide6](https://pypi.org/project/IceSpringPySideStubs-PySide6)\n- PyPI(PyQt5): [https://pypi.org/project/IceSpringPySideStubs-PyQt5](https://pypi.org/project/IceSpringPySideStubs-PyQt5)\n- PyPI(PyQt6): [https://pypi.org/project/IceSpringPySideStubs-PyQt6](https://pypi.org/project/IceSpringPySideStubs-PyQt6)\n\n## Features\n\n- Qt official documents support\n- Qt signals support\n- More correct type annotations\n- Recognition of unknown method names\n- Better performance: one class one file\n- More editable: one class one file\n- Clean: all codes are well formatted\n- Direct link to the Official Qt site\n\n## Known issues\n\n- Unknown method name recognition not worked in PyCharm/IDEA\n\n### Unknown method name recognition not worked in PyCharm/IDEA\n\nYou should remove the PySide/PyQt skeleton generated by PyCharm, and make the skeleton root folder only-read to prevent regeneration.\n\n## Install\n\n- PySide2: `pip install IceSpringPySideStubs-PySide2`\n- PySide6: `pip install IceSpringPySideStubs-PySide6`\n- PyQt5: `pip install IceSpringPySideStubs-PyQt5`\n- PyQt6: `pip install IceSpringPySideStubs-PyQt6`\n\n## Usage\n\nOut of the box\n\n## Build\n\n### Prerequisites\n\nOffline Qt documents are required. If not, download them:\n\n1. Install [Zeal](https://zealdocs.org/). `scoop install zeal` for Windows users.\n2. Open `Zeal`, Download `Qt5` and `Qt6` from `Docsets`\n\n### Build steps\n\n1. `git clone https://github.com/baijifeilong/IceSpringPySideStubs`\n2. `cd IceSpringPySideStubs`\n3. `python -mvenv venv`\n4. `./venv/Scripts/pip.exe install -r requirements.txt`\n5. `vim main.py` Change `docFilenames` if your `Qt` document wasn't downloaded by `scoop`+`zeal`\n6. `./venv/Scripts/python.exe main.py` Generate stubs in `target` folder.\n7. `./venv/Scripts/python.exe build.py` Generate `.whl` package in `target` folder.\n8. `./venv/Scripts/pip.exe install __generated_whl_package__.whl` Install the `.whl` package\n\n## License\n\nMIT\n\n## Example snippets\n\n```python\nimport typing\n\nimport PySide2.QtCore\n\n\nclass QObject(object):\n    \"\"\"\n    https://doc.qt.io/qt-5/qobject.html\n\n    **Detailed Description**\n\n    QObject is the heart of the Qt **Object Model** . The central feature in\n    this model is a very powerful mechanism for seamless object communication\n    called **signals and slots** . You can connect a signal to a slot with\n    **connect** () and destroy the connection with **disconnect** (). To avoid\n    never ending notification loops you can temporarily block signals with\n    **blockSignals** (). The protected functions **connectNotify** () and\n    **disconnectNotify** () make it possible to track connections.\n\n    QObjects organize themselves in **object trees** . When you create a QObject\n    with another object as parent, the object will automatically add itself to\n    the parent\\'s **children** () list. The parent takes ownership of the object;\n    i.e., it will automatically delete its children in its destructor. You can\n    look for an object by name and optionally type using **findChild** () or\n    **findChildren** ().\n\n    Every object has an **objectName** () and its class name can be found via\n    the corresponding **metaObject** () (see **QMetaObject::className** ()). You\n    can determine whether the object\\'s class inherits another class in the\n    QObject inheritance hierarchy by using the **inherits** () function.\n\n    When an object is deleted, it emits a **destroyed** () signal. You can catch\n    this signal to avoid dangling references to QObjects.\n\n    QObjects can receive events through **event** () and filter the events of\n    other objects. See **installEventFilter** () and **eventFilter** () for\n    details. A convenience handler, **childEvent** (), can be reimplemented to\n    catch child events.\n\n    Last but not least, QObject provides the basic timer support in Qt; see\n    **QTimer**  for high-level support for timers.\n\n    Notice that the **Q_OBJECT**  macro is mandatory for any object that\n    implements signals, slots or properties. You also need to run the **Meta\n    Object Compiler**  on the source file. We strongly recommend the use of this\n    macro in all subclasses of QObject regardless of whether or not they\n    actually use signals, slots and properties, since failure to do so may lead\n    certain functions to exhibit strange behavior.\n\n    All Qt widgets inherit QObject. The convenience function **isWidgetType** ()\n    returns whether an object is actually a widget. It is much faster than\n    **qobject_cast** <**QWidget**  *>( **obj** ) or **obj** ->**inherits**\n    (\"**QWidget** \").\n\n    Some QObject functions, e.g. **children** (), return a **QObjectList** .\n    **QObjectList**  is a typedef for **QList** <QObject *>.\n\n    **Thread Affinity**\n\n    A QObject instance is said to have a **thread affinity** , or that it\n    **lives** in a certain thread. When a QObject receives a **queued signal**\n    or a **posted event** , the slot or event handler will run in the thread\n    that the object lives in.\n\n    **Note:** If a QObject has no thread affinity (that is, if **thread** ()\n    returns zero), or if it lives in a thread that has no running event loop,\n    then it cannot receive queued signals or posted events.\n\n    By default, a QObject lives in the thread in which it is created. An\n    object\\'s thread affinity can be queried using **thread** () and changed\n    using **moveToThread** ().\n\n    All QObjects must live in the same thread as their parent. Consequently:\n\n    * **setParent** () will fail if the two QObjects involved live in different\n    threads.\n      * When a QObject is moved to another thread, all its children\n    will be automatically moved too.\n      * **moveToThread** () will fail if the\n    QObject has a parent.\n      * If QObjects are created within **QThread::run**\n    (), they cannot become children of the **QThread**  object because the\n    **QThread**  does not live in the thread that calls **QThread::run** ().\n\n    **Note:** A QObject\\'s member variables **do not** automatically become its\n    children. The parent-child relationship must be set by either passing a\n    pointer to the child\\'s **constructor** , or by calling **setParent** ().\n    Without this step, the object\\'s member variables will remain in the old\n    thread when **moveToThread** () is called.\n\n    **No Copy Constructor or Assignment Operator**\n\n    QObject has neither a copy constructor nor an assignment operator. This is\n    by design. Actually, they are declared, but in a `private` section with the\n    macro **Q_DISABLE_COPY** (). In fact, all Qt classes derived from QObject\n    (direct or indirect) use this macro to declare their copy constructor and\n    assignment operator to be private. The reasoning is found in the discussion\n    on **Identity vs Value**  on the Qt **Object Model**  page.\n\n    The main consequence is that you should use pointers to QObject (or to your\n    QObject subclass) where you might otherwise be tempted to use your QObject\n    subclass as a value. For example, without a copy constructor, you can\\'t use\n    a subclass of QObject as the value to be stored in one of the container\n    classes. You must store pointers.\n\n    **Auto-Connection**\n\n    Qt\\'s meta-object system provides a mechanism to automatically connect\n    signals and slots between QObject subclasses and their children. As long as\n    objects are defined with suitable object names, and slots follow a simple\n    naming convention, this connection can be performed at run-time by the\n    **QMetaObject::connectSlotsByName** () function.\n\n    **uic**  generates code that invokes this function to enable auto-connection\n    to be performed between widgets on forms created with **Qt Designer**. More\n    information about using auto-connection with **Qt Designer** is given in the\n    **Using a Designer UI File in Your C++ Application**  section of the **Qt\n    Designer** manual.\n\n    **Dynamic Properties**\n\n    From Qt 4.2, dynamic properties can be added to and removed from QObject\n    instances at run-time. Dynamic properties do not need to be declared at\n    compile-time, yet they provide the same advantages as static properties and\n    are manipulated using the same API - using **property** () to read them and\n    **setProperty** () to write them.\n\n    From Qt 4.3, dynamic properties are supported by **Qt Designer** , and both\n    standard Qt widgets and user-created forms can be given dynamic properties.\n\n    **Internationalization (I18n)**\n\n    All QObject subclasses support Qt\\'s translation features, making it possible\n    to translate an application\\'s user interface into different languages.\n\n    To make user-visible text translatable, it must be wrapped in calls to the\n    **tr** () function. This is explained in detail in the **Writing Source Code\n    for Translation**  document.\n\n    **See also** **QMetaObject** , **QPointer** , **QObjectCleanupHandler** ,\n    **Q_DISABLE_COPY** (), and **Object Trees & Ownership** .\n    \"\"\"\n\n    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject] = ...) -> None:\n        \"\"\"\n        https://doc.qt.io/qt-5/qobject.html#QObject\n\n        **QObject::QObject(QObject * parent = nullptr)**\n\n        Constructs an object with parent object **parent**.\n\n        The parent of an object may be viewed as the object's owner. For\n        instance, a **dialog box**  is the parent of the **OK** and **Cancel**\n        buttons it contains.\n\n        The destructor of a parent object destroys all child objects.\n\n        Setting **parent** to `nullptr` constructs an object with no parent. If\n        the object is a widget, it will become a top-level window.\n\n        **Note:** This function can be invoked via the meta-object system and\n        from QML. See **Q_INVOKABLE** .\n\n        **See also** **parent** (), **findChild** (), and **findChildren** ().\n        \"\"\"\n        ...\n\n    def objectName(self) -> str:\n        \"\"\"\n        https://doc.qt.io/qt-5/qobject.html#objectName-prop\n\n        **objectName : QString**\n\n        This property holds the name of this object\n\n        You can find an object by name (and type) using **findChild** (). You\n        can find a set of objects with **findChildren** ().\n\n        **qDebug** (\"MyClass::setPrecision(): (%s) invalid precision %f\",\n        **qPrintable** (objectName()), newPrecision);\n\n        By default, this property contains an empty string.\n\n        **Access functions:**\n\n        QString **objectName** () const\n        void **setObjectName** (const QString\n        & **name** )\n\n        **Notifier signal:**\n\n        void ****objectNameChanged** ** (const QString & **objectName** )[see\n        note below]\n\n        **Note:** This is a private signal. It can be used in signal connections\n        but cannot be emitted by the user.\n\n        **See also** **metaObject** () and **QMetaObject::className** ().\n\n        **Member Function Documentation**\n        \"\"\"\n        ...\n\n    def setObjectName(self, name: str) -> None:\n        \"\"\"\n        https://doc.qt.io/qt-5/qobject.html#objectName-prop\n\n        **objectName : QString**\n\n        This property holds the name of this object\n\n        You can find an object by name (and type) using **findChild** (). You\n        can find a set of objects with **findChildren** ().\n\n        **qDebug** (\"MyClass::setPrecision(): (%s) invalid precision %f\",\n        **qPrintable** (objectName()), newPrecision);\n\n        By default, this property contains an empty string.\n\n        **Access functions:**\n\n        QString **objectName** () const\n        void **setObjectName** (const QString\n        & **name** )\n\n        **Notifier signal:**\n\n        void ****objectNameChanged** ** (const QString & **objectName** )[see\n        note below]\n\n        **Note:** This is a private signal. It can be used in signal connections\n        but cannot be emitted by the user.\n\n        **See also** **metaObject** () and **QMetaObject::className** ().\n\n        **Member Function Documentation**\n        \"\"\"\n        ...\n\n    @property\n    def objectNameChanged(self) -> PySide2.QtCore.SignalInstance:\n        \"\"\"\n        https://doc.qt.io/qt-5/qobject.html#objectNameChanged\n\n        **[signal] void QObject::objectNameChanged(const QString & objectName\n        )**\n\n        This signal is emitted after the object's name has been changed. The new\n        object name is passed as **objectName**.\n\n        **Note:** This is a private signal. It can be used in signal connections\n        but cannot be emitted by the user.\n\n        **Note:** Notifier signal for property **objectName** .\n\n        **See also** **QObject::objectName** .\n        \"\"\"\n        ...\n\n# More..........................................................................\n# Lines.........................................................................\n# Here..........................................................................\n# Are...........................................................................\n# Omitted.......................................................................\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/baijifeilong/IceSpringPySideStubs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "IceSpringPySideStubs-PyQt6",
    "package_url": "https://pypi.org/project/IceSpringPySideStubs-PyQt6/",
    "platform": "",
    "project_url": "https://pypi.org/project/IceSpringPySideStubs-PyQt6/",
    "project_urls": {
      "Homepage": "https://github.com/baijifeilong/IceSpringPySideStubs"
    },
    "release_url": "https://pypi.org/project/IceSpringPySideStubs-PyQt6/1.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "PyQt6 stubs with Qt signals and Qt documentations and more",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12505592,
  "releases": {
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed57bbe511fc34fdbed976ffea5e5431a159d3ec21cddc5a3f88ea362070f7a2",
          "md5": "c040dc4202fac33c3c002879f4ce28e1",
          "sha256": "c27d7d127c7195c64203ae19fcea0524cfb68da4c79c91803a6972b9dde29b67"
        },
        "downloads": -1,
        "filename": "IceSpringPySideStubs_PyQt6-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c040dc4202fac33c3c002879f4ce28e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2968360,
        "upload_time": "2022-01-07T10:20:17",
        "upload_time_iso_8601": "2022-01-07T10:20:17.837610Z",
        "url": "https://files.pythonhosted.org/packages/ed/57/bbe511fc34fdbed976ffea5e5431a159d3ec21cddc5a3f88ea362070f7a2/IceSpringPySideStubs_PyQt6-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbeab714b9b9ccdb9e47e4436f81f27e5d731d9a6d766ec1986428758f87abe5",
          "md5": "a88da26bab81ce7a997b6bd1cc7e4241",
          "sha256": "38ff536874d798bdfe55af5f7a4e757dddcb070a5467ad218ed88c43ef2317cd"
        },
        "downloads": -1,
        "filename": "IceSpringPySideStubs-PyQt6-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a88da26bab81ce7a997b6bd1cc7e4241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2219924,
        "upload_time": "2022-01-07T10:20:37",
        "upload_time_iso_8601": "2022-01-07T10:20:37.172603Z",
        "url": "https://files.pythonhosted.org/packages/db/ea/b714b9b9ccdb9e47e4436f81f27e5d731d9a6d766ec1986428758f87abe5/IceSpringPySideStubs-PyQt6-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cd798c98fc44cde1abdf77794974346504baa00af39bf24d9cbc22272641d42",
          "md5": "fe5cb1ecba43f20e5c9abc9e3a8ed70d",
          "sha256": "218b6f16cd10711f1a2dfc5d01a54f1e233d467a1d844abff7c1feab373974a3"
        },
        "downloads": -1,
        "filename": "IceSpringPySideStubs_PyQt6-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe5cb1ecba43f20e5c9abc9e3a8ed70d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2968390,
        "upload_time": "2022-01-07T16:23:43",
        "upload_time_iso_8601": "2022-01-07T16:23:43.579498Z",
        "url": "https://files.pythonhosted.org/packages/9c/d7/98c98fc44cde1abdf77794974346504baa00af39bf24d9cbc22272641d42/IceSpringPySideStubs_PyQt6-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f313a49e38426a897aee427182d67c07222a95cff4a1bd39ebec905740d311",
          "md5": "e81289286fcab2423bb5ffef3fc645b1",
          "sha256": "a24ab8326dbb52a1c8fb0da0a76cb1220fac1a13f7aa29f873e4cf5ee87b70c5"
        },
        "downloads": -1,
        "filename": "IceSpringPySideStubs-PyQt6-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e81289286fcab2423bb5ffef3fc645b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2220178,
        "upload_time": "2022-01-07T16:26:04",
        "upload_time_iso_8601": "2022-01-07T16:26:04.550420Z",
        "url": "https://files.pythonhosted.org/packages/a5/f3/13a49e38426a897aee427182d67c07222a95cff4a1bd39ebec905740d311/IceSpringPySideStubs-PyQt6-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cd798c98fc44cde1abdf77794974346504baa00af39bf24d9cbc22272641d42",
        "md5": "fe5cb1ecba43f20e5c9abc9e3a8ed70d",
        "sha256": "218b6f16cd10711f1a2dfc5d01a54f1e233d467a1d844abff7c1feab373974a3"
      },
      "downloads": -1,
      "filename": "IceSpringPySideStubs_PyQt6-1.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe5cb1ecba43f20e5c9abc9e3a8ed70d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2968390,
      "upload_time": "2022-01-07T16:23:43",
      "upload_time_iso_8601": "2022-01-07T16:23:43.579498Z",
      "url": "https://files.pythonhosted.org/packages/9c/d7/98c98fc44cde1abdf77794974346504baa00af39bf24d9cbc22272641d42/IceSpringPySideStubs_PyQt6-1.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5f313a49e38426a897aee427182d67c07222a95cff4a1bd39ebec905740d311",
        "md5": "e81289286fcab2423bb5ffef3fc645b1",
        "sha256": "a24ab8326dbb52a1c8fb0da0a76cb1220fac1a13f7aa29f873e4cf5ee87b70c5"
      },
      "downloads": -1,
      "filename": "IceSpringPySideStubs-PyQt6-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e81289286fcab2423bb5ffef3fc645b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2220178,
      "upload_time": "2022-01-07T16:26:04",
      "upload_time_iso_8601": "2022-01-07T16:26:04.550420Z",
      "url": "https://files.pythonhosted.org/packages/a5/f3/13a49e38426a897aee427182d67c07222a95cff4a1bd39ebec905740d311/IceSpringPySideStubs-PyQt6-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}