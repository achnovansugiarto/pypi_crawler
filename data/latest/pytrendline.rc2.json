{
  "info": {
    "author": "Eduardo Nunez",
    "author_email": "ed@ednunez.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytrendline\n\n## About\n\nGiven a OHLC candlestick chart, pytrendline allows you to detect support and resistance lines formed by the High and Close price series.\n\n![pytrendline preview](https://github.com/ednunezg/pytrendline/blob/master/img/about.png)\n\nThe trendline scanning algorithm scans for the existence of trendlines by attempting to draw lines between points [(0,1),(0,2),(0,3)...(0,N)] for the first iteration. Subsequent iteration attempts to draw lines between points [(1,2),(1,3),...(1,N)], then [(2,3),(2,4)...(2,N)] and so forth.\n\nBecause this operates by doing a full exhaustive search, the runtime is of cubic complexity O(N^3). If low latency is important and your use case is extremely large datasets, you might want to look into alternative algorithms / libraries. For picking up trendlines on day-trading use cases (small number of candles) or offline analysis it works great.\n\nThe algorithm also speeds up significantly if the search is narrowed down to only include lines with pivot points as one of the start or end points. \n\nNote: pivot points are identified as local maximum or minimum points ie “troughs” and “peaks” in the candlestick chart.\n\n## How the algorithm works\n\n1. Pivot points are identified in the candlestick chart.\n\n2. In each scan between points (i,j), pytrendln attempts to draw a line on top of the candlestick chart and checks the following:\n\n* What are the “points” that make up the trendline? For a trendline to be valid it must satisfy the minimum number of points specified in argument `detect(...)` argument `min_points_required`. A date in a trendline is determined to be a valid “point” if the distance between the drawn trendline and the candlestick price does not exceed `max_allowable_error_pt_to_trend`\n\n![Error between trendline and price](https://github.com/ednunezg/pytrendline/blob/master/img/trend_error.png)\n\n* Does the trendline cross over a candlestick body somewhere in its trajectory? If the trendline intersects some distance higher `breakout_tolerance` above the candlestick body, we consider this line to be a breakout. Breakout trendlines are only considered valid if `detect(...)` argument `ignore_breakouts` is set to `False`. \n\n* Checks if the trendline satisfies optional pivot point requirements. If not, the trendline is discarded.\n\nA score is given to the trendline using scoring function specified in `detect(...)` argument `config`. The default scoring function scores trendlines higher if the mean distance between trendline and candle points are low and also gives additional favorability to a higher number of points.\n\nDefault scoring function:\n```\n\"scoring_function\": lambda candles, err_distances, num_points, slope: (util.avg_candle_range(candles) / util.mean(err_distances)) * (2.5 ** num_points),\n```\n\n3. Oftentimes, the trendline search finds trendlines that are almost identical in slope and last price and groups them. Because we might only care about the best scored trendline from each of these groups, the best one is identified and you can choose to discard the rest for your analysis.\n\n![Duplicate grouping](https://github.com/ednunezg/pytrendline/blob/master/img/duplicate_grouping.png)\n\nThis grouping is done by 2D clustering the set of (slope,last_price) pairs for all trendlines. Two trendlines are identified to be a part of the same group if both their slopes and last_price are within `duplicate_grouping_threshold_slope` and `duplicate_grouping_threshold_last_price` respectively.\n\n\n4. Results for all trendlines are returned into an easily sortable and filter-able Pandas dataframe.\n\n\n## Usage\n\nFor detecting trendlines, a Pandas dataframe containing OHLC data must be packaged into a `pytrendline.CandlestickData` object and then passed on to `pytrendline.detect(...)`\n\n```\n# Package Candlestick Data\ncandles_df = pd.read_csv('./fixtures/example.csv')\ncandles_df['Date'] = pd.to_datetime(candles_df['Date'])\n\ncandlestick_data = pytrendline.CandlestickData(\n  df=candles_df,\n  time_interval=\"1m\", # choose between 1m,3m,5m,10m,15m,30m,1h,1d\n  open_col=\"Open\", # name of the column containing candle \"Open\" price\n  high_col=\"High\", # name of the column containing candle \"High\" price\n  low_col=\"Low\", # name of the column containing candle \"Low\" price\n  close_col=\"Close\", # name of the column containing candle \"Close\" price\n  datetime_col=\"Date\" # name of the column containing candle datetime price (use none if datetime is in index)\n)\n\n# Detect\nresults = pytrendline.detect(\n  candlestick_data=candlestick_data,\n\n  # Choose between BOTH, SUPPORT or RESISTANCE\n  trend_type=pytrendline.TrendlineTypes.BOTH,\n  # Specify if you require the first point of a trendline to be a pivot\n  first_pt_must_be_pivot=False,\n  # Specify if you require the last point of the trendline to be a pivot\n  last_pt_must_be_pivot=False,\n  # Specify if you require all trendline points to be pivots\n  all_pts_must_be_pivots=False,\n  # Specify if you require one of the trendline points to be global max or min price\n  trendline_must_include_global_maxmin_pt=False,\n  # Specify minimum amount of points required for trendline detection (NOTE: must be at least two)\n  min_points_required=3,\n  # Specify if you want to ignore prices before some date\n  scan_from_date=None,\n  # Specify if you want to ignore 'breakout' lines. That is, lines that interesect a candle\n  ignore_breakouts=True,\n  # Specify and override to default config (See docs on how)\n  config={}\n)\n\n```\n\n## Tuning algorithm parameters\n\nDEFAULT_CONFIG within source file detect.py [TODO LINK] contains default parameters regarding thresholds for pivot detection, trendline detection, grouping, scoring, etc. All of these config parameters are a lambda taking candlestick data as input.\n\nYou can override a default by passing a new key string + lambda pair to the `config` parameter in `detect`.\n\n```\nresults = detect(\n   …\n   config={\n        # Force the tolerance to be derived from last candle price\n        \"max_allowable_error_pt_to_trend\": lambda candles: candles.iloc[-1].Close / 100,\n   }\n)\n```\n\n## Plotting results\n\npytrendline provides a `plot(...)` function to visualize the results in an interactive HTML chart generated with the aid of Bokeh.\n\n```\noutf = pytrendline.plot(\n  results=results,\n  filedir='.',\n  filename='example_output.html',\n)\nos.system(\"open \" + outf)\n\n```\n\nIn the resulting plot, pivot points are marked as green diamonds, best trendlines for each duplicate gruop is shown in solid dashed blue/orange, and non-best trendlines are shown in transaparent dotted blue/orange.\n\n## Running example\n\nYou can run the example included in this repo to get a taste of what is possible with this library.\n\n1. Clone this github repo into a local directory. \n2. Install required libraries using\n\n```\npip install -r requirements.txt \n```\n\n3. Run \n```\npython example.py\n```\n\n## Installing library\n\nLibrary can install using pip:\n\n```\npip install trendln\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ednunezg/pytrendline",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytrendline",
    "package_url": "https://pypi.org/project/pytrendline/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pytrendline/",
    "project_urls": {
      "Homepage": "https://github.com/ednunezg/pytrendline"
    },
    "release_url": "https://pypi.org/project/pytrendline/1.0.1/",
    "requires_dist": [
      "numpy (>=1.18.5)",
      "pandas (>=1.0.4)",
      "datetime (>=4.3)",
      "bokeh (>=2.0.2)",
      "colour (>=0.1.5)"
    ],
    "requires_python": "",
    "summary": "Detection for support and resistance trendlines on python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10596339,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91a2ee5e506076bd30edd9a8574c88b233e74027c03b421a2afb8e45fbed950c",
          "md5": "527dad2bfcc98df95cf82653ac71e58b",
          "sha256": "3af3c755826063d96dcf0b384947535c4eed283210a06374c780b8ec51114401"
        },
        "downloads": -1,
        "filename": "pytrendline-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "527dad2bfcc98df95cf82653ac71e58b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15522,
        "upload_time": "2021-06-08T23:51:21",
        "upload_time_iso_8601": "2021-06-08T23:51:21.785413Z",
        "url": "https://files.pythonhosted.org/packages/91/a2/ee5e506076bd30edd9a8574c88b233e74027c03b421a2afb8e45fbed950c/pytrendline-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02ad419bf4c1a08c1598fc2587f6ae6082d97b329fc7ce2398003a877486b1d2",
          "md5": "9f88557ef229f84cb483e4efe343e997",
          "sha256": "7cb805023f7704060cdb49fd8fec3a0163cf703bfe64dbab0ad99ff4945fb9fc"
        },
        "downloads": -1,
        "filename": "pytrendline-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f88557ef229f84cb483e4efe343e997",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13252,
        "upload_time": "2021-06-08T23:51:23",
        "upload_time_iso_8601": "2021-06-08T23:51:23.096646Z",
        "url": "https://files.pythonhosted.org/packages/02/ad/419bf4c1a08c1598fc2587f6ae6082d97b329fc7ce2398003a877486b1d2/pytrendline-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1b942996698a140768fbd91e8cd56b2518792aa85fef8921b75d36679118c97",
          "md5": "94b91a3f6d93fa0ea3d3561da952da4f",
          "sha256": "3e0ac5ab03eabf2a05a35755dba05be2d91747d1ae9edfc9d3b6999a0f31a97c"
        },
        "downloads": -1,
        "filename": "pytrendline-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94b91a3f6d93fa0ea3d3561da952da4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18263,
        "upload_time": "2021-06-09T03:25:57",
        "upload_time_iso_8601": "2021-06-09T03:25:57.882359Z",
        "url": "https://files.pythonhosted.org/packages/c1/b9/42996698a140768fbd91e8cd56b2518792aa85fef8921b75d36679118c97/pytrendline-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f89a07942eec52e2abf6f00f8739425f9482c959f71d949fb9dd97201c565b1",
          "md5": "a2ebbac4fd946253565be8167f8f83c0",
          "sha256": "f8fe72c3d46860a7a498339125c90aebf275a11fd1cd95c08d4ef36f17020926"
        },
        "downloads": -1,
        "filename": "pytrendline-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2ebbac4fd946253565be8167f8f83c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18239,
        "upload_time": "2021-06-09T03:26:00",
        "upload_time_iso_8601": "2021-06-09T03:26:00.216874Z",
        "url": "https://files.pythonhosted.org/packages/7f/89/a07942eec52e2abf6f00f8739425f9482c959f71d949fb9dd97201c565b1/pytrendline-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1b942996698a140768fbd91e8cd56b2518792aa85fef8921b75d36679118c97",
        "md5": "94b91a3f6d93fa0ea3d3561da952da4f",
        "sha256": "3e0ac5ab03eabf2a05a35755dba05be2d91747d1ae9edfc9d3b6999a0f31a97c"
      },
      "downloads": -1,
      "filename": "pytrendline-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94b91a3f6d93fa0ea3d3561da952da4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18263,
      "upload_time": "2021-06-09T03:25:57",
      "upload_time_iso_8601": "2021-06-09T03:25:57.882359Z",
      "url": "https://files.pythonhosted.org/packages/c1/b9/42996698a140768fbd91e8cd56b2518792aa85fef8921b75d36679118c97/pytrendline-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f89a07942eec52e2abf6f00f8739425f9482c959f71d949fb9dd97201c565b1",
        "md5": "a2ebbac4fd946253565be8167f8f83c0",
        "sha256": "f8fe72c3d46860a7a498339125c90aebf275a11fd1cd95c08d4ef36f17020926"
      },
      "downloads": -1,
      "filename": "pytrendline-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a2ebbac4fd946253565be8167f8f83c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18239,
      "upload_time": "2021-06-09T03:26:00",
      "upload_time_iso_8601": "2021-06-09T03:26:00.216874Z",
      "url": "https://files.pythonhosted.org/packages/7f/89/a07942eec52e2abf6f00f8739425f9482c959f71d949fb9dd97201c565b1/pytrendline-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}