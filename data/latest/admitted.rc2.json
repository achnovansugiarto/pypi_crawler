{
  "info": {
    "author": "",
    "author_email": "Joe Carey <joe@accountingdatasolutions.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Admitted\n_/ədˈmɪtɪd/ verb : allowed entry (as to a place, fellowship, or privilege)_\n\nThis project is very new. The API is very likely to change.\n\nThis library aims to make automating tasks that require\nauthentication on web sites simpler. In general it would\nbe better to make HTTP requests using an appropriate\nlibrary, but at times it is not obvious how to replicate\nthe login process and you don't want to have to reverse\nengineer the site just to get your task done. That is where\nthis library comes in.\n\nWe use Selenium to automate a Chrome instance, and set the\nuser data directory to the Chrome default so that \"remember\nme\" settings will persist to avoid 2FA on every instance.\nWe install ChromeDriver in a user binary location and manage\nensuring the ChromeDriver version is correct for the current\ninstalled Chrome version.\n\nWe expose a `fetch` method to make HTTP requests to the site\nwith credentials through Chrome, eliminating the need to copy\ncookies and headers; and a `direct_request` method that uses\n`urllib3` (which is also a dependency of Selenium) to make\nanonymous HTTP requests.\n\nWe also introduce a couple of methods that support exploring\na site's Javascript environment from within Python:\n`page.window.new_keys()` lists non-default global variables,\nand `page.window[key]` will access global variables.\n`page.browser.debug_show_page` will dump a text version of\nthe current page to the console (if `html2text` is\ninstalled, otherwise the raw page source).\n\n# Installation\n#### pip\n- `pip install admitted`, or\n- `pip install admitted[debug]` to include `html2text` for\n  exploratory work, or\n- `pip install admitted[dev]` for the development environment.\n\n#### Requirement format for this GitHub repo as a dependency\n`admitted @ git+https://git@github.com/Accounting-Data-Solutions/admitted@main`\n\n# Usage\nGenerally, the `admitted` API is intended to follow the\n[encouraged practice of page object models](https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/)\nby establishing a pattern of defining `Page` classes each\nwith one initialization method that defines selectors for\nall relevant elements on the page and one or more action\nmethods defining the desired interaction with the page.\n\n### Define your Site\nThe Site is a special version of a Page object that defines\nyour login page and the method to complete the login action.\nAll other Page objects will have a reference to this for\ntesting if you are authenticated and repeating the login\nif necessary.\n\nThe default behavior of `Site.__init__` is to call the `login`\nmethod; this can be avoided by passing `postpone=True` to `Site`.\n\n```python\nfrom admitted import Site, Page\n\nclass MySite(Site):\n    def __init__(self):\n        # get login credentials from secure location\n        credentials = {\n          \"username\": \"user\",\n          \"password\": \"do_not_actually_put_your_password_in_your_code\",\n        }\n        super().__init__(\n            login_url=\"https://www.example.com/login\",\n            credentials=credentials,\n        )\n    \n    def _init_login(self):\n        self.username_selector = \"input#username\"\n        self.password_selector = \"input#password\"\n        self.submit_selector = \"button#login\"\n\n    def _do_login(self) -> \"MySite\":\n        self.css(self.username_selector).clear().send_keys(self.credentials[\"username\"])\n        self.css(self.password_selector).clear().send_keys(self.credentials[\"password\"])\n        self.css(self.submit_selector).click()\n        return self\n\n    def is_authenticated(self) -> bool:\n        return self.window[\"localStorage.accessToken\"] is not None\n```\n\n### Define a Page\nThe default behavior of `Page.navigate` is to call `self.site.login`\non the first retry if navigation fails.\n\n```python\nclass MyPage(Page):\n    def __init__(self):\n        super().__init__(MySite())\n        self.navigate(\"https://www.example.com/interest\")\n\n    def _init_page(self) -> None:\n        self.element_of_interest = \"//div[@id='interest']\"\n        self.action_button = \"#action-btn\"\n\n    def get_interesting_text(self) -> str:\n        element = self.xpath(self.element_of_interest)\n        return element.text\n\n    def do_page_action(self) -> None:\n        self.css(self.action_button).click()\n```\n\n### Use your Page object\n\n```python\npage = MyPage()\nprint(f\"Received '{page.get_interesting_text()}'. Interesting!\")\npage.do_page_action()\nprint(f\"Non-default global variables are {page.window.new_keys()}\")\nprint(f\"The document title is '{page.window['document.title']}'.\")\nresponse = page.window.fetch(method=\"post\", url=\"/api/option\", payload={\"showInterest\": True},\n                             headers={\"x-snowflake\": \"example-option-header\"})\nprint(f\"Fetch returned '{response.json}'.\")\nresponse = page.direct_request(method=\"get\", url=\"https://www.google.com\")\nprint(f\"The length of Google's page source is {len(response.text)} characters.\")\n```\n\n### HTTP Response API\nThe `Page.window.fetch` and `Page.direct_request` methods\nboth return a `Response` object with the following API.\n- `content` property: Response body as `bytes`.\n- `text` property: Response body as `str`, or `None`.\n- `json` property: JSON parsed response body, or `None`.\n- `html` property: `lxml` parsed HTML element tree, or `None`.\n- `write_stream` method: Stream response data to the provided file pointer if `direct_request` method was called with `stream=True`, otherwise writes `Response.content`.\n  - `destination` argument: file pointer for a file opened with a write binary mode.\n  - `chunck_size` argument: (optional) number of bytes to write at a time.\n  - Returns `destination`.\n\n# References\n- [Selenium Python bindings documentation](https://www.selenium.dev/selenium/docs/api/py/index.html)\n- [Selenium project documentation](https://www.selenium.dev/documentation/)\n- [lxml html parser documentation](https://lxml.de/lxmlhtml.html)\n\n# Development\nConfigure pre-commit hooks to format, lint, and test code before commit.\n#### `.git/hooks/pre-commit`\n```bash\n#!/bin/bash\nif [ -z \"${VIRTUAL_ENV}\" ] ; then\n  echo \"Please activate your virtual environment before commit!\"\n  exit 1\nfi\nroot=$(git rev-parse --show-toplevel)\nblack ${root} | while read line ; do\n  if [[ ${line} == \"reformatted*\" ]] ; then\n    len=$(($(wc -c <<< ${line})-12))\n    file=${line:12:len}\n    git add ${file}\n  fi\ndone\npylint --rcfile ${root}/pyproject.toml ${root}/src/admitted\npytest -x -rN --no-cov --no-header\n```\n\n### Release\nA release is published to PyPI by a GitHub Action when there\nis a push to `main` with a tag. See `.github/workflows/publish.yml`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "admitted",
    "package_url": "https://pypi.org/project/admitted/",
    "platform": null,
    "project_url": "https://pypi.org/project/admitted/",
    "project_urls": {
      "Homepage": "https://github.com/Accounting-Data-Solutions/admitted"
    },
    "release_url": "https://pypi.org/project/admitted/2023.1/",
    "requires_dist": [
      "cssselect",
      "lxml",
      "psutil",
      "selenium",
      "urllib3",
      "html2text ; extra == 'debug'",
      "black ; extra == 'dev'",
      "coverage[toml] ; extra == 'dev'",
      "html2text ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "toml ; extra == 'dev'",
      "lxml-stubs ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Utility to make automating processes using Selenium and Chromedriver easier",
    "version": "2023.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16861165,
  "releases": {
    "2022.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8628d12c1100c81c9499c85e7a275e90e7d1ea658af7246e0a14e8bea593f145",
          "md5": "c9f2b940f59050ff857ab57d06a76229",
          "sha256": "a1a94b9ca70db70979b9f364ef5fc017bed3fff914fcf19fd7897168b4904c1c"
        },
        "downloads": -1,
        "filename": "admitted-2022.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9f2b940f59050ff857ab57d06a76229",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21473,
        "upload_time": "2022-10-07T00:07:12",
        "upload_time_iso_8601": "2022-10-07T00:07:12.543515Z",
        "url": "https://files.pythonhosted.org/packages/86/28/d12c1100c81c9499c85e7a275e90e7d1ea658af7246e0a14e8bea593f145/admitted-2022.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3617b4094d47da4fe2b6b80d7fad13085cb54daccad3391af497a404c35ec059",
          "md5": "ddb686203fa82627db496caa2597e387",
          "sha256": "afaa71c8366e937e138e6f5802aab2173f31dcfbfa65270a6375178dd497a3d5"
        },
        "downloads": -1,
        "filename": "admitted-2022.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ddb686203fa82627db496caa2597e387",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21144,
        "upload_time": "2022-10-07T00:07:14",
        "upload_time_iso_8601": "2022-10-07T00:07:14.250863Z",
        "url": "https://files.pythonhosted.org/packages/36/17/b4094d47da4fe2b6b80d7fad13085cb54daccad3391af497a404c35ec059/admitted-2022.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ded3306e212fb3fe4e54734672e883a6685c49eaf6d59f5aa9b790a6a61da57c",
          "md5": "aa4e728abf36ccee1f0dbf8073ae2001",
          "sha256": "e603cd49831c38e8e3e81524178256f16d17f5218be0146d820781eb0da6e978"
        },
        "downloads": -1,
        "filename": "admitted-2023.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa4e728abf36ccee1f0dbf8073ae2001",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25756,
        "upload_time": "2023-02-14T21:03:19",
        "upload_time_iso_8601": "2023-02-14T21:03:19.399724Z",
        "url": "https://files.pythonhosted.org/packages/de/d3/306e212fb3fe4e54734672e883a6685c49eaf6d59f5aa9b790a6a61da57c/admitted-2023.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce56e12a17c7180ad530fbd998187123d15d50dbd94d0e92a78b9fbccd68566a",
          "md5": "95f5cf3e6d995ae85934d7111d6b4cd6",
          "sha256": "a04564ab29a28ddc6234c757e23aa11e282fc3fa36fc42ac8f143bfecbbaeacf"
        },
        "downloads": -1,
        "filename": "admitted-2023.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95f5cf3e6d995ae85934d7111d6b4cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31826,
        "upload_time": "2023-02-14T21:03:20",
        "upload_time_iso_8601": "2023-02-14T21:03:20.907081Z",
        "url": "https://files.pythonhosted.org/packages/ce/56/e12a17c7180ad530fbd998187123d15d50dbd94d0e92a78b9fbccd68566a/admitted-2023.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ded3306e212fb3fe4e54734672e883a6685c49eaf6d59f5aa9b790a6a61da57c",
        "md5": "aa4e728abf36ccee1f0dbf8073ae2001",
        "sha256": "e603cd49831c38e8e3e81524178256f16d17f5218be0146d820781eb0da6e978"
      },
      "downloads": -1,
      "filename": "admitted-2023.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa4e728abf36ccee1f0dbf8073ae2001",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25756,
      "upload_time": "2023-02-14T21:03:19",
      "upload_time_iso_8601": "2023-02-14T21:03:19.399724Z",
      "url": "https://files.pythonhosted.org/packages/de/d3/306e212fb3fe4e54734672e883a6685c49eaf6d59f5aa9b790a6a61da57c/admitted-2023.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce56e12a17c7180ad530fbd998187123d15d50dbd94d0e92a78b9fbccd68566a",
        "md5": "95f5cf3e6d995ae85934d7111d6b4cd6",
        "sha256": "a04564ab29a28ddc6234c757e23aa11e282fc3fa36fc42ac8f143bfecbbaeacf"
      },
      "downloads": -1,
      "filename": "admitted-2023.1.tar.gz",
      "has_sig": false,
      "md5_digest": "95f5cf3e6d995ae85934d7111d6b4cd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 31826,
      "upload_time": "2023-02-14T21:03:20",
      "upload_time_iso_8601": "2023-02-14T21:03:20.907081Z",
      "url": "https://files.pythonhosted.org/packages/ce/56/e12a17c7180ad530fbd998187123d15d50dbd94d0e92a78b9fbccd68566a/admitted-2023.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}