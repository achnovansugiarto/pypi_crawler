{
  "info": {
    "author": "Tiziano MÃ¼ller",
    "author_email": "tm@dev-zero.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AiiDA",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python"
    ],
    "description": "[![Build Status](https://github.com/dev-zero/aiida-statefile-schedulers/workflows/ci/badge.svg?branch=master)](https://github.com/dev-zero/aiida-statefile-schedulers/actions)\n[![Coverage Status](https://coveralls.io/repos/github/dev-zero/aiida-statefile-schedulers/badge.svg?branch=master)](https://coveralls.io/github/dev-zero/aiida-statefile-schedulers?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-statefile-schedulers/badge)](http://aiida-statefile-schedulers.readthedocs.io/)\n[![PyPI version](https://badge.fury.io/py/aiida-statefile-schedulers.svg)](https://badge.fury.io/py/aiida-statefile-schedulers)\n\n# aiida-statefile-schedulers\n\nSimple statefile-driven task schedulers: Currently AiiDA relies mostly on full fledged task schedulers to run jobs\nin complex workflows. Running such workflows with the direct scheduler often means that many processes run together\neven when *running* the workflow directly (e.g. not submitting to the daemon), overloading a single node.\n\nThis scheduler does not run any jobs. Instead, it creates *state files* of the form `$jobid.QUEUED` in the directory\n`${AIIDA_STATE_DIR}` (an environment variable you have to set in your `.profile/.bash_profile` of the target machine),\nwaiting for some script to pick the jobs up and run them.\n\nThis **runner script** should create a file `$jobid.DONE` when done. As intermediate steps it can also create a file `$jobid.RUNNING` to\nsignal AiiDA that it picked up a job. The initial state file contains lines of the form `key=value` with the following keys:\n\n* `cwd`: the working directory for this job\n* `cmd`: the command to run there (usually via `bash -e ...`)\n\nThe state files can also be renamed instead of created. A sample runner can be found in `scripts/`.\n\n## Features\n\n## Installation\n\n```shell\npip install aiida-statefile-scheduler\nverdi quicksetup  # better to set up a new profile\nverdi plugin list aiida.schedulers  # should now show your calculation plugins\n```\n\n## Development\n\n```shell\ngit clone https://github.com/dev-zero/aiida-statefile-schedulers .\ncd aiida-statefile-schedulers\npip install -e .[pre-commit,testing]  # install extra dependencies\npre-commit install  # install pre-commit hooks\npytest -v  # discover and run all tests\n```\n\nSee the [developer guide](http://aiida-statefile-schedulers.readthedocs.io/en/latest/developer_guide/index.html) for more information.\n\n## License\n\nMIT\n\n## Contact\n\ntm@dev-zero.ch\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dev-zero/aiida-statefile-schedulers",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiida-statefile-schedulers",
    "package_url": "https://pypi.org/project/aiida-statefile-schedulers/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiida-statefile-schedulers/",
    "project_urls": {
      "Homepage": "https://github.com/dev-zero/aiida-statefile-schedulers"
    },
    "release_url": "https://pypi.org/project/aiida-statefile-schedulers/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple statefile-driven task schedulers for AiiDA",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12106568,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "135476f82aea566ddb0361e17b6f5044fb2882319337a05e474ea24fc3f7ef6b",
          "md5": "bd5e8b485d70705af36f60b3e4179c06",
          "sha256": "4395932d699be1eb223f299d79616a2e1dc30234fcc38500dbc5afb2cbdb05ae"
        },
        "downloads": -1,
        "filename": "aiida-statefile-schedulers-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd5e8b485d70705af36f60b3e4179c06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3894,
        "upload_time": "2021-11-23T21:05:36",
        "upload_time_iso_8601": "2021-11-23T21:05:36.781925Z",
        "url": "https://files.pythonhosted.org/packages/13/54/76f82aea566ddb0361e17b6f5044fb2882319337a05e474ea24fc3f7ef6b/aiida-statefile-schedulers-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "135476f82aea566ddb0361e17b6f5044fb2882319337a05e474ea24fc3f7ef6b",
        "md5": "bd5e8b485d70705af36f60b3e4179c06",
        "sha256": "4395932d699be1eb223f299d79616a2e1dc30234fcc38500dbc5afb2cbdb05ae"
      },
      "downloads": -1,
      "filename": "aiida-statefile-schedulers-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bd5e8b485d70705af36f60b3e4179c06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3894,
      "upload_time": "2021-11-23T21:05:36",
      "upload_time_iso_8601": "2021-11-23T21:05:36.781925Z",
      "url": "https://files.pythonhosted.org/packages/13/54/76f82aea566ddb0361e17b6f5044fb2882319337a05e474ea24fc3f7ef6b/aiida-statefile-schedulers-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}