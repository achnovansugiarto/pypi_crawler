{
  "info": {
    "author": "Thomas Roder",
    "author_email": "roder.thomas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CachedContingency\n\nPython 3.9+ classes to compute and cache\n[Fisher's exact test](https://en.wikipedia.org/wiki/Fisher%27s_exact_test) and\n[Boschloo's test](https://en.wikipedia.org/wiki/Boschloo%27s_test) more efficiently.\n\n## Installation\n\nThis package requires at least `Python 3.9`.\n\n```bash\npip install cached_contingency\n```\n\n## Idea\n\nI have to compute lots of these tests and want to accelerate the process. There are two optimizations that came to my mind:\n\n1) My contingency tables often have identical column sums, so many tests can be recycled\n2) Some contingency tables are equivalent and only have to be computed once\n    * Fisher's test: `abcd`, `acbd`, `badc`, `bdac`, `cadb`, `cdab`, `dbca` and `dcba` are equivalent (pvalue, _not_ odds ratio)\n    * Boschloo's test: `abcd`, `badc`, `cdab` and `dcba` are equivalent\n\nFurthermore, sometimes, one has to re-run tools. In these cases, all previously computed results can be recycled.\n\nAs cache, an SQLite database is used.\n\n### Execution\n\n1) Replace equivalent contingency tables with the same contingency table\n2) Find all tests that are not cached yet\n3) Calculate them in parallel, using all CPU cores\n4) Add them to the cache\n5) Return results\n\n## Usage\n\nSet the location of the cache database:\n\n```bash\nexport KEY_VALUE_STORE_DB=/custom/path.db  # default: ~/.cache/keyvaluestore.db\n```\n\nCalculate single tests:\n\n```python\nfrom cached_contingency import CachedFisher, CachedBoschloo, odds_ratio\nfrom scipy.stats import fisher_exact, boschloo_exact\nfrom numpy import isclose\n\n# Create class (automatically creates database if none exists yet)\ncf = CachedFisher()\n# Calculate Fisher's test\npval_cache = cf.get_or_create(74, 31, 43, 32)\nodds_ratio_cache = odds_ratio(74, 31, 43, 32)\n# This is equivalent to:\nodds_ratio_calc, pval_calc = fisher_exact([[74, 31], [43, 32]])\nassert isclose(pval_cache, pval_calc)\nassert isclose(odds_ratio_cache, odds_ratio_calc)\n\n# Create class (automatically creates database if none exists yet)\ncb = CachedBoschloo()\n# Calculate Fisher's test\npval_cache = cb.get_or_create(74, 31, 43, 32)\n# This is almost* equivalent to:\npval_calc = boschloo_exact([[74, 31], [43, 32]]).pvalue\nassert isclose(pval_cache, pval_calc)\n```\n\n* \\*: Not exactly equivalent: My function never returns pvalues greater than 1 and never returns nan as pvalues.\n  (See [scipy issue](https://github.com/scipy/scipy/issues/15345).)\n\nCalculate multiple tests:\n\n```python\nfrom cached_contingency import CachedFisher, CachedBoschloo\nimport pandas as pd\nimport numpy as np\n\n# Create class (automatically creates database if none exists yet)\ncb = CachedBoschloo()\n\n# Create test DataFrame, column names are important!\nnp.random.seed(42)\ntest_df = pd.DataFrame(\n    [(np.random.randint(200) for _ in range(4)) for _ in range(5)],\n    columns=['c1r1', 'c2r1', 'c1r2', 'c2r2']\n)\nprint(test_df)\n#    c1r1  c2r1  c1r2  c2r2\n# 0   102   179    92    14\n# 1   106    71   188    20\n# 2   102   121    74    87\n# 3   116    99   103   151\n# 4   130   149    52     1\n\n# Calculate multiple Boschloo's tests\nresult_df = cb.get_or_create_many(test_df)\nprint(result_df)\n#    c1r1  c2r1  c1r2  c2r2          pval\n# 0   102   179    92    14  3.442564e-20\n# 1   106    71   188    20  1.144156e-12\n# 2   102   121    74    87  9.692791e-01\n# 3   116    99   103   151  3.821222e-03\n# 4   130   149    52     1  1.831830e-14\n\n# If you run this again, the results will be loaded from cache:\nresult_df = cb.get_or_create_many(test_df)\nprint('Like a flash!')\n```\n\n**Advanced usage:**\n\nAlternative way to specify the path to the database via Python and change number of CPUs:\n\n```python\nfrom cached_contingency import CachedFisher\n\ncf = CachedFisher(db_path='/custom/path.db', n_cpus=1)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrTomRod/cached-contingency",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cached-contingency",
    "package_url": "https://pypi.org/project/cached-contingency/",
    "platform": "",
    "project_url": "https://pypi.org/project/cached-contingency/",
    "project_urls": {
      "Homepage": "https://github.com/MrTomRod/cached-contingency"
    },
    "release_url": "https://pypi.org/project/cached-contingency/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Compute and cache Fisher's exact test and Boschloo's test more efficiently!",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12481406,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a806ab12cabfc3460368d4ba215a93f3436dc77dda57637b302966eed8642798",
          "md5": "621612ed01c99324ed8275f8921fa813",
          "sha256": "319ae465ad032a77b3aaf7160460c99b570d22e4d35f82e03cdab920978e0d50"
        },
        "downloads": -1,
        "filename": "cached-contingency-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "621612ed01c99324ed8275f8921fa813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6562,
        "upload_time": "2022-01-03T17:05:10",
        "upload_time_iso_8601": "2022-01-03T17:05:10.669942Z",
        "url": "https://files.pythonhosted.org/packages/a8/06/ab12cabfc3460368d4ba215a93f3436dc77dda57637b302966eed8642798/cached-contingency-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "395a7e8d7f53d3dbe08dfc891ef7aba14e2660ae1f789916bb7fdabaabe9f7c7",
          "md5": "401b577aef1e16c34e59e03aadeb1ed3",
          "sha256": "731a94326a7f4dea9b723c6be161614e9b77ba6ea702a9e80c17169a64f7f4fd"
        },
        "downloads": -1,
        "filename": "cached-contingency-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "401b577aef1e16c34e59e03aadeb1ed3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6646,
        "upload_time": "2022-01-04T10:04:33",
        "upload_time_iso_8601": "2022-01-04T10:04:33.133421Z",
        "url": "https://files.pythonhosted.org/packages/39/5a/7e8d7f53d3dbe08dfc891ef7aba14e2660ae1f789916bb7fdabaabe9f7c7/cached-contingency-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb73a6fb16b730d3bd0ffc784164d211a102d5b1bb730b0db6410eeb343a0854",
          "md5": "4b1c676b0785f6e08bdb311ff84533b4",
          "sha256": "483e558559a59d90afbc0fa334550f5fa81ddffd62b6f4e9ba7e8bf5989ba0ee"
        },
        "downloads": -1,
        "filename": "cached-contingency-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4b1c676b0785f6e08bdb311ff84533b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7043,
        "upload_time": "2022-01-05T05:51:51",
        "upload_time_iso_8601": "2022-01-05T05:51:51.546579Z",
        "url": "https://files.pythonhosted.org/packages/eb/73/a6fb16b730d3bd0ffc784164d211a102d5b1bb730b0db6410eeb343a0854/cached-contingency-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e2c44249c76b449013c71700f2a192cc2efa5e59aa654b5d088851c41f239d",
          "md5": "f1e1e75217cca51222f311e51f75770a",
          "sha256": "ff2b76598feff335805853456309b4e4bf8937ed773a4f2c1b90c9dca8a9506d"
        },
        "downloads": -1,
        "filename": "cached-contingency-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f1e1e75217cca51222f311e51f75770a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7003,
        "upload_time": "2022-01-05T06:20:28",
        "upload_time_iso_8601": "2022-01-05T06:20:28.610904Z",
        "url": "https://files.pythonhosted.org/packages/c3/e2/c44249c76b449013c71700f2a192cc2efa5e59aa654b5d088851c41f239d/cached-contingency-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3e2c44249c76b449013c71700f2a192cc2efa5e59aa654b5d088851c41f239d",
        "md5": "f1e1e75217cca51222f311e51f75770a",
        "sha256": "ff2b76598feff335805853456309b4e4bf8937ed773a4f2c1b90c9dca8a9506d"
      },
      "downloads": -1,
      "filename": "cached-contingency-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f1e1e75217cca51222f311e51f75770a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7003,
      "upload_time": "2022-01-05T06:20:28",
      "upload_time_iso_8601": "2022-01-05T06:20:28.610904Z",
      "url": "https://files.pythonhosted.org/packages/c3/e2/c44249c76b449013c71700f2a192cc2efa5e59aa654b5d088851c41f239d/cached-contingency-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}