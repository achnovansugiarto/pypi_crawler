{
  "info": {
    "author": "Matthew Pitkin",
    "author_email": "m.pitkin@lancaster.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Lancstro: an example of creating a Python package\n\nThis repository and the following text is intended as a basic tutorial on creating and publishing a\nPython package. It was created for a seminar given to the Lancaster University [Observational\nAstrophysics\ngroup](https://www.lancaster.ac.uk/physics/research/astrophysics/observational-astrophysics/), but\nmay be more widely applicable.\n\n## What is a Python package\n\nIn general, when talking about a [Python\npackage](https://docs.python.org/3/tutorial/modules.html#packages) it means an set of Python modules\nand/or scripts and/or data, that are installable under a common namespace (the package's name). A\npackage might also be referred to as a library. This is different from a collection of individual\nPython files that you have in a folder, which will not be under a common namespace and are only\naccessible if their path is in your `PYTHONPATH` or you use them from the directory in which they\nlive.\n\nA couple of examples of common Python packages used in research in the physical sciences are:\n\n1. [NumPy](https://numpy.org/)\n2. [SciPy](https://www.scipy.org/scipylib/index.html)\n\n> Note: \"namespace\" basically refers to the name of the package as you would import it, e.g., if you\n> import numpy with `import numpy`, then you will access all NumPy's functions/classes/modules via\n> the `numpy` namespace:\n> ```python\n> numpy.sin(2.3)\n> ```\n\nA package can contain everything within a single namespace, or contain various submodules, e.g.,\nparts that contain common functionality that naturally fits together in it's own namespace. For\nexample, in NumPy, the [`random`](https://numpy.org/doc/stable/reference/random/index.html)\nsubmodule contains functions and classes for generating random numbers:\n\n```python\nimport numpy\nnumpy.random.randn()  # generate a normally distributed random number\n```\n\n## Why package my code?\n\nSo, why should you package (and publish) your Python code rather than just having local scripts?\nWell, there are several reasons:\n\n* It creates an installable package that can be imported without having to have the Python\n  script/file in your path.\n* It creates a “versioned” package that can have specified features/dependencies. This is very\n  important for reproducibility of results, where a specific code version used for an analysis\n  can be pointed to.\n* You can share you package with others (you can make it `pip installable` via\n  [PyPI](https://pypi.org/), or `conda installable` via [conda-forge](https://conda-forge.org/)),\n  which can be important when working with collaborators.\n* You will gain developer kudos! Software development is a major skill you learn during your\n  research, so show off what you’ve done and add it to your CV.\n\n## Project structure\n\nTo create a Python package you should structure the directory containing you code in the following\nway (the directory name containing this information does not have to match the package name, but\noften they will):\n\n```\nrepo/\n├── LICENSE\n├── pyproject.toml\n├── README.md\n├── setup.cfg\n├── setup.py\n├── pkgname/\n│   ├── __init__.py\n│   └── example.py\n└── bin/\n    └── executable_script.py\n```\n\nThere are other slight variations on this, for example, using a `src` directory in which your\npackage directories live, as described in the [official\nguidelines](https://packaging.python.org/tutorials/packaging-projects/#creating-the-package-files)).\n\nIn this project the structure is:\n\n```\nlancstro/\n├── LICENSE\n├── pyproject.toml\n├── README.md\n├── setup.cfg\n├── setup.py\n├── lancstro/\n│   ├── __init__.py\n│   ├── base.py\n|   ├── members/\n|   |   ├── __init__.py\n|   |   └── staff.py\n|   └── data/\n|       └── office_numbers.txt\n└── bin/\n    └── favourite_object.py\n```\n\nHere, there is a \"submodule\" called `members` within the main `lancstro` package.\n\n### Using Github\n\nYour package *should* be in a [version control](https://en.wikipedia.org/wiki/Version_control)\nsystem and ideally hosted somewhere that provides a backup. It is now very common to use\n[git](https://git-scm.com/about) for version control and it is sensible to host the project on\n[Github](https://github.com/)/[Gitlab](https://about.gitlab.com/)/[bitbucket](https://bitbucket.org/product/)\nor similar. On Github you can have public or private repositories.\n\nIf using Github, it is best to start the project by creating new repository there first, then\ncloning that repository to you machine before then adding in your code. When creating a Github\nrepository (I might use \"_repo_\" for short later) you can initialise it with a [license\nfile](#the-license-file) and a [README file](#the-readmemd-file).\n\n> Note: this is not a tutorial on using git, so you'll have to find that\n> [elsewhere](https://git-scm.com/docs/gittutorial).\n\n### The LICENSE file\n\nYou should give your code a license describing the terms of use and copyright. Often you'll want\nyour code to be open source, so a good choice is the [MIT\nlicense](https://opensource.org/licenses/MIT), which is very permissive in terms of reuse of the\ncode. A [variety of other open source licenses](https://opensource.org/licenses/category) are\navailable, although these often differ slighty on the permissiveness, i.e., whether others can use\nyour code in commercial and non-open source projects or not.\n\nThe `LICENSE` file will contain a plain ascii text copy of your license.\n\n### The pyproject.toml file\n\nThis file tells the [`pip`](https://packaging.python.org/key_projects/#pip) tool used for installing\npackages how it should build the package. In this repo we have used the [file\ncontents](pyproject.toml) suggested\n[here](https://packaging.python.org/tutorials/packaging-projects/#creating-pyproject-toml), which\nmeans that the [`setuptools`](https://setuptools.pypa.io/en/latest/index.html) package is used for\nthe build.\n\n### The README.md file\n\nThis is the file that you are currently reading! It should provide a basic description of your\npackage, maybe including information about how to install it. Ideally it should be brief and not be\nseen as a replacement for having proper [documentation](#documentation) for you code available\nelsewhere.\n\nIn this case the suggested format for the file is\n[Markdown](https://daringfireball.net/projects/markdown/) (the `.md` extension), but it could be a\nplain ascii text file or [reStructedText](https://docutils.sourceforge.io/rst.html). Markdown and\nreStructuredText will be automatically rendered if you host your package on, e.g.,\n[Github](https://github.com/).\n\n### The setup.cfg and setup.py files\n\nIn many packages you might just see a `setup.py` file, which is the build script used by setuptools.\nHowever, it is now good practice to put [\"static\"\nmetadata](https://packaging.python.org/tutorials/packaging-projects/#configuring-metadata) about\nyour package in the `setup.cfg` [configuration\nfile](https://en.wikipedia.org/wiki/Configuration_file#Unix_and_Unix-like_operating_systems). By\n\"static\" I mean any package information that does not have to be dynamically defined during the\nbuild process (such as defining and building Cython\n[extensions](https://setuptools.pypa.io/en/latest/userguide/extension.html)). In many cases, like\nthis repository, this can mean the [`setup.py`](setup.py) file can be very simple and just contain:\n\n```python\nfrom setuptools import setup\n\nsetup()\n```\n\nThe layout of the configuration file is described\n[here](https://setuptools.pypa.io/en/latest/userguide/declarative_config.html). I'll reproduce the\n[one from this project](setup.cfg) below with additional inline comments:\n\n```toml\n[metadata]\n# the name of the package\nname = lancstro\n\n# the package author information (multiple authors can just be separated by commas)\nauthor = Matthew Pitkin\nauthor_email = m.pitkin@lancaster.ac.uk\n\n# a brief description of the package\ndescription = Package defining the Lancaster Observational Astronomy group\n\n# the license type and license file\nlicense = MIT\nlicense_files = LICENSE\n\n# a more in-depth description of the project that will appear on it's PyPI page,\n# in this case read in from the README.md file\nlong_description = file: README.md\nlong_description_content_type = text/markdown\n\n# the projects URL (often the Github repo URL)\nurl = https://github.com/mattpitkin/lancstro\n\n# standard classifiers giving some information about the project\nclassifiers =\n    Intended Audience :: Science/Research\n    License :: OSI Approved :: MIT License\n    Natural Language :: English\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.6\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Topic :: Scientific/Engineering\n    Topic :: Scientific/Engineering :: Astronomy\n    Topic :: Scientific/Engineering :: Physics\n\n# the package's current version (this isn't actually in the file in this repo, see later!)\nversion = 0.0.1\n\n[options]\n# state the Python versions that the package requires/supports\npython_requires = >=3.6\n\n# state packages and versions (of necessary) required for running the setup\nsetup_requires =\n    setuptools >= 43\n    wheel\n\n# state packages and versions (if necessary) required for installing and using the package\ninstall_requires =\n    astropy\n    astroquery >= 0.4.3\n\n# automatically find all modules within this package\npackages = find:\n\n# include data in the package defined below\ninclude_package_data = True\n\n# any executable scripts to include in the package\nscripts =\n    bin/favourite_object.py\n\n[options.package_data]\n# any data files to include in the package (lancsrto shows they are in the\n# lancstro package and then the paths are given)\nlancstro = \n    data/office_numbers.txt\n```\n\nFor a list of the standard \"classifiers\" that you can add see [here](https://pypi.org/classifiers/).\n\nIn this project, we have added a \"data\" file that come bundled with the package. It is not required\nto include data in your package.\n\n#### Adding a package version\n\nIn the above case the package version is set manually in the `setup.cfg` file. It is up to you how\nyou define the version string, but it is often good to use [Semantic\nVersioning](https://semver.org/). In this format the version consists of three full-stop separated\nnumbers: MAJOR.MINOR.PATCH.\n\nThe Semantic Versioning site gives the following definitions of when to change the numbers:\n\n> 1. MAJOR version when you make incompatible API changes,\n> 2. MINOR version when you add functionality in a backwards compatible manner, and\n> 3. PATCH version when you make backwards compatible bug fixes.\n>\n> Additional labels for pre-release and build metadata are available as extensions to the\n> MAJOR.MINOR.PATCH format.\n\nTo update the version you can just edit the value in the `setup.cfg` file. When you\n[install](#installing-the-package) this will be the package's version.\n\nThis allows the package manager (e.g., pip) to know what version of the package is installed.\nHowever, it is often useful to provide the version number as a variable within the package itself,\nso that the user can check it if necessary. Most often you will find this as a variable called\n`__version__`, e.g.,:\n\n```python\nimport numpy\nprint(numpy.__version__)\n1.21.2\n```\n\nThere are several ways to set this, but it is best to make sure that there's only one place that you\nhave to edit the version number rather than multiple places. One method (used in this package) is to\ninclude the version number in your package's main [`__init__.py`](cwinpy/__init__.py) file by adding\nthe line:\n\n```python\n__version__ = \"0.0.1\"\n```\n\nThen, within `setup.cfg`, the `version` line can be:\n\n```\nversion = attr: lancstro.__version__\n```\n\nAmong the other options, a good one to use is through setting the version with a tools such as\n[`setuptools-scm`](https://pypi.org/project/setuptools-scm/), which gathers the version information\nfrom [git tags](https://git-scm.com/book/en/v2/Git-Basics-Tagging) in your repo.\n\n#### The MANIFEST.in file\n\nYou can specify which additional files that you want to be bundled with the package's source\ndistribution using a [`MANIFEST.in`](https://packaging.python.org/guides/using-manifest-in/). With\nmodern versions of setuptools (e.g., greater than 43) most of the standard files such as the README\nfile and setup files, and any license file given in `setup.cfg`, are automatically included in the\nsource distribution by default. Hence, not include a `MANIFEST.in` file in this repository.\n\nHowever, you may want to include other files. If you had, say, a `test` directory with multiple\nPython test scripts that you wanted in the package, you could add and `MANIFEST.in` file containing:\n\n```\nrecursive-include test/ *.py\n```\n\nwhich will include all `.py` files within `test`.\n\n### The package source directory\n\nIn this project the directory containing the package source code, i.e., the Python files, is called\n`lancstro/`. In this case has two files in it (although it can contain any number of Python files, each of\nwhich will be a module that is available in the package):\n\n1. [`__init__.py`](lancstro/__init__.py)\n2. [`base.py`](lancstro/base.py)\n\nThe [`base.py`](lancstro/base.py) file contains some Python code, in this case a class called\n`GroupMembers`, which is part of our package.\n\nThe [`__init__.py`](lancstro/__init__.py) file is very important. It is what tells Python that this\ndirectory is a [package](https://docs.python.org/3/tutorial/modules.html#packages). The\n`__init__.py` file can be completely empty, but it *does* need to be present. It can contain any\nPython code (you could define your whole package in the `__init__.py` file if you wanted), but often\nit is used to import things from submodules/subpackages into the package's namespace. In this case\nthe `__init__.py` file contains the following code:\n\n```python\nfrom .base import GroupMember\nfrom . import members\n\n__version__ = \"0.0.2\"  # the version number of the code\n```\n\nThe first line imports the `GroupMember` class from the [`base.py`](lancstro/base.py) file, so that\nthe `GroupMember` class can be used from the `lancstro` namespace rather than the `lancstro.base`\nnamespace. E.g., this means that when using the package we could do:\n\n```\nfrom lancstro import GroupMember\n```\n\nrather than\n\n```\nfrom lancstro.base import GroupMember\n```\n\nalthough both will work. You may want to do this for commonly used function or classes, but it is\nnot necessary.\n\nThe `lancstro/` directory also contains the directory `members/`, which is a subpackage of the\npackage (any subpackage must also contain their own [`__init__.py`](lancstro/members/__init__.py)\nfile). The second line of the `__init__.py` file imports the `members` submodule into the `lancstro`\nnamespace. E.g., if I just do:\n\n```python\nimport lancstro\n```\n\nthen I can access things from the `members` subpackage using\n\n```python\nlancstro.members.staff\n```\n\nrather than doing:\n\n```\nfrom lancstro.members import staff\n```\n\nalthough (again) both will work.\n\nThe final line in the `__init__.py` file sets the [version number](#adding-a-package-version) of the\npackage.\n\n#### The data directory\n\nYou might want to include some data files in your package, e.g., a look-up table for a calculation,\na catalogue, etc. In this case I've added a JSON file,\n[`office_numbers.txt`](lancstro/data/office_numbers.txt), in a directory called `data/` (any name\ncan be used, but `data` seems quite sensible!). This directory does not need an `__init__.py` as it\nis not a package. To include this file in the package you need to have the line:\n\n```\ninclude_package_data = True\n```\n\nin your `setup.cfg` file and also list it in the `[options.package_data]` section, e.g.,:\n\n```\n[options.package_data]\nlancstro = \n    data/office_numbers.txt\n```\n\n#### Intra-package references\n\nIn your package you can\n[import](https://docs.python.org/3/tutorial/modules.html#intra-package-references) things from the\nvarious submodules/subpackages using the `.` notation.\n\nFor example, to import things between Python files in the same part of the package (e.g., at the\n`lancstro/` level), you can do:\n\n```python\nfrom .base import GroupMember\n```\n\nwhich imports from the `base.py` file.\n\nIf a file in a subpackage wants to import from the level below, e.g., a Python file in\n`lancstro/members` wants to import from a file in `lancstro/`, the you could use:\n\n```python\nfrom ..base import GroupMember\n```\n\nI.e, use two dots `..` to specify going down one package level.\n\n### The bin directory\n\nYou may want to include executable scripts in your package. It is good to place them in a directory\ncalled, for example, `bin/` in the root directory of your repository. To make these part of the\npackage you need to list these in the `setup.cfg` file in a `scripts` section, e.g.,\n\n```\nscripts =\n    bin/favourite_object.py\n```\n\nOnce the packages are installed these scripts should be in you path and usable with, e.g.,:\n\n```bash\n$ favourite_object.py -h\n```\n\n### Installing the package\n\nIt is best practice to install Python packages using [pip](https://pip.pypa.io/en/stable/) (the\n\"package installer for Python\"), so you should have that installed. Once you have the above\nstructure you can install the package (from it's root directory) using:\n\n```bash\npip install .\n```\n\nwhere the `.` just refers to the current directory. The standard install locations are described\n[here](https://docs.python.org/3/install/index.html#how-installation-works), but I would recommend\nusing [virtual environments](https://realpython.com/python-virtual-environments-a-primer/), such as\nprovided via [conda](https://docs.conda.io/en/latest/), in which case the package will be installed\nonly in the environment.\n\nThat's it! Open up a Python terminal (from any location except in the package directory, otherwise\nit'll get confused!) and you should be able to do:\n\n```python\nimport lancstro\nprint(lancstro.__version__)\n0.0.1\n```\n\nor run the [`favourite_object.py`](bin/favourite_object.py) script from the command line:\n\n```console\n$ favourite_object.py -h\nusage: favourite_object.py [-h] name name\n\nGet a staff member's favourite object\n\npositional arguments:\n  name        The staff member's full name\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nYou can then tell other people to clone your Github repo and install things in the same way, or even\n`pip install` directly from the repo with, e.g.:\n\n```bash\n$ pip install git+git://github.com/mattpitkin/lancstro.git#egg=lancstro\n```\n\nThese methods will install the very latest code from the repo, so not necessarily a specific version\n(although that can be done if you've tagged a version or work from a particular the git hash).\n\n### Publishing the package on PyPI\n\nRather than getting people to install code directly from your Github repo, it is often better to\npublish versioned releases of your code. You can publish Python packages on the\n[PyPI](https://pypi.org/) (Python Package Index) repository from which they will then be `pip\ninstallable` by anyone!\n\nFirstly, you'll need to [register an account](https://pypi.org/account/register/) on PyPI. Anyone is\nable to do this. Secondly, you'll need to install the\n[`twine`](https://twine.readthedocs.io/en/latest/) package, which is used for uploading packages to\nPyPI.\n\nWithin your repo's root directory (containing `setup.py`) you can now build a [Python\nwheel](https://pythonwheels.com/) (a zipped binary format of the package designed for speedier\ninstallation) containing your package with:\n\n```bash\npython setup.py bdist_wheel sdist\n```\n\n> Note: if your code is pure Python, creating a wheel should work straightforwardly, but if not the\n> wheel generation may not work. In these cases you can just build a tarball containing the package\n> using:\n>\n> ```bash\n> python setup.py sdist\n> ```\n\nThis should create a `dist/` directory containing a file with the extension `.whl` (built by\nincluding the `bdist_wheel` argument). This is the Python wheel. It should also contain a tarball of\nthe package (built by including the `sdist` argument).\n\nIt is often best to first upload these products to [PyPI's testing\nrepository](https://packaging.python.org/guides/using-testpypi/) (you'll need to [register a\nseparate account](https://test.pypi.org/account/register/) for this), which can be done using\n`twine` with:\n\n```bash\ntwine upload -r testpypi dist/*\n```\n\n> Note: make sure the `dist/` directory is empty before generating the new package version with\n> `python setup.py bdist_wheel sdist` otherwise you might end up uploading multiple versions.\n\nYou should be prompted for your username and password, although there are ways to set these as\n[environment variables](https://twine.readthedocs.io/en/latest/#environment-variables) or\n[using](https://twine.readthedocs.io/en/latest/#keyring-support)\n[`keyring`](https://pypi.org/project/keyring/), so that you don't have to enter them each time. If\nthe upload is successful you should be able to see the project on the Test PyPI site, e.g., at\nhttps://test.pypi.org/project/lancstro/0.0.2/.\n\nYou can test that the package installs correctly from the Test PyPI repository by running\n(potentially in a new virtual environment):\n\n```bash\npip install -i https://test.pypi.org/simple/ lancstro\n```\n\nIf you're happy with the package you can proceed to upload it to the main PyPI repository using:\n\n```bash\ntwine upload dist/*\n```\n\nEt voilà! Now you just need to tell people to run:\n\n```bash\npip install lancstro\n```\n\nto install your [package](https://pypi.org/project/lancstro/0.0.2/). If they want to install a\nparticular version they can use, e.g.,:\n\n```bash\npip install lancstro==0.0.2\n```\n\nOr, if there's a lower or upper version that must be used the inequality operators can be used\ninstead, e.g.,:\n\n```bash\npip install lancstro<=0.0.2\n```\n\n### Publishing the package on conda-forge\n\nYou may (and _should_!) install Python packages in a virtual environment that is relevant for the\nparticular project that you are working on. A popular virtual environment/package manager tool is\n[conda](https://docs.conda.io/en/latest/), which is installed as part of\n[Anaconda](https://www.anaconda.com/). Conda is a package manager for a variety of software, not\njust Python packages, so if creating a conda package for your Python project you can make it\ndependent on specific versions of non-Python libraries (maybe you want to use a specific version of\n[GSL](https://www.gnu.org/software/gsl/)!).\n\nYou can [build a conda\npackage](https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs.html)\nand host it in your own account on Anaconda.org. However, a popular repository for hosting projects\nis [conda-forge](https://conda-forge.org/). An advantage of hosting your package on conda-forge is\nthat it will have been automatically verified by a test suite and reviewed by an actual person, so\nhopefully will be more robust for other users.\n\nGetting a package on conda-forge is quite a bit more involved than uploading to PyPI, although if\nyou already have your package on PyPI that is an advantage (and is what I'll assume in the example\nbelow). The basic steps are given [here](https://conda-forge.org/#add_recipe), but you will need a\nGithub account. I'll detail these a bit more below.\n\n> Note: you will need to have uploaded the package source tarball to PyPI for these instructions to\n> work.\n\n1. Go to https://github.com/conda-forge/staged-recipes and fork the repository to your own account.\n2. In your fork of the repository create a new branch. If you've cloned your fork of the repository\n   you might do:\n\n   ```bash\n   git checkout -b add_lancstro_to_conda_forge\n   ```\n3. In the `recipes/` directory create a new directory with the name of your package and copy the\n   [`meta.yaml`](https://github.com/conda-forge/staged-recipes/blob/main/recipes/example/meta.yaml)\n   file from the `example/` directory into it:\n\n   ```bash\n   cd recipes\n   mkdir lancstro\n   cp example/meta.yaml lancstro\n   ```\n4. Open up the copied `meta.yaml` file in a text editor and change it to look something like below\n   (I've removed a lot of the comments):\n\n```yaml\n{% set name = \"lancstro\" %}\n{% set version = \"0.0.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  # get the SHA256 check sum of the file (on the PyPI page for the package\n  # click on \"Download files\" and then \"View\" under the \"Hashes\" heading)\n  sha256: 2873bb17f5e8cc84ac19e22307cc8567273fcdc57e5dd1f57fe52b2b1a6b1da3\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    # packages required to build and install the package\n    - python\n    - pip\n    - setuptools\n  run:\n    # packges required to run the package\n    - astropy\n    - astroquery >= 0.4.3\n    - python\n\ntest:\n  # make sure the package can at least be imported (other tests can be added)\n  imports:\n    - lancstro\n\nabout:\n  home: https://github.com/mattpitkin/lancstro\n  license: MIT\n  license_family: MIT\n  summary: 'My great package'\n  description: |\n    An example package for showing how to package a package.\n  doc_url: https://lancstro.readthedocs.io/\n  dev_url: https://github.com/mattpitkin/lancstro\n\nextra:\n  recipe-maintainers:\n    # github ids for maintainers\n    - mattpitkin\n```\n5. Commit the changes and push them to your fork of the `staged-recipes` repository.\n6. Open up a pull request (PR) between your branch and conda-forge's `staged-recipes` repo. Call the\n   PR something like \"Add lancstro\". Create the pull request.\n7. After a while check that the test builds in the PR have completed successfully. If not try and\n   fix the issue by editing the (forked) `meta.yaml` file.\n8. Answer and respond to any questions/comments from the assigned reviewer (you shouldn't have to\n   assigned a reviewer, but sometimes you need to prod the appropriate channel).\n8. Wait for a reviewer to sign-off and merge the PR.\n\nAt this point your package should be installable from conda-forge using, e.g.,:\n\n```bash\nconda install -c conda-forge lancstro\n```\n\n## Documentation\n\nYou should try not to just write code for yourself. Academic results should be transparent and\nreproducible, so the code you write and use should be usable by others, therefore _Write The Docs_!\n\nCreating documentation for your code doesn't just mean that your code should contain comments (which\nit definitely should!), but there should also be documentation (on, e.g., a website) on how to\ninstall and use your code. This should include information on the code's\n[API](https://en.wikipedia.org/wiki/API) (just a fancy way of saying show how to use the functions\nand classes in your package). It is also important to have examples of use cases as it's often good\nto \"_show not tell_\". You can store the documentation source files in the same repository as you\npackage (e.g., a `docs/` folder).\n\nI'm not going to describe in detail how to add documentation to a package (I haven't added it into\nthis package yet, but I may add this in the future!), but will just point towards some resources.\nTwo packages that you may want to look into for building documentation are:\n\n1. [Sphinx](https://www.sphinx-doc.org/en/master/)\n2. [mkdocs](https://www.mkdocs.org/)\n\nBoth of these allow you to write documentation in Markdown or reStructuredText and automatically\ninclude (via various extensions/plugins) code docstrings. They can also include Jupyter notebooks.\n\nFor repositories hosted on Github, you can easily and freely set up building and hosting of the\ndocumentation on [Read the Docs](https://readthedocs.org/). You can also publish your [documentation\ndirectly](https://github.blog/2016-08-22-publish-your-project-documentation-with-github-pages/) on\nGithub using [Github Pages](https://pages.github.com/).\n\nThere is an example of using Sphinx for documenting a package\n[here](https://matplotlib.org/sampledoc/).\n\n### Contributions\n\nYour code may be the product of many developer's work. If it's open source you may also be open to\nhaving other developers contributing to it. You should therefore have instructions on how people\nshould contribute and guidelines on the expected behaviour of contributors.\n\nOften you will see a `CONTRIBUTING.md` Markdown file in package repositories that describes how to\ncontribute. If a contributor wants to add/request a new feature, or fix a bug, then they may want to\nopen a Github issue (or post on an appropriate forum) to see if the feature is useful/bug is known.\nIf they have coded up a bug fix/feature then adding that into the repository often involves a\n\"[fork-and-pull request](https://gist.github.com/Chaser324/ce0505fbed06b947d962)\" workflow process\n(this is the process for many projects, e.g.,\n[NumPy](https://numpy.org/doc/stable/dev/development_workflow.html),\n[astropy](https://docs.astropy.org/en/latest/development/workflow/development_workflow.html)):\n\n1. fork the repository to your own Github account\n2. create a new branch on your fork for development\n3. add and commit your changes making sure that they work and don't break the package\n4. push your commits to your fork\n5. create a pull request with the upstream (i.e., original) repository\n6. respond to any comments on the change\n7. merge the request into the original repository\n\n#### Code of conduct\n\nYou should also consider adding a code of conduct to your project outlining expected behaviours\nduring interactions between developers/contributors. There are many examples of code's of conduct\nthat you can often use verbatim (many are licensed using [Creative\nCommons](https://creativecommons.org/licenses/by/4.0/) licenses) or adapt to your needs:\n\n* [astropy code of conduct](https://www.astropy.org/code_of_conduct.html)\n* [NumFOCUS code of conduct](https://numfocus.org/code-of-conduct)\n* [Python Community code of conduct](https://www.python.org/psf/conduct/)\n\n#### Code style\n\nYou may want to enforce a particular style for your code. Many projects follow the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) style guide. There are packages that you can run\non your code to automatically make them conform to this style, e.g.,\n[black](https://black.readthedocs.io/en/stable/) or [flake8](https://flake8.pycqa.org/en/latest/),\nso you should tell contributors to run these on any code they submit (and make sure you run them\nyourself!). You can also add the [pep8speaks](https://pep8speaks.com/) app on Github that will check\nthat any pull request conforms to PEP8 and inform the committer of any violations of the style.\n\nYou can force checks to happen automatically by using the [pre-commit](https://pre-commit.com/)\npackage to add [\"pre-commit\" hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) to\ngit, so that it automatically runs, e.g., black, on any committed code.\n\n## Making code citable\n\nYour code is a very large part of your academic output, so it's good to make your package citable.\nThis way you can receive appropriate acknowledgement when people use it and show evidence of your\noutput. There are a variety of ways of doing this (skewed towards Astro/Physics):\n\n* For packages on Github, link your repository to [Zenodo](https://zenodo.org/) which will provide\n  a citable [DOI](https://www.doi.org/) for you project.\n* Get it linked onto the [Astrophysics Source Code Library](https://ascl.net/) (ASCL). This is\n  indexed on NASA ADS, but does not give a DOI.\n* Write a paper for the [Journal of Open Source Software](https://joss.theoj.org/) (JOSS). This is a\n  very light touch, but peer reviewed publication that also provides a DOI and is indexed on NASA\n  ADS. It does require you to have proper documentation for your package as an acceptable level of\n  documentation is part of the review.\n* Write a paper for a standard journal. Many journals (_MNRAS_, _ApJ_, _PASP_, etc) do now accept\n  papers on software, although it's likely that they should also include a description of a\n  practical use case for the software.\n\n## Not covered here!\n\nThere are many additional useful things that I've not covered here. These include:\n\n* using entry point console scripts rather than, or as well as, including executable scripts\n* including C/C++/FORTRAN code, or [Cython](https://cython.org/)-ized code, in your package\n* creating a [test suite](https://docs.pytest.org/) for your package (and checking its\n  [coverage](https://pytest-cov.readthedocs.io/en/latest/))\n* setting up [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration) for\n  building and testing (and automatically publishing) your code (e.g., with [Github\n  Actions](https://docs.github.com/en/actions), TravisCI, ...)\n\nI may add these at a later date.\n\n## Other resources\n\nFor other descriptions of creating your Python code see:\n\n* [Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/)\n* [`setuptools` documentation](https://setuptools.pypa.io/en/latest/index.html)\n* [\"How to package your Python code\"](https://python-packaging.readthedocs.io/en/latest/index.html)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mattpitkin/lancstro",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lancstro",
    "package_url": "https://pypi.org/project/lancstro/",
    "platform": "",
    "project_url": "https://pypi.org/project/lancstro/",
    "project_urls": {
      "Homepage": "https://github.com/mattpitkin/lancstro"
    },
    "release_url": "https://pypi.org/project/lancstro/0.0.2/",
    "requires_dist": [
      "astropy",
      "astroquery (>=0.4.3)",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Package defining the Lancaster Observational Astronomy group",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11602303,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de0b5dbb02e68172002b6bd25f4d123f8075d87b533fd661c1c1613ade3b51d2",
          "md5": "d33d8e79bf267db46aada6fe578032de",
          "sha256": "2873bb17f5e8cc84ac19e22307cc8567273fcdc57e5dd1f57fe52b2b1a6b1da3"
        },
        "downloads": -1,
        "filename": "lancstro-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d33d8e79bf267db46aada6fe578032de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10581,
        "upload_time": "2021-09-30T11:34:50",
        "upload_time_iso_8601": "2021-09-30T11:34:50.496963Z",
        "url": "https://files.pythonhosted.org/packages/de/0b/5dbb02e68172002b6bd25f4d123f8075d87b533fd661c1c1613ade3b51d2/lancstro-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec09a8deb6fcd61f91a9f31579fb4541f8580af522343190b0cb0184e94d5074",
          "md5": "4452f7a86fa50de3992b91d81a2e1fae",
          "sha256": "029bea10aee7e5893f5e75c31420910f21bbf774807edae8e02ef4095c9a24f8"
        },
        "downloads": -1,
        "filename": "lancstro-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4452f7a86fa50de3992b91d81a2e1fae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17282,
        "upload_time": "2021-10-01T10:33:02",
        "upload_time_iso_8601": "2021-10-01T10:33:02.887167Z",
        "url": "https://files.pythonhosted.org/packages/ec/09/a8deb6fcd61f91a9f31579fb4541f8580af522343190b0cb0184e94d5074/lancstro-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "370c5f0f97ec9ac945cda9f289d5b9d2e883d44abf3a028d7c4b54e223d72fcc",
          "md5": "1c450917b49306244e0a1bd1dd7c6807",
          "sha256": "e44101f28d681bad4b7d2a1f4051e41ba1b62fd3e4de8581d6699e3e1bf9ae9b"
        },
        "downloads": -1,
        "filename": "lancstro-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c450917b49306244e0a1bd1dd7c6807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38777,
        "upload_time": "2021-10-01T10:33:04",
        "upload_time_iso_8601": "2021-10-01T10:33:04.776728Z",
        "url": "https://files.pythonhosted.org/packages/37/0c/5f0f97ec9ac945cda9f289d5b9d2e883d44abf3a028d7c4b54e223d72fcc/lancstro-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec09a8deb6fcd61f91a9f31579fb4541f8580af522343190b0cb0184e94d5074",
        "md5": "4452f7a86fa50de3992b91d81a2e1fae",
        "sha256": "029bea10aee7e5893f5e75c31420910f21bbf774807edae8e02ef4095c9a24f8"
      },
      "downloads": -1,
      "filename": "lancstro-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4452f7a86fa50de3992b91d81a2e1fae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17282,
      "upload_time": "2021-10-01T10:33:02",
      "upload_time_iso_8601": "2021-10-01T10:33:02.887167Z",
      "url": "https://files.pythonhosted.org/packages/ec/09/a8deb6fcd61f91a9f31579fb4541f8580af522343190b0cb0184e94d5074/lancstro-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "370c5f0f97ec9ac945cda9f289d5b9d2e883d44abf3a028d7c4b54e223d72fcc",
        "md5": "1c450917b49306244e0a1bd1dd7c6807",
        "sha256": "e44101f28d681bad4b7d2a1f4051e41ba1b62fd3e4de8581d6699e3e1bf9ae9b"
      },
      "downloads": -1,
      "filename": "lancstro-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1c450917b49306244e0a1bd1dd7c6807",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 38777,
      "upload_time": "2021-10-01T10:33:04",
      "upload_time_iso_8601": "2021-10-01T10:33:04.776728Z",
      "url": "https://files.pythonhosted.org/packages/37/0c/5f0f97ec9ac945cda9f289d5b9d2e883d44abf3a028d7c4b54e223d72fcc/lancstro-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}