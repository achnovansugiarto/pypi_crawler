{
  "info": {
    "author": "Frank Reininghaus",
    "author_email": "frank78ac@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# simple-env-config\n\n[![Build Status](https://travis-ci.com/freininghaus/simple_env_config.svg?branch=master)](https://travis-ci.com/freininghaus/simple_env_config)\n\nThis Python library, which works with Python 3.6 and above, tries to make\nreading configuration values from the environment easy, such that you can\nreplace code like\n\n```python\nimport os\n\nPORT = int(os.getenv(\"PORT\", 8080))\nK8S_NAMESPACE = os.environ[\"K8S_NAMESPACE\"]  # required, no default value\nDEBUG_MODE = os.getenv(\"DEBUG_MODE\", \"0\").lower() in (\"1\", \"true\", \"yes\", \"on\")\n\nrun_app(PORT, K8S_NAMESPACE, DEBUG_MODE)\n```\n\nby\n\n```python\nfrom simple_env_config import env_config\n\n@env_config\nclass Config:\n    port: int = 8080\n    k8s_namespace: str\n    debug_mode: bool = False\n\nrun_app(Config.port, Config.k8s_namespace, Config.debug_mode)\n```\nNote that this example uses lower case variable names in `class Config`. These\nwill be converted to upper case for the environment variable lookup, i.e., the\nvalues will be read from the environment variables `PORT`, `K8S_NAMESPACE`, and\n`DEBUG_MODE`, respectively.\n\nThis behavior can be changed: decorating the class with \n\n    @env_config(upper_case_variable_names=False)\n\nwill cause a case-sensitive variable lookup in the environment.\n\n## Motivation\nAs shown in the example above, parsing many environment variables without\nhelper functions or libraries requires quite a bit code that is not only\nrepetitive, but sometimes even confusing and error prone.\n\nThis library makes this task easier. In contrast to alternatives like\n[environs](https://pypi.org/project/environs/) and\n[environ-config](https://pypi.org/project/environ-config/), which are very\nuseful and offer more features, the goal is maximal simplicity:\n* A single decorator indicates that a class contains parsed environment\n variables.\n* The parsed variable and the environment variable share the same name.\n* Python's type hints are used to request type conversions.\n* Assignment with `=` specifies default values.\n\nThus, very little code is needed, and everything works nicely with static type\ncheckers.\n\nThis design requires Python 3.6 or later. Earlier versions do not support\n[annotating the types of class variables](https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep526).\n\n## Installation\n```bash\npip install simple-env-config\n```\n## Usage\n\nThe library is imported with\n```python\nimport simple_env_config\n```\nor\n```python\nfrom simple_env_config import env_config\n```\nThe following examples use the latter.\n\n### String values\nFor string values, adding the `str` type hint is optional:\n```python\n@env_config\nclass Strings:\n    var1: str = \"A\"\n    var2 = \"B\"\n\nprint(Strings.VAR1, Strings.VAR2)\n```\nThe code above ill print the values of the environment variables VAR1 and VAR2.\nIf any of these are undefined, the default values will be \"A\" and \"B\",\nrespectively.\n\n### Values without defaults\nIf no default value is given for a variable in a class decorated with\n`@env_config`, and the environment variable does not exist, an exception is\nthrown:\n```python\n@env_config\nclass Strings:\n    required: str\n```\nresults in\n```\nsimple_env_config.EnvironmentVariableNotFoundError: \"class 'Strings' expects a value of type <class 'str'> in the environment variable 'REQUIRED'\"\n```\nif there is no environment variable named REQUIRED.\n\n### Converting to other data types\nA type hint indicates the type that the parsed environment variable value should\nbe converted to:\n```python\n@env_config\nclass DataTypes:\n    port: int = 8080\n    tolerance: float = 1e-3\n    debug_mode: bool = False\n```\nIn most cases, a variable whose type hint is `T` will be initialized with the\nexpression `T(value)`, where `value` is the string content of the environment\nvariable.\n\nFor some types, there are special conversion rules.\n\n#### `bool` \nBoolean values are initialized by comparing the string content of the\nenvironment variable case-insensitively with the values in these two groups:\n  * `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`,\n  * `\"0\"`, `\"false\"`, `\"no\"`, `\"off\"`,\n\nand assigning the value `True` or `False`, respectively.\n\n#### `Optional[T]`\nA variable with the type hint `Optional[T]` will be initialized just like a\nvariable with type hint `T`. However, it gets the implicit default value `None`:\n\n```python\n@env_config\nclass ConfigWithOptionals:\n    A: Optional[int]\n    B: Optional[bool]\n```\nIf neither `A` nor `B` are valid environment variables, both `A` and `B` will\nbe assigned the value `None` in this class.\n\nOtherwise, the value of the environment variable `A` will be parsed as an `int`,\nand the value of `B` will be compared case-insensitively with \"true\", \"yes\",\netc., to determine a Boolean value.\n\n#### Conversion errors\nIf a conversion fails, either because the expression `T(value)` raises a\n`ValueError`, or applying the rule for types like `bool` and `Optional[T]`\nfails, a `simple_env_config.CannotConvertEnvironmentVariableError` is thrown.\n\n### Configuration\n`env_config` can be called as a function and accepts a keyword argument\n`upper_case_variable_names`. This argument controls whether the variable names\nwill be converted to upper case before looking up variables in the environment:\n```python\n@env_config(upper_case_variable_names=False)\nclass CaseSensitiveConfig:\n    key: str  # reads from env var 'key'\n    Key: str  # reads from env var 'Key'\n    KEY: str  # reads from env var 'KEY'\n```\nThe default behavior is to consider only upper case environment variables:\n```python\n@env_config\nclass DefaultConfig:\n    # all these variables read from the env var 'KEY'\n    key: str\n    Key: str\n    KEY: str\n```\n\n## Notes on similar libraries\n[env-var-config](https://pypi.org/project/env-var-config/) also makes use of\ntype hints for loading environment variable values into a config object. Notable\ndifferences are:\n* With simple_env_config, only a class decorator is needed to initialize the\n  config object. With env_var_config, a base class and a function call are\n   required.\n* Since simple_env_config stores the loaded values in the class that contains\n  the type hints, and not in an instance of the class, it works better with\n  static type checkers.\n* simple_env_config only accepts pre-defined input strings for `bool` values.\n  For other inputs, it raises an exception, rather than converting them `False`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/freininghaus/simple_env_config",
    "keywords": "env environment config decorator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-env-config",
    "package_url": "https://pypi.org/project/simple-env-config/",
    "platform": "",
    "project_url": "https://pypi.org/project/simple-env-config/",
    "project_urls": {
      "Homepage": "https://github.com/freininghaus/simple_env_config"
    },
    "release_url": "https://pypi.org/project/simple-env-config/0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Make use of environment variables for configuration easy",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8492892,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed61ff73f190bae86ec8b650c591e9f7f73a08cfa837ca90c32fbadaaa3f8450",
          "md5": "9d6046eb164a028e0e8edd549f975642",
          "sha256": "2b23cda4569404ea94de435e9a1317addbd3b9e1f37885c487e49fc50be81f7b"
        },
        "downloads": -1,
        "filename": "simple_env_config-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d6046eb164a028e0e8edd549f975642",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4930,
        "upload_time": "2020-10-06T20:53:43",
        "upload_time_iso_8601": "2020-10-06T20:53:43.663068Z",
        "url": "https://files.pythonhosted.org/packages/ed/61/ff73f190bae86ec8b650c591e9f7f73a08cfa837ca90c32fbadaaa3f8450/simple_env_config-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6ddff2f9566a1f509f5e4dc45ec6b59c1747d3bd39ea163a14d877d3001f841",
          "md5": "e6600674dbc5d82d0acd8feea581835c",
          "sha256": "dc322f6b8c8bfa789ad7c407eab6ba95bde0a809aba5a4bdaafd588009512d47"
        },
        "downloads": -1,
        "filename": "simple_env_config-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6600674dbc5d82d0acd8feea581835c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4348,
        "upload_time": "2020-10-06T20:53:47",
        "upload_time_iso_8601": "2020-10-06T20:53:47.782786Z",
        "url": "https://files.pythonhosted.org/packages/c6/dd/ff2f9566a1f509f5e4dc45ec6b59c1747d3bd39ea163a14d877d3001f841/simple_env_config-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6bf7e5c1c97520139c9abdc47bdc2614e07a22b5f66b13ef023de2d496a1455",
          "md5": "b6918c9e98d3e15086cfa786cb8c9100",
          "sha256": "c4ead9cc74bd3fa89518b58dd9b334ba3dfe28c3a00a2e11310752b670aff3d2"
        },
        "downloads": -1,
        "filename": "simple_env_config-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6918c9e98d3e15086cfa786cb8c9100",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6956,
        "upload_time": "2020-10-24T21:57:05",
        "upload_time_iso_8601": "2020-10-24T21:57:05.473583Z",
        "url": "https://files.pythonhosted.org/packages/f6/bf/7e5c1c97520139c9abdc47bdc2614e07a22b5f66b13ef023de2d496a1455/simple_env_config-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0ab978df582aec2123845b5d00b33de44df88e2116a5390b7c05192b4516039",
          "md5": "0455e321427932219770d866c465cb14",
          "sha256": "fa452dc48726d9ee01b2d499595d2e59a2551e1ec2a14688686d1171cdb04c1f"
        },
        "downloads": -1,
        "filename": "simple_env_config-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0455e321427932219770d866c465cb14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6548,
        "upload_time": "2020-10-24T21:57:07",
        "upload_time_iso_8601": "2020-10-24T21:57:07.962885Z",
        "url": "https://files.pythonhosted.org/packages/f0/ab/978df582aec2123845b5d00b33de44df88e2116a5390b7c05192b4516039/simple_env_config-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6bf7e5c1c97520139c9abdc47bdc2614e07a22b5f66b13ef023de2d496a1455",
        "md5": "b6918c9e98d3e15086cfa786cb8c9100",
        "sha256": "c4ead9cc74bd3fa89518b58dd9b334ba3dfe28c3a00a2e11310752b670aff3d2"
      },
      "downloads": -1,
      "filename": "simple_env_config-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b6918c9e98d3e15086cfa786cb8c9100",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6956,
      "upload_time": "2020-10-24T21:57:05",
      "upload_time_iso_8601": "2020-10-24T21:57:05.473583Z",
      "url": "https://files.pythonhosted.org/packages/f6/bf/7e5c1c97520139c9abdc47bdc2614e07a22b5f66b13ef023de2d496a1455/simple_env_config-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0ab978df582aec2123845b5d00b33de44df88e2116a5390b7c05192b4516039",
        "md5": "0455e321427932219770d866c465cb14",
        "sha256": "fa452dc48726d9ee01b2d499595d2e59a2551e1ec2a14688686d1171cdb04c1f"
      },
      "downloads": -1,
      "filename": "simple_env_config-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0455e321427932219770d866c465cb14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6548,
      "upload_time": "2020-10-24T21:57:07",
      "upload_time_iso_8601": "2020-10-24T21:57:07.962885Z",
      "url": "https://files.pythonhosted.org/packages/f0/ab/978df582aec2123845b5d00b33de44df88e2116a5390b7c05192b4516039/simple_env_config-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}