{
  "info": {
    "author": "",
    "author_email": "Open Machine <tinyfive@openmachine.ai>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# TinyFive\n\n<a href=\"https://colab.research.google.com/github/OpenMachine-ai/tinyfive/blob/main/misc/colab.ipynb\"> <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Colab\" height=\"20\"> </a>\n[![Downloads](https://static.pepy.tech/badge/tinyfive)](https://pepy.tech/project/tinyfive)\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FOpenMachine-ai%2Ftinyfive&title_bg=%23555555&icon=&title=views+%28today+%2F+total%29&edge_flat=false)](https://hits.seeyoufarm.com)\n\nTinyFive is a lightweight RISC-V emulator and assembler written entirely in Python:\n- It's useful for running neural networks on RISC-V: Simulate your RISC-V assembly code along with your neural network in Python (and without relying on RISC-V toolchains). Custom instructions can be easily added.\n- TinyFive is also useful for ML scientists who are using ML/RL for compiler optimization (see e.g. [CompilerGym](https://github.com/facebookresearch/CompilerGym/blob/development/README.md)).\n- If you want to learn how RISC-V works, TinyFive lets you play with instructions and assembly code.\n- Can be very fast if you only use the upper-case instructions defined in the [first ~200 lines of machine.py](machine.py#L1-L200).\n- [Fewer than 1000 lines](machine.py) of code (w/o tests and examples)\n- Uses NumPy for math\n\n## Contents\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Example 1: Multiply two numbers](#example-1-multiply-two-numbers)\n  - [Example 2: Add two vectors](#example-2-add-two-vectors)\n  - [Example 3: Multiply two matrices](#example-3-multiply-two-matrices)\n- [Running in colab](#running-in-colab)\n- [Running without package](#running-without-package)\n- [Speed](#speed)\n- [Latest status](#latest-status)\n- [Comparison](#comparison)\n- [References](#references)\n- [Tiny Tech promise](#tiny-tech-promise)\n\n## Installation\n```\npip install tinyfive\n```\n\n## Usage\nTinyFive can be used in the following three ways:\n- **Option A:** Use upper-case instructions such as `ADD()` and `MUL()`, see examples 1.1, 1.2, 2.1, and 3.1 below.\n- **Option B:** Use `asm()` and `exe()` functions without branch instructions, see examples 1.3 and 2.2 below.\n- **Option C:** Use `asm()` and `exe()` functions with branch instructions, see example 2.3, 3.2, and 3.3 below.\n\nFor the examples below, import and instantiate a RISC-V machine with at least 4KB of memory as follows:\n```python\nfrom tinyfive.machine import machine\nm = machine(mem_size=4000)  # instantiate RISC-V machine with 4KB of memory\n```\n\n### Example 1: Multiply two numbers\n**Example 1.1:** Use upper-case instructions (option A) with back-door loading of registers.\n```python\nm.x[11] = 6        # manually load '6' into register x[11]\nm.x[12] = 7        # manually load '7' into register x[12]\nm.MUL(10, 11, 12)  # x[10] := x[11] * x[12]\nprint(m.x[10])\n# Output: 42\n```\n**Example 1.2:** Same as example 1.1, but now load the data from memory. Specifically, the data values are stored at addresses 0 and 4. Here, each value is 32 bits wide (i.e. 4 bytes wide), which occupies 4 addresses in the byte-wide memory.\n```python\nm.write_i32(6, 0)  # manually write '6' into mem[0] (memory @ address 0)\nm.write_i32(7, 4)  # manually write '7' into mem[4] (memory @ address 4)\nm.LW (11, 0,  0)   # load register x[11] from mem[0 + 0]\nm.LW (12, 4,  0)   # load register x[12] from mem[4 + 0]\nm.MUL(10, 11, 12)  # x[10] := x[11] * x[12]\nprint(m.x[10])\n# Output: 42\n```\n**Example 1.3:** Same as example 1.2, but now use `asm()` and `exe()` (option B). The assembler function `asm()` function takes an instruction and converts it into machine code and stores it in memory at address `s.pc`. Once the entire assembly program is written into memory `mem[]`, the `exe()` function (aka ISS) can then exectute the machine code stored in memory.\n```python\nm.write_i32(6, 0)  # manually write '6' into mem[0] (memory @ address 0)\nm.write_i32(7, 4)  # manually write '7' into mem[4] (memory @ address 4)\n\n# store assembly program in mem[] starting at address 4*20\nm.pc = 4*20\nm.asm('lw',  11, 0,  0)   # load register x[11] from mem[0 + 0]\nm.asm('lw',  12, 4,  0)   # load register x[12] from mem[4 + 0]\nm.asm('mul', 10, 11, 12)  # x[10] := x[11] * x[12]\n\n# execute program from address 4*20: execute 3 instructions and then stop\nm.exe(start=4*20, instructions=3)\nprint(m.x[10])\n# Output: 42\n```\n\n### Example 2: Add two vectors\nWe are using the following memory map for adding two 8-element vectors `res[] := a[] + b[]`, where each vector element is 32 bits wide (i.e. each element occupies 4 byte-addresses in memory).\n| Byte address | Contents |\n| ------------ | -------- |\n|  0   .. 4\\*7   | a-vector: `a[0]` is at address 0, `a[7]` is at address 4\\*7 |\n| 4\\*8  .. 4\\*15 | b-vector: `b[0]` is at address 4\\*8, `b[7]` is at address 4\\*15 |\n| 4\\*16 .. 4\\*23 | result-vector: `res[0]` is at address 4\\*16, `res[7]` is at address 4\\*23 |\n\n**Example 2.1:** Use upper-case instructions (option A) with Python for-loop.\n```python\n# generate 8-element vectors a[] and b[] and store them in memory\na = np.random.randint(100, size=8)\nb = np.random.randint(100, size=8)\nm.write_i32_vec(a, 0)    # write vector a[] to mem[0]\nm.write_i32_vec(b, 4*8)  # write vector b[] to mem[4*8]\n\n# pseudo-assembly for adding vectors a[] and b[] using Python for-loop\nfor i in range(8):\n  m.LW (11, 4*i,      0)   # load x[11] with a[i] from mem[4*i + 0]\n  m.LW (12, 4*(i+8),  0)   # load x[12] with b[i] from mem[4*(i+8) + 0]\n  m.ADD(10, 11,       12)  # x[10] := x[11] + x[12]\n  m.SW (10, 4*(i+16), 0)   # store results in mem[], starting at address 4*16\n\n# compare results against golden reference\nres = m.read_i32_vec(4*16, size=8)  # read result vector from address 4*16\nref = a + b                         # golden reference: simply add a[] + b[]\nprint(res - ref)                    # print difference (should be all-zero)\n# Output: [0 0 0 0 0 0 0 0]\n```\n**Example 2.2**: Same as example 2.1, but now use `asm()` and `exe()` functions without branch instructions (option B).\n```python\n# generate 8-element vectors a[] and b[] and store them in memory\na = np.random.randint(100, size=8)\nb = np.random.randint(100, size=8)\nm.write_i32_vec(a, 0)    # write vector a[] to mem[0]\nm.write_i32_vec(b, 4*8)  # write vector b[] to mem[4*8]\n\n# store assembly program in mem[] starting at address 4*48\nm.pc = 4*48\nfor i in range(8):\n  m.asm('lw',  11, 4*i,      0)   # load x[11] with a[i] from mem[4*i + 0]\n  m.asm('lw',  12, 4*(i+8),  0)   # load x[12] with b[i] from mem[4*(i+8) + 0]\n  m.asm('add', 10, 11,       12)  # x[10] := x[11] + x[12]\n  m.asm('sw',  10, 4*(i+16), 0)   # store results in mem[], starting at address 4*16\n\n# execute program from address 4*48: execute 8*4 instructions and then stop\nm.exe(start=4*48, instructions=8*4)\n\n# compare results against golden reference\nres = m.read_i32_vec(4*16, size=8)  # read result vector from address 4*16\nref = a + b                         # golden reference: simply add a[] + b[]\nprint(res - ref)                    # print difference (should be all-zero)\n# Output: [0 0 0 0 0 0 0 0]\n```\n**Example 2.3:** Same as example 2.2, but now use `asm()` and `exe()` functions with branch instructions (option C). The `lbl()` function defines labels, which are symbolic names that represent memory addresses. These labels improve the readability of branch instructions and mark the start and end of the assembly code executed by the `exe()` function.\n```python\n# generate 8-element vectors a[] and b[] and store them in memory\na = np.random.randint(100, size=8)\nb = np.random.randint(100, size=8)\nm.write_i32_vec(a, 0)    # write vector a[] to mem[0]\nm.write_i32_vec(b, 4*8)  # write vector b[] to mem[4*8]\n\n# store assembly program starting at address 4*48\nm.pc = 4*48\n# x[13] is the loop-variable that is incremented by 4: 0, 4, .., 28\n# x[14] is the constant 28+4 = 32 for detecting the end of the for-loop\nm.lbl('start')                 # define label 'start'\nm.asm('add',  13, 0, 0)        # x[13] := x[0] + x[0] = 0 (because x[0] is always 0)\nm.asm('addi', 14, 0, 32)       # x[14] := x[0] + 32 = 32 (because x[0] is always 0)\nm.lbl('loop')                  # label 'loop'\nm.asm('lw',   11, 0,    13)    # load x[11] with a[] from mem[0 + x[13]]\nm.asm('lw',   12, 4*8,  13)    # load x[12] with b[] from mem[4*8 + x[13]]\nm.asm('add',  10, 11,   12)    # x[10] := x[11] + x[12]\nm.asm('sw',   10, 4*16, 13)    # store x[10] in mem[4*16 + x[13]]\nm.asm('addi', 13, 13,   4)     # x[13] := x[13] + 4 (increment x[13] by 4)\nm.asm('bne',  13, 14, 'loop')  # branch to 'loop' if x[13] != x[14]\nm.lbl('end')                   # label 'end'\n\n# execute program: start at label 'start', stop when label 'end' is reached\nm.exe(start='start', end='end')\n\n# compare results against golden reference\nres = m.read_i32_vec(4*16, size=8)  # read result vector from address 4*16\nref = a + b                         # golden reference: simply add a[] + b[]\nprint(res - ref)                    # print difference (should be all-zero)\n# Output: [0 0 0 0 0 0 0 0]\n```\nA slightly more efficient implementation would decrement the loop variable `x[13]` (instead of incrementing) so that the branch instruction compares against `x[0] = 0` (instead of the constant stored in `x[14]`), which frees up register `x[14]` and reduces the total number of instructions by 1.\n\nUse `print_perf()` to analyze performance and `dump_state()` to print out the current values of the register files and the the program counter (PC) as follows:\n```python\n>>> m.print_perf()\nOps counters: {'total': 50, 'load': 16, 'store': 8, 'mul': 0, 'add': 18, 'madd': 0, 'branch': 8}\nx[] regfile : 5 out of 31 x-registers are used\nf[] regfile : 0 out of 32 f-registers are used\nImage size  : 32 Bytes\n\n>>> m.dump_state()\npc   :  224\nx[ 0]:    0, x[ 1]:    0, x[ 2]:    0, x[ 3]:    0\nx[ 4]:    0, x[ 5]:    0, x[ 6]:    0, x[ 7]:    0\nx[ 8]:    0, x[ 9]:    0, x[10]:   34, x[11]:   27\nx[12]:    7, x[13]:   32, x[14]:   32, x[15]:    0\nx[16]:    0, x[17]:    0, x[18]:    0, x[19]:    0\nx[20]:    0, x[21]:    0, x[22]:    0, x[23]:    0\nx[24]:    0, x[25]:    0, x[26]:    0, x[27]:    0\nx[28]:    0, x[29]:    0, x[30]:    0, x[31]:    0\n```\n\n### Example 3: Multiply two matrices\nWe are using the following memory map for multiplying two 4x4 matrices as `res := np.matmul(A, B)`, where each matrix element is 32 bits wide (i.e. each element occupies 4 byte-addresses in memory).\n| Byte address | Contents |\n| ------------ | -------- |\n|  0    .. 4\\*15 | A-matrix in row-major order: `A[0, 0], A[0, 1], ... A[3, 3]` |\n| 4\\*16 .. 4\\*31 | B-matrix in row-major order: `B[i, j]` is at address `4*(16+i*4+j)` |\n| 4\\*32 .. 4\\*47 | result matrix `res[0, 0] ... res[3, 3]` |\n\n**Example 3.1:** Use upper-case instructions (option A) with Python for-loop.\n```python\n# generate 4x4 matrices A and B and store them in memory\nA = np.random.randint(100, size=(4, 4))\nB = np.random.randint(100, size=(4, 4))\nm.write_i32_vec(A.flatten(), 0)     # write matrix A to mem[0]\nm.write_i32_vec(B.flatten(), 4*16)  # write matrix B to mem[4*16]\n\n# pseudo-assembly for matmul(A, B) using Python for-loops\nfor i in range(4):\n  # load x[10] ... x[13] with row i of A\n  for k in range(4):\n    m.LW (10+k, 4*(4*i+k), 0)  # load x[10+k] with A[i, k]\n\n  for j in range(4):\n    # calculate dot product\n    m.LW (18, 4*(16+j), 0)        # load x[18] with B[0, j]\n    m.MUL(19, 10, 18)             # x[19] := x[10] * x[18] = A[i, 0] * B[0, j]\n    for k in range(1, 4):\n      m.LW (18, 4*(16+4*k+j), 0)  # load x[18] with B[k, j]\n      m.MUL(18, 10+k, 18)         # x[18] := x[10+k] * x[18] = A[i, k] * B[k, j]\n      m.ADD(19, 19, 18)           # x[19] := x[19] + x[18]\n    m.SW (19, 4*(32+i*4+j), 0)    # store res[i, j] from x[19]\n\n# compare results against golden reference\nres = m.read_i32_vec(4*32, size=4*4).reshape(4, 4)  # read result matrix\nref = np.matmul(A, B)            # golden reference\nprint(np.array_equal(res, ref))  # should return 'True'\n# Output: True\n```\n**Example 3.2:** Same as example 3.1, but now use `asm()` and `exe()` functions with branch instructions (option C).\n```python\n# generate 4x4 matrices A and B and store them in memory\nA = np.random.randint(100, size=(4, 4))\nB = np.random.randint(100, size=(4, 4))\nm.write_i32_vec(A.flatten(), 0)     # write matrix A to mem[0]\nm.write_i32_vec(B.flatten(), 4*16)  # write matrix B to mem[4*16]\n\n# store assembly program starting at address 4*128\nm.pc = 4*128\n# here, we decrement the loop variables down to 0 so that we don't need an\n# additional register to hold the constant for detecting the end of the loop:\n#  - x[20] is 4*4*i (i.e. the outer-loop variable) and is decremented by 16 from 64\n#  - x[21] is 4*j (i.e. the inner-loop variable) and is decremented by 4 from 16\nm.lbl('start')\nm.asm('addi', 20, 0, 64)          # x[20] := 0 + 64\n\nm.lbl('outer-loop')\nm.asm('addi', 20, 20, -16)        # decrement loop-variable: x[20] := x[20] - 16\nm.asm('lw',   10, 0,   20)        # load x[10] with A[i, 0] from mem[0 + x[20]]\nm.asm('lw',   11, 4,   20)        # load x[11] with A[i, 1] from mem[4 + x[20]]\nm.asm('lw',   12, 2*4, 20)        # load x[12] with A[i, 2] from mem[2*4 + x[20]]\nm.asm('lw',   13, 3*4, 20)        # load x[13] with A[i, 3] from mem[3*4 + x[20]]\nm.asm('addi', 21, 0, 16)          # reset loop-variable j: x[21] := 0 + 16\n\nm.lbl('inner-loop')\nm.asm('addi', 21, 21, -4)         # decrement j: x[21] := x[21] - 4\n\nm.asm('lw',  18, 4*16, 21)        # load x[18] with B[0, j] from mem[4*16 + x[21]]\nm.asm('mul', 19, 10, 18)          # x[19] := x[10] * x[18] = A[i, 0] * B[0, j]\n\nm.asm('lw',  18, 4*(16+4), 21)    # load x[18] with B[1, j]\nm.asm('mul', 18, 11, 18)          # x[18] := x[11] * x[18] = A[i, 1] * B[1, j]\nm.asm('add', 19, 19, 18)          # x[19] := x[19] + x[18]\n\nm.asm('lw',  18, 4*(16+2*4), 21)  # load x[18] with B[2, j]\nm.asm('mul', 18, 12, 18)          # x[18] := x[11] * x[18] = A[i, 2] * B[2, j]\nm.asm('add', 19, 19, 18)          # x[19] := x[19] + x[18]\n\nm.asm('lw',  18, 4*(16+3*4), 21)  # load x[18] with B[3, j]\nm.asm('mul', 18, 13, 18)          # x[18] := x[11] * x[18] = A[i, 3] * B[3, j]\nm.asm('add', 19, 19, 18)          # x[19] := x[19] + x[18]\n\nm.asm('add', 24, 20, 21)          # calculate base address for result-matrix\nm.asm('sw',  19, 4*32, 24)        # store res[i, j] from x[19]\n\nm.asm('bne', 21, 0, 'inner-loop') # branch to 'inner-loop' if x[21] != 0\nm.asm('bne', 20, 0, 'outer-loop') # branch to 'outer-loop' if x[20] != 0\nm.lbl('end')\n\n# execute program from 'start' to 'end'\nm.exe(start='start', end='end')\n\n# compare results against golden reference\nres = m.read_i32_vec(4*32, size=4*4).reshape(4, 4)  # read result matrix\nref = np.matmul(A, B)            # golden reference\nprint(np.array_equal(res, ref))  # should return 'True'\n# Output: True\n```\n**Example 3.3:** Same as example 3.2,  but now use Python for-loops in the assembly code to improve readability.\n```python\n# generate 4x4 matrices A and B and store them in memory\nA = np.random.randint(100, size=(4, 4))\nB = np.random.randint(100, size=(4, 4))\nm.write_i32_vec(A.flatten(), 0)     # write matrix A to mem[0]\nm.write_i32_vec(B.flatten(), 4*16)  # write matrix B to mem[4*16]\n\n# store assembly program starting at address 4*128\nm.pc = 4*128\n# here, we decrement the loop variables down to 0 so that we don't need an\n# additional register to hold the constant for detecting the end of the loop:\n#  - x[20] is 4*4*i (i.e. the outer-loop variable) and is decremented by 16 from 64\n#  - x[21] is 4*j (i.e. the inner-loop variable) and is decremented by 4 from 16\nm.lbl('start')\nm.asm('addi', 20, 0, 64)            # x[20] := 0 + 64\nm.lbl('outer-loop')\nm.asm('addi', 20, 20, -16)          # decrement loop-variable: x[20] := x[20] - 16\nfor k in range(4):\n  m.asm('lw', 10+k, k*4, 20)        # load x[10+k] with A[i, k] from mem[k*4 + x[20]]\nm.asm('addi', 21, 0, 16)            # reset loop-variable j: x[21] := 0 + 16\nm.lbl('inner-loop')\nm.asm('addi', 21, 21, -4)           # decrement j: x[21] := x[21] - 4\nm.asm('lw',   18, 4*16, 21)         # load x[18] with B[0, j] from mem[4*16 + x[21]]\nm.asm('mul',  19, 10, 18)           # x[19] := x[10] * x[18] = A[i, 0] * B[0, j]\nfor k in range(1, 4):\n  m.asm('lw',  18, 4*(16+k*4), 21)  # load x[18] with B[k, j]\n  m.asm('mul', 18, 10+k, 18)        # x[18] := x[10+k] * x[18] = A[i, k] * B[k, j]\n  m.asm('add', 19, 19, 18)          # x[19] := x[19] + x[18]\nm.asm('add', 24, 20, 21)            # calculate base address for result-matrix\nm.asm('sw',  19, 4*32, 24)          # store res[i, j] from x[19]\nm.asm('bne', 21, 0, 'inner-loop')   # branch to 'inner-loop' if x[21] != 0\nm.asm('bne', 20, 0, 'outer-loop')   # branch to 'outer-loop' if x[20] != 0\nm.lbl('end')\n\n# execute program from 'start' to 'end'\nm.exe(start='start', end='end')\n\n# compare results against golden reference\nres = m.read_i32_vec(4*32, size=4*4).reshape(4, 4)  # read result matrix\nref = np.matmul(A, B)            # golden reference\nprint(np.array_equal(res, ref))  # should return 'True'\n# Output: True\n```\nPerformance numbers for example 3.3:\n```python\n>>> m.print_perf()\nOps counters: {'total': 269, 'load': 80, 'store': 16, 'mul': 64, 'add': 89, 'madd': 0, 'branch': 20}\nx[] regfile : 9 out of 31 x-registers are used\nf[] regfile : 0 out of 32 f-registers are used\nImage size  : 92 Bytes\n```\n**Example 3.4:** 4x4 matrix multiplication optimized for runtime at the expense of image size and register file usage. Specifically, we first store the entire B matrix in the register file. And we fully unroll the for-loops to eliminate loop variables and branch instructions at the expense of a larger image size.\n```python\n# generate 4x4 matrices A and B and store them in memory\nA = np.random.randint(100, size=(4, 4))\nB = np.random.randint(100, size=(4, 4))\nm.write_i32_vec(A.flatten(), 0)     # write matrix A to mem[0]\nm.write_i32_vec(B.flatten(), 4*16)  # write matrix B to mem[4*16]\n\n# store assembly program starting at address 4*128\nm.pc = 4*128\nm.lbl('start')\n# load entire B matrix into registers x[16] ... x[31]\nfor i in range(4):\n  for j in range(4):\n    m.asm('lw', 16+4*i+j, 4*(16+4*i+j), 0)\n# perform matmul in row-major order\nfor i in range(4):\n  for k in range(4):                    # load x[10] ... x[13] with row i of A\n    m.asm('lw', 10+k, 4*(4*i+k), 0)     # load x[10+k] with A[i, k]\n  for j in range(4):\n    m.asm('mul', 15, 10, 16+j)          # x[15] := x[10] * x[16+j] = A[i, 0] * B[0, j]\n    for k in range(1, 4):\n      m.asm('mul', 14, 10+k, 16+4*k+j)  # x[14] := x[10+k] * x[16+4k+j] = A[i, k] * B[k, j]\n      m.asm('add', 15, 15, 14)          # x[15] := x[15] + x[14]\n    m.asm('sw', 15, 4*(32+i*4+j), 0)    # store res[i, j] from x[15]\nm.lbl('end')\n\n# execute program from 'start' to 'end'\nm.exe(start='start', end='end')\n\n# compare results against golden reference\nres = m.read_i32_vec(4*32, size=4*4).reshape(4, 4)  # read result matrix\nref = np.matmul(A, B)            # golden reference\nprint(np.array_equal(res, ref))  # should return 'True'\n# Output: True\n```\nThe table below shows a speedup of 1.7 with the following caveats:\n- The bit-widths don't make sense for fixed point (in general, multiplying two 32-bit integers produces a 64-bit product; and adding 4 of these products requires up to 66 bits).\n- For runtime calculations, we assume that our RISC-V CPU can only perform one instruction per cycle (while many RISC-V cores can perform multiple instructions per cycle).\n- For 16x16 or larger matrices, [Strassen's algorithm](https://en.wikipedia.org/wiki/Strassen_algorithm) and [DeepMind's AlphaTensor](https://www.deepmind.com/blog/discovering-novel-algorithms-with-alphatensor) can reduce the total number of multiplications and additions if they are applied recursively.\n\n|             | Image | Registers | Load | Store | Mul | Add | Branch | Total ops | Speedup |\n|:-----------:|:-----:|:---------:|:----:|:-----:|:---:|:---:|:------:|:---------:|:-------:|\n| Example 3.3 | 92B   | 9         | 80   | 16    | 64  | 89  | 20     | 269       | 1       |\n| Example 3.4 | 640B  | 22        | 32   | 16    | 64  | 48  | 0      | 160       | 1.7     |\n\n## Running in colab\n<a href=\"https://colab.research.google.com/github/OpenMachine-ai/tinyfive/blob/main/misc/colab.ipynb\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Colab\" height=\"20\">\n</a>  This is the quickest way to get started and should work on any machine.\n\nIf you have a free Google Drive account, you can make a copy of this colab via the menu `File` -> `Save a copy in Drive`. Now you can edit the code.\n\nAlternatively, start a new colab in your Google Drive as follows: [Go here](https://drive.google.com/drive/my-drive) and click on `New` -> `More` -> `Google Colaboratory`. Then copy below lines into your colab:\n\n```python\n!pip install tinyfive\nfrom tinyfive.machine import machine\nimport numpy as np\n\nm = machine(mem_size=4000)  # instantiate RISC-V machine with 4KB of memory\n```\n\n## Running without package\nIf you don't want to use the TinyFive python package, then you can clone the latest repo and install numpy as follows:\n```bash\ngit clone https://github.com/OpenMachine-ai/tinyfive.git\ncd tinyfive\npip install numpy\n```\nTo run the examples, type:\n```bash\npython3 examples.py\n```\nTo run the test suite, type:\n```bash\npython3 tests.py\n```\n\nIf you don't want to run above steps on your local machine, you can run it in a colab as follows: Start a new colab in your Google Drive by [going here](https://drive.google.com/drive/my-drive) and clicking on `New` -> `More` -> `Google Colaboratory`. Then copy below lines into your colab:\n```python\n!git clone https://github.com/OpenMachine-ai/tinyfive.git\n%cd tinyfive\n\n# run examples\n!python3 examples.py\n\n# run test suite\n!python3 tests.py\n```\n\n## Speed\n- TinyFive is not optimized for speed (but for ease-of-use and [LOC](https://en.wikipedia.org/wiki/Source_lines_of_code)).\n- You could use PyPy to speed it up (see e.g. the [Pydgin paper](https://www.csl.cornell.edu/~berkin/ilbeyi-pydgin-riscv2016.pdf) for details).\n- If you only use the upper-case instructions such as `ADD()`, then TinyFive is very fast because there is no instruction decoding. And you should be able to accelerate it on a GPU or TPU.\n- If you use the lower-case instructions with `asm()` and `exe()`, then execution of these functions is slow as they involve look-up and string matching with O(n) complexity where \"n\" is the total number of instructions. The current implementations of `asm()` and `dec()` are optimized for ease-of-use and readability. A faster implementation would collapse multiple look-ups into one look-up, optimize the pattern-matching for the instruction decoding (bits -> instruction), and change the order of the instructions so that more frequently used instructions are at the top of the list. [Here is an older version](https://github.com/OpenMachine-ai/tinyfive/blob/2aa4987391561c9c6692602ed3fccdeaee333e0b/tinyfive.py) of TinyFive with a faster `dec()` function that collapses two look-ups (`bits -> instruction` and `instruction -> uppeer-case instruction`) and doesn't use `fnmatch`.\n\n## Latest status\n- TinyFive is still under construction, many things haven't been implemented and tested yet.\n- 37 of the 40 base instructions (RV32I), all instructions of the M-extension (RV32M) and the F-extension (RV32F) with the default rounding mode are already implemented, and many of them are tested.  (The three missing RV32I instructions `fence`, `ebreak`, and `ecall` are not applicable here.)\n- Remaining work: improve testing, add perhaps more extensions. See TODOs in the code for more details.\n\n## Comparison\nThe table below compares TinyFive with other [ISS](https://en.wikipedia.org/wiki/Instruction_set_simulator) and emulator projects.\n\n| ISS | Author | Language | Mature? | Extensions | LOC |\n| --- | ------ | -------- | ------- | ---------- | --- |\n| [TinyFive](https://github.com/OpenMachine-ai/tinyfive)             | OpenMachine          | Python    | No               | I, M, some F  | < 1k |\n| [Pydgin](https://github.com/cornell-brg/pydgin)                    | Cornell University   | Python, C | Last update 2016 | A, D, F, I, M | |\n| [Spike](https://github.com/riscv-software-src/riscv-isa-sim)       | UC Berkeley          | C, C++    | Yes              | All           | |\n| [QEMU](https://www.qemu.org/) | [Fabrice Bellard](https://en.wikipedia.org/wiki/Fabrice_Bellard) | C  | Yes              | All           | |\n| [TinyEMU](https://bellard.org/tinyemu/) | [Fabrice Bellard](https://en.wikipedia.org/wiki/Fabrice_Bellard) | C  | Yes    | All           | |\n| [riscvOVPsim](https://github.com/riscv-ovpsim/imperas-riscv-tests) | Imperas              | C         | Yes              | All           | |\n| [Whisper](https://github.com/chipsalliance/SweRV-ISS)              | Western Digital      | C, C++    | Yes | Almost all                 | |\n| [Sail Model](https://github.com/riscv/sail-riscv)                  | Cambridge, Edinburgh | Sail, C   | Yes | All                        | |\n| [PiMaker/rvc](https://github.com/PiMaker/rvc)                      | PiMaker              | C         |     |                            | |\n| [mini-rv32ima](https://github.com/cnlohr/mini-rv32ima)             | Charles Lohr         | C         |     | A, I, M, Zifencei, Zicsr   | < 1k |\n\n## References\n- Official [RISC-V spec](https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf)\n- See [this RISC-V card](https://inst.eecs.berkeley.edu/~cs61c/fa18/img/riscvcard.pdf) for a brief description of most instructions. See also the [RISC-V reference card](http://riscvbook.com/greencard-20181213.pdf).\n- Book \"The RISC-V Reader: An Open Architecture Atlas\" by David Patterson and Andrew Waterman. Appendix A of this book defines all instructions. The Spanish version of this book is [available for free](http://riscvbook.com/spanish/guia-practica-de-risc-v-1.0.5.pdf),\nother free versions are [available here](http://riscvbook.com).\n- Pydgin [paper](https://www.csl.cornell.edu/~berkin/ilbeyi-pydgin-riscv2016.pdf) and [video](https://youtu.be/-p_AGki7Vsk)\n- [Online simulator](https://ascslab.org/research/briscv/simulator/simulator.html) for debug\n\n## Tiny Tech promise\nSimilar to [tinygrad](https://github.com/geohot/tinygrad), [micrograd](https://github.com/karpathy/micrograd), and other “tiny tech” projects, we believe that core technology should be simple and small (in terms of LOC). Therefore, we will make sure that the core of TinyFive (without tests and examples) will always be below 1000 lines.\n\nSimplicity and size (in terms of number of instructions) is a key feature of [RISC](https://en.wikipedia.org/wiki/Reduced_instruction_set_computer): the \"R\" in RISC stands for \"reduced\" (as opposed to complex CISC). Specifically, the ISA manual of RISC-V has only ~200 pages while the ARM-32 manual is over 2000 pages long according to Fig. 1.6 of\nthe [RISC-V Reader](http://riscvbook.com/spanish/guia-practica-de-risc-v-1.0.5.pdf).\n\n<p align=\"center\">\n  <img src=\"https://github.com/OpenMachine-ai/tinyfive/blob/main/misc/logo.jpg\">\n</p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tinyfive",
    "package_url": "https://pypi.org/project/tinyfive/",
    "platform": null,
    "project_url": "https://pypi.org/project/tinyfive/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OpenMachine-ai/tinyfive/issues",
      "Homepage": "https://github.com/OpenMachine-ai/tinyfive"
    },
    "release_url": "https://pypi.org/project/tinyfive/0.0.13/",
    "requires_dist": [
      "numpy>1.20.0"
    ],
    "requires_python": ">=3.6",
    "summary": "TinyFive is a lightweight RISC-V emulator and assembler written entirely in Python",
    "version": "0.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17106749,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ab7593e433c6dd8203c49c0456a80ece64775360069cb037d0305eb8aa5e46",
          "md5": "2d1af446d681a6363149bc21c70f9bcf",
          "sha256": "95bd0d539d59c98331992753535be329824c0cfe26c02abd4a4705c4af984114"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d1af446d681a6363149bc21c70f9bcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16540,
        "upload_time": "2023-01-11T00:44:59",
        "upload_time_iso_8601": "2023-01-11T00:44:59.057977Z",
        "url": "https://files.pythonhosted.org/packages/66/ab/7593e433c6dd8203c49c0456a80ece64775360069cb037d0305eb8aa5e46/tinyfive-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec9e9dfd2ef3eb25d200001cb7a08e69129a74ba92008612429478ad27fa60c3",
          "md5": "b8e8353ca78352f1a211f1fc38dfcbb9",
          "sha256": "4111f4262fe27796385c60036a79e4b21a03b16ae7a4216109f3c8a79b7ccb4f"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "b8e8353ca78352f1a211f1fc38dfcbb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15913,
        "upload_time": "2023-01-11T00:45:01",
        "upload_time_iso_8601": "2023-01-11T00:45:01.224854Z",
        "url": "https://files.pythonhosted.org/packages/ec/9e/9dfd2ef3eb25d200001cb7a08e69129a74ba92008612429478ad27fa60c3/tinyfive-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03d13f22595704a76c88994d379fe814285e95dee15834f2b0a17b8d6c596bd9",
          "md5": "d34a0e74ab6a989041e644a39f6133a1",
          "sha256": "feb3d745bb2b6725fda58d3c629c38714a49370693f3c3aab4b1466a1f9c4437"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d34a0e74ab6a989041e644a39f6133a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16930,
        "upload_time": "2023-01-11T22:33:37",
        "upload_time_iso_8601": "2023-01-11T22:33:37.313999Z",
        "url": "https://files.pythonhosted.org/packages/03/d1/3f22595704a76c88994d379fe814285e95dee15834f2b0a17b8d6c596bd9/tinyfive-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6afd4218223635e58231ec5bb38b965f7c7729cd740d85091e9b4db1bad3e5c",
          "md5": "d507f8a1f06fe18cb631d6b7363c736a",
          "sha256": "0ab837a91f6f3d0967395c4147513a232ba9fdfd0569513b395747968217bb00"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "d507f8a1f06fe18cb631d6b7363c736a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16313,
        "upload_time": "2023-01-11T22:33:39",
        "upload_time_iso_8601": "2023-01-11T22:33:39.269245Z",
        "url": "https://files.pythonhosted.org/packages/f6/af/d4218223635e58231ec5bb38b965f7c7729cd740d85091e9b4db1bad3e5c/tinyfive-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f2dd27265176cc97ac1d14b6b640ce33a1c9661f4fba15b8bd974a82a22544f",
          "md5": "daf52b6919cb42532a768fd40c1dc117",
          "sha256": "d06e19cdc993c0e8f35f602ff9d15b9d41886cb2584479daf66150d61b5c5060"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daf52b6919cb42532a768fd40c1dc117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16862,
        "upload_time": "2023-02-27T03:19:25",
        "upload_time_iso_8601": "2023-02-27T03:19:25.725314Z",
        "url": "https://files.pythonhosted.org/packages/9f/2d/d27265176cc97ac1d14b6b640ce33a1c9661f4fba15b8bd974a82a22544f/tinyfive-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95f10c64f887bd2a5bc74b690b4ea23467985e1b5fbc7c6fd78bab4e40d73b5",
          "md5": "9a76c7ca61a0ca459da6d7851bc74994",
          "sha256": "21a9a94b6493c9eff65735b9d987e23ad2d61ccbabd7f8a82faf270ad351ab08"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "9a76c7ca61a0ca459da6d7851bc74994",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16243,
        "upload_time": "2023-02-27T03:19:27",
        "upload_time_iso_8601": "2023-02-27T03:19:27.794191Z",
        "url": "https://files.pythonhosted.org/packages/c9/5f/10c64f887bd2a5bc74b690b4ea23467985e1b5fbc7c6fd78bab4e40d73b5/tinyfive-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51b3f381693de124041af4e93d47faeed7a5fc412bfc714c125bd857330594ee",
          "md5": "8701a2dcc0f34f97f20b140b1fd1f874",
          "sha256": "a957d9c3c1df53fa61a389f59be2c1a843b5c7a9d691227fd776c2c454c3de0f"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8701a2dcc0f34f97f20b140b1fd1f874",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17587,
        "upload_time": "2023-03-01T04:38:07",
        "upload_time_iso_8601": "2023-03-01T04:38:07.468529Z",
        "url": "https://files.pythonhosted.org/packages/51/b3/f381693de124041af4e93d47faeed7a5fc412bfc714c125bd857330594ee/tinyfive-0.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c63e9e74b1c50d533f7a1a7467fdf46268347825070761fc4049b5933987e577",
          "md5": "88de08723216afb99a8ae6929e145e57",
          "sha256": "529112fcf5875f61f620ce1906a37a343fe805284b0d44c74da5af547d557210"
        },
        "downloads": -1,
        "filename": "tinyfive-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "88de08723216afb99a8ae6929e145e57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17006,
        "upload_time": "2023-03-01T04:38:09",
        "upload_time_iso_8601": "2023-03-01T04:38:09.907100Z",
        "url": "https://files.pythonhosted.org/packages/c6/3e/9e74b1c50d533f7a1a7467fdf46268347825070761fc4049b5933987e577/tinyfive-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51b3f381693de124041af4e93d47faeed7a5fc412bfc714c125bd857330594ee",
        "md5": "8701a2dcc0f34f97f20b140b1fd1f874",
        "sha256": "a957d9c3c1df53fa61a389f59be2c1a843b5c7a9d691227fd776c2c454c3de0f"
      },
      "downloads": -1,
      "filename": "tinyfive-0.0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8701a2dcc0f34f97f20b140b1fd1f874",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17587,
      "upload_time": "2023-03-01T04:38:07",
      "upload_time_iso_8601": "2023-03-01T04:38:07.468529Z",
      "url": "https://files.pythonhosted.org/packages/51/b3/f381693de124041af4e93d47faeed7a5fc412bfc714c125bd857330594ee/tinyfive-0.0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c63e9e74b1c50d533f7a1a7467fdf46268347825070761fc4049b5933987e577",
        "md5": "88de08723216afb99a8ae6929e145e57",
        "sha256": "529112fcf5875f61f620ce1906a37a343fe805284b0d44c74da5af547d557210"
      },
      "downloads": -1,
      "filename": "tinyfive-0.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "88de08723216afb99a8ae6929e145e57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17006,
      "upload_time": "2023-03-01T04:38:09",
      "upload_time_iso_8601": "2023-03-01T04:38:09.907100Z",
      "url": "https://files.pythonhosted.org/packages/c6/3e/9e74b1c50d533f7a1a7467fdf46268347825070761fc4049b5933987e577/tinyfive-0.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}