{
  "info": {
    "author": "Tom Ritchford",
    "author_email": "tom@swirly.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "🏃 runs: subprocess with the sharp edges removed 🏃\n-------------------------------------------------------\n\n``subprocess`` is essential but:\n\n* You can only run one command, not a sequence of them\n\n* Commands to subprocess must be either a sequence of strings or a string,\n  depending on whether shell=True or not\n\n* Results are returned by default as binary strings\n\n``runs`` lets you run a block of text as a sequence of subprocess calls It\nprovides nearly drop-in replacements for four key functions from\n``subprocess``: ``call()``, ``check_call()``, ``check_output()``, and ``run()``\n- the big change is that each returns a list of values and not a single value.\n\nThe ``runs`` functions also allow comments and line continuations, optional\nlogging and error handling, and lazy evaluation.\n\n\nEXAMPLES:\n\n.. code-block:: python\n\n    # Calling runs() on a block of text is like typing\n    # the commands from the keyboard: the results go to stdout and stderr./\n\n    import runs\n    runs('ls')\n    runs.run('ls')  # Same as the previous line\n\n    # runs.check_output() returns a list: one string result for each command\n\n    results = check_output('''\n        echo  line   one  # Here's line one.\n        echo   'line \"  two  \"'  # and two!\n    ''')\n    assert results == ['line one', 'line \"  two  \"']\n\n    # Line continuations work too\n    runs('''\n        ls -cail\n\n        # One command that takes many lines.\n        g++ -DDEBUG  -O0 -g -std=c++17 -pthread -I ./include -lm -lstdc++ \\\n          -Wall -Wextra -Wno-strict-aliasing -Wpedantic \\\\\n          -MMD -MP -MF -c src/tests.cpp -o build/./src/tests.cpp.o\n     ''')\n\nNOTES:\n\n* I can see no good way to make pipes or redirection work.\n\n.. code-block:: python\n\n    import runs\n    result = runs.check_output('echo \"foo\" > bar.txt')\n    assert result == ['foo > bar.txt\\n']  # :-/\n\n*  Environment variables are not expanded\n\n.. code-block:: python\n\n    import runs\n    result = runs.check_output('echo $FOO', env={'FOO': 'bah!'})\n    assert result == ['$FOO\\n']\n\nOne could make these substitutions work but it would be more reliable and less\nwork to use ``string.format`` or f-strings in Python.\n\nThe environment variables *are* visible in any binaries you call, and that's\nthe important thing.\n\nAPI\n===\n\n``runs()``\n~~~~~~~~~~\n\n.. code-block:: python\n\n  runs(\n       *args,\n       iterate=False,\n       encoding='utf8',\n       on_exception=None,\n       echo=False,\n       **kwargs,\n  )\n\n(`runs.py, 153-167 <https://github.com/rec/runs/blob/master/runs.py#L153-L167>`_)\n\nRun each command with arguments. Return a list of ``subprocess.CompletedProcess`` instances.\n\nSee the help for ``subprocess.run`` for more information.\n\nArguments:\n  commands:\n    One string, which gets split into lines on line endings, or a list of\n    strings.\n\n  args:\n    Positional arguments for ``subprocess.run`` (but prefer keyword\n    arguments!)\n\n  on_exception:\n    If ``on_exception`` is ``False``, the default, exceptions from\n    ``subprocess.run`` are raised as usual.\n\n    If ``on_exception`` is True, they are ignored.\n\n    If ``on_exception`` is a callable, the line that caused the exception is\n    passed to it.\n\n    If ``on_exception`` is a string, the line causing the exception\n    is printed, prefixed with that string.\n\n  echo:\n    If ``echo`` is ``False``, the default, then commands are silently executed.\n    If ``echo`` is ``True``, commands are printed prefixed with ``$``\n    If ``echo`` is a string, commands are printed prefixed with that string\n    If ``echo`` is callable, then each command is passed to it.\n\n  iterate:\n    If ``iterate`` is ``False``, the default, then a list of results is\n    returned.\n\n    Otherwise an iterator of results which is returned, allowing for lazy\n    evaluation.\n\n  encoding:\n    Like the argument to ``subprocess.run``, except the default  is\n    ``'utf8'``\n\n  kwargs:\n    Named arguments passed on to ``subprocess.run``\n\n``runs.call()``\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  runs.call(\n       commands,\n       *args,\n       iterate=False,\n       encoding='utf8',\n       on_exception=None,\n       echo=False,\n       **kwargs,\n  )\n\n(`runs.py, 153-167 <https://github.com/rec/runs/blob/master/runs.py#L153-L167>`_)\n\nRun each command with arguments. Return a list of returncodes, one\nfor each command executed\n\nSee the help for ``subprocess.call`` for more information.\n\nArguments:\n  commands:\n    One string, which gets split into lines on line endings, or a list of\n    strings.\n\n  args:\n    Positional arguments for ``subprocess.call`` (but prefer keyword\n    arguments!)\n\n  on_exception:\n    If ``on_exception`` is ``False``, the default, exceptions from\n    ``subprocess.call`` are raised as usual.\n\n    If ``on_exception`` is True, they are ignored.\n\n    If ``on_exception`` is a callable, the line that caused the exception is\n    passed to it.\n\n    If ``on_exception`` is a string, the line causing the exception\n    is printed, prefixed with that string.\n\n  echo:\n    If ``echo`` is ``False``, the default, then commands are silently executed.\n    If ``echo`` is ``True``, commands are printed prefixed with ``$``\n    If ``echo`` is a string, commands are printed prefixed with that string\n    If ``echo`` is callable, then each command is passed to it.\n\n  iterate:\n    If ``iterate`` is ``False``, the default, then a list of results is\n    returned.\n\n    Otherwise an iterator of results which is returned, allowing for lazy\n    evaluation.\n\n  encoding:\n    Like the argument to ``subprocess.call``, except the default  is\n    ``'utf8'``\n\n  kwargs:\n    Named arguments passed on to ``subprocess.call``\n\n``runs.check_call()``\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  runs.check_call(\n       commands,\n       *args,\n       iterate=False,\n       encoding='utf8',\n       on_exception=None,\n       echo=False,\n       **kwargs,\n  )\n\n(`runs.py, 153-167 <https://github.com/rec/runs/blob/master/runs.py#L153-L167>`_)\n\nRun each command with arguments. If any command has a non-zero exit code,\nraise a ``subprocess.CallProcessError``.\n\nSee the help for ``subprocess.check_call`` for more information.\n\nArguments:\n  commands:\n    One string, which gets split into lines on line endings, or a list of\n    strings.\n\n  args:\n    Positional arguments for ``subprocess.check_call`` (but prefer keyword\n    arguments!)\n\n  on_exception:\n    If ``on_exception`` is ``False``, the default, exceptions from\n    ``subprocess.check_call`` are raised as usual.\n\n    If ``on_exception`` is True, they are ignored.\n\n    If ``on_exception`` is a callable, the line that caused the exception is\n    passed to it.\n\n    If ``on_exception`` is a string, the line causing the exception\n    is printed, prefixed with that string.\n\n  echo:\n    If ``echo`` is ``False``, the default, then commands are silently executed.\n    If ``echo`` is ``True``, commands are printed prefixed with ``$``\n    If ``echo`` is a string, commands are printed prefixed with that string\n    If ``echo`` is callable, then each command is passed to it.\n\n  iterate:\n    If ``iterate`` is ``False``, the default, then a list of results is\n    returned.\n\n    Otherwise an iterator of results which is returned, allowing for lazy\n    evaluation.\n\n  encoding:\n    Like the argument to ``subprocess.check_call``, except the default  is\n    ``'utf8'``\n\n  kwargs:\n    Named arguments passed on to ``subprocess.check_call``\n\n``runs.check_output()``\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  runs.check_output(\n       commands,\n       *args,\n       iterate=False,\n       encoding='utf8',\n       on_exception=None,\n       echo=False,\n       **kwargs,\n  )\n\n(`runs.py, 153-167 <https://github.com/rec/runs/blob/master/runs.py#L153-L167>`_)\n\nRun each command with arguments. If a command has a non-zero exit code,\nraise a ``subprocess.CallProcessError``.  Otherwise, return the results as a\nlist of strings.\n\nSee the help for ``subprocess.check_output`` for more information.\n\nArguments:\n  commands:\n    One string, which gets split into lines on line endings, or a list of\n    strings.\n\n  args:\n    Positional arguments for ``subprocess.check_output`` (but prefer keyword\n    arguments!)\n\n  on_exception:\n    If ``on_exception`` is ``False``, the default, exceptions from\n    ``subprocess.check_output`` are raised as usual.\n\n    If ``on_exception`` is True, they are ignored.\n\n    If ``on_exception`` is a callable, the line that caused the exception is\n    passed to it.\n\n    If ``on_exception`` is a string, the line causing the exception\n    is printed, prefixed with that string.\n\n  echo:\n    If ``echo`` is ``False``, the default, then commands are silently executed.\n    If ``echo`` is ``True``, commands are printed prefixed with ``$``\n    If ``echo`` is a string, commands are printed prefixed with that string\n    If ``echo`` is callable, then each command is passed to it.\n\n  iterate:\n    If ``iterate`` is ``False``, the default, then a list of results is\n    returned.\n\n    Otherwise an iterator of results which is returned, allowing for lazy\n    evaluation.\n\n  encoding:\n    Like the argument to ``subprocess.check_output``, except the default  is\n    ``'utf8'``\n\n  kwargs:\n    Named arguments passed on to ``subprocess.check_output``\n\n``runs.run()``\n~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  runs.run(\n       commands,\n       *args,\n       iterate=False,\n       encoding='utf8',\n       on_exception=None,\n       echo=False,\n       **kwargs,\n  )\n\n(`runs.py, 153-167 <https://github.com/rec/runs/blob/master/runs.py#L153-L167>`_)\n\nRun each command with arguments. Return a list of ``subprocess.CompletedProcess`` instances.\n\nSee the help for ``subprocess.run`` for more information.\n\nArguments:\n  commands:\n    One string, which gets split into lines on line endings, or a list of\n    strings.\n\n  args:\n    Positional arguments for ``subprocess.run`` (but prefer keyword\n    arguments!)\n\n  on_exception:\n    If ``on_exception`` is ``False``, the default, exceptions from\n    ``subprocess.run`` are raised as usual.\n\n    If ``on_exception`` is True, they are ignored.\n\n    If ``on_exception`` is a callable, the line that caused the exception is\n    passed to it.\n\n    If ``on_exception`` is a string, the line causing the exception\n    is printed, prefixed with that string.\n\n  echo:\n    If ``echo`` is ``False``, the default, then commands are silently executed.\n    If ``echo`` is ``True``, commands are printed prefixed with ``$``\n    If ``echo`` is a string, commands are printed prefixed with that string\n    If ``echo`` is callable, then each command is passed to it.\n\n  iterate:\n    If ``iterate`` is ``False``, the default, then a list of results is\n    returned.\n\n    Otherwise an iterator of results which is returned, allowing for lazy\n    evaluation.\n\n  encoding:\n    Like the argument to ``subprocess.run``, except the default  is\n    ``'utf8'``\n\n  kwargs:\n    Named arguments passed on to ``subprocess.run``\n\n(automatically generated by `doks <https://github.com/rec/doks/>`_ on 2020-11-14T19:24:25.790753)\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rec/runs",
    "keywords": "testing,modules",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "runs",
    "package_url": "https://pypi.org/project/runs/",
    "platform": "",
    "project_url": "https://pypi.org/project/runs/",
    "project_urls": {
      "Homepage": "https://github.com/rec/runs"
    },
    "release_url": "https://pypi.org/project/runs/1.1.0/",
    "requires_dist": [
      "xmod"
    ],
    "requires_python": "",
    "summary": "Runs a block of text as a subrprocess",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8679430,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dd34473b639b6df03db1eeeda063b7848b168f0f80c182f9bd22e2ccf965d11",
          "md5": "5ec0b3c98926ba79e778b9d84577997f",
          "sha256": "b5839315f80a752427284f460c2f092a7d2841248316cb883a6e6ebb17915913"
        },
        "downloads": -1,
        "filename": "runs-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ec0b3c98926ba79e778b9d84577997f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2853,
        "upload_time": "2020-11-09T11:50:02",
        "upload_time_iso_8601": "2020-11-09T11:50:02.362798Z",
        "url": "https://files.pythonhosted.org/packages/2d/d3/4473b639b6df03db1eeeda063b7848b168f0f80c182f9bd22e2ccf965d11/runs-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9c50c6513deb95c90691f8848cc5f5cde87bdde1b92ebd2af1cf27eab8b0fc",
          "md5": "24ed9dd3c383f61eabc0531b559625ee",
          "sha256": "b2a7f426455f1e59a2df2512726544cfdb25996b7f1d16fc2fa9a1a786ba1e1c"
        },
        "downloads": -1,
        "filename": "runs-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24ed9dd3c383f61eabc0531b559625ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2075,
        "upload_time": "2020-11-09T11:50:14",
        "upload_time_iso_8601": "2020-11-09T11:50:14.846785Z",
        "url": "https://files.pythonhosted.org/packages/ab/9c/50c6513deb95c90691f8848cc5f5cde87bdde1b92ebd2af1cf27eab8b0fc/runs-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74d745404df2c373a971c475faa3ba84c879da32516d16f32472b24a8ca086bf",
          "md5": "2a21e744e918b12a8e03fd2fc4a0c849",
          "sha256": "c64216397bd1e255ed56f22b9cefe507e75e8c3c76946c2e869488593b6bd767"
        },
        "downloads": -1,
        "filename": "runs-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a21e744e918b12a8e03fd2fc4a0c849",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6469,
        "upload_time": "2020-11-14T18:39:49",
        "upload_time_iso_8601": "2020-11-14T18:39:49.779075Z",
        "url": "https://files.pythonhosted.org/packages/74/d7/45404df2c373a971c475faa3ba84c879da32516d16f32472b24a8ca086bf/runs-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfa3fa3497a7191361f233de3d20b97fbdaa40114957292b5d802869ad858013",
          "md5": "f5d16193ca49b018fc674de049dcd208",
          "sha256": "0348be6c966fc4164e816a53bd5d1c6c8c01c86691cb8800b90bb065987087ff"
        },
        "downloads": -1,
        "filename": "runs-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f5d16193ca49b018fc674de049dcd208",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4938,
        "upload_time": "2020-11-14T18:39:51",
        "upload_time_iso_8601": "2020-11-14T18:39:51.430460Z",
        "url": "https://files.pythonhosted.org/packages/cf/a3/fa3497a7191361f233de3d20b97fbdaa40114957292b5d802869ad858013/runs-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9511cfa0b0ce7688c5d24356883340c7395b75a65da811b0f006805fe5bd8032",
          "md5": "9647a162f5cbea3efff73345860c6969",
          "sha256": "14cf2636c580fef79077de5e4afe693cdf92fc52344fd9cb994cc2b1566d788a"
        },
        "downloads": -1,
        "filename": "runs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9647a162f5cbea3efff73345860c6969",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6475,
        "upload_time": "2020-11-14T18:42:41",
        "upload_time_iso_8601": "2020-11-14T18:42:41.439281Z",
        "url": "https://files.pythonhosted.org/packages/95/11/cfa0b0ce7688c5d24356883340c7395b75a65da811b0f006805fe5bd8032/runs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e4fbfbe6cd1f65ffc6f6dfa3e3a57759e28a8a621be6549df603c0aa145b983",
          "md5": "98b39e3355f49e5b1bdfa1a567e2d877",
          "sha256": "f21ca2361ad741489de7074a401a71104ed10122eeef8f9720cf2a0c7ad2cdee"
        },
        "downloads": -1,
        "filename": "runs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98b39e3355f49e5b1bdfa1a567e2d877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4940,
        "upload_time": "2020-11-14T18:42:43",
        "upload_time_iso_8601": "2020-11-14T18:42:43.063447Z",
        "url": "https://files.pythonhosted.org/packages/9e/4f/bfbe6cd1f65ffc6f6dfa3e3a57759e28a8a621be6549df603c0aa145b983/runs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc123cd1e484a2276271c6b365a7213e10274f8da5b53b300738c7585936e003",
          "md5": "ebc37271248ba6d2c4ad7ec09085b13f",
          "sha256": "702a31bec6d3336175ab6dcadd605ebd39b75d792a98303202b090d4556883e3"
        },
        "downloads": -1,
        "filename": "runs-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebc37271248ba6d2c4ad7ec09085b13f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6479,
        "upload_time": "2020-11-17T12:25:21",
        "upload_time_iso_8601": "2020-11-17T12:25:21.111459Z",
        "url": "https://files.pythonhosted.org/packages/bc/12/3cd1e484a2276271c6b365a7213e10274f8da5b53b300738c7585936e003/runs-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17ee30e49d568c07300ed52a44dc8cecb6b20262fbd1c15645399f295f09b002",
          "md5": "a0f61b729b33740b4f07269521d0aac3",
          "sha256": "c8685f129e54086f103b365c8d20c3f117f7518d0717962905c96248643530ef"
        },
        "downloads": -1,
        "filename": "runs-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0f61b729b33740b4f07269521d0aac3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4941,
        "upload_time": "2020-11-17T12:25:22",
        "upload_time_iso_8601": "2020-11-17T12:25:22.787626Z",
        "url": "https://files.pythonhosted.org/packages/17/ee/30e49d568c07300ed52a44dc8cecb6b20262fbd1c15645399f295f09b002/runs-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc123cd1e484a2276271c6b365a7213e10274f8da5b53b300738c7585936e003",
        "md5": "ebc37271248ba6d2c4ad7ec09085b13f",
        "sha256": "702a31bec6d3336175ab6dcadd605ebd39b75d792a98303202b090d4556883e3"
      },
      "downloads": -1,
      "filename": "runs-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ebc37271248ba6d2c4ad7ec09085b13f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6479,
      "upload_time": "2020-11-17T12:25:21",
      "upload_time_iso_8601": "2020-11-17T12:25:21.111459Z",
      "url": "https://files.pythonhosted.org/packages/bc/12/3cd1e484a2276271c6b365a7213e10274f8da5b53b300738c7585936e003/runs-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17ee30e49d568c07300ed52a44dc8cecb6b20262fbd1c15645399f295f09b002",
        "md5": "a0f61b729b33740b4f07269521d0aac3",
        "sha256": "c8685f129e54086f103b365c8d20c3f117f7518d0717962905c96248643530ef"
      },
      "downloads": -1,
      "filename": "runs-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a0f61b729b33740b4f07269521d0aac3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4941,
      "upload_time": "2020-11-17T12:25:22",
      "upload_time_iso_8601": "2020-11-17T12:25:22.787626Z",
      "url": "https://files.pythonhosted.org/packages/17/ee/30e49d568c07300ed52a44dc8cecb6b20262fbd1c15645399f295f09b002/runs-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}