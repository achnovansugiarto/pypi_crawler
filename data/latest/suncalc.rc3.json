{
  "info": {
    "author": "Kyle Barron",
    "author_email": "kylebarron2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# suncalc-py\n\n<p>\n  <a href=\"https://github.com/kylebarron/suncalc-py/actions?query=workflow%3ACI\" target=\"_blank\">\n      <img src=\"https://github.com/kylebarron/suncalc-py/workflows/test/badge.svg\" alt=\"Test\">\n  </a>\n  <a href=\"https://pypi.org/project/suncalc\" target=\"_blank\">\n      <img src=\"https://img.shields.io/pypi/v/suncalc?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n  </a>\n  <a href=\"https://github.com/kylebarron/suncalc-py/blob/master/LICENSE\" target=\"_blank\">\n      <img src=\"https://img.shields.io/github/license/kylebarron/suncalc-py.svg\" alt=\"Downloads\">\n  </a>\n</p>\n\n\nA fast, vectorized Python implementation of [`suncalc.js`][suncalc-js] for\ncalculating sun position and sunlight phases (times for sunrise, sunset, dusk,\netc.) for the given location and time.\n\n[suncalc-js]: https://github.com/mourner/suncalc\n\nWhile other similar libraries exist, I didn't originally encounter any that met\nmy requirements of being both openly-licensed and vectorized <sup>1</sup>\n\n## Install\n\n```\npip install suncalc\n```\n\n## Using\n\n### Example\n\n`suncalc` is designed to work both with single values and with arrays of values.\n\nFirst, import the module:\n\n```py\nfrom suncalc import get_position, get_times\nfrom datetime import datetime\n```\n\nThere are currently two methods: `get_position`, to get the sun azimuth and\naltitude for a given date and position, and `get_times`, to get sunlight phases\nfor a given date and position.\n\n```py\ndate = datetime.now()\nlon = 20\nlat = 45\nget_position(date, lon, lat)\n# {'azimuth': -0.8619668996997687, 'altitude': 0.5586446727994595}\n\nget_times(date, lon, lat)\n# {'solar_noon': Timestamp('2020-11-20 08:47:08.410863770'),\n#  'nadir': Timestamp('2020-11-19 20:47:08.410863770'),\n#  'sunrise': Timestamp('2020-11-20 03:13:22.645455322'),\n#  'sunset': Timestamp('2020-11-20 14:20:54.176272461'),\n#  'sunrise_end': Timestamp('2020-11-20 03:15:48.318936035'),\n#  'sunset_start': Timestamp('2020-11-20 14:18:28.502791748'),\n#  'dawn': Timestamp('2020-11-20 02:50:00.045539551'),\n#  'dusk': Timestamp('2020-11-20 14:44:16.776188232'),\n#  'nautical_dawn': Timestamp('2020-11-20 02:23:10.019832520'),\n#  'nautical_dusk': Timestamp('2020-11-20 15:11:06.801895264'),\n#  'night_end': Timestamp('2020-11-20 01:56:36.144269287'),\n#  'night': Timestamp('2020-11-20 15:37:40.677458252'),\n#  'golden_hour_end': Timestamp('2020-11-20 03:44:46.795967773'),\n#  'golden_hour': Timestamp('2020-11-20 13:49:30.025760010')}\n```\n\nThese methods also work for _arrays_ of data, and since the implementation is\nvectorized it's much faster than a for loop in Python.\n\n```py\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'date': [date] * 10,\n    'lon': [lon] * 10,\n    'lat': [lat] * 10\n})\npd.DataFrame(get_position(df['date'], df['lon'], df['lat']))\n# azimuth\taltitude\n# 0\t-1.485509\t-1.048223\n# 1\t-1.485509\t-1.048223\n# ...\n\npd.DataFrame(get_times(df['date'], df['lon'], df['lat']))['solar_noon']\n# 0   2020-11-20 08:47:08.410863872+00:00\n# 1   2020-11-20 08:47:08.410863872+00:00\n# ...\n# Name: solar_noon, dtype: datetime64[ns, UTC]\n```\n\nIf you want to join this data back to your `DataFrame`, you can use `pd.concat`:\n\n```py\ntimes = pd.DataFrame(get_times(df['date'], df['lon'], df['lat']))\npd.concat([df, times], axis=1)\n```\n\n### API\n\n#### `get_position`\n\nCalculate sun position (azimuth and altitude) for a given date and\nlatitude/longitude\n\n- `date` (`datetime` or a pandas series of datetimes): date and time to find sun position of. **Datetime must be in UTC**.\n- `lng` (`float` or numpy array of `float`): longitude to find sun position of\n- `lat` (`float` or numpy array of `float`): latitude to find sun position of\n\nReturns a `dict` with two keys: `azimuth` and `altitude`. If the input values\nwere singletons, the `dict`'s values will be floats. Otherwise they'll be numpy\narrays of floats.\n\n#### `get_times`\n\n- `date` (`datetime` or a pandas series of datetimes): date and time to find sunlight phases of. **Datetime must be in UTC**.\n- `lng` (`float` or numpy array of `float`): longitude to find sunlight phases of\n- `lat` (`float` or numpy array of `float`): latitude to find sunlight phases of\n- `height` (`float` or numpy array of `float`, default `0`): observer height in meters\n- `times` (`Iterable[Tuple[float, str, str]]`): an iterable defining the angle above the horizon and strings for custom sunlight phases. The default is:\n\n    ```py\n    # (angle, morning name, evening name)\n    DEFAULT_TIMES = [\n        (-0.833, 'sunrise', 'sunset'),\n        (-0.3, 'sunrise_end', 'sunset_start'),\n        (-6, 'dawn', 'dusk'),\n        (-12, 'nautical_dawn', 'nautical_dusk'),\n        (-18, 'night_end', 'night'),\n        (6, 'golden_hour_end', 'golden_hour')\n    ]\n    ```\n\nReturns a `dict` where the keys are `solar_noon`, `nadir`, plus any keys passed\nin the `times` argument. If the input values were singletons, the `dict`'s\nvalues will be of type `datetime.datetime` (or `pd.Timestamp` if you have pandas\ninstalled, which is a subclass of and therefore compatible with\n`datetime.datetime`). Otherwise they'll be pandas `DateTime` series. **The\nreturned times will be in UTC.**\n\n## Benchmark\n\nThis benchmark is to show that the vectorized implementation is nearly 100x\nfaster than a for loop in Python.\n\nFirst set up a `DataFrame` with random data. Here I create 100,000 rows.\n\n```py\nfrom suncalc import get_position, get_times\nimport pandas as pd\n\ndef random_dates(start, end, n=10):\n    \"\"\"Create an array of random dates\"\"\"\n    start_u = start.value//10**9\n    end_u = end.value//10**9\n    return pd.to_datetime(np.random.randint(start_u, end_u, n), unit='s')\n\nstart = pd.to_datetime('2015-01-01')\nend = pd.to_datetime('2018-01-01')\ndates = random_dates(start, end, n=100_000)\n\nlons = np.random.uniform(low=-179, high=179, size=(100_000,))\nlats = np.random.uniform(low=-89, high=89, size=(100_000,))\n\ndf = pd.DataFrame({'date': dates, 'lat': lats, 'lon': lons})\n```\n\nThen compute `SunCalc.get_position` two ways: the first using the vectorized\nimplementation and the second using `df.apply`, which is equivalent to a for\nloop. The first is more than **100x faster** than the second.\n\n```py\n%timeit get_position(df['date'], df['lon'], df['lat'])\n# 41.4 ms ± 437 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n%timeit df.apply(lambda row: get_position(row['date'], row['lon'], row['lat']), axis=1)\n# 4.89 s ± 184 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\nLikewise, compute `SunCalc.get_times` the same two ways: first using the\nvectorized implementation and the second using `df.apply`. The first is **2800x\nfaster** than the second! Some of the difference here is that under the hood the\nnon-vectorized approach uses `pd.to_datetime` while the vectorized\nimplementation uses `np.astype('datetime64[ns, UTC]')`. `pd.to_datetime` is\nreally slow!!\n\n```py\n%timeit get_times(df['date'], df['lon'], df['lat'])\n# 55.3 ms ± 1.91 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n%time df.apply(lambda row: get_times(row['date'], row['lon'], row['lat']), axis=1)\n# CPU times: user 2min 33s, sys: 288 ms, total: 2min 34s\n# Wall time: 2min 34s\n```\n\n---\n\n1: [`pyorbital`](https://github.com/pytroll/pyorbital) looks great but is\nGPL3-licensed; [`pysolar`](https://github.com/pingswept/pysolar) is also\nGPL3-licensed; [`pyEphem`](https://rhodesmill.org/pyephem/) is LGPL3-licensed.\n[`suncalcPy`](https://github.com/Broham/suncalcPy) is another port of\n`suncalc.js`, and is MIT-licensed, but doesn't use Numpy and thus isn't\nvectorized. I recently discovered [`sunpy`](https://github.com/sunpy/sunpy) and\n[`astropy`](https://github.com/astropy/astropy), both of which probably would've\nworked but I didn't see them at first and they look quite complex for this\nsimple task...\n\n\n# Changelog\n\n## [0.1.2] - 2020-12-02\n\n- Try to catch NaN before passing to `datetime.utcfromtimestamp`\n\n## [0.1.1] - 2020-11-20\n\n- Fix PyPI install by adding `MANIFEST.in`\n- Update documentation\n\n## [0.1.0] - 2020-11-19\n\n- Initial release on PyPI",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kylebarron/suncalc-py",
    "keywords": "suncalc,sun",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "suncalc",
    "package_url": "https://pypi.org/project/suncalc/",
    "platform": "",
    "project_url": "https://pypi.org/project/suncalc/",
    "project_urls": {
      "Homepage": "https://github.com/kylebarron/suncalc-py"
    },
    "release_url": "https://pypi.org/project/suncalc/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A fast, vectorized Python port of suncalc.js",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8805425,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23a5eccfe51a0562eb2d78d8cfca74d975fb184b0f9c9bda92805f8a59bca9ce",
          "md5": "34969f39fb9eebe474ee15451f542fb2",
          "sha256": "33bb9f1b9d265c6c8f0b731be588b0ddcae825a7f50b98a80b11a74da7f8aac5"
        },
        "downloads": -1,
        "filename": "suncalc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34969f39fb9eebe474ee15451f542fb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9688,
        "upload_time": "2020-11-20T06:35:39",
        "upload_time_iso_8601": "2020-11-20T06:35:39.434440Z",
        "url": "https://files.pythonhosted.org/packages/23/a5/eccfe51a0562eb2d78d8cfca74d975fb184b0f9c9bda92805f8a59bca9ce/suncalc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ba524c6ea873401d231dc6d3c4a900bb6c3f3239c46acf49f3a602fa8665b49",
          "md5": "0a33cce02d10bae4ac55502fb7d62139",
          "sha256": "4147b5d0fa76ba3edaa4707c512d082b0d97772f781ccccb11fb1b710fc71a4e"
        },
        "downloads": -1,
        "filename": "suncalc-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a33cce02d10bae4ac55502fb7d62139",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10680,
        "upload_time": "2020-11-20T16:03:30",
        "upload_time_iso_8601": "2020-11-20T16:03:30.899692Z",
        "url": "https://files.pythonhosted.org/packages/8b/a5/24c6ea873401d231dc6d3c4a900bb6c3f3239c46acf49f3a602fa8665b49/suncalc-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90fac7b89e9ab6035733cd849e26f369c8804936b099026e68f2d0772eae7265",
          "md5": "97f423e414bb7ac57b3b41a90e5b5270",
          "sha256": "f077ff389b37874abad1e95a76fadaf1059349b20918e7e9f033bcbd668f9d11"
        },
        "downloads": -1,
        "filename": "suncalc-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "97f423e414bb7ac57b3b41a90e5b5270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10958,
        "upload_time": "2020-12-02T23:00:04",
        "upload_time_iso_8601": "2020-12-02T23:00:04.430781Z",
        "url": "https://files.pythonhosted.org/packages/90/fa/c7b89e9ab6035733cd849e26f369c8804936b099026e68f2d0772eae7265/suncalc-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90fac7b89e9ab6035733cd849e26f369c8804936b099026e68f2d0772eae7265",
        "md5": "97f423e414bb7ac57b3b41a90e5b5270",
        "sha256": "f077ff389b37874abad1e95a76fadaf1059349b20918e7e9f033bcbd668f9d11"
      },
      "downloads": -1,
      "filename": "suncalc-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "97f423e414bb7ac57b3b41a90e5b5270",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10958,
      "upload_time": "2020-12-02T23:00:04",
      "upload_time_iso_8601": "2020-12-02T23:00:04.430781Z",
      "url": "https://files.pythonhosted.org/packages/90/fa/c7b89e9ab6035733cd849e26f369c8804936b099026e68f2d0772eae7265/suncalc-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}