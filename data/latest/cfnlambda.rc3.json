{
  "info": {
    "author": "Gene Wood",
    "author_email": "gene_wood@cementhorizon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "cfnlambda\n=========\n\ncfnlambda is a collection of AWS Lambda tools to enable use of AWS Lambda \nfunctions with CloudFormation. At it's core it is the `cfn_response` function \nand the `handler_decorator` decorator. These enable an AWS Lambda function, \nlaunched from a CloudFormation stack, to log to CloudWatch, return data to the\nCloudFormation stack and gracefully deal with exceptions.\n\nQuickstart\n----------\nThe easiest way to use cfnlambda is to use the `handler_decorator` decorator on\nyour AWS Lambda function.\n\n::\n\n    from cfnlambda import handler_decorator\n\n    @handler_decorator()\n    def lambda_handler(event, context):\n        result = (float(event['ResourceProperties']['key1']) + \n                  float(event['ResourceProperties']['key2']))\n        return {'sum': result}\n\nhandler_decorator\n-----------------\n\nWhen you decorate your AWS Lambda function with the `handler_decorator` a few\nthings happen. Your AWS Lambda function can now emit output back to the\nCloudFormation stack that launched it simply by `returning`_ a dictionary of\nkey/value pairs, all of which become available to the CloudFormation stack as\nattributes of the custom resource in the stack. These values can then be\naccessed with the `Fn::GetAtt` CloudFormation function.\n\n::\n\n    { \"Fn::GetAtt\": [ \"MyCustomResource\", \"a_key_returned_by_my_lambda_function\" ] }\n\nAny non-dictionary returned will be put into an custom resource attribute\ncalled `result`. Any exceptions raised by your AWS Lambda function will be\ncaught by `handler_decorator`, logged to the CloudWatch logs and returned to\nyour CloudFormation stack in the `result` attribute.\n\n::\n\n    { \"Fn::GetAtt\": [ \"MyCustomResource\", \"result\" ] }\n\nUnless the `delete_logs` argument is set to False in `handler_decorator`, all\nCloudWatch logs generated while the stack was created, updated and deleted will\nbe deleted upon a successful stack deletion. If an exception is thrown during\nstack deletion, the logs will always be retained to facilitate troubleshooting.\nTo force retention of logs after a stack is deleted, set `delete_logs` to False.\n\n::\n\n    from cfnlambda import handler_decorator\n    logging.getLogger().setLevel(logging.DEBUG)\n\n    @handler_decorator(delete_logs=False)\n    def lambda_handler(event, context):\n        mirror_text = event['ResourceProperties']['key1'][::-1]\n        return {'MirrorText': mirror_text}\n\n\nFinally, AWS Lambda functions decorated with `handler_decorator` will not\nreport a status of FAILED when a stack DELETE is attempted. This will prevent\na CloudFormation stack from getting stuck in a DELETE_FAILED state. One side\neffect of this is that if your AWS Lambda function throws an exception while\ntrying to process a stack deletion, though the stack will show a status of\nDELETE_COMPLETE, there could still be resources which your AWS Lambda function\ncreated which have not been deleted. To disable this feature, pass\n`hide_stack_delete_failure=False` as an argument to `handler_decorator`. \n\n::\n\n    from cfnlambda import handler_decorator\n\n    @handler_decorator(hide_stack_delete_failure=False)\n    def lambda_handler(event, context):\n        raise Exception(\n            'This will result in a CloudFormation stack stuck in a\n            DELETE_FAILED state')\n\nhandler_decorator usage walkthrough\n###################################\n\nHere is an example showing the creation of a very simple AWS Lambda function\nwhich sums two values passed in from the CloudFormation stack ('key1' and \n'key2) and returns the result back to the stack as 'sum'.\n\nExample assumptions:\n\n* You have a pre-existing s3 bucket called `example-bucket-us-west-2` in the\n  `us-west-2` region which is either public or readable by the user launching\n  the CloudFormation stack.\n* You have some way to upload a file into that s3 bucket. In the example we're\n  using the `AWS CLI`_ tool. Here's how to `install and configure AWS CLI`_.\n\nFirst, this Lambda code must be zipped and uploaded to an s3 bucket.\n\n::\n\n    from cfnlambda import handler_decorator\n    import logging\n    logging.getLogger().setLevel(logging.INFO)\n\n    @handler_decorator()\n    def lambda_handler(event, context):\n        result = (float(event['ResourceProperties']['key1']) + \n                  float(event['ResourceProperties']['key2']))\n        return {'sum': result}\n\nHere are a set of commands to create and upload the AWS Lambda function\n\n::\n\n    dir=/path/to/PythonExampleDir\n    mkdir $dir\n\n    # Create your AWS Lambda function\n    cat > $dir/example_lambda_module.py <<End-of-message\n    from cfnlambda import handler_decorator\n    import logging\n    logging.getLogger().setLevel(logging.INFO)\n\n    @handler_decorator()\n    def lambda_handler(event, context):\n        result = (float(event['ResourceProperties']['key1']) + \n                  float(event['ResourceProperties']['key2']))\n        return {'sum': result}\n    End-of-message\n\n    pip install cfnlambda --no-deps -t $dir\n    zip --junk-paths $dir/example_lambda_package.zip $dir/*\n    aws --region us-west-2 s3 cp $dir/example_lambda_package.zip s3://example-bucket-us-west-2/\n\nNext, the CloudFormation template must be written. Here is an simple example\nCloudFormation stack that uses the Lambda function above. To use this example,\nsave this template to a file called `example_cloudformation_template.json`\n\n::\n\n    {\n      \"Resources\" : {\n        \"SumInfo\": {\n          \"Type\": \"Custom::SumInfo\",\n          \"Properties\": {\n            \"ServiceToken\": { \"Fn::GetAtt\" : [\"ExecuteSum\", \"Arn\"] },\n            \"key1\": \"1.2\",\n            \"key2\": \"5.9\"\n          }\n        },\n        \"ExecuteSum\": {\n          \"Type\": \"AWS::Lambda::Function\",\n          \"Properties\": {\n            \"Handler\": \"example_lambda_module.lambda_handler\",\n            \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\n            \"Code\": {\n              \"S3Bucket\": \"example-bucket-us-west-2\",\n              \"S3Key\": \"example_lambda_package.zip\"\n            },        \n            \"Runtime\": \"python2.7\"\n          }\n        },\n        \"LambdaExecutionRole\": {\n          \"Type\": \"AWS::IAM::Role\",\n          \"Properties\": {\n            \"AssumeRolePolicyDocument\": {\n              \"Version\": \"2012-10-17\",\n              \"Statement\": [{\n                  \"Effect\": \"Allow\",\n                  \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]},\n                  \"Action\": [\"sts:AssumeRole\"]\n              }]\n            },\n            \"Policies\": [{\n              \"PolicyName\": \"root\",\n              \"PolicyDocument\": {\n                \"Version\": \"2012-10-17\",\n                \"Statement\": [\n                  {\n                    \"Effect\": \"Allow\",\n                    \"Action\": [\"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:PutLogEvents\"],\n                    \"Resource\": \"arn:aws:logs:*:*:*\"\n                  },\n                  {\n                    \"Effect\": \"Allow\",\n                    \"Action\": [\"logs:DeleteLogGroup\"],\n                    \"Resource\": {\"Fn::Join\":[\"\", [\"arn:aws:logs:\", {\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"}, \":log-group:/aws/lambda/*\"]]}\n                  }\n                ]\n              }\n            }]\n          }\n        }\n      },\n      \"Outputs\" : {\n        \"Sum\" : {\n          \"Description\" : \"The sum of the two values\",\n          \"Value\" : { \"Fn::GetAtt\": [ \"SumInfo\", \"sum\" ] }\n        }\n      }\n    }\n\nNext, the CloudFormation template must be uploaded to execute the AWS\nLambda function.\n\n::\n\n    aws --region us-west-2 cloudformation create-stack --capabilities CAPABILITY_IAM --stack-name ExampleCloudFormationStack --template-body file:///home/user/example_cloudformation_template.json\n\nFinally, you can see that the CloudFormation stack was created and the Lambda\nfunction executed by looking at the CloudWatch logs that it created or at the\nCloudFormation stack output. You should see in the stack output the \"sum\" of\nthe \"key1\" and \"key2\"\n\n::\n\n    aws --region us-west-2 cloudformation describe-stacks --stack-name ExampleCloudFormationStack\n\ncfn_response\n------------\n\n`cfn_response` is a Python function designed as a drop in replacement for the\nNode.js `cfn-response`_ function provided by AWS. It accepts the same arguments\nand does the same thing.\n\n`cfn_response` allows your AWS Lambda function to communicate out to the\nCloudFormation stack that launched it. This communication is done through an\nAWS signed URL. Here's an example of `cfn_response` in use\n\n::\n\n    from cfnlambda import cfn_response, Status, RequestType\n\n    def lambda_handler(event, context):\n        client = boto3.client('ec2')\n        if event['RequestType'] == RequestType.DELETE:\n            client.delete_key_pair(KeyName='example-cfnlambda-keypair')\n            result = {'result': 'Key deleted'}\n        else:\n            keypair = client.create_key_pair(KeyName='example-cfnlambda-keypair')\n            result = {'result': 'Key created',\n                      'KeyMaterial': keypair['KeyMaterial']}\n        cfn_response(event,\n                     context,\n                     Status.SUCCESS,\n                     result)\n\nThis example would send the KeyMaterial (SSH private key) back to the\nCloudFormation stack where it could be accessed like this\n\n::\n\n    { \"Fn::GetAtt\": [ \"MyCustomResource\", \"KeyMaterial\" ] }\n\nHow to contribute\n-----------------\nFeel free to open issues or fork and submit PRs.\n\n* Issue Tracker: https://github.com/gene1wood/cfnlambda/issues\n* Source Code: https://github.com/gene1wood/cfnlambda\n\nVerifying the PyPI package\n--------------------------\nVerifying a PyPI package is a bit complicated, but doable. Verification can be\ndone through a chain of connected elements\n\n1. The `cfnlambda` package file found in the `downloads section on PyPI`_\n2. The `cfnlambda` pgp signature also found in the `downloads section on PyPI`_\n3. The Key ID of the person who created the signature\n4. A collection of accounts (github, twitter, etc) associated with the Key ID\n   that illustrate that the person who signed the package is the author of the \n   package.\n\nYou can find the package files and signatures for `cfnlambda` in the\n`downloads section on PyPI`_. Download the package file you want to verify and\nthe signature at the `pgp` link next to the package file.\n\nVerify that the signature is a good signature by running\n\n::\n\n    gpg --keyid-format long --verify cfnlambda-1.0.0.tar.gz.asc\n\nYou should get a result like this\n\n::\n\n    gpg: Signature made Fri 22 May 2015 01:50:14 PM PDT\n    gpg:                using DSA key 0123456789ABCDEF\n    gpg: Can't check signature: public key not found\n\nNow you know that the signature and the tar.gz match. Next you'll need to\nverify that the person who created the signature is who you would expect. To do\nthis look at the `key ID` at the end of the second line (`0123456789ABCDEF` in \nthis example). That is the ID of the signatory and should be the ID of the gpg \nkey of the author of `cfnlambda`. Go to `keybase`_ and type the `key ID` into\nthe search bar. You should get back a single user's profile which lists out a\ncollection of accounts that the user has proved control of. A strong indicator\nthat the person is the author is if you can find `cfnlambda` in their github\naccount.\n\nFAQ\n---\n\nQ: What causes the error `inner_decorator() takes exactly 1 argument (2 given): TypeError Traceback\n(most recent call last): File \"/var/runtime/awslambda/bootstrap.py\", line\n177, in handle_event_request result = request_handler(json_input, context)\nTypeError: inner_decorator() takes exactly 1 argument (2 given)`\n\nA: You likely used `@handler_decorator` to decorate your function instead of\n`@handler_decorator()`. Because `handler_decorator` accepts arguments, you need\nto use it with parenthesis. \n\n.. _AWS CLI: http://docs.aws.amazon.com/cli/latest/reference/s3/index.html\n.. _install and configure AWS CLI: http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html\n.. _returning: https://docs.python.org/2/reference/simple_stmts.html#return\n.. _cfn-response: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n.. _downloads section on PyPI: https://pypi.python.org/pypi/cfnlambda#downloads\n.. _keybase: https://keybase.io/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gene1wood/cfnlambda",
    "keywords": "aws lambda cloudformation",
    "license": "MPL-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cfnlambda",
    "package_url": "https://pypi.org/project/cfnlambda/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cfnlambda/",
    "project_urls": {
      "Homepage": "https://github.com/gene1wood/cfnlambda"
    },
    "release_url": "https://pypi.org/project/cfnlambda/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Collection of tools to enable use of AWS Lambda with CloudFormation.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1918261,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a517f218aa55e95f2810f2adb991828b2e3fa4e64be376df420c0861bc97ed60",
          "md5": "83e5cf40000b206adf7a0b3fb1d8be5e",
          "sha256": "fee5591b730d64b6527e827f3f55ba04a00164956998a01e8d740caf5be94e2b"
        },
        "downloads": -1,
        "filename": "cfnlambda-1.0.0-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "83e5cf40000b206adf7a0b3fb1d8be5e",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 13342,
        "upload_time": "2015-10-30T18:11:06",
        "upload_time_iso_8601": "2015-10-30T18:11:06.787705Z",
        "url": "https://files.pythonhosted.org/packages/a5/17/f218aa55e95f2810f2adb991828b2e3fa4e64be376df420c0861bc97ed60/cfnlambda-1.0.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b737a72e77336db224f09379750940c53438dc0b57f8ba89795191d38ce8eb6",
          "md5": "308e8cc7417f6e6785139ddccfff2d98",
          "sha256": "1151bdee2eb8cde5cc11e586ee1c26df5c8a4f10093e4a89cf45ca8e80516bc3"
        },
        "downloads": -1,
        "filename": "cfnlambda-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "308e8cc7417f6e6785139ddccfff2d98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9070,
        "upload_time": "2015-10-30T18:11:11",
        "upload_time_iso_8601": "2015-10-30T18:11:11.556295Z",
        "url": "https://files.pythonhosted.org/packages/9b/73/7a72e77336db224f09379750940c53438dc0b57f8ba89795191d38ce8eb6/cfnlambda-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8dd507debc6f6590266985d1a9ed59e30544cd59b561d858a6deb5bcfb404e9",
          "md5": "d42ad2a07aa8f6f9006928805cde84de",
          "sha256": "a11ff9d04f9ef2fa510e23f975cbfb0f6476222cb8074b13948542baad0ab522"
        },
        "downloads": -1,
        "filename": "cfnlambda-1.0.1-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "d42ad2a07aa8f6f9006928805cde84de",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 13454,
        "upload_time": "2015-12-02T00:43:35",
        "upload_time_iso_8601": "2015-12-02T00:43:35.664372Z",
        "url": "https://files.pythonhosted.org/packages/d8/dd/507debc6f6590266985d1a9ed59e30544cd59b561d858a6deb5bcfb404e9/cfnlambda-1.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7bf1bf74f7df0a0a6552b1ed4c5c2bbf42ee8a2a94bd15754783004de353c16",
          "md5": "04bb36d0b9a392ededb8af246f971021",
          "sha256": "6c60028bf2fb74644a5490f734644dba59a88af65a848342010be1f7db035091"
        },
        "downloads": -1,
        "filename": "cfnlambda-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "04bb36d0b9a392ededb8af246f971021",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9165,
        "upload_time": "2015-12-02T00:43:40",
        "upload_time_iso_8601": "2015-12-02T00:43:40.341977Z",
        "url": "https://files.pythonhosted.org/packages/a7/bf/1bf74f7df0a0a6552b1ed4c5c2bbf42ee8a2a94bd15754783004de353c16/cfnlambda-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57e040a4077ffccd01f8de9d8427b05348db1b83d3cad069415b8d794d63f4e3",
          "md5": "de55bf2ca3d60263238dc6b8e22b2c0a",
          "sha256": "b770ef4bb4c9c9c0440fa60a30fd1427fb760371c0b819910d0b2673f5a72e26"
        },
        "downloads": -1,
        "filename": "cfnlambda-1.0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "de55bf2ca3d60263238dc6b8e22b2c0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9210,
        "upload_time": "2016-01-22T23:20:39",
        "upload_time_iso_8601": "2016-01-22T23:20:39.864555Z",
        "url": "https://files.pythonhosted.org/packages/57/e0/40a4077ffccd01f8de9d8427b05348db1b83d3cad069415b8d794d63f4e3/cfnlambda-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57e040a4077ffccd01f8de9d8427b05348db1b83d3cad069415b8d794d63f4e3",
        "md5": "de55bf2ca3d60263238dc6b8e22b2c0a",
        "sha256": "b770ef4bb4c9c9c0440fa60a30fd1427fb760371c0b819910d0b2673f5a72e26"
      },
      "downloads": -1,
      "filename": "cfnlambda-1.0.2.tar.gz",
      "has_sig": true,
      "md5_digest": "de55bf2ca3d60263238dc6b8e22b2c0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9210,
      "upload_time": "2016-01-22T23:20:39",
      "upload_time_iso_8601": "2016-01-22T23:20:39.864555Z",
      "url": "https://files.pythonhosted.org/packages/57/e0/40a4077ffccd01f8de9d8427b05348db1b83d3cad069415b8d794d63f4e3/cfnlambda-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}