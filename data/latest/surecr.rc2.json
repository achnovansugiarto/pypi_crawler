{
  "info": {
    "author": "Parth Nobel",
    "author_email": "ptnobel@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# SURE-CR\n\nThis package enables tractable evaluation of Stein's Unbiased Risk Estimate on\nconvexly regularized estimators.\n\nFor an estimator of the mean of a normally-distributed random vector $y$ with known covariance matrix $\\sigma^2 I$ given by\n\n$$\n    \\hat\\mu(y) = \\mathcal A ~ \\text{argmin} \\frac{1}{2} \\lVert\\mathcal A b - y\\rVert_2^2 + r(b)\n$$\n\nwhere $r: \\mathbb R^p \\to \\mathbb R$  is a convex function and\n$\\mathcal A: \\mathbb R^p \\to \\mathbb R^d$ is a linear operator, this package\nprovides methods to compute Stein's Unbiased  Risk Estimate of $\\hat\\mu$:\n\n$$\n    SURE(\\hat\\mu, y) = -n \\sigma^2 + \\lVert\\hat\\mu(y) - y\\rVert_2^2 + 2 \\sigma^2 \\nabla \\cdot \\hat\\mu(y).\n$$\n\n$SURE(\\hat\\mu, y)$ is a good estimate of the $\\ell_2$ risk of $\\hat\\mu$, especially\nfor high dimensional problems.\n\n## Installation\n\nSURE-CR can be installed with pip and conda. By default, the conda instillation does not support using the `CVXPYSolver`, and the `cvxpylayers` library will have to be installed seperately to use it.\n\nTo install with pip:\n\n```bash\n$ pip install surecr\n```\n\nTo install with conda:\n\n```bash\n$ conda install -c stanfordcvxgrp -c conda-forge sure-cr\n```\n\n## Examples\n\nThe easiest way to start using SURE-CR may be to read the examples:\n\n * [LASSO with `FISTASolver`](https://github.com/cvxgrp/SURE-CR/blob/main/examples/lasso/lasso.py)\n    - Shows how to define proximal operator.\n * [LASSO with `CVXPYSolver`](https://github.com/cvxgrp/SURE-CR/blob/main/examples/lasso/lasso_cvxpy.py)\n * [Matrix completion with `ADMMSolver`](https://github.com/cvxgrp/SURE-CR/blob/main/examples/mat_compl/mat_compl.py)\n    - Includes defining custom linear operator.\n * [Robust PCA with `ADMMSolver`](https://github.com/cvxgrp/SURE-CR/blob/main/examples/rpca/rpca.py)\n    - Example of separable regularizers.\n\n\n## Usage\n\nThere are three key things in this package:\n\n * The `SURE` class\n * The `Solver` class and its subclasses `CVXPYSolver`, `FISTASolver`, and `ADMMSolver`\n * The `prox_lib` helper library\n\n### The `SURE` Class\n\nThe `SURE` class has the following API:\n```python\nclass SURE:\n    def __init__(self, variance: float, solver: Solver): ...\n\n    def compute(self, y: torch.Tensor, divergence_parameters={}) -> float:\n        \"\"\"\n        Computes and returns SURE for the estimator computed by the solver\n        at the point y.\n\n        Currently, divergence_parameters can contain the key \"m\" to indicate\n        how many samples to use during the divergence estimation (which\n        dominates the runtime at high dimensions). The default is for m to be\n        102.\n\n        In the future we may switch to A-Hutch++ and may change what options\n        the divergence_parameters specifies.\n        \"\"\"\n\n    @property\n    def solution(self) -> torch.Tensor:\n        \"\"\"\n        Returns solver.solve(y) from the last compute call.\n        \"\"\"\n\n    def runtimes(self) -> TypedDict('Runtimes', solver=float, divergence=float):\n        \"\"\"\n        Returns how long it took for the solver to run and how long it took\n        the divergence estimator to run during the last compute call.\n        \"\"\"\n```\n\n\n### The `Solver` class\n\nMost uses of the library should use one of the existing `Solver` subclasses.\nThey have the following APIs:\n\nThe three notable `Solver` instances provided by this library have the following\nconstructors:\n```python\nclass FISTASolver(Solver):\n    def __init__(self, A: linops.LinearOperator,\n                       prox_R: Callable[[torch.Tensor, float | torch.Tensor], torch.Tensor],\n                       x0: torch.Tensor,\n                       device=None,\n                       lipschitz_iterations=20,\n                       lipschitz_vec=None,\n                       *, max_iters=5000, eps=1e-3):\n        \"\"\"\n        This solver solves problems of the form with a variant on FISTA:\n              min. 1/2 ||A b - y||_2^2 + r(b)\n        and estimates the mean of y with A b^* where b^* is the optimal b.\n\n        A is a linear operator defined using <https://github.com/cvxgrp/torch_linops>\n\n        prox_R is a differentiable-with-respect-to-its-first-argument function to\n            find the optimal point b for a (v, t) pair of\n              min. t r(b) + 1/2 ||b - v||_2^2\n\n        x0 is the point where we begin iterations, it must be chosen\n            indepentently of y.\n\n        lipschitz_iterations is how many iterations of the power method to use\n        to approximate the largest eigenvalue of A^T A\n\n        lipschitz_vec is the vector to start the power method. By default, a\n        vector of all 1s is used. If this vector is orthogonal to the largest\n        eigenvector of A^T A, this argument is mandatory.\n\n        max_iters, eps control when iterations stop.\n\n        \"\"\"\n\nclass ADMMSolver(Solver):\n    def __init__(self, A: linops.LinearOperator,\n                       prox_R: Callable[[torch.Tensor, float | torch.Tensor], torch.Tensor],\n                       x0: torch.Tensor,\n                       device=None,\n                       *, max_iters=1000, eps_rel=1e-3, eps_abs=1e-6):\n        \"\"\"\n        This solver solves problems of the form with a variant on ADMM:\n              min. 1/2 ||A b - y||_2^2 + r(b)\n        and estimates the mean of y with A b^* where b^* is the optimal b.\n\n        A is a linear operator defined using <https://github.com/cvxgrp/torch_linops>\n\n        prox_R is a differentiable-with-respect-to-its-first-argument function to\n            find the optimal point b for a (v, t) pair of\n              min. t r(b) + 1/2 ||b - v||_2^2\n\n        x0 is the point where we begin iterations, it must be chosen\n            indepentently of y.\n\n        max_iters, eps_rel, eps_abs control when iterations stop.\n        \"\"\"\n\nclass CVXPYSolver(Solver):\n    def __init__(self, problem: cp.Problem,\n                       y_parameter: cp.Parameter, \n                       variables: list[cp.Variable], \n                       estimate: Callable[[list[torch.Tensor]], torch.Tensor]):\n        \"\"\"\n        problem must be a CVXPY problem with a single paremeter, y_parameter,\n            and variables y_variable.\n\n        estimate must be function which takes tensors with values for each variable\n            and returns the estimate.\n\n        WARNING: This solver has poor performance on large problems, and can\n        have undetected poor accuracy on some moderately-sized problems.\n        \"\"\"\n```\n\nIf you wish to implement, `Solver`, it has has the following API, where `T` is\nany type of the implementation's choice:\n```python\nclass Solver:\n\n    def solve(self, y: torch.Tensor) -> T:\n        \"\"\"\n        Returns intermediate value used to estimate the mean of the distribution\n        y is sampled from.\n        \"\"\"\n\n    def estimate(self, beta: T) -> torch.Tensor: ...\n        \"\"\"\n        Given the output of a solve call, returns the estimate of the mean of the\n        distribution y was sampled from.\n        \"\"\"\n```\n\nNote that for a given instance `s` of a solver class, `s.estimate(s.solve(y))` must\nbe differentiable via torch's backpropagation.\n\n\n### The `prox_lib` library\nSince `FISTASolver` and `ADMMSolver` both require a proximal operator for the\nregularizer we provide some methods here to help construct proximal operators:\n\nThere are also many helper methods in `surecr.prox_lib`.\n\n * `prox_l1_norm(v, t)`: the $\\ell_1$ norm's proximal operator.\n * `prox_l2_norm(v, t)`: the $\\ell_2$ norm's proximal operator.\n * `make_scaled_prox_nuc_norm(shape: tuple[int, int], t_scale: float)`: generates the proximal operator\n    $\\text{prox}_{r}: \\mathbb R^{\\mathtt{shape}} \\to \\mathbb R^{\\mathtt{shape}}$\n    of \n    $b \\mapsto \\mathtt{t_scale} \\sum_i \\sigma_i(b)$\n * `combine_proxs(shape: list[int], proxs: list)`: if there are two regularizers\n    $r_1$, $r_2$ such that the regularizer for the problem is given by\n    $r(b, b') = r_1(b) + r_2(b')$, then this function should be called with\n    `([dim(b), dim(b')], [prox_r_1, prox_r_2])`.\n * `scale_prox(prox, t_scale)`: takes a proximal operator of $r$, and returns the\n    proximal operator of $\\mathtt{t_scale} r$.\n\n\n# Citing\nIf you use this code in a research project, please cite the associated paper. \n```\n@article{nobel2022tractable,\n    title={Tractable evalutaion of {S}tein's {U}nbiased {R}isk {E}stimate with convex regularizers},\n    author={Parth Nobel \\and Emmanuel Cand\\`es \\and Stephen Boyd},\n    publisher = {arXiv},\n    year = {2022},\n    note = {arXiv:2211.05947 [math.ST]},\n    url = {https://arxiv.org/abs/2211.05947},\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cvxgrp/SURE-CR",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "surecr",
    "package_url": "https://pypi.org/project/surecr/",
    "platform": null,
    "project_url": "https://pypi.org/project/surecr/",
    "project_urls": {
      "Homepage": "https://github.com/cvxgrp/SURE-CR"
    },
    "release_url": "https://pypi.org/project/surecr/0.1.2/",
    "requires_dist": [
      "cvxpy",
      "cvxpylayers",
      "numpy (>=1.17.5)",
      "scipy",
      "torch",
      "torch-linops"
    ],
    "requires_python": "",
    "summary": "This package enables tractable evaluation of Stein's Unbiased Risk Estimate on convexly regularized estimators.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15849455,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bab1ea6271db96a2a61645ddf00e86d712ae86a9d3e6e236581b27c5caff56f",
          "md5": "c9380f5c4aafb3466159d9b25082a57c",
          "sha256": "88213127df9a50916c50fe05c4f75398a864ba283af5db90f9662385983fffc7"
        },
        "downloads": -1,
        "filename": "surecr-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9380f5c4aafb3466159d9b25082a57c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14084,
        "upload_time": "2022-11-16T23:25:52",
        "upload_time_iso_8601": "2022-11-16T23:25:52.933564Z",
        "url": "https://files.pythonhosted.org/packages/6b/ab/1ea6271db96a2a61645ddf00e86d712ae86a9d3e6e236581b27c5caff56f/surecr-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0f7a2768feda924a1d48254a0353e75c13f98e0247ccac8e0575c8e96bb3e6b",
          "md5": "f7cf3313c8054e9299a32eb75fd1013b",
          "sha256": "54b01ca6e9396eacaccd743970f6fab68a7013f7bda5375b8c22d8def0f02be5"
        },
        "downloads": -1,
        "filename": "surecr-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f7cf3313c8054e9299a32eb75fd1013b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11050,
        "upload_time": "2022-11-16T23:25:55",
        "upload_time_iso_8601": "2022-11-16T23:25:55.096376Z",
        "url": "https://files.pythonhosted.org/packages/b0/f7/a2768feda924a1d48254a0353e75c13f98e0247ccac8e0575c8e96bb3e6b/surecr-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c2c082545dd14ddf87fba9d8ea6b73cc321719b99dd864ef9dd470f980150a7",
          "md5": "53dd40c35c3bb6593ae20fa5f501d357",
          "sha256": "c1c859e5eb2a75f9f805acdc004c2e751e88b28e40e86469f48606af80763245"
        },
        "downloads": -1,
        "filename": "surecr-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53dd40c35c3bb6593ae20fa5f501d357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16225,
        "upload_time": "2022-11-22T04:37:13",
        "upload_time_iso_8601": "2022-11-22T04:37:13.281571Z",
        "url": "https://files.pythonhosted.org/packages/5c/2c/082545dd14ddf87fba9d8ea6b73cc321719b99dd864ef9dd470f980150a7/surecr-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b913503cd7fef7d1344194d02b149125b6c4855e0673120f782e62024c50d0",
          "md5": "3c17b203b8741c5d5c0cd1519acd74fe",
          "sha256": "60551913bdc47dff598841eba4763cc1e5b6dfd945230ac86463bcf4cecbeaa2"
        },
        "downloads": -1,
        "filename": "surecr-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3c17b203b8741c5d5c0cd1519acd74fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13494,
        "upload_time": "2022-11-22T04:37:15",
        "upload_time_iso_8601": "2022-11-22T04:37:15.450668Z",
        "url": "https://files.pythonhosted.org/packages/d6/b9/13503cd7fef7d1344194d02b149125b6c4855e0673120f782e62024c50d0/surecr-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c2c082545dd14ddf87fba9d8ea6b73cc321719b99dd864ef9dd470f980150a7",
        "md5": "53dd40c35c3bb6593ae20fa5f501d357",
        "sha256": "c1c859e5eb2a75f9f805acdc004c2e751e88b28e40e86469f48606af80763245"
      },
      "downloads": -1,
      "filename": "surecr-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53dd40c35c3bb6593ae20fa5f501d357",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16225,
      "upload_time": "2022-11-22T04:37:13",
      "upload_time_iso_8601": "2022-11-22T04:37:13.281571Z",
      "url": "https://files.pythonhosted.org/packages/5c/2c/082545dd14ddf87fba9d8ea6b73cc321719b99dd864ef9dd470f980150a7/surecr-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6b913503cd7fef7d1344194d02b149125b6c4855e0673120f782e62024c50d0",
        "md5": "3c17b203b8741c5d5c0cd1519acd74fe",
        "sha256": "60551913bdc47dff598841eba4763cc1e5b6dfd945230ac86463bcf4cecbeaa2"
      },
      "downloads": -1,
      "filename": "surecr-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3c17b203b8741c5d5c0cd1519acd74fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13494,
      "upload_time": "2022-11-22T04:37:15",
      "upload_time_iso_8601": "2022-11-22T04:37:15.450668Z",
      "url": "https://files.pythonhosted.org/packages/d6/b9/13503cd7fef7d1344194d02b149125b6c4855e0673120f782e62024c50d0/surecr-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}