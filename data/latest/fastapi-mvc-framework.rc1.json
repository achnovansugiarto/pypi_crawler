{
  "info": {
    "author": "Bruce chou",
    "author_email": "smjkzsl@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# fastapi_framework\nA mvc framework used FastApi\nSimple and elegant use of FastApi in MVC mode\n\nusage:\n\n\n```\n\nfrom fastapi_mvc_framework import api_router,api,Request,Response,BaseController,application,WebSocket,WebSocketDisconnect\nimport requests,openai,json\n\nmodel_engine = \"text-davinci-003\"  # Or any other model\nopenai.api_key = 'sk-123456'\n\n\n@api_router()\nclass TestController(BaseController):\n\n    def __init__(self):\n        self.log.info(f\"__init__ on TestController\")\n\n    @api.get(\"/\" )\n    def home(self): \n        '''\n        :title 首页\n        '''\n        c = self.session['home'] or 1\n        c = c+1 \n        # #setting cookies   \n        # self.response.set_cookie('a',c) \n        self.cookies[\"a\"] = c\n        if c>10:\n            del self.cookies[\"a\"]\n            c = 0\n        self.session['home'] = c\n        text = \"Hello World! I'm in FastapiMvcFramework\"\n        routers_map = application.routers_map\n        routers = application.routes\n        return self.view()\n\n    @api.http(\"/gpt-proxy\",methods=['POST','GET'])\n    async def proxy(self):\n\n        prompt=\"\"\n        if 'prompt' in self.request.params :\n            prompt = self.request.params['prompt']\n        if not prompt:\n            return {\"msg\":\"empty\"}\n        return {\"msg\":prompt}\n        response = openai.Completion.create(\n            engine=model_engine,\n            prompt=prompt,\n            max_tokens=1024,\n            n=1,\n            stop=None,\n            temperature=0.5,\n        )\n\n        return (response).to_dict() \n\n    @api.post(\"/chatgptdemo\")\n    async def chatgpt_demo(self):\n\n        message = self.request.params\n        if message:\n            response = openai.Completion.create(\n                engine=model_engine,\n                prompt=message['s'],\n                max_tokens=1024,\n                n=1,\n                stop=None,\n                temperature=0.5,\n            )\n\n        return response['choices'][0].text.strip()      \n\n    @api.get(\"/chatgpt\")\n    def chatgpt(self):\n        \"\"\"\n        :title 聊天\n        \"\"\"\n        return self.view()\n\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/chat/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\nmanager = ConnectionManager()\n\n@application.websocket(\"/ws/chat/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket,client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n\n@api_router(path=\"/{controller}\")\nclass WSController(BaseController): \n    @api.get(\"/\" )\n    def ws_home(self):\n        \"\"\":title WebSocketDemo\"\"\"\n        return self.view(content = html)\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smjkzsl/fastapi_framework",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastapi-mvc-framework",
    "package_url": "https://pypi.org/project/fastapi-mvc-framework/",
    "platform": null,
    "project_url": "https://pypi.org/project/fastapi-mvc-framework/",
    "project_urls": {
      "Homepage": "https://github.com/smjkzsl/fastapi_framework"
    },
    "release_url": "https://pypi.org/project/fastapi-mvc-framework/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple and elegant use of FastApi in MVC mode",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17539772,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30997b723af073135f9d93e595b0f8617b2c4d1654cb501a789193b50aa355ce",
          "md5": "744d346ff4345a37be67b4e0e1eca9b2",
          "sha256": "760563dab8ee6f963bd3c425358481f5f556f10371b14b576045e412456df972"
        },
        "downloads": -1,
        "filename": "fastapi_mvc_framework-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "744d346ff4345a37be67b4e0e1eca9b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17843,
        "upload_time": "2023-04-01T12:59:09",
        "upload_time_iso_8601": "2023-04-01T12:59:09.816889Z",
        "url": "https://files.pythonhosted.org/packages/30/99/7b723af073135f9d93e595b0f8617b2c4d1654cb501a789193b50aa355ce/fastapi_mvc_framework-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5b60072d1355850152023613c5360543c9f113563e12c828ca3d07c29a1a2c7",
          "md5": "056a434e0adeed31bbd2b4a33c0184ae",
          "sha256": "197ad5e9d3470290812fd165908736b1bd59fbcfa1a30ac58d0034239145273d"
        },
        "downloads": -1,
        "filename": "fastapi_mvc_framework-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "056a434e0adeed31bbd2b4a33c0184ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17275,
        "upload_time": "2023-04-01T12:59:11",
        "upload_time_iso_8601": "2023-04-01T12:59:11.451921Z",
        "url": "https://files.pythonhosted.org/packages/f5/b6/0072d1355850152023613c5360543c9f113563e12c828ca3d07c29a1a2c7/fastapi_mvc_framework-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30997b723af073135f9d93e595b0f8617b2c4d1654cb501a789193b50aa355ce",
        "md5": "744d346ff4345a37be67b4e0e1eca9b2",
        "sha256": "760563dab8ee6f963bd3c425358481f5f556f10371b14b576045e412456df972"
      },
      "downloads": -1,
      "filename": "fastapi_mvc_framework-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "744d346ff4345a37be67b4e0e1eca9b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17843,
      "upload_time": "2023-04-01T12:59:09",
      "upload_time_iso_8601": "2023-04-01T12:59:09.816889Z",
      "url": "https://files.pythonhosted.org/packages/30/99/7b723af073135f9d93e595b0f8617b2c4d1654cb501a789193b50aa355ce/fastapi_mvc_framework-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5b60072d1355850152023613c5360543c9f113563e12c828ca3d07c29a1a2c7",
        "md5": "056a434e0adeed31bbd2b4a33c0184ae",
        "sha256": "197ad5e9d3470290812fd165908736b1bd59fbcfa1a30ac58d0034239145273d"
      },
      "downloads": -1,
      "filename": "fastapi_mvc_framework-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "056a434e0adeed31bbd2b4a33c0184ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17275,
      "upload_time": "2023-04-01T12:59:11",
      "upload_time_iso_8601": "2023-04-01T12:59:11.451921Z",
      "url": "https://files.pythonhosted.org/packages/f5/b6/0072d1355850152023613c5360543c9f113563e12c828ca3d07c29a1a2c7/fastapi_mvc_framework-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}