{
  "info": {
    "author": "Alchemy",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Alchemy SDK for Python\nAn Alchemy SDK to use the [Alchemy API](https://www.alchemy.com/).\n\nIt supports the exact same syntax and functionality of the Web3 `eth`, \nmaking it a 1:1 mapping for anyone using the Web3 `eth`. However, it adds a \nsignificant amount of improved functionality on top of Web3, such as easy \naccess to Alchemy’s Enhanced and NFT APIs, and quality-of-life improvements \nsuch as automated retries. \n\nThe SDK leverages Alchemy's hardened node infrastructure, \nguaranteeing best-in-class node reliability, scalability, and data correctness, \nand is undergoing active development by Alchemy's engineers.\n\n> 🙋‍♀️ **FEATURE REQUESTS:**\n>\n> We'd love your thoughts on what would improve your web3 dev process the most! If you have 5 minutes, tell us what you want on our [Feature Request feedback form](https://alchemyapi.typeform.com/sdk-feedback), and we'd love to build it for you.\n\nThe SDK currently supports the following chains:\n\n- **Ethereum**: Mainnet, Goerli\n- **Polygon**: Mainnet, Mumbai\n- **Optimism**: Mainnet, Goerli, Kovan\n- **Arbitrum**: Mainnet, Goerli, Rinkeby\n- **Astar**: Mainnet\n\n\n## Getting started\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install alchemy_sdk.\n\n```bash\npip3 install alchemy-sdk\n```\n\nAfter installing the app, you can then import and use the SDK:\n\n```python\nfrom alchemy import Alchemy, Network\n\n# create Alchemy object using your Alchemy api key, default is \"demo\"\napi_key = \"your_api_key\"\n\n# choose preferred network from Network, default is ETH_MAINNET\nnetwork = Network.ETH_MAINNET\n\n# choose the maximum number of retries to perform, default is 5\nmax_retries = 3\n\n# create Alchemy object\nalchemy = Alchemy(api_key, network, max_retries=max_retries)\n```\n\n> **ℹ️ Creating a unique Alchemy API Key**\n>\n> The public \"demo\" API key may be rate limited based on traffic. To create your own API key, **[sign up for an Alchemy account here](https://alchemy.com/?a=SDKquickstart)** and use the key created on your dashboard for the first app.\n\n## Using the Alchemy SDK\n\nThe Alchemy SDK currently supports 2 different namespaces, including:\n\n- `core`: All web3.eth methods and Alchemy Enhanced API methods\n- `nft`: All Alchemy NFT API methods\n\nIf you are already using web3.eth, you should be simply able to replace the web3.eth object with `alchemy.core` and it should work properly.\n\n> **ℹ️ ENS Name Resolution**\n>\n> The Alchemy SDK supports ENS names (e.g. `vitalik.eth`) for every parameter where you can pass in a Externally Owned Address, or user address (e.g. `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`).\n\n```python\nfrom alchemy import Alchemy\nalchemy = Alchemy()\n\n# Access standard Web3 request. Gets latest block hash\nblock_hash = Alchemy.to_hex(alchemy.core.get_block('latest')['hash'])\n\n# Access Alchemy Enhanced API requests. Gets all transaction receipts for a given block hash.\nalchemy.core.get_transaction_receipts(block_hash=block_hash)\n\n# Access the Alchemy NFT API. Gets contract metadata for NFT and gets collection name\ncontract = \"0x01234567bac6ff94d7e4f0ee23119cf848f93245\"\nprint(alchemy.nft.get_contract_metadata(contract).opensea.collection_name)\n```\n\nThe Alchemy class also supports static methods from Web3 object that streamline the development process:\n - Encoding, Decoding, Hashing: `to_bytes`, `to_int`, `to_hex`, `to_text`, `to_json`, `keccak`\n - Currency Utility: `to_wei`, `from_wei`\n - Address Utility: `is_address`, `is_checksum_address`, `to_checksum_address`\n\n\n## Alchemy Core\n\nThe core namespace contains all commonly-used Web3.eth methods.\n\nIt also includes the majority of Alchemy Enhanced APIs, including:\n\n- `get_token_metadata()`: Get the metadata for a token contract address.\n- `get_token_balances()`: Gets the token balances for an owner given a list of contracts.\n- `get_asset_transfers()`: Get transactions for specific addresses.\n- `get_transaction_receipts()`: Gets all transaction receipts for a given block.\n\n## Alchemy NFT API\n\nThe SDK currently supports the following [NFT API](https://docs.alchemy.com/alchemy/enhanced-apis/nft-api) endpoints\nunder the `alchemy.nft` namespace:\n\n- `get_nft_metadata()`: Get the NFT metadata for an NFT contract address and tokenId.\n- `get_nft_metada_batch()`: Get the NFT metadata for multiple NFT contract addresses/token id pairs.\n- `get_contract_metadata()`: Get the metadata associated with an NFT contract.\n- `get_contracts_for_owner()`: Get all NFT contracts that the provided owner address owns.\n- `get_nfts_for_owner()`: Get NFTs for an owner address.\n- `get_nfts_for_contract()`: Get all NFTs for a contract address.\n- `get_owners_for_nft()`: Get all the owners for a given NFT contract address and a particular token ID.\n- `get_owners_for_contract()`: Get all the owners for a given NFT contract address.\n- `get_minted_nfts()`: Get all the NFTs minted by the owner address.\n- `is_spam_contract()`: Check whether the given NFT contract address is a spam contract as defined by Alchemy (see the [NFT API FAQ](https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification))\n- `get_spam_contracts()`: Returns a list of all spam contracts marked by Alchemy.\n- `refresh_contract()`: Enqueues the specified contract address to have all token ids' metadata refreshed.\n- `get_floor_price()`: Return the floor prices of a NFT contract by marketplace.\n- `compute_rarity()`: Get the rarity of each attribute of an NFT.\n\n### Pagination\n\nThe Alchemy NFT endpoints return 100 results per page. To get the next page, you can pass in \nthe `pageKey` returned by the previous call.\n\n### SDK vs API Differences\n\nThe NFT API in the SDK standardizes response types to reduce developer friction, but note this results in some\ndifferences compared to the Alchemy REST endpoints:\n\n- Methods referencing `Collection` have been renamed to use the name `Contract` for greater accuracy: e.g. `get_nfts_for_contract`.\n- Some methods have different naming that the REST API counterparts in order to provide a consistent API interface (\n  e.g. `get_nfts_for_owner()` is `alchemy_getNfts`, `get_owners_for_nft()` is `alchemy_getOwnersForToken`).\n- SDK standardizes to `omit_metadata` parameter (vs. `withMetadata`).\n- Standardization to `page_key` parameter for pagination (vs. `nextToken`/`startToken`)\n- Empty `token_uri` fields are omitted.\n- Token ID is always normalized to an integer string on `BaseNft` and `Nft`.\n- Some fields omitted in the REST response are included in the SDK response in order to return an `Nft` object.\n- Some fields in the SDK's `Nft` object are named differently than the REST response.\n\n## Usage Examples\n\nBelow are a few usage examples.\n\n### Getting the NFTs owned by an address\n\n```python\nfrom alchemy import Alchemy\nfrom alchemy.nft import NftFilters\n\nalchemy = Alchemy()\n\n# Get how many NFTs an address owns.\nresponse = alchemy.nft.get_nfts_for_owner('vitalik.eth')\nprint(response['total_count'])\n\n# Get all the image urls for all the NFTs an address owns.\nfor nft in response['owned_nfts']:\n    print(nft.media)\n\n# Filter out spam NFTs.\nnfts_without_spam = alchemy.nft.get_nfts_for_owner('vitalik.eth', exclude_filters=[NftFilters.SPAM])\n```\n\n### Getting all the owners of the BAYC NFT\n\n```python\nfrom alchemy import Alchemy\n\nalchemy = Alchemy()\n\n# Bored Ape Yacht Club contract address.\nbayc_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n\n# Omit the NFT metadata for smaller payloads.\nresponse = alchemy.nft.get_nfts_for_contract(bayc_address, omit_metadata=True, page_size=5)\nfor nft in response['nfts']:\n    owners = alchemy.nft.get_owners_for_nft(\n        contract_address=nft.contract.address, token_id=nft.token_id\n    )\n    print(f\"owners: {owners}, tokenId: {nft.token_id}\")\n```\n\n### Get all outbound transfers for a provided address\n\n```python\nfrom alchemy import Alchemy\n\nalchemy = Alchemy()\nprint(alchemy.core.get_token_balances('vitalik.eth'))\n```\n\n\n## Questions and Feedback\n\nIf you have any questions, issues, or feedback, please file an issue\non [GitHub](https://github.com/alchemyplatform/alchemy-sdk-js/issues), or drop us a message on\nour [Discord](https://discord.com/channels/735965332958871634/983472322998575174) channel for the SDK.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alchemyplatform/alchemy-sdk-py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alchemy-sdk",
    "package_url": "https://pypi.org/project/alchemy-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/alchemy-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/alchemyplatform/alchemy-sdk-py"
    },
    "release_url": "https://pypi.org/project/alchemy-sdk/0.1.1/",
    "requires_dist": [
      "web3",
      "requests",
      "backoff",
      "typing-extensions"
    ],
    "requires_python": ">=3.7",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16763121,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b695f864ec5908bcdf98ed04fdd15ee35c5be96b30d81c7fdfd33ef10a56d95a",
          "md5": "1d3202ffbeb7603d15252e07c322c6d2",
          "sha256": "3f1061fead7586969e5f11401213b7c084c126c0a4e347c1699116bd95f794cb"
        },
        "downloads": -1,
        "filename": "alchemy_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d3202ffbeb7603d15252e07c322c6d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30131,
        "upload_time": "2023-02-09T05:29:52",
        "upload_time_iso_8601": "2023-02-09T05:29:52.362109Z",
        "url": "https://files.pythonhosted.org/packages/b6/95/f864ec5908bcdf98ed04fdd15ee35c5be96b30d81c7fdfd33ef10a56d95a/alchemy_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b3b86ac20f3450d7eaa70b4fee545d94832a459dab953a890d17025a69ffc4",
          "md5": "c3d158be4937f7ff483ff83ecf61dc1e",
          "sha256": "e10e7a18b93539fea384a1f0b0460e914914ebf2d5e65528034a8ae4142bb8af"
        },
        "downloads": -1,
        "filename": "alchemy-sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c3d158be4937f7ff483ff83ecf61dc1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30464,
        "upload_time": "2023-02-09T05:29:56",
        "upload_time_iso_8601": "2023-02-09T05:29:56.010887Z",
        "url": "https://files.pythonhosted.org/packages/b7/b3/b86ac20f3450d7eaa70b4fee545d94832a459dab953a890d17025a69ffc4/alchemy-sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b15d01f2aa4617e086c3af494ee295c11c1ecab4003615fa5a3563048f84ef62",
          "md5": "40655372a29d253e9971d35988371695",
          "sha256": "cf02044fed60de367b029fb0e9c1133ca6d94327116a85994cb3d1c89b08f17f"
        },
        "downloads": -1,
        "filename": "alchemy_sdk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40655372a29d253e9971d35988371695",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 36308,
        "upload_time": "2023-02-09T05:29:54",
        "upload_time_iso_8601": "2023-02-09T05:29:54.019796Z",
        "url": "https://files.pythonhosted.org/packages/b1/5d/01f2aa4617e086c3af494ee295c11c1ecab4003615fa5a3563048f84ef62/alchemy_sdk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e0fcb75293fc9dda66b651f6589f1c532ef2ff3a768099a9e41137d7642b75d",
          "md5": "cd01493c2d8dea5b043986b79fa92fbf",
          "sha256": "097c48b1cbe6b63ff0facfc2004eecf489fe7df257a670c8c73d8c7768a4e0ad"
        },
        "downloads": -1,
        "filename": "alchemy-sdk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd01493c2d8dea5b043986b79fa92fbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33771,
        "upload_time": "2023-02-09T05:29:58",
        "upload_time_iso_8601": "2023-02-09T05:29:58.193692Z",
        "url": "https://files.pythonhosted.org/packages/2e/0f/cb75293fc9dda66b651f6589f1c532ef2ff3a768099a9e41137d7642b75d/alchemy-sdk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b15d01f2aa4617e086c3af494ee295c11c1ecab4003615fa5a3563048f84ef62",
        "md5": "40655372a29d253e9971d35988371695",
        "sha256": "cf02044fed60de367b029fb0e9c1133ca6d94327116a85994cb3d1c89b08f17f"
      },
      "downloads": -1,
      "filename": "alchemy_sdk-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40655372a29d253e9971d35988371695",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 36308,
      "upload_time": "2023-02-09T05:29:54",
      "upload_time_iso_8601": "2023-02-09T05:29:54.019796Z",
      "url": "https://files.pythonhosted.org/packages/b1/5d/01f2aa4617e086c3af494ee295c11c1ecab4003615fa5a3563048f84ef62/alchemy_sdk-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e0fcb75293fc9dda66b651f6589f1c532ef2ff3a768099a9e41137d7642b75d",
        "md5": "cd01493c2d8dea5b043986b79fa92fbf",
        "sha256": "097c48b1cbe6b63ff0facfc2004eecf489fe7df257a670c8c73d8c7768a4e0ad"
      },
      "downloads": -1,
      "filename": "alchemy-sdk-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd01493c2d8dea5b043986b79fa92fbf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33771,
      "upload_time": "2023-02-09T05:29:58",
      "upload_time_iso_8601": "2023-02-09T05:29:58.193692Z",
      "url": "https://files.pythonhosted.org/packages/2e/0f/cb75293fc9dda66b651f6589f1c532ef2ff3a768099a9e41137d7642b75d/alchemy-sdk-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}