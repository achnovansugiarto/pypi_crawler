{
  "info": {
    "author": "Uros Trstenjak",
    "author_email": "uros.trstenjak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "============================\nDjango Bootstrap Modal Forms\n============================\n\nA Django plugin for creating AJAX driven forms in Bootstrap modal.\n\nLive Demo\n=========\n\nDemo_\n\n.. _Demo: http://trco.silkym.com/dbmf/\n\nTest and experiment on your machine\n===================================\n\nThis repository includes ``Dockerfile`` and ``docker-compose.yml`` files so you can easily setup and start to experiment with ``django-bootstrap-modal-forms`` running inside of a container on your local machine. Any changes you make in ``bootstrap_modal_forms``, ``examples`` and ``test`` folders are reflected in the container (see docker-compose.yml) and the data stored in sqlite3 database are persistent even if you remove stopped container. Follow the steps below to run the app::\n\n    $ clone repository\n    $ cd django-bootstrap-modal-forms\n    $ docker compose up (use -d flag to run app in detached mode in the background)\n    $ visit 0.0.0.0:8000\n\nInstallation\n============\n\n1. Install ``django-bootstrap-modal-forms``::\n\n    $ pip install django-bootstrap-modal-forms\n\n2. Add ``bootstrap_modal_forms`` to your INSTALLED_APPS in settings.py::\n\n    INSTALLED_APPS = [\n        ...\n        'bootstrap_modal_forms',\n        ...\n    ]\n\n3. Include Bootstrap, jQuery and ``jquery.bootstrap.modal.forms.js`` on every page where you would like to set up the AJAX driven Django forms in Bootstrap modal.\n\nIMPORTANT: Adjust Bootstrap and jQuery file paths to match yours, but include ``jquery.bootstrap.modal.forms.js`` exactly as in code bellow.\n\n.. code-block:: html+django\n\n    <head>\n        <link rel=\"stylesheet\" href=\"{% static 'assets/css/bootstrap.css' %}\">\n    </head>\n\n    <body>\n        <script src=\"{% static 'assets/js/bootstrap.js' %}\"></script>\n\n        <!-- Bootstrap 4 -->\n        <script src=\"{% static 'assets/js/jquery.js' %}\"></script>\n        <script src=\"{% static 'js/jquery.bootstrap.modal.forms.js' %}\"></script>\n        <!-- You can alternatively load the minified version -->\n        <script src=\"{% static 'js/jquery.bootstrap.modal.forms.min.js' %}\"></script>\n\n        <!-- Bootstrap 5 -->\n        <script src=\"{% static 'js/bootstrap5.modal.forms.js' %}\"></script>\n        <!-- You can alternatively load the minified version -->\n        <script src=\"{% static 'js/bootstrap5.modal.forms.min.js' %}\"></script>\n    </body>\n\nHow it works?\n=============\n.. code-block:: html\n\n    index.html\n\n    <script type=\"text/javascript\">\n\n    // BS4\n    $(document).ready(function() {\n        $(\"#create-book\").modalForm({\n            formURL: \"{% url 'create_book' %}\"\n        });\n    });\n\n    // BS5\n    // instantiate single modal form\n    document.addEventListener('DOMContentLoaded', (e) => {\n      modalForm(document.getElementById('create-book'), {\n        formURL: \"{% url 'create_book' %}\"\n      })\n    });\n\n    // BS5\n    // instantiate multiple modal forms with unique formUrls\n    document.addEventListener('DOMContentLoaded', (e) => {\n      var deleteButtons = document.getElementsByClassName(\"delete-book\");\n      for (var index=0; index < deleteButtons.length; index++) {\n        modalForm(deleteButtons[index], {\n          formURL: deleteButtons[index][\"dataset\"][\"formUrl\"],\n          isDeleteForm: true\n        });\n      }\n    });\n\n    </script>\n\n1. Click event on html element instantiated with ``modalForm`` opens modal\n2. Form at ``formURL`` is appended to the modal\n3. On submit the form is POSTed via AJAX request to ``formURL``\n4. **Unsuccessful POST request** returns errors, which are shown in modal\n5. **Successful POST request** submits the form and redirects to ``success_url`` and shows ``success_message``, which are both defined in related Django view\n\nUsage\n=====\n\n1. Form\n*******\n\nDefine BookModelForm and inherit built-in form ``BSModalModelForm``.\n\n.. code-block:: python\n\n    forms.py\n\n    from .models import Book\n    from bootstrap_modal_forms.forms import BSModalModelForm\n\n    class BookModelForm(BSModalModelForm):\n        class Meta:\n            model = Book\n            fields = ['title', 'author', 'price']\n\n2. Form's html\n**************\n\nDefine form's html and save it as Django template.\n\n- Bootstrap 4 modal elements are used in this example.\n- Form will POST to ``formURL`` defined in #6.\n- Add ``class=\"invalid\"`` or custom ``errorClass`` (see paragraph **Options**) to the elements that wrap the fields.\n- ``class=\"invalid\"`` acts as a flag for the fields having errors after the form has been POSTed.\n\n.. code-block:: html\n\n    book/create_book.html\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n     <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Create new Book</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        {% for field in form %}\n          <div class=\"form-group{% if field.errors %} invalid{% endif %}\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {{ field }}\n            {% for error in field.errors %}\n              <p class=\"help-block\">{{ error }}</p>\n            {% endfor %}\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n        <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n      </div>\n\n    </form>\n\n3. Class-based view\n*******************\n\nDefine a class-based view BookCreateView and inherit from built-in generic view ``BSModalCreateView``. BookCreateView processes the form defined in #1, uses the template defined in #2 and redirects to ``success_url`` showing ``success_message``.\n\n.. code-block:: python\n\n    views.py\n\n    from django.urls import reverse_lazy\n    from .forms import BookModelForm\n    from .models import Book\n    from bootstrap_modal_forms.generic import BSModalCreateView\n\n    class BookCreateView(BSModalCreateView):\n        template_name = 'examples/create_book.html'\n        form_class = BookModelForm\n        success_message = 'Success: Book was created.'\n        success_url = reverse_lazy('index')\n\n4. URL for the view\n*******************\n\nDefine URL for the view in #3.\n\n.. code-block:: python\n\n    from django.urls import path\n    from books import views\n\n    urlpatterns = [\n        path('', views.Index.as_view(), name='index'),\n        path('create/', views.BookCreateView.as_view(), name='create_book'),\n    ]\n\n5. Bootstrap modal and trigger element\n**************************************\n\nDefine the Bootstrap modal window and html element triggering modal opening.\n\n- **Single modal** can be used for multiple ``modalForms`` in single template (see #6).\n- When using **multiple modals** on the same page each modal should have unique ``id`` and the same value should also be set as ``modalID`` option when instantiating ``modalForm`` on trigger element.\n- Trigger element (in this example button with ``id=\"create-book\"``) is used for instantiation of ``modalForm`` in #6.\n- Any element can be trigger element as long as ``modalForm`` is bound to it.\n- Click event on trigger element loads form's html from #2 within ``<div class=\"modal-content\"></div>`` and sets action attribute of the form to ``formURL`` set in #6.\n\n.. code-block:: html+django\n\n    index.html\n\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"modal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\"></div>\n      </div>\n    </div>\n\n    <!-- Create book button -->\n    <button id=\"create-book\" class=\"btn btn-primary\" type=\"button\" name=\"button\">Create book</button>\n\n6. modalForm\n************\n\nAdd script to the template from #5 and bind the ``modalForm`` to the trigger element. Set BookCreateView URL defined in #4 as ``formURL`` property of ``modalForm``.\n\n- If you want to create **more modalForms in single template using the single modal window** from #5, repeat steps #1 to #4, create new trigger element as in #5 and bind the new ``modalForm`` with unique URL to it.\n- Default values for ``modalID``, ``modalContent``, ``modalForm`` and ``errorClass`` are used in this example, while ``formURL`` is customized. If you customize any other option adjust the code of the above examples accordingly.\n\n.. code-block:: html\n\n    index.html\n\n    <script type=\"text/javascript\">\n\n    // BS4\n    $(document).ready(function() {\n        $(\"#create-book\").modalForm({\n            formURL: \"{% url 'create_book' %}\"\n        });\n    });\n\n    // BS5\n    document.addEventListener('DOMContentLoaded', (e) => {\n      modalForm(document.getElementById('create-book'), {\n        formURL: \"{% url 'create_book' %}\"\n      })\n    });\n\n    </script>\n\nAsync create/update with or without modal closing on submit\n===========================================================\n\nSet ``asyncUpdate`` and ``asyncSettings`` settings to create or update objects without page redirection to ``successUrl`` and define whether a modal should close or stay opened after form submission. See comments in example below and paragraph **modalForm options** for explanation of ``asyncSettings``.\nSee examples on how to properly reinstantiate modal forms for all CRUD buttons when using async options.\n\n.. code-block:: html\n\n    index.html\n\n    <!-- asyncSettings.dataElementId -->\n    <table id=\"books-table\" class=\"table\">\n      <thead>\n        ...\n      </thead>\n      <tbody>\n      {% for book in books %}\n        <tr>\n            ...\n            <!-- Update book buttons -->\n            <button type=\"button\" class=\"update-book btn btn-sm btn-primary\" data-form-url=\"{% url 'update_book' book.pk %}\">\n              <span class=\"fa fa-pencil\"></span>\n            </button>\n            ...\n          </td>\n        </tr>\n      {% endfor %}\n      </tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            ...\n\n            # asyncSettings.successMessage\n            var asyncSuccessMessage = [\n              \"<div \",\n              \"style='position:fixed;top:0;z-index:10000;width:100%;border-radius:0;' \",\n              \"class='alert alert-icon alert-success alert-dismissible fade show mb-0' role='alert'>\",\n              \"Success: Book was updated.\",\n              \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'>\",\n              \"<span aria-hidden='true'>&times;</span>\",\n              \"</button>\",\n              \"</div>\",\n              \"<script>\",\n              \"$('.alert').fadeTo(2000, 500).slideUp(500, function () {$('.alert').slideUp(500).remove();});\",\n              \"<\\/script>\"\n            ].join();\n\n            # asyncSettings.addModalFormFunction\n            function updateBookModalForm() {\n              $(\".update-book\").each(function () {\n                $(this).modalForm({\n                  formURL: $(this).data(\"form-url\"),\n                  asyncUpdate: true,\n                  asyncSettings: {\n                    closeOnSubmit: false,\n                    successMessage: asyncSuccessMessage\n                    dataUrl: \"books/\",\n                    dataElementId: \"#books-table\",\n                    dataKey: \"table\",\n                    addModalFormFunction: updateBookModalForm\n                  }\n                });\n              });\n            }\n            updateBookModalForm();\n        \n            ...\n        });\n    </script>\n\n.. code-block:: python\n\n    urls.py\n\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        ...\n        # asyncSettings.dataUrl\n        path('books/', views.books, name='books'),\n        ...\n    ]\n\n.. code-block:: python\n\n    views.py\n\n    from django.http import JsonResponse\n    from django.template.loader import render_to_string\n    from .models import Book\n\n    def books(request):\n        data = dict()\n        if request.method == 'GET':\n            books = Book.objects.all()\n            # asyncSettings.dataKey = 'table'\n            data['table'] = render_to_string( \n                '_books_table.html',\n                {'books': books},\n                request=request\n            )\n            return JsonResponse(data)\n\nmodalForm options\n=================\n\nmodalID\n  Sets the custom id of the modal. ``Default: \"#modal\"``\n\nmodalContent\n  Sets the custom class of the element to which the form's html is appended. If you change ``modalContent`` to the custom class, you should also change ``modalForm`` accordingly. To keep Bootstrap's modal style you should than copy Bootstrap's style for ``modal-content`` and set it to your new modalContent class. ``Default: \".modal-content\"``\n\nmodalForm\n  Sets the custom form selector. ``Default: \".modal-content form\"``\n\nformURL\n  Sets the url of the form's view and html. ``Default: null``\n\nisDeleteForm\n  Defines if form is used for deletion. Should be set to ``true`` for deletion forms.  ``Default: false``\n\nerrorClass\n  Sets the custom class for the form fields having errors. ``Default: \".invalid\"``\n\nasyncUpdate\n  Sets asynchronous content update after form submission. ``Default: false``\n\nasyncSettings.closeOnSubmit\n  Sets whether modal closes or not after form submission. ``Default: false``\n\nasyncSettings.successMessage\n  Sets successMessage shown after succesful for submission. Should be set to string defining message element. See ``asyncSuccessMessage`` example above. ``Default: null``\n\nasyncSettings.dataUrl\n  Sets url of the view returning new queryset = all of the objects plus newly created or updated one after asynchronous update. ``Default: null``\n\nasyncSettings.dataElementId\n  Sets the ``id`` of the element which rerenders asynchronously updated queryset. ``Default: null``\n\nasyncSettings.dataKey\n  Sets the key containing asynchronously updated queryset in the data dictionary returned from the view providing updated queryset. ``Default: null``\n\nasyncSettings.addModalFormFunction\n  Sets the method needed for reinstantiation of event listeners on buttons (single or all CRUD buttons) after asynchronous update. ``Default: null``\n\nmodalForm default settings object and it's structure\n****************************************************\n\n.. code-block:: html\n  \n    triggerElement.modalForm({\n        modalID: \"#modal\",\n        modalContent: \".modal-content\",\n        modalForm: \".modal-content form\",\n        formURL: null,\n        isDeleteForm: false,\n        errorClass: \".invalid\",\n        asyncUpdate: false,\n        asyncSettings: {\n            closeOnSubmit: false,\n            successMessage: null,\n            dataUrl: null,\n            dataElementId: null,\n            dataKey: null,\n            addModalFormFunction: null\n        }\n    });\n\nForms\n=====\n\nImport forms with ``from bootstrap_modal_forms.forms import BSModalForm``.\n\nBSModalForm\n    Inherits PopRequestMixin and Django's forms.Form.\n\nBSModalModelForm\n    Inherits PopRequestMixin, CreateUpdateAjaxMixin and Django's forms.ModelForm.\n\nMixins\n======\n\nImport mixins with ``from bootstrap_modal_forms.mixins import PassRequestMixin``.\n\nPassRequestMixin\n    Puts the request into the form's kwargs.\n\nPopRequestMixin\n    Pops request out of the kwargs and attaches it to the form's instance.\n\nCreateUpdateAjaxMixin\n    Saves or doesn't save the object based on the request type.\n\nDeleteMessageMixin\n    Deletes object if request is not ajax request.\n\nLoginAjaxMixin\n    Authenticates user if request is not ajax request.\n\nGeneric views\n=============\n\nImport generic views with ``from bootstrap_modal_forms.generic import BSModalFormView``.\n\nBSModalFormView\n    Inherits PassRequestMixin and Django's generic.FormView.\n\nBSModalCreateView\n    Inherits PassRequestMixin and Django's SuccessMessageMixin and generic.CreateView.\n\nBSModalUpdateView\n    Inherits PassRequestMixin and Django's SuccessMessageMixin and generic.UpdateView.\n\nBSModalReadView\n    Inherits Django's generic.DetailView.\n\nBSModalDeleteView\n    Inherits DeleteMessageMixin and Django's generic.DeleteView.\n\nExamples\n========\n\nTo see ``django-bootstrap-modal-forms`` in action clone the repository and run the examples locally::\n\n    $ git clone https://github.com/trco/django-bootstrap-modal-forms.git\n    $ cd django-bootstrap-modal-forms\n    $ pip install -r requirements.txt\n    $ python manage.py migrate\n    $ python manage.py runserver\n\nTests\n=====\n\nRun unit and functional tests inside of project folder::\n\n    $ python manage.py test\n\nExample 1: Signup form in Bootstrap modal\n*****************************************\n\nFor explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**.\n\n.. code-block:: python\n\n    forms.py\n\n    from django.contrib.auth.forms import UserCreationForm\n    from django.contrib.auth.models import User\n    from bootstrap_modal_forms.mixins import PopRequestMixin, CreateUpdateAjaxMixin\n\n\n    class CustomUserCreationForm(PopRequestMixin, CreateUpdateAjaxMixin,\n                                 UserCreationForm):\n        class Meta:\n            model = User\n            fields = ['username', 'password1', 'password2']\n\n.. code-block:: html\n\n    signup.html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Sign up</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n\n        <div class=\"{% if form.non_field_errors %}invalid{% endif %} mb-2\">\n          {% for error in form.non_field_errors %}\n            {{ error }}\n          {% endfor %}\n        </div>\n\n        {% for field in form %}\n          <div class=\"form-group\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% render_field field class=\"form-control\" placeholder=field.label %}\n            <div class=\"{% if field.errors %} invalid{% endif %}\">\n              {% for error in field.errors %}\n                <p class=\"help-block\">{{ error }}</p>\n              {% endfor %}\n            </div>\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\">Sign up</button>\n      </div>\n\n    </form>\n\n.. code-block:: python\n\n    views.py\n\n    from django.urls import reverse_lazy\n    from bootstrap_modal_forms.generic import BSModalCreateView\n    from .forms import CustomUserCreationForm\n\n    class SignUpView(BSModalCreateView):\n        form_class = CustomUserCreationForm\n        template_name = 'examples/signup.html'\n        success_message = 'Success: Sign up succeeded. You can now Log in.'\n        success_url = reverse_lazy('index')\n\n.. code-block:: python\n\n    urls.py\n\n    from django.urls import path\n    from . import views\n\n    app_name = 'accounts'\n    urlpatterns = [\n        path('signup/', views.SignUpView.as_view(), name='signup')\n    ]\n\n\n.. code-block:: html\n\n    .html file containing modal, trigger element and script instantiating modalForm\n\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"modal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\"></div>\n      </div>\n    </div>\n\n    <button id=\"signup-btn\" class=\"btn btn-primary\" type=\"button\" name=\"button\">Sign up</button>\n\n    <script type=\"text/javascript\">\n      $(function () {\n        // Sign up button\n        $(\"#signup-btn\").modalForm({\n            formURL: \"{% url 'signup' %}\"\n        });\n      });\n    </script>\n\nExample 2: Login form in Bootstrap modal\n****************************************\n\nFor explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**.\n\nYou can set the login redirection by setting the ``LOGIN_REDIRECT_URL`` in ``settings.py``.\n\nYou can also set the custom login redirection by:\n\n1. Adding ``success_url`` to the ``extra_context`` of ``CustomLoginView``\n2. Setting this ``success_url`` variable as a value of the ``hidden input field`` with ``name=\"next\"`` within the Login form html\n\n.. code-block:: python\n\n    forms.py\n\n    from django.contrib.auth.forms import AuthenticationForm\n    from django.contrib.auth.models import User\n\n    class CustomAuthenticationForm(AuthenticationForm):\n        class Meta:\n            model = User\n            fields = ['username', 'password']\n\n.. code-block:: html\n\n    login.html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Log in</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n\n        <div class=\"{% if form.non_field_errors %}invalid{% endif %} mb-2\">\n          {% for error in form.non_field_errors %}\n            {{ error }}\n          {% endfor %}\n        </div>\n\n        {% for field in form %}\n          <div class=\"form-group\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% render_field field class=\"form-control\" placeholder=field.label %}\n            <div class=\"{% if field.errors %} invalid{% endif %}\">\n              {% for error in field.errors %}\n                <p class=\"help-block\">{{ error }}</p>\n              {% endfor %}\n            </div>\n          </div>\n        {% endfor %}\n\n        <!-- Hidden input field for custom redirection after successful login -->\n        <input type=\"hidden\" name=\"next\" value=\"{{ success_url }}\">\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\">Log in</button>\n      </div>\n\n    </form>\n\n.. code-block:: python\n\n    views.py\n\n    from django.urls import reverse_lazy\n    from bootstrap_modal_forms.generic import BSModalLoginView\n    from .forms import CustomAuthenticationForm\n\n    class CustomLoginView(BSModalLoginView):\n        authentication_form = CustomAuthenticationForm\n        template_name = 'examples/login.html'\n        success_message = 'Success: You were successfully logged in.'\n        extra_context = dict(success_url=reverse_lazy('index'))\n\n.. code-block:: python\n\n    urls.py\n\n    from django.urls import path\n    from . import views\n\n    app_name = 'accounts'\n    urlpatterns = [\n        path('login/', views.CustomLoginView.as_view(), name='login')\n    ]\n\n.. code-block:: html\n\n    .html file containing modal, trigger element and script instantiating modalForm\n\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"modal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\"></div>\n      </div>\n    </div>\n\n    <button id=\"login-btn\" class=\"btn btn-primary\" type=\"button\" name=\"button\">Sign up</button>\n\n    <script type=\"text/javascript\">\n      $(function () {\n        // Log in button\n        $(\"#login-btn\").modalForm({\n            formURL: \"{% url 'login' %}\"\n        });\n      });\n    </script>\n\nExample 3: Django's forms.ModelForm (CRUD forms) in Bootstrap modal\n*******************************************************************\n\nFor explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**.\n\n.. code-block:: python\n\n    forms.py\n\n    from .models import Book\n    from bootstrap_modal_forms.forms import BSModalModelForm\n\n\n    class BookModelForm(BSModalModelForm):\n        class Meta:\n            model = Book\n            exclude = ['timestamp']\n\n.. code-block:: html\n\n    create_book.html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Create Book</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n\n        <div class=\"{% if form.non_field_errors %}invalid{% endif %} mb-2\">\n          {% for error in form.non_field_errors %}\n            {{ error }}\n          {% endfor %}\n        </div>\n\n        {% for field in form %}\n          <div class=\"form-group\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% render_field field class=\"form-control\" placeholder=field.label %}\n            <div class=\"{% if field.errors %} invalid{% endif %}\">\n              {% for error in field.errors %}\n                <p class=\"help-block\">{{ error }}</p>\n              {% endfor %}\n            </div>\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\">Create</button>\n      </div>\n\n    </form>\n\n.. code-block:: html\n\n    update_book.html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Update Book</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <div class=\"{% if form.non_field_errors %}invalid{% endif %} mb-2\">\n          {% for error in form.non_field_errors %}\n            {{ error }}\n          {% endfor %}\n        </div>\n\n        {% for field in form %}\n          <div class=\"form-group\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% render_field field class=\"form-control\" placeholder=field.label %}\n            <div class=\"{% if field.errors %} invalid{% endif %}\">\n              {% for error in field.errors %}\n                <p class=\"help-block\">{{ error }}</p>\n              {% endfor %}\n            </div>\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n      </div>\n\n    </form>\n\n.. code-block:: html\n\n    read_book.html\n\n    {% load widget_tweaks %}\n\n    <div class=\"modal-header\">\n      <h3 class=\"modal-title\">Book details</h3>\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n\n    <div class=\"modal-body\">\n      <div class=\"\">\n        Title: {{ book.title }}\n      </div>\n      <div class=\"\">\n        Author: {{ book.author }}\n      </div>\n      <div class=\"\">\n        Price: {{ book.price }} €\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n    </div>\n\n.. code-block:: html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Delete Book</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <p>Are you sure you want to delete book with title\n          <strong>{{ book.title }}</strong>?</p>\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-danger\">Delete</button>\n      </div>\n\n    </form>\n\n.. code-block:: python\n\n    views.py\n\n    from django.urls import reverse_lazy\n    from django.views import generic\n    from .forms import BookModelForm\n    from .models import Book\n    from bootstrap_modal_forms.generic import (\n      BSModalCreateView,\n      BSModalUpdateView,\n      BSModalReadView,\n      BSModalDeleteView\n    )\n\n    class Index(generic.ListView):\n        model = Book\n        context_object_name = 'books'\n        template_name = 'index.html'\n\n    # Create\n    class BookCreateView(BSModalCreateView):\n        template_name = 'examples/create_book.html'\n        form_class = BookModelForm\n        success_message = 'Success: Book was created.'\n        success_url = reverse_lazy('index')\n\n    # Update\n    class BookUpdateView(BSModalUpdateView):\n        model = Book\n        template_name = 'examples/update_book.html'\n        form_class = BookModelForm\n        success_message = 'Success: Book was updated.'\n        success_url = reverse_lazy('index')\n\n    # Read\n    class BookReadView(BSModalReadView):\n        model = Book\n        template_name = 'examples/read_book.html'\n\n    # Delete\n    class BookDeleteView(BSModalDeleteView):\n        model = Book\n        template_name = 'examples/delete_book.html'\n        success_message = 'Success: Book was deleted.'\n        success_url = reverse_lazy('index')\n\n.. code-block:: python\n\n    urls.py\n\n    from django.urls import path\n    from books import views\n\n    urlpatterns = [\n        path('', views.Index.as_view(), name='index'),\n        path('create/', views.BookCreateView.as_view(), name='create_book'),\n        path('update/<int:pk>', views.BookUpdateView.as_view(), name='update_book'),\n        path('read/<int:pk>', views.BookReadView.as_view(), name='read_book'),\n        path('delete/<int:pk>', views.BookDeleteView.as_view(), name='delete_book')\n    ]\n\n.. code-block:: html\n\n    .html file containing modal, trigger elements and script instantiating modalForms\n\n    <!-- Modal 1 with id=\"create-book\"-->\n    <div class=\"modal fade\" id=\"create-modal\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n        </div>\n      </div>\n    </div>\n\n    <!-- Modal 2 with id=\"modal\" -->\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"modal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\"></div>\n      </div>\n    </div>\n\n    <!-- Create book button -->\n    <button id=\"create-book\" class=\"btn btn-primary\" type=\"button\" name=\"button\">Create book</button>\n\n    {% for book in books %}\n        <div class=\"text-center\">\n          <!-- Read book buttons -->\n          <button type=\"button\" class=\"read-book bs-modal btn btn-sm btn-primary\" data-form-url=\"{% url 'read_book' book.pk %}\">\n            <span class=\"fa fa-eye\"></span>\n          </button>\n          <!-- Update book buttons -->\n          <button type=\"button\" class=\"update-book bs-modal btn btn-sm btn-primary\" data-form-url=\"{% url 'update_book' book.pk %}\">\n            <span class=\"fa fa-pencil\"></span>\n          </button>\n          <!-- Delete book buttons -->\n          <button type=\"button\" class=\"delete-book bs-modal btn btn-sm btn-danger\" data-form-url=\"{% url 'delete_book' book.pk %}\">\n            <span class=\"fa fa-trash\"></span>\n          </button>\n        </div>\n    {% endfor %}\n\n    <script type=\"text/javascript\">\n      $(function () {\n\n        // Read book buttons\n        $(\".read-book\").each(function () {\n            $(this).modalForm({formURL: $(this).data(\"form-url\")});\n        });\n\n        // Delete book buttons - formURL is retrieved from the data of the element\n        $(\".delete-book\").each(function () {\n            $(this).modalForm({formURL: $(this).data(\"form-url\"), isDeleteForm: true});\n        });\n\n        // Create book button opens form in modal with id=\"create-modal\"\n        $(\"#create-book\").modalForm({\n            formURL: \"{% url 'create_book' %}\",\n            modalID: \"#create-modal\"\n        });\n\n      });\n    </script>\n\n- See the difference between button triggering Create action and buttons triggering Read, Update and Delete actions.\n- Within the for loop in .html file the ``data-form-url`` attribute of each Update, Read and Delete button should be set to relevant URL with pk argument of the object to be updated, read or deleted.\n- These ``data-form-url`` URLs should than be set as ``formURLs`` for ``modalForms`` bound to the buttons.\n\nExample 4: Django's forms.Form in Bootstrap modal\n*************************************************\n\nFor explanation how all the parts of the code work together see paragraph **Usage**. To test the working solution presented here clone and run **Examples**.\n\n.. code-block:: python\n\n    forms.py\n\n    from bootstrap_modal_forms.forms import BSModalForm\n\n    class BookFilterForm(BSModalForm):\n        type = forms.ChoiceField(choices=Book.BOOK_TYPES)\n\n        class Meta:\n            fields = ['type']\n\n.. code-block:: html\n\n    filter_book.html\n\n    {% load widget_tweaks %}\n\n    <form method=\"post\" action=\"\">\n      {% csrf_token %}\n\n      <div class=\"modal-header\">\n        <h3 class=\"modal-title\">Filter Books</h3>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <div class=\"{% if form.non_field_errors %}invalid{% endif %} mb-2\">\n          {% for error in form.non_field_errors %}\n            {{ error }}\n          {% endfor %}\n        </div>\n\n        {% for field in form %}\n          <div class=\"form-group\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% render_field field class=\"form-control\" placeholder=field.label %}\n            <div class=\"{% if field.errors %} invalid{% endif %}\">\n              {% for error in field.errors %}\n                <p class=\"help-block\">{{ error }}</p>\n              {% endfor %}\n            </div>\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary\">Filter</button>\n      </div>\n\n    </form>\n\n.. code-block:: python\n\n    views.py\n\n    class BookFilterView(BSModalFormView):\n        template_name = 'examples/filter_book.html'\n        form_class = BookFilterForm\n\n        def form_valid(self, form):\n            self.filter = '?type=' + form.cleaned_data['type']\n            response = super().form_valid(form)\n            return response\n\n        def get_success_url(self):\n            return reverse_lazy('index') + self.filter\n\n.. code-block:: python\n\n    urls.py\n\n    from django.urls import path\n    from . import views\n\n    app_name = 'accounts'\n    urlpatterns = [\n        path('filter/', views.BookFilterView.as_view(), name='filter_book'),\n    ]\n\n.. code-block:: html\n\n    index.html\n      \n      ...\n      <button id=\"filter-book\" class=\"filter-book btn btn-primary\" type=\"button\" name=\"button\" data-form-url=\"{% url 'filter_book' %}\">\n        <span class=\"fa fa-filter mr-2\"></span>Filter books\n      </button>\n      ...\n\n      <script type=\"text/javascript\">\n        $(function () {\n          ...\n          $(\"#filter-book\").each(function () {\n              $(this).modalForm({formURL: $(this).data('form-url')});\n          });\n          ...\n        });\n      </script>\n\nContribute\n==========\n\nThis is an Open Source project and any contribution is appreciated.\n\nLicense\n=======\n\nThis project is licensed under the MIT License.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trco/django-bootstrap-modal-forms",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-bootstrap-modal-forms",
    "package_url": "https://pypi.org/project/django-bootstrap-modal-forms/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-bootstrap-modal-forms/",
    "project_urls": {
      "Homepage": "https://github.com/trco/django-bootstrap-modal-forms"
    },
    "release_url": "https://pypi.org/project/django-bootstrap-modal-forms/2.2.1/",
    "requires_dist": [
      "Django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "A Django plugin for creating AJAX driven forms in Bootstrap modal.",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17164866,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ded1f449751fbcd71ae2f80f41701a6c59876f5407f6fc5f0704034af078dd70",
          "md5": "07812d35c5d191a4a9d02548e01d4c55",
          "sha256": "02c84c306c44f8d963044ac100d240c35ba0854855adfb764ad65beed99ad1d5"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07812d35c5d191a4a9d02548e01d4c55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2645,
        "upload_time": "2018-05-28T19:58:58",
        "upload_time_iso_8601": "2018-05-28T19:58:58.520210Z",
        "url": "https://files.pythonhosted.org/packages/de/d1/f449751fbcd71ae2f80f41701a6c59876f5407f6fc5f0704034af078dd70/django-bootstrap-modal-forms-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bbd7d5c52e56904b05abe6d40184edff491967ef7bd1848ffc2c3ee4984e7fa",
          "md5": "d82c2032c2fd7a2d5d93ea2a7c5aeea3",
          "sha256": "a02618036b67887e6de1689b85fa5afc1f896fedadb65543b84b39ce6b30aecc"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d82c2032c2fd7a2d5d93ea2a7c5aeea3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5757,
        "upload_time": "2018-08-11T19:29:44",
        "upload_time_iso_8601": "2018-08-11T19:29:44.729743Z",
        "url": "https://files.pythonhosted.org/packages/9b/bd/7d5c52e56904b05abe6d40184edff491967ef7bd1848ffc2c3ee4984e7fa/django-bootstrap-modal-forms-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f3ad6257552e9c40c80b380dadad5c39f3e6df8aebea42d79c76c0c11adf0d1",
          "md5": "db66fd05372690b275538264a0a48992",
          "sha256": "8f45de6d6ea55af8d4f88a99cdd1792854f7b8dacb63336c260ac13d65d47d49"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "db66fd05372690b275538264a0a48992",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6225,
        "upload_time": "2018-08-12T14:19:40",
        "upload_time_iso_8601": "2018-08-12T14:19:40.070175Z",
        "url": "https://files.pythonhosted.org/packages/3f/3a/d6257552e9c40c80b380dadad5c39f3e6df8aebea42d79c76c0c11adf0d1/django-bootstrap-modal-forms-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94f6c07e7a00c6d895fa30b1eb5d1e2977d52ab41c5b3d8f92d806105b45052a",
          "md5": "8f870c1f117e3b6ef550b827d72bb023",
          "sha256": "8c7b7c475cacc008167d3ad7ebc0c450089b8e09d46d08453f609865ef3ad2fc"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f870c1f117e3b6ef550b827d72bb023",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6310,
        "upload_time": "2018-08-14T09:26:26",
        "upload_time_iso_8601": "2018-08-14T09:26:26.443121Z",
        "url": "https://files.pythonhosted.org/packages/94/f6/c07e7a00c6d895fa30b1eb5d1e2977d52ab41c5b3d8f92d806105b45052a/django-bootstrap-modal-forms-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ee10f7a282144b518c35dac332416154ebf51eda82fbc74c0b47439162e9219",
          "md5": "3672cfcc2b106ad846b4876a16e147a3",
          "sha256": "0514673bca3ed559e2decec2c534b1bd33093349632a06703acc503360a1ac99"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3672cfcc2b106ad846b4876a16e147a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14967,
        "upload_time": "2018-08-31T20:37:03",
        "upload_time_iso_8601": "2018-08-31T20:37:03.972052Z",
        "url": "https://files.pythonhosted.org/packages/1e/e1/0f7a282144b518c35dac332416154ebf51eda82fbc74c0b47439162e9219/django-bootstrap-modal-forms-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2be088efa2ca83a29480fc6fc9dfb9164ec55630dcfd98f0b476f65150180fc6",
          "md5": "9a52f3aef9a3c3decba795cb405fe25b",
          "sha256": "9c3aa69cd22b736b9a4e8a99485d10cc829b8d842138690f5e848a856a2c3a83"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a52f3aef9a3c3decba795cb405fe25b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19277,
        "upload_time": "2019-03-30T18:58:39",
        "upload_time_iso_8601": "2019-03-30T18:58:39.490113Z",
        "url": "https://files.pythonhosted.org/packages/2b/e0/88efa2ca83a29480fc6fc9dfb9164ec55630dcfd98f0b476f65150180fc6/django-bootstrap-modal-forms-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01a5258ebbb87dfa7cbd8ffe87c5db00750d79643c069c5cfc26eb2e270e7577",
          "md5": "0b297501d07000a9e5d55bbc12dfee94",
          "sha256": "c0ff0036d8f5622490a7acb406498ba245280116a9f425e71767c5da3e455f5d"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0b297501d07000a9e5d55bbc12dfee94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21021,
        "upload_time": "2019-03-31T19:35:02",
        "upload_time_iso_8601": "2019-03-31T19:35:02.134620Z",
        "url": "https://files.pythonhosted.org/packages/01/a5/258ebbb87dfa7cbd8ffe87c5db00750d79643c069c5cfc26eb2e270e7577/django-bootstrap-modal-forms-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0810f71be7ed8b92d2373f6f74974e1ae33020c919d3848037967a16f56d888e",
          "md5": "492762e945297772dd419f035425672c",
          "sha256": "f7ba0941fdca9be590417e9a9f35e4252bc00b72c69b0d1f3752f469b71031a8"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "492762e945297772dd419f035425672c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23639,
        "upload_time": "2019-04-02T20:33:03",
        "upload_time_iso_8601": "2019-04-02T20:33:03.136953Z",
        "url": "https://files.pythonhosted.org/packages/08/10/f71be7ed8b92d2373f6f74974e1ae33020c919d3848037967a16f56d888e/django-bootstrap-modal-forms-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ab97d45c9d8bf2051e4c295915dc1142f0557787a6cf01593f27a2b4e6dc200",
          "md5": "d6f4f0714a367eb7be8e95793b51d540",
          "sha256": "71b60e385562f2e9c07f5c2eb9a67e5766837d9fbd856b03fd1d05111a52d9ba"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d6f4f0714a367eb7be8e95793b51d540",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23687,
        "upload_time": "2019-04-15T20:10:25",
        "upload_time_iso_8601": "2019-04-15T20:10:25.321256Z",
        "url": "https://files.pythonhosted.org/packages/7a/b9/7d45c9d8bf2051e4c295915dc1142f0557787a6cf01593f27a2b4e6dc200/django-bootstrap-modal-forms-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0514c427209597fd6019597f607a1b231b95b64c3ffcfac237afb0c50a14d9ab",
          "md5": "d74d375a1e1a001b431f2928debdf1b9",
          "sha256": "6647c90200e4fc6cd6eff5366992b1bf7e55fbb3112f77a3535057dc0244beba"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d74d375a1e1a001b431f2928debdf1b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25008,
        "upload_time": "2019-09-15T20:36:45",
        "upload_time_iso_8601": "2019-09-15T20:36:45.737359Z",
        "url": "https://files.pythonhosted.org/packages/05/14/c427209597fd6019597f607a1b231b95b64c3ffcfac237afb0c50a14d9ab/django-bootstrap-modal-forms-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2083e2877911f33821e00c6f61cc4cf4cf020e36e7f2660492dbd9d0303f960",
          "md5": "786600d6e693c3b8fb2a797e2ca05673",
          "sha256": "0d79faeaa9742f875cc7c54ce31e793abf3fca9accb63eb10f1988040a3a49db"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "786600d6e693c3b8fb2a797e2ca05673",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25006,
        "upload_time": "2019-09-29T13:05:34",
        "upload_time_iso_8601": "2019-09-29T13:05:34.870791Z",
        "url": "https://files.pythonhosted.org/packages/c2/08/3e2877911f33821e00c6f61cc4cf4cf020e36e7f2660492dbd9d0303f960/django-bootstrap-modal-forms-1.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c191fd3184c0e91c393a314c3518238de693023c735bef48d17490bd8c1f2f9",
          "md5": "1bbd404452946b1ec76bf235c7ab57d9",
          "sha256": "38592e15617cf152ee4537f80306dff346ce2954c00cf9a664590fb43c79635c"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1bbd404452946b1ec76bf235c7ab57d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21907,
        "upload_time": "2019-11-23T18:59:17",
        "upload_time_iso_8601": "2019-11-23T18:59:17.068515Z",
        "url": "https://files.pythonhosted.org/packages/4c/19/1fd3184c0e91c393a314c3518238de693023c735bef48d17490bd8c1f2f9/django-bootstrap-modal-forms-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "800c8aa21352eff33a6f948702387d79598cb3d851f691394b54507a4d892613",
          "md5": "3a00508f29f92310b74a253eef3bb850",
          "sha256": "0d64e545fc2dd1f9e2550c89074789ce6a8197675596cb295c2574ae0b9ed078"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a00508f29f92310b74a253eef3bb850",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30954,
        "upload_time": "2020-06-28T15:16:19",
        "upload_time_iso_8601": "2020-06-28T15:16:19.307302Z",
        "url": "https://files.pythonhosted.org/packages/80/0c/8aa21352eff33a6f948702387d79598cb3d851f691394b54507a4d892613/django-bootstrap-modal-forms-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a29aafb34317ef0bc5be9a1514f22c1ad221204207b67aaa63025caa1be505d",
          "md5": "12b378560dd942d1bd491b738f937920",
          "sha256": "efb26223d64143edb1af6b8156c8a4a708d6341f54108a7bece612db02edaf86"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12b378560dd942d1bd491b738f937920",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31042,
        "upload_time": "2020-11-22T19:30:02",
        "upload_time_iso_8601": "2020-11-22T19:30:02.205161Z",
        "url": "https://files.pythonhosted.org/packages/7a/29/aafb34317ef0bc5be9a1514f22c1ad221204207b67aaa63025caa1be505d/django-bootstrap-modal-forms-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27bcc4399f5085e06afd0f9c0c1b3e190f6ac4c8ed2be744a4a00b2fcb595e63",
          "md5": "4b5b3340657a1d2381b7c9dea100dcd6",
          "sha256": "a282f99d3572ed0cf5335a01cd9d0d529a1a8d2685446c1281fb73f113994d77"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b5b3340657a1d2381b7c9dea100dcd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30833,
        "upload_time": "2021-03-06T18:15:21",
        "upload_time_iso_8601": "2021-03-06T18:15:21.983802Z",
        "url": "https://files.pythonhosted.org/packages/27/bc/c4399f5085e06afd0f9c0c1b3e190f6ac4c8ed2be744a4a00b2fcb595e63/django-bootstrap-modal-forms-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80142b0d8fd3ef6f6a711a08a01531d8382d2416076481b0fb1cc4ee1dfcdb68",
          "md5": "f5a92cfb33dfefda7e948cc90ee82d01",
          "sha256": "be180b30892aa7b8012718dfca7586de7d0c143585bc44ed507d50569cdd41cd"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f5a92cfb33dfefda7e948cc90ee82d01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31400,
        "upload_time": "2021-04-27T17:30:16",
        "upload_time_iso_8601": "2021-04-27T17:30:16.811600Z",
        "url": "https://files.pythonhosted.org/packages/80/14/2b0d8fd3ef6f6a711a08a01531d8382d2416076481b0fb1cc4ee1dfcdb68/django-bootstrap-modal-forms-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02f3e6080f8d02890a0c879f63aba26efe34c7d6616b5ad9201f63c0507f66b0",
          "md5": "16fe3c69e93ee205a5e391367ada8ea3",
          "sha256": "7f76cb47301702fbbaab22ebe9a6ee7c0c60d048b91079e07479a5149d56056c"
        },
        "downloads": -1,
        "filename": "django_bootstrap_modal_forms-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16fe3c69e93ee205a5e391367ada8ea3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29645,
        "upload_time": "2023-03-05T15:26:46",
        "upload_time_iso_8601": "2023-03-05T15:26:46.427360Z",
        "url": "https://files.pythonhosted.org/packages/02/f3/e6080f8d02890a0c879f63aba26efe34c7d6616b5ad9201f63c0507f66b0/django_bootstrap_modal_forms-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ac341fd115510ffee8c6958e314c9900137dc2452e862e5cb59beabd41c8dba",
          "md5": "b16085788df115e4d7e1f6ff33400caa",
          "sha256": "e2badbfbed50ad5b2c943e6c6bc3478bd56b1c73a5b4ea05e861f98fa0da8d19"
        },
        "downloads": -1,
        "filename": "django-bootstrap-modal-forms-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b16085788df115e4d7e1f6ff33400caa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36423,
        "upload_time": "2023-03-05T15:26:49",
        "upload_time_iso_8601": "2023-03-05T15:26:49.457299Z",
        "url": "https://files.pythonhosted.org/packages/5a/c3/41fd115510ffee8c6958e314c9900137dc2452e862e5cb59beabd41c8dba/django-bootstrap-modal-forms-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02f3e6080f8d02890a0c879f63aba26efe34c7d6616b5ad9201f63c0507f66b0",
        "md5": "16fe3c69e93ee205a5e391367ada8ea3",
        "sha256": "7f76cb47301702fbbaab22ebe9a6ee7c0c60d048b91079e07479a5149d56056c"
      },
      "downloads": -1,
      "filename": "django_bootstrap_modal_forms-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16fe3c69e93ee205a5e391367ada8ea3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29645,
      "upload_time": "2023-03-05T15:26:46",
      "upload_time_iso_8601": "2023-03-05T15:26:46.427360Z",
      "url": "https://files.pythonhosted.org/packages/02/f3/e6080f8d02890a0c879f63aba26efe34c7d6616b5ad9201f63c0507f66b0/django_bootstrap_modal_forms-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ac341fd115510ffee8c6958e314c9900137dc2452e862e5cb59beabd41c8dba",
        "md5": "b16085788df115e4d7e1f6ff33400caa",
        "sha256": "e2badbfbed50ad5b2c943e6c6bc3478bd56b1c73a5b4ea05e861f98fa0da8d19"
      },
      "downloads": -1,
      "filename": "django-bootstrap-modal-forms-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b16085788df115e4d7e1f6ff33400caa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36423,
      "upload_time": "2023-03-05T15:26:49",
      "upload_time_iso_8601": "2023-03-05T15:26:49.457299Z",
      "url": "https://files.pythonhosted.org/packages/5a/c3/41fd115510ffee8c6958e314c9900137dc2452e862e5cb59beabd41c8dba/django-bootstrap-modal-forms-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}