{
  "info": {
    "author": "Paul Gavrikov",
    "author_email": "paul.gavrikov@hs-offenburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# torchconvview\r\n\r\n[![Latest Version](https://img.shields.io/pypi/v/torchconvview.svg?color=green)](https://pypi.python.org/pypi/torchconvquality)\r\n[![pytest](https://github.com/paulgavrikov/torchconvview/actions/workflows/pytest.yml/badge.svg)](https://github.com/paulgavrikov/torchconvview/actions/workflows/pytest.yml)\r\n[![CC BY-SA 4.0][cc-by-sa-shield]][cc-by-sa]\r\n\r\n\r\n[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\r\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\r\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg\r\n\r\n*A library for PyTorch convolution layer visualizations via matplotlib plots.*\r\n\r\n\r\n## Installation\r\nTo install published releases from PyPi execute:\r\n```bash\r\npip install torchconvview\r\n```\r\nTo update torchconvquality to the latest available version, add the `--upgrade` flag to the above commands.\r\n\r\nIf you want the latest (potentially unstable) features you can also directly install from the github main branch:\r\n```bash\r\npip install git+https://github.com/paulgavrikov/torchconvview\r\n```\r\n\r\n## Usage\r\n\r\n```python\r\nfrom torchconvvision import plot_conv, plot_conv_rgb, PCAView\r\nimport matplotlib.pyplot as plt\r\n\r\n# Replace this with your own model. As an example,\r\n# we will use an ImageNet pretrained ResNet-18.\r\nimport torchvision\r\nmodel = torchvision.models.resnet18(pretrained=True)\r\n```\r\n### General\r\n\r\nAll `plot_...` functions return a tuple of the matplotlib figure and axes which allow you to customize the plot to your needs. Also most of these functions accept the `img_scale` argument which allows you to specify a multiplier to the resolution.\r\n\r\n### Visualize kernels in the convolution layers\r\nJust pass the convolution weight as tensor or numpy into `plot_conv` and you'll get a matplotlib figure of the kernels! Each column is one channel/filter, i.e. this stack of kernels generates a feature-map from all input maps.\r\n```python\r\nplot_conv(model.layer1[1].conv2.weight)\r\nplt.show()\r\n```\r\n<img src=\"docs/fig/output_plot_conv.png\" width=\"30%\">\r\n\r\n### Visualize the first layer\r\nIf you have a convolution layer with RGB input (e.g. often the first layer), the you can visualize entire filters. This function maps all kernels to their respective color. Note that this only work on convolution layers with 3 input channels and only produces meaningfull results if these channels are R, G, B feature-maps!\r\n\r\n```python\r\nplot_conv_rgb(model.conv1.weight)\r\nplt.show()\r\n```\r\n<img src=\"docs/fig/output_plot_conv_rgb.png\" width=\"100%\">\r\n\r\n### PCA of convolution weights\r\nYou can also compute the eigenimages/basis vectors of the kernels by using the `PCAView` class. Under the hood it will do a PCA for you. Note, that currently this requires the `scikit-learn` module.\r\n\r\n```python\r\npcaview = PCAView(model.conv1.weight)\r\npcaview.plot_conv()\r\nplt.show()\r\n```\r\n<img src=\"docs/fig/output_pcaview_plot_conv.png\" width=\"10%\">\r\n\r\nAnd to get a handy barplot of the explained variance ratio:\r\n```python\r\npcaview.plot_variance_ratio()\r\nplt.show()\r\n```\r\n<img src=\"docs/fig/output_pcaview_plot_variance_ratio.png\" width=\"30%\">\r\n\r\n\r\n## Citation\r\n\r\nPlease consider citing our publication if this libary was helpfull to you.\r\n```\r\n@InProceedings{Gavrikov_2022_CVPR,\r\n    author    = {Gavrikov, Paul and Keuper, Janis},\r\n    title     = {CNN Filter DB: An Empirical Investigation of Trained Convolutional Filters},\r\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\r\n    month     = {June},\r\n    year      = {2022},\r\n    pages     = {19066-19076}\r\n}\r\n```\r\n\r\n## Legal\r\n\r\nThis work is licensed under a\r\n[Creative Commons Attribution-ShareAlike 4.0 International License][cc-by-sa].\r\n\r\nFunded by the Ministry for Science, Research and Arts, Baden-Wuerttemberg, Germany Grant 32-7545.20/45/1 (Q-AMeLiA).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paulgavrikov/torchconvview",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchconvview",
    "package_url": "https://pypi.org/project/torchconvview/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchconvview/",
    "project_urls": {
      "Homepage": "https://github.com/paulgavrikov/torchconvview"
    },
    "release_url": "https://pypi.org/project/torchconvview/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A library for PyTorch convolution layer visualizations.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16603275,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57255aef012efdc763cb5da3d90aa1f0256d1f0809d63494beadc30a706756a9",
          "md5": "182463739f5c9f8bff33ef1973a4bb4a",
          "sha256": "e48bd12d24da8918ce63ba9e05923ba28810d72e7f088d23129e66060c77e2a8"
        },
        "downloads": -1,
        "filename": "torchconvview-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "182463739f5c9f8bff33ef1973a4bb4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11023,
        "upload_time": "2023-01-28T19:21:32",
        "upload_time_iso_8601": "2023-01-28T19:21:32.421091Z",
        "url": "https://files.pythonhosted.org/packages/57/25/5aef012efdc763cb5da3d90aa1f0256d1f0809d63494beadc30a706756a9/torchconvview-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57255aef012efdc763cb5da3d90aa1f0256d1f0809d63494beadc30a706756a9",
        "md5": "182463739f5c9f8bff33ef1973a4bb4a",
        "sha256": "e48bd12d24da8918ce63ba9e05923ba28810d72e7f088d23129e66060c77e2a8"
      },
      "downloads": -1,
      "filename": "torchconvview-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "182463739f5c9f8bff33ef1973a4bb4a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11023,
      "upload_time": "2023-01-28T19:21:32",
      "upload_time_iso_8601": "2023-01-28T19:21:32.421091Z",
      "url": "https://files.pythonhosted.org/packages/57/25/5aef012efdc763cb5da3d90aa1f0256d1f0809d63494beadc30a706756a9/torchconvview-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}