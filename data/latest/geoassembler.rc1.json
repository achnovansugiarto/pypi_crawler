{
  "info": {
    "author": "European XFEL GmbH",
    "author_email": "cas-support@xfel.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Shape Overlay Based Detector Geometry Calibration\n\nThis repository provides a tool to calibrate AGIPD detector geometry information\n\nThe tool can be seen as an alternative to the calibration mode of CrysFEL's\nhdfsee. The calibration can either be based on a starting geometry that needs\nto be refined or a completely new geometry. In the latter case the initial\nconditions for the geometry are defined so that all modules are\n29px apart from each other.\n\nThe geometry calibration is supported by two modes of graphical user interfaces.\nA Qt-based and a jupyter notebook based interface.\n\n## Using the Qt-Gui\nIt is recommended to use this Gui application through the pre-installed path\non the on- and offline cluster.\n\n```bash\nsource /gpfs/exfel/sw/software/modules\nmodule load xfel\n```\nThe following optional arguments can be set via the command line:\n\n| Argument         |            | Description                                          |\n|------------------|------------|------------------------------------------------------|\n|  -h, --help |    |            |                                                      |\n|  -nb, --notebook |            | Do not start gui, create a notebook                  |\n| -no_kernel       |            | Do not try to attempt creating a xfel notebook kernel|\n| -nb_folder       |  nb_folder | Set default directory to save notebooks              |\n| -nb_file         |  nb_file   | Set file name of the notbook                         |\n|  -r, --run       |  run_dir   | The path name to a exp folder                        |\n|  -g, --geometry  |  geomfile  | Path to geometry file                                |\n|  -c, --clen      |  clen      |  Detector distance [m]                               |\n|  -e, --energy    |  energy    | Photon energy [ev]                                   |\n|  -l, --level     |  min max   | Display range for plotting                           |\n\n![Screenshot](docs/.screenshot.png)\n\nIf no run directory, using ```-r/--run```, option has been preselected a\ndirectory can to be set by clicking the Run-dir button. Train id's can be\nselected after a run has been selected. The user can either choose to display\nimages by pulses or if the signal is to week/noisy by applying a Maximum or\nMean across the entire train to all images.\nTo do so the user can just select the *Max* or *Mean* button\ninstead of the default  *Sel #*. After an image number / function has been\nselected the image can be assembled using the *Assemble* button.\nOptionally a pre-defined geometry file can be loaded using the *Load* button.\n\nAfter the image is displayed quadrants can be selected by clicking on them.\nThey can be moved by using the ```Ctrl+arrow-up/down/left/right```\nkey combination. Circles that can help to align quadrants are added\nby the *Draw Helper Objects* button. The radii of the circles an be adjusted\nusing the radius *spin box* in the top left.\n\nOnce the quadrants have been positioned a geometry file can be saved by\nusing the *Save* button.\n\n## Calibration Using Jupyter\nThe -nb, --notebook flag creates a jupyter notebook uses the home direcory.\n\n## Setup\n\n### Using Maxwell Cluster (recommended)\nIt is recommended to use the already setup application available in xfel's\nanaconda3 distirbution.\nAll packages should be available via the xfel module. At the moment\nthe module has to be activated by\n```bash\n$: module load exfel exfel_anaconda3\n$: geoAssembler\n```\n\n### Using pip\nThe software is can be installed by pip:\n```bash\n$: pip install .\n$: geoAssembler\n```\n\n### Dependencies\nIf the user doesn't want or cannot use the xfel module and wants to install the\ntool the following python packages should be available:\n - numpy\n - cfelpyutils\n - pyqtgraph\n - matplotlib\n - ipywidgets\n - pyqt5\n - pyFAI\n\n\n## Testing:\nTesting the implementation is done py pytest. To apply the test suite run\n\n```bash\n$: pytest -v geoAssembler/tests\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.xfel.eu/gitlab/dataAnalysis/geoAssembler",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "Martin Bergemann",
    "maintainer_email": "",
    "name": "geoAssembler",
    "package_url": "https://pypi.org/project/geoAssembler/",
    "platform": null,
    "project_url": "https://pypi.org/project/geoAssembler/",
    "project_urls": {
      "Homepage": "https://git.xfel.eu/gitlab/dataAnalysis/geoAssembler"
    },
    "release_url": "https://pypi.org/project/geoAssembler/0.6.0/",
    "requires_dist": [
      "cfelpyutils",
      "EXtra-data",
      "EXtra-geom",
      "ipywidgets",
      "matplotlib",
      "numpy",
      "pyFai",
      "PyQt5 (<=6.0.0,>=5.13.2)",
      "PyQt5-sip (<=13.0.0,>=12.7.0)",
      "pyqtgraph",
      "scipy",
      "xarray (>=0.14.1)",
      "ipython ; extra == 'docs'",
      "nbsphinx ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "pytest ; extra == 'test'",
      "testpath ; extra == 'test'"
    ],
    "requires_python": ">=3.4",
    "summary": "Tool to Calibrate Detector Geometry Based on Power Diffraction Pattern",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13291255,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2201204f38c40dfe015e8ce2e6f85cfefbb1bc4588ce2b146fbdeb5ab6815b22",
          "md5": "0c138e18963cd4c173fcba2c75b4e2cd",
          "sha256": "e6560fa18ca0bc26eb2423d2ed505e6eb9b55000eda19c72730cef39e0633690"
        },
        "downloads": -1,
        "filename": "geoAssembler-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c138e18963cd4c173fcba2c75b4e2cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 6433927,
        "upload_time": "2022-03-25T09:31:18",
        "upload_time_iso_8601": "2022-03-25T09:31:18.400382Z",
        "url": "https://files.pythonhosted.org/packages/22/01/204f38c40dfe015e8ce2e6f85cfefbb1bc4588ce2b146fbdeb5ab6815b22/geoAssembler-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2201204f38c40dfe015e8ce2e6f85cfefbb1bc4588ce2b146fbdeb5ab6815b22",
        "md5": "0c138e18963cd4c173fcba2c75b4e2cd",
        "sha256": "e6560fa18ca0bc26eb2423d2ed505e6eb9b55000eda19c72730cef39e0633690"
      },
      "downloads": -1,
      "filename": "geoAssembler-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c138e18963cd4c173fcba2c75b4e2cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 6433927,
      "upload_time": "2022-03-25T09:31:18",
      "upload_time_iso_8601": "2022-03-25T09:31:18.400382Z",
      "url": "https://files.pythonhosted.org/packages/22/01/204f38c40dfe015e8ce2e6f85cfefbb1bc4588ce2b146fbdeb5ab6815b22/geoAssembler-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}