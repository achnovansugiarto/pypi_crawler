{
  "info": {
    "author": "Oren Ben-Kiki",
    "author_email": "oren@ben-kiki.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "DynaMake 0.6.2 - Dynamic Make in Python\n=============================================\n\n.. image:: https://api.travis-ci.com/orenbenkiki/dynamake.svg?branch=master\n    :target: https://app.travis-ci.com/github/orenbenkiki/dynamake\n    :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/dynamake/badge/?version=latest\n    :target: https://dynamake.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nHOW\n---\n\nTo install, ``pip install --user dynamake`` (or ``sudo pip install dynamake`` if you have ``sudo``\nprivileges).\n\nThen, create a ``DynaMake.py`` file. Here is a trivial one:\n\n.. code-block:: python\n\n    from dynamake import *\n\n    @step(output='foo')\n    async def copy_bar_to_foo() -> None:\n        require('bar')\n        await shell('cp bar foo')\n\nWhich is equivalent to the ``Makefile``:\n\n.. code-block:: make\n\n    foo: bar\n        cp bar foo\n\nThe Python version is more verbose, so if this was all there was to it, ``make`` would have been preferable. However,\nDynaMake allows one to specify scripts that are impossible in ``make``, justifying the additional syntax. See the\n`tutorial <https://dynamake.readthedocs.io/en/latest/TUTORIAL.html>`_ for the details.\n\nWHY\n---\n\n    *\"What the world needs is another build tool\"*\n\n    -- Way too many people\n\nSo, why yet *another* one?\n\nDynaMake's raisons d'etre are:\n\n* First class support for fully dynamic build graphs.\n\n* Reproducible builds.\n\n* Python implementation.\n\nDynaMake was created to address a concrete need for repeatable configurable processing in the context of scientific\ncomputation pipelines, but should be applicable in wider problem domains.\n\nDynamic Build Graphs\n....................\n\nThis is a fancy way of saying that the following are supported:\n\n**Dynamic inputs**: The full set of inputs of a build step may depend on a subset of its inputs.\n\nA classic example of dynamic inputs is compiling a C source file, which actually depends on all the included header\nfiles. Therefore, for a safe reproducible build, the build tool first needs to ensure the C source file is up-to-date\n(it might be generated by some tool such as `YACC <https://en.wikipedia.org/wiki/Yacc>`_), then scan the file for\nincluded header file names, recursively ensure each of these is up-to-date and scan them for further included header\nfiles, and only once all this is done, we can tell the exact list of file dependencies for compiling the C source file\ninto an object file.\n\nDynamic inputs are supported in various ways by most build tools - some of these ways being more convoluted than others.\nDynaMake provides natural first-class support for such cases, inspired by the `shake <https://shakebuild.com/>`_ build\nsystem. This `video <https://www.youtube.com/watch?v=xYCPpXVlqFM>`_ is a nice short explanation of the approach.\n\n**Multiple outputs**: A build step may create multiple output files. A classic example of multiple outputs is ``YACC``\nwhich generates both a header file and a source file from a single parser grammar file.\n\nSurprisingly, multiple outputs are not supported by the venerable ``make`` program. However many other more modern tools\ndo support this feature.\n\n**Dynamic outputs**: The set of outputs of a build step may depend on its inputs.\n\nAn example of dynamic outputs is running a clustering step on some large data, which may produce some number of clusters\nwhich is not known in advance. Each of these clusters needs to go through some further processing. In DynaMake, one can\nspecify ``output='clusters/{*_id}.txt'`` to specify that the step will produce several output files with different\nidentifiers.\n\nDynamic outputs are not supported by the vast majority of build tools. A notable exception is\n`snakemake <https://pypi.org/project/snakemake/>`_ which provides support for some restricted cases.\n\n**Pattern Steps**: A build step may apply to a parameterized set of outputs rather than to specific outputs.\n\nRestricted forms of pattern steps have existed starting from the venerable ``make`` ``.c.o:`` and ``%.o: %.c`` pattern\nrules. However, in many tools (such as ``make``) these pattern steps are restricted to having a single parameter (in\nthis case, the base name of the output file). In the case of ``make``, these rules are also very fragile (silently\nignored when make can't create a dependency, leading to broken builds).\n\nDynaMake provides a more general form of pattern rules with an unlimited number of named parameters (e.g.\n``output='results/{*method}/outputs/{*parameters}.data'``) which allows the build step to naturally use the captured\nvalues of the parameters inside the step (e.g. ``await shell(f'{method} < {parameters} > {output()}')``.\n\nThe downside of dynamic build graphs is that they make some build tool features really hard to implement. Therefore,\nretrofitting them into an existing build tool causes some features to break. In the worst case this leads to silent\nbroken builds. For example:\n\n* The ability to aggressively optimize the case when a build needs to do nothing at all, and in general reduce the build\n  system overhead.\n\n* The ability to perform a dry run that *accurately* lists *all* the steps that will be needed to build an arbitrary\n  target.\n\n* Having a purely declarative build language, which can be more easily learned than any programming language (even\n  Python :-) and may be processed as pure data by additional tools.\n\nReproducible Builds\n...................\n\nBy definition, all  build tools will correctly rebuild outputs if any of their dependencies change. However, most build\ntools will not rebuild the outputs if the actions to create them were changed (e.g., adding/removing compilation flags).\n\nBy default, DynaMake tracks the exact actions that were used in the past to generate every output and will rebuild the\noutput if this has changed in any way. This requires DynaMake to maintain state between builds inside a sub-directory\n(by default, ``.dynamake``, but you can override it using the ``DYNAMAKE_PERSISTENT_DIR`` environment variable).\n\nThere are good reasons to avoid any such additional persistent state. DynaMake allows disabling this feature. Specifying\nthe ``--rebuild_changed_actions False`` command line flag will instruct DynaMake to rely only on the modification times\nof the input files. This of course results in less reliable rebuilds.\n\nPython\n......\n\nDynaMake is heavily inspired by ``shake``. However, ``shake`` is implemented in Haskell, which is unlikely to be\npre-installed on a typical machine, and installing it isn't trivial (especially when one has no ``sudo`` privileges).\nAlso, ``shake`` rules are also written in Haskell, which is very different from most popular programming languages.\n\nIn contrast, Python is much more likely to already be installed on a typical machine, and installing DynaMake is trivial\nusing ``pip install --user dynamake`` (or ``sudo pip install dynamake`` if you have ``sudo`` privileges). The build\nrules are written in Python, which many more people are familiar with, and is simpler to pick up.\n\nWHY NOT\n-------\n\nDynaMake's unique blend of features comes at some costs:\n\n* It is a new, immature tool. As such, it lacks some features it could/should provide, is less efficient than it could\n  be, and you may encounter the occasional bug. Hopefully this will improve with time. If you want DynaMake-like\n  features with a proven track record, you should consider ``shake``.\n\n* The provided goals, as described above, may be a poor fit for your use case.\n\n  If your build graph and configuration are truly static, consider using `Ninja <https://ninja-build.org/>`_ which tries\n  to maximize the benefits of such a static build pipeline. It is almost the opposite of DynaMake in this respect.\n\n  If your build graph is only \"mostly static\" (e.g., just needs a restricted form of dynamic inputs, such as included\n  header files), then you have (too) many other options to list here. Using the classical ``make`` is a good default\n  choice.\n\n* DynaMake is a low-level build tool, on par with ``make`` and ``ninja``.\n\n  If you are looking for a tool that comes with a lot of built-in rules for dealing with specific computer languages\n  (say, C/C++), and will automatically deal with cross-platform issues, consider using `CMake <https://cmake.org/>`_ or\n  `XMake <https://xmake.io/>`_ instead.\n\nWHAT NOT (YET)\n--------------\n\nSince DynaMake is very new, there are many features that should be implemented, but haven't been worked on yet:\n\n* Allow forcing rebuilding (some) targets.\n\n* Allow skipping generating intermediate files if otherwise no actions need to be done. This is very hard to do with a\n  dynamic build graph - probably impossible in the general case, but common cases might be possible(?)\n\n* Generate a tree (actually a DAG) of step invocations. This can be collected from the persistent state files.\n\n* Generate a visualization of the timeline of action executions showing start and end times, with resource consumption.\n  This would be similar to the profiling capabilities of ``shake``.\n\n* Allow using checksums instead of timestamps to determine if actions can be skipped, either by default or on a per-file\n  basis.\n\n\nHistory\n=======\n\n0.6.0\n-----\n\n* First release.\n\n0.6.1\n-----\n\n* Patch ``travis-ci`` build and links in ``README.rst``.\n\n0.6.2\n-----------\n\n* Improved project template.\n* Improved ``mypy`` configuration.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/orenbenkiki/dynamake.git",
    "keywords": "dynamake,make",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamake",
    "package_url": "https://pypi.org/project/dynamake/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamake/",
    "project_urls": {
      "Homepage": "https://github.com/orenbenkiki/dynamake.git"
    },
    "release_url": "https://pypi.org/project/dynamake/0.6.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Dynamic Make in Python",
    "version": "0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12013219,
  "releases": {
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "749eac87f933dae0cc80036f3c28ea771eb4282ed9e1f77cf97d0538ccffb4a3",
          "md5": "11290629efa40dd6ee3ae43cdc2c571e",
          "sha256": "801a7688f17f0bd67b1a9ee80a5b11d22b9f4e8ecdf178cb770a345383bdb3de"
        },
        "downloads": -1,
        "filename": "dynamake-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "11290629efa40dd6ee3ae43cdc2c571e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48327,
        "upload_time": "2021-11-13T15:24:02",
        "upload_time_iso_8601": "2021-11-13T15:24:02.520098Z",
        "url": "https://files.pythonhosted.org/packages/74/9e/ac87f933dae0cc80036f3c28ea771eb4282ed9e1f77cf97d0538ccffb4a3/dynamake-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "749eac87f933dae0cc80036f3c28ea771eb4282ed9e1f77cf97d0538ccffb4a3",
        "md5": "11290629efa40dd6ee3ae43cdc2c571e",
        "sha256": "801a7688f17f0bd67b1a9ee80a5b11d22b9f4e8ecdf178cb770a345383bdb3de"
      },
      "downloads": -1,
      "filename": "dynamake-0.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "11290629efa40dd6ee3ae43cdc2c571e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 48327,
      "upload_time": "2021-11-13T15:24:02",
      "upload_time_iso_8601": "2021-11-13T15:24:02.520098Z",
      "url": "https://files.pythonhosted.org/packages/74/9e/ac87f933dae0cc80036f3c28ea771eb4282ed9e1f77cf97d0538ccffb4a3/dynamake-0.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}