{
  "info": {
    "author": "baldulin",
    "author_email": "baldulin@systemli.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Ackermann - Command/Config Library\n\nThis library simplifies the startup process of a more complicated python project with multiple\nsubcommands, a complicated configuration, aswell as certain targets that need to be run\nor initialized before starting commands in a specific order.\n\nThe point of this library is to easily provide a way to setup a commandline interface using\n`logging` and `argparse` and `contextvars`  that looks like this:\n\n```bash\n\nmy-programm -vvv -c <config_file.py> my-custom-command --my-custom-options\n\n```\n\nWhile providing a default way of starting the programm you might implemented way. Just have a look\nat `ackermann.units`. The main purpose of this library is just to provide an extentable way to\nimplement commands and startup targets.\n\n\n## Usage\n\nThe most simple setup is just to call `ackermann.run` in your `__main__` file, like so:\n\n```python\nfrom ackermann import run\nfrom ackermann.units import run_command\n\nrun(targets=[run_command])\n```\n\nNow if you execute your module with `python -m <module>` you can specify a config with `-c`\nchange the verbosity level with `-v` and specify a subcommand.\n\n\n## Commands\n\nIf you want to write your own command you can do so:\n\n```python\nfrom ackermann import Command, Config\nfrom argparse import ArgumentParser\nfrom time import sleep\n\n\nclass MyCommand(Command):\n    name = \"my-command\"\n    @classmethod\n    def get_arguments(cls, parser: ArgumentParser):\n        parser.add_argument(\"-s\", \"--skip\", action=\"store_true\")\n\n    def run(self, config: Config):\n        if config[\"ARGS\"].skip:\n            print(\"You wanted to skip\")\n        else:\n            print(\"We are doing it as you are not skipping\") \n            sleep(1000)\n```\n\nIf you run your program as suggested you are able to run this command with:\n\n```bash\n\npython -m <project> my-command -s\n\n```\n\n\nThe same works for `async` commands aswell:\n\n\n```python\nfrom ackermann import Command, Config\nfrom argparse import ArgumentParser\nfrom asyncio import sleep\n\n\nclass MyAsyncCommand(Command):\n    name = \"my-async-command\"\n    is_async = True\n\n    @classmethod\n    def get_arguments(cls, parser: ArgumentParser):\n        parser.add_argument(\"-s\", \"--skip\", action=\"store_true\")\n\n    async def async_run(self, config: Config):\n        if config[\"ARGS\"].skip:\n            print(\"You wanted to skip\")\n        else:\n            print(\"We are doing it as you are not skipping\") \n            await sleep(1000)\n```\n\nrunning this command would look like this:\n\n```bash\n\npython -m <project> my-async-command -s\n```\n\n\n## Targets / Units\n\nMore complicated commands might want to reuse certain parts of code to initialize their project in\nthe correct way. For this `ackermann` has `ConfigUnit`s. These work pretty similiar to context\nmanagers around your command.\n\nA unit might be defined like this:\n\n```python\n\nfrom ackermann import Config, config_unit\n\n@config_unit\nasync def do_sth(config: Config):\n    print(\"I want to do sth before my command starts\")\n    yield\n    print(\"Now I need to cleanup as the command finished\")\n```\n\nThis unit will not run by default, but it must be explicitly stated in the command. Using the\n`targets` variable. Config units might depend on each other, might conflict with one another or must\nbe run in a certain order.\nThey might also force the programm to be run in an async context or on multiple processors.\n\n\n## Signals\n\nIf your programm needs to signal certain parts of code about it's state you might also add signals.\nTo your config by default before executing a command ackermann will signal `ready` and after\nexiting a command it will signal `stopping`. This might be used to signal systemd in case of using\na notify service.\n\n\n## Config Variables\n\nAll commands, units and signals are called with the current instance of `Config` which itself\nstores configuration variables that might be stored in a python module supplied with the `-c` flag.\nIf you want to explicitly tell the programm about these variables you can use the small wrapper\n`ackermann.ConfigVar` around `contextvars.ContextVar` which allows you to specify the format,\ntype, and default value for a config variable.\n\nThese variables might then be imported in your programm without worrying where the get the correct\nvalue like so:\n\n```python\nfrom ackermann import ConfigVar\n\nconfig_my_config_var = ConfigVar(\"MY_CONFIG_VAR\", description=\"Does something\", type=int, default=0)\n\n# At some point in the code\n\ndef do_sth():\n    my_config_var_value = config_my_config_var.get()\n```\n\nOne benefit of using this interface is that you can easily check the variables set when starting the\nprogramm with the `-V` flag.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/baldulin/ackermann",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ackermann",
    "package_url": "https://pypi.org/project/ackermann/",
    "platform": "",
    "project_url": "https://pypi.org/project/ackermann/",
    "project_urls": {
      "Bug Tracker": "https://github.com/baldulin/ackermann",
      "Homepage": "https://github.com/baldulin/ackermann"
    },
    "release_url": "https://pypi.org/project/ackermann/1.0.0/",
    "requires_dist": [
      "systemd-python ; extra == 'systemd'"
    ],
    "requires_python": ">=3.6",
    "summary": "A project cli command and config library",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10463271,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52eb0638304ebae459f14a7d27585f2ae842580ea4d7c62e942986e2afbd987d",
          "md5": "e234441cefb711b877e69e46a0732c43",
          "sha256": "82a48972dc828c204ce0aa8893c9a2fbc22e046e7b25069fbfa395bcbb0a1446"
        },
        "downloads": -1,
        "filename": "ackermann-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e234441cefb711b877e69e46a0732c43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52300,
        "upload_time": "2021-05-25T11:54:03",
        "upload_time_iso_8601": "2021-05-25T11:54:03.321942Z",
        "url": "https://files.pythonhosted.org/packages/52/eb/0638304ebae459f14a7d27585f2ae842580ea4d7c62e942986e2afbd987d/ackermann-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7786ebcc5c5eed1b42ed3e66d018c942026370e69c69b355b19f92ba4574d623",
          "md5": "02482b33474ff17eb9092948cde7ac1f",
          "sha256": "16da50d8d73975a999fa1751d80e20a2c3571adafc7b039d74ff5ba7a5f3dc46"
        },
        "downloads": -1,
        "filename": "ackermann-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02482b33474ff17eb9092948cde7ac1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20819,
        "upload_time": "2021-05-25T11:54:04",
        "upload_time_iso_8601": "2021-05-25T11:54:04.955272Z",
        "url": "https://files.pythonhosted.org/packages/77/86/ebcc5c5eed1b42ed3e66d018c942026370e69c69b355b19f92ba4574d623/ackermann-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52eb0638304ebae459f14a7d27585f2ae842580ea4d7c62e942986e2afbd987d",
        "md5": "e234441cefb711b877e69e46a0732c43",
        "sha256": "82a48972dc828c204ce0aa8893c9a2fbc22e046e7b25069fbfa395bcbb0a1446"
      },
      "downloads": -1,
      "filename": "ackermann-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e234441cefb711b877e69e46a0732c43",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 52300,
      "upload_time": "2021-05-25T11:54:03",
      "upload_time_iso_8601": "2021-05-25T11:54:03.321942Z",
      "url": "https://files.pythonhosted.org/packages/52/eb/0638304ebae459f14a7d27585f2ae842580ea4d7c62e942986e2afbd987d/ackermann-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7786ebcc5c5eed1b42ed3e66d018c942026370e69c69b355b19f92ba4574d623",
        "md5": "02482b33474ff17eb9092948cde7ac1f",
        "sha256": "16da50d8d73975a999fa1751d80e20a2c3571adafc7b039d74ff5ba7a5f3dc46"
      },
      "downloads": -1,
      "filename": "ackermann-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "02482b33474ff17eb9092948cde7ac1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20819,
      "upload_time": "2021-05-25T11:54:04",
      "upload_time_iso_8601": "2021-05-25T11:54:04.955272Z",
      "url": "https://files.pythonhosted.org/packages/77/86/ebcc5c5eed1b42ed3e66d018c942026370e69c69b355b19f92ba4574d623/ackermann-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}