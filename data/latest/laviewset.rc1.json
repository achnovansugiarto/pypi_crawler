{
  "info": {
    "author": "Milad M. Nasrollahi",
    "author_email": "milad.m.nasr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "### LAViewSet \n#### A Lyte (light) Asynchronous ViewSet.\n\nA ViewSets package, a-la Django Rest Framework - ViewSets, built on top of \n`aiohttp.web`.\n# *********************************************************\n\n\n### Getting Started\n\n---\n\n#### Quick Start\n\n```\n# laviewset_intro.py\n\nfrom aiohttp import web\nfrom laviewset import Route, ViewSet, HttpMethods\n\napp = web.Application()\nbase_route = Route.create_base(app.router)      # '/'\n\n\nclass ListingsViewSet(ViewSet):\n\n    route = base_route.extend('listings')  # '/listings'\n\n    @route('/', HttpMethods.GET)\n    async def list(self, request):\n        assert isinstance(request, web.Request)\n        return web.Response(text='GET at '/listings')\n\n\nweb.run_app(app)\n```\n\nFor a step-by-step walkthrough, continue reading below. \n\nOr, [skip ahead](#cheatsheet) for a\nmore thorough look at fully extending `laviewset.ViewSet`.\n\n___\n\n#### Intro\nThe first step is to create a **base route** by passing the `aiohttp.web.UrlDispatcher` of your \ncurrent application into `Route.create_base`:\n\n```\n# laviewset_intro.py\n\nfrom aiohttp import web\nfrom laviewset import Route\n\napp = web.Application()\nbase_route = Route.create_base(app.router)      # '/'\n```\n\n`base_route` can then be extended into resources that you want to include in your ViewSets:\n\n```\nlistings_route = base_route.extend('listings')  # '/listings'\nevents_route = base_route.extend('/events')     # '/events'\n\n# We can further extend a resource\nsessions_route = listings.extend('sessions')    # '/listings/sessions'\n```\n\nNow that we have the resource we want a ViewSet to manage, we can create our ViewSet. This is done \nby subclassing `laviewset.ViewSet`, including your route as the `route` attribute, and overriding \nthe ViewSet methods and/or including your custom views:\n\n```\n# laviewset_intro.py\n\nfrom aiohttp import web\nfrom laviewset import Route, ViewSet, HttpMethods\n\napp = web.Application()\nbase_route = Route.create_base(app.router)      # '/'\n\n\nclass ListingsViewSet(ViewSet):\n\n    route = base_route.extend('listings')  # '/listings'\n    serializer = 'some_serializer'\n\n    @route('/', HttpMethods.GET)\n    async def list(self, request):\n        ...\n        return web.Response(text='GET at /listings with {self.serializer}')\n\n\nweb.run_app(app)\n```\n\nNote, the code above is similar to the following:\n\n```\nfrom aiohttp import web\n\n\nserializer = 'some_serializer'\n\ndef handler(request):\n    ...\n    return web.Response(text='GET at /listings with {self.serializer}')\n\n\napp = web.Application()\napp.add_routes([web.get('/', handler)])\nweb.run_app(app)\n```\n\n___\n\n#### ViewSet methods\n\n##### @route decorator\nIn order to create a view on the ViewSet, the `@route` decorator is required. Since each view \nis essentially a wrapper over [`aiohttp.web.route`](https://github.com/aio-libs/aiohttp/blob/master/aiohttp/web_routedef.py#L105), \nthe arguments passed into the decorator \n correlate with the arguments for `web.route`: the first argument is the `path`, \n the second argument is the HTTP method for the view (`method`),\nany other keyword argument passed into the decorator will be included as `kwargs` to \nthe `web.route` method, and finally, the view itself will be the `handler`.\n\n```\n    @route('/', HttpMethods.GET, z=20, f='abc')     # z=20 and f='abc' will be\n    async def list(self, request):                  # passed into web.route\n        ...\n        return web.Response(text='GET at '/listings')\n```\n\nSince the idea behind `laviewset` is an asynchronous ViewSet a-la [Django Rest Framework - ViewSets](https://www.django-rest-framework.org/api-guide/viewsets/), \nthe methods `list`, `create`, `retrieve`, `update`, `partial_update`, and `delete` are included on \nthe base class `laviewset.ViewSet`. However, unlike Rest Framework, they are not complete: the user still needs \nto declare the view using the `@route` decorator. One reason for this design decision is to allow more flexibility to the \nuser, e.g. to decide on what `kwargs` to pass into `web.route`. Trying to access any of the aforementioned methods \nwithout overriding and completing them will return a `404NotFound`.\n\n##### View method signatures\nThe signatures of the views are important. Each view signature requires at least the `self` and `request` arguments. \nThe `request` is in fact a `web.Request` object, and can be accessed as such: `request.query`, `request.rel_url`, etc\n are all accessible. If the `path` declared in the `@route` decorator is a \n[variable path](https://docs.aiohttp.org/en/stable/web_quickstart.html#variable-resources), then the `{identifier}` should \nbe included in the view signature as a `KEYWORD_ONLY` argument **and** have the same name as the \nidentifier included in the path, otherwise an `laviewset.ViewSignatureError` will be raised:\n\n```\n# Correct\n\n    @route(r'/{pk:\\d+}', HttpMethods.GET)  # /listings/123\n    async def retrieve(self, request, *, pk):   # `pk` is KEYWORD_ONLY and\n        assert pk == 123                        # `pk` is same as identifier\n        return web.Response(text=f'retrieved {pk}')\n\n# Incorrect\n\n    @route(r'/{pk:\\d+}', HttpMethods.GET)\n    async def retrieve(self, request, pk):      # `pk` is not KEYWORD_ONLY\n        ...\n        return web.Response(text=f'retrieved {pk}')\n\n# Incorrect\n\n    @route(r'/{fk:\\d+}', HttpMethods.GET)\n    async def retrieve(self, request, *, pk):  # `pk` != `fk`\n        ...\n        return web.Response(text=f'retrieved {pk}')\n\n```\n\n___ \n\n##### Custom views\n\nCustom views can also be defined. Simply wrap a method with the `@route` decorator\nand follow the rules described above:\n\n```\n    # Custom GET view\n    # '/listings/123/events/Coachella'\n    @route(r'/{pk:\\d+}/events/{name:\\w+}', HttpMethods.GET)\n    async def custom_get(self, request, *, pk, name):\n        assert pk == 123\n        assert name == 'Coachella'\n        return web.Response(text=f'GET at /listings/{pk}/events/{name}')\n\n    # Custom DELETE view\n    # '/listings/custom_delete/123/Coachella'\n    @route(r'/custom_delete/{pk:\\d+}/{name:\\w+}', HttpMethods.DELETE)\n    async def custom_delete(self, request, *, pk, name):\n        assert pk == 123\n        assert name == 'Coachella'\n        return web.Response(text=f'Deleting something to do with {pk} {name}')\n```\n\n> **_A short note on errors:_**  \n> All `laviewset` errors are raised \"statically\", i.e. before your server is up and running. \n\n___\n\n#### Project structure\n\nSince ViewSets do not need to be initialized, it is important to let the module your app is \nrunning in know about each `ViewSet`. Therefore, for more complex project structures, the following\nstructure is recommended:\n\n```\nproj/\n├── package/\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── server.py\n│   ├── app1/\n│   │   └── views.py\n│   └── app2/\n│       └── views.py\n├── conf.py\n└── README.md\n```\n\n```\n# package/server.py\n\nfrom aiohttp import web\nfrom laviewset import Route\n\napp = web.Application()\nbase_route = Route.create_base(app.router)\n\n\ndef run_server(app: web.Application) -> None:\n    web.run_app(app, host='localhost', port=8000)\n\n```\n\n```\n# package/app1/views.py\n\nfrom laviewset import ViewSet\nfrom ..server import base_route\n...\n```\n\n```\n# package/app2/views.py\n\nfrom laviewset import ViewSet\nfrom ..server import base_route\n...\n```\n\n```\n# package/__init__.py\n\n# Now `server.app` knows about `ViewSet`s.\nfrom .app1 import views\nfrom .app2 import views\n```\n\n```\n# package/__main__.py\n\nfrom .server import app, run_server\n\nrun_server(app)\n```\n\n# *********************************************************\n\n### [Cheatsheet](#cheatsheet)\n```\n# quicksetup.py\n\nfrom aiohttp import web\nfrom laviewset import Route, ViewSet, HttpMethods\n\napp = web.Application()\nbase_route = Route.create_base(app.router)\n\n\nclass ListingsViewSet(ViewSet):\n\n    route = base_route.extend('listings')  # '/listings'\n\n    @route('/', HttpMethods.GET)\n    async def list(self, request):\n        # GET at '/listings'\n        ...\n        return web.Response(...)\n\n    @route(r'/{pk:\\d+}', HttpMethods.GET)\n    async def retrieve(self, request, *, pk):\n        # GET at '/listings/{pk}'\n        # where the dynamic value {pk} can be accessed \n        # through `pk`.\n        ...\n        return web.Response(...)\n\n    @route('/', HttpMethods.POST)\n    async def create(self, request):\n        # POST at '/listings'\n        data = await request.json()\n        return web.Response(text=f'Metrics Created data: {data}')\n\n    @route(r'/{pk:\\d+}', HttpMethods.DELETE)\n    async def delete(self, request, *, pk):\n        # DELETE at '/listings/{pk}'\n        ...\n        return web.Response(...)\n\n    @route(r'/{pk:\\d+}', HttpMethods.PUT)\n    async def update(self, request, *, pk):\n        # PUT at '/listings/{pk}'\n        ...\n        return web.Response(...)\n\n    @route(r'/{pk:\\d+}', HttpMethods.PATCH)\n    async def partial_update(self, request, *, pk):\n        # PATCH at '/listings/{pk}'\n        ...\n        return web.Response(...)\n\n    @route(r'/{pk:\\d+}/do_thing/{name:\\w+}', HttpMethods.GET)\n    async def custom_view(self, request, *, pk, name):\n        # GET at '/listings/{pk}/do_thing/{name}'\n        ...\n        return web.Response(...)\n```\n\n# *********************************************************\n\n### Requirements\n\n* Python >= 3.8\n* aiohttp==3.6.2\n\n# *********************************************************\n\n### Installation\n\nThis package does not exist on PyPI yet, so the only way to \ninstall it is through `LAViewSet/setup.py`.\n\n# *********************************************************\n\n### License\n`laviewset` is offered under the MIT license. \n\n This package uses the [`aiohttp`](https://github.com/aio-libs/aiohttp) package, which is distributed under the Apache 2 license.\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Algebra8/LAViewSet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LAViewSet",
    "package_url": "https://pypi.org/project/LAViewSet/",
    "platform": "",
    "project_url": "https://pypi.org/project/LAViewSet/",
    "project_urls": {
      "Homepage": "https://github.com/Algebra8/LAViewSet"
    },
    "release_url": "https://pypi.org/project/LAViewSet/0.0.1/",
    "requires_dist": [
      "aiohttp"
    ],
    "requires_python": ">=3.7",
    "summary": "A Lyte (light) Async Viewset.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8742824,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cd108670843b467247818e56f86818c53c13d533f849558c254e91ed7a4ee4d",
          "md5": "caf63c43c577a2e22702d4b77cc928a9",
          "sha256": "2c26913098f16d82b23a2da2770d7df174bdf6e7b04b778d6d79cd22df048a8c"
        },
        "downloads": -1,
        "filename": "LAViewSet-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "caf63c43c577a2e22702d4b77cc928a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10074,
        "upload_time": "2020-11-25T00:39:15",
        "upload_time_iso_8601": "2020-11-25T00:39:15.280307Z",
        "url": "https://files.pythonhosted.org/packages/2c/d1/08670843b467247818e56f86818c53c13d533f849558c254e91ed7a4ee4d/LAViewSet-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "facb46026c866042b0964d218da6242d8a79bfbcda872e42208817f9a19a9757",
          "md5": "bc1dc5855ab51c4d712e1222e6aac7b7",
          "sha256": "17e6a129fb96dbdf496ddd95b89c56e2405ad5decd4b7d0e09c394f699727de8"
        },
        "downloads": -1,
        "filename": "LAViewSet-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc1dc5855ab51c4d712e1222e6aac7b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9473,
        "upload_time": "2020-11-25T00:39:16",
        "upload_time_iso_8601": "2020-11-25T00:39:16.317058Z",
        "url": "https://files.pythonhosted.org/packages/fa/cb/46026c866042b0964d218da6242d8a79bfbcda872e42208817f9a19a9757/LAViewSet-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cd108670843b467247818e56f86818c53c13d533f849558c254e91ed7a4ee4d",
        "md5": "caf63c43c577a2e22702d4b77cc928a9",
        "sha256": "2c26913098f16d82b23a2da2770d7df174bdf6e7b04b778d6d79cd22df048a8c"
      },
      "downloads": -1,
      "filename": "LAViewSet-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "caf63c43c577a2e22702d4b77cc928a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10074,
      "upload_time": "2020-11-25T00:39:15",
      "upload_time_iso_8601": "2020-11-25T00:39:15.280307Z",
      "url": "https://files.pythonhosted.org/packages/2c/d1/08670843b467247818e56f86818c53c13d533f849558c254e91ed7a4ee4d/LAViewSet-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "facb46026c866042b0964d218da6242d8a79bfbcda872e42208817f9a19a9757",
        "md5": "bc1dc5855ab51c4d712e1222e6aac7b7",
        "sha256": "17e6a129fb96dbdf496ddd95b89c56e2405ad5decd4b7d0e09c394f699727de8"
      },
      "downloads": -1,
      "filename": "LAViewSet-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bc1dc5855ab51c4d712e1222e6aac7b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9473,
      "upload_time": "2020-11-25T00:39:16",
      "upload_time_iso_8601": "2020-11-25T00:39:16.317058Z",
      "url": "https://files.pythonhosted.org/packages/fa/cb/46026c866042b0964d218da6242d8a79bfbcda872e42208817f9a19a9757/LAViewSet-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}