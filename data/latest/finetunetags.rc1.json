{
  "info": {
    "author": "Charlotte Parthoens",
    "author_email": "charlotte.parthoens@1gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NERDA <img src=\"https://raw.githubusercontent.com/ebanalyse/NERDA/main/logo.png\" align=\"right\" height=250/>\n\n![Build status](https://github.com/ebanalyse/NERDA/workflows/build/badge.svg)\n[![codecov](https://codecov.io/gh/ebanalyse/NERDA/branch/main/graph/badge.svg?token=OB6LGFQZYX)](https://codecov.io/gh/ebanalyse/NERDA)\n![PyPI](https://img.shields.io/pypi/v/NERDA.svg)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/NERDA?color=green)\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n\nNot only is `NERDA` a mesmerizing muppet-like character. `NERDA` is also\na python package, that offers a slick easy-to-use interface for fine-tuning \npretrained transformers for Named Entity Recognition\n (=NER) tasks. \n\nYou can also utilize `NERDA` to access a selection of *precooked* `NERDA` models, \n that you can use right off the shelf for NER tasks.\n\n`NERDA` is built on `huggingface` `transformers` and the popular `pytorch`\n framework.\n\n## Installation guide\n`NERDA` can be installed from [PyPI](https://pypi.org/project/NERDA/) with \n\n```\npip install NERDA\n```\n\nIf you want the development version then install directly from [GitHub](https://github.com/ebanalyse/NERDA).\n\n## Named-Entity Recogntion tasks\nNamed-entity recognition (NER) (also known as (named) entity identification, \nentity chunking, and entity extraction) is a subtask of information extraction\nthat seeks to locate and classify named entities mentioned in unstructured \ntext into pre-defined categories such as person names, organizations, locations, medical codes, time expressions, quantities, monetary values, percentages, etc.<sup>[1]</sup>\n\n[1]: https://en.wikipedia.org/wiki/Named-entity_recognition\n\n### Example Task:\n\n**Task** \n\nIdentify person names and organizations in text:\n\n*Jim bought 300 shares of Acme Corp.*\n\n**Solution**\n\n| **Named Entity**   | **Type**              | \n|--------------------|-----------------------|\n| 'Jim'              | Person                |\n| 'Acme Corp.'       | Organization          |\n\nRead more about NER on [Wikipedia](https://en.wikipedia.org/wiki/Named-entity_recognition).\n\n## Train Your Own `NERDA` Model\n\nSay, we want to fine-tune a pretrained [Multilingual BERT](https://huggingface.co/bert-base-multilingual-uncased) transformer for NER in English.\n\nLoad package.\n\n```python\nfrom NERDA.models import NERDA\n```\n\nInstantiate a `NERDA` model (*with default settings*) for the \n[`CoNLL-2003`](https://www.clips.uantwerpen.be/conll2003/ner/) \nEnglish NER data set. \n\n```python\nfrom NERDA.datasets import get_conll_data\nmodel = NERDA(dataset_training = get_conll_data('train'),\n              dataset_validation = get_conll_data('valid'),\n              transformer = 'bert-base-multilingual-uncased')\n```\n\nBy default the network architecture is analogous to that of the models in [Hvingelby et al. 2020](http://www.lrec-conf.org/proceedings/lrec2020/pdf/2020.lrec-1.565.pdf). \n\nThe model can then be trained/fine-tuned by invoking the `train` method, e.g.\n\n```python\nmodel.train()\n```\n\n**Note**: this will take some time depending on the dimensions of your machine \n(if you want to skip training, you can go ahead and use one of the models, \nthat we have already precooked for you in stead).\n\nAfter the model has been trained, the model can be used for predicting \nnamed entities in new texts.\n\n```python\n# text to identify named entities in.\ntext = 'Old MacDonald had a farm'\nmodel.predict_text(text)\n([['Old', 'MacDonald', 'had', 'a', 'farm']], [['B-PER', 'I-PER', 'O', 'O', 'O']])\n```\nThis means, that the model identified 'Old MacDonald' as a *PER*son.\n\nPlease note, that the `NERDA` model configuration above was instantiated \nwith all default settings. You can however customize your `NERDA` model\nin a lot of ways:\n\n- Use your own data set (finetune a transformer for any given language)\n- Choose whatever transformer you like\n- Set all of the hyperparameters for the model\n- You can even apply your own Network Architecture \n\nRead more about advanced usage of `NERDA` in the [detailed documentation](https://ebanalyse.github.io/NERDA/workflow).\n\n## Use a Precooked `NERDA` model\n\nWe have precooked a number of `NERDA` models for Danish and English, that you can download \nand use right off the shelf. \n\nHere is an example.\n\nInstantiate a multilingual BERT model, that has been finetuned for NER in Danish,\n`DA_BERT_ML`.\n\n```python\nfrom NERDA.precooked import DA_BERT_ML()\nmodel = DA_BERT_ML()\n```\n\nDown(load) network from web:\n\n```python\nmodel.download_network()\nmodel.load_network()\n```\n\nYou can now predict named entities in new (Danish) texts\n\n```python\n# (Danish) text to identify named entities in:\n# 'Jens Hansen har en bondegård' = 'Old MacDonald had a farm'\ntext = 'Jens Hansen har en bondegård'\nmodel.predict_text(text)\n([['Jens', 'Hansen', 'har', 'en', 'bondegård']], [['B-PER', 'I-PER', 'O', 'O', 'O']])\n```\n\n### List of Precooked Models\n\nThe table below shows the precooked `NERDA` models publicly available for download.\n\n| **Model**       | **Language** | **Transformer**   | **Dataset** | **F1-score** |  \n|-----------------|--------------|-------------------|---------|-----|\n| `DA_BERT_ML`    | Danish       | [Multilingual BERT](https://huggingface.co/bert-base-multilingual-uncased) | [DaNE](https://github.com/alexandrainst/danlp/blob/master/docs/docs/datasets.md#dane) | 82.8  | \n`DA_ELECTRA_DA` | Danish       | [Danish ELECTRA](https://huggingface.co/Maltehb/-l-ctra-danish-electra-small-uncased) | [DaNE](https://github.com/alexandrainst/danlp/blob/master/docs/docs/datasets.md#dane) | 79.8             |\n| `EN_BERT_ML`    | English      | [Multilingual BERT](https://huggingface.co/bert-base-multilingual-uncased)| [CoNLL-2003](https://www.clips.uantwerpen.be/conll2003/ner/) | 90.4              |\n| `EN_ELECTRA_EN` | English       | [English ELECTRA](https://huggingface.co/google/electra-small-discriminator) | [CoNLL-2003](https://www.clips.uantwerpen.be/conll2003/ner/) | 89.1             |\n\n**F1-score** is the micro-averaged F1-score across entity tags and is \nevaluated on the respective test sets (that have not been used for training nor\nvalidation of the models).\n\nNote, that we have not spent a lot of time on actually fine-tuning the models,\nso there could be room for improvement. If you are able to improve the models,\nwe will be happy to hear from you and include your `NERDA` model.\n\n### Model Performance\n\nThe table below summarizes the performance (F1-scores) of the precooked `NERDA` models.\n\n| **Level**     | `DA_BERT_ML` | `DA_ELECTRA_DA` | `EN_BERT_ML` | `EN_ELECTRA_EN` |\n|---------------|--------------|-----------------|--------------|-----------------|\n| B-PER         | 93.8         | 92.0            | 96.0         | 95.1            |      \n| I-PER         | 97.8         | 97.1            | 98.5         | 97.9            |   \n| B-ORG         | 69.5         | 66.9            | 88.4         | 86.2            |     \n| I-ORG         | 69.9         | 70.7            | 85.7         | 83.1            |   \n| B-LOC         | 82.5         | 79.0            | 92.3         | 91.1            |     \n| I-LOC         | 31.6         | 44.4            | 83.9         | 80.5            |     \n| B-MISC        | 73.4         | 68.6            | 81.8         | 80.1            |     \n| I-MISC        | 86.1         | 63.6            | 63.4         | 68.4            |   \n| **AVG_MICRO** | 82.8         | 79.8            | 90.4         | 89.1            |      \n| **AVG_MACRO** | 75.6         | 72.8            | 86.3         | 85.3            |\n\n## 'NERDA'?\n'`NERDA`' originally stands for *'Named Entity Recognition for DAnish'*. However, this\nis somewhat misleading, since the functionality is no longer limited to Danish. \nOn the contrary it generalizes to all other languages, i.e. `NERDA` supports \nfine-tuning of transformers for NER tasks for any arbitrary \nlanguage.\n\n## Background\n`NERDA` is developed as a part of [Ekstra Bladet](https://ekstrabladet.dk/)’s activities on Platform Intelligence in News (PIN). PIN is an industrial research project that is carried out in collaboration between the [Technical University of Denmark](https://www.dtu.dk/), [University of Copenhagen](https://www.ku.dk/) and [Copenhagen Business School](https://www.cbs.dk/) with funding from [Innovation Fund Denmark](https://innovationsfonden.dk/). The project runs from 2020-2023 and develops recommender systems and natural language processing systems geared for news publishing, some of which are open sourced like `NERDA`.\n\n## Shout-outs\n- Thanks to [Alexandra Institute](https://alexandra.dk/) for with the [`danlp`](https://github.com/alexandrainst/danlp) package to have encouraged us to develop this package.\n- Thanks to [Malte Højmark-Bertelsen](https://www.linkedin.com/in/malte-h%C3%B8jmark-bertelsen-9a618017b/) and [Kasper Junge](https://www.linkedin.com/in/kasper-juunge/?originalSubdomain=dk) for giving feedback on `NERDA`.\n\n## Read more\nThe detailed documentation for `NERDA` including code references and\nextended workflow examples can be accessed [here](https://ebanalyse.github.io/NERDA/).\n\n## Contact\nWe hope, that you will find `NERDA` useful.\n\nPlease direct any questions and feedbacks to\n[us](mailto:lars.kjeldgaard@eb.dk)!\n\nIf you want to contribute (which we encourage you to), open a\n[PR](https://github.com/ebanalyse/NERDA/pulls).\n\nIf you encounter a bug or want to suggest an enhancement, please \n[open an issue](https://github.com/ebanalyse/NERDA/issues).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ebanalyse/NERDA",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "finetunetags",
    "package_url": "https://pypi.org/project/finetunetags/",
    "platform": "",
    "project_url": "https://pypi.org/project/finetunetags/",
    "project_urls": {
      "Homepage": "https://github.com/ebanalyse/NERDA"
    },
    "release_url": "https://pypi.org/project/finetunetags/0.8.7/",
    "requires_dist": [
      "torch (<=1.4)",
      "transformers (>=4)",
      "sklearn",
      "nltk",
      "pandas",
      "progressbar",
      "pyconll"
    ],
    "requires_python": ">=3.6",
    "summary": "A Framework for Finetuning Transformers for Named-Entity Recognition",
    "version": "0.8.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10161240,
  "releases": {
    "0.8.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93bb56ed160bffed67a289841ed02b923c5ed4d6d66907138083605ca95009db",
          "md5": "764d77f2c8dc5e34c55db343427aa95b",
          "sha256": "a7116497f26ad564da6f9cf93f267610408af3f5e8cd544c89569ff26b35bdc5"
        },
        "downloads": -1,
        "filename": "finetunetags-0.8.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "764d77f2c8dc5e34c55db343427aa95b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22237,
        "upload_time": "2021-04-24T20:14:59",
        "upload_time_iso_8601": "2021-04-24T20:14:59.364866Z",
        "url": "https://files.pythonhosted.org/packages/93/bb/56ed160bffed67a289841ed02b923c5ed4d6d66907138083605ca95009db/finetunetags-0.8.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93bb56ed160bffed67a289841ed02b923c5ed4d6d66907138083605ca95009db",
        "md5": "764d77f2c8dc5e34c55db343427aa95b",
        "sha256": "a7116497f26ad564da6f9cf93f267610408af3f5e8cd544c89569ff26b35bdc5"
      },
      "downloads": -1,
      "filename": "finetunetags-0.8.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "764d77f2c8dc5e34c55db343427aa95b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22237,
      "upload_time": "2021-04-24T20:14:59",
      "upload_time_iso_8601": "2021-04-24T20:14:59.364866Z",
      "url": "https://files.pythonhosted.org/packages/93/bb/56ed160bffed67a289841ed02b923c5ed4d6d66907138083605ca95009db/finetunetags-0.8.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}