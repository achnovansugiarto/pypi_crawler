{
  "info": {
    "author": "Michael Lustenberger",
    "author_email": "mic@inofix.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "ardu-report\n===========\n\n.. .. image:: https://travis-ci.org/zwischenloesung/ardu-report.svg?branch=master\n       :target: https://travis-ci.org/zwischenloesung/ardu-report\n\nPython CLI to report back the sensor data from our arduino(s). See\n(https://pypi.org/project/ardu-report-lib/ / https://github.com/inofix/ardu-report-lib)\nfor the main library.\n\nDependencies, Requirements\n--------------------------\n\n * Unix/Linux\n\n * Python 2/3\n\n  - tested against: 2.7 and 3.5 (main lib has unittests and Travis-CI)\n\n  - this is just a frontend for 'ardu-report-lib' (main dependency)\n\n  - see requrements.txt for further dependencies\n\nBasic Idea\n----------\n\nFor now we have one arduino reporting sensor values back over the serial line.\nOn the other end there is a raspberry pi collecting the data. The data is then processed and either just printed to the console or a file, or sent over mobile or wired/wireless network to, e.g., a webserver..\n\nIf more than one arduino are connected. For each one of them the data processing can be configured individually.\n\nUse it for Your Project?\n------------------------\n\nI am rewriting the input parser to accept any JSON schema following\nthe meta schema to control the object index names. As it really only\nneeds some sort of identifier and a value, there should not be too\nmany obstacles to use it for your project too.\n\nSee the 'schema'\nfolder for details on the implementation.\n\nThe 'example' folder contains JSON file that\nvalidates against the schema and the tests/test\\_json.py has\na test run for both the input.json against the schema and the\nschema against the meta-schema.. Furthermore there is an\nextended-input.json that validates against an example\ncustomized schema (extended-input-schema.json), with itself\nstill validates against the meta-schema.json.\n\n\nExample Data for Python Processing\n----------------------------------\n\nINPUT: JSON from the arduino over the serial line\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are two examples under the 'examples' folder.\n\nThe simple 'input.json'\nshows two example measurements.\nThe \"id\" and \"value\" entries in the object are\nmandatory. The \"unit\" and \"threshold\" are interpreted for the stdout\nlog. Any other entry will just be passed on to the output (except for\nthe sdtout log case).\n\nNote that no timestamp joins the data. Most of the time there is no\nclock source available to the dump sensor controller. The timestamp\nis added in the output below though. If a timestamp is available\nin the input, it can still be passed on of course.\n\nSee the 'extended-input.json' for an example with\nmore enries and custom naming.\n\n\nOUTPUT: Target JSON from the raspberry pi for the use in e.g. a web app\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBased on the URL specified, the data is appended to a file (\"file://\") as\na continuing list of JSON objects containing sensor value entries or\nsent as a complete JSON array to a web server (\"http://\" / \"https://\")\nas a POST request. If the URL string is empty, the data is just printed in\ntext form to stdout.\n\nExample JSON output can be found under the examples folder:\n\n * output.json - default\n\n * custom-output.json - if an output JSON scheme is defined, the\n   entries can be translated. The output JSON must validate against\n   the meta schema..\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/inofix/ardu-report",
    "keywords": "arduino sensor json serial",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ardu-report",
    "package_url": "https://pypi.org/project/ardu-report/",
    "platform": "",
    "project_url": "https://pypi.org/project/ardu-report/",
    "project_urls": {
      "Homepage": "https://github.com/inofix/ardu-report"
    },
    "release_url": "https://pypi.org/project/ardu-report/1.0.0/",
    "requires_dist": [
      "ardu-report-lib",
      "configargparse"
    ],
    "requires_python": "",
    "summary": "Get sensor data over the serial line and send it to an URL (JSON).",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3239867,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67d1ddceeb02d61f5a97b182c282dd1fa3e6097f17a7e1cf2fedff745873b6a5",
          "md5": "3992ea986eb1c65dc227ada8dec62dac",
          "sha256": "3d15422e24802d9bd563fd3b591e1d52384132a4faf9ef822552d48b82ead6a7"
        },
        "downloads": -1,
        "filename": "ardu_report-1.0.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3992ea986eb1c65dc227ada8dec62dac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8098,
        "upload_time": "2017-10-10T16:12:01",
        "upload_time_iso_8601": "2017-10-10T16:12:01.533557Z",
        "url": "https://files.pythonhosted.org/packages/67/d1/ddceeb02d61f5a97b182c282dd1fa3e6097f17a7e1cf2fedff745873b6a5/ardu_report-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bd3d2cfcde5c713ed7cc281a288ee8656df515513be3d33ecd84b5125403687",
          "md5": "8aea65485a419f281f0b68d5fce5bbbd",
          "sha256": "ba60f240a0a9f941488ca6b4d286fbfd8234f97528983808eba7fd71e0810246"
        },
        "downloads": -1,
        "filename": "ardu-report-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "8aea65485a419f281f0b68d5fce5bbbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5942,
        "upload_time": "2017-10-10T16:12:03",
        "upload_time_iso_8601": "2017-10-10T16:12:03.470521Z",
        "url": "https://files.pythonhosted.org/packages/7b/d3/d2cfcde5c713ed7cc281a288ee8656df515513be3d33ecd84b5125403687/ardu-report-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67d1ddceeb02d61f5a97b182c282dd1fa3e6097f17a7e1cf2fedff745873b6a5",
        "md5": "3992ea986eb1c65dc227ada8dec62dac",
        "sha256": "3d15422e24802d9bd563fd3b591e1d52384132a4faf9ef822552d48b82ead6a7"
      },
      "downloads": -1,
      "filename": "ardu_report-1.0.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "3992ea986eb1c65dc227ada8dec62dac",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8098,
      "upload_time": "2017-10-10T16:12:01",
      "upload_time_iso_8601": "2017-10-10T16:12:01.533557Z",
      "url": "https://files.pythonhosted.org/packages/67/d1/ddceeb02d61f5a97b182c282dd1fa3e6097f17a7e1cf2fedff745873b6a5/ardu_report-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bd3d2cfcde5c713ed7cc281a288ee8656df515513be3d33ecd84b5125403687",
        "md5": "8aea65485a419f281f0b68d5fce5bbbd",
        "sha256": "ba60f240a0a9f941488ca6b4d286fbfd8234f97528983808eba7fd71e0810246"
      },
      "downloads": -1,
      "filename": "ardu-report-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "8aea65485a419f281f0b68d5fce5bbbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5942,
      "upload_time": "2017-10-10T16:12:03",
      "upload_time_iso_8601": "2017-10-10T16:12:03.470521Z",
      "url": "https://files.pythonhosted.org/packages/7b/d3/d2cfcde5c713ed7cc281a288ee8656df515513be3d33ecd84b5125403687/ardu-report-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}