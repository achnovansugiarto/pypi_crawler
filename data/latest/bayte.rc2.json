{
  "info": {
    "author": "Akshay Gupta",
    "author_email": "akgcodes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n[![codecov](https://codecov.io/github/ak-gupta/bayte/branch/main/graph/badge.svg?token=S8BUVKF37O)](https://codecov.io/github/ak-gupta/bayte) [![Maintainability](https://api.codeclimate.com/v1/badges/5c0b77d0e9b8f899ee95/maintainability)](https://codeclimate.com/github/ak-gupta/bayte/maintainability) ![PyPI](https://img.shields.io/pypi/v/bayte) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/bayte) [![Documentation Status](https://readthedocs.org/projects/bayte/badge/?version=latest)](https://bayte.readthedocs.io/en/latest/?badge=latest)\n\n# Overview\n\nThis package is a lightweight implementation of bayesian target encoding. This implementation is taken\nfrom [Slakey et al.](https://arxiv.org/pdf/1904.13001.pdf), with ensemble methodology from [Larionov](https://arxiv.org/pdf/2006.01317.pdf).\n\nThe encoding proceeds as follows:\n\n1. User observes and chooses a likelihood for the target variable (e.g. Bernoulli for a binary classification problem),\n2. Using [Fink's Compendium of Priors](https://www.johndcook.com/CompendiumOfConjugatePriors.pdf), derive the conjugate prior for the likelihood (e.g. Beta),\n3. Use the training data to initialize the hyperparameters for the prior distribution\n    * **NOTE**: This process is generally reliant on common interpretations of hyperparameters.\n4. Using Fink's Compendium, derive the methodology for generating the posterior distribution,\n5. For each level in the categorical variable,\n    1. Generate the posterior distribution using the observed target values for the categorical level,\n    2. Set the encoding value to a sample from the posterior distribution\n        * If a new level has appeared in the dataset, the encoding will be sampled from the prior distribution.\n          To disable this behaviour, initialize the encoder with ``handle_unknown=\"error\"``.\n\nThen, we repeat step 5.2 a total of ``n_estimators`` times, generating a total of ``n_estimators`` training datasets\nwith unique encodings. The end model is a vote from each sampled dataset.\n\nFor reproducibility, you can set the encoding value to the mean of the posterior distribution instead.\n\n## Installation\n\nInstall from PyPI:\n\n```bash\npython -m pip install bayte\n```\n\n## Usage\n\n### Encoding\n\nLet's create a binary classification dataset.\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=1000, n_features=5, n_informative=2)\nX = pd.DataFrame(X)\n\n# Categorical data\nX[5] = np.random.choice([\"red\", \"green\", \"blue\"], size=1000)\n```\n\nImport and fit the encoder:\n\n```python\nimport bayte as bt\n\nencoder = bt.BayesianTargetEncoder(dist=\"bernoulli\")\nencoder.fit(X[[5]], y)\n```\n\nTo encode your categorical data,\n\n```python\nX[5] = encoder.transform(X[[5]])\n```\n\n### Ensemble\n\nIf you want to utilize the ensemble methodology described above, construct the same dataset\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import make_classification\n\nX, y = make_classification(n_samples=1000, n_features=5, n_informative=2)\nX = pd.DataFrame(X)\n\n# Categorical data\nX[5] = np.random.choice([\"red\", \"green\", \"blue\"], size=1000)\n```\n\nand import a classifier to supply to the ensemble class\n\n```python\nfrom sklearn.svm import SVC\n\nimport bayte as bt\n\nensemble = bt.BayesianTargetClassifier(\n    base_estimator=SVC(kernel=\"linear\"),\n    encoder=bt.BayesianTargetEncoder(dist=\"bernoulli\")\n)\n```\n\nFit the ensemble. **NOTE**: either supply an explicit list of categorical features to `categorical_feature`, or\nuse a DataFrame with categorical data types.\n\n```python\nensemble.fit(X, y, categorical_feature=[5])\n```\n\nWhen you call ``predict`` on a novel dataset, note that the encoder will transform your data at runtime and it\nwill encode based on the *mean of the posterior distribution*:\n\n```python\nensemble.predict(X)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ak-gupta/bayte",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bayte",
    "package_url": "https://pypi.org/project/bayte/",
    "platform": null,
    "project_url": "https://pypi.org/project/bayte/",
    "project_urls": {
      "Homepage": "https://github.com/ak-gupta/bayte"
    },
    "release_url": "https://pypi.org/project/bayte/0.1.1/",
    "requires_dist": [
      "pandas (<=1.5.2,>=1.0.0)",
      "scikit-learn (<=1.1.3,>=1.0.0)",
      "build ; extra == 'build'",
      "bumpver ; extra == 'build'",
      "twine ; extra == 'build'",
      "wheel ; extra == 'build'",
      "build ; extra == 'dev'",
      "bumpver ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "seaborn (<=0.12.1,>=0.11.0) ; extra == 'dev'",
      "furo ; extra == 'dev'",
      "myst-nb ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "sphinxcontrib-bibtex ; extra == 'dev'",
      "sphinx-tabs ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "furo ; extra == 'docs'",
      "myst-nb ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "sphinxcontrib-bibtex ; extra == 'docs'",
      "sphinx-tabs ; extra == 'docs'",
      "category-encoders (==2.3.0) ; extra == 'experiments'",
      "lazyscribe (==0.3.0) ; extra == 'experiments'",
      "lightgbm (==3.3.1) ; extra == 'experiments'",
      "seaborn (<=0.12.1,>=0.11.0) ; extra == 'experiments'",
      "prefect (==0.15.10) ; extra == 'experiments'",
      "xgboost (==1.5.1) ; extra == 'experiments'",
      "seaborn (<=0.12.1,>=0.11.0) ; extra == 'plots'",
      "black ; extra == 'qa'",
      "flake8 ; extra == 'qa'",
      "mypy ; extra == 'qa'",
      "pip-tools ; extra == 'qa'",
      "pydocstyle ; extra == 'qa'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Bayesian target encoding with scikit-learn and scipy",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15882923,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4832bae9be58d93927cd21f98722294ad6957f0c0aa5d7078a2e0916ccd5b58d",
          "md5": "2634adbd6a74f175baebdc81d12eb74c",
          "sha256": "00c752aa626138d937fd5851065be7d54e87b0fa0c68ab41abf1a8cd35ff0794"
        },
        "downloads": -1,
        "filename": "bayte-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2634adbd6a74f175baebdc81d12eb74c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12102,
        "upload_time": "2022-06-17T15:37:42",
        "upload_time_iso_8601": "2022-06-17T15:37:42.070673Z",
        "url": "https://files.pythonhosted.org/packages/48/32/bae9be58d93927cd21f98722294ad6957f0c0aa5d7078a2e0916ccd5b58d/bayte-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "354b46b94b42c36aaca4f2bb0386f85b3073eb054e9aeaddfae216a061a63033",
          "md5": "4f0d51db6ff883733f95515c84fed2c1",
          "sha256": "6f1eda87e3d240ebf81a7b1aa1cd320bd8736dcecba5cafd2909cb6c38c33f13"
        },
        "downloads": -1,
        "filename": "bayte-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f0d51db6ff883733f95515c84fed2c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11934,
        "upload_time": "2022-11-24T20:50:00",
        "upload_time_iso_8601": "2022-11-24T20:50:00.135842Z",
        "url": "https://files.pythonhosted.org/packages/35/4b/46b94b42c36aaca4f2bb0386f85b3073eb054e9aeaddfae216a061a63033/bayte-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "354b46b94b42c36aaca4f2bb0386f85b3073eb054e9aeaddfae216a061a63033",
        "md5": "4f0d51db6ff883733f95515c84fed2c1",
        "sha256": "6f1eda87e3d240ebf81a7b1aa1cd320bd8736dcecba5cafd2909cb6c38c33f13"
      },
      "downloads": -1,
      "filename": "bayte-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f0d51db6ff883733f95515c84fed2c1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11934,
      "upload_time": "2022-11-24T20:50:00",
      "upload_time_iso_8601": "2022-11-24T20:50:00.135842Z",
      "url": "https://files.pythonhosted.org/packages/35/4b/46b94b42c36aaca4f2bb0386f85b3073eb054e9aeaddfae216a061a63033/bayte-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}