{
  "info": {
    "author": "Finlay Maguire",
    "author_email": "finlaymaguire@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "![Python package](https://github.com/pha4ge/hAMRonization/workflows/test_package/badge.svg)\n\n# hAMRonization \n\nThis repo contains the hAMRonization module and CLI parser tools combine the outputs of \n18 (as of 2022-09-25) disparate antimicrobial resistance gene detection tools into a single unified format.\n\nThis is an implementation of the [hAMRonization AMR detection specification scheme](docs/hAMRonization_specification_details.csv) which supports gene presence/absence resistance and mutational resistance (if supported by the underlying tool).\n\nThis supports a variety of summary options including an [interactive summary](https://finlaymagui.re/assets/interactive_report_demo.html).\n\n![hAMRonization overview](https://github.com/pha4ge/hAMRonization/blob/master/docs/overview_figure.png?raw=true)\n\n\n## Installation\n\nThis tool requires python>=3.7 and [pandas](https://pandas.pydata.org/)\nand the latest release can be installed directly from pip, conda, docker, this repository, or from the galaxy toolshed:\n```\npip install hAMRonization\n```\n[![PyPI version](https://badge.fury.io/py/hAMRonization.svg)](https://badge.fury.io/py/hAMRonization)\n[![PyPI downloads](https://img.shields.io/pypi/dm/hAMRonization.svg)](https://img.shields.io/pypi/dm/hAMRonization)\n\nOr\n\n```\nconda create --name hamronization --channel conda-forge --channel bioconda --channel defaults hamronization\n```\n![version-on-conda](https://anaconda.org/bioconda/hamronization/badges/version.svg)\n![conda-download](https://anaconda.org/bioconda/hamronization/badges/downloads.svg)\n![last-update-on-conda](https://anaconda.org/bioconda/hamronization/badges/latest_release_date.svg)\n\n\nOr to install using docker:\n```\ndocker pull finlaymaguire/hamronization:latest\n```\n\nOr to install the latest development version:\n```\ngit clone https://github.com/pha4ge/hAMRonization\npip install hAMRonization\n```\n\nAlternatively, hAMRonization can also be installed and used in [galaxy](https://galaxyproject.org/) via the [galaxy toolshed](https://toolshed.g2.bx.psu.edu/view/iuc/suite_hamronization/904ab154f8f4).\n\n## Usage\n\n**NOTE**: Only the output format used in the \"last updated\" version of the AMR prediction tool has been tested for accuracy. Older tool versions or updates which lead to a change in output format may not work. \nIn theory, this should only be a problem with major version changes but not all tools follow semantic versioning.\nIf you encounter any issues with newer tool versions then please create an issue in this repository.\n\n```\nusage: hamronize <tool> <options>\n\nConvert AMR gene detection tool output(s) to hAMRonization specification format\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n\nTools with hAMRonizable reports:\n  {abricate,amrfinderplus,amrplusplus,ariba,csstar,deeparg,fargene,groot,kmerresistance,resfams,resfinder,mykrobe,pointfinder,rgi,srax,srst2,staramr,tbprofiler,summarize}\n    abricate            hAMRonize abricate's output report i.e., OUTPUT.tsv\n    amrfinderplus       hAMRonize amrfinderplus's output report i.e., OUTPUT.tsv\n    amrplusplus         hAMRonize amrplusplus's output report i.e., gene.tsv\n    ariba               hAMRonize ariba's output report i.e., OUTDIR/OUTPUT.tsv\n    csstar              hAMRonize csstar's output report i.e., OUTPUT.tsv\n    deeparg             hAMRonize deeparg's output report i.e.,\n                        OUTDIR/OUTPUT.mapping.ARG\n    fargene             hAMRonize fargene's output report i.e., retrieved-\n                        genes-*-hmmsearched.out\n    groot               hAMRonize groot's output report i.e., OUTPUT.tsv (from `groot\n                        report`)\n    kmerresistance      hAMRonize kmerresistance's output report i.e., OUTPUT.res\n    resfams             hAMRonize resfams's output report i.e., resfams.tblout\n    resfinder           hAMRonize resfinder's output report i.e.,\n                        ResFinder_results_tab.txt\n    mykrobe             hAMRonize mykrobe's output report i.e., OUTPUT.json\n    pointfinder         hAMRonize pointfinder's output report i.e.,\n                        PointFinder_results.txt\n    rgi                 hAMRonize rgi's output report i.e., OUTPUT.txt or\n                        OUTPUT_bwtoutput.gene_mapping_data.txt\n    srax                hAMRonize srax's output report i.e., sraX_detected_ARGs.tsv\n    srst2               hAMRonize srst2's output report i.e., OUTPUT_srst2_report.tsv\n    staramr             hAMRonize staramr's output report i.e., resfinder.tsv\n    tbprofiler          hAMRonize tbprofiler's output report i.e., OUTPUT.results.json\n    summarize           Provide a list of paths to the reports you wish to summarize\n```\n\nTo look at a specific tool e.g. `abricate`:\n```\n>hamronize abricate -h \nusage: hamronize abricate <options>\n\nApplies hAMRonization specification to output from abricate (OUTPUT.tsv)\n\npositional arguments:\n  report                Path to tool report\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --format FORMAT       Output format (tsv or json)\n  --output OUTPUT       Output location\n  --analysis_software_version ANALYSIS_SOFTWARE_VERSION\n                        Input string containing the analysis_software_version for abricate\n  --reference_database_version REFERENCE_DATABASE_VERSION\n                        Input string containing the reference_database_version for abricate\n\n```\n\nTherefore, hAMRonizing abricates output:\n```\nhamronize abricate ../test/data/raw_outputs/abricate/report.tsv --reference_database_version 3.2.5 --analysis_software_version 1.0.0 --format json\n```\n\nTo parse multiple reports from the same tool at once just give a list of reports as the argument,\nand they will be concatenated appropriately (i.e. only one header for tsv)\n\n```\nhamronize rgi --input_file_name rgi_report --analysis_software_version 6.0.0 --reference_database_version 3.2.5 test/data/raw_outputs/rgi/rgi.txt test/data/raw_outputs/rgibwt/Kp11_bwtoutput.gene_mapping_data.txt\n```\n\nYou can summarize hAMRonized reports regardless of format using the 'summarize'\nfunction:\n\n```\n> hamronize summarize -h\nusage: hamronize summarize <options> <list of reports>\n\nConcatenate and summarize AMR detection reports\n\npositional arguments:\n  hamronized_reports    list of hAMRonized reports\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t {tsv,json,interactive}, --summary_type {tsv,json,interactive}\n                        Which summary report format to generate\n  -o OUTPUT, --output OUTPUT\n                        Output file path for summary\n```\n\nThis will take a list of report and create single sorted report in the \nspecified format just containing the unique entries across input reports.\nThis can handle mixed json and tsv hamronized report formats.\n\n```\nhamronize summarize -o combined_report.tsv -t tsv abricate.json ariba.tsv\n```\n\nThe [interactive summary](https://finlaymagui.re/assets/interactive_report_demo.html) option will produce an html file that can be opened within the browser for navigable data exploration (feature developed\nwith @alexmanuele).\n\n### Using within scripts\n\nAlternatively, hAMRonization can be used within scripts (the metadata must contain the mandatory metadata that is not included in that tool's output, this can be checked by looking at the CLI flags in `hamronize <tool> --help`):\n\n```\nimport hAMRonization\nmetadata = {\"analysis_software_version\": \"1.0.1\", \"reference_database_version\": \"2019-Jul-28\"}\nparsed_report = hAMRonization.parse(\"abricate_report.tsv\", metadata, \"abricate\")\n```\n\nThe `parsed_report` is then a generator that yields hAMRonized result objects from the parsed report:\n\n```\nfor result in parsed_report:\n      print(result)\n```\n\nAlternatively, you can use the `.write` attribute to export all results left in the generator to a file (if a filepath isn't provided, this will write to stdout).\n\n```parsed_report.write('hAMRonized_abricate_report.tsv')```\n\nYou can also output a `json` formatted hAMRonized report:\n\n`parsed_report.write('all_hAMRonized_abricate_report.json', output_format='json')`\n\nIf you want to write multiple reports to one file, this `.write` method can accept `append_mode=True` to append rather than overwrite the output file and not include the header (in tsv format).\n\n`parsed_report.write('all_hAMRonized_abricate_report.tsv', append_mode=True)`\n\n\n### Implemented Parsers\n\nCurrently implemented parsers and the last tool version for which they have been validated:\n\n1. [abricate](hAMRonization/AbricateIO.py): last updated for v1.0.0\n2. [amrfinderplus](hAMRonization/AmrFinderPlusIO.py): last updated for v3.10.40\n3. [amrplusplus](hAMRonization/AmrPlusPlusIO.py): last updated for c6b097a\n4. [ariba](hAMRonization/AribaIO.py): last updated for v2.14.6\n5. [csstar](hAMRonization/CSStarIO.py): last updated for v2.1.0\n6. [deeparg](hAMRonization/DeepArgIO.py): last updated for v1.0.2\n7. [fargene](hAMRonization/FARGeneIO.py): last updated for v0.1\n8. [groot](hAMRonization/GrootIO.py): last updated for v1.1.2\n9. [kmerresistance](hAMRonization/KmerResistanceIO.py): late updated for v2.2.0\n10. [mykrobe](test/data/raw_outputs/mykrobe/report.json): last updated for v0.8.1\n11. [pointfinder](hAMRonization/PointFinderIO.py): last updated for v4.1.0\n12. [resfams](hAMRonization/ResFamsIO.py): last updated for hmmer v3.3.2\n13. [resfinder](hAMRonization/ResFinderIO.py): last updated for v4.1.0\n14. [rgi](hAMRonization/RgiIO.py) (includes RGI-BWT) last updated for v5.2.0\n15. [srax](hAMRonization/SraxIO.py): last updated for v1.5\n16. [srst2](hAMRonization/Srst2IO.py): last updated for v0.2.0\n17. [staramr](hAMRonization/StarAmrIO.py): last updated for v0.8.0\n18. [tbprofilder](test/data/raw_outputs/tbprofiler/tbprofiler.json): last updated for v3.0.8\n\n## Implementation Details\n\n### hAMRonizedResult Data Structure\n\nThe hAMRonization specification is implemented in the [hAMRonizedResult dataclass](https://github.com/pha4ge/harmonized-amr-parsers/blob/master/hAMRonization/hAMRonization/hAMRonizedResult.py#L6).\n\nThis is a simple datastructure that uses positional and key-word args to distinguish mandatory from optional hAMRonization fields. \nIt also uses type-hinting to validate the supplied values are of the correct type\n\n\nEach parser follows a similar strategy, using a common interface.\nThis has been designed to match the `biopython` `SeqIO` `parse` function \n\n    >>> import hAMRonization\n    >>> filename = \"abricate_report.tsv\"\n    >>> metadata = {\"analysis_software_version\": \"1.0.1\", \"reference_database_version\": \"2019-Jul-28\"}\n    >>> for result in hAMRonization.parse(filename, metadata, \"abricate\"):\n    ...    print(result)\n\nWhere the final argument to the `hAMRonization.parse` command is whichever tool is being parsed.\n\n### hAMRonizedResultIterator\n\nAn abstract iterator is then implemented to ingest a given AMR tool's report\n(via the appropriate subclassed implementation), hAMRonize results i.e. translate the \noriginal inputs to the fields in the hAMRonization specification, and yield a stream of \nhAMRonizedResult dataclasses.\n\nThis iterator also implements a write function to enable outputting the contents \nto a output stream or filehandle in either tsv or json format.\n\n### Tool-specific Iterators\n\nEach tool has a specific subclass of this abstract hAMRonizedResultIterator e.g. `AbricateIO.AbricateIterator`.\n\nThese include an attribute containing the mapping of the tools original output report fields to the hAMRonized specification fields (`self.field_mapping`), as well as handling specifying any additional required metadata.\n\nThe `parse` method of these subclasses then implements the tool-specific parsing logic required.\nThis is typically a simple `csv.DictReader` but can be more complex such as the json parsing of `resfinder` output, \nor the modification of output fields required to better fit some tools into the hAMRonization specification.\n\n\n## Contributing \n\nWe welcome contributions for users in any form (from github issues flagging problems/requests) to pull requests of bug fixes or adding new parsers.\n\n## Setting up a Development Environment\n\nFirst fork this repository and set up a development environment (replacing `YOURUSERNAME` with your github username:\n\n```\ngit clone https://github.com/YOURUSERNAME/hAMRonization\nconda create -n hAMRonization \nconda activate hAMRonization\ncd hAMRonization\npip install pytest flake8\npip install -e .\n\n```\n## Testing and Linting\n\nOn every commit github actions automatically runs tests and linting to check\nthe code. \nYou can manually run these in your development environment as well.\n\nTo run a full set of integration tests:\n\n    pushd test\n    bash run_integration_test.sh\n    popd\n\nTo run unit tests that verify parsing validity for each tool\nas well as generation of valid summaries you can use pytest:\n\n    pip install pytest\n    pushd test\n    pytest\n    popd\n\nFinally to run linting and check whether your code matches the project\ncode style:\n\n    pushd hAMRonization\n    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n    flake8 . --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics\n    popd\n\n## Adding a new parser\n\nIf you wish to add a parser for a new tool here are the main steps required:\n\n1. Add an entry into `_RequiredToolMetadata` and `_FormatToIterator` in `hAMRonziation/__init__.py` which points to the appropriate `ToolNameIO.py` containing the tool's Iterator subclass\n\n2. In `ToolNameIO.py` add a `required_metadata` list containing any mandatory fields not implemented by the tool\n\n3. Then add a class `ToolNameIterator(hAMRonizedResultIterator)` and implement the `__init__` methods with the approriate mapping (`self.field_mapping`), and metadata (`self.metadata`).\n\n4. To this class, add a `parse` method which reads an opened file stream into a dictionary per line/result (matching the keys of `self.field_mapping`) and yields the output of `self.hAMRonize` being applied to that dictionary.\n\n5. To add a CLI parser for the tool, create a python file in the `parsers` directory:\n\n    ```\n    from hAMRonization import Interfaces\n    if __name__ == '__main__': \n        Interfaces.cli_parser('toolname')\n    ```\n\nAlternatively, the `hAMRonized_parser.py` can be used as a common script interface to all implemented parsers. \n\n6. Finally, following the template in `test/test_parsing_validity.py`, please generate a unit test that ensures the parser is working as you intend it to!\n\nIf you have any questions about any of this or need any help, please file an issue.\n\n## FAQ\n\n* What's the difference between an Antimicrobial Resistance 'Result' and 'Report'?\n  * For the purposes of this project, a 'Report' is an output file (or collection of files) from an AMR analysis tool.\n    A 'Result' is a single entry in a report. For example, a single line in an abricate report file is a single Antimicrobial\n    Resistance 'Result'.\n    \n### Known Issues\n\nHere are some known issues that we would welcome input on trying to solve!\n\n#### Limitations of specification\n\n- mandatory fields: `gene_symbol` and `gene_name` are confusing and not usually both present (only consistently used in AFP). Means tools either need 1:2 mapping i.e. single output field maps to both `gene_symbol` and `gene_name` OR have fragile text splitting of single field that won't be robust to databases changes.  Current solution is 1:2 mapping e.g. staramr\n\n- inconsistent nomenclature of terms being used in specification fields: target, query, subject, reference. Need to stick to one name for sequence with which the database is being searched, and one the hit that results from that search.\n\n- `sequence_identity`: is sequence type specific %id amino acids != %id nucleotide but does this matter?\n\n- `coverage_depth` seems to include both tool fields that are average depth of read and just plain overall read-count, \n\n- `contig_id` isn't general enough when some tools this ID naturally corresponds to a `read_name` (deepARG), individual ORF (resfams), or protein sequence (AFP with protein input): *change to `query_id_name` or similar?*\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/pha4ge/archive/v1.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pha4ge/hAMRonization",
    "keywords": "Genomics,Antimicrobial resistance,Antibiotic,Standardization",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hAMRonization",
    "package_url": "https://pypi.org/project/hAMRonization/",
    "platform": null,
    "project_url": "https://pypi.org/project/hAMRonization/",
    "project_urls": {
      "Download": "https://github.com/pha4ge/archive/v1.1.1.tar.gz",
      "Homepage": "https://github.com/pha4ge/hAMRonization"
    },
    "release_url": "https://pypi.org/project/hAMRonization/1.1.1/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.7",
    "summary": "Tool to convert and summarize AMR gene detection outputs using the hAMRonization specification",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15215325,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916b666b38e33585adcac6eff973cc5ac73d695526e1f1f44dbaf3662cc5aa59",
          "md5": "846690efeb8fedef7940568daff6f17b",
          "sha256": "5d670363de5d4aa5094821d7d23013f4a2dd7c38e64750013b9294cb6a59c82a"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "846690efeb8fedef7940568daff6f17b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37896,
        "upload_time": "2021-02-02T01:25:02",
        "upload_time_iso_8601": "2021-02-02T01:25:02.957099Z",
        "url": "https://files.pythonhosted.org/packages/91/6b/666b38e33585adcac6eff973cc5ac73d695526e1f1f44dbaf3662cc5aa59/hAMRonization-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d0305b01513d56d42652e5bccd45de928b1782b6c5e3e7933020a78c5d1e88",
          "md5": "7ae903feebaa9e3261199a322f066a9c",
          "sha256": "33a86f1287d4c259e1d0dd1e27ab8a4e05ff8b993feb7d77da90635054862240"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7ae903feebaa9e3261199a322f066a9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36038,
        "upload_time": "2021-02-02T01:25:04",
        "upload_time_iso_8601": "2021-02-02T01:25:04.183277Z",
        "url": "https://files.pythonhosted.org/packages/c5/d0/305b01513d56d42652e5bccd45de928b1782b6c5e3e7933020a78c5d1e88/hAMRonization-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b323afae659623c3352c17a959bd997c62e7c73529c613b296ae5b970ad94a93",
          "md5": "fea777e2d82baf3a6b6cb6f209b67992",
          "sha256": "3e90e3885a6055822bff084deac8fb30033896315bcb3e1c641d14e7e3aa324c"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fea777e2d82baf3a6b6cb6f209b67992",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 45222,
        "upload_time": "2022-09-26T00:44:12",
        "upload_time_iso_8601": "2022-09-26T00:44:12.293447Z",
        "url": "https://files.pythonhosted.org/packages/b3/23/afae659623c3352c17a959bd997c62e7c73529c613b296ae5b970ad94a93/hAMRonization-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a5a0d4f36b80a872bbd1654ebd288898a79b194b1f356008540323b91d69884",
          "md5": "27afc32ab79019ae364e339b50bae699",
          "sha256": "13d6122e57b7c8108ac126580349ba2d6e981e4cb974f395e97c2ed004372d90"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27afc32ab79019ae364e339b50bae699",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43055,
        "upload_time": "2022-09-26T00:44:14",
        "upload_time_iso_8601": "2022-09-26T00:44:14.783464Z",
        "url": "https://files.pythonhosted.org/packages/5a/5a/0d4f36b80a872bbd1654ebd288898a79b194b1f356008540323b91d69884/hAMRonization-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50d25ddb8e870d356db2549944bb604a0b81f7d9ae0939dfd9bfcabe384e5b0c",
          "md5": "c6c8abc6b506bc982118969db07dba6b",
          "sha256": "4cd0dca6f5228e2c7a52d15570d04f9220ec6281f04f746e08fc257af22d7337"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6c8abc6b506bc982118969db07dba6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 45058,
        "upload_time": "2022-09-26T13:38:08",
        "upload_time_iso_8601": "2022-09-26T13:38:08.977983Z",
        "url": "https://files.pythonhosted.org/packages/50/d2/5ddb8e870d356db2549944bb604a0b81f7d9ae0939dfd9bfcabe384e5b0c/hAMRonization-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d308a102c5dd81e72c7c7185ab37c21efe1e47071ea3a3f057e4d0a40be8945a",
          "md5": "45c6f1e1fbf2184db19d82b90934030f",
          "sha256": "c2eedf2e7fba995b8eb22fad77e486212882a676a4ad274b304a6cee0bfacc2d"
        },
        "downloads": -1,
        "filename": "hAMRonization-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45c6f1e1fbf2184db19d82b90934030f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 42718,
        "upload_time": "2022-09-26T13:38:10",
        "upload_time_iso_8601": "2022-09-26T13:38:10.754147Z",
        "url": "https://files.pythonhosted.org/packages/d3/08/a102c5dd81e72c7c7185ab37c21efe1e47071ea3a3f057e4d0a40be8945a/hAMRonization-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50d25ddb8e870d356db2549944bb604a0b81f7d9ae0939dfd9bfcabe384e5b0c",
        "md5": "c6c8abc6b506bc982118969db07dba6b",
        "sha256": "4cd0dca6f5228e2c7a52d15570d04f9220ec6281f04f746e08fc257af22d7337"
      },
      "downloads": -1,
      "filename": "hAMRonization-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6c8abc6b506bc982118969db07dba6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 45058,
      "upload_time": "2022-09-26T13:38:08",
      "upload_time_iso_8601": "2022-09-26T13:38:08.977983Z",
      "url": "https://files.pythonhosted.org/packages/50/d2/5ddb8e870d356db2549944bb604a0b81f7d9ae0939dfd9bfcabe384e5b0c/hAMRonization-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d308a102c5dd81e72c7c7185ab37c21efe1e47071ea3a3f057e4d0a40be8945a",
        "md5": "45c6f1e1fbf2184db19d82b90934030f",
        "sha256": "c2eedf2e7fba995b8eb22fad77e486212882a676a4ad274b304a6cee0bfacc2d"
      },
      "downloads": -1,
      "filename": "hAMRonization-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "45c6f1e1fbf2184db19d82b90934030f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 42718,
      "upload_time": "2022-09-26T13:38:10",
      "upload_time_iso_8601": "2022-09-26T13:38:10.754147Z",
      "url": "https://files.pythonhosted.org/packages/d3/08/a102c5dd81e72c7c7185ab37c21efe1e47071ea3a3f057e4d0a40be8945a/hAMRonization-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}