{
  "info": {
    "author": "Dimo Fedortchenko",
    "author_email": "d@onedaybeard.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Celery",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Welcome to Messagio\n\nIt's sort of like *pubsub*, but evolved.\n\nMessagio works out of the box with **Django** and **Celery**.\n\nYou can define events, aka messagios, with specific payloads, the messagios themselves are preferably\npython dataclasses, and their payloads are pickled, but you can in theory use any class as a messagio.\n\nNow you can subscribe any function to listen for those events and do stuff when\nan event is received.\n\nAny number of functions can subscribe to a single event.\nEvery function can subscribe to one or more events.\nThe events are transmitted using celery, so make sure you configure\n\n# Celery Config\n\nAs long as celery is configured in your django setup, you don't need to do anything.\nHowever, it might be wise to have a custom queue for your messagio events, to make sure they get the priority they deserve.\n\nIn django you can configure it as such in django `settings.py` or your celery settings:\n```python3\nCELERY_TASK_ROUTES = (\n    [\n        ('messagio.tasks.*', {'queue': 'messagio'}),\n    ],\n)\n```\nDon't forget to also set up the queues, for example:\n```python3\nCELERY_TASK_QUEUES = (\n    Queue('celery', Exchange('celery'), routing_key='celery'),\n    Queue(\"messagio\", Exchange(\"messagio\"), routing_key=\"messagio\"),\n)\n```\n\nAnd finally, you need to ensure that `pickle` is supported by your Celery config.\n```python3\nCELERY_ACCEPT_CONTENT = [\"pickle\"]\n```\nKeep in mind that if you are using `json` for pickling, you need to also add\n`json` to the array above.\n\n# Defining Messagios\n\nA messagio is a class that can be pickled, and extends from the `Messagio` class.\nThe best way to create messagios is with `dataclasses`, so just decorate your class with `@dataclass`.\nYour messagio class needs to extend `Messagio`, the `@dataclass` decorator is optional however.\n\nHere are two ways to define messagios:\n```python3\n@dataclass\nclass PerformAction(Messagio):\n   action_name:str\n   obj:any\n\nclass ActionPerformed(Messagio):\n   def __init__(action_name:str,obj:any):\n       self.action_name=action_name\n       self.obj = obj\n\n```\n\n# Autodiscover the messagios and project structure\n\nIn order for your decorated messagio listeners to be respected, you must make sure they are imported at runtime.\n\nThe simplest way is to use the `autodiscover_listeners` function.\n\nFor autodiscovery to work your messagio definitions need to follow a certain structure.\n\nPlace your listener functions in any of the below files or folder structures.\n\n```\n- messagio.py\n\n- tasks.py\n\n- messagio\n  - __init__.py\n```\n\nThen use the following code somewhere in your project that is always imported,\nfor `Django` projects this can be in the main `urls.py` file.\n\n```python3\nfrom messagio import autodiscover_listeners\nautodiscover_listeners()\n```\n\n# Publishing messagios\n\nPublishing messagios is simple, just `fire` it.\n```python3\nobj = Model.objects.get(pk=123)\nPerformAction(\"foo_action\", obj).fire()\n```\n\nFire accepts certain additional parameters:\n- `sync:bool` will call the messagio synchronously without going through celery (uses `celery.task.apply`)\n\n# Listening to messagios\n\nAny function can be configured as a listener.\nA listener can listen to one or more messagio types and will receive the messagio object itself as the first and only parameter.\n\nThe subsciption can come with some extra arguments, these are all passed directly to celery.\n\n- `priority: TASK_PRIORITY` set a priority that will be passed to celery, if your celery does not use priorities, this is ignored. The priorities are integers and depend on your celery configuration, some default options are available in `const.py`\n- `autoretry_for: tuple[Exception]` a list of exceptions that trigger an auto-retry, again passed to celery\n- `max_retries: int`  number of times to auto retry if auto retry is enabled, default is no auto retry\n- `default_retry_delay: float` how long to wait before auto retrying\n\n\n```python3\n# high priority listener\n@listen_to_message(PerformAction, priority=10)\ndef high_prio_listener(messagio:PerformAction):\n    # do something with your messagio\n    pass\n\n@listen_to_message(PerformAction, ActionPerformed)\ndef listener_of_many(messagio:typing.Union[PerformAction, ActionPerformed]):\n    # do something with your messagio\n    pass\n\n# low priority listener\n@listen_to_message(PerformAction, priority=1)\ndef log_me(messagio:PerformAction):\n    logging.getLogger(\"foo\").info(\"Action was performed %s\" % messagio.action_name)\n\n```\n\nMessagio functions will be executed by your celery worker and they are executed sequentially in the order that they were subscribed.\nA single published messagio will be executed by a single worker and a messagio can be published as many times as you want.\n\nYou can also subscribe directly using the message center\n```python3\ndef any_func(msg:PerformAction):\n    #do stuff\n    pass\n\nMessageCenter.singleton().subscribe(PerformAction, any_function)\n```\n\n# Abstract message center?\nIf you want, you can roll your own message center that does not use celery to transport messages, for example if you want to use a daemon or some other transport protocol like huey.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zeraien/messagio",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "messagio",
    "package_url": "https://pypi.org/project/messagio/",
    "platform": "",
    "project_url": "https://pypi.org/project/messagio/",
    "project_urls": {
      "Bug Tracker": "https://github.com/zeraien/messagio/issues",
      "Homepage": "https://github.com/zeraien/messagio"
    },
    "release_url": "https://pypi.org/project/messagio/0.7/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Define events (aka messagios) and then listen for those events, like pubsub, but better. Uses celery for transport.",
    "version": "0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12066179,
  "releases": {
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748a38f0793b5afeb181bec5fcaec653e91e466a5fe0ff0ecc53c2f9ae2bfe36",
          "md5": "11982ee6b6435f3e7bd4257f54420091",
          "sha256": "aa92cad475901fbc529271d3374627a9152c626755e3d376e3708ae0a6796d22"
        },
        "downloads": -1,
        "filename": "messagio-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11982ee6b6435f3e7bd4257f54420091",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9053,
        "upload_time": "2021-11-10T03:07:02",
        "upload_time_iso_8601": "2021-11-10T03:07:02.064891Z",
        "url": "https://files.pythonhosted.org/packages/74/8a/38f0793b5afeb181bec5fcaec653e91e466a5fe0ff0ecc53c2f9ae2bfe36/messagio-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34613355c3a3d7543d4b5bfa9ba26df6934588b2e7ab69a852f8f13bc4c15c20",
          "md5": "048bd715689ea7a45fe1d87c214259a1",
          "sha256": "1aa9d39cf16402053e767a70e2dacea2ea92a6eebf6e0435c2516d6bbb761643"
        },
        "downloads": -1,
        "filename": "messagio-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "048bd715689ea7a45fe1d87c214259a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9043,
        "upload_time": "2021-11-10T03:07:03",
        "upload_time_iso_8601": "2021-11-10T03:07:03.893800Z",
        "url": "https://files.pythonhosted.org/packages/34/61/3355c3a3d7543d4b5bfa9ba26df6934588b2e7ab69a852f8f13bc4c15c20/messagio-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e48416a072a1e67b3255dbd668f21e9ea81fbad89def9b297ca52a1dc600901a",
          "md5": "14ce9d8b0178cd2e23b256463f3734e0",
          "sha256": "98aedc9f8cda784b458b25ab1a4ac08f0272e596e7ec2ae81940a9a8e33d74e2"
        },
        "downloads": -1,
        "filename": "messagio-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14ce9d8b0178cd2e23b256463f3734e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8895,
        "upload_time": "2021-11-19T04:03:45",
        "upload_time_iso_8601": "2021-11-19T04:03:45.395907Z",
        "url": "https://files.pythonhosted.org/packages/e4/84/16a072a1e67b3255dbd668f21e9ea81fbad89def9b297ca52a1dc600901a/messagio-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e145348a7b170e6f49312c7173185928b5e05c34ffb1fbb5331d381a2451dc2",
          "md5": "bcac287068fdf9ce7c0870d11a349177",
          "sha256": "a8221a437fcbcdf8e891a1b21b43685ae0ac68e572df3d1a7ff54d87b4d06fd5"
        },
        "downloads": -1,
        "filename": "messagio-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "bcac287068fdf9ce7c0870d11a349177",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8877,
        "upload_time": "2021-11-19T04:03:46",
        "upload_time_iso_8601": "2021-11-19T04:03:46.612039Z",
        "url": "https://files.pythonhosted.org/packages/9e/14/5348a7b170e6f49312c7173185928b5e05c34ffb1fbb5331d381a2451dc2/messagio-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e48416a072a1e67b3255dbd668f21e9ea81fbad89def9b297ca52a1dc600901a",
        "md5": "14ce9d8b0178cd2e23b256463f3734e0",
        "sha256": "98aedc9f8cda784b458b25ab1a4ac08f0272e596e7ec2ae81940a9a8e33d74e2"
      },
      "downloads": -1,
      "filename": "messagio-0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14ce9d8b0178cd2e23b256463f3734e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8895,
      "upload_time": "2021-11-19T04:03:45",
      "upload_time_iso_8601": "2021-11-19T04:03:45.395907Z",
      "url": "https://files.pythonhosted.org/packages/e4/84/16a072a1e67b3255dbd668f21e9ea81fbad89def9b297ca52a1dc600901a/messagio-0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e145348a7b170e6f49312c7173185928b5e05c34ffb1fbb5331d381a2451dc2",
        "md5": "bcac287068fdf9ce7c0870d11a349177",
        "sha256": "a8221a437fcbcdf8e891a1b21b43685ae0ac68e572df3d1a7ff54d87b4d06fd5"
      },
      "downloads": -1,
      "filename": "messagio-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "bcac287068fdf9ce7c0870d11a349177",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8877,
      "upload_time": "2021-11-19T04:03:46",
      "upload_time_iso_8601": "2021-11-19T04:03:46.612039Z",
      "url": "https://files.pythonhosted.org/packages/9e/14/5348a7b170e6f49312c7173185928b5e05c34ffb1fbb5331d381a2451dc2/messagio-0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}