{
  "info": {
    "author": "Chariff Alkhassim",
    "author_email": "chariff.alkhassim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n\n# Preference learning with Gaussian processes.\n\n[![Build Status](https://travis-ci.org/chariff/GPro.svg?branch=master)](https://travis-ci.org/chariff/GPro)\n[![Codecov](https://codecov.io/github/chariff/GPro/badge.svg?branch=master&service=github)](https://codecov.io/github/chariff/GPro?branch=master)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\n\nPython implementation of a probabilistic kernel approach to preference \nlearning based on Gaussian processes. Preference relations are captured \nin a Bayesian framework which allows in turn for global optimization of \nthe inferred functions (Gaussian processes) in as few iterations as possible.\n\nInstallation.\n============\n\n### Installation\n* From PyPI:\n\n      pip install GPro\n\n* From GitHub:\n\n      pip install git+https://github.com/chariff/GPro.git\n\n### Dependencies\nGPro requires:\n* Python (>= 3.5)\n* NumPy+mkl (>= 1.9.0)\n* SciPy (< 1.5.0)\n* Pandas (>= 0.24.0) \n\nBrief guide to using GPro.\n=========================\n\nCheckout the package docstrings for more information.\n\n## 1. Fitting and making Predictions.\n\n```python\nfrom GPro.preference import ProbitPreferenceGP\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\nTraining data consisting of numeric real positive values.\nA minimum of two values is required. The following example is in 1D.\n```python\nX = np.array([2, 1]).reshape(-1, 1)\n```\nM is an array containing preferences. A preference is an \narray of positive integers of shape = (2,). The left integer of a \ngiven preference is the index of a value in X which is preferred \nover another value of X indexed by the right integer of the same\npreference array.\nIn the following example, 2 is preferred over 1.\n```python\nM = np.array([0, 1]).reshape(-1, 2)\n```\nInstantiate a ProbitPreferenceGP object with default parameters.\n```python\ngpr = ProbitPreferenceGP()\n```\nFit a Gaussian process. A flat prior with mean zero is applied by default.\n```python\ngpr.fit(X, M, f_prior=None)\n```\nPredict new values.\n```python\nX_new = np.linspace(-6, 9, 100).reshape(-1, 1)\npredicted_values, predicted_deviations = gpr.predict(X_new, return_y_std=True)\n```\nPlot.\n```python\nplt.plot(X_new, np.zeros(100), 'k--', label='GP predictive prior')\nplt.plot(X_new, predicted_values, 'r-', label='GP predictive posterior')\nplt.plot(X.flat, gpr.predict(X).flat, 'bx', label='Preference')\nplt.ylabel('f(X)')\nplt.xlabel('X')\n# the predicted s.d. is divided for an aesthetic purpose.\nplt.gca().fill_between(X_new.flatten(),\n                       (predicted_values - predicted_deviations / 50).flatten(),\n                       (predicted_values + predicted_deviations / 50).flatten(),\n                       color=\"#b0e0e6\", label='GP predictive posterior s.d.')\nplt.legend()\nplt.show()\n```\nThe following plot shows how the posterior predictive Gaussian process is adjusted to \nthe data i.e. 2 is preferred to 1. One can also notice how the standard \ndeviation is small where there is data.  \n\n![Gaussian process posterior](https://github.com/chariff/GPro/raw/master/examples/posterior_example.png)\n\n## 2. Interactive bayesian optimization.\n\nPreference relations are captured in a Bayesian framework \nwhich allows for global optimization of the latent function \n(modelized by Gaussian processes) describing the preference relations.\nInteractive bayesian optimization with probit responses works by querying\nthe user with a paired comparison and by subsequently updating the \nGaussian process model. The iterative procedure optimizes a utility function,\nseeking a balance between exploration and exploitation of the latent function, \nto present the user with a new set of instances.\n```python\nfrom GPro.kernels import Matern\nfrom GPro.posterior import Laplace\nfrom GPro.acquisitions import UCB\nfrom GPro.optimization import ProbitBayesianOptimization\nimport numpy as np\n\n# 3D example. Initialization.\nX = np.random.sample(size=(2, 3)) * 10\nM = np.array([0, 1]).reshape(-1, 2)\n```\nCustom parameters for the ProbitBayesianOptimization object. \nCheckout the package docstrings for more informations on the parameters.\n```python\nGP_params = {'kernel': Matern(length_scale=1, nu=2.5),\n             'post_approx': Laplace(s_eval=1e-5, max_iter=1000,\n                                    eta=0.01, tol=1e-3),\n             'acquisition': UCB(kappa=2.576),\n             'alpha': 1e-5,\n             'random_state': None}\n```\nInstantiate a ProbitBayesianOptimization object with custom parameters.\n```python\ngpr_opt = ProbitBayesianOptimization(X, M, GP_params)\n```\nBounded region of optimization space.\n```python\nbounds = {'x0': (0, 10), 'x1': (0, 10), 'x2': (0, 10)}\n```\nInteractive optimization method.\nCheckout the package docstrings for more informations on the parameters.\n```python\nconsole_opt = gpr_opt.interactive_optimization(bounds=bounds, n_init=100, n_solve=10)\noptimal_values, suggestion, X_post, M_post, f_post = console_opt\nprint('optimal values: ', optimal_values)\n```\n    >>>                   x0        x1        x2\n    >>> preference  0.306996  3.581879  4.844135\n    >>> suggestion  0.000000  2.749200  3.287625\n    >>> Iteration 0, preference (p) or suggestion (s)? (Q to quit): p\n    >>>                   x0        x1        x2\n    >>> preference  0.306996  3.581879  4.844135\n    >>> suggestion  0.289541  4.118421  6.052125\n    >>> Iteration 1, preference (p) or suggestion (s)? (Q to quit): s\n    >>>                   x0        x1        x2\n    >>> preference  0.289541  4.118421  6.052125\n    >>> suggestion  1.601063  4.300604  5.208000\n    >>> Iteration 2, preference (p) or suggestion (s)? (Q to quit): Q\n    >>> optimal values:  [0.28954095 4.11842105 6.05212487]\n\nOne can use informative prior. Let's use posterior as prior for the sake of\nexample.\n```python\ngpr_opt = ProbitBayesianOptimization(X_post, M_post, GP_params)\nconsole_opt = gpr_opt.interactive_optimization(bounds=bounds, n_init=100, \n                                               n_solve=10, f_prior=f_post,\n                                               max_iter=1, print_suggestion=False)\noptimal_values, suggestion, X_post, M_post, f_post = console_opt\nprint('optimal values: ', optimal_values)\n```\n    >>>                   x0        x1        x2\n    >>> preference  0.289541  4.118421  6.052125\n    >>> suggestion  1.601063  4.300604  5.208000\n    >>> Iteration 2, preference (p) or suggestion (s)? (Q to quit): Q\n    >>> optimal values:  [0.28954095 4.11842105 6.05212487]\n\nDownload the algorithm with a GUI fully written in python on\n* https://sensguide.com\n## 2. Bayesian optimization of a black-box function.\n\n**Disclaimer:** For testing purposes, we maximize a multivariate normal pdf.\n```python\nfrom GPro.kernels import Matern\nfrom GPro.posterior import Laplace\nfrom GPro.acquisitions import UCB\nfrom GPro.optimization import ProbitBayesianOptimization\nfrom scipy.stats import multivariate_normal\nimport numpy as np\nfrom sklearn import datasets\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\n```\nUniform sampling given bounds.\n```python\ndef random_sample(n, d, bounds, random_state=None):\n    if random_state is None:\n        random_state = np.random.randint(1e6)\n    random_state = np.random.RandomState(random_state)\n    sample = random_state.uniform(bounds[:, 0], bounds[:, 1],\n                                  size=(n, d))\n    return sample\n```\nSample parameters of a multivariate normal distribution.\n```python\ndef sample_normal_params(n, d, bounds, scale_sigma=1, random_state=None):\n    # sample centroids.\n    mu = random_sample(n=n, d=d, bounds=np.array(list(bounds.values())),\n                       random_state=random_state)\n    # sample covariance matrices.\n    sigma = datasets.make_spd_matrix(d, random_state) * scale_sigma\n    theta = {'mu': mu, 'sigma': sigma}\n    return theta\n```\nExample is in 2 dimensions.\n```python\nd = 2\n# Bounded region of optimization space.\nbounds = {'x' + str(i): (0, 10) for i in range(0, d)}\n# Sample parameters of a d-multivariate normal distribution\ntheta = sample_normal_params(n=1, d=d, bounds=bounds, scale_sigma=10, random_state=12)\n# function to be optimized.\nf = lambda x: multivariate_normal.pdf(x, mean=theta['mu'][0], cov=theta['sigma'])\n# X, M, init\nX = random_sample(n=2, d=d, bounds=np.array(list(bounds.values())))\nX = np.asarray(X, dtype='float64')\n# Target choices. A preference is an array of positive\n# integers of shape = (2,). preference[0], is an index\n# of X preferred over preference[1], which is an index of X.\nM = sorted(range(len(f(X))), key=lambda k: f(X)[k], reverse=True)\nM = np.asarray([M], dtype='int8')\n# Parameters for the ProbitBayesianOptimization object.\nGP_params = {'kernel': Matern(length_scale=1, nu=2.5),\n             'post_approx': Laplace(s_eval=1e-5, max_iter=1000,\n                                    eta=0.01, tol=1e-3),\n             'acquisition': UCB(kappa=2.576),\n             'alpha': 1e-5,\n             'random_state': None}\n# instantiate a ProbitBayesianOptimization object with custom parameters\ngpr_opt = ProbitBayesianOptimization(X, M, GP_params)\n```\nFunction optimization method.\n```python\nfunction_opt = gpr_opt.function_optimization(f=f, bounds=bounds, max_iter=50,\n                                             n_init=1000, n_solve=1)\n\noptimal_values, X_post, M_post, f_post = function_opt\nprint('optimal values: ', optimal_values)\n```\n    >>> optimal values:  [1.45340052 7.22687626]\n```python\n# rmse\nprint('rmse: ', .5 * sum(np.sqrt((optimal_values - theta['mu'][0]) ** 2)))\n```\n    >>> rmse:  0.13092430596422377\n```python\n# 2d plot\nif d == 2:\n    resolution = 10\n    x_min, x_max = bounds['x0'][0], bounds['x0'][1]\n    y_min, y_max = bounds['x1'][0], bounds['x1'][1]\n    x = np.linspace(x_min, x_max, resolution)\n    y = np.linspace(y_min, y_max, resolution)\n    X, Y = np.meshgrid(x, y)\n    grid = np.empty((resolution ** 2, 2))\n    grid[:, 0] = X.flat\n    grid[:, 1] = Y.flat\n    Z = f(grid)\n    plt.imshow(Z.reshape(-1, resolution), interpolation=\"bicubic\",\n               origin=\"lower\", cmap=cm.rainbow, extent=[x_min, x_max, y_min, y_max])\n    plt.scatter(optimal_values[0], optimal_values[1], color='black', s=10)\n    plt.title('Target function')\n    plt.colorbar()\n    plt.show()\n```\n\n![](https://github.com/chariff/GPro/raw/master/examples/mvn_example.png)\n\n### References:\n* http://mlg.eng.cam.ac.uk/zoubin/papers/icml05chuwei-pl.pdf\n* https://arxiv.org/pdf/1012.2599.pdf\n* https://www.cs.ox.ac.uk/people/nando.defreitas/publications/BayesOptLoop.pdf\n* http://www.gaussianprocess.org/gpml/\n\n\n    -- Chariff Alkhassim\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chariff/GPro",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GPro",
    "package_url": "https://pypi.org/project/GPro/",
    "platform": "",
    "project_url": "https://pypi.org/project/GPro/",
    "project_urls": {
      "Homepage": "https://github.com/chariff/GPro"
    },
    "release_url": "https://pypi.org/project/GPro/1.0.5/",
    "requires_dist": [
      "numpy (>=1.9.0)",
      "scipy (>1.4.0)",
      "pandas (>=0.24.0)"
    ],
    "requires_python": "",
    "summary": "Preference Learning with Gaussian Processes.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10233448,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9c37552d3f74e2170dfec2e1345351506f9cd630a0625719af2e1fb755646cc",
          "md5": "f288c3105c92a69a730ddfeec3909081",
          "sha256": "805e5cc1e9da174a41290b2b29a3e64f450d2ea241e41ad93082cc3a2a3d7c65"
        },
        "downloads": -1,
        "filename": "GPro-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f288c3105c92a69a730ddfeec3909081",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16745,
        "upload_time": "2020-02-06T10:17:45",
        "upload_time_iso_8601": "2020-02-06T10:17:45.340512Z",
        "url": "https://files.pythonhosted.org/packages/e9/c3/7552d3f74e2170dfec2e1345351506f9cd630a0625719af2e1fb755646cc/GPro-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b36c22cd675028d8440511b2b0321590b1d76b44478526abfaf6c4f1e44b8b95",
          "md5": "788e701970f09b6b6a319405da9ecce1",
          "sha256": "b8416dd5a6189f399a767abc740d49104559333a7dc45f0f9aad4784eda87774"
        },
        "downloads": -1,
        "filename": "GPro-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "788e701970f09b6b6a319405da9ecce1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13817,
        "upload_time": "2020-02-06T10:17:47",
        "upload_time_iso_8601": "2020-02-06T10:17:47.818368Z",
        "url": "https://files.pythonhosted.org/packages/b3/6c/22cd675028d8440511b2b0321590b1d76b44478526abfaf6c4f1e44b8b95/GPro-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef672ee28520a942259cf61e235048add84dc0a00c33f55520fcecb28e017c3f",
          "md5": "5acea1e5ba18bd39d900329091479dd5",
          "sha256": "d55669f1e8462cc9651dac8bc8264aede8f44f91d2182937d97738eb779877d4"
        },
        "downloads": -1,
        "filename": "GPro-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5acea1e5ba18bd39d900329091479dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17122,
        "upload_time": "2020-02-06T17:00:52",
        "upload_time_iso_8601": "2020-02-06T17:00:52.553196Z",
        "url": "https://files.pythonhosted.org/packages/ef/67/2ee28520a942259cf61e235048add84dc0a00c33f55520fcecb28e017c3f/GPro-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e11df9022c530a4bd094c572f7613b6f460416f37ca3e6c7672f7206cd2f51",
          "md5": "5fb87406582b2f4ecb0f336cf18bba54",
          "sha256": "1157396d63798655cf4bfc9ce99738f8646a1947ea509423d58fc0af0f2e8ffa"
        },
        "downloads": -1,
        "filename": "GPro-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fb87406582b2f4ecb0f336cf18bba54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14704,
        "upload_time": "2020-02-06T17:00:54",
        "upload_time_iso_8601": "2020-02-06T17:00:54.069595Z",
        "url": "https://files.pythonhosted.org/packages/d4/e1/1df9022c530a4bd094c572f7613b6f460416f37ca3e6c7672f7206cd2f51/GPro-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ead12673cee88aefb650b944143393c4a10c192e2f64a0b7d3c49684bf4ec379",
          "md5": "c47afc69242d14a0685c0df8c0674141",
          "sha256": "ccd9202c97af45973b422cd18ac6be35cb60e92c1fd0d214fc18e91c24394f84"
        },
        "downloads": -1,
        "filename": "GPro-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c47afc69242d14a0685c0df8c0674141",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20440,
        "upload_time": "2020-08-20T13:26:37",
        "upload_time_iso_8601": "2020-08-20T13:26:37.626063Z",
        "url": "https://files.pythonhosted.org/packages/ea/d1/2673cee88aefb650b944143393c4a10c192e2f64a0b7d3c49684bf4ec379/GPro-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b94cd99b15719fe3d213148a86f9c9476a90e61864af84ab5a084e7af55ef269",
          "md5": "677b851c9d256b3047b1a266c0cdabaa",
          "sha256": "645dd3eef849436a0960abbc386d9ba87d22911e1f9a7684327fd05c250f966b"
        },
        "downloads": -1,
        "filename": "GPro-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "677b851c9d256b3047b1a266c0cdabaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16616,
        "upload_time": "2020-08-20T13:26:39",
        "upload_time_iso_8601": "2020-08-20T13:26:39.290813Z",
        "url": "https://files.pythonhosted.org/packages/b9/4c/d99b15719fe3d213148a86f9c9476a90e61864af84ab5a084e7af55ef269/GPro-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c11b780215f69961285349066ff954f237e79ad6d49eeca7bf4c66254594309",
          "md5": "95c380581219adeeb6fc006c34dffde5",
          "sha256": "7b0eff9170bcf3f7d50af289c0cb5343eaf1ba018ac7dc8f6aa40229d26c1ae9"
        },
        "downloads": -1,
        "filename": "GPro-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95c380581219adeeb6fc006c34dffde5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20440,
        "upload_time": "2020-08-20T13:42:22",
        "upload_time_iso_8601": "2020-08-20T13:42:22.321099Z",
        "url": "https://files.pythonhosted.org/packages/0c/11/b780215f69961285349066ff954f237e79ad6d49eeca7bf4c66254594309/GPro-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e5f3b4c5558a9a0a3456edce0489c4fe973df39cb5846cbc7a7c417fa3ef91",
          "md5": "071749ce15913e52ada20376cbb77066",
          "sha256": "d19ab9d4f2204c4d66e74f6f39a041ec610f8afeae658fb7353d00258d205aaf"
        },
        "downloads": -1,
        "filename": "GPro-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "071749ce15913e52ada20376cbb77066",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16608,
        "upload_time": "2020-08-20T13:42:23",
        "upload_time_iso_8601": "2020-08-20T13:42:23.969905Z",
        "url": "https://files.pythonhosted.org/packages/86/e5/f3b4c5558a9a0a3456edce0489c4fe973df39cb5846cbc7a7c417fa3ef91/GPro-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604f34d3be40d661d2b124467419b74a21cd92e5799f82603f0b3ae5f05117c9",
          "md5": "a32ef499882e4e0dd4687bc3b9d22ede",
          "sha256": "f0ce6e2b8e364ca0c6cf7d3009b132706884d7cfddc20185355d00d438a8b3a3"
        },
        "downloads": -1,
        "filename": "GPro-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a32ef499882e4e0dd4687bc3b9d22ede",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21875,
        "upload_time": "2021-01-02T12:13:02",
        "upload_time_iso_8601": "2021-01-02T12:13:02.727567Z",
        "url": "https://files.pythonhosted.org/packages/60/4f/34d3be40d661d2b124467419b74a21cd92e5799f82603f0b3ae5f05117c9/GPro-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "764058cfdf105f98d90d7478b2acdc51a503122baa20cd40cde716b572b097dd",
          "md5": "fc58015067c6138083e53ad56ac73494",
          "sha256": "af0c3abccd219a89af08828dd683048c78b234711ad57edea58a378abb7509fe"
        },
        "downloads": -1,
        "filename": "GPro-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fc58015067c6138083e53ad56ac73494",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17035,
        "upload_time": "2021-01-02T12:13:04",
        "upload_time_iso_8601": "2021-01-02T12:13:04.192974Z",
        "url": "https://files.pythonhosted.org/packages/76/40/58cfdf105f98d90d7478b2acdc51a503122baa20cd40cde716b572b097dd/GPro-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56d71c991437a40795b320f58fc0514433c44a9f7c0bee8e3b8c88dc96812be2",
          "md5": "c50e72f795c7fc718b0806c860c9a03c",
          "sha256": "4056e76313101fe4809bf9256f9cb1e9104b361f3c33835da54a76eb414771ed"
        },
        "downloads": -1,
        "filename": "GPro-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c50e72f795c7fc718b0806c860c9a03c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21329,
        "upload_time": "2021-05-02T14:35:38",
        "upload_time_iso_8601": "2021-05-02T14:35:38.740729Z",
        "url": "https://files.pythonhosted.org/packages/56/d7/1c991437a40795b320f58fc0514433c44a9f7c0bee8e3b8c88dc96812be2/GPro-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1953034ecec0a57059b813f8cf1d915f51162dfdc94945b9f52ccf96f6418946",
          "md5": "11a5ca0f41f516cd927d98f2f82bda7e",
          "sha256": "34641d0aeb8d3e6fb8cc55d6f73647222f5070b4e9d46afe03debb29f68e4a2f"
        },
        "downloads": -1,
        "filename": "GPro-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "11a5ca0f41f516cd927d98f2f82bda7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17265,
        "upload_time": "2021-05-02T14:35:40",
        "upload_time_iso_8601": "2021-05-02T14:35:40.140792Z",
        "url": "https://files.pythonhosted.org/packages/19/53/034ecec0a57059b813f8cf1d915f51162dfdc94945b9f52ccf96f6418946/GPro-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56d71c991437a40795b320f58fc0514433c44a9f7c0bee8e3b8c88dc96812be2",
        "md5": "c50e72f795c7fc718b0806c860c9a03c",
        "sha256": "4056e76313101fe4809bf9256f9cb1e9104b361f3c33835da54a76eb414771ed"
      },
      "downloads": -1,
      "filename": "GPro-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c50e72f795c7fc718b0806c860c9a03c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21329,
      "upload_time": "2021-05-02T14:35:38",
      "upload_time_iso_8601": "2021-05-02T14:35:38.740729Z",
      "url": "https://files.pythonhosted.org/packages/56/d7/1c991437a40795b320f58fc0514433c44a9f7c0bee8e3b8c88dc96812be2/GPro-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1953034ecec0a57059b813f8cf1d915f51162dfdc94945b9f52ccf96f6418946",
        "md5": "11a5ca0f41f516cd927d98f2f82bda7e",
        "sha256": "34641d0aeb8d3e6fb8cc55d6f73647222f5070b4e9d46afe03debb29f68e4a2f"
      },
      "downloads": -1,
      "filename": "GPro-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "11a5ca0f41f516cd927d98f2f82bda7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17265,
      "upload_time": "2021-05-02T14:35:40",
      "upload_time_iso_8601": "2021-05-02T14:35:40.140792Z",
      "url": "https://files.pythonhosted.org/packages/19/53/034ecec0a57059b813f8cf1d915f51162dfdc94945b9f52ccf96f6418946/GPro-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}