{
  "info": {
    "author": "Wong Hoe Ziet & Adam Bin Azmi",
    "author_email": "wonghz6071@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Projet “Automatisation des tâches d’administration système”\nName of module : apache_analyser.py\n\nContributors : WONG Hoe Ziet & BIN AZMI Adam\n\n# Overview\nThis is a project of the module \"Automatisation of System Administration Tasks\" for the course of Diplôme Universitaire Technologie (DUT) Réseaux & Télécommunications.\n\nThe main function of the project is to analyse the access log file of an Apache server. The project is consisted of functions that are built to be able to inspect and analyse the data extracted from the log file and provide insights to client notably in the **security and commercial point of view**. The details and explanation of each the functions can be found below. The project also contains a simple Command Line Interface (CLI) that will facilitate the usage of the functions.\n\n# Targetted User\nOur targetted audience is the mainly the user of Apache server, specifically the server adminstrator or development team. This program can also eventually serve as model for other server who uses the same logging format.\n\n# Installation\nThe package of the project will be available on PyPi soon after the complete structuring and validation. Stay tuned!\n\n# Usage\nIn the version 1.0.0 of this module, it contains a total of 10 functions that are conceived to facilitate the analysis of a running Apache server. Thanks to our CLI you can choose whichever functions that you wish. \n\n**Note : You will have to use \"option --a\" when running the code for the first time to convert the file into the format of JSON**\n  \n  - ### 1. convert_json (option --a)\n    This function is used to convert a log file to json format. **This function must be used when running the module for the first time.**\n   ```ruby\n   apache_analyser.py path/to/your/log/file --a\n   ```\n  \n - ### 2. count_os (option --b)\n    This function will help to detect the exploitation system (OS) used by clients. It generates percentage and graph showing the usage of each OS.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --b\n  ```\n  \n  - ### 3. average_os (option --c)\n     It helps to calculate the average size of objects requested by clients. On top of that, it also provides the maximum and minimum size of objects requested. This allow us  to anticipate the traffic on the server, adapt the contains and adapt the bandwidth of the network according to the calculation.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --c\n  ```\n  \n  - ### 4. trafic_du_jour (option --d)\n    This function is used to track the volume of visitors of the day, allowing us to monitor the current traffic on the server.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --d\n  ```\n  \n  - ### 5. count_method (option --e)\n     With this function, we can observe and analysis the request methods used by the visitors. The analyse is carried on 4 most common request methods : GET, POST, HEAD and PUT. It also generates percentage and graph to provide a clearer representation.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --e\n  ```\n  \n -  ### 6. heure_creuse (option --f)\n     This function allow us to identify the peak hour on a server. This is undoubtedly crucial from the **commercial point of view**. For example, it will help to provide an insight on the best time to publish contains on a website.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --f\n  ```\n  \n -  ### 7. count_response (option --g)\n      This function will collect the data on HTTP Response Code. It will list 10 most common response code issued on the server along with their frequencies. From the **security point of view**, this function can serve as an red flag, providing early info to prevent attacks or dysfunctions on the server. Code in the range of 400 and 500 can potentially implicates security concern (loopholes for hacker) especially if the frequency is high. It also comes with percentage and graph interpretations.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --g\n  ```\n  \n -  ### 8. analyse_ip_addr (option --i)\n      This function will help to provide an analyse on the remote IP address or the IP address of clients. It is valuable from the **security point of view** as a repetitive IP address may possibly be a thread to the server. Combine with the data from other functions, a conclusion can certainly be deduced. \n  ```ruby\n  apache_analyser.py path/to/your/log/file --i\n  ```\n  \n-   ### 9. analyse_doc_type (option --j)\n      This function is used to analyse the type of document requested by clients. The top 10 types of documents will be presented in the form of numbers, percentage and graph. By knowing the document type, we can study the general behaviour of client and adapt our contents following the trends.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --j\n  ```\n  \n  - ### 10. count_browser (option --k)\n      This function will help to collect information of the browser used by clients. Indirectly, this can be exploited to strengthen commercialisation. For example, the advertissements can be posted more on certain browser with high traffic.\n  ```ruby\n  apache_analyser.py path/to/your/log/file --k\n  ```\n  \n-  ### 11. Manual (option -h / --help)\n      This option provides you with a mini manual on how to choose the options\n  ```ruby\n  apache_analyser.py path/to/your/log/file -h\n  ```\n \n  ```ruby\n  apache_analyser.py path/to/your/log/file --help\n  ```\n  \n - ### 12. Version (option -V/ --version)\n     This option will show you the current version of the module\n  ```ruby\n  apache_analyser.py path/to/your/log/file -V\n  ```\n  \n  ```ruby\n  apache_analyser.py path/to/your/log/file --version\n  ```\n  \n# Code Style\n\n[![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/)\n\nThe module is written in compliant with the conventions of PEP8\n\n\n# Reporting Bugs\n\nTeamwork is the key, please report at https://github.com/Zac-not-Zack/apache_analyser/issues if you come across any bug.\n\n\n# Licence\n\n[![license](https://img.shields.io/github/license/DAVFoundation/captain-n3m0.svg?style=flat-square)](https://github.com/DAVFoundation/captain-n3m0/blob/master/LICENSE)\n\nMIT License\n\nCopyright (c) 2021 Wong Hoe Ziet & Adam Bin Azmi\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Zac-not-Zack/apache_analyser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apache-analyser",
    "package_url": "https://pypi.org/project/apache-analyser/",
    "platform": "",
    "project_url": "https://pypi.org/project/apache-analyser/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/Zac-not-Zack/apache_analyser"
    },
    "release_url": "https://pypi.org/project/apache-analyser/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "The main function of the project is to analyse the access log file of an Apache server.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11817666,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1364debefe266652f7914da2c188fef052433720af5e9da3fb519bbe4f393395",
          "md5": "b49bbbec54cf0a3d5b253eaf480a8d1f",
          "sha256": "bdc45dc841b44541ab6060bbd86a6561d5e68e3a0d02ac10db17688f9cb5b199"
        },
        "downloads": -1,
        "filename": "apache_analyser-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b49bbbec54cf0a3d5b253eaf480a8d1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9043,
        "upload_time": "2021-10-24T20:04:11",
        "upload_time_iso_8601": "2021-10-24T20:04:11.884886Z",
        "url": "https://files.pythonhosted.org/packages/13/64/debefe266652f7914da2c188fef052433720af5e9da3fb519bbe4f393395/apache_analyser-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a2a8d94e6a9df624b209778f775860d93d19a0110c3e542fb66f06dc12539d",
          "md5": "727708a570c549bdfbae374befe95aa8",
          "sha256": "b7a89fd5dac12d568737e07ac3ece563d0d03b06cdbe2bf94c64f0aef91ca44b"
        },
        "downloads": -1,
        "filename": "apache_analyser-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "727708a570c549bdfbae374befe95aa8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8894,
        "upload_time": "2021-10-24T20:04:13",
        "upload_time_iso_8601": "2021-10-24T20:04:13.279329Z",
        "url": "https://files.pythonhosted.org/packages/76/a2/a8d94e6a9df624b209778f775860d93d19a0110c3e542fb66f06dc12539d/apache_analyser-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1364debefe266652f7914da2c188fef052433720af5e9da3fb519bbe4f393395",
        "md5": "b49bbbec54cf0a3d5b253eaf480a8d1f",
        "sha256": "bdc45dc841b44541ab6060bbd86a6561d5e68e3a0d02ac10db17688f9cb5b199"
      },
      "downloads": -1,
      "filename": "apache_analyser-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b49bbbec54cf0a3d5b253eaf480a8d1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9043,
      "upload_time": "2021-10-24T20:04:11",
      "upload_time_iso_8601": "2021-10-24T20:04:11.884886Z",
      "url": "https://files.pythonhosted.org/packages/13/64/debefe266652f7914da2c188fef052433720af5e9da3fb519bbe4f393395/apache_analyser-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76a2a8d94e6a9df624b209778f775860d93d19a0110c3e542fb66f06dc12539d",
        "md5": "727708a570c549bdfbae374befe95aa8",
        "sha256": "b7a89fd5dac12d568737e07ac3ece563d0d03b06cdbe2bf94c64f0aef91ca44b"
      },
      "downloads": -1,
      "filename": "apache_analyser-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "727708a570c549bdfbae374befe95aa8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8894,
      "upload_time": "2021-10-24T20:04:13",
      "upload_time_iso_8601": "2021-10-24T20:04:13.279329Z",
      "url": "https://files.pythonhosted.org/packages/76/a2/a8d94e6a9df624b209778f775860d93d19a0110c3e542fb66f06dc12539d/apache_analyser-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}