{
  "info": {
    "author": "Lars Hillebrand, Rajkumar Ramamurthy",
    "author_email": "hokage555@web.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Framework :: IPython",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "<div align=\"center\">\n<img src=\"logo/fluid_ml_logo.png\" width=\"400px\">\n\n_Develop ML pipelines fluently with no boilerplate code. Focus only on your tasks and not the boilerplate!_\n\n---\n\n<p align=\"center\">\n  <a href=\"#key-features\">Key Features</a> •\n  <a href=\"#getting-started\">Getting Started</a> •\n  <a href=\"#functionality\">Functionality</a> •\n  <a href=\"#examples\">Examples</a> •\n  <a href=\"#citation\">Citation</a>\n</p>\n\n[![Python Versions](https://img.shields.io/pypi/pyversions/fluidml.svg)](https://pypi.org/project/fluidml/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![CircleCI](https://circleci.com/gh/fluidml/fluidml/tree/main.svg?style=shield)](https://circleci.com/gh/fluidml/fluidml/tree/main)\n[![codecov](https://codecov.io/gh/fluidml/fluidml/branch/main/graph/badge.svg?token=XG4UDWF8RE)](https://codecov.io/gh/fluidml/fluidml)\n[![Documentation Status](https://readthedocs.org/projects/fluidml/badge/?version=latest)](https://fluidml.readthedocs.io/en/latest/?badge=latest)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/fluidml/fluidml/blob/main/CODE_OF_CONDUCT.md)\n\n[//]: # (?style=flat-square)\n\n</div>\n\n---\n\n**FluidML** is a lightweight framework for developing machine learning pipelines.\n\n<div align=\"center\">\n<img src=\"logo/fluidml_example.gif\" width=\"70%\" />\n</div>\n\nDeveloping machine learning models is a challenging process, with a wide range of sub-tasks: \ndata collection, pre-processing, model development, hyper-parameter tuning and deployment. \nEach of these tasks is iterative in nature and requires lot of iterations to get it right with good performance.\n\nDue to this, each task is generally developed sequentially, with artifacts from one task being fed as inputs to the subsequent tasks. \nFor instance, raw datasets are first cleaned, pre-processed, featurized and stored as iterable datasets (on disk), which are then used for model training. \nHowever, this type of development can become messy and un-maintenable quickly for several reasons:\n\n- pipeline code may be split across multiple scripts whose dependencies are not modeled explicitly\n- each of this task contains boilerplate code to collect results from previous tasks (eg: reading from disk)\n- hard to keep track of task artifacts and their different versions\n- hyper-parameter tuning adds further complexity and boilerplate code\n\nFluidML attempts to solve all of the above issues without restricting the user's flexibility.\n\n## Key Features\n\nFluidML provides following functionalities out-of-the-box:\n\n- **Task Graphs** - Create ML pipelines as a directed task graph using simple APIs\n- **Results Forwarding** - Results from tasks are automatically forwarded to downstream tasks based on dependencies\n- **Parallel Processing** - Execute the task graph parallely with multi-processing\n- **Grid Search** - Extend the task graph by enabling grid search on tasks with just one line of code\n- **Result Caching** - Task results are persistently cached in a results store (e.g.: Local File Store or a MongoDB Store) and made available for subsequent runs without executing the tasks again and again\n- **Flexibility** - Provides full control on your task implementations. You are free to choose any framework of your choice (Sklearn, TensorFlow, Pytorch, Keras, or any of your favorite library)\n\n---\n\n## Getting Started\n\n### Installation\n\n#### 1. From Pip\nSimply execute:  \n```bash\n$ pip install fluidml\n```\n\n#### 2. From Source\n1. Clone the repository,\n2. Navigate into the cloned directory (contains the setup.py file),\n3. Execute `$ pip install .`\n\n**Note:** To run demo examples, execute `$ pip install fluidml[examples]` (Pip) or `$ pip install .[examples]` (Source) to install the additional requirements.\n\n### Minimal Example\n\nThis minimal toy example showcases how to get started with FluidML.\nFor real machine learning examples, check the \"Examples\" section below.\n\n#### 1. Define Tasks\n\nFirst, we define some toy machine learning tasks. A Task can be implemented as a function or as a class inheriting from our `Task` class.\n\nIn case of the class approach, each task must implement the `run()` method, which takes some inputs and performs the desired functionality. \nThese inputs are actually the results from predecessor tasks and are automatically forwarded by FluidML based on registered task dependencies. \nIf the task has any hyper-parameters, they can be defined as arguments in the constructor. \nAdditionally, within each task, users have access to special `Task` methods and attributes like \n`self.save()` and `self.resource` to save a result and access task resources (more on that later).\n\n```Python\nfrom fluidml import Task\n\n\nclass MyTask(Task):\n    def __init__(self, config_param_1, config_param_2):\n        ...\n    def run(self, predecessor_result_1, predecessor_result_2):\n        ...\n```\n\nor\n\n```Python\ndef my_task(predecessor_result_1, predecessor_result_2, config_param_1, config_param_2, task: Task):\n    ...\n```\n\nIn the case of defining the task as callable, an extra task object is provided to the task,\nwhich makes important internal attributes and functions like `task.save()` and `task.resource` available to the user.\n\nBelow, we define standard machine learning tasks such as dataset preparation, pre-processing, featurization and model training using Task classes.\nNotice that:\n\n- Each task is implemented individually and it's clear what the inputs are (check arguments of `run()` method)\n- Each task saves its results using `self.save(...)` by providing the object to be saved and a unique name for it. \n  This unique name corresponds to input names in successor task definitions.\n\n```Python\nclass DatasetFetchTask(Task):\n    def run(self):\n        ...           \n        self.save(obj=data_fetch_result, name=\"data_fetch_result\")\n\n\nclass PreProcessTask(Task):\n    def __init__(self, pre_processing_steps: List[str]):\n        super().__init__()\n        self._pre_processing_steps = pre_processing_steps\n\n    def run(self, data_fetch_result):\n        ...\n        self.save(obj=pre_process_result, name=\"pre_process_result\")\n\n\nclass TFIDFFeaturizeTask(Task):\n    def __init__(self, min_df: int, max_features: int):\n        super().__init__()\n        self._min_df = min_df\n        self._max_features = max_features\n\n    def run(self, pre_process_result):\n        ...\n        self.save(obj=tfidf_featurize_result, name=\"tfidf_featurize_result\")\n\n\nclass GloveFeaturizeTask(Task):\n    def run(self, pre_process_result):\n        ...\n        self.save(obj=glove_featurize_result, name=\"glove_featurize_result\")\n\n\nclass TrainTask(Task):\n    def __init__(self, max_iter: int, balanced: str):\n        super().__init__()\n        self._max_iter = max_iter\n        self._class_weight = \"balanced\" if balanced else None\n\n    def run(self, tfidf_featurize_result, glove_featurize_result):\n        ...\n        self.save(obj=train_result, name=\"train_result\")\n\n\nclass EvaluateTask(Task):\n    def run(self, train_result):\n        ...\n        self.save(obj=evaluate_result, name=\"evaluate_result\")\n```\n\n#### 2. Task Specifications\n\nNext, we can create the defined tasks with their specifications. \nWe now only write their specifications, later these are used to create real instances of tasks by FluidML.\n\nNote the `config` argument holds the configuration of the task (i.e. hyper-parameters).\n\n\n```Python\nfrom fluidml import TaskSpec\n\n\ndataset_fetch_task = TaskSpec(task=DatasetFetchTask)\npre_process_task = TaskSpec(task=PreProcessTask, config={\"pre_processing_steps\": [\"lower_case\", \"remove_punct\"]})\nfeaturize_task_1 = TaskSpec(task=GloveFeaturizeTask)\nfeaturize_task_2 = TaskSpec(task=TFIDFFeaturizeTask, config={\"min_df\": 5, \"max_features\": 1000})\ntrain_task = TaskSpec(task=TrainTask, config={\"max_iter\": 50, \"balanced\": True})\nevaluate_task = TaskSpec(task=EvaluateTask)\n```\n\n#### 3. Registering task dependencies\n\nHere we create the task graph by registering dependencies between the tasks. \nIn particular, for each task specifier, you can register a list of predecessor tasks using the `requires()` method.\n\n```Python\npre_process_task.requires(dataset_fetch_task)\nfeaturize_task_1.requires(pre_process_task)\nfeaturize_task_2.requires(pre_process_task)\ntrain_task.requires(dataset_fetch_task, featurize_task_1, featurize_task_2)\nevaluate_task.requires(dataset_fetch_task, featurize_task_1, featurize_task_2, train_task)\n```\n\n#### 4. Configure Logging\n\nFluidML internally utilizes Python's `logging` library. However, we refrain from configuring a logger object with handlers\nand formatters since each user has different logging needs and preferences. Hence, if you want to use FluidML's logging\ncapability, you just have to do the configuration yourself. For convenience, we provide a simple utility function which\nconfigures a visually appealing logger (using a specific handler from the [rich](https://github.com/willmcgugan/rich) library).\n\nWe highly recommend to enable logging in your fluidml application in order to benefit from console progress logging.\n\n```python\nfrom fluidml import configure_logging\n\n\nconfigure_logging()\n```\n\n#### 5. Run tasks using Flow\n\nNow that we have all the tasks specified, we can just run the task graph. \nFor that, we create the task flow by passing all tasks to the `Flow()` class.\nSubsequently, we execute the task graph by calling `flow.run()`.\n\n```Python\nfrom fluidml import Flow\n\n\ntasks = [dataset_fetch_task, pre_process_task, featurize_task_1,\n         featurize_task_2, train_task, evaluate_task]\n\nflow = Flow(tasks=tasks)\nresults = flow.run()\n```\n\n---\n\n## Functionality\n\nThe following sections highlight the most important features and options when specifying and executing a task pipeline.\nFor a complete documentation of all available options we refer to the [API documentation](https://fluidml.readthedocs.io/en/latest/).\n\n### Grid Search - Automatic Task Expansion\n\nWe can easily enable grid search for our tasks with just one line of code. \nWe just have to provide the `expand` argument with the `product` and `zip` expansion option to the `TaskSpec` constructor. \nAutomatically, all `List` elements in the provided config are recursively unpacked and taken into account for expansion.\nIf a list itself is an argument and should not be expanded, it has to be wrapped again in a list. \n\n```Python\ntrain_task = TaskSpec(\n  task=TrainTask,\n  config={\"max_iter\": [50, 100], \"balanced\": [True, False], \"layers\": [[50, 100, 50]]},\n  expand=\"product\",  # or 'zip'\n)\n```\n\nThat's it! Flow expands this task specification into 4 tasks with provided cross product combinations of `max_iter` and `balanced`. \nAlternatively, using `zip` the expansion method would result in 2 expanded tasks, \nwith the respective `max_iter` and `balanced` combinations of `(50, True), (100, False)`. \n\nNote `layers` is not considered for different grid search realizations since it will be unpacked and the actual list \nvalue will be passed to the task.\nFurther, any successor tasks (for instance, evaluate task) in the task graph will also be automatically expanded. \nTherefore, in our example, we would have 4 evaluate tasks, each one corresponding to the 4 train tasks.\n\nFor more advanced Gird Search Expansion options we refer to the documentation.\n\n\n### Model Selection\n\nRunning a complete machine learning pipeline usually yields trained models for many grid search parameter combinations.\nA common goal is then to automatically determine the best hyper-parameter setup and the best performing model.\nFluidML enables just that by providing a `reduce=True` argument to the `TaskSpec` class. Hence, to automatically \ncompare the 4 evaluate tasks and select the best performing model, we implement an additional `ModelSelectionTask`\nwhich gets wrapped by our `TaskSpec` class.\n\n```Python\nclass ModelSelectionTask(Task):\n    def run(self, train_result: List[Sweep]):\n        # from all trained models/hyper-parameter combinations, determine the best performing model\n        ...\n\nmodel_selection_task = TaskSpec(task=ModelSelectionTask, reduce=True)\n\nmodel_selection_task.requires(evaluate_task)\n```\n\nThe important `reduce=True` argument enables that a single `ModelSelectionTask` instance gets the training results\nfrom all grid search expanded predecessor tasks.\n`train_result` is of type `List[Sweep]` and holds the results and configs of all specified grid search parameter combination. For example:\n\n```Python\ntrain_result = [\n    Sweep(value=value_1, config={...}),  # first unique parameter combination config\n    Sweep(value=value_2, config={...}),  # second unique parameter combination config\n    ...\n]\n```\n\n### Result Store\n\nFluidML provides the `ResultStore` interface to efficiently save, load and delete task results. Internally, the result store is used\nto automatically collect saved predecessor results and pass the collected results as inputs to defined successor tasks.\n\nBy default, results of tasks are stored in an `InMemoryStore`, which might be impractical for large datasets/models or long running tasks since the results are not persistent. \nTo have persistent storage, FluidML provides two fully implemented `ResultsStore` namely `LocalFileStore` and `MongoDBStore`.\n\nAdditionally, users can provide their own results store to `Flow.run()` by inheriting from the `ResultsStore` interface \nand implementing `load()`, `save()`, `delete()`, `delete_run()` and `get_context()` methods. \nNote these methods rely on task name and its config parameters, which act as lookup-key for results. \nIn this way, tasks are skipped by FluidML when task results are already available for the given config. \nBut users can override and force execute tasks by passing `force` parameter to the `Flow.run()` methods. \nFor details check the API documentation.\n\n```Python\nclass MyResultsStore(ResultsStore):\n    def load(self, name: str, task_name: str, task_unique_config: Dict, **kwargs) -> Optional[Any]:\n        \"\"\" Query method to load an object based on its name, task_name and task_config if it exists \"\"\"\n        raise NotImplementedError\n\n    def save(self, obj: Any, name: str, type_: str, task_name: str, task_unique_config: Dict, **kwargs):\n        \"\"\" Method to save/update any artifact \"\"\"\n        raise NotImplementedError\n\n    def delete(self, name: str, task_name: str, task_unique_config: Dict):\n        \"\"\" Method to delete any artifact \"\"\"\n        raise NotImplementedError\n\n    def delete_run(self, task_name: str, task_unique_config: Dict):\n        \"\"\"Method to delete all task results from a given run config\"\"\"\n        raise NotImplementedError\n\n    def get_context(self, task_name: str, task_unique_config: Dict) -> StoreContext:\n        \"\"\"Method to get store specific storage context, e.g. the current run directory for Local File Store\"\"\"\n        raise NotImplementedError\n```\n\nWe can instantiate for example a `LocalFileStore`\n\n```python\nresults_store = LocalFileStore(base_dir=\"/some/dir\")\n```\n\nand use it to enable persistent results storing via `flow.run(results_store=results_store)`.\n\n### Multiprocessing\n\nFluidML automatically infers the optimal number of worker processes based on the expanded task graph and the number of available CPUs\nin your system. If the resulting number is greater than 1, `Flow` will automatically run the graph in parallel using multiprocessing.\nIf 1 worker is optimal and no multiprocessing is needed, the task graph will be executed in the main process without multiprocessing.\n\nYou can manually control the number of workers by providing the `num_workers` argument to `flow.run()`.\n\n### Logging\n\nInternally, FluidML makes use of Python's `logging` library to visualize and log the progress of the task pipeline execution\nin the console. We recommend to configure `logging` in your fluidml application for a better user experience.\nFor convenience, we provide a simple utility function `configure_logging()` which configures a visually appealing logger \n(using a specific handler from the [rich](https://github.com/willmcgugan/rich) library). For different logging options \nwe refer to the documentation.\n\nIn the case of executing the task graph in parallel with multiple workers using multiprocessing, the console output might become\ngarbled and unreadable. In that scenario you can turn on [tmux](https://github.com/tmux/tmux/wiki) logging py providing the `log_to_tmux` argument:\n`flow.run(log_to_tmux=True)`. In addition to the standard console, a `tmux` terminal session with `num_worker` panes is automatically started.\nEach worker process logs to a dedicated pane in the tmux session so that the console output is nicely readable.\n\nNote `log_to_tmux=True` requires the [installation](https://github.com/tmux/tmux/wiki/Installing) of tmux.\n\n\n### Visualization\n\nFluidML provides functions to visualize the original task specification graph as well as the (potentially expanded) task graph, which facilitates debugging.\nAfter instantiating the `Flow` object we have access to the task specification graph `flow.task_spec_graph` and the\nexpanded task graph `flow.task_graph`.\n\nBoth graphs can be visualized in the console `visualize_graph_in_console` or in the browser or a jupyter notebook `visualize_graph_interactive`.\n\n```Python\nfrom fluidml.visualization import visualize_graph_in_console, visualize_graph_interactive\n\n\nflow = Flow(tasks=tasks)\n\nvisualize_graph_in_console(graph=flow.task_spec_graph)\nvisualize_graph_interactive(graph=flow.task_graph, browser=\"firefox\")\n```\nWhen using console visualization the default arguments `use_pager=True` and `use_unicode=False` will render the graph in ascii within a pager for horizontal scrolling support. \nIf `use_pager=False` the graph is simply printed and if `use_unicode=True` a visually more appealing unicode character set is used for console rendering. \nHowever not every console supports unicode characters.\n\nSee below the console visualization of the task specification graph and the expanded task graph from our minimal example:\n\n<div align=\"center\">\n<img src=\"logo/task_spec_graph.png\" width=\"500px\">\n</div>\n\n<div align=\"center\">\n<img src=\"logo/task_graph.png\">\n</div>\n\nWhen using interactive visualization the default output is to a running jupyter notebook.\nIf you want the graph to be rendered in a browser, provide the `browser` argument to `visualize_graph_interactive()`, e.g. \n`visualize_graph_interactive(graph=flow.task_graph, browser=\"chrome\")`. You might receive a `webbrowser` error: \n`webbrowser.Error: could not locate runnable browser` which means that you have to register the browser manually so that\nPython's `webbrowser` library can find it. Registering can be done via\n\n```python\nimport webbrowser\nwebbrowser.register(\n  \"chrome\", None, webbrowser.BackgroundBrowser(\"/path/to/chrome/executable\")\n)\n```\n\n---\n\n## Examples\n\nFor real machine learning pipelines including grid search implemented with FluidML, check our\nJupyter Notebook tutorials:\n\n- [Transformer based Sequence to Sequence Translation (PyTorch)](https://github.com/fluidml/fluidml/blob/main/examples/pytorch_transformer_seq2seq_translation/transformer_seq2seq_translation.ipynb)\n- [Multi-class Text Classification (Sklearn)](https://github.com/fluidml/fluidml/blob/main/examples/sklearn_text_classification/sklearn_text_classification.ipynb)\n\n---\n\n## Citation\n\n```\n@article{fluid_ml,\n  title = {FluidML - a lightweight framework for developing machine learning pipelines},\n  author = {Hillebrand, Lars and Ramamurthy, Rajkumar},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/fluidml/fluidml}},\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/fluidml/fluidml/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fluidml/fluidml/",
    "keywords": "pipelines,machine-learning,parallel,deep-learning",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fluidml",
    "package_url": "https://pypi.org/project/fluidml/",
    "platform": null,
    "project_url": "https://pypi.org/project/fluidml/",
    "project_urls": {
      "Download": "https://github.com/fluidml/fluidml/",
      "Homepage": "https://github.com/fluidml/fluidml/"
    },
    "release_url": "https://pypi.org/project/fluidml/0.3.1/",
    "requires_dist": [
      "bokeh (>=2.4.3)",
      "grandalf (>=0.7)",
      "metadict (>=0.1.3)",
      "networkx (>=2.5)",
      "pydantic (>=1.0)",
      "rich (>=9.13.0)",
      "tblib (>=1.7.0)",
      "datasets ; extra == 'examples'",
      "flair ; extra == 'examples'",
      "jupyterlab ; extra == 'examples'",
      "numpy ; extra == 'examples'",
      "pyyaml ; extra == 'examples'",
      "requests ; extra == 'examples'",
      "sklearn ; extra == 'examples'",
      "tokenizers (>=0.10.1) ; extra == 'examples'",
      "torchtext (>=0.8.1) ; extra == 'examples'",
      "torch ; extra == 'examples'",
      "tqdm ; extra == 'examples'",
      "mongoengine (>=0.27.0) ; extra == 'mongo-store'",
      "pytest (>=7.0.0) ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "black (>=22.6) ; extra == 'tests'",
      "pre-commit (>=2.17.0) ; extra == 'tests'"
    ],
    "requires_python": ">=3.7.0",
    "summary": "FluidML is a lightweight framework for developing machine learning pipelines. Focus only on your tasks and not the boilerplate!",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17196288,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fffc028d61f90e67a8bf1224526b5ade38298f09e793a9ffda6842c35f299146",
          "md5": "aa87c2ab3ede3abd079a7190bf78ae63",
          "sha256": "16baba6c6d5dab0fb9017f439b2a0b6ac1f83031d4239103961256535e2e1105"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa87c2ab3ede3abd079a7190bf78ae63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30476,
        "upload_time": "2021-02-02T22:48:05",
        "upload_time_iso_8601": "2021-02-02T22:48:05.852995Z",
        "url": "https://files.pythonhosted.org/packages/ff/fc/028d61f90e67a8bf1224526b5ade38298f09e793a9ffda6842c35f299146/fluidml-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2d8ae21a3a4f500bed6bee888334d88ce8ab0f9038ea7ef8bface0ec2c6ec43",
          "md5": "5e0dbd902c2ba717e8c730111a25952f",
          "sha256": "2162e4967030f0b514656b1d007806b863ffc38827970d364a1fd3e2d1ddd9ac"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e0dbd902c2ba717e8c730111a25952f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26252,
        "upload_time": "2021-02-02T22:48:07",
        "upload_time_iso_8601": "2021-02-02T22:48:07.236568Z",
        "url": "https://files.pythonhosted.org/packages/d2/d8/ae21a3a4f500bed6bee888334d88ce8ab0f9038ea7ef8bface0ec2c6ec43/fluidml-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af31bd01a551250bfc2b46ca9ed50053f640e95d31d66dfee35761dd596c416",
          "md5": "757a355c4c59c7e5795cb59edb26f9d6",
          "sha256": "4758d3229d838f7616728142abf63aad70418ef6992f2d137707ce77bd062568"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "757a355c4c59c7e5795cb59edb26f9d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30560,
        "upload_time": "2021-02-02T23:33:52",
        "upload_time_iso_8601": "2021-02-02T23:33:52.316828Z",
        "url": "https://files.pythonhosted.org/packages/6a/f3/1bd01a551250bfc2b46ca9ed50053f640e95d31d66dfee35761dd596c416/fluidml-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "104d300d152ce752d6a144426483804dafcb7d67df5577e00b64915422c850ab",
          "md5": "8b070731c38897c768141ee89b07a74e",
          "sha256": "ff133dee77985f16c48ab6bb0a2aebca2aefd329e308fe65f2cb42a3f3eb408e"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8b070731c38897c768141ee89b07a74e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26393,
        "upload_time": "2021-02-02T23:33:53",
        "upload_time_iso_8601": "2021-02-02T23:33:53.642256Z",
        "url": "https://files.pythonhosted.org/packages/10/4d/300d152ce752d6a144426483804dafcb7d67df5577e00b64915422c850ab/fluidml-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "945cff7624422e00b3291007e572a73d4fac105685479f3a0c1841b59d72bc81",
          "md5": "fc41f2435c583c909e99f721f2f5234d",
          "sha256": "7a54e9ba287f421639d23dee66a9ab025df9b2352f9ffbe0141934d354b46053"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc41f2435c583c909e99f721f2f5234d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32971,
        "upload_time": "2021-02-17T21:24:26",
        "upload_time_iso_8601": "2021-02-17T21:24:26.299276Z",
        "url": "https://files.pythonhosted.org/packages/94/5c/ff7624422e00b3291007e572a73d4fac105685479f3a0c1841b59d72bc81/fluidml-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b17ffe233a1c05f70b37ffcd7d313413d243b4594db00ff355a93c0c8196c1b",
          "md5": "5aa5b478fe0cbcac88ebd913ad5daa40",
          "sha256": "66b7fceded90d46df3b93c7d2cb314d278c034edc0c5004adcd49f091a55af7a"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5aa5b478fe0cbcac88ebd913ad5daa40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28662,
        "upload_time": "2021-02-17T21:24:27",
        "upload_time_iso_8601": "2021-02-17T21:24:27.362795Z",
        "url": "https://files.pythonhosted.org/packages/7b/17/ffe233a1c05f70b37ffcd7d313413d243b4594db00ff355a93c0c8196c1b/fluidml-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fed02999c635c25293de730e563b40ddb5d103702bcad414bd0138a140e3577",
          "md5": "1301bdfaff779810d7d72f8eff08b29e",
          "sha256": "042e27a9b90150ae8e883d5ca37fee2ee82a38ac57249e84dff4b36ea4577d2f"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1301bdfaff779810d7d72f8eff08b29e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34015,
        "upload_time": "2021-02-20T18:59:55",
        "upload_time_iso_8601": "2021-02-20T18:59:55.753155Z",
        "url": "https://files.pythonhosted.org/packages/8f/ed/02999c635c25293de730e563b40ddb5d103702bcad414bd0138a140e3577/fluidml-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "872d32d536330f0aafcf51378ba85722f1e6fc3bce924f340cbf3dd1f59fb157",
          "md5": "ae8aeb8a5e4cca40d69a5716fd9ac9f5",
          "sha256": "5d1b983ad6d9614e3a4b9c69dac5da467c5da9904051bbd5043f5e6802afbdd2"
        },
        "downloads": -1,
        "filename": "fluidml-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ae8aeb8a5e4cca40d69a5716fd9ac9f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30281,
        "upload_time": "2021-02-20T18:59:56",
        "upload_time_iso_8601": "2021-02-20T18:59:56.940511Z",
        "url": "https://files.pythonhosted.org/packages/87/2d/32d536330f0aafcf51378ba85722f1e6fc3bce924f340cbf3dd1f59fb157/fluidml-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a6f0a209768012a225ea96767c01b4284de5efe6da00bdfb3448752e6ff2dfe",
          "md5": "99ddc430e8cbb0a74f5fd0130220238f",
          "sha256": "b7d47fd722b7be71253de1bd2f5f90dc49119f6f2953e7b03bb68562ec497adb"
        },
        "downloads": -1,
        "filename": "fluidml-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99ddc430e8cbb0a74f5fd0130220238f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45850,
        "upload_time": "2021-06-06T12:28:25",
        "upload_time_iso_8601": "2021-06-06T12:28:25.120047Z",
        "url": "https://files.pythonhosted.org/packages/1a/6f/0a209768012a225ea96767c01b4284de5efe6da00bdfb3448752e6ff2dfe/fluidml-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ef39887526a1f9592589353670133cbaaf3dc1ac637cfd03f238ab2b030e197",
          "md5": "0120de1fa9d30960f35c8875a0275433",
          "sha256": "78fc7ff8b0309054c8a293dad32e21a6ab46c21cac7834529ee048a0e6141b6a"
        },
        "downloads": -1,
        "filename": "fluidml-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0120de1fa9d30960f35c8875a0275433",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41335,
        "upload_time": "2021-06-06T12:28:26",
        "upload_time_iso_8601": "2021-06-06T12:28:26.277060Z",
        "url": "https://files.pythonhosted.org/packages/3e/f3/9887526a1f9592589353670133cbaaf3dc1ac637cfd03f238ab2b030e197/fluidml-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbba4033d0c6eb1b71a49ae432795e5094114a8893f9297b07566172759767ca",
          "md5": "7de127719ec246aabff849b39ec4cd8d",
          "sha256": "5c3b69bb6355664e3142386515390052334a56d39e8b2d83d5824eafd76e91af"
        },
        "downloads": -1,
        "filename": "fluidml-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7de127719ec246aabff849b39ec4cd8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 80423,
        "upload_time": "2023-03-07T18:10:57",
        "upload_time_iso_8601": "2023-03-07T18:10:57.426549Z",
        "url": "https://files.pythonhosted.org/packages/cb/ba/4033d0c6eb1b71a49ae432795e5094114a8893f9297b07566172759767ca/fluidml-0.3.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "The optional mongoengine library must be additionally installed for the library to work, which should not be the case. Please upgrade to 0.3.1 or higher."
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c33157a0fba6348d12a63e1b8d45106323028d861fa74404cf1ca1505538791",
          "md5": "cbabd6b47b1586c8fca6cd2db66d5804",
          "sha256": "f66cf5a7ec885e848062bb1c9beee2209ef9f00865160a92169b9cf76c0019bb"
        },
        "downloads": -1,
        "filename": "fluidml-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbabd6b47b1586c8fca6cd2db66d5804",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 72520,
        "upload_time": "2023-03-07T18:10:59",
        "upload_time_iso_8601": "2023-03-07T18:10:59.227805Z",
        "url": "https://files.pythonhosted.org/packages/0c/33/157a0fba6348d12a63e1b8d45106323028d861fa74404cf1ca1505538791/fluidml-0.3.0.tar.gz",
        "yanked": true,
        "yanked_reason": "The optional mongoengine library must be additionally installed for the library to work, which should not be the case. Please upgrade to 0.3.1 or higher."
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fdd66c275a3615a20c52ff9f9dfe4d5ca037853c53c4db3663d52446f6dda75",
          "md5": "d29858794c708ee2ddab1770c43970ac",
          "sha256": "6e3f6ad3853086c25147c130f1a903a672c6dbc243428e77d3ed59bd4853eb80"
        },
        "downloads": -1,
        "filename": "fluidml-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d29858794c708ee2ddab1770c43970ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 80395,
        "upload_time": "2023-03-07T21:05:40",
        "upload_time_iso_8601": "2023-03-07T21:05:40.209029Z",
        "url": "https://files.pythonhosted.org/packages/7f/dd/66c275a3615a20c52ff9f9dfe4d5ca037853c53c4db3663d52446f6dda75/fluidml-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d768c595dbd4da2746f26adce4623c45a028d29e119d2b26ba5bf20d5e909d",
          "md5": "cb0baf554ee26f13ec7ca87bc43eb7ae",
          "sha256": "50803cef57a3e96e7f9ec3da8082b15efb08a7b2a78a0dfc5bbd16179d5a2eb1"
        },
        "downloads": -1,
        "filename": "fluidml-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb0baf554ee26f13ec7ca87bc43eb7ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 72482,
        "upload_time": "2023-03-07T21:05:42",
        "upload_time_iso_8601": "2023-03-07T21:05:42.035552Z",
        "url": "https://files.pythonhosted.org/packages/15/d7/68c595dbd4da2746f26adce4623c45a028d29e119d2b26ba5bf20d5e909d/fluidml-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fdd66c275a3615a20c52ff9f9dfe4d5ca037853c53c4db3663d52446f6dda75",
        "md5": "d29858794c708ee2ddab1770c43970ac",
        "sha256": "6e3f6ad3853086c25147c130f1a903a672c6dbc243428e77d3ed59bd4853eb80"
      },
      "downloads": -1,
      "filename": "fluidml-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d29858794c708ee2ddab1770c43970ac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 80395,
      "upload_time": "2023-03-07T21:05:40",
      "upload_time_iso_8601": "2023-03-07T21:05:40.209029Z",
      "url": "https://files.pythonhosted.org/packages/7f/dd/66c275a3615a20c52ff9f9dfe4d5ca037853c53c4db3663d52446f6dda75/fluidml-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15d768c595dbd4da2746f26adce4623c45a028d29e119d2b26ba5bf20d5e909d",
        "md5": "cb0baf554ee26f13ec7ca87bc43eb7ae",
        "sha256": "50803cef57a3e96e7f9ec3da8082b15efb08a7b2a78a0dfc5bbd16179d5a2eb1"
      },
      "downloads": -1,
      "filename": "fluidml-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cb0baf554ee26f13ec7ca87bc43eb7ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 72482,
      "upload_time": "2023-03-07T21:05:42",
      "upload_time_iso_8601": "2023-03-07T21:05:42.035552Z",
      "url": "https://files.pythonhosted.org/packages/15/d7/68c595dbd4da2746f26adce4623c45a028d29e119d2b26ba5bf20d5e909d/fluidml-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}