{
  "info": {
    "author": "Thomas Meder",
    "author_email": "tom@tommho.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Logging"
    ],
    "description": "# About VsMetaFileEncoder\n## Summary\nNAS manufacturer [Synology](https://www.synology.com/) provides, for its network attached storage devices (NAS), a video content manager called *Video Station*. The application enables the NAS to stream videos over your LAN. Information about these videos are stored in a local Postgres database and optionally by files with extension *.vsmeta*. The format is proprietary. \nThe tool provided here is able to write vsMetaFiles. The structure has been elaborated by reverse engineering and ressources found [here](https://gist.github.com/soywiz/2c10feb1231e70aca19a58aca9d6c16a). Many thanks to [Carlos Ballesteros Velasco](https://github.com/soywiz).\n\n## Prerequisites\nOnce a video is written into a directory, *Video Station* looks for *.vsmeta* files if these conditions are met:\n* The folder is part of a *Video Station* library.\n* At least once, an export of meta data has been triggered. This can be done at the library settings of Video Station.\n* The *.vsmeta* file has the same name as the video, appended by *.vsmeta*.\nExample: The video is called `video.mpg`, the meta data file shall be named `video.mpg.vsmeta`.\n* The *.vsmeta* file is available when *Video Station* indexes the video file first time.\n* The content type (movie, series, other) is equal to the type specified in the *.vsmeta* file.\n\n## Limitations\n* Media type 'others' is currently not supported.\n* Some fields are not yet supported. See list below.\n\n## How to use the code\n\nHere's an example piece of code. Other examples can be found in the unit test classes.\n\n```python:\n\n    import os\n    from vsmetaEncoder.vsmetaMovieEncoder import VsMetaMovieEncoder\n    from vsmetaEncoder.vsmetaInfo import VsMetaInfo\n\n    class writeVsMetaForMovie():\n\n        def test_encodeTemplate4(self):\n\n            writer = VsMetaMovieEncoder()\n\n            info = writer.info\n            info.episodeTitle = 'Nach der Hochzeit'\n            info.showTitle = 'Kino - Filme'\n            info.setEpisodeDate(date(2021, 3, 8))\n            info.chapterSummary = 'Um die drohende SchlieÃŸung seines indischen Waisenhauses abzuwenden...'\n\n            writeVsMetaFile(os.path.join(os.path.dirname(os.path.realpath(__file__)),'videp.mp4.vsmeta'), writer.encode(info))\n```\n\n\n# Field mapping\n\nHere's how to use the vsMetaInfo class for the different media types.\n\n## Series\n\nTo encode the episode of a series, use the `vsMetaInfo` class with a `vsMetaSeriesEncoder`. Have a look at the test classes to see how it works best. The table below describes how to set the `vsMetaInfo` properties.\n\nField in Video Station | vsMetaInfo property | Remark\n---------------------- | ------------------- | ----------------\nTV Show Name           | `showTitle`\nPublishing Date        | `setEpisodeReleaseDate()` | Use method instead of direct value assignment.\nEpisode Title          | `episodeTitle`\nSeason                 | `season`            | If not set, defaulted with publishing year of episode.\nEpisode                | `episode`           | If not set, defaulted with week number x 10 plus weekday number (Monday is 1).\nPublishing Date (Episode)| `setShowDate()`   | Use method instead of direct value assignment.\nLocked                 | `episodeLocked`\nSummary                | `chapterSummary`\n\nNot supported yet:\n\n* Classification\n* Rating\n* Genre\n* Cast\n* Author\n\n## Movies\n\nTo encode a TV film or movie, use the `vsMetaInfo` class with a `vsMetaMoviesEncoder`. The property names might be confusing, don't think too much about it - just use them as listed below.\n\nField in Video Station | vsMetaInfo property | Remark\n---------------------- | ------------------- | ----------------\nTitle                  | `showTitle`\nShort Title            | `episodeTitle`\nPublishing Date        | `setEpisodeDate()`   | Use method instead of direct value assignment.\nLocked                 | `episodeLocked`\nSummary                | `chapterSummary`\n\nNot supported yet: \n\n* Classification\n* Rating\n* Genre\n* Cast\n* Author\n\n## Media type 'other'\n\nThis media type is not supported, and probably won't. It is intended for private videos or artwork, which will be edited most likely manually at uploading.\n\n## Screen shots of the property screens for the media types\n\nHere are the screenshots of the supported media types in German English (I did not had English screenshots at hand - please add them if you have).\n\n![Properties of series](doc/properties_series.png) ![Properties of movies](doc/properties_movie.png)\n\n# References\n\n* Synology Video Station: \n    * [Help in Support Center](https://www.synology.com/en-en/knowledgebase/DSM/help/VideoStation/VideoStation_desc)\n    * [Product Page](https://www.synology.com/en-en/dsm/feature/video_station)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TomMeHo/vsMetaFileEncoder",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vsmetaEncoder",
    "package_url": "https://pypi.org/project/vsmetaEncoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/vsmetaEncoder/",
    "project_urls": {
      "Homepage": "https://github.com/TomMeHo/vsMetaFileEncoder"
    },
    "release_url": "https://pypi.org/project/vsmetaEncoder/0.9/",
    "requires_dist": [
      "datetime (>=4.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "A module to encode media information with Synology's vsmeta file format.",
    "version": "0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9794563,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d48ee4f5763e8a22e8e6dedbc6d32370b172076c0c8934459a22cb88c2c7469c",
          "md5": "df2c6d8afff25a05438441c36277ac59",
          "sha256": "d05c2c0bc3f4a119a8499fabd022bc97dcbdb37c38525d5cf3a2af9c0ac0257d"
        },
        "downloads": -1,
        "filename": "vsmetaEncoder-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df2c6d8afff25a05438441c36277ac59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8956,
        "upload_time": "2021-03-17T07:13:10",
        "upload_time_iso_8601": "2021-03-17T07:13:10.705327Z",
        "url": "https://files.pythonhosted.org/packages/d4/8e/e4f5763e8a22e8e6dedbc6d32370b172076c0c8934459a22cb88c2c7469c/vsmetaEncoder-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "def76e2ef5f2639d35048a8075d60f89eb257f09eee0f6df6a9217a3156cbe8f",
          "md5": "a2e075d09c440e2444375a326929fc98",
          "sha256": "1c446a443343b769542703fec2beb892eec454cc41ec2a9f5f48b6aee9ad80a9"
        },
        "downloads": -1,
        "filename": "vsmetaEncoder-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a2e075d09c440e2444375a326929fc98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8675,
        "upload_time": "2021-03-17T07:13:11",
        "upload_time_iso_8601": "2021-03-17T07:13:11.862770Z",
        "url": "https://files.pythonhosted.org/packages/de/f7/6e2ef5f2639d35048a8075d60f89eb257f09eee0f6df6a9217a3156cbe8f/vsmetaEncoder-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d48ee4f5763e8a22e8e6dedbc6d32370b172076c0c8934459a22cb88c2c7469c",
        "md5": "df2c6d8afff25a05438441c36277ac59",
        "sha256": "d05c2c0bc3f4a119a8499fabd022bc97dcbdb37c38525d5cf3a2af9c0ac0257d"
      },
      "downloads": -1,
      "filename": "vsmetaEncoder-0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df2c6d8afff25a05438441c36277ac59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8956,
      "upload_time": "2021-03-17T07:13:10",
      "upload_time_iso_8601": "2021-03-17T07:13:10.705327Z",
      "url": "https://files.pythonhosted.org/packages/d4/8e/e4f5763e8a22e8e6dedbc6d32370b172076c0c8934459a22cb88c2c7469c/vsmetaEncoder-0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "def76e2ef5f2639d35048a8075d60f89eb257f09eee0f6df6a9217a3156cbe8f",
        "md5": "a2e075d09c440e2444375a326929fc98",
        "sha256": "1c446a443343b769542703fec2beb892eec454cc41ec2a9f5f48b6aee9ad80a9"
      },
      "downloads": -1,
      "filename": "vsmetaEncoder-0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "a2e075d09c440e2444375a326929fc98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8675,
      "upload_time": "2021-03-17T07:13:11",
      "upload_time_iso_8601": "2021-03-17T07:13:11.862770Z",
      "url": "https://files.pythonhosted.org/packages/de/f7/6e2ef5f2639d35048a8075d60f89eb257f09eee0f6df6a9217a3156cbe8f/vsmetaEncoder-0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}