{
  "info": {
    "author": "WebCase",
    "author_email": "info@webcase.studio",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# WebCase django JWT authentication\n\nBased on [djangorestframework-simplejwt](https://pypi.org/project/djangorestframework-simplejwt/) with a little bit of additional goodies.\n\nUs it's documentation as a source of truth. All changes and additional info about configuration are described here, in this documentation.\n\n## Installation\n\n```sh\npip install wc-django-jwt\n```\n\nIn `settings.py`:\n\n```python\nINSTALLED_APPS += [\n  'rest_framework_simplejwt',\n\n  'wcd_jwt',\n]\n\nWCD_JWT = {\n  # Serializer class for JWT token.\n  'TOKEN_OBTAIN_SERIALIZER': 'wcd_jwt.serializers.TokenObtainPairSerializer',\n  # Serializer class for JWT token refresh.\n  'TOKEN_REFRESH_SERIALIZER': 'wcd_jwt.serializers.TokenRefreshSerializer',\n\n  # Authentication class that will be used by auth middleware to check tokens.\n  'AUTHENTICATION_CLASS': 'wcd_jwt.authentication.JWTAuthentication',\n  # Available token types to match on.\n  'TOKEN_TYPES': [\n    'rest_framework_simplejwt.tokens.AccessToken',\n    'rest_framework_simplejwt.tokens.RefreshToken',\n  ],\n  # Should you rotate refresh tokens on access refresh.\n  'ROTATE_REFRESH_TOKENS': False,\n  # Should you update lsat login field on user on token obtain call.\n  'UPDATE_LAST_LOGIN': False,\n}\n\nREST_FRAMEWORK = {\n  'DEFAULT_AUTHENTICATION_CLASSES': (\n    # Might be used to authenticate DRF requests.\n    'wcd_jwt.authentication.JWTAuthentication',\n  )\n}\n\nMIDDLEWARE = [\n  ...\n  'django.contrib.auth.middleware.AuthenticationMiddleware',\n  ...\n  # Authentication middleware must be placed after django's\n  # `AuthenticationMiddleware`.\n  'wcd_jwt.middleware.AuthenticationMiddleware',\n  ...\n]\n```\n\nThere are ready for use frontend for django rest framework. It mostly provided by `djangorestframework-simplejwt` with some additional changes.\n\nIn `urls.py`:\n\n```python\nfrom wcd_jwt.views import make_urlpatterns as jwt_make_urlpatterns\n\nurlpatters = [\n  ...\n  path(\n    'api/v1/auth/token/',\n    include((jwt_make_urlpatterns(), 'wcd_jwt'),\n    namespace='jwt-auth')\n  ),\n]\n```\n\nAnd after all that manipulations you end up with 4 views for jwt tokens authentication.\n\nFunction `make_urlpatterns` can take your custom views and replace default ones.\n\n## Token registry\n\nTokens by default are generate-and-forget things. In case you need to remember what tokens were created and for what users there is a contrib package added: `wcd_jwt.contrib.registry`.\n\nIt registers all your generated tokens. And may be used to force-expire any of them.\n\nIn `settings.py`:\n\n```python\nINSTALLED_APPS += [\n  'rest_framework_simplejwt',\n\n  'wcd_jwt',\n  'wcd_jwt.contrib.registry',\n]\n\nWCD_JWT = {\n  # Serializer class for JWT token refresh should be changed to:\n  'TOKEN_REFRESH_SERIALIZER': 'wcd_jwt.contrib.registry.serializers.TokenRefreshSerializer',\n\n  # If you want to block user not after trey'r access token expired, but\n  # at any time they made request change authentication class to:\n  'AUTHENTICATION_CLASS': 'wcd_jwt.contrib.registry.authentication.JWTAuthentication',\n}\n\nREST_FRAMEWORK = {\n  'DEFAULT_AUTHENTICATION_CLASSES': (\n    'wcd_jwt.contrib.registry.authentication.JWTAuthentication',\n  )\n}\n\nWCD_JWT_REGISTRY = {\n  # Token expire serializer may be replaced like this:\n  'TOKEN_EXPIRE_SERIALIZER': 'wcd_jwt.contrib.registry.serializers.TokenExpireSerializer',\n\n  # Automatically expire all other token in a tree except client's\n  # available refresh and access tokens.\n  # Works only when `TOKEN_REGISTRATION_ON_SIGNAL` enabled.\n  'TOKEN_EXPIRE_ON_REFRESH': False,\n\n  # Pipeline functions list for token registration runner.\n  'TOKEN_REGISTRATION_PIPELINE': [\n    'wcd_jwt.contrib.registry.services.pipeline.register_pairs',\n    'wcd_jwt.contrib.registry.services.pipeline.connecting_user',\n  ],\n  # Automatically runs token registration on wcd_jwt obtain and\n  # refresh signals sended.\n  'TOKEN_REGISTRATION_ON_SIGNAL': True,\n  # Run token registration parallel to main request. It lowers response\n  # wait time.\n  # It uses Thread(daemon=True) to accomplish \"parallelism\".\n  'TOKEN_REGISTRATION_ON_SIGNAL_PARALLEL': False,\n}\n```\n\nThe same for urls.\n\nIn `urls.py`:\n\n```python\nfrom wcd_jwt.contrib.registry.views import make_urlpatterns as jwt_registry_make_urlpatterns\n\nurlpatters = [\n  ...\n  path(\n    'api/v1/auth/token/',\n    include((jwt_registry_make_urlpatterns(), 'wcd_jwt_registry'),\n    namespace='jwt-auth-registry')\n  ),\n]\n```\n\nRegistry provides 2 models:\n- `Token` - Stores information about generated tokens. They are hierarchical. Hierarchy is based on which token was used to generate those from response. Refresh token will always be a parent for access token.\n- `TokenUserConnection` - Connects user to token model.\n\nThere is only one view at the moment that adds ability to expire any valid token.\n\nTo display tokens on the client you may made your own views. Package will not provide them, because there certainly will be additional logic to display, so wer'e not event bothering ourselves).\n\nTokens has some query methods to made querying easier:\n\n```python\nlist_of_expired_tokens = Token.objects.expired()\nlist_of_active_tokens = Token.objects.active()\n\n# Method `collect_tree` we can collect all the ids from token related trees\n# for any number of tokens we wish.\n# Here we collecting tree ids for some `token1`.\nlist_of_ids_for_all_the_token_relatives_tree = Token.objects.collect_tree(\n  ids=[token1.id]\n)\n\n# We may easily find tokens for a certain user:\nlist_of_users_tokens = Token.objects.filter(\n  user_connections__user=some_user_instance\n)\n\n# etc.\n```\n\nTo register tokens manually run registration pipeline:\n\n```python\nfrom wcd_jwt.contrib.registry.services import pipeline\n\npipeline.run({\n  # Token pairs: (child, parent)\n  'pairs': [\n    (AccessToken(''), RefreshToken('')),\n  ],\n  # Optional.\n  'user': user or None,\n  # Optional.\n  'request': request,\n})\n```\n\nOld tokens that are no longer active might be not useful anymore. For this case there is an **archiver** service:\n\n```python\nfrom wcd_jwt.contrib.registry.services import archiver\nfrom rest_framework_simplejwt.utils import aware_utcnow\n\narchiver.archive(\n  # There is also optional `now` parameter.\n  # Here, as an example, we deleting only tokens that expired more than\n  # 10 days ago.\n  # It will be `aware_utcnow()` by default.\n  now=aware_utcnow() - timedelta(days=10)\n)\n```\n\n## Token device registry\n\nAlso you may want to know what device was used to access site with registered token.\n\nIt depends on `wc-django-device-recognizer`. So it must be also added to installed apps.\n\n```python\nINSTALLED_APPS += [\n  'rest_framework_simplejwt',\n\n  'wcd_device_recognizer',\n\n  'wcd_jwt',\n  'wcd_jwt.contrib.registry',\n  'wcd_jwt.contrib.device_registry',\n]\n\n# To be able to register token interlocutors:\nWCD_JWT_REGISTRY_TOKEN_REGISTRATION_PIPELINE = [\n  'wcd_jwt.contrib.registry.services.pipeline.register_pairs',\n  'wcd_jwt.contrib.registry.services.pipeline.connecting_user',\n  # Add this to your registry pipeline\n  'wcd_jwt.contrib.device_registry.services.pipeline.connect_interlocutor',\n]\n```\n\nTo connect tokens with some interlocutor manually just run connector service:\n\n```python\nfrom wcd_jwt.contrib.device_registry.services import connector\n\nfrom wcd_device_recognizer.models import Interlocutor, InterlocutorNetwork\nfrom wcd_jwt.contrib.registry.models import Token\n\n\nconnections: List[TokenInterlocutorConnection] = connector.connect(\n  Interlocutor(),\n  [\n    Token(),\n  ],\n  # Optional.\n  network=InterlocutorNetwork(),\n)\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.3.6]\n### Changed\n- One interlocutor connection for one token by default, even if interlocutor and network are different next time.\n\n## [0.3.5]\n### Fixed\n- Token interlocutor connections duplication on it's registration.\n\n## [0.3.4]\n### Changed\n- Improvements in admin panel informativity.\n\n## [0.3.1]\n### Changed\n- Improvements in admin panel informativity.\n\n## [0.3.0]\n### Added\n- Device registry.\n- Token registry pipeline.\n- Expire old tokens on refresh.\n- Token archiver.\n\n### Changed\n- Extended configurations.\n\n### Fixed\n- Different fixes.\n\n## [0.2.3]\n### Fixed\n- Authentication fixes.\n\n## [0.2.0]\n### Added\n- Tokens registry.\n### Changed\n- Reduced amount of code dependent on simplejwt. Small improvements because of that and more flexible and extendable code as result.\n\n## [0.1.4]\n### Added\n- Translation strings.\n\n## [0.1.1]\nInitial version.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wc-django-jwt",
    "package_url": "https://pypi.org/project/wc-django-jwt/",
    "platform": null,
    "project_url": "https://pypi.org/project/wc-django-jwt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wc-django-jwt/0.3.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Django JWT authentication.",
    "version": "0.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17459206,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "361f89fe719f568bb836ff4510ac3aeebc09ccdcfc7f4841eb748583e79d3f6d",
          "md5": "23cb9fee168174fa0dc6af3456e28e1b",
          "sha256": "6f9c1d41c0d8fd84c324ac340d63384981ce18d41c875ff2f43f3de7518b3017"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "23cb9fee168174fa0dc6af3456e28e1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4757,
        "upload_time": "2022-04-06T16:55:23",
        "upload_time_iso_8601": "2022-04-06T16:55:23.124555Z",
        "url": "https://files.pythonhosted.org/packages/36/1f/89fe719f568bb836ff4510ac3aeebc09ccdcfc7f4841eb748583e79d3f6d/wc-django-jwt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49f0c4a3689d37a94ec785cef13d8e77b13dfa177618840f3bccbeed7fb996aa",
          "md5": "1a9cfa86069c12b296d97e0dd4331390",
          "sha256": "d88e24e0de24c2aac7fc1c6c7e5cf7c832fa9b3bdf513388c3953fe69f7523fd"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a9cfa86069c12b296d97e0dd4331390",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5815,
        "upload_time": "2022-04-07T13:39:36",
        "upload_time_iso_8601": "2022-04-07T13:39:36.375109Z",
        "url": "https://files.pythonhosted.org/packages/49/f0/c4a3689d37a94ec785cef13d8e77b13dfa177618840f3bccbeed7fb996aa/wc-django-jwt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f50bfa0ebea0419e884ac43cca5a755fbde3df6a281631cf6879cdf8fd8b3888",
          "md5": "c8958c9089a5593b963a76a3f20f83b6",
          "sha256": "7b691e3c68c8d71b3539e769a61a2623a24285e0663a421a3af6aa220017311d"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c8958c9089a5593b963a76a3f20f83b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6182,
        "upload_time": "2022-04-14T15:08:55",
        "upload_time_iso_8601": "2022-04-14T15:08:55.992878Z",
        "url": "https://files.pythonhosted.org/packages/f5/0b/fa0ebea0419e884ac43cca5a755fbde3df6a281631cf6879cdf8fd8b3888/wc-django-jwt-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4a9f9d0c0c2383f30710cf1a7af1b45715d96423b8e35eb358cdf0d671e3e0a",
          "md5": "772438d466d0c828e7495b3d87325254",
          "sha256": "32d5d08a4dee748419ee6803f7bcc5d9931819d84f2e7a7d11e218d52b37fba8"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "772438d466d0c828e7495b3d87325254",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18824,
        "upload_time": "2022-04-14T15:31:14",
        "upload_time_iso_8601": "2022-04-14T15:31:14.393911Z",
        "url": "https://files.pythonhosted.org/packages/e4/a9/f9d0c0c2383f30710cf1a7af1b45715d96423b8e35eb358cdf0d671e3e0a/wc-django-jwt-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa49a39f26e86cc2ab322d7125296b119602bd19f325936825f5616e2ccac0a",
          "md5": "2ff2660519692b0fcc72e72bcccc16e7",
          "sha256": "69dee5fdd5f5a31050d03b6d8e3c9beebaa3a6929f3555d5c2acc4ff34b3b430"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2ff2660519692b0fcc72e72bcccc16e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18897,
        "upload_time": "2022-04-15T06:47:06",
        "upload_time_iso_8601": "2022-04-15T06:47:06.729327Z",
        "url": "https://files.pythonhosted.org/packages/4f/a4/9a39f26e86cc2ab322d7125296b119602bd19f325936825f5616e2ccac0a/wc-django-jwt-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03f783a2eb2006f13a6538b9f2442084231621f9f3a0f126eb9f902b7b4c2faa",
          "md5": "24b94d56252a133ae1d74f6a8b43e892",
          "sha256": "c61566cb4a15bccc164e37d0fb4b8f2e6d694b534205b822269aa785669bc7b1"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24b94d56252a133ae1d74f6a8b43e892",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29585,
        "upload_time": "2022-07-20T07:48:09",
        "upload_time_iso_8601": "2022-07-20T07:48:09.558984Z",
        "url": "https://files.pythonhosted.org/packages/03/f7/83a2eb2006f13a6538b9f2442084231621f9f3a0f126eb9f902b7b4c2faa/wc-django-jwt-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0208ade9617e8fcdd6bbc4791b29aef6e3255cac9793244e9f810c654a0c78f4",
          "md5": "1a54b55a13540c3f86703c6a4eb3baac",
          "sha256": "d590443dffd2fd0695d56e83c8be22b6866e33ff573ab044ca5bed0ec1495315"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a54b55a13540c3f86703c6a4eb3baac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29448,
        "upload_time": "2022-07-20T07:49:55",
        "upload_time_iso_8601": "2022-07-20T07:49:55.788013Z",
        "url": "https://files.pythonhosted.org/packages/02/08/ade9617e8fcdd6bbc4791b29aef6e3255cac9793244e9f810c654a0c78f4/wc-django-jwt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5900cc143f9b212ec5cdc4116d90d0de272ab73e91df6c75cfab819418c04ee",
          "md5": "cab10701f3ed0474c8ea54406f8ef3ab",
          "sha256": "2bbfcabc1771111bc55f3cc0f220a93fdacaf8f8c52fb91d3727826943242b45"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cab10701f3ed0474c8ea54406f8ef3ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29523,
        "upload_time": "2022-07-20T12:07:14",
        "upload_time_iso_8601": "2022-07-20T12:07:14.769944Z",
        "url": "https://files.pythonhosted.org/packages/d5/90/0cc143f9b212ec5cdc4116d90d0de272ab73e91df6c75cfab819418c04ee/wc-django-jwt-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89a6f63e213e3f6a3e4b6bd701c4c3201e7c8761290c977e0ef861aff3d4b0c4",
          "md5": "4732b457e20d26ead1dbe89d57834ba7",
          "sha256": "6af4dda5812758dea543afd54bb1eb50856e7af689bcac6219e9296ff30e5c30"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4732b457e20d26ead1dbe89d57834ba7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29362,
        "upload_time": "2022-07-21T11:02:53",
        "upload_time_iso_8601": "2022-07-21T11:02:53.382909Z",
        "url": "https://files.pythonhosted.org/packages/89/a6/f63e213e3f6a3e4b6bd701c4c3201e7c8761290c977e0ef861aff3d4b0c4/wc-django-jwt-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d1f0b40391e99b845398068cbf3b1a014a11101805abaf6ec12d5e6183df2b0",
          "md5": "3da983473838adc7ad05fb3a572fa8f7",
          "sha256": "f8fc4d315b9ea73794827a25e35298d88722f4039294efdd72bed34b5272fb5b"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3da983473838adc7ad05fb3a572fa8f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34446,
        "upload_time": "2022-07-22T09:54:59",
        "upload_time_iso_8601": "2022-07-22T09:54:59.053875Z",
        "url": "https://files.pythonhosted.org/packages/0d/1f/0b40391e99b845398068cbf3b1a014a11101805abaf6ec12d5e6183df2b0/wc-django-jwt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dec0299d4b5546e75b190610728afdeaa615cdfd428cecf625b79bc17f5a3f5c",
          "md5": "c59333d9dd561216d358f8a4580d9269",
          "sha256": "1210839ec6b3fe3e575ea8d601b1ef897d372f21ed6467b98c002efa704422c2"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c59333d9dd561216d358f8a4580d9269",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27223,
        "upload_time": "2022-08-29T13:19:17",
        "upload_time_iso_8601": "2022-08-29T13:19:17.511839Z",
        "url": "https://files.pythonhosted.org/packages/de/c0/299d4b5546e75b190610728afdeaa615cdfd428cecf625b79bc17f5a3f5c/wc-django-jwt-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3ff4143558473a5cdf77f49ce5fb644bd30c02e436f92e7b82a5726525e426c",
          "md5": "ad68d2c98d094e5655f5188123d3afe5",
          "sha256": "de9b4f1458d3914bef3fbf0d5c8c01489b26eddd8686172614f7b5b45c6d5f6e"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad68d2c98d094e5655f5188123d3afe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27133,
        "upload_time": "2022-11-18T10:59:32",
        "upload_time_iso_8601": "2022-11-18T10:59:32.031052Z",
        "url": "https://files.pythonhosted.org/packages/c3/ff/4143558473a5cdf77f49ce5fb644bd30c02e436f92e7b82a5726525e426c/wc-django-jwt-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b395f420f332eafee58207a8618870503e41f1efbcef49d7961851475c9fc6",
          "md5": "3b1f329a1af4861a1a3dad68ef3c7a06",
          "sha256": "1a39c74589e9508f48a74bb6529d952c06ee88d68027f45bd2fb68dc76b28a7d"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3b1f329a1af4861a1a3dad68ef3c7a06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35478,
        "upload_time": "2022-12-27T15:15:30",
        "upload_time_iso_8601": "2022-12-27T15:15:30.598419Z",
        "url": "https://files.pythonhosted.org/packages/01/b3/95f420f332eafee58207a8618870503e41f1efbcef49d7961851475c9fc6/wc-django-jwt-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c707009e424c35d8df4b903c1aac268a51ddea36a4a8f914e55bcc4e11fdc4fa",
          "md5": "2e7e3982debc4c7f1962b0c2001247da",
          "sha256": "079680784200bc74a3bad8f08227fab3d1ecaa842eeb57b8e51877943996f7f1"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2e7e3982debc4c7f1962b0c2001247da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40358,
        "upload_time": "2023-03-24T08:06:53",
        "upload_time_iso_8601": "2023-03-24T08:06:53.676692Z",
        "url": "https://files.pythonhosted.org/packages/c7/07/009e424c35d8df4b903c1aac268a51ddea36a4a8f914e55bcc4e11fdc4fa/wc-django-jwt-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7fa7ec48a89138fa7ddd0cf7cb0beaa03fcc7c1b7c9b7ef01cd04a8bd96930d",
          "md5": "626f909ace355d44bb52cf74678d5d08",
          "sha256": "32230b01c7fd6758dbdd35c5e72b5c2aa6489254f2baa90fc96f9762e4cd6c75"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "626f909ace355d44bb52cf74678d5d08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40407,
        "upload_time": "2023-03-24T10:36:29",
        "upload_time_iso_8601": "2023-03-24T10:36:29.817368Z",
        "url": "https://files.pythonhosted.org/packages/d7/fa/7ec48a89138fa7ddd0cf7cb0beaa03fcc7c1b7c9b7ef01cd04a8bd96930d/wc-django-jwt-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87b0396a065d33da95c5549afd81c906365e9bb683b607fa3e326bb9ee731d3a",
          "md5": "acb57a498c7854f9495ae44a212ba01b",
          "sha256": "0f973eaf7084613dfcb85eaaba6450c8decfd97708db462782ad3df3c9fe1414"
        },
        "downloads": -1,
        "filename": "wc-django-jwt-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "acb57a498c7854f9495ae44a212ba01b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40615,
        "upload_time": "2023-03-27T09:40:57",
        "upload_time_iso_8601": "2023-03-27T09:40:57.313020Z",
        "url": "https://files.pythonhosted.org/packages/87/b0/396a065d33da95c5549afd81c906365e9bb683b607fa3e326bb9ee731d3a/wc-django-jwt-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87b0396a065d33da95c5549afd81c906365e9bb683b607fa3e326bb9ee731d3a",
        "md5": "acb57a498c7854f9495ae44a212ba01b",
        "sha256": "0f973eaf7084613dfcb85eaaba6450c8decfd97708db462782ad3df3c9fe1414"
      },
      "downloads": -1,
      "filename": "wc-django-jwt-0.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "acb57a498c7854f9495ae44a212ba01b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40615,
      "upload_time": "2023-03-27T09:40:57",
      "upload_time_iso_8601": "2023-03-27T09:40:57.313020Z",
      "url": "https://files.pythonhosted.org/packages/87/b0/396a065d33da95c5549afd81c906365e9bb683b607fa3e326bb9ee731d3a/wc-django-jwt-0.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}