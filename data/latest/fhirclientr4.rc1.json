{
  "info": {
    "author": "SMART Platforms Team",
    "author_email": "support@smarthealthit.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Workaround for FHIR R4: https://github.com/smart-on-fhir/client-py/issues/70\n\nSMART FHIR Client\n=================\n\nThis is _fhirclient_, a flexible Python client for [FHIR][] servers supporting the [SMART on FHIR][smart] protocol.\nThe client is compatible with Python 2.7.10 and Python 3.\n\nClient versioning is not identical to FHIR versioning.\nThe `master` branch is usually on the latest version of the client as shown below, possibly on bugfix releases thereof.\nThe `develop` branch should be on recent freezes, and the `feature/latest-ci` branch is periodically updated to the latest FHIR continuous integration builds.\n\n   Version |          FHIR | &nbsp;\n-----------|---------------|---------\n **4.0.0** |       `4.0.0` | (R4)\n **3.0.0** |       `3.0.0` | (STU-3)\n   **x.x** |       `1.8.0` | (STU-3 Ballot, Jan 2017)\n   **x.x** |       `1.6.0` | (STU-3 Ballot, Sep 2016)\n **1.0.3** |       `1.0.2` | (DSTU 2)\n   **1.0** |       `1.0.1` | (DSTU 2)\n   **0.5** |  `0.5.0.5149` | (DSTU 2 Ballot, May 2015)\n **0.0.4** | `0.0.82.2943` | (DSTU 1)\n **0.0.3** | `0.0.82.2943` | (DSTU 1)\n **0.0.2** | `0.0.82.2943` | (DSTU 1)\n\n\nInstallation\n------------\n\n    pip install fhirclient\n\n\nDocumentation\n-------------\n\nTechnical documentation is available at [docs.smarthealthit.org/client-py/][docs].\n\n### Client Use\n\nTo connect to a SMART on FHIR server (or any open FHIR server), you can use the `FHIRClient` class.\nIt will initialize and handle a `FHIRServer` instance, your actual handle to the FHIR server you'd like to access.\n\n##### Read Data from Server\n\nTo read a given patient from an open FHIR server, you can use:\n\n```python\nfrom fhirclient import client\nsettings = {\n    'app_id': 'my_web_app',\n    'api_base': 'https://fhir-open-api-dstu2.smarthealthit.org'\n}\nsmart = client.FHIRClient(settings=settings)\n\nimport fhirclient.models.patient as p\npatient = p.Patient.read('hca-pat-1', smart.server)\npatient.birthDate.isostring\n# '1963-06-12'\nsmart.human_name(patient.name[0])\n# 'Christy Ebert'\n```\n\nIf this is a protected server, you will first have to send your user to the authorize endpoint to log in.\nJust call `smart.authorize_url` to obtain the correct URL.\nYou can use `smart.prepare()`, which will return `False` if the server is protected and you need to authorize.\nThe `smart.ready` property has the same purpose, it will however not retrieve the server's _CapabilityStatement_ resource and hence is only useful as a quick check whether the server instance is ready.\n\n```python\nsmart = client.FHIRClient(settings=settings)\nsmart.ready\n# prints `False`\nsmart.prepare()\n# prints `True` after fetching CapabilityStatement\nsmart.ready\n# prints `True`\nsmart.prepare()\n# prints `True` immediately\nsmart.authorize_url\n# is `None`\n```\n\nYou can work with the `FHIRServer` class directly, without using `FHIRClient`, but this is not recommended:\n\n```python\nsmart = server.FHIRServer(None, 'https://fhir-open-api-dstu2.smarthealthit.org')\nimport fhirclient.models.patient as p\npatient = p.Patient.read('hca-pat-1', smart)\npatient.name[0].given\n# ['Christy']\n```\n\n##### Search Records on Server\n\nYou can also search for resources matching a particular set of criteria:\n\n```python\nsmart = client.FHIRClient(settings=settings)\nimport fhirclient.models.procedure as p\nsearch = p.Procedure.where(struct={'subject': 'hca-pat-1', 'status': 'completed'})\nprocedures = search.perform_resources(smart.server)\nfor procedure in procedures:\n    procedure.as_json()\n    # {'status': u'completed', 'code': {'text': u'Lumpectomy w/ SN', ...\n\n# to include the resources referred to by the procedure via `subject` in the results\nsearch = search.include('subject')\n\n# to include the MedicationAdministration resources which refer to the procedure via `partOf`\nimport fhirclient.models.medicationadministration as m\nsearch = search.include('partOf', m.MedicationAdministration, reverse=True)\n\n# to get the raw Bundle instead of resources only, you can use:\nbundle = search.perform(smart.server)\n```\n\n### Data Model Use\n\nThe client contains data model classes, built using [fhir-parser][], that handle (de)serialization and allow to work with FHIR data in a Pythonic way.\nStarting with version 1.0.5, data model validity are enforced to a certain degree.\n\n#### Initialize Data Model\n\n```python\nimport fhirclient.models.patient as p\nimport fhirclient.models.humanname as hn\npatient = p.Patient({'id': 'patient-1'})\npatient.id\n# prints `patient-1`\n\nname = hn.HumanName()\nname.given = ['Peter']\nname.family = 'Parker'\npatient.name = [name]\npatient.as_json()\n# prints patient's JSON representation, now with id and name\n\nname.given = 'Peter'\npatient.as_json()\n# throws FHIRValidationError:\n# {root}:\n#   name:\n#     given:\n#       Expecting property \"given\" on <class 'fhirclient.models.humanname.HumanName'> to be list, but is <class 'str'>\n```\n\n#### Initialize from JSON file\n\n```python\nimport json\nimport fhirclient.models.patient as p\nwith open('path/to/patient.json', 'r') as h:\n    pjs = json.load(h)\npatient = p.Patient(pjs)\npatient.name[0].given\n# prints patient's given name array in the first `name` property\n```\n\n### Flask App\n\nTake a look at [`flask_app.py`][flask_app] to see how you can use the client in a simple (Flask) app.\nThis app starts a webserver, listening on [_localhost:8000_](http://localhost:8000), and prompts you to login to our sandbox server and select a patient.\nIt then goes on to retrieve the selected patient's demographics and med prescriptions and lists them in a simple HTML page.\n\nThe Flask demo app has separate requirements.\nClone the _client-py_ repository, then best create a virtual environment and install the needed packages like so:\n\n    git clone https://github.com/smart-on-fhir/client-py.git\n    cd client-py\n    virtualenv -p python3 env\n    . env/bin/activate\n    pip install -r requirements_flask_app.txt\n    python flask_app.py\n\n\nBuilding Distribution\n---------------------\n\n    pip install -r requirements.txt\n    python setup.py sdist\n    python setup.py bdist_wheel\n\n\n### Incrementing the lib version\n\n    bumpversion patch\n    bumpversion minor\n    bumpversion major\n\n\nDocs Generation\n---------------\n\nDocs are generated with [Doxygen][] and [doxypypy][].\nYou can install doxypypy via pip: `pip install doxypypy`.\nThen you can just run Doxygen, configuration is stored in the `Doxyfile`.\n\nRunning Doxygen will put the generated documentation into `docs`, the HTML files into `docs/html`.\nThose files make up the content of the `gh-pages` branch.\nI usually perform a second checkout of the _gh-pages_ branch and copy the html files over, with:\n\n    doxygen\n    rsync -a docs/html/ ../client-py-web/\n\n\nPyPi Publishing (notes for SMART team)\n--------------------------------------\n\nUsing setuptools (*Note*: Alternatively, you can use twine https://pypi.python.org/pypi/twine/):\n\n### Make sure that you have the PyPi account credentials in your account\n\n    copy server.smarthealthit.org:/home/fhir/.pypirc to ~/.pypirc\n\n### Test the build\n\n    python setup.py sdist\n    python setup.py bdist_wheel\n\n### Upload the packages to PyPi\n\n    python setup.py sdist upload -r pypi\n    python setup.py bdist_wheel upload -r pypi\n\n\n[fhir]: http://www.hl7.org/implement/standards/fhir/\n[smart]: http://docs.smarthealthit.org\n[fhir-parser]: https://github.com/smart-on-fhir/fhir-parser\n[docs]: https://smart-on-fhir.github.io/client-py\n[flask_app]: https://github.com/smart-on-fhir/client-py/blob/master/flask_app.py\n[doxygen]: http://www.stack.nl/~dimitri/doxygen\n[doxypypy]: https://github.com/Feneric/doxypypy\n\n\nCredits\n=======\n\n“fhirclient” is written and maintained by the SMART Platforms Team / Boston Children's Hospital.\n\n\nContributors\n------------\n\nThe following wonderful people contributed directly or indirectly to this project:\n\n- Andrew Bjonnes <https://github.com/abjonnes>\n- Erik Wiffin <https://github.com/erikwiffin>\n- Josh Mandel <https://github.com/jmandel>\n- Nikolai Schwertner <https://github.com/nschwertner>\n- Pascal Pfiffner <https://github.com/p2>\n- Raheel Sayeed <https://github.com/raheelsayeed> \n- Trinadh Baranika <https://github.com/bktrinadh>\n\nPlease add yourself here alphabetically when you submit your first pull request.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gitpushdashf/client-py",
    "keywords": "smart fhir healthcare medical-informatics clinical-informatics biomedical-informatics",
    "license": "APACHE2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fhirclientr4",
    "package_url": "https://pypi.org/project/fhirclientr4/",
    "platform": null,
    "project_url": "https://pypi.org/project/fhirclientr4/",
    "project_urls": {
      "Homepage": "https://github.com/gitpushdashf/client-py"
    },
    "release_url": "https://pypi.org/project/fhirclientr4/4.0.0/",
    "requires_dist": [
      "requests",
      "isodate"
    ],
    "requires_python": "",
    "summary": "A flexible client for FHIR servers supporting the SMART on FHIR protocol",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14704513,
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6fd99dab89479b30cb0b359d3590a7e637f0af99b214a9297f09d3bdcd1324",
          "md5": "00fe8a6b173ea0a9fd02e44aa326de14",
          "sha256": "3d70caad3d9175897fbfa35376c380af36c388afdfb6fda744ed295c56a79634"
        },
        "downloads": -1,
        "filename": "fhirclientr4-4.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00fe8a6b173ea0a9fd02e44aa326de14",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 683091,
        "upload_time": "2022-04-14T17:18:14",
        "upload_time_iso_8601": "2022-04-14T17:18:14.136935Z",
        "url": "https://files.pythonhosted.org/packages/de/6f/d99dab89479b30cb0b359d3590a7e637f0af99b214a9297f09d3bdcd1324/fhirclientr4-4.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05aeafc98af5eb29815ae1248a9f593c13b24e3a62287ba5e7ee892aa275f74c",
          "md5": "24e18823b6e311c0114800d08dddd5cf",
          "sha256": "e011ef39b2e83277572d4375e66729201ddaf94141ee8179efcaed277e3d052f"
        },
        "downloads": -1,
        "filename": "fhirclientr4-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24e18823b6e311c0114800d08dddd5cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 435657,
        "upload_time": "2022-04-14T17:18:17",
        "upload_time_iso_8601": "2022-04-14T17:18:17.670367Z",
        "url": "https://files.pythonhosted.org/packages/05/ae/afc98af5eb29815ae1248a9f593c13b24e3a62287ba5e7ee892aa275f74c/fhirclientr4-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de6fd99dab89479b30cb0b359d3590a7e637f0af99b214a9297f09d3bdcd1324",
        "md5": "00fe8a6b173ea0a9fd02e44aa326de14",
        "sha256": "3d70caad3d9175897fbfa35376c380af36c388afdfb6fda744ed295c56a79634"
      },
      "downloads": -1,
      "filename": "fhirclientr4-4.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "00fe8a6b173ea0a9fd02e44aa326de14",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 683091,
      "upload_time": "2022-04-14T17:18:14",
      "upload_time_iso_8601": "2022-04-14T17:18:14.136935Z",
      "url": "https://files.pythonhosted.org/packages/de/6f/d99dab89479b30cb0b359d3590a7e637f0af99b214a9297f09d3bdcd1324/fhirclientr4-4.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05aeafc98af5eb29815ae1248a9f593c13b24e3a62287ba5e7ee892aa275f74c",
        "md5": "24e18823b6e311c0114800d08dddd5cf",
        "sha256": "e011ef39b2e83277572d4375e66729201ddaf94141ee8179efcaed277e3d052f"
      },
      "downloads": -1,
      "filename": "fhirclientr4-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "24e18823b6e311c0114800d08dddd5cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 435657,
      "upload_time": "2022-04-14T17:18:17",
      "upload_time_iso_8601": "2022-04-14T17:18:17.670367Z",
      "url": "https://files.pythonhosted.org/packages/05/ae/afc98af5eb29815ae1248a9f593c13b24e3a62287ba5e7ee892aa275f74c/fhirclientr4-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}