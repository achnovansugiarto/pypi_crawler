{
  "info": {
    "author": "M. Segbers",
    "author_email": "msegbers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "# simple-orthanc: Pythonic Interface for Orthanc\r\n\r\n## Orthanc\r\n\r\nOrthanc is an open source and lightweight dicom server\r\n\r\nMore on Orthanc:\r\n\r\n[orthanc](https://www.orthanc-server.com)\r\n\r\n## simple-orthanc\r\n\r\nsimple-orthanc uses the Orthanc api to communicate with the the Orthanc server.\r\nsimple-orthanc and enables the following functionality with justa few lines of\r\nPython code:\r\n\r\n- connection to an orthanc server.\r\n- Selecting patients, studies, series, instances\r\n- Downloading of selected dicom patients, studies, series, instances\r\n- Uploading Dicom files to the Orthanc Server\r\n- Introspection dicom tags for selected items.\r\n- Retrieving selected pydicom headers \r\n- Retrieve pixel array in numpy format for selected series, for multislice data\r\n  this will be a 3D volume.\r\n  \r\n### Connect to an orthanc server\r\n\r\nTo connect to a orthanc server the ip adress, port, username and password\r\nshould usually be specified. A connection is set up as follows:\r\n\r\n```\r\nimport simple_orthanc\r\n\r\northanc = simple_orthanc.Orthanc(host='127.0.0.1'\r\n                                port=8042,\r\n                                username='orthanc_user',\r\n                                password='orthanc_password')\r\n                            \r\n```\r\n\r\nNote when the Orthanc server runs on the local machine listens to the\r\ndefault port 8042 and no username and password are setup, the connection can\r\nbe initiated like:\r\n\r\n`orthanc = simple-orthanc.Orthanc()`\r\n\r\n\r\nTo get information about the number of patients, studies, series, or instances\r\non the Orthanc server do:\r\n\r\n```\r\northanc.patient_count\r\northanc.study_count\r\northanc.series_count\r\northanc.instance_count\r\n```\r\n\r\n### Retrieving Dicom information\r\n\r\nTo obatain information of specific dicom tags:\r\n\r\n`patient_names = orthanc.PatientNames`\r\n\r\nor\r\n\r\n`series_descriptions = orthanc.SeriesDescriptions`\r\n\r\nInformation values for any dicom tag for the entire database can be obtained\r\nusing this method.\r\n\r\n\r\n### Applying a selection\r\n\r\nTo select data on the Orthanc server the following lines of code can be used:\r\n\r\n`orthanc.select(PatientName='JaneDoe', StudyDescription='CT Examination', ...)`\r\n\r\nAny dicom tag can be used to select data except for DICOM sequences.\r\nTo obtain information about the number of patients, studies, series,\r\nor instances on the Orthanc server do (again):\r\n\r\n```\r\northanc.patient_count\r\northanc.study_count\r\northanc.series_count\r\northanc.instance_count\r\n```\r\n\r\nAnd to obtain the current selection:\r\n\r\n`selection = orthanc.selection`\r\n\r\nWhen a selection is applied and information the value of a dicom tag is asked,\r\nonly the values within the current select are returned.\r\n\r\nso `orthanc.PatientName` will only return JaneDoe in the above example. And\r\n`orthanc.SeriesDescriptions` will return all dicom SeriesDescriptions for\r\npatient 'JaneDoe' and study with description 'CT Examination'\r\n\r\n### Clearing a selection\r\n\r\nUse `orthanc.reset()` to clear the current selection. And use\r\n`orthanc.reset('PatientName')` to remove a single dicom tag from the current\r\nselection.\r\n\r\n### Downloading and Uploading Dicom Data\r\n\r\nTo download (all) dicom data to a specific folder for the current selection do:\r\n\r\n`files = orthanc.download(folder)`\r\n\r\nIf no folder is specified the files are downloaded to a system temp folder.\r\nThe temp folder is frequently cleared. A complete list of files with full path\r\nis returned.\r\n\r\n`orthanc.upload_file(file, test_dicom=True)`\r\n\r\nWill upload a single dicom file to the Orthanc Server. Optional a file can be\r\ntested if it is a dicom file prior to upload. If you have a very fast (local)\r\nconnection to the Orthanc server this might slow down the upload. If your\r\nconnection is very slow (remote internet connection) this may speed up the\r\nupload since a non dicom file is catched before sending.\r\n\r\nAn entire list of files can be uploaded using the same command:\r\n\r\n`orthanc.upload_file(file_list, test_dicom=True)`\r\n\r\nAnd finally an entire directory with files can be uploaded by:\r\n\r\n`orthanc.upload_folder(folder, test_dicom=True, recursive=True)`\r\n\r\nIt can be specified if files are found in the entire folder tree\r\n(recursive=True) or just in the folder itself (recursive=False). Recursive is \r\nFalse by default.\r\n\r\nFor deleting studies from the server use:\r\n\r\n`orthanc.delete_selected_patient()`\r\n`orthanc.delete_selected_study()`\r\n`orthanc.delete_selected_series()`\r\n\r\nWarning this action cannot be undone. When deleting the selected patient or \r\nstudy, series (and instances) of this patient or study that are not in the \r\nselection will also be deleted!\r\n\r\n\r\nuse `orthanc.refresh()` to refresh the connection with orthanc to make the\r\nnewly uploaded visible. Also use refresh after deleting to remove deleted items\r\nfrom the local cache.\r\n\r\n\r\n### Obtaining Dicom Headers\r\n\r\nThe header can be obtained as a pydicom dataset when a single instance is \r\nselected:\r\n\r\n`header = orthanc.get_header()`\r\n\r\nIf multiple instances are selected:\r\n\r\n`headers = orthanc.get_headers()`\r\n\r\nWill retrieve a list of all dicom headers. It may take some time to obtain all \r\nheaders for a large number of instances. Specify an index to\r\nobtain a single header when multiple instances are selected:\r\n\r\n`headers = orthanc.get_headers(index=0)`\r\n\r\nWill retrieve only the first header.\r\n\r\nPydicom headers are (re)created from a json response from the orthanc server. \r\nA few dicom tags might not convert into the pydicom header. To see which tags \r\nare excluded set the silent flag to False:\r\n\r\n`headers = orthanc.get_headers(index=0, silent=False)`\r\n\r\n\r\n### Obtaining pixel data \r\n\r\nThe Orthanc api offers the possibility to directly get the pydicom pixel data.\r\n\r\n`numpy_array = orthanc.get_array()`\r\n\r\nWill obtain all pixel data for a single series. If multiple instances are\r\npresent in the series, the pixel arrays are sorted by the the orthanc server\r\ninto a 3D volume of size M*N*S*C. Where M and N are the number of pixels,\r\nS the number of slices and C the number of color channels (1 for grayscale,\r\n3 for color).\r\n\r\n\r\n### Sorting data\r\n\r\nWhen a single series is selected, it is possible to sort the instances by the\r\nvalue of a specific dicom tag. For example:\r\n\r\n`orthanc.sort_by('SliceLocation')`\r\n\r\nor\r\n\r\n`orthanc.sort_by('InstanceNumber', order='descending')`\r\n\r\nSort order is ascending by default. When calling the `get_headers` method, \r\nthe headers will be a list in the sorted order. Same for reading dicom tags:\r\n\r\n`orthanc.SliceLocation` will now return a list in the sorted order.\r\n\r\nAn exception is the `get_array` method which gives the same result regardless \r\nof the sorting order. 3D arrays are composed by the orthanc\r\nserver which always uses a default (slice) sorting order (probably using the\r\nImagePositionPatient and ImageOrientationPatient dicom tags).\r\n\r\n### Dicom Tags\r\n\r\n`orthanc.PatientName` will retrieve a list of unique patient names in the\r\ndatabase. It is also possible to obtain the values for each patient.\r\n\r\n`orthanc.get_dicom_tag('PatientName', unique=False)`\r\n\r\nWill give a list of PatientNames on the orthanc server. PatientNames may have\r\nmultiple entries on the server. \r\n\r\n`orthanc.get_all_dicom_tags()`\r\n\r\nWill return all Dicom tag names that are available for the current selection.\r\nIf multiple series are selected this will return the main dicom tags (see \r\nbelow). If a single serie is selected this will return all available tags in\r\nthe first instance of the series. \r\n\r\n### Performance\r\n\r\nOrthanc is a very light weight and fast dicom server. The API offers little\r\noverhead is is very fast. There are some limitations however. First of all when\r\nthere a huge number of instances in your current selection, it may take a while\r\nto obtain tag values / headers etc.\r\n\r\nThe Orthanc API exposes a subset of dicom tags directly. This subset can is\r\nobtained by:\r\n\r\n`fast_tags = orthanc.interface.main_dicom_tags`\r\n\r\nUsing these tags in selections or obtain values for these tags is really fast.\r\nHowever for tags at the Patient Level, selections and obtaining values is much\r\nfaster than tags at the Instance Level. There are usually far less Patients in\r\nthe database than there are Instances.\r\n\r\nTags that are not main_dicom_tags are always queried at Instance Level, since\r\nthere is no easy discrimination to which dicom level a specific tag belongs.\r\nTherefor using these tags hamper performance.\r\n\r\n### One line code example\r\n\r\nPyDicom can be used very efficently in just one line of code. Connecting,\r\ncommunicating, querying, downloading, slice sorting and reading pixel data \r\ncan be done by:\r\n\r\n```\r\nfrom simple_orthanc import Orthanc\r\nimage = Orthanc().select(PatientName='JaneDoe', \r\n                         SeriesDescription='ct_scan').get_array()\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "image images orthanc simpleitk medical dicom",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-orthanc",
    "package_url": "https://pypi.org/project/simple-orthanc/",
    "platform": null,
    "project_url": "https://pypi.org/project/simple-orthanc/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/simple-orthanc/0.9.9.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pythonic interface to access DICOM data on an Orthanc Server",
    "version": "0.9.9.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14880603,
  "releases": {
    "0.9.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f64e6dc70878bae0f540ca6d8f91ad3fa97555f642e36cc48a9989b43cb744db",
          "md5": "78d08a74b71e369a33a6a1969716ea32",
          "sha256": "65c7617433f271939f3416b6c6f1791d3579b60b129f2fe3558fb02dcfcd7b17"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78d08a74b71e369a33a6a1969716ea32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20109,
        "upload_time": "2022-08-15T15:44:52",
        "upload_time_iso_8601": "2022-08-15T15:44:52.550593Z",
        "url": "https://files.pythonhosted.org/packages/f6/4e/6dc70878bae0f540ca6d8f91ad3fa97555f642e36cc48a9989b43cb744db/simple-orthanc-0.9.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a48e019e6eb8c6c4a901226b87ba92e6893dc692fe21600fde8e9dc0302ecce",
          "md5": "f7c7bb3e4ceec96e0d0c6695e1a8bb51",
          "sha256": "384502623337f670df875762d8267bbde86e4eee2f731380f3a286bf99d878df"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7c7bb3e4ceec96e0d0c6695e1a8bb51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22949,
        "upload_time": "2022-08-16T08:11:17",
        "upload_time_iso_8601": "2022-08-16T08:11:17.256706Z",
        "url": "https://files.pythonhosted.org/packages/7a/48/e019e6eb8c6c4a901226b87ba92e6893dc692fe21600fde8e9dc0302ecce/simple-orthanc-0.9.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "628416de8a30f101c23b9e752c70c0d2e4addb82cb6f7fb2c92b30143a086de6",
          "md5": "c2ef0fa03a1efea110bb48f6ad069c4a",
          "sha256": "718b0b9c1cd03aa3f0b71937656c94a49a91a47327f1c393c09fe6117bd70faa"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c2ef0fa03a1efea110bb48f6ad069c4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22989,
        "upload_time": "2022-08-16T08:23:43",
        "upload_time_iso_8601": "2022-08-16T08:23:43.662305Z",
        "url": "https://files.pythonhosted.org/packages/62/84/16de8a30f101c23b9e752c70c0d2e4addb82cb6f7fb2c92b30143a086de6/simple-orthanc-0.9.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf5659f00b46338e660688cbab451e091442e2c818f2fe64501a487a7ec83267",
          "md5": "0c1ad6a74936e0e12feda95dd465fb35",
          "sha256": "029950ce1584c578b9ac1409cdf1ef075b21a81bcb4d208bc74ae6bcb2367f3f"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0c1ad6a74936e0e12feda95dd465fb35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23000,
        "upload_time": "2022-08-16T15:26:43",
        "upload_time_iso_8601": "2022-08-16T15:26:43.677406Z",
        "url": "https://files.pythonhosted.org/packages/bf/56/59f00b46338e660688cbab451e091442e2c818f2fe64501a487a7ec83267/simple-orthanc-0.9.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02bbdadcae4d2fa28a2faeee1371cdcfdd9261fe52cefb9f6fb0beb77dbe2414",
          "md5": "5a5cac7f2974c9fe8b9537a19c638bee",
          "sha256": "5a535b4042d8555a6a67d39ece89b6660ac0cae05c79eb8c98fcfab09f23acaa"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5a5cac7f2974c9fe8b9537a19c638bee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23078,
        "upload_time": "2022-08-25T14:19:26",
        "upload_time_iso_8601": "2022-08-25T14:19:26.385332Z",
        "url": "https://files.pythonhosted.org/packages/02/bb/dadcae4d2fa28a2faeee1371cdcfdd9261fe52cefb9f6fb0beb77dbe2414/simple-orthanc-0.9.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a9e996940f1e215084472582ef6bfc032bd564c2f61b9ca95b183ad9d2c1b5",
          "md5": "825e5f472f756d1fba68442c19c4503f",
          "sha256": "7ce0154b0c1d08fbf7c8706bc9cec5d4943086bdd39bcf5e61a70cb3d9408579"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "825e5f472f756d1fba68442c19c4503f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23136,
        "upload_time": "2022-08-25T14:42:37",
        "upload_time_iso_8601": "2022-08-25T14:42:37.134039Z",
        "url": "https://files.pythonhosted.org/packages/08/a9/e996940f1e215084472582ef6bfc032bd564c2f61b9ca95b183ad9d2c1b5/simple-orthanc-0.9.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87be2e430e1496f9d56aa93b54710da01f15bad196a26a73d2edf6cd63d8d6a",
          "md5": "180cffd85a04205cd9f76c622ca148a7",
          "sha256": "9b3bad0190fe7bd4233d2aaa7e8d2ef62505b6673a1868debcdd615ede062804"
        },
        "downloads": -1,
        "filename": "simple-orthanc-0.9.9.6.tar.gz",
        "has_sig": false,
        "md5_digest": "180cffd85a04205cd9f76c622ca148a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23131,
        "upload_time": "2022-08-25T14:49:12",
        "upload_time_iso_8601": "2022-08-25T14:49:12.489424Z",
        "url": "https://files.pythonhosted.org/packages/b8/7b/e2e430e1496f9d56aa93b54710da01f15bad196a26a73d2edf6cd63d8d6a/simple-orthanc-0.9.9.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b87be2e430e1496f9d56aa93b54710da01f15bad196a26a73d2edf6cd63d8d6a",
        "md5": "180cffd85a04205cd9f76c622ca148a7",
        "sha256": "9b3bad0190fe7bd4233d2aaa7e8d2ef62505b6673a1868debcdd615ede062804"
      },
      "downloads": -1,
      "filename": "simple-orthanc-0.9.9.6.tar.gz",
      "has_sig": false,
      "md5_digest": "180cffd85a04205cd9f76c622ca148a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23131,
      "upload_time": "2022-08-25T14:49:12",
      "upload_time_iso_8601": "2022-08-25T14:49:12.489424Z",
      "url": "https://files.pythonhosted.org/packages/b8/7b/e2e430e1496f9d56aa93b54710da01f15bad196a26a73d2edf6cd63d8d6a/simple-orthanc-0.9.9.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}