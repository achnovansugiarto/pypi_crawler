{
  "info": {
    "author": "Michael Goerz",
    "author_email": "mail@michaelgoerz.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering"
    ],
    "description": "=================\nsymbolic_equation\n=================\n\n.. image:: https://img.shields.io/badge/github-goerz/symbolic_equation-blue.svg\n   :alt: Source code on Github\n   :target: https://github.com/goerz/symbolic_equation\n.. image:: https://img.shields.io/pypi/v/symbolic_equation.svg\n   :alt: SymbolicEquation on the Python Package Index\n   :target: https://pypi.python.org/pypi/symbolic_equation\n.. image:: https://img.shields.io/travis/goerz/symbolic_equation.svg\n   :alt: Travis Continuous Integration\n   :target: https://travis-ci.org/goerz/symbolic_equation\n.. image:: https://img.shields.io/coveralls/github/goerz/symbolic_equation/master.svg\n   :alt: Coveralls\n   :target: https://coveralls.io/github/goerz/symbolic_equation?branch=master\n.. image:: https://img.shields.io/badge/License-BSD-green.svg\n   :alt: BSD License\n   :target: https://opensource.org/licenses/BSD-3-Clause\n\nA simple Python package providing the ``Eq`` class for manipulating symbolic\nequations.\n\nThe ``Eq`` class defines an equation, and allows to apply arbitrary\nmanipulations to the left-hand-side and/or right-hand-side of that equation. It\nkeeps track all of these manipulations, and displays them neatly as a\nmulti-line equation in an interactive interpreter session or a `Jupyter\nnotebook`_ (using a LaTeX representation). It is mainly intended for use with\nSymPy_.\n\nLong calculations are expressed via method chaining, using ``.apply`` (apply function or method to both sides the equation), ``.apply_to_lhs``, ``.apply_to_rhs`` (apply function or method only on the left hand side, respectively the right hand side), and ``.transform`` (apply function to the equation as a whole). For concise output, multiple steps in a calculation can be grouped with ``.amend`` and ``.reset``. Tags (equation numbers or labels) set with ``.tag`` on any line of the equation will render in the text and LaTeX output.\n\nDevelopment of the ``symbolic_equation`` package happens on `Github`_.\n\n\nInstallation\n------------\n\nTo install the latest released version of ``symbolic_equation``, run this command in your terminal:\n\n.. code-block:: console\n\n    $ pip install symbolic_equation\n\nThis is the preferred method to install ``symbolic_equation``, as it will always install the most recent stable release.\n\nIf you don't have `pip`_ installed, the `Python installation guide`_, respectively the `Python Packaging User Guide`_  can guide\nyou through the process.\n\nTo install the latest development version of ``symbolic_equation`` from `Github`_.\n\n.. code-block:: console\n\n    $ pip install git+https://github.com/goerz/symbolic_equation.git@master#egg=symbolic_equation\n\n\nExample\n-------\n\n.. code-block:: pycon\n\n    >>> from symbolic_equation import Eq\n    >>> from sympy import symbols\n    >>> x, y = symbols('x y')\n    >>> eq1 = Eq(2*x - y - 1, tag='I')\n    >>> eq1\n    2*x - y - 1 = 0    ('I')\n\n    >>> eq2 = Eq(x + y - 5, tag='II')\n    >>> eq2\n    x + y - 5 = 0    ('II')\n\n    >>> eq_y = (\n    ...     (eq1 - 2 * eq2).tag(\"I - 2 II\")\n    ...     .transform(lambda eq: eq - 9)\n    ...     .transform(lambda eq: eq / (-3)).tag('y')\n    ... )\n    >>> eq_y\n    9 - 3*y = 0     ('I - 2 II')\n       -3*y = -9\n          y = 3     ('y')\n\n    >>> eq_x = (\n    ...     eq1.apply_to_lhs('subs', eq_y.as_dict).reset().tag(r'y in I')\n    ...     .transform(lambda eq: eq / 2)\n    ...     .transform(lambda eq: eq + 2).tag('x')\n    ... )\n    >>> eq_x\n    2*x - 4 = 0    ('y in I')\n      x - 2 = 0\n          x = 2    ('x')\n\nThe ``reset()`` in the first line excludes ``('I')`` from the output.\nIt is also possible to \"group\" lines using ``amend``, for less verbose output:\n\n    >>> eq_x = (\n    ...     eq1.apply_to_lhs('subs', eq_y.as_dict).reset().tag(r'y in I')\n    ...     .transform(lambda eq: eq / 2)\n    ...     .transform(lambda eq: eq + 2).amend().tag('x')\n    ... )\n    >>> eq_x\n    2*x - 4 = 0    ('y in I')\n          x = 2    ('x')\n\n\nReference\n---------\n\n.. code-block:: pycon\n\n\n    class Eq(builtins.object)\n     |  symbolic_equation.Eq(lhs, rhs=None, tag=None, eq_sym_str=None, eq_sym_tex=None, _prev_lhs=None, _prev_rhs=None, _prev_tags=None)\n     |\n     |  Symbolic equation.\n     |\n     |  This class keeps track of the :attr:`lhs` and :attr:`rhs` of an equation\n     |  across arbitrary manipulations.\n     |\n     |  Args:\n     |      lhs: the left-hand-side of the equation\n     |      rhs: the right-hand-side of the equation. If None, defaults to zero.\n     |      tag: a tag (equation number) to be shown when printing\n     |           the equation\n     |      eq_sym_str: If given, a value that overrides the `eq_sym_str` class\n     |          attribute for this particular instance.\n     |      eq_sym_tex: If given, a value that overrides the `eq_sym_tex` class\n     |          attribute for this particular instance.\n     |\n     |  Class Attributes:\n     |      latex_renderer: If not None, a callable that must return a LaTeX\n     |          representation (:class:`str`) of `lhs` and `rhs`. When overriding\n     |          this, wrap the function with `staticmethod`.\n     |      eq_sym_str: default representation of the \"equal\" when rendering the\n     |          equation as a str\n     |      eq_sym_tex: default representation of the \"equal\" when rendering the\n     |          equation in latex\n     |\n     |  Methods defined here:\n     |\n     |  __add__(self, other)\n     |      Add another equation, or a constant.\n     |\n     |  __eq__(self, other)\n     |      Compare to another equation, or a constant.\n     |\n     |      This does not take into account any mathematical knowledge, it merely\n     |      checks if the :attr:`lhs` and :attr:`rhs` are exactly equal. If\n     |      comparing against a constant, the :attr:`rhs` must be exactly equal to\n     |      that constant.\n     |\n     |  __init__(self, lhs, rhs=None, tag=None, eq_sym_str=None, eq_sym_tex=None, _prev_lhs=None, _prev_rhs=None, _prev_tags=None)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __mul__(self, other)\n     |\n     |  __radd__ = __add__(self, other)\n     |\n     |  __repr__(self)\n     |      Return repr(self).\n     |\n     |  __rmul__(self, other)\n     |\n     |  __rsub__(self, other)\n     |\n     |  __str__(self)\n     |      Return str(self).\n     |\n     |  __sub__(self, other)\n     |\n     |  __truediv__(self, other)\n     |\n     |  amend(self, previous_lines=1)\n     |      Amend the previous lhs and rhs with the current ones.\n     |\n     |      If `previous_lines` is greater than 1, overwrite the corresponding\n     |      number of previous lines.\n     |\n     |      This can be chained to e.g. an :meth:`apply` call to group multiple\n     |      steps so that they don't show up a separate lines in the output.\n     |\n     |  apply(self, func_or_mtd, *args, **kwargs)\n     |      Apply `func_or_mtd` to both sides of the equation.\n     |\n     |      Returns a new equation where the left-hand-side and right-hand side\n     |      are replaced by the application of `func_or_mtd`, depending on its\n     |      type.\n     |\n     |      * If `func_or_mtd` is a string, it must be the name of a method `mtd`,\n     |        and equation is modified as\n     |\n     |        ::\n     |\n     |            lhs=lhs.mtd(*args, **kwargs)\n     |            rhs=rhs.mtd(*args, **kwargs)\n     |\n     |      * If `func_or_mtd` is a callable `func`, the equation is modified as\n     |\n     |        ::\n     |\n     |            lhs=func(lhs, *args, **kwargs)\n     |            rhs=func(rhs, *args, **kwargs)\n     |\n     |  apply_to_lhs(self, func_or_mtd, *args, **kwargs)\n     |      Apply `func_or_mtd` to the :attr:`lhs` of the equation only.\n     |\n     |      Like :meth:`apply`, but modifying only the left-hand-side.\n     |\n     |  apply_to_rhs(self, func_or_mtd, *args, **kwargs)\n     |      Apply `func_or_mtd` to the :attr:`rhs` of the equation only.\n     |\n     |      Like :meth:`apply`, but modifying only the right-hand-side.\n     |\n     |  copy(self)\n     |      Return a copy of the equation, including its history.\n     |\n     |  reset(self)\n     |      Discard the equation history.\n     |\n     |  tag(self, tag)\n     |      Set the tag for the last line in the equation.\n     |\n     |  transform(self, func, *args, **kwargs)\n     |      Apply `func` to the entire equation.\n     |\n     |      The lhs and the rhs of the equation is replaced with the lhs and rhs of\n     |      the equation returned by ``func(self, *args, **kwargs)``.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |\n     |  as_dict\n     |      Mapping of the lhs to the rhs.\n     |\n     |      This allows to plug an equation into another expression.\n     |\n     |  lhs\n     |      The left-hand-side of the equation.\n     |\n     |  rhs\n     |      The right-hand-side of the equation.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  __hash__ = None\n     |\n     |  eq_sym_str = '='\n     |\n     |  eq_sym_tex = '='\n     |\n     |  latex_renderer = None\n\n\nUse in the Jupyter notebook\n---------------------------\n\nIn a `Jupyter notebook`_, equations will be rendered in LaTeX.\nSee `examples.ipynb`_.\n\nThe rendering presumes that both the ``lhs`` and the ``rhs`` have a LaTeX\nrepresentation. If the ``Eq`` class has a ``latex_renderer`` attribute defined,\nthat renderer will be used to obtain the LaTeX representation of the ``lhs``\nand ``rhs``. Otherwise:\n\n* If the ``lhs`` or ``rhs`` object has a ``_latex`` method, that method will be\n  called; or lastly,\n* The ``lhs`` and ``rhs`` will be passed to ``sympy.latex``.\n\n\nUse with QAlgebra\n-----------------\n\nTo properly render equations that contain QAlgebra_ expressions, you must\nregister QAlgebra's latex renderer:\n\n.. code-block:: python\n\n    from symbolic_equation import Eq\n    from qalgebra import latex\n    Eq.latex_renderer = staticmethod(latex)\n\n\n\nRelation to SymPy's Eq class\n----------------------------\n\nThe SymPy package also provides an `Eq class`_ that represents equality between\ntwo SymPy expressions. The class provided by SymPy and the class provided by\nthis package are not interchangeable: SymPy's ``Eq`` does not track\nmodifications or print out as multiline equations. While the\n``symbolic_equation.Eq`` class is not a SymPy expression, it can be converted\nto a ``sympy.Eq`` instance via the ``sympy.sympify`` function.\n\n.. _examples.ipynb: https://nbviewer.jupyter.org/github/goerz/symbolic_equation/blob/master/examples.ipynb\n.. _Github: https://github.com/goerz/symbolic_equation\n.. _pip: https://pip.pypa.io\n.. _Python installation guide: http://docs.python-guide.org/en/latest/starting/installation/\n.. _Python Packaging User Guide: https://packaging.python.org/tutorials/installing-packages/\n.. _Eq class: https://docs.sympy.org/latest/modules/core.html?highlight=eq#sympy.core.relational.Equality\n.. _SymPy: https://www.sympy.org/\n.. _Jupyter notebook: https://jupyter.org\n.. _QAlgebra: https://github.com/QAlgebra/qalgebra\n\n\n=======\nHistory\n=======\n\n0.3.0 (2020-11-22)\n------------------\n\n* Added: ``eq_sym_str`` and ``eq_sym_tex`` attributes\n\n\n0.2.0 (2020-06-28)\n------------------\n\n* Removed: ``apply_mtd``, ``apply_mtd_to_lhs``, ``apply_mtd_to_rhs`` methods. The functionality is now included in ``apply``, ``apply_to_lhs``, ``apply_to_rhs``, which can now receive a function or a method name\n* Added: ``amend`` and ``reset`` methods for controlling which lines are included in the history of an equation (\"grouping\")\n* Changed: The ``set_tag`` method was renamed to ``tag``\n* Removed: ``cont`` and ``tag`` arguments. The ``cont`` behavior (preserving the equation history) is now on by default, and the old ``cont=False`` can be achieved with ``reset``.\n* Removed: ``tag`` property (``tag`` is now a method for setting the equation tag).\n* Added: ``transform`` method for transforming the equation as a whole.\n\n\n0.1.0-dev (2019-05-26)\n----------------------\n\n* Initial release\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/goerz/symbolic_equation",
    "keywords": "sympy,equation,algebra",
    "license": "BSD license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "symbolic-equation",
    "package_url": "https://pypi.org/project/symbolic-equation/",
    "platform": "",
    "project_url": "https://pypi.org/project/symbolic-equation/",
    "project_urls": {
      "Homepage": "https://github.com/goerz/symbolic_equation"
    },
    "release_url": "https://pypi.org/project/symbolic-equation/0.3.0/",
    "requires_dist": [
      "uniseg",
      "black ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "coveralls ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "gitpython ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "jupyter ; extra == 'dev'",
      "nbsphinx ; extra == 'dev'",
      "nbval ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "sympy ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "watermark ; extra == 'dev'",
      "wheel ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "A class for multiline symbolic equations in the Jupyter Notebook",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8721571,
  "releases": {
    "0.1.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d5e6f4e13988c60a4a927120e6f2c2b86f1cf23af5f6d381cf4de2f441672fc",
          "md5": "602c00f9d605e89df7587751ea7b31a5",
          "sha256": "fc182482066a85ab38650cdfd2c600e425a0d73bc2dfb2caa8f89f4a34c1fd5b"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.1.0.dev0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "602c00f9d605e89df7587751ea7b31a5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 8471,
        "upload_time": "2019-05-27T07:30:42",
        "upload_time_iso_8601": "2019-05-27T07:30:42.498417Z",
        "url": "https://files.pythonhosted.org/packages/6d/5e/6f4e13988c60a4a927120e6f2c2b86f1cf23af5f6d381cf4de2f441672fc/symbolic_equation-0.1.0.dev0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8224f2d7f428affdf263bec4ce2d49f8b202100fa26a51c4f89b5e1bfe1110e8",
          "md5": "9f3a012d47cd75c7f5de83af7b6d2dea",
          "sha256": "6fcef5d5e7f0d979316746b90415fd0d5cf1c83adf5999910cea2a7c5da7a7ef"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.1.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f3a012d47cd75c7f5de83af7b6d2dea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17018,
        "upload_time": "2019-05-27T07:30:44",
        "upload_time_iso_8601": "2019-05-27T07:30:44.903880Z",
        "url": "https://files.pythonhosted.org/packages/82/24/f2d7f428affdf263bec4ce2d49f8b202100fa26a51c4f89b5e1bfe1110e8/symbolic_equation-0.1.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f39ac5a95c5e02fd7924beeae6db0092f9adf0d81cf47a4dfaaa2c1d3871557",
          "md5": "1ef94e6339945bb13c685352615ad263",
          "sha256": "197c2540b3dc959bb8dd5a58ab9b7c5ad237a7e53bdad31bdb1b6d3866269a1c"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ef94e6339945bb13c685352615ad263",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 9171,
        "upload_time": "2020-06-28T05:20:30",
        "upload_time_iso_8601": "2020-06-28T05:20:30.890346Z",
        "url": "https://files.pythonhosted.org/packages/3f/39/ac5a95c5e02fd7924beeae6db0092f9adf0d81cf47a4dfaaa2c1d3871557/symbolic_equation-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca3075eebd0186279c12eabd4466dcbbac2b57f39991151f3c1bbef34de6f7f",
          "md5": "bd882b12f384850fe013850373c1e861",
          "sha256": "4553032ad924d0e4b764b7d47014ac3f7cd63ceb9435897d0d5a2f5834df350d"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd882b12f384850fe013850373c1e861",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18487,
        "upload_time": "2020-06-28T05:20:32",
        "upload_time_iso_8601": "2020-06-28T05:20:32.457335Z",
        "url": "https://files.pythonhosted.org/packages/1c/a3/075eebd0186279c12eabd4466dcbbac2b57f39991151f3c1bbef34de6f7f/symbolic_equation-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "481f3a11828410f6fd3ae52985fc330c9c82383c19dfe6b3eddf0a5095d58c63",
          "md5": "db653080c674e97b9b23ce73d3963e83",
          "sha256": "62aae18076761f4aae61fedbc56b5d47de5fe537b4e3c8738f37aa8a61f103c8"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db653080c674e97b9b23ce73d3963e83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9798,
        "upload_time": "2020-11-22T19:02:07",
        "upload_time_iso_8601": "2020-11-22T19:02:07.831262Z",
        "url": "https://files.pythonhosted.org/packages/48/1f/3a11828410f6fd3ae52985fc330c9c82383c19dfe6b3eddf0a5095d58c63/symbolic_equation-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e47e75c380c9483b28f296d58cff40af96fb1b14e2ce233fe19462b8c524d61",
          "md5": "919b4632ae7ccf06c3b0e349c70ff811",
          "sha256": "e4c3677c9a0aa53240959dec8e2e7164c7c20baeedbdbb629179bea4473a6404"
        },
        "downloads": -1,
        "filename": "symbolic_equation-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "919b4632ae7ccf06c3b0e349c70ff811",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20393,
        "upload_time": "2020-11-22T19:02:09",
        "upload_time_iso_8601": "2020-11-22T19:02:09.106383Z",
        "url": "https://files.pythonhosted.org/packages/3e/47/e75c380c9483b28f296d58cff40af96fb1b14e2ce233fe19462b8c524d61/symbolic_equation-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "481f3a11828410f6fd3ae52985fc330c9c82383c19dfe6b3eddf0a5095d58c63",
        "md5": "db653080c674e97b9b23ce73d3963e83",
        "sha256": "62aae18076761f4aae61fedbc56b5d47de5fe537b4e3c8738f37aa8a61f103c8"
      },
      "downloads": -1,
      "filename": "symbolic_equation-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db653080c674e97b9b23ce73d3963e83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9798,
      "upload_time": "2020-11-22T19:02:07",
      "upload_time_iso_8601": "2020-11-22T19:02:07.831262Z",
      "url": "https://files.pythonhosted.org/packages/48/1f/3a11828410f6fd3ae52985fc330c9c82383c19dfe6b3eddf0a5095d58c63/symbolic_equation-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e47e75c380c9483b28f296d58cff40af96fb1b14e2ce233fe19462b8c524d61",
        "md5": "919b4632ae7ccf06c3b0e349c70ff811",
        "sha256": "e4c3677c9a0aa53240959dec8e2e7164c7c20baeedbdbb629179bea4473a6404"
      },
      "downloads": -1,
      "filename": "symbolic_equation-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "919b4632ae7ccf06c3b0e349c70ff811",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20393,
      "upload_time": "2020-11-22T19:02:09",
      "upload_time_iso_8601": "2020-11-22T19:02:09.106383Z",
      "url": "https://files.pythonhosted.org/packages/3e/47/e75c380c9483b28f296d58cff40af96fb1b14e2ce233fe19462b8c524d61/symbolic_equation-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}