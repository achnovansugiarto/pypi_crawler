{
  "info": {
    "author": "Obiajulu_M",
    "author_email": "oambanefo@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\n# Alexandria\r\n\r\nA project to decentralize and distribute literary infrastructure.\r\n\r\nSee [github](https://github.com/ObiajuluM/Alexandria#alexandria) for a detailed breakdown.\r\n\r\n\r\n\r\n\r\n\r\n## Usage/Examples\r\n\r\n```python\r\nimport EthAlexandria # import the package\r\nimport ipfshttpclient # for connecting to ipfs\r\n\r\n\r\n# url to connect to \r\nNETWORK = \"https://mainnet.infura.io/v3/\"\r\n# currently supports Polygon, Binance Smart Chain, Evmos, etc.\r\n\r\n\r\n# create an instance of the objects\r\ncontract_book = EthAlexandria.Book(NETWORK) # instance of the contract book\r\n\r\nipfs_book = EthAlexandria.BookIPFS(NETWORK) # instance of the ipfs book\r\n\r\nlibrary = EthAlexandria.Library(NETWORK) # instance of library\r\n\r\nmnemonic = \"your mnemonic here\"\r\n\r\n# ALWAYS LOAD_DATA(), before you begine working with the contract\r\ncontract_book.load_data()\r\nipfs_book.load_data()\r\nlibrary.load_data()\r\n\r\n\r\n# Load the addresses of already deployed contracts [ignore]\r\ncontract_book_address = \"0xAD94E1Fd0158C64981D29B03eE0C4C350C5b0B69\"\r\nipfs_book_address = \"0x98126F0d49e3137355B71f708Bb564ff9f224ED7\"\r\nlibrary_address = \"0x80303A8EBF84aeDf25c75ea5e2C474b4aE6dFe3A\"\r\n\r\n# generate new contracts and return their addresses\r\n\r\n# generate a new book contract\r\nprint(contract_book.new_book(\"Rich Dad\", \"MIT\", mnemonic).contractAddress)\r\n\r\n# generate a new ipfs contract book, this method deploys the book directly to ipfs before contract deployment\r\nprint(ipfs_book.new_ipfs_book(\"Rich Dad\", \"MIT\", \"rich_dad.pdf\", \"pdf\", client, mnemonic).contractAddress)\r\n\r\n# generate a new library contract\r\nprint(library.new_library(\"Library of Alexandria\", mnemonic).contractAddress)\r\n```\r\n\r\nAll the available methods\r\n\r\n\r\n`EthAlexandria.Book`\r\n\r\n``` python \r\nMethod: deposit_ether_to_contract()\r\nDoc: Deposit ether to the contract\r\n\r\nMethod: get_all_time_value()\r\nDoc: return book all time value\r\n\r\nMethod: get_author()\r\nDoc: return book author\r\n\r\nMethod: get_book_balance()\r\nDoc: return book balance\r\n\r\nMethod: get_book_license()\r\nDoc: return book book_license\r\n\r\nMethod: get_chapter_content()\r\nDoc: return book chapter content\r\n\r\nMethod: get_chapter_name()\r\nDoc: return book chapter name\r\n\r\nMethod: get_chapter_status()\r\nDoc: return book chapter status\r\n\r\nMethod: get_chapters_count()\r\nDoc: return book chapters count\r\n\r\nMethod: get_title()\r\nDoc: return book title\r\n\r\nMethod: load_data()\r\nDoc: load neccessary data to work with the object\r\n\r\nMethod: new_book()\r\nDoc: create new book\r\n\r\nMethod: new_chapter()\r\nDoc: create new chapter\r\n\r\nMethod: remove_chapter()\r\nDoc: remove chapter\r\n\r\nMethod: transfer_ether_from_book_contract()\r\nDoc: transfer ether from contract\r\n```\r\n\r\n   \r\n\r\n`EthAlexandria.BookIPFS`\r\n``` python \r\nMethod: deposit_ether_to_contract()\r\nDoc: Deposit ether to the contract\r\n\r\nMethod: get_all_time_value()\r\nDoc: return book all time value\r\n\r\nMethod: get_author()\r\nDoc: return book author\r\n\r\nMethod: get_book_format()\r\nDoc: return book format as deployed to ipfs, used to build the book from the hash\r\n\r\nMethod: get_book_license()\r\nDoc: return book book_license\r\n\r\nMethod: get_ipfs_book_balance()\r\nDoc: return book balance\r\n\r\nMethod: get_ipfs_hash()\r\nDoc: return book ipfs hash\r\n\r\nMethod: get_title()\r\nDoc: return book title\r\n\r\nMethod: load_data()\r\nDoc: load neccessary data to work with the object\r\n\r\nMethod: new_ipfs_book()\r\nDoc: create new ipfs book this is also upload the book to ipfs\r\n\r\nMethod: resolve_book_from_ipfs()\r\nDoc: return the book from ipfs\r\n\r\nMethod: transfer_ether_from_book_contract()\r\nDoc: transfer ether from contract\r\n\r\nMethod: upload_to_ipfs()\r\nDoc: upload book to ipfs\r\n\r\n```\r\n\r\n`EthAlexandria.Library`\r\n\r\n``` python\r\nMethod: add_book()\r\nDoc: add book to library\r\n\r\nMethod: deposit_ether_to_contract()\r\nDoc: Deposit ether to the contract\r\n\r\nMethod: get_all_time_value()\r\nDoc: return library all time value\r\n\r\nMethod: get_book_address()\r\nDoc: return book address\r\n\r\nMethod: get_book_author()\r\nDoc: return book author\r\n\r\nMethod: get_book_count()\r\nDoc: return book count\r\n\r\nMethod: get_book_status()\r\nDoc: return book status\r\n\r\nMethod: get_book_title()\r\nDoc: return book title\r\n\r\nMethod: get_librarian()\r\nDoc: return library librarian\r\n\r\nMethod: get_library_balance()\r\nDoc: get library balance\r\n\r\nMethod: get_library_name()\r\nDoc: return library name\r\n\r\nMethod: get_quote()\r\nDoc: return library quote\r\n\r\nMethod: load_data()\r\nDoc: load neccessary data to work with the object\r\n\r\nMethod: new_library()\r\nDoc: create new library\r\n\r\nMethod: remove_book()\r\nDoc: remove book from library\r\n\r\nMethod: transfer_ether_from_library_contract()\r\nDoc: transfer ether from library contract\r\n\r\nMethod: transfer_position()\r\nDoc: transfer librarian position\r\n\r\n```\r\n\r\n\r\n## License\r\n\r\n[MIT](https://choosealicense.com/licenses/mit/)\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ObiajuluM/Alexandria",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EthAlexandria",
    "package_url": "https://pypi.org/project/EthAlexandria/",
    "platform": null,
    "project_url": "https://pypi.org/project/EthAlexandria/",
    "project_urls": {
      "Homepage": "https://github.com/ObiajuluM/Alexandria"
    },
    "release_url": "https://pypi.org/project/EthAlexandria/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A project to decentralize and distribute literary infrastructure powered by EVM and IPFS.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15064403,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f27fc1a38b84eb421fd6738f40362d2305f862f80990e6cbe0915f65b03c7031",
          "md5": "3c25cedacee9f41022558a9e1aef3040",
          "sha256": "e0af2568efdf11ea202bc2c7fc49338aad7de72815c6f714613653740c5c7d05"
        },
        "downloads": -1,
        "filename": "EthAlexandria-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3c25cedacee9f41022558a9e1aef3040",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9814,
        "upload_time": "2022-09-12T08:03:33",
        "upload_time_iso_8601": "2022-09-12T08:03:33.511978Z",
        "url": "https://files.pythonhosted.org/packages/f2/7f/c1a38b84eb421fd6738f40362d2305f862f80990e6cbe0915f65b03c7031/EthAlexandria-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f27fc1a38b84eb421fd6738f40362d2305f862f80990e6cbe0915f65b03c7031",
        "md5": "3c25cedacee9f41022558a9e1aef3040",
        "sha256": "e0af2568efdf11ea202bc2c7fc49338aad7de72815c6f714613653740c5c7d05"
      },
      "downloads": -1,
      "filename": "EthAlexandria-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "3c25cedacee9f41022558a9e1aef3040",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 9814,
      "upload_time": "2022-09-12T08:03:33",
      "upload_time_iso_8601": "2022-09-12T08:03:33.511978Z",
      "url": "https://files.pythonhosted.org/packages/f2/7f/c1a38b84eb421fd6738f40362d2305f862f80990e6cbe0915f65b03c7031/EthAlexandria-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}