{
  "info": {
    "author": "Tomáš Ehrlich",
    "author_email": "tomas.ehrlich@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==========\nDjango-SES\n==========\n:Info: A Django email backend for Amazon's Simple Email Service\n:Author: Harry Marr (http://github.com/hmarr, http://twitter.com/harrymarr)\n:Collaborators: Paul Craciunoiu (http://github.com/pcraciunoiu, http://twitter.com/embrangler)\n\n**Attention:** This project is not actively maintained as of ~end 2012, but it is still fairly popular and in use.\nIf you are interested in helping out, please contact `Paul Craciunoiu (pcraciunoiu)`_.\n\n.. _Paul Craciunoiu (pcraciunoiu): https://github.com/pcraciunoiu/\n\nA bird's eye view\n=================\nDjango-SES is a drop-in mail backend for Django_. Instead of sending emails\nthrough a traditional SMTP mail server, Django-SES routes email through\nAmazon Web Services' excellent Simple Email Service (SES_).\n\n\nUsing Django directly\n=====================\n\nAmazon SES allows you to also setup usernames and passwords. If you do configure\nthings that way, you do not need this package. The Django default email backend\nis capable of authenticating with Amazon SES and correctly sending email.\n\nUsing django-ses gives you additional features like deliverability reports that\ncan be hard and/or cumbersome to obtain when using the SMTP interface.\n\n**Note:** In order to use smtp with Amazon SES, you may have to install some\nsupporting packages for ssl. Check out `this SMTP SSL email backend for Django`__\n\nWhy SES instead of SMTP?\n========================\nConfiguring, maintaining, and dealing with some complicated edge cases can be\ntime-consuming. Sending emails with Django-SES might be attractive to you if:\n\n* You don't want to maintain mail servers.\n* You are already deployed on EC2 (In-bound traffic to SES is free from EC2\n  instances).\n* You need to send a high volume of email.\n* You don't want to have to worry about PTR records, Reverse DNS, email\n  whitelist/blacklist services.\n* Django-SES is a truely drop-in replacement for the default mail backend.\n  Your code should require no changes.\n\nGetting going\n=============\nAssuming you've got Django_ installed, you'll need Boto_ 2.1.0 or higher. Boto_\nis a Python library that wraps the AWS API.\n\nYou can do the following to install boto 2.1.0 (we're using --upgrade here to\nmake sure you get 2.1.0)::\n\n    pip install --upgrade boto\n\nInstall django-ses::\n\n    pip install django-ses\n\nAdd the following to your settings.py::\n\n    EMAIL_BACKEND = 'django_ses.SESBackend'\n\n    # These are optional -- if they're set as environment variables they won't\n    # need to be set here as well\n    AWS_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\n    AWS_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n\n    # Additionally, you can specify an optional region, like so:\n    AWS_SES_REGION_NAME = 'us-east-1'\n    AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'\n\nAlternatively, instead of `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, you\ncan include the following two settings values. This is useful in situations\nwhere you would like to use a separate access key to send emails via SES than\nyou would to upload files via S3::\n\n    AWS_SES_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\n    AWS_SES_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n\nNow, when you use ``django.core.mail.send_mail``, Simple Email Service will\nsend the messages by default.\n\nSince SES imposes a rate limit and will reject emails after the limit has been\nreached, django-ses will attempt to conform to the rate limit by querying the\nAPI for your current limit and then sending no more than that number of\nmessages in a two-second period (which is half of the rate limit, just to\nbe sure to stay clear of the limit). This is controlled by the following setting:\n\n    AWS_SES_AUTO_THROTTLE = 0.5 # (default; safety factor applied to rate limit)\n\nTo turn off automatic throttling, set this to None.\n\nCheck out the ``example`` directory for more information.\n\nDKIM\n====\n\nUsing DomainKeys_ is entirely optional, however it is recommended by Amazon for\nauthenticating your email address and improving delivery success rate.  See\nhttp://docs.amazonwebservices.com/ses/latest/DeveloperGuide/DKIM.html.\nBesides authentication, you might also want to consider using DKIM in order to\nremove the `via email-bounces.amazonses.com` message shown to gmail users - \nsee http://support.google.com/mail/bin/answer.py?hl=en&answer=1311182.\n\nTo enable DKIM signing you should install the pydkim_ package and specify values\nfor the ``DKIM_PRIVATE_KEY`` and ``DKIM_DOMAIN`` settings.  You can generate a\nprivate key with a command such as ``openssl genrsa 512`` and get the public key\nportion with ``openssl rsa -pubout <private.key``.  The public key should be\npublished to ``ses._domainkey.example.com`` if your domain is example.com.  You \ncan use a different name instead of ``ses`` by changing the ``DKIM_SELECTOR``\nsetting.\n\nThe SES relay will modify email headers such as `Date` and `Message-Id` so by\ndefault only the `From`, `To`, `Cc`, `Subject` headers are signed, not the full\nset of headers.  This is sufficient for most DKIM validators but can be overridden\nwith the ``DKIM_HEADERS`` setting.\n\n\nExample settings.py::\n\n   DKIM_DOMAIN = 'example.com'\n   DKIM_PRIVATE_KEY = '''\n   -----BEGIN RSA PRIVATE KEY-----\n   xxxxxxxxxxx\n   -----END RSA PRIVATE KEY-----\n   '''\n\nExample DNS record published to Route53 with boto:\n\n   route53 add_record ZONEID ses._domainkey.example.com. TXT '\"v=DKIM1; p=xxx\"' 86400\n\n\n.. _DomainKeys: http://dkim.org/\n\n\nSES Sending Stats \n=================\n\nDjango SES comes with two ways of viewing sending statistics.\n\nThe first one is a simple read-only report on your 24 hour sending quota,\nverified email addresses and bi-weekly sending statistics.\n\nTo generate and view SES sending statistics reports, include, update\n``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        # ...\n        'django.contrib.admin',\n        'django_ses',\n        # ...\n    )\n\n... and ``urls.py``::\n\n    urlpatterns += (url(r'^admin/django-ses/', include('django_ses.urls')),)\n\n*Optional enhancements to stats:*\n\n\nLocalized datetime in the stats dashboard\n-----------------------------------------\nYou can install ``pytz`` to localize the Amazon timestamp\n(assumed UTC) to your locale. This will also make the date more readable,\nusing Django's default formatting.\n\nLink the dashboard from the admin\n---------------------------------\nYou can use adminplus for this (https://github.com/jsocol/django-adminplus)::\n\n    from django_ses.views import dashboard\n    admin.site.register_view('django-ses', dashboard, 'Django SES Stats')\n\nStore daily stats\n-----------------\nIf you need to keep send statistics around for longer than two weeks,\ndjango-ses also comes with a model that lets you store these. To use this\nfeature you'll need to first run ``syncdb``::\n\n    python manage.py syncdb\n\nTo collect the statistics, run the ``get_ses_statistics`` management command\n(refer to next section for details). After running this command the statistics\nwill be viewable via ``/admin/django_ses/``.\n\nDjango SES Management Commands\n==============================\n\nTo use these you must include ``django_ses`` in your INSTALLED_APPS.\n\nManaging Verified Email Addresses\n---------------------------------\n\nManage verified email addresses through the management command.\n\n    python manage.py ses_email_address -l\n\n\nCollecting Sending Statistics\n-----------------------------\n\nTo collect and store SES sending statistics in the database, run:\n\n    python manage.py get_ses_statistics\n\nSending statistics are aggregated daily (UTC time). Stats for the latest day\n(when you run the command) may be inaccurate if run before end of day (UTC).\nIf you want to keep your statistics up to date, setup ``cron`` to run this\ncommand a short time after midnight (UTC) daily.\n\n\nDjango Builtin-in Error Emails\n==============================\n\nIf you'd like Django's `Builtin Email Error Reporting`_ to function properly\n(actually send working emails), you'll have to explicitly set the\n``SERVER_EMAIL`` setting to one of your SES-verified addresses. Otherwise, your\nerror emails will all fail and you'll be blissfully unaware of a problem.\n\n*Note:* You will need to sign up for SES_ and verify any emails you're going\nto use in the `from_email` argument to `django.core.mail.send_email()`. Boto_\nhas a `verify_email_address()` method: https://github.com/boto/boto/blob/master/boto/ses/connection.py\n\n.. _Builtin Email Error Reporting: http://docs.djangoproject.com/en/1.2/howto/error-reporting/\n.. _Django: http://djangoproject.com\n.. _Boto: http://boto.cloudhackers.com/\n.. _SES: http://aws.amazon.com/ses/\n__ https://github.com/bancek/django-smtp-ssl\n\nRequirements\n============\ndjango-ses requires boto version 2.1.0 or later.\n\nFull List of Settings\n=====================\n\n``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``\n  *Required.* Your API keys for Amazon SES.\n\n``AWS_SES_ACCESS_KEY_ID``, ``AWS_SES_SECRET_ACCESS_KEY``\n  *Required.* Alternative API keys for Amazon SES. This is useful in situations\n  where you would like to use separate access keys for different AWS services.\n\n``AWS_SES_REGION_NAME``, ``AWS_SES_REGION_ENDPOINT``\n  Optionally specify what region your SES service is using. Details:\n  http://readthedocs.org/docs/boto/en/latest/ref/ses.html#boto.ses.regions\n\n``AWS_SES_RETURN_PATH``\n  Instruct Amazon SES to forward bounced emails and complaints to this email.\n  For more information please refer to http://aws.amazon.com/ses/faqs/#38\n\n``TIME_ZONE``\n  Default Django setting, optionally set this. Details:\n  https://docs.djangoproject.com/en/dev/ref/settings/#time-zone\n\n``DKIM_DOMAIN``, ``DKIM_PRIVATE_KEY``\n  Optional. If these settings are defined and the pydkim_ module is installed\n  then email messages will be signed with the specified key.   You will also\n  need to publish your public key on DNS; the selector is set to ``ses`` by\n  default.  See http://dkim.org/ for further detail.\n\n.. _pydkim: http://hewgill.com/pydkim/\n\nContributing\n============\nIf you'd like to fix a bug, add a feature, etc\n\n#. Start by opening an issue.\n    Be explicit so that project collaborators can understand and reproduce the\n    issue, or decide whether the feature falls within the project's goals.\n    Code examples can be useful, too.\n\n#. File a pull request.\n    You may write a prototype or suggested fix.\n\n#. Check your code for errors, complaints.\n    Use `check.py <https://github.com/jbalogh/check>`_\n\n#. Write and run tests.\n    Write your own test showing the issue has been resolved, or the feature\n    works as intended.\n\nRunning Tests\n=============\nTo run the tests::\n\n    python manage.py test django_ses",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tricoder42/django-ses/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-ses3",
    "package_url": "https://pypi.org/project/django-ses3/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-ses3/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tricoder42/django-ses/"
    },
    "release_url": "https://pypi.org/project/django-ses3/0.7.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django email backend for Amazon's Simple Email Service",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1355520,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6f1add07237bda5215b8b1284af73e25f6a512034eca2398828ec6f3a610a0d",
          "md5": "274be0a683f2a3972bebc2d4ebe844d0",
          "sha256": "93a4326e9736c0c92084b13d9615363a36831924ae96eca568341e040ac8e8e1"
        },
        "downloads": -1,
        "filename": "django-ses3-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "274be0a683f2a3972bebc2d4ebe844d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31177,
        "upload_time": "2014-12-20T16:49:30",
        "upload_time_iso_8601": "2014-12-20T16:49:30.333999Z",
        "url": "https://files.pythonhosted.org/packages/e6/f1/add07237bda5215b8b1284af73e25f6a512034eca2398828ec6f3a610a0d/django-ses3-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6f1add07237bda5215b8b1284af73e25f6a512034eca2398828ec6f3a610a0d",
        "md5": "274be0a683f2a3972bebc2d4ebe844d0",
        "sha256": "93a4326e9736c0c92084b13d9615363a36831924ae96eca568341e040ac8e8e1"
      },
      "downloads": -1,
      "filename": "django-ses3-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "274be0a683f2a3972bebc2d4ebe844d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31177,
      "upload_time": "2014-12-20T16:49:30",
      "upload_time_iso_8601": "2014-12-20T16:49:30.333999Z",
      "url": "https://files.pythonhosted.org/packages/e6/f1/add07237bda5215b8b1284af73e25f6a512034eca2398828ec6f3a610a0d/django-ses3-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}