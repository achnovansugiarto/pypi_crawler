{
  "info": {
    "author": "Simon Blindheim",
    "author_email": "simon.blindheim@ntnu.no",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# SeaCharts\nPython-based API for Electronic Navigational Charts (ENC)\n\n[![platform](https://img.shields.io/badge/platform-windows-lightgrey)]()\n[![platform](https://img.shields.io/badge/platform-linux-lightgrey)]()\n[![python version](https://img.shields.io/badge/python-3.9-blue)]()\n[![license](https://img.shields.io/badge/license-MIT-green)]()\n\n\n![](https://github.com/simbli/seacharts/blob/master/images/example1.svg?raw=True\n\"Example visualization with demonstration shapes\")\n\n## Features\n\n- Read and process spatial depth data from\n  [FileGDB](https://gdal.org/drivers/vector/filegdb.html) files into\n  shapefiles.\n- Access and manipulate standard geometric shapes such as points and polygon\n  collections.\n- Visualize colorful seacharts features and vessels using multiprocessing.\n\n## Code style\n\nThis module follows the [PEP8](https://www.python.org/dev/peps/pep-0008/)\nconvention for Python code.\n\n## Prerequisites\n\n### Anaconda\n\nThe simplest way to acquire the necessary dependencies for the SeaCharts\npackage is to install an edition of the [Anaconda](\nhttps://www.anaconda.com/products/individual-d) package manager, and then\ncreate a new _conda environment_ with **Python 3.9** using e.g. the graphical\nuser interface of [PyCharm Professional](\nhttps://www.jetbrains.com/lp/pycharm-anaconda/) as detailed [here](\nhttps://www.jetbrains.com/help/pycharm/conda-support-creating-conda-virtual-environment.html\n).\n\nThe required data processing libraries for spatial calculations and\nvisualization may subsequently be installed simply by running the following\ncommand in the terminal of your chosen environment:\n\n```\nconda install -c conda-forge fiona cartopy matplotlib\n```\n\n### Pipwin (Windows)\n\nAlternatively, one may manually install the required packages manually by\nfollowing these steps:\n\nFirst, ensure that [Python 3.9](https://www.python.org/downloads/)\n(or another compatible version) and the required [C++ build tools](\nhttps://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019)\nare installed. Next, the required Python packages must be installed (ideally in\na fresh virtual environment). In order to ensure that the correct version of\nNumpy+mkl linked to the [Intel® Math Kernel Library](\nhttps://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl.html#gs.31vx8p)\nis installed, download the wheel according to your Python version and Windows\nplatform from [here](\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy). Place the downloaded wheel\nfile e.g. in the same directory the terminal is run from, and install it. The\nbelow snippet corresponds to Python 3.9 on Windows 64-bit:\n```\npip install --upgrade pip\npip install wheel\npip install numpy-1.20.3+mkl-cp39-cp39-win_amd64.whl\n\n```\n\nThe remaining required packages may be installed by the following:\n\n```\npip install pipwin\npipwin install gdal\npipwin install scipy\npipwin install fiona\npipwin install shapely\npipwin install cartopy\npipwin install matplotlib\n\n```\n\nSimply copy and paste the entire block above (including the empty line) into\nthe terminal of your virtual environment, and go get a cup of coffee while it\ndoes its thing.\n\n## Installation\n\nAfter the necessary dependencies have been correctly installed, the SeaCharts\npackage may be installed directly through the Python Package Index ([PyPI](\nhttps://pypi.org/\n)) by running the following command in the terminal:\n\n```\npip install seacharts\n```\n\n![](https://github.com/simbli/seacharts/blob/master/images/example2.svg?raw=True\n\"Example visualization with default settings\")\n\n## Usage\n\nThis module supports reading and processing `FGDB` files for sea depth data\nsuch as the Norwegian coastal data set used for demonstration purposes, found\n[here](\nhttps://kartkatalog.geonorge.no/metadata/2751aacf-5472-4850-a208-3532a51c529a).\n\n### Downloading regional datasets\n\nFollow the above link to download the `Depth data` (`Sjøkart - Dybdedata`)\ndataset from the [Norwegian Mapping Authority](\nhttps://kartkatalog.geonorge.no/?organization=Norwegian%20Mapping%20Authority),\nby adding it to the Download queue and navigating to the separate\n[download page](https://kartkatalog.geonorge.no/nedlasting). Choose one or more\ncounty areas (e.g. `Møre og Romsdal`), and select the\n`EUREF89 UTM sone 33, 2d` (`UTM zone 33N`) projection and `FGDB 10.0`\nformat. Finally, select your appropriate user group and purpose, and click\n`Download` to obtain the ZIP file(s).\n\n### Processing ENC data into shapefiles\nUnpack the downloaded file(s) and place the extracted `.gdb` in the \n`data/external/` directory, where the top-level folder `data` is located in the\nsame directory as the executing script.\n\nImport the module, and initialize an instance of `seacharts.ENC` with optional\nsettings. The `new_data` keyword argument must be set to `True` during the \ninitial setup run, and/or for any subsequent desired re-parsing in order \nto unpack and store `ENC` features from the downloaded FGDB files as \nshapefiles:\n\n```python\nif __name__ == '__main__':\n\n    import seacharts\n\n    size = 9000, 5062                # w, h (east, north) distance in meters\n    center = 44300, 6956450          # easting/northing (UTM zone 33N)\n    files = ['More_og_Romsdal.gdb']  # Norwegian county database name\n\n    enc = seacharts.ENC(size=size, center=center, files=files, new_data=True)\n\n```\nNote that all `ENC` settings parameters may be set and modified directly in\n`data/config.ini`, wherein user settings are saved alongside the project \ndefaults. Parameters passed to `ENC` overrides the defaults of the \nconfiguration file. See the documentation of the `ENC` input parameters for \ndescriptions of all available configuration settings.\n\n\n![](https://github.com/simbli/seacharts/blob/master/images/example3.svg?raw=True \n\"Example visualization with dark mode and ownship hazards\")\n\n\n### API usage and accessing geometric shapes\nAfter the spatial data is parsed into shapefiles as shown above, geometric \nshapes based on the [Shapely](https://pypi.org/project/Shapely/) library may \nbe accessed and manipulated through various `ENC` attributes. The seacharts \nfeature layers are stored in `seabed`, `shore` and `land`. \n\n```python\nif __name__ == '__main__':\n\n    import seacharts\n\n    enc = seacharts.ENC(new_data=False)\n\n    print(enc.seabed[10])\n    print(enc.shore)\n    print(enc.land)\n\n```\nNote how the `new_data` argument may be set to `False` (or omitted) if the \ndesired regional spatial data has already been unpacked and processed into \nshapefiles in a previous call. Additionally, the `size`, `center` or `origin` \nparameters may be different from the one used to extract the external `ENC` \ndata, allowing for loading of more specific (smaller) areas of interest into \nmemory during runtime.\n\nSee the documentation for each top-level ENC method for all API usage and \nvisualization possibilities currently available to the SeaCharts package.\n\n\n![](https://github.com/simbli/seacharts/blob/master/images/example4.svg?raw=True\n\"Example visualization with zoom and paths\")\n\n\n### Interactive environment visualization\nThe `ENC.show_display` method is used to show a Matplotlib figure plot of the \nloaded seacharts features. Zoom and pan the environment view using the mouse \nscroll button, and holding and dragging the plot with left click, respectively. \n\nFullscreen mode may be toggled using the `f` key, and dark mode may be toggled \nusing the `d` key. An optional colorbar showing the various depth legends may \nbe toggled using the `c` key. Moreover, the visibility of each individual layer \nmay be toggled on and off using the `t`, `g`,`h`, `b`, and `l` keys. Press and\nhold the left `Alt` key and press any of the arrow keys to move the anchor of\nthe figure window. \n\nA controllable ownship with a sector horizon of hazards and arrows pointing to \nthe closest point on a polygon within it may be added and toggled through the \n`o`, `z` and `a` keys, respectively. Steer the ship with the arrows keys. \n\nThe filter depths of the displayed hazardous obstacles may be toggled using the\n`n` and `m` keys, and the size of the horizon may be altered using `,`, `.`,\n`[`, and `]` (on a US keyboard layout). Furthermore, vessels may be added and \nshown by passing appropriately formatted vessel poses to the `ENC.add_vessels` \nmethod, or manually storing the vessel details in `data/vessels.csv` and \npressing the `u` key to update the display. Toggle their visibility through the \n`v` key.\n\nShift left-click on the environment to add yellow path waypoints, move them \naround by pressing Shift and holding down the mouse button, and Shift right-\nclick to remove them. One may also Shift right-click on a path edge to create \nan intermediate waypoint between two existing waypoints. Additionally, a \nsecond path of magenta color may be added and manipulated by replacing Shift \nwith the Control key.\n \nImages of the currently shown display may be saved in various resolutions by \npressing Control + `s`, Shift + `s` or `s`. The below snippet produces the \nexample usage visualization images shown at the top of this page, assuming \ndefault settings and that a `More_og_Romsdal.gdb` directory is correctly \nextracted and placed as discussed in the shapefile processing section:\n\n```python\nif __name__ == '__main__':\n\n    import seacharts\n\n    size = 9000, 5062\n    center = 44300, 6956450\n    enc = seacharts.ENC(border=True)\n\n    # (id, easting, northing, heading, color)\n    ships = [\n        (1, 46100, 6957000, 132, 'orange'),\n        (2, 45000, 6956000, 57, 'yellow'),\n        (3, 44100, 6957500, 178, 'red'),\n        (4, 42000, 6955200, 86, 'green'),\n        (5, 44000, 6955500, 68, 'pink'),\n    ]\n\n    enc.add_vessels(*ships)\n\n    import shapely.geometry as geo\n\n    x, y = center\n    width, height = 1900, 1900\n    box = geo.Polygon((\n        (x - width, y - height),\n        (x + width, y - height),\n        (x + width, y + height),\n        (x - width, y + height),\n    ))\n    areas = list(box.difference(enc.seabed[10].geometry))\n    enc.draw_circle(center, 1000, 'yellow', thickness=2,\n                    edge_style='--')\n    enc.draw_rectangle(center, (600, 1200), 'blue', rotation=20)\n    enc.draw_circle(center, 700, 'green', edge_style=(0, (5, 8)),\n                    thickness=3, fill=False)\n    enc.draw_line([(center[0], center[1] + 800), center,\n                   (center[0] - 300, center[1] - 400)], 'white')\n    enc.draw_line([(center[0] - 300, center[1] + 400), center,\n                   (center[0] + 200, center[1] - 600)],\n                  'magenta', width=0.0, thickness=5.0,\n                  edge_style=(0, (1, 4)))\n    enc.draw_arrow(center, (center[0] + 700, center[1] + 600), 'orange',\n                   head_size=300, width=50, thickness=5)\n    enc.draw_polygon(enc.seabed[100].geometry[-3], 'cyan')\n    enc.draw_polygon(enc.shore.geometry[56], 'highlight')\n    for area in areas[3:8] + [areas[14], areas[17]] + areas[18:21]:\n        enc.draw_polygon(area, 'red')\n    enc.draw_rectangle(center, (width, height), 'pink', fill=False,\n                       edge_style=(0, (10, 10)), thickness=1.5)\n\n    enc.save_image('example1', extension='svg')\n\n    enc.show_display()\n\n```\n\nThe `id` values of the vessel details should be unique identifiers, used as\nreferences to the feature artists added to the Matplotlib plot. The color \nvalues may be strings of one of the custom ship colors of this package, or any \nnamed Matplotlib [CSS4 color](\nhttps://matplotlib.org/stable/gallery/color/named_colors.html).\n\n### Visualization using multiprocessing\nInitializing an `ENC` instance with the `multiprocessing` parameter set to \n`True` spawns a `Process` thread from the Python standard library \n[multiprocessing module](\nhttps://docs.python.org/3/library/multiprocessing.html), creating an \nindependent environment display running an infinite visualization loop, based \non the current user (or default) settings stored in the `data/config.ini` file.\nThe visualization loop continuously reads the `data/vessels.csv` file, and \nupdates the plot with any present vessels. Repeated updating of the vessels \nfile by any arbitrary alternative method is thus reflected in the plot in near\nreal-time. As such, this feature may be utilized for parallel or concurrent \nvisualization of vessels in an environment, e.g. based on vessel trajectories \nproduced by a separate and independent simulation or optimization algorithm.\n\n\n## Contributors\n\n- Simon Blindheim ([simon.blindheim@ntnu.no](mailto:simon.blindheim@ntnu.no))\n\n\n## License\n\nThis project uses the [MIT](https://choosealicense.com/licenses/mit/) license.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simbli/seacharts",
    "keywords": "api,ships,sea charts,visualization,electronic navigational charts",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seacharts",
    "package_url": "https://pypi.org/project/seacharts/",
    "platform": "",
    "project_url": "https://pypi.org/project/seacharts/",
    "project_urls": {
      "Bug Tracker": "https://github.com/simbli/seacharts/issues",
      "Homepage": "https://github.com/simbli/seacharts"
    },
    "release_url": "https://pypi.org/project/seacharts/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "API for Electronic Navigational Charts (ENC)",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11388702,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa94382021c5260e98b04b6c2bc54c8ae510a3c42fc0c5f1fc8eda2f063cecdb",
          "md5": "16c818684f0061ec358ac0d8a1c86d1d",
          "sha256": "800ec6fe20a2d7316b684f90d6ab6804c4a0ad14740863e9036cccaf156b6030"
        },
        "downloads": -1,
        "filename": "seacharts-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16c818684f0061ec358ac0d8a1c86d1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28226,
        "upload_time": "2021-09-01T20:33:00",
        "upload_time_iso_8601": "2021-09-01T20:33:00.993083Z",
        "url": "https://files.pythonhosted.org/packages/fa/94/382021c5260e98b04b6c2bc54c8ae510a3c42fc0c5f1fc8eda2f063cecdb/seacharts-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92d4777a233630f7c409c420bfb3b9f7d8e229652561c1a83a661b6312617c84",
          "md5": "952a170b2f26a0a233fb791c29a90dc5",
          "sha256": "96aac1a2362da0452d271eb06a700583359b045adc49e3d687a4211914276aff"
        },
        "downloads": -1,
        "filename": "seacharts-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "952a170b2f26a0a233fb791c29a90dc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29097,
        "upload_time": "2021-09-01T20:33:02",
        "upload_time_iso_8601": "2021-09-01T20:33:02.704504Z",
        "url": "https://files.pythonhosted.org/packages/92/d4/777a233630f7c409c420bfb3b9f7d8e229652561c1a83a661b6312617c84/seacharts-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b478ffa440afab64b2e39f146bea1bf230b49d298f841894788ec487c83ab0",
          "md5": "4f3971ea71c7a5d2251a02042fdd6f38",
          "sha256": "2d5bf20144f5c89b3aba06714563fe2876e43086e9ad449ecadaa0be2f612858"
        },
        "downloads": -1,
        "filename": "seacharts-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f3971ea71c7a5d2251a02042fdd6f38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 32347,
        "upload_time": "2021-09-07T20:39:07",
        "upload_time_iso_8601": "2021-09-07T20:39:07.710568Z",
        "url": "https://files.pythonhosted.org/packages/f9/b4/78ffa440afab64b2e39f146bea1bf230b49d298f841894788ec487c83ab0/seacharts-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe73a95c8de8f83768af903bd05e2a94180ce1d73050925071a104cabc36b3ff",
          "md5": "eae87d1fee39fd613449f86311029920",
          "sha256": "a85ca0ea041c2ef5851fee3feb5e7c1ec29eacfd27128f617ae64398a4ea2f14"
        },
        "downloads": -1,
        "filename": "seacharts-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eae87d1fee39fd613449f86311029920",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 31926,
        "upload_time": "2021-09-07T20:39:08",
        "upload_time_iso_8601": "2021-09-07T20:39:08.797562Z",
        "url": "https://files.pythonhosted.org/packages/fe/73/a95c8de8f83768af903bd05e2a94180ce1d73050925071a104cabc36b3ff/seacharts-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9b478ffa440afab64b2e39f146bea1bf230b49d298f841894788ec487c83ab0",
        "md5": "4f3971ea71c7a5d2251a02042fdd6f38",
        "sha256": "2d5bf20144f5c89b3aba06714563fe2876e43086e9ad449ecadaa0be2f612858"
      },
      "downloads": -1,
      "filename": "seacharts-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f3971ea71c7a5d2251a02042fdd6f38",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 32347,
      "upload_time": "2021-09-07T20:39:07",
      "upload_time_iso_8601": "2021-09-07T20:39:07.710568Z",
      "url": "https://files.pythonhosted.org/packages/f9/b4/78ffa440afab64b2e39f146bea1bf230b49d298f841894788ec487c83ab0/seacharts-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe73a95c8de8f83768af903bd05e2a94180ce1d73050925071a104cabc36b3ff",
        "md5": "eae87d1fee39fd613449f86311029920",
        "sha256": "a85ca0ea041c2ef5851fee3feb5e7c1ec29eacfd27128f617ae64398a4ea2f14"
      },
      "downloads": -1,
      "filename": "seacharts-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "eae87d1fee39fd613449f86311029920",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 31926,
      "upload_time": "2021-09-07T20:39:08",
      "upload_time_iso_8601": "2021-09-07T20:39:08.797562Z",
      "url": "https://files.pythonhosted.org/packages/fe/73/a95c8de8f83768af903bd05e2a94180ce1d73050925071a104cabc36b3ff/seacharts-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}