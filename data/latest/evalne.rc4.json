{
  "info": {
    "author": "Alexandru Mara",
    "author_email": "alexandru.mara@ugent.be",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development"
    ],
    "description": "# EvalNE: A Python library for evaluating Network Embedding methods #\n\n<div id=\"top\"></div>\n\n[![Documentation Status](https://readthedocs.org/projects/evalne/badge/?version=latest)](https://evalne.readthedocs.io/en/latest/?badge=latest)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/Dru-Mara/EvalNE/issues)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/Dru-Mara/EvalNE/blob/master/LICENSE)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n[![made-with-sphinx-doc](https://img.shields.io/badge/Made%20with-Sphinx-1f425f.svg)](https://www.sphinx-doc.org/)\n\n<div align=\"center\">\n<a href=\"https://evalne.readthedocs.io/en/latest/\">\n  <img src=\"docs/source/EvalNE-logo.jpg\" alt=\"Logo\" height=\"80\">\n</a>\n<br />\n<a href=\"https://evalne.readthedocs.io/en/latest/\"><strong>Read The Docs Â»</strong></a>\n</div>\n\n<!-- TABLE OF CONTENTS -->\n<details>\n  <summary>Table of Contents</summary>\n  <ol>\n    <li>\n      <a href=\"#about-evalne\">About EvalNE</a>\n      <ul>\n        <li><a href=\"#for-methodologists\">For methodologists</a></li>\n        <li><a href=\"#for-practitioners\">For practitioners</a></li>\n      </ul>\n    </li>\n    <li><a href=\"#installation\">Installation</a></li>\n    <li>\n      <a href=\"#usage\">Usage</a>\n        <ul>\n          <li><a href=\"#as-a-command-line-tool\">As a command line tool</a></li>\n          <li><a href=\"#as-an-api\">As an API</a></li>\n          <li><a href=\"#output\">Output</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#contributing\">Contributing</a></li>\n    <li><a href=\"#license\">License</a></li>\n    <li><a href=\"#citation\">Citation</a></li>\n  </ol>\n</details>\n\n\n## About EvalNE ##\n\nThis repository provides the source code for EvalNE, an open-source Python\nlibrary designed for assessing and comparing the performance of Network\nEmbedding (NE) methods on Link Prediction (LP), Sign prediction (SP), \nNetwork Reconstruction (NR) and Node Classification (NC) tasks. \nThe library intends to simplify these complex and time consuming evaluation \nprocesses by providing automation and abstraction of tasks such as \nhyper-parameter tuning and model validation, node and edge sampling, node-pair \nembedding computation, results reporting and data visualization.\n\nThe library can be used both as a command line tool and an API. In its current \nversion, EvalNE can evaluate unweighted directed and undirected simple networks.\n\nThe library is maintained by Alexandru Mara (alexandru.mara(at)ugent.be). The full\ndocumentation of EvalNE is hosted by *Read the Docs* and can be found \n[here](https://evalne.readthedocs.io/en/latest/).\n\n#### For Methodologists ####\nA command line interface in combination with a configuration file (describing datasets, \nmethods and evaluation setup) allows the user to evaluate any embedding method and compare \nit to the state of the art or replicate the experimental setup of existing papers without \nthe need to write additional code. EvalNE does not provide implementations of any NE methods\nbut offers the necessary environment to evaluate any off-the-shelf algorithm. \nImplementations of NE methods can be obtained from libraries \nsuch as \n[OpenNE](https://github.com/thunlp/OpenNE) or\n[GEM](https://github.com/palash1992/GEM) \nas well as directly from the web pages of the authors e.g. \n[Deepwalk](https://github.com/phanein/deepwalk),\n[Node2vec](https://github.com/aditya-grover/node2vec),\n[LINE](https://github.com/tangjianpku/LINE),\n[PRUNE](https://github.com/ntumslab/PRUNE),\n[Metapath2vec](https://ericdongyx.github.io/metapath2vec/m2v.html),\n[CNE](https://bitbucket.org/ghentdatascience/cne/).\n\nEvalNE does, however, includes the following LP heuristics for both directed and\nundirected networks (in and out node neighbourhoods), which can be used as\nbaselines for different downstream tasks:\n\n* Random Prediction\n* Common Neighbours\n* Jaccard Coefficient\n* Adamic Adar Index\n* Preferential Attachment\n* Resource Allocation Index\n* Cosine Similarity\n* Leicht-Holme-Newman index\n* Topological Overlap\n* Katz similarity\n* All baselines (a combination of the first 5 heuristics in a 5-dim embedding)\n\n#### For practitioners ####\nWhen used as an API, EvalNE provides functions to:\n\n* Load and preprocess graphs\n* Obtain general graph statistics\n* Conveniently read node/edge embeddings from files\n* Sample nodes/edges to form train/test/validation sets\n* Different approaches for edge sampling:\n    * Timestamp based sampling: latest nodes are used for testing\n    * Random sampling: random split of edges in train and test sets\n    * Spanning tree sampling: train set will contain a spanning tree of the graph\n    * Fast depth first search sampling: similar to spanning tree but based of DFS\n* Negative sampling or generation of non-edge pairs using:\n    * Open world assumption: train non-edges do not overlap with train edges\n    * Closed world assumption: train non-edges do not overlap with either train nor test edges\n* Evaluate LP, SP and NR for methods that output: \n    * Node Embeddings\n    * Node-pair Embeddings\n    * Similarity scores (e.g. the ones given by LP heuristics)\n* Implements simple visualization routines for embeddings and graphs \n* Includes NC evaluation for node embedding methods\n* Provides binary operators to compute edge embeddings from node feature vectors:\n    * Average\n    * Hadamard\n    * Weighted L1\n    * Weighted L2\n* Can use any scikit-learn classifier for LP/SP/NR/NC tasks\n* Provides routines to run command line commands or functions with a given timeout\n* Includes hyperparameter tuning based on grid search\n* Implements over 10 different evaluation metrics such as AUC, F-score, etc.\n* AUC and PR curves can be provided as output\n* Includes routines to generate tabular outputs and directly parse them to Latex tables\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## Instalation ## \n\nThe latest version of the library (v0.4.0) has been tested on **Python 3.8**.\n\nEvalNE depends on the following packages:\n* Numpy\n* Scipy\n* Scikit-learn\n* Matplotlib\n* NetworkX\n* Pandas\n* tqdm\n* kiwisolver\n\nBefore installing EvalNE make sure that `pip` and `python-tk` packages are installed \non your system, this can be done by running:\n```bash\nsudo apt-get install python3-pip\nsudo apt-get install python3-tk\n```\n\n**Option 1:** Install the library using pip:\n```bash\npip install evalne\n```\n\n**Option 2:** Cloning the code and installing:\n\n- Clone the EvalNE repository:\n    ```bash\n    git clone https://github.com/Dru-Mara/EvalNE.git\n    cd EvalNE\n    ```\n\n- Download dependencies and install the library:\n    ```bash\n    # System-wide install\n    sudo python setup.py install\n  \n    # Alternative install for a single user\n    python setup.py install --user\n    ```\n\nCheck the installation by running `simple_example.py` or `functions_example.py` as shown below.\nIf you have installed the package using pip, you will need to download the examples folder from\nthe github repository first.\n```bash\ncd examples/\npython simple_example.py\n```\n\n**NOTE:** In order to run the `evaluator_example.py` script, the \nOpenNE library, PRUNE and Metapath2Vec are required. The instructions for installing \nthem are available \n[here](https://github.com/thunlp/OpenNE), [here](https://github.com/ntumslab/PRUNE), \nand [here](https://www.dropbox.com/s/w3wmo2ru9kpk39n/code_metapath2vec.zip?dl=0), \nrespectively. The instructions on how to run evaluations using *.ini* files are \nprovided in the next section. \n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## Usage ##\n\n### As a command line tool ###\n\nThe library takes as input an *.ini* configuration file. This file allows the user \nto specify the evaluation settings, from the task to perform to the networks to use, \ndata preprocessing, methods and baselines to evaluate, and types of output to provide.\n\nAn example `conf.ini` file is provided describing the available options\nfor each parameter. This file can be either modified to simulate different\nevaluation settings or used as a template to generate other *.ini* files.\n\nAdditional configuration (*.ini*) files are provided replicating the experimental \nsections of different papers in the NE literature. These can be found in different\nfolders under `examples/replicated_setups`. One such configuration file is \n`examples/replicated_setups/node2vec/conf_node2vec.ini`. This file simulates the link \nprediction experiments of the paper \"Scalable Feature Learning for Networks\" by A. Grover \nand J. Leskovec.\n\nOnce the configuration is set, the evaluation can be run as indicated in the next\nsubsection.\n\n#### Running the conf examples ####\n\nIn order to run the evaluations using the provided `conf.ini` or any other *.ini*\nfile, the following steps are necessary: \n\n1. Download/Install the methods you want to test:\n    * For `conf.ini`:\n        * Install [OpenNE](https://github.com/thunlp/OpenNE) \n        * Install [PRUNE](https://github.com/ntumslab/PRUNE)\n    * For other *.ini* files you may need:\n        *   [Deepwalk](https://github.com/phanein/deepwalk),\n            [Node2vec](https://github.com/aditya-grover/node2vec),\n            [LINE](https://github.com/tangjianpku/LINE),\n            [Metapath2vec](https://ericdongyx.github.io/metapath2vec/m2v.html), and/or\n            [CNE](https://bitbucket.org/ghentdatascience/cne/).\n\n2. Download the datasets used in the examples:\n   * For `conf.ini`:\n      * [StudentDB](http://adrem.ua.ac.be/smurfig)\n      * [Facebook](https://snap.stanford.edu/data/egonets-Facebook.html) (combined network)\n      * [ArXiv GR-QC](https://snap.stanford.edu/data/ca-GrQc.html)\n   * For other *.ini* files you may need:\n      * [Facebook-wallpost](http://socialnetworks.mpi-sws.org/data-wosn2009.html)\n      * [ArXiv Astro-Ph](http://snap.stanford.edu/data/ca-AstroPh.html)\n      * [ArXiv Hep-Ph](https://snap.stanford.edu/data/cit-HepPh.html)\n      * [BlogCatalog](http://socialcomputing.asu.edu/datasets/BlogCatalog3)\n      * [Wikipedia](http://snap.stanford.edu/node2vec)\n      * [PPI](http://snap.stanford.edu/node2vec/Homo_sapiens.mat)\n\n3. Set the correct dataset paths in the INPATHS option of the corresponding *.ini* \nfile. And the correct method paths under METHODS_OPNE and/or METHODS_OTHER options. \n\n4. Run the evaluation:\n    ```bash\n    # For conf.ini run:\n    python -m evalne ./examples/conf.ini\n\n    # For conf_node2vec.ini run:\n    python -m evalne ./examples/node2vec/conf_node2vec.ini\n    ```\n\n**Note**: The input networks for EvalNE are required to be in edgelist format.\n\n### As an API ###\n\nThe library can be imported and used like any other Python module. Next, we\npresent a very basic LP example, for more complete ones we refer the user to the\n`examples` folder and the docstring documentation of the evaluator and the split submodules.\n\n```python\nfrom evalne.evaluation.evaluator import LPEvaluator\nfrom evalne.evaluation.split import LPEvalSplit\nfrom evalne.evaluation.score import Scoresheet\nfrom evalne.utils import preprocess as pp\n\n# Load and preprocess the network\nG = pp.load_graph('../evalne/tests/data/network.edgelist')\nG, _ = pp.prep_graph(G)\n\n# Create an evaluator and generate train/test edge split\ntraintest_split = LPEvalSplit()\ntraintest_split.compute_splits(G)\nnee = LPEvaluator(traintest_split)\n\n# Create a Scoresheet to store the results\nscoresheet = Scoresheet()\n\n# Set the baselines\nmethods = ['random_prediction', 'common_neighbours', 'jaccard_coefficient']\n\n# Evaluate baselines\nfor method in methods:\n    result = nee.evaluate_baseline(method=method)\n    scoresheet.log_results(result)\n\ntry:\n    # Check if OpenNE is installed\n    import openne\n\n    # Set embedding methods from OpenNE\n    methods = ['node2vec', 'deepwalk', 'GraRep']\n    commands = [\n        'python -m openne --method node2vec --graph-format edgelist --p 1 --q 1',\n        'python -m openne --method deepWalk --graph-format edgelist --number-walks 40',\n        'python -m openne --method grarep --graph-format edgelist --epochs 10']\n    edge_emb = ['average', 'hadamard']\n\n    # Evaluate embedding methods\n    for i in range(len(methods)):\n        command = commands[i] + \" --input {} --output {} --representation-size {}\"\n        results = nee.evaluate_cmd(method_name=methods[i], method_type='ne', command=command,\n                                   edge_embedding_methods=edge_emb, input_delim=' ', output_delim=' ')\n        scoresheet.log_results(results)\n\nexcept ImportError:\n    print(\"The OpenNE library is not installed. Reporting results only for the baselines...\")\n    pass\n\n# Get output\nscoresheet.print_tabular()\n\n``` \n\n### Output ###\n\nThe library stores all the output generated in a single folder per execution. The name\nof this folder is: `{task}_eval_{month}{day}_{hour}{min}`. Where `{task}` is one of:\nlp, sp, nr or nc.\n\nThe library can provide two types of outputs, depending on the value of the SCORES option\nof the configuration file. If the keyword *all* is specified, the library will generate a \nfile named `eval_output.txt` containing for each method and network analysed all the \nmetrics available (auroc, precision, f-score, etc.). If more than one experiment repeat \nis requested the values reported will be the average over all the repeats. \n\nSetting the SCORES option to `%(maximize)` will generate a similar output file as before.\nThe content of this file, however, will be a table (Alg. x Networks) containing exclusively \nthe score specified in the MAXIMIZE option for each combination of method and network\naveraged over all experiment repeats. In addition a second table indicating the average \nexecution time per method and dataset will be generated.\n\nIf the option CURVES is set to a valid option then for each method dataset and experiment \nrepeat a PR or ROC curve will be generated. If the option SAVE_PREP_NW is set to True, each\nevaluated network will be stored, in edgelist format, in a folder with the same name as the \nnetwork.\n\nFinally, the library also generates an `eval.log` file and a `eval.pkl`. The first file \ncontains important information regarding the evaluation process such as methods whose \nexecution has failed, or validation scores. The second one encapsulates all the evaluation\nresults as a pickle file. This file can be conveniently loaded and the results can be \ntransformed into e.g. pandas dataframes or latex tables.\n\n### Parallelization ###\n\nEvalNE makes extensive use of numpy for most operations. Numpy, in turn, \nuses other libraries such as OpenMP, MKL, etc., to provide parallelization. In order to allow for \ncertain control on the maximum number of threads used during execution, we include a simple bash \nscript (`set_numpy_threads.sh`). The script located inside the `scripts` folder can be given execution\npermissions and run as follows:\n\n```bash\n# Give execution permissions:\nchmod +x set_numpy_threads.sh\n\n# Run the script:\nsource set_numpy_threads.sh\n# The script will then ask for the maximum number of threads to use.\n ```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## Contributing\n\nContributions are **greatly appreciated**. If you want to help us improve EvalNE, \nplease fork the repo and create a new pull request. Don't forget to give the project a star! Thanks!\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\nAlternatively, you can make suggestions or report bugs by opening a new issue with the appropriate tag \n(\"feature\" or \"bug\") and following our Contributing template.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## License\n\nDistributed under the MIT License. See `LICENSE.txt` for more information.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## Citation ##\n\nIf you have found EvaNE useful in your research, please consider giving the repo a star \nand citing our [paper](https://www.sciencedirect.com/science/article/pii/S2352711022000139):\n\n```bibtex\n    @article{MARA2022evalne,\n      title = {EvalNE: A Framework for Network Embedding Evaluation},\n      author = {Alexandru Mara and Jefrey Lijffijt and Tijl {De Bie}},\n      journal = {SoftwareX},\n      volume = {17},\n      pages = {},\n      year = {2022},\n      issn = {100997},\n      doi = {10.1016/j.softx.2022.100997},\n      url = {https://www.sciencedirect.com/science/article/pii/S2352711022000139}\n    }\n```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dru-Mara/EvalNE",
    "keywords": "evaluation embedding link-prediction sign-prediction node-classification network-reconstruction networks graphs visualization",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "evalne",
    "package_url": "https://pypi.org/project/evalne/",
    "platform": null,
    "project_url": "https://pypi.org/project/evalne/",
    "project_urls": {
      "Homepage": "https://github.com/Dru-Mara/EvalNE"
    },
    "release_url": "https://pypi.org/project/evalne/0.4.0/",
    "requires_dist": [
      "numpy",
      "scikit-learn",
      "networkx",
      "scipy",
      "matplotlib",
      "pandas",
      "pyparsing",
      "tqdm",
      "kiwisolver",
      "joblib"
    ],
    "requires_python": ">3.7",
    "summary": "Open Source Network Embedding Evaluation toolkit",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14329661,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecc0e8d543f156d067cb893f3e57067304aa44dc26bf32e27ceb39a8667be8df",
          "md5": "e787ea266aaabe388ec9ca74c4647656",
          "sha256": "6be0e4126d98869f787cb626c57300618d19cc64e6516f686286d73ce8b4cdf3"
        },
        "downloads": -1,
        "filename": "evalne-0.2.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e787ea266aaabe388ec9ca74c4647656",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
        "size": 43687,
        "upload_time": "2019-03-14T10:13:05",
        "upload_time_iso_8601": "2019-03-14T10:13:05.075954Z",
        "url": "https://files.pythonhosted.org/packages/ec/c0/e8d543f156d067cb893f3e57067304aa44dc26bf32e27ceb39a8667be8df/evalne-0.2.2-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "306e5c88a22a56984579e14e8d824f0636dad0e45841d38a4dd336ba379e14e1",
          "md5": "4f126e4a4992e402b04ac43682458946",
          "sha256": "26e14679bcaa1f01b72a0d31bdc99467b8433c691c87ee8d4d4c15ae416d52f8"
        },
        "downloads": -1,
        "filename": "evalne-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4f126e4a4992e402b04ac43682458946",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
        "size": 36382,
        "upload_time": "2019-03-14T10:13:06",
        "upload_time_iso_8601": "2019-03-14T10:13:06.771130Z",
        "url": "https://files.pythonhosted.org/packages/30/6e/5c88a22a56984579e14e8d824f0636dad0e45841d38a4dd336ba379e14e1/evalne-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c594af33698814305ef457dbe8442ac2eeba7ad10bf9bc8fca2cdeb2ce21c596",
          "md5": "cf00c531d8c04b57521d6312cced1543",
          "sha256": "5783f07100c576c03bd3cf5a9506479c6340a954f82743652c2f7a35877caa1e"
        },
        "downloads": -1,
        "filename": "evalne-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf00c531d8c04b57521d6312cced1543",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
        "size": 65576,
        "upload_time": "2019-11-03T12:27:36",
        "upload_time_iso_8601": "2019-11-03T12:27:36.785373Z",
        "url": "https://files.pythonhosted.org/packages/c5/94/af33698814305ef457dbe8442ac2eeba7ad10bf9bc8fca2cdeb2ce21c596/evalne-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57c110b75968b61a3188dabbda15bf8769c106c3032cbe015009744f064ecefc",
          "md5": "04e294ead8cec8d9abe05e21fd463498",
          "sha256": "4db9213eb7fd7277d9f3f3e0945ddb37d60f381170e6052ffc21bdab0e3b41d0"
        },
        "downloads": -1,
        "filename": "evalne-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04e294ead8cec8d9abe05e21fd463498",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
        "size": 56568,
        "upload_time": "2019-11-03T12:27:38",
        "upload_time_iso_8601": "2019-11-03T12:27:38.708278Z",
        "url": "https://files.pythonhosted.org/packages/57/c1/10b75968b61a3188dabbda15bf8769c106c3032cbe015009744f064ecefc/evalne-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9a3156eca6f581b67365600708f650c494719bc399f4629febee22caf008325",
          "md5": "4dc95cf00ae4d2173bb488af81766f2f",
          "sha256": "f2250aabd6cbfc11c2a03614e56728ff6df620359117c58b11794fb1d4135c2b"
        },
        "downloads": -1,
        "filename": "evalne-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4dc95cf00ae4d2173bb488af81766f2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.6, <=3.6",
        "size": 86737,
        "upload_time": "2020-12-14T12:01:14",
        "upload_time_iso_8601": "2020-12-14T12:01:14.071057Z",
        "url": "https://files.pythonhosted.org/packages/b9/a3/156eca6f581b67365600708f650c494719bc399f4629febee22caf008325/evalne-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da546c2d5c49e33ca88d373ce826175055da0daf40e4032f682d3056c123be16",
          "md5": "b30a4298d010b503581c3583c5e344d5",
          "sha256": "d2f6d2c39bef9759a50c04d52f83421e8006c37550622afee4a1bc298fb09870"
        },
        "downloads": -1,
        "filename": "evalne-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b30a4298d010b503581c3583c5e344d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6, <=3.6",
        "size": 82284,
        "upload_time": "2020-12-14T12:01:15",
        "upload_time_iso_8601": "2020-12-14T12:01:15.803345Z",
        "url": "https://files.pythonhosted.org/packages/da/54/6c2d5c49e33ca88d373ce826175055da0daf40e4032f682d3056c123be16/evalne-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "934f8f8e562731ac10c498542e58989c6b4a8c149ba74f67d8b6943414eba8d6",
          "md5": "20dccc7c8edfbc52ea2a2613def799a0",
          "sha256": "b389a4646218e7150b04046aae848d7f3736ca5c3e9b71f7f5da59f10e7fa5be"
        },
        "downloads": -1,
        "filename": "evalne-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20dccc7c8edfbc52ea2a2613def799a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7",
        "size": 88912,
        "upload_time": "2022-07-04T11:49:36",
        "upload_time_iso_8601": "2022-07-04T11:49:36.569431Z",
        "url": "https://files.pythonhosted.org/packages/93/4f/8f8e562731ac10c498542e58989c6b4a8c149ba74f67d8b6943414eba8d6/evalne-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bed2b2e2af6d143f23c04c27221763f50a2f499fbefff2ca9621278dcbf0228f",
          "md5": "ab2ef4e535376f4e64cc2455b0b8de79",
          "sha256": "6b39c6d81402b11a216c404054fbcf02a149fc53939ea139b7eeb3764089c8e6"
        },
        "downloads": -1,
        "filename": "evalne-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab2ef4e535376f4e64cc2455b0b8de79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 85720,
        "upload_time": "2022-07-04T11:49:38",
        "upload_time_iso_8601": "2022-07-04T11:49:38.773203Z",
        "url": "https://files.pythonhosted.org/packages/be/d2/b2e2af6d143f23c04c27221763f50a2f499fbefff2ca9621278dcbf0228f/evalne-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "934f8f8e562731ac10c498542e58989c6b4a8c149ba74f67d8b6943414eba8d6",
        "md5": "20dccc7c8edfbc52ea2a2613def799a0",
        "sha256": "b389a4646218e7150b04046aae848d7f3736ca5c3e9b71f7f5da59f10e7fa5be"
      },
      "downloads": -1,
      "filename": "evalne-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20dccc7c8edfbc52ea2a2613def799a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.7",
      "size": 88912,
      "upload_time": "2022-07-04T11:49:36",
      "upload_time_iso_8601": "2022-07-04T11:49:36.569431Z",
      "url": "https://files.pythonhosted.org/packages/93/4f/8f8e562731ac10c498542e58989c6b4a8c149ba74f67d8b6943414eba8d6/evalne-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bed2b2e2af6d143f23c04c27221763f50a2f499fbefff2ca9621278dcbf0228f",
        "md5": "ab2ef4e535376f4e64cc2455b0b8de79",
        "sha256": "6b39c6d81402b11a216c404054fbcf02a149fc53939ea139b7eeb3764089c8e6"
      },
      "downloads": -1,
      "filename": "evalne-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab2ef4e535376f4e64cc2455b0b8de79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7",
      "size": 85720,
      "upload_time": "2022-07-04T11:49:38",
      "upload_time_iso_8601": "2022-07-04T11:49:38.773203Z",
      "url": "https://files.pythonhosted.org/packages/be/d2/b2e2af6d143f23c04c27221763f50a2f499fbefff2ca9621278dcbf0228f/evalne-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}