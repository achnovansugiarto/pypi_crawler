{
  "info": {
    "author": "Tidiane Dia",
    "author_email": "tidiane.dia@therookiecoder.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "<p align=\"center\">\n<a href=\"https://github.com/tijani-dia/yrouter/actions/workflows/test.yml\">\n    <img src=\"https://github.com/tijani-dia/yrouter/actions/workflows/test.yml/badge.svg\"/>\n</a>\n<a href=\"https://codecov.io/gh/Tijani-Dia/yrouter\">\n    <img src=\"https://codecov.io/gh/Tijani-Dia/yrouter/branch/main/graph/badge.svg?token=MKJ71ZJE67\"/>\n</a>\n<a href=\"https://pypi.org/project/yrouter/\">\n    <img src=\"https://badge.fury.io/py/yrouter.svg\" alt=\"Package version\">\n</a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\">\n    <img src=\"https://img.shields.io/badge/license-BSD-blue.svg\"/>\n</a>\n</p>\n\n# Yrouter\n\nYrouter is a framework-agnostic URL routing package focused on simplicity and performance.\n\n## `Router` class\n\nGiven a sequence of `route` objects, the `Router` class builds a tree out of it.\n\nThe mapping `routes -> tree` is important to bear in mind when building routes with `yrouter` (More on this later).\n\nThe empty route is the root of the tree and the remaining routes are its children.\nLet's see an example:\n\n```python\n>>> handler = lambda : None\n>>> routes = (\n        route(\"\", handler, name=\"index\"),\n        route(\"users\", handler, name=\"users\", subroutes = (\n            route(\"<int:id>\", handler, name=\"user-details\"),\n        )),\n        route(\"articles\", subroutes = (\n            route(\"<str:category>\", handler, name=\"category\"),\n            route(\"<slug:title>\", handler, name=\"article\"),\n        )),\n    )\n>>> router = Router(routes)\n>>> router.display()\n/\n    users/\n        <int:id>/\n    articles/\n        <str:category>/\n        <slug:title>/\n```\n\n### Matching a handler given a path\n\nWe can now match URL paths against our router.\n\n```python\n>>> router.match(\"/\")\n<FullMatch: handler=index, kwargs={}, should_redirect=False>\n>>> router.match(\"users/66/\")\n<FullMatch: handler=user-details, kwargs={'id': 66}, should_redirect=False>\n>>> router.match(\"articles/tech/\")\n<FullMatch: handler=category, kwargs={'category': 'tech'}, should_redirect=False>\n>>> router.match(\"articles/hello-world/\")\n<FullMatch: handler=article, kwargs={'title': 'hello-world'}, should_redirect=False>\n```\n\nWe can match the `/users/` path but not the `/articles/` path since the latter doesn't have a handler attached to it:\n\n```python\n>>> router.match(\"users/\")\n<FullMatch: handler=users, kwargs={}, should_redirect=False>\n>>> router.match(\"articles/\")\n<NoMatch>\n```\n\n### Finding a path given a handler name\n\nWe can also go in the opposite way: find a path given a handler name and eventual keyword arguments.\n\n```python\n>>> router.find(\"index\")\n'/'\n>>> router.find(\"user-details\", id=66)\n'/users/66/'\n>>> router.find(\"category\", category=\"tech\")\n'/articles/tech/'\n```\n\nIf given an invalid handler name or missing/extra keywords arguments for the route being searched, the find method returns None.\n\n```python\n>>> router.find(\"something\")\n>>> router.find(\"user-details\")\n>>> router.find(\"category\", category=\"tech\", foo=\"bar\")\n```\n\nThere is an exception for routes with regex converters that will return the initial path if no keyword arguments is provided. They behave similarly to other routes however when keyword arguments are provided.\n\n## `RouteNode` and `route`\n\nWhen the `router` builds up a tree out of `route` objects, it creates a `RouteNode` for each component in the `route` being described.\n\n```python\n>>> node = route(\"authors/<int:id>/<str:title>/\")\n>>> node.display(0)\nauthors/\n    <int:id>/\n        <str:title>/\n>>> node\n<RouteNode: converter=<ExactConverter: description=authors; identifier=None>; handler=None; children=1>\n>>> node = node.children[0]\n>>> node\n<RouteNode: converter=<IntConverter: description=<int:id>; identifier=id>; handler=None; children=1>\n>>> node = node.children[0]\n>>> node\n<RouteNode: converter=<StringConverter: description=<str:title>; identifier=title>; handler=None; children=0>\n>>> node.children\n[]\n```\n\nA `RouteNode` is primarily described by its `converter`.\nThe job of a `converter` is to find if a given value can be accepted by the `RouteNode` it is attached to:\n\nHere is what happens when we try to match `authors/23/some-title` against the above route:\n\n- First, the path is split like this:\n\n```python\n[\"authors\", \"23\", \"some-title\"]\n```\n\n- Then, we try to match `authors` with the first `RouteNode` converter --> `ExactConverter` --> accepts.\n\n- Match `23` with the next node's converter in the tree --> `IntConverter` --> accepts.\n\n- Match `some-title` with the next node's converter --> `StringConverter` --> refuses.\n\n- The last converter refuses `some-title` since it only matches alphabetic characters ==> return `NoMatch`\n\n## Converters\n\nThe converters provided by default are:\n\n### `IntConverter`\n\nA converter that matches positive integers.\n\n```python\n>>> converter = IntConverter(description=\"<int:id>\", identifier=\"id\")\n>>> converter.accepts(\"100\")\n(True, {'id': 100})\n>>> converter.accepts(\"0\")\n(True, {'id': 0})\n>>> converter.accepts(\"1.0\")\n(False, {})\n>>> converter.accepts(\"-1\")\n(False, {})\n>>> converter.accepts(\"hello-world\")\n(False, {})\n```\n\n### `StringConverter`\n\nA converter that only matches alphabetic characters.\n\n```python\n>>> converter = StringConverter(description=\"<str:string>\", identifier=\"string\")\n>>> converter.accepts(\"hello\")\n(True, {'string': 'hello'})\n>>> converter.accepts(\"ABC\")\n(True, {'string': 'ABC'})\n>>> converter.accepts(\"1\")\n(False, {})\n>>> converter.accepts(\"hello-world\")\n(False, {})\n```\n\n### `SlugConverter`\n\nA converter that matches slugs.\n\n```python\n>>> converter = SlugConverter(\"<slug:slug>\", \"slug\")\n>>> converter.accepts(\"a-slug\")\n(True, {'slug': 'a-slug'})\n>>> converter.accepts(\"1-random_slug\")\n(True, {'slug': '1-random_slug'})\n>>> converter.accepts(\"hello\")\n(True, {'slug': 'hello'})\n>>> converter.accepts(\"hi@hi\")\n(True, {'slug': 'hi@hi'})\n```\n\n### `UUIDConverter`\n\nA converter that matches UUIDs.\n\n```python\n>>> converter = UUIDConverter(description=\"<uuid:uuid>\", identifier=\"uuid_identifier\")\n>>> converter.accepts(\"20bfa7b2-50a5-11ec-83dc-479fd603abba\")\n(True, {'uuid_identifier': '20bfa7b2-50a5-11ec-83dc-479fd603abba'})\n>>> converter.accepts(\"1-2-3-4\")\n(False, {})\n```\n\n### `PathConverter`\n\nA converter that matches arbitrary paths.\n\n```python\n>>> converter = PathConverter(description=\"<path:path>\", identifier=\"path\")\n>>> converter.accepts(\"images/original/hero.jpg\")\n(True, {'path': 'images/original/hero.jpg'})\n>>> converter.accepts(\"1-2/three/_4\")\n(True, {'path': '1-2/three/_4'})\n```\n\n### `RegexConverter`\n\nA converter that matches regular expressions.\n\n```python\n>>> converter = RegexConverter(\"<re:(?P<match>^[a-z]*$)>\", \"(?P<match>^[a-z]*$)\")\n>>> converter.accepts(\"whatever\")\n(True, {'match': 'whatever'})\n>>> converter.accepts(\"a-b\")\n(False, {})\n```\n\nSince `yrouter` represent routes by delimiting them with the slash (`/`) character, a slash isn't allowed in regex identifiers!\n\n### Adding a converter\n\nYou can easily add a new converter to `yrouter`.\n\nA converter has a description and optionally an identifier. The latter represent the keyword argument when matching against a route. If `<int:id>` is the description of a converter, then `id` is the identifier.\n\nTo register a new converter, we need to subclass `AbstractConverter` and implement the `accepts` method.\nThis method should return `(True, matched_kwargs)` if it accepts a given value or `REFUSED` else.\n\n```python\nfrom yrouter import AbstractConverter, REFUSED\n\nclass MyCustomConverter(AbstractConverter, converter_name=\"custom\"):\n    def accepts(self, value):\n        return (True, {self.identifier: value}) if value.isidentifier() else REFUSED\n```\n\nThis converter will only accept strings that are considered as valid identifiers in Python.\n\n```python\n>>> converter = MyCustomConverter(description=\"<custom:identifier>\", identifier=\"identifier\")\n>>> converter.accepts(\"valid_identifier\")\n(True, {\"identifier\": \"valid_identifier})\n>>> converter.accepts(\"invalid-identifier\")\n(False, {})\n```\n\nTo use your converter in a route:\n\n```python\n>>> route(\"<custom:my_identifier>/, handler, name='custom-route'\")\n```\n\nYou need to make sure that the code of the converter is read before attempting to use it in a route.\n\nIdeally, you'd write the code of your converter right above the routes that use it.\n\n## Trailing slash behavior\n\nWith `yrouter`, you either choose if all your URLs have a trailing slash or if they all don't.\n\n**This is important**; you can't have, let's say `/users/66` and `users/66/`.\n\nFor more details about this, see: [To slash or no to slash](https://developers.google.com/search/blog/2010/04/to-slash-or-not-to-slash).\n\nBy default, a slash is appended to all URLs which means that if a user requests a resource like `/users/66`, our above router will match but will indicate that the user should be redirected; in this case to `users/66/`:\n\n```python\n>>> router.match(\"users/66\")\n<FullMatch: handler=user-details, kwargs={'id': 66}, should_redirect=True>\n```\n\nAs such, if you don't want to append a slash to your URLs, you'd define your router with `append_slash=False`:\n\n```python\n>>> no_slash_router = Router(routes, append_slash=False)\n>>> no_slash_router.match(\"users/66\")\n<FullMatch: handler=user-details, kwargs={'id': 66}, should_redirect=False>\n>>> no_slash_router.match(\"users/66/\")\n<FullMatch: handler=user-details, kwargs={'id': 66}, should_redirect=True>\n```\n\nIt also works when we try to find the path for a given handler name:\n\n```python\n>>> no_slash_router.find(\"category\", category=\"business\")\n'/articles/business'\n```\n\nThe empty route equivalently matches the empty string `''` and `/`:\n\n```python\n>>> router.match(\"\")\n<FullMatch: handler=index, kwargs={}, should_redirect=False>\n>>> router.match(\"/\")\n<FullMatch: handler=index, kwargs={}, should_redirect=False>\n>>> no_slash_router.match(\"\")\n<FullMatch: handler=index, kwargs={}, should_redirect=False>\n>>> no_slash_router.match(\"/\")\n<FullMatch: handler=index, kwargs={}, should_redirect=False>\n```\n\n## Extra considerations\n\n### Routes starting with the same prefix at the same level\n\nThe tree structure of the routes assumes that each node's children is described uniquely. Therefore, you can't write something like this:\n\n```python\n >>> routes = (\n    route(\"\", handler, name=\"home\"),\n    route(\"users/\", handler, name=\"users\"),\n    route(\"users/<int:id>\", handler, name=\"users-details\"),\n)\n>>> router = Router(routes)\nTraceback (most recent call last):\n...\nyrouter.exceptions.RouterConfigurationError: A node matching 'users' already exists at this level of the tree.\n```\n\nDo this instead:\n\n```python\n >>> routes = (\n    route(\"\", handler, name=\"home\"),\n    route(\"users/\", handler, name=\"users\", subroutes = (\n        route(\"<int:id>\", handler, name=\"users-details\"),\n    )),\n)\n```\n\nThe `users` route will still be matched, as long as it has a handler attached to it.\n\n### Routes with similar names\n\nIt's not recommended to have routes with similar names.\n\nYou can distinguish routes from different modules by using the following technique:\n\n```python\n>>> routes = (\n        route(\"\", handler, name=\"home:index\"),\n        route(\"users\", handler, name=\"users:index\", subroutes = (\n            route(\"<int:id>\", handler, name=\"users:details\"),\n        )),\n    )\n>>> router = Router(routes)\n>>> router.find(\"home:index\")\n'/'\n>>> router.find(\"users:index\")\n'/users/'\n>>> router.find(\"users:details\", id=66)\n'/users/66/'\n```\n\n### First `route` of a router different than the empty path\n\nIf the first route isn't the empty route described by the empty string `''` or `'/'`, `yrouter` will automatically create a route for it. It's needed as the root of the router's tree. The empty path won't be matched however:\n\n```python\n>>> router = Router([route(\"home/\", handler, name=\"home\")])\n>>> router.match(\"/home/\")\n<FullMatch: handler=home, kwargs={}, should_redirect=False>\n>>> assert not (router.match(\"\") or router.match(\"/\"))\n```\n\n## Integration with other libraries\n\nThe idea of building `yrouter` came from [this feature request in the websockets library](https://github.com/aaugustin/websockets/issues/311). As such, [`yrouter-websockets`](https://github.com/Tijani-Dia/yrouter-websockets) is a routing package for the `websockets` library based on `yrouter`.\n\n## Installation\n\nYrouter requires `Python>=3.9`. You can install it from Pypi:\n\n```python\npip install yrouter\n```\n\n## Running the tests\n\n`yrouter` has a mix of unit tests and doctests. You can run the test suite with `pytest`.\n\n```shell\ncd path/to/yrouter\npytest\n```\n\n## Benchmark\n\nYou can find a comparison of `yrouter` and some other routing modules in [`yrouter-bench`](https://github.com/Tijani-Dia/yrouter-bench).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tijani-dia/yrouter/",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yrouter",
    "package_url": "https://pypi.org/project/yrouter/",
    "platform": "",
    "project_url": "https://pypi.org/project/yrouter/",
    "project_urls": {
      "Homepage": "https://github.com/tijani-dia/yrouter/",
      "Issue tracker": "https://github.com/tijani-dia/yrouter/issues/",
      "Source": "https://github.com/tijani-dia/yrouter/"
    },
    "release_url": "https://pypi.org/project/yrouter/1.1.0/",
    "requires_dist": [
      "twine ; extra == 'build'",
      "check-wheel-contents ; extra == 'build'",
      "black ; extra == 'test'",
      "isort ; extra == 'test'",
      "flake8 ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": ">=3.9",
    "summary": "A URL routing library.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12159911,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc6519fcd2982017bd1c6754da57f178eda9941af27328665d954c002eb69c1c",
          "md5": "f5aea24b248ab06b3cc10436ed5ac007",
          "sha256": "55b7e78c2f5b1a0418c0d419859143f1e9f67ad36e8b1d9cd684cd4b930041cf"
        },
        "downloads": -1,
        "filename": "yrouter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5aea24b248ab06b3cc10436ed5ac007",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13315,
        "upload_time": "2021-11-22T19:02:01",
        "upload_time_iso_8601": "2021-11-22T19:02:01.820792Z",
        "url": "https://files.pythonhosted.org/packages/dc/65/19fcd2982017bd1c6754da57f178eda9941af27328665d954c002eb69c1c/yrouter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9217b005d92072cf3dbd262e33ffa92ab33515500f2406db1749a2bcfdab11f",
          "md5": "20d49dcc776337baa4045ac41259571f",
          "sha256": "dfd95384322353aba83676aee4856854c1ebd62a1e5b8eac75d50b7834f6d1d7"
        },
        "downloads": -1,
        "filename": "yrouter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20d49dcc776337baa4045ac41259571f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 13405,
        "upload_time": "2021-11-22T19:02:04",
        "upload_time_iso_8601": "2021-11-22T19:02:04.072756Z",
        "url": "https://files.pythonhosted.org/packages/c9/21/7b005d92072cf3dbd262e33ffa92ab33515500f2406db1749a2bcfdab11f/yrouter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08251dc5cc2502f0b2a6b62a0f0bf4c7014fe538d6b8c1ad42c1f0cd5d701834",
          "md5": "70ad13306d43204296a286d985ea010b",
          "sha256": "c79bc9bcf2fb1a946f3c55227df45301410d07585715ffce4dfac8a9e90ac69d"
        },
        "downloads": -1,
        "filename": "yrouter-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70ad13306d43204296a286d985ea010b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12612,
        "upload_time": "2021-11-29T22:46:02",
        "upload_time_iso_8601": "2021-11-29T22:46:02.427124Z",
        "url": "https://files.pythonhosted.org/packages/08/25/1dc5cc2502f0b2a6b62a0f0bf4c7014fe538d6b8c1ad42c1f0cd5d701834/yrouter-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e9d2ffcab7ce2f15e0cb18fc999924982177437943b8436ebfc2f22b1c62b41",
          "md5": "876a60effcf9212a7804ed1e0d25e12a",
          "sha256": "61cc78fa4590734f0eb3b66a45355b3091736ecf50551a1d534cef5806fed2a7"
        },
        "downloads": -1,
        "filename": "yrouter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "876a60effcf9212a7804ed1e0d25e12a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14563,
        "upload_time": "2021-11-29T22:46:04",
        "upload_time_iso_8601": "2021-11-29T22:46:04.553864Z",
        "url": "https://files.pythonhosted.org/packages/0e/9d/2ffcab7ce2f15e0cb18fc999924982177437943b8436ebfc2f22b1c62b41/yrouter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08251dc5cc2502f0b2a6b62a0f0bf4c7014fe538d6b8c1ad42c1f0cd5d701834",
        "md5": "70ad13306d43204296a286d985ea010b",
        "sha256": "c79bc9bcf2fb1a946f3c55227df45301410d07585715ffce4dfac8a9e90ac69d"
      },
      "downloads": -1,
      "filename": "yrouter-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70ad13306d43204296a286d985ea010b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 12612,
      "upload_time": "2021-11-29T22:46:02",
      "upload_time_iso_8601": "2021-11-29T22:46:02.427124Z",
      "url": "https://files.pythonhosted.org/packages/08/25/1dc5cc2502f0b2a6b62a0f0bf4c7014fe538d6b8c1ad42c1f0cd5d701834/yrouter-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e9d2ffcab7ce2f15e0cb18fc999924982177437943b8436ebfc2f22b1c62b41",
        "md5": "876a60effcf9212a7804ed1e0d25e12a",
        "sha256": "61cc78fa4590734f0eb3b66a45355b3091736ecf50551a1d534cef5806fed2a7"
      },
      "downloads": -1,
      "filename": "yrouter-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "876a60effcf9212a7804ed1e0d25e12a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 14563,
      "upload_time": "2021-11-29T22:46:04",
      "upload_time_iso_8601": "2021-11-29T22:46:04.553864Z",
      "url": "https://files.pythonhosted.org/packages/0e/9d/2ffcab7ce2f15e0cb18fc999924982177437943b8436ebfc2f22b1c62b41/yrouter-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}