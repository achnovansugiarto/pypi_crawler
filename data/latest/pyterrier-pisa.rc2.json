{
  "info": {
    "author": "Sean MacAvaney",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyTerrier PISA\n\n[PyTerrier](https://github.com/terrier-org/pyterrier) bindings for the [PISA](https://github.com/pisa-engine/pisa) search engine.\n\n## Getting Started\n\nThese bindings are only available for cpython 3.7-3.10 on `manylinux2010_x86_64` platforms. They can be installed via pip:\n\n```bash\npip install pyterrier_pisa\n```\n\n## Indexing\n\nYou can easily index corpora from PyTerrier datasets:\n\n```python\nimport pyterrier as pt\nif not pt.started():\n  pt.init()\nfrom pyterrier_pisa import PisaIndex\n\n# from a dataset\ndataset = pt.get_dataset('irds:msmarco-passage')\nindex = PisaIndex('./msmarco-passage-pisa')\nindex.index(dataset.get_corpus_iter())\n```\n\nSince PISA does not support multiple fields, you will need to have all the text you want to index in a single field. By default, it uses the \"text\" field, but this can be overridden with `text_field`.\n\n```python\ndataset = pt.get_dataset('irds:cord19')\nindex = PisaIndex('./cord19-pisa', text_field='title_and_abstract')\n# create a new field called title_and_abstract, from the title and abstract text\nindex_pipeline = pt.apply.title_and_abstract(lambda r: f'{r[\"title\"]} {r[\"abstract\"]}') >> index\nindex_pipeline.index(dataset.get_corpus_iter())\n```\n\n`PisaIndex` accepts various other options to configure the indexing process. Most notable are:\n - `stemmer`: Which stemmer to use? Options: `porter2` (default), `krovetz`, `none`\n - `threads`: How many threads to use for indexing? Default: `8`\n\n```python\n# E.g.,\nindex = PisaIndex('./cord19-pisa', stemmer='krovetz', threads=32)\n```\n\nFor some collections you can download pre-built indices from [data.terrier.org](http://data.terrier.org/). PISA indices are prefixed with `pisa_`.\n\n```python\nindex = PisaIndex.from_dataset('trec-covid', 'pisa_unstemmed')\n```\n\n## Retrieval\n\nFrom an index, you can build retrieval transformers:\n\n```python\ndph = index.dph()\nbm25 = index.bm25(k1=1.2, b=0.4)\npl2 = index.pl2(c=1.0)\nqld = index.qld(mu=1000.)\n```\n\nThese retrievers support all the typical pipeline operations.\n\nSearch:\n\n```python\nbm25.search('covid symptoms')\n#     qid           query     docno     score\n# 0     1  covid symptoms  a6avr09j  6.273450\n# 1     1  covid symptoms  hdxs9dgu  6.272374\n# 2     1  covid symptoms  zxq7dl9t  6.272374\n# ..   ..             ...       ...       ...\n# 999   1  covid symptoms  m8wggdc7  4.690651\n```\n\nBatch retrieval:\n\n```python\nprint(dph(dataset.get_topics('title')))\n#       qid                     query     docno     score\n# 0       1        coronavirus origin  8ccl9aui  9.329109\n# 1       1        coronavirus origin  es7q6c90  9.260190\n# 2       1        coronavirus origin  8l411r1w  8.862670\n# ...    ..                       ...       ...       ...\n# 49999  50  mrna vaccine coronavirus  eyitkr3s  5.610429\n```\n\nExperiment:\n\n```python\nfrom pyterrier.measures import *\npt.Experiment(\n  [dph, bm25, pl2, qld],\n  dataset.get_topics('title'),\n  dataset.get_qrels(),\n  [nDCG@10, P@5, P(rel=2)@5, 'mrt'],\n  names=['dph', 'bm25', 'pl2', 'qld']\n)\n#    name   nDCG@10    P@5  P(rel=2)@5       mrt\n# 0   dph  0.623450  0.720       0.548  1.101846\n# 1  bm25  0.624923  0.728       0.572  0.880318\n# 2   pl2  0.536506  0.632       0.456  1.123883\n# 3   qld  0.570032  0.676       0.504  0.974924\n```\n\nYou can also build a retrieval transformer from `PisaRetrieve`:\n\n```python\nfrom pyterrier_pisa import PisaRetrieve\n# from index path:\nbm25 = PisaRetrieve('./cord19-pisa', scorer='bm25', bm25_k1=1.2, bm25_b=0.4)\n# from dataset\nbm25 = PisaRetrieve.from_dataset('trec-covid', 'pisa_unstemmed', scorer='bm25', bm25_k1=1.2, bm25_b=0.4)\n```\n\n## FAQ\n\n**What retrieval functions are supported?**\n\n - `\"dph\"`. Parameters: (none)\n - `\"bm25\"`. Parameters: `k1`, `b`\n - `\"pl2\"`. Parameters: `c`\n - `\"qld\"`. Parameters: `mu`\n\n**How do I index [some other type of data]?**\n\n`PisaIndex` accepts an iterator over dicts, each of which containing a `docno` field and a `text` field. All you need to do is coerce the data into that\nformat and you're set.\n\nExamples:\n\n```python\n# any iterator\ndef iter_docs():\n  for i in range(100):\n    yield {'docno': str(i), 'text': f'document {i}'}\nindex = PisaIndex('./dummy-pisa')\nindex.index(iter_docs())\n\n# from a dataframe\nimport pandas as pd\ndocs = pd.DataFrame([\n  ('1', 'test doc'),\n  ('2', 'another doc'),\n], columns=['docno', 'text'])\nindex = PisaIndex('./dummy-pisa-2')\nindex.index(docs.to_dict(orient=\"records\"))\n```\n\n**Can I build a doc2query index?**\n\nYou can use `PisaIndex` with any document rewriter, such as doc2query or DeepCT.\nAll you need to do is build an indexing pipeline. For example:\n\n```bash\npip install --upgrade git+https://github.com/terrierteam/pyterrier_doc2query.git\nwget https://git.uwaterloo.ca/jimmylin/doc2query-data/raw/master/T5-passage/t5-base.zip\nunzip t5-base.zip\n```\n\n```python\ndoc2query = Doc2Query(out_attr=\"exp_terms\", batch_size=8)\ndataset = pt.get_dataset('irds:vaswani')\nindex = PisaIndex('./vaswani-doc2query-pisa')\nindex_pipeline = doc2query >> pt.apply.text(lambda r: f'{r[\"text\"]} {r[\"exp_terms\"]}') >> index\nindex_pipeline.index(dataset.get_corpus_iter())\n```\n\n**What are the supported index encodings and query algorithms?**\n\nRight now only `PisaIndexEncoding.block_simdbp` and `PisaQueryAlgorithm.block_max_wand` are supported. Feel free to submit a PR to support other encodings/algorithms!\n\n## References\n\n - [Mallia19]: Antonio Mallia, Michal Siedlaczek, Joel Mackenzie, Torsten Suel. PISA: Performant Indexes and Search for Academia. Proceedings of the Open-Source IR Replicability Challenge. http://ceur-ws.org/Vol-2409/docker08.pdf\n - [Macdonald21]: Craig Macdonald, Nicola Tonellotto, Sean MacAvaney, Iadh Ounis. PyTerrier: Declarative Experimentation in Python from BM25 to Dense Retrieval. Proceedings of CIKM 2021. https://dl.acm.org/doi/abs/10.1145/3459637.3482013\n\n## Credits\n\n - Sean MacAvaney, University of Glasgow\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyterrier-pisa",
    "package_url": "https://pypi.org/project/pyterrier-pisa/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyterrier-pisa/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyterrier-pisa/0.0.3/",
    "requires_dist": [
      "python-terrier (>=0.8.0)",
      "numpy (>=1.21.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A PyTerrier interface to the PISA search engine",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12964436,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84462a15e917ba7cee227f18897f6e19c78020fa9c00ab17845215ca82e35df5",
          "md5": "790629271561fc22f7056109fe3746d2",
          "sha256": "712f28c0dab3b4853eda23d5f5b968d8bb4730b8c85341a912f351963b431bd7"
        },
        "downloads": -1,
        "filename": "pyterrier_pisa-0.0.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "790629271561fc22f7056109fe3746d2",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 4566575,
        "upload_time": "2022-02-21T20:02:02",
        "upload_time_iso_8601": "2022-02-21T20:02:02.592900Z",
        "url": "https://files.pythonhosted.org/packages/84/46/2a15e917ba7cee227f18897f6e19c78020fa9c00ab17845215ca82e35df5/pyterrier_pisa-0.0.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f2d235650f860516b3f03788539c100ead693c33a24277ca3003b6149f7376",
          "md5": "bc755d78581787d17e8f83a76b72dcea",
          "sha256": "9d6b44839233f9c65a55e61abe782adfb6901f0cb5fe6733c69129057c84432f"
        },
        "downloads": -1,
        "filename": "pyterrier_pisa-0.0.2-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "bc755d78581787d17e8f83a76b72dcea",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 4562811,
        "upload_time": "2022-02-21T20:02:05",
        "upload_time_iso_8601": "2022-02-21T20:02:05.605056Z",
        "url": "https://files.pythonhosted.org/packages/a8/f2/d235650f860516b3f03788539c100ead693c33a24277ca3003b6149f7376/pyterrier_pisa-0.0.2-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1fbc6f9e7b7d256330b512036e7ad8a61847167ab33a5e9fe048de78d979399",
          "md5": "72c33747a00c37561946e63dca183e67",
          "sha256": "bf64aa2cae1cd9fe46fbbcbdcac75bf895f594f4d54e509c4fa1176b4a8b14fc"
        },
        "downloads": -1,
        "filename": "pyterrier_pisa-0.0.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "72c33747a00c37561946e63dca183e67",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 4565346,
        "upload_time": "2022-02-21T20:59:11",
        "upload_time_iso_8601": "2022-02-21T20:59:11.487613Z",
        "url": "https://files.pythonhosted.org/packages/e1/fb/c6f9e7b7d256330b512036e7ad8a61847167ab33a5e9fe048de78d979399/pyterrier_pisa-0.0.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96b1bb0541309ffccd88e72b5306de29c8ca9c288d95f3e3ced8b713074beb0",
          "md5": "a0c6b30d216c4f762adcb3f2e62357db",
          "sha256": "8545fac605054b76298b08a60e5aff152035733d9c3b21b69cd0e3359eaaaae3"
        },
        "downloads": -1,
        "filename": "pyterrier_pisa-0.0.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a0c6b30d216c4f762adcb3f2e62357db",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 4559144,
        "upload_time": "2022-02-21T20:59:13",
        "upload_time_iso_8601": "2022-02-21T20:59:13.962956Z",
        "url": "https://files.pythonhosted.org/packages/d9/6b/1bb0541309ffccd88e72b5306de29c8ca9c288d95f3e3ced8b713074beb0/pyterrier_pisa-0.0.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1fbc6f9e7b7d256330b512036e7ad8a61847167ab33a5e9fe048de78d979399",
        "md5": "72c33747a00c37561946e63dca183e67",
        "sha256": "bf64aa2cae1cd9fe46fbbcbdcac75bf895f594f4d54e509c4fa1176b4a8b14fc"
      },
      "downloads": -1,
      "filename": "pyterrier_pisa-0.0.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "72c33747a00c37561946e63dca183e67",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 4565346,
      "upload_time": "2022-02-21T20:59:11",
      "upload_time_iso_8601": "2022-02-21T20:59:11.487613Z",
      "url": "https://files.pythonhosted.org/packages/e1/fb/c6f9e7b7d256330b512036e7ad8a61847167ab33a5e9fe048de78d979399/pyterrier_pisa-0.0.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d96b1bb0541309ffccd88e72b5306de29c8ca9c288d95f3e3ced8b713074beb0",
        "md5": "a0c6b30d216c4f762adcb3f2e62357db",
        "sha256": "8545fac605054b76298b08a60e5aff152035733d9c3b21b69cd0e3359eaaaae3"
      },
      "downloads": -1,
      "filename": "pyterrier_pisa-0.0.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a0c6b30d216c4f762adcb3f2e62357db",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 4559144,
      "upload_time": "2022-02-21T20:59:13",
      "upload_time_iso_8601": "2022-02-21T20:59:13.962956Z",
      "url": "https://files.pythonhosted.org/packages/d9/6b/1bb0541309ffccd88e72b5306de29c8ca9c288d95f3e3ced8b713074beb0/pyterrier_pisa-0.0.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}