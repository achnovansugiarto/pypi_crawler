{
  "info": {
    "author": "Zakaria Morchid",
    "author_email": "morchid.zakariaa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# imobject\r\n\r\n`imobject` is a Python library that provides improvements for basic data types such as lists, dicts and dictionaries.\r\n\r\nIf you want to make data handling easier in Python, you can use imobject. It is a library that has three helpful classes: `ObjDict`, `ImprovedList` and `OrmCollection`.\r\n\r\n# Features\r\n\r\nThe `imobject` library provides the following features:\r\n\r\nThe `ObjDict` class allows you to create dictionary objects (Dictionary-like object or Dynamic Class as dict), which makes it easier to access and manipulate data elements. This class inherits from the built-in `dict` class and adds features such as converting dictionaries to objects, handling missing keys and access dictionary keys as attributes.\r\n\r\nThe `ImprovedList` class offers an improved alternative to the Python list class, which it provide additional methods for working with lists of `ObjDict`. This class extends the built-in `list` class and adds features such as inspecting the elements of a list and performing advanced mapping operations.\r\n\r\nThe `OrmCollection` class providing an interface and additional methods for querying and manipulating objects in the `ImprovedList`. This class is a list-like collection that extends `ImprovedList` and that implements an ORM overlay (wrapper) for a list of `ObjDict`.\r\n\r\n# Installation\r\nYou can install the imobject library using pip:\r\n\r\n```pip install imobject```\r\n\r\n# ontribute\r\nIf you want to contribute to the imobject library, you can clone the project from GitHub and submit a pull request:\r\n\r\n`git clone https://github.com/username/imobject.git`\r\n\r\n# Licence\r\n\r\nThe `imobject` library is distributed under the MIT license. See LICENSE for more information.\r\n\r\n# Exemples [HERE](https://github.com/mzakariabigdata/imobject/tree/main/examples)\r\n\r\nHere are some examples of using the imobject library.\r\n\r\n## ObjDict\r\n```python\r\n>>> from imobject import ObjDict\r\n>>> class Person:\r\n        def __init__(self, name: str, age: int) -> None:\r\n            self.name = name\r\n            self.age = age\r\n        def __repr__(self) -> str:\r\n            return f\"Person(name='{self.name}', age={self.age})\"\r\n\r\n>>> person = Person(\"zakaria\", 33)\r\n>>> obj = ObjDict({\"a\": 1, \"test\": {\"zak\": person}, \"b\": {\"c\": 2, \"d\": [3, 4]}})\r\n>>> obj.a\r\n1\r\n>>> obj.select(['a'])\r\n{'a': 1}\r\n>>> res = obj.select(['a', 'b'])\r\n>>> res\r\n{'a': 1, 'b': {'c': 2, 'd': [3, 4]}}\r\n>>> type(res)\r\n<class 'imobject.obj_dict.ObjDict'>\r\n>>> obj.select(1)\r\nTypeError: Argument 'wanted_keys' should be a list, got 'int' instead.\r\n>>> obj.select(\"d\")\r\nTypeError: Argument 'wanted_keys' should be a list, got 'str' instead.\r\n>>> obj.select([\"c\"])\r\nKeyError: \"'ObjDict' object has no attribute 'c'\"\r\n>>> res.b\r\n{'c': 2, 'd': [3, 4]}\r\n>>> obj.select(['a', 'test'])\r\n{'a': 1, 'test': {'zak': Person(name='zakaria', age=33)}}\r\n>>> obj.select(['c'])\r\nKeyError: \"'ObjDict' object has no attribute 'c'\"\r\n>>> obj.a = 13\r\n>>> obj.a\r\n13\r\n>>> obj['b']['c']\r\n2\r\n>>> obj.b.c\r\n2\r\n>>> obj.x = {\"y\": 5}\r\n>>> obj.x\r\n{\"y\": 5}\r\n>>> obj.inspect\r\n{   'a': 13,\r\n    'b': {'c': 2, 'd': [3, 4]},\r\n    'test': {'zak': Person(name='zakaria', age=33)},\r\n    'x': {'y': 5}}\r\n>>> del obj.a\r\n>>> obj.a\r\nAttributeError: 'ObjDict' object has no attribute 'a'\r\n>>> obj_dict = obj.to_dict()\r\n>>> obj_dict\r\n{'test': {'zak': Person(name='zakaria', age=33)}, 'b': {'c': 2, 'd': [3, 4]}, 'x': {'y': 5}}\r\n>>> type(obj_dict)\r\n<class 'dict'>\r\n>>> obj = ObjDict({\r\n              \"name\": \"Jane\",\r\n              \"age\": 35,\r\n              \"address\": {\"street\": \"456 Second St\", \"city\": \"Othertown\", \"state\": \"MA\"},\r\n              \"scores\": [85, 95],\r\n          })\r\n>>> obj\r\n{'name': 'Jane', 'age': 35, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'MA'}, 'scores': [85, 95]}\r\n>>> obj.update({\r\n              \"name\": \"Will\",\r\n              \"age\": 50,\r\n              \"address\": {\"street\": \"456 Second St\", \"city\": \"Othertown\", \"state\": \"LA\"},\r\n              \"scores\": [85, 100],\r\n          })\r\n>>> obj\r\n{'name': 'Will', 'age': 50, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}, 'scores': [85, 100]}\r\n>>> obj.items()\r\n[('name', 'Will'), ('age', 50), ('address', {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}), ('scores', [85, 100])]\r\n>>> copied_dict = obj.copy()\r\n>>> copied_dict\r\n{'name': 'Will', 'age': 50, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}, 'scores': [85, 100]}\r\n```\r\n## ImprovedList\r\n```python\r\n>>> from imobject import ImprovedList\r\n>>> simple_list = ImprovedList([1, 2, 3])\r\n>>> simple_list.first()\r\n1\r\n>>> simple_list.first(2)\r\n[1, 2]\r\n>>> ImprovedList([]).first() # None\r\n>>> ImprovedList([1, 2, 3]).last()\r\n3\r\n>>> ImprovedList([1, 2, 3]).last(2)\r\n[2, 3]\r\n>>> ImprovedList([]).last() # None\r\n>>> ImprovedList([1, 2, 3]).map(\":__str__\")\r\n['1', '2', '3']\r\n>>> ImprovedList([1, 2, 3]).map(str)\r\n['1', '2', '3']\r\n>>> ImprovedList([1, 2, 3]).map(\":to_bytes\")\r\n[b'\\x01', b'\\x02', b'\\x03']\r\n>>> ImprovedList([1, 2, 3]).map(float)\r\n[1.0, 2.0, 3.0]\r\n>>> ImprovedList([1, 2, 3]).map(lambda x: x * 2)\r\n[2, 4, 6]\r\n>>> ImprovedList([1, 2, 3]).map(lambda x: x ** 2)\r\n[1, 4, 9]\r\n>>> ImprovedList([]).map(float)\r\n[]\r\n>>> class Person:\r\n        def __init__(self, name: str, age: int, salary: float, date: str):\r\n            self.name = name\r\n            self.age = age\r\n            self.salary = salary\r\n            self.date = datetime.strptime(date, \"%Y-%m-%d\")\r\n        @property\r\n        def ret_name(self) -> str:\r\n            return self.name\r\n        def get_name(self) -> str:\r\n            return self.name\r\n        def upper_name(self) -> str:\r\n            return self.name.upper()\r\n        def get_age(self) -> int:\r\n            return self.age\r\n        def change_name(self, new_name: str) -> None:\r\n            self.name = new_name\r\n        def change_age(self, new_age: int) -> None:\r\n            self.age = new_age\r\n        def is_adult(self) -> bool:\r\n            return self.age >= 18\r\n        def set_name(self, new_name: str) -> None:\r\n            self.name = new_name\r\n        def __repr__(self) -> str:\r\n            return f\"Person(name='{self.name}', age={self.age}, salary={self.salary}, date={self.date})\"\r\n>>> from datetime import datetime\r\n>>> people = [\r\n             Person(\"Alice\", 25, 100, \"2022-01-05\"),\r\n             Person(\"Bob\", 12, 364, \"2021-12-25\"),\r\n             Person(\"Charlie\", 35, 740, \"2022-01-20\"),\r\n         ]\r\n>>> person_list = ImprovedList(people)\r\n>>> person_list.map(':upper_name')\r\n['ALICE', 'BOB', 'CHARLIE']\r\n>>> person_list.map(\":is_adult\")\r\n[True, False, True]\r\n>>> person_list.map(\":get_age\")\r\n[25, 12, 35]\r\n>>> person_list.map(\".name\")\r\n['Alice', 'Bob', 'Charlie']\r\n>>> person_list.map(\".age\")\r\n[25, 12, 35]\r\n>>> person_list.map(lambda x: x.get_name(), filter_func=lambda x: isinstance(x, Person) and x.age >= 30)\r\n['Charlie']\r\n>>> person_list.map(\":get_name\", filter_func=lambda x: isinstance(x, Person))\r\n['Alice', 'Bob', 'Charlie']\r\n>>> person_list.map(\".name\", filter_func=lambda x: isinstance(x, Person))\r\n['Alice', 'Bob', 'Charlie']\r\n>>> person_list.map(\"name\", filter_func=lambda x: isinstance(x, Person))\r\nTypeError: called must be a string start with ':' for obj method or '.' obj attribute, or a callab\r\n>>> def sort_by_date(obj: Person) -> datetime:\r\n        return obj.date\r\n>>> person_list.map(called=lambda obj: obj.name, sort_func=sort_by_date)\r\n['Bob', 'Alice', 'Charlie']\r\n>>> person_list.map(called=lambda obj: obj, sort_func=sort_by_date)\r\n[Person(name='Bob', age=12, salary=364, date=2021-12-25 00:00:00), Person(name='Alice', age=25, salary=100, date=2022-01-05 00:00:00), Person(name='Charlie', age=35, salary=740, date=2022-01-20 00:00:00)]\r\n>>> data_list = person_list + ImprovedList([1,2,3,\"four\",5.0,{\"six\": 6},[7],\"Apple\",\"Banana\",\"Orange\"])\r\n>>> data_list\r\n[Person(name='Alice', age=25, salary=100, date=2022-01-05 00:00:00), Person(name='Bob', age=12, salary=364, date=2021-12-25 00:00:00), Person(name='Charlie', age=35, salary=740, date=2022-01-20 00:00:00), 1, 2, 3, 10, 'four', 5.0, {'six': 6}, [7], 'Apple', 'Banana', 'Orange']\r\n>>> data_list.map(called=lambda x: x**2, filter_func=lambda x: isinstance(x, int) and x % 2 == 0)\r\n[4, 100]\r\n>>> data_list.map(called=lambda x: x.upper(), filter_func=lambda x: isinstance(x, str) and len(x) > 5)\r\n['BANANA', 'ORANGE']\r\n>>> data_list.map(called=lambda x: x.capitalize(), filter_func=lambda x: isinstance(x, str) and \"a\" in x.lower())\r\n['Apple', 'Banana', 'Orange']\r\n>>> data_list.map(called=str, filter_func=lambda x: isinstance(x, int) and x >= 3)\r\n['3', '10']\r\n>>> person_list.map(\":change_name\", **{\"new_name\": \"Thor\"})\r\n[None, None, None]\r\n>>> person_list.inspect\r\nImprovedList(Person) data:\r\nPerson(name='Thor', age=25, salary=100)\r\nPerson(name='Thor', age=12, salary=364)\r\nPerson(name='Thor', age=35, salary=740)\r\n>>> person_list.map(\":change_name\", **{\"new_name\": \"\"})\r\n[None, None, None]\r\n>>> person_list.inspect\r\nImprovedList(Person) data:\r\nPerson(name='', age=25, salary=100)\r\nPerson(name='', age=12, salary=364)\r\nPerson(name='', age=35, salary=740)\r\n```\r\n## OrmCollection\r\n```python\r\n# Importer la classe OrmCollection\r\nimport re\r\nfrom imobject import (\r\n    OrmCollection,\r\n    ObjDict,\r\n    Query,\r\n    Filter,\r\n    BaseMultipleFound,\r\n    BaseNotFound,\r\n)\r\n\r\n# Create an instance of the OrmCollection class with data\r\norm_collection = OrmCollection(\r\n    [\r\n        ObjDict(\r\n            {\r\n                \"name\": \"Alice\",\r\n                \"age\": 25,\r\n                \"gender\": \"female\",\r\n                \"occupation\": \"psychologist\",\r\n            }\r\n        ),\r\n        ObjDict(\r\n            {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"}\r\n        ),\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n        {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n    ]\r\n)\r\n\r\nmy_orm_collection_group = OrmCollection(\r\n    [\r\n        {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psy\"},\r\n        {\"name\": \"Alice\", \"age\": 80, \"gender\": \"male\", \"occupation\": \"retraite\"},\r\n        {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"cia\"},\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"etud\"},\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"prof\"},\r\n        {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"ing\"},\r\n        {\"name\": \"Dave\", \"age\": 31, \"gender\": \"male\", \"occupation\": \"prof\"},\r\n    ]\r\n)\r\n\r\n# Find all elements with name 'Alice'\r\nresults = orm_collection.where(name=\"Alice\")\r\nassert len(results) == 1\r\nassert results[0] == {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"gender\": \"female\",\r\n    \"occupation\": \"psychologist\",\r\n}\r\n\r\n# Find all elements where age is greater than 30 and occupation contains the word 'agent'\r\nresults = orm_collection.where(age__gt=30, occupation__contains=\"agent\")\r\nassert len(results) == 1\r\nassert results[0] == {\r\n    \"name\": \"Bob\",\r\n    \"age\": 40,\r\n    \"gender\": \"male\",\r\n    \"occupation\": \"CIA agent\",\r\n}\r\n\r\n# Find all elements where age is not equal to 30\r\nresults = orm_collection.where(age__not=30)\r\nassert len(results) == 2\r\nassert results[0] == {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"gender\": \"female\",\r\n    \"occupation\": \"psychologist\",\r\n}\r\nassert results[1] == {\r\n    \"name\": \"Bob\",\r\n    \"age\": 40,\r\n    \"gender\": \"male\",\r\n    \"occupation\": \"CIA agent\",\r\n}\r\n\r\n# Find all elements where name contains the letter 'a' and occupation starts with the letter 'p'\r\nresults = orm_collection.where(name__contains=\"c\", occupation__startswith=\"p\")\r\nassert len(results) == 1\r\nassert results[0] == {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"gender\": \"female\",\r\n    \"occupation\": \"psychologist\",\r\n}\r\n\r\n# Trouver tous les éléments avec le nom commençant par \"A\" ou se terminant par \"e\"\r\nresults = orm_collection.where(name=re.compile(r\"^A.*|.*e$\"))\r\nassert len(results) == 3\r\nassert all(result[\"name\"] in {\"Alice\", \"Charlie\", \"Dave\"} for result in results)\r\n\r\n# Trouver tous les éléments avec le nom commençant par \"A\"\r\nresults = orm_collection.where(name=re.compile(r\"^A.*\"))\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Alice\"\r\n\r\n# Trouver tous les éléments avec le nom se terminant par \"e\"\r\nresults = orm_collection.where(name=\".*e$\")\r\nassert len(results) == 3\r\nassert all(result[\"name\"] in {\"Alice\", \"Charlie\", \"Dave\"} for result in results)\r\n\r\n# Trouver tous les éléments avec un nom vide (devrait renvoyer tous les éléments)\r\nresults = orm_collection.where(name=\"\")\r\nprint(results, len(results), len(orm_collection))\r\nassert len(results) == len(orm_collection)\r\nassert all(result in orm_collection for result in results)\r\n\r\n# Trouver tous les éléments sans paramètres (devrait renvoyer 0 éléments)\r\nresults = orm_collection.where()\r\nassert len(results) == 0\r\n\r\n# Trouver tous les éléments avec l'âge égal à 100 (devrait renvoyer un ensemble vide)\r\nresults = orm_collection.where(age=100)\r\nassert len(results) == 0\r\n\r\n# Trouver tous les éléments avec le nom contenant la lettre \"z\"\r\nresults = orm_collection.where(name=re.compile(r\".z.\", re.IGNORECASE))\r\nassert len(results) == 0\r\n\r\n# Trouver tous les éléments avec le nom contenant la lettre \"a\" ou \"e\"\r\nresults = orm_collection.where(name=r\"*a*|*e*\")\r\n# assert len(results) == 3\r\n# assert all(result[\"name\"] in {\"Alice\", \"Charlie\", \"Dave\"} for result in results)\r\n\r\n# Trouver tous les éléments avec le nom se terminant par \"ie\"\r\nresults = orm_collection.where(name=re.compile(r\".*ie$\", re.IGNORECASE))\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Charlie\"\r\n\r\n# Find all elements where age is greater than or equal to 30 and name contains 'v'\r\nresults = orm_collection.where(age__gte=30, name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is not 25 and name contains 'v'\r\nresults = orm_collection.where(age__nin=[25], name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is not 25 and name ends with 'e'\r\nresults = orm_collection.where(age__nin=[25], name__endswith=\"e\")\r\nassert len(results) == 2\r\nassert {result[\"name\"] for result in results} == {\"Dave\", \"Charlie\"}\r\n\r\n# Find all elements with age equal to 25\r\nresults = orm_collection.where(age=25)\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Alice\"\r\n\r\n# Find all elements with gender 'male' and age equal to 30\r\nresults = orm_collection.where(gender=\"male\", age=30)\r\nassert len(results) == 2\r\nassert {result[\"name\"] for result in results} == {\"Charlie\", \"Dave\"}\r\n\r\n# Find all elements with name containing letter 'a'\r\nresults = orm_collection.where(name__contains=\"a\")\r\nassert len(results) == 2\r\nassert {result[\"name\"] for result in results} == {\"Charlie\", \"Dave\"}\r\n\r\n# Find all elements where age is greater than 25 and name contains 'v'\r\nresults = orm_collection.where(age__gt=25, name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is either 25 or 30 and name contains 'v'\r\nresults = orm_collection.where(age__in=[25, 30], name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is less than 40 and name contains 'v'\r\nresults = orm_collection.where(age__lt=40, name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is not 40 and name contains 'v'\r\nresults = orm_collection.where(age__not=40, name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Find all elements where age is equal to 40 and name contains 'b'\r\nresults = orm_collection.where(age__eq=40, name__contains=\"b\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Bob\"\r\n\r\n# Find all elements where age is less than or equal to 30 and name contains 'v'\r\nresults = orm_collection.where(age__lte=30, name__contains=\"v\")\r\nassert len(results) == 1\r\nassert results[0][\"name\"] == \"Dave\"\r\n\r\n# Test TypeError pour l'opérateur 'gt' avec une chaîne de caractères\r\ntry:\r\n    orm_collection.where(**{\"age__gt\": \"25\"})\r\nexcept TypeError as error:\r\n    assert (\r\n        error.args[0]\r\n        == \"Invalid type for value of '>' operator : expected int, found str\"\r\n    )\r\n\r\n# Test TypeError pour l'opérateur 'in' avec un int\r\ntry:\r\n    orm_collection.where(**{\"age__in\": 25})\r\nexcept TypeError as error:\r\n    assert (\r\n        error.args[0]\r\n        == \"Invalid type for value of 'in' operator : expected list, found int\"\r\n    )\r\n\r\n# Test TypeError pour l'opérateur 'contains' avec un int\r\ntry:\r\n    orm_collection.where(**{\"age__contains\": 25})\r\nexcept TypeError as error:\r\n    assert str(error) == \"'contains' lookup only works for string type fields\"\r\n\r\n# Test TypeError pour l'opérateur 'startswith' avec un int\r\ntry:\r\n    orm_collection.where(**{\"age__startswith\": 25})\r\nexcept TypeError as error:\r\n    assert str(error) == \"'startswith' lookup only works for string type fields\"\r\n\r\n# Test TypeError pour l'opérateur 'eq' avec une chaîne de caractères\r\ntry:\r\n    orm_collection.where(**{\"age__eq\": \"25\"})\r\nexcept TypeError as error:\r\n    assert (\r\n        str(error) == \"'==' operator only works for same type fields, found int and str\"\r\n    )\r\n\r\n# Test ValueError pour un opérateur invalide\r\ntry:\r\n    orm_collection.where(Query([Filter(\"age\", \"test_not_op\", 30)]))\r\nexcept ValueError as error:\r\n    assert str(error) == \"'test_not_op' is not a valid operator\"\r\n\r\n# Recherche des éléments avec l'âge égal à 30\r\nquery = Query([Filter(\"age\", None, 30)])\r\nexpected_names = {\"Charlie\", \"Dave\"}\r\nresults = orm_collection.where(query)\r\n\r\n# Define query to find all elements with gender equal to male AND age equal to 30 with Query\r\nquery = Query([Filter(\"age\", None, 30), Filter(\"gender\", None, \"male\")])\r\nresults = orm_collection.where(query)\r\nassert results == [\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Define query to find all elements with gender equal to male AND age equal to 30 with Query\r\nquery = Query([Filter(\"age\", None, 30)]) & Query([Filter(\"age\", None, 30)])\r\nresults = orm_collection.where(query)\r\nassert results == [\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Define query to find all elements with gender equal to male OR age equal to 30 with Query\r\nquery = Query([Filter(\"age\", None, 30)]) | Query([Filter(\"age\", None, 40)])\r\nresults = orm_collection.where(query)\r\nassert results == [\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Test ValueError pour un paramètre invalide\r\ntry:\r\n    orm_collection.where(**{\"name__notValid\": \"i\"})\r\nexcept ValueError as error:\r\n    assert str(error) == \"'notValid' is not a valid operator\"\r\n\r\ntry:\r\n    orm_collection.find_by(name=\".*a.*\")\r\n    assert (\r\n        False\r\n    ), \"Le test a échoué, car plusieurs éléments ont été trouvés avec le nom contenant 'a'.\"\r\nexcept BaseMultipleFound:\r\n    pass\r\n\r\ntry:\r\n    orm_collection.find_by(age=20)\r\n    assert (\r\n        False\r\n    ), \"Le test a échoué, car aucun élément n'a été trouvé avec l'âge égal à 20.\"\r\nexcept BaseNotFound:\r\n    pass\r\n\r\n# should return only one result\r\nresult = None\r\ntry:\r\n    result = orm_collection.find_by(name__contains=\"v\")\r\nexcept BaseMultipleFound:\r\n    assert (\r\n        False\r\n    ), \"Le test a échoué, car plusieurs éléments ont été trouvés avec le nom contenant 'v'.\"\r\nexcept BaseNotFound:\r\n    assert (\r\n        False\r\n    ), \"Le test a échoué, car aucun élément n'a été trouvé avec le nom contenant 'v'.\"\r\nassert result == {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"}\r\n\r\n# Group element by attributs\r\nresults = my_orm_collection_group.group_by(lambda x: x.age)\r\nassert len(results) == 5\r\nassert set(results.keys()) == {25, 30, 80, 31, 40}\r\n\r\nresults = my_orm_collection_group.group_by(lambda x: x.occupation)\r\nassert len(results) == 6\r\nassert set(results.keys()) == {\"psy\", \"retraite\", \"cia\", \"etud\", \"ing\", \"prof\"}\r\n\r\n# Group element by two attributs\r\nresults = orm_collection.group_by(lambda x: (x.gender, x.age))\r\nassert len(results) == 3\r\nassert results == {\r\n    (\"female\", 25): [\r\n        {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"}\r\n    ],\r\n    (\"male\", 40): [\r\n        {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"}\r\n    ],\r\n    (\"male\", 30): [\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n        {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n    ],\r\n}\r\nassert set(results.keys()) == {\r\n    (\"female\", 25),\r\n    (\"male\", 40),\r\n    (\"male\", 30),\r\n}\r\n\r\n# Créer une liste de noms\r\nnoms = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Edward\"]\r\n\r\n# Créer une collection ORM à partir de la liste\r\norm_collection_list = OrmCollection(noms)\r\n\r\n# Grouper les noms par leur première lettre\r\nresults = orm_collection_list.group_by(lambda x: x[0])\r\n\r\n# Vérifier les résultats attendus\r\nassert results == {\r\n    \"A\": [\"Alice\"],\r\n    \"B\": [\"Bob\"],\r\n    \"C\": [\"Charlie\"],\r\n    \"D\": [\"David\"],\r\n    \"E\": [\"Edward\"],\r\n}\r\n\r\n# Créer une liste de nombres\r\nnombres = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# Créer une collection ORM à partir de la liste\r\norm_collection_list = OrmCollection(nombres)\r\n\r\n# Grouper les nombres pairs et impairs\r\nresults = orm_collection_list.group_by(lambda x: x % 2 == 0)\r\nassert results == {True: [2, 4, 6, 8, 10], False: [1, 3, 5, 7, 9]}\r\n\r\n\r\n# Trier une liste d'objets de la plus jeune à la plus âgée\r\npeople = [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\"},\r\n]\r\nordered_people = orm_collection.order_by(\"age\")\r\nassert ordered_people == [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n]\r\n\r\n# Trier une liste d'objets par ordre alphabétique de leur nom :\r\npeople = [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\"},\r\n]\r\nordered_people = orm_collection.order_by(lambda x: x[\"name\"])\r\nassert ordered_people == [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Trier la liste par ordre alphabétique\r\nlst = OrmCollection([\"apple\", \"banana\", \"orange\", \"f\", \"pear\", \"c'est encore moi\"])\r\nordered_lst = lst.order_by()\r\nassert ordered_lst == [\"f\", \"pear\", \"apple\", \"banana\", \"orange\", \"c'est encore moi\"]\r\n\r\n# Trier la liste\r\nlst = OrmCollection([4, 2, 1, 3])\r\nordered_lst = lst.order_by()\r\nassert ordered_lst == [1, 2, 3, 4]\r\n\r\n\r\n# Lancer une erreur pour une clé de tri invalide\r\ntry:\r\n    orm_collection.order_by(123)\r\nexcept TypeError:\r\n    pass\r\n\r\ntry:\r\n    orm_collection.order_by(None)\r\nexcept ValueError:\r\n    pass\r\n\r\n# Tri d'une liste d'objets par l'âge décroissant\r\nordered_lst = orm_collection.order_by(lambda x: -x[\"age\"])\r\nassert ordered_lst == [\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"},\r\n]\r\n# Tri d'une liste d'objets par l'âge décroissant\r\nresults = OrmCollection([4, 2, 1, 3]).order_by(lambda x: -x)\r\n# Vérifier les résultats attendus\r\nassert results == [4, 3, 2, 1]\r\n\r\n\r\n# Utiliser la méthode all() pour récupérer tous les éléments\r\nall_elements = orm_collection.all()\r\nassert all_elements == [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Utiliser la méthode offset() pour récupérer les éléments à partir de l'index 2\r\noffset_elements = orm_collection.offset(2)\r\nassert offset_elements == [\r\n    {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"student\"},\r\n    {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"occupation\": \"engineer\"},\r\n]\r\n\r\n# Utiliser la méthode limit() pour récupérer les deux premiers éléments\r\nlimit_elements = orm_collection.limit(2)\r\nassert limit_elements == [\r\n    {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"occupation\": \"psychologist\"},\r\n    {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"occupation\": \"CIA agent\"},\r\n]\r\n\r\nlst = OrmCollection([1, 2, 3, 4])\r\ndistinct_lst = lst.distinct()\r\nassert distinct_lst == [1, 2, 3, 4]\r\n\r\nlst = OrmCollection([1, 2, 2, 3, 4, 4])\r\ndistinct_lst = lst.distinct()\r\nassert distinct_lst == [1, 2, 3, 4]\r\n\r\nlst = OrmCollection([\"apple\", \"banana\", \"orange\", \"f\", \"pear\", \"orange\"])\r\ndistinct_lst = lst.distinct()\r\nassert distinct_lst == [\"apple\", \"banana\", \"orange\", \"f\", \"pear\"]\r\n\r\norm_collection = OrmCollection(\r\n    [\r\n        {\"name\": \"Alice\", \"age\": 25, \"gender\": \"female\", \"taf\": \"psy\"},\r\n        {\"name\": \"Alice\", \"age\": 80, \"gender\": \"male\", \"taf\": \"retraite\"},\r\n        {\"name\": \"Bob\", \"age\": 40, \"gender\": \"male\", \"taf\": \"cia\"},\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"taf\": \"etud\"},\r\n        {\"name\": \"Charlie\", \"age\": 30, \"gender\": \"male\", \"taf\": \"prof\"},\r\n        {\"name\": \"Dave\", \"age\": 30, \"gender\": \"male\", \"taf\": \"ing\"},\r\n        {\"name\": \"Dave\", \"age\": 31, \"gender\": \"male\", \"taf\": \"chomor\"},\r\n    ]\r\n)\r\ndistinct_coll = orm_collection.distinct(\"name\", \"age\")\r\nassert len(distinct_coll) == 6\r\nassert {(person[\"name\"], person[\"age\"]) for person in distinct_coll} == {\r\n    (\"Alice\", 25),\r\n    (\"Alice\", 80),\r\n    (\"Dave\", 30),\r\n    (\"Dave\", 31),\r\n    (\"Bob\", 40),\r\n    (\"Charlie\", 30),\r\n}\r\n\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mzakariabigdata/imobject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imobject",
    "package_url": "https://pypi.org/project/imobject/",
    "platform": null,
    "project_url": "https://pypi.org/project/imobject/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mzakariabigdata/imobject/issues",
      "Homepage": "https://github.com/mzakariabigdata/imobject"
    },
    "release_url": "https://pypi.org/project/imobject/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Imporve object",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17445328,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f82ef6ebb944e9382ea368822e579def9756fdc400d5a0de8db89ff5e0adce",
          "md5": "b357624fcfa13bdf03c37b927681777b",
          "sha256": "74371eb1de99daca1f82c6089dc5bc0f999bcfc587e8e4b041939ef4205c96a9"
        },
        "downloads": -1,
        "filename": "imobject-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b357624fcfa13bdf03c37b927681777b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14551,
        "upload_time": "2023-03-03T21:20:29",
        "upload_time_iso_8601": "2023-03-03T21:20:29.363356Z",
        "url": "https://files.pythonhosted.org/packages/80/f8/2ef6ebb944e9382ea368822e579def9756fdc400d5a0de8db89ff5e0adce/imobject-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a81c7924e88d92b15fc7236ffb71de642a345bb38e7f75598f9ff10c65c28b9",
          "md5": "04d3bf5807833d7f1eefd9d7e6bed401",
          "sha256": "3248e02efa6e5fabbb174e4ed24b75bdade188f1be226e060c9b41f97218a14a"
        },
        "downloads": -1,
        "filename": "imobject-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04d3bf5807833d7f1eefd9d7e6bed401",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14691,
        "upload_time": "2023-03-04T17:24:03",
        "upload_time_iso_8601": "2023-03-04T17:24:03.125365Z",
        "url": "https://files.pythonhosted.org/packages/5a/81/c7924e88d92b15fc7236ffb71de642a345bb38e7f75598f9ff10c65c28b9/imobject-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d5b85ccd93dacf8519f5723698daf1dc8286c99deecd63ab06cd37968b78f6a",
          "md5": "70a4739cdaf38e7978ecc01615135410",
          "sha256": "9506aa8ec80f06b0b4d86e33b64d1b3cd20b175f2f986fd7638e4b824af2d257"
        },
        "downloads": -1,
        "filename": "imobject-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "70a4739cdaf38e7978ecc01615135410",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18729,
        "upload_time": "2023-03-06T22:27:33",
        "upload_time_iso_8601": "2023-03-06T22:27:33.395771Z",
        "url": "https://files.pythonhosted.org/packages/1d/5b/85ccd93dacf8519f5723698daf1dc8286c99deecd63ab06cd37968b78f6a/imobject-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b847d5ab48a018f6ae308008dcc4923f63817c3d4adbb1c5b4fe9185f9a8bd",
          "md5": "0409e1ce0db8d2a6c87d0a1c46b09965",
          "sha256": "c0d670b9a5dc045b901e5ccd9b84257681e9cc6ecfc365931268d030f5a46747"
        },
        "downloads": -1,
        "filename": "imobject-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0409e1ce0db8d2a6c87d0a1c46b09965",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15055,
        "upload_time": "2023-03-04T18:00:45",
        "upload_time_iso_8601": "2023-03-04T18:00:45.164095Z",
        "url": "https://files.pythonhosted.org/packages/a2/b8/47d5ab48a018f6ae308008dcc4923f63817c3d4adbb1c5b4fe9185f9a8bd/imobject-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08524febd4741e0526db3a267979e6aadf4c7525f5a5676fb82342e7827d2274",
          "md5": "0d1e35126b04cad06f3583e5d8959d69",
          "sha256": "5ba53596c62f92cce0d14021a7631fa9172dde4c7c376c2dd07b6ade215d393b"
        },
        "downloads": -1,
        "filename": "imobject-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d1e35126b04cad06f3583e5d8959d69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16436,
        "upload_time": "2023-03-04T22:35:11",
        "upload_time_iso_8601": "2023-03-04T22:35:11.327295Z",
        "url": "https://files.pythonhosted.org/packages/08/52/4febd4741e0526db3a267979e6aadf4c7525f5a5676fb82342e7827d2274/imobject-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10b6ab7a3a753bc78ef1b49801aa3a51e1102da9d1b80fd6e253b5dd0c6b4841",
          "md5": "ebe4a7bf4c486814773ce2c51c376402",
          "sha256": "7be8c11cd7a640d814e841c4adee19ab5a04662e30c3eae610aa687773f8ac93"
        },
        "downloads": -1,
        "filename": "imobject-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ebe4a7bf4c486814773ce2c51c376402",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16474,
        "upload_time": "2023-03-04T22:52:52",
        "upload_time_iso_8601": "2023-03-04T22:52:52.682038Z",
        "url": "https://files.pythonhosted.org/packages/10/b6/ab7a3a753bc78ef1b49801aa3a51e1102da9d1b80fd6e253b5dd0c6b4841/imobject-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27b27f9dfe26db03b0ca9a576b21e95e690932b4a948273f43a623c2dcd5f4a9",
          "md5": "500e5140e41dfce890c8f784e5cbd0d1",
          "sha256": "9fbd0ad6394964ee262bc1826eb14522763a080927b1c00612b40710a2c6776e"
        },
        "downloads": -1,
        "filename": "imobject-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "500e5140e41dfce890c8f784e5cbd0d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16459,
        "upload_time": "2023-03-04T22:59:30",
        "upload_time_iso_8601": "2023-03-04T22:59:30.127410Z",
        "url": "https://files.pythonhosted.org/packages/27/b2/7f9dfe26db03b0ca9a576b21e95e690932b4a948273f43a623c2dcd5f4a9/imobject-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40421e483987d8a44f9c3402f15acfa5fb2f0e6772ab4bea936438c6ff4b9dbb",
          "md5": "2f5ad6a100ffed754d545ecf141c23ca",
          "sha256": "24a8c741bc976a6de3357f121efaa1d9cb4f9f73a77ccb8b69acb5a1162bb1a7"
        },
        "downloads": -1,
        "filename": "imobject-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2f5ad6a100ffed754d545ecf141c23ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17661,
        "upload_time": "2023-03-05T00:00:52",
        "upload_time_iso_8601": "2023-03-05T00:00:52.660612Z",
        "url": "https://files.pythonhosted.org/packages/40/42/1e483987d8a44f9c3402f15acfa5fb2f0e6772ab4bea936438c6ff4b9dbb/imobject-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1805f5945f0772816892c940b9422a2094641b15a034784ab9cbc18aca695cdd",
          "md5": "c99a5c39c60cfba9f86cd1bd819c12b1",
          "sha256": "4db63cfa908e6ed7b5e67a048d77949d827ded1c6689f73ebbf516c848b2e1c5"
        },
        "downloads": -1,
        "filename": "imobject-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c99a5c39c60cfba9f86cd1bd819c12b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18172,
        "upload_time": "2023-03-05T00:29:03",
        "upload_time_iso_8601": "2023-03-05T00:29:03.068529Z",
        "url": "https://files.pythonhosted.org/packages/18/05/f5945f0772816892c940b9422a2094641b15a034784ab9cbc18aca695cdd/imobject-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb99d7023123e715e2595699754c64f7f3d82bb5fde685ce74f4d76a319a5c95",
          "md5": "9cc71ea15fa97873fbf1a9199755f483",
          "sha256": "ae5748d491b5effd8298dc3b589c73405261dc8ad64bbc8de663a75895ad0d2f"
        },
        "downloads": -1,
        "filename": "imobject-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "9cc71ea15fa97873fbf1a9199755f483",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18303,
        "upload_time": "2023-03-05T12:03:48",
        "upload_time_iso_8601": "2023-03-05T12:03:48.229165Z",
        "url": "https://files.pythonhosted.org/packages/fb/99/d7023123e715e2595699754c64f7f3d82bb5fde685ce74f4d76a319a5c95/imobject-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31b7729436fd38ed9304293de723c8683ac5a562f0bf26727ae205362890f0ae",
          "md5": "9961340f8896b6eeff1d4ba247b051fd",
          "sha256": "1400c413982d7af764e0446cbf94a29aeb8e6c96399525384ed6ef3e7d4b410a"
        },
        "downloads": -1,
        "filename": "imobject-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9961340f8896b6eeff1d4ba247b051fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18683,
        "upload_time": "2023-03-05T12:15:29",
        "upload_time_iso_8601": "2023-03-05T12:15:29.847423Z",
        "url": "https://files.pythonhosted.org/packages/31/b7/729436fd38ed9304293de723c8683ac5a562f0bf26727ae205362890f0ae/imobject-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28284762fc429fdc8f83d78e2e4590cba98a56d061106a00b884c8904d717284",
          "md5": "d25f6c7d3527b02944de9978cec6f60e",
          "sha256": "7994cc2cd095ce1e1e2f2a22e537f65ac64dc25cffcde444859a8d95ef50d13f"
        },
        "downloads": -1,
        "filename": "imobject-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d25f6c7d3527b02944de9978cec6f60e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26767,
        "upload_time": "2023-03-17T22:36:50",
        "upload_time_iso_8601": "2023-03-17T22:36:50.123407Z",
        "url": "https://files.pythonhosted.org/packages/28/28/4762fc429fdc8f83d78e2e4590cba98a56d061106a00b884c8904d717284/imobject-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4129d5910fac7d9147923af2deab1baf7c5275f79406daafd44551cd586eeccd",
          "md5": "614fbd368528d635e1e39c429e1f2690",
          "sha256": "72e659118e7689bcd2165e4943f596daaaa26185ad1b1102e8017e6f56a5c53e"
        },
        "downloads": -1,
        "filename": "imobject-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "614fbd368528d635e1e39c429e1f2690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23641,
        "upload_time": "2023-03-25T23:12:53",
        "upload_time_iso_8601": "2023-03-25T23:12:53.282523Z",
        "url": "https://files.pythonhosted.org/packages/41/29/d5910fac7d9147923af2deab1baf7c5275f79406daafd44551cd586eeccd/imobject-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4129d5910fac7d9147923af2deab1baf7c5275f79406daafd44551cd586eeccd",
        "md5": "614fbd368528d635e1e39c429e1f2690",
        "sha256": "72e659118e7689bcd2165e4943f596daaaa26185ad1b1102e8017e6f56a5c53e"
      },
      "downloads": -1,
      "filename": "imobject-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "614fbd368528d635e1e39c429e1f2690",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23641,
      "upload_time": "2023-03-25T23:12:53",
      "upload_time_iso_8601": "2023-03-25T23:12:53.282523Z",
      "url": "https://files.pythonhosted.org/packages/41/29/d5910fac7d9147923af2deab1baf7c5275f79406daafd44551cd586eeccd/imobject-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}