{
  "info": {
    "author": "keyywind",
    "author_email": "kevinwater127@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# keyscraper Package Documentation\n***\n##### This library provides various functions which simplifies webpage scraping.\n\n##### There are three modules in this package.\n\n1. **utils** - _basic utilities_\n2. **staticscraper** - _used to scrape raw html data_\n3. **dynamicscraper** - _used to scrape html data rendered by **JavaScript**_\n\n##### To install this package, type in command prompt:\n\n    pip install keyscraper\n\n***\n## [1] Basic Utilities\n\n#### (1-A) _TimeName_ - Generating a file name composed of the current time:\n\n###### TimeName(mode = \"default\")\n\n|argument|optional|default|available|\n|---|---|---|---|\n|mode| _yes_ |TimeName.MODE_KEYWIND|TimeName.MODE_KEYWIND, TimeName.MODE_DATETIME, \"default\"|\n\n###### self.get_name(basename = \"\", extension = \"\", f_datetime = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|basename|_yes_|\"\"| [ string type ] |\n|extension|_yes_|\"\"| [ string type ] |\n|f_datetime| _no_ | | [ string type ] |\n\nThere are two available modes: \"_**keywind**_\" and \"_**datetime**_\". By default, \"_**keywind**_\" is used.\n\nIn mode \"_**keywind**_\", the date is formatted as **D-{month}{day}{year}** where **{month}** consists of a **single character**, **{day}** is a **2-digit** number ranging from _**01 to 31**_ and **{year}** is a **4-digit** number such as _**2000**_.\n\n|Jan.|Feb.|Mar.|Apr.|May|Jun.|Jul.|Aug.|Sep.|Oct.|Nov.|Dec.|\n|--|--|--|--|--|--|--|--|--|--|--|--|\n|i|f|m|a|M|j|J|A|s|o|n|d|\n\nFor example, on _**December 7th of 2000**_, **D-d072000** will be the resulting date string.\n\nIn mode \"_**keywind**_\", the time is formatted as **T-{hour}{minute}{second}** where **{hour}** consists of a **2-digit** number ranging from _**00 to 23**_, both **{minute}** and **{second}** are a **2-digit** number ranging from _**00 to 59**_.\n\nFor example, at _**05:43:07 PM.**_, the resulting time string will be **T-174307**.\n\nFor example, at _**01:23:45 AM.**_ on _**April 26th, 1986**_, the resulting string will be **{basename}_D-a261986_T-012345{extension}**.\n\nIn mode \"_**datetime**_\", the programmer must pass a _**strftime**_ string. The complete documentation to datetime formatting is linked [_here_](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes).\n\n##### (1-A-1) Example of using TimeName (mode: _keywind_).\n    from keyscraper.utils import TimeName\n    mode = TimeName.MODE_KEYWIND # or TimeName.MODE_DATETIME\n    name = \"images\"\n    extension = \".jpg\"\n    timename = TimeName(mode).get_name(name, extension)\n    print(timename) # \"images_D-d072000_T-012345.jpg\"\n\n##### (1-A-2) Example of using TimeName (mode: _datetime_).\n\n    from keyscraper.utils import TimeName\n    mode = TimeName.MODE_DATETIME # or TimeName.MODE_KEYWIND\n    format_string = \"_%y%m%d-%H%M%S\"\n    name = \"images\"\n    extension = \".jpg\"\n    timename = TimeName(mode).get_name(name, extension, format_string)\n    print(timename) # \"images_001207-012345.jpg\"\n\n#### (1-B) _FileName_ - Dividing a filename into folder, file and extension:\n\n###### FileName(filename, mode = \"default\")\n\n|argument|optional|default|available|\n|---|---|---|---|\n|filename|_no_| | [ string type ] |\n|mode|_yes_|FileName.MODE_FORWARDSLASH|FileName.MODE_FORWARDSLASH, FileName.MODE_BACKWARDSLASH|\n\n###### self.\\_\\_getitem\\_\\_(key = \"all\")\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_|\"all\"|\"all\", \"folder\", \"name\", \"extension\"|\n\n##### (1-B-1) Example of using FileName\n\n    from keyscraper.utils import FileName\n    mode = FileName.MODE_FORWARDSLASH\n    filename = \"C:/Users/VIN/Desktop/utils.py\"\n    name_object = FileName(filename)\n    full_name = name_object[\"all\"]\n    file_name = name_object[\"name\"]\n    folder_name = name_object[\"folder\"]\n    extension = name_object[\"extension\"]\n    print(full_name) # \"C:/Users/VIN/Desktop/utils.py\"\n    print(folder_name) # \"C:/Users/VIN/Desktop/\"\n    print(file_name) # \"utils\"\n    print(extension) # \".py\"\n\n#### (1-C) _FileRetrieve_ - Downloading a file from a direct URL:\n\n###### FileRetrieve(directlink, filename = None, buffer = 4096, progress_bar = False, overwrite = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|directlink|_no_|  | [ string type ] |\n|filename|_yes_|  | [ string type ] |\n|buffer|_yes_|4096| [ integer (>0) type ] |\n|progress_bar|_yes_|False|True, False|\n|overwrite|_yes_|None|None, True, False|\n\nIf overwrite is _**None**_, the programmer will be asked to enter _**(Y/N)**_ on each download.\n\n###### self.simple_retrieve()\n\nCalling this function will download the file from the target URL and save it to disk with the provided filename.\n\n##### (1-C-1) Example of using FileRetrieve\n\n    from keyscraper.utils import FileRetrieve\n    url = \"http://www.lenna.org/len_top.jpg\"\n    filename = \"lenna.jpg\"\n    progress_bar = True\n    overwrite = True\n    downloader = FileRetrieve(url, filename = filename, progress_bar = progress_bar, overwrite = overwrite)\n    downloader.simple_retrieve()\n\n#### (1-D) _ImageGrabber_ - Downloading an image from a direct URL:\n\n###### ImageGrabber(filename, progressBar = False, url_timeout = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|filename|_no_|  | [ string type ] |\n|progressBar|_yes_|False|True, False|\n|url_timeout|_yes_|600| [ integer (>0) type ] |\n\nThe URL request will be open for a maximum of _**url_timeout**_ seconds.\n\n###### self.retrieve(directlink, overwrite = None, timeout = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|directlink|_no_| | [ string type ] |\n|overwrite|_yes_|None|None, True, False|\n|timeout|_yes_|None|None, [ integer (>0) type ] |\n\nIf the image hasn't finished downloading in _**timeout**_ seconds, the process will terminate.\n\nIf overwrite is _**None**_, the programmer will be asked to enter _**(Y/N)**_ on each download.\n\n##### (1-D-1) Example of using ImageGrabber\n\n    from keyscraper.utils import ImageGrabber\n    url = \"http://www.lenna.org/len_top.jpg\"\n    filename = \"lenna.jpg\"\n    progressBar = True\n    url_timeout = 60\n    downloader = ImageGrabber(filename, progressBar = progressBar, url_timeout = url_timeout)\n    downloader.retrieve(url, overwrite = True, timeout = 15)\n\n***\n\n## [2] Static Scraper\n\n#### (2-A) _SSFormat_ - Defining the node attributes to scrape:\n\n###### SSFormat(element_type, **kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|element_type|_no_| | [ string type ] |\n|search_type|_yes_|None|None, [ string type ] |\n|search_clue|_yes_|None|None, [ string type ] |\n|multiple|_yes_|False| True, False |\n|extract|_yes_|None|None, [ function (1-arg) type ] |\n|format|_yes_|None|None, [ function (1-arg) type ] |\n|nickname|_yes_|None|None, [ string type ] |\n|filter|_yes_|None|None, [ function (1-arg) type ] |\n|keep|_yes_|True|True, False |\n\n###### self.\\_\\_getitem\\_\\_(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| | \"element_type\", \"search_type\", \"search_clue\", \"multiple\", \"extract\", \"format\", \"nickname\", \"filter\", \"keep\"|\n\n###### self.get_value(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| | \"element_type\", \"search_type\", \"search_clue\", \"multiple\", \"extract\", \"format\", \"nickname\", \"filter\", \"keep\"|\n\n#### (2-B) _SSInfo_ - Defining information needed for scraping:\n\n###### SSInfo(f_site, f_page, f_item, f_attr)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|f_site|_no_| | [ string type ] |\n|f_page | _no_| | [ string type ] |\n|f_item | _no_ | | [ SSFormat type ] |\n|f_attr | _no_ | | [ list-SSFormat type ] |\n\n###### self.\\_\\_getitem\\_\\_(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| | \"f_site\", \"f_page\", \"f_item\", \"f_attr\"|\n\n###### self.format_page(page)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|page|_no_| | [ integer/string type ]|\n\nIf _**f_page**_ is not an empty string, page is put into _**f_page**_ inside curly braces. For instance, if _**f_page**_ = **\"page-{}.html\"** and _**page**_ = **5**, this function will return **\"page-5.html\"**. On the contrary, if _**f_page**_ = **\"\"**, the function will return **\"\"**.\n\n#### (2-C) _StaticScraper_ - Scraping a static webpage:\n\n###### StaticScraper(info, filename = None, mode = \"default\", timesleep = 0, **kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|info|_no_| | [ SSInfo type ] |\n|filename|_yes_|None|None, [ string type ]|\n|mode|_yes_|StaticScraper.MODE_FILE|StaticScraper.MODE_FILE, StaticScraper.MODE_READ|\n|timesleep|_yes_|0|[ integer/float (>=0) type ] |\n|buffer|_yes_|100|[ integer (>0) type ]|\n\n###### self.scrape(start = 1, pages = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|start|_yes_|1|[ integer (>0) type ]|\n|pages|_yes_|1|[ integer (>0) type ]|\n\n##### (2-C-1) Example of using StaticScraper\n\n    from keyscraper.staticscraper import SSFormat, SSInfo, StaticScraper\n    f_site = \"http://books.toscrape.com/\"\n    f_page = \"catalogue/page-{}.html\"\n    f_item = SSFormat(element_type = \"li\", search_type = \"class_\", search_clue = \"col-xs-6 col-sm-4 col-md-3 col-lg-3\", multiple = True)\n    price = SSFormat(element_type = \"p\", search_type = \"class_\", search_clue = \"price_color\", extract = \"text\", nickname = \"price\")\n    url = SSFormat(element_type = \"a\", extract = \"href\", nickname = \"link\")\n    f_attr = [ price, url ]\n    info = SSInfo(f_site, f_page, f_item, f_attr)\n    scraper = StaticScraper(info)\n    scraper.scrape(start = 1, pages = 15)\n\n***\n## [3] Dynamic Scraper\n\n#### (3-A) _DSFormat_ - Defining the node attributes to scrape:\n\n###### DSFormat(element_type, **kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|xpath|_no_| |[ string type ]|\n|relative|_yes_|False| True, False|\n|multiple|_yes_|False|True, False|\n|extract|_yes_|None|None, [ function (1-arg) type ]|\n|format|_yes_|None|None, [ function (1-arg) type ]|\n|filter|_yes_|None|None, [ function (1-arg) type ]|\n|retry|_yes_|None|None, [ function (1-arg) type ]|\n|callback|_yes_|None|None, [ function (1-arg) type ]|\n|nickname|_yes_|None|None, [ string type ]|\n|keep|_yes_|True|True, False|\n|click|_yes_|False|True, False|\n\nIn dynamic scraper, the path to each item/attribute must be provided as x-path.\n\nIf the xpath of an attribute is relative to the item (parent), _**relative**_ must be set to True.\n\nTo scrape multiple items, _**multiple**_ must be set to True.\n\nIf we want to extract the _**href**_ attribute from the _**a**_ tag, we should set _**extract**_ to _**\"href\"**_.\n\nIf we want to format a particular attribute before saving it to file, we should define a function and pass it to the argument _**format**_. The following is an example:\n\n    from keyscraper.dynamicscraper import DSFormat\n    def strip_spaces(attribute):\n        return attribute.strip(\" \")\n    DSFormat(format = strip_spaces)\n\nIf we want to filter out items whose attributes don't satisfy a certain condition, we should define a function and pass it to the argument _**filter**_. The following is an example:\n\n    from keyscraper.dynamicscraper import DSFormat\n    def filter_prices(price):\n        price = float(price)\n        return (price <= 50) # True to keep the item\n    DSFormat(filter = filter_prices)\n\nIn cases where we must wait for a specific item to render, we should define a function and pass it to the argument _**retry**_. If this function returns True, the item is saved; otherwise, we wait for it to change. The following is an example:\n\n    from keyscraper.dynamicscraper import DSFormat\n    def retry(attribute):\n      return (attribute[:4] == \"data\") # keep trying until False\n    DSFormat(retry = retry)\n\nIn _**MODE_READ**_, we may want to add the scraped data to a list; therefore, we should define a function and pass it to the argument _**callback**_. The following is an example:\n\n    from keyscraper.dynamicscraper import DSFormat\n    scraped = []\n    def callback(attribute):\n        global scraped\n        scraped.append(attribute)\n        return attribute\n    DSFormat(callback = callback)\n\nIn the csv file, we can assign a custom column name for each attribute. It can be done by passing a string to the argument _**nickname**_.\n\nIn cases where some attributes aren't needed further on, we can set _**keep**_ to False so the column will be dropped when saving to csv file.\n\nIf the item/attribute must be clicked before the desired data is available, _**click**_ should be set to True.\n\n###### self.\\_\\_getitem\\_\\_(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| |\"xpath\", \"relative\", \"multiple\", \"extract\", \"format\", \"filter\", \"retry\", \"callback\", \"nickname\", \"keep\", \"click\"|\n\n#### (3-B) _DSInfo_ - Defining information needed for scraping:\n\n###### DSInfo(f_site, f_page, f_item, f_attr)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|f_site|_no_| | [ string type ] |\n|f_page | _no_| | [ string type ] |\n|f_item | _no_ | | [ DSFormat type ] |\n|f_attr | _no_ | | [ list-DSFormat type ] |\n\n###### self.\\_\\_getitem\\_\\_(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| | \"f_site\", \"f_page\", \"f_item\", \"f_attr\"|\n\n###### self.format_page(page)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|page|_no_| | [ integer/string type ]|\n\nIf _**f_page**_ is not an empty string, page is put into _**f_page**_ inside curly braces. For instance, if _**f_page**_ = **\"page-{}.html\"** and _**page**_ = **5**, this function will return **\"page-5.html\"**. On the contrary, if _**f_page**_ = **\"\"**, the function will return **\"\"**.\n\n#### (3-C) _DriverOptions_ - Defining driver:\n\n###### DriverOptions(mode = \"default\", path = None, window = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|mode|_yes_|DriverOptions.MODE_CHROME|\"default\", DriverOptions.MODE_CHROME, DriverOptions.MODE_FIREFOX |\n|path|_yes_|None|None, [ string type ]|\n|window|_yes_|True|True, False|\n\nIn order to use dynamic scraper, a (browser) driver must be provided. As of _**February 6th of 2022**_, _**Google Chrome**_ and _**Mozilla Firefox**_ are supported.\n\nThe (file) path to the driver (executable) must be provided. By default, the program will search for the driver in the **same folder** as it's run in or folders stored in the _**PATH environment variable**_.\n\nTo download a driver for Google Chrome, visit [_here_](https://chromedriver.chromium.org/).\n\nTo download a driver for Mozilla Firefox, visit [_here_](https://github.com/mozilla/geckodriver/releases).\n\nTo hide the browser, set _**window**_ to False.\n\n#### (3-D) _DynamicScraper_ - Scraping:\n\n###### DynamicScraper(info, driveroptions, mode = \"default\", filename = None, timesleep = 0, buttonPath = None, itemWait = 1, **kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|info|_no_| | [ DSInfo type ] |\n|driveroptions|_no_| | [ DriverOptions type ] |\n|mode|_yes_|DynamicScraper.MODE_READ|\"default\", DynamicScraper.MODE_FILE, DynamicScraper.MODE_READ|\n|filename|_yes_|None|None, [ string type ] |\n|timesleep|_yes_|0|[ integer (>=0) type ]|\n|buttonPath|_yes_|None|None, [ string type ]|\n|itemWait|_yes_|1|[ integer/float (>=0) type ]|\n|buffer|_yes_|100|[ integer (>0) type ]|\n\nThere are two modes available for dynamic scraper, _**MODE_FILE**_ will save the scrape result in a _**csv**_ file, while _**MODE_READ**_ will simply scrape the webpage and the data can be accessed in _**callback**_.\n\nIn MODE_FILE, a filename should be provided. By default, a _**time name**_ will be generated for the csv file.\n\nTo slow down the scraping time, an integer can be passed to the _**timesleep**_ argument. The scraping of two consecutive pages will be separated by at least _**timesleep**_ seconds.\n\nIn cases where a load-more button exists on a single page, the x-path to that button can be provided to the argument buttonPath.\n\nIf each item must be clicked to render its content, a number can be passed to the argument _**itemWait**_. Two consecutive item clicks will be separated by at least _**itemWait**_ seconds.\n\nIn MODE_FILE, if we want to save the scrape result once every other 10 items, we should set _**buffer**_ to 10.\n\n###### self.scrape(start = 1, pages = 1, perPage = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|start|_yes_|1|[ integer (>0) type ]|\n|pages|_yes_|1|[ integer (>0) type ]|\n|perPage|_yes_|None|None, [ integer (>0) type ]|\n\nThe dynamic scraper will scrape _**pages**_ pages onward from page _**start**_.\n\nIn cases where there are too many items on each page, we can set _**perPage**_ to 50 to scrape just 50 items per page.\n\n##### (3-D-1) Example of using DynamicScraper\n\n    from keyscraper.dynamicscraper import DSFormat, DSInfo, DriverOptions, DynamicScraper\n    f_site = \"https://www.ebay.com/sch/\"\n    f_page = \"i.html?_nkw=cpu&_pgn={}\"\n    f_item = DSFormat(xpath = \"(//li[contains(@class, 's-item s-item__pl-on-bottom s-item--watch-at-corner')])\", multiple = True)\n    price = DSFormat(xpath = \"//span[contains(@class, 's-item__price')]\", relative = True, extract = \"innerHTML\", nickname = \"price\")\n    url = DSFormat(xpath = \"//a[contains(@class, 's-item__link')]\", relative = True, extract = \"href\", nickname = \"url\")\n    f_attr = [ price, url ]\n    driveroptions = DriverOptions(path = \"./chromedriver.exe\")\n    info = DSInfo(f_site, f_page, f_item, f_attr)\n    scraper = DynamicScraper(info, driveroptions, mode = DynamicScraper.MODE_FILE)\n    scraper.scrape(start = 1, pages = 2, perPage = 5)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keyywind/keyscraper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keyscraper",
    "package_url": "https://pypi.org/project/keyscraper/",
    "platform": "",
    "project_url": "https://pypi.org/project/keyscraper/",
    "project_urls": {
      "Bug Tracker": "https://github.com/keyywind/keyscraper/issues",
      "Homepage": "https://github.com/keyywind/keyscraper"
    },
    "release_url": "https://pypi.org/project/keyscraper/1.1.4/",
    "requires_dist": [
      "markdown",
      "requests",
      "selenium",
      "pandas",
      "lxml",
      "bs4"
    ],
    "requires_python": ">=3.6",
    "summary": "A library for web scraping.",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12801653,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eaeca2a869ee1d6ec2162bd3e771b55da422634d35227fdc819d52c0d49dde0",
          "md5": "f6b2ef7051751bdcef319768d6c9a53f",
          "sha256": "fa1cf760f39b9bc1e219c9b2e5cbfb42707c987155002d5c1d4eec8b589c0d43"
        },
        "downloads": -1,
        "filename": "keyscraper-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6b2ef7051751bdcef319768d6c9a53f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2784,
        "upload_time": "2021-12-07T12:55:29",
        "upload_time_iso_8601": "2021-12-07T12:55:29.387454Z",
        "url": "https://files.pythonhosted.org/packages/1e/ae/ca2a869ee1d6ec2162bd3e771b55da422634d35227fdc819d52c0d49dde0/keyscraper-0.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Pesticide"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daa8f6a3e7ef514e661258a24e775bfb21c27cb33a6b0701999ee7fea1e80aaa",
          "md5": "755ea1d6e4009333d359d20b4780df19",
          "sha256": "2814560e3a481fbcf7f4d9ffb847fc9e71de08d21d3028416e626dd48f984f57"
        },
        "downloads": -1,
        "filename": "keyscraper-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "755ea1d6e4009333d359d20b4780df19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2355,
        "upload_time": "2021-12-07T12:55:30",
        "upload_time_iso_8601": "2021-12-07T12:55:30.842526Z",
        "url": "https://files.pythonhosted.org/packages/da/a8/f6a3e7ef514e661258a24e775bfb21c27cb33a6b0701999ee7fea1e80aaa/keyscraper-0.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Pesticide"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8cbd06afdf0d9f6b38f76c6340e51d0fbab9b177a5be40968fef95b5b8add52",
          "md5": "9c74578ddecc14559d222d2203f25f28",
          "sha256": "868d65297d26f9922ad8ea49e7c3c3895ea1aa5f906bd70a8cb176f4760fc012"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c74578ddecc14559d222d2203f25f28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18946,
        "upload_time": "2021-12-10T11:42:36",
        "upload_time_iso_8601": "2021-12-10T11:42:36.615610Z",
        "url": "https://files.pythonhosted.org/packages/a8/cb/d06afdf0d9f6b38f76c6340e51d0fbab9b177a5be40968fef95b5b8add52/keyscraper-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Pesticide: Import Issues"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65fd46df96a80e4b2cb8de6afe98955f9020820e070958707b1ce8a328dac9bb",
          "md5": "203533274fc71c2613bc16f51ff8111d",
          "sha256": "7bfbaab3cfc1de347e67ae5df17a3e00b7f97b6fd9cb15593f4204a513918baf"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "203533274fc71c2613bc16f51ff8111d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16671,
        "upload_time": "2021-12-10T11:42:39",
        "upload_time_iso_8601": "2021-12-10T11:42:39.168146Z",
        "url": "https://files.pythonhosted.org/packages/65/fd/46df96a80e4b2cb8de6afe98955f9020820e070958707b1ce8a328dac9bb/keyscraper-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Pesticide: Import Issues"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42fda985d615107a39c9d99b35d5d4f0d36471948838089dd7685419fc501896",
          "md5": "95b51de87bda5865a408e89717db9cd5",
          "sha256": "1e170064f15ee5639aec8fe57f139607ef5e1b015068befd0992759c78ce3123"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95b51de87bda5865a408e89717db9cd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18953,
        "upload_time": "2021-12-10T12:46:00",
        "upload_time_iso_8601": "2021-12-10T12:46:00.380909Z",
        "url": "https://files.pythonhosted.org/packages/42/fd/a985d615107a39c9d99b35d5d4f0d36471948838089dd7685419fc501896/keyscraper-1.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Pesticide: Attribute Safeguard"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "564f0c1c380ca0d8c551f2f995a439193c222f1f4b6fac3b350b2fc08d76185c",
          "md5": "424987e5fe029479b8f29bec52b93c6f",
          "sha256": "9a6e67a0c868cc7b331ad1b19c229cac1cf18381f9d31fafc5128f873a4b2fba"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "424987e5fe029479b8f29bec52b93c6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16683,
        "upload_time": "2021-12-10T12:46:04",
        "upload_time_iso_8601": "2021-12-10T12:46:04.104491Z",
        "url": "https://files.pythonhosted.org/packages/56/4f/0c1c380ca0d8c551f2f995a439193c222f1f4b6fac3b350b2fc08d76185c/keyscraper-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "Pesticide: Attribute Safeguard"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ede600286bfdd939ced5cc50feea8e9557ec6b01828fbfe9b644da6abe2772",
          "md5": "c15cc1ae6a38d1b57721ede9fe1c1d7f",
          "sha256": "93b58a2f696d0795fd1d6b8611458a95594d9addef2728f3033b56952704dc17"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c15cc1ae6a38d1b57721ede9fe1c1d7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21510,
        "upload_time": "2021-12-10T14:22:11",
        "upload_time_iso_8601": "2021-12-10T14:22:11.195466Z",
        "url": "https://files.pythonhosted.org/packages/a6/ed/e600286bfdd939ced5cc50feea8e9557ec6b01828fbfe9b644da6abe2772/keyscraper-1.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Pesticide: Cleanup"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "876b5dd5d4d5b8940fb0e184cf0fce80503fa4af0c5c74695ac29ab6d0e2a931",
          "md5": "a28a6e280a8a22b9245e90c4233fdac4",
          "sha256": "a47d85ae060b189ebfc2f0373347c4d0305992609204d58919e28ea77d858f1c"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a28a6e280a8a22b9245e90c4233fdac4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19152,
        "upload_time": "2021-12-10T14:22:15",
        "upload_time_iso_8601": "2021-12-10T14:22:15.609477Z",
        "url": "https://files.pythonhosted.org/packages/87/6b/5dd5d4d5b8940fb0e184cf0fce80503fa4af0c5c74695ac29ab6d0e2a931/keyscraper-1.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "Pesticide: Cleanup"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0585a07e264e61ae4681f9e619efe1a49e31e47f104155250ceb5dfb3a9597b2",
          "md5": "248d460434f64e9c3402356e05ed786d",
          "sha256": "a8d5267da9955a42eb959ffa3822dd1ab71d06fdb758167663b2dbfab8c872e2"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "248d460434f64e9c3402356e05ed786d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19003,
        "upload_time": "2021-12-10T14:36:12",
        "upload_time_iso_8601": "2021-12-10T14:36:12.782281Z",
        "url": "https://files.pythonhosted.org/packages/05/85/a07e264e61ae4681f9e619efe1a49e31e47f104155250ceb5dfb3a9597b2/keyscraper-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f9cb21cbaf8b52edd6c582f9cd6e7998908816608275ac699c028bdf85d418",
          "md5": "912b5c10da2df68786d2db2a3b12ee20",
          "sha256": "6f7300b9a3553ac57343a3e831a49f80dd1052423b76f8fa279edf62bcbfb704"
        },
        "downloads": -1,
        "filename": "keyscraper-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "912b5c10da2df68786d2db2a3b12ee20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16859,
        "upload_time": "2021-12-10T14:36:16",
        "upload_time_iso_8601": "2021-12-10T14:36:16.506624Z",
        "url": "https://files.pythonhosted.org/packages/07/f9/cb21cbaf8b52edd6c582f9cd6e7998908816608275ac699c028bdf85d418/keyscraper-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "638cc4f57e7ed1962e83a64da513f23703f4aaa17e530945bed36805ca305c5d",
          "md5": "06bb56e3d844a2e9842bbff617dd9f14",
          "sha256": "b68a27e85041e4096daa4a7d275183193a02525b1f25c926987fa321d3723486"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06bb56e3d844a2e9842bbff617dd9f14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20034,
        "upload_time": "2021-12-11T05:25:56",
        "upload_time_iso_8601": "2021-12-11T05:25:56.757420Z",
        "url": "https://files.pythonhosted.org/packages/63/8c/c4f57e7ed1962e83a64da513f23703f4aaa17e530945bed36805ca305c5d/keyscraper-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6437bfd5b01b7c13d1bc397306ca662e882268ecfa090b9b34bd890a3cc04254",
          "md5": "ce0fed343f648f6a4d8121685e490968",
          "sha256": "1eb2190d2bc987b66faad9589cd75eb1562e086b105116433290089e0e9fad8b"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce0fed343f648f6a4d8121685e490968",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17755,
        "upload_time": "2021-12-11T05:26:03",
        "upload_time_iso_8601": "2021-12-11T05:26:03.578556Z",
        "url": "https://files.pythonhosted.org/packages/64/37/bfd5b01b7c13d1bc397306ca662e882268ecfa090b9b34bd890a3cc04254/keyscraper-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "087cb97f560e6bad92286f42bb8608732771f9c2dd6529a3d049622f7b6ea635",
          "md5": "7d8f926250c6c298863eadd6aa503986",
          "sha256": "ea6dcccc4cbf82c642bbc88a4540da93c1a204393f70156080e053b18ffec1f1"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d8f926250c6c298863eadd6aa503986",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21434,
        "upload_time": "2021-12-11T08:43:58",
        "upload_time_iso_8601": "2021-12-11T08:43:58.036910Z",
        "url": "https://files.pythonhosted.org/packages/08/7c/b97f560e6bad92286f42bb8608732771f9c2dd6529a3d049622f7b6ea635/keyscraper-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5807524c94d894b9ba857e200e23fe901ad615641e2c5d6146eabc9312f9979",
          "md5": "cea5a9f915c5f1024f1dbd8879b294e4",
          "sha256": "3208863e48a3e7b4df336d8c39691788a614199ac8e263d32f1bf5d082f2f5d7"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cea5a9f915c5f1024f1dbd8879b294e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18226,
        "upload_time": "2021-12-11T08:44:04",
        "upload_time_iso_8601": "2021-12-11T08:44:04.301837Z",
        "url": "https://files.pythonhosted.org/packages/d5/80/7524c94d894b9ba857e200e23fe901ad615641e2c5d6146eabc9312f9979/keyscraper-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "720631dd4f670f2363eb33c6a44439ffeaa29e805585e3dbdd162e08790a82d9",
          "md5": "29b960e8b026acd213b030a3faffed14",
          "sha256": "d042037100d3bd736b790f7dc02097b605dc7bcf9c1c25d3b9e4562fc4de3c7b"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29b960e8b026acd213b030a3faffed14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21506,
        "upload_time": "2021-12-11T09:43:14",
        "upload_time_iso_8601": "2021-12-11T09:43:14.948673Z",
        "url": "https://files.pythonhosted.org/packages/72/06/31dd4f670f2363eb33c6a44439ffeaa29e805585e3dbdd162e08790a82d9/keyscraper-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87c61ea7bf22945f30497779d4ccfbde5bed721899164a249ff746f679e95ba",
          "md5": "488c958ea1d231041da160486ee89b5c",
          "sha256": "ae3bb5bb4576d8a7afaed840656ff7d48abbac7958bd63239d48514aaecddc20"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "488c958ea1d231041da160486ee89b5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18336,
        "upload_time": "2021-12-11T09:43:20",
        "upload_time_iso_8601": "2021-12-11T09:43:20.265021Z",
        "url": "https://files.pythonhosted.org/packages/b8/7c/61ea7bf22945f30497779d4ccfbde5bed721899164a249ff746f679e95ba/keyscraper-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "903398dd872fd2945ff5951290481e0b46c2002c659f6bb507533162f78ef871",
          "md5": "8a5e9db356383432c86ad4ed85c521ba",
          "sha256": "fd0bfd2465b54efa47722d98106cae56bb50351e7dde6175aefeb103b7eba480"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a5e9db356383432c86ad4ed85c521ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24163,
        "upload_time": "2022-02-06T09:38:35",
        "upload_time_iso_8601": "2022-02-06T09:38:35.935286Z",
        "url": "https://files.pythonhosted.org/packages/90/33/98dd872fd2945ff5951290481e0b46c2002c659f6bb507533162f78ef871/keyscraper-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baf717f220ce8d9f225643ac535b2c0e40706e6b12a958756550d6f735485135",
          "md5": "35f5a7e903354f356574fe6bbbf8f610",
          "sha256": "c285b023592a778c48929c00eaca1a240ef5fa13f3ba98ca8b5eb7d99f4370fe"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "35f5a7e903354f356574fe6bbbf8f610",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24288,
        "upload_time": "2022-02-06T09:38:44",
        "upload_time_iso_8601": "2022-02-06T09:38:44.327021Z",
        "url": "https://files.pythonhosted.org/packages/ba/f7/17f220ce8d9f225643ac535b2c0e40706e6b12a958756550d6f735485135/keyscraper-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9adc5a1c79939e4ba8de30eb487ae5a081527d049e9311ba6840eb41c609b0ce",
          "md5": "7d0ab7ed70db36fd4d0bca774eecf008",
          "sha256": "cc05c4750b8099d98b25157bb5ab387c2439553299f5e3b89d9b4bbd4841b177"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d0ab7ed70db36fd4d0bca774eecf008",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20195,
        "upload_time": "2022-02-06T09:48:06",
        "upload_time_iso_8601": "2022-02-06T09:48:06.513155Z",
        "url": "https://files.pythonhosted.org/packages/9a/dc/5a1c79939e4ba8de30eb487ae5a081527d049e9311ba6840eb41c609b0ce/keyscraper-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2060324a71ee69e59785824d192ff4470f8d8eb4a944f2c168ea52178b09190e",
          "md5": "9202c6eed9af559ce098290c91c4acff",
          "sha256": "8d05a68739cabe1a5c75cc51d9ddfa281e337b4fd12aef69b255616078d39cba"
        },
        "downloads": -1,
        "filename": "keyscraper-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9202c6eed9af559ce098290c91c4acff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21539,
        "upload_time": "2022-02-06T09:48:17",
        "upload_time_iso_8601": "2022-02-06T09:48:17.214315Z",
        "url": "https://files.pythonhosted.org/packages/20/60/324a71ee69e59785824d192ff4470f8d8eb4a944f2c168ea52178b09190e/keyscraper-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9adc5a1c79939e4ba8de30eb487ae5a081527d049e9311ba6840eb41c609b0ce",
        "md5": "7d0ab7ed70db36fd4d0bca774eecf008",
        "sha256": "cc05c4750b8099d98b25157bb5ab387c2439553299f5e3b89d9b4bbd4841b177"
      },
      "downloads": -1,
      "filename": "keyscraper-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d0ab7ed70db36fd4d0bca774eecf008",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20195,
      "upload_time": "2022-02-06T09:48:06",
      "upload_time_iso_8601": "2022-02-06T09:48:06.513155Z",
      "url": "https://files.pythonhosted.org/packages/9a/dc/5a1c79939e4ba8de30eb487ae5a081527d049e9311ba6840eb41c609b0ce/keyscraper-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2060324a71ee69e59785824d192ff4470f8d8eb4a944f2c168ea52178b09190e",
        "md5": "9202c6eed9af559ce098290c91c4acff",
        "sha256": "8d05a68739cabe1a5c75cc51d9ddfa281e337b4fd12aef69b255616078d39cba"
      },
      "downloads": -1,
      "filename": "keyscraper-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9202c6eed9af559ce098290c91c4acff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21539,
      "upload_time": "2022-02-06T09:48:17",
      "upload_time_iso_8601": "2022-02-06T09:48:17.214315Z",
      "url": "https://files.pythonhosted.org/packages/20/60/324a71ee69e59785824d192ff4470f8d8eb4a944f2c168ea52178b09190e/keyscraper-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}