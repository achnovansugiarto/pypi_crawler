{
  "info": {
    "author": "MyVR",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![GNU license](https://img.shields.io/badge/licence-GNU-blue.svg)\n\n# MyVR Python Library\n\nThe MyVR Python library provides access to the MyVR API from \napplications written in Python.\n\nLearn about the MyVR API here:\nhttps://developer.myvr.com/api/\n\n## Getting started\n\n### Installation\n\n`pip install myvr-python`\n\n### Initialization\n\nGrab `YOUR_API_KEY` from myvr account (Setup > API & Data Access > API Access). \nOptionally you can set api version as `version='v1'` (`'v1'` is default value and only one supported version).\n\n```python\nfrom myvr import MyVRClient\n\nclient = MyVRClient(api_key='YOUR_API_KEY')\n```\n\n### Pagination\n\nWhen a list of objects is requested, a paginated result is returned. \nWe use a limit/offset pagination approach. Simple add `limit` and `offset` to function call.   \n`limit` -  \tThe maximum number of items to return.  \n`offset` - The starting position of the result set in relation to the complete set of unpaginated objects. \n\n```python\nclient.Property.list(limit=20, offset=5)\n```\n\nList example with query string params:\n```python\nclient.Property.list(\n    limit=20,\n    offset=5,\n    query_params={\n        'key': 'value'\n    }\n)\n```\n\n### Responses\n\nResult json response is wrapped into either dict like `MyVRObject` or list like `MyVRCollection`.\n`MyVRObject` stores object's key and `MyVRCollection` stores pagination info under `meta` key.\n\n`MyVRObject` example:\n```python\nfee = client.Fee.retrieve('fee_key')\nprint(type(fee))\n# <class 'myvr.api.myvr_objects.MyVRObject'>\n\nprint(fee)\n# {'key': 'fee_key' ...}\n\nprint(fee.key)\n# 'fee_key'\n```\n\n`MyVRCollection` example:\n```python\ncontacts = client.Contact.list()\nprint(type(contacts))\n# <class 'myvr.api.myvr_objects.MyVRCollection'>\n\nprint(contacts.meta)\n# {'count': 40, 'limit': 20, 'offset': 0, 'next': 'url', 'previous': None}\n\nprint(contacts)\n# [\n#     {'key': 'obj_key1', ...},\n#     {'key': 'obj_key2', ...}, \n#     ...\n# ]\n```\n\n### Examples\n\n```python\n# creates Tag \nclient.Tag.create(tag='Test tag')\n\n# updates Property name\nclient.Property.update('property_key', name='Updated test property')\n\n# deletes Reservation\nclient.Reservation.delete('reservation_key')\n\n# retrieves Source\nclient.Source.retrieve('source_key')\n\n# fetches list of Fee records\nclient.Fee.list()\n```\n\n## API structure\n\nAll endpoints follow the structure listed in the official MyVR documentation. \nThe structure will be listed below and then the individual methods available after.\n\n```\nMyVR\n+- Properties\n|  +- Amenity\n|  +- Calendar Event\n|  +- Daily Availability\n|  +- Photo\n|  +- Property\n|  +- Property Hierarchy\n|  +- Room\n+- Pricing\n|  +- Fee\n|  +- Fee Plan\n|  +- Rate\n|  +- Rate Plan\n+- Property Groups\n|  +- Group\n|  +- Membership\n+- Channels\n|  +- Channel Listing\n+- CRM\n|  +- Contact\n|  +- Contact Address\n|  +- Contact Email\n|  +- Contact Note\n|  +- Contact Phone\n|  +- Contact Tag\n|  +- Inquiry\n|  +- Inquiry Message\n|  +- Message Template\n|  +- Source\n|  +- Tag\n+- Bookings\n|  +- Cancellation Reason\n|  +- Expense\n|  +- Payment\n|  +- Payment Method\n|  +- Promotion\n|  +- Quote\n|  +- Refund\n|  +- Reservation\n+- Settings\n|  +- Custom Fields\n|  +- Merchant Accounts\n+- Accounts\n|  +- Account\n|  +- User\n```\n\n## API endpoints\n\nBelow is the list of all endpoints and methods that can be called.  \nEvery endpoint returns `MyVRObject` or `MyVRCollection` for list endpoints.  \nEndpoint arguments are passed as `**kwargs` except of object's key for update, retrieve and delete actions.\nFor list endpoints you can provide dict with query string parameters under `query_params` argument name.\nThe below code assumes that you have initialized the `MyVRClient` class as listed above with the name `client`.\n\n### Accounts\n\n#### Accounts\n\n```python\nclient.Account.retrieve('account_key')\n```\n\n#### Users\n\n```python\nclient.User.retrieve('user_key')\nclient.User.list()\n```\n\n### CRM\n\n#### Contacts\n\n```python\nclient.Contact.create(firstName='', lastName='')\nclient.Contact.retrieve('contact_key')\nclient.Contact.update('contact_key', firstName='')\nclient.Contact.list()\n```\n\n#### Contact Addresses\n\n```python\nclient.ContactAddress.create(city='', contact='contact_key')\nclient.ContactAddress.retrieve('address_key')\nclient.ContactAddress.update('address_key', city='', contact='contact_key')\nclient.ContactAddress.list()\nclient.ContactAddress.delete('address_key')\n```\n\n#### Contact Emails\n\n```python\nclient.ContactEmail.create(email='', contact='contact_key')\nclient.ContactEmail.retrieve('email_key')\nclient.ContactEmail.update('email_key', contact='contact_key', type='personal')\nclient.ContactEmail.list()\nclient.ContactEmail.delete('email_key')\n```\n\n#### Contact Notes\n\n```python\nclient.ContactNote.create(note='', contact='contact_key')\nclient.ContactNote.retrieve('note_key')\nclient.ContactNote.update('note_key', note='', contact='contact_key')\nclient.ContactNote.list()\nclient.ContactNote.delete('note_key')\n```\n\n#### Contact Phones\n\n```python\nclient.ContactPhone.create(phone='', contact='contact_key')\nclient.ContactPhone.retrieve('phone_key')\nclient.ContactPhone.update('phone_key', contact='contact_key', phone='')\nclient.ContactPhone.list()\nclient.ContactPhone.delete('phone_key')\n```\n\n#### Contact Tags\n\n```python\nclient.ContactTag.create(tag='tag_key', contact='contact_key')\nclient.ContactTag.retrieve('contact_tag_key')\nclient.ContactTag.update('contact_tag_key', tag='tag_key', contact='contact_key', tag='')\nclient.ContactTag.list()\nclient.ContactTag.delete('contact_tag_key')\n```\n\n#### Inquiries\n\n```python\nclient.Inquiry.create(email='', firstName='', lastName='', property='property_key')\nclient.Inquiry.retrieve('inquiry_key')\nclient.Inquiry.list()\nclient.Inquiry.assign('inquiry_key', user='')\n```\n\n#### Inquiry Messages\n\n```python\nclient.InquiryMessage.create(content='', inquiry='inquiry_key')\nclient.InquiryMessage.retrieve('inquiry_message_key')\nclient.InquiryMessage.list()\n```\n\n#### Message Templates\n\n```python\nclient.MessageTemplate.retrieve('message_template_key')\nclient.MessageTemplate.list()\nclient.MessageTemplate.render('message_template_key')\n```\n\n#### Sources\n\n```python\nclient.Source.create(code='', name='')\nclient.Source.retrieve('source_key')\nclient.Source.update('source_key', name='')\nclient.Source.list()\n```\n\n#### Tags\n\n```python\nclient.Tag.create(tag='')\nclient.Tag.retrieve('tag_key')\nclient.Tag.list()\nclient.Tag.delete('tag_key')\n```\n\n### Properties\n\n#### Amenities\n\n```python\nclient.Amenity.create(amenity='', property='property_key')\nclient.Amenity.retrieve('amenity_key')\nclient.Amenity.update(amenity='', property='property_key')\nclient.Amenity.list()\nclient.Amenity.delete('amenity_key')\n```\n\n#### Calendar Events\n\n```python\nclient.CalendarEvent.create(property='property_key', startDate='', stopDate='', status='')\nclient.CalendarEvent.retrieve('calendar_event_key')\nclient.CalendarEvent.update('calendar_event_key', startDate='')\nclient.CalendarEvent.list()\nclient.CalendarEvent.delete('calendar_event_key')\n```\n\n#### Daily Availability\n\n```python\nclient.DailyAvailability.list()\n```\n\n#### Photos\n\n```python\nclient.Photo.create(sourceUrl='', property='property_key')\nclient.Photo.retrieve('photo_key')\nclient.Photo.update('photo_key', altText='')\nclient.Photo.list()\nclient.Photo.delete('photo_key')\n```\n\n#### Property\n\n```python\nclient.Property.create(name='')\nclient.Property.retrieve('property_key')\nclient.Property.update('property_key', name='')\nclient.Property.list()\nclient.Property.delete('property_key')\nclient.Property.reset_rate('property_key')\n```\n\n#### Property Hierarchy\n\n```python\nclient.PropertyHierarchy.list()\n```\n\n#### Rooms\n\n```python\nclient.Room.create(property='property_key')\nclient.Room.retrieve('room_key')\nclient.Room.update('room_key')\nclient.Room.list()\nclient.Room.delete('room_key')\n```\n### Pricing\n\n#### Rate Plan\n\n```python\nclient.RatePlan.retrieve('RatePlanKey')\nclient.RatePlan.list() \n    \nclient.RatePlan.reset_rate('RatePlanKey')\n```\n    \n#### Rate\n\n```python\nclient.Rate.create(**{'baseRate': True, 'minStay': 3})\nclient.Rate.retrieve('RateKey')\nclient.Rate.update('RateKey', **{'baseRate': False, 'minStay': 4})\nclient.Rate.delete('RateKey')\nclient.Rate.list() \n```\n\n#### Fee Plan\n\n```python\nclient.FeePlan.retrieve('FeePlanKey')\nclient.FeePlan.list() \n```\n\n#### Fee\n\n```python\nclient.Fee.create(**{'cost': 100, 'guestThreshold': 3})\nclient.Fee.retrieve('FeeKey')\nclient.Fee.update('FeeKey', **{'description': 'new description', 'guestThreshold': 4})\nclient.Fee.delete('FeeKey')\nclient.Fee.list() \n```\n\n### Bookings\n\n#### Cancellation Reason\n\n```python\nclient.CancellationReason.retrieve('CancellationReasonKey')\nclient.CancellationReason.list() \n```\n\n#### Expense\n\n```python\nclient.Expense.retrieve('ExpenseKey')\nclient.Expense.list() \n```\n\n#### Refund\n\n```python\nclient.Refund.retrieve('RefundKey')\nclient.Refund.list() \n```\n\n#### Payment\n\n```python\nclient.Payment.create(**{'reservation': 'ReservationKey', 'amount': 400'})\nclient.Payment.retrieve('PaymentKey')\nclient.Payment.list() \n\nclient.Payment.process('PaymentKey', **{'paymentMethod': 'method'})\nclient.Payment.refund('PaymentKey', **{'amount': 500})\nclient.Payment.record('PaymentKey', **{'datePaid': '2020-02-02'})\n ```\n   \n#### Payment Method\n\n```python\nclient.PaymentMethod.create(**{'reservation': 'ReservationKey', 'stripePaymentMethod': 'method'})\nclient.PaymentMethod.retrieve('PaymentMethodKey')\nclient.PaymentMethod.list() \n```\n\n#### Quote\n\n```python\nclient.Quote.create(**{'property': 'PropertyKey', 'checkIn': '2020-02-02', 'checkOut': '2020-02-03', 'adults': 2})\nclient.Quote.retrieve('QuoteKey')\n    \nclient.Quote.create_custom(**{'amount': 500, 'checkIn': '2020-02-02', 'checkOut': '2020-02-03'})\n```  \n\n#### Promotion\n\n```python\nclient.Promotion.create(**{'code': 'ASD', 'discounts': [{\"cost\": \"50.000\", \"currency\": \"USD\"}], 'name': 'name'})\nclient.Promotion.retrieve('PromotionKey')\nclient.Promotion.list() \n```\n\n#### Reservation\n\n```python\nclient.Reservation.create(**{**{'property': 'PropertyKey', 'checkIn': '2020-02-02', 'checkOut': '2020-02-03'})\nclient.Reservation.retrieve('ReservationKey')\nclient.Reservation.update('ReservationKey', **{'adults': 4})\nclient.Reservation.list() \n\nclient.Reservation.create_from_quote('QuoteKey', **{'validateAvailability': False})\nclient.Reservation.update_from_quote('QuoteKey', **{'validateAvailability': True})\nclient.Reservation.cancel('ReservationKey')\nclient.Reservation.decline('ReservationKey')\nclient.Reservation.approve('ReservationKey')\n```\n\n### Property Groups\n\n#### Group\n\n```python\nclient.Group.create(**{'name': 'name'})\nclient.Group.retrieve('GroupKey')\nclient.Group.update('GroupKey', **{'name': 'new name'})\nclient.Group.delete('GroupKey')\nclient.Group.list() \n```\n\n#### Membership\n\n```python\nclient.Membership.create(**{'group': 'GroupKey', 'property': 'PropertyKey'})\nclient.Membership.retrieve('MembershipKey')\nclient.Membership.update('MembershipKey', **{'property': 'PropertyKey'})\nclient.Membership.delete('MembershipKey')\nclient.Membership.list() \n```\n\n### Channel Listing\n\n#### Channel Listing\n\n```python\nclient.ChannelListing.retrieve('ChannelListingKey')\nclient.ChannelListing.list() \n```\n\n### Settings\n\n#### Custom Field\n\n```python\nclient.CustomField.create(**{'dataType': 'text', 'modelType': 'property'})\nclient.CustomField.retrieve('CustomFieldKey')\nclient.CustomField.list() \n```\n\n#### Merchant Account\n\n```python\nclient.MerchantAccount.retrieve('MerchantAccountKey')\nclient.MerchantAccount.list() \n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/myvr/myvr-python/archive/0.0.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/myvr/myvr-python",
    "keywords": "",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "myvr-python",
    "package_url": "https://pypi.org/project/myvr-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/myvr-python/",
    "project_urls": {
      "Download": "https://github.com/myvr/myvr-python/archive/0.0.3.tar.gz",
      "Homepage": "https://github.com/myvr/myvr-python"
    },
    "release_url": "https://pypi.org/project/myvr-python/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "Python wrapper for MyVR API",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8961999,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e790f4bb894a58b5c3f7687b048cee18294d834966d1190e940589a474135ce",
          "md5": "fddfb06cb7199bc6d71437f8b8effbfe",
          "sha256": "82f17db1b7233aa4486783af1932dcea7f65f1a86d0a001d156f0ccd5a4e6dcd"
        },
        "downloads": -1,
        "filename": "myvr-python-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fddfb06cb7199bc6d71437f8b8effbfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 9157,
        "upload_time": "2020-12-07T14:42:43",
        "upload_time_iso_8601": "2020-12-07T14:42:43.112272Z",
        "url": "https://files.pythonhosted.org/packages/9e/79/0f4bb894a58b5c3f7687b048cee18294d834966d1190e940589a474135ce/myvr-python-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9dc76233c7a938aafb5f753ca19b9491843ba1d0ae5bc7bcdd46c4e7b2367de",
          "md5": "471256b1f98e86243c10fb5490beb2b5",
          "sha256": "381e16e670a42321b386fb4bb5d65091bfeaea8adefb134f875961a1d9624aeb"
        },
        "downloads": -1,
        "filename": "myvr-python-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "471256b1f98e86243c10fb5490beb2b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 9132,
        "upload_time": "2020-12-09T09:54:12",
        "upload_time_iso_8601": "2020-12-09T09:54:12.946643Z",
        "url": "https://files.pythonhosted.org/packages/f9/dc/76233c7a938aafb5f753ca19b9491843ba1d0ae5bc7bcdd46c4e7b2367de/myvr-python-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d695e98f2d0c91eae64cbc3da98dfcf59d2b6ff39a3a08c923618af7ed03642",
          "md5": "7833ad2d2c2eb84c43d3dc805af81706",
          "sha256": "31e88d64dce7673bf1bae9d9d12d46fba5d66d8b81ae2313f144f28767d84095"
        },
        "downloads": -1,
        "filename": "myvr-python-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7833ad2d2c2eb84c43d3dc805af81706",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 15429,
        "upload_time": "2020-12-22T15:42:50",
        "upload_time_iso_8601": "2020-12-22T15:42:50.808331Z",
        "url": "https://files.pythonhosted.org/packages/1d/69/5e98f2d0c91eae64cbc3da98dfcf59d2b6ff39a3a08c923618af7ed03642/myvr-python-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d695e98f2d0c91eae64cbc3da98dfcf59d2b6ff39a3a08c923618af7ed03642",
        "md5": "7833ad2d2c2eb84c43d3dc805af81706",
        "sha256": "31e88d64dce7673bf1bae9d9d12d46fba5d66d8b81ae2313f144f28767d84095"
      },
      "downloads": -1,
      "filename": "myvr-python-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7833ad2d2c2eb84c43d3dc805af81706",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 15429,
      "upload_time": "2020-12-22T15:42:50",
      "upload_time_iso_8601": "2020-12-22T15:42:50.808331Z",
      "url": "https://files.pythonhosted.org/packages/1d/69/5e98f2d0c91eae64cbc3da98dfcf59d2b6ff39a3a08c923618af7ed03642/myvr-python-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}