{
  "info": {
    "author": "Max Bond",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Compressed Spreadsheets\n-----------------------\n\nCompressed Spreadsheets is a simple Python library for reading & writing to `gzip`\ncompressed CSV files using a similar API as the builtin `csv.DictReader` and `csv.DictWriter`.\n\n# Priorities\n\n* Simplicity\n* Speed\n* Ergonomics\n    * Compatibility with the API of `DictReader` and `DictWriter` (though not\n      the file format)\n\n# Caveats\n\nThis code assumes that each row has to correct number of elements, in order to avoid\nimposing checks on each row.\n\nThe goal of the implementation is to be reasonably fast with a simple implementation.\nThe CSVs it generates won't be compatible with any other library, because of the (simple, easy)\nway special characters are escaped.\n\nIf we were to use `StringIO` to create a buffer that a real `DictWriter` instance\nwould write to, and then shuffle this into the compressed file, then we'd have\ncompatiblity without sacrificing simplicity; however, speed was more important\nthan compatiblity for my purposes, so I opted for this implementation.\n\nThe library does not behave well on sheets with 0 columns.\n\n# Installation\n\n## From GitHub\n\nSimply download the project and place `compressed_spreadsheets.py` into your\nproject directory; it has no external requirements.\n\n## From PyPI\n\n`pip install compressed-spreadsheets`\n\n# Examples\n\nThese examples enumerate common use cases. See the docstrings for full documentation.\n\n## Writing to a spreadsheet\n\n```\nsheet = CompressedDictWriter.open(\"my_sheet.csv.gz\", (\"Column A\", \"Column B\"))\nsheet.writeheader()\nsheet.writerow({\"Column A\": \"Value 1\", \"Column B\": \"Value 2\"})\nsheet.writerows((\n    {\"Column A\": \"foo\", \"Column B\": \"bar\"},\n    {\"Column A\": \"baz\", \"Column B\": \"snafu\"}\n))\nsheet.close()\n```\n\n## Reading from a spreadsheet\n\nCalling `CompressedDictReader.open(filename)` returns an object we can iterate over\nto retrieve our rows.\n\n```\nsheet = CompressedDictReader.open(\"my_sheet.csv.gz\")\n# If the optional fieldnames argument is omitted, it is assumed the first line is a header row\nnext(sheet) # {\"Column A\": \"Value 1\", \"Column B\": \"Value 2\"}\nfor row in sheet:\n    process(row)\n```\n\n## Specifying types for fields\n\nThe `fieldtypes` argument allows you to automatically convert values into their proper types.\n\n```\nwrite_sheet = CompressedDictWriter.open(\"my_numbers_sheet.csv.gz\", fieldnames=(\"Column A\", \"Column B\"))\nwrite_sheet.writeheader()\nwrite_sheet.writerow({\"Column A\": 10, \"Column B\": 5.1})\nwrite_sheet.close()\n\nread_sheet = CompressedDictReader.open(\"my_numbers_sheet.csv.gz\", fieldtypes={\"Column A\": int, \"Column B\": float})\nnext(read_sheet) # {\"Column A\": 10, \"Column B\": 5.1})\n```\n\n## Context managers\n\nBoth `CompressedDictReader` and `CompressedDictWriter` can be used as context\nmanagers. This will ensure the file is closed properly.\n\n```\nwith CompressedDictWriter.open(\"my_sheet.csv.gz\") as sheet:\n    for row in data:\n        sheet.writerow(row)\n```\n\n# Contributing\n\nI'm open to contributions, and especially open to bug reports. Please open an\nissue for any bugs, and please include unit tests & docstrings for any pull requests.\n\nUse `pip -r development.txt` to install the testing dependencies. Run tests with\n`pytest`. If you've made a very significant change or you'd like to hear for computer\nfan, you can use `pytest --hypothesis-profile hammer` to generate 1000 testcases\nfor each test.\n\n# License\n\nCompressed Spreadsheets is distributed under the MIT license. See\nLICENSE.txt for the full terms of the license.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MaxBondABE/compressed_spreadsheets",
    "keywords": "compressed,csv",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "compressed-spreadsheets",
    "package_url": "https://pypi.org/project/compressed-spreadsheets/",
    "platform": "",
    "project_url": "https://pypi.org/project/compressed-spreadsheets/",
    "project_urls": {
      "Homepage": "https://github.com/MaxBondABE/compressed_spreadsheets"
    },
    "release_url": "https://pypi.org/project/compressed-spreadsheets/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5, <4",
    "summary": "Read & write to gzip compressed CSV files.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9085303,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fb870b7d17d397f5776eb9585a196678cf3716fcf4529c217e8ac7e37866a7d",
          "md5": "ce4b0ecc693455a1ff7e1295e4929b1d",
          "sha256": "313c78f5fdb2b16464f1b9e20760c5be581bc54fd033c8257dc66ff45a55f64d"
        },
        "downloads": -1,
        "filename": "compressed_spreadsheets-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce4b0ecc693455a1ff7e1295e4929b1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 4905,
        "upload_time": "2021-01-08T10:56:07",
        "upload_time_iso_8601": "2021-01-08T10:56:07.613928Z",
        "url": "https://files.pythonhosted.org/packages/7f/b8/70b7d17d397f5776eb9585a196678cf3716fcf4529c217e8ac7e37866a7d/compressed_spreadsheets-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f2e36043a2c937827b4bed5cce5f4cbceeebcd6e16f7f71b8a7b222d17afcd7",
          "md5": "382116c09578a76c2fb64f7e3f56ac6f",
          "sha256": "fa7352a0c04caa34bc17b0f32f9bc04ab3538bb5bce2acb9077acb04a7fe005d"
        },
        "downloads": -1,
        "filename": "compressed_spreadsheets-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "382116c09578a76c2fb64f7e3f56ac6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 4939,
        "upload_time": "2021-01-08T11:11:53",
        "upload_time_iso_8601": "2021-01-08T11:11:53.952424Z",
        "url": "https://files.pythonhosted.org/packages/4f/2e/36043a2c937827b4bed5cce5f4cbceeebcd6e16f7f71b8a7b222d17afcd7/compressed_spreadsheets-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f2e36043a2c937827b4bed5cce5f4cbceeebcd6e16f7f71b8a7b222d17afcd7",
        "md5": "382116c09578a76c2fb64f7e3f56ac6f",
        "sha256": "fa7352a0c04caa34bc17b0f32f9bc04ab3538bb5bce2acb9077acb04a7fe005d"
      },
      "downloads": -1,
      "filename": "compressed_spreadsheets-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "382116c09578a76c2fb64f7e3f56ac6f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5, <4",
      "size": 4939,
      "upload_time": "2021-01-08T11:11:53",
      "upload_time_iso_8601": "2021-01-08T11:11:53.952424Z",
      "url": "https://files.pythonhosted.org/packages/4f/2e/36043a2c937827b4bed5cce5f4cbceeebcd6e16f7f71b8a7b222d17afcd7/compressed_spreadsheets-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}