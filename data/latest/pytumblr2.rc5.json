{
  "info": {
    "author": "nostalgebraist",
    "author_email": "nostalgebraist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\nPyTumblr2\n=========\n|Build Status|\n\nA fork of `pytumblr <https://github.com/tumblr/pytumblr>`_, updated for the New Post Format era.\n\nQuick demo, if you're familiar with pytumblr:\n\n.. code:: python\n\n    client = pytumblr2.TumblrRestClient(*keys)\n\n    posts = client.posts('nostalgebraist')['posts']\n    # by default, post content is fetched in NPF\n    posts[0]['blocks']\n\n    # fetch single posts easily\n    post = client.get_single_post('nostalgebraist', 642337957436588032)\n\n    client.legacy_conversion_on()\n    post = client.get_single_post('nostalgebraist', 642337957436588032)\n    # post content was fetched in NPF, then converted to legacy HTML and populated to 'body'\n    post['body']\n\n    # returns ratelimit info, from the headers of the most recent API response\n    client.get_ratelimit_data()\n\n    # if you're nostalgic for 2015\n    client.npf_consumption_off()\n    post = client.get_single_post('nostalgebraist', 642337957436588032)\n    # post content was fetched in legacy\n    post['body']\n\n    # create post in NPF\n    response = client.create_post(\n        'your_blogname',\n        content=[{'type': 'text', 'text': \"I'm a bot using the beta editor!\"}]\n    )\n\n    # reblog the post you just made, in NPF\n    # no need for reblog keys / UUIDs\n    # the client will fetch them if needed (with caching)\n    client.reblog_post(\n        'your_blogname',  # reblogging TO\n        'your_blogname',  # rebloggin FROM\n        response[\"id\"],\n        content=[{'type': 'text', 'text': \"I'm reblogging myself\"}]\n    )\n\n    # fetch notifications (the items that appear on the activity page)\n    response = client.notifications('your_blogname')\n\nPlanned features that aren't implemented yet:\n        - helpers for pagination\n        - helpers for load balancing across clients\n\nInstallation\n============\n\nInstall via pip:\n\n.. code-block:: bash\n\n    $ pip install pytumblr2\n\nInstall from source:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/tumblr/pytumblr2.git\n    $ cd pytumblr2\n    $ python setup.py install\n\nUsage\n=====\n\nCreate a client\n---------------\n\nA ``pytumblr2.TumblrRestClient`` is the object you'll make all of your calls to the Tumblr API through. Creating one is this easy:\n\n.. code:: python\n\n    client = pytumblr2.TumblrRestClient(\n        '<consumer_key>',\n        '<consumer_secret>',\n        '<oauth_token>',\n        '<oauth_secret>',\n    )\n\n    client.info() # Grabs the current user information\n\nTwo easy ways to get your credentials to are:\n\n1. The built-in ``interactive_console.py`` tool (if you already have a consumer key & secret)\n2. The Tumblr API console at https://api.tumblr.com/console\n3. Get sample login code at https://api.tumblr.com/console/calls/user/info\n\nConsuming posts in NPF and legacy\n---------------------------------\n\nBy default, methods that fetch posts will fetch them in NPF.\n\nTo control this, use\n\n.. code:: python\n\n    # after client construction\n    client.npf_consumption_off()  # use legacy consumption, i.e. npf=false param in the API\n    client.npf_consumption_on()  # use NPF consumption, i.e. npf=true param in the API\n\n    # during client construction\n    client = pytumblr2.TumblrRestClient(..., consume_in_npf_by_default=False)  # legacy consumption\n    client = pytumblr2.TumblrRestClient(..., consume_in_npf_by_default=True)  # NPF consumption\n\nNote that NPF consumption is `strongly recommended by the developers of tumblr <https://github.com/tumblr/docs/blob/master/api.md#response-12>`_.\n\nUsing PyTumblr2's native NPF-to-HTML conversation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you prefer parsing HTML to parsing NPF, PyTumblr2 supports two ways of fetching posts in HTML/legacy format.\n\nFirst, you can turn NPF consumption off, as described above.  When you fetch a post that was created in NPF, this will use tumblr's internal NPF-to-legacy conversion to produce a legacy response.\n\nSecond, you can use PyTumblr2's own NPF-to-legacy converter.  To do this:\n\n.. code:: python\n\n    # after client construction\n    client.npf_consumption_on()\n    client.legacy_conversion_on()\n\n    # during client construction\n    client = pytumblr2.TumblrRestClient(..., consume_in_npf_by_default=True, convert_npf_to_legacy_html=True)\n\nA client in this state will return \"hybrid\" responses, containing fields from both NPF and legacy payloads:\n\n- The response will contain NPF fields like ``content``. These come directly from the tumblr API response.\n- The response will also contain legacy fields like ``body``. These were generated from the API response by PyTumblr2's converter.\n\nDifferences between PyTumblr2's converter and tumblr's:\n\n- It behaves better in some cases where tumblr's converter fails, generally involving blockquotes. `Example <https://github.com/tumblr/docs/issues/36>`_\n- It is not fully featured, and focused on text and image content. For example, it simply ignores videos.\n\nSupported Methods\n-----------------\n\nUser Methods\n~~~~~~~~~~~~\n\n.. code:: python\n\n    client.info() # get information about the authenticating user\n    client.dashboard() # get the dashboard for the authenticating user\n    client.likes() # get the likes for the authenticating user\n    client.following() # get the blogs followed by the authenticating user\n\n    client.follow('codingjester.tumblr.com') # follow a blog\n    client.unfollow('codingjester.tumblr.com') # unfollow a blog\n\n    client.like(id, reblogkey) # like a post\n    client.unlike(id, reblogkey) # unlike a post\n\nBlog Methods\n~~~~~~~~~~~~\n\n.. code:: python\n\n    client.blog_info(blogName) # get information about a blog\n    client.posts(blogName, **params) # get posts for a blog\n    client.get_single_post(blogName, id , **params) # get a single post\n    client.avatar(blogName) # get the avatar for a blog\n    client.blog_likes(blogName) # get the likes on a blog\n    client.followers(blogName) # get the followers of a blog\n    client.blog_following(blogName) # get the publicly exposed blogs that [blogName] follows\n    client.queue(blogName) # get the queue for a given blog\n    client.submission(blogName) # get the submissions for a given blog\n\nPost creation and editing\n-----------------------------\n\nGeneral note on using these methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPost creation and editing methods take a variety of keyword arguments.  Outside of a few special cases, these arguments are passed on directly to the tumblr API as key-value pairs in the json payload.\n\nFor example, the API spec `says <https://github.com/tumblr/docs/blob/master/api.md#request-parameters-24>`_  says ``content`` is a required field when creating an NPF post.  In PyTumblr2, you'll provide the value of this field by passing an argument ``content=[...]`` to the method ``create_post``.\n\nFor guidance on constructing these requests, you should consult\n\n- `The tumblr API spec <https://github.com/tumblr/docs/blob/master/api.md>`_\n    - for the names and meanings of the JSON fields that the API accepts in each type of request (e.g. \"create NPF post,\" \"edit legacy post\")\n\n- `The NPF spec <https://github.com/tumblr/docs/blob/master/npf-spec.md>`_\n    - for information about how to compose posts in NPF using the ``content`` and (optionally) ``layout`` JSON fields\n\n\nCreating posts\n~~~~~~~~~~~~~~\n\nCreate posts in NPF with ``create_post``:\n\n.. code:: python\n\n    client.create_post(blogName, content=[{'type': 'text', 'text': \"my post\"}])\n\nTo create an NPF post containing media, pass an additional argument ``media_sources``.  The value should be a dict mapping each identifiers from the post's media blocks to a file path or file object.\n\n.. code:: python\n\n    client.create_post(\n        blogName,\n        content=[\n            {\"type\": \"text\", 'text': \"cool picture\"},\n            {\"type\": \"image\", \"media\": [{\"type\": \"image/jpeg\", \"identifier\": \"my_media_identifier\"}]}},\n        ],\n        media_sources={\"my_media_identifier\": \"/Users/johnb/path/to/my/image.jpg\"}\n    )\n\nIf you want to create a legacy post, use one of the methods with a ``legacy_create_`` prefix.  For example:\n\n.. code:: python\n\n    #Creating a text post\n    client.legacy_create_text(blogName, state=\"published\", slug=\"testing-text-posts\", title=\"Testing\", body=\"testing1 2 3 4\")\n\n    #Creates a photo post using a source URL\n    client.legacy_create_photo(blogName, state=\"published\", tags=[\"testing\", \"ok\"],\n                               source=\"https://68.media.tumblr.com/b965fbb2e501610a29d80ffb6fb3e1ad/tumblr_n55vdeTse11rn1906o1_500.jpg\")\n\n    #Creates a photo post using a local filepath\n    client.legacy_create_photo(blogName, state=\"queue\", tags=[\"testing\", \"ok\"],\n                               tweet=\"Woah this is an incredible sweet post [URL]\",\n                               data=\"/Users/johnb/path/to/my/image.jpg\")\n\n    #Creates a photoset post using several local filepaths\n    client.legacy_create_photo(blogName, state=\"draft\", tags=[\"jb is cool\"], format=\"markdown\",\n                               data=[\"/Users/johnb/path/to/my/image.jpg\", \"/Users/johnb/Pictures/kittens.jpg\"],\n                               caption=\"## Mega sweet kittens\")\n\nEditing a post\n~~~~~~~~~~~~~~\n\nEdit in NPF:\n\n.. code:: python\n\n    client.edit_post(blogName, post_id, content=[{'type': 'text', 'text': \"edited\"}])\n\nEdit in legacy:\n\n.. code:: python\n\n    client.legacy_edit_post(blogName, id=post_id, type=\"photo\", data=\"/Users/johnb/mega/awesome.jpg\")\n\nReblogging a Post\n~~~~~~~~~~~~~~~~~\n\nReblog in NPF, using your blog name, the target blog name, and the target post ID:\n\n.. code:: python\n\n    client.reblog_post(blogName, 'blog_to_reblog_from', 125356)\n\nReblogging a post requires a reblog key and (in NPF) a blog UUID.  These can only be obtained via a GET request on the post.\n\nUnder the hood, the client will send this GET request if it doesn't have the key and UUID.  These values are cached, so this will only happen once per client object and post.\n\nReblog in legacy:\n\n.. code:: python\n\n    client.legacy_reblog(blogName, id=125356, reblog_key=\"reblog_key\")\n\nOther methods\n-----------------\n\nDeleting a post\n~~~~~~~~~~~~~~~\n\nDeleting just requires that you own the post and have the post id\n\n.. code:: python\n\n    client.delete_post(blogName, 123456) # Deletes your post :(\n\nA note on tags: When passing tags, as params, please pass them as a list (not a comma-separated string):\n\n.. code:: python\n\n    client.create_text(blogName, tags=['hello', 'world'], ...)\n\nGetting notes for a post\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to get the notes for a post, you need to have the post id and the blog that it is on.\n\n.. code:: python\n\n    data = client.notes(blogName, id='123456')\n\nThe results include a timestamp you can use to make future calls.\n\n.. code:: python\n\n    data = client.notes(blogName, id='123456', before_timestamp=data[\"_links\"][\"next\"][\"query_params\"][\"before_timestamp\"])\n\nGetting notifications\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nNotifications are the items that appear on a user's activity page.  You can fetch them like this:\n\n.. code:: python\n\n    data = client.notifications(blogName)\n\nThe results include a timestamp you can use to make future calls.\n\n.. code:: python\n\n    data = client.notifications(blogName, before=data[\"_links\"][\"next\"][\"query_params\"][\"before\"])\n\nTagged Methods\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # get posts with a given tag\n    client.tagged(tag, **params)\n\nUsing the interactive console\n-----------------------------\n\nThis client comes with a nice interactive console to run you through the OAuth process, grab your tokens (and store them for future use).\n\nYou'll need ``pyyaml`` installed to run it, but then it's just:\n\n.. code:: bash\n\n    $ python interactive-console.py\n\nand away you go! Tokens are stored in ``~/.tumblr`` and are also shared by other Tumblr API clients like the Ruby client.\n\nRunning tests\n-------------\n\nThe tests (and coverage reports) are run with nose, like this:\n\n.. code:: bash\n\n    python setup.py test\n\nCopyright and license\n=====================\n\nCopyright 2021 nostalgebraist\n\nCopyright 2013 Tumblr, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this work except in compliance with the License. You may obtain a copy of the License in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nThe Initial Developer of some parts of the framework, which are copied from, derived from, or\ninspired by Pytumblr (via Apache Flex), is Tumblr, Inc. (https://www.tumblr.com/).\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations.\n\n.. |Build Status| image:: https://app.travis-ci.com/nostalgebraist/pytumblr2.png?branch=master\n   :target: https://app.travis-ci.com/nostalgebraist/pytumblr2\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nostalgebraist/pytumblr",
    "keywords": "pytumblr,pytumblr2,tumblr",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyTumblr2",
    "package_url": "https://pypi.org/project/PyTumblr2/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyTumblr2/",
    "project_urls": {
      "Homepage": "https://github.com/nostalgebraist/pytumblr"
    },
    "release_url": "https://pypi.org/project/PyTumblr2/0.2.2/",
    "requires_dist": [
      "future",
      "requests-oauthlib"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python API v2 wrapper for Tumblr, updated for NPF compliance (and beyond!)",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14674989,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6363333e4671451b2b58c1cdaac09e710a7142fc78413b507db0f3ed8a6013d",
          "md5": "e1dafbf2974aeff2e8a76f15a7c13d68",
          "sha256": "21a310a087c2520f8d1ab2ed999f24b621eba8b63cd9bf9af18174480ac57442"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1dafbf2974aeff2e8a76f15a7c13d68",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23086,
        "upload_time": "2021-09-19T19:38:30",
        "upload_time_iso_8601": "2021-09-19T19:38:30.996625Z",
        "url": "https://files.pythonhosted.org/packages/c6/36/3333e4671451b2b58c1cdaac09e710a7142fc78413b507db0f3ed8a6013d/PyTumblr2-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6365eaf10b73d6cb9f73b51e53c7fa277c779e0543c6669c40490bfd164922b8",
          "md5": "4b3fb3c1a06f3413a34f3007451291c9",
          "sha256": "f35ac6cec1d08512f58acedb54297539182ae966f0b244c6db3d3529bf2808e5"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b3fb3c1a06f3413a34f3007451291c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21425,
        "upload_time": "2021-09-19T19:38:33",
        "upload_time_iso_8601": "2021-09-19T19:38:33.014813Z",
        "url": "https://files.pythonhosted.org/packages/63/65/eaf10b73d6cb9f73b51e53c7fa277c779e0543c6669c40490bfd164922b8/PyTumblr2-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16cbf78152bb34f5362035d3f66cd33624e288c90306f99aa939a3f859c09975",
          "md5": "02ae2897ccfc45ad200d06eb3e697c23",
          "sha256": "ede8a3cf8d01744e9970c53a5540fb3e1ae18a3783cd005c8351784676b898fa"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02ae2897ccfc45ad200d06eb3e697c23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 24127,
        "upload_time": "2022-01-30T22:21:46",
        "upload_time_iso_8601": "2022-01-30T22:21:46.791296Z",
        "url": "https://files.pythonhosted.org/packages/16/cb/f78152bb34f5362035d3f66cd33624e288c90306f99aa939a3f859c09975/PyTumblr2-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9db6bc03f6ccd96c742ad80d5c0d29f050c5f6e039ed48e6c9dce45e5feae3d",
          "md5": "f61d9c763a5c9704ffefc50254f37187",
          "sha256": "6ee746f693db71e75eaab360350bd4cd1f24e837cccb045d25d3ea163adfdebc"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f61d9c763a5c9704ffefc50254f37187",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22941,
        "upload_time": "2022-01-30T22:21:48",
        "upload_time_iso_8601": "2022-01-30T22:21:48.652012Z",
        "url": "https://files.pythonhosted.org/packages/d9/db/6bc03f6ccd96c742ad80d5c0d29f050c5f6e039ed48e6c9dce45e5feae3d/PyTumblr2-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7638f047dbe92643e52bc67871ce38596e1fac87d4872a34db82ba27684922ba",
          "md5": "10af20086665f8cec3e81fa4a5ec7fcb",
          "sha256": "619cf943e2b840540fb3e9326eb37566640eea7c401d022c9306776d090a0a01"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10af20086665f8cec3e81fa4a5ec7fcb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 24335,
        "upload_time": "2022-01-30T22:35:42",
        "upload_time_iso_8601": "2022-01-30T22:35:42.184036Z",
        "url": "https://files.pythonhosted.org/packages/76/38/f047dbe92643e52bc67871ce38596e1fac87d4872a34db82ba27684922ba/PyTumblr2-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e73de9e63f1ba4f6371ecbaf5f061247aadab525f77e470256a660d7b37a9b99",
          "md5": "99f28070eb844cdef6cbf43b9dac20f4",
          "sha256": "2d28fab69a15e63b1d79a5ea476928ac717fcf8642222b64a78e47cd56f9441a"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99f28070eb844cdef6cbf43b9dac20f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23231,
        "upload_time": "2022-01-30T22:35:44",
        "upload_time_iso_8601": "2022-01-30T22:35:44.162498Z",
        "url": "https://files.pythonhosted.org/packages/e7/3d/e9e63f1ba4f6371ecbaf5f061247aadab525f77e470256a660d7b37a9b99/PyTumblr2-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30864c79f19bede48a1f66a553f02d3f3e1c079c83d600c17f51c29acd94f784",
          "md5": "db4328a767916bd757086e010d5778c5",
          "sha256": "18a749a03bb0fd4b50df5e087cf0c38c41bf1d80fd96d18a0b3aff7a8c29c3ed"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db4328a767916bd757086e010d5778c5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 24335,
        "upload_time": "2022-01-31T03:00:03",
        "upload_time_iso_8601": "2022-01-31T03:00:03.168832Z",
        "url": "https://files.pythonhosted.org/packages/30/86/4c79f19bede48a1f66a553f02d3f3e1c079c83d600c17f51c29acd94f784/PyTumblr2-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc45c7cc013c6df79ee7607bf791e93691b13b04fbfb40ac2c844344ddba3ea9",
          "md5": "5af126a17489565bb85056b041a7b712",
          "sha256": "f2f38d64e0c34d98973dd39e8513cd6bad3ee7d73339b5f629e64d0854622a0f"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5af126a17489565bb85056b041a7b712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23236,
        "upload_time": "2022-01-31T03:00:05",
        "upload_time_iso_8601": "2022-01-31T03:00:05.113492Z",
        "url": "https://files.pythonhosted.org/packages/fc/45/c7cc013c6df79ee7607bf791e93691b13b04fbfb40ac2c844344ddba3ea9/PyTumblr2-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d65c9605806da29e29b354a30161b44cc4b091ad1bf12e5d49ccf03f85082e8",
          "md5": "6075db1d466ac74dbeec6bf074cdb81e",
          "sha256": "5bdfdb116ce012427063b7069bb66897c5c28e65b2c45ffac9f7f306a1359c30"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6075db1d466ac74dbeec6bf074cdb81e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 24346,
        "upload_time": "2022-08-06T15:33:04",
        "upload_time_iso_8601": "2022-08-06T15:33:04.112081Z",
        "url": "https://files.pythonhosted.org/packages/9d/65/c9605806da29e29b354a30161b44cc4b091ad1bf12e5d49ccf03f85082e8/PyTumblr2-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2efced01ef59eb614113f634e145b2cc85dc210ef0f51c964a4984804cca2d78",
          "md5": "dd2c10928c189d3677a0e7d3c1ad3687",
          "sha256": "6e429eee6c6db43aaa910c1afdcfda6dd59b53d7d0aae54cf6dcab59c426f476"
        },
        "downloads": -1,
        "filename": "PyTumblr2-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dd2c10928c189d3677a0e7d3c1ad3687",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23092,
        "upload_time": "2022-08-06T15:33:06",
        "upload_time_iso_8601": "2022-08-06T15:33:06.343664Z",
        "url": "https://files.pythonhosted.org/packages/2e/fc/ed01ef59eb614113f634e145b2cc85dc210ef0f51c964a4984804cca2d78/PyTumblr2-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d65c9605806da29e29b354a30161b44cc4b091ad1bf12e5d49ccf03f85082e8",
        "md5": "6075db1d466ac74dbeec6bf074cdb81e",
        "sha256": "5bdfdb116ce012427063b7069bb66897c5c28e65b2c45ffac9f7f306a1359c30"
      },
      "downloads": -1,
      "filename": "PyTumblr2-0.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6075db1d466ac74dbeec6bf074cdb81e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 24346,
      "upload_time": "2022-08-06T15:33:04",
      "upload_time_iso_8601": "2022-08-06T15:33:04.112081Z",
      "url": "https://files.pythonhosted.org/packages/9d/65/c9605806da29e29b354a30161b44cc4b091ad1bf12e5d49ccf03f85082e8/PyTumblr2-0.2.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2efced01ef59eb614113f634e145b2cc85dc210ef0f51c964a4984804cca2d78",
        "md5": "dd2c10928c189d3677a0e7d3c1ad3687",
        "sha256": "6e429eee6c6db43aaa910c1afdcfda6dd59b53d7d0aae54cf6dcab59c426f476"
      },
      "downloads": -1,
      "filename": "PyTumblr2-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dd2c10928c189d3677a0e7d3c1ad3687",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23092,
      "upload_time": "2022-08-06T15:33:06",
      "upload_time_iso_8601": "2022-08-06T15:33:06.343664Z",
      "url": "https://files.pythonhosted.org/packages/2e/fc/ed01ef59eb614113f634e145b2cc85dc210ef0f51c964a4984804cca2d78/PyTumblr2-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}