{
  "info": {
    "author": "caterina",
    "author_email": "dalgona91@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "## WavveParser\n\n-----\n\nWavve Popular Episode crawling.\n\n----\n### 1. Data Crawling Info\n\n    #### 3 genres\n\n        1) All genre\n        2) Drama\n        3) Entertainment\n\n    #### 10 page by genre (1 page : 20 / Total 100)\n\n    #### columns \n       - rank : rank by genre\n       - title : program title\n       - broadcast \n       - episode \n       - date : broadcast day\n       - genre : all, Drama, Entertainment\n       - category : Ground Broadcast, General Channel, cableTV\n       - Datetime : crawling date\n----\n\n### 2. Package File\n\n    import pandas as pd\n    import numpy as np\n    import requests\n    import json\n\n----\n\n### 3. Installation\n\n\"\"\"python\n\n    pip install WavveParser\n\n\"\"\"\n\n-------\n### 4. Wavve_parser\n\n\"\"\"python\n\n    import pandas as pd\n    import numpy as np\n    import requests\n    import json\n\n    class WavveParser:\n\n        def __init__(self, datetime, apikey):\n            self.apikey = apikey\n            contents_id = self.getPopularId()\n            self.contents_id_dfs = pd.concat(contents_id, ignore_index=True)\n            self.contents_info = self.getDetailInfo()\n            category_df, categories = self.ParseDetailInfo()\n            category_df['category'] = np.where(category_df['broadcast'].isin(\n                categories['지상파']), '지상파', np.where(category_df['broadcast'].isin(categories['종편']), '종편', '케이블'))\n            category_df['rank'] = category_df.reset_index()[\"index\"]+1\n            category_df['DateTime'] = datetime\n            self.category_df = category_df.reindex(columns = ['rank','title','broadcast','episode', 'date', 'genre', 'category','DateTime'])\n\n\n        def getPopularId(self):\n\n            popular_urls = []\n            contents_id = []\n\n            genres = {\n\n                'all': '전체',\n                '01': \"드라마\",\n                '02': \"예능\",\n\n            }\n\n            for genre in genres:\n                for page in range(1, 6):\n                    offset = (page-1) * 20\n                    item_url = f'https://apis.pooq.co.kr/cf/vod/popularcontents?WeekDay=all&broadcastid=6339&came=broadcast&contenttype=vod&genre={genre}&limit=20&offset={offset}&orderby=viewtime&page={page}&uiparent=GN2-VN2&uirank=2&uitype=VN2&apikey={self.apikey}&credential=none&device=pc&drm=wm&partner=pooq&pooqzone=none&region=kor&targetage=auto'\n                    popular_urls.append(item_url)\n\n            for popular_url in popular_urls:\n                req = requests.get(popular_url)\n                data = json.loads(req.text)\n                item_ids = [item['event_list'][0]['bodylist'][3].split(\n                    ':')[1] for item in data['cell_toplist']['celllist']]\n                contents_id.append(pd.DataFrame({'id': item_ids}))\n\n            return contents_id\n\n        def getDetailInfo(self):\n\n            detail_info = []\n\n            for content_id in self.contents_id_dfs['id']:\n                detail_url = f'https://apis.pooq.co.kr/vod/contents/{content_id}?device=pc&partner=pooq&pooqzone=none&region=kor&drm=wm&targetage=auto&apikey={self.apikey}&credential=gnay3eDqvjaYTaFwZFAJ57u0nvz33CA2FoHsr5NsY8OCv2wWeu3ZRgaY9Ci2CjRlAd03D4A%2BIdixX2iwjy6jRFjRGc9qw%2BSkVjGFCJxuSRe86SSYVVK953HfiFKuKb6A3nNVJoHyY6gvgpSgRpyNNeZOzMNkqmc2RcGu%2FWrnAXFDATjT2IpHfym9Ng6rPXCbvkd9q3Y%2FsfQrOSB%2BLRTp4IL6AnvszoJi8ccV9AJhR37vOmwOwiV76z7QJexM054Dhp04KJCHm8HmpZANhV1iOw%3D%3D'\n                req = requests.get(detail_url)\n                data = json.loads(req.text)\n                detail_info.append(data)\n\n            return detail_info\n\n        def ParseDetailInfo(self):\n\n            wavve_list = []\n\n            categories = {\n\n                '지상파': ['MBC', 'SBS', 'KBS 2TV', 'KBS 1TV', 'KBS'],\n                '종편': ['MBN', '채널A', 'TV조선', 'TV CHOSUN'],\n                '케이블': ['MBC Every1', 'KBS JOY', 'OCN', 'YTN', '연합뉴스TV', 'KTH PLAYY', 'SBS Fil']\n            }\n\n            for content_info in self.contents_info:\n\n                wavve_list.append({\n                    'title': content_info['programtitle'],\n                    'broadcast': content_info['channelname'],\n                    'episode': content_info['episodenumber'],\n                    'date': content_info['releasedate']+\"(\"+content_info['releaseweekday']+\")\",\n                    'genre': content_info['genretext'],\n\n                })\n\n            return pd.DataFrame(wavve_list), categories\n\n\"\"\"\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/CATERINA-SEUL/WavveParser/archive/WavveParser-0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CATERINA-SEUL/WavveParser",
    "keywords": "wavve",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "WavveParser",
    "package_url": "https://pypi.org/project/WavveParser/",
    "platform": "",
    "project_url": "https://pypi.org/project/WavveParser/",
    "project_urls": {
      "Download": "https://github.com/CATERINA-SEUL/WavveParser/archive/WavveParser-0.1.tar.gz",
      "Homepage": "https://github.com/CATERINA-SEUL/WavveParser"
    },
    "release_url": "https://pypi.org/project/WavveParser/0.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "wavve parser",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7117379,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd59f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596",
          "md5": "e946236c247c4df553328c62c3a41924",
          "sha256": "db3343c619bdf58c9ed1f8c3ae1b7bcc1a8f3d4000f9026f5105f644f7458da8"
        },
        "downloads": -1,
        "filename": "WavveParser-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e946236c247c4df553328c62c3a41924",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4617,
        "upload_time": "2020-04-28T05:32:00",
        "upload_time_iso_8601": "2020-04-28T05:32:00.814509Z",
        "url": "https://files.pythonhosted.org/packages/cd/59/f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596/WavveParser-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd59f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596",
        "md5": "e946236c247c4df553328c62c3a41924",
        "sha256": "db3343c619bdf58c9ed1f8c3ae1b7bcc1a8f3d4000f9026f5105f644f7458da8"
      },
      "downloads": -1,
      "filename": "WavveParser-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e946236c247c4df553328c62c3a41924",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 4617,
      "upload_time": "2020-04-28T05:32:00",
      "upload_time_iso_8601": "2020-04-28T05:32:00.814509Z",
      "url": "https://files.pythonhosted.org/packages/cd/59/f6047f7e2fb9bc7ccb3c0b98c80cfb36ba7eaf9086e128a0644c15801596/WavveParser-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}