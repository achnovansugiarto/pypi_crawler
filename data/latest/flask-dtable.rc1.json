{
  "info": {
    "author": "Florian Lämmlein",
    "author_email": "florian.leammlein@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "![flask_dtable](flask_dtable.png)\n# flask_dtable a Full-Featured Table System made with Python by Florian L&auml;mmlein\n#### A simple framework for building HTML Tables for Flask.\n&nbsp;\n&nbsp;\n***\n## flask_dtable Features\n- HTML forms\n- Column Editor\n- Column replace\n- Includes Datatables\n- Custom column filters\n- Live feedback handler\n- Custom column popups\n&nbsp;\n&nbsp;\n***\n## How to Install\npip install flask_dtable\n&nbsp;\n&nbsp;\n***\n## flask_dtable Parameters\n| <strong >Param</strong> | <strong >Description</strong> | <strong >Dict Params</strong> | <strong >Dict Description</strong> | <strong >Type</strong> | <strong >Default Value</strong> |\n| --- | --- | --- | --- | --- | --- |\n| data | Table content as an list of str | | | list | `[[]]` |\n| &nbsp; | | | | | |\n| section | Datareplacements by an position index | active | Status of the current function | bool | `False` |\n| | | position | Replacement position as int (by data index) | â€‹list, (int, str (`'_sec'`)) | `[]` |\n| | | value | Replacement value as (str or current data value) | list, (list, str (`'_var'`)) | `[[]]` |\n| | | check | Data replacement check as function (by data index) | list | `[[]]` |\n| &nbsp; | | | | | |\n| header | Table Header names as an list of str | value | Table header Names as str | list | `[]` |\n| | | class | Table header class | str | `None` |\n| | | id | Table header id | str | `None` |\n| &nbsp; | | | | | |\n| footer | Table Footer names as an list of str | active | Status of the current function | bool | `False` |\n| | | value | Table footer Names as str | list | `[]` |\n| | | class | Table footer class | str | `None` |\n| | | id | Table footer id | str | `None` |\n| | | calculate | Table calculate function by index from column | list, int | `[]` |\n| | | decimal_places | Table calculate precision numbers | int | `2` |\n| &nbsp; | | | | | |\n| form | Data Column Editor | active | Status of the current function | bool | `False` |\n| | | position | Form position as int (by data index) | â€‹list, (int, str (`'_sec'`)) | `[]` |\n| | | action | From action | â€‹str, list (`'_tab'`, int) | `None` |\n| | | class | From class | str | `None` |\n| | | tooltip_text | From submit button tooltip text as str | â€‹list, str | `[]` |\n| | | button_color | From submit button color as str | â€‹list, str | `[]` |\n| | | icon | From submit button icon as str | â€‹list, str | `[]` |\n| | | [request_out](#Special-Parameters) | Form fields outside the form as list, str | `dict` | `{}` |\n| | | [request_in](#Special-Parameters) | Form fields inside the form as list, str | â€‹`dict` | `{}` |\n| &nbsp; | | | | | |\n| script | Datatables script tag | active | Status of the current function | bool | `False` |\n| | | responsive | Status of the responsive function | â€‹â€‹bool | `False` |\n| | | fixed | Set fixed columns (by data index) | int | `None` |\n| | | order | Column orders ([`1`, `'asc'`], [`1`, `'desc'`]) | â€‹list, (int, str (`'asc'`, `'desc'`)) | `[]` |\n| | | length_menu | Enable/Disable the length menu | bool | `True` |\n| | | [buttons](#Special-Parameters) | Table buttons as dicts | `list` | `[]` |\n| | | [child_rows](#Special-Parameters) | Child rows as dicts | `list` | `[]` |\n| | | [live_feed](#Special-Parameters) | Live feedback as dicts | `dict` | `{}` |\n| &nbsp; | | | | | |\n| editor | Tableeditor script tag | active | Status of the current function | bool | `False` |\n| | | action | HTML form action | str | `None` |\n| | | label | Editor Modal display Name | str | `None` |\n| | | size | Editor Modal display size (`'small'`, `'large'`) | str | `small` |\n| | | [fields](#Special-Parameters) | Editor fields as dicts | `list` | `[]` |\n| | | [order](#Special-Parameters) | Editor div order as lists | `list` | `[]` |\n| | | [chars](#Special-Parameters) | Editor field value chars replace as functions | `dict` | `{}` |\n| &nbsp; | | | | | |\n| popup | New window popup on `tr` click | active | Status of the current function | bool | `False` |\n| | | url | Window main url | str | `None` |\n| | | width | Popup window width | int | `1600` |\n| | | height | Popup window height | int | `1000` |\n| | | params | Window url parameters set name as str and value (by data index) | list, list (str, int) | `[[]]` |\n&nbsp;\n&nbsp;\n***\n## flask_dtable Special Parameters\n| <strong >Main Param</strong> | <strong >Param</strong> | <strong >Dict Param</strong> | <strong >Description</strong> | <strong >Type</strong> | <strong >Default Value</strong> |\n| --- | --- | --- | --- | --- | --- |\n| â€‹form | request_out | request_name | Datafield name | list, str | `[]` |\n| | | request_id | Datafield id | â€‹list, str | `[]` |\n| | | rquest_value | Datafield value (by data index or (`'_sec'`)) | â€‹list, str | `[]` |\n| | | value | Datafield replacement value if `'_sec'` is set | â€‹list, list, str | `[[]]` |\n| | | check | Datafield replacement check as function (by data index) | â€‹list, list, str | `[[]]` |\n| | request_out | request_name | Datafield name | list, str | `[]` |\n| | | request_id | Datafield id | â€‹list, str | `[]` |\n| | | rquest_value | Datafield value (by data index or (`'_sec'`)) | â€‹list, str | `[]` |\n| | | value | Datafield replacement value if `'_sec'` is set | â€‹list, list, str | `[[]]` |\n| | | check | Datafield replacement check as function (by data index) | â€‹list, list, str | `[[]]` |\n| &nbsp; | | | | | |\n| script | buttons | button_name | Holds the display name from the buttons |  str | `Actions` |\n| | | export | Export buttons (`'pdf'`, `'excel'`, `'csv'`) | â€‹list, str | `[]` |\n| | | hidde | Set the hidde button | â€‹bool | `False` |\n| | | nohidde | DonÂ´t hidde this columns (by column index) | list, int | `[]` |\n| | | filter | Set the filter button (by column index) | list, int | `[]` |\n| | | [custom_filter](#Special-Parameters) | Set custom filters as dicts | list, dict | `[]` |\n| | | [data_filter](#Special-Parameters) | Set data filters (creates url get parameters) as dicts | list, dict | `[]` |\n| | custom_filter | name | Display name from filter | str | `None` |\n| | | labels | Display values from filter row | list, str | `[]` |\n| | | values | Check the values (by the data section as str) | list, str | `[]` |\n| | data_filter | name | Display name from filter | str | `None` |\n| | | labels | Display values from filter row | list, str | `[]` |\n| | | values | Check the values (by the data section as str) | list, str | `[]` |\n| | child_rows | label | Display name from child row | str | `None` |\n| | | column | Display value from child row (by data index) | int | `None` |\n| | live_feed | label | Display name from live feedback | str | `None` |\n| | | column | Fallback value from child row (by data index) | int | `0` |\n| | | [update](#Special-Parameters) | Set data filters (creates ajax post parameters) | dict | `{}` |\n| | | [handler](#Special-Parameters) | Set data filters live handler (creates ajax post) as dicts | dict | `{}` |\n| | update | url | Ajax url to an blueprint | str | `None` |\n| | | value | Ajax post values (by data index) | str | `None` |\n| | handler | type | Ajax update input type | str | `None` |\n| | | post | Ajax update post id, name | str | `None` |\n| | | column | Ajax update column (by data index) | str | `None` |\n| &nbsp; | | | | | |\n| editor | fields | label | Display form field name | str | `None` |\n| | | column | Display form field value (by column index) | int | `0` |\n| | | check | Field value to check only if type is radio | int | `1` |\n| | | class | Display form field class | â€‹str | `None` |\n| | | name | Display form field name | str | `None` |\n| | | id | Display form field id | str | `None` |\n| | | type | Display form field type | str | `None` |\n| | | required | Field required check | â€‹bool | `False` |\n| | | disabled | Field disabled check | â€‹bool | `False` |\n| | | hidden | Field hidden check | â€‹bool | `False` |\n| | order | index | div order index (How many fields in one div are shown) | int | `2` |\n| | | index_lower | div order index (if index is to short index_lower is active) | int | `2` |\n| | | class | div order classes | str | `col-md-12 col-lg-6` |\n| | | class_lower | div order classes (if index_lower is active class_lower is set) | str | `col-md-12 col-lg-12` |\n| | chars | | Field replace tags (special characters) as functions | | `{`<br>&nbsp;`ord('Ã¤'):'ae',`<br>&nbsp;`ord('Ã¼'):'ue',`<br>&nbsp;`ord('Ã¶'):'oe'`<br>`}` |\n&nbsp;\n&nbsp;\n***\n## flask_dtable Examples\n<strong >Basic usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    }\n)\n```\n<strong >Datatables usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    script = {\n        \"active\": True\n    }\n)\n```\n<strong >Datareplacement usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    section = {\n        \"active\": True,\n        \"position\": [0, \"_sec\"],\n        \"value\": [\n            ['Kein Geburtstag', ['_var', 1]]\n        ],\n        \"check\": [\n            ['data[1] == \"02.11.2001\"']\n        ]\n    },\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    script = {\n        \"active\": True\n    }\n)\n```\n<strong >Data editor usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    script = {\n        \"active\": True\n    },\n    editor = {\n        \"active\": True,\n        \"fields\": [\n            {\n                \"label\": \"Name\", \n                \"column\": 0, \n                \"disabled\": True\n            },\n            {\n                \"label\": \"Geburtstag\", \n                \"column\": 1, \n                \"required\": True\n            }\n        ]\n    }\n)\n```\n<strong >Child rows usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"child_rows\": [\n            {\n                \"label\": \"Zusatz\",\n                \"column\": 2\n            }\n        ]\n    }\n)\n```\n<strong >Datatable order usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Zusatz\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"order\": [\n            [0, 'asc'],\n            [1, 'asc']\n        ]\n    }\n)\n```\n<strong >Datatable button usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Zusatz\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"buttons\": {\n            \"export\": ['pdf', 'excel']\n        }\n    }\n)\n```\n<strong >Datatable filter button usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Zusatz\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"buttons\": {\n            \"filter\": [0,2]\n        }\n    }\n)\n```\n<strong >Datatable filter button with custom filter usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Zusatz\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"buttons\": {\n            \"custom_filter\": [\n                {\n                    \"name\": \"Geburtstag\",\n                    \"labels\": [\"November\"],\n                    \"values\": [\"data[1].split('.')[1] == '11'\"]\n                }\n            ]\n        }\n    }\n)\n```\n<strong >Datatable filter button with data filter usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000', 'Hallo Welt 1'],\n        ['Peter', '02.11.2001', 'Hallo Welt 2']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Zusatz\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"buttons\": {\n            \"data_filter\": [\n                {\n                    \"name\": \"Geburtstag\",\n                    \"labels\": [\"November\", \"Dezember\"],\n                    \"values\": [\"11\", \"12\"]\n                }\n            ]\n        }\n    }\n)\n```\n<strong >Form basic usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Action:\"\n        ]\n    },\n    form = {\n        \"active\": True,\n        \"action\": \"/submit_page\",\n        \"position\": 2,\n        \"request_in\": {\n            \"request_name\": \"name\",\n            \"request_value\": 0\n        }\n    },\n    script = {\n        \"active\": True\n    }\n)\n```\n<strong >Form data replacement usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\",\n            \"Action:\"\n        ]\n    },\n    form = {\n        \"active\": True,\n        \"action\": \"/submit_page\",\n        \"position\": 2,\n        \"request_in\": {\n            \"request_name\": [\"name\", \"birthday\"],\n            \"request_value\": [0, \"_sec\"]\n        },\n        \"value\": [\n            [\"Kein Geburtstag\", [\"_var\", 1]]\n        ],\n        \"check\": [\n            [\"data[1] == '02.11.2001'\"]\n        ]\n    },\n    script = {\n        \"active\": True\n    }\n)\n```\n<strong >Live feedback usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    script = {\n        \"active\": True,\n        \"live_feed\": {\n            \"label\": \"Mein Geburtstag\",\n            \"column\": 1,\n            \"update\": {\n                \"url\": \"preview\",\n                \"value\": [\n                    {\"post\": \"birthday\", \"column\": 1}\n                ]\n            }\n        }\n    }\n)\n```\n<strong >Popup usage:</strong>\n```python\nflask_dtable(\n    data = [\n        ['Niklas', '13.09.2000'],\n        ['Peter', '02.11.2001']\n    ],\n    header = {\n        \"value\": [\n            \"Name\",\n            \"Geburtstag\"\n        ]\n    },\n    popup = {\n        \"active\": True,\n        \"url\": \"/edit\",\n        \"params\": [\n            [\"birthday\", 1]\n        ]\n    }\n)\n```\n&nbsp;\n&nbsp;\n***\n## Legacy versions\nThis version of the flask_dtable are the acctual stable version which is compatible with Python 3+ and is supported for feature updates.\n\n## Do you have any Ideas, Changes or Bugs ?\nPlease let me know in the Comments, i will try to fix or add waht you found/want :D",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Flory-1/flask_dtable/archive/v_100.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Flory-1/flask_dtable",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-dtable",
    "package_url": "https://pypi.org/project/flask-dtable/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-dtable/",
    "project_urls": {
      "Download": "https://github.com/Flory-1/flask_dtable/archive/v_100.tar.gz",
      "Homepage": "https://github.com/Flory-1/flask_dtable"
    },
    "release_url": "https://pypi.org/project/flask-dtable/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple framework for building HTML Tables for Flask",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8404730,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55b2b7ee566072b88b892bb18b12b2b9ab2211fdf1e8cbaf98066adde088989c",
          "md5": "2c32b2ff548ebfe1801ffdaef26cf74c",
          "sha256": "98368a23fde592df2d50762589246ede83e49de7c54e222adf8a17243bddc2c7"
        },
        "downloads": -1,
        "filename": "flask_dtable-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c32b2ff548ebfe1801ffdaef26cf74c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21334,
        "upload_time": "2020-10-13T20:12:29",
        "upload_time_iso_8601": "2020-10-13T20:12:29.580751Z",
        "url": "https://files.pythonhosted.org/packages/55/b2/b7ee566072b88b892bb18b12b2b9ab2211fdf1e8cbaf98066adde088989c/flask_dtable-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55b2b7ee566072b88b892bb18b12b2b9ab2211fdf1e8cbaf98066adde088989c",
        "md5": "2c32b2ff548ebfe1801ffdaef26cf74c",
        "sha256": "98368a23fde592df2d50762589246ede83e49de7c54e222adf8a17243bddc2c7"
      },
      "downloads": -1,
      "filename": "flask_dtable-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2c32b2ff548ebfe1801ffdaef26cf74c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21334,
      "upload_time": "2020-10-13T20:12:29",
      "upload_time_iso_8601": "2020-10-13T20:12:29.580751Z",
      "url": "https://files.pythonhosted.org/packages/55/b2/b7ee566072b88b892bb18b12b2b9ab2211fdf1e8cbaf98066adde088989c/flask_dtable-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}