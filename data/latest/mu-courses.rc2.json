{
  "info": {
    "author": "Overhang.IO",
    "author_email": "contact@overhang.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# 𝝁 🌊 course authoring for humans\n\nMu is for authors of online courses. It allows you to cross-compile courses from one format to another. For instance, you can write your courses in a human-friendly format, such as Markdown, and convert them to a format that can be imported in your learning management system ([LMS](https://en.wikipedia.org/wiki/Learning_management_system)).\n\nSupported formats:\n\n- [Markdown](https://daringfireball.net/projects/markdown/): with [Pandoc-flavoured](https://garrettgman.github.io/rmarkdown/authoring_pandoc_markdown.html) header attributes.\n- HTML 5\n- Open Learning XML ([OLX](https://edx.readthedocs.io/projects/edx-open-learning-xml/)) from [Open edX](https://openedx.org).\n\nCheck out the [course.md](https://github.com/overhangio/mu/blob/main/examples/course.md) file to see what an actual course in Markdown format looks like.\n\n## Installation\n\n    pip install mu-courses\n\nConversion from and to Markdown is handled with the help of [Pandoc](https://pandoc.org/). Thus, a recent version of Pandoc is required when working with Markdown documents. See the corresponding [installation instructions](https://pandoc.org/installing.html).\n\n## Usage\n\n    # Markdown -> OLX\n    mu /path/to/course.md /path/to/olx/\n    # OLX -> HTML\n    mu /path/to/olx/course/ /path/to/course.html\n    # HTML -> OLX\n    mu /path/to/course.html /path/to/olx/course/\n    ...\n\nWhen writing Markdown files, the generated documents will include non-standard (but widely recognized) [header identifiers](https://garrettgman.github.io/rmarkdown/authoring_pandoc_markdown.html#header-identifiers) to store the course unit attributes.\n\n## Examples\n\nExample courses are provided in the [examples](./examples) directory.\n\n## Supported unit types and formats\n\nFor each unit type, we indicate whether reading from (R) and writing to (W) the corresponding format are supported.\n\nUnit type / Format | OLX | HTML/Markdown\n---|---|---\nCollection | ✅ | ✅\nVideo | ✅ | ✅\nFree text question | ✅ | ✅\nMultiple choice question | ✅ | ✅\nRaw HTML | ✅ | ✅\n\n### Notes and known limitations\n\n#### OLX\n\n##### Writer\n\n* Multiple choice questions are always rendered as checkboxes, and not as single-choice questions.\n\n## Contributing\n\n### Setting up a development environment\n\nInstall development requirements:\n\n    pip install -r requirements/dev.txt\n    pip install -e .\n\nRun tests:\n\n    make test\n\nReformat your code with [black](https://black.readthedocs.io/en/stable/):\n\n    make format\n\nRe-generate course samples:\n\n    make examples\n\nUpgrade pinned requirements:\n\n    make upgrade-requirements\n\nPublish a new release:\n\n    python setup sdist\n    twine upload dist/mu-courses*.tar.gz\n\n### How to add a new type of course unit?\n\nWant to add a new type of content to your course? Here's a general approach:\n\n1. Start by creating a new type of unit in the [mu/units.py](https://github.com/overhangio/mu/blob/main/mu/units.py) module.\n2. Add such a unit to the [examples/course.md](https://github.com/overhangio/mu/blob/main/examples/course.md) sample file, using your desired syntax.\n3. Implement the corresponding HTML reader in the [mu/formats/html/reader.py](https://github.com/overhangio/mu/blob/main/mu/formats/html/reader.py) module. You should draw your inspiration from the `Reader.on_section` method. You are strongly encouraged to add at least one unit test to [tests/test_html.py](https://github.com/overhangio/mu/blob/main/mu/tests/test_html).\n4. Now, implement the HTML writer in the [mu/formats/html/writer.py](https://github.com/overhangio/mu/blob/main/mu/formats/html/reader.py) module. This should be as simple as creating a new `Writer.on_yournewunitname` method. Add a unit test. Verify that your writer is generating the right HTML output by running `make example-html`.\n5. Implement the corresponding OLX reader and writer in [mu/formats/olx/writer.py](https://github.com/overhangio/mu/blob/main/mu/formats/olx/reader.py) and [mu/formats/olx/writer.py](https://github.com/overhangio/mu/blob/main/mu/formats/olx/reader.py). Check that the OLX course is correctly generated when you run `make example-olx`.\n\n### How to add a new input/output format?\n\nWould you like to use Mu with an LMS that is not currently supported, or with your own course format? You will need to implement two Python classes: a `Reader` and a `Writer`.\n\nIn Mu, converting from one format to another works as follows:\n\n    Reader -----------> unit.Course object ---------> Writer ------------> final path\n            generates                       sent to           writes to    or directory\n\n- The new `Reader` class must implement the methods from [`mu.formats.base.reader.BaseReader`](https://github.com/overhangio/mu/blob/main/mu/formats/base/reader.py).\n- The new `Writer` class must implement the methods from [`mu.formats.base.writer.BaseWriter`](https://github.com/overhangio/mu/blob/main/mu/formats/base/writer.py).\n\nYou should make sure to add unit tests to the `tests/` directory.\n\nAt the moment, all reader/writers must live in the mu package. In the future, we expect that it will be possible to auto-discover different reader and writer packages.\n\n## Troubleshooting\n\nThis project was created by Matthew Brett (@matthew-brett) and funded by a grant from the [Chan Zuckerberg Initiative](https://chanzuckerberg.com/). The project is maintained by Régis Behmo from [Overhang.IO](https://overhang.io). Would you like to report an issue or request a feature? Then [open a new GitHub issue](https://github.com/overhangio/mu/issues).\n\n## License\n\nThis work is licensed under the terms of the [GNU Affero General Public License (AGPL)](https://github.com/overhangio/mu/blob/master/LICENSE.txt).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/overhangio/mu/",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mu-courses",
    "package_url": "https://pypi.org/project/mu-courses/",
    "platform": null,
    "project_url": "https://pypi.org/project/mu-courses/",
    "project_urls": {
      "Code": "https://github.com/overhangio/mu",
      "Homepage": "https://github.com/overhangio/mu/",
      "Issue tracker": "https://github.com/overhangio/mu/issues"
    },
    "release_url": "https://pypi.org/project/mu-courses/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Course authoring for humans",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16974177,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a44921d33f88ac4976b664d380f2d86ae2f6f542b04f03a9d1d307baca48a77c",
          "md5": "f24caf3fb905188d5dd7d8f439874c06",
          "sha256": "f58c9a4be4fac154371a60b62fd372d8299a6b22a266f704df506da57c7200ca"
        },
        "downloads": -1,
        "filename": "mu-courses-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f24caf3fb905188d5dd7d8f439874c06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28054,
        "upload_time": "2023-02-02T13:24:01",
        "upload_time_iso_8601": "2023-02-02T13:24:01.030853Z",
        "url": "https://files.pythonhosted.org/packages/a4/49/21d33f88ac4976b664d380f2d86ae2f6f542b04f03a9d1d307baca48a77c/mu-courses-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87f50d5f13cc331acc80925c47ee00254a32cbcb431f88986f9f92ad1a09c1a0",
          "md5": "b847dfda9527998250146d7bca6388a7",
          "sha256": "988c82d1a3ac7098aa8b467354d9957b257824513d6f7f9b0b1f96adb7ed65f7"
        },
        "downloads": -1,
        "filename": "mu-courses-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b847dfda9527998250146d7bca6388a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29804,
        "upload_time": "2023-02-07T11:23:36",
        "upload_time_iso_8601": "2023-02-07T11:23:36.792124Z",
        "url": "https://files.pythonhosted.org/packages/87/f5/0d5f13cc331acc80925c47ee00254a32cbcb431f88986f9f92ad1a09c1a0/mu-courses-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87f50d5f13cc331acc80925c47ee00254a32cbcb431f88986f9f92ad1a09c1a0",
        "md5": "b847dfda9527998250146d7bca6388a7",
        "sha256": "988c82d1a3ac7098aa8b467354d9957b257824513d6f7f9b0b1f96adb7ed65f7"
      },
      "downloads": -1,
      "filename": "mu-courses-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b847dfda9527998250146d7bca6388a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29804,
      "upload_time": "2023-02-07T11:23:36",
      "upload_time_iso_8601": "2023-02-07T11:23:36.792124Z",
      "url": "https://files.pythonhosted.org/packages/87/f5/0d5f13cc331acc80925c47ee00254a32cbcb431f88986f9f92ad1a09c1a0/mu-courses-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}