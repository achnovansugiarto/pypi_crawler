{
  "info": {
    "author": "Zaar Hai",
    "author_email": "haizaar@haizaar.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "#########\nHTTP Noah\n#########\n\n.. image:: https://img.shields.io/pypi/v/http-noah.svg\n    :target: https://pypi.python.org/pypi/http-noah\n\n.. image:: https://img.shields.io/travis/haizaar/http-noah.svg\n        :target: https://travis-ci.org/haizaar/http-noah\n\n.. image:: https://img.shields.io/pypi/dm/http-noah.svg\n    :target: https://pypi.python.org/pypi/http-noah\n\n\nGeneric HTTP client for sync (requests) and async (aiohttp) operations.\n\n\"Noah\" means \"convenient\" in Hebrew.\n\nFor now I support Python 3.8+ only. Please open an issue if you need support for earlier versions.\n\n**********\nMotivation\n**********\n\nIf you have ever interfaced with REST APIs in Python it probably started like this\n\n.. code-block:: python\n\n  class PetSanctuaryClient:\n      def __init__(self):\n          self.session = requests.Session()\n\n      def get(self, url):\n          res = self.session.get(url)\n          res.raise_for_status()\n          return res.json()\n\nFrom this point it obviously gets complicated really quickly... ``.jsoin()`` returns you dict or list, but usually\nyou want to at least validate it somehow or even better use a specialty tool like `Pydantic <https://pydantic-docs.helpmanual.io/>`_.\nContinuing the above hypothetical example\n\n.. code-block:: python\n\n  from pydantic import BaseModel, ValidationError\n  from typing import List\n\n  class Pet(BaseModel):\n      name: str\n\n  class Pets(BaseModel):\n      __root__ = List[Pet]\n\n  class PetSanctuaryClient:\n      ...\n\n      def list_pets(self) -> Pets:\n          pets_info = self.get(...)\n          try:\n              return Pets.parse_obj(pets_info)\n          except ValidationError:\n              logger.info(\"Failed to parse pets_info\", pets_info=pets_info)  # hooray structlog\n\nThe above has to be properly factored out of course and you end up with the following class signature:\n\n.. code-block:: python\n\n  class PetSanctuaryClient:\n      def list_pets(...)\n      def get_pet(...)\n      def delete_pet(...)\n      def assign_pet_to_carer(...)\n      def list_carers(...)\n      def get_carer(...)\n      ...\n\nIf your target API is anything above trivial you'll quickly end up with entangled mess of methods.\nNaming conventions help of course but it quickly becomes a monster of a class.\nIf we could only break down this monolithic contraption into sub-APIs implemented in their separate classes\nwhich we would then hierarchically plug into the main?  I believe the below is much easier to digest:\n\n.. code-block:: python\n\n  psc = PetSanctuaryClient(...)\n  psc.pets.get(..)\n  psc.pets.list(...)\n  psc.cares.list(...)\n  ...\n\nI hope this gives you an idea of why this project was born. Throw into the equation support for asyncio and\nnumerous corner cases like forming URLs, aiohttp releasing connection on ``.raise_for_status()`` invocation and hence\ndenying you from seeing the error body which quite often contains  valuable information, etc.\n\nAll this particularly started to make sense when I switched to using\n`FastAPI <https://fastapi.tiangolo.com/>`_ for my backend services and already had Pydantic\nmodels that I could reuse on the client side.\n\n\n************\nInstallation\n************\nThere are ``sync`` and ``async`` flavours to installation to make sure only\nrelevant dependencies are pulled (e.g. chances are you don't want aiohttp in your sync app).\n\nSync version::\n\n  pip install --upgrade http-noah[sync]\n\nAsync version::\n\n  pip install --upgrade http-noah[async]\n\nTo install both sync and async versions use ``all`` extra specification instead of ``sync`` / ``async``.\n\n*****\nUsage\n*****\n\nBasic example\n#############\nLet's start with a basic example.\nAssuming our Pet Sanctuary API is running on ``http://localhost:8080/api/v1``:\n\n.. code-block:: python\n\n  from pydantic import BaseModel\n  from http_noah.sync_client import SyncHTTPClient\n\n  class Pet(BaseModel):\n      name: str\n\n  def main():\n      with SyncHTTPClient(\"localhost\", 8080) as client:\n          pet: Pet = client.get(\"/pets/1\", response_type=Pet)\n\nLet's have a closer looks at what happened here:\n\n* We provided only ``host`` and ``port`` with ``api_base`` defaulting to ``/api/v1`` so that\n  we don't have to prepend it to every URL in our call\n* We ask http_noah to convert API response to an instance of the desired type (or raise\n  otherwise)\n* We used a context manager to make sure everything will be cleaned up promptly.\n  In a more complex code, you may consider a kind of a life-cycle manager e.g. like in my demo\n  Hanuka project (`source <https://github.com/haizaar/hanuka/blob/master/hanuka/main.py#L36>`_)\n\nAsync example is pretty much the same:\n\n.. code-block:: python\n\n  from http_noah.async_client import AsyncHTTPClient\n\n  async def main():\n      async with AsyncHTTPClient(\"localhost\", 8080) as client:\n          pet: Pet = await client.get(\"/pets/1\", response_type=Pet)\n\nSince the goal of this library is to provide similar interfaces for both sync and async\ncode I'll focus on *async* examples from now on and will be leaving notes if there are\ndifferences that I worked hard to reduce to a very few.\n\nThe client support the following methods that map the corresponding HTTP verbs:\n\n.. code-block:: python\n\n  .get(...)\n  .post(...)\n  .put(...)\n  .delete(...)\n\nSending your data back is easy as well - be it just a dict or Pydantic model.\n\nFor Pydantic models you can just pass them to the ``body`` argument of e.g. ``.post()``:\n\n.. code-block:: python\n\n  async def create_pet():\n      async with AsyncHTTPClient(\"localhost\", 8080) as client:\n          pet = Pet(name=\"Crispy\")\n          await client.post(\"/pets\", body=pet, response_type=Pet)\n\nIf you just want to send data as JSON you need to outline that explicitly:\n\n.. code-block:: python\n\n  from http_noah.common import JSONData\n\n  async def create_pet():\n      async with AsyncHTTPClient(\"localhost\", 8080) as client:\n          pet = {\"name\": \"Crispy\"}\n          await client.post(\"/pets\", body=JSONData(data=pet), response_type=Pet)\n\nThis is necessary for http_noah to understand whether your intent is to send you data\nas JSON or as Form which both can be Python dicts. See more on forms and file uploads\nin the dedicated section below.\n\nAgain, I prefer to model everything I send and receive with Pydantic models - it makes\nlife so much easier that you get addicted to it very fast.\n\nNested Clients\n##############\nNow when we understand the basic usage let's see how can we build those beautiful nested\nclients I promised you in the beginning.\n\nLet's build a client for our hypothetical pet sanctuary API by starting with the root class:\n\n.. code-block:: python\n\n  from __future__ import annotations\n\n  from http_noah.async_client import AsyncAPIClientBase, AsyncHTTPClient\n\n  class PetSanctuaryClient(AsyncAPIClientBase):\n      @classmethod\n      def new(cls, host: str, port: int, scheme: str = \"https\") -> PetSanctuaryClient:\n          client = AsyncHTTPClient(host=host, port=port, scheme=scheme)\n          return cls(client=client)\n\nA this point it's just a boilerplate class that does nothing spectacular except having\na builder function. Note that I use ``AsyncAPIClientBase`` and not ``AsyncHTTPClient``.\n\nNow let's implement Pets sub-API:\n\n.. code-block:: python\n\n  from __future__ import annotations\n\n  from dataclasses import dataclass\n  from http_noah.async_client import AsyncAPIClientBase, AsyncHTTPClient\n\n  # Skipped model definitions here - as in the basic example\n\n  @dataclass\n  class PetClient:\n      client: AsyncHTTPClient\n\n      class paths:\n          prefix: str = \"/pets\"\n          list: str = prefix\n          get: str = prefix + \"/{id}\"\n          create: str = prefix\n\n      async def list(self) -> Pets:\n          return await self.client.get(self.paths.list, response_type=Pets)\n\n      async def get(self, id: int) -> Pet:\n          return await self.client.get(self.paths.get.format(id=id), response_type=Pet)\n\n      async def create(self, pet: Pet) -> Pet:\n          return await self.client.post(self.paths.create, body=Pet, response_type=Pet)\n\n  @dataclass\n  class PetSanctuaryClient(AsyncAPIClientBase):\n      pets: PetClient\n\n      @classmethod\n      def new(cls, host: str, port: int, scheme: str = \"https\") -> PetSanctuaryClient:\n          client = AsyncHTTPClient(host=host, port=port, scheme=scheme)\n          pet_client = PetClient(client)\n          return cls(client=client, pets=pet_client)\n\nNow we are talking! Let's enjoy it:\n\n.. code-block:: python\n\n    psc = PetSanctuaryClient(\"localhost\", 8080, scheme=\"http\")\n    async with psc:\n        pets = await psc.pets.list()\n        pet = await psc.pets.get(1)\n\nSimilarly we can implement other sub-API clients and nest them easily.\n\n\nGetting serious\n###############\n\nResponse type\n=============\nSpecifying response type is **mandatory** *unless* you expect your request to respond with\nHTTP 204 \"No Content\" which generally makes sense for DELETE operations.\n\n* If response Content-Type heading is set to ``applicaiton/json`` then JSON data will be\n  decoded for you and can be further parsed using `Pydantic <https://pydantic-docs.helpmanual.io/>`_\n  model of your choice.\n* Otherwise, you can request back either ``str`` or ``bytes``\n\nThis results in a limitation where with this library you can't fetch JSON response back\nas string. But since this is a high-level REST client I've yet bumped into this limitation\nin practice.\n\nTo sum it up, here are your options for the ``response_type`` argument:\n\n* ``bytes`` when a request returns a binary data, e.g image\n* ``str`` when a request returns text (technically speaking \"when the content type is not ``application/json``\")\n* ``dict``, ``list``, ``int``, ``bool``, ``float``, ``str`` (i.e. any of the JSON -> Python native types),\n  when your request returns JSON data and you don't want it parsed further into Pydantic objects.\n\nError handling\n==============\nTrying to align between sync and async code I aliased common error base classes under\ncommon names ``ConnectionError``, ``HTTPError``, and ``TimeoutError`` in both\n``http_noah.sync_client`` and ``async_client``. This is where it stops though - behind the\nname these are still ``requests`` / ``aiohttp`` error classes if you want to dig deeper.\n\nOne useful thing that http_noah does for you is making sure to log HTTP body when the error occurs.\nThis is usually a small but vital piece of information to help you understand what's going\non. Sadly enough, it requires quite a bit of tinkering to dig this info out.\nJust one example is that calling aiohttp's response object ``raise_for_status()`` method\nwill actually return the underlying HTTP connection back to the pool depriving you of reading\nthe error body.\n\nAgain, http_noah will log HTTP (error) body when it encounters HTTP errors.\n\nTimeouts\n========\nTimeouts can be configured by passing instance of ``http_noah.common.Timeout`` class to\neither ``.get()``, ``put()``, etc. methods or setting it per client instance through\n``ClientOptions``:\n\n.. code-block:: python\n\n  from http_noah.common import ClientOptions, Timeout\n  from http_noah.async_client import AsyncHTTPClient\n\n  options = ClientOptions(Timeout(total=10)\n  async with AsyncHTTPClient(host=\"localhost\", port=80, options=options) as client:\n      await client.get(...)  # Limited to 10 seconds\n      await client.post(..., timeout=Timeout(total=20))  # per call override\n\nHowever, if you reflect on the nested client approach as was suggested earlier, you can quickly notice\nthat re-defining ``timeout`` argument in all your high-level methods is very onerous.\nFortunately, http_noah stands true to its name and provides an easy solution with\nthe help of ``timeout`` context manager that both sync and async client implements:\n\nContinuing our ``PetSanctuaryClient`` example:\n\n.. code-block:: python\n\n  from http_noah.common import Timeout\n\n  async with PetSanctuaryClient(\"localhost\", 8080, scheme=\"http\") as psc:\n      pets = await psc.pets.list()\n      with psc.client.timeout(Timeout(total=1):\n          pet = await psc.pets.get(1)  # Limited to 1 second\n\nAs you can see, neither ``PetClient`` nor ``PetSanctuaryClient`` defined any timeout\nlogic yet we can perfectly apply timeouts.\n\n.. note::\n  One difference between sync and async behaviour here is that in case of connection\n  timeout, aiohttp will raise ``async.TimeoutError`` where requests will raise\n  ``requests.exceptions.ConnectionError`` which is technically not a TimeoutError.\n\n  See ``test_connect_timeout`` tests under ``tests/async_tests.py`` and\n  ``tests/sync_tests.py`` for details.\n\nForms\n=====\nForms are not used much today. However, I still encounter them when I need to login\ninto API to get Bearer token.\n\nTo use a form with http_noah simply fill it up as a ``dict``, as you would with\naiohttp / requests, and pass it through ``body`` argument wrapped with ``FormData``:\n\n.. code-block:: python\n\n  from typing import Literal\n  from pydantic import BaseModel\n  from http_noah.common import FormData\n\n  class TokenResponse(BaseModel):\n      access_token: str\n      token_type: Literal[\"bearer\"]\n\n  async def get_access_token():\n      login_form = FormData(data={\n          \"grant_type\": \"password\",\n          \"username\": \"foo\",\n          \"password\": \"secret\",\n      })\n      async with AsyncHTTPClient(\"localhost\", 8080) as client:\n          tr = await client.post(\"/access_token\", body=login_form, response_type=TokenResponse)\n\nFiles\n=====\nhttp-noah provides simple means to upload a file as a multipart encoded form.\nBest illustrated by example:\n\n.. code-block:: python\n\n  from pathlib import Path\n\n  from http_noah.common import UploadFile\n\n  async with AsyncHTTPClient(\"localhost\", 8080) as client:\n      await client.post(\n          \"/pets/1/photo\",\n          body=UploadFile(name=\"thumbnail\", path=Path(\"myphoto.jpg\"),\n      )\n\nSSL\n===\nSSL/TLS are supported as they are in ``requests`` and ``aiohttp``. Sometimes however\nit's desirable to disable SSL validation, e.g. in your dev environment. This can be\ndone through ``ClientOptions``:\n\n.. code-block:: python\n\n  from http_noah.common import ClientOptions\n  from http_noah.async_client import AsyncHTTPClient\n\n  options = ClientOptions(ssl_verify_cert=False)\n  async with AsyncHTTPClient(host=\"localhost\", port=80, options=options) as client:\n      ...\n\nAuthentication\n==============\nhttp-noah support both Basic and Bearer token client authentication.\nThese can be set at any time on the existing client:\n\n.. code-block:: python\n\n  async with AsyncHTTPClient(\"localhost\", 8080) as client:\n      # Bearer token\n      client.set_auth_token(\"my-secret-token\")\n      # Or Basic Auth\n      client.set_auth_basic(\"my-username\", \"my-password\")\n\nIt's a deliberate design decision to omit auth parameters from constructor\nbecause in case of, e.g. bearer token, auth info may not be known in advance\nbecause one may need to submit a login form first. Hence it's required to be\nable to set auth info at a later stage.\n\n\n***********\nDevelopment\n***********\nTo develop http_noah you'll need Python 3.8+, pipenv and `direnv <https://direnv.net/>`_ installed.\n\nThen just run ``make bootstrap`` after cloning the repo, wait a while, and you are done - next time you enter into the\ncloned directory the environment will be set for you.\n\nCode wise, you can't really have the same code that does both sync and async. Not in a readable way at least.\nSince readability counts and simplicity trumps complexity, I'd rather have two versions of a very simple code\nthat does each of sync and async instead of one callback-polluted/iterator-based/black-magic-imbued code-base.\n\nCare was takes to have a functional tests for each of the library features.\n\nEnjoy and see you at PRs!\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/haizaar/http-noah",
    "keywords": "",
    "license": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
    "maintainer": "",
    "maintainer_email": "",
    "name": "http-noah",
    "package_url": "https://pypi.org/project/http-noah/",
    "platform": "",
    "project_url": "https://pypi.org/project/http-noah/",
    "project_urls": {
      "Homepage": "https://github.com/haizaar/http-noah"
    },
    "release_url": "https://pypi.org/project/http-noah/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "REST-minded yet generic HTTP Python client with both async and sync interfaces",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8489389,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb96a8036faaee037fb4758924fce22099988c84c5b22c36b00e4acede509882",
          "md5": "a161ae075114ca12818d9f2fa0f58f46",
          "sha256": "a59ab8a2d8a1e1f81b666843cbfa80dc3ced08b5cdc25bcc190b9546faf1c24f"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a161ae075114ca12818d9f2fa0f58f46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28734,
        "upload_time": "2020-07-06T15:23:47",
        "upload_time_iso_8601": "2020-07-06T15:23:47.298780Z",
        "url": "https://files.pythonhosted.org/packages/fb/96/a8036faaee037fb4758924fce22099988c84c5b22c36b00e4acede509882/http-noah-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d77512d5b77eefc21a7c49f99bf4d94bc9619eccdf7cc0a8e6576cb86fc8368",
          "md5": "acc662bf949b489e924066629f4f6ac3",
          "sha256": "80923513101d268b19372ab3a6dfdd63843843567e027213b367ead449ea110f"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "acc662bf949b489e924066629f4f6ac3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30447,
        "upload_time": "2020-10-01T12:26:11",
        "upload_time_iso_8601": "2020-10-01T12:26:11.635953Z",
        "url": "https://files.pythonhosted.org/packages/5d/77/512d5b77eefc21a7c49f99bf4d94bc9619eccdf7cc0a8e6576cb86fc8368/http-noah-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c09853ff5e8f66aac8452388331368eea64fdc133f2945de9e48febc22daaab",
          "md5": "9700d485e3b7b1a75681ffbc5669d2c8",
          "sha256": "25c90971ff4065611d6febc3deace7c182bd82bfceaa4f9cac95d92aeaedcae6"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9700d485e3b7b1a75681ffbc5669d2c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29016,
        "upload_time": "2020-07-06T15:28:24",
        "upload_time_iso_8601": "2020-07-06T15:28:24.595946Z",
        "url": "https://files.pythonhosted.org/packages/2c/09/853ff5e8f66aac8452388331368eea64fdc133f2945de9e48febc22daaab/http-noah-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "735ab1fce31115780fe5c83c9dfaa5b618a0c805ba32cb380583c61815259792",
          "md5": "cfd6d159edea1ed09a8f59c0d7528085",
          "sha256": "679895c43fbc41c754d5e3c7e659c4234c0ef08033a55b1ae0da871e4b22b5aa"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cfd6d159edea1ed09a8f59c0d7528085",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29823,
        "upload_time": "2020-07-07T11:45:25",
        "upload_time_iso_8601": "2020-07-07T11:45:25.951386Z",
        "url": "https://files.pythonhosted.org/packages/73/5a/b1fce31115780fe5c83c9dfaa5b618a0c805ba32cb380583c61815259792/http-noah-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56b1937426fb4955b1e678b2a0eaa8301d7a899702c54498381cb459d6e91544",
          "md5": "1e82396cd729b446028e6e80628afe82",
          "sha256": "ab94dcf4562b1ca1c1c0b3d94edae34e9fbd11cd202ed8af05015ba431d3ada3"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1e82396cd729b446028e6e80628afe82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29824,
        "upload_time": "2020-07-07T11:49:55",
        "upload_time_iso_8601": "2020-07-07T11:49:55.771375Z",
        "url": "https://files.pythonhosted.org/packages/56/b1/937426fb4955b1e678b2a0eaa8301d7a899702c54498381cb459d6e91544/http-noah-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b78c0872b0f44d1ccb3aa14819dcdae8f4ef7fcbb8d920eeccdd6e0be0169a6f",
          "md5": "0c2b6ff22607c01ef2aeca8684d9e7e0",
          "sha256": "f4d3445e1375d9c2aa04b05c99f36609c2a74842fb13e7381273dd0d79a1dde8"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0c2b6ff22607c01ef2aeca8684d9e7e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29848,
        "upload_time": "2020-07-10T04:27:36",
        "upload_time_iso_8601": "2020-07-10T04:27:36.122423Z",
        "url": "https://files.pythonhosted.org/packages/b7/8c/0872b0f44d1ccb3aa14819dcdae8f4ef7fcbb8d920eeccdd6e0be0169a6f/http-noah-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b83b17ed26d2c3f7f69c12a2bb7772c625a97e34dfc9d2d3a3bbbb2b77d984e5",
          "md5": "0ea5adfece1c2b45895b496a5246422f",
          "sha256": "ee47b6a36aaf91ff084533ef26ebdbede343b11959ecfd6ee24228beaaf434dc"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0ea5adfece1c2b45895b496a5246422f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30042,
        "upload_time": "2020-07-10T04:31:43",
        "upload_time_iso_8601": "2020-07-10T04:31:43.068434Z",
        "url": "https://files.pythonhosted.org/packages/b8/3b/17ed26d2c3f7f69c12a2bb7772c625a97e34dfc9d2d3a3bbbb2b77d984e5/http-noah-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e56958b4e1cd2dfaa048e44d79a72fe55b1c2eb1761568164c356fd4f0de4b23",
          "md5": "ce6303a3ff61f5cd81622002b6ba3ff0",
          "sha256": "1ef97600e63c62ba91257db022a5bab92d5c1a33ee06d436c0ecc38dbbdc351b"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ce6303a3ff61f5cd81622002b6ba3ff0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30038,
        "upload_time": "2020-07-10T04:33:51",
        "upload_time_iso_8601": "2020-07-10T04:33:51.882781Z",
        "url": "https://files.pythonhosted.org/packages/e5/69/58b4e1cd2dfaa048e44d79a72fe55b1c2eb1761568164c356fd4f0de4b23/http-noah-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ee6bc13c2d7bb89e4dc62c8702f8871d51fac99bf9d0f8de4b0ad867ed2a34",
          "md5": "0aa7189e1bdf55ee802f2018c1b2b16a",
          "sha256": "0ce05efed785fd7161658ef89c7399a2e2ae5c56bb21242e44733d9ccae46994"
        },
        "downloads": -1,
        "filename": "http-noah-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0aa7189e1bdf55ee802f2018c1b2b16a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30040,
        "upload_time": "2020-07-13T13:20:02",
        "upload_time_iso_8601": "2020-07-13T13:20:02.235392Z",
        "url": "https://files.pythonhosted.org/packages/83/ee/6bc13c2d7bb89e4dc62c8702f8871d51fac99bf9d0f8de4b0ad867ed2a34/http-noah-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1af0f43bf052b42685656925299fd459ad95a673ec5c284e59f506cda92e358",
          "md5": "fc64fee4a35a586f94cbcaa0cc7908a6",
          "sha256": "93db346946514e2d955c8761ab70d5cada54cb9f129dfe7c578fc17a7d42d4f9"
        },
        "downloads": -1,
        "filename": "http-noah-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc64fee4a35a586f94cbcaa0cc7908a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30770,
        "upload_time": "2020-10-23T11:49:36",
        "upload_time_iso_8601": "2020-10-23T11:49:36.607586Z",
        "url": "https://files.pythonhosted.org/packages/c1/af/0f43bf052b42685656925299fd459ad95a673ec5c284e59f506cda92e358/http-noah-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e49c7add64a8f5bb8540fd2ec515a0f16941da8f7bafdab221e64c0beed449a4",
          "md5": "6e06e112268f7b5c734bb4a41467ede4",
          "sha256": "02c8b0c99b670ad1b426a4cba02ada9eea22678531d52fdbeedcd476ee543e12"
        },
        "downloads": -1,
        "filename": "http-noah-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e06e112268f7b5c734bb4a41467ede4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31379,
        "upload_time": "2020-10-24T04:31:51",
        "upload_time_iso_8601": "2020-10-24T04:31:51.684246Z",
        "url": "https://files.pythonhosted.org/packages/e4/9c/7add64a8f5bb8540fd2ec515a0f16941da8f7bafdab221e64c0beed449a4/http-noah-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e49c7add64a8f5bb8540fd2ec515a0f16941da8f7bafdab221e64c0beed449a4",
        "md5": "6e06e112268f7b5c734bb4a41467ede4",
        "sha256": "02c8b0c99b670ad1b426a4cba02ada9eea22678531d52fdbeedcd476ee543e12"
      },
      "downloads": -1,
      "filename": "http-noah-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6e06e112268f7b5c734bb4a41467ede4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31379,
      "upload_time": "2020-10-24T04:31:51",
      "upload_time_iso_8601": "2020-10-24T04:31:51.684246Z",
      "url": "https://files.pythonhosted.org/packages/e4/9c/7add64a8f5bb8540fd2ec515a0f16941da8f7bafdab221e64c0beed449a4/http-noah-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}