{
  "info": {
    "author": "Naveen Veluswamy",
    "author_email": "velnaveen99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# ShorterPy\nA Python SDK for Shorter\n\n## Installation\n\nFrom PyPi\n\n```\npip install shorter-py\n```\n\n## Documentation\n\nComplete documentation coming soon\n\n## Example Usage\n\nThe following examples shows how to use this packages in different use cases\n\n### Create an APIProvider\n\n```\nfrom shorterpy.api.apiProvider import ApiProvider, Network\nfrom eth_account import Account\n\nacc = Account.from_key(<PRIVATE_KEY_HERE>)\napi = ApiProvider(\n        <RINKEBY_RPC_URL>, \n        Network.RINKEBY,\n        acc\n    )\n\n```\n\n### Provider Usecase\n\n#### Create a Pool Proposal\n\nCreating a pool proposal requires you to call `createPoolProposal` function in `Committee` contract. This function requires you to pay 10000 IPISTR tokens.\nFirst, approve `Committee` to use 10000 IPISTR from your account:\n\n```\nfrom shorterpy.contracts.erc20 import ERC20\nfrom shorterpy.common.types import GasParams\n\n#Create IPISTR Token contract object\nipistr = ERC20(api, Web3.toChecksumAddress('0x7b113F4e8b55f812eC52B83313f6354364204DB2'))\n\n#Create GasParams object, containing details about gas to be uses\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Send a transaction to approve Committee contract to use 10000 IPISTRs, the transaction will be signed automatically by the ApiProvider\ntx_receipt = ipistr.approve(ADDRESSES[Network.RINKEBY.name]['ICommittee'], 10000*(10**18), gas_params)\n\n```\n\nThen, send a transaction to create pool proposal\n\n```\nfrom shorterpy.contracts.committee import Committee\n\n#Create Committee contract object\ncommittee = Committee(api)\n\n#Create GasParams object, containing details about gas to be uses\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Send a transaction to create pool proposal function: Committee.createPoolProposal(staked_token, leverage, duration_days, gas_params)\ntx_receipt = committee.createPoolProposal(<STAKED_TOKEN_ADDRESS>, 5, 30, gas_params)\n```\n\n#### Deposit And Withdraw\n\nProviders can deposit into a pool and withdraw from it, using the StrPool contract object.\n\nA StrPool contract object can be created with the following syntax:\n\n```\nfrom shorterpy.contracts.strPool import StrPool\n\nstrPool = StrPool(api, <POOL_ADDRESS>)\n```\n\nThe pool address paramater is required to connect it to the required StrPool\n\nThe deposit and withdrawal is made through the token related with the pool. So, it is necessary to approve the pool to use\nthe required amount of tokens to make a deposit. \n\n```\nfrom shorterpy.contracts.erc20 import ERC20\nfrom shorterpy.common.types import GasParams\n\n#Create Token contract object\ntoken = ERC20(api, Web3.toChecksumAddress(<TOKEN_ADDRESS>))\n\n#Create GasParams object, containing details about gas to be uses\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Send a transaction to approve Committee contract to use 10000 IPISTRs, the transaction will be signed automatically by the ApiProvider\ntx_receipt = token.approve(<POOL_ADDRESS>, <AMOUNT_TO_DEPOSIT>, gas_params)\n```\n\nThen, the deposit can be made by calling `strPool.deposit()` function\n\n```\n#Create GasParams object, containing details about gas to be uses\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\ntx_receipt = strPool.deposit(<AMOUNT_TO_DEPOSIT>, gas_params)\n```\n\nWithdrawal can be made by calling `strPool.withdraw()` function\n\n```\ntx_receipt = strPool.withdraw(<PERCENTAGE_TO_WITHDRAW>, <AMOUNT_TO_WITDRAW>, gas_params)\n```\n\n### Trader Usecase\n\nTraders can use the `TradingHub` contract to buy cover or sell short\n\n#### Sell Short\n\n```\nfrom shorterpy.contracts.tradingHub import TradingHub\n\ntradingHub = TradingHub(api)\n\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\ntx_receipt = tradingHub.sell_short(<POOL_ID>, <AMOUNT>, <AMOUNT_OUT_MIN>, <SWAP_ROUTER>, <PATH>, gas_params)\n```\n\n#### Buy Cover\n\n```\ntx_receipt = tradingHub.buy_cover(<POOL_ID>, <AMOUNT>, <AMOUNT_IN_MAX>, <SWAP_ROUTER>, <PATH>, gas_params)\n```\n\n\n### Ruler Usecase\n\nRulers can participate in committee activities by deposits/withdrawal of IPISTR tokens in `Committee` contract. \n\n```\nfrom shorterpy.contracts.committee import Committee\n\ncommittee = Committee(api)\n\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Deposit IPISTR to committee\ntx_receipt = committee.deposit(amount, gas_params)\n\n#Withdraw IPISTR from committee\ntx_receipt = committee.withdraw(amount, gas_params)\n```\n\nRulers can also vote on proposals\n\n```\ntx_receipt = committee.vote(<PROPOSAL_ID>, <DIRECTION - True/False>, <VOTE_SHARE>, gas_params)\n```\n\nRulers can also participate in Tanto and Katana bids\n\n```\nfrom shorterpy.contracts.auctionHall import AuctionHall\n\nauctionHall = AuctionHall(api)\n\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Bid Tanto\ntx_receipt = auctionHall.bid_tanto(<POSITION_ADDR>, <BID_SIZE>, <PRIORITY_FEE>, gas_params)\n\n#Get phase1 infos\np1_info = auctionHall.phase1_infos(<POSITION_ADDR>)\n\n#Bid Katana\ntx_receipt = auctionHall.bid_katana(<POSITION_ADDR>, <PATH>, gas_params)\n\n#get phase2 infos\np2_info = auctionHall.phase2_infos(<POSITION_ADDR>)\n```\n\nRulers can also execute naginata\n\n```\nfrom shorterpy.contracts.vaultButler import VaultButler\n\nvaultButler = VaultButler(api)\n\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Execute Naginate\ntx_receipt = vaultButler.execute_naginata(<POSITION_ADDR>, <BID_SIZE>, gas_params)\n```\n\n### Guest\n\nAnyone can stake/unstake tokens from `Farming` contract for their participation in the platform.\n\n```\nfrom shorterpy.contracts.farming import Farming\n\nfarming = Farming(api)\n\ngas_params = GasParams(gas=1000000, max_fee_per_gas=Web3.toWei(2, 'gwei'), max_priority_fee_per_gas=Web3.toWei(2, 'gwei'))\n\n#Stake\ntx_receipt = farming.stake(amount, gas_params)\n\n#Unstake\ntx_receipt = farming.unstake(amount, gas_params)\n```\n\nThey can also harvest their rewards\n\n```\n#view pending rewards\nrewards = farming.all_pending_rewards(<USER_ADDR>)\n\n#haverst all rewards\ntx_receipt = farming.harvest_all(\n        <GOV_REWARDS>,\n        <FARMING_REWARDS>,\n        <VOTE_AGAINS_REWARDS>,\n        <TRADING_REWARD_POOLS>,\n        <STAKES_REWARD_POOLS>,\n        <CREATE_REWARD_POOLS>,\n        <VOTE_REWARD_POOLS>,\n        gas_params\n)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DeveloperInProgress/ShorterPy",
    "keywords": "ethereum,blockchain,shorter,contract,python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shorter-py",
    "package_url": "https://pypi.org/project/shorter-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/shorter-py/",
    "project_urls": {
      "Homepage": "https://github.com/DeveloperInProgress/ShorterPy"
    },
    "release_url": "https://pypi.org/project/shorter-py/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library for interacting with the Shorter protocol",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14832186,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaac9eed226b3b5df27a0356ca8935d574432445ca0f29b74408e86c877fd850",
          "md5": "8a078b66ddadcefd28847154f9620b9e",
          "sha256": "6429b79af305765faa3b60800082bba4a642967335cdc3af4708abe7baa9a47a"
        },
        "downloads": -1,
        "filename": "shorter-py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a078b66ddadcefd28847154f9620b9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12582,
        "upload_time": "2022-08-22T06:29:32",
        "upload_time_iso_8601": "2022-08-22T06:29:32.295020Z",
        "url": "https://files.pythonhosted.org/packages/ea/ac/9eed226b3b5df27a0356ca8935d574432445ca0f29b74408e86c877fd850/shorter-py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaac9eed226b3b5df27a0356ca8935d574432445ca0f29b74408e86c877fd850",
        "md5": "8a078b66ddadcefd28847154f9620b9e",
        "sha256": "6429b79af305765faa3b60800082bba4a642967335cdc3af4708abe7baa9a47a"
      },
      "downloads": -1,
      "filename": "shorter-py-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a078b66ddadcefd28847154f9620b9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12582,
      "upload_time": "2022-08-22T06:29:32",
      "upload_time_iso_8601": "2022-08-22T06:29:32.295020Z",
      "url": "https://files.pythonhosted.org/packages/ea/ac/9eed226b3b5df27a0356ca8935d574432445ca0f29b74408e86c877fd850/shorter-py-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}