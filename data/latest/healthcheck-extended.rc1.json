{
  "info": {
    "author": "Felix Schabernack",
    "author_email": "felix.schabernack@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Programming Language :: Python"
    ],
    "description": "Healthcheck-Extended\n----------\n\nHealthcheck wraps a Flask app object and adds a way to write simple healthcheck\nfunctions that can be used to monitor your application. It's useful for\nasserting that your dependencies are up and running and your application can\nrespond to HTTP requests. The Healthcheck functions are exposed via a user\ndefined flask route so you can use an external monitoring application (monit,\nnagios, Runscope, etc.) to check the status and uptime of your application.\n\nNew in version 1.1: Healthcheck also gives you a simple Flask route to view\ninformation about your application's environment. By default, this includes\ndata about the operating system, the Python environment, the current process,\nand the application config. You can customize which sections are included, or\nadd your own sections to the output.\n\nThis fork contains some tweaks, mostly regarding a more flexible timestamp\nformat handling to make it more usable.\n\nForked from: https://github.com/Runscope/healthcheck\n\n### Version 1.3.4\n- Add support for UTC timestamps\n\n## Installing\n\n```\npip install healthcheck\n\n```\n\n## Usage\n\nHere's an example of basic usage:\n\n```python\nfrom flask import Flask\nfrom healthcheck_extended import HealthCheck, EnvironmentDump\n\napp = Flask(__name__)\n\n# wrap the flask app and give a heathcheck url\nhealth = HealthCheck(app, \"/healthcheck\")\nenvdump = EnvironmentDump(app, \"/environment\")\n\n# add your own check function to the healthcheck\ndef redis_available():\n    client = _redis_client()\n    info = client.info()\n    return True, \"redis ok\"\n\nhealth.add_check(redis_available)\n\n# add your own data to the environment dump\ndef application_data():\n\treturn {\"maintainer\": \"Frank Stratton\",\n\t        \"git_repo\": \"https://github.com/Runscope/healthcheck\"}\n\nenvdump.add_section(\"application\", application_data)\n```\n\nTo run all of your check functions, make a request to the healthcheck URL\nyou specified, like this:\n\n```\ncurl \"http://localhost:5000/healthcheck\"\n```\n\nAnd to view the environment data, make a check to the URL you specified for\nEnvironmentDump:\n\n```\ncurl \"http://localhost:5000/environment\"\n```\n\n## The HealthCheck class\n\n### Check Functions\n\nCheck functions take no arguments and should return a tuple of (bool, str).\nThe boolean is whether or not the check passed. The message is any string or\noutput that should be rendered for this check. Useful for error\nmessages/debugging.\n\n```python\n# add check functions\ndef addition_works():\n\n\tif 1 + 1 == 2:\n\t\treturn True, \"addition works\"\n\telse:\n\t\treturn False, \"the universe is broken\"\n```\n\nAny exceptions that get thrown by your code will be caught and handled as\nerrors in the healthcheck:\n\n```python\n# add check functions\ndef throws_exception():\n\tbad_var = None\n\tbad_var['explode']\n\n```\n\nWill output:\n\n```json\n{\n\t\"status\": \"failure\",\n\t\t\"results\": [\n\t\t{\n\t\t\t\"output\": \"'NoneType' object has no attribute '__getitem__'\",\n\t\t\t\"checker\": \"throws_exception\",\n\t\t\t\"passed\": false\n\t\t}\n\t]\n}\n```\n\nNote, all checkers will get run and all failures will be reported. It's\nintended that they are all separate checks and if any one fails the\nhealthcheck overall is failed.\n\n### Caching\n\nIn Runscope's infrastructure, the /healthcheck endpoint is hit surprisingly\noften. haproxy runs on every server, and each haproxy hits every healthcheck\ntwice a minute. (So if we have 30 servers in our infrastructure, that's 60\nhealthchecks per minute to every Flask service.) Plus, monit hits every\nhealthcheck 6 times a minute. \n\nTo avoid putting too much strain on backend services, health check results can\nbe cached in process memory. By default, health checks that succeed are cached\nfor 27 seconds, and failures are cached for 9 seconds. These can be overridden\nwith the `success_ttl` and `failed_ttl` parameters. If you don't want to use\nthe cache at all, initialize the Healthcheck object with `success_ttl=None,\nfailed_ttl=None`.\n\n### Customizing\n\nYou can customize the status codes, headers, and output format for success and\nfailure responses.\n\n## The EnvironmentDump class\n\n### Built-in data sections\n\nBy default, EnvironmentDump data includes these 4 sections:\n\n* `os`: information about your operating system.\n* `python`: information about your Python executable, Python path, and\ninstalled packages.\n* `process`: information about the currently running Python process, including\nthe PID, command line arguments, and all environment variables.\n* `config`: information about your Flask app's configuration, pulled from\n`app.config`.\n\nSome of the data is scrubbed to avoid accidentally exposing passwords or access\nkeys/tokens. Config keys and environment variable names are scanned for `key`,\n`token`, or `pass`. If those strings are present in the name of the variable,\nthe value is not included.\n\n### Disabling built-in data sections\n\nFor security reasons, you may want to disable an entire section. You can\ndisable sections when you instantiate the `EnvironmentDump` object, like this:\n\n```python\nenvdump = EnvironmentDump(app, \"/environment\",\n                          include_python=False, include_os=False,\n                          include_process=False, include_config=False)\n```\n\n### Adding custom data sections\n\nYou can add a new section to the output by registering a function of your own.\nHere's an example of how this would be used:\n\n```python\ndef application_data():\n\treturn {\"maintainer\": \"Frank Stratton\",\n\t        \"git_repo\": \"https://github.com/Runscope/healthcheck\"}\n\nenvdump = EnvironmentDump(app, \"/environment\")\nenvdump.add_section(\"application\", application_data)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/schabi88/healthcheck-extended",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "healthcheck-extended",
    "package_url": "https://pypi.org/project/healthcheck-extended/",
    "platform": "any",
    "project_url": "https://pypi.org/project/healthcheck-extended/",
    "project_urls": {
      "Homepage": "https://github.com/schabi88/healthcheck-extended"
    },
    "release_url": "https://pypi.org/project/healthcheck-extended/1.3.4/",
    "requires_dist": [
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "setuptools-scm ; extra == 'dev'",
      "setuptools-lint ; extra == 'dev'",
      "requirements-builder ; extra == 'dev'",
      "flask ; extra == 'tests'",
      "pylint ; extra == 'tests'",
      "flake8 ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Adds healthcheck endpoints to Flask apps",
    "version": "1.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8289559,
  "releases": {
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3836644b5e64ed8d76c1d2744ae82375819c5ab3abf85072bd531f46d1326f0c",
          "md5": "b79c3129b4e163eef133c9158fafe488",
          "sha256": "eaa69702a859c22850e37a9dd79a8a813aa0a08b5f1b9dca47c3902b0d3d5fc2"
        },
        "downloads": -1,
        "filename": "healthcheck_extended-1.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b79c3129b4e163eef133c9158fafe488",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7719,
        "upload_time": "2020-09-28T13:49:32",
        "upload_time_iso_8601": "2020-09-28T13:49:32.230487Z",
        "url": "https://files.pythonhosted.org/packages/38/36/644b5e64ed8d76c1d2744ae82375819c5ab3abf85072bd531f46d1326f0c/healthcheck_extended-1.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e5b6dd26a9feeec013409a620d74d16370d0be5241debe27fa97ea659c2fed1",
          "md5": "a33a9c109979264ef090409125a70b73",
          "sha256": "bd6e3af0a3946848d475ab6a8bc34548335df0d163bc69a316192486bfe1d468"
        },
        "downloads": -1,
        "filename": "healthcheck-extended-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a33a9c109979264ef090409125a70b73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8085,
        "upload_time": "2020-09-28T13:49:34",
        "upload_time_iso_8601": "2020-09-28T13:49:34.750785Z",
        "url": "https://files.pythonhosted.org/packages/0e/5b/6dd26a9feeec013409a620d74d16370d0be5241debe27fa97ea659c2fed1/healthcheck-extended-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3836644b5e64ed8d76c1d2744ae82375819c5ab3abf85072bd531f46d1326f0c",
        "md5": "b79c3129b4e163eef133c9158fafe488",
        "sha256": "eaa69702a859c22850e37a9dd79a8a813aa0a08b5f1b9dca47c3902b0d3d5fc2"
      },
      "downloads": -1,
      "filename": "healthcheck_extended-1.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b79c3129b4e163eef133c9158fafe488",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7719,
      "upload_time": "2020-09-28T13:49:32",
      "upload_time_iso_8601": "2020-09-28T13:49:32.230487Z",
      "url": "https://files.pythonhosted.org/packages/38/36/644b5e64ed8d76c1d2744ae82375819c5ab3abf85072bd531f46d1326f0c/healthcheck_extended-1.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e5b6dd26a9feeec013409a620d74d16370d0be5241debe27fa97ea659c2fed1",
        "md5": "a33a9c109979264ef090409125a70b73",
        "sha256": "bd6e3af0a3946848d475ab6a8bc34548335df0d163bc69a316192486bfe1d468"
      },
      "downloads": -1,
      "filename": "healthcheck-extended-1.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a33a9c109979264ef090409125a70b73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8085,
      "upload_time": "2020-09-28T13:49:34",
      "upload_time_iso_8601": "2020-09-28T13:49:34.750785Z",
      "url": "https://files.pythonhosted.org/packages/0e/5b/6dd26a9feeec013409a620d74d16370d0be5241debe27fa97ea659c2fed1/healthcheck-extended-1.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}