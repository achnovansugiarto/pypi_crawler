{
  "info": {
    "author": "CravateRouge",
    "author_email": "baptiste.crepin@ntymail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ![bloodyAD logo](https://repository-images.githubusercontent.com/415977068/9b2fed72-35fb-4faa-a8d3-b120cd3c396f) autobloody\n`autobloody` is a tool to automatically exploit Active Directory privilege escalation paths shown by BloodHound.\n\n## Description\nThis tool automates the AD privesc between two AD objects, the source (the one we own) and the target (the one we want) if a privesc path exists in BloodHound database.\nThe automation is composed of two steps:\n- Finding the optimal path for privesc using bloodhound data and neo4j queries.\n- Execute the path found using `bloodyAD` package\n\nBecause autobloody relies on [bloodyAD](https://github.com/CravateRouge/bloodyAD), it supports authentication using cleartext passwords, pass-the-hash, pass-the-ticket or certificates and binds to LDAP services of a domain controller to perform AD privesc.\n\n## Installation\nFirst if you run it on Linux, you must have `libkrb5-dev` installed on your OS in order for kerberos to work:\n```ps1\n# Debian/Ubuntu/Kali\napt-get install libkrb5-dev\n\n# Centos/RHEL\nyum install krb5-devel\n\n# Fedora\ndnf install krb5-devel\n\n# Arch Linux\npacman -S krb5\n```\n\nA python package is available:\n```ps1\npip install autobloody\n```\n\nOr you can clone the repo:\n```ps1\ngit clone --depth 1 https://github.com/CravateRouge/autobloody\npip install .\n```\n### Dependencies\n- [bloodyAD](https://github.com/CravateRouge/bloodyAD)\n- Neo4j python driver\n- Neo4j with the [GDS library](https://neo4j.com/docs/graph-data-science/current/installation/)\n- BloodHound\n- Python 3\n- Gssapi (linux) or Winkerberos (Windows)\n\n## How to use it\nFirst data must be imported into BloodHound (e.g using SharpHound or BloodHound.py) and Neo4j must be running.\n\n> :warning: **-ds and -dt values are case sensitive**  \n\nSimple usage:\n```ps1\nautobloody -u john.doe -p 'Password123!' --host 192.168.10.2 -dp 'neo4jP@ss' -ds 'JOHN.DOE@BLOODY.LOCAL' -dt 'BLOODY.LOCAL'\n```\n\nFull help:\n```ps1\n[bloodyAD]$ ./autobloody.py -h\nusage: autobloody.py [-h] [--dburi DBURI] [-du DBUSER] -dp DBPASSWORD -ds DBSOURCE -dt DBTARGET [-d DOMAIN] [-u USERNAME] [-p PASSWORD] [-k] [-c CERTIFICATE] [-s] --host HOST\n\nAD Privesc Automation\n\noptions:\n  -h, --help            show this help message and exit\n  --dburi DBURI         The host neo4j is running on (default is \"bolt://localhost:7687\")\n  -du DBUSER, --dbuser DBUSER\n                        Neo4j username to use (default is \"neo4j\")\n  -dp DBPASSWORD, --dbpassword DBPASSWORD\n                        Neo4j password to use\n  -ds DBSOURCE, --dbsource DBSOURCE\n                        Case sensitive label of the source node (name property in bloodhound)\n  -dt DBTARGET, --dbtarget DBTARGET\n                        Case sensitive label of the target node (name property in bloodhound)\n  -d DOMAIN, --domain DOMAIN\n                        Domain used for NTLM authentication\n  -u USERNAME, --username USERNAME\n                        Username used for NTLM authentication\n  -p PASSWORD, --password PASSWORD\n                        Cleartext password or LMHASH:NTHASH for NTLM authentication\n  -k, --kerberos\n  -c CERTIFICATE, --certificate CERTIFICATE\n                        Certificate authentication, e.g: \"path/to/key:path/to/cert\"\n  -s, --secure          Try to use LDAP over TLS aka LDAPS (default is LDAP)\n  --host HOST           Hostname or IP of the DC (ex: my.dc.local or 172.16.1.3)\n```\n\n## How it works\nFirst a privesc path is found using the Dijkstra's algorithm implemented into the Neo4j's GDS library.\nThe Dijkstra's algorithm allows to solve the shortest path problem on a weighted graph. By default the edges created by BloodHound don't have weight but a type (e.g MemberOf, WriteOwner). A weight is then added to each edge accordingly to the type of edge and the type of node reached (e.g user,group,domain).\n\nOnce a path is generated, `autobloody` will connect to the DC and execute the path and clean what is reversible (everything except `ForcePasswordChange` and `setOwner`).\n\n## Limitations\nFor now, only the following BloodHound edges are currently supported for automatic exploitation:\n- MemberOf\n- ForceChangePassword\n- AddMembers\n- AddSelf\n- DCSync\n- GetChanges/GetChangesAll\n- GenericAll\n- WriteDacl\n- GenericWrite\n- WriteOwner\n- Owns\n- Contains\n- AllExtendedRights\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/CravateRouge/bloodyAD/archive/refs/tags/v0.1.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CravateRouge/autobloody",
    "keywords": "Active Directory,Privilege Escalation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autobloody",
    "package_url": "https://pypi.org/project/autobloody/",
    "platform": null,
    "project_url": "https://pypi.org/project/autobloody/",
    "project_urls": {
      "Download": "https://github.com/CravateRouge/bloodyAD/archive/refs/tags/v0.1.3.tar.gz",
      "Homepage": "https://github.com/CravateRouge/autobloody"
    },
    "release_url": "https://pypi.org/project/autobloody/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "AD Privesc Automation",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15502966,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27bf06ca81e4d59d09c2702aa3d491bdc6b804b6da84228d4ec7ff72d5e46137",
          "md5": "c34453b92756b2418041a328d11f1b87",
          "sha256": "fb36f5bd0e89326f3e44472e8d50b7d8e2c67abb96689410e332717c2ee4a755"
        },
        "downloads": -1,
        "filename": "autobloody-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c34453b92756b2418041a328d11f1b87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10393,
        "upload_time": "2022-09-13T18:42:50",
        "upload_time_iso_8601": "2022-09-13T18:42:50.969127Z",
        "url": "https://files.pythonhosted.org/packages/27/bf/06ca81e4d59d09c2702aa3d491bdc6b804b6da84228d4ec7ff72d5e46137/autobloody-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9faa7d6aef985d61f8ed10767ba9d7ef0dcaded0fe1fe78d562970b78c68410",
          "md5": "ee06556e5855a702dc1f89f450d7f93e",
          "sha256": "1dc4c88d8d9b277fff6e64b927563a4836d75d01c4ef529bdc2e1ade93ee0cb8"
        },
        "downloads": -1,
        "filename": "autobloody-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee06556e5855a702dc1f89f450d7f93e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10693,
        "upload_time": "2022-09-16T11:47:25",
        "upload_time_iso_8601": "2022-09-16T11:47:25.097603Z",
        "url": "https://files.pythonhosted.org/packages/d9/fa/a7d6aef985d61f8ed10767ba9d7ef0dcaded0fe1fe78d562970b78c68410/autobloody-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ff547ede5a24c5f5680cfcc211c84f490bd996c9ab1ba8c863c71a96b96edb6",
          "md5": "660bbb600c2f3b520889e26bfe0ae183",
          "sha256": "b5a183aaf22d30c271535789bbe1eb4acc1c5cf183918cc5f703838d32365d61"
        },
        "downloads": -1,
        "filename": "autobloody-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "660bbb600c2f3b520889e26bfe0ae183",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10800,
        "upload_time": "2022-10-23T19:35:26",
        "upload_time_iso_8601": "2022-10-23T19:35:26.426720Z",
        "url": "https://files.pythonhosted.org/packages/3f/f5/47ede5a24c5f5680cfcc211c84f490bd996c9ab1ba8c863c71a96b96edb6/autobloody-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ff547ede5a24c5f5680cfcc211c84f490bd996c9ab1ba8c863c71a96b96edb6",
        "md5": "660bbb600c2f3b520889e26bfe0ae183",
        "sha256": "b5a183aaf22d30c271535789bbe1eb4acc1c5cf183918cc5f703838d32365d61"
      },
      "downloads": -1,
      "filename": "autobloody-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "660bbb600c2f3b520889e26bfe0ae183",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10800,
      "upload_time": "2022-10-23T19:35:26",
      "upload_time_iso_8601": "2022-10-23T19:35:26.426720Z",
      "url": "https://files.pythonhosted.org/packages/3f/f5/47ede5a24c5f5680cfcc211c84f490bd996c9ab1ba8c863c71a96b96edb6/autobloody-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}