{
  "info": {
    "author": "pohmelie",
    "author_email": "multisosnooley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ainject\nSimple asynchronous dependency injector for python.\n\n## Reasons\n* No asynchronous DI with `async`/`await` support.\n* Simplifying things.\n\n## Features\n* Asynchronous instance factories.\n* Asynchronous `__init__` and `__new__` support.\n* Damn simple api.\n\n## Requirements\n* Python 3.5+\n* setuptools >= 30.3.0 (installation only)\n\n## Usage\nAll you have to do is `bind` some factories with some names and\n`inject`/`instance` them where you want.\n``` python\n>>> import ainject\n```\n### Bind and instance\nSimple bind with name:\n``` python\n>>> async def async_factory():\n...     return \"async_value\"\n...\n>>> def sync_factory():\n...     return \"sync_value\"\n>>> ainject.bind(async_factory, name=\"async\")\n>>> await ainject.instance(\"async\")\n'async_value'\n>>> ainject.bind(sync_factory, name=\"sync\")\n>>> await ainject.instance(\"sync\")\n'sync_value'\n>>>\n```\nAs you can see you should always `await` your result, even if factory is actually synchronous.\n\nBind without name:\n``` python\n>>> ainject.bind(async_factory)\n>>> await ainject.instance(async_factory)\n'async_value'\n>>> ainject.bind(sync_factory)\n>>> await ainject.instance(sync_factory)\n'sync_value'\n>>>\n```\nIn this case `name` is `factory` itself. This is equivalent to:\n``` python\n>>> ainject.bind(async_factory, name=async_factory)\n>>>\n```\nSo, you can use any hashable value for name, or even omit it for auto naming.\n\nBy default binding is done in «singleton» mode. This means, that first time instance is accessed it will be cashed and for every next instance request cashed version will be used:\n``` python\n>>> def factory():\n...     return []\n...\n>>> ainject.bind(factory)\n>>> a = await ainject.instance(factory)\n>>> b = await ainject.instance(factory)\n>>> a, b\n([], [])\n>>> a is b\nTrue\n>>>\n```\nFor non-singleton usage pass `singleton=False` to bind method. In this case every instantiation will actually execute factory function:\n``` python\n>>> def factory():\n...     return []\n...\n>>> ainject.bind(factory, singleton=False)\n>>> a = await ainject.instance(factory)\n>>> b = await ainject.instance(factory)\n>>> a, b\n([], [])\n>>> a is b\nFalse\n>>>\n```\n### Inject\nInjecting is done via `inject` decorator:\n``` python\n>>> @ainject.inject(x=factory)\n... def foo(x):\n...     print(x)\n...\n...\n>>> await foo()\n[]\n>>>\n```\nKeep in mind that «name» should be defined before decorator, or just use strings for names. Also, remember, that everything you wrap with `inject` decorator became awaitable:\n``` python\n>>> @ainject.inject(x=\"async\")\n... class A:\n...     def __init__(self, x):\n...         self.x = x\n...\n...\n...\n>>> a = await A()\n>>>\n```\nEven class instantiation. Side-effect of this «magic» is that you can use `async` `__init__` and `async` `__new__`:\n``` python\n>>> @ainject.inject()\n... class A:\n...     async def __new__(self, x):\n...         ...\n...         return super().__new__(self)\n...     async def __init__(self, x):\n...         self.x = x\n...\n...\n...\n>>> a = await A(3)\n```\nAs you can see you can even inject nothing.\n\n## Advanced usage\nMost of time you only need above scenarios, but if you need low-level access to injector, or use more than one injector you should instantiate `Injector` class and use its `bind`, `inject` and `instance` methods. Default injector is global for ainject module and can be accessed as `ainject._injector`. Bindings are stored as dictionary with name-factory pairs in `Injector._bindings`. Instances (singletons) stored as name-instance pairs in `Injector._instances`.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pohmelie/ainject",
    "keywords": "",
    "license": "WTFPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ainject",
    "package_url": "https://pypi.org/project/ainject/",
    "platform": null,
    "project_url": "https://pypi.org/project/ainject/",
    "project_urls": {
      "Homepage": "https://github.com/pohmelie/ainject"
    },
    "release_url": "https://pypi.org/project/ainject/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple asynchronous dependency injector for python",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14369420,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d3cb350f5425ac9818d5bb1f13e34404f595f61641912997006ffc5f0ee825e",
          "md5": "1159d18ad160109f59147ad70f63dbb7",
          "sha256": "b6116feb77396691d2cb68eb315b58e3c87c75726f6f67abadd4400fc813b2fc"
        },
        "downloads": -1,
        "filename": "ainject-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1159d18ad160109f59147ad70f63dbb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3250,
        "upload_time": "2018-03-09T14:33:19",
        "upload_time_iso_8601": "2018-03-09T14:33:19.051412Z",
        "url": "https://files.pythonhosted.org/packages/6d/3c/b350f5425ac9818d5bb1f13e34404f595f61641912997006ffc5f0ee825e/ainject-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc22cefa90d9f4d24256fe0b9481187bef79c7a5c8741ff0d1507212c557e90",
          "md5": "e1300f6bbadd235d7871a07fa0f798de",
          "sha256": "f9c64b2a2eab66eb872f7937191be9eae32d0b037cf01c493641407e3eaafa0c"
        },
        "downloads": -1,
        "filename": "ainject-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1300f6bbadd235d7871a07fa0f798de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3439,
        "upload_time": "2022-07-07T22:41:20",
        "upload_time_iso_8601": "2022-07-07T22:41:20.494382Z",
        "url": "https://files.pythonhosted.org/packages/8f/c2/2cefa90d9f4d24256fe0b9481187bef79c7a5c8741ff0d1507212c557e90/ainject-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0654ea710556dc9e44c4734c97795706eeddc3997781395b5317a38aefe8fe4",
          "md5": "10387e8fd5b74ea8608386e7bd141ea6",
          "sha256": "bb58cb7162169f10b7bcf94440b4a21eab74870f4dcc4cee4fe676020cc7b839"
        },
        "downloads": -1,
        "filename": "ainject-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "10387e8fd5b74ea8608386e7bd141ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3143,
        "upload_time": "2022-07-07T22:41:22",
        "upload_time_iso_8601": "2022-07-07T22:41:22.166859Z",
        "url": "https://files.pythonhosted.org/packages/d0/65/4ea710556dc9e44c4734c97795706eeddc3997781395b5317a38aefe8fe4/ainject-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fc22cefa90d9f4d24256fe0b9481187bef79c7a5c8741ff0d1507212c557e90",
        "md5": "e1300f6bbadd235d7871a07fa0f798de",
        "sha256": "f9c64b2a2eab66eb872f7937191be9eae32d0b037cf01c493641407e3eaafa0c"
      },
      "downloads": -1,
      "filename": "ainject-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1300f6bbadd235d7871a07fa0f798de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3439,
      "upload_time": "2022-07-07T22:41:20",
      "upload_time_iso_8601": "2022-07-07T22:41:20.494382Z",
      "url": "https://files.pythonhosted.org/packages/8f/c2/2cefa90d9f4d24256fe0b9481187bef79c7a5c8741ff0d1507212c557e90/ainject-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0654ea710556dc9e44c4734c97795706eeddc3997781395b5317a38aefe8fe4",
        "md5": "10387e8fd5b74ea8608386e7bd141ea6",
        "sha256": "bb58cb7162169f10b7bcf94440b4a21eab74870f4dcc4cee4fe676020cc7b839"
      },
      "downloads": -1,
      "filename": "ainject-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "10387e8fd5b74ea8608386e7bd141ea6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3143,
      "upload_time": "2022-07-07T22:41:22",
      "upload_time_iso_8601": "2022-07-07T22:41:22.166859Z",
      "url": "https://files.pythonhosted.org/packages/d0/65/4ea710556dc9e44c4734c97795706eeddc3997781395b5317a38aefe8fe4/ainject-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}