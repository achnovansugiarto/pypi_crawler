{
  "info": {
    "author": "Jesse Hoogland",
    "author_email": "jesse@jessehoogland.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "=====================\nSQL Alchemy Authorize\n=====================\n\n.. image:: https://img.shields.io/pypi/v/sqlalchemy_authorize.svg\n        :target: https://pypi.python.org/pypi/sqlalchemy_authorize\n\n.. image:: https://readthedocs.org/projects/sqlalchemy-authorize/badge/?version=latest\n        :target: https://sqlalchemy-authorize.readthedocs.io/en/latest/?version=latest\n        :alt: Documentation Status\n\n\n.. image:: https://pyup.io/repos/github/jqhoogland/sqlalchemy_authorize/shield.svg\n     :target: https://pyup.io/repos/github/jqhoogland/sqlalchemy_authorize/\n     :alt: Updates\n\n\nAn unopinionated extension to enforce field-level access control.\n\nFor Documentation: https://sqlalchemy-authorize.readthedocs.io.\n\nHow to use\n----------\n\nJust insert the appropriate ``PermissionsMixin`` in your model definition. For now,\nthat means the ``OsoPermissionsMixin`` (put it before ``db.Model`` / ``Base``).\n\nLet's look at an easy role-based example.\n\nIn your ``models.py``::\n\n    class User(OsoPermissionsMixin, db.Model):\n        __tablename__ = 'user'\n\n        # ``load_permissions`` is a convenience method for creating a\n        # permissions dictionary of the shape:\n        # {\"role_1\": {\"action_1\": [\"field_1\", \"field_2\", ...], ...}, ...}\n        __permissions__ = OsoPermissionsMixin.load_permissions(\n            read=[\"id\", \"username\"],\n            self=[\n                ([\"create\", \"update\"], [\"username\", \"fullname\"]),\n                \"read\",\n                \"delete\"\n            ],\n            admin=[\n                ([\"create\", \"update\", \"read\", \"delete\"], (\"id\", \"username\", \"fullname\", \"is_admin\")\n            ]\n        )\n\n        id = sa.Column(sa.String(128), primary_key=True)\n        username = sa.Column(sa.String(128), nullable=False)\n        fullname = sa.Column(sa.String(128), nullable=False)\n        ssn = sa.Column(sa.String(10), nullable=True)\n        is_admin = sa.Column(sa.Boolean, default=False)\n\nThen, in your `polar policy`_, write something like::\n\n    has_role(user: User, \"self\": other: User) if user.id == other.id;\n    has_role(user: User, \"admin\": _resource) if user.is_admin;\n\n    # OsoPermissionsMixin provides `.role` and `.authorized_fields`\n    allow_field(user: User, action, resource, field) if\n        role in resource.roles and\n        has_role(user, role, resource) and\n        (f in resource.authorized_fields(role, action) and\n        (f = \"*\" or f = field)); # to match a wildcard\n\n    # ...\n\nFor the full example, check out ``rbac.polar``.\n\nNow, we can start having fun::\n\n    admin = User(id=\"1\", username=\"root\", is_admin=True)\n\n    # This won't work because the current user is anonymous\n    # and has no create permissions on `User.username`\n    john_doe = User(username=\"john_doe\", check_create=True)  # oso.exceptions.ForbiddenError\n\n    with user_set(app, admin): # A helper context that sets `flask.g.user`\n        john_doe = User(username=\"john_doe\", check_create=True)\n        john_doe.id = \"2\"\n\n    john_doe.username, john_doe.id  # ('john_doe', '2')\n\n    with user_set(app, john_doe):\n        john_doe.username = \"doe_john\"\n\n        # This won't work because John only has update permissions on `username` and `fullname`\n        john_doe.id = \"3\"   # oso.exceptions.ForbiddenError\n\n    john_doe.username, john_doe.id # ('doe_john', '2')\n\nFor more details and options, check out ``BasePermissionsMixin`` and ``OsoPermissionsMixin``.\nRationale\n---------\n\n``sqlalchemy_authorize`` is a sqlalchemy extension designed to complement `sqlalchemy-oso`_.\nWhere `sqlalchemy-oso`_ provides authorization at the *row level* in the *data-access layer*\n(it modifies your queries so you pull only authorized entries from your database),\n``sqlalchemy_authorize`` operates at the *field level* in the `ORM layer` (it checks\nwhether users have permission before invoking ``__setattr__``, ``__getattribute__``,\nand ``__delattr__`` on your models).\n\nThe use I originally had in mind was to separate authorization from graphql in\n`Graphene-SQLAlchemy`_: to make it easier to create graphql-queryable models without\nsubstantial authorization boilerplate in the resolvers (`which is not recommended`_).\n\nReally though, the use is broader than both `Graphene-SQLAlchemy`_ and `sqlalchemy-oso`_.\nYes, there a bunch of other libraries for enforcing authorization with SQLAlchemy\n(and you should take a look at them before deciding to use this):\n\n* `Flask-Authorize <https://github.com/bprinty/Flask-Authorize>`_\n* `Flask Principal <https://pythonhosted.org/Flask-Principal/>`_\n* `Flask ACL <https://mikeboers.github.io/Flask-ACL/>`_\n* `Flask RBAC <https://flask-rbac.readthedocs.io/en/latest/>`_\n* `Flask Allows <https://github.com/justanr/flask-allows>`_\n* `Flask Bouncer <https://github.com/bouncer-app/flask-bouncer>`_\n\nStill, I decided to go ahead and throw together this library because:\n\n*    These options are Flask-specific and check permissions via decorators.\n     I wanted an option that isn't opt-in but opt-out, i.e., authorization by default.\n*    Many of these options assume you'll be authorizing at the *row level*, and (especially for the graphql use case) I needed field-level permissions.\n*    Many of the solutions are pretty opinionated about how you should be authorizing (and assume role-based access control).\n     I wanted a less opinionated \"real-world\" solution that lets me pick and choose from `role-, relation- and attribute-based access control`_.\n\nIf any of that resonates with you, glad you're here.\n\nThis is still a very early-stage library, and I discourage you from using it in production\nuntil I've tested in more thoroughly. Let me modify that: you're more than welcome to use it,\nsince, if there is one thing you should be testing anyway, it's authorization.\n\nGo ahead, just be very careful.\n\nMisc\n----\n\n* Free software: MIT license\n* Documentation: https://sqlalchemy-authorize.readthedocs.io.\n\n\nTimeline\n--------\n\n- [ ] More testing.\n- [ ] Flesh out the oso example.\n- [ ] Implement a non-oso role-based extension.\n- [ ] Check row-level create/delete permissions. (This is currently only on the field level).\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`sqlalchemy-oso`: https://github.com/osohq/oso/tree/main/languages/python/sqlalchemy-oso\n.. _`Graphene-SQLAlchemy`: https://docs.graphene-python.org/projects/sqlalchemy/en/latest/\n.. _`which is not recommended`: https://graphql.org/learn/authorization/\n.. _`role-, relation- and attribute-based access control`: https://www.osohq.com/academy\n.. _`polar policy`: https://docs.osohq.com/guides/policies.html\n\n\n=======\nHistory\n=======\n\n0.1.0 (2022-03-16)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jqhoogland/sqlalchemy_authorize",
    "keywords": "sqlalchemy_authorize",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-authorize",
    "package_url": "https://pypi.org/project/sqlalchemy-authorize/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlalchemy-authorize/",
    "project_urls": {
      "Homepage": "https://github.com/jqhoogland/sqlalchemy_authorize"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-authorize/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An unopinionated extension to enforce role-/relation-/attribute-based access control.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13210210,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a2a2da188ac970f2867a18f0204d8de6536f056b06248f911a8429a7c376bfa",
          "md5": "c96c0b7217eee8c332495f0403d6d41c",
          "sha256": "ccd9577e8bd5898c5f425ce65111b1e49348a95d3cf54e7ede987b670a1ff1c7"
        },
        "downloads": -1,
        "filename": "sqlalchemy_authorize-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c96c0b7217eee8c332495f0403d6d41c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 14398,
        "upload_time": "2022-03-17T23:24:52",
        "upload_time_iso_8601": "2022-03-17T23:24:52.779355Z",
        "url": "https://files.pythonhosted.org/packages/9a/2a/2da188ac970f2867a18f0204d8de6536f056b06248f911a8429a7c376bfa/sqlalchemy_authorize-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "267b0ef941d0dbcb2580a877492b0e8eafce3029c3f88542bf4e4a40e5b5f7a4",
          "md5": "61c91c16b2483b044b2307f26949fe01",
          "sha256": "e3c5549591b4a2036bcee0225b19fa62ebc02d8507a856a615d021c4afa78683"
        },
        "downloads": -1,
        "filename": "sqlalchemy_authorize-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61c91c16b2483b044b2307f26949fe01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26572,
        "upload_time": "2022-03-17T23:24:54",
        "upload_time_iso_8601": "2022-03-17T23:24:54.990904Z",
        "url": "https://files.pythonhosted.org/packages/26/7b/0ef941d0dbcb2580a877492b0e8eafce3029c3f88542bf4e4a40e5b5f7a4/sqlalchemy_authorize-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a2a2da188ac970f2867a18f0204d8de6536f056b06248f911a8429a7c376bfa",
        "md5": "c96c0b7217eee8c332495f0403d6d41c",
        "sha256": "ccd9577e8bd5898c5f425ce65111b1e49348a95d3cf54e7ede987b670a1ff1c7"
      },
      "downloads": -1,
      "filename": "sqlalchemy_authorize-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c96c0b7217eee8c332495f0403d6d41c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 14398,
      "upload_time": "2022-03-17T23:24:52",
      "upload_time_iso_8601": "2022-03-17T23:24:52.779355Z",
      "url": "https://files.pythonhosted.org/packages/9a/2a/2da188ac970f2867a18f0204d8de6536f056b06248f911a8429a7c376bfa/sqlalchemy_authorize-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "267b0ef941d0dbcb2580a877492b0e8eafce3029c3f88542bf4e4a40e5b5f7a4",
        "md5": "61c91c16b2483b044b2307f26949fe01",
        "sha256": "e3c5549591b4a2036bcee0225b19fa62ebc02d8507a856a615d021c4afa78683"
      },
      "downloads": -1,
      "filename": "sqlalchemy_authorize-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61c91c16b2483b044b2307f26949fe01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26572,
      "upload_time": "2022-03-17T23:24:54",
      "upload_time_iso_8601": "2022-03-17T23:24:54.990904Z",
      "url": "https://files.pythonhosted.org/packages/26/7b/0ef941d0dbcb2580a877492b0e8eafce3029c3f88542bf4e4a40e5b5f7a4/sqlalchemy_authorize-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}