{
  "info": {
    "author": "Patrick Senti",
    "author_email": "patrick.senti@omegaml.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "minibatch - Python Stream Processing for humans\n===============================================\n\n|build badge|\n\n.. |build badge| image:: https://github.com/omegaml/minibatch/workflows/Python%20package/badge.svg\n.. _CONTRIBUTING.md: https://github.com/omegaml/minibatch/blog/master/CONTRIBUTING.md\n\nDependencies:\n    * a running MongoDB accessible to minibatch\n    * Python 3.x\n    * see extras & optional dependencies below for specific requirements\n\nminibatch provides a straight-forward, Python-native approach to mini-batch streaming and complex-event\nprocessing that is easily scalable. Streaming primarily consists of\n\n* a producer, which is some function inserting data into the stream\n* a consumer, which is some function retrieving data from the stream\n* transform and windowing functions to process the data in small batches and in parallel\n\nminibatch is an integral part of `omega|ml <https://github.com/omegaml/omegaml>`_, however also works independently. omega|ml is the Python DataOps and MLOps\nplatform for humans.\n\nFeatures\n--------\n\n* native Python producers and consumers\n* includes three basic Window strategies: CountWindow, FixedTimeWindow, RelaxedTimeWindow\n* extensible Window strategies by subclassing and overriding a few methods\n* scalable, persistent streams - parallel inserts, parallel processing of windows\n\nA few hightlights\n\n* creating a stream and appending data is just 2 lines of code\n* producer and consumer stream code runs anywhere\n* no dependencies other than mongoengine, pymongo\n* extensible sources and sinks (already available: Kafka, MQTT, MongoDB collections, omega|ml datasets)\n* a fully functional streaming web app can be built in less than 15 lines of code (using Flask)\n\nWhy is it called minibatch? Because it focuses on getting things done by using existing\ntechnology, and making it easy to use this techonlogy. It may be minimalistic in approach, but maximises results.\n\nQuick start\n-----------\n\n1. Install and setup\n\n   .. code:: python\n\n      $ pip install minibatch\n      $ docker run -d -p 27017:27017 mongo\n\n   See extras & optional dependencies below to select specific packages according\n   to your deployment needs, e.g. for MQTT, Kafka, omega|ml\n\n2. Create a stream producer or attach to a source\n\n   .. code:: python\n\n        import minibatch as mb\n        stream = mb.stream('test')\n        for i in range(100):\n            stream.append({'date': datetime.datetime.utcnow().isoformat()})\n            sleep(.5)\n\n   Currently there is support for Kafka and MQTT sources. However\n   arbitrary other sources can be added.\n\n   .. code:: python\n\n      from minibatch.contrib.kafka import KafkaSource\n      source = KafkaSource('topic', urls=['kafka:port'])\n      stream.attach(source)\n\n\n3. Consume the stream\n\n   .. code:: python\n\n        from minibatch import streaming\n\t    @streaming('test', size=2, keep=True)\n\t    def myprocess(window):\n\t        print(window.data)\n\t    return window\n\n\t    =>\n\t    [{'date': '2018-04-30T20:18:22.918060'}, {'date': '2018-04-30T20:18:23.481320'}]\n\t    [{'date': '2018-04-30T20:18:24.041337'}, {'date': '2018-04-30T20:18:24.593545'}\n\t    ...\n\n   `myprocess` is called for every N-tuple of items (`size=2`)  appended to the stream by the producer(s).\n   The frequency is determined by the emitter strategy. This can be configured or changed for a custom\n   emitter strategy, as shown in the next step.\n\n4. Configure the emitter strategy\n\n   Note the `@streaming` decorator. It implements a blocking consumer that delivers batches\n   of data according to some strategy implemented by a WindowEmitter. Currently `@streaming`\n   provides the following interface:\n\n    * `size=N` - uses the :code:`CountWindow` emitter\n    * `interval=SECONDS` - uses the :code:`RelaxedTimeWindow` emitter\n    * `interval=SECONDS, relaxed=False` - uses the :code:`FixedTimeWindow` emitter\n    * `emitter=CLASS:WindowEmitter` - uses the given subclass of a :code:`WindowEmitter`\n    * `workers=N` - set the number of workers to process the decorated function, defaults to number of CPUs\n    * `executor=CLASS:Executor` - the asynchronous executor to use, defaults to :code:`concurrent.futures.ProcessPoolExecutor`\n\n\n5. Write a flask app as a streaming source\n\n   This is a simple helloworld-style streaming application that is fully\n   functional and distributable.\n\n   .. code:: python\n\n       # app.py\n       def consumer(url):\n          @streaming('test-stream', url=url)\n          def processing(window):\n             ... # whatever processing you need to do\n\n       if __name__ == '__main__':\n           app = StreamingApp()\n           app.start_streaming(consumer)\n           app.run()\n\n       # run the app (check status at http://localhost:5000/status)\n       $ python app.py\n\n       # in an other process, stream data\n       $ python\n       [] import minibatch as mb\n          stream = mb.stream('test-stream')\n          stream.append(dict(data='foobar')\n\n       Note there is no UI in this example, however the data is processed as\n       it comes in. To add a UI, specify using @app.route, as for any flask app,\n       write the processed data into a sink that the UI can access. For a\n       full example see help(minibatch.contrib.apps.omegaml.StreamingApp)\n\n\n\nStream sources\n--------------\n\nCurrently provided in :code:`minibatch.contrib`:\n\n* KafkaSource - attach a stream to a Apache Kafka topic\n* MQTTSource - attach to an MQTT broker\n* MongoSource - attach to a MongoDB collection\n* DatasetSource - attach to a omega|ml dataset\n* CeleryEventSource - attach to a Celery app event dispatcher\n\nStream sources are arbitrary objects that support the :code:`stream()`\nmethod, as follows.\n\n.. code:: python\n\n    class SomeSource:\n        ...\n        def stream(self, stream):\n            for data in source:\n                stream.append(data)\n\n\nStream Sinks\n------------\n\nThe result of a stream can be forwarded to a sink. Currently\nprovided sinks in :code:`minibatch.contrib` are:\n\n* KafkaSink - forward messagess to a Apache Kafka topic\n* MQTTSink  - forward messages to an MQTT broker\n* MongoSink - forward messages to a MongoDB collection\n* DatasetSink - write to a omega|ml dataset\n\nStream sinks are arbitrary objects that support the :code:`put()`\nmethod, as follows.\n\n.. code:: python\n\n    class SomeSink:\n        ...\n        def put(self, message):\n            sink.send(message)\n\n\nWindow emitters\n---------------\n\nminibatch provides the following window emitters out of the box:\n\n* :code:`CountWindow` - emit fixed-sized windows. Waits until at least *n* messages are\n   available before emitting a new window\n* :code:`FixedTimeWindow`- emit all messages retrieved within specific, time-fixed windows of\n   a given interval of *n* seconds. This guarantees that messages were received in the specific\n   window.\n* :code:`RelaxedTimeWindow` - every interval of *n* seconds emit all messages retrieved since\n   the last window was created. This does not guarantee that messages were received in a given\n   window.\n\n\nImplementing a custom WindowEmitter\n-----------------------------------\n\nCustom emitter strategies are implemented as a subclass to :code:`WindowEmitter`. The main methods\nto implement are\n\n* :code:`window_ready` - returns the tuple :code:`(ready, data)`, where ready is True if there is data\n     to emit\n* :code:`query` - returns the data for the new window. This function retrieves the :code:`data` part\n     of the return value of :code:`window_ready`\n\nSee the API reference for more details.\n\n.. code:: python\n\n    class SortedWindow(WindowEmitter):\n        \"\"\"\n        sort all data by value and output only multiples of 2 in batches of interval size\n        \"\"\"\n        def window_ready(self):\n            qs = Buffer.objects.no_cache().filter(processed=False)\n            data = []\n            for obj in sorted(qs, key=lambda obj : obj.data['value']):\n                if obj.data['value'] % 2 == 0:\n                    data.append(obj)\n                    if len(data) >= self.interval:\n                        break\n            self._data = data\n            return len(self._data) == self.interval, ()\n\n        def query(self, *args):\n            return self._data\n\n\nWhat is streaming and how does minibatch implement it?\n------------------------------------------------------\n\n*Concepts*\n\nInstead of directly connection producers and consumers, a producer sends messages to a stream. Think\nof a stream as an endless buffer, or a pipeline, that takes input from many producers on one end, and\noutputs messages to a consumer on the other end. This transfer of messages happens asynchronously, that\nis the producer can send messages to the stream independent of whether the consumer is ready to receive, and the  consumer can take messages from the stream independent of whether the producer is ready to send.\n\nUnlike usual asynchronous messaging, however, we want the consumer to receive messages in small batches to optimize throughput. That is, we want the pipeline to *emit* messages only subject to some criteria\nof grouping messages, where each group is called a *mini-batch*. The function that determines whether the\nbatching criteria is met (e.g. time elapsed, number of messages in the pipeline) is called *emitter strategy*,\nand the output it produces is called *window*.\n\nThus in order to connect producers and consumers we need the following parts to our streaming system:\n\n* a :code:`Stream`, keeping metadata for the stream such as its name and when it was created, last read etc.\n* a :code:`Buffer` acting as the buffer where messages sent by producers are stored until the emitting\n* a :code:`WindowEmitter` implementing the emitter strategy\n* a :code:`Window` representing the output produced by the emitter strategy\n\n.. note::\n\n    The producer accepts input from some external system, say an MQTT end point. The producer's responsibility is to enter the data into the streaming buffer.\n    The consumer uses an emitter strategy to produce a Window of data that is then forwarded to the user's processing code.\n\n*Implementation*\n\nminibatch uses MongoDB to implement Streams, Buffers and Windows. Specifically, the following collections are used:\n\n* `stream` - represents instances of `Stream`, each document is a stream with a unique name\n* `buffer` - a virtually endless buffer for all streams in the system, each document contains one message of a stream\n* `window`- each document represents the data as emitted by the particular emitter strategy\n\nBy default messages go through the following states\n\n1. upon append by a producer: message is inserted into `buffer`, with flag `processed = False`\n2. upon being seen by an emitter: message is marked as `processed = True`\n3. upon being emitted: message is copied to `window`, marked `processed = False` (in Window)\n4. upon emit success (no exceptions raised by the emit function): message is deleted from `buffer`\n   and marked `processed = True` in `window`\n\nNotes:\n\n* emitters typically act on a collection of messages, that is steps 2 - 4 are applied to more\n  than one message at a time\n\n* to avoid deleting messages from the buffer, pass `@streaming(..., keep=True)`\n\n* custom emitters can modify the behavior of both creating windows and handling the buffer by\n  overriding the `process()`, `emit()` and `commit()` methods for each of the above steps\n  2/3/4, respectively.\n\nExtras & optional dependencies\n------------------------------\n\nminibatch provides the following pip install extras, which come with some\nadditional dependencies. Extras are installed by running\n\n.. code:: bash\n\n    $ pip install minibatch[<extra>|all]\n\nAvailable extras are:\n\n* :code:`apps` - adds StreamingApp for easy development & deployment of producers & consumers\n* :code:`kafka` - to work with Kafka as a source or a sink\n* :code:`mqtt` - to work with an MQTT broker as a source or a sink\n* :code:`mongodb` - to work with MongoDB as a source or a sink\n* :code:`omegaml` - to work with omega|ml datasets as a source or a sink\n* :code:`all` - all of the above\n* :code:`dev` - all of the above plus a few development packages\n\n\nFurther development\n-------------------\n\nHere are a couple of ideas to extend minibatch. Contributions are welcome.\n\n* more examples, following typical streaming examples like word count, filtering\n* more emitter strategies, e.g. for sliding windows\n* performance testing, benchmarking\n* distributed processing of windows via distributed framework such as celery, ray, dask\n* extend emitters by typical stream operations e.g. to support operations like count, filter, map, groupby, merge, join\n* add other storage backends (e.g. Redis, or some Python-native in-memory db that provides network access and an easy to use ORM layer, like mongoengine does for MongoDB)\n\nContributing\n------------\n\nWe welcome any contributions - examples, issues, bug reports, documentation, code. Please see `CONTRIBUTING.md`_\nfor details. \n\nLicense\n-------\n\nApache 2.0 licensed with \"No Sell, Consulting Yes\" clause. \nSee LICENSE and LICENSE-NOSELLCLAUSE files.\n\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/omegaml/minibatch",
    "keywords": "",
    "license": "Apache 2.0 + \"No Sell, Consulting Yes\" License Condition",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minibatch",
    "package_url": "https://pypi.org/project/minibatch/",
    "platform": null,
    "project_url": "https://pypi.org/project/minibatch/",
    "project_urls": {
      "Homepage": "http://github.com/omegaml/minibatch"
    },
    "release_url": "https://pypi.org/project/minibatch/0.5.0/",
    "requires_dist": [
      "mongoengine (~=0.24.1)",
      "dill",
      "kafka-python (==1.4.7) ; extra == 'all'",
      "paho-mqtt (==1.5.0) ; extra == 'all'",
      "pymongo (>=3.2.2) ; extra == 'all'",
      "dnspython ; extra == 'all'",
      "flask ; extra == 'all'",
      "dash ; extra == 'all'",
      "flask ; extra == 'apps'",
      "dash ; extra == 'apps'",
      "kafka-python (==1.4.7) ; extra == 'dev'",
      "paho-mqtt (==1.5.0) ; extra == 'dev'",
      "pymongo (>=3.2.2) ; extra == 'dev'",
      "dnspython ; extra == 'dev'",
      "omegaml[client] ; extra == 'dev'",
      "nose ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "bumpversion ; extra == 'dev'",
      "kafka-python (==1.4.7) ; extra == 'kafka'",
      "pymongo (>=3.2.2) ; extra == 'mongodb'",
      "dnspython ; extra == 'mongodb'",
      "paho-mqtt (==1.5.0) ; extra == 'mqtt'",
      "pymongo (>=3.2.2) ; extra == 'omegaml'",
      "dnspython ; extra == 'omegaml'",
      "omegaml[client] ; extra == 'omegaml'"
    ],
    "requires_python": "",
    "summary": "Python stream processing for humans",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14935680,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d751a5b8bf38af0e323c64d452f009f4054ade82cf55ad3af370a49e06769e87",
          "md5": "afbe3768b8c485303e408e58959d44e3",
          "sha256": "b53983cb19c78f146743391104a2904e36a2f92cd00f9ee885e18ce3acd73b88"
        },
        "downloads": -1,
        "filename": "minibatch-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afbe3768b8c485303e408e58959d44e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6204,
        "upload_time": "2020-01-30T10:52:13",
        "upload_time_iso_8601": "2020-01-30T10:52:13.224764Z",
        "url": "https://files.pythonhosted.org/packages/d7/51/a5b8bf38af0e323c64d452f009f4054ade82cf55ad3af370a49e06769e87/minibatch-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a34d255685d3ef84c23afa6e4bb99f5aa2c0d03ffcb85dac68d6edd43f177689",
          "md5": "605e2b5e81274ad23f13ec644e589375",
          "sha256": "5bfe2d6bbc5d8c0f3548563ce129886f0b0f5544d0521cc958edbfd0c723d2c8"
        },
        "downloads": -1,
        "filename": "minibatch-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "605e2b5e81274ad23f13ec644e589375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5021,
        "upload_time": "2020-01-30T10:52:15",
        "upload_time_iso_8601": "2020-01-30T10:52:15.022342Z",
        "url": "https://files.pythonhosted.org/packages/a3/4d/255685d3ef84c23afa6e4bb99f5aa2c0d03ffcb85dac68d6edd43f177689/minibatch-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2775809ae7aa7df1bf0468e597cc3cb4a9d6c54543e0c26f68368fdcc56dd835",
          "md5": "86731d9e0a7bff4dff8d2ddbcccb9627",
          "sha256": "2136667ce13ba7dbcaf80ee198ea59807d98cd14241c940cf7b26d027d12eef3"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86731d9e0a7bff4dff8d2ddbcccb9627",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9473,
        "upload_time": "2020-01-30T11:31:54",
        "upload_time_iso_8601": "2020-01-30T11:31:54.797158Z",
        "url": "https://files.pythonhosted.org/packages/27/75/809ae7aa7df1bf0468e597cc3cb4a9d6c54543e0c26f68368fdcc56dd835/minibatch-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ab793cdcbb6dbba9767c78d8c4ed7a2b4d9f50f4117e8e688757de18ec52e8a",
          "md5": "20907dd3a4cc11b6f3b92166960c8882",
          "sha256": "cf0b10b1bc642f960a0099ec99b49b7f1a755b03de1d7fc8914ffc9460dcb3b5"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "20907dd3a4cc11b6f3b92166960c8882",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8480,
        "upload_time": "2020-01-30T11:31:56",
        "upload_time_iso_8601": "2020-01-30T11:31:56.720047Z",
        "url": "https://files.pythonhosted.org/packages/8a/b7/93cdcbb6dbba9767c78d8c4ed7a2b4d9f50f4117e8e688757de18ec52e8a/minibatch-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eb13834851246dc1a1ea1a6ea65fd0dbd62a5950fc54bf231d61b51e23126f2",
          "md5": "fca756b03ea09cf071d8f4e34403e635",
          "sha256": "5cb44831fbf3d1449bc2a07faa00af3ea375562766789dc12fe9c36b7e54fc11"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.2rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fca756b03ea09cf071d8f4e34403e635",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9515,
        "upload_time": "2020-01-30T11:31:29",
        "upload_time_iso_8601": "2020-01-30T11:31:29.499562Z",
        "url": "https://files.pythonhosted.org/packages/0e/b1/3834851246dc1a1ea1a6ea65fd0dbd62a5950fc54bf231d61b51e23126f2/minibatch-0.2.2rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cdfcbb1511ff5bcb4261b0c2fdc17235baa243962e686e520d5eb922bb36f3f",
          "md5": "5b3c73dfddc21beb861bc4e0444805af",
          "sha256": "8722863c388bdd6802b95ee52911c494d1027b2b3299d1e66938a791e9a80ab3"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.2rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b3c73dfddc21beb861bc4e0444805af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8481,
        "upload_time": "2020-01-30T11:31:31",
        "upload_time_iso_8601": "2020-01-30T11:31:31.549018Z",
        "url": "https://files.pythonhosted.org/packages/3c/df/cbb1511ff5bcb4261b0c2fdc17235baa243962e686e520d5eb922bb36f3f/minibatch-0.2.2rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7562d206bbea6bf819abb007fe643bbbf29095b32ba8afc18d78d5e45c21cbb5",
          "md5": "7628e1fa00c8abdc497a56bec6a5650e",
          "sha256": "fc8cffade0d41005a655404a6b97f15debf055285022139f1e47df28c69e3df7"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7628e1fa00c8abdc497a56bec6a5650e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11033,
        "upload_time": "2020-02-02T10:43:58",
        "upload_time_iso_8601": "2020-02-02T10:43:58.211660Z",
        "url": "https://files.pythonhosted.org/packages/75/62/d206bbea6bf819abb007fe643bbbf29095b32ba8afc18d78d5e45c21cbb5/minibatch-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae5a79de1e8eed5ce0274cae2af6cadad7713c1af777448d27208f8902d3ee63",
          "md5": "5a5b4184b304c93e649aa64806762e68",
          "sha256": "516a676a676ee8ca2a0118b974b20bf2e462cc77564ba221f40dc2cf6f31fef7"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5a5b4184b304c93e649aa64806762e68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13225,
        "upload_time": "2020-02-02T10:44:00",
        "upload_time_iso_8601": "2020-02-02T10:44:00.160165Z",
        "url": "https://files.pythonhosted.org/packages/ae/5a/79de1e8eed5ce0274cae2af6cadad7713c1af777448d27208f8902d3ee63/minibatch-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be19fcef634d7a17875a13be314c5bfab4a476050878db52b7e61c2ba346aa6",
          "md5": "06920946e0dafb41f36eaa6336e0c6b8",
          "sha256": "8e4cc6a978618095eca6e6be835339fa9cdf906338763e05b8a32419e4508550"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06920946e0dafb41f36eaa6336e0c6b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31683,
        "upload_time": "2020-03-25T22:51:50",
        "upload_time_iso_8601": "2020-03-25T22:51:50.999867Z",
        "url": "https://files.pythonhosted.org/packages/3b/e1/9fcef634d7a17875a13be314c5bfab4a476050878db52b7e61c2ba346aa6/minibatch-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "524eaa9bf539141290ddf15cfaf73392a9103589cdd029a7266ccf3832565501",
          "md5": "f6246d8fc29eda0dcfd190710bb8d251",
          "sha256": "46e029094e3dabc3c9bcc73fcc4ea8e75340975ad07643b6e77eba4ac2a664d0"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f6246d8fc29eda0dcfd190710bb8d251",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26874,
        "upload_time": "2020-03-25T22:51:52",
        "upload_time_iso_8601": "2020-03-25T22:51:52.349943Z",
        "url": "https://files.pythonhosted.org/packages/52/4e/aa9bf539141290ddf15cfaf73392a9103589cdd029a7266ccf3832565501/minibatch-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ee712e8c3a62a17f480a91743e4ba0000713f98564ee5e9ea5c6ea9d21eafc6",
          "md5": "39c18890d11668a4733f373d57c9b4ce",
          "sha256": "132284b335260d67b674b6c005e3fc305b61da2bda00202f295f42346b3fe9dc"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39c18890d11668a4733f373d57c9b4ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32145,
        "upload_time": "2020-06-30T13:16:16",
        "upload_time_iso_8601": "2020-06-30T13:16:16.735513Z",
        "url": "https://files.pythonhosted.org/packages/8e/e7/12e8c3a62a17f480a91743e4ba0000713f98564ee5e9ea5c6ea9d21eafc6/minibatch-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eefd99426e628a88f7e27422111a4dd9ff7ed8b423b8e434ff7f8922e7fd2e2c",
          "md5": "cfbf29421cd335676ffdf40a6a47a4e1",
          "sha256": "97418604a20676524bf9066bfd24f213b0d5247886e640cf0f54089b0f6166ff"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cfbf29421cd335676ffdf40a6a47a4e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27334,
        "upload_time": "2020-06-30T13:16:18",
        "upload_time_iso_8601": "2020-06-30T13:16:18.756041Z",
        "url": "https://files.pythonhosted.org/packages/ee/fd/99426e628a88f7e27422111a4dd9ff7ed8b423b8e434ff7f8922e7fd2e2c/minibatch-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b27b662b599b4712ebd9ff976cd39dfb7fd41e19085887543ce9d179ded818ae",
          "md5": "50b265bf9442d0c4442cb5f0768cfc75",
          "sha256": "788e493315d31e9c716f257e8b858ebe95c81fa4a5be79544797d24ecc73bb2b"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50b265bf9442d0c4442cb5f0768cfc75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34662,
        "upload_time": "2020-07-01T21:46:17",
        "upload_time_iso_8601": "2020-07-01T21:46:17.422783Z",
        "url": "https://files.pythonhosted.org/packages/b2/7b/662b599b4712ebd9ff976cd39dfb7fd41e19085887543ce9d179ded818ae/minibatch-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dc0660e5ccb0210ed24f62a9fc8ccafa1a5eeb01c116dcdf6cd03a3b72d3478",
          "md5": "b34b8c388e255c340884b41e6b71ed1f",
          "sha256": "dda07a799254b04dbbca1dacd48af98929c245189fd84d956e0e61908c39bad1"
        },
        "downloads": -1,
        "filename": "minibatch-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b34b8c388e255c340884b41e6b71ed1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29673,
        "upload_time": "2020-07-01T21:46:19",
        "upload_time_iso_8601": "2020-07-01T21:46:19.040662Z",
        "url": "https://files.pythonhosted.org/packages/0d/c0/660e5ccb0210ed24f62a9fc8ccafa1a5eeb01c116dcdf6cd03a3b72d3478/minibatch-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d0b9e2bf2bcbdc6a39e9322cfcbe608bebe58a1935be6a1edc896438523c4d6",
          "md5": "c9ecd0f07a3d99d636fa70ed8921b8bc",
          "sha256": "8bf58bd443e55f9cf9597d160ce94edb14182129c241f9604c24a42edd3c6853"
        },
        "downloads": -1,
        "filename": "minibatch-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9ecd0f07a3d99d636fa70ed8921b8bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36620,
        "upload_time": "2020-09-29T12:35:54",
        "upload_time_iso_8601": "2020-09-29T12:35:54.853033Z",
        "url": "https://files.pythonhosted.org/packages/2d/0b/9e2bf2bcbdc6a39e9322cfcbe608bebe58a1935be6a1edc896438523c4d6/minibatch-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c18bdbbb35b4d29acd367be037a31e13187b9e5eba76bddd638efcd0e6a289b8",
          "md5": "79a3d67a948325a9766269ef5b3f0b8b",
          "sha256": "04b0a53bebda64f58f969ffc82b93cc6a49782c24b47297d972448db14cf0e08"
        },
        "downloads": -1,
        "filename": "minibatch-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "79a3d67a948325a9766269ef5b3f0b8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32442,
        "upload_time": "2020-09-29T12:35:56",
        "upload_time_iso_8601": "2020-09-29T12:35:56.776994Z",
        "url": "https://files.pythonhosted.org/packages/c1/8b/dbbb35b4d29acd367be037a31e13187b9e5eba76bddd638efcd0e6a289b8/minibatch-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bf4ae6754b48c6b05e8bb7031722a8462f9ea1d44fa7a2ca0f8fa7d7f8bcd78",
          "md5": "85f283709c8ef64d2edd06aa6aac2069",
          "sha256": "90fb6f76b23242004a2f37e3637b00130fc4531ae61d823c4ea2315a8fe077bb"
        },
        "downloads": -1,
        "filename": "minibatch-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85f283709c8ef64d2edd06aa6aac2069",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38715,
        "upload_time": "2021-01-28T16:08:59",
        "upload_time_iso_8601": "2021-01-28T16:08:59.354513Z",
        "url": "https://files.pythonhosted.org/packages/0b/f4/ae6754b48c6b05e8bb7031722a8462f9ea1d44fa7a2ca0f8fa7d7f8bcd78/minibatch-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b634e4b83ab164fb470782d58f282b288e1d77d227a0c8816443bfe35ac0dfb",
          "md5": "f1651af43f8db7352e96807accdaac7d",
          "sha256": "a7407967e637fdf44149b70866c99b7dd8c204fa486de5281da6e111acfcb173"
        },
        "downloads": -1,
        "filename": "minibatch-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1651af43f8db7352e96807accdaac7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33953,
        "upload_time": "2021-01-28T16:09:01",
        "upload_time_iso_8601": "2021-01-28T16:09:01.581392Z",
        "url": "https://files.pythonhosted.org/packages/9b/63/4e4b83ab164fb470782d58f282b288e1d77d227a0c8816443bfe35ac0dfb/minibatch-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a36134087a5d30c2def2c20a1b060bf083e13be8cda1337605072212bb7d682",
          "md5": "aad7d637858296ac996eb0bcf67c9f3c",
          "sha256": "318d2f0c0347cccbfcb6f5fe4fac4dbb2e3916fd2d9dee196245ff746399aa2c"
        },
        "downloads": -1,
        "filename": "minibatch-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aad7d637858296ac996eb0bcf67c9f3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44298,
        "upload_time": "2021-10-26T16:54:16",
        "upload_time_iso_8601": "2021-10-26T16:54:16.169336Z",
        "url": "https://files.pythonhosted.org/packages/8a/36/134087a5d30c2def2c20a1b060bf083e13be8cda1337605072212bb7d682/minibatch-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "029d8d910282acbe25b72005a482be3c0ed7189b5785b11aff37afe531f985d0",
          "md5": "b41e7984fa65c2d38d1e40fcf1cf0327",
          "sha256": "cb939e893a925c38a3c9e8a1e107fe616724d4ca82a07d07779f16493c8c6418"
        },
        "downloads": -1,
        "filename": "minibatch-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b41e7984fa65c2d38d1e40fcf1cf0327",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38983,
        "upload_time": "2021-10-26T16:54:18",
        "upload_time_iso_8601": "2021-10-26T16:54:18.860264Z",
        "url": "https://files.pythonhosted.org/packages/02/9d/8d910282acbe25b72005a482be3c0ed7189b5785b11aff37afe531f985d0/minibatch-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15ff37a1b7716a1f6f7c9491638b8fdddaf964ba9992aef1b1e4e5217fbd6f67",
          "md5": "0c8098678f1801febe03e998dcf84f4d",
          "sha256": "7156c1df2a604313c9eb184373182354a80f2ac0898841908ce331ee738177a8"
        },
        "downloads": -1,
        "filename": "minibatch-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c8098678f1801febe03e998dcf84f4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44776,
        "upload_time": "2022-08-30T13:44:05",
        "upload_time_iso_8601": "2022-08-30T13:44:05.832886Z",
        "url": "https://files.pythonhosted.org/packages/15/ff/37a1b7716a1f6f7c9491638b8fdddaf964ba9992aef1b1e4e5217fbd6f67/minibatch-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cbf129ecdc13c5dd299c6772fac56eb3b219e709e8ef4b6d4b782f05c6d74d7",
          "md5": "60ddc1467344ea4cdec53b483f4d3a49",
          "sha256": "18e789cb5f5958bc7f440f89e2287851676b7e59c506e437a522872e1dbee84b"
        },
        "downloads": -1,
        "filename": "minibatch-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60ddc1467344ea4cdec53b483f4d3a49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39377,
        "upload_time": "2022-08-30T13:44:08",
        "upload_time_iso_8601": "2022-08-30T13:44:08.193107Z",
        "url": "https://files.pythonhosted.org/packages/1c/bf/129ecdc13c5dd299c6772fac56eb3b219e709e8ef4b6d4b782f05c6d74d7/minibatch-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15ff37a1b7716a1f6f7c9491638b8fdddaf964ba9992aef1b1e4e5217fbd6f67",
        "md5": "0c8098678f1801febe03e998dcf84f4d",
        "sha256": "7156c1df2a604313c9eb184373182354a80f2ac0898841908ce331ee738177a8"
      },
      "downloads": -1,
      "filename": "minibatch-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c8098678f1801febe03e998dcf84f4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44776,
      "upload_time": "2022-08-30T13:44:05",
      "upload_time_iso_8601": "2022-08-30T13:44:05.832886Z",
      "url": "https://files.pythonhosted.org/packages/15/ff/37a1b7716a1f6f7c9491638b8fdddaf964ba9992aef1b1e4e5217fbd6f67/minibatch-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cbf129ecdc13c5dd299c6772fac56eb3b219e709e8ef4b6d4b782f05c6d74d7",
        "md5": "60ddc1467344ea4cdec53b483f4d3a49",
        "sha256": "18e789cb5f5958bc7f440f89e2287851676b7e59c506e437a522872e1dbee84b"
      },
      "downloads": -1,
      "filename": "minibatch-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "60ddc1467344ea4cdec53b483f4d3a49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39377,
      "upload_time": "2022-08-30T13:44:08",
      "upload_time_iso_8601": "2022-08-30T13:44:08.193107Z",
      "url": "https://files.pythonhosted.org/packages/1c/bf/129ecdc13c5dd299c6772fac56eb3b219e709e8ef4b6d4b782f05c6d74d7/minibatch-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}