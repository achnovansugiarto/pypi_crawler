{
  "info": {
    "author": "Mauri Mustonen",
    "author_email": "kazooiebombchu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# asm2cfg\n![CI status](https://github.com/Kazhuu/asm2cfg/actions/workflows/ci.yml/badge.svg)\n[![codecov](https://codecov.io/gh/Kazhuu/asm2cfg/branch/main/graph/badge.svg?token=ZHLOJO8Q3V)](https://codecov.io/gh/Kazhuu/asm2cfg)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/Kazhuu/asm2cfg.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Kazhuu/asm2cfg/alerts/)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/Kazhuu/asm2cfg.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Kazhuu/asm2cfg/context:python)\n\nPython command-line tool and GDB extension to view and save x86, ARM and objdump\nassembly files as control-flow graph (CFG) pdf files. From GDB debugging session\nuse `viewcfg` command to view CFG and use `savecfg` command to save it to the\npdf file.\n\n<p align=\"center\">\n  <img src=\"https://github.com/Kazhuu/asm2cfg/blob/main/images/example.png?raw=true\" />\n</p>\n\nProgram has been developed to support X86, ARM and objdump assembly outputs.\nProgram is mostly tested with x86 assembly. ARM and objdump formats might not be\nfully supported. If you have any suggestions or find bugs, please open an issue\nor create a pull request. If you want to contribute, check\n[Development](#development) how to get started.\n\n## Table of Content\n\n<!-- vim-markdown-toc GFM -->\n\n* [Install](#install)\n* [Usage From GDB](#usage-from-gdb)\n* [Usage as Standalone](#usage-as-standalone)\n  * [Knowing Function Name](#knowing-function-name)\n  * [Disassemble Function](#disassemble-function)\n  * [Draw CFG](#draw-cfg)\n  * [Examples](#examples)\n* [Development](#development)\n  * [Python Environment](#python-environment)\n  * [Testing](#testing)\n  * [Code Linting](#code-linting)\n  * [Command-Line Interface](#command-line-interface)\n  * [GDB Integration](#gdb-integration)\n  * [Current Development Goals](#current-development-goals)\n\n<!-- vim-markdown-toc -->\n\n## Install\n\nProject can be installed with pip\n\n```\npip install asm2cfg\n```\n\nTo be able to view the dot files from GDB. External dot viewer is required. For\nthis purpose [xdot](https://pypi.org/project/xdot/) can be used for example. Any\nother dot viewer will also do. To install this on Debian based distro run\n\n```\nsudo apt install xdot\n```\n\nOr Arch based\n\n```\nsudo pacman -S xdot\n```\n\nTo add extension to GDB you need to source the pip installed plugin to it. To\nfind where pip placed GDB extension run `which gdb_asm2cfg` or in case if you\nuse pyenv use `pyenv which gdb_asm2cfg`. Copy the path to the clipboard.\n\nThen in you home directory if not already add `.gdbinit` file\nand place following line in it and replace path from the earlier step.\n\n```\nsource <path-from-earlier>\n```\n\nFor example in my Linux machine line end up to be\n\n```\nsource ~/.local/bin/gdb_asm2cfg.py\n```\n\nNow when you start GDB no errors should be displayed and you are ready to go.\n\n## Usage From GDB\n\nIn GDB session this extension provides command `viewcfg` to view CFG with\nexternal dot viewer. Command `savecfg` saves the CFG to pdf file to current\nworking directory with same name as the function being dumped. Both commands\ndisassemble the current execution frame/function when the command is issued. To\nsee help for these commands use `help` command like `help viewcfg`.\n\nFor example let's view main function from you favorite non-stripped executable.\nFirst run GDB until main function\n\n```\ngdb -ex 'b main' -ex 'run' <executable>\n```\n\nNow run `viewcfg` to view CFG as a dot graph with external editor. Or run `savecfg`\nto save CFG to pdf file named `main.pdf` to current working directory. If\nfunction is stripped then memory address of the function will used as a name\ninstead. For example `0x555555555faf-0x555555557008.pdf`.\n\nIf assembly function is very large with a lot of jumps and calls to other\nfunctions. Then rendering the CFG can take a long time. So be patient or cancel\nrendering with Ctrl-C. To make the rendering faster you can skip function calls\ninstructions from splitting the code to more blocks. To set this run `set\nskipcalls on` and then run earlier command again. Note that if function is long\nand has a lot of jumps inside itself, then rendering is still gonna take a long\ntime. To have normal behavior again run `set skipcalls off`.\n\n## Usage as Standalone\n\nThis method can be used with assembly files saved from ouput of objdump and GDB\ndisassembly. Pip installation will come with `asm2cfg` command-line tool for\nthis purpose.\n\nTo use as standalone script you first need to dump assembly from GDB or objdump\nto the file which is explained below.\n\n### Knowing Function Name\n\nIf you don't know the name of function you're looking for then you can also list\nall function names using GDB:\n\n```\ngdb -batch -ex 'b main' -ex r -ex 'info functions' ./test_executable\n```\n\nThis will set breakpoint at function `main`, then\nrun the program and print symbols from all loaded libraries.\n\nFor functions which come from main executable you can avoid running the program\nand simply do\n\n```\ngdb -batch -ex 'info functions' ./test_executable\n```\n\nIf you want to narrow the search down you can also use regexp\n\n```\ngdb ... -ex 'info functions <regexp>' ...\n```\n\n### Disassemble Function\n\nOnce you have the function name, you can produce its disassembly via\n\n```\ngdb -batch -ex 'b main' -ex r -ex 'pipe disassemble test_function | tee test_function.asm' ./test_executable\n```\n\nor\n\n```\ngdb -batch -ex 'set breakpoints pending on' -ex 'b test_function' -ex r -ex 'pipe disassemble | tee test_function.asm' ./test_executable\n```\n\n(the `set breakpoint pending on` command enables pending breakpoints and\ncould be added to your `.gdbinit` instead)\n\nFor functions from main executable it's enough to do\n\n```\ngdb -batch -ex 'pipe disassemble test_function | tee test_function.asm' ./test_executable\n```\n\nYou can also extract function's disassembly from `objdump` output:\n\n```\nobjdump -d ./test_executable | sed -ne '/<test_function/,/^$/p' > test_executable.asm\n```\n\n(this may be useful for specific non-native targets which lack GDB support).\n\n### Draw CFG\n\nNow you have the assembly file. Time to turn that to CFG pdf file. Do that by giving it\nto `asm2cfg` command-line tool like so\n\n```\nasm2cfg test_function.asm\n```\n\nAsm2cfg by default expects x86 assembly files. If you want to use ARM assembly files,\nthen provide `--target arm` command-line flag.\n\nAbove command should output `test_function.pdf` file in the same directory where\nthe executable was ran. If the assembly file is stripped then the function\nmemory range is used as a name instead. For example\n`0x555555555faf-0x555555557008.pdf`.\n\nTo view CFG instead of saving provide `-v` flag. And to skip function calls from\nsplitting the code to further blocks provide `-c` flag. To show the help use\n`-h`.\n\n### Examples\n\nRepository includes examples which can be used to test the standalone\nfunctionality for x86, ARM and objdump.\n\nFile `test_function.asm` is non-stripped assembly file and its\ncorresponding output `test_function.pdf`.\n\nFile `stripped_function.asm` contains\nstripped function and its corresponding output\n`stripped_function.pdf`.\n\nFile `att_syntax.asm` is an example of non-stripped AT&T assembly.\n\nFile `huge.asm` is a large stripped\nassembly function and its corresponding output `huge.pdf`. This can be used to\ntest processing time of big functions.\n\nFiles `objdump.asm` and `stripped_objdump.asm` are the regular and stripped\nobjdump-based disassemblies of short functions.\n\nFile `arm.asm` is ARM based assembly file and its corresponding pdf file is\n`arm.pdf`.\n\n## Development\n\nYou want to contribute? You're very welcome to do so! This section will give you\nguidance how to setup development environment and test things locally.\n\n### Python Environment\n\nFor development this project manages packages with pipenv. Pipenv is a tool to\nmanage Python virtual environments and packages with much less pain compared to\nnormal pip and virtualenv usage.\n\nInstall pipenv for your system following the guide\n[here](https://pipenv.pypa.io/en/latest/).\n\nAfter installing pipenv. Create virtual environment and install all required\npackages to it. Run following at project root\n\n```\npipenv install -d\n```\n\nNow you can activate the virtual environment with\n\n```\npipenv shell\n```\n\nNow your `python` and `pip` commands will correspond to created virtual environment\ninstead of your system's Python installation.\n\nTo deactivate the environment, use\n\n```\nexit\n```\n\n### Testing\n\nThis project uses [pytest](https://pypi.org/project/pytest/) for testing. Some\ntest are written using Python's own unittest testing framework, but they work\nwith pytest out of the box. Pytest style is preferred way to write tests.\n\nTo run tests from project root, use `pytest` or\n\n```\npipenv run pytest\n```\n\nDuring testing dot viewer might be opened if you have it installed. This is\nbecause GDB integration command `viewcfg` is tested, which will open external\ndot viewer. Just close it after it's opened. It should not affect the test run\nitself.\n\n### Code Linting\n\nProject uses [flake8](https://flake8.pycqa.org/en/latest/) and\n[pylint](https://pylint.org/) for code linting.\n\nTo run flake8, use\n\n```\nflake8\n```\n\nAnd to run pylint use\n\n```\npylint src test\n```\n\nBoth commands should not print any errors.\n\n### Command-Line Interface\n\nTo test command-line interface of asm2cfg wihtout installing the package. You\ncan execute module directly. For example to print help\n\n```\npython -m src.asm2cfg -h\n```\n\nStandalone method can be used to try out the examples under `examples` folder as\nwell. For example following command should generate `main.pdf` file to current\nworking directory.\n\n```\npython -m src.asm2cfg -c examples/huge.asm\n```\n\n### GDB Integration\n\nBefore testing GDB functionality, make sure asm2cfg is not installed with pip!\nThis can lead to GDB using code from pip installed asm2cfg package instead of\ncode from this repository!\n\nAlso pipenv cannot be used with GDB. You need to install required packages to\nyour system's Python pip. This is because your installed GDB is linked against\nsystem's Python interpreter and will use it, instead of active virtual\nenvironment. If packages are not installed to your system's pip. You are likely\nto receive following error messages when trying to use asm2cfg with GDB\n\n```\nModuleNotFoundError: No module named 'graphviz'\n```\n\nTo fix this, install required packages to your system's pip without active\nvirtual environment. Currently GDB integration only requires graphviz.\n\n```\npip install graphviz\n```\n\nTo use asm2cfg GDB related functionality. Use following line from\nproject root.\n\n```\nPYTHONPATH=${PWD}/src gdb -ex 'source src/gdb_asm2cfg.py'\n```\n\nThis will set Python import path so that GDB can import code from this\nrepository without installing the package. After this you should be able to use\ncommands `viewcfg` and `savecfg`.\n\n### Current Development Goals\n\nThere are might be cases asm2cfg will not fully support all x86 or ARM assembly\nlines. If you encounter such problems please open an issue.\n\nCurrent developed goals are best described in issues section. Please open a new\none if existing one does not exist.\n\nIf you want to talk to me, you can contact me at Discord with name\n`Kazhuu#3121`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kazhuu/asm2cfg",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asm2cfg",
    "package_url": "https://pypi.org/project/asm2cfg/",
    "platform": null,
    "project_url": "https://pypi.org/project/asm2cfg/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Kazhuu/asm2cfg/issues",
      "Homepage": "https://github.com/Kazhuu/asm2cfg"
    },
    "release_url": "https://pypi.org/project/asm2cfg/0.2.1/",
    "requires_dist": [
      "graphviz (>=0.16)"
    ],
    "requires_python": ">=3.6",
    "summary": "GDB extension to add commands to view and save disassembled functions as a dot control-flow graphs.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14037989,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5809297ccc1e7c1f92f8191bc55b8eba81cef1c9d1b260fb7a70944f54be2f6b",
          "md5": "2138e59b2cb9e3c861460d2ab15884f4",
          "sha256": "c74dc7c026ac3be6d9cc3a4c008cad316514d7d2de1fb91adaf08a758fb01278"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2138e59b2cb9e3c861460d2ab15884f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9617,
        "upload_time": "2021-04-05T11:02:12",
        "upload_time_iso_8601": "2021-04-05T11:02:12.743010Z",
        "url": "https://files.pythonhosted.org/packages/58/09/297ccc1e7c1f92f8191bc55b8eba81cef1c9d1b260fb7a70944f54be2f6b/asm2cfg-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "039581402fe6d606df7d40959c258af529f20d0b2fdb7e46cfd5c48ff8034d94",
          "md5": "f68369fc73c04d9f81ef7aab68a8c142",
          "sha256": "1e124449e65c573e1506c8ba2476eb991fd3b734a7136fd156e6acd1ba58b136"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f68369fc73c04d9f81ef7aab68a8c142",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10769,
        "upload_time": "2021-04-05T11:02:14",
        "upload_time_iso_8601": "2021-04-05T11:02:14.098190Z",
        "url": "https://files.pythonhosted.org/packages/03/95/81402fe6d606df7d40959c258af529f20d0b2fdb7e46cfd5c48ff8034d94/asm2cfg-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebde6bbd4c43f8655435124218fe5dcd9469ae69ae1713efa53836e02390db76",
          "md5": "f96ea3ef3046eca1a6d1b6b6207a4ff3",
          "sha256": "4f6f0e4c383206132ce4545d43a6dfb61d1ac96d8fbd2ef00ef75b82a3bb918d"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f96ea3ef3046eca1a6d1b6b6207a4ff3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9616,
        "upload_time": "2021-04-05T11:17:28",
        "upload_time_iso_8601": "2021-04-05T11:17:28.882624Z",
        "url": "https://files.pythonhosted.org/packages/eb/de/6bbd4c43f8655435124218fe5dcd9469ae69ae1713efa53836e02390db76/asm2cfg-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ccbc8a2f199613e95b238604d9270fc6bca0d85145d213b2892ee89d0ff3ad1",
          "md5": "d1053b17744265665db9967e0444cc7e",
          "sha256": "bcacad18bbc6d5302e40dfcbdb5a18e611b1dbf9d69d7244a0b30dd59341227d"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1053b17744265665db9967e0444cc7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10735,
        "upload_time": "2021-04-05T11:17:29",
        "upload_time_iso_8601": "2021-04-05T11:17:29.897953Z",
        "url": "https://files.pythonhosted.org/packages/8c/cb/c8a2f199613e95b238604d9270fc6bca0d85145d213b2892ee89d0ff3ad1/asm2cfg-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96eddf6481a5d14ed30a42017d6873e72bfe32f80760dcb24cb036fd624a90a5",
          "md5": "9569ed5cfcc839c1613c06e0357e3c3b",
          "sha256": "9efe61f164a143351718c1225681c784da198d8a40e014e305841a2aa6df1cb6"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9569ed5cfcc839c1613c06e0357e3c3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9714,
        "upload_time": "2021-12-07T04:56:49",
        "upload_time_iso_8601": "2021-12-07T04:56:49.883310Z",
        "url": "https://files.pythonhosted.org/packages/96/ed/df6481a5d14ed30a42017d6873e72bfe32f80760dcb24cb036fd624a90a5/asm2cfg-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "668844adbb8b5854133cd09841885072b716f716b5617a75ca9f556dc32754e3",
          "md5": "0c4d4e63cabc17b2642918363389b48b",
          "sha256": "4ebd6f1b6f716d72d410cb35e41d08aaa3913a21e58f1921716a91a8e79c86bd"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0c4d4e63cabc17b2642918363389b48b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10936,
        "upload_time": "2021-12-07T04:56:51",
        "upload_time_iso_8601": "2021-12-07T04:56:51.406049Z",
        "url": "https://files.pythonhosted.org/packages/66/88/44adbb8b5854133cd09841885072b716f716b5617a75ca9f556dc32754e3/asm2cfg-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "174f5eeea00c3212712144a31e27914d17b065abe2a0a1698c91f6e10480e1ba",
          "md5": "a29620f8aec7c2aca0b18bfedea80ae8",
          "sha256": "7fa084742725b43a612d084d40a34146b56b7b85b61b7580e0fad5ef90e56388"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a29620f8aec7c2aca0b18bfedea80ae8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14603,
        "upload_time": "2022-03-27T16:03:07",
        "upload_time_iso_8601": "2022-03-27T16:03:07.566447Z",
        "url": "https://files.pythonhosted.org/packages/17/4f/5eeea00c3212712144a31e27914d17b065abe2a0a1698c91f6e10480e1ba/asm2cfg-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd5755651d4b094fb0359b2151b97c7f396ade0b7738c3a155004b5bc38fa530",
          "md5": "c705327b14ce355c7e43e6f4f08b332c",
          "sha256": "1b905062866888e4656289bfb755c54e43719ef9f7ee828b54fa1d160ec4a078"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c705327b14ce355c7e43e6f4f08b332c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21477,
        "upload_time": "2022-03-27T16:03:10",
        "upload_time_iso_8601": "2022-03-27T16:03:10.699750Z",
        "url": "https://files.pythonhosted.org/packages/cd/57/55651d4b094fb0359b2151b97c7f396ade0b7738c3a155004b5bc38fa530/asm2cfg-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64e141aa01f10af0bd6d488a6d74e434e5e5a6ea65050d13813611bb2cfda931",
          "md5": "da3e0d6ccb8543efb0bb14705997c68c",
          "sha256": "61729a4e0d74a900698bf957ea8a0e006c4f09960f1b6c231f1fdf0bcc7790cb"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da3e0d6ccb8543efb0bb14705997c68c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14595,
        "upload_time": "2022-06-05T15:17:10",
        "upload_time_iso_8601": "2022-06-05T15:17:10.669677Z",
        "url": "https://files.pythonhosted.org/packages/64/e1/41aa01f10af0bd6d488a6d74e434e5e5a6ea65050d13813611bb2cfda931/asm2cfg-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d708656cc8482f84aabec05f9ece27f7a1483e2420664ad895bc36b179370598",
          "md5": "37819c45ee531d45c2daea312704355e",
          "sha256": "7910b975825839a710a61223a3100e375e681c5f86dee4efbc4de6e4336e1894"
        },
        "downloads": -1,
        "filename": "asm2cfg-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37819c45ee531d45c2daea312704355e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21551,
        "upload_time": "2022-06-05T15:17:12",
        "upload_time_iso_8601": "2022-06-05T15:17:12.811578Z",
        "url": "https://files.pythonhosted.org/packages/d7/08/656cc8482f84aabec05f9ece27f7a1483e2420664ad895bc36b179370598/asm2cfg-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64e141aa01f10af0bd6d488a6d74e434e5e5a6ea65050d13813611bb2cfda931",
        "md5": "da3e0d6ccb8543efb0bb14705997c68c",
        "sha256": "61729a4e0d74a900698bf957ea8a0e006c4f09960f1b6c231f1fdf0bcc7790cb"
      },
      "downloads": -1,
      "filename": "asm2cfg-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da3e0d6ccb8543efb0bb14705997c68c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14595,
      "upload_time": "2022-06-05T15:17:10",
      "upload_time_iso_8601": "2022-06-05T15:17:10.669677Z",
      "url": "https://files.pythonhosted.org/packages/64/e1/41aa01f10af0bd6d488a6d74e434e5e5a6ea65050d13813611bb2cfda931/asm2cfg-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d708656cc8482f84aabec05f9ece27f7a1483e2420664ad895bc36b179370598",
        "md5": "37819c45ee531d45c2daea312704355e",
        "sha256": "7910b975825839a710a61223a3100e375e681c5f86dee4efbc4de6e4336e1894"
      },
      "downloads": -1,
      "filename": "asm2cfg-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "37819c45ee531d45c2daea312704355e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21551,
      "upload_time": "2022-06-05T15:17:12",
      "upload_time_iso_8601": "2022-06-05T15:17:12.811578Z",
      "url": "https://files.pythonhosted.org/packages/d7/08/656cc8482f84aabec05f9ece27f7a1483e2420664ad895bc36b179370598/asm2cfg-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}