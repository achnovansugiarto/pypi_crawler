{
  "info": {
    "author": "Vitalis Salis",
    "author_email": "vitsalis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# :warning: Notes\nForked from https://github.com/vitsalis/pycg\n\nChanges: See https://github.com/deeplime-io/PyCG/tree/onecode\n\nEssentially added code tracks the order of the calls and the code associated to it. It is used by OneCode to properly interpret code based on the **excellent** `PyCG`.\n\nWhy a new PyPi package? Well, the not-so-great PyPi doesn't allow to have forked public repositories as part of the dependencies. Nice right?\n\n# PyCG - Practical Python Call Graphs\n\nPyCG generates call graphs for Python code using static analysis.\nIt efficiently supports\n* Higher order functions\n* Twisted class inheritance schemes\n* Automatic discovery of imported modules for further analysis\n* Nested definitions\n\nYou can read the full methodology as well as a complete evaluation on the\n[ICSE 2021 paper](https://arxiv.org/pdf/2103.00587.pdf).\n\nYou can cite PyCG as follows.\nVitalis Salis, Thodoris Sotiropoulos, Panos Louridas, Diomidis Spinellis and Dimitris Mitropoulos.\nPyCG: Practical Call Graph Generation in Python.\nIn _43rd International Conference on Software Engineering, ICSE '21_,\n25â€“28 May 2021.\n\n# Installation\n\nPyCG is implemented in Python3 and requires Python version 3.4 or higher.\nIt also has no dependencies. Simply:\n```\npip install pycg\n```\n\n# Usage\n\n```\n~ >>> pycg -h\nusage: __main__.py [-h] [--package PACKAGE] [--fasten] [--product PRODUCT]\n                        [--forge FORGE] [--version VERSION] [--timestamp TIMESTAMP]\n                        [--max-iter MAX_ITER] [--operation {call-graph,key-error}]\n                        [--as-graph-output AS_GRAPH_OUTPUT] [-o OUTPUT]\n                        [entry_point ...]\n\npositional arguments:\n  entry_point           Entry points to be processed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --package PACKAGE     Package containing the code to be analyzed\n  --fasten              Produce call graph using the FASTEN format\n  --product PRODUCT     Package name\n  --forge FORGE         Source the product was downloaded from\n  --version VERSION     Version of the product\n  --timestamp TIMESTAMP\n                        Timestamp of the package's version\n  --max-iter MAX_ITER   Maximum number of iterations through source code. If not specified a fix-point iteration will be performed.\n  --operation {call-graph,key-error}\n                        Operation to perform. Choose call-graph for call graph generation (default) or key-error for key error detection on dictionaries.\n  --as-graph-output AS_GRAPH_OUTPUT\n                        Output for the assignment graph\n  -o OUTPUT, --output OUTPUT\n                        Output path\n```\n\nThe following command line arguments should used only when `--fasten` is\nprovied:\n\n- `--product`: The name of the package.\n- `--forge`: Source the package was downloaded from.\n- `--version`: The version of the package.\n- `--timestamp` : The timestamp of the package's version.\n\n# Call Graph Output\n\n## Simple JSON format\n\nThe call edges are in the form of an adjacency list where an edge `(src, dst)`\nis represented as an entry of `dst` in the list assigned to key `src`:\n\n```\n{\n    \"node1\": [\"node2\", \"node3\"],\n    \"node2\": [\"node3\"],\n    \"node3\": []\n}\n```\n\n## FASTEN Format\n\nFor an up-to-date description of the FASTEN format refer to the\n[FASTEN\nwiki](https://github.com/fasten-project/fasten/wiki/Extended-Revision-Call-Graph-format#python).\n\n# Key Errors Output\n\nWe are currently experimenting on identifying potential invalid dictionary\naccesses on Python dictionaries (key errors).\nThe output format for key errors is a list of dictionaries containing:\n- The file name in which the key error was identified\n- The line number inside the file\n- The namespace of the accessed dictionary\n- The key used to access the dictionary\n\n```\n[{\n    \"filename\": \"mod.py\",\n    \"lineno\": 2,\n    \"namespace\": \"mod.<dict1>\",\n    \"key\": \"key2\"\n},\n{\n    \"filename\": \"mod.py\",\n    \"lineno\": 8,\n    \"namespace\": \"mod.<dict1>\",\n    \"key\": \"nokey\"\n}]\n```\n\n# Examples\n\nAll the entry points are known and we want the simple JSON format\n```\n~ >>> pycg --package pkg_root pkg_root/module1.py pkg_root/subpackage/module2.py -o cg.json\n```\n\nAll entry points are not known and we want the simple JSON format\n```\n~ >>> pycg --package django $(find django -type f -name \"*.py\") -o django.json\n```\n\nWe want the FASTEN format:\n```\n~ >>> pycg --package pypi_pkg --fasten --product \"pypipkg\" --forge \"PyPI\" \\\n        --version \"0.1\" --timestamp 42 \\\n        pypi_pkg/module1.py pkg_root/subpackage/module2.py -o cg.json\n```\n\n# Running Tests\n\nFrom the root directory:\n```\nmake test\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deeplime-io/pycg",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "onecode-pycg",
    "package_url": "https://pypi.org/project/onecode-pycg/",
    "platform": null,
    "project_url": "https://pypi.org/project/onecode-pycg/",
    "project_urls": {
      "Homepage": "https://github.com/deeplime-io/pycg"
    },
    "release_url": "https://pypi.org/project/onecode-pycg/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Practical Python Call Graphs",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16863329,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9059e25fc7da4d38ef1be3e33d82cbe63f4bdfb2532dd9a3505eff133f05252",
          "md5": "b590e5891d5e70bd91c5ca0fc1c442be",
          "sha256": "574768a0c76d26ebe4741f971e0cc4d0c56e0275d8511653860a6f8bb09d7f04"
        },
        "downloads": -1,
        "filename": "onecode_pycg-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b590e5891d5e70bd91c5ca0fc1c442be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 56796,
        "upload_time": "2023-02-15T00:38:38",
        "upload_time_iso_8601": "2023-02-15T00:38:38.277425Z",
        "url": "https://files.pythonhosted.org/packages/d9/05/9e25fc7da4d38ef1be3e33d82cbe63f4bdfb2532dd9a3505eff133f05252/onecode_pycg-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9059e25fc7da4d38ef1be3e33d82cbe63f4bdfb2532dd9a3505eff133f05252",
        "md5": "b590e5891d5e70bd91c5ca0fc1c442be",
        "sha256": "574768a0c76d26ebe4741f971e0cc4d0c56e0275d8511653860a6f8bb09d7f04"
      },
      "downloads": -1,
      "filename": "onecode_pycg-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b590e5891d5e70bd91c5ca0fc1c442be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 56796,
      "upload_time": "2023-02-15T00:38:38",
      "upload_time_iso_8601": "2023-02-15T00:38:38.277425Z",
      "url": "https://files.pythonhosted.org/packages/d9/05/9e25fc7da4d38ef1be3e33d82cbe63f4bdfb2532dd9a3505eff133f05252/onecode_pycg-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}