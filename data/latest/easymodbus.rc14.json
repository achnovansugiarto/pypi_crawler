{
  "info": {
    "author": "Stefan Rossmann",
    "author_email": "info@rossmann-engineering.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "## EasyModbusTCP - THE standard library for Modbus RTU and Modbus TCP\n\nVisit www.EasyModbusTCP.net for more informations and Codesamples\n\n### Table of Contents\n1. [Installation](#installation)\n2. [Supported Function codes](#functioncodes)  \n3. [Basic Usage](#basicusage)  \n   3.1. [Instantiation](#instatiation)  \n   3.2. [Connect](#connect)  \n   3.3. [Close connection](#close)  \n   3.4. [Read values](#readvalues)  \n   3.5. [Write single values](#writesinglevalues)  \n4. [Examples](#examples)  \n   4.1. [Example 1 (Read two Holding Registres from Siemens S7-1200 via Modbus-TCP)](#example1)  \n5. [Library Documentation](#documentation)  \n   5.1 [Methods](#methods)  \n   5.2 [Properties](#properties)  \n   5.3 [Helper functions](#functions)\n\n<div id=\"installation\"/>\n\n### 1. Installation:\n\npip install EasyModbus\n\n### Requirements:\n\n>Python 3.8\n\npyserial (only for Modbus RTU)\n\n\n<div id=\"functioncodes\"/>\n\n### 2. Supported Function codes \n\n- Read Coils (FC1)\n- Read Discrete Inputs (FC2)\n- Read Holding Registers (FC3)\n- Read Input Registers (FC4)\n- Write Single Coil (FC5)\n- Write Single Register (FC6)\n- Write Multiple Coils (FC15)\n- Write Multiple Registers (FC16)\n\n<div id=\"basicusage\"/>\n\n### 3. Basic usage\n\n<div id=\"instantiation\"/>\n\n#### 3.1 Instantiate ModbusClient class\n\nThe arguments passed during the instantiation are important in order to differentiate between Modbus RTU (via the serial interface) and Modbus TCP (via Ethernet).  \nIf an argument is passed during the instantiation, it is the serial interface that is used with Modbus RTU (e.g. 'COM1' or '/dev/ttyUSB0').\nTwo arguments must be passed for Modbus TCP. This is the IP address and the port (usually 502)  \n\nExample for **Modbus RTU**  \n```python\nimport easymodbus.modbusClient\nmodbus_client = easymodbus.modbusClient.ModbusClient('/dev/ttyUSB0')\n```\n\nExample for **Modbus TCP**  \n```python\nimport easymodbus.modbusClient\nmodbus_client = easymodbus.modbusClient.ModbusClient('192.168.178.52', 502)\n```\n\n<div id=\"connect\"/>\n\n#### 3.2 Connect\n\nTo connect to a Modbus-TCP Server or to a Modbus-RTU Slave simply use the \"connect\" Method. If Modbus-RTU is used, make sure to set the properties for serial connection (Baudrate, Parity, Stopbits), if they differ from the default values, **before** the \"connect\" Method is executed. \n\n```python\nmodbus_client.connect()\n```\n\n<div id=\"close\"/>\n\n#### 3.3 Close connection\n\nTo close the connection to a Modbus-TCP Server or to a Modbus-RTU Slave simply use the \"close\" Method.\n\n```python\nmodbus_client.close()\n```\n\n<div id=\"readvalues\"/>\n\n#### 3.4 Read Values\n\nThe following functioncodes are used to read values from the remote device (Modbus-TCP Server or Modbus-RTU Client)\n\n- Read Coils (FC1) - Method \"read_coils\"\n- Read Discrete Inputs (FC2) - Method \"read_discrete_inputs\"\n- Read Holding Registers (FC3) - Method \"read_holding_registers\"\n- Read Input Registers (FC4) - Method \"read_input_registers\"\n\nIMPORTANT: Usually there is a Register shift between the request and the server address range\nThe Server address Range starts with address \"1\" but the Request that is sent starts with \"0\"\nIn the example method call we read Register 1 and 2 (Because register \"0\" does not exist)\nPlease check the documentation of your device (or try it out)\n\n```python\nimport easymodbus.modbusClient\n\n#create an instance of a Modbus-TCP class (Server IP-Address and Port) and connect\nmodbus_client = easymodbus.modbusClient.ModbusClient('192.168.178.110', 502)\nmodbus_client.connect()\n\n#The first argument is the starting address, the second argument is the quantity.\ncoils = modbus_client.read_coils(0, 2)\t#Read coils 1 and 2 from server \ndiscrete_inputs = modbus_client.read_discreteinputs(10, 10)\t#Read discrete inputs 11 to 20 from server \ninput_registers = modbus_client.read_inputregisters(0, 10)\t#Read input registers 1 to 10 from server \nholding_registers = modbus_client.read_holdingregisters(0, 5)\t#Read holding registers 1 to 5 from server \nmodbus_client.close()\n```\n\n<div id=\"writesinglevalues\"/>\n\n#### 3.5 Write single Values\n\nThe following functioncodes are used to write single values (Holding Registers or Coils) from the remote device (Modbus-TCP Server or Modbus-RTU Client)\n\n- Write Single Coil (FC5) - Method \"write_single_coil\"\n- Write Single Register (FC6) - Method \"write_single_register\"\n\nIMPORTANT: Usually there is a Register shift between the request and the server address range\nThe Server address Range starts with address \"1\" but the Request that is sent starts with \"0\"\nIn the example method call we write to Register 1 (Because register \"0\" does not exist)\nPlease check the documentation of your device (or try it out)\n\n```python\nimport easymodbus.modbusClient\n\n#create an instance of a Modbus-TCP class (Server IP-Address and Port) and connect\nmodbus_client = easymodbus.modbusClient.ModbusClient('192.168.178.110', 502)\nmodbus_client.connect()\n\nholding_register_value = 115\ncoil_value = True\n#The first argument is the address, the second argument is the value.\nmodbus_client.write_single_register(0, holding_register_value)\t#Write value \"115\" to Holding Register 1 \nmodbus_client.write_single_coil(10, coil_value)\t#Set Coil 11 to True\nmodbus_client.close()\n```\n\n<div id=\"examples\"/>\n\n### 4. Get started - Examples\n\nAll examples are available in the folder \"examples\" in the Git-Repository\n\n<div id=\"example1\"/>\n\n#### 4.1 Example 1 (Read two Holding Registres from Modbus-TCP Server)\nFirst we create an instance of a Modbus-TCP class (Server IP-Address and Port)\nThen we Read 2 Holding Registers from the Server.  \nIMPORTANT: Usually there is a Register shift between the request and the server address range\nThe Server address Range starts with address \"1\" but the Request that is sent starts with \"0\"\nIn the example method call we read Register 1 and 2 (Because register \"0\" does not exist)\nPlease check the documentation of your device (or try it out)\n\n\n```python\nimport easymodbus.modbusClient\n\n#create an instance of a Modbus-TCP class (Server IP-Address and Port) and connect\nmodbus_client = easymodbus.modbusClient.ModbusClient('192.168.178.110', 502)\nmodbus_client.connect()\n\n#The first argument is the starting registers, the second argument is the quantity.\nregister_values = modbus_client.read_holdingregisters(0, 2)\n\nprint(\"Value of Register #1:\" + str(register_values[0]))\nprint(\"Value of Register #2:\" + str(register_values[1])) \n\n#Close the Port\nmodbus_client.close()\n```\n\n<div id=\"documentation\"/>\n\n### 5. Library Documentation\n\nClass:  ModbusClient\n\n<div id=\"methods\"/>\n\n#### 5.1 Methods\n\n**Constructor def \\_\\_init__(self, \\*params)**\n\n<u>Constructor for Modbus RTU (serial line):</u>\nmodbusClient = ModbusClient.ModbusClient(‘COM1’)\nFirst Parameter is the serial Port\n\n<u>Constructor for Modbus TCP:</u>\nmodbusClient = ModbusClient.ModbusClient(‘127.0.0.1’, 502)\nFirst Parameter ist the IP-Address of the Server to connect to\nSecond Parameter is the Port the Server listens to\n\n**def connect(self)**\n\nConnects to a Modbus-TCP Server or a Modbus-RTU Slave with the given Parameters\n\n**def close(self)**\n\nCloses Serial port, or TCP-Socket connection\n\n**def read_discrete_inputs(self, starting_address, quantity)**\n\nRead Discrete Inputs from Server device (Function code 2)  \nstarting_address: First discrete input to read  \nquantity: Number of discrete Inputs to read  \nreturns: List of bool values [0..quantity-1] which contains the discrete Inputs  \n\n**def read_coils(self, starting_address, quantity)**\n\nRead Coils from Server device (Function code 1)  \nstarting_address: First coil to read  \nquantity: Number of coils to read  \nreturns: List of bool values [0..quantity-1] which contains the coils  \n\n**def read_holding_registers(self, starting_address, quantity)**\n\nRead Holding Registers from Server device (Function code 3)  \nstarting_address: First Holding Register to read  \nquantity: Number of Holding Registers to read  \nreturns: List of int values [0..quantity-1] which contains the registers \n\n**def read_input_registers(self, starting_address, quantity)**\n\nRead Input Registers from Server device (Function code 4)  \nstarting_address: First Input Register to read  \nquantity: Number of Input Registers to read  \nreturns: List of int values [0..quantity-1] which contains the registers \n\n**def write_single_coil(self, starting_address, value)**\n\nWrite single Coil to Server device (Function code 5)  \nstarting_address: Coil to write  \nvalue: Boolean value to write\n\n**def write_single_register(self, starting_address, value)**\n\nWrite single Holding Register to Server device (Function code 6)  \nstarting_address: Holding Register to write  \nvalue: int value to write\n\n**def write_multiple_coils(self, starting_address, values)**\n\nWrite multiple Coils to Server device (Function code 15)  \nstarting_address: First coil to write  \nvalue: List of Boolean values to write\n\n**def write_multiple_registers(self, starting_address, values)**\n\nWrite multiple Holding Registers to Server device (Function code 16)  \nstarting_address: First Holding Register to write  \nvalue: List of int values to write\n\n**def read_discreteinputs(self, starting_address, quantity)**\n\ndeprecated - Use \"read_discrete_inputs\" instead\n\n**def read_holdingregisters(self, starting_address, quantity)**\n\ndeprecated - Use \"read_holding_registers\" instead\n\n**def read_inputregisters(self, starting_address, quantity)**\n\ndeprecated - Use \"read_input_registers\" instead\n\n<div id=\"properties\"/>\n\n#### 5.2 Properties\n\n**port**\n\nDatatype: int  \nPort were the Modbus-TCP Server is reachable (Standard is 502)\n\n**ipaddress**\n\nDatatype: str  \nIP-Address of the Server to be connected\n\n**unitidentifier**\n\nDatatype: int  \nUnit identifier in case of serial connection (Default = 1)\n\n**baudrate**\n\nDatatype: int  \nBaudrate for serial connection (Default = 9600)\n\n**parity**\n\nDatatype: int  \nParity in case of serial connection \nThe Helper class \"Parity\" can be used to define the parity (Default = Parity.even)  \nFor example: modbus_client.parity = easymodbus.modbusClient.Parity.odd  \nPossible values are:\neven = 0  \nodd = 1  \nnone = 2  \n\n**stopbits**\n\nDatatype: int  \nStopbits in case of serial connection (Default = Stopbits.one) \nThe Helper class \"Stopbits\" can be used to define the number of stopbits  \nFor example: modbus_client.stopbits = easymodbus.modbusClient.Stopbits.one  \nPossible values are:\none = 0  \ntwo = 1  \nonePointFive = 2  \n\n**timeout**\n\nDatatype: int  \nMax. time before an Exception is thrown (Default = 5)  \n\n**is_connected**\n\nDatatype: bool  \nReturns true if a connection has been established (only read)\n\n**debug**\n\nDatatype: bool  \nEnables/disables debug mode - In debug mode Request and Response and depending in the logging level the RAW-Data are displayed at the console output and stored in a logfile \"logdata.txt\"  \nDisabled at default\n\n**logging_level**\n \nSets or gets the logging level. Default value is logging.INFO. In this Request and Response including arguments are logged (if debug is enabled)  \nif the level is set to logging.DEBUG also the RAW data transmitted and received are logged for debugging purposes.  \nThe are logged at the console output and stored in logfile.txt \n\n\n<div id=\"functions\"/>\n\n#### 5.3 Helper functions\n\n**def convert_double_to_two_registers(doubleValue, register_order=RegisterOrder.lowHigh)**\n\nConvert 32 Bit Value to two 16 Bit Value to send as Modbus Registers  \ndoubleValue: Value to be converted  \nregister_order: Desired Word Order (Low Register first or High Register first - Default: RegisterOrder.lowHigh  \nreturn: 16 Bit Register values int[]  \n\n**def convert_float_to_two_registers(floatValue, register_order=RegisterOrder.lowHigh)**\n\nConvert 32 Bit real Value to two 16 Bit Value to send as Modbus Registers  \nfloatValue: Value to be converted  \nregister_order: Desired Word Order (Low Register first or High Register first - Default: RegisterOrder.lowHigh  \nreturn: 16 Bit Register values int[]  \n\n**def convert_registers_to_double(registers, register_order=RegisterOrder.lowHigh)**\n\nConvert two 16 Bit Registers to 32 Bit long value - Used to receive 32 Bit values from Modbus (Modbus Registers are 16 Bit long)  \nregisters: 16 Bit Registers  \nregister_order: Desired Word Order (Low Register first or High Register first - Default: RegisterOrder.lowHigh  \nreturn: 32 bit value  \n\n**def convert_registers_to_float(registers, register_order=RegisterOrder.lowHigh)**\n\nConvert two 16 Bit Registers to 32 Bit real value - Used to receive float values from Modbus (Modbus Registers are 16 Bit long)  \nregisters: 16 Bit Registers  \nregister_order: Desired Word Order (Low Register first or High Register first - Default: RegisterOrder.lowHigh  \nreturn: 32 bit value real",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.easymodbustcp.net",
    "keywords": "easymodbus modbus serial RTU TCP EasyModbusTCP",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EasyModbus",
    "package_url": "https://pypi.org/project/EasyModbus/",
    "platform": null,
    "project_url": "https://pypi.org/project/EasyModbus/",
    "project_urls": {
      "Homepage": "http://www.easymodbustcp.net"
    },
    "release_url": "https://pypi.org/project/EasyModbus/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "THE standard library for Modbus RTU and Modbus TCP - See www.EasyModbusTCP.NET for documentation",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16274260,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60c61a35f5cca3c44e0223a1a6593f96d390c1e076471acec233fb4c7685c9d",
          "md5": "e30887a298bb761a10f9f7ab9e4b0c38",
          "sha256": "b44130bcd57bbd123cba4bf6eacd8029db6ffb60eb9273992e639c5a317b1562"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e30887a298bb761a10f9f7ab9e4b0c38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8282,
        "upload_time": "2018-02-13T03:32:25",
        "upload_time_iso_8601": "2018-02-13T03:32:25.143108Z",
        "url": "https://files.pythonhosted.org/packages/b6/0c/61a35f5cca3c44e0223a1a6593f96d390c1e076471acec233fb4c7685c9d/EasyModbus-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22d8bf542dbe4a1e915ade5150f1e320f53a384e202c6ffee90512ad2a36c8cf",
          "md5": "fad2f8ce8caafeba5a9382a6b8779eb0",
          "sha256": "e5c83bbb5f751514d1e18804cc8a6067a07b2e672b381d94ea44e0ede6c4fa9a"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fad2f8ce8caafeba5a9382a6b8779eb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8284,
        "upload_time": "2018-02-13T05:16:29",
        "upload_time_iso_8601": "2018-02-13T05:16:29.319461Z",
        "url": "https://files.pythonhosted.org/packages/22/d8/bf542dbe4a1e915ade5150f1e320f53a384e202c6ffee90512ad2a36c8cf/EasyModbus-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d95b41ac8169356c7885fb3ace6c00455052b8c9618cb8ef6c650aa4c86530a5",
          "md5": "8ab98da58287661163ade73887b6c926",
          "sha256": "344369aae8ad6c5ac2b45bbe58565ee000a69bbe4959ad9fb5a9170d8e5eacd9"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ab98da58287661163ade73887b6c926",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8881,
        "upload_time": "2019-03-01T12:24:29",
        "upload_time_iso_8601": "2019-03-01T12:24:29.471102Z",
        "url": "https://files.pythonhosted.org/packages/d9/5b/41ac8169356c7885fb3ace6c00455052b8c9618cb8ef6c650aa4c86530a5/EasyModbus-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19793ca619e711daabb45691a6c6efb34bd156d656fd34ea58dca1d22c12694b",
          "md5": "96b847f5503dbe4a596f616b74c0d027",
          "sha256": "114a62262a03f6a36c60dfd4c5b6807bdc4b79d628f9ae98184e6c4856811e23"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "96b847f5503dbe4a596f616b74c0d027",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8969,
        "upload_time": "2019-03-01T12:55:54",
        "upload_time_iso_8601": "2019-03-01T12:55:54.609481Z",
        "url": "https://files.pythonhosted.org/packages/19/79/3ca619e711daabb45691a6c6efb34bd156d656fd34ea58dca1d22c12694b/EasyModbus-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4f36ae836f8c69382521a856e5832fefa616814d92f835df0f746756746b277",
          "md5": "0376e03ff71d99458d8f1a72bd9fd0e8",
          "sha256": "113204d45a7ae34cf6c6a7ab66b970b30eb7f7b4ed20b589768baa8b25d9dd73"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0376e03ff71d99458d8f1a72bd9fd0e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9136,
        "upload_time": "2019-03-01T13:06:58",
        "upload_time_iso_8601": "2019-03-01T13:06:58.844773Z",
        "url": "https://files.pythonhosted.org/packages/b4/f3/6ae836f8c69382521a856e5832fefa616814d92f835df0f746756746b277/EasyModbus-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cd4133583abb38ce64f1350197f63d8e3952471db93b4b2fb7e9be9e0f33406",
          "md5": "1fb8898a9eccc1456fcc846e260119a2",
          "sha256": "9e8a63c884d494eab81ee926a61ef0dad6d224795010c3085a9fda7a57e2211b"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1fb8898a9eccc1456fcc846e260119a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9157,
        "upload_time": "2019-03-01T13:08:34",
        "upload_time_iso_8601": "2019-03-01T13:08:34.537956Z",
        "url": "https://files.pythonhosted.org/packages/5c/d4/133583abb38ce64f1350197f63d8e3952471db93b4b2fb7e9be9e0f33406/EasyModbus-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5410fe1fcca80ac093e7a8bea6a34924b233a50e0a164c7cf0581f55f7847367",
          "md5": "66c2a80348968f7d4aea161db3a60969",
          "sha256": "bef37f186698cc156f70f60b8d324c40e5ea50471c62b899a9fe4e1b7eac5dad"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "66c2a80348968f7d4aea161db3a60969",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9456,
        "upload_time": "2019-03-03T07:10:40",
        "upload_time_iso_8601": "2019-03-03T07:10:40.977102Z",
        "url": "https://files.pythonhosted.org/packages/54/10/fe1fcca80ac093e7a8bea6a34924b233a50e0a164c7cf0581f55f7847367/EasyModbus-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbe7d82e4ac918a59d506d9d0d150cd38cd376313fa9bb0ce9a2816ce75fe54b",
          "md5": "fa4aabc9669e73ccd167a6c0659e3da0",
          "sha256": "d99d9a75828dc3c95548e51e2f5ab6c7ab6b4141e7a758c709a59598f9762d5b"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fa4aabc9669e73ccd167a6c0659e3da0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9453,
        "upload_time": "2019-03-03T07:14:08",
        "upload_time_iso_8601": "2019-03-03T07:14:08.034931Z",
        "url": "https://files.pythonhosted.org/packages/bb/e7/d82e4ac918a59d506d9d0d150cd38cd376313fa9bb0ce9a2816ce75fe54b/EasyModbus-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "783c5e237939e902308e5bbf771734928827d6a3409594d387fd4ae95d6dca82",
          "md5": "7e20bf256b5c28e3e1c2084834a6c712",
          "sha256": "34f53907b5f648017cdb86c8a642b4b4b5fb2854ccca961012a9a0acf620e5e8"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "7e20bf256b5c28e3e1c2084834a6c712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9647,
        "upload_time": "2019-12-08T17:56:56",
        "upload_time_iso_8601": "2019-12-08T17:56:56.825844Z",
        "url": "https://files.pythonhosted.org/packages/78/3c/5e237939e902308e5bbf771734928827d6a3409594d387fd4ae95d6dca82/EasyModbus-1.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49aa9d666da0ce8c612bd24524c38538e52b545bea0169358c0f5e79b6c83ae6",
          "md5": "8f2c413108d60453a4f387350289d9f1",
          "sha256": "a7e3c37b5919d3eb106094a5e587ce110253b8f9f3b7e44fef4722b96255fba9"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8f2c413108d60453a4f387350289d9f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9587,
        "upload_time": "2020-02-10T19:55:24",
        "upload_time_iso_8601": "2020-02-10T19:55:24.872053Z",
        "url": "https://files.pythonhosted.org/packages/49/aa/9d666da0ce8c612bd24524c38538e52b545bea0169358c0f5e79b6c83ae6/EasyModbus-1.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce741767ad836b08f6f4388134c8d60e3b882cf8d1ac582830bcf74a36d87874",
          "md5": "53e39a642a1cb8ff9938b17c4dbf0476",
          "sha256": "378ecb5f772d5b393f85ff1d8e92c96c8b75311ac386232d9cfa0880d21fa968"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53e39a642a1cb8ff9938b17c4dbf0476",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10720,
        "upload_time": "2020-12-30T09:10:41",
        "upload_time_iso_8601": "2020-12-30T09:10:41.082846Z",
        "url": "https://files.pythonhosted.org/packages/ce/74/1767ad836b08f6f4388134c8d60e3b882cf8d1ac582830bcf74a36d87874/EasyModbus-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13c34138e2c8b819493859a077d02117d666705ad9e90c71eacb84cae58a35e9",
          "md5": "71c7b13ca5d542c90e39959455781f3d",
          "sha256": "7557c827e84c50e1022712e281713ef1d4774c446fe69010f982cd8712d4a177"
        },
        "downloads": -1,
        "filename": "EasyModbus-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71c7b13ca5d542c90e39959455781f3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11712,
        "upload_time": "2021-01-08T09:32:51",
        "upload_time_iso_8601": "2021-01-08T09:32:51.018926Z",
        "url": "https://files.pythonhosted.org/packages/13/c3/4138e2c8b819493859a077d02117d666705ad9e90c71eacb84cae58a35e9/EasyModbus-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4808f68447947893151a0d05694a880070f206b0d3934e00ae4c57145d283f6a",
          "md5": "112ca96c22bee6c58cffb002ebca6dc5",
          "sha256": "385c6b3efa87b20bf50d10603bdcf34f790764a7d6bc2e21671f787ee509daf8"
        },
        "downloads": -1,
        "filename": "EasyModbus-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "112ca96c22bee6c58cffb002ebca6dc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15376,
        "upload_time": "2022-12-31T13:22:34",
        "upload_time_iso_8601": "2022-12-31T13:22:34.351108Z",
        "url": "https://files.pythonhosted.org/packages/48/08/f68447947893151a0d05694a880070f206b0d3934e00ae4c57145d283f6a/EasyModbus-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "433cc5f9a38041347d27e0f8393a93a850fee4c3efeb4ee9487d793f4009d9a1",
          "md5": "82e34f557cf5071cfd10c580085cf4b4",
          "sha256": "aadd591fa105c1de02034743283a4cde55f93c8634f62a191513ef636edb6dfc"
        },
        "downloads": -1,
        "filename": "EasyModbus-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "82e34f557cf5071cfd10c580085cf4b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17195,
        "upload_time": "2023-01-01T20:57:25",
        "upload_time_iso_8601": "2023-01-01T20:57:25.551888Z",
        "url": "https://files.pythonhosted.org/packages/43/3c/c5f9a38041347d27e0f8393a93a850fee4c3efeb4ee9487d793f4009d9a1/EasyModbus-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "433cc5f9a38041347d27e0f8393a93a850fee4c3efeb4ee9487d793f4009d9a1",
        "md5": "82e34f557cf5071cfd10c580085cf4b4",
        "sha256": "aadd591fa105c1de02034743283a4cde55f93c8634f62a191513ef636edb6dfc"
      },
      "downloads": -1,
      "filename": "EasyModbus-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "82e34f557cf5071cfd10c580085cf4b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17195,
      "upload_time": "2023-01-01T20:57:25",
      "upload_time_iso_8601": "2023-01-01T20:57:25.551888Z",
      "url": "https://files.pythonhosted.org/packages/43/3c/c5f9a38041347d27e0f8393a93a850fee4c3efeb4ee9487d793f4009d9a1/EasyModbus-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}