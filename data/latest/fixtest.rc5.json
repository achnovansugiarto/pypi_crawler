{
  "info": {
    "author": "",
    "author_email": "Kenn Takara <kenn.takara@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Networking"
    ],
    "description": "# FIXTest - FIX Protocol Test tool\nThe purpose of this tool is to provide a way to test networking components\nusing the FIX level at the system level, not unit test.  Initially, I\nwanted a way to reproduce and document specific test cases so that I\ncould perform regression tests at a later date.\n\nThis tool provides a way of creating test cases that can act as FIX clients\nor as FIX servers.  But this is not a simulator, the test case author is\nresponsible for generating the actual messages and checking their correctness.\n\n## What this is not\n* This is not a simulator. This tool was made to help document specific\ntest cases (thus ensuring that I could repro and verify a test case).\n* This is not meant for unit testing, but component level testing.\n* This currently only supports FIX-based protocols.  In theory this \ncould support other protocols, but I haven't tried to make it more protocol agnostic.\n\n## What is supported\n* Groups\n* Binary fields\n* TestRequest/Heartbeat processing\n\n## How to use\n1. Write a configuration file\n2. Write a testcase\n3. Run the testcase\n\n### Configuration\nThe configuration is gathered from a config file.  The default name for the\nfile is my_config.py.  A full description of the contents of the file may be\nfound in sample_config.py\n\nHere is a sample configuration file.\n```python\n\nROLES = {\n    'client': {},\n    'test-server': {},\n}\n\nFIX_4_2 = {\n    # The values here are examples only.  They should be customized\n    # for your particular needs/implementation.\n    'protocol_version': 'FIX.4.2',\n    'header_fields': [8, 9],\n    'binary_fields': [],\n    'required_fields': [8, 9, 10, 35],\n    'group_fields': {},\n    'max_length': 2048,\n}\n\nCONNECTIONS = [\n    {\n        # connection information\n        'name': 'client-FIX-test-server',\n        'protocol': 'FIX',\n        'host': 'localhost',\n        'port': 9000,\n\n        'client': 'FixClient',\n        'test-server': 'FixServer',\n        'acts-as-server': 'test-server',\n\n        # protocol information\n        'protocol_version': FIX_4_2['protocol_version'],\n        'binary_fields': FIX_4_2['binary_fields'],\n        'header_fields': FIX_4_2['header_fields'],\n        'required_fields': FIX_4_2['required_fields'],\n        'group_fields': FIX_4_2['group_fields'],\n    },\n]\n\n```\n\n\n### Sample test code\n\nHere is an example of a test.  This test sends a logon message and\nthen a logout message.  In this case, the test tool is running as a\nserver and a client (thus all messages are logged twice, once on the\nsending side and once on the receiving side).\n\nIn a more typical test case, this code would be hidden inside of a base\nclass.  Logon/logout are usually performed within the setup/teardown rather\nthan part of the test proper.\n\n```python\n\nimport logging\n\nfrom fixtest.base.asserts import assert_is_not_none, assert_tag\nfrom fixtest.base.controller import TestCaseController\nfrom fixtest.fix.constants import FIX\nfrom fixtest.fix.messages import logon_message, logout_message\nfrom fixtest.fix.transport import FIXTransportFactory\n\n\nclass LogonController(TestCaseController):\n    \"\"\" The base class for FIX-based TestCaseControllers.\n\n        This creates a client and a server that will\n        communicate with each other.  So they will use\n        the same link config.\n    \"\"\"\n    # pylint: disable=too-many-instance-attributes\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.testcase_id = 'Simple-1'\n        self.description = 'Test of the command-line tool'\n\n        config = kwargs['config']\n\n        self.server_config = config.get_role('test-server')\n        self.server_config.update({'name': 'server-9940'})\n\n        self.server_link_config = config.get_link('client', 'test-server')\n        self.server_link_config.update({\n            'sender_compid': self.server_link_config['test-server'],\n            'target_compid': self.server_link_config['client'],\n            })\n\n        self.client_config = config.get_role('client')\n        self.client_config.update({'name': 'client-9940'})\n\n        self.client_link_config = config.get_link('client', 'test-server')\n        self.client_link_config.update({\n            'sender_compid': self.client_link_config['client'],\n            'target_compid': self.client_link_config['test-server'],\n            })\n\n        self._servers = {}\n        self._clients = {}\n\n        factory = FIXTransportFactory('server-9940',\n                                      self.server_config,\n                                      self.server_link_config)\n        factory.filter_heartbeat = False\n\n        server = {\n            'name': 'server-9940',\n            'port': self.server_link_config['port'],\n            'factory': factory,\n        }\n        self._servers[server['name']] = server\n\n        # In the client case we do not need to provide a\n        # factory, Just need a transport.\n        client = {\n            'name': 'client-9940',\n            'host': self.client_link_config['host'],\n            'port': self.client_link_config['port'],\n            'node': factory.create_transport('client-9940',\n                                             self.client_config,\n                                             self.client_link_config),\n        }\n        self._clients[client['name']] = client\n\n        self._logger = logging.getLogger(__name__)\n\n    def clients(self):\n        \"\"\" The clients that need to be started \"\"\"\n        return self._clients\n\n    def servers(self):\n        \"\"\" The servers that need to be started \"\"\"\n        return self._servers\n\n    def setup(self):\n        \"\"\" For this case, wait until our servers are all\n            connected before continuing with the test.\n        \"\"\"\n        # at this point the servers should be waiting\n        # so startup the clients\n        self.wait_for_client_connections(10)\n        self.wait_for_server_connections(10)\n\n    def teardown(self):\n        pass\n\n    def run(self):\n        \"\"\" This test is a demonstration of logon and\n            heartbeat/TestRequest processing.  Usually\n            the logon process should be done from setup().\n        \"\"\"\n        client = self._clients['client-9940']['node']\n        client.protocol.heartbeat = 5\n        # We only have a single server connection\n        server = self._servers['server-9940']['factory'].servers[0]\n        server.protocol.heartbeat = 5\n\n        # client -> server\n        client.send_message(logon_message(client))\n\n        # server <- client\n        message = server.wait_for_message(title='waiting for logon')\n        assert_is_not_none(message)\n        assert_tag(message, [(35, FIX.LOGON)])\n\n        # server -> client\n        server.send_message(logon_message(server))\n        server.start_heartbeat(True)\n\n        # client <- server\n        message = client.wait_for_message(title='waiting for logon ack')\n        client.start_heartbeat(True)\n        assert_is_not_none(message)\n        assert_tag(message, [(35, FIX.LOGON)])\n\n        # Logout\n        client.send_message(logout_message(client))\n        message = server.wait_for_message(title='waiting for logout')\n        assert_is_not_none(message)\n        assert_tag(message, [(35, FIX.LOGOUT)])\n\n        server.send_message(logout_message(server))\n        server.start_heartbeat(False)\n\n        message = client.wait_for_message('waiting for logout ack')\n        client.start_heartbeat(False)\n        assert_is_not_none(message)\n        assert_tag(message, [(35, FIX.LOGOUT)])\n\n```\n### Running the test\n\nTo run this, use the command line\n\n```\n\tfixtest -c fixtest/simple/simple_config.py fixtest/simple/logon_controller.py\n\n```\n\n\n### Sample output\n\n```\n$ fixtest -c fixtest/simple/simple_config.py fixtest/simple/logon_controller.py\n\n20:43:40.622253: ================\n20:43:40.622346: Starting test: 2022-06-27\n20:43:40.622380:   Module: fixtest/simple/logon_controller.py\n20:43:40.622409:   Controller: LogonController\n20:43:40.622435:   Config: fixtest/simple/simple_config.py\n20:43:40.622607:\n20:43:40.622641:   Test case: Simple-1\n20:43:40.622668:   Description: Test of the command-line tool\n20:43:40.622692: ================\n20:43:40.622718: server:server-9940 starting on port 9940\n20:43:40.623119: fixtest.fix.transport: server:server-9940 listening on port 9940\n20:43:40.623590: client:client-9940 attempting localhost:9940\n20:43:40.626348: client-9940: Connection made\n20:43:40.626417: fixtest.fix.transport: client:client-9940 connected to localhost:9940\n20:43:40.626520: Connected: <class 'fixtest.fix.transport.FIXTransportFactory'> : server-9940\n20:43:40.626706: server-9940: Connection made\n20:43:40.825728: client-9940: message sent\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixClient, 56=FixServer, 98=0, 108=5, 34=1, 52=20220627-20:43:40, 10=044\n\n20:43:40.826382: server-9940: message received\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixClient, 56=FixServer, 98=0, 108=5, 34=1, 52=20220627-20:43:40, 10=044\n\n20:43:40.828124: server-9940: message sent\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixServer, 56=FixClient, 98=0, 108=5, 34=1, 52=20220627-20:43:40, 10=044\n\n20:43:40.828550: client-9940: message received\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixServer, 56=FixClient, 98=0, 108=5, 34=1, 52=20220627-20:43:40, 10=044\n\n20:43:40.828837: client-9940: message sent\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixClient, 56=FixServer, 34=2, 52=20220627-20:43:40, 10=052\n\n20:43:40.829239: server-9940: message received\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixClient, 56=FixServer, 34=2, 52=20220627-20:43:40, 10=052\n\n20:43:40.829514: server-9940: message sent\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixServer, 56=FixClient, 34=2, 52=20220627-20:43:40, 10=052\n\n20:43:40.829935: client-9940: message received\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixServer, 56=FixClient, 34=2, 52=20220627-20:43:40, 10=052\n\n20:43:40.830365: client-9940: Connection lost\n20:43:40.830687: server-9940: Connection lost\n20:43:40.830949: ================\n20:43:40.831028: Test status: ok\n\n\n```\n\n### More sample code\n\nThis is a sample of what the code would like if the logon/logout\ncode were removed and placed in the base class setup/teardown functions.\n\nThus leaving run() to perform the real test work.\n\n```python\n\nimport logging\n\nfrom fixtest.base.asserts import assert_is_not_none\nfrom fixtest.fix.messages import new_order_message, execution_report\n\nfrom fixtest.simple.simple_base import BaseClientServerController\n\n\nclass SimpleClientServerController(BaseClientServerController):\n    \"\"\" The base class for FIX-based TestCaseControllers.\n    \"\"\"\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.testcase_id = 'Simple NewOrder test'\n        self.description = 'Test of the command-line tool'\n\n        self._logger = logging.getLogger(__name__)\n\n    def run(self):\n        \"\"\" Run the test.  Here we send a new_order and\n            then a modify.\n        \"\"\"\n        # client -> server\n        self.client.send_message(\n            new_order_message(self.client,\n                              symbol='abc',\n                              side='0',\n                              order_type='1',\n                              extra_tags=[(38, 100),      # orderQty\n                                          (44, 10), ]))   # price\n\n        # server <- client\n        message = self.server.wait_for_message('waiting for new order')\n        assert_is_not_none(message)\n\n        # server -> client\n        self.server.send_message(\n            execution_report(self.server,\n                             message,\n                             exec_trans_type='0',\n                             exec_type='0',\n                             ord_status='0',\n                             symbol='abc',\n                             side='0',\n                             leaves_qty='100',\n                             cum_qty='0',\n                             avg_px='0'))\n\n        # client <- server\n        message = self.client.wait_for_message('waiting for new order ack')\n        assert_is_not_none(message)\n\n```\n\nHere is the resulting output:\n\n```\n$ fixtest -c fixtest/simple/simple_config.py fixtest/simple/simple_test.py\n\n20:47:29.508560: ================\n20:47:29.508693: Starting test: 2022-06-27\n20:47:29.508736:   Module: fixtest/simple/simple_test.py\n20:47:29.508771:   Controller: SimpleClientServerController\n20:47:29.508802:   Config: fixtest/simple/simple_config.py\n20:47:29.509024:\n20:47:29.509069:   Test case: Simple NewOrder test\n20:47:29.509104:   Description: Test of the command-line tool\n20:47:29.509135: ================\n20:47:29.509168: server:server-9940 starting on port 9940\n20:47:29.509656: fixtest.fix.transport: server:server-9940 listening on port 9940\n20:47:29.510099: client:client-9940 attempting localhost:9940\n20:47:29.512695: Connected: <class 'fixtest.fix.transport.FIXTransportFactory'> : server-9940\n20:47:29.512901: server-9940: Connection made\n20:47:29.513074: client-9940: Connection made\n20:47:29.513142: fixtest.fix.transport: client:client-9940 connected to localhost:9940\n20:47:29.714841: client-9940: message sent\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixClient, 56=FixServer, 98=0, 108=5, 34=1, 52=20220627-20:47:29, 10=055\n\n20:47:29.717093: server-9940: message received\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixClient, 56=FixServer, 98=0, 108=5, 34=1, 52=20220627-20:47:29, 10=055\n\n20:47:29.717503: server-9940: message sent\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixServer, 56=FixClient, 98=0, 108=5, 34=1, 52=20220627-20:47:29, 10=055\n\n20:47:29.718031: client-9940: message received\n    Logon : 8=FIX.4.2, 9=68, 35=A, 49=FixServer, 56=FixClient, 98=0, 108=5, 34=1, 52=20220627-20:47:29, 10=055\n\n20:47:29.718405: client-9940: message sent\n    NewOrderSingle : 8=FIX.4.2, 9=139, 35=D, 49=FixClient, 56=FixServer, 11=client-9940/20220627/1, 21=1, 55=abc, 54=0, 60=20220627-20:47:29, 40=1, 38=100, 44=10, 34=2, 52=20220627-20:47:29, 10=098\n\n20:47:29.718884: server-9940: message received\n    NewOrderSingle : 8=FIX.4.2, 9=139, 35=D, 49=FixClient, 56=FixServer, 11=client-9940/20220627/1, 21=1, 55=abc, 54=0, 60=20220627-20:47:29, 40=1, 38=100, 44=10, 34=2, 52=20220627-20:47:29, 10=098\n\n20:47:29.719284: server-9940: message sent\n    ExecutionReport : (New) : 8=FIX.4.2, 9=224, 35=8, 49=FixServer, 56=FixClient, 11=client-9940/20220627/1, 21=1, 55=abc, 54=0, 60=20220627-20:47:29, 40=1, 38=100, 44=10, 34=2, 52=20220627-20:47:29, 37=server-9940/20220627/2, 17=server-9940/20220627/1, 20=0, 150=0, 39=0, 151=100, 14=0, 6=0, 10=167\n\n20:47:29.719792: client-9940: message received\n    ExecutionReport : (New) : 8=FIX.4.2, 9=224, 35=8, 49=FixServer, 56=FixClient, 11=client-9940/20220627/1, 21=1, 55=abc, 54=0, 60=20220627-20:47:29, 40=1, 38=100, 44=10, 34=2, 52=20220627-20:47:29, 37=server-9940/20220627/2, 17=server-9940/20220627/1, 20=0, 150=0, 39=0, 151=100, 14=0, 6=0, 10=167\n\n20:47:29.720099: client-9940: message sent\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixClient, 56=FixServer, 34=3, 52=20220627-20:47:29, 10=064\n\n20:47:29.720481: server-9940: message received\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixClient, 56=FixServer, 34=3, 52=20220627-20:47:29, 10=064\n\n20:47:29.720759: server-9940: message sent\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixServer, 56=FixClient, 34=3, 52=20220627-20:47:29, 10=064\n\n20:47:29.721129: client-9940: message received\n    Logout : 8=FIX.4.2, 9=57, 35=5, 49=FixServer, 56=FixClient, 34=3, 52=20220627-20:47:29, 10=064\n\n20:47:29.721526: server-9940: Connection lost\n20:47:29.721824: client-9940: Connection lost\n20:47:29.722088: ================\n20:47:29.722160: Test status: ok\n\n```\n\n## Changelog\n\n### 0.2.0\nUpgraded code to Python 3\nMoved simple to fixtest/simple (use fixtest.simple instead of simple)\n\n### 0.1.1\nFixed Issue #1.  Need to append the current directory to sys.path to load\nmodules correctly.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fixtest",
    "package_url": "https://pypi.org/project/fixtest/",
    "platform": null,
    "project_url": "https://pypi.org/project/fixtest/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kennt/fixtest/issues",
      "Homepage": "https://github.com/kennt/fixtest"
    },
    "release_url": "https://pypi.org/project/fixtest/0.2.0/",
    "requires_dist": [
      "twisted (>=22.0.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "FIX (Financial Information eXchange) protocol testing tool",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14274378,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c55ad1294c3952a3b776278b8bc93f94fb441efee5a91b97d911e442aa4d6e8a",
          "md5": "04cae30e4eea5defb869dd6a2cd8fce8",
          "sha256": "64055109442fc99b665c65e648c09e615473d0bb22e46303d9dcaae163838bb4"
        },
        "downloads": -1,
        "filename": "fixtest-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04cae30e4eea5defb869dd6a2cd8fce8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33639,
        "upload_time": "2014-09-27T09:15:56",
        "upload_time_iso_8601": "2014-09-27T09:15:56.488587Z",
        "url": "https://files.pythonhosted.org/packages/c5/5a/d1294c3952a3b776278b8bc93f94fb441efee5a91b97d911e442aa4d6e8a/fixtest-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee663056e623f774faab04b7764c5f94e81b3c3b8695cc8f1d89d7843be1a5a",
          "md5": "e5cc40fc4b3c8a2bfc015104448a0e67",
          "sha256": "4ecee45b364185b89f61877b1ad95f5128f55fe071cd1d3e3391736dc9ccbb39"
        },
        "downloads": -1,
        "filename": "fixtest-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5cc40fc4b3c8a2bfc015104448a0e67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37465,
        "upload_time": "2015-05-12T12:33:28",
        "upload_time_iso_8601": "2015-05-12T12:33:28.707321Z",
        "url": "https://files.pythonhosted.org/packages/7e/e6/63056e623f774faab04b7764c5f94e81b3c3b8695cc8f1d89d7843be1a5a/fixtest-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67a010015beb08f473e0086bec280e9c02d4e6edfa83b2de781dca074f2f8ff9",
          "md5": "cbaecfb4f50489e491b825ae2ee10396",
          "sha256": "9072fc777e0e3e5e902ca86bc731ba759f1198f559906700dc30dc7478e99503"
        },
        "downloads": -1,
        "filename": "fixtest-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cbaecfb4f50489e491b825ae2ee10396",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37750,
        "upload_time": "2016-02-24T07:32:11",
        "upload_time_iso_8601": "2016-02-24T07:32:11.628862Z",
        "url": "https://files.pythonhosted.org/packages/67/a0/10015beb08f473e0086bec280e9c02d4e6edfa83b2de781dca074f2f8ff9/fixtest-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8255301851779ce746d88ae2d553a4f73f8e8eda7c32cc7071be3e7c5e91c419",
          "md5": "0f3d313a906e91efc0e96da2301233f2",
          "sha256": "2af6847dae4747cce322e32d62c4e3b20ffa423e9970eac1943b5a7b97f828aa"
        },
        "downloads": -1,
        "filename": "fixtest-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f3d313a906e91efc0e96da2301233f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 50388,
        "upload_time": "2022-06-28T15:17:30",
        "upload_time_iso_8601": "2022-06-28T15:17:30.923780Z",
        "url": "https://files.pythonhosted.org/packages/82/55/301851779ce746d88ae2d553a4f73f8e8eda7c32cc7071be3e7c5e91c419/fixtest-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8255301851779ce746d88ae2d553a4f73f8e8eda7c32cc7071be3e7c5e91c419",
        "md5": "0f3d313a906e91efc0e96da2301233f2",
        "sha256": "2af6847dae4747cce322e32d62c4e3b20ffa423e9970eac1943b5a7b97f828aa"
      },
      "downloads": -1,
      "filename": "fixtest-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0f3d313a906e91efc0e96da2301233f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 50388,
      "upload_time": "2022-06-28T15:17:30",
      "upload_time_iso_8601": "2022-06-28T15:17:30.923780Z",
      "url": "https://files.pythonhosted.org/packages/82/55/301851779ce746d88ae2d553a4f73f8e8eda7c32cc7071be3e7c5e91c419/fixtest-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}