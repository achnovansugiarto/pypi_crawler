{
  "info": {
    "author": "",
    "author_email": "Nils Quetschlich <nils.quetschlich@tum.de>, Lukas Burgholzer <lukas.burgholzer@jku.at>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"
    ],
    "description": "[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n[![CodeCov](https://github.com/cda-tum/MQTPredictor/actions/workflows/coverage.yml/badge.svg)](https://github.com/cda-tum/MQTPredictor/actions/workflows/coverage.yml)\n[![Deploy to PyPI](https://github.com/cda-tum/MQTPredictor/actions/workflows/deploy.yml/badge.svg)](https://github.com/cda-tum/MQTPredictor/actions/workflows/deploy.yml)\n[![codecov](https://codecov.io/gh/cda-tum/MQTPredictor/branch/main/graph/badge.svg?token=ZL5js1wjrB)](https://codecov.io/gh/cda-tum/MQTPredictor)\n\n<p align=\"center\">\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/cda-tum/mqtpredictor/main/img/mqt_light.png\" width=\"60%\">\n  <img src=\"https://raw.githubusercontent.com/cda-tum/mqtpredictor/main/img/mqt_dark.png\" width=\"60%\">\n</picture>\n</p>\n\n# MQT Predictor: Automatic Prediction of Good Compilation Paths\n\nMQT Predictor is a framework suggesting a compilation options to use for an arbitrary quantum circuit according to the user's needs.\nTo this end, we provide two models for predicting good compilation options and returning the accordingly compiled quantum circuit.\n\n## Supervised Machine Learning Model (referred to as \"ML\")\n\nHere, the problem is treated as a statistical classification task.\nFurthermore, the resulting methodology does not only provide end-users with a prediction on the best compilation options,\nbut additionally provides insights on why certain decisions have been made—allowing them to learn from the predicted results.\n\nFor evaluation of our methodology, seven supervised machine learning classifiers have been used:\n\n- Random Forest\n- Gradient Boosting\n- Decision Tree\n- Nearest Neighbor\n- Multilayer Perceptron\n- Support Vector Machine\n- Naive Bayes\n\nIn our exemplary scenario, the Random Forest classifier achieved the best performance.\n\nThis ML model comprises three main functionalities:\n\n- The pre-trained Random Forest classifier to easily predict compilation options for an unseen quantum circuit\n  in real-time and compile for the respective prediction,\n- all other trained algorithms, and\n- the possibility to adjust and customize the whole training data generation process, e.g., to add training data, compilation options, or adapt the evaluation function.\n\n## Reinforcement Learning Model (referred to as \"RL\")\n\nIn this work, we take advantage of decades of classical compiler optimization and propose a\nreinforcement learning framework for developing optimized quantum circuit compilation flows.\nThrough distinct constraints and a unifying interface, the framework supports the combination of techniques\nfrom different compilers and optimization tools in a single compilation flow.\nThe compilation process is modelled as a Markov Decision Process:\n\n![](https://raw.githubusercontent.com/cda-tum/mqtpredictor/main/img/mdp.png)\n\nIn this implementation, compilation passes from both IBM's Qiskit and Quantinuum's TKET are utilized for the RL training\nof the optimized compiler.\nWe trained one RL model for each of the three optimization criteria of expected fidelity, minimal critical depth, and\nmaximal parallelism.\n\n# Usage of MQT Predictor\n\nFirst, the package must be installed:\n\n```console\n(venv) $ pip install mqt.predictor\n```\n\nNow a prediction can be made for any `qiskit.QuantumCircuit` object or `qasm` file:\n\n```python\nfrom mqt.predictor import ml, rl\n\ncompiled_qc_ML, compilation_info_ML = ml.qcompile(\"qasm_file_path\", model=\"ML\")\ncompiled_qc_RL, compilation_info_RL = rl.qcompile(\n    \"qasm_file_path\", model=\"RL\", opt_objective=\"fidelity\"\n)\n```\n\nIn the RL model, the `opt_objective` options are `fidelity`, `critical_depth`, and `parallelism`.\n\n# Examination of all seven trained classifiers of the ML model\n\nTo play around with all the examined models, please use the `notebooks/ml/evaluation.ipynb` Jupyter notebook.\n\n## Adjustment of training data generation process\n\nThe adjustment of the following parts is possible:\n\n### Compilation Path and Compilation Pipelines\n\nDefinition of the to be considered compilation options for\n\n- chosen qubit technologies,\n- their respective devices,\n- the suitable compilers, and\n- their compilation settings.\n\n### Evaluation Metric\n\nTo make predictions which compilation options are the best ones for a given quantum circuits, a goodness definition is needed.\nIn principle, this evaluation metric can be designed to be arbitrarily complex, e.g., factoring in actual costs of executing quantum circuits on the respective platform or availability limitations for certain devices.\nHowever, any suitable evaluation metric should, at least, consider characteristics of the compiled quantum circuit and the respective device.\nAn exemplary metric could be the overall fidelity of a compiled quantum circuit for its targeted device.\n\n### Generation of Training Data\n\nTo train the model, sufficient training data must be provided as qasm files in the `./training_samples_folder`.\nWe provide the training data used for the pre-trained model.\n\nAfter the adjustment is finished, the following methods need to be called to generate the training data:\n\n```python\nfrom mqt.predictor import ml\n\npredictor = ml.Predictor()\npredictor.generate_compiled_circuits()\nres = predictor.generate_trainingdata_from_qasm_files()\nml.helper.save_training_data(res)\n```\n\nNow, the Random Forest classifier can be trained:\n\n```python\npredictor.train_random_forest_classifier()\n```\n\nAdditionally, the raw training data may be extracted and can be used for any machine learning model:\n\n```python\n(\n    X_train,\n    X_test,\n    y_train,\n    y_test,\n    indices_train,\n    indices_test,\n    names_list,\n    scores_list,\n) = predictor.get_prepared_training_data(save_non_zero_indices=True)\n```\n\n# Repository Structure\n\n```\n.\n├── notebooks/\n│ ├── ml/\n│ │ ├── ...\n│ └── rl/\n│     └── ...\n├── src/\n│ ├── mqt/\n│   └── predictor/\n│     ├── calibration_files/\n│     ├── ml/\n│     │ └── training_data/\n│     │     ├── trained_model\n│     │     ├── training_circuits\n│     │     ├── training_circuits_compiled\n│     │     └── training_data_aggregated\n│     └── rl/\n│          └── training_data/\n│              ├── trained_model\n│              └── training_circuits\n```\n\n# References\n\nIn case you are using MQT Predictor with the ML model in your work, we would be thankful if you referred to it by citing the following publication:\n\n```bibtex\n@misc{quetschlich2022mqtpredictor,\n  title={Predicting Good Quantum Circuit Compilation Options},\n  shorttitle = {{{MQT Predictor}}},\n  author={Quetschlich, Nils and Burgholzer, Lukas and Wille, Robert},\n  year={2022},\n  eprint = {2210.08027},\n  eprinttype = {arxiv},\n  publisher = {arXiv},\n}\n```\n\nIn case you are using the RL model in your work, we would be thankful if you referred to it by citing the following publication:\n\n```bibtex\n@misc{quetschlich2022compoptimizer,\n  title={Compiler Optimization for Quantum Computing Using Reinforcement Learning},\n  author={Quetschlich, Nils and Burgholzer, Lukas and Wille, Robert},\n  year={2022},\n  eprint = {2212.04508},\n  eprinttype = {arxiv},\n  publisher = {arXiv},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "MQT,quantum computing,compilation,machine learning,prediction",
    "license": "MIT License  Copyright (c) 2022 Nils Quetschlich, Lukas Burgholzer, and Robert Wille  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mqt.predictor",
    "package_url": "https://pypi.org/project/mqt.predictor/",
    "platform": null,
    "project_url": "https://pypi.org/project/mqt.predictor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cda-tum/mqtpredictor/issues",
      "Discussions": "https://github.com/cda-tum/mqtpredictor/discussions",
      "Homepage": "https://github.com/cda-tum/mqtpredictor",
      "Research": "https://www.cda.cit.tum.de/research/quantum/"
    },
    "release_url": "https://pypi.org/project/mqt.predictor/1.2.2/",
    "requires_dist": [
      "mqt.bench (>=0.3.0)",
      "sb3-contrib (>=1.6.2)",
      "scikit-learn (>=1.0.2)",
      "tensorboard (>=2.11.0)",
      "importlib-metadata (>=4.4) ; python_version < \"3.10\"",
      "importlib-resources (>=5.0) ; python_version < \"3.10\"",
      "mqt.predictor[test] ; extra == 'coverage'",
      "pytest-cov[toml] ; extra == 'coverage'",
      "mqt.predictor[coverage] ; extra == 'dev'",
      "pytest (>=7) ; extra == 'test'"
    ],
    "requires_python": ">=3.9",
    "summary": "MQT Predictor - A MQT tool for Determining Good Quantum Circuit Compilation Options",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16887826,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53e3b3f5c6832f48ffb2368cec49ed9b38058add82cc9fa1bf59f251c1e28e5c",
          "md5": "3c7de3ddebb3daaae1c85fd8d9dbd63d",
          "sha256": "a6e2b299913f1987ac499130c4ad709dde3e680cb6693b8db9e61aefe37f94f7"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c7de3ddebb3daaae1c85fd8d9dbd63d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 36121075,
        "upload_time": "2022-10-13T12:23:48",
        "upload_time_iso_8601": "2022-10-13T12:23:48.425747Z",
        "url": "https://files.pythonhosted.org/packages/53/e3/b3f5c6832f48ffb2368cec49ed9b38058add82cc9fa1bf59f251c1e28e5c/mqt.predictor-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3e1a51d95beef4605b6870fe64c2e635bf38365094c20da0c6dedccdf00dc0f",
          "md5": "012139ba3d8245e03fef508bab5ea9da",
          "sha256": "ecb351d4edeea793351c72bfe76516b783217a8fc5bc3cef3e2550dc940f710d"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "012139ba3d8245e03fef508bab5ea9da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 36755846,
        "upload_time": "2022-10-13T12:23:53",
        "upload_time_iso_8601": "2022-10-13T12:23:53.261935Z",
        "url": "https://files.pythonhosted.org/packages/d3/e1/a51d95beef4605b6870fe64c2e635bf38365094c20da0c6dedccdf00dc0f/mqt.predictor-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7465279c6ac75ff5ea4fee26b7c2260a60158f8666992438ba8f99a38f14d4ec",
          "md5": "b13c7129029961206aa52589635d9432",
          "sha256": "5bbafff3198d916630872f4fcabff621ed5f51576417eda03240bee0f83ce1f0"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b13c7129029961206aa52589635d9432",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 36121086,
        "upload_time": "2022-10-14T14:03:29",
        "upload_time_iso_8601": "2022-10-14T14:03:29.238149Z",
        "url": "https://files.pythonhosted.org/packages/74/65/279c6ac75ff5ea4fee26b7c2260a60158f8666992438ba8f99a38f14d4ec/mqt.predictor-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0784824e664ba8094645bbc6f2a9d991f5180a7c8543e5bf01424f6dbcbb78cc",
          "md5": "aa2ce35fcf862c7c0332b569e8412346",
          "sha256": "c8aed477cd0347a3fce9d23aa9c38368d89e0c5ddedff2546b6565dce9daf347"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa2ce35fcf862c7c0332b569e8412346",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 36755994,
        "upload_time": "2022-10-14T14:03:33",
        "upload_time_iso_8601": "2022-10-14T14:03:33.640392Z",
        "url": "https://files.pythonhosted.org/packages/07/84/824e664ba8094645bbc6f2a9d991f5180a7c8543e5bf01424f6dbcbb78cc/mqt.predictor-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70153b2670fbc185eddbafc13d3510fcfb09c5e8492beb7ad2b10b86b6a3d985",
          "md5": "8e0fc347a5f0ac61f929fc8234f021be",
          "sha256": "dcf699d9897755af618324d6edd834559e6b65abb993e6856be1e0b436195c03"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e0fc347a5f0ac61f929fc8234f021be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 36653691,
        "upload_time": "2022-12-11T18:32:54",
        "upload_time_iso_8601": "2022-12-11T18:32:54.554064Z",
        "url": "https://files.pythonhosted.org/packages/70/15/3b2670fbc185eddbafc13d3510fcfb09c5e8492beb7ad2b10b86b6a3d985/mqt.predictor-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f33b5f02c93c0767e72bc22bc8cfbe77f1896602ad84cf4493bd79a946e55ac6",
          "md5": "602adef79856cc46454b7454222789b5",
          "sha256": "999b7ffcc0a05329baee54bf06c2dc091d64caba26779295e8745ab0fdc1c928"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "602adef79856cc46454b7454222789b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 37537900,
        "upload_time": "2022-12-11T18:32:59",
        "upload_time_iso_8601": "2022-12-11T18:32:59.436822Z",
        "url": "https://files.pythonhosted.org/packages/f3/3b/5f02c93c0767e72bc22bc8cfbe77f1896602ad84cf4493bd79a946e55ac6/mqt.predictor-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dec17075f928a40ce0a5210cc4622c22865b7a63195efde8e7dab35ceefccb4e",
          "md5": "6b524c937667d626d4aa29a7909f524a",
          "sha256": "865f7da32d8db23eaf05d229b88b451aa51e6c6a81607b3c5ac00e07758ff626"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b524c937667d626d4aa29a7909f524a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 36653832,
        "upload_time": "2023-01-26T12:53:08",
        "upload_time_iso_8601": "2023-01-26T12:53:08.625190Z",
        "url": "https://files.pythonhosted.org/packages/de/c1/7075f928a40ce0a5210cc4622c22865b7a63195efde8e7dab35ceefccb4e/mqt.predictor-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6e442ffaeeb5c02d8829c26ed515780a57b715dd8cb499b3b94298d0ae71db8",
          "md5": "73e954370c1efbbf4a4543b44f4feab2",
          "sha256": "53d7fb1dc46f7a935539c5e30c0ec74f4685dc25a16093a2a7e82792ff6125af"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73e954370c1efbbf4a4543b44f4feab2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 37538237,
        "upload_time": "2023-01-26T12:53:13",
        "upload_time_iso_8601": "2023-01-26T12:53:13.060385Z",
        "url": "https://files.pythonhosted.org/packages/b6/e4/42ffaeeb5c02d8829c26ed515780a57b715dd8cb499b3b94298d0ae71db8/mqt.predictor-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bef475592ac05dcca5d85f1e5b8918ddb9a246830a30e71892dcacde9285f737",
          "md5": "2b14591689acac4965052ec3055a90e3",
          "sha256": "7138fdaf3aabd5530470b1003ad94fd7bd223cfc0ac22b8393b6e94c26de8fc2"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b14591689acac4965052ec3055a90e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19576357,
        "upload_time": "2023-01-31T08:57:33",
        "upload_time_iso_8601": "2023-01-31T08:57:33.952212Z",
        "url": "https://files.pythonhosted.org/packages/be/f4/75592ac05dcca5d85f1e5b8918ddb9a246830a30e71892dcacde9285f737/mqt.predictor-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4636a3141ac34ee164e4fc6330120982afad716fb5934f3a170db83692d34517",
          "md5": "475a644a61570d1d4e64665ef0fdf414",
          "sha256": "5628c59784999671d286a2a58b4a50679c3affcdf53447a57e0a007b7c69edb8"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "475a644a61570d1d4e64665ef0fdf414",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20949439,
        "upload_time": "2023-01-31T08:57:39",
        "upload_time_iso_8601": "2023-01-31T08:57:39.580947Z",
        "url": "https://files.pythonhosted.org/packages/46/36/a3141ac34ee164e4fc6330120982afad716fb5934f3a170db83692d34517/mqt.predictor-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90b45778e3a8617dedefff671b9c12cdb1ff9c5d912b10f7f43035416d2a465e",
          "md5": "44e838288b21813ec3d5ec3dd32e2579",
          "sha256": "6eba8f07c77f1569a67ddfc56be67f166724dbdbf07b7a05b241c39370f86e15"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44e838288b21813ec3d5ec3dd32e2579",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19576361,
        "upload_time": "2023-02-01T18:46:15",
        "upload_time_iso_8601": "2023-02-01T18:46:15.641329Z",
        "url": "https://files.pythonhosted.org/packages/90/b4/5778e3a8617dedefff671b9c12cdb1ff9c5d912b10f7f43035416d2a465e/mqt.predictor-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4faa274fd8a70c7a70a798197df2064bfbd10f5df7b15dc8f659bd21d16b8c31",
          "md5": "f76168fc57b51240f0338851e2145372",
          "sha256": "a91f08dbe67be3ac2b3da8403820eb744df3ac499ef1f0b8ebb3ca820a500440"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f76168fc57b51240f0338851e2145372",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20949461,
        "upload_time": "2023-02-01T18:46:23",
        "upload_time_iso_8601": "2023-02-01T18:46:23.770466Z",
        "url": "https://files.pythonhosted.org/packages/4f/aa/274fd8a70c7a70a798197df2064bfbd10f5df7b15dc8f659bd21d16b8c31/mqt.predictor-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "863f5d2f29051ff3f6c96a18c7c112c2400a3515b1b478fd1256c21f62d11886",
          "md5": "9eec40de7f7ccf555782492472bf6f82",
          "sha256": "77b3f9c09e9dc3d4814bac3226546a38d826c7f49cee0d2ef15f910934c2383f"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9eec40de7f7ccf555782492472bf6f82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19577954,
        "upload_time": "2023-02-16T12:36:59",
        "upload_time_iso_8601": "2023-02-16T12:36:59.027478Z",
        "url": "https://files.pythonhosted.org/packages/86/3f/5d2f29051ff3f6c96a18c7c112c2400a3515b1b478fd1256c21f62d11886/mqt.predictor-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f3e5e7f9f89b46d742d58879080c509dd514c9ed7dcd3899e14c15b11ca3fec",
          "md5": "d7ed7f94e79d1d61051937205e36cc46",
          "sha256": "63006dbf9b75a7a6d498b35f07fca127514dd85207b53dec2341ac39a032a0a7"
        },
        "downloads": -1,
        "filename": "mqt.predictor-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d7ed7f94e79d1d61051937205e36cc46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20949219,
        "upload_time": "2023-02-16T12:37:02",
        "upload_time_iso_8601": "2023-02-16T12:37:02.191095Z",
        "url": "https://files.pythonhosted.org/packages/4f/3e/5e7f9f89b46d742d58879080c509dd514c9ed7dcd3899e14c15b11ca3fec/mqt.predictor-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "863f5d2f29051ff3f6c96a18c7c112c2400a3515b1b478fd1256c21f62d11886",
        "md5": "9eec40de7f7ccf555782492472bf6f82",
        "sha256": "77b3f9c09e9dc3d4814bac3226546a38d826c7f49cee0d2ef15f910934c2383f"
      },
      "downloads": -1,
      "filename": "mqt.predictor-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9eec40de7f7ccf555782492472bf6f82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 19577954,
      "upload_time": "2023-02-16T12:36:59",
      "upload_time_iso_8601": "2023-02-16T12:36:59.027478Z",
      "url": "https://files.pythonhosted.org/packages/86/3f/5d2f29051ff3f6c96a18c7c112c2400a3515b1b478fd1256c21f62d11886/mqt.predictor-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f3e5e7f9f89b46d742d58879080c509dd514c9ed7dcd3899e14c15b11ca3fec",
        "md5": "d7ed7f94e79d1d61051937205e36cc46",
        "sha256": "63006dbf9b75a7a6d498b35f07fca127514dd85207b53dec2341ac39a032a0a7"
      },
      "downloads": -1,
      "filename": "mqt.predictor-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d7ed7f94e79d1d61051937205e36cc46",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 20949219,
      "upload_time": "2023-02-16T12:37:02",
      "upload_time_iso_8601": "2023-02-16T12:37:02.191095Z",
      "url": "https://files.pythonhosted.org/packages/4f/3e/5e7f9f89b46d742d58879080c509dd514c9ed7dcd3899e14c15b11ca3fec/mqt.predictor-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}