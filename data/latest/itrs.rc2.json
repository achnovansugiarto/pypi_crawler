{
  "info": {
    "author": "Louis Dureuil <louis.dureuil@xinra.net>",
    "author_email": "Louis Dureuil <louis.dureuil@xinra.net>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Itrs\n\nRust's iterators in python, implemented in Rust!\n\n`Itrs` is a python native module that exposes to python an `Iterator` interface similar to Rust's [`Iterator` trait](https://doc.rust-lang.org/std/iter/trait.Iterator.html).\n\nThis means that, given the following innocent fibonacci generator:\n\n```py\n>>> def fibo(): \n...     yield 1 \n...     yield 2 \n...     current, next = 1, 2 \n...     while True: \n...         current, next = next, current + next \n...         yield next \n...\n```\n\ninstead of the following python code:\n\n```py\n>>> import itertools\n>>> # Euler problem #2\n>>> sum(x for x in itertools.takewhile(lambda x: x < 4_000_000, fibo()) if x % 2 == 0)\n4613732\n```\n\nyou can now write the following:\n\n```py\n>>> from itrs import Itrs\n>>> (Itrs(fibo()). \n...   take_while(lambda x: x < 4_000_000). \n...   filter(lambda x: x % 2 == 0). \n...   sum(0) \n... ) \n4613732\n```\n\n## But why, you madman?\n\n\nI dislike python's default iterator syntax that uses functions as combinators, because it becomes very difficult to read when using several of them. Some useful combinators and folding functions (such as `count`) are also missing, or available only in itertools.\n\nA second reason is as an exercice in using [PyO3](https://github.com/PyO3/pyo3) and rust's `Iterator` trait. This also allowed me to play with `Result` and `Option` types so I could get the type I wanted in all situations.\n\nAlso, because I'm a madman ðŸ¤ª!\n\n## How do I use this?\n\n### From PyPI\n\nBuild from PyPI is only supported for x64 Linux at the moment.\n\nUsing ~~cargo~~ your favorite python installation method from PyPI:\n\n```bash\n$ pip install itrs\n```\n\nThen, from the virtualenv in which you --obviously-- executed the previous command, open a python interpreter and:\n\n```py\n>>> from itrs import Itrs\n>>>\n>>> # you can create Itrs objects from any iterable\n>>> it_array = Itrs([0, 1, 2])\n>>> it_str = Itrs(\"Intel the Beagle\")\n>>> def i_yield():\n>>>    for i in range(10):\n>>>        yield i\n>>> it_yield = Itrs(i_yield())\n>>> \n>>> # you can iterate on any itrs object using normal python syntax\n>>> for elem in it_array:\n>>>     print(elem)\n0\n1\n2\n>>> # Iterating a second time on a exhausted iterator yields no further result\n>>> for elem in it_array:\n>>>     print(elem)\n\n>>> # you can call methods on Itrs objects to create new iterators or produce results.\n>>> # That's the whole selling point of this!\n>>> it_str.filter(lambda x: x == ' ').count()\n2\n>>> [x for x in it_yield.skip(1).filter(lambda x: x % 2 == 0).map(lambda x: x * x)]\n[4, 16, 36, 64]\n```\n\n### Compiling the library from Rust\n\nCompiling from source *should* work with Linux, Windows or OSX indifferently, but was only tested under Linux.\nAs PyO3 requires nightly at the moment, a nightly toolchain of Rust is required to compile this repository.\n\nThe repository contains a `rust-toolchain` file containing a nightly toolchain that is known to work with the project.\n\nIf using `rustup`, you can install that toolchain with:\n\n```bash\n$ rustup toolchain install nightly-2019-09-04\n```\n\nThen, after cloning the repository, just:\n\n```bash\n$ cargo build --release\n```\n\nAfter the build completes, you will need to rename the produced binary by dropping the `lib` prefix, so it can be imported by python as intended:\n\n```bash\n$ mv target/release/{lib,}itrs.so\n```\n\nAlternatively, you can also build a wheel using [maturin](https://github.com/PyO3/maturin)\n\n```bash\n$ pip install maturin\n$ maturin build --release\n```\n\nand then install the wheel with:\n\n```bash\n$ pip install target/wheels/itrs-0.1.0-cp38-cp38-manylinux1_x86_64.whl\n```\n\nYou're done! You can now import `itrs` from a python shell with the `target/release` directory in your python path.\n\n## Should I use this in production?\n\nNo.\n\n* Even if python iterators suck, they are the standard, and using an external library to reimplement iterators should trigger a \"**WAT?**\" reaction in everyone around you\n* Using python iterators, you can write new function combinators. Adding new combinators to `Itrs` would involve monkey patching, and is not possible since `Itrs` is an extension type. Note that in rust, new combinators can be added using method syntax thanks to the trait system. This is what the [itertools crate](https://docs.rs/itertools/0.8.2/itertools/index.html) does, for example.\n* BTW, all iterator combinators aren't added as of yet.\n* Performance is bad. There are several reasons for this:\n    * Rust uses monomorphization of generic type parameters. This avoid the indirection of runtime polymorphism, and allows to inline the iterator code, which can then enable efficient optimizations at compile time. However, Python being an interpreted language without generics,it cannot take advantage of monomorphization, so the current design performs one allocation per combinator, which is far from efficient.\n    * The current implementation is naive and only attempts to reuse the functions defined by the `Iterator`Â trait as much as possible. It also uses `Rc` rather than PyO3's provided `PyObject`, which might be inefficient considering we're already in the python runtime?\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "itrs",
    "package_url": "https://pypi.org/project/itrs/",
    "platform": "",
    "project_url": "https://pypi.org/project/itrs/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/itrs/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Itrs is a python native module that exposes to python an Iterator interface similar to Rust's Iterator trait. Implemented in Rust.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6521988,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d1e5ba43e1d88efb598c133c83763a235438445254649ccd635813f55ada38c",
          "md5": "5b5b737fc8dddebb91dd2966176fe07e",
          "sha256": "ca38d6a46317ec2454834449b6049a2fe58cb5c7325d1ee00c8e2a789782468e"
        },
        "downloads": -1,
        "filename": "itrs-0.1.0-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "5b5b737fc8dddebb91dd2966176fe07e",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 159380,
        "upload_time": "2020-01-26T13:51:14",
        "upload_time_iso_8601": "2020-01-26T13:51:14.943303Z",
        "url": "https://files.pythonhosted.org/packages/6d/1e/5ba43e1d88efb598c133c83763a235438445254649ccd635813f55ada38c/itrs-0.1.0-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "474743397461f015bcedc4f24aa552f8b5555d8771ffe7810a30ea3b8ce2cc0f",
          "md5": "1878a2f2a5b31ab2b0f68bf607f85c4b",
          "sha256": "b42098587539b22dec0fbd704d879efaaa19e5804031b18c404d7b19eb016770"
        },
        "downloads": -1,
        "filename": "itrs-0.1.1-cp38-cp38-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1878a2f2a5b31ab2b0f68bf607f85c4b",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 161684,
        "upload_time": "2020-01-26T13:59:11",
        "upload_time_iso_8601": "2020-01-26T13:59:11.070958Z",
        "url": "https://files.pythonhosted.org/packages/47/47/43397461f015bcedc4f24aa552f8b5555d8771ffe7810a30ea3b8ce2cc0f/itrs-0.1.1-cp38-cp38-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "474743397461f015bcedc4f24aa552f8b5555d8771ffe7810a30ea3b8ce2cc0f",
        "md5": "1878a2f2a5b31ab2b0f68bf607f85c4b",
        "sha256": "b42098587539b22dec0fbd704d879efaaa19e5804031b18c404d7b19eb016770"
      },
      "downloads": -1,
      "filename": "itrs-0.1.1-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1878a2f2a5b31ab2b0f68bf607f85c4b",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 161684,
      "upload_time": "2020-01-26T13:59:11",
      "upload_time_iso_8601": "2020-01-26T13:59:11.070958Z",
      "url": "https://files.pythonhosted.org/packages/47/47/43397461f015bcedc4f24aa552f8b5555d8771ffe7810a30ea3b8ce2cc0f/itrs-0.1.1-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}