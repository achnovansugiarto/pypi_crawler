{
  "info": {
    "author": "Bogdan Mustiata",
    "author_email": "bogdan.mustiata@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "JSON Schema to Python Classes converter. I created this since it seems\nthe other projects either are abandoned, or they weren’t able to parse\nK8s JSON Schema definitions.\n\nFurthermore this converter generates definitions that ``mypy`` can\nconsume.\n\nInstall\n=======\n\n.. code:: sh\n\n    pip install json2pyclass\n\nUsage\n=====\n\n.. code:: text\n\n    Usage: json2pyclass [OPTIONS] INPUT_FILE OUTPUT_NAME\n\n    Options:\n      --mode TEXT                   Output mode [class|dict]. Dict is not yet\n                                    implemented.  [default: class]\n\n      --optionals / --no-optionals  Disable Optional[] generation.  [default:\n                                    True]\n\n      --help                        Show this message and exit.\n\nThe ``--optionals`` from the actual types can be disabled if the data\nwill be read, and you don’t want to always do ``if`` checks. For example\nin K8s most fields are optional, even namespace names, or metadata. When\nreading these values are always present, so you might want to just be\nable to access them as they are, without having to ``assert`` each value\nto make ``mypy`` happy.\n\nIn the future the plan is to implement also a ``Dict`` writer, that\ndoesn’t dump custom classes. The advantage will be that you could do\nafter this ``json.load_safe`` and just cast to the type.\n\nCurrently this API was created for usage with either ``addict``, or the\nkubeapi part of ``adhesive``, that returns types with the properties as\nregular class \"fields\".\n\nSample\n======\n\nAssuming we have a definition such as:\n\n.. code:: json\n\n    {\n      \"definitions\": {\n        \"io.k8s.api.admissionregistration.v1.MutatingWebhook\": {\n          \"description\": \"MutatingWebhook describes an admission webhook and the resources and operations it applies to.\",\n          \"properties\": {\n            \"admissionReviewVersions\": {\n              \"description\": \"AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\",\n    ...\n\nWe could call:\n\n.. code:: python\n\n    json2pyclass mydefinitions.json mydefinitions.py\n\nAnd this will yield a file with all the types defined in there:\n\n.. code:: python\n\n    from typing import Optional, Union, List, Dict, Any\n\n    class MutatingWebhook:  # io.k8s.api.admissionregistration.v1.MutatingWebhook\n        \"\"\"\n        MutatingWebhook describes an admission webhook and the resources and operations it applies to.\n        \"\"\"\n        admissionReviewVersions: List[str]\n        clientConfig: 'WebhookClientConfig'\n        failurePolicy: str\n        matchPolicy: str\n    # ...\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "json2pyclass",
    "package_url": "https://pypi.org/project/json2pyclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/json2pyclass/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/json2pyclass/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "json2pyclass",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8000006,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa355656009d426379259967c93cc318e3abd7dec76899f4c0f02150ae53e8f4",
          "md5": "da6f2ad0cbfada9403a877a25358e9be",
          "sha256": "a9cfcdf51ba69e01d32581c5d8c1c27c6b78cb6f315abe82c125d1f7390a0b48"
        },
        "downloads": -1,
        "filename": "json2pyclass-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "da6f2ad0cbfada9403a877a25358e9be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5403,
        "upload_time": "2020-08-19T23:04:45",
        "upload_time_iso_8601": "2020-08-19T23:04:45.231432Z",
        "url": "https://files.pythonhosted.org/packages/aa/35/5656009d426379259967c93cc318e3abd7dec76899f4c0f02150ae53e8f4/json2pyclass-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa355656009d426379259967c93cc318e3abd7dec76899f4c0f02150ae53e8f4",
        "md5": "da6f2ad0cbfada9403a877a25358e9be",
        "sha256": "a9cfcdf51ba69e01d32581c5d8c1c27c6b78cb6f315abe82c125d1f7390a0b48"
      },
      "downloads": -1,
      "filename": "json2pyclass-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "da6f2ad0cbfada9403a877a25358e9be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5403,
      "upload_time": "2020-08-19T23:04:45",
      "upload_time_iso_8601": "2020-08-19T23:04:45.231432Z",
      "url": "https://files.pythonhosted.org/packages/aa/35/5656009d426379259967c93cc318e3abd7dec76899f4c0f02150ae53e8f4/json2pyclass-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}