{
  "info": {
    "author": "Brandon Trabucco",
    "author_email": "brandon@btrabucco.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Design-Bench\n\nDesign-Bench is a **benchmarking framework** for solving automatic design problems that involve choosing an input that maximizes a black-box function. This type of optimization is used across scientific and engineering disciplines in ways such as designing proteins and DNA sequences with particular functions, chemical formulas and molecule substructures, the morphology and controllers of robots, and many more applications. \n\nThese applications have significant potential to accelerate research in biochemistry, chemical engineering, materials science, robotics and many other disciplines. We hope this framework serves as a robust platform to drive these applications and create widespread excitement for model-based optimization.\n\n## Offline Model-Based Optimization\n\n![Offline Model-Based Optimization](https://storage.googleapis.com/design-bench/mbo.png)\n\nThe goal of model-based optimization is to find an input **x** that maximizes an unknown black-box function **f**. This function is frequently difficulty or costly to evaluate---such as requiring wet-lab experiments in the case of protein design. In these cases, **f** is described by a set of function evaluations: D = {(x_0, y_0), (x_1, y_1), ... (x_n, y_n)}, and optimization is performed without querying **f** on new data points.\n\n## Installation\n\nDesign-Bench can be installed with the complete set of benchmarks via our pip package.\n\n```bash\nconda install rdkit -c conda-forge\npip install design-bench[all]==2.0.20\npip install morphing-agents==1.5.1\n```\n\nAlternatively, if you do not have MuJoCo, you may opt for a minimal install.\n\n```bash\npip install design-bench==2.0.20\n```\n\n## Available Tasks\n\nIn the below table, we list the supported datasets and objective functions for model-based optimization, where a ✅ indicates that a particular combination has been tested and is available for download from our server.\n\nDataset \\ Oracle | Exact | Gaussian Process | Random Forest | Fully Connected | LSTM | ResNet | Transformer\n---------------- | ----- | ---------------- | ------------- | --------------- | ---- | --- | -----------\nTF Bind 8 | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ✅\nGFP |  | ✅ | ✅ | ✅ | ✅ | ✅ | ✅\nChEMBL |  | ✅ | ✅ | ✅ | ✅ | ✅ | ✅\nUTR |  | ✅ | ✅ | ✅ | ✅ | ✅ | ✅\nHopper Controller | ✅ | ✅ | ✅ | ✅ |  |  | \nSuperconductor |  | ✅ | ✅ | ✅ |  |  | \nAnt Morphology | ✅ | ✅ | ✅ | ✅ |  |  | \nD'Kitty Morphology | ✅ | ✅ | ✅ | ✅ |  |  | \n\nCombinations of datasets and oracles that are not available for download from our server are automatically trained on your machine on task creation. This currently only affects approximate oracles on user-defined MBO tasks. Below we provide the preferred oracle for each task, as well as meta data such as the number of data points measured.\n\nTask Name | Dataset | Oracle | Dataset Size | Spearman's ρ\n--------- | ------- | ------ | ------------ | ----------------\nTFBind8-Exact-v0 | TF Bind 8 | Exact | 65792 | \nGFP-Transformer-v0 | GFP | Transformer | 56086 | 0.8497\nChEMBL-ResNet-v0 | ChEMBL | ResNet | 40516 | 0.3208\nUTR-ResNet-v0 | UTR | ResNet | 280000 | 0.8617\nHopperController-Exact-v0 | Hopper Controller | Exact | 3200 | \nSuperconductor-RandomForest-v0 | Superconductor | Random Forest | 21263 | 0.9155\nAntMorphology-Exact-v0 | Ant Morphology | Exact | 25009 | \nDKittyMorphology-Exact-v0 | D'Kitty Morphology | Exact | 25009 | \n\n## Performance Of Baselines\n\nWe benchmark a set of 9 methods for solving offline model-based optimization problems. Performance is reported in normalized form, where the 100th percentile score of 128 candidate designs is evaluated and normalized such that a 1.0 corresponds to performance equivalent to the best performing design in the *full unobserved* dataset assoctated with each model-based optimization task. A 0.0 corresponds to performance equivalent to the worst performing design in the *full unobserved* dataset. In circumstances where an exact oracle is not available, this *full unobserved* dataset is used for training the approximate oracle that is used for evaluation of candidate designs proposed by each method. The symbol ± indicates the empirical standard deviation of reported performance across 8 trials.\n\nMethod \\ Task                 |            GFP |      TF Bind 8 |            UTR |         ChEMBL \n----------------------------- | -------------- | -------------- | -------------- | --------------\nAuto. CbAS                    |  0.865 ± 0.000 |  0.910 ± 0.044 |  0.650 ± 0.006 |  0.470 ± 0.000 \nCbAS                          |  0.865 ± 0.000 |  0.927 ± 0.051 |  0.650 ± 0.002 |  0.517 ± 0.055 \nBO-qEI                        |  0.254 ± 0.352 |  0.798 ± 0.083 |  0.659 ± 0.000 |  0.333 ± 0.035 \nCMA-ES                        |  0.054 ± 0.002 |  0.953 ± 0.022 |  0.666 ± 0.004 |  0.350 ± 0.017 \nGrad.                         |  0.864 ± 0.001 |  0.977 ± 0.025 |  0.639 ± 0.009 |  0.360 ± 0.029 \nGrad. Min                     |  0.864 ± 0.000 |  0.984 ± 0.012 |  0.647 ± 0.007 |  0.361 ± 0.004 \nGrad. Mean                    |  0.864 ± 0.000 |  0.986 ± 0.012 |  0.647 ± 0.005 |  0.373 ± 0.013 \nMINs                          |  0.865 ± 0.001 |  0.905 ± 0.052 |  0.649 ± 0.004 |  0.473 ± 0.057 \nREINFORCE                     |  0.865 ± 0.000 |  0.948 ± 0.028 |  0.646 ± 0.005 |  0.459 ± 0.036 \n\nPerformance On Discrete Tasks.\n\nMethod \\ Task                 | Superconductor | Ant Morphology | D'Kitty Morphology | Hopper Controller \n----------------------------- | -------------- | -------------- | ------------------ | -----------------\nAuto. CbAS                    |  0.421 ± 0.045 |  0.884 ± 0.046 |      0.906 ± 0.006 |     0.137 ± 0.005 \nCbAS                          |  0.503 ± 0.069 |  0.879 ± 0.032 |      0.892 ± 0.008 |     0.141 ± 0.012 \nBO-qEI                        |  0.402 ± 0.034 |  0.820 ± 0.000 |      0.896 ± 0.000 |     0.550 ± 0.118 \nCMA-ES                        |  0.465 ± 0.024 |  1.219 ± 0.738 |      0.724 ± 0.001 |     0.604 ± 0.215 \nGrad.                         |  0.518 ± 0.024 |  0.291 ± 0.023 |      0.874 ± 0.022 |     1.035 ± 0.482 \nGrad. Min                     |  0.506 ± 0.009 |  0.478 ± 0.064 |      0.889 ± 0.011 |     1.391 ± 0.589 \nGrad. Mean                    |  0.499 ± 0.017 |  0.444 ± 0.081 |      0.892 ± 0.011 |     1.586 ± 0.454 \nMINs                          |  0.469 ± 0.023 |  0.916 ± 0.036 |      0.945 ± 0.012 |     0.424 ± 0.166 \nREINFORCE                     |  0.481 ± 0.013 |  0.263 ± 0.032 |      0.562 ± 0.196 |    -0.020 ± 0.067 \n\nPerformance On Continuous Tasks.\n\n## Reproducing Baseline Performance\n\nIn order to reproduce this table, you must first install the implementation of the baseline algorithms.\n\n```bash\ngit clone https://github.com/brandontrabucco/design-baselines\nconda env create -f design-baselines/environment.yml\nconda activate design-baselines\n```\n\nYou may then run the following series of commands in a bash terminal using the command-line interface exposed in design-baselines. Also, please ensure that the conda environment `design-baselines` is activated in the bash session that you run these commands from in order to access the `design-baselines` command-line interface.\n\n```bash\n# set up machine parameters\nNUM_CPUS=32\nNUM_GPUS=8\n\nfor TASK_NAME in \\\n    gfp \\\n    tf-bind-8 \\\n    utr \\\n    chembl \\\n    superconductor \\\n    ant \\\n    dkitty \\\n    hopper; do\n    \n  for ALGORITHM_NAME in \\\n      autofocused-cbas \\\n      cbas \\\n      bo-qei \\\n      cma-es \\\n      gradient-ascent \\\n      gradient-ascent-min-ensemble \\\n      gradient-ascent-mean-ensemble \\\n      mins \\\n      reinforce; do\n  \n    # launch several model-based optimization algorithms using the command line interface\n    # for example: \n    # (design-baselines) name@computer:~/$ cbas gfp \\\n    #                                        --local-dir ~/db-results/cbas-gfp \\\n    #                                        --cpus 32 \\\n    #                                        --gpus 8 \\\n    #                                        --num-parallel 8 \\\n    #                                        --num-samples 8\n    $ALGORITHM_NAME $TASK_NAME \\\n      --local-dir ~/db-results/$ALGORITHM_NAME-$TASK_NAME \\\n      --cpus $NUM_CPUS \\\n      --gpus $NUM_GPUS \\\n      --num-parallel 8 \\\n      --num-samples 8\n    \n  done\n  \ndone\n\n# generate the main performance table of the paper\ndesign-baselines make-table --dir ~/db-results/ --percentile 100th\n\n# generate the performance tables in the appendix\ndesign-baselines make-table --dir ~/db-results/ --percentile 50th\ndesign-baselines make-table --dir ~/db-results/ --percentile 100th --no-normalize\n```\n\nThese commands will run several model-based optimization algorithms (such as [CbAS](http://proceedings.mlr.press/v97/brookes19a.html)) contained in design-baselines on all tasks released with the design-bench benchmark, and will then generate three performance tables from those results, and print a latex rendition of these performance tables to stdout.\n\n## The Train-Test Discrepency\n\nFor tasks where an exact numerical ground truth is not available for evaluating the performance of previously unseen candidate designs, we provide several families of approximate oracle models that have been trained using a larger *held out* dataset of designs x and corresponding scores y.\n\nUsing a learned oracle for evaluation and training an MBO method using real data creates a train-test discrepency. This discrepency can be avoided by *relabelling* the y values in an offline MBO dataset with the predictions of the learned oracle, which is controlled by the following parameter when building a task.\n\n```python\nimport design_bench\n\n# instantiate the task using y values generated from the learned oracle\ntask = design_bench.make('GFP-Transformer-v0', relabel=True)\n\n# instantiate the task using y values generated from real experiments\ntask = design_bench.make('GFP-Transformer-v0', relabel=False)\n```\n\n## Task API\n\nDesign-Bench tasks share a common interface specified in **design_bench/task.py**, which exposes a set of input designs **task.x** and a set of output predictions **task.y**. In addition, the performance of a new set of input designs (such as those output from a model-based optimization algorithm) can be found using **y = task.predict(x)**.\n\n```python\nimport design_bench\ntask = design_bench.make('TFBind8-Exact-v0')\n\ndef solve_optimization_problem(x0, y0):\n    return x0  # solve a model-based optimization problem\n\n# solve for the best input x_star and evaluate it\nx_star = solve_optimization_problem(task.x, task.y)\ny_star = task.predict(x_star)\n```\n\nMany datasets of interest to practitioners are too large to load in memory all at once, and so the task interface defines an several iterables that load samples from the dataset incrementally.\n \n ```python\nimport design_bench\ntask = design_bench.make('TFBind8-Exact-v0')\n\nfor x, y in task:\n    pass  # train a model here\n    \nfor x, y in task.iterate_batches(32):\n    pass  # train a model here\n    \nfor x, y in task.iterate_samples():\n    pass  # train a model here\n ```\n \nCertain optimization algorithms require a particular input format, and so tasks support normalization of both **task.x** and **task.y**, as well as conversion of **task.x** from discrete tokens to the logits of a categorical probability distribution---needed when optimizing **x** with a gradient-based model-based optimization algorithm.\n \n ```python\nimport design_bench\ntask = design_bench.make('TFBind8-Exact-v0')\n\n# convert x to logits of a categorical probability distribution\ntask.map_to_logits()\ndiscrete_x = task.to_integers(task.x)\n\n# normalize the inputs to have zero mean and unit variance\ntask.map_normalize_x()\noriginal_x = task.denormalize_x(task.x)\n\n# normalize the outputs to have zero mean and unit variance\ntask.map_normalize_y()\noriginal_y = task.denormalize_y(task.y)\n\n# remove the normalization applied to the outputs\ntask.map_denormalize_y()\nnormalized_y = task.normalize_y(task.y)\n\n# remove the normalization applied to the inputs\ntask.map_denormalize_x()\nnormalized_x = task.normalize_x(task.x)\n\n# convert x back to integers\ntask.map_to_integers()\ncontinuous_x = task.to_logits(task.x)\n ```\n \nEach task provides access to the model-based optimization dataset used to learn the oracle (where applicable) as well as the oracle itself, which includes metadata for how it was trained (where applicable). These provide fine-grain control over the data distribution for model-based optimization.\n \n ```python\nimport design_bench\ntask = design_bench.make('GFP-GP-v0')\n\n# an instance of the DatasetBuilder class from design_bench.datasets.dataset_builder\ndataset = task.dataset\n\n# modify the distribution of the task dataset\ndataset.subsample(max_samples=10000, \n                   distribution=\"uniform\",\n                   min_percentile=10, \n                   max_percentile=90)\n\n# an instance of the OracleBuilder class from design_bench.oracles.oracle_builder\noracle = task.oracle\n\n# check how the model was fit\nprint(oracle.params[\"rank_correlation\"],\n       oracle.params[\"model_kwargs\"],\n       oracle.params[\"split_kwargs\"])\n ```\n\n## Dataset API\n\nDatasets provide a model-based optimization algorithm with information about the black-box function, and are used in design bench to fit approximate oracle models when an exact oracle is not available. All datasets inherit from the DatasetBuilder class defined in *design_bench.datasets.dataset_builder*.\n\nAll datasets implement methods for modifying the format and distribution of the dataset, including normalization, subsampling, relabelling the outputs, and (for discrete datasets) converting discrete inputs to real-valued. There are also special methods for splitting the dataset into a training and validation set.\n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.datasets.discrete.gfp_dataset import GFPDataset\ndataset = GFPDataset()\n\n# convert x to logits of a categorical probability distribution\ndataset.map_to_logits()\ndiscrete_x = dataset.to_integers(dataset.x)\n\n# normalize the inputs to have zero mean and unit variance\ndataset.map_normalize_x()\noriginal_x = dataset.denormalize_x(dataset.x)\n\n# normalize the outputs to have zero mean and unit variance\ndataset.map_normalize_y()\noriginal_y = dataset.denormalize_y(dataset.y)\n\n# remove the normalization applied to the outputs\ndataset.map_denormalize_y()\nnormalized_y = dataset.normalize_y(dataset.y)\n\n# remove the normalization applied to the inputs\ndataset.map_denormalize_x()\nnormalized_x = dataset.normalize_x(dataset.x)\n\n# convert x back to integers\ndataset.map_to_integers()\ncontinuous_x = dataset.to_logits(dataset.x)\n\n# modify the distribution of the dataset\ndataset.subsample(max_samples=10000, \n                   distribution=\"uniform\",\n                   min_percentile=10, \n                   max_percentile=90)\n\n# change the outputs as a function of their old values\ndataset.relabel(lambda x, y: y ** 2 - 2.0 * y)\n\n# split the dataset into a validation set\ntraining, validation = dataset.split(val_fraction=0.1)\n```\n\n</details>\n\nIf you would like to define your own dataset for use with design-bench, you can directly instantiate a continuous dataset or a discrete dataset depending on the input format you are using. The DiscreteDataset class and ContinuousDataset are built with this in mind, and accept both two numpy arrays containing inputs *x* outputs *y*.\n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.datasets.discrete_dataset import DiscreteDataset\nfrom design_bench.datasets.continuous_dataset import ContinuousDataset\nimport numpy as np\n\n# create dummy inputs and outputs for model-based optimization\nx = np.random.randint(500, size=(5000, 43))\ny = np.random.uniform(size=(5000, 1))\n\n# create a discrete dataset for those inputs and outputs\ndataset = DiscreteDataset(x, y)\n\n# create dummy inputs and outputs for model-based optimization\nx = np.random.uniform(size=(5000, 871))\ny = np.random.uniform(size=(5000, 1))\n\n# create a continuous dataset for those inputs and outputs\ndataset = ContinuousDataset(x, y)\n```\n\n</details>\n\nIn the event that you are using a dataset that is saved to a set of sharded numpy files (ending in .npy), you may also create dataset by providing a list of shard files representing using the DiskResource class. The DiscreteDataset class and ContinuousDataset accept two lists of sharded inputs *x* and outputs *y* represented by DiskResource objects.\n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.disk_resource import DiskResource\nfrom design_bench.datasets.discrete_dataset import DiscreteDataset\nfrom design_bench.datasets.continuous_dataset import ContinuousDataset\nimport os\nimport numpy as np\n\n# list the disk resource for each shard\nos.makedirs(\"new_dataset/\")\nx = [DiskResource(\"new_dataset/shard-x-0.npy\"), \n     DiskResource(\"new_dataset/shard-x-1.npy\")]\ny = [DiskResource(\"new_dataset/shard-y-0.npy\"), \n     DiskResource(\"new_dataset/shard-y-1.npy\")]\n\n# create dummy inputs and outputs for model-based optimization\nxs = np.random.randint(500, size=(5000, 43))\nys = np.random.uniform(size=(5000, 1))\n\n# save the dataset to a set of shard files\nnp.save(\"new_dataset/shard-x-0.npy\", xs[:3000])\nnp.save(\"new_dataset/shard-x-1.npy\", xs[3000:])\nnp.save(\"new_dataset/shard-y-0.npy\", ys[:3000])\nnp.save(\"new_dataset/shard-y-1.npy\", ys[3000:])\n\n# create a discrete dataset for those inputs and outputs\ndataset = DiscreteDataset(x, y)\n\n# create dummy inputs and outputs for model-based optimization\nxs = np.random.uniform(size=(5000, 871))\nys = np.random.uniform(size=(5000, 1))\n\n# save the dataset to a set of shard files\nnp.save(\"new_dataset/shard-x-0.npy\", xs[:3000])\nnp.save(\"new_dataset/shard-x-1.npy\", xs[3000:])\nnp.save(\"new_dataset/shard-y-0.npy\", ys[:3000])\nnp.save(\"new_dataset/shard-y-1.npy\", ys[3000:])\n\n# create a continuous dataset for those inputs and outputs\ndataset = ContinuousDataset(x, y)\n```\n\n</details>\n\n## Oracle API\n\nOracles provide a way of measuring the performance of candidate solutions to a model-based optimization problem, found by a model-based optimization algorithm, without having to perform additional real-world experiments. To this end, oracle implement a prediction function **oracle.predict(x)** that takes a set of designs and makes a prediction about their performance. The goal of model-based optimization is to maximize the predictions of the oracle. \n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.datasets.discrete.gfp_dataset import GFPDataset\nfrom design_bench.oracles.tensorflow import TransformerOracle\n\n# create a dataset and a noisy oracle\ndataset = GFPDataset()\noracle = TransformerOracle(dataset, noise_std=0.1)\n\ndef solve_optimization_problem(x0, y0):\n    return x0  # solve a model-based optimization problem\n\n# evaluate the performance of the solution x_star\nx_star = solve_optimization_problem(dataset.x, dataset.y)\ny_star = oracle.predict(x_star)\n```\n\n</details>\n\nIn order to handle when an exact ground truth is unknown or not tractable to evaluate, Design-Bench provides a set of approximate oracles including a Gaussian Process, Random Forest, and several deep neural network architectures specialized to particular data modalities. These approximate oracles may have the following parameters.\n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.datasets.discrete.gfp_dataset import GFPDataset\nfrom design_bench.oracles.tensorflow import TransformerOracle\n\n# parameters for the transformer architecture\nmodel_kwargs=dict(\n    hidden_size=64,\n    feed_forward_size=256,\n    activation='relu',\n    num_heads=2,\n    num_blocks=4,\n    epochs=20,\n    shuffle_buffer=60000,\n    learning_rate=0.0001,\n    dropout_rate=0.1)\n\n# parameters for building the validation set\nsplit_kwargs=dict(\n    val_fraction=0.1,\n    subset=None,\n    shard_size=5000,\n    to_disk=True,\n    disk_target=\"gfp/split\",\n    is_absolute=False)\n    \n# create a transformer oracle for the GFP dataset\ndataset = GFPDataset()\noracle = TransformerOracle(\n    dataset, \n    noise_std=0.0,\n    \n    # parameters for ApproximateOracle subclasses\n    disk_target=\"new_model.zip\",\n    is_absolute=True,\n    fit=True,\n    max_samples=None,\n    distribution=None,\n    max_percentile=100,\n    min_percentile=0,\n    model_kwargs=model_kwargs,\n    split_kwargs=split_kwargs)\n\ndef solve_optimization_problem(x0, y0):\n    return x0  # solve a model-based optimization problem\n\n# evaluate the performance of the solution x_star\nx_star = solve_optimization_problem(dataset.x, dataset.y)\ny_star = oracle.predict(x_star)\n```\n\n</details>\n\n## Defining New MBO Tasks\n\nNew model-based optimization tasks are simple to create and register with design-bench. By subclassing either DiscreteDataset or ContinuousDataset, and providing either a pair of numpy arrays containing inputs and outputs, or a pair of lists of DiskResource shards containing inputs and outputs, you can define your own model-based optimization dataset class. Once a custom dataset class is created, you can register it as a model-based optimization task by choosing an appropriate oracle type, and making a call to the register function. After doing so, subsequent calls to **design_bench.make** can find your newly registered model-based optimization task.\n\n<details>\n\n<summary>Display code snippet</summary>\n\n```python\nfrom design_bench.datasets.continuous_dataset import ContinuousDataset\nimport design_bench\nimport numpy as np\n\n# define a custom dataset subclass of ContinuousDataset\nclass QuadraticDataset(ContinuousDataset):\n\n    def __init__(self, **kwargs):\n    \n        # define a set of inputs and outputs of a quadratic function\n        x = np.random.normal(0.0, 1.0, (5000, 7))\n        y = (x ** 2).sum(keepdims=True)\n        \n        # pass inputs and outputs to the base class\n        super(QuadraticDataset, self).__init__(x, y, **kwargs)\n\n# parameters used for building the validation set\nsplit_kwargs=dict(\n    val_fraction=0.1,\n    subset=None,\n    shard_size=5000,\n    to_disk=True,\n    disk_target=\"quadratic/split\",\n    is_absolute=True)\n\n# parameters used for building the model\nmodel_kwargs=dict(\n    hidden_size=512,\n    activation='relu',\n    num_layers=2,\n    epochs=5,\n    shuffle_buffer=5000,\n    learning_rate=0.001)\n\n# keyword arguments for building the dataset\ndataset_kwargs=dict(\n    max_samples=None,\n    distribution=None,\n    max_percentile=80,\n    min_percentile=0)\n\n# keyword arguments for training FullyConnected oracle\noracle_kwargs=dict(\n    noise_std=0.0,\n    max_samples=None,\n    distribution=None,\n    max_percentile=100,\n    min_percentile=0,\n    split_kwargs=split_kwargs,\n    model_kwargs=model_kwargs)\n\n# register the new dataset with design_bench\ndesign_bench.register(\n    'Quadratic-FullyConnected-v0', QuadraticDataset,\n    'design_bench.oracles.tensorflow:FullyConnectedOracle',\n    dataset_kwargs=dataset_kwargs, oracle_kwargs=oracle_kwargs)\n                 \n# build the new task (and train a model)         \ntask = design_bench.make(\"Quadratic-FullyConnected-v0\")\n\ndef solve_optimization_problem(x0, y0):\n    return x0  # solve a model-based optimization problem\n\n# evaluate the performance of the solution x_star\nx_star = solve_optimization_problem(task.x, task.y)\ny_star = task.predict(x_star)\n```\n\n</details>\n\n## Citation\n\nThanks for using our benchmark, and please cite our paper!\n\n```\n@misc{\n    trabucco2021designbench,\n    title={Design-Bench: Benchmarks for Data-Driven Offline Model-Based Optimization},\n    author={Brandon Trabucco and Aviral Kumar and Xinyang Geng and Sergey Levine},\n    year={2021},\n    url={https://openreview.net/forum?id=cQzf26aA3vM}\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/brandontrabucco/design-bench/archive/v2_0_20.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brandontrabucco/design-bench",
    "keywords": "Deep Learning,Neural Networks,Benchmark,Model-Based Optimization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "design-bench",
    "package_url": "https://pypi.org/project/design-bench/",
    "platform": "",
    "project_url": "https://pypi.org/project/design-bench/",
    "project_urls": {
      "Download": "https://github.com/brandontrabucco/design-bench/archive/v2_0_20.tar.gz",
      "Homepage": "https://github.com/brandontrabucco/design-bench"
    },
    "release_url": "https://pypi.org/project/design-bench/2.0.20/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Design-Bench: Benchmarks for Data-Driven Offline Model-Based Optimization",
    "version": "2.0.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11806677,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41532cd0928e050fce7da8617633818315ebb37e1e98bbe59384d1f2dfd0ffb4",
          "md5": "6714dcae179ed963555dcc26b121ee07",
          "sha256": "5a1574d9c876bd13c1b032763c65f54ddb2444a52de8f5743aae1bddb8b9c2a4"
        },
        "downloads": -1,
        "filename": "design-bench-1.0-4.tar.gz",
        "has_sig": false,
        "md5_digest": "6714dcae179ed963555dcc26b121ee07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16433,
        "upload_time": "2020-10-04T02:51:18",
        "upload_time_iso_8601": "2020-10-04T02:51:18.653858Z",
        "url": "https://files.pythonhosted.org/packages/41/53/2cd0928e050fce7da8617633818315ebb37e1e98bbe59384d1f2dfd0ffb4/design-bench-1.0-4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55f0566df46adfe9c30e8fc65a5589fbdb80ca606296d0702dd935067e08472e",
          "md5": "363a30c2abfd0be102fb1f8b41017852",
          "sha256": "ff4853e55d372356cc10a1731ef7260aac72144f1a27acd22c3aeb49adaac51a"
        },
        "downloads": -1,
        "filename": "design-bench-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "363a30c2abfd0be102fb1f8b41017852",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16403,
        "upload_time": "2020-10-14T05:43:58",
        "upload_time_iso_8601": "2020-10-14T05:43:58.891374Z",
        "url": "https://files.pythonhosted.org/packages/55/f0/566df46adfe9c30e8fc65a5589fbdb80ca606296d0702dd935067e08472e/design-bench-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc13f3d865eb9a07bed418bb4bcbf434c325ce63a92f74e22ab798687b09e893",
          "md5": "39edb44775ce4a9b84c648b914ed9ee4",
          "sha256": "77584ebbb96946573538907d6c3b742a5a1e2a3cad92b6d1bbe4247849b90479"
        },
        "downloads": -1,
        "filename": "design-bench-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "39edb44775ce4a9b84c648b914ed9ee4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17368,
        "upload_time": "2020-11-17T00:04:12",
        "upload_time_iso_8601": "2020-11-17T00:04:12.744936Z",
        "url": "https://files.pythonhosted.org/packages/fc/13/f3d865eb9a07bed418bb4bcbf434c325ce63a92f74e22ab798687b09e893/design-bench-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96bbfaac53701cb1eeba0ec320ad7311bfd7be8618ce20ca6d8cbfaddc1439ce",
          "md5": "9cb21cb39d077ccfe07cf8d31fce8cc2",
          "sha256": "97170551f9d28b94d55340f17faf62bf41d866e0d3c2dbe7e6a34fb3c2d94e5a"
        },
        "downloads": -1,
        "filename": "design-bench-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9cb21cb39d077ccfe07cf8d31fce8cc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17370,
        "upload_time": "2021-01-25T23:02:07",
        "upload_time_iso_8601": "2021-01-25T23:02:07.062761Z",
        "url": "https://files.pythonhosted.org/packages/96/bb/faac53701cb1eeba0ec320ad7311bfd7be8618ce20ca6d8cbfaddc1439ce/design-bench-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "453774742b86f0e7d810cfdb17e8d1d3981400cf8ac73266244669f25b84d197",
          "md5": "bf46ce9a2782b63f9560d19ced096d4a",
          "sha256": "fd2a67a459df5c4eca24b4315bc81556098521e074683c3fb33823a4c6547c57"
        },
        "downloads": -1,
        "filename": "design-bench-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bf46ce9a2782b63f9560d19ced096d4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17514,
        "upload_time": "2021-01-25T23:30:30",
        "upload_time_iso_8601": "2021-01-25T23:30:30.596456Z",
        "url": "https://files.pythonhosted.org/packages/45/37/74742b86f0e7d810cfdb17e8d1d3981400cf8ac73266244669f25b84d197/design-bench-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc41a712bbec1b9a47d1582d1549d7b86bac8ddf3e9ebfd381a06162c3313a2a",
          "md5": "44633dfce3c064b3d082242c53176111",
          "sha256": "9e46ec72c4e625f8836d8763535694d1656d3d00e56f0ccefb58df1b411d1260"
        },
        "downloads": -1,
        "filename": "design-bench-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "44633dfce3c064b3d082242c53176111",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19072,
        "upload_time": "2021-03-25T07:13:22",
        "upload_time_iso_8601": "2021-03-25T07:13:22.151647Z",
        "url": "https://files.pythonhosted.org/packages/bc/41/a712bbec1b9a47d1582d1549d7b86bac8ddf3e9ebfd381a06162c3313a2a/design-bench-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5227aa3d59c71fcdd9003ac87d018f2fdfd18a7e4885081e2d68e16e177390fc",
          "md5": "b61660437f1edf9890bea756b30fb1a2",
          "sha256": "d4de512bc442d2f30d7be1b579b5326284fe1a9860c0232c719d34fbc02c150b"
        },
        "downloads": -1,
        "filename": "design-bench-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b61660437f1edf9890bea756b30fb1a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19078,
        "upload_time": "2021-03-26T21:05:06",
        "upload_time_iso_8601": "2021-03-26T21:05:06.594787Z",
        "url": "https://files.pythonhosted.org/packages/52/27/aa3d59c71fcdd9003ac87d018f2fdfd18a7e4885081e2d68e16e177390fc/design-bench-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "642a9f30daf164b35aa6f868195c3c0eae47160fac2ff574b01f1e70a31f10f3",
          "md5": "8e8e284aab08aed8dedca8221540443d",
          "sha256": "e30406575a6c34685b3b1e4a41733d634a27b1361b0a745c30b08bb6bf27cfaa"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e8e284aab08aed8dedca8221540443d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63215,
        "upload_time": "2021-05-23T20:09:54",
        "upload_time_iso_8601": "2021-05-23T20:09:54.106952Z",
        "url": "https://files.pythonhosted.org/packages/64/2a/9f30daf164b35aa6f868195c3c0eae47160fac2ff574b01f1e70a31f10f3/design-bench-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "074dad2e4ca8524ac4ba1b0160513515c249e8744d8b7b774b8b80de3eadeeb5",
          "md5": "06d7a29a2a04660d97f899965fb1c4c1",
          "sha256": "a6e26d6450dd786aaf57a0a01e7411b839a6657079b93a0fd9c55534a56fadf6"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06d7a29a2a04660d97f899965fb1c4c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63179,
        "upload_time": "2021-05-24T05:13:34",
        "upload_time_iso_8601": "2021-05-24T05:13:34.592711Z",
        "url": "https://files.pythonhosted.org/packages/07/4d/ad2e4ca8524ac4ba1b0160513515c249e8744d8b7b774b8b80de3eadeeb5/design-bench-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30bd6604b8c5c7c24ea62c0a0ad6183e22737a3f5370316036d8e9b2e9318cc2",
          "md5": "190bfde60121427dfb486cb0c83999a9",
          "sha256": "ce4f641bfe029e417ce05c9e450ac96f6e00ef5daad6e04f5d17c05a289c1f4f"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "190bfde60121427dfb486cb0c83999a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64900,
        "upload_time": "2021-06-07T03:21:49",
        "upload_time_iso_8601": "2021-06-07T03:21:49.402437Z",
        "url": "https://files.pythonhosted.org/packages/30/bd/6604b8c5c7c24ea62c0a0ad6183e22737a3f5370316036d8e9b2e9318cc2/design-bench-2.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ebe6eed350d87e8fcc950b5076cfc038de3932421031fa215879be0da5f162",
          "md5": "6728d8eb65dd80efa63961940da695f0",
          "sha256": "705e5559c502e00bd3068753af9f351332df02682ef1542552973ad6f1bc198a"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "6728d8eb65dd80efa63961940da695f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64819,
        "upload_time": "2021-06-07T07:30:31",
        "upload_time_iso_8601": "2021-06-07T07:30:31.910788Z",
        "url": "https://files.pythonhosted.org/packages/30/eb/e6eed350d87e8fcc950b5076cfc038de3932421031fa215879be0da5f162/design-bench-2.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38c40e637ebc105134a9d987964e442bbce84cb91491cf779802da06663f81a5",
          "md5": "99df3c0cd55a62fd6e9a28e6128b25f4",
          "sha256": "d884294fdadc2a8da3bc600d429a36a19d2fb4a658239b1dd920c50cd7f2f0c2"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "99df3c0cd55a62fd6e9a28e6128b25f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70008,
        "upload_time": "2021-07-08T13:40:07",
        "upload_time_iso_8601": "2021-07-08T13:40:07.205740Z",
        "url": "https://files.pythonhosted.org/packages/38/c4/0e637ebc105134a9d987964e442bbce84cb91491cf779802da06663f81a5/design-bench-2.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f69f2a68239ed739a585b39c304cd11649c153ecd932a35667038ca4a7c84d",
          "md5": "cb3b5e6364021cb159b751c1b11b5f49",
          "sha256": "7e5afc5fd9d55511dc3fdf480aed91a0c401a216e50803f691cca78f0d5013be"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "cb3b5e6364021cb159b751c1b11b5f49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72971,
        "upload_time": "2021-08-25T21:53:35",
        "upload_time_iso_8601": "2021-08-25T21:53:35.533225Z",
        "url": "https://files.pythonhosted.org/packages/e4/f6/9f2a68239ed739a585b39c304cd11649c153ecd932a35667038ca4a7c84d/design-bench-2.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f62fd5cbe441cb50b66cef0fa33602c7060226fc1360530238c505dea98bd0",
          "md5": "61941ca12df6d09a262e96ea597fe8d5",
          "sha256": "1d1de6c545066998b26b103e4f2d84ea7e1f9224c50cb5513e8cdb8c3f30fed2"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "61941ca12df6d09a262e96ea597fe8d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73117,
        "upload_time": "2021-08-26T06:01:14",
        "upload_time_iso_8601": "2021-08-26T06:01:14.318665Z",
        "url": "https://files.pythonhosted.org/packages/80/f6/2fd5cbe441cb50b66cef0fa33602c7060226fc1360530238c505dea98bd0/design-bench-2.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8dd3be8602950d6300aae2ed8b947e5c77c1050c521c6fe647638a0591ed16f",
          "md5": "085c540f21debf59c096cb5b30fe6cde",
          "sha256": "3d0b41c0dfa3c9a2074a752d67b0db2d62a502a9aa1f6c1d7b7ec7841ef6b4af"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "085c540f21debf59c096cb5b30fe6cde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73118,
        "upload_time": "2021-08-31T01:36:05",
        "upload_time_iso_8601": "2021-08-31T01:36:05.256945Z",
        "url": "https://files.pythonhosted.org/packages/a8/dd/3be8602950d6300aae2ed8b947e5c77c1050c521c6fe647638a0591ed16f/design-bench-2.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4237345670579f6635ca5b80646b9afef2b7731ac8dedc679926267623dd148e",
          "md5": "e2a9567b5767db0be95f3d72dba5d7d1",
          "sha256": "394f9c5e65987c04a409108c558a67e4e08ae3e2b8bdcb69d7f72a4060278799"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "e2a9567b5767db0be95f3d72dba5d7d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73132,
        "upload_time": "2021-09-01T00:50:46",
        "upload_time_iso_8601": "2021-09-01T00:50:46.990953Z",
        "url": "https://files.pythonhosted.org/packages/42/37/345670579f6635ca5b80646b9afef2b7731ac8dedc679926267623dd148e/design-bench-2.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ad5c6a43b02d8713de405e9a759ab04c8d039b88d9eb3cd087e8a4033c38998",
          "md5": "e8d91f3782037b1938d4ba9c85c57b62",
          "sha256": "3f2adce500a47a624a8a9800efbec0231a15b6c6d41b96bde9c39f58429eece9"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "e8d91f3782037b1938d4ba9c85c57b62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73317,
        "upload_time": "2021-09-05T00:46:19",
        "upload_time_iso_8601": "2021-09-05T00:46:19.507809Z",
        "url": "https://files.pythonhosted.org/packages/3a/d5/c6a43b02d8713de405e9a759ab04c8d039b88d9eb3cd087e8a4033c38998/design-bench-2.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb4a0a14fd6c3bffe57bcb4ce385c8a5112dbb6e6c101cd025ae6666e7698beb",
          "md5": "a879348bf6aeb575122fbe5c247db013",
          "sha256": "055fbf1addb811ead1ac06f4d3fcf969924300738d68e6eb3d83243be22633ee"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "a879348bf6aeb575122fbe5c247db013",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73311,
        "upload_time": "2021-09-05T03:10:23",
        "upload_time_iso_8601": "2021-09-05T03:10:23.805865Z",
        "url": "https://files.pythonhosted.org/packages/fb/4a/0a14fd6c3bffe57bcb4ce385c8a5112dbb6e6c101cd025ae6666e7698beb/design-bench-2.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecb19b706498a3df106d21dc77e82a1c6df8d3850a2885c83d309590b6e5b27b",
          "md5": "37f984696937e7fd83a7a7236fe2ae65",
          "sha256": "231a94a123c50b92a2274952d874cfd0d60d4432f213bc7533838e20873e356c"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "37f984696937e7fd83a7a7236fe2ae65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73446,
        "upload_time": "2021-10-22T19:03:34",
        "upload_time_iso_8601": "2021-10-22T19:03:34.344086Z",
        "url": "https://files.pythonhosted.org/packages/ec/b1/9b706498a3df106d21dc77e82a1c6df8d3850a2885c83d309590b6e5b27b/design-bench-2.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71eea5a780baf7c553bbd2844d01dbb73174bb70505c46010993bb4b5afaac88",
          "md5": "85079bcbed04c41b6e63b519230abf17",
          "sha256": "fc151392670ebb1f7fe77328fee6dd5eb9bad48a08b114119549ac5608d26494"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85079bcbed04c41b6e63b519230abf17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63204,
        "upload_time": "2021-05-24T05:37:35",
        "upload_time_iso_8601": "2021-05-24T05:37:35.637128Z",
        "url": "https://files.pythonhosted.org/packages/71/ee/a5a780baf7c553bbd2844d01dbb73174bb70505c46010993bb4b5afaac88/design-bench-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "333b6f4a14102fc60bbc6f6f8c7dc3ccabe2254aee7a69ccb07cc3d54add3b15",
          "md5": "b07c31bc277bf927e695f3f56ae019b0",
          "sha256": "d3b8cf7fb1dac4b9bec8e0326c9185ebd0307a6479990e3771a0c8a1c4528e4f"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "b07c31bc277bf927e695f3f56ae019b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73444,
        "upload_time": "2021-10-22T19:08:01",
        "upload_time_iso_8601": "2021-10-22T19:08:01.492189Z",
        "url": "https://files.pythonhosted.org/packages/33/3b/6f4a14102fc60bbc6f6f8c7dc3ccabe2254aee7a69ccb07cc3d54add3b15/design-bench-2.0.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43f11e391fbb1c20c5d1276353559ce4dcee9102a65c3a9b9a2012cca867c0a2",
          "md5": "7a6ba552619d3213db004d8df190336d",
          "sha256": "d6ee58ea43a1d97f694486e207236fa5ce63a90f4d1c22a993297d4435a5a58b"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7a6ba552619d3213db004d8df190336d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63400,
        "upload_time": "2021-05-24T07:59:28",
        "upload_time_iso_8601": "2021-05-24T07:59:28.841364Z",
        "url": "https://files.pythonhosted.org/packages/43/f1/1e391fbb1c20c5d1276353559ce4dcee9102a65c3a9b9a2012cca867c0a2/design-bench-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b93c2e3b2099bfee12e9135253b036239f084a5736925255a9129d699c356220",
          "md5": "71266fc0ae31e8d6b361f31498eb8f90",
          "sha256": "c4dc4eb7f4da008e613b3937e5198653ac9b47bd1fc510e9715d230b63859510"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "71266fc0ae31e8d6b361f31498eb8f90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63463,
        "upload_time": "2021-05-24T18:05:30",
        "upload_time_iso_8601": "2021-05-24T18:05:30.394531Z",
        "url": "https://files.pythonhosted.org/packages/b9/3c/2e3b2099bfee12e9135253b036239f084a5736925255a9129d699c356220/design-bench-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2075c108841dfd748d2dc0ea5986b56c0c35a37fcbcab473d3fecf630e2a1164",
          "md5": "5d5add709146df9ec28b8d437120347f",
          "sha256": "e10ff01a6a992a259931e727a1edc69e619685a3805a7494f2321bfa5bcd09f5"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5d5add709146df9ec28b8d437120347f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63755,
        "upload_time": "2021-05-26T00:37:27",
        "upload_time_iso_8601": "2021-05-26T00:37:27.547296Z",
        "url": "https://files.pythonhosted.org/packages/20/75/c108841dfd748d2dc0ea5986b56c0c35a37fcbcab473d3fecf630e2a1164/design-bench-2.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc340d508204367639c4c1cf613ed9fd79bb532ebcd5622fb776456e830d4a07",
          "md5": "970c440d2222c4038b812ea568f3f378",
          "sha256": "b55b0f823608615d8b9363703fb569b4354d6d0d33f7396bbbdeb5ee5c666f1b"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "970c440d2222c4038b812ea568f3f378",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63759,
        "upload_time": "2021-05-26T06:30:13",
        "upload_time_iso_8601": "2021-05-26T06:30:13.128452Z",
        "url": "https://files.pythonhosted.org/packages/bc/34/0d508204367639c4c1cf613ed9fd79bb532ebcd5622fb776456e830d4a07/design-bench-2.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c49c676a136bb8fe6ba5f42fe91fe588799742ae2877bb65751bebfc8887221",
          "md5": "3bade67c5cf40930e80a9e0aa65eeb17",
          "sha256": "28d46045c2793340563de067e348ae2efc79cfb0dab231dc3ac59e4822ece57b"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3bade67c5cf40930e80a9e0aa65eeb17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63779,
        "upload_time": "2021-05-26T20:21:45",
        "upload_time_iso_8601": "2021-05-26T20:21:45.921388Z",
        "url": "https://files.pythonhosted.org/packages/9c/49/c676a136bb8fe6ba5f42fe91fe588799742ae2877bb65751bebfc8887221/design-bench-2.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6bd13df09b2f9a12f166575350bc5f11409fbcd4ec8fac31903220f32fb0a5d",
          "md5": "4bde792b801b63f757bb77dac4566542",
          "sha256": "c4cf5d7d9f195952017873d48b5ce2d022f005c12ecea3731cd396d4017f2b4a"
        },
        "downloads": -1,
        "filename": "design-bench-2.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4bde792b801b63f757bb77dac4566542",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64842,
        "upload_time": "2021-06-05T01:17:54",
        "upload_time_iso_8601": "2021-06-05T01:17:54.491547Z",
        "url": "https://files.pythonhosted.org/packages/c6/bd/13df09b2f9a12f166575350bc5f11409fbcd4ec8fac31903220f32fb0a5d/design-bench-2.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "333b6f4a14102fc60bbc6f6f8c7dc3ccabe2254aee7a69ccb07cc3d54add3b15",
        "md5": "b07c31bc277bf927e695f3f56ae019b0",
        "sha256": "d3b8cf7fb1dac4b9bec8e0326c9185ebd0307a6479990e3771a0c8a1c4528e4f"
      },
      "downloads": -1,
      "filename": "design-bench-2.0.20.tar.gz",
      "has_sig": false,
      "md5_digest": "b07c31bc277bf927e695f3f56ae019b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 73444,
      "upload_time": "2021-10-22T19:08:01",
      "upload_time_iso_8601": "2021-10-22T19:08:01.492189Z",
      "url": "https://files.pythonhosted.org/packages/33/3b/6f4a14102fc60bbc6f6f8c7dc3ccabe2254aee7a69ccb07cc3d54add3b15/design-bench-2.0.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}