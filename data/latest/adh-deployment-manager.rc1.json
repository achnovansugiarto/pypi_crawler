{
  "info": {
    "author": "Google Inc. (gTech gPS CSE team)",
    "author_email": "no-reply@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": " # ADH Deployment Manager\n\nADH Deployment Manager is a Python library which simplifies interfacing with ADH REST API by providing a convenient set of wrappers and abstractions.\nThe library provides such capabilities as:\n* deploying ADH queries from local text files to multiple projects based on a single configuration file\n* sync queries between ADH and local storage\n* local runner for testing and prototyping\n* batch query executor\n* branching mechanism\n* job monitoring and other features\n\nADH Deployment Manager provides both high level interface for interacting with ADH via Deployment object and low-level by providing access to such elements as *Analysys Query* and *Job* to issue ad-hoc operations (like rerun of a particular query).\n\n**Minimal working example**:\n\n```\n# load necessary modules\nfrom adh_deployment_manager.authenticator import AdhAutheticator\nfrom adh_deployment_manager.deployment import Deployment\nimport adh_deployment_manager.commands as commands\n\n# provide authentication mechanism\ncredentials = AdhAutheticator().get_credentials(\"/path/to/credentials.json\")\ndeveloper_key =  \"INSERT_YOUR_DEVELOPER_KEY\"\n\n# instantiate deployment with config and credentials\n# (and optionally path to folder where source queries are located)\ndeployment = Deployment(\n    config = \"/path/to/config.yml\",\n    credentials = credentials,\n    developer_key = developer_key,\n    queries_folder=\"/path/to/adh-queries/\",\n    query_file_extention=\".sql\")\n\n# deploy queries to ADH project(s)\ndeployer = commands.Deployer(deployment)\ndeployer.execute()\n\n# run queries in ADH projects(s)\nrunner = commands.Runner(deployment)\nrunner.execute()\n```\n\n# Table of contents<a name=\"table-of-contents\"></a>\n1. [Project overview](#project-overview)\n2. [Requirements](#requirements)\n2. [Installation](#installation)\n3. [Getting started](#getting-started)\n    1. [Access setup](#access-setup)\n\t    1. [*(Recommended)* - Authenticating as a service account](#recommended-authenticating-as-a-service-account)\n\t    2. [OAuth 2.0 setup](#oauth-20-setup)\n    2. [Create config](#create-config)\n    3. [Specify queries](#specify-queries)\n\t    1. [Add new ADH queries](#add-adh-queries)\n\t    2. [Use existing ADH queries](#use-adh-queries)\n    4. [Deploying and running queries](#running-queries)\n\n## Project overview<a name=\"project-overview\"></a>\n*Back to [table of contents](#table-of-contents)*\n\nADH Deployment Manager deployment consists of two elements:\n\n* `sql` folder - contains ADH queries in `.sql` format\n* `config.yml` file - specifies which queries from `sql` folder should be deployed alongside parameters and filtered row summary. More about config at [Create Config](#create-config).\n\nCheck possible structure for `my_adh_project` deployment below:\n\n```\nmy_adh_project\n|__config.yml\n|__sql\n   |__query_name1.sql\n   |__query_name2.sql\n```\n\n## Requirements<a name=\"requirements\"></a>\n*Back to [table of contents](#table-of-contents)*\n\n* [Python3](https://www.python.org/downloads/)\n* [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n\n## Installation<a name=\"installation\"></a>\n*Back to [table of contents](#table-of-contents)*\n\nThe CLI tool called `adm` can be installed from pip:\n\n```\npip install adh-deployment-manager\n```\n\n## Getting started<a name=\"getting-started\"></a>\n*Back to [table of contents](#table-of-contents)*\n\n### Access setup<a name=\"access-setup\"></a>\nPlease follow [Get started with the Ads Data Hub API](https://developers.google.com/ads-data-hub/guides/quickstart-api) to correctly setup\nAPI access to Ads Data Hub.\n\nAfter you setup API access there are two options to authenticate - via service account or OAuth 2.0.\n\n#### *(Recommended)* Authenticating as a service account<a name=\"recommended-authenticating-as-a-service-account\"></a>\n\nAuthenticating as a service account is the recommended way of authentication for `adh-deployment-manager`.\nPlease follow the steps outlined below:\n\n1. Log in into Google Cloud project that connected to your ADH account\n2. Create service account in your output GCP\n    * reference link: https://cloud.google.com/iam/docs/creating-managing-service-accounts\n3. Download service account's credential (JSON format) in your local environment\n    * reference link: https://cloud.google.com/iam/docs/creating-managing-service-account-keys\n4. Assign BigQuery Admin role to the service account\n    * reference link: https://cloud.google.com/iam/docs/granting-roles-to-service-accounts\n5. Generate API Key (Developer Key for ADH)\n    * reference link: https://cloud.google.com/docs/authentication/api-keys\n6. Assign Analyst access role to the service account\n    * reference link: https://developers.google.com/ads-data-hub/guides/assign-access-by-role\n\n#### OAuth 2.0 setup<a name=\"oauth-20-setup\"></a>\n\nIf authenticating via service account is not possible please follow the steps outlined below:\n\n1. Log in into Google Cloud project that connected to your ADH account\n2. Generate OAuth 2.0 Client ID and download credentials:\n    * go to *API & Services - Credentials*, click *+ CREATE CREDENTIALS*\n    and select *OAuth client ID*\n    * Select *Desktop App* as application type, specify any application name\n    and click *CREATE* button.\n    * Click the download icon next to the credentials that you just created.\n3. Generate API Key (Developer Key for ADH)\n    * reference link: https://cloud.google.com/docs/authentication/api-keys\n\nOnce `adh-deployment-manager` is running you will be prompted to log in into your Google account\nso the program can authenticate.\n\n### Create config<a name=\"create-config\"></a>\n*Back to [table of contents](#table-of-contents)*\n\n`config.yml` is the core element of deployment.\nIt must contain two mandatory elements:\n* `customer_ids` - customer_ids (either one of an array) for which queries should be deployed and/or run.\n* `queries_setup` - compound element which consists of query titles, parameters, filtered row summary, etc.\n\nThe minimal working example of the config with two requirement elements (`customer_ids` and `queries_setup`):\n```\ncustomer_ids:\n  - 123456789\nqueries_setup:\n  - queries:\n    - query_title\n```\n#### Optional Elements\n\n`config.yml` may contain optional elements that can be associated with all queries in  `queries_setup` block:\n\n* `ads_data_from` - list of customer_ids to get ads data from. If the field is not included in config it will be automatically converted to a list of regular customer_ids.\n* `bq_project` & `bq_dataset` - BQ project and dataset used storing output data (specified during ADH setup)\n* `date_range_setup` - date range for running queries in ADH which consists of two elements: `start_date` and `end_date` in YYYY-MM-DD format (i.e., 1970-01-01). Supports template values, i.e. YYYYMMDD-10 transforms into *10 days ago from execution day*.\n\n#### Specifying queries and their parameters\n\n\n`queries_setup` may contains the following elements:\n\n* `queries` - list of query titles that need to be deployed/launched in ADH. If query with specified title cannot be found in ADH, `adh-deployment-manager` will try to build query with such title based on provided filename in `sql` folder. Every `query_title` in `queries` will share the same `parameters` and `filtered_row_summary` provides for the block.\n    * **`queries` should contain at least one query_title**.\n    * `query_title` will be used to create table in BQ, so the output table will be `bq_project.bq_dataset.query_title`.\n* (*optional*) `parameters` - block that contains one or more `parameter_name` with corresponding `type` and `values`.\n\t* `type` - type of the parameter (i.e. `INT64`, `STRING`, `DATE`, `TIMESTAMP`), required field.\n\t* `values` - values used when query is suppose to run. If you provide array structure here (separated by `-` at each line) `type` of parameter will be `ARRAY` of type `type`, optional field.\n\n* (*optional*) `filtered_row_summary` - block that contains one or more filtered row summary column names with corresponding `type` and `value`.\n    * `type` - type of filtered row summary (either `SUM` or `CONSTANT`)\n    * `value` - specified only when `type` `CONTANT` is used, specifies how this metric or dimention will be named.\n\n* (*optional*) `execution_mode` - option to split query execution and saving results by day. Can be either `normal` (query is run over the `start_date` - `end_date` date range) or `batch` (query execution can be splitted over each day within query `start_date` and `end_date`). `execution_mode` can be omitted, in that case the query will be executed in `normal` mode\n\n* (*optional*) `wait` - specify whether the next query or query block should be launch only after successfull execution of the previous one. Can take two possible values: `each` (wait for each query in the block) or `block` (wait only for the last query in the block). if `wait` is omitted it means that query execution will be independent of the previous one.\n* (*optional*) `replace` - if a query has any placeholders (specified in `{placeholder}` format) that `replace` block should contain *key: value* pairs which will replace placeholders in the query text with supplied values. This can be useful when specifing *bq_project* and *bq_dataset* names. `replace` can be omitted, in that case no replacements will be performed.\n* (*optional*) `date_range_setup` - in case queries in a block should run over a different time period than specified in global `date_range_setup` you can specify these `start_date` and `end_date` here.\n\n\n##### Example of queries_setup\n\nThe example structure of `queries_setup` looks like the following one:\n\n```\nqueries_setup:\n  - queries:\n      - query_title1\n      - query_title2\n    parameters:\n      parameter_name1:\n        type: INT64\n\tvalues:\n        - 1234\n        - 1235\n        - 1236\n      parameter_name2:\n        type: STRING\n\tvalues: my_value\n      parameter_name3:\n        type: DATE\n    filtered_row_summary:\n      metric_name:\n        type: SUM\n      dimension_name:\n        type: CONSTANT\n\tvalue: my_value\n    execution_mode: normal\n    wait: each\n    replace:\n      placeholder1: value1\n      placeholder2: value2\n    date_range_setup:\n      start_date: YYYYMMDD-10\n      end_date: YYYYMMDD-1\n  - queries:\n    ....\n```\nIn order to make the structure of config more clear, let's cover all elements in the example above.\\\n`queries_setup` contains a query block which contains two queries (`query_title1` and `query_title2`).\n\n**Deploying**:\\\nFor each of these queries:\n* three parameters should be created:\n\n    * `parameter_name1` of type `ARRAY` of `INT64` (three sample values are specified under `values` column; these values will be used during runtime)\n    * `parameter_name2` of type `STRING` (with a single value `my_value` which will be used during runtime)\n    * `parameter_name3` or type `DATE`. This parameters does not have value associated with it and should be specified during runtime (as keyword argument to a corresponding function call)\n* Filtered Row Summary should be added:\n    *  column `metric_name` will contain sum of all values filtered due to privacy checks\n    *  column `dimension_name` will contain `my_value` for all users filtered due to privacy checks.\n\n**Running**:\n* Since `start_date: YYYYMMDD-10`, `end_date: YYYYMMDD-1` both queries should be executed over the last 10 days period (excluding today)\n* Since `execution_mode: normal` when running these queries we run them from `start_date` to `end_date` period without splitting query execution by day.\n* Since `wait: each` we launch `query_title2` only after `query_title1` execution is completed.\n* Both queries contain two placeholders - `placeholder1` and `placeholder2`. When deploying them to ADH we will replace them with `value1` and `value2` respectively.\n\n\n### Specify queries<a name=\"specify-queires\"></a>\n*Back to [table of contents](#table-of-contents)*\n\n#### Add new ADH queries<a name=\"add-adh-queries\"></a>\n\nIf the purpose of deployment is to create queries in ADH based on source code you need to create a dedicated folder to contain these queries.\nBy default `adh-deployment-manager` expectes `sql` folder with files containing files with `.sql` extension. Both `queries_folder` and `query_file_extention` could be specified when creating `Deployment` object.\n\n```\nfrom  adh_deployment_manager.deployment import Deployment\n\nmy_deployment = Deployment(\n    config = \"path/to/config.yml\",\n    credentials = my_credentials,\n    queries_folder = \"path/to/queries_folder\",\n    query_file_extention = \".sql\"\n    )\n```\n\n#### Use Existing Queries from ADH<a name=\"use-adh-queries\"></a>\n\nIf the purpose of deployment is to run existing ADH queries you should omit `queries_folder` and `queries_file_extention` when creating `Deployment` object.\nQuery titles in `queries` block should be title of the queries found in ADH UI.\n```\nfrom  adh_deployment_manager.deployment import Deployment\n\nmy_deployment = Deployment(\n    config = \"path/to/config.yml\",\n    credentials = my_credentials\n    )\n```\n\n### Deploying and running queires<a name=\"running-queries\"></a>\n*Back to [table of contents](#table-of-contents)*\n\nADH Deployment Manager installs `adm` CLI tool that allows you to simplify interaction with the library.\n`adm` accept several arguments:\n\n*  `command` - one of `run`, `deploy`, `update`, `fetch`\n*  `subcommand` - one of `deploy` or `update`\n*  `-c path/to/config.yml` - specifies where config is located\n*  `-q path/to/queries_folder` - specifies where folder with queries is located\n*   `-l path/to/output_folder` - specified where queries fetched from ADH should be stored\n\nIn order to run this commands you'll need to export developer_key as environmental variable:\n\n```\nexport ADH_DEVELOPER_KEY=<developer_key>\n```\n\n#### Usage\n```\nadm [OPTIONS] command subcommand\n    options:\n    -c path/to/config.yml\n    -q path/to/queries_folder\n    -l path/to/output_folder\n```\n\n#### Examples\n\n*Deploy queries based on config*\n\n```\nadm -c path/to/config.yml -q path/to/queries deploy\n```\n\n*Run queries without deployment*\n\n```\nadm -c path/to/config.yml run\n```\n\n*Run and update queries*\n\n```\nadm -c path/to/config.yml -q path/to/queries run update\n```\n\n*Fetch queries from config and store in specified location*\n\n```\nadm -c path/to/config.yml -l path/to/output_folder fetch\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google/adh-deployment-manager",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adh-deployment-manager",
    "package_url": "https://pypi.org/project/adh-deployment-manager/",
    "platform": null,
    "project_url": "https://pypi.org/project/adh-deployment-manager/",
    "project_urls": {
      "Homepage": "https://github.com/google/adh-deployment-manager"
    },
    "release_url": "https://pypi.org/project/adh-deployment-manager/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for interacting with ADH REST API.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16572824,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59059a902d29c26e7ef812bdcfa78282d448aaa34b359e53269c4dc49e155b04",
          "md5": "79230f842849238e63d460221dd46c76",
          "sha256": "2e627a2709d90c7ea4185a475f328ad53d8ffeb421be605f3c2c34fe5cde7d83"
        },
        "downloads": -1,
        "filename": "adh-deployment-manager-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "79230f842849238e63d460221dd46c76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26827,
        "upload_time": "2023-01-26T07:54:40",
        "upload_time_iso_8601": "2023-01-26T07:54:40.857200Z",
        "url": "https://files.pythonhosted.org/packages/59/05/9a902d29c26e7ef812bdcfa78282d448aaa34b359e53269c4dc49e155b04/adh-deployment-manager-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59059a902d29c26e7ef812bdcfa78282d448aaa34b359e53269c4dc49e155b04",
        "md5": "79230f842849238e63d460221dd46c76",
        "sha256": "2e627a2709d90c7ea4185a475f328ad53d8ffeb421be605f3c2c34fe5cde7d83"
      },
      "downloads": -1,
      "filename": "adh-deployment-manager-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "79230f842849238e63d460221dd46c76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26827,
      "upload_time": "2023-01-26T07:54:40",
      "upload_time_iso_8601": "2023-01-26T07:54:40.857200Z",
      "url": "https://files.pythonhosted.org/packages/59/05/9a902d29c26e7ef812bdcfa78282d448aaa34b359e53269c4dc49e155b04/adh-deployment-manager-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}