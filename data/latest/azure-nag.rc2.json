{
  "info": {
    "author": "Stelligent",
    "author_email": "jdoe@host.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Azure Nag Static Analysis Tool\n\n![azure-nag](https://github.com/stelligent/azure-nag/workflows/azure-nag/badge.svg)\n![releases](https://github.com/stelligent/azure-nag/workflows/releases/badge.svg)\n![vscode-container](https://github.com/stelligent/azure-nag/workflows/vscode-container/badge.svg)\n![azure-nag-docker-image](https://github.com/stelligent/azure-nag/workflows/azure-nag-docker-image/badge.svg)\n\n# Background\nazure-nag checks Azure Resource Manager (ARM) templates for patterns that may defy best practices or indicate insecure resources.  It is built using [Stelligent mc-nag](https://github.com/stelligent/mc-nag) as the base engine.\n\n# Prerequisites\n\n* Python >=3.7\n* mc-nag\n\n# Installation\n\n`pip install azure-nag`\n\n# Usage\n\n`azure-nag` is the main entry point for the utility.  It handles parsing, modeling, rule execution against, and reporting on templates passed to it.  When used with the `--rules` flag, it will also display information about all available rules.\n\n```\n$ azure-nag --help\nUsage: azure-nag [OPTIONS]\n\n  Perform template parsing and rule evaluation.\n\nOptions:\n  --enable-standard-rules / --disable-standard-rules\n                                  Enable/disable the standard rule set that\n                                  ships with mc-nag.\n\n  -C, --custom-platform-rules-dir PATH\n                                  Path to a directory containing custom rules.\n                                  Allows multiple.\n\n  -lt, --list-tags                List of all available tags.\n  -t, --enable-tags-only TEXT     A quoted list of tags. Scan only those\n                                  Rules.\n\n  --rules                         Display information about all available\n                                  rules.\n\n  -f, --filepath PATH\n  -o, --output [text|json|yaml|none]\n  -p, --paramfile PATH\n  --rule-param TEXT               Pass parameters through to rules.  Allows\n                                  multiple. Format: --rule-param param1=value1\n                                  --rule-param param2=value2\n\n  -v, --verbose\n  --help                          Show this message and exit.\n```\n\n# Development\n\n## VS Code Remote Development\nThere is a complete remote development environment created and setup with all the tools and settings pre-configured for ease in rule development and creation. You can enable this by using the VS Code Remote development functionality.\n\n- Install the VS Code [Remote Development extension pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)\n- Open the repo in VS Code\n- When prompted \"`Folder contains a dev container configuration file. Reopen folder to develop in a container`\" click the \"`Reopen in Container`\" button\n- When opening in the future use the \"`[Dev Container] azure_nag Development`\" option\n\nIf you would like to mount a local copy of the `mc_nag` package inside this development container for easier dev iterations, you can set the `MCNAG_PATH` environment variable before launching VSCode.  It should point to the `mc_nag` package directory within the `mc-nag` repository directory.\nFor example:\n```\nexport MCNAG_PATH=/home/user/mc-nag-repo-clone/mc_nag\n```\n\nThe `mc_nag` directory will be mounted in your container's workspace at the root level of the `azure-nag` repository files.\n\n## Rule Creation\n\nRules are at the crux of azure-nag's purpose.  They create its functionality but are flexible enough to be able to create/update/delete them at will.  azure-nag comes with a [default set of rules](azure_nag/rules) created by the Stelligent azure-nag team, however it also offers a [`--custom-platform-rules-dir` CLI option](#Usage).\n\nIf you believe a rule should be added to the standard rule set packaged with azure-nag, feel free to create the new rule and submit it as a [pull request in the stelligent/azure-nag repository](https://github.com/stelligent/azure-nag/pulls).\n\n### Structure\n\nAll rules must be subclassed from the [`BaseRule` class](https://github.com/stelligent/mc-nag/mc_nag/base_utils/models/rule.py).  It contains the basic necessities and structure for a rule class, as well as validation mechanisms to ensure your rule class will behave as expected.\n\nRules accept parameters from the CLI when passed in using the `--rule-param` option (see [Usage](#Usage) above).  Parameters are passed into the `BaseRule __init__()` method and made available as class attributes for use in any class method including `evaluate()`.  You can also set default values for attributes in your rule class and override them with the `--rule-param` option (see [an example here](https://github.com/stelligent/mc-nag/blob/feature/rule-args/tests/rules/with_params/some_threshold_rule.py)).\n\nEvery rule must have at least:\n* **Attributes**\n  * *rule_id*: Unique identifier for the rule.\n  * *description*: Plain language description of what the rule is trying to accomplish.\n  * *severity*: The impact the rule has on the run of azure-nag.  One of [`rule.ERROR`, `rule.WARNING`, `rule.STYLE`].\n  * *url*: Page at which more information can be found on the rule.\n  * *resolution*: Steps to take in order to remediate any violations the rule finds.\n* **Methods**\n  * *evaluate*: Logic to perform the rule's stated function.  Must return a list of violating resources.\n\n[Sample rule](azure_nag/rules/azure_storageaccount_encrypted_rule.py) which shows basic structure\n\n### Testing\n\nIt is good practice to create unit tests and multiple example templates to accompany your new rule in order to prove your rule logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.\n\nWhen you have a rule ready for evaluation, you can either pass its containing directory as a `--custom-platform-rules-dir` CLI option to the azure-nag executable or, if you have the azure-nag source checked out, you can place the rule into [azure_nag/rules](azure_nag/rules).\n\n[Sample unit tests](tests/rules/test_azure_storageaccount_encrypted_rule.py)\n\n[Sample test templates](tests/templates/azure_storageAccounts)\n\n## Template Model Creation\n\nThe template model is a generic way to represent different platforms' templates.  After a template is parsed, its parsed data is stored in the template model for evaluation by the rule set.\n\n### Structure\n\nAll template models must be subclassed from the [`BaseTemplate` class](https://github.com/stelligent/mc-nag/mc_nag/base_utils/models/template.py).  It contains the basic necessities and structure for a template model class, as well as validation mechanisms to ensure your template model class will behave as expected.\n\nEvery template model must have at least:\n* **Attributes**\n  * *template_string*: Raw string read from the template file.\n  * *parsed_template*: Parser object (e.g. [`AzureParser`](azure_nag/azure_parser.py)), which returns the parsed template model.\n  * *resources*: List of resource objects (e.g. [`AzureResource`](azure_nag/models/azure_resource.py)) created from the parsed template model.\n  * *parameters*: List of parameter objects (e.g. [`AzureParameter`](azure_nag/models/azure_parameter.py)) created from the parsed template model.\n  * *outputs*: List of output objects (e.g. [`AzureOutput`](azure_nag/models/azure_output.py)) created from the parsed template model.\n  * *functions*: List of function objects (e.g. [`AzureFunction`](azure_nag/models/azure_function.py)) created from the parsed template model.\n  * *variables*: List of variable objects (e.g. [`AzureVariable`](azure_nag/models/azure_variable.py)) created from the parsed template model.\n\nThe attributes listed above must be defined, even if they are just empty lists.\n\n[Sample template model](azure_nag/models/azure_template.py) which shows basic structure\n\n### Testing\n\nIt is also a good practice to create unit tests and multiple example templates to accompany your new template model in order to prove your data model logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.\n\n[Sample unit tests](tests/test_azure_template.py)\n\n[Sample test templates](tests/templates)\n\n# Running with Docker\nThe azure-nag tool is also available to be ran as a container with the azure-nag Docker image.\nhttps://hub.docker.com/r/stelligent/azure-nag\n1. Pull the latest azure-nag Docker image: `docker pull stelligent/azure-nag:latest`\n2. Running the container against an Azure template:\n    - `docker run -v $(pwd)/<ARM_TEMPLATE_DIR>:/templates stelligent/azure-nag:latest --filepath /templates/<ARM_TEMPLATE>.json`\n3. Running the container against an Azure template with passing in a parameters JSON file:\n    - `docker run -v $(pwd)/<ARM_TEMPLATE_DIR>:/templates stelligent/azure-nag:latest --filepath /templates/<ARM_TEMPLATE>.json --paramfile /templates/<PARAMETERS_FILE>.json`\n\n# Support\n\nTo report a bug or request a feature, submit an issue through the stelligent/mc-nag GitHub repository via https://github.com/stelligent/azure-nag/issues/new.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stelligent/azure-nag",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-nag",
    "package_url": "https://pypi.org/project/azure-nag/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-nag/",
    "project_urls": {
      "Homepage": "https://github.com/stelligent/azure-nag"
    },
    "release_url": "https://pypi.org/project/azure-nag/0.0.2/",
    "requires_dist": [
      "jstyleson",
      "setuptools",
      "wheel",
      "click",
      "pytest",
      "pytest-cov",
      "coverage",
      "pylint",
      "flake8",
      "flake8-docstrings",
      "autopep8",
      "pycodestyle",
      "pyyaml",
      "tabulate (==0.8.7)",
      "mc-nag (==0.0.6)"
    ],
    "requires_python": ">=3.7",
    "summary": "azure-nag static analysis tool",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7330629,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5facb1675787db601d1984e0ea2e729941743841925e623f2c57480194b1688e",
          "md5": "a770e8c6582c14a2b97125ddd281ed25",
          "sha256": "51e5125820a4debd1ccc469df25c65319fe0c421465b1e8af2496f59b00f47d9"
        },
        "downloads": -1,
        "filename": "azure_nag-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a770e8c6582c14a2b97125ddd281ed25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18682,
        "upload_time": "2020-05-08T15:19:14",
        "upload_time_iso_8601": "2020-05-08T15:19:14.758114Z",
        "url": "https://files.pythonhosted.org/packages/5f/ac/b1675787db601d1984e0ea2e729941743841925e623f2c57480194b1688e/azure_nag-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35307faa92523275dd419021d37296edf6cf92262b3d88096fd5d4ff48b3b9a8",
          "md5": "0203c5341ed6d37870d05f5167e8e01a",
          "sha256": "34f5ebae2f8889aedc657a48ce10ad7d963a12198989273d4967fecc3a58add5"
        },
        "downloads": -1,
        "filename": "azure_nag-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0203c5341ed6d37870d05f5167e8e01a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20426,
        "upload_time": "2020-05-26T21:01:27",
        "upload_time_iso_8601": "2020-05-26T21:01:27.359387Z",
        "url": "https://files.pythonhosted.org/packages/35/30/7faa92523275dd419021d37296edf6cf92262b3d88096fd5d4ff48b3b9a8/azure_nag-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "165dbf297fd7be49dea19e6157c67e46ce051d7566ba7866ef44d32fb23d3b58",
          "md5": "757498e9d68f625431c6e197b35eb4e2",
          "sha256": "165e5bad523bd853f357b9195789135c8c9d751662a996a9fd8ddb7d5d4b6d6c"
        },
        "downloads": -1,
        "filename": "azure_nag-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "757498e9d68f625431c6e197b35eb4e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16127,
        "upload_time": "2020-05-26T21:01:28",
        "upload_time_iso_8601": "2020-05-26T21:01:28.323496Z",
        "url": "https://files.pythonhosted.org/packages/16/5d/bf297fd7be49dea19e6157c67e46ce051d7566ba7866ef44d32fb23d3b58/azure_nag-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35307faa92523275dd419021d37296edf6cf92262b3d88096fd5d4ff48b3b9a8",
        "md5": "0203c5341ed6d37870d05f5167e8e01a",
        "sha256": "34f5ebae2f8889aedc657a48ce10ad7d963a12198989273d4967fecc3a58add5"
      },
      "downloads": -1,
      "filename": "azure_nag-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0203c5341ed6d37870d05f5167e8e01a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 20426,
      "upload_time": "2020-05-26T21:01:27",
      "upload_time_iso_8601": "2020-05-26T21:01:27.359387Z",
      "url": "https://files.pythonhosted.org/packages/35/30/7faa92523275dd419021d37296edf6cf92262b3d88096fd5d4ff48b3b9a8/azure_nag-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "165dbf297fd7be49dea19e6157c67e46ce051d7566ba7866ef44d32fb23d3b58",
        "md5": "757498e9d68f625431c6e197b35eb4e2",
        "sha256": "165e5bad523bd853f357b9195789135c8c9d751662a996a9fd8ddb7d5d4b6d6c"
      },
      "downloads": -1,
      "filename": "azure_nag-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "757498e9d68f625431c6e197b35eb4e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16127,
      "upload_time": "2020-05-26T21:01:28",
      "upload_time_iso_8601": "2020-05-26T21:01:28.323496Z",
      "url": "https://files.pythonhosted.org/packages/16/5d/bf297fd7be49dea19e6157c67e46ce051d7566ba7866ef44d32fb23d3b58/azure_nag-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}