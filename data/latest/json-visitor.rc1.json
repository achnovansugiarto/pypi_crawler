{
  "info": {
    "author": "Chris Herrick",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# PyJsonVisitor\nImplements a [JSON](https://en.wikipedia.org/wiki/JSON) parser using the Visitor pattern.\n\n## Table of Contents\n1. [Visitor Pattern](#visitor-pattern)\n1. [Usage](#usage)\n\t- [Adapters](#adapters)\n\t\t- [Simple Adapters](#simple-adapters)\n\t\t\t- [Provided Simple Adapters](#provided-simple-adapters)\n\t\t- [Contextual Adapters](#contextual-adapters)\n\t\t\t- [Provided Contextual Adapters](#provided-contextual-adapters)\n\t- [Subscriptions](#subscriptions)\n\t- [Terminal Utility](#terminal-utility)\n1. [Acknowledgements](#acknowledgements)\n\n## Visitor Pattern\nThe [Visitor pattern](https://en.wikipedia.org/wiki/Visitor_pattern) is a structural software pattern which allows the separation of an algorithm from the algorithm's input through the use of contextual event handlers. A `BaseAdapter` class provides the contextual event handlers for different [JSON](https://en.wikipedia.org/wiki/JSON) element types and a child class overrides only the event handlers required by the specific algorithm. Since each adapter is completely independent and a specific algorithm's implementation is separated from the input JSON elements, multiple adapters can process the same JSON element events in parallel without interferrence.\n\n## Usage\nNormal usage would consist of writing an [adapter](#adapters) derived from a `BaseAdapter` to handle the published events, although two [subscriptions](#subscriptions) have been provided for external subscriber event publishing and a [terminal utility](#terminal-utility) has been provided to expose the event sequence for adapter development.\n\n### Adapters\nThere are two categories of adapters provided, [simple adapters](#simple-adapters) and [contextual adapters](#contextual-adapters). The primary difference between the simple adapters and the contextual adapters are amount of scope data stored through the iteration: the simple adapters do not store scope data while the contextual adapters store scope data applicable to the scope.\n\n#### Simple Adapters\nThe simple adapters provide the following event handlers:\n\n- `before_document_start()`\n- `process_document_start()`\n- `after_document_start()`\n- `before_document_end()`\n- `process_document_end()`\n- `after_document_end()`\n- `before_object_start()`\n- `process_object_start()`\n- `after_object_start()`\n- `before_object_end()`\n- `process_object_end()`\n- `after_object_end()`\n- `before_list_start()`\n- `process_list_start()`\n- `after_list_start()`\n- `before_list_end()`\n- `process_list_end()`\n- `after_list_end()`\n- `before_list_item_start()`\n- `process_list_item_start()`\n- `after_list_item_start()`\n- `before_list_item_end()`\n- `process_list_item_end()`\n- `after_list_item_end()`\n- `before_list_item_value_start()`\n- `process_list_item_value_start()`\n- `after_list_item_value_start()`\n- `before_list_item_value_end()`\n- `process_list_item_value_end()`\n- `after_list_item_value_end()`\n- `before_member_start()`\n- `process_member_start()`\n- `after_member_start()`\n- `before_member_end()`\n- `process_member_end()`\n- `after_member_end()`\n- `before_member_key( name )`\n- `process_member_key( name )`\n- `after_member_key( name )`\n- `before_member_value_start()`\n- `process_member_value_start()`\n- `after_member_value_start()`\n- `before_member_value_end()`\n- `process_member_value_end()`\n- `after_member_value_end()`\n- `before_value( value )`\n- `process_value( value )`\n- `after_value( value )`\n\nThe simple adapters do not store any element scope data.\n\n##### Provided Simple Adapters\n\n- [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/base_adapter.py): The parent adapter class from which all other adapters are derived.\n- [`CompositeAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/composite_adapter.py): This is an adapter contains a list of other adapters. When an event is handled by the `CompositeAdapter`, the event is published to all adapters the `CompositeAdapter` has in its list. The `CompositeAdapter` inherits from the [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/base_adapter.py).\n- [`ScopeAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/scope_adapter.py): This adapter builds the element scope for any element as the JSON file is being parsed. The `ScopeAdapter` inherits from the [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/base_adapter.py).\n- [`ScopeInspectionAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/scope_inspector_adapter.py): This adapter prints the node events from the JSON file to standard output as the JSON file is being parsed; only the `process_*` event handlers are invoked. The `ScopeInspectionAdapter` inherits from the [`ScopeAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/scope_adapter.py).\n\n#### Contextual Adapters\nThe contextual adapters provide all of the event handlers provided by the simple adapters as well as the following event handlers:\n\n- `before_document( root_scope)`\n- `process_document( root_scope )`\n- `after_document( root_scope )`\n- `before_object( members )`\n- `process_object( members )`\n- `after_object( members )`\n- `before_member( name, value )`\n- `process_member( name, value )`\n- `after_member( name, value )`\n- `before_list( items )`\n- `process_list( items )`\n- `after_list( items )`\n- `before_list_item( index, value )`\n- `process_list_item( index, value )`\n- `after_list_item( index, value )`\n\nThe contextual adapters store the necessary element scope data required to associate an element with the element's subordinate data.\n\n##### Provided Contextual Adapters\n\n- [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/base_adapter.py): The parent adapter class from which all other contextual adapters are derived. The `BaseAdapter` inherits from the [`ScopeAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/scope_adapter.py).\n- [`CompositeAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/composite_adapter.py): This adapter contains a list of other adapters. When an event is handled by the `CompositeAdapter`, the event is published to all adapters the `CompositeAdapter` has in its list. The `CompositeAdapter` inherits from the contextual [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/base_adapter.py).\n- [`InspectionAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/inspector_adapter.py): This adapter prints the node events from the JSON file to standard output as the JSON file is being parsed; only the `process_*` event handlers are invoked. The `InspectionAdapter` inherits from the contextual [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/base_adapter.py) and the [`ScopeInspectionAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/scope_inspector_adapter.py).\n\n#### Default Event Handler Behavior\nThe event handlers implemented in the `BaseAdapter` classes call a different method based on the event handler's timing; this method as implemented in the simple [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/base_adapter.py) class has an empty body but can be overridden in a child class to apply a default behavior to all event handlers with specific timing. The methods are as follows:\n\n- The `before_*` event handlers invoke the `default_before( *args, **kwargs )` method.\n- The `process_*` event handlers invoke the `default_process( *args, **kwargs )` method.\n- The `after_*` event handlers invoke the `default_after( *args, **kwargs )` method.\n\n#### Subscriptions\nTwo subscriptions are provided for event consumption by adapter-external subscribers. Callbacks are registered with the subscription using the `register( subscription_key, callback )` method; valid subscription keys are retrieved using the `subscription_keys` property.\n\n- [`SimpleSubscription`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/subscription/simple_subscription.py): This subscription publishes the events in the simple [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/simple_adapters/base_adapter.py).\n- [`ContextualSubscription`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/subscription/contextual_subscription.py): This subscription publishes the events in the contextual [`BaseAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/base_adapter.py).\n\n### Terminal Utility\nIf the `json_visitor` package is invoked on the terminal (using `python3 -m json_visitor`), the [`InspectionAdapter`](https://github.com/FluxIX/PyJsonVisitor/blob/main/src/json_visitor/contextual_adapters/inspector_adapter.py) prints out the JSON element nodes in a given input source. The utility's help describes the options and inputs supported:\n\n    usage: json_visitor [-h] [-i | -I] [-f <file path>] [-s <string literal>]\n\n    Processes the input JSON strings or files and outputs the visitation events.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i, --output-processing-info\n                            Enables the output of the processing information. This\n                            is the default.\n      -I, --suppress-processing-info\n                            Suppresses the output of the processing information.\n      -f <file path>, --file <file path>\n                            JSON file path to process; relative paths are relative\n                            to the current working directory.\n      -s <string literal>, --string <string literal>\n                            JSON string literal to process.\n\nThe command (on Linux) `python3 -m json_visitor -s \"{ \\\"v\\\": [ 1, 2,3, 4, 5, 6, { \\\"key0\\\": \\\"value\\\", \\\"key1\\\": {} }] }\"` results in the following output:\n\n    document_start\n    object_start\n    member_start\n    member_key: (0: v)\n    member_value_start\n    list_start\n    list_item_start\n    list_item_value_start\n    value: (0: 1)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 0), (1: 1)\n    list_item_start\n    list_item_value_start\n    value: (0: 2)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 1), (1: 2)\n    list_item_start\n    list_item_value_start\n    value: (0: 3)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 2), (1: 3)\n    list_item_start\n    list_item_value_start\n    value: (0: 4)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 3), (1: 4)\n    list_item_start\n    list_item_value_start\n    value: (0: 5)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 4), (1: 5)\n    list_item_start\n    list_item_value_start\n    value: (0: 6)\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 5), (1: 6)\n    list_item_start\n    list_item_value_start\n    object_start\n    member_start\n    member_key: (0: key0)\n    member_value_start\n    value: (0: value)\n    member_value_end\n    member_end\n    process_member: (0: key0), (1: value)\n    member_start\n    member_key: (0: key1)\n    member_value_start\n    object_start\n    object_end\n    process_object: (0: {})\n    member_value_end\n    member_end\n    process_member: (0: key1), (1: {})\n    object_end\n    process_object: (0: {'key0': 'value', 'key1': {}})\n    list_item_value_end\n    list_item_end\n    process_list_item: (0: 6), (1: {'key0': 'value', 'key1': {}})\n    list_end\n    process_list: (0: (1, 2, 3, 4, 5, 6, {'key0': 'value', 'key1': {}}))\n    member_value_end\n    member_end\n    process_member: (0: v), (1: (1, 2, 3, 4, 5, 6, {'key0': 'value', 'key1': {}}))\n    object_end\n    process_object: (0: {'v': (1, 2, 3, 4, 5, 6, {'key0': 'value', 'key1': {}})})\n    document_end\n    process_document: (0: {'v': (1, 2, 3, 4, 5, 6, {'key0': 'value', 'key1': {}})})\n    Number of scope events processed: 103\n\n## Acknowledgements\nThe hard work of turning JSON into an event stream is done by the [`ijson`](https://pypi.org/project/ijson/) package, without which the Visitor interface would have been much more challenging to develop.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FluxIX/PyJsonVisitor",
    "keywords": "json,visitor,subscribe,subscription,subscriber",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "json-visitor",
    "package_url": "https://pypi.org/project/json-visitor/",
    "platform": null,
    "project_url": "https://pypi.org/project/json-visitor/",
    "project_urls": {
      "Bug Reports": "https://github.com/FluxIX/PyJsonVisitor/issues",
      "Homepage": "https://github.com/FluxIX/PyJsonVisitor",
      "Source": "https://github.com/FluxIX/PyJsonVisitor"
    },
    "release_url": "https://pypi.org/project/json-visitor/1.0.0/",
    "requires_dist": [
      "ijson",
      "event-notifier"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Provides a Visitor pattern interface for iterating through a JSON file.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13519152,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffa1a0d54b1019fc45e2d66887020b73cd785d9119bb95eb1912a01409ad479b",
          "md5": "326f27deb1585b7c9a13b9952272f296",
          "sha256": "e39849418ed5797694b4f89a51efa3949e463db2b03d108793a13df9d45419e2"
        },
        "downloads": -1,
        "filename": "json_visitor-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "326f27deb1585b7c9a13b9952272f296",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 27612,
        "upload_time": "2022-04-14T22:20:16",
        "upload_time_iso_8601": "2022-04-14T22:20:16.233465Z",
        "url": "https://files.pythonhosted.org/packages/ff/a1/a0d54b1019fc45e2d66887020b73cd785d9119bb95eb1912a01409ad479b/json_visitor-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36bce0c27c886b23219821e94f04d91b7aa04fc3c8e43e757b2101bab5b3d2ef",
          "md5": "30a8bd5f887f626df360eca8bce7371d",
          "sha256": "341155ebdcfe194d92f0bee52782fd5c92f071ab9806619db4354e37b3ae6e45"
        },
        "downloads": -1,
        "filename": "json_visitor-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30a8bd5f887f626df360eca8bce7371d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 23310,
        "upload_time": "2022-04-14T22:20:17",
        "upload_time_iso_8601": "2022-04-14T22:20:17.728258Z",
        "url": "https://files.pythonhosted.org/packages/36/bc/e0c27c886b23219821e94f04d91b7aa04fc3c8e43e757b2101bab5b3d2ef/json_visitor-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffa1a0d54b1019fc45e2d66887020b73cd785d9119bb95eb1912a01409ad479b",
        "md5": "326f27deb1585b7c9a13b9952272f296",
        "sha256": "e39849418ed5797694b4f89a51efa3949e463db2b03d108793a13df9d45419e2"
      },
      "downloads": -1,
      "filename": "json_visitor-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "326f27deb1585b7c9a13b9952272f296",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 27612,
      "upload_time": "2022-04-14T22:20:16",
      "upload_time_iso_8601": "2022-04-14T22:20:16.233465Z",
      "url": "https://files.pythonhosted.org/packages/ff/a1/a0d54b1019fc45e2d66887020b73cd785d9119bb95eb1912a01409ad479b/json_visitor-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36bce0c27c886b23219821e94f04d91b7aa04fc3c8e43e757b2101bab5b3d2ef",
        "md5": "30a8bd5f887f626df360eca8bce7371d",
        "sha256": "341155ebdcfe194d92f0bee52782fd5c92f071ab9806619db4354e37b3ae6e45"
      },
      "downloads": -1,
      "filename": "json_visitor-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "30a8bd5f887f626df360eca8bce7371d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 23310,
      "upload_time": "2022-04-14T22:20:17",
      "upload_time_iso_8601": "2022-04-14T22:20:17.728258Z",
      "url": "https://files.pythonhosted.org/packages/36/bc/e0c27c886b23219821e94f04d91b7aa04fc3c8e43e757b2101bab5b3d2ef/json_visitor-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}