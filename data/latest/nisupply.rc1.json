{
  "info": {
    "author": "",
    "author_email": "Johannes Wiesner <joh.wiesner@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# nisupply\nA python module for dealing with unstructured or semi-structured neuroimaging datasets which do not conform to the [Brain Imaging Data Structure (BIDS)](https://bids.neuroimaging.io/).\n\n## Aims\nThough more and more datasets become available in the standardized BIDS-format, researchers will still often find themelves in situations, were:\n1. The dataset is not BIDS-formatted at all (this is often the case with old 'in-house' datasets that were aquired during a time were BIDS didn't exist yet).\n2. It is not possible to convert the datasets to BIDS, because you\n    1.) Don't have access to the original DICOM-files\n    2.) Not the time and ressources to do so\n    3.) Lack information, but the maintainer has left your research department\n3. The dataset is wrongly BIDS-formatted because it sticks to an outdated BIDS version or because the maintainers made errors (as a consequence, verification tools like the [BIDS-validator](https://bids-standard.github.io/bids-validator/) will throw errors)\n\n As a consequence, one cannot use tools from the [BIDS Apps universe](https://bids-apps.neuroimaging.io/apps/) which by default require the files to be BIDS-conform in order to work. The idea behind the nisupply module is to provide helper functions that facilitate the often tedious data-wrangling work that can happen with unstructured data sets.\n\n ## Docs\nThe nisupply package provides three main modules:\n1. `nisupply.io` for input-output-operations (finding files, renaming them, copying them over to a different directory). The main function within this module is the `nisupply.io.get_filepath_df` function.\n2. `nisupply.bids` (helper functions to create a BIDS-like data structures. Note, that without having the original DICOM files one will never be able to create 100% valid BIDS-datasets with this module)\n3. `nisupply.utils` (unarchiving files which is needed for neuroimaging software like SPM and other functions that do not fit to the first two modules)\n\n## Note\nThe nisupply module does **not** provide any functions to convert DICOM files to NIFTI files. If you are looking for tools to do that, check out tools like [heudiconv](https://heudiconv.readthedocs.io/en/latest/) or [bidscoin](https://bidscoin.readthedocs.io/en/latest/) that can do that for you.\n\n## Similar Projects\nThere are similar projects out there following the same idea:\n1. Have a look at Stephen Larroque's [pathmatcher](https://github.com/lrq3000/pathmatcher) package which works primarily with regex.\n2. The [interfaces.io](https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.io.html)  module from `nipype` (especially the [DataFinder](https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.io.html#datafinder) class)\n\nThe focus of nisupply is to avoid quite unreadable regex-matches as much as possible. It therefore is best suited for semi-structured datsets that are neither completely unordered but also 100% standardized.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "files,utility,neuroscience,neuroimaging,file-management",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nisupply",
    "package_url": "https://pypi.org/project/nisupply/",
    "platform": null,
    "project_url": "https://pypi.org/project/nisupply/",
    "project_urls": {
      "Homepage": "https://github.com/JohannesWiesner/nisupply"
    },
    "release_url": "https://pypi.org/project/nisupply/2023.3.10/",
    "requires_dist": [
      "numpy",
      "pandas"
    ],
    "requires_python": "",
    "summary": "A python module for dealing with unstructured or semi-structured neuroimaging datasets which do not conform to the BIDS data structure",
    "version": "2023.3.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17240475,
  "releases": {
    "2023.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "929dbc8584eae32fd41ca5e8216bbdaee15816c65e811f1c8ac5a88bd140a17b",
          "md5": "0630c2a574c237702c690d66f35649ef",
          "sha256": "354c7d51d11bb1b3523fc65fd4bcad2e11fc29f8f0a2955d02ca8923d29c260c"
        },
        "downloads": -1,
        "filename": "nisupply-2023.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0630c2a574c237702c690d66f35649ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10235,
        "upload_time": "2023-03-10T14:44:36",
        "upload_time_iso_8601": "2023-03-10T14:44:36.261371Z",
        "url": "https://files.pythonhosted.org/packages/92/9d/bc8584eae32fd41ca5e8216bbdaee15816c65e811f1c8ac5a88bd140a17b/nisupply-2023.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec7732c4faafbc1ff79b40915229cb28837f71b0c8c55c548c87552c2f65dbce",
          "md5": "063bd03f7085428cb020994d1f0b2659",
          "sha256": "ec01b0b19e70577d1ff7b57f5b50c72c50bfee8705619488c459e172de0e62d5"
        },
        "downloads": -1,
        "filename": "nisupply-2023.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "063bd03f7085428cb020994d1f0b2659",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10639,
        "upload_time": "2023-03-10T14:44:38",
        "upload_time_iso_8601": "2023-03-10T14:44:38.123424Z",
        "url": "https://files.pythonhosted.org/packages/ec/77/32c4faafbc1ff79b40915229cb28837f71b0c8c55c548c87552c2f65dbce/nisupply-2023.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "929dbc8584eae32fd41ca5e8216bbdaee15816c65e811f1c8ac5a88bd140a17b",
        "md5": "0630c2a574c237702c690d66f35649ef",
        "sha256": "354c7d51d11bb1b3523fc65fd4bcad2e11fc29f8f0a2955d02ca8923d29c260c"
      },
      "downloads": -1,
      "filename": "nisupply-2023.3.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0630c2a574c237702c690d66f35649ef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10235,
      "upload_time": "2023-03-10T14:44:36",
      "upload_time_iso_8601": "2023-03-10T14:44:36.261371Z",
      "url": "https://files.pythonhosted.org/packages/92/9d/bc8584eae32fd41ca5e8216bbdaee15816c65e811f1c8ac5a88bd140a17b/nisupply-2023.3.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec7732c4faafbc1ff79b40915229cb28837f71b0c8c55c548c87552c2f65dbce",
        "md5": "063bd03f7085428cb020994d1f0b2659",
        "sha256": "ec01b0b19e70577d1ff7b57f5b50c72c50bfee8705619488c459e172de0e62d5"
      },
      "downloads": -1,
      "filename": "nisupply-2023.3.10.tar.gz",
      "has_sig": false,
      "md5_digest": "063bd03f7085428cb020994d1f0b2659",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10639,
      "upload_time": "2023-03-10T14:44:38",
      "upload_time_iso_8601": "2023-03-10T14:44:38.123424Z",
      "url": "https://files.pythonhosted.org/packages/ec/77/32c4faafbc1ff79b40915229cb28837f71b0c8c55c548c87552c2f65dbce/nisupply-2023.3.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}