{
  "info": {
    "author": "Michael Milton",
    "author_email": "michael.r.milton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PipeChain\n\n## Motivation\n\nPipeChain is a utility library for creating functional pipelines.\nLet's start with a motivating example.\nWe have a list of Australian phone numbers from our users.\nWe need to clean this data before we insert it into the database.\nWith PipeChain, you can do this whole process in one neat pipeline:\n\n\n\n```python\nfrom pipechain import PipeChain, PLACEHOLDER as _\n\nnums = [\n    \"493225813\",\n    \"0491 570 156\",\n    \"55505488\",\n    \"Barry\",\n    \"02 5550 7491\",\n    \"491570156\",\n    \"\",\n    \"1800 975 707\"\n]\n\nPipeChain(\n    nums\n).pipe(\n    # Remove spaces\n    map, lambda x: x.replace(\" \", \"\"), _\n).pipe(\n    # Remove non-numeric entries\n    filter, lambda x: x.isnumeric(), _\n).pipe(\n    # Add the mobile code to the start of 8-digit numbers\n    map, lambda x: \"04\" + x if len(x) == 8 else x, _\n).pipe(\n    # Add the 0 to the start of 9-digit numbers\n    map, lambda x: \"0\" + x if len(x) == 9 else x, _\n).pipe(\n    # Convert to a set to remove duplicates\n    set\n).eval()\n```\n\n\n\n\n    {'0255507491', '0455505488', '0491570156', '0493225813', '1800975707'}\n\n\n\nWithout PipeChain, we would have to horrifically nest our code, or else use a lot of temporary variables:\n\n\n```python\nset(\n    map(\n        lambda x: \"0\" + x if len(x) == 9 else x,\n        map(\n            lambda x: \"04\" + x if len(x) == 8 else x,\n            filter(\n                lambda x: x.isnumeric(),\n                map(\n                    lambda x: x.replace(\" \", \"\"),\n                    nums\n                )\n            )\n        )\n    )\n)\n```\n\n\n\n\n    {'0255507491', '0455505488', '0491570156', '0493225813', '1800975707'}\n\n\n\n## Installation\n\n```bash\npip install pipechain\n```\n\n## Usage\n### Basic Usage\n\nPipeChain has only two exports: `PipeChain`, and `PLACEHOLDER`.\n\n`PipeChain` is a class that defines a pipeline.\nYou create an instance of the class, and then call `.pipe()` to add another function onto the pipeline:\n\n\n```python\nfrom pipechain import PipeChain, PLACEHOLDER\nPipeChain(1).pipe(str)\n```\n\n\n\n\n    PipeChain(arg=1, pipes=[functools.partial(<class 'str'>)])\n\n\n\nFinally, you call `.eval()` to run the pipeline and return the result:\n\n\n```python\nPipeChain(1).pipe(str).eval()\n```\n\n\n\n\n    '1'\n\n\n\nYou can \"feed\" the pipe at either end, either during construction (`PipeChain(\"foo\")`), or during evaluation `.eval(\"foo\")`:\n\n\n```python\nPipeChain().pipe(str).eval(1)\n```\n\n\n\n\n    '1'\n\n\n\nEach call to `.pipe()` takes a function, and any additional arguments you provide, both positional and keyword, will be forwarded to the function:\n\n\n```python\nPipeChain([\"b\", \"a\", \"c\"]).pipe(sorted, reverse=True).eval()\n```\n\n\n\n\n    ['c', 'b', 'a']\n\n\n\n### Argument Position\nBy default, the previous value is passed as the first positional argument to the function:\n\n\n```python\nPipeChain(2).pipe(pow, 3).eval()\n```\n\n\n\n\n    8\n\n\n\nThe only magic here is that if you use the `PLACEHOLDER` variable as an argument to `.pipe()`, then the pipeline will replace it with the output of the previous pipe at runtime:\n\n\n```python\nPipeChain(2).pipe(pow, 3, PLACEHOLDER).eval()\n```\n\n\n\n\n    9\n\n\n\nNote that you can rename `PLACEHOLDER` to something more usable using Python's import statement, e.g.\n\n\n```python\nfrom pipechain import PLACEHOLDER as _\nPipeChain(2).pipe(pow, 3, _).eval()\n\n```\n\n\n\n\n    9\n\n\n\n### Methods\nIt might not see like methods will play that well with this pipe convention, but after all, they are just functions.\nYou should be able to access any object's method as a function by accessing it on that object's parent class.\nIn the below example, `str` is the parent class of \"\":\n\n\n```python\n\"\".join([\"a\", \"b\", \"c\"])\n```\n\n\n\n\n    'abc'\n\n\n\n\n```python\nPipeChain([\"a\", \"b\", \"c\"]).pipe(str.join, \"\", _).eval()\n```\n\n\n\n\n    'abc'\n\n\n\n### Operators\n\nThe same goes for operators, such as `+`, `*`, `[]` etc.\nWe just have to use the `operator` module in the standard library:\n\n\n```python\nfrom operator import add, mul, getitem\n\nPipeChain(5).pipe(mul, 3).eval()\n```\n\n\n\n\n    15\n\n\n\n\n```python\nPipeChain(5).pipe(add, 3).eval()\n```\n\n\n\n\n    8\n\n\n\n\n```python\nPipeChain([\"a\", \"b\", \"c\"]).pipe(getitem, 1).eval()\n```\n\n\n\n\n    'b'\n\n\n\n## Test Suite\n\nNote, you will need poetry installed.\n\nTo run the test suite, use:\n\n```bash\ngit clone https://github.com/multimeric/PipeChain.git\ncd PipeChain\npoetry install\npoetry run pytest test/test.py\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/multimeric/PipeChain",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipechain",
    "package_url": "https://pypi.org/project/pipechain/",
    "platform": "",
    "project_url": "https://pypi.org/project/pipechain/",
    "project_urls": {
      "Homepage": "https://github.com/multimeric/PipeChain",
      "Repository": "https://github.com/multimeric/PipeChain"
    },
    "release_url": "https://pypi.org/project/pipechain/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7,<3.11",
    "summary": "Functional pipelines in Python using method chaining",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13005327,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc071701fa22cb5019aa5f92e18a442fffd24dd81bcd6c0eba614dad7d6361c",
          "md5": "fe47a7e1ff99b57d50c2bb4ae64d0d8a",
          "sha256": "bc5672d15227604b242aede45a2561961b2227c1411945cbb6b1687afb3fc2f9"
        },
        "downloads": -1,
        "filename": "pipechain-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe47a7e1ff99b57d50c2bb4ae64d0d8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 5298,
        "upload_time": "2021-10-26T14:02:24",
        "upload_time_iso_8601": "2021-10-26T14:02:24.436886Z",
        "url": "https://files.pythonhosted.org/packages/5f/c0/71701fa22cb5019aa5f92e18a442fffd24dd81bcd6c0eba614dad7d6361c/pipechain-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eacda50389a8736024be78f95a48469dda56b9e1ec2b2b86e29ceebc643fc6f8",
          "md5": "f1218b8c0a66b27583aaa7eea1f9fe4b",
          "sha256": "c2b8d8a572034f3178a06aa5233295a427ed65821e04ca9a604aba3498046143"
        },
        "downloads": -1,
        "filename": "pipechain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1218b8c0a66b27583aaa7eea1f9fe4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 4915,
        "upload_time": "2021-10-26T14:02:27",
        "upload_time_iso_8601": "2021-10-26T14:02:27.452896Z",
        "url": "https://files.pythonhosted.org/packages/ea/cd/a50389a8736024be78f95a48469dda56b9e1ec2b2b86e29ceebc643fc6f8/pipechain-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32beb4644247b6f74056358ef056c9d94e37c51f3d41ec3910c328aef7f2eb03",
          "md5": "54570ec31af2197ea6134403e80c8107",
          "sha256": "d236307032218c188a889ca0770396403dcea7ae6454a223c960bdcf2840d5eb"
        },
        "downloads": -1,
        "filename": "pipechain-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54570ec31af2197ea6134403e80c8107",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 5383,
        "upload_time": "2022-02-25T02:05:46",
        "upload_time_iso_8601": "2022-02-25T02:05:46.653257Z",
        "url": "https://files.pythonhosted.org/packages/32/be/b4644247b6f74056358ef056c9d94e37c51f3d41ec3910c328aef7f2eb03/pipechain-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4e16934f2752e836762837f57982d758716524017926a4173e957ab4add2959",
          "md5": "163ad794f47a136068d08354e7f1ef74",
          "sha256": "d9bd8dab7d6772d5e4773a297cc8f9efd5cc073341638a83edb4a2c9bf541482"
        },
        "downloads": -1,
        "filename": "pipechain-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "163ad794f47a136068d08354e7f1ef74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 5079,
        "upload_time": "2022-02-25T02:05:48",
        "upload_time_iso_8601": "2022-02-25T02:05:48.225230Z",
        "url": "https://files.pythonhosted.org/packages/a4/e1/6934f2752e836762837f57982d758716524017926a4173e957ab4add2959/pipechain-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32beb4644247b6f74056358ef056c9d94e37c51f3d41ec3910c328aef7f2eb03",
        "md5": "54570ec31af2197ea6134403e80c8107",
        "sha256": "d236307032218c188a889ca0770396403dcea7ae6454a223c960bdcf2840d5eb"
      },
      "downloads": -1,
      "filename": "pipechain-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54570ec31af2197ea6134403e80c8107",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<3.11",
      "size": 5383,
      "upload_time": "2022-02-25T02:05:46",
      "upload_time_iso_8601": "2022-02-25T02:05:46.653257Z",
      "url": "https://files.pythonhosted.org/packages/32/be/b4644247b6f74056358ef056c9d94e37c51f3d41ec3910c328aef7f2eb03/pipechain-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4e16934f2752e836762837f57982d758716524017926a4173e957ab4add2959",
        "md5": "163ad794f47a136068d08354e7f1ef74",
        "sha256": "d9bd8dab7d6772d5e4773a297cc8f9efd5cc073341638a83edb4a2c9bf541482"
      },
      "downloads": -1,
      "filename": "pipechain-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "163ad794f47a136068d08354e7f1ef74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<3.11",
      "size": 5079,
      "upload_time": "2022-02-25T02:05:48",
      "upload_time_iso_8601": "2022-02-25T02:05:48.225230Z",
      "url": "https://files.pythonhosted.org/packages/a4/e1/6934f2752e836762837f57982d758716524017926a4173e957ab4add2959/pipechain-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}