{
  "info": {
    "author": "Kerstin Hammernik, Thomas Kuestner",
    "author_email": "merlin.midastum@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "\n# MERLIN - Machine Enhanced Reconstruction Learning and Interpretation Networks\n<!-- markdownlint-disable -->\n<p align=\"center\">\n<a href=\"http://merlin-mri.rtfd.io/\">\n<img src=\"https://github.com/midas-tum/merlin/blob/3486af88e5370d49074883bc8cd1816687b8915f/notebooks/fig/MERLIN_logo.png\" width=\"150\" alt=\"MERLIN logo\"> \n</a>\n</p>\n<!-- markdownlint-restore -->\n\nThis repository contains machine learning (ML) tools for PyTorch, TensorFlow and Python in three modules:\n- `merlinth`: ML extensions to PyTorch\n- `merlintf`: ML extensions to TensorFlow\n- `merlinpy`: ML extensions to Python\n\nIf you use this code, please cite\n```\n@inproceedings{HammernikKuestner2022,\n  title={Machine Enhanced Reconstruction Learning and Interpretation Networks (MERLIN)},\n  author={Hammernik, K. and K{\\\"u}stner, T.},\n  booktitle={Proceedings of the International Society for Magnetic Resonance in Medicine (ISMRM)},\n  year={2022}\n}\n```\n\n## Requirements\n```\ngit clone https://github.com/midas-tum/optox.git\ncd optox\npython3 install.py\n```\n\nfollow build instructions on the github.\n\n## Installation\n### PyPi \n```\npip3 install merlinpy-mri merlinth-mri merlintf-mri\n```\nIn case you want to use the sampling codes (C++), please use the direct way installation below for direct compilation according to your system setup. \n### Direct way\n\n```\ngit clone https://github.com/midas-tum/merlin.git\npython3 install.py\n```\n\n## Verification\nRun unittests to ensure proper working of sub-modules\n```\npython3 -m unittest discover -s merlinpy.test\npython3 -m unittest discover -s merlinth.test\npython3 -m unittest discover -s merlintf.test\n```\n\n## Contents\n**!!! Attention !!!** This package is work in progress and still under construction.\nMajor changes in structure will appear. If you experience any issues, if you have any feature requests or if you found any bugs, please let us know and raise an issue and/or pull request in github :)\n\nPlease watch the `Issues` space and look for the latest updates regularly! :)\n### merlinth\n```\nmerlinth\n    |--- layers     # Data-driven regularizer following (https://github.com/VLOGroup/tdv), extended to complex-valued layers and similar setup as layers in `merlintf.keras`\n        |-- Complex-valued convolutions\n        |-- Complex-valued activations\n        |-- Complex-valued pooling\n        |-- Complex-valued normalization\n        |-- FFT operations\n        |-- Data consistency\n        |-- ...\n    |-- losses     # Common and custom loss functions\n    |-- models     # Model zoo\n        |-- Fields-of-Experts (FOE) regularizer\n        |-- Total deep variation (TDV) regularizer\n        |-- UNet\n    |-- optim      # Custom optimizers such as BlockAdam\n```\n\n### merlintf\n```\nmerlintf\n    |-- keras\n        |-- layers      # basic building blocks, focusing on complex valued operations\n            |-- Complex-valued convolutions\n            |-- Complex-valued activations\n            |-- Complex-valued pooling\n            |-- Complex-valued normalization\n            |-- FFT operations\n            |-- Data consistency\n            |-- ...\n        |-- models      # several layers are put together into networks for complex-valued processing (2-channel-real networks, complex networks)\n            |-- Convolutional Neural Network\n            |-- Fields-of-Experts (FOE) regularizer\n            |-- Total deep variation (TDV) regularizer\n            |-- UNet\n        |-- optimizers       # custom optimizers    \n    |-- optim                # custom optimizers\n```\n\n### merlinpy\n```\nmerlinpy\n    |-- datapipeline        # collection of datapipelines and transform functions\n        |-- sampling        # subsampling codes and sampling trajectories\n    |-- fastmri             # dataloader and processing related to fastMRI database\n    |-- losses              # losses/metrics\n    |-- recon               # conventional reconstructions\n    |-- wandb               # logging via wandb.ai\n```\n\n## Common mistakes and best practices \n### writing own keras modules and layers\n- `tf.keras.Model` cannot hold any trainable parameters. All trainable weights have to be defined in `tf.keras.layers.Layers`. Wrong implementation will cause weird behaviour when saving and re-loading the model weights!\n- Do *not* define weights in the `__init__` function. Weights should be only \ncreated and initialized in the `def build(self, input_shape)` function of the `Layer`.\nWrong implementation will cause weird behaviour when saving and re-loading the model weights!\n- The online documentation is a good orientation point to write own modules.\nMake use of keras `Constraints` and `Initializers`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/midas-tum/merlin",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "merlinth-mri",
    "package_url": "https://pypi.org/project/merlinth-mri/",
    "platform": null,
    "project_url": "https://pypi.org/project/merlinth-mri/",
    "project_urls": {
      "Homepage": "https://github.com/midas-tum/merlin"
    },
    "release_url": "https://pypi.org/project/merlinth-mri/0.4.0/",
    "requires_dist": [
      "numpy (>=1.15)",
      "torch (>=1.0.0)",
      "torchvision (>=0.2.1)"
    ],
    "requires_python": "",
    "summary": "Machine Enhanced Reconstruction Learning and Interpretation Networks (MERLIN) - merlinth",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17303231,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2fea7263c4c6dcaa3172e42b0ddc45c9469957c3b098343ae6ae2541357b468",
          "md5": "0c4cb052b79eaf69ca2c3769b96b7648",
          "sha256": "19f27ebe3f5bb041ccef05f280cc0bdcee96891dc1987361809f1b2b9c5d80ad"
        },
        "downloads": -1,
        "filename": "merlinth_mri-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c4cb052b79eaf69ca2c3769b96b7648",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 82167,
        "upload_time": "2023-03-15T12:50:18",
        "upload_time_iso_8601": "2023-03-15T12:50:18.532529Z",
        "url": "https://files.pythonhosted.org/packages/a2/fe/a7263c4c6dcaa3172e42b0ddc45c9469957c3b098343ae6ae2541357b468/merlinth_mri-0.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30389b375119ddfb75462ed473a97e08f73f446c762fffe204302c73af95eefc",
          "md5": "110483cb616685214d3a34f5989cb877",
          "sha256": "3192896a9e10c578d60e40642e1874d113721827d05235dbfa7ddc212def582d"
        },
        "downloads": -1,
        "filename": "merlinth-mri-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "110483cb616685214d3a34f5989cb877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61734,
        "upload_time": "2023-03-15T12:50:20",
        "upload_time_iso_8601": "2023-03-15T12:50:20.954210Z",
        "url": "https://files.pythonhosted.org/packages/30/38/9b375119ddfb75462ed473a97e08f73f446c762fffe204302c73af95eefc/merlinth-mri-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2fea7263c4c6dcaa3172e42b0ddc45c9469957c3b098343ae6ae2541357b468",
        "md5": "0c4cb052b79eaf69ca2c3769b96b7648",
        "sha256": "19f27ebe3f5bb041ccef05f280cc0bdcee96891dc1987361809f1b2b9c5d80ad"
      },
      "downloads": -1,
      "filename": "merlinth_mri-0.4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c4cb052b79eaf69ca2c3769b96b7648",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 82167,
      "upload_time": "2023-03-15T12:50:18",
      "upload_time_iso_8601": "2023-03-15T12:50:18.532529Z",
      "url": "https://files.pythonhosted.org/packages/a2/fe/a7263c4c6dcaa3172e42b0ddc45c9469957c3b098343ae6ae2541357b468/merlinth_mri-0.4.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30389b375119ddfb75462ed473a97e08f73f446c762fffe204302c73af95eefc",
        "md5": "110483cb616685214d3a34f5989cb877",
        "sha256": "3192896a9e10c578d60e40642e1874d113721827d05235dbfa7ddc212def582d"
      },
      "downloads": -1,
      "filename": "merlinth-mri-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "110483cb616685214d3a34f5989cb877",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61734,
      "upload_time": "2023-03-15T12:50:20",
      "upload_time_iso_8601": "2023-03-15T12:50:20.954210Z",
      "url": "https://files.pythonhosted.org/packages/30/38/9b375119ddfb75462ed473a97e08f73f446c762fffe204302c73af95eefc/merlinth-mri-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}