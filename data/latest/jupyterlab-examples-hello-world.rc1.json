{
  "info": {
    "author": "Project Jupyter Contributors",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Jupyter",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Hello World\n\n> Set up the development environment and print to the console.\n\n![hello world example](./preview.png)\n\n- [The template folder structure](#the-template-folder-structure)\n- [A minimal extension that prints to the browser console](#a-minimal-extension-that-prints-to-the-browser-console)\n- [Building and Installing an Extension](#building-and-installing-an-extension)\n\n## The template folder structure\n\nWriting a JupyterLab extension usually starts from a configurable template. It\ncan be downloaded with the [`cookiecutter`](https://cookiecutter.readthedocs.io/en/latest/) tool and the following command:\n\n```bash\ncookiecutter https://github.com/jupyterlab/extension-cookiecutter-ts\n```\n\n`cookiecutter` asks for some basic information that could for example be setup\nlike this:\n\n```bash\nauthor_name []: tuto\nauthor_email []: tuto@help.you\nlabextension_name [myextension]: hello-world\npython_name [hello_world]:\nproject_short_description [A JupyterLab extension.]: Minimal JupyterLab example\nhas_settings [n]:\nhas_server_extension [n]:\nhas_binder [n]: y\nrepository [https://github.com/github_username/hello-world]:\n```\n\n> The python name should not contain `-`. It is nice for user to test your extension online, so the `has_binder` was set to _yes_.\n\nThe cookiecutter creates the directory `hello_world` [or your extension name]\nthat looks like this:\n\n```bash\nhello_world/\n│   .eslintignore\n│   .eslintrc.js\n│   .gitignore\n│   .prettierignore\n│   .prettierrc\n│   install.json\n│   LICENSE\n│   MANIFEST.in\n│   package.json\n│   pyproject.toml\n│   README.md\n│   setup.py\n│   tsconfig.json\n│\n├───.github\n│   └───workflows\n│           build.yml\n│\n├───binder\n│       environment.yml\n│       postBuild\n│\n├───hello_world\n│       __init__.py\n│       _version.py\n│\n├───src\n│       index.ts\n│\n└───style\n        base.css\n        index.css\n        index.js\n```\n\nThose files can be separated in 4 groups:\n\n- Information about the extension:\n  - `README.md` contains some instructions\n  - `LICENSE` contains your extension code license; BSD-3 Clause by default (but you can change it).\n- Extension code (those files are mandatory):\n  - `package.json` contains information about the extension such as dependencies\n  - `tsconfig.json` contains information for the typescript compilation\n  - `src/index.ts` _this contains the actual code of your extension_\n  - `style/` folder contains style elements that you can use\n- Validation:\n  - `.prettierrc` and `.prettierignore` specify the code formatter [`prettier`](https://prettier.io) configuration\n  - `.eslintrc.js` and `.eslintignore` specify the code linter [`eslint`](https://eslint.org) configuration\n  - `.github/workflows/build.yml` sets the continuous integration tests of the code using [GitHub Actions](https://help.github.com/en/actions)\n- Packaging as a Python package:\n  - `setup.py` contains information about the Python package such as what to package\n  - `pyproject.toml` contains the dependencies to create the Python package\n  - `MANIFEST.in` contains list of non-Python files to include in the Python package\n  - `install.json` contains information retrieved by JupyterLab to help users know how to manage the package\n  - `hello_world/` folder contains the final code to be distributed\n\nThe following sections will walk you through the extension code files.\n\n## A minimal extension that prints to the browser console\n\nStart with the file `src/index.ts`. This typescript file contains the main\nlogic of the extension. It begins with the following import section:\n\n<!-- prettier-ignore-start -->\n```ts\n// src/index.ts#L1-L4\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n} from '@jupyterlab/application';\n```\n<!-- prettier-ignore-end -->\n\n`JupyterFrontEnd` is the main Jupyterlab application class. It allows you to\naccess and modify some of its main components. `JupyterFrontEndPlugin` is the class\nof the extension that you are building. Both classes are imported from a package\ncalled `@jupyterlab/application`. The dependency of your extension on this\npackage is declared in the file `package.json`:\n\n```json5\n// package.json#L49-L51\n\n\"dependencies\": {\n  \"@jupyterlab/application\": \"^3.1.0\"\n},\n```\n\nWith this basic import setup, you can move on to construct a new instance\nof the `JupyterFrontEndPlugin` class:\n\n<!-- prettier-ignore-start -->\n```ts\n// src/index.ts#L9-L12\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'hello-world:plugin',\n  autoStart: true,\n  activate: (app: JupyterFrontEnd) => {\n```\n\n```ts\n    console.log('JupyterLab extension hello-world is activated!');\n```\n\n```ts\n// src/index.ts#L14-L17\n\n  },\n};\n\nexport default plugin;\n```\n<!-- prettier-ignore-end -->\n\nA `JupyterFrontEndPlugin` contains a few attributes:\n\n- `id`: the unique id of the extension\n- `autoStart`: a flag to start the extension automatically or not\n- `activate`: a\n  function (`() => {}` notation) that takes one argument `app` of type\n  `JupyterFrontEnd` and will be called by the main application to activate the extension.\n\n`app` is the main JupyterLab application. The `activate` function acts as an entry\npoint into the extension. In this example, it calls the `console.log` function to output\nsomething into the browser developer tools console.\n\nYour new `JupyterFrontEndPlugin` instance has to be finally exported to be visible to\nJupyterLab, which is done with the line `export default plugin`.\n\nNow that the extension code is ready, you need to install it within JupyterLab.\n\n## Building and Installing an Extension\n\nThese are the instructions on how your extension can be installed for development:\n\n> You will need NodeJS to build the extension package.\n\n```bash\n# Install package in development mode\npip install -e .\n# Link your development version of the extension with JupyterLab\njupyter labextension develop . --overwrite\n# Rebuild extension Typescript source after making changes\njlpm run build\n```\n\n> The `jlpm` command is JupyterLab's pinned version of\n> [yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use\n> `yarn` or `npm` in lieu of `jlpm` below.\n\nThe first command installs the dependencies that are specified in the\n`setup.py` file and in `package.json`. Among the dependencies are also all of the `JupyterLab` components that you want to use in your project.\n\nIt then runs the build script. In that step, the TypeScript code gets\nconverted to javascript using the compiler `tsc` and stored in a `lib`\ndirectory. And a condensed form of the Javascript is copied in the Python\npackage (in the folder `hello_world/labextension`). This is the code that\nwould be installed by the user in JupyterLab.\n\nThe second command create a symbolic link to the folder `hello_world/labextension` so that extension is installed in development mode in JupyterLab.\n\nThe third command allows you to update the Javascript code each time you modify your\nextension code.\n\nAfter all of these steps are done, running `jupyter labextension list` should\nshow something like:\n\n```bash\n   local extensions:\n        @jupyterlab-examples/hello-world: [...]/hello-world\n```\n\nNow let's check inside of JupyterLab if it works. Run [can take a while]:\n\n```bash\njupyter lab --watch\n```\n\nYour extension writes something to the browser console. In most web browsers you can\nopen the console pressing the `F12` key. You should see something like:\n\n```\nJupyterLab extension hello-world is activated\n```\n\nYour extension works but it is not doing much. Let's modify the source code\na bit. Simply replace the `activate` function with the following lines:\n\n<!-- prettier-ignore-start -->\n```ts\n// src/index.ts#L12-L14\n\nactivate: (app: JupyterFrontEnd) => {\n  console.log('the JupyterLab main application:', app);\n},\n```\n<!-- prettier-ignore-end -->\n\nTo update the module, simply go to the extension directory and run\n`jlpm build` again. Since you used the `--watch` option when starting\nJupyterLab, you just have to refresh the JupyterLab website in the browser\nand should see in the browser console:\n\n```\nthe JupyterLab main application:\nObject { _started: true, _pluginMap: {…}, _serviceMap: Map(...), _delegate: {…}, commands: {…}, contextMenu: {…}, shell: {…}, registerPluginErrors: [], _dirtyCount: 0, _info: {…}, … }\n```\n\nThis is the main application JupyterLab object and you will see how to interact\nwith it in the other examples.\n\nCheckout how the core packages of JupyterLab are defined\n[on this page](https://github.com/jupyterlab/jupyterlab/tree/master/packages). Each package is\nstructured similarly to the extension that you are writing. This modular\nstructure makes JupyterLab very adaptable.\n\nAn overview of the classes and their attributes and methods can be found in the\nJupyterLab documentation. The `@jupyterlab/application` module documentation is\n[here](https://jupyterlab.github.io/jupyterlab/modules/_application_src_index_.html)\nand here is the [JupyterFrontEnd class documentation](https://jupyterlab.github.io/jupyterlab/classes/_application_src_index_.jupyterfrontend.html).\n\n## Where to Go Next\n\nJupyterLab is built on top of three major concepts. It is advised to look through the corresponding\nexamples in the following order:\n\n- _command_: Function to be executed from UI elements. See the [commands example](../commands)\n- _widget_: UI based brick. See the [widgets example](../widgets)\n- _signal_: Observer pattern between JupyterLab elements. See the [signals example](../signals)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jupyterlab/extension-examples",
    "keywords": "Jupyter,JupyterLab,JupyterLab3",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jupyterlab-examples-hello-world",
    "package_url": "https://pypi.org/project/jupyterlab-examples-hello-world/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/jupyterlab-examples-hello-world/",
    "project_urls": {
      "Homepage": "https://github.com/jupyterlab/extension-examples"
    },
    "release_url": "https://pypi.org/project/jupyterlab-examples-hello-world/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "minimal lab example",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13049155,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bce2bff7adc8aef35b9e68e417af8610feb6841f2e64c5dc8be8727fa8c866d",
          "md5": "0a4c7aec6d1f3770c7410f0e71d70991",
          "sha256": "4cff4f9015a50447439d08a8ee59f12eb7709027e169b42a4c9aa6cbf4fc711c"
        },
        "downloads": -1,
        "filename": "jupyterlab_examples_hello_world-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a4c7aec6d1f3770c7410f0e71d70991",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21292,
        "upload_time": "2022-03-01T19:52:34",
        "upload_time_iso_8601": "2022-03-01T19:52:34.484108Z",
        "url": "https://files.pythonhosted.org/packages/9b/ce/2bff7adc8aef35b9e68e417af8610feb6841f2e64c5dc8be8727fa8c866d/jupyterlab_examples_hello_world-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28da61ded60e739f490453e9e48d571126686ecb3ea0b3069e187e960d3856be",
          "md5": "0f0953b175555bd96cd7326efc0f20ef",
          "sha256": "f51853ed57b44b078ac3cb7e604190df68a4b44a21576b274a9f5c6e4825f382"
        },
        "downloads": -1,
        "filename": "jupyterlab_examples_hello_world-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f0953b175555bd96cd7326efc0f20ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16300,
        "upload_time": "2022-03-01T19:52:36",
        "upload_time_iso_8601": "2022-03-01T19:52:36.884542Z",
        "url": "https://files.pythonhosted.org/packages/28/da/61ded60e739f490453e9e48d571126686ecb3ea0b3069e187e960d3856be/jupyterlab_examples_hello_world-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bce2bff7adc8aef35b9e68e417af8610feb6841f2e64c5dc8be8727fa8c866d",
        "md5": "0a4c7aec6d1f3770c7410f0e71d70991",
        "sha256": "4cff4f9015a50447439d08a8ee59f12eb7709027e169b42a4c9aa6cbf4fc711c"
      },
      "downloads": -1,
      "filename": "jupyterlab_examples_hello_world-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a4c7aec6d1f3770c7410f0e71d70991",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21292,
      "upload_time": "2022-03-01T19:52:34",
      "upload_time_iso_8601": "2022-03-01T19:52:34.484108Z",
      "url": "https://files.pythonhosted.org/packages/9b/ce/2bff7adc8aef35b9e68e417af8610feb6841f2e64c5dc8be8727fa8c866d/jupyterlab_examples_hello_world-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28da61ded60e739f490453e9e48d571126686ecb3ea0b3069e187e960d3856be",
        "md5": "0f0953b175555bd96cd7326efc0f20ef",
        "sha256": "f51853ed57b44b078ac3cb7e604190df68a4b44a21576b274a9f5c6e4825f382"
      },
      "downloads": -1,
      "filename": "jupyterlab_examples_hello_world-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f0953b175555bd96cd7326efc0f20ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16300,
      "upload_time": "2022-03-01T19:52:36",
      "upload_time_iso_8601": "2022-03-01T19:52:36.884542Z",
      "url": "https://files.pythonhosted.org/packages/28/da/61ded60e739f490453e9e48d571126686ecb3ea0b3069e187e960d3856be/jupyterlab_examples_hello_world-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}