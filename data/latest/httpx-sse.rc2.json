{
  "info": {
    "author": "",
    "author_email": "Florimond Manca <florimond.manca@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# httpx-sse\n\n[![Build Status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.httpx-sse?branchName=master)](https://dev.azure.com/florimondmanca/public/_build?definitionId=19)\n[![Coverage](https://codecov.io/gh/florimondmanca/httpx-sse/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/httpx-sse)\n[![Package version](https://badge.fury.io/py/httpx-sse.svg)](https://pypi.org/project/httpx-sse)\n\nConsume [Server-Sent Event (SSE)](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events) messages with [HTTPX](https://www.python-httpx.org).\n\n**Table of contents**\n\n- [Installation](#installation)\n- [Quickstart](#quickstart)\n- [How-To](#how-to)\n- [API Reference](#api-reference)\n\n## Installation\n\n**NOTE**: This is alpha software. Please be sure to pin your dependencies.\n\n```bash\npip install httpx-sse==\"0.2.*\"\n```\n\n## Quickstart\n\n`httpx-sse` provides the [`connect_sse`](#connect_sse) and [`aconnect_sse`](#aconnect_sse) helpers for connecting to an SSE endpoint. The resulting [`EventSource`](#eventsource) object exposes the [`.iter_sse()`](#iter_sse) and [`.aiter_sse()`](#aiter_sse) methods to iterate over the server-sent events.\n\nExample usage:\n\n```python\nimport httpx\nfrom httpx_sse import connect_sse\n\nwith httpx.Client() as client:\n    with connect_sse(client, \"GET\", \"http://localhost:8000/sse\") as event_source:\n        for sse in event_source.iter_sse():\n            print(sse.event, sse.data, sse.id, sse.retry)\n```\n\nYou can try this against this example Starlette server ([credit](https://sysid.github.io/sse/)):\n\n```python\n# Requirements: pip install uvicorn starlette sse-starlette\nimport asyncio\nimport uvicorn\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom sse_starlette.sse import EventSourceResponse\n\nasync def numbers(minimum, maximum):\n    for i in range(minimum, maximum + 1):\n        await asyncio.sleep(0.9)\n        yield {\"data\": i}\n\nasync def sse(request):\n    generator = numbers(1, 5)\n    return EventSourceResponse(generator)\n\nroutes = [\n    Route(\"/sse\", endpoint=sse)\n]\n\napp = Starlette(routes=routes)\n\nif __name__ == \"__main__\":\n    uvicorn.run(app)\n```\n\n## How-To\n\n### Calling into Python web apps\n\nYou can [call into Python web apps](https://www.python-httpx.org/async/#calling-into-python-web-apps) with HTTPX and `httpx-sse` to test SSE endpoints directly.\n\nHere's an example of calling into a Starlette ASGI app...\n\n```python\nimport asyncio\n\nimport httpx\nfrom httpx_sse import aconnect_sse\nfrom sse_starlette.sse import EventSourceResponse\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\n\nasync def auth_events(request):\n    async def events():\n        yield {\n            \"event\": \"login\",\n            \"data\": '{\"user_id\": \"4135\"}',\n        }\n\n    return EventSourceResponse(events())\n\napp = Starlette(routes=[Route(\"/sse/auth/\", endpoint=auth_events)])\n\nasync def main():\n    async with httpx.AsyncClient(app=app) as client:\n        async with aconnect_sse(\n            client, \"GET\", \"http://localhost:8000/sse/auth/\"\n        ) as event_source:\n            events = [sse async for sse in event_source.aiter_sse()]\n            (sse,) = events\n            assert sse.event == \"login\"\n            assert sse.json() == {\"user_id\": \"4135\"}\n\nasyncio.run(main())\n```\n\n### Handling reconnections\n\n_(Advanced)_\n\n`SSETransport` and `AsyncSSETransport` don't have reconnection built-in. This is because how to perform retries is generally dependent on your use case. As a result, if the connection breaks while attempting to read from the server, you will get an `httpx.ReadError` from `iter_sse()` (or `aiter_sse()`).\n\nHowever, `httpx-sse` does allow implementing reconnection by using the `Last-Event-ID` and reconnection time (in milliseconds), exposed as `sse.id` and `sse.retry` respectively.\n\nHere's how you might achieve this using [`stamina`](https://github.com/hynek/stamina)...\n\n```python\nimport time\nfrom typing import Iterator\n\nimport httpx\nfrom httpx_sse import iter_sse, ServerSentEvent\nfrom stamina import retry\n\ndef iter_sse_retrying(client, method, url):\n    last_event_id = \"\"\n    reconnection_delay = 0.0\n\n    # `stamina` will apply jitter and exponential backoff on top of\n    # the `retry` reconnection delay sent by the server.\n    @retry(on=httpx.ReadError)\n    def _iter_sse():\n        nonlocal last_event_id, reconnection_delay\n\n        time.sleep(reconnection_delay)\n\n        headers = {\"Accept\": \"text/event-stream\"}\n\n        if last_event_id:\n            headers[\"Last-Event-ID\"] = last_event_id\n\n        with connect_sse(client, method, url, headers=headers) as event_source:\n            for sse in event_source.iter_sse():\n                last_event_id = sse.id\n\n                if sse.retry is not None:\n                    reconnection_delay = sse.retry / 1000\n\n                yield sse\n\n    return _iter_sse()\n```\n\nUsage:\n\n```python\nwith httpx.Client() as client:\n    for iter_sse_retrying(client, \"GET\", \"http://localhost:8000/sse\") as sse:\n        print(sse.event, sse.data)\n```\n\n## API Reference\n\n### `connect_sse`\n\n```python\ndef connect_sse(\n    client: httpx.Client,\n    method: str,\n    url: Union[str, httpx.URL],\n    **kwargs,\n) -> ContextManager[EventSource]\n```\n\nConnect to an SSE endpoint and return an [`EventSource`](#eventsource) context manager.\n\nThis sets `Cache-Control: no-store` on the request, as per the SSE spec, as well as `Accept: text/event-stream`.\n\nIf the response `Content-Type` is not `text/event-stream`, this will raise an [`SSEError`](#sseerror).\n\n### `aconnect_sse`\n\n```python\nasync def aconnect_sse(\n    client: httpx.AsyncClient,\n    method: str,\n    url: Union[str, httpx.URL],\n    **kwargs,\n) -> AsyncContextManager[EventSource]\n```\n\nAn async equivalent to [`connect_sse`](#connect_sse).\n\n### `EventSource`\n\n```python\ndef __init__(response: httpx.Response)\n```\n\nHelper for working with an SSE response.\n\n#### `response`\n\nThe underlying [`httpx.Response`](https://www.python-httpx.org/api/#response).\n\n#### `iter_sse`\n\n```python\ndef iter_sse() -> Iterator[ServerSentEvent]\n```\n\nDecode the response content and yield corresponding [`ServerSentEvent`](#serversentevent).\n\nExample usage:\n\n```python\nfor sse in event_source.iter_sse():\n    ...\n```\n\n#### `aiter_sse`\n\n```python\nasync def iter_sse() -> AsyncIterator[ServerSentEvent]\n```\n\nAn async equivalent to `iter_sse`.\n\n### `ServerSentEvent`\n\nRepresents a server-sent event.\n\n* `event: str` - Defaults to `\"message\"`.\n* `data: str` - Defaults to `\"\"`.\n* `id: str` - Defaults to `\"\"`.\n* `retry: str | None` - Defaults to `None`.\n\nMethods:\n\n* `json() -> Any` - Returns `sse.data` decoded as JSON.\n\n### `SSEError`\n\nAn error that occurred while making a request to an SSE endpoint.\n\nParents:\n\n* `httpx.TransportError`\n\n## License\n\nMIT\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.2.0 - 2023-03-27\n\n### Changed\n\n* `connect_sse()` and `aconnect_sse()` now require a `method` argument: `connect_sse(client, \"GET\", \"https://example.org\")`. This provides support for SSE requests with HTTP verbs other than `GET`. (Pull #7)\n\n## 0.1.0 - 2023-02-05\n\n_Initial release_\n\n### Added\n\n* Add `connect_sse`, `aconnect_sse()`, `ServerSentEvent` and `SSEError`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "httpx-sse",
    "package_url": "https://pypi.org/project/httpx-sse/",
    "platform": null,
    "project_url": "https://pypi.org/project/httpx-sse/",
    "project_urls": {
      "Homepage": "https://github.com/florimondmanca/httpx-sse"
    },
    "release_url": "https://pypi.org/project/httpx-sse/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Consume Server-Sent Event (SSE) messages with HTTPX.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17460632,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96c421bafd406f8fcd20e02d1455210e23ea6e4071b00ee84eacedddf1a70ac8",
          "md5": "76472aeb870cd74a926f8d6dcd26ffbd",
          "sha256": "aa0457ac4c77c3f0254555fcbfa9ee7cdb49c5040ed66731f8b20743ccb57e32"
        },
        "downloads": -1,
        "filename": "httpx_sse-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76472aeb870cd74a926f8d6dcd26ffbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7260,
        "upload_time": "2023-02-05T00:07:59",
        "upload_time_iso_8601": "2023-02-05T00:07:59.920870Z",
        "url": "https://files.pythonhosted.org/packages/96/c4/21bafd406f8fcd20e02d1455210e23ea6e4071b00ee84eacedddf1a70ac8/httpx_sse-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47053c89c64d933212f4ef6f6330e60f26cbe050131533e484cb05f1b736aea7",
          "md5": "e8f9c1615c10b1524651b1ea5dd34d8b",
          "sha256": "ee56224a1b803056f7167c2e36fdafb060171ccd07d4a1142e29e227b3224149"
        },
        "downloads": -1,
        "filename": "httpx-sse-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8f9c1615c10b1524651b1ea5dd34d8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11485,
        "upload_time": "2023-02-05T00:08:01",
        "upload_time_iso_8601": "2023-02-05T00:08:01.294579Z",
        "url": "https://files.pythonhosted.org/packages/47/05/3c89c64d933212f4ef6f6330e60f26cbe050131533e484cb05f1b736aea7/httpx-sse-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "927b21edaf0327e8cef4c76df8c5ccba78f189eb82c57f91204ba5564810711f",
          "md5": "c8ad8cfb3fe97716587542af91bbebf3",
          "sha256": "8cd94de81cb59ffc4b016965ee94c1cd500b07855d96697eb4d53145a7d77583"
        },
        "downloads": -1,
        "filename": "httpx_sse-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8ad8cfb3fe97716587542af91bbebf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7374,
        "upload_time": "2023-03-27T12:10:22",
        "upload_time_iso_8601": "2023-03-27T12:10:22.746483Z",
        "url": "https://files.pythonhosted.org/packages/92/7b/21edaf0327e8cef4c76df8c5ccba78f189eb82c57f91204ba5564810711f/httpx_sse-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4f8db23f469f007ed4fc2662d5b40485eddc6e20cda1365dc184dc22a85f282",
          "md5": "b60a77a1e03db50f5061a632582a43ce",
          "sha256": "379697a5afd4ceda934603cff60f11b768838e9e1791d1309185b993c1e15eec"
        },
        "downloads": -1,
        "filename": "httpx-sse-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b60a77a1e03db50f5061a632582a43ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11687,
        "upload_time": "2023-03-27T12:10:24",
        "upload_time_iso_8601": "2023-03-27T12:10:24.496481Z",
        "url": "https://files.pythonhosted.org/packages/f4/f8/db23f469f007ed4fc2662d5b40485eddc6e20cda1365dc184dc22a85f282/httpx-sse-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "927b21edaf0327e8cef4c76df8c5ccba78f189eb82c57f91204ba5564810711f",
        "md5": "c8ad8cfb3fe97716587542af91bbebf3",
        "sha256": "8cd94de81cb59ffc4b016965ee94c1cd500b07855d96697eb4d53145a7d77583"
      },
      "downloads": -1,
      "filename": "httpx_sse-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8ad8cfb3fe97716587542af91bbebf3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7374,
      "upload_time": "2023-03-27T12:10:22",
      "upload_time_iso_8601": "2023-03-27T12:10:22.746483Z",
      "url": "https://files.pythonhosted.org/packages/92/7b/21edaf0327e8cef4c76df8c5ccba78f189eb82c57f91204ba5564810711f/httpx_sse-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4f8db23f469f007ed4fc2662d5b40485eddc6e20cda1365dc184dc22a85f282",
        "md5": "b60a77a1e03db50f5061a632582a43ce",
        "sha256": "379697a5afd4ceda934603cff60f11b768838e9e1791d1309185b993c1e15eec"
      },
      "downloads": -1,
      "filename": "httpx-sse-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b60a77a1e03db50f5061a632582a43ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11687,
      "upload_time": "2023-03-27T12:10:24",
      "upload_time_iso_8601": "2023-03-27T12:10:24.496481Z",
      "url": "https://files.pythonhosted.org/packages/f4/f8/db23f469f007ed4fc2662d5b40485eddc6e20cda1365dc184dc22a85f282/httpx-sse-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}