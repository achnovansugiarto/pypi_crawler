{
  "info": {
    "author": "Lars Scheibling",
    "author_email": "lars@scheibling.se",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sshkey-tools\n\nPython package for managing OpenSSH keypairs and certificates ([protocol.CERTKEYS](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys)). Supported functionality includes:\n\n[TOC]\n\n# Features\n### SSH Keys\n- Supports RSA, DSA, ECDSA and ED25519 keys\n- Import existing keys from file, string, byte data or [pyca/cryptography](https://github.com/pyca/cryptography) class\n- Generate new keys\n- Get public key from private keys\n- Sign bytestrings with private keys\n- Export to file, string or bytes\n- Generate fingerprint\n\n### OpenSSH Certificates\n- Supports RSA, DSA, ECDSA and ED25519 certificates\n- Import existing certificates from file, string or bytes\n- Verify certificate signature against internal or separate public key\n- Create new certificates from CA private key and subject public key\n- Create new certificates using old certificate as template\n- Sign certificates\n- Export certificates to file, string or bytes\n\n# Roadmap\n- [x] Rewrite certificate field functionality for simpler usage\n- [ ] Re-add functionality for changing RSA hash method\n- [ ] Add CLI functionality\n- [ ] Convert to/from putty format (keys only)\n\n\n# Installation\n\n## With pip\n\n```bash\npip3 install sshkey-tools\n# or\npip3 install -e git+https://github.com/scheiblingco/sshkey-tools.git\n```\n\n## From source\n\n```bash\ngit clone https://github.com/scheiblingco/sshkey-tools\ncd sshkey-tools\npip3 install ./\n```\n\n# Documentation\nYou can find the full documentation at [scheiblingco.github.io/sshkey-tools/](https://scheiblingco.github.io/sshkey-tools/)\n\n## SSH Keypairs (generating, loading, exporting)\n```python\n# Import the certificate classes\nfrom sshkey_tools.keys import (\n    RsaPrivateKey,\n    DsaPrivateKey,\n    EcdsaPrivateKey,\n    Ed25519PrivateKey,\n    EcdsaCurves\n)\n#\n## Generating keys\n#\n\n# For all keys except ED25519, the key size/curve can be manually specified\n# Generate RSA (default is 4096 bits)\nrsa_priv = RsaPrivateKey.generate()\nrsa_priv = RsaPrivateKey.generate(2048)\n\n# Generate DSA keys (since SSH only supports 1024-bit keys, this is the default)\ndsa_priv = DsaPrivateKey.generate()\n\n# Generate ECDSA keys (The default curve is P521)\necdsa_priv = EcdsaPrivateKey.generate()\necdsa_priv = EcdsaPrivateKey.generate(EcdsaCurves.P256)\n\n# Generate ED25519 keys (fixed key size)\ned25519_priv = Ed25519PrivateKey.generate()\n\n#\n## Loading keys\n#\n\n# Keys can be loaded either via the specific class:\nrsa_priv = RsaPrivateKey.from_file(\"/path/to/key\", \"OptionalSecurePassword\")\n\n# or via the general class, in case the type is not known in advance\nrsa_priv = PrivateKey.from_file(\"/path/to/key\", \"OptionalSecurePassword\")\n\n# The import functions are .from_file(), .from_string() and .from_class() and are valid for both PublicKey and PrivateKey-classes\nrsa_priv = PrivateKey.from_string(\"-----BEGIN OPENSSH PRIVATE KEY...........END -----\", \"OptionalSecurePassword\")\nrsa_priv = PrivateKey.from_class(pyca_cryptography_class)\n\n# The different keys can also be loaded from their numbers, e.g. RSA Pubkey:\nrsa_priv = PublicKey.from_numbers(65537, 123123123....1)\n\n#\n## Key functionality\n#\n\n# The public key for any loaded or generated private key is available in the .public_key attribute\ned25519_pub = ed25519_priv.public_key\n\n# The private keys can be exported using to_bytes, to_string or to_file\nrsa_priv.to_bytes(\"OptionalSecurePassword\")\nrsa_priv.to_string(\"OptionalSecurePassword\", \"utf-8\")\nrsa_priv.to_file(\"/path/to/file\", \"OptionalSecurePassword\", \"utf-8\")\n\n# The public keys also have .to_string() and .to_file(), but .to_bytes() is divided into .serialize() and .raw_bytes()\n# The comment can be set before export by changing the public_key.comment-attribute\nrsa_priv.public_key.comment = \"Comment@Comment\"\n\n# This will return the serialized public key as found in an OpenSSH keyfile\nrsa_priv.public_key.serialize()\nb\"ssh-rsa AAAA......... Comment@Comment\"\n\n# This will return the raw bytes of the key (base64-decoded middle portion)\nrsa_priv.public_key.raw_bytes()\nb\"\\0xc\\0a\\........\"\n```\n\n## SSH Key Signatures\nThe loaded private key objects can be used to sign bytestrings, and the public keys can be used to verify signatures on those\n```python\nfrom sshkey_tools.keys import RsaPrivateKey, RsaPublicKey\n\nsignable_data = b'This is a message that will be signed'\n\nprivkey = RsaPrivateKey.generate()\npubkey = RsaPrivateKey.public_key\n\n# Sign the data\nsignature = privkey.sign(signable_data)\n\n# Verify the signature (Throws exception if invalid)\npubkey.verify(signable_data, signature)\n```\n\n## OpenSSH Certificates\n### Introduction\nCertificates are a way to handle access management/PAM for OpenSSH with the ability to dynamically grant access during a specific time, to specific servers and/or with specific attributes. There are a couple of upsides to using certificates instead of public/private keys, mainly: \n\n- Additional Security: Certificate authentication for OpenSSH is built as an extension of public key authentication, enabling additional features on top of key-based access control.\n- Short-term access: The user has to request a certificate for their keypair, which together with the private key grants access to the server. Without the certificate the user can't connect to the server - giving you control over how, when and from where the user can connect.\n- Hostkey Verification: Certificiates can be issued for the OpenSSH Server, adding the CA public key to the clients enables you to establish servers as trusted without the hostkey warning.\n- RBAC: Control which servers or users (principals) a keypair has access to, and specify the required principals for access to certain functionality on the server side.\n- Logging: Key ID and Serial fields for tracking of issued certificates\n- CRL: Revoke certificates prematurely if they are compromised\n\n### Structure\nThe original OpenSSH certificate format is a block of parameters, encoded and packed to a bytestring. In this package, the fields have been divided into three parts. For a more detailed information about the format, see [PROTOCOL.certkeys](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys).\n\n### Certificate Header\n|Attribute|Type(Length)|Key|Example Value|Description|\n|---|---|---|---|---|\n|Public Key/Certificate type|string(fixed)|pubkey_type|ssh-rsa-sha2-512-cert-v01@openssh.com|The private key (and certificate) type, derived from the public key for which the certificate is created (Automatically set upon creation)|\n|Subject public key|bytestring(variable)|public_key|\\x00\\x00\\x00..........|The public key for which the certificate is created (Automatically set upon creation)|\n|Nonce|string|nonce(variable, typically 16 or 32 bytes)|abcdefghijklmnopqrstuvwxyz|A random string included to make attacks that depend on inducing collisions in the signature hash infeasible. (Default is automatically set, can be changed with Certificate.header.nonce = \"abcdefg...\"|\n\n### Certificate Fields\n|Attribute|Type(Length)|Key|Example Value|Description|\n|---|---|---|---|---|\n|Serial|Integer(64-bit)|serial|1234567890|An optional certificate serial number set by the CA to provide an abbreviated way to refer to certificates from that CA. If a CA does not wish to number its certificates, it must set this field to zero.|\n|Certificate type|Integer(1 or 2)|cert_type|1|The type of the certificate, 1 for user certificates, 2 for host certificates|\n|Key ID|string(variable)|key_id|someuser@somehost|Free-form text field that is filled in by the CA at the time of signing; the intention is that the contents of this field are used to identify the identity principal in log messages.|\n|Valid Principals|List(string(variable))|principals|['some-user', 'some-group', production-webservers']|These principals list the names for which this certificate is valid hostnames for SSH_CERT_TYPE_HOST certificates and usernames for  SH_CERT_TYPE_USER certificates. As a special case, a zero-length \"valid principals\" field means the certificate is valid for any principal of the specified type.|\n|Valid After|Timestamp|valid_after|datetime.now()|Timestamp for the start of the validity period for the certificate|\n|Valid Before|Timestamp|valid_before|datetime.now()+timedelta(hours=8) or 1658322031|Timestamp for the end of the validity period for the certificate. Needs to be larger than valid_after|\n|Critical Options|Dict(string, string)|critical_options|[]|Zero or more of the available critical options (see below)|\n|Extensions|Dict(string, string)/List/Tuple/Set|extensions|[]|Zero or more of the available extensions (see below)|\n\n\n#### Critical Options\n|Name|Format|Description|\n|---|---|---|\n|force-command|string|Specifies a command that is executed (replacing any the user specified on the ssh command-line) whenever this key is used for authentication.|\n|source-address|string|Comma-separated list of source addresses from which this certificate is accepted for authentication. Addresses are specified in CIDR format (nn.nn.nn.nn/nn or hhhh::hhhh/nn). If this option is not present, then certificates may be presented from any source address.|\n|verify-required|empty|Flag indicating that signatures made with this certificate must assert FIDO user verification (e.g. PIN or biometric). This option only makes sense for the U2F/FIDO security key types that support this feature in their signature formats.|\n\n#### Extensions\n|Name|Format|Description|\n|---|---|---|\n|no-touch-required|empty|Flag indicating that signatures made with this certificate need not assert FIDO user presence. This option only makes sense for the U2F/FIDO security key types that support this feature in their signature formats.|\n|permit-X11-forwarding|empty|Flag indicating that X11 forwarding should be permitted. X11 forwarding will be refused if this option is absent.|\n|permit-agent-forwarding|empty|Flag indicating that agent forwarding should be allowed. Agent forwarding must not be permitted unless this option is present.|\n|permit-port-forwarding|empty|Flag indicating that port-forwarding should be allowed. If this option is not present, then no port forwarding will be allowed.|\n|permit-pty|empty|Flag indicating that PTY allocation should be permitted. In the absence of this option PTY allocation will be disabled.|\n|permit-user-rc|empty|Flag indicating that execution of ~/.ssh/rc should be permitted. Execution of this script will not be permitted if this option is not present.|\n\n\n### Certificate Body\n|Attribute|Type(Length)|Key|Example Value|Description|\n|---|---|---|---|---|\n|Reserved|string(0)|reserved|\"\"|Reserved for future use, must be empty (automatically set upon signing)|\n|CA Public Key|bytestring(variable)|ca_pubkey|\\x00\\x00\\x00..........|The public key of the CA that issued this certificate (automatically set upon signing)|\n|Signature|bytestring(variable)|signature|\\x00\\x00\\x00..........|The signature of the certificate, created by the CA (automatically set upon signing)|\n\n## Creating, signing and verifying certificates\n```python\n# Every certificate needs two parts, the subject (user or host) public key and the CA Private key\nfrom sshkey_tools.cert import SSHCertificate, CertificateFields, Ed25519Certificate\nfrom sshkey_tools.keys import Ed25519PrivateKey\nfrom datetime import datetime, timedelta\n\nsubject_pubkey = Ed25519PrivateKey.generate().public_key\nca_privkey = Ed25519PrivateKey.generate()\n\n# There are multiple ways to create a certificate, either by creating the certificate body field object first and then creating the certificate, or creating the certificate and setting the fields one by one\n\n# Create certificate body fields\ncert_fields = CertificateFields(\n    serial=1234567890,\n    cert_type=1,\n    key_id=\"someuser@somehost\",\n    principals=[\"some-user\", \"some-group\", \"production-webservers\"],\n    valid_after=datetime.now(),\n    valid_before=datetime.now() + timedelta(hours=8),\n    critical_options=[],\n    extensions=[\n        \"permit-pty\",\n        \"permit-X11-forwarding\",\n        \"permit-agent-forwarding\",\n    ],\n)\n\n# Create certificate from existing fields\ncertificate = SSHCertificate(\n    subject_pubkey=subject_pubkey,\n    ca_privkey=ca_privkey,\n    fields=cert_fields,\n)\n\n# Start with a blank certificate by calling the general class\ncertificate = SSHCertificate.create(\n    subject_pubkey=subject_pubkey,\n    ca_privkey=ca_privkey\n)\n\n# You can also call the specialized classes directly, for the general class the .create-function needs to be used\ncertificate = Ed25519Certificate(\n    subject_pubkey=subject_pubkey,\n    ca_privkey=ca_privkey\n)\n\n# Manually set the fields\ncertificate.fields.serial = 1234567890\ncertificate.fields.cert_type = 1\ncertificate.fields.key_id = \"someuser@somehost\"\ncertificate.fields.principals = [\"some-user\", \"some-group\", \"production-webservers\"]\ncertificate.fields.valid_after = datetime.now()\ncertificate.fields.valid_before = datetime.now() + timedelta(hours=8)\ncertificate.fields.critical_options = []\ncertificate.fields.extensions = [\n    \"allow-pty\",\n    \"permit-X11-forwarding\",\n    \"permit-agent-forwarding\",\n]\n\n# Check if the certificate is ready to be signed\ncertificate.can_sign()\n\n# Sign the certificate\ncertificate.sign()\n\n# Verify the certificate against the included public key (insecure, but useful for testing)\ncertificate.verify()\n\n# Verify the certificate against a public key that is not included in the certificate\ncertificate.verify(ca_privkey.public_key)\n\n# Raise an exception if the certificate is invalid\ncertificate.verify(ca_privkey.public_key, True)\n\n# Export the certificate to file/string\ncertificate.to_file('filename-cert.pub')\ncert_str = certificate.to_string()\n\n```\n## Loading, re-creating and verifying existing certificates\n```python\nfrom sshkey_tools.cert import SSHCertificate, CertificateFields, Ed25519Certificate\nfrom sshkey_tools.keys import PublicKey, PrivateKey\nfrom datetime import datetime, timedelta\n\n# Load a certificate from file or string\n# This will return the correct certificate type based on the contents of the certificate\ncertificate = SSHCertificate.from_file('filename-cert.pub')\ncertificate = SSHCertificate.from_string(cert_str)\n\ntype(certificate) # sshkey_tools.cert.Ed25519Certificate\n\n# Verify the certificate signature against the included public key (insecure, but useful for testing)\ncertificate.verify()\n\n# Verify the certificate signature against a public key\npubkey = PublicKey.from_file('filename-pubkey.pub')\ncertificate.verify(pubkey)\n\n# Raise an exception if the certificate is invalid\ncertificate.verify(pubkey, True)\n\n# Use the loaded certificate as a template to create a new one\nnew_ca = PrivateKey.from_file('filename-ca')\ncertificate.replace_ca(new_ca)\ncertificate.sign()\n\n```\n\n## Changelog\n### 0.9\n- Adjustments to certificate field handling for easier usage/syntax autocompletion\n- Updated testing\n- Removed method for changing RSA hash method (now default SHA512)\n\n### 0.8.2\n- Fixed bug where an RSA certificate would send the RSA alg to the sign() function of another key type\n\n### 0.8.1\n- Changed versioning for out-of-github installation/packaging\n- Moved documentation to HTML (PDOC3)\n- Added verification of certificate signature\n- Added option to choose RSA hashing algorithm for signing\n- Removed test files\n- Added documentation deployment CD for GH pages\n\n### 0.8\n- Initial public release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/scheiblingco/sshkey-tools",
    "keywords": "python openssh ssh keys sshkey ssh-keygen ssh-certificate certificate parser decoder",
    "license": "GnuPG 3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sshkey-tools",
    "package_url": "https://pypi.org/project/sshkey-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/sshkey-tools/",
    "project_urls": {
      "Homepage": "https://github.com/scheiblingco/sshkey-tools"
    },
    "release_url": "https://pypi.org/project/sshkey-tools/0.9.0/",
    "requires_dist": [
      "click",
      "cryptography",
      "bcrypt",
      "enum34",
      "PrettyTable"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python module for generating, parsing and handling OpenSSH keys and certificates",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14495664,
  "releases": {
    "0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1372059fde15ad42f04f9815f2bbb22f1047494fe7cb28b43eac6001f1e7be2",
          "md5": "b4b947f3c5036ba967e7e577325f72d3",
          "sha256": "791403ffd0edb8ffa8ad32fa5c5e226d1f315994bc1ba49c1f80674ab7b77cad"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4b947f3c5036ba967e7e577325f72d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18351,
        "upload_time": "2022-03-23T16:32:39",
        "upload_time_iso_8601": "2022-03-23T16:32:39.214119Z",
        "url": "https://files.pythonhosted.org/packages/f1/37/2059fde15ad42f04f9815f2bbb22f1047494fe7cb28b43eac6001f1e7be2/sshkey_tools-0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ba26b5eef1796ca67af2fb345b35aa181f7926969901f74cd076fa98741c669",
          "md5": "40b6e95b19977a22dc061e0d2e49ac9b",
          "sha256": "ee5b4ca4ee360e2c9eac0edffbda8a464c0f44bad4ca0f2874a62156e26ed07d"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "40b6e95b19977a22dc061e0d2e49ac9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17476,
        "upload_time": "2022-03-23T16:32:40",
        "upload_time_iso_8601": "2022-03-23T16:32:40.849375Z",
        "url": "https://files.pythonhosted.org/packages/8b/a2/6b5eef1796ca67af2fb345b35aa181f7926969901f74cd076fa98741c669/sshkey-tools-0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.post2384544826": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b956a15056aea15906c79bb5389f09ecd6b86d88300c7daac9c855c3ceb19c01",
          "md5": "3b15a80e0e737ece482ef286b08c14bc",
          "sha256": "3b334e20f11115364094661c8ff09fd0aa16bf130c0577238bf7119b73b3af87"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.4.post2384544826-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b15a80e0e737ece482ef286b08c14bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34384,
        "upload_time": "2022-05-25T12:59:31",
        "upload_time_iso_8601": "2022-05-25T12:59:31.575956Z",
        "url": "https://files.pythonhosted.org/packages/b9/56/a15056aea15906c79bb5389f09ecd6b86d88300c7daac9c855c3ceb19c01/sshkey_tools-0.4.post2384544826-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e00ff589c7f2f083a3cb4d9f601f5f2597761034f45275dbc2bdafd6ae2ceb1",
          "md5": "77a28d11c6ff81be3fa33263c3d6d594",
          "sha256": "8ed1c8893286a4e577cbab641a6641ce31279f83b2776f09d885ce81432d99b4"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.4.post2384544826.tar.gz",
        "has_sig": false,
        "md5_digest": "77a28d11c6ff81be3fa33263c3d6d594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34293,
        "upload_time": "2022-05-25T12:59:32",
        "upload_time_iso_8601": "2022-05-25T12:59:32.801465Z",
        "url": "https://files.pythonhosted.org/packages/2e/00/ff589c7f2f083a3cb4d9f601f5f2597761034f45275dbc2bdafd6ae2ceb1/sshkey-tools-0.4.post2384544826.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c62f6dc29e747d72ee983f4782cb68749c24e555dcb441a0f050da74eb9183e2",
          "md5": "7ad143b8d05015f10339d613105e04e3",
          "sha256": "91ac36a5aa76853b04f290ca8f832d25215412c1ebd9317a058881a0bc96437c"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ad143b8d05015f10339d613105e04e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35717,
        "upload_time": "2022-06-01T08:43:52",
        "upload_time_iso_8601": "2022-06-01T08:43:52.395393Z",
        "url": "https://files.pythonhosted.org/packages/c6/2f/6dc29e747d72ee983f4782cb68749c24e555dcb441a0f050da74eb9183e2/sshkey_tools-0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63f2290e2915583f12b79ef8a7d02b7b34df5ada633d489eaf3add884489f6e3",
          "md5": "8fed1ce9dc54530fdadabc44fe39d39e",
          "sha256": "b64223a148542bf617127adf26f61c27363e4089575c4d3d8a1d27a3c52a4dd8"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8fed1ce9dc54530fdadabc44fe39d39e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35788,
        "upload_time": "2022-06-01T08:43:53",
        "upload_time_iso_8601": "2022-06-01T08:43:53.582752Z",
        "url": "https://files.pythonhosted.org/packages/63/f2/290e2915583f12b79ef8a7d02b7b34df5ada633d489eaf3add884489f6e3/sshkey-tools-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e65e9c21ec0d8fef397a552a49120a56cb5e00d851fd581652ef0f6ba1e5f7b5",
          "md5": "3b2e4817f871d155ba571d9557c4bd92",
          "sha256": "6d58ffce83f5a30f811e94051baea8aa8afa438e9498ccb2dee2501943ac1198"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b2e4817f871d155ba571d9557c4bd92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37066,
        "upload_time": "2022-06-01T13:14:03",
        "upload_time_iso_8601": "2022-06-01T13:14:03.870188Z",
        "url": "https://files.pythonhosted.org/packages/e6/5e/9c21ec0d8fef397a552a49120a56cb5e00d851fd581652ef0f6ba1e5f7b5/sshkey_tools-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac786eb49531621ee8789d51b34cc01cb8c73331e823348eef3bd8afc35a553d",
          "md5": "498524eca651369a41e5a1ba488fb4aa",
          "sha256": "794fd04e4653626a5391637eeaae7789c67a00638c5707eeeb5b87ca0e6869bd"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "498524eca651369a41e5a1ba488fb4aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37916,
        "upload_time": "2022-06-01T13:14:05",
        "upload_time_iso_8601": "2022-06-01T13:14:05.712820Z",
        "url": "https://files.pythonhosted.org/packages/ac/78/6eb49531621ee8789d51b34cc01cb8c73331e823348eef3bd8afc35a553d/sshkey-tools-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1167f424d703a7323dfd36edab2dfde3c1e66f4d8f1d4b1f69f45cbca9e7cc57",
          "md5": "56440a805deaea31bbccef43fbbb459c",
          "sha256": "f23e5fe0cb444930f48303b93ac1ce39d3ec5934d62c090c37ece61b29348ddc"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56440a805deaea31bbccef43fbbb459c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37019,
        "upload_time": "2022-06-23T14:28:17",
        "upload_time_iso_8601": "2022-06-23T14:28:17.673293Z",
        "url": "https://files.pythonhosted.org/packages/11/67/f424d703a7323dfd36edab2dfde3c1e66f4d8f1d4b1f69f45cbca9e7cc57/sshkey_tools-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7b4c941013b44b764c8b6b16733f4535893204dfc6d82db26783df0ce4798a4",
          "md5": "dc333cdc008f15591ee2ba5bc37baf12",
          "sha256": "e81631a4a00df3dc55cca2205116660d4b733099206aa1f728f29dd646b6aa37"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc333cdc008f15591ee2ba5bc37baf12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37872,
        "upload_time": "2022-06-23T14:28:19",
        "upload_time_iso_8601": "2022-06-23T14:28:19.625926Z",
        "url": "https://files.pythonhosted.org/packages/e7/b4/c941013b44b764c8b6b16733f4535893204dfc6d82db26783df0ce4798a4/sshkey-tools-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f050f47e0beceb2745eeb985b99c75f1ac4862626d98ce0d677b670fbb4e1fd7",
          "md5": "c8fbf92732068e2d85ab4a494f84ddb2",
          "sha256": "b86ee778ef6e95258eb8b7bf79f265143b89376ba529cace821239c6d8d6b3fa"
        },
        "downloads": -1,
        "filename": "sshkey_tools-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8fbf92732068e2d85ab4a494f84ddb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40849,
        "upload_time": "2022-07-20T15:13:35",
        "upload_time_iso_8601": "2022-07-20T15:13:35.856759Z",
        "url": "https://files.pythonhosted.org/packages/f0/50/f47e0beceb2745eeb985b99c75f1ac4862626d98ce0d677b670fbb4e1fd7/sshkey_tools-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07330b7632d1fc46f74bd2f2f2617b2aebf03fa7ccb0f3039c24831b2841bdc8",
          "md5": "2eabb94ab44c1d96d4152f5284517a6d",
          "sha256": "8e94b0e3f1173d5babd01b0b4e06eabe6d4993ebaf5e10255e74a2c0d6d1e2a9"
        },
        "downloads": -1,
        "filename": "sshkey-tools-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2eabb94ab44c1d96d4152f5284517a6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43599,
        "upload_time": "2022-07-20T15:13:37",
        "upload_time_iso_8601": "2022-07-20T15:13:37.616888Z",
        "url": "https://files.pythonhosted.org/packages/07/33/0b7632d1fc46f74bd2f2f2617b2aebf03fa7ccb0f3039c24831b2841bdc8/sshkey-tools-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f050f47e0beceb2745eeb985b99c75f1ac4862626d98ce0d677b670fbb4e1fd7",
        "md5": "c8fbf92732068e2d85ab4a494f84ddb2",
        "sha256": "b86ee778ef6e95258eb8b7bf79f265143b89376ba529cace821239c6d8d6b3fa"
      },
      "downloads": -1,
      "filename": "sshkey_tools-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8fbf92732068e2d85ab4a494f84ddb2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 40849,
      "upload_time": "2022-07-20T15:13:35",
      "upload_time_iso_8601": "2022-07-20T15:13:35.856759Z",
      "url": "https://files.pythonhosted.org/packages/f0/50/f47e0beceb2745eeb985b99c75f1ac4862626d98ce0d677b670fbb4e1fd7/sshkey_tools-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07330b7632d1fc46f74bd2f2f2617b2aebf03fa7ccb0f3039c24831b2841bdc8",
        "md5": "2eabb94ab44c1d96d4152f5284517a6d",
        "sha256": "8e94b0e3f1173d5babd01b0b4e06eabe6d4993ebaf5e10255e74a2c0d6d1e2a9"
      },
      "downloads": -1,
      "filename": "sshkey-tools-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2eabb94ab44c1d96d4152f5284517a6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 43599,
      "upload_time": "2022-07-20T15:13:37",
      "upload_time_iso_8601": "2022-07-20T15:13:37.616888Z",
      "url": "https://files.pythonhosted.org/packages/07/33/0b7632d1fc46f74bd2f2f2617b2aebf03fa7ccb0f3039c24831b2841bdc8/sshkey-tools-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}