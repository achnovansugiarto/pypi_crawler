{
  "info": {
    "author": "G Roques",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# ccxmeshreader\n\n[![PyPI version](https://badge.fury.io/py/ccxmeshreader.svg)](https://badge.fury.io/py/ccxmeshreader)\n[![Conda version](https://anaconda.org/gbroques/ccxmeshreader/badges/version.svg)](https://anaconda.org/gbroques/ccxmeshreader)\n[![Build Status](https://travis-ci.org/gbroques/ccxmeshreader.svg?branch=master)](https://travis-ci.org/gbroques/ccxmeshreader)\n\n* [Introduction](#introduction)\n* [Usage](#usage)\n* [Supported Keywords](#supported-keywords)\n    * [*NODE](#node)\n    * [*ELEMENT](#element)\n    * [*ELSET](#elset)\n    * [*INCLUDE](#include)\n* [Approach](#approach)\n* [Limitations](#limitations)\n* [Unit Tests](#unit-tests)\n\n## Introduction\nReads a mesh from CalcluliX input (`.inp`) files.\n\nOnly supports a limited set of keywords defining the mesh. See [Supported Keywords](#supported-keywords) for details.\n\n## Usage\n```python\nfrom ccxmeshreader import read_mesh\n\n\nmesh = read_mesh('path/to/some.inp')\n```\n\n## Supported Keywords\n\n### *NODE\nNodes and their coordinates are parsed and added to the dictionary returned by `read_mesh` in the `node_coordinates_by_number` key.\n\nThe `node_coordinates_by_number` key contains a dictionary where the key is the node number, and value is the coordinates as a three-element tuple with float values.\n\nFor example, given the following `*NODE` definition:\n```\n*NODE, NSET=Nall\n1,  1.0, 0.0, 0.1\n2,  3.0, 1.0, 2.0\n3,  0.9, 5.0, 7.0\n```\n```python\nmesh = read_mesh('example.inp')\nprint(mesh['node_coordinates_by_number'])\n```\n```\n{\n    1: (1.0, 0.0, 0.1),\n    2: (3.0, 1.0, 2.0),\n    3: (0.9, 5.0, 7.0)\n}\n```\n\nCurrently node sets are not supported, and the optional `NSET` parameter is ignored.\n\n### *ELEMENT\nElements and their associated nodes are parsed and added to the dictionary returned by `read_mesh` in the `element_dict_by_type` key.\n\nThe `element_dict_by_type` key contains a dictionary where the key is the element type, and value is another dictionary where the key is the element number,\nand value is a list of node numbers associated to the element.\n\nFor example, given the following `*ELEMENT` definition:\n```\n*ELEMENT, TYPE=C3D20R, ELSET=Eall\n1,  1, 2, 3\n2,  4, 5, 6\n```\n```python\nmesh = read_mesh('example.inp')\nprint(mesh['element_dict_by_type'])\n```\n```\n{\n    'C3D20R': {\n        1: [1, 2, 3]\n        2: [4, 5, 6]\n    }\n}\n```\n\nContinuation of data-lines ending with a comma `,` is supported. For example:\n\n```\n*ELEMENT, TYPE=C3D20R, ELSET=Eall\n1,  1, 2, 3,\n    4, 5, 6\n2,  7, 8, 9\n```\n```python\nmesh = read_mesh('example.inp')\nprint(mesh['element_dict_by_type'])\n```\n```\n{\n    'C3D20R': {\n        1: [1, 2, 3, 4, 5, 6]\n        2: [7, 8, 9]\n    }\n}\n```\n\n---\n\nIf the `ELSET` parameter is provided, then the element set will be added to the `element_set_by_name` dictionary returned in the mesh of `read_mesh` with the corresponding element numbers.\n\nFor example, from the above `*ELEMENT` definition:\n```python\nmesh = read_mesh('example.inp')\nprint(mesh['element_set_by_name'])\n```\n```\n{\n    'Eall': {1, 2}\n}\n```\n\n### *ELSET\nElement set definitions are parsed and added to the dictionary returned by `read_mesh` in the `element_set_by_name` key.\n\nThe `element_set_by_name` key contains a dictionary where the key is the name of the element set, and value is a set of element numbers.\n\nFor example, given the following `*ELEMENT` and `*ELSET` definitions:\n```\n*ELEMENT, TYPE=S4, ELSET=E1\n1, 1, 2, 3,\n   4, 5, 6\n2, 7, 8, 9\n\n*ELSET, ELSET=E2, GENERATE\n1, 4\n\n*ELSET,ELSET=E3\nE2, 5, 6\n```\n```python\nmesh = read_mesh('example.inp')\nprint(mesh['element_set_by_name'])\n```\n```\n{\n    'E1': {1, 2},\n    'E2': {1, 2, 3, 4}\n    'E3': {1, 2, 3, 4, 5, 6}\n}\n```\nThe optional `GENERATE` parameter is respected with start, end, and step.\n\n### *INCLUDE\nFiles specified by the `*INCLUDE` keyword are read, but currently limited to relative file paths, and assumed to be relative to the path passed to `read_mesh`.\n\nRecursive includes (i.e. `*INCLUDE` statements in a previously included file) are not yet supported.\n\n## Approach\nThe approach this library takes is to read the `.inp` file in a `while` loop, line-by-line, until there are no lines left, and collect the nodes and elements that make up the mesh into a dictionary.\n\nIt does not use an intermediate step of parsing the `.inp` file into an abstract syntax tree -- as doing so would be costly and likely involve a parsing library.\n\nThus, `ccxmeshreader` can be considered light-weight and performant.\n\n## Limitations\nContinuation of keyword lines is not supported.\n\nFor example, trying to read the following `.inp` file:\n\n```\n*ELEMENT, TYPE=C3D20R,\nELSET=Eall\n```\n\nraises a `ccxmeshreader.ParserError`.\n\n## Unit Tests\nUnit tests are included in the `tests/` directory, and can be ran with the following command:\n\n    python -m unittest discover tests \"*_test.py\"",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gbroques/ccxmeshreader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ccxmeshreader",
    "package_url": "https://pypi.org/project/ccxmeshreader/",
    "platform": "",
    "project_url": "https://pypi.org/project/ccxmeshreader/",
    "project_urls": {
      "Homepage": "https://github.com/gbroques/ccxmeshreader"
    },
    "release_url": "https://pypi.org/project/ccxmeshreader/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Reads a mesh from CalcluliX input (.inp) files.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8173656,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a3c9059c00b633727f7e09dfdccb31dfb7f2021af755a2de8d8951f9293a54e",
          "md5": "1004a3f7dab3e6a0edf4539c9198e886",
          "sha256": "52b64c72dc56379d3c2ebb21670d6b5c3bdb691ff1ce4231f6b2146290972508"
        },
        "downloads": -1,
        "filename": "ccxmeshreader-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1004a3f7dab3e6a0edf4539c9198e886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15125,
        "upload_time": "2020-09-09T23:17:51",
        "upload_time_iso_8601": "2020-09-09T23:17:51.657288Z",
        "url": "https://files.pythonhosted.org/packages/7a/3c/9059c00b633727f7e09dfdccb31dfb7f2021af755a2de8d8951f9293a54e/ccxmeshreader-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ef857dd734600d2666624f9fa386d6db107af9f64b13c548b69d8e3d15c81a7",
          "md5": "338508ff73c682eb9507ace490a6a580",
          "sha256": "8680f14fdace9ffd3f2b3dbfa0a17358331e5e89be47a375274f431c289e7180"
        },
        "downloads": -1,
        "filename": "ccxmeshreader-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "338508ff73c682eb9507ace490a6a580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16372,
        "upload_time": "2020-09-12T22:38:56",
        "upload_time_iso_8601": "2020-09-12T22:38:56.365921Z",
        "url": "https://files.pythonhosted.org/packages/8e/f8/57dd734600d2666624f9fa386d6db107af9f64b13c548b69d8e3d15c81a7/ccxmeshreader-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b4cf3799f1c675f803e2fb457f0300d52e6953b691a4c678ea87c8ab8a93a70",
          "md5": "574e01615232efb02fec09110c69dc08",
          "sha256": "902b63892dd1161cc38f872a2a4926cd4d7ef88738dbe3f6b573c5777cc3c63a"
        },
        "downloads": -1,
        "filename": "ccxmeshreader-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "574e01615232efb02fec09110c69dc08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16349,
        "upload_time": "2020-09-13T01:31:19",
        "upload_time_iso_8601": "2020-09-13T01:31:19.905077Z",
        "url": "https://files.pythonhosted.org/packages/0b/4c/f3799f1c675f803e2fb457f0300d52e6953b691a4c678ea87c8ab8a93a70/ccxmeshreader-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd494f0250733a33bbcc552a9d82a6170ec464b642def039f2b556c29bc6eb4",
          "md5": "42b82075637d180e0e998fbe78c86926",
          "sha256": "645c758f458790c6704889d3d921cab2a304147ccbdb2559c95c013542b660f4"
        },
        "downloads": -1,
        "filename": "ccxmeshreader-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "42b82075637d180e0e998fbe78c86926",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16394,
        "upload_time": "2020-09-13T02:10:31",
        "upload_time_iso_8601": "2020-09-13T02:10:31.979401Z",
        "url": "https://files.pythonhosted.org/packages/0f/d4/94f0250733a33bbcc552a9d82a6170ec464b642def039f2b556c29bc6eb4/ccxmeshreader-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d01a1c600c873d8d500b63e512f9d053412318e4f4a3ce53053aac0299d84e5",
          "md5": "5601d494cbf98682de8519b2008e77bf",
          "sha256": "88bbe4458b05ade6f33f73c2cf3e903a83d7a0dbe688317fd0eb1f6d903a1d29"
        },
        "downloads": -1,
        "filename": "ccxmeshreader-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5601d494cbf98682de8519b2008e77bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16406,
        "upload_time": "2020-09-13T02:41:54",
        "upload_time_iso_8601": "2020-09-13T02:41:54.930097Z",
        "url": "https://files.pythonhosted.org/packages/1d/01/a1c600c873d8d500b63e512f9d053412318e4f4a3ce53053aac0299d84e5/ccxmeshreader-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d01a1c600c873d8d500b63e512f9d053412318e4f4a3ce53053aac0299d84e5",
        "md5": "5601d494cbf98682de8519b2008e77bf",
        "sha256": "88bbe4458b05ade6f33f73c2cf3e903a83d7a0dbe688317fd0eb1f6d903a1d29"
      },
      "downloads": -1,
      "filename": "ccxmeshreader-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5601d494cbf98682de8519b2008e77bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16406,
      "upload_time": "2020-09-13T02:41:54",
      "upload_time_iso_8601": "2020-09-13T02:41:54.930097Z",
      "url": "https://files.pythonhosted.org/packages/1d/01/a1c600c873d8d500b63e512f9d053412318e4f4a3ce53053aac0299d84e5/ccxmeshreader-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}