{
  "info": {
    "author": "Sorrowful T-Rex",
    "author_email": "yc4120@ic.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Accessibility\n\nCurrent Version: 0.0.6  \nInstall with ```pip install RC-Functools```  \n```from RC_Functools import rc_func``` to use  \n\n# Introduction\n\nSince I just had some courses on Haskell and Kotlin, I found it intriguing to implement some of the functional tools in Python. For example, forEach and mapIndexed from Kotlin and ($) and scanl from Haskell. I've also included more intricate functions such as filter_acc, which can be used to build cool one-liners such as prime filterer with the Sieve of Eratosthenes. Check for the examples provided in the code.\n\nAdditionally, I've added some null-handling (None-handling?) functions, such as one that imitates the Elvis Operator in Kotlin/Swift.\n\n# RC-Functools (rc_func)\n\nThe prefix \"l\\_\" means the function returns a list instead of a map;  \nThe suffix \"\\_r\" means the function starts from the right of the list, e.g. reduce_r is foldr in Haskell.  \n\n## flatmap(f, \\*args) -> list  \n* Parameter f takes a function that takes n (n > 0) parameters and returns an iterable;\n* Parameters \\*args takes n iterables;\n* Returns the list concatenated from the lists result from applying f on each corresponding elements of \\*arg.\n```\nrc_func.flatmap(lambda x: [x, x + 2], [2, 3, 4])\n# [2, 4, 3, 5, 4, 6]\n```\n\n## flatmap_indexed(f, \\*args) -> list  \n* Parameter f takes a function that takes an index (int) and n (n > 0) parameters and returns an iterable;\n* Parameters \\*args takes n iterables;\n* Returns the list concatenated from the lists result from applying f on the index and each corresponding elements of \\*arg.\n```\nrc_func.flatmap_indexed(lambda i, x: [i, x], [2, 3, 4])\n# [0, 2, 1, 3, 2, 4]\n```\n\n## l_map(f, \\*args)\n* Returns list converted from the map object; list(map(f, \\*args)). Same below for all functions starting with \"l\\_\".\n\n## map_indexed(f, \\*args)\n* Parameter f takes a function that takes an index (int) and n (n > 0) parameters and returns an iterable;\n* Parameters \\*args takes n iterables;\n* Returns an interable whose elements come from applying f on the index and each corresponding elements of \\*arg.\n```\nlist(rc_func.map_indexed(lambda i, x: i + x, [2, 3, 4]))\n# [2, 4, 6]\n```\n\n## l_map_indexed(f, \\*args)\n\n## l_str(xs, separator=\", \", brackets=\"[]\", end=\"\\n\")\n* Parameter xs takes an iterable;\n* Parameter separator takes a str;\n* Parameter brackets tkae a str;\n* Returns the string consists of each element of xs, separated by separator. If brackets contains two characters, then use them as brackets for the output.\n```\nlist(rc_func.map_indexed(lambda i, x: i + x, [2, 3, 4]))\n# <0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9>\n<0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9>\n```\n\n## reduce_r(f, xs, initial=None)\n* Parameter f takes a function that takes a parameter of type A and a parameter of type B;\n* Parameter xs takes an iterable of type A;\n* Parameter initial takes a value of type B or None;\n* Returns the value results from applying f on the last element of xs and initial, then the second last element of xs and the previous result, and so on.\n  * If initial is None, then treat the last element of xs as the initial and start from the second last and the last.\n```\nrc_func.reduce_r(lambda x, y: x + y, [1, 2, 3, 4, 5])\n# 15 \"1 + (2 + (3 + (4 + 5))))\"\n```\n\n## scan(f, xs, initial=None)\n* Parameter f takes a function that takes a parameter of type B and a parameter of type A;\n* Parameter xs takes an iterable of type A;\n* Parameter initial takes a value of type B or None;\n* Returns an iterable whose first element is intial, second element is f(initial, xs[0]), third element is f(f(initial, xs[0]),, xs[1]), and so on.\n  * Note that xs is not necessarily a list; here xs[0] only represents the first element this iterable would produce.\n  * If initial is None, then start with f(xs[0, xs[1])\n```\nlist(rc_func.scan(lambda x, y: x + y, [1, 2, 3, 4, 5], 100))\n# [100, 101, 103, 106, 110, 115]\n```\n\n## l_scan(f, xs, initial=None)\n\n## foreach(f, xs)\n* Parameter f takes a function that takes a single parameter;\n* Parameter xs takes an iterable;\n* Applies f on the elements in xs from left to right;\n* Returns None\n```\nrc_func.foreach(print, [1,2,3])\n# 1\n# 2\n# 3\n```\n\n## foreach_indexed(f, xs)\n* Parameter f takes a function that takes an index (int) and another parameter;\n* Parameter xs takes an iterable;\n* Applies f on the index of elements in xs and the elements themselves from left to right;\n* Returns None\n```\nrc_func.foreach_indexed(print, [1,2,3])\n# 0 1\n# 1 2\n# 2 3\n```\n\n## apply(f, \\*args)\n* Same as f(\\*args)\n\n## filter_indexed(f, xs)\n* Parameter f takes a function that takes an index (int) and returns a bool;\n* Parameter xs takes an iterable to be filtered;\n* Returns an iterable containing the elements x in xs where f(i, x) == True, i is the index of x.\n```\nlist(rc_func.filter_indexed(lambda i, _: i % 3 == 0, [1, 1, 4, 5, 1, 4]))\n# [1, 5]\n```\n\n## l_filter_indexed(f, xs)\n\n## filter_acc(f, xs, acc=None)\n* Parameter f takes a function taking an element from xs and an accumulator, returning a bool and the updated accumulator;\n* Parameter xs takes an iterable to be filtered;\n* Parameter acc takes the initial accumulator;\n* Returns an iterable containing the elements x where f(x, acc)[0] == True;\n* For more information, check the example within the code.\n\n## l_filter_acc(f, xs, acc=None)\n\n## l_takewhile(f, xs)\n\n## l_dropwhile(f, xs)\n\n## elvis(x, default)\n* Returns x if x is not None; otherwise returns default.\n\n## safe_apply(f, \\*args, default=None)\n* Applies f on \\*args if none of them are None; otherwise returns default.\n```\nrc_func.safe_apply(lambda x, y: x + y, 1, 2, default=10)\n# 3\nrc_func.safe_apply(lambda x, y: x + y, None, 2, default=10)\n# 10\n```\n\nSorrowful T-Rex on 21 Dec. 2020\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sorrowfulT-Rex/Python-Functools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RC-Functools",
    "package_url": "https://pypi.org/project/RC-Functools/",
    "platform": "",
    "project_url": "https://pypi.org/project/RC-Functools/",
    "project_urls": {
      "Homepage": "https://github.com/sorrowfulT-Rex/Python-Functools"
    },
    "release_url": "https://pypi.org/project/RC-Functools/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Extended functional tools and None-handling for Python",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9134043,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67ebe91a3321017210d4289b243d6441d5588d11bc623b11930c67923abcc288",
          "md5": "613ae047532e299e8106b4e6ead0e7a5",
          "sha256": "e67a038943fb00dcdf620f6d554a0635a8eb21d91dd99c31ce220e3a3d99d341"
        },
        "downloads": -1,
        "filename": "RC_Functools-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "613ae047532e299e8106b4e6ead0e7a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3963,
        "upload_time": "2020-12-21T05:49:53",
        "upload_time_iso_8601": "2020-12-21T05:49:53.366907Z",
        "url": "https://files.pythonhosted.org/packages/67/eb/e91a3321017210d4289b243d6441d5588d11bc623b11930c67923abcc288/RC_Functools-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "239b3abae51d19ad20e7ae472caf91dd890225a99f1fb40b4b10ac51f42556af",
          "md5": "a9a59326b28012f61f3125e227d166de",
          "sha256": "fb536d006459fa85e4c554ce39cb9604267f244e444dba56a6eea6dc1c890546"
        },
        "downloads": -1,
        "filename": "RC_Functools-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a9a59326b28012f61f3125e227d166de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2924,
        "upload_time": "2020-12-21T05:49:55",
        "upload_time_iso_8601": "2020-12-21T05:49:55.026707Z",
        "url": "https://files.pythonhosted.org/packages/23/9b/3abae51d19ad20e7ae472caf91dd890225a99f1fb40b4b10ac51f42556af/RC_Functools-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30db9d3d06b8764f220633bced72f4d9abe3d8d37555e5f0345fe350be901dd0",
          "md5": "2e564dd63660b611bd523a2f430b7414",
          "sha256": "a0ad93bd87eb52b034ab4081e3846e0eb36c1fccedc6b6a922ec6a8914fee8e0"
        },
        "downloads": -1,
        "filename": "RC_Functools-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e564dd63660b611bd523a2f430b7414",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5886,
        "upload_time": "2021-01-14T16:42:21",
        "upload_time_iso_8601": "2021-01-14T16:42:21.167671Z",
        "url": "https://files.pythonhosted.org/packages/30/db/9d3d06b8764f220633bced72f4d9abe3d8d37555e5f0345fe350be901dd0/RC_Functools-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d836dd432920b41d8d1d665920bd9f88fa0353042b4fa283ad4304256654f466",
          "md5": "26f91062b243e7a8a4e12faa8903d2c6",
          "sha256": "117335234d116db7343491b6b0b2cc167fe2fc45f14f453a4fb477d11bcf915e"
        },
        "downloads": -1,
        "filename": "RC_Functools-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "26f91062b243e7a8a4e12faa8903d2c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4474,
        "upload_time": "2021-01-14T16:42:24",
        "upload_time_iso_8601": "2021-01-14T16:42:24.956358Z",
        "url": "https://files.pythonhosted.org/packages/d8/36/dd432920b41d8d1d665920bd9f88fa0353042b4fa283ad4304256654f466/RC_Functools-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30db9d3d06b8764f220633bced72f4d9abe3d8d37555e5f0345fe350be901dd0",
        "md5": "2e564dd63660b611bd523a2f430b7414",
        "sha256": "a0ad93bd87eb52b034ab4081e3846e0eb36c1fccedc6b6a922ec6a8914fee8e0"
      },
      "downloads": -1,
      "filename": "RC_Functools-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e564dd63660b611bd523a2f430b7414",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5886,
      "upload_time": "2021-01-14T16:42:21",
      "upload_time_iso_8601": "2021-01-14T16:42:21.167671Z",
      "url": "https://files.pythonhosted.org/packages/30/db/9d3d06b8764f220633bced72f4d9abe3d8d37555e5f0345fe350be901dd0/RC_Functools-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d836dd432920b41d8d1d665920bd9f88fa0353042b4fa283ad4304256654f466",
        "md5": "26f91062b243e7a8a4e12faa8903d2c6",
        "sha256": "117335234d116db7343491b6b0b2cc167fe2fc45f14f453a4fb477d11bcf915e"
      },
      "downloads": -1,
      "filename": "RC_Functools-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "26f91062b243e7a8a4e12faa8903d2c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4474,
      "upload_time": "2021-01-14T16:42:24",
      "upload_time_iso_8601": "2021-01-14T16:42:24.956358Z",
      "url": "https://files.pythonhosted.org/packages/d8/36/dd432920b41d8d1d665920bd9f88fa0353042b4fa283ad4304256654f466/RC_Functools-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}