{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![PyVBMC](https://user-images.githubusercontent.com/70731267/225583733-6cc22c33-a198-4868-90be-3818206d1398.svg)\n\n# PyVBMC: Variational Bayesian Monte Carlo in Python\n![Version](https://img.shields.io/badge/dynamic/json?label=python&query=info.requires_python&url=https%3A%2F%2Fpypi.org%2Fpypi%2Fpyvbmc%2Fjson)\n[![Conda](https://img.shields.io/conda/v/conda-forge/pyvbmc)](https://anaconda.org/conda-forge/pyvbmc)\n[![PyPI](https://img.shields.io/pypi/v/pyvbmc)](https://pypi.org/project/pyvbmc/)\n<br />\n[![Discussion](https://img.shields.io/badge/-discussion-blue?logo=github)](https://github.com/orgs/acerbilab/discussions)\n[![tests](https://img.shields.io/github/actions/workflow/status/acerbilab/pyvbmc/tests.yml?branch=main&label=tests)](https://github.com/acerbilab/pyvbmc/actions/workflows/tests.yml)\n[![docs](https://img.shields.io/github/actions/workflow/status/acerbilab/pyvbmc/build.yml?branch=main&label=docs)](https://github.com/acerbilab/pyvbmc/actions/workflows/docs.yml)\n[![build](https://img.shields.io/github/actions/workflow/status/acerbilab/pyvbmc/docs.yml?branch=main&label=build)](https://github.com/acerbilab/pyvbmc/actions/workflows/build.yml)\n### What is it?\n\nPyVBMC is a Python implementation of the Variational Bayesian Monte Carlo (VBMC) algorithm for posterior and model inference, previously implemented [in MATLAB](https://github.com/acerbilab/vbmc). VBMC is an approximate inference method designed to fit and evaluate Bayesian models with a limited budget of potentially noisy likelihood evaluations (e.g., for computationally expensive models). Specifically, VBMC simultaneously computes:\n- an approximate posterior distribution of the model parameters;\n- an approximation — technically, an approximate lower bound — of the log model evidence (also known as log marginal likelihood or log Bayes factor), a metric used for [Bayesian model selection](https://en.wikipedia.org/wiki/Bayes_factor).\n\nExtensive benchmarks on both artificial test problems and a large number of real model-fitting problems from computational and cognitive neuroscience show that VBMC generally — and often vastly — outperforms alternative methods for sample-efficient Bayesian inference [[1,2](#references-and-citation)].\n\n### Documentation\n\nThe full documentation is available at: https://acerbilab.github.io/pyvbmc/\n\n### When should I use PyVBMC?\n\nPyVBMC is effective when:\n\n- the model log-likelihood function is a black-box (e.g., the gradient is unavailable);\n- the likelihood is at least moderately expensive to compute (say, half a second or more per evaluation);\n- the model has up to `D = 10` continuous parameters (maybe a few more, but no more than `D = 20`);\n- the target posterior distribution is continuous and reasonably smooth (see [here](https://github.com/acerbilab/vbmc/wiki#general));\n- optionally, log-likelihood evaluations may be noisy (e.g., estimated [via simulation](https://github.com/acerbilab/ibs)).\n\nConversely, if your model can be written analytically, you should exploit the powerful machinery of probabilistic programming frameworks such as [Stan](http://mc-stan.org/) or [PyMC](https://docs.pymc.io/).\n\nNote: If you are interested in point estimates or in finding better starting points for PyVBMC, check out [Bayesian Adaptive Direct Search in Python (PyBADS)](https://github.com/acerbilab/pybads), our companion method for fast Bayesian optimization.\n\n## Installation\n\nPyVBMC is available via `pip` and `conda-forge`.\n\n1. Install with:\n    ```console\n    python -m pip install pyvbmc\n    ```\n    or:\n    ```console\n    conda install --channel=conda-forge pyvbmc\n    ```\n    PyVBMC requires Python version 3.9 or newer.\n2. (Optional): Install Jupyter to view the example Notebooks. You can skip this step if you're working from a Conda environment which already has Jupyter, but be aware that if the wrong `jupyter` executable is found on your path then import errors may arise.\n   ```console\n   conda install jupyter\n   ```\n   If you are running Python 3.11 and get an `UnsatisfiableError` you may need to install Jupyter from `conda-forge`:\n   ```console\n   conda install --channel=conda-forge jupyter\n   ```\n   The example notebooks can then be accessed by running\n   ```console\n   python -m pyvbmc\n   ```\n\nIf you wish to install directly from latest source code, please see the [instructions for developers and contributors](https://acerbilab.github.io/pyvbmc/development.html#installation-instructions-for-developers).\n\n\n## Quick start\nA typical PyVBMC workflow follows four steps:\n\n1. Define the model, which defines a target log density (i.e., an unnormalized log posterior density);\n2. Setup the parameters (parameter bounds, starting point);\n3. Initialize and run the inference;\n4. Examine and visualize the results.\n\nPyVBMC is not concerned with how you define your model in step 1, as long as you can provide an (unnormalized) target log density. Running the inference in step 3 only involves a couple of lines of code:\n```python\nfrom pyvbmc import VBMC\n# ... define your model/target density here\nvbmc = VBMC(target, x0, LB, UB, PLB, PUB)\nvp, results = vbmc.optimize()\n```\nwith input arguments:\n- `target`: the target (unnormalized) log density — often an unnormalized log posterior. `target` is a callable that should take as input a parameter vector and return the log density at the point;\n- `x0`: an array representing the starting point of the inference in parameter space;\n- `LB` and `UB`: arrays of hard lower (resp. upper) bounds constraining the parameters (possibly `-/+np.inf` for unbounded parameters);\n- `PLB` and `PUB`: arrays of plausible lower (resp. upper) bounds: that is, a box that ideally brackets a high posterior density region of the target.\n\nThe outputs are:\n- `vp`: a `VariationalPosterior` object which approximates the true target density;\n- `results`: a `dict` containing additional information. Important keys are:\n  - `\"elbo\"`: the estimated lower bound on the log model evidence (log normalization constant);\n  - `\"elbo_sd\"`: the standard deviation of the estimate of the ELBO (*not* the error between the ELBO and the true log model evidence, which is generally unknown).\n\nThe `vp` object can be manipulated in various ways. For example, we can draw samples from `vp` with the `vp.sample()` method, or evaluate its density at a point with `vp.pdf()` (or log-density with `vp.log_pdf()`). See the [`VariationalPosterior` class documentation](https://acerbilab.github.io/pyvbmc/api/classes/variational_posterior.html) for details.\n\n### PyVBMC with noisy targets\n\nThe quick start example above works for deterministic (noiseless) evaluations of the target log-density. Py(VBMC) also supports *noisy* evaluations of the target.\nNoisy evaluations often arise from simulation-based models, for which a direct expression of the (log) likelihood is not available.\n\nFor information on how to run PyVBMC on a noisy target, see [this example notebook](examples/pyvbmc_example_5_noisy_likelihoods.ipynb) and the [VBMC FAQ](https://github.com/acerbilab/vbmc/wiki#noisy-target-function) (for MATLAB, but most concepts still apply).\n\n## Next steps\n\nOnce installed, example Jupyter notebooks can be found in the `pyvbmc/examples` directory. They can also be [viewed statically](https://acerbilab.github.io/pyvbmc/index.html#examples) on the [main documentation pages](https://acerbilab.github.io/pyvbmc/index.html). These examples will walk you through the basic usage of PyVBMC as well as some if its more advanced features.\n\nFor practical recommendations, such as how to set `LB` and `UB` and the plausible bounds, check out the FAQ on the [VBMC wiki](https://github.com/acerbilab/vbmc/wiki). The wiki was written with the MATLAB toolbox in mind, but the general advice applies to the Python version as well.\n\n## How does it work?\n\nVBMC/PyVBMC combine two machine learning techniques in a novel way:\n- [variational inference](https://en.wikipedia.org/wiki/Variational_Bayesian_methods), a method to perform approximate Bayesian inference;\n- [Bayesian quadrature](https://en.wikipedia.org/wiki/Bayesian_quadrature), a technique to estimate the value of expensive integrals.\n\nPyVBMC iteratively builds an approximation of the true, expensive target posterior via a [Gaussian process](https://distill.pub/2019/visual-exploration-gaussian-processes/) (GP), and it matches a variational distribution — an expressive mixture of Gaussians — to the GP.\n\nThis matching process entails optimization of the *evidence lower bound* (ELBO), that is a lower bound on the log marginal likelihood (LML), also known as log model evidence. Crucially, we estimate the ELBO via Bayesian quadrature, which is fast and does not require further evaluation of the true target posterior.\n\nIn each iteration, PyVBMC uses *active sampling* to select which points to evaluate next in order to explore the posterior landscape and reduce uncertainty in the approximation.\n\n![VBMC Demo](https://user-images.githubusercontent.com/70731267/225584285-5b90f78f-2ed9-4844-b0fa-ad5d4ab29923.gif)\n\nIn the figure above, we show an example PyVBMC run on a [Rosenbrock \"banana\" function](https://en.wikipedia.org/wiki/Rosenbrock_function). The bottom-left panel shows PyVBMC at work: in grayscale are samples from the variational posterior (drawn as small points) and the corresponding estimated density (drawn as contours). The solid orange circles are the active sampling points chosen at each iteration, and the hollow blue circles are the previously sampled points. The topmost and rightnmost panels show histograms of the marginal densities along the $x_1$ and $x_2$ dimensions, respectively. PyVBMC converges to an excellent approximation of the true posterior with a few dozens evaluations of the target density.\n\nSee the VBMC papers [[1,2](#references-and-citation)] for more details.\n\n## Troubleshooting and contact\n\nPyVBMC is under active development. The VBMC algorithm has been extensively tested in several benchmarks and published papers, and the benchmarks have been replicated using PyVBMC. But as with any approximate inference technique, you should double-check your results. See the [examples](examples) for descriptions of the convergence diagnostics and suggestions on validating PyVBMC's results with multiple runs.\n\nIf you have trouble doing something with PyVBMC, spot bugs or strange behavior, or you simply have some questions, please feel free to:\n- Post in the lab's [Discussions forum](https://github.com/orgs/acerbilab/discussions) with questions or comments about PyVBMC, your problems & applications;\n- [Open an issue](https://github.com/acerbilab/pyvbmc/issues/new) on GitHub;\n- Contact the project lead at <luigi.acerbi@helsinki.fi>, putting 'PyVBMC' in the subject of the email.\n\n## References and citation\n\n1. Acerbi, L. (2018). Variational Bayesian Monte Carlo. In *Advances in Neural Information Processing Systems 31*: 8222-8232. ([paper + supplement on arXiv](https://arxiv.org/abs/1810.05558), [NeurIPS Proceedings](https://papers.nips.cc/paper/8043-variational-bayesian-monte-carlo))\n2. Acerbi, L. (2020). Variational Bayesian Monte Carlo with Noisy Likelihoods. In *Advances in Neural Information Processing Systems 33*: 8211-8222 ([paper + supplement on arXiv](https://arxiv.org/abs/2006.08655), [NeurIPS Proceedings](https://papers.nips.cc/paper/2020/hash/5d40954183d62a82257835477ccad3d2-Abstract.html)).\n\nPlease cite both references if you use PyVBMC in your work (the 2018 paper introduced the framework, and the 2020 paper includes a number of major improvements, including but not limited to support for noisy likelihoods). You can cite PyVBMC in your work with something along the lines of\n\n> We estimated approximate posterior distibutions and approximate lower bounds to the model evidence of our models using Variational Bayesian Monte Carlo (PyVBMC; Acerbi, 2018, 2020). PyVBMC combines variational inference and active-sampling Bayesian quadrature to perform approximate Bayesian inference in a sample-efficient manner.\n\nBesides formal citations, you can demonstrate your appreciation for PyVBMC in the following ways:\n\n- *Star :star:* the VBMC repository on GitHub;\n- [Subscribe](http://eepurl.com/idcvc9) to the lab's newsletter for news and updates (new features, bug fixes, new releases, etc.);\n- [Follow Luigi Acerbi on Twitter](https://twitter.com/AcerbiLuigi) for updates about VBMC/PyVBMC and other projects;\n- Tell us about your model-fitting problem and your experience with PyVBMC (positive or negative) in the lab's [Discussions forum](https://github.com/orgs/acerbilab/discussions).\n\nYou may also want to check out [Bayesian Adaptive Direct Search in Python (PyBADS)](https://github.com/acerbilab/pybads), our companion method for fast Bayesian optimization.\n\n### Additional references\n\n3. Acerbi, L. (2019). An Exploration of Acquisition and Mean Functions in Variational Bayesian Monte Carlo. In *Proc. Machine Learning Research* 96: 1-10. 1st Symposium on Advances in Approximate Bayesian Inference, Montréal, Canada. ([paper in PMLR](http://proceedings.mlr.press/v96/acerbi19a.html))\n\n### BibTeX\n\n```BibTeX\n@article{acerbi2018variational,\n  title={{V}ariational {B}ayesian {M}onte {C}arlo},\n  author={Acerbi, Luigi},\n  journal={Advances in Neural Information Processing Systems},\n  volume={31},\n  pages={8222--8232},\n  year={2018}\n}\n\n@article{acerbi2020variational,\n  title={{V}ariational {B}ayesian {M}onte {C}arlo with noisy likelihoods},\n  author={Acerbi, Luigi},\n  journal={Advances in Neural Information Processing Systems},\n  volume={33},\n  pages={8211--8222},\n  year={2020}\n}\n\n@article{acerbi2019exploration,\n  title={An Exploration of Acquisition and Mean Functions in {V}ariational {B}ayesian {M}onte {C}arlo},\n  author={Acerbi, Luigi},\n  journal={PMLR},\n  volume={96},\n  pages={1--10},\n  year={2019}\n}\n```\n\n### License\n\nPyVBMC is released under the terms of the [BSD 3-Clause License](LICENSE).\n\n### Acknowledgments\n\nPyVBMC was developed by [members](https://www.helsinki.fi/en/researchgroups/machine-and-human-intelligence/people) (past and current) of the [Machine and Human Intelligence Lab](https://www.helsinki.fi/en/researchgroups/machine-and-human-intelligence/) at the University of Helsinki. Work on the PyVBMC package was supported by the Academy of Finland Flagship programme: [Finnish Center for Artificial Intelligence FCAI](https://fcai.fi/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License  Copyright (c) 2021, PyVBMC Developers and their Assignees All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyVBMC",
    "package_url": "https://pypi.org/project/PyVBMC/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyVBMC/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PyVBMC/1.0.0/",
    "requires_dist": [
      "cma (>=3.1.0)",
      "corner (>=2.2.1)",
      "dill (>=0.3.5.1)",
      "gpyreg (>=0.1.0)",
      "imageio (>=2.13.5)",
      "matplotlib (>=3.5.1)",
      "numpy (>=1.22.1)",
      "plotly (>=5.11.0)",
      "pytest (>=6.2.5)",
      "pytest-mock (>=3.6.1)",
      "pytest-rerunfailures (>=10.2)",
      "scipy (>=1.7.3)",
      "myst-nb (>=0.13.1) ; extra == 'dev'",
      "numpydoc (>=1.2.1) ; extra == 'dev'",
      "pylint (>=2.15.5) ; extra == 'dev'",
      "pytest-cov (>=4.0.0) ; extra == 'dev'",
      "sphinx (>=4.3.2) ; extra == 'dev'",
      "sphinx-book-theme (>=0.2.0) ; extra == 'dev'",
      "build (>=0.9.0) ; extra == 'dev'",
      "black (>=21.12.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "Variational Bayesian Monte Carlo in Python.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17318677,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98cdf607fd1d0ee95f57ae6a82ad08f34228b608217458294acc360f8644e04f",
          "md5": "72cf486b3f50e39d1874fd7462807040",
          "sha256": "702ed71628bc7a8966c5a29bba41485f3217e5209349dbe6f33c32447f91631c"
        },
        "downloads": -1,
        "filename": "PyVBMC-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72cf486b3f50e39d1874fd7462807040",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9151672,
        "upload_time": "2022-12-07T17:03:51",
        "upload_time_iso_8601": "2022-12-07T17:03:51.837049Z",
        "url": "https://files.pythonhosted.org/packages/98/cd/f607fd1d0ee95f57ae6a82ad08f34228b608217458294acc360f8644e04f/PyVBMC-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "796bd3c8fb797cb2b3605a1910e717db26e9e4797dfee68824cab2cb095ff1d8",
          "md5": "d9a49b62da4c875ad68208e4657ec780",
          "sha256": "2bcbf4dc58ef38407222f753576232ed189d7925276e79ec4bda4d1540f22b08"
        },
        "downloads": -1,
        "filename": "PyVBMC-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d9a49b62da4c875ad68208e4657ec780",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9200354,
        "upload_time": "2022-12-07T17:03:59",
        "upload_time_iso_8601": "2022-12-07T17:03:59.806978Z",
        "url": "https://files.pythonhosted.org/packages/79/6b/d3c8fb797cb2b3605a1910e717db26e9e4797dfee68824cab2cb095ff1d8/PyVBMC-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c30d44c0fb747973ed0da7d7721fc7b62e01e30a6c5a2198d695c6ec9c88a6e3",
          "md5": "9b2c498fde60b1cdc43b1eda96931610",
          "sha256": "563cc349770dc1735560e864e3b1d0a12e24fbca93beb64321fe10268ae2b98a"
        },
        "downloads": -1,
        "filename": "PyVBMC-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b2c498fde60b1cdc43b1eda96931610",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9151747,
        "upload_time": "2022-12-12T00:35:41",
        "upload_time_iso_8601": "2022-12-12T00:35:41.304648Z",
        "url": "https://files.pythonhosted.org/packages/c3/0d/44c0fb747973ed0da7d7721fc7b62e01e30a6c5a2198d695c6ec9c88a6e3/PyVBMC-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc3058cc8223286803a18b0f511842c670bd6d4675aefbde76e299d04b6ebfb8",
          "md5": "6a57fd2c7ff2bebf03ab4beeb38f4180",
          "sha256": "d9a59894f6b7ec722d9e81693124ff3b3dd64987e03d1346c08011a21b3726ec"
        },
        "downloads": -1,
        "filename": "PyVBMC-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a57fd2c7ff2bebf03ab4beeb38f4180",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 9200658,
        "upload_time": "2022-12-12T00:35:45",
        "upload_time_iso_8601": "2022-12-12T00:35:45.146697Z",
        "url": "https://files.pythonhosted.org/packages/fc/30/58cc8223286803a18b0f511842c670bd6d4675aefbde76e299d04b6ebfb8/PyVBMC-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "102fb64bb425a582dff4b889b1e2d41ecefcebc3b81f7781ebeea55cf980fbd8",
          "md5": "a120825cdcf4debd03a2f1b58ee943aa",
          "sha256": "05dc25dbce28adb38f62360a491fa87a91396b22f770ade324bca8972025a30c"
        },
        "downloads": -1,
        "filename": "PyVBMC-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a120825cdcf4debd03a2f1b58ee943aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6641295,
        "upload_time": "2023-03-16T12:50:22",
        "upload_time_iso_8601": "2023-03-16T12:50:22.719499Z",
        "url": "https://files.pythonhosted.org/packages/10/2f/b64bb425a582dff4b889b1e2d41ecefcebc3b81f7781ebeea55cf980fbd8/PyVBMC-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "971eac0106baf075baec23b106614b61a994d7ecba8c8be7be56438e555548f3",
          "md5": "dbff58d2ca73de815103a0e36b9c3412",
          "sha256": "2e49ce8b6dcec4b1334b63c93fb6381332bf1419599524d12824320fdadd45f5"
        },
        "downloads": -1,
        "filename": "PyVBMC-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dbff58d2ca73de815103a0e36b9c3412",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6684813,
        "upload_time": "2023-03-16T12:50:24",
        "upload_time_iso_8601": "2023-03-16T12:50:24.738497Z",
        "url": "https://files.pythonhosted.org/packages/97/1e/ac0106baf075baec23b106614b61a994d7ecba8c8be7be56438e555548f3/PyVBMC-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "102fb64bb425a582dff4b889b1e2d41ecefcebc3b81f7781ebeea55cf980fbd8",
        "md5": "a120825cdcf4debd03a2f1b58ee943aa",
        "sha256": "05dc25dbce28adb38f62360a491fa87a91396b22f770ade324bca8972025a30c"
      },
      "downloads": -1,
      "filename": "PyVBMC-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a120825cdcf4debd03a2f1b58ee943aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 6641295,
      "upload_time": "2023-03-16T12:50:22",
      "upload_time_iso_8601": "2023-03-16T12:50:22.719499Z",
      "url": "https://files.pythonhosted.org/packages/10/2f/b64bb425a582dff4b889b1e2d41ecefcebc3b81f7781ebeea55cf980fbd8/PyVBMC-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "971eac0106baf075baec23b106614b61a994d7ecba8c8be7be56438e555548f3",
        "md5": "dbff58d2ca73de815103a0e36b9c3412",
        "sha256": "2e49ce8b6dcec4b1334b63c93fb6381332bf1419599524d12824320fdadd45f5"
      },
      "downloads": -1,
      "filename": "PyVBMC-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dbff58d2ca73de815103a0e36b9c3412",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 6684813,
      "upload_time": "2023-03-16T12:50:24",
      "upload_time_iso_8601": "2023-03-16T12:50:24.738497Z",
      "url": "https://files.pythonhosted.org/packages/97/1e/ac0106baf075baec23b106614b61a994d7ecba8c8be7be56438e555548f3/PyVBMC-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}