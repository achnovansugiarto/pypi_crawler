{
  "info": {
    "author": "Vagner Bessa",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# thatscrapper\n\nScrap more, write less.\n\n`thatscrapper` is a selenium adapter.\n\n>Selenium automates browsers. That's it! What you do with that power is entirely up to you.\n\n<div style=\"text-align: right;\">\n<p>from <a href=\"https://www.selenium.dev/\">Selenium official webpage</a></p>\n</div>\n\n>Selenium is a simple API to write functional/acceptance tests using Selenium WebDriver. Through Selenium Python API you can access all functionalities of Selenium WebDriver in an intuitive way.\n\n<div style=\"text-align: right;\">\n<p>from <a href=\"https://selenium-python.readthedocs.io/index.html\">Selenium with python</a></p>\n</div>\n\nSince there are so many websites full of javascript code, scrapping pages using static methods, as those found on Beautifulsoup, gets harder or impossible. With Selenium WebDriver you can get around with it.\n\nHowever it is very common to make sure the desired element is expected with certain conditions. For that you have to add 'waits' contexts, like:\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\ndriver = webdriver.Firefox()\ndriver.get(\"http://somedomain/url_that_delays_loading\")\ntry:\n    # the waiting context with the selection of element by id\n    element = WebDriverWait(driver, 10).until(\n        EC.presence_of_element_located((By.ID, \"myDynamicElement\"))\n    )\nfinally:\n    driver.quit()\n```\n\nFor a single purpose web scraping single script that means some couple of lines like that. However, for a larger testing or scraping project, that can become anoying. With using `thatscrapper` above script becomes:\n\n```python\nimport thatscrapper as ts\n\ncrawler = ts.Crawler().goto(\"http://somedomain/url_that_delays_loading\")\nelement = crawler.element_id(\"myDynamicElement\")\ncrawler.quit()\n```\n\nIt is very important to quit the webdriver to avoid memory leakage or overcrowding. Always call `quit()` method when job is done . However, `Crawler` comes with a decorator that make sure the webdriver quits in case of any exception.\n\n\n## Installation\n\n```bash\n$ pip install thatscrapper\n```\n\n## Usage\n\n`thatscrapper` can be used to perform basic actions on webpages, such as clicking buttons, dropdown menu, press keyboard keys, send text or filling forms. It is also suitable to extract data.\n\nInstances of `thatscrapper.Crawler` are used to navigate pages, perform actions and select elements.\n\n\n### Run the webdriver:\n\n\n```python\nimport time\nimport thatscrapper\n\ncrawler = thatscrapper.Crawler()\n# open page\ncrawler.goto(\"https://phptravels.com/demo/\")\n# wait long enough so you can check the result\ntime.sleep(5)\n# always quit the driver\ncrawler.quit()\n```\n\nAlternatively, you can crawl pages withou opening browser graphics:\n\n```python\ncrawler = thatscrapper.Crawler(headless=True)\n\n```\n\n### Choosing the webdriver\n\nBy default `thatscrapper` make use of FireFox webdriver ([geckodriver](https://github.com/mozilla/geckodriver/releases)), however other drivers can be selected. But make sure you have the one of your choosing, and its [path is added to your enviroment variables](https://selenium-python.readthedocs.io/installation.html#drivers). For Linux users, download the werdriver and put it in /usr/bin or /usr/local/bin (windows user, [check this out](https://stackoverflow.com/a/56926716/13599189) in order to see how to do that in your system).\n\nHere's a list of suported browser drivers:\n\n| **Browser**  | **Download link** |\n| ----------   | ----------------- |\n| **Chrome**   | https://sites.google.com/chromium.org/driver/ |\n| **Edge**     | https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ |\n| **FireFox**  | https://github.com/mozilla/geckodriver/releases |\n| **Safari**   | https://webkit.org/blog/6900/webdriver-support-in-safari-10/ |\n\nTo use other driver, pass it's browser name to ```Crawler``` class:\n\n```python\nimport time\nimport thatscrapper as ts\n\ncrawler = ts.Crawler(browser='chrome')\n\n# extract data from\ncrawler.goto(\"https://www.techlistic.com/p/demo-selenium-practice.html\")\n# wait long enough so you can check the result\ntime.sleep(5)\n# always quit the driver\ncrawler.quit()\n```\n\n### Elements their children\n\nElements can be selected with one of four methods:\n\n- `element(value, by)`: selects an element based on given attribute `by`, with value `value`. A list of attributes is given by `thatscrapper.ATTR_SELECTOR.keys()`.\n- `elements(value, by)`: selects all elements based on given attribute `by`, with value `value`.\n- `child_of(element, value, by)`: selects an element child of `element` (WebElement) based on given attribute `by`, with value `value`.\n- `children_of`: selects all elements child of `element` based on given attribute `by`, with value `value`.\n\nConsider the following section of a page:\n\n```html\n<div class=\"form\">\n    <input type=\"text\" name=\"first_name\" class=\"first_name input mb1\" placeholder=\"First Name\">\n    <input type=\"text\" name=\"last_name\" class=\"last_name input mb1\" placeholder=\"Last Name\">\n    <input type=\"text\" name=\"business_name\" class=\"business_name input mb1\" placeholder=\"Business Name\">\n    ...\n</div>\n```\n\nIn order to make sure you select the input tags from that div with class=\"from\", and not another input that the page may contain, first you can select that div, and then select its children:\n\n```python\nform_element = crawler.element(\"form\", \"class name\")\nfields = crawler.children_of(form_element, \"input\", \"tag name\")\n``` \n\n### Sending keys\n\nSending inputs or keys to and element is performed one of two methods:\n\n- `send(key, value, by)`: send `key` to an element based on given attribute `by`, with value `value`.\n- `send(key, element)`: send `key` to previously selected `element`.\n\nConsider the same abov section of a page, and the selected elements `field`. Sending a string to element `<input type=\"text\" name=\"first_name\" class=\"first_name input mb1\" placeholder=\"First Name\">` can be:\n\n```python\ncrawler.send_to_element(fields[0], \"Vagner Bessa\")\n```\n\nSending keyboard keys works the same way. Check `thatscrapper.Key` or `selenium.webdriver.common.keys.Keys` for valid keys.\n\n## Contributing\n\nInterested in contributing? Check out the contributing guidelines. Please note that this project is released with a Code of Conduct. By contributing to this project, you agree to abide by its terms.\n\n## TODOs\n\n- [ ] Test all methods (current coverage: 61%).  \n- [ ] Implement data extraction modules and classes.  \n- [ ] Link or adapt to a database handler.\n- [ ] Implement an API boilerplate builder. That API is to serve data extracted from extractor modules and classes.  \n\n## License\n\n`thatscrapper` was created by Vagner Bessa. It is licensed under the terms of the MIT license.\n\n## Credits\n\n`thatscrapper` was created with [`cookiecutter`](https://cookiecutter.readthedocs.io/en/latest/) and the `py-pkgs-cookiecutter` [template](https://github.com/py-pkgs/py-pkgs-cookiecutter).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "thatscrapper",
    "package_url": "https://pypi.org/project/thatscrapper/",
    "platform": null,
    "project_url": "https://pypi.org/project/thatscrapper/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/thatscrapper/0.1.0/",
    "requires_dist": [
      "selenium (>=4.5.0,<5.0.0)",
      "pandas (>=1.5.0,<2.0.0)",
      "lxml (>=4.9.1,<5.0.0)",
      "polling2 (>=0.5.0,<0.6.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A selenium framework for automated actions on browsers",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15442160,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ec53f4365f91ea902aa9c016a88a46f7051708394d90cc113af9e9fd9628e8",
          "md5": "fed4f9ad2702fba5060efb7aee63e249",
          "sha256": "f6f5a32453f93fe07e62d86fcef597e31b7015ec9eb31ab80c3a308e5cc227db"
        },
        "downloads": -1,
        "filename": "thatscrapper-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fed4f9ad2702fba5060efb7aee63e249",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 11143,
        "upload_time": "2022-10-17T22:52:17",
        "upload_time_iso_8601": "2022-10-17T22:52:17.282419Z",
        "url": "https://files.pythonhosted.org/packages/a2/ec/53f4365f91ea902aa9c016a88a46f7051708394d90cc113af9e9fd9628e8/thatscrapper-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd30d706f199aab0602198ee9d7d580ae5cf72d49b88c2d3f85b69e0b111bdec",
          "md5": "2c16f075fcbe4ea26e5e86986f4d1c01",
          "sha256": "792edd2f01efbf14b912c09e4cc4be510106880a8b965cb70256fd838130dc6d"
        },
        "downloads": -1,
        "filename": "thatscrapper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c16f075fcbe4ea26e5e86986f4d1c01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 12333,
        "upload_time": "2022-10-17T22:52:19",
        "upload_time_iso_8601": "2022-10-17T22:52:19.535447Z",
        "url": "https://files.pythonhosted.org/packages/cd/30/d706f199aab0602198ee9d7d580ae5cf72d49b88c2d3f85b69e0b111bdec/thatscrapper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2ec53f4365f91ea902aa9c016a88a46f7051708394d90cc113af9e9fd9628e8",
        "md5": "fed4f9ad2702fba5060efb7aee63e249",
        "sha256": "f6f5a32453f93fe07e62d86fcef597e31b7015ec9eb31ab80c3a308e5cc227db"
      },
      "downloads": -1,
      "filename": "thatscrapper-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fed4f9ad2702fba5060efb7aee63e249",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 11143,
      "upload_time": "2022-10-17T22:52:17",
      "upload_time_iso_8601": "2022-10-17T22:52:17.282419Z",
      "url": "https://files.pythonhosted.org/packages/a2/ec/53f4365f91ea902aa9c016a88a46f7051708394d90cc113af9e9fd9628e8/thatscrapper-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd30d706f199aab0602198ee9d7d580ae5cf72d49b88c2d3f85b69e0b111bdec",
        "md5": "2c16f075fcbe4ea26e5e86986f4d1c01",
        "sha256": "792edd2f01efbf14b912c09e4cc4be510106880a8b965cb70256fd838130dc6d"
      },
      "downloads": -1,
      "filename": "thatscrapper-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2c16f075fcbe4ea26e5e86986f4d1c01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 12333,
      "upload_time": "2022-10-17T22:52:19",
      "upload_time_iso_8601": "2022-10-17T22:52:19.535447Z",
      "url": "https://files.pythonhosted.org/packages/cd/30/d706f199aab0602198ee9d7d580ae5cf72d49b88c2d3f85b69e0b111bdec/thatscrapper-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}