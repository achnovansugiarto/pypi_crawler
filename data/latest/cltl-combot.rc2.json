{
  "info": {
    "author": "CLTL",
    "author_email": "t.baier@vu.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CLTL Leolani Combot\n\nCLTL Leolani Combot provides the framework for applications that implement human-robot interaction with conversation.\n\n## About the Project\n\nThis is the successor of the [Leolani platform](https://github.com/leolani/pepper) with an improved modular architecture.\n\n## Applications\n\nClone one of the application parents from this project space and follow the instructions there to run them:\n\n* [Eliza app](https://github.com/leolani/eliza-parent)\n* [Get to know you app](https://github.com/leolani/g2ky-parent)\n* [Leolani-mmai](https://github.com/leolani/leolani-mmai-parent)\n\n## Components\n\nCurrently, the following components are implemented for the framework:\n\n* [Application Repository](https://github.com/leolani/cltl-requirements)  \n  Repository to share artifacts and external dependencies between components.\n* [EMISSOR](https://github.com/leolani/emissor)  \n  Representation of interaction data.\n* [Backend](https://github.com/leolani/cltl-backend)  \n  Hardware integration and signal generation.\n* [Automatic Speech Recognition (ASR)](https://github.com/leolani/cltl-asr)  \n  Transcription of audio signals to text.\n* [Voice Activity Detection (VAD)](https://github.com/leolani/cltl-vad)  \n  Detection of speech in audio signals.\n* [Face Recognition](https://github.com/leolani/cltl-face-recognition)  \n  Currently includes face detection, age-gender detection, face recognition\n* [Chat UI](https://github.com/leolani/cltl-chat-ui)  \n  Simple Chat client to display and interact with the conversation \n* [Eliza chat](https://github.com/leolani/cltl-eliza)  \n  Eliza based chat.\n* [Get To Know You (G2KY) chat](https://github.com/leolani/cltl-g2ky)  \n  Establish name based on face recognition.\n* [About-agent](https://github.com/leolani/cltl-about-agent)\n  Answer questions about the agent itself.\n* [Knowledge extraction](https://github.com/leolani/cltl-knowledgeextraction)\n  Extracts factoid triples and perspectives from statements and gives back responses or it extracts SPARQL queries from questions and generates answers.\n* [Knowledge linking](https://github.com/leolani/cltl-knowledgelinking)\n  Resolves IRIs for mentions and perceptions of things and people such that triples are augmented with IRIs.\n* [Knowledge representation](https://github.com/leolani/cltl-knowledgerepresentation)\n  The models and functions to support the episodic Knowledge Graph.\n* [Language generation](https://github.com/leolani/cltl-languagegeneration)\n  Generates texts from triples.\n* [Mention detection](https://github.com/leolani/cltl-mention-detection)\n  Detects mentions of entities and visual objects in text.\n* [Object recognition](https://github.com/leolani/cltl-object-recognition)\n  Detects people and objects in images.\n* [Question processor](https://github.com/leolani/cltl-questionprocessor)\n  Answers questions about the world through the Internet.\n* [Visual responder](https://github.com/leolani/cltl-visualresponder)\n  Answers questions to the visual context.\n\nTo create a new component follow the instructions in the [template component](https://github.com/leolani/cltl-template).\n\n## Getting Started\n\n### Running an application\n\nClone one of the above [applications](#Applications) and follow the instructions there to run them.\n\n### Prerequisites\n\n#### Python\n\nMost of the repositories require at least Python 3.8.\n\nOne option to manage Python versions is to use\n[pyenv](https://github.com/pyenv/pyenv). Note, however, that `pyenv` doesn't\nwork well together with anaconda. To detect if you are using anaconda, run\n`which python`. If you use anaconda, you can use that to manage your Python\nversion.\n\n#### make\n\nTo build the application, `make` is used.\n\nOn OS X it is recommeded to upgrade `make`. Since OS X doesn't use standard GNU\nutils due their restrictive licence, default `make` on OS X is way outdated.\n\nOne option is to use homebrew:\n    \n    brew install make\n\nand add the installed `gmake` command by adding\n\n    PATH=\"$(brew --prefix)/opt/make/libexec/gnubin:$PATH\"\n\nto your `~/.zshrc`\n\n#### Docker\n\nTo be added.\n\n## Development\n\nTo work on the development of a specific [application](#applications), start from the parent repository\nand follow the steps described below. The description uses the [Eliza app](https://github.com/leolani/eliza-parent)\nas example.\n\n### Check-out\n\nTo check out all code needed for the Eliza App, follow the instructions in the\n[Eliza app](https://github.com/leolani/eliza-parent).\n\n### Build and run the application\n\nThe application is structured into separate components which have their own *git* repositories\nand can be run as separate Python applications. The parent repository of the application contains\nall those component repositories as *git* submodules.\n\nThere is a central application ([cltl-eliza-app](https://github.com/leolani/cltl-eliza-app)) that configures and runs\nall the necessary components it needs, either inside a Python application or as containerized services in a *Kubernetes*\ncluster or using *docker compose*. To run the application, first all components need to be packaged and made available\nto the application. For this purpose there are *makefiles* available in the components and the application parent that\nautomate this process. To build the application run\n\n    make build\n\nfrom the **parent repository**. This command will download external dependencies to\n[cltl-requirements](https://github.com/leolani/cltl-requirements), setup virtual environments for all components, package\nthem and publish the packages to [cltl-requirements](https://github.com/leolani/cltl-requirements) to make them available\nto the application and other components.\n\nTo run the application follow the instructions in the [Eliza parent](https://github.com/leolani/eliza-parent).\n\n### Make changes to the code\n\nIndividual components in the parent repository are edited and committed separately, and, after a stable version is\nreached, the state of the components is commited in the parent repository, for the workflow see\n[Working with git submodules](HOWTO/gitsubmodules.md).   \nModularization allows developing components in isolation. The application and other components depend on a packaged\nversion of a component only, therefore changes will become available outside of the component only after rebuilding\nthe application, see above.\n\nTo use PyCharm for development see the instructions in [Workflow using PyCharm](HOWTO/pycharm.md).\n\nTo commit changes made to the application see the instructions in [Working with git submodules](HOWTO/gitsubmodules.md).\n\n### Adding a new component\n\nTo add a new component to an application follow the instruction in the\n[template component](https://github.com/leolani/cltl-template).\n\n### Create a new application\n\n\n### HOWTOs\n\n* [Workflow using PyCharm](HOWTO/pycharm.md)\n* [Working with git submodules](HOWTO/gitsubmodules.md)\n* [Setup a new component](https://github.com/leolani/cltl-template.git)\n* [Add a component to a Python app]()\n\n## Content of this repository\n\nThis repo provides infrastructre and general code for the platform:\n\n### Infrastructure\n\nThe `cltl.combot.infra` module contains library code for infrastructre used in\nthe application. \n\n#### Event bus\n\nComponents of the application can communicate via an event bus. The\n`cltl.combot.infra.event` module provides the interface and different implementations\nof the event bus.\n\nThe `cltl.combot.infra.topic_worker` module provides a convenience class to\nimplement the subscription to one or multiple topics in the event bus.\n\n#### Configuration manager\n\nConfiguration is made available in the application via a configuration manager.\nThe `cltl.combot.infra.config` module provides the interface and different\nimplementations of the configuration manager. \n\n#### Resource manager\n\nAccess to resources in the application is made available via a resource manager.\nThis includes providing resources and waiting for resources to become available\nas well as managing access to shared resources. The `cltl.combot.infra.resource`\nmodule provides the interface and different implementations of the resource\nmanager. \n\n#### Time util\n\nThe `cltl.combot.infra.time_util` module provides time related utilities to\nease the usage of a consistent time format throughout the application.\n\n#### Dependency injection\n\nThe `cltl.combot.infra.di_container` module provides a simple utility to use\ndependency inject in the application. \n\n### Common libraries\n\nTo be added.\n\n### Events based on EMISSOR\n\nThe `cltl.combot.event` module contains common event payloads.\n\n## Contributing\n\nContributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n\n<!-- LICENSE -->\n## License\n\nDistributed under the MIT License. See [`LICENSE`](https://github.com/leolani/cltl-combot/blob/main/LICENCE) for more information.\n\n\n\n<!-- CONTACT -->\n## Authors\n\n* [Taewoon Kim](https://tae898.github.io/)\n* [Thomas Baier](https://www.linkedin.com/in/thomas-baier-05519030/)\n* [Selene Báez Santamaría](https://selbaez.github.io/)\n* [Piek Vossen](https://github.com/piekvossen)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leolani/cltl-combot",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cltl.combot",
    "package_url": "https://pypi.org/project/cltl.combot/",
    "platform": null,
    "project_url": "https://pypi.org/project/cltl.combot/",
    "project_urls": {
      "Homepage": "https://github.com/leolani/cltl-combot"
    },
    "release_url": "https://pypi.org/project/cltl.combot/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Communication Robot Framework",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15066966,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24a64c0c7782a47571b490b7b26c96b04be322a15ac9170988f328bc49990d60",
          "md5": "2412be844811767e619026a9849d9577",
          "sha256": "254dc0c07b37c077bbcc118b9a599ac3bbeb69a84a462d6e831c16239c17589d"
        },
        "downloads": -1,
        "filename": "cltl.combot-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2412be844811767e619026a9849d9577",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36318,
        "upload_time": "2022-09-12T12:46:18",
        "upload_time_iso_8601": "2022-09-12T12:46:18.413926Z",
        "url": "https://files.pythonhosted.org/packages/24/a6/4c0c7782a47571b490b7b26c96b04be322a15ac9170988f328bc49990d60/cltl.combot-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eae2baa31fc9f64f14b94306d4b751843b9694fde96d01c650a9531df3e2591",
          "md5": "b53b1be7447b8aa2df86dd03499da95b",
          "sha256": "f1004a5f612cf679b7529bef5de1a77c5b13a7a363ce169aa20e6e1b41815c26"
        },
        "downloads": -1,
        "filename": "cltl.combot-0.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "b53b1be7447b8aa2df86dd03499da95b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17047,
        "upload_time": "2021-12-13T08:12:13",
        "upload_time_iso_8601": "2021-12-13T08:12:13.480964Z",
        "url": "https://files.pythonhosted.org/packages/0e/ae/2baa31fc9f64f14b94306d4b751843b9694fde96d01c650a9531df3e2591/cltl.combot-0.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24a64c0c7782a47571b490b7b26c96b04be322a15ac9170988f328bc49990d60",
        "md5": "2412be844811767e619026a9849d9577",
        "sha256": "254dc0c07b37c077bbcc118b9a599ac3bbeb69a84a462d6e831c16239c17589d"
      },
      "downloads": -1,
      "filename": "cltl.combot-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2412be844811767e619026a9849d9577",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 36318,
      "upload_time": "2022-09-12T12:46:18",
      "upload_time_iso_8601": "2022-09-12T12:46:18.413926Z",
      "url": "https://files.pythonhosted.org/packages/24/a6/4c0c7782a47571b490b7b26c96b04be322a15ac9170988f328bc49990d60/cltl.combot-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}