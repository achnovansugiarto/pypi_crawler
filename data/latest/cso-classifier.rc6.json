{
  "info": {
    "author": "Angelo Salatino",
    "author_email": "angelo.salatino@open.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CSO-Classifier\n\n[![PyPI version](https://badge.fury.io/py/cso-classifier.svg)](https://badge.fury.io/py/cso-classifier) [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2660819.svg)](https://doi.org/10.5281/zenodo.2660819)\n[![Python 3.6+](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n## Abstract\n\nClassifying research papers according to their research topics is an important task to improve their retrievability, assist the creation of smart analytics, and support a variety of approaches for analysing and making sense of the research environment. In this repository, we present the CSO Classifier, a new unsupervised approach for automatically classifying research papers according to the [Computer Science Ontology (CSO)](https://cso.kmi.open.ac.uk), a comprehensive ontology of research areas in the field of Computer Science. The CSO Classifier takes as input the metadata associated with a research paper (title, abstract, keywords) and returns a selection of research concepts drawn from the ontology. The approach was evaluated on a gold standard of manually annotated articles yielding a significant improvement over alternative methods.\n\n## Table of contents\n\n<!--ts-->\n* [Abstract](#abstract)\n* [Table of contents](#table-of-contents)\n* [About](#about)\n* [Getting started](#getting-started)\n  * [Installation using PIP](#installation-using-pip)\n  * [Installation using Github](#installation-using-github)\n  * [Troubleshooting](#troubleshooting)\n  * [Setup](#setup)\n  * [Update](#update)\n  * [Version](#version)\n  * [Test](#test)\n* [Usage examples](#usage-examples)\n  * [Classifying a single paper (SP)](#classifying-a-single-paper-sp)\n  * [Classifying in batch mode (BM)](#classifying-in-batch-mode-bm)\n  * [Parameters](#parameters)\n* [Releases](#releases)\n  * [v3.0](#v30)\n  * [v2.3.2](#v232)\n  * [v2.3.1](#v231)\n  * [v2.3](#v23)\n  * [v2.2](#v22)\n  * [v2.1](#v21)\n  * [v2.0](#v20)\n  * [v1.0](#v10)\n* [List of Files](#list-of-files)\n* [Word2vec model and token-to-cso-combined file generation](#word2vec-model-and-token-to-cso-combined-file-generation)\n  * [Word Embedding generation](#word-embedding-generation)\n  * [token-to-cso-combined file](#token-to-cso-combined-file)\n* [Use the CSO Classifier in other domains of Science](#use-the-cso-classifier-in-other-domains-of-science)\n* [How to Cite CSO Classifier](#how-to-cite-cso-classifier)\n* [License](#license)\n* [References](#references)\n<!--te-->\n\n## About\n\nThe CSO Classifier is a novel application that takes as input the text from the abstract, title, and keywords of a research paper and outputs a list of relevant concepts from CSO. It consists of three main components: (i) the syntactic module, (ii) the semantic module and (iii) the post-processing module. Figure 1 depicts its architecture. The syntactic module parses the input documents and identifies CSO concepts that are explicitly referred to in the document. The semantic module uses part-of-speech tagging to identify promising terms and then exploits word embeddings to infer semantically related topics. Finally, the post-processing module combines the results of these two modules, removes outliers, and enhances them by including relevant super-areas.\n\n![Framework of CSO Classifier](https://github.com/angelosalatino/cso-classifier/raw/master/images/Workflow.png \"Framework of CSO Classifier\")\n**Figure 1**: Framework of CSO Classifier\n\n## Getting started\n\n### Installation using PIP\n\n1. Ensure you have **Python 3.6** or above installed. Download [latest version](https://www.python.org/downloads/). Perhaps, you may want to use a virtual environment. Here is how to [create and activate](https://docs.python.org/3/tutorial/venv.html) a virtual environment.\n2. Use pip to install the classifier: ```pip install cso-classifier```\n3. Setting up the classifier. Go to [Setup](#setup) for finalising the installation.\n\n### Installation using Github\n\n1. Ensure you have [**Python 3.6**](https://www.python.org/downloads/) or above installed. Download [latest version](https://www.python.org/downloads/). Perhaps, you may want to use a virtual environment. Here is how to [create and activate](https://docs.python.org/3/tutorial/venv.html) a virtual environment.\n2. Download this repository using: ```git clone https://github.com/angelosalatino/cso-classifier.git```\n3. Install the package by running the following command: ```pip install ./cso-classifier```\n4. Setting up the classifier. Go to [Setup](#setup) for finalising the installation.\n\n### Troubleshooting\n\nAlthough, we have worked hard to fix many issues occurring at testing phase, some of them could still arise for reasons that go beyond our control. Here is the list of the common issues we have encountered.\n\n#### Unable to install requirements\n\nMost likely this issue is due to the version of ```pip``` you are currently using. Make sure to update to the latest version of pip: ```pip install --upgrade pip```.\n\n#### Unable to install python-Levenshtein\n\nMany users found difficulties in installing the python-Levenshtein library on some Linux servers. One way to get around this issue is to install the ```python3-devel``` package. You might need sudo rights on the hosting machine.\n\n-- Special thanks to Panagiotis Mavridis for suggesting the solution.\n\n#### \"python setup.py egg_info\" failed\n\nMore specifically: ```Command \"python setup.py egg_info\" failed with error code 1```. This error is due to the *setup.py* file. The occurrence of this issue is rare. If you are experiencing it, please do get in touch with us. We will work with you to fix it.\n\n### Setup\n\nAfter installing the CSO Classifier, it is important to set it up with the right dependencies. To set up the classifier, please run the following code:\n\n```python\nfrom cso_classifier import CSOClassifier as cc\ncc.setup()\nexit() # it is important to close the current console, to make those changes effective\n```\n\nThis function downloads the English package of spaCy, which is equivalent to run ```python -m spacy download en_core_web_sm```.\nThen, it downloads the latest version of Computer Science Ontology and the latest version of the word2vec model, which will be used across all modules.\n\n### Update\n\nThis functionality allows to update both ontology and word2vec model.\n\n```python\nfrom cso_classifier import CSOClassifier as cc\ncc.update()\n\n#or\ncc.update(force = True)\n```\n\nBy just running ```update()``` without parameters, the system will check the version of the ontology/model that is currently using, against the lastest available version. The update will be performed if one of the two or both are outdated.\nInstead with ```update(force = True)``` the system will force the update by deleting the ontology/model that is currently using, and downloading their latest version.\n\n### Version\n\nThis functionality returns the version of the CSO Classifier and CSO ontology you are currently using. It will also check online if there is a newer version, for both of them, and suggest how to update.\n\n```python\nfrom cso_classifier import CSOClassifier as cc\ncc.version()\n```\n\nInstead, if you just want to know the package version use:\n```python\nimport cso_classifier\nprint(cso_classifier.__version__)\n```\n\n### Test\n\nThis functionality allows you to test whether the classifier has been properly installed.\n\n```python\nimport cso_classifier as test\ntest.test_classifier_single_paper() # to test it with one paper\ntest.test_classifier_batch_mode() # to test it with multiple papers\n```\n\nTo ensure that the classifier has been installed successfully, these two functions ```test_classifier_single_paper()``` and ```test_classifier_batch_mode()``` print out both paper(s) info and the result of their classification.\n\n## Usage examples\n\nIn this section, we explain how to run the CSO Classifier to classify a single or multiple (_batch mode_) papers.\n\n### Classifying a single paper (SP)\n\n#### Sample Input (SP)\n\nThe sample input can be either a *dictionary* containing title, abstract and keywords as keys, or a *string*:\n```json\npaper = {\n        \"title\": \"De-anonymizing Social Networks\",\n        \"abstract\": \"Operators of online social networks are increasingly sharing potentially \"\n            \"sensitive information about users and their relationships with advertisers, application \"\n            \"developers, and data-mining researchers. Privacy is typically protected by anonymization, \"\n            \"i.e., removing names, addresses, etc. We present a framework for analyzing privacy and \"\n            \"anonymity in social networks and develop a new re-identification algorithm targeting \"\n            \"anonymized social-network graphs. To demonstrate its effectiveness on real-world networks, \"\n            \"we show that a third of the users who can be verified to have accounts on both Twitter, a \"\n            \"popular microblogging service, and Flickr, an online photo-sharing site, can be re-identified \"\n            \"in the anonymous Twitter graph with only a 12% error rate. Our de-anonymization algorithm is \"\n            \"based purely on the network topology, does not require creation of a large number of dummy \"\n            \"\\\"sybil\\\" nodes, is robust to noise and all existing defenses, and works even when the overlap \"\n            \"between the target network and the adversary's auxiliary information is small.\",\n        \"keywords\": \"data mining, data privacy, graph theory, social networking (online)\"\n        }\n\n#or\n\npaper = \"\"\"De-anonymizing Social Networks\nOperators of online social networks are increasingly sharing potentially sensitive information about users and their relationships with advertisers, application developers, and data-mining researchers. Privacy is typically protected by anonymization, i.e., removing names, addresses, etc. We present a framework for analyzing privacy and anonymity in social networks and develop a new re-identification algorithm targeting anonymized social-network graphs. To demonstrate its effectiveness on real-world networks, we show that a third of the users who can be verified to have accounts on both Twitter, a popular microblogging service, and Flickr, an online photo-sharing site, can be re-identified in the anonymous Twitter graph with only a 12% error rate. Our de-anonymization algorithm is based purely on the network topology, does not require creation of a large number of dummy \"sybil\" nodes, is robust to noise and all existing defenses, and works even when the overlap between the target network and the adversary's auxiliary information is small.\ndata mining, data privacy, graph theory, social networking (online)\"\"\"\n```\n\nIn case the input variable is a *dictionary*, the classifier checks only the fields ```title```, ```abstract``` and ```keywords```. However, there is no need for filling all three of them. Indeed, if for instance you do not have *keywords*, you can just use the *title* and *abstract*.\n\n#### Run (SP)\n\nJust import the classifier and run it:\n\n```python\nfrom cso_classifier import CSOClassifier\ncc = CSOClassifier(modules = \"both\", enhancement = \"first\", explanation = True)\nresult = cc.run(paper)\nprint(result)\n```\n\nTo observe the available settings please refer to the [Parameters](#parameters) section.\n\nIf you have more than one paper to classify, you can use the following example:\n\n```python\nfrom cso_classifier import CSOClassifier\ncc = CSOClassifier(modules = \"both\", enhancement = \"first\", explanation = True)\nresults = list()\nfor paper in papers:\n  results.append(cc.run(paper))\nprint(results)\n```\n\nEven if you are running multiple classifications, the current implementation of the CSO Classifier will load the CSO and the model only once, saving computational time.\n\n#### Sample Output (SP)\n\nAs output, the classifier returns a dictionary with five components: (i) syntactic, (ii) semantic, (iii) union, (iv) enhanced, and (v) explanation. The latter field is available only if the **explanation** flag is set to True.\n\nBelow you can find an example. The keys syntactic and semantic respectively contain the topics returned by the syntacic and semantic module. Union contains the unique topics found by the previous two modules. In ehancement you can find the relevant super-areas. *Please be aware that the results may change according to the version of Computer Science Ontology.*\n\n```json\n{\n   \"syntactic\":[\n      \"network topology\",\n      \"online social networks\",\n      \"real-world networks\",\n      \"anonymization\",\n      \"privacy\",\n      \"social networks\",\n      \"data privacy\",\n      \"graph theory\",\n      \"data mining\",\n      \"sensitive informations\",\n      \"anonymity\",\n      \"micro-blog\",\n      \"twitter\"\n   ],\n   \"semantic\":[\n      \"network topology\",\n      \"online social networks\",\n      \"topology\",\n      \"data privacy\",\n      \"social networks\",\n      \"privacy\",\n      \"anonymization\",\n      \"graph theory\",\n      \"data mining\",\n      \"anonymity\",\n      \"micro-blog\",\n      \"twitter\"\n   ],\n   \"union\":[\n      \"network topology\",\n      \"online social networks\",\n      \"topology\",\n      \"real-world networks\",\n      \"anonymization\",\n      \"privacy\",\n      \"social networks\",\n      \"data privacy\",\n      \"graph theory\",\n      \"data mining\",\n      \"sensitive informations\",\n      \"anonymity\",\n      \"micro-blog\",\n      \"twitter\"\n   ],\n   \"enhanced\":[\n      \"computer networks\",\n      \"online systems\",\n      \"complex networks\",\n      \"privacy preserving\",\n      \"computer security\",\n      \"world wide web\",\n      \"theoretical computer science\",\n      \"computer science\",\n      \"access control\",\n      \"network security\",\n      \"authentication\",\n      \"social media\"\n   ],\n   \"explanation\":{\n\t\t\"social networks\": [\"social network\", \"online social networks\", \"microblogging service\", \"real-world networks\", \"social networks\", \"microblogging\", \"social networking\", \"twitter graph\", \"anonymous twitter\", \"twitter\"],\n\t\t\"online social networks\": [\"online social networks\", \"social network\", \"social networks\"],\n\t\t\"sensitive informations\": [\"sensitive information\"],\n\t\t\"privacy\": [\"sensitive information\", \"anonymity\", \"anonymous\", \"data privacy\", \"privacy\"],\n\t\t\"anonymization\": [\"anonymization\"],\n\t\t\"anonymity\": [\"anonymity\", \"anonymous\"],\n\t\t\"real-world networks\": [\"real-world networks\"],\n\t\t\"twitter\": [\"twitter graph\", \"twitter\", \"microblogging service\", \"anonymous twitter\", \"microblogging\"],\n\t\t\"micro-blog\": [\"twitter graph\", \"twitter\", \"microblogging service\", \"anonymous twitter\", \"microblogging\"],\n\t\t\"network topology\": [\"topology\", \"network topology\"],\n\t\t\"data mining\": [\"data mining\", \"mining\"],\n\t\t\"data privacy\": [\"data privacy\", \"privacy\"],\n\t\t\"graph theory\": [\"graph theory\"],\n\t\t\"topology\": [\"topology\", \"network topology\"],\n\t\t\"computer networks\": [\"topology\", \"network topology\"],\n\t\t\"online systems\": [\"online social networks\", \"social network\", \"social networks\"],\n\t\t\"complex networks\": [\"real-world networks\"],\n\t\t\"privacy preserving\": [\"anonymization\"],\n\t\t\"computer security\": [\"anonymity\", \"data privacy\", \"privacy\"],\n\t\t\"world wide web\": [\"social network\", \"online social networks\", \"microblogging service\", \"real-world networks\", \"social networks\", \"microblogging\", \"social networking\", \"twitter graph\", \"anonymous twitter\", \"twitter\"],\n\t\t\"theoretical computer science\": [\"graph theory\"],\n\t\t\"computer science\": [\"data mining\", \"mining\"],\n\t\t\"access control\": [\"sensitive information\"],\n\t\t\"network security\": [\"anonymity\", \"sensitive information\", \"anonymous\"],\n\t\t\"authentication\": [\"anonymity\", \"anonymous\"],\n\t\t\"social media\": [\"microblogging service\", \"microblogging\", \"twitter graph\", \"anonymous twitter\", \"twitter\"]\n\t}\n}\n```\n\n### Classifying in batch mode (BM)\n\n#### Sample Input (BM)\n\nThe sample input is a *dictionary* of papers. Each key is an identifier (example id1, see below) and its value is either a *dictionary* containing title, abstract and keywords as keys, or a *string*, as shown for [Classifying a single paper (SP)](#classifying-a-single-paper-sp).\n\n```json\npapers = {\n    \"id1\": {\n        \"title\": \"De-anonymizing Social Networks\",\n        \"abstract\": \"Operators of online social networks are increasingly sharing potentially sensitive information about users and their relationships with advertisers, application developers, and data-mining researchers. Privacy is typically protected by anonymization, i.e., removing names, addresses, etc. We present a framework for analyzing privacy and anonymity in social networks and develop a new re-identification algorithm targeting anonymized social-network graphs. To demonstrate its effectiveness on real-world networks, we show that a third of the users who can be verified to have accounts on both Twitter, a popular microblogging service, and Flickr, an online photo-sharing site, can be re-identified in the anonymous Twitter graph with only a 12% error rate. Our de-anonymization algorithm is based purely on the network topology, does not require creation of a large number of dummy \\\"sybil\\\" nodes, is robust to noise and all existing defenses, and works even when the overlap between the target network and the adversary's auxiliary information is small.\",\n        \"keywords\": \"data mining, data privacy, graph theory, social networking (online)\"\n    },\n    \"id2\": {\n        \"title\": \"Title of sample paper id2\",\n        \"abstract\": \"Abstract of sample paper id2\",\n        \"keywords\": \"keyword1, keyword2, ..., keywordN\"\n    }\n}\n```\n\n#### Run (BM)\n\nImport the python script and run the classifier:\n\n```python\nfrom cso_classifier import CSOClassifier\ncc = CSOClassifier(workers = 1, modules = \"both\", enhancement = \"first\", explanation = True)\nresult = cc.batch_run(papers)\nprint(result)\n```\n\nTo observe the available settings please refer to the [Parameters](#parameters) section.\n\n#### Sample Output (BM)\n\nAs output the classifier returns a dictionary of dictionaries. For each classified paper (identified by their id), it returns a dictionary containing five components: (i) syntactic, (ii) semantic, (iii) union, (iv) enhanced, and (v) explanation. The latter field is available only if the explanation flag is set to True.\n\nBelow you can find an example. The keys syntactic and semantic respectively contain the topics returned by the syntactic and semantic module. Union contains the unique topics found by the previous two modules. In ehancement you can find the relevant super-areas. In explanation, you can find all chunks of text that allowed the classifier to infer a given topic. *Please be aware that the results may change according to the version of Computer Science Ontology.*\n\n```json\n{\n    \"id1\": {\n\t\"syntactic\": [\"network topology\", \"online social networks\", \"real-world networks\", \"anonymization\", \"privacy\", \"social networks\", \"data privacy\", \"graph theory\", \"data mining\", \"sensitive informations\", \"anonymity\", \"micro-blog\", \"twitter\"],\n\t\"semantic\": [\"network topology\", \"online social networks\", \"topology\", \"data privacy\", \"social networks\", \"privacy\", \"anonymization\", \"graph theory\", \"data mining\", \"anonymity\", \"micro-blog\", \"twitter\"],\n\t\"union\": [\"network topology\", \"online social networks\", \"topology\", \"real-world networks\", \"anonymization\", \"privacy\", \"social networks\", \"data privacy\", \"graph theory\", \"data mining\", \"sensitive informations\", \"anonymity\", \"micro-blog\", \"twitter\"],\n\t\"enhanced\": [\"computer networks\", \"online systems\", \"complex networks\", \"privacy preserving\", \"computer security\", \"world wide web\", \"theoretical computer science\", \"computer science\", \"access control\", \"network security\", \"authentication\", \"social media\"],\n\t\"explanation\": {\n\t\t\"social networks\": [\"social network\", \"online social networks\", \"microblogging service\", \"real-world networks\", \"social networks\", \"microblogging\", \"social networking\", \"twitter graph\", \"anonymous twitter\", \"twitter\"],\n\t\t\"online social networks\": [\"online social networks\", \"social network\", \"social networks\"],\n\t\t\"sensitive informations\": [\"sensitive information\"],\n\t\t\"privacy\": [\"sensitive information\", \"anonymity\", \"anonymous\", \"data privacy\", \"privacy\"],\n\t\t\"anonymization\": [\"anonymization\"],\n\t\t\"anonymity\": [\"anonymity\", \"anonymous\"],\n\t\t\"real-world networks\": [\"real-world networks\"],\n\t\t\"twitter\": [\"twitter graph\", \"twitter\", \"microblogging service\", \"anonymous twitter\", \"microblogging\"],\n\t\t\"micro-blog\": [\"twitter graph\", \"twitter\", \"microblogging service\", \"anonymous twitter\", \"microblogging\"],\n\t\t\"network topology\": [\"topology\", \"network topology\"],\n\t\t\"data mining\": [\"data mining\", \"mining\"],\n\t\t\"data privacy\": [\"data privacy\", \"privacy\"],\n\t\t\"graph theory\": [\"graph theory\"],\n\t\t\"topology\": [\"topology\", \"network topology\"],\n\t\t\"computer networks\": [\"topology\", \"network topology\"],\n\t\t\"online systems\": [\"online social networks\", \"social network\", \"social networks\"],\n\t\t\"complex networks\": [\"real-world networks\"],\n\t\t\"privacy preserving\": [\"anonymization\"],\n\t\t\"computer security\": [\"anonymity\", \"data privacy\", \"privacy\"],\n\t\t\"world wide web\": [\"social network\", \"online social networks\", \"microblogging service\", \"real-world networks\", \"social networks\", \"microblogging\", \"social networking\", \"twitter graph\", \"anonymous twitter\", \"twitter\"],\n\t\t\"theoretical computer science\": [\"graph theory\"],\n\t\t\"computer science\": [\"data mining\", \"mining\"],\n\t\t\"access control\": [\"sensitive information\"],\n\t\t\"network security\": [\"anonymity\", \"sensitive information\", \"anonymous\"],\n\t\t\"authentication\": [\"anonymity\", \"anonymous\"],\n\t\t\"social media\": [\"microblogging service\", \"microblogging\", \"twitter graph\", \"anonymous twitter\", \"twitter\"]\n\t    }\n    },\n    \"id2\": {\n        \"syntactic\": [...],\n        \"semantic\": [...],\n        \"union\": [...],\n        \"enhanced\": [...],\n        \"explanation\": {...}\n    }\n}\n```\n\n### Parameters\nBeside the paper(s), the function running the CSO Classifier accepts seven additional parameters: (i) **workers**, (ii) **modules**, (iii) **enhancement**, (iv) **explanation**, (v) **delete_outliers**, (vi) **fast_classification**, and (vii) **silent**. There is no particular order on how to specify these paramaters. Here we explain their usage. The workers parameters is an integer (equal or greater than 1), modules and enhancement are strings that define a particular behaviour for the classifier. The explanation, delete_outliers, fast_classification, and silent parameters are booleans.\n\n(i) The parameter *workers* defines the number of threads to run for classifying the input corpus. For instance, if ```workers = 4```, there will be 4 instances of the CSO Classifier, each one receiving a chunk (equally split) of the corpus to process. Once all processes are completed, the results will be aggregated and returned. The default value for *workers* is *1*. This parameter is available only when running the classifier in *batch mode*.\n\n(ii) The parameter *modules* can be either \"syntactic\", \"semantic\", or \"both\". Using the value \"syntactic\", the classifier will run only the syntactic module. Using the \"semantic\" value, instead, the classifier will use only the semantic module. Finally, using \"both\", the classifier will run both syntactic and semantic modules and combine their results. The default value for *modules* is *both*.\n\n(iii) The parameter *enhancement* can be either \"first\", \"all\", or \"no\". This parameter controls whether the classifier will try to infer, given a topic (e.g., Linked Data), only the direct super-topics (e.g., Semantic Web) or all its super-topics (e.g., Semantic Web, WWW, Computer Science). Using \"first\" as a value will infer only the direct super topics. Instead, if using \"all\", the classifier will infer all its super-topics. Using \"no\" the classifier will not perform any enhancement. The default value for *enhancement* is *first*.\n\n(iv) The parameter *explanation* can be either *True* or *False*. This parameter defines whether the classifier should return an explanation. This explanation consists of chunks of text, coming from the input paper, that allowed the classifier to return a given topic. This supports the user in better understanding why a certain topic has been inferred. The classifier will return an explanation for all topics, even for the enhanced ones. In this case, it will join all the text chunks of all its sub-topics. The default value for *explanation* is *False*.\n\n(v) The parameter *delete_outliers* can be either *True* or *False*. This parameter controls whether to run the outlier detection component within the post-processing module. This component improves the results by removing erroneous topics that were conceptually distant from the others. Due to their computation, users might experience slowdowns. For this reason, users can decide between good results and low computational time or improved results and slower computation. The default value for *delete_outliers* is *True*.\n\n(vi) The parameter *fast_classification* can be either *True* or *False*. This parameter determines whether the semantic module should use the full model or the cached one. Using the full model provides slightly better results than the cached one. However, using the cached model is more than 15x faster. Read [here](#word2vec-model-and-token-to-cso-combined-file-generation) for more details about these two models. The default value for *fast_classification* is *True*.\n\n(vii) The parameter *silent* can be either *True* or *False*. This determines whether the classifier prints its progress in the console. If set to True, the classifier will be silent and will not print any output while classifying. The default value for *silent* is *False*.\n\n\n|# | Parameter  |  Single Paper | Batch Mode |\n|---|---|---|---|\n|i  | workers  | :x:  | :white_check_mark: |\n|ii | modules  | :white_check_mark:  | :white_check_mark: |\n|iii| enhancement  | :white_check_mark:  | :white_check_mark: |\n|iv | explanation  | :white_check_mark:  | :white_check_mark: |\n|v  |delete_outliers| :white_check_mark:  | :white_check_mark: |\n|vi | fast_classification| :white_check_mark:  | :white_check_mark: |\n|vii| silent       | :white_check_mark:  | :white_check_mark: |\n\n**Table 1**: Parameters availability when using CSO Classifier\n\n\n## Releases\n\nHere we list the available releases for the CSO Classifier. These releases are available for download both from [Github](https://github.com/angelosalatino/cso-classifier/releases) and [Zenodo](10.5281/zenodo.2660819).\n\n### v3.0\n\nThis release welcomes some improvements under the hood. In particular:\n* we refactored the code, reorganising scripts into more elegant classes\n* we added functionalities to automatically setup and update the classifier to the latest version of CSO\n* we added the *explanation* feature, which returns chunks of text that allowed the classifier to infer a given topic\n* the syntactic module takes now advantage of Spacy POS tagger (as previously done only by semantic module)\n* the grammar for the chunk parser is now more robust: ```{<JJ.*>*<HYPH>*<JJ.*>*<HYPH>*<NN.*>*<HYPH>*<NN.*>+}```\n\nIn addition, in the post-processing module, we added the *outlier detection* component. This component improves the accuracy of the result set, by removing erroneous topics that were conceptually distant from the others. This component is enabled by default and can be disabled by setting ```delete_outliers = False``` when calling the CSO Classifier (see [Parameters](#parameters)).\n\nPlease, be aware that having substantially restructured the code into classes, the way of running the classifier has changed too. Thus, if you are using a previous version of the classifier, we encourage you to update it (```pip install -U cso-classifier```) and modify your calls to the classifier, accordingly. Read our [usage examples](#usage-examples).\n\nWe would like to thank James Dunham @jamesdunham from CSET (Georgetown University) for suggesting to us how to improve the code.\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5095422.svg)](https://doi.org/10.5281/zenodo.5095422)\n\n### v2.3.2\n\nVersion alignement with Pypi. Similar to version 2.3.1.\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3357768.svg)](https://doi.org/10.5281/zenodo.3357768)\n\n\n### v2.3.1\n\nBug Fix. Added some exception handles. \n**Notice:** *Please note that during the upload of this version on Pypi (python index), we encountered some issues. We can't guarantee this version will work properly. To this end, we created a new release: v2.3.2. Use this last one, please. Apologies for any inconvenience.*\n\n### v2.3\nThis new release contains a bug fix and the latest version of the CSO ontology.\n\nBug Fix: When running in batch mode, the classifier was treating the keyword field as an array instead of a string. In this way, instead of processing keywords (separated by comma), it was processing each single letters, hence inferring wrong topics. This now has been fixed. In addition, if the keyword field is actually an array, the classifier will first 'stringify' it and then process it.\n\nWe also downloaded and packed the latest version of the CSO ontology.\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3355629.svg)](https://doi.org/10.5281/zenodo.3355629)\n\n### v2.2\nIn this version (release v2.2), we (i) updated the requirements needed to run the classifier, (ii) removed all unnecessary warnings, and (iii) enabled multiprocessing. In particular, we removed all useless requirements that were installed in development mode, by cleaning the _requirements.txt_ file. \n\nWhen computing certain research papers, the classifier display warnings raised by the [kneed library](https://pypi.org/project/kneed/). Since the classifier can automatically adapt to such warnings, we decided to hide them and prevent users from being concerned about such an outcome.\n\nThis version of the classifier provides improved **scalability** through multiprocessing. Once the number of workers is set (i.e. num_workers >= 1), each worker will be given a copy of the CSO Classifier with a chunk of the corpus to process. Then, the results will be aggregated once all processes are completed. Please be aware that this function is only available in batch mode. See section [Classifying in batch mode (BM)](#classifying-in-batch-mode-bm) for more details.\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3241490.svg)](https://doi.org/10.5281/zenodo.3241490)\n\n### v2.1\nThis new release (version v2.1) makes the CSO Classifier more scalable. Compared to its previous version (v2.0), the classifier relies on a cached word2vec model which connects the words within the model vocabulary directly with the CSO topics. Thanks to this cache, the classifier is able to quickly retrieve all CSO topics that could be inferred by given tokens, speeding up the processing time. In addition, this cache is lighter (~64M) compared to the actual word2vec model (~366MB), which allows saving additional time at loading time.\n\nThanks to this improvement the CSO Classifier is around 24x faster and can be easily run on a large corpus of scholarly data.\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2689440.svg)](https://doi.org/10.5281/zenodo.2689440)\n\n### v2.0\n\nThe second version (v2.0) implements the CSO Classifier as described in the [about section](#about). It combines the topics of both the syntactic and semantic modules and enriches them with their super-topics. Compared to [v1.0](#v10), it adds a semantic layer that allows generating a more comprehensive result, identifying research topics that are not explicitly available in the metadata. The semantic module relies on a Word2vec model trained on over 4.5M papers in _Computer Science_. [Below](#word-embedding-generation) we show more in detail how we trained such a model. In this version of the classifier, we [pickled](https://docs.python.org/3.6/library/pickle.html) the model to speed up the process of loading into memory (~4.5 times faster).\n\n> Salatino, A.A., Osborne, F., Thanapalasingam, T., Motta, E.: The CSO Classifier: Ontology-Driven Detection of Research Topics in Scholarly Articles. In: TPDL 2019: 23rd International Conference on Theory and Practice of Digital Libraries. Springer. [Read More](http://oro.open.ac.uk/62026/)\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2661834.svg)](https://doi.org/10.5281/zenodo.2661834)\n\n### v1.0\n\nThe first version (v1.0) of the CSO Classifier is an implementation of the syntactic module, which was also previously used to support the semi-automatic annotation of proceedings at Springer Nature [[1]](#references). This classifier aims at syntactically match n-grams (unigrams, bigrams and trigrams) of the input document with concepts within CSO.\n\nMore details about this version of the classifier can be found within: \n> Salatino, A.A., Thanapalasingam, T., Mannocci, A., Osborne, F. and Motta, E. 2018. Classifying Research Papers with the Computer Science Ontology. ISWC-P&D-Industry-BlueSky 2018 (2018). [Read more](http://oro.open.ac.uk/55908/)\n\nDownload from:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2661834.svg)](https://doi.org/10.5281/zenodo.2661834)\n\n## List of Files\n\n* **CSO-Classifier.ipynb**: :page_facing_up: Python notebook for executing the classifier\n* **CSO-Classifier.py**: :page_facing_up: Python script for executing the classifier\n* **images**: :file_folder: folder containing some pictures, e.g., the workflow showed above\n* **cso_classifier**: :file_folder: Folder containing the main functionalities of the classifier\n  * **classifier.py**: :page_facing_up: class that implements the CSO Classifier\n  * **syntacticmodule.py**: :page_facing_up: class that implements the syntactic module\n  * **semanticmodule.py**: :page_facing_up: class that implements the semantic module\n  * **postprocmodule.py**: :page_facing_up:\n  * **paper.py**: :page_facing_up: class that implements the functionalities to operate on papers, such as POS tagger, grammar-based chunk parser\n  * **result.py**: :page_facing_up: class that implements the functionality to operate on the results\n  * **ontology.py**: :page_facing_up: class that implements the functionalities to operate on the ontology: get primary label, get topics and so on\n  * **model.py**: :page_facing_up: class that implements the functionalities to operate on the word2vec model: get similar words and so on\n  * **misc.py**: :page_facing_up: some miscellaneous functionalities\n  * **test.py**: :page_facing_up: some test functionalities\n  * **config.py**: :page_facing_up: class that implements the functionalities to operate on the config file\n  * **config.ini**: :page_facing_up: config file. It contains all information about packaage, ontology and model.\n  * **assets**: :file_folder: Folder containing the word2vec model and CSO\n    * **cso.csv**: :page_facing_up: file containing the Computer Science Ontology in csv\n    * **cso.p**: :page_facing_up: serialised file containing the Computer Science Ontology (pickled)\n    * **cso_graph.p** :page_facing_up: file containing the Computer Science Ontology as an iGraph object\n    * **model.p**: :page_facing_up: the trained word2vec model (pickled)\n    * **token-to-cso-combined.json**: :page_facing_up: file containing the cached word2vec model. This json file contains a dictionary in which each token of the corpus vocabulary, has been mapped with the corresponding CSO topics. Below we explain how this file has been generated.\n\n## Word2vec model and token-to-cso-combined file generation\n\nIn this section, we describe how we generated the word2vec model used within the CSO Classifier and what is the token-to-cso-combined file.\n\n### Word Embedding generation\n\nWe applied the word2vec approach [[2,3]](#references) to a collection of text from the Microsoft Academic Graph (MAG) for generating word embeddings. MAG is a scientific knowledge base and a heterogeneous graph containing scientific publication records, citation relationships, authors, institutions, journals, conferences, and fields of study. It is the largest dataset of scholarly data publicly available, and, as of April 2021, it contains more than 250 million publications.\n\nWe first downloaded titles, and abstracts of 4,654,062 English papers in the field of Computer Science. Then we pre-processed the data by replacing spaces with underscores in all n-grams matching the CSO topic labels (e.g., “digital libraries” became “digital_libraries”) and for frequent bigrams and trigrams (e.g., “highest_accuracies”, “highly_cited_journals”). These frequent n-grams were identified by analysing combinations of words that co-occur together, as suggested in [[2]](#references) and using the parameters showed in Table 2. Indeed, while it is possible to obtain the vector of an n-gram by averaging the embedding vectors of all its words, the resulting representation usually is not as good as the one obtained by considering the n-gram as a single word during the training phase.\n\nFinally, we trained the word2vec model using the parameters provided in Table 3. The parameters were set to these values after testing several combinations.\n\n| min-count  |  threshold |\n|---|---|\n| 5  | 10  |\n\n**Table 2**: Parameters used during the collocation words analysis\n\n\n| method  |  emb. size | window size | min count cutoff |\n|---|---|---|---|\n| skipgram  | 128  |  10 |  10 |\n\n**Table 3**: Parameters used for training the word2vec model.\n\n\nAfter training the model, we obtained a **gensim.models.keyedvectors.Word2VecKeyedVectors** object weighing **366MB**. You can download the model [from here](https://cso.kmi.open.ac.uk/download/model.p).\n\nThe size of the model hindered the performance of the classifier in two ways. Firstly, it required several seconds to be loaded into memory. This was partially fixed by serialising the model file (using python pickle, see version v2.0 of CSO Classifier, ~4.5x faster). Secondly, while processing a document, the classifier needs to retrieve the top 10 similar words for all tokens, and compare them with CSO topics. In performing such an operation, the model would require several seconds, becoming a bottleneck for the classification process.\n\nTo this end, we decided to create a cached model (**token-to-cso-combined.json**) which is a dictionary that directly connects all token available in the vocabulary of the model with the CSO topics. This strategy allows to quickly retrieve all CSO topics that can be inferred by a particular token.\n\n### token-to-cso-combined file\n\nTo generate this file, we collected all the set of words available within the vocabulary of the model. Then iterating on each word, we retrieved its top 10 similar words from the model, and we computed their Levenshtein similarity against all CSO topics. If the similarity was above 0.7, we created a record that stored all CSO topics triggered by the initial word.\n\n## Use the CSO Classifier in other domains of Science\n\nIn order to use the CSO Classifier in other domains of Science, it is necessary to replace the two external sources mentioned in the previous section. In particular, there is a need for a comprehensive ontology or taxonomy of research areas, within the new domain, which will work as a controlled list of research topics. In addition, it is important to train a new word2vec model that fits the language model and the semantic of the terms, in this particular domain. We wrote a blog article on how to integrate knowledge from other fields of Science within the CSO Classifier.\n\nPlease read here for more info: [How to use the CSO Classifier in other domains](https://salatino.org/wp/how-to-use-the-cso-classifier-in-other-domains/)\n\n## How to Cite CSO Classifier\n\nWe kindly ask that any published research making use of the CSO Classifier cites our paper listed below:\n\nSalatino, A.A., Osborne, F., Thanapalasingam, T., Motta, E.: The CSO Classifier: Ontology-Driven Detection of Research Topics in Scholarly Articles. In: TPDL 2019: 23rd International Conference on Theory and Practice of Digital Libraries. Springer.\n\n## License\n\n[Apache 2.0](https://choosealicense.com/licenses/apache-2.0/)\n\n## References\n\n[1] Osborne, F., Salatino, A., Birukou, A. and Motta, E. 2016. Automatic Classification of Springer Nature Proceedings with Smart Topic Miner. The Semantic Web -- ISWC 2016. 9982 LNCS, (2016), 383–399. DOI:https://doi.org/10.1007/978-3-319-46547-0_33\n\n[2] Mikolov, T., Chen, K., Corrado, G. and Dean, J. 2013. Efficient Estimation of Word Representations in Vector Space. (Jan. 2013).\n\n[3] Mikolov, T., Chen, K., Corrado, G. and Dean, J. 2013. Distributed Representations of Words and Phrases and their Compositionality. Advances in neural information processing systems. 3111–3119.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/angelosalatino/cso-classifier",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cso-classifier",
    "package_url": "https://pypi.org/project/cso-classifier/",
    "platform": "",
    "project_url": "https://pypi.org/project/cso-classifier/",
    "project_urls": {
      "Homepage": "https://github.com/angelosalatino/cso-classifier"
    },
    "release_url": "https://pypi.org/project/cso-classifier/3.0/",
    "requires_dist": [
      "click (==7.1.2)",
      "gensim (==3.8.1)",
      "hurry.filesize (==0.9)",
      "kneed (==0.3.1)",
      "nltk (==3.6.2)",
      "python-igraph (==0.9.1)",
      "python-Levenshtein (==0.12.2)",
      "numpy (>=1.19.5)",
      "requests (==2.25.1)",
      "spacy (==3.0.5)",
      "strsimpy (==0.2.0)",
      "update-checker (==0.18.0)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A light-weight Python app for classifying scientific documents with the topics from the Computer Science Ontology (https://cso.kmi.open.ac.uk/home).",
    "version": "3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10899115,
  "releases": {
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd32b4138a2b3721844c7f6d2bb764951c47ed17663859330ecae86daf589e5",
          "md5": "087237b64f0bb616df14ea0b3e6995c6",
          "sha256": "37a08285eea0076432efcdaa26f16ca2cbdfd71a8772668b687e5d4ae43621e2"
        },
        "downloads": -1,
        "filename": "cso_classifier-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "087237b64f0bb616df14ea0b3e6995c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14144939,
        "upload_time": "2019-06-05T17:11:18",
        "upload_time_iso_8601": "2019-06-05T17:11:18.223654Z",
        "url": "https://files.pythonhosted.org/packages/9d/d3/2b4138a2b3721844c7f6d2bb764951c47ed17663859330ecae86daf589e5/cso_classifier-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "899fed19b853a5bb7762d1ab655ba4e539432d9e7eeb5b942d67b7c6033fbcb6",
          "md5": "05b6712754d12d0710a83b2ce9f29f79",
          "sha256": "6560f5801bf8d7b508a5f81f46581c160898facdd6b8d2cb354c857ad9287045"
        },
        "downloads": -1,
        "filename": "cso-classifier-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05b6712754d12d0710a83b2ce9f29f79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13884687,
        "upload_time": "2019-06-05T17:11:25",
        "upload_time_iso_8601": "2019-06-05T17:11:25.618269Z",
        "url": "https://files.pythonhosted.org/packages/89/9f/ed19b853a5bb7762d1ab655ba4e539432d9e7eeb5b942d67b7c6033fbcb6/cso-classifier-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce445b15265ce78cb6f048cdc7f4c54ab5412d13b5b86b51383530edf4d8a2c0",
          "md5": "01f61dd0a0729d80b1330736c14207e8",
          "sha256": "9acdf88b3398f9d084201d21d9077a4b6af0fb16484b3b759d1802f215908ca8"
        },
        "downloads": -1,
        "filename": "cso_classifier-2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01f61dd0a0729d80b1330736c14207e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14146192,
        "upload_time": "2019-06-07T15:59:02",
        "upload_time_iso_8601": "2019-06-07T15:59:02.747052Z",
        "url": "https://files.pythonhosted.org/packages/ce/44/5b15265ce78cb6f048cdc7f4c54ab5412d13b5b86b51383530edf4d8a2c0/cso_classifier-2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c61a2dee459e22befba4767934c1704f4de102866a8f9ba72eb5b96a771d86d",
          "md5": "b9008e778aac879d090dcf3db85fb579",
          "sha256": "11cbcda214bb296f64dbe8ec23d624db449ac5b5919cce295fcbd4fc3ee3b2a4"
        },
        "downloads": -1,
        "filename": "cso-classifier-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b9008e778aac879d090dcf3db85fb579",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13886341,
        "upload_time": "2019-06-07T15:59:11",
        "upload_time_iso_8601": "2019-06-07T15:59:11.915155Z",
        "url": "https://files.pythonhosted.org/packages/9c/61/a2dee459e22befba4767934c1704f4de102866a8f9ba72eb5b96a771d86d/cso-classifier-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f23a24b3d3d2d8bc5b41329523862dee520f8a7a34781adbd635d8bb1f40e4",
          "md5": "58941f6dc81e8405027a7b47c8643e22",
          "sha256": "cb07178a1fda64b999a9062252ed68e2925a1cf2865cbe07eb9b1d526794d21b"
        },
        "downloads": -1,
        "filename": "cso_classifier-2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58941f6dc81e8405027a7b47c8643e22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14148769,
        "upload_time": "2019-07-31T14:49:01",
        "upload_time_iso_8601": "2019-07-31T14:49:01.134793Z",
        "url": "https://files.pythonhosted.org/packages/c0/f2/3a24b3d3d2d8bc5b41329523862dee520f8a7a34781adbd635d8bb1f40e4/cso_classifier-2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81ed67214eca7b7b04d16791f7620d1e82953c566f77bdbb3358c256c00615c4",
          "md5": "43d102d3347bd521f842cf1987b150f9",
          "sha256": "33596cf9765158572b31c4022269a1af7c4d3f23dbd843c8287eb9321a86018b"
        },
        "downloads": -1,
        "filename": "cso-classifier-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "43d102d3347bd521f842cf1987b150f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13889684,
        "upload_time": "2019-07-31T14:49:07",
        "upload_time_iso_8601": "2019-07-31T14:49:07.454007Z",
        "url": "https://files.pythonhosted.org/packages/81/ed/67214eca7b7b04d16791f7620d1e82953c566f77bdbb3358c256c00615c4/cso-classifier-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17a89e4e242c4f6d4b6fe55bb3de56fedf065e7dcb2dd8008c46a9540035657f",
          "md5": "f2f2e0b3db98df91f8a52ee70beac72b",
          "sha256": "bb002c8d0e320c8a91bbec7ef3c0899c8bed1b9ce1db9f4aad16f81a23901eff"
        },
        "downloads": -1,
        "filename": "cso_classifier-2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2f2e0b3db98df91f8a52ee70beac72b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14148856,
        "upload_time": "2019-08-01T10:58:24",
        "upload_time_iso_8601": "2019-08-01T10:58:24.046206Z",
        "url": "https://files.pythonhosted.org/packages/17/a8/9e4e242c4f6d4b6fe55bb3de56fedf065e7dcb2dd8008c46a9540035657f/cso_classifier-2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30aba3a882e0c420bd5665c4058b0c852c90722ef872825a13d30528086b7b20",
          "md5": "bd6107a2c70743ff7a096b7b199a8b78",
          "sha256": "4453bc03824217b8411dc95b27c28046d7eb247fcfa650323d17d3fbdf5432c9"
        },
        "downloads": -1,
        "filename": "cso_classifier-2.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd6107a2c70743ff7a096b7b199a8b78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14149038,
        "upload_time": "2019-08-01T11:17:30",
        "upload_time_iso_8601": "2019-08-01T11:17:30.908960Z",
        "url": "https://files.pythonhosted.org/packages/30/ab/a3a882e0c420bd5665c4058b0c852c90722ef872825a13d30528086b7b20/cso_classifier-2.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d815c03c6bfaff295a162f4752335ea7bbd0422b4be803f4a2ced4c0860b8c0e",
          "md5": "7a7b15ab43bf17986bd468031578dc6e",
          "sha256": "59a09e7a5e2f0823611166434feb5f9c471c1a9bdd77bc44c8d8036e52e73a29"
        },
        "downloads": -1,
        "filename": "cso-classifier-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a7b15ab43bf17986bd468031578dc6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13889955,
        "upload_time": "2019-08-01T11:17:37",
        "upload_time_iso_8601": "2019-08-01T11:17:37.407005Z",
        "url": "https://files.pythonhosted.org/packages/d8/15/c03c6bfaff295a162f4752335ea7bbd0422b4be803f4a2ced4c0860b8c0e/cso-classifier-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1249c01370f8950b9324e787d38b5f13441078e7dd620c0c9d6c79276d38712a",
          "md5": "c05878b93758a9e992c6c0b4d74e997f",
          "sha256": "f05f60e8eaf0a65c1f40c5795879d528fd867b88726775df855660a8255ef700"
        },
        "downloads": -1,
        "filename": "cso_classifier-3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c05878b93758a9e992c6c0b4d74e997f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 43860,
        "upload_time": "2021-07-13T16:34:31",
        "upload_time_iso_8601": "2021-07-13T16:34:31.108380Z",
        "url": "https://files.pythonhosted.org/packages/12/49/c01370f8950b9324e787d38b5f13441078e7dd620c0c9d6c79276d38712a/cso_classifier-3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d56b2da540062cabd9607b04ebefd015d56153f1891e3d7cc3646da08cf0697",
          "md5": "a004a0434b77867b2a2d143e0f5ba5c6",
          "sha256": "d45dc309e8cf900bf26e8290c15a5de10251d4289fd3e93be2353dadabdc8f0a"
        },
        "downloads": -1,
        "filename": "cso-classifier-3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a004a0434b77867b2a2d143e0f5ba5c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 57524,
        "upload_time": "2021-07-13T16:34:33",
        "upload_time_iso_8601": "2021-07-13T16:34:33.247065Z",
        "url": "https://files.pythonhosted.org/packages/6d/56/b2da540062cabd9607b04ebefd015d56153f1891e3d7cc3646da08cf0697/cso-classifier-3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1249c01370f8950b9324e787d38b5f13441078e7dd620c0c9d6c79276d38712a",
        "md5": "c05878b93758a9e992c6c0b4d74e997f",
        "sha256": "f05f60e8eaf0a65c1f40c5795879d528fd867b88726775df855660a8255ef700"
      },
      "downloads": -1,
      "filename": "cso_classifier-3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c05878b93758a9e992c6c0b4d74e997f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 43860,
      "upload_time": "2021-07-13T16:34:31",
      "upload_time_iso_8601": "2021-07-13T16:34:31.108380Z",
      "url": "https://files.pythonhosted.org/packages/12/49/c01370f8950b9324e787d38b5f13441078e7dd620c0c9d6c79276d38712a/cso_classifier-3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d56b2da540062cabd9607b04ebefd015d56153f1891e3d7cc3646da08cf0697",
        "md5": "a004a0434b77867b2a2d143e0f5ba5c6",
        "sha256": "d45dc309e8cf900bf26e8290c15a5de10251d4289fd3e93be2353dadabdc8f0a"
      },
      "downloads": -1,
      "filename": "cso-classifier-3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a004a0434b77867b2a2d143e0f5ba5c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 57524,
      "upload_time": "2021-07-13T16:34:33",
      "upload_time_iso_8601": "2021-07-13T16:34:33.247065Z",
      "url": "https://files.pythonhosted.org/packages/6d/56/b2da540062cabd9607b04ebefd015d56153f1891e3d7cc3646da08cf0697/cso-classifier-3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}