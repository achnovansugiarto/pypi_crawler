{
  "info": {
    "author": "Gaffer Fitch",
    "author_email": "relations@gaf3.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# relations-sql\n\nModule for interacting with Relations and SQL\n\nThis is an abstract library used by relations-mysql, relations-postgresql, relations-sqlite, etc. to generate queries specific to those databases.\n\nBut folks may find it useful for their usages. So here's some of the main unittests so you get the general idea.\n\nI'll probably switch this to ANSI SQL? I dunno. Not sure how useful that'll be.\n\n# import\n\nAll the classes are capitalized to prevent collisions with reserved keywords. Plus it looks like actual SQL. So you can do a full import without worries.\n\n```python\nfrom relations_sql import *\n```\n\n# select\n\n```python\nquery = SELECT(\"*\").OPTIONS(\"FAST\").FROM(\"people\").WHERE(stuff__gt=\"things\")\n\nquery.generate()\nself.assertEqual(query.sql, \"SELECT FAST * FROM `people` WHERE `stuff`>%s\")\nself.assertEqual(query.args, [\"things\"])\n\nquery = SELECT(\n    \"*\"\n).FROM(\n    people=SELECT(\n        \"a.b.c\"\n    ).FROM(\n        \"d.e\"\n    )\n).WHERE(\n    stuff__in=SELECT(\n        \"f\"\n    ).FROM(\n        \"g\"\n    ).WHERE(\n        things__a__0___1____2_____3__gt=5\n    )\n)\n\nquery.generate()\nself.assertEqual(query.sql,\n    \"SELECT * FROM (SELECT `a`.`b`.`c` FROM `d`.`e`) \"\n    \"AS `people` WHERE `stuff` IN \"\n    \"(SELECT `f` FROM `g` WHERE `things`#>>%s>JSON(%s))\"\n)\nself.assertEqual(query.args, ['$.\"a\"[0][-1].\"2\".\"-3\"', '5'])\n\nquery.GROUP_BY(\"fee\", \"fie\").HAVING(foe=\"fum\").ORDER_BY(\"yin\", yang=DESC).LIMIT(1, 2)\n\nquery.generate()\nself.assertEqual(query.sql,\n    \"SELECT * FROM (SELECT `a`.`b`.`c` FROM `d`.`e`) \"\n    \"AS `people` WHERE `stuff` IN \"\n    \"(SELECT `f` FROM `g` WHERE `things`#>>%s>JSON(%s)) \"\n    \"GROUP BY `fee`,`fie` HAVING `foe`=%s \"\n    \"ORDER BY `yin`,`yang` DESC LIMIT %s,%s\"\n)\nself.assertEqual(query.args, ['$.\"a\"[0][-1].\"2\".\"-3\"', '5', 'fum', 1, 2])\n```\n\n# insert\n\n```python\nquery = INSERT(\"people\").VALUES(stuff=1, things=2).VALUES(3, 4)\n\nquery.generate()\nself.assertEqual(query.sql,\"INSERT INTO `people` (`stuff`,`things`) VALUES (%s,%s),(%s,%s)\")\nself.assertEqual(query.args, [1, 2, 3, 4])\n\nquery = INSERT(\"people\").OPTIONS(\"FAST\")\nquery.SELECT(\"stuff\").FROM(\"things\")\n\nquery.generate()\nself.assertEqual(query.sql,\"INSERT FAST INTO `people` SELECT `stuff` FROM `things`\")\nself.assertEqual(query.args, [])\n\nquery = INSERT(\"people\").VALUES(stuff=1, things=2).VALUES(3, 4)\nquery.SELECT(\"stuff\").FROM(\"things\")\n\nself.assertRaisesRegex(relations_sql.SQLError, \"set VALUES or SELECT but not both\", query.generate)\n```\n\n# update\n\n```python\nquery = UPDATE(\"people\").SET(stuff=\"things\").WHERE(things=\"stuff\")\nquery.OPTIONS(\"FAST\").ORDER_BY(\"yin\", yang=DESC).LIMIT(5)\n\nquery.generate()\nself.assertEqual(query.sql, \"UPDATE FAST `people` SET `stuff`=%s WHERE `things`=%s ORDER BY `yin`,`yang` DESC LIMIT %s\")\nself.assertEqual(query.args, [\"things\", \"stuff\", 5])\n\nquery.LIMIT(10)\n\nself.assertRaisesRegex(relations_sql.SQLError, \"LIMIT can only be total\", query.generate)\n```\n\n# delete\n\n```python\nquery = DELETE(\"people\").WHERE(things=\"stuff\")\nquery.OPTIONS(\"FAST\").ORDER_BY(\"yin\", yang=DESC).LIMIT(5)\n\nquery.generate()\nself.assertEqual(query.sql, \"DELETE FAST FROM `people` WHERE `things`=%s ORDER BY `yin`,`yang` DESC LIMIT %s\")\nself.assertEqual(query.args, [\"stuff\", 5])\n\nquery.LIMIT(10)\n\nself.assertRaisesRegex(relations_sql.SQLError, \"LIMIT can only be total\", query.generate)\n```\n\n# inherit\n\nThe unittest demonstrate how to abstract through inheritance. Classes know which other classes they'll need through class attributes.\n\nThe unittests are where the backticks escaping comes from. It's not a default or anything.\n\nIn `test_clause.py`\n\n```python\nclass OPTIONS(relations_sql.OPTIONS):\n\n    pass\n\n\nclass FIELDS(relations_sql.FIELDS):\n\n    ARGS = test_expression.FIELD\n    KWARG = test_expression.FIELD\n    KWARGS = test_expression.AS\n```\n\nIn `test_query.py`\n\n```python\nclass SELECT(relations_sql.SELECT):\n\n    CLAUSES = collections.OrderedDict([\n        (\"OPTIONS\", test_clause.OPTIONS),\n        (\"FIELDS\", test_clause.FIELDS),\n        (\"FROM\", test_clause.FROM),\n        (\"WHERE\", test_clause.WHERE),\n        (\"GROUP_BY\", test_clause.GROUP_BY),\n        (\"HAVING\", test_clause.HAVING),\n        (\"ORDER_BY\", test_clause.ORDER_BY),\n        (\"LIMIT\", test_clause.LIMIT)\n    ])\n\n\nclass INSERT(relations_sql.INSERT):\n\n    CLAUSES = collections.OrderedDict([\n        (\"OPTIONS\", test_clause.OPTIONS),\n        (\"TABLE\", test_expression.TABLE),\n        (\"FIELDS\", test_expression.NAMES),\n        (\"VALUES\", test_clause.VALUES),\n        (\"SELECT\", SELECT)\n    ])\n\n\nclass UPDATE(relations_sql.UPDATE):\n\n    CLAUSES = collections.OrderedDict([\n        (\"OPTIONS\", test_clause.OPTIONS),\n        (\"TABLE\", test_expression.TABLE),\n        (\"SET\", test_clause.SET),\n        (\"WHERE\", test_clause.WHERE),\n        (\"ORDER_BY\", test_clause.ORDER_BY),\n        (\"LIMIT\", test_clause.LIMIT)\n    ])\n\n\nclass DELETE(relations_sql.DELETE):\n\n    CLAUSES = collections.OrderedDict([\n        (\"OPTIONS\", test_clause.OPTIONS),\n        (\"TABLE\", test_expression.TABLE),\n        (\"WHERE\", test_clause.WHERE),\n        (\"ORDER_BY\", test_clause.ORDER_BY),\n        (\"LIMIT\", test_clause.LIMIT)\n    ])\n```\n\nIn the case of query classes, the OrderedDict's there also specific the order in which clauses are generated and appended. So it's pretty easy to extend.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/relations-dil/python-relations-sql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "relations-sql",
    "package_url": "https://pypi.org/project/relations-sql/",
    "platform": null,
    "project_url": "https://pypi.org/project/relations-sql/",
    "project_urls": {
      "Homepage": "https://github.com/relations-dil/python-relations-sql"
    },
    "release_url": "https://pypi.org/project/relations-sql/0.6.7/",
    "requires_dist": [
      "overscore (==0.1.1)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.6.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15892619,
  "releases": {
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a33abd09dda27aa7326531bccdb5393cb5318e56f81547e51eeb1a784d5272a",
          "md5": "7fb25c9483a96860d3dabb769584f7af",
          "sha256": "7fe1a8d49d0571e812276833aeeff7c1368d11260b6067d65f0df657f7b9542c"
        },
        "downloads": -1,
        "filename": "relations_sql-0.6.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fb25c9483a96860d3dabb769584f7af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18644,
        "upload_time": "2022-08-05T18:08:16",
        "upload_time_iso_8601": "2022-08-05T18:08:16.843202Z",
        "url": "https://files.pythonhosted.org/packages/8a/33/abd09dda27aa7326531bccdb5393cb5318e56f81547e51eeb1a784d5272a/relations_sql-0.6.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5eb2d4a746fe22e0166ac7b1e7e12eb6d5b9a0b7e76394c34a2f7c2b7f6be84",
          "md5": "5c56fedbf22b37bfea1ccac2c30a48ac",
          "sha256": "96db65566b05973711314851ca23f845ca18a8240aed3f3128e7db9c38f27943"
        },
        "downloads": -1,
        "filename": "relations-sql-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5c56fedbf22b37bfea1ccac2c30a48ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15648,
        "upload_time": "2022-08-05T18:08:18",
        "upload_time_iso_8601": "2022-08-05T18:08:18.573572Z",
        "url": "https://files.pythonhosted.org/packages/b5/eb/2d4a746fe22e0166ac7b1e7e12eb6d5b9a0b7e76394c34a2f7c2b7f6be84/relations-sql-0.6.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3db540853ceefbf3a35e4dc215187780e310f49494c4c54e0ee36e9d5963ea4d",
          "md5": "7ffe714741d0d07d8a1025dea6757633",
          "sha256": "b23aef1b4341d9c232f92c9d774dede22272a240818646494412299232d7a0d9"
        },
        "downloads": -1,
        "filename": "relations_sql-0.6.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ffe714741d0d07d8a1025dea6757633",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18652,
        "upload_time": "2022-11-25T17:48:06",
        "upload_time_iso_8601": "2022-11-25T17:48:06.510856Z",
        "url": "https://files.pythonhosted.org/packages/3d/b5/40853ceefbf3a35e4dc215187780e310f49494c4c54e0ee36e9d5963ea4d/relations_sql-0.6.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "849b1ac4561b1b9c6607cee92db6cfbae49584167c5b3522b19ee7616bd245c8",
          "md5": "c68ba6f5ac2ed523924b66e6800f0254",
          "sha256": "c9ff70ba031b8aa68e12e15b6fccb9b2c5b7c584b6754b34cfbf51eb38555c60"
        },
        "downloads": -1,
        "filename": "relations-sql-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c68ba6f5ac2ed523924b66e6800f0254",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15669,
        "upload_time": "2022-11-25T17:48:08",
        "upload_time_iso_8601": "2022-11-25T17:48:08.396669Z",
        "url": "https://files.pythonhosted.org/packages/84/9b/1ac4561b1b9c6607cee92db6cfbae49584167c5b3522b19ee7616bd245c8/relations-sql-0.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3db540853ceefbf3a35e4dc215187780e310f49494c4c54e0ee36e9d5963ea4d",
        "md5": "7ffe714741d0d07d8a1025dea6757633",
        "sha256": "b23aef1b4341d9c232f92c9d774dede22272a240818646494412299232d7a0d9"
      },
      "downloads": -1,
      "filename": "relations_sql-0.6.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7ffe714741d0d07d8a1025dea6757633",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18652,
      "upload_time": "2022-11-25T17:48:06",
      "upload_time_iso_8601": "2022-11-25T17:48:06.510856Z",
      "url": "https://files.pythonhosted.org/packages/3d/b5/40853ceefbf3a35e4dc215187780e310f49494c4c54e0ee36e9d5963ea4d/relations_sql-0.6.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "849b1ac4561b1b9c6607cee92db6cfbae49584167c5b3522b19ee7616bd245c8",
        "md5": "c68ba6f5ac2ed523924b66e6800f0254",
        "sha256": "c9ff70ba031b8aa68e12e15b6fccb9b2c5b7c584b6754b34cfbf51eb38555c60"
      },
      "downloads": -1,
      "filename": "relations-sql-0.6.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c68ba6f5ac2ed523924b66e6800f0254",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15669,
      "upload_time": "2022-11-25T17:48:08",
      "upload_time_iso_8601": "2022-11-25T17:48:08.396669Z",
      "url": "https://files.pythonhosted.org/packages/84/9b/1ac4561b1b9c6607cee92db6cfbae49584167c5b3522b19ee7616bd245c8/relations-sql-0.6.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}