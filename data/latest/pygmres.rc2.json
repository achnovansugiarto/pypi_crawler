{
  "info": {
    "author": "Johannes Blaschke",
    "author_email": "jpblaschke@lbl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyGMRES\n\nAn all-python implementation of the GMRES algorithm. Numba acceleration is\navailable (and enabled by default).\n\n## Using PyGMRES\n\nThe `GMRES` solves the linear `b = A(x)` using:\n```\nPyGMRES.gmres.GMRES(A, b, x0, e, max_iter, restart=None, debug=False)\n```\nwhere `A` is a linear operator, `x0` is the initial guess for the solution `x`,\n`e > |A(x) - b|` is the tolerance, `max_iter` is the maximum number of\niterations -- if `GMRES` does not converge on a solution, it is stopped after\n`max_iter`.\n\nThe PyGMRES solver `GMRES` can be run in two modes:\n1. Regular mode: when `restart = None` the full Krylov subspace is used to solve\nthe problem. This mode is guaranteed to find a solution (if one exists), but\nscales poorly.\n2. Restarted mode: when `restart = N` then the Krylov subspace used by the\nsolver is rebuilt every `N` steps. This mode is not guaranteed to find a\nsolution for certain intial conditions, but scales well.\n\n## Discrete Laplace Operators\n\nPyGMRES provides implementations of the 1D and 2D discrete laplace operators in\nthe `PyGMRES.linop` module:\n1. 1D laplacian: `laplace_1d`, `laplace_1d_dirichlet`, `laplace_1d_constextrap`,\nand `laplace_1d_extrap` which provide periodic, dirichlet, constant\nextrapolation, and linear extrapolation respectively.\n2. 2D laplacian: `laplace_2d`, `laplace_2d_dirichlet`, `laplace_2d_constextrap`,\nand `laplace_2d_extrap` which provide periodic, dirichlet, constant\nextrapolation, and linear extrapolation respectively.\n\n## Numba Compiler\n\nThe `PyGMRES.compiler` module provides the standard Numba JIT compiler\ndecorator. All operators and the GMRES solver are compiled when their host\nmodules are first imported. The compiler can be enabled, or disabled using the\n`PyGMRES.compiler.RC` class. For example this will enable compilation (on by\ndefault):\n\n```python\nfrom PyGMRES.compiler import RC\nRC().enable_numba = True\n```\n\nAnce any module compiles any of its functions, `RC().enable_numba` cannot be\nchanged. `RC()` is intended for those situations where Numba cannot be installed\non a target system. If Numba is enabled, the originial (non-compiled) functions\nare avaialable using `get_undecorated_fn(name)`, for example:\n\n```python\nfrom PyGMRES.compiler import get_undecorated_fn\nlaplace_1d_uncompiled = get_undecorated_fn(\"laplace_1d_dirichlet\")\n```\n\n## Helper Functions\n\nPyGMRES preovides helper functions for common tasks\n### Computing the Residuals\n\n`PyGMRES.linop.resid` computes the residual `A(x) - b`, for example\n\n```python\nfrom PyGMRES.linop import laplace_2d_extrap, resid\nr_laplace_2d = resid(A, x, b)\n```\n\n## Example\n\nThe following code solved the 2D Laplace equation with von Neumann (constant\nderivative) boundary conditions, along with the residuals of each iteration:\n\n```python\nimport numpy  as np\nfrom PyGMRES.gmres import GMRES\nfrom PyGMRES.linop import laplace_2d_extrap, resid\n\n# Use odd dimension because we want to put a point-source in the center.\nNx = 81\nNy = 81\n\n# Set up the RHS\nb = np.zeros((Nx, Ny))\nb[int(Nx/2), int(Ny/2)] = 1\nx0 = np.zeros_like(b)\n\n# Tolerance of the funal results\ntol = 1e-10\n# Note: here we chose nmax_iter to be << N[x,y] -- if not, then this is\n# basically the non-restarted version of GMRES\nnmax_iter = 10\nrestart   = 64\n# Run GMRES in debug mode => intermediate solutions are returned as an array\nx_laplace_2d = GMRES(\n    laplace_2d_extrap, b, x0, tol, nmax_iter, restart=restart, debug=True\n)\n\n# Compute the residuals\nr_laplace_2d = resid(laplace_2d_extrap, x_laplace_2d, b)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ML4FnP/PyGMRES",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyGMRES",
    "package_url": "https://pypi.org/project/PyGMRES/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyGMRES/",
    "project_urls": {
      "Homepage": "https://github.com/ML4FnP/PyGMRES"
    },
    "release_url": "https://pypi.org/project/PyGMRES/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A python implementation of the GMRES algorithm",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13422197,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8190418a3350cf2e3115540c9352243f7ea28f567b6bd97b753693103c6f285e",
          "md5": "4cc1d60b7be30e7efdad315b81f36866",
          "sha256": "efa8cd9dfb737db101a2e288828e5a6a890da047ae2ae51026ab12629788883c"
        },
        "downloads": -1,
        "filename": "PyGMRES-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4cc1d60b7be30e7efdad315b81f36866",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9586,
        "upload_time": "2022-04-05T23:49:29",
        "upload_time_iso_8601": "2022-04-05T23:49:29.106820Z",
        "url": "https://files.pythonhosted.org/packages/81/90/418a3350cf2e3115540c9352243f7ea28f567b6bd97b753693103c6f285e/PyGMRES-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ef2a0289115933c140d3418279cc26d10aab4657084250066a8d976858b5ef",
          "md5": "7773770804b56fc4913a79ca7ca9c1f5",
          "sha256": "2033561fcf70fd44bbd9325d5f9a01443c3115419e98e9c7ee1690a62d6e024d"
        },
        "downloads": -1,
        "filename": "PyGMRES-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7773770804b56fc4913a79ca7ca9c1f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9617,
        "upload_time": "2022-04-06T00:00:45",
        "upload_time_iso_8601": "2022-04-06T00:00:45.785552Z",
        "url": "https://files.pythonhosted.org/packages/d9/ef/2a0289115933c140d3418279cc26d10aab4657084250066a8d976858b5ef/PyGMRES-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9ef2a0289115933c140d3418279cc26d10aab4657084250066a8d976858b5ef",
        "md5": "7773770804b56fc4913a79ca7ca9c1f5",
        "sha256": "2033561fcf70fd44bbd9325d5f9a01443c3115419e98e9c7ee1690a62d6e024d"
      },
      "downloads": -1,
      "filename": "PyGMRES-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7773770804b56fc4913a79ca7ca9c1f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9617,
      "upload_time": "2022-04-06T00:00:45",
      "upload_time_iso_8601": "2022-04-06T00:00:45.785552Z",
      "url": "https://files.pythonhosted.org/packages/d9/ef/2a0289115933c140d3418279cc26d10aab4657084250066a8d976858b5ef/PyGMRES-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}