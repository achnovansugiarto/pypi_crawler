{
  "info": {
    "author": "1QBit",
    "author_email": "support@1qbit.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "\n# Coherent Continous-Variable Machine Simulators\n\n[![License: AGPL v3](https://img.shields.io/badge/License-AGPL%20v3-green.svg)](https://www.gnu.org/licenses/agpl-3.0)\n[![Maintainer](https://img.shields.io/badge/Maintainer-1QBit-blue)](http://1qbit.com/)\n[![Paper](https://img.shields.io/badge/Paper-arxiv-red)](https://arxiv.org/abs/2209.04415)\n[![Docs](https://img.shields.io/badge/Docs-Link-yellow)](https://urban-chainsaw-9k39nm4.pages.github.io/index.html)\n\nThis software package includes solvers for continuous optimization problems. The solvers are simulators of coherent continuous-variable machines (CCVM), which are novel coherent network computing architectures based on NTT Research’s coherent Ising machines (CIM). In CCVMs, the physical properties of optical pulses (e.g., mean-field quadrature amplitudes and phase) represent the continuous variables of a given optimization problem. Various features of CCVMs can be used along with programming techniques to implement the constraints imposed by such an optimization problem. Included are methods for solving box-constrained quadratic programming (BoxQP) problems using CCVM simulators by mapping the variables of the problems into the random variables of CCVMs.\n\n## Table of Contents\n\n0. [Requirements](#requirements)\n1. [Quickstart](#quickstart)\n2. [Usage](#usage)\n3. [Documentation](#docs)\n    - [BoxQP Problem Definition](ccvm/problem_classes/README.md)\n    - [ccvmplotlib](ccvm/ccvmplotlib/README.md)\n4. [Contributing](#contributing)\n5. [References](#references)\n6. [License](#license)\n\n## Requirements\n\n- Python (supported version: 3.10)\n\n### Supported operating systems\n\n- macOS (Monterey, Big Sur)\n- Ubuntu (20.04)\n\n## Quickstart\n\n\n1. Once you have cloned the repository, install the package using `pip`.\n```\n pip install ccvm-simulators\n```\n\n2. Go into `examples/` and run the demo scripts.\n    - `ccvm_boxqp.py`: Solve a BoxQP problem using a CCVM simulator, w/o plotting\n    - `ccvm_boxqp_plot.py`: Solve a BoxQP problem using a CCVM simulator, w/ time-to-solution (TTS) plotting\n\n3. View the generated plot.\n    - The `ccvm_boxqp_plot.py` script solves a single problem instance, and will create an image of the resulting TTS plot in a `plots/` directory. The resulting output image, `DL-CCVM_TTS_cpu_plot.png`, will look something like this:\n\n<p align=\"center\">\n    <img src=\"ccvm/ccvmplotlib/images/single_instance_TTS_plot.png\" width=\"250\" >\n</p>\n\n### Extending the Example\n\n4. Plotting larger datasets\n    - The `ccvm_boxqp_plot.py` script is a toy example that plots the TTS for only a single problem instance.\n    - It can be extended to solve multiple problems over a range of problem sizes.\n    - When solution metadata is saved for multiple problems, the graph becomes more informative, for example:\n\n<p align=\"center\">\n    <img src=\"ccvm/ccvmplotlib/images/tts_plot_example.png\" width=\"250\" >\n</p>\n\n\n5. Other types of plots\n    - `ccvmplotlib` can also plot the success probability data, for example:\n\n<p align=\"center\">\n    <img src=\"ccvm/ccvmplotlib/images/success_prob_plot_example.png\" width=\"250\">\n</p>\n\n## Usage\n\n### Solving a BoxQP Problem\n\n##### 1. Import Modules\n\n```python\nfrom ccvm_simulators.problem_classes.boxqp import ProblemInstance\nfrom ccvm_simulators.solvers import DLSolver\n```\n\n##### 2. Define a Solver\n\n```python\nsolver = DLSolver(device=\"cpu\", batch_size=100)  # or \"cuda\"\nsolver.parameter_key = {\n    20: {\"pump\": 2.0, \"lr\": 0.005, \"iterations\": 15000, \"noise_ratio\": 10},\n}\n```\n\n##### 3. Load a Problem Instance\n\n```python\nboxqp_instance = ProblemInstance(\n    instance_type=\"test\",\n    file_path=\"./examples/test_instances/test020-100-10.in\",\n    device=solver.device,\n)\n```\n\n##### 4. Scale the Coefficients\nThe BoxQP problem matrix Q and vector V are normalized to obtain a uniform\nperformance across different problem sizes and densities. The ideal range depends on the\nsolver. For best results, Q should be passed to the solver's `get_scaling_factor()`\nmethod to determine the best scaling value for the problem–solver combination.\n\n```python\nboxqp_instance.scale_coefs(solver.get_scaling_factor(boxqp_instance.q_matrix))\n```\n\n##### 5. Solve the Problem Instance\n\n```python\nsolution = solver.solve(\n    instance=boxqp_instance,\n    post_processor=None,\n)\n\nprint(f\"The best known solution to this problem is {solution.optimal_value}\")\n# The best known solution to this problem is 799.560976\n\nprint(f\"The best objective value found by the solver was {solution.best_objective_value}\")\n# The best objective value found by the solver was 798.1630859375\n\nprint(f\"The solving process took {solution.solve_time} seconds\")\n# The solving process took 8.949262142181396 seconds\n```\n\n## Documentation\n\nThe package documentation can be found [here](https://urban-chainsaw-9k39nm4.pages.github.io/index.html).\n\n* TODO: Update with public link\n\nAdditional links:\n- Problem definition: [BoxQP problem class](ccvm/problem_classes/README.md)\n- Plotting library: [ccvmplotlib](ccvm/ccvmplotlib/README.md)\n\n\n## Contributing\n\nWe appreciate your pull requests and welcome opportunities to discuss new ideas. Check out our [contribution guide](CONTRIBUTING.md) and feel free to improve the `ccvm_simulators` package. For major changes, please open an issue first to discuss any suggestions for changes you might have.\n\nThank you for considering making a  contribution to our project! We appreciate your help and support.\n\n\n## References\n\nThis repository contains architectures and simulators presented in the paper [\"Non-convex Quadratic Programming Using Coherent Optical Networks\"](https://arxiv.org/abs/2209.04415) by Farhad Khosravi, Ugur Yildiz, Artur Scherer, and Pooya Ronagh.\n\n\n## License\n\n[APGLv3](https://github.com/1QB-Information-Technologies/ccvm/blob/main/LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/1QB-Information-Technologies/ccvm",
    "keywords": "",
    "license": "GNU Affero General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ccvm-simulators",
    "package_url": "https://pypi.org/project/ccvm-simulators/",
    "platform": null,
    "project_url": "https://pypi.org/project/ccvm-simulators/",
    "project_urls": {
      "Homepage": "https://github.com/1QB-Information-Technologies/ccvm"
    },
    "release_url": "https://pypi.org/project/ccvm-simulators/0.1.2/",
    "requires_dist": [
      "setuptools (==66.0.0)",
      "future (==0.18.3)",
      "matplotlib (==3.6.3)",
      "numpy (==1.24.1)",
      "pandas (==1.5.2)",
      "pytest (==7.2.0)",
      "scipy (==1.10.0)",
      "torch (==1.13.1)",
      "json-stream (==1.5.2)",
      "tqdm (==4.64.1)",
      "xmlrunner (==1.7.7)"
    ],
    "requires_python": "",
    "summary": "Solve continuous non-convex optimization problems with CCVM architectures and simulators",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17230112,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c5d4774af29051d0767240e3c3141581681005edb62d7fc788b4a8d6d4ea7cb",
          "md5": "55c3174305287ad7c48edce1fd97ec0e",
          "sha256": "b6c25fd385a5c4181fbf8353d3a67148cb1f57f04ab67491d0029e7b56f7ca63"
        },
        "downloads": -1,
        "filename": "ccvm_simulators-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55c3174305287ad7c48edce1fd97ec0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 129381,
        "upload_time": "2023-03-09T22:26:49",
        "upload_time_iso_8601": "2023-03-09T22:26:49.993902Z",
        "url": "https://files.pythonhosted.org/packages/1c/5d/4774af29051d0767240e3c3141581681005edb62d7fc788b4a8d6d4ea7cb/ccvm_simulators-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c5d4774af29051d0767240e3c3141581681005edb62d7fc788b4a8d6d4ea7cb",
        "md5": "55c3174305287ad7c48edce1fd97ec0e",
        "sha256": "b6c25fd385a5c4181fbf8353d3a67148cb1f57f04ab67491d0029e7b56f7ca63"
      },
      "downloads": -1,
      "filename": "ccvm_simulators-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55c3174305287ad7c48edce1fd97ec0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 129381,
      "upload_time": "2023-03-09T22:26:49",
      "upload_time_iso_8601": "2023-03-09T22:26:49.993902Z",
      "url": "https://files.pythonhosted.org/packages/1c/5d/4774af29051d0767240e3c3141581681005edb62d7fc788b4a8d6d4ea7cb/ccvm_simulators-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}