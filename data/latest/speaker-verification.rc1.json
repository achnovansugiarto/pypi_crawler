{
  "info": {
    "author": "",
    "author_email": "ajgriffi@deakin.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "![Python CI](https://github.com/OnTrack-UG-Squad/speech_verification_public/workflows/Python%20CI/badge.svg)\n![CodeQL](https://github.com/OnTrack-UG-Squad/speech_verification_public/workflows/CodeQL/badge.svg)\n\n# speaker-verification\n\nThis project aims to address the issues concerning contract cheating within online learning management platforms as educational institutions have struggled to monitor and evaluate online activity.\nThe Speaker Verification project aims to utilize machine learning technologies to evaluate audio files submitted from a user and obtain a confidence score of how likely it is that the voice in the recording is the user in question.\n\n## Table of Contents\n\n\n* [Usage](#usage)\n    - [Enroll stage](#enroll-stage)\n    - [Validate stage](#validate-stage)\n* [Installation](#installation)\n    - [Install via PyPI](#install-via-pypi)\n    - [Install from Github](#install-from-github)\n        - [Installing Miniconda](#installing-miniconda)\n        - [Conda environment](#conda-environment)\n        - [Virtualenv environment](#virtualenv-environment)\n* [Testing](#testing)\n\n\n## Usage\n\nThe speaker_verification tool has a enroll and validate workflow in order to perform speaker verification for a given user.\n\n### Enroll stage\n\nThe enroll workflow requires two parameters, one being a unique numeric id that must be 9 characters long and a path to a wav or flac file of the users voice. Below is the required syntax and format for the this stage.\n\n```bash\npython -m speaker_verification enroll --id <ID_NUMBER> --audio-path <PATH/TO/FILE>\n```\n\n### Validate stage\n\nThe validate workflow retrives a user enrollment based on the given id parameter given and then uses the `--audio-path` input to accept an audio file as speaker input to verify against the given user enrollment.\n\n```bash\npython -m speaker_verification validate --id <ID_NUMBER> --audio-path <PATH/TO/FILE>\n```\n\n## Installation\n\nThe `speak-verification` package requires Python 3.8.* \n\n### _Install via PyPI_\n\nThe package [speaker-verification](https://pypi.org/project/speaker-verification/) is hosted on [PyPI](https://pypi.org/)\n\n```\npip install speaker-verification\n```\n\n### _Install from Github_\n\nThis project has both a `requirements.txt` and `environment.yml` file's, it is up to your discretion of what environment manager you should like to use.\n\nThe repository relies on the `speaker_verification` python module being on the `PYTHONPATH` which you should set before running.\n\n```bash\nexport PYTHONPATH=${PYTHONPATH}:/path/to/speech_verification_public/\n```\n\n### Installing miniconda\n\n`Miniconda` is a minimal install for conda which hosts packages from `PyPi`, `zlib` and other packages outside of the python language.\n\nDownload the relevent [miniconda installation here](https://docs.conda.io/en/latest/miniconda.html#linux-installers) for     your specified OS.\n\nNOTE: If you are developing on windows then Anaconda might be a better option.\n\nYou should be able to install the rest with the [conda.io instructions](https://conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n### Conda environment\n\nInstall the python dependencies in a conda virtual environment called `deep-speaker` by using the `environment.yml`file to point to the required dependencies.\n\n```bash\nconda env create -f environment.yml\nconda activate deep-speaker\n```\n\n### Virtualenv environment\n\nLike `miniconda`, `virtualenv` is an virual environment manager for python which uses [PyPi (Python Package Index)](https://pypi.org/) packages distributed by pip.\n\n```bash\npip install virtualenv\n# create a new environment, usually in your home dir\npython37 -m virtualenv ./env_name\n# activate environment\nsource ./env_name/bin/activate\n# install environment dependencies by pointing to requirements.txt file\npip install -r requrements.txt\n```\n\n## Testing\n\nWe use `pytest` for managing the exection of our tests the project. Below is the current usage for running the tests.\n\n```bash\n# the below command is relient on the user's working dir being the root of the project.\npytest speaker_verification/\n```\n\n## Contributors\n\nThis repository makes use of open source components initially developed by @philipperemy in the \"Unofficial\" `deep-speaker` project based on the research by Baidu, Inc. \nSee the [deep-speaker project here.](https://github.com/philipperemy/deep-speaker)\nSee the [research paper here.](https://arxiv.org/pdf/1705.02304.pdf)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OnTrack-UG-Squad/speaker-verification",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "speaker-verification",
    "package_url": "https://pypi.org/project/speaker-verification/",
    "platform": "",
    "project_url": "https://pypi.org/project/speaker-verification/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OnTrack-UG-Squad/speaker-verification/issues",
      "Homepage": "https://github.com/OnTrack-UG-Squad/speaker-verification",
      "Pull Requests": "https://github.com/OnTrack-UG-Squad/speaker-verification/pulls"
    },
    "release_url": "https://pypi.org/project/speaker-verification/0.1.2/",
    "requires_dist": [
      "audioread (==2.1.9)",
      "Keras (==2.3.1)",
      "librosa (==0.7.2)",
      "numba (==0.48.0)",
      "numpy (==1.18.5)",
      "python-speech-features (==0.6)",
      "tensorflow (>=2.1.0)",
      "pytest"
    ],
    "requires_python": "<3.9,>=3.8",
    "summary": "The machine learning package examines audio files submitted from a user",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11237513,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2be40a4ae47413cab0807b32caaaada913ee3896383482bb72805dd1ab353055",
          "md5": "985c06a2317ac0466098038a092fde4d",
          "sha256": "695efe11d480326c773690d93f22ebcc767e1f677b28019f5aa8528ae19f00c4"
        },
        "downloads": -1,
        "filename": "speaker_verification-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "985c06a2317ac0466098038a092fde4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.9,>=3.8",
        "size": 88933681,
        "upload_time": "2021-03-19T10:05:59",
        "upload_time_iso_8601": "2021-03-19T10:05:59.189810Z",
        "url": "https://files.pythonhosted.org/packages/2b/e4/0a4ae47413cab0807b32caaaada913ee3896383482bb72805dd1ab353055/speaker_verification-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "023fdcffff68c2643ef457f044e80b6c407e86e4f3151cea14cf3ceb56eef94c",
          "md5": "f71b88090a073dd4eff1b77878bb5ebb",
          "sha256": "6244014366ddef51474c2d3eeab68023b4d9fa42badba5d22b17b4744bd9e64c"
        },
        "downloads": -1,
        "filename": "speaker-verification-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f71b88090a073dd4eff1b77878bb5ebb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.9,>=3.8",
        "size": 88931065,
        "upload_time": "2021-03-19T10:18:29",
        "upload_time_iso_8601": "2021-03-19T10:18:29.538488Z",
        "url": "https://files.pythonhosted.org/packages/02/3f/dcffff68c2643ef457f044e80b6c407e86e4f3151cea14cf3ceb56eef94c/speaker-verification-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2be40a4ae47413cab0807b32caaaada913ee3896383482bb72805dd1ab353055",
        "md5": "985c06a2317ac0466098038a092fde4d",
        "sha256": "695efe11d480326c773690d93f22ebcc767e1f677b28019f5aa8528ae19f00c4"
      },
      "downloads": -1,
      "filename": "speaker_verification-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "985c06a2317ac0466098038a092fde4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.9,>=3.8",
      "size": 88933681,
      "upload_time": "2021-03-19T10:05:59",
      "upload_time_iso_8601": "2021-03-19T10:05:59.189810Z",
      "url": "https://files.pythonhosted.org/packages/2b/e4/0a4ae47413cab0807b32caaaada913ee3896383482bb72805dd1ab353055/speaker_verification-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "023fdcffff68c2643ef457f044e80b6c407e86e4f3151cea14cf3ceb56eef94c",
        "md5": "f71b88090a073dd4eff1b77878bb5ebb",
        "sha256": "6244014366ddef51474c2d3eeab68023b4d9fa42badba5d22b17b4744bd9e64c"
      },
      "downloads": -1,
      "filename": "speaker-verification-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f71b88090a073dd4eff1b77878bb5ebb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.9,>=3.8",
      "size": 88931065,
      "upload_time": "2021-03-19T10:18:29",
      "upload_time_iso_8601": "2021-03-19T10:18:29.538488Z",
      "url": "https://files.pythonhosted.org/packages/02/3f/dcffff68c2643ef457f044e80b6c407e86e4f3151cea14cf3ceb56eef94c/speaker-verification-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}