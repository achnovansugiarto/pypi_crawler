{
  "info": {
    "author": "Swimlane",
    "author_email": "info@swimlane.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![pyattck](https://github.com/swimlane/pyattck/workflows/Testing%20pyattck/badge.svg)\n![](./images/ubuntu_support.svg)\n![](./images/macos_support.svg)\n![](./images/windows_support.svg)\n![](./images/code_coverage.svg)\n\n# Welcome to pyattck's Documentation\n\n```\n    .______   ____    ____  ___   .___________.___________.  ______  __  ___\n    |   _  \\  \\   \\  /   / /   \\  |           |           | /      ||  |/  /\n    |  |_)  |  \\   \\/   / /  ^  \\ `---|  |----`---|  |----`|  ,----'|  '  /\n    |   ___/    \\_    _/ /  /_\\  \\    |  |        |  |     |  |     |    <\n    |  |          |  |  /  _____  \\   |  |        |  |     |  `----.|  .  \\\n    | _|          |__| /__/     \\__\\  |__|        |__|      \\______||__|\\__\\\n\n```\n\tA Python package to interact with MITRE ATT&CK Frameworks\n\n> Current Version is 4.0.0\n\n**pyattck** is a light-weight framework for MITRE ATT&CK Frameworks. This package extracts details from the MITRE Enterprise, PRE-ATT&CK, and Mobile Frameworks.\n\n## Features\n\nThe **pyattck** package retrieves all Tactics, Techniques, Actors, Malware, Tools, and Mitigations from the MITRE ATT&CK Frameworks as well as any defined relationships within the MITRE ATT&CK dataset.\n\nIn addition, Techniques, Actors, and Tools (if applicable) now have collected data from third-party resources that are accessible via properties on a technique. For more detailed information about these features, see [External Datasets](docs/dataset/dataset.md).\n\nThe **pyattck** package allows you to:\n\n  * Specify a URL or local file path for the MITRE ATT&CK Enterprise Framework json, generated dataset, and/or a config.yml file.\n  * Retrieve an image_logo of an actor (when available). If an image_logo isn't available, it generates an ascii_logo.\n  * Search the external dataset for external commands that are similar using `search_commands`.\n  * Access data from the MITRE PRE-ATT&CK Framework\n  * Access data from the MITRE Mobile ATT&CK Framework\n  * Access subtechniques as nested objects or you can turn it off and access as normal technique\n  * Access compliance controls (currently NIST 800-53) related to a MITRE ATT&CK Technique\n\n# Table of Contents\n\n1. [Installation](#installation)\n2. [Usage Example](#usage-example)\n3. [Configuration](#configuration)\n4. [Notes](#note)\n\n## Installation\n\nYou can install **pyattack** on OS X, Linux, or Windows. You can also install it directly from the source. To install, see the commands under the relevant operating system heading, below.\n\n### Prerequisites\n\nThe following libraries are required and installed by pyattck:\n\n```\nrequests\npendulum>=1.2.3,<1.3\npyfiglet==0.8.post1\nPyYaml>=5.4.1\nPillow==8.2.0\nfire==0.3.1\n```\n\n### macOS, Linux and Windows:\n\n```bash\npip install pyattck\n```\n\n### Installing from source\n\n```bash\ngit clone https://github.com/swimlane/pyattck.git\ncd pyattck\npython setup.py install\n```\n\n## Usage example\n\nTo use **pyattck** you must instantiate an **Attck** object. Although you can interact directly with each class, the intended use is through a **Attck** object:\n\n```python\nfrom pyattck import Attck\n\nattack = Attck()\n```\n\nBy default, `subtechniques` are accessible under each technique object. You can turn this behavior off by passing `nested_subtechniques=False` when creating your `Attck` object.\n\nAs an example, the default behavior looks like the following example:\n\n```python\nfrom pyattck import Attck\n\nattack = Attck()\n\nfor technique in attack.enterprise.techniques:\n    print(technique.id)\n    print(technique.name)\n    for subtechnique in technique.subtechniques:\n        print(subtechnique.id)\n        print(subtechnique.name)\n```\n\nYou can access the following `main` properties on your **Attck** object:\n\n* enterprise\n* preattack\n* mobile\n\nOnce you specify the MITRE ATT&CK Framework, you can access additional properties.\n\nHere are the accessible objects under the [Enterprise](docs/enterprise/enterprise.md) property:\n\n* [actors](docs/enterprise/actor.md)\n* [controls](docs/enterprise/control.md)\n* [malwares](docs/enterprise/malware.md)\n* [mitigations](docs/enterprise/mitigation.md)\n* [tactics](docs/enterprise/tactic.md)\n* [techniques](docs/enterprise/technique.md)\n* [tools](docs/enterprise/tools.md)\n\nFor more information on object types under the `enterprise` property, see [Enterprise](docs/enterprise/enterprise.md).\n\nHere are the accessible objects under the [PreAttck](docs/preattck/preattck.md) property:\n\n* [actors](docs/preattck/actor.md)\n* [tactics](docs/preattck/tactic.md)\n* [techniques](docs/preattck/technique.md)\n\nFor more information on object types under the `preattck` property, see [PreAttck](docs/preattck/preattck.md).\n\nHere are the accessible objects under the [Mobile](docs/mobile/mobileattck.md) property:\n\n* [actors](docs/mobile/actor.md)\n* [malwares](docs/mobile/malware.md)\n* [mitigations](docs/mobile/mitigation.md)\n* [tactics](docs/mobile/tactic.md)\n* [techniques](docs/mobile/technique.md)\n* [tools](docs/mobile/tools.md)\n\nFor more information on object types under the `mobile` property, see [Mobile](docs/mobile/mobileattck.md).\n\n## Configuration\n\n`pyattck` allows you to configure if you store external data and where it is stored. \n\n```python\nfrom pyattck import Attck\n\nattck = Attck(\n    nested_subtechniques=True,\n    use_config=False,\n    save_config=False,\n    config_file_path='~/pyattck/config.yml',\n    data_path='~/pyattck/data',\n    enterprise_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json\",\n    pre_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/pre-attack/pre-attack.json\",\n    mobile_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/mobile-attack/mobile-attack.json\",\n    nist_controls_json=\"https://raw.githubusercontent.com/center-for-threat-informed-defense/attack-control-framework-mappings/master/frameworks/nist800-53-r4/stix/nist800-53-r4-controls.json\",\n    generated_attck_json=\"https://github.com/swimlane/pyattck/blob/master/generated_attck_data.json?raw=True\",\n    generated_nist_json=\"https://github.com/swimlane/pyattck/blob/master/attck_to_nist_controls.json?raw=True\",\n    **kwargs\n)\n```\n\nBy default, `pyattck` will (now) pull the latest external data from their respective locations using HTTP GET requests. `pyattck` currently pulls from the following locations:\n\n* enterprise_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json\"\n* pre_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/pre-attack/pre-attack.json\"\n* mobile_attck_json=\"https://raw.githubusercontent.com/mitre/cti/master/mobile-attack/mobile-attack.json\"\n* nist_controls_json=\"https://raw.githubusercontent.com/center-for-threat-informed-defense/attack-control-framework-mappings/master/frameworks/nist800-53-r4/stix/nist800-53-r4-controls.json\"\n* generated_attck_json=\"https://github.com/swimlane/pyattck/blob/master/generated_attck_data.json?raw=True\"\n* generated_nist_json=\"https://github.com/swimlane/pyattck/blob/master/attck_to_nist_controls.json?raw=True\"\n\nYou have several options when instantiating the `Attck` object. As of `4.0.0` you can now specify any of the following options:\n\n* use_config - When you specify this argument as `True` pyattck will attempt to retrieve the configuration specified in the `config_file_path` location. If this file is corrupted or cannot be found, we will default to retrieving data from the specified `*_attck_json` locations.\n* save_config - When you specify this argument as `True` pyattck will save the configuration file to the specified location set by `config_file_path`. Additionally, we will save all downloaded files to the `data_path` location specified. If you have specified a local path location instead of a download URL for any of the `*_attck_json` parameters we will save this location in our configuration and reference this location going forward. \n* config_file_path - The path to store a configuration file. Default is `~/pyattck/config.yml`\n* data_path - The path to store any data files downloaded to the local system. Default is `~/pyattck/data`\n\n### JSON Locations\n\nAdditionally, you can specify the location for each individual `*_attck_json` files by passing in either a URI or a local file path. If you have passed in a local file path, we will simply read from this file. \n\nIf you have used the default values or specified an alternative URI location to retrieve these JSON files from, you can additionally pass in `**kwargs` that will be passed along to the `Requests` python package when performing any HTTP requests.\n\n## Note\n\nWe understand that there are many different open-source projects being released, even on a daily basis, but we wanted to provide a straightforward Python package that allowed the user to identify known relationships between all verticals of the MITRE ATT&CK Framework.\n\nIf you are unfamiliar with the MITRE ATT&CK Framework, there are a few key components to ensure you have a firm grasp around. The first is Tactics & Techniques. When looking at the [MITRE ATT&CK Framework](https://attack.mitre.org/), the Tactics are the columns and represent the different phases of an attack.\n\n   > The MITRE ATT&CK Framework is NOT an all encompassing/defacto security coverage map - it is rather a FRAMEWORK and additional avenues should also be considered when assessing your security posture.\n\nTechniques are the rows of the framework and are categorized underneath specific Tactics (columns). They are data points within the framework that provides guidance when assessing your security gaps. Additionally, (most) Techniques contain mitigation guidance in addition to information about their relationship to tools, malware, and even actors/groups that have used this technique during recorded attacks.\n\nThis means, if your organization is focused on TTPs (Tactics Techniques and Procedures) used by certain actors/groups then MITRE ATT&CK Framework is perfect for you. If you are not at this security maturing within your organization, no worries! The ATT&CK Framework still provides really good guidance in a simple and straightforward layout, but programmatically it is not straightforward--especially if you wanted to measure (or map) your security controls using the framework.\n\n### Developing and Testing\n\nYou can add features or bugs or run the code in a development environment.\n\n1. To get a development and testing environment up and running, use this [Dockerfile](https://github.com/swimlane/pyattck/blob/master/Dockerfile).\n\n2. To use the `Dockerfile` run, cd to this repository directory and run:\n\n  ```\n  docker build --force-rm -t pyattck .\n  ```\n\n3. Next, run the docker container:\n\n  ```\n  docker run pyattck\n  ```\n\n  Running this calls the test python file in [bin/test.py](https://github.com/swimlane/pyattck/blob/master/bin/test.py).\n\n4. Modify the test python file for additional testing and development.\n\n## Running the tests\n\nTests within this project should cover all available properties and methods. As this project grows the tests will become more robust but for now we are testing that they exist and return outputs.\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://github.com/swimlane/pyattck/blob/master/CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning.\n\n## Change Log\n\nFor details on features for a specific version of `pyattck`, see the [CHANGELOG.md](https://github.com/swimlane/pyattck/blob/master/CHANGELOG.md).\n\n## Authors\n\n* Josh Rickard - *Initial work* - [MSAdministrator](https://github.com/msadministrator)\n\nSee also the list of [contributors](https://github.com/swimlane/pyattck/contributors).\n\n## License\n\nThis project is licensed under the [MIT License](https://github.com/swimlane/pyattck/blob/master/LICENSE.md).\n\n## Acknowledgments\n\nFirst of all, I would like to thank everyone who contributes to open-source projects, especially the maintainers and creators of these projects. Without them, this capability would not be possible.\n\nThis data set is generated from many different sources. As we continue to add more sources, we will continue to add them here. Again thank you to all of these projects. In no particular order, `pyattck` utilizes data from the following projects:\n\n\n* [Mitre ATT&CK APT3 Adversary Emulation Field Manual](https://attack.mitre.org/docs/APT3_Adversary_Emulation_Field_Manual.xlsx)\n* [Atomic Red Team (by Red Canary)](https://github.com/redcanaryco/atomic-red-team)\n* [Atomic Threat Coverage](https://github.com/atc-project/atomic-threat-coverage)\n* [attck_empire (by dstepanic)](https://github.com/dstepanic/attck_empire)\n* [sentinel-attack (by BlueTeamLabs)](https://github.com/BlueTeamLabs/sentinel-attack)\n* [Litmus_test (by Kirtar22)](https://github.com/Kirtar22/Litmus_Test)\n* [nsm-attack (by oxtf)](https://github.com/0xtf/nsm-attack)\n* [osquery-attck (by teoseller)](https://github.com/teoseller/osquery-attck)\n* [Mitre Stockpile](https://github.com/mitre/stockpile)\n* [SysmonHunter (by baronpan)](https://github.com/baronpan/SysmonHunter)\n* [ThreatHunting-Book (by 12306Bro)](https://github.com/12306Bro/Threathunting-book)\n* [threat_hunting_tables (by dwestgard)](https://github.com/dwestgard/threat_hunting_tables)\n* [APT Groups & Operations](https://docs.google.com/spreadsheets/d/1H9_xaxQHpWaa4O_Son4Gx0YOIzlcBWMsdvePFX68EKU/edit#gid=1864660085)\n* [C2Matrix (by @jorgeorchilles, @brysonbort, @adam_mashinchi)](https://www.thec2matrix.com/)\n* [Elemental](https://github.com/Elemental-attack/Elemental)\n* [MalwareArchaeology - ATTACK](https://github.com/MalwareArchaeology/ATTACK)\n* [Attack-Technique-Dataset](https://github.com/NewBee119/Attack-Technique-Dataset)\n\n\n```eval_rst\n.. toctree::\n   :titlesonly:\n\n   configuration\n   pyattck/attck\n   dataset/dataset\n   enterprise/enterprise\n   preattck/preattck\n   mobile/mobileattck\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/swimlane/pyattck",
    "keywords": "att&ck,mitre,swimlane",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyattck-dev",
    "package_url": "https://pypi.org/project/pyattck-dev/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyattck-dev/",
    "project_urls": {
      "Homepage": "https://github.com/swimlane/pyattck"
    },
    "release_url": "https://pypi.org/project/pyattck-dev/4.0.2/",
    "requires_dist": [
      "requests",
      "pendulum (<1.3,>=1.2.3)",
      "pyfiglet (==0.8.post1)",
      "PyYaml (>=5.4.1)",
      "Pillow (==8.2.0)",
      "fire (==0.3.1)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "A Python package to interact with the Mitre ATT&CK Frameworks",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10745982,
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a1cab2148fbc1ca1c0259fb515cd72382977534948ac963239b9bc621330c59",
          "md5": "f32380da114d365fa7876703464ebef4",
          "sha256": "324d8f32ed4b0e0e52ba453f56f946c62e10239caa104a352faa6adcea1a3ed7"
        },
        "downloads": -1,
        "filename": "pyattck_dev-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f32380da114d365fa7876703464ebef4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 936878,
        "upload_time": "2021-06-15T19:40:25",
        "upload_time_iso_8601": "2021-06-15T19:40:25.318608Z",
        "url": "https://files.pythonhosted.org/packages/0a/1c/ab2148fbc1ca1c0259fb515cd72382977534948ac963239b9bc621330c59/pyattck_dev-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc1eddf42f785616c1a7ace4d782bf25aa04acb67b36d415e5d747e091ec6b0",
          "md5": "96134d597a806b84b28796101f8fb888",
          "sha256": "d38cbeaf4127fa896e71d1e778bf41b91ee7c4641611ff19f63ef1e16656f4e6"
        },
        "downloads": -1,
        "filename": "pyattck-dev-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96134d597a806b84b28796101f8fb888",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 916335,
        "upload_time": "2021-06-15T19:40:37",
        "upload_time_iso_8601": "2021-06-15T19:40:37.698950Z",
        "url": "https://files.pythonhosted.org/packages/8b/c1/eddf42f785616c1a7ace4d782bf25aa04acb67b36d415e5d747e091ec6b0/pyattck-dev-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce594dd36f20664725fa77ebbc55bd8cfdfe95b9512c5123adced72f7695c7bc",
          "md5": "65f52f8e042ee9d10b1459470ab94914",
          "sha256": "17c68537b81222191f8d6f5d2bf9cb1081a3306fa3b4a121add438ab8a0c636a"
        },
        "downloads": -1,
        "filename": "pyattck_dev-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65f52f8e042ee9d10b1459470ab94914",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 937308,
        "upload_time": "2021-06-15T21:24:04",
        "upload_time_iso_8601": "2021-06-15T21:24:04.019690Z",
        "url": "https://files.pythonhosted.org/packages/ce/59/4dd36f20664725fa77ebbc55bd8cfdfe95b9512c5123adced72f7695c7bc/pyattck_dev-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac822e78c4ec24f739e01232e321c7172d08039d53a8ead0f13858a2b77214b8",
          "md5": "07508cc0491c9d198c6264ccbda48b25",
          "sha256": "62cf06e93225fcd83ef0494f017ab9384b59a2dcbd1af64934616eb7a1e53c8c"
        },
        "downloads": -1,
        "filename": "pyattck-dev-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07508cc0491c9d198c6264ccbda48b25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 916686,
        "upload_time": "2021-06-15T21:24:07",
        "upload_time_iso_8601": "2021-06-15T21:24:07.699035Z",
        "url": "https://files.pythonhosted.org/packages/ac/82/2e78c4ec24f739e01232e321c7172d08039d53a8ead0f13858a2b77214b8/pyattck-dev-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b4baaf2bcd6cee8b7389329f8217a04b7bed14b13dc0e80ff0898f3eab7ded2",
          "md5": "c54df4558243ce859fc5eb8cd5c9b580",
          "sha256": "7ccfd5617c30d579526ab055834b6967355d494f951c4537362ffe905103f4e0"
        },
        "downloads": -1,
        "filename": "pyattck_dev-4.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c54df4558243ce859fc5eb8cd5c9b580",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 937316,
        "upload_time": "2021-06-25T19:35:20",
        "upload_time_iso_8601": "2021-06-25T19:35:20.302446Z",
        "url": "https://files.pythonhosted.org/packages/0b/4b/aaf2bcd6cee8b7389329f8217a04b7bed14b13dc0e80ff0898f3eab7ded2/pyattck_dev-4.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7515b6d1560748cb1dab955badb2a7e0142c010ee4f530d7cf352c449f2ac10f",
          "md5": "5ed02e7c82efbbc33c2928ffc2cd08a3",
          "sha256": "dfca40bb49b98897a9964d04579c747f3ccd8ac9e18f5353d067f728d7c503b4"
        },
        "downloads": -1,
        "filename": "pyattck-dev-4.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5ed02e7c82efbbc33c2928ffc2cd08a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 916655,
        "upload_time": "2021-06-25T19:35:23",
        "upload_time_iso_8601": "2021-06-25T19:35:23.075445Z",
        "url": "https://files.pythonhosted.org/packages/75/15/b6d1560748cb1dab955badb2a7e0142c010ee4f530d7cf352c449f2ac10f/pyattck-dev-4.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b4baaf2bcd6cee8b7389329f8217a04b7bed14b13dc0e80ff0898f3eab7ded2",
        "md5": "c54df4558243ce859fc5eb8cd5c9b580",
        "sha256": "7ccfd5617c30d579526ab055834b6967355d494f951c4537362ffe905103f4e0"
      },
      "downloads": -1,
      "filename": "pyattck_dev-4.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c54df4558243ce859fc5eb8cd5c9b580",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 937316,
      "upload_time": "2021-06-25T19:35:20",
      "upload_time_iso_8601": "2021-06-25T19:35:20.302446Z",
      "url": "https://files.pythonhosted.org/packages/0b/4b/aaf2bcd6cee8b7389329f8217a04b7bed14b13dc0e80ff0898f3eab7ded2/pyattck_dev-4.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7515b6d1560748cb1dab955badb2a7e0142c010ee4f530d7cf352c449f2ac10f",
        "md5": "5ed02e7c82efbbc33c2928ffc2cd08a3",
        "sha256": "dfca40bb49b98897a9964d04579c747f3ccd8ac9e18f5353d067f728d7c503b4"
      },
      "downloads": -1,
      "filename": "pyattck-dev-4.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5ed02e7c82efbbc33c2928ffc2cd08a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 916655,
      "upload_time": "2021-06-25T19:35:23",
      "upload_time_iso_8601": "2021-06-25T19:35:23.075445Z",
      "url": "https://files.pythonhosted.org/packages/75/15/b6d1560748cb1dab955badb2a7e0142c010ee4f530d7cf352c449f2ac10f/pyattck-dev-4.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}