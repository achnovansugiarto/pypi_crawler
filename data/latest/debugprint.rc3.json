{
  "info": {
    "author": "Phil Howe",
    "author_email": "philhbusiness@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# debugprint\n\n*A light zero-dependency module for nicely printing things for debugging*\n\n`debugprint` is a slightly more featureful Python clone of the node.js `debug` module. It behaves almost exactly as node.js debug does, with the following exceptions:\n\n - Python imports behave differently from node.js `require` so `debug` instances are created differently\n - You can define custom format functions in debugprint\n - You can add captions to print-outs in debugprint\n - In node.js debug, you can change the enabled namespace within a module by doing `debug.disable()` or `debug.enable('some:namespaces:*')`\n\nOtherwise, the usage is pretty much exactly the same - make a new `Debug` instance for each module, and run the program with the `DEBUG` environment variable set to something sensible (details on setting `DEBUG` are below).\n\nWhy use `debugprint` instead of just regular `print`?\n\n - Prints only when the `DEBUG` environment variable is set to a matching value (more on this below) so you don't need to spend time finding and removing print statements prior to releasing for production\n - Prints to `stderr` not `stdout` - much better for command line tools as it doesn't interfere with piping the data on to other programs\n - Provides the name of the module the statement is being output from - module name is also colour-coded\n - Allows passing an optional caption\n - Automatically pretty-prints built-in collection types\n - Allows adding custom format functions to pretty-print custom data types like `lxml` trees or `pyrsistent` immutable data structures.\n\n## Example print-outs\n\n### Scalar values\n\n`debug(\"Hello, world!\")` and `debug(\"Hello, world!\", \"a caption\")`:\n\n![Basic](https://github.com/phil-arh/debugprint/blob/master/screenshots/basic.png)\n\n### Dicts\n\n`debug(example_dict)`\n\n![Dict no caption](https://github.com/phil-arh/debugprint/blob/master/screenshots/dict_no_caption.png)\n\n`debug(example_dict, \"A pretty-printed nested dict\")`\n\n![Dict with caption](https://github.com/phil-arh/debugprint/blob/master/screenshots/dict_caption.png)\n\n### XML\n\n`debug(example_xml)`\n\n![XML](https://github.com/phil-arh/debugprint/blob/master/screenshots/xml.png)\n\n**`debugprint` can also pretty-print nested lists, tuples, and mixed JSON by default - essentially anything that can be handled by the standard library `pprint` module.**\n\n## Installation\n\n```bash\n# via pip\npip install debugprint\n\n# via pipenv\npipenv install debugprint\n\n```\n\n## Usage\n\nImport into every module where you want to do debug printing, then create an instance of the `Debug` class for that module.\n\n```python\nfrom debugprint import Debug\n\n# module names can contain: letters, numbers, underscores, hyphens, and colons\n# the actual regex is this: /^[A-Za-z0-9:_\\-]+$/\ndebug = Debug(\"my_application:some_subpackage:this_module\")\n\n# simple printing\ndebug(\"some string value\")\ndebug(123)\ndebug(False)\n\n# pretty printing collections\ndebug([1, 2, 3])\ndebug({\"a\": 1, \"b\": 2, \"c\": 3})\n\n# printing things with captions\ndebug(call_this_function_that_returns_a_bool(), \"bool returned by this function\")\ndebug(some_var, \"the value of some_var at this point in the pipeline\")\n\n```\n\n## Setting the `DEBUG` environment variable\n\nBy default, `debugprint` doesn't print anything. This is intentional - debug printouts are unnecessary in production and can be actively irritating to users - not to mention, depending on the situation, a potential security risk.\n\nIn order to get `debugprint` to print, you need to run your module/script/application with the `DEBUG` environment variable set.\n\nThere are two ways to do this in bash:\n\n```bash\n# setting the DEBUG environment variable to \"*\" as an example\n\n$ DEBUG=\"*\" python3 myscript.py\n\n# or\n\n$ export DEBUG=\"*\"\n$ python3 myscript.py\n```\n\nSetting `DEBUG` to `*` tells `debugprint` to always print. Occasionally that's the behaviour you want, but more likely you'll want to restrict it to a limited subset of possible `debug()` calls. You can therefore set it to colon-separated paths, like the following examples:\n\n - `app` - `debug()` calls will only print in this scenario: `debug = Debug(\"app\")`\n - `app:thing` will only print for `debug = Debug(app:thing)`\n - `app:*` - will print if `debug = Debug(\"app\")` or `debug = Debug(app:thing)` or `debug = Debug(app:thing:anotherthing)` etc.\n - `app:*:anotherthing` will print if `debug = Debug(\"app:thing:anotherthing\")` or `debug = Debug(\"app:somethingelse:anotherthing\")` etc.\n\nYou can also set `DEBUG` so multiple different paths are enabled. For instance:\n\n - `app,app:thing` - `debug()` calls will print where `debug = Debug(\"app\")` or `debug = Debug(\"app:thing\")`\n - `app:thing,app:anotherthing` - will print where `debug = Debug(\"app:thing\")` or `debug = Debug(\"app:anotherthing\")`\n\nThis should hopefully be fairly intuitive. Just set the path of the `DEBUG` environment variable to match what you want to print. You'll usually be fine with setting it to `DEBUG=nameofmyapp,nameofmyapp:*` and leaving it, but if you're working on a big codebase or trying to figure out a particularly persistent bug, you may want to adjust it to narrow down what gets printed.\n\n## Custom format functions\n\nBy default, `debugprint` will attempt to pretty-print `list`s, `dict`s, `set`s, `tuple`s, and `xml.etree.ElementTree.ElementTree`s. But what if you're using non-standard data structures, like `lxml` trees or `pyrsistent` immutable data structures?\n\nYou can define custom format functions for any data type you like. The general structure of a custom format function is that it returns either a string to be printed or `None`. `debugprint` will call each defined custom format function in turn. The logic in `debugprint` is similar to this:\n\n```python\n# not the actual code but not far off\ninput_value # value to print\nfor function in custom_functions:\n    output_string = function(input_value)\n    if output_string:\n        break\nif output_string:\n    # print this string\nelse:\n    # carry on and try using the default formatters\n```\n\n### Example custom format functions\n\nThe best way to see what a custom format function looks like is to check out a couple of examples:\n\n```python\nfrom pprint import pformat\n\nfrom lxml import etree\nfrom pyrsistent import PRecord, PMap, PVector, PSet, thaw\n\nimport debugprint\n\n\n# a custom format function for LXML element trees\ndef lxml_formatter(possible_lxml_object):\n    if isinstance(possible_lxml_object, etree._Element):\n        return etree.tostring(\n            possible_lxml_object,\n            pretty_print=True,\n            encoding=\"unicode\",\n        )\n    else:\n        return None\n\n# a custom format function for pyrsistent immutable data structures\ndef pyrsistent_formatter(possible_pyrsistent_data_structure):\n    if isinstance(possible_pyrsistent_data_structure, (PRecord, PMap, PVector, PSet)):\n        return pformat(thaw(possible_pyrsistent_data_structure))\n    else:\n        return None\n\ndebugprint.use_format(lxml_formatter)\ndebugprint.use_format(pyrsistent_formatter)\n```\n\nThe basic logic of a custom format function is just:\n\n```python\ndef custom_format_function(some_input):\n    if isinstance(some_input, the_type_this_function_is_looking_for):\n        return format_this_special_type_for_printing(some_input)\n    else:\n        # you can return any falsy value here\n        return None\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phil-arh/debugprint",
    "keywords": "debug print",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "debugprint",
    "package_url": "https://pypi.org/project/debugprint/",
    "platform": "",
    "project_url": "https://pypi.org/project/debugprint/",
    "project_urls": {
      "Homepage": "https://github.com/phil-arh/debugprint"
    },
    "release_url": "https://pypi.org/project/debugprint/0.1.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A clone of the npm debug module with ability to implement custom formatting",
    "version": "0.1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8028345,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "548a495334900e50a6390d0c63cdc52a68fadef68398364f0a6b5c29cdb71709",
          "md5": "b7112605c71ff1f825be2b159b93a8c2",
          "sha256": "d328192da9e7cb2af4c6a10c2393115f9d0758f56875462587905c3a9c1833ae"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7112605c71ff1f825be2b159b93a8c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11958,
        "upload_time": "2020-08-24T16:02:37",
        "upload_time_iso_8601": "2020-08-24T16:02:37.984213Z",
        "url": "https://files.pythonhosted.org/packages/54/8a/495334900e50a6390d0c63cdc52a68fadef68398364f0a6b5c29cdb71709/debugprint-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8536f9d3499ef81600fdf2ba7007ff213579039dd5997e2a99623328bb7b5e69",
          "md5": "8fde5ab335aaa944f2c7e4f5c020f719",
          "sha256": "3703da6aa5cd454b35826a5c048080bbd0ec3b5bb811afe614fc2798cbd4d3db"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "8fde5ab335aaa944f2c7e4f5c020f719",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7214,
        "upload_time": "2020-08-24T16:02:38",
        "upload_time_iso_8601": "2020-08-24T16:02:38.906778Z",
        "url": "https://files.pythonhosted.org/packages/85/36/f9d3499ef81600fdf2ba7007ff213579039dd5997e2a99623328bb7b5e69/debugprint-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9fd8edb6f8385ec6b74b47d6845a53da0052da6ed2ab7232bd746a0873dc321",
          "md5": "ed28ed708647329b45f0f15356fd0186",
          "sha256": "6ae0bfb883c36d5a557e0f79be24c61674a6c9f67a276d77e8e88ead67a28fc0"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed28ed708647329b45f0f15356fd0186",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11785,
        "upload_time": "2020-08-16T18:37:50",
        "upload_time_iso_8601": "2020-08-16T18:37:50.875903Z",
        "url": "https://files.pythonhosted.org/packages/f9/fd/8edb6f8385ec6b74b47d6845a53da0052da6ed2ab7232bd746a0873dc321/debugprint-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a170e1d87467de8a89c3cf0f1d399ce0b9e1c58623cac97cf29da1ea7b3dfe3a",
          "md5": "a084ce1bae3e137f56fbc82966845a03",
          "sha256": "11ca1a65bc70864260dac57a7e542f616091b1ea04483ee907f40c5e144669d1"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a084ce1bae3e137f56fbc82966845a03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7092,
        "upload_time": "2020-08-16T18:37:53",
        "upload_time_iso_8601": "2020-08-16T18:37:53.102056Z",
        "url": "https://files.pythonhosted.org/packages/a1/70/e1d87467de8a89c3cf0f1d399ce0b9e1c58623cac97cf29da1ea7b3dfe3a/debugprint-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dd716bc90e17e91d6cc1643a3619e10c3dbaceaab3e2af7f535dc566141dc0c",
          "md5": "29c9720c817df039b43dbe8d37748c40",
          "sha256": "6ad31969420beee0a477be5c7539b9174ae770df54aa970ce97f78266a98f005"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29c9720c817df039b43dbe8d37748c40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11787,
        "upload_time": "2020-08-24T11:35:13",
        "upload_time_iso_8601": "2020-08-24T11:35:13.594955Z",
        "url": "https://files.pythonhosted.org/packages/7d/d7/16bc90e17e91d6cc1643a3619e10c3dbaceaab3e2af7f535dc566141dc0c/debugprint-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15bdb29d3f9706910644f4746d109608fa6355a167995de47be7e6da09e1a108",
          "md5": "248884b733944ed66852eefed9e04489",
          "sha256": "fba7637a365c3d9ce2664611435c8e2f726f503ed1ab5340e124e366e14cfdd9"
        },
        "downloads": -1,
        "filename": "debugprint-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "248884b733944ed66852eefed9e04489",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7103,
        "upload_time": "2020-08-24T11:35:14",
        "upload_time_iso_8601": "2020-08-24T11:35:14.820577Z",
        "url": "https://files.pythonhosted.org/packages/15/bd/b29d3f9706910644f4746d109608fa6355a167995de47be7e6da09e1a108/debugprint-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "548a495334900e50a6390d0c63cdc52a68fadef68398364f0a6b5c29cdb71709",
        "md5": "b7112605c71ff1f825be2b159b93a8c2",
        "sha256": "d328192da9e7cb2af4c6a10c2393115f9d0758f56875462587905c3a9c1833ae"
      },
      "downloads": -1,
      "filename": "debugprint-0.1.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7112605c71ff1f825be2b159b93a8c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11958,
      "upload_time": "2020-08-24T16:02:37",
      "upload_time_iso_8601": "2020-08-24T16:02:37.984213Z",
      "url": "https://files.pythonhosted.org/packages/54/8a/495334900e50a6390d0c63cdc52a68fadef68398364f0a6b5c29cdb71709/debugprint-0.1.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8536f9d3499ef81600fdf2ba7007ff213579039dd5997e2a99623328bb7b5e69",
        "md5": "8fde5ab335aaa944f2c7e4f5c020f719",
        "sha256": "3703da6aa5cd454b35826a5c048080bbd0ec3b5bb811afe614fc2798cbd4d3db"
      },
      "downloads": -1,
      "filename": "debugprint-0.1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "8fde5ab335aaa944f2c7e4f5c020f719",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7214,
      "upload_time": "2020-08-24T16:02:38",
      "upload_time_iso_8601": "2020-08-24T16:02:38.906778Z",
      "url": "https://files.pythonhosted.org/packages/85/36/f9d3499ef81600fdf2ba7007ff213579039dd5997e2a99623328bb7b5e69/debugprint-0.1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}