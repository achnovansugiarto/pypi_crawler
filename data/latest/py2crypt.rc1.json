{
  "info": {
    "author": "Badlock",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## 1. AES\r\n\r\nThe _`AES`_ class uses the AES-CTR algorithm (counter mode) to encrypt and decrypt data.\r\n\r\n### 1.1. _AES_ methods & parameters\r\n\r\n`AES(key: bytes)`\r\n\r\nThe required `key` parameter of AES class must be `bytes` type and will be used to encrypt or decrypt data.\r\n\r\n`AES(key: bytes).encrypt(plaintext: bytes) -> bytes`\r\n\r\nThe `encrypt` method is used to encrypt data and return a `bytes` type object that contains the ciphertext of the `plaintext` parameter.\r\n\r\n`AES(key: bytes).decrypt(ciphertext: bytes) -> bytes`\r\n\r\nThe `decrypt` method is used to decrypt data and return a `bytes` type object that contains the plaintext of the `ciphertext` parameter.\r\n\r\n### 1.2. AES useful variables\r\n\r\nThere are three possible lengths of keys for AES: 128-bit, 192-bit, and 256-bit. The constants `AES128_SIZE`, `AES192_SIZE`, `AES256_SIZE` hold those values.  The constant `IV_SIZE` holds the length of the IV.\r\n\r\nThese constants can be imported directly from the library .\r\n\r\n### 1.3. AES example\r\n\r\n```\r\nfrom py2crypt import AES, AES256_SIZE\r\nfrom os import urandom\r\n\r\nplain_text = b'Hello World!'\r\nshared_key = urandom(AES256_SIZE)\r\n\r\nsender = AES(shared_key)\r\nreceiver = AES(shared_key)\r\n\r\nencrypted_text = sender.encrypt(plain_text)\r\ndecrypted_text = receiver.decrypt(encrypted_text)\r\n\r\nprint('Encrypted message:', encrypted_text.hex())\r\nprint('Decrypted message:', decrypted_text.decode('utf-8'))\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nEncrypted message: 6875fdb9774b10c5ca8aa51ac0f75662926552fb2320fa53d6345bb6c09d20\r\nDecrypted message: Hello World!\r\n```\r\n\r\n## 2. ECDH\r\n\r\nThe _`ECDH`_ class is used to exchange keys using Elliptic Curve Diffie-Hellman algorithm.\r\n\r\n### 2.1. ECDH curves\r\n\r\nAll curves can be imported directly from the library.\r\n\r\n`SECP192R1`: NIST P-192\r\n\r\n`SECP224R1`: NIST P-224\r\n\r\n`SECP256R1`: NIST P-256\r\n\r\n`SECP384R1`: NIST P-384\r\n\r\n`SECP521R1`: NIST P-521\r\n\r\n### 2.2. ECDH methods & parameters\r\n\r\nThe _`ECDH`_ class uses by default the `SECP521R1` curve (NIST P-521), but others can be used instead:\r\n\r\n```\r\nfrom py2crypt import ECDH, SECP192R1, SECP224R1, SECP256R1, SECP384R1, SECP521R1\r\n\r\ndh = ECDH(SECP256R1)\r\n```\r\n\r\n`ECDH.private_key() -> _EllipticCurvePrivateKey`\r\n\r\nThe `private_key` method is used to return the private key object.\r\n\r\n`ECDH.public_key() -> _EllipticCurvePublicKey`\r\n\r\nThe `public_key` method is used to return the public key object.\r\n\r\n`ECDH.exchange(public_key: _EllipticCurvePublicKey) -> bytes`\r\n\r\nThe `exchange` method requires the `public_key` parameter (the peer public key) that must be the same object type returned by the `public_key` method.\r\n\r\n### 2.3. ECDH example\r\n\r\n```\r\nfrom py2crypt import ECDH\r\n\r\nalice = ECDH()\r\nbob = ECDH()\r\n\r\nalice_key = alice.exchange(bob.public_key())\r\nbob_key = bob.exchange(alice.public_key())\r\n\r\nprint('Alice key:', alice_key.hex())\r\nprint('Bob key:', bob_key.hex())\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nAlice key: 01ae679b954c796ed030e0b658e20f8670d1bcea9778508b4036a91849353b9b4567723fe7a360612f355bb362bcbbc1885ada0aaea76ada2b71278bfc6d32a19be2\r\nBob key: 01ae679b954c796ed030e0b658e20f8670d1bcea9778508b4036a91849353b9b4567723fe7a360612f355bb362bcbbc1885ada0aaea76ada2b71278bfc6d32a19be2\r\n```\r\n## 3. HKDF\r\n\r\nHKDF converts a secret into key material suitable for use in encryption, integrity checking or authentication. It is suitable for deriving keys of a fixed size used for other cryptographic operations.\r\n\r\n### 3.1. HKDF methods & parameters\r\n\r\n`HKDF(info: bytes, length: int = 32)`\r\n\r\nThe `info` parameter objective is to bind the derived key material to application. It is not recommended using it as a salt.\r\n\r\nThe `length` parameter specify the length to the output of the derived material. The default value is 32.\r\n\r\n`HKDF.derive(material: bytes, salt: bytes|None = None)`\r\n\r\nThe `material` parameter is the input key material.\r\n\r\nThe `salt` parameter must be randomly generated or defined as `None`.\r\n\r\n### 3.2. HKDF useful variables\r\n\r\nYou may want to change the default digest algorithm. It is possible to use `SHA256`, `SHA384`, and `SHA512`. The default digest is `SHA512`. \r\n\r\n### 3.3. HKDF example\r\n\r\n```\r\nfrom py2crypt import HKDF, SHA256, SHA384, SHA512\r\n\r\nkey = b'Material for KDF'\r\n\r\nkdf = HKDF(info = b'HKDF', length = 32)\r\n\r\n# Define SHA256 as the digest\r\nkdf.digest = SHA256()\r\n\r\nprint('HKDF:', kdf.derive(key).hex())\r\nprint('HKDF salted:', kdf.derive(key, salt=b'salt').hex())\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nHKDF: 5acb02152e347b8d4515af7c4b99d050f75998354ea32df299f8f344044d58ff\r\nHKDF salted: dcb3c321cc90f67bbb642db33a1bad0332f0632c7a6fa8b4d821021d9f4dfbdb\r\n```\r\n\r\n## 4. HKDFExpand\r\n\r\nHKDF consists of two stages, extract and expand. This class exposes an expand only version of HKDF that is suitable when the key material is already cryptographically strong. _`HKDFExpand`_ should only be used if the key material is cryptographically strong. You should use _`HKDF`_ if you are unsure.\r\n\r\n### 4.1. HKDFExpand methods & parameters\r\n\r\n`HKDFExpand(info: bytes, length: int = 32) `\r\n\r\nThe `info` parameter objective is to bind the derived key material to application. It is not recommended using it as a salt.\r\n\r\nThe `length` parameter specify the length to the output of the derived material. The default value is 32.\r\n\r\n`HKDFExpand.derive(material: bytes)`\r\n\r\nThe `material` parameter is the input key material.\r\n\r\n### 4.2. HKDFExpand example\r\n\r\n```\r\nfrom py2crypt import HKDFExpand, SHA256, SHA384, SHA512\r\n\r\nkey = b'Material for KDF'\r\n\r\nkdf = HKDFExpand(info=b'HKDF', length=64)\r\n\r\n# Define SHA256 as the digest\r\nkdf.digest = SHA256()\r\n\r\nprint('HKDF expanded:', kdf.derive(key).hex())\r\n```\r\n\r\nThe output:\r\n```\r\nHKDF expanded: 69b89488c7a33d4a2a129be7e5bb3f22ed395029ea6d61c97f6a67565a31eff45ed24bb7f24ba2eb3a1bd4dd22110e849caad5b710aeac328857ac7c0979c667\r\n```\r\n\r\n## 5. HMAC\r\n\r\nHMAC may be used to simultaneously verify both the data integrity and authenticity of a message.\r\n\r\n### 5.1. HMAC methods & parameters\r\n\r\n`HMAC(key: bytes)`\r\n\r\nThe `key` is a bytes object giving the secret key.\r\n\r\n`HMAC.digest(message: bytes)`\r\n\r\nThe `digest` method return digest of `message` for given secret `key` and `digest`.\r\n\r\n### 5.2. HMAC useful variables\r\n\r\nYou may want to change the default digest algorithm. It is possible to use `sha256`, `sha384`, and `sha512`. The default digest is `sha512`.\r\n\r\n### 5.3. hmac_compare\r\n\r\n`hmac_compare(message: bytes, key: bytes, hmac: bytes, digest=sha512)`\r\n\r\nIt will compare the digest of `message` for given secret `key` and `digest` with another `hmac`.\r\n\r\n### 5.4. HMAC examples\r\n\r\n```\r\nfrom py2crypt import HMAC, hmac_compare, sha256, sha384, sha512\r\n\r\nshared_key = b'ThisIsASecret'\r\nmessage = b'The message'\r\n\r\nhmac = HMAC(shared_key)\r\n\r\n# Define sha256 as the digest\r\nhmac.hash_algorithm = sha256\r\n\r\nhmac_digest = hmac.digest(message)\r\n\r\nprint('HMAC:', hmac_digest.hex())\r\nprint('Is valid?', hmac_compare(message, shared_key, hmac_digest, sha256))\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nHMAC: 71fa6d82dba7ee1653c4a524f948a9ffd3ed97f3edf1fa39806da0e7d6639cb9\r\nIs valid? True\r\n```\r\n\r\n## 6. RSA\r\n\r\nGenerates a local wallet that contains an RSA Private Key.\r\n\r\n### 6.1. RSA methods & parameters\r\n\r\n`RSA(private_key = None, length: int = 4096)`\r\n\r\nUse a previous generated RSA private key in `private_key` parameter or set as `None`. The `length` parameter defines the length of the private key it will generate if `private key` parameter is `None.` \r\n\r\n`RSA.private_key()`\r\n\r\nReturn the private key object.\r\n\r\n`RSA.public_key()`\r\n\r\nReturn the private key object.\r\n\r\n`RSA.encrypt(public_key, plaintext: bytes) -> bytes`\r\n\r\nEncrypt `plaintext` using a giving `public_key`.\r\n\r\n`RSA.decrypt(ciphertext: bytes) -> bytes`\r\n\r\nDecrypt `ciphertext` using the object private key.\r\n\r\n`RSA.sign(content: bytes)`\r\n\r\nSign `content` using the object private key. The `content` will be hashed using the algorithm specified in `hash_algorithm` (default is `SHA512`). \r\n\r\n`RSA.verify(public_key, signature: bytes, content: bytes) -> bool`\r\n\r\nVerify the `signature` of the `content` using the giving `public_key`.\r\n\r\n### 6.2. RSA useful variables\r\n\r\nYou may want to change the default digest algorithm. It is possible to use `SHA256`, `SHA384`, and `SHA512`. The default digest is `SHA512`. \r\n\r\n### 6.3. RSA example\r\n\r\n```\r\nfrom py2crypt import RSA, SHA256, SHA384, SHA512\r\n\r\nalice = RSA()\r\nalice.hash_algorithm = SHA256()\r\n\r\nbob = RSA()\r\nbob.hash_algorithm = SHA256()\r\n\r\nalice_encrypts_msg = alice.encrypt(bob.public_key(), b'Hello bob')\r\nprint('Alice encrypted msg:', alice_encrypts_msg.hex()[::6], end='\\n\\n')\r\n\r\nalice_sign_msg = alice.sign(alice_encrypts_msg)\r\nprint('Alice signature:', alice_sign_msg.hex()[::6], end='\\n\\n')\r\n\r\nbob_checks_alice_signature = bob.verify(alice.public_key(), alice_sign_msg, alice_encrypts_msg)\r\nprint('Is signature valid?', bob_checks_alice_signature, end='\\n\\n')\r\n\r\nbob_decrypts_alice_msg = bob.decrypt(alice_encrypts_msg)\r\nprint('Bob decrypts msg:', bob_decrypts_alice_msg)\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nAlice encrypted msg: 526c76786a777df93dea64ad09c07d36d73926d27682ecf6149a83c885765dfaeb035676fbf590948c29b52376cbb3fd358b655ce1e2e19bfcba4ff7b7100e0ac65d8f8f3ef435d63efd04d50734be479027b812f27\r\n\r\nAlice signature: 9c311b10a4613ef8bd78813fc6c320b8b859c5fdf3256c42910bc77477126eebbb9a17425a7692560d711f6df1a00bc1e8f5409362057243b8a0e000bc414d509ae6936616e8c33b96e36221fc590d74f05101c0b09\r\n\r\nIs signature valid? True\r\n\r\nBob decrypts msg: b'Hello bob'\r\n```\r\n\r\n## 7. Import/Export\r\n\r\n`export_private_key(private_key) -> bytes`\r\n\r\nExport a private key object as a bytes type.\r\n\r\n`export_public_key(public_key) -> bytes`\r\n\r\nExport a public key object as a bytes type.\r\n\r\n`import_private_key(private_key: bytes)`\r\n\r\nImport a bytes type private key as a private key object.\r\n\r\n`import_public_key(public_key: bytes)`\r\n\r\nImport a bytes type public key as a public key object. \r\n\r\n### 7.1. Import/Export examples\r\n\r\n```\r\nfrom py2crypt import RSA, export_private_key, export_public_key, import_private_key, import_public_key\r\n\r\nrsa = RSA()\r\n\r\noutput_private_key = export_private_key(rsa.private_key())\r\noutput_public_key = export_public_key(rsa.public_key())\r\n\r\ninput_private_key = import_private_key(output_private_key)\r\ninput_public_key = import_public_key(output_public_key)\r\n\r\nprint('output_private_key:', type(output_private_key))\r\nprint('output_public_key:', type(output_public_key))\r\nprint('input_private_key:', type(input_private_key))\r\nprint('input_public_key:', type(input_public_key))\r\n```\r\n\r\nThe output:\r\n\r\n```\r\noutput_private_key: <class 'bytes'>\r\noutput_public_key: <class 'bytes'>\r\ninput_private_key: <class 'cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey'>\r\ninput_public_key: <class 'cryptography.hazmat.backends.openssl.rsa._RSAPublicKey'>\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/badlock/py2crypt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py2crypt",
    "package_url": "https://pypi.org/project/py2crypt/",
    "platform": null,
    "project_url": "https://pypi.org/project/py2crypt/",
    "project_urls": {
      "Homepage": "https://github.com/badlock/py2crypt"
    },
    "release_url": "https://pypi.org/project/py2crypt/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This library provides a top-level interface to the cryptography.io module.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13263926,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "392628ff45d5c7d0242a3ecb69fcda64d7a7418a034e092e20bdbb42e63efa6b",
          "md5": "64945fdfaaee99938fc75d257769b254",
          "sha256": "1b2cfb9d65f6a6f468789595956f3793dddf1817daf99c99f06e51dee4e86476"
        },
        "downloads": -1,
        "filename": "py2crypt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64945fdfaaee99938fc75d257769b254",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11033,
        "upload_time": "2022-03-23T03:01:35",
        "upload_time_iso_8601": "2022-03-23T03:01:35.298451Z",
        "url": "https://files.pythonhosted.org/packages/39/26/28ff45d5c7d0242a3ecb69fcda64d7a7418a034e092e20bdbb42e63efa6b/py2crypt-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "392628ff45d5c7d0242a3ecb69fcda64d7a7418a034e092e20bdbb42e63efa6b",
        "md5": "64945fdfaaee99938fc75d257769b254",
        "sha256": "1b2cfb9d65f6a6f468789595956f3793dddf1817daf99c99f06e51dee4e86476"
      },
      "downloads": -1,
      "filename": "py2crypt-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "64945fdfaaee99938fc75d257769b254",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11033,
      "upload_time": "2022-03-23T03:01:35",
      "upload_time_iso_8601": "2022-03-23T03:01:35.298451Z",
      "url": "https://files.pythonhosted.org/packages/39/26/28ff45d5c7d0242a3ecb69fcda64d7a7418a034e092e20bdbb42e63efa6b/py2crypt-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}