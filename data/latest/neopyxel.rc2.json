{
  "info": {
    "author": "Vinicius Alves",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# neopyxel\nPython library that enables an easy control of Adafruit's Neopixel LED stripes through an Arduino relay via serial connection.\n\n\n## Functionality Implemented\n\nThis library offers an easy-to-use high-level interface to control Adafruit's Neopixel LED stripes or any individually addressable LED stripe controlled by WS281x and supported by [Adafruit's Neopixel Arduino library](https://github.com/adafruit/Adafruit_NeoPixel). This enable the developer to use all the resources and flexibility of Python to develop effects and integrations for LED stripes by relaying commands to the stripes through an arduino working as a relay between the device running Python and the Stripe itself.\n\nTo achieve this, the library uses Serial communication to send commands to the Arduino Relay and implements a series of classes to abstract the physical details and communication processes, summarized as follows:\n\n#### NeopyxelRelay Object\nEstablishes and handles connection with Arduino relay and Stripes objects.\n ```python\nadd_stripe()        # Enables dynamic configuration of stripes on the Arduino Relay\n\nflush_stripes()     # Flushes stripes setted up on the Arduino Relay\n\nset_pixel_color()   # Enables concurrent pixel color setting of all stripes connected to the relay\n\nshow()              # Enables concurrent update of pixels' display of all stripes connected to the relay\n\nseg_segment_color() # Enable concurrent control of stripes segments by abstracting stripes length through \n                     # relative segment position and length referencing\n\nexecute_effect()    # Executes an effect defined by Effect class\n\nstop_effect()       # Stops execution of an effect defined by Effect class\n```\n\n#### Stripe Object\nRepresents a specific stripe connected to the relay.\n```python\nset_pixel_color()   # Sets the color of a specific pixel of the given stripe\n\nshow()              # Updates pixels' display of the given stripe\n\nseg_segment_color() # Sets the color of a segment of the given stripe through \n                    # relative segment position and length referencing\n```\n#### Effect Object\nAn Effect Object is defined through the instantiation of a class that inherits the Effect class. The Effect class provides an interface for the quick development and wrapping of led stripe effects. By using set_segment_color functions, effects can be written regardless of the physical characteristics of the LED stripes on which they will be executed. Effects are composed by a main function that defines the effect to be executed and two Transition objects, that defines how the effect shall be initiated and terminated. \n\n## Installation\n\n#### Arduino Relay Setup Steps\n1. Load the ```neopyxel_relay.ino``` file, found under the *neopyxel_relay* directory, on the Arduino board.\n2. Keep the Arduino board connected to the device that will be running the Python code via USB.\n3. Connect the LED Stripes Data pins to Digital pins on the Arduino (take note of the digital pins chosen, they will be used later).\n\n#### Python Setup\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install neopyxel.\n```bash\npip install neopyxel\n```\n\n## Usage\n\n#### Simple pixel color setup:\n```python\nimport neopyxel\n\n# Instantiate NeopyxelRelay (no arguments are needed, but the COMPORT can be specified in case the detection fails)\nrelay = neopyxel.NeopyxelRelay()\n\n# Add Stripe\nrelay.add_stripe(NUMPIXELS=30, # Number of pixels of the stripe\n                 PIN=5)        # Digital pin to which the stripe is connected\n\n# Set the color of pixel (led) 15 to white\nwhite = (255, 255, 255)\nrelay.set_pixel_color(pixel_number=15,\n                      color=white)\n\n# Update pixel display\nrelay.show()\n```\n\n#### Simple Effect execution:\n```python\nimport sys\nimport neopyxel\nfrom neopyxel import effects\n\n# Instantiate NeopyxelRelay (no arguments are needed, but the COMPORT can be specified in case the detection fails)\nrelay = neopyxel.NeopyxelRelay()\n\n# Add Stripe\nrelay.add_stripe(NUMPIXELS=30, # Number of pixels of the stripe\n                 PIN=5)        # Digital pin to which the stripe is connected\n\n# Execute Effect\ntry:\n  relay.execute_effect(effects.Fireplace)\nexcept KeyboardInterrupt: # Try/Except is employed here to properly terminate effect thread on Ctrl+C\n    relay.stop_effect()\n    relay.flush_stripes()\n    print(\"Ctrl+C pressed...exit\")\n    sys.exit(1)\n```\n\n#### Effect and Trasition Configuration and Execution\n```python\nimport sys\nimport neopyxel\nfrom neopyxel import effects\nfrom neopyxel import trasitions\n\n# Instantiate NeopyxelRelay (no arguments are needed, but the COMPORT can be specified in case the detection fails)\nrelay = neopyxel.NeopyxelRelay()\n\n# Add Stripe\nrelay.add_stripe(NUMPIXELS=30, # Number of pixels of the stripe\n                 PIN=5)        # Digital pin to which the stripe is connected\n\n# Execute Effect\nambar = (240, 80, 30)\ntry:\n  relay.execute_effect(\n         EffectClass=effects.SteadyColor, \n         color=ambar, # SteadyColor effect admits color argument\n         StartTransition=transitions.expand.FromCenter, # These transitions can be used\n         StopTransition=transitions.expand.FromBorders  # by any effects\n  )\nexcept KeyboardInterrupt: # Try/Except is employed here to properly terminate effect thread on Ctrl+C\n    relay.stop_effect()\n    relay.flush_stripes()\n    print(\"Ctrl+C pressed...exit\")\n    sys.exit(1)\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n\n## License\n[GPLv3](https://choosealicense.com/licenses/gpl-3.0/)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/valves-ops/neopyxel",
    "keywords": "arduino,neopixel,led",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neopyxel",
    "package_url": "https://pypi.org/project/neopyxel/",
    "platform": "",
    "project_url": "https://pypi.org/project/neopyxel/",
    "project_urls": {
      "Bug Reports": "https://github.com/valves-ops/neopyxel/issues",
      "Homepage": "https://github.com/valves-ops/neopyxel",
      "Source": "https://github.com/valves-ops/neopyxel"
    },
    "release_url": "https://pypi.org/project/neopyxel/1.1.0/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": ">=3.5, <4",
    "summary": "High-level interface to control neopixel     led stripes with an arduino as relay",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8562514,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7f090132bd0e875040256892a306b9c24589b7f3f6a00f6df8ed4d681bb989e",
          "md5": "8c251f035de56a63e00dcfbfddd5644c",
          "sha256": "a469cacda8179a6fe73315b3155340a49624fe8a4c37ce4c82fa7c4264fba2a7"
        },
        "downloads": -1,
        "filename": "neopyxel-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c251f035de56a63e00dcfbfddd5644c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 23062,
        "upload_time": "2020-10-17T20:01:00",
        "upload_time_iso_8601": "2020-10-17T20:01:00.043473Z",
        "url": "https://files.pythonhosted.org/packages/d7/f0/90132bd0e875040256892a306b9c24589b7f3f6a00f6df8ed4d681bb989e/neopyxel-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf1787d653a6587c9437b98c59cf015f473347316e7edcafc2074e8fcfc627a",
          "md5": "66d35ba1192b90ba44c9bebdb0bf7e0c",
          "sha256": "483103ccb910ed8b6543cb8e5a13acb753a6c2ad6ece95971c4dcdf1e446c9e6"
        },
        "downloads": -1,
        "filename": "neopyxel-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66d35ba1192b90ba44c9bebdb0bf7e0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 23341,
        "upload_time": "2020-11-02T17:39:16",
        "upload_time_iso_8601": "2020-11-02T17:39:16.741118Z",
        "url": "https://files.pythonhosted.org/packages/dd/f1/787d653a6587c9437b98c59cf015f473347316e7edcafc2074e8fcfc627a/neopyxel-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddf1787d653a6587c9437b98c59cf015f473347316e7edcafc2074e8fcfc627a",
        "md5": "66d35ba1192b90ba44c9bebdb0bf7e0c",
        "sha256": "483103ccb910ed8b6543cb8e5a13acb753a6c2ad6ece95971c4dcdf1e446c9e6"
      },
      "downloads": -1,
      "filename": "neopyxel-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66d35ba1192b90ba44c9bebdb0bf7e0c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <4",
      "size": 23341,
      "upload_time": "2020-11-02T17:39:16",
      "upload_time_iso_8601": "2020-11-02T17:39:16.741118Z",
      "url": "https://files.pythonhosted.org/packages/dd/f1/787d653a6587c9437b98c59cf015f473347316e7edcafc2074e8fcfc627a/neopyxel-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}