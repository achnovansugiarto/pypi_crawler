{
  "info": {
    "author": "Israel Roldan",
    "author_email": "israel.alberto.rv@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Games/Entertainment",
      "Topic :: Security",
      "Topic :: System :: Networking",
      "Topic :: System :: Networking :: Monitoring"
    ],
    "description": "# SniParInject\n\nIt is the abbreviation of these three word: Sniffer, Parser and Inject.\nIntercept and read the network packets to find information about the game, but\nit could be useful for any network sniffer purpose. The injection is coming\nsoon.\n\nThis project is work in progress. Reefer to the [To-Do's][todo] list to check\nwhat is done and what is coming.\n\n## Run it\n\n### Locally\n\nFor more information go to the [package's page in PyPi][pypi].\n\nInstall the package.\n\n```bash\npython3 -m pip install sniparinject\n```\n\n### As a developer\n\nThe only two special Python's packages that you need are `scapy` and\n`PyYAML`, the suggested version of `Python` is `>= 3.9`. Follow the commands to\nset up and install this package.\n\n```bash\ngit clone https://github.com/airvzxf/sniparinject.git\ncd sniparinject || exit 123\n./script/setup-dev.bash\n```\n\nAfter this setup, it could be easy to activate the vEnv and start to work.\n\n```bash\n# Inside of the GitHub cloned directory.\nsource ./venv/bin/activate\ncd src/sniparinject || exit 123\n# Make modification to the source code files.\n# Run your changes.\n# Finally deactivate the vEnv.\ndeactivate\n```\n\n## Usage\n\nThe most basic setup is creating one Python file, and the settings file.\n\n`main.py`\n\n```python\n#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\n\"\"\"\nThe most basic example of SniParInject.\n\"\"\"\nfrom sniparinject.network_sniffer import NetworkSniffer\n\nif __name__ == '__main__':\n    SETTINGS_PATH = 'settings.yml'\n    NetworkSniffer(SETTINGS_PATH).start()\n```\n\n`settings.yml`\n\n```yaml\n%YAML 1.1\n---\nNetwork:\n  interface: enp4s0\n\nServer:\n  ip: 52.174.196.146\n  port: 5122\n\nGame:\n  node:\n    actions:\n      0x7d:\n        title: Scenario change\n      0x85:\n        title: Player move to\n        display_message: Yes\n        structs:\n          - type: chars\n            size: 3\n            output:\n              type: hex\n  host:\n    actions:\n      0x78:\n        title: NPC Info\n        structs:\n          - name: ID\n            type: unsigned int\n            output:\n              type: hex\n              auto_zero_fill: Yes\n          - type: chars\n            size: 1\n            output:\n              type: hex\n          - name: HP\n            type: unsigned short\n          - name: Max HP\n            type: unsigned short\n```\n\nThe settings, needs to set the network interface which could get by the\ncommand `ip addr` or `ls -1 /sys/class/net`. The next two are the host IP and\nits port, in our case we will use the game IP and port. You could use this\ncommand `lsof -i` to show all the process which has connection to the network,\ncheck the column `NAME` to review the connection\n`manaplus   5563 wolf ... MSIGT73EVR7RF:55238->52.174.196.146:5122\n(ESTABLISHED)`. Also, another command is\n`sudo netstat -nap | grep -i NAME_OF_GAME_PROCESS`.\n\nExecute the application:\n\n```bash\n# Execute with root permissions the main script.\nsudo python3 main.py\n```\n\n### Example\n\nThis example is for the game `Mana Plus`.\n\n[![asciicast][ascii-mana-image]][ascii-mana-link]\n\n## Settings\n\nThis software **does not need** to **modify** any file in the **source code**.\nCreate a `settings.yml` file which is able to add, modify or remove any parse\nrules.\n\n### Examples\n\nThe required fields for the `Server` information are `ip`, `port` or both.\n\n```yaml\nNetwork:\n  interface: enp4s0\n\nServer:\n  ip: 52.174.196.146\n  port: 5122\n```\n\n---\n\nThe default protocol is `TCP` but you can assign the `UDP`.\n\n```yaml\nNetwork:\n  interface: enp4s0\n\nServer:\n  protocol: UDP\n  port: 6666\n```\n\n---\n\nThis is the basic structure without any rule.\n\n```yaml\nGame:\n  node:\n  host:\n```\n\n---\n\nExample for node, which is the raw data send from your computer to the server.\n\nHere will capture all the packets which start with the id `0x7d` equal to the\nraw data `\\x00\\x7d`. It will print in your console:\n`--> Scenario change |` every time your computer send to the server this\npacket.\n\nThe action `0x85` equal to the raw data `\\x00\\x85`. It will print in your\nconsole: `--> Player move to | a07f18 |`. Means the player communicate to the\nserver that it is moving to this position.\n\n```yaml\nGame:\n  node:\n    actions:\n      0x7d:\n        title: Scenario change\n      0x85:\n        title: Player move to\n        structs:\n          - type: chars\n            size: 3\n            output:\n              type: hex\n```\n\n---\n\nSame example as above, but we do not want to print the action `Player move to`.\nAdd `display_message: No` in the action which want to avoid the print.\n\n```yaml\nGame:\n  node:\n    actions:\n      0x7d:\n        title: Scenario change\n      0x85:\n        title: Player move to\n        display_message: No\n        structs:\n          - type: chars\n            size: 3\n            output:\n              type: hex\n```\n\n---\n\nSame example as above, but we do not want to print any node action, it means\nthe actions sent by you computer to the server. It will print only the host's\nactions. The default value for the node/host or actions is always\n`display_message: Yes`, it does need to set explicitly.\n\n```yaml\nGame:\n  node:\n    display_message: No\n    actions:\n      0x7d:\n        title: Scenario change\n  host:\n    actions:\n      0xad:\n        title: Scenario change\n```\n\n---\n\nWhat are the structs? It is the way that it will parse the data. Basically,\nsplit the raw data based on the Python Structs which are C Types. They are\nwell-known as an integer, char, long, float, etc. You will find information in\nthe official web page [Python Structs][structs]. In the game the function which\ncontains this logic is\n`def _get_struct(self, struct_type: str, repeat_count: int = 1)`\nin `./core/game.py`.\n\n```python\n# 'ID': ('Python struct symbol', Size in bytes)\nstructs = {\n    'char': ('c', 1),\n    'signed char': ('b', 1),\n    'unsigned char': ('B', 1),\n    'bool': ('?', 1),\n    'short': ('h', 2),\n    'unsigned short': ('H', 2),\n    'int': ('i', 4),\n    'unsigned int': ('I', 4),\n    'long': ('q', 8),\n    'unsigned long': ('Q', 8),\n    'half precision': ('e', 2),\n    'float': ('f', 4),\n    'double': ('d', 6),\n    'chars': ('s', 0),\n}\n```\n\n---\n\nThe option `size` returns the number of repeats of this struct. One example is\nif the setting's action has `type: int` and `size: 8`, it will returns\n`4i` and it is exactly the same to write `iiii`. The example below will\nreturn `5s`.\n\n```yaml\nstructs:\n  - type: chars\n    size: 5\n```\n\n---\n\nIn this example it will take the raw data and split in two. The first is an\n`unsigned int` with `4 bytes` of size and the `char` with `1 byte` of size. The\nraw data could be `\\x00\\x80 \\x0f\\x00\\x00\\x00 \\xf8`, I split intentional with\nspaces to be more clear. The rule in the example take the first\n`unsigned short` value as an action ID (`\\x00\\x80` equal to `0x80`), then\nextract as a `unsigned int` the monster ID, and the last byte as an unknown.\nThe output will be `---> NPC Monster Check | ID 0x0000000f | 0xf8 |`. Note in\nthe monster ID that the raw data, and the output is different:\n`\\x0f\\x00\\x00\\x00` vs `0x0000000f`. It is because the network data is coming\nin `big-endian` and the human / machine-readable for numbers is\nin `little-endian`.\n\n```yaml\nGame:\n  node:\n    actions:\n      0x80:\n        title: NPC Monster Check\n        structs:\n          - name: ID\n            type: unsigned int\n            output:\n              type: hex\n              auto_zero_fill: Yes\n          - type: chars\n            size: 1\n            output:\n              type: hex\n```\n\n---\n\nIn every struct there is an option to add the name which will display before\nthe value. In the follow example the first struct does not have the name, and\nthe second has the name id. The output will be\n`---> NPC Monster Check | 56 | ID 78 |`.\n\n```yaml\nGame:\n  node:\n    actions:\n      0x80:\n        title: NPC Monster Check\n        structs:\n          - type: unsigned int\n          - name: ID\n            type: unsigned int\n```\n\n---\n\nWhat happen if I do not use the `output` as an `hex`? It will show the raw\ndata: `---> NPC Monster Check | ID b'\\x00\\x00\\x00\\x0f' |`\n\n```yaml\nGame:\n  node:\n    actions:\n      0x80:\n        title: NPC Monster Check\n        structs:\n          - name: ID\n            type: chars\n            size: 4\n```\n\n---\n\nTake a little break for output and check the `reference` option. In the middle\ntime that you are parsing the data, some findings will be discovered for\nexample the ID types of the shop options. It is possible to map this\ninformation and display as a text in the output. Adding `reference:\n*node_shop_options` to your settings, it will take the section referring with\nthe ID `shop_options: &node_shop_options`. If the value is not in the map, it\nwill print as usual.\n\nGiven the raw data `\\x00\\xc5 \\x00`, the output will be\n`---> Shop store | ID Buy |`.\n\nGiven the raw data `\\x00\\xc5 \\x01`, the output will be\n`---> Shop store | ID Sell |`.\n\nGiven the raw data `\\x00\\xc5 \\x5a`, the output will be\n`---> Shop store | ID 0x5a |`.\n\n```yaml\nGame:\n  node:\n    references:\n      shop_options: &node_shop_options\n        0x0: 'Buy'\n        0x1: 'Sell'\n    actions:\n      0xc5:\n        title: Shop store\n        structs:\n          - name: ID\n            type: unsigned char\n            reference: *node_shop_options\n            output:\n              type: hex\n              auto_zero_fill: Yes\n```\n\n---\n\nFormatting the `output` is possible with these options `zero_fill`,\n`auto_zero_fill`, `fill` and `fill_left`.\n\n- `zero_fill` - Add zeros to the left for example if you have for digits as an\n  output `0x12` and the property set to `8`, it will display:\n  `00000x12`.\n- `auto_zero_fill` - Add zeros to the left taking the type of the structure.\n  For example if you have an `integer` with `byte size of 4`, but the value\n  is `5`. The output without this option will be `0x05`, then if your next\n  value is `123456789` the output will be `0x75bcd15`. Keep aligned the output\n  and using the property `auto_zero_fill: Yes` it will display both numbers\n  as`0000000x05` and `00x75bcd15` because the\n  `integer` is `4 bytes` equal to `00 00 00 00` plus the pre-fix `0x`, it means\n  10 digits.\n- `fill` - Same as `zero_fill` but add blank spaces to the right of the value.\n- `fill_left` - Same as the previous option but add blank spaces to the left of\n  the value.\n\n```yaml\nGame:\n  node:\n    actions:\n      0x146:\n        title: NPC Dialog close\n        structs:\n          - type: unsigned int\n            output:\n              type: hex\n              zero_fill: 20\n          - type: unsigned int\n            output:\n              type: hex\n              auto_zero_fill: Yes\n          - type: unsigned int\n            output:\n              type: hex\n              fill: 9\n          - type: unsigned int\n            output:\n              type: hex\n              fill_left: 17\n```\n\n## Endian\n\nAll the data coming from the network or server usually is big-endian, to read\nthis as the game interpretation needs to convert to little-endian. In this\nexample if you receive a raw data `ff 00 ab 14 36 f0 1f`. The parse should be:\n\n- ID Action package: `ff 00` = `0x00ff` = `255`.\n- ID Monster: `ab 14 36 f0` = `0xf03614ab`.\n- Unknown: `1f` = `0x1f` = `31`.\n\nEnjoy!\n\n\n[pypi]: https://pypi.org/project/sniparinject/\n\n[todo]: https://github.com/airvzxf/sniparinject/blob/main/TODO.md\n\n[ascii-mana-image]: https://asciinema.org/a/R0mxcmrpWHzX96NDJyc7kyTDB.svg\n\n[ascii-mana-link]: https://asciinema.org/a/R0mxcmrpWHzX96NDJyc7kyTDB\n\n[structs]: https://docs.python.org/3/library/struct.html#format-characters\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/airvzxf/sniparinject",
    "keywords": "network,networking,packet,packets,sniffer,parser,inject,injection,hack,video games,games",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sniparinject",
    "package_url": "https://pypi.org/project/sniparinject/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/sniparinject/",
    "project_urls": {
      "Bug Tracker": "https://github.com/airvzxf/sniparinject/issues",
      "Homepage": "https://github.com/airvzxf/sniparinject",
      "Source Code": "https://github.com/airvzxf/sniparinject"
    },
    "release_url": "https://pypi.org/project/sniparinject/0.0.0.dev7/",
    "requires_dist": [
      "PyYAML (>=5.4.1)",
      "scapy (>=2.4.5)"
    ],
    "requires_python": ">=3.9",
    "summary": "Intercept and read the network packets to find useful information. Also, inject some data.",
    "version": "0.0.0.dev7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10685298,
  "releases": {
    "0.0.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f21573fca5dc9655e25f4fbabed4c945b72497854a495b16c5cb1341cce4e0f",
          "md5": "fe83c1ff9cd9cc784554205921702296",
          "sha256": "119f76f70574fd46f2e86e8c6a4539346a5c5fe408a4ec5ecaed673c750ddbca"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe83c1ff9cd9cc784554205921702296",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 21147,
        "upload_time": "2021-06-15T19:43:32",
        "upload_time_iso_8601": "2021-06-15T19:43:32.765834Z",
        "url": "https://files.pythonhosted.org/packages/6f/21/573fca5dc9655e25f4fbabed4c945b72497854a495b16c5cb1341cce4e0f/sniparinject-0.0.0.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e4d682a2285b9a223c93b325ddf44ca77135841c2429e48adfd0dfaf579ab0",
          "md5": "a084c5655b8fab2120f9cdac759ca1fb",
          "sha256": "aeb36db1d8fb0e9b78791e1ed3add20e9864d593e48791418a6a7e22d51af2ed"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "a084c5655b8fab2120f9cdac759ca1fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20295,
        "upload_time": "2021-06-15T19:43:34",
        "upload_time_iso_8601": "2021-06-15T19:43:34.364999Z",
        "url": "https://files.pythonhosted.org/packages/10/e4/d682a2285b9a223c93b325ddf44ca77135841c2429e48adfd0dfaf579ab0/sniparinject-0.0.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2257329ae31a272b98cc814b1c961409087c0665702b2638f87863031f2fa948",
          "md5": "9958f4bb8434ad894090101cc49cf37e",
          "sha256": "4b3191663b8b83ca3211689d67c255b552ee30234e12c39feed5cbda3947d437"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9958f4bb8434ad894090101cc49cf37e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 21228,
        "upload_time": "2021-06-16T05:41:26",
        "upload_time_iso_8601": "2021-06-16T05:41:26.699672Z",
        "url": "https://files.pythonhosted.org/packages/22/57/329ae31a272b98cc814b1c961409087c0665702b2638f87863031f2fa948/sniparinject-0.0.0.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bae5d29b078036d6aa82a1d6ee424be71818e396aae5da21efd661819651083e",
          "md5": "26b8d4a10e388523dc37b5a60494542b",
          "sha256": "2ec0aa4db09bb74dd0f7ec155264b42db70f595d83a06273f4cc52d9044b7f8a"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "26b8d4a10e388523dc37b5a60494542b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20553,
        "upload_time": "2021-06-16T05:41:27",
        "upload_time_iso_8601": "2021-06-16T05:41:27.919087Z",
        "url": "https://files.pythonhosted.org/packages/ba/e5/d29b078036d6aa82a1d6ee424be71818e396aae5da21efd661819651083e/sniparinject-0.0.0.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev3": [],
    "0.0.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "635b40ca53f50cff57a9c8bce3d0abd218510adbcab962fcf65f4b60acb6137a",
          "md5": "56d6063cbc743a7055f55b1e03730138",
          "sha256": "3aa744818780057e5dd530318385b55256694eb79ea77304a6eca2b56474e6de"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56d6063cbc743a7055f55b1e03730138",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 24653,
        "upload_time": "2021-06-17T07:34:06",
        "upload_time_iso_8601": "2021-06-17T07:34:06.397950Z",
        "url": "https://files.pythonhosted.org/packages/63/5b/40ca53f50cff57a9c8bce3d0abd218510adbcab962fcf65f4b60acb6137a/sniparinject-0.0.0.dev4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22133be21e68245b50450c183b0e7d3ea62ca97f06cf8b2c1e6adad44ddceb8b",
          "md5": "c65aeeebb54eb9590e9c1de63b37ed24",
          "sha256": "d6ba0ee542f02a3291ccb62eb18d3fd7ebaa035fcc4015b95de8180933dba3a4"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "c65aeeebb54eb9590e9c1de63b37ed24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26979,
        "upload_time": "2021-06-17T07:34:08",
        "upload_time_iso_8601": "2021-06-17T07:34:08.119124Z",
        "url": "https://files.pythonhosted.org/packages/22/13/3be21e68245b50450c183b0e7d3ea62ca97f06cf8b2c1e6adad44ddceb8b/sniparinject-0.0.0.dev4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfd1391c502e9ca2c107d35e4429ad29e9c3db566cf4fca7471e1ed97bcb2956",
          "md5": "79bb95f302cf513c3a608fd59b12f6e8",
          "sha256": "4b6aef406d3495438d923b0395d7b53bf3c9153819de3727bb3d706f39586880"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79bb95f302cf513c3a608fd59b12f6e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 24642,
        "upload_time": "2021-06-17T08:21:58",
        "upload_time_iso_8601": "2021-06-17T08:21:58.177511Z",
        "url": "https://files.pythonhosted.org/packages/cf/d1/391c502e9ca2c107d35e4429ad29e9c3db566cf4fca7471e1ed97bcb2956/sniparinject-0.0.0.dev5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "687c535bf034e8ca6f7adca60cdb3843f85ddff22000193cd895b4236b9a1b5a",
          "md5": "61d598b9c6bb56b9a9eeccf115f16fa6",
          "sha256": "300a358c455c62922da26d512278625e2661632d0256cf54a442d3eafa283cc9"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev5.tar.gz",
        "has_sig": false,
        "md5_digest": "61d598b9c6bb56b9a9eeccf115f16fa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26926,
        "upload_time": "2021-06-17T08:21:59",
        "upload_time_iso_8601": "2021-06-17T08:21:59.243920Z",
        "url": "https://files.pythonhosted.org/packages/68/7c/535bf034e8ca6f7adca60cdb3843f85ddff22000193cd895b4236b9a1b5a/sniparinject-0.0.0.dev5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3c474e9e408c62ccd555aeeddcf10c2b37a73ef74776aa6b20e8ed9187da1b6",
          "md5": "1b851b521f8e5c3e10956e0378e19a68",
          "sha256": "4de8bf3eb040470e62209abb246dc444f581f6701426201dc7aaf00db8726902"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b851b521f8e5c3e10956e0378e19a68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12327,
        "upload_time": "2021-06-18T02:23:21",
        "upload_time_iso_8601": "2021-06-18T02:23:21.296222Z",
        "url": "https://files.pythonhosted.org/packages/b3/c4/74e9e408c62ccd555aeeddcf10c2b37a73ef74776aa6b20e8ed9187da1b6/sniparinject-0.0.0.dev6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfda4918daa1b8a7898ce312e6a95c36d2f3cd29ca1c87e1ccc71b9d7ca8a479",
          "md5": "79e9aa7c9f14279d8d896237d2526609",
          "sha256": "72dc944df3aaeabe2655a1c994e65d45ddc12f4a5de418a43b3fa2c658336204"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev6.tar.gz",
        "has_sig": false,
        "md5_digest": "79e9aa7c9f14279d8d896237d2526609",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14765,
        "upload_time": "2021-06-18T02:23:22",
        "upload_time_iso_8601": "2021-06-18T02:23:22.492804Z",
        "url": "https://files.pythonhosted.org/packages/bf/da/4918daa1b8a7898ce312e6a95c36d2f3cd29ca1c87e1ccc71b9d7ca8a479/sniparinject-0.0.0.dev6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "558094bb1adc6616089c947b6f904b6e1d8dc28300e6b61e7383ee27fda95233",
          "md5": "88e88e16faf8f5c00daa5661fc59ec5a",
          "sha256": "06cb2ac08249a8aa00d131b445090f9d8399e66a9d14b6746437642e6330b0f8"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88e88e16faf8f5c00daa5661fc59ec5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12602,
        "upload_time": "2021-06-18T15:23:21",
        "upload_time_iso_8601": "2021-06-18T15:23:21.745728Z",
        "url": "https://files.pythonhosted.org/packages/55/80/94bb1adc6616089c947b6f904b6e1d8dc28300e6b61e7383ee27fda95233/sniparinject-0.0.0.dev7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a959d1d1f92973e0b4b7c7b000c64e814ee95c3a094525de0eaca3d9c35742f3",
          "md5": "faaf32ff250e5af3be4b957d121bd59e",
          "sha256": "b645327a8722683059cbd19e423cf8cfd8173d37e7bd7d00aefa3b27ec998182"
        },
        "downloads": -1,
        "filename": "sniparinject-0.0.0.dev7.tar.gz",
        "has_sig": false,
        "md5_digest": "faaf32ff250e5af3be4b957d121bd59e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 15083,
        "upload_time": "2021-06-18T15:23:23",
        "upload_time_iso_8601": "2021-06-18T15:23:23.546888Z",
        "url": "https://files.pythonhosted.org/packages/a9/59/d1d1f92973e0b4b7c7b000c64e814ee95c3a094525de0eaca3d9c35742f3/sniparinject-0.0.0.dev7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "558094bb1adc6616089c947b6f904b6e1d8dc28300e6b61e7383ee27fda95233",
        "md5": "88e88e16faf8f5c00daa5661fc59ec5a",
        "sha256": "06cb2ac08249a8aa00d131b445090f9d8399e66a9d14b6746437642e6330b0f8"
      },
      "downloads": -1,
      "filename": "sniparinject-0.0.0.dev7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "88e88e16faf8f5c00daa5661fc59ec5a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 12602,
      "upload_time": "2021-06-18T15:23:21",
      "upload_time_iso_8601": "2021-06-18T15:23:21.745728Z",
      "url": "https://files.pythonhosted.org/packages/55/80/94bb1adc6616089c947b6f904b6e1d8dc28300e6b61e7383ee27fda95233/sniparinject-0.0.0.dev7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a959d1d1f92973e0b4b7c7b000c64e814ee95c3a094525de0eaca3d9c35742f3",
        "md5": "faaf32ff250e5af3be4b957d121bd59e",
        "sha256": "b645327a8722683059cbd19e423cf8cfd8173d37e7bd7d00aefa3b27ec998182"
      },
      "downloads": -1,
      "filename": "sniparinject-0.0.0.dev7.tar.gz",
      "has_sig": false,
      "md5_digest": "faaf32ff250e5af3be4b957d121bd59e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 15083,
      "upload_time": "2021-06-18T15:23:23",
      "upload_time_iso_8601": "2021-06-18T15:23:23.546888Z",
      "url": "https://files.pythonhosted.org/packages/a9/59/d1d1f92973e0b4b7c7b000c64e814ee95c3a094525de0eaca3d9c35742f3/sniparinject-0.0.0.dev7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}