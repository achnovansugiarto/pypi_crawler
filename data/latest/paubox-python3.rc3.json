{
  "info": {
    "author": "Paubox",
    "author_email": "info@paubox.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<img src=\"https://avatars.githubusercontent.com/u/22528478?s=200&v=4\" alt=\"Paubox\" width=\"150px\">\n\n# Paubox Python3 Package\n\nThis is the official **Python3** package for the Paubox Email API. \n\nThe Paubox Email API allows your application to send secure, HIPAA compliant email via [Paubox](https://www.paubox.com) and track email deliveries and opens.\n\n# Table of Contents\n*  [Installation](#installation)\n*  [Usage](#usage)\n*  [Contributing](#contributing)\n*  [License](#license)\n\n## External Resources\n*  [Documentation](https://docs.paubox.com/)\n*  [Quickstart Guide](https://docs.paubox.com/docs/paubox_email_api/quickstart)\n*  [Changelog](https://github.com/Paubox/paubox-python3/blob/master/CHANGELOG.md)\n\n<a name=\"#installation\"></a>\n## Installation\n\n### Getting Paubox API Credentials\nYou will need to have a Paubox account. You can [sign up here](https://www.paubox.com/pricing#paubox-email-api).\n\nOnce you have an account, follow the instructions on the REST API dashboard to verify domain ownership and generate API keys. Further **[quickstart instructions for this process can be found here.](https://docs.paubox.com/docs/paubox_email_api/quickstart)**\n\n### Configuring API Credentials Locally\n\nWhile you can simply hard-code your authentication credentials, it's often better practice to tuck these values away in an environment or configuration file. Our following code snippets leverage the use of the [`config`](https://docs.red-dove.com/cfg/python.html#python-getting-started) python package to load our credentials. To set `config` up, include your API key credentials in a config file (e.g. `config.cfg`)\n\n```\nPAUBOX_HOST: 'https://api.paubox.net/v1/YOUR_ENDPOINT_NAME'\nPAUBOX_API_KEY: 'YOUR_API_KEY'\n```\n\nThen, install the `config` package using pip3 to load API credentials from the\n`config.cfg` file:\n\n```\n$ pip3 install config\n```\n\n### Install Package\n```\n$ pip3 install paubox-python3\n```\n\n### Dependencies\n[Requests](https://github.com/requests/requests)\n\n<a name=\"#usage\"></a>\n## Usage\n\n### Sending Messages with the Paubox Mail Helper\n\nSending via Paubox is easy. This is the minimum content needed to send an email.\n\n```python\nimport paubox\nfrom paubox.helpers.mail import Mail\n\nfrom config import Config \nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nrecipients = [\"recipient@example.com\"]\nfrom_ = \"sender@yourdomain.com\"\nsubject = \"Testing!\"\ncontent = {\"text/plain\": \"Hello World!\"}\nmail = Mail(from_, subject, recipients, content)\nresponse = paubox_client.send(mail.get())\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n### Sending Messages without the Mail Helper Class\n```python\nimport paubox\n\nfrom config import Config \nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nmail = {\n    \"data\": {\n        \"message\": {\n            \"recipients\": [\n                \"recipient@example.com\"\n            ],\n            \"headers\": {\n                \"subject\": \"Testing!\",\n                \"from\": \"sender@yourdomain.com\"\n            },\n            \"content\": {\n                \"text/plain\": \"Hello World!\",\n            }\n        }\n    }\n}\nresponse = paubox_client.send(mail)\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n### Allowing non-TLS message delivery\n\nIf you want to send non-PHI mail that does not need to be HIPAA compliant, you can allow the message delivery to take place even if a TLS connection is unavailable.\n\nThis means the message will not be converted into a secure portal message when a nonTLS connection is encountered. For this, just pass `allowNonTLS` as `True` as shown below:\n\n#### Using Mail Class Helper\n```python\nimport paubox\nfrom paubox.helpers.mail import Mail\n\nfrom config import Config \nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nrecipients = [\"recipient@example.com\"]\nfrom_ = \"sender@yourdomain.com\"\nsubject = \"Testing!\"\ncontent = {\n    \"text/plain\": \"Hello World!\"    \n}\noptional_headers = {    \n    'reply_to': 'replies@yourdomain.com',    \n    'allowNonTLS': True\n}\nmail = Mail(from_, subject, recipients, content, optional_headers)\nresponse = paubox_client.send(mail.get())\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n#### Without the Mail Class Helper\n```python\nimport paubox\n\nfrom config import Config \nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nmail = {\n    \"data\": {\n        \"message\": {\n            \"recipients\": [\n                \"recipient@example.com\"\n            ],            \n            'allowNonTLS': True,\n            \"headers\": {\n                \"subject\": \"Testing!\",\n                \"from\": \"Sender <sender@yourdomain.com>\",\n                \"reply-to\": \"Reply-to <replies@yourdomain.com>\"\n            },\n            \"content\": {\n                \"text/plain\": \"Hello World!\",              \n            }            \n        }\n    }\n}\nresponse = paubox_client.send(mail)\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n### Forcing Secure Notifications\n\nPaubox Secure Notifications allow an extra layer of security, especially when coupled with an organization's requirement for message recipients to use 2-factor authentication to read messages (this setting is available to org administrators in the Paubox Admin Panel).\n\nInstead of receiving an email with the message contents, the recipient will receive a notification email that they have a new message in Paubox.\n\nTo enable this, pass the `forceSecureNotification` header as `True` as shown below:\n\n#### Using Mail Class Helper\n```python\nimport paubox\nfrom paubox.helpers.mail import Mail\n\nfrom config import Config\nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nrecipients = [\"recipient@example.com\"]\nfrom_ = \"sender@yourdomain.com\"\nsubject = \"Testing!\"\ncontent = {\n    \"text/plain\": \"Hello World!\"    \n}\noptional_headers = {    \n    'reply_to': 'replies@yourdomain.com',    \n    'forceSecureNotification': True\n}\nmail = Mail(from_, subject, recipients, content, optional_headers)\nresponse = paubox_client.send(mail.get())\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n#### Without the Mail Class Helper\n```python\nimport paubox\n\nfrom config import Config\nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nmail = {\n    \"data\": {\n        \"message\": {\n            \"recipients\": [\n                \"recipient@example.com\"\n            ],                        \n            'forceSecureNotification': 'true',\n            \"headers\": {\n                \"subject\": \"Testing!\",\n                \"from\": \"Sender <sender@yourdomain.com>\",\n                \"reply-to\": \"Reply-to <replies@yourdomain.com>\"\n            },\n            \"content\": {\n                \"text/plain\": \"Hello World!\"             \n            }            \n        }\n    }\n}\nresponse = paubox_client.send(mail)\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n### Sending Messages with all available headers\n\n#### Using Mail Class Helper\n```python\nimport paubox\nimport base64\nfrom paubox.helpers.mail import Mail\n\nfrom config import Config\nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nrecipients = [\"recipient@example.com\"]\nfrom_ = \"sender@yourdomain.com\"\nsubject = \"Testing!\"\nattachment_content = base64.b64encode(bytes(\"Hello World!\", encoding=\"utf-8\")).decode()\ncontent = {\n    \"text/plain\": \"Hello World!\",\n    \"text/html\": \"<html><body><h1>Hello World!</h1></body></html>\"\n}\noptional_headers = {\n    \"attachments\": [{\n        \"fileName\": \"the_file.txt\",\n        \"contentType\": \"text/plain\",\n        \"content\": attachment_content\n    }],\n    'reply_to': 'replies@yourdomain.com',\n    'bcc': 'recipient2@example.com',\n    'cc':['recipientcc@example.com'],\n    'forceSecureNotification': 'true',\n    'allowNonTLS': True\n}\nmail = Mail(from_, subject, recipients, content, optional_headers)\nresponse = paubox_client.send(mail.get())\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n#### Without the Mail Class Helper\n```python\nimport paubox\nimport base64\n\nfrom config import Config\nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\nattachment_content = base64.b64encode(\"Hello World!\".encode('utf-8')).decode('utf-8')\nmail = {\n    \"data\": {\n        \"message\": {\n            \"recipients\": [\n                \"recipient@example.com\"\n            ],\n            \"bcc\": [\"recipient2@example.com\"],\n            'cc':['recipientcc@example.com'],\n            'forceSecureNotification':'true',\n            'allowNonTLS': True,\n            \"headers\": {\n                \"subject\": \"Testing!\",\n                \"from\": \"Sender <sender@yourdomain.com>\",\n                \"reply-to\": \"Reply-to <replies@yourdomain.com>\"\n            },\n            \"content\": {\n                \"text/plain\": \"Hello World!\",\n                \"text/html\": \"<html><body><h1>Hello World!</h1></body></html>\"\n            },\n            \"attachments\": [{\n                    \"fileName\": \"the_file.txt\",\n                    \"contentType\": \"text/plain\",\n                    \"content\": attachment_content\n            }]\n        }\n    }\n}\nresponse = paubox_client.send(mail)\nprint(response.status_code)\nprint(response.headers)\nprint(response.text)\n```\n\n### Checking Email Dispositions\nThe `SOURCE_TRACKING_ID` of a message is returned in the response.text of your send request. Use response.to_dict to access the response text as a dictionary.\n```python\nimport paubox\n\nfrom config import Config\nwith open(\"config.cfg\") as config_file:\n    paubox_config = Config(config_file)\n\npaubox_client = paubox.PauboxApiClient(paubox_config.PAUBOX_API_KEY, paubox_config.PAUBOX_HOST)\ndisposition_response = paubox_client.get(\"SOURCE_TRACKING_ID\")\nprint(disposition_response.status_code)\nprint(disposition_response.headers)\nprint(disposition_response.text)\n```\n<a name=\"#contributing\"></a>\n## Contributing\nThe Paubox-python3 SDK is maintained by [Paubox, Inc.](https://www.paubox.com)\n\nWe want to empower our users building applications with the Paubox Email API, and so we encourage you to file bug reports/create GitHub issues and pull requests. Chances are other developers using our Email API might be having similar ideas about new features or approaches to improving the SDK, so we encourage you to upvote or comment on existing issues or pull requests! \n\n<a name=\"#license\"></a>\n## License\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n## Copyright\nCopyright &copy; 2021, Paubox, Inc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Paubox/paubox-python3",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paubox-python3",
    "package_url": "https://pypi.org/project/paubox-python3/",
    "platform": "",
    "project_url": "https://pypi.org/project/paubox-python3/",
    "project_urls": {
      "Homepage": "https://github.com/Paubox/paubox-python3"
    },
    "release_url": "https://pypi.org/project/paubox-python3/1.0.1/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "Python3 SDK for Paubox Email REST API",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10604075,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebeedf441e07662ffe377eb988a7b3fb46af8005fc64654a3b79de21e296172",
          "md5": "b2012d4ecc749167b3d70ae8b5035f3d",
          "sha256": "ef3939216435c4ad5b0e02bbb40a05c35b72cc08f03de7752cbe4b7d9f9ba081"
        },
        "downloads": -1,
        "filename": "paubox-python3-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2012d4ecc749167b3d70ae8b5035f3d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10254,
        "upload_time": "2021-05-14T00:01:02",
        "upload_time_iso_8601": "2021-05-14T00:01:02.449452Z",
        "url": "https://files.pythonhosted.org/packages/1e/be/edf441e07662ffe377eb988a7b3fb46af8005fc64654a3b79de21e296172/paubox-python3-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f51eba6f8e550e1e64cce9f70f937893cf5051795fdc9220e0f44d03060782e6",
          "md5": "a41e53adb8b8847630e523522e9fa2d3",
          "sha256": "910e14fb9b8f76ac2443c87a62560f46a0993aaeaf9c37954f4cbc1cf48d7c70"
        },
        "downloads": -1,
        "filename": "paubox_python3-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a41e53adb8b8847630e523522e9fa2d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13523,
        "upload_time": "2021-06-09T19:05:48",
        "upload_time_iso_8601": "2021-06-09T19:05:48.806136Z",
        "url": "https://files.pythonhosted.org/packages/f5/1e/ba6f8e550e1e64cce9f70f937893cf5051795fdc9220e0f44d03060782e6/paubox_python3-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02253e6155152f450bb8eb92e94c49c5350002e61934a5bf2b5348a807b8780c",
          "md5": "cea49b03fbb20a1457b744bd92d316c1",
          "sha256": "ceceea48fd62d2cb012f1c5818347882bc72ad7688e8f2e7ad5bc207997e8d47"
        },
        "downloads": -1,
        "filename": "paubox_python3-1.0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cea49b03fbb20a1457b744bd92d316c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13053,
        "upload_time": "2021-06-09T19:05:50",
        "upload_time_iso_8601": "2021-06-09T19:05:50.231964Z",
        "url": "https://files.pythonhosted.org/packages/02/25/3e6155152f450bb8eb92e94c49c5350002e61934a5bf2b5348a807b8780c/paubox_python3-1.0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f51eba6f8e550e1e64cce9f70f937893cf5051795fdc9220e0f44d03060782e6",
        "md5": "a41e53adb8b8847630e523522e9fa2d3",
        "sha256": "910e14fb9b8f76ac2443c87a62560f46a0993aaeaf9c37954f4cbc1cf48d7c70"
      },
      "downloads": -1,
      "filename": "paubox_python3-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a41e53adb8b8847630e523522e9fa2d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13523,
      "upload_time": "2021-06-09T19:05:48",
      "upload_time_iso_8601": "2021-06-09T19:05:48.806136Z",
      "url": "https://files.pythonhosted.org/packages/f5/1e/ba6f8e550e1e64cce9f70f937893cf5051795fdc9220e0f44d03060782e6/paubox_python3-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}