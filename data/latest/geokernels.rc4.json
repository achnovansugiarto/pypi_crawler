{
  "info": {
    "author": "Sebastian Haan",
    "author_email": "sebhaan@sigmaterra.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# geokernels: fast geospatial distance and geodesic kernel computation for machine learning \nThis Python package provides fast geospatial distance computation and geodesic distance \nkernels to accelerate geospatial machine learning and distance matrix calculations.\n\nThe included geodesic kernel package accepts WGS84 coordinates (Latitude, Longitude) and \nextends scikit-learn's Gaussian Process kernels with geodesic kernels as drop-in replacement. \nThis solves the problem of continental scale modeling and requires no transformation into \nsuitable local projected coordinate systems beforehand.\n\n\n## Functionality\n\nThe core functionalities are:\n- fast distance calculations (geodesic and Great-Circle) for coordinate arrays, including pairwise\ndistance matrixes:\n    - `geokernels.distance.geodist`\n    - `geokernels.distance.geodist_matrix`\n    - `geokernels.distance.greatcircle`\n    - `geokernels.distance.greatcircle_matrix`\n- geodesic kernel package: `geokernels.kernels` \n\nImprovements over current geodesic distance implementations:\n- computational speed improvement of a factor of 50 to 150 in comparison to alternative Python packages \nfor geodesic distances (geopy/geographilib), which is achieved via a numba accelerated inverse method of \nVincenty's distance formula.\n- Support of Numpy arrays as input for multiple coordinates and distance matrix calculations.\n- Integration into scikit-learn Gaussian Process sklearn kernels.\n\nThe following geodesic kernels are added to the default Gaussian Process sklearn kernels:\n\n- 'RBF_geo' (RBF kernel with geodesic distance metric)\n- 'Matern_geo' (Matern kernel with geodesic distance metric)\n- 'RationalQuadratic_geo' (Rational Quadratic kernel with geodesic distance metric)\n\nAll kernels can be used as drop-in replacement for the scikit-learn kernels RBF, Matern, \nand RationalQuadratic, respectively. \n\nThe geodesic kernels address the problem if spatial coordinates of a dataset are given\nas Latitude and Longitude (WGS84 coordinate system). This avoids the typical geospatial issue \nof having to transform the data coordinates into a local projected cartesian system beforehand, \nwhich can lead to inaccuracies at larger distances (e.g., continental scale or overlapping \nprojected coordinate reference zones). \n\nSolving the geodesic problem is accomplished by defining a kernel that combines the \ngeodesic distance metric for the spatial part with the Euclidean distance metric\nfor all non-spatial features (e.g., for spatial-temporal modeling). For more implementation\ndetails, see sklearn_geokernels.kernels.py\n\nThe geodesic distance is computed via Vincenty's solution to the inverse geodetic problem, \nwhich is based on the WGS84 reference ellipsoid and is accurate to within 1 mm or better.\nWhile the accuracy is comparable with other libraries for geodesic distance calculation,\nsuch as GeographicLib/geopy, the geodesic distance computation implemented here is optimized \nfor speed and more suitable for computing large arrays such as needed for Gaussian Process \nregression with scikit-learn. This implementation includes an automatic fallback option to \nthe slower geographiclib algorithm in case of non-convergence of Vincenty's method (<0.01% of cases).\n\n\nBoth, anisotropic (one length-scale per feature) and isotropic (same length-scale for all features) \nkernels are supported. One important difference in comparison to the default sklearn kernels is the \nsettings for the length-scale parameters in case of anisotropic kernel: Due to the non-euclidean metric \nfor the geodesic distance, only one length-scale parameter is required instead of two separate for the two \nspatial dimensions (Latitude, Longitude) of the dataset. Thus, for an anisotropic kernel, the number \nof length-scales is one less than the number of dimensions of the data. \n\n\n\n## Installation\n\n``` sh\npip install geokernels\n```\n\n### Requirements\n\n- scikit-learn\n- numba\n\n## Examples\n\n### Geodesic Distance Computation\n\n``` python\nimport numpy as np\nfrom geokernels.distance import geodist, geodist_matrix, greatcircle\n\n# Calculate geodesic distance between two points:\nnewport_ri = (41.49008, -71.312796)\ncleveland_oh = (41.499498, -81.695391)\ndist_km = geodist(newport_ri, cleveland_oh, metric = 'km')\ndist_miles = geodist(newport_ri, cleveland_oh, metric = 'mile')\nprint(f\"Geodesic distance: {dist_km:.3f} km or {dist_miles:.3f} miles\")\n#Out: Geodesic distance: 866.455 km or 538.390 miles\n\n# Alternative: calculate Great-Circle distance between two points:\n# (less accurate than geodesic because of spherical approximation)\ndist_km = greatcircle(newport_ri, cleveland_oh, metric = 'km')\ndist_miles = greatcircle(newport_ri, cleveland_oh, metric = 'mile')\nprint(f\"Great-circle distance: {dist_km:.3f} km or {dist_miles:.3f} miles\")\n#Out: Great-circle distance: 864.214 km or 536.998 miles\n\n# Calculate geodesic distances between two numpy arrays of coordinates (row-wise).\n# Distances are calculated as: dist[i] = distance(XA[i], XB[i])\nXA, XB = np.random.rand(1000, 2) * 180 - 90, np.random.rand(1000, 2) * 180 - 90 \nXA[:,1] *= 2 # longitude array A\nXB[:,1] *= 2 # longitude array B\ndists = geodist(XA, XB, metric = 'km')\nprint(f'Computed {len(dists)} distances with a mean distance of {dists.mean():.3f} km')\n#Out: Computed 1000 distances with a mean distance of 10019.851 km\n\n# Calculate geodesic distance matrix between all possible pairs of distances in array A.\n# Note: upper and lower triangel of matrix are the same and diagonal is zero\ndist_matrixA = geodist_matrix(XA, metric = 'meter')\nprint(f'Computed {dist_matrixA.shape[0]} x {dist_matrixA.shape[1]} distance matrix')\n#Out: Computed 1000 x 1000 distance matrix\n\n# Calculate geodesic distance matrix between all possible pairs between array A and B.\ndist_matrixAB = geodist_matrix(XA, XB, metric = 'km')\nprint(f'Computed {dist_matrixAB.shape[0]} x {dist_matrixAB.shape[1]} distance matrix between XA and XB.') \n#Out Computed 1000 x 1000 distance matrix between XA and XB.\n```\n\n### Scikit-learn Gaussian Process Regression\n\n``` python\n#import standard libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.gaussian_process import GaussianProcessRegressor\n# Import kernels similar to importing sklearn.gaussian_process.kernels :\nfrom geokernels.kernels import RBF_geo, Matern_geo, RationalQuadratic_geo, WhiteKernel\nfrom geokernels.test_kernels import make_simdata1\n\n# Add data: needs to include in the first two columns Latitude (first) and Longitude (second) coordinates.\n# for testing use function make_simdata1 to generate 3 dim dataset (first two dimensions are Latitude, Longitude):\nX, y = make_simdata1(n_samples = 100, noise = 0.1) \n\n# Split in train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Define Kernel. Here we choose an anisotropic RBF kernel. Note that there is only one length-scale parameter for\n# the geodesic distance based on the combined first two features, Latitude and Longitude, and one length-scale\n# per remaining feature (in this case only one more). See description above\nkernel = 1.0 * (\n    RBF_geo(length_scale = [1e6, 1], length_scale_bounds = [(1e4, 1e7),(0.1, 1e4)]) \n    + WhiteKernel(noise_level_bounds=(1e-4, 10)))\n\ngp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=7)\n# Fit GP, which includes default hyperparameter optimization\ngp.fit(X_train, y_train)\n\n# Make predictions on test data\ny_pred, y_std = gp.predict(X_test, return_std=True)\ngp.score(X_test, y_test)\n```\n\n## Speed Comparison\n\nSpeed comparison between geokernels distance computation, \ngeopy's: https://pypi.org/project/geopy/,\nand geographiclib's: https://pypi.org/project/geographiclib/. \nNote: only geopy need to be installed since it requires geographiclib.\n``` python\nimport numpy as np\nfrom scipy.spatial.distance import pdist\nimport timeit\n\n# Import all three methods:\nfrom geopy.distance import geodesic as geodesic_geopy\nfrom geographiclib.geodesic import Geodesic as geodesic_gglib\nfrom geokernels.geodesics import geodesic_vincenty\n\n# Generate 1000 random samples of coordinates (X[:,0] = Latitude, X[:,1] = Longitude)\nX = np.random.rand(1000, 2) * 180 - 90\nX[:,1] *= 2\n\n# Calculate all pairwise distances with scipy pdist (here in total: 499,500 distances)\n\n# with Geopy (distance calculation based on Geographiclib ):\nstart = timeit.default_timer()\ndist_geopy = pdist(X, metric = lambda u, v: geodesic_geopy(u, v).meters)\nstop = timeit.default_timer()\nprint(f'Time for Geopy computation: {(stop - start):.3f} seconds')\n#Out: Time for Geopy computation: 53.356 seconds\n\n# with Geographiclib, should be faster than geopy:\nstart = timeit.default_timer()\ndist_gglib = pdist(X, metric = lambda u, v: geodesic_gglib.WGS84.Inverse(u[0], u[1], v[0], v[1])['s12'])\nstop = timeit.default_timer()\nprint(f'Time for Geographiclib computation: {(stop - start):.3f} seconds')\n#Out: Time for Geographiclib computation: 36.824 seconds\n\n# geokernels (using our accelerated vincenty's inverse method):\nstart = timeit.default_timer()\ndist_vincenty = pdist(X, metric = lambda u, v: geodesic_vincenty(u, v))\nstop = timeit.default_timer()\nprint(f'Time for geokernels computation: {(stop - start):.3f} seconds')\n#Out: Time for geokernels computation: 0.701 seconds (incl numba's compilation time)\n#Out: Time for geokernels computation: 0.393 seconds (repeat after numba compilation)\n\n# test accuracy in comparison to the standard by geographiclib\ndist_mean = np.mean(np.abs(dist_vincenty - dist_gglib))\ndist_max = np.max(np.abs(dist_vincenty - dist_gglib))\nprint(f'Mean difference in absolute distance [meters]: {dist_mean:.3e}') \nprint(f'Max difference in absolute distance [meters]: {dist_max:.3e}')\n#Out: Mean difference in absolute distance [meters]: 8.546e-06\n#Out: Max difference in absolute distance [meters]: 1.269e-04\n```\nSpeed improvement to geopy: factor of 78 to 142 times faster.\nSpeed improvement to geographiclib: factor of 53 to 94 times faster.\n\n\n\n## Testing\n\nTest functions and more examples can be found in geokernels.test_geodesics and geokernels.test_kernels. \n\nTest for all kernels:\n``` python\nfrom geokernels.test_kernels import test_allkernels\ntest_allkernels()\n```\nComparison between geokernel's geodesic distance implementation and geographiclib/geopy:\n(Note that this requires installation of at least geographiclib: pip install geographiclib)\n``` python\nfrom geokernels.test_geodesics import test_geodesic_vincenty, test_geodesic_geographiclib, test_accuracy\ndist_vincenty = test_geodesic_vincenty()\ndist_geographiclib = test_geodesic_geographiclib()\ntest_accuracy()\n```\n\n## References\n\n- Vincenty, Thaddeus (August 1975b). Geodetic inverse solution between antipodal points. DMAAC Geodetic Survey Squadron. doi:10.5281/zenodo.32999.\n- Carl Edward Rasmussen, Christopher K. I. Williams (2006). “Gaussian Processes for Machine Learning”. The MIT Press.\n- David Duvenaud (2014). “The Kernel Cookbook: Advice on Covariance functions”.\n- https://en.wikipedia.org/wiki/Vincenty's_formulae\n- https://scikit-learn.org/stable/modules/classes.html#module-sklearn.gaussian_process\n- Karney, Charles F. F. (January 2013). \"Algorithms for geodesics\". Journal of Geodesy. 87 (1): 43–55. \narXiv:1109.4448. Bibcode:2013JGeod..87...43K. doi:10.1007/s00190-012-0578-z. Addenda.\n\n\n## Contributors\n\nWritten by: Sebastian Haan\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sigmaterra/geokernels",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geokernels",
    "package_url": "https://pypi.org/project/geokernels/",
    "platform": null,
    "project_url": "https://pypi.org/project/geokernels/",
    "project_urls": {
      "Homepage": "https://github.com/sigmaterra/geokernels"
    },
    "release_url": "https://pypi.org/project/geokernels/0.2.2/",
    "requires_dist": [
      "scikit-learn (>=1.0)",
      "numba (>=0.53)"
    ],
    "requires_python": ">=3.8",
    "summary": "fast geospatial distance and geodesic kernel computation for machine learning",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14553096,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93d6b58c173e5838a10e8bd124cb6cfc2aba8284a3f3c764249957f91f384f31",
          "md5": "0e437f1b29eae696debaca37412ad87e",
          "sha256": "0675ba816c4ada2fd401ad2c2b359dd722f18e445ad6cd700c8df4c5b50b9170"
        },
        "downloads": -1,
        "filename": "geokernels-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e437f1b29eae696debaca37412ad87e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 56705,
        "upload_time": "2022-07-22T00:50:26",
        "upload_time_iso_8601": "2022-07-22T00:50:26.505316Z",
        "url": "https://files.pythonhosted.org/packages/93/d6/b58c173e5838a10e8bd124cb6cfc2aba8284a3f3c764249957f91f384f31/geokernels-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "397472299d67117aee077a4817b41ddf4df999a79e87a0dd6b0e0a72092edd94",
          "md5": "bb40fb20e2e9de0d4d0ea1983dd81064",
          "sha256": "266070bcbddae7aeda9324301c4f5c286935617174b8d77010277484d4928a8b"
        },
        "downloads": -1,
        "filename": "geokernels-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb40fb20e2e9de0d4d0ea1983dd81064",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29191,
        "upload_time": "2022-07-22T00:50:30",
        "upload_time_iso_8601": "2022-07-22T00:50:30.928886Z",
        "url": "https://files.pythonhosted.org/packages/39/74/72299d67117aee077a4817b41ddf4df999a79e87a0dd6b0e0a72092edd94/geokernels-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbee7505f385a36205b7308506022ada7a939512fe02fc8bf84996ea680d497c",
          "md5": "969ca29ea40a0cdd6adaca85cd3dfd05",
          "sha256": "1be3c0ab173f4b8ff21b08c914212cc74765b82dce77cb6bb6846978a73c8fb8"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "969ca29ea40a0cdd6adaca85cd3dfd05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 60509,
        "upload_time": "2022-07-24T10:36:25",
        "upload_time_iso_8601": "2022-07-24T10:36:25.352024Z",
        "url": "https://files.pythonhosted.org/packages/bb/ee/7505f385a36205b7308506022ada7a939512fe02fc8bf84996ea680d497c/geokernels-0.2.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Setup failed"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff756d4945190aaea21821d15353f8bbf40bf2281169fdb91dbec340de4075f",
          "md5": "432baeeff9ed6cbbc0de7cda91be1b38",
          "sha256": "7d102975f1547b148a299f829a8aacbe25c0581bb2486ebe550b78aea7696fc3"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "432baeeff9ed6cbbc0de7cda91be1b38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32717,
        "upload_time": "2022-07-24T10:36:29",
        "upload_time_iso_8601": "2022-07-24T10:36:29.009850Z",
        "url": "https://files.pythonhosted.org/packages/6f/f7/56d4945190aaea21821d15353f8bbf40bf2281169fdb91dbec340de4075f/geokernels-0.2.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Setup failed"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b16ae9b5b8c8fbd18319edffc5c78b1f5a054f0de36cf04d2539e77b5f586793",
          "md5": "08f5fad2200382833fdd08e2a8b20a4d",
          "sha256": "75525b907ca09a3955979c118a310c438d38c998641613b4ca31fe763612828e"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08f5fad2200382833fdd08e2a8b20a4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 99015,
        "upload_time": "2022-07-24T10:57:07",
        "upload_time_iso_8601": "2022-07-24T10:57:07.738016Z",
        "url": "https://files.pythonhosted.org/packages/b1/6a/e9b5b8c8fbd18319edffc5c78b1f5a054f0de36cf04d2539e77b5f586793/geokernels-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c446143b1a9982e975d6abf9807590bcecc3765e7b976793bf9468e0aad36e9f",
          "md5": "7cb84229f887fa3196f3520fbfd7198b",
          "sha256": "3ab94e9366d833b78822ef7d259a1d076f6a42cebf103202f19b3bd7a1fdfceb"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7cb84229f887fa3196f3520fbfd7198b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 65522,
        "upload_time": "2022-07-24T10:57:09",
        "upload_time_iso_8601": "2022-07-24T10:57:09.743049Z",
        "url": "https://files.pythonhosted.org/packages/c4/46/143b1a9982e975d6abf9807590bcecc3765e7b976793bf9468e0aad36e9f/geokernels-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d8f4bb72539c46d7f1970f15179e64e4ad94a5c0c586b4e91f672d04e99ba73",
          "md5": "435318185431d5bdb5ffb8c2ed3ce5ae",
          "sha256": "d0b0090f3cda7b61120f4a5a4362b0b492f60216f9c43200bc000215dfd573a0"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "435318185431d5bdb5ffb8c2ed3ce5ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 99758,
        "upload_time": "2022-07-26T12:58:07",
        "upload_time_iso_8601": "2022-07-26T12:58:07.314036Z",
        "url": "https://files.pythonhosted.org/packages/2d/8f/4bb72539c46d7f1970f15179e64e4ad94a5c0c586b4e91f672d04e99ba73/geokernels-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aaff81029b48bd4ee6131fd8148a5d04242df3dcb77d3632f05648507d48a27",
          "md5": "541781155322e57313bc93492da40b65",
          "sha256": "aa9201001dcdb2a7029ffeececb1fdca07c08b85865bd3c1aa9414f51d7e361c"
        },
        "downloads": -1,
        "filename": "geokernels-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "541781155322e57313bc93492da40b65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 66397,
        "upload_time": "2022-07-26T12:58:09",
        "upload_time_iso_8601": "2022-07-26T12:58:09.275848Z",
        "url": "https://files.pythonhosted.org/packages/5a/af/f81029b48bd4ee6131fd8148a5d04242df3dcb77d3632f05648507d48a27/geokernels-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d8f4bb72539c46d7f1970f15179e64e4ad94a5c0c586b4e91f672d04e99ba73",
        "md5": "435318185431d5bdb5ffb8c2ed3ce5ae",
        "sha256": "d0b0090f3cda7b61120f4a5a4362b0b492f60216f9c43200bc000215dfd573a0"
      },
      "downloads": -1,
      "filename": "geokernels-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "435318185431d5bdb5ffb8c2ed3ce5ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 99758,
      "upload_time": "2022-07-26T12:58:07",
      "upload_time_iso_8601": "2022-07-26T12:58:07.314036Z",
      "url": "https://files.pythonhosted.org/packages/2d/8f/4bb72539c46d7f1970f15179e64e4ad94a5c0c586b4e91f672d04e99ba73/geokernels-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aaff81029b48bd4ee6131fd8148a5d04242df3dcb77d3632f05648507d48a27",
        "md5": "541781155322e57313bc93492da40b65",
        "sha256": "aa9201001dcdb2a7029ffeececb1fdca07c08b85865bd3c1aa9414f51d7e361c"
      },
      "downloads": -1,
      "filename": "geokernels-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "541781155322e57313bc93492da40b65",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 66397,
      "upload_time": "2022-07-26T12:58:09",
      "upload_time_iso_8601": "2022-07-26T12:58:09.275848Z",
      "url": "https://files.pythonhosted.org/packages/5a/af/f81029b48bd4ee6131fd8148a5d04242df3dcb77d3632f05648507d48a27/geokernels-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}