{
  "info": {
    "author": "",
    "author_email": "Roland Denis <denis@math.univ-lyon1.fr>, Garry Terii <terii@math.univ-lyon1.fr>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Quick Start\n\n## Install from Pypi\n\n```bash\npip install nnpf\n```\n\n## Install from source\n\n**Download** or clone this repository:\n```bash\ngit clone https://github.com/PhaseFieldICJ/nnpf\ncd nnpf\n```\n\n**Install** miniconda or anaconda, then prepare an environment:\n- for CPU only:\n```bash\nconda env create -f environment_cpu.yml\nconda activate nnpf_cpu\n```\n- for CPU and GPU:\n```bash\nconda env create -f environment_gpu.yml\nconda activate nnpf_gpu\n```\n\nTo **update** instead an already created environement:\n```bash\nconda env update -f environment_cpu.yml\n```\nand/or\n```bash\nconda env update -f environment_gpu.yml\n```\ndepending on which environment you already have.\n\n\n**Install** the nnpf module:\n```bash\npip install .\n```\n\n**Note** that you can pass the conda environment creation step and just rely on `pip` to download the dependencies.\n\nYou can now move in your **working directory**.\n\n## Self test\n\nYou can check the installation with:\n```bash\nnnpf selftest\n```\n\n## Basic training\n\n**Launch** the learning of the reaction term of the Allen-Cahn equation, with default parameters:\n```bash\nnnpf train Reaction --batch_size 10\n```\nand/or with custom hidden layers:\n```bash\nnnpf train Reaction --batch_size 10 --layer_dims 8 8 3 --activation ReLU\n```\n\nIf you have an CUDA compatible GPU, you can speedup the learning by simply adding the `--gpu` option:\n```bash\nnnpf train Reaction --batch_size 10 --layer_dims 8 8 3 --activation ReLU --gpu 1\n```\n\n**Check** informations of one trained model:\n```bash\nnnpf infos logs/Reaction/version_0\n```\n\n**Visualize** the loss evolution and compare hyper-parameters using TensorBoard:\n```bash\ntensorboard --logdir logs\n```\nand open your browser at http://localhost:6006/\n\n\n# Custom model\n\nYou can also create a custom model in a file and make it derives from the problem you want to solve.\n\nFor example, create a file `model.py` with the following content:\n```Python\nfrom torch.nn import Sequential\n\nfrom nnpf.problems import AllenCahnProblem\nfrom nnpf.models import Reaction, HeatArray\nfrom nnpf.utils import get_default_args\n\nclass ModelDR(AllenCahnProblem):\n    def __init__(self,\n                 kernel_size=17, kernel_init='zeros',\n                 layers=[8, 3], activation='GaussActivation',\n                 **kwargs):\n        super().__init__(**kwargs)\n\n        # Fix kernel size to match domain dimension\n        if isinstance(kernel_size, int):\n            kernel_size = [kernel_size]\n        else:\n            kernel_size = list(kernel_size)\n        if len(kernel_size) == 1:\n            kernel_size = kernel_size * self.domain.dim\n\n        # Hyper-parameters (used for saving/loading the module)\n        self.save_hyperparameters(\n          'kernel_size', 'kernel_init',\n          'layers', 'activation',\n        )\n\n        self.model = Sequential(\n            HeatArray(\n                kernel_size=kernel_size, init=kernel_init,\n                bounds=self.hparams.bounds, N=self.hparams.N\n            ),\n            Reaction(layers, activation),\n        )\n\n    def forward(self, x):\n        return self.model(x)\n\n    @staticmethod\n    def add_model_specific_args(parent_parser, defaults={}):\n        parser = AllenCahnProblem.add_model_specific_args(parent_parser, defaults)\n        group = parser.add_argument_group(\"Allen-Cahn DR\", \"Options specific to this model\")\n        group.add_argument('--kernel_size', type=int, nargs='+', help='Size of the kernel (nD)')\n        group.add_argument('--kernel_init', choices=['zeros', 'random'], help=\"Initialization of the convolution kernel\")\n        group.add_argument('--layers', type=int, nargs='+', help='Sizes of the hidden layers')\n        group.add_argument('--activation', type=str, help='Name of the activation function')\n        group.set_defaults(**{**get_default_args(ModelDR), **defaults})\n        return parser\n```\nwith some boilerplate to handle command-line arguments and save hyper-parameters (see Lightning documentation).\n`ModelDR` is declared as a model of the Allen-Cahn problem and thus inherits from the associated training and validation datasets.\n\nYou can then display the command-line interface with the `--help` option after specifying the file and the model name:\n```bash\nnnpf train model.py:ModelDR --help\n```\n\nYou can start the training for the 2D case with some custom arguments:\n```bash\nnnpf train model.py:ModelDR --kernel_size 33 --max_epochs 2000 --check_val_every_n_epoch 100\n```\n\nFor the 3D case:\n```bash\nnnpf train model.py:ModelDR --bounds [0,1]x[0,1]x[0,1] --N 64 --max_epochs 2000 --check_val_every_n_epoch 100\n```\n\nUsing a GPU:\n```bash\nnnpf train model.py:ModelDR --bounds [0,1]x[0,1]x[0,1] --N 64 --max_epochs 2000 --check_val_every_n_epoch 100 --gpus 1\n```\n\nUsing a configuration file in YAML format:\n```bash\nnnpf train model.py:ModelDR --config config.yml\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "phase field,mean curvature,neural network",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Roland Denis <denis@math.univ-lyon1.fr>",
    "name": "nnpf",
    "package_url": "https://pypi.org/project/nnpf/",
    "platform": null,
    "project_url": "https://pypi.org/project/nnpf/",
    "project_urls": {
      "Bug Tracker": "https://github.com/PhaseFieldICJ/nnpf/issues",
      "homepage": "https://github.com/PhaseFieldICJ/nnpf",
      "repository": "https://github.com/PhaseFieldICJ/nnpf"
    },
    "release_url": "https://pypi.org/project/nnpf/1.0.1/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "torch (<=1.12.1,>=1.10.0)",
      "torchvision (>=0.8.1)",
      "torchmetrics (<0.8.0)",
      "pytorch-lightning (==1.4.5)",
      "tqdm",
      "imageio",
      "imageio-ffmpeg",
      "torchinfo",
      "pytest"
    ],
    "requires_python": ">=3.8",
    "summary": "Neural Network for Phase-Field models",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15383323,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddb45dc931b41129356218873b5bb9d9d8a28d1c4656392a813c968190c33b73",
          "md5": "8b1399107932da62e93cd2cf0ebc1eb4",
          "sha256": "c717076f0a9caf4290b22a7f65e91dcd37a625fe8b771fedd497fcee190cf563"
        },
        "downloads": -1,
        "filename": "nnpf-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b1399107932da62e93cd2cf0ebc1eb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 84288,
        "upload_time": "2022-09-18T11:24:35",
        "upload_time_iso_8601": "2022-09-18T11:24:35.169113Z",
        "url": "https://files.pythonhosted.org/packages/dd/b4/5dc931b41129356218873b5bb9d9d8a28d1c4656392a813c968190c33b73/nnpf-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dd426a04bad97b8c9ee2fd11fbd0e57f583d1fbd0a8053e9fea250316bb294f",
          "md5": "f45e5f2499936a2235debe3b9413e5c1",
          "sha256": "144a9cc9875fe6899c488401b1afb66a1f4f38c6960da279c09584456e8adc50"
        },
        "downloads": -1,
        "filename": "nnpf-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f45e5f2499936a2235debe3b9413e5c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 62141,
        "upload_time": "2022-09-18T11:24:37",
        "upload_time_iso_8601": "2022-09-18T11:24:37.647833Z",
        "url": "https://files.pythonhosted.org/packages/2d/d4/26a04bad97b8c9ee2fd11fbd0e57f583d1fbd0a8053e9fea250316bb294f/nnpf-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19541076b6285994d7cef8291c1d1bcb1e85c9b4cbff501e63e41009715d589a",
          "md5": "b192ec1583000fec0335fd8f5f0ee6af",
          "sha256": "ddf5f94692df9c4ad931a178e1b4688d17199f6869c2e7f99d8f6fc65867b464"
        },
        "downloads": -1,
        "filename": "nnpf-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b192ec1583000fec0335fd8f5f0ee6af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 84128,
        "upload_time": "2022-10-12T07:56:55",
        "upload_time_iso_8601": "2022-10-12T07:56:55.588756Z",
        "url": "https://files.pythonhosted.org/packages/19/54/1076b6285994d7cef8291c1d1bcb1e85c9b4cbff501e63e41009715d589a/nnpf-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1427c864e1d96db72e645e9dc4d30537c45e0b0e326c3cac95ceec03d955a1dd",
          "md5": "e776f12d3b7e1bbb612c105250a004d1",
          "sha256": "80877a28d1842c28e4f5c93e2ebf87f2db61cda096441959071821fe01b7c2da"
        },
        "downloads": -1,
        "filename": "nnpf-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e776f12d3b7e1bbb612c105250a004d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 61996,
        "upload_time": "2022-10-12T07:56:57",
        "upload_time_iso_8601": "2022-10-12T07:56:57.665731Z",
        "url": "https://files.pythonhosted.org/packages/14/27/c864e1d96db72e645e9dc4d30537c45e0b0e326c3cac95ceec03d955a1dd/nnpf-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19541076b6285994d7cef8291c1d1bcb1e85c9b4cbff501e63e41009715d589a",
        "md5": "b192ec1583000fec0335fd8f5f0ee6af",
        "sha256": "ddf5f94692df9c4ad931a178e1b4688d17199f6869c2e7f99d8f6fc65867b464"
      },
      "downloads": -1,
      "filename": "nnpf-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b192ec1583000fec0335fd8f5f0ee6af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 84128,
      "upload_time": "2022-10-12T07:56:55",
      "upload_time_iso_8601": "2022-10-12T07:56:55.588756Z",
      "url": "https://files.pythonhosted.org/packages/19/54/1076b6285994d7cef8291c1d1bcb1e85c9b4cbff501e63e41009715d589a/nnpf-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1427c864e1d96db72e645e9dc4d30537c45e0b0e326c3cac95ceec03d955a1dd",
        "md5": "e776f12d3b7e1bbb612c105250a004d1",
        "sha256": "80877a28d1842c28e4f5c93e2ebf87f2db61cda096441959071821fe01b7c2da"
      },
      "downloads": -1,
      "filename": "nnpf-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e776f12d3b7e1bbb612c105250a004d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 61996,
      "upload_time": "2022-10-12T07:56:57",
      "upload_time_iso_8601": "2022-10-12T07:56:57.665731Z",
      "url": "https://files.pythonhosted.org/packages/14/27/c864e1d96db72e645e9dc4d30537c45e0b0e326c3cac95ceec03d955a1dd/nnpf-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}