{
  "info": {
    "author": "Ritvik19",
    "author_email": "rastogiritvik99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# [pyradox-tabular](https://github.com/Ritvik19/pyradox-tabular)\n\nState of the Art Neural Networks for Tabular Deep Learning\n\n[![Downloads](https://pepy.tech/badge/pyradox-tabular)](https://pepy.tech/project/pyradox-tabular)\n[![Downloads](https://pepy.tech/badge/pyradox-tabular/month)](https://pepy.tech/project/pyradox-tabular)\n[![Downloads](https://pepy.tech/badge/pyradox-tabular/week)](https://pepy.tech/project/pyradox-tabular)\n\n---\n\n## Table of Contents\n\n- [pyradox-tabular](#pyradox-tabular)\n  - [Table of Contents](#table-of-contents)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [Data Preparation](#data-preparation)\n    - [Deep Tabular Network](#deep-tabular-network)\n    - [Wide and Deep Tabular Network](#wide-and-deep-tabular-network)\n    - [Deep and Cross Tabular Network](#deep-and-cross-tabular-network)\n    - [TabTansformer](#tabtansformer)\n    - [TabNet](#tabnet)\n    - [Deep Neural Decision Tree](#deep-neural-decision-tree)\n    - [Deep Neural Decision Forest](#deep-neural-decision-forest)\n    - [Neural Oblivious Decision Tree](#neural-oblivious-decision-tree)\n    - [Neural Oblivious Decision Ensemble](#neural-oblivious-decision-ensemble)\n    - [Feature Tokenizer Transformer](#feature-tokenizer-transformer)\n    - [Tabular ResNet](#tabular-resnet)\n  - [References](#references)\n\n---\n\n## Installation\n\n```bash\npip install pyradox-tabular\n```\n\n---\n\n## Usage\n\n### Data Preparation\n\npyradox-tabular comes with its own `DataLoader` Class which can be used to load data from a pandas `DataFrame`.\nWe provide a utility `DataConfig` class which stores the configuration of the data, which are then required by the model for feature preprocessing.\nWe also provide seperate `ModelConfig` classes for the different models, which ae required to store the model hyperparamers.\n\n```python\nfrom pyradox_tabular.data import DataLoader\nfrom pyradox_tabular.data_config import DataConfig\n\ndata_config = DataConfig(\n    numeric_feature_names=[\"numerical\", \"column\",\"names\"],\n    categorical_features_with_vocabulary={\n        \"column\": [\"label\", \"encoded\", \"unique\", \"values\", \"as\", \"strings\"],\n    },\n)\n\ndata_train = DataLoader.from_df(x_train, y_train, batch_size=1024)\ndata_valid = DataLoader.from_df(x_valid, y_valid, batch_size=1024)\ndata_test = DataLoader.from_df(x_test, batch_size=1024)\n```\n\nThis library provides the implementations of the following tabular deep learning models:\n\n### Deep Tabular Network\n\nIn principle a neural network can approximate any continuous function and piece wise continuous function. However, it is not suitable to approximate arbitrary non-continuous functions as it assumes certain level of continuity in its general form.\n\nUnlike unstructured data found in nature, structured data with categorical features may not have continuity at all and even if it has it may not be so obvious.\n\nDeep Tabular Network use the entity embedding method to automatically learn the representation of categorical features in multi-dimensional spaces which reveals the intrinsic continuity of the data and helps neural networks to solve the problem.\n\n```python\nfrom pyradox_tabular.model_config import DeepNetworkConfig\nfrom pyradox_tabular.nn import DeepTabularNetwork\n\nmodel_config = DeepNetworkConfig(num_outputs=1, out_activation='sigmoid', hidden_units=[64, 64])\nmodel = DeepTabularNetwork.from_config(data_config, model_config, name=\"deep_network\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Wide and Deep Tabular Network\n\nThe human brain is a sophisticated learning machine, forming rules by memorizing everyday events and generalizing those learnings to apply tothings we haven't seen before. Perhaps more powerfully, memorization also allows us to further refine our generalized rules with exceptions.\n\nBy jointly training a wide linear model (for memorization) alongside a deep neural network (for generalization) Wide and Deep Tabular Networks combine the strengths of both to bring us one step closer to teach computers to learn like humans do.\n\n```python\nfrom pyradox_tabular.model_config import WideAndDeepNetworkConfig\nfrom pyradox_tabular.nn import WideAndDeepTabularNetwork\n\nmodel_config = WideAndDeepNetworkConfig(num_outputs=1, out_activation='sigmoid', hidden_units=[64, 64])\nmodel = WideAndDeepTabularNetwork.from_config(data_config, model_config, name=\"wide_deep_network\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Deep and Cross Tabular Network\n\nFeature engineering has been the key to the success of many prediction models. However, the process is nontrivial and often requires manual feature engineering or exhaustive searching. DNNs are able to automatically learn feature interactions; however, they generate all the interactions implicitly, and are not necessarily efficient in learning all types of cross features.\n\nDeep and Cross Tabular Network explicitly applies feature crossing at each layer, requires no manual feature engineering, and adds negligible extra complexity to the DNN model.\n\n```python\nfrom pyradox_tabular.model_config import DeepAndCrossNetworkConfig\nfrom pyradox_tabular.nn import DeepAndCrossTabularNetwork\n\nmodel_config = DeepAndCrossNetworkConfig(num_outputs=1, out_activation='sigmoid', hidden_units=[64, 64], n_cross=2)\nmodel = DeepAndCrossTabularNetwork.from_config(data_config, model_config, name=\"deep_cross_network\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### TabTansformer\n\nTabTransformer is built upon self-attention based on Transformers. The Transformer layers transform the embeddings of categorical features into robust contextual embeddings to achieve higher prediction accuracy.\n\nThe contextual embeddings learned from TabTransformer are highly robust against both missing and noisy data features, and provide better interpretability.\n\n```python\nfrom pyradox_tabular.model_config import TabTransformerConfig\nfrom pyradox_tabular.nn import TabTransformer\n\nmodel_config = TabTransformerConfig(num_outputs=1, out_activation='sigmoid', num_transformer_blocks=3, num_heads=4, mlp_hidden_units_factors=[2, 1])\nmodel = TabTransformer.from_config(data_config, model_config, name=\"tab_transformer\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### TabNet\n\nTabNet uses sequential attention to choose which features to reason from at each decision step, enabling interpretability and better learning as the learning capacity is used for the most salient features.\n\nIt employs a single deep learning architecture for feature selection and reasoning.\n\n```python\nfrom pyradox_tabular.model_config import TabNetConfig\nfrom pyradox_tabular.nn import TabNet\n\nmodel_config = TabNetConfig(num_outputs=1, out_activation='sigmoid',feature_dim=16, output_dim=12, num_decision_steps=5)\nmodel = TabNet.from_config(data_config, model_config, name=\"tabnet\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Deep Neural Decision Tree\n\nDeep Neural Decision Trees unifies classification trees with the representation learning functionality known from deep convolutional network. These are essentially a stochastic and differentiable decision tree model.\n\n```python\nfrom pyradox_tabular.model_config import NeuralDecisionTreeConfig\nfrom pyradox_tabular.nn import NeuralDecisionTree\n\nmodel_config = NeuralDecisionTreeConfig(depth=2, used_features_rate=1, num_classes=2)\nmodel = NeuralDecisionTree.from_config(data_config, model_config, name=\"deep_neural_decision_tree\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Deep Neural Decision Forest\n\nA Deep Neural Decision Forest is an bagging ensemble of Deep Neural Decision Trees.\n\n```python\nfrom pyradox_tabular.model_config import NeuralDecisionForestConfig\nfrom pyradox_tabular.nn import NeuralDecisionForest\n\nmodel_config = NeuralDecisionForestConfig(num_trees=10, depth=2, used_features_rate=0.8, num_classes=2)\nmodel = NeuralDecisionForest.from_config(data_config, model_config, name=\"deep_neural_decision_forest\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Neural Oblivious Decision Tree\n\n```python\nfrom pyradox_tabular.model_config import NeuralObliviousDecisionTreeConfig\nfrom pyradox_tabular.nn import NeuralObliviousDecisionTree\n\nmodel_config = NeuralObliviousDecisionTreeConfig()\nmodel = NeuralObliviousDecisionTree.from_config(data_config, model_config, name=\"neural_oblivious_decision_tree\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Neural Oblivious Decision Ensemble\n\nNODE architecture generalizes ensembles of oblivious decision trees, but benefits from both end-to-end gradient-based optimization and the power of multi-layer hierarchical representation learning.\n\n```python\nfrom pyradox_tabular.model_config import NeuralObliviousDecisionEnsembleConfig\nfrom pyradox_tabular.nn import NeuralObliviousDecisionEnsemble\n\nmodel_config = NeuralObliviousDecisionEnsembleConfig()\nmodel = NeuralObliviousDecisionEnsemble.from_config(data_config, model_config, name=\"neural_oblivious_decision_ensemble\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Feature Tokenizer Transformer\n\nIt is a simple adaptation of the Transformer architecture for the tabular domain. In a nutshell, Feature Tokenizer Transformer transforms all features (categorical and numerical) to embeddings and applies a stack of Transformer layers to the embeddings.\n\nThus, every Transformer layer operates on the feature level of one object.\n\n```python\nfrom pyradox_tabular.model_config import FeatureTokenizerTransformerConfig\nfrom pyradox_tabular.nn import FeatureTokenizerTransformer\n\nmodel_config = FeatureTokenizerTransformerConfig(num_outputs=1, out_activation='sigmoid', num_transformer_blocks=2, num_heads=8, embedding_dim=32, dense_dim=16)\nmodel = FeatureTokenizerTransformer.from_config(data_config, model_config, name=\"feature_tokenizer_transformer\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n### Tabular ResNet\n\nTabular Resnet is a ResNet like architecture containing skip connection but instead of Convolutional Layers, it consists of Linear Layers.\n\n```python\nfrom pyradox_tabular.model_config import TabularResNetConfig\nfrom pyradox_tabular.nn import TabularResNet\n\nmodel_config = TabularResNetConfig(num_outputs=1, out_activation='sigmoid', hidden_units=[64, 64])\nmodel = TabularResNet.from_config(data_config, model_config, name=\"deep_network\")\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\")\nmodel.fit(data_train, validation_data=data_valid)\npreds = model.predict(data_test)\n```\n\n---\n\n## References\n\n- [Entity Embeddings of Categorical Variables (2016, April)](https://arxiv.org/abs/1604.06737)\n- [Wide & Deep Learning: Better Together with TensorFlow (2016, June)](https://ai.googleblog.com/2016/06/wide-deep-learning-better-together-with.html)\n- [Deep & Cross Network for Ad Click Predictions (2017, August)](https://arxiv.org/pdf/1708.05123.pdf)\n- [TabTransformer: Tabular Data Modeling Using Contextual Embeddings (2020, December)](https://arxiv.org/pdf/2012.06678.pdf)\n- [TabNet: Attentive Interpretable Tabular Learning (2020, December)](https://arxiv.org/pdf/1908.07442.pdf)\n- [Deep Neural Decision Forests (2015, December)](https://ieeexplore.ieee.org/document/7410529)\n- [Neural Oblivious Decision Ensembles for Deep Learning on Tabular Data (2019, September)](https://arxiv.org/pdf/1909.06312.pdf)\n- [Revisiting Deep Learning Models for Tabular Data (2021, June)](https://arxiv.org/abs/2106.11959)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyradox-tabular",
    "package_url": "https://pypi.org/project/pyradox-tabular/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyradox-tabular/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyradox-tabular/1.3.0/",
    "requires_dist": [
      "tensorflow (==2.6.2)",
      "tensorflow-addons (==0.14.0)",
      "tensorflow-probability (==0.14.1)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "State of the Art Neural Networks for Tabular Deep Learning",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12961811,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88a51f7c2b7f44eedc6f01415d16bccca59a4d0935f89374e167d4137261482f",
          "md5": "afeb86ed03145f0dc9f561447f0d7ed3",
          "sha256": "a0a757be2ee6e703802fabfd3a7b58622da219c361de44e7952619ebbb30bdd2"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afeb86ed03145f0dc9f561447f0d7ed3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 19576,
        "upload_time": "2022-02-05T05:26:44",
        "upload_time_iso_8601": "2022-02-05T05:26:44.883290Z",
        "url": "https://files.pythonhosted.org/packages/88/a5/1f7c2b7f44eedc6f01415d16bccca59a4d0935f89374e167d4137261482f/pyradox_tabular-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "962088623a0fd7f4b37fc5e146c7013d3eeff2e3512616d40486f6f18f0f448f",
          "md5": "cdd30be5b723bc5febf33dc16664b81d",
          "sha256": "b477f97d9372cf638729a63508b22862f6b753e4e6c62378bbc554e931e4ce0c"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cdd30be5b723bc5febf33dc16664b81d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 15859,
        "upload_time": "2022-02-05T05:26:47",
        "upload_time_iso_8601": "2022-02-05T05:26:47.546926Z",
        "url": "https://files.pythonhosted.org/packages/96/20/88623a0fd7f4b37fc5e146c7013d3eeff2e3512616d40486f6f18f0f448f/pyradox-tabular-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52ed1fa3c8dbc59cffff3c9d5b244dfb724ed8def8f2900b2e7b471511d51555",
          "md5": "6ab19b124fb3c3bac1e753f610616394",
          "sha256": "146e0aa24ebc2a8c69a3dd5bca97f20321e115995c3f293c5cfb512c5984c012"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ab19b124fb3c3bac1e753f610616394",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21359,
        "upload_time": "2022-02-06T16:16:32",
        "upload_time_iso_8601": "2022-02-06T16:16:32.907916Z",
        "url": "https://files.pythonhosted.org/packages/52/ed/1fa3c8dbc59cffff3c9d5b244dfb724ed8def8f2900b2e7b471511d51555/pyradox_tabular-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e63c1672a524fbd1e1e083a9929228007c2a94d4780f76470fd47e4580f14226",
          "md5": "a0279fa62ff9f742a6c19507a6a28667",
          "sha256": "decd27334014016df64e36cd854821dd2a8b63bfe51c9cbb5e199e36adbff991"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0279fa62ff9f742a6c19507a6a28667",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 16956,
        "upload_time": "2022-02-06T16:16:35",
        "upload_time_iso_8601": "2022-02-06T16:16:35.727419Z",
        "url": "https://files.pythonhosted.org/packages/e6/3c/1672a524fbd1e1e083a9929228007c2a94d4780f76470fd47e4580f14226/pyradox-tabular-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2aeb1f098b14aefc7190350f253e2754439f3272f97077c7157d25f3a5a916a4",
          "md5": "4051db84d3381086234ba22c58580f89",
          "sha256": "2c047622f4d862af975951fa7c8ee49415b0860d0903851481b3c4bc0717010d"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4051db84d3381086234ba22c58580f89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21371,
        "upload_time": "2022-02-07T18:09:44",
        "upload_time_iso_8601": "2022-02-07T18:09:44.506604Z",
        "url": "https://files.pythonhosted.org/packages/2a/eb/1f098b14aefc7190350f253e2754439f3272f97077c7157d25f3a5a916a4/pyradox_tabular-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06ce342b846cce7b664ccc6789d53a79b0208a6197049f5f7995dde795e3ade0",
          "md5": "3e3c53c1a063c013059048bcff4fd1fb",
          "sha256": "0ace01f716982cf06f3e09706e7e5771d2b5a9c0dde1da0baeb8c98a88eaf732"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e3c53c1a063c013059048bcff4fd1fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 16977,
        "upload_time": "2022-02-07T18:09:50",
        "upload_time_iso_8601": "2022-02-07T18:09:50.072907Z",
        "url": "https://files.pythonhosted.org/packages/06/ce/342b846cce7b664ccc6789d53a79b0208a6197049f5f7995dde795e3ade0/pyradox-tabular-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1c4e9d85e7275f55c93d915e4438fa9e02691115924c8038c2f261221bebaec",
          "md5": "b171c9060c601360138f83caf47ad487",
          "sha256": "cf9b67df48ed863bdb9f6cbd71ebeae22dba0069541d304c070fa8d82e3cc077"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b171c9060c601360138f83caf47ad487",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21452,
        "upload_time": "2022-02-10T08:37:06",
        "upload_time_iso_8601": "2022-02-10T08:37:06.901776Z",
        "url": "https://files.pythonhosted.org/packages/a1/c4/e9d85e7275f55c93d915e4438fa9e02691115924c8038c2f261221bebaec/pyradox_tabular-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91cf4277ccfd6aa5ee865efe7449b6dd423a4aebaa610476c711f8558a51e96c",
          "md5": "cce12e251c555d0a74c3438b7cb7572f",
          "sha256": "ca5560c48464d9dd09c13d713d464b02153a0b1ec608232df3219ba2676cfe07"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cce12e251c555d0a74c3438b7cb7572f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17045,
        "upload_time": "2022-02-10T08:37:13",
        "upload_time_iso_8601": "2022-02-10T08:37:13.643159Z",
        "url": "https://files.pythonhosted.org/packages/91/cf/4277ccfd6aa5ee865efe7449b6dd423a4aebaa610476c711f8558a51e96c/pyradox-tabular-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcf13b841e75edffc4b1b1873ec07dc5c38867cc250d7cd283e6c495222027a7",
          "md5": "5a4a9256b6dbcd2c434f22259777aa7f",
          "sha256": "039f30adacbce59e2c1af6ad04b86f004bcd486da35aa1987546dbc4b3eea828"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a4a9256b6dbcd2c434f22259777aa7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21451,
        "upload_time": "2022-02-10T18:07:46",
        "upload_time_iso_8601": "2022-02-10T18:07:46.731841Z",
        "url": "https://files.pythonhosted.org/packages/bc/f1/3b841e75edffc4b1b1873ec07dc5c38867cc250d7cd283e6c495222027a7/pyradox_tabular-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fc4e35e4dde35f9689ecf1e9b726315215571d9c0dc73a13a139d84a60fc047",
          "md5": "c2dfd8ee033a432fef94952108fa426e",
          "sha256": "822935c3285d62e1ca933f025bcaf838f8dc812c91a2318f2f250506a1a86a53"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2dfd8ee033a432fef94952108fa426e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17027,
        "upload_time": "2022-02-10T18:07:49",
        "upload_time_iso_8601": "2022-02-10T18:07:49.668266Z",
        "url": "https://files.pythonhosted.org/packages/4f/c4/e35e4dde35f9689ecf1e9b726315215571d9c0dc73a13a139d84a60fc047/pyradox-tabular-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ca266cad762d4e35967ad5449aed03b3f62713b7198551428b4fb2ffd4288bd",
          "md5": "d1ffad93f857a8503f601a0251fd6c6a",
          "sha256": "33eb44a530dfc68e2fec61613f4d3b725792c273e87b6358c15a777c093c73b1"
        },
        "downloads": -1,
        "filename": "pyradox_tabular-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ffad93f857a8503f601a0251fd6c6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 22558,
        "upload_time": "2022-02-21T16:16:51",
        "upload_time_iso_8601": "2022-02-21T16:16:51.076407Z",
        "url": "https://files.pythonhosted.org/packages/7c/a2/66cad762d4e35967ad5449aed03b3f62713b7198551428b4fb2ffd4288bd/pyradox_tabular-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b2dd9555ba2db19b4308432fe082398ddec02b4afb07763c361c9e5b42c0ef4",
          "md5": "b56414cf0349685534378a042c76a746",
          "sha256": "91ec956278f49bef2398390d2c05524a5febf978c1dc27abb672437bc65277d8"
        },
        "downloads": -1,
        "filename": "pyradox-tabular-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b56414cf0349685534378a042c76a746",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17478,
        "upload_time": "2022-02-21T16:16:55",
        "upload_time_iso_8601": "2022-02-21T16:16:55.088015Z",
        "url": "https://files.pythonhosted.org/packages/0b/2d/d9555ba2db19b4308432fe082398ddec02b4afb07763c361c9e5b42c0ef4/pyradox-tabular-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ca266cad762d4e35967ad5449aed03b3f62713b7198551428b4fb2ffd4288bd",
        "md5": "d1ffad93f857a8503f601a0251fd6c6a",
        "sha256": "33eb44a530dfc68e2fec61613f4d3b725792c273e87b6358c15a777c093c73b1"
      },
      "downloads": -1,
      "filename": "pyradox_tabular-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1ffad93f857a8503f601a0251fd6c6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 22558,
      "upload_time": "2022-02-21T16:16:51",
      "upload_time_iso_8601": "2022-02-21T16:16:51.076407Z",
      "url": "https://files.pythonhosted.org/packages/7c/a2/66cad762d4e35967ad5449aed03b3f62713b7198551428b4fb2ffd4288bd/pyradox_tabular-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b2dd9555ba2db19b4308432fe082398ddec02b4afb07763c361c9e5b42c0ef4",
        "md5": "b56414cf0349685534378a042c76a746",
        "sha256": "91ec956278f49bef2398390d2c05524a5febf978c1dc27abb672437bc65277d8"
      },
      "downloads": -1,
      "filename": "pyradox-tabular-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b56414cf0349685534378a042c76a746",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 17478,
      "upload_time": "2022-02-21T16:16:55",
      "upload_time_iso_8601": "2022-02-21T16:16:55.088015Z",
      "url": "https://files.pythonhosted.org/packages/0b/2d/d9555ba2db19b4308432fe082398ddec02b4afb07763c361c9e5b42c0ef4/pyradox-tabular-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}