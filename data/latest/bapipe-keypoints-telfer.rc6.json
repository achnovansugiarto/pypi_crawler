{
  "info": {
    "author": "Andre Telfer",
    "author_email": "andretelfer@cmail.carleton.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Behaviour Analysis for Keypoint Data\nA pipeline for turning keypoint data gathered from deep learning models into data and visualizations. \n\n## Background\nAdvances in Deep Learning have driven a wave of pose-estimation tools which extract information from animals and their surroundings ([DeepLabCut](http://www.mackenziemathislab.org/deeplabcut), [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose), [SLEAP](https://sleap.ai/)). These models are trained to extract keypoint data (x, y coordinates) for specified bodyparts or objects in the environment.\n\nThis pipeline automates a number of steps involved in turning this keypoint data from behavioural experiments into meaningful data and visuallizations. Some of these steps include\n- Aligning videos to account for changes in camera perspective\n- Several outlier-filtering strategies\n- Creating videos and other validation graphs\n- Trimming video duration for when the mouse is first visible\n\nWe demonstrate a few examples of using DeepLabCut data in order to produce\n1. Custom validation videos\n2. Total distance travelled by treatment group\n3. Heatmaps by treatment group treatment groups\n4. Time spent in a zone\n\nEntire experiments can often be processed quite quickly at this level, so this pipeline enables the ability to evaluate experiments for multiple parameters (e.g. different zone sizes) and develop real time dashboards for analysis. Furthermore, it includes an image registration step that removes scale and position variance between videos, allowing for perfectly aligned analysis not available in existing commercial or open source tools. \n\nAuthor: Andre Telfer (andretelfer@cmail.carleton.ca) \n\n## Installation\n```python\npip install -U -q bapipe-keypoints-telfer\n```\n\n    Note: you may need to restart the kernel to use updated packages.\n\n\nTo install the local code \n```python\npip install --upgrade --no-deps --force-reinstall ..\n```\n\n## Dockerfiles\nFor convenience, we also provide dockerfiles to replicate our analysis environment\n\n```bash\ngit clone git@github.com:A-Telfer/bapipe-keypoints.git\ncd bapipe-keypoints\nbash docker-run.sh\n```\n\n## Structure of Data\nIn order to use this pipeline, load a csv file with the following information\n- subject id\n- path to video\n- path to mouse bodypart position files (produced from DeepLabCut or similar pose estimation software) \n- path to video landmarks (e.g. box corners) [optional]\n- path to camera calibrations [optional]\n\n\n```python\n%%time\nimport pandas as pd\nfrom pathlib import Path\n\nPROJECT = Path(\"/home/jovyan/shared/shared/curated/fran/v2\")\n\ndatafiles = pd.read_csv(PROJECT / 'datafiles.csv')\ndatafiles.head(3)\n```\n\n    CPU times: user 378 ms, sys: 1.03 s, total: 1.41 s\n    Wall time: 210 ms\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>video</th>\n      <th>mouse_labels</th>\n      <th>landmark_labels</th>\n      <th>camera_calibrations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>m1</td>\n      <td>videos/m1.mp4</td>\n      <td>videos/mouse_labels/m1DLC_resnet50_agrpNov19sh...</td>\n      <td>videos/landmark_labels/m1DLC_resnet50_agrp_lan...</td>\n      <td>camera_calibrations.json</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>m2</td>\n      <td>videos/m2.mp4</td>\n      <td>videos/mouse_labels/m2DLC_resnet50_agrpNov19sh...</td>\n      <td>videos/landmark_labels/m2DLC_resnet50_agrp_lan...</td>\n      <td>camera_calibrations.json</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>m3</td>\n      <td>videos/m3.mp4</td>\n      <td>videos/mouse_labels/m3DLC_resnet50_agrpNov19sh...</td>\n      <td>videos/landmark_labels/m3DLC_resnet50_agrp_lan...</td>\n      <td>camera_calibrations.json</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## Load Experiment\n- Normalize videos\n  - Register arena corners\n  - Remove lens warping\n  - Clip start time for when mouse is first visible\n- Outlier correction \n  - Remove based on pairwise distances\n  - Remove based on bodypart velocities\n- Provide an api for common operations\n  - Parallelized analysis to reduce run times by several times\n  - Provides visibility for common features\n\n\n```python\n%%time \nimport numpy as np\nimport bapipe\n\nconfig = bapipe.AnalysisConfig(\n    box_shape=(400, 300),            # size of the box in mm (or any other units)\n    remove_lens_distortion=True,     # remove distortion caused by camera lens (requires a calibration file)\n    use_box_reference=True,          # align all of the videos for the test arena\n)\n\nvideo_set = bapipe.VideoSet.load(datafiles, config, root_dir=PROJECT)\nvideo_set\n```\n\n    100%|████████████████████████████████████████████████████████| 72/72 [00:09<00:00,  7.63it/s]\n\n\n    CPU times: user 1.83 s, sys: 737 ms, total: 2.57 s\n    Wall time: 10.1 s\n\n\n\n\n\n<table><tr><td>Number of videos</td><td>72</td></tr><tr><td>Video sizes (W,H)</td><td>960x540</td></tr><tr><td>Total duration [s]</td><td>47837.6</td></tr><tr><td>Average duration [s]</td><td>664.41</td></tr></table>\n\n\n\n## Compare original videos to corrected videos\n\n\n```python\n%%time \nimport matplotlib.pyplot as plt\n\ngs = plt.GridSpec(1, 100)\nplt.figure(figsize=(16,10))\n\nplt.subplot(gs[:52])\nplt.title(\"Original\")\noverride_config = {'use_box_reference': False, 'remove_lens_distortion': False}\nplt.imshow(bapipe.create_video_grid(video_set, override_config=override_config))\nplt.axis('off')\n\nplt.subplot(gs[60:])\nplt.title(\"Aligned\")\nplt.imshow(bapipe.create_video_grid(video_set))\nplt.axis('off')\nplt.show()\n```\n\n\n    \n![png](docs/assets/output_9_0.png)\n    \n\n\n    CPU times: user 45.3 s, sys: 5.51 s, total: 50.9 s\n    Wall time: 8.9 s\n\n\n## Analysis Examples\n\n\n```python\n%%time\ntreatment_data = pd.read_csv(PROJECT / 'cohorts1&2.csv', index_col='animal')\ntreatment_data.head(3)\n```\n\n    CPU times: user 3.49 ms, sys: 0 ns, total: 3.49 ms\n    Wall time: 2.65 ms\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>injected_on</th>\n      <th>injected_with</th>\n      <th>amount_eaten</th>\n      <th>treatment1</th>\n      <th>treatment2</th>\n      <th>cohort</th>\n      <th>latency_to_approach</th>\n      <th>time_in_corner</th>\n      <th>time_eating</th>\n      <th>sex</th>\n    </tr>\n    <tr>\n      <th>animal</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>m1</th>\n      <td>2021-07-16</td>\n      <td>saline/saline</td>\n      <td>0.0</td>\n      <td>saline</td>\n      <td>saline</td>\n      <td>1</td>\n      <td>6.18</td>\n      <td>245.17</td>\n      <td>16.15</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>m2</th>\n      <td>2021-07-15</td>\n      <td>saline/ghrelin</td>\n      <td>0.2</td>\n      <td>saline</td>\n      <td>ghrelin</td>\n      <td>1</td>\n      <td>22.97</td>\n      <td>124.21</td>\n      <td>35.81</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>m3</th>\n      <td>2021-07-15</td>\n      <td>mt2/ghrelin</td>\n      <td>0.1</td>\n      <td>mt2</td>\n      <td>ghrelin</td>\n      <td>1</td>\n      <td>10.39</td>\n      <td>130.09</td>\n      <td>11.01</td>\n      <td>male</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Example 1: Video Validation\n    Annotate what's being scored over the videos\n\n\n```python\n%%time\nfrom tqdm import tqdm\nfrom IPython.display import Video\n\nvideo = video_set[0]\nwith bapipe.VideoWriter(video, 'test.mp4') as writer:\n    for i in tqdm(range(1000,1100)):\n        frame = video.get_frame(i)\n        bapipe.draw_dataframe_points(frame, video.mouse_df, i)\n        writer.write(frame)\n\nVideo('test.mp4')\n```\n\n    100%|██████████████████████████████████████████████████████| 100/100 [00:04<00:00, 22.82it/s]\n\n    CPU times: user 24.6 s, sys: 3.22 s, total: 27.8 s\n    Wall time: 4.46 s\n\n\n    \n\n\n\n\n\n<video src=\"docs/assets/test.mp4\" controls  >\n      Your browser does not support the <code>video</code> element.\n    </video>\n\n\n\n### Example 2: Distance Travelled\n\n\n```python\n%%time\nimport seaborn as sns\n\ndef get_distance_travelled(video):\n    # Average the bodypart positions of the mouse to get its centroid \n    centroid = video.mouse_df.groupby(level='coords', axis=1).mean()\n    \n    # Get the between-frame movement of the bodyparts\n    deltas = centroid[['x', 'y']].diff().dropna()\n    \n    # Calculate the total distance travelled \n    return np.sum(np.linalg.norm(deltas.values, axis=1))\n\ndistances = pd.Series(\n    video_set.apply(get_distance_travelled),\n    index=video_set.index, \n    name='distance')\n\nsns.barplot(data=treatment_data.join(distances), x='injected_with', y='distance')\nplt.xlabel(\"Treatment Group\")\nplt.ylabel(\"Distance Travelled [mm]\")\nplt.title(\"Locomotivity: Distance Travelled\")\nplt.show()\n```\n\n    100%|███████████████████████████████████████████████████████| 72/72 [00:00<00:00, 216.58it/s]\n\n\n\n    \n![png](docs/assets/output_15_1.png)\n    \n\n\n    CPU times: user 439 ms, sys: 977 ms, total: 1.42 s\n    Wall time: 660 ms\n\n\n### Example 2: Heatmaps\nShow what zones the mice are spending their time\n\n#### Find position density\n\n\n```python\n%%time\nfrom tqdm import tqdm \nfrom scipy.stats.kde import gaussian_kde\n\ngroups = treatment_data.groupby(['treatment1', 'treatment2'])\nw,h = config.box_shape\n\nresult = {}\nfor idx, group in tqdm(groups):\n    group_videos = [video_set[video_set.index.index(idx)] for idx in group.index]\n    \n    # Stack the mouse-location dataframes for each mouse in this treatment group\n    group_df = pd.concat([video.mouse_df for video in group_videos], axis=0).dropna()\n    \n    # Get the centroid of the mouse by averaging the bodypart positions in each frame\n    centroid = group_df.groupby(level='coords', axis=1).mean()[['x', 'y']]\n    data = centroid[['y', 'x']].values.T\n    \n    # Get the density of time spent in location (down sampled for 1 frame every 100)\n    k = gaussian_kde(data[:,::100], )\n    mgrid = np.mgrid[:h, :w]\n    z = k(mgrid.reshape(2, -1))\n    result['/'.join(idx)] = z\n```\n\n    <timed exec>:2: DeprecationWarning: Please use `gaussian_kde` from the `scipy.stats` namespace, the `scipy.stats.kde` namespace is deprecated.\n    100%|██████████████████████████████████████████████████████████| 4/4 [00:11<00:00,  2.86s/it]\n\n    CPU times: user 12.3 s, sys: 4.22 s, total: 16.5 s\n    Wall time: 11.4 s\n\n\n    \n\n\n#### Create contour plots\n\n\n```python\n%%time\nimport matplotlib.pyplot as plt\n\nCONTOUR_LEVELS = 20\n\nvideo = video_set[0]\nframe = video.get_frame(1000)\n\nplt.figure(figsize=(20, 5))\ngs = plt.GridSpec(1, 5)\n\nplt.title(\"Box Reference\")\nplt.subplot(gs[0])\nplt.imshow(frame)\n\nfor idx, (gname, z) in enumerate(result.items()):\n    plt.subplot(gs[idx+1])\n    plt.title(gname)\n    plt.imshow(frame) # plotting a frame sets up the matplotlib axis correctly\n    plt.imshow(z.reshape(mgrid.shape[1:]))\n    plt.contourf(z.reshape(mgrid.shape[1:]), cmap='seismic', alpha=1, levels=CONTOUR_LEVELS)\n```\n\n    CPU times: user 589 ms, sys: 50 ms, total: 639 ms\n    Wall time: 178 ms\n\n\n\n    \n![png](docs/assets/output_20_1.png)\n    \n\n\n### Example 3: Zone based analysis\nZones on can be drawn once in tools like napari, or automatically plotted\n\nIf the videos have been normalized, zones can be drawn once and applied to all videos\n\n\n```python\n%%time\ndef get_center_zone(video):\n    w,h = video_set[0].config.box_shape\n    cx, cy = w//2, h//2\n    s = 50\n    return plt.Polygon([\n        [cx-s, cy-s],\n        [cx-s, cy+s],\n        [cx+s, cy+s],\n        [cx+s, cy-s]\n    ], alpha=0.5, label='Center zone')\n    \ndef time_in_zone(video):\n    center_zone = get_center_zone(video)\n    centroid = video.mouse_df.groupby(level='coords', axis=1).mean()[['x', 'y']].values\n    return np.sum(center_zone.contains_points(centroid)) / video.fps\n\n\ndata = pd.Series(\n    video_set.apply(time_in_zone),\n    index=video_set.index, \n    name='time_in_center_zone')\n\nplt.figure(figsize=(15, 5))\ngs = plt.GridSpec(1, 2)\n\nplt.subplot(gs[0])\nv = video_set[0]\nplt.imshow(v.get_frame(900))\nplt.gca().add_patch(get_center_zone(v))\n\nplt.subplot(gs[1])\nsns.barplot(data=treatment_data.join(data), x='injected_with', y='time_in_center_zone')\nplt.xlabel(\"Treatment Group\")\nplt.ylabel(\"Time in Zone [s]\")\nplt.title(\"Time in Zone\")\n```\n\n    100%|███████████████████████████████████████████████████████| 72/72 [00:00<00:00, 185.93it/s]\n\n\n    CPU times: user 583 ms, sys: 309 ms, total: 892 ms\n    Wall time: 682 ms\n\n\n\n\n\n    Text(0.5, 1.0, 'Time in Zone')\n\n\n\n\n    \n![png](docs/assets/output_22_3.png)\n    \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/A-Telfer/bapipe-keypoints",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bapipe-keypoints-telfer",
    "package_url": "https://pypi.org/project/bapipe-keypoints-telfer/",
    "platform": null,
    "project_url": "https://pypi.org/project/bapipe-keypoints-telfer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/A-Telfer/bapipe-keypoints/issues",
      "Homepage": "https://github.com/A-Telfer/bapipe-keypoints"
    },
    "release_url": "https://pypi.org/project/bapipe-keypoints-telfer/0.1.0/",
    "requires_dist": [
      "opencv-python (>=4)",
      "numpy",
      "pandas",
      "matplotlib",
      "ffmpeg-python"
    ],
    "requires_python": ">=3.6",
    "summary": "Behavioural Analysis with Keypoints Data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13819417,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc73c915fcd7ef7227ff6b5e807410ba142f95965e8de9a7ccc8faaab7f87b63",
          "md5": "b1fb791ac4a81d8e7f630167e8388a65",
          "sha256": "b820fbe2a2c7cff4322b1fedea14a93873e0f52c2d919627754b071a5395b77a"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1fb791ac4a81d8e7f630167e8388a65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8901,
        "upload_time": "2022-05-13T23:35:49",
        "upload_time_iso_8601": "2022-05-13T23:35:49.776250Z",
        "url": "https://files.pythonhosted.org/packages/bc/73/c915fcd7ef7227ff6b5e807410ba142f95965e8de9a7ccc8faaab7f87b63/bapipe_keypoints_telfer-0.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "749c872b6cf645a9ebaa413a36232dd03a9cf734a4087df49b5739a972783a80",
          "md5": "bba3f3225c9a61f50aed013b631fbeb1",
          "sha256": "067ba994a0edc8eca9ba9dce2d1d8a3765e3ffb1f13404f8273f1e605ec09308"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bba3f3225c9a61f50aed013b631fbeb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8522,
        "upload_time": "2022-05-13T23:35:51",
        "upload_time_iso_8601": "2022-05-13T23:35:51.936540Z",
        "url": "https://files.pythonhosted.org/packages/74/9c/872b6cf645a9ebaa413a36232dd03a9cf734a4087df49b5739a972783a80/bapipe-keypoints-telfer-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd1951845c3f7081a3c5c6b5839da994841c413a580de10539f7546a41f02a4",
          "md5": "e12c31a236fccfb2364e5b4cccb685c1",
          "sha256": "8fcc07b87548ed7b562dbde8f79ad1999ec0695d0213bac1fe0df97c3a049445"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e12c31a236fccfb2364e5b4cccb685c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8904,
        "upload_time": "2022-05-13T23:41:27",
        "upload_time_iso_8601": "2022-05-13T23:41:27.040421Z",
        "url": "https://files.pythonhosted.org/packages/0f/d1/951845c3f7081a3c5c6b5839da994841c413a580de10539f7546a41f02a4/bapipe_keypoints_telfer-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79a15ad114925bf94c2fdd9ed82075813de5a2c0e281a989851cbb776179ab1b",
          "md5": "6f9d92b57740292371c04b4b8a8c1b9b",
          "sha256": "38464e676597a1b8c35ce671f8c374e34357d8e0808c2fde9bad7ca81156d622"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6f9d92b57740292371c04b4b8a8c1b9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8530,
        "upload_time": "2022-05-13T23:41:28",
        "upload_time_iso_8601": "2022-05-13T23:41:28.836604Z",
        "url": "https://files.pythonhosted.org/packages/79/a1/5ad114925bf94c2fdd9ed82075813de5a2c0e281a989851cbb776179ab1b/bapipe-keypoints-telfer-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a74aa378c8c551b9b229fe3aa1e048e54ecbba3f3b61ee8830f6dd810ae0e0d",
          "md5": "69a903fb6ebd54f2ba81f7bb2a19cde6",
          "sha256": "9a18c9c96e0b364b23034014be2eb53e128dbf00db9288cceb8422c092a15e01"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69a903fb6ebd54f2ba81f7bb2a19cde6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8921,
        "upload_time": "2022-05-13T23:49:02",
        "upload_time_iso_8601": "2022-05-13T23:49:02.463626Z",
        "url": "https://files.pythonhosted.org/packages/2a/74/aa378c8c551b9b229fe3aa1e048e54ecbba3f3b61ee8830f6dd810ae0e0d/bapipe_keypoints_telfer-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef1b76970aaf8c20402c9dcc55bca6dc038787793fe39fc2846c690f330a7db5",
          "md5": "b4c8728ea579b1265fa3c6268bedd31b",
          "sha256": "9e697fc8bf1c3f5b1cf5d8ba5155a7053462bf61f4a0f75b2f9e3faf7de44cff"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b4c8728ea579b1265fa3c6268bedd31b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8522,
        "upload_time": "2022-05-13T23:49:04",
        "upload_time_iso_8601": "2022-05-13T23:49:04.168258Z",
        "url": "https://files.pythonhosted.org/packages/ef/1b/76970aaf8c20402c9dcc55bca6dc038787793fe39fc2846c690f330a7db5/bapipe-keypoints-telfer-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cbce0fbc9eb5966a19b748a70f073a3eaac7044458466ed9a13ca92e6441ca6",
          "md5": "859f4a87e6ce5fe52de4d4f131f90cb6",
          "sha256": "dddec245924d4108a165cb52018de74d5b381acf9dafbdea30ef7a146e23fc24"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "859f4a87e6ce5fe52de4d4f131f90cb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8930,
        "upload_time": "2022-05-14T03:23:31",
        "upload_time_iso_8601": "2022-05-14T03:23:31.541552Z",
        "url": "https://files.pythonhosted.org/packages/0c/bc/e0fbc9eb5966a19b748a70f073a3eaac7044458466ed9a13ca92e6441ca6/bapipe_keypoints_telfer-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88dd1d4d60f894c94dc1c2b303376e1c85bd4a893ce1c53ed2d32f739f4b5945",
          "md5": "fa22375e07d6ce0699b746a0f924a47f",
          "sha256": "267bd4e4472fa0b105734b3f94dea453ee14bc5960b84bc2ac4ea8fee2b2d08f"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fa22375e07d6ce0699b746a0f924a47f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8542,
        "upload_time": "2022-05-14T03:23:33",
        "upload_time_iso_8601": "2022-05-14T03:23:33.861607Z",
        "url": "https://files.pythonhosted.org/packages/88/dd/1d4d60f894c94dc1c2b303376e1c85bd4a893ce1c53ed2d32f739f4b5945/bapipe-keypoints-telfer-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "666c7e71be47c8787f68ae4e3b14c7760fa7177969d27543294be33cf87458cf",
          "md5": "b12c7133759e81c68406a42aac8b677b",
          "sha256": "834a2a7da71003c2c68c23bdf9034ed269ba532a3d4f2ac687e8cede3b8da549"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b12c7133759e81c68406a42aac8b677b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8945,
        "upload_time": "2022-05-14T03:28:08",
        "upload_time_iso_8601": "2022-05-14T03:28:08.514747Z",
        "url": "https://files.pythonhosted.org/packages/66/6c/7e71be47c8787f68ae4e3b14c7760fa7177969d27543294be33cf87458cf/bapipe_keypoints_telfer-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d19b63a32c81b90912f50cfc03018e7bdf3433c978db0f7f449af854e73db95d",
          "md5": "47b61f606e8926a0c788f9c11e5d33d5",
          "sha256": "2a7e7f32c99944632adba21f25db88dcd14754ab15d2d342ac90a0903a215b36"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "47b61f606e8926a0c788f9c11e5d33d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8558,
        "upload_time": "2022-05-14T03:28:10",
        "upload_time_iso_8601": "2022-05-14T03:28:10.494745Z",
        "url": "https://files.pythonhosted.org/packages/d1/9b/63a32c81b90912f50cfc03018e7bdf3433c978db0f7f449af854e73db95d/bapipe-keypoints-telfer-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3730d056b287172d6e250eaaa10b3b02e3461e736d33da837ea859ad69fa0d5f",
          "md5": "b0786d01bdf580e087fc2789899c6b15",
          "sha256": "60afcb1947b9f0bb5e7406bbe44c87e7e040f11ed0433c8b3298456c65fee9fc"
        },
        "downloads": -1,
        "filename": "bapipe_keypoints_telfer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0786d01bdf580e087fc2789899c6b15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13589,
        "upload_time": "2022-05-15T01:34:49",
        "upload_time_iso_8601": "2022-05-15T01:34:49.688476Z",
        "url": "https://files.pythonhosted.org/packages/37/30/d056b287172d6e250eaaa10b3b02e3461e736d33da837ea859ad69fa0d5f/bapipe_keypoints_telfer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e140a060bc34f1d7c16982a59e6fec1a901fb6ba166cb485ded01bb3fc57323",
          "md5": "b50cbafce6f4f372d1e4dfec384c5d46",
          "sha256": "42166a535dc9b91a406b36987f74cfd1886549cb677f92fe6d8fee67c697423f"
        },
        "downloads": -1,
        "filename": "bapipe-keypoints-telfer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b50cbafce6f4f372d1e4dfec384c5d46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17072,
        "upload_time": "2022-05-15T01:34:52",
        "upload_time_iso_8601": "2022-05-15T01:34:52.153486Z",
        "url": "https://files.pythonhosted.org/packages/4e/14/0a060bc34f1d7c16982a59e6fec1a901fb6ba166cb485ded01bb3fc57323/bapipe-keypoints-telfer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3730d056b287172d6e250eaaa10b3b02e3461e736d33da837ea859ad69fa0d5f",
        "md5": "b0786d01bdf580e087fc2789899c6b15",
        "sha256": "60afcb1947b9f0bb5e7406bbe44c87e7e040f11ed0433c8b3298456c65fee9fc"
      },
      "downloads": -1,
      "filename": "bapipe_keypoints_telfer-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0786d01bdf580e087fc2789899c6b15",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13589,
      "upload_time": "2022-05-15T01:34:49",
      "upload_time_iso_8601": "2022-05-15T01:34:49.688476Z",
      "url": "https://files.pythonhosted.org/packages/37/30/d056b287172d6e250eaaa10b3b02e3461e736d33da837ea859ad69fa0d5f/bapipe_keypoints_telfer-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e140a060bc34f1d7c16982a59e6fec1a901fb6ba166cb485ded01bb3fc57323",
        "md5": "b50cbafce6f4f372d1e4dfec384c5d46",
        "sha256": "42166a535dc9b91a406b36987f74cfd1886549cb677f92fe6d8fee67c697423f"
      },
      "downloads": -1,
      "filename": "bapipe-keypoints-telfer-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b50cbafce6f4f372d1e4dfec384c5d46",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17072,
      "upload_time": "2022-05-15T01:34:52",
      "upload_time_iso_8601": "2022-05-15T01:34:52.153486Z",
      "url": "https://files.pythonhosted.org/packages/4e/14/0a060bc34f1d7c16982a59e6fec1a901fb6ba166cb485ded01bb3fc57323/bapipe-keypoints-telfer-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}