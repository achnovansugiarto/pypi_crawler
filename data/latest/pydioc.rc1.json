{
  "info": {
    "author": "Nikolai Zujev",
    "author_email": "nikolai.zujev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Python DI / IoC container\n\n> Dependency injection means giving an object its instance variables.\n>\n> -- [James Shore, Dependency Injection Demystified](http://jamesshore.com/Blog/Dependency-Injection-Demystified.html)\n\nInitially it was created for AWS Lambda Functions to simplify development\nwith loose coupling component and improved testing capabilities.\n\nInspiration comes from [python:design_patterns:inversion_of_control](https://web.archive.org/web/20130703221553/http://www.emilmont.net/doku.php?id=python:design_patterns:inversion_of_control) summary article.\n\nThis modules is an optimized version of a container used in [p3.4.advanced-di-ioc](https://github.com/jaymecd/lambda-modular-python/tree/master/p3.4.advanced-di-ioc/myfunction/src/di) section of my [lambda-modular-python](https://github.com/jaymecd/lambda-modular-python) MOB session @cloudreach.\n\n## Usage\n\nOrchestrate container in `ioc.py` file:\n\n```python\n# ioc.py\nimport pydioc\nimport boto3\nimport some_sdk\nfrom . import services\n\ndef build_container(ssm_param_api_key: str, ddb_status_table: str, format_type: str) -> pydioc.Container:\n    return pydioc.Container(\n        (\"_boto3_session\", boto3.Session),\n        (\"lambda_context\", pydioc.ContextProxy),\n\n        (\"_api_key_loader\", services.api_key_loader, [\"_boto3_session\", lambda: ssm_param_api_key]),\n        (\"_status_updater\", services.status_updater, [\"_boto3_session\", \"lambda_context\", lambda: ddb_status_table]),\n\n        (\"_sdk_data_formatter\", some_sdk.FormatterFactory, [lambda: format_type]),\n        (\"_sdk_client_factory\", services.sdk_client_factory, [\"_api_key_loader\"]),\n\n        (\"_sdk_data_transfer\", services.sdk_data_transfer, [\"_sdk_client_factory\", \"_sdk_data_formatter\", \"lambda_context\"]),\n\n        (\"event_handler\", services.event_handler, [\"_sdk_data_transfer\", \"_status_updater\"]),\n    )\n```\n\nDefine services in `services.py` file:\n\n```python\n# services.py\nimport boto3\nimport some_sdk\n\n# ...\n\ndef api_key_loader(session: boto3.Session, ssm_param_api_key: str):\n    assert ssm_param_api_key, 'expecting non empty api_key param'\n\n    def _api_key_loader():\n        # very simplified code\n        return session.client('ssm').get_parameter(Name=ssm_param_api_key)[\"Parameter\"][\"Value\"]\n\n    return _api_key_loader\n\ndef sdk_client_factory(load_api_key: api_key_loader):\n    def _sdk_client_factory(client_type):\n        # very simplified code\n        api_key = load_api_key()\n        if client_type == 'User':\n            return some_sdk.user.Client(api_key)\n        raise ValueError(f\"unknown client type: {client_type}\")\n    return sdk_client_factory\n\ndef sdk_data_transfer(client_factory: sdk_client_factory, formatter: some_sdk.Formatter, context: object):\n    def _sdk_data_transfer(payload: dict)\n        # very simplified code\n        client = client_factory(payload['type'])\n        client.publish(formatter.format(payload['body']), handler=context.invoked_function_arn)\n    return _sdk_data_transfer\n\n# ...\n```\n\nConfigure and run in `main.py` file:\n\n```python\n# main.py\nimport os\nfrom . import ioc\n\ninit_error = None\n\ntry:\n    container = ioc.build_container(\n        ssm_param_api_key=os.environ.get(\"SSM_PARAM_API_KEY\"),\n        ddb_status_table=os.environ.get(\"DDB_STATUS_TABLE\"),\n        format_type=os.environ.get(\"FORMAT_TYPE\", \"YAML\"),\n    )\nexcept Exception as ex:\n    init_error = ex\n\n\ndef lambda_handler(event: dict, context: object):\n    if init_error:\n        raise init_error\n\n    container.lambda_context(context)\n\n    return container.event_handler(event)\n```\n\nIn this example `container` would be compiled once per Lambda Function life cycle,\nwhile `lambda_handler` processes incoming requests sequentially, until it dies after idle timeout.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaymecd/pydioc",
    "keywords": "dependency injection ioc container",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydioc",
    "package_url": "https://pypi.org/project/pydioc/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydioc/",
    "project_urls": {
      "Bug Reports": "https://github.com/jaymecd/pydioc/issues",
      "Documentation": "https://github.com/jaymecd/pydioc",
      "Homepage": "https://github.com/jaymecd/pydioc",
      "Repository": "https://github.com/jaymecd/pydioc"
    },
    "release_url": "https://pypi.org/project/pydioc/0.1/",
    "requires_dist": null,
    "requires_python": ">3.7",
    "summary": "Python DI/IoC container",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7215630,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93bbb2817bc22aa7eb17eaf0d6502833aeb9da7d1b92b881b7523593281e8e0b",
          "md5": "34123637ba32f1fd313f9d46b5ab7469",
          "sha256": "c266f55614bec72f085d69c2d071081d825a3e00e368facbeda7047b9acfddca"
        },
        "downloads": -1,
        "filename": "pydioc-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34123637ba32f1fd313f9d46b5ab7469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 4108,
        "upload_time": "2020-05-11T13:57:49",
        "upload_time_iso_8601": "2020-05-11T13:57:49.854815Z",
        "url": "https://files.pythonhosted.org/packages/93/bb/b2817bc22aa7eb17eaf0d6502833aeb9da7d1b92b881b7523593281e8e0b/pydioc-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93bbb2817bc22aa7eb17eaf0d6502833aeb9da7d1b92b881b7523593281e8e0b",
        "md5": "34123637ba32f1fd313f9d46b5ab7469",
        "sha256": "c266f55614bec72f085d69c2d071081d825a3e00e368facbeda7047b9acfddca"
      },
      "downloads": -1,
      "filename": "pydioc-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "34123637ba32f1fd313f9d46b5ab7469",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7",
      "size": 4108,
      "upload_time": "2020-05-11T13:57:49",
      "upload_time_iso_8601": "2020-05-11T13:57:49.854815Z",
      "url": "https://files.pythonhosted.org/packages/93/bb/b2817bc22aa7eb17eaf0d6502833aeb9da7d1b92b881b7523593281e8e0b/pydioc-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}