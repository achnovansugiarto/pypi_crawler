{
  "info": {
    "author": "Marco Chiappetta",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Graphene input validator\n\n**Important**: this is a proof of concept and most likely not ready for production use.\n\nThe GraphQL Python ecosystem (i.e. `graphene`) lacks a proper way of validating input and returning meaningful errors to the client. This PoC aims at solving that. The client will know it needs to look into `extensions` for validation errors because of the error message `ValidationError`.\n\nThis library provides a class decorator `@validated`, for mutations, that allows for field level and input level validation similarly to [DRF](https://www.django-rest-framework.org/) serializers' `validate` methods. To validate a field you'll need to declare a static method named `validate_{field_name}`. Input wide validation (e.g. for fields that depend on other fields) can be performed in the `validate` method. `validate` will only be called if all field level validation methods succeed.\n\nIt also supports recursive validation so that you can use nested `InputField`s and validation will be performed all the way down to the scalars.\n\nTo indicate an invalid value the corresponding validation method should raise an instance of a subclass of `ValidationError`. Validation methods also allow to manipulate the value on the fly (for example to minimize DB queries by swapping an ID for the corresponding object) which will then replace the corresponding value in the main input (to be used in `validate` and the mutation itself).\n\nA `ValidationError` subclass can report one or more validation errors. Its `error_details` attribute must be an iterable of dictionaries, providing the details for the validation errors. The error detail mappings can contain any members, but as a convention `code` member is encouraged to be included.\n\nFor field level errors the error details will be amended with a `path` member that helps the client determine which slice of input is invalid, useful for rich forms and field highlighting on the UI.\n\nA `SingleValidationError` class is provided for validation errors that only contain a single error detail. This class also supports a `meta` error detail property, to inform the clients of potential constraints on the input itself.\n\nNote that verbose messages aren't supported because I strongly believe those should be handled on the client (together with localization).\n\n## Usage\n\n### Validating a mutation's input\n\nHere is an example usage (which you can find in [tests.py](tests.py) as well):\n\n```python\nimport graphene\nfrom graphene_validator.decorators import validated\n\nclass TestInput(graphene.InputObjectType):\n    email = graphene.String()\n    people = graphene.List(PersonalDataInput)\n    numbers = graphene.List(graphene.Int)\n    person = graphene.InputField(PersonalDataInput)\n\n    @staticmethod\n    def validate_email(email, info, **input):\n        if \"@\" not in email:\n            raise InvalidEmailFormat\n        return email.strip(\" \")\n\n    @staticmethod\n    def validate_numbers(numbers, info, **input):\n        if len(numbers) < 2:\n            raise LengthNotInRange(min=2)\n        for n in numbers:\n            if n < 0 or n > 9:\n                raise NotInRange(min=0, max=9)\n        return numbers\n\n    @staticmethod\n    def validate(input, info):\n        if input.get(\"people\") and input.get(\"email\"):\n            first_person_name_and_age = (\n                f\"{input['people'][0]['the_name']}{input['people'][0]['the_age']}\"\n            )\n            if input[\"email\"].split(\"@\")[0] != first_person_name_and_age:\n                raise NameAndAgeInEmail\n        return input\n\n\n@validated\nclass TestMutation(graphene.Mutation):\n    class Arguments:\n        input = TestInput()\n\n    result = graphene.String()\n\n    def mutate(self, _info, input):\n        return TestMutation(result=\"ok\"))\n```\n\nAnd this is an example output:\n\n```json\n{\n            \"errors\": [\n                {\n                    \"message\": \"ValidationError\",\n                    ...\n                    \"extensions\": {\n                        \"validationErrors\": [\n                            {\n                                \"code\": \"InvalidEmailFormat\",\n                                \"path\": [\n                                    \"email\"\n                                ]\n                            },\n                            {\n                                \"code\": \"LengthNotInRange\",\n                                \"path\": [\n                                    \"people\",\n                                    0,\n                                    \"name\"\n                                ],\n                                \"meta\": {\"min\": 1, \"max\": 300}\n                            }\n                        ]\n                    }\n                }\n            ],\n            ...\n        }\n```\n\n### Validating a field that depends on other fields or the request's context\n\n```python\nclass TestInput(graphene.InputObjectType):\n    first_field = graphene.String()\n    second_field = graphene.String()\n\n    @staticmethod\n    def validate_first_field(first_field, info, **input):\n        second_field = input.get(\"second_field\")\n        if second_field != \"desired value\":\n            raise InvalidSecondField\n        if info.context.user.role != \"admin\":\n            raise Unauthorized\n        return first_field\n\n    ...\n```\n\n## Running tests\n\n`pip install -e .`\n\n`pytest tests.py`\n\n## Limitations\n\nSince errors are listed in the `extensions` field of a generic `GraphQLError`, instead of using the typical [union based errors](https://blog.logrocket.com/handling-graphql-errors-like-a-champ-with-unions-and-interfaces/), errors aren't automatically discoverable. The ideal solution would be a hybrid that allows to decorate the mutation and obtain a union that can be used by the client for autodiscovery of the error types and metadata.\n\nAn example graphene-django query is added to [schema.py](graphene_validator/schema.py) to allow the client to discover error types and their metadata (the latter is a TODO).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chpmrc/graphene-validator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphene-validator",
    "package_url": "https://pypi.org/project/graphene-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/graphene-validator/",
    "project_urls": {
      "Homepage": "https://github.com/chpmrc/graphene-validator"
    },
    "release_url": "https://pypi.org/project/graphene-validator/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An input validation library for Graphene",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11796949,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88390703b1e3e0e299601f5ec7e1c52f22e6fc4401d1d68ca53966e6f2a6abff",
          "md5": "fe7123cc4df035f81eea4c8dfd1893f3",
          "sha256": "4020f01aa4e0574a456755af8aabe90459691a0a0bb4b98bc27700467118f179"
        },
        "downloads": -1,
        "filename": "graphene-validator-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe7123cc4df035f81eea4c8dfd1893f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8337,
        "upload_time": "2021-10-21T21:34:11",
        "upload_time_iso_8601": "2021-10-21T21:34:11.252886Z",
        "url": "https://files.pythonhosted.org/packages/88/39/0703b1e3e0e299601f5ec7e1c52f22e6fc4401d1d68ca53966e6f2a6abff/graphene-validator-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88390703b1e3e0e299601f5ec7e1c52f22e6fc4401d1d68ca53966e6f2a6abff",
        "md5": "fe7123cc4df035f81eea4c8dfd1893f3",
        "sha256": "4020f01aa4e0574a456755af8aabe90459691a0a0bb4b98bc27700467118f179"
      },
      "downloads": -1,
      "filename": "graphene-validator-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fe7123cc4df035f81eea4c8dfd1893f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8337,
      "upload_time": "2021-10-21T21:34:11",
      "upload_time_iso_8601": "2021-10-21T21:34:11.252886Z",
      "url": "https://files.pythonhosted.org/packages/88/39/0703b1e3e0e299601f5ec7e1c52f22e6fc4401d1d68ca53966e6f2a6abff/graphene-validator-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}