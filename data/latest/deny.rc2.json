{
  "info": {
    "author": "AurÃ©lien",
    "author_email": "aurelien.amilin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# deny\n\nLibrary for managing permissions in your Python 3.7+ projects.  \nFor example, it can be used to grant access to some API endpoints based on policies you defined.\n\n## Installation\n\n```\npip install deny\n```\n\n## Usage\n\nFirst define the permissions needed in your project:\n\n```python \nfrom deny import AutoPermission, Permission\n\nclass ProfilePermissions:\n    view = Permission(name=\"view_project\")\n    edit = AutoPermission()  # name will be automatically set to \"ProjectPermissions.edit\"\n\nclass SessionPermissions:\n    create = AutoPermission()\n    delete = AutoPermission()\n```\n\nThen create policies that will be used to grant the permissions:\n\n```python\nfrom deny import Policy, authorize\n\nclass LoggedInUser:\n    @authorize(SessionPermissions.delete)\n    async def can_logout(self):\n        return True\n\n\nclass AnonymousUser(Policy):\n    @authorize(SessionPermissions.create)\n    async def can_logout(self):\n        return True\n\n\nclass UserPolicy(LoggedInUser, Policy):\n    def __init__(self, current_user_id: int):\n        \"\"\"You should inject any dependency this policy relies on.\n        Here we just save the current user ID, but you might need \n        a connection to a database, a whole user object, etc.\n        \"\"\"\n        self._current_user_id = current_user_id\n\n    @authorize(ProfilePermissions.edit)\n    async def can_edit_profile(self, user_id: int) -> bool:\n        \"\"\"Only current user can edit his own profile.\"\"\"\n        return self._current_user_id == user_id\n\n    @authorize(ProfilePermissions.view)\n    async def can_view_profile(self, user_id: int) -> bool:\n        \"\"\"Everybody can view the user profiles.\"\"\"\n        return True\n```\n\nFinally create an Ability with the right policy and check if the permissions are granted:\n\n```python\nfrom deny import Ability\n\ndef get_ability(current_user_id: Optional[int]) -> Ability:\n    if current_user_id:\n        policy = UserPolicy(current_user_id)\n    else:\n        policy = AnonymousUser()\n\n    return Ability(policy=policy)\n\n################\n# Logged in user\nability = get_ability(1)\nawait ability.can(ProfilePermissions.view, 1) # True\nawait ability.can(ProfilePermissions.view, 2) # True\nawait ability.can(ProfilePermissions.edit, 1) # True\nawait ability.authorize(ProfilePermissions.edit, 1) # does not throw any error\nawait ability.can(ProfilePermissions.edit, 2) # False\nawait ability.authorize(ProfilePermissions.edit, 2) # throw an UnauthorizedError\nawait ability.can(SessionPermission.create) # False\nawait ability.can(ProfilePermissions.delete) # True\n\n################\n# Anonymous user\nability = get_ability(None)\nawait ability.can(ProfilePermissions.view, 1) # False\nawait ability.can(ProfilePermissions.view, 2) # False\nawait ability.can(ProfilePermissions.edit, 1) # False\nawait ability.authorize(ProfilePermissions.edit, 1) # throw an UnauthorizedError\nawait ability.can(ProfilePermissions.edit, 2) # False\nawait ability.authorize(ProfilePermissions.edit, 2) # throw an UnauthorizedError\nawait ability.can(SessionPermission.create) # True\nawait ability.can(ProfilePermissions.delete) # False\n```\n\nYou can see the full example in [examples/usage.py](https://github.com/holinnn/deny/tree/main/examples/usage.py) (you will need `asyncio` to run it, `pip install asyncio`)\n\n\n## Web frameworks\n\nDeny can be used with any web framework.  \nBut it comes with some helper functions for [Falcon](https://falcon.readthedocs.io/en/stable/), [Sanic](https://sanic.dev/en/), [FastAPI](https://fastapi.tiangolo.com/) and [Flask](https://flask.palletsprojects.com/).\n\nHere is an example for the [Sanic](https://sanic.dev/en/) web framework:\n```python \nfrom sanic import Sanic\nfrom sanic.request import Request\nfrom sanic.response import HTTPResponse, json\n\nfrom deny import Ability, AutoPermission, Policy, authorize as policy_authorize\nfrom deny.errors import UnauthorizedError\nfrom deny.ext.sanic import authorize\n\n\n\nclass ProjectPermissions:\n    view = AutoPermission()\n\n\nclass UserPolicy(Policy):\n    @authorize(ProjectPermissions.view)\n    async def can_view_project(self, request: Request, id: int) -> bool:\n        return id == 1\n\n\napp = Sanic(\"example\")\n\n\n@app.middleware(\"request\")\nasync def inject_ability(request: Request) -> None:\n    request.ctx.ability = Ability(policy=UserPolicy())\n\n\n@app.get(\"/projects/<id:int>\")\n@authorize(ProjectPermissions.view)\nasync def get(request: Request, id: int) -> HTTPResponse:\n    return json({\"id\": id})\n\n\n@app.exception(UnauthorizedError)\nasync def unauthorized_handler(request: Request, exc: Exception):\n    return json({\"error\": str(exc)}, status=403)\n```\n\nYou can find the examples for each of those frameworks in the [examples/](https://github.com/holinnn/deny/tree/main/examples) folder from this repository.\n\n\n## Sync support\n\nBy default all the classes provided by `deny` are built to run in an asynchronous environement.  \nIf you run in a synchronous environement (without `async`, `await`), then import from `deny.sync` instead of `deny`.  \nSee [examples/sync.py](https://github.com/holinnn/deny/tree/main/examples/sync.py) for a full example.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/holinnn/deny",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deny",
    "package_url": "https://pypi.org/project/deny/",
    "platform": null,
    "project_url": "https://pypi.org/project/deny/",
    "project_urls": {
      "Homepage": "https://github.com/holinnn/deny",
      "Repository": "https://github.com/holinnn/deny"
    },
    "release_url": "https://pypi.org/project/deny/0.1.1a2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Library for managing permissions in your Python 3.7+ projects",
    "version": "0.1.1a2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13918733,
  "releases": {
    "0.1.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1cf978e694ee553939b6d4a9f6a51e66027aa9ddafd003df2477c3baed98b18",
          "md5": "b33f340f65e5d956bd6bd8c4a1881c8f",
          "sha256": "598881da20dfe06d55aa45e8765f89662d12b54db997bc518d7509d725ce89cb"
        },
        "downloads": -1,
        "filename": "deny-0.1.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b33f340f65e5d956bd6bd8c4a1881c8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 12779,
        "upload_time": "2022-05-19T14:07:30",
        "upload_time_iso_8601": "2022-05-19T14:07:30.554522Z",
        "url": "https://files.pythonhosted.org/packages/e1/cf/978e694ee553939b6d4a9f6a51e66027aa9ddafd003df2477c3baed98b18/deny-0.1.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4cc34919897b4deca3251efcb85378e9c8992ca6c5f8e8266edffc40f5466b9",
          "md5": "df4cc1da868abeb8700385dddcb65fb1",
          "sha256": "20153741b96e7952f9079e44cc08911c36236ea7ab35664deded3a04131d0f4e"
        },
        "downloads": -1,
        "filename": "deny-0.1.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "df4cc1da868abeb8700385dddcb65fb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9746,
        "upload_time": "2022-05-19T14:07:32",
        "upload_time_iso_8601": "2022-05-19T14:07:32.064353Z",
        "url": "https://files.pythonhosted.org/packages/b4/cc/34919897b4deca3251efcb85378e9c8992ca6c5f8e8266edffc40f5466b9/deny-0.1.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1199aababe24088701f43521d9ba75026762bca6374976d74537aee4e8c843c3",
          "md5": "b7271d67fe2d082473e55d99a618c752",
          "sha256": "7aaebbedb80638da2292fb8f05031d636a65c06a65221d5a7d068fc04deaef3f"
        },
        "downloads": -1,
        "filename": "deny-0.1.1a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7271d67fe2d082473e55d99a618c752",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13378,
        "upload_time": "2022-05-24T09:58:23",
        "upload_time_iso_8601": "2022-05-24T09:58:23.391942Z",
        "url": "https://files.pythonhosted.org/packages/11/99/aababe24088701f43521d9ba75026762bca6374976d74537aee4e8c843c3/deny-0.1.1a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "376e11690752f9809ef82011617f77fcfd19961ba041f034160ee8ee2f87ecab",
          "md5": "6c3117bda65162950bc85a24bb54f91e",
          "sha256": "7132191d00700d245cc20e7f6bf47bc7c74f4632fb933e520f8fe7fd2224dbc5"
        },
        "downloads": -1,
        "filename": "deny-0.1.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "6c3117bda65162950bc85a24bb54f91e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9665,
        "upload_time": "2022-05-24T09:58:24",
        "upload_time_iso_8601": "2022-05-24T09:58:24.899837Z",
        "url": "https://files.pythonhosted.org/packages/37/6e/11690752f9809ef82011617f77fcfd19961ba041f034160ee8ee2f87ecab/deny-0.1.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1199aababe24088701f43521d9ba75026762bca6374976d74537aee4e8c843c3",
        "md5": "b7271d67fe2d082473e55d99a618c752",
        "sha256": "7aaebbedb80638da2292fb8f05031d636a65c06a65221d5a7d068fc04deaef3f"
      },
      "downloads": -1,
      "filename": "deny-0.1.1a2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7271d67fe2d082473e55d99a618c752",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 13378,
      "upload_time": "2022-05-24T09:58:23",
      "upload_time_iso_8601": "2022-05-24T09:58:23.391942Z",
      "url": "https://files.pythonhosted.org/packages/11/99/aababe24088701f43521d9ba75026762bca6374976d74537aee4e8c843c3/deny-0.1.1a2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "376e11690752f9809ef82011617f77fcfd19961ba041f034160ee8ee2f87ecab",
        "md5": "6c3117bda65162950bc85a24bb54f91e",
        "sha256": "7132191d00700d245cc20e7f6bf47bc7c74f4632fb933e520f8fe7fd2224dbc5"
      },
      "downloads": -1,
      "filename": "deny-0.1.1a2.tar.gz",
      "has_sig": false,
      "md5_digest": "6c3117bda65162950bc85a24bb54f91e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 9665,
      "upload_time": "2022-05-24T09:58:24",
      "upload_time_iso_8601": "2022-05-24T09:58:24.899837Z",
      "url": "https://files.pythonhosted.org/packages/37/6e/11690752f9809ef82011617f77fcfd19961ba041f034160ee8ee2f87ecab/deny-0.1.1a2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}