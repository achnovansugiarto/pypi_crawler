{
  "info": {
    "author": "Lars Esser, Maarten Grothus, Tobias Udtke",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Typing :: Typed"
    ],
    "description": "Subman\n======\n\nSubman uses a fairly complex state schema to manage subscription states\ninternally. Its behavior can be configured using the ``SubscriptionManager``,\nwhich is also the main interface of the library.\n\n.. figure:: SubscriptionStates.png\n    :width: 70 %\n    :alt: Subscription state schema\n    :align: center\n    :figclass: align-center\n\n    This graphic was created using `Draw.io <https://draw.io>`_.\n    To edit it, upload the SubscriptionState.png file there.\n\nSubman uses a total of seven distinct states, which allow a consistent and\nuseful subscription management, even if the condition for list membership change.\nOf these, four states are so-called core states, without which the software can not\nfunction properly, while the other states are optional.\n\nEvery transition between these states is modeled by a corresponding ``SubscriptionAction``,\nwhich are shown as arrows in the graph. While most subscription actions act on multiple\nstates, there is always a unique target state associated with each action.\n\nSubman includes a distinction between action which require additional privileges\n(possibly depending on the list in question). These privileged users are referred to as\n\"moderators\". Actions restricted to moderators are referred to as \"managing actions\".\n\nIn addition to the manual actions which can be performed, it is required to\nregularly perform cleanup actions to react to changes in implicators.\nThis actually does not make use of the ``SubscriptionAction`` enum, but makes use of\nits own internal state transitioning logic given in\n``SubscriptionManager._apply_cleanup()``.\n\nIn subman, we differentiate between subscribing (shown in green in the graph)\nand non-subscribing states (shown in red), where users\nlisted in subscribing states are considered to be subscribed in the usual sense.\nFor subscribers, there is no visible distinction between the different\nsubscribing states intended.\n\nList of states\n--------------\nSubscribing states are:\n\nExplicitly Subscribed (Core)\n    Users, which have been actively subscribed to a list, either by\n    themselves or by a moderator, are saved as explicitly subscribed.\n    If these users have no more means to access a list, for example because they\n    lost club membership, or because they no longer attend an event, they are removed\n    from the list.\n    Lists without special membership implicators only have explicit subscribers.\n\nSubscription Override (Optional)\n    Subscription Overrides are a special kind of explicit subscriptions, which are\n    kept even if the user should not be able to access a list. However,\n    if a list allows unsubscribing in general, they do not prevent a user from\n    unsubscribing themselves.\n    The list of Subscription Overrides should be accessible for moderators.\n\nImplicitly Subscribed (Core)\n    Users, which are subscribed to a list, because they meet some condition,\n    are listed as implicit subscribers. Typical examples are lists having all\n    members or all attendees of an event or assembly as implicit subscribers. If users\n    lose the automatic implicator that subscribes them to the list, they are\n    removed even if they would still be able to access it.\n\n    It is optional to store implicit subscribers explicitly. Otherwise, they have to\n    be calculated at runtime.\n\nNon-subscribing states are:\n\nImplicitly Unsubscribed (Core)\n    This is the standard state for users having no relationship to a list\n    whatsoever, because they never were listed on it or lost access to it.\n\n    It is optional to store this state explicitly.\n\n.. _Explicitly_Unsubscribed:\n\nExplicitly Unsubscribed (Core)\n    Users, who have stated to not want to receive information from a\n    specific list anymore. This decision is permanent, until manually\n    reverted by them or a moderator. Even if they lose access to a list, this\n    information is kept. Thus, if they regain access later on, these users\n    will not be receiving information from it.\n    However, if they are explicitly subscribed again, they do not receive\n    special treatment.\n\n    Due to this fact, users tend to get \"stuck\" in this case, since it is not\n    cleaned up automatically. For example, every user who has been manually\n    removed from a list by a moderator, will stay here forever without\n    further intervention. While the state transitions are designed with this\n    in mind, making no difference between manual actions on explicitly and\n    implicitly unsubscribed users, it is still possible for moderators to\n    cleanup explicit unsubscriptions to implicit subscriptions.\n\n    To not obstruct the design of the state schema, this should only be used\n    to cleanup test cases or to prepare for the use of tools which might be\n    obstructed by explicit unsubscriptions.\n\nUnsubscription Override (Optional)\n    Unsubscription Overrides are a special kind of explicit unsubscriptions, which\n    can not be removed by the affected user. Except for mandatory lists, they\n    can be used to block a specific user from any kind of subscription or\n    subscription request.\n    The list of Unsubscription Overrides should be accessible for moderators.\n\nRequest Pending (Optional)\n    This is a special case only existing for mailinglists with moderated opt-in\n    subscription policy for a group of users.\n    Users with pending subscription requests are displayed on a\n    specific list to moderators, so they can decide if they want to approve or\n    deny their request. It is also possible to block further requests by this\n    user.\n\nWhen changing the ``SubscriptionPolicy`` associated to a certain list, subman\ncan handle updating its subscribers automatically. However, if the list is set\nto ``allow_unsub = False``, all users with explicit unsubscriptions,\nincluding Unsubscription Overrides, need to be cleaned up during the transition.\nIf subman detects this has not been done, it will raise an error.\n\nUsage example\n-------------\nFor a comprehensive example of the use of subman, we recommend taking a look at\nthe ml realm of the `CdEDBv2 <https://github.com/cde-ev/cdedb2>`_.\nThere, subman is used to support complex mailinglist management by subscribers\nand moderators.\nThe subscription state data is saved into a SQL database, except for\n``SubscriptionState.none``, and includes a logging of each ``SubscriptionAction``.\n\n.. |subman_example.py| image:: subman_example.py\n\nHowever, a minimal example class can be realized as shown in |subman_example.py|.\nThis is basically a really streamlined version of the\n`CdEDBv2 <https://github.com/cde-ev/cdedb2>`_ MlBackend.\n\nInternationalization\n--------------------\nLike the `CdEDBv2 <https://github.com/cde-ev/cdedb2>`_, subman is internationalized\nusing GNU gettext. By adding translations for the respective strings, users of the\nlibrary can customize error messages to their heart's content.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cde-ev/subman",
    "keywords": "subscription,mailinglist,opt-out",
    "license": "",
    "maintainer": "CdE-Datenbank development team",
    "maintainer_email": "cdedb@lists.cde-ev.de",
    "name": "subman",
    "package_url": "https://pypi.org/project/subman/",
    "platform": null,
    "project_url": "https://pypi.org/project/subman/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cde-ev/subman/issues",
      "Homepage": "https://github.com/cde-ev/subman"
    },
    "release_url": "https://pypi.org/project/subman/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Powerful Python package to manage subscriptions.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13544865,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a32270abb0ad06cd9d17a2ae6f1adec666e7f04bc36cb9c4cc5ab412602ad12b",
          "md5": "ab5812453d3aa762fec34e2bb108def0",
          "sha256": "65255e7dc058e03f69dfa4f75e783a8b275aa34d0cb632a7d63d3c0cf5b0f797"
        },
        "downloads": -1,
        "filename": "subman-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab5812453d3aa762fec34e2bb108def0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23857,
        "upload_time": "2022-04-18T12:23:48",
        "upload_time_iso_8601": "2022-04-18T12:23:48.585469Z",
        "url": "https://files.pythonhosted.org/packages/a3/22/70abb0ad06cd9d17a2ae6f1adec666e7f04bc36cb9c4cc5ab412602ad12b/subman-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a32270abb0ad06cd9d17a2ae6f1adec666e7f04bc36cb9c4cc5ab412602ad12b",
        "md5": "ab5812453d3aa762fec34e2bb108def0",
        "sha256": "65255e7dc058e03f69dfa4f75e783a8b275aa34d0cb632a7d63d3c0cf5b0f797"
      },
      "downloads": -1,
      "filename": "subman-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab5812453d3aa762fec34e2bb108def0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23857,
      "upload_time": "2022-04-18T12:23:48",
      "upload_time_iso_8601": "2022-04-18T12:23:48.585469Z",
      "url": "https://files.pythonhosted.org/packages/a3/22/70abb0ad06cd9d17a2ae6f1adec666e7f04bc36cb9c4cc5ab412602ad12b/subman-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}