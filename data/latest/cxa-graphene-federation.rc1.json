{
  "info": {
    "author": "Igor Kasianov",
    "author_email": "super.hang.glider@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# graphene-federation\nFederation support for graphene\n\nBuild: [![CircleCI](https://circleci.com/gh/preply/graphene-federation.svg?style=svg)](https://circleci.com/gh/preply/graphene-federation)\n\n\nFederation specs implementation on top of Python graphene lib \nhttps://www.apollographql.com/docs/apollo-server/federation/federation-spec/\n\nBased on discussion: https://github.com/graphql-python/graphene/issues/953#issuecomment-508481652\n\nSupports now:\n* sdl (_service fields)  # make possible to add schema in federation (as is)\n* `@key` decorator (entity support) # to perform Queries across service boundaries\n    *  You can use multiple `@key` per each ObjectType\n    ```python\n        @key('id')\n        @key('email')\n        class User(ObjectType):\n            id = Int(required=True)\n            email = String()\n\n            def __resolve_reference(self, info, **kwargs):\n                if self.id is not None:\n                    return User(id=self.id, email=f'name_{self.id}@gmail.com')\n                return User(id=123, email=self.email)              \n    ```\n* extend  # extend remote types\n* external  # mark field as external \n* requires  # mark that field resolver requires other fields to be pre-fetched\n* provides  # to annotate the expected returned fieldset from a field on a base type that is guaranteed to be selectable by the gateway. \n    * **Base class should be decorated with `@provides`** as well as field on a base type that provides. Check example bellow:\n    ```python\n        import graphene\n        from graphene_federation import provides\n\n        @provides\n        class ArticleThatProvideAuthorAge(graphene.ObjectType):\n            id = Int(required=True)\n            text = String(required=True)\n            author = provides(Field(User), fields='age')\n    ```\n\n\n```python\nimport graphene\nfrom graphene_federation import build_schema, key\n\n@key(fields='id')  # mark File as Entity and add in EntityUnion https://www.apollographql.com/docs/apollo-server/federation/federation-spec/#key\nclass File(graphene.ObjectType):\n    id = graphene.Int(required=True)\n    name = graphene.String()\n\n    def resolve_id(self, info, **kwargs):\n        return 1\n\n    def resolve_name(self, info, **kwargs):\n        return self.name\n\n    def __resolve_reference(self, info, **kwargs):  # https://www.apollographql.com/docs/apollo-server/api/apollo-federation/#__resolvereference\n        return get_file_by_id(self.id)\n```\n\n\n```python\nimport graphene\nfrom graphene_federation import build_schema\n\n\nclass Query(graphene.ObjectType):\n    ...\n    pass\n\nschema = build_schema(Query)  # add _service{sdl} field in Query\n```\n\n\n```python\nimport graphene\nfrom graphene_federation import external, extend\n\n@extend(fields='id')\nclass Message(graphene.ObjectType):\n    id = external(graphene.Int(required=True))\n\n    def resolve_id(self, **kwargs):\n        return 1\n\n```\n\n### __resolve_reference\n* Each type which is decorated with `@key` or `@extend` is added to `_Entity` union\n* `__resolve_reference` method can be defined for each type that is an entity. This method is called whenever an entity is requested as part of the fulfilling a query plan.\nIf not explicitly defined, default resolver is used. Default resolver just creates instance of type with passed fieldset as kwargs, see [`entity.get_entity_query`](graphene_federation/entity.py) for more details\n* You should define `__resolve_reference`, if you need to extract object before passing it to fields resolvers (example: [FileNode](integration_tests/service_b/src/schema.py))\n* You should not define `__resolve_reference`, if fileds resolvers need only data passed in fieldset (example: [FunnyText](integration_tests/service_a/src/schema.py))\n* read more in [official documentation](https://www.apollographql.com/docs/apollo-server/api/apollo-federation/#__resolvereference)\n------------------------\n\n\n### Known issues:\n1. decorators will not work properly\n* on fields with capitalised letters with `auto_camelcase=True`, for example: `my_ABC_field = String()`\n* on fields with custom names for example `some_field = String(name='another_name')`\n\n---------------------------\n\nFor more details see [examples](examples/)\n\nOr better check [integration_tests](integration_tests/)\n\nAlso cool [example](https://github.com/preply/graphene-federation/issues/1) of integration with Mongoengine\n\n\n### For contribution:\n#### Run tests:\n* `make test`\n* if you've changed Dockerfile or requirements run `make build` before `make test`\n\n---------------------------\n\nAlso, you can read about how we've come to federation at Preply [here](https://medium.com/preply-engineering/apollo-federation-support-in-graphene-761a0512456d) \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/preply/graphene-federation/archive/1.0.0b1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/preply/graphene-federation",
    "keywords": "graphene,gql,federation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cxa-graphene-federation",
    "package_url": "https://pypi.org/project/cxa-graphene-federation/",
    "platform": "",
    "project_url": "https://pypi.org/project/cxa-graphene-federation/",
    "project_urls": {
      "Download": "https://github.com/preply/graphene-federation/archive/1.0.0b1.tar.gz",
      "Homepage": "https://github.com/preply/graphene-federation"
    },
    "release_url": "https://pypi.org/project/cxa-graphene-federation/1.0.0b1/",
    "requires_dist": [
      "graphene (<4,>=3.0.0b5)"
    ],
    "requires_python": "",
    "summary": "Federation implementation for graphene",
    "version": "1.0.0b1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8919853,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05dc7b29e79d9178b830f27ae296f991b81096a3e8358ecd190fd5bb175bd920",
          "md5": "ca95532e50dd7299df5e4b569f02e568",
          "sha256": "75019ffc9b2c8a596c8b2d27af413c089f7e9cdf9c4ef77981a342fdabfb9b54"
        },
        "downloads": -1,
        "filename": "cxa_graphene_federation-1.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca95532e50dd7299df5e4b569f02e568",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7968,
        "upload_time": "2020-12-17T01:20:22",
        "upload_time_iso_8601": "2020-12-17T01:20:22.713988Z",
        "url": "https://files.pythonhosted.org/packages/05/dc/7b29e79d9178b830f27ae296f991b81096a3e8358ecd190fd5bb175bd920/cxa_graphene_federation-1.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6db870cc9ceff6b501d7d56ffca21818b924bdcb68f996350b1d8043700f56d4",
          "md5": "d44dd737fa1fe44ae22c25fc33536114",
          "sha256": "0a54409c8eb617ff1b288239ab25ea67575e79649895efef6d5e80bde7b1c694"
        },
        "downloads": -1,
        "filename": "cxa-graphene-federation-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "d44dd737fa1fe44ae22c25fc33536114",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6951,
        "upload_time": "2020-12-17T01:20:23",
        "upload_time_iso_8601": "2020-12-17T01:20:23.657924Z",
        "url": "https://files.pythonhosted.org/packages/6d/b8/70cc9ceff6b501d7d56ffca21818b924bdcb68f996350b1d8043700f56d4/cxa-graphene-federation-1.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05dc7b29e79d9178b830f27ae296f991b81096a3e8358ecd190fd5bb175bd920",
        "md5": "ca95532e50dd7299df5e4b569f02e568",
        "sha256": "75019ffc9b2c8a596c8b2d27af413c089f7e9cdf9c4ef77981a342fdabfb9b54"
      },
      "downloads": -1,
      "filename": "cxa_graphene_federation-1.0.0b1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca95532e50dd7299df5e4b569f02e568",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7968,
      "upload_time": "2020-12-17T01:20:22",
      "upload_time_iso_8601": "2020-12-17T01:20:22.713988Z",
      "url": "https://files.pythonhosted.org/packages/05/dc/7b29e79d9178b830f27ae296f991b81096a3e8358ecd190fd5bb175bd920/cxa_graphene_federation-1.0.0b1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6db870cc9ceff6b501d7d56ffca21818b924bdcb68f996350b1d8043700f56d4",
        "md5": "d44dd737fa1fe44ae22c25fc33536114",
        "sha256": "0a54409c8eb617ff1b288239ab25ea67575e79649895efef6d5e80bde7b1c694"
      },
      "downloads": -1,
      "filename": "cxa-graphene-federation-1.0.0b1.tar.gz",
      "has_sig": false,
      "md5_digest": "d44dd737fa1fe44ae22c25fc33536114",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6951,
      "upload_time": "2020-12-17T01:20:23",
      "upload_time_iso_8601": "2020-12-17T01:20:23.657924Z",
      "url": "https://files.pythonhosted.org/packages/6d/b8/70cc9ceff6b501d7d56ffca21818b924bdcb68f996350b1d8043700f56d4/cxa-graphene-federation-1.0.0b1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}