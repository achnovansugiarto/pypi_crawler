{
  "info": {
    "author": "Giorgio Gonnella",
    "author_email": "gonnella@zbh.uni-hamburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# TextFormats\n\nTextFormats is a library for rapidly defining and using text formats for\nstructured data, and allows for rapid prototyping of parsers for\nsuch file formats in Nim, Python and C/C++.\n\nGiven a format definition, expressed in a simple declarative language (TFSL,\nText Formats Specification Language), the library provides functions for\nswitching from the text representation of the data (\"encoded string\") to the\nactual data it represents (\"decoded data\") and vice-versa.\n\nThe definition of the formats in TFSL is human readable and reduces the\nrequirement of complex regular expression. As opposed to lexers or regular\nexpressions, it does not only validates and splits different parts of a format,\nbut converts them to data in built-in scalar and compound datatypes, allowing\nfor fine tuning of the conversion.\n\n## Python\n\nThe Python API of TextFormats is documented in the\n[Python API manual](https://github.com/ggonnella/textformats/blob/main/manuals/Python_API.md)\nand [cheatsheet](https://github.com/ggonnella/textformats/blob/main/cheatsheets/Python_API.md)\nand can be installed using:\n\n```\npip install textformats\n```\n\nIf a binary package compatible with the system is available, it will\nbe downloaded and installed. Nim installation is not required.\n\nIf no binary package is available, the source distribution is downloaded.\nIn this case, the [Nim compiler version >= 1.6.0 must be installed](https://github.com/ggonnella/textformats/blob/main/manuals/howto_install_nim.md)\nand the ``nim`` binary must be in PATH.  Then,\nthe ``pip install textformats`` command will automatically compile and install\nthe package.\n\nExample applications based on the Python API are available in the git repository\n[here](https://github.com/ggonnella/textformats/tree/main/python/examples)\nand [here](https://github.com/ggonnella/textformats/tree/main/python/benchmarks).\n\n## Nim\n\nThe Nim API of TextFormats is documented in the\n[Nim API manual](https://github.com/ggonnella/textformats/blob/main/manuals/Nim_API.md)\nand [cheatsheet](https://github.com/ggonnella/textformats/blob/main/cheatsheets/Nim_API.md).\nand is installed using:\n\n```\nnimble install textformats\n```\n\nExample applications based on the Nim API are available in the git repository\n[here](https://github.com/ggonnella/textformats/tree/main/examples)\nand [here](https://github.com/ggonnella/textformats/tree/main/benchmarks).\n\n## C/C++\n\nThe C API of TextFormats is documented in the\n[C API manual](https://github.com/ggonnella/textformats/blob/main/manuals/C_API.md)\nand [cheatsheet](https://github.com/ggonnella/textformats/blob/main/cheatsheets/C_API.md)\nand is obtained by cloning the\n[git repository](https://github.com/ggonnella/textformats.git).\nFurthermore [Nim compiler version >= 1.6.0 must be installed](https://github.com/ggonnella/textformats/blob/main/manuals/howto_install_nim.md)\n\nThe C API are in the in the ``C`` directory of the git repository.\nExample applications based on the C API are available in the git repository\n[here](https://github.com/ggonnella/textformats/tree/main/C/examples)\nand [here](https://github.com/ggonnella/textformats/tree/main/C/benchmarks).\n\n## Command line tools\n\nThe CLI tools developed with TextFormats allows the use of the library\nfrom the command line (e.g. in Bash scripts). For using it, the\n[Nim compiler version >= 1.6.0 must be installed](https://github.com/ggonnella/textformats/blob/main/manuals/howto_install_nim.md)\nand the textformats Nim package installed (``nimble install textformats``).\nThe tools are thereby installed and compiled. They are ``tf_spec`` (work with TFSL specifications),\n ``tf_decode`` (convert a format to JSON), ``tf_encode`` (convert JSON to a format)\n  and ``tf_validate`` (validate data or its text representations).\n\nThe CLI tools are documented in the\n[CLI manual](https://github.com/ggonnella/textformats/blob/main/manuals/CLI.md),\n[cheatsheet](https://github.com/ggonnella/textformats/blob/main/cheatsheets/CLI.md).\nMan pages can be generated using ``nimble climan`` from the source code\ndirectory.\n\nExamples of use of the CLI tools are given in the git repository\n[here](https://github.com/ggonnella/textformats/tree/main/cli/examples)\n[here](https://github.com/ggonnella/textformats/tree/main/cli/tests).\n\n## Format specifications\n\nThe TFSL (TextFormats Specification Language) is usually input by the user\nas a YAML file. In alternative, the interactive Python script `tf_genspec.py`\ncan be used, which allows the generation of a specification from scratch.\n\nSeveral specifications are made available with the package and are contained\nin the git repository in the\n[spec directory](https://github.com/ggonnella/textformats/tree/main/spec)\n\nThe specification language is documented in a\n[manual](https://github.com/ggonnella/textformats/blob/main/manuals/TFSL_syntax.md),\nand a\n[cheatsheet](https://github.com/ggonnella/textformats/blob/main/cheatsheet/TFSL.md),\ndescribing the syntax,\na [howto](https://github.com/ggonnella/textformats/blob/main/manuals/TFSL_howto.md)\nexplaining how to define text representations\nfor different kind of values: strings, numeric, boolean, list, dictionaries, etc.\nand a\n[tests manual](https://github.com/ggonnella/textformats/blob/main/manuals/TFSL_tests.md),\ndescribing how to implement specification tests.\n\n### Format specifications: an example\n\nIn multiple biological sequence analysis formats (e.g. SAM, GFA),\na CIGAR string represents a list of multi-edit operations, each consisting\nof a length (positive integer value) and an operation code (one among a short\nlist of possible codes).\n\nA string representation of a CIGAR is for example\n\"10M1D20M1I40M\". The string compactly represents a list of mappings,\neach with two members \"length\" and \"code\". In JSON its representation would\nbe: [{length: 10, code: \"M\"}, {length: 1, code: \"D\"}, {length: 20, code: \"M\"},\n{length: 1, code: \"I\"}, {length: 40, code: \"M\"}].\n\nThe definition of a CIGAR in TextFormats would be:\n```\ncigar:\n  list_of:\n    composed_of:\n    - length: {unsigned_integer: {min: 1}}\n    - code: {values: [M, D, I, P] }\n```\n\nOnce the definition is provided, the library provides the following functions:\n```\n# decoding: string representation => data\n\"10M1D\".decode(cigar)\n# => [{length: 10, code: \"M\"}, {length: 1, code: \"D\"}]\n\n# encoding: data => string representation\n[{length: 10, code: \"M\"}, {length: 1, code: \"D\"}].encode(cigar)\n# => \"10M1D\"\n\n# validation of string representation\n\"10M1D\".is_valid(cigar)\n# => true\n\n# validation of data\n[{length: 10, code: \"M\"}, {length: 1, code: \"D\"}].is_valid(cigar)\n# => true\n```\n\nFurthermore, definitions can refer to each other, which allows splitting\na complex definition into smaller parts, and reuse them in different contexts.\nFor example, the previous definition could have been written as:\n```\ncigar_code: {values: [M, D, I, P]}\npos_integer: {unsigned_integer: {min: 1}}\ncigar_op: {composed_of: [length: pos_integer, code: cigar_code]}\ncigar: {list_of: cigar_op}\n```\n\nSince definitions can be re-used in different contexts and formats, they\ncan be stored in modules, which can be imported from other specification files.\nThe import mechanism is flexible, featuring namespaces, partial imports and\nredefinitions of parts of an imported module.\n\nFinally, sometimes fine tuning of the conversion between encoded and\ndecoded data is necessary. Thus, the following operations can be included\nin the definitions:\n- providing more meaningful strings:\ne.g. in the example above of cigar operation code, one can\ndecode the \"M\" to the string \"replacement\" and the \"D\" to \"deletion\"\n- converting to different types:\ne.g. in some formats the symbols \"+\" and \"-\" represent\nthe boolean values true and false, and should be converted accordingly\n- add implicit values:\ne.g. in many formats, in a particular context\nof the file, multiple kind of information can be stored, and can be recognized\nfrom their different formatting; in this case, one\ncan add a label to the decoded data, describing the type of information\n- remove formatting symbols:\noften structured elements contain formatting constant strings such\nas separators, prefixes and suffixes, which must not be included in the\nresulting decoded data\n- define default values:\nsometimes a given symbol or part of a string representation is missing\nwhen representing a default value.\n\n### Understanding specification errors\n\nThe tool ``tf_spec`` (see above Command line tools) can be used as\n`tf_spec info -s <SPECFILE>` to list of datatypes of a (valid)\nspecification are output. An error will be output if the specification\nis invalid.\n\nA further tool to validate the syntax of a YAML or JSON specification, which can\nbe sometimes useful to better understand specification errors, is `tf_cerberus.py`,\nprovided under `scripts` in the\nsource code git repository.\nIt is based on the Python library `cerberus` (which is required in order to use this\ntool). The script has some limitations: it is not always guaranteed that a\nvalidated specification is indeed valid (e.g. circular or invalid references\nare not found).\n\n### Interactive generation\n\nAn interactive script `tf_genspec.py` is provided under `scripts` in the\nsource code git repository.  It can be\nused to generate a TextFormats specification in YAML file.\nThe script has some limitations: it is not always guaranteed that the generated\nspecification is correct (e.g. the user can create circular or invalid\nreferences).\n\nThus the resulting output file should be tested, e.g. generating examples\nfrom each of the defined datatypes using `cli/tf_spec generate_tests -s\n<OUTFILE>`. This command would fail if the specification is invalid.\nFurthermore, the results can be inspected to check that the examples reflect\nthe expectations.\n\n## Developer notes\n\nThe library is implemented using the programming language Nim.\nThis language was used, since it combines some of the advantages of Python\nwith those of compiled languages.\n\nDuring compilation, C code is created and then compiled to binary.\nBesides in Nim code itself, the resulting library can be easily employed\nin C/C++ and in Python.\n\nCode organization and conventions, used in the implementation of the\nTextFormats library, addressed to the library software developer,\nare documented in the\n[developer manual](https://github.com/ggonnella/textformats/blob/main/manuals/developer_manual.md)\n\nTo run the unit test suite of the library, use the\n``nimble test`` command from the main project source code directory.\nTo run the CLI tools tests, first build it using ``nimble build`` or\n``nimble install``, then use the ``nimble clitest`` command.\nTo run the C API tests, use ``nimble ctest``.\nTo run the Python API tests, first build the package using\n``nimble pymake``, then use ``nimble pytest``.\n\n## Known limitations\n\n- Only formats which are regular languages can be defined -- with at most some\n  exceptions (JSON elements can be included, since they are parsed by the json\n  library).\n- Unsigned integers cannot be larger than the largest signed integer [^2]\n\n[^2]: reason: JsonNode objects from the json nim standard library are\nused to represent decoded values both for Nim code and for passing the values\nthrough the API to functions written in other languages; however, JsonNode does\nnot have a representation for unsigned integers)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ggonnella/textformats",
    "keywords": "text,textformats,formats,fileformats,bioinformatics,genomics,sequences,science",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "textformats",
    "package_url": "https://pypi.org/project/textformats/",
    "platform": "",
    "project_url": "https://pypi.org/project/textformats/",
    "project_urls": {
      "Homepage": "https://github.com/ggonnella/textformats"
    },
    "release_url": "https://pypi.org/project/textformats/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple definition and parsing of text formats",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12921083,
  "releases": {
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ced7b5d5bc55ecf1bc81136e22f8c0d8ada003511ae045464f86c2854bb1ef0",
          "md5": "de5a274409c4d0a098bd3ce512abd105",
          "sha256": "bc56e1826faffa79e7f69e5fa37cfdc6447d66c0045d02193f6488d1ce0b2f68"
        },
        "downloads": -1,
        "filename": "textformats-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de5a274409c4d0a098bd3ce512abd105",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39978,
        "upload_time": "2022-02-17T12:48:12",
        "upload_time_iso_8601": "2022-02-17T12:48:12.952486Z",
        "url": "https://files.pythonhosted.org/packages/2c/ed/7b5d5bc55ecf1bc81136e22f8c0d8ada003511ae045464f86c2854bb1ef0/textformats-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ced7b5d5bc55ecf1bc81136e22f8c0d8ada003511ae045464f86c2854bb1ef0",
        "md5": "de5a274409c4d0a098bd3ce512abd105",
        "sha256": "bc56e1826faffa79e7f69e5fa37cfdc6447d66c0045d02193f6488d1ce0b2f68"
      },
      "downloads": -1,
      "filename": "textformats-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "de5a274409c4d0a098bd3ce512abd105",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39978,
      "upload_time": "2022-02-17T12:48:12",
      "upload_time_iso_8601": "2022-02-17T12:48:12.952486Z",
      "url": "https://files.pythonhosted.org/packages/2c/ed/7b5d5bc55ecf1bc81136e22f8c0d8ada003511ae045464f86c2854bb1ef0/textformats-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}