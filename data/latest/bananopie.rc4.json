{
  "info": {
    "author": "John Doe",
    "author_email": "prussia@prussia.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Bananopie\r\n\r\nBananopie is a python library for the Banano cryptocurrency. It aims to be the python equivalent of Banano.js, and not just a RPC wrapper (Sending, receiving, changing rep functions are very high level).\r\n\r\n## Installation\r\n\r\n`pip install bananopie`\r\n\r\nBananopie is on [pypi](https://pypi.org/project/bananopie/).\r\n\r\n# Quick Start\r\n\r\nFirst, start with a `RPC` class, for read only \r\n```py\r\nfrom bananopie import *\r\nrpc = RPC(\"https://kaliumapi.appditto.com/api\")\r\n\r\n#check current blockcount\r\nprint(rpc.get_block_count().count)\r\n\r\n#get last 10 transactions of JungleTV\r\nprint(rpc.get_account_history(\"ban_1jung1eb3uomk1gsx7w6w7toqrikxm5pgn5wbsg5fpy96ckpdf6wmiuuzpca\", count=10)[\"history\"])\r\n\r\n#check balance of JungleTV\r\nprint(raw_to_whole(int(rpc.get_account_balance(\"ban_1jung1eb3uomk1gsx7w6w7toqrikxm5pgn5wbsg5fpy96ckpdf6wmiuuzpca\")[\"balance\"])))\r\n```\r\n\r\nFor sending/receiving transactions, use a `Wallet`.\r\n```py\r\nfrom bananopie import RPC, Wallet\r\nrpc = RPC(\"https://kaliumapi.appditto.com/api\")\r\n\r\nmy_account = Wallet(rpc, seed=\"seed here\", index=0)\r\n\r\n#or generate a new one\r\nmy_new_account = Wallet(rpc, index=0)\r\n\r\nprint(my_new_account.seed)\r\n\r\n#get address of self\r\nprint(my_account.get_address())\r\n\r\n#get balance of self\r\nprint(my_account.get_balance())\r\n\r\n#send 1 banano to the faucet development fund\r\nprint(my_account.send(\"ban_3pdripjhteyymwjnaspc5nd96gyxgcdxcskiwwwoqxttnrncrxi974riid94\", \"1\"))\r\n\r\n#receive funds\r\nmy_account.receive_all()\r\n\r\n#change rep\r\nmy_account.change_rep(\"ban_3catgir1p6b1edo5trp7fdb8gsxx4y5ffshbphj73zzy5hu678rsry7srh8b\")\r\n\r\n#change seed index\r\nmy_account.index = 2\r\n```\r\n\r\nUtility functions are also provided.\r\n```py\r\nimport bananopie\r\n\r\n#whole to raw banano\r\nprint(bananopie.whole_to_raw(\"492.2\"))\r\n\r\n#raw to whole banano\r\nprint(bananopie.raw_to_whole(1900000000000000000000000000))\r\n```\r\n\r\n# Documentation\r\n\r\nAlso see the [Nano RPC docs](https://docs.nano.org/commands/rpc-protocol) for information on what rpc call wrapper functions return.\r\n\r\n## RPC (Class)\r\n**Parameters:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `auth` (*str* or *bool*, Default: False): Optional HTTP Authorization header\r\n\r\nSample:\r\n```py\r\nrpc = RPC(\"https://kaliumapi.appditto.com/api\")\r\n```\r\n\r\n**Properties:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `auth` (*str* or *bool*): Optional HTTP Authorization header\r\n\r\n**Methods:**\r\n\r\n### call (Function)\r\nRPC call. Intended for internal use, but useful for RPC calls that aren't directly implemented.\r\n\r\n**Parameters:**\r\n- `payload` (*dictionary*): Payload to send to node\r\n\r\nSample:\r\n```py\r\nrpc.call({\"action\": \"block_count\"})\r\n```\r\n\r\n**Returns:**\r\nResponse of RPC call (JSON dictionary)\r\n\r\n### get_block_count (Function)\r\nGet network block count.\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#block_count)\r\n\r\n\r\n### get_block_info (Function)\r\nGet block info for hash.\r\n\r\n**Parameters**\r\n- `block` (*st*): Block hash\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#block_info)\r\n\r\n### get_blocks (Function)\r\nGet blocks.\r\n\r\n**Parameters**\r\n- `blocks` (*str list*): List of block hashes to get information on\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#blocks)\r\n\r\n### get_blocks_info (Function)\r\nGet blocks, with more detailed information.\r\n\r\n**Parameters**\r\n- `blocks` (*str list*): List of block hashes to get information on\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#blocks_info)\r\n\r\n### get_representatives (Function)\r\nGet list of network representatives and their weight\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#representatives)\r\n\r\n### get_representatives_online (Function)\r\nGet list of network representatives that have recently voted\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#representatives_online)\r\n\r\n### get_account_history (Function)\r\nGet account history (confirmed and received transaction list)\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n- `count` (*int*, Default: -1): Optional parameter to specify amount of transactions to return. `-1` means all, or at least as much as the node will allow\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_history)\r\n\r\n### get_account_info (Function)\r\nGet account information, like height, frontier, balance, etc\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_info)\r\n\r\n### get_account_balance (Function)\r\nGet account balance\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_balance)\r\n\r\n### get_account_representative (Function)\r\nGet account representative\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of account\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_representative)\r\n\r\n### get_accounts_representatives (Function)\r\nGet representatives of accounts\r\n\r\n**Parameters**\r\n- `account` (*str list*): List of addresses\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_representatives)\r\n\r\n### get_account_weight (Function)\r\nGet delegated weight of representative\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of representative\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#account_weight)\r\n\r\n### get_receivable (Function)\r\nGet receivable transactions for account\r\n\r\n**Parameters**\r\n- `account` (*str*): Address of representative\r\n- `count` (*int*, Default: 20): Optional parameter to specify max amount of receivable transactions to return\r\n- `thereshold` (*int or bool*, Default: False): Optional parameter to filter out any receivable transactions with value less than the thereshold\r\n\r\n**Returns:**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#receivable)\r\n\r\n## Wallet (class)\r\n\r\n**Parameters:**\r\n- `rpc` (*RPC*): A RPC class\r\n- `seed` (*str* or *bool*, Default: False): 64 character hex seed, if `False`, will generate a seed by itself. Private keys are derived from the seed.\r\n- `index` (*int*, Default: 0): Optional parameter that is the index of the seed. Any number from 0 to 4294967295. Each index of the seed is a different private key, and so different address.\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://kaliumapi.appditto.com/api\"), \"seed here\", 0)\r\n```\r\n\r\n**Properties:**\r\n- `rpc_url` (*str*): IP or URL of node\r\n- `seed` (*str*): Banano seed (64 character hex string)\r\n- `index` (*int*): Seed index. Change this property to change the wallet seed index.\r\n\r\n**Methods**\r\n\r\n### send_process (Function)\r\nInternal use function to send a `process` RPC call\r\n\r\n**Parameters**\r\n- `block` (*dictionary*): block content\r\n- `subtype` (*str*): Send, receive, or change\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### send (Function)\r\nHigh level function to send Banano\r\n\r\n**Parameters**\r\n- `to` (*str*): Address to send to\r\n- `amount` (*str*): Amount of Banano to send (in whole, not raw)\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://kaliumapi.appditto.com/api\"), \"seed here\", 0)\r\nmy_account.send(\"ban_3pdripjhteyymwjnaspc5nd96gyxgcdxcskiwwwoqxttnrncrxi974riid94\", \"1\")\r\n```\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### receive_specific (Function)\r\nReceive a specific block\r\n\r\n**Parameters**\r\n- `hash` (*str*): Block hash to receive\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### receive_all (Function)\r\nReceive all (technically, 20) receivable transactions\r\n\r\n**Parameters**\r\nNone\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://kaliumapi.appditto.com/api\"), \"seed here\", 0)\r\nmy_account.receive_all()\r\n```\r\n\r\n**Returns**\r\nNothing\r\n\r\n### change_rep (Function)\r\nChange account representative\r\n\r\n**Parameters**\r\n- `new_representative` (*str*): Representative Banano address to change to\r\n- `work` (*str* or *bool*, Default: False): Leave it as False to ask node to generate work (passes `do_work`). Put in a work string if work generated locally\r\n\r\nSample:\r\n```py\r\nmy_wallet = Wallet(RPC(\"https://kaliumapi.appditto.com/api\"), \"seed here\", 0)\r\nmy_account.change_rep(\"ban_3catgir1p6b1edo5trp7fdb8gsxx4y5ffshbphj73zzy5hu678rsry7srh8b\")\r\n```\r\n\r\n**Returns**\r\nSee [Nano RPC Docs](https://docs.nano.org/commands/rpc-protocol/#process)\r\n\r\n### get_address (Function)\r\nGet address at current index of current seed\r\n\r\n**Parameters**\r\nNone\r\n\r\n**Returns**\r\n*str*, Banano address\r\n\r\n### get_balance (Function)\r\nDouble wrapped function to get balance of self (see `RPC`'s `get_account_balance`)\r\n\r\n### get_receivable (Function)\r\nDouble wrapped function to get receivable blocks (see `RPC`'s `get_receivable`)\r\n\r\n### get_representative (Function)\r\nDouble wrapped function to get representative of self (see `RPC`'s `get_account_representative`)\r\n\r\n### get_account_info (Function)\r\nDouble wrapped function to get account info of self (see `RPC`'s `get_account_info`)\r\n\r\n### generate_seed (static Function)\r\nGenerate a random seed using `os.urandom`\r\n\r\n**Parameters**\r\nNone\r\n\r\nSample:\r\n```py\r\nprint(Wallet.generate_seed())\r\n```\r\n\r\n**Returns**\r\n64 character hex seed\r\n\r\n## Util\r\n\r\n**Properties**\r\n- `BANANO_DECIMALS` (*int*): Amount of decimals that Banano has (29)\r\n- `PREAMBLE` (*str*): Hex string to prepend when signing\r\n\r\n**Methods**\r\n\r\n`encode_base32`, `decode_base32`, `bytes_to_hex`, `hex_to_bytes`, `random_bytes`, `get_private_key_from_seed`, `get_public_key_from_private_key`, `get_address_from_public_key`, `get_public_key_from_address`, `hash_block`, `sign` are internal use Functions that are currently undocumented. Look at `/bananopie/util.py` to see what they do.\r\n\r\n### whole_to_raw (Function)\r\nConverts whole Banano to raw Banano\r\n\r\n**Parameters**\r\n- `whole` (*str*): Whole amount of Banano\r\n\r\n**Returns**\r\n*int*, that is raw amount of Banano\r\n\r\n### raw_to_whole (Function)\r\nConverts raw Banano to whole Banano (Cuts off at 2 decimal places)\r\n\r\n**Parameters**\r\n- `raw` (*int*): Raw amount of Banano\r\n\r\n**Returns**\r\n*int*, that is whole amount of Banano\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jetstream0/bananopie",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bananopie",
    "package_url": "https://pypi.org/project/bananopie/",
    "platform": null,
    "project_url": "https://pypi.org/project/bananopie/",
    "project_urls": {
      "Homepage": "https://github.com/jetstream0/bananopie"
    },
    "release_url": "https://pypi.org/project/bananopie/0.0.4/",
    "requires_dist": [
      "requests",
      "ed25519-blake2b"
    ],
    "requires_python": ">=3.5",
    "summary": "A python library to simplify sending and receiving Banano. Also a RPC wrapper.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15989958,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "659d47bae02396657338f471852f24fbd2220804d60c813494073fcdb96b1309",
          "md5": "4f93220114b087062dbfe35e7cec11a5",
          "sha256": "d805dee74e184333efd0b636cf5d1bcd43635845cab2c6ff9e0720cf52cb4ec4"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f93220114b087062dbfe35e7cec11a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8573,
        "upload_time": "2022-11-26T17:57:10",
        "upload_time_iso_8601": "2022-11-26T17:57:10.644849Z",
        "url": "https://files.pythonhosted.org/packages/65/9d/47bae02396657338f471852f24fbd2220804d60c813494073fcdb96b1309/bananopie-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4197273e58e3130630f4485ceec96a77922f98edefe0e81496d1cd0c6403b7da",
          "md5": "29de24ae96b3c10230b78a816b6cc55e",
          "sha256": "91ee10e47e9a846b120f929c22389ebee0897949fcb4002f02b0ac3fa2330f4c"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29de24ae96b3c10230b78a816b6cc55e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10133,
        "upload_time": "2022-11-26T17:57:13",
        "upload_time_iso_8601": "2022-11-26T17:57:13.314054Z",
        "url": "https://files.pythonhosted.org/packages/41/97/273e58e3130630f4485ceec96a77922f98edefe0e81496d1cd0c6403b7da/bananopie-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b33a52588eb07ac7e99169bf43571bff9bbe09aba207464b84058035f6a0e36",
          "md5": "4f825c58dea7be86c901bf1e5dccb410",
          "sha256": "f4b03325cc3ce4fb1951343fbf72b52451f738296cf82dfadc3e9d1eff4fc823"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f825c58dea7be86c901bf1e5dccb410",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8565,
        "upload_time": "2022-11-26T18:07:23",
        "upload_time_iso_8601": "2022-11-26T18:07:23.501044Z",
        "url": "https://files.pythonhosted.org/packages/9b/33/a52588eb07ac7e99169bf43571bff9bbe09aba207464b84058035f6a0e36/bananopie-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "477642c6442bfadbfc3c086911a0237b483f56de2e3b181fb7bdae6a9b21456b",
          "md5": "d94c8644877cbdb22a56930266351686",
          "sha256": "9330665aae2b6ec928953e11035a4667544559036d44953051473707e227eabd"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d94c8644877cbdb22a56930266351686",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10102,
        "upload_time": "2022-11-26T18:07:27",
        "upload_time_iso_8601": "2022-11-26T18:07:27.704509Z",
        "url": "https://files.pythonhosted.org/packages/47/76/42c6442bfadbfc3c086911a0237b483f56de2e3b181fb7bdae6a9b21456b/bananopie-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38d70102f57d9e7e2fc9a9fc9cc37a9f1917dabe7155dc5c06d628783fd374ef",
          "md5": "21b399d80acc1c4699bcc826fd7b7042",
          "sha256": "66d58677519e1756bbe26059ccdc034fee4cc85c6564bf88854c28598c7c9b9c"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21b399d80acc1c4699bcc826fd7b7042",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8629,
        "upload_time": "2022-11-27T16:37:38",
        "upload_time_iso_8601": "2022-11-27T16:37:38.739323Z",
        "url": "https://files.pythonhosted.org/packages/38/d7/0102f57d9e7e2fc9a9fc9cc37a9f1917dabe7155dc5c06d628783fd374ef/bananopie-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "703fd8e1d7ea97cf1ec72ce7950b458d488d90e26f62af3e6d18cc2571802be8",
          "md5": "196eb6ca117bba6fe3d8488eecd85a88",
          "sha256": "8e2043ec70e3028447621ac04754ad0e075706971f556109737ff06bfea56cf4"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "196eb6ca117bba6fe3d8488eecd85a88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10211,
        "upload_time": "2022-11-27T16:37:45",
        "upload_time_iso_8601": "2022-11-27T16:37:45.731045Z",
        "url": "https://files.pythonhosted.org/packages/70/3f/d8e1d7ea97cf1ec72ce7950b458d488d90e26f62af3e6d18cc2571802be8/bananopie-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87858e1833c29f6b62c52863576ca28d1d661c0a115db7f8ff84b2cfe2ca11f",
          "md5": "6077a3f73e72383eaa30ba44708341da",
          "sha256": "38c739a6e538687a9610d7e2b356f4f569fc01050571e9317772ca4aa0fd3c45"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6077a3f73e72383eaa30ba44708341da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8681,
        "upload_time": "2022-12-05T01:03:32",
        "upload_time_iso_8601": "2022-12-05T01:03:32.483846Z",
        "url": "https://files.pythonhosted.org/packages/b8/78/58e1833c29f6b62c52863576ca28d1d661c0a115db7f8ff84b2cfe2ca11f/bananopie-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c15de22c8730bdc57ee675fff3d90462840bc0a004b17e1d2c47e6b72c77208",
          "md5": "48e2e71b831eaa42a859e1a86c7a889b",
          "sha256": "625b8139c9e9512b5e469a5a070ae117ad6380a133326812e7111ff9f89cf298"
        },
        "downloads": -1,
        "filename": "bananopie-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "48e2e71b831eaa42a859e1a86c7a889b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10289,
        "upload_time": "2022-12-05T01:03:38",
        "upload_time_iso_8601": "2022-12-05T01:03:38.834966Z",
        "url": "https://files.pythonhosted.org/packages/8c/15/de22c8730bdc57ee675fff3d90462840bc0a004b17e1d2c47e6b72c77208/bananopie-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b87858e1833c29f6b62c52863576ca28d1d661c0a115db7f8ff84b2cfe2ca11f",
        "md5": "6077a3f73e72383eaa30ba44708341da",
        "sha256": "38c739a6e538687a9610d7e2b356f4f569fc01050571e9317772ca4aa0fd3c45"
      },
      "downloads": -1,
      "filename": "bananopie-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6077a3f73e72383eaa30ba44708341da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8681,
      "upload_time": "2022-12-05T01:03:32",
      "upload_time_iso_8601": "2022-12-05T01:03:32.483846Z",
      "url": "https://files.pythonhosted.org/packages/b8/78/58e1833c29f6b62c52863576ca28d1d661c0a115db7f8ff84b2cfe2ca11f/bananopie-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c15de22c8730bdc57ee675fff3d90462840bc0a004b17e1d2c47e6b72c77208",
        "md5": "48e2e71b831eaa42a859e1a86c7a889b",
        "sha256": "625b8139c9e9512b5e469a5a070ae117ad6380a133326812e7111ff9f89cf298"
      },
      "downloads": -1,
      "filename": "bananopie-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "48e2e71b831eaa42a859e1a86c7a889b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10289,
      "upload_time": "2022-12-05T01:03:38",
      "upload_time_iso_8601": "2022-12-05T01:03:38.834966Z",
      "url": "https://files.pythonhosted.org/packages/8c/15/de22c8730bdc57ee675fff3d90462840bc0a004b17e1d2c47e6b72c77208/bananopie-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}