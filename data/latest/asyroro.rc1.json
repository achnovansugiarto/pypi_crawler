{
  "info": {
    "author": "Rolf Sander",
    "author_email": "mail@rolf-sander.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "Imagine you are organizing a one-day football tournament. Five teams\nwill come, every team should play every other team, and you only have\none field. This is called an asynchronous round-robin tournament. With\nitertools, python makes it easy to print a list of all games:\n\n```\nimport itertools\nlist(itertools.combinations(range(5), 2))\n```\n\nThe output will be:\n\n```\n[(0,1), (0,2), (0,3), (0,4), (1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\n```\n\nHere, the first element (0,1) means that team 0 plays against team 1 in\nthe first game, the second element (0,2) means that team 0 plays against\nteam 2 in the second game, and so on. Unfortunately, the order of games\nis not suitable. Team 0 has to play four games in a row without a rest,\nand most other teams also have to play two or more consecutive games. In\ncontrast, asyroro.py creates a well-balanced schedule.\n\n## Usage:\n\nExecute the script `asyroro.py` to run a few examples. Adjust the code\nto your own needs. For a tournament with 5 teams (called A, B, C, D, E\nhere), the 10 games of the calculated schedule are:\n\n```\n(A-B) (D-C) (E-A) (B-C) (D-E) (C-A) (B-D) (C-E) (A-D) (E-B)\n```\n\n## Implementation:\n\nFor an even number of teams, the circle method [1, 2] is used to\ngenerate the schedule. For an odd number of teams, the circle method\ndoes not produce satisfactory results, and the method suggested by\nSuksompong [3] is used instead. To balance the schedule according to the\nfourth criterion below, a method similar to that for creating a regular\ntournament presented by Herke [4] is used.\n\n## Quality control:\n\nSeveral criteria define the quality of a well-balanced schedule:\n\n- Guaranteed Rest Time (GRT)\n\n  As already mentioned above, each team should get a rest before they\n  have to play again. The minimum rest for any team is the \"guaranteed\n  rest time\" GRT [3]. If, for example, the schedule has a GRT of 2, then\n  every team will have a break of at least 2 games before they have to\n  play again.\n\n  For asyroro-generated schedules, GRT = k-2 for an even number of teams\n  (2k) and GRT = k-1 for an odd number of teams (2k+1).\n\n- Games-Played Difference (GPD)\n\n  At any time during the tournament, each team should already have\n  played a similar number of games. The games-played difference GPD [3]\n  is the largest such difference that occurs in the schedule.\n\n  For all asyroro-generated schedules, GPD = 1\n\n- Rest Difference Index (RDI)\n\n  When two teams play each other, they had a different rest time before\n  that game (they cannot have the same rest time, because then they\n  would have already played against each other in the previous game).\n  The maximum rest difference that occurs in the schedule is called the\n  rest difference index RDI [3].\n\n  For asyroro-generated schedules, RDI = 2 for an even number of teams\n  and RDI = 1 for an odd number of teams.\n\n- Tournament Irregularity Index (TII)\n\n  The two halves of the playing field may not have the same quality, for\n  example on one side the players would have to look directly into the\n  setting sun, which is a disadvantage. Therefore, all teams should have\n  roughly the same number of games in each half. Letâ€™s say the notation\n  (0-1) means that team 0 plays on the left side and team 1 on the right\n  side. If the schedule for a tournament with 3 teams is (0-1) (0-2)\n  (1-2), then the second game needs to be changed in order to get a\n  balanced schedule: (0-1) (2-0) (1-2). In graph theory, such a balanced\n  (or almost balanced) schedule is called a regular (or semi-regular)\n  tournament. Here, I call the maximum difference between games on the\n  left side and games on the right size for any team the tournament\n  irregularity index TII.\n\n  For asyroro-generated schedules, TII = 1 (semi-regular) for an even\n  number of teams and TII = 0 (regular) for an odd number of teams.\n\n## References:\n\n[1] Arunachalam Y. Tournament scheduling\n    https://nrich.maths.org/1443.\n\n[2] Wikipedia. Round-robin tournament\n    https://en.wikipedia.org/wiki/Round-robin_tournament#Scheduling_algorithm.\n\n[3] W. Suksompong. Scheduling asynchronous round-robin tournaments.\n    Operations Research Letters, 44:96100, 2016\n    http://dx.doi.org/10.1016/j.orl.2015.12.008.\n\n[4] S. Herke. Fun with graphs, 2014\n    https://www.youtube.com/watch?v=tKpariULmPI.\n\nThe project avatar was taken from\nhttps://commons.wikimedia.org/wiki/File:4-tournament.svg.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.rolf-sander.net/software/asyroro",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyroro",
    "package_url": "https://pypi.org/project/asyroro/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyroro/",
    "project_urls": {
      "Homepage": "http://www.rolf-sander.net/software/asyroro"
    },
    "release_url": "https://pypi.org/project/asyroro/1.2.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "ASYnchronous ROund-RObin tournaments",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8761742,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "766c1ce075845a3e9eb7b6f1ca1ae0aeb83453ebd19a261f21203c001a5d5201",
          "md5": "36a93247e99e2ad6801c8d3a85b5262d",
          "sha256": "6d2a72bf672fa2a4ae2ce1f73f56f54b81808ee04b0e440e721effa81a72e9e6"
        },
        "downloads": -1,
        "filename": "asyroro-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36a93247e99e2ad6801c8d3a85b5262d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18505,
        "upload_time": "2020-11-27T09:40:43",
        "upload_time_iso_8601": "2020-11-27T09:40:43.332894Z",
        "url": "https://files.pythonhosted.org/packages/76/6c/1ce075845a3e9eb7b6f1ca1ae0aeb83453ebd19a261f21203c001a5d5201/asyroro-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f8088c5f8689020a07681fcbc362ea721e930d75f14f6d4626348b4d3b28cfe",
          "md5": "f1c42e8b6c4ba81cee7c5eedef34843e",
          "sha256": "48cc5bf40a4bce6675b7e96560544a33ff82e983fee83ff76ee52799524ff870"
        },
        "downloads": -1,
        "filename": "asyroro-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1c42e8b6c4ba81cee7c5eedef34843e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6551,
        "upload_time": "2020-11-27T09:40:44",
        "upload_time_iso_8601": "2020-11-27T09:40:44.789558Z",
        "url": "https://files.pythonhosted.org/packages/5f/80/88c5f8689020a07681fcbc362ea721e930d75f14f6d4626348b4d3b28cfe/asyroro-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "766c1ce075845a3e9eb7b6f1ca1ae0aeb83453ebd19a261f21203c001a5d5201",
        "md5": "36a93247e99e2ad6801c8d3a85b5262d",
        "sha256": "6d2a72bf672fa2a4ae2ce1f73f56f54b81808ee04b0e440e721effa81a72e9e6"
      },
      "downloads": -1,
      "filename": "asyroro-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36a93247e99e2ad6801c8d3a85b5262d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18505,
      "upload_time": "2020-11-27T09:40:43",
      "upload_time_iso_8601": "2020-11-27T09:40:43.332894Z",
      "url": "https://files.pythonhosted.org/packages/76/6c/1ce075845a3e9eb7b6f1ca1ae0aeb83453ebd19a261f21203c001a5d5201/asyroro-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f8088c5f8689020a07681fcbc362ea721e930d75f14f6d4626348b4d3b28cfe",
        "md5": "f1c42e8b6c4ba81cee7c5eedef34843e",
        "sha256": "48cc5bf40a4bce6675b7e96560544a33ff82e983fee83ff76ee52799524ff870"
      },
      "downloads": -1,
      "filename": "asyroro-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f1c42e8b6c4ba81cee7c5eedef34843e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6551,
      "upload_time": "2020-11-27T09:40:44",
      "upload_time_iso_8601": "2020-11-27T09:40:44.789558Z",
      "url": "https://files.pythonhosted.org/packages/5f/80/88c5f8689020a07681fcbc362ea721e930d75f14f6d4626348b4d3b28cfe/asyroro-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}