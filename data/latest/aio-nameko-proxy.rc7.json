{
  "info": {
    "author": "laiyongtao",
    "author_email": "laiyongtao6908@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# aio-nameko-proxy\n\nA standalone nameko rpc proxy for asyncio and some wrappers for using nameko rpc proxy with asynchronous web frameworks(Sanic, fastapi). \n\nThis project is based on aio-pika and reference the source code of official nameko project and aio-pika.\n### install\n```shell\npip install aio-nameko-proxy\n```\n### examples:\n#### standalone AIOClusterRpcProxy\nIf you want most of your messages to be persistent(default). Set the delivery mode parameter as\nDeliveryMode.PERSISTENT, Call sw_dlm_call when you need to send a non-persistent message.\n```python\nimport ssl\nimport asyncio\nfrom aio_nameko_proxy import AIOClusterRpcProxy\nfrom aio_pika import DeliveryMode\n\nconfig = {\n    \"AMQP_URI\": \"amqp://guest:guest@127.0.0.1:5672\",  # Required, \n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5, \n    \"delivery_mode\": DeliveryMode.PERSISTENT,\n    \"serializer\": \"my_serializer\",\n    \"ACCEPT\": [\"pickle\", \"json\", \"my_serializer\"],\n    \"SERIALIZERS\": {\n        \"my_serializer\": {\n            \"encoder\": \"my_slizer.dumps\",\n            \"decoder\": \"my_slizer.loads\",\n            \"content_type\": \"my-content-type\",\n            \"content_encoding\": \"utf-8\"\n        }\n    },\n    # If SSL is configured, Remember to change the URI to TLS port. eg: \"amqps://guest:guest@127.0.0.1:5671\"\n    \"AMQP_SSL\": {\n        'ca_certs': 'certs/ca_certificate.pem',  # or 'cafile': 'certs/ca_certificate.pem',\n        'certfile': 'certs/client_certificate.pem',\n        'keyfile': 'certs/client_key.pem',\n        'cert_reqs': ssl.CERT_REQUIRED\n    }\n}\n\nasync def run():\n\n    async with AIOClusterRpcProxy(config) as rpc:\n            # time_out: the time_out of waitting the remote method result.\n            # con_time_out: the time_out of connecting to the rabbitmq server or binding the queue, consume and so on.\n\n            # persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n            result = await reply_obj.result()\n    \n            # non-persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n            result = await reply_obj.result()\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\nIf you want most of your messages to be non-persistent(persistent is default). Set the delivery mode parameter as\nDeliveryMode.NOT_PERSISTENT, Call sw_dlm_call when you need to send a persistent message.\n```python\nimport asyncio\nfrom aio_nameko_proxy import AIOClusterRpcProxy\nfrom aio_pika import DeliveryMode\nconfig = {\n    \"AMQP_URI\": \"pyamqp://guest:guest@127.0.0.1:5672\",\n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5, \n    \"delivery_mode\": DeliveryMode.NOT_PERSISTENT\n}\n\nasync def run():\n    async with AIOClusterRpcProxy(config) as rpc:\n            # non-persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n            result = await reply_obj.result()\n    \n            # persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n            result = await reply_obj.result()\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n#### AIOPooledClusterRpcProxy\n```python\nimport asyncio\nfrom aio_nameko_proxy import AIOPooledClusterRpcProxy\nfrom aio_pika import DeliveryMode\n\nconfig = {\n    \"AMQP_URI\": \"pyamqp://guest:guest@127.0.0.1:5672\",\n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5,\n    \"pool_size\": 10,\n    \"initial_size\": 2,\n    \"delivery_mode\": DeliveryMode.NOT_PERSISTENT\n}\n\n\nasync def run():\n\n    async with AIOPooledClusterRpcProxy(config) as proxy_pool:\n    \n            async with proxy_pool.acquire() as rpc:\n                result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\n#### Sanic Wrapper\n```python\nimport ssl\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom aio_pika import DeliveryMode\nfrom aio_nameko_proxy.wrappers import SanicNamekoClusterRpcProxy\n\nclass Config(object):\n    # AMQP_URI: Required\n    NAMEKO_AMQP_URI = \"pyamqp://guest:guest@127.0.0.1:5672\"\n    # rpc_exchange\n    NAMEKO_RPC_EXCHANGE = \"nameko-rpc\"\n    # pool_size\n    NAMEKO_POOL_SIZE = 60\n    # initial_size\n    NAMEKO_INITIAL_SIZE = 60\n    # time_out\n    NAMEKO_TIME_OUT = 30\n    # con_time_out\n    NAMEKO_CON_TIME_OUT = 5\n    # serializer\n    NAMEKO_SERIALIZER = \"json\"\n    # ACCEPT\n    NAMEKO_ACCEPT = [\"pickle\", \"json\"]\n    # SERIALIZERS: custom serializers\n    NAMEKO_SERIALIZERS = {\n        \"my_serializer\": {\n            \"encoder\": \"my_slizer.dumps\",\n            \"decoder\": \"my_slizer.loads\",\n            \"content_type\": \"my-content-type\",\n            \"content_encoding\": \"utf-8\"\n        }\n    }\n    # AMQP_SSL: ssl configs\n    NAMEKO_AMQP_SSL = {\n        'ca_certs': 'certs/ca_certificate.pem',  # or 'cafile': 'certs/ca_certificate.pem',\n        'certfile': 'certs/client_certificate.pem',\n        'keyfile': 'certs/client_key.pem',\n        'cert_reqs': ssl.CERT_REQUIRED\n    }\n    # delivery_mode\n    NAMEKO_DELIVERY_MODE = DeliveryMode.PERSISTENT\n    # other supported properties of aio-pika.Message, the key name format is \"NAMEKO_{}\".format(property_name.upper())\n    # ...\n\n\napp = Sanic(\"App Name\")\napp.config.from_object(Config)\n\n# rpc_cluster = SanicNamekoClusterRpcProxy(app)\n\n# or\n\n# from aio_nameko_proxy.wrappers import rpc_cluster  # contextvars required in py36\n# SanicNamekoClusterRpcProxy(app)\n\n# or\nrpc_cluster = SanicNamekoClusterRpcProxy()\nrpc_cluster.init_app(app)\n\n\n@app.route(\"/\")\nasync def test(request):\n    \n    rpc = await rpc_cluster.get_proxy()\n\n    result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n    result = await reply_obj.result()\n\n    result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n    result = await reply_obj.result()\n\n    return json({\"hello\": \"world\"})\n\n\n@app.websocket('/ws')\nasync def ws(request, ws):\n    \n    rpc = await rpc_cluster.get_proxy()\n    \n    for i in range(3):\n        _ = await ws.recv()\n        result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n        await ws.send(result)\n    ws.close()\n    \n    # in websocket handlers, you should call the remove actively in the end\n    rpc_cluster.remove()\n\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n```\n\n#### FastAPI Wrapper\n```python\nimport ssl\nfrom fastapi import FastAPI, WebSocket\nfrom aio_pika import DeliveryMode\nfrom pydantic import BaseSettings\n\nfrom aio_nameko_proxy.wrappers import FastApiNamekoProxyMiddleware, rpc_cluster  # contextvars required in py36\n\n\n\nclass Settings(BaseSettings):\n\n    # AMQP_URI: Required\n    NAMEKO_AMQP_URI = \"pyamqp://guest:guest@127.0.0.1:5672\"\n    # rpc_exchange\n    NAMEKO_RPC_EXCHANGE = \"nameko-rpc\"\n    # pool_size\n    NAMEKO_POOL_SIZE = 60\n    # initial_size\n    NAMEKO_INITIAL_SIZE = 60\n    # time_out\n    NAMEKO_TIME_OUT = 30\n    # con_time_out\n    NAMEKO_CON_TIME_OUT = 5\n    # serializer\n    NAMEKO_SERIALIZER = \"json\"\n    # ACCEPT\n    NAMEKO_ACCEPT = [\"pickle\", \"json\"]\n    # SERIALIZERS: custom serializers\n    NAMEKO_SERIALIZERS = {\n        \"my_serializer\": {\n            \"encoder\": \"my_slizer.dumps\",\n            \"decoder\": \"my_slizer.loads\",\n            \"content_type\": \"my-content-type\",\n            \"content_encoding\": \"utf-8\"\n        }\n    }\n    # AMQP_SSL: ssl configs\n    NAMEKO_AMQP_SSL = {\n        'ca_certs': 'certs/ca_certificate.pem',  # or 'cafile': 'certs/ca_certificate.pem',\n        'certfile': 'certs/client_certificate.pem',\n        'keyfile': 'certs/client_key.pem',\n        'cert_reqs': ssl.CERT_REQUIRED\n    }\n    # delivery_mode\n    NAMEKO_DELIVERY_MODE = DeliveryMode.PERSISTENT\n    # other supported properties of aio-pika.Message, the key name format is \"NAMEKO_{}\".format(property_name.upper())\n    # ...\n\nsettings = Settings()\n\napp = FastAPI()\n\napp.add_middleware(FastApiNamekoProxyMiddleware, config=settings)\n\n@app.get(\"/\")\nasync def test():\n    \n    rpc = await rpc_cluster.get_proxy()\n\n    result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n    result = await reply_obj.result()\n\n    result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n    result = await reply_obj.result()\n\n    return {\"hello\": \"world\"}\n\n\n@app.websocket(\"/ws\")\nasync def ws(ws: WebSocket):\n    await ws.accept()\n    rpc = await rpc_cluster.get_proxy()\n        \n    for i in range(3):\n        _ = await ws.receive()\n        result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n        await ws.send(result)\n    ws.close()\n    \n    # in websocket handlers, you should call the remove() actively in the end\n    rpc_cluster.remove()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/laiyongtao/aio_nameko_proxy",
    "keywords": "nameko,sanic,asyncio,rpc,fastapi",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aio-nameko-proxy",
    "package_url": "https://pypi.org/project/aio-nameko-proxy/",
    "platform": "all",
    "project_url": "https://pypi.org/project/aio-nameko-proxy/",
    "project_urls": {
      "Homepage": "https://github.com/laiyongtao/aio_nameko_proxy"
    },
    "release_url": "https://pypi.org/project/aio-nameko-proxy/1.3.1/",
    "requires_dist": null,
    "requires_python": ">3.5.*, <4",
    "summary": "A standalone nameko rpc proxy for asyncio and a wrapper for using nameko rpc proxy with Sanic.",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10813679,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47004c3b995fa08006e969735fb29c96a05a1b19eb7f07b6e0132d9364a77a56",
          "md5": "ea46501f9d334808e8236099576971fc",
          "sha256": "f99eaefe83482815f1b5462014e05d5efd3a9aceb1ce2ce070d06adcd8ebb72f"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea46501f9d334808e8236099576971fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 11079,
        "upload_time": "2020-04-30T02:44:06",
        "upload_time_iso_8601": "2020-04-30T02:44:06.508164Z",
        "url": "https://files.pythonhosted.org/packages/47/00/4c3b995fa08006e969735fb29c96a05a1b19eb7f07b6e0132d9364a77a56/aio-nameko-proxy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2a0aa80ff3a520535b24bcc70d00ecf3d7193493ab360c752d58959dc69efa6",
          "md5": "e7a8c1d42c170126f517a4642f23ac34",
          "sha256": "6b1111ff304dad97c809e9698a80df12a8a0e413b33db583add1178ee7c16e6c"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7a8c1d42c170126f517a4642f23ac34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 11140,
        "upload_time": "2020-05-09T08:35:29",
        "upload_time_iso_8601": "2020-05-09T08:35:29.304875Z",
        "url": "https://files.pythonhosted.org/packages/a2/a0/aa80ff3a520535b24bcc70d00ecf3d7193493ab360c752d58959dc69efa6/aio-nameko-proxy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56daa91dcccfaf8902af50a3b9fb80d3611ef6db1f998d175dbc95f84bd4afb1",
          "md5": "b42ee870ff735cbd051cfa618ab55619",
          "sha256": "183ced4d3f1fb956ca80c96d1e1b1d2206cdcce9a26cde68379054f93487ddb8"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b42ee870ff735cbd051cfa618ab55619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 11726,
        "upload_time": "2020-06-07T07:54:34",
        "upload_time_iso_8601": "2020-06-07T07:54:34.984897Z",
        "url": "https://files.pythonhosted.org/packages/56/da/a91dcccfaf8902af50a3b9fb80d3611ef6db1f998d175dbc95f84bd4afb1/aio-nameko-proxy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8769857828274260d2678095178119a11785d07f415bb38b9d7102d73c17f504",
          "md5": "78c45555f39aad0fb419211312d5130a",
          "sha256": "dbf9f855751ca8b9f89145e3aad622644e63f8bf0538eee48b3fe502bce491ef"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78c45555f39aad0fb419211312d5130a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 12237,
        "upload_time": "2020-07-12T09:01:21",
        "upload_time_iso_8601": "2020-07-12T09:01:21.671744Z",
        "url": "https://files.pythonhosted.org/packages/87/69/857828274260d2678095178119a11785d07f415bb38b9d7102d73c17f504/aio-nameko-proxy-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b094fea971b3c288b0d5ac257cef9d89f7b541f8f2bd7f0e2f97cf2472fcf41d",
          "md5": "f3598f25e460059ab365f036f541217d",
          "sha256": "4cb81548643701389673edb367a9795cc31c5602319d3b97d8c29f20e2d59f11"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f3598f25e460059ab365f036f541217d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 13839,
        "upload_time": "2020-08-01T07:37:10",
        "upload_time_iso_8601": "2020-08-01T07:37:10.087863Z",
        "url": "https://files.pythonhosted.org/packages/b0/94/fea971b3c288b0d5ac257cef9d89f7b541f8f2bd7f0e2f97cf2472fcf41d/aio-nameko-proxy-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a4091ac94c8e8db5008a2c8ee710ae502870e21c67d49b3f7bddbdf9f5474bd",
          "md5": "0dde2bc482fbf29dbd68806eaae54209",
          "sha256": "2c4ca532370ce55c92c03bdd1da337e5ac041e8c4d2d73675836e888cbb3f28c"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0dde2bc482fbf29dbd68806eaae54209",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 13909,
        "upload_time": "2020-09-06T09:31:39",
        "upload_time_iso_8601": "2020-09-06T09:31:39.936181Z",
        "url": "https://files.pythonhosted.org/packages/2a/40/91ac94c8e8db5008a2c8ee710ae502870e21c67d49b3f7bddbdf9f5474bd/aio-nameko-proxy-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b2c42ed2749e916d71e24a98a0206affac768ebdd726f0fa4e8011c5fb83dc4",
          "md5": "1fa7b1030d0cceaca965b66ac922608b",
          "sha256": "3b4e1781d66cedaa4b1cf91d1953b49a429a38a2e21b89805c06071ce523b8ec"
        },
        "downloads": -1,
        "filename": "aio-nameko-proxy-1.3.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "1fa7b1030d0cceaca965b66ac922608b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5.*, <4",
        "size": 15386,
        "upload_time": "2021-07-03T09:52:16",
        "upload_time_iso_8601": "2021-07-03T09:52:16.149515Z",
        "url": "https://files.pythonhosted.org/packages/3b/2c/42ed2749e916d71e24a98a0206affac768ebdd726f0fa4e8011c5fb83dc4/aio-nameko-proxy-1.3.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a4091ac94c8e8db5008a2c8ee710ae502870e21c67d49b3f7bddbdf9f5474bd",
        "md5": "0dde2bc482fbf29dbd68806eaae54209",
        "sha256": "2c4ca532370ce55c92c03bdd1da337e5ac041e8c4d2d73675836e888cbb3f28c"
      },
      "downloads": -1,
      "filename": "aio-nameko-proxy-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0dde2bc482fbf29dbd68806eaae54209",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.5.*, <4",
      "size": 13909,
      "upload_time": "2020-09-06T09:31:39",
      "upload_time_iso_8601": "2020-09-06T09:31:39.936181Z",
      "url": "https://files.pythonhosted.org/packages/2a/40/91ac94c8e8db5008a2c8ee710ae502870e21c67d49b3f7bddbdf9f5474bd/aio-nameko-proxy-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}