{
  "info": {
    "author": "",
    "author_email": "\"Inverted AI Ltd.\" <info@inverted.ai>",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "[![CI](https://github.com/inverted-ai/torchdrivesim/actions/workflows/CI.yml/badge.svg?branch=master)](https://github.com/inverted-ai/torchdrivesim/actions/workflows/CI.yml)\n\n# TorchDriveSim\n\nTorchDriveSim is a lightweight 2D driving simulator, built entirely in [PyTorch](https://pytorch.org/), primarily intended as a training\nenvironment for developing autonomous driving algorithms. Its main features are:\n1. Fully differentiable execution producing a single computation graph, including state transition (kinematic models) and observation (differentiable rendering) models.\n2. First class support for batch processing, down to the lowest level.\n3. Support for heterogeneous agent types (vehicles, pedestrians, cyclists, etc.), each with its own kinematic model.\n4. Extensible and customizable implementation of kinematic models (unconstrained, unicycle, bicycle, etc.), rendering modes, and rendering backends.\n5. Support for extensible traffic control types, including traffic lights.\n6. Differentiable implementations of various infraction metrics (collisions, off-road, wrong way).\n7. Modular collection of wrappers modifying the simulator's behavior.\n8. Ability to ingest any map in [Lanelet2](https://github.com/fzi-forschungszentrum-informatik/Lanelet2) format out of the box.\n9. Integration with [IAI API](https://docs.inverted.ai/en/latest/) for initializing agent states and providing realistic behaviors.\n\n## Simulator Architecture\n\nThe simulated world consists of the following elements:\n1. Static background, by default including road (drivable surface) and lane markings, represented as a triangular mesh.\n2. Control elements, represented by rectangles with internal state. The simulator does not enforce their semantics.\n3. A collection of agents grouped into arbitrary types. All agents are rigid rectangles.\n4. Per agent type kinematic models, defining the agents' action space and how actions translate into motion.\n5. A configurable renderer, displaying the world form bird's eye view (birdview), using a customizable color map.\n\nEach agent is described by its static attributes (length, width, and others as needed by kinematic models),\ndynamic state (x, y, orientation, speed), and a flag (present mask) indicating whether a given agent is currently alive.\nAt each time step, the agents perform actions, which in turn determine\ntheir next state. The simulator allows the agents to overlap, which is identified as a collision but not prohibited,\nand the states of different agents do not influence each other except through the agents' actions. The simulator can\noperate either in homogeneous mode (all agents are the same type and their states and actions are tensors), or in\nheterogeneous mode (there are multiple agent types and their states and actions are dictionaries mapping agent\ntypes to tensors). To support both modes, most operations are applied as functors, which lift a function acting on\na single agent type into a function acting on all agent types. However, this behavior should be transparent to users\nwho do not modify the simulator code.\n\nThe base simulator requires actions for all agents and does not modify their presence masks. For convenience, we provide\nvarious wrappers modifying the simulator's behavior, such as by controlling a subset of agents (by replay or pre-defined\nontrollers), removing agents that exit the designated area, monitoring infractions, recording video, and many others.\nUnless specified otherwise, the wrappers can be combined in different orders to reach desired effects.\n\n## Behavioral Models\n\nThe hardest driving scenarios are those that require interactions with other road users. When building simulated\nenvironments it is crucial to ensure that the other agents behave realistically, but achieving that is not easy and\nTorchDriveSim is flexible in terms of how those other agents are controlled. We provide a simple heuristic that achieves\nminimally sensible driving, noting that in most cases it will be unsatisfactory and requiring additional extensions.\nWe also facilitate log replay and demonstrate how to use recorded actions from the INTERACTION dataset. However,\nsuch replay is not reactive, often resulting in spurious collisions.\n\nFor maximum realism and reactivity, we recommend using our (Inverted AI) API for generating realistic behaviors,\nwhich is integrated with TorchDriveSim. This is a paid offering that requires an API key, which you can obtain by\ncontacting us. For academics, we may be able to offer free API keys.\n\n## Maps and Map Formats\n\nTorchDriveSim uses Lanelet2 as its map format, but it runs without Lanelet2 on any of the pre-defined\nmaps available as meshes in this repo, although it won't be able to detect wrong way infractions and use certain\nheuristic behavioral models. To use those features, and to use TorchDriveSim with your own maps, you'll need to install\nLanelet2 with its Python bindings. You can either use the official distribution or the fork hosted by Inverted AI,\nwhich allows for installation without ROS.\n\n## Scenario Definition\n\nWith maps and behavioral models available, the final hurdle is to define a suite of driving scenarios that can be\nused for testing and evaluation. TorchDriveSim provides helpers for initializing the simulation state, including\nby calling Inverted AI API, instantiating from a log (when available), and using some simple heuristics. It also\nprovides functions for identifying driving infractions, specifically collisions, going off-road, and driving wrong way.\nHowever, it does not specify goals or rewards, leaving that to the user. Over time, we are planning to release\nvarious scenario suites that can serve as benchmarks.\n\n## Kinematic models\n\nThe primary kinematic model for vehicles in TorchDriveSim is the bicycle model, where the action consists of steering\nand acceleration. It requires additionally specifying the rear axis offset to control the vehicle turn radius, but\nit does not use the front axis offset, since that can not be fit by observing the vehicle movement from the outside,\neffectively assuming the front axis is in the middle of the vehicle. Other kinematic models available are the\nunconstrained model, where the action is the state delta between subsequent time steps, and the teleporting model,\nwhere the action directly specifies the next state. We also provide different variations of those models, and it is\nstraightforward to implement a custom one.\n\n## Differentiable rendering\n\nTorchDriveSim supports two rendering backends, namely pytorch3d and nvdiffrast, both producing results that look the\nsame to the human eye. Pytorch3d is the default one and a required dependency, since it's easier to install. Nvdiffrast\nis supported and can sometimes be substantially faster, but it needs to be installed separately, and it's subject\nto more restrictive license conditions. We also provide a dummy rendering backend that returns an empty image,\nmostly for debugging and benchmarking purposes.\n\n## Docker\n\nIn order to use TorchDriveSim smoothly without worrying about installing dependencies, we provide a \n[Dockerfile](Dockerfile) that works either with or without gpu. In order to build the docker image,\nrun `docker build --target torchdrivesim -t torchdrivesim:latest . `. To run the container with GPU access,\nrun `docker run --runtime=nvidia -it torchdrivesim:latest /bin/bash`. To run the container without GPU access,\nrun `docker run -it torchdrivesim:latest /bin/bash`. For more information regarding setting up GPU runtime with Docker,\nfollow [this official link](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\nfor the installation process.\n\n## Citations\n\nIf you use TorchDriveSim in your research, please cite the following [paper](https://arxiv.org/abs/2104.11212),\nfor which an early version of TorchDriveSim  was initially developed.\n\n```bibtex\n@INPROCEEDINGS{itra2021,\n  author={\\'Scibior, Adam and Lioutas, Vasileios and Reda, Daniele and Bateni, Peyman and Wood, Frank},\n  booktitle={2021 IEEE International Intelligent Transportation Systems Conference (ITSC)}, \n  title={Imagining The Road Ahead: Multi-Agent Trajectory Prediction via Differentiable Simulation}, \n  year={2021},\n  pages={720-725},\n  doi={10.1109/ITSC48978.2021.9565113}}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "torch,drive,sim,torch-drive-sim,torchdrivesim,invertedai,inverted ai",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright 2023 Inverted AI Ltd.  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchdrivesim",
    "package_url": "https://pypi.org/project/torchdrivesim/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchdrivesim/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/torchdrivesim/0.1.0/",
    "requires_dist": [
      "pandas",
      "numpy",
      "shapely",
      "scipy",
      "imageio",
      "torch (>=1.10.1)",
      "pytorch3d",
      "invertedai",
      "omegaconf",
      "gym ; extra == 'dev'",
      "pytest (==5.4.3) ; extra == 'tests'"
    ],
    "requires_python": ">=3.8",
    "summary": "TorchDriveSim is a lightweight 2D driving simulator, built entirely in PyTorch, primarily intended as a training environment for developing autonomous driving algorithms",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17274900,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "106c041291528b7d31fc149c210ffef1e1665c4160bfb7df06b27894d3481278",
          "md5": "ba4ea696750cd1d1d27b8ac16909972a",
          "sha256": "c33f613abcc0a116dfc9033d6a497ada689125fde2c9d249c4471daeb1413e41"
        },
        "downloads": -1,
        "filename": "torchdrivesim-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba4ea696750cd1d1d27b8ac16909972a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 74842,
        "upload_time": "2023-02-17T02:28:50",
        "upload_time_iso_8601": "2023-02-17T02:28:50.762686Z",
        "url": "https://files.pythonhosted.org/packages/10/6c/041291528b7d31fc149c210ffef1e1665c4160bfb7df06b27894d3481278/torchdrivesim-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c34abc54739cf22bae8a693008caf91a659b9ef79ebea53f8ec642c03399259e",
          "md5": "eb6b74e0dccfc6cbf53c2e97a0a80149",
          "sha256": "add8a294467fecbe04b17f300f68c596b00fd30e3fc4d9c4bcdba5ac93d778d9"
        },
        "downloads": -1,
        "filename": "torchdrivesim-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb6b74e0dccfc6cbf53c2e97a0a80149",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22416432,
        "upload_time": "2023-02-17T02:28:52",
        "upload_time_iso_8601": "2023-02-17T02:28:52.935502Z",
        "url": "https://files.pythonhosted.org/packages/c3/4a/bc54739cf22bae8a693008caf91a659b9ef79ebea53f8ec642c03399259e/torchdrivesim-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "106c041291528b7d31fc149c210ffef1e1665c4160bfb7df06b27894d3481278",
        "md5": "ba4ea696750cd1d1d27b8ac16909972a",
        "sha256": "c33f613abcc0a116dfc9033d6a497ada689125fde2c9d249c4471daeb1413e41"
      },
      "downloads": -1,
      "filename": "torchdrivesim-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba4ea696750cd1d1d27b8ac16909972a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 74842,
      "upload_time": "2023-02-17T02:28:50",
      "upload_time_iso_8601": "2023-02-17T02:28:50.762686Z",
      "url": "https://files.pythonhosted.org/packages/10/6c/041291528b7d31fc149c210ffef1e1665c4160bfb7df06b27894d3481278/torchdrivesim-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c34abc54739cf22bae8a693008caf91a659b9ef79ebea53f8ec642c03399259e",
        "md5": "eb6b74e0dccfc6cbf53c2e97a0a80149",
        "sha256": "add8a294467fecbe04b17f300f68c596b00fd30e3fc4d9c4bcdba5ac93d778d9"
      },
      "downloads": -1,
      "filename": "torchdrivesim-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eb6b74e0dccfc6cbf53c2e97a0a80149",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22416432,
      "upload_time": "2023-02-17T02:28:52",
      "upload_time_iso_8601": "2023-02-17T02:28:52.935502Z",
      "url": "https://files.pythonhosted.org/packages/c3/4a/bc54739cf22bae8a693008caf91a659b9ef79ebea53f8ec642c03399259e/torchdrivesim-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}