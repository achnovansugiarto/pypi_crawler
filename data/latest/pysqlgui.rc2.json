{
  "info": {
    "author": "Alex Chung",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# :zap: Pysqlgui\n[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/atc2146/pysqlgui/blob/master/LICENSE.txt) [![Generic badge](https://img.shields.io/badge/made_with-python-blue.svg)](https://www.python.org/) [![Generic badge](https://img.shields.io/badge/open_source-awesome-success.svg)](https://github.com/atc2146)<br>\n\n**Pysqlgui** is a *lightweight* package for interfacing intuitively with **SQL** in Python.<br>\n\n## :books: Features\n\n  - Run **_any_** valid SQL query.\n  - Clean and **visually appealing** query results with column names.\n  - Import tables from **CSV files** or **[Pandas DataFrames](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html)**.\n  - Easily **rename**, **create**, or **drop** tables without writing *long and complex* queries.\n  - Easily retrieve table information such as **column type**, **default values**, **null constraints**, and **key constraints**.\n  - Helpful **error messages**.\n  - And **more**!\n\n\n## :memo: Usage\n\nUsing Pysqlgui is **easy**!<br>\n\n```python\nimport pysqlgui\n\n# Load a file and name the table\nstores = pysqlgui.Database(['customers.csv'], ['CUSTOMERS'])\n\n# Run a query\nstores.run_query('SELECT * FROM CUSTOMERS;')\n```\n\nIf you are running code in a `Jupyter Notebook`, the output will be a Pandas DataFrame.  Otherwise, call print on the line above to print out the query result.\n\n**_Note_**: you can pass other data formats or no data at all!  Refer to [detailed documentation](https://github.com/atc2146/pysqlgui#page_facing_up-detailed-documentation \"Detailed Documentation\") below.\n\n\n## :desktop_computer: Installation\n\nFrom **[PyPi](https://pypi.org/project/pysqlgui)**:\n\n```sh\n$ pip install pysqlgui\n```\n\n## :book: Quick Guide\n\n[Instantiate a Database object](https://github.com/atc2146/pysqlgui#page_facing_up-detailed-documentation) and pass any data if you wish.\n\n```python\nyour_database_name = pysqlgui.Database()\n```\nThen call any of the methods below!\n\n\n| Method | Summary |\n| --------- | ------ |\n| `Database.run_query(query)` | [Run a SQL query.](https://github.com/atc2146/pysqlgui#run-a-sql-query) |\n| `Database.show(table_name)` | Show the contents of a table. |\n| `Database.info(table_name=None)` | [Summary information](https://github.com/atc2146/pysqlgui#summary-information-about-the-database) about the database. Pass a table name as an argument to get table information. |\n| `Database.create_table(table_name, column_data)` | [Create an empty table.](https://github.com/atc2146/pysqlgui#create-an-empty-table) |\n| `Database.add_table(data, table_names=None)` | [Add a table](https://github.com/atc2146/pysqlgui#add-a-table) to the database from a CSV file or Pandas DataFrame. |\n| `Database.insert_data(table_name, data)` | Insert data into a table. |\n| `Database.drop_table(table_name)` | [Drop a table.](https://github.com/atc2146/pysqlgui#drop-a-table) |\n| `Database.rename_table(table_name, change_to)` | [Rename a table.](https://github.com/atc2146/pysqlgui#rename-a-table) |\n\n## :page_facing_up: Detailed Documentation\n\n\n#### Creating a database\n```python\npysqlgui.Database(data=None, table_names=None, name=None)\n```\n**Parameters**  \n* **data** : *list or dict*, default=None, Optional\n    * Can be a list (of filepaths to CSVs, or of Pandas DataFrames), or a dict where the key is the table name and the value is the filepath to the CSV or a Pandas DataFrame.\n* **table_names** : *list*, default=None, Optional\n    * List of names of the tables, must be provided if data is of type list.\n* **name** : *str*, default=None, Optional\n    * Name given to the database.\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\n# empty database\ndb_example_1 = psg.Database()\n\n# from csv file via list notation\ndb_example_2 = psg.Database(['customers.csv'], ['CUSTOMERS'])\n\n# from csv file via dict notation\ndb_example_3 = psg.Database({'CUSTOMERS': 'customers.csv'})\n\n# from a Pandas DataFrame\ndf = pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})\ndb_example_4 = psg.Database([df], ['USERS'])\n\n# from a combination\ndb_example_5 = psg.Database([df, 'customers.csv'], ['USERS', 'CUSTOMERS'])\ndb_example_6 = psg.Database({'CUSTOMERS': 'customers.csv', 'USERS': df})\n```\n\n---\n\n#### Run a SQL query\n```python\npysqlgui.Database.run_query(self, query: str)\n```\nRuns a SQL query.  \n\n**Parameters**\n* **query** : *str*\n    * A SQL query.  \n\n**Returns**\n* **Pandas DataFrame, or None**\n    * Returns a Pandas DataFrame if the query is of SELECT or PRAGMA type, None otherwise. Note, all valid SQL is allowed including CREATE, INSERT, DROP, etc.\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\n# SELECT data\ndf = pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})\nmy_db = psg.Database([df], ['USERS'])\nmy_db.run_query('SELECT * FROM USERS;')\n```\n\n---\n\n#### Summary information about the database\n```python\npysqlgui.Database.info(table_name=None)\n```\nReturns summary information about the database or a table.  \n\n**Parameters**\n* **table_name** : *str*, default=None, Optional  \n    * The name of the table.  If a name is not provided, returns summary information about the database.  \n\n**Returns**\n* **Pandas DataFrame**\n    * Returns summary database or table information in a Pandas DataFrame.\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\ndf = pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})\nmy_db = psg.Database([df], ['USERS'])\n\nmy_db.info() # database info\nmy_db.info('USERS') # table info\n```\n\n---\n\n#### Create an empty table\n```python\npysqlgui.Database.create_table(self, table_name, column_data)\n```\nCreates an empty table in the database. Note: See [SQLite Datatypes](https://www.sqlite.org/datatype3.html).    \n\n**Parameters**\n* **table_name** : *str*   \n    * The name of the table to be created.  \n\n* **column_data** : *dict*   \n    * Keys are the column names, and values are the type with any properties.  \n\n**Returns**\n* **None**\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\nmy_db = core_database.Database()\nmy_db.create_table('users',\n                    {'user_id': 'INTEGER',\n                    'first_name': 'TEXT',\n                    'join_date': 'DATE',\n                    'score': 'FLOAT'})\n\n# create tables with additional properties\nmy_db_2 = core_database.Database()\nmy_db_2.create_table('users',\n                    {'user_id': 'INTEGER PRIMARY KEY AUTOINCREMENT',\n                    'first_name': 'TEXT',\n                    'join_date': 'DATE'})\nmy_db_2.create_table('articles',\n                    {'article_id': 'INTEGER PRIMARY KEY',\n                    'article_name': 'TEXT',\n                    'written_by': 'INTEGER REFERENCES users(user_id)'})\n\n```\n\n---\n\n#### Add a table\n```python\npysqlgui.Database.add_table(self, data, table_names=None)\n```\nAdds one or more Table objects to the current Database instance.  \n\n**Parameters**  \n* **data** : *list or dict*\n    * Can be a list (of filepaths to CSVs, or of Pandas DataFrames), or a dict where the key is the table name and the value is the filepath to the CSV or a Pandas DataFrame.\n* **table_names** : *list*, default=None, Optional\n    * List of names of the tables, must be provided if data is of type list.\n\n**Returns**\n* **None**\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\nmy_db = psg.Database()\ndf = pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})\nmy_db.add_table([df], ['USERS'])\n```\n---\n\n#### Drop a table\n```python\npysqlgui.Database.drop_table(self, table_name)\n```\nDrops a table in the database.  \n\n**Parameters**  \n* **table_name** : *str*\n    * The name of the table to be dropped.\n\n**Returns**\n* **None**\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\nmy_db = psg.Database([pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})],\n                     ['USERS'],\n                     'MY_DB_NAME')\nmy_db.drop_table('USERS')\n```\n\n---\n\n#### Rename a table\n```python\npysqlgui.Database.rename_table(self, table_name, change_to)\n```\nRenames a table in the database.  \n\n**Parameters**  \n* **table_name** : *str*\n    * The name of the table to be renamed.\n* **change_to** : *str*\n    * The new name of the table.\n\n**Returns**\n* **None**\n\n```python\nimport pysqlgui as psg\nimport pandas as pd\n\nmy_db = psg.Database([pd.DataFrame({'name': ['John', 'Mary'], 'age': [32, 18]})],\n                     ['USERS'],\n                     'MY_DB_NAME')\nmy_db.rename_table('USERS', 'USERS_NEW_NAME')\n```\n\n---\nComplete documentation coming very soon!\n\n## :gear: Development\n\nPysqlgui is built on the [sqlite3](https://docs.python.org/3/library/sqlite3.html) standard library.  \n\nThe sqlite3 [Connection Object](https://docs.python.org/3/library/sqlite3.html#cursor-objects) and [Cursor Object](https://docs.python.org/3/library/sqlite3.html#cursor-objects) is available to you:\n\n```python\nDatabase.connection\nDatabase.cursor\n```\n\nYou can find sample data used for some of the examples [here](/examples).\n\n## :pencil2: Contributing\n\n* Raise an [issue](https://github.com/atc2146/pysqlgui/issues) if you encounter any bugs or would like any features.\n* Complete [function stubs](/pysqlgui/core_database.py).\n* Write [tests](/tests). See [instructions](/tests/how-to-run-tests-instructions.txt) on how to run tests.\n\n**Clone the repo**\n\n```sh\n$ git clone https://github.com/atc2146/pysqlgui.git\n```\n\n## :copyright: License\n\n[MIT](LICENSE.txt) Â© 2020 Alex Chung\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/atc2146/pysqlgui",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysqlgui",
    "package_url": "https://pypi.org/project/pysqlgui/",
    "platform": "",
    "project_url": "https://pypi.org/project/pysqlgui/",
    "project_urls": {
      "Homepage": "https://github.com/atc2146/pysqlgui"
    },
    "release_url": "https://pypi.org/project/pysqlgui/1.0.1/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.6",
    "summary": "A lightweight and intuitive package to interface with SQL in Python.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7475612,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69faee5b0769e84708c43e92bd819bac95a651427a958904861894dc0a49ec47",
          "md5": "b2cad2d4d16ece70757de14ab15fa376",
          "sha256": "9c6687869f7155c173fc81a581399682e5fda27da87634b34f84deec6c7fc1e6"
        },
        "downloads": -1,
        "filename": "pysqlgui-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2cad2d4d16ece70757de14ab15fa376",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7057,
        "upload_time": "2020-06-10T07:24:22",
        "upload_time_iso_8601": "2020-06-10T07:24:22.102847Z",
        "url": "https://files.pythonhosted.org/packages/69/fa/ee5b0769e84708c43e92bd819bac95a651427a958904861894dc0a49ec47/pysqlgui-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc9e0f9d64480a298b3f1fac84fb0f24ef5fc184b8d4a2b91f610c2330a93c3",
          "md5": "4895ea72c78a200ef482c427d063d0ca",
          "sha256": "d8cf0448f604bfb786bd5aae19e522b4762c65731beb1efcc2ad97c9d1cc60c7"
        },
        "downloads": -1,
        "filename": "pysqlgui-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4895ea72c78a200ef482c427d063d0ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5633,
        "upload_time": "2020-06-10T07:24:24",
        "upload_time_iso_8601": "2020-06-10T07:24:24.498786Z",
        "url": "https://files.pythonhosted.org/packages/4c/c9/e0f9d64480a298b3f1fac84fb0f24ef5fc184b8d4a2b91f610c2330a93c3/pysqlgui-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ddb1bd16651df9f30e460893d362ad96fb3b1413d433527c38f20e95bedeb43",
          "md5": "617e7291de18bf4fa2e65eb4657a359c",
          "sha256": "4044497314a352937a8c6ef042a5ead09b93a8e3108b78cc7db337734ca38c83"
        },
        "downloads": -1,
        "filename": "pysqlgui-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "617e7291de18bf4fa2e65eb4657a359c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9036,
        "upload_time": "2020-06-14T21:33:42",
        "upload_time_iso_8601": "2020-06-14T21:33:42.662232Z",
        "url": "https://files.pythonhosted.org/packages/3d/db/1bd16651df9f30e460893d362ad96fb3b1413d433527c38f20e95bedeb43/pysqlgui-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a254a99e667940035258fd0e8238a6b9e468f401e07f5963371ce77c375a0761",
          "md5": "dddd1286ada5cd8f948885ae7953845d",
          "sha256": "60e6eebfe69f79e563093645831e70ccc7b072f519bd37b48f453c8c1015c25e"
        },
        "downloads": -1,
        "filename": "pysqlgui-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dddd1286ada5cd8f948885ae7953845d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8868,
        "upload_time": "2020-06-14T21:37:11",
        "upload_time_iso_8601": "2020-06-14T21:37:11.480951Z",
        "url": "https://files.pythonhosted.org/packages/a2/54/a99e667940035258fd0e8238a6b9e468f401e07f5963371ce77c375a0761/pysqlgui-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ddb1bd16651df9f30e460893d362ad96fb3b1413d433527c38f20e95bedeb43",
        "md5": "617e7291de18bf4fa2e65eb4657a359c",
        "sha256": "4044497314a352937a8c6ef042a5ead09b93a8e3108b78cc7db337734ca38c83"
      },
      "downloads": -1,
      "filename": "pysqlgui-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "617e7291de18bf4fa2e65eb4657a359c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9036,
      "upload_time": "2020-06-14T21:33:42",
      "upload_time_iso_8601": "2020-06-14T21:33:42.662232Z",
      "url": "https://files.pythonhosted.org/packages/3d/db/1bd16651df9f30e460893d362ad96fb3b1413d433527c38f20e95bedeb43/pysqlgui-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a254a99e667940035258fd0e8238a6b9e468f401e07f5963371ce77c375a0761",
        "md5": "dddd1286ada5cd8f948885ae7953845d",
        "sha256": "60e6eebfe69f79e563093645831e70ccc7b072f519bd37b48f453c8c1015c25e"
      },
      "downloads": -1,
      "filename": "pysqlgui-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dddd1286ada5cd8f948885ae7953845d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8868,
      "upload_time": "2020-06-14T21:37:11",
      "upload_time_iso_8601": "2020-06-14T21:37:11.480951Z",
      "url": "https://files.pythonhosted.org/packages/a2/54/a99e667940035258fd0e8238a6b9e468f401e07f5963371ce77c375a0761/pysqlgui-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}