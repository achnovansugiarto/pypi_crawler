{
  "info": {
    "author": "Michael Kohlegger",
    "author_email": "michael.kohlegger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Data Structure Creation with `sqlfaker`\n\n`sqlfaker` is a python library that can be used to generate relational data structures and fill these structures with fake data.\n\n## Installation\n\n`sqlfaker` can be installed via pip from [pypi.org](https://pypi.org/). Just run the following command in your terminal or command prompt.\n\n```shell\npip install sqlfaker\n```\n\n## Class structure\n\nThis projet lets you define relational data structures that are build upon the concepts of `Database`, `Table` and `Column`.\n\nA `Database` can have multiple `Table` objects which again can each have multible `Column` objects. There are two classes that inherit from the `Column` class - `ForeignKey` and `PrimaryKey`. These allow you to create key colums.\n\n## Usage example\n\n`sqlfaker` can be used to generate a new database. So far, the `Database` class only supports MySQL/MariaDB syntax (when it comes to SQL-Export). New database types will be implemented over time.\n\n```python\nfrom sqlfaker.database import Database\n\n# add database\nmy_db = Database(db_name=\"campusdb\")\n\n# add tables\nmy_db.add_table(table_name=\"student\", n_rows=500)\nmy_db.add_table(table_name=\"studyprogram\", n_rows=15)\n```\n\n`sqlfaker` can be used to also specify the schema of the tables. This is supported by three methods: `add_primary_key`, `add_column` and `add_foreign_key`. Depending on the type of column that should be created, the add methods need different parameters.\n\n> The order of column creation must follow consider their interdependencies (much like in SQL). If you e.g. create a foreign key column, you need to create the referenced primary key column first.\n\n```python\n# add columns to studyprogram table\nmy_db.tables[\"studyprogram\"].add_primary_key(column_name=\"studyprogram_id\")\nmy_db.tables[\"studyprogram\"].add_column(column_name=\"shortname\", data_type=\"varchar(50)\", data_target=\"name\")\nmy_db.tables[\"studyprogram\"].add_column(column_name=\"startdate\", data_type=\"date\", data_target=\"date\")\n\n# add columns to student table\nmy_db.tables[\"student\"].add_primary_key(column_name=\"student_id\")\nmy_db.tables[\"student\"].add_column(column_name=\"firstname\", data_type=\"varchar(50)\", data_target=\"first_name\")\nmy_db.tables[\"student\"].add_column(column_name=\"lastname\", data_type=\"varchar(50)\", data_target=\"last_name\")\nmy_db.tables[\"student\"].add_foreign_key(column_name=\"studiengang_id\", target_table=\"studiengang\", target_column=\"studiengang_id\")\n```\n\nAs soon as the database structure has been defined, `sqlfaker` can be used to generate data and then export the complete (or also parts of the) sql script to disk. The syntax of all generated SQL scripts follows MySQL/MariaDB.\n\n>`data_target` is used to specify the type of fake data that is generated to fill the respective column. `sqlfaker` uses Python `faker` for fake data generation. You can therefore reference all `faker` data types as `data target`. See `faker`'s [documentation](https://faker.readthedocs.io/en/master/) for more details.\n\n```python\nmy_db.generate_data()\nmy_db.export_sql(\"test.sql\")\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://documentation.web.fh-kufstein.ac.at/sqlfaker/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlfaker",
    "package_url": "https://pypi.org/project/sqlfaker/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlfaker/",
    "project_urls": {
      "Homepage": "https://documentation.web.fh-kufstein.ac.at/sqlfaker/"
    },
    "release_url": "https://pypi.org/project/sqlfaker/0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fake sql database generator package",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11343610,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5569035a09eca405c38451d1be7ad4d5c44a333497ba30cd50f5078f10e851c",
          "md5": "5bf535e8bbec6f1bff8a7febd12e14d5",
          "sha256": "2dca8209d3be0620240e24eff0aca5d8fd9876dd19b8baf4ec8c6a009afc0b71"
        },
        "downloads": -1,
        "filename": "sqlfaker-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bf535e8bbec6f1bff8a7febd12e14d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11652,
        "upload_time": "2020-01-15T09:42:09",
        "upload_time_iso_8601": "2020-01-15T09:42:09.916423Z",
        "url": "https://files.pythonhosted.org/packages/b5/56/9035a09eca405c38451d1be7ad4d5c44a333497ba30cd50f5078f10e851c/sqlfaker-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ceb4cb7df94300c064f028df4532eaabba92b04496afcf533fab7a7e0a6b7cb",
          "md5": "ba8215c169f07175ac374998e53cef05",
          "sha256": "f41d0889c17a4d2a4233e050305901f1ca32b6b84a75c535d642ab8f7182815a"
        },
        "downloads": -1,
        "filename": "sqlfaker-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ba8215c169f07175ac374998e53cef05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29583,
        "upload_time": "2020-01-15T09:42:12",
        "upload_time_iso_8601": "2020-01-15T09:42:12.098933Z",
        "url": "https://files.pythonhosted.org/packages/5c/eb/4cb7df94300c064f028df4532eaabba92b04496afcf533fab7a7e0a6b7cb/sqlfaker-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5569035a09eca405c38451d1be7ad4d5c44a333497ba30cd50f5078f10e851c",
        "md5": "5bf535e8bbec6f1bff8a7febd12e14d5",
        "sha256": "2dca8209d3be0620240e24eff0aca5d8fd9876dd19b8baf4ec8c6a009afc0b71"
      },
      "downloads": -1,
      "filename": "sqlfaker-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5bf535e8bbec6f1bff8a7febd12e14d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11652,
      "upload_time": "2020-01-15T09:42:09",
      "upload_time_iso_8601": "2020-01-15T09:42:09.916423Z",
      "url": "https://files.pythonhosted.org/packages/b5/56/9035a09eca405c38451d1be7ad4d5c44a333497ba30cd50f5078f10e851c/sqlfaker-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ceb4cb7df94300c064f028df4532eaabba92b04496afcf533fab7a7e0a6b7cb",
        "md5": "ba8215c169f07175ac374998e53cef05",
        "sha256": "f41d0889c17a4d2a4233e050305901f1ca32b6b84a75c535d642ab8f7182815a"
      },
      "downloads": -1,
      "filename": "sqlfaker-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ba8215c169f07175ac374998e53cef05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29583,
      "upload_time": "2020-01-15T09:42:12",
      "upload_time_iso_8601": "2020-01-15T09:42:12.098933Z",
      "url": "https://files.pythonhosted.org/packages/5c/eb/4cb7df94300c064f028df4532eaabba92b04496afcf533fab7a7e0a6b7cb/sqlfaker-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}