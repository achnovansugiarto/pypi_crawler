{
  "info": {
    "author": "Parth Nobel",
    "author_email": "ptnobel@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# An Abstract Linear Operator Library for pyTorch\n\nThis library implements a generic structure for abstract linear operators and\nenables a number of standard operations on them:\n * Arithmetic: `A + B`, `A - B`, `-A`, `A @ B` all work exactly as expected to\n    combine linear operators.\n * Indexing: `A[k:ell,m:n]` works as expected.\n * Solves: `Ax = b` can be solved with `CG` for PSD matrices, `minres` for\n symmetric matrices, `LSQR` (to be implemented), or `LSMR` (to be implemented).\n * Trace estimation: The trace of square matrices, can be estimated via Hutch++\n    and Hutchinson's estimator.\n * [Diamond-Boyd stochastic equilibration](https://web.stanford.edu/~boyd/papers/mf_equil.html)\n * [Randomized NystrÃ¶m Preconditioning](https://arxiv.org/abs/2110.02820)\n * Automatic adjoint operator generation.\n\n# Using `LinearOperator`s\n\nThe public API of the `LinearOperator` library is that every `LinearOperator` has the\nfollowing properties and methods:\n```python\n\nclass LinearOperator:\n\n    # Properties\n    shape: tuple[int, int]\n    T: LinearOperator\n    supports_operator_matrix: bool\n    device: torch.Device\n\n    # Matrix multiply\n    def __matmul__(self, b: torch.Tensor) -> torch.Tensor: ...\n    def __rmatmul__(self, b: torch.Tensor) -> torch.Tensor: ...\n\n    def __matmul__(self, b: LinearOperator) -> LinearOperator: ...\n    def __rmatmul__(self, b: LinearOperator) -> LinearOperator: ...\n\n    # Linear Solve Methods\n    def solve_I_p_lambda_AT_A_x_eq_b(self,\n        lambda_: float,\n        b: torch.Tensor,\n        x0: torch.Tensor | None=None,\n        *, precondition: None | Literal['nsytrom'], hot=False) -> torch.Tensor: ...\n\n    def solve_A_x_eq_b(self,\n        b: torch.Tensor,\n        x0: torch.Tensor | None=None) -> torch.Tensor: ...\n\n    # Transformations on LinearOperator\n    def __mul__(self, c: float) -> LinearOperator: ...\n    def __rmul__(self, c: float) -> LinearOperator: ...\n\n    def __truediv__(self, c: float) -> LinearOperator: ...\n\n    def __pow__(self, k: int) -> LinearOperator: ...\n\n    def __add__(self, c: LinearOperator) -> LinearOperator: ...\n\n    def __sub__(self, c: LinearOperator) -> LinearOperator: ...\n\n    def __neg__(self) -> LinearOperator: ...\n\n    def __pos__(self) -> LinearOperator: ...\n\n    def __getitem__(self, key) -> LinearOperator: ...\n```\n\nThe following functions are available in the root of the library:\n```python\ndef operator_matrix_product(A: LinearOperator, M: torch.Tensor) -> torch.Tensor: ...\ndef aslinearoperator(A: torch.Tensor | LinearOperator) -> LinearOperator: ...\ndef vstack(ops: list[LinearOperator] | tuple[LinearOperator, ...]) -> LinearOperator: ...\ndef hstack(ops: list[LinearOperator] | tuple[LinearOperator, ...]) -> LinearOperator: ...\n\n# To be implemented:\ndef bmat(ops: list[list[LinearOperator]]) -> LinearOperator: ... # Optimizes out ZeroOperator\n```\n\nThe following functions are available in `linops.trace` for trace estimation:\n```python\ndef hutchpp(A: lo.LinearOperator, m: int) -> float: ...\ndef hutchinson(A: lo.LinearOperator, m: int) -> float: ...\n```\n\n`linops.equilibration` contains `equilibrate` and `symmetric_equilibrate`.\nTheir public API is not finalized, if you wish to use them it is recommend you read the source code.\n\n# Creating Linear Operators\n\nLinear operators can be constructed in the following way:\n * Creating a sub-class of `LinearOperator` \n * Calling one of the following constructors:\n    * `IdentityOperator(n: int)`\n    * `DiagonalOperator(diag: torch.Tensor)`: where `diag` is a 1D torch tensor.\n    * `MatrixOperator(M: torch.Tensor)`: where `M` is a 2D torch tensor.\n    * `SelectionOperator(shape: tuple[int, int], idxs: slice | list[int | slice])`\n    * `KKTOperator(H: LinearOperator, A: LinearOperator)`: where `H` is a square `LinearOperator` and `A` is a `LinearOperator`\n    * `VectorJacobianOperator(f: torch.Tensor, x: torch.Tensor)`: where `f` is the output of the function being differentiated\n        which has a torch autograd value and `x` is the vector on which `ensures_grad` was called.\n    * `ZeroOperator(shape: tuple[int, int])`\n * Combining operators via:\n    * `A + B`, `A - B`, `A @ B` for `A`, `B` linear operators\n    * `hstack`, `vstack`\n    * `A`, `c A`, `A / c`, `v * A`, `A / v` for scalar `c` and vector `v`.\n\n# Implementing `LinearOperator`s\n\nTo implement a `LinearOperator` the following are mandatory:\n\n * Set `_shape: tuple[int, int]`  to the shape of the operator.\n * Set `device` appropriately, if the operator requires vectors to be on a particular device.\n *  Implement a method `def _matmul_impl(self, v: torch.Tensor) -> torch.Tensor: ...` that implements your matrix vector product.\n\nThe following are recommended to improve performance:\n\n * If your `_matmul_impl` method handles matrix inputs correctly, set `supports_operator_matrix: bool` to `True`.\n * If it is possible to describe the adjoint operator, set `_adjoint: LinearOperator` to point to the adjoint of your operator. If you do not compute this, then one will be autogenerated by differentiating through your `_matmul_impl`.\n\nIt is suggested that, if possible, you replace any other methods with specialized implementations.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cvxgrp/torch_linops",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-linops",
    "package_url": "https://pypi.org/project/torch-linops/",
    "platform": null,
    "project_url": "https://pypi.org/project/torch-linops/",
    "project_urls": {
      "Homepage": "https://github.com/cvxgrp/torch_linops"
    },
    "release_url": "https://pypi.org/project/torch-linops/0.1.0/",
    "requires_dist": [
      "scipy",
      "torch"
    ],
    "requires_python": "",
    "summary": "A library to define abstract linear operators, and associated algebra and matrix-free algorithms, that works with pyTorch Tensors.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15588496,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1555d237f70047ba84d72c529b4e5d43884249729e9c8e299c820cc2957adf8f",
          "md5": "b24132a135535fc05abd3d75f911d472",
          "sha256": "eb85c62d9278dfece4430cbb085ddc8938ce92cd14ece62877306934a0edfde7"
        },
        "downloads": -1,
        "filename": "torch_linops-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b24132a135535fc05abd3d75f911d472",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17825,
        "upload_time": "2022-10-30T18:39:32",
        "upload_time_iso_8601": "2022-10-30T18:39:32.934050Z",
        "url": "https://files.pythonhosted.org/packages/15/55/d237f70047ba84d72c529b4e5d43884249729e9c8e299c820cc2957adf8f/torch_linops-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "982875f39e392077590283f7b4d2d4302d6e4ccad739460b310e141c13d8f8e8",
          "md5": "b2883ed5e58c8b5ec4411bf17592b5b2",
          "sha256": "0bf84b06aac840fcf5d14c11e12ffdbb12522ea300e839318da420cf12aa75b9"
        },
        "downloads": -1,
        "filename": "torch-linops-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2883ed5e58c8b5ec4411bf17592b5b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13793,
        "upload_time": "2022-10-30T18:39:34",
        "upload_time_iso_8601": "2022-10-30T18:39:34.805970Z",
        "url": "https://files.pythonhosted.org/packages/98/28/75f39e392077590283f7b4d2d4302d6e4ccad739460b310e141c13d8f8e8/torch-linops-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1555d237f70047ba84d72c529b4e5d43884249729e9c8e299c820cc2957adf8f",
        "md5": "b24132a135535fc05abd3d75f911d472",
        "sha256": "eb85c62d9278dfece4430cbb085ddc8938ce92cd14ece62877306934a0edfde7"
      },
      "downloads": -1,
      "filename": "torch_linops-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b24132a135535fc05abd3d75f911d472",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17825,
      "upload_time": "2022-10-30T18:39:32",
      "upload_time_iso_8601": "2022-10-30T18:39:32.934050Z",
      "url": "https://files.pythonhosted.org/packages/15/55/d237f70047ba84d72c529b4e5d43884249729e9c8e299c820cc2957adf8f/torch_linops-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "982875f39e392077590283f7b4d2d4302d6e4ccad739460b310e141c13d8f8e8",
        "md5": "b2883ed5e58c8b5ec4411bf17592b5b2",
        "sha256": "0bf84b06aac840fcf5d14c11e12ffdbb12522ea300e839318da420cf12aa75b9"
      },
      "downloads": -1,
      "filename": "torch-linops-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b2883ed5e58c8b5ec4411bf17592b5b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13793,
      "upload_time": "2022-10-30T18:39:34",
      "upload_time_iso_8601": "2022-10-30T18:39:34.805970Z",
      "url": "https://files.pythonhosted.org/packages/98/28/75f39e392077590283f7b4d2d4302d6e4ccad739460b310e141c13d8f8e8/torch-linops-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}