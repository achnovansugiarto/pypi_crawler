{
  "info": {
    "author": "",
    "author_email": "Ryan Young <dev@ryayoung.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering"
    ],
    "description": "<h1> py-excel-solver &nbsp;&nbsp;&nbsp; <a href=\"https://pypi.org/project/excel-solver/\" alt=\"Version\"> <img src=\"https://img.shields.io/pypi/v/excel-solver.svg\" /></a> </h1>\n\nA wrapper that uses Scipy's ```linprog()``` function to emulate the UI of Excel's Solver. It's supposed to be extremely easy to use. If you've set up a simple optimization problem in Excel, just copy and paste the values into the function below and get the same output.\n\n#### [Source code](https://github.com/ryayoung/py-excel-solver)\n\n<br>\n\n> \n\n<br>\n\n## Install\n\n```text\npip install excel_solver\n```\n---\n\n<details>\n  <summary><i><b>How to use</b></i></summary>\n  \n1. Download ```solver.py``` (click 'raw' view, then right click, Save As)\n2. ```import solver```, then follow the format of the implementations below\n3. Optional: download ```example-code.py``` and execute it from same folder as solver.py to test it out.\n  \nParams for ```solver.solve()```:\n- _problem_type:_ Required. Specify \"max\" or \"min\"\n- _objective_function:_ Required. List of coefficients.\n- _constraints_left:_ Required. Constraint matrix, where columns correspond to objective function coefficients. Can be 2d list or np arr.\n- _constraints_right:_ Required. These are constraint vectors used to make the comparison.\n- _constraints_signs:_ Required. A list of signs corresponding to your constraints. Allowed: ```>=, <=, =```\n- _make_unconstrained_non_negative:_ (optional) Just like the button in Excel. Setting this to False is the same as setting minimum_for_all to None.\n- _minimum_for_all:_ (optional) Set the lower limit for all decision variables.\n- _maximum_for_all:_ (optional) Set the upper limit for all decision variables.\n- _bounds:_ (optional) default None. Use this to specify custom bounds for each var individually. Pass an array of tuples [(), (), etc.].\n- _method:_ (optional) default simplex. You can pass any of the ones listed in Scipy documentation.\n- _display_result:_ (optional) default True\n</details>\n\n<details>\n  <summary><i><b>Rules:</b></i></summary>\n\n- All matrix constraints must be able to be stated with a SUMPRODUCT() in Excel. Instead of passing the sumproduct cell as a constraint like you would in Excel, here you need to pass the constraint matrix itself (see ```constraints_left``` param below), and the function will take care of the math.\n</details>\n\n<details>\n  <summary><i><b>Why use this?</b></i></summary>\n\n- It's easy. Very easy. You can simply copy paste from excel into the function. You even get to use the \"Make Unconstrained Variables Non-Negative\" button, like you would in Excel.\n</details>\n\n<details>\n  <summary><i><b>Extra features you don't get in Excel Solver</b></i></summary>\n    \n- With a single-integer assignment, you can set the ```minimum_for_all``` and/or ```maximum_for_all``` constraints to set an upper and/or lower bound for all the decision variables at once.\n- You don't have to calculate objective function or matrix sumproduct constraints yourself.\n- Objective function is set up and displayed for you in the output. Ex: ```MINIMIZE: z = 16a - 20.5b + 14c```.\n- Choose from a variety of solve methods not offered in Excel.\n</details>\n\n<details>\n  <summary><i><b>Why not just use scipy.optimize.linprog()?</b></i></summary>\n\n- Scipy's ```linprog()``` is very hard to use if you're coming from Excel. It does NOT let you pick between maximize and minimize like you would in Excel, and it does not let you specify inequality signs (>= <=) for constraints. And, if you want to assert equalities as constraints, you have to pass them as a completely separate matrix/vector pair in the function. As a result, using scipy linprog() requires that you manipulate many of your values ahead of time in a way that makes your code impossible to read and interpret.\n</details>\n\n\n### Example 1\nSolved in Excel:\n![image](https://user-images.githubusercontent.com/90723578/148739017-b8ee6e72-5684-44d3-aaa0-9dc4d0f905eb.png)\n\nSolved in Python:\n#### Code:\n```python\nimport solver\nsolver.solve(\n    problem_type = \"min\",\n    objective_function = [\n        4, 5, 3, 7, 6\n    ],\n    constraints_left = [\n        [10,  20,  10,  30,  20],\n        [5,   7,   4,   9,   2],\n        [1,   4,   10,  2,   1],\n        [500, 450, 160, 300, 500],\n    ],\n    constraints_right = [\n        16,\n        10,\n        15,\n        600,\n    ],\n    constraints_signs = [\n        \">=\",\n        \">=\",\n        \">=\",\n        \">=\",\n    ],\n    minimum_for_all=0.1, # replaces lines 15-19 in the excel image above\n)\n```\n#### Output:\n```\n------------------------------------------------------\nMINIMIZE: z = 4a + 5b + 3c + 7d + 6e\n------------------------------------------------------\nOPTIMAL VALUE:  8.04\n------------------------------------------------------\nQUANTITIES:\na:  0.44415\nb:  0.18091\nc:  1.35322\nd:  0.1\ne:  0.1\n------------------------------------------------------\nOptimization terminated successfully. (HiGHS Status 7: Optimal)\n\n```\n\n### Example 2\nSolved in Excel:\n![image](https://user-images.githubusercontent.com/90723578/148739337-9335fa73-b1fd-42a5-b7ae-8c1c23382c0d.png)\n\nSolved in Python:\n#### Code\n```python\nimport solver\nsolver.solve(\n    problem_type = \"max\",\n    objective_function = [\n        16, 20.5, 14\n    ],\n    constraints_left = [\n        [4,  6,  2],\n        [3,  8,  6],\n        [9,  6,  4],\n        [30, 40, 25],\n    ],\n    constraints_right = [\n        2000,\n        2000,\n        1440,\n        9600,\n    ],\n    constraints_signs = [\n        \"<=\",\n        \"<=\",\n        \"<=\",\n        \"<=\",\n    ],\n)\n```\n#### Output\n```\n------------------------------------------------------\nMAXIMIZE: z = 16a + 20.5b + 14c\n------------------------------------------------------\nOPTIMAL VALUE:  4960\n------------------------------------------------------\nQUANTITIES:\na:  0\nb:  160\nc:  120\n------------------------------------------------------\nOptimization terminated successfully. (HiGHS Status 7: Optimal)\n```\n\n#### Now, let's try switching the 2nd constraint in the previous problem from '<= 2000' to '= 1984'. If you were using Scipy, this wouldn't be possible without making two new separate arrays to store this constraint.\n\nNOTE: This is _NOT_ necessary, but I've re-ordered the constraints so the equality is on the bottom. You can have them in any order you like.\n#### Code\n```python\nimport solver\nsolver.solve(\n    problem_type = \"max\",\n    objective_function = [\n        16, 20.5, 14\n    ],\n    constraints_left = [\n        [4,  6,  2],\n        [9,  6,  4],\n        [30, 40, 25],\n        [3,  8,  6],\n    ],\n    constraints_right = [\n        2000,\n        1440,\n        9600,\n        1984,\n    ],\n    constraints_signs = [\n        \"<=\",\n        \"<=\",\n        \"<=\",\n        \"=\",\n    ],\n)\n```\n#### Output\n```\n------------------------------------------------------\nMAXIMIZE: z = 16a + 20.5b + 14c\n------------------------------------------------------\nOPTIMAL VALUE:  4952\n------------------------------------------------------\nQUANTITIES:\na:  0\nb:  176\nc:  96\n------------------------------------------------------\nOptimization terminated successfully. (HiGHS Status 7: Optimal)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (C) 2022 Ryan Young  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "Ryan Young <dev@ryayoung.com>",
    "name": "excel-solver",
    "package_url": "https://pypi.org/project/excel-solver/",
    "platform": null,
    "project_url": "https://pypi.org/project/excel-solver/",
    "project_urls": {
      "Documentation": "https://github.com/ryayoung/py-excel-solver",
      "Source Code": "https://github.com/ryayoung/py-excel-solver"
    },
    "release_url": "https://pypi.org/project/excel-solver/0.0.0/",
    "requires_dist": [
      "scipy"
    ],
    "requires_python": ">=3.10",
    "summary": "",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15945727,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2150775491fa59bba32895fee4f5616a0c50598bffe87ee8872d49ae2f0861bb",
          "md5": "df6ea6697b2312cb3cc3a966928560f8",
          "sha256": "4da282dc56511ab9d136146ee2627c115c9961b234eb53fc90ad291f0eaab07d"
        },
        "downloads": -1,
        "filename": "excel_solver-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df6ea6697b2312cb3cc3a966928560f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 7269,
        "upload_time": "2022-11-30T18:10:00",
        "upload_time_iso_8601": "2022-11-30T18:10:00.541296Z",
        "url": "https://files.pythonhosted.org/packages/21/50/775491fa59bba32895fee4f5616a0c50598bffe87ee8872d49ae2f0861bb/excel_solver-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8c751381a0e065c12afdfb6f6329371462eef2bc05b55ddd8831186d216345c",
          "md5": "1303bdde76cfb58560de279ed9e78bf7",
          "sha256": "8dc01aaffefea88ca57a934e8dc4b58effc6a829f6fac19f9a843e82420354f8"
        },
        "downloads": -1,
        "filename": "excel_solver-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1303bdde76cfb58560de279ed9e78bf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 216728,
        "upload_time": "2022-11-30T18:10:03",
        "upload_time_iso_8601": "2022-11-30T18:10:03.176463Z",
        "url": "https://files.pythonhosted.org/packages/e8/c7/51381a0e065c12afdfb6f6329371462eef2bc05b55ddd8831186d216345c/excel_solver-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2150775491fa59bba32895fee4f5616a0c50598bffe87ee8872d49ae2f0861bb",
        "md5": "df6ea6697b2312cb3cc3a966928560f8",
        "sha256": "4da282dc56511ab9d136146ee2627c115c9961b234eb53fc90ad291f0eaab07d"
      },
      "downloads": -1,
      "filename": "excel_solver-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df6ea6697b2312cb3cc3a966928560f8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 7269,
      "upload_time": "2022-11-30T18:10:00",
      "upload_time_iso_8601": "2022-11-30T18:10:00.541296Z",
      "url": "https://files.pythonhosted.org/packages/21/50/775491fa59bba32895fee4f5616a0c50598bffe87ee8872d49ae2f0861bb/excel_solver-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8c751381a0e065c12afdfb6f6329371462eef2bc05b55ddd8831186d216345c",
        "md5": "1303bdde76cfb58560de279ed9e78bf7",
        "sha256": "8dc01aaffefea88ca57a934e8dc4b58effc6a829f6fac19f9a843e82420354f8"
      },
      "downloads": -1,
      "filename": "excel_solver-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1303bdde76cfb58560de279ed9e78bf7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 216728,
      "upload_time": "2022-11-30T18:10:03",
      "upload_time_iso_8601": "2022-11-30T18:10:03.176463Z",
      "url": "https://files.pythonhosted.org/packages/e8/c7/51381a0e065c12afdfb6f6329371462eef2bc05b55ddd8831186d216345c/excel_solver-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}