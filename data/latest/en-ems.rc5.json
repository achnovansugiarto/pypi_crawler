{
  "info": {
    "author": "Andre D. L. Zanchetta",
    "author_email": "adlzanchetta@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# En-EMS | *Entropy-based Ensemble Members Selection*\n\n*en-ems* is a Python library for the selection of a set of mutually exclusive, collectivelly exaustive (MECE) ensemble members.\n\nThe library implements the approach presented by [Darbandsari and Coulibaly (2020)](http://doi.org/https://doi.org/10.1016/j.jhydrol.2020.125577) as step that antecedes the further merging of a set of ensemble forecasts.\n\nThe *en-ems* package is built over the [pyitlib](https://pypi.org/project/pyitlib/) package, which implements fundamental information theory methods.\n\n\n## Installing\n\nThe library can be installed using the traditional pip:\n\n```bash\npip install en-ems\n```\n\nAnd is listed on the Python Package Index (*pypi*) as [en-ems](https://pypi.org/project/en-ems/).\n\n\n## Using\n\nSuppose you have a file named ```example.csv``` with the following content:\n\n```\nDate,       Memb_A, Memb_B, ...,  Memb_Z, Obsv\n2020/05/15, 1.12,   1.05,   ...,  0.5,    1.01\n2020/05/16, 1.15,   1.12,   ...,  0.9,    1.10\n2020/05/17, 1.13,   1.32,   ...,  1.1,    1.29\n...         ...     ...     ...,  ...,    ...\n2020/11/30, 1.22,   0.95,   ...,  0.3,    0.87\n```\n\nIn which the columns starting with \"Memb_\" hold the realization of one ensemble member for the time interval and \"Obsv\" holds the observed values for the same time interval.\n\nIf your our objective is to select a MECE set considering obaservations, it can be done using the standard parameters by:\n\n```python\nimport pandas as pd\nimport enems\n\n# read file\ndata_ensemble = pd.read_csv(\"example.csv\").to_dict('list')\ndata_obsv = data_ensemble[\"Obsv\"]\ndel data_ensemble[\"Obsv\"], data_ensemble[\"Date\"]\n\n# perform selection\nselection_log = enems.select_ensemble_members(data_ensemble, data_obsv)\n```\n\nThe variable ```selection_log``` will be a dictionary containing a log of the *total correlation*, *joint antropy* and (if an observation was given) the *transinformation* of the given and selected datasets. It also contains, as expected, the ids of the selected ensemble members.\n\n## Example 1: No observation data available\n\nMock data for a dataset with 75 supposed ensemble members and without observation records can be obtained with the function ```enems.load_data_75()```.\n\nHere is a full example on how we can access the mock data, select a MECE subset and visualize the results using the popular ```matplotlib``` is given:\n\n```python\nimport matplotlib.pyplot as plt\nimport enems\n\nif __name__ == \"__main__\":\n\n    # ## LOAD DATA ################################################################################################### #\n\n    test_data_df = enems.load_data_75()\n    test_data = test_data_df.to_dict(\"list\")\n\n    # ## SELECT MECE SUBSET ########################################################################################## #\n\n    selection_log = enems.select_ensemble_members(test_data, None, n_bins=10, bin_by=\"equal_intervals\", \n                                                  beta_threshold=0.95, n_processes=1, verbose=False)\n\n    # ## PLOT FUNCTIONS ############################################################################################## #\n\n    def plot_ensemble_members(all_series: dict, selected_series: set, plot_title: str, output_file_path: str) -> None:\n        _, axs = plt.subplots(1, 1, figsize=(7, 2.5))\n        axs.set_xlabel(\"Time\")\n        axs.set_ylabel(\"Value\")\n        axs.set_title(plot_title)\n        axs.set_xlim(0, 143)\n        axs.set_ylim(0, 5)\n        [axs.plot(all_series[series_id], color=\"#999999\", zorder=3, alpha=0.33) for series_id in selected_series]\n        plt.tight_layout()\n        plt.savefig(output_file_path)\n        plt.close()\n        return None\n\n    def plot_log(n_total_members: int, log: dict, output_file_path: str) -> None:\n        _, axss = plt.subplots(1, 2, figsize=(7.0, 2.5))\n        x_values=[n_total_members-i-1 for i in range(len(log[\"history\"][\"total_correlation\"]))]\n        axss[0].set_xlabel(\"Time\")\n        axss[0].set_ylabel(\"Total correlation\")\n        axss[0].plot(x_values, log[\"history\"][\"total_correlation\"], color=\"#7777FF\", zorder=3)\n        axss[0].set_ylim(70, 140)\n        axss[0].set_xlim(x_values[0], x_values[-1])\n        axss[1].set_xlabel(\"Time\")\n        axss[1].set_ylabel(\"Joint entropy\")\n        axss[1].axhline(log[\"original_ensemble_joint_entropy\"], color=\"#FF7777\", zorder=3, label=\"Full set\")\n        axss[1].plot(x_values, log[\"history\"][\"joint_entropy\"], color=\"#7777FF\", zorder=3, label=\"Selected set\")\n        axss[1].set_ylim(6.3, 6.9)\n        axss[1].set_xlim(x_values[0], x_values[-1])\n        axss[1].legend()\n        plt.tight_layout()\n        plt.savefig(output_file_path)\n        plt.close()\n        return None\n\n    # ## FUNCTIONS CALL ############################################################################################## #\n\n    plot_log(len(test_data.keys()), selection_log, \"test/log.svg\")\n\n    plot_ensemble_members(test_data, set(test_data.keys()),\n                          \"All members (%d)\" % len(test_data.keys()),\n                          \"test/ensemble_all.svg\")\n\n    plot_ensemble_members(test_data, selection_log[\"selected_members\"],\n                          \"Selected members (%d)\" % len(selection_log[\"selected_members\"]),\n                          \"test/ensemble_selected.svg\")\n```\n\nWhich would give us the following plot:\n\n![](docs/log.svg)\n*log.svg*\n\n![](docs/ensemble_all.svg)\n*ensemble_all.svg*\n\n![](docs/ensemble_selected.svg)\n*ensemble_selected.svg*\n\n## Example 2:\n\nAdditional mock observation data compatible with the mock ensemble members is distributed with the package. It can be accessed using the funcion ```enems.load_data_obs()```.\n\nAn example on how to use it to trigger the full version of the algorithm can is presented:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport enems\n\nif __name__ == \"__main__\":\n\n    # ## LOAD DATA ################################################################################################### #\n\n\ttest_data_obs = enems.load_data_obs().values\n    test_data_df = enems.load_data_75()\n    test_data = test_data_df.to_dict(\"list\")\n\n\t# ## PLOT FUNCTIONS ############################################################################################## #\n\n    def plot_ensemble_members([...]):\n\t\t[...]\n\n\tdef plot_log([...]):\n        [...]\n\n\t# ## FUNCTIONS CALL ############################################################################################## #\n\n    cur_selection_log = enems.select_ensemble_members(test_data, test_data_obs, n_bins=10, bin_by=\"equal_intervals\",\n                                                      beta_threshold=0.95, n_processes=1, verbose=False)\n\n    plot_log(len(test_data.keys()), cur_selection_log, \"test/log_obs.svg\")\n    plot_ensemble_members(test_data, test_data_obs, set(test_data.keys()),\n                          \"All members (%d)\" % len(test_data.keys()),\n                          \"test/ensemble_all_obs.svg\")\n    plot_ensemble_members(test_data, test_data_obs, cur_selection_log[\"selected_members\"],\n                          \"Selected members (%d)\" % len(cur_selection_log[\"selected_members\"]),\n                          \"test/ensemble_selected_obs.svg\")\n\n    del test_data_obs, cur_selection_log\n```\n\nWhich would give us the following plot:\n\n![](docs/log_obs.svg)\n*log_obs.svg*\n\n![](docs/ensemble_all_obs.svg)\n*ensemble_all_obs.svg*\n\n![](docs/ensemble_selected_obs.svg)\n*ensemble_selected_obs.svg*\n\n## Further documentation\n\nFurther information about the library can be found in the *docs* folder of the Git repository of this project.\n\nThe users are can find the complete theoretical explanation and assessment of the method in the original work of [Darbandsari and Coulibaly (2020)](http://doi.org/https://doi.org/10.1016/j.jhydrol.2020.125577).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adlzanchetta/en-ems",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "en-ems",
    "package_url": "https://pypi.org/project/en-ems/",
    "platform": "",
    "project_url": "https://pypi.org/project/en-ems/",
    "project_urls": {
      "Homepage": "https://github.com/adlzanchetta/en-ems"
    },
    "release_url": "https://pypi.org/project/en-ems/0.2.2/",
    "requires_dist": [
      "pyitlib (==0.2.2)",
      "scikit-learn (<1,>=0.23)",
      "pandas (>=1.3)"
    ],
    "requires_python": "",
    "summary": "A package for selecting ensemble members using entropy theory",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12075965,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a145fe1543e3c86767b4d20fdd6a9e60362da73201ea51b4f595f5e78cc30da7",
          "md5": "68ca900aaf1ef801e2dff78ce580cef0",
          "sha256": "474440aabc909e7d3ec1e5516ae569ab65f9164021f2fcb87f0da52f8328fd36"
        },
        "downloads": -1,
        "filename": "en_ems-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68ca900aaf1ef801e2dff78ce580cef0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46151,
        "upload_time": "2021-10-22T19:55:03",
        "upload_time_iso_8601": "2021-10-22T19:55:03.843009Z",
        "url": "https://files.pythonhosted.org/packages/a1/45/fe1543e3c86767b4d20fdd6a9e60362da73201ea51b4f595f5e78cc30da7/en_ems-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c2bbcdeb8cf3732a6ff4f4372e9dc46e8ea125f07bf7aa94bbc1c8a0f2671f3",
          "md5": "2ccec57b693a8250de00626aef24b9e5",
          "sha256": "d5717f3cf1f4743395d1716ab1ea9e2e05c930064ba5ed63f5fc639266af202e"
        },
        "downloads": -1,
        "filename": "en_ems-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ccec57b693a8250de00626aef24b9e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46150,
        "upload_time": "2021-11-03T21:26:11",
        "upload_time_iso_8601": "2021-11-03T21:26:11.036764Z",
        "url": "https://files.pythonhosted.org/packages/0c/2b/bcdeb8cf3732a6ff4f4372e9dc46e8ea125f07bf7aa94bbc1c8a0f2671f3/en_ems-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "403b8f47c0033c4b7261e1eab05d4a456d53de74b7a4c00465560386936fc3c0",
          "md5": "64d1e12e67326f231562929a12089549",
          "sha256": "4d0d0a3d5019961c6ed9a72f67ccdecba1b1990972117976586a0836f1f4e083"
        },
        "downloads": -1,
        "filename": "en_ems-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64d1e12e67326f231562929a12089549",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46414,
        "upload_time": "2021-11-19T03:52:46",
        "upload_time_iso_8601": "2021-11-19T03:52:46.046218Z",
        "url": "https://files.pythonhosted.org/packages/40/3b/8f47c0033c4b7261e1eab05d4a456d53de74b7a4c00465560386936fc3c0/en_ems-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d536f87dc2d073714c41bded6a2de1c5c78718b60d81214e4269aa3367083da",
          "md5": "76f6429aaa93e741dd5a957f74a1662c",
          "sha256": "3b523f0cb447d5f3993ab42c47170c85f471f5cbc076db08ebc1892ec95ba714"
        },
        "downloads": -1,
        "filename": "en_ems-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76f6429aaa93e741dd5a957f74a1662c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51802,
        "upload_time": "2021-11-19T23:21:06",
        "upload_time_iso_8601": "2021-11-19T23:21:06.167562Z",
        "url": "https://files.pythonhosted.org/packages/5d/53/6f87dc2d073714c41bded6a2de1c5c78718b60d81214e4269aa3367083da/en_ems-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ada30f7285846a4639ba4e34f3390a27efca4a594a36edb6cf2485673ef9ec54",
          "md5": "08a25b1a97a5363f86fbf5ffb920ae52",
          "sha256": "17fc460eb968ff5d54f63df6e933b5fa5db967b6647a9c2d95b5510ef790dd7c"
        },
        "downloads": -1,
        "filename": "en_ems-0.2.2-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08a25b1a97a5363f86fbf5ffb920ae52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52058,
        "upload_time": "2021-11-20T02:29:51",
        "upload_time_iso_8601": "2021-11-20T02:29:51.526159Z",
        "url": "https://files.pythonhosted.org/packages/ad/a3/0f7285846a4639ba4e34f3390a27efca4a594a36edb6cf2485673ef9ec54/en_ems-0.2.2-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ada30f7285846a4639ba4e34f3390a27efca4a594a36edb6cf2485673ef9ec54",
        "md5": "08a25b1a97a5363f86fbf5ffb920ae52",
        "sha256": "17fc460eb968ff5d54f63df6e933b5fa5db967b6647a9c2d95b5510ef790dd7c"
      },
      "downloads": -1,
      "filename": "en_ems-0.2.2-1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "08a25b1a97a5363f86fbf5ffb920ae52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52058,
      "upload_time": "2021-11-20T02:29:51",
      "upload_time_iso_8601": "2021-11-20T02:29:51.526159Z",
      "url": "https://files.pythonhosted.org/packages/ad/a3/0f7285846a4639ba4e34f3390a27efca4a594a36edb6cf2485673ef9ec54/en_ems-0.2.2-1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}