{
  "info": {
    "author": "Xiaokang2022",
    "author_email": "2951256653@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Mulan Permissive Software License v2 (MulanPSL-2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div align=\"center\">\r\n    <h1>🚀<b>tkintertools</b>🚀</h1>\r\n    <img height=\"120px\" alt=\"logo.png\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/tkintertools.png\"/>\r\n    <p>The <code>tkintertools</code> module is an auxiliary module of the <code>tkinter</code> module</p>\r\n    <p><code>tkintertools</code> 模块是 <code>tkinter</code> 模块的辅助模块</p>\r\n    <img src=\"https://img.shields.io/badge/Version-2.6.0-blue\" alt=\"latest version\" />\r\n    <a href=\"./LICENSE\">\r\n        <img src=\"https://img.shields.io/badge/License-Mulan PSL v2-green\" alt=\"License\" />\r\n    </a>\r\n    <a href=\"./CHANGELOG.md\">\r\n        <img src=\"https://img.shields.io/badge/ChangeLog-2023/03/28-orange\" alt=\"CHANGELOG\" />\r\n    </a>\r\n    <a href=\"./TODO.md\">\r\n    <img src=\"https://img.shields.io/badge/ToDo-5-yellow\" alt=\"TODO\" />\r\n    </a>\r\n    <br>\r\n    <img src=\"https://img.shields.io/badge/Mail-2951256653@qq.com-purple\" alt=\"Contact\" />\r\n    <a href=\"https://xiaokang2022.blog.csdn.net\">\r\n        <img src=\"https://img.shields.io/badge/Blog-https://xiaokang2022.blog.csdn.net-red\" alt=\"Blog\" />\r\n    </a>\r\n</div>\r\n\r\n🚀Installation/模块安装\r\n-----------------------\r\n\r\n### 👉Stable version/稳定版本\r\n\r\n* Version/版本 : 2.6.0\r\n* Release Date/发布日期 : 2023/03/28\r\n\r\n```\r\npip install tkintertools==2.6.0\r\n```\r\n\r\n### 👉Development version/开发版本\r\n\r\n* Version/版本 : 2.6.0\r\n* Release Date/发布日期 : 2023/03/20\r\n\r\n```\r\npip install tkintertools-dev==2.6.0\r\n```\r\n\r\n🚀Description/模块说明\r\n----------------------\r\n\r\n`tkintertools` 是一个完全没有使用任何第三方模块和库的Python界面开发模块，同时，它也没有任何依赖包，它的功能完全由内置模块和函数实现。\r\n\r\n`tkintertools` 是一款基于 `tkinter` 模块的二次开发的界面编程模块，它和 `tkinter` 最大的不同在于，它的控件并非真实的控件，而是在 `tkinter` 模块中 `Canvas` 对象中绘制而成的，这就赋予了 `tkintertools` 控件一些特性，列举如下：\r\n\r\n1. 控件背景可以是透明的👍\r\n2. 控件的样式可以是自定义的👍\r\n3. 控件的创建速度是远大于 `tkinter` 的控件的👍\r\n\r\n开发 `tkintertools` 模块选用的 Python 版本为 3.10，在这个及以上版本的 Python 拥有很好的类型提示语法，能为用户提供最好的语法提示。这里没有选择用 .pyi 存根文件的方式来实现类型提示的功能，主要原因是 .pyi 文件不方便和模块真正的文件进行同步修改，而且既然这个类型提示的功能在 Python3.6（Python3.10 的类型提示语法得到进一步强化） 以上在源代码中实现，那何必再用存根文件呢？\r\n\r\n使用 Python3.10 强化了的类型提示语法也意味着用户使用的 Python 版本也必须至少为 3.10，为了弥补兼容性，后续会推出兼容版的 tkintertools。目前需要兼容的用户，可以在源代码中自行修改，需要修改的语法如下：\r\n\r\n3.9 及更低版本 : 类型提示语法中的 “|”，isinstance 函数中的 “|”  \r\n3.7 及更低版本 : 赋值运算符的海象运算符 “:=”  \r\n3.6 及更低版本 : `fractions` 模块 `Fraction` 类的 `limit_denominator` 方法（建议升级Python版本）  \r\n3.5 及更低版本 : 全部的类型提示语法（建议升级Python版本）\r\n\r\n🚀Provides/模块功能\r\n-------------------\r\n\r\nHere, only the more distinctive features will be listed  \r\n这里只会列举出比较具有特色的功能\r\n\r\n### ⭐Customizable widgets/可自定义的控件\r\n\r\n### ⭐Automatically control size/自动控制大小\r\n\r\n### ⭐Easily move widgets/轻松移动控件\r\n\r\n### ⭐Gradient colors/渐变色\r\n\r\n### ⭐Automatically adapt to DPI/自动适应DPI\r\n\r\n### ⭐Scalable Picture/可缩放图片\r\n\r\n### ⭐Detailed type tips/详细的类型提示\r\n\r\n🚀Contents/模块内容\r\n-------------------\r\n\r\nEach non internal class and function in the module will be described in detail here  \r\n这里会详细说明模块中的每个非内部类和函数\r\n\r\n### ⭐Container Widget/容器控件\r\n\r\n1. `Tk` : 窗口类\r\n\r\n    继承于 `tkinter.Tk`，在继承了 `tkinter` 模块内 `Tk` 的基础上，又加入了对 `tkintertools` 模块中的 `Canvas` 对象的支持，并加入了检测窗口大小是否缩放的机制，以使得其子 `Canvas` 均能正确地进行缩放\r\n\r\n2. `Toplevel` : 顶级窗口类\r\n\r\n    继承于 `tkinter.Toplevel` 和 `Tk`，加入了对 `tkintertools` 模块中的 `Canvas` 对象的支持，其余均与 `Tk` 一样\r\n\r\n3. `Canvas` : 画布类\r\n\r\n    继承于 `tkinter.Canvas`，加入了对画布虚拟控件的支持，同时是各类响应事件、缩放控制的管理者，也对 `tkinter.Canvas` 的实例方法有一定的兼容性\r\n\r\n### ⭐Virtual Canvas Widget/虚拟画布控件\r\n\r\n1. `Label` : 标签控件\r\n\r\n    标签控件的功能和 `tkinter.Label` 的功能类似，但更加的多元化  \r\n    下面是 `Label` 控件的外观：  \r\n    <img width=\"720px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/LabelTest.png\" alt=\"LabelTest.png\" />\r\n\r\n    ```python\r\n    \"\"\" Label Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('LabelTest', 1000, 400)\r\n    canvas = tkt.Canvas(root, 1000, 400)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#0000FF'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n\r\n\r\n    colorful(510, 175, 480, 150)\r\n\r\n    tkt.Label(canvas, 50, 50, 400, 100, 0, 'NormalLabel\\nHere is the text')\r\n    tkt.Label(canvas, 50, 200, 400, 100, 20, 'RoundCornerLabel')\r\n    tkt.Label(canvas, 550, 50, 400, 100, 0, 'DisableLabel').set_live(False)\r\n    tkt.Label(canvas, 550, 200, 400, 100, 20,\r\n            'TransparentLabel', color_fill=tkt.COLOR_NONE)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n2. `Button` : 按钮控件\r\n\r\n    按钮控件相较于 `tkinter.Button` ，其自由度更高，`tkinter.Button` 只有在按下的时候才能触发绑定的关联事件，而 `Button` 却可以在鼠标移至按钮上方时、鼠标按下时、鼠标松开时都可以绑定关联事件  \r\n    下面是 `Button` 控件的外观：  \r\n    <img width=\"360px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/ButtonTest.png\" alt=\"ButtonTest.png\" />\r\n\r\n    ```python\r\n    \"\"\" Button Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('ButtonTest', 500, 500)\r\n    canvas = tkt.Canvas(root, 500, 500)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#0000FF'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n\r\n\r\n    colorful(50, 280, 400, 100)\r\n\r\n    tkt.Button(canvas, 150, 135, 200, 50, 0, 'NormalButton')\r\n    tkt.Button(canvas, 100, 195, 300, 50, 10, 'RoundCornerButton')\r\n    tkt.Button(canvas, 150, 255, 200, 50, 0, 'DisableButton').set_live(False)\r\n    tkt.Button(canvas, 100, 315, 300, 50, 10,\r\n            'TransparentButton', color_fill=tkt.COLOR_NONE)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n3. `CheckButton` : 复选框控件\r\n\r\n4. `Entry` : 输入框控件\r\n\r\n    输入框控件可以轻松地设置输入的文本位置（靠左、居中和靠右），同时，它可以在鼠标移至输入框上方、鼠标未在输入框上方两种状态显示不同的默认文本  \r\n    下面是 `Entry` 控件的外观：  \r\n    <img width=\"360px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/EntryTest.png\" alt=\"EntryTest.png\" />\r\n    \r\n    ```python\r\n    \"\"\" Entry Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('EntryTest', 500, 400)\r\n    canvas = tkt.Canvas(root, 500, 400)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#0000FF'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n\r\n\r\n    colorful(50, 193, 400, 100)\r\n    tkt.Entry(canvas, 20, 20, 200, 30, 0, ('LeftEntry', 'Enter'))\r\n    tkt.Entry(canvas, 20, 55, 200, 30, 0,\r\n            ('CenterEntry', 'Enter'), justify='center')\r\n    tkt.Entry(canvas, 20, 90, 200, 30, 0, ('RightEntry', 'Enter'), justify='right')\r\n    tkt.Entry(canvas, 270, 20, 200, 30, 8, 'LeftEntry')\r\n    tkt.Entry(canvas, 270, 55, 200, 30, 8, 'CenterEntry', justify='center')\r\n    tkt.Entry(canvas, 270, 90, 200, 30, 8, 'RightEntry', justify='right')\r\n\r\n    tkt.Entry(canvas, 100, 150, 300, 35, 0,\r\n            ('PasswordEntry', 'Click To Enter'), justify='center', show='•')\r\n    tkt.Entry(canvas, 100, 200, 300, 35, 0, 'DisableEntry',\r\n            justify='center').set_live(False)\r\n    tkt.Entry(canvas, 100, 250, 300, 35, 0, 'TransparentEntry',\r\n            justify='center', color_fill=tkt.COLOR_NONE)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n5. `Text` : 文本框控件\r\n\r\n    文本框类似于输入框，这里就不再赘述  \r\n    下面是 `Text` 控件的外观：  \r\n    <img width=\"720px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/TextTest.png\" alt=\"TextTest.png\" />\r\n\r\n    ```python\r\n    \"\"\" Text Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('TextTest', 1000, 400)\r\n    canvas = tkt.Canvas(root, 1000, 400)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#0000FF'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n\r\n\r\n    colorful(510, 175, 480, 150)\r\n\r\n    tkt.Text(canvas, 50, 50, 400, 100, 0, ('NormalText(Left)', 'Click To Enter'))\r\n    tkt.Text(canvas, 50, 200, 400, 100, 20,\r\n            'RoundCornerText(Center)', justify='center')\r\n    tkt.Text(canvas, 550, 50, 400, 100, 0, 'DisableText').set_live(False)\r\n    tkt.Text(canvas, 550, 200, 400, 100, 20,\r\n            'TransparentText(Right)', justify='right', color_fill=tkt.COLOR_NONE)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n6. `Progressbar` : 进度条控件\r\n\r\n    进度条控件相比 `tkinter.ttk.Progressbar`，外观上的自由度较大  \r\n    下面是 `Progressbar` 控件的外观：  \r\n    <img width=\"360px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/ProgressbarTest.png\" alt=\"ProgressbarTest.png\" />\r\n\r\n    ```python\r\n    \"\"\" Progressbar Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('ProgressbarTest', 500, 500)\r\n    canvas = tkt.Canvas(root, 500, 500)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#0000FF'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n\r\n\r\n    colorful(30, 290, 440, 50)\r\n\r\n    tkt.Progressbar(canvas, 50, 50, 400, 30)\r\n    tkt.Progressbar(canvas, 50, 100, 400, 30).load(.6667)\r\n    tkt.Progressbar(canvas, 50, 150, 400, 30, 5).load(1)\r\n    (_ := tkt.Progressbar(canvas, 50, 200, 400, 30)).load(0.3333)\r\n    _.set_live(False)\r\n    tkt.Progressbar(canvas, 50, 250, 400, 30, color_bar=(\r\n        'lightyellow', 'skyblue')).load(.5)\r\n    tkt.Progressbar(canvas, 50, 300, 400, 30, color_bar=('', 'orange')).load(.1667)\r\n\r\n    progressbar = tkt.Progressbar(canvas, 50, 375, 400, 30)\r\n    progressbar_2 = tkt.Progressbar(canvas, 50, 425, 400, 30)\r\n\r\n\r\n    def load(total: int, count: int = 0) -> None:\r\n        \"\"\" load progressbar \"\"\"\r\n        progressbar.load(count/total)\r\n        progressbar_2.load(1-count/total)\r\n        if count < total:\r\n            root.after(3, load, total, count+1)\r\n\r\n\r\n    load(10000)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n### ⭐Tool Class/工具类\r\n\r\n1. `PhotoImage` : 图片类\r\n\r\n    `PhotoImage` 类继承于 `tkinter.PhotoImage`，它是在 `tkinter.PhotoImage` 的基础上做功能的强化，对 gif 动图有很好的支持，仅需极少量代码即可实现动图的显示，还可以设置动图显示的速度，此外，对 png 类型的图片的支持也有强化，可以在不依赖任何第三方模块或者库的情况下，对图片进行缩放\r\n\r\n2. `Singleton` : 单例模式类\r\n\r\n    单例模式，不用介绍了吧？通过继承它来使用\r\n\r\n### ⭐Tool Function/工具函数\r\n\r\n1. `move` : 移动函数\r\n\r\n    移动函数可以轻松地按一定的规律、移动速度、移动时间去移动 `tkintertools` 模块内的所有对象，同时兼容了 `tkinter` 内的对象，即 `tkinter` 中的对象也可以很方便地移动，甚至它还可以移动窗口的位置！  \r\n    <img width=\"720px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/MoveTest.gif\" alt=\"MoveTest.gif\" />\r\n    \r\n    ```python\r\n    \"\"\" Move Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('MoveTest', 500, 500)\r\n    canvas = tkt.Canvas(root, 500, 500)\r\n    canvas.place(x=0, y=0)\r\n\r\n    rect = canvas.create_rectangle(50, 350, 150, 450)\r\n\r\n\r\n    def move_window(switch: list[bool] = [True]) -> None:\r\n        tkt.move(root, None, 1000 if switch[0] else -1000, 0, 800, 'flat')\r\n        switch[0] = not switch[0]\r\n\r\n\r\n    def move_button(switch: list[bool] = [True]) -> None:\r\n        tkt.move(canvas, button, 200 if switch[0] else -200, 0, 500, 'rebound')\r\n        switch[0] = not switch[0]\r\n\r\n\r\n    def move_rect(switch: list[bool] = [True]) -> None:\r\n        tkt.move(canvas, rect, 200 if switch[0] else -200, 0, 500, 'smooth')\r\n        switch[0] = not switch[0]\r\n\r\n\r\n    tkt.Button(canvas, 50, 50, 200, 40, 10, 'MoveWindow', command=move_window)\r\n    tkt.Button(canvas, 50, 100, 200, 40, 10, 'MoveRect', command=move_rect)\r\n    button = tkt.Button(canvas, 50, 150, 200, 40, 10,\r\n                        'MoveButton', command=move_button)\r\n\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n2. `text` : 文本函数\r\n\r\n    可以快速并方便地得到一个参数长度的字符串，且字符串的内容可以指定位置  \r\n    如：得到一个20长度的字符串“tkintertools”  \r\n    <pre>\r\n    `left`   : \"tkintertools        \"  \r\n    `center` : \"    tkintertools    \"  \r\n    `right`  : \"        tkintertools\"</pre>\r\n\r\n3. `color` : 颜色函数\r\n\r\n    颜色函数可以轻松求出一个颜色到另外一个颜色的过渡颜色，因此可以轻松得到渐变色的效果，同时，改变传入的参数还可以得到传入颜色的对比色  \r\n    第二张图是 test.py 在图像测试中绘制的图案  \r\n    <img width=\"360px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/ColorTest.png\" alt=\"ColorTest.png\" />\r\n    <img width=\"360px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/Test_Draw.png\" alt=\"Test_Draw.png\" />\r\n\r\n    ```python\r\n    \"\"\" Color Test \"\"\"\r\n\r\n    import tkintertools as tkt\r\n\r\n    root = tkt.Tk('ColorTest', 500, 500)\r\n    canvas = tkt.Canvas(root, 500, 500)\r\n    canvas.place(x=0, y=0)\r\n\r\n\r\n    def colorful(x: int, y: int, width: int, height: int) -> None:\r\n        \"\"\" Gradient colors \"\"\"\r\n        for i in range(width):\r\n            color = tkt.color(('#FF0000', '#00FF00'), i/width)\r\n            color_2 = tkt.color(('#FFFFFF', '#000000'), i/width)\r\n            canvas.create_line(x+i, y, x+i, y+height, fill=color)\r\n            canvas.create_oval(250-i/3, 300-i/3, 250+i/3, 300 +\r\n                            i/3, outline=color_2, width=2)\r\n\r\n\r\n    colorful(50, 50, 400, 100)\r\n\r\n    tkt.SetProcessDpiAwareness()\r\n    root.mainloop()\r\n    ```\r\n\r\n4. `SetProcessDpiAwareness` : DPI 级别设置函数\r\n\r\n    这个函数实际上只是对函数 `ctypes.OleDLL('shcore').SetProcessDpiAwareness` 的一个简单包装，其值可为 0、1 和 2，分别代表程序 DPI 的不同级别，那么缩放效果也就不同，`tkintertools` 选择的值是 1，但程序默认值实际为 0  \r\n    下面是执行了这个函数的效果  \r\n    <img width=\"720px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/SetProcessDpiAwareness_0.png\" alt=\"SetProcessDpiAwareness_0.png\" />  \r\n    下面是未执行这个函数的效果  \r\n    <img width=\"720px\" src=\"https://gitcode.net/weixin_62651706/tkintertools/-/raw/master/docs/images/SetProcessDpiAwareness_1.png\" alt=\"SetProcessDpiAwareness_1.png\" />  \r\n    从上面的两张图中可以很明显的看出第一张很模糊，第二张很清晰，这就是 DPI 级别不同的原因，不过这一点在平面缩放比不是 100% 的时候才会出现  \r\n    大家对上面的图肯定很熟悉，这不就是 IDLE 吗！？对，这个的问题的解决办法也是来自于 IDLE 的源代码 [pyshell.py line 18~20]  \r\n    注意：该函数在程序的不同位置执行的效果不一样！一般用在`mainloop`之前。\r\n\r\n🚀More/更多\r\n-----------\r\n\r\n> GitCode:  \r\n> https://gitcode.net/weixin_62651706/tkintertools\r\n\r\n> GitHub(Mirror/镜像):  \r\n> https://github.com/XiaoKang2022-CSDN/tkintertools\r\n\r\n> Column/专栏:  \r\n> https://blog.csdn.net/weixin_62651706/category_11600888.html\r\n\r\n> Tutorials/教程:  \r\n> https://xiaokang2022.blog.csdn.net/article/details/127374661\r\n\r\n还有更多内容请在源码中探索！\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitcode.net/weixin_62651706/tkintertools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tkintertools-test",
    "package_url": "https://pypi.org/project/tkintertools-test/",
    "platform": null,
    "project_url": "https://pypi.org/project/tkintertools-test/",
    "project_urls": {
      "Homepage": "https://gitcode.net/weixin_62651706/tkintertools"
    },
    "release_url": "https://pypi.org/project/tkintertools-test/3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An auxiliary module of the tkinder module",
    "version": "3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17473277,
  "releases": {
    "2.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2967a7802920a2ed16b5ae0939ce06cf1f55422b04ec0f8706258458d56c7d94",
          "md5": "f9af5cd54063800c7cda88f6ec824b56",
          "sha256": "a089581899d81fd7f049b711c41bc46ab1980d0cd6b1e7af8a36a51650311615"
        },
        "downloads": -1,
        "filename": "tkintertools_test-2.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9af5cd54063800c7cda88f6ec824b56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25065,
        "upload_time": "2023-03-28T03:41:14",
        "upload_time_iso_8601": "2023-03-28T03:41:14.517999Z",
        "url": "https://files.pythonhosted.org/packages/29/67/a7802920a2ed16b5ae0939ce06cf1f55422b04ec0f8706258458d56c7d94/tkintertools_test-2.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cecc0951223ea2a9cc9995b8c146d5c241e8bc60e69d945999ae1e82be66dcf",
          "md5": "9fc9c3c8a889c264227536f8f9e82d50",
          "sha256": "d518b35a111d4e328d0425490ae66a9fbd86513793847372d3b9b88bc4e4333d"
        },
        "downloads": -1,
        "filename": "tkintertools_test-2.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9fc9c3c8a889c264227536f8f9e82d50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29621,
        "upload_time": "2023-03-28T03:41:16",
        "upload_time_iso_8601": "2023-03-28T03:41:16.903715Z",
        "url": "https://files.pythonhosted.org/packages/2c/ec/c0951223ea2a9cc9995b8c146d5c241e8bc60e69d945999ae1e82be66dcf/tkintertools_test-2.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65d49191ee03d16721fda4b17e0e5112db2fa6f1b17453f8be4efd8be3ebd32a",
          "md5": "e2d6e32edfc80c01d32733441fe68a9b",
          "sha256": "f1b2a13d5133d91458bc19af9b23d5ccaa224dcb4ce51aa903d44376d6512c01"
        },
        "downloads": -1,
        "filename": "tkintertools_test-3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2d6e32edfc80c01d32733441fe68a9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25060,
        "upload_time": "2023-03-28T05:01:01",
        "upload_time_iso_8601": "2023-03-28T05:01:01.712599Z",
        "url": "https://files.pythonhosted.org/packages/65/d4/9191ee03d16721fda4b17e0e5112db2fa6f1b17453f8be4efd8be3ebd32a/tkintertools_test-3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9806476c50c7cfc82bff7cf63760757f14f0619d247cacba194b869bec031f3",
          "md5": "e158e43da356d23687e8ac36df984a51",
          "sha256": "cf86f7b8895c646dd3934857a114357005c017664c3dc0dbedc74a392fc63cd8"
        },
        "downloads": -1,
        "filename": "tkintertools_test-3.tar.gz",
        "has_sig": false,
        "md5_digest": "e158e43da356d23687e8ac36df984a51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29669,
        "upload_time": "2023-03-28T05:01:03",
        "upload_time_iso_8601": "2023-03-28T05:01:03.560718Z",
        "url": "https://files.pythonhosted.org/packages/c9/80/6476c50c7cfc82bff7cf63760757f14f0619d247cacba194b869bec031f3/tkintertools_test-3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65d49191ee03d16721fda4b17e0e5112db2fa6f1b17453f8be4efd8be3ebd32a",
        "md5": "e2d6e32edfc80c01d32733441fe68a9b",
        "sha256": "f1b2a13d5133d91458bc19af9b23d5ccaa224dcb4ce51aa903d44376d6512c01"
      },
      "downloads": -1,
      "filename": "tkintertools_test-3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2d6e32edfc80c01d32733441fe68a9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25060,
      "upload_time": "2023-03-28T05:01:01",
      "upload_time_iso_8601": "2023-03-28T05:01:01.712599Z",
      "url": "https://files.pythonhosted.org/packages/65/d4/9191ee03d16721fda4b17e0e5112db2fa6f1b17453f8be4efd8be3ebd32a/tkintertools_test-3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9806476c50c7cfc82bff7cf63760757f14f0619d247cacba194b869bec031f3",
        "md5": "e158e43da356d23687e8ac36df984a51",
        "sha256": "cf86f7b8895c646dd3934857a114357005c017664c3dc0dbedc74a392fc63cd8"
      },
      "downloads": -1,
      "filename": "tkintertools_test-3.tar.gz",
      "has_sig": false,
      "md5_digest": "e158e43da356d23687e8ac36df984a51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29669,
      "upload_time": "2023-03-28T05:01:03",
      "upload_time_iso_8601": "2023-03-28T05:01:03.560718Z",
      "url": "https://files.pythonhosted.org/packages/c9/80/6476c50c7cfc82bff7cf63760757f14f0619d247cacba194b869bec031f3/tkintertools_test-3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}