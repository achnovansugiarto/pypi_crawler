{
  "info": {
    "author": "Linear Logic Inc.",
    "author_email": "support@linearlogic.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<a href=\"https://explosion.ai\"><img src=\"https://linearlogic.ai/images/logo-small.png\" width=\"20\" style=\"margin-top: 50px;\" align=\"right\" /></a>\n\n# Linear Logic Python SDK\n\nThis is the officially supported Python library for using Linear Logic's APIs.\n\n\n## ðŸ“– Installation\n\nInstall the SDK using PIP:\n\n`pip install --upgrade git+https://github.com/linearlogicai/linear-logic-python-sdk.git`\n\n## ðŸ’¡ Getting started\n\n 1. [Quickstart](#quickstart)\n 2. [Initializing the client](#initializing-the-client)\n 3. [Organisations](#organisations)\n 4. [Projects](#projects)\n    1. [Batches](#batches)\n    2. [Project Tasks](#project-tasks)\n    3. [Project Workflows](#project-workflows)\n 5. [Datasets](#datasets)\n    1. [Dataset Tasks](#dataset-tasks)\n    2. [Model Runs](#model-runs)\n 6. [Models](#models)\n\n## ðŸš€ Quickstart\n\n### 1. Create a categorisation project \n```python\nfrom linlog import LinLogClient\n\nclient = LinLogClient.init_from_token(\"token\")\n\n# Create project\ncat_project = client.create_project(\n    title=\"Categorisation Project\", \n    project_type=\"categorisation\", \n    objects_to_annotate=[\n        { \"name\": \"Positive\", \"task_type\": \"categorisation\" },\n        { \"name\": \"Negative\", \"task_type\": \"categorisation\" }\n    ]\n)\n\n# Add task to project\nclient.create_categorisation_task(\n    cat_project['id'], \n    \"Every Star Wars release is amazing!\"\n)\n```\n\n### 2. Remove completed tasks \n```python\nfrom linlog import LinLogClient\n\nclient = LinLogClient.init_from_token(\"token\")\n\n# Get the first available project\ncat_project = client.get_projects()[0]\n\n# Retrieve all completed tasks\ntasks = client.get_project_tasks(\n    id=cat_project['id'],\n    complete=True\n)\n\nwhile tasks.offset + tasks.limit < tasks.count + 1:\n    # Perform removal\n    client.delete_tasks([t['id'] for t in tasks])\n    \n    # Get next tasks\n    tasks = client.get_project_tasks(\n        id=cat_project['id'],\n        complete=True,\n        offset=tasks.offset + tasks.limit\n    )\n```\n\n# SDK Instructions\n\n## Initializing the client\n\nYou can initialize a new client instance using your account credentials or an organisation-wide API token.\n\n### From credentials\n```python\nfrom linlog import LinLogClient\n\nclient = LinLogClient.init_from_credentials(\"email\", \"password\")\n```\n\n### From token\n```python\nfrom linlog import LinLogClient\n\nclient = LinLogClient.init_from_token(\"token\")\n```\n\n## Organisations\n\nAll users are registered to one organisation. To retrieve all groups and members registered to the organisation simply call the `get_organisation()` function. It doesn't require any parameters because all users are registered to exactly one organisation. Therefore the organisation corresponding to the user can be derived from the authentication.\n\n```python\nclient.get_organisation()\n```\n\n## Projects\n\nProjects can be created from the dashboard or programmatically from the API. The following example shows the creation of an image project which allows annotating cats with polygons.\n\n```python\nclient.create_project(\n    title=\"Sample Project\", \n    project_type=\"image\", \n    objects_to_annotate=[{ \"name\": \"Cat\", \"task_type\": \"polygon\" }]\n)\n```\n\nYou can list all projects in your organisation or retrieve a specific project by its ID. Note: the ID of a project always starts with `p_` \n\n```python\n# list all projects\nprojects = client.get_projects()\n\n# get project by id\nproject = client.get_project(\"id\")\n```\n\n\n\nProject are also easily deleted from their ID. Be aware that deleting a project will also delete all associated tasks with it.\n\n```python\nclient.delete_project(\"project_id\")\n```\n\n#### Batches\n\nBatches allow you to partition the tasks within a project. Batches can tie to specific datasets you use internally, or can be used to note which tasks were part of a specific sprints for example  \n\nYou can list all batches within a project:\n\n```python\n# list all batches in a project\nbatches = client.get_project_batches(\"project_id\")\n```\n\n#### Project Tasks\n\nTasks can be created programmatically using the API. The following example creates a categorisation task with the text *\"Hello, world\"*.\n\n```python\n# sample categorisation task\nclient.create_categorisation_task(\"project_id\", \"Hello, world\")\n```\n\nCategorisation tasks take four valid attachment types: `image`, `text`, `iframe` and `html`. If the attachment type is left blank the attachment will automatically be interepeted as text.\n\n```python\n# specify attachment type\nclient.create_categorisation_task(\n    \"project_id\",\n    attachment=\"<strong>Hi!</strong>\",\n    attachment_type=\"html\"\n)\n```\n\nYou can also pre-annotate the tasks by setting the annotations attribute.\n\n```python\n# pre-annotated annotations\nclient.create_categorisation_task(\n    \"project_id\", \n    attachment=\"Paris\", \n    annotations=[{ \"name\": \"Location\", \"task_type\": \"categorisation\" }]\n)\n\n# auto-complete task\nclient.create_categorisation_task(\n    \"project_id\",\n    \"This task does not require annotating\",\n    complete=True\n)\n\n```\n\nEventually you may wish to archive and delete the tasks. Simply obtain the IDs of the tasks you wish to remove and call the `delete_tasks` function.\n\n```python\nclient.delete_tasks([\"task_id_1\", \"task_id_2\"])\n```\n\n\nProjects are a collection of tasks that require annotations or manual reviews. Tasks within a project can be retrieved as shown in the example below. There are multiple filters you can apply to the search, valid filters are: `limit`, `offset`, `status`, `created_date`, `created_date__gte`, `created_date__lte`, `created_date__gt`, `created_date__lt`, `complete`, `rejected`, `work_started`\n\n```python\n# example: get all completed tasks from a project\ntasks = client.get_project_tasks(\n    id=\"project_id\",\n    complete=True\n)\n```\n\nThe `get_project_tasks` returns a `Paginator` instance. This allows to get the current offset, limit and total count from the request.\n- The offset gives the offset of the current resultset.\n- The limit shows the maximum number of instances returned from a single request.\n- The count gives the total number of instances present in the entire resultset.\n\nThe offset, limit and value can be accessed as properties from the Paginator:\n> `(tasks.offset, tasks.limit, tasks.count)`\n\n#### Project Workflows\n\n\n\n### Datasets\n\nDatasets are a collection of completed tasks and bring together your data, annotations and model predictions. Note: the ID of a dataset always starts with `d_` \n\nRetrieving datasets is much like retrieving projects:\n\n```python\n# list all datasets\ndatasets = client.get_datasets()\n\n# get dataset by id\ndataset = client.get_dataset(\"id\")\n```\n\n#### Dataset Tasks\n\nRetrieving tasks from a dataset is identical to that of projects, the only exception is that the tasks are always complete and may have additional model runs attached to them.\n\n```python\n# example: get all tasks from a dataset\nclient.get_dataset_tasks(\"dataset_id\")\n```\n\n#### Model Runs\n\nWhen you completed training a model you can start adding model runs to datasets. This allows you to generate key insights into the performance of your current model, but the results can also be used to compare the model with other models. \n\nCreating a model run is done as illustrated below:\n\n```python\nfor (prediction, score) in predictions:\n    # add each prediction to the model run\n    client.create_model_run(dataset_id=\"dataset_id\",\n                            model_version_id=\"model_version_id\",\n                            task_id=\"task_id\",\n                            annotation=prediction,\n                            confidence_score=score)\n```\n\n### Models\n\nYou can bring your own models to Linear Logic and use the platform to find the optimal model configuration. Learn how you can integrate your models with Linear Logic.\n\n#### Training models locally\n\n```python\nfrom linlog import ModelTrainer\n\n# initialize trainer\ntrainer = ModelTrainer(client)\n\ntrainer.init(\n    model_id=\"\",\n    version_name=\"\",\n    labels=[],\n    config={\n        \"learning_rate\": 0.01,\n        \"activation_function\": \"softmax\",\n        \"batch_size\": 256,\n        \"epochs\": 10,\n    }\n)\n\nepochs = 10\noffset = random.random() / 5\nfor epoch in range(1, epochs):\n    # Generate mock data\n    acc = 1 - 2 ** -epoch - random.random() / epoch - offset\n    loss = 2 ** -epoch + random.random() / epoch + offset\n\n    # Store results, any key-value combination is valid\n    trainer.log({\"acc\": acc, \"loss\": loss})\n\n# Finish model training and start metrics generation\ntrainer.finish()\n```\n\n## Running unit test\n\nRun: `python -m unittest tests/test_client.py`\n\n## Building package\n\n`python3 setup.py sdist bdist_wheel`\n\n`python3 -m pip install dist/linlog-0.1-py3-none-any.whl --force-reinstall`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://linearlogic.ai",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linearlogic",
    "package_url": "https://pypi.org/project/linearlogic/",
    "platform": null,
    "project_url": "https://pypi.org/project/linearlogic/",
    "project_urls": {
      "Homepage": "https://linearlogic.ai"
    },
    "release_url": "https://pypi.org/project/linearlogic/0.3.4/",
    "requires_dist": [
      "awesome-progress-bar (>=1.7.2)",
      "requests (>=2.28.1)",
      "colored (==1.4.3)"
    ],
    "requires_python": "",
    "summary": "Linear Logic Python SDK",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17254062,
  "releases": {
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a25a358013605237ad0a67258db0c4fb27fd5d8baad1c84ee76386a129ede7b",
          "md5": "325a138c9286ae56ef333076f72e84fb",
          "sha256": "962b54b29afe232a719d602f32ce2daff05aaf91d759e993973744ed504a8267"
        },
        "downloads": -1,
        "filename": "linearlogic-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "325a138c9286ae56ef333076f72e84fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24102,
        "upload_time": "2023-03-11T15:17:57",
        "upload_time_iso_8601": "2023-03-11T15:17:57.448497Z",
        "url": "https://files.pythonhosted.org/packages/1a/25/a358013605237ad0a67258db0c4fb27fd5d8baad1c84ee76386a129ede7b/linearlogic-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6b0ad6d4d2fe757cf9701af6f076945e51762992eeb6c2db5fa1910163bcac3",
          "md5": "46e9edd218fcfeac343b192e86855cd7",
          "sha256": "a575ad60093ce9a34cf1aad08419c4952cdc84922c14678a1a9f00840ba85d1e"
        },
        "downloads": -1,
        "filename": "linearlogic-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "46e9edd218fcfeac343b192e86855cd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16742,
        "upload_time": "2023-03-11T15:17:59",
        "upload_time_iso_8601": "2023-03-11T15:17:59.699422Z",
        "url": "https://files.pythonhosted.org/packages/c6/b0/ad6d4d2fe757cf9701af6f076945e51762992eeb6c2db5fa1910163bcac3/linearlogic-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a25a358013605237ad0a67258db0c4fb27fd5d8baad1c84ee76386a129ede7b",
        "md5": "325a138c9286ae56ef333076f72e84fb",
        "sha256": "962b54b29afe232a719d602f32ce2daff05aaf91d759e993973744ed504a8267"
      },
      "downloads": -1,
      "filename": "linearlogic-0.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "325a138c9286ae56ef333076f72e84fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24102,
      "upload_time": "2023-03-11T15:17:57",
      "upload_time_iso_8601": "2023-03-11T15:17:57.448497Z",
      "url": "https://files.pythonhosted.org/packages/1a/25/a358013605237ad0a67258db0c4fb27fd5d8baad1c84ee76386a129ede7b/linearlogic-0.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6b0ad6d4d2fe757cf9701af6f076945e51762992eeb6c2db5fa1910163bcac3",
        "md5": "46e9edd218fcfeac343b192e86855cd7",
        "sha256": "a575ad60093ce9a34cf1aad08419c4952cdc84922c14678a1a9f00840ba85d1e"
      },
      "downloads": -1,
      "filename": "linearlogic-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "46e9edd218fcfeac343b192e86855cd7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16742,
      "upload_time": "2023-03-11T15:17:59",
      "upload_time_iso_8601": "2023-03-11T15:17:59.699422Z",
      "url": "https://files.pythonhosted.org/packages/c6/b0/ad6d4d2fe757cf9701af6f076945e51762992eeb6c2db5fa1910163bcac3/linearlogic-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}