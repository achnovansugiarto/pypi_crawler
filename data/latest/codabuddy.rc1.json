{
  "info": {
    "author": "TB",
    "author_email": "tim.bleimehl@helmholtz-muenchen.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Container Database Buddy - CoDaBuddy\n\n\n> We use the buddy system. No more flyin' solo!\n>\n> You need somebody watching your back at all times!\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[*Rex Kwon Do - Napelon Dynamite*](https://youtu.be/Hzh9koy7b1E?t=94)\n\n![LOGO_PLACEHOLDER](./docs/logo.png)\n**This is a placeholder logo. Source: https://logomakr.com/**\n\n\n\nA container native database setup, backup and restore solution\n\nMaintainer: tim.bleimehl@dzd-ev.de\n\nStatus: Alpha (WIP - **do not use productive yet**)\n\n\n[[_TOC_]]\n\n# What is this (short)\n\nCoDaBuddy helps you to automate setup and backup your database that is running in container environment (kubernetes, docker)\n\nIt relies heavily on configuration by labels ([docker-labels](https://docs.docker.com/config/labels-custom-metadata/), [kubernetes-labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/))\n\nThis means you only have to attach the right labels to your database containers and they will be ready to use and included in your daily backup.\n\n\n# Features\n\n* Supported Databases:\n    * Mysql\n    * Postgres\n* Automatic backup retentation management (Daily, Weekly, Monthly, Yearly)\n* \"Backup now!\" wizard\n* Compressed backup\n* Auto create databases and users\n\n# Basic Example\n\n## Docker example\n### Setup\n\nLets create a mysql/mariadb database via docker-compose\n\n```yaml\nversion: \"3.7\"\nservices:\n  mysql:\n    image: mariadb:10\n    ports:\n      - 3306:3306\n    container_name: mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=mysuperpw\n    restart: unless-stopped\n    labels:\n      - \"backup.dzd-ev.de/enabled=true\"\n      - \"backup.dzd-ev.de/type=mysql\"\n      - \"backup.dzd-ev.de/username=root\"\n      - \"backup.dzd-ev.de/password=mysuperpw\"\n```\n\nNote the `labels`; these will direct our CoDaBuddy instance.\n\nStart the DB:\n\n`docker-compose up -d`\n\nLets write some data into our new database\n\n```bash\ndocker exec mysql /usr/bin/mysql -N -h127.0.0.1 -uroot -pmysuperpw -e \"\\\n  CREATE DATABASE IF NOT EXISTS coda_test; \\\n  CREATE TABLE IF NOT EXISTS coda_test.my_table(id INT AUTO_INCREMENT, firstname VARCHAR(32), PRIMARY KEY (id)); \\\n  INSERT INTO coda_test.my_table(firstname) VALUES ('Anna'); \\\n  INSERT INTO coda_test.my_table(firstname) VALUES ('Thomas'); \\\n  commit;\"\n```\n\n### Backup\n\nNow we can install CoDaBuddy via\n\n`pip3 install git+https://git.connect.dzd-ev.de/dzdtools/CoDaBuddy -U`\n\nAnd lets backup our DB\n\n`coda-backup docker`\n\nThats it. We now have a directory `./backups/` in front of us, with all databases backuped.\n\n### Restore\n\n\n## Kubernetes example\n\n### Setup\n\nFirst we create a sample postgres database container\n\n`postgres-deployment.yaml`\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n  - port: 5432\n  selector:\n    app: postgres\n  clusterIP: None\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    backup.dzd-ev.de/auto-create: true\n    backup.dzd-ev.de/enabled: true\n    backup.dzd-ev.de/password: supersavepw\n    backup.dzd-ev.de/type: postgres\n    backup.dzd-ev.de/username: postgres\n  annotations:\n    backup.dzd-ev.de/auto-create-databases: |-\n      [{\n          \"database\": \"coda_ps_test\",\n          \"user\": \"coda_test\",\n          \"password\": \"super_save_pw\"\n        }]\nspec:\n  selector:\n    matchLabels:\n      workloadselector: postgres01\n  serviceName: \"\"\n  template:\n    metadata:\n      labels:\n        workloadselector: postgres01\n    spec:\n      containers:\n      - env:\n        - name: POSTGRES_PASSWORD\n          value: supersavepw\n        image: postgres:12\n        name: postgres01\n        ports:\n        - containerPort: 5432\n          hostPort: 5432\n          name: psport5432\n```\n\n`kubectl apply -f postgres-deployment.yaml`\n\n\n### Setup Databases\n\nJust for fun we now use the CoDaBuddy Docker Container `auto-create`-feature to create our user and database\n\n`docker pull registry-gl.connect.dzd-ev.de:443/dzdtools/codabuddy`\n\n`docker run --rm -it --network=host -v ~/.kube/config:/.kube/config registry-gl.connect.dzd-ev.de:443/dzdtools/codabuddy auto-create --debug kubernetes --all-namespaces`\n\nThis creates a new postgres user/role named `coda_test` with access to a newly created database named `coda_ps_test` as defined in our annotation `backup.dzd-ev.de/auto-create-databases`\n\n\nToDo-note:\n\n> this is not working due to missing role auth\n>\n> results in `Error from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:default\" cannot list resource \"pods\" in API group \"\" at the cluster scope`\n>\n> `kubectl run codabuddy --restart=Never --rm -i --image=registry-gl.connect.dzd-ev.de:443/dzdtools/codabuddy -- auto-create --debug kubernetes --all-namespaces `\n\n\n### Backup\n\nNow we create a CronJob for CoDaBuddy to create a daily backup every night at 00:00\n\n```yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: CoDaBuddy-backupjob\nspec:\n  schedule: \"0 0 * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: CoDaBuddy-backupjob\n            image: registry-gl.connect.dzd-ev.de:443/dzdtools/codabuddy\n            imagePullPolicy: Always\n            volumeMounts:\n            - mountPath: /backup\n              name: backup-vol\n            - mountPath: /.kube/config\n              name: kubeconf-vol\n            command:\n            - backup\n            - --all-namespaces\n          restartPolicy: OnFailure\n          volumes:\n          - name: backup-vol\n            hostPath:\n              # path to store backups in the cluster host. This is obviously just a test setup. dont do that in productive\n              path: /tmp/backup\n              # this field is optional\n              type: Directory\n          - name: kubeconf-vol\n            hostPath:\n              # path to store the kube config. This is obviously just a test setup. dont do that in productive\n              path: /home/myname/.kube/config\n              # this field is optional\n              type: Directory\n```\n\nDISCLAIMER/HINT: this is a simple alpha state POC. In future version there will be a more secure/regulated example to access to the kubernetes api via roles and kubectl proxy https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/\n\n\n# Planned features\n\n* (WIP) Restore Wizard\n* (WIP) Neo4j support\n* (Planned) Database auth via Docker/kubernetes Secrets\n* (Planned) Email notification\n* (Planned) Docker Event listener / Kubectl hooks to react to container started/stopped\n* (Planned) Backup compression optional\n* (Idea) Switch to https://github.com/kubernetes-client/python and https://docker-py.readthedocs.io/en/stable/ (or create alternative modules)\n* (Idea) restore by label (checked/executed when pod starts via https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/) (needs a metadata store :/ )\n* (Idea) Matrix notifications   \n* (Idea) [Podman](https://podman.io/) support. Your help is greatly appreciated. Should be easy or maybe no work at all\n* (Idea) [LCX](https://linuxcontainers.org/) support. Help needed!\n* (Idea) Suppord pod with more than one container https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/#opening-a-shell-when-a-pod-has-more-than-one-container\n* (Idea) Provide auto-create params in https://kubernetes.io/docs/concepts/configuration/configmap/ instead of k8s annotation\n* (Idea) Improve human readable output by printing a tree structure (https://www.baeldung.com/java-print-binary-tree-diagram)\n* (Idea) Encrypt backups\n# Current ToDo / Known Issues\n\n* write docs\n* Timestamp is not in current timezone?\n* Write example with proper productive access to Kubernetes API\n\n\n# limitations\n\n## Auto database creation\n\n* All databases in one instance/container must have the same encoding and collation. Atm there is no way of configuring this on a per database level\n* All databases in one instance/container must share on backup user. Atm there is no way of having multiple users to access different databases in one instance/container\n\n\n# Docker Volumes Pathes\n\n\n- `/var/run/docker.sock:/var/run/docker.sock`\n  Is needed to access the docker API to find database containers to be backed up\n\n\n\n- `/.kube/config`\n  Is needed to access the kubernetes API to find database containers to be backed up. to be refined in future version\n\n# Dev Notes\n\nhttps://kubernetes.io/docs/tasks/run-application/run-single-instance-stateful-application/\n\nStart Test Rancher K8s\n\n```\ndocker run -d \\\n--restart=unless-stopped \\\n-p 80:80 -p 443:443 \\\n--privileged \\\n--name rancher \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nrancher/rancher:stable\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.connect.dzd-ev.de/dzdtools/CoDaBuddy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CoDaBuddy",
    "package_url": "https://pypi.org/project/CoDaBuddy/",
    "platform": "",
    "project_url": "https://pypi.org/project/CoDaBuddy/",
    "project_urls": {
      "Homepage": "https://git.connect.dzd-ev.de/dzdtools/CoDaBuddy"
    },
    "release_url": "https://pypi.org/project/CoDaBuddy/0.0.1/",
    "requires_dist": [
      "DZDConfigs",
      "Click",
      "tabulate",
      "humanize",
      "pyyaml"
    ],
    "requires_python": ">=3.7",
    "summary": "Container Database Backup - A tool to backup your database containers",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12909844,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dabcd25fc838f7b922e354708ac7bcd6731d5bb812271767c500017e6dbeaeb",
          "md5": "947cdf0c2bc4bf45feedc993bfd2b7e0",
          "sha256": "e05dd7923b69901f16360aa41defca91dcee698ad2c0fec02e7eeaf262a0fe41"
        },
        "downloads": -1,
        "filename": "CoDaBuddy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "947cdf0c2bc4bf45feedc993bfd2b7e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30272,
        "upload_time": "2022-02-16T14:55:48",
        "upload_time_iso_8601": "2022-02-16T14:55:48.022629Z",
        "url": "https://files.pythonhosted.org/packages/8d/ab/cd25fc838f7b922e354708ac7bcd6731d5bb812271767c500017e6dbeaeb/CoDaBuddy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68ca58a8c56cc391bd713f55c3a0021f961726e273a5d6cdb000aa8b3d3f7e38",
          "md5": "8636baec452dd177d7365b3fced3b1a6",
          "sha256": "63edab9774cb8fb3559d837439d7d539311c28c9dd243c46e4b4dbea94a85cc5"
        },
        "downloads": -1,
        "filename": "CoDaBuddy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8636baec452dd177d7365b3fced3b1a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 43823,
        "upload_time": "2022-02-16T14:55:50",
        "upload_time_iso_8601": "2022-02-16T14:55:50.079949Z",
        "url": "https://files.pythonhosted.org/packages/68/ca/58a8c56cc391bd713f55c3a0021f961726e273a5d6cdb000aa8b3d3f7e38/CoDaBuddy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dabcd25fc838f7b922e354708ac7bcd6731d5bb812271767c500017e6dbeaeb",
        "md5": "947cdf0c2bc4bf45feedc993bfd2b7e0",
        "sha256": "e05dd7923b69901f16360aa41defca91dcee698ad2c0fec02e7eeaf262a0fe41"
      },
      "downloads": -1,
      "filename": "CoDaBuddy-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "947cdf0c2bc4bf45feedc993bfd2b7e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 30272,
      "upload_time": "2022-02-16T14:55:48",
      "upload_time_iso_8601": "2022-02-16T14:55:48.022629Z",
      "url": "https://files.pythonhosted.org/packages/8d/ab/cd25fc838f7b922e354708ac7bcd6731d5bb812271767c500017e6dbeaeb/CoDaBuddy-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68ca58a8c56cc391bd713f55c3a0021f961726e273a5d6cdb000aa8b3d3f7e38",
        "md5": "8636baec452dd177d7365b3fced3b1a6",
        "sha256": "63edab9774cb8fb3559d837439d7d539311c28c9dd243c46e4b4dbea94a85cc5"
      },
      "downloads": -1,
      "filename": "CoDaBuddy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8636baec452dd177d7365b3fced3b1a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 43823,
      "upload_time": "2022-02-16T14:55:50",
      "upload_time_iso_8601": "2022-02-16T14:55:50.079949Z",
      "url": "https://files.pythonhosted.org/packages/68/ca/58a8c56cc391bd713f55c3a0021f961726e273a5d6cdb000aa8b3d3f7e38/CoDaBuddy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}