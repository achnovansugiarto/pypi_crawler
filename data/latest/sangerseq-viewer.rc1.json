{
  "info": {
    "author": "Hideto Mori",
    "author_email": "hidto7592@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# sangerseq_viewer Installation and User Manual\n\n\n\nsangerseq_viewer is a python package to automatically visualize Sanger sequencing results and the corresponding annotated sequence map. \n\nDespite the fact that Sanger sequencing is one of the indispensable tasks in constructing and editing DNA sequences, there is no open-source software that provides an intuitive and understandable graphical representation of sequencing results.   Some commercial GUI software (Snapgene, Geneious prime) fulfills this requirement. However, now that it is common to design and construct dozens or hundreds of DNA sequences, manually processing large numbers of Sanger sequencing results is a tedious and time-consuming task.\n\nHere, I provide sangerseq_viewer that allow us to visulize sanger sequncing result with a simple command.   \n\n*sangerseq_viewer is depend on m packages [patchworklib](https://github.com/ponnhide/patchworklib) and [QUEEN](https://github.com/yachielab/QUEEN). Both packages provide APIs for handling matplotlib subplots and GenBank files, respectivily. If you are interested in them, please see their documents. *\n\n## Software dependency\n- python 3.8.0 or later\n\t\n\n## Installation\nPlese execute the following commands.\n\n```\npip install patchworklib\npip install python-queen\npip install sangerseq_viewer --prefix=PREFIX\n```\n`PREFIX` is the executable path of sangerseq_viewer. \nBy specifying `--prefix`, you can run `sangerseq_viewer`  from your command line.\n\n## Example code\n**Example command 1**\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/Spec-2xU6gRNA-1.ab1 -o output/example1.png --dpi 200`\n\n**Output figure 1** \n<img src=\"output/example1.png\" width=\"1200x1200\">\n\n---\n\n**Example command 2**\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/Spec-2xU6gRNA-1.ab1 -o output/example2.png -l 200 --dpi 200`\n\n**Output figure 2**\n\n<img src=\"output/example2.png\" width=\"1200x1200\">\n\n---\n\n**Example command 3**\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/Spec-2xU6gRNA-1.ab1 -o output/example3.png-l 200 -rs 1700 -re 2100 --dpi 200`\n\n**Output figure 3**\n\n<img src=\"output/example3.png\" width=\"1200x1200\">\n\n---\n\n**Example command 4**\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/ -o output/example4.png --dpi 200`\n\n**Output figure 4**\n\n<img src=\"output/example4.png\" width=\"1200x1200\">\n\n---\n\n**Example command 5**\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/ -o output/example5.png -l 200 --dpi 200`\n\n**Output figure 5**\n\n<img src=\"output/example5.png\" width=\"1200x1200\">\n\n---\n\n**Example command 6**\n\n`sangerseq_viewer -s example_data/puc19_spec_2xu6grna.gb -q example_data/ab1/ -o output/example6.png -l 200 -rs 1700 -re 2100 --dpi 200`\n\n**Output figure 6**\n\n<img src=\"output/example6.png\" width=\"1200x1200\">\n\n## Usage\n\n```\nSYNOPSIS\nsangerseq_viewer [-h] [-q QUERY] [-s SUBJECT] [-l LINEBREAK] [-o OUTPUT] [-rs START] [-re END] [-wq {True,False}] [-d DPI]\n\n  -h, --help            \n     show this help message and exit\n  -q QUERY, --query QUERY\n     Abi file path.\n  -s SUBJECT, --subject SUBJECT\n     Genbank file path.\n  -l LINEBREAK, --linebreak LINEBREAK\n     Sequence length for line break.\n  -o OUTPUT, --output OUTPUT\n     Output file path. The output image format can be specified by the filename extension.\n  -rs START, --start START\n     Start position of the subject sequence region to be visualized. \n  -re END, --end END    \n     End position of the subject sequence region to be visualized.\n  -wq {True,False}, --quality {True,False}\n     If True, display bar plot representing Quality value at each nucleotide position.\n  -d DPI, --dpi DPI     \n     Resolution of the output image. If output format is pdf, the value is ignored.\n```\n\n\n\nIf you want to use `sanger_seqviewer` as python module, please import `sangerseq_viewer.sangerseq_viewer` and use `view_sanger()` fucntion. It takes same parameters with `sangerseq_viewer` command and returns `matplotlib.figure` object. \n\n`sangerseq_viewer.sangerseq_viewer` provides other useful functions such as `generate_consensusseq()` and `ab1_to_dict()` for  handling ab1 file. I will add the document for them later.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ponnhide/patchworklib",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ponnhide/patchworklib",
    "keywords": "",
    "license": "GNU General Public License v3.0",
    "maintainer": "Hideto Mori",
    "maintainer_email": "hidto7592@gmail.com",
    "name": "sangerseq-viewer",
    "package_url": "https://pypi.org/project/sangerseq-viewer/",
    "platform": null,
    "project_url": "https://pypi.org/project/sangerseq-viewer/",
    "project_urls": {
      "Download": "https://github.com/ponnhide/patchworklib",
      "Homepage": "https://github.com/ponnhide/patchworklib"
    },
    "release_url": "https://pypi.org/project/sangerseq-viewer/0.1.3/",
    "requires_dist": [
      "biopython (>=1.78)",
      "matplotlib (>=3.4.3)",
      "patchworklib (>=0.4.5)",
      "python-queen (>=1.1.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Visualization tool for Sanger sequencing data",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14718589,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5f17d50eb32119985727d11982e73b0a4b2b855cffb9c9548bedf232a239d6c",
          "md5": "9e3632ca2e43a7e3f66f0d957685834d",
          "sha256": "44c41e6c4bf1e781e957e9d69be1c506f89ed4a8eef98f834a3eb028dee25f49"
        },
        "downloads": -1,
        "filename": "sangerseq_viewer-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e3632ca2e43a7e3f66f0d957685834d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11813,
        "upload_time": "2022-08-10T15:31:31",
        "upload_time_iso_8601": "2022-08-10T15:31:31.928847Z",
        "url": "https://files.pythonhosted.org/packages/b5/f1/7d50eb32119985727d11982e73b0a4b2b855cffb9c9548bedf232a239d6c/sangerseq_viewer-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5f17d50eb32119985727d11982e73b0a4b2b855cffb9c9548bedf232a239d6c",
        "md5": "9e3632ca2e43a7e3f66f0d957685834d",
        "sha256": "44c41e6c4bf1e781e957e9d69be1c506f89ed4a8eef98f834a3eb028dee25f49"
      },
      "downloads": -1,
      "filename": "sangerseq_viewer-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e3632ca2e43a7e3f66f0d957685834d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11813,
      "upload_time": "2022-08-10T15:31:31",
      "upload_time_iso_8601": "2022-08-10T15:31:31.928847Z",
      "url": "https://files.pythonhosted.org/packages/b5/f1/7d50eb32119985727d11982e73b0a4b2b855cffb9c9548bedf232a239d6c/sangerseq_viewer-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}