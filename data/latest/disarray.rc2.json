{
  "info": {
    "author": "Kevin Arvai",
    "author_email": "arvkevi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# disarray\n[![Downloads](https://pepy.tech/badge/disarray)](https://pepy.tech/project/disarray)\n[![Downloads](https://pepy.tech/badge/disarray/month)](https://pepy.tech/project/disarray/month)\n[![Build Status](https://travis-ci.com/arvkevi/disarray.svg?branch=master)](https://travis-ci.com/arvkevi/disarray)\n[![codecov](https://codecov.io/gh/arvkevi/disarray/branch/master/graph/badge.svg)](https://codecov.io/gh/arvkevi/disarray)\n\n`disarray` calculates metrics derived from a confusion matrix and makes them directly accessible from a pandas DataFrame.\n\n![disarray demo](demo/disarray_demo.gif)\n\nIf you are already using [`pandas`](https://pandas.pydata.org/), then `disarray` is easy to use, simply import `disarray`:\n ```python\nimport pandas as pd\n\ndf = pd.DataFrame([[18, 1], [0, 1]])\n\nimport disarray\n\ndf.da.sensitivity\n0    0.947368\n1    1.000000\ndtype: float64\n```\n\n## Table of contents\n- [Installation](#installation)\n- [Usage](#usage)\n    * [binary classification](#binary-classification)\n    * [class counts](#class-counts)\n    * [export metrics](#export-metrics)\n    * [multi-class classification](#multi-class-classification)\n    * [supported metrics](#supported-metrics)\n- [Why disarray](#why-disarray?)\n- [Contributing](#contributing)\n\n## Installation\n**Install using pip**\n```bash\n$ pip install disarray\n```\n\n**Clone from GitHub**\n```bash\n$ git clone https://github.com/arvkevi/disarray.git\n$ python setup.py install\n```\n\n## Usage\nThe `disarray` package is intended to be used similar to a `pandas` attribute or method. `disarray` is registered as \na `pandas` extension under `da`. For a DataFrame named `df`, access the library using `df.da.`.\n\n\n### Binary Classification\nTo understand the input and usage for `disarray`, build an example confusion matrix for a **binary classification**\n problem from scratch with `scikit-learn`.   \n(You can install the packages you need to run the demo with: `pip install -r requirements.demo.txt`)\n\n```python\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n# Generate a random binary classification dataset\nX, y = datasets.make_classification(n_classes=2, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n# fit and predict an SVM\nclassifier = svm.SVC(kernel='linear', C=0.01)\ny_pred = classifier.fit(X_train, y_train).predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\n[[13  2]\n [ 0 10]]\n```\n\nUsing `disarray` is as easy as importing it and instantiating a DataFrame object from a **square** array of **positive** integers.\n\n```python\nimport disarray\nimport pandas as pd\n\ndf = pd.DataFrame(cm)\n# access metrics for each class by index\nprint(df.da.precision[1])\n0.83\n```\n\n### Class Counts\n`disarray` stores per-class counts of true positives, false positives, false negatives, and true negatives. Each of these are stored as capitalized abbreviations, `TP`, `FP`, `FN`, and `TN`.\n\n```python\ndf.da.TP\n```\n```python\n0    13\n1    10\ndtype: int64\n```\n\n### Export Metrics\nUse `df.da.export_metrics()` to store and/or visualize many common performance metrics in a new `pandas` DataFrame \nobject. Use the `metrics_to_include=` argument to pass a list of metrics defined in `disarray/metrics.py` (default is \nto use `__all_metrics__`).\n\n```python\ndf.da.export_metrics(metrics_to_include=['precision', 'recall', 'f1'])\n```\n|           |        0 |        1 |   micro-average |\n|-----------|----------|----------|-----------------|\n| precision | 1.0      | 0.833333 |            0.92 |\n| recall    | 0.866667 | 1.0      |            0.92 |\n| f1        | 0.928571 | 0.909091 |            0.92 |\n\n\n\n### Multi-Class Classification\n`disarray` works with multi-class classification confusion matrices also. Try it out on the iris dataset. Notice, the\n DataFrame is instantiated with an `index` and `columns` here, but it is not required.\n\n```python\n# load the iris dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\nclass_names = iris.target_names\n# split the training and testing data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n# train and fit a SVM\nclassifier = svm.SVC(kernel='linear', C=0.01)\ny_pred = classifier.fit(X_train, y_train).predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\n\n# Instantiate the confusion matrix DataFrame with index and columns\ndf = pd.DataFrame(cm, index=class_names, columns=class_names)\nprint(df)\n```\n|            |   setosa |   versicolor |   virginica |\n|------------|----------|--------------|-------------|\n| setosa     |       13 |            0 |           0 |\n| versicolor |        0 |           10 |           6 |\n| virginica  |        0 |            0 |           9 |\n\n`disarray` can provide per-class metrics:\n\n```python\ndf.da.sensitivity\n```\n```python\nsetosa        1.000\nversicolor    0.625\nvirginica     1.000\ndtype: float64\n```\nIn a familiar fashion, one of the classes can be accessed with bracket indexing.\n\n```python\ndf.da.sensitivity['setosa']\n```\n```python\n1.0\n```\nCurrently, a [micro-average](https://datascience.stackexchange.com/a/24051/16855) is supported for both binary and\n multi-class classification confusion matrices. (Although it only makes sense in the multi-class case).\n```python\ndf.da.micro_sensitivity\n```\n```python\n0.8421052631578947\n```\nFinally, a DataFrame can be exported with selected metrics.\n```python\ndf.da.export_metrics(metrics_to_include=['sensitivity', 'specificity', 'f1'])\n```\n\n|             |   setosa |   versicolor |   virginica |   micro-average |\n|-------------|----------|--------------|-------------|-----------------|\n| sensitivity |      1.0 |     0.625    |    1.0      |        0.842105 |\n| specificity |      1.0 |     1.0      |    0.793103 |        0.921053 |\n| f1          |      1.0 |     0.769231 |    0.75     |        0.842105 |\n\n### Supported Metrics\n```python\n'accuracy',\n'f1',\n'false_discovery_rate',\n'false_negative_rate',\n'false_positive_rate',\n'negative_predictive_value',\n'positive_predictive_value',\n'precision',\n'recall',\n'sensitivity',\n'specificity',\n'true_negative_rate',\n'true_positive_rate',\n```\nAs well as micro-averages for each of these, accessible via `df.da.micro_recall`, for example.\n\n## Why disarray?\n\nWorking with a [confusion matrix](https://en.wikipedia.org/wiki/Confusion_matrix) is common in data science projects. It is useful to have performance metrics available directly from [pandas](https://pandas.pydata.org/) DataFrames. \n\nSince `pandas` version `0.23.0`, users can easily\n[register custom accessors](https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extending-pandas),\n which is how `disarray` is implemented.\n\n## Contributing\n\nContributions are welcome, please refer to [CONTRIBUTING](https://github.com/arvkevi/disarray/blob/master/CONTRIBUTING.md) \nto learn more about how to contribute.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/arvkevi/disarray/tarball/0.2.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arvkevi/disarray",
    "keywords": "machine learning-supervised learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "disarray",
    "package_url": "https://pypi.org/project/disarray/",
    "platform": "",
    "project_url": "https://pypi.org/project/disarray/",
    "project_urls": {
      "Download": "https://github.com/arvkevi/disarray/tarball/0.2.0",
      "Homepage": "https://github.com/arvkevi/disarray"
    },
    "release_url": "https://pypi.org/project/disarray/0.2.0/",
    "requires_dist": [
      "pandas (>=0.23.0)",
      "numpy (>=0.14.2)"
    ],
    "requires_python": "",
    "summary": "Calculate confusion matrix metrics from your pandas DataFrame",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8379908,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc19468fddcc25f930c7300dc45bd2f2bead83504ff62719ad7c5f41898aa0d",
          "md5": "9aa7f07d3fce28b82cda8405a66d2905",
          "sha256": "806f4826bf33a2e3d115737c08355ee6fc34041f438ebf41ec34e1113b9f46d3"
        },
        "downloads": -1,
        "filename": "disarray-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9aa7f07d3fce28b82cda8405a66d2905",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6674,
        "upload_time": "2019-10-07T01:50:29",
        "upload_time_iso_8601": "2019-10-07T01:50:29.899802Z",
        "url": "https://files.pythonhosted.org/packages/0c/c1/9468fddcc25f930c7300dc45bd2f2bead83504ff62719ad7c5f41898aa0d/disarray-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8afb6fec6dfaed0fa749e2c46467abf46604c2ee4e1ed4787f9c26d98cc2a1e6",
          "md5": "377df996739c5aa0d8bfaa0ee98d2034",
          "sha256": "397588be2d493b68b0c438dd0bd85a0fe7207870877281e2905963123a2c7817"
        },
        "downloads": -1,
        "filename": "disarray-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "377df996739c5aa0d8bfaa0ee98d2034",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6117,
        "upload_time": "2019-10-07T01:50:32",
        "upload_time_iso_8601": "2019-10-07T01:50:32.390724Z",
        "url": "https://files.pythonhosted.org/packages/8a/fb/6fec6dfaed0fa749e2c46467abf46604c2ee4e1ed4787f9c26d98cc2a1e6/disarray-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef006ae50e7d974b3649709df925619664145436bc5bfe71d9307c6e17fa0882",
          "md5": "e32adfcf29aafeb93810ed33acba1d36",
          "sha256": "3165ca02c0719d5e55354a153f00a59c44507d8c2d4f27aa79815639ad4594bb"
        },
        "downloads": -1,
        "filename": "disarray-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e32adfcf29aafeb93810ed33acba1d36",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6768,
        "upload_time": "2020-10-09T22:49:55",
        "upload_time_iso_8601": "2020-10-09T22:49:55.598034Z",
        "url": "https://files.pythonhosted.org/packages/ef/00/6ae50e7d974b3649709df925619664145436bc5bfe71d9307c6e17fa0882/disarray-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5f777dffec7b05b669af09736e988c92275096a2e3374bbab6f7b4dcc27ee8d",
          "md5": "7e37d8c1b1614683cce52135fc216cd4",
          "sha256": "c55507cee35fc5a2a6c083b7dae67946889beadf67cd9eeb279238ea4ae43132"
        },
        "downloads": -1,
        "filename": "disarray-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e37d8c1b1614683cce52135fc216cd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7453,
        "upload_time": "2020-10-09T22:49:56",
        "upload_time_iso_8601": "2020-10-09T22:49:56.731941Z",
        "url": "https://files.pythonhosted.org/packages/d5/f7/77dffec7b05b669af09736e988c92275096a2e3374bbab6f7b4dcc27ee8d/disarray-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef006ae50e7d974b3649709df925619664145436bc5bfe71d9307c6e17fa0882",
        "md5": "e32adfcf29aafeb93810ed33acba1d36",
        "sha256": "3165ca02c0719d5e55354a153f00a59c44507d8c2d4f27aa79815639ad4594bb"
      },
      "downloads": -1,
      "filename": "disarray-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e32adfcf29aafeb93810ed33acba1d36",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6768,
      "upload_time": "2020-10-09T22:49:55",
      "upload_time_iso_8601": "2020-10-09T22:49:55.598034Z",
      "url": "https://files.pythonhosted.org/packages/ef/00/6ae50e7d974b3649709df925619664145436bc5bfe71d9307c6e17fa0882/disarray-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5f777dffec7b05b669af09736e988c92275096a2e3374bbab6f7b4dcc27ee8d",
        "md5": "7e37d8c1b1614683cce52135fc216cd4",
        "sha256": "c55507cee35fc5a2a6c083b7dae67946889beadf67cd9eeb279238ea4ae43132"
      },
      "downloads": -1,
      "filename": "disarray-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e37d8c1b1614683cce52135fc216cd4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7453,
      "upload_time": "2020-10-09T22:49:56",
      "upload_time_iso_8601": "2020-10-09T22:49:56.731941Z",
      "url": "https://files.pythonhosted.org/packages/d5/f7/77dffec7b05b669af09736e988c92275096a2e3374bbab6f7b4dcc27ee8d/disarray-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}