{
  "info": {
    "author": "Alexander Schillemans",
    "author_email": "alexander.schillemans@lhs.global",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# python-copaco-connections\r\nEasy python integrations for the Copaco Customer Connections\r\n\r\n## Package use\r\n\r\nThis package has three main functions:\r\n\r\n- Retrieve the pricelist of Copaco\r\n- Send orders to Copaco\r\n- Retrieve order responses\r\n\r\nThese three functions will be explained seperately below.\r\n\r\nYou need to requests a connection with Copaco first before you can use this package.\r\nMore info here: https://www.copaco.com/en-be/customer-service-e-commerce-fulfillment\r\n\r\n## Getting started\r\n\r\n### Install\r\n\r\nInstall with pip.\r\n\r\n```python\r\npip install python-copaco-connections\r\n```\r\n\r\n## Pricelist\r\n\r\n### Limitations\r\n\r\nThe pricelist is limited to the Copaco BE - Dutch Productlist in CSV format via FTP. Might be extended in the future.\r\n\r\n### Import\r\n\r\nImport the package and the CopacoConnectionBE object.\r\n\r\n```python\r\nfrom copaco.connection import CopacoConnectionBE\r\n```\r\n\r\n### Setup connection\r\n\r\nMake the connection with your provided FTP credentials.\r\n\r\n```python\r\nconn = CopacoConnectionBE(FTP_HOST, FTP_LOGIN, FTP_PASSWD)\r\n```\r\n\r\n### Retrieve the pricelist\r\n\r\nYou can retrieve the pricelist as follows:\r\n\r\n```python\r\npriceList = conn.priceList.get()\r\n```\r\n\r\nThis will return an ordinary list which contains PriceListItem objects.\r\n\r\nYou can find the attributes of this object and their use below:\r\n\r\n**PriceListItem object**\r\n\r\n| Attribute  | Contains | Type |\r\n| ------------- | ------------- |-------------|\r\n| article  | Article number  | string |\r\n| vendorCode  | Unique vendor code  | string |\r\n| description  | Short description  | string |\r\n| price  | Price, excluding levies  | float |\r\n| priceWithLevies  | Price, including levies | float |\r\n| stock  | Amount of stock available  | integer |\r\n| hierarchy  | Product hierarchy  | string |\r\n| unspscCode  | UNSPSC code  | string |\r\n| EAN  | EAN code  | string |\r\n| statusCode  | Status code (0 - 12). Refer to docs.  | integer |\r\n| status  | Human-readable status  | string |\r\n| auvibel  | Price of Auvibel  | float |\r\n| reprobel  | Price of Reprobel  | float |\r\n| recupel  | Price of Recupel  | float |\r\n| bebat  | Price of Bebat  | float |\r\n| nextDelivery  | Next delivery date of this product | date |\r\n| nextDeliveryAmount  | Amount that will be delivered on next delivery | integer |\r\n| inventoryStatusCode  | ATP code | string |\r\n| inventoryStatus  | Human-readable ATP code | string |\r\n\r\n\r\n### Sample script\r\n\r\nYou can find a sample script at examples/get-pricelist.py\r\n\r\n\r\n## Orders\r\n\r\n### Limitations\r\n\r\nFields that are not supported at this moment: \r\n\r\n- end-user_information\r\n- orderline_info\r\n- registration_info\r\n- notification\r\n\r\n### Import\r\n\r\nImport the package and the CopacoOrders object.\r\n\r\n```python\r\nfrom copaco.orders import CopacoOrders\r\n```\r\n\r\n### Setup connection\r\n\r\nMake the connection with your Customer ID and provided Sender ID for orders.\r\n\r\n```python\r\norders = CopacoOrders(CUSTOMER_ID, SENDER_ID)\r\n```\r\n\r\n### Create a new order\r\n\r\nBefore creating an order you have to understand that creating an order does not equal sending the order to Copaco for processing.\r\nYou need to create the order internally first, and then send the order over to Copaco.\r\n\r\n```python\r\norders = CopacoOrders(CUSTOMER_ID, SENDER_ID)\r\norder = orders.create(external_document_id, supplier, customer_ordernumber, completedelivery, requested_deliverydate=None, recipientsreference=None)\r\n```\r\n\r\nThe above function is a simplified function that allows you to create a basic Order object, with no lines attached to it.\r\n\r\n| Param  | Required? | Type | Format | Remarks\r\n| ------------- | ------------- |-------------|-------------|-------------|\r\n| external_document_id  | X  | string | Free text field | Contains an unique number or token from your system |\r\n| supplier  | X  | string | 'COPACO'/'6010' | 'COPACO' = Copaco NL, '6010' = Copaco BE |\r\n| customer_ordernumber  | X  | string | Free text field | Contains an unique purchase order number from your system |\r\n| completedelivery  | X  | string | 'Y'/'N' | 'Y' = Complete delivery, 'N' = Partial delivery allowed |\r\n| requested_deliverydate  |  | string | 'DD-MM-YYYY' | Date you would like the order to be delivered |\r\n| recipientsreference  |  | string | Free text field | Reference for the goods receiver |\r\n\r\n\r\n### Attach lines to an existing order\r\n\r\nYou can attach lines to an existing order.\r\n\r\n```python\r\norder.addOrderLine(item_id, tag, quantity, price=None, currency=None, deliverydate=None, textqualifier=None, text=None)\r\n```\r\n\r\n| Param  | Required? | Type | Format | Remarks\r\n| ------------- | ------------- |-------------|-------------|-------------|\r\n| item_id  | X  | string | Free text field | Contains the part number |\r\n| tag  | X  | string | 'PN'/'MF'/'CU' | 'PN' = Supplier part number, 'MF' = Manufacturer part number, 'CU' = Customer part number |\r\n| quantity  | X  | integer | integer | Only full numbers allowed |\r\n| price  |  | float | float | Must match with the price in ERP system or within agreed margins |\r\n| currency  |  | string | 'EUR' | At this moment only 'EUR' is allowed, might be extended later |\r\n| deliverydate  |  | string | 'DD-MM-YYYY' | Date you would like the line to be delivered. Overrules delivery date on the order. |\r\n| textqualifier  |  | string | '0001'/'BID' | '0001' = Instruction line, 'BID' = Line contains special BID |\r\n| text  |  | string | Free text field | If qualifier '0001' = Free text field, If qualifier 'BID' = Special BID number |\r\n\r\n\r\n### Set shipping address\r\n\r\nYou can set the shipping address of an order if you would like to ship to another address that is not your default.\r\nIf no shipping address is supplied, your default address will be used.\r\n\r\n```python\r\norder.setShippingAdress(firstname, lastname, street, postalcode, city, country)\r\n```\r\n\r\nCountry has to be the country code.\r\n\r\n### Send order to Copaco\r\n\r\nOnce the full order has been created, you can send the order to Copaco for processing.\r\n\r\n```python\r\norders = CopacoOrders(CUSTOMER_ID, SENDER_ID)\r\norder = orders.create(external_document_id, supplier, customer_ordernumber, completedelivery)\r\norders.sendToCopaco(order)\r\n```\r\n\r\n### Sample script\r\n\r\nYou can find a sample script at examples/create-order.py\r\n\r\n\r\n## Order responses\r\n\r\n### Limitations\r\n\r\nNot all fields are supported at this moment. List of unsupported fields is not available at this moment.\r\n\r\n### Import\r\n\r\nImport the package and the CopacoOrders object.\r\n\r\n```python\r\nfrom copaco.orders import CopacoOrders\r\n```\r\n\r\n### Setup connection\r\n\r\nMake the connection with your Customer ID and provided Sender ID for orders.\r\n\r\n```python\r\norders = CopacoOrders(CUSTOMER_ID, SENDER_ID)\r\n```\r\n\r\n### Retrieve responses\r\n\r\nCopaco has four different responses.\r\n\r\n| Response type  | Contains | \r\n| ------------- | ------------- |\r\n| INT  | Initial response. Indicates that the order is received. |\r\n| OBV  | Order confirmation. Contains information on how the order is processed. |\r\n| FAC  | Invoice in XML format. |\r\n| PAK  |  Dispatch advice response. Generated after the goods are picked and ready for shipment. |\r\n\r\nYou can retrieve these responses seperately or all at once.\r\n\r\n```python\r\norders = CopacoOrders(CUSTOMER_ID, SENDER_ID)\r\nintResponses = orders.getResponses(type='INT')\r\nobvResponses = orders.getResponses(type='OBV')\r\npakResponses = orders.getResponses(type='PAK')\r\nfacResponses = orders.getResponses(type='FAC')\r\nallResponses = orders.getResponses(type='ALL')\r\n```\r\n\r\nRequesting a specific type will return an array that contains objects of the XML returned.\r\nRequesting all types will return a dictionary with the following format: \r\n\r\n```python\r\n{\r\n  'INT' : [intResponses], \r\n  'OBV' : [obvResponses],\r\n  'FAC' : [facResponses],\r\n  'PAK' : [pakResponses]\r\n}\r\n```\r\n\r\n### Structure\r\n\r\nThe structure of these responses are the same as the XML that is returned, and thus is defined by Copaco.\r\nBe aware that there are a lot of inconsistencies in the XML format: camelCase, snake_case, PascalCase are all used.\r\n\r\nRefer to the XML documentation to know the structure.\r\n\r\n### Sample script\r\n\r\nYou can find example responses for each type at examples/xml-responses\r\n\r\nYou can find a sample script for each response at examples/get-response-XXX.py where XXX is the type.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/alexanderlhsglobal/python-copaco-connections/archive/refs/tags/1.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexanderlhsglobal/python-copaco-connections",
    "keywords": "copaco,api,customer connections",
    "license": "GPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-copaco-connections",
    "package_url": "https://pypi.org/project/python-copaco-connections/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-copaco-connections/",
    "project_urls": {
      "Download": "https://github.com/alexanderlhsglobal/python-copaco-connections/archive/refs/tags/1.0.1.tar.gz",
      "Homepage": "https://github.com/alexanderlhsglobal/python-copaco-connections"
    },
    "release_url": "https://pypi.org/project/python-copaco-connections/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easy python integrations for the Copaco Customer Connections",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11601803,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e5f4d66d6ae473a25a0579e9a56b782af5749350fd0d89ae09c5bbe87f2a545",
          "md5": "fb17267196a921a20b1f5d5fedb7e2e2",
          "sha256": "9d5315a16cdc89d6617ed085b6196f12a1a69caa6926812970dce09299055873"
        },
        "downloads": -1,
        "filename": "python-copaco-connections-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb17267196a921a20b1f5d5fedb7e2e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18133,
        "upload_time": "2021-08-31T15:11:55",
        "upload_time_iso_8601": "2021-08-31T15:11:55.556293Z",
        "url": "https://files.pythonhosted.org/packages/9e/5f/4d66d6ae473a25a0579e9a56b782af5749350fd0d89ae09c5bbe87f2a545/python-copaco-connections-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "503d15069625fd26fd07937ce472a987b8b57d704369c2d858b9066d5bcde200",
          "md5": "a2a969e53581f607045be668f0740c82",
          "sha256": "2aa979e5ae692573e6f8905adf8e1397d2b64459c851c14943b322d01ebbae21"
        },
        "downloads": -1,
        "filename": "python-copaco-connections-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a2a969e53581f607045be668f0740c82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18197,
        "upload_time": "2021-08-31T16:27:06",
        "upload_time_iso_8601": "2021-08-31T16:27:06.458202Z",
        "url": "https://files.pythonhosted.org/packages/50/3d/15069625fd26fd07937ce472a987b8b57d704369c2d858b9066d5bcde200/python-copaco-connections-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96e23d6a2f2ad01918edc9649a664360f4dcb9c705a466d5fb3e930b4a633d64",
          "md5": "97956a92f6536baf6250bc83614aacf8",
          "sha256": "8ffcc3cbaef571f378d7cb43a3f50f1aebf52a335f124beb420c6f1b6ba79bd0"
        },
        "downloads": -1,
        "filename": "python-copaco-connections-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97956a92f6536baf6250bc83614aacf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27939,
        "upload_time": "2021-09-28T14:40:04",
        "upload_time_iso_8601": "2021-09-28T14:40:04.383338Z",
        "url": "https://files.pythonhosted.org/packages/96/e2/3d6a2f2ad01918edc9649a664360f4dcb9c705a466d5fb3e930b4a633d64/python-copaco-connections-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09d5de7656b9a8af76e0a8de456b52242737583f177adb910133624f6c2111ce",
          "md5": "9e492616f807ec6e8177c5035859c068",
          "sha256": "b4bad20658b9667d8eb82b2e1d5442d0c67d374a43c2ce47058b35b29a7dbec4"
        },
        "downloads": -1,
        "filename": "python-copaco-connections-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e492616f807ec6e8177c5035859c068",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27966,
        "upload_time": "2021-10-01T09:24:01",
        "upload_time_iso_8601": "2021-10-01T09:24:01.911058Z",
        "url": "https://files.pythonhosted.org/packages/09/d5/de7656b9a8af76e0a8de456b52242737583f177adb910133624f6c2111ce/python-copaco-connections-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09d5de7656b9a8af76e0a8de456b52242737583f177adb910133624f6c2111ce",
        "md5": "9e492616f807ec6e8177c5035859c068",
        "sha256": "b4bad20658b9667d8eb82b2e1d5442d0c67d374a43c2ce47058b35b29a7dbec4"
      },
      "downloads": -1,
      "filename": "python-copaco-connections-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9e492616f807ec6e8177c5035859c068",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27966,
      "upload_time": "2021-10-01T09:24:01",
      "upload_time_iso_8601": "2021-10-01T09:24:01.911058Z",
      "url": "https://files.pythonhosted.org/packages/09/d5/de7656b9a8af76e0a8de456b52242737583f177adb910133624f6c2111ce/python-copaco-connections-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}