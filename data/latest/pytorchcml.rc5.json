{
  "info": {
    "author": "hand10ryo",
    "author_email": "hand10ryo@yahoo.co.jp",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PyTorchCML\n\n![https://github.com/hand10ryo/PyTorchCML/blob/image/images/icon.png](https://github.com/hand10ryo/PyTorchCML/blob/image/images/icon.png)\n\nPyTorchCML is a library of PyTorch implementations of matrix factorization (MF) and collaborative metric learning (CML), algorithms used in recommendation systems and data mining.\n\n日本語版READMEは[こちら](https://github.com/hand10ryo/PyTorchCML/blob/main/README_ja.md)\n\n# What is CML ?\n\nCML is an algorithm that combines metric learning and MF. It allows us to embed elements of two sets, such as user-item or document-word, into a joint distance metric space using their relational data.\n\nIn particular, CML is known to capture user-user and item-item relationships more precisely than MF and can achieve higher accuracy and interpretability than MF for recommendation systems [1]. In addition, the embeddings can be used for secondary purposes such as friend recommendations on SNS and similar item recommendations on e-commerce sites.\n\nFor more details, please refer to this reference [1].\n\n# Installation\n\nYou can install PyTorchCML using Python's package manager pip.\n\n```bash\npip install PyTorchCML\n```\n\nYou can also download the source code directly and build your environment with poetry.。\n\n```bash\ngit clone https://github.com/hand10ryo/PyTorchCML\npoetory install \n```\n\n## dependencies\n\nThe dependencies are as follows\n\n- python = \">=3.7.10,<3.9\"\n- torch = \"^1.8.1\"\n- scikit-learn = \"^0.22.2\"\n- scipy = \"^1.4.1\"\n- numpy = \"^1.19.5\"\n- pandas = \"^1.1.5\"\n- tqdm = \"^4.41.1\"\n\n# Usage\n\n## Example\n\n[This](https://github.com/hand10ryo/PytorchCML/tree/main/examples/notebooks) is a jupyter notebook example using the Movielens 100k dataset.\n\n## Overview\n\nThis library consists of the following six modules.\n\n- trainers\n- models\n- samplers\n- losses\n- regularizers\n- evaluators\n\nBy combining these modules, you can implement a variety of algorithms.\n\nThe following figure shows the relationship between these modules.\n\n![https://github.com/hand10ryo/PyTorchCML/blob/image/images/diagram.png](https://github.com/hand10ryo/PyTorchCML/blob/image/images/diagram.png)\n\nThe most straightforward implementation is as follows.\n\n```python\nimport torch\nfrom torch import optim\nimport numpy as np\nfrom PyTorchCML import losses, models, samplers, trainers\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n# train dataset (whose columns are [user_id, item_id].)\ntrain_set = np.array([[0, 0], [0, 1], [1, 2], [1, 3]]) \ntrain_set_torch = torch.LongTensor(train_set).to(device)\nn_user = train_set[:,0].max() + 1\nn_item = train_set[:,1].max() + 1\n\n# model settings\nmodel = models.CollaborativeMetricLearning(n_user, n_item, n_dim=10).to(device)\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\ncriterion = losses.MinTripletLoss(margin=1).to(device)\nsampler = samplers.BaseSampler(train_set_torch, n_user, n_item, device=device)\ntrainer = trainers.BaseTrainer(model, optimizer, criterion, sampler)\n\n# run \ntrainer.fit(n_batch=256, n_epoch=3)\n```\n\nThe input `train_set` represents a two-column NumPy array whose records are the user IDs and item IDs that received positive feedback. \n\nThe `n_user` and `n_item` are the number of users and items. Here, we assume that user ID and item ID start from 0 and that all users and items are included in the train_set.\n\nThen, define model, optimizer, criterion, and sampler, input them to a trainer and run the trainer's fit method to start learning CM\n\n## models\n\nThe models is the module that handles the embeddings.\n\nThere are currently two models to choose from as follows.\n\n- models.CollaborativeMetricLearning\n- models.LogitMatrixFactorization\n\nYou can predict the relationship between the target user and the item with the `predict` method.\n\nCML uses vector distance, while MF uses the inner product to represent the relationship.\n\nYou can also set the maximum norm and initial value of the embeddings.\n\nFor example, in `LogitMatrixFactorization`, this is how it works.\n\n```python\nmodel = models.LogitMatrixFactorization(\n    n_user, n_item, n_dim, max_norm=5,\n    user_embedding_init = torch.Tensor(U),   # shape = (n_user, n_dim)\n    item_embedding_init = torch.Tensor(V.T), # shape = (n_dim, n_item)\n).to(device)\n```\n\n## losses\n\nThe losses module is for handling the loss function for learning embeddings.\nWe can mainly divide the loss function into PairwiseLoss and TripletLoss.\n\nPairwiseLoss is the loss for each user-item pair <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;(u,i)\" title=\"(u, i)\" />.\n\nTripletLoss is the loss per <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;(u,i_+,i_-)\" title=\"(u,i_+,i_-)\" />.\nHere, <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;(u,i_+)\" title=\"(u,i_+)\" /> is a positive pair, and <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;(u,i_-)\" title=\"(u,i_-)\" /> is a negative pair.\n\nIn general, CML uses triplet loss, and MF uses pairwise loss.\n\n## samplers\n\nThe samplers is a module that handles the sampling of mini-batches during training.\n\nThere are two types of sampling done by the sampler.\n\n- Sampling of positive user-item pairs <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;(u,i_+)\" title=\"(u,i_+)\" />\n- Sampling of negative items <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;i_-\" title=\"i_-\" />\n\nThe default setting is to sample both with a uniform random probability.\n\nIt is also possible to weigh both positively and negatively.\n\nFor example, if you want to weigh the items by their popularity, you can follow.\n\n```python\nitem_ids, item_popularity = np.unique(train_set[:,1], return_counts=True)\nsampler = samplers.BaseSampler(\n    train_set_torch, neg_weight = item_popularity,\n    n_user, n_item, device=device\n)\n```\n\n## trainers\n\nThe trainers is the module that handles training.\n\nYou can train by setting up a model, optimizer, loss function, and sampler.\n\n## evaluators\n\nThe evaluators is a module for evaluating performance after learning.\n\nYou can evaluate your model as follows.\n\n```python\nfrom PyTorchCML import evaluators\n\n# test set (whose columns are [user_id, item_id, rating].)\ntest_set = np.array([[0, 2, 3], [0, 3, 4], [1, 0, 2], [1, 1, 5]])\ntest_set_torch = torch.LongTensor(test_set).to(device)\n\n# define metrics and evaluator\nscore_function_dict = {\n    \"nDCG\" : evaluators.ndcg,\n    \"MAP\" : evaluators.average_precision,\n    \"Recall\": evaluators.recall\n}\nevaluator = evaluators.UserwiseEvaluator(\n    test_set_torch, \n    score_function_dict, \n    ks=[3,5]\n)\n\n# calc scores\nscores = evaluator.score(model)\n```\n\nThe `test_set` is a three-column NumPy array with user ID, item ID, and rating records.\n\nThe `score_function_dict` is a dictionary of evaluation metrics. Its key is a name, and its value is a function to compute the evaluation metric. The evaluators module implements nDCG@k, MAP@k, and Recall@k as its functions. In this example, those three are set, but you can set any number of evaluation indicators.\n\nThe `evaluator` takes input test data, evaluation metrics, and a list with @k types. \n\nYou can calculate the scores by running the method `.score()` with the model as input.  Its output `scores` will be a single row pandas.DataFrame with each score. In this example, its columns are `[\"nDCG@3\", \"MAP@3\", \"Recall@3\", \"nDCG@5\", \"MAP@5\", \"Recall@5\"]`.\n\nAlso, inputting the evaluator to the `valid_evaluator` argument of the fit method of the trainer will allow you to evaluate the learning progress.\nThis system is helpful for hyperparameter tuning.\n\n```python\nvalid_evaluator = evaluators.UserwiseEvaluator(\n    test_set_torch, # eval set\n    score_function_dict, \n    ks=[3,5]\n)\ntrainer.fit(n_batch=50, n_epoch=15, valid_evaluator = valid_evaluator)\n```\n\n## regularizers\n\nThe regularizers is a module that handles the regularization terms of embedded vectors.\n\nYou can implement the L2 norm, etc., by entering a list of regularizer instances as the argument of the loss function, as shown below.\n\n```python\nfrom PyTorchCML import regularizers\nregs = [regularizers.L2Regularizer(weight=1e-2)]\ncriterion = losses.MinTripletLoss(margin=1, regularizers=regs).to(device)\n```\n\nIt is also possible to introduce multiple regularizations by increasing the length of the list.\n\n## adaptors\n\nThe adaptors is a module for realizing domain adaptation.\n\nDomain adaptation in CML is achieved by adding <img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\bg_black&space;L(v_i,&space;\\theta)&space;=&space;\\|f(x_i;\\theta)-v_i\\|^2\" title=\"L(v_i, \\theta) = \\|f(x_i;\\theta)-v_i\\|^2\" /> to the loss for feature <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;x_i\" title=\"x_i\" /> of item  <img src=\"https://latex.codecogs.com/gif.latex?\\bg_black&space;i\" title=\"i\" /> . The same is true for the user. This allows us to reflect attribute information in the embedding vector.\n\nMLPAdaptor is a class of adaptors that assumes a multilayer perceptron in function <img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\bg_black&space;f(x_i;\\theta)\" title=\"f(x_i;\\theta)\" />.\n\nYou can set up the adaptor as shown in the code below\n\n```python\nfrom PyTorchCML import adaptors\n\n# item_feature.shape = (n_item, n_feature)\nitem_feature_torch = torch.Tensor(item_feature)\nadaptor = adaptors.MLPAdaptor(\n    item_feature_torch, \n    n_dim=10, \n    n_hidden=[20], \n    weight=1e-4\n)\n\nmodel = models.CollaborativeMetricLearning(\n    n_user, n_item, n_dim, \n    item_adaptor=adaptor\n).to(device)\n```\n\n# Development\n\n```bash\npip install poetry\npip install poetry-dynamic-versioning\n\npoetry install\npoetry build\npoetry lock\n```\n\n# Citation\n\nYou may use PyTorchCML under MIT License. If you use this program in your research then please cite:\n\n```jsx\n@misc{matsui2021pytorchcml,\n  author = {Ryo, Matsui},\n  title = {PyTorchCML},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {https://github.com/hand10ryo/PyTorchCML}\n}\n```\n\n# References\n\n[1] Cheng-Kang Hsieh, Longqi Yang, Yin Cui, Tsung-Yi Lin, Serge Belongie, and Deborah Estrin.Collaborative metric learning. InProceedings of the 26th International Conference on World WideWeb, pp. 193–201, 2017.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hand10ryo/PyTorchCML",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytorchcml",
    "package_url": "https://pypi.org/project/pytorchcml/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytorchcml/",
    "project_urls": {
      "Homepage": "https://github.com/hand10ryo/PyTorchCML",
      "Repository": "https://github.com/hand10ryo/PyTorchCML"
    },
    "release_url": "https://pypi.org/project/pytorchcml/0.3.1/",
    "requires_dist": [
      "torch (>=1.8.1,<2.0.0)",
      "scikit-learn (>=0.22.2,<0.23.0)",
      "scipy (>=1.4.1,<2.0.0)",
      "numpy (>=1.19.5,<2.0.0)",
      "pandas (>=1.1.5,<2.0.0)",
      "tqdm (>=4.41.1,<5.0.0)"
    ],
    "requires_python": ">=3.7.10,<3.10",
    "summary": "Collaborative Metric Learning implemented by PyTorch",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12951320,
  "releases": {
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7606e8ba5cc6902163c7f7c40f80f0b28e8cd58a1fed40719357cd9d2234f4a1",
          "md5": "113610b2a72e03d05cea2261f5fa34e9",
          "sha256": "e3c92eaa53b6ae2aa4d8157e1932351247cf97098ad4a2144afd90a26769717f"
        },
        "downloads": -1,
        "filename": "PytorchCML-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "113610b2a72e03d05cea2261f5fa34e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10,<3.10",
        "size": 22183,
        "upload_time": "2021-08-25T13:12:05",
        "upload_time_iso_8601": "2021-08-25T13:12:05.731537Z",
        "url": "https://files.pythonhosted.org/packages/76/06/e8ba5cc6902163c7f7c40f80f0b28e8cd58a1fed40719357cd9d2234f4a1/PytorchCML-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b29b7d540350ee949fa9dd8f4a65cc5b59c4566c25b663fb1a8fe408d4a80e5a",
          "md5": "7702c5171616e10d0a48096e59f06535",
          "sha256": "c8d05c0f7366794b9674caca6882987e04878d20a5c3372468f5ed67877523d6"
        },
        "downloads": -1,
        "filename": "PytorchCML-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7702c5171616e10d0a48096e59f06535",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10,<3.10",
        "size": 10700,
        "upload_time": "2021-08-25T13:12:07",
        "upload_time_iso_8601": "2021-08-25T13:12:07.938781Z",
        "url": "https://files.pythonhosted.org/packages/b2/9b/7d540350ee949fa9dd8f4a65cc5b59c4566c25b663fb1a8fe408d4a80e5a/PytorchCML-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c59e0cfec9844d43ba2c29b75ddb17fc4d9ded1ae81793ac302af7fa89d8168f",
          "md5": "c572001b51b6a3213e09ab8ecad0b603",
          "sha256": "9859ce70983449829ab352c182caee18440cf83ca05d90a0acc2eb0da9b2ce98"
        },
        "downloads": -1,
        "filename": "PytorchCML-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c572001b51b6a3213e09ab8ecad0b603",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10,<3.10",
        "size": 22186,
        "upload_time": "2021-08-30T16:59:09",
        "upload_time_iso_8601": "2021-08-30T16:59:09.125327Z",
        "url": "https://files.pythonhosted.org/packages/c5/9e/0cfec9844d43ba2c29b75ddb17fc4d9ded1ae81793ac302af7fa89d8168f/PytorchCML-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4c99e7219a8f7075b030ebe593971777ea93cb7ffdcecbed55a17746ecd9e89",
          "md5": "ef3f0cd0c8c8aaba9c0bbfc8eea5b748",
          "sha256": "624567be3ae16ce4c4a4540395674ad34578856ffcad0ca580bd98faf4b7a32d"
        },
        "downloads": -1,
        "filename": "PytorchCML-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ef3f0cd0c8c8aaba9c0bbfc8eea5b748",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10,<3.10",
        "size": 10698,
        "upload_time": "2021-08-30T16:59:11",
        "upload_time_iso_8601": "2021-08-30T16:59:11.035287Z",
        "url": "https://files.pythonhosted.org/packages/b4/c9/9e7219a8f7075b030ebe593971777ea93cb7ffdcecbed55a17746ecd9e89/PytorchCML-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca53bd400ff00563e1ba0617f02e923f03fc7428547bc676409b313658cda26f",
          "md5": "cb41c47eb95d6e443f7442f4e53c751e",
          "sha256": "6de879f6921738b64870db07309d40a932eda3ffbfddf02fe4936e425669452a"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb41c47eb95d6e443f7442f4e53c751e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10,<3.10",
        "size": 22188,
        "upload_time": "2021-09-01T09:15:11",
        "upload_time_iso_8601": "2021-09-01T09:15:11.344177Z",
        "url": "https://files.pythonhosted.org/packages/ca/53/bd400ff00563e1ba0617f02e923f03fc7428547bc676409b313658cda26f/PyTorchCML-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8e334cc9c2ffc1c89d5a2de3d9c4f8580dcfca81897907e69119918732c8e62",
          "md5": "1e242274a7f93500ae1a405e7eae870c",
          "sha256": "fa096450f2a904832e6ec4db66da7c09f4231aa91b31124d37af09789898f33a"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1e242274a7f93500ae1a405e7eae870c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10,<3.10",
        "size": 10718,
        "upload_time": "2021-09-01T09:15:12",
        "upload_time_iso_8601": "2021-09-01T09:15:12.747054Z",
        "url": "https://files.pythonhosted.org/packages/c8/e3/34cc9c2ffc1c89d5a2de3d9c4f8580dcfca81897907e69119918732c8e62/PyTorchCML-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceda6bc7f78fb85b72fc769c3fb6baecf21660b2747cb0f3f6f2169d429cd5e4",
          "md5": "53a7eb21e8ed09e71abe897dc272f58b",
          "sha256": "42f65ef22cc95f851f511962046df0bcca4a821e2cf34b56df385924bc09d86a"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53a7eb21e8ed09e71abe897dc272f58b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10,<3.10",
        "size": 26213,
        "upload_time": "2021-09-01T13:57:24",
        "upload_time_iso_8601": "2021-09-01T13:57:24.989485Z",
        "url": "https://files.pythonhosted.org/packages/ce/da/6bc7f78fb85b72fc769c3fb6baecf21660b2747cb0f3f6f2169d429cd5e4/PyTorchCML-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e904d87e4af323e5c4c84a964032f109fba55c6bd749883f6871a1602a1907c5",
          "md5": "913b5417fef9afbf12a2dd922dd99f76",
          "sha256": "53662474403c38323508a8fa1d471b9b7bf4cceb29647fefcad94e0831e0f5b0"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "913b5417fef9afbf12a2dd922dd99f76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10,<3.10",
        "size": 15332,
        "upload_time": "2021-09-01T13:57:26",
        "upload_time_iso_8601": "2021-09-01T13:57:26.192605Z",
        "url": "https://files.pythonhosted.org/packages/e9/04/d87e4af323e5c4c84a964032f109fba55c6bd749883f6871a1602a1907c5/PyTorchCML-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f31f06413ed0b7942d3ca43b896341501146068f00ee7aced8d927cd22c9187",
          "md5": "95f5b967e1e38c0b4d7e381366a9a489",
          "sha256": "20add9ec1bbfcbfe7189850816da71a917e35f412dcd81d2e01c0c0186ef51b2"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95f5b967e1e38c0b4d7e381366a9a489",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10,<3.10",
        "size": 26376,
        "upload_time": "2022-02-20T14:39:32",
        "upload_time_iso_8601": "2022-02-20T14:39:32.749746Z",
        "url": "https://files.pythonhosted.org/packages/6f/31/f06413ed0b7942d3ca43b896341501146068f00ee7aced8d927cd22c9187/PyTorchCML-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "804b78c7ea2ee40053a1f0601575d6b2c654477760a39b8f716a28cd7c33fdfb",
          "md5": "8b22ad7658c076a97b6b17e883c8ff83",
          "sha256": "d7eef77936b15889b2858b81d4af41265ca2b8b01726e536d4d5e5de48918693"
        },
        "downloads": -1,
        "filename": "PyTorchCML-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8b22ad7658c076a97b6b17e883c8ff83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10,<3.10",
        "size": 16463,
        "upload_time": "2022-02-20T14:39:34",
        "upload_time_iso_8601": "2022-02-20T14:39:34.834907Z",
        "url": "https://files.pythonhosted.org/packages/80/4b/78c7ea2ee40053a1f0601575d6b2c654477760a39b8f716a28cd7c33fdfb/PyTorchCML-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f31f06413ed0b7942d3ca43b896341501146068f00ee7aced8d927cd22c9187",
        "md5": "95f5b967e1e38c0b4d7e381366a9a489",
        "sha256": "20add9ec1bbfcbfe7189850816da71a917e35f412dcd81d2e01c0c0186ef51b2"
      },
      "downloads": -1,
      "filename": "PyTorchCML-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95f5b967e1e38c0b4d7e381366a9a489",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.10,<3.10",
      "size": 26376,
      "upload_time": "2022-02-20T14:39:32",
      "upload_time_iso_8601": "2022-02-20T14:39:32.749746Z",
      "url": "https://files.pythonhosted.org/packages/6f/31/f06413ed0b7942d3ca43b896341501146068f00ee7aced8d927cd22c9187/PyTorchCML-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "804b78c7ea2ee40053a1f0601575d6b2c654477760a39b8f716a28cd7c33fdfb",
        "md5": "8b22ad7658c076a97b6b17e883c8ff83",
        "sha256": "d7eef77936b15889b2858b81d4af41265ca2b8b01726e536d4d5e5de48918693"
      },
      "downloads": -1,
      "filename": "PyTorchCML-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8b22ad7658c076a97b6b17e883c8ff83",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.10,<3.10",
      "size": 16463,
      "upload_time": "2022-02-20T14:39:34",
      "upload_time_iso_8601": "2022-02-20T14:39:34.834907Z",
      "url": "https://files.pythonhosted.org/packages/80/4b/78c7ea2ee40053a1f0601575d6b2c654477760a39b8f716a28cd7c33fdfb/PyTorchCML-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}