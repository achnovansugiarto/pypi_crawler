{
  "info": {
    "author": "m-jishnu",
    "author_email": "<jishnum499@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pypdl\r\n\r\npypdl is a Python library for downloading files from the internet. It provides features such as multi-threaded downloads, retry download incase of failure and option to continue downloading using a different url if necessary, progress tracking, pause/resume functionality and many more.\r\n\r\n## Installation\r\n\r\nTo install the pypdl, run the following command:\r\n\r\n```\r\npip install pypdl\r\n```\r\n\r\n## Usage\r\n\r\n### Basic Usage\r\n\r\nTo download a file using the pypdl, simply create a new `Downloader` object and call its `start` method, passing in the URL of the file to be downloaded and the path where it should be saved:\r\n\r\n```python\r\nfrom pypdl import Downloader\r\n\r\ndl = Downloader()\r\ndl.start('http://example.com/file.txt', 'file.txt')\r\n```\r\n\r\n### Advanced Usage\r\n\r\nThe `Downloader` object provides additional options for advanced usage:\r\n\r\n```python\r\ndl.start(\r\n    url='http://example.com/file.txt',  # URL of the file to download\r\n    filepath='file.txt',  # path to save the downloaded file\r\n    num_connections=10,  # number of connections to use for a multi-threaded download\r\n    display=True,  # whether to display download progress\r\n    multithread=True,  # whether to use multi-threaded download\r\n    block=True,  # whether to block until the download is complete\r\n    retries=0,  # number of times to retry the download in case of an error\r\n    retry_func=None,  # function to call to get a new download URL in case of an error\r\n)\r\n```\r\n\r\nThe `num_connections` option specifies the number of threads to use for a multi-threaded download. The default value is 10.\r\n\r\nThe `display` option specifies whether to display download progress. The default value is `True`.\r\n\r\nThe `multithread` option specifies whether to use multi-threaded download. The default value is `True`.\r\n\r\nThe `block` option specifies whether to block until the download is complete. The default value is `True`.\r\n\r\nThe `retries` option specifies the number of times to retry the download in case of an error. The default value is 0.\r\n\r\nThe `retry_func` option specifies a function to call to get a new download URL in case of an error.\r\n\r\n### Example\r\n\r\nHere is an example that demonstrates how to use pypdl library to download a file from the internet:\r\n\r\n```python\r\nfrom pypdl import Downloader\r\n\r\ndef main():\r\n    # create a new downloader object\r\n    dl = Downloader()\r\n\r\n    # start the download\r\n    dl.start(\r\n        url='https://speed.hetzner.de/100MB.bin',\r\n        filepath='100MB.bin',\r\n        num_connections=10,\r\n        display=True,\r\n        multithread=True,\r\n        block=True,\r\n        retries=3,\r\n        retry_func=None,\r\n    )\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\nThis example downloads a large file from the internet using 10 threads and displays the download progress. If the download fails, it will retry up to 3 times.\r\n\r\nAnother example of using a custom stop event and printing the progress to console:\r\n\r\n```python\r\nfrom pypdl import Downloader\r\nfrom threading import Event\r\n\r\n# create a custom stop event\r\nstop = Event()\r\n\r\n# create a downloader object\r\ndl = Downloader(stop)\r\n\r\n# start the download process\r\n# block=False so we can print the progress\r\n# display=False so we can print the progress ourselves\r\ndl.start('https://example.com/file.zip', 'file.zip', num_connections=8,block=False,display=False)\r\n\r\n# print the progress\r\nwhile d.progress != 70:\r\n  print(d.progress)\r\n\r\n# stop the download process\r\nstop.set() # can also be done by calling d.stop()\r\n\r\n#do something\r\n#...\r\n\r\n# resume the download process\r\ndl.start('https://example.com/file.zip', 'file.zip', num_connections=8,block=False,display=False)\r\n\r\n# print rest of the progress\r\nwhile d.progress != 100:\r\n  print(d.progress)\r\n\r\n```\r\nThis example we create a custom **stop event** and pass it to the **Downloader** object. We then start the download process and print the progress to console. We then stop the download process and do something else. After that we resume the download process and print the rest of the progress to console. This can be used to create a pause/resume functionality.\r\n\r\n## API Reference\r\n\r\n### `Downloader()`\r\n\r\nThe `Downloader` class represents a file downloader that can download a file from a given URL to a specified file path. The class supports both single-threaded and multi-threaded downloads and many other features like retry download incase of failure and option to continue downloading using a different url if necessary, pause/resume functionality, progress tracking etc.\r\n\r\n#### Parameters\r\n* `StopEvent`: An optional parameter to set custom a stop event.\r\n\r\n#### Attributes\r\n\r\n* `totalMB`: The total size of the file to be downloaded, in MB.\r\n* `progress`: The download progress percentage.\r\n* `speed`: The download speed, in MB/s.\r\n* `download_mode`: The download mode: single-threaded or multi-threaded.\r\n* `time_spent`: The time spent downloading, in seconds.\r\n* `doneMB`: The amount of data downloaded so far, in MB.\r\n* `eta`: The estimated time remaining for download completion, in the format \"HH:MM:SS\".\r\n* `remaining`: The amount of data remaining to be downloaded, in MB.\r\n* `Stop`: An event that can be used to stop the download process.\r\n* `Failed`: A flag that indicates if the download failed.\r\n\r\n#### Methods\r\n\r\n* `start(url, filepath, num_connections=10, display=True, multithread=True, block=True, retries=0, retry_func=None)`: Starts the download process. Parameters:\r\n  * `url` (str): The download URL.\r\n  * `filepath` (str): The file path to save the download.\r\n  * `num_connections` (int): The number of connections to use for a multi-threaded download.\r\n  * `display` (bool): Whether to display download progress.\r\n  * `multithread` (bool): Whether to use multi-threaded download.\r\n  * `block` (bool): Whether to block until the download is complete.\r\n  * `retries` (int): The number of times to retry the download in case of an error.\r\n  * `retry_func` (function): A function to call to get a new download URL in case of an error.\r\n* `stop()`: Stops the download process.\r\n\r\n### Helper Classes\r\n\r\n#### `Multidown()`\r\n\r\nThe `Multidown` class represents a download worker that is responsible for downloading a specific part of a file in multiple chunks.\r\n\r\n##### Parameters\r\n* `dic`: Dictionary that contains the download information.\r\n* `id`: ID of the download part.\r\n* `stop`: Stop event.\r\n* `error`: Error event.\r\n\r\n##### Attributes\r\n\r\n* `curr`: The current size of the downloaded file.\r\n* `completed`: Whether the download for this part is complete.\r\n* `id`: The ID of this download part.\r\n* `dic`: A dictionary containing download information for all parts.\r\n* `stop`: An event that can be used to stop the download process.\r\n* `error`: An event that can be used to signal an error.\r\n\r\n##### Methods\r\n\r\n* `getval(key)`: Gets the value of a key from the dictionary.\r\n* `setval(key, val)`: Sets the value of a key in the dictionary.\r\n* `worker()`: Downloads a part of the file in multiple chunks.\r\n\r\n#### `Singledown()`\r\n\r\nThe `Singledown` class represents a download worker that is responsible for downloading a whole file in a single chunk.\r\n\r\n##### Attributes\r\n\r\n* `curr`: The current size of the downloaded file.\r\n* `completed`: Whether the download is complete.\r\n\r\n##### Methods\r\n\r\n* `worker(url, path, stop, error)`: Downloads a whole file in a single chunk. Parameters:\r\n  * `url` (str): The download URL.\r\n  * `path` (str): The file path to save the download.\r\n  * `stop` (Event): An event that can be used to stop the download process.\r\n  * `error` (Event): An event that can be used to signal an error.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/m-jishnu/pypdl",
    "keywords": "python,downloader,concurrent-downloader,parrel-downloader,download manager,fast-downloader",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypdl",
    "package_url": "https://pypi.org/project/pypdl/",
    "platform": null,
    "project_url": "https://pypi.org/project/pypdl/",
    "project_urls": {
      "Homepage": "https://github.com/m-jishnu/pypdl"
    },
    "release_url": "https://pypi.org/project/pypdl/0.0.5/",
    "requires_dist": [
      "requests",
      "reprint"
    ],
    "requires_python": "",
    "summary": "A concurrent python download manager",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17462056,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10046555f240f1220b93da8f9cedaab7b08c2167025ffbbc86bc2a17af617d19",
          "md5": "64775719dc0afecec9f979bf0c0563c8",
          "sha256": "1cfe7977bc9751b0f96d38aa826c06e67e2a48e19702b1eb009fc49b0e123e9a"
        },
        "downloads": -1,
        "filename": "pypdl-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64775719dc0afecec9f979bf0c0563c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6892,
        "upload_time": "2023-03-21T10:30:51",
        "upload_time_iso_8601": "2023-03-21T10:30:51.031089Z",
        "url": "https://files.pythonhosted.org/packages/10/04/6555f240f1220b93da8f9cedaab7b08c2167025ffbbc86bc2a17af617d19/pypdl-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a69e3e2d093012e8533344900be9e39d837b79137574028d42ad3578b26802d",
          "md5": "4c14fa57e8da0019a4cb5e72c25b8990",
          "sha256": "27ea85a8d58cbdbee4bd94278abc676187c5a512c9d1dac187237502a8d17a94"
        },
        "downloads": -1,
        "filename": "pypdl-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4c14fa57e8da0019a4cb5e72c25b8990",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6162,
        "upload_time": "2023-03-21T10:30:53",
        "upload_time_iso_8601": "2023-03-21T10:30:53.595734Z",
        "url": "https://files.pythonhosted.org/packages/7a/69/e3e2d093012e8533344900be9e39d837b79137574028d42ad3578b26802d/pypdl-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa1d38a4df8f9b2ab2359b435664b547c65895c9e62aaa4066e7bded2ed9010f",
          "md5": "91bfb1c241097616bec71bdd572d116b",
          "sha256": "54fc625969c7abd921ce3b7719ee34d2f99f2333dc5ea7862ffee687cd2b74ef"
        },
        "downloads": -1,
        "filename": "pypdl-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91bfb1c241097616bec71bdd572d116b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9360,
        "upload_time": "2023-03-25T18:02:41",
        "upload_time_iso_8601": "2023-03-25T18:02:41.896843Z",
        "url": "https://files.pythonhosted.org/packages/aa/1d/38a4df8f9b2ab2359b435664b547c65895c9e62aaa4066e7bded2ed9010f/pypdl-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e6d3efca106791b6c8981348650592965226fad5e3956aeb8bf5e70d4afeaf0",
          "md5": "572ac2984a0f03fe106a068269a949d3",
          "sha256": "2d7a907c5254eb63bf174f7561e9d4b382e1c3b5bc4ace7a7aabd1028f25a336"
        },
        "downloads": -1,
        "filename": "pypdl-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "572ac2984a0f03fe106a068269a949d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10291,
        "upload_time": "2023-03-25T18:02:44",
        "upload_time_iso_8601": "2023-03-25T18:02:44.709169Z",
        "url": "https://files.pythonhosted.org/packages/8e/6d/3efca106791b6c8981348650592965226fad5e3956aeb8bf5e70d4afeaf0/pypdl-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa1d38a4df8f9b2ab2359b435664b547c65895c9e62aaa4066e7bded2ed9010f",
        "md5": "91bfb1c241097616bec71bdd572d116b",
        "sha256": "54fc625969c7abd921ce3b7719ee34d2f99f2333dc5ea7862ffee687cd2b74ef"
      },
      "downloads": -1,
      "filename": "pypdl-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91bfb1c241097616bec71bdd572d116b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9360,
      "upload_time": "2023-03-25T18:02:41",
      "upload_time_iso_8601": "2023-03-25T18:02:41.896843Z",
      "url": "https://files.pythonhosted.org/packages/aa/1d/38a4df8f9b2ab2359b435664b547c65895c9e62aaa4066e7bded2ed9010f/pypdl-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e6d3efca106791b6c8981348650592965226fad5e3956aeb8bf5e70d4afeaf0",
        "md5": "572ac2984a0f03fe106a068269a949d3",
        "sha256": "2d7a907c5254eb63bf174f7561e9d4b382e1c3b5bc4ace7a7aabd1028f25a336"
      },
      "downloads": -1,
      "filename": "pypdl-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "572ac2984a0f03fe106a068269a949d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10291,
      "upload_time": "2023-03-25T18:02:44",
      "upload_time_iso_8601": "2023-03-25T18:02:44.709169Z",
      "url": "https://files.pythonhosted.org/packages/8e/6d/3efca106791b6c8981348650592965226fad5e3956aeb8bf5e70d4afeaf0/pypdl-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}