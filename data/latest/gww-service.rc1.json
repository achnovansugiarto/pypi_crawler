{
  "info": {
    "author": "",
    "author_email": "Jaap Langemeijer <jaaplangemeijer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# Global Water Watch Service\nBackend API for synchronous operations within Global Water Watch\n\n## Testing\n```bash\ndocker-compose up\npytest\n```\n\n## Local deployment\n\nCurrently, I have 2 ways of deploying locally\n\n### Debugging\nFor debugging, it is best to debug the main.py file in python, and use `docker-compose` to get the database running:\n```docker-compose up```\n\nGet earthengine credentials:\n```make get_secrets```\n\nAnd add the following environment variables (to your launch.json in VSCode) and .env:\n```json\n{\n    \"EE_SA\": \"dagster-workloads@global-water-watch.iam.gserviceaccount.com\",\n    \"EE_PK\": \"${workspaceFolder}/gcloud_dist/privatekey.json\"\n}\n```\n\nWe can then use `psql` to create the postgis extension:\n```psql -U testuser -h localhost -d testdb```\nusing the `testpassword`.\n\nThen use (for example) VSCode to debug main.py.\n\n### Local kubernetes\n\nTo test kubernetes (later for some extra functionality like workflows), you can deploy a local cluster.\nThis is simplified in the `Makefile`. \n- Install [kind](https://kind.sigs.k8s.io/).\n- Install [kubectl](https://kubernetes.io/docs/tasks/tools/)\n- Install [helm](https://helm.sh/)\n\n```\nmake build-docker\nmake deploy-local\n```\n\nCheck out the database:\nin one terminal:\n```\nexport PGMASTER=$(kubectl get pods -o jsonpath={.items..metadata.name} -l application=spilo,cluster-name=gwwuser-gww,spilo-role=master -n gww)\nkubectl port-forward $PGMASTER 6432:5432 -n gww\n```\nin another:\n```\nexport PGPASSWORD=$(kubectl get secret -n gww gwwuser.gwwuser-gww.credentials.postgresql.acid.zalan.do -o 'jsonpath={.data.password}' | base64 -d)\nexport PGSSLMODE=require\npsql -U gwwuser -h localhost -p 6432 -d gwwdb\n```\n\nCheck out the api:\n```\nkubectl port-forward -n gww svc/gww-api 8080:80\n```\n\nAfter you are done:\n```\nkind delete clusters waterwatch\n```\n\n> Note: This is to test working with other software, for debugging, using VSCode together with\n> docker-compose and FastAPI's `--reload` option helps developing quickly.\n\n## Deploy on kubernetes\n\nThis repository contains a helm chart that deploys the API to kubernetes.\nFor example values, check out [the values file](helm/gww-api/values.yaml).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gww-service",
    "package_url": "https://pypi.org/project/gww-service/",
    "platform": null,
    "project_url": "https://pypi.org/project/gww-service/",
    "project_urls": {
      "Source": "https://github.com/global-water-watch/gww-service"
    },
    "release_url": "https://pypi.org/project/gww-service/0.2.0/",
    "requires_dist": [
      "earthengine-api>=0.1.284",
      "eepackages>=0.21",
      "GeoAlchemy2>=0.12",
      "geojson>=2.5",
      "geojson-pydantic>=0.4.3",
      "python-dateutil",
      "shapely>=1.8",
      "SQLAlchemy>=1.4",
      "black ; extra == \"test\"",
      "fastapi>=0.83 ; extra == \"test\"",
      "httpx>=0.23 ; extra == \"test\"",
      "pytest>=2.7.3 ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "uvicorn>=0.18 ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "Backend API for synchronous operations within Global Water Watch",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15916259,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67120698c0703ea826da14ebcb6ac4caf4d545b93a148771ff9a4b87de5a76ee",
          "md5": "b1857c612a73e69030e4b6a92634b294",
          "sha256": "28512799d2bab5d935891e8621d38232467b5f73b59ffbe91db298ec5918bb86"
        },
        "downloads": -1,
        "filename": "gww_service-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1857c612a73e69030e4b6a92634b294",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21958,
        "upload_time": "2022-11-28T16:21:04",
        "upload_time_iso_8601": "2022-11-28T16:21:04.523919Z",
        "url": "https://files.pythonhosted.org/packages/67/12/0698c0703ea826da14ebcb6ac4caf4d545b93a148771ff9a4b87de5a76ee/gww_service-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a82bc73c53605d7021118a5c0e4f114cf1ed7ed1fbe7ba471c0e18f5cd79f462",
          "md5": "c6ac4d07de5ee2c3f7ebe849aeef43af",
          "sha256": "a01f537d2c2bd60b7a8e6c68b0ad850e7584e6b8c2a5d58b584689ca8ededec0"
        },
        "downloads": -1,
        "filename": "gww_service-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ac4d07de5ee2c3f7ebe849aeef43af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20726,
        "upload_time": "2022-11-28T16:21:07",
        "upload_time_iso_8601": "2022-11-28T16:21:07.362767Z",
        "url": "https://files.pythonhosted.org/packages/a8/2b/c73c53605d7021118a5c0e4f114cf1ed7ed1fbe7ba471c0e18f5cd79f462/gww_service-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67120698c0703ea826da14ebcb6ac4caf4d545b93a148771ff9a4b87de5a76ee",
        "md5": "b1857c612a73e69030e4b6a92634b294",
        "sha256": "28512799d2bab5d935891e8621d38232467b5f73b59ffbe91db298ec5918bb86"
      },
      "downloads": -1,
      "filename": "gww_service-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1857c612a73e69030e4b6a92634b294",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 21958,
      "upload_time": "2022-11-28T16:21:04",
      "upload_time_iso_8601": "2022-11-28T16:21:04.523919Z",
      "url": "https://files.pythonhosted.org/packages/67/12/0698c0703ea826da14ebcb6ac4caf4d545b93a148771ff9a4b87de5a76ee/gww_service-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a82bc73c53605d7021118a5c0e4f114cf1ed7ed1fbe7ba471c0e18f5cd79f462",
        "md5": "c6ac4d07de5ee2c3f7ebe849aeef43af",
        "sha256": "a01f537d2c2bd60b7a8e6c68b0ad850e7584e6b8c2a5d58b584689ca8ededec0"
      },
      "downloads": -1,
      "filename": "gww_service-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c6ac4d07de5ee2c3f7ebe849aeef43af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 20726,
      "upload_time": "2022-11-28T16:21:07",
      "upload_time_iso_8601": "2022-11-28T16:21:07.362767Z",
      "url": "https://files.pythonhosted.org/packages/a8/2b/c73c53605d7021118a5c0e4f114cf1ed7ed1fbe7ba471c0e18f5cd79f462/gww_service-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}