{
  "info": {
    "author": "Muhamad Tohir",
    "author_email": "maztohir@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DictPath\nExtended dict for Python. \nMake easy to extract complicated nested dict.\n\n![repo-size](https://img.shields.io/github/repo-size/maztohir/dict-path)\n![license](https://img.shields.io/github/license/maztohir/dict-path)\n\n## Installation\n```bash\npip3 install dict-path\n```\n\n## Getting and setting value with path\n\n#### No more boilerplate code to extract or inject nested dict\n##### What you do previously\n```python\ntest_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\nfoo1 = test_dict['foo1']\nif foo1:\n   foo2 = foo1['foo2']\n   if foo2:\n       foo3 = foo2['foo3']\n       if foo3:\n           foo4 = foo3['foo4'] #finally, get the result: bar1\n```\n##### What you can do NOW\n```python\ntest_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\ndata = DictPath(test_dict)\ndata.get('foo1/foo2/foo3/foo4') #result: bar\n\n\n# set value with easy\ndata.set('foo1/foo2/foo3/foo5', 'bar1')\ndata.get('foo1/foo2/foo3/foo5') #result: bar1\n```\n\n#### Do not want to use new Object? no worries, we have a method that you can call directly\n\n```python\nfrom dict_path import extract_dict, inject_dict\n\ntest_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\nextract_dict(test_dict, 'foo1/foo2/foo3/foo4') #result: bar\n\ninject_dict(test_dict, 'foo1/foo2/foo3/foo5', 'bar1')}\nextract_dict(test_dict, 'foo1/foo2/foo3/foo5') #result: bar1\n```\n\n## Concept\n#### DictPath is basically a normal python dict, nothing different\n```python\n# A DictPath keeps a reference to the original initializing dict:\n\nnormal_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\ndic_path = DictPath(normal_dict)\n> normal_dict == dic_path\n---> True\n> dic_path.dict is normal_dict\n---> True\n```\n\n#### You can also get a deep copy:\n```python\njoe = DictPath(user, deepcopy=True)\n> joe == user\n---> True\n> joe.dict is user\n---> False\n```\n\n#### Invalid path will return None\n```python\nfrom dict_path import extract_dict, inject_dict\n\ntest_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\ndata = DictPath(test_dict)\ndata.get('foo1/foo2/foo3/foo4/foo6')\n#result: None\n```\n#### Set up unknown path will create an actual dict\n```python\nfrom dict_path import extract_dict, inject_dict\n\ntest_dict = {'foo1':{'foo2':{'foo3':{'foo4':'bar'}}}}\ndata = DictPath(test_dict)\ndata.set('foo1/foo2/foo3/foo5/foo6/foo7/foo8/', 'bar1')\ndata.get('foo1/foo2/foo3/foo5/foo6/foo7/foo8/')\n#result: bar1\n```\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maztohir/python-nested-dict",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dict-path",
    "package_url": "https://pypi.org/project/dict-path/",
    "platform": "",
    "project_url": "https://pypi.org/project/dict-path/",
    "project_urls": {
      "Bug Tracker": "https://github.com/maztohir/python-nested-dict/issues",
      "Homepage": "https://github.com/maztohir/python-nested-dict"
    },
    "release_url": "https://pypi.org/project/dict-path/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python library to work with complicated nested dict",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11135781,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc40e55c75a964ef1754830b81bf16b138c374bcf1801b1f4e20ea4b605f096",
          "md5": "69158f18cb92a4ab2f0f7e2f3da01df5",
          "sha256": "c56fe94bfbb01f40101c114cd8d8b885d5e61973d03ace7737a93058753e863c"
        },
        "downloads": -1,
        "filename": "dict_path-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69158f18cb92a4ab2f0f7e2f3da01df5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4428,
        "upload_time": "2021-08-10T01:37:28",
        "upload_time_iso_8601": "2021-08-10T01:37:28.319677Z",
        "url": "https://files.pythonhosted.org/packages/3b/c4/0e55c75a964ef1754830b81bf16b138c374bcf1801b1f4e20ea4b605f096/dict_path-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0721fe725bf9b0197f0ab3e0511094213487b3f73e15a43c6157101a68f9c378",
          "md5": "6d25666761648517571ba028f4ef9cb2",
          "sha256": "84e000a359e9b20d1dfffacdcdc99b35bc4f6ef6390a75195c2444c1701c5f1f"
        },
        "downloads": -1,
        "filename": "dict-path-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6d25666761648517571ba028f4ef9cb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4403,
        "upload_time": "2021-08-10T01:37:29",
        "upload_time_iso_8601": "2021-08-10T01:37:29.857841Z",
        "url": "https://files.pythonhosted.org/packages/07/21/fe725bf9b0197f0ab3e0511094213487b3f73e15a43c6157101a68f9c378/dict-path-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bc40e55c75a964ef1754830b81bf16b138c374bcf1801b1f4e20ea4b605f096",
        "md5": "69158f18cb92a4ab2f0f7e2f3da01df5",
        "sha256": "c56fe94bfbb01f40101c114cd8d8b885d5e61973d03ace7737a93058753e863c"
      },
      "downloads": -1,
      "filename": "dict_path-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "69158f18cb92a4ab2f0f7e2f3da01df5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4428,
      "upload_time": "2021-08-10T01:37:28",
      "upload_time_iso_8601": "2021-08-10T01:37:28.319677Z",
      "url": "https://files.pythonhosted.org/packages/3b/c4/0e55c75a964ef1754830b81bf16b138c374bcf1801b1f4e20ea4b605f096/dict_path-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0721fe725bf9b0197f0ab3e0511094213487b3f73e15a43c6157101a68f9c378",
        "md5": "6d25666761648517571ba028f4ef9cb2",
        "sha256": "84e000a359e9b20d1dfffacdcdc99b35bc4f6ef6390a75195c2444c1701c5f1f"
      },
      "downloads": -1,
      "filename": "dict-path-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6d25666761648517571ba028f4ef9cb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4403,
      "upload_time": "2021-08-10T01:37:29",
      "upload_time_iso_8601": "2021-08-10T01:37:29.857841Z",
      "url": "https://files.pythonhosted.org/packages/07/21/fe725bf9b0197f0ab3e0511094213487b3f73e15a43c6157101a68f9c378/dict-path-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}