{
  "info": {
    "author": "Radosław Drążkiewicz",
    "author_email": "collerek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "<p>\n<a href=\"https://pypi.org/project/sqlalchemy-to-ormar\">\n    <img src=\"https://img.shields.io/pypi/v/sqlalchemy-to-ormar.svg\" alt=\"Pypi version\">\n</a>\n<a href=\"https://pypi.org/project/sqlalchemy-to-ormar\">\n    <img src=\"https://img.shields.io/pypi/pyversions/sqlalchemy-to-ormar.svg\" alt=\"Pypi version\">\n</a>\n<img src=\"https://github.com/collerek/sqlalchemy-to-ormar/workflows/build/badge.svg\" alt=\"Build Status\">\n<a href=\"https://codeclimate.com/github/collerek/sqlalchemy-to-ormar/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/e3ce9277f8373d22afb9/maintainability\" /></a>\n<a href=\"https://codecov.io/gh/collerek/sqlalchemy-to-ormar\">\n  <img src=\"https://codecov.io/gh/collerek/sqlalchemy-to-ormar/branch/main/graph/badge.svg?token=1FPH7A4Z8P\"/>\n</a>\n<a href=\"https://codeclimate.com/github/collerek/sqlalchemy-to-ormar/test_coverage\"><img src=\"https://api.codeclimate.com/v1/badges/e3ce9277f8373d22afb9/test_coverage\" /></a>\n<a href=\"https://pepy.tech/project/sqlalchemy-to-ormar\">\n<img src=\"https://pepy.tech/badge/sqlalchemy-to-ormar\"></a>\n</p>\n\n# sqlalchemy-to-ormar\n\nA simple auto-translator from `sqlalchemy` ORM models to `ormar` models.\n\nThe `ormar` package is an async mini ORM for Python, with support for **Postgres,\nMySQL**, and **SQLite**.\n\nTo learn more about ormar:\n\n* ormar [github][github]\n* ormar [documentation][documentation]\n\n## Quickstart\n\n```python\nfrom databases import Database\nfrom sqlalchemy import (\n    Column,\n    ForeignKey,\n    Integer,\n    MetaData,\n    String,\n    create_engine,\n    DECIMAL,\n)\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Session, relationship, sessionmaker\n\nBase = declarative_base()\nDatabase_URL = \"sqlite:///test.db\"\nengine = create_engine(Database_URL, echo=True)\n\n\n# given sqlalchemy models you already have\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    fullname = Column(String)\n    nickname = Column(String)\n    salary = Column(DECIMAL)\n\n    addresses = relationship(\n        \"Address\", back_populates=\"user\", cascade=\"all, delete, delete-orphan\"\n    )\n\n\nclass Address(Base):\n    __tablename__ = \"addresses\"\n    id = Column(Integer, primary_key=True)\n    email_address = Column(String, nullable=False)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n\n\n# instantiate new Databases instance\ndatabase = Database(Database_URL)\n# note that you need new metadata instance as table names in ormar\n# will remain the same and you cannot have two tables with same name in\n# one metadata, note that we bind it to the same engine! \n# (or you can create new one with same url) \nmetadata = MetaData(engine)\n\n# use sqlalchemy-to-ormar (not normally imports should be at the top)\nfrom sqlalchemy_to_ormar import ormar_model_str_repr, sqlalchemy_to_ormar\n\n# convert sqlalchemy models to ormar\nOrmarAddress = sqlalchemy_to_ormar(Address, database=database, metadata=metadata)\nOrmarUser = sqlalchemy_to_ormar(User, database=database, metadata=metadata)\n\n# you can print the ormar model\n# or save it to file and you have proper model definition created for you\n\naddress_str = ormar_model_str_repr(OrmarAddress)\n\n# now you can print it or save to file\nprint(address_str)\n# will print:\n\n# class OrmarAddress(ormar.Model):\n# \n#     class Meta(ormar.ModelMeta):\n#         metadata=metadata\n#         database=database\n#         tablename=\"addresses\"\n# \n#     id = ormar.Integer(autoincrement=True, primary_key=True)\n#     email_address = ormar.String(max_length=255, nullable=False)\n#     user = ormar.ForeignKey(to=OrmarUser, related_name=\"addresses\", name=user_id, nullable=True)\n\n# if you want to skip column aliases if they match field names use skip_names_if_match flag\nuser_model_str = ormar_model_str_repr(OrmarUser, skip_names_if_match=True)\n\n# let's insert some sample data with sync sqlalchemy\n\nBase.metadata.create_all(engine)\nLocalSession = sessionmaker(bind=engine)\ndb: Session = LocalSession()\n\ned_user = User(name=\"ed\", fullname=\"Ed Jones\", nickname=\"edsnickname\")\naddress = Address(email_address=\"ed@example.com\")\naddress2 = Address(email_address=\"eddy@example.com\")\ned_user.addresses = [address, address2]\n\ndb.add(ed_user)\ndb.commit()\n\n# and now we can query it asynchronously with ormar\nasync def test_ormar_queries(): \n    user = await OrmarUser.objects.select_related(\"addresses\").get(name='ed')\n    assert len(user.addresses) == 2\n    assert user.nickname == 'edsnickname'\n    assert user.fullname == 'Ed Jones'\n\n    addresses = await OrmarAddress.objects.select_related('user').all(user__name='ed')\n    assert len(addresses) == 2\n    assert addresses[0].user.nickname == 'edsnickname'\n    assert addresses[1].user.nickname == 'edsnickname'\n\n# run async\nimport asyncio\nasyncio.run(test_ormar_queries())\n\n# drop db\nBase.metadata.drop_all(engine)\n```\n\n## Automap support\n\nYou can use [`sqlacodegen`](https://github.com/agronholm/sqlacodegen) to generate sqlalchemy models out of existing database \nand then use sqlalchemy-to-ormar to translate it to `ormar` models. \n\nNote that sqlalchemy has it's own automap feature, but out of experience it does not work well with complicated databases.\n\n## Supported fields\n\n`sqlalchemy-to-ormar` supports following sqlalchemy field types:\n\n* \"integer\": `ormar.Integer`,\n* \"small_integer\": `ormar.Integer`,\n* \"big_integer\": `ormar.BigInteger`,\n* \"string\": `ormar.String,`\n* \"text\": `ormar.Text,`\n* \"float\": `ormar.Float,`\n* \"decimal\": `ormar.Decimal,`\n* \"date\": `ormar.Date,`\n* \"datetime\": `ormar.DateTime,`\n* \"time\": `ormar.Time,`\n* \"boolean\": `ormar.Boolean`\n\n## Supported relations\n\nsqlalchemy-to-ormar supports both `ForeignKey` as well as `ManyToMany` relations\nalthough like `ormar` itself it will create relation field on one side of the relation only\nand other side will be auto-populated with reversed side.\n\n## Known limitations\n\nsqlalchemy to ormar right now does not support:\n\n* composite (multi-column) primary keys and foreign keys (as ormar does not support them\n  yet)\n* `cascade` options from `relationship` are ignored, only the ones declared in sqlalchemy ForeignKey (ondelete, onupdate) are extracted\n* ManyToMany fields names customization (as ormar does not support them yet)\n* ManyToMany association table has to have primary key\n* Model inheritance\n\n[documentation]: https://collerek.github.io/ormar/\n[github]: https://github.com/collerek/ormar\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/collerek/sqlalchemy-to-ormar",
    "keywords": "orm,sqlalchemy,ormar,databases,async,alembic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-to-ormar",
    "package_url": "https://pypi.org/project/sqlalchemy-to-ormar/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-to-ormar/",
    "project_urls": {
      "Homepage": "https://github.com/collerek/sqlalchemy-to-ormar"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-to-ormar/0.0.2/",
    "requires_dist": [
      "ormar",
      "sqlalchemy (<=1.3.23,>=1.3.18)"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple auto-translator from sqlalchemy ORM models to ormar models.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10370966,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99670c6a4e0aedb5adc333a5126e94eac82f3e8e882767da3d107b16c549137e",
          "md5": "442c2b2b18ce923a130e38f91bc06312",
          "sha256": "1d3121d926c7531867e95fd02d061e1b73c5e2f9dd28fae8cc2137d0907ecb90"
        },
        "downloads": -1,
        "filename": "sqlalchemy_to_ormar-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "442c2b2b18ce923a130e38f91bc06312",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8762,
        "upload_time": "2021-04-10T13:27:57",
        "upload_time_iso_8601": "2021-04-10T13:27:57.733170Z",
        "url": "https://files.pythonhosted.org/packages/99/67/0c6a4e0aedb5adc333a5126e94eac82f3e8e882767da3d107b16c549137e/sqlalchemy_to_ormar-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a8e170d720e77769bf095dc62df968fe3546d4249767a674aad94d17b48d236",
          "md5": "972364f3be8b169ac2494522890a2dc7",
          "sha256": "56904cd998397088db29f978d056c3a5a4d7b4f384dd840f999d41d81d8602d6"
        },
        "downloads": -1,
        "filename": "sqlalchemy-to-ormar-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "972364f3be8b169ac2494522890a2dc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10593,
        "upload_time": "2021-04-10T13:27:59",
        "upload_time_iso_8601": "2021-04-10T13:27:59.203762Z",
        "url": "https://files.pythonhosted.org/packages/2a/8e/170d720e77769bf095dc62df968fe3546d4249767a674aad94d17b48d236/sqlalchemy-to-ormar-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbf9ae7c22562d7ae0a4c90acd44d3e4d3e1ab684a479e027be2ecbf16ba0c74",
          "md5": "a7cd039865a577f86cedc17116bb1b7e",
          "sha256": "4a4e7bea3aaa27cb6f9794562b288e1f70ab6ec980ce6c41865f555220de3371"
        },
        "downloads": -1,
        "filename": "sqlalchemy_to_ormar-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7cd039865a577f86cedc17116bb1b7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9215,
        "upload_time": "2021-05-16T14:21:18",
        "upload_time_iso_8601": "2021-05-16T14:21:18.549521Z",
        "url": "https://files.pythonhosted.org/packages/db/f9/ae7c22562d7ae0a4c90acd44d3e4d3e1ab684a479e027be2ecbf16ba0c74/sqlalchemy_to_ormar-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abf673f7de120eae78df1be5972865deba84c270c49d3fbb55d83812af5c3298",
          "md5": "399c0da470d3223bc22364e90df2b865",
          "sha256": "2e874059189de8460493fb8038898339d8fa2ba031406768138934acf6221e36"
        },
        "downloads": -1,
        "filename": "sqlalchemy-to-ormar-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "399c0da470d3223bc22364e90df2b865",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11187,
        "upload_time": "2021-05-16T14:21:19",
        "upload_time_iso_8601": "2021-05-16T14:21:19.903143Z",
        "url": "https://files.pythonhosted.org/packages/ab/f6/73f7de120eae78df1be5972865deba84c270c49d3fbb55d83812af5c3298/sqlalchemy-to-ormar-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbf9ae7c22562d7ae0a4c90acd44d3e4d3e1ab684a479e027be2ecbf16ba0c74",
        "md5": "a7cd039865a577f86cedc17116bb1b7e",
        "sha256": "4a4e7bea3aaa27cb6f9794562b288e1f70ab6ec980ce6c41865f555220de3371"
      },
      "downloads": -1,
      "filename": "sqlalchemy_to_ormar-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7cd039865a577f86cedc17116bb1b7e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9215,
      "upload_time": "2021-05-16T14:21:18",
      "upload_time_iso_8601": "2021-05-16T14:21:18.549521Z",
      "url": "https://files.pythonhosted.org/packages/db/f9/ae7c22562d7ae0a4c90acd44d3e4d3e1ab684a479e027be2ecbf16ba0c74/sqlalchemy_to_ormar-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abf673f7de120eae78df1be5972865deba84c270c49d3fbb55d83812af5c3298",
        "md5": "399c0da470d3223bc22364e90df2b865",
        "sha256": "2e874059189de8460493fb8038898339d8fa2ba031406768138934acf6221e36"
      },
      "downloads": -1,
      "filename": "sqlalchemy-to-ormar-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "399c0da470d3223bc22364e90df2b865",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11187,
      "upload_time": "2021-05-16T14:21:19",
      "upload_time_iso_8601": "2021-05-16T14:21:19.903143Z",
      "url": "https://files.pythonhosted.org/packages/ab/f6/73f7de120eae78df1be5972865deba84c270c49d3fbb55d83812af5c3298/sqlalchemy-to-ormar-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}