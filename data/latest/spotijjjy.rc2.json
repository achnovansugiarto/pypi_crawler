{
  "info": {
    "author": "Max Tarasuik",
    "author_email": "pip_public@tarasuik.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Spotijjjy\n\nA python script to generate Spotify playlists from rest services. Currently works for Any ABC (Australian Broadcasting Corporation) radio stations and with the subreddit /r/listentothis.\n\nOriginally designed for Triple J - thus the name.  \n\n## Inputs  \n\n### ABC  \n\nAny ABC (Australian Broadcasting Corporation) radio station  \nKnown ABC stations are: jazz,dig,doublej,unearthed,country,triplej,classic  \nYou can choose what timeframe to create a playlist from, it defaults to the previous aired standard morning and afternoon sessions   \n\n### Reddit\n\nThe subreddit 'listentothis'.\nRanges can be any of day,week,month,year,all\n\n## Setup\n\n### From source\n\n```\n# Clone the repo\ngit clone git@github.com:maxtara/Spotijjjy.git\ncd Spotijjjy\n\n# Create a [virtualenv](https://virtualenv.pypa.io/en/stable/)\nvirtualenv env\nsource env/bin/activate\n\n# install requirements\npip install -r requirements.txt\n``` \n\n### From pip\n\n```\npip install spotijjjy  \n```  \n\n### Spotify Intructions\n\nTo get a Spotify client id, client secret and refresh token, follow instructions at [Spotify Web API Tutorial](https://developer.spotify.com/web-api/tutorial/)  \n\n### Oauth token store\n\nThe oauth token needs to be stored to be refreshed, there are currently two storage options, DynamoDB or a file, specified in the STORE option below.  \nIf storing the oauth token in DynamoDB, the key to store it is 'spotijjjy_token'.  \n\nIf using the DynamoDB store, boto3 is required - pip install boto3  \n\n### CLI Usage\n\n```\nusage: python -m spotijjjy.main config.json abc:station_id    playlist_id <STORE>\nusage: python -m spotijjjy.main config.json reddit:subreddit  playlist_id <STORE>\n\ne.g.: python -m spotijjjy.main config.json doublej 2jhfs98s3finafzgfse9u3 file:foo.txt [ranges]\ne.g.: python -m spotijjjy.main config.json triplej sfiujh38f9hs983fjs3fj9 dydb:tablename [ranges]\n\nOptional argument ranges differs for each input.\n\nFor abc, it is in the format - comma seperated list of from%to in iso format.\ne.g. 2020-01-01T12:00:00%2020-01-01T13:00:00,2020-02-01T12:00:00%2020-02-01T13:00:00\nturns into \n    from - 2020-01-01T12:00:00\n    to   - 2020-01-01T13:00:00 \nand from - 2020-02-01T12:00:00\n    to   - 2020-02-01T13:00:00\n\nFor reddit, it is in the format \"period,limit\" where period is one of day,week,month,year,all and limit is 1-100\"\n\n```\n\n### Deploy on Serverless (AWS Lambda) Setup\n\nRequires serverless (sls) to be installed, and aws credentials setup. More help here: https://www.serverless.com/framework/docs/getting-started/  \n```\nsls plugin install --name serverless-python-requirements\nsls deploy\n```\n\nArguments are passed in a env variables, which you can put in the serverless.yml, or a secrets.json like the yaml provided.  \n\n## Notes\n### Spotify searching\n\nI do my best to find the correct song via the spotify search api, using a variety of methods. I use Multiple API options (searching with the artist, or artists, or full text search), and from the returned search results, I try to find the exact song using fuzzy string matching. YMMV  \n\n### Deploying\n\n```\npytest -vs\npython3 setup.py sdist bdist_wheel\npython3 -m twine upload dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maxtara/Spotijjjy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spotijjjy",
    "package_url": "https://pypi.org/project/spotijjjy/",
    "platform": "",
    "project_url": "https://pypi.org/project/spotijjjy/",
    "project_urls": {
      "Homepage": "https://github.com/maxtara/Spotijjjy"
    },
    "release_url": "https://pypi.org/project/spotijjjy/1.1.0/",
    "requires_dist": [
      "spotipy"
    ],
    "requires_python": ">=3.6",
    "summary": "Generate Spotify playlists from a few REST services",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7540349,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a48d34458ff2a0a6b9de014d775fcb33a4c59b6a4728bcae9f25752717b69c3",
          "md5": "2de5b9bddca91a5c55ba03c990b0b75d",
          "sha256": "7e19dd0a979c099e0a2eff8b444d0d52413f423e17655822b68d216209e1bc2c"
        },
        "downloads": -1,
        "filename": "spotijjjy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2de5b9bddca91a5c55ba03c990b0b75d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9512,
        "upload_time": "2020-06-10T22:57:12",
        "upload_time_iso_8601": "2020-06-10T22:57:12.239581Z",
        "url": "https://files.pythonhosted.org/packages/1a/48/d34458ff2a0a6b9de014d775fcb33a4c59b6a4728bcae9f25752717b69c3/spotijjjy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cbec94ea1bda326ba26931a532bad66c0beaa81ba4388dc8598a74d9d9b7c30",
          "md5": "061cfff1ebebc4cc7a7d6a1bbb6b909b",
          "sha256": "02bf49b732feeb19b5716427491db9dc840bbde4771f46f9d0ff36cd4befaeac"
        },
        "downloads": -1,
        "filename": "spotijjjy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "061cfff1ebebc4cc7a7d6a1bbb6b909b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8809,
        "upload_time": "2020-06-10T22:57:14",
        "upload_time_iso_8601": "2020-06-10T22:57:14.510978Z",
        "url": "https://files.pythonhosted.org/packages/1c/be/c94ea1bda326ba26931a532bad66c0beaa81ba4388dc8598a74d9d9b7c30/spotijjjy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a09b3ea6d482c439257822792c0bfe59429e6381b1e7011b1f1ed50ea06d7b5d",
          "md5": "330591f1089063ceef9d8056fd32a33c",
          "sha256": "74a16b8b79ebfd0179ec59df434b18829826af80b69ba61598c3f2941e25525c"
        },
        "downloads": -1,
        "filename": "spotijjjy-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "330591f1089063ceef9d8056fd32a33c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11264,
        "upload_time": "2020-06-23T06:46:12",
        "upload_time_iso_8601": "2020-06-23T06:46:12.256963Z",
        "url": "https://files.pythonhosted.org/packages/a0/9b/3ea6d482c439257822792c0bfe59429e6381b1e7011b1f1ed50ea06d7b5d/spotijjjy-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e811842c1e88708f181804101e3fc20f248d07650b958c86d5b49f0730987c4a",
          "md5": "6c6dea1f699ba6c14b7b1fb94bdf7504",
          "sha256": "fe8c7ca826a13df036a426c60d037b5f7f59b476dcc3173687d70e378f312587"
        },
        "downloads": -1,
        "filename": "spotijjjy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c6dea1f699ba6c14b7b1fb94bdf7504",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10243,
        "upload_time": "2020-06-23T06:46:14",
        "upload_time_iso_8601": "2020-06-23T06:46:14.764178Z",
        "url": "https://files.pythonhosted.org/packages/e8/11/842c1e88708f181804101e3fc20f248d07650b958c86d5b49f0730987c4a/spotijjjy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a09b3ea6d482c439257822792c0bfe59429e6381b1e7011b1f1ed50ea06d7b5d",
        "md5": "330591f1089063ceef9d8056fd32a33c",
        "sha256": "74a16b8b79ebfd0179ec59df434b18829826af80b69ba61598c3f2941e25525c"
      },
      "downloads": -1,
      "filename": "spotijjjy-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "330591f1089063ceef9d8056fd32a33c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11264,
      "upload_time": "2020-06-23T06:46:12",
      "upload_time_iso_8601": "2020-06-23T06:46:12.256963Z",
      "url": "https://files.pythonhosted.org/packages/a0/9b/3ea6d482c439257822792c0bfe59429e6381b1e7011b1f1ed50ea06d7b5d/spotijjjy-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e811842c1e88708f181804101e3fc20f248d07650b958c86d5b49f0730987c4a",
        "md5": "6c6dea1f699ba6c14b7b1fb94bdf7504",
        "sha256": "fe8c7ca826a13df036a426c60d037b5f7f59b476dcc3173687d70e378f312587"
      },
      "downloads": -1,
      "filename": "spotijjjy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c6dea1f699ba6c14b7b1fb94bdf7504",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10243,
      "upload_time": "2020-06-23T06:46:14",
      "upload_time_iso_8601": "2020-06-23T06:46:14.764178Z",
      "url": "https://files.pythonhosted.org/packages/e8/11/842c1e88708f181804101e3fc20f248d07650b958c86d5b49f0730987c4a/spotijjjy-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}