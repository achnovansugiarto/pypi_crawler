{
  "info": {
    "author": "Tom Christie",
    "author_email": "tom@tomchristie.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# ORM\n\n<p>\n<a href=\"https://travis-ci.org/encode/orm\">\n    <img src=\"https://travis-ci.org/encode/orm.svg?branch=master\" alt=\"Build Status\">\n</a>\n<a href=\"https://codecov.io/gh/encode/orm\">\n    <img src=\"https://codecov.io/gh/encode/orm/branch/master/graph/badge.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/orm/\">\n    <img src=\"https://badge.fury.io/py/orm.svg\" alt=\"Package version\">\n</a>\n</p>\n\nThe `orm` package is an async ORM for Python, with support for Postgres,\nMySQL, and SQLite. ORM is built with:\n\n* [SQLAlchemy core][sqlalchemy-core] for query building.\n* [`databases`][databases] for cross-database async support.\n* [`typesystem`][typesystem] for data validation.\n\nBecause ORM is built on SQLAlchemy core, you can use Alembic to provide\ndatabase migrations.\n\n**ORM is still under development: We recommend pinning any dependencies with `orm~=0.1`**\n\n**Note**: Use `ipython` to try this from the console, since it supports `await`.\n\n```python\nimport databases\nimport orm\nimport sqlalchemy\n\ndatabase = databases.Database(\"sqlite:///db.sqlite\")\nmetadata = sqlalchemy.MetaData()\n\n\nclass Note(orm.Model):\n    __tablename__ = \"notes\"\n    __database__ = database\n    __metadata__ = metadata\n\n    id = orm.Integer(primary_key=True)\n    text = orm.String(max_length=100)\n    completed = orm.Boolean(default=False)\n\n# Create the database\nengine = sqlalchemy.create_engine(str(database.url))\nmetadata.create_all(engine)\n\n# .create()\nawait Note.objects.create(text=\"Buy the groceries.\", completed=False)\nawait Note.objects.create(text=\"Call Mum.\", completed=True)\nawait Note.objects.create(text=\"Send invoices.\", completed=True)\n\n# .all()\nnotes = await Note.objects.all()\n\n# .filter()\nnotes = await Note.objects.filter(completed=True).all()\n\n# exact, iexact, contains, icontains, lt, lte, gt, gte, in\nnotes = await Note.objects.filter(text__icontains=\"mum\").all()\n\n# .get()\nnote = await Note.objects.get(id=1)\n\n# .update()\nawait note.update(completed=True)\n\n# .delete()\nawait note.delete()\n\n# 'pk' always refers to the primary key\nnote = await Note.objects.get(pk=2)\nnote.pk  # 2\n```\n\nORM supports loading and filtering across foreign keys...\n\n```python\nimport databases\nimport orm\nimport sqlalchemy\n\ndatabase = databases.Database(\"sqlite:///db.sqlite\")\nmetadata = sqlalchemy.MetaData()\n\n\nclass Album(orm.Model):\n    __tablename__ = \"album\"\n    __metadata__ = metadata\n    __database__ = database\n\n    id = orm.Integer(primary_key=True)\n    name = orm.String(max_length=100)\n\n\nclass Track(orm.Model):\n    __tablename__ = \"track\"\n    __metadata__ = metadata\n    __database__ = database\n\n    id = orm.Integer(primary_key=True)\n    album = orm.ForeignKey(Album)\n    title = orm.String(max_length=100)\n    position = orm.Integer()\n\n\n# Create some records to work with.\nmalibu = await Album.objects.create(name=\"Malibu\")\nawait Track.objects.create(album=malibu, title=\"The Bird\", position=1)\nawait Track.objects.create(album=malibu, title=\"Heart don't stand a chance\", position=2)\nawait Track.objects.create(album=malibu, title=\"The Waters\", position=3)\n\nfantasies = await Album.objects.create(name=\"Fantasies\")\nawait Track.objects.create(album=fantasies, title=\"Help I'm Alive\", position=1)\nawait Track.objects.create(album=fantasies, title=\"Sick Muse\", position=2)\n\n\n# Fetch an instance, without loading a foreign key relationship on it.\ntrack = await Track.objects.get(title=\"The Bird\")\n\n# We have an album instance, but it only has the primary key populated\nprint(track.album)       # Album(id=1) [sparse]\nprint(track.album.pk)    # 1\nprint(track.album.name)  # Raises AttributeError\n\n# Load the relationship from the database\nawait track.album.load()\nassert track.album.name == \"Malibu\"\n\n# This time, fetch an instance, loading the foreign key relationship.\ntrack = await Track.objects.select_related(\"album\").get(title=\"The Bird\")\nassert track.album.name == \"Malibu\"\n\n# Fetch instances, with a filter across an FK relationship.\ntracks = Track.objects.filter(album__name=\"Fantasies\")\nassert len(tracks) == 2\n\n# Fetch instances, with a filter and operator across an FK relationship.\ntracks = Track.objects.filter(album__name__iexact=\"fantasies\")\nassert len(tracks) == 2\n\n# Limit a query\ntracks = await Track.objects.limit(1).all()\nassert len(tracks) == 1\n```\n\n## Data types\n\nThe following keyword arguments are supported on all field types.\n\n* `primary_key`\n* `allow_null`\n* `default`\n* `index`\n* `unique`\n\nAll fields are required unless one of the following is set:\n\n* `allow_null` - Creates a nullable column. Sets the default to `None`.\n* `allow_blank` - Allow empty strings to validate. Sets the default to `\"\"`.\n* `default` - Set a default value for the field.\n\nThe following column types are supported.\nSee TypeSystem for [type-specific validation keyword arguments][typesystem-fields].\n\n* `orm.String(max_length)`\n* `orm.Text()`\n* `orm.Boolean()`\n* `orm.Integer()`\n* `orm.Float()`\n* `orm.Date()`\n* `orm.Time()`\n* `orm.DateTime()`\n* `orm.JSON()`\n\n[sqlalchemy-core]: https://docs.sqlalchemy.org/en/latest/core/\n[databases]: https://github.com/encode/databases\n[typesystem]: https://github.com/encode/typesystem\n[typesystem-fields]: https://www.encode.io/typesystem/fields/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/encode/orm",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "savannah",
    "package_url": "https://pypi.org/project/savannah/",
    "platform": "",
    "project_url": "https://pypi.org/project/savannah/",
    "project_urls": {
      "Homepage": "https://github.com/encode/orm"
    },
    "release_url": "https://pypi.org/project/savannah/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Migrations.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6162626,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fb295259dc4c990a6616b21a6d5f999e1601392b0c1299b8d077a29fa655982",
          "md5": "4f6a86f3eaabfa2eb87753ef3cfd6826",
          "sha256": "33d8327c565e10c7e683cad1fb75d0722cda69f6a066743111990ac960ef874b"
        },
        "downloads": -1,
        "filename": "savannah-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f6a86f3eaabfa2eb87753ef3cfd6826",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8959,
        "upload_time": "2019-11-19T15:40:04",
        "upload_time_iso_8601": "2019-11-19T15:40:04.061867Z",
        "url": "https://files.pythonhosted.org/packages/4f/b2/95259dc4c990a6616b21a6d5f999e1601392b0c1299b8d077a29fa655982/savannah-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fb295259dc4c990a6616b21a6d5f999e1601392b0c1299b8d077a29fa655982",
        "md5": "4f6a86f3eaabfa2eb87753ef3cfd6826",
        "sha256": "33d8327c565e10c7e683cad1fb75d0722cda69f6a066743111990ac960ef874b"
      },
      "downloads": -1,
      "filename": "savannah-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4f6a86f3eaabfa2eb87753ef3cfd6826",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8959,
      "upload_time": "2019-11-19T15:40:04",
      "upload_time_iso_8601": "2019-11-19T15:40:04.061867Z",
      "url": "https://files.pythonhosted.org/packages/4f/b2/95259dc4c990a6616b21a6d5f999e1601392b0c1299b8d077a29fa655982/savannah-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}