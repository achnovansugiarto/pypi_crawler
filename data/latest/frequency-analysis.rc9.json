{
  "info": {
    "author": "uqqu",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.8",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "Frequency analysis\r\n------------------\r\n\r\nPython package for symbol/word and their bigrams frequency analysis with excel output.\r\n\r\nWhat values can be counted: quantity, quantity in the first position, quantity in the last position, average position.\r\n\r\nFor which data values can be counted: symbols, symbol bigrams, words, word bigrams.\r\n\r\nAdditional possible data: ye-yo words table for Russian language (in excel output it can be cross-referenced with words quantity).\r\n\r\nUsage\r\n-----\r\n\r\n1. ``pip install frequency-analysis``;\r\n2. Download data set of your choice;\r\n3. Call ``Analysis`` class with context manager (take a look at the optional arguments);\r\n4. Parse your data set to word list (one sentence in list for properly word position counting) and send it to one of three methods of ``Analysis``;\r\n5. Call ``Result`` class with context manager (with optional name argument);\r\n6. Call one or several of ``Result`` methods to create excel sheet(s) with appropriate data.\r\n\r\nMethods and arguments\r\n---------------------\r\n\r\n``Analysis`` class arguments\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nAll arguments are optional\r\n\r\n* *name* – the name of the folder in which the analysis will be saved\r\n     default ``frequency_analysis``\r\n* *mode* – analysis operation mode (``[n]ew``, ``[a]ppend``, ``[c]ontinue``)\r\n     default ``n``\r\n* *word\\_pattern* – regex pattern for matching inwords symbols\r\n    default ``[a-zA-Zа-яА-ЯёЁ]+(?:(?:-?[a-zA-Zа-яА-ЯёЁ]+)+\\|'?[a-zA-Zа-яА-ЯёЁ]+)\\|[a-zA-Zа-яА-ЯёЁ]``\r\n* *allowed\\_symbols* – string of symbols or list with symbol unicode decimal values, which will be counted to analysis\r\n    default ``[*range(32, 127), 1025, *range(1040, 1104), 1105]`` (base punctuation, base Latin, Russian Cyrillic)\r\n* *yo* – int for additional Russian word processing – compare words with word list to detect number of ye/yo misspelling. 0 – disabled; 1 – enabled; 2 with 'a' mode – update yo list with new data.\r\n     default ``0``\r\n\r\n     To use the last one you should place two word files near the running script (``yo.txt`` for words with mandatory yo and ``ye-yo.txt`` for possibly yo writing). You can use your own or take it `here <https://github.com/uqqu/yo_dict>`__.\r\n\r\n``Analysis`` class methods\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n``count_symbols(word_list: list, [pos: bool, bigrams: bool])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nMethod for counting symbol and symbol\\_bigram frequency. Counted values:\r\nquantity, quantity in the first position, quantity in the last position, average position in word. \r\n\r\nAverage position counted only with argument ``pos`` as ``True`` (default ``False``). Position for symbols, which matched with ``word_pattern`` counted as for \"clear\" word, for other – as for \"raw\".\r\n\r\nExample: in single word ``–Yes!`` with default ``word_pattern`` positions will be counted as ``(– 1), (Y 1), (e 2), (s 3), (! 5)``.\r\n\r\nBigrams counting can be disabled with argument ``bigram`` as ``False`` (default ``True``).\r\n\r\n``count_words(word_list: list, [pos: bool, bigrams: bool])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nMethod for counting word and word\\_bigrams frequency. Counted values:\r\nquantity, quantity in the first position, quantity in the last position, average position in sentence. \r\n\r\nAverage position counted only with argument ``pos`` as ``True`` (default ``False``).\r\n\r\nBigrams counting can be disabled with argument ``bigram`` as ``False`` (default ``True``).\r\n\r\n``count_all(word_list: list, [pos: bool, symbol_bigrams: bool, word_bigrams: bool])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCombined call of previous two methods.\r\n\r\n``Result`` class arguments\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe only argument is optional\r\n\r\n* *name* – the name of the folder in which the analysis was saved\r\n    default ``frequency_analysis``\r\n\r\n``Result`` class methods\r\n~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    First 6 methods can be called all it once with ``treat()`` method\r\n\r\nMany methods accept arguments ``limit``, ``chart_limit``, ``min_quantity`` and ``ignore_case``.\r\n\r\n* *limit* (default ``0``) it is a max number of elements, which will be added to the sheet. ``0`` – unlimited;\r\n* *chart_limit* (default ``20``) – a number of elements, which will be counted with graphical chart;\r\n* *min_quantity* (default ``1``) – a minimal appropriate value at with element will be added to the sheet;\r\n* *ignore_case* (default ``False``) – with this argument as ``True`` lower- and upper- case symbols will be united into a single element. With ``False`` – will be counted separately. ``Keyword-only``\r\n\r\n``sheet_stats()``\r\n^^^^^^^^^^^^^^^^^\r\n\r\nMain result info – number of entries, total count and average position (if exists) for each data type.\r\n\r\n``sheet_top_symbols([limit, chart_limit, min_quantity])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTop list of all analyzed symbols sorted by quantity. The next to it is also located the same one list, but with ignore-case. There is no need to create separate sheet, just use column of your choice.\r\n\r\n``sheet_top_symbol_bigrams([limit, chart_limit, min_quantity])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTop list of symbol bigrams sorted by quantity with additional case insensitive top-list.\r\n\r\n``sheet_all_symbol_bigrams([min_quantity, ignore_case])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n2D sheet with all bigrams quantity. ``min_quantity`` argument works here for sum of row/column values instead of each separated bigram.\r\n\r\n``sheet_top_words([limit, chart_limit, min_quantity])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTop list of analyzed words sorted by quantity. Word counting is always case insensitive, on the ``Analyze`` stage.\r\n\r\n``sheet_top_word_bigrams([limit, chart_limit, min_quantity])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTop list of analyzed word bigrams sorted by quantity.\r\n\r\n``treat([limits: tuple(four int), chart_limits: tuple(four int), min_quantities: tuple(five int)])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nSingle call of all ``Result`` methods above. Calling methods in order of tuple values:\r\n\r\n1. ``sheet_top_symbols()``\r\n2. ``sheet_top_symbol_bigrams()``\r\n3. ``sheet_top_words()``\r\n4. ``sheet_top_word_bigrams()``\r\n5. ``sheet_all_symbol_bigrams()``\r\n\r\nPlease note – the last one (value for ``sheet_all_symbol_bigrams()``) there is only in the ``min_quantities`` argument. \r\n\r\nDefault values as elsewhere:\r\n\r\n* *limits* – ``(0,)*4``\r\n* *chart_limits* – ``(20,)*4``\r\n* *min_quantities* – ``(1,)*5``\r\n\r\n``sheet_custom_top_symbols(symbols: str, [chart_limit, name='Custom symbols'])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbols top-list as ``sheet_top_symbols()``, but only with symbols of your choice. ``name`` – ``keyword-only``\r\n\r\n``sheet_en_top_symbols(symbols: str, [chart_limit])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbols top-list as ``sheet_top_symbols()``, but only with base Latin symbols.\r\n\r\n``sheet_ru_top_symbols(symbols: str, [chart_limit])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbols top-list as ``sheet_top_symbols()``, but only with Russian Cyrillic symbols.\r\n\r\n``sheet_custom_symbol_bigrams(symbols: str, [ignore_case, name='Custom symbol bigrams'])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbol bigrmas 2D sheet as ``sheet_all_symbol_bigrams()``, but only with symbols of your choice. Order of symbols on the sheet will be the same as in the input argument. ``name`` – ``keyword-only``\r\n\r\n``sheet_en_symbol_bigrams([ignore_case])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbol bigrams 2D sheet as ``sheet_all_symbol_bigrams()``, but only with base Latin symbols.\r\n\r\n``sheet_ru_symbol_bigrams([ignore_case])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate symbol bigrams 2D sheet as ``sheet_all_symbol_bigrams()``, but only with Russian Cyrillic symbols.\r\n\r\n``sheet_yo_words([limit, min_quantity])``\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCreate cross-referenced sheet for all counted ye-yo words with their quantity and total misspells counter. Works only with analysis created with ``yo`` argument as ``1`` or ``2``.\r\n\r\nPerformed analyses\r\n------------------\r\n\r\n* English analysis with `EuroMatrixPlus/MultiUN <http://www.euromatrixplus.net/multi-un/>`__ English data set (3.1Gb .xml, 2.4\\*10\\ :sup:`9` symbols, 379\\*10\\ :sup:`6` words)\r\n\r\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/en/multiUN\r\n\r\n* Russian analysis with `EuroMatrixPlus/MultiUN <http://www.euromatrixplus.net/multi-un/>`__ Russian data set (4.3Gb .xml, 2.2\\*10\\ :sup:`9` symbols, 270\\*10\\ :sup:`6` words)\r\n\r\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/ru/multiUN\r\n\r\n* Russian analysis with `OpenCorpora <http://opencorpora.org/>`__ data set (528Mb .xml, 11.7\\*10\\ :sup:`6` symbols, 1.6\\*10\\ :sup:`6` words)\r\n\r\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/ru/annot\\_opcorpora\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uqqu/frequency_analysis",
    "keywords": "frequency analysis bigram linguistic cryptanalysis",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "frequency-analysis",
    "package_url": "https://pypi.org/project/frequency-analysis/",
    "platform": null,
    "project_url": "https://pypi.org/project/frequency-analysis/",
    "project_urls": {
      "Homepage": "https://github.com/uqqu/frequency_analysis"
    },
    "release_url": "https://pypi.org/project/frequency-analysis/0.1.4.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
    "version": "0.1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16340733,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e141c59f84610710fc7df590ad3e4e122304f5d06ffef6c3802a18b735519d4",
          "md5": "3d41404eb756b2fcb05da15498a7c1ac",
          "sha256": "7faf7ebd2d6f65ef69f1fac322cbcb250364264c976719c6ef7abeacdf1acaca"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "3d41404eb756b2fcb05da15498a7c1ac",
        "packagetype": "bdist_egg",
        "python_version": "0.1",
        "requires_python": null,
        "size": 27531,
        "upload_time": "2021-10-07T09:34:05",
        "upload_time_iso_8601": "2021-10-07T09:34:05.204232Z",
        "url": "https://files.pythonhosted.org/packages/2e/14/1c59f84610710fc7df590ad3e4e122304f5d06ffef6c3802a18b735519d4/frequency_analysis-0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efe7ff510a13860ed386f42868a13a2ea3d744c6ca34e5a9c43b49828eaf8056",
          "md5": "5db881a89847d77d00ed4f388d9438b1",
          "sha256": "ed8cbfa07eb7ce16d16e35d3b8069442838c3619e6487e82ce18bfab9a29e2bc"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5db881a89847d77d00ed4f388d9438b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10278,
        "upload_time": "2021-10-07T09:34:07",
        "upload_time_iso_8601": "2021-10-07T09:34:07.084414Z",
        "url": "https://files.pythonhosted.org/packages/ef/e7/ff510a13860ed386f42868a13a2ea3d744c6ca34e5a9c43b49828eaf8056/frequency_analysis-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd13a8106d47db07e291bb68f18542567b80bc629d838480b774e6a7453c9021",
          "md5": "5e99425313143cceedc709dfd4c159ba",
          "sha256": "c880a78dae624c1358056db26bf56c31fa9aac51cfa6571fe3827f487e785217"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e99425313143cceedc709dfd4c159ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15712,
        "upload_time": "2021-10-07T13:08:19",
        "upload_time_iso_8601": "2021-10-07T13:08:19.827729Z",
        "url": "https://files.pythonhosted.org/packages/dd/13/a8106d47db07e291bb68f18542567b80bc629d838480b774e6a7453c9021/frequency_analysis-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.post31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df5aa7ddcb30f31260fb86d9cd421c7f5926a9abd8d030ac71c9d7777861a69d",
          "md5": "b50f6230e20364a67dfa4768c5c9b1fa",
          "sha256": "7e8652f31a0321c6d2c0010460b1cd7df4526b2a6409bdfa931ee83d32853b50"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.1.post31.tar.gz",
        "has_sig": false,
        "md5_digest": "b50f6230e20364a67dfa4768c5c9b1fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15694,
        "upload_time": "2021-10-07T20:24:36",
        "upload_time_iso_8601": "2021-10-07T20:24:36.168920Z",
        "url": "https://files.pythonhosted.org/packages/df/5a/a7ddcb30f31260fb86d9cd421c7f5926a9abd8d030ac71c9d7777861a69d/frequency_analysis-0.1.1.post31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccde377fcdeae01cef6b6ff23ec8bd02ef934ffeafb8ea5303ba7d6babfc861b",
          "md5": "9f685a87eddd0ddfd480ce49e5de59ab",
          "sha256": "9314cf21940d8b7a5fea1e233a7eb3a0688a573cbfc4b51f8e2459087ddbdd13"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f685a87eddd0ddfd480ce49e5de59ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15668,
        "upload_time": "2021-10-07T20:38:50",
        "upload_time_iso_8601": "2021-10-07T20:38:50.115558Z",
        "url": "https://files.pythonhosted.org/packages/cc/de/377fcdeae01cef6b6ff23ec8bd02ef934ffeafb8ea5303ba7d6babfc861b/frequency_analysis-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f10acd4801a64fccf6eb8c8385832b4a21efef544d3e51f53c3dec1bf951efbe",
          "md5": "b07244c2eabe307030190f18bfaf424c",
          "sha256": "14ae00dfbac4c334dc31b767d55885aec63842e886ae854499b8e24e90ed020e"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b07244c2eabe307030190f18bfaf424c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16019,
        "upload_time": "2021-10-09T08:21:55",
        "upload_time_iso_8601": "2021-10-09T08:21:55.532591Z",
        "url": "https://files.pythonhosted.org/packages/f1/0a/cd4801a64fccf6eb8c8385832b4a21efef544d3e51f53c3dec1bf951efbe/frequency_analysis-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6b4f04ae9104628b21738906657da923fb5799f82f6a31b8b564cb2751cd3d8",
          "md5": "c4f187c972c95a18d3aa41aae7aca944",
          "sha256": "71f73794e6f9999d178df42ebf44f7524e35a535e8fc645fbdeca189f1c6bc78"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c4f187c972c95a18d3aa41aae7aca944",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16265,
        "upload_time": "2021-10-25T10:33:47",
        "upload_time_iso_8601": "2021-10-25T10:33:47.596716Z",
        "url": "https://files.pythonhosted.org/packages/a6/b4/f04ae9104628b21738906657da923fb5799f82f6a31b8b564cb2751cd3d8/frequency_analysis-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "444a9799ddcd3644ffc8a0eb5898b9e34c16f538dd506c047220c9b288172c80",
          "md5": "00960f3e22f4899a38138468febe5c24",
          "sha256": "a54bfc3d23e86aa1b9a29d74e4908a66dc8d649d39cedb14a6a4ca7c0e2fdb9f"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00960f3e22f4899a38138468febe5c24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15662,
        "upload_time": "2023-01-07T11:29:58",
        "upload_time_iso_8601": "2023-01-07T11:29:58.832036Z",
        "url": "https://files.pythonhosted.org/packages/44/4a/9799ddcd3644ffc8a0eb5898b9e34c16f538dd506c047220c9b288172c80/frequency_analysis-0.1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba77b7da34cc775bcf8b6f5b7f72f7d0b7a6f41a775add4dc5d4f4ae332b840",
          "md5": "9f69912bcc6b48d2ffbbc25b256eda52",
          "sha256": "6614427d72acc37e72fb9cc12347961f4a991270ba4e648f13e9ac3e831a21f8"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f69912bcc6b48d2ffbbc25b256eda52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15679,
        "upload_time": "2023-01-07T11:43:36",
        "upload_time_iso_8601": "2023-01-07T11:43:36.182545Z",
        "url": "https://files.pythonhosted.org/packages/1b/a7/7b7da34cc775bcf8b6f5b7f72f7d0b7a6f41a775add4dc5d4f4ae332b840/frequency_analysis-0.1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d86e73d53fb347083c968a7cd67b28cccc50cebe8eac1ae27e58ba95969bad",
          "md5": "17f2ba4a475eead4da87ded7e8d1b191",
          "sha256": "4403638b70ad012577a9236798bf03fa50a139e92b5284e63eeefdab40300ca9"
        },
        "downloads": -1,
        "filename": "frequency_analysis-0.1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "17f2ba4a475eead4da87ded7e8d1b191",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15668,
        "upload_time": "2023-01-07T11:48:50",
        "upload_time_iso_8601": "2023-01-07T11:48:50.126287Z",
        "url": "https://files.pythonhosted.org/packages/28/d8/6e73d53fb347083c968a7cd67b28cccc50cebe8eac1ae27e58ba95969bad/frequency_analysis-0.1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28d86e73d53fb347083c968a7cd67b28cccc50cebe8eac1ae27e58ba95969bad",
        "md5": "17f2ba4a475eead4da87ded7e8d1b191",
        "sha256": "4403638b70ad012577a9236798bf03fa50a139e92b5284e63eeefdab40300ca9"
      },
      "downloads": -1,
      "filename": "frequency_analysis-0.1.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "17f2ba4a475eead4da87ded7e8d1b191",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15668,
      "upload_time": "2023-01-07T11:48:50",
      "upload_time_iso_8601": "2023-01-07T11:48:50.126287Z",
      "url": "https://files.pythonhosted.org/packages/28/d8/6e73d53fb347083c968a7cd67b28cccc50cebe8eac1ae27e58ba95969bad/frequency_analysis-0.1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}