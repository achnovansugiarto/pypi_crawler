{
  "info": {
    "author": "Flavio Abreu Araujo",
    "author_email": "flavio.abreuaraujo@uclouvain.be",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# pyOVF\n\nPyOVF is a Python3 package for reading and writing binary OVF files (mumax3 or OOMMF) using the python connector provided by the [OVF RW](https://gitlab.flavio.be/flavio/ovf-rw) project (which is not open-source yet).\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install pyovf.\n\n```bash\npip install pyovf\n```\n\nThis package is also available in this private GitLab instance and can be installed using the `--extra-index-url` parameter.\n\n```bash\npip install pyovf --extra-index-url https://gitlab.flavio.be/api/v4/projects/16/packages/pypi/simple\n```\n\nThis library relies on the compiled C++ code from [OVF RW](https://gitlab.flavio.be/flavio/ovf-rw) project. The compiled versions are the following:\n\n- Linux (x86_64) | python {3.7, 3.8, 3.9, 3.10} (Ubuntu 20.04)\n\n- macOS (darwin, intel) | python {3.7, 3.8, 3.9, 3.10} (Catalina)\n\nAs far as the main operating systems are concerned, the following are not available yet:\n\n- Windows (any)\n  \n- Linux (armv7l, ARM arch64)\n\n## Usage\n\n```python\nimport pyovf as OVF\nimport numpy as np\n\nprint(f'pyOVF version: {OVF.__version__}')\n\n#* Create a (2, 2, 2, 3) ndarray representing a fictive vector field\ndata_in = np.array([[[[1.1, 1.2, 1.3],   # vector @ z-comp 0, y-comp 0, x-comp 0\n                      [1.4, 1.5, 1.6]],  # vector @ z-comp 0, y-comp 0, x-comp 1\n                     [[2.1, 2.2, 2.3],   # vector @ z-comp 0, y-comp 1, x-comp 0\n                      [2.4, 2.5, 2.6]]], # vector @ z-comp 0, y-comp 1, x-comp 1\n                    [[[3.1, 3.2, 3.3],   # vector @ z-comp 1, y-comp 0, x-comp 0\n                      [3.4, 3.5, 3.6]],  # vector @ z-comp 1, y-comp 0, x-comp 1\n                     [[4.1, 4.2, 4.3],   # vector @ z-comp 1, y-comp 1, x-comp 0\n                      [4.4, 4.5, 4.6]]], # vector @ z-comp 1, y-comp 1, x-comp 1\n                   ], dtype=np.float32)\n\n#* Writes data_in into file\nOVF.write('test.ovf', data_in, title=\"J\", Xlim=[0,10e-9],\n                Ylim=[0,10e-9], Zlim=[0,10e-9])\n\n#* Reads data and meshgrid (X, Y) from file\nX, Y, data_out = OVF.read('test.ovf')\n#?INFO output format => data_out[z-comp, y-comp, x-comp, vect-comp]\n#?INFO vect-comp = 0 for scalar field data (geam, etc.)\n#?INFO vect-comp = {0, 1, 2} for scalar field data (m, B_ext, etc.)\nprint(data_out.shape)\n\n#? Checks if the data elements correspond\nif (data_in == data_out.squeeze()).all():\n    print('Test passed!')\n\n#* Reads data (only) from file\ndata_out2 = OVF.read_data_only('test.ovf')\n#?INFO read_data_only applies squeeze(), so z-comp may desappear\n#?INFO if data is scalar field, the vect-comp also desappears\nprint(data_out2.shape)\n\n#? Checks if the data elements correspond\nif (data_in == data_out2).all():\n    print('Test passed!')\n```\n\n## Contributing\nPull requests are welcome.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.flavio.be/flavio/pyovf",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyovf",
    "package_url": "https://pypi.org/project/pyovf/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyovf/",
    "project_urls": {
      "Homepage": "https://gitlab.flavio.be/flavio/pyovf"
    },
    "release_url": "https://pypi.org/project/pyovf/0.2.1/",
    "requires_dist": [
      "numpy (>=1.20.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Reading and writing binary OVF files for mumax3 or OOMMF.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16191745,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dcaec818c2392b7ad0df3d840c56dc975d3dd620ae66fe30e0204c00005d8e9",
          "md5": "90dfc904dc7b5ae22bde3c1af3e9305e",
          "sha256": "051fcc5742b4ef9ec189a2920029f1b8ede34acbea04cd3dc551a76fc919b1e6"
        },
        "downloads": -1,
        "filename": "pyovf-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90dfc904dc7b5ae22bde3c1af3e9305e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1384146,
        "upload_time": "2022-02-28T22:28:17",
        "upload_time_iso_8601": "2022-02-28T22:28:17.625694Z",
        "url": "https://files.pythonhosted.org/packages/4d/ca/ec818c2392b7ad0df3d840c56dc975d3dd620ae66fe30e0204c00005d8e9/pyovf-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "713b510f154a617c760d21fbdb8a98f5928985bdd9096aa99d1285c0c8bbaa2f",
          "md5": "5f234033f6e60d63c2a99f5b42edf0c0",
          "sha256": "07169997ebbfabc5ad74c078346b0b0f626d2debc6dc327e96de3c1b5f184e1a"
        },
        "downloads": -1,
        "filename": "pyovf-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f234033f6e60d63c2a99f5b42edf0c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1376611,
        "upload_time": "2022-02-28T22:28:19",
        "upload_time_iso_8601": "2022-02-28T22:28:19.538045Z",
        "url": "https://files.pythonhosted.org/packages/71/3b/510f154a617c760d21fbdb8a98f5928985bdd9096aa99d1285c0c8bbaa2f/pyovf-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dcaec818c2392b7ad0df3d840c56dc975d3dd620ae66fe30e0204c00005d8e9",
        "md5": "90dfc904dc7b5ae22bde3c1af3e9305e",
        "sha256": "051fcc5742b4ef9ec189a2920029f1b8ede34acbea04cd3dc551a76fc919b1e6"
      },
      "downloads": -1,
      "filename": "pyovf-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90dfc904dc7b5ae22bde3c1af3e9305e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 1384146,
      "upload_time": "2022-02-28T22:28:17",
      "upload_time_iso_8601": "2022-02-28T22:28:17.625694Z",
      "url": "https://files.pythonhosted.org/packages/4d/ca/ec818c2392b7ad0df3d840c56dc975d3dd620ae66fe30e0204c00005d8e9/pyovf-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "713b510f154a617c760d21fbdb8a98f5928985bdd9096aa99d1285c0c8bbaa2f",
        "md5": "5f234033f6e60d63c2a99f5b42edf0c0",
        "sha256": "07169997ebbfabc5ad74c078346b0b0f626d2debc6dc327e96de3c1b5f184e1a"
      },
      "downloads": -1,
      "filename": "pyovf-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5f234033f6e60d63c2a99f5b42edf0c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1376611,
      "upload_time": "2022-02-28T22:28:19",
      "upload_time_iso_8601": "2022-02-28T22:28:19.538045Z",
      "url": "https://files.pythonhosted.org/packages/71/3b/510f154a617c760d21fbdb8a98f5928985bdd9096aa99d1285c0c8bbaa2f/pyovf-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}