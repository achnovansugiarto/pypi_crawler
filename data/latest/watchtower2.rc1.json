{
  "info": {
    "author": "Moshe Fromer",
    "author_email": "mofromer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Watchtower: Python CloudWatch Logging\n=====================================\n\nwatchtower_2 is a django python2 adaptation of watchtower by kislyuk\n\nWatchtower is a log handler for `Amazon Web Services CloudWatch Logs\n<https://aws.amazon.com/blogs/aws/cloudwatch-log-service/>`_.\n\nCloudWatch Logs is a log management service built into AWS. It is conceptually similar to services like Splunk and\nLoggly, but is more lightweight, cheaper, and tightly integrated with the rest of AWS.\n\nWatchtower, in turn, is a lightweight adapter between the `Python logging system\n<https://docs.python.org/library/logging.html>`_ and CloudWatch Logs. It uses the `boto3 AWS SDK\n<https://github.com/boto/boto3>`_, and lets you plug your application logging directly into CloudWatch without the need\nto install a system-wide log collector like `awscli-cwlogs <https://pypi.python.org/pypi/awscli-cwlogs>`_ and round-trip\nyour logs through the instance's syslog. It aggregates logs into batches to avoid sending an API request per each log\nmessage, while guaranteeing a delivery deadline (60 seconds by default).\n\nInstallation\n~~~~~~~~~~~~\n::\n\n    pip install watchtower\n\nSynopsis\n~~~~~~~~\nInstall `awscli <https://pypi.python.org/pypi/awscli>`_ and set your AWS credentials (run ``aws configure``).\n\n.. code-block:: python\n\n    import watchtower, logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    logger.addHandler(watchtower.CloudWatchLogHandler())\n    logger.info(\"Hi\")\n    logger.info(dict(foo=\"bar\", details={}))\n\nAfter running the example, you can see the log output in your `AWS console\n<https://console.aws.amazon.com/cloudwatch/home>`_.\n\nExample: Django logging with Watchtower\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis is an example of Watchtower integration with Django. In your Django project, add the following to ``settings.py``:\n\n.. code-block:: python\n\n    from boto3.session import Session\n\n    AWS_ACCESS_KEY_ID = 'your access key'\n    AWS_SECRET_ACCESS_KEY = 'your secret access key'\n    AWS_REGION_NAME = 'your region'\n\n    boto3_session = Session(aws_access_key_id=AWS_ACCESS_KEY_ID,\n                            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n                            region_name=AWS_REGION_NAME)\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'root': {\n            'level': logging.ERROR,\n            'handlers': ['console'],\n        },\n        'formatters': {\n            'simple': {\n                'format': \"%(asctime)s [%(levelname)-8s] %(message)s\",\n                'datefmt': \"%Y-%m-%d %H:%M:%S\"\n            },\n            'aws': {\n                # you can add specific format for aws here\n                'format': \"%(asctime)s [%(levelname)-8s] %(message)s\",\n                'datefmt': \"%Y-%m-%d %H:%M:%S\"\n            },\n        },\n        'handlers': {\n            'watchtower': {\n                'level': 'DEBUG',\n                'class': 'watchtower.CloudWatchLogHandler',\n                'boto3_session': boto3_session,\n                'log_group': 'MyLogGroupName',\n                'stream_name': 'MyStreamName',\n                'formatter': 'aws',\n            },\n        },\n        'loggers': {\n            'django': {\n                'level': 'INFO',\n                'handlers': ['watchtower'],\n                'propagate': False,\n            },\n            # add your other loggers here...\n        },\n    }\n\nUsing this configuration, every log statement from Django will be sent to Cloudwatch in the log group ``MyLogGroupName``\nunder the stream name ``MyStreamName``. Instead of setting credentials via ``AWS_ACCESS_KEY_ID`` and other variables,\nyou can also assign an IAM role to your instance and omit those parameters, prompting boto3 to ingest credentials from\ninstance metadata.\n\n(See also the `Django logging documentation <https://docs.djangoproject.com/en/dev/topics/logging/>`__).\n\nExamples: Querying CloudWatch logs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis section is not specific to Watchtower. It demonstrates the use of awscli and jq to read and search CloudWatch logs\non the command line.\n\nFor the Flask example above, you can retrieve your application logs with the following two commands::\n\n    aws logs get-log-events --log-group-name watchtower --log-stream-name loggable | jq '.events[].message'\n    aws logs get-log-events --log-group-name watchtower --log-stream-name werkzeug | jq '.events[].message'\n\nCloudWatch Logs supports alerting and dashboards based on `metric filters\n<http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/FilterAndPatternSyntax.html>`_, which are pattern\nrules that extract information from your logs and feed it to alarms and dashboard graphs. The following example shows\nlogging structured JSON data using Watchtower, setting up a metric filter to extract data from the log stream, a dashboard to\nvisualize it, and an alarm that sends an email::\n\n    TODO\n\nExamples: Python Logging Config\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPython has the ability to provide a configuration file that can be loaded in order to separate the logging\nconfiguration from the code. Historically, Python has used the ``logging.config.fileConfig`` function to do\nso, however, that feature lacks the ability to use keyword args. Python 2.7 introduced a new feature to\nhandle logging that is more robust - ``logging.config.dictConfig`` which provides the ability to do more\nadvanced Filters, but more importantly adds keyword args, thus allowing the ``logging.config`` functionality\nto instantiate Watchtower.\n\nThe following are two example YAML configuration files that can be loaded using ``PyYaml``. The resulting\n``dict`` object can then be loaded into ``logging.config.dictConfig``. The first example is a basic example\nthat relies on the default configuration provided by ``boto3``:\n\n.. code-block:: yaml\n\n    # Default AWS Config\n    version: 1\n    formatters:\n        json:\n            format: \"[%(asctime)s] %(process)d %(levelname)s %(name)s:%(funcName)s:%(lineno)s - %(message)s\"\n        plaintext:\n            format: \"[%(asctime)s] %(process)d %(levelname)s %(name)s:%(funcName)s:%(lineno)s - %(message)s\"\n    handlers:\n        console:\n            (): logging.StreamHandler\n            level: DEBUG\n            formatter: plaintext\n            stream: sys.stdout\n        watchtower:\n            formatter: json\n            level: DEBUG\n            (): watchtower.CloudWatchLogHandler\n            log_group: logger\n            stream_name:  loggable\n            send_interval: 1\n            create_log_group: False\n    loggers:\n        root:\n            handlers: [console, watchtower, logfile]\n        boto:\n            handlers: [console]\n        boto3:\n            handlers: [console]\n        botocore:\n            handlers: [console]\n        requests:\n            handlers: [console]\n\n\nThe above works well if you can use the default configuration, or rely on environmental variables.\nHowever, sometimes one may want to use different credentials for logging than used for other functionality;\nin this case the ``boto3_profile_name`` option to Watchtower can be used to provide a profile name:\n\n.. code-block:: yaml\n\n    # AWS Config Profile\n    version: 1\n    formatters:\n        json:\n            format: \"[%(asctime)s] %(process)d %(levelname)s %(name)s:%(funcName)s:%(lineno)s - %(message)s\"\n        plaintext:\n            format: \"[%(asctime)s] %(process)d %(levelname)s %(name)s:%(funcName)s:%(lineno)s - %(message)s\"\n    handlers:\n        console:\n            (): logging.StreamHandler\n            level: DEBUG\n            formatter: plaintext\n            stream: sys.stdout\n        watchtower:\n            formatter: json\n            level: DEBUG\n            (): watchtower.CloudWatchLogHandler\n            log_group: logger\n            stream_name:  loggable\n            boto3_profile_name: watchtowerlogger\n            send_interval: 1\n            create_log_group: False\n    loggers:\n        root:\n            handlers: [console, watchtower, logfile]\n        boto:\n            handlers: [console]\n        boto3:\n            handlers: [console]\n        botocore:\n            handlers: [console]\n        requests:\n            handlers: [console]\n\nFor the more advanced configuration, the following configuration file will provide\nthe matching credentials to the ``watchtowerlogger`` profile:\n\n.. code-block:: cfg\n\n    [profile watchtowerlogger]\n    aws_access_key_id=MyAwsAccessKey\n    aws_secret_access_key=MyAwsSecretAccessKey\n    region=us-east-1\n\nFinally, the following shows how to load the configuration into the working application:\n\nAuthors\n-------\n* Andrey Kislyuk\n* Moshe Fromer\n\nLinks\n-----\n* `Project home page (GitHub) <https://github.com/kislyuk/watchtower>`_\n* `Documentation <https://kislyuk.github.io/watchtower/>`_\n* `Package distribution (PyPI) <https://pypi.python.org/pypi/watchtower>`_\n* `AWS CLI CloudWatch Logs plugin <https://pypi.python.org/pypi/awscli-cwlogs>`_\n* `Docker awslogs adapter <https://github.com/docker/docker/blob/master/daemon/logger/awslogs/cloudwatchlogs.go>`_\n\nBugs\n~~~~\nPlease report bugs, issues, feature requests, etc. on `GitHub <https://github.com/kislyuk/watchtower/issues>`_.\n\nLicense\n-------\nLicensed under the terms of the `Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\n\n.. image:: https://github.com/kislyuk/watchtower/workflows/Python%20package/badge.svg\n        :target: https://github.com/kislyuk/watchtower/actions\n.. image:: https://codecov.io/github/kislyuk/watchtower/coverage.svg?branch=master\n        :target: https://codecov.io/github/kislyuk/watchtower?branch=master\n.. image:: https://img.shields.io/pypi/v/watchtower.svg\n        :target: https://pypi.python.org/pypi/watchtower\n.. image:: https://img.shields.io/pypi/l/watchtower.svg\n        :target: https://pypi.python.org/pypi/watchtower",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moishfromer/watchtower",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "watchtower2",
    "package_url": "https://pypi.org/project/watchtower2/",
    "platform": "MacOS X",
    "project_url": "https://pypi.org/project/watchtower2/",
    "project_urls": {
      "Homepage": "https://github.com/moishfromer/watchtower"
    },
    "release_url": "https://pypi.org/project/watchtower2/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Python2 CloudWatch Logging",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8992610,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f906deefcb9328560339204e67037b5d6b248d65b8ea3ac60c5c6c5db5f950a5",
          "md5": "bf76c06c0e9ff59e129f10212361ef30",
          "sha256": "763533b96e6d4317e822bbfbd1f6ff78dfdd5cdebcba67a413a295893965915b"
        },
        "downloads": -1,
        "filename": "watchtower2-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf76c06c0e9ff59e129f10212361ef30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 12080,
        "upload_time": "2020-12-27T14:28:05",
        "upload_time_iso_8601": "2020-12-27T14:28:05.379904Z",
        "url": "https://files.pythonhosted.org/packages/f9/06/deefcb9328560339204e67037b5d6b248d65b8ea3ac60c5c6c5db5f950a5/watchtower2-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f906deefcb9328560339204e67037b5d6b248d65b8ea3ac60c5c6c5db5f950a5",
        "md5": "bf76c06c0e9ff59e129f10212361ef30",
        "sha256": "763533b96e6d4317e822bbfbd1f6ff78dfdd5cdebcba67a413a295893965915b"
      },
      "downloads": -1,
      "filename": "watchtower2-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bf76c06c0e9ff59e129f10212361ef30",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 12080,
      "upload_time": "2020-12-27T14:28:05",
      "upload_time_iso_8601": "2020-12-27T14:28:05.379904Z",
      "url": "https://files.pythonhosted.org/packages/f9/06/deefcb9328560339204e67037b5d6b248d65b8ea3ac60c5c6c5db5f950a5/watchtower2-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}