{
  "info": {
    "author": "George Psarakis",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# regularize - Easily compose regular expressions\n\n![Github Actions Status](https://github.com/georgepsarakis/regularize/actions/workflows/python-app.yml/badge.svg)\n\n## Motivation\n\nWriting complex regular expressions can prove to be difficult and error-prone. This library aims to provide a simple interface for constructing patterns, finding matches and performing substitutions.\n\n### Key Features\n\n- **Pattern Builder:** a clean and robust API to build complex regular expressions.\n- **Flag Interface:** easily add and remove flags using a friendly interface.\n- **Immutable Pattern Objects:** in order to increase composability and reusability, `Pattern` instances do not modify internal state, but instead return copies with the modifications.\n- **Find/Replace with LRU cache:** using a shared cache, different pattern instances that compile to the same regular expression can benefit from the same cache entries.\n\n## Examples\n\n### Match compressed / uncompressed log filenames\n\n```python\nfrom regularize import pattern, finder\n\n# Start a new pattern\nlogfile_pattern = pattern()\n\n# Create a base pattern for the logfile names\nlogfile_pattern = logfile_pattern.\\\n                  literal('application.').\\\n                  any_number().\\\n                  quantify(minimum=1).case_insensitive()\n\nuncompressed_logfile = logfile_pattern.literal('.log').end_anchor()\ncompressed_logfile = logfile_pattern.literal('.log.gz').end_anchor()\n\nprint(uncompressed_logfile)\n# Expression: /application\\.[0-9]+\\.log$/\n\nprint(compressed_logfile)\n# Expression: /application\\.[0-9]+\\.log\\.gz$/\n\nprint(finder(uncompressed_logfile).match('application.1.log'))\n# <re.Match object; span=(0, 17), match='application.1.log'>\nprint(finder(compressed_logfile).match('application.1.log.gz'))\n# <re.Match object; span=(0, 20), match='application.1.log.gz'>\n```\n\n### Match and extract URL components\n\n```python\nfrom urllib.parse import urlparse\n\nfrom regularize import pattern\n\n# Valid characters for DNS names\nascii_alphanumeric = pattern().lowercase_ascii_letters(). \\\n    uppercase_ascii_letters().any_number()\n\ndomain_pattern = \\\n    ascii_alphanumeric.close_bracket() + \\\n    ascii_alphanumeric.literal('-').quantify(1, 61)\n\n# At least one alphanumeric character before the dot and after the dash\ndomain_pattern += ascii_alphanumeric.close_bracket()\n\n# Add TLD\ntld_pattern = pattern().lowercase_ascii_letters(closed=False). \\\n    uppercase_ascii_letters(). \\\n    quantify(minimum=2)\n\n# Add optional subdomain group\nsubdomain_pattern = domain_pattern.\\\n    group(name='subdomain', optional=True).\\\n    literal('.').\\\n    group(optional=True)\n\n# Full domain pattern\ndomain_pattern = subdomain_pattern + domain_pattern.literal('.') + tld_pattern\n\n# Match HTTP or HTTPS scheme\nscheme_pattern = pattern().literal('http').any_of('s').\\\n    quantify(minimum=0, maximum=1).\\\n    group('scheme').\\\n    literal('://')\n\n# Match the URL path (if any exists)\npath_pattern = pattern().literal('/').any_number().\\\n    lowercase_ascii_letters().literal('%-_').\\\n    quantify(minimum=1).match_all()\n\n# Compose the complete pattern\nurl_pattern = (scheme_pattern + domain_pattern.group('domain') +\n               path_pattern.group(name='path', optional=True)).case_insensitive()\n\nurl = 'https://www.example.com/p/1'\n\ncompiled_url_pattern = url_pattern.compile()\nurl_regex_matches = compiled_url_pattern.match(url).groupdict()\n\nparsed_url = urlparse(url)\n\nprint(url_regex_matches)\n# {'scheme': 'https', 'domain': 'www.example.com', 'subdomain': 'www', 'path': '/p/1'}\nprint(parsed_url)\n# ParseResult(scheme='https', netloc='www.example.com', path='/p/1', params='', query='', fragment='')\nassert parsed_url.scheme == url_regex_matches['scheme']\nassert parsed_url.hostname == url_regex_matches['domain']\nassert parsed_url.path == url_regex_matches['path']\nassert url_regex_matches['subdomain'] == 'www'\n```\n\n### Parse HTTP Logs\n\nThe following example is taken from the common format sample of the [Apache web server combined log](https://httpd.apache.org/docs/current/logs.html#combined).\n\n```python\nfrom regularize.expression import Pattern, pattern\n\napache_webserver_combined_log = (\n    '127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] '\n    '\"GET /apache_pb.gif HTTP/1.0\" 200 2326 \"http://www.example.com/start.html\" '\n    '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 11.1; rv:84.0) Gecko/20100101 Firefox/84.0\"'\n)\n\nip = pattern().any_of('.', Pattern.ANY_NUMBER).quantify(minimum=7).group('ip')\nidentd_client_id = pattern().literal('-')\nhttp_auth_user = pattern().any_of(Pattern.ANY_ASCII_CHARACTER, '_', '.').\\\n    at_least_one().group('http_auth_user')\ntime = pattern().literal('[').none_of(']').quantify(minimum=26).literal(']')\nhttp_verb = pattern().literal('\"').group('http_verb',\n                                         pattern=pattern().uppercase_ascii_letters().at_least_one())\nurl = pattern().group(name='url',\n                      pattern=pattern().none_of(Pattern.ANY_WHITESPACE).at_least_one())\nhttp_version = pattern().literal('HTTP/').any_of('1', '2').literal('.').\\\n    any_of('0', '1').group('http_version').literal('\"')\nhttp_status_code = pattern().group(name='http_status_code',\n                                   pattern=pattern().any_of(Pattern.ANY_NUMBER).exactly(3))\nresponse_bytes = pattern().group(name='response_bytes_without_headers',\n                                 pattern=pattern().any_of(Pattern.ANY_NUMBER).at_least_one())\n# Note the repetition here. For multiple groups using the same expression,\n# we can create a lambda, e.g:\n# lambda name: pattern().literal('\"').group(name=name, pattern=pattern().none_of('\"').at_least_one()).literal('\"')\nreferer = pattern().literal('\"').\\\n    group(name='referer', pattern=pattern().none_of('\"').at_least_one()).literal('\"')\nuser_agent = pattern().literal('\"').\\\n    group(name='user_agent', pattern=pattern().none_of('\"').at_least_one())\n\np = Pattern.join(\n    pattern().whitespace(),\n    [ip, identd_client_id, http_auth_user, time,\n     http_verb, url, http_version, http_status_code,\n     response_bytes, referer, user_agent]\n)\nassert {'ip': '127.0.0.1', 'http_auth_user': 'frank', 'http_verb': 'GET', 'url': '/apache_pb.gif',\n             'http_version': 'HTTP/1.0', 'http_status_code': '200', 'response_bytes_without_headers': '2326',\n             'user_agent': 'http://www.example.com/start.html'} == \\\n        p.compile().match(apache_webserver_combined_log).groupdict()\n```\n\n### Strip HTML tags\n\n```python\nfrom regularize import pattern\nfrom regularize.replace import substitution\n\nhtml = '''<h1>Article Title</h1>\n<p>This is a <b>blog post</b></p>'''\np = pattern().literal('<').any_of('/').quantify(minimum=0).ascii_letters().any_number().at_least_one().literal('>')\ns = substitution(p)\ntext = s.replace(html)\nprint(text)\n'''\nArticle Title\n    This is a blog post\n'''\n```\n\n## API\n\n### Pattern Builder\n\n### Finder\n\n### Substitution (Replace) \n\n## Extending\n\n### Writing Extensions\n\nCommonly used patterns can be easily added either by creating a sub-class of the `Pattern` class,\nor by using the extension registry.\n\n#### Using a Pattern sub-class\n\nThere are two prerequisites for new pattern builder methods:\n- The return value should be a `Pattern` instance.\n- Internal state is not modified, but instead all changes are applied to an instance clone.\n\n```python\nfrom regularize.expression import Pattern\n\nclass MyPattern(Pattern):\n    def html_tag(self, opening=True):\n        if opening:\n            new = self.literal('<')\n        else:\n            new = self.literal('</')\n        return new.any_of(Pattern.ANY_ASCII_CHARACTER).at_least_one().literal('>')    \n```  \n\n#### Registering an extension\n\n```python\nfrom regularize.expression import Pattern\n\nclass HTMLTag(Pattern):\n    def __call__(self, opening=True):\n        if opening:\n            new = self.literal('<')\n        else:\n            new = self.literal('</')\n        return new.any_of(Pattern.ANY_ASCII_CHARACTER). \\\n            quantify(minimum=1).literal('>')\n\n\np = Pattern()\n# The registry is attached to the Pattern class:\nPattern.registry.add('html_tag', HTMLTag)\n# But is also accessible through the instance for convenience:\np.extensions.registry.add('html_tag', HTMLTag)\n# We can now call the pattern wrapper by its given alias, through the `ext` object:\np = p.ext.html_tag()\n\nprint(p.build())\n# <[a-z]+>\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/georgepsarakis/regularize",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "regularize",
    "package_url": "https://pypi.org/project/regularize/",
    "platform": "",
    "project_url": "https://pypi.org/project/regularize/",
    "project_urls": {
      "Homepage": "https://github.com/georgepsarakis/regularize"
    },
    "release_url": "https://pypi.org/project/regularize/0.0.7/",
    "requires_dist": [
      "pytest (==6.1.0) ; extra == 'dev'",
      "flake8 (==3.8.4) ; extra == 'dev'",
      "pytest-cov (==2.10.1) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Regular Expression Builder",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9902492,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f6f1573e5978c04ea14080515cca9c92b85812bba76a576ac95784a7fffce6c",
          "md5": "09646c4e71319f014460817b8c863e6f",
          "sha256": "11990d403a09f4d159cc7bb09d9349d3f90c8090e506d9281fa985cb3deeae4d"
        },
        "downloads": -1,
        "filename": "regularize-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09646c4e71319f014460817b8c863e6f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11249,
        "upload_time": "2021-03-26T20:15:09",
        "upload_time_iso_8601": "2021-03-26T20:15:09.779061Z",
        "url": "https://files.pythonhosted.org/packages/8f/6f/1573e5978c04ea14080515cca9c92b85812bba76a576ac95784a7fffce6c/regularize-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02d1f921141dec8642ed18511d2cf5bbef5b08430e1c587613d143a4840bc1eb",
          "md5": "0a0f280b2893aa34c33e9b96292e02ca",
          "sha256": "96dfa24a964bc51ff588e739dd9ade9fc4c3918de309a4e08a6c0981d1b0a7e8"
        },
        "downloads": -1,
        "filename": "regularize-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0a0f280b2893aa34c33e9b96292e02ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12625,
        "upload_time": "2021-03-26T20:15:11",
        "upload_time_iso_8601": "2021-03-26T20:15:11.029968Z",
        "url": "https://files.pythonhosted.org/packages/02/d1/f921141dec8642ed18511d2cf5bbef5b08430e1c587613d143a4840bc1eb/regularize-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c08b3094f66bd32be6ceab90c96a518d961123f7ffeaf91f48ea05ea197f4056",
          "md5": "b043c1c41cb496bc9e27097f718ea01f",
          "sha256": "fb0724c5ded73ce371912b7eaf0900977bb1d1eba8c7106040e74ab54ebbcc71"
        },
        "downloads": -1,
        "filename": "regularize-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b043c1c41cb496bc9e27097f718ea01f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11180,
        "upload_time": "2021-03-28T04:57:47",
        "upload_time_iso_8601": "2021-03-28T04:57:47.368121Z",
        "url": "https://files.pythonhosted.org/packages/c0/8b/3094f66bd32be6ceab90c96a518d961123f7ffeaf91f48ea05ea197f4056/regularize-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d28fa2a628466f788064acd7f5a069d90dea7c28cf048e85be49fbfc9c9a024d",
          "md5": "e6df8124cfb538af95a0004a658c6d64",
          "sha256": "977defdefe82d56a1f956011b561133adb8ae44ede35fbf147b09b65465fbaaa"
        },
        "downloads": -1,
        "filename": "regularize-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e6df8124cfb538af95a0004a658c6d64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12587,
        "upload_time": "2021-03-28T04:57:48",
        "upload_time_iso_8601": "2021-03-28T04:57:48.603051Z",
        "url": "https://files.pythonhosted.org/packages/d2/8f/a2a628466f788064acd7f5a069d90dea7c28cf048e85be49fbfc9c9a024d/regularize-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c08b3094f66bd32be6ceab90c96a518d961123f7ffeaf91f48ea05ea197f4056",
        "md5": "b043c1c41cb496bc9e27097f718ea01f",
        "sha256": "fb0724c5ded73ce371912b7eaf0900977bb1d1eba8c7106040e74ab54ebbcc71"
      },
      "downloads": -1,
      "filename": "regularize-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b043c1c41cb496bc9e27097f718ea01f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11180,
      "upload_time": "2021-03-28T04:57:47",
      "upload_time_iso_8601": "2021-03-28T04:57:47.368121Z",
      "url": "https://files.pythonhosted.org/packages/c0/8b/3094f66bd32be6ceab90c96a518d961123f7ffeaf91f48ea05ea197f4056/regularize-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d28fa2a628466f788064acd7f5a069d90dea7c28cf048e85be49fbfc9c9a024d",
        "md5": "e6df8124cfb538af95a0004a658c6d64",
        "sha256": "977defdefe82d56a1f956011b561133adb8ae44ede35fbf147b09b65465fbaaa"
      },
      "downloads": -1,
      "filename": "regularize-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "e6df8124cfb538af95a0004a658c6d64",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12587,
      "upload_time": "2021-03-28T04:57:48",
      "upload_time_iso_8601": "2021-03-28T04:57:48.603051Z",
      "url": "https://files.pythonhosted.org/packages/d2/8f/a2a628466f788064acd7f5a069d90dea7c28cf048e85be49fbfc9c9a024d/regularize-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}