{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azuresdkengsysadmins@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=master)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=master)\n\n# Azure Remote Rendering client library for Python\n\nAzure Remote Rendering (ARR) is a service that enables you to render high-quality, interactive 3D content in the cloud and stream it in real time to devices, such as the HoloLens 2.\n\nThis SDK offers functionality to convert assets to the format expected by the runtime, and also to manage\nthe lifetime of remote rendering sessions.\n\nThis SDK supports version \"2021-01-01\" of the [Remote Rendering REST API](https://docs.microsoft.com/rest/api/mixedreality/2021-01-01/remote-rendering).\n\n> NOTE: Once a session is running, a client application will connect to it using one of the \"runtime SDKs\".\n> These SDKs are designed to best support the needs of an interactive application doing 3d rendering.\n> They are available in ([.net](https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering)\n> or ([C++](https://docs.microsoft.com/cpp/api/remote-rendering/)).\n\n[Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 is ending 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n\n## Prerequisites\n\nYou will need an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an [Azure Remote Rendering account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account) to use this package.\n\nIn order to follow this tutorial it is highly recommended that you [link your storage account with your ARR account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage-accounts).\n\n## Install the package\n\nInstall the Azure Remote Rendering client library for Python with [pip][pip]:\n\n```bash\npip install --pre azure-mixedreality-remoterendering\n```\n\n## Create and authenticate the client\n\nConstructing a remote rendering client requires an authenticated account, and a remote rendering endpoint.\nFor an account created in the eastus region, the account domain will have the form \"eastus.mixedreality.azure.com\".\nThere are several different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Azure Remote Rendering. But before you deploy your application to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use user-based Azure AD authentication in your app. You then grant access to your Azure Remote Rendering accounts by using your existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this method for production applications because it allows you to avoid embedding the credentials for access in your client application.\n\nSee [here](https://docs.microsoft.com/azure/remote-rendering/how-tos/authentication) for detailed instructions and information.\n\nIn all the following examples, the client is constructed with a `endpoint` parameter.\nThe available endpoints correspond to regions, and the choice of endpoint determines the region in which the service performs its work.\nAn example is `https://remoterendering.eastus2.mixedreality.azure.com`.\n\nA full list of endpoints in supported regions can be found in the [Azure Remote Rendering region list](https://docs.microsoft.com/azure/remote-rendering/reference/regions).\n\n> NOTE: For converting assets, it is preferable to pick a region close to the storage containing the assets.\n\n> NOTE: For rendering, it is strongly recommended that you pick the closest region to the devices using the service.\n> The time taken to communicate with the server impacts the quality of the experience.\n\n### Authenticating with account key authentication\n\nUse the `AzureKeyCredential` object to use an account identifier and account key to authenticate:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNTD ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\narr_endpoint = \"<ARR_ENDPOINT>\"\n\nkey_credential = AzureKeyCredential(account_key)\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=key_credential\n)\n```\n\n### Authenticating with a static access token\n\nYou can pass a Mixed Reality access token as an `AccessToken` previously retrieved from the\n[Mixed Reality STS service](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/mixedreality/azure-mixedreality-authentication)\nto be used with a Mixed Reality client library:\n\n```python\nfrom azure.mixedreality.authentication import MixedRealityStsClient\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\naccount_id = \"<ACCOUNTD ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\n\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = client.get_token()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=token,\n)\n```\n\n### Authenticating with an Azure Active Directory Credential\n\nAccount key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory\nusing the [Azure Identity library][azure_identity]. This is the recommended method for production applications. To use\nthe [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with\nthe Azure SDK, please install the `@azure/identity` package:\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to your Mixed Reality resource\nby assigning the appropriate role for your Mixed Reality service to your service principal.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNTD ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\ndefault_credential = DefaultAzureCredential()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=default_credential\n)\n```\n\n## Key concepts\n\n### RemoteRenderingClient\n\nThe `RemoteRenderingClient` is the client library used to access the RemoteRenderingService.\nIt provides methods to create and manage asset conversions and rendering sessions.\n\n### Long-Running Operations\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that convert assets, or spin up rendering sessions are modelled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns an LROPoller or AsyncLROPoller.\nCallers should wait for the operation to complete by calling result() on the poller object returned from the\n`begin_<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n[below](#examples \"Examples\").\n\n## Examples\n\n- [Convert an asset](#convert-an-asset)\n- [List conversions](#list-conversions)\n- [Create a session](#create-a-session)\n- [Extend the lease time of a session](#extend-the-lease-time-of-a-session)\n- [List sessions](#list-sessions)\n- [Stop a session](#stop-a-session)\n\n### Convert an asset\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that \"box.fbx\", found at at a path of \"/input/box/box.fbx\" of the blob container at the given storage container URI, gets converted.\n\nConverting an asset can take anywhere from seconds to hours.\nThis code uses an existing conversion poller and polls regularly until the conversion has finished or failed.\nThe default polling period is 5 seconds.\nNote that a conversion poller can be retrieved using the client.get_asset_conversion_poller using the id of an existing conversion and a client.\n\nOnce the conversion process finishes the output is written to the specified output container under a path of \"/output/<conversion_id>/box.arrAsset\".\nThe path can be retrieved from the output.asset_uri of a successful conversion.\n\n```python\n    conversion_id = str(uuid.uuid4()) # A randomly generated uuid is a good choice for a conversion_id.\n\n    input_settings = AssetConversionInputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        relative_input_asset_path=\"box.fbx\",\n        blob_prefix=\"input/box\"\n    )\n    output_settings = AssetConversionOutputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        blob_prefix=\"output/\"+conversion_id,\n        output_asset_filename=\"convertedBox.arrAsset\" #if no output_asset_filename <input asset filename>.arrAsset will be the name of the resulting converted asset\n    )\n    try:\n        conversion_poller = client.begin_asset_conversion(\n            conversion_id=conversion_id,\n            input_settings=input_settings,\n            output_settings=output_settings\n        )\n\n        print(\"Conversion with id:\", conversion_id, \"created. Waiting for completion.\")\n        conversion = conversion_poller.result()\n        print(\"conversion output:\", conversion.output.asset_uri)\n\n    except Exception as e:\n        print(\"Conversion failed\", e)\n```\n\n### List conversions\n\nYou can get information about your conversions using the `list_asset_conversions` method.\nThis method may return conversions which have yet to start, conversions which are running and conversions which have finished.\nIn this example, we list all conversions and print id and creation ad as well as the output asset URIs of successful conversions.\n\n```python\n    print(\"conversions:\")\n    for c in client.list_asset_conversions():\n        print(\n            \"\\t conversion:  id:\",\n            c.id,\n            \"status:\",\n            c.status,\n            \"created on:\",\n            c.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n        if c.status == AssetConversionStatus.SUCCEEDED:\n            print(\"\\t\\tconversion result URI:\", c.output.asset_uri)\n```\n\n### Create a session\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that a new rendering session be started.\n\n```python\n    print(\"starting rendering session with id:\", session_id)\n    try:\n        session_poller = client.begin_rendering_session(\n            session_id=session_id, size=RenderingSessionSize.STANDARD, lease_time_minutes=20\n        )\n        print(\n            \"rendering session with id:\",\n            session_id,\n            \"created. Waiting for session to be ready.\",\n        )\n        session = session_poller.result()\n        print(\n            \"session with id:\",\n            session.id,\n            \"is ready. lease_time_minutes:\",\n            session.lease_time_minutes,\n        )\n    except Exception as e:\n        print(\"Session startup failed\", e)\n```\n\n### Extend the lease time of a session\n\nIf a session is approaching its maximum lease time, but you want to keep it alive, you will need to make a call to \nincrease its maximum lease time.\nThis example shows how to query the current properties and then extend the lease if it will expire soon.\n\n> NOTE: The runtime SDKs also offer this functionality, and in many typical scenarios, you would use them to\n> extend the session lease.\n\n```python\n    session = client.get_rendering_session(session_id)\n    if session.lease_time_minutes - session.elapsed_time_minutes < 2:\n        session = client.update_rendering_session(\n            session_id=session_id, lease_time_minutes=session.lease_time_minutes + 10\n        )\n```\n\n### List sessions\n\nYou can get information about your sessions using the `list_rendering_sessions` method of the client.\nThis method may return sessions which have yet to start and sessions which are ready.\n\n```python\n    print(\"sessions:\")\n    rendering_sessions = client.list_rendering_sessions()\n    for session in rendering_sessions:\n        print(\n            \"\\t session:  id:\",\n            session.id,\n            \"status:\",\n            session.status,\n            \"created on:\",\n            session.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n```\n\n### Stop a Session\n\nThe following code will stop a running session with given id. Since running sessions incur ongoing costs it is\nrecommended to stop sessions which are not needed anymore.\n\n```python\n    client.stop_rendering_session(session_id)\n    print(\"session with id:\", session_id, \"stopped\")\n```\n\n## Troubleshooting\n\nFor general troubleshooting advice concerning Azure Remote Rendering, see [the Troubleshoot page](https://docs.microsoft.com/azure/remote-rendering/resources/troubleshoot) for remote rendering at docs.microsoft.com.\n\nThe client methods and waiting for poller results will throw exceptions if the request failed.\n\nIf the asset in a conversion is invalid, the conversion poller will throw an exception with an error containing details.\nOnce the conversion service is able to process the file, a &lt;assetName&gt;.result.json file will be written to the output container.\nIf the input asset is invalid, then that file will contain a more detailed description of the problem.\n\nSimilarly, sometimes when a session is requested, the session ends up in an error state.\nThe poller will throw an exception containing details of the error in this case. Session errors are usually transient\nand requesting a new session should succeed.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n### Exceptions\n\nThe Remote Rendering client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Async APIs\n\nThis library also includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). Async clients\nare found under the `azure.mixedreality.remoterendering.aio` namespace.\n\n\n\n## Next steps\n\n- Read the [Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n- Learn about the runtime SDKs:\n  - .NET: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n  - C++: https://docs.microsoft.com/cpp/api/remote-rendering/\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nIf you'd like to contribute to this library, please read the\n[contributing guide](https://github.com/Azure/azure-sdk-for-python/blob/master/CONTRIBUTING.md) to learn more about how\nto build and test the code.\n\n<!-- LINKS -->\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%remoterendering%2Fazure-mixedreality-remoterendering%2FREADME.png)\n\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\n\n[pip]: https://pypi.org/project/pip/\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging# Release History\n\n## 1.0.0b1 (2021-11-15)\n\n- Initial release.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-mixedreality-remoterendering",
    "package_url": "https://pypi.org/project/azure-mixedreality-remoterendering/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-mixedreality-remoterendering/",
    "project_urls": {
      "Bug Reports": "https://github.com/Azure/azure-sdk-for-python/issues",
      "Homepage": "https://github.com/Azure/azure-sdk-for-python",
      "Source": "https://github.com/Azure/azure-sdk-python"
    },
    "release_url": "https://pypi.org/project/azure-mixedreality-remoterendering/1.0.0b1/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.6.0)",
      "azure-mixedreality-authentication (>=1.0.0b1)",
      "msrest (>=0.5.0)",
      "futures ; python_version<'3.0'",
      "azure-mixedreality-nspkg ; python_version<'3.0'",
      "enum34 (>=1.0.4) ; python_version<'3.4'",
      "typing ; python_version<'3.5'"
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Azure Remote Rendering Client Library for Python",
    "version": "1.0.0b1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12029291,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4592d76088c762386f6d079e6bfe78cea6e01def17dd0bd1aa4f127a1db1500",
          "md5": "639f9a43283bf60c2bd17746164f305e",
          "sha256": "992055777bc960f6ca0e0e2529bd0e59c90331dcb61afba60344fba1f4c5ed08"
        },
        "downloads": -1,
        "filename": "azure_mixedreality_remoterendering-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "639f9a43283bf60c2bd17746164f305e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 51315,
        "upload_time": "2021-11-15T18:42:52",
        "upload_time_iso_8601": "2021-11-15T18:42:52.280029Z",
        "url": "https://files.pythonhosted.org/packages/c4/59/2d76088c762386f6d079e6bfe78cea6e01def17dd0bd1aa4f127a1db1500/azure_mixedreality_remoterendering-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee4abc889a5fd80bca982db24dbb3663d532bff9d6b91fc02465433d6d5196e3",
          "md5": "f0e40d794f6a35ca274ddbfc084f99f4",
          "sha256": "a40ce0a23a39a8dfbe82775acbf6a4881057e96915666f990be043e39e375f5c"
        },
        "downloads": -1,
        "filename": "azure-mixedreality-remoterendering-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "f0e40d794f6a35ca274ddbfc084f99f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 85053,
        "upload_time": "2021-11-15T18:42:54",
        "upload_time_iso_8601": "2021-11-15T18:42:54.716298Z",
        "url": "https://files.pythonhosted.org/packages/ee/4a/bc889a5fd80bca982db24dbb3663d532bff9d6b91fc02465433d6d5196e3/azure-mixedreality-remoterendering-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4592d76088c762386f6d079e6bfe78cea6e01def17dd0bd1aa4f127a1db1500",
        "md5": "639f9a43283bf60c2bd17746164f305e",
        "sha256": "992055777bc960f6ca0e0e2529bd0e59c90331dcb61afba60344fba1f4c5ed08"
      },
      "downloads": -1,
      "filename": "azure_mixedreality_remoterendering-1.0.0b1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "639f9a43283bf60c2bd17746164f305e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 51315,
      "upload_time": "2021-11-15T18:42:52",
      "upload_time_iso_8601": "2021-11-15T18:42:52.280029Z",
      "url": "https://files.pythonhosted.org/packages/c4/59/2d76088c762386f6d079e6bfe78cea6e01def17dd0bd1aa4f127a1db1500/azure_mixedreality_remoterendering-1.0.0b1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee4abc889a5fd80bca982db24dbb3663d532bff9d6b91fc02465433d6d5196e3",
        "md5": "f0e40d794f6a35ca274ddbfc084f99f4",
        "sha256": "a40ce0a23a39a8dfbe82775acbf6a4881057e96915666f990be043e39e375f5c"
      },
      "downloads": -1,
      "filename": "azure-mixedreality-remoterendering-1.0.0b1.zip",
      "has_sig": false,
      "md5_digest": "f0e40d794f6a35ca274ddbfc084f99f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85053,
      "upload_time": "2021-11-15T18:42:54",
      "upload_time_iso_8601": "2021-11-15T18:42:54.716298Z",
      "url": "https://files.pythonhosted.org/packages/ee/4a/bc889a5fd80bca982db24dbb3663d532bff9d6b91fc02465433d6d5196e3/azure-mixedreality-remoterendering-1.0.0b1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}