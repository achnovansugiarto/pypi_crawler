{
  "info": {
    "author": "ddjerqq",
    "author_email": "ddjerqq@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# RGBPRINT 4.0.1\r\n![rgbprint-in-rainbow-gradient-color](https://qu.ax/taDN.png)\r\n![rgbprint-blue-purple](https://qu.ax/JLnS.gif)\r\n![rgbprint-blue-purple](https://qu.ax/pKpa.gif)\r\n\r\n## Print gradients and colors on your terminal.\r\n\r\n## Components:\r\n>\r\n> see below for details.\r\n> \r\n> - functions\r\n> \r\n>   - rgbprint\r\n>   - gradient_print\r\n>   - gradient_scroll\r\n>   - gradient_change\r\n>\r\n> - classes\r\n>   - Color\r\n\r\n# Basic examples:\r\n> #### use rgbprint:\r\n> ```python\r\n> from rgbprint import rgbprint\r\n> rgbprint(\"[+] successfully connected to database\", color=\"green\")\r\n> ```\r\n> ![rgbprint-green](https://qu.ax/bqVd.png)\r\n> \r\n> #### inject colors in strings:\r\n> ```python\r\n> from rgbprint import Color\r\n> print(f\"[{Color.red}CRITICAL{Color.reset}] encountered error in the program\")\r\n> ```\r\n> ![inject-color](https://qu.ax/RQOn.png)\r\n> \r\n> #### print gradients\r\n> ```python\r\n> from rgbprint import gradient_print, Color\r\n> gradient_print(\r\n>     \"[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz\", \r\n>     start_color=Color.yellow_green, \r\n>     end_color=Color.dark_magenta\r\n> )\r\n> ```\r\n> ![gradient-print](https://qu.ax/snQA.png)\r\n> \r\n> #### scroll gradients\r\n> ```python\r\n> from rgbprint import gradient_scroll, Color\r\n> gradient_scroll(\r\n>     \"[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz\", \r\n>     start_color=0x4BBEE3, \r\n>     end_color=Color.medium_violet_red\r\n> )\r\n> ```\r\n> ![gradient-scroll](https://qu.ax/uyo.gif)\r\n> \r\n> #### change gradients\r\n> ```python\r\n> from rgbprint import gradient_change, Color\r\n> gradient_change(\r\n>     \"[CRITICAL] system failure, program can't open file in location C:/foo/bar/baz.tgz\", \r\n>     start_color=0x4BBEE3, \r\n>     end_color=Color.medium_violet_red\r\n> )\r\n> ```\r\n> ![gradient-scroll](https://qu.ax/uegj.gif)\r\n\r\n# Basic Results\r\n![chimera](https://qu.ax/FMFZ.png)\r\n![ninetails-email-spoofer](https://qu.ax/Cxcj.png)\r\n\r\n# Functions:\r\n\r\n## rgbprint\r\n![rgbprint-green](https://qu.ax/bqVd.png)\r\n> print but with color keyword argument support.\r\n> \r\n> Prints the values to sys.stdout.\r\n> \r\n> the color argument gets converted to a `Color` object before getting printed, thus it must be an instance of `ColorType`\r\n> \r\n> ```python\r\n> rgbprint(\r\n>       *values, \r\n>       sep: str = \" \",\r\n>       end: str = \"\\n\", \r\n>       color: Optional[ColorType] = None,\r\n> ) -> None\r\n> ```\r\n\r\n> ### Args:\r\n> - *values (`Any`): values to print.\r\n> - color (`ColorType`): `optional` color. see examples down below for supported formats.\r\n> - sep (`str`): `optional`, string inserted between values, default a space.\r\n> - end (`str`): `optional`, string appended after the last value, default a newline.\r\n\r\n> ### Examples:\r\n> import the package\r\n> ```python\r\n> from rgbprint import rgbprint \r\n> from rgbprint import Color \r\n> ```\r\n> basic colored print\r\n> ```python\r\n> user = \"john smith\"\r\n> rgbprint(\"welcome\", user, \"you are\", 25, \"years old\", color=Color.forest_green)\r\n> ```\r\n> similar functionality to the built-in `print` function, support for unpacking iterables.\r\n> ```python\r\n> rgbprint(*[\"orange\", \"apple\", \"banana\"], sep=\"_\", color=\"yellow\")\r\n> ```\r\n> all supported color formats\r\n> ```python\r\n> rgbprint(\"hello\", color=\"red\")\r\n> rgbprint(\"hello\", color=0xff00ff)\r\n> rgbprint(\"hello\", color=\"#ff00ff\")\r\n> rgbprint(\"hello\", color=\"ff00ff\")\r\n> rgbprint(\"hello\", color=[255, 0, 255])\r\n> rgbprint(\"hello\", color=(255, 0, 255))\r\n> rgbprint(\"hello\", color=(255, 0, 0xFF))\r\n> rgbprint(\"hello\", color=Color.red)\r\n> rgbprint(\"hello\", color=Color.random)\r\n> rgbprint(\"hello\", color=Color(255, 0, 127))\r\n> ```\r\n\r\n> ### Raises:\r\n> - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).\r\n> - TypeError: if the color is of unsupported type. or some other error.\r\n\r\n## gradient_print\r\n![gradient-print](https://qu.ax/snQA.png)\r\n> print gradients on your terminal\r\n> ```python\r\n> gradient_print(\r\n>       *values, \r\n>       start_color: Optional[ColorType] = None, \r\n>       end_color: Optional[ColorType] = None, \r\n>       sep: str = \" \", \r\n>       end: str = \"\\n\"\r\n> ) -> None\r\n> ```\r\n\r\n> ### Args:\r\n> - *values (`Any`): values to print.\r\n> - start_color (`ColorType`): start_color. see examples down below for supported formats.\r\n> - end_color (`ColorType`): end_color. see examples down below for supported formats.\r\n> - sep (`str`): `optional`, string inserted between values, default a space.\r\n> - end (`str`): `optional`, string appended after the last value, default a newline.\r\n\r\n> ### Examples:\r\n> import the package\r\n> ```python\r\n> from rgbprint import gradient_print\r\n> from rgbprint import Color \r\n> ```\r\n> basic gradient scroll\r\n> ```python\r\n> user = \"john smith\"\r\n> gradient_print(\"welcome\", user, \"you are\", 25, \"years old\", start_color=\"red, end_color=\"yellow\")\r\n> ```\r\n> more examples\r\n> ```python\r\n> username = \"john doe\"\r\n> gradient_print(\"hello\", start_color=\"red\", end_color=\"yellow\")\r\n> gradient_print(\"hello\", username, \"welcome to the app\", start_color=Color.forest_green, end_color=0xFF00FF)\r\n> gradient_print(\"[+] loading data, please wait...\", start_color=Color.aqua_marine, end_color=Color.peach_puff)\r\n> ```\r\n> similar functionality to the built-in `print` function, support for unpacking iterables.\r\n> ```python\r\n> gradient_print(*[\"orange\", \"apple\", \"banana\"], sep=\"_\", start_color=\"yellow\", end_color=\"red\")\r\n> ```\r\n> all supported color formats\r\n> ```python\r\n> gradient_print(\"hello\", start_color=\"red\",              end_color=\"red\")\r\n> gradient_print(\"hello\", start_color=0xff00ff,           end_color=0xff00ff)\r\n> gradient_print(\"hello\", start_color=\"#ff00ff\",          end_color=\"#ff00ff\")\r\n> gradient_print(\"hello\", start_color=\"ff00ff\",           end_color=\"ff00ff\")\r\n> gradient_print(\"hello\", start_color=[255, 0, 255],      end_color=[255, 0, 255])\r\n> gradient_print(\"hello\", start_color=(255, 0, 255),      end_color=(255, 0, 255))\r\n> gradient_print(\"hello\", start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))\r\n> gradient_print(\"hello\", start_color=Color.red,          end_color=Color.red)\r\n> gradient_print(\"hello\", start_color=Color.random,       end_color=Color.random)\r\n> gradient_print(\"hello\", start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))\r\n> ```\r\n\r\n> ### Raises:\r\n> - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).\r\n> - TypeError: if the color is of unsupported type, or the function is missing arguments.\r\n\r\n## gradient_scroll\r\n![gradient-scroll](https://qu.ax/uyo.gif)\r\n> scroll gradients on your terminal\r\n> ```python\r\n> gradient_scroll(\r\n>       *values, \r\n>       start_color: Optional[ColorType] = None, \r\n>       end_color: Optional[ColorType] = None,\r\n>       delay: float = 0.03,\r\n>       times: int = 4,\r\n>       reverse: bool = False,\r\n>       sep: str = \" \", \r\n>       end: str = \"\\n\",\r\n> ) -> None\r\n> ```\r\n\r\n> ### Args:\r\n> - *values (`Any`): values to print.\r\n> - start_color (`ColorType`): start_color. see examples down below for supported formats.\r\n> - end_color (`ColorType`): end_color. see examples down below for supported formats.\r\n> - delay (`float`): `optional`, the delay between the change of the gradient, recommended range: .05 - .1\r\n> - times (`int`): `optional`, the amount of times to change the gradient in place.\r\n> - reverse (`bool`): `optional` whether to start with the end color or not.\r\n> - sep (`str`): `optional`, string inserted between values, default a space.\r\n> - end (`str`): `optional`, string appended after the last value, default a newline.\r\n\r\n> ### Examples:\r\n> import the package\r\n> ```python\r\n> from rgbprint import gradient_scroll\r\n> from rgbprint import Color \r\n> ```\r\n> basic gradient print\r\n> ```python\r\n> user = \"john smith\"\r\n> gradient_scroll(\"welcome\", user, \"you are\", 25, \"years old\", start_color=\"red, end_color=\"yellow\")\r\n> ```\r\n> more examples\r\n> ```python\r\n> username = \"john doe\"\r\n> gradient_scroll(\"hello\", start_color=\"red\", end_color=\"yellow\")\r\n> gradient_scroll(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1)\r\n> gradient_scroll(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1, times=10)\r\n> gradient_scroll(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1, times=10, reverse=True)\r\n> gradient_scroll(\"hello\", username, \"welcome to the app\", start_color=Color.forest_green, end_color=0xFF00FF)\r\n> gradient_scroll(\"[+] loading data, please wait...\", start_color=Color.aqua_marine, end_color=Color.peach_puff)\r\n> ```\r\n> similar functionality to the built-in `print` function, support for unpacking iterables.\r\n> ```python\r\n> gradient_scroll(*[\"orange\", \"apple\", \"banana\"], sep=\"_\", start_color=\"yellow\", end_color=\"red\")\r\n> ```\r\n> all supported color formats\r\n> ```python\r\n> gradient_scroll(\"hello\", start_color=\"red\",              end_color=\"red\")\r\n> gradient_scroll(\"hello\", start_color=0xff00ff,           end_color=0xff00ff)\r\n> gradient_scroll(\"hello\", start_color=\"#ff00ff\",          end_color=\"#ff00ff\")\r\n> gradient_scroll(\"hello\", start_color=\"ff00ff\",           end_color=\"ff00ff\")\r\n> gradient_scroll(\"hello\", start_color=[255, 0, 255],      end_color=[255, 0, 255])\r\n> gradient_scroll(\"hello\", start_color=(255, 0, 255),      end_color=(255, 0, 255))\r\n> gradient_scroll(\"hello\", start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))\r\n> gradient_scroll(\"hello\", start_color=Color.red,          end_color=Color.red)\r\n> gradient_scroll(\"hello\", start_color=Color.random,       end_color=Color.random)\r\n> gradient_scroll(\"hello\", start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))\r\n> ```\r\n\r\n> ### Raises:\r\n> - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).\r\n> - TypeError: if the color is of unsupported type, or the function is missing arguments.\r\n\r\n## gradient_change\r\n![gradient-scroll](https://qu.ax/uegj.gif)\r\n> change gradients in place on your terminal\r\n> this function is very similar to `gradient_scroll` almost identical.\r\n> ```python\r\n> gradient_change(\r\n>       *values, \r\n>       start_color: Optional[ColorType] = None, \r\n>       end_color: Optional[ColorType] = None,\r\n>       delay: float = 0.03,\r\n>       times: int = 4,\r\n>       reverse: bool = False,\r\n>       sep: str = \" \", \r\n>       end: str = \"\\n\",\r\n> ) -> None\r\n> ```\r\n\r\n> ### Args:\r\n> - *values (`Any`): values to print.\r\n> - start_color (`ColorType`): start_color. see examples down below for supported formats.\r\n> - end_color (`ColorType`): end_color. see examples down below for supported formats.\r\n> - delay (`float`): `optional`, the delay between the change of the gradient, recommended range: .05 - .1\r\n> - times (`int`): `optional`, the amount of times to change the gradient in place.\r\n> - reverse (`bool`): `optional` whether to start with the end color or not.\r\n> - sep (`str`): `optional`, string inserted between values, default a space.\r\n> - end (`str`): `optional`, string appended after the last value, default a newline.\r\n\r\n> ### Examples:\r\n> import the package\r\n> ```python\r\n> from rgbprint import gradient_change\r\n> from rgbprint import Color \r\n> ```\r\n> basic gradient print\r\n> ```python\r\n> user = \"john smith\"\r\n> gradient_change(\"welcome\", user, \"you are\", 25, \"years old\", start_color=\"red, end_color=\"yellow\")\r\n> ```\r\n> more examples\r\n> ```python\r\n> username = \"john doe\"\r\n> gradient_change(\"hello\", start_color=\"red\", end_color=\"yellow\")\r\n> gradient_change(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1)\r\n> gradient_change(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1, times=10)\r\n> gradient_change(\"hello\", start_color=\"red\", end_color=\"yellow\", delay=0.1, times=10, reverse=True)\r\n> gradient_change(\"hello\", username, \"welcome to the app\", start_color=Color.forest_green, end_color=0xFF00FF)\r\n> gradient_change(\"[+] loading data, please wait...\", start_color=Color.aqua_marine, end_color=Color.peach_puff)\r\n> ```\r\n> similar functionality to the built-in `print` function, support for unpacking iterables.\r\n> ```python\r\n> gradient_change(*[\"orange\", \"apple\", \"banana\"], sep=\"_\", start_color=\"yellow\", end_color=\"red\")\r\n> ```\r\n> all supported color formats\r\n> ```python\r\n> gradient_change(\"hello\", start_color=\"red\",              end_color=\"red\")\r\n> gradient_change(\"hello\", start_color=0xff00ff,           end_color=0xff00ff)\r\n> gradient_change(\"hello\", start_color=\"#ff00ff\",          end_color=\"#ff00ff\")\r\n> gradient_change(\"hello\", start_color=\"ff00ff\",           end_color=\"ff00ff\")\r\n> gradient_change(\"hello\", start_color=[255, 0, 255],      end_color=[255, 0, 255])\r\n> gradient_change(\"hello\", start_color=(255, 0, 255),      end_color=(255, 0, 255))\r\n> gradient_change(\"hello\", start_color=(255, 0, 0xFF),     end_color=(255, 0, 0xFF))\r\n> gradient_change(\"hello\", start_color=Color.red,          end_color=Color.red)\r\n> gradient_change(\"hello\", start_color=Color.random,       end_color=Color.random)\r\n> gradient_change(\"hello\", start_color=Color(255, 0, 127), end_color=Color(255, 0, 127))\r\n> ```\r\n\r\n> ### Raises:\r\n> - ValueError: if the color is in an unsupported format, or is out of range of 0-16777215 (0x000000-0xFFFFFF).\r\n> - TypeError: if the color is of unsupported type, or the function is missing arguments.\r\n\r\n# Classes:\r\n\r\n## Color\r\n> Color class, to represent a 8bit ANSI colors\r\n> \r\n> instances of this class are printable, when you print them, they change the color of your terminal.\r\n> ```python\r\n> Color(r, g, b)\r\n> ```\r\n\r\n> ## Slots:\r\n> \r\n> - r: (`int` in `0..256`): red value of the color\r\n> - g: (`int` in `0..256`): green value of the color\r\n> - b: (`int` in `0..256`): blue value of the color\r\n\r\n> ## Initialization: \r\n> all the ways below are valid to initialize a color:\r\n> ```python\r\n> Color(0xff00ff)\r\n> Color(\"#ff00ff\")\r\n> Color(\"ff00ff\")\r\n> Color([255, 0, 255])\r\n> Color(255, 0, 255)\r\n> Color(255, 0, 0xFF)\r\n> Color(Color.red)\r\n> Color(Color.random)\r\n> ```\r\n\r\n> ## Different ways to initialize colors: \r\n> colors can be initialized in many ways:\r\n> - `Color(int, int, int)` \r\n>   - `Color(255, 0, 255)` \r\n>   - `Color(0x4B, 0xBB, 0xE3)` \r\n>   - `Color(*(127, 127, 127))` \r\n>\r\n> \r\n> - `Color(str)`\r\n>   - `Color(\"#FF00FF\")` \r\n>   - `Color(\"FF00FF\")` \r\n>   - `Color(\"red)` \r\n>   - `Color(\"green\")`\r\n>\r\n> \r\n> - `Color(int)`\r\n>   - `Color(0x4BBEE3)` \r\n>   - `Color(16777215)`\r\n> \r\n> \r\n> - `Color(Color)`\r\n>   - `red = Color.red; Color(red)`\r\n> \r\n> \r\n> - `Color(Tuple[int, int, int] | List[int, int, int])`\r\n>   - `Color((100, 255, 16))`\r\n>   - `Color([100, 255, 16])`\r\n \r\n> ## Destruction\r\n> you can destruct colors into its red, green, blue components like so:\r\n> ```python\r\n> r, g, b = Color.red\r\n> assert r == 255\r\n> assert g == 0\r\n> assert b == 0\r\n> \r\n> rgb = tuple(Color(\"FF00FF\"))\r\n> assert isinstance(rgb, tuple)\r\n> assert rgb == (255, 0, 255)\r\n> ```\r\n\r\n> ## Dunder/magic method implementations:\r\n> the color class has some dunder magic methods implemented.\r\n> \r\n> - `__iter__` to destruct the colors.\r\n> - `__str__` to print the colors\r\n> - `__repr__` to represent colors for debugging purposes.\r\n> - `__eq__` to compare 2 colors, and see if they are the same color.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ddjerqq/rgbprint",
    "keywords": "rgb print gradient color colorama",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rgbprint",
    "package_url": "https://pypi.org/project/rgbprint/",
    "platform": null,
    "project_url": "https://pypi.org/project/rgbprint/",
    "project_urls": {
      "Homepage": "https://github.com/ddjerqq/rgbprint"
    },
    "release_url": "https://pypi.org/project/rgbprint/4.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Print colors and gradients in your terminal. Official github: https://github.com/ddjerqq/rgbprint",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15204130,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5908bda8fdf680eedc3cb31c1a5a26657929a7d4d2006f05537b9864ba02cf79",
          "md5": "8f474b88c501a531585833d7848f0f12",
          "sha256": "88a69a3c9aabe3f4b1e13b401815443c9fc08ac83c68c8fa8d5c6e225469e650"
        },
        "downloads": -1,
        "filename": "rgbprint-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f474b88c501a531585833d7848f0f12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9946,
        "upload_time": "2022-03-03T12:37:58",
        "upload_time_iso_8601": "2022-03-03T12:37:58.778455Z",
        "url": "https://files.pythonhosted.org/packages/59/08/bda8fdf680eedc3cb31c1a5a26657929a7d4d2006f05537b9864ba02cf79/rgbprint-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41135dbfe303593f212144ba9d89f3a96e720009d7953cd0c4df6b1bbab718d4",
          "md5": "67f2378359747d857ee6a5e05bf73f50",
          "sha256": "fc5232105aa2484f5e15ab1d854f3f1a5e0e8c0b41020740786caa7e23129fd1"
        },
        "downloads": -1,
        "filename": "rgbprint-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67f2378359747d857ee6a5e05bf73f50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10028,
        "upload_time": "2022-03-11T18:54:07",
        "upload_time_iso_8601": "2022-03-11T18:54:07.468520Z",
        "url": "https://files.pythonhosted.org/packages/41/13/5dbfe303593f212144ba9d89f3a96e720009d7953cd0c4df6b1bbab718d4/rgbprint-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9033367faee811eebfc28c91693c5b9c32b251b1594860e5c70368f7100169a7",
          "md5": "6d67aa3e04eced2a844db7715f0e7c71",
          "sha256": "c9760b7ae67baf771f91a8fdd2e270d861e14a5dacf6ed20ab74373a691b521f"
        },
        "downloads": -1,
        "filename": "rgbprint-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d67aa3e04eced2a844db7715f0e7c71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11788,
        "upload_time": "2022-03-20T14:09:55",
        "upload_time_iso_8601": "2022-03-20T14:09:55.896598Z",
        "url": "https://files.pythonhosted.org/packages/90/33/367faee811eebfc28c91693c5b9c32b251b1594860e5c70368f7100169a7/rgbprint-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065f9a9ed06a3877b9fff1686fcb9f13d3acb384fcfb96662c1a88bf3c0a0818",
          "md5": "a15817203c43e1428475eab2459424b0",
          "sha256": "7e882c3b47c3c6ca8ea3d96fdd2b60d9ec339e01e1f392d5c6ca9eaeddbaad64"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a15817203c43e1428475eab2459424b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8154,
        "upload_time": "2022-05-11T20:42:07",
        "upload_time_iso_8601": "2022-05-11T20:42:07.262208Z",
        "url": "https://files.pythonhosted.org/packages/06/5f/9a9ed06a3877b9fff1686fcb9f13d3acb384fcfb96662c1a88bf3c0a0818/rgbprint-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "066d9205caa41e3a6e39b3e5f1ab24ca5846d669d8d9231c6a87546e5f66dd74",
          "md5": "fb54216016671787e8ee90a7c30bc930",
          "sha256": "ae1d1f6e5e41e19e0f058a39103536e2a02c5374bfe9e3a0b79dbe26257b1289"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb54216016671787e8ee90a7c30bc930",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13130,
        "upload_time": "2022-05-12T15:26:51",
        "upload_time_iso_8601": "2022-05-12T15:26:51.263265Z",
        "url": "https://files.pythonhosted.org/packages/06/6d/9205caa41e3a6e39b3e5f1ab24ca5846d669d8d9231c6a87546e5f66dd74/rgbprint-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15990f525f7dfac993994886f69314b02e79f2c524ce1005cf1f3638831ded5d",
          "md5": "87e80b0a9a838db13e74a2f8d038f015",
          "sha256": "65510f6282e55409bfc3a4103d1a410cf1584ccea83e2d8f1d95b51761eaae35"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "87e80b0a9a838db13e74a2f8d038f015",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13145,
        "upload_time": "2022-05-15T11:23:02",
        "upload_time_iso_8601": "2022-05-15T11:23:02.435525Z",
        "url": "https://files.pythonhosted.org/packages/15/99/0f525f7dfac993994886f69314b02e79f2c524ce1005cf1f3638831ded5d/rgbprint-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1179b64612386cf21f6962eab2e0dcf005c561f2f8dd1984bba734cbc7e5e35c",
          "md5": "3abafd87f7d7972cb60e4f039d6a7b57",
          "sha256": "f1050816240cbd77c531608d60accaf3e2cee9990e817a41326bdbe390d432ae"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3abafd87f7d7972cb60e4f039d6a7b57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13094,
        "upload_time": "2022-05-30T21:59:28",
        "upload_time_iso_8601": "2022-05-30T21:59:28.485843Z",
        "url": "https://files.pythonhosted.org/packages/11/79/b64612386cf21f6962eab2e0dcf005c561f2f8dd1984bba734cbc7e5e35c/rgbprint-3.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "852839251fbdff613820e66c4389be08c9f04c52ae9c8e3e9ae8130372bdba21",
          "md5": "e82a3eba30f711510b81fd26bf89b30d",
          "sha256": "d8a65d76666a6e8d252fbaf5007407d94a7242de8a6ef022d96c96dc6e57bd13"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e82a3eba30f711510b81fd26bf89b30d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14616,
        "upload_time": "2022-06-01T14:33:51",
        "upload_time_iso_8601": "2022-06-01T14:33:51.155858Z",
        "url": "https://files.pythonhosted.org/packages/85/28/39251fbdff613820e66c4389be08c9f04c52ae9c8e3e9ae8130372bdba21/rgbprint-3.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1e93a19efe75890f5ee7bbc5a0fce49b910a26f0e9d544da382a0f6933c3be5",
          "md5": "e69a36b08b57f30237bdbdc237e01522",
          "sha256": "18f5d6c1fa7723000ecea5322acba8ac6776a7006ca05282a9b0164b0f18ea39"
        },
        "downloads": -1,
        "filename": "rgbprint-3.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e69a36b08b57f30237bdbdc237e01522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14506,
        "upload_time": "2022-06-05T11:41:32",
        "upload_time_iso_8601": "2022-06-05T11:41:32.306539Z",
        "url": "https://files.pythonhosted.org/packages/e1/e9/3a19efe75890f5ee7bbc5a0fce49b910a26f0e9d544da382a0f6933c3be5/rgbprint-3.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28dcdb0becf7c4fe69aa3522835f81ddf9f065d7fed0018a8e6462a1986bbd7d",
          "md5": "8e5c1d19efd54a528840206cb163a6e3",
          "sha256": "e75b72ead73e9b0b638c48e24c59d59bc4760ca432746402c630084f635cac76"
        },
        "downloads": -1,
        "filename": "rgbprint-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e5c1d19efd54a528840206cb163a6e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18229,
        "upload_time": "2022-09-24T14:00:49",
        "upload_time_iso_8601": "2022-09-24T14:00:49.546152Z",
        "url": "https://files.pythonhosted.org/packages/28/dc/db0becf7c4fe69aa3522835f81ddf9f065d7fed0018a8e6462a1986bbd7d/rgbprint-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "855a413115519db7dc2dc29413b712679fb5ecff0aef6e4b5794fbc583ae3867",
          "md5": "dcf87341d8ecaf8606d1e6f5ab9363f8",
          "sha256": "725a1cfd23b5d67c16e17054e35b3dcdefc9441813d7ec795a102125b9516834"
        },
        "downloads": -1,
        "filename": "rgbprint-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dcf87341d8ecaf8606d1e6f5ab9363f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18668,
        "upload_time": "2022-09-24T15:32:18",
        "upload_time_iso_8601": "2022-09-24T15:32:18.439368Z",
        "url": "https://files.pythonhosted.org/packages/85/5a/413115519db7dc2dc29413b712679fb5ecff0aef6e4b5794fbc583ae3867/rgbprint-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb50e0f9f8a6de373f6431928bcb4b1499d34708994326b85cea4f791da4f39b",
          "md5": "d2e02b7915802225940073352ad4bc2d",
          "sha256": "b2dae6492e3f2c28b08dd6cf8d42c9b1a49fe3924c1a4f73a775b212927c84a8"
        },
        "downloads": -1,
        "filename": "rgbprint-4.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d2e02b7915802225940073352ad4bc2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18624,
        "upload_time": "2022-09-25T11:47:06",
        "upload_time_iso_8601": "2022-09-25T11:47:06.461731Z",
        "url": "https://files.pythonhosted.org/packages/bb/50/e0f9f8a6de373f6431928bcb4b1499d34708994326b85cea4f791da4f39b/rgbprint-4.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb50e0f9f8a6de373f6431928bcb4b1499d34708994326b85cea4f791da4f39b",
        "md5": "d2e02b7915802225940073352ad4bc2d",
        "sha256": "b2dae6492e3f2c28b08dd6cf8d42c9b1a49fe3924c1a4f73a775b212927c84a8"
      },
      "downloads": -1,
      "filename": "rgbprint-4.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d2e02b7915802225940073352ad4bc2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18624,
      "upload_time": "2022-09-25T11:47:06",
      "upload_time_iso_8601": "2022-09-25T11:47:06.461731Z",
      "url": "https://files.pythonhosted.org/packages/bb/50/e0f9f8a6de373f6431928bcb4b1499d34708994326b85cea4f791da4f39b/rgbprint-4.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}