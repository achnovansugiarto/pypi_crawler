{
  "info": {
    "author": "Simo Ryu",
    "author_email": "cloneofsimo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Paint-with-Words, Implemented with [Stable diffusion](https://github.com/CompVis/stable-diffusion) using [Diffuers pipeline](https://github.com/huggingface/diffusers)\n\n[![CoRR preprint arXiv:2211.01324](http://img.shields.io/badge/cs.CL-arXiv%3A2211.01324-B31B1B.svg)](https://arxiv.org/abs/2211.01324)\n[![CI](https://github.com/shunk031/paint-with-words-pipeline/actions/workflows/ci.yaml/badge.svg)](https://github.com/shunk031/paint-with-words-pipeline/actions/workflows/ci.yaml)\n![Python](https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue?logo=python)\n\nUnofficial [ðŸ¤— huggingface/diffusers](https://github.com/huggingface/diffusers)-based implementation of Paint-with-Words proposed by the paper *eDiff-I: Text-to-Image Diffusion Models with an Ensemble of Expert Denoisers*. \nThis implementation is based on [cloneofsimo/paint-with-words-sd](https://github.com/cloneofsimo/paint-with-words-sd).\n\n## Subtle Control of the Image Generation\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/rabbit_mage.jpg\">\n</p>\n<!-- #endregion -->\n\n> Notice how without PwW the cloud is missing.\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/road.jpg\">\n</p>\n<!-- #endregion -->\n\n> Notice how without PwW, abandoned city is missing, and road becomes purple as well.\n\n## Shift the object : Same seed, just the segmentation map's positional difference\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/aurora_1_merged.jpg\">\n</p>\n<!-- #endregion -->\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/aurora_2_merged.jpg\">\n</p>\n<!-- #endregion -->\n\n> \"A digital painting of a half-frozen lake near mountains under a full moon and aurora. A boat is in the middle of the lake. Highly detailed.\"\n\n> Notice how nearly all of the composition remains the same, other than the position of the moon.\n\n---\n\nRecently, researchers from NVIDIA proposed [eDiffi](https://arxiv.org/abs/2211.01324). In the paper, they suggested method that allows \"painting with word\". Basically, this is like make-a-scene, but with just using adjusted cross-attention score. You can see the results and detailed method in the paper.\n\nTheir paper and their method was not open-sourced. Yet, paint-with-words can be implemented with Stable Diffusion since they share common Cross Attention module. So, I implemented it with Stable Diffusion.\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/paint_with_words_figure.png\">\n</p>\n<!-- #endregion -->\n\n# Installation\n\n```bash\npip install git+https://github.com/shunk031/paint-with-words-pipeline\n```\n\n# Basic Usage\n\nPrepare segmentation map, and map-color : tag label such as below. keys are (R, G, B) format, and values are tag label.\n\n```python\n{\n    (0, 0, 0): \"cat,1.0\",\n    (255, 255, 255): \"dog,1.0\",\n    (13, 255, 0): \"tree,1.5\",\n    (90, 206, 255): \"sky,0.2\",\n    (74, 18, 1): \"ground,0.2\",\n}\n```\n\nYou neeed to have them so that they are in format \"{label},{strength}\", where strength is additional weight of the attention score you will give during generation, i.e., it will have more effect.\n\n```python\nimport torch\nfrom paint_with_words.pipelines import PaintWithWordsPipeline\n\nsettings = {\n    \"color_context\": {\n        (0, 0, 0): \"cat,1.0\",\n        (255, 255, 255): \"dog,1.0\",\n        (13, 255, 0): \"tree,1.5\",\n        (90, 206, 255): \"sky,0.2\",\n        (74, 18, 1): \"ground,0.2\",\n    },\n    \"color_map_img_path\": \"contents/example_input.png\",\n    \"input_prompt\": \"realistic photo of a dog, cat, tree, with beautiful sky, on sandy ground\",\n    \"output_img_path\": \"contents/output_cat_dog.png\",\n}\n\ncolor_map_image_path = settings[\"color_map_img_path\"]\ncolor_context = settings[\"color_context\"]\ninput_prompt = settings[\"input_prompt\"]\n\n# load pre-trained weight with paint with words pipeline\npipe = PaintWithWordsPipeline.from_pretrained(\n    model_name,\n    revision=\"fp16\",\n    torch_dtype=torch.float16,\n)\npipe.safety_checker = None  # disable the safety checker\npipe.to(\"cuda\")\n\n# load color map image\ncolor_map_image = Image.open(color_map_image_path).convert(\"RGB\")\n\nwith torch.autocast(\"cuda\"):\n    image = pipe(\n        prompt=input_prompt,\n        color_context=color_context,\n        color_map_image=color_map_image,\n        latents=latents,\n        num_inference_steps=30,\n    ).images[0]\n\nimg.save(settings[\"output_img_path\"])\n```\n\n---\n\n# Weight Scaling\n\nIn the paper, they used $w \\log (1 + \\sigma)  \\max (Q^T K)$ to scale appropriate attention weight. However, this wasn't optimal after few tests, found by [CookiePPP](https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/4406). You can check out the effect of the functions below:\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_std.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma)  std (Q^T K)$\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_max.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma)  \\max (Q^T K)$\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_log2_std.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma^2)  std (Q^T K)$\n\nYou can define your own weight function and further tweak the configurations by defining `weight_function` argument in the `PaintWithWordsPipeline`.\n\nExample:\n\n```python\ndef weight_function(\n    w: torch.Tensor, \n    sigma: torch.Tensor, \n    qk: torch.Tensor,\n) -> torch.Tensor:\n    return 0.4 * w * math.log(sigma ** 2 + 1) * qk.std()\n\nwith torch.autocast(\"cuda\"):\n    image = pipe(\n        prompt=input_prompt,\n        color_context=color_context,\n        color_map_image=color_map_image,\n        latents=latents,\n        num_inference_steps=30,\n        #\n        # set the weight function here:\n        weight_function=weight_function,\n        #\n    ).images[0]\n```\n\n## More on the weight function, (but higher)\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_4_std.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma)  std (Q^T K)$\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_4_max.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma)  \\max (Q^T K)$\n\n<!-- #region -->\n<p align=\"center\">\n<img  src=\"contents/compare_4_log2_std.jpg\">\n</p>\n<!-- #endregion -->\n\n> $w' = w \\log (1 + \\sigma^2)  std (Q^T K)$\n\n# Example Notebooks\n\nYou can view the minimal working notebook [here](./contents/notebooks/paint_with_words.ipynb) or [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1MZfGaY3aQQn5_T-6bkXFE1rI59A2nJlU?usp=sharing)\n\n- [Painting with words](./contents/notebooks/paint_with_words.ipynb)\n\n- [Painting with words + Textual Inversion](./contents/notebooks/paint_with_words_textual_inversion.ipynb)\n\n---\n\n# Acknowledgements\n\n- Balaji, Yogesh, et al. \"ediffi: Text-to-image diffusion models with an ensemble of expert denoisers.\" [arXiv preprint arXiv:2211.01324](https://arxiv.org/abs/2211.01324) (2022).\n- cloneofsimo/paint-with-words-sd: Implementation of Paint-with-words with Stable Diffusion : method from eDiff-I that let you generate image from text-labeled segmentation map. https://github.com/cloneofsimo/paint-with-words-sd \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paint-with-words-pipeline",
    "package_url": "https://pypi.org/project/paint-with-words-pipeline/",
    "platform": null,
    "project_url": "https://pypi.org/project/paint-with-words-pipeline/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/paint-with-words-pipeline/0.1.0/",
    "requires_dist": [
      "diffusers (>=0.10.2,<0.11.0)",
      "transformers (>=4.25.1,<5.0.0)",
      "torch (>=1.12.1,<2.0.0)",
      "torchvision (>=0.13.1,<0.14.0)",
      "accelerate (>=0.15.0,<0.16.0)",
      "scipy (>=1.9.3,<2.0.0)",
      "ftfy (>=6.1.1,<7.0.0)"
    ],
    "requires_python": ">=3.8.1,<4.0",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16162905,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8474b167f6c636718da838ef041c88cea21e3baf6c39969183a3ad90577e2fed",
          "md5": "30f3803c57d3e2f5eee9d469b2f5b457",
          "sha256": "54b801659df975ecd67025a71ee09a995ad3513fad33bb52660692870d0391e9"
        },
        "downloads": -1,
        "filename": "paint_with_words_pipeline-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30f3803c57d3e2f5eee9d469b2f5b457",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 11421,
        "upload_time": "2022-12-20T15:54:54",
        "upload_time_iso_8601": "2022-12-20T15:54:54.147262Z",
        "url": "https://files.pythonhosted.org/packages/84/74/b167f6c636718da838ef041c88cea21e3baf6c39969183a3ad90577e2fed/paint_with_words_pipeline-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63e067bbd6c0f47dfa1268f63e07607bda21973745bfb27863ac2c72c75f3b2c",
          "md5": "dd750c3c30f2ce59aaee671721e24a0e",
          "sha256": "d0f73c559dd438691e663a692d67d6ccd749e89bcf4bc2f096ac3201fb0f45af"
        },
        "downloads": -1,
        "filename": "paint_with_words_pipeline-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd750c3c30f2ce59aaee671721e24a0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1,<4.0",
        "size": 12114,
        "upload_time": "2022-12-20T15:54:56",
        "upload_time_iso_8601": "2022-12-20T15:54:56.118930Z",
        "url": "https://files.pythonhosted.org/packages/63/e0/67bbd6c0f47dfa1268f63e07607bda21973745bfb27863ac2c72c75f3b2c/paint_with_words_pipeline-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8474b167f6c636718da838ef041c88cea21e3baf6c39969183a3ad90577e2fed",
        "md5": "30f3803c57d3e2f5eee9d469b2f5b457",
        "sha256": "54b801659df975ecd67025a71ee09a995ad3513fad33bb52660692870d0391e9"
      },
      "downloads": -1,
      "filename": "paint_with_words_pipeline-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30f3803c57d3e2f5eee9d469b2f5b457",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1,<4.0",
      "size": 11421,
      "upload_time": "2022-12-20T15:54:54",
      "upload_time_iso_8601": "2022-12-20T15:54:54.147262Z",
      "url": "https://files.pythonhosted.org/packages/84/74/b167f6c636718da838ef041c88cea21e3baf6c39969183a3ad90577e2fed/paint_with_words_pipeline-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63e067bbd6c0f47dfa1268f63e07607bda21973745bfb27863ac2c72c75f3b2c",
        "md5": "dd750c3c30f2ce59aaee671721e24a0e",
        "sha256": "d0f73c559dd438691e663a692d67d6ccd749e89bcf4bc2f096ac3201fb0f45af"
      },
      "downloads": -1,
      "filename": "paint_with_words_pipeline-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dd750c3c30f2ce59aaee671721e24a0e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1,<4.0",
      "size": 12114,
      "upload_time": "2022-12-20T15:54:56",
      "upload_time_iso_8601": "2022-12-20T15:54:56.118930Z",
      "url": "https://files.pythonhosted.org/packages/63/e0/67bbd6c0f47dfa1268f63e07607bda21973745bfb27863ac2c72c75f3b2c/paint_with_words_pipeline-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}