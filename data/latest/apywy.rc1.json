{
  "info": {
    "author": "Alexey Sosov",
    "author_email": "lesh.solowiew@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# ApyWy - аналог Swagger\r\n\r\nОсновную проблему, которую решает _ApyWy_ - большое количество времени разработчика для написания схемы (_schema_) для класса _View_. В моей версии мы можем использовать обычные питоновские словари для обозначения ожидаемых данныx и ожидаемого ответа.\r\n\r\n## Пример не настроенной версии apywy:\r\n\r\n![alt](static_images/default_apywy.png)\r\n\r\n## Пример настроенной версии apywy:\r\n\r\n*Тут для примера настроен только *GET* метод.*\r\n\r\n![alt](static_images/configured_apywy.gif)\r\n\r\n## Установка\r\n\r\n1.\r\n```python\r\npip install apywy\r\n```\r\n\r\n2. Добавляем в _settings.INSTALLED_APPS_:\r\n\r\n```python\r\nINSTALLED_APPS = [\r\n    ...\r\n    'apywy.api',\r\n    ...\r\n]\r\n```\r\n\r\n3. Добавляем в _urls.py_ главного приложения:\r\n\r\n```python\r\npath('apywy/', include(('apywy.api.urls', 'apywy.api'), namespace='apywy')),\r\n```\r\n\r\n4. **Готово**, на главной странице _ApyWy_ - **_/apywy/_** есть вся возможная информация без дополнительных настроек.\r\n\r\n## Настройка\r\n\r\nПо умолчанию, все что мы можем узнать для джанго-вьюшки:\r\n\r\n- Url-путь до _http-метода_.\r\n- Док-стринг для вьюшки, а также для всех ее _http-методов_ (_get_, _post_, ...).\r\n\r\nНо мы можем это исправить, построив _ApyWy_ схему для вьюшки.\r\n\r\nНаш файл _views.py_:\r\n\r\n```python\r\n# views.py\r\nclass HomePageView(APIView):\r\n    '''\r\n    HomePageView doc string\r\n    '''\r\n\r\n    def get(self, request, some_quary):\r\n        'HomePageView.get doc string'\r\n\r\n        if some_quary == 'some value':\r\n            return Response({'ANSWER': 'GET-INVALID-RESULT'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\r\n        return Response({'ANSWER': 'GET-RESULT'}, status=status.HTTP_200_OK)\r\n\r\n    def post(self, request):\r\n        'HomePageView.post doc string'\r\n        return Response({'ANSWER': 'POST-RESULT'}, status=status.HTTP_201_CREATED)\r\n```\r\n\r\n- Создаем файл _apywy_schemas.py_ (имя не важно)\r\n\r\n```python\r\n# apywy_schemas.py\r\nfrom apywy.fields import StatusField, MethodField, RequestDataField\r\nfrom apywy.schema import Schema\r\n\r\nfrom apywy.constants.const import Constant\r\n\r\n\r\nclass HomePageSchema(Schema):\r\n    class GET(MethodField):\r\n\r\n        HTTP_200 = StatusField(expected_response_data=Constant({'ANSWER': 'GET-RESULT'}))\r\n\r\n        HTTP_500 = StatusField(expected_response_data=Constant({'ANSWER': 'GET-INVALID-RESULT'}))\r\n\r\n```\r\n\r\n- Навешиваем эту схему на view:\r\n\r\n```python\r\n# views.py\r\n...\r\nfrom apywy.decorators import set_apywy_schema\r\n\r\nfrom .apywy_schemas import HomePageSchema\r\n\r\n\r\n@set_apywy_schema(HomePageSchema)\r\nclass HomePageView(APIView):\r\n    ...\r\n```\r\n\r\nИтог, для метода **get** мы получили расширенную информацию.\r\n\r\n- Добавим информацию про **post**\r\n\r\n```python\r\n# apywy_schemas.py\r\n...\r\n\r\nclass HomePageSchema(Schema):\r\n    ...\r\n\r\n    class POST(MethodField):\r\n\r\n        HTTP_201 = StatusField(expected_response_data=Constant({'ANSWER': 'POST-RESULT'}))\r\n\r\n        class META:\r\n            expected_request_data = RequestDataField(Constant({'data': 'some data here'}))\r\n```\r\n\r\nПо итогу, конечный вариант нашей схемы:\r\n\r\n```python\r\n# apywy_schemas.py\r\nfrom apywy.fields import StatusField, MethodField, RequestDataField\r\nfrom apywy.schema import Schema\r\n\r\nfrom apywy.constants.const import Constant\r\n\r\n\r\nclass HomePageSchema(Schema):\r\n    class GET(MethodField):\r\n\r\n        HTTP_200 = StatusField(expected_response_data=Constant({'ANSWER': 'GET-RESULT'}))\r\n\r\n        HTTP_500 = StatusField(expected_response_data=Constant({'ANSWER': 'GET-INVALID-RESULT'}))\r\n\r\n    class POST(MethodField):\r\n\r\n        HTTP_201 = StatusField(expected_response_data=Constant({'ANSWER': 'POST-RESULT'}))\r\n\r\n        class META:\r\n            expected_request_data = RequestDataField(Constant({'data': 'some data here'}))\r\n```\r\n\r\n<!-- TODO добавить тут итоговую картинку  -->\r\n\r\n---\r\n\r\nПо умолчанию на главной странице мы видим вьюшки до всех путей, кроме тех, которые относятся к неймспейсам:\r\n\r\n```python\r\n('apywy', 'admin')\r\n```\r\n\r\nЕсли вы хотите игнорировать дополнительные неймспейсы, то укажите это в _settings.NAMESPACES_TO_IGNORE_:\r\n\r\n```python\r\nNAMESPACES_TO_IGNORE = ()  # значение по умолчанию\r\n\r\nNAMESPACES_TO_IGNORE = ('app', )  # игнорировать namespace с именем \"app\"\r\n\r\nNAMESPACES_TO_IGNORE = ('*', )  # игнорировать все неймспейсы\r\n```\r\n\r\n### FAQ:\r\n\r\n1. Можно ли указать _query_ параметр для запроса в схеме?\r\n2. Можно ли указать сразу несколько ожидаемых результатов от фронта/бекенда в схеме для одного http статуса?\r\n\r\n**(1)** и **(2)**, да можно, ниже представлены различные варианты, которые поддерживает _apywy_:\r\n\r\n```python\r\n# apywy_schemas.py\r\nfrom apywy.fields import StatusField, MethodField, RequestDataField\r\nfrom apywy.schema import Schema\r\n\r\nfrom apywy.constants.const import ListOfConstants, Constant\r\n\r\n\r\nclass HomePageSchema(Schema):\r\n    class GET(MethodField):\r\n\r\n        # пример, когда для метода есть единственные данные, независящие от аргумента\r\n        HTTP_200 = StatusField(expected_response_data=Constant({'ANSWER': 'GET-RESULT'}))\r\n\r\n        # пример, что и выше, но только с комментарием\r\n        HTTP_300 = StatusField(\r\n            expected_response_data=Constant({'ANSWER': 'GET-RESULT FROM 300'}, comment='some comment')\r\n        )\r\n\r\n        # пример, когда для метода есть единственные данные, но мы также хотим задокументировать query паметр\r\n        HTTP_400 = StatusField(\r\n            expected_response_data=Constant({'ANSWER': 'GET-RESULT FROM 400'}, query_arg={'some query': 1})\r\n        )\r\n\r\n        # пример, когда для одного статуса может соответствовать множество данных\r\n        HTTP_500 = StatusField(\r\n            expected_response_data=ListOfConstants(\r\n                Constant(\r\n                    expected_data={'ANSWER': 'GET-RESULT FROM 500'},\r\n                    comment='some another comment with list of constants'\r\n                ),\r\n                Constant(\r\n                    expected_data={'ANSWER': 'GET-RESULT FROM 500'},\r\n                    query_arg={\r\n                        'some query 1': '1',\r\n                        'some another query 2': 'blabla',\r\n                    },\r\n                    comment='some comment here'\r\n                ),\r\n            )\r\n        )\r\n\r\n        class META:\r\n            # все что относится к работе со статусами распространяется и на request данные\r\n            expected_request_data = RequestDataField(\r\n                ListOfConstants(\r\n                    Constant(expected_data={'some data 1': 'data1'}),\r\n                    Constant(expected_data={'some another data 2': 'data2'}, query_arg={\r\n                        'title': 'some title',\r\n                        'book_id': '10'\r\n                    }),\r\n                )\r\n            )\r\n```\r\n\r\n### TODO:\r\n\r\n- Рефакторить index.js\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rwwwrl/ApyWy",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Apywy",
    "package_url": "https://pypi.org/project/Apywy/",
    "platform": null,
    "project_url": "https://pypi.org/project/Apywy/",
    "project_urls": {
      "Homepage": "https://github.com/Rwwwrl/ApyWy"
    },
    "release_url": "https://pypi.org/project/Apywy/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "swagger analog",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14480255,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d7523165805ec06abd8a6297509264dc7be86edc1fd3b83b0d7548347a745ab",
          "md5": "7359177465ca2f20f8ac1eb6e85f352c",
          "sha256": "f3d1acfd945eb0a2664ee95e2d2b20b43977f0fd94fa6e8c2e8cc9c631a0f02e"
        },
        "downloads": -1,
        "filename": "Apywy-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7359177465ca2f20f8ac1eb6e85f352c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15592,
        "upload_time": "2022-07-19T10:35:29",
        "upload_time_iso_8601": "2022-07-19T10:35:29.793654Z",
        "url": "https://files.pythonhosted.org/packages/0d/75/23165805ec06abd8a6297509264dc7be86edc1fd3b83b0d7548347a745ab/Apywy-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d7523165805ec06abd8a6297509264dc7be86edc1fd3b83b0d7548347a745ab",
        "md5": "7359177465ca2f20f8ac1eb6e85f352c",
        "sha256": "f3d1acfd945eb0a2664ee95e2d2b20b43977f0fd94fa6e8c2e8cc9c631a0f02e"
      },
      "downloads": -1,
      "filename": "Apywy-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7359177465ca2f20f8ac1eb6e85f352c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15592,
      "upload_time": "2022-07-19T10:35:29",
      "upload_time_iso_8601": "2022-07-19T10:35:29.793654Z",
      "url": "https://files.pythonhosted.org/packages/0d/75/23165805ec06abd8a6297509264dc7be86edc1fd3b83b0d7548347a745ab/Apywy-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}