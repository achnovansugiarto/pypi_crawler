{
  "info": {
    "author": "Rainbow-Dreamer",
    "author_email": "1036889495@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# matrixpro\n\nThis is a python module for handling matrices, including matrix calculation, analysis and algorithms.\n\nAll of the basic calculations of matrices and many more high-level numerical methods of matrices are included in this module, which could be used as easy-to-write functions.\n\nThis module is easy to be used as a toolkit in your projects (for example, this module will be useful in games and AI), and this module is also easy to extend for new functionality.\n\n## Installation\nYou can use `pip` to install matrixpro, run the following line in cmd/terminal:\n```python\npip install matrixpro\n```\nWhen the installation finished, matrixpro is installed on your computer, you can use the following line at the beginning of your code to use matrixpro:\n```python\nfrom matrixpro import *\n```\nor you can use\n```python\nimport matrixpro as mp\n```\nto avoid duplicate function/class/variable names problems that could possibly occur.\n\n## Usage\nThis will only be a synopsis of the whole functionality of matrixpro, which includes the most basic and important usages of matrixpro, for more detailed introductions of this module, refer to wiki.\n\n### Create a matrix\nThere are many ways to create a matrix in matrixpro, the most basic way to create a matrix in matrixpro is passing a list of lists to `matrix` class, where lists are rows of the matrix, each list has the elements of the row.\n\nFor example, if we want to create a matrix\n```\n[1, 2]\n[3, 4]\n```\nwe can write\n```python\nmatrix_A = matrix([[1,2], [3, 4]])\n```\nor for more readability,\n```python\nmatrix_A = matrix([[1, 2],\n                   [3, 4]])\n```\nWe can print this matrix,\n```python\n>>> print(matrix_A)\n[1, 2]\n[3, 4]\n```\n\nIf we want to quickly create a matrix of m x n size with a default value, we can use `build` function:\n```python\nbuild(row_number, column_number=None, element=0)\n\n# row_number: the row number of the matrix\n\n# column_number: the column number of the matrix, if not set, this will be the same as the row number\n\n# element: the default element of all of the entries of the matrix, default value is 0\n\nmatrix_B = build(10, 5) # build a matrix of 10 rows and 5 columns with default value 0\n>>> matrix_B\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n```\n\nIf we want to create a matrix which is filled with integers 1 ~ n, we can use `mrange` function:\n```python\nmrange(nrow, ncol=None, start=None, stop=None, default=0)\n\n# nrow: the row number of the matrix\n\n# ncol: the column number of the matrix, if not set, this will be the same as the row number\n\n# start: the start of the elements\n\n# stop: the last of the elements\n\n# default: the default value of the elements that are not filled\n\n# if both of start and stop are not set, the start value will be 1, the stop value will be nrow * ncol;\n\n# if start is set and stop is not set, the start value will be 1, the stop value will be start;\n\n# if both of start and stop are set, the start value will be start, the stop value will be stop;\n\n# you canoot make start not set and stop set, which means if you want to set the stop value, you must set the start value as well\n\nmatrix_C = mrange(5) # generate a 5 x 5 square matrix with elements from 1 to 25\n>>> matrix_C\n[1, 2, 3, 4, 5]\n[6, 7, 8, 9, 10]\n[11, 12, 13, 14, 15]\n[16, 17, 18, 19, 20]\n[21, 22, 23, 24, 25]\n\nmatrix_D = mrange(5, 5, 0, 24) # generate a 5 x 5 square matrix with elements from 0 to 24\n>>> matrix_D\n[0, 1, 2, 3, 4]\n[5, 6, 7, 8, 9]\n[10, 11, 12, 13, 14]\n[15, 16, 17, 18, 19]\n[20, 21, 22, 23, 24]\n```\n\nIf we want to turn a list of elements into a matrix, we can use `form` function:\n```python\nform(val, nrow, ncol=None, default=0)\n# the list that contains elements you want to turn into a matrix\n# other parameters: refer to functions above\n\nvalues = [1, 2, 3, 4 ,5, 6]\nmatrix_E = form(values, 2, 3)\n>>> matrix_E\n[1, 2, 3]\n[4, 5, 6]\n```\n\n### Create special matrices\nTo create an identity matrix, you can use `identity` or `ids` function:\n```python\n>>> identity(5) # create an 5 x 5 identity matrix\n[1, 0, 0, 0, 0]\n[0, 1, 0, 0, 0]\n[0, 0, 1, 0, 0]\n[0, 0, 0, 1, 0]\n[0, 0, 0, 0, 1]\n```\n\nTo create a diagonal matrix, you can use `diagonal` function:\n```python\ndiagonal(element, nrow=None, ncol=None)\n\n# element: the list of elements at the diagonal from upper left corner to bottom right corner\n\n# nrow, ncol: if not set, these will both be the length of element, you can set nrow and ncol separately\n\n>>> diagonal([1, 2, 3]) # create a diagonal matrix with 1, 2, 3 on the diagonal\n[1, 0, 0]\n[0, 2, 0]\n[0, 0, 3]\n```\n\nTo create a square matrix, you can use `square` function:\n```python\n# square function is basically build function when the row number is equal to the column number\n>>> square(5) # create a 5 x 5 square matrix with default value 0\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n```\n\n### Transpose of a matrix\nTo get the transpose of a matrix, you can use `transpose` or `T` function of matrix.\n```python\nmatrix_F = matrix([[1,2,3], [4,5,6]])\n\n>>> matrix_F\n[1, 2, 3]\n[4, 5, 6]\n\n>>> matrix_F.transpose()\n[1, 4]\n[2, 5]\n[3, 6]\n\n>>> matrix_F.T()\n[1, 4]\n[2, 5]\n[3, 6]\n```\n\n### Get row number and column number of the matrix\nYou can directly get the attributes `row_number` and `column_number` of the matrix object, these attributes are calculated once the matrix object is build.  \nFor short, you can use `rown` function of the matrix object to get the row number of the matrix, and `coln` function of the matrix object to get the column \nnumber of the matrix.  \nYou can use `dim` function of the matrix object to get the dimension (size) of the matrix in a tuple `(m, n)`, where `m` is row number and `n` is column number.  \nYou can use `size` function of the matrix object to get the dimension (size) of the matrix in a string `mxn`, where `m` is row number and `n` is column number.\n```python\nmatrix_A = build(5, 7)\n\n>>> matrix_A\n[0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0]\n\n>>> matrix_A.row_number # get the attribute 'row_number' of the matrix\n5\n\n>>> matrix_A.column_number # get the attribute 'column_number' of the matrix\n7\n\n>>> matrix_A.rown() # get the row number of the matrix\n5\n\n>>> matrix_A.coln() # get the column number of the matrix\n7\n\n>>> matrix_A.dim() # get the dimension (size) of the matrix in a tuple\n(5, 7)\n\n>>> matrix_A.size() # get the dimension (size) of the matrix in a string\n'5x7'\n```\n\n### Matrix addition, subtraction, multiplication and division\nThe usages of calculations of matrix in matrixpro is similar as the calculations of integers and floats.\n\nTo add 2 matrices A and B, you can write `A + B`.  \nTo subtract matrix B from matrix A, you can write `A - B`.  \nTo multiply matrix A and matrix B, you can write `A * B`.  \nTo divide matrix A by matrix B, you can write `A / B`.\n\n```python\nmatrix_G = matrix([[1, 2], [3, 4]])\nmatrix_H = matrix([[5, 6], [7, 8]])\n\n>>> matrix_G\n[1, 2]\n[3, 4]\n\n>>> matrix_H\n[5, 6]\n[7, 8]\n\n>>> matrix_G + matrix_H\n[6, 8]\n[10, 12]\n\n>>> matrix_G - matrix_H\n[-4, -4]\n[-4, -4]\n\n>>> matrix_G * matrix_H\n[19, 22]\n[43, 50]\n\n>>> matrix_G / matrix_H\n[3.000000000000009, -2.0000000000000067]\n[2.0000000000000018, -1.0000000000000018]\n\n# if the division result has too many digits after the decimal point and it is annoying for you,\n# you can use 'formated' function of matrix to round the floats to a given precision.\n# For more details about 'formated' function of matrix, refer to wiki.\n\n>>> (matrix_G / matrix_H).formated() # using default formated parameters\n[3, -2]\n[2, -1]\n```\n\n### Get a row, column or element of the matrix\nThe syntax to get an element of the matrix is `matrix[row_number, column_number]`, or you can also get the element by treating the matrix object \nas list of lists, which is `matrix[row_number][column_number]`. The row number and column number are both 0-based (start from 0). \nThe indexing of the row number and the column number are the same as list in python. For example:\n```python\nmatrix_A = matrix([[1, 2], [3, 4]])\n\n>>> matrix_A\n[1, 2]\n[3, 4]\n\n>>> matrix_A[0, 0] # get the element at first row and first column of the matrix\n1\n\n>>> matrix_A[1, 1] # get the element at second row and second column of the matrix\n4\n\n>>> matrix_A[-1, -1] # get the element at the last row and the last column of the matrix\n4\n```\n\nTo get a row of the matrix, you can write `matrix[row_number]`, which will return a list which is the corresponding row of the matrix with the row number.  \nTo get a column of the matrix, you can write `matrix[column_number,]`, which will return a list which is the corresponding column of the matrix with the column number.  \nFor example:\n```python\n>>> matrix_A[0] # get the first row of the matrix\n[1, 2]\n\n>>> matrix_A[0,] # get the first row of the matrix\n[1, 3]\n```\n\n### Modify rows, columns and elements of the matrix\nYou can modify the rows, columns and elements by assigning to a list (for rows and columns) or element (for elements) when you are getting them.  \nFor example:\n```python\nmatrix_A = mrange(3)\n\n>>> matrix_A\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n\nmatrix_A[0] = [10, 10, 10] # change the first row of the matrix to [10, 10, 10]\n>>> matrix_A\n[10, 10, 10]\n[4, 5, 6]\n[7, 8, 9]\n\nmatrix_A[0,] = [10, 10, 10] # change the first column of the matrix to [10, 10, 10]\n>>> matrix_A\n[10, 10, 10]\n[10, 5, 6]\n[10, 8, 9]\n\nmatrix_A[2, 2] = 20 # change the element at the 3rd row and the 3rd column to 20\n>>> matrix_A\n[10, 10, 10]\n[10, 5, 6]\n[10, 8, 20]\n```\n\n### Calculate power of a matrix\nYou can use `matrix ** n` or `matrix ^ n` to calculate the nth power of a matrix. Here `n` could be an integer, a float or a fraction.\n```python\nmatrix_A = matrix([[1, 2], [3, 4]])\n\n>>> matrix_A\n[1, 2]\n[3, 4]\n\n>>> matrix_A ^ 2\n[7, 10]\n[15, 22]\n\n>>> matrix_A ** 2\n[7, 10]\n[15, 22]\n\n>>> matrix_A ^ -2\n[5.499999999999985, -2.499999999999993]\n[-3.74999999999999, 1.7499999999999953]\n```\n\n### Convenient syntax for adding/subtracting/multiplying/dividing every element in a matrix\nYou can simply add/subtract/multiply/divide a number from the matrix, and the calculations will be applied to every element in the matrix.  \nFor example, if you write `matrix + 1`, then you will get a new matrix object with every element in the matrix increased by 1.  \nThe same logic applies for subtraction, multiplication and division. Here are some examples:\n```python\nmatrix_A = matrix([[1, 2], [3, 4]])\n\n>>> matrix_A\n[1, 2]\n[3, 4]\n\n>>> matrix_A + 1\n[2, 3]\n[4, 5]\n\n>>> matrix_A - 1\n[0, 1]\n[2, 3]\n\n>>> matrix_A * 2\n[2, 4]\n[6, 8]\n\n>>> matrix_A / 2\n[0.5, 1.0]\n[1.5, 2.0]\n```\n\n### Calculate the determinant of a matrix\nYou can use `det` function of matrix object to calculate the determinant of a matrix.\n```python\nmatrix_A = matrix([[1, 2], [3, 4]])\n\n>>> matrix_A\n[1, 2]\n[3, 4]\n\n>>> matrix_A.det()\n-2.0\n```\n\n### Calculate the inverse of a matrix\nThere are a few of algorithms to calculate the inverse of a matrix implemented in matrixpro. The default method is the adjoint method, which is a very \ncommon method for calculating the inverse of a matrix **by hand**, it is not very efficient when it comes to large matrices. There are some numerical \nmethods for calculating the inverse of a matrix implemented in matrixpro, including LU decomposition method and Newton iteration method.  \nAfter some tests of large matrices, it shows that LU decomposition method has the fastest speed for calculating the inverse of a matrix, and also remains \ngood stability.\n\nTo use default inverse method, you can use `inverse` or `inv` function of the matrix object.  \nTo use LU decomposition method, you can use `inv_lu` function of the matrix object.  \nTo use Newton iteration method, you can use `inv_newton` function of the matrix object.\n\nYou can also calculate the generalized inverse (pseudoinverse) of a m x n matrix by using `pinv` function of the matrix object.\n\n```python\nmatrix_A = matrix([[1, 2], [3, 4]])\n\n>>> matrix_A\n[1, 2]\n[3, 4]\n\n>>> matrix_A.inverse() # using the default adjoint method\n[-2.0, 1.0]\n[1.5, -0.5]\n\n>>> matrix_A.inv_lu() # using the LU decomposition method\n[-2.0, 1.0]\n[1.5, -0.5]\n\n>>> matrix_A.inv_newton(tol=1e-3) # using the Newton iteration method\n[-1.9996027561324514, 0.9998242712755511]\n[1.499720054620951, -0.49987616059455053]\n\nmatrix_B = mrange(2, 3)\n\n>>> matrix_B\n[1, 2, 3]\n[4, 5, 6]\n\n>>> matrix_B.pinv() # calculate pseudoinverse of a non-square matrix\n[-0.9444444444444433, 0.444444444444444]\n[-0.11111111111111072, 0.11111111111111116]\n[0.7222222222222219, -0.22222222222222188]\n```\n\n### Calculate the (reduced) row echelon form of a matrix\nYou can use `ref` function of the matrix object to calculate the row echelon form of a matrix, and use `rref` function of the matrix object to calculate \nthe reduced row echelon form of a matrix.\n```python\nmatrix_A = mrange(5)\n\n>>> matrix_A\n[1, 2, 3, 4, 5]\n[6, 7, 8, 9, 10]\n[11, 12, 13, 14, 15]\n[16, 17, 18, 19, 20]\n[21, 22, 23, 24, 25]\n\n>>> matrix_A.ref() # calculate the row echelon form of the matrix\n[1, 2, 3, 4, 5]\n[0, 1, 2, 3, 4]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n\n>>> matrix_A.rref() # calculate the reduced row echelon form of the matrix\n[1, 0, -1, -2, -3]\n[0, 1, 2, 3, 4]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n```\n\n### Calculate the eigenvalues and eigenvectors of a matrix\nYou can use `eigen` function of the matrix object to calculate the eigenvalues and the eigenvectors of a matrix.  \nThe return values of `eigen` function are 2 matrices, the first one is a diagonal matrix with eigenvalues on the diagonal, \nthe second one is a matrix where each column is one of the eigenvectors.\n\nTo get only eigenvalues or eigenvectors of a matrix, you can use `eigval` function of the matrix object for eigenvalues, \n`eigvec` function of the matrix object for eigenvectors. Note that `eigval` function will return a list of eigenvalues.\n\n```python\nmatrix_A = mrange(5)\n\n>>> matrix_A\n[1, 2, 3, 4, 5]\n[6, 7, 8, 9, 10]\n[11, 12, 13, 14, 15]\n[16, 17, 18, 19, 20]\n[21, 22, 23, 24, 25]\n\neigenvalues, eigenvectors = matrix_A.eigen() # calculate the eigenvalues and the eigenvectors of the matrix\n\n>>> eigenvalues\n[68.62358776522458, 0, 0, 0, 0]\n[0, -3.62358776522458, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0]\n\n>>> eigenvectors\n[0.10797497846502196, 0.6749528825442898, 0.14744195615489714, 0.29488391230979427, 0.4423258684646914]\n[0.25277500450721396, 0.3603897570511307, -0.29488391230979427, -0.4423258684646914, -0.5897678246195885]\n[0.3975750305494059, 0.045826631557971335, 0.14744195615489714, 0.0, 0.0]\n[0.5423750565915979, -0.26873649393518717, 0.0, 0.14744195615489714, 0.0]\n[0.6871750826337898, -0.5832996194283467, 0.0, 0.0, 0.14744195615489714]\n\n>>> matrix_A.eigval()\n[68.62358776522458, -3.623587765224578, 3.314793091830836e-16, -1.5318106288467553e-16, 3.9624216894511006e-16]\n\n>>> matrix_A.eigvec()\n[0.10797497846502196, 0.6749528825442898, 0.14744195615489714, 0.29488391230979427, 0.4423258684646914]\n[0.25277500450721396, 0.3603897570511307, -0.29488391230979427, -0.4423258684646914, -0.5897678246195885]\n[0.3975750305494059, 0.045826631557971335, 0.14744195615489714, 0.0, 0.0]\n[0.5423750565915979, -0.26873649393518717, 0.0, 0.14744195615489714, 0.0]\n[0.6871750826337898, -0.5832996194283467, 0.0, 0.0, 0.14744195615489714]\n```\n\n### Some other functionalities\nYou can use `rank` function of the matrix object to calculate the rank of a matrix.\n```python\nmatrix_A = mrange(5)\n>>> matrix_A.rank()\n2\n```\n\nYou can use `trace` function of the matrix object to calculate the trace of a matrix.\n```python\nmatrix_A = mrange(5)\n>>> matrix_A.trace()\n65\n```\n\nYou can use `flip` function of the matrix object to flip a matrix vertically or horizontally.\n\nThe parameter `mode` of `flip` function determines to flip horizontally or vertically. \nIf the parameter `mode` is 0, flip the matrix horizontally, otherwise, flip the matrix vertically. \nThe parameter `mode` is 0 as default.\n```python\nmatrix_A = mrange(5)\n\n>>> matrix_A\n[1, 2, 3, 4, 5]\n[6, 7, 8, 9, 10]\n[11, 12, 13, 14, 15]\n[16, 17, 18, 19, 20]\n[21, 22, 23, 24, 25]\n\n>>> matrix_A.flip() # flip the matrix horizontally\n[5, 4, 3, 2, 1]\n[10, 9, 8, 7, 6]\n[15, 14, 13, 12, 11]\n[20, 19, 18, 17, 16]\n[25, 24, 23, 22, 21]\n\n>>> matrix_A.flip(1)\n[21, 22, 23, 24, 25]\n[16, 17, 18, 19, 20]\n[11, 12, 13, 14, 15]\n[6, 7, 8, 9, 10]\n[1, 2, 3, 4, 5]\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Rainbow-Dreamer/matrixpro/archive/0.36.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rainbow-Dreamer/matrixpro",
    "keywords": "matrix,mathematics,statistics",
    "license": "LGPLv2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrixpro",
    "package_url": "https://pypi.org/project/matrixpro/",
    "platform": null,
    "project_url": "https://pypi.org/project/matrixpro/",
    "project_urls": {
      "Download": "https://github.com/Rainbow-Dreamer/matrixpro/archive/0.36.tar.gz",
      "Homepage": "https://github.com/Rainbow-Dreamer/matrixpro"
    },
    "release_url": "https://pypi.org/project/matrixpro/0.36/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a python module for handling matrices, including matrix calculation, analysis and algorithms.",
    "version": "0.36",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13957325,
  "releases": {
    "0.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "798d3db36430ccd274644dd10ff44f0f837a7fe360294b8041b449797c859129",
          "md5": "1ac31bb5b81acb43fcd705dd44263620",
          "sha256": "566a7c4058c5e1b03b0f619c75da778d94abb279d280d0b221ba154ce83e53e7"
        },
        "downloads": -1,
        "filename": "matrixpro-0.36.tar.gz",
        "has_sig": false,
        "md5_digest": "1ac31bb5b81acb43fcd705dd44263620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45289,
        "upload_time": "2022-05-27T18:03:38",
        "upload_time_iso_8601": "2022-05-27T18:03:38.604994Z",
        "url": "https://files.pythonhosted.org/packages/79/8d/3db36430ccd274644dd10ff44f0f837a7fe360294b8041b449797c859129/matrixpro-0.36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "798d3db36430ccd274644dd10ff44f0f837a7fe360294b8041b449797c859129",
        "md5": "1ac31bb5b81acb43fcd705dd44263620",
        "sha256": "566a7c4058c5e1b03b0f619c75da778d94abb279d280d0b221ba154ce83e53e7"
      },
      "downloads": -1,
      "filename": "matrixpro-0.36.tar.gz",
      "has_sig": false,
      "md5_digest": "1ac31bb5b81acb43fcd705dd44263620",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45289,
      "upload_time": "2022-05-27T18:03:38",
      "upload_time_iso_8601": "2022-05-27T18:03:38.604994Z",
      "url": "https://files.pythonhosted.org/packages/79/8d/3db36430ccd274644dd10ff44f0f837a7fe360294b8041b449797c859129/matrixpro-0.36.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}