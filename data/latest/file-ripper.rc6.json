{
  "info": {
    "author": "Aaron Smith",
    "author_email": "asmitty92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# file-ripper\n\nA small lightweight library to parse your flat files and deliver the data inside.\n\n## Install\n\nfile-ripper is available for download on PyPI.\n\n## FileDefinition and FieldDefinition\n\nfile-ripper provides multiple ways for you to parse your files.  Using file-ripper's FileDefinition and FieldDefinition contracts, you decide how to persist your file configurations:\n\nFieldDefinition fields:\n- field_name: str - required -  the name of the field in the result set\n- start_position: int - required for fixed width files - the start position of the field in its row\n- field_length: int - required for fixed width files - the length of the field\n- xml_node_name: str - optional, name is used if missing - the xml node containing the data\n- position_in_row: int - required for delimited files - the position of the field in the delimited row\n\nFileDefinition fields:\n- file_type: str - required - the type of the file.  DELIMITED, FIXED, and XML are currently supported\n- field_definitions: List[FieldDefinition] - required - list of FieldDefinition objects to define data fields\n- has_header: bool - optional - whether the file has a header row to skip or not\n- delimiter: str - required for DELIMITED files - character or string of characters that delimit fields\n- record_element_name: str - required for xml files - name of the xml node that represents a full record\n- file_mask: str - required for finding files - a glob pattern to be used in matching file names for look up\n- input_directory: str - required for finding files - the absolute path where the files reside\n- completed_directory: str - optional - the absolute path to move files to once they are ripped \n\n```python\nfrom file_ripper import FieldDefinition, FileDefinition, file_constants as fc\n\n\ndef build_delimited_file_definition():\n    field_definitions = [\n        FieldDefinition('name', fc.DELIMITED),\n        FieldDefinition('age', fc.DELIMITED),\n        FieldDefinition('dob', fc.DELIMITED)\n    ]\n    \n    return FileDefinition(fc.DELIMITED, field_definitions)\n\n\ndef build_fixed_file_definition():\n    field_definitions = [\n        FieldDefinition('name', fc.FIXED, start_position=0, field_length=20),\n        FieldDefinition('age', fc.FIXED, start_position=20, field_length=5),\n        FieldDefinition('dob', fc.FIXED, start_position=25, field_length=10)\n    ]\n    \n    return FileDefinition(fc.FIXED, field_definitions)\n\n\ndef build_xml_file_definition():\n    field_definitions = [\n        FieldDefinition('name', fc.XML, xml_node_name='name'),\n        FieldDefinition('age', fc.XML, xml_node_name='age'),\n        FieldDefinition('dob', fc.XML, xml_node_name='dateOfBirth')\n    ]\n\n    return FileDefinition(fc.FIXED, field_definitions)\n\n```\n\n\n## Ripping Files\n\nfile-ripper provides easy access to your file data.  The rip_file function takes a file-like object and a FileDefinition.  It returns a tuple containing your file's name and your records as a list of dicts\n \n\n```python\nfrom file_ripper import rip_file, FileInstance, FileDefinition, FieldDefinition, file_constants as fc\n\nfield_definitions = [\n    FieldDefinition('name', fc.DELIMITED),\n    FieldDefinition('age', fc.DELIMITED),\n    FieldDefinition('dob', fc.DELIMITED)\n]\n    \nfile_definition = FileDefinition(fc.DELIMITED, field_definitions)\nwith open('path/to/file.txt', 'r') as file:\n    file_instance: FileInstance = rip_file(file, file_definition)    \n```\n\nThe FileRipper class also supports ripping multiple files using the rip_files function.\n\n```python\nfrom file_ripper import rip_files, FileInstance, FileDefinition, FieldDefinition, file_constants as fc\nfrom typing import List\n\nfield_definitions = [\n    FieldDefinition('name', fc.DELIMITED),\n    FieldDefinition('age', fc.DELIMITED),\n    FieldDefinition('dob', fc.DELIMITED)\n]\n    \nfile_definition = FileDefinition(fc.DELIMITED, field_definitions)\nwith open('path/to/file.txt', 'r') as file:\n    file_results: List[FileInstance] = rip_files([file], file_definition) \n```\n\n## Finding And Ripping Files\nThis is a new feature for version 1.1.0 of file-ripper.  It now supports finding and ripping your files based on\na provided file mask (using glob pattern matching) and an input directory.  An optional completed directory can be specified\nif you wish for the file to be moved after they are ripped.\n\nIn the following example, any file in /usr/bin matching whose name matches the glob pattern \nValid-*.txt will be ripped and have its data added to the result set. Those files will then be moved to \n/usr/bin/completed so that they will not be ripped if that directory is processed a second time\n\n```python\nfrom file_ripper import find_and_rip_files, FileDefinition, FieldDefinition, FileInstance, file_constants as fc\nfrom typing import List\n\nfield_definitions = [\n    FieldDefinition('name', fc.DELIMITED),\n    FieldDefinition('age', fc.DELIMITED),\n    FieldDefinition('dob', fc.DELIMITED)\n]\n    \nfile_definition = FileDefinition(fc.DELIMITED, field_definitions, file_mask='Valid-*.txt', input_directory='/usr/bin',\n                                 completed_directory='/usr/bin/completed')\nfile_results: List[FileInstance] = find_and_rip_files(file_definition)\n``` \n\n## FileInstance and FileRow\n\nfile-ripper provides your data via the FileInstance and FileRow classes.  FileInstance provides all the metadata associated \nwith the file as well as a list of FileRow instances representing your data.  FileRow exposes the fields that make up the file\nas a dictionary.  The keys to this dictionary are the field names you supplied in your input FieldDefinition objects.\n\nFileInstance and FileRow are also both iterable directly.  You don't need to access the file_rows and/or fields properties\nto access their data using an iterator or loop. \n\nFileInstance fields:\n- file_name: str - the name of the file associated with this instance\n- file_rows: List[FileRow] - objects holding the data ripped from the file\n\nFileRow fields:\n- fields: Dict[str, str] the data associated with a row from the file\n\n```python\nfrom file_ripper import rip_file, FileDefinition, FileInstance, file_constants as fc\nfrom typing import IO\n\ndef process_file(file: IO, file_definition: FileDefinition):\n    file_instance: FileInstance = rip_file(file, file_definition)\n    print(f'ripped file {file_instance.file_name}')\n    index = 1\n    for row in file_instance:\n        print(f'row {index} contains the following')\n        index += 1\n        for field_name in row:\n            print(f'{field_name} : {row[field_name]}')\n        \n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "file-ripper",
    "package_url": "https://pypi.org/project/file-ripper/",
    "platform": "",
    "project_url": "https://pypi.org/project/file-ripper/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/file-ripper/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9240340,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b10a25fe8084ecb91248bbb9de1edcc411ed85cbe7358932a1088389d911ba9",
          "md5": "d06c882eda45a94beb165e3e0e143e27",
          "sha256": "93663951efdb50c151bd1c85f032c31f7a67cb0b835f2d58ece2232db5fbf5de"
        },
        "downloads": -1,
        "filename": "file-ripper-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d06c882eda45a94beb165e3e0e143e27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7452,
        "upload_time": "2020-09-29T01:38:54",
        "upload_time_iso_8601": "2020-09-29T01:38:54.627673Z",
        "url": "https://files.pythonhosted.org/packages/6b/10/a25fe8084ecb91248bbb9de1edcc411ed85cbe7358932a1088389d911ba9/file-ripper-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "097e891db7199c88164f3befcfce15c89f49eda79c2c7e26c82ffe3055f8f07b",
          "md5": "62e91af7b192313a3d24cd3c6c0f91d2",
          "sha256": "f4e498e4bb2b5a1186020e9d4150715e5f6a05b99f41e8aa841ee822e4487f0f"
        },
        "downloads": -1,
        "filename": "file-ripper-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62e91af7b192313a3d24cd3c6c0f91d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7901,
        "upload_time": "2020-10-05T14:46:07",
        "upload_time_iso_8601": "2020-10-05T14:46:07.229679Z",
        "url": "https://files.pythonhosted.org/packages/09/7e/891db7199c88164f3befcfce15c89f49eda79c2c7e26c82ffe3055f8f07b/file-ripper-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b6cb83d1ce2cd3a427a331ec4de1d37e4d560b4693afbafcbabdb90335e8170",
          "md5": "9c1ac66c13e8e5aa17b2d6b1a0251001",
          "sha256": "992e3869643734d56186150f469ab88b80a350d46612ba0f6a2df0c2f0843327"
        },
        "downloads": -1,
        "filename": "file-ripper-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9c1ac66c13e8e5aa17b2d6b1a0251001",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10790,
        "upload_time": "2020-10-14T13:27:09",
        "upload_time_iso_8601": "2020-10-14T13:27:09.575720Z",
        "url": "https://files.pythonhosted.org/packages/2b/6c/b83d1ce2cd3a427a331ec4de1d37e4d560b4693afbafcbabdb90335e8170/file-ripper-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f7fe3c75c8a1f6010c22b7b71425beaf60bae66180ac3ab1c562182cc308a95",
          "md5": "9f76428b34b037ade63da86433bc1993",
          "sha256": "363906e3dd8b8a9d17b48cf3e8e75cfe185c2eafff80dffd106ffffd7fc320b9"
        },
        "downloads": -1,
        "filename": "file-ripper-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f76428b34b037ade63da86433bc1993",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10159,
        "upload_time": "2020-10-15T13:46:59",
        "upload_time_iso_8601": "2020-10-15T13:46:59.139080Z",
        "url": "https://files.pythonhosted.org/packages/6f/7f/e3c75c8a1f6010c22b7b71425beaf60bae66180ac3ab1c562182cc308a95/file-ripper-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e248f61dac7b31e8435d15d8a08117393db1817a0ee45030079719a5dff0288",
          "md5": "b4c78b2dd42607479e450eb67b434ac8",
          "sha256": "1179542fda7fc495c3a3dcac3e8158f34c4b75d1305783ac3d7bc079a0284561"
        },
        "downloads": -1,
        "filename": "file-ripper-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b4c78b2dd42607479e450eb67b434ac8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10161,
        "upload_time": "2020-10-15T16:00:02",
        "upload_time_iso_8601": "2020-10-15T16:00:02.595425Z",
        "url": "https://files.pythonhosted.org/packages/0e/24/8f61dac7b31e8435d15d8a08117393db1817a0ee45030079719a5dff0288/file-ripper-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38630d7e83c9f281deb8681dba29271913e044b3df0b9d3b583b58ceb0aee507",
          "md5": "04294337dd0b0bf107a9021e24e9175e",
          "sha256": "ecb15a1780af8766115cbc616e76d18cb4f7c00c83ffb91ffb44c3f6544b7b6a"
        },
        "downloads": -1,
        "filename": "file-ripper-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "04294337dd0b0bf107a9021e24e9175e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6737,
        "upload_time": "2021-01-27T03:30:49",
        "upload_time_iso_8601": "2021-01-27T03:30:49.833429Z",
        "url": "https://files.pythonhosted.org/packages/38/63/0d7e83c9f281deb8681dba29271913e044b3df0b9d3b583b58ceb0aee507/file-ripper-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38630d7e83c9f281deb8681dba29271913e044b3df0b9d3b583b58ceb0aee507",
        "md5": "04294337dd0b0bf107a9021e24e9175e",
        "sha256": "ecb15a1780af8766115cbc616e76d18cb4f7c00c83ffb91ffb44c3f6544b7b6a"
      },
      "downloads": -1,
      "filename": "file-ripper-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "04294337dd0b0bf107a9021e24e9175e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6737,
      "upload_time": "2021-01-27T03:30:49",
      "upload_time_iso_8601": "2021-01-27T03:30:49.833429Z",
      "url": "https://files.pythonhosted.org/packages/38/63/0d7e83c9f281deb8681dba29271913e044b3df0b9d3b583b58ceb0aee507/file-ripper-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}