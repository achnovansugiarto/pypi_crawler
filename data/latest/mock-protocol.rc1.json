{
  "info": {
    "author": "Tim Mitchell",
    "author_email": "tim.mitchell@seequent.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing :: Mocking"
    ],
    "description": "# mock_protocol\nA unittest mock library than understands protocols and annotations\n\nA drop-in replacement for the builtin python 3.7 unittest.mock module where annotations on spec objects are used to spec mocked attributes and methods.\n\nIn addition to the standard `unittest.mock` functionality, a new `from_protocol` function\nis added.\n\n```python\nimport mock_protocol\n\nm = mock_protocol.from_protocol(C, **kwargs)\n``` \nis an alias for \n```python\nm = mock_protocol.create_autospec(C, spec_set=True, instance=True, **kwargs)\n```\nwhich is essentially the same as the `unittest.mock` method of the same name\n```python\n\nm = unittest.mock.create_autospec(C, spec_set=True, instance=True, **kwargs)\n```\nexcept that type-hints are used to spec the mocked attributes.\n \nWhen you have type-hinted code like this\n```python\nclass A(object):\n    b: str\n\n    def __init__(self, b: str):\n        self.b = b\n\n    def foo(self, bar: int) -> list:\n        return ['x']*bar\n\n\nclass C(object):\n    a: int\n\n    def __init__(self, a: int):\n        self.a = a\n\n    def bar(self, foo: str) -> A:\n        return A(foo)\n```\nThen mocking them with mock_protocol will use the type hints as specs for child mocks.\n```python\nm = mock_protocol.from_protocol(C)\na = m.bar('hello')\n\n# the following are all True\nisinstance(a, A)\nisinstance(a.b, str)\nisinstance(m.a, int)\nisinstance(a.foo(4), list)\n```\n\n`mock_protocol` also understands common `typing` types such as `Dict` and `Tuple` and `Optional`\n\n```python\nimport typing\n\nclass D(object):\n    a: typing.Optional[int]\n    d: typing.Dict[str, int]\n    e: typing.Optional[typing.AnyStr]\n    t: typing.Tuple[int, float]\n\n    def __init__(self, a: int):\n        self.a = a\n\n    def bar(self, foo: str) -> typing.Optional[A]:\n        return A(foo)\n\nm = mock_protocol.from_protocol(D)\na = m.bar('hello')\n\n# the following are all True\nisinstance(m, D)\nisinstance(a, A)\nisinstance(m.a, int)\nisinstance(m.d, dict)\nisinstance(m.e, str)\nisinstance(m.t, tuple)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tim-mitchell/mocka",
    "keywords": "test unittest mock protocol annotation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mock-protocol",
    "package_url": "https://pypi.org/project/mock-protocol/",
    "platform": "",
    "project_url": "https://pypi.org/project/mock-protocol/",
    "project_urls": {
      "Homepage": "https://github.com/tim-mitchell/mocka",
      "Source": "https://github.com/tim-mitchell/mocka/"
    },
    "release_url": "https://pypi.org/project/mock-protocol/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "A unittest mock library than understands annotations",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8619974,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81e0d43526598fcf67cbe4f8c4366b7dcf77018a60bb8cd3440a9dd6ed264aad",
          "md5": "7e592f06df760f8d9b476d27c54352cc",
          "sha256": "2ecf2d7664c3e5de2cc570a108fcbd1b27dad82b40e639f6be7df51bad3e95dc"
        },
        "downloads": -1,
        "filename": "mock_protocol-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e592f06df760f8d9b476d27c54352cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 23177,
        "upload_time": "2020-11-10T04:02:18",
        "upload_time_iso_8601": "2020-11-10T04:02:18.447398Z",
        "url": "https://files.pythonhosted.org/packages/81/e0/d43526598fcf67cbe4f8c4366b7dcf77018a60bb8cd3440a9dd6ed264aad/mock_protocol-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81e0d43526598fcf67cbe4f8c4366b7dcf77018a60bb8cd3440a9dd6ed264aad",
        "md5": "7e592f06df760f8d9b476d27c54352cc",
        "sha256": "2ecf2d7664c3e5de2cc570a108fcbd1b27dad82b40e639f6be7df51bad3e95dc"
      },
      "downloads": -1,
      "filename": "mock_protocol-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e592f06df760f8d9b476d27c54352cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 23177,
      "upload_time": "2020-11-10T04:02:18",
      "upload_time_iso_8601": "2020-11-10T04:02:18.447398Z",
      "url": "https://files.pythonhosted.org/packages/81/e0/d43526598fcf67cbe4f8c4366b7dcf77018a60bb8cd3440a9dd6ed264aad/mock_protocol-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}