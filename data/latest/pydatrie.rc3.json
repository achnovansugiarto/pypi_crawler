{
  "info": {
    "author": "Kevin Ko",
    "author_email": "kevin.ko@tunib.ai",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Pydatrie\nPydatire is a pure python implementation of DARTS (Double ARray Trie System). \nIt was introduced by Aoe at 1989 and was used for main data structure of [`mecab`](https://github.com/taku910/mecab), one of the most famous Japenese morpheme analyzer.\nI ported [java implementation of this](https://github.com/zhaoshiyu/SEANLP/blob/master/src/main/java/cn/edu/kmust/seanlp/collection/trie/DATrie.java) \nto python and added many features like searching keys and values by given prefix.\n\nI started this project to make pure python Korean mecab analyzer which was named `pecab`.\nBut sadly I can't find pure python implementation of DARTS, so I also made this package.\nYou can see the `pecab` project [here](https://github.com/hyunwoongko/pecab).\n\n## Installation\n```\npip install pydatrie\n```\n\n## Usages\nThe usages were inspired by [`datrie`](https://github.com/pytries/datrie) package, a python wrapper of [`libdatrie`](https://github.com/tlwg/libdatrie).\nPlease check the details from the following code script.\n\n```python\nfrom pydatrie import DoubleArrayTrie\n\n# create trie\n# the input dict type is Dict[str, Any]\ntrie = DoubleArrayTrie(\n    {\n        \"AB\": \"1\",\n        \"ABCD\": \"2\",\n        \"EF\": \"3\",\n        \"EFGH\": \"4\",\n    }\n)\n\n# exact matching search using `__getitem__`\ntrie[\"AB\"]\n# \"1\"\ntrie[\"EF\"]\n# \"3\"\n\n# exact matching search using `get`, equivalent with `__getitem__`\ntrie.get(\"AB\")\n# \"1\"\ntrie.get(\"EF\")\n# \"3\"\n\n# common prefix search using `prefixes`\ntrie.prefixes()\n# [\"AB\", \"ABCD\", \"EF\", \"EFGH\"]\ntrie.prefixes(\"ABC\")\n# [\"AB\"]\ntrie.prefixes(\"ABCD\")\n# [\"AB\", \"ABCD\"]\n\n# common prefix search with value using `prefix_items`\ntrie.prefix_items()\n# [('AB', '1'), ('ABCD', '2'), ('EF', '3'), ('EFGH', '4')]\ntrie.prefix_items(\"ABC\")\n# [('AB', '1')]\ntrie.prefix_items(\"ABCD\")\n# [('AB', '1'), ('ABCD', '2')]\n\n# longest prefix search using `longest_prefix`\ntrie.longest_prefix()\n# ABCD\ntrie.longest_prefix(\"ABC\")\n# AB\n\n# longest prefix search with value using `longest_prefix_item`\ntrie.longest_prefix_item()\n# ('ABCD', '2')\ntrie.longest_prefix_item(\"ABC\")\n# ('AB', '1')\n\n# shortest prefix search using `shortest_prefix`\ntrie.shortest_prefix()\n# AB\ntrie.shortest_prefix(\"EFG\")\n# EF\n\n# shortest prefix search with value using `shortest_prefix`\ntrie.shortest_prefix_item()\n# ('AB', '1')\ntrie.shortest_prefix_item(\"EFG\")\n# ('EF', '3')\n\n# check trie has the exact key using `__contains__`\n\"EF\" in trie\n# True\n\"EFG\" in trie\n# False\n\n# check trie has any prefix using `has_prefix`\ntrie.has_prefix(\"EF\")\n# True\ntrie.has_prefix(\"EFG\")\n# True\n\n# check trie has any key which starts with given prefix using `has_keys_with_prefix`\ntrie.has_keys_with_prefix(\"A\")\n# True\ntrie.has_keys_with_prefix(\"X\")\n# False\n\n# search all the keys starts with given prefix using `keys`\ntrie.keys()\n# ['AB', 'ABCD', 'EF', 'EFGH']\ntrie.keys(\"A\")\n# ['AB', 'ABCD']\ntrie.keys(\"ABC\")\n# ['ABCD']\n\n# search all the values matched with keys starts with given prefix using `keys`\ntrie.values()\n# ['1', '2', '3', '4']\ntrie.values(\"A\")\n# ['1', '2']\ntrie.values(\"ABC\")\n# ['2']\n\n# search all the keys and values matched with keys starts with given prefix using `keys`\ntrie.items()\n# [('AB', '1'), ('ABCD', '2'), ('EF', '3'), ('EFGH', '4')]\ntrie.items(\"A\")\n# [('AB', '1'), ('ABCD', '2')]\ntrie.items(\"ABC\")\n# [('ABCD', '2')]\n\n# common suffix search using `suffixes`\ntrie.suffixes()\n# ['AB', 'ABCD', 'EF', 'EFGH']\ntrie.suffixes(\"A\")\n# ['B', 'BCD']\n\n# check the size of trie using `__len__`\nlen(trie)\n# 4\n\n# save trie using `save`\ntrie.save(\"file.dat\")\n\n# load trie using `load`\ntrie2 = DoubleArrayTrie.load(\"file.dat\")\ntrie2.items()\n# [('AB', '1'), ('ABCD', '2'), ('EF', '3'), ('EFGH', '4')]\n# it works same with original object!\n\n# check sameness of two tries using `__eq__`\ntrie == trie2\n# True\n\n# print information of trie\nprint(trie)\n# DoubleArrayTrie(size=4, keys=['AB', 'ABCD', 'EF', ...]), values=['1', '2', '3', ...])\n\n# for loop using `__iter__` and `__next__`\nfor key in trie:\n    print(key)\n# AB\n# ABCD\n# EF\n# EFGH\n\n# modify value matched with given key using `modify_value`\ntrie.modify_value(\"AB\", \"99\")\ntrie.items()\n# [('AB', '99'), ('ABCD', '2'), ('EF', '3'), ('EFGH', '4')]\n```\n\n## Limitations\nCurrent implementation doesn't support dynamical node insertion and update. So you need to add all inputs when you create the object.\n\n## License\n```\nCopyright 2022 Hyunwoong Ko.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hyunwoongko/pydatrie",
    "keywords": "",
    "license": "Apache 2.0 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydatrie",
    "package_url": "https://pypi.org/project/pydatrie/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pydatrie/",
    "project_urls": {
      "Homepage": "https://github.com/hyunwoongko/pydatrie"
    },
    "release_url": "https://pypi.org/project/pydatrie/0.3/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Pure Python implementation of DARTS (Double ARray Trie System)",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15987075,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241f7fd6af34eae5db76bad5a64cf5c7c2d35dbbf0c51b9edf10aba3b31e11cd",
          "md5": "b371bae3805ed2373a72fd34ad6f3eb5",
          "sha256": "1ce7584ed5713b7d4d4f46ff22a2eba2f6256c0598e90ce6268e03134834fa38"
        },
        "downloads": -1,
        "filename": "pydatrie-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b371bae3805ed2373a72fd34ad6f3eb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7285,
        "upload_time": "2022-12-04T17:18:52",
        "upload_time_iso_8601": "2022-12-04T17:18:52.673023Z",
        "url": "https://files.pythonhosted.org/packages/24/1f/7fd6af34eae5db76bad5a64cf5c7c2d35dbbf0c51b9edf10aba3b31e11cd/pydatrie-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b59836b7a0d9a139c98839fb4b9fb3ec27eda7ad583515d7d07fa094dd8c8ce",
          "md5": "edacd37e1c7f23cbdfce3f2ce4ca25ef",
          "sha256": "61aefaee562b55ae00f692a5a369f73fd66dd0dad4ce4c92dfcb9af6663c0f52"
        },
        "downloads": -1,
        "filename": "pydatrie-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "edacd37e1c7f23cbdfce3f2ce4ca25ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7313,
        "upload_time": "2022-12-04T17:25:13",
        "upload_time_iso_8601": "2022-12-04T17:25:13.557231Z",
        "url": "https://files.pythonhosted.org/packages/3b/59/836b7a0d9a139c98839fb4b9fb3ec27eda7ad583515d7d07fa094dd8c8ce/pydatrie-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0d8dfc2ed26cfa1737dd0d4d6ac247af136e44ab51c06d9368c18b33cf24000",
          "md5": "8a39b6018d5b281b8953936d5b3fd9d7",
          "sha256": "8ebd7526a231e783cad860f2d6f9c99b13eb00bdf9118393a29c4ef561911571"
        },
        "downloads": -1,
        "filename": "pydatrie-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a39b6018d5b281b8953936d5b3fd9d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7316,
        "upload_time": "2022-12-04T17:33:38",
        "upload_time_iso_8601": "2022-12-04T17:33:38.045081Z",
        "url": "https://files.pythonhosted.org/packages/f0/d8/dfc2ed26cfa1737dd0d4d6ac247af136e44ab51c06d9368c18b33cf24000/pydatrie-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0d8dfc2ed26cfa1737dd0d4d6ac247af136e44ab51c06d9368c18b33cf24000",
        "md5": "8a39b6018d5b281b8953936d5b3fd9d7",
        "sha256": "8ebd7526a231e783cad860f2d6f9c99b13eb00bdf9118393a29c4ef561911571"
      },
      "downloads": -1,
      "filename": "pydatrie-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8a39b6018d5b281b8953936d5b3fd9d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7316,
      "upload_time": "2022-12-04T17:33:38",
      "upload_time_iso_8601": "2022-12-04T17:33:38.045081Z",
      "url": "https://files.pythonhosted.org/packages/f0/d8/dfc2ed26cfa1737dd0d4d6ac247af136e44ab51c06d9368c18b33cf24000/pydatrie-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}