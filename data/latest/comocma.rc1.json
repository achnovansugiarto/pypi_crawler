{
  "info": {
    "author": "Cheikh Toure and Nikolaus Hansen",
    "author_email": "first_author_firstname.first_author_lastname@polytechnique.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Education",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# Introduction\n\n``pycomocma`` is a Python implementation of [COMO-CMA-ES](https://hal.inria.fr/hal-02103694/document) which is a Multiobjective Evolution Strategy, based upon the [Covariance Matrix Adaptation Evolution Strategy](https://en.wikipedia.org/wiki/CMA-ES) \n([CMA-ES](http://cma.gforge.inria.fr/)) single optimizer.\n\nFor the time being, only the bi-objective case is tested and functional.\n\n## Installation\n\nEither via\n```\npip install git+https://github.com/CMA-ES/pycomocma.git@master\n```\n\nor simply via\n\n```\npip install comocma\n```\n\n\n## Links\n\n- [Code on Github](https://github.com/CMA-ES/pycomocma)\n- Documentation in\n  - [apidocs format](https://cma-es.github.io/pycomocma/comocma-apidocs/index.html)\n  - [epydocs format](https://cma-es.github.io/moarchiving/comocma-epydocs/index.html)\n\n## Testing of the `comocma` module\n\nThe script\n```\npython -m comocma\n```\nruns the test written in the `__main__` file.\n\n\n# Use cases \n\n## Instantiating a multiobjective solver\n\n### Importing necessary packages:\n```python\nimport cma, comocma\n```\n\n### Setting parameters:\n```python\ndimension = 10  # dimension of the search space\nnum_kernels = 5 # number of single-objective solvers (number of points on the front)\nsigma0 = 0.2    # initial step-sizes\n```\n\n### Instantiate a multiobjective solver\n```python\nlist_of_solvers = comocma.get_cmas(num_kernels * [dimension * [0]], sigma0) # produce `num_kernels cma instances`\nmoes = comocma.Sofomore(list_of_solvers, reference_point=[11, 11]) # create a bi-objective como-cma-es instance\nmoes3 = comocma.Sofomore(list_of_solvers, reference_point=[11, 11, 11]) # create a multiobjective como-cma-es instance\n```\n\n### Setting a callable multiobjective function\n```python\nfitness = comocma.FitFun(cma.ff.sphere, lambda x: cma.ff.sphere(x-1)) # a callable bi-objective function\nfitness3 = comocma.FitFun(cma.ff.sphere, lambda x: cma.ff.sphere(x-1), lambda x: cma.ff.sphere(x+1)) # a callable multiobjective function\n```\n\n### Single-objective options: a use case with few cma-es' options\n```python\nlist_of_solvers = comocma.get_cmas(num_kernels * [dimension * [0]], 0.2, inopts={'bounds': [0.2, 0.9], 'tolx': 10**-7,'popsize': 32}) \n# produce `num_kernels cma instances`\nmoes = comocma.Sofomore(list_of_solvers, [1.1, 1.1]) # create a como-cma-es instance\n```\n\n### Use case with some Multiobjective options\n```python\nlist_of_solvers = comocma.get_cmas(num_kernels * [dimension * [0]], 0.2)\nmoes = comocma.Sofomore(list_of_solvers, [1.1, 1.1], opts={'archive': True, 'restart': None, 'update_order': None}) # create a como-cma-es instance\n```\n\n\n## The `Optimize` interface\n\n### Initialization\n```python\nimport cma, comocma\n\ndimension = 10  # dimension of the search space\nnum_kernels = 5 # number of single-objective solvers (number of points on the front)\nsigma0 = 0.2    # initial step-sizes\n\nlist_of_solvers = comocma.get_cmas(num_kernels * [dimension * [0]], sigma0) # produce `num_kernels cma instances`\nmoes = comocma.Sofomore(list_of_solvers, [11,11]) # create a como-cma-es instance\n\nfitness = comocma.FitFun(cma.ff.sphere, lambda x: cma.ff.sphere(x-1)) # a callable bi-objective function\n```\n### Optimizing `fitness` until default stopping criteria\n\n```python\nmoes.optimize(fitness)\n```\n\n    Iterat #Fevals   Hypervolume   axis ratios   sigmas   min&max stds\n                                      (median)  (median)    (median)\n        1     10 1.210000000000000e+00 1.0e+00 2.00e-01  2e-01  2e-01\n        2     20 1.210000000000000e+00 1.0e+00 2.00e-01  2e-01  2e-01\n        3     30 1.210000000000000e+00 1.0e+00 1.85e-01  2e-01  2e-01\n      100   1000 1.207601015381810e+00 1.6e+00 3.40e-02  3e-02  3e-02\n      200   2000 1.209903687756354e+00 1.7e+00 7.74e-03  5e-03  6e-03\n      300   3000 1.209997694077156e+00 1.8e+00 2.03e-03  1e-03  1e-03\n      400   4000 1.209999800600613e+00 1.8e+00 4.90e-04  2e-04  3e-04\n      480   4800 1.209999979594839e+00 1.9e+00 2.02e-04  7e-05  9e-05\n\n\n### Optimizing `fitness` with a limited number of iterations\n\n```python\nmoes.optimize(fitness, iterations=300)\n```\n    Iterat #Fevals   Hypervolume   axis ratios   sigmas   min&max stds\n                                    (median)  (median)    (median)\n      1     10 1.100000000000000e+01 1.0e+00 2.00e-01  2e-01  2e-01\n      2     20 2.158412269365152e+01 1.0e+00 2.00e-01  2e-01  2e-01\n      3     30 2.896035267829712e+01 1.0e+00 1.98e-01  2e-01  2e-01\n    100   1000 9.512982413314423e+01 1.7e+00 1.01e-01  8e-02  9e-02\n    200   2000 9.703624875547615e+01 1.9e+00 4.27e-02  3e-02  4e-02\n    300   3000 9.722958234416403e+01 1.9e+00 1.63e-02  9e-03  1e-02\n\n\n### Optimizing `fitness`  with a maximum number of evaluations\n\n```python\nmoes.optimize(fitness, maxfun=3000)\n```\n    Iterat #Fevals   Hypervolume   axis ratios   sigmas   min&max stds\n                                    (median)  (median)    (median)\n      1     10 1.100000000000000e+01 1.0e+00 2.00e-01  2e-01  2e-01\n      2     20 2.158412269365152e+01 1.0e+00 2.00e-01  2e-01  2e-01\n      3     30 2.896035267829712e+01 1.0e+00 1.98e-01  2e-01  2e-01\n    100   1000 9.512982413314423e+01 1.7e+00 1.01e-01  8e-02  9e-02\n    200   2000 9.703624875547615e+01 1.9e+00 4.27e-02  3e-02  4e-02\n    300   3000 9.722958234416403e+01 1.9e+00 1.63e-02  9e-03  1e-02\n\n\n## The `ask-and-tell` interface\n\n```python\nwhile not moes.stop():\n    solutions = moes.ask(\"all\")\n    objective_values = [fitness(x) for x in solutions]\n    moes.tell(solutions, objective_values)\n    moes.disp()          # display datas during the optimization\n    moes.logger.add()    # logging data after each `ask` and `tell` call\n```\n\n    Iterat #Fevals   Hypervolume   axis ratios   sigmas   min&max stds\n                                      (median)  (median)    (median)\n        1    180 1.990425600000000e-01 1.0e+00 1.88e-01  2e-01  2e-01\n        2    360 2.279075246432772e-01 1.1e+00 1.87e-01  2e-01  2e-01\n        3    540 2.436105134581627e-01 1.2e+00 1.90e-01  2e-01  2e-01\n      100  18000 3.607157703968831e-01 2.1e+00 1.80e-02  1e-02  2e-02\n      200  35172 3.635275131024869e-01 2.1e+00 5.95e-03  4e-03  5e-03\n      300  49788 3.637412031970786e-01 2.2e+00 1.29e-03  8e-04  1e-03\n      320  50784 3.637421277015990e-01 2.2e+00 1.26e-03  7e-04  9e-04\n\n### Argument of `moes.ask`\n\n```python\nsolutions = moes.ask() # we generate offspring for only one kernel (sequential)\nsolutions = moes.ask(“all”) # we generate offspring simultaneously for all kernels (parallel)\nsolutions = moes.ask(number_asks) # we generate offspring for `number_asks` kernels\n```\n\n## Picklable object: saving and resuming a MO optimization with the  `ask-and-tell` interface\n\n### Initialization\n\n```python\nimport cma, como, pickle\n\ndimension = 10  # dimension of the search space\nnum_kernels = 5 # number of single-objective solvers (number of points on the front)\nsigma0 = 0.2    # initial step-sizes\n\nlist_of_solvers = como.get_cmas(num_kernels * [dimension * [0]], sigma0) # produce `num_kernels cma instances`\nmoes = como.Sofomore(list_of_solvers, reference_point = [11,11]) # create a como-cma-es instance\n\nfitness = como.FitFun(cma.ff.sphere, lambda x: cma.ff.sphere(x-1)) # a callable bi-objective function\n```\n\n### Saving an optimization\n\n```python\nfor i in range(100):\n    solutions = moes.ask()\n    objective_values = [fitness(x) for x in solutions]\n    moes.tell(solutions, objective_values)\n    moes.disp()\n\npickle.dump(moes, open('saved-mocma-object.pkl', 'wb')) # we save the instance\nprint('saved')\ndel moes  # deleting completely the Sofomore instance\n```\n\n### Output\n\n    Iterat #Fevals   Hypervolume   axis ratios   sigmas   min&max stds\n                                      (median)  (median)    (median)\n        1     10 1.100000000000000e+01 1.0e+00 2.00e-01  2e-01  2e-01\n        2     20 2.845200549045931e+01 1.0e+00 2.00e-01  2e-01  2e-01\n        3     30 3.440089785096067e+01 1.0e+00 2.00e-01  2e-01  2e-01\n      100   1000 9.562953505152342e+01 1.9e+00 1.13e-01  9e-02  1e-01\n    saved\n\n### Resuming an optimization\n\n```python\nmoes = pickle.load(open('saved-mocma-object.pkl', 'rb')) # we load the saved file here\n\nmoes.optimize(fitness, iterations=400)\n```\n\n### Output\n\n    200   2000 9.716644477685412e+01 1.9e+00 3.33e-02  2e-02  3e-02\n    300   3000 9.723550009906029e+01 2.0e+00 1.13e-02  6e-03  8e-03\n    400   4000 9.724067117112808e+01 1.9e+00 2.95e-03  1e-03  2e-03\n    500   5000 9.724107479961819e+01 2.0e+00 9.38e-04  4e-04  5e-04\n\n## Example of plots\n\n### COMO-CMA-ES data plottings\n\n```python\nmoes.logger.plot_front()\n```\n![image info](./readme_images/front.png )\n\n```python\nmoes.logger.plot_divers()\n```\n![image info](./readme_images/divers.png )\n\n### CMA-ES plots of written data\n\n```python\ncma.plot(\"cma_kernels/0\")\n```\n![image info](./readme_images/cma-example.png )\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CMA-ES/pycomocma",
    "keywords": "optimization,multi-objective,CMA-ES,cmaes,evolution strategy",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "comocma",
    "package_url": "https://pypi.org/project/comocma/",
    "platform": "",
    "project_url": "https://pypi.org/project/comocma/",
    "project_urls": {
      "Homepage": "https://github.com/CMA-ES/pycomocma"
    },
    "release_url": "https://pypi.org/project/comocma/0.5.1/",
    "requires_dist": [
      "cma (>=3)",
      "moarchiving",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Multiobjective framework Sofomore, instantiated withthe single-objective solver CMA-ES to obtainthe Multiobjective evolutionary algorithm COMO-CMA-ES.",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7048502,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8099a09d28dc37cc7ad589c80bc4d10d2821f4a586ef4ad2fb6c247fc7054ecd",
          "md5": "38a3f5842e4618c137745efa90a26046",
          "sha256": "280cfbaac20bc08e781b5ba2a4c4e5a48c64e2d55916b3e4ca3abce79b313590"
        },
        "downloads": -1,
        "filename": "comocma-0.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38a3f5842e4618c137745efa90a26046",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 31508,
        "upload_time": "2020-04-18T14:53:48",
        "upload_time_iso_8601": "2020-04-18T14:53:48.843003Z",
        "url": "https://files.pythonhosted.org/packages/80/99/a09d28dc37cc7ad589c80bc4d10d2821f4a586ef4ad2fb6c247fc7054ecd/comocma-0.5.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f98fadcd8771c6717c50e9358b3b1f4b9cee5b169b95f17fd41ca2493f6da20d",
          "md5": "46f0bcb6a6e413b901270ac2c970e9bc",
          "sha256": "c09fb419358cfbbd9358ad478f3a2aae3e3d00a1de1ad48cacd22bb3d47ed05e"
        },
        "downloads": -1,
        "filename": "comocma-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46f0bcb6a6e413b901270ac2c970e9bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31119,
        "upload_time": "2020-04-18T14:53:49",
        "upload_time_iso_8601": "2020-04-18T14:53:49.970869Z",
        "url": "https://files.pythonhosted.org/packages/f9/8f/adcd8771c6717c50e9358b3b1f4b9cee5b169b95f17fd41ca2493f6da20d/comocma-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8099a09d28dc37cc7ad589c80bc4d10d2821f4a586ef4ad2fb6c247fc7054ecd",
        "md5": "38a3f5842e4618c137745efa90a26046",
        "sha256": "280cfbaac20bc08e781b5ba2a4c4e5a48c64e2d55916b3e4ca3abce79b313590"
      },
      "downloads": -1,
      "filename": "comocma-0.5.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38a3f5842e4618c137745efa90a26046",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 31508,
      "upload_time": "2020-04-18T14:53:48",
      "upload_time_iso_8601": "2020-04-18T14:53:48.843003Z",
      "url": "https://files.pythonhosted.org/packages/80/99/a09d28dc37cc7ad589c80bc4d10d2821f4a586ef4ad2fb6c247fc7054ecd/comocma-0.5.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f98fadcd8771c6717c50e9358b3b1f4b9cee5b169b95f17fd41ca2493f6da20d",
        "md5": "46f0bcb6a6e413b901270ac2c970e9bc",
        "sha256": "c09fb419358cfbbd9358ad478f3a2aae3e3d00a1de1ad48cacd22bb3d47ed05e"
      },
      "downloads": -1,
      "filename": "comocma-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "46f0bcb6a6e413b901270ac2c970e9bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31119,
      "upload_time": "2020-04-18T14:53:49",
      "upload_time_iso_8601": "2020-04-18T14:53:49.970869Z",
      "url": "https://files.pythonhosted.org/packages/f9/8f/adcd8771c6717c50e9358b3b1f4b9cee5b169b95f17fd41ca2493f6da20d/comocma-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}