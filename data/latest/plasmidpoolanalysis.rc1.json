{
  "info": {
    "author": "ROUJIA LI",
    "author_email": "roujia.li@mail.utoronto.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "## Dependencies\n* [python version 3.7](https://www.python.org/downloads/)\n\n* [Bowtie2 version 2.3.2](https://sourceforge.net/projects/bowtie-bio/files/bowtie2/)\n\n* [samtools version 1.4](https://sourceforge.net/projects/samtools/files/)\n\n## Build reference\n* The pre-built reference files used for the analysis can be found in\n    1. human grch37: `/home/rothlab/rli/02_dev/06_pps_pipeline/fasta/human_ensembl/grch37`\n    2. human grch38: `/home/rothlab/rli/02_dev/06_pps_pipeline/fasta/human_ensembl/grch38`\n    3. human 9.1: `/home/rothlab/rli/02_dev/06_pps_pipeline/fasta/human_91`\n    4. yeast (palte specific): `/home/rothlab/rli/02_dev/06_pps_pipeline/fasta/yeast_ref_all`\n* If you need to build new references, please make sure:\n    1. Name for the reference is the same as name for the sequencing files. For example, the corresponding reference for `scORFeome-HIP-05_L001.fastq.gz` is `scORFeome-HIP-05`\n    2. ID for each sequence matches the ORF-id in the summary file \n\n## Make summary file\n* The summary files for human and yeast are premade before running the pipeline, the raw data can be found: `/home/rothlab/rli/02_dev/06_pps_pipeline/target_orfs/human_summary.csv` and `/home/rothlab/rli/02_dev/06_pps_pipeline/target_orfs/yeast_summary.csv`\n* If you are making your own summary file, make sure you have a column with the name `orf_name`, which is the unique identifier for each ORF, this should also map with the sequence names in the fasta file you make. You can modify in `main.py: analysisHuman or analysisYeast` to select columns you want to keep\n\n## Input FASTQ files\n* FASTQ files:\n  1. human (files from the same group are merged together): `/home/rothlab/rli/01_ngsdata/PPS_data/Human_pool/merged_pool9-1/`\n  2. yeast (files from the same plate are merged together): `/home/rothlab/rli/01_ngsdata/PPS_data/yeast_pps_fastq/yeast_pps_fastq/`\n\n## Install and Run\n* install the package using: ``\n    ```\n  usage: pps [-h] [--align] [-f FASTQ] [-n NAME] -o OUTPUT -r REF\n           [--refName REFNAME] [--summaryFile SUMMARYFILE] [--orfseq ORFSEQ]\n  Plasmid pool sequencing analysis\n\n  required arguments:\n  -f FASTQ, --fastq FASTQ\n                        path to fastq files\n  -o OUTPUT, --output OUTPUT\n                        Output directory\n  -r REF, --ref REF     Path to reference\n  -m MODE, --mode MODE  human or yeast\n  --summaryFile SUMMARYFILE\n                        Yeast or Human summary file\n\n  optional arguments:\n  -h, --help            show this help message and exit\n  --align               provide this argument if users want to start with\n                        alignment, otherwise the program assumes alignment was\n                        done and will analyze the vcf files.\n  -n NAME, --name NAME  Run name (default set to pps)\n\n  --refName REFNAME     grch37, grch38, cds_seq. Required if mode == human\n  -l LOG, --log LOG logging mode, default set to info\n  ```\n* Example: Human (with alignment to grch37)\n\n  `pps -f ~/01_ngsdata/PPS_data/Human_pool/merged_pool9-1/ -o ../../output/ -n Human91 --refName human91 --summaryFile ../../target_orfs/human_summary.csv -m human -r ../../fasta/human_91/ --align`\n\n* Yeast \n\n  `pps -f ~/01_ngsdata/PPS_data/yeast_pps_fastq/yeast_pps_fastq/ -o ../../output/ -n testpackYeast --summaryFile ../../target_orfs/yeast_summary.csv -m yeast -r ../../fasta/yeast_ref_all/`\n\n* The pipeline first submit alignment jobs to the cluster (slurm), after all the jobs are done, it filters vcf files, output summary and mutations\n\n## Output\n* All the intermediate files will be saved into your output directory, a new folder will be made with the `-n` parameter \n* For each fastq file, a folder will be made. It contains the following files:\n  1. `*.sh`: alignment job script used for alignment\n  2. `all_summary_plateORFs.csv`: summary for this plate/group\n  3. `*.log`: log file\n  4. `*_raw.vcf`: raw vcf file generated from pileup\n  5. `*_variants.vcf`: vcf file with variants only\n  6. `*_filtered.vcf`: filtered vcf file \n* After the run is finished, the following files will be generated in the master output folder:\n  1. `alignment_log.csv`: shows the alignment rate for each plate/group\n  2. `all_mutations.csv`: contains all the variants passed filter \n  3. `all_summary.csv`: contains all ORFs and if they were found/fully covered in the sequencing\n  4. `genes_stats.csv`: overall stats\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RyogaLi/PPS",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PlasmidPoolAnalysis",
    "package_url": "https://pypi.org/project/PlasmidPoolAnalysis/",
    "platform": "",
    "project_url": "https://pypi.org/project/PlasmidPoolAnalysis/",
    "project_urls": {
      "Homepage": "https://github.com/RyogaLi/PPS"
    },
    "release_url": "https://pypi.org/project/PlasmidPoolAnalysis/0.1.0/",
    "requires_dist": [
      "pandas",
      "seaborn",
      "numpy",
      "biopython",
      "progressbar"
    ],
    "requires_python": ">=3.7",
    "summary": "Analysis for plasmid pool sequencing data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11857670,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b733fd39862dfe4377bb965f66b9d9c5ca5956373fd9c76a01b2088f094685f",
          "md5": "7157b36ee10009dfcdecbf81aada8067",
          "sha256": "fe235f0f1f9c86a915c95e455701c2167be0f1624340db9224130425bea3f7bb"
        },
        "downloads": -1,
        "filename": "PlasmidPoolAnalysis-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7157b36ee10009dfcdecbf81aada8067",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 51279,
        "upload_time": "2021-10-27T19:25:55",
        "upload_time_iso_8601": "2021-10-27T19:25:55.605223Z",
        "url": "https://files.pythonhosted.org/packages/1b/73/3fd39862dfe4377bb965f66b9d9c5ca5956373fd9c76a01b2088f094685f/PlasmidPoolAnalysis-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b733fd39862dfe4377bb965f66b9d9c5ca5956373fd9c76a01b2088f094685f",
        "md5": "7157b36ee10009dfcdecbf81aada8067",
        "sha256": "fe235f0f1f9c86a915c95e455701c2167be0f1624340db9224130425bea3f7bb"
      },
      "downloads": -1,
      "filename": "PlasmidPoolAnalysis-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7157b36ee10009dfcdecbf81aada8067",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 51279,
      "upload_time": "2021-10-27T19:25:55",
      "upload_time_iso_8601": "2021-10-27T19:25:55.605223Z",
      "url": "https://files.pythonhosted.org/packages/1b/73/3fd39862dfe4377bb965f66b9d9c5ca5956373fd9c76a01b2088f094685f/PlasmidPoolAnalysis-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}