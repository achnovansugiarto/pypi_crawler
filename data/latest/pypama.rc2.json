{
  "info": {
    "author": "Guillaume Coffin",
    "author_email": "guill.coffin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "======\npypama\n======\n\nHow to install\n--------------\n\n``pip install pypama``\n\nPresentation\n------------\n\nThis package provides a pattern matching for list of objects. Just as Regex provides regular expression for\nstrings, this package provides regular expression for other type of lists.\n\nAn example is worth a thousand words: assume you have a list\n\n>>> example_list = ['a', 'a', 1, '', None, 'b', 'c',  'e']\n\nFor some reason, you know that there is an int and a None, and you\nwant to extract that number and the 2 strings following the None\n\n>>> from pypama import build_pattern, is_int, is_none\n>>> g = build_pattern((~is_int).star(False), '(', is_int, ')', '.*', is_none, '(',ANY,ANY, ')')\n>>> g.match(example_list).groups()\n[[1], ['b', 'c']]\n\n\n\n- ``~is_int`` will matching anything that's not an integer\n- ``.star(False)``: equivalent to ``*?`` in regular expressions: repeat as many as necessary\n- parenthesis are for capturing groups\n- ``.*`` is short for ``ANY.star()`` (match anything, repeatedly)\n  \nTherefore the pattern above reads as follow: match anything that's not an int, repeatedly, \nuntil you find an int that you capture in group 1. Then match anything until you\nfind a None. That must be followed by two elements that you capture in group 2.\n  \nThis is therefore very similar to the ``re`` package, but applied to a list and with\nmatching that goes beyond strings.\n    \nUsage\n-----\n\n``build_pattern(*args, **functions)``\nwhere args is a list of strings or ``Pattern`` objects, and functions maps function names to executable.\n\nThe args can be a string or a list of strings containing:\n - ``<string>``: will match the string inside <>\n - callable unction: X will match if function(X) returns True\n - ``X?``: will be ignored or match X\n - ``X*``: will match if X matches repeatedly (greedy)\n - ``X*?``: will match if X matches repeatedly (non greedy)\n - ``(X)``: will capture the X in a group\n - ``(P<name>X)``: will capture X in a group named \"name\"\n - ``X|Y``: will match if X or Y matches\n - ``\\n``: will match the nth group previously matched\n - ``<r:X>``: will match if the word matches regexp X\n - ``<re:X>``: same as ``<r:X>``\n - ``<c:function>`` or ``<call:function>``: will match if function(X) matches. If function does not exist in the namespace of pypama, add the definition in the function call eg ``build_pattern('<c:foo>', foo=lambda x:x<2)`` will match [1]\n - ``.`` will match any item\n - ``$`` will match if at the end of the list\n - ``X{n}`` will match X exactly n times. n can be a list of integer\n - ``X!``: will match if the item doesn't match X (X must match exactly 1 element)\n\n\nBoth are equally valid and evaluate to the same result;\n - ``build_pattern('<hello>','<world>','.*')``\n - ``build_pattern('<hello><world>.*')``",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gcoffin/pypama",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypama",
    "package_url": "https://pypi.org/project/pypama/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypama/",
    "project_urls": {
      "Homepage": "http://github.com/gcoffin/pypama"
    },
    "release_url": "https://pypi.org/project/pypama/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Pattern Matching",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6562410,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb086f5e1225fe73d136836e20127f8e3ca076138b718f2c87c6268ae659950a",
          "md5": "9431c3d6d6b126496a92b20b09c77cca",
          "sha256": "f93706e20493ea4356ead62e7eb616d2da17f9a0494c16630b9d858328d6d04f"
        },
        "downloads": -1,
        "filename": "pypama-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9431c3d6d6b126496a92b20b09c77cca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5431,
        "upload_time": "2020-01-17T08:23:08",
        "upload_time_iso_8601": "2020-01-17T08:23:08.969627Z",
        "url": "https://files.pythonhosted.org/packages/fb/08/6f5e1225fe73d136836e20127f8e3ca076138b718f2c87c6268ae659950a/pypama-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "980ff4817eff671c038a4420cab5dd5e28423e7877429f9977eb9cc16fe8c463",
          "md5": "7b3882de1b37d3f41814b38ee69bc80a",
          "sha256": "efe66ce774afd35add9b91fa1600716118d4c8ad44bf49ffc05053c0f97a3c6a"
        },
        "downloads": -1,
        "filename": "pypama-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b3882de1b37d3f41814b38ee69bc80a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6251,
        "upload_time": "2020-02-03T12:36:09",
        "upload_time_iso_8601": "2020-02-03T12:36:09.618406Z",
        "url": "https://files.pythonhosted.org/packages/98/0f/f4817eff671c038a4420cab5dd5e28423e7877429f9977eb9cc16fe8c463/pypama-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "980ff4817eff671c038a4420cab5dd5e28423e7877429f9977eb9cc16fe8c463",
        "md5": "7b3882de1b37d3f41814b38ee69bc80a",
        "sha256": "efe66ce774afd35add9b91fa1600716118d4c8ad44bf49ffc05053c0f97a3c6a"
      },
      "downloads": -1,
      "filename": "pypama-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b3882de1b37d3f41814b38ee69bc80a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6251,
      "upload_time": "2020-02-03T12:36:09",
      "upload_time_iso_8601": "2020-02-03T12:36:09.618406Z",
      "url": "https://files.pythonhosted.org/packages/98/0f/f4817eff671c038a4420cab5dd5e28423e7877429f9977eb9cc16fe8c463/pypama-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}