{
  "info": {
    "author": "Microchip Technology",
    "author_email": "support@microchip.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# pymcuprog - Python MCU programmer\npymcuprog is a utility for programming various Microchip MCU devices using Microchip CMSIS-DAP based debuggers\n\n## Overview\npymcuprog is available:\n\n* install using pip from pypi: https://pypi.org/project/pymcuprog\n* browse source code on github: https://github.com/microchip-pic-avr-tools/pymcuprog\n* read API documentation on github: https://microchip-pic-avr-tools.github.io/pymcuprog\n* read the changelog on github: https://github.com/microchip-pic-avr-tools/pymcuprog/blob/main/CHANGELOG.md\n\n## Usage\npymcuprog can be used as a command-line interface or a library\n\n### Command-line programming\nfor help, use:\n```bash\npymcuprog --help\n```\n\n#### Action: ping\nchecks connectivity by reading the device identity\n\nExample:\n```bash\npymcuprog ping\n```\n#### Action: erase\nerases device memories\n* use -m to erase only a specified memory region (if available)\n\nExample: chip erase the device\n```bash\npymcuprog erase\n```\n#### Action: write\nwrites device memories\n* use -f for writing from a file, or\n* use -l for writing literal values\n* use -m to specify memory type for literal writing\n* use -o to specify offset for literal writing\n\nExample: writes the content of an Intel(R) hex file to the appropriate memory areas on the device\n```bash\npymcuprog write -f app.hex\n```\nNote: memory is not erased automatically before writing!\n\nExample: erases memories and then writes an Intel hex file:\n```bash\npymcuprog write -f app.hex --erase\n```\n\nExample: erases memories, writes an Intel hex file and then verifies the content:\n```bash\npymcuprog write -f app.hex --erase --verify\n```\n\n#### Action: read\nreads device memories\n* use -m to specify memory type\n* use -o to specify offset to read from\n* use -b to specify number of bytes to read\n* use -f to read to a file\n\nExample: reads 64 bytes of flash memory from offset 0x1000\n```bash\npymcuprog read -m flash -o 0x1000 -b 64\n```\n\n#### Action: reset\nresets the target device\n\nExample:\n```bash\npymcuprog reset\n```\n\n### Command-line board utilities\n\n#### Action: getvoltage\nreads the actual target operating voltage\n\nExample:\n```bash\npymcuprog getvoltage\n```\n\n#### Action: getsupplyvoltage\nreads the supply voltage (set-point)\n\nExample:\n```bash\npymcuprog getsupplyvoltage\n```\n\n#### Action: getusbvoltage\nreads the USB voltage (Vbus)\n\nExample:\n```bash\npymcuprog getusbvoltage\n```\n\n#### Action: setsupplyvoltage\nsets the target supply voltage\n* use -l to specify a literal supply voltage value\n\nExample: sets the target supply voltage on a Curiosity Nano kit to 3.3V\n```bash\npymcuprog setsupplyvoltage -l 3.3\n```\n\n#### Action: reboot-debugger\nreboots the debugger\n\nExample: reboots a Curiosity Nano kit\n```bash\npymcuprog reboot-debugger\n```\n\n### Command-line switches\nMany of these switches are optional, and many parameters are automatically set when using a Curiosity Nano or Xplained Pro kit.\n* -t TOOL to select which tool to use.  Optional if only one is connected.\n* -s SERIALNUMBER to select which tool instance to use.  Optional if only one is connected.\n* -d DEVICE to specify the device to program.  Optional when using a kit.\n* -i INTERFACE to specify the target communication interface.  Optional.\n* -p PACKPATH to specify the path to the DFP for PIC devices*\n* -c CLK to specify the programming interface clock speed.  Optional.\n* --verify to verify after programming\n* -u UART to use native host serial port UART for UPDI instead of a USB-based tool.\n* -H MODE to select UPDI high-voltage entry mode ('tool-toggle-power', 'user-toggle-power', 'simple-unsafe-pulse')\n* -U to write user row values when the device is locked (UPDI only)\n* -C to erase and unlock a locked device (UPDI only)\n* -v LEVEL for selecting logging verbosity ('debug', 'info', 'warning', 'error', 'critical')\n\n\n####\n*Notes regarding PACKPATH argument\n\nWhile pymcuprog itself contains sufficient information to program AVR devices (with UPDI interface), it is unable to program a PIC device without access to programming scripts for that device.  These scripts are deployed in Device Family Packs (DFP) on https://packs.download.microchip.com and are only provided for PIC devices mounted on Curiosity Nano boards or other boards with the PKOB nano (nEDBG) debugger.  To use pymcuprog with PIC devices, you will either need to download a DFP for the PIC in question, or have MPLAB X v5.25 or later installed.  In either case the path to the particular device in the scripts folder inside the DFP must be passed into pymcuprog using the -p PACKPATH argument.  Remember to use \"<path>\" if the path itself contains spaces.\n\nExample: Ping the device on a PIC16F15244 Curiosity Nano\n```bash\npymcuprog ping -p \"c:\\Program Files (x86)\\Microchip\\MPLABX\\v5.40\\packs\\Microchip\\PIC16F1xxxx_DFP\\1.4.119\\scripts\\pic16f15244\"\n```\n\n### Serial port UPDI (pyupdi)\nThe AVR UPDI interface implements a UART protocol, which means that it can be used by simply connecting TX and RX pins of a serial port together with the UPDI pin; with a series resistor (eg: 1k) between TX and UPDI to handle contention.  (This configuration is also known as \"pyupdi\".)  Be sure to connect a common ground, and use a TTL serial adapter running at the same voltage as the AVR device.\n\n<pre>\n                        Vcc                     Vcc\n                        +-+                     +-+\n                         |                       |\n +---------------------+ |                       | +--------------------+\n | Serial port         +-+                       +-+  AVR device        |\n |                     |      +----------+         |                    |\n |                  TX +------+   1k     +---------+ UPDI               |\n |                     |      +----------+    |    |                    |\n |                     |                      |    |                    |\n |                  RX +----------------------+    |                    |\n |                     |                           |                    |\n |                     +--+                     +--+                    |\n +---------------------+  |                     |  +--------------------+\n                         +-+                   +-+\n                         GND                   GND\n</pre>\n\npymcuprog includes this implementation as an alternative to USB/EDBG-based tools.  To connect via a serial port, use the \"uart\" tool type with the UART switch in addition.\n\nExample: checks connectivity by reading the device identity\n```bash\npymcuprog ping -d avr128da48 -t uart -u com35\n```\n\nWhen using serial port UPDI it is optional to use:\n* --clk BAUD to specify the baud rate (defaults to 115200)\n* --uart-timeout TIMEOUT to specify the uart read timeout (defaults to 1.0s)\n\nIncreasing the baud rate can decrease programming time.  Decreasing the timeout can decrease the initial connection latency when UPDI is disabled and does not respond.  These parameters can be tweaked to suit the serial port adapter in use.\n\n\n### Library\npymcuprog can be used as a library using its backend API.  For example:\n```python\n# pymcuprog uses the Python logging module\nimport logging\nlogging.basicConfig(format=\"%(levelname)s: %(message)s\", level=logging.WARNING)\n\n# Configure the session\nfrom pymcuprog.backend import SessionConfig\nsessionconfig = SessionConfig(\"atmega4808\")\n\n# Instantiate USB transport (only 1 tool connected)\nfrom pymcuprog.toolconnection import ToolUsbHidConnection\ntransport = ToolUsbHidConnection()\n\n# Instantiate backend\nfrom pymcuprog.backend import Backend\nbackend = Backend()\n\n# Connect to tool using transport\nbackend.connect_to_tool(transport)\n\n# Start the session\nbackend.start_session(sessionconfig)\n\n# Read the target device_id\ndevice_id = backend.read_device_id()\nprint (\"Device ID is {0:06X}\".format(int.from_bytes(device_id, byteorder=\"little\")))\n```\n\n## Logging\nThis package uses the Python logging module for publishing log messages to library users.\nA basic configuration can be used (see example), but for best results a more thorough configuration is recommended in order to control the verbosity of output from dependencies in the stack which also use logging.\nSee logging.yaml which is included in the package (although only used for CLI)\n\n## Dependencies\npymcuprog depends on pyedbglib for its transport protocol.\npyedbglib requires a USB transport library like libusb.  See pyedbglib package for more information.\n\n## Versioning\npymcuprog version can be determined using the CLI:\n```bash\npymcuprog -V\n```\n\nor using the library:\n```python\nfrom pymcuprog.version import VERSION as pymcuprog_version\nprint(\"pymcuprog version {}\".format(pymcuprog_version))\n```\n\nIn addition, the CLI-backend API is versioned for convenience:\n```python\nfrom pymcuprog.backend import Backend\nbackend = Backend()\nprint(\"pymcuprog backend API version: {}\".format(backend.get_api_version()))\n```\n\n## Supported devices and tools\npymcuprog is primarily intended for use with PKOB nano (nEDBG) debuggers which are found on Curiosity Nano kits and other development boards.  This means that it is continuously tested with a selection of AVR devices with UPDI interface as well as a selection of PIC devices.  However since the protocol is compatible between all EDBG-based debuggers (pyedbglib) it is possible to use pymcuprog with a wide range of debuggers and devices, although not all device families/interfaces have been implemented.\n\n### Debuggers / Tools\npymcuprog supports:\n* PKOB nano (nEDBG) - on-board debugger on Curiosity Nano\n* MPLAB PICkit 4 In-Circuit Debugger (when in 'AVR mode')\n* MPLAB Snap In-Circuit Debugger (when in 'AVR mode')\n* Atmel-ICE\n* Power Debugger\n* EDBG - on-board debugger on Xplained Pro/Ultra\n* mEDBG - on-board debugger on Xplained Mini/Nano\n* JTAGICE3 (firmware version 3.0 or newer)\n\nAlthough not all functionality is provided on all debuggers/boards.  See device support section below.\n\n### Devices\npymcuprog supports:\n* All UPDI devices, whether mounted on kits or standalone\n* PIC devices mounted on Curiosity Nano kits, or similar board with PKOB nano (nEDBG) debugger\n\nOther devices (eg ATmega328P, ATsamd21e18a) may be partially supported for experimental purposes\n\n##  Notes for Linux® systems\nThis package uses pyedbglib and other libraries for USB transport and some udev rules are required.  For details see the pyedbglib package: https://pypi.org/project/pyedbglib\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microchip-pic-avr-tools/pymcuprog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymcuprog",
    "package_url": "https://pypi.org/project/pymcuprog/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymcuprog/",
    "project_urls": {
      "Homepage": "https://github.com/microchip-pic-avr-tools/pymcuprog"
    },
    "release_url": "https://pypi.org/project/pymcuprog/3.14.2.9/",
    "requires_dist": [
      "pyserial",
      "intelhex",
      "appdirs",
      "pyyaml",
      "pyedbglib (>=2.20)",
      "pathlib2 ; python_version < \"3\"",
      "pylint ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "parameterized ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Tools for programming of MCUs using Microchip CMSIS-DAP based debuggers",
    "version": "3.14.2.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15384357,
  "releases": {
    "3.1.3.60": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6319a2acbd7d9119d5cf0d7ec7907f488b13eecf591059da62ce634a50f1d27",
          "md5": "be5ebe88d550e2e8b652dca843ea023d",
          "sha256": "0115632c4b37470a4328f0dd478cd10177f40a3bd5d954d98fdd26560be4b98b"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.1.3.60-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be5ebe88d550e2e8b652dca843ea023d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 130090,
        "upload_time": "2020-06-23T17:11:24",
        "upload_time_iso_8601": "2020-06-23T17:11:24.789458Z",
        "url": "https://files.pythonhosted.org/packages/e6/31/9a2acbd7d9119d5cf0d7ec7907f488b13eecf591059da62ce634a50f1d27/pymcuprog-3.1.3.60-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.10.2.133": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae515598bc2c2b1fa738c0645699c4e84989ffd9ebcc75349da821f8d55a4ad8",
          "md5": "9d9cd47d705550cf2fd7becd06db0c4b",
          "sha256": "a976ce6f2ce75a4f11af3c192c3f1ac9397e689ede80e0ff61e8442e29535524"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.10.2.133-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d9cd47d705550cf2fd7becd06db0c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 217662,
        "upload_time": "2021-11-01T11:09:22",
        "upload_time_iso_8601": "2021-11-01T11:09:22.201440Z",
        "url": "https://files.pythonhosted.org/packages/ae/51/5598bc2c2b1fa738c0645699c4e84989ffd9ebcc75349da821f8d55a4ad8/pymcuprog-3.10.2.133-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.13.3.166": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3124a718b68d919f472771b3a69a788615beb3cf6d5b5fe3c3cc37ddebe330cb",
          "md5": "e6bea33099ffcf98fb4ecafa0924d23c",
          "sha256": "6fba717eb6c3a518132357cbcac29a74eb6128f7cec1a31d3190eaa370d6e231"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.13.3.166-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6bea33099ffcf98fb4ecafa0924d23c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 221614,
        "upload_time": "2022-05-24T13:45:36",
        "upload_time_iso_8601": "2022-05-24T13:45:36.346586Z",
        "url": "https://files.pythonhosted.org/packages/31/24/a718b68d919f472771b3a69a788615beb3cf6d5b5fe3c3cc37ddebe330cb/pymcuprog-3.13.3.166-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.14.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "449337ffa969abd7928bd66bd9d9540f30af2a1062f4ea393e46934fe85c3524",
          "md5": "652bc6adbe4c70555fb76d00ac519e83",
          "sha256": "fdf51f895ada0b54f9be6ad614bf15f51622bf49019aca993fa37f72fbb608ed"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.14.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "652bc6adbe4c70555fb76d00ac519e83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 241041,
        "upload_time": "2022-10-12T09:57:25",
        "upload_time_iso_8601": "2022-10-12T09:57:25.857301Z",
        "url": "https://files.pythonhosted.org/packages/44/93/37ffa969abd7928bd66bd9d9540f30af2a1062f4ea393e46934fe85c3524/pymcuprog-3.14.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.7.4.95": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af2bcee21736a9caeb7fa0473f960d6ded34af099a53414cd1c8a0c08411069b",
          "md5": "5855fe5840cdcd49483fcb5867dc0f6b",
          "sha256": "d78f4ec98dd91bd185e308e9901d4efcdbd400bd32e1d2ad985635e9ecf28d30"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.7.4.95-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5855fe5840cdcd49483fcb5867dc0f6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 187751,
        "upload_time": "2020-12-17T09:55:43",
        "upload_time_iso_8601": "2020-12-17T09:55:43.846535Z",
        "url": "https://files.pythonhosted.org/packages/af/2b/cee21736a9caeb7fa0473f960d6ded34af099a53414cd1c8a0c08411069b/pymcuprog-3.7.4.95-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.9.1.120": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eda060ed27372705bb4a8890affa1e5b0e48d2e8a71bd6c9cb3940a74016993f",
          "md5": "c5cbbb7d6225473503dcf2cfced3af1f",
          "sha256": "063b397f0548ce6cb9e459446980220e1e7b32e97d77f08a3efb0b2a6aa24759"
        },
        "downloads": -1,
        "filename": "pymcuprog-3.9.1.120-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5cbbb7d6225473503dcf2cfced3af1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 193220,
        "upload_time": "2021-04-23T12:44:23",
        "upload_time_iso_8601": "2021-04-23T12:44:23.581928Z",
        "url": "https://files.pythonhosted.org/packages/ed/a0/60ed27372705bb4a8890affa1e5b0e48d2e8a71bd6c9cb3940a74016993f/pymcuprog-3.9.1.120-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "449337ffa969abd7928bd66bd9d9540f30af2a1062f4ea393e46934fe85c3524",
        "md5": "652bc6adbe4c70555fb76d00ac519e83",
        "sha256": "fdf51f895ada0b54f9be6ad614bf15f51622bf49019aca993fa37f72fbb608ed"
      },
      "downloads": -1,
      "filename": "pymcuprog-3.14.2.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "652bc6adbe4c70555fb76d00ac519e83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 241041,
      "upload_time": "2022-10-12T09:57:25",
      "upload_time_iso_8601": "2022-10-12T09:57:25.857301Z",
      "url": "https://files.pythonhosted.org/packages/44/93/37ffa969abd7928bd66bd9d9540f30af2a1062f4ea393e46934fe85c3524/pymcuprog-3.14.2.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}