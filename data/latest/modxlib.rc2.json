{
  "info": {
    "author": "Ben Krepp",
    "author_email": "bkrepp@ctps.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# modxlib\n\n__modxlib__ is a package of common functions, data, and classes used in the CTPS Model Data Explorer.\n\n## Version Identification\n\n__Function__: __get_version()__ - Returns version ID string of library.\n\n## Trip Table Management\n\n__Function__: __open\\_trip\\_tables(tt_dir)__\n\n__Summary__: Given a directory containing the trip tables in OMX format for the \nfour daily time periods used by the mode, open them and return \na dictionary with the keys 'am', 'md', 'pm', and 'nt' whose\nvalue is the corresponding open OMX file.\n\n__Parameters__: tt_dir - directory containing trip table files in OMX format\n\n__Return value__: A dictionary with the keys 'am', 'md', 'pm', and 'nt' whose\nvalue is the corresponding open OMX file.\n\n__Function__: __load\\_trip_tables(tt_dir, modes=None)__\n\n__Summary__: Load the trip tables for all time periods the specified list of modes from\nopen OMX files into NumPy arrays.\nIf no list of modes is passed, trip tables for all modes will be returned.\n\n__Parameters__\n* tt_omxs - Dictionary, keyed by time period identifier ('am', 'md', 'pm', and 'nt'),\neach of whose values is the open OMX trip table file for the corresponding time period.\n* modes - list of modes (strings), or None\n\n__Return value__: A two-level dictionary (i.e., first level = time period, second level = mode)\nthe second level of which contain the trip table(s), in the form of a numPy array,for the \\[time_period\\]\\[mode\\] in question.\n\n## TAZ \"shapefile\" Management\n\n__Summary__: The class \"tazManager\" provides a set of methods to perform _attribute_ queries\non an ESRI-format \"Shapefile\" that represents the TAZes in the model region.\nThe attributes are read from the Shapefile's .DBF file; other components of\nthe Shapefile are ignored.\n\nThe Shapefile's .DBF file _must_ contain the following attributes:\n1. id\n2. taz\n3. type - 'I' (internal) or 'E' (external)\n4. town - town name (upper case)\n5. state - state abbreviation, e.g., 'MA'\n6. town_state - town, state\n7. mpo - abbreviation of MPO name: \n8. in_brmpo - 1 (yes) or 0 (no)\n9. subregion - abbreviation of Boston Region MPO subregion or NULL\n10. sector - 'analysis sector' as defined by CTPS's Bill Kuttner.\nEither 'Northeast', 'North', 'Northwest', 'West', 'Southwest',\nSouth', 'Southeast', 'Central' or ''; the empty string ('')\nindicates that the TAZ is outsize of the 164 municipalities\ncomprising what was once known as the 'CTPS Model Region'.\n\nAn object of class tazManager is instantiated by passing in the fully-qualified path\nto a Shapefile to the class constructor. Hence, it is possible to have more than one\ninstance of this class active simultaneously, should this be needed.\n\n__Class__ __tazManager__  \n__Methods__:  \n1. __init__(path_to_shapefile) - class constructor\n2. mpo_to_tazes(mpo) - Given the name (i.e., abbreviation) of an MPO,\nreturn a list of the records for the TAZes in it\n3. brmpo_tazes() - Return the list of the records for the TAZes in the Boston Region MPO\n4. brmpo_town_to_tazes(town) - Given the name of a town in the Boston Region MPO,\nreturn a list of the records for the TAZes in it\n5. brmpo_subregion_to_tazes(subregion) - Given the name (i.e., abbreviation) of a Boston Region MPO subregion,\nreturn a list of the records for the TAZes in it\n6. sector_to_tazes - Given the name of an 'analysis sector', return the list of the records for the TAZes\nin the sector.\n7. town_to_tazes(town) - Given the name of a town, return the list of the records for the TAZes in the town.\nNote: If a town with the same name occurs in more than one state, the  list of TAZes\nin _all_ such states is returned.\n8. town_state_to_tazes(town, state) - Given a town and a state abbreviation (e.g., 'MA'),\nreturn the list of records for the TAZes in the town\n9. state_to_tazes(state) - Given a state abbreviation, return the list of records for the TAZes in the state.\n10. taz_ids(TAZ_record_list) - Given a list of TAZ records, return a list of _only_ the TAZ IDs from those records.\n\n__Note__: For all of the above API calls that return a \"list of TAZ records\", each returned 'TAZ' is a Python 'dict' containing\nall of the keys (i.e., 'attributes') listed above. To convert such a list to a list of _only_ the TAZ IDs, call taz_ids\non the list of TAZ records.\n\n## Miscellaneous Utilities for the Transit Mode\n\n__NOTE: The transit utilities are specific to TDM19. They will be modified for TDM23.__\n\n__Function__: __mode\\_to\\_metamode(mode)__\n\n__Summary__: Given one of the 50+ transportation \"modes\" supported by the TDM, return its \"meta mode\".\nFor example, the model supports 3 different \"modes\" for MBTA bus routes; all three of \nthese have the common \"metamode\" of 'MBTA_Bus'. The universe of metamodes consists of 'MBTA_Bus', 'Light_Rail',\n'Heavy_Rail', 'Commuter_Rail', 'Ferry', 'Shuttle_Express', 'RTA', 'Private' and 'Walk'.\n\n__Parameters__:\n* mode - String identifying one of the transporation \"modes\" supported by the TDM.\n\n__Return value__: String representing the input mode's \"metamode.\"\n\n__Function__: __import_transit_assignment(scenario)__\n\n__Summary__: Import transit assignment result CSV files for a given scenario.\n\n__Parameters:__:\n* scenario - Path to root directory of TDM transit boarding (\"ONO.csv\") files for a given scenario.\n\n__Return value__: a dict of the form:\n```\n{\t'AM'    : dataframe with totals for the AM period,\n\t'MD'    : datafrme with totals for the MD period,\n\t'PM'    : dataframe with totals for the PM period,\n\t'NT'    : dataframe with totals for the NT period,\n\t'daily' : dataframe with totals for the entire day\n}\n```\n\n## Dataframe and Geo-dataframe Utilities\n\n__Function__: __export\\_gdf\\_to\\_geojson(geo_dataframe, geojson_fn)__\n\n__Summary__: Export a GeoPandas gdataframe to a GeoJSON file.\n\n__Parameters__:\n* geo_dataframe - GeoPandas dataframe\n* geojson_fn - Name of GeoJSON file\n\n__Return value__: N/A\n\n__Function__: __export\\_gdf\\_to\\_shapefile(geo_dataframe, shapefile_fn)__\n\n__Summary__: Export a GeoPandas gdataframe to an ESRI-format shapefile\n\n__Parameters__:\n* geo_dataframe - GeoPandas dataframe\n* geojson_fn - Name of shapefile\n\n__Note__: Attribute (property) names longer than 10 characters will be truncated,\ndue to the limitations of the DBF file used for Shapefile attributes.\n\n__Return value__: N/A\n\n__Function__: __bbox\\_of\\_gdf(gdf)__\n\n__Summar__: Return the bounding box of all the features in a geo-dataframe.\n\n__Parameters__:   \n* gdf - a GeoPandas dataframe\n\n__Return value__: Bounding box of all the features in the input geodataframe.\nThe bounding box is returned as a dictionary with the keys: \\{ 'minx', 'miny', 'maxx', 'maxy' \\}\n\n\n__Function__: __center\\_of\\_bbox(bbox)__\n\n__Summary__: Given a geomtric \"bounding box\", return its center point. \n\n__Parameters__:\n* bbox - Bounding box in the form of a dictionary with the keys { 'minx', 'miny', 'maxx', 'maxy'}\n\n__Return value__: Center point of the bounding box as a dictionary with the keys { 'x' , 'y' }.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CTPSSTAFF/modxlib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modxlib",
    "package_url": "https://pypi.org/project/modxlib/",
    "platform": "",
    "project_url": "https://pypi.org/project/modxlib/",
    "project_urls": {
      "Bug Tracker": "https://github.com/CTPSSTAFF/modxlib/issues",
      "Homepage": "https://github.com/CTPSSTAFF/modxlib"
    },
    "release_url": "https://pypi.org/project/modxlib/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package of utilities for CTPS Model Data Explorer",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12105356,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d84b0073bd14e428ab5f22cb39bebeafc0907313007b1cddfd0c7679397e2140",
          "md5": "b25cdbdabb63c1a39563397df58393ab",
          "sha256": "f692cc541f0c687d77c0ecca5305af7748520b51734829b12e87c6f1bb9ef841"
        },
        "downloads": -1,
        "filename": "modxlib-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b25cdbdabb63c1a39563397df58393ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23245,
        "upload_time": "2021-11-03T17:34:27",
        "upload_time_iso_8601": "2021-11-03T17:34:27.645283Z",
        "url": "https://files.pythonhosted.org/packages/d8/4b/0073bd14e428ab5f22cb39bebeafc0907313007b1cddfd0c7679397e2140/modxlib-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "587ba84e92332f221093399e106b85cfa045b9043584e4ebc749ffa5f2dc935a",
          "md5": "b6124022d42a4e501dad673490cc5fe0",
          "sha256": "c8f05adecd4e36e05c75a01e59ae7d0e0b456507eb771f713317c67b382ea0d2"
        },
        "downloads": -1,
        "filename": "modxlib-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6124022d42a4e501dad673490cc5fe0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22446,
        "upload_time": "2021-11-03T17:34:29",
        "upload_time_iso_8601": "2021-11-03T17:34:29.050875Z",
        "url": "https://files.pythonhosted.org/packages/58/7b/a84e92332f221093399e106b85cfa045b9043584e4ebc749ffa5f2dc935a/modxlib-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29750355ddede8fad930783bfe09bf9b0bb7a4491e9411a7a6c5ac889f325f9",
          "md5": "eabc8a54475cd442cccf5b18131a7e3a",
          "sha256": "fcd9f4af23fe8424ccfe01ebae920664470b7c254d753aa18e0200432932a049"
        },
        "downloads": -1,
        "filename": "modxlib-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eabc8a54475cd442cccf5b18131a7e3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24471,
        "upload_time": "2021-11-23T18:37:15",
        "upload_time_iso_8601": "2021-11-23T18:37:15.955796Z",
        "url": "https://files.pythonhosted.org/packages/e2/97/50355ddede8fad930783bfe09bf9b0bb7a4491e9411a7a6c5ac889f325f9/modxlib-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f838bee3d1940901fe9eb3daacb5267c02ad9f6579cdc8f4e93f61608883fc",
          "md5": "72ecb07d71198195895ceaa6ea759251",
          "sha256": "f76ee41cad5687805150b7bcdca1e527a43c52b81b0a61471d0809f24aae4e39"
        },
        "downloads": -1,
        "filename": "modxlib-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "72ecb07d71198195895ceaa6ea759251",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23966,
        "upload_time": "2021-11-23T18:37:17",
        "upload_time_iso_8601": "2021-11-23T18:37:17.412977Z",
        "url": "https://files.pythonhosted.org/packages/17/f8/38bee3d1940901fe9eb3daacb5267c02ad9f6579cdc8f4e93f61608883fc/modxlib-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e29750355ddede8fad930783bfe09bf9b0bb7a4491e9411a7a6c5ac889f325f9",
        "md5": "eabc8a54475cd442cccf5b18131a7e3a",
        "sha256": "fcd9f4af23fe8424ccfe01ebae920664470b7c254d753aa18e0200432932a049"
      },
      "downloads": -1,
      "filename": "modxlib-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eabc8a54475cd442cccf5b18131a7e3a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24471,
      "upload_time": "2021-11-23T18:37:15",
      "upload_time_iso_8601": "2021-11-23T18:37:15.955796Z",
      "url": "https://files.pythonhosted.org/packages/e2/97/50355ddede8fad930783bfe09bf9b0bb7a4491e9411a7a6c5ac889f325f9/modxlib-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17f838bee3d1940901fe9eb3daacb5267c02ad9f6579cdc8f4e93f61608883fc",
        "md5": "72ecb07d71198195895ceaa6ea759251",
        "sha256": "f76ee41cad5687805150b7bcdca1e527a43c52b81b0a61471d0809f24aae4e39"
      },
      "downloads": -1,
      "filename": "modxlib-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "72ecb07d71198195895ceaa6ea759251",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23966,
      "upload_time": "2021-11-23T18:37:17",
      "upload_time_iso_8601": "2021-11-23T18:37:17.412977Z",
      "url": "https://files.pythonhosted.org/packages/17/f8/38bee3d1940901fe9eb3daacb5267c02ad9f6579cdc8f4e93f61608883fc/modxlib-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}