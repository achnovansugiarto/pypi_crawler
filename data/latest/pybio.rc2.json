{
  "info": {
    "author": "Gregor Rot",
    "author_email": "gregor.rot@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "<picture><img src=\"media/pybio.png\" width=\"70\"/></picture>\n## pybio: basic genomics toolset\n\npybio is a Python 3 framework for basic genomics/transcriptomics operations/annotations. The package is a dependency to [apa](https://github.com/grexor/apa) (alternative polyadenylation) and [RNAmotifs2](https://github.com/grexor/rnamotifs2) (motif cluster analysis). The pybio package provides:\n\nFeatures include automagical genome assemblies+annotation download and indexing from Ensembl and STAR, support of Fasta, Fastq, bedGraph and other file formats, motif sequence searches, and specific APA feautes like alternative polyadenylation site-pair classification (same-exon, skipped-exon, composite-exon) and more.\n\n## Contents\n\n* [Installation](#installation)\n* [Quick Start](#Quick-Start)\n* [Documentation](#documentation)\n  * [Downloading Ensembl genomes](#downloading-Ensembl-genomes)\n  * [Retrieving genomic sequences](#retrieving-genomic-sequences)\n  * [Annotate genomic position](#annotate-genomic-position)\n  * [Importing genome annotation](#importing-genome-annotation)\n  * [File formats](#file-formats)\n  * [Genomic Coordinates](#Genomic-Coordinates)\n* [Authors](#authors)\n* [Reporting problems](#reporting-problems)\n\n### Installation\n\n20221218: pip package in preparation, [https://pypi.org/project/pybio](https://pypi.org/project/pybio).\n\nCurrent installation instructions below:\n\n#### Clone the GitHub repository\n\nTemporarily the most direct way of installing pybio is to clone the repository:\n\n```\ngit clone https://github.com/grexor/pybio.git\n```\n\nAdd pybio to your PATH and PYTHONPATH environment variables: for example, if you cloned to `/home/user/pybio`, you would add the paths like so:\n\n```\nexport PYTHONPATH=$PYTHONPATH:/home/user # to import pybio in python with \"import pybio\"\nexport PATH=$PATH:/home/user/pybio       # to run pybio on the command line with \"pybio\"\n```\n\nRun pybio for the first time for setup (change default parameters if needed):\n\n```\n$ pybio\n```\n\nYou can always come back to the configuration by running `pybio config`.\n\nVoila.\n\n### Quick Start\n\npybio is strongly integrated with Ensembl and provides genomic loci search for diverse annotated features (genes -> transcripts -> exons + 5UTR + 3UTR).\n\nLet's say we are interested in the human genome. First download and prepare the genome with a single command:\n\n```\npybio ensembl homo_sapiens   # downloads the latest version of Ensembl homo_sapiens assembly and annotation and prepare the index for search\n```\n\nOnce this is done, searching a genomic position for features is easy in python:\n\n```\nimport pybio\ngenes, transcripts, exons, UTR5, UTR3 = annotate(\"homo_sapiens\", \"1\", \"+\", 11012344)\n```\n\nThis will return a list of feature objects (genes, transctipts, etc) (check [core/genomes.py](core/genomes.py) classes to see details of these objects).\n\nIf you would like to know all genes that span the provided position, you could then write:\n\n```\nfor gene in genes:\n   print(gene.gene_id, gene.gene_name, gene.start, gene.stop)\n```\n\nAnd to list all transcripts of each gene, you could extend the code like this:\n\n```\nfor gene in genes:\n   print(gene.gene_id, gene.gene_name, gene.start, gene.stop)\n   for transcript in gene.transcripts:\n      print(transcript.transcript_id)\n```\n\nHowever you could also start directly with transcripts, and print which genes are the transcripts assigned to:\n\n```\nfor transcript in transcripts:\n  print(transcript.gene.gene_id, transcript.transcript_id)\n```\n\nAnd an intuitive graph representation of relationships between feature objects:\n\n```\ngene <-> transcript_1 <-> exon_1\n                      <-> exon_2\n                      ...\n                      <-> utr5\n                      <-> utr3\n     <-> transcript_2 <-> exon_1\n                      <-> exon_2\n                      ...\n                      <-> utr5\n                      <-> utr3\n```\n\nPlus a more descriptive representation of relationships between feature objects:\n\n```\n                gene = Gene instance object\n    gene.transcripts = list of all transcript objects of the gene\n          transcript = Transcript instance object\n     transcript.gene = points to the gene of the transcript\n    transcript.exons = list of all exon objects of the transcript\ntranscript.utr5/utr3 = points to the UTR5 / UTR3 of the transcript\n                exon = Exon instance object\n     exon.transcript = points to the transcript of the exon\n           utr5/utr3 = Utr5 / Utr3 instance object\nutr5/utr3.transcript = points to the transcript of the UTR5/UTR3\n```\n\n### Documentation\n\nHere we provide basic `pybio` usage examples.\n\n#### Downloading Ensembl genomes\n\nTo download Ensembl genomes simply run a few commands on the command line. For example:\n\n```\n$ pybio ensembl homo_sapiens      # downloads the latest version of Ensembl homo_sapiens assembly and annotation\n$ pybio ensembl homo_sapiens 109  # downloads a specific version (in this case, v109) of Ensembl homo_sapiens assembly and annotation\n```\n\nThis will download the FASTA sequence, GTF if you have STAR and salmon installed, will also build an index of the genome for both.\n\nData will be stored in the folder specified in the file `pybio.config`. The genomes folder structure is as follows:\n\n```\nhomo_sapiens.assembly.ensembl109             # FASTA files of the genome, each chromosome in a separate file\nhomo_sapiens.annotation.ensembl109           # Annotation in GTF and TAB format\nhomo_sapiens.assembly.ensembl109.star        # STAR index, GTF annotation aware\nhomo_sapiens.transcripts.ensembl109          # transcriptome, this is the Ensembl \"cDNA\" file in FASTA format\nhomo_sapiens.transcripts.ensembl109.salmon   # Salmon index of the transcriptome\n```\n\npybio also supports the download of Ensembl Genomes (Ensembl Fungi, Ensembl Plants, Ensembl Protists, Ensembl Metazoa). You simply provide the name of the species on the command line to automagically download the genome, the assembly and prepare STAR and salmon indices.\n\nFor example, to download the latest version of the Dictyostelium discoideum genome, you would write:\n\n```\n$ pybio genome dictyostelium_discoideum\n```\n\nOr to download the latest Arabidopsis thaliana genome, you would write:\n\n```\n$ pybio genome arabidopsis_thaliana\n```\n\nTo see all available species, simply run `pybio species`. Moreover, to see all available `arabidopsis` genomes, you could run:\n\n```\n$ pybio species arabidopsis\narabidopsis_halleri\tAhal2.2\tensemblgenomes\tplants\tensemblgenomes56\narabidopsis_lyrata\tv.1.0\tensemblgenomes\tplants\tensemblgenomes56\narabidopsis_thaliana\tTAIR10\tensemblgenomes\tplants\tensemblgenomes56\n```\n\nVoila.\n\n#### Retrieving genomic sequences\n\nTo retrieve stretches of genomic sequence, we use the seq(genome, chr, strand, position, upstream, downstream) method:\n\n```\nimport pybio\nseq = pybio.core.genomes.seq(\"homo_sapiens\", \"1\", \"+\", 450000, -20, 20)\n```\n\nThe above command fetches the chr 1 sequence from 450000-20..450000+20, the resulting sequence is of length 41, `TACCCTGATTCTGAAACGAAAAAGCTTTACAAAATCCAAGA`.\n\n#### Annotating genomic positions\n\nGiven a genomic position, we can quickly retrieve the gene, transcript, exon and utr5/3 information at the given position. If there are several features (genes, transcripts, exons, UTR regions) at the specified position, they are all returned.\n\n```\n# annotate position\ngenes, transcripts, exons, utr5, utr3 = pybio.genomes.annotate(\"hg38\", \"1\", \"+\", 11012344)\n\n# print all genes that cover the position\nfor gene in genes:\n   print(gene.gene_id, gene.gene_name, gene.start, gene.stop)\n```\n\nThe above command would return:\n\n```\n[pybio] loading genome annotation for homo_sapiens with Ensembl version 109\nENSG00000120948, TARDBP, 11012343, 11030527\n```\n\nYou can also easily access all transcripts of each gene with `gene.transcripts` and all exons of each transcript with `transcript.exons`.\n\n#### Dependencies\n\nThere are a few software tools pybio depends on. For a quick start, you don't need to have any of these dependencies installed.\n\n* [STAR aligner](https://github.com/alexdobin/STAR), `sudo apt-get install rna-star`\n* [pysam](https://pysam.readthedocs.io/en/latest/api.html), `sudo apt-get install python-pysam`\n* [numpy](https://numpy.org/), `sudo apt-get install python-numpy`\n* [Salmon](https://combine-lab.github.io/salmon/getting_started/), download and install from Salmon webpage\n* [samtools](http://www.htslib.org), `sudo apt-get install samtools`\n\n### File formats\n\nSupported file formats.\n\nComing.\n\n### Genomic Coordinates\n\nAll genomic coordinates we operate with inside pybio are 0-based left+right inclusive. This means, when we say for example 100-103, this would include coordinates 100, 101, 102 and 103. The first coordinate is 0.\n\n**Important**\n\nRefseq and Ensembl GTF files are 1-indexed. When we read files from refseq/ensembl, we substract 1 on all coordinates to keep this in line with other coordinate structures inside pybio (which are all 0-indexed).\n\n### Authors\n\n[pybio](https://github.com/grexor/pybio) is developed and supported by [Gregor Rot](https://grexor.github.io).\n\n### Issues and Suggestions\n\nUse the [issues page](https://github.com/grexor/pybio/issues) to report issues and leave suggestions.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grexor/pybio",
    "keywords": "pybio,bioinformatics",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pybio",
    "package_url": "https://pypi.org/project/pybio/",
    "platform": null,
    "project_url": "https://pypi.org/project/pybio/",
    "project_urls": {
      "Homepage": "https://github.com/grexor/pybio"
    },
    "release_url": "https://pypi.org/project/pybio/0.3/",
    "requires_dist": [
      "pysam",
      "numpy",
      "psutil",
      "bs4",
      "requests"
    ],
    "requires_python": "",
    "summary": "pybio genomics",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17527002,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eb1ad73c8e96864538bf9d07c48d8a3faec8222de769a8bd0ad2b8a6280af72",
          "md5": "679ccfdea19657f07e497bd61cdb6a6c",
          "sha256": "79b38d317e25e6b7f9d0b0daf2b3cb8a981d86f8ac01115d06dc35ca223f5398"
        },
        "downloads": -1,
        "filename": "pybio-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "679ccfdea19657f07e497bd61cdb6a6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3119,
        "upload_time": "2022-12-16T21:47:44",
        "upload_time_iso_8601": "2022-12-16T21:47:44.063660Z",
        "url": "https://files.pythonhosted.org/packages/9e/b1/ad73c8e96864538bf9d07c48d8a3faec8222de769a8bd0ad2b8a6280af72/pybio-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "469a2714380dbe3da83b2946a4a4a421b9d9b955cb5b384c1b837cc5dad353d1",
          "md5": "02bc7ba215c8a9af95e9cb16b6d4fa47",
          "sha256": "ba415fea0a28656678ee80e5127a1791356f4e33ac50f65cd0f08a2683b34540"
        },
        "downloads": -1,
        "filename": "pybio-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02bc7ba215c8a9af95e9cb16b6d4fa47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 92190,
        "upload_time": "2023-03-31T13:38:27",
        "upload_time_iso_8601": "2023-03-31T13:38:27.579223Z",
        "url": "https://files.pythonhosted.org/packages/46/9a/2714380dbe3da83b2946a4a4a421b9d9b955cb5b384c1b837cc5dad353d1/pybio-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "469a2714380dbe3da83b2946a4a4a421b9d9b955cb5b384c1b837cc5dad353d1",
        "md5": "02bc7ba215c8a9af95e9cb16b6d4fa47",
        "sha256": "ba415fea0a28656678ee80e5127a1791356f4e33ac50f65cd0f08a2683b34540"
      },
      "downloads": -1,
      "filename": "pybio-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02bc7ba215c8a9af95e9cb16b6d4fa47",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 92190,
      "upload_time": "2023-03-31T13:38:27",
      "upload_time_iso_8601": "2023-03-31T13:38:27.579223Z",
      "url": "https://files.pythonhosted.org/packages/46/9a/2714380dbe3da83b2946a4a4a421b9d9b955cb5b384c1b837cc5dad353d1/pybio-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}