{
  "info": {
    "author": "Krishna Gupta",
    "author_email": "kg158454@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Trade-Trails\n\nIn this library you will find TradeTrails company Function which is often used in Codes.\n\n\n\n## **Package Installation**\n\nFor installing this library you can use any python compiler or you can  open **CMD** and install  python 3.6 version or the above version.\n\nUse the following syntx to install the function:-\n\n\n\n    pip install trade-trails==0.0.1\n\n\n\n\n\n## **Package Import**\n\nThis import package is for installing all the package\n\n    \n\n    from trade_trails import *\n\n\n\n\n\n\n\n\n\n## **Functions**\n\nFollowing are the given functions to fetch the required data :-\n\n\n\n- [Future Close Price](#future-close-price)\n\n- [Call Price](#call-price)\n\n- [Put Price](#put-price)\n\n- [Nearest Base Price](#nearest-base-price)\n\n- [Best Of Three](#best-of-three)\n\n- [Sell Stop Loss](#sell-stop-loss)\n\n- [Buy Stop Loss](#buy-stop-loss)\n\n- [File Name](#file-name)\n\n\n\n### **Future Close Price**\n\n\n\n\n\nThis function is use to fetch  close price at the  given time .\n\n\n\n- Time should be in a string and **HH:MM:SS**\n\n- Dataframe should be **FUTURE DATA**\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import FutureClose\n\n**Syntax**\n\n        \n\n    FutureClose.close_price(self, time, dataframe)\n\n\n\n**Example -** \n\n - Input:\n\n\n\n    Time = \"09:20:59\"\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n \n\n **CODE**\n\n\n\n    from trade_trails import FutureClose\n\n\n\n    data = FutureClose.close_price(time=Time, dataframe=df) \n\n    print(data)\n\n\n\n- **Output :**\n\n                \n\n        34661.45\n\n    \n\n\n\n### **ATM (At The Money)**\n\nThis function used to find At The Money Strike , Call Price and Put Price\n\n- Time should be in a string and **HH:MM:SS**\n\n- Dataframe should be **OPTION DATA**\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    OptionData(self, dataframe, times).atm()\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    Time = \"09:20:59\"\n\n    \n\n    df =  Variable **df** should contain a dataframe\n\n \n\n **CODE**\n\n\n\n    from trade_trails import OptionData\n\n\n\n    atm = OptionData(dataframe=df, time=times).atm() \n\n    print(atm)\n\n\n\n\n\n- **Output :**\n\n       \n\n       [{'atm': '31400', 'call_atm_price': 395.05, 'put_atm_price': 427.2}]\n\n\n\n### **CALL PRICE**\n\n\n\nIt returns call close price at the given time and given strike of OPTION DATA\n\n- Time should be in a string and **HH:MM:SS**\n\n- Dataframe should be **OPTION DATA**\n\n- Strike should be a string\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    OptionData(self, dataframe, time, strike).call_price()\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Time = \"09:20:59\"\n\n    \n\n    Strike= \"31400\"\n\n    \n\n **CODE:**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n    call_price = OptionData(dataframe=df, time=Time, strike=Strike).call_price() \n\n    print(call_price)\n\n\n\n- **Output :**\n\n       \n\n       395.05\n\n\n\n\n\n### **PUT PRICE**\n\n\n\nIt returns put close price at the given time and given strike of OPTION DATA\n\n- Time should be in a string and **HH:MM:SS**\n\n- Dataframe should be **OPTION DATA**\n\n- Strike should be a string\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    OptionData(self, dataframe, time, strike).put_price()\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Time = \"09:20:59\"\n\n    \n\n    Strike= \"31400\"\n\n    \n\n **CODE:**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n    put_price = OptionData(dataframe=df, time=Time, strike=Strike).put_price() \n\n    print(put_price)\n\n\n\n- **Output :**\n\n       \n\n       427.02\n\n\n\n\n\n\n\n### **Nearest Base Price**\n\n\n\nIt returns  close price and strike of nearest base price by using time , base price and option \n\ntype as input of OPTION DATA\n\n- Dataframe should be **OPTION DATA**\n\n- Time should be in a string and **HH:MM:SS**\n\n- Base Price should be an integer\n\n- Option type (CE/PE) should be string  (Default Value = CE)\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    OptionData(self, dataframe,, time, base_price, option_type).nearest_base_price()\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Time = \"09:20:59\"\n\n    \n\n    Base_Price = 250\n\n   \n\n    Option_Type = \"PE/CE\"   \n\n\n\n **CODE:**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n    nearest_base_price = OptionData(dataframe=df, time=Time, base_price=Base_Price, option_type=Option_Type).nearest_base_price() \n\n    print(nearest_base_price)\n\n\n\n- **Output :**\n\n       \n\n      [{'nearest_base_price': 263.1, 'nearest_base_price_strike': '31700'}]\n\n       \n\n\n\n\n\n### **Best Of Three**\n\n\n\nIt returns **Entry Price** and **Entry Strike** from best three combination by using Time and Base price of **OPTION DATA**\n\n\n\n- Dataframe should be **OPTION DATA**\n\n- Time should be in a string and **HH:MM:SS**\n\n- Base Price should be an integer \n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n\n\n**Syntax**\n\n\n\n    OptionData(self, dataframe, time, base_price).best_of_three()\n\n\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Time = \"09:20:59\"\n\n    \n\n    Base_Price = 250\n\n   \n\n **CODE:**\n\n        \n\n    from trade_trails import OptionData\n\n\n\n    best_of_three = OptionData(dataframe=df, time=Time, base_price=Base_Price).best_of_three() \n\n    print(best_of_three)\n\n\n\n- **Output :**\n\n       \n\n        [{'call_strike': '31700', 'call_entry_price': 263.1, 'put_strike': '31000', 'put_entry_price': 260.65}]\n\n\n\n### **Sell Stop Loss**\n\n\n\nIt will returns **Exit Price** and **Exit Time** when it will hit the stop loss for sell strategy by using Entry time, Exit time, Option type, Streike, Stop Loss Price and OPTION DATA\n\n\n\n- Dataframe should be **OPTION DATA**\n\n- Entry Time should be in a string and **HH:MM:SS**\n\n- Exit Time should be in a string and **HH:MM:SS**\n\n- Option type (CE/PE) should be string (Default Value = CE)\n\n- Strike should be a string\n\n- Stop Loss Price should be float \n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    StopLoss(self, dataframe, entry_time, exit_time, option_type, strike, stoploss_price).sell_stop_loss()\n\n\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Entry_Time = \"09:20:59\"\n\n\n\n    Exit_Time = \"15:20:59\"\n\n\n\n    Option_Type = \"PE/CE\"   \n\n\n\n    Strike= \"31400\"\n\n\n\n    Stop_Loss_Price = 294.5\n\n   \n\n **CODE:**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n    sell_stop_loss = StopLoss(dataframe=df, entry_time=Entry_Time, exit_time=Exit_Time, option_type=Option_Type, strike=Strike, stoploss_price=Stop_Loss_Price).sell_stop_loss() \n\n    print(sell_stop_loss)\n\n\n\n- **Output :**\n\n       \n\n        [{'CE_exit_time': datetime.time(10, 23, 59), 'CE_exit_price': 294.5}]\n\n\n\n\n\n### **Buy Stop Loss**\n\n\n\nIt will returns **Exit Price** and **Exit Time** when it will hit the stop loss for buy strategy by using Entry time, Exit time, Option type, Streike, Stop Loss Price and OPTION DATA\n\n\n\n- Dataframe should be **OPTION DATA**\n\n- Entry Time should be in a string and **HH:MM:SS**\n\n- Exit Time should be in a string and **HH:MM:SS**\n\n- Option type (CE/PE) should be string (Default Value = CE)\n\n- Strike should be a string\n\n- Stop Loss Price should be float \n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n**Syntax**\n\n\n\n    StopLoss(self, dataframe, entry_time, exit_time, option_type, strike, stoploss_price).buy_stop_loss()\n\n\n\n\n\n**Example-**\n\n- Input:\n\n\n\n    df =  Variable **df** should contain a dataframe\n\n\n\n    Entry_Time = \"09:20:59\"\n\n\n\n    Exit_Time = \"15:20:59\"\n\n\n\n    Option_Type = \"PE/CE\"   \n\n\n\n    Strike= \"31400\"\n\n\n\n    Stop_Loss_Price = 294.5\n\n   \n\n **CODE:**\n\n    \n\n    from trade_trails import OptionData\n\n\n\n    buy_stop_loss = StopLoss(dataframe=df, entry_time=Entry_Time, exit_time=Exit_Time, option_type=Option_Type, strike=Strike, stoploss_price=Stop_Loss_Price).buy_stop_loss() \n\n    print(sell_stop_loss)\n\n\n\n- **Output :**\n\n       \n\n        [{'PE_exit_time': datetime.time(15, 20, 59), 'PE_exit_price': 200}]\n\n\n\n\n\n### **File Name**\n\n\n\nIt will give file name, year and month  format which is stored in the database which you can use for creating path \n\n- Instrument should be string which contain trading symbol   (Default - \"BANKNIFTY\")\n\n- Date should be in string (YYYY-MM-DD)\n\n\n\n**Import Package**\n\n    \n\n    from trade_trails import FileName\n\n\n\n**Syntax**\n\n\n\n    FileName(self, date, instrument).filename()\n\n\n\n\n\n\n\n**Example-**\n\n- Input:\n\n    \n\n    Date = \"2020-03-01\"\n\n    \n\n    Instrument = \"NIFTY\"\n\n   \n\n **CODE:**\n\n    \n\n    from trade_trails import FileName\n\n\n\n    filename = FileName(date=Date, instrument=Instrument).filename() \n\n    print(filename)\n\n\n\n- **Output :**\n\n       \n\n        {'filename': 'NIFTY_01032020.pkl', 'year': 2020, 'month': 3}]\n\n\n\n\n\n\n\n       \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,trade_trails,trade_trails library,pip install trade_trails,Trade_trails pip install",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trade-trails",
    "package_url": "https://pypi.org/project/trade-trails/",
    "platform": null,
    "project_url": "https://pypi.org/project/trade-trails/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/trade-trails/0.0.2/",
    "requires_dist": [
      "pandas",
      "colorama",
      "datetime"
    ],
    "requires_python": "",
    "summary": "This Library is only For Trade Trails Company",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15117056,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bacc9fc9c55320e6972d230880aaeda195773c91eb0d50c08f381f27996c13c2",
          "md5": "61a069f096aa79cba74ca68a842314cb",
          "sha256": "0bb5f80d8b4dcbdd00a1571818b25b120049bb66f65a24851b2a345f54f15cae"
        },
        "downloads": -1,
        "filename": "trade_trails-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61a069f096aa79cba74ca68a842314cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5724,
        "upload_time": "2022-09-16T11:57:59",
        "upload_time_iso_8601": "2022-09-16T11:57:59.914640Z",
        "url": "https://files.pythonhosted.org/packages/ba/cc/9fc9c55320e6972d230880aaeda195773c91eb0d50c08f381f27996c13c2/trade_trails-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bacc9fc9c55320e6972d230880aaeda195773c91eb0d50c08f381f27996c13c2",
        "md5": "61a069f096aa79cba74ca68a842314cb",
        "sha256": "0bb5f80d8b4dcbdd00a1571818b25b120049bb66f65a24851b2a345f54f15cae"
      },
      "downloads": -1,
      "filename": "trade_trails-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "61a069f096aa79cba74ca68a842314cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5724,
      "upload_time": "2022-09-16T11:57:59",
      "upload_time_iso_8601": "2022-09-16T11:57:59.914640Z",
      "url": "https://files.pythonhosted.org/packages/ba/cc/9fc9c55320e6972d230880aaeda195773c91eb0d50c08f381f27996c13c2/trade_trails-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}