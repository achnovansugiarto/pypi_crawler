{
  "info": {
    "author": "AlibabaCloud",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# What is iact3?\n\nIact3(IaC Template Testing Tool) is a tool that tests [Terraform](https://developer.hashicorp.com/terraform) and [Alibaba Cloud ROS(Resource Orchestration Service)](https://www.alibabacloud.com/help/resource-orchestration-service) templates. It deploys your template in multiple Alibaba Cloud Regions and generates a report for each region via a simple configuration file.  \n\n# Installation\n\n`pip install alibabacloud-ros-iact3`\n\n# Requirements\nPython 3.7+\n\nThe iact3 is run on requires access to an Alibaba Cloud account, this can be done by any of the following mechanisms:\n1. AliyunCli default configuration file (`~/.aliyun/config.json`)\n2. Environment variables (`ALIBABA_CLOUD_ACCESS_KEY_ID` and `ALIBABA_CLOUD_ACCESS_KEY_SECRET`)\n3. The ini configuration file defined by the environment variable ALIBABA_CLOUD_CREDENTIALS_FILE\n4. Alibaba Cloud SDK Credentials default configuration file (`~/.alibabacloud/credentials.ini` or `~/.aliyun/credentials.ini`)\n\n# Usage\n\nIact3 adopts a similar cli command structure to `git` with a `iact3 command subcommand --flag` style. The cli is also designed to be the simplest if run from the root of a project. Let's have a look at equivalent command to run a test:\n\ncd into the project root and type test run\n```shell\ncd ./demo\niact3 test run\n```\n\nor run it from anywhere by providing the path to the project root\n```shell\niact3 test run --project-path ./demo\n```\n\n\n## Cli Command\nThe cli is self documenting by using `--help` or `-h`, the most common command is `iact3 test`\n\n```\niact3 test -h\nusage: iact3 [args] test [args] [subcommand] [args] \n\nPerforms functional tests on IaC templates.\n\noptions:\n  -h, --help  show this help message and exit\n\nsubcommands:\n  clean - Manually clean up the stacks which were created by iact3\n  list - List stacks which were created by iact3 for all regions\n  params - Generate pseudo parameters\n  run - tests whether IaC templates are able to successfully launch\n```\n\n```\niact3 test run -h\nusage: iact3 [args] <command> [args] run [args] \n\ntests whether IaC templates are able to successfully launch\n\noptions:\n  -h, --help            show this help message and exit\n  -t TEMPLATE, --template TEMPLATE\n                        path to a template\n  -c CONFIG_FILE, --config-file CONFIG_FILE\n                        path to a config file\n  -o OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n                        path to an output directory\n  -r REGIONS, --regions REGIONS\n                        comma separated list of regions to test in\n  --test-names TEST_NAMES\n                        comma separated list of tests to run\n  --no-delete           don't delete stacks after test is complete\n  --project-path PROJECT_PATH\n                        root path of the project relative to config file,\n                        template file and output file\n  --keep-failed         do not delete failed stacks\n  --dont-wait-for-delete\n                        exits immediately after calling delete stack\n  -g, --generate-parameters\n                        generate pseudo parameters\n```\n\n## Configuration files\nThere are 2 config files which can be used to set behaviors.\n\n1. Global config file, located in `~/.iact3.yml`\n2. Project config file, located in `<PROJECT_ROOT>/.iact3.yml`\n\nEach configuration file supports three-tier configuration, which includes `general`, `project` and `tests`, and `tests` is required.\n\n### general configuration item\n\n- `auth` Aliyun authentication section.\n```json\n{\n  \"name\": \"default\", \n  \"location\": \"~/.aliyun/config.json\"\n}\n```\n\n- `oss_config` Oss bucket configuration, include BucketName, BucketRegion and etc.\n```json\n{\n  \"bucket_name\": \"\",\n  \"bucket_region\": \"\",\n  \"object_prefix\": \"\",\n  \"callback_params\": {\n    \"callback_url\": \"\",\n    \"callback_host\": \"\",\n    \"callback_body\": \"\",\n    \"callback_body_type\": \"\",\n    \"callback_var_params\": \"\"\n  }\n}\n```\n\n- `parameters` Parameter key-values to pass to template.\n```json\n{\n  \"vpc_id\": \"\",\n  \"vsw_id\": \"\"\n}\n```\n\n### project configuration item\n\n- `name` Project Name\n- `regions` List of aliyun regions.\n- `parameters` Parameter key-values to pass to template.\n- `tags` Tags\n- `role_name` Role name\n- `template_config` Template config\n```json\n{\n  \"template_location\": \"myTemplate/\",\n  \"template_url\": \"oss://xxx\",\n  \"template_body\": \"\",\n  \"template_id\": \"\",\n  \"template_version\": \"\"\n}\n```\n\n### tests configuration item\n\n- `name` Project Name\n- `regions` List of aliyun regions.\n- `parameters` Parameter key-values to pass to template.\n- `tags` Tags\n- `role_name` Role name\n- `template_config` Template config\n```json\n{\n  \"template_location\": \"myTemplate/\",\n  \"template_url\": \"oss://xxx\",\n  \"template_body\": \"\",\n  \"template_id\": \"\",\n  \"template_version\": \"\"\n}\n```\n\n## Precedence\n\nExcept the parameters section, more specific config with the same key takes precedence.\n\n> The rationale behind having parameters function this way is so that values can be overridden at a system level outside a project, that is likely committed to source control. parameters that define account specific things like VPC details, Key Pairs, or secrets like API keys can be defined per host outside of source control. \n\nFor example, consider this global config in `~/.iact3.yml`\n\n```yaml\ngeneral:\n  oss_config: \n    bucket_name: global-bucket\n  parameters:\n    KeyPair: my-global-ecs-key-pair\n```\n\nand this project config\n```yaml\nproject:\n  name: my-project\n  regions:\n    - cn-hangzhou\n  oss_config:\n    bucket_name: project-bucket\ntests:\n  default:\n    template_config:\n      template_url: \"oss://xxx\"\n    regions:\n      - cn-beijing\n    parameters:\n      KeyPair: my-test-ecs-key-pair\n```\nWould result in this effective test configuration:\n\n```yaml\ntests:\n  default:\n    template_config:\n      template_url: \"oss://xxx\"\n    regions:\n      - cn-beijing\n    oss_config:\n      bucket_name: project-bucket\n    parameters:\n      KeyPair: my-test-ecs-key-pair\n```\n\nNotice that `bucket_name` and `regions` took the most specific value and `KeyPair` the most general.\n\n## Pseudo Parameters\n\nYou can automatically get the available parameters through the `$[iact3-auto]` pseudo-parameter if the parameter is the following 2 cases\n1. The resource attribute corresponding to the parameter supports the ROS [GetTemplateParameterConstraints](https://www.alibabacloud.com/help/en/resource-orchestration-service/latest/gettemplateparameterconstraints) interface.\n2. Parameters whose name itself has a specific meaning. For example, `VpcId` means the id of virtual private cloud and `$[iact3-auto]` will automatically obtain a vpcId randomly in the current region of the current account. Currently supported are as follows:\n   1. Satisfying the regularity `r\"(\\w*)vpc(_|)id(_|)(\\d*)\"` will automatically and randomly obtain the VpcId in the current region.\n   2. Satisfying the regularity `r\"(\\w*)v(_|)switch(_|)id(_|)(\\d*)\"` will automatically and randomly obtain the VswitchId in the current region. If there is a parameter whose name satisfies the regularity `r\"(\\w*)zone(_|)id(_|)(\\d*)\"`, it will query the VswitchId of the corresponding availability zone\n   3. Satisfying the regularity `r\"(\\w*)security(_|)group(_id|id)(_|)(\\d*)\"` will automatically and randomly obtain the SecurityGroupId in the current region.\n   4. Satisfying the regularity `r\"(\\w*)name(_|)(\\d*)\"` will automatically generate a random string starting with `iact3-`.\n   5. Satisfying the regularity `r\"(\\w*)password(_|)(\\d*)\"` will automatically generate a password.\n   6. Satisfying the regularity `r\"(\\w*)uuid(_|)(\\d*)\"` will automatically generate an uuid.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alibabacloud-ros-iact3",
    "package_url": "https://pypi.org/project/alibabacloud-ros-iact3/",
    "platform": null,
    "project_url": "https://pypi.org/project/alibabacloud-ros-iact3/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/alibabacloud-ros-iact3/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Iact3 is a tool that tests Terraform and ROS(Resource Orchestration Service) templates.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973021,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38ee1084f79ef12044c74bd03cd79e29eb9cb67b0f4d84e0a7f3eea3b16cb01",
          "md5": "d07bb809ea0e1450928d97cbd6f1454e",
          "sha256": "5689d5fec85bf40ef63ef9ee2366cb1f9a7ea06ace268e3644c693807d052313"
        },
        "downloads": -1,
        "filename": "alibabacloud-ros-iact3-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d07bb809ea0e1450928d97cbd6f1454e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33867,
        "upload_time": "2023-02-22T08:23:39",
        "upload_time_iso_8601": "2023-02-22T08:23:39.511272Z",
        "url": "https://files.pythonhosted.org/packages/b3/8e/e1084f79ef12044c74bd03cd79e29eb9cb67b0f4d84e0a7f3eea3b16cb01/alibabacloud-ros-iact3-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b38ee1084f79ef12044c74bd03cd79e29eb9cb67b0f4d84e0a7f3eea3b16cb01",
        "md5": "d07bb809ea0e1450928d97cbd6f1454e",
        "sha256": "5689d5fec85bf40ef63ef9ee2366cb1f9a7ea06ace268e3644c693807d052313"
      },
      "downloads": -1,
      "filename": "alibabacloud-ros-iact3-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d07bb809ea0e1450928d97cbd6f1454e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33867,
      "upload_time": "2023-02-22T08:23:39",
      "upload_time_iso_8601": "2023-02-22T08:23:39.511272Z",
      "url": "https://files.pythonhosted.org/packages/b3/8e/e1084f79ef12044c74bd03cd79e29eb9cb67b0f4d84e0a7f3eea3b16cb01/alibabacloud-ros-iact3-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}