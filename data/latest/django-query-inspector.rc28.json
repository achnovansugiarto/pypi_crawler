{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "======================\ndjango-query-inspector\n======================\n\n.. image:: https://badge.fury.io/py/django-query-inspector.svg\n    :target: https://badge.fury.io/py/django-query-inspector\n\nA collection of tools to:\n\n    - count and trace db queries for debugging purposes or to optimize them\n    - render a Queryset (or a list of dictionaries) in various formats\n    - export a Queryset to a spreadsheet\n    - inspect the SQL activity happening under the hood of a Django project\n    - and more ...\n\n.. contents::\n\n.. sectnum::\n\nQuick start\n-----------\n\n1. Installation::\n\n    pip install django-query-inspector\n\n2. Add \"query_inspector\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'query_inspector',\n    ]\n\n3. Add \"QueryCountMiddleware\" to your MIDDLEWARE setting like this::\n\n    MIDDLEWARE = [\n        ...\n        'query_inspector.middleware.QueryCountMiddleware',\n    ]\n\n4. Optionally, include styles in your base template::\n\n    <link href=\"{% static 'query_inspector.css' %}\" rel=\"stylesheet\" />\n\n5. Optional dependencies:\n\n    - sqlparse\n    - termcolor\n    - pygments\n    - tabulate\n    - xlsxwriter\n\nDoes it work?\n-------------\n\nRunning the unit tests from your project::\n\n    python manage.py test -v 2 query_inspector --settings=query_inspector.tests.test_settings\n\nRunning the unit tests from your local fork::\n\n    cd django-query-inspector\n    ./runtests.py\n\nor::\n\n    coverage run --source='.' runtests.py\n    coverage report\n\nQuery counting\n--------------\n\nA middleware that prints DB query counts in Django's runserver console output (only in DEBUG mode).\n\nAdapted from: `Django Querycount <https://github.com/bradmontgomery/django-querycount>`_\n\nby Brad Montgomery\n\n=========================== =============================================================================================\nSetting                     Meaning\n--------------------------- ---------------------------------------------------------------------------------------------\nIGNORE_ALL_REQUESTS         Disables query count\nIGNORE_REQUEST_PATTERNS     A list of regexp patterns to bypass matching requests\nIGNORE_SQL_PATTERNS         A list of regexp patterns to bypass matching queries\nTHRESHOLDS                  How many queries are interpreted as high or medium (and the color-coded output)\nDISPLAY_ALL                 Trace all queries (even when not duplicated)\nDISPLAY_PRETTIFIED          Use pygments and sqlparse for queries tracing\nCOLOR_FORMATTER_STYLE       Color formatter style for Pygments\nRESPONSE_HEADER             Custom response header that contains the total number of queries executed (None = disabled)\nDISPLAY_DUPLICATES          Controls how the most common duplicate queries are displayed (None = displayed)\n=========================== =============================================================================================\n\nDefault settings (to be overridden in projects' settings)::\n\n    QUERYCOUNT = {\n        'IGNORE_ALL_REQUESTS': True,\n        'IGNORE_REQUEST_PATTERNS': [],\n        'IGNORE_SQL_PATTERNS': [],\n        'THRESHOLDS': {\n            'MEDIUM': 50,\n            'HIGH': 200,\n            'MIN_TIME_TO_LOG': 0,\n            'MIN_QUERY_COUNT_TO_LOG': 0\n        },\n        'DISPLAY_ALL': True,\n        'DISPLAY_PRETTIFIED': True,\n        'COLOR_FORMATTER_STYLE': 'monokai',\n        'RESPONSE_HEADER': 'X-DjangoQueryCount-Count',\n        'DISPLAY_DUPLICATES': 0,\n    }\n\nExecute SQL statements\n----------------------\n\nIt is possible to execute a SQL statements against the default db connection using the following helper:\n\n.. code:: python\n\n    query_inspector.sql.perform_query(sql, params, log=False, validate=True)\n\nThe resulting recordset will be returned as a list of dictionaries.\n\nOr, you can save it in the Django admin (model query_inspector.Query),\nthen click the \"Preview\" button.\n\nIf the query contains named parameters (such as `%(name)s`), a form will be displayed to collect the\nactual values before execution.\n\nInspired by:\n\n- `django-sql-dashboard <https://github.com/simonw/django-sql-dashboard>`_\n- `django-sql-explorer <https://github.com/groveco/django-sql-explorer>`_\n\n.. figure:: screenshots/query_preview.png\n\n    query_preview\n\nApp settings\n------------\n\n::\n\n    QUERY_INSPECTOR_QUERY_SUPERUSER_ONLY = True\n    QUERY_INSPECTOR_QUERY_DEFAULT_LIMIT = 0\n    QUERY_INSPECTOR_QUERY_STOCK_QUERIES = []\n    QUERY_INSPECTOR_SQL_BLACKLIST = (\n        'ALTER',\n        'RENAME ',\n        ...\n    QUERY_INSPECTOR_SQL_WHITELIST = (\n        'CREATED',\n        'UPDATED',\n        ...\n\n@query_debugger\n---------------\n\nDecorator to check how many queries are executed when rendering a specific view.\n\nAdapted from:\n\n`Django select_related and prefetch_related: Checking how many queries reduce using these methods with an example <https://medium.com/better-programming/django-select-related-and-prefetch-related-f23043fd635d>`_\n\nby Goutom Roy\n\nExamples::\n\n    from query_inspector import query_debugger\n\n    @query_debugger\n    def tracks_list_view(request):\n        ...\n\n    class TrackAjaxDatatableView(AjaxDatatableView):\n\n        ...\n\n        @query_debugger\n        def dispatch(self, request, *args, **kwargs):\n            ...\n\nResult:\n\n.. figure:: screenshots/query_debugger.png\n\n    query_debugger\n\nTracing queries in real-time\n----------------------------\n\nOn rare occasions, you might want to trace queries immediately as they happen\nwhile stepping through the code.\n\nFor that aim, configure the 'django.db.backends' logger in your settings;\nto print formatted and colored queries, provided pygments and sqlparse have been\ninstalled, use the **query_inspector.log.QueryLogHandler** handler::\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'handlers': {\n            'db_console': {\n                'level': 'DEBUG',\n                #'class': 'logging.StreamHandler',\n                'class': 'query_inspector.log.QueryLogHandler',\n            },\n        },\n        'loggers': {\n            'django.db.backends': {\n                'handlers': ['db_console', ],\n                'level': 'DEBUG',\n            },\n        },\n    }\n\nInspecting queries in a unit test\n---------------------------------\n\nThis is not obvious, since unit tests are run with DEBUG disabled.\n\nDjango provides a convenient **CaptureQueriesContext** for this:\n\n.. code:: python\n\n    import pprint\n    from django import db\n    from django.test.utils import CaptureQueriesContext\n    from query_inspector import prettyprint_query\n\n    def text_whatever(self):\n\n        db.reset_queries()\n        with CaptureQueriesContext(db.connection) as context:\n\n            ... do your stuff ...\n\n        num_queries = context.final_queries - context.initial_queries\n        print('num_queries: %d' % num_queries)\n        #pprint.pprint(context.captured_queries)\n\n        for row in context.captured_queries:\n            prettyprint_query(row['sql'])\n            print('time: ' + row['time'])\n\n\nMore examples are available here:\n\n`Python django.test.utils.CaptureQueriesContext() Examples <https://www.programcreek.com/python/example/74788/django.test.utils.CaptureQueriesContext>`_\n\nTracing\n-------\n\nSome helper functions are available to print formatted and colored text in the console.\n\nOptional requirements:\n\n    - sqlparse\n    - termcolor\n    - pygments\n    - tabulate\n\nFunctions:\n\ndef trace(message, color='yellow', on_color=None, attrs=None, prompt='', prettify=False)\n    Display 'message', optionally preceed by 'prompt';\n    If 'prettify' is True, format message with pprint\n\n    Color support provided by: https://pypi.org/project/termcolor/\n\ndef prettyprint_query(query, params=None, colorize=True, prettify=True, reindent=True)\n    Display the specified SQL statement\n\ndef prettyprint_queryset(qs, colorize=True, prettify=True, reindent=True)\n    Display the SQL statement implied by the given queryset\n\ndef trace_func(fn):\n    Decorator to detect: function call, input parameters and return value\n\ndef qsdump(* fields, queryset, max_rows=None, render_with_tabulate=True, title=\"\")\n    See below\n\ndef qsdump2(queryset, include, exclude, max_rows=None, render_with_tabulate=True, title=\"\")\n    Calls qsdump() building the field list from either \"include\" or \"exclude\" parameter\n\nResults:\n\n.. figure:: screenshots/prettyprint_queryset.png\n\n    prettyprint_queryset\n\n.. figure:: screenshots/trace_func.png\n\n    trace_func\n\n\nInspect a queryset with qsdump\n------------------------------\n\nWith qsdump you can:\n\n- display the formatted SQL statement\n- display the content of the queryset\n\nParameters:\n\n    fields:\n        one or more field names; '*' means 'all'\n\n    queryset:\n        the queryset to be inspected\n\n    max_rows:\n        optionally limit the numer of rows\n\n    render_with_tabulate=True\n        use \"tabulate\" when available\n\n    title=\"\"\n        optional title\n\nExample::\n\n    qsdump('*', queryset=tracks, max_rows=10)\n\n|\n\n.. figure:: screenshots/qsdump.png\n\n    qsdump\n\n\nQueryset rendering\n------------------\n\nA few templatetags are available to render either a queryset or a list of dictionaries::\n\n    def render_queryset_as_table(* fields, queryset, options={})\n    def render_queryset_as_csv(* fields, queryset, options={})\n    def render_queryset_as_text(* fields, queryset, options={})\n\n\nSample usage::\n\n    {% load static query_inspector_tags %}\n\n    <link href=\"{% static 'query_inspector.css' %}\" rel=\"stylesheet\" />\n\n    <table class=\"simpletable smarttable\">\n        {% render_queryset_as_table \"id\" \"last_name|Cognome\" \"first_name|Nome\" ... queryset=operatori %}\n    </table>\n\n\nParameters:\n\nqueryset: a queryset of a list of dictionaries with data to rendered\n\noptions:\n    - max_rows: max n. of rows to be rendered (None=all)\n    - format_date:  date formatting string; see:\n        + https://docs.djangoproject.com/en/dev/ref/settings/#date-format\n        + https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n    - add_totals: computes column totals and append results as bottom row\n    - transpose: flag to transpose the resulting table\n\nfields: a list of field specifiers, espressed as:\n    - \"fieldname\", or\n    - \"fieldname|title\", or\n    - \"fieldname|title|extra_classes\"\n\n    Field \"extra classes\" with special styles:\n        - \"percentage\": render column as %\n        - \"enhanced\"\n        - \"debug-only\"\n\n.. figure:: screenshots/render_queryset.png\n\n    render_queryset\n\nMore templatetags::\n\n    def pdb(element)\n    def ipdb(element)\n    def format_datetime(dt, include_time=True, include_seconds=False, exclude_date=False)\n    def format_date(dt)\n    def format_datetime_with_seconds(dt)\n    def format_time(t, include_seconds=False)\n    def format_time_with_seconds(t)\n    def format_timedelta(td_object, include_seconds=True)\n    def format_timediff(t1, t2, include_seconds=True)\n    def timeformat_seconds(seconds)\n    def timeformat(seconds)\n    # def format_number(value, decimals, grouping )\n    def queryset_as_json(qs)\n    def object_as_dict(instance, fields=None, exclude=None)\n    def object_as_json(instance, fields=None, exclude=None, indent=0)\n\nCustom rendering\n----------------\n\nFor greated control of the final rendering, you can retrieve headers and data rows separately (as lists)\nusing:\n\n\n    def render_queryset_as_table(* fields, queryset, options={})\n\nFor example, the equivalent of:\n\n.. code:: python\n\n        print(render_queryset_as_text(*fields, queryset=queryset, options=options))\n\ncan be reproduced as follows:\n\n.. code:: python\n\n        headers, rows = render_queryset_as_data(*fields, queryset=queryset, options=options)\n\n        print('|'.join(headers))\n        for row in rows:\n            print('|'.join(row))\n        print(\"\")\n\nTransposing resulting table\n---------------------------\n\nOccasionally, you might need to switch columns and rows in the resulting table;\nthis can be obtained by adding a `'transpose': True` to the `options`.\n\nCurrently available for `render_queryset_as_data()` and `render_queryset_as_table()`.\n\nAlternatively, you can transpose a queryset with `django-pandas` as follows:\n\n.. code:: python\n\n    import pandas as pd\n    from django_pandas.io import read_frame\n\n    df = read_frame(queryset)\n    table_html = df.transpose().to_html()\n    print(table_html)\n\nDownload the queryset as CSV or Excel file (xlsx)\n-------------------------------------------------\n\nFor historical reasons, we provide two different approaches to export the queryset as a spreadsheet:\n\n1) with the class SpreadsheetQuerysetExporter (see `Exporters`_ below)\n\n2) parsing the queryset with the aid of `render_queryset_as_table`\n\nThe first requires a proper Queryset, while the second should work with either a Queryset\nor a list of dictionares.\n\nIn both cases, two helper view functions are available to build the HTTP response\nrequired for attachment download::\n\n    export_any_queryset(request, queryset, filename, excluded_fields=[], included_fields=[], csv_field_delimiter = \";\")\n\n    export_any_dataset(request, *fields, queryset, filename, csv_field_delimiter = \";\")\n\nThe helper function normalized_export_filename(title, extension) might be used\nto build filenames consistently.\n\nSample usage:\n\n.. code:: python\n\n    from django.utils import timezone\n    from query_inspector.views import normalized_export_filename\n    from query_inspector.views import export_any_dataset\n\n\n    def export_tracks_queryset(request, file_format='csv'):\n        queryset = Track.objects.select_related('album', 'album__artist', )\n        filename = normalized_export_filename('tracks', file_format)\n        return export_any_queryset(\n            request,\n            queryset,\n            filename,\n            excluded_fields=[],\n            included_fields=[],\n            csv_field_delimiter = \";\"\n        )\n\n\n    def export_tracks_dataset(request, file_format='csv'):\n        queryset = Track.objects.select_related('album', 'album__artist', )\n        filename = '%s_%s.%s' % (\n            timezone.localtime().strftime('%Y-%m-%d_%H-%M-%S'),\n            \"tracks\",\n            file_format,\n        )\n        fields = [\n            \"id\",\n            \"name|Track\",\n            \"album|Album\",\n        ]\n\n        return export_any_dataset(request, *fields, queryset=queryset, filename=filename)\n\nthen in your template:\n\n.. code:: html\n\n    <div style=\"text-align: right;\">\n        <div class=\"toolbar\">\n            <label>Export Tracks queryset:</label>\n            <a href=\"/tracks/download_queryset/xlsx/\" class=\"button\">Download (Excel)</a>\n            <a href=\"/tracks/download_queryset/csv/\" class=\"button\">Download (CSV)</a>\n        </div>\n        <br />\n        <div class=\"toolbar\">\n            <label>Export Tracks dataset:</label>\n            <a href=\"/tracks/download_dataset/xlsx/\" class=\"button\">Download (Excel)</a>\n            <a href=\"/tracks/download_dataset/csv/\" class=\"button\">Download (CSV)</a>\n        </div>\n    </div>\n\nwhere:\n\n.. code:: python\n\n    urlpatterns = [\n        ...\n        path('tracks/download_queryset/csv/', views.export_tracks_queryset, {'file_format': 'csv', }),\n        path('tracks/download_queryset/xlsx/', views.export_tracks_queryset, {'file_format': 'xlsx', }),\n        path('tracks/download_dataset/csv/', views.export_tracks_dataset, {'file_format': 'csv', }),\n        path('tracks/download_dataset/xlsx/', views.export_tracks_dataset, {'file_format': 'xlsx', }),\n        ...\n    ]\n\n\nGeneric helpers\n---------------\n\ndef get_object_by_uuid_or_404(model, uuid_pk)\n\n    Calls get_object_or_404(model, pk=uuid_pk)\n    but also prevents \"badly formed hexadecimal UUID string\" unhandled exception\n\ndef prettify_json(data)\n\n    Given a JSON string, returns it as a safe formatted HTML\n    Sample usage in Model::\n\n        def summary_prettified(self):\n            return prettify_json(self.summary)\n\n    then add it to the list of readonly_fields in the ModelAdmin\n\ndef cleanup_queryset(queryset)\n\n    Remove multiple joins on the same table, if any\n\n    WARNING: can alter the origin queryset order\n\nExporters\n---------\n\nclass XslxFile(object)\n    XSLX writer\n\n    Requires: xlsxwriter\n\ndef open_xlsx_file(filepath, mode=\"rb\")\n    Utility to open an archive supporting the \"with\" statement\n\nSample usage::\n\n    with open_xlsx_file(filepath) as writer:\n        self.export_queryset(writer, fields, queryset)\n    assert writer.is_closed()\n\nclass SpreadsheetQuerysetExporter(object)\n    Helper class to export a queryset to a spreadsheet.\n\nSample usage::\n\n    writer = csv.writer(output, delimiter=field_delimiter, quoting=csv.QUOTE_MINIMAL)\n    exporter = SpreadsheetQuerysetExporter(writer, file_format='csv')\n    exporter.export_queryset(\n        queryset,\n        included_fields=[\n            'id',\n            'description',\n            'category__id',\n            'created_by__id',\n        ]\n    )\n\nSee also: `Download the queryset as CSV or Excel file (xlsx)`_\n\nHelper management commands\n--------------------------\n\nA few management commands are provided to:\n\n    - quickly download database and/or media file from a remote project's instance\n    - save/restore a backup copy of database and/or media files to/from a local backup folder\n\nDatabase actions require Postrgresql; downloading from remote instance requires\nread access via SSH.\n\nYou're advised to double-check implied actions by dry-running these commands\nbefore proceeding.\n\n**sitecopy: Syncs database and media files for local project from a remote instance**\n\nSettings::\n\n    REMOTE_HOST_DEFAULT = getattr(settings, 'SITECOPY_REMOTE_HOST_DEFAULT', '<REMOTE_HOST>')\n    PROJECT = getattr(settings, 'SITECOPY_PROJECT', '<PROJECT>')\n    SOURCE_MEDIA_FOLDER = getattr(settings, 'SITECOPY_SOURCE_MEDIA_FOLDER', '/home/%s/public/media/' % PROJECT)\n\nUsage::\n\n    usage: manage.py sitecopy [-h] [--dry-run] [--quiet] [--host HOST] [-v {0,1,2,3}] [--settings SETTINGS]\n\n    Syncs database and media files for project \"gallery\" from remote server \"gallery.brainstorm.it\"\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --dry-run, -d         Dry run (simulate actions)\n      --quiet, -q           do not require user confirmation before executing commands\n      --host HOST           Default: \"gallery.brainstorm.it\"\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n**dump_local_data: Dump local db and media for backup purposes (and optionally remove old backup files)**\n\nSettings::\n\n    DUMP_LOCAL_DATA_TARGET_FOLDER = getattr(settings, 'DUMP_LOCAL_DATA_TARGET_FOLDER', os.path.join(settings.BASE_DIR, '..', 'dumps', 'localhost'))\n\nUsage::\n\n    usage: manage.py dump_local_data [-h] [--target target] [--dry-run] [--max-age MAX_AGE] [--no-gzip] [--legacy]\n                                     [-v {0,1,2,3}] [--settings SETTINGS]\n\n    Dump local db and media for backup purposes (and optionally remove old backup files)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --target target, -t target\n                            choices: db, media, all; default: db\n      --dry-run, -d         Dry run (simulation)\n      --max-age MAX_AGE, -m MAX_AGE\n                            If > 0, remove backup files old \"MAX_AGE days\" or more\n      --no-gzip             Do not compress result\n      --legacy              use legacy Postgresql command syntax\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n**restore_from_local_data: Restore db and media from local backups**\n\nSettings::\n\n    DUMP_LOCAL_DATA_TARGET_FOLDER = getattr(settings, 'DUMP_LOCAL_DATA_TARGET_FOLDER', os.path.join(settings.BASE_DIR, '..', 'dumps', 'localhost'))\n\nUsage::\n\n    usage: manage.py restore_from_local_data [-h] [--target target] [--dry-run] [--no-gzip] [--source-subfolder SOURCE_SUBFOLDER]\n                                             [-v {0,1,2,3}] [--settings SETTINGS]\n                                             prefix\n\n    Restore db and media from local backups; source folder is \"/Volumes/VMS3/django_storage/gallery/dumps/localhost\"\n\n    positional arguments:\n      prefix                Initial substring to match the filename to restore from; provide enough characters to match a single file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --target target, -t target\n                            choices: db, media, all; default: db\n      --dry-run, -d         Dry run (simulation)\n      --no-gzip             Do not compress result\n      --source-subfolder SOURCE_SUBFOLDER, -s SOURCE_SUBFOLDER\n                            replaces \"localhost\" in DUMP_LOCAL_DATA_TARGET_FOLDER\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n**load_stock_queries: Load stock (readonly) queries from settings.QUERY_INSPECTOR_QUERY_STOCK_QUERIES list**\n\nApplication should provide a list of stock queries as follows::\n\n    SQL_QUERIES = [{\n        'slug': '...',\n        'title': '...',\n        'sql': \"\"\"\n            select\n            ...\n            \"\"\",\n        'notes': \"...\",\n    }, {\n        ...\n    }]\n\nIdeally, you should run this command at deployment time, to make sure that stock queries\nare always updated with sources.\n\nDuring development, a \"Reload stock queries\" button is also available in the changelist.\n\n\n\n\nHistory\n=======\n\nv1.1.12\n-------\n* Fix normalized_export_filename()\n\nv1.1.11\n-------\n* Specify default_auto_field to avoid unexpected migrations\n\nv1.1.10\n-------\n* Examples for \"sitecopy\" settings\n\nv1.1.9\n------\n* Prepare for Django 4.0\n* Support for Sqlite3 params\n\nv1.1.8\n------\n* Added missing migration\n\nv1.1.7\n------\n* Stock queries support\n\nv1.1.6\n------\n* Fix: remove duplicates from extract_named_parameters()\n\nv1.1.5\n------\n* Fix readme\n\nv1.1.4\n------\n* qsdump2() helper added\n* Query: persist parameters and duplicate\n\nv1.1.3\n------\n* fix preview styles again\n\nv1.1.2\n------\n* fix styles\n\nv1.1.1\n------\n* Query preview: add horizontal scrolling to results table\n\nv1.1.0\n------\n* SQL query preview from admin\n* fix format_datetime() for naive datetimes\n\nv1.0.9\n------\n* added \"params\" and \"reindend\" parameters to prettyprint_query()\n* added \"reindend\" to prettyprint_queryset()\n\nv1.0.8\n------\n* [fix] remove division by zero when computing average for and empty list of rows\n\nv1.0.7\n------\n* QueryCountMiddleware can be used as standalone\n\nv1.0.6\n------\n\n* optionally Transpose rendered tables\n* slugify \"field-...\" class in rendered HTML tables\n* support \"field1__field2\" syntax to span relationships\n\nv1.0.5\n------\n* \"dump_local_data\" management command now supports sqlite and Windows platform\n\nv1.0.4\n------\n* fix syntax error due to wrong indentation\n\nv1.0.3\n------\n* render_value_as_text() optionally preserves numeric formats\n\nv1.0.2\n------\n* use apply_autofit() in export_any_queryset()\n\nv1.0.1\n------\n* fix unprettified duplicate_queries dump\n\nv1.0.0\n------\n* fix format_datetime\n\nv0.0.6\n------\n* normalized_export_filename() helper\n* improved documentation\n\nv0.0.5\n------\n* Tracing queries in real-time\n* Inspecting queries in a unit test\n* Helper management commands\n\nv0.0.4\n------\n* render_queryset_as_data added for greated control of the final rendering\n* qsdump supports tabulate\n* download the queryset as a spreadsheet\n\nv0.0.3\n------\n* querycounter middleware\n* query_debugger decorator\n* tracing helpers\n* templetags helpers\n* export a Queryset to a spreadsheet\n\nv0.0.2\n------\n* unit tests reorganized\n\nv0.0.1\n------\n* Initial setup\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morlandi/django-query-inspector",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-query-inspector",
    "package_url": "https://pypi.org/project/django-query-inspector/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-query-inspector/",
    "project_urls": {
      "Homepage": "https://github.com/morlandi/django-query-inspector"
    },
    "release_url": "https://pypi.org/project/django-query-inspector/1.1.12/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of tools to render, export and inspect Django Querysets.",
    "version": "1.1.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17336609,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7121c3b8dac89687d6a4cae5fdb2f1d5e2e512b65a983e36a15ed219d190074f",
          "md5": "b0bccefa2147b30e4458179162841956",
          "sha256": "39a8a47f3c315e682362e34770a9af22ad3964cdee5aa0d673bdbb1e7d9d5d6d"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0bccefa2147b30e4458179162841956",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 4495,
        "upload_time": "2020-09-28T08:45:19",
        "upload_time_iso_8601": "2020-09-28T08:45:19.229673Z",
        "url": "https://files.pythonhosted.org/packages/71/21/c3b8dac89687d6a4cae5fdb2f1d5e2e512b65a983e36a15ed219d190074f/django_query_inspector-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb110eabb8a1e534bb011c534b4fe59cf975dc41f94bccc5eaac1bd7c03b7dcc",
          "md5": "0ff196c84ea318fdd6fb78f80236cd23",
          "sha256": "a0213c12495fb1d1141b3a8f60e628bf498d2735f4adecaabb644f46c213b927"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ff196c84ea318fdd6fb78f80236cd23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 4632,
        "upload_time": "2020-09-28T09:12:18",
        "upload_time_iso_8601": "2020-09-28T09:12:18.138979Z",
        "url": "https://files.pythonhosted.org/packages/fb/11/0eabb8a1e534bb011c534b4fe59cf975dc41f94bccc5eaac1bd7c03b7dcc/django_query_inspector-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "067a70455a20fd8c27f0c06307c34c92d71ed3bcc9785c76756f43463ee5fef6",
          "md5": "f1f619d75de60bdd8f739b393ca099e1",
          "sha256": "76f61921e78c5f4cccfc710d1113bb05320e3133ddbc4d63b059bbef8d9590ea"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1f619d75de60bdd8f739b393ca099e1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25689,
        "upload_time": "2020-09-30T08:42:29",
        "upload_time_iso_8601": "2020-09-30T08:42:29.361433Z",
        "url": "https://files.pythonhosted.org/packages/06/7a/70455a20fd8c27f0c06307c34c92d71ed3bcc9785c76756f43463ee5fef6/django_query_inspector-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be74226c81494526402180fc46af54db75a2b6ef91c051ff9a21e2eed5cd2354",
          "md5": "d59a43230b4ed93f02ce814f9962b63c",
          "sha256": "83c9b912744738ac495cb8ed160ff7f1c0bf42eef09f2e7d5bb463995c5dd6ac"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d59a43230b4ed93f02ce814f9962b63c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28203,
        "upload_time": "2020-11-13T15:38:53",
        "upload_time_iso_8601": "2020-11-13T15:38:53.297768Z",
        "url": "https://files.pythonhosted.org/packages/be/74/226c81494526402180fc46af54db75a2b6ef91c051ff9a21e2eed5cd2354/django_query_inspector-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d02d51f87db1e86856f6c4b8fbaf6e8acadef77a9e5b97d0a524eaefeebb60b",
          "md5": "a3b991b2b1378d25f8fb1488be969e96",
          "sha256": "b1c6882e4d8a04a17fcd47bbf85a2ef29780903923de24c3bde7e0f79bf0dec0"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3b991b2b1378d25f8fb1488be969e96",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 49249,
        "upload_time": "2020-11-29T07:21:59",
        "upload_time_iso_8601": "2020-11-29T07:21:59.723148Z",
        "url": "https://files.pythonhosted.org/packages/3d/02/d51f87db1e86856f6c4b8fbaf6e8acadef77a9e5b97d0a524eaefeebb60b/django_query_inspector-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9995d95dbb9f9818549a352a979912532d72de6894dc36088b968c805332c1b",
          "md5": "ff3b15e4ec1483408900d986222787e9",
          "sha256": "653cdb10d0315923d7c6d0bccdc8cbc406a069d58409e14d82f64953a2ecddf3"
        },
        "downloads": -1,
        "filename": "django_query_inspector-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff3b15e4ec1483408900d986222787e9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38825,
        "upload_time": "2020-12-11T10:50:56",
        "upload_time_iso_8601": "2020-12-11T10:50:56.506690Z",
        "url": "https://files.pythonhosted.org/packages/f9/99/5d95dbb9f9818549a352a979912532d72de6894dc36088b968c805332c1b/django_query_inspector-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11e30464f0ea804b94f342c892ef4c65a7a7f42e2e350da38cdf3a910ab1f8e6",
          "md5": "2039fd5194802ffdbb8a0b0d6a06e8b8",
          "sha256": "b4d4ade03655bb660ad68452a038c3d4ce251fbb4a95911dbf58d43087445a6b"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2039fd5194802ffdbb8a0b0d6a06e8b8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38868,
        "upload_time": "2020-12-24T17:13:11",
        "upload_time_iso_8601": "2020-12-24T17:13:11.065646Z",
        "url": "https://files.pythonhosted.org/packages/11/e3/0464f0ea804b94f342c892ef4c65a7a7f42e2e350da38cdf3a910ab1f8e6/django_query_inspector-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a9f9d2d6bb57c03ddc08ddc6bb97228aa468528e034d7111e34ad90f0396f4d",
          "md5": "a68ad08f22b69e64126b61381da67926",
          "sha256": "372cdc6f1f3609603a8e4a79c1e1c07f22d7ebf194e17062ebf380052d94a0e6"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a68ad08f22b69e64126b61381da67926",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 38892,
        "upload_time": "2020-12-31T10:44:42",
        "upload_time_iso_8601": "2020-12-31T10:44:42.281145Z",
        "url": "https://files.pythonhosted.org/packages/9a/9f/9d2d6bb57c03ddc08ddc6bb97228aa468528e034d7111e34ad90f0396f4d/django_query_inspector-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc1314a00282c1f51437ee2da6114ae49b18249e644b42931e1477fb801b1580",
          "md5": "240233e7cedf29bcbcc073dfcb6ad5a4",
          "sha256": "13632ade541aae930cc54ee24116c9f8448baa894ba23617488252c7689240e9"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "240233e7cedf29bcbcc073dfcb6ad5a4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 49762,
        "upload_time": "2021-01-06T18:43:23",
        "upload_time_iso_8601": "2021-01-06T18:43:23.470236Z",
        "url": "https://files.pythonhosted.org/packages/cc/13/14a00282c1f51437ee2da6114ae49b18249e644b42931e1477fb801b1580/django_query_inspector-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef7bd1058d3bdc0b8e8e2ccf4dd25155a89f79343e55fe8cb223623c078046a",
          "md5": "11af118f96c08101c2bae46ec679b714",
          "sha256": "a4fedb4a9bc41166136435783bba59381cd6c2876e4f80b07e48677cc567d73d"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11af118f96c08101c2bae46ec679b714",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 39049,
        "upload_time": "2021-01-12T15:50:00",
        "upload_time_iso_8601": "2021-01-12T15:50:00.946063Z",
        "url": "https://files.pythonhosted.org/packages/5e/f7/bd1058d3bdc0b8e8e2ccf4dd25155a89f79343e55fe8cb223623c078046a/django_query_inspector-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6d09b5a2aab40a8d860d34aed765ac9131ac474e3c1e5c067b601ecbfc7877b",
          "md5": "9b1b618914a18579ce5bc1285f1c4678",
          "sha256": "99b77624aa9875db0d4b7a9ff9dd480d80455403ab3037795b1f7e6c5011bbcc"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b1b618914a18579ce5bc1285f1c4678",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 39079,
        "upload_time": "2021-01-12T15:57:12",
        "upload_time_iso_8601": "2021-01-12T15:57:12.564256Z",
        "url": "https://files.pythonhosted.org/packages/f6/d0/9b5a2aab40a8d860d34aed765ac9131ac474e3c1e5c067b601ecbfc7877b/django_query_inspector-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8505ee4fef10e4f96d72c5293a64fc7f2e4f4c79cc84b5512c78fb1bd8f96b4e",
          "md5": "76c15376795c6bb4b3d4f0a10cccaab1",
          "sha256": "68b8ac42ccdd50cb7a8b3455105a75433ba8accc11a7381568e52565481dd7d2"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76c15376795c6bb4b3d4f0a10cccaab1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 43140,
        "upload_time": "2021-02-15T09:01:27",
        "upload_time_iso_8601": "2021-02-15T09:01:27.340328Z",
        "url": "https://files.pythonhosted.org/packages/85/05/ee4fef10e4f96d72c5293a64fc7f2e4f4c79cc84b5512c78fb1bd8f96b4e/django_query_inspector-1.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b9e58c3c5b78e22f61d3415cf7700165c145b4442b3b28e6b0ca9cf3393b2ba",
          "md5": "484c03c7364c36fa0d0c4b1ccc4849f7",
          "sha256": "187ae08ccce3b8fe6109d274817fef64f0830473622d7702df22aa617bf95c8a"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "484c03c7364c36fa0d0c4b1ccc4849f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 50759,
        "upload_time": "2021-03-05T09:18:21",
        "upload_time_iso_8601": "2021-03-05T09:18:21.273115Z",
        "url": "https://files.pythonhosted.org/packages/3b/9e/58c3c5b78e22f61d3415cf7700165c145b4442b3b28e6b0ca9cf3393b2ba/django_query_inspector-1.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd8ccf1f876e34e1bd4f9490a4cf50b2bec9f778d2bfe1f2d7ff2f144f4d8d2c",
          "md5": "389c613eccded548b287c9e19e556f25",
          "sha256": "ced6e63538edfa66f07b305669f6cfb3a367bc321bdeaf7808a4c0be36a8bfee"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "389c613eccded548b287c9e19e556f25",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 49661,
        "upload_time": "2021-03-07T21:34:47",
        "upload_time_iso_8601": "2021-03-07T21:34:47.066713Z",
        "url": "https://files.pythonhosted.org/packages/dd/8c/cf1f876e34e1bd4f9490a4cf50b2bec9f778d2bfe1f2d7ff2f144f4d8d2c/django_query_inspector-1.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05554591ab0c534dd2c99f6a575647b99b7f19b6e8c9f7ec94132831bbf81093",
          "md5": "129df6a35dfc8f53a17776164d851b3f",
          "sha256": "c215a5afa963bdbf7e4ca65085bc73f74874f2cbff7bde1523ffef0337be5c50"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "129df6a35dfc8f53a17776164d851b3f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 49723,
        "upload_time": "2021-03-22T10:18:24",
        "upload_time_iso_8601": "2021-03-22T10:18:24.841248Z",
        "url": "https://files.pythonhosted.org/packages/05/55/4591ab0c534dd2c99f6a575647b99b7f19b6e8c9f7ec94132831bbf81093/django_query_inspector-1.0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebf887080adc842ce664c79c97a5784bc61ccee5c2ecae0a74493886695869ad",
          "md5": "142f90417a254b396f40b7fd132365f9",
          "sha256": "6fd504fac252d0598fbc431cafa48b7b5e49ed17279298bfce46bda1f7dfddc2"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.0.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "142f90417a254b396f40b7fd132365f9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 49898,
        "upload_time": "2021-08-01T08:55:43",
        "upload_time_iso_8601": "2021-08-01T08:55:43.579872Z",
        "url": "https://files.pythonhosted.org/packages/eb/f8/87080adc842ce664c79c97a5784bc61ccee5c2ecae0a74493886695869ad/django_query_inspector-1.0.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88e986809dbed1c6e92e2b16977b6ed22a86e915488e1624bc320065af1e972e",
          "md5": "94914c74809ad8ae625a212af0488d29",
          "sha256": "42509178a5386088f519a34104e4b9f0cd3c4a96c81b2a0030643b271faf6e07"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94914c74809ad8ae625a212af0488d29",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57594,
        "upload_time": "2021-08-04T08:52:42",
        "upload_time_iso_8601": "2021-08-04T08:52:42.055101Z",
        "url": "https://files.pythonhosted.org/packages/88/e9/86809dbed1c6e92e2b16977b6ed22a86e915488e1624bc320065af1e972e/django_query_inspector-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe7f6d9340c88e0ca4226d321e4f0fcf7732ebf13d38fb20f2c6368f79e474b8",
          "md5": "c2bee4a5396af772b28bd635333adad8",
          "sha256": "76a7c46ef996d5e50a3965efa577e4237852ab265e8ce9d26fc8b5bf06a6c282"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2bee4a5396af772b28bd635333adad8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57721,
        "upload_time": "2021-08-04T09:24:10",
        "upload_time_iso_8601": "2021-08-04T09:24:10.762972Z",
        "url": "https://files.pythonhosted.org/packages/fe/7f/6d9340c88e0ca4226d321e4f0fcf7732ebf13d38fb20f2c6368f79e474b8/django_query_inspector-1.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d6233ce91a4a3ed9ee4d8af4edada931ff41c080e6e82e24a48c0115bffb73",
          "md5": "fbd51504f157776c84165d58d272cc6b",
          "sha256": "5a02b410b4c1f8512d5d860c05295d286d14ffd7912cf26d01b8b1e9ebc52f13"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbd51504f157776c84165d58d272cc6b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 60171,
        "upload_time": "2022-02-11T16:03:37",
        "upload_time_iso_8601": "2022-02-11T16:03:37.123194Z",
        "url": "https://files.pythonhosted.org/packages/b0/d6/233ce91a4a3ed9ee4d8af4edada931ff41c080e6e82e24a48c0115bffb73/django_query_inspector-1.1.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75145c42ca8811232090bdfe5b33029b11c98f6feaaee88f20940f0e0134203c",
          "md5": "c7b287d1a696b6cfa9f324426b34c63c",
          "sha256": "d171d0861ff40e63bf5f23d511868db2f5584e3616a82be555963ec0dd72e465"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7b287d1a696b6cfa9f324426b34c63c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64749,
        "upload_time": "2023-01-17T12:01:42",
        "upload_time_iso_8601": "2023-01-17T12:01:42.271684Z",
        "url": "https://files.pythonhosted.org/packages/75/14/5c42ca8811232090bdfe5b33029b11c98f6feaaee88f20940f0e0134203c/django_query_inspector-1.1.11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba421ef2a9e99948265fc71207fb94027ebf911c2b65c1f76271c9ee9e5b6182",
          "md5": "aee76a7f49f64e25b709936348c988b9",
          "sha256": "9e59e3d453f9c754f48ad6ed479a654d5fe599c21269df39985f8694f54968ca"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aee76a7f49f64e25b709936348c988b9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64766,
        "upload_time": "2023-03-17T16:06:07",
        "upload_time_iso_8601": "2023-03-17T16:06:07.141383Z",
        "url": "https://files.pythonhosted.org/packages/ba/42/1ef2a9e99948265fc71207fb94027ebf911c2b65c1f76271c9ee9e5b6182/django_query_inspector-1.1.12-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f74635931c9c987cefbfb2750471105a39f29e6246f1f6cf950eb72cb9bc2cd7",
          "md5": "0aeebefd91997f89ee3b3019feeb9d97",
          "sha256": "ba4ffec14efb5570612eb60e8952c977c8e83a5a4bcbe7798b4dac4a60e0c7b6"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0aeebefd91997f89ee3b3019feeb9d97",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57738,
        "upload_time": "2021-08-04T09:35:20",
        "upload_time_iso_8601": "2021-08-04T09:35:20.258247Z",
        "url": "https://files.pythonhosted.org/packages/f7/46/35931c9c987cefbfb2750471105a39f29e6246f1f6cf950eb72cb9bc2cd7/django_query_inspector-1.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fe8b13e066370049946a5891ffc6bf82303e9082ec001018a88cf7d1ecda3be",
          "md5": "e2b106789dd140f9e4fc7a81cfda2e3a",
          "sha256": "52e9d1ae7269d96b157757038130b1e40bf880eb0141b037a417778b633a60d2"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2b106789dd140f9e4fc7a81cfda2e3a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 57687,
        "upload_time": "2021-08-04T10:06:21",
        "upload_time_iso_8601": "2021-08-04T10:06:21.806573Z",
        "url": "https://files.pythonhosted.org/packages/3f/e8/b13e066370049946a5891ffc6bf82303e9082ec001018a88cf7d1ecda3be/django_query_inspector-1.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008a1ba8bba361b06c9443afdbaaaba27ff0a12a25289319e51e50f2a1a2c6ff",
          "md5": "aa211a34f4110f467c7d952a72bdf4a3",
          "sha256": "42ae5b7d61d9453a7f7e22ad0e65ad5d885e459b3cb9a351efd7ce26db35d29e"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa211a34f4110f467c7d952a72bdf4a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 61339,
        "upload_time": "2021-08-05T09:40:34",
        "upload_time_iso_8601": "2021-08-05T09:40:34.797920Z",
        "url": "https://files.pythonhosted.org/packages/00/8a/1ba8bba361b06c9443afdbaaaba27ff0a12a25289319e51e50f2a1a2c6ff/django_query_inspector-1.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32a861a8c6946dffacfeeaddb208b4af961ffbb9976494b355ce75b61bceeb78",
          "md5": "2afb6d5213eed41c0b3e4ec43ee98836",
          "sha256": "ffe87eeee2b0b9ded6ef783ef8888fc697fb7e66bbd0fb65ba9a9236cd4d55ef"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2afb6d5213eed41c0b3e4ec43ee98836",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 50201,
        "upload_time": "2021-08-30T15:33:37",
        "upload_time_iso_8601": "2021-08-30T15:33:37.671263Z",
        "url": "https://files.pythonhosted.org/packages/32/a8/61a8c6946dffacfeeaddb208b4af961ffbb9976494b355ce75b61bceeb78/django_query_inspector-1.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fb976a27645e15eab003a443ed81c10857c604539a50c1320de390bc1bbae34",
          "md5": "f58c32cddecd7aab069b72138e2fc318",
          "sha256": "5a53f01e3cbef50e10ab326b3ef8fa4bbac4bb686aaed3cb0d07be38a96d7edb"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f58c32cddecd7aab069b72138e2fc318",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55243,
        "upload_time": "2021-09-02T09:13:50",
        "upload_time_iso_8601": "2021-09-02T09:13:50.027677Z",
        "url": "https://files.pythonhosted.org/packages/2f/b9/76a27645e15eab003a443ed81c10857c604539a50c1320de390bc1bbae34/django_query_inspector-1.1.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e81ebfb5cfe6c85b12294f5b89a6ccbcf6dfa94246ea665d25e2a4f450ab552",
          "md5": "d667e17862432938b2eb311129c540b2",
          "sha256": "553e4be1252e35827926dc734bbe89d16b2abfc1a5b66aefb9378f78b25d3284"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d667e17862432938b2eb311129c540b2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 65880,
        "upload_time": "2021-09-02T15:08:47",
        "upload_time_iso_8601": "2021-09-02T15:08:47.314863Z",
        "url": "https://files.pythonhosted.org/packages/7e/81/ebfb5cfe6c85b12294f5b89a6ccbcf6dfa94246ea665d25e2a4f450ab552/django_query_inspector-1.1.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aa692926a54e3613ca2e3b7bbdbce7db9ff13b1fc4d707d2fba4eec52e35d27",
          "md5": "c4f4982d631d3acffad163ba4b9b2428",
          "sha256": "220dd85400ff9b8529d9ede313883e8914554e8e4e0c9b7892aaf1b9785c2990"
        },
        "downloads": -1,
        "filename": "django_query_inspector-1.1.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4f4982d631d3acffad163ba4b9b2428",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 56587,
        "upload_time": "2021-12-27T18:52:19",
        "upload_time_iso_8601": "2021-12-27T18:52:19.724363Z",
        "url": "https://files.pythonhosted.org/packages/8a/a6/92926a54e3613ca2e3b7bbdbce7db9ff13b1fc4d707d2fba4eec52e35d27/django_query_inspector-1.1.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba421ef2a9e99948265fc71207fb94027ebf911c2b65c1f76271c9ee9e5b6182",
        "md5": "aee76a7f49f64e25b709936348c988b9",
        "sha256": "9e59e3d453f9c754f48ad6ed479a654d5fe599c21269df39985f8694f54968ca"
      },
      "downloads": -1,
      "filename": "django_query_inspector-1.1.12-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aee76a7f49f64e25b709936348c988b9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 64766,
      "upload_time": "2023-03-17T16:06:07",
      "upload_time_iso_8601": "2023-03-17T16:06:07.141383Z",
      "url": "https://files.pythonhosted.org/packages/ba/42/1ef2a9e99948265fc71207fb94027ebf911c2b65c1f76271c9ee9e5b6182/django_query_inspector-1.1.12-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}