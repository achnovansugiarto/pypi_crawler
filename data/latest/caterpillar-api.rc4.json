{
  "info": {
    "author": "Luke Dupin",
    "author_email": "lukedupin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Caterpillar\n\nA light-weight, fast and scalable api solution for Django. Uses a comfy set of functionality that isn't boilerplatey or opinionated.\n\nDon't disregard Caterpillar because it's cute, it's scrapy to; with built in type conversion, session management, dead simple file handling, self documenting reports and error management. Caterpillar makes writing APIs fun.\n\n# Install Caterpillar\n\n```bash\npip3 install caterpillar-api\n```\n\n### Define your API\n\nInside your django project, create a function with a *@Cocoon* wrapper that defines your paramaters.\n\n```python\nfrom caterpillar_api import Cocoon, monarch\n\n@Cocoon( post_req=(\n            ('a', int),\n            ('b', int),\n))\ndef add( request, a, b ):\n    return monarch.resp( request, { \"c\": a + b })\n```\n\n### Add your endpoint to Django\n\nInside url.py.\n\n```python\nurlpatterns = [\n    path('add/', views.add),\n    ...\n]\n```\n\n### Test out your API\n\nNow using curl, you can post data to the API and get a JSON response.\n\n```bash\ncurl -d \"a=17&b=35\" -X POST http://127.0.0.1:8000/add/; echo\n{\"c\": 52, \"successful\": true}\n```\n\n# Why Caterpillar?\n\n* Minimum boiler-plate\n* Readable syntax\n* Crazy fast\n* Easy to use\n* Unopnionated\n\n# Client libraries\nCaterpillar doesn't leave you hanging. We have an ever growing list of client libraries to speed up your development efforts. Although you don't need a custom client side library, it sure does feel good using one.\n\n* React fetch_js\n* Qt C++/QML interface\n\n# Recipes\n\n## Required POST arguments\npost_req takes a tuple of tuples. The tuple entries define (variable name, python type). You can trust the parameter will be the expected type. If a parameter is missing from a post_req, Caterpillar will respond with an error before the endpoint is called.\n\n\n```python\n@Cocoon( post_req=(\n            ('name', str),\n            ('age', int),\n))\ndef add_user( request, name, age ):\n    usr = User.objects.create( name=name, age=age )\n    return monarch.resp( request, { 'id': usr.id })\n```\n\n## Optional POST arguments\npost_opt uses the same format as post_req. Fields can exist or not. If a field isn't present, the default paramater value or None is used.\n\n```python\n@Cocoon(\n    post_req=(\n            ('uid', str),\n    ),\n    post_opt=(\n        ('name', str),\n        ('age', int),\n        ('type', str, 'ADMIN'),\n    )\n)\ndef modify_user( request, uid, name, age, type ):\n    usr = User.objects.get(uid=uid)\n    if name is not None:\n        usr.name = name\n    if age is not None:\n        usr.age = age\n    usr.type = type\n    usr.save()\n    \n    return monarch.resp( request, {})\n```\n\n## Optional POST using kwargs\npost_opt argument checking using if statements does work, but it's a little ugly. It also creates a lot of code. The same operation can be done with kwargs.\n\n```python\n@Cocoon(\n    post_req=(\n            ('uid', str),\n    ),\n    post_opt=(\n            ('name', str),\n            ('age', int),\n            ('type', str, 'ADMIN'),\n    )\n)\ndef modify_user( request, uid, **kwargs ):\n    usr = User.objects.get(uid=uid)\n\n    for key in ('name', 'age', 'type'):\n        if kwargs[key] is not None:\n            usr.__setattr__( key, kwargs[key] )\n    usr.save()\n\n    return monarch.resp( request, {})\n```\n\n## Meta data\n@Coccon can provide meta data as an argument. This is handy because it can further reduce duplicate logic. Parameters are defined in one place only. Take the above example, now using meta data.\n\n```python\n@Cocoon(\n    post_req=(\n            ('uid', str),\n    ),\n    post_opt=(\n            ('name', str),\n            ('age', int),\n            ('type', str),\n    ),\n    meta=\"meta\"\n)\ndef modify_user( request, uid, meta, **kwargs ):\n    usr = User.objects.get(uid=uid)\n\n    for key, _ in meta.post_opt:\n        if kwargs[key] is not None:\n            usr.__setattr__( key, kwargs[key] )\n    usr.save()\n\n    return monarch.resp( request, {})\n```\n\n## Authenticate user and check login status\nCaterpillar also helps you work with session information. Session data can be used to authenticate a user and confirm their login state.\n\n```python\nfrom django.forms import model_to_dict\n\n@Cocoon( post_req=(\n            ('uid', str),\n            ('password', str),\n))\ndef login( request, uid, password ):\n    if (usr := getByUid(User, uid)) is None:\n        return monarch.fail( request, \"Couldn't find user\")\n\n    if usr.password != password:\n        return monarch.fail( request, \"Invalid password\")\n\n    # Store the user's info into the session, this effectively logs the user in\n    request.session['usr'] = model_to_dict(usr)\n    return monarch.resp( request, {})\n\n\n@Cocoon(\n    sess_req=[('usr', dict)]\n)\ndef logout( request, usr ):\n    del request.session['usr']\n    return monarch.resp( request, {})\n\n\n# sess_req['usr'] will only allow this endpoint to be called by users that are logged in\n@Cocoon(\n    sess_req=[('usr', dict)]\n)\ndef user_details( request, usr ):\n    usr = getByUid(User, usr['uid'])\n    return monarch.resp( request, model_to_dict(usr))\n```\n\nIf optional session checking is required, you can always use sess_opt\n\n```python\n@Cocoon(\n    sess_opt=[('usr', dict)]\n)\ndef is_online( request, usr ):\n    return monarch.resp( request, { 'online': usr is not None })\n```\n\n## GET data from the URL\nThe same way POST can have required and optional arguments, GET variables can be accessed with @Cocoon.\n\n```python\n@Cocoon(\n    get_req=[('video_code', str)]\n)\ndef get_video( request, usr, video_code ):\n    #http://server.com/?video_code=XXX\n    print(video_code) # Prints XXX\n    return monarch.resp( request, {'video_info': 'info'})\n```\n\n## Read a file\nCaterpillar seamlessly handles file uploads as parameters. Files, like GET/POST, can be required or optional. The contents of the uploaded file can be read by calling .data(). If a hash of the data is required .hash() will return a sha256 hash.\n\n```python\n@Cocoon(\n    sess_req=[('usr', dict)],\n    file_req=[\"logo\"]\n)\ndef upload_logo( request, usr, logo ):\n    if not s3.put_data(logo.data(), usr['uid']):\n        return monarch.fail( request, \"Couldn't upload to S3\")\n\n    return monarch.resp( request, {})\n```\n\n## Need to call an endpoint directly?\nNot a problem; Caterpillar will happily get out of your way. Passing None for the request parameter will tell Caterpillar you are using the functions directly. Instead of a HttpResponse, you'll get the dict of the response.\n\n```python\n@Cocoon(\n    post_req=(\n            ('a', int),\n            ('b', int),\n    )\n)\ndef add( request, a, b ):\n    return monarch.resp( request, { \"c\": a + b })\n\nadd( None, 4, 3) # Returns { \"c\": 12 }\nadd( None, \"cat\", \"fish\") # Returns { \"c\": \"catfish\" } # Type checking isn't done when calling directly\n```\n\n## Where are PUT and DELETE?\nThey didn't make the cut. PUT and DELETE don't add any new functionality over update and remove endpoints. PUT/DELETE aren't fundimental to Django and since Caterpillar aims to be as lightweight as possible, this feature is out of scope.\n\n# @Cocoon\n\nCocoon is a function decorator that defines endpoint arguments and data types. \n\n* **sess_opt** - Optional session parameters. Array/Tuple of tuples. ('name', type) or ('name', type, default)\n* **sess_req** - Required session parameters. Array/Tuple of tuples. ('name', type).\n* **post_opt** - Optional POST parameters. Array/Tuple of tuples. ('name', type) or ('name', type, default).\n* **post_req** - Required POST parameters. Array/Tuple of tuples. ('name', type).\n* **get_opt** - Optional GET parameters. Array/Tuple of tuples. ('name', type) or ('name', type, default).\n* **get_req** - Required GET parameters. Array/Tuple of tuples. ('name', type).\n* **file_opt** - Optional file parameters. Returns the ApiFile object with helper functions data() and hash() Array/Tuple of names. ('name').\n* **file_req** - Required file parameters. Returns the ApiFile object with helper functions data() and hash() Array/Tuple of names. ('name').\n* **files** - 'name' which recieves an array of Apifile classes. Handy for uploading arrays of unnamed filess.\n* **meta** - 'name' which recieves a CaterpillarMeta object. All of the Cocoon parameters are represented along with an 'args' dictionary which holds all data passed to this endpoint.\n\n### @Cocoon Types\n\n* str\n* int\n* float\n* bool - Can take true/false strings or true/false values or ints, 0 !0\n* dict - A dictionary of key value pairs. JSON\n* list - An array of parameters. Can take a string of delenated elements.\n\n### CaterpillarMeta class\n* **name** - The name of the variable.\n* **args** - dict of all posted data.\n* **sess_opt** - Contents of @Cocoon value for this param.\n* **sess_req** - Contents of @Cocoon value for this param.\n* **post_opt** - Contents of @Cocoon value for this param.\n* **post_req** - Contents of @Cocoon value for this param.\n* **get_opt** - Contents of @Cocoon value for this param.\n* **get_req** - Contents of @Cocoon value for this param.\n* **file_opt** - Contents of @Cocoon value for this param.\n* **file_req** - Contents of @Cocoon value for this param.\n* **files** - Contents of @Cocoon value for this param.\n\n\n# monarch functions\nMonarch functions provide handy success failed responses. If the standard response format isn't flexible enough, you can create your own using util.raw()\n\n```python\nfrom caterpillar_api import Cocoon, monarch\n```\n\n## monarch.resp\nA successful response. 'successful' = true is added to the response and then an HttpResponse is generated.\n\n* request - The request variable passed by Django.\n* response - A dict key/value pair.\n\n```python\nreturn monarch.resp( request, { 'key': 'value' })\n```\n\n## monarch.fail\nA fail response. 'successful' = false is added to the response and then an HttpResponse is generated.\n\n* request - The request variable passed by Django.\n* reason - A string \"reason\" why the error occurred.\n* code=\"\" - An optional error code.\n* extra={} - A dict of any other information that should be passed.\n\n```python\nreturn monarch.fail( request, \"Invalid access\")\nreturn monarch.fail( request, \"Invalid access\", code=\"ERR_CODE_A\")\nreturn monarch.fail( request, \"Invalid access\", extra={'info': 'data'})\n```\n\n## util.raw\nutil.raw provides HttpResponse logic monarch.resp and monarch.fail use to communicate with Django. This function should only be used in exceptional cases.\n\n* objs - String of response.\n* status - Status code\n* content - content_type of response\n* callback=None - Optional JSON-P support\n\n```python\nreturn util.raw( '{\"key\": 8}', 200, content='application/json' )\n```\n\n# JSON-P support?\nYes. Caterpillar provides JSON-P support out of the box by passing a GET variable callback=xxx. If the callback is passed as POST or cannot use the name 'callback' to pass the callback name, a custom resp/err function set should be created.\n\n```python\n# http://xxx.com/endpoint?callback=ham_eggs\n# Yields a response with JSON-P\nham_eggs( {\"key\": 917 })\n```\n\n# Common errors\nNo one likes bugs in their code, but Caterpillars are bugs and sometimes it encounters other bugs.\n\n## TypeError: xxx() got an unexpected keyword argument 'xxx'\nCaterpillar works by injecting named variables directly into functions. If the variable name doesn't exist in the paramaters of the function, you'll see a TypeError.\n\n```python\n@Cocoon( post_req=(\n            ('a', int),\n            ('b', int),\n))\ndef add( request, a ): # TypeError Missing variable 'b'\n    return monarch.resp( request, { \"c\": a })\n```\n\nThere are two possible solutions. Add all variables or add **kwargs at the end of your parameters.\n```python\n# Solution of adding all variables\n@Cocoon( post_req=(\n            ('a', int),\n            ('b', int),\n))\ndef add( request, a, b):\n    return monarch.resp( request, { \"c\": a + b })\n\n# Solution adding **kwargs\n@Cocoon( post_req=(\n            ('a', int),\n            ('b', int),\n))\ndef add( request, a, **kwargs ):\n    return monarch.resp( request, { \"c\": a + kwargs['b'] })\n```\n\n### {\"successful\": false, \"reason\": \"Missing required argument(s): GET[] POST['b'] SESS[] FILE[]\", \"code\": \"\"}\nIf required parameters are missing, the endpoint will not be called. A message similar to the above will be sent instead. Caterpillar attempts to provide detailed information for any GET / POST / SESS / FILE data that is required and missing.\n\n# Testing\nCaterpillar has limited testing support. Please see the contribution section to get involved.\n\n# Contribute\nIf you love Caterpillar as much as we do, there are lots of ways to get involved.\n\n## Self documenting reports\n\nCaterpiller could use reflections to generated API reports. If you're interested in giving Caterpillar it's documentation butterfly wings, please contact us.\n\n## Extended type checking for dict arguments\n\nWhen passing a 'dict' argument type to Cocoon, there needs to be the ability to enforce an expectation of structure.\n\n## Client libraries for all the major libraries\n\nLove Angular? Flutter? Vue? Bootstrap? Android? IOS? Caterpillar needs native client libraries for them all.\n\n## Website or graphic design?\n\nWe'd love to have a real website. If you want to help give Caterpillar a personality, please contact us.\n\n## Maybe it's something really cool we don't even know about\n\nDo you have ideas for new awesome features? Please contact lukedupin about becoming a contributer.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lukedupin/caterpillar",
    "keywords": "DJANGO,API,REST,JSON,JSONP,JSON-P",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "caterpillar-api",
    "package_url": "https://pypi.org/project/caterpillar-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/caterpillar-api/",
    "project_urls": {
      "Homepage": "https://github.com/lukedupin/caterpillar"
    },
    "release_url": "https://pypi.org/project/caterpillar-api/1.51/",
    "requires_dist": [
      "Django"
    ],
    "requires_python": "",
    "summary": "🐛 Caterpillar Api, field management for Django without the boiler-plate.",
    "version": "1.51",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12316092,
  "releases": {
    "1.44": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb001305cba443c691cc6f7f3db32cc5ae66f2815f270224439d7177d134b8b0",
          "md5": "57711b38c4958ad10c254615179c245d",
          "sha256": "913e99d2088532266f9a9b789ae0c1bb090a5ce4397993bad0485a645e10a2ea"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.44-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57711b38c4958ad10c254615179c245d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10393,
        "upload_time": "2021-11-16T06:06:40",
        "upload_time_iso_8601": "2021-11-16T06:06:40.568840Z",
        "url": "https://files.pythonhosted.org/packages/fb/00/1305cba443c691cc6f7f3db32cc5ae66f2815f270224439d7177d134b8b0/caterpillar_api-1.44-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b74a469a50b99a38a7de1bb46b48c115ee24be3207b759b220d44109b8e6025",
          "md5": "202c3a0f0b84bf5ec3cf1c2481c026b5",
          "sha256": "886fdb857022cd3a8317a0de39860318067166962b36e2549049c6fe75d6a081"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.44.tar.gz",
        "has_sig": false,
        "md5_digest": "202c3a0f0b84bf5ec3cf1c2481c026b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13913,
        "upload_time": "2021-11-16T06:06:45",
        "upload_time_iso_8601": "2021-11-16T06:06:45.687115Z",
        "url": "https://files.pythonhosted.org/packages/5b/74/a469a50b99a38a7de1bb46b48c115ee24be3207b759b220d44109b8e6025/caterpillar_api-1.44.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.47": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58d6cc9744aba75a04de29c279dc53a0649e55ab4d7d2ef7a43e8cf3d116b609",
          "md5": "a0ef7b999f4684b3d6b9d82ec95bbe6d",
          "sha256": "78183246e24589c91d1f6f4d780190f0378a6e6727791d8caf4d049b7ec1fb7f"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.47-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0ef7b999f4684b3d6b9d82ec95bbe6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10643,
        "upload_time": "2021-11-16T06:06:43",
        "upload_time_iso_8601": "2021-11-16T06:06:43.736515Z",
        "url": "https://files.pythonhosted.org/packages/58/d6/cc9744aba75a04de29c279dc53a0649e55ab4d7d2ef7a43e8cf3d116b609/caterpillar_api-1.47-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "160d22634b6f89a54eca7e2faa02a76e5fbeb286a24dd5d81de6ff9e331c3de5",
          "md5": "72120f640be6c7f7a92e0adfb6c9290e",
          "sha256": "2abe6a96b98533c416b2e4c188ffeee0b4f45fffb12b31a4f3d06957ebd5752c"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.47.tar.gz",
        "has_sig": false,
        "md5_digest": "72120f640be6c7f7a92e0adfb6c9290e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14285,
        "upload_time": "2021-11-16T06:06:47",
        "upload_time_iso_8601": "2021-11-16T06:06:47.533461Z",
        "url": "https://files.pythonhosted.org/packages/16/0d/22634b6f89a54eca7e2faa02a76e5fbeb286a24dd5d81de6ff9e331c3de5/caterpillar_api-1.47.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.50": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0afad14f53bbd9a3c52bbd1cc00042e354dd99c6c92342e7417c34418626ae2",
          "md5": "c8e0ba99cb7d54865fec3cc6ba7c680e",
          "sha256": "fd3c4d287853e67e08234682e4267b63d3ea7ee18ab69c340a5b08476c602fb7"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.50-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8e0ba99cb7d54865fec3cc6ba7c680e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10652,
        "upload_time": "2021-11-16T17:09:14",
        "upload_time_iso_8601": "2021-11-16T17:09:14.640888Z",
        "url": "https://files.pythonhosted.org/packages/c0/af/ad14f53bbd9a3c52bbd1cc00042e354dd99c6c92342e7417c34418626ae2/caterpillar_api-1.50-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00b34800728de893d7dfc7a012878d8a67ea0362395f52371ce8ef33e6efbbcf",
          "md5": "76b749311189b24aaf12bd12f91a3fc9",
          "sha256": "d4e6d2dec62e7bf9640442022b31142a6e7173be934d4c82e2c50bbd99195348"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.50.tar.gz",
        "has_sig": false,
        "md5_digest": "76b749311189b24aaf12bd12f91a3fc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14318,
        "upload_time": "2021-11-16T17:09:16",
        "upload_time_iso_8601": "2021-11-16T17:09:16.454472Z",
        "url": "https://files.pythonhosted.org/packages/00/b3/4800728de893d7dfc7a012878d8a67ea0362395f52371ce8ef33e6efbbcf/caterpillar_api-1.50.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.51": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a9c3fd35d38767bc4ac99c1c3b814ec45cd0d2bd9e4eda925c741de32fe5967",
          "md5": "76e243b69c66ba103612758029fc7667",
          "sha256": "4bfe4b759de521998d02e7ff9f954a1fcb86a017036693f6a08ba39b0854edad"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.51-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76e243b69c66ba103612758029fc7667",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10696,
        "upload_time": "2021-12-15T19:57:04",
        "upload_time_iso_8601": "2021-12-15T19:57:04.199053Z",
        "url": "https://files.pythonhosted.org/packages/8a/9c/3fd35d38767bc4ac99c1c3b814ec45cd0d2bd9e4eda925c741de32fe5967/caterpillar_api-1.51-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09b9c8a310be5e23060d69ca795ccc3dc5ce6aa22fc165361b72cab73d12869c",
          "md5": "da9661a68b9ea730e9eff5b3776c6709",
          "sha256": "4c70d29737219ad79bffc617e7de287ae4685d6bddbbee4ac121ae7ab898c3c5"
        },
        "downloads": -1,
        "filename": "caterpillar_api-1.51.tar.gz",
        "has_sig": false,
        "md5_digest": "da9661a68b9ea730e9eff5b3776c6709",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14377,
        "upload_time": "2021-12-15T19:57:06",
        "upload_time_iso_8601": "2021-12-15T19:57:06.366654Z",
        "url": "https://files.pythonhosted.org/packages/09/b9/c8a310be5e23060d69ca795ccc3dc5ce6aa22fc165361b72cab73d12869c/caterpillar_api-1.51.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a9c3fd35d38767bc4ac99c1c3b814ec45cd0d2bd9e4eda925c741de32fe5967",
        "md5": "76e243b69c66ba103612758029fc7667",
        "sha256": "4bfe4b759de521998d02e7ff9f954a1fcb86a017036693f6a08ba39b0854edad"
      },
      "downloads": -1,
      "filename": "caterpillar_api-1.51-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76e243b69c66ba103612758029fc7667",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10696,
      "upload_time": "2021-12-15T19:57:04",
      "upload_time_iso_8601": "2021-12-15T19:57:04.199053Z",
      "url": "https://files.pythonhosted.org/packages/8a/9c/3fd35d38767bc4ac99c1c3b814ec45cd0d2bd9e4eda925c741de32fe5967/caterpillar_api-1.51-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09b9c8a310be5e23060d69ca795ccc3dc5ce6aa22fc165361b72cab73d12869c",
        "md5": "da9661a68b9ea730e9eff5b3776c6709",
        "sha256": "4c70d29737219ad79bffc617e7de287ae4685d6bddbbee4ac121ae7ab898c3c5"
      },
      "downloads": -1,
      "filename": "caterpillar_api-1.51.tar.gz",
      "has_sig": false,
      "md5_digest": "da9661a68b9ea730e9eff5b3776c6709",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14377,
      "upload_time": "2021-12-15T19:57:06",
      "upload_time_iso_8601": "2021-12-15T19:57:06.366654Z",
      "url": "https://files.pythonhosted.org/packages/09/b9/c8a310be5e23060d69ca795ccc3dc5ce6aa22fc165361b72cab73d12869c/caterpillar_api-1.51.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}