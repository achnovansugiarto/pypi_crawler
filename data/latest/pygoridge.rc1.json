{
  "info": {
    "author": "Maksim Ryndin",
    "author_email": "ryndin@atsaero.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Natural Language :: Russian",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Pygoridge: Python-to-Golang IPC bridge, python client for Goridge\n=================================================================\n[![GoDoc](https://godoc.org/github.com/spiral/goridge?status.svg)](https://godoc.org/github.com/spiral/goridge)\n\n\nPygoridge is a Python-to-Golang codec library which works over sockets and Golang net/rpc package.\nThis is a python port of php client for an excellent [Goridge](https://github.com/spiral/goridge) library.\nThe library allows you to call Go service methods from Python with minimal footprint, structures and `[]byte` support.\n\n\nAlso Pygoridge includes `Worker` class to use in worker processes with https://github.com/spiral/roadrunner - high-performance application server, load-balancer and process manager written in Golang.\n\nFeatures\n--------\n - no external dependencies\n - can be used with [RoadRunner](https://github.com/spiral/roadrunner) to create CPU-intensive servers with simple sequential python workers (no multiprocessing module required). This is really helpful to overcome GIL.\n\nInstallation\n------------\n```\n$ go get \"github.com/spiral/goridge\"\n```\n```\n$ pip install pygoridge\n```\n\nExample: python client calls go server methods\n----------------------------------------------\n\n```python\nfrom pygoridge import create_relay, RPC, SocketRelay\n\nrpc = RPC(SocketRelay(\"127.0.0.1\", 6001))\n\n# or, using factory\ntcp_relay = create_relay(\"tcp://127.0.0.1:6001\")\nunix_relay = create_relay(\"unix:///tmp/rpc.sock\")\nstream_relay = create_relay(\"pipes\")\n\nprint(rpc(\"App.Hi\", \"Antony\"))\nrpc.close()     # close underlying socket connection\n\n# or using as a context manager\nwith RPC(tcp_relay) as rpc:\n    print(rpc(\"App.Hi\", \"Antony, again\"))\n```\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/spiral/goridge\"\n    \"net\"\n    \"net/rpc\"\n)\n\ntype App struct{}\n\nfunc (s *App) Hi(name string, r *string) error {\n    *r = fmt.Sprintf(\"Hello, %s!\", name)\n    return nil\n}\n\nfunc main() {\n    ln, err := net.Listen(\"tcp\", \":6001\")\n    if err != nil {\n        panic(err)\n    }\n\n    rpc.Register(new(App))\n\n    for {\n        conn, err := ln.Accept()\n        if err != nil {\n            continue\n        }\n        go rpc.ServeCodec(goridge.NewCodec(conn))\n    }\n}\n```\n\nExample: go http server (RoadRunner) with python workers\n--------------------------------------------------------\n\nYou can download latest RoadRunner binary from [releases page](https://github.com/spiral/roadrunner/releases).\n\nSee also [`examples`](./examples).\n\n```sh\ncd examples/roadrunner/http_server/\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n```\n\nWorker class\n\n```python\nfrom functools import partial\n\nimport ujson\nfrom pygoridge import create_relay, Worker\n\n\njson_dumps = partial(\n    ujson.dumps, ensure_ascii=False,\n    escape_forward_slashes=False)\njson_loads = ujson.loads\n\n\nclass HTTPWorker(Worker):\n\n    def hello(self, headers):\n        return headers, {\"X-Server\": \"RoadRunner with python workers\"}\n\n\nif __name__ == \"__main__\":\n    rl = create_relay(\"pipes\")\n    worker = HTTPWorker(rl, json_encoder=json_dumps, json_decoder=json_loads)\n\n    while True:\n        context, body = worker.receive()\n        if context is None:\n            continue\n        http_headers = json_loads(context.tobytes())\n        response, response_headers = worker.hello(http_headers)\n        worker.send(\n           json_dumps(response).encode(\"utf-8\"),\n           response_headers\n        )\n```\n\nRun RoadRunner server\n```sh\ncd examples/roadrunner/http_server/\n./rr serve -d -v\n```\n\nMake http request to get request headers back as a response body\n```sh\ncurl 'http://localhost:8080/' --compressed\n```\n\nRoadRunner is highly customizable and extendable so you can even write your own plugin for it with required API protocol (see for example [php-grpc server](https://github.com/spiral/php-grpc)).\n\n\nCustom encoders/decoders for faster json processing\n---------------------------------------------------\n\n```python\nfrom pygoridge.json import json_dumps, json_loads\n\n\n# you can also provide custom json encoder for faster marshalling\nrpc = RPC(tcp_relay, json_encoder=json_dumps, json_decoder=json_loads)\n```\n\nLicense\n-------\n\nThe MIT License (MIT). Please see [`LICENSE`](./LICENSE) for more information.\n\n\nDevelopment\n-----------\n\n### Run tests\n\n```sh\ndocker-compose -f ./goridge/tests/docker-compose.yml up -d\ndocker-compose -f tests/rr_test_app/docker-compose.yml up -d\npython3 -m unittest discover -s tests\n```\n\n### Run linter\n\n```\npip install flake8\nflake8 pygoridge\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/atsaero/pygoridge",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygoridge",
    "package_url": "https://pypi.org/project/pygoridge/",
    "platform": "",
    "project_url": "https://pypi.org/project/pygoridge/",
    "project_urls": {
      "Homepage": "https://github.com/atsaero/pygoridge"
    },
    "release_url": "https://pypi.org/project/pygoridge/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python-Golang IPC bridge, python client for Goridge",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8217162,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64386eee904b03b666b6bb7f32efc44794c46c0204d99cea06ae11828b2219bd",
          "md5": "6a74541f4ab369a17369fdec14110c1c",
          "sha256": "43bc4026dde7484d949fc87626285f3e9866ff10aa68636bc9c8032c113f0775"
        },
        "downloads": -1,
        "filename": "pygoridge-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a74541f4ab369a17369fdec14110c1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11040,
        "upload_time": "2020-09-18T13:27:48",
        "upload_time_iso_8601": "2020-09-18T13:27:48.203696Z",
        "url": "https://files.pythonhosted.org/packages/64/38/6eee904b03b666b6bb7f32efc44794c46c0204d99cea06ae11828b2219bd/pygoridge-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83a2310526cf5d81b6934dfe6b5c8d044b3e5a0b3af76dcc3ff130d604dd8c8b",
          "md5": "f6e7e7baaeb21a23061392d22a1fccdc",
          "sha256": "b4927aa95b81d0d234f3da52ace982143523bf234c8a64c614f7a8eacfc84390"
        },
        "downloads": -1,
        "filename": "pygoridge-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f6e7e7baaeb21a23061392d22a1fccdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10180,
        "upload_time": "2020-09-18T13:27:51",
        "upload_time_iso_8601": "2020-09-18T13:27:51.270777Z",
        "url": "https://files.pythonhosted.org/packages/83/a2/310526cf5d81b6934dfe6b5c8d044b3e5a0b3af76dcc3ff130d604dd8c8b/pygoridge-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64386eee904b03b666b6bb7f32efc44794c46c0204d99cea06ae11828b2219bd",
        "md5": "6a74541f4ab369a17369fdec14110c1c",
        "sha256": "43bc4026dde7484d949fc87626285f3e9866ff10aa68636bc9c8032c113f0775"
      },
      "downloads": -1,
      "filename": "pygoridge-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a74541f4ab369a17369fdec14110c1c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11040,
      "upload_time": "2020-09-18T13:27:48",
      "upload_time_iso_8601": "2020-09-18T13:27:48.203696Z",
      "url": "https://files.pythonhosted.org/packages/64/38/6eee904b03b666b6bb7f32efc44794c46c0204d99cea06ae11828b2219bd/pygoridge-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83a2310526cf5d81b6934dfe6b5c8d044b3e5a0b3af76dcc3ff130d604dd8c8b",
        "md5": "f6e7e7baaeb21a23061392d22a1fccdc",
        "sha256": "b4927aa95b81d0d234f3da52ace982143523bf234c8a64c614f7a8eacfc84390"
      },
      "downloads": -1,
      "filename": "pygoridge-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f6e7e7baaeb21a23061392d22a1fccdc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10180,
      "upload_time": "2020-09-18T13:27:51",
      "upload_time_iso_8601": "2020-09-18T13:27:51.270777Z",
      "url": "https://files.pythonhosted.org/packages/83/a2/310526cf5d81b6934dfe6b5c8d044b3e5a0b3af76dcc3ff130d604dd8c8b/pygoridge-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}