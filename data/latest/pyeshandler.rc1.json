{
  "info": {
    "author": "Mohammed Mousa",
    "author_email": "m.khadher@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Logging"
    ],
    "description": "Python Elasticsearch Log handler\n\n********************************\n\nThis library provides an Elasticsearch logging appender compatible with the python standard `logging <https://docs.python.org/2/library/logging.html>`_ library.\n\n\n\nThis library is a fork of `https://github.com/cmanaha/python-elasticsearch-logger <https://github.com/cmanaha/python-elasticsearch-logger>`_ Thanks to Carlos Manzanedo Rueda for starting this library.\n\n\n\nThe code source is in github at `https://github.com/mkhadher/python-elasticsearch-logger <https://github.com/mkhadher/python-elasticsearch-logger>`_\n\n\n\nInstallation\n\n============\n\nInstall using pip\n\n\n\n.. code-block::\n\n\n\n    pip install PYESHandler\n\n\n\nRequirements Python 2\n\n=====================\n\nThis library requires the following dependencies\n\n - elasticsearch\n\n - requests\n\n - enum\n\n\n\nRequirements Python 3\n\n=====================\n\nThis library requires the following dependencies\n\n - elasticsearch\n\n - requests\n\n\n\nAdditional requirements for Kerberos support\n\n============================================\n\nAdditionally, the package support optionally kerberos authentication by adding the following dependecy\n\n - requests-kerberos\n\n\n\nAdditional requirements for AWS IAM user authentication (request signing)\n\n=========================================================================\n\nAdditionally, the package support optionally AWS IAM user authentication by adding the following dependecy\n\n - requests-aws4auth\n\n\n\nUsing the handler in  your program\n\n==================================\n\nTo initialise and create the handler, just add the handler to your logger as follow ::\n\n\n\n    from pyeslogging.handlers import PYESHandler\n\n    handler = PYESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n\n                               auth_type=PYESHandler.AuthType.NO_AUTH,\n\n                               es_index_name=\"my_python_index\")\n\n    log = logging.getLogger(\"PythonTest\")\n\n    log.setLevel(logging.INFO)\n\n    log.addHandler(handler)\n\n\n\nYou can add fields upon initialisation, providing more data of the execution context ::\n\n\n\n    from pyeslogging.handlers import PYESHandler\n\n    handler = PYESHandler(hosts=[{'host': 'localhost', 'port': 9200}],\n\n                               auth_type=PYESHandler.AuthType.NO_AUTH,\n\n                               es_index_name=\"my_python_index\",\n\n                               es_additional_fields={'App': 'MyAppName', 'Environment': 'Dev'})\n\n    log = logging.getLogger(\"PythonTest\")\n\n    log.setLevel(logging.INFO)\n\n    log.addHandler(handler)\n\n\n\nThis additional fields will be applied to all logging fields and recorded in elasticsearch\n\n\n\nTo log, use the regular commands from the logging library ::\n\n\n\n    log.info(\"This is an info statement that will be logged into elasticsearch\")\n\n\n\nYour code can also dump additional extra fields on a per log basis that can be used to instrument\n\noperations. For example, when reading information from a database you could do something like::\n\n\n\n    start_time = time.time()\n\n    database_operation()\n\n    db_delta = time.time() - start_time\n\n    log.debug(\"DB operation took %.3f seconds\" % db_delta, extra={'db_execution_time': db_delta})\n\n\n\nThe code above executes the DB operation, measures the time it took and logs an entry that contains\n\nin the message the time the operation took as string and for convenience, it creates another field\n\ncalled db_execution_time with a float that can be used to plot the time this operations are taking using\n\nKibana on top of elasticsearch\n\n\n\nInitialisation parameters\n\n=========================\n\nThe constructors takes the following parameters:\n\n - hosts:  The list of hosts that elasticsearch clients will connect, multiple hosts are allowed, for example ::\n\n\n\n    [{'host':'host1','port':9200}, {'host':'host2','port':9200}]\n\n\n\n\n\n - auth_type: The authentication currently support PYESHandler.AuthType = NO_AUTH, BASIC_AUTH, KERBEROS_AUTH\n\n - auth_details: When PYESHandler.AuthType.BASIC_AUTH or \"BASIC_AUTH\" string is used this argument must contain a tuple of string with the user and password that will be used to authenticate against the Elasticsearch servers, for example a tuple  ('User','Password') or a dictionary {\"username\": \"my_username\",\"password\": \"my_fancy_password\"}\n\n - aws_secret_key: When ``PYESHandler.AuthType.AWS_SIGNED_AUTH`` or \"AWS_SIGNED_AUTH\" string is used this argument must contain the AWS secret key of the  the AWS IAM user\n\n - aws_region: When ``PYESHandler.AuthType.AWS_SIGNED_AUTH`` or \"AWS_SIGNED_AUTH\" string is used this argument must contain the AWS region of the  the AWS Elasticsearch servers, for example ``'us-east'``\n\n - use_ssl: A boolean that defines if the communications should use SSL encrypted communication\n\n - verify_ssl: A boolean that defines if the SSL certificates are validated or not\n\n - buffer_size: An int, Once this size is reached on the internal buffer results are flushed into ES\n\n - flush_frequency_in_sec: A float representing how often and when the buffer will be flushed\n\n - es_index_name: A string with the prefix of the elasticsearch index that will be created. Note a date with\n\n   YYYY.MM.dd, ``python_logger`` used by default\n\n - index_name_frequency: The frequency to use as part of the index naming. Currently supports\n\n   ``ElasticECSHandler.IndexNameFrequency.DAILY``, ``ElasticECSHandler.IndexNameFrequency.WEEKLY``,\n\n   ``ElasticECSHandler.IndexNameFrequency.MONTHLY``, ``ElasticECSHandler.IndexNameFrequency.YEARLY`` and\n\n   ``ElasticECSHandler.IndexNameFrequency.NEVER``. By default the daily rotation is used.\n\n   is used\n\n - es_doc_type: A string with the name of the document type that will be used ``python_log`` used by default\n\n - es_additional_fields: A dictionary with all the additional fields that you would like to add to the logs\n\n\n\nDjango Integration\n\n==================\n\nIt is also very easy to integrate the handler to `Django <https://www.djangoproject.com/>`_ And what is even\n\nbetter, at DEBUG level django logs information such as how long it takes for DB connections to return so\n\nthey can be plotted on Kibana, or the SQL statements that Django executed. ::\n\n\n\n    from pyeslogging.handlers import PYESHandler\n\n    LOGGING = {\n\n        'version': 1,\n\n        'disable_existing_loggers': False,\n\n        'handlers': {\n\n            'file': {\n\n                'level': 'DEBUG',\n\n                'class': 'logging.handlers.RotatingFileHandler',\n\n                'filename': './debug.log',\n\n                'maxBytes': 102400,\n\n                'backupCount': 5,\n\n            },\n\n            'elasticsearch': {\n\n                'level': 'DEBUG',\n\n                'class': 'pyeslogging.handlers.PYESHandler',\n\n                'hosts': [{'host': 'localhost', 'port': 9200}],\n\n                'es_index_name': 'my_python_app',\n\n                'es_additional_fields': {'App': 'Test', 'Environment': 'Dev'},\n\n                'auth_type': PYESHandler.AuthType.NO_AUTH,\n\n                'use_ssl': False,\n\n            },\n\n        },\n\n        'loggers': {\n\n            'django': {\n\n                'handlers': ['file','elasticsearch'],\n\n                'level': 'DEBUG',\n\n                'propagate': True,\n\n            },\n\n        },\n\n    }\n\n\n\nThere is more information about how Django logging works in the\n\n`Django documentation <https://docs.djangoproject.com/en/1.9/topics/logging//>`_\n\n\n\nRead logging JSON Config File\n\n=============================\n\nThe below example can be used by a flask app or any python script. This example shows how to configure logging logger for file and elasticsearch logging using logging json config file.\n\n\n\n``logging.json`` ::\n\n\n\n    {\n\n       \"version\":1,\n\n       \"disable_existing_loggers\":true,\n\n       \"formatters\":{\n\n          \"standard\":{\n\n             \"format\":\"%(asctime)s - %(levelname)s - %(threadName)s - %(name)s - %(message)s\"\n\n          }\n\n       },\n\n       \"handlers\":{\n\n          \"file\":{\n\n             \"level\":\"DEBUG\",\n\n             \"class\":\"logging.handlers.TimedRotatingFileHandler\",\n\n             \"formatter\":\"standard\",\n\n             \"filename\":\"./log_file.txt\",\n\n             \"when\":\"midnight\",\n\n             \"backupCount\":25\n\n          },\n\n          \"elasticsearch\":{\n\n             \"level\":\"DEBUG\",\n\n             \"class\":\"pyeslogging.handlers.PYESHandler\",\n\n             \"hosts\": [{\"host\": \"my.elastic.domain.com\", \"port\": 9243}],\n\n             \"es_index_name\":\"PYESLogger\",\n\n             \"auth_type\": \"BASIC_AUTH\",\n\n             \"auth_details\": {\"username\": \"my_username\",\"password\": \"my_fancy_password\"},\n\n             \"use_ssl\":true,\n\n             \"index_name_frequency\": \"monthly\",\n\n             \"verify_ssl\": true\n\n          }\n\n       },\n\n       \"root\":{\n\n          \"handlers\":[\n\n             \"file\",\n\n             \"elasticsearch\"\n\n          ],\n\n          \"level\":\"DEBUG\",\n\n          \"propagate\":false\n\n       }\n\n    }\n\n\n\n``app.py`` ::\n\n\n\n    import logging\n\n    import logging.config\n\n    from pyeslogging.handlers import PYESHandler\n\n    import json\n\n\n\n    # Define logging.json path\n\n    with open(\"C:\\App\\logging.json\") as read_file:\n\n        loggingConfigDir = json.load(read_file)\n\n    logging.config.dictConfig(loggingConfigDir)\n\n    logger = logging.getLogger('root')\n\n    logger.info(\"Hello World !\")\n\n\n\nBuilding the sources & Testing\n\n------------------------------\n\nTo create the package follow the standard python setup.py to compile.\n\nTo test, just execute the python tests within the test folder\n\n\n\nWhy using an appender rather than logstash or beats\n\n---------------------------------------------------\n\nIn some cases is quite useful to provide all the information available within the LogRecords as it contains\n\nthings such as exception information, the method, file, log line where the log was generated.\n\n\n\n\n\nThe same functionality can be implemented in many other different ways. For example, consider the integration\n\nusing `SysLogHandler <https://docs.python.org/3/library/logging.handlers.html#sysloghandler>`_ and\n\n`logstash syslog plugin <https://www.elastic.co/guide/en/logstash/current/plugins-inputs-syslog.html>`_.\n\n\n\n\n\nContributing back\n\n-----------------\n\nFeel free to use this as is or even better, feel free to fork and send your pull requests over.\n\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mkhadher/python-elasticsearch-logger",
    "keywords": "logging elasticsearch handler log django and flask instrumentation",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PYESHandler",
    "package_url": "https://pypi.org/project/PYESHandler/",
    "platform": "",
    "project_url": "https://pypi.org/project/PYESHandler/",
    "project_urls": {
      "Homepage": "https://github.com/mkhadher/python-elasticsearch-logger"
    },
    "release_url": "https://pypi.org/project/PYESHandler/1.0.1/",
    "requires_dist": [
      "elasticsearch",
      "requests",
      "check-manifest ; extra == 'dev'",
      "six ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Elasticsearch Log handler for the logging library",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12241930,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f32d7e728469815dbdee5724008625f544c31c1787c4e47ed8617773c2d8009",
          "md5": "9f712ca1b8186dabaad026a4f2c80c0a",
          "sha256": "faea0fecf4008305af0b5c6c960a1e04125c4c7f2d7833f3179245af16445ee1"
        },
        "downloads": -1,
        "filename": "PYESHandler-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f712ca1b8186dabaad026a4f2c80c0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13140,
        "upload_time": "2021-12-08T05:58:21",
        "upload_time_iso_8601": "2021-12-08T05:58:21.317215Z",
        "url": "https://files.pythonhosted.org/packages/5f/32/d7e728469815dbdee5724008625f544c31c1787c4e47ed8617773c2d8009/PYESHandler-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae22130834baa2d831aa5cebe2ac200f1b6ed88dae4187ba7251868389e6adfd",
          "md5": "7905dd4839ce8a08e10596e1b99011bb",
          "sha256": "68e832ccb399a0277d4afa9b7ffd4472c3160e9cd813e9e598489b37224141d4"
        },
        "downloads": -1,
        "filename": "PYESHandler-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7905dd4839ce8a08e10596e1b99011bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13107,
        "upload_time": "2021-12-08T05:58:25",
        "upload_time_iso_8601": "2021-12-08T05:58:25.658116Z",
        "url": "https://files.pythonhosted.org/packages/ae/22/130834baa2d831aa5cebe2ac200f1b6ed88dae4187ba7251868389e6adfd/PYESHandler-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f32d7e728469815dbdee5724008625f544c31c1787c4e47ed8617773c2d8009",
        "md5": "9f712ca1b8186dabaad026a4f2c80c0a",
        "sha256": "faea0fecf4008305af0b5c6c960a1e04125c4c7f2d7833f3179245af16445ee1"
      },
      "downloads": -1,
      "filename": "PYESHandler-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f712ca1b8186dabaad026a4f2c80c0a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13140,
      "upload_time": "2021-12-08T05:58:21",
      "upload_time_iso_8601": "2021-12-08T05:58:21.317215Z",
      "url": "https://files.pythonhosted.org/packages/5f/32/d7e728469815dbdee5724008625f544c31c1787c4e47ed8617773c2d8009/PYESHandler-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae22130834baa2d831aa5cebe2ac200f1b6ed88dae4187ba7251868389e6adfd",
        "md5": "7905dd4839ce8a08e10596e1b99011bb",
        "sha256": "68e832ccb399a0277d4afa9b7ffd4472c3160e9cd813e9e598489b37224141d4"
      },
      "downloads": -1,
      "filename": "PYESHandler-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7905dd4839ce8a08e10596e1b99011bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13107,
      "upload_time": "2021-12-08T05:58:25",
      "upload_time_iso_8601": "2021-12-08T05:58:25.658116Z",
      "url": "https://files.pythonhosted.org/packages/ae/22/130834baa2d831aa5cebe2ac200f1b6ed88dae4187ba7251868389e6adfd/PYESHandler-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}