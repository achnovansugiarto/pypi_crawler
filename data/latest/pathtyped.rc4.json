{
  "info": {
    "author": "nopeless",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Typesafe resource management in Python\r\n\r\nThis package creates a definition file by traversing the resource folder and parsing the files\r\n\r\n## Features\r\n - [x] Typesafe resource management (needs compatible type checker)\r\n - [x] Automatic type definition generation\r\n - [x] Middlewares, loaders api\r\n\r\nPyPI: https://pypi.org/project/pathtyped/\r\n\r\n```sh\r\npip install pathtyped\r\n```\r\n\r\n# Showcase\r\n\r\n> This code can be found in [demo](demo)\r\n\r\n## Your text files\r\nresources/\r\n    data.json\r\n    main.txt\r\n    speech_0.txt\r\n    speech_1.txt\r\n    speech_2.txt\r\n```\r\n\r\n```py\r\n# main.py\r\nfrom pathtyped import *\r\n\r\nrm = ResourceManager(\r\n    f\"resources\",\r\n    DefinitionFile(\"\", f\"resource_definition.py\"),\r\n    [remove_known_extensions(r\"txt|json\"), group_by(r\"(speech)_(\\d)\")],\r\n    [Loaders.text, Loaders.json],\r\n)\r\n\r\nfrom resource_definition import root\r\n\r\nresource: root = rm.root  # type: ignore\r\n# The file below does not exist yet\r\nfrom definition import root\r\n\r\nresource: root = resource_manager.root # type: ignore\r\n```\r\n\r\n```py\r\n# defaults.py\r\n# No need to import anything since type str is already imported\r\n# Example\r\nfrom some_code import YourClass\r\n```\r\n\r\n### Generates\r\n\r\n```py\r\n# 8587d74aed20f794cdfc800f26c456b7\r\n# Automatically generated by ResourceManager at: 2023-01-15 23:37:27.451164\r\n# DO NOT EDIT THIS FILE MANUALLY. \r\n# If you want to regenerate this file, change the integrity hash in the first line to something else\r\n\r\n# Some generic fixes\r\nlist = list[object]\r\ndict = dict[object, object]\r\n\r\n# Default import statement:\r\n\r\n# Main content:\r\nfrom typing import NamedTuple\r\n\r\nroot = NamedTuple(\"root\", [\r\n    (\"speech\", tuple[\r\n        str,\r\n        str,\r\n        str,\r\n    ],),\r\n    (\"data\", dict),\r\n    (\"main\", str),\r\n])\r\n```\r\n\r\n## And provides you with type compilation\r\n\r\n![1673847586091](image/README/1673847586091.png)\r\n\r\n# Documentation\r\n\r\n## Middlewares\r\n\r\nMiddlewares are functions that have the ability to modify the tree structure itself as well as change the value of the nodes\r\n\r\nThey are applied in the order they are passed to the ResourceManager, with each middleware doing a full DFS preorder traversal of the tree\r\n\r\n```py\r\nfor middleware in middlewares:\r\n    # The @middleware decorator will initiate the dfs preorder traversal\r\n    tree = middleware(self, \"<root>\", tree)\r\n```\r\n<img src=\"image/README/1673837228765.png\" alt=\"drawing\" width=\"200\"/>\r\n\r\nThis also means that the middleware will be applied to the leaf of the trees that it has returned. This is the most desirable behavior for applying middlewares\r\n\r\n```py\r\n@middleware\r\ndef strip_numbers_in_string(r: ResourceManager, location: str, tree: EntryTree) -> Optional[EntryTree]:\r\n    \"\"\"Removes all number property from tree\"\"\"\r\n    if isinstance(tree, EntryDict):\r\n        new_tree = EntryDict()\r\n        for key in list(tree.keys()):\r\n            n = re.sub(r\"\\d+\", \"\", key)\r\n            new_tree[n] = tree[key]\r\n        # If a new dict or list is returned, it will replace the old one\r\n        # Be sure to return a new EntryTree\r\n        return new_tree\r\n    # Returning None indicates that the tree should not be changed\r\n    # You can also modify tree in place and it will be reflected\r\n    return None\r\n```\r\n\r\n## Loaders\r\n\r\nLoaders are simpler middlewares. They are functions that only take the leaf node and transform it into a useful value.\r\n\r\nMost leaf nodes are `Path` objects\r\n\r\nThe resource manager will attempt to apply each loader to the leaf node in the order they are passed to the ResourceManager. Returning `None` indicates that the loader does not know how to handle the leaf node and will pass it to the next loader\r\n\r\n```py\r\nfor loader in self.loaders:\r\n    if (r := loader(self, obj)) is not None:\r\n        return r\r\n```\r\n\r\nIf you want multiple loaders to be applied the same leaf node see the example code at the bottom\r\n\r\n```py\r\n# Basic loaders\r\n@loader\r\ndef return_suffix(r: ResourceManager, path: Path) -> str:\r\n    return path.suffix\r\n\r\n@loader\r\n@extension(\"mp3\")\r\ndef pygame_load(r: ResourceManager, path: Path) -> pygame.mixer.Sound:\r\n    return pygame.mixer.Sound(path)\r\n\r\nfallback_image = pygame.image.load(\"fallback.png\")\r\n\r\n@loader\r\n@extension(r\"png|jpg|jpeg\")\r\n@fallback(fallback_image) # If the loading raises an Exception\r\ndef pygame_image_load(r: ResourceManager, path: Path) -> pygame.Surface:\r\n    return pygame.image.load(path)\r\n\r\n# Advanced loaders\r\n\r\n# Loader that accepts certain object nodes\r\n# Requires a compatible middleware to generate such leaves\r\n@loader(Script)\r\ndef execute(r: ResourceManager, s: Script) -> object:\r\n    return s.execute()\r\n\r\n# Two transformations\r\n@loader\r\ndef str_node(r: ResourceManager, path: Path) -> str:\r\n    return path.read_text()\r\n\r\n@loader(str)\r\ndef str_to_int(r: ResourceManager, s: str) -> int:\r\n    if s.isnumeric():\r\n        return int(s)\r\n\r\n@loader\r\ndef combined(r: ResourceManager, path: Path) -> Union[str, int]:\r\n    res = path\r\n    for l in [str_node, str_to_int]:\r\n        if (t := l(r, res)) is not None:\r\n            res = t\r\n    return res\r\n```\r\n\r\n# FAQ\r\n\r\n## Visual Studio Code shows that the type is any\r\n\r\nChange the `python.analysis.typeCheckingMode` setting to `strict` and it not allow you to access invalid properties. Make sure that the Python language server is Pylance\r\n\r\n```json\r\n{\r\n    \"python.analysis.typeCheckingMode\": \"strict\"\r\n}\r\n```\r\n\r\n## Cannot import `TypeGuard`\r\n\r\nProject requires Python 3.10 or higher\r\n\r\n# Contributing\r\n\r\nIf you have an idea for this library, please make an issue first instead of a PR. I will be happy to discuss it with you\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "path,file,type",
    "license": "MIT License  Copyright (c) 2023 nopeless@github.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pathtyped",
    "package_url": "https://pypi.org/project/pathtyped/",
    "platform": null,
    "project_url": "https://pypi.org/project/pathtyped/",
    "project_urls": {
      "Bug Tracker": "https://github.com/nopeless/python-typesafe-resource-management/issues",
      "Homepage": "https://github.com/nopeless/python-typesafe-resource-management"
    },
    "release_url": "https://pypi.org/project/pathtyped/0.1.4/",
    "requires_dist": [
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "Create static path checking and type checking for your Python code",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16442004,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a486d7c20a44ad9204a6c6e0530934a8a7c26e4ef5aed3faf6200566804da3c8",
          "md5": "91ada8daf32d28b152919d819a7a0e9f",
          "sha256": "899da30fe4ce5ce1ba19d3a247ece5aa5da8ec4e8ede89eeaf336230ae26cab7"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91ada8daf32d28b152919d819a7a0e9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 11801,
        "upload_time": "2023-01-16T03:46:11",
        "upload_time_iso_8601": "2023-01-16T03:46:11.352780Z",
        "url": "https://files.pythonhosted.org/packages/a4/86/d7c20a44ad9204a6c6e0530934a8a7c26e4ef5aed3faf6200566804da3c8/pathtyped-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e787610104de33d5bbd33b098925141f1c582c76d690af4ccd74aea2e4001623",
          "md5": "f75b7cb83c9abde7469ec63568c668ee",
          "sha256": "93206c4a2112b2236403ac03f8c300dbcae5fb6d249be71cedc747c6edd8fe80"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f75b7cb83c9abde7469ec63568c668ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 13129,
        "upload_time": "2023-01-16T03:46:13",
        "upload_time_iso_8601": "2023-01-16T03:46:13.117636Z",
        "url": "https://files.pythonhosted.org/packages/e7/87/610104de33d5bbd33b098925141f1c582c76d690af4ccd74aea2e4001623/pathtyped-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "368f8aad712df200c340ee3c5fed20fb9e682fc4d4df1e2965ea1282a4ccb2f9",
          "md5": "2f63c29ad6cae4a665d4af3ca6bea372",
          "sha256": "1a5abf96b46f29165f0351bc0d6242c0909ecc70ea96aa9942f981bf084254db"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f63c29ad6cae4a665d4af3ca6bea372",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 11843,
        "upload_time": "2023-01-16T04:17:19",
        "upload_time_iso_8601": "2023-01-16T04:17:19.807240Z",
        "url": "https://files.pythonhosted.org/packages/36/8f/8aad712df200c340ee3c5fed20fb9e682fc4d4df1e2965ea1282a4ccb2f9/pathtyped-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4059b3e5afefbeb1a03b339918a8a60974024f8f892a3ec4568902707fef25",
          "md5": "1ea0593d2fc9dde9123f5fee595d87fa",
          "sha256": "e8d08925beac5dc9fc8319dbbb54edc84ec4b0e293a456b5c4872d647ded4aec"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1ea0593d2fc9dde9123f5fee595d87fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 13189,
        "upload_time": "2023-01-16T04:17:21",
        "upload_time_iso_8601": "2023-01-16T04:17:21.162643Z",
        "url": "https://files.pythonhosted.org/packages/7c/40/59b3e5afefbeb1a03b339918a8a60974024f8f892a3ec4568902707fef25/pathtyped-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1425089a2359b44314d594dcb0924614320f8a5194298679311a6a8032d1fb26",
          "md5": "529aef4880884324ecefbde853088333",
          "sha256": "031451dc4fda082d95c0793278f7247126c4f6172fa6b46c7efbf7742e23c575"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "529aef4880884324ecefbde853088333",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12002,
        "upload_time": "2023-01-16T04:28:23",
        "upload_time_iso_8601": "2023-01-16T04:28:23.106897Z",
        "url": "https://files.pythonhosted.org/packages/14/25/089a2359b44314d594dcb0924614320f8a5194298679311a6a8032d1fb26/pathtyped-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a36f12b18f04c042c302be35b8448ad99a52f4fd2709900c36fd47f786a4d4bf",
          "md5": "15747a64e82d771638429297849d818e",
          "sha256": "8c79911652380acb8b982bc705faadc07c811079a7b7adfce0bd922aa2a1adae"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "15747a64e82d771638429297849d818e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 13294,
        "upload_time": "2023-01-16T04:28:24",
        "upload_time_iso_8601": "2023-01-16T04:28:24.662746Z",
        "url": "https://files.pythonhosted.org/packages/a3/6f/12b18f04c042c302be35b8448ad99a52f4fd2709900c36fd47f786a4d4bf/pathtyped-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40ec68df4cbbdca9fc1d1d5fd70c602be061c27ea5cb2c00ca84043940daeb48",
          "md5": "857532ea60bf4ff8f2afe17924d61644",
          "sha256": "3a6b1c5c0bbe484659c7a729f3144527c32d7bdb47c99ca69ef77800bc078547"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "857532ea60bf4ff8f2afe17924d61644",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 12798,
        "upload_time": "2023-01-16T07:26:38",
        "upload_time_iso_8601": "2023-01-16T07:26:38.644992Z",
        "url": "https://files.pythonhosted.org/packages/40/ec/68df4cbbdca9fc1d1d5fd70c602be061c27ea5cb2c00ca84043940daeb48/pathtyped-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e6f3e90a5a16a6b401c0745ebac5db1569c1a00e04119718f8f1a7cafe04639",
          "md5": "1866f97b2767e1bdf057e407134caf9f",
          "sha256": "e2fde390358760fd183b2de4c44830318e4e1a3e35a48faa6f78d14602102978"
        },
        "downloads": -1,
        "filename": "pathtyped-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1866f97b2767e1bdf057e407134caf9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 14535,
        "upload_time": "2023-01-16T07:26:40",
        "upload_time_iso_8601": "2023-01-16T07:26:40.480489Z",
        "url": "https://files.pythonhosted.org/packages/6e/6f/3e90a5a16a6b401c0745ebac5db1569c1a00e04119718f8f1a7cafe04639/pathtyped-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40ec68df4cbbdca9fc1d1d5fd70c602be061c27ea5cb2c00ca84043940daeb48",
        "md5": "857532ea60bf4ff8f2afe17924d61644",
        "sha256": "3a6b1c5c0bbe484659c7a729f3144527c32d7bdb47c99ca69ef77800bc078547"
      },
      "downloads": -1,
      "filename": "pathtyped-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "857532ea60bf4ff8f2afe17924d61644",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 12798,
      "upload_time": "2023-01-16T07:26:38",
      "upload_time_iso_8601": "2023-01-16T07:26:38.644992Z",
      "url": "https://files.pythonhosted.org/packages/40/ec/68df4cbbdca9fc1d1d5fd70c602be061c27ea5cb2c00ca84043940daeb48/pathtyped-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e6f3e90a5a16a6b401c0745ebac5db1569c1a00e04119718f8f1a7cafe04639",
        "md5": "1866f97b2767e1bdf057e407134caf9f",
        "sha256": "e2fde390358760fd183b2de4c44830318e4e1a3e35a48faa6f78d14602102978"
      },
      "downloads": -1,
      "filename": "pathtyped-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1866f97b2767e1bdf057e407134caf9f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 14535,
      "upload_time": "2023-01-16T07:26:40",
      "upload_time_iso_8601": "2023-01-16T07:26:40.480489Z",
      "url": "https://files.pythonhosted.org/packages/6e/6f/3e90a5a16a6b401c0745ebac5db1569c1a00e04119718f8f1a7cafe04639/pathtyped-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}