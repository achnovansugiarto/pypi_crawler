{
  "info": {
    "author": "Saikat Banerjee and Franco Simonetti",
    "author_email": "bnrj.saikat@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Tejaas: Discover trans-eQTLs\n\n## Description\n\nTejaas is a command line tool to find trans-eQTLs from eQTL data.\nIt is released under the GNU General Public License version 3.\n\nTejaas is based on the hypothesis that a trans-eQTL should regulate the expression levels of multiple genes.\nIn brief, it implements two statistical methods to find trans-eQTLs:\n- **RR-score (Reverse Regression)**: It performs a multiple linear regression with L<sub>2</sub>-regularization \nusing expression levels of all genes to explain the genotype of a candidate SNP.\nIn contrast to conventional methods, the direction of the regression is reversed, with the gene expressions as explanatory variables.\nRR-score is a statistic which estimates whether more genes are required to explain the allele counts of a SNP than expected by chance.\n- **JPA-score (Joint P-value Analysis)**: It evaluates the distribution of p-values of the pairwise linear association of a candidate SNP with all available gene expression levels. \nAny null SNP (no trans-effect) will have a uniform distribution of p-values,\nwhile a trans-eQTL will be associated with more genes than expected by chance, leading to overdispersion near zero. \nThe JPA-score is a statistic which estimates whether the distribution of p-values is significantly overdispersed near zero.\n\nAdditionally, it also implements a non-linear unsupervised confounder correction using k-nearest neighbors called **KNN correction**.\n\n## Dependencies\n\n- Python version 3.6 or higher\n- C compiler\n- Any linear algebra routine, e.g. Intel MKL, OpenBLAS, etc.\n- Any flavor of Message Passing Interface (MPI), e.g. OpenMPI, MPICH, etc.\n- Other Python libraries:\n  - [NumPy](http://www.numpy.org/) / array operations\n  - [SciPy](https://www.scipy.org/) / optimization and other special functions\n  - [statsmodel](http://www.statsmodels.org/stable/index.html) / used for ECDF calculation in JPA-score\n  - [Pygtrie](https://pypi.org/project/pygtrie/) / used for reading MAF file in RR-score / maf null\n  - [mpi4py](https://mpi4py.readthedocs.io/en/stable/) / linked to MPI and MKL for python parallelization\n  - [scikit-learn](https://scikit-learn.org/stable/index.html) / used for PCA decomposition in KNN correction\n\n<!--\nYou can find examples of getting started here:\n- [Example 1 (GWDG Cluster)](https://github.com/soedinglab/tejaas/wiki/GWDG-Cluster)\n- [Example 2 (Minion)](https://github.com/soedinglab/tejaas/wiki/Minion2)\n-->\n\n## Installation\n\nSee the wiki for detailed [installation instructions](https://github.com/soedinglab/tejaas/wiki/Installation). \nHere is a quick start guide:\n\n### 1. Install dependencies\nInstallation of Tejaas depends on other dependencies. If you are using `conda`, then they can be installed using\n```\nconda install numpy scipy statsmodels scikit-learn\npip install mpi4py\n```\n\n### 2. Install Tejaas\n2a. Tejaas can be installed directly from the PyPI repository:\n```\npip install tejaas\n```\n2b. You can also download this repository and build Tejaas:\n```\ngit clone git@github.com:soedinglab/tejaas.git\ncd tejaas\npip install -e .\n```\n\n### 3. Run Tejaas!\n```\ntejaas [OPTIONS]\n```\nSee below for valid options or try `tejaas --help`.\n\n#### Run an example to check installation\nAn example script `example/run_example.sh` is provided to check the installation.\n```\ncd tejaas/example\n./run_example.sh <outdir> <ncpu>\n```\nThe script will download some example input files in `<outdir>/data` and run Tejaas on `<ncpu>` cores.\nThe output will be created in `<outdir>/data`. \nNote that the `data` subdirectory is automatically created within the `<outdir>` specified by the user.\nCheck if the output is correct:\n```\npython compare_with_gold.py --outdir <outdir>\n```\nThis will check if the output in `<outdir>/data` \n(again note that `data` subdirectory is automatically appended and need not be specified by the user)\nmatches with the results provided in the `example/gold` subdirectory.\n\n## Input Files\n- Gene expression file\n- Genotype file\n  - VCF\n  - Oxford\n  - Dosage\n- GENCODE file\n- Population minor allele frequency\n\n## Tejaas [OPTIONS]\n\nOption&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| Argument | Description | Priority | Default value\n:--- | :--- | :---        |:---      | :--\n`--vcf`       | `FILEPATH` | Input genotype file in vcf.gz format | Required (vcf or oxf) | --\n`--oxf`       | `FILEPATH` | Input genotype file in Oxford format | Required (vcf or oxf) | --\n`--dosage`    |            | Flag for reading dosage files. The file is specified with the `--oxf` option, e.g. `--oxf FILEPATH --dosage` | Optional | `False` \n`--fam`       | `FILEPATH` | Input fam file for samples names of Oxford genotype | Optional | -- \n`--chrom`     | `INT`      | Chromosome number of the genotype file | Required | -- \n`--include-SNPs` | `START:END` | Colon-separated index of SNPs to be included | Optional | -- \n`--gx`        | `FILEPATH` | Input gene expression file for trans-eQTL discovery | Required | --\n`--gxcorr`    | `FILEPATH` | Input gene expression file for target gene discovery | Optional | `--gx` file\n`--gxfmt`     | `OPTION`   | Input gene expression file format (see format details below). Supported options: `gtex`, `cardiogenics`, `geuvadis` | Optional | `gtex`\n`--gtf`       | `FILEPATH` | Input GTF file from GENCODE to read gene Ensembl IDs. Used for selecting biotypes and getting genomic locations. | Required | --\n`--trim`      |            | Flag to trim version number from GENCODE Ensembl IDs | Optional | `False`\n`--biotype`   | `OPTION`   | Which biotypes to select from the GTF file. Supported options: `protein_coding`, `lncRNA`. | Optional | `protein_coding lncRNA`\n`--outprefix` | `STRING`   | Full path to output file names. The extensions are generated by Tejaas. | Optional | `out`  \n`--method`    | `OPTION`   | Name of method to run. Supported options: `jpa` or `rr` | Optional | `rr`\n`--null`      | `OPTION`   | Null model to use for RR-score. Supported options: `perm` or  `maf` | Optional | `perm` \n`--cismask`   |            | Flag to mask cis-Genes within a window  for each candidate SNP. Gene positions are obtained from the GENCODE annotation file.  | Optional | `False`\n`--window`    | `FLOAT`    | Window (number of base pairs) used for masking cis genes | Optional | 1e6 \n`--prior-sigma`| `FLOAT`   | Standard deviation of the normal prior for reverse multiple linear regression | Optional | 0.1\n`--knn`       | `INT`      | Number of neighbours for KNN (use 0 if you do not want to use KNN) | Optional | 0\n`--psnpthres` | `FLOAT`    | Target genes will be reported only for trans-eQTLs below this threshold p-value for RR/JPA-score | Optional | 0.0001\n`--pgenethres`| `FLOAT`    | Target genes will be reported only if their association with trans-eQTLs are below this threshold p-value | Optional | 0.05\n`--jpanull`   | `FILEPATH` | File containing list of null model JPA-scores | Optional | -- \n`--maf-file`  | `FILEPATH` | Read minor allele frequency (MAF) of SNPs from this file, e.g. to read population MAF for `maf` null (see documentation for file format) | Optional | -- \n`--shuffle`   |            | Flag to randomly shuffle the genotypes to obtain a null distribution | Optional | `False`\n`--shuffle-with` | `FILEPATH` | Shuffle the genotypes in the same order of donor IDs specified in `FILEPATH` | Optional | --\n<!--\n`--test`      |            | Flag to do test run | Optional | -- \n-->\n\n## Usage Examples\n\n1. For quick start or installation check, run Tejaas with all default options:\n```\ntejaas --vcf ${VCFFILE} --chrom ${CHRM} --gx ${GXFILE} --gtf ${GTFFILE} --cismask --outprefix ${OUTPREFIX}\n```\nThis will create RR-scores at &gamma;=0.1 and masking all genes within 1Mb of each SNP. The p-values will be computed from the permuted null model.\nDefault format for the gene expression is the same as the GTEx format, and default gtf file is the [GENCODE v26](https://www.gencodegenes.org/human/release_26.html) release.\nFor target gene discovery, it will use the same file as used for trans-eQTL discovery.\n\n2. Example of running Tejaas RR-score.\nWe recommend using the `perm` null model for calcuting p-values from the RR-score\nand a separate confounder-corrected gene expression file for target gene discovery.\nIn this example, RR-score is calculated for first 1000 SNPs excluding the first 20 `--include-SNPs 21:1000`.\nKNN correction is performed with 20 nearest neighbors `--knn 20`.\nAll cis-genes within +2MB and -2Mb are masked during analysis `--cismask --window 2e6`.\nRR-score calculation uses a prior normal distribution with standard deviation of 0.05 `--prior-sigma 0.05`.\nThe output reports target genes only for SNPs with p-value < 1e-6 `--psnpthres 0.000001`.\nHere, `GXFILE` is the raw gene expression file, `GXCORRFILE` is the confounder-corrected gene expression file,\n`VCFFILE` is the genotype file in `.vcf.gz` format and `GTFFILE` is the GENCODE annotation file.\n```\nmpirun -n 8 tejaas --vcf ${VCFFILE} --chrom ${CHRM} --include-SNPs 21:1000 --gx ${GXFILE} --gxcorr ${GXCORRFILE} \\\n                   --gxfmt gtex --gtf ${GTFFILE} --trim  --outprefix ${OUTPREFIX} \\\n                   --cismask --window 2e6 --psnpthres 0.000001 \\\n                   --knn 20 --method rr --null perm --prior-sigma 0.05\n```\n\n3. Example of running JPA-score with no KNN correction. \nEmpirical p-values are calculated from the null scores loaded from `NULLFILE` specified by the `--jpanull` option.\nIf `NULLFILE` does not exist, then it will create `100000` null scores and write them in the `NULLFILE` before calculating JPA-scores.\nIf `--jpanull` option is not used, then p-values for the JPA-scores are calculated from an analytical construction of null model.\n```\nmpirun -n 8 tejaas --vcf ${VCFFILE} --chrom ${CHRM} --include-SNPs 1:100 \\\n                   --gx ${GXFILE} --gxfmt gtex --gtf ${GTFFILE} --outprefix ${OUTPREFIX} \\\n                   --knn 0 --method jpa --jpanull ${NULLFILE}\n```\n\n4. Example of parallelizing job submission.\n```\nNMAX=20000 # number of SNPs per job\nfor CHRM in $( seq 1 22 ); do\n    VCFFILE=\"file_path_here_${CHRM}.vcf.gz\"\n    NTOT=$( calculate_no_of_SNPs_in_this_chromosome )\n    NJOB=$( echo $(( (NTOT + NMAX - 1)/NMAX )) )\n    for (( i=0; i < ${NJOB}; i++ )); do\n        STARTSNP=$(( NMAX * i + 1 ))\n        ENDSNP=$(( NMAX * (i + 1) ))\n        if [ ${ENDSNP} -gt ${NTOT} ]; then\n            ENDSNP=${NTOT}\n        fi\n        mpirun -n 8 tejaas --vcf ${VCFFILE} --chrom ${CHRM} --include-SNPs ${STARTSNP}:${ENDSNP} --gx ${GXFILE} --gxcorr ${GXCORRFILE} \\\n                           --gxfmt gtex --gtf ${GTFFILE} --trim  --outprefix ${OUTPREFIX} \\\n                           --cismask --psnpthres 0.000001 --knn 20 --method rr --null perm --prior-sigma 0.05\n    done\ndone\n```\n\n## Contributors\n<a href=\"https://github.com/soedinglab/tejaas/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=soedinglab/tejaas\" />\n</a>\n\n## Version History\n1.0.2 Bump release version\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/soedinglab/tejaas",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/soedinglab/tejaas",
    "keywords": "eQTL,trans-eQTL,transcriptomics,reverse regression",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tejaas",
    "package_url": "https://pypi.org/project/tejaas/",
    "platform": null,
    "project_url": "https://pypi.org/project/tejaas/",
    "project_urls": {
      "Bug Tracker": "https://github.com/soedinglab/tejaas/issues",
      "Documentation": "https://github.com/soedinglab/tejaas/wiki",
      "Download": "https://github.com/soedinglab/tejaas",
      "Homepage": "https://github.com/soedinglab/tejaas",
      "Source Code": "https://github.com/soedinglab/tejaas"
    },
    "release_url": "https://pypi.org/project/tejaas/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Command line tool for finding trans-eQTLs using reverse regression",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15415321,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cc7b4187f12f48c12c3358ff0bee59d9951403c2677328d37d038ea2e7a2c6d",
          "md5": "355ce807c65cd4135f6c4ecff0301032",
          "sha256": "af9ed4006e5f3bc10e5603504d88054c3c0b025a760de20f9c63cdf3436b8346"
        },
        "downloads": -1,
        "filename": "tejaas-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "355ce807c65cd4135f6c4ecff0301032",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 96485,
        "upload_time": "2021-08-28T17:22:11",
        "upload_time_iso_8601": "2021-08-28T17:22:11.210380Z",
        "url": "https://files.pythonhosted.org/packages/9c/c7/b4187f12f48c12c3358ff0bee59d9951403c2677328d37d038ea2e7a2c6d/tejaas-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d706e59ad57c41c3d3b1d4af98c5f938168ccc3b1e201e21b43875f9a3c180d8",
          "md5": "e4561f8354ebca43bee651917c8bd367",
          "sha256": "a17ef3795712ee66b1ee332b82f8393a34a6ca527c9477100e5a69ad6266b5db"
        },
        "downloads": -1,
        "filename": "tejaas-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e4561f8354ebca43bee651917c8bd367",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 97397,
        "upload_time": "2022-10-14T18:43:05",
        "upload_time_iso_8601": "2022-10-14T18:43:05.662945Z",
        "url": "https://files.pythonhosted.org/packages/d7/06/e59ad57c41c3d3b1d4af98c5f938168ccc3b1e201e21b43875f9a3c180d8/tejaas-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d706e59ad57c41c3d3b1d4af98c5f938168ccc3b1e201e21b43875f9a3c180d8",
        "md5": "e4561f8354ebca43bee651917c8bd367",
        "sha256": "a17ef3795712ee66b1ee332b82f8393a34a6ca527c9477100e5a69ad6266b5db"
      },
      "downloads": -1,
      "filename": "tejaas-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e4561f8354ebca43bee651917c8bd367",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 97397,
      "upload_time": "2022-10-14T18:43:05",
      "upload_time_iso_8601": "2022-10-14T18:43:05.662945Z",
      "url": "https://files.pythonhosted.org/packages/d7/06/e59ad57c41c3d3b1d4af98c5f938168ccc3b1e201e21b43875f9a3c180d8/tejaas-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}