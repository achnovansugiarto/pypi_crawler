{
  "info": {
    "author": "Krzysztof Przybyła",
    "author_email": "krzysztof.h.przybyla@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Prototypes\n----------\n\n|py3.6| |py3.7| |py3.8| |py3.9| |py3.10|\n\n.. |py3.6| image:: https://img.shields.io/badge/python-3.6-blue.svg\n.. |py3.7| image:: https://img.shields.io/badge/python-3.7-blue.svg\n.. |py3.8| image:: https://img.shields.io/badge/python-3.8-blue.svg\n.. |py3.9| image:: https://img.shields.io/badge/python-3.9-blue.svg\n.. |py3.10| image:: https://img.shields.io/badge/python-3.10-blue.svg\n\nSummary\n=======\n\nPrototypes allow you to define signatures for your functions and\nverify those signatures during both static type checking and runtime.\n\nInstallation\n============\n\n::\n\n    $ pip install prototypes\n\nRequirements\n============\n\n- `typing-extensions`_ >= 3.10 when using Python < 3.10\n\n.. _`typing-extensions`: https://pypi.org/project/typing-extensions\n\nBasic usage\n===========\n\nTo validate your function against prototype, decorate your function with\nthe ``prototype`` decorator and pass the prototype function as a parameter.\n\n.. code-block:: python\n\n    from prototypes import prototype\n\n    def add(x: int, y: int) -> int:\n        ...\n\n    @prototype(add)\n    def custom_add(x: int, y: int) -> int:\n        return x + y\n\nStatic type checking is fully supported thanks to usage of both ``typing.TypeVar``\n(`PEP 484`_) and ``typing.ParamSpec`` (`PEP 612`_) under the hood.\n\n.. code-block:: python\n\n    from prototypes import prototype\n\n    def add(x: int, y: int) -> int:\n        ...\n\n    # This will report type error by static type checkers like `mypy` in the future\n    @prototype(add)\n    def compute() -> None:\n        pass\n\n.. _`PEP 484`: https://www.python.org/dev/peps/pep-0484\n.. _`PEP 612`: https://www.python.org/dev/peps/pep-0612\n\nAdvanced usage\n==============\n\nPrototype functions does not have to be empty. They can be regular functions\nthat already contain specific implementation. The prototype function act\nmore like a signature template for the function, rather than an empty shell\nto be filled with the implementation.\n\n.. code-block:: python\n\n    from prototypes import prototype\n\n    def add(x: int, y: int) -> int:\n        return x + y\n\n    @prototype(add)\n    def custom_add(x: int, y: int) -> int:\n        ...\n        return add(x, y)\n\nBy default, the ``prototype`` decorator verifies the signatures during runtime. Since\ndecorators are executed during the function definition, this validation is performed\nright away, even if function is never called.\n\n.. code-block:: python\n\n    >>> from prototypes import prototype\n    >>>\n    >>> def add(x: int, y: int) -> int: ...\n    ...\n    >>> @prototype(add)\n    ... def compute() -> None:\n    ...     pass\n    ...\n    Traceback (most recent call last):\n        ...\n    prototypes.PrototypeError: Incompatible function implementation for given prototype\n\n    Function:\n    def compute() -> None @ compute\n\n    Prototype:\n    def add(x: int, y: int) -> int @ add\n\nHowever, since closures (inner functions) are defined on function execution,\nusing ``prototype`` decorator in the closure will have no effect until the outer\nfunction is called.\n\n.. code-block:: python\n\n    >>> from prototypes import prototype\n    >>>\n    >>> def add(x: int, y: int) -> int: ...\n    ...\n    >>> def func() -> None:\n    ...     @prototype(add)\n    ...     def compute() -> None:\n    ...         ...\n    ...\n    >>> # No exception is raised at that point\n    >>> func()\n    Traceback (most recent call last):\n        ...\n    prototypes.PrototypeError: Incompatible function implementation for given prototype\n\n    Function:\n    def compute() -> None @ func.<locals>.compute\n\n    Prototype:\n    def add(x: int, y: int) -> int @ add\n\nThe runtime validation can be turned off when static type checking is performed\nto increase the code performance during runtime.\n\n.. code-block:: python\n\n    >>> from prototypes import prototype\n    >>>\n    >>> def add(x: int, y: int) -> int: ...\n    ...\n    >>> @prototype(add, runtime=False)\n    ... def compute() -> None:\n    ...     pass\n    ...\n    >>> # No exception is raised during runtime\n\nBugs/Requests\n-------------\n\nPlease use the `GitHub issue tracker`_ to submit bugs or request features.\n\n.. _`GitHub issue tracker`: https://github.com/kprzybyla/prototypes/issues\n\nLicense\n-------\n\nCopyright Krzysztof Przybyła, 2021.\n\nDistributed under the terms of the `MIT`_ license.\n\n.. _`MIT`: https://github.com/kprzybyla/prototypes/blob/master/LICENSE\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kprzybyla/prototypes",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prototypes",
    "package_url": "https://pypi.org/project/prototypes/",
    "platform": "any",
    "project_url": "https://pypi.org/project/prototypes/",
    "project_urls": {
      "Homepage": "https://github.com/kprzybyla/prototypes"
    },
    "release_url": "https://pypi.org/project/prototypes/1.0.0/",
    "requires_dist": [
      "typing-extensions (>=3.10) ; python_version < \"3.10\""
    ],
    "requires_python": ">=3.6",
    "summary": "Prototyping for functions",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11511448,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1675d845efd1f81c629f42adad7e5ec38a96a813dbc4492f6a9d5ebdf41b240",
          "md5": "467ed79b9542e216cf8bcb33f5e73561",
          "sha256": "ce0868d2ffbbe6ce0c3f28a9dbc85e5d2b739b21cfd318c7f84648f14b774a41"
        },
        "downloads": -1,
        "filename": "prototypes-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "467ed79b9542e216cf8bcb33f5e73561",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3408,
        "upload_time": "2021-09-21T20:59:37",
        "upload_time_iso_8601": "2021-09-21T20:59:37.614869Z",
        "url": "https://files.pythonhosted.org/packages/f1/67/5d845efd1f81c629f42adad7e5ec38a96a813dbc4492f6a9d5ebdf41b240/prototypes-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5f04480b7e49e325372a65f95ec0f50ce588a9d6adf3083be306f268d7205c1",
          "md5": "61481a034053f869269ddb40416c2cab",
          "sha256": "e4fa68cb75334aa7d3972618afa74096570e4e45422de97376c4010046bb5cf4"
        },
        "downloads": -1,
        "filename": "prototypes-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61481a034053f869269ddb40416c2cab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4808,
        "upload_time": "2021-09-21T20:59:40",
        "upload_time_iso_8601": "2021-09-21T20:59:40.266906Z",
        "url": "https://files.pythonhosted.org/packages/c5/f0/4480b7e49e325372a65f95ec0f50ce588a9d6adf3083be306f268d7205c1/prototypes-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1675d845efd1f81c629f42adad7e5ec38a96a813dbc4492f6a9d5ebdf41b240",
        "md5": "467ed79b9542e216cf8bcb33f5e73561",
        "sha256": "ce0868d2ffbbe6ce0c3f28a9dbc85e5d2b739b21cfd318c7f84648f14b774a41"
      },
      "downloads": -1,
      "filename": "prototypes-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "467ed79b9542e216cf8bcb33f5e73561",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3408,
      "upload_time": "2021-09-21T20:59:37",
      "upload_time_iso_8601": "2021-09-21T20:59:37.614869Z",
      "url": "https://files.pythonhosted.org/packages/f1/67/5d845efd1f81c629f42adad7e5ec38a96a813dbc4492f6a9d5ebdf41b240/prototypes-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5f04480b7e49e325372a65f95ec0f50ce588a9d6adf3083be306f268d7205c1",
        "md5": "61481a034053f869269ddb40416c2cab",
        "sha256": "e4fa68cb75334aa7d3972618afa74096570e4e45422de97376c4010046bb5cf4"
      },
      "downloads": -1,
      "filename": "prototypes-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61481a034053f869269ddb40416c2cab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4808,
      "upload_time": "2021-09-21T20:59:40",
      "upload_time_iso_8601": "2021-09-21T20:59:40.266906Z",
      "url": "https://files.pythonhosted.org/packages/c5/f0/4480b7e49e325372a65f95ec0f50ce588a9d6adf3083be306f268d7205c1/prototypes-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}