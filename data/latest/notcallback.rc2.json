{
  "info": {
    "author": "Tony Wu",
    "author_email": "tony(dot)wu(at)nyu(dot)edu@inval.id",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Not callback.\n\nPromise-style interfaces for callback-based asynchronous libraries.\n\n```python\nyield from (\n    Promise.all(\n        open_db_connection(),\n        Promise.race(\n            fetch_data_region_US(),\n            fetch_data_region_DE(),\n        ),\n    )\n    .then(parse_data)\n    .then(update_rows)\n    .then(commit)\n    .catch(rollback)\n    .finally_(close_connection)\n)\n```\n\nInstall with `pip`:\n\n```bash\npython3 -m pip install notcallback\n```\n\n## Contents\n\n- [Examples](#examples)\n- [`async/await` and asyncio](#async)\n- [API Reference](#api-reference)\n- [See also](#see-also)\n\n----\n\nThis library imitates the logic of the `Promise` API found in ECMAScript.\nIt lets you restructure existing callback-style code into Promise workflows that are more readable.\nIt also provides a set of utility functions to let you better control the flow of your async programs.\n\nThis library is written using the [Promise/A+](https://promisesaplus.com/) specification as the reference. I try to recreate most of\nthe behaviors outlined in Promise/A+. However, the standards-compliance of the library has not been evaluated.\nMost importantly:\n\n## Note on asynchrony\n\n**This is not an async framework.** There is no event loop magic happening in this library. You must\nalready be working with an existing asynchronous/concurrency framework (preferably a callback-based one) for this\nlibrary to be any useful. Otherwise, your Promises will simply run sequentially and block.\n\nHere is an example of how one might turn [Scrapy](https://scrapy.org/)'s `Request`\n(which uses callbacks and is powered by [Twisted](https://twistedmatrix.com/trac/)) into Promise:\n\n```python\nimport json\nimport logging\nfrom notcallback import Promise\nfrom scrapy import Request\n\ndef fetch(**kwargs):\n    \"\"\"Create a Promise that will schedule a Request.\"\"\"\n    def executor(resolve, reject):\n        # When the response is ready, the Promise gets resolved by Scrapy through the `resolve` function.\n        yield Request(**kwargs, callback=resolve, errback=reject)\n    return Promise(executor)\n\ndef start_requests(self):\n    # Promises are iterable, and Scrapy will receive the yielded Requests\n    return (\n        # When the Promise is resolved, the handler in `.then()` gets executed.\n        fetch('https://httpbin.org/ip')\n        # A second Request is created from the response of the first one and is scheduled.\n        .then(lambda response: fetch(json.loads(response.text)['origin']))\n        # Print out the Response object from the second Request.\n        .then(print)\n        # If an exception was raised at anytime during the Promise, log it.\n        .catch(lambda exc: logging.getLogger().error(exc))\n    )\n```\n\n----\n\nThat being said, this library does provide a version of Promise that can work with the asyncio library.\nSee [`async/await` and asyncio](#async) for more info.\n\n## Examples\n\nIf you are unfamiliar with how Promise works in JavaScript, a great starting point would be MDN's\n[Promise API reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nand the guide to [Using Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises).\nMost of the usage choices here should be analogous to how Promise is used in JavaScript (except for the generator syntax).\n\n#### Creating a new Promise\n\n```python\ndef executor(resolve, reject):\n    ...\n    if should_fulfill:\n        yield from resolve(value)  # marks this Promise as resolved and begin the resolution process\n                                   # eventually the Promise will become either fulfilled or rejected\n    else:\n        yield from reject(reason)  # rejects this Promise with the specified reason\n\npromise = Promise(executor)\n```\n\n#### Evaluating a Promise\n\nPromises themselves are generators. You complete a Promise by exhausting it.\n\n```python\n# Within another generator:\nyield from promise\n# In a loop:\nfor i in promise:\n    ...\n# As a coroutine (non async/await)\npromise.send(None)\n```\n\n#### Accessing Promise properties\n\nThe main properties of a Promise are its state and value:\n\n```python\n>>> promise  # resolved with True\n>>> promise.state\n<PromiseState.FULFILLED: 'fulfilled'>\n>>> promise.get()  # return the value of the Promise\nTrue\n>>> promise.is_settled\nTrue\n```\n\n#### Providing handlers\n\nThe most important feature of Promise is the `.then(on_fulfill, on_reject)` instance method, which allows you\nto add handlers to a Promise.\n\n```python\ndef extract_keys(file):\n    data = json.load(file)\n    return data.keys()\n\ndef print_exception(exc):\n    return print(repr(exc), file=sys.stderr)\n\n>>> Promise.settle(Promise(correct_file).then(extract_keys, print_exception))\n# Promise.settle runs a Promise until completion\n<Promise at 0x10b4baa10 (fulfilled) => dict_keys([...])>\n\n>>> Promise.settle(Promise(wrong_file).then(extract_keys).catch(print_exception)\n# Promise.catch is a convenient method for adding exception handlers\nFileNotFoundError: [Errno 2] No such file or directory: 'wrong_file.json'\n<Promise at 0x10b4bad50 (fulfilled) => None>  \n# The state is fulfilled because the exception was successfully handled\n# The value is None because print() returns None.\n```\n\n#### Error handling\n\nThe following built-in exceptions will not be caught by Promise:\n\n```python\nGeneratorExit, KeyboardInterrupt, SystemExit\n```\n\nAdditionally, the following exceptions represent unexpected behaviors from a Promise and will also be thrown:\n\n```python\nPromiseException  # Base class for Exceptions indicating faulty Promise behaviors\nPromiseWarning  # Indicates behaviors that are correct but may be unintended, such as unhandled rejections.\n                # Normally warned but may be thrown if a warnings filter is set.\n```\n\n`UnhandledPromiseRejectionWarning`, a concrete subclass of `PromiseWarning`, will be displayed when the final\nPromise in a Promise chain is rejected (note that this is not raised):\n\n```python\ndef no_recursion(resolve, reject):\n    raise RecursionError()\n\n>>> Promise.settle(Promise(no_recursion))\nTraceback (most recent call last):\n  ...\nUnhandledPromiseRejectionWarning: Unhandled Promise rejection: RecursionError:\n  in <Promise 'no_recursion' at 0x104e3df50 (rejected) => RecursionError()>\n```\n\n#### Promise branching\n\nA Promise can register multiple handlers. Handlers are evaluated in the order they are registered.\n\n```python\nconn = Promise(open_connection())\nfor recipient in bcc:\n    Promise.settle(conn.then(update_rows(recipient)))\n```\n\nNote that Promises will always be evaluated only once: once they are settled, the executor will not be run again. However,\nyou can still attach handlers to an already settled Promise, and the resulting Promise, when evaluated, will run the handlers\nimmediately with the value of the settled Promise.\n\n#### Promise chaining\n\n**Promise().then() returns a new Promise,** which means you can chain multiple `.then()` handlers together\n\n```python\ndef add(delta):\n    \"\"\"Create a handler that adds `delta` to the incoming `val` and returns it.\"\"\"\n    def accumulate(val=0):\n        return val + delta\n    return accumulate\n\n>>> Promise.settle(\n... Promise.resolve(-1)  # Promise.resolve() returns a Promise that is already fulfilled with the given value.\n... .then(add(3))\n... .then(add(6))\n... .then(add(10))\n... .then(print)\n... )\n18\n```\n\nIf you call `.then()` without providing a rejection handler, the rejection is propagated down the Promise chain\nlike how an exception would bubble up the stack, until it encounters a Promise with a valid rejection handler.\n\n```python\nyield from (\n    Promise.all(...)    # Uncaught exceptions raised in\n    .then(parse_data)   # any\n    .then(update_rows)  # of\n    .then(commit)       # these\n    .catch(rollback)    # handlers will be caught here.\n    .finally_(close_connection)\n)\n```\n\n#### Dynamic chaining\n\nIf you return another Promise in your `.then()` handlers, it will get resolved, and then the remaining handlers will\nbe attached to it.\n\n```python\ndef load_page(url):\n    def executor(resolve, reject):\n        yield Request(url, callback=resolve, errback=reject)  # A Scrapy scenario\n    return Promise(executor)\n\ndef next_page(response):\n    ...\n    page_id = response.get('pageId')\n    if page_id:\n        url = f'{response.url}&continueAt={page_id}'\n        # Return a new Promise\n        return load_page(url).then(next_page)\n\nyield from load_page(start_url).then(next_page).then(finalize)\n#    Promises are inserted into the chain here ^\n# If there are multiple pages, the Promise chain will look like\n# load_page => next_page => load_page => next_page => load_page => next_page => ... => finalize\n```\n\n#### Promise aggregation functions\n\nThis library provides all 4 static Promise methods available in JavaScript: `Promise.all()`, `Promise.race()`,\n`Promise.all_settled()`, and `Promise.any()`.\n\nFor example:\n\n**`Promise.all()`**: Only resolve when all the Promises in the list are fulfilled, and reject as soon as one of them rejects:\n\n```python\nPromise.all(register_hardware, config_simulators, load_assets).then(render).catch(warn)\n```\n\n**`Promise.race()`**: Resolve/reject as soon as one of the promises fulfills/rejects:\n```python\nPromise.race(*[access(file, region) for region in [\n    'USNCalifornia',\n    'USOregon',\n    'USEOhio',\n    'USNewYork',\n]]).then(respond).catch(purge_cache)\n```\n\n## <span id=\"async\">`async/await` and asyncio</span>\n\nAlthough this library is only meant to work with async frameworks that predates [PEP 492](https://www.python.org/dev/peps/pep-0492/), it does come with\nexperimental support for the `async/await` syntax and asyncio.\n\nNote: I designed the interface between Promise and asyncio mainly to learn how async functions in Python work. If you are already working with async functions and asyncio, you will probably find this library rarely useful.\n\n----\n\nImport Promise from `notcallback.async_` instead of `notcallback`.\n\n```python\nfrom notcallback.async_ import Promise\n```\n\nThe async Promise is API-compatible with the non-async version, meaning it still works as an iterator/generator. \n\nHowever, with async Promise:\n- `Promise` can be `await`ed\n\n    `await` will return the Promise's value if it fulfills, or raise an exception if it rejects. This is very similar\n    to how `async/await` works in JavaScript.\n\n    ```python\n    def key(resolve, _):\n        yield from resolve(42)\n\n    def authenticate(key):\n        def executor(resolve, reject):\n            if key == 42.1:\n                yield from resolve()\n            else:\n                yield from reject('Access denied.')\n        return Promise(executor)\n\n    # within an async function\n    >>> await Promise(key)\n    42\n    >>> await authenticate(await Promise(key))\n    Traceback (most recent call last):\n      ...\n    notcallback.exceptions.PromiseRejection: PromiseRejection: 'Access denied.'\n    ```\n\n- If you **`yield`** an awaitable from you executor or handler function, `Promise` will schedule it for you:\n\n    ```python\n    # sleep with extra steps\n    def sleep(sec):\n        def do_sleep(resolve, reject):\n            yield asyncio.sleep(sec)  # sleep here\n            yield from resolve(repr(f'slept for {sec}s'))\n        return Promise(do_sleep)\n\n    async def main():\n        return await sleep(5)\n\n    >>> timeit.timeit(lambda: asyncio.run(main()), number=1)\n    5.003376382999988\n    ```\n\n- If you need to yield values from your functions, Promises can be used as async iterators.\n\n    ```python\n    def sleepn(n):\n        def sleep(resolve, reject):\n            for sec in range(1, n + 1):\n                yield sec\n                yield asyncio.sleep(sec)\n            yield from resolve()\n        return Promise(sleep)\n\n    async def main():\n        async for sec in sleepn(3):\n            print(sec)\n\n    >>> timeit.timeit(lambda: asyncio.run(main()), number=1)\n    1\n    2\n    3\n    6.007059991999995\n    ```\n\n- **`Promise.all()`**, **`Promise.race()`**, **`Promise.all_settled()`**, and **`Promise.any()`** now accept an additional\n`concurrently` keyword-only argument, which is default to `False`. Setting it to `True` allows Promises to run with asyncio\nconcurrently.\n\n    ```python\n    async def main():\n        return await Promise.all(\n            sleep(2),\n            sleep(3),\n            sleep(5),\n            concurrently=True,  # run Promises concurrently\n        )\n\n    >>> timeit.timeit(lambda: asyncio.run(main()), number=1)\n    5.003311451000002\n    ```\n\n    Note that for **`Promise.race()`** and **`Promise.any()`**, the time for the `await` expression to finish will always be\n    the same as that of the **longest-running** Promise. This is so that all asyncio tasks are properly `await`ed. This means that these\n    methods will not save you execution time.\n\n    The usefulness of these two methods is in that the aggregated Promise will _settle_ early, and by that, all the handlers attached\n    to the aggregated Promise will also run early:\n\n    ```python\n    def sleep(sec):\n        def do_sleep(resolve, reject):\n            yield asyncio.sleep(sec)\n            yield from resolve(f'finished sleeping for {sec}s at {time.perf_counter():.3f}')\n        return Promise(do_sleep)\n\n    async def main():\n        return await (\n            Promise.race(\n                sleep(2).then(print),\n                sleep(3).then(print),\n                sleep(5).then(print),\n                concurrently=True,\n            )\n            .then(lambda _: print(f'Promise.race fulfilled at {time.perf_counter():.3f}'))\n        )\n\n    >>> total_time = timeit.timeit(lambda: asyncio.run(main()), number=1)\n    finished sleeping for 2s at 14.542\n    Promise.race fulfilled at 14.542\n    finished sleeping for 3s at 15.541\n    finished sleeping for 5s at 17.542\n    >>> print(f'main coroutine finished in {total_time:.3f} seconds')\n    main coroutine finished in 5.003 seconds\n    ```\n\n- _Using async functions as executors or handlers is **not** supported._\n\n- _Known issues:_\n    - Using Promises with asyncio functions:\n\n        With async support, the `Promise` class will be a subclass of both `collections.abc.Generator` and\n        `collections.abc.Coroutine`.\n\n        The problem is that some asyncio functions, such as `asyncio.gather()`, perform runtime type checking on\n        their arguments to see if they are awaitables or coroutines, and act differently. And, at least for\n        `asyncio.gather()`, a `RuntimeError` will be thrown if it encounters a `yield from` expression at any point.\n\n        This means that you can no longer do things like `yield from resolve()` when using `asyncio.gather()`.\n        This is hard-wired into asyncio.\n\n        If you need to use Promises with asyncio functions, and you do not need to `yield` any intermediate values\n        (except for awaitables), then a solution will be to use the `.awaitable()` instance method, which is guaranteed to\n        return a non-coroutine awaitable, which asyncio has no issue running.\n\n## API Reference\n\n### Initializer\n\n#### **`Promise(executor)`**\n\n_Reference JavaScript function: [Promise() constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise)_\n\nTurn a function into a Promise.\n\n`executor` is a function that takes exactly 2 arguments, `resolve` and `reject`. `executor` can be a\nregular function or a generator function. When it is ready to settle the Promise, `executor` should call\neither `resolve()` or `reject()` with the fulfilled value/rejection reason as the only argument. Both\n`resolve()` and `reject()` return a new generator, and `executor` must exhaust it, either by using `yield from`\nor iterate over it.\n\n### Properties\n\n#### **`Promise().state`**\n\nReturn the state of the Promise. This is a `notcallback.base.PromiseState` Enum which can be one of 3 values:\n`PENDING`, `FULFILLED`, or `REJECTED`.\n\n#### **`Promise().value`**\n\nReturn the value of the Promise if it is fulfilled, or the reason of rejection if it is rejected.\n\nAttempting to retrieve the value of the Promise when it is still pending will result in a `PromisePending`\nexception. This is so that the `None` that the Promise initially has as its \"value\" does not get mistaken\nas a fulfillment or rejection whose value/reason is `None`.\n\nSee also: [**`Promise().get()`**](#get-method), [**`Promise().fulfilled(exc_type)`**](#fulfilled-rejected), [**`Promise().rejected(exc_type)`**](#fulfilled-rejected)\n\n#### **`Promise().is_pending`**, **`Promise().is_fulfilled`**, **`Promise().is_rejected`**, **`Promise().is_settled`**\n\nThese properties check whether a Promise is in a certain state.\n\n### Instance methods\n\n#### **`Promise().then(on_fulfill, on_reject)`**\n\n_Reference JavaScript function: [Promise.prototype.then()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)_\n\nReturn a new Promise that waits for this Promise to settle and then reacts accordingly.\n\nAccepts 1 to 2 arguments. Must be callable.\n\nIf this Promise (the Promise whose `.then` is called) is fulfilled, `on_fulfill()` will be called with the fulfilled value;\nif this Promise is rejected, `on_reject()` will be called with the reason of rejection.\n\n`on_reject` may be omitted, and the rejection will be reraised (if the rejection value is not an exception, it will be wrapped in a\n`PromiseRejection` exception).\n\nThe new Promise will resolve with the return value of the handler. If the returned value is another\n`Promise`, that `Promise` will be settled first, and then the new Promise (the one returned by `.then`) will adopt\nthe state and value of that `Promise`.\n\nIf the handler raises an exception, the new Promise will be rejected with that exception.\n\n#### **`Promise().catch(on_reject)`**\n\n_Reference JavaScript function: [Promise.prototype.catch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)_\n\nConvenience method for registering an exception handler. Sugar for `Promise().then(on_reject=on_reject)`.\n\n#### **`Promise().finally_(on_settle)`**\n\n_Reference JavaScript function: [Promise.prototype.finally()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally)_\n\nReturn a Promise whose handler will run regardless of how the previous Promise was settled.\n\n`on_settle` can be a function or a generator function. It will be called with no argument.\n\nThe new Promise will adopt the state and value of the previous Promise. If an exception was raised\nwhen running `on_settle`, the new Promise will reject with that exception.\n\n#### **`Promise().get(default=None)`**<span id=\"get-method\"></span>\n\nReturn the value of the Promise if it is FULFILLED, or the reason fpr rejection if its REJECTED.\n\nUnlike the `Promise().value` property, which raises if the Promise is not settled, this method\nwill return `default` if the Promise's value is None regardless of its state.\n\n#### **`Promise().fulfilled(default=None)`**, **`Promise().rejected(default=None)`**<span id=\"fulfilled-rejected\"></span>\n\nReturn the value of the Promise only if it is in the specified state\n\nReturn the default value if it is not in that state, or if the value is `None`.\n\n#### **`Promise().is_rejected_due_to(exc_type)`**\n\nCheck whether the Promise was rejected due to a specific type of exception.\n\nReturn `True` if the Promise is rejected and its value is an instance of `exc_class`, and `False` in\nall other cases.\n\n#### **`Promise().awaitable()`**\n\n_Only available in `notcallback.async_.Promise`_\n\nReturn the Promise as an awaitable.\n\n### Class methods\n\n#### **`Promise.all(*promises)`**\n\n_Reference JavaScript function: [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)_\n\nReturn a new Promise that fulfills when all the provided Promises are fulfilled and rejects if any of them is rejected.\n\nIf it fulfills, meaning all the provided Promises are fulfilled, its handlers will receive a `tuple` that contains\nthe values of all the Promises, with order preserved.\n\nIf it rejects, it is rejected with the reason of the first rejection that occurred.\n\nNote: \n- The Promises are evaluated sequentially.\n- All of the Promises will be evaluated even if one of them rejects; only the execution order is different.\n\nFor a call that looks like:\n\n```python\n>>> Promise.all(promise1, promise2, promise3).then(on_fulfill).catch(on_reject)\n```\n\nwhere none of the Promises have async capabilities (meaning they run in order), if all Promises fulfill\nsuccessfully, the execution order will be\n\n    promise1 => promise2 => promise3 => on_fulfill()\n\nIf e.g. promise2 rejects or raises an exception, it will be\n\n    promise1 => promise2 => on_reject() => promise3\n\nIf there are multiple rejections, only the first one will have any effect.\n\n_Only available in `notcallback.async_.Promise`_: accepts an additional `concurrently` keyword-only argument.\n\n#### **`Promise.race(*promises)`**\n\n_Reference JavaScript function: [Promise.race()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)_\n\nReturn a new Promise that fulfills/rejects as soon as one of the Promises fulfills/rejects.\n\nIt will adopt the state and value of the fulfilled/rejected Promise.\n\nNote:\n- The Promises are evaluated sequentially. This means that if your function does not have actual async capabilities,\nthe first Promise in the list will always \"win the race.\"\n- All of the Promises will be evaluated in all cases; only the execution order is different: the Promise's\n`on_fulfill`/`on_reject` handlers are run immediately after the first Promise has settled.\n\n_Only available in `notcallback.async_.Promise`_: accepts an additional `concurrently` keyword-only argument.\n\n#### **`Promise.all_settled(*promises)`**\n\n_Reference JavaScript function: [Promise.allSettled()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled)_\n\nReturn a new Promise that fulfills when all the Promises have settled i.e. either fulfilled or rejected.\n\nThe returned Promise always fulfills with the list of Promises provided.\n\n_Only available in `notcallback.async_.Promise`_: accepts an additional `concurrently` keyword-only argument.\n\n#### **`Promise.any(*promises)`**\n\n_Reference JavaScript function: [Promise.any()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any)_\n\nReturn a new Promise that ignores rejections among the provided Promises and fulfills upon the first fulfillment.\n\nIf all Promises reject, it will reject with a `PromiseAggregateError`.\n\nNote:\n- All Promises are evaluated regardless of their state; only the execution order is different: the Promise's\n`on_fulfill`/`on_reject` handlers are run immediately after the first Promise that was fulfilled.\n\n_Only available in `notcallback.async_.Promise`_: accepts an additional `concurrently` keyword-only argument.\n\n#### **`Promise.resolve(value)`**\n\n_Reference JavaScript function: [Promise.resolve()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)_\n\nReturn a new Promise that will resolve with `value` when it is evaluated. If the value is another Promise, this new Promise will\nadopt the state and value of that Promise.\n\n#### **`Promise.reject(reason)`**\n\n_Reference JavaScript function: [Promise.reject()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)_\n\nReturn a new Promise that will reject with `reason` when it is evaluated.\n\n#### **`Promise.settle(promise)`**\n\nA helper function that runs the Promise until it's settled and then return it. All intermediate values are discarded.\n\n## See also\n\n[promise](https://github.com/syrusakbary/promise), another Python implementation that is Promise/A+ compliant.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/monotony113/notcallback",
    "keywords": "promise async asyncio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "notcallback",
    "package_url": "https://pypi.org/project/notcallback/",
    "platform": "",
    "project_url": "https://pypi.org/project/notcallback/",
    "project_urls": {
      "Homepage": "https://github.com/monotony113/notcallback"
    },
    "release_url": "https://pypi.org/project/notcallback/0.0.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Promise-style interfaces for callback-based asynchronous libraries.",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8160969,
  "releases": {
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22f895278f1aabbb9cf0e6973cb576ff136d3a8ca3f01dc89bae7f33f93e04f6",
          "md5": "586dc290c4514dfcbb002ba27aeb3b12",
          "sha256": "749c2e96cc8ab101ab8451d3e835e92918edaeadf0585f3c1e630eedddec76dd"
        },
        "downloads": -1,
        "filename": "notcallback-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "586dc290c4514dfcbb002ba27aeb3b12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28462,
        "upload_time": "2020-09-11T02:04:34",
        "upload_time_iso_8601": "2020-09-11T02:04:34.585169Z",
        "url": "https://files.pythonhosted.org/packages/22/f8/95278f1aabbb9cf0e6973cb576ff136d3a8ca3f01dc89bae7f33f93e04f6/notcallback-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ce778146d0a037b894070ac34a6b1a5e9a1b03daaecd2e30fd49b66783e99d2",
          "md5": "eeae866113a38373aee78d6f1a0fa726",
          "sha256": "c3aa8e23d821112a069c6cb006f8e28d6ccc685efa725e5a22f292d05a932e99"
        },
        "downloads": -1,
        "filename": "notcallback-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "eeae866113a38373aee78d6f1a0fa726",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31156,
        "upload_time": "2020-09-11T02:04:37",
        "upload_time_iso_8601": "2020-09-11T02:04:37.233015Z",
        "url": "https://files.pythonhosted.org/packages/8c/e7/78146d0a037b894070ac34a6b1a5e9a1b03daaecd2e30fd49b66783e99d2/notcallback-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8rc35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a45adbeb49d2e492a13afa1c2f5918d18f99ac6dc45f8b2a5ad70ffcf23298a",
          "md5": "b2f010e17247e62b3e2c36df2c47a539",
          "sha256": "daaab58e2fef1f2aebf7366fa19b57e523f1fa376096ad8f4e749cbfd0374ce2"
        },
        "downloads": -1,
        "filename": "notcallback-0.0.8rc35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2f010e17247e62b3e2c36df2c47a539",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3, <3.6",
        "size": 28497,
        "upload_time": "2020-09-11T02:04:35",
        "upload_time_iso_8601": "2020-09-11T02:04:35.996082Z",
        "url": "https://files.pythonhosted.org/packages/0a/45/adbeb49d2e492a13afa1c2f5918d18f99ac6dc45f8b2a5ad70ffcf23298a/notcallback-0.0.8rc35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52f46cb1b60970561c10d3d3740171d93f1980ccdcc4bd995961d3e55b337695",
          "md5": "754326e31358f26754af9abf3f7afa8d",
          "sha256": "6d69b1cffe20b4b406156ed3f187b5887dc5dbe993c7a4a8d1fd0f2d0dc96f2c"
        },
        "downloads": -1,
        "filename": "notcallback-0.0.8rc35.tar.gz",
        "has_sig": false,
        "md5_digest": "754326e31358f26754af9abf3f7afa8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3, <3.6",
        "size": 31143,
        "upload_time": "2020-09-11T02:04:38",
        "upload_time_iso_8601": "2020-09-11T02:04:38.582778Z",
        "url": "https://files.pythonhosted.org/packages/52/f4/6cb1b60970561c10d3d3740171d93f1980ccdcc4bd995961d3e55b337695/notcallback-0.0.8rc35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22f895278f1aabbb9cf0e6973cb576ff136d3a8ca3f01dc89bae7f33f93e04f6",
        "md5": "586dc290c4514dfcbb002ba27aeb3b12",
        "sha256": "749c2e96cc8ab101ab8451d3e835e92918edaeadf0585f3c1e630eedddec76dd"
      },
      "downloads": -1,
      "filename": "notcallback-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "586dc290c4514dfcbb002ba27aeb3b12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28462,
      "upload_time": "2020-09-11T02:04:34",
      "upload_time_iso_8601": "2020-09-11T02:04:34.585169Z",
      "url": "https://files.pythonhosted.org/packages/22/f8/95278f1aabbb9cf0e6973cb576ff136d3a8ca3f01dc89bae7f33f93e04f6/notcallback-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ce778146d0a037b894070ac34a6b1a5e9a1b03daaecd2e30fd49b66783e99d2",
        "md5": "eeae866113a38373aee78d6f1a0fa726",
        "sha256": "c3aa8e23d821112a069c6cb006f8e28d6ccc685efa725e5a22f292d05a932e99"
      },
      "downloads": -1,
      "filename": "notcallback-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "eeae866113a38373aee78d6f1a0fa726",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31156,
      "upload_time": "2020-09-11T02:04:37",
      "upload_time_iso_8601": "2020-09-11T02:04:37.233015Z",
      "url": "https://files.pythonhosted.org/packages/8c/e7/78146d0a037b894070ac34a6b1a5e9a1b03daaecd2e30fd49b66783e99d2/notcallback-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}