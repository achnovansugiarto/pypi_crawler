{
  "info": {
    "author": "Max Burnette",
    "author_email": "mburnet2@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2.7",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Utilities"
    ],
    "description": "terrautils\n==========\n\nPython library for interfacing TERRA-REF science algorithms with the\nTERRA REF databases and workflow.\n\nThis package provides standard functions for interacting with TERRA-REF\nservices and data.\n\nTwo primary use cases: \\* interactive exploration of the TERRA REF\ndatabase and file system. \\* development of the TERRA REF pipeline.\n\nInstallation\n------------\n\nThe easiest way install terrautils is using pip and pulling from PyPI.::\n\n\n    pip install terrautils\n\nBecause this system is still under rapid development, you may need a\nspecific branch from the terrautils repository. You can either clone the\nrepository from GitHub and install locally with following commands::\n\n    git clone https://github.com/terraref/terrautils\n    git checkout <branch>\n    cd terrautils\n    pip install .\n\nOr you can install directly from GitHub with a single command::\n\n.. code:: sh\n\n    pip install https://github.com/terraref/terrautils/archive/<branch>.zip\n\n**Note:** the terrautils package depends on the GDAL library and tools.\nInstalling GDAL can most easily be accomplished at the operating system\nlevel using packages designed for your distribution. If you see errors\nabout failing to import osgeo you need to make ensure GDAL and its\npython wrappers are installed. Terrautils will work with both GDAL v1.11\nand v2.2 so whichever is available for your system should be fine.\n\nFunctions\n---------\n\n**betydb.py** functions for interacting with BETYdb, the trait and\nagronomic metadata database\n\n-  get_sites() – Gets list of stations from BETYdb, filtered by city or\n   sitename prefix if provided.\n-  submit_traits() – Submit a CSV containing traits to the BETYdb API.\n-  get_sitename_boundary() – Retrieve the clip boundary dynamically from\n   betyDB API given sitename and turns the obtained json data into a\n   geojson polygon.\n\n**extractors.py** utilities for interacting with the TERRA REF pipeline\n\n-  build_metadata() – Construct extractor metadata object ready for\n   submission to a Clowder file/dataset.\n-  get_output_directory() – Determine output directory path given root\n   path and dataset name.\n-  get_output_filename() – Determine output filename given input\n   information.\n-  is_latest_file() – Check whether the extractor-triggering file is the\n   latest file in the dataset.\n-  load_json_file() – Load contents of a .json file on disk into a JSON\n   object.\n-  error_notification() – Send an error message notification, e.g. to\n   Slack.\n-  log_to_influxdb() – Send extractor job detail summary to InfluxDB\n   instance.\n-  trigger_file_extractions_by_dataset() – Manually trigger an\n   extraction on all files in a dataset.\n-  trigger_dataset_extractions_by_collection() – Manually trigger an\n   extraction on all datasets in a collection.\n-  _search_for_key() – Check for presence of any key variants in\n   metadata. Does basic capitalization check.\n   \n**formats.py** utilities for converting numpy arrays into consistently formatted raster images and data products\n\n-  create_geotiff() – Generate output GeoTIFF file given a numpy pixel\n   array and GPS boundary.\n-  create_netcdf() – Generate output netCDF file given an input numpy\n   pixel array.\n-  create_image() – Generate output JPG/PNG file given an input numpy\n   pixel array.\n\n**gdal.py** gis utilities for raster datasets\n\n-  array_to_image() – Converts a gdalnumeric array to a Python Imaging\n   Library (PIL) Image.\n-  image_to_array() – Converts a Python Imaging Library (PIL) array to a\n   gdalnumeric image.\n-  world_to_pixel(geo_matrix, x, y) – Uses a gdal geomatrix\n   (gdal.GetGeoTransform()) to calculate the pixel location of a\n   geospatial coordinate.\n-  clip_raster(rast_path, features_path, gt=None, nodata=-9999) – Clip a\n   raster and return the clipped result in form of numpy array.\n-  get_raster_extents(fname) – Calculates the extent and the center of\n   the given raster.\n\n**metadata.py** utilities for querying and processing sensor and image\nmetadata\n\n-  clean_metadata() – Returns a standarized metadata object.\n-  get_terraref_metadata() – Combines cleaned metadata with fixed\n   metadata.\n-  get_extractor_metadata() – Returns Clowder extractor metadata.\n-  get_sensor_fixed_metadata() – Returns fixed metadata from Clowder.\n-  calculate_scan_time() –\n\n**sensors.py**\n\n-  get_sensors(station) – Get all sensors for a given station.\n-  get_sensor_filename(station, sensor, date, mode=“full”) – Gets the\n   filename for the image for the given date, sensor and station from\n   the database. If the mode is full, choose the full resolution image,\n   otherwise the reduced resolution version.\n-  get_sitename(station, date, range_=None, column=None) – Returns a\n   full sitename for the plot (or fullfield image) corresponding to the\n   given station, date, range and column.\n-  check_site(station) – Checks for valid station given the station\n   name, and return its path in the file system.\n-  check_sensor(station, sensor, date=None) – Checks for valid sensor\n   with optional date, and return its path in the file system.\n-  get_sensor_product(site, sensor) – Returns the downloadable product\n   for each site-sensor pair.\n-  get_attachment_name(site, sensor, date, product) – Encodes site,\n   sensor, and date to create a unique attachment name.\n-  plot_attachment_name(sitename, sensor, date, product) – Encodes\n   sitename, sensor, and date to create a unqiue attachment name.\n\n**spatial.py** gis helper functions\n\n-  calculate_bounding_box() – Given a set of GPS boundaries, return\n   array of 4 vertices representing the polygon.\n-  calculate_centroid() – Given a set of GPS boundaries, return lat/lon\n   of centroid.\n-  calculate_gps_bounds() – Extract bounding box geometry, depending on\n   sensor type.\n-  geom_from_metadata() – Parse location elements from metadata.\n-  _get_bounding_box_with_formula() – Convert scannerbox center\n   position & sensor field-of-view to actual bound",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://terraref.org",
    "keywords": "terraref,clowder,field crop,phenomics,computer vision,remote sensing",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "terraref-terrautils",
    "package_url": "https://pypi.org/project/terraref-terrautils/",
    "platform": "",
    "project_url": "https://pypi.org/project/terraref-terrautils/",
    "project_urls": {
      "Homepage": "https://terraref.org"
    },
    "release_url": "https://pypi.org/project/terraref-terrautils/1.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "TERRA-REF workflow utilities",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3719879,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e902665e9590038eb377657d4003b37feee46e30a40546a0c2bfc1b120de77",
          "md5": "a0af298bf8845b80c75b7d40c5d42b5a",
          "sha256": "56de08db6420cfe50d551cf3a8f4e76fd89fbe9c37ece7a2377dc8573c241149"
        },
        "downloads": -1,
        "filename": "terraref_terrautils-1.1.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "a0af298bf8845b80c75b7d40c5d42b5a",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "requires_python": null,
        "size": 163897,
        "upload_time": "2018-03-30T14:27:03",
        "upload_time_iso_8601": "2018-03-30T14:27:03.219762Z",
        "url": "https://files.pythonhosted.org/packages/06/e9/02665e9590038eb377657d4003b37feee46e30a40546a0c2bfc1b120de77/terraref_terrautils-1.1.1-py2.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0040ba71ca07479b768c6416e5d5401ff24cc9d6482e86988e5d6cf75b658ccd",
          "md5": "c084a9df29ec8714118a5ea892d7be92",
          "sha256": "7b2ad61e7d0312c5ae99f574d4262918c89e779989f6ab871743b11ce11967eb"
        },
        "downloads": -1,
        "filename": "terraref-terrautils-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c084a9df29ec8714118a5ea892d7be92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33907,
        "upload_time": "2018-03-30T14:27:02",
        "upload_time_iso_8601": "2018-03-30T14:27:02.164374Z",
        "url": "https://files.pythonhosted.org/packages/00/40/ba71ca07479b768c6416e5d5401ff24cc9d6482e86988e5d6cf75b658ccd/terraref-terrautils-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2b0224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f",
          "md5": "ac0ccef278caa51ae991c684b4bd5402",
          "sha256": "f56e30bd9a0e2eb6e9434d5d2dd043556ff04efc545856c9a1b4723f2c4617bc"
        },
        "downloads": -1,
        "filename": "terraref-terrautils-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ac0ccef278caa51ae991c684b4bd5402",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34303,
        "upload_time": "2018-03-30T14:30:18",
        "upload_time_iso_8601": "2018-03-30T14:30:18.733454Z",
        "url": "https://files.pythonhosted.org/packages/d2/b0/224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f/terraref-terrautils-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2b0224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f",
        "md5": "ac0ccef278caa51ae991c684b4bd5402",
        "sha256": "f56e30bd9a0e2eb6e9434d5d2dd043556ff04efc545856c9a1b4723f2c4617bc"
      },
      "downloads": -1,
      "filename": "terraref-terrautils-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ac0ccef278caa51ae991c684b4bd5402",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34303,
      "upload_time": "2018-03-30T14:30:18",
      "upload_time_iso_8601": "2018-03-30T14:30:18.733454Z",
      "url": "https://files.pythonhosted.org/packages/d2/b0/224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f/terraref-terrautils-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}