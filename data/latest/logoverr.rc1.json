{
  "info": {
    "author": "Priyansh",
    "author_email": "17bcs140@ietdavv.edu.in",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h2>Documentation</h2>\n\nIn order to use this logger, all you need to do is to import it in your machine using:\n<pre>\n    <code>\n        pip install logover\n    </code>\n</pre>\n\nAfter installation here comes the configuration part, one need to do in order to use this logger in flask application. There are basically 5 configurable parameters are there in the logger named: \n    <p>1.buffer size</p>\n    <p>2.buffer time-out time</p>\n    <p>3.project id(from viasocket)</p>\n    <p>4.auth key(from viasocket)</p>\n    <p>5.END_POINT_TO_SIMULATE_DB(this the end point, from where logger gets two parameters called includes(it is list of routes whose logges to be send)and second is levels(it is list of logging levels whose logs to be send))</p>\n\n<i><b>Note: Property number 3, 4 and 5 are mandatory to set, otherwise you will get error.</b></i>\n\nRefer below code snippet to configure above parameters in your flask application:\n<pre>\n    <code>\nlogover.set_buffer_size(2)\nlogover.set_buffer_timeout(2)\nlogover.set_project_id('szfb72eUt5eRaWxaXE6J')\nlogover.set_auth_key('ucdPnQgLqT2GPsquD9xv')\nlogover.set_END_POINT_TO_SIMULATE_DB(\"http://127.0.0.1:9000/\")\n    </code>\n</pre>\n\n<h2>WAIT A MIN!!!</H2>\n<H3>Before you move further, please make sure that you have a endpoint which returns two lists, includes and levels.</H3>\nFor your reference, below is sample application which does the required function. For now you can create a app \"simulating_db.py\" in your system and paste the below code.\n<pre><code>\nfrom flask import Flask,jsonify, request\nimport json\n\n\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\",\"GET\"])\ndef setName():\n    if request.method == 'GET':\n        includes = ['/login']\n        levels=['WARN']\n        res = [includes,levels]\n        print(res)\n        return jsonify(res)\n</code></pre>\n\nWe are not yet done with this step, before running main application, start this app:\n\ngo to path where you created above file->\n>run \"set flask_app=simulating_db.py\"\n\n>run \"set flask_env=development\"\n\n>run \"flask run --port=9000\"\n\n<h5><i>hasshh!! we are done with this. Lets move forward.</i></h5>\n\nAfter successfully completing above step,lets move to the core functionality of our logger i.e logging request and response data. For this copy and paste below code in the end of your flask application.\n<pre><code>\n@app.before_request\ndef start_timer():\n    print('before every request')\n    g.start = time.time()\n\n@app.after_request\ndef fun(response):\n    logover.log_request(response)\n    return response\n</code></pre>\n\n<h2>Heads up!! We are done.</h2>\n\nlogger does not stop serving here only, it has something more for you. Apart from request and response logs, if you want to log info or error or warning logs then for this logger has three more methods. you can use this methods anywhere you want.\n\nfor reference see below snippet.\n<pre>\n<h3>info() method</h3><code>logover.info('Information message')\n</code>\n</pre>\n\n<pre>\n<h3>warn() method</h3><code>logover.warn('Warning!!')\n</code>\n</pre>\n\n<pre>\n<h3>error() method</h3><code>logover.error('Opps!!Error!')\n</code>\n</pre>\n\n<h4>we are almost done now...but for better understanding about how to use this logger, have a look at complete flask application which uses this logger.</h4>\n\n<pre><code>\nimport datetime\nimport time\nimport json\n\nimport pylogger\n\nfrom flask import Flask, g, request\n\n\nlogover.set_buffer_size(2)\nlogover.set_buffer_timeout(2)\nlogover.set_project_id('szfb72eUt5eRaWxaXE6J')\nlogover.set_auth_key('ucdPnQgLqT2GPsquD9xv')\nlogover.set_END_POINT_TO_SIMULATE_DB(\"http://127.0.0.1:9000/\")\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    logover.info('inside index')\n    print(\"index is running!\")\n    return \"Hello world\"\n\n@app.route(\"/login\")\ndef login():\n    logover.error('inside login')\n    print(\"on login page!\")\n    return \"login page\"\n\n@app.route(\"/register\")\ndef register():\n    logover.warn('inside register')\n    print(\"on register page!\")\n    return \"register page\"\n\n@app.route(\"/logout\")\ndef logout():\n    logover.info('inside logout')\n    print(\"on logout page!\")\n    return \"logout page\"\n\n\nif __name__ == \"__main__\":\n    app.run()\n\n\n\n@app.before_request\ndef start_timer():\n    print('before every request')\n    g.start = time.time()\n\n\n@app.after_request\ndef fun(response):\n    logover.log_request(response)\n    return response\n\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logoverr",
    "package_url": "https://pypi.org/project/logoverr/",
    "platform": "",
    "project_url": "https://pypi.org/project/logoverr/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/logoverr/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=2.0",
    "summary": "module to log requests and response",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7486666,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d1fa0ea3508580abc93af259dc690143cd5a3fea3fabf980b7ab5365e17d9ae",
          "md5": "34c1ae45983f4da050a08cb735423189",
          "sha256": "7c1d0d74c62a3b4498c8bac4a80c7053503b57e990fbd219ce1c79149ef9c624"
        },
        "downloads": -1,
        "filename": "logoverr-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34c1ae45983f4da050a08cb735423189",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.0",
        "size": 5545,
        "upload_time": "2020-06-16T08:34:38",
        "upload_time_iso_8601": "2020-06-16T08:34:38.762257Z",
        "url": "https://files.pythonhosted.org/packages/8d/1f/a0ea3508580abc93af259dc690143cd5a3fea3fabf980b7ab5365e17d9ae/logoverr-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d1fa0ea3508580abc93af259dc690143cd5a3fea3fabf980b7ab5365e17d9ae",
        "md5": "34c1ae45983f4da050a08cb735423189",
        "sha256": "7c1d0d74c62a3b4498c8bac4a80c7053503b57e990fbd219ce1c79149ef9c624"
      },
      "downloads": -1,
      "filename": "logoverr-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34c1ae45983f4da050a08cb735423189",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.0",
      "size": 5545,
      "upload_time": "2020-06-16T08:34:38",
      "upload_time_iso_8601": "2020-06-16T08:34:38.762257Z",
      "url": "https://files.pythonhosted.org/packages/8d/1f/a0ea3508580abc93af259dc690143cd5a3fea3fabf980b7ab5365e17d9ae/logoverr-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}