{
  "info": {
    "author": "Mikuláš Poul",
    "author_email": "git@mikulaspoul.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Framework :: Django :: 4.2",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# SQL Views for Postgres\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nAdds first-class support for [PostgreSQL Views][pg-views] in the Django ORM.\nFork of the [django-pgviews-redux][django-pgviews-redux] by [mypebble][xelixdev] with support for Django 3.2+ and schema postgres.\n\n[pg-views]: http://www.postgresql.org/docs/9.1/static/sql-createview.html\n[django-pgviews-redux]: https://github.com/xelixdev/django-pgviews-redux\n[xelixdev]: https://github.com/xelixdev\n\n## Installation\n\nInstall via pip:\n\n    pip install django-pgviews-schema\n\nAdd to installed applications in settings.py:\n\n```python\nINSTALLED_APPS = (\n  # ...\n  'django_pgviews',\n)\n```\n\n## Examples\n\n```python\nfrom django.db import models\n\nfrom django_pgviews import view as pg\n\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n    is_preferred = models.BooleanField(default=False)\n\n    class Meta:\n        app_label = 'myapp'\n\nclass PreferredCustomer(pg.View):\n    projection = ['myapp.Customer.*',]\n    dependencies = ['myapp.OtherView',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      app_label = 'myapp'\n      db_table = 'myapp_preferredcustomer'\n      managed = False\n```\n\n**NOTE** It is important that we include the `managed = False` in the `Meta` so\nDjango 1.7 migrations don't attempt to create DB tables for this view.\n\nThe SQL produced by this might look like:\n\n```postgresql\nCREATE VIEW myapp_preferredcustomer AS\nSELECT * FROM myapp_customer WHERE is_preferred = TRUE;\n```\n\nTo create all your views, run `python manage.py sync_pgviews`\n\nYou can also specify field names, which will map onto fields in your View:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\n\nclass PreferredCustomer(pg.View):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n```\n\n## Usage\n\nTo map onto a View, simply extend `pg_views.view.View`, assign SQL to the\n`sql` argument and define a `db_table`. You must _always_ set `managed = False`\non the `Meta` class.\n\nViews can be created in a number of ways:\n\n1. Define fields to map onto the VIEW output\n2. Define a projection that describes the VIEW fields\n\n### Define Fields\n\nDefine the fields as you would with any Django Model:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\n\nclass PreferredCustomer(pg.View):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n\n    class Meta:\n      managed = False\n      db_table = 'my_sql_view'\n```\n\n### Define Projection\n\n`django-pgviews` can take a projection to figure out what fields it needs to\nmap onto for a view. To use this, set the `projection` attribute:\n\n```python\nfrom django_pgviews import view as pg\n\n\nclass PreferredCustomer(pg.View):\n    projection = ['myapp.Customer.*',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      db_table = 'my_sql_view'\n      managed = False\n```\n\nThis will take all fields on `myapp.Customer` and apply them to\n`PreferredCustomer`\n\n## Features\n\n### Updating Views\n\nSometimes your models change and you need your Database Views to reflect the new\ndata. Updating the View logic is as simple as modifying the underlying SQL and\nrunning:\n\n```\npython manage.py sync_pgviews --force\n```\n\nThis will forcibly update any views that conflict with your new SQL.\n\nset DEFAULT_SCHEMA in your settings if the currentSchema postgres is different of \"public\"\n\n### Dependencies\n\nYou can specify other views you depend on. This ensures the other views are\ninstalled beforehand. Using dependencies also ensures that your views get\nrefreshed correctly when using `sync_pgviews --force`.\n\n**Note:** Views are synced after the Django application has migrated and adding\nmodels to the dependency list will cause syncing to fail.\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\nclass PreferredCustomer(pg.View):\n    dependencies = ['myapp.OtherView',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      app_label = 'myapp'\n      db_table = 'myapp_preferredcustomer'\n      managed = False\n```\n\n### Materialized Views\n\nPostgres 9.3 and up supports [materialized views](http://www.postgresql.org/docs/current/static/sql-creatematerializedview.html)\nwhich allow you to cache the results of views, potentially allowing them\nto load faster.\n\nHowever, you do need to manually refresh the view. To do this automatically,\nyou can attach [signals](https://docs.djangoproject.com/en/1.8/ref/signals/)\nand call the refresh function.\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n    is_preferred = models.BooleanField(default=True)\n\n\nclass PreferredCustomer(pg.MaterializedView):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n\n\n@receiver(post_save, sender=Customer)\ndef customer_saved(sender, action=None, instance=None, **kwargs):\n    PreferredCustomer.refresh()\n```\n\n#### Concurrent refresh\n\nPostgres 9.4 and up allow materialized views to be refreshed concurrently, without blocking reads, as long as a\nunique index exists on the materialized view. To enable concurrent refresh, specify the name of a column that can be\nused as a unique index on the materialized view. Unique index can be defined on more than one column of a materialized\nview. Once enabled, passing `concurrently=True` to the model's refresh method will result in postgres performing the\nrefresh concurrently. (Note that the refresh method itself blocks until the refresh is complete; concurrent refresh is\nmost useful when materialized views are updated in another process or thread.)\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT id, name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\nclass PreferredCustomer(pg.MaterializedView):\n    concurrent_index = 'id, post_code'\n    sql = VIEW_SQL\n\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n\n@receiver(post_save, sender=Customer)\ndef customer_saved(sender, action=None, instance=None, **kwargs):\n    PreferredCustomer.refresh(concurrently=True)\n```\n\n#### Indexes\n\nAs the materialized view isn't defined through the usual Django model fields, any indexes defined there won't be\ncreated on the materialized view. Luckily Django provides a Meta option called `indexes` which can be used to add custom\nindexes to models. `pg_views` supports defining indexes on materialized views using this option.\n\nIn the following example, one index will be created, on the `name` column. The `db_index=True` on the field definition\nfor `post_code` will get ignored.\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT id, name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\nclass PreferredCustomer(pg.MaterializedView):\n    sql = VIEW_SQL\n\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20, db_index=True)\n\n    class Meta:\n        managed = False  # don't forget this, otherwise Django will think it's a regular model\n        indexes = [\n             models.Index(fields=[\"name\"]),\n        ]\n```\n\n#### WITH NO DATA\n\nMaterialized views can be created either with or without data. By default, they are created with data, however\n`pg_views` supports creating materialized views without data, by defining `with_data = False` for the\n`pg.MaterializedView` class. Such views then do not support querying until the first\nrefresh (raising `django.db.utils.OperationalError`).\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\nclass PreferredCustomer(pg.MaterializedView):\n    concurrent_index = 'id, post_code'\n    sql = \"\"\"\n        SELECT id, name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n    \"\"\"\n    with_data = False\n\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n```\n\n#### Conditional materialized views recreate\n\nSince all materialized views are recreated on running `migrate`, it can lead to obsolete recreations even if there\nwere no changes to the definition of the view. To prevent this, version 0.7.0 and higher contain a feature which\nchecks existing materialized view definition in the database (if the mat. view exists at all) and compares the\ndefinition with the one currently defined in your `pg.MaterializedView` subclass. If the definition matches\nexactly, the re-create of materialized view is skipped.\n\nThis feature is enabled by setting the `MATERIALIZED_VIEWS_CHECK_SQL_CHANGED` in your Django settings to `True`,\nwhich enables the feature when running `migrate`. The command `sync_pgviews` uses this setting as well,\nhowever it also has switches `--enable-materialized-views-check-sql-changed` and\n`--disable-materialized-views-check-sql-changed` which override this setting for that command.\n\nThis feature also takes into account indexes. When a view is deemed not needing recreating, the process will still\ncheck the indexes on the table and delete any extra indexes and create any missing indexes. This reconciliation\nis done through the index name, so if you use custom names for your indexes, it might happen that it won't get updated\non change of the content but not the name.\n\n### Custom Schema\n\nYou can define any table name you wish for your views. They can even live inside your own custom\n[PostgreSQL schema](http://www.postgresql.org/docs/current/static/ddl-schemas.html).\n\n```python\nfrom django_pgviews import view as pg\n\n\nclass PreferredCustomer(pg.View):\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      db_table = 'my_custom_schema.preferredcustomer'\n      managed = False\n```\n\n### Dynamic View SQL\n\nIf you need a dynamic view SQL (for example if it needs a value from settings in it), you can override the `run_sql`\nclassmethod on the view to return the SQL. The method should return a namedtuple `ViewSQL`, which contains the query\nand potentially the params to `cursor.execute` call. Params should be either None or a list of parameters for the query.\n\n```python\nfrom django.conf import settings\nfrom django_pgviews import view as pg\n\n\nclass PreferredCustomer(pg.View):\n    @classmethod\n    def get_sql(cls):\n        return pg.ViewSQL(\n            \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE and created_at >= %s;\"\"\",\n            [settings.MIN_PREFERRED_CUSTOMER_CREATED_AT]\n        )\n\n    class Meta:\n      db_table = 'preferredcustomer'\n      managed = False\n```\n\n### Sync Listeners\n\ndjango-pgviews 0.5.0 adds the ability to listen to when a `post_sync` event has\noccurred.\n\n#### `view_synced`\n\nFired every time a VIEW is synchronised with the database.\n\nProvides args:\n\n- `sender` - View Class\n- `update` - Whether the view to be updated\n- `force` - Whether `force` was passed\n- `status` - The result of creating the view e.g. `EXISTS`, `FORCE_REQUIRED`\n- `has_changed` - Whether the view had to change\n\n#### `all_views_synced`\n\nSent after all Postgres VIEWs are synchronised.\n\nProvides args:\n\n- `sender` - Always `None`\n\n### Multiple databases\n\ndjango-pgviews can use multiple databases. Similar to Django's `migrate`\nmanagement command, our commands (`clear_pgviews`, `refresh_pgviews`,\n`sync_pgviews`) operate on one database at a time. You can specify which\ndatabase to synchronize by providing the `--database` option. For example:\n\n```shell\npython manage.py sync_pgviews  # uses default db\npython manage.py sync_pgviews --database=myotherdb\n```\n\nUnless using custom routers, django-pgviews will sync all views to the specified\ndatabase. If you want to interact with multiple databases automatically, you'll\nneed to take some additional steps. Please refer to Django's [Automatic database\nrouting](https://docs.djangoproject.com/en/3.2/topics/db/multi-db/#automatic-database-routing)\nto pin views to specific databases.\n\n## Django Compatibility\n\n<table>\n  <thead>\n    <tr>\n      <th>Django Version</th>\n      <th>Django-PGView Version</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1.4 and down</td>\n      <td>Unsupported</td>\n    </tr>\n    <tr>\n      <td>1.5</td>\n      <td>0.0.1</td>\n    </tr>\n    <tr>\n      <td>1.6</td>\n      <td>0.0.3</td>\n    </tr>\n    <tr>\n      <td>1.7</td>\n      <td>0.0.4</td>\n    </tr>\n    <tr>\n      <td>1.9</td>\n      <td>0.1.0</td>\n    </tr>\n    <tr>\n      <td>1.10</td>\n      <td>0.2.0</td>\n    </tr>\n    <tr>\n      <td>2.2</td>\n      <td>0.6.0</td>\n    </tr>\n    <tr>\n      <td>3.0</td>\n      <td>0.6.0</td>\n    </tr>\n    <tr>\n      <td>3.1</td>\n      <td>0.6.1</td>\n    <tr>\n      <td>3.2</td>\n      <td>0.7.1</td>\n    </tr>\n    <tr>\n      <td>4.0</td>\n      <td>0.8.1</td>\n    </tr>\n    <tr>\n      <td>4.1</td>\n      <td>0.8.4</td>\n    </tr>\n  </tbody>\n</table>\n\n## Python 3 Support\n\nDjango PGViews Redux only officially supports Python 3.7+, it might work on 3.6, but there's no guarantees.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pedrohsbarbosa99/django-pgviews-schema",
    "keywords": "",
    "license": "Public Domain",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pgviews-schema",
    "package_url": "https://pypi.org/project/django-pgviews-schema/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-pgviews-schema/",
    "project_urls": {
      "Homepage": "https://github.com/pedrohsbarbosa99/django-pgviews-schema"
    },
    "release_url": "https://pypi.org/project/django-pgviews-schema/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create and manage Postgres SQL Views in Django",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17464199,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32e2241aa22633ef3131194e867b86d4c8e2133fcbd49388f63d00f01b94717b",
          "md5": "ede03d355196fda4e9ca2c29898db91b",
          "sha256": "210fbb37677b2640e670051bfd25ed4932743cadb636023ca761a755c5306106"
        },
        "downloads": -1,
        "filename": "django-pgviews-schema-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ede03d355196fda4e9ca2c29898db91b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19329,
        "upload_time": "2023-03-24T18:22:33",
        "upload_time_iso_8601": "2023-03-24T18:22:33.038600Z",
        "url": "https://files.pythonhosted.org/packages/32/e2/241aa22633ef3131194e867b86d4c8e2133fcbd49388f63d00f01b94717b/django-pgviews-schema-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20066c34fa4763da7407e9cfe1202563c91c1b73334b1f604ee2767850329b84",
          "md5": "97d430f9edddda9d3e854c971d978d51",
          "sha256": "22892140a7d59dc85c07901e86557ba123e9fdf7dcf4d7915e14759487fcb36f"
        },
        "downloads": -1,
        "filename": "django-pgviews-schema-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "97d430f9edddda9d3e854c971d978d51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19418,
        "upload_time": "2023-03-27T16:51:17",
        "upload_time_iso_8601": "2023-03-27T16:51:17.837499Z",
        "url": "https://files.pythonhosted.org/packages/20/06/6c34fa4763da7407e9cfe1202563c91c1b73334b1f604ee2767850329b84/django-pgviews-schema-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20066c34fa4763da7407e9cfe1202563c91c1b73334b1f604ee2767850329b84",
        "md5": "97d430f9edddda9d3e854c971d978d51",
        "sha256": "22892140a7d59dc85c07901e86557ba123e9fdf7dcf4d7915e14759487fcb36f"
      },
      "downloads": -1,
      "filename": "django-pgviews-schema-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "97d430f9edddda9d3e854c971d978d51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19418,
      "upload_time": "2023-03-27T16:51:17",
      "upload_time_iso_8601": "2023-03-27T16:51:17.837499Z",
      "url": "https://files.pythonhosted.org/packages/20/06/6c34fa4763da7407e9cfe1202563c91c1b73334b1f604ee2767850329b84/django-pgviews-schema-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}