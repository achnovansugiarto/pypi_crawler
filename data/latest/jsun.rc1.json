{
  "info": {
    "author": "Wyatt Baldwin",
    "author_email": "self@wyattbaldwin.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# jsun\n\nThis is an alternative JSON decoder/encoder that supports some extra\nfeatures. It takes a *lot* of inspiration from the `json` module in the\nstandard library and exposes the same high level API: `load`, `loads`,\n`dump`, `dumps`, `JSONDecoder`, and `JSONEncoder`.\n\nIn many cases, `jsun` can be swapped in by installing the package then\nsimply updating imports to use `jsun` instead of `json`.\n\n## Extra decoding features\n\n- Trailing commas\n \n- Line comments starting with //\n \n- All valid Python ints and floats:\n  - Binary, octal, hex\n  - Underscore separators\n  - Unary plus operator\n\n- Math constants:\n  - inf, nan, E, π, PI, τ, TAU\n  - Infinity, NaN\n\n- Literal (unquoted) dates and times:\n  - 2021-06\n  - 2021-06-23\n  - 2021-06-23T12:00\n  - 2021-06-23T12:00Z\n  - 2021-06-23T12:00-07:00\n  - 12:00 (today's date at noon)\n\n- Decoding an empty string will produce `None` rather than an exception\n  (an exception will be raised if extras are disabled)\n\n- *All* parsing methods can be overridden if some additional\n  customization is required. In particular, the object and array\n  parsers can be overridden\n\n- A pre-parse method can be provided to handle values before the regular\n  JSON parsers are applied\n\n- A fallback parsing method can be provided to handle additional types\n  of values if none of the default parsers are suitable\n\n- When errors are encountered, specific exceptions are raised (all\n  derived from the built-in `ValueError`)\n\n## Extra encoding features\n\nThe `jsun` encoder is very similar to the standard library encoder (and\nis in fact a subclass of `json.JSONEncoder`). Currently, it supports\nonly a couple of extra features:\n\n- Date objects are converted to ISO format by default\n- Datetime objects are converted to ISO format by default\n\nNOTE: There is some asymmetry here. E.g., date and datetime objects\nshould be converted to literals instead of quoted strings.\n\n## Disabling the extra features\n\n*All* the extra features can be turned off with a flag:\n\n    >>> from jsun import decode\n    >>> decode(\"[1, 2, 3,]\")\n    [1, 2, 3]\n    >>> decode(\"[1, 2, 3,]\", enable_extras=False)\n    <exception traceback>\n\n## Differences between jsun and standard library json\n\n- An empty string input is converted to `None` rather than raising an\n  exception (only if extras are enabled).\n\n- When decoding, instead of `object_hook` and `object_hook_pairs`,\n  there's just a single `object_converter` argument. It's essentially\n  the same as `object_hook`. `object_hook_pairs` seems unnecessary\n  nowadays since `dict`s are ordered.\n\n- The default object type is `jsun.obj.JSONObject` instead of `dict`. A\n  `JSONObject` is a bucket of properties that can be accessed via dotted\n  or bracket notation. Pass `object_converter=None` to get back\n  `dict`s instead.\n\n## Config files\n\nA bonus feature is that configuration can be loaded from INI files\nwhere the keys are split on dots to create sub-objects and the values\nare encoded as JSON.\n\nThis is quite similar to TOML and some of the features of `jsun`, like\nliteral dates, are inspired by TOML.\n\nThis feature was originally developed in 2014 as part of the\n`django-local-settings` project, about a year and half after TOML was\nfirst released but before I'd heard of it.\n\n### Differences with TOML\n\n- Parentheses are used instead of quotes to avoid splitting on dots\n- Objects created using `{}` syntax (AKA \"inline tables\" in TOML) can\n  span multiple lines\n- There are no arrays of tables\n- Others I'm not thinking of at the moment...\n\n## About the name\n\nMy first choice was `jsonish` but that's already taken. My second choice\nwas `jsonesque` but it's also taken, and it's hard to type. `jsun` is\nnice because it's easy to type and easy to swap in for `json` by just\nchanging a single letter.\n\n## Testing\n\nThere's a suite of unit tests, which also tests against the JSON checker\nfiles at https://json.org/JSON_checker/. Coverage is currently at 82%.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wylee/jsun",
    "keywords": "json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsun",
    "package_url": "https://pypi.org/project/jsun/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsun/",
    "project_urls": {
      "Homepage": "https://github.com/wylee/jsun",
      "Repository": "https://github.com/wylee/jsun"
    },
    "release_url": "https://pypi.org/project/jsun/1.0a1/",
    "requires_dist": [
      "arrow (>=1.1.0,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "JSON encoding & decoding with extra features",
    "version": "1.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11922780,
  "releases": {
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e62bb6fec43b8b35b41d1276e3b0b685615f5da0c1a363d6499f1ccc49c20184",
          "md5": "5c84dce9d71118dd4f458f1ac4d668f2",
          "sha256": "c46efe7dd852293690a8e0bdf5e2425e90dd09c7cf3190be18d4f100383a342f"
        },
        "downloads": -1,
        "filename": "jsun-1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c84dce9d71118dd4f458f1ac4d668f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 17786,
        "upload_time": "2021-11-04T06:06:50",
        "upload_time_iso_8601": "2021-11-04T06:06:50.322658Z",
        "url": "https://files.pythonhosted.org/packages/e6/2b/b6fec43b8b35b41d1276e3b0b685615f5da0c1a363d6499f1ccc49c20184/jsun-1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f63b516ea151d6490bd61467fb0bd5feb9cdc11bf78f50558ef91e026089b84",
          "md5": "5402ecb103df4fe09f428aafc8d5a74e",
          "sha256": "62f529184c17aa9efd3c3f5b77c83aa74a517512a208e953c5cbaad966c9d0de"
        },
        "downloads": -1,
        "filename": "jsun-1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "5402ecb103df4fe09f428aafc8d5a74e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 14856,
        "upload_time": "2021-11-04T06:06:52",
        "upload_time_iso_8601": "2021-11-04T06:06:52.155348Z",
        "url": "https://files.pythonhosted.org/packages/8f/63/b516ea151d6490bd61467fb0bd5feb9cdc11bf78f50558ef91e026089b84/jsun-1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e62bb6fec43b8b35b41d1276e3b0b685615f5da0c1a363d6499f1ccc49c20184",
        "md5": "5c84dce9d71118dd4f458f1ac4d668f2",
        "sha256": "c46efe7dd852293690a8e0bdf5e2425e90dd09c7cf3190be18d4f100383a342f"
      },
      "downloads": -1,
      "filename": "jsun-1.0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c84dce9d71118dd4f458f1ac4d668f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 17786,
      "upload_time": "2021-11-04T06:06:50",
      "upload_time_iso_8601": "2021-11-04T06:06:50.322658Z",
      "url": "https://files.pythonhosted.org/packages/e6/2b/b6fec43b8b35b41d1276e3b0b685615f5da0c1a363d6499f1ccc49c20184/jsun-1.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f63b516ea151d6490bd61467fb0bd5feb9cdc11bf78f50558ef91e026089b84",
        "md5": "5402ecb103df4fe09f428aafc8d5a74e",
        "sha256": "62f529184c17aa9efd3c3f5b77c83aa74a517512a208e953c5cbaad966c9d0de"
      },
      "downloads": -1,
      "filename": "jsun-1.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "5402ecb103df4fe09f428aafc8d5a74e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 14856,
      "upload_time": "2021-11-04T06:06:52",
      "upload_time_iso_8601": "2021-11-04T06:06:52.155348Z",
      "url": "https://files.pythonhosted.org/packages/8f/63/b516ea151d6490bd61467fb0bd5feb9cdc11bf78f50558ef91e026089b84/jsun-1.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}