{
  "info": {
    "author": "Michael Chow, Filip Schouwenaars",
    "author_email": "michael@datacamp.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sqlwhat\r\n\r\n[![Build Status](https://travis-ci.org/datacamp/sqlwhat.svg?branch=master)](https://travis-ci.org/datacamp/sqlwhat)\r\n[![codecov](https://codecov.io/gh/datacamp/sqlwhat/branch/master/graph/badge.svg)](https://codecov.io/gh/datacamp/sqlwhat)\r\n[![PyPI version](https://badge.fury.io/py/sqlwhat.svg)](https://badge.fury.io/py/sqlwhat)\r\n\r\n`sqlwhat` enables you to write Submission Correctness Tests (SCTs) for interactive SQL exercises on DataCamp.\r\n\r\n- If you are new to teaching on DataCamp, check out https://authoring.datacamp.com.\r\n- If you want to learn what SCTs are and how they work, visit [this article](https://authoring.datacamp.com/courses/exercises/technical-details/sct.html) specifically.\r\n- For more information about writing SCTs for SQL exercises, consult https://sqlwhat.readthedocs.io.\r\n\r\n## Installing\r\n\r\n```\r\npip install sqlwhat     # install from pypi\r\nmake install            # install from source\r\n```\r\n\r\n## Reference\r\n\r\n* API Docs: https://sqlwhat.readthedocs.io\r\n* AST viewer: https://ast-viewer.datacamp.com\r\n* Extensions: https://github.com/datacamp/sqlwhat-ext\r\n\r\n## Raising issues with how SQL is parsed\r\n\r\nPlease raise an issue on the respsective parser repo:\r\n\r\n* [antlr-tsql](https://github.com/datacamp/antlr-tsql)\r\n* [antlr-psql](https://github.com/datacamp/antlr-plsql)\r\n\r\n## Basic Use\r\n\r\n```python\r\nfrom sqlwhat.State import State    # State holds info needed for tests\r\nfrom sqlwhat.Reporter import Reporter\r\nfrom sqlwhat.checks import *       # imports all SCTs\r\nfrom sqlalchemy import create_engine\r\n\r\ncode = \"SELECT * FROM artists WHERE id < 100\"\r\n\r\nstate = State(\r\n    student_code = code,\r\n    solution_code = code,\r\n    pre_exercise_code = \"\",\r\n    student_conn = create_engine('sqlite:///'),\r\n    solution_conn = create_engine('sqlite:///'),\r\n    student_result = {'id': [1,2,3], 'name': ['greg', 'jon', 'martha']},\r\n    solution_result = {'id': [1,2,3], 'name': ['toby', 'keith', 'deb']},\r\n    reporter = Reporter()\r\n    )\r\n\r\n# test below passes, since code is equal for student and solution\r\nhas_equal_ast(state)\r\n\r\n# test below raises a TestFail error, since 'name' col of results\r\n# doesn't match between student and solution results\r\ncheck_result(state)\r\n# shows error data\r\nstate.reporter.build_payload()\r\n\r\n# can also be done using a chain\r\nfrom sqlwhat.sct_syntax import Ex\r\nEx(state).check_result()\r\n```\r\n\r\n## Running unit tests\r\n\r\n```bash\r\npytest -m \"not backend\"\r\n```\r\n\r\nIf you also want to run the backend tests, you need to set a `GITHUB_TOKEN` environment variable with access to the (private) `sqlbackend` repository.\r\nAfter this, you can:\r\n\r\n```bash\r\nmake install\r\npytest\r\n```\r\n\r\n### Rules of testing\r\n\r\n1. Running queries is the backend's job\r\n2. If a test doesn't run queries, it doesn't need the backend\r\n3. Very few tests should run queries\r\n\r\n## Building Docs\r\n\r\nInstall sqlwhat and run ..\r\n\r\n```\r\ncd docs\r\nmake html\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/4rtess/sqlwhat",
    "keywords": "",
    "license": "",
    "maintainer": "Jeroen Hermans",
    "maintainer_email": "content-engineering@datacamp.com",
    "name": "tcs-sqlWhat",
    "package_url": "https://pypi.org/project/tcs-sqlWhat/",
    "platform": null,
    "project_url": "https://pypi.org/project/tcs-sqlWhat/",
    "project_urls": {
      "Homepage": "https://github.com/4rtess/sqlwhat"
    },
    "release_url": "https://pypi.org/project/tcs-sqlWhat/3.8.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Submission correctness tests for SQL",
    "version": "3.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13345750,
  "releases": {
    "3.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce068761443dee9def4d96176a3906d1ebd14f101307175cb30c2e24608cdda",
          "md5": "78d7f88d247116ee86f7a2133541d324",
          "sha256": "a5750b4fc7a3c16a40351224f6352fd7032ca254e0b7278d409c7eb1bf6803ff"
        },
        "downloads": -1,
        "filename": "tcs-sqlWhat-3.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78d7f88d247116ee86f7a2133541d324",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23785,
        "upload_time": "2022-03-30T12:19:44",
        "upload_time_iso_8601": "2022-03-30T12:19:44.723758Z",
        "url": "https://files.pythonhosted.org/packages/fc/e0/68761443dee9def4d96176a3906d1ebd14f101307175cb30c2e24608cdda/tcs-sqlWhat-3.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce068761443dee9def4d96176a3906d1ebd14f101307175cb30c2e24608cdda",
        "md5": "78d7f88d247116ee86f7a2133541d324",
        "sha256": "a5750b4fc7a3c16a40351224f6352fd7032ca254e0b7278d409c7eb1bf6803ff"
      },
      "downloads": -1,
      "filename": "tcs-sqlWhat-3.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "78d7f88d247116ee86f7a2133541d324",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23785,
      "upload_time": "2022-03-30T12:19:44",
      "upload_time_iso_8601": "2022-03-30T12:19:44.723758Z",
      "url": "https://files.pythonhosted.org/packages/fc/e0/68761443dee9def4d96176a3906d1ebd14f101307175cb30c2e24608cdda/tcs-sqlWhat-3.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}