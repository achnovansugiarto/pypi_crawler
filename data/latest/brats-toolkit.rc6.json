{
  "info": {
    "author": "",
    "author_email": "Florian Kofler <florian.kofler@tum.de>, Christoph Berger <c.berger@tum.de>, Isra Mekki <isra.mekki@helmholtz-muenchen.de>, Mahyar Valizadeh <mahyar.valizadeh@helmholtz-muenchen.de>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/brats-toolkit/badge/?version=latest)](https://brats-toolkit.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version fury.io](https://badge.fury.io/py/BraTS-Toolkit.svg)](https://pypi.python.org/pypi/BraTS-Toolkit/)\n\n                    ____           _____ ____      _____           _ _    _ _   \n                   | __ ) _ __ __ |_   _/ ___|    |_   _|__   ___ | | | _(_) |_ \n                   |  _ \\| '__/ _` || | \\___ \\      | |/ _ \\ / _ \\| | |/ / | __|\n                   | |_) | | | (_| || |  ___) |     | | (_) | (_) | |   <| | |_ \n                   |____/|_|  \\__,_||_| |____/      |_|\\___/ \\___/|_|_|\\_\\_|\\__|\n                                                                                \n# BraTS Toolkit: What is it and what can I use it for?\nAbstract:\n>BraTS Toolkit is a holistic approach to brain tumor segmentation and consists out of out of three components:\n    First, the BraTS Preprocessor facilitates data standardization and preprocessing for researchers and clinicians alike. It covers the entire image analysis workflow prior to tumor segmentation, from image conversion and registration to brain extraction. Second, BraTS Segmentor enables orchestration of BraTS brain tumor segmentation algorithms for generation of fully-automated segmentations. Finally, BraTS Fusionator can combine the resulting candidate segmentations into consensus segmentations using fusion methods such as majority voting and iterative SIMPLE fusion. The capabilities of our tools are illustrated with a practical example to enable easy translation to clinical and scientific practice.\n\n## Installation\nTo install the most up to date version from the master branch please use the following pip install command:\n```\npip install BraTS-Toolkit\n```\n\nWe recommended installation in a virtual environment based on Python 3.10 .\n\nFurther, NVIDIA Docker Toolkit needs to be installed (installation instructions here: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker and here: https://neuronflow.github.io/BraTS-Preprocessor/#dockerinstallation ).\n\n## Issues\nWhen running into issues please use the issue tracker here on Github: https://github.com/neuronflow/BraTS-Toolkit/issues\nSo others can profit and contribute as well.\n\n## Citation\nIf you use BraTS Toolkit please cite:\n\nhttps://www.frontiersin.org/articles/10.3389/fnins.2020.00125/full\n\nKofler, F., Berger, C., Waldmannstetter, D., Lipkova, J., Ezhov, I., Tetteh, G., Kirschke, J., Zimmer, C., Wiestler, B., & Menze, B. H. (2020). BraTS Toolkit: Translating BraTS Brain Tumor Segmentation Algorithms Into Clinical and Scientific Practice. Frontiers in neuroscience, 14, 125. https://doi.org/10.3389/fnins.2020.00125\n\n```\n@article{kofler2020brats,\n  title={BraTS toolkit: translating BraTS brain tumor segmentation algorithms into clinical and scientific practice},\n  author={Kofler, Florian and Berger, Christoph and Waldmannstetter, Diana and Lipkova, Jana and Ezhov, Ivan and Tetteh, Giles and Kirschke, Jan and Zimmer, Claus and Wiestler, Benedikt and Menze, Bjoern H},\n  journal={Frontiers in neuroscience},\n  pages={125},\n  year={2020},\n  publisher={Frontiers}\n}\n```\n\nPlease also cite the following original authors of the algorithms who make this repository and tool possible:\n\n| Docker Image                | Paper                                                                                                                                                                                                                                                                                          |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| econib    | Marcinkiewicz, M., Nalepa, J., Lorenzo, P., Dudzik, W., & Mrukwa, G. (2018). Segmenting brain tumors from MRI using cascaded multi-modal U-Nets. In International MICCAI Brainlesion Workshop (pp. 13–24).                                                                                     |\n| mic-dkfz  | Isensee, F., Kickingereder, P., Wick, W., Bendszus, M., & Maier-Hein, K. (2018). No new-net. In International MICCAI Brainlesion Workshop (pp. 234–244).                                                                                                                                       |\n| scan      | McKinley, R., Meier, R., & Wiest, R. (2018). Ensembles of densely-connected CNNs with label-uncertainty for brain tumor segmentation. In International MICCAI Brainlesion Workshop (pp. 456–465).                                                                                              |\n| xfeng     | Feng, X., Tustison, N., & Meyer, C. (2019). Brain Tumor Segmentation Using an Ensemble of 3D U-Nets and Overall Survival Prediction Using Radiomic Features. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries (pp. 279–288). Springer International Publishing. |\n| lfb_rwth  | Weninger, L., Rippel, O., Koppers, S., & Merhof, D. (2019). Segmentation of Brain Tumors and Patient Survival Prediction: Methods for the BraTS 2018 Challenge. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries (pp. 3–12). Springer International Publishing. |\n| gbmnet    | Nuechterlein, N., & Mehta, S. (2019). 3D-ESPNet with Pyramidal Refinement for Volumetric Brain Tumor Image Segmentation. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries (pp. 245–253). Springer International Publishing.                                     |\n| xyz_2019  | Zhao, Y.X., Zhang, Y.M., Song, M., & Liu, C.L. (2019). Multi-view Semi-supervised 3D Whole Brain Segmentation with a Self-ensemble Network. In Medical Image Computing and Computer Assisted Intervention – MICCAI 2019 (pp. 256–265). Springer International Publishing.                      |\n| scan_2019 | McKinley, R., Rebsamen, M., Meier, R., & Wiest, R. (2020). Triplanar Ensemble of 3D-to-2D CNNs with Label-Uncertainty for Brain Tumor Segmentation. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries (pp. 379–387). Springer International Publishing.          |\n| isen-20 | Isensee, F., Jäger, P. F., Full, P. M., Vollmuth, P., & Maier-Hein, K. H. (2021). nnU-Net for brain tumor segmentation. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries: 6th International Workshop, BrainLes 2020, (pp. 118-132). Springer International Publishing.          |\n| hnfnetv1-20 | Jia, H., Cai, W., Huang, H., & Xia, Y. (2021). H^ 2 2 NF-Net for Brain Tumor Segmentation Using Multimodal MR Imaging: 2nd Place Solution to BraTS Challenge 2020 Segmentation Task. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries: 6th International Workshop, BrainLes 2020, (pp. 58-68). Springer International Publishing.          |\n| yixinmpl-20 |  Wang, Y., Zhang, Y., Hou, F., Liu, Y., Tian, J., Zhong, C., ... & He, Z. (2021). Modality-pairing learning for brain tumor segmentation. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries: 6th International Workshop, BrainLes 2020,(pp. 230-240). Springer International Publishing.         |\n| sanet0-20 | Yuan, Y. (2021). Automatic brain tumor segmentation with scale attention network. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries BrainLes 2020, (pp. 285-294). Springer International Publishing.          |\n| scan-20 & scan_lite-20  | McKinley, R., Rebsamen, M., Dätwyler, K., Meier, R., Radojewski, P., & Wiest, R. (2021). Uncertainty-driven refinement of tumor-core segmentation using 3d-to-2d networks with label uncertainty. In Brainlesion: Glioma, Multiple Sclerosis, Stroke and Traumatic Brain Injuries: 6th International Workshop, BrainLes 2020, (pp. 401-411). Springer International Publishing.          |\n\n\n\n## Brats Preprocessor\nBraTS Preprocessor facilitates data standardization and preprocessing for researchers and clinicians alike. It covers the entire image analysis workflow prior to tumor segmentation, from image conversion and registration to brain extraction.\n\n### Processing Modi\nBraTS Preprocessor offers the following preprocessing modes:\n#### GPU brain extraction: \"gpu\"\nActivates HD-BET in CUDA mode. Only supported when using NVIDIA docker (Linux operating systems only for the moment).\n#### CPU brain extraction: \"cpu\"\nActivates HD-BET or ROBEX in CPU mode depending on available RAM.\n#### ROBEX brain extraction: \"robex\"\nActivates Robex brain extraction.\n#### GPU defacing: \"gpu_defacing\"\nActivates GPU defacing - not implemented yet falls back to `cpu_defacing` for the moment. \n#### CPU defacing: \"cpu_defacing\"\nActivates mri-deface to deface using CPU.\n\n### Single vs. batch processing\n BraTS preprocessor offers processing files in `batch` or `single` mode. Please have a look at the respective example scripts / CLI commands for information how to use them.\n \n For faster computation we strictly recommend the `batch` processing mode, which avoids additional overhead of spawning and shutting down multiple docker containers and instead does all the processing in one container.  \n\n### Python package\nPlease have a look at `0_preprocessing_batch.py` and `0_preprocessing_single.py` in this repository for a demo application. You can download the example data by cloning this repository.\n\n### Command Line Interface (CLI)\n#### single file processing\nType `brats-preprocess -h` after installing the python package to see available options.\n#### batch file processing\nType `brats-batch-preprocess -h` after installing the python package to see available options.\n\n### Graphical User Interface (GUI)\nYou can find instructions to use and download the GUI variant here: https://neuronflow.github.io/BraTS-Preprocessor/\n> WARNING: The GUI is not nicely maintained. We encourage you to use the python package or the CLI instead.\n\n## Brats Segmentor\nBraTS Segmentor enables orchestration of BraTS brain tumor segmentation algorithms for generation of fully-automated segmentations.\n### Python package\nPlease have a look at `1_segmentation.py` in this repository for a demo application.\n\n### Command Line Interface (CLI)\nType `brats-segment -h` after installing the python package to see available options.\n\n## Brats Fusionator\nBraTS Fusionator can combine the resulting candidate segmentations into consensus segmentations using fusion methods such as majority voting and iterative SIMPLE fusion.\n### Python package\nPlease have a look at `2_fusion.py` in this repository for a demo application.\n\n### Command Line Interface (CLI)\nType `brats-fuse -h` after installing the python package to see available options.\n\n## Contact / Feedback / Questions\nOpen an issue in this git repository or contact us per email.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "brain tumor,glioma,BraTS,segmentation,fusion,skullstripping,brain extraction",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Florian Kofler <florian.kofler@tum.de>, Isra Mekki <isra.mekki@helmholtz-muenchen.de>, Mahyar Valizadeh <mahyar.valizadeh@helmholtz-muenchen.de>",
    "name": "BraTS-Toolkit",
    "package_url": "https://pypi.org/project/BraTS-Toolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/BraTS-Toolkit/",
    "project_urls": {
      "repository": "https://github.com/neuronflow/BraTS-Toolkit"
    },
    "release_url": "https://pypi.org/project/BraTS-Toolkit/1.0.4/",
    "requires_dist": [
      "SimpleITK (==2.1.1.2)",
      "numpy (==1.22.0)",
      "python-engineio (==3.14.2)",
      "python-socketio (==4.6.1)",
      "requests (==2.24.0)",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "BraTS Toolkit is a holistic approach to brain tumor segmentation allowing to build modular pipeliens for preprocessing, segmentation and fusion of segmentations.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17403745,
  "releases": {
    "0.9.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ff5d97d57017e322e4ed49c300026bb60f3ab742e10fe94c1278a829f352021",
          "md5": "0e7aa5ecc3bb3e31c60449dd9019599a",
          "sha256": "45ef08dd57c06e7c08cb4eb1ca06cb47c26229a631e842ccd88e0587d740045c"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-0.9.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e7aa5ecc3bb3e31c60449dd9019599a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42079,
        "upload_time": "2023-01-31T10:13:19",
        "upload_time_iso_8601": "2023-01-31T10:13:19.185477Z",
        "url": "https://files.pythonhosted.org/packages/8f/f5/d97d57017e322e4ed49c300026bb60f3ab742e10fe94c1278a829f352021/BraTS_Toolkit-0.9.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42795094af7a693910c60735490adeb574e23e833795c544d9400d157ed93359",
          "md5": "0e7581f16c98803e66ed27145754d34d",
          "sha256": "cd4822e891767e6f9407ca98f74e2e210e7c13cc3859aa0c0ab2ed96201d7def"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e7581f16c98803e66ed27145754d34d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42077,
        "upload_time": "2023-01-31T09:51:39",
        "upload_time_iso_8601": "2023-01-31T09:51:39.019559Z",
        "url": "https://files.pythonhosted.org/packages/42/79/5094af7a693910c60735490adeb574e23e833795c544d9400d157ed93359/BraTS_Toolkit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0f4d1be764202ac2a2eeea2dad2eae23a7b7c84592cf9159be1083839260748",
          "md5": "963e34b56946db19ee4ae51b9b0a8a39",
          "sha256": "1188c0491d984bad41a2140a545099b5c6f1939772c4212098c0898c0e8629b9"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "963e34b56946db19ee4ae51b9b0a8a39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42035,
        "upload_time": "2023-01-31T10:37:37",
        "upload_time_iso_8601": "2023-01-31T10:37:37.799556Z",
        "url": "https://files.pythonhosted.org/packages/c0/f4/d1be764202ac2a2eeea2dad2eae23a7b7c84592cf9159be1083839260748/BraTS_Toolkit-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c6c73ad6f5f205efeb4e594c96765eb417d8ec9c3cae0747755ec0dfa240db3",
          "md5": "166be089f3ae2f63fc85f4d9aa0824e1",
          "sha256": "d080f686245d60d6835f6baeadabda03d4c11665712e138ec840033ae8471fb8"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "166be089f3ae2f63fc85f4d9aa0824e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42393,
        "upload_time": "2023-02-01T10:39:07",
        "upload_time_iso_8601": "2023-02-01T10:39:07.454458Z",
        "url": "https://files.pythonhosted.org/packages/8c/6c/73ad6f5f205efeb4e594c96765eb417d8ec9c3cae0747755ec0dfa240db3/BraTS_Toolkit-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22e7a80c2a998d7d1637d68734e3867a6b00a8530edb2f09e7325ce59354afbd",
          "md5": "e4b989f15fb62046a1848836f5a22618",
          "sha256": "352db8ff66917073141ff2614724db0bc1405745f394866aa2c247fd7c47a296"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4b989f15fb62046a1848836f5a22618",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42392,
        "upload_time": "2023-02-01T10:43:09",
        "upload_time_iso_8601": "2023-02-01T10:43:09.075734Z",
        "url": "https://files.pythonhosted.org/packages/22/e7/a80c2a998d7d1637d68734e3867a6b00a8530edb2f09e7325ce59354afbd/BraTS_Toolkit-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9acf6358022e7f56240f75b6f4c05d98c2fd2446e8fcb9e72a2513ebe2f59c",
          "md5": "fbb277fa81b64c7d7f48d79e66ef1c20",
          "sha256": "2cd6a450d9dedb11c88bc4858b8351b092d90dff87daa8ed1e0b8e305b41c269"
        },
        "downloads": -1,
        "filename": "BraTS_Toolkit-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbb277fa81b64c7d7f48d79e66ef1c20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42739,
        "upload_time": "2023-03-22T20:13:45",
        "upload_time_iso_8601": "2023-03-22T20:13:45.810598Z",
        "url": "https://files.pythonhosted.org/packages/2c/9a/cf6358022e7f56240f75b6f4c05d98c2fd2446e8fcb9e72a2513ebe2f59c/BraTS_Toolkit-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c9acf6358022e7f56240f75b6f4c05d98c2fd2446e8fcb9e72a2513ebe2f59c",
        "md5": "fbb277fa81b64c7d7f48d79e66ef1c20",
        "sha256": "2cd6a450d9dedb11c88bc4858b8351b092d90dff87daa8ed1e0b8e305b41c269"
      },
      "downloads": -1,
      "filename": "BraTS_Toolkit-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbb277fa81b64c7d7f48d79e66ef1c20",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42739,
      "upload_time": "2023-03-22T20:13:45",
      "upload_time_iso_8601": "2023-03-22T20:13:45.810598Z",
      "url": "https://files.pythonhosted.org/packages/2c/9a/cf6358022e7f56240f75b6f4c05d98c2fd2446e8fcb9e72a2513ebe2f59c/BraTS_Toolkit-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}