{
  "info": {
    "author": "Patrick Godwin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "<h1 align=\"center\">ezdag</h1>\n\n<p align=\"center\">High-level HTCondor DAG generation library</p>\n\n<p align=\"center\">\n  <a href=\"https://git.ligo.org/patrick.godwin/ezdag/-/pipelines/latest\">\n    <img alt=\"ci\" src=\"https://git.ligo.org/patrick.godwin/ezdag/badges/main/pipeline.svg\" />\n  </a>\n  <a href=\"https://docs.ligo.org/patrick.godwin/ezdag/\">\n    <img alt=\"documentation\" src=\"https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat\" />\n  </a>\n</p>\n\n---\n\n## Installation\n\n```\npip install git+https://git.ligo.org/patrick.godwin/ezdag.git\n```\n\n## Features\n\nThis library provides a high-level API on top of `htcondor.dags`. Specifically, it adds two features:\n\n1. Programmatic way of generating command line arguments\n2. Track job dependencies automatically through file inputs and outputs\n\nWith (1), this allows you to define job arguments and tracked files on a per-job level for a given layer,\nand these get automatically formatted into the right submit description when the DAG is generated.\n\nBy tracking job dependencies from (2) based on file input/outputs from specific jobs, all the parent/child\nrelationships get determined automatically without specifying them explicitly. This is similar in spirit\nto Makefiles, where node connections are based purely on what data the job needs and provides.\n\nAn example of both these features can be seen in the quickstart below.\n\n## Quickstart\n\nThe example below creates a simple DAG with two layers; a layer with 3 jobs which all produce output, and\na second layer with a single job, combining output from the other jobs:\n\n```python\nfrom ezdag import Argument, DAG, Option, Layer, Node\n\n# create DAG\ndag = DAG()\n\n# define job requirements\nrequirements = {\"request_cpus\": 1, \"request_memory\": 2000}\n\n# create processing layer, add nodes\nprocess_layer = Layer(\"process_bins\", requirements=requirements)\noutput_files = []\nfor i in range(3):\n    output_file = f\"output_{i}.txt\"\n    process_layer += Node(\n        arguments = [\n            Argument(\"job-index\", i),                       # {i}\n            Option(\"verbose\"),                              # --verbose\n            Option(\"bins\", [3 * j + i for j in range(3)]),  # --bins {i} --bins {3 + i} --bins {6 + i}\n        ],\n        inputs = Option(\"input\", \"data.txt\"),               # --input data.txt\n        outputs = Argument(\"output\", output_file)           # output_{i}.txt\n    )\n    output_files.append(output_file)\n\n# add layer to DAG\ndag.attach(process_layer)\n\n# create combine layer, add node\ncombine_layer = Layer(\"combine_bins\", requirements=requirements)\ncombine_layer += Node(\n    arguments = Option(\"verbose\"),                          # --verbose\n    inputs = Argument(\"input\", output_files),               # output_0.txt output_1.txt output_2.txt\n    outputs = Argument(\"output\", \"combined.txt\")            # combined.txt\n)\n\n# add layer to DAG\ndag.attach(combine_layer)\n\n# write DAG to disk\ndag.write_dag(\"my_dag.dag\")\n```\n\nThis generates 3 files, a DAG file (`my_dag.dag`) as well as submit files for each of the layers (2 total):\n\n`my_dag.dag`:\n\n```\n# BEGIN META\n# END META\n# BEGIN NODES AND EDGES\nJOB process_bins.00000 process_bins.sub\nVARS process_bins.00000 nodename=\"process_bins_00000\" job_index=\"0\" verbose=\"--verbose\" bins=\"--bins 0 --bins 3 --bins 6\" input_=\"--input data.txt\" input_input_=\"data.txt\" output_=\"output_0.txt\" output_output_=\"output_0.txt\" output_output__remap=\"\"\nRETRY process_bins.00000 3\nJOB process_bins.00001 process_bins.sub\nVARS process_bins.00001 nodename=\"process_bins_00001\" job_index=\"1\" verbose=\"--verbose\" bins=\"--bins 1 --bins 4 --bins 7\" input_=\"--input data.txt\" input_input_=\"data.txt\" output_=\"output_1.txt\" output_output_=\"output_1.txt\" output_output__remap=\"\"\nRETRY process_bins.00001 3\nJOB process_bins.00002 process_bins.sub\nVARS process_bins.00002 nodename=\"process_bins_00002\" job_index=\"2\" verbose=\"--verbose\" bins=\"--bins 2 --bins 5 --bins 8\" input_=\"--input data.txt\" input_input_=\"data.txt\" output_=\"output_2.txt\" output_output_=\"output_2.txt\" output_output__remap=\"\"\nRETRY process_bins.00002 3\nPARENT process_bins.00000 CHILD combine_bins.00000\nPARENT process_bins.00001 CHILD combine_bins.00000\nPARENT process_bins.00002 CHILD combine_bins.00000\nJOB combine_bins.00000 combine_bins.sub\nVARS combine_bins.00000 nodename=\"combine_bins_00000\" verbose=\"--verbose\" input_=\"output_0.txt output_1.txt output_2.txt\" input_input_=\"output_0.txt,output_1.txt,output_2.txt\" output_=\"combined.txt\" output_output_=\"combined.txt\" output_output__remap=\"\"\nRETRY combine_bins.00000 3\n# END NODES AND EDGES\n```\n\n`process_bins.sub`:\n\n```\nuniverse = vanilla\nexecutable = /path/to/process_bins\narguments = $(job_index) $(verbose) $(bins) $(input_) $(output_)\nperiodic_release = (HoldReasonCode == 5)\nrequest_cpus = 1\nrequest_memory = 2000\nshould_transfer_files = YES\nwhen_to_transfer_output = ON_SUCCESS\nsuccess_exit_code = 0\npreserve_relative_paths = True\ntransfer_input_files = $(input_input_)\ntransfer_output_files = $(output_output_)\ntransfer_output_remaps = \"$(output_output__remap)\"\noutput = logs/$(nodename)-$(cluster)-$(process).out\nerror = logs/$(nodename)-$(cluster)-$(process).err\nnotification = never\n\nqueue\n```\n\n`combine_bins.sub`:\n\n```\nuniverse = vanilla\nexecutable = /path/to/combine_bins\narguments = $(verbose) $(input_) $(output_)\nperiodic_release = (HoldReasonCode == 5)\nrequest_cpus = 1\nrequest_memory = 2000\nshould_transfer_files = YES\nwhen_to_transfer_output = ON_SUCCESS\nsuccess_exit_code = 0\npreserve_relative_paths = True\ntransfer_input_files = $(input_input_)\ntransfer_output_files = $(output_output_)\ntransfer_output_remaps = \"$(output_output__remap)\"\noutput = logs/$(nodename)-$(cluster)-$(process).out\nerror = logs/$(nodename)-$(cluster)-$(process).err\nnotification = never\n\nqueue\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.ligo.org/patrick.godwin/ezdag",
    "keywords": "",
    "license": "MPL-2.0",
    "maintainer": "Patrick Godwin",
    "maintainer_email": "patrick.godwin@ligo.org",
    "name": "ezdag",
    "package_url": "https://pypi.org/project/ezdag/",
    "platform": null,
    "project_url": "https://pypi.org/project/ezdag/",
    "project_urls": {
      "Bug Tracker": "https://git.ligo.org/patrick.godwin/ezdag/issues/",
      "Homepage": "https://git.ligo.org/patrick.godwin/ezdag",
      "Source Code": "https://git.ligo.org/patrick.godwin/ezdag.git"
    },
    "release_url": "https://pypi.org/project/ezdag/0.1.0/",
    "requires_dist": [
      "htcondor (>=9)",
      "mkdocs (>=1.3) ; extra == 'dev'",
      "mkdocs-coverage (>=0.2) ; extra == 'dev'",
      "mkdocs-gen-files (>=0.3) ; extra == 'dev'",
      "mkdocs-literate-nav (>=0.4) ; extra == 'dev'",
      "mkdocs-material-igwn ; extra == 'dev'",
      "mkdocs-section-index (>=0.3) ; extra == 'dev'",
      "mkdocstrings[python] ; extra == 'dev'",
      "markdown-callouts (>=0.2) ; extra == 'dev'",
      "markdown-exec (>=0.5) ; extra == 'dev'",
      "toml (>=0.10) ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-black ; extra == 'dev'",
      "mkdocs (>=1.3) ; extra == 'docs'",
      "mkdocs-coverage (>=0.2) ; extra == 'docs'",
      "mkdocs-gen-files (>=0.3) ; extra == 'docs'",
      "mkdocs-literate-nav (>=0.4) ; extra == 'docs'",
      "mkdocs-material-igwn ; extra == 'docs'",
      "mkdocs-section-index (>=0.3) ; extra == 'docs'",
      "mkdocstrings[python] ; extra == 'docs'",
      "markdown-callouts (>=0.2) ; extra == 'docs'",
      "markdown-exec (>=0.5) ; extra == 'docs'",
      "toml (>=0.10) ; extra == 'docs'"
    ],
    "requires_python": ">=3.8",
    "summary": "high-level HTCondor DAG generation library",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16566186,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e65e1fc8e279102fd6f3e445121de3387c9432ed5281fb92e1de6789d74a203",
          "md5": "9de2e197841e1b747337655cb0dc003f",
          "sha256": "9368d46f6172c315729c978e10bba7f52bd83b5262b1730479c7e6443cc58c92"
        },
        "downloads": -1,
        "filename": "ezdag-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9de2e197841e1b747337655cb0dc003f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16873,
        "upload_time": "2023-01-25T19:53:15",
        "upload_time_iso_8601": "2023-01-25T19:53:15.694790Z",
        "url": "https://files.pythonhosted.org/packages/2e/65/e1fc8e279102fd6f3e445121de3387c9432ed5281fb92e1de6789d74a203/ezdag-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8eb11e9883105d10f078ad9f04fa34e879749af800619c67fd0cc141afb8a8f",
          "md5": "16a8b2231799e51e3b060efd1f7216a4",
          "sha256": "311ae9aac417209deeee6c2cbb616dce0cf056e84631d0d12e9422ac96455183"
        },
        "downloads": -1,
        "filename": "ezdag-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16a8b2231799e51e3b060efd1f7216a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20066,
        "upload_time": "2023-01-25T19:53:17",
        "upload_time_iso_8601": "2023-01-25T19:53:17.820486Z",
        "url": "https://files.pythonhosted.org/packages/b8/eb/11e9883105d10f078ad9f04fa34e879749af800619c67fd0cc141afb8a8f/ezdag-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e65e1fc8e279102fd6f3e445121de3387c9432ed5281fb92e1de6789d74a203",
        "md5": "9de2e197841e1b747337655cb0dc003f",
        "sha256": "9368d46f6172c315729c978e10bba7f52bd83b5262b1730479c7e6443cc58c92"
      },
      "downloads": -1,
      "filename": "ezdag-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9de2e197841e1b747337655cb0dc003f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16873,
      "upload_time": "2023-01-25T19:53:15",
      "upload_time_iso_8601": "2023-01-25T19:53:15.694790Z",
      "url": "https://files.pythonhosted.org/packages/2e/65/e1fc8e279102fd6f3e445121de3387c9432ed5281fb92e1de6789d74a203/ezdag-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8eb11e9883105d10f078ad9f04fa34e879749af800619c67fd0cc141afb8a8f",
        "md5": "16a8b2231799e51e3b060efd1f7216a4",
        "sha256": "311ae9aac417209deeee6c2cbb616dce0cf056e84631d0d12e9422ac96455183"
      },
      "downloads": -1,
      "filename": "ezdag-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "16a8b2231799e51e3b060efd1f7216a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 20066,
      "upload_time": "2023-01-25T19:53:17",
      "upload_time_iso_8601": "2023-01-25T19:53:17.820486Z",
      "url": "https://files.pythonhosted.org/packages/b8/eb/11e9883105d10f078ad9f04fa34e879749af800619c67fd0cc141afb8a8f/ezdag-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}