{
  "info": {
    "author": "Tom Young",
    "author_email": "shadetreemetalworks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# harperdb\n\nPython3 implementations of HarperDB API functions. Also provides wrappers for an object-oriented interface.\n\n### Installation\n\n```\npip3 install harperdb\n```\n\n### Requirements\n\n- Python>=3.4\n- [requests~=2.0](https://pypi.org/project/requests/)\n- [responses~=0.10](https://pypi.org/project/responses/) (required for testing only)\n\n---\n\n# harperdb.HarperDB\n\nEach instance of `HarperDB` represents a running HarperDB instance at a URL, passed to the constructor. Optionally implement Basic Auth as keyword arguments. HarperDB API functions are exposed as instance methods, which produce and consume JSON following the API documentation.\n\n```\nimport harperdb\ndb = harperdb.HarperDB(\n    url=HARPERDB_URL,\n    username=HARPERDB_USERNAME,\n    password=HARPERDB_PASSWORD)\n```\n\n#### Instance Parameters:\n\n  - **url** (string): Full URL of HarperDB instance\n  - **username** (string): (optional) Basic Auth username\n  - **password** (string): (optional) Basic Auth password\n  - **timeout** (float): Seconds to wait for a server response, default 10\n\n#### Instance Attributes:\n\n  - **token** (string): Value used in Authorization header, or `None`. The value\n    is generated automatically when instantiated with both username and\n    password\n  - **timeout** (float): Seconds to wait for a server response\n  - **url** (string): Full URL of HarperDB instance\n\n#### Instance Methods:\n\nThese methods expose the HarperDB API functions, and return JSON from the target database instance at `HarperDB.url`\n\nSchemas and Tables:\n\n- **describe_all()**\n- **create_schema(schema)**\n- **describe_schema(schema)**\n- **drop_schema(schema)**\n- **create_table(schema, table, hash_attribute)**\n- **describe_table(schema, table)**\n- **drop_table(schema, table)**\n- **drop_attribute(schema, table, attribute)**\n\nNoSQL Operations:\n\n- **insert(schema, table, [records])**\n- **update(schema, table, [records])**\n- **delete(schema, table, [hashes])**\n- **search_by_hash(schema, table, [hashes], get_attributes=['*'])**\n- **search_by_value(schema, table, search_attribute, search_value, get_attributes=['*'])**\n\nSQL Operations:\n\n- **sql(SQL)**\n\nCSV Operations:\n\n- **csv_data_load(schema, table, path, action=\"insert\")**\n\nJobs:\n\n- **get_job(id)**\n\n---\n\n# harperdb.wrappers.HarperDBWrapper\n\n`HarperDBWrapper` provides a high-level, object-oriented interface for HarperDB. From this top-level object an application programmer can make references to schemas, tables, and records, while making minimal transactions with the server when values are used or modified. Each instance of `HarperDBWrapper` represents a running HarperDB instance at a URL, passed to the constructor. Optionally implement Basic Auth as keyword arguments.\n\nSchemas are subscriptable by name, and iterating yields instances of `HarperDBSchema`. The length of a `HarperDBWrapper` instance returns the number of schemas in the target database. HarperDB API functions are implemented as low-level instance methods, which produce and consume JSON following the API documentation.\n\n```\nimport harperdb\ndb = harperdb.wrappers.HarperDBWrapper(\n    url=HARPERDB_URL,\n    username=HARPERDB_USERNAME,\n    password=HARPERDB_PASSWORD)\ndev_schema = db.create_schema('dev')\nlen(db)  # returns 1\ndb['dev']  # returns dev_schema\nfor schema in db:\n    schema.name  # returns \"dev\"\n```\n\nSchemas can be dropped using `HarperDB.drop_schema`, or using the `del` keyword and `HarperDBSchema.name` value like a dictionary:\n\n```\ndb.drop_schema('dev')\n# same as\ndel db['dev']\n```\n\n#### Instance Parameters:\n\n  - **url** (string): Full URL of HarperDB instance\n  - **username** (string): (optional) Basic Auth username\n  - **password** (string): (optional) Basic Auth password\n  - **timeout** (float): Seconds to wait for a server response, default 10\n\n#### Instance Attributes:\n\n- **token** (string): Value used in Authorization header, or None. The value is generated automatically when instantiated with both username and password\n- **timeout** (float): Seconds to wait for a server response\n- **url** (string): Full URL of HarperDB instance\n\n#### High-Level Instance Methods:\n- **create_schema(name)**: Create a schema, returns `HarperDBSchema`\n- **drop_schema(name)**: Drop a schema\n\n#### Low-Level Instance Methods:\nThese methods expose the HarperDB API functions, and return JSON from the target database instance at `HarperDBWrapper.url`\n\nSchemas and Tables:\n\n- **_describe_all()**\n- **_create_schema(schema)**\n- **_describe_schema(schema)**\n- **_drop_schema(schema)**\n- **_create_table(schema, table, hash_attribute)**\n- **_describe_table(schema, table)**\n- **_drop_table(schema, table)**\n- **_drop_attribute(schema, table, attribute)**\n\nNoSQL Operations:\n\n- **_insert(schema, table, [records])**\n- **_update(schema, table, [records])**\n- **_delete(schema, table, [hashes])**\n- **_search_by_hash(schema, table, [hashes], get_attributes=['*'])**\n- **_search_by_value(schema, table, search_attribute, search_value, get_attributes=['*'])**\n\nSQL Operations:\n\n- **_sql(SQL)**\n\nCSV Operations:\n\n- **_csv_data_load(schema, table, path, action=\"insert\")**\n\nJobs:\n\n- **_get_job(id)**\n\n---\n\n# harperdb.wrappers.HarperDBSchema\n\nTables are subscriptable by name, and iterating yields instances of `HarperDBTable`. The length of a `HarperDBSchema` instance returns the number of tables in the schema. Schema metadata is contained in instance attributes.\n\nYou should never need to instantiate this class directly, use `HarperDBWrapper.create_schema` instead.\n\n```\ndog_table = dev_schema.create_table(\n        name='dog',\n        hash_attribute='id')\nlen(dev_schema)  # returns 1\ndev_schema.database  # returns db\n```\n\nTables can be dropped using `HarperDBSchema.drop_table`, or using the `del` keyword and `HarperDBTable.name` value like a dictionary:\n\n```\ndev_schema.drop_table('dog')\n# same as\ndel dev_schema['dog']\n```\n\nSchemas can be dropped using the instance method `dev_schema.drop()`.\n\n#### Instance Attributes:\n\n- **name** (string): Name of this schema\n- **database** (HarperDBWrapper): Instance of the parent database\n\n#### Instance Methods:\n\n- **create_table(name)**: Create a table, returns `HarperDBTable`\n- **drop()**: Drop this schema\n- **drop_table(name)**: Drop a table\n\n---\n\n# harperdb.wrappers.HarperDBTable\n\nRecords are subscriptable by `hash_attribute`, but `HarperDBTable` is not iterable. The length of a `HarperDBTable` instance returns the number of records in the table. Table metadata is contained in instance attributes.\n\nYou should never need to instantiate this class directly, use `HarperDBSchema.create_table` instead.\n\n`HarperDBTable.upsert` inserts a record from a dictionary, and updates records if a value is given for the table's `hash_attribute` and a matching record is found in the table.\n\n```\npenny = dog_table.upsert({\n    'id': 1,\n    'dog_name': 'Penny',\n    'owner_name': 'Kyle',\n    'breed_id': 154,\n    'age': 5,\n    'weight_lbs': 35,\n    'adorable': True,\n})\ndog_table[1]  # returns penny\ndog_table.record_count  # same as len(dog_table)\ndog_table.__createdtime__  # returns int, Unix time with milliseconds\ndog_table.created_time  # returns datetime.datetime\ndog_table.hash_attribute  # returns \"id\"\ndog_table.schema  # returns dev_schema\n```\n\n`HarperDBTable.upsert` accepts either a dictionary of record data, or a list of such dictionaries, returning an instance of `HarperDBRecord` for each record. Any records skipped by the server are omitted from the return value.\n\nUse `HarperDBTable.upsert_from_csv` to load record data in bulk from a CSV file. Returns an instance of `HarperDBRecord` for each record. Any records skipped by the server are omitted from the return value.\n\nRecords can be deleted using `HarperDBTable.delete`, or using the `del` keyword and `HarperDBTable.hash_attribute` value like a dictionary:\n\n```\ndog_table.delete(1)\n# or\ndel dog_table[1]\n```\n\nSearching by a record value returns a list of matching `HarperDBRecord` instances.\n\n```\ndog_table.search_by_value(\n    attribute='name',\n    value='penny')  # returns a list containing penny\n```\n\nTables can be dropped using the instance method `dog_table.drop()`.\n\n#### Instance Attributes:\n\n- **attributes** (list): All record attributes (string) in this table\n- **created_time** (datetime.datetime): equal to `__createdtime__`\n- **hash_attribute** (string): Primary key of this table\n- **id** (string): Unique identifier assigned to this table\n- **name** (string): Name of this table\n- **record_count** (int): Number of records in this table\n- **schema** (HarperDBSchema): Instance of the parent schema\n- **updated_time** (datetime.datetime): equal to `__updatedtime__`\n- **\\_\\_createdtime\\_\\_** (int): Epoch time in milliseconds\n- **\\_\\_updatedtime\\_\\_** (int): Epoch time in milliseconds\n\n#### Instance Methods:\n\n- **delete(hash)**: Delete a record by hash value\n- **drop()**: Drop this table\n- **search_by_value(search_attribute, search_value)**: Return a list of\nmatching `HarperDBRecord` instances.\n- **upsert(record)**: Insert a record from a dictionary, or list of dictionaries. If a value is given for the table's hash_attribute, and this table has a matching record, that record will be updated. Any records skipped by the server will be omitted from the return value. Returns `HarperDBRecord`, or a list of `HarperDBRecord` instances.\n- **upsert_from_csv(path)**: Insert records from a CSV file, with headers in the first row. Any records which have a value for the table's `hash_attribute` will be updated. Any records skipped by the server will be omitted from the return value. Returns a list of `HarperDBRecord` instances.\n\n---\n\n# harperdb.wrappers.HarperDBRecord\n\nRecord data is subscriptable by record data key, and supports item assignment. Record metadata is stored in instance attributes.\n\nYou should never need to instantiate this class directly, use `HarperDBTable.upsert` instead.\n\n```\npenny['owner_name']  # returns \"Kyle\"\npenny['age'] = 6  # Happy Birthday!\npenny.__updatedtime__  # returns int, Unix time with milliseconds\npenny.updated_time  # returns datetime.datetime\npenny.table  # returns dog_table\n```\n\nRecords can be deleted using the instance method `penny.delete()`.\n\n`HarperDBRecord.to_dict()` returns a dictionary of the record.\n\n#### Instance Attributes:\n\n- **created_time** (datetime.datetime): equal to `__createdtime__`\n- **table** (HarperDBTable): Instance of parent table\n- **updated_time** (datetime.datetime): equal to `__updatedtime__`\n- **\\_\\_createdtime\\_\\_** (int): Epoch time in milliseconds\n- **\\_\\_updatedtime\\_\\_** (int): Epoch time in milliseconds\n\n#### Instance Methods:\n\n- **delete()**: Delete this record\n- **to_dict()**: Returns record data as a dictionary\n\n---\n\n# harperdb.exceptions.HarperDBError\n\nRaised when the server returns an error (500), or a hash is not found.\n\nThis is the only Exception raised explicitly.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/harperdb/harperdb-sdk-python",
    "keywords": "",
    "license": "",
    "maintainer": "HarperDB",
    "maintainer_email": "hello@harperdb.io",
    "name": "HarperDB-SDK",
    "package_url": "https://pypi.org/project/HarperDB-SDK/",
    "platform": "",
    "project_url": "https://pypi.org/project/HarperDB-SDK/",
    "project_urls": {
      "Homepage": "https://github.com/harperdb/harperdb-sdk-python"
    },
    "release_url": "https://pypi.org/project/HarperDB-SDK/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Simple SDK for HarperDB.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7692478,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a50cf0b020fa54d40b4dd334b79875b5cb3894ed00830af80c69fa82c6828874",
          "md5": "409e9b3e86aeadd1bca91fb4d91f2106",
          "sha256": "51e3a5031db289910d271c33725dc9b74a6452d0cdf7e7bcdfe6992357dd3c99"
        },
        "downloads": -1,
        "filename": "HarperDB SDK-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "409e9b3e86aeadd1bca91fb4d91f2106",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 8750,
        "upload_time": "2020-07-13T18:37:56",
        "upload_time_iso_8601": "2020-07-13T18:37:56.890971Z",
        "url": "https://files.pythonhosted.org/packages/a5/0c/f0b020fa54d40b4dd334b79875b5cb3894ed00830af80c69fa82c6828874/HarperDB%20SDK-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a50cf0b020fa54d40b4dd334b79875b5cb3894ed00830af80c69fa82c6828874",
        "md5": "409e9b3e86aeadd1bca91fb4d91f2106",
        "sha256": "51e3a5031db289910d271c33725dc9b74a6452d0cdf7e7bcdfe6992357dd3c99"
      },
      "downloads": -1,
      "filename": "HarperDB SDK-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "409e9b3e86aeadd1bca91fb4d91f2106",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 8750,
      "upload_time": "2020-07-13T18:37:56",
      "upload_time_iso_8601": "2020-07-13T18:37:56.890971Z",
      "url": "https://files.pythonhosted.org/packages/a5/0c/f0b020fa54d40b4dd334b79875b5cb3894ed00830af80c69fa82c6828874/HarperDB%20SDK-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}