{
  "info": {
    "author": "Marco Forgione and Dario Piga",
    "author_email": "marco.forgione1986@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# dynoNet: A neural network architecture for learning dynamical systems \n\nThis repository contains the Python code to reproduce the results of the paper [dynoNet: A neural network architecture for learning dynamical systems](https://arxiv.org/pdf/2006.02250.pdf) by Marco Forgione and Dario Piga.\n\nIn this work, we introduce the linear dynamical operator as a differentiable layer compatible with back-propagation-based training. \nThe operator is parametrized as a rational transfer function and thus can represent an infinite impulse response (IIR)\nfiltering operation, as opposed to the Convolutional layer of 1D-CNNs that is equivalent to finite impulse response (FIR) filtering.\n\nIn the dynoNet architecture, linear dynamical operators are combined with static (i.e., memoryless) non-linearities which can be either elementary\nactivation functions applied channel-wise; fully connected feed-forward neural networks; or other differentiable operators. \n\n\n![dense_dynonet](doc/dense_dynonet.png \"A dense neural network vs. a dynoNet\")\n\nA 15-min presentation about dynoNet is available [here](https://www.youtube.com/watch?v=SrrlhGPLBrA&t=55s).\n\n# Folders:\n* [dynonet](src/dynonet):  PyTorch implementation of the linear dynamical operator (aka G-block in the paper) used in dynoNet\n* [examples](examples): examples using dynoNet for system identification \n* [util](util): definition of metrics R-square, RMSE, fit index \n* [doc](doc): paper & slides\n\nThree [examples](examples) discussed in the paper are:\n\n* [WH2009](examples/WH2009): A circuit with Wiener-Hammerstein behavior. Experimental dataset from http://www.nonlinearbenchmark.org\n* [BW](examples/BW): Bouc-Wen. A nonlinear dynamical system describing hysteretic effects in mechanical engineering. Experimental dataset from http://www.nonlinearbenchmark.org\n* [EMPS](examples/EMPS): A controlled prismatic joint (Electro Mechanical Positioning System). Experimental dataset from http://www.nonlinearbenchmark.org\n\nFor the [WH2009](examples/WH2009) example, the main scripts are:\n\n *  ``WH2009_train.py``: Training of the dynoNet model\n *  ``WH2009_test.py``: Evaluation of the dynoNet model on the test dataset,  computation of metrics.\n  \nSimilar scripts are provided for the other examples.\n\nNOTE: the original data sets are not included in this project. They have to be manually downloaded from\nhttp://www.nonlinearbenchmark.org and copied in the data sub-folder of the example.\n# Software requirements:\nSimulations were performed on a Python 3.7 conda environment with\n\n * numpy\n * scipy\n * matplotlib\n * pandas\n * pytorch (version 1.4)\n \nThese dependencies may be installed through the commands:\n\n```\nconda install numpy scipy pandas matplotlib\nconda install pytorch torchvision cudatoolkit=10.2 -c pytorch\n```\n\n# Local installation:\n\n## From PyPI\nType in terminal:\n```\npip install dynonet\n```\nThis will install the latest stable version packaged on PyPI: https://pypi.org/project/dynonet/\n\n## From a local copy of this repository\nNavigate to a local copy of this repository, where setup.py and setup.cfg are located.\nThen, type in terminal:\n\n```\npip install -e .\n```\n\n\n# Citing\n\nIf you find this project useful, we encourage you to\n\n* Star this repository :star: \n* Cite the [paper](https://onlinelibrary.wiley.com/doi/abs/10.1002/acs.3216) \n```\n@article{forgione2021dyno,\n  title={\\textit{dyno{N}et}: A neural network architecture for learning dynamical systems},\n  author={Forgione, M. and Piga, D.},\n  journal={International Journal of Adaptive Control and Signal Processing},\n  volume={35},\n  number={4},\n  pages={612--626},\n  year={2021},\n  publisher={Wiley}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/forgi86/dynonet",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynonet",
    "package_url": "https://pypi.org/project/dynonet/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynonet/",
    "project_urls": {
      "Bug Tracker": "https://github.com/forgi86/dynonet/issues",
      "Homepage": "https://github.com/forgi86/dynonet"
    },
    "release_url": "https://pypi.org/project/dynonet/0.1.1/",
    "requires_dist": [
      "numpy (>=1.19.4)",
      "scipy (>=1.5.4)",
      "matplotlib (>=3.3.3)",
      "pandas (>=1.1.4)",
      "torch (>=1.4)"
    ],
    "requires_python": "",
    "summary": "dynoNet: A neural network architecture for learning dynamical systems",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10928060,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51041d4376c0259d7ab24892208a20f352569363381a32b06ee16d19e0ff733c",
          "md5": "99e1a5044c2ac36ba5300ddc754d33ab",
          "sha256": "2e1fe3dfe5685f19a514fcf0cdb2f0a292f4233d53c55b90cbfc066d2b738610"
        },
        "downloads": -1,
        "filename": "dynonet-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99e1a5044c2ac36ba5300ddc754d33ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13257,
        "upload_time": "2021-07-16T13:54:19",
        "upload_time_iso_8601": "2021-07-16T13:54:19.861808Z",
        "url": "https://files.pythonhosted.org/packages/51/04/1d4376c0259d7ab24892208a20f352569363381a32b06ee16d19e0ff733c/dynonet-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c2619869c9f8f6f7d57d75a9ab44b375ddedd22b8f423c3427cfdf9e973e690",
          "md5": "27e9b9dcff88fa5facee6a9e1b1336be",
          "sha256": "ff004766d58714b3ff5671d5e90a51f41f5c772869ae8904b8d94638e02f8199"
        },
        "downloads": -1,
        "filename": "dynonet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27e9b9dcff88fa5facee6a9e1b1336be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13448,
        "upload_time": "2021-07-16T13:54:21",
        "upload_time_iso_8601": "2021-07-16T13:54:21.661248Z",
        "url": "https://files.pythonhosted.org/packages/2c/26/19869c9f8f6f7d57d75a9ab44b375ddedd22b8f423c3427cfdf9e973e690/dynonet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51041d4376c0259d7ab24892208a20f352569363381a32b06ee16d19e0ff733c",
        "md5": "99e1a5044c2ac36ba5300ddc754d33ab",
        "sha256": "2e1fe3dfe5685f19a514fcf0cdb2f0a292f4233d53c55b90cbfc066d2b738610"
      },
      "downloads": -1,
      "filename": "dynonet-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99e1a5044c2ac36ba5300ddc754d33ab",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13257,
      "upload_time": "2021-07-16T13:54:19",
      "upload_time_iso_8601": "2021-07-16T13:54:19.861808Z",
      "url": "https://files.pythonhosted.org/packages/51/04/1d4376c0259d7ab24892208a20f352569363381a32b06ee16d19e0ff733c/dynonet-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c2619869c9f8f6f7d57d75a9ab44b375ddedd22b8f423c3427cfdf9e973e690",
        "md5": "27e9b9dcff88fa5facee6a9e1b1336be",
        "sha256": "ff004766d58714b3ff5671d5e90a51f41f5c772869ae8904b8d94638e02f8199"
      },
      "downloads": -1,
      "filename": "dynonet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "27e9b9dcff88fa5facee6a9e1b1336be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13448,
      "upload_time": "2021-07-16T13:54:21",
      "upload_time_iso_8601": "2021-07-16T13:54:21.661248Z",
      "url": "https://files.pythonhosted.org/packages/2c/26/19869c9f8f6f7d57d75a9ab44b375ddedd22b8f423c3427cfdf9e973e690/dynonet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}