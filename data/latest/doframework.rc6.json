{
  "info": {
    "author": "Orit Davidovich",
    "author_email": "orit.davidovich@ibm.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "<!--\n# Copyright IBM Corporation 2022\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n-->\n\n# DOFramework\n\n`doframework` is a testing framework for decision-optimization model learning algorithms. Such algorithms learn part or all of a decision-optimization model from data and solve the model to produce a predicted optimal solution. \n\n`doframework` randomly generates multiple optimization problems (f,O,D,x*) for your algorithm to learn and solve: \n* f is a continuous piece-wise linear function defined over a domain in d-dimensional space (d>1),\n* O is a feasibility region in dom(f) defined by linear constraints,\n* D = (X,y) is a dataset derived from f,\n* x* is the true optimum of f in O (minimum or maximum).\n\n`doframework` feeds your algorithm constraints and data (O,D) and collects its predicted optimum. The algorithm's predicted optimal value can then be compared to the true optimal value f(x*). By comparing the two over multiple randomly generated optimization problems, `doframework` produces a **prediction profile** for your algorithm.\n\n`doframework` integrates with your algorithm (written in Python).\n\n# Design\n\n`doframework` was designed for optimal cloud distribution following an event-driven approach. \n\n`doframework` was built on top of [ray](https://www.ray.io/ \"Ray -- fast and simple distributed computing\") for cloud distribution and [rayvens](https://github.com/project-codeflare/rayvens \"Rayvens augments Ray with events\") for event driven management.\n\n# Requirements\n\n`doframework` was written for Python version >= 3.8.0. \n\n`doframework` can run either locally or remotely. For optimal performance, run it on a Kubernetes cluster. Cloud configuration is currently available for AWS and IBM Cloud [OpenShift](https://docs.openshift.com/ \"RedHat OpenShift Documentation\") clusters.\n\nThe framework uses storage (local or S3) to interact with simulation products. Configuration is currently available for [AWS](https://aws.amazon.com/s3/ \"AWS S3\") or [IBM Cloud Object Storage COS](https://www.ibm.com/cloud/object-storage \"IBM Cloud Object Storage\").\n\n# Install\n\nTo run `doframework` locally, install with\n\n```\n$ pip install doframework\n```\n\n# Configs\n\nStorage specifications are provided in a `configs.yaml`. You'll find examples under `./configs/*`.\n\nThe `configs.yaml` includes the list of source and target bucket names (under `buckets`). If necessary, S3 credentials are added under designated fields.\n\nHere is the format of the `configs.yaml` either for local storage\n```\nlocal:\n    buckets:\n        inputs: '<inputs-folder>'\n        inputs_dest: '<inputs-dest-folder>'\n        objectives: '<objectives-folder>'\n        objectives_dest: '<objectives-dest-folder>'\n        data: '<data-folder>'\n        data_dest: '<data-dest-folder>'\n        solutions: '<solutions-folder>'\n```\nor S3\n```\ns3:\n    buckets:\n        inputs: '<inputs-bucket>'\n        inputs_dest: '<inputs-dest-bucket>'\n        objectives: '<objectives-bucket>'\n        objectives_dest: '<objectives-dest-bucket>'\n        data: '<data-bucket>'\n        data_dest: '<data-dest-bucket>'\n        solutions: '<solutions-bucket>'\n    aws_secret_access_key: 'xxxx'\n    aws_access_key_id: 'xxxx'\n    endpoint_url: 'https://xxx.xxx.xxx'\n    region: 'xx-xxxx'\n    cloud_service_provider: 'aws'\n```\nCurrently, two S3 providers are available under `s3:cloud_service_provider`: either `aws` or `ibm`. The `endpoint_url` is _optional_ for AWS.\n\n**Bucket / folder names must be distinct**.\n\n# Inputs\n\n`input.json` files provide the necessary metadata for the random genration of optimization problems.\n\n`doframework` will run end to end, once `input.json` files are uploaded to `<inputs-bucket>` / `<inputs-folder>`. \n\nThe jupyter notebook `./notebooks/inputs.ipynb` allows you to automatically generate input files and upload them to `<inputs-bucket>`.\n\nHere is an example of an input file (see input samples `input_basic.json` under `./inputs`).\n\n\n```\n{     \n    \"f\": {\n        \"vertices\": {\n            \"num\": 7,\n            \"range\": [[5.0,20.0],[0.0,10.0]],\n        },\n        \"values\": {\n            \"range\": [0.0,5.0]\n        },\n    },\n    \"omega\" : {\n        \"ratio\": 0.8\n    },\n    \"data\" : {\n        \"N\": 750,\n        \"noise\": 0.01,\n        \"policy_num\": 2,\n        \"scale\": 0.4\n    },\n    \"input_file_name\": \"input_basic.json\"\n}\n```\n\n`f:vertices:num`: number of vertices in the piece-wise linear graph of f.<br>\n`f:vertices:range`: f domain will be inside this range.<br>\n`f:values:range`: range of f values.<br>\n`omega:ratio`: vol(O) / vol(dom(f)) >= ratio.<br>\n`data:N`: number of data points to sample.<br>\n`data:noise`: response variable noise.<br>\n`data:policy_num`: number of centers in Gaussian mix distribution of data.<br>\n`data:scale`: max STD of Gaussian mix distribution of data (as a ratio of domain diameter).\n\nIt's a good idea to start experimenting on low-dimensional problems. \n\n# User App Integration\n\nYour algorithm will be integrated into `doframework` once it is decorated with `doframework.resolve`. \n\nA `doframework` experiment runs with `doframework.run()`. The `run()` utility accepts the decorated model and an absolute path to the `configs.yaml`.\n\nHere is an example a user application `module.py`.\n\n```\nimport doframework as dof\n\n@dof.resolve\ndef alg(data: np.array, constraints: np.array, **kwargs):\n    ...    \n    return optimal_arg, optimal_val, regression_model\n\nif __name__ == '__main__':\n\n    dof.run(alg, 'configs.yaml', objectives=5, datasets=3, **kwargs)\n```\n\n`doframework` provides the following inputs to your algorithm: \n\n`data`: 2D np.array with features X = data[ : , :-1] and response variable y = data[ : ,-1].<br>\n`constraints`: linear constraints as a 2D numpy array A. A data point x satisfies the constraints when A[ : , :-1]*x + A[ : ,-1] <= 0.<br>\n\nIt feeds your algorithm additional inputs in kwargs: \n\n`lower_bound`: lower bound per feature variable.<br>\n`upper_bound`: upper bound per feature variable.<br>\n`init_value`: optional initial value.<br>\n\nThe `run()` utility accepts the arguments:\n\n`objectives`: number of objective targets to generate per input file.<br>\n`datasets`: number of datasets to generate per objective target.<br>\n`distribute`: True to run distributively, False to run sequentially.<br>\n`logger`: True to see `doframework` logs, False otherwise.<br>\n`after_idle_for`: stop running when event stream is idle after this many seconds.<br>\n`alg_num_cpus`: number of CPUs to dedicate to your algorithm on each optimization task.<br>\n`data_num_cpus`: number of CPUs to dedicate to data generation (useful in high dimensions).\n\n\n# Algorithm Prediction Profile\n\nOnce you are done running a `doframework` experiment, run the notebook `notebooks/profile.ipynb`. It will fetch the relevant experiment products from the target buckets and produce the algorithm's prediction profile and prediction probabilities.\n\n`doframework` produces three types of experiment product files:\n\n* `objective.json`: containing information on (f,O,x*) \n* `data.csv`: containing the dataset the algorithm accepts as input\n* `solution.json`: containing the algorithm's predicted optimum\n\nSee sample files under `./outputs`.\n\n# Kubernetes Cluster\n\nTo run `doframework` on a K8S cluster, make sure you are on the cluster's local `kubectl` context. Log into your cluster, if necessary (applicable to OpenShift, see `./doc/openshift.md`).\n\nYou can check your local `kubectl` context and change it if necessary with\n```\n$ kubectl config current-context\n$ kubectl config get-contexts\n$ kubectl config use-context cluster_name\n>> Switched to context \"cluster_name\".\n```\n\nNow `cd` into your project's folder and run the setup bash script `doframework-setup.sh`. The setup script will generate the cluster configuration file `doframework.yaml` in your project's folder. The setup script requires the absolute path to your `configs.yaml`. Running the setup `.sh` script will establish the `ray` cluster. \n\n```\n$ cd <user_project_folder>\n$ doframework-setup.sh --configs ~/path/to/configs.yaml\n```\n\nYou have the option to adapt `doframework.yaml` to fit your application. \n\nUse the flag `--project-requirements` to specify the absolute path to your `requirements.txt` file. It will be `pip install -r requirements.txt` on your cluster nodes. \n\nUse the flag `--project-dir` to specify the absolute path to your project. It will be pip installed on your cluster nodes. \n```\n$ doframework-setup.sh --configs ~/path/to/configs.yaml --project-requirements <absolute_requirements_path> --project-dir <absolute_project_path>\n```\n\nUse the `--skip` flag to skip re-generating the `doframework.yaml`.\n```\n$ doframework-setup.sh --skip\n```\nOr, in case you are familiar with `ray`, run instead \n```\n$ ray up doframework.yaml --no-config-cache --yes\n```\nUpload `input.json` file(s) to your `<inputs_bucket>`. Now you can submit your application `module.py` to the cluster\n```\n$ ray submit doframework.yaml module.py\n```\n\n# Ray Cluster\n\nTo observe the `ray` dashboard, connect to `http://localhost:8265` in your browser. See `./doc/openshift.md` for OpenShift-specific instructions.\n\nSome useful health-check commands: \n\n* Check the status of `ray` pods\n```\n$ kubectl get pods -n ray\n```\n* Check the status of the `ray` head node\n```\n$ kubectl describe pod rayvens-cluster-head-xxxxx -n ray\n```\n* Monitor autoscaling with\n```\n$ ray exec doframework.yaml 'tail -n 100 -f /tmp/ray/session_latest/logs/monitor*'\n```\n* Connect to a terminal on the head node\n```\n$ ray attach doframework.yaml\n$ ...\n$ exit\n```\n* Get a remote shell to the cluster manually (find the head node ID with `kubectl describe`)\n```\n$ kubectl -n ray exec -it rayvens-cluster-head-z97wc -- bash\n```\n\nAfter introducing manual changes to `doframework.yaml`, update with\n```\n$ ray up doframework.yaml --no-config-cache --yes\n```\n\nShutdown the `ray` cluster with\n```\n$ ray down -y doframework.yaml\n```\n\n# Test\n\nRun the setup bash script `doframework-setup.sh` with the `--example` flag to generate the test script  `doframework_example.py` in your project folder.\n```\n$ cd <user_project_folder>\n$ doframework-setup.sh  --configs ~/path/to/configs.yaml --example\n```\n\nTo run the test script locally, use\n```\n$ python doframework_example.py --configs ~/path/to/configs.yaml\n```\n\nTo run the test script on your K8S cluster, use\n```\n$ ray submit doframework.yaml doframework_example.py --configs configs.yaml\n```\n[NOTE: we are using the path to the `configs.yaml` that was mounted on cluster nodes under `$HOME`.]\n\nMake sure to upload input json files to `<inputs-bucket>` / `<inputs-folder>` once you run `doframework_example.py`.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IBM/doframework",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doframework",
    "package_url": "https://pypi.org/project/doframework/",
    "platform": null,
    "project_url": "https://pypi.org/project/doframework/",
    "project_urls": {
      "Homepage": "https://github.com/IBM/doframework"
    },
    "release_url": "https://pypi.org/project/doframework/0.2.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib",
      "ray[default,k8s,serve] (>=1.13.0)",
      "rayvens (>=0.7.0)",
      "ibm-cos-sdk (>=2.10.0)",
      "boto3 (>=1.17.110)",
      "aiohttp (>=3.7.4)",
      "aioredis (>=1.3.1)",
      "scikit-learn (>=0.24.1)",
      "scipy",
      "PuLP (>=2.4)",
      "GPy (>=1.9.9)"
    ],
    "requires_python": ">=3.8",
    "summary": "A testing framework for decision optimization model learning algorithms.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16090975,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cda6053a5b05a0a9370a96adfe4c5ba2e6e296a0f5ca64763c659290458ce8d",
          "md5": "ace2516b21514bb87a92d0b346b73537",
          "sha256": "a36a2769a2d8b4533f2db9985951db8bfa4bc35a7b001bb658407e7ec878f3d6"
        },
        "downloads": -1,
        "filename": "doframework-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ace2516b21514bb87a92d0b346b73537",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 53720,
        "upload_time": "2022-02-06T16:59:01",
        "upload_time_iso_8601": "2022-02-06T16:59:01.770330Z",
        "url": "https://files.pythonhosted.org/packages/2c/da/6053a5b05a0a9370a96adfe4c5ba2e6e296a0f5ca64763c659290458ce8d/doframework-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4c13520a70284a80f5169351ba48c0421a34350b613650bd9e20a57b4914dd0",
          "md5": "60a25bac0926416362ea4b41a7721f8b",
          "sha256": "d50ee39d4cbd10e2c5b01cd84a7c7ffad5b7076756c01120d3a8c387fa676486"
        },
        "downloads": -1,
        "filename": "doframework-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60a25bac0926416362ea4b41a7721f8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 43964,
        "upload_time": "2022-02-06T16:59:03",
        "upload_time_iso_8601": "2022-02-06T16:59:03.810509Z",
        "url": "https://files.pythonhosted.org/packages/f4/c1/3520a70284a80f5169351ba48c0421a34350b613650bd9e20a57b4914dd0/doframework-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ca68363445d97c6b0799d98763c9d6b79ae298fdae7572ffef4dbde52cdb74c",
          "md5": "b4990527e813b1c7f525c245f430afa1",
          "sha256": "b231d29fd5656a2693ba6c5431c3336b1807c6381e5f172ea25c508e29b11fb0"
        },
        "downloads": -1,
        "filename": "doframework-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4990527e813b1c7f525c245f430afa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 53720,
        "upload_time": "2022-02-06T19:57:16",
        "upload_time_iso_8601": "2022-02-06T19:57:16.998980Z",
        "url": "https://files.pythonhosted.org/packages/4c/a6/8363445d97c6b0799d98763c9d6b79ae298fdae7572ffef4dbde52cdb74c/doframework-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105d980d27299fa88029b44a555cacf7647fc2732d576ebe520365b6e50b1d4d",
          "md5": "6f9fcbc069e1ed6802fbf5dc1d9701d6",
          "sha256": "905850b4fd177275b9dc29feefd27c9876381da872b0e7662cbd491378495109"
        },
        "downloads": -1,
        "filename": "doframework-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f9fcbc069e1ed6802fbf5dc1d9701d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43964,
        "upload_time": "2022-02-06T19:57:18",
        "upload_time_iso_8601": "2022-02-06T19:57:18.389337Z",
        "url": "https://files.pythonhosted.org/packages/10/5d/980d27299fa88029b44a555cacf7647fc2732d576ebe520365b6e50b1d4d/doframework-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "953e6328d3cf1b82656ecd12fd9e455407f9768306c63574a53890985ea60019",
          "md5": "827f6b7eda60b5fb59b64a3b4bd5afb0",
          "sha256": "b4913a4939f0cf61a7af5d9de0d04a53dfec7b4d37a9df21fc91be5d679e8cff"
        },
        "downloads": -1,
        "filename": "doframework-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "827f6b7eda60b5fb59b64a3b4bd5afb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 53749,
        "upload_time": "2022-02-08T16:33:52",
        "upload_time_iso_8601": "2022-02-08T16:33:52.820531Z",
        "url": "https://files.pythonhosted.org/packages/95/3e/6328d3cf1b82656ecd12fd9e455407f9768306c63574a53890985ea60019/doframework-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc6452ef74defefe959f6df4e1f023210fa9e63b01aa446f53d221f66b87a412",
          "md5": "2d053b7cc4189ce377b77601c1dc75ee",
          "sha256": "9dac7e613de755d5478020157fbb8a7d82eb523a9f7f178b1c314a2c01c42695"
        },
        "downloads": -1,
        "filename": "doframework-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d053b7cc4189ce377b77601c1dc75ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44004,
        "upload_time": "2022-02-08T16:33:54",
        "upload_time_iso_8601": "2022-02-08T16:33:54.927735Z",
        "url": "https://files.pythonhosted.org/packages/bc/64/52ef74defefe959f6df4e1f023210fa9e63b01aa446f53d221f66b87a412/doframework-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f3223286bf8914f3e993a3565662b9896df1351d106f5c556896b2e736a7a0f",
          "md5": "8e459a7c8b863cfb6c6968324d3fc2dd",
          "sha256": "209e094423e9eed753a96b834b78a8c8e993e04ba5b7ca3a23bc0f851cdd7281"
        },
        "downloads": -1,
        "filename": "doframework-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e459a7c8b863cfb6c6968324d3fc2dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 51091,
        "upload_time": "2022-06-07T14:04:29",
        "upload_time_iso_8601": "2022-06-07T14:04:29.935747Z",
        "url": "https://files.pythonhosted.org/packages/5f/32/23286bf8914f3e993a3565662b9896df1351d106f5c556896b2e736a7a0f/doframework-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb3a5fe5fa7fc84f523637948715ed804442a645fec3d95f37cf005b862fabd0",
          "md5": "ffe516b63768fea480f9065a39a841e3",
          "sha256": "cd6660b0af79913f53553efbddb5ed578cae92cd12a72440f03f3fbb96c4ea70"
        },
        "downloads": -1,
        "filename": "doframework-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ffe516b63768fea480f9065a39a841e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 37552,
        "upload_time": "2022-06-07T14:04:31",
        "upload_time_iso_8601": "2022-06-07T14:04:31.978747Z",
        "url": "https://files.pythonhosted.org/packages/bb/3a/5fe5fa7fc84f523637948715ed804442a645fec3d95f37cf005b862fabd0/doframework-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ce12a88687dd9c28b36e57f6564b0f4387e2fa90ca8b9915855d092c1c2cd1",
          "md5": "4302e2725a35e173e66a76daabfc5dd2",
          "sha256": "8fd61089272dedee0525455bc02d629bce51500a0e40542967913aad44a9a373"
        },
        "downloads": -1,
        "filename": "doframework-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4302e2725a35e173e66a76daabfc5dd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 69156,
        "upload_time": "2022-12-12T17:20:41",
        "upload_time_iso_8601": "2022-12-12T17:20:41.367687Z",
        "url": "https://files.pythonhosted.org/packages/10/ce/12a88687dd9c28b36e57f6564b0f4387e2fa90ca8b9915855d092c1c2cd1/doframework-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57ea9af2a4677386c5a69775f6c9f862c382822c081a13d324bf7f5c568d43fe",
          "md5": "da4ca5399fd6ba096bdf865ab0a0b38e",
          "sha256": "fbf2ce19a11a146a8c1110bd2accd2554e0aa69bfb5f78159464038e1e2e61bd"
        },
        "downloads": -1,
        "filename": "doframework-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da4ca5399fd6ba096bdf865ab0a0b38e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 51938,
        "upload_time": "2022-12-12T17:20:43",
        "upload_time_iso_8601": "2022-12-12T17:20:43.858106Z",
        "url": "https://files.pythonhosted.org/packages/57/ea/9af2a4677386c5a69775f6c9f862c382822c081a13d324bf7f5c568d43fe/doframework-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d9d0970469a458e98e0cd0442f3898fc2993e3de59b28367d1c0b2d22a8155c",
          "md5": "771c9f55dab8a546f44afae66e86c65e",
          "sha256": "b086a9fbb08e5116c013cea451c22e50ac010413a765c945cbea62033e42c381"
        },
        "downloads": -1,
        "filename": "doframework-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "771c9f55dab8a546f44afae66e86c65e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 69297,
        "upload_time": "2022-12-13T20:01:09",
        "upload_time_iso_8601": "2022-12-13T20:01:09.581567Z",
        "url": "https://files.pythonhosted.org/packages/4d/9d/0970469a458e98e0cd0442f3898fc2993e3de59b28367d1c0b2d22a8155c/doframework-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c2ce926b08f16786117f41c137381b95004447519649301729720c1f1b56e9a",
          "md5": "6db16694a299c05b4f7a6e0f47fcf336",
          "sha256": "f31410daa5e619e7e5f9d4f8c380e66572003578dd638805a57d85449769ae0f"
        },
        "downloads": -1,
        "filename": "doframework-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6db16694a299c05b4f7a6e0f47fcf336",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 52086,
        "upload_time": "2022-12-13T20:01:13",
        "upload_time_iso_8601": "2022-12-13T20:01:13.163954Z",
        "url": "https://files.pythonhosted.org/packages/9c/2c/e926b08f16786117f41c137381b95004447519649301729720c1f1b56e9a/doframework-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d9d0970469a458e98e0cd0442f3898fc2993e3de59b28367d1c0b2d22a8155c",
        "md5": "771c9f55dab8a546f44afae66e86c65e",
        "sha256": "b086a9fbb08e5116c013cea451c22e50ac010413a765c945cbea62033e42c381"
      },
      "downloads": -1,
      "filename": "doframework-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "771c9f55dab8a546f44afae66e86c65e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 69297,
      "upload_time": "2022-12-13T20:01:09",
      "upload_time_iso_8601": "2022-12-13T20:01:09.581567Z",
      "url": "https://files.pythonhosted.org/packages/4d/9d/0970469a458e98e0cd0442f3898fc2993e3de59b28367d1c0b2d22a8155c/doframework-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c2ce926b08f16786117f41c137381b95004447519649301729720c1f1b56e9a",
        "md5": "6db16694a299c05b4f7a6e0f47fcf336",
        "sha256": "f31410daa5e619e7e5f9d4f8c380e66572003578dd638805a57d85449769ae0f"
      },
      "downloads": -1,
      "filename": "doframework-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6db16694a299c05b4f7a6e0f47fcf336",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 52086,
      "upload_time": "2022-12-13T20:01:13",
      "upload_time_iso_8601": "2022-12-13T20:01:13.163954Z",
      "url": "https://files.pythonhosted.org/packages/9c/2c/e926b08f16786117f41c137381b95004447519649301729720c1f1b56e9a/doframework-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}